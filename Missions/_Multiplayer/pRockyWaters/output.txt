// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3048 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3471 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 260 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 260
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 62817 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 62817 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 62817 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 62817 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 62817 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 62817 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 62817 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 62817 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 22122 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 62650 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 62650 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 62650 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 62650 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 62650 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 62650 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 62650 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 62650 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 62650 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 62650 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 62650 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 62650 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 62650 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 62650 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 62650 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 62650 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 62817 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 62817 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 62817 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 62817 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 62817 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 62817 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 62817 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 62817 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 62817 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 62817 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 62817 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 62817 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 62817 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 62817 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 62817 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 62817 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 62817 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 62817 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 62817 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 62817 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 62817 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 62817 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 62817 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 62817 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2885
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 59471 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// if GetResourceArea ( center3 , mat_cans ) < 15 then
2745: LD_INT 74
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 287
2755: PUSH
2756: LD_INT 15
2758: LESS
2759: IFFALSE 2791
// begin CreateCratesArea ( x , center3 , true ) ;
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_INT 74
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: CALL_OW 55
// CreateCratesArea ( x , center3 , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_INT 74
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: CALL_OW 55
// end ; for i in areas do
2791: LD_ADDR_VAR 0 1
2795: PUSH
2796: LD_VAR 0 4
2800: PUSH
2801: FOR_IN
2802: IFFALSE 2841
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 287
2816: PUSH
2817: LD_INT 20
2819: LESS
2820: IFFALSE 2839
// begin CreateCratesArea ( x , i , true ) ;
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_VAR 0 1
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 55
// end ; end ;
2839: GO 2801
2841: POP
2842: POP
// time := time + delayTime ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_VAR 0 5
2852: PUSH
2853: LD_VAR 0 7
2857: PLUS
2858: ST_TO_ADDR
// if time > maxTime then
2859: LD_VAR 0 5
2863: PUSH
2864: LD_VAR 0 8
2868: GREATER
2869: IFFALSE 2881
// time := normalTime ;
2871: LD_ADDR_VAR 0 5
2875: PUSH
2876: LD_VAR 0 6
2880: ST_TO_ADDR
// until false ;
2881: LD_INT 0
2883: IFFALSE 2703
// end ; end_of_file
2885: PPOPN 8
2887: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2888: LD_VAR 0 1
2892: PPUSH
2893: CALL 13424 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2897: LD_VAR 0 1
2901: PPUSH
2902: CALL 8594 0 1
// end ;
2906: PPOPN 1
2908: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 13441 0 1
// end ;
2918: PPOPN 1
2920: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL 9647 0 1
2930: PPOPN 1
2932: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2933: LD_VAR 0 1
2937: PPUSH
2938: LD_VAR 0 2
2942: PPUSH
2943: CALL 13482 0 2
2947: PPOPN 2
2949: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2950: LD_VAR 0 1
2954: PPUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: CALL 9400 0 2
2964: PPOPN 2
2966: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2967: LD_VAR 0 1
2971: PPUSH
2972: LD_VAR 0 2
2976: PPUSH
2977: LD_VAR 0 3
2981: PPUSH
2982: CALL 9700 0 3
2986: PPOPN 3
2988: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: LD_VAR 0 2
2998: PPUSH
2999: LD_VAR 0 3
3003: PPUSH
3004: LD_VAR 0 4
3008: PPUSH
3009: LD_VAR 0 5
3013: PPUSH
3014: CALL 10384 0 5
3018: PPOPN 5
3020: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3021: LD_VAR 0 1
3025: PPUSH
3026: LD_VAR 0 2
3030: PPUSH
3031: LD_VAR 0 3
3035: PPUSH
3036: LD_VAR 0 4
3040: PPUSH
3041: CALL 10487 0 4
3045: PPOPN 4
3047: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3048: LD_INT 0
3050: PPUSH
3051: PPUSH
// disable ( mpActive ) ;
3052: LD_INT 100
3054: DISABLE_MARKED
// disable ( mpWin ) ;
3055: LD_INT 101
3057: DISABLE_MARKED
// disable ( mpLose ) ;
3058: LD_INT 102
3060: DISABLE_MARKED
// mpGameType := 0 ;
3061: LD_ADDR_EXP 1
3065: PUSH
3066: LD_INT 0
3068: ST_TO_ADDR
// mpGameSettings := [ ] ;
3069: LD_ADDR_EXP 4
3073: PUSH
3074: EMPTY
3075: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3076: LD_ADDR_EXP 2
3080: PUSH
3081: EMPTY
3082: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3083: LD_ADDR_EXP 3
3087: PUSH
3088: EMPTY
3089: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3090: LD_ADDR_EXP 27
3094: PUSH
3095: LD_INT 2
3097: PUSH
3098: LD_INT 2
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3105: LD_ADDR_EXP 10
3109: PUSH
3110: EMPTY
3111: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3112: LD_ADDR_EXP 11
3116: PUSH
3117: EMPTY
3118: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3119: LD_ADDR_EXP 40
3123: PUSH
3124: EMPTY
3125: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3126: LD_ADDR_EXP 41
3130: PUSH
3131: EMPTY
3132: ST_TO_ADDR
// mpDepots := [ ] ;
3133: LD_ADDR_EXP 12
3137: PUSH
3138: EMPTY
3139: ST_TO_ADDR
// mpBuildings := [ ] ;
3140: LD_ADDR_EXP 15
3144: PUSH
3145: EMPTY
3146: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3147: LD_ADDR_EXP 16
3151: PUSH
3152: EMPTY
3153: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3154: LD_ADDR_EXP 17
3158: PUSH
3159: EMPTY
3160: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3161: LD_ADDR_EXP 18
3165: PUSH
3166: EMPTY
3167: ST_TO_ADDR
// mpStartingResources := [ ] ;
3168: LD_ADDR_EXP 13
3172: PUSH
3173: EMPTY
3174: ST_TO_ADDR
// mpStartPos := [ ] ;
3175: LD_ADDR_EXP 19
3179: PUSH
3180: EMPTY
3181: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3182: LD_ADDR_EXP 20
3186: PUSH
3187: LD_INT 1
3189: NEG
3190: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3191: LD_ADDR_EXP 21
3195: PUSH
3196: EMPTY
3197: ST_TO_ADDR
// mpApemans := [ ] ;
3198: LD_ADDR_EXP 28
3202: PUSH
3203: EMPTY
3204: ST_TO_ADDR
// mpApemansArea := [ ] ;
3205: LD_ADDR_EXP 29
3209: PUSH
3210: EMPTY
3211: ST_TO_ADDR
// mpRespawn := [ ] ;
3212: LD_ADDR_EXP 31
3216: PUSH
3217: EMPTY
3218: ST_TO_ADDR
// mpKingArea := 0 ;
3219: LD_ADDR_EXP 32
3223: PUSH
3224: LD_INT 0
3226: ST_TO_ADDR
// mpPoints := [ ] ;
3227: LD_ADDR_EXP 33
3231: PUSH
3232: EMPTY
3233: ST_TO_ADDR
// mpVehicles := 0 ;
3234: LD_ADDR_EXP 34
3238: PUSH
3239: LD_INT 0
3241: ST_TO_ADDR
// mpShipments := 0 ;
3242: LD_ADDR_EXP 25
3246: PUSH
3247: LD_INT 0
3249: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3250: LD_ADDR_EXP 38
3254: PUSH
3255: EMPTY
3256: PUSH
3257: EMPTY
3258: PUSH
3259: EMPTY
3260: PUSH
3261: EMPTY
3262: PUSH
3263: EMPTY
3264: PUSH
3265: EMPTY
3266: PUSH
3267: EMPTY
3268: PUSH
3269: EMPTY
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3281: LD_ADDR_EXP 30
3285: PUSH
3286: EMPTY
3287: PUSH
3288: EMPTY
3289: PUSH
3290: EMPTY
3291: PUSH
3292: EMPTY
3293: PUSH
3294: EMPTY
3295: PUSH
3296: EMPTY
3297: PUSH
3298: EMPTY
3299: PUSH
3300: EMPTY
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3312: LD_ADDR_EXP 39
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: LD_INT 0
3328: PUSH
3329: LD_INT 0
3331: PUSH
3332: LD_INT 0
3334: PUSH
3335: LD_INT 0
3337: PUSH
3338: LD_INT 0
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: ST_TO_ADDR
// mpEmissions := 0 ;
3351: LD_ADDR_EXP 35
3355: PUSH
3356: LD_INT 0
3358: ST_TO_ADDR
// mpTeleports := 0 ;
3359: LD_ADDR_EXP 42
3363: PUSH
3364: LD_INT 0
3366: ST_TO_ADDR
// mpArtifacts := 0 ;
3367: LD_ADDR_EXP 43
3371: PUSH
3372: LD_INT 0
3374: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3375: LD_ADDR_EXP 44
3379: PUSH
3380: LD_INT 0
3382: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3383: LD_ADDR_EXP 23
3387: PUSH
3388: LD_INT 3
3390: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3391: LD_ADDR_EXP 22
3395: PUSH
3396: LD_INT 15
3398: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3399: LD_ADDR_EXP 36
3403: PUSH
3404: LD_INT 0
3406: ST_TO_ADDR
// mpGameActive := false ;
3407: LD_ADDR_EXP 37
3411: PUSH
3412: LD_INT 0
3414: ST_TO_ADDR
// mpBlockRespThread := false ;
3415: LD_ADDR_EXP 45
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// for i := 1 to 32 do
3423: LD_ADDR_VAR 0 2
3427: PUSH
3428: DOUBLE
3429: LD_INT 1
3431: DEC
3432: ST_TO_ADDR
3433: LD_INT 32
3435: PUSH
3436: FOR_TO
3437: IFFALSE 3464
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3439: LD_ADDR_EXP 4
3443: PUSH
3444: LD_EXP 4
3448: PPUSH
3449: LD_VAR 0 2
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: CALL_OW 1
3461: ST_TO_ADDR
3462: GO 3436
3464: POP
3465: POP
// end ;
3466: LD_VAR 0 1
3470: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3471: LD_INT 0
3473: PPUSH
3474: PPUSH
3475: PPUSH
3476: PPUSH
3477: PPUSH
3478: PPUSH
3479: PPUSH
3480: PPUSH
3481: PPUSH
3482: PPUSH
3483: PPUSH
3484: PPUSH
3485: PPUSH
3486: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3487: LD_ADDR_VAR 0 14
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: LD_INT 3
3500: PUSH
3501: LD_INT 5
3503: PUSH
3504: LD_INT 6
3506: PUSH
3507: LD_INT 7
3509: PUSH
3510: LD_INT 8
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: ST_TO_ADDR
// for i in gameTypes do
3522: LD_ADDR_VAR 0 2
3526: PUSH
3527: LD_VAR 0 14
3531: PUSH
3532: FOR_IN
3533: IFFALSE 3542
// disable ( i ) ;
3535: LD_VAR 0 2
3539: DISABLE_MARKED
3540: GO 3532
3542: POP
3543: POP
// if Multiplayer then
3544: LD_OWVAR 4
3548: IFFALSE 3732
// begin mpGameType := mp_game_type ;
3550: LD_ADDR_EXP 1
3554: PUSH
3555: LD_OWVAR 6
3559: ST_TO_ADDR
// your_side := mp_player_side ;
3560: LD_ADDR_OWVAR 2
3564: PUSH
3565: LD_OWVAR 7
3569: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3570: LD_ADDR_EXP 5
3574: PUSH
3575: LD_OWVAR 17
3579: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3580: LD_ADDR_EXP 6
3584: PUSH
3585: LD_OWVAR 15
3589: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3590: LD_ADDR_EXP 7
3594: PUSH
3595: LD_OWVAR 16
3599: ST_TO_ADDR
// mpTeams := mp_teams ;
3600: LD_ADDR_EXP 8
3604: PUSH
3605: LD_OWVAR 12
3609: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3610: LD_ADDR_VAR 0 2
3614: PUSH
3615: DOUBLE
3616: LD_INT 1
3618: DEC
3619: ST_TO_ADDR
3620: LD_EXP 2
3624: PPUSH
3625: CALL 22122 0 1
3629: PUSH
3630: FOR_TO
3631: IFFALSE 3707
// begin setting := mpGameSettingsKeys [ i ] ;
3633: LD_ADDR_VAR 0 12
3637: PUSH
3638: LD_EXP 2
3642: PUSH
3643: LD_VAR 0 2
3647: ARRAY
3648: ST_TO_ADDR
// if setting then
3649: LD_VAR 0 12
3653: IFFALSE 3705
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3655: LD_ADDR_EXP 4
3659: PUSH
3660: LD_EXP 4
3664: PPUSH
3665: LD_VAR 0 2
3669: PPUSH
3670: LD_EXP 3
3674: PUSH
3675: LD_VAR 0 2
3679: ARRAY
3680: PUSH
3681: LD_VAR 0 2
3685: PUSH
3686: LD_INT 1
3688: MINUS
3689: PPUSH
3690: CALL_OW 426
3694: PUSH
3695: LD_INT 1
3697: PLUS
3698: ARRAY
3699: PPUSH
3700: CALL_OW 1
3704: ST_TO_ADDR
// end ;
3705: GO 3630
3707: POP
3708: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3709: LD_ADDR_EXP 9
3713: PUSH
3714: LD_EXP 6
3718: PUSH
3719: LD_INT 0
3721: PUSH
3722: EMPTY
3723: LIST
3724: DIFF
3725: PUSH
3726: LD_INT 1
3728: GREATER
3729: ST_TO_ADDR
// end else
3730: GO 3732
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3732: LD_EXP 1
3736: PPUSH
3737: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3741: LD_EXP 16
3745: PPUSH
3746: CALL 22122 0 1
3750: IFFALSE 3781
// begin for i in mpMarkedAreas do
3752: LD_ADDR_VAR 0 2
3756: PUSH
3757: LD_EXP 16
3761: PUSH
3762: FOR_IN
3763: IFFALSE 3779
// SetAreaMapShow ( i , 0 ) ;
3765: LD_VAR 0 2
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: CALL_OW 424
3777: GO 3762
3779: POP
3780: POP
// end ; for i := 1 to 8 do
3781: LD_ADDR_VAR 0 2
3785: PUSH
3786: DOUBLE
3787: LD_INT 1
3789: DEC
3790: ST_TO_ADDR
3791: LD_INT 8
3793: PUSH
3794: FOR_TO
3795: IFFALSE 5254
// begin if not mpSidePositions [ i ] then
3797: LD_EXP 5
3801: PUSH
3802: LD_VAR 0 2
3806: ARRAY
3807: NOT
3808: IFFALSE 3812
// continue ;
3810: GO 3794
// side := i ;
3812: LD_ADDR_VAR 0 7
3816: PUSH
3817: LD_VAR 0 2
3821: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3822: LD_ADDR_VAR 0 9
3826: PUSH
3827: LD_EXP 7
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3838: LD_ADDR_VAR 0 8
3842: PUSH
3843: LD_EXP 5
3847: PUSH
3848: LD_VAR 0 2
3852: ARRAY
3853: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3854: LD_EXP 10
3858: PPUSH
3859: CALL 22122 0 1
3863: IFFALSE 3940
// begin for j in mpOilDeposits [ pos ] do
3865: LD_ADDR_VAR 0 3
3869: PUSH
3870: LD_EXP 10
3874: PUSH
3875: LD_VAR 0 8
3879: ARRAY
3880: PUSH
3881: FOR_IN
3882: IFFALSE 3938
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3884: LD_VAR 0 3
3888: PUSH
3889: LD_INT 1
3891: ARRAY
3892: PPUSH
3893: LD_VAR 0 3
3897: PUSH
3898: LD_INT 2
3900: ARRAY
3901: PPUSH
3902: LD_INT 2
3904: PPUSH
3905: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_INT 1
3916: ARRAY
3917: PPUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_INT 2
3925: ARRAY
3926: PPUSH
3927: LD_VAR 0 7
3931: PPUSH
3932: CALL_OW 441
// end ;
3936: GO 3881
3938: POP
3939: POP
// end ; if Count ( mpSibDeposits ) then
3940: LD_EXP 11
3944: PPUSH
3945: CALL 22122 0 1
3949: IFFALSE 4026
// begin for j in mpSibDeposits [ pos ] do
3951: LD_ADDR_VAR 0 3
3955: PUSH
3956: LD_EXP 11
3960: PUSH
3961: LD_VAR 0 8
3965: ARRAY
3966: PUSH
3967: FOR_IN
3968: IFFALSE 4024
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3970: LD_VAR 0 3
3974: PUSH
3975: LD_INT 1
3977: ARRAY
3978: PPUSH
3979: LD_VAR 0 3
3983: PUSH
3984: LD_INT 2
3986: ARRAY
3987: PPUSH
3988: LD_INT 3
3990: PPUSH
3991: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3995: LD_VAR 0 3
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: LD_VAR 0 3
4008: PUSH
4009: LD_INT 2
4011: ARRAY
4012: PPUSH
4013: LD_VAR 0 7
4017: PPUSH
4018: CALL_OW 441
// end ;
4022: GO 3967
4024: POP
4025: POP
// end ; InitBc ;
4026: CALL_OW 21
// InitUc ;
4030: CALL_OW 18
// uc_side := side ;
4034: LD_ADDR_OWVAR 20
4038: PUSH
4039: LD_VAR 0 7
4043: ST_TO_ADDR
// uc_nation := nation ;
4044: LD_ADDR_OWVAR 21
4048: PUSH
4049: LD_VAR 0 9
4053: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4054: LD_EXP 20
4058: PUSH
4059: LD_INT 1
4061: NEG
4062: GREATER
4063: IFFALSE 4222
// begin x := mpStartPos [ pos ] [ 1 ] ;
4065: LD_ADDR_VAR 0 5
4069: PUSH
4070: LD_EXP 19
4074: PUSH
4075: LD_VAR 0 8
4079: ARRAY
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4085: LD_ADDR_VAR 0 6
4089: PUSH
4090: LD_EXP 19
4094: PUSH
4095: LD_VAR 0 8
4099: ARRAY
4100: PUSH
4101: LD_INT 2
4103: ARRAY
4104: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4105: LD_VAR 0 5
4109: PPUSH
4110: LD_VAR 0 6
4114: PPUSH
4115: LD_INT 12
4117: PPUSH
4118: LD_INT 2
4120: PPUSH
4121: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4125: LD_ADDR_EXP 21
4129: PUSH
4130: LD_EXP 21
4134: PPUSH
4135: LD_VAR 0 7
4139: PPUSH
4140: LD_VAR 0 7
4144: PPUSH
4145: LD_VAR 0 5
4149: PPUSH
4150: LD_VAR 0 6
4154: PPUSH
4155: LD_INT 1
4157: PUSH
4158: LD_INT 100
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 2
4167: PUSH
4168: LD_INT 70
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: LD_INT 40
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 10
4187: PUSH
4188: LD_INT 25
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: LD_INT 20
4197: PUSH
4198: LD_INT 100
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: PPUSH
4212: CALL_OW 418
4216: PPUSH
4217: CALL_OW 1
4221: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4222: LD_EXP 12
4226: PPUSH
4227: CALL 22122 0 1
4231: IFFALSE 4430
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
4233: LD_EXP 1
4237: PUSH
4238: LD_INT 2
4240: PUSH
4241: LD_INT 8
4243: PUSH
4244: LD_INT 6
4246: PUSH
4247: LD_INT 7
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: IN
4256: IFFALSE 4276
// begin bc_level := 10 ;
4258: LD_ADDR_OWVAR 43
4262: PUSH
4263: LD_INT 10
4265: ST_TO_ADDR
// bc_type := b_warehouse ;
4266: LD_ADDR_OWVAR 42
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// end else
4274: GO 4292
// begin bc_level := 0 ;
4276: LD_ADDR_OWVAR 43
4280: PUSH
4281: LD_INT 0
4283: ST_TO_ADDR
// bc_type := b_depot ;
4284: LD_ADDR_OWVAR 42
4288: PUSH
4289: LD_INT 0
4291: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4292: LD_ADDR_VAR 0 4
4296: PUSH
4297: LD_EXP 12
4301: PUSH
4302: LD_VAR 0 8
4306: ARRAY
4307: PUSH
4308: LD_INT 1
4310: ARRAY
4311: PPUSH
4312: LD_EXP 12
4316: PUSH
4317: LD_VAR 0 8
4321: ARRAY
4322: PUSH
4323: LD_INT 2
4325: ARRAY
4326: PPUSH
4327: LD_EXP 12
4331: PUSH
4332: LD_VAR 0 8
4336: ARRAY
4337: PUSH
4338: LD_INT 3
4340: ARRAY
4341: PPUSH
4342: CALL_OW 47
4346: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4347: LD_VAR 0 4
4351: PPUSH
4352: LD_STRING @
4354: PUSH
4355: LD_VAR 0 7
4359: STR
4360: PPUSH
4361: CALL_OW 500
// if Count ( mpStartingResources ) then
4365: LD_EXP 13
4369: PPUSH
4370: CALL 22122 0 1
4374: IFFALSE 4428
// begin for j := 1 to mpStartingResources do
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: DOUBLE
4382: LD_INT 1
4384: DEC
4385: ST_TO_ADDR
4386: LD_EXP 13
4390: PUSH
4391: FOR_TO
4392: IFFALSE 4426
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4394: LD_VAR 0 4
4398: PPUSH
4399: CALL_OW 274
4403: PPUSH
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_EXP 13
4413: PUSH
4414: LD_VAR 0 3
4418: ARRAY
4419: PPUSH
4420: CALL_OW 277
4424: GO 4391
4426: POP
4427: POP
// end ; end else
4428: GO 4637
// if Count ( mpStartingResources ) then
4430: LD_EXP 13
4434: PPUSH
4435: CALL 22122 0 1
4439: IFFALSE 4637
// begin x := mpStartPos [ pos ] [ 1 ] ;
4441: LD_ADDR_VAR 0 5
4445: PUSH
4446: LD_EXP 19
4450: PUSH
4451: LD_VAR 0 8
4455: ARRAY
4456: PUSH
4457: LD_INT 1
4459: ARRAY
4460: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4461: LD_ADDR_VAR 0 6
4465: PUSH
4466: LD_EXP 19
4470: PUSH
4471: LD_VAR 0 8
4475: ARRAY
4476: PUSH
4477: LD_INT 2
4479: ARRAY
4480: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4481: LD_ADDR_VAR 0 3
4485: PUSH
4486: DOUBLE
4487: LD_INT 1
4489: DEC
4490: ST_TO_ADDR
4491: LD_EXP 13
4495: PUSH
4496: FOR_TO
4497: IFFALSE 4635
// begin resources := mpStartingResources [ j ] ;
4499: LD_ADDR_VAR 0 13
4503: PUSH
4504: LD_EXP 13
4508: PUSH
4509: LD_VAR 0 3
4513: ARRAY
4514: ST_TO_ADDR
// if resources = 0 then
4515: LD_VAR 0 13
4519: PUSH
4520: LD_INT 0
4522: EQUAL
4523: IFFALSE 4527
// continue ;
4525: GO 4496
// repeat if resources >= 50 then
4527: LD_VAR 0 13
4531: PUSH
4532: LD_INT 50
4534: GREATEREQUAL
4535: IFFALSE 4581
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4537: LD_VAR 0 3
4541: PPUSH
4542: LD_INT 5
4544: PPUSH
4545: LD_VAR 0 5
4549: PPUSH
4550: LD_VAR 0 6
4554: PPUSH
4555: LD_INT 6
4557: PPUSH
4558: LD_INT 0
4560: PPUSH
4561: CALL_OW 60
// resources := resources - 50 ;
4565: LD_ADDR_VAR 0 13
4569: PUSH
4570: LD_VAR 0 13
4574: PUSH
4575: LD_INT 50
4577: MINUS
4578: ST_TO_ADDR
// end else
4579: GO 4623
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4581: LD_VAR 0 3
4585: PPUSH
4586: LD_VAR 0 13
4590: PUSH
4591: LD_INT 10
4593: DIV
4594: PPUSH
4595: LD_VAR 0 5
4599: PPUSH
4600: LD_VAR 0 6
4604: PPUSH
4605: LD_INT 6
4607: PPUSH
4608: LD_INT 0
4610: PPUSH
4611: CALL_OW 60
// resources := 0 ;
4615: LD_ADDR_VAR 0 13
4619: PUSH
4620: LD_INT 0
4622: ST_TO_ADDR
// end ; until resources <= 0 ;
4623: LD_VAR 0 13
4627: PUSH
4628: LD_INT 0
4630: LESSEQUAL
4631: IFFALSE 4527
// end ;
4633: GO 4496
4635: POP
4636: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
4637: LD_EXP 15
4641: PPUSH
4642: CALL 22122 0 1
4646: IFFALSE 4666
4648: PUSH
4649: LD_EXP 1
4653: PUSH
4654: LD_INT 2
4656: PUSH
4657: LD_INT 8
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: IN
4664: NOT
4665: AND
4666: IFFALSE 4744
// begin for j in mpBuildings [ pos ] do
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: LD_EXP 15
4677: PUSH
4678: LD_VAR 0 8
4682: ARRAY
4683: PUSH
4684: FOR_IN
4685: IFFALSE 4742
// begin bc_level := 0 ;
4687: LD_ADDR_OWVAR 43
4691: PUSH
4692: LD_INT 0
4694: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4695: LD_ADDR_OWVAR 42
4699: PUSH
4700: LD_VAR 0 3
4704: PUSH
4705: LD_INT 1
4707: ARRAY
4708: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4709: LD_VAR 0 3
4713: PUSH
4714: LD_INT 2
4716: ARRAY
4717: PPUSH
4718: LD_VAR 0 3
4722: PUSH
4723: LD_INT 3
4725: ARRAY
4726: PPUSH
4727: LD_VAR 0 3
4731: PUSH
4732: LD_INT 4
4734: ARRAY
4735: PPUSH
4736: CALL_OW 47
// end ;
4740: GO 4684
4742: POP
4743: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4744: LD_EXP 24
4748: IFFALSE 4768
4750: PUSH
4751: LD_INT 20
4753: PPUSH
4754: LD_VAR 0 7
4758: PPUSH
4759: CALL_OW 321
4763: PUSH
4764: LD_INT 1
4766: EQUAL
4767: AND
4768: IFFALSE 4785
// SetTech ( tech_SibDet , side , state_researched ) ;
4770: LD_INT 20
4772: PPUSH
4773: LD_VAR 0 7
4777: PPUSH
4778: LD_INT 2
4780: PPUSH
4781: CALL_OW 322
// if not mpArtifacts then
4785: LD_EXP 43
4789: NOT
4790: IFFALSE 4807
// SetTech ( tech_artifact , side , state_disabled ) ;
4792: LD_INT 24
4794: PPUSH
4795: LD_VAR 0 7
4799: PPUSH
4800: LD_INT 0
4802: PPUSH
4803: CALL_OW 322
// if mpSibBomb = 1 then
4807: LD_EXP 26
4811: PUSH
4812: LD_INT 1
4814: EQUAL
4815: IFFALSE 4834
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4817: LD_INT 25
4819: PPUSH
4820: LD_VAR 0 7
4824: PPUSH
4825: LD_INT 1
4827: PPUSH
4828: CALL_OW 322
// end else
4832: GO 4849
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4834: LD_INT 25
4836: PPUSH
4837: LD_VAR 0 7
4841: PPUSH
4842: LD_INT 0
4844: PPUSH
4845: CALL_OW 322
// end ; if mpVehicles then
4849: LD_EXP 34
4853: IFFALSE 4952
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4855: LD_ADDR_VAR 0 3
4859: PUSH
4860: LD_VAR 0 7
4864: PPUSH
4865: LD_VAR 0 9
4869: PPUSH
4870: LD_EXP 34
4874: PPUSH
4875: CALL 6211 0 3
4879: PUSH
4880: FOR_IN
4881: IFFALSE 4950
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4883: LD_VAR 0 3
4887: PPUSH
4888: LD_INT 0
4890: PPUSH
4891: LD_INT 5
4893: PPUSH
4894: CALL_OW 12
4898: PPUSH
4899: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4903: LD_VAR 0 3
4907: PPUSH
4908: LD_EXP 19
4912: PUSH
4913: LD_VAR 0 8
4917: ARRAY
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: LD_EXP 19
4927: PUSH
4928: LD_VAR 0 8
4932: ARRAY
4933: PUSH
4934: LD_INT 2
4936: ARRAY
4937: PPUSH
4938: LD_INT 12
4940: PPUSH
4941: LD_INT 0
4943: PPUSH
4944: CALL_OW 50
// end ;
4948: GO 4880
4950: POP
4951: POP
// end ; uc_nation := nation ;
4952: LD_ADDR_OWVAR 21
4956: PUSH
4957: LD_VAR 0 9
4961: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4962: LD_EXP 1
4966: PUSH
4967: LD_INT 6
4969: PUSH
4970: LD_INT 7
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: IN
4977: IFFALSE 5002
4979: PUSH
4980: LD_EXP 5
4984: PUSH
4985: LD_VAR 0 2
4989: ARRAY
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: LD_INT 2
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: IN
5001: AND
5002: IFFALSE 5050
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
5004: LD_ADDR_VAR 0 11
5008: PUSH
5009: LD_VAR 0 7
5013: PPUSH
5014: LD_VAR 0 9
5018: PPUSH
5019: LD_EXP 22
5023: PUSH
5024: LD_EXP 22
5028: PUSH
5029: LD_INT 2
5031: DIV
5032: PLUS
5033: PPUSH
5034: LD_EXP 23
5038: PUSH
5039: LD_INT 1
5041: PLUS
5042: PPUSH
5043: CALL 5666 0 4
5047: ST_TO_ADDR
5048: GO 5080
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
5050: LD_ADDR_VAR 0 11
5054: PUSH
5055: LD_VAR 0 7
5059: PPUSH
5060: LD_VAR 0 9
5064: PPUSH
5065: LD_EXP 22
5069: PPUSH
5070: LD_EXP 23
5074: PPUSH
5075: CALL 5666 0 4
5079: ST_TO_ADDR
// for j in team do
5080: LD_ADDR_VAR 0 3
5084: PUSH
5085: LD_VAR 0 11
5089: PUSH
5090: FOR_IN
5091: IFFALSE 5140
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5093: LD_VAR 0 3
5097: PPUSH
5098: LD_EXP 19
5102: PUSH
5103: LD_VAR 0 8
5107: ARRAY
5108: PUSH
5109: LD_INT 1
5111: ARRAY
5112: PPUSH
5113: LD_EXP 19
5117: PUSH
5118: LD_VAR 0 8
5122: ARRAY
5123: PUSH
5124: LD_INT 2
5126: ARRAY
5127: PPUSH
5128: LD_INT 12
5130: PPUSH
5131: LD_INT 0
5133: PPUSH
5134: CALL_OW 50
5138: GO 5090
5140: POP
5141: POP
// if mpApemans then
5142: LD_EXP 28
5146: IFFALSE 5252
// begin for j := 1 to mpApemans do
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: DOUBLE
5154: LD_INT 1
5156: DEC
5157: ST_TO_ADDR
5158: LD_EXP 28
5162: PUSH
5163: FOR_TO
5164: IFFALSE 5250
// begin PrepareApeman ( - 5 ) ;
5166: LD_INT 5
5168: NEG
5169: PPUSH
5170: CALL 54225 0 1
// ape := CreateHuman ;
5174: LD_ADDR_VAR 0 10
5178: PUSH
5179: CALL_OW 44
5183: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5184: LD_ADDR_EXP 30
5188: PUSH
5189: LD_EXP 30
5193: PPUSH
5194: LD_VAR 0 8
5198: PPUSH
5199: LD_EXP 30
5203: PUSH
5204: LD_VAR 0 8
5208: ARRAY
5209: PPUSH
5210: LD_VAR 0 10
5214: PPUSH
5215: CALL 58098 0 2
5219: PPUSH
5220: CALL_OW 1
5224: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5225: LD_VAR 0 10
5229: PPUSH
5230: LD_EXP 29
5234: PUSH
5235: LD_VAR 0 8
5239: ARRAY
5240: PPUSH
5241: LD_INT 0
5243: PPUSH
5244: CALL_OW 49
// end ;
5248: GO 5163
5250: POP
5251: POP
// end ; end ;
5252: GO 3794
5254: POP
5255: POP
// if not mpTeamGame then
5256: LD_EXP 9
5260: NOT
5261: IFFALSE 5359
// begin for i := 1 to 8 do
5263: LD_ADDR_VAR 0 2
5267: PUSH
5268: DOUBLE
5269: LD_INT 1
5271: DEC
5272: ST_TO_ADDR
5273: LD_INT 8
5275: PUSH
5276: FOR_TO
5277: IFFALSE 5355
// for j := 1 to 8 do
5279: LD_ADDR_VAR 0 3
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_INT 8
5291: PUSH
5292: FOR_TO
5293: IFFALSE 5351
// if i <> j then
5295: LD_VAR 0 2
5299: PUSH
5300: LD_VAR 0 3
5304: NONEQUAL
5305: IFFALSE 5329
// SetAttitude ( i , j , att_neutral , true ) else
5307: LD_VAR 0 2
5311: PPUSH
5312: LD_VAR 0 3
5316: PPUSH
5317: LD_INT 0
5319: PPUSH
5320: LD_INT 1
5322: PPUSH
5323: CALL_OW 80
5327: GO 5349
// SetAttitude ( i , j , att_friend , true ) ;
5329: LD_VAR 0 2
5333: PPUSH
5334: LD_VAR 0 3
5338: PPUSH
5339: LD_INT 1
5341: PPUSH
5342: LD_INT 1
5344: PPUSH
5345: CALL_OW 80
5349: GO 5292
5351: POP
5352: POP
5353: GO 5276
5355: POP
5356: POP
// end else
5357: GO 5534
// begin if mpSharedVision then
5359: LD_EXP 14
5363: IFFALSE 5428
// begin for i in mpTeams do
5365: LD_ADDR_VAR 0 2
5369: PUSH
5370: LD_EXP 8
5374: PUSH
5375: FOR_IN
5376: IFFALSE 5426
// for j := 2 to i do
5378: LD_ADDR_VAR 0 3
5382: PUSH
5383: DOUBLE
5384: LD_INT 2
5386: DEC
5387: ST_TO_ADDR
5388: LD_VAR 0 2
5392: PUSH
5393: FOR_TO
5394: IFFALSE 5422
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5396: LD_VAR 0 2
5400: PUSH
5401: LD_VAR 0 3
5405: ARRAY
5406: PPUSH
5407: LD_VAR 0 2
5411: PUSH
5412: LD_INT 1
5414: ARRAY
5415: PPUSH
5416: CALL_OW 343
5420: GO 5393
5422: POP
5423: POP
5424: GO 5375
5426: POP
5427: POP
// end ; for i := 1 to 8 do
5428: LD_ADDR_VAR 0 2
5432: PUSH
5433: DOUBLE
5434: LD_INT 1
5436: DEC
5437: ST_TO_ADDR
5438: LD_INT 8
5440: PUSH
5441: FOR_TO
5442: IFFALSE 5532
// for j := 1 to 8 do
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: DOUBLE
5450: LD_INT 1
5452: DEC
5453: ST_TO_ADDR
5454: LD_INT 8
5456: PUSH
5457: FOR_TO
5458: IFFALSE 5528
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5460: LD_EXP 6
5464: PUSH
5465: LD_VAR 0 2
5469: ARRAY
5470: PUSH
5471: LD_EXP 6
5475: PUSH
5476: LD_VAR 0 3
5480: ARRAY
5481: EQUAL
5482: IFFALSE 5506
// SetAttitude ( i , j , att_friend , true ) else
5484: LD_VAR 0 2
5488: PPUSH
5489: LD_VAR 0 3
5493: PPUSH
5494: LD_INT 1
5496: PPUSH
5497: LD_INT 1
5499: PPUSH
5500: CALL_OW 80
5504: GO 5526
// SetAttitude ( i , j , att_enemy , true ) ;
5506: LD_VAR 0 2
5510: PPUSH
5511: LD_VAR 0 3
5515: PPUSH
5516: LD_INT 2
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 80
5526: GO 5457
5528: POP
5529: POP
5530: GO 5441
5532: POP
5533: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5534: LD_ADDR_OWVAR 71
5538: PUSH
5539: LD_EXP 7
5543: PUSH
5544: LD_OWVAR 2
5548: ARRAY
5549: ST_TO_ADDR
// if IAmSpec then
5550: CALL_OW 531
5554: IFFALSE 5595
// begin FogOff ( true ) ;
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5563: LD_EXP 27
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PUSH
5572: LD_INT 2
5574: DIV
5575: PPUSH
5576: LD_EXP 27
5580: PUSH
5581: LD_INT 2
5583: ARRAY
5584: PUSH
5585: LD_INT 2
5587: DIV
5588: PPUSH
5589: CALL_OW 86
// end else
5593: GO 5641
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5595: LD_EXP 19
5599: PUSH
5600: LD_EXP 5
5604: PUSH
5605: LD_OWVAR 2
5609: ARRAY
5610: ARRAY
5611: PUSH
5612: LD_INT 1
5614: ARRAY
5615: PPUSH
5616: LD_EXP 19
5620: PUSH
5621: LD_EXP 5
5625: PUSH
5626: LD_OWVAR 2
5630: ARRAY
5631: ARRAY
5632: PUSH
5633: LD_INT 2
5635: ARRAY
5636: PPUSH
5637: CALL_OW 86
// end ; BeginBuildUp ;
5641: CALL 6744 0 0
// enable ( mpActive ) ;
5645: LD_INT 100
5647: ENABLE_MARKED
// enable ( mpGameType ) ;
5648: LD_EXP 1
5652: ENABLE_MARKED
// mpGameActive := true ;
5653: LD_ADDR_EXP 37
5657: PUSH
5658: LD_INT 1
5660: ST_TO_ADDR
// end ;
5661: LD_VAR 0 1
5665: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5666: LD_INT 0
5668: PPUSH
5669: PPUSH
5670: PPUSH
5671: PPUSH
5672: PPUSH
// result := [ ] ;
5673: LD_ADDR_VAR 0 5
5677: PUSH
5678: EMPTY
5679: ST_TO_ADDR
// class := class_soldier ;
5680: LD_ADDR_VAR 0 8
5684: PUSH
5685: LD_INT 1
5687: ST_TO_ADDR
// uc_side := side ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_VAR 0 1
5697: ST_TO_ADDR
// uc_nation := nation ;
5698: LD_ADDR_OWVAR 21
5702: PUSH
5703: LD_VAR 0 2
5707: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5708: LD_ADDR_OWVAR 26
5712: PUSH
5713: LD_OWVAR 19
5717: PUSH
5718: LD_VAR 0 1
5722: ARRAY
5723: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5724: LD_INT 1
5726: PPUSH
5727: LD_INT 2
5729: PPUSH
5730: CALL_OW 12
5734: PPUSH
5735: LD_VAR 0 8
5739: PPUSH
5740: LD_VAR 0 4
5744: PUSH
5745: LD_INT 2
5747: PLUS
5748: PPUSH
5749: CALL_OW 380
// hc_importance := 105 ;
5753: LD_ADDR_OWVAR 32
5757: PUSH
5758: LD_INT 105
5760: ST_TO_ADDR
// if Multiplayer then
5761: LD_OWVAR 4
5765: IFFALSE 5805
// begin hc_gallery := MULTIAVATARS ;
5767: LD_ADDR_OWVAR 33
5771: PUSH
5772: LD_STRING MULTIAVATARS
5774: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5775: LD_ADDR_OWVAR 34
5779: PUSH
5780: LD_VAR 0 1
5784: PPUSH
5785: CALL_OW 525
5789: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5790: LD_ADDR_OWVAR 27
5794: PUSH
5795: LD_VAR 0 1
5799: PPUSH
5800: CALL_OW 526
5804: ST_TO_ADDR
// end ; commander := CreateHuman ;
5805: LD_ADDR_VAR 0 9
5809: PUSH
5810: CALL_OW 44
5814: ST_TO_ADDR
// result := Join ( result , commander ) ;
5815: LD_ADDR_VAR 0 5
5819: PUSH
5820: LD_VAR 0 5
5824: PPUSH
5825: LD_VAR 0 9
5829: PPUSH
5830: CALL 58098 0 2
5834: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5835: LD_ADDR_EXP 39
5839: PUSH
5840: LD_EXP 39
5844: PPUSH
5845: LD_VAR 0 1
5849: PPUSH
5850: LD_VAR 0 9
5854: PPUSH
5855: CALL_OW 1
5859: ST_TO_ADDR
// if mpTeamPreset then
5860: LD_LOC 1
5864: IFFALSE 5960
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5866: LD_LOC 1
5870: PUSH
5871: LD_INT 1
5873: ARRAY
5874: PPUSH
5875: LD_VAR 0 5
5879: PUSH
5880: LD_VAR 0 5
5884: ARRAY
5885: PPUSH
5886: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5890: LD_VAR 0 5
5894: PUSH
5895: LD_VAR 0 5
5899: ARRAY
5900: PPUSH
5901: LD_INT 1
5903: PPUSH
5904: LD_LOC 1
5908: PUSH
5909: LD_INT 1
5911: ARRAY
5912: PPUSH
5913: LD_INT 1
5915: PPUSH
5916: CALL_OW 260
5920: PPUSH
5921: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5925: LD_VAR 0 5
5929: PUSH
5930: LD_VAR 0 5
5934: ARRAY
5935: PPUSH
5936: LD_INT 2
5938: PPUSH
5939: LD_LOC 1
5943: PUSH
5944: LD_INT 1
5946: ARRAY
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: CALL_OW 260
5955: PPUSH
5956: CALL_OW 239
// end ; InitHc_All ( ) ;
5960: CALL_OW 584
// class := 2 ;
5964: LD_ADDR_VAR 0 8
5968: PUSH
5969: LD_INT 2
5971: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5972: LD_ADDR_VAR 0 6
5976: PUSH
5977: DOUBLE
5978: LD_INT 1
5980: DEC
5981: ST_TO_ADDR
5982: LD_VAR 0 3
5986: PUSH
5987: LD_INT 1
5989: MINUS
5990: PUSH
5991: FOR_TO
5992: IFFALSE 6187
// begin PrepareHuman ( false , class , skill ) ;
5994: LD_INT 0
5996: PPUSH
5997: LD_VAR 0 8
6001: PPUSH
6002: LD_VAR 0 4
6006: PPUSH
6007: CALL_OW 380
// un := CreateHuman ;
6011: LD_ADDR_VAR 0 7
6015: PUSH
6016: CALL_OW 44
6020: ST_TO_ADDR
// result := Join ( result , un ) ;
6021: LD_ADDR_VAR 0 5
6025: PUSH
6026: LD_VAR 0 5
6030: PPUSH
6031: LD_VAR 0 7
6035: PPUSH
6036: CALL 58098 0 2
6040: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
6041: LD_LOC 1
6045: PPUSH
6046: CALL 22122 0 1
6050: PUSH
6051: LD_VAR 0 3
6055: GREATEREQUAL
6056: IFFALSE 6152
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
6058: LD_LOC 1
6062: PUSH
6063: LD_VAR 0 6
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: ARRAY
6072: PPUSH
6073: LD_VAR 0 7
6077: PPUSH
6078: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
6082: LD_VAR 0 7
6086: PPUSH
6087: LD_INT 1
6089: PPUSH
6090: LD_LOC 1
6094: PUSH
6095: LD_VAR 0 6
6099: PUSH
6100: LD_INT 1
6102: PLUS
6103: ARRAY
6104: PPUSH
6105: LD_INT 1
6107: PPUSH
6108: CALL_OW 260
6112: PPUSH
6113: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6117: LD_VAR 0 7
6121: PPUSH
6122: LD_INT 2
6124: PPUSH
6125: LD_LOC 1
6129: PUSH
6130: LD_VAR 0 6
6134: PUSH
6135: LD_INT 1
6137: PLUS
6138: ARRAY
6139: PPUSH
6140: LD_INT 2
6142: PPUSH
6143: CALL_OW 260
6147: PPUSH
6148: CALL_OW 239
// end ; class := Inc ( class ) ;
6152: LD_ADDR_VAR 0 8
6156: PUSH
6157: LD_VAR 0 8
6161: PPUSH
6162: CALL 59471 0 1
6166: ST_TO_ADDR
// if class = 5 then
6167: LD_VAR 0 8
6171: PUSH
6172: LD_INT 5
6174: EQUAL
6175: IFFALSE 6185
// class := 1 ;
6177: LD_ADDR_VAR 0 8
6181: PUSH
6182: LD_INT 1
6184: ST_TO_ADDR
// end ;
6185: GO 5991
6187: POP
6188: POP
// if not mpTeamPreset then
6189: LD_LOC 1
6193: NOT
6194: IFFALSE 6206
// mpTeamPreset := result ;
6196: LD_ADDR_LOC 1
6200: PUSH
6201: LD_VAR 0 5
6205: ST_TO_ADDR
// end ;
6206: LD_VAR 0 5
6210: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6211: LD_INT 0
6213: PPUSH
6214: PPUSH
// result := [ ] ;
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: EMPTY
6221: ST_TO_ADDR
// if not vehicles then
6222: LD_VAR 0 3
6226: NOT
6227: IFFALSE 6231
// exit ;
6229: GO 6445
// for i := 1 to vehicles [ nation ] do
6231: LD_ADDR_VAR 0 5
6235: PUSH
6236: DOUBLE
6237: LD_INT 1
6239: DEC
6240: ST_TO_ADDR
6241: LD_VAR 0 3
6245: PUSH
6246: LD_VAR 0 2
6250: ARRAY
6251: PUSH
6252: FOR_TO
6253: IFFALSE 6443
// begin uc_side := side ;
6255: LD_ADDR_OWVAR 20
6259: PUSH
6260: LD_VAR 0 1
6264: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6265: LD_VAR 0 3
6269: PUSH
6270: LD_VAR 0 2
6274: ARRAY
6275: PUSH
6276: LD_VAR 0 5
6280: ARRAY
6281: PPUSH
6282: CALL 22122 0 1
6286: PUSH
6287: LD_INT 4
6289: GREATER
6290: IFFALSE 6320
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6292: LD_ADDR_OWVAR 21
6296: PUSH
6297: LD_VAR 0 3
6301: PUSH
6302: LD_VAR 0 2
6306: ARRAY
6307: PUSH
6308: LD_VAR 0 5
6312: ARRAY
6313: PUSH
6314: LD_INT 5
6316: ARRAY
6317: ST_TO_ADDR
6318: GO 6330
// uc_nation := nation ;
6320: LD_ADDR_OWVAR 21
6324: PUSH
6325: LD_VAR 0 2
6329: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6330: LD_VAR 0 3
6334: PUSH
6335: LD_VAR 0 2
6339: ARRAY
6340: PUSH
6341: LD_VAR 0 5
6345: ARRAY
6346: PUSH
6347: LD_INT 1
6349: ARRAY
6350: PPUSH
6351: LD_VAR 0 3
6355: PUSH
6356: LD_VAR 0 2
6360: ARRAY
6361: PUSH
6362: LD_VAR 0 5
6366: ARRAY
6367: PUSH
6368: LD_INT 2
6370: ARRAY
6371: PPUSH
6372: LD_VAR 0 3
6376: PUSH
6377: LD_VAR 0 2
6381: ARRAY
6382: PUSH
6383: LD_VAR 0 5
6387: ARRAY
6388: PUSH
6389: LD_INT 3
6391: ARRAY
6392: PPUSH
6393: LD_VAR 0 3
6397: PUSH
6398: LD_VAR 0 2
6402: ARRAY
6403: PUSH
6404: LD_VAR 0 5
6408: ARRAY
6409: PUSH
6410: LD_INT 4
6412: ARRAY
6413: PPUSH
6414: LD_INT 80
6416: PPUSH
6417: CALL 24918 0 5
// result := Join ( result , CreateVehicle ) ;
6421: LD_ADDR_VAR 0 4
6425: PUSH
6426: LD_VAR 0 4
6430: PPUSH
6431: CALL_OW 45
6435: PPUSH
6436: CALL 58098 0 2
6440: ST_TO_ADDR
// end ;
6441: GO 6252
6443: POP
6444: POP
// end ;
6445: LD_VAR 0 4
6449: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6450: LD_INT 0
6452: PPUSH
6453: PPUSH
// for i in mpBattleFlags do
6454: LD_ADDR_VAR 0 3
6458: PUSH
6459: LD_EXP 21
6463: PUSH
6464: FOR_IN
6465: IFFALSE 6542
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6467: LD_VAR 0 3
6471: PPUSH
6472: LD_INT 1
6474: PUSH
6475: LD_VAR 0 1
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 2
6486: PUSH
6487: LD_VAR 0 1
6491: PUSH
6492: LD_REAL  7.00000000000000E-0001
6495: MUL
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 3
6503: PUSH
6504: LD_VAR 0 1
6508: PUSH
6509: LD_REAL  4.00000000000000E-0001
6512: MUL
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: LD_INT 20
6520: PUSH
6521: LD_VAR 0 1
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: PPUSH
6536: CALL_OW 423
6540: GO 6464
6542: POP
6543: POP
// end ;
6544: LD_VAR 0 2
6548: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6549: LD_INT 100
6551: IFFALSE 6646
6553: GO 6555
6555: DISABLE
6556: LD_INT 0
6558: PPUSH
6559: PPUSH
// begin if mpBattleFlag <= 0 then
6560: LD_EXP 20
6564: PUSH
6565: LD_INT 0
6567: LESSEQUAL
6568: IFFALSE 6572
// exit ;
6570: GO 6646
// strength := 100 ;
6572: LD_ADDR_VAR 0 2
6576: PUSH
6577: LD_INT 100
6579: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6580: LD_EXP 20
6584: PPUSH
6585: CALL_OW 67
// strength := Dec ( strength ) ;
6589: LD_ADDR_VAR 0 2
6593: PUSH
6594: LD_VAR 0 2
6598: PPUSH
6599: CALL 59493 0 1
6603: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6604: LD_VAR 0 2
6608: PPUSH
6609: CALL 6450 0 1
// until not strength ;
6613: LD_VAR 0 2
6617: NOT
6618: IFFALSE 6580
// for i in mpBattleFlags do
6620: LD_ADDR_VAR 0 1
6624: PUSH
6625: LD_EXP 21
6629: PUSH
6630: FOR_IN
6631: IFFALSE 6644
// KillBattleFlag ( i ) ;
6633: LD_VAR 0 1
6637: PPUSH
6638: CALL_OW 419
6642: GO 6630
6644: POP
6645: POP
// end ;
6646: PPOPN 2
6648: END
// every 0 0$1 marked mpActive do var side , tmp ;
6649: GO 6651
6651: DISABLE
6652: LD_INT 0
6654: PPUSH
6655: PPUSH
// begin if mpSibBomb <= 1 then
6656: LD_EXP 26
6660: PUSH
6661: LD_INT 1
6663: LESSEQUAL
6664: IFFALSE 6668
// exit ;
6666: GO 6741
// tmp := mpSibBomb ;
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: LD_EXP 26
6677: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6678: LD_INT 35
6680: PPUSH
6681: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6685: LD_ADDR_VAR 0 2
6689: PUSH
6690: LD_VAR 0 2
6694: PUSH
6695: LD_INT 35
6697: MINUS
6698: ST_TO_ADDR
// until not tmp ;
6699: LD_VAR 0 2
6703: NOT
6704: IFFALSE 6678
// for side := 1 to 8 do
6706: LD_ADDR_VAR 0 1
6710: PUSH
6711: DOUBLE
6712: LD_INT 1
6714: DEC
6715: ST_TO_ADDR
6716: LD_INT 8
6718: PUSH
6719: FOR_TO
6720: IFFALSE 6739
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6722: LD_INT 25
6724: PPUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: CALL_OW 322
6737: GO 6719
6739: POP
6740: POP
// end ;
6741: PPOPN 2
6743: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6744: LD_INT 0
6746: PPUSH
6747: PPUSH
6748: PPUSH
// mpBuildUpTimeDelay := 0 ;
6749: LD_ADDR_EXP 46
6753: PUSH
6754: LD_INT 0
6756: ST_TO_ADDR
// if not mpBuildUpTime then
6757: LD_EXP 18
6761: NOT
6762: IFFALSE 6766
// exit ;
6764: GO 6955
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6766: LD_ADDR_EXP 46
6770: PUSH
6771: LD_INT 8400
6773: PUSH
6774: LD_INT 2100
6776: PUSH
6777: LD_EXP 18
6781: MUL
6782: PLUS
6783: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6784: LD_ADDR_EXP 47
6788: PUSH
6789: LD_INT 1
6791: ST_TO_ADDR
// for i := 1 to 8 do
6792: LD_ADDR_VAR 0 2
6796: PUSH
6797: DOUBLE
6798: LD_INT 1
6800: DEC
6801: ST_TO_ADDR
6802: LD_INT 8
6804: PUSH
6805: FOR_TO
6806: IFFALSE 6953
// if mpSidePositions [ i ] then
6808: LD_EXP 5
6812: PUSH
6813: LD_VAR 0 2
6817: ARRAY
6818: IFFALSE 6951
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6820: LD_EXP 17
6824: PUSH
6825: LD_EXP 5
6829: PUSH
6830: LD_VAR 0 2
6834: ARRAY
6835: ARRAY
6836: PPUSH
6837: LD_INT 5
6839: PPUSH
6840: CALL_OW 424
// for j := 1 to 8 do
6844: LD_ADDR_VAR 0 3
6848: PUSH
6849: DOUBLE
6850: LD_INT 1
6852: DEC
6853: ST_TO_ADDR
6854: LD_INT 8
6856: PUSH
6857: FOR_TO
6858: IFFALSE 6949
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6860: LD_EXP 5
6864: PUSH
6865: LD_VAR 0 3
6869: ARRAY
6870: IFFALSE 6919
6872: PUSH
6873: LD_EXP 6
6877: PUSH
6878: LD_VAR 0 2
6882: ARRAY
6883: PUSH
6884: LD_EXP 6
6888: PUSH
6889: LD_VAR 0 3
6893: ARRAY
6894: NONEQUAL
6895: IFTRUE 6918
6897: PUSH
6898: LD_EXP 9
6902: NOT
6903: IFFALSE 6917
6905: PUSH
6906: LD_VAR 0 2
6910: PUSH
6911: LD_VAR 0 3
6915: NONEQUAL
6916: AND
6917: OR
6918: AND
6919: IFFALSE 6947
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6921: LD_VAR 0 3
6925: PPUSH
6926: LD_EXP 17
6930: PUSH
6931: LD_EXP 5
6935: PUSH
6936: LD_VAR 0 2
6940: ARRAY
6941: ARRAY
6942: PPUSH
6943: CALL_OW 333
6947: GO 6857
6949: POP
6950: POP
// end ;
6951: GO 6805
6953: POP
6954: POP
// end ;
6955: LD_VAR 0 1
6959: RET
// function EndBuildUp ; var i , j ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
6964: PPUSH
// mpBuildUpTimeActive := false ;
6965: LD_ADDR_EXP 47
6969: PUSH
6970: LD_INT 0
6972: ST_TO_ADDR
// for i := 1 to 8 do
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: DOUBLE
6979: LD_INT 1
6981: DEC
6982: ST_TO_ADDR
6983: LD_INT 8
6985: PUSH
6986: FOR_TO
6987: IFFALSE 7134
// if mpSidePositions [ i ] then
6989: LD_EXP 5
6993: PUSH
6994: LD_VAR 0 2
6998: ARRAY
6999: IFFALSE 7132
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
7001: LD_EXP 17
7005: PUSH
7006: LD_EXP 5
7010: PUSH
7011: LD_VAR 0 2
7015: ARRAY
7016: ARRAY
7017: PPUSH
7018: LD_INT 0
7020: PPUSH
7021: CALL_OW 424
// for j := 1 to 8 do
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: DOUBLE
7031: LD_INT 1
7033: DEC
7034: ST_TO_ADDR
7035: LD_INT 8
7037: PUSH
7038: FOR_TO
7039: IFFALSE 7130
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7041: LD_EXP 5
7045: PUSH
7046: LD_VAR 0 3
7050: ARRAY
7051: IFFALSE 7100
7053: PUSH
7054: LD_EXP 6
7058: PUSH
7059: LD_VAR 0 2
7063: ARRAY
7064: PUSH
7065: LD_EXP 6
7069: PUSH
7070: LD_VAR 0 3
7074: ARRAY
7075: NONEQUAL
7076: IFTRUE 7099
7078: PUSH
7079: LD_EXP 9
7083: NOT
7084: IFFALSE 7098
7086: PUSH
7087: LD_VAR 0 2
7091: PUSH
7092: LD_VAR 0 3
7096: NONEQUAL
7097: AND
7098: OR
7099: AND
7100: IFFALSE 7128
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7102: LD_VAR 0 3
7106: PPUSH
7107: LD_EXP 17
7111: PUSH
7112: LD_EXP 5
7116: PUSH
7117: LD_VAR 0 2
7121: ARRAY
7122: ARRAY
7123: PPUSH
7124: CALL_OW 334
7128: GO 7038
7130: POP
7131: POP
// end ;
7132: GO 6986
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7141: LD_EXP 47
7145: IFFALSE 7324
7147: GO 7149
7149: DISABLE
7150: LD_INT 0
7152: PPUSH
7153: PPUSH
// begin for i := 1 to 8 do
7154: LD_ADDR_VAR 0 1
7158: PUSH
7159: DOUBLE
7160: LD_INT 1
7162: DEC
7163: ST_TO_ADDR
7164: LD_INT 8
7166: PUSH
7167: FOR_TO
7168: IFFALSE 7321
// if mpSidePositions [ i ] then
7170: LD_EXP 5
7174: PUSH
7175: LD_VAR 0 1
7179: ARRAY
7180: IFFALSE 7319
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7182: LD_ADDR_VAR 0 2
7186: PUSH
7187: LD_EXP 17
7191: PUSH
7192: LD_EXP 5
7196: PUSH
7197: LD_VAR 0 1
7201: ARRAY
7202: ARRAY
7203: PPUSH
7204: LD_INT 2
7206: PUSH
7207: LD_INT 21
7209: PUSH
7210: LD_INT 1
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 21
7219: PUSH
7220: LD_INT 2
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_OWVAR 2
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PPUSH
7248: CALL_OW 70
7252: PUSH
7253: FOR_IN
7254: IFFALSE 7317
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7256: LD_EXP 6
7260: PUSH
7261: LD_VAR 0 1
7265: ARRAY
7266: PUSH
7267: LD_EXP 6
7271: PUSH
7272: LD_OWVAR 2
7276: ARRAY
7277: NONEQUAL
7278: IFTRUE 7301
7280: PUSH
7281: LD_EXP 9
7285: NOT
7286: IFFALSE 7300
7288: PUSH
7289: LD_VAR 0 1
7293: PUSH
7294: LD_OWVAR 2
7298: NONEQUAL
7299: AND
7300: OR
7301: IFFALSE 7315
// ComMoveToArea ( un , BuildUpEscape ) ;
7303: LD_VAR 0 2
7307: PPUSH
7308: LD_INT 59
7310: PPUSH
7311: CALL_OW 113
7315: GO 7253
7317: POP
7318: POP
7319: GO 7167
7321: POP
7322: POP
// enable ;
7323: ENABLE
// end ;
7324: PPOPN 2
7326: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7327: LD_EXP 18
7331: IFFALSE 7381
7333: GO 7335
7335: DISABLE
7336: LD_INT 0
7338: PPUSH
// begin tmp := mpBuildUpTime ;
7339: LD_ADDR_VAR 0 1
7343: PUSH
7344: LD_EXP 18
7348: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7349: LD_INT 35
7351: PPUSH
7352: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7356: LD_ADDR_VAR 0 1
7360: PUSH
7361: LD_VAR 0 1
7365: PUSH
7366: LD_INT 35
7368: MINUS
7369: ST_TO_ADDR
// until not tmp ;
7370: LD_VAR 0 1
7374: NOT
7375: IFFALSE 7349
// EndBuildUp ;
7377: CALL 6960 0 0
// end ;
7381: PPOPN 1
7383: END
// every 0 0$1 trigger mpActive marked mpWin do
7384: LD_INT 100
7386: IFFALSE 7420
7388: GO 7390
7390: DISABLE
// begin if IAmServer then
7391: CALL_OW 518
7395: IFFALSE 7404
// wait ( 0 0$3 ) ;
7397: LD_INT 105
7399: PPUSH
7400: CALL_OW 67
// if Multiplayer then
7404: LD_OWVAR 4
7408: IFFALSE 7416
// YouWinInMultiplayer else
7410: CALL_OW 106
7414: GO 7420
// YouWin ;
7416: CALL_OW 103
// end ;
7420: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7421: LD_INT 0
7423: PPUSH
// result := false ;
7424: LD_ADDR_VAR 0 3
7428: PUSH
7429: LD_INT 0
7431: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7432: LD_VAR 0 1
7436: PUSH
7437: LD_INT 1
7439: DOUBLE
7440: EQUAL
7441: IFTRUE 7463
7443: LD_INT 5
7445: DOUBLE
7446: EQUAL
7447: IFTRUE 7463
7449: LD_INT 6
7451: DOUBLE
7452: EQUAL
7453: IFTRUE 7463
7455: LD_INT 7
7457: DOUBLE
7458: EQUAL
7459: IFTRUE 7463
7461: GO 7536
7463: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7464: LD_ADDR_VAR 0 3
7468: PUSH
7469: LD_INT 22
7471: PUSH
7472: LD_VAR 0 2
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 2
7483: PUSH
7484: LD_INT 21
7486: PUSH
7487: LD_INT 1
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 33
7496: PUSH
7497: LD_INT 3
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 33
7506: PUSH
7507: LD_INT 5
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PPUSH
7524: CALL_OW 69
7528: PPUSH
7529: CALL 22122 0 1
7533: ST_TO_ADDR
// end ; GameTypeSurvival :
7534: GO 7932
7536: LD_INT 2
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7674
7544: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7545: LD_ADDR_VAR 0 3
7549: PUSH
7550: LD_INT 22
7552: PUSH
7553: LD_VAR 0 2
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 2
7564: PUSH
7565: LD_INT 30
7567: PUSH
7568: LD_INT 0
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: LD_INT 30
7577: PUSH
7578: LD_INT 1
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PPUSH
7594: CALL_OW 69
7598: PPUSH
7599: CALL 22122 0 1
7603: IFFALSE 7671
7605: PUSH
7606: LD_INT 22
7608: PUSH
7609: LD_VAR 0 2
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 2
7620: PUSH
7621: LD_INT 21
7623: PUSH
7624: LD_INT 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 33
7633: PUSH
7634: LD_INT 3
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 33
7643: PUSH
7644: LD_INT 5
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PPUSH
7661: CALL_OW 69
7665: PPUSH
7666: CALL 22122 0 1
7670: AND
7671: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7672: GO 7932
7674: LD_INT 8
7676: DOUBLE
7677: EQUAL
7678: IFTRUE 7682
7680: GO 7831
7682: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7683: LD_ADDR_VAR 0 3
7687: PUSH
7688: LD_EXP 39
7692: PUSH
7693: LD_VAR 0 2
7697: ARRAY
7698: PPUSH
7699: CALL_OW 300
7703: IFFALSE 7760
7705: PUSH
7706: LD_INT 22
7708: PUSH
7709: LD_VAR 0 2
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 2
7720: PUSH
7721: LD_INT 30
7723: PUSH
7724: LD_INT 0
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 30
7733: PUSH
7734: LD_INT 1
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 69
7754: PPUSH
7755: CALL 22122 0 1
7759: AND
7760: IFFALSE 7828
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_VAR 0 2
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 2
7777: PUSH
7778: LD_INT 21
7780: PUSH
7781: LD_INT 1
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 33
7790: PUSH
7791: LD_INT 3
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 33
7800: PUSH
7801: LD_INT 5
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PPUSH
7818: CALL_OW 69
7822: PPUSH
7823: CALL 22122 0 1
7827: AND
7828: ST_TO_ADDR
// end ; GameTypeKing :
7829: GO 7932
7831: LD_INT 3
7833: DOUBLE
7834: EQUAL
7835: IFTRUE 7839
7837: GO 7931
7839: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7840: LD_ADDR_VAR 0 3
7844: PUSH
7845: LD_INT 22
7847: PUSH
7848: LD_VAR 0 2
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 2
7859: PUSH
7860: LD_INT 21
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 33
7872: PUSH
7873: LD_INT 3
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 33
7882: PUSH
7883: LD_INT 5
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: PPUSH
7905: CALL 22122 0 1
7909: IFFALSE 7928
7911: PUSH
7912: LD_VAR 0 2
7916: PPUSH
7917: CALL 11824 0 1
7921: PUSH
7922: LD_EXP 33
7926: LESS
7927: AND
7928: ST_TO_ADDR
// end ; end ;
7929: GO 7932
7931: POP
// end ;
7932: LD_VAR 0 3
7936: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7937: LD_INT 100
7939: IFFALSE 8169
7941: GO 7943
7943: DISABLE
7944: LD_INT 0
7946: PPUSH
7947: PPUSH
// begin if Multiplayer then
7948: LD_OWVAR 4
7952: IFFALSE 7960
// SetPlayerSpectator ( ) else
7954: CALL_OW 572
7958: GO 7969
// FogOff ( your_side ) ;
7960: LD_OWVAR 2
7964: PPUSH
7965: CALL_OW 344
// repeat gameIsOn := false ;
7969: LD_ADDR_VAR 0 1
7973: PUSH
7974: LD_INT 0
7976: ST_TO_ADDR
// for i := 1 to 8 do
7977: LD_ADDR_VAR 0 2
7981: PUSH
7982: DOUBLE
7983: LD_INT 1
7985: DEC
7986: ST_TO_ADDR
7987: LD_INT 8
7989: PUSH
7990: FOR_TO
7991: IFFALSE 8121
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7993: LD_EXP 5
7997: PUSH
7998: LD_VAR 0 2
8002: ARRAY
8003: IFFALSE 8016
8005: PUSH
8006: LD_VAR 0 2
8010: PPUSH
8011: CALL_OW 108
8015: AND
8016: IFFALSE 8030
8018: PUSH
8019: LD_VAR 0 2
8023: PUSH
8024: LD_OWVAR 2
8028: NONEQUAL
8029: AND
8030: IFFALSE 8119
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8032: LD_EXP 6
8036: PUSH
8037: LD_VAR 0 2
8041: ARRAY
8042: NOT
8043: IFTRUE 8091
8045: PUSH
8046: LD_EXP 6
8050: PUSH
8051: LD_VAR 0 2
8055: ARRAY
8056: PUSH
8057: LD_EXP 6
8061: PUSH
8062: LD_OWVAR 2
8066: ARRAY
8067: NONEQUAL
8068: IFFALSE 8090
8070: PUSH
8071: LD_OWVAR 2
8075: PPUSH
8076: LD_VAR 0 2
8080: PPUSH
8081: CALL_OW 81
8085: PUSH
8086: LD_INT 1
8088: NONEQUAL
8089: AND
8090: OR
8091: IFFALSE 8119
// if HasPowerByGameType ( mpGameType , i ) then
8093: LD_EXP 1
8097: PPUSH
8098: LD_VAR 0 2
8102: PPUSH
8103: CALL 7421 0 2
8107: IFFALSE 8119
// begin gameIsOn := true ;
8109: LD_ADDR_VAR 0 1
8113: PUSH
8114: LD_INT 1
8116: ST_TO_ADDR
// break ;
8117: GO 8121
// end ;
8119: GO 7990
8121: POP
8122: POP
// wait ( 100 ) ;
8123: LD_INT 100
8125: PPUSH
8126: CALL_OW 67
// until not gameIsOn ;
8130: LD_VAR 0 1
8134: NOT
8135: IFFALSE 7969
// if IAmServer then
8137: CALL_OW 518
8141: IFFALSE 8150
// wait ( 0 0$3 ) ;
8143: LD_INT 105
8145: PPUSH
8146: CALL_OW 67
// if Multiplayer then
8150: LD_OWVAR 4
8154: IFFALSE 8162
// YouLostInMultiplayer else
8156: CALL_OW 107
8160: GO 8169
// YouLost (  ) ;
8162: LD_STRING 
8164: PPUSH
8165: CALL_OW 104
// end ;
8169: PPOPN 2
8171: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
8172: LD_EXP 31
8176: IFFALSE 8560
8178: GO 8180
8180: DISABLE
8181: LD_INT 0
8183: PPUSH
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
8188: LD_ADDR_VAR 0 5
8192: PUSH
8193: LD_INT 1
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: LD_INT 3
8201: PUSH
8202: LD_INT 4
8204: PUSH
8205: LD_INT 5
8207: PUSH
8208: LD_INT 6
8210: PUSH
8211: LD_INT 7
8213: PUSH
8214: LD_INT 8
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8227: LD_INT 350
8229: PPUSH
8230: CALL_OW 67
// for i := 1 to 8 do
8234: LD_ADDR_VAR 0 1
8238: PUSH
8239: DOUBLE
8240: LD_INT 1
8242: DEC
8243: ST_TO_ADDR
8244: LD_INT 8
8246: PUSH
8247: FOR_TO
8248: IFFALSE 8530
// begin j := sides [ i ] ;
8250: LD_ADDR_VAR 0 2
8254: PUSH
8255: LD_VAR 0 5
8259: PUSH
8260: LD_VAR 0 1
8264: ARRAY
8265: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8266: LD_EXP 38
8270: PUSH
8271: LD_VAR 0 2
8275: ARRAY
8276: PPUSH
8277: CALL 22122 0 1
8281: IFFALSE 8294
8283: PUSH
8284: LD_VAR 0 2
8288: PPUSH
8289: CALL_OW 108
8293: AND
8294: IFFALSE 8312
8296: PUSH
8297: LD_EXP 1
8301: PPUSH
8302: LD_VAR 0 2
8306: PPUSH
8307: CALL 7421 0 2
8311: AND
8312: IFFALSE 8528
// begin wait ( mpRespawn div 2 ) ;
8314: LD_EXP 31
8318: PUSH
8319: LD_INT 2
8321: DIV
8322: PPUSH
8323: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8327: LD_ADDR_VAR 0 3
8331: PUSH
8332: LD_INT 22
8334: PUSH
8335: LD_VAR 0 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 50
8346: PUSH
8347: EMPTY
8348: LIST
8349: PUSH
8350: LD_INT 2
8352: PUSH
8353: LD_INT 30
8355: PUSH
8356: LD_INT 0
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 30
8365: PUSH
8366: LD_INT 1
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8388: LD_VAR 0 3
8392: NOT
8393: IFTRUE 8407
8395: PUSH
8396: LD_VAR 0 2
8400: PPUSH
8401: CALL_OW 108
8405: NOT
8406: OR
8407: IFTRUE 8426
8409: PUSH
8410: LD_EXP 1
8414: PPUSH
8415: LD_VAR 0 2
8419: PPUSH
8420: CALL 7421 0 2
8424: NOT
8425: OR
8426: IFFALSE 8430
// continue ;
8428: GO 8247
// spawn := tmp [ 1 ] ;
8430: LD_ADDR_VAR 0 4
8434: PUSH
8435: LD_VAR 0 3
8439: PUSH
8440: LD_INT 1
8442: ARRAY
8443: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8444: LD_EXP 38
8448: PUSH
8449: LD_VAR 0 2
8453: ARRAY
8454: PUSH
8455: LD_INT 1
8457: ARRAY
8458: PPUSH
8459: LD_VAR 0 4
8463: PPUSH
8464: CALL_OW 250
8468: PPUSH
8469: LD_VAR 0 4
8473: PPUSH
8474: CALL_OW 251
8478: PPUSH
8479: LD_INT 32
8481: PPUSH
8482: LD_INT 1
8484: PPUSH
8485: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8489: LD_ADDR_EXP 38
8493: PUSH
8494: LD_EXP 38
8498: PPUSH
8499: LD_VAR 0 2
8503: PPUSH
8504: LD_EXP 38
8508: PUSH
8509: LD_VAR 0 2
8513: ARRAY
8514: PPUSH
8515: LD_INT 1
8517: PPUSH
8518: CALL_OW 3
8522: PPUSH
8523: CALL_OW 1
8527: ST_TO_ADDR
// end ; end ;
8528: GO 8247
8530: POP
8531: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8532: LD_ADDR_VAR 0 5
8536: PUSH
8537: LD_VAR 0 5
8541: PPUSH
8542: LD_INT 1
8544: PPUSH
8545: LD_INT 8
8547: PPUSH
8548: LD_INT 1
8550: PPUSH
8551: CALL 24448 0 4
8555: ST_TO_ADDR
// until false ;
8556: LD_INT 0
8558: IFFALSE 8227
// end ;
8560: PPOPN 5
8562: END
// every 0 0$1 marked mpActive do
8563: GO 8565
8565: DISABLE
// begin enable ;
8566: ENABLE
// if not mpDisplayStrings then
8567: LD_EXP 36
8571: NOT
8572: IFFALSE 8583
// begin display_strings := [ ] ;
8574: LD_ADDR_OWVAR 47
8578: PUSH
8579: EMPTY
8580: ST_TO_ADDR
// exit ;
8581: GO 8593
// end ; display_strings := mpDisplayStrings ;
8583: LD_ADDR_OWVAR 47
8587: PUSH
8588: LD_EXP 36
8592: ST_TO_ADDR
// end ; end_of_file
8593: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8594: LD_INT 0
8596: PPUSH
8597: PPUSH
8598: PPUSH
8599: PPUSH
8600: PPUSH
8601: PPUSH
8602: PPUSH
8603: PPUSH
8604: PPUSH
// if GetType ( un ) = unit_vehicle then
8605: LD_VAR 0 1
8609: PPUSH
8610: CALL_OW 247
8614: PUSH
8615: LD_INT 2
8617: EQUAL
8618: IFFALSE 8622
// exit ;
8620: GO 9395
// side := GetSide ( un ) ;
8622: LD_ADDR_VAR 0 9
8626: PUSH
8627: LD_VAR 0 1
8631: PPUSH
8632: CALL_OW 255
8636: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8637: LD_EXP 1
8641: PUSH
8642: LD_INT 2
8644: PUSH
8645: LD_INT 8
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: IN
8652: IFFALSE 8746
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 266
8663: PUSH
8664: LD_INT 0
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: IN
8674: IFFALSE 8746
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8676: LD_ADDR_VAR 0 3
8680: PUSH
8681: LD_INT 22
8683: PUSH
8684: LD_VAR 0 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 2
8695: PUSH
8696: LD_INT 21
8698: PUSH
8699: LD_INT 1
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: LD_INT 33
8708: PUSH
8709: LD_INT 3
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PPUSH
8725: CALL_OW 69
8729: PUSH
8730: FOR_IN
8731: IFFALSE 8744
// KillUnit ( i ) ;
8733: LD_VAR 0 3
8737: PPUSH
8738: CALL_OW 66
8742: GO 8730
8744: POP
8745: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
8746: LD_EXP 1
8750: PUSH
8751: LD_INT 8
8753: EQUAL
8754: IFFALSE 8838
// if un in mpCommanders then
8756: LD_VAR 0 1
8760: PUSH
8761: LD_EXP 39
8765: IN
8766: IFFALSE 8838
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 22
8775: PUSH
8776: LD_VAR 0 9
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: LD_INT 21
8790: PUSH
8791: LD_INT 1
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 33
8800: PUSH
8801: LD_INT 3
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PPUSH
8817: CALL_OW 69
8821: PUSH
8822: FOR_IN
8823: IFFALSE 8836
// KillUnit ( i ) ;
8825: LD_VAR 0 3
8829: PPUSH
8830: CALL_OW 66
8834: GO 8822
8836: POP
8837: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 257
8847: PUSH
8848: LD_INT 12
8850: PUSH
8851: LD_INT 17
8853: PUSH
8854: LD_INT 15
8856: PUSH
8857: LD_INT 16
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: IN
8866: IFTRUE 8883
8868: PUSH
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 263
8878: PUSH
8879: LD_INT 5
8881: EQUAL
8882: OR
8883: IFFALSE 9120
// begin tag := 0 ;
8885: LD_ADDR_VAR 0 5
8889: PUSH
8890: LD_INT 0
8892: ST_TO_ADDR
// for i := 1 to 8 do
8893: LD_ADDR_VAR 0 3
8897: PUSH
8898: DOUBLE
8899: LD_INT 1
8901: DEC
8902: ST_TO_ADDR
8903: LD_INT 8
8905: PUSH
8906: FOR_TO
8907: IFFALSE 8941
// if un in mpApePosIndex [ i ] then
8909: LD_VAR 0 1
8913: PUSH
8914: LD_EXP 30
8918: PUSH
8919: LD_VAR 0 3
8923: ARRAY
8924: IN
8925: IFFALSE 8939
// begin tag := i ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_VAR 0 3
8936: ST_TO_ADDR
// break ;
8937: GO 8941
// end ;
8939: GO 8906
8941: POP
8942: POP
// if not tag then
8943: LD_VAR 0 5
8947: NOT
8948: IFFALSE 8952
// exit ;
8950: GO 9395
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8952: LD_ADDR_VAR 0 7
8956: PUSH
8957: LD_EXP 29
8961: PUSH
8962: LD_EXP 5
8966: PUSH
8967: LD_VAR 0 5
8971: ARRAY
8972: ARRAY
8973: ST_TO_ADDR
// if not area then
8974: LD_VAR 0 7
8978: NOT
8979: IFFALSE 8983
// exit ;
8981: GO 9395
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8983: LD_INT 14700
8985: PUSH
8986: LD_VAR 0 1
8990: PUSH
8991: LD_INT 5
8993: MOD
8994: PUSH
8995: LD_INT 1
8997: PLUS
8998: PUSH
8999: LD_INT 700
9001: MUL
9002: PLUS
9003: PPUSH
9004: CALL_OW 67
// repeat wait ( 10 ) ;
9008: LD_INT 10
9010: PPUSH
9011: CALL_OW 67
// until not mpBlockRespThread ;
9015: LD_EXP 45
9019: NOT
9020: IFFALSE 9008
// mpBlockRespThread := true ;
9022: LD_ADDR_EXP 45
9026: PUSH
9027: LD_INT 1
9029: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9030: LD_INT 0
9032: PPUSH
9033: CALL 54225 0 1
// ape := CreateHuman ;
9037: LD_ADDR_VAR 0 4
9041: PUSH
9042: CALL_OW 44
9046: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9047: LD_ADDR_EXP 30
9051: PUSH
9052: LD_EXP 30
9056: PPUSH
9057: LD_VAR 0 5
9061: PPUSH
9062: LD_EXP 30
9066: PUSH
9067: LD_VAR 0 5
9071: ARRAY
9072: PPUSH
9073: LD_VAR 0 4
9077: PPUSH
9078: CALL 58098 0 2
9082: PPUSH
9083: CALL_OW 1
9087: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9088: LD_VAR 0 4
9092: PPUSH
9093: LD_VAR 0 7
9097: PPUSH
9098: LD_INT 0
9100: PPUSH
9101: CALL_OW 49
// wait ( 10 ) ;
9105: LD_INT 10
9107: PPUSH
9108: CALL_OW 67
// mpBlockRespThread := false ;
9112: LD_ADDR_EXP 45
9116: PUSH
9117: LD_INT 0
9119: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
9120: LD_VAR 0 1
9124: PPUSH
9125: CALL_OW 247
9129: PUSH
9130: LD_INT 1
9132: EQUAL
9133: IFFALSE 9150
9135: PUSH
9136: LD_VAR 0 1
9140: PPUSH
9141: CALL_OW 248
9145: PUSH
9146: LD_INT 0
9148: GREATER
9149: AND
9150: IFFALSE 9395
// begin if not mpRespawn then
9152: LD_EXP 31
9156: NOT
9157: IFFALSE 9161
// exit ;
9159: GO 9395
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
9161: LD_VAR 0 9
9165: PPUSH
9166: CALL_OW 108
9170: NOT
9171: IFFALSE 9190
9173: PUSH
9174: LD_EXP 1
9178: PPUSH
9179: LD_VAR 0 9
9183: PPUSH
9184: CALL 7421 0 2
9188: NOT
9189: AND
9190: IFFALSE 9194
// exit ;
9192: GO 9395
// side := GetSide ( un ) ;
9194: LD_ADDR_VAR 0 9
9198: PUSH
9199: LD_VAR 0 1
9203: PPUSH
9204: CALL_OW 255
9208: ST_TO_ADDR
// nation := GetNation ( un ) ;
9209: LD_ADDR_VAR 0 8
9213: PUSH
9214: LD_VAR 0 1
9218: PPUSH
9219: CALL_OW 248
9223: ST_TO_ADDR
// class := GetClass ( un ) ;
9224: LD_ADDR_VAR 0 6
9228: PUSH
9229: LD_VAR 0 1
9233: PPUSH
9234: CALL_OW 257
9238: ST_TO_ADDR
// if class > 4 then
9239: LD_VAR 0 6
9243: PUSH
9244: LD_INT 4
9246: GREATER
9247: IFFALSE 9257
// class := 1 ;
9249: LD_ADDR_VAR 0 6
9253: PUSH
9254: LD_INT 1
9256: ST_TO_ADDR
// repeat wait ( 10 ) ;
9257: LD_INT 10
9259: PPUSH
9260: CALL_OW 67
// until not mpBlockRespThread ;
9264: LD_EXP 45
9268: NOT
9269: IFFALSE 9257
// mpBlockRespThread := true ;
9271: LD_ADDR_EXP 45
9275: PUSH
9276: LD_INT 1
9278: ST_TO_ADDR
// uc_side := side ;
9279: LD_ADDR_OWVAR 20
9283: PUSH
9284: LD_VAR 0 9
9288: ST_TO_ADDR
// uc_nation := nation ;
9289: LD_ADDR_OWVAR 21
9293: PUSH
9294: LD_VAR 0 8
9298: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9299: LD_INT 0
9301: PPUSH
9302: LD_VAR 0 6
9306: PPUSH
9307: LD_INT 2
9309: PPUSH
9310: CALL_OW 380
// un := CreateHuman ;
9314: LD_ADDR_VAR 0 1
9318: PUSH
9319: CALL_OW 44
9323: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9324: LD_ADDR_EXP 38
9328: PUSH
9329: LD_EXP 38
9333: PPUSH
9334: LD_VAR 0 9
9338: PPUSH
9339: LD_EXP 38
9343: PUSH
9344: LD_VAR 0 9
9348: ARRAY
9349: PPUSH
9350: LD_EXP 38
9354: PUSH
9355: LD_VAR 0 9
9359: ARRAY
9360: PUSH
9361: LD_INT 1
9363: PLUS
9364: PPUSH
9365: LD_VAR 0 1
9369: PPUSH
9370: CALL_OW 1
9374: PPUSH
9375: CALL_OW 1
9379: ST_TO_ADDR
// wait ( 10 ) ;
9380: LD_INT 10
9382: PPUSH
9383: CALL_OW 67
// mpBlockRespThread := false ;
9387: LD_ADDR_EXP 45
9391: PUSH
9392: LD_INT 0
9394: ST_TO_ADDR
// end ; end ;
9395: LD_VAR 0 2
9399: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9400: LD_INT 0
9402: PPUSH
9403: PPUSH
9404: PPUSH
9405: PPUSH
9406: PPUSH
// tag := 0 ;
9407: LD_ADDR_VAR 0 5
9411: PUSH
9412: LD_INT 0
9414: ST_TO_ADDR
// for i := 1 to 8 do
9415: LD_ADDR_VAR 0 4
9419: PUSH
9420: DOUBLE
9421: LD_INT 1
9423: DEC
9424: ST_TO_ADDR
9425: LD_INT 8
9427: PUSH
9428: FOR_TO
9429: IFFALSE 9463
// if un in mpApePosIndex [ i ] then
9431: LD_VAR 0 2
9435: PUSH
9436: LD_EXP 30
9440: PUSH
9441: LD_VAR 0 4
9445: ARRAY
9446: IN
9447: IFFALSE 9461
// begin tag := i ;
9449: LD_ADDR_VAR 0 5
9453: PUSH
9454: LD_VAR 0 4
9458: ST_TO_ADDR
// break ;
9459: GO 9463
// end ;
9461: GO 9428
9463: POP
9464: POP
// if not tag then
9465: LD_VAR 0 5
9469: NOT
9470: IFFALSE 9474
// exit ;
9472: GO 9642
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9474: LD_ADDR_VAR 0 6
9478: PUSH
9479: LD_EXP 29
9483: PUSH
9484: LD_EXP 5
9488: PUSH
9489: LD_VAR 0 5
9493: ARRAY
9494: ARRAY
9495: ST_TO_ADDR
// if not area then
9496: LD_VAR 0 6
9500: NOT
9501: IFFALSE 9505
// exit ;
9503: GO 9642
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9505: LD_INT 14700
9507: PUSH
9508: LD_VAR 0 2
9512: PUSH
9513: LD_INT 5
9515: MOD
9516: PUSH
9517: LD_INT 1
9519: PLUS
9520: PUSH
9521: LD_INT 700
9523: MUL
9524: PLUS
9525: PPUSH
9526: CALL_OW 67
// repeat wait ( 10 ) ;
9530: LD_INT 10
9532: PPUSH
9533: CALL_OW 67
// until not mpBlockRespThread ;
9537: LD_EXP 45
9541: NOT
9542: IFFALSE 9530
// mpBlockRespThread := true ;
9544: LD_ADDR_EXP 45
9548: PUSH
9549: LD_INT 1
9551: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9552: LD_INT 0
9554: PPUSH
9555: CALL 54225 0 1
// ape := CreateHuman ;
9559: LD_ADDR_VAR 0 7
9563: PUSH
9564: CALL_OW 44
9568: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9569: LD_ADDR_EXP 30
9573: PUSH
9574: LD_EXP 30
9578: PPUSH
9579: LD_VAR 0 5
9583: PPUSH
9584: LD_EXP 30
9588: PUSH
9589: LD_VAR 0 5
9593: ARRAY
9594: PPUSH
9595: LD_VAR 0 7
9599: PPUSH
9600: CALL 58098 0 2
9604: PPUSH
9605: CALL_OW 1
9609: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9610: LD_VAR 0 7
9614: PPUSH
9615: LD_VAR 0 6
9619: PPUSH
9620: LD_INT 0
9622: PPUSH
9623: CALL_OW 49
// wait ( 10 ) ;
9627: LD_INT 10
9629: PPUSH
9630: CALL_OW 67
// mpBlockRespThread := false ;
9634: LD_ADDR_EXP 45
9638: PUSH
9639: LD_INT 0
9641: ST_TO_ADDR
// end ;
9642: LD_VAR 0 3
9646: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9647: LD_INT 0
9649: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9650: LD_VAR 0 1
9654: PPUSH
9655: CALL_OW 266
9659: PUSH
9660: LD_INT 0
9662: PUSH
9663: LD_INT 1
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: IN
9670: IFFALSE 9695
// SetBName ( building , @ & GetSide ( building ) ) ;
9672: LD_VAR 0 1
9676: PPUSH
9677: LD_STRING @
9679: PUSH
9680: LD_VAR 0 1
9684: PPUSH
9685: CALL_OW 255
9689: STR
9690: PPUSH
9691: CALL_OW 500
// end ;
9695: LD_VAR 0 2
9699: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9700: LD_INT 0
9702: PPUSH
9703: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9704: LD_EXP 1
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: LD_INT 8
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: IN
9719: IFFALSE 9743
9721: PUSH
9722: LD_VAR 0 1
9726: PPUSH
9727: CALL_OW 266
9731: PUSH
9732: LD_INT 0
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: IN
9742: AND
9743: IFFALSE 9822
// begin SetSide ( building , oldSide ) ;
9745: LD_VAR 0 1
9749: PPUSH
9750: LD_VAR 0 2
9754: PPUSH
9755: CALL_OW 235
// KillUnit ( building ) ;
9759: LD_VAR 0 1
9763: PPUSH
9764: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9768: LD_ADDR_VAR 0 5
9772: PUSH
9773: LD_INT 22
9775: PUSH
9776: LD_VAR 0 2
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 21
9787: PUSH
9788: LD_INT 1
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 69
9803: PUSH
9804: FOR_IN
9805: IFFALSE 9818
// KillUnit ( i ) ;
9807: LD_VAR 0 5
9811: PPUSH
9812: CALL_OW 66
9816: GO 9804
9818: POP
9819: POP
// exit ;
9820: GO 9867
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9822: LD_VAR 0 1
9826: PPUSH
9827: CALL_OW 266
9831: PUSH
9832: LD_INT 0
9834: PUSH
9835: LD_INT 1
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: IN
9842: IFFALSE 9867
// SetBName ( building , @ & GetSide ( building ) ) ;
9844: LD_VAR 0 1
9848: PPUSH
9849: LD_STRING @
9851: PUSH
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 255
9861: STR
9862: PPUSH
9863: CALL_OW 500
// end ;
9867: LD_VAR 0 4
9871: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9872: LD_INT 0
9874: PPUSH
9875: PPUSH
9876: PPUSH
// if mpGameType <> GameTypeFamine then
9877: LD_EXP 1
9881: PUSH
9882: LD_INT 5
9884: NONEQUAL
9885: IFFALSE 9889
// exit ;
9887: GO 10123
// for i := 1 to mpGlobalOilDeposits do
9889: LD_ADDR_VAR 0 6
9893: PUSH
9894: DOUBLE
9895: LD_INT 1
9897: DEC
9898: ST_TO_ADDR
9899: LD_EXP 40
9903: PUSH
9904: FOR_TO
9905: IFFALSE 10121
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9907: LD_EXP 40
9911: PUSH
9912: LD_VAR 0 6
9916: ARRAY
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: LD_EXP 40
9926: PUSH
9927: LD_VAR 0 6
9931: ARRAY
9932: PUSH
9933: LD_INT 2
9935: ARRAY
9936: PPUSH
9937: CALL_OW 428
9941: PUSH
9942: LD_VAR 0 1
9946: EQUAL
9947: IFFALSE 10119
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9949: LD_ADDR_VAR 0 7
9953: PUSH
9954: LD_EXP 40
9958: PUSH
9959: LD_VAR 0 6
9963: ARRAY
9964: PUSH
9965: LD_INT 3
9967: ARRAY
9968: ST_TO_ADDR
// value := value - amount ;
9969: LD_ADDR_VAR 0 7
9973: PUSH
9974: LD_VAR 0 7
9978: PUSH
9979: LD_VAR 0 4
9983: MINUS
9984: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9985: LD_ADDR_EXP 40
9989: PUSH
9990: LD_EXP 40
9994: PPUSH
9995: LD_VAR 0 6
9999: PPUSH
10000: LD_EXP 40
10004: PUSH
10005: LD_VAR 0 6
10009: ARRAY
10010: PPUSH
10011: LD_INT 3
10013: PPUSH
10014: LD_VAR 0 7
10018: PPUSH
10019: CALL_OW 1
10023: PPUSH
10024: CALL_OW 1
10028: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10029: LD_VAR 0 2
10033: PUSH
10034: LD_OWVAR 2
10038: PUSH
10039: LD_INT 9
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: IN
10046: IFFALSE 10062
// SetUnitDisplayNumber ( building , value ) ;
10048: LD_VAR 0 1
10052: PPUSH
10053: LD_VAR 0 7
10057: PPUSH
10058: CALL_OW 505
// if value <= 0 then
10062: LD_VAR 0 7
10066: PUSH
10067: LD_INT 0
10069: LESSEQUAL
10070: IFFALSE 10119
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
10072: LD_EXP 40
10076: PUSH
10077: LD_VAR 0 6
10081: ARRAY
10082: PUSH
10083: LD_INT 1
10085: ARRAY
10086: PPUSH
10087: LD_EXP 40
10091: PUSH
10092: LD_VAR 0 6
10096: ARRAY
10097: PUSH
10098: LD_INT 2
10100: ARRAY
10101: PPUSH
10102: CALL_OW 63
// KillUnit ( building ) ;
10106: LD_VAR 0 1
10110: PPUSH
10111: CALL_OW 66
// exit ;
10115: POP
10116: POP
10117: GO 10123
// end ; end ; end ;
10119: GO 9904
10121: POP
10122: POP
// end ;
10123: LD_VAR 0 5
10127: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
10128: LD_INT 0
10130: PPUSH
10131: PPUSH
10132: PPUSH
// if mpGameType <> GameTypeFamine then
10133: LD_EXP 1
10137: PUSH
10138: LD_INT 5
10140: NONEQUAL
10141: IFFALSE 10145
// exit ;
10143: GO 10379
// for i := 1 to mpGlobalSibDeposits do
10145: LD_ADDR_VAR 0 6
10149: PUSH
10150: DOUBLE
10151: LD_INT 1
10153: DEC
10154: ST_TO_ADDR
10155: LD_EXP 41
10159: PUSH
10160: FOR_TO
10161: IFFALSE 10377
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
10163: LD_EXP 41
10167: PUSH
10168: LD_VAR 0 6
10172: ARRAY
10173: PUSH
10174: LD_INT 1
10176: ARRAY
10177: PPUSH
10178: LD_EXP 41
10182: PUSH
10183: LD_VAR 0 6
10187: ARRAY
10188: PUSH
10189: LD_INT 2
10191: ARRAY
10192: PPUSH
10193: CALL_OW 428
10197: PUSH
10198: LD_VAR 0 1
10202: EQUAL
10203: IFFALSE 10375
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
10205: LD_ADDR_VAR 0 7
10209: PUSH
10210: LD_EXP 41
10214: PUSH
10215: LD_VAR 0 6
10219: ARRAY
10220: PUSH
10221: LD_INT 3
10223: ARRAY
10224: ST_TO_ADDR
// value := value - amount ;
10225: LD_ADDR_VAR 0 7
10229: PUSH
10230: LD_VAR 0 7
10234: PUSH
10235: LD_VAR 0 4
10239: MINUS
10240: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10241: LD_ADDR_EXP 41
10245: PUSH
10246: LD_EXP 41
10250: PPUSH
10251: LD_VAR 0 6
10255: PPUSH
10256: LD_EXP 41
10260: PUSH
10261: LD_VAR 0 6
10265: ARRAY
10266: PPUSH
10267: LD_INT 3
10269: PPUSH
10270: LD_VAR 0 7
10274: PPUSH
10275: CALL_OW 1
10279: PPUSH
10280: CALL_OW 1
10284: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10285: LD_VAR 0 2
10289: PUSH
10290: LD_OWVAR 2
10294: PUSH
10295: LD_INT 9
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: IN
10302: IFFALSE 10318
// SetUnitDisplayNumber ( building , value ) ;
10304: LD_VAR 0 1
10308: PPUSH
10309: LD_VAR 0 7
10313: PPUSH
10314: CALL_OW 505
// if value <= 0 then
10318: LD_VAR 0 7
10322: PUSH
10323: LD_INT 0
10325: LESSEQUAL
10326: IFFALSE 10375
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10328: LD_EXP 41
10332: PUSH
10333: LD_VAR 0 6
10337: ARRAY
10338: PUSH
10339: LD_INT 1
10341: ARRAY
10342: PPUSH
10343: LD_EXP 41
10347: PUSH
10348: LD_VAR 0 6
10352: ARRAY
10353: PUSH
10354: LD_INT 2
10356: ARRAY
10357: PPUSH
10358: CALL_OW 63
// KillUnit ( building ) ;
10362: LD_VAR 0 1
10366: PPUSH
10367: CALL_OW 66
// exit ;
10371: POP
10372: POP
10373: GO 10379
// end ; end ; end ;
10375: GO 10160
10377: POP
10378: POP
// end ;
10379: LD_VAR 0 5
10383: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10384: LD_INT 0
10386: PPUSH
10387: PPUSH
// side := GetSide ( factory ) ;
10388: LD_ADDR_VAR 0 7
10392: PUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: CALL_OW 255
10402: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10403: LD_VAR 0 5
10407: PUSH
10408: LD_INT 81
10410: EQUAL
10411: IFFALSE 10449
10413: PUSH
10414: LD_INT 22
10416: PUSH
10417: LD_VAR 0 7
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 34
10428: PUSH
10429: LD_INT 81
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PPUSH
10440: CALL_OW 69
10444: PUSH
10445: LD_INT 0
10447: GREATER
10448: AND
10449: IFFALSE 10482
// begin ComCancel ( factory ) ;
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 127
// if side = your_side then
10460: LD_VAR 0 7
10464: PUSH
10465: LD_OWVAR 2
10469: EQUAL
10470: IFFALSE 10482
// HintSpec ( VehLimit , 2 ) ;
10472: LD_STRING VehLimit
10474: PPUSH
10475: LD_INT 2
10477: PPUSH
10478: CALL_OW 338
// end ; end ;
10482: LD_VAR 0 6
10486: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10487: LD_INT 0
10489: PPUSH
10490: PPUSH
10491: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10492: LD_VAR 0 1
10496: PPUSH
10497: CALL_OW 264
10501: PUSH
10502: LD_INT 81
10504: EQUAL
10505: IFFALSE 10522
10507: PUSH
10508: LD_VAR 0 1
10512: PPUSH
10513: CALL_OW 263
10517: PUSH
10518: LD_INT 1
10520: EQUAL
10521: AND
10522: IFFALSE 10802
// begin for i := 1 to Count ( minersList ) do
10524: LD_ADDR_VAR 0 6
10528: PUSH
10529: DOUBLE
10530: LD_INT 1
10532: DEC
10533: ST_TO_ADDR
10534: LD_EXP 56
10538: PPUSH
10539: CALL 22122 0 1
10543: PUSH
10544: FOR_TO
10545: IFFALSE 10663
// begin if minersList [ i ] = oldId then
10547: LD_EXP 56
10551: PUSH
10552: LD_VAR 0 6
10556: ARRAY
10557: PUSH
10558: LD_VAR 0 2
10562: EQUAL
10563: IFFALSE 10661
// begin for j := 1 to minerMinesList [ i ] do
10565: LD_ADDR_VAR 0 7
10569: PUSH
10570: DOUBLE
10571: LD_INT 1
10573: DEC
10574: ST_TO_ADDR
10575: LD_EXP 57
10579: PUSH
10580: LD_VAR 0 6
10584: ARRAY
10585: PUSH
10586: FOR_TO
10587: IFFALSE 10637
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10589: LD_EXP 57
10593: PUSH
10594: LD_VAR 0 6
10598: ARRAY
10599: PUSH
10600: LD_VAR 0 7
10604: ARRAY
10605: PUSH
10606: LD_INT 1
10608: ARRAY
10609: PPUSH
10610: LD_EXP 57
10614: PUSH
10615: LD_VAR 0 6
10619: ARRAY
10620: PUSH
10621: LD_VAR 0 7
10625: ARRAY
10626: PUSH
10627: LD_INT 2
10629: ARRAY
10630: PPUSH
10631: CALL_OW 612
10635: GO 10586
10637: POP
10638: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10639: LD_ADDR_EXP 57
10643: PUSH
10644: LD_EXP 57
10648: PPUSH
10649: LD_VAR 0 6
10653: PPUSH
10654: CALL_OW 3
10658: ST_TO_ADDR
// break ;
10659: GO 10663
// end ; end ;
10661: GO 10544
10663: POP
10664: POP
// minersList := minersList diff oldId ;
10665: LD_ADDR_EXP 56
10669: PUSH
10670: LD_EXP 56
10674: PUSH
10675: LD_VAR 0 2
10679: DIFF
10680: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10681: LD_INT 22
10683: PUSH
10684: LD_VAR 0 4
10688: PPUSH
10689: CALL_OW 255
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 34
10700: PUSH
10701: LD_INT 81
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PPUSH
10712: CALL_OW 69
10716: PUSH
10717: LD_INT 1
10719: GREATER
10720: IFFALSE 10747
// begin ComExit ( unit ) ;
10722: LD_VAR 0 4
10726: PPUSH
10727: CALL 58496 0 1
// SetSide ( newId , oldSide ) ;
10731: LD_VAR 0 1
10735: PPUSH
10736: LD_VAR 0 3
10740: PPUSH
10741: CALL_OW 235
// exit ;
10745: GO 10802
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10747: LD_ADDR_EXP 56
10751: PUSH
10752: LD_EXP 56
10756: PPUSH
10757: LD_EXP 56
10761: PUSH
10762: LD_INT 1
10764: PLUS
10765: PPUSH
10766: LD_VAR 0 1
10770: PPUSH
10771: CALL_OW 1
10775: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10776: LD_ADDR_EXP 57
10780: PUSH
10781: LD_EXP 57
10785: PPUSH
10786: LD_EXP 57
10790: PUSH
10791: LD_INT 1
10793: PLUS
10794: PPUSH
10795: EMPTY
10796: PPUSH
10797: CALL_OW 1
10801: ST_TO_ADDR
// end ; end ; end_of_file
10802: LD_VAR 0 5
10806: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
10807: LD_EXP 37
10811: IFFALSE 11150
10813: GO 10815
10815: DISABLE
10816: LD_INT 0
10818: PPUSH
10819: PPUSH
10820: PPUSH
// begin mpKingPoints := [ ] ;
10821: LD_ADDR_EXP 48
10825: PUSH
10826: EMPTY
10827: ST_TO_ADDR
// if mpTeamGame then
10828: LD_EXP 9
10832: IFFALSE 10886
// begin for i := 1 to Count ( mpTeams ) do
10834: LD_ADDR_VAR 0 1
10838: PUSH
10839: DOUBLE
10840: LD_INT 1
10842: DEC
10843: ST_TO_ADDR
10844: LD_EXP 8
10848: PPUSH
10849: CALL 22122 0 1
10853: PUSH
10854: FOR_TO
10855: IFFALSE 10882
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
10857: LD_ADDR_EXP 48
10861: PUSH
10862: LD_EXP 48
10866: PPUSH
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_INT 0
10874: PPUSH
10875: CALL_OW 1
10879: ST_TO_ADDR
10880: GO 10854
10882: POP
10883: POP
// end else
10884: GO 10929
// begin for i := 1 to 8 do
10886: LD_ADDR_VAR 0 1
10890: PUSH
10891: DOUBLE
10892: LD_INT 1
10894: DEC
10895: ST_TO_ADDR
10896: LD_INT 8
10898: PUSH
10899: FOR_TO
10900: IFFALSE 10927
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
10902: LD_ADDR_EXP 48
10906: PUSH
10907: LD_EXP 48
10911: PPUSH
10912: LD_VAR 0 1
10916: PPUSH
10917: LD_INT 0
10919: PPUSH
10920: CALL_OW 1
10924: ST_TO_ADDR
10925: GO 10899
10927: POP
10928: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
10929: LD_ADDR_VAR 0 3
10933: PUSH
10934: LD_INT 50
10936: PPUSH
10937: LD_INT 0
10939: PPUSH
10940: CALL_OW 517
10944: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
10945: LD_ADDR_VAR 0 1
10949: PUSH
10950: DOUBLE
10951: LD_INT 1
10953: DEC
10954: ST_TO_ADDR
10955: LD_VAR 0 3
10959: PUSH
10960: LD_INT 1
10962: ARRAY
10963: PUSH
10964: FOR_TO
10965: IFFALSE 11032
// for j := 1 to 8 do
10967: LD_ADDR_VAR 0 2
10971: PUSH
10972: DOUBLE
10973: LD_INT 1
10975: DEC
10976: ST_TO_ADDR
10977: LD_INT 8
10979: PUSH
10980: FOR_TO
10981: IFFALSE 11028
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
10983: LD_VAR 0 3
10987: PUSH
10988: LD_INT 1
10990: ARRAY
10991: PUSH
10992: LD_VAR 0 1
10996: ARRAY
10997: PPUSH
10998: LD_VAR 0 3
11002: PUSH
11003: LD_INT 2
11005: ARRAY
11006: PUSH
11007: LD_VAR 0 1
11011: ARRAY
11012: PPUSH
11013: LD_VAR 0 2
11017: PPUSH
11018: LD_INT 12
11020: NEG
11021: PPUSH
11022: CALL_OW 330
11026: GO 10980
11028: POP
11029: POP
11030: GO 10964
11032: POP
11033: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
11034: LD_EXP 32
11038: PPUSH
11039: LD_INT 1
11041: PPUSH
11042: CALL_OW 424
// UpdateCounter ;
11046: CALL 11654 0 0
// repeat wait ( 0 0$1 ) ;
11050: LD_INT 35
11052: PPUSH
11053: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11057: LD_ADDR_VAR 0 3
11061: PUSH
11062: LD_EXP 32
11066: PPUSH
11067: LD_INT 3
11069: PUSH
11070: LD_INT 57
11072: PUSH
11073: EMPTY
11074: LIST
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 50
11082: PUSH
11083: EMPTY
11084: LIST
11085: PUSH
11086: LD_INT 2
11088: PUSH
11089: LD_INT 30
11091: PUSH
11092: LD_INT 0
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 30
11101: PUSH
11102: LD_INT 1
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: PPUSH
11119: CALL_OW 70
11123: ST_TO_ADDR
// if not tmp then
11124: LD_VAR 0 3
11128: NOT
11129: IFFALSE 11133
// continue ;
11131: GO 11050
// AddPoints ( tmp ) ;
11133: LD_VAR 0 3
11137: PPUSH
11138: CALL 11332 0 1
// UpdateCounter ;
11142: CALL 11654 0 0
// until false ;
11146: LD_INT 0
11148: IFFALSE 11050
// end ;
11150: PPOPN 3
11152: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
11153: LD_EXP 37
11157: IFFALSE 11165
11159: PUSH
11160: LD_EXP 35
11164: AND
11165: IFFALSE 11329
11167: GO 11169
11169: DISABLE
11170: LD_INT 0
11172: PPUSH
11173: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
11174: LD_ADDR_VAR 0 2
11178: PUSH
11179: LD_INT 50
11181: PPUSH
11182: LD_INT 0
11184: PPUSH
11185: CALL_OW 517
11189: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
11190: LD_ADDR_VAR 0 1
11194: PUSH
11195: DOUBLE
11196: LD_INT 1
11198: DEC
11199: ST_TO_ADDR
11200: LD_VAR 0 2
11204: PUSH
11205: LD_INT 1
11207: ARRAY
11208: PUSH
11209: FOR_TO
11210: IFFALSE 11251
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
11212: LD_VAR 0 2
11216: PUSH
11217: LD_INT 1
11219: ARRAY
11220: PUSH
11221: LD_VAR 0 1
11225: ARRAY
11226: PPUSH
11227: LD_VAR 0 2
11231: PUSH
11232: LD_INT 2
11234: ARRAY
11235: PUSH
11236: LD_VAR 0 1
11240: ARRAY
11241: PPUSH
11242: LD_INT 125
11244: PPUSH
11245: CALL_OW 495
11249: GO 11209
11251: POP
11252: POP
// repeat wait ( mpEmissions ) ;
11253: LD_EXP 35
11257: PPUSH
11258: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: DOUBLE
11268: LD_INT 1
11270: DEC
11271: ST_TO_ADDR
11272: LD_VAR 0 2
11276: PUSH
11277: LD_INT 1
11279: ARRAY
11280: PUSH
11281: FOR_TO
11282: IFFALSE 11323
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
11284: LD_VAR 0 2
11288: PUSH
11289: LD_INT 1
11291: ARRAY
11292: PUSH
11293: LD_VAR 0 1
11297: ARRAY
11298: PPUSH
11299: LD_VAR 0 2
11303: PUSH
11304: LD_INT 2
11306: ARRAY
11307: PUSH
11308: LD_VAR 0 1
11312: ARRAY
11313: PPUSH
11314: LD_INT 15
11316: PPUSH
11317: CALL_OW 495
11321: GO 11281
11323: POP
11324: POP
// until false ;
11325: LD_INT 0
11327: IFFALSE 11253
// end ;
11329: PPOPN 2
11331: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
11332: LD_INT 0
11334: PPUSH
11335: PPUSH
11336: PPUSH
11337: PPUSH
11338: PPUSH
// if mpTeamGame then
11339: LD_EXP 9
11343: IFFALSE 11540
// begin first := depots [ 1 ] ;
11345: LD_ADDR_VAR 0 4
11349: PUSH
11350: LD_VAR 0 1
11354: PUSH
11355: LD_INT 1
11357: ARRAY
11358: ST_TO_ADDR
// side := GetSide ( first ) ;
11359: LD_ADDR_VAR 0 6
11363: PUSH
11364: LD_VAR 0 4
11368: PPUSH
11369: CALL_OW 255
11373: ST_TO_ADDR
// for i := 1 to mpTeams do
11374: LD_ADDR_VAR 0 3
11378: PUSH
11379: DOUBLE
11380: LD_INT 1
11382: DEC
11383: ST_TO_ADDR
11384: LD_EXP 8
11388: PUSH
11389: FOR_TO
11390: IFFALSE 11424
// if side in mpTeams [ i ] then
11392: LD_VAR 0 6
11396: PUSH
11397: LD_EXP 8
11401: PUSH
11402: LD_VAR 0 3
11406: ARRAY
11407: IN
11408: IFFALSE 11422
// begin team := i ;
11410: LD_ADDR_VAR 0 5
11414: PUSH
11415: LD_VAR 0 3
11419: ST_TO_ADDR
// break ;
11420: GO 11424
// end ;
11422: GO 11389
11424: POP
11425: POP
// if not team then
11426: LD_VAR 0 5
11430: NOT
11431: IFFALSE 11435
// exit ;
11433: GO 11649
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11435: LD_EXP 32
11439: PPUSH
11440: LD_INT 81
11442: PUSH
11443: LD_VAR 0 6
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PPUSH
11452: CALL_OW 70
11456: IFFALSE 11460
// exit ;
11458: GO 11649
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
11460: LD_ADDR_EXP 48
11464: PUSH
11465: LD_EXP 48
11469: PPUSH
11470: LD_VAR 0 5
11474: PPUSH
11475: LD_EXP 48
11479: PUSH
11480: LD_VAR 0 5
11484: ARRAY
11485: PUSH
11486: LD_INT 1
11488: PLUS
11489: PPUSH
11490: CALL_OW 1
11494: ST_TO_ADDR
// for i in mpTeams [ team ] do
11495: LD_ADDR_VAR 0 3
11499: PUSH
11500: LD_EXP 8
11504: PUSH
11505: LD_VAR 0 5
11509: ARRAY
11510: PUSH
11511: FOR_IN
11512: IFFALSE 11536
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
11514: LD_VAR 0 3
11518: PPUSH
11519: LD_EXP 48
11523: PUSH
11524: LD_VAR 0 5
11528: ARRAY
11529: PPUSH
11530: CALL_OW 506
11534: GO 11511
11536: POP
11537: POP
// end else
11538: GO 11649
// begin first := depots [ 1 ] ;
11540: LD_ADDR_VAR 0 4
11544: PUSH
11545: LD_VAR 0 1
11549: PUSH
11550: LD_INT 1
11552: ARRAY
11553: ST_TO_ADDR
// side := GetSide ( first ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_VAR 0 4
11563: PPUSH
11564: CALL_OW 255
11568: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11569: LD_EXP 32
11573: PPUSH
11574: LD_INT 81
11576: PUSH
11577: LD_VAR 0 6
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 70
11590: IFFALSE 11594
// exit ;
11592: GO 11649
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
11594: LD_ADDR_EXP 48
11598: PUSH
11599: LD_EXP 48
11603: PPUSH
11604: LD_VAR 0 6
11608: PPUSH
11609: LD_EXP 48
11613: PUSH
11614: LD_VAR 0 6
11618: ARRAY
11619: PUSH
11620: LD_INT 1
11622: PLUS
11623: PPUSH
11624: CALL_OW 1
11628: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
11629: LD_VAR 0 6
11633: PPUSH
11634: LD_EXP 48
11638: PUSH
11639: LD_VAR 0 6
11643: ARRAY
11644: PPUSH
11645: CALL_OW 506
// end ; end ;
11649: LD_VAR 0 2
11653: RET
// function UpdateCounter ; var i ; begin
11654: LD_INT 0
11656: PPUSH
11657: PPUSH
// result := [ ] ;
11658: LD_ADDR_VAR 0 1
11662: PUSH
11663: EMPTY
11664: ST_TO_ADDR
// if mpTeamGame then
11665: LD_EXP 9
11669: IFFALSE 11736
// begin for i := 1 to mpTeams do
11671: LD_ADDR_VAR 0 2
11675: PUSH
11676: DOUBLE
11677: LD_INT 1
11679: DEC
11680: ST_TO_ADDR
11681: LD_EXP 8
11685: PUSH
11686: FOR_TO
11687: IFFALSE 11732
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
11689: LD_ADDR_VAR 0 1
11693: PUSH
11694: LD_VAR 0 1
11698: PUSH
11699: LD_STRING #KingoftheHill-Team
11701: PUSH
11702: LD_VAR 0 2
11706: PUSH
11707: LD_EXP 48
11711: PUSH
11712: LD_VAR 0 2
11716: ARRAY
11717: PUSH
11718: LD_EXP 33
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: ADD
11729: ST_TO_ADDR
11730: GO 11686
11732: POP
11733: POP
// end else
11734: GO 11809
// begin for i := 1 to 8 do
11736: LD_ADDR_VAR 0 2
11740: PUSH
11741: DOUBLE
11742: LD_INT 1
11744: DEC
11745: ST_TO_ADDR
11746: LD_INT 8
11748: PUSH
11749: FOR_TO
11750: IFFALSE 11807
// if mpSidePositions [ i ] then
11752: LD_EXP 5
11756: PUSH
11757: LD_VAR 0 2
11761: ARRAY
11762: IFFALSE 11805
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
11764: LD_ADDR_VAR 0 1
11768: PUSH
11769: LD_VAR 0 1
11773: PUSH
11774: LD_STRING #KingoftheHill-Player
11776: PUSH
11777: LD_VAR 0 2
11781: PUSH
11782: LD_EXP 48
11786: PUSH
11787: LD_VAR 0 2
11791: ARRAY
11792: PUSH
11793: LD_EXP 33
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: ADD
11804: ST_TO_ADDR
11805: GO 11749
11807: POP
11808: POP
// end ; mpDisplayStrings := result ;
11809: LD_ADDR_EXP 36
11813: PUSH
11814: LD_VAR 0 1
11818: ST_TO_ADDR
// end ;
11819: LD_VAR 0 1
11823: RET
// export function HowMuchPointsKing ( side ) ; begin
11824: LD_INT 0
11826: PPUSH
// result := HowMuchPoints ( side ) ;
11827: LD_ADDR_VAR 0 2
11831: PUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: CALL 11847 0 1
11841: ST_TO_ADDR
// end ;
11842: LD_VAR 0 2
11846: RET
// function HowMuchPoints ( side ) ; var i ; begin
11847: LD_INT 0
11849: PPUSH
11850: PPUSH
// if mpTeamGame then
11851: LD_EXP 9
11855: IFFALSE 11924
// begin for i := 1 to Count ( mpTeams ) do
11857: LD_ADDR_VAR 0 3
11861: PUSH
11862: DOUBLE
11863: LD_INT 1
11865: DEC
11866: ST_TO_ADDR
11867: LD_EXP 8
11871: PPUSH
11872: CALL 22122 0 1
11876: PUSH
11877: FOR_TO
11878: IFFALSE 11920
// begin if side in mpTeams [ i ] then
11880: LD_VAR 0 1
11884: PUSH
11885: LD_EXP 8
11889: PUSH
11890: LD_VAR 0 3
11894: ARRAY
11895: IN
11896: IFFALSE 11918
// begin result := mpKingPoints [ i ] ;
11898: LD_ADDR_VAR 0 2
11902: PUSH
11903: LD_EXP 48
11907: PUSH
11908: LD_VAR 0 3
11912: ARRAY
11913: ST_TO_ADDR
// exit ;
11914: POP
11915: POP
11916: GO 11940
// end ; end ;
11918: GO 11877
11920: POP
11921: POP
// end else
11922: GO 11940
// result := mpKingPoints [ side ] ;
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_EXP 48
11933: PUSH
11934: LD_VAR 0 1
11938: ARRAY
11939: ST_TO_ADDR
// end ;
11940: LD_VAR 0 2
11944: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
11945: LD_EXP 37
11949: IFFALSE 11957
11951: PUSH
11952: CALL 12369 0 0
11956: AND
11957: IFFALSE 11965
11959: PUSH
11960: LD_OWVAR 4
11964: AND
11965: IFFALSE 12218
11967: GO 11969
11969: DISABLE
11970: LD_INT 0
11972: PPUSH
11973: PPUSH
// begin canWin := false ;
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_INT 0
11981: ST_TO_ADDR
// if not HasPower ( your_side ) then
11982: LD_OWVAR 2
11986: PPUSH
11987: CALL 12411 0 1
11991: NOT
11992: IFFALSE 12003
// begin Multiplayer_Loose_Message ;
11994: CALL_OW 521
// enable ( mpLose ) ;
11998: LD_INT 102
12000: ENABLE_MARKED
// end else
12001: GO 12218
// begin if not EnemiesInGame then
12003: CALL 12221 0 0
12007: NOT
12008: IFFALSE 12015
// begin enable ( mpWin ) ;
12010: LD_INT 101
12012: ENABLE_MARKED
// exit ;
12013: GO 12218
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
12015: LD_ADDR_VAR 0 2
12019: PUSH
12020: LD_OWVAR 2
12024: PPUSH
12025: CALL 11847 0 1
12029: PUSH
12030: LD_EXP 33
12034: GREATEREQUAL
12035: IFFALSE 12048
12037: PUSH
12038: LD_OWVAR 2
12042: PPUSH
12043: CALL 12411 0 1
12047: AND
12048: ST_TO_ADDR
// for i := 1 to 8 do
12049: LD_ADDR_VAR 0 1
12053: PUSH
12054: DOUBLE
12055: LD_INT 1
12057: DEC
12058: ST_TO_ADDR
12059: LD_INT 8
12061: PUSH
12062: FOR_TO
12063: IFFALSE 12204
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12065: LD_EXP 5
12069: PUSH
12070: LD_VAR 0 1
12074: ARRAY
12075: IFFALSE 12088
12077: PUSH
12078: LD_VAR 0 1
12082: PPUSH
12083: CALL_OW 108
12087: AND
12088: IFFALSE 12102
12090: PUSH
12091: LD_VAR 0 1
12095: PUSH
12096: LD_OWVAR 2
12100: NONEQUAL
12101: AND
12102: IFFALSE 12202
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12104: LD_EXP 6
12108: PUSH
12109: LD_VAR 0 1
12113: ARRAY
12114: NOT
12115: IFTRUE 12163
12117: PUSH
12118: LD_EXP 6
12122: PUSH
12123: LD_VAR 0 1
12127: ARRAY
12128: PUSH
12129: LD_EXP 6
12133: PUSH
12134: LD_OWVAR 2
12138: ARRAY
12139: NONEQUAL
12140: IFFALSE 12162
12142: PUSH
12143: LD_OWVAR 2
12147: PPUSH
12148: LD_VAR 0 1
12152: PPUSH
12153: CALL_OW 81
12157: PUSH
12158: LD_INT 1
12160: NONEQUAL
12161: AND
12162: OR
12163: IFFALSE 12202
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL 11847 0 1
12174: PUSH
12175: LD_EXP 33
12179: GREATEREQUAL
12180: IFFALSE 12193
12182: PUSH
12183: LD_VAR 0 1
12187: PPUSH
12188: CALL 12411 0 1
12192: AND
12193: IFFALSE 12202
// begin enable ( mpLose ) ;
12195: LD_INT 102
12197: ENABLE_MARKED
// exit ;
12198: POP
12199: POP
12200: GO 12218
// end ;
12202: GO 12062
12204: POP
12205: POP
// if canWin then
12206: LD_VAR 0 2
12210: IFFALSE 12217
// enable ( mpWin ) else
12212: LD_INT 101
12214: ENABLE_MARKED
12215: GO 12218
// enable ;
12217: ENABLE
// end ; end ;
12218: PPOPN 2
12220: END
// function EnemiesInGame ; var i ; begin
12221: LD_INT 0
12223: PPUSH
12224: PPUSH
// result := false ;
12225: LD_ADDR_VAR 0 1
12229: PUSH
12230: LD_INT 0
12232: ST_TO_ADDR
// for i := 1 to 8 do
12233: LD_ADDR_VAR 0 2
12237: PUSH
12238: DOUBLE
12239: LD_INT 1
12241: DEC
12242: ST_TO_ADDR
12243: LD_INT 8
12245: PUSH
12246: FOR_TO
12247: IFFALSE 12362
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
12249: LD_VAR 0 2
12253: PUSH
12254: LD_OWVAR 2
12258: NONEQUAL
12259: IFFALSE 12272
12261: PUSH
12262: LD_VAR 0 2
12266: PPUSH
12267: CALL 12411 0 1
12271: AND
12272: IFFALSE 12285
12274: PUSH
12275: LD_VAR 0 2
12279: PPUSH
12280: CALL_OW 108
12284: AND
12285: IFFALSE 12360
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12287: LD_EXP 6
12291: PUSH
12292: LD_VAR 0 2
12296: ARRAY
12297: NOT
12298: IFTRUE 12346
12300: PUSH
12301: LD_EXP 6
12305: PUSH
12306: LD_VAR 0 2
12310: ARRAY
12311: PUSH
12312: LD_EXP 6
12316: PUSH
12317: LD_OWVAR 2
12321: ARRAY
12322: NONEQUAL
12323: IFFALSE 12345
12325: PUSH
12326: LD_OWVAR 2
12330: PPUSH
12331: LD_VAR 0 2
12335: PPUSH
12336: CALL_OW 81
12340: PUSH
12341: LD_INT 1
12343: NONEQUAL
12344: AND
12345: OR
12346: IFFALSE 12360
// begin result := true ;
12348: LD_ADDR_VAR 0 1
12352: PUSH
12353: LD_INT 1
12355: ST_TO_ADDR
// exit ;
12356: POP
12357: POP
12358: GO 12364
// end ;
12360: GO 12246
12362: POP
12363: POP
// end ;
12364: LD_VAR 0 1
12368: RET
// function CanWinLoose ; begin
12369: LD_INT 0
12371: PPUSH
// result := true ;
12372: LD_ADDR_VAR 0 1
12376: PUSH
12377: LD_INT 1
12379: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12380: CALL_OW 531
12384: IFFALSE 12396
12386: PUSH
12387: CALL_OW 519
12391: PUSH
12392: LD_INT 1
12394: GREATER
12395: AND
12396: IFFALSE 12406
// result := false ;
12398: LD_ADDR_VAR 0 1
12402: PUSH
12403: LD_INT 0
12405: ST_TO_ADDR
// end ;
12406: LD_VAR 0 1
12410: RET
// function HasPower ( i ) ; begin
12411: LD_INT 0
12413: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12414: LD_ADDR_VAR 0 2
12418: PUSH
12419: LD_INT 22
12421: PUSH
12422: LD_VAR 0 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 2
12433: PUSH
12434: LD_INT 21
12436: PUSH
12437: LD_INT 1
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 33
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 33
12456: PUSH
12457: LD_INT 5
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: ST_TO_ADDR
// end ; end_of_file
12479: LD_VAR 0 2
12483: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
12484: LD_EXP 37
12488: IFFALSE 12496
12490: PUSH
12491: CALL 12706 0 0
12495: AND
12496: IFFALSE 12504
12498: PUSH
12499: LD_OWVAR 4
12503: AND
12504: IFFALSE 12703
12506: GO 12508
12508: DISABLE
12509: LD_INT 0
12511: PPUSH
12512: PPUSH
// begin canWin := false ;
12513: LD_ADDR_VAR 0 2
12517: PUSH
12518: LD_INT 0
12520: ST_TO_ADDR
// if not HasPower ( your_side ) then
12521: LD_OWVAR 2
12525: PPUSH
12526: CALL 12748 0 1
12530: NOT
12531: IFFALSE 12542
// begin Multiplayer_Loose_Message ;
12533: CALL_OW 521
// enable ( mpLose ) ;
12537: LD_INT 102
12539: ENABLE_MARKED
// end else
12540: GO 12703
// begin canWin := true ;
12542: LD_ADDR_VAR 0 2
12546: PUSH
12547: LD_INT 1
12549: ST_TO_ADDR
// for i := 1 to 8 do
12550: LD_ADDR_VAR 0 1
12554: PUSH
12555: DOUBLE
12556: LD_INT 1
12558: DEC
12559: ST_TO_ADDR
12560: LD_INT 8
12562: PUSH
12563: FOR_TO
12564: IFFALSE 12689
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12566: LD_EXP 5
12570: PUSH
12571: LD_VAR 0 1
12575: ARRAY
12576: IFFALSE 12589
12578: PUSH
12579: LD_VAR 0 1
12583: PPUSH
12584: CALL_OW 108
12588: AND
12589: IFFALSE 12603
12591: PUSH
12592: LD_VAR 0 1
12596: PUSH
12597: LD_OWVAR 2
12601: NONEQUAL
12602: AND
12603: IFFALSE 12687
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12605: LD_EXP 6
12609: PUSH
12610: LD_VAR 0 1
12614: ARRAY
12615: NOT
12616: IFTRUE 12664
12618: PUSH
12619: LD_EXP 6
12623: PUSH
12624: LD_VAR 0 1
12628: ARRAY
12629: PUSH
12630: LD_EXP 6
12634: PUSH
12635: LD_OWVAR 2
12639: ARRAY
12640: NONEQUAL
12641: IFFALSE 12663
12643: PUSH
12644: LD_OWVAR 2
12648: PPUSH
12649: LD_VAR 0 1
12653: PPUSH
12654: CALL_OW 81
12658: PUSH
12659: LD_INT 1
12661: NONEQUAL
12662: AND
12663: OR
12664: IFFALSE 12687
// if HasPower ( i ) then
12666: LD_VAR 0 1
12670: PPUSH
12671: CALL 12748 0 1
12675: IFFALSE 12687
// begin canWin := false ;
12677: LD_ADDR_VAR 0 2
12681: PUSH
12682: LD_INT 0
12684: ST_TO_ADDR
// break ;
12685: GO 12689
// end ;
12687: GO 12563
12689: POP
12690: POP
// if canWin then
12691: LD_VAR 0 2
12695: IFFALSE 12702
// enable ( mpWin ) else
12697: LD_INT 101
12699: ENABLE_MARKED
12700: GO 12703
// enable ;
12702: ENABLE
// end ; end ;
12703: PPOPN 2
12705: END
// function CanWinLoose ; begin
12706: LD_INT 0
12708: PPUSH
// result := true ;
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 1
12716: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12717: CALL_OW 531
12721: IFFALSE 12733
12723: PUSH
12724: CALL_OW 519
12728: PUSH
12729: LD_INT 1
12731: GREATER
12732: AND
12733: IFFALSE 12743
// result := false ;
12735: LD_ADDR_VAR 0 1
12739: PUSH
12740: LD_INT 0
12742: ST_TO_ADDR
// end ;
12743: LD_VAR 0 1
12747: RET
// function HasPower ( i ) ; begin
12748: LD_INT 0
12750: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12751: LD_ADDR_VAR 0 2
12755: PUSH
12756: LD_INT 22
12758: PUSH
12759: LD_VAR 0 1
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 2
12770: PUSH
12771: LD_INT 21
12773: PUSH
12774: LD_INT 1
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 33
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 33
12793: PUSH
12794: LD_INT 5
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PPUSH
12811: CALL_OW 69
12815: ST_TO_ADDR
// end ; end_of_file
12816: LD_VAR 0 2
12820: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
12821: LD_EXP 37
12825: IFFALSE 12868
12827: GO 12829
12829: DISABLE
12830: LD_INT 0
12832: PPUSH
// begin for i := 1 to 8 do
12833: LD_ADDR_VAR 0 1
12837: PUSH
12838: DOUBLE
12839: LD_INT 1
12841: DEC
12842: ST_TO_ADDR
12843: LD_INT 8
12845: PUSH
12846: FOR_TO
12847: IFFALSE 12866
// SetRestrict ( b_depot , i , state_disabled ) ;
12849: LD_INT 0
12851: PPUSH
12852: LD_VAR 0 1
12856: PPUSH
12857: LD_INT 0
12859: PPUSH
12860: CALL_OW 324
12864: GO 12846
12866: POP
12867: POP
// end ;
12868: PPOPN 1
12870: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
12871: LD_EXP 37
12875: IFFALSE 12883
12877: PUSH
12878: CALL 13093 0 0
12882: AND
12883: IFFALSE 12891
12885: PUSH
12886: LD_OWVAR 4
12890: AND
12891: IFFALSE 13090
12893: GO 12895
12895: DISABLE
12896: LD_INT 0
12898: PPUSH
12899: PPUSH
// begin canWin := false ;
12900: LD_ADDR_VAR 0 2
12904: PUSH
12905: LD_INT 0
12907: ST_TO_ADDR
// if not HasPower ( your_side ) then
12908: LD_OWVAR 2
12912: PPUSH
12913: CALL 13135 0 1
12917: NOT
12918: IFFALSE 12929
// begin Multiplayer_Loose_Message ;
12920: CALL_OW 521
// enable ( mpLose ) ;
12924: LD_INT 102
12926: ENABLE_MARKED
// end else
12927: GO 13090
// begin canWin := true ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// for i := 1 to 8 do
12937: LD_ADDR_VAR 0 1
12941: PUSH
12942: DOUBLE
12943: LD_INT 1
12945: DEC
12946: ST_TO_ADDR
12947: LD_INT 8
12949: PUSH
12950: FOR_TO
12951: IFFALSE 13076
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12953: LD_EXP 5
12957: PUSH
12958: LD_VAR 0 1
12962: ARRAY
12963: IFFALSE 12976
12965: PUSH
12966: LD_VAR 0 1
12970: PPUSH
12971: CALL_OW 108
12975: AND
12976: IFFALSE 12990
12978: PUSH
12979: LD_VAR 0 1
12983: PUSH
12984: LD_OWVAR 2
12988: NONEQUAL
12989: AND
12990: IFFALSE 13074
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12992: LD_EXP 6
12996: PUSH
12997: LD_VAR 0 1
13001: ARRAY
13002: NOT
13003: IFTRUE 13051
13005: PUSH
13006: LD_EXP 6
13010: PUSH
13011: LD_VAR 0 1
13015: ARRAY
13016: PUSH
13017: LD_EXP 6
13021: PUSH
13022: LD_OWVAR 2
13026: ARRAY
13027: NONEQUAL
13028: IFFALSE 13050
13030: PUSH
13031: LD_OWVAR 2
13035: PPUSH
13036: LD_VAR 0 1
13040: PPUSH
13041: CALL_OW 81
13045: PUSH
13046: LD_INT 1
13048: NONEQUAL
13049: AND
13050: OR
13051: IFFALSE 13074
// if HasPower ( i ) then
13053: LD_VAR 0 1
13057: PPUSH
13058: CALL 13135 0 1
13062: IFFALSE 13074
// begin canWin := false ;
13064: LD_ADDR_VAR 0 2
13068: PUSH
13069: LD_INT 0
13071: ST_TO_ADDR
// break ;
13072: GO 13076
// end ;
13074: GO 12950
13076: POP
13077: POP
// if canWin then
13078: LD_VAR 0 2
13082: IFFALSE 13089
// enable ( mpWin ) else
13084: LD_INT 101
13086: ENABLE_MARKED
13087: GO 13090
// enable ;
13089: ENABLE
// end ; end ;
13090: PPOPN 2
13092: END
// function CanWinLoose ; begin
13093: LD_INT 0
13095: PPUSH
// result := true ;
13096: LD_ADDR_VAR 0 1
13100: PUSH
13101: LD_INT 1
13103: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13104: CALL_OW 531
13108: IFFALSE 13120
13110: PUSH
13111: CALL_OW 519
13115: PUSH
13116: LD_INT 1
13118: GREATER
13119: AND
13120: IFFALSE 13130
// result := false ;
13122: LD_ADDR_VAR 0 1
13126: PUSH
13127: LD_INT 0
13129: ST_TO_ADDR
// end ;
13130: LD_VAR 0 1
13134: RET
// function HasPower ( i ) ; begin
13135: LD_INT 0
13137: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
13138: LD_INT 22
13140: PUSH
13141: LD_VAR 0 1
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: LD_INT 30
13155: PUSH
13156: LD_INT 0
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 30
13165: PUSH
13166: LD_INT 1
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PPUSH
13182: CALL_OW 69
13186: NOT
13187: IFFALSE 13191
// exit ;
13189: GO 13256
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_VAR 0 1
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: LD_INT 21
13213: PUSH
13214: LD_INT 1
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 33
13223: PUSH
13224: LD_INT 3
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 33
13233: PUSH
13234: LD_INT 5
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PPUSH
13251: CALL_OW 69
13255: ST_TO_ADDR
// end ; end_of_file
13256: LD_VAR 0 2
13260: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
13261: LD_VAR 0 1
13265: PUSH
13266: LD_INT 200
13268: DOUBLE
13269: GREATEREQUAL
13270: IFFALSE 13278
13272: LD_INT 299
13274: DOUBLE
13275: LESSEQUAL
13276: IFTRUE 13280
13278: GO 13312
13280: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
13281: LD_VAR 0 1
13285: PPUSH
13286: LD_VAR 0 2
13290: PPUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_VAR 0 4
13300: PPUSH
13301: LD_VAR 0 5
13305: PPUSH
13306: CALL 14174 0 5
13310: GO 13389
13312: LD_INT 300
13314: DOUBLE
13315: GREATEREQUAL
13316: IFFALSE 13324
13318: LD_INT 399
13320: DOUBLE
13321: LESSEQUAL
13322: IFTRUE 13326
13324: GO 13388
13326: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
13327: LD_VAR 0 1
13331: PPUSH
13332: LD_VAR 0 2
13336: PPUSH
13337: LD_VAR 0 3
13341: PPUSH
13342: LD_VAR 0 4
13346: PPUSH
13347: LD_VAR 0 5
13351: PPUSH
13352: LD_VAR 0 6
13356: PPUSH
13357: LD_VAR 0 7
13361: PPUSH
13362: LD_VAR 0 8
13366: PPUSH
13367: LD_VAR 0 9
13371: PPUSH
13372: LD_VAR 0 10
13376: PPUSH
13377: LD_VAR 0 11
13381: PPUSH
13382: CALL 64156 0 11
13386: GO 13389
13388: POP
// end ;
13389: PPOPN 11
13391: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
13392: LD_VAR 0 1
13396: PPUSH
13397: LD_VAR 0 2
13401: PPUSH
13402: LD_VAR 0 3
13406: PPUSH
13407: LD_VAR 0 4
13411: PPUSH
13412: LD_VAR 0 5
13416: PPUSH
13417: CALL 13474 0 5
// end ; end_of_file
13421: PPOPN 5
13423: END
// export function SOS_UnitDestroyed ( un ) ; begin
13424: LD_INT 0
13426: PPUSH
// ComRadiation ( un ) ;
13427: LD_VAR 0 1
13431: PPUSH
13432: CALL 14594 0 1
// end ;
13436: LD_VAR 0 2
13440: RET
// export function SOS_UnitKamikazed ( un ) ; begin
13441: LD_INT 0
13443: PPUSH
// ComRadiation ( un ) ;
13444: LD_VAR 0 1
13448: PPUSH
13449: CALL 14594 0 1
// end ;
13453: LD_VAR 0 2
13457: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
13458: LD_INT 0
13460: PPUSH
// end ;
13461: LD_VAR 0 4
13465: RET
// export function SOS_Command ( cmd ) ; begin
13466: LD_INT 0
13468: PPUSH
// end ;
13469: LD_VAR 0 2
13473: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
13474: LD_INT 0
13476: PPUSH
// end ;
13477: LD_VAR 0 6
13481: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
13482: LD_INT 0
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
13488: PPUSH
// if not vehicle or not factory then
13489: LD_VAR 0 1
13493: NOT
13494: IFTRUE 13503
13496: PUSH
13497: LD_VAR 0 2
13501: NOT
13502: OR
13503: IFFALSE 13507
// exit ;
13505: GO 14169
// weapon := GetWeapon ( vehicle ) ;
13507: LD_ADDR_VAR 0 7
13511: PUSH
13512: LD_VAR 0 1
13516: PPUSH
13517: CALL_OW 264
13521: ST_TO_ADDR
// if weapon = ar_miner then
13522: LD_VAR 0 7
13526: PUSH
13527: LD_INT 81
13529: EQUAL
13530: IFFALSE 13587
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
13532: LD_ADDR_EXP 56
13536: PUSH
13537: LD_EXP 56
13541: PPUSH
13542: LD_EXP 56
13546: PUSH
13547: LD_INT 1
13549: PLUS
13550: PPUSH
13551: LD_VAR 0 1
13555: PPUSH
13556: CALL_OW 1
13560: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13561: LD_ADDR_EXP 57
13565: PUSH
13566: LD_EXP 57
13570: PPUSH
13571: LD_EXP 57
13575: PUSH
13576: LD_INT 1
13578: PLUS
13579: PPUSH
13580: EMPTY
13581: PPUSH
13582: CALL_OW 1
13586: ST_TO_ADDR
// end ; if not factoryWaypoints then
13587: LD_EXP 59
13591: NOT
13592: IFFALSE 13596
// exit ;
13594: GO 14169
// for i := 1 to Count ( factoryWaypoints ) do
13596: LD_ADDR_VAR 0 4
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_EXP 59
13610: PPUSH
13611: CALL 22122 0 1
13615: PUSH
13616: FOR_TO
13617: IFFALSE 14167
// if factoryWaypoints [ i ] [ 2 ] = factory then
13619: LD_EXP 59
13623: PUSH
13624: LD_VAR 0 4
13628: ARRAY
13629: PUSH
13630: LD_INT 2
13632: ARRAY
13633: PUSH
13634: LD_VAR 0 2
13638: EQUAL
13639: IFFALSE 14165
// begin if GetControl ( vehicle ) = control_manual then
13641: LD_VAR 0 1
13645: PPUSH
13646: CALL_OW 263
13650: PUSH
13651: LD_INT 1
13653: EQUAL
13654: IFFALSE 14018
// begin driver := IsDrivenBy ( vehicle ) ;
13656: LD_ADDR_VAR 0 5
13660: PUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 311
13670: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
13671: LD_VAR 0 5
13675: PUSH
13676: LD_EXP 60
13680: IN
13681: IFTRUE 13695
13683: PUSH
13684: LD_VAR 0 1
13688: PUSH
13689: LD_EXP 60
13693: IN
13694: OR
13695: IFFALSE 13701
// exit ;
13697: POP
13698: POP
13699: GO 14169
// if not HasTask ( driver ) then
13701: LD_VAR 0 5
13705: PPUSH
13706: CALL_OW 314
13710: NOT
13711: IFFALSE 14016
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
13713: LD_ADDR_EXP 60
13717: PUSH
13718: LD_EXP 60
13722: PPUSH
13723: LD_VAR 0 5
13727: PPUSH
13728: CALL 58098 0 2
13732: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
13733: LD_ADDR_EXP 60
13737: PUSH
13738: LD_EXP 60
13742: PPUSH
13743: LD_VAR 0 1
13747: PPUSH
13748: CALL 58098 0 2
13752: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13753: LD_ADDR_VAR 0 6
13757: PUSH
13758: LD_EXP 59
13762: PUSH
13763: LD_VAR 0 4
13767: ARRAY
13768: PUSH
13769: LD_INT 3
13771: ARRAY
13772: PPUSH
13773: LD_EXP 59
13777: PUSH
13778: LD_VAR 0 4
13782: ARRAY
13783: PUSH
13784: LD_INT 4
13786: ARRAY
13787: PPUSH
13788: CALL_OW 428
13792: ST_TO_ADDR
// if hex then
13793: LD_VAR 0 6
13797: IFFALSE 13815
// ComMoveUnit ( driver , hex ) else
13799: LD_VAR 0 5
13803: PPUSH
13804: LD_VAR 0 6
13808: PPUSH
13809: CALL_OW 112
13813: GO 13899
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
13815: LD_VAR 0 1
13819: PPUSH
13820: LD_EXP 59
13824: PUSH
13825: LD_VAR 0 4
13829: ARRAY
13830: PUSH
13831: LD_INT 3
13833: ARRAY
13834: PPUSH
13835: LD_EXP 59
13839: PUSH
13840: LD_VAR 0 4
13844: ARRAY
13845: PUSH
13846: LD_INT 4
13848: ARRAY
13849: PPUSH
13850: CALL_OW 297
13854: PUSH
13855: LD_INT 0
13857: GREATER
13858: IFFALSE 13899
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13860: LD_VAR 0 5
13864: PPUSH
13865: LD_EXP 59
13869: PUSH
13870: LD_VAR 0 4
13874: ARRAY
13875: PUSH
13876: LD_INT 3
13878: ARRAY
13879: PPUSH
13880: LD_EXP 59
13884: PUSH
13885: LD_VAR 0 4
13889: ARRAY
13890: PUSH
13891: LD_INT 4
13893: ARRAY
13894: PPUSH
13895: CALL_OW 111
// AddComExitVehicle ( driver ) ;
13899: LD_VAR 0 5
13903: PPUSH
13904: CALL_OW 181
// if Multiplayer then
13908: LD_OWVAR 4
13912: IFFALSE 13961
// begin repeat wait ( 10 ) ;
13914: LD_INT 10
13916: PPUSH
13917: CALL_OW 67
// until not IsInUnit ( driver ) ;
13921: LD_VAR 0 5
13925: PPUSH
13926: CALL_OW 310
13930: NOT
13931: IFFALSE 13914
// if not HasTask ( driver ) then
13933: LD_VAR 0 5
13937: PPUSH
13938: CALL_OW 314
13942: NOT
13943: IFFALSE 13959
// ComEnterUnit ( driver , factory ) ;
13945: LD_VAR 0 5
13949: PPUSH
13950: LD_VAR 0 2
13954: PPUSH
13955: CALL_OW 120
// end else
13959: GO 13975
// AddComEnterUnit ( driver , factory ) ;
13961: LD_VAR 0 5
13965: PPUSH
13966: LD_VAR 0 2
13970: PPUSH
13971: CALL_OW 180
// wait ( 0 0$1 ) ;
13975: LD_INT 35
13977: PPUSH
13978: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
13982: LD_ADDR_EXP 60
13986: PUSH
13987: LD_EXP 60
13991: PUSH
13992: LD_VAR 0 5
13996: DIFF
13997: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
13998: LD_ADDR_EXP 60
14002: PUSH
14003: LD_EXP 60
14007: PUSH
14008: LD_VAR 0 1
14012: DIFF
14013: ST_TO_ADDR
// break ;
14014: GO 14167
// end ; end else
14016: GO 14165
// if GetControl ( vehicle ) = control_remote then
14018: LD_VAR 0 1
14022: PPUSH
14023: CALL_OW 263
14027: PUSH
14028: LD_INT 2
14030: EQUAL
14031: IFFALSE 14117
// begin wait ( 0 0$2 ) ;
14033: LD_INT 70
14035: PPUSH
14036: CALL_OW 67
// repeat wait ( 10 ) ;
14040: LD_INT 10
14042: PPUSH
14043: CALL_OW 67
// Connect ( vehicle ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: CALL 28400 0 1
// until IsControledBy ( vehicle ) ;
14056: LD_VAR 0 1
14060: PPUSH
14061: CALL_OW 312
14065: IFFALSE 14040
// wait ( 10 ) ;
14067: LD_INT 10
14069: PPUSH
14070: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
14074: LD_VAR 0 1
14078: PPUSH
14079: LD_EXP 59
14083: PUSH
14084: LD_VAR 0 4
14088: ARRAY
14089: PUSH
14090: LD_INT 3
14092: ARRAY
14093: PPUSH
14094: LD_EXP 59
14098: PUSH
14099: LD_VAR 0 4
14103: ARRAY
14104: PUSH
14105: LD_INT 4
14107: ARRAY
14108: PPUSH
14109: CALL_OW 111
// break ;
14113: GO 14167
// end else
14115: GO 14165
// begin wait ( 0 0$3 ) ;
14117: LD_INT 105
14119: PPUSH
14120: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_EXP 59
14133: PUSH
14134: LD_VAR 0 4
14138: ARRAY
14139: PUSH
14140: LD_INT 3
14142: ARRAY
14143: PPUSH
14144: LD_EXP 59
14148: PUSH
14149: LD_VAR 0 4
14153: ARRAY
14154: PUSH
14155: LD_INT 4
14157: ARRAY
14158: PPUSH
14159: CALL_OW 111
// break ;
14163: GO 14167
// end ; end ;
14165: GO 13616
14167: POP
14168: POP
// end ;
14169: LD_VAR 0 3
14173: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
14174: LD_INT 0
14176: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
14177: LD_VAR 0 1
14181: PUSH
14182: LD_INT 250
14184: EQUAL
14185: IFFALSE 14202
14187: PUSH
14188: LD_VAR 0 2
14192: PPUSH
14193: CALL_OW 264
14197: PUSH
14198: LD_INT 81
14200: EQUAL
14201: AND
14202: IFFALSE 14223
// MinerPlaceMine ( unit , x , y ) ;
14204: LD_VAR 0 2
14208: PPUSH
14209: LD_VAR 0 4
14213: PPUSH
14214: LD_VAR 0 5
14218: PPUSH
14219: CALL 17569 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
14223: LD_VAR 0 1
14227: PUSH
14228: LD_INT 251
14230: EQUAL
14231: IFFALSE 14248
14233: PUSH
14234: LD_VAR 0 2
14238: PPUSH
14239: CALL_OW 264
14243: PUSH
14244: LD_INT 81
14246: EQUAL
14247: AND
14248: IFFALSE 14269
// MinerDetonateMine ( unit , x , y ) ;
14250: LD_VAR 0 2
14254: PPUSH
14255: LD_VAR 0 4
14259: PPUSH
14260: LD_VAR 0 5
14264: PPUSH
14265: CALL 17976 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
14269: LD_VAR 0 1
14273: PUSH
14274: LD_INT 252
14276: EQUAL
14277: IFFALSE 14294
14279: PUSH
14280: LD_VAR 0 2
14284: PPUSH
14285: CALL_OW 264
14289: PUSH
14290: LD_INT 81
14292: EQUAL
14293: AND
14294: IFFALSE 14315
// MinerCreateMinefield ( unit , x , y ) ;
14296: LD_VAR 0 2
14300: PPUSH
14301: LD_VAR 0 4
14305: PPUSH
14306: LD_VAR 0 5
14310: PPUSH
14311: CALL 18208 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
14315: LD_VAR 0 1
14319: PUSH
14320: LD_INT 253
14322: EQUAL
14323: IFFALSE 14340
14325: PUSH
14326: LD_VAR 0 2
14330: PPUSH
14331: CALL_OW 257
14335: PUSH
14336: LD_INT 5
14338: EQUAL
14339: AND
14340: IFFALSE 14361
// ComBinocular ( unit , x , y ) ;
14342: LD_VAR 0 2
14346: PPUSH
14347: LD_VAR 0 4
14351: PPUSH
14352: LD_VAR 0 5
14356: PPUSH
14357: CALL 18583 0 3
// if selectedUnit then
14361: LD_VAR 0 3
14365: IFFALSE 14425
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
14367: LD_VAR 0 1
14371: PUSH
14372: LD_INT 254
14374: EQUAL
14375: IFFALSE 14392
14377: PUSH
14378: LD_VAR 0 2
14382: PPUSH
14383: CALL_OW 264
14387: PUSH
14388: LD_INT 99
14390: EQUAL
14391: AND
14392: IFFALSE 14409
14394: PUSH
14395: LD_VAR 0 3
14399: PPUSH
14400: CALL_OW 263
14404: PUSH
14405: LD_INT 3
14407: EQUAL
14408: AND
14409: IFFALSE 14425
// HackDestroyVehicle ( unit , selectedUnit ) ;
14411: LD_VAR 0 2
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: CALL 16759 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
14425: LD_VAR 0 1
14429: PUSH
14430: LD_INT 255
14432: EQUAL
14433: IFFALSE 14457
14435: PUSH
14436: LD_VAR 0 2
14440: PPUSH
14441: CALL_OW 264
14445: PUSH
14446: LD_INT 14
14448: PUSH
14449: LD_INT 53
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: IN
14456: AND
14457: IFFALSE 14475
14459: PUSH
14460: LD_VAR 0 4
14464: PPUSH
14465: LD_VAR 0 5
14469: PPUSH
14470: CALL_OW 488
14474: AND
14475: IFFALSE 14499
// CutTreeXYR ( unit , x , y , 12 ) ;
14477: LD_VAR 0 2
14481: PPUSH
14482: LD_VAR 0 4
14486: PPUSH
14487: LD_VAR 0 5
14491: PPUSH
14492: LD_INT 12
14494: PPUSH
14495: CALL 14690 0 4
// if cmd = 256 then
14499: LD_VAR 0 1
14503: PUSH
14504: LD_INT 256
14506: EQUAL
14507: IFFALSE 14528
// SetFactoryWaypoint ( unit , x , y ) ;
14509: LD_VAR 0 2
14513: PPUSH
14514: LD_VAR 0 4
14518: PPUSH
14519: LD_VAR 0 5
14523: PPUSH
14524: CALL 64164 0 3
// if cmd = 257 then
14528: LD_VAR 0 1
14532: PUSH
14533: LD_INT 257
14535: EQUAL
14536: IFFALSE 14557
// SetWarehouseGatheringPoint ( unit , x , y ) ;
14538: LD_VAR 0 2
14542: PPUSH
14543: LD_VAR 0 4
14547: PPUSH
14548: LD_VAR 0 5
14552: PPUSH
14553: CALL 64660 0 3
// if cmd = 258 then
14557: LD_VAR 0 1
14561: PUSH
14562: LD_INT 258
14564: EQUAL
14565: IFFALSE 14589
// BurnTreeXYR ( unit , x , y , 8 ) ;
14567: LD_VAR 0 2
14571: PPUSH
14572: LD_VAR 0 4
14576: PPUSH
14577: LD_VAR 0 5
14581: PPUSH
14582: LD_INT 8
14584: PPUSH
14585: CALL 15112 0 4
// end ;
14589: LD_VAR 0 6
14593: RET
// export function ComRadiation ( un ) ; var eff ; begin
14594: LD_INT 0
14596: PPUSH
14597: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 264
14607: PUSH
14608: LD_INT 91
14610: NONEQUAL
14611: IFFALSE 14615
// exit ;
14613: GO 14685
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
14615: LD_INT 68
14617: PPUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 255
14627: PPUSH
14628: CALL_OW 321
14632: PUSH
14633: LD_INT 2
14635: EQUAL
14636: IFFALSE 14648
// eff := 50 else
14638: LD_ADDR_VAR 0 3
14642: PUSH
14643: LD_INT 50
14645: ST_TO_ADDR
14646: GO 14656
// eff := 25 ;
14648: LD_ADDR_VAR 0 3
14652: PUSH
14653: LD_INT 25
14655: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
14656: LD_VAR 0 1
14660: PPUSH
14661: CALL_OW 250
14665: PPUSH
14666: LD_VAR 0 1
14670: PPUSH
14671: CALL_OW 251
14675: PPUSH
14676: LD_VAR 0 3
14680: PPUSH
14681: CALL_OW 495
// end ;
14685: LD_VAR 0 2
14689: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14690: LD_INT 0
14692: PPUSH
14693: PPUSH
14694: PPUSH
14695: PPUSH
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
14700: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
14701: LD_VAR 0 1
14705: PPUSH
14706: CALL_OW 302
14710: NOT
14711: IFTRUE 14730
14713: PUSH
14714: LD_VAR 0 2
14718: PPUSH
14719: LD_VAR 0 3
14723: PPUSH
14724: CALL_OW 488
14728: NOT
14729: OR
14730: IFTRUE 14739
14732: PUSH
14733: LD_VAR 0 4
14737: NOT
14738: OR
14739: IFFALSE 14743
// exit ;
14741: GO 15107
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
14743: LD_VAR 0 1
14747: PPUSH
14748: CALL_OW 437
14752: PPUSH
14753: CALL 22122 0 1
14757: PUSH
14758: LD_INT 10
14760: GREATER
14761: IFFALSE 14765
// exit ;
14763: GO 15107
// list := [ ] ;
14765: LD_ADDR_VAR 0 13
14769: PUSH
14770: EMPTY
14771: ST_TO_ADDR
// if x - r < 0 then
14772: LD_VAR 0 2
14776: PUSH
14777: LD_VAR 0 4
14781: MINUS
14782: PUSH
14783: LD_INT 0
14785: LESS
14786: IFFALSE 14798
// min_x := 0 else
14788: LD_ADDR_VAR 0 7
14792: PUSH
14793: LD_INT 0
14795: ST_TO_ADDR
14796: GO 14814
// min_x := x - r ;
14798: LD_ADDR_VAR 0 7
14802: PUSH
14803: LD_VAR 0 2
14807: PUSH
14808: LD_VAR 0 4
14812: MINUS
14813: ST_TO_ADDR
// if y - r < 0 then
14814: LD_VAR 0 3
14818: PUSH
14819: LD_VAR 0 4
14823: MINUS
14824: PUSH
14825: LD_INT 0
14827: LESS
14828: IFFALSE 14840
// min_y := 0 else
14830: LD_ADDR_VAR 0 8
14834: PUSH
14835: LD_INT 0
14837: ST_TO_ADDR
14838: GO 14856
// min_y := y - r ;
14840: LD_ADDR_VAR 0 8
14844: PUSH
14845: LD_VAR 0 3
14849: PUSH
14850: LD_VAR 0 4
14854: MINUS
14855: ST_TO_ADDR
// max_x := x + r ;
14856: LD_ADDR_VAR 0 9
14860: PUSH
14861: LD_VAR 0 2
14865: PUSH
14866: LD_VAR 0 4
14870: PLUS
14871: ST_TO_ADDR
// max_y := y + r ;
14872: LD_ADDR_VAR 0 10
14876: PUSH
14877: LD_VAR 0 3
14881: PUSH
14882: LD_VAR 0 4
14886: PLUS
14887: ST_TO_ADDR
// for _x = min_x to max_x do
14888: LD_ADDR_VAR 0 11
14892: PUSH
14893: DOUBLE
14894: LD_VAR 0 7
14898: DEC
14899: ST_TO_ADDR
14900: LD_VAR 0 9
14904: PUSH
14905: FOR_TO
14906: IFFALSE 15025
// for _y = min_y to max_y do
14908: LD_ADDR_VAR 0 12
14912: PUSH
14913: DOUBLE
14914: LD_VAR 0 8
14918: DEC
14919: ST_TO_ADDR
14920: LD_VAR 0 10
14924: PUSH
14925: FOR_TO
14926: IFFALSE 15021
// begin if not ValidHex ( _x , _y ) then
14928: LD_VAR 0 11
14932: PPUSH
14933: LD_VAR 0 12
14937: PPUSH
14938: CALL_OW 488
14942: NOT
14943: IFFALSE 14947
// continue ;
14945: GO 14925
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14947: LD_VAR 0 11
14951: PPUSH
14952: LD_VAR 0 12
14956: PPUSH
14957: CALL_OW 351
14961: IFFALSE 14979
14963: PUSH
14964: LD_VAR 0 11
14968: PPUSH
14969: LD_VAR 0 12
14973: PPUSH
14974: CALL_OW 554
14978: AND
14979: IFFALSE 15019
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14981: LD_ADDR_VAR 0 13
14985: PUSH
14986: LD_VAR 0 13
14990: PPUSH
14991: LD_VAR 0 13
14995: PUSH
14996: LD_INT 1
14998: PLUS
14999: PPUSH
15000: LD_VAR 0 11
15004: PUSH
15005: LD_VAR 0 12
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PPUSH
15014: CALL_OW 2
15018: ST_TO_ADDR
// end ;
15019: GO 14925
15021: POP
15022: POP
15023: GO 14905
15025: POP
15026: POP
// if not list then
15027: LD_VAR 0 13
15031: NOT
15032: IFFALSE 15036
// exit ;
15034: GO 15107
// for i in list do
15036: LD_ADDR_VAR 0 6
15040: PUSH
15041: LD_VAR 0 13
15045: PUSH
15046: FOR_IN
15047: IFFALSE 15105
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
15049: LD_VAR 0 1
15053: PPUSH
15054: LD_STRING M
15056: PUSH
15057: LD_VAR 0 6
15061: PUSH
15062: LD_INT 1
15064: ARRAY
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 2
15073: ARRAY
15074: PUSH
15075: LD_INT 0
15077: PUSH
15078: LD_INT 0
15080: PUSH
15081: LD_INT 0
15083: PUSH
15084: LD_INT 0
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: PPUSH
15099: CALL_OW 447
15103: GO 15046
15105: POP
15106: POP
// end ;
15107: LD_VAR 0 5
15111: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
15112: LD_INT 0
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
15122: PPUSH
15123: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
15124: LD_VAR 0 1
15128: PPUSH
15129: CALL_OW 302
15133: NOT
15134: IFTRUE 15153
15136: PUSH
15137: LD_VAR 0 2
15141: PPUSH
15142: LD_VAR 0 3
15146: PPUSH
15147: CALL_OW 488
15151: NOT
15152: OR
15153: IFTRUE 15162
15155: PUSH
15156: LD_VAR 0 4
15160: NOT
15161: OR
15162: IFFALSE 15166
// exit ;
15164: GO 15705
// if Count ( GetTaskList ( flame ) ) > 10 then
15166: LD_VAR 0 1
15170: PPUSH
15171: CALL_OW 437
15175: PPUSH
15176: CALL 22122 0 1
15180: PUSH
15181: LD_INT 10
15183: GREATER
15184: IFFALSE 15188
// exit ;
15186: GO 15705
// list := [ ] ;
15188: LD_ADDR_VAR 0 13
15192: PUSH
15193: EMPTY
15194: ST_TO_ADDR
// if x - r < 0 then
15195: LD_VAR 0 2
15199: PUSH
15200: LD_VAR 0 4
15204: MINUS
15205: PUSH
15206: LD_INT 0
15208: LESS
15209: IFFALSE 15221
// min_x := 0 else
15211: LD_ADDR_VAR 0 7
15215: PUSH
15216: LD_INT 0
15218: ST_TO_ADDR
15219: GO 15237
// min_x := x - r ;
15221: LD_ADDR_VAR 0 7
15225: PUSH
15226: LD_VAR 0 2
15230: PUSH
15231: LD_VAR 0 4
15235: MINUS
15236: ST_TO_ADDR
// if y - r < 0 then
15237: LD_VAR 0 3
15241: PUSH
15242: LD_VAR 0 4
15246: MINUS
15247: PUSH
15248: LD_INT 0
15250: LESS
15251: IFFALSE 15263
// min_y := 0 else
15253: LD_ADDR_VAR 0 8
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
15261: GO 15279
// min_y := y - r ;
15263: LD_ADDR_VAR 0 8
15267: PUSH
15268: LD_VAR 0 3
15272: PUSH
15273: LD_VAR 0 4
15277: MINUS
15278: ST_TO_ADDR
// max_x := x + r ;
15279: LD_ADDR_VAR 0 9
15283: PUSH
15284: LD_VAR 0 2
15288: PUSH
15289: LD_VAR 0 4
15293: PLUS
15294: ST_TO_ADDR
// max_y := y + r ;
15295: LD_ADDR_VAR 0 10
15299: PUSH
15300: LD_VAR 0 3
15304: PUSH
15305: LD_VAR 0 4
15309: PLUS
15310: ST_TO_ADDR
// for _x = min_x to max_x do
15311: LD_ADDR_VAR 0 11
15315: PUSH
15316: DOUBLE
15317: LD_VAR 0 7
15321: DEC
15322: ST_TO_ADDR
15323: LD_VAR 0 9
15327: PUSH
15328: FOR_TO
15329: IFFALSE 15448
// for _y = min_y to max_y do
15331: LD_ADDR_VAR 0 12
15335: PUSH
15336: DOUBLE
15337: LD_VAR 0 8
15341: DEC
15342: ST_TO_ADDR
15343: LD_VAR 0 10
15347: PUSH
15348: FOR_TO
15349: IFFALSE 15444
// begin if not ValidHex ( _x , _y ) then
15351: LD_VAR 0 11
15355: PPUSH
15356: LD_VAR 0 12
15360: PPUSH
15361: CALL_OW 488
15365: NOT
15366: IFFALSE 15370
// continue ;
15368: GO 15348
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
15370: LD_VAR 0 11
15374: PPUSH
15375: LD_VAR 0 12
15379: PPUSH
15380: CALL_OW 351
15384: IFFALSE 15402
15386: PUSH
15387: LD_VAR 0 11
15391: PPUSH
15392: LD_VAR 0 12
15396: PPUSH
15397: CALL_OW 554
15401: AND
15402: IFFALSE 15442
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
15404: LD_ADDR_VAR 0 13
15408: PUSH
15409: LD_VAR 0 13
15413: PPUSH
15414: LD_VAR 0 13
15418: PUSH
15419: LD_INT 1
15421: PLUS
15422: PPUSH
15423: LD_VAR 0 11
15427: PUSH
15428: LD_VAR 0 12
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 2
15441: ST_TO_ADDR
// end ;
15442: GO 15348
15444: POP
15445: POP
15446: GO 15328
15448: POP
15449: POP
// if not list then
15450: LD_VAR 0 13
15454: NOT
15455: IFFALSE 15459
// exit ;
15457: GO 15705
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
15459: LD_ADDR_VAR 0 13
15463: PUSH
15464: LD_VAR 0 1
15468: PPUSH
15469: LD_VAR 0 13
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: LD_INT 1
15479: PPUSH
15480: CALL 25528 0 4
15484: ST_TO_ADDR
// ComStop ( flame ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: CALL_OW 141
// for i in list do
15494: LD_ADDR_VAR 0 6
15498: PUSH
15499: LD_VAR 0 13
15503: PUSH
15504: FOR_IN
15505: IFFALSE 15536
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
15507: LD_VAR 0 1
15511: PPUSH
15512: LD_VAR 0 6
15516: PUSH
15517: LD_INT 1
15519: ARRAY
15520: PPUSH
15521: LD_VAR 0 6
15525: PUSH
15526: LD_INT 2
15528: ARRAY
15529: PPUSH
15530: CALL_OW 176
15534: GO 15504
15536: POP
15537: POP
// repeat wait ( 0 0$1 ) ;
15538: LD_INT 35
15540: PPUSH
15541: CALL_OW 67
// task := GetTaskList ( flame ) ;
15545: LD_ADDR_VAR 0 14
15549: PUSH
15550: LD_VAR 0 1
15554: PPUSH
15555: CALL_OW 437
15559: ST_TO_ADDR
// if not task then
15560: LD_VAR 0 14
15564: NOT
15565: IFFALSE 15569
// exit ;
15567: GO 15705
// if task [ 1 ] [ 1 ] <> | then
15569: LD_VAR 0 14
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PUSH
15578: LD_INT 1
15580: ARRAY
15581: PUSH
15582: LD_STRING |
15584: NONEQUAL
15585: IFFALSE 15589
// exit ;
15587: GO 15705
// _x := task [ 1 ] [ 2 ] ;
15589: LD_ADDR_VAR 0 11
15593: PUSH
15594: LD_VAR 0 14
15598: PUSH
15599: LD_INT 1
15601: ARRAY
15602: PUSH
15603: LD_INT 2
15605: ARRAY
15606: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
15607: LD_ADDR_VAR 0 12
15611: PUSH
15612: LD_VAR 0 14
15616: PUSH
15617: LD_INT 1
15619: ARRAY
15620: PUSH
15621: LD_INT 3
15623: ARRAY
15624: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
15625: LD_VAR 0 11
15629: PPUSH
15630: LD_VAR 0 12
15634: PPUSH
15635: CALL_OW 351
15639: NOT
15640: IFTRUE 15659
15642: PUSH
15643: LD_VAR 0 11
15647: PPUSH
15648: LD_VAR 0 12
15652: PPUSH
15653: CALL_OW 554
15657: NOT
15658: OR
15659: IFFALSE 15693
// begin task := Delete ( task , 1 ) ;
15661: LD_ADDR_VAR 0 14
15665: PUSH
15666: LD_VAR 0 14
15670: PPUSH
15671: LD_INT 1
15673: PPUSH
15674: CALL_OW 3
15678: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
15679: LD_VAR 0 1
15683: PPUSH
15684: LD_VAR 0 14
15688: PPUSH
15689: CALL_OW 446
// end ; until not HasTask ( flame ) ;
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 314
15702: NOT
15703: IFFALSE 15538
// end ;
15705: LD_VAR 0 5
15709: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
15710: LD_EXP 49
15714: NOT
15715: IFFALSE 15765
15717: GO 15719
15719: DISABLE
// begin initHack := true ;
15720: LD_ADDR_EXP 49
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// hackTanks := [ ] ;
15728: LD_ADDR_EXP 50
15732: PUSH
15733: EMPTY
15734: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15735: LD_ADDR_EXP 51
15739: PUSH
15740: EMPTY
15741: ST_TO_ADDR
// hackLimit := 3 ;
15742: LD_ADDR_EXP 52
15746: PUSH
15747: LD_INT 3
15749: ST_TO_ADDR
// hackDist := 12 ;
15750: LD_ADDR_EXP 53
15754: PUSH
15755: LD_INT 12
15757: ST_TO_ADDR
// hackCounter := [ ] ;
15758: LD_ADDR_EXP 54
15762: PUSH
15763: EMPTY
15764: ST_TO_ADDR
// end ;
15765: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15766: LD_EXP 49
15770: IFFALSE 15788
15772: PUSH
15773: LD_INT 34
15775: PUSH
15776: LD_INT 99
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PPUSH
15783: CALL_OW 69
15787: AND
15788: IFFALSE 16041
15790: GO 15792
15792: DISABLE
15793: LD_INT 0
15795: PPUSH
15796: PPUSH
// begin enable ;
15797: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15798: LD_ADDR_VAR 0 1
15802: PUSH
15803: LD_INT 34
15805: PUSH
15806: LD_INT 99
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PPUSH
15813: CALL_OW 69
15817: PUSH
15818: FOR_IN
15819: IFFALSE 16039
// begin if not i in hackTanks then
15821: LD_VAR 0 1
15825: PUSH
15826: LD_EXP 50
15830: IN
15831: NOT
15832: IFFALSE 15915
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15834: LD_ADDR_EXP 50
15838: PUSH
15839: LD_EXP 50
15843: PPUSH
15844: LD_EXP 50
15848: PUSH
15849: LD_INT 1
15851: PLUS
15852: PPUSH
15853: LD_VAR 0 1
15857: PPUSH
15858: CALL_OW 1
15862: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15863: LD_ADDR_EXP 51
15867: PUSH
15868: LD_EXP 51
15872: PPUSH
15873: LD_EXP 51
15877: PUSH
15878: LD_INT 1
15880: PLUS
15881: PPUSH
15882: EMPTY
15883: PPUSH
15884: CALL_OW 1
15888: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15889: LD_ADDR_EXP 54
15893: PUSH
15894: LD_EXP 54
15898: PPUSH
15899: LD_EXP 54
15903: PUSH
15904: LD_INT 1
15906: PLUS
15907: PPUSH
15908: EMPTY
15909: PPUSH
15910: CALL_OW 1
15914: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15915: LD_VAR 0 1
15919: PPUSH
15920: CALL_OW 302
15924: NOT
15925: IFFALSE 15938
// begin HackUnlinkAll ( i ) ;
15927: LD_VAR 0 1
15931: PPUSH
15932: CALL 16044 0 1
// continue ;
15936: GO 15818
// end ; HackCheckCapturedStatus ( i ) ;
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL 16489 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15947: LD_ADDR_VAR 0 2
15951: PUSH
15952: LD_INT 81
15954: PUSH
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 255
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 33
15971: PUSH
15972: LD_INT 3
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 91
15981: PUSH
15982: LD_VAR 0 1
15986: PUSH
15987: LD_EXP 53
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 50
15999: PUSH
16000: EMPTY
16001: LIST
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 69
16013: ST_TO_ADDR
// if not tmp then
16014: LD_VAR 0 2
16018: NOT
16019: IFFALSE 16023
// continue ;
16021: GO 15818
// HackLink ( i , tmp ) ;
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_VAR 0 2
16032: PPUSH
16033: CALL 16180 0 2
// end ;
16037: GO 15818
16039: POP
16040: POP
// end ;
16041: PPOPN 2
16043: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
16044: LD_INT 0
16046: PPUSH
16047: PPUSH
16048: PPUSH
// if not hack in hackTanks then
16049: LD_VAR 0 1
16053: PUSH
16054: LD_EXP 50
16058: IN
16059: NOT
16060: IFFALSE 16064
// exit ;
16062: GO 16175
// index := GetElementIndex ( hackTanks , hack ) ;
16064: LD_ADDR_VAR 0 4
16068: PUSH
16069: LD_EXP 50
16073: PPUSH
16074: LD_VAR 0 1
16078: PPUSH
16079: CALL 24823 0 2
16083: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
16084: LD_EXP 51
16088: PUSH
16089: LD_VAR 0 4
16093: ARRAY
16094: IFFALSE 16175
// begin for i in hackTanksCaptured [ index ] do
16096: LD_ADDR_VAR 0 3
16100: PUSH
16101: LD_EXP 51
16105: PUSH
16106: LD_VAR 0 4
16110: ARRAY
16111: PUSH
16112: FOR_IN
16113: IFFALSE 16139
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
16115: LD_VAR 0 3
16119: PUSH
16120: LD_INT 1
16122: ARRAY
16123: PPUSH
16124: LD_VAR 0 3
16128: PUSH
16129: LD_INT 2
16131: ARRAY
16132: PPUSH
16133: CALL_OW 235
16137: GO 16112
16139: POP
16140: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
16141: LD_ADDR_EXP 51
16145: PUSH
16146: LD_EXP 51
16150: PPUSH
16151: LD_VAR 0 4
16155: PPUSH
16156: EMPTY
16157: PPUSH
16158: CALL_OW 1
16162: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
16163: LD_VAR 0 1
16167: PPUSH
16168: LD_INT 0
16170: PPUSH
16171: CALL_OW 505
// end ; end ;
16175: LD_VAR 0 2
16179: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
16180: LD_INT 0
16182: PPUSH
16183: PPUSH
16184: PPUSH
// if not hack in hackTanks or not vehicles then
16185: LD_VAR 0 1
16189: PUSH
16190: LD_EXP 50
16194: IN
16195: NOT
16196: IFTRUE 16205
16198: PUSH
16199: LD_VAR 0 2
16203: NOT
16204: OR
16205: IFFALSE 16209
// exit ;
16207: GO 16484
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
16209: LD_ADDR_VAR 0 2
16213: PUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: LD_VAR 0 2
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL 25475 0 4
16234: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
16235: LD_ADDR_VAR 0 5
16239: PUSH
16240: LD_EXP 50
16244: PPUSH
16245: LD_VAR 0 1
16249: PPUSH
16250: CALL 24823 0 2
16254: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
16255: LD_EXP 51
16259: PUSH
16260: LD_VAR 0 5
16264: ARRAY
16265: PUSH
16266: LD_EXP 52
16270: LESS
16271: IFFALSE 16460
// begin for i := 1 to vehicles do
16273: LD_ADDR_VAR 0 4
16277: PUSH
16278: DOUBLE
16279: LD_INT 1
16281: DEC
16282: ST_TO_ADDR
16283: LD_VAR 0 2
16287: PUSH
16288: FOR_TO
16289: IFFALSE 16458
// begin if hackTanksCaptured [ index ] = hackLimit then
16291: LD_EXP 51
16295: PUSH
16296: LD_VAR 0 5
16300: ARRAY
16301: PUSH
16302: LD_EXP 52
16306: EQUAL
16307: IFFALSE 16311
// break ;
16309: GO 16458
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
16311: LD_ADDR_EXP 54
16315: PUSH
16316: LD_EXP 54
16320: PPUSH
16321: LD_VAR 0 5
16325: PPUSH
16326: LD_EXP 54
16330: PUSH
16331: LD_VAR 0 5
16335: ARRAY
16336: PUSH
16337: LD_INT 1
16339: PLUS
16340: PPUSH
16341: CALL_OW 1
16345: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
16346: LD_ADDR_EXP 51
16350: PUSH
16351: LD_EXP 51
16355: PPUSH
16356: LD_VAR 0 5
16360: PUSH
16361: LD_EXP 51
16365: PUSH
16366: LD_VAR 0 5
16370: ARRAY
16371: PUSH
16372: LD_INT 1
16374: PLUS
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PPUSH
16380: LD_VAR 0 2
16384: PUSH
16385: LD_VAR 0 4
16389: ARRAY
16390: PUSH
16391: LD_VAR 0 2
16395: PUSH
16396: LD_VAR 0 4
16400: ARRAY
16401: PPUSH
16402: CALL_OW 255
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PPUSH
16411: CALL 25040 0 3
16415: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
16416: LD_VAR 0 2
16420: PUSH
16421: LD_VAR 0 4
16425: ARRAY
16426: PPUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 255
16436: PPUSH
16437: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
16441: LD_VAR 0 2
16445: PUSH
16446: LD_VAR 0 4
16450: ARRAY
16451: PPUSH
16452: CALL_OW 141
// end ;
16456: GO 16288
16458: POP
16459: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16460: LD_VAR 0 1
16464: PPUSH
16465: LD_EXP 51
16469: PUSH
16470: LD_VAR 0 5
16474: ARRAY
16475: PUSH
16476: LD_INT 0
16478: PLUS
16479: PPUSH
16480: CALL_OW 505
// end ;
16484: LD_VAR 0 3
16488: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
16489: LD_INT 0
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
// if not hack in hackTanks then
16495: LD_VAR 0 1
16499: PUSH
16500: LD_EXP 50
16504: IN
16505: NOT
16506: IFFALSE 16510
// exit ;
16508: GO 16754
// index := GetElementIndex ( hackTanks , hack ) ;
16510: LD_ADDR_VAR 0 4
16514: PUSH
16515: LD_EXP 50
16519: PPUSH
16520: LD_VAR 0 1
16524: PPUSH
16525: CALL 24823 0 2
16529: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
16530: LD_ADDR_VAR 0 3
16534: PUSH
16535: DOUBLE
16536: LD_EXP 51
16540: PUSH
16541: LD_VAR 0 4
16545: ARRAY
16546: INC
16547: ST_TO_ADDR
16548: LD_INT 1
16550: PUSH
16551: FOR_DOWNTO
16552: IFFALSE 16728
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
16554: LD_ADDR_VAR 0 5
16558: PUSH
16559: LD_EXP 51
16563: PUSH
16564: LD_VAR 0 4
16568: ARRAY
16569: PUSH
16570: LD_VAR 0 3
16574: ARRAY
16575: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
16576: LD_VAR 0 5
16580: PUSH
16581: LD_INT 1
16583: ARRAY
16584: PPUSH
16585: CALL_OW 302
16589: NOT
16590: IFTRUE 16618
16592: PUSH
16593: LD_VAR 0 5
16597: PUSH
16598: LD_INT 1
16600: ARRAY
16601: PPUSH
16602: CALL_OW 255
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 255
16616: NONEQUAL
16617: OR
16618: IFFALSE 16726
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
16620: LD_VAR 0 5
16624: PUSH
16625: LD_INT 1
16627: ARRAY
16628: PPUSH
16629: CALL_OW 305
16633: IFFALSE 16661
16635: PUSH
16636: LD_VAR 0 5
16640: PUSH
16641: LD_INT 1
16643: ARRAY
16644: PPUSH
16645: CALL_OW 255
16649: PUSH
16650: LD_VAR 0 1
16654: PPUSH
16655: CALL_OW 255
16659: EQUAL
16660: AND
16661: IFFALSE 16685
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
16663: LD_VAR 0 5
16667: PUSH
16668: LD_INT 1
16670: ARRAY
16671: PPUSH
16672: LD_VAR 0 5
16676: PUSH
16677: LD_INT 2
16679: ARRAY
16680: PPUSH
16681: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
16685: LD_ADDR_EXP 51
16689: PUSH
16690: LD_EXP 51
16694: PPUSH
16695: LD_VAR 0 4
16699: PPUSH
16700: LD_EXP 51
16704: PUSH
16705: LD_VAR 0 4
16709: ARRAY
16710: PPUSH
16711: LD_VAR 0 3
16715: PPUSH
16716: CALL_OW 3
16720: PPUSH
16721: CALL_OW 1
16725: ST_TO_ADDR
// end ; end ;
16726: GO 16551
16728: POP
16729: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16730: LD_VAR 0 1
16734: PPUSH
16735: LD_EXP 51
16739: PUSH
16740: LD_VAR 0 4
16744: ARRAY
16745: PUSH
16746: LD_INT 0
16748: PLUS
16749: PPUSH
16750: CALL_OW 505
// end ;
16754: LD_VAR 0 2
16758: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16759: LD_INT 0
16761: PPUSH
16762: PPUSH
16763: PPUSH
16764: PPUSH
// if not hack in hackTanks then
16765: LD_VAR 0 1
16769: PUSH
16770: LD_EXP 50
16774: IN
16775: NOT
16776: IFFALSE 16780
// exit ;
16778: GO 16865
// index := GetElementIndex ( hackTanks , hack ) ;
16780: LD_ADDR_VAR 0 5
16784: PUSH
16785: LD_EXP 50
16789: PPUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL 24823 0 2
16799: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16800: LD_ADDR_VAR 0 4
16804: PUSH
16805: DOUBLE
16806: LD_INT 1
16808: DEC
16809: ST_TO_ADDR
16810: LD_EXP 51
16814: PUSH
16815: LD_VAR 0 5
16819: ARRAY
16820: PUSH
16821: FOR_TO
16822: IFFALSE 16863
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16824: LD_EXP 51
16828: PUSH
16829: LD_VAR 0 5
16833: ARRAY
16834: PUSH
16835: LD_VAR 0 4
16839: ARRAY
16840: PUSH
16841: LD_INT 1
16843: ARRAY
16844: PUSH
16845: LD_VAR 0 2
16849: EQUAL
16850: IFFALSE 16861
// KillUnit ( vehicle ) ;
16852: LD_VAR 0 2
16856: PPUSH
16857: CALL_OW 66
16861: GO 16821
16863: POP
16864: POP
// end ;
16865: LD_VAR 0 3
16869: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
16870: LD_EXP 55
16874: NOT
16875: IFFALSE 17008
16877: GO 16879
16879: DISABLE
16880: LD_INT 0
16882: PPUSH
// begin initMiner := true ;
16883: LD_ADDR_EXP 55
16887: PUSH
16888: LD_INT 1
16890: ST_TO_ADDR
// minersList := [ ] ;
16891: LD_ADDR_EXP 56
16895: PUSH
16896: EMPTY
16897: ST_TO_ADDR
// minerMinesList := [ ] ;
16898: LD_ADDR_EXP 57
16902: PUSH
16903: EMPTY
16904: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
16905: LD_ADDR_EXP 58
16909: PUSH
16910: LD_INT 10
16912: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16913: LD_ADDR_VAR 0 1
16917: PUSH
16918: LD_INT 34
16920: PUSH
16921: LD_INT 81
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PPUSH
16928: CALL_OW 69
16932: PUSH
16933: FOR_IN
16934: IFFALSE 17006
// begin if not i in minersList then
16936: LD_VAR 0 1
16940: PUSH
16941: LD_EXP 56
16945: IN
16946: NOT
16947: IFFALSE 17004
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16949: LD_ADDR_EXP 56
16953: PUSH
16954: LD_EXP 56
16958: PPUSH
16959: LD_EXP 56
16963: PUSH
16964: LD_INT 1
16966: PLUS
16967: PPUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 1
16977: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16978: LD_ADDR_EXP 57
16982: PUSH
16983: LD_EXP 57
16987: PPUSH
16988: LD_EXP 57
16992: PUSH
16993: LD_INT 1
16995: PLUS
16996: PPUSH
16997: EMPTY
16998: PPUSH
16999: CALL_OW 1
17003: ST_TO_ADDR
// end end ;
17004: GO 16933
17006: POP
17007: POP
// end ;
17008: PPOPN 1
17010: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
17011: LD_EXP 55
17015: IFFALSE 17046
17017: PUSH
17018: LD_EXP 57
17022: PPUSH
17023: CALL 22122 0 1
17027: IFTRUE 17045
17029: PUSH
17030: LD_INT 34
17032: PUSH
17033: LD_INT 81
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 69
17044: OR
17045: AND
17046: IFFALSE 17566
17048: GO 17050
17050: DISABLE
17051: LD_INT 0
17053: PPUSH
17054: PPUSH
17055: PPUSH
17056: PPUSH
// begin enable ;
17057: ENABLE
// for i := minerMinesList downto 1 do
17058: LD_ADDR_VAR 0 1
17062: PUSH
17063: DOUBLE
17064: LD_EXP 57
17068: INC
17069: ST_TO_ADDR
17070: LD_INT 1
17072: PUSH
17073: FOR_DOWNTO
17074: IFFALSE 17564
// begin side := GetSide ( minersList [ i ] ) ;
17076: LD_ADDR_VAR 0 3
17080: PUSH
17081: LD_EXP 56
17085: PUSH
17086: LD_VAR 0 1
17090: ARRAY
17091: PPUSH
17092: CALL_OW 255
17096: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
17097: LD_EXP 56
17101: PUSH
17102: LD_VAR 0 1
17106: ARRAY
17107: PPUSH
17108: CALL_OW 300
17112: IFFALSE 17133
17114: PUSH
17115: LD_VAR 0 3
17119: PUSH
17120: LD_OWVAR 2
17124: PUSH
17125: LD_INT 9
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: IN
17132: AND
17133: IFFALSE 17166
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
17135: LD_EXP 56
17139: PUSH
17140: LD_VAR 0 1
17144: ARRAY
17145: PPUSH
17146: LD_EXP 57
17150: PUSH
17151: LD_VAR 0 1
17155: ARRAY
17156: PPUSH
17157: CALL 22122 0 1
17161: PPUSH
17162: CALL_OW 505
// if not minerMinesList [ i ] then
17166: LD_EXP 57
17170: PUSH
17171: LD_VAR 0 1
17175: ARRAY
17176: NOT
17177: IFFALSE 17181
// continue ;
17179: GO 17073
// for j := minerMinesList [ i ] downto 1 do
17181: LD_ADDR_VAR 0 2
17185: PUSH
17186: DOUBLE
17187: LD_EXP 57
17191: PUSH
17192: LD_VAR 0 1
17196: ARRAY
17197: INC
17198: ST_TO_ADDR
17199: LD_INT 1
17201: PUSH
17202: FOR_DOWNTO
17203: IFFALSE 17560
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
17205: LD_EXP 56
17209: PUSH
17210: LD_VAR 0 1
17214: ARRAY
17215: PPUSH
17216: CALL_OW 301
17220: IFTRUE 17240
17222: PUSH
17223: LD_EXP 56
17227: PUSH
17228: LD_VAR 0 1
17232: ARRAY
17233: PPUSH
17234: CALL_OW 305
17238: NOT
17239: OR
17240: IFFALSE 17331
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17242: LD_EXP 57
17246: PUSH
17247: LD_VAR 0 1
17251: ARRAY
17252: PUSH
17253: LD_VAR 0 2
17257: ARRAY
17258: PUSH
17259: LD_INT 1
17261: ARRAY
17262: PPUSH
17263: LD_EXP 57
17267: PUSH
17268: LD_VAR 0 1
17272: ARRAY
17273: PUSH
17274: LD_VAR 0 2
17278: ARRAY
17279: PUSH
17280: LD_INT 2
17282: ARRAY
17283: PPUSH
17284: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17288: LD_ADDR_EXP 57
17292: PUSH
17293: LD_EXP 57
17297: PPUSH
17298: LD_VAR 0 1
17302: PPUSH
17303: LD_EXP 57
17307: PUSH
17308: LD_VAR 0 1
17312: ARRAY
17313: PPUSH
17314: LD_VAR 0 2
17318: PPUSH
17319: CALL_OW 3
17323: PPUSH
17324: CALL_OW 1
17328: ST_TO_ADDR
// continue ;
17329: GO 17202
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
17331: LD_ADDR_VAR 0 4
17335: PUSH
17336: LD_EXP 57
17340: PUSH
17341: LD_VAR 0 1
17345: ARRAY
17346: PUSH
17347: LD_VAR 0 2
17351: ARRAY
17352: PUSH
17353: LD_INT 1
17355: ARRAY
17356: PPUSH
17357: LD_EXP 57
17361: PUSH
17362: LD_VAR 0 1
17366: ARRAY
17367: PUSH
17368: LD_VAR 0 2
17372: ARRAY
17373: PUSH
17374: LD_INT 2
17376: ARRAY
17377: PPUSH
17378: CALL_OW 428
17382: ST_TO_ADDR
// if not tmp then
17383: LD_VAR 0 4
17387: NOT
17388: IFFALSE 17392
// continue ;
17390: GO 17202
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
17392: LD_VAR 0 4
17396: PUSH
17397: LD_INT 81
17399: PUSH
17400: LD_VAR 0 3
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PPUSH
17409: CALL_OW 69
17413: IN
17414: IFFALSE 17464
17416: PUSH
17417: LD_EXP 57
17421: PUSH
17422: LD_VAR 0 1
17426: ARRAY
17427: PUSH
17428: LD_VAR 0 2
17432: ARRAY
17433: PUSH
17434: LD_INT 1
17436: ARRAY
17437: PPUSH
17438: LD_EXP 57
17442: PUSH
17443: LD_VAR 0 1
17447: ARRAY
17448: PUSH
17449: LD_VAR 0 2
17453: ARRAY
17454: PUSH
17455: LD_INT 2
17457: ARRAY
17458: PPUSH
17459: CALL_OW 458
17463: AND
17464: IFFALSE 17558
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
17466: LD_EXP 57
17470: PUSH
17471: LD_VAR 0 1
17475: ARRAY
17476: PUSH
17477: LD_VAR 0 2
17481: ARRAY
17482: PUSH
17483: LD_INT 1
17485: ARRAY
17486: PPUSH
17487: LD_EXP 57
17491: PUSH
17492: LD_VAR 0 1
17496: ARRAY
17497: PUSH
17498: LD_VAR 0 2
17502: ARRAY
17503: PUSH
17504: LD_INT 2
17506: ARRAY
17507: PPUSH
17508: LD_VAR 0 3
17512: PPUSH
17513: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
17517: LD_ADDR_EXP 57
17521: PUSH
17522: LD_EXP 57
17526: PPUSH
17527: LD_VAR 0 1
17531: PPUSH
17532: LD_EXP 57
17536: PUSH
17537: LD_VAR 0 1
17541: ARRAY
17542: PPUSH
17543: LD_VAR 0 2
17547: PPUSH
17548: CALL_OW 3
17552: PPUSH
17553: CALL_OW 1
17557: ST_TO_ADDR
// end ; end ;
17558: GO 17202
17560: POP
17561: POP
// end ;
17562: GO 17073
17564: POP
17565: POP
// end ;
17566: PPOPN 4
17568: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
17569: LD_INT 0
17571: PPUSH
17572: PPUSH
17573: PPUSH
17574: PPUSH
// result := false ;
17575: LD_ADDR_VAR 0 4
17579: PUSH
17580: LD_INT 0
17582: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
17583: LD_VAR 0 1
17587: PPUSH
17588: CALL_OW 264
17592: PUSH
17593: LD_INT 81
17595: EQUAL
17596: NOT
17597: IFFALSE 17601
// exit ;
17599: GO 17971
// side := GetSide ( unit ) ;
17601: LD_ADDR_VAR 0 6
17605: PUSH
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 255
17615: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
17616: LD_ADDR_VAR 0 5
17620: PUSH
17621: LD_EXP 56
17625: PPUSH
17626: LD_VAR 0 1
17630: PPUSH
17631: CALL 24823 0 2
17635: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
17636: LD_EXP 57
17640: PUSH
17641: LD_VAR 0 5
17645: ARRAY
17646: PUSH
17647: LD_EXP 58
17651: GREATEREQUAL
17652: IFFALSE 17656
// exit ;
17654: GO 17971
// ComMoveXY ( unit , x , y ) ;
17656: LD_VAR 0 1
17660: PPUSH
17661: LD_VAR 0 2
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17675: LD_INT 35
17677: PPUSH
17678: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
17682: LD_VAR 0 1
17686: PPUSH
17687: LD_VAR 0 2
17691: PPUSH
17692: LD_VAR 0 3
17696: PPUSH
17697: CALL 56879 0 3
17701: NOT
17702: IFFALSE 17715
17704: PUSH
17705: LD_VAR 0 1
17709: PPUSH
17710: CALL_OW 314
17714: AND
17715: IFFALSE 17719
// exit ;
17717: GO 17971
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
17719: LD_VAR 0 2
17723: PPUSH
17724: LD_VAR 0 3
17728: PPUSH
17729: CALL_OW 428
17733: PUSH
17734: LD_VAR 0 1
17738: EQUAL
17739: IFFALSE 17753
17741: PUSH
17742: LD_VAR 0 1
17746: PPUSH
17747: CALL_OW 314
17751: NOT
17752: AND
17753: IFFALSE 17675
// if MineAtPos ( x , y ) then
17755: LD_VAR 0 2
17759: PPUSH
17760: LD_VAR 0 3
17764: PPUSH
17765: CALL_OW 458
17769: IFFALSE 17773
// exit ;
17771: GO 17971
// if your_side = side then
17773: LD_OWVAR 2
17777: PUSH
17778: LD_VAR 0 6
17782: EQUAL
17783: IFFALSE 17802
// PlaySoundXY ( x , y , PlantMine ) ;
17785: LD_VAR 0 2
17789: PPUSH
17790: LD_VAR 0 3
17794: PPUSH
17795: LD_STRING PlantMine
17797: PPUSH
17798: CALL_OW 366
// repeat wait ( 1 ) ;
17802: LD_INT 1
17804: PPUSH
17805: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
17809: LD_VAR 0 2
17813: PPUSH
17814: LD_VAR 0 3
17818: PPUSH
17819: LD_VAR 0 6
17823: PPUSH
17824: LD_INT 0
17826: PPUSH
17827: CALL_OW 454
17831: IFFALSE 17802
// if MineAtPos ( x , y ) then
17833: LD_VAR 0 2
17837: PPUSH
17838: LD_VAR 0 3
17842: PPUSH
17843: CALL_OW 458
17847: IFFALSE 17963
// begin for i in minerMinesList [ index ] do
17849: LD_ADDR_VAR 0 7
17853: PUSH
17854: LD_EXP 57
17858: PUSH
17859: LD_VAR 0 5
17863: ARRAY
17864: PUSH
17865: FOR_IN
17866: IFFALSE 17908
// if i [ 1 ] = x and i [ 2 ] = y then
17868: LD_VAR 0 7
17872: PUSH
17873: LD_INT 1
17875: ARRAY
17876: PUSH
17877: LD_VAR 0 2
17881: EQUAL
17882: IFFALSE 17900
17884: PUSH
17885: LD_VAR 0 7
17889: PUSH
17890: LD_INT 2
17892: ARRAY
17893: PUSH
17894: LD_VAR 0 3
17898: EQUAL
17899: AND
17900: IFFALSE 17906
// exit ;
17902: POP
17903: POP
17904: GO 17971
17906: GO 17865
17908: POP
17909: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17910: LD_ADDR_EXP 57
17914: PUSH
17915: LD_EXP 57
17919: PPUSH
17920: LD_VAR 0 5
17924: PUSH
17925: LD_EXP 57
17929: PUSH
17930: LD_VAR 0 5
17934: ARRAY
17935: PUSH
17936: LD_INT 1
17938: PLUS
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PPUSH
17944: LD_VAR 0 2
17948: PUSH
17949: LD_VAR 0 3
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PPUSH
17958: CALL 25040 0 3
17962: ST_TO_ADDR
// end ; result := true ;
17963: LD_ADDR_VAR 0 4
17967: PUSH
17968: LD_INT 1
17970: ST_TO_ADDR
// end ;
17971: LD_VAR 0 4
17975: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17976: LD_INT 0
17978: PPUSH
17979: PPUSH
17980: PPUSH
// if not unit in minersList then
17981: LD_VAR 0 1
17985: PUSH
17986: LD_EXP 56
17990: IN
17991: NOT
17992: IFFALSE 17996
// exit ;
17994: GO 18203
// index := GetElementIndex ( minersList , unit ) ;
17996: LD_ADDR_VAR 0 6
18000: PUSH
18001: LD_EXP 56
18005: PPUSH
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL 24823 0 2
18015: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
18016: LD_ADDR_VAR 0 5
18020: PUSH
18021: DOUBLE
18022: LD_EXP 57
18026: PUSH
18027: LD_VAR 0 6
18031: ARRAY
18032: INC
18033: ST_TO_ADDR
18034: LD_INT 1
18036: PUSH
18037: FOR_DOWNTO
18038: IFFALSE 18201
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
18040: LD_EXP 57
18044: PUSH
18045: LD_VAR 0 6
18049: ARRAY
18050: PUSH
18051: LD_VAR 0 5
18055: ARRAY
18056: PUSH
18057: LD_INT 1
18059: ARRAY
18060: PPUSH
18061: LD_EXP 57
18065: PUSH
18066: LD_VAR 0 6
18070: ARRAY
18071: PUSH
18072: LD_VAR 0 5
18076: ARRAY
18077: PUSH
18078: LD_INT 2
18080: ARRAY
18081: PPUSH
18082: LD_VAR 0 2
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: CALL_OW 298
18096: PUSH
18097: LD_INT 6
18099: LESS
18100: IFFALSE 18199
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
18102: LD_EXP 57
18106: PUSH
18107: LD_VAR 0 6
18111: ARRAY
18112: PUSH
18113: LD_VAR 0 5
18117: ARRAY
18118: PUSH
18119: LD_INT 1
18121: ARRAY
18122: PPUSH
18123: LD_EXP 57
18127: PUSH
18128: LD_VAR 0 6
18132: ARRAY
18133: PUSH
18134: LD_VAR 0 5
18138: ARRAY
18139: PUSH
18140: LD_INT 2
18142: ARRAY
18143: PPUSH
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 255
18153: PPUSH
18154: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
18158: LD_ADDR_EXP 57
18162: PUSH
18163: LD_EXP 57
18167: PPUSH
18168: LD_VAR 0 6
18172: PPUSH
18173: LD_EXP 57
18177: PUSH
18178: LD_VAR 0 6
18182: ARRAY
18183: PPUSH
18184: LD_VAR 0 5
18188: PPUSH
18189: CALL_OW 3
18193: PPUSH
18194: CALL_OW 1
18198: ST_TO_ADDR
// end ; end ;
18199: GO 18037
18201: POP
18202: POP
// end ;
18203: LD_VAR 0 4
18207: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
18208: LD_INT 0
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
18214: PPUSH
18215: PPUSH
18216: PPUSH
18217: PPUSH
18218: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
18219: LD_VAR 0 1
18223: PPUSH
18224: CALL_OW 264
18228: PUSH
18229: LD_INT 81
18231: EQUAL
18232: NOT
18233: IFTRUE 18248
18235: PUSH
18236: LD_VAR 0 1
18240: PUSH
18241: LD_EXP 56
18245: IN
18246: NOT
18247: OR
18248: IFFALSE 18252
// exit ;
18250: GO 18578
// index := GetElementIndex ( minersList , unit ) ;
18252: LD_ADDR_VAR 0 6
18256: PUSH
18257: LD_EXP 56
18261: PPUSH
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL 24823 0 2
18271: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
18272: LD_ADDR_VAR 0 8
18276: PUSH
18277: LD_EXP 58
18281: PUSH
18282: LD_EXP 57
18286: PUSH
18287: LD_VAR 0 6
18291: ARRAY
18292: MINUS
18293: ST_TO_ADDR
// if not minesFreeAmount then
18294: LD_VAR 0 8
18298: NOT
18299: IFFALSE 18303
// exit ;
18301: GO 18578
// tmp := [ ] ;
18303: LD_ADDR_VAR 0 7
18307: PUSH
18308: EMPTY
18309: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
18310: LD_ADDR_VAR 0 5
18314: PUSH
18315: DOUBLE
18316: LD_INT 1
18318: DEC
18319: ST_TO_ADDR
18320: LD_VAR 0 8
18324: PUSH
18325: FOR_TO
18326: IFFALSE 18525
// begin _d := rand ( 0 , 5 ) ;
18328: LD_ADDR_VAR 0 11
18332: PUSH
18333: LD_INT 0
18335: PPUSH
18336: LD_INT 5
18338: PPUSH
18339: CALL_OW 12
18343: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
18344: LD_ADDR_VAR 0 12
18348: PUSH
18349: LD_INT 2
18351: PPUSH
18352: LD_INT 6
18354: PPUSH
18355: CALL_OW 12
18359: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
18360: LD_ADDR_VAR 0 9
18364: PUSH
18365: LD_VAR 0 2
18369: PPUSH
18370: LD_VAR 0 11
18374: PPUSH
18375: LD_VAR 0 12
18379: PPUSH
18380: CALL_OW 272
18384: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
18385: LD_ADDR_VAR 0 10
18389: PUSH
18390: LD_VAR 0 3
18394: PPUSH
18395: LD_VAR 0 11
18399: PPUSH
18400: LD_VAR 0 12
18404: PPUSH
18405: CALL_OW 273
18409: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
18410: LD_VAR 0 9
18414: PPUSH
18415: LD_VAR 0 10
18419: PPUSH
18420: CALL_OW 488
18424: IFFALSE 18448
18426: PUSH
18427: LD_VAR 0 9
18431: PUSH
18432: LD_VAR 0 10
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_VAR 0 7
18445: IN
18446: NOT
18447: AND
18448: IFFALSE 18467
18450: PUSH
18451: LD_VAR 0 9
18455: PPUSH
18456: LD_VAR 0 10
18460: PPUSH
18461: CALL_OW 458
18465: NOT
18466: AND
18467: IFFALSE 18509
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
18469: LD_ADDR_VAR 0 7
18473: PUSH
18474: LD_VAR 0 7
18478: PPUSH
18479: LD_VAR 0 7
18483: PUSH
18484: LD_INT 1
18486: PLUS
18487: PPUSH
18488: LD_VAR 0 9
18492: PUSH
18493: LD_VAR 0 10
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PPUSH
18502: CALL_OW 1
18506: ST_TO_ADDR
18507: GO 18523
// i := i - 1 ;
18509: LD_ADDR_VAR 0 5
18513: PUSH
18514: LD_VAR 0 5
18518: PUSH
18519: LD_INT 1
18521: MINUS
18522: ST_TO_ADDR
// end ;
18523: GO 18325
18525: POP
18526: POP
// for i in tmp do
18527: LD_ADDR_VAR 0 5
18531: PUSH
18532: LD_VAR 0 7
18536: PUSH
18537: FOR_IN
18538: IFFALSE 18576
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_VAR 0 5
18549: PUSH
18550: LD_INT 1
18552: ARRAY
18553: PPUSH
18554: LD_VAR 0 5
18558: PUSH
18559: LD_INT 2
18561: ARRAY
18562: PPUSH
18563: CALL 17569 0 3
18567: NOT
18568: IFFALSE 18574
// exit ;
18570: POP
18571: POP
18572: GO 18578
18574: GO 18537
18576: POP
18577: POP
// end ;
18578: LD_VAR 0 4
18582: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
18583: LD_INT 0
18585: PPUSH
18586: PPUSH
18587: PPUSH
18588: PPUSH
18589: PPUSH
18590: PPUSH
18591: PPUSH
18592: PPUSH
18593: PPUSH
// if GetClass ( unit ) <> class_sniper then
18594: LD_VAR 0 1
18598: PPUSH
18599: CALL_OW 257
18603: PUSH
18604: LD_INT 5
18606: NONEQUAL
18607: IFFALSE 18611
// exit ;
18609: GO 19081
// dist := 8 ;
18611: LD_ADDR_VAR 0 5
18615: PUSH
18616: LD_INT 8
18618: ST_TO_ADDR
// viewRange := 12 ;
18619: LD_ADDR_VAR 0 8
18623: PUSH
18624: LD_INT 12
18626: ST_TO_ADDR
// side := GetSide ( unit ) ;
18627: LD_ADDR_VAR 0 6
18631: PUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: CALL_OW 255
18641: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
18642: LD_INT 61
18644: PPUSH
18645: LD_VAR 0 6
18649: PPUSH
18650: CALL_OW 321
18654: PUSH
18655: LD_INT 2
18657: EQUAL
18658: IFFALSE 18668
// viewRange := 16 ;
18660: LD_ADDR_VAR 0 8
18664: PUSH
18665: LD_INT 16
18667: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
18668: LD_VAR 0 1
18672: PPUSH
18673: LD_VAR 0 2
18677: PPUSH
18678: LD_VAR 0 3
18682: PPUSH
18683: CALL_OW 297
18687: PUSH
18688: LD_VAR 0 5
18692: GREATER
18693: IFFALSE 18772
// begin ComMoveXY ( unit , x , y ) ;
18695: LD_VAR 0 1
18699: PPUSH
18700: LD_VAR 0 2
18704: PPUSH
18705: LD_VAR 0 3
18709: PPUSH
18710: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18714: LD_INT 35
18716: PPUSH
18717: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
18721: LD_VAR 0 1
18725: PPUSH
18726: LD_VAR 0 2
18730: PPUSH
18731: LD_VAR 0 3
18735: PPUSH
18736: CALL 56879 0 3
18740: NOT
18741: IFFALSE 18745
// exit ;
18743: GO 19081
// until GetDistUnitXY ( unit , x , y ) < dist ;
18745: LD_VAR 0 1
18749: PPUSH
18750: LD_VAR 0 2
18754: PPUSH
18755: LD_VAR 0 3
18759: PPUSH
18760: CALL_OW 297
18764: PUSH
18765: LD_VAR 0 5
18769: LESS
18770: IFFALSE 18714
// end ; ComTurnXY ( unit , x , y ) ;
18772: LD_VAR 0 1
18776: PPUSH
18777: LD_VAR 0 2
18781: PPUSH
18782: LD_VAR 0 3
18786: PPUSH
18787: CALL_OW 118
// repeat if Multiplayer then
18791: LD_OWVAR 4
18795: IFFALSE 18806
// wait ( 35 ) else
18797: LD_INT 35
18799: PPUSH
18800: CALL_OW 67
18804: GO 18813
// wait ( 5 ) ;
18806: LD_INT 5
18808: PPUSH
18809: CALL_OW 67
// _d := GetDir ( unit ) ;
18813: LD_ADDR_VAR 0 11
18817: PUSH
18818: LD_VAR 0 1
18822: PPUSH
18823: CALL_OW 254
18827: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
18828: LD_ADDR_VAR 0 7
18832: PUSH
18833: LD_VAR 0 1
18837: PPUSH
18838: CALL_OW 250
18842: PPUSH
18843: LD_VAR 0 1
18847: PPUSH
18848: CALL_OW 251
18852: PPUSH
18853: LD_VAR 0 2
18857: PPUSH
18858: LD_VAR 0 3
18862: PPUSH
18863: CALL 59515 0 4
18867: ST_TO_ADDR
// until dir = _d ;
18868: LD_VAR 0 7
18872: PUSH
18873: LD_VAR 0 11
18877: EQUAL
18878: IFFALSE 18791
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
18880: LD_ADDR_VAR 0 9
18884: PUSH
18885: LD_VAR 0 1
18889: PPUSH
18890: CALL_OW 250
18894: PPUSH
18895: LD_VAR 0 7
18899: PPUSH
18900: LD_VAR 0 5
18904: PPUSH
18905: CALL_OW 272
18909: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
18910: LD_ADDR_VAR 0 10
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 251
18924: PPUSH
18925: LD_VAR 0 7
18929: PPUSH
18930: LD_VAR 0 5
18934: PPUSH
18935: CALL_OW 273
18939: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18940: LD_VAR 0 9
18944: PPUSH
18945: LD_VAR 0 10
18949: PPUSH
18950: CALL_OW 488
18954: NOT
18955: IFFALSE 18959
// exit ;
18957: GO 19081
// ComAnimCustom ( unit , 1 ) ;
18959: LD_VAR 0 1
18963: PPUSH
18964: LD_INT 1
18966: PPUSH
18967: CALL_OW 592
// p := 0 ;
18971: LD_ADDR_VAR 0 12
18975: PUSH
18976: LD_INT 0
18978: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18979: LD_VAR 0 9
18983: PPUSH
18984: LD_VAR 0 10
18988: PPUSH
18989: LD_VAR 0 6
18993: PPUSH
18994: LD_VAR 0 8
18998: PPUSH
18999: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
19003: LD_INT 35
19005: PPUSH
19006: CALL_OW 67
// p := Inc ( p ) ;
19010: LD_ADDR_VAR 0 12
19014: PUSH
19015: LD_VAR 0 12
19019: PPUSH
19020: CALL 59471 0 1
19024: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
19025: LD_VAR 0 12
19029: PUSH
19030: LD_INT 3
19032: EQUAL
19033: IFTRUE 19047
19035: PUSH
19036: LD_VAR 0 1
19040: PPUSH
19041: CALL_OW 302
19045: NOT
19046: OR
19047: IFTRUE 19060
19049: PUSH
19050: LD_VAR 0 1
19054: PPUSH
19055: CALL_OW 301
19059: OR
19060: IFFALSE 19003
// RemoveSeeing ( _x , _y , side ) ;
19062: LD_VAR 0 9
19066: PPUSH
19067: LD_VAR 0 10
19071: PPUSH
19072: LD_VAR 0 6
19076: PPUSH
19077: CALL_OW 331
// end ;
19081: LD_VAR 0 4
19085: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
19086: LD_INT 0
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
19093: PPUSH
19094: PPUSH
19095: PPUSH
19096: PPUSH
19097: PPUSH
19098: PPUSH
// if not unit then
19099: LD_VAR 0 1
19103: NOT
19104: IFFALSE 19108
// exit ;
19106: GO 19379
// side := GetSide ( unit ) ;
19108: LD_ADDR_VAR 0 3
19112: PUSH
19113: LD_VAR 0 1
19117: PPUSH
19118: CALL_OW 255
19122: ST_TO_ADDR
// x := GetX ( unit ) ;
19123: LD_ADDR_VAR 0 5
19127: PUSH
19128: LD_VAR 0 1
19132: PPUSH
19133: CALL_OW 250
19137: ST_TO_ADDR
// y := GetY ( unit ) ;
19138: LD_ADDR_VAR 0 6
19142: PUSH
19143: LD_VAR 0 1
19147: PPUSH
19148: CALL_OW 251
19152: ST_TO_ADDR
// r := 8 ;
19153: LD_ADDR_VAR 0 4
19157: PUSH
19158: LD_INT 8
19160: ST_TO_ADDR
// if x - r < 0 then
19161: LD_VAR 0 5
19165: PUSH
19166: LD_VAR 0 4
19170: MINUS
19171: PUSH
19172: LD_INT 0
19174: LESS
19175: IFFALSE 19187
// min_x := 0 else
19177: LD_ADDR_VAR 0 7
19181: PUSH
19182: LD_INT 0
19184: ST_TO_ADDR
19185: GO 19203
// min_x := x - r ;
19187: LD_ADDR_VAR 0 7
19191: PUSH
19192: LD_VAR 0 5
19196: PUSH
19197: LD_VAR 0 4
19201: MINUS
19202: ST_TO_ADDR
// if y - r < 0 then
19203: LD_VAR 0 6
19207: PUSH
19208: LD_VAR 0 4
19212: MINUS
19213: PUSH
19214: LD_INT 0
19216: LESS
19217: IFFALSE 19229
// min_y := 0 else
19219: LD_ADDR_VAR 0 8
19223: PUSH
19224: LD_INT 0
19226: ST_TO_ADDR
19227: GO 19245
// min_y := y - r ;
19229: LD_ADDR_VAR 0 8
19233: PUSH
19234: LD_VAR 0 6
19238: PUSH
19239: LD_VAR 0 4
19243: MINUS
19244: ST_TO_ADDR
// max_x := x + r ;
19245: LD_ADDR_VAR 0 9
19249: PUSH
19250: LD_VAR 0 5
19254: PUSH
19255: LD_VAR 0 4
19259: PLUS
19260: ST_TO_ADDR
// max_y := y + r ;
19261: LD_ADDR_VAR 0 10
19265: PUSH
19266: LD_VAR 0 6
19270: PUSH
19271: LD_VAR 0 4
19275: PLUS
19276: ST_TO_ADDR
// for _x = min_x to max_x do
19277: LD_ADDR_VAR 0 11
19281: PUSH
19282: DOUBLE
19283: LD_VAR 0 7
19287: DEC
19288: ST_TO_ADDR
19289: LD_VAR 0 9
19293: PUSH
19294: FOR_TO
19295: IFFALSE 19377
// for _y = min_y to max_y do
19297: LD_ADDR_VAR 0 12
19301: PUSH
19302: DOUBLE
19303: LD_VAR 0 8
19307: DEC
19308: ST_TO_ADDR
19309: LD_VAR 0 10
19313: PUSH
19314: FOR_TO
19315: IFFALSE 19373
// begin if not ValidHex ( _x , _y ) then
19317: LD_VAR 0 11
19321: PPUSH
19322: LD_VAR 0 12
19326: PPUSH
19327: CALL_OW 488
19331: NOT
19332: IFFALSE 19336
// continue ;
19334: GO 19314
// if MineAtPos ( _x , _y ) then
19336: LD_VAR 0 11
19340: PPUSH
19341: LD_VAR 0 12
19345: PPUSH
19346: CALL_OW 458
19350: IFFALSE 19371
// ViewMineAtPos ( _x , _y , side ) ;
19352: LD_VAR 0 11
19356: PPUSH
19357: LD_VAR 0 12
19361: PPUSH
19362: LD_VAR 0 3
19366: PPUSH
19367: CALL_OW 457
// end ;
19371: GO 19314
19373: POP
19374: POP
19375: GO 19294
19377: POP
19378: POP
// end ;
19379: LD_VAR 0 2
19383: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
19384: LD_INT 0
19386: PPUSH
19387: PPUSH
19388: PPUSH
19389: PPUSH
19390: PPUSH
19391: PPUSH
19392: PPUSH
// if not units then
19393: LD_VAR 0 1
19397: NOT
19398: IFFALSE 19402
// exit ;
19400: GO 19866
// scaners := [ ] ;
19402: LD_ADDR_VAR 0 6
19406: PUSH
19407: EMPTY
19408: ST_TO_ADDR
// for i in units do
19409: LD_ADDR_VAR 0 3
19413: PUSH
19414: LD_VAR 0 1
19418: PUSH
19419: FOR_IN
19420: IFFALSE 19577
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
19422: LD_VAR 0 3
19426: PPUSH
19427: CALL_OW 264
19431: PUSH
19432: LD_INT 11
19434: NONEQUAL
19435: IFTRUE 19449
19437: PUSH
19438: LD_VAR 0 3
19442: PPUSH
19443: CALL_OW 302
19447: NOT
19448: OR
19449: IFTRUE 19466
19451: PUSH
19452: LD_VAR 0 3
19456: PPUSH
19457: CALL_OW 110
19461: PUSH
19462: LD_INT 502
19464: EQUAL
19465: OR
19466: IFFALSE 19470
// continue ;
19468: GO 19419
// ComStop ( i ) ;
19470: LD_VAR 0 3
19474: PPUSH
19475: CALL_OW 141
// x := GetX ( i ) ;
19479: LD_ADDR_VAR 0 4
19483: PUSH
19484: LD_VAR 0 3
19488: PPUSH
19489: CALL_OW 250
19493: ST_TO_ADDR
// y := GetY ( i ) ;
19494: LD_ADDR_VAR 0 5
19498: PUSH
19499: LD_VAR 0 3
19503: PPUSH
19504: CALL_OW 251
19508: ST_TO_ADDR
// if GetSide ( i ) = your_side then
19509: LD_VAR 0 3
19513: PPUSH
19514: CALL_OW 255
19518: PUSH
19519: LD_OWVAR 2
19523: EQUAL
19524: IFFALSE 19543
// PlaySoundXY ( x , y , mineDetector ) ;
19526: LD_VAR 0 4
19530: PPUSH
19531: LD_VAR 0 5
19535: PPUSH
19536: LD_STRING mineDetector
19538: PPUSH
19539: CALL_OW 366
// scaners := Join ( scaners , i ) ;
19543: LD_ADDR_VAR 0 6
19547: PUSH
19548: LD_VAR 0 6
19552: PPUSH
19553: LD_VAR 0 3
19557: PPUSH
19558: CALL 58098 0 2
19562: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
19563: LD_VAR 0 3
19567: PPUSH
19568: LD_INT 502
19570: PPUSH
19571: CALL_OW 109
// end ;
19575: GO 19419
19577: POP
19578: POP
// if not scaners then
19579: LD_VAR 0 6
19583: NOT
19584: IFFALSE 19588
// exit ;
19586: GO 19866
// wait ( 3 ) ;
19588: LD_INT 3
19590: PPUSH
19591: CALL_OW 67
// timer := 6 ;
19595: LD_ADDR_VAR 0 7
19599: PUSH
19600: LD_INT 6
19602: ST_TO_ADDR
// repeat for i in scaners do
19603: LD_ADDR_VAR 0 3
19607: PUSH
19608: LD_VAR 0 6
19612: PUSH
19613: FOR_IN
19614: IFFALSE 19764
// begin side := GetSide ( i ) ;
19616: LD_ADDR_VAR 0 8
19620: PUSH
19621: LD_VAR 0 3
19625: PPUSH
19626: CALL_OW 255
19630: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
19631: LD_VAR 0 3
19635: PPUSH
19636: CALL_OW 302
19640: NOT
19641: IFTRUE 19654
19643: PUSH
19644: LD_VAR 0 3
19648: PPUSH
19649: CALL_OW 314
19653: OR
19654: IFTRUE 19685
19656: PUSH
19657: LD_VAR 0 3
19661: PPUSH
19662: CALL_OW 263
19666: PUSH
19667: LD_INT 1
19669: EQUAL
19670: IFFALSE 19684
19672: PUSH
19673: LD_VAR 0 3
19677: PPUSH
19678: CALL_OW 311
19682: NOT
19683: AND
19684: OR
19685: IFFALSE 19729
// begin SetUnitDisplayNumber ( i , 0 ) ;
19687: LD_VAR 0 3
19691: PPUSH
19692: LD_INT 0
19694: PPUSH
19695: CALL_OW 505
// SetTag ( i , 0 ) ;
19699: LD_VAR 0 3
19703: PPUSH
19704: LD_INT 0
19706: PPUSH
19707: CALL_OW 109
// scaners := scaners diff i ;
19711: LD_ADDR_VAR 0 6
19715: PUSH
19716: LD_VAR 0 6
19720: PUSH
19721: LD_VAR 0 3
19725: DIFF
19726: ST_TO_ADDR
// continue ;
19727: GO 19613
// end ; if side in [ your_side , 9 ] then
19729: LD_VAR 0 8
19733: PUSH
19734: LD_OWVAR 2
19738: PUSH
19739: LD_INT 9
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: IN
19746: IFFALSE 19762
// SetUnitDisplayNumber ( i , timer ) ;
19748: LD_VAR 0 3
19752: PPUSH
19753: LD_VAR 0 7
19757: PPUSH
19758: CALL_OW 505
// end ;
19762: GO 19613
19764: POP
19765: POP
// if not scaners then
19766: LD_VAR 0 6
19770: NOT
19771: IFFALSE 19775
// exit ;
19773: GO 19866
// timer := Dec ( timer ) ;
19775: LD_ADDR_VAR 0 7
19779: PUSH
19780: LD_VAR 0 7
19784: PPUSH
19785: CALL 59493 0 1
19789: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19790: LD_INT 35
19792: PPUSH
19793: CALL_OW 67
// until timer = 0 ;
19797: LD_VAR 0 7
19801: PUSH
19802: LD_INT 0
19804: EQUAL
19805: IFFALSE 19603
// if not scaners then
19807: LD_VAR 0 6
19811: NOT
19812: IFFALSE 19816
// exit ;
19814: GO 19866
// for i in scaners do
19816: LD_ADDR_VAR 0 3
19820: PUSH
19821: LD_VAR 0 6
19825: PUSH
19826: FOR_IN
19827: IFFALSE 19864
// begin SetUnitDisplayNumber ( i , 0 ) ;
19829: LD_VAR 0 3
19833: PPUSH
19834: LD_INT 0
19836: PPUSH
19837: CALL_OW 505
// SetTag ( i , 0 ) ;
19841: LD_VAR 0 3
19845: PPUSH
19846: LD_INT 0
19848: PPUSH
19849: CALL_OW 109
// RevealDetectorMine ( i ) ;
19853: LD_VAR 0 3
19857: PPUSH
19858: CALL 19086 0 1
// end ;
19862: GO 19826
19864: POP
19865: POP
// end ;
19866: LD_VAR 0 2
19870: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
19871: LD_INT 0
19873: PPUSH
// if p1 = mine_detector_mode then
19874: LD_VAR 0 2
19878: PUSH
19879: LD_INT 103
19881: EQUAL
19882: IFFALSE 19893
// DetectMine ( units ) ;
19884: LD_VAR 0 1
19888: PPUSH
19889: CALL 19384 0 1
// end ; end_of_file
19893: LD_VAR 0 7
19897: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19898: LD_INT 0
19900: PPUSH
19901: PPUSH
// if exist_mode then
19902: LD_VAR 0 2
19906: IFFALSE 19952
// begin unit := CreateCharacter ( prefix & ident ) ;
19908: LD_ADDR_VAR 0 5
19912: PUSH
19913: LD_VAR 0 3
19917: PUSH
19918: LD_VAR 0 1
19922: STR
19923: PPUSH
19924: CALL_OW 34
19928: ST_TO_ADDR
// if unit then
19929: LD_VAR 0 5
19933: IFFALSE 19950
// DeleteCharacters ( prefix & ident ) ;
19935: LD_VAR 0 3
19939: PUSH
19940: LD_VAR 0 1
19944: STR
19945: PPUSH
19946: CALL_OW 40
// end else
19950: GO 19967
// unit := NewCharacter ( ident ) ;
19952: LD_ADDR_VAR 0 5
19956: PUSH
19957: LD_VAR 0 1
19961: PPUSH
19962: CALL_OW 25
19966: ST_TO_ADDR
// result := unit ;
19967: LD_ADDR_VAR 0 4
19971: PUSH
19972: LD_VAR 0 5
19976: ST_TO_ADDR
// end ;
19977: LD_VAR 0 4
19981: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
19982: LD_INT 0
19984: PPUSH
19985: PPUSH
// if exist_mode then
19986: LD_VAR 0 2
19990: IFFALSE 20015
// unit := CreateCharacter ( prefix & ident ) else
19992: LD_ADDR_VAR 0 5
19996: PUSH
19997: LD_VAR 0 3
20001: PUSH
20002: LD_VAR 0 1
20006: STR
20007: PPUSH
20008: CALL_OW 34
20012: ST_TO_ADDR
20013: GO 20030
// unit := NewCharacter ( ident ) ;
20015: LD_ADDR_VAR 0 5
20019: PUSH
20020: LD_VAR 0 1
20024: PPUSH
20025: CALL_OW 25
20029: ST_TO_ADDR
// result := unit ;
20030: LD_ADDR_VAR 0 4
20034: PUSH
20035: LD_VAR 0 5
20039: ST_TO_ADDR
// end ;
20040: LD_VAR 0 4
20044: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20045: LD_INT 0
20047: PPUSH
20048: PPUSH
// if not side or not nation then
20049: LD_VAR 0 1
20053: NOT
20054: IFTRUE 20063
20056: PUSH
20057: LD_VAR 0 2
20061: NOT
20062: OR
20063: IFFALSE 20067
// exit ;
20065: GO 20861
// case nation of nation_american :
20067: LD_VAR 0 2
20071: PUSH
20072: LD_INT 1
20074: DOUBLE
20075: EQUAL
20076: IFTRUE 20080
20078: GO 20302
20080: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
20081: LD_ADDR_VAR 0 4
20085: PUSH
20086: LD_INT 35
20088: PUSH
20089: LD_INT 45
20091: PUSH
20092: LD_INT 46
20094: PUSH
20095: LD_INT 47
20097: PUSH
20098: LD_INT 82
20100: PUSH
20101: LD_INT 83
20103: PUSH
20104: LD_INT 84
20106: PUSH
20107: LD_INT 85
20109: PUSH
20110: LD_INT 86
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: LD_INT 6
20121: PUSH
20122: LD_INT 15
20124: PUSH
20125: LD_INT 16
20127: PUSH
20128: LD_INT 7
20130: PUSH
20131: LD_INT 12
20133: PUSH
20134: LD_INT 13
20136: PUSH
20137: LD_INT 10
20139: PUSH
20140: LD_INT 14
20142: PUSH
20143: LD_INT 20
20145: PUSH
20146: LD_INT 21
20148: PUSH
20149: LD_INT 22
20151: PUSH
20152: LD_INT 25
20154: PUSH
20155: LD_INT 32
20157: PUSH
20158: LD_INT 27
20160: PUSH
20161: LD_INT 36
20163: PUSH
20164: LD_INT 69
20166: PUSH
20167: LD_INT 39
20169: PUSH
20170: LD_INT 34
20172: PUSH
20173: LD_INT 40
20175: PUSH
20176: LD_INT 48
20178: PUSH
20179: LD_INT 49
20181: PUSH
20182: LD_INT 50
20184: PUSH
20185: LD_INT 51
20187: PUSH
20188: LD_INT 52
20190: PUSH
20191: LD_INT 53
20193: PUSH
20194: LD_INT 54
20196: PUSH
20197: LD_INT 55
20199: PUSH
20200: LD_INT 56
20202: PUSH
20203: LD_INT 57
20205: PUSH
20206: LD_INT 58
20208: PUSH
20209: LD_INT 59
20211: PUSH
20212: LD_INT 60
20214: PUSH
20215: LD_INT 61
20217: PUSH
20218: LD_INT 62
20220: PUSH
20221: LD_INT 80
20223: PUSH
20224: LD_INT 82
20226: PUSH
20227: LD_INT 83
20229: PUSH
20230: LD_INT 84
20232: PUSH
20233: LD_INT 85
20235: PUSH
20236: LD_INT 86
20238: PUSH
20239: LD_INT 90
20241: PUSH
20242: LD_INT 93
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: ST_TO_ADDR
20300: GO 20783
20302: LD_INT 2
20304: DOUBLE
20305: EQUAL
20306: IFTRUE 20310
20308: GO 20544
20310: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
20311: LD_ADDR_VAR 0 4
20315: PUSH
20316: LD_INT 35
20318: PUSH
20319: LD_INT 45
20321: PUSH
20322: LD_INT 46
20324: PUSH
20325: LD_INT 47
20327: PUSH
20328: LD_INT 82
20330: PUSH
20331: LD_INT 83
20333: PUSH
20334: LD_INT 84
20336: PUSH
20337: LD_INT 85
20339: PUSH
20340: LD_INT 87
20342: PUSH
20343: LD_INT 70
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: LD_INT 11
20351: PUSH
20352: LD_INT 3
20354: PUSH
20355: LD_INT 4
20357: PUSH
20358: LD_INT 5
20360: PUSH
20361: LD_INT 6
20363: PUSH
20364: LD_INT 15
20366: PUSH
20367: LD_INT 18
20369: PUSH
20370: LD_INT 7
20372: PUSH
20373: LD_INT 17
20375: PUSH
20376: LD_INT 8
20378: PUSH
20379: LD_INT 20
20381: PUSH
20382: LD_INT 21
20384: PUSH
20385: LD_INT 22
20387: PUSH
20388: LD_INT 72
20390: PUSH
20391: LD_INT 26
20393: PUSH
20394: LD_INT 69
20396: PUSH
20397: LD_INT 39
20399: PUSH
20400: LD_INT 40
20402: PUSH
20403: LD_INT 41
20405: PUSH
20406: LD_INT 42
20408: PUSH
20409: LD_INT 43
20411: PUSH
20412: LD_INT 48
20414: PUSH
20415: LD_INT 49
20417: PUSH
20418: LD_INT 50
20420: PUSH
20421: LD_INT 51
20423: PUSH
20424: LD_INT 52
20426: PUSH
20427: LD_INT 53
20429: PUSH
20430: LD_INT 54
20432: PUSH
20433: LD_INT 55
20435: PUSH
20436: LD_INT 56
20438: PUSH
20439: LD_INT 60
20441: PUSH
20442: LD_INT 61
20444: PUSH
20445: LD_INT 62
20447: PUSH
20448: LD_INT 66
20450: PUSH
20451: LD_INT 67
20453: PUSH
20454: LD_INT 68
20456: PUSH
20457: LD_INT 81
20459: PUSH
20460: LD_INT 82
20462: PUSH
20463: LD_INT 83
20465: PUSH
20466: LD_INT 84
20468: PUSH
20469: LD_INT 85
20471: PUSH
20472: LD_INT 87
20474: PUSH
20475: LD_INT 88
20477: PUSH
20478: LD_INT 92
20480: PUSH
20481: LD_INT 94
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: ST_TO_ADDR
20542: GO 20783
20544: LD_INT 3
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20782
20552: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
20553: LD_ADDR_VAR 0 4
20557: PUSH
20558: LD_INT 46
20560: PUSH
20561: LD_INT 47
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: LD_INT 2
20569: PUSH
20570: LD_INT 82
20572: PUSH
20573: LD_INT 83
20575: PUSH
20576: LD_INT 84
20578: PUSH
20579: LD_INT 85
20581: PUSH
20582: LD_INT 86
20584: PUSH
20585: LD_INT 11
20587: PUSH
20588: LD_INT 9
20590: PUSH
20591: LD_INT 20
20593: PUSH
20594: LD_INT 19
20596: PUSH
20597: LD_INT 21
20599: PUSH
20600: LD_INT 24
20602: PUSH
20603: LD_INT 22
20605: PUSH
20606: LD_INT 25
20608: PUSH
20609: LD_INT 28
20611: PUSH
20612: LD_INT 29
20614: PUSH
20615: LD_INT 30
20617: PUSH
20618: LD_INT 31
20620: PUSH
20621: LD_INT 37
20623: PUSH
20624: LD_INT 38
20626: PUSH
20627: LD_INT 32
20629: PUSH
20630: LD_INT 27
20632: PUSH
20633: LD_INT 33
20635: PUSH
20636: LD_INT 69
20638: PUSH
20639: LD_INT 39
20641: PUSH
20642: LD_INT 34
20644: PUSH
20645: LD_INT 40
20647: PUSH
20648: LD_INT 71
20650: PUSH
20651: LD_INT 23
20653: PUSH
20654: LD_INT 44
20656: PUSH
20657: LD_INT 48
20659: PUSH
20660: LD_INT 49
20662: PUSH
20663: LD_INT 50
20665: PUSH
20666: LD_INT 51
20668: PUSH
20669: LD_INT 52
20671: PUSH
20672: LD_INT 53
20674: PUSH
20675: LD_INT 54
20677: PUSH
20678: LD_INT 55
20680: PUSH
20681: LD_INT 56
20683: PUSH
20684: LD_INT 57
20686: PUSH
20687: LD_INT 58
20689: PUSH
20690: LD_INT 59
20692: PUSH
20693: LD_INT 63
20695: PUSH
20696: LD_INT 64
20698: PUSH
20699: LD_INT 65
20701: PUSH
20702: LD_INT 82
20704: PUSH
20705: LD_INT 83
20707: PUSH
20708: LD_INT 84
20710: PUSH
20711: LD_INT 85
20713: PUSH
20714: LD_INT 86
20716: PUSH
20717: LD_INT 89
20719: PUSH
20720: LD_INT 91
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: ST_TO_ADDR
20780: GO 20783
20782: POP
// if state > - 1 and state < 3 then
20783: LD_VAR 0 3
20787: PUSH
20788: LD_INT 1
20790: NEG
20791: GREATER
20792: IFFALSE 20804
20794: PUSH
20795: LD_VAR 0 3
20799: PUSH
20800: LD_INT 3
20802: LESS
20803: AND
20804: IFFALSE 20861
// for i in result do
20806: LD_ADDR_VAR 0 5
20810: PUSH
20811: LD_VAR 0 4
20815: PUSH
20816: FOR_IN
20817: IFFALSE 20859
// if GetTech ( i , side ) <> state then
20819: LD_VAR 0 5
20823: PPUSH
20824: LD_VAR 0 1
20828: PPUSH
20829: CALL_OW 321
20833: PUSH
20834: LD_VAR 0 3
20838: NONEQUAL
20839: IFFALSE 20857
// result := result diff i ;
20841: LD_ADDR_VAR 0 4
20845: PUSH
20846: LD_VAR 0 4
20850: PUSH
20851: LD_VAR 0 5
20855: DIFF
20856: ST_TO_ADDR
20857: GO 20816
20859: POP
20860: POP
// end ;
20861: LD_VAR 0 4
20865: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20866: LD_INT 0
20868: PPUSH
20869: PPUSH
20870: PPUSH
// result := true ;
20871: LD_ADDR_VAR 0 3
20875: PUSH
20876: LD_INT 1
20878: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20879: LD_ADDR_VAR 0 5
20883: PUSH
20884: LD_VAR 0 2
20888: PPUSH
20889: CALL_OW 480
20893: ST_TO_ADDR
// if not tmp then
20894: LD_VAR 0 5
20898: NOT
20899: IFFALSE 20903
// exit ;
20901: GO 20952
// for i in tmp do
20903: LD_ADDR_VAR 0 4
20907: PUSH
20908: LD_VAR 0 5
20912: PUSH
20913: FOR_IN
20914: IFFALSE 20950
// if GetTech ( i , side ) <> state_researched then
20916: LD_VAR 0 4
20920: PPUSH
20921: LD_VAR 0 1
20925: PPUSH
20926: CALL_OW 321
20930: PUSH
20931: LD_INT 2
20933: NONEQUAL
20934: IFFALSE 20948
// begin result := false ;
20936: LD_ADDR_VAR 0 3
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// exit ;
20944: POP
20945: POP
20946: GO 20952
// end ;
20948: GO 20913
20950: POP
20951: POP
// end ;
20952: LD_VAR 0 3
20956: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20957: LD_INT 0
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
20963: PPUSH
20964: PPUSH
20965: PPUSH
20966: PPUSH
20967: PPUSH
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20972: LD_VAR 0 1
20976: NOT
20977: IFTRUE 20994
20979: PUSH
20980: LD_VAR 0 1
20984: PPUSH
20985: CALL_OW 257
20989: PUSH
20990: LD_INT 9
20992: NONEQUAL
20993: OR
20994: IFFALSE 20998
// exit ;
20996: GO 21577
// side := GetSide ( unit ) ;
20998: LD_ADDR_VAR 0 9
21002: PUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 255
21012: ST_TO_ADDR
// tech_space := tech_spacanom ;
21013: LD_ADDR_VAR 0 12
21017: PUSH
21018: LD_INT 29
21020: ST_TO_ADDR
// tech_time := tech_taurad ;
21021: LD_ADDR_VAR 0 13
21025: PUSH
21026: LD_INT 28
21028: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21029: LD_ADDR_VAR 0 11
21033: PUSH
21034: LD_VAR 0 1
21038: PPUSH
21039: CALL_OW 310
21043: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21044: LD_VAR 0 11
21048: PPUSH
21049: CALL_OW 247
21053: PUSH
21054: LD_INT 2
21056: EQUAL
21057: IFFALSE 21061
// exit ;
21059: GO 21577
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21061: LD_ADDR_VAR 0 8
21065: PUSH
21066: LD_INT 81
21068: PUSH
21069: LD_VAR 0 9
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 3
21080: PUSH
21081: LD_INT 21
21083: PUSH
21084: LD_INT 3
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PPUSH
21099: CALL_OW 69
21103: ST_TO_ADDR
// if not tmp then
21104: LD_VAR 0 8
21108: NOT
21109: IFFALSE 21113
// exit ;
21111: GO 21577
// if in_unit then
21113: LD_VAR 0 11
21117: IFFALSE 21141
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21119: LD_ADDR_VAR 0 10
21123: PUSH
21124: LD_VAR 0 8
21128: PPUSH
21129: LD_VAR 0 11
21133: PPUSH
21134: CALL_OW 74
21138: ST_TO_ADDR
21139: GO 21161
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21141: LD_ADDR_VAR 0 10
21145: PUSH
21146: LD_VAR 0 8
21150: PPUSH
21151: LD_VAR 0 1
21155: PPUSH
21156: CALL_OW 74
21160: ST_TO_ADDR
// if not enemy then
21161: LD_VAR 0 10
21165: NOT
21166: IFFALSE 21170
// exit ;
21168: GO 21577
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21170: LD_VAR 0 11
21174: IFFALSE 21196
21176: PUSH
21177: LD_VAR 0 11
21181: PPUSH
21182: LD_VAR 0 10
21186: PPUSH
21187: CALL_OW 296
21191: PUSH
21192: LD_INT 13
21194: GREATER
21195: AND
21196: IFTRUE 21218
21198: PUSH
21199: LD_VAR 0 1
21203: PPUSH
21204: LD_VAR 0 10
21208: PPUSH
21209: CALL_OW 296
21213: PUSH
21214: LD_INT 12
21216: GREATER
21217: OR
21218: IFFALSE 21222
// exit ;
21220: GO 21577
// missile := [ 1 ] ;
21222: LD_ADDR_VAR 0 14
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21233: LD_VAR 0 9
21237: PPUSH
21238: LD_VAR 0 12
21242: PPUSH
21243: CALL_OW 325
21247: IFFALSE 21276
// missile := Replace ( missile , missile + 1 , 2 ) ;
21249: LD_ADDR_VAR 0 14
21253: PUSH
21254: LD_VAR 0 14
21258: PPUSH
21259: LD_VAR 0 14
21263: PUSH
21264: LD_INT 1
21266: PLUS
21267: PPUSH
21268: LD_INT 2
21270: PPUSH
21271: CALL_OW 1
21275: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21276: LD_VAR 0 9
21280: PPUSH
21281: LD_VAR 0 13
21285: PPUSH
21286: CALL_OW 325
21290: IFFALSE 21314
21292: PUSH
21293: LD_VAR 0 10
21297: PPUSH
21298: CALL_OW 255
21302: PPUSH
21303: LD_VAR 0 13
21307: PPUSH
21308: CALL_OW 325
21312: NOT
21313: AND
21314: IFFALSE 21343
// missile := Replace ( missile , missile + 1 , 3 ) ;
21316: LD_ADDR_VAR 0 14
21320: PUSH
21321: LD_VAR 0 14
21325: PPUSH
21326: LD_VAR 0 14
21330: PUSH
21331: LD_INT 1
21333: PLUS
21334: PPUSH
21335: LD_INT 3
21337: PPUSH
21338: CALL_OW 1
21342: ST_TO_ADDR
// if missile < 2 then
21343: LD_VAR 0 14
21347: PUSH
21348: LD_INT 2
21350: LESS
21351: IFFALSE 21355
// exit ;
21353: GO 21577
// x := GetX ( enemy ) ;
21355: LD_ADDR_VAR 0 4
21359: PUSH
21360: LD_VAR 0 10
21364: PPUSH
21365: CALL_OW 250
21369: ST_TO_ADDR
// y := GetY ( enemy ) ;
21370: LD_ADDR_VAR 0 5
21374: PUSH
21375: LD_VAR 0 10
21379: PPUSH
21380: CALL_OW 251
21384: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21385: LD_ADDR_VAR 0 6
21389: PUSH
21390: LD_VAR 0 4
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PPUSH
21399: LD_INT 1
21401: PPUSH
21402: CALL_OW 12
21406: PLUS
21407: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21408: LD_ADDR_VAR 0 7
21412: PUSH
21413: LD_VAR 0 5
21417: PUSH
21418: LD_INT 1
21420: NEG
21421: PPUSH
21422: LD_INT 1
21424: PPUSH
21425: CALL_OW 12
21429: PLUS
21430: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21431: LD_VAR 0 6
21435: PPUSH
21436: LD_VAR 0 7
21440: PPUSH
21441: CALL_OW 488
21445: NOT
21446: IFFALSE 21468
// begin _x := x ;
21448: LD_ADDR_VAR 0 6
21452: PUSH
21453: LD_VAR 0 4
21457: ST_TO_ADDR
// _y := y ;
21458: LD_ADDR_VAR 0 7
21462: PUSH
21463: LD_VAR 0 5
21467: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21468: LD_ADDR_VAR 0 3
21472: PUSH
21473: LD_INT 1
21475: PPUSH
21476: LD_VAR 0 14
21480: PPUSH
21481: CALL_OW 12
21485: ST_TO_ADDR
// case i of 1 :
21486: LD_VAR 0 3
21490: PUSH
21491: LD_INT 1
21493: DOUBLE
21494: EQUAL
21495: IFTRUE 21499
21497: GO 21516
21499: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21500: LD_VAR 0 1
21504: PPUSH
21505: LD_VAR 0 10
21509: PPUSH
21510: CALL_OW 115
21514: GO 21577
21516: LD_INT 2
21518: DOUBLE
21519: EQUAL
21520: IFTRUE 21524
21522: GO 21546
21524: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21525: LD_VAR 0 1
21529: PPUSH
21530: LD_VAR 0 6
21534: PPUSH
21535: LD_VAR 0 7
21539: PPUSH
21540: CALL_OW 153
21544: GO 21577
21546: LD_INT 3
21548: DOUBLE
21549: EQUAL
21550: IFTRUE 21554
21552: GO 21576
21554: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21555: LD_VAR 0 1
21559: PPUSH
21560: LD_VAR 0 6
21564: PPUSH
21565: LD_VAR 0 7
21569: PPUSH
21570: CALL_OW 154
21574: GO 21577
21576: POP
// end ;
21577: LD_VAR 0 2
21581: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21582: LD_INT 0
21584: PPUSH
21585: PPUSH
21586: PPUSH
21587: PPUSH
21588: PPUSH
21589: PPUSH
// if not unit or not building then
21590: LD_VAR 0 1
21594: NOT
21595: IFTRUE 21604
21597: PUSH
21598: LD_VAR 0 2
21602: NOT
21603: OR
21604: IFFALSE 21608
// exit ;
21606: GO 21766
// x := GetX ( building ) ;
21608: LD_ADDR_VAR 0 5
21612: PUSH
21613: LD_VAR 0 2
21617: PPUSH
21618: CALL_OW 250
21622: ST_TO_ADDR
// y := GetY ( building ) ;
21623: LD_ADDR_VAR 0 6
21627: PUSH
21628: LD_VAR 0 2
21632: PPUSH
21633: CALL_OW 251
21637: ST_TO_ADDR
// for i := 0 to 5 do
21638: LD_ADDR_VAR 0 4
21642: PUSH
21643: DOUBLE
21644: LD_INT 0
21646: DEC
21647: ST_TO_ADDR
21648: LD_INT 5
21650: PUSH
21651: FOR_TO
21652: IFFALSE 21764
// begin _x := ShiftX ( x , i , 3 ) ;
21654: LD_ADDR_VAR 0 7
21658: PUSH
21659: LD_VAR 0 5
21663: PPUSH
21664: LD_VAR 0 4
21668: PPUSH
21669: LD_INT 3
21671: PPUSH
21672: CALL_OW 272
21676: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21677: LD_ADDR_VAR 0 8
21681: PUSH
21682: LD_VAR 0 6
21686: PPUSH
21687: LD_VAR 0 4
21691: PPUSH
21692: LD_INT 3
21694: PPUSH
21695: CALL_OW 273
21699: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21700: LD_VAR 0 7
21704: PPUSH
21705: LD_VAR 0 8
21709: PPUSH
21710: CALL_OW 488
21714: NOT
21715: IFFALSE 21719
// continue ;
21717: GO 21651
// if HexInfo ( _x , _y ) = 0 then
21719: LD_VAR 0 7
21723: PPUSH
21724: LD_VAR 0 8
21728: PPUSH
21729: CALL_OW 428
21733: PUSH
21734: LD_INT 0
21736: EQUAL
21737: IFFALSE 21762
// begin ComMoveXY ( unit , _x , _y ) ;
21739: LD_VAR 0 1
21743: PPUSH
21744: LD_VAR 0 7
21748: PPUSH
21749: LD_VAR 0 8
21753: PPUSH
21754: CALL_OW 111
// exit ;
21758: POP
21759: POP
21760: GO 21766
// end ; end ;
21762: GO 21651
21764: POP
21765: POP
// end ;
21766: LD_VAR 0 3
21770: RET
// export function ScanBase ( side , base_area ) ; begin
21771: LD_INT 0
21773: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21774: LD_ADDR_VAR 0 3
21778: PUSH
21779: LD_VAR 0 2
21783: PPUSH
21784: LD_INT 81
21786: PUSH
21787: LD_VAR 0 1
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PPUSH
21796: CALL_OW 70
21800: ST_TO_ADDR
// end ;
21801: LD_VAR 0 3
21805: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21806: LD_INT 0
21808: PPUSH
21809: PPUSH
21810: PPUSH
21811: PPUSH
// result := false ;
21812: LD_ADDR_VAR 0 2
21816: PUSH
21817: LD_INT 0
21819: ST_TO_ADDR
// side := GetSide ( unit ) ;
21820: LD_ADDR_VAR 0 3
21824: PUSH
21825: LD_VAR 0 1
21829: PPUSH
21830: CALL_OW 255
21834: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21835: LD_ADDR_VAR 0 4
21839: PUSH
21840: LD_VAR 0 1
21844: PPUSH
21845: CALL_OW 248
21849: ST_TO_ADDR
// case nat of 1 :
21850: LD_VAR 0 4
21854: PUSH
21855: LD_INT 1
21857: DOUBLE
21858: EQUAL
21859: IFTRUE 21863
21861: GO 21874
21863: POP
// tech := tech_lassight ; 2 :
21864: LD_ADDR_VAR 0 5
21868: PUSH
21869: LD_INT 12
21871: ST_TO_ADDR
21872: GO 21913
21874: LD_INT 2
21876: DOUBLE
21877: EQUAL
21878: IFTRUE 21882
21880: GO 21893
21882: POP
// tech := tech_mortar ; 3 :
21883: LD_ADDR_VAR 0 5
21887: PUSH
21888: LD_INT 41
21890: ST_TO_ADDR
21891: GO 21913
21893: LD_INT 3
21895: DOUBLE
21896: EQUAL
21897: IFTRUE 21901
21899: GO 21912
21901: POP
// tech := tech_bazooka ; end ;
21902: LD_ADDR_VAR 0 5
21906: PUSH
21907: LD_INT 44
21909: ST_TO_ADDR
21910: GO 21913
21912: POP
// if Researched ( side , tech ) then
21913: LD_VAR 0 3
21917: PPUSH
21918: LD_VAR 0 5
21922: PPUSH
21923: CALL_OW 325
21927: IFFALSE 21954
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21929: LD_ADDR_VAR 0 2
21933: PUSH
21934: LD_INT 5
21936: PUSH
21937: LD_INT 8
21939: PUSH
21940: LD_INT 9
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: LIST
21947: PUSH
21948: LD_VAR 0 4
21952: ARRAY
21953: ST_TO_ADDR
// end ;
21954: LD_VAR 0 2
21958: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21959: LD_INT 0
21961: PPUSH
21962: PPUSH
21963: PPUSH
// if not mines then
21964: LD_VAR 0 2
21968: NOT
21969: IFFALSE 21973
// exit ;
21971: GO 22117
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21973: LD_ADDR_VAR 0 5
21977: PUSH
21978: LD_INT 81
21980: PUSH
21981: LD_VAR 0 1
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 3
21992: PUSH
21993: LD_INT 21
21995: PUSH
21996: LD_INT 3
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PPUSH
22011: CALL_OW 69
22015: ST_TO_ADDR
// for i in mines do
22016: LD_ADDR_VAR 0 4
22020: PUSH
22021: LD_VAR 0 2
22025: PUSH
22026: FOR_IN
22027: IFFALSE 22115
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22029: LD_VAR 0 4
22033: PUSH
22034: LD_INT 1
22036: ARRAY
22037: PPUSH
22038: LD_VAR 0 4
22042: PUSH
22043: LD_INT 2
22045: ARRAY
22046: PPUSH
22047: CALL_OW 458
22051: NOT
22052: IFFALSE 22056
// continue ;
22054: GO 22026
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22056: LD_VAR 0 4
22060: PUSH
22061: LD_INT 1
22063: ARRAY
22064: PPUSH
22065: LD_VAR 0 4
22069: PUSH
22070: LD_INT 2
22072: ARRAY
22073: PPUSH
22074: CALL_OW 428
22078: PUSH
22079: LD_VAR 0 5
22083: IN
22084: IFFALSE 22113
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22086: LD_VAR 0 4
22090: PUSH
22091: LD_INT 1
22093: ARRAY
22094: PPUSH
22095: LD_VAR 0 4
22099: PUSH
22100: LD_INT 2
22102: ARRAY
22103: PPUSH
22104: LD_VAR 0 1
22108: PPUSH
22109: CALL_OW 456
// end ;
22113: GO 22026
22115: POP
22116: POP
// end ;
22117: LD_VAR 0 3
22121: RET
// export function Count ( array ) ; begin
22122: LD_INT 0
22124: PPUSH
// result := array + 0 ;
22125: LD_ADDR_VAR 0 2
22129: PUSH
22130: LD_VAR 0 1
22134: PUSH
22135: LD_INT 0
22137: PLUS
22138: ST_TO_ADDR
// end ;
22139: LD_VAR 0 2
22143: RET
// export function IsEmpty ( building ) ; begin
22144: LD_INT 0
22146: PPUSH
// if not building then
22147: LD_VAR 0 1
22151: NOT
22152: IFFALSE 22156
// exit ;
22154: GO 22199
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22156: LD_ADDR_VAR 0 2
22160: PUSH
22161: LD_VAR 0 1
22165: PUSH
22166: LD_INT 22
22168: PUSH
22169: LD_VAR 0 1
22173: PPUSH
22174: CALL_OW 255
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 58
22185: PUSH
22186: EMPTY
22187: LIST
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PPUSH
22193: CALL_OW 69
22197: IN
22198: ST_TO_ADDR
// end ;
22199: LD_VAR 0 2
22203: RET
// export function IsNotFull ( building ) ; var places ; begin
22204: LD_INT 0
22206: PPUSH
22207: PPUSH
// if not building then
22208: LD_VAR 0 1
22212: NOT
22213: IFFALSE 22217
// exit ;
22215: GO 22245
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22217: LD_ADDR_VAR 0 2
22221: PUSH
22222: LD_VAR 0 1
22226: PPUSH
22227: LD_INT 3
22229: PUSH
22230: LD_INT 62
22232: PUSH
22233: EMPTY
22234: LIST
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PPUSH
22240: CALL_OW 72
22244: ST_TO_ADDR
// end ;
22245: LD_VAR 0 2
22249: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22250: LD_INT 0
22252: PPUSH
22253: PPUSH
22254: PPUSH
22255: PPUSH
// tmp := [ ] ;
22256: LD_ADDR_VAR 0 3
22260: PUSH
22261: EMPTY
22262: ST_TO_ADDR
// list := [ ] ;
22263: LD_ADDR_VAR 0 5
22267: PUSH
22268: EMPTY
22269: ST_TO_ADDR
// for i = 16 to 25 do
22270: LD_ADDR_VAR 0 4
22274: PUSH
22275: DOUBLE
22276: LD_INT 16
22278: DEC
22279: ST_TO_ADDR
22280: LD_INT 25
22282: PUSH
22283: FOR_TO
22284: IFFALSE 22357
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22286: LD_ADDR_VAR 0 3
22290: PUSH
22291: LD_VAR 0 3
22295: PUSH
22296: LD_INT 22
22298: PUSH
22299: LD_VAR 0 1
22303: PPUSH
22304: CALL_OW 255
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 91
22315: PUSH
22316: LD_VAR 0 1
22320: PUSH
22321: LD_INT 6
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 30
22331: PUSH
22332: LD_VAR 0 4
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: PPUSH
22349: CALL_OW 69
22353: ADD
22354: ST_TO_ADDR
22355: GO 22283
22357: POP
22358: POP
// for i = 1 to tmp do
22359: LD_ADDR_VAR 0 4
22363: PUSH
22364: DOUBLE
22365: LD_INT 1
22367: DEC
22368: ST_TO_ADDR
22369: LD_VAR 0 3
22373: PUSH
22374: FOR_TO
22375: IFFALSE 22463
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22377: LD_ADDR_VAR 0 5
22381: PUSH
22382: LD_VAR 0 5
22386: PUSH
22387: LD_VAR 0 3
22391: PUSH
22392: LD_VAR 0 4
22396: ARRAY
22397: PPUSH
22398: CALL_OW 266
22402: PUSH
22403: LD_VAR 0 3
22407: PUSH
22408: LD_VAR 0 4
22412: ARRAY
22413: PPUSH
22414: CALL_OW 250
22418: PUSH
22419: LD_VAR 0 3
22423: PUSH
22424: LD_VAR 0 4
22428: ARRAY
22429: PPUSH
22430: CALL_OW 251
22434: PUSH
22435: LD_VAR 0 3
22439: PUSH
22440: LD_VAR 0 4
22444: ARRAY
22445: PPUSH
22446: CALL_OW 254
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: PUSH
22457: EMPTY
22458: LIST
22459: ADD
22460: ST_TO_ADDR
22461: GO 22374
22463: POP
22464: POP
// result := list ;
22465: LD_ADDR_VAR 0 2
22469: PUSH
22470: LD_VAR 0 5
22474: ST_TO_ADDR
// end ;
22475: LD_VAR 0 2
22479: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22480: LD_INT 0
22482: PPUSH
22483: PPUSH
22484: PPUSH
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
// if not factory then
22489: LD_VAR 0 1
22493: NOT
22494: IFFALSE 22498
// exit ;
22496: GO 23101
// if control = control_apeman then
22498: LD_VAR 0 4
22502: PUSH
22503: LD_INT 5
22505: EQUAL
22506: IFFALSE 22615
// begin tmp := UnitsInside ( factory ) ;
22508: LD_ADDR_VAR 0 8
22512: PUSH
22513: LD_VAR 0 1
22517: PPUSH
22518: CALL_OW 313
22522: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22523: LD_VAR 0 8
22527: PPUSH
22528: LD_INT 25
22530: PUSH
22531: LD_INT 12
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PPUSH
22538: CALL_OW 72
22542: NOT
22543: IFFALSE 22553
// control := control_manual ;
22545: LD_ADDR_VAR 0 4
22549: PUSH
22550: LD_INT 1
22552: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22553: LD_ADDR_VAR 0 8
22557: PUSH
22558: LD_VAR 0 1
22562: PPUSH
22563: CALL 22250 0 1
22567: ST_TO_ADDR
// if tmp then
22568: LD_VAR 0 8
22572: IFFALSE 22615
// begin for i in tmp do
22574: LD_ADDR_VAR 0 7
22578: PUSH
22579: LD_VAR 0 8
22583: PUSH
22584: FOR_IN
22585: IFFALSE 22613
// if i [ 1 ] = b_ext_radio then
22587: LD_VAR 0 7
22591: PUSH
22592: LD_INT 1
22594: ARRAY
22595: PUSH
22596: LD_INT 22
22598: EQUAL
22599: IFFALSE 22611
// begin control := control_remote ;
22601: LD_ADDR_VAR 0 4
22605: PUSH
22606: LD_INT 2
22608: ST_TO_ADDR
// break ;
22609: GO 22613
// end ;
22611: GO 22584
22613: POP
22614: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22615: LD_VAR 0 1
22619: PPUSH
22620: LD_VAR 0 2
22624: PPUSH
22625: LD_VAR 0 3
22629: PPUSH
22630: LD_VAR 0 4
22634: PPUSH
22635: LD_VAR 0 5
22639: PPUSH
22640: CALL_OW 448
22644: IFFALSE 22679
// begin result := [ chassis , engine , control , weapon ] ;
22646: LD_ADDR_VAR 0 6
22650: PUSH
22651: LD_VAR 0 2
22655: PUSH
22656: LD_VAR 0 3
22660: PUSH
22661: LD_VAR 0 4
22665: PUSH
22666: LD_VAR 0 5
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: ST_TO_ADDR
// exit ;
22677: GO 23101
// end ; _chassis := AvailableChassisList ( factory ) ;
22679: LD_ADDR_VAR 0 9
22683: PUSH
22684: LD_VAR 0 1
22688: PPUSH
22689: CALL_OW 475
22693: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22694: LD_ADDR_VAR 0 11
22698: PUSH
22699: LD_VAR 0 1
22703: PPUSH
22704: CALL_OW 476
22708: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22709: LD_ADDR_VAR 0 12
22713: PUSH
22714: LD_VAR 0 1
22718: PPUSH
22719: CALL_OW 477
22723: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22724: LD_ADDR_VAR 0 10
22728: PUSH
22729: LD_VAR 0 1
22733: PPUSH
22734: CALL_OW 478
22738: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22739: LD_VAR 0 9
22743: NOT
22744: IFTRUE 22753
22746: PUSH
22747: LD_VAR 0 11
22751: NOT
22752: OR
22753: IFTRUE 22762
22755: PUSH
22756: LD_VAR 0 12
22760: NOT
22761: OR
22762: IFTRUE 22771
22764: PUSH
22765: LD_VAR 0 10
22769: NOT
22770: OR
22771: IFFALSE 22806
// begin result := [ chassis , engine , control , weapon ] ;
22773: LD_ADDR_VAR 0 6
22777: PUSH
22778: LD_VAR 0 2
22782: PUSH
22783: LD_VAR 0 3
22787: PUSH
22788: LD_VAR 0 4
22792: PUSH
22793: LD_VAR 0 5
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: ST_TO_ADDR
// exit ;
22804: GO 23101
// end ; if not chassis in _chassis then
22806: LD_VAR 0 2
22810: PUSH
22811: LD_VAR 0 9
22815: IN
22816: NOT
22817: IFFALSE 22843
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22819: LD_ADDR_VAR 0 2
22823: PUSH
22824: LD_VAR 0 9
22828: PUSH
22829: LD_INT 1
22831: PPUSH
22832: LD_VAR 0 9
22836: PPUSH
22837: CALL_OW 12
22841: ARRAY
22842: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22843: LD_VAR 0 2
22847: PPUSH
22848: LD_VAR 0 3
22852: PPUSH
22853: CALL 23106 0 2
22857: NOT
22858: IFFALSE 22919
// repeat engine := _engine [ 1 ] ;
22860: LD_ADDR_VAR 0 3
22864: PUSH
22865: LD_VAR 0 11
22869: PUSH
22870: LD_INT 1
22872: ARRAY
22873: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22874: LD_ADDR_VAR 0 11
22878: PUSH
22879: LD_VAR 0 11
22883: PPUSH
22884: LD_INT 1
22886: PPUSH
22887: CALL_OW 3
22891: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22892: LD_VAR 0 2
22896: PPUSH
22897: LD_VAR 0 3
22901: PPUSH
22902: CALL 23106 0 2
22906: IFTRUE 22917
22908: PUSH
22909: LD_VAR 0 11
22913: PUSH
22914: EMPTY
22915: EQUAL
22916: OR
22917: IFFALSE 22860
// if not control in _control then
22919: LD_VAR 0 4
22923: PUSH
22924: LD_VAR 0 12
22928: IN
22929: NOT
22930: IFFALSE 22956
// control := _control [ rand ( 1 , _control ) ] ;
22932: LD_ADDR_VAR 0 4
22936: PUSH
22937: LD_VAR 0 12
22941: PUSH
22942: LD_INT 1
22944: PPUSH
22945: LD_VAR 0 12
22949: PPUSH
22950: CALL_OW 12
22954: ARRAY
22955: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22956: LD_VAR 0 2
22960: PPUSH
22961: LD_VAR 0 5
22965: PPUSH
22966: CALL 23328 0 2
22970: NOT
22971: IFFALSE 23032
// repeat weapon := _weapon [ 1 ] ;
22973: LD_ADDR_VAR 0 5
22977: PUSH
22978: LD_VAR 0 10
22982: PUSH
22983: LD_INT 1
22985: ARRAY
22986: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22987: LD_ADDR_VAR 0 10
22991: PUSH
22992: LD_VAR 0 10
22996: PPUSH
22997: LD_INT 1
22999: PPUSH
23000: CALL_OW 3
23004: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23005: LD_VAR 0 2
23009: PPUSH
23010: LD_VAR 0 5
23014: PPUSH
23015: CALL 23328 0 2
23019: IFTRUE 23030
23021: PUSH
23022: LD_VAR 0 10
23026: PUSH
23027: EMPTY
23028: EQUAL
23029: OR
23030: IFFALSE 22973
// result := [ ] ;
23032: LD_ADDR_VAR 0 6
23036: PUSH
23037: EMPTY
23038: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23039: LD_VAR 0 1
23043: PPUSH
23044: LD_VAR 0 2
23048: PPUSH
23049: LD_VAR 0 3
23053: PPUSH
23054: LD_VAR 0 4
23058: PPUSH
23059: LD_VAR 0 5
23063: PPUSH
23064: CALL_OW 448
23068: IFFALSE 23101
// result := [ chassis , engine , control , weapon ] ;
23070: LD_ADDR_VAR 0 6
23074: PUSH
23075: LD_VAR 0 2
23079: PUSH
23080: LD_VAR 0 3
23084: PUSH
23085: LD_VAR 0 4
23089: PUSH
23090: LD_VAR 0 5
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: ST_TO_ADDR
// end ;
23101: LD_VAR 0 6
23105: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23106: LD_INT 0
23108: PPUSH
// if not chassis or not engine then
23109: LD_VAR 0 1
23113: NOT
23114: IFTRUE 23123
23116: PUSH
23117: LD_VAR 0 2
23121: NOT
23122: OR
23123: IFFALSE 23127
// exit ;
23125: GO 23323
// case engine of engine_solar :
23127: LD_VAR 0 2
23131: PUSH
23132: LD_INT 2
23134: DOUBLE
23135: EQUAL
23136: IFTRUE 23140
23138: GO 23178
23140: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23141: LD_ADDR_VAR 0 3
23145: PUSH
23146: LD_INT 11
23148: PUSH
23149: LD_INT 12
23151: PUSH
23152: LD_INT 13
23154: PUSH
23155: LD_INT 14
23157: PUSH
23158: LD_INT 1
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: LD_INT 3
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: ST_TO_ADDR
23176: GO 23307
23178: LD_INT 1
23180: DOUBLE
23181: EQUAL
23182: IFTRUE 23186
23184: GO 23248
23186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23187: LD_ADDR_VAR 0 3
23191: PUSH
23192: LD_INT 11
23194: PUSH
23195: LD_INT 12
23197: PUSH
23198: LD_INT 13
23200: PUSH
23201: LD_INT 14
23203: PUSH
23204: LD_INT 1
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: LD_INT 3
23212: PUSH
23213: LD_INT 4
23215: PUSH
23216: LD_INT 5
23218: PUSH
23219: LD_INT 21
23221: PUSH
23222: LD_INT 23
23224: PUSH
23225: LD_INT 22
23227: PUSH
23228: LD_INT 24
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: ST_TO_ADDR
23246: GO 23307
23248: LD_INT 3
23250: DOUBLE
23251: EQUAL
23252: IFTRUE 23256
23254: GO 23306
23256: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23257: LD_ADDR_VAR 0 3
23261: PUSH
23262: LD_INT 13
23264: PUSH
23265: LD_INT 14
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: LD_INT 3
23273: PUSH
23274: LD_INT 4
23276: PUSH
23277: LD_INT 5
23279: PUSH
23280: LD_INT 21
23282: PUSH
23283: LD_INT 22
23285: PUSH
23286: LD_INT 23
23288: PUSH
23289: LD_INT 24
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: ST_TO_ADDR
23304: GO 23307
23306: POP
// result := ( chassis in result ) ;
23307: LD_ADDR_VAR 0 3
23311: PUSH
23312: LD_VAR 0 1
23316: PUSH
23317: LD_VAR 0 3
23321: IN
23322: ST_TO_ADDR
// end ;
23323: LD_VAR 0 3
23327: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23328: LD_INT 0
23330: PPUSH
// if not chassis or not weapon then
23331: LD_VAR 0 1
23335: NOT
23336: IFTRUE 23345
23338: PUSH
23339: LD_VAR 0 2
23343: NOT
23344: OR
23345: IFFALSE 23349
// exit ;
23347: GO 24443
// case weapon of us_machine_gun :
23349: LD_VAR 0 2
23353: PUSH
23354: LD_INT 2
23356: DOUBLE
23357: EQUAL
23358: IFTRUE 23362
23360: GO 23392
23362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23363: LD_ADDR_VAR 0 3
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: LD_INT 3
23376: PUSH
23377: LD_INT 4
23379: PUSH
23380: LD_INT 5
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: ST_TO_ADDR
23390: GO 24427
23392: LD_INT 3
23394: DOUBLE
23395: EQUAL
23396: IFTRUE 23400
23398: GO 23430
23400: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23401: LD_ADDR_VAR 0 3
23405: PUSH
23406: LD_INT 1
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: LD_INT 3
23414: PUSH
23415: LD_INT 4
23417: PUSH
23418: LD_INT 5
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: ST_TO_ADDR
23428: GO 24427
23430: LD_INT 11
23432: DOUBLE
23433: EQUAL
23434: IFTRUE 23438
23436: GO 23468
23438: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23439: LD_ADDR_VAR 0 3
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 2
23449: PUSH
23450: LD_INT 3
23452: PUSH
23453: LD_INT 4
23455: PUSH
23456: LD_INT 5
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: ST_TO_ADDR
23466: GO 24427
23468: LD_INT 4
23470: DOUBLE
23471: EQUAL
23472: IFTRUE 23476
23474: GO 23502
23476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23477: LD_ADDR_VAR 0 3
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: LD_INT 3
23487: PUSH
23488: LD_INT 4
23490: PUSH
23491: LD_INT 5
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: ST_TO_ADDR
23500: GO 24427
23502: LD_INT 5
23504: DOUBLE
23505: EQUAL
23506: IFTRUE 23510
23508: GO 23536
23510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23511: LD_ADDR_VAR 0 3
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: LD_INT 3
23521: PUSH
23522: LD_INT 4
23524: PUSH
23525: LD_INT 5
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: ST_TO_ADDR
23534: GO 24427
23536: LD_INT 9
23538: DOUBLE
23539: EQUAL
23540: IFTRUE 23544
23542: GO 23570
23544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23545: LD_ADDR_VAR 0 3
23549: PUSH
23550: LD_INT 2
23552: PUSH
23553: LD_INT 3
23555: PUSH
23556: LD_INT 4
23558: PUSH
23559: LD_INT 5
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: ST_TO_ADDR
23568: GO 24427
23570: LD_INT 7
23572: DOUBLE
23573: EQUAL
23574: IFTRUE 23578
23576: GO 23604
23578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23579: LD_ADDR_VAR 0 3
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: LD_INT 3
23589: PUSH
23590: LD_INT 4
23592: PUSH
23593: LD_INT 5
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: ST_TO_ADDR
23602: GO 24427
23604: LD_INT 12
23606: DOUBLE
23607: EQUAL
23608: IFTRUE 23612
23610: GO 23638
23612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23613: LD_ADDR_VAR 0 3
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: LD_INT 3
23623: PUSH
23624: LD_INT 4
23626: PUSH
23627: LD_INT 5
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: ST_TO_ADDR
23636: GO 24427
23638: LD_INT 13
23640: DOUBLE
23641: EQUAL
23642: IFTRUE 23646
23644: GO 23672
23646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23647: LD_ADDR_VAR 0 3
23651: PUSH
23652: LD_INT 2
23654: PUSH
23655: LD_INT 3
23657: PUSH
23658: LD_INT 4
23660: PUSH
23661: LD_INT 5
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: ST_TO_ADDR
23670: GO 24427
23672: LD_INT 14
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23698
23680: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23681: LD_ADDR_VAR 0 3
23685: PUSH
23686: LD_INT 4
23688: PUSH
23689: LD_INT 5
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: ST_TO_ADDR
23696: GO 24427
23698: LD_INT 6
23700: DOUBLE
23701: EQUAL
23702: IFTRUE 23706
23704: GO 23724
23706: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23707: LD_ADDR_VAR 0 3
23711: PUSH
23712: LD_INT 4
23714: PUSH
23715: LD_INT 5
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: ST_TO_ADDR
23722: GO 24427
23724: LD_INT 10
23726: DOUBLE
23727: EQUAL
23728: IFTRUE 23732
23730: GO 23750
23732: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23733: LD_ADDR_VAR 0 3
23737: PUSH
23738: LD_INT 4
23740: PUSH
23741: LD_INT 5
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: ST_TO_ADDR
23748: GO 24427
23750: LD_INT 22
23752: DOUBLE
23753: EQUAL
23754: IFTRUE 23758
23756: GO 23784
23758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23759: LD_ADDR_VAR 0 3
23763: PUSH
23764: LD_INT 11
23766: PUSH
23767: LD_INT 12
23769: PUSH
23770: LD_INT 13
23772: PUSH
23773: LD_INT 14
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: ST_TO_ADDR
23782: GO 24427
23784: LD_INT 23
23786: DOUBLE
23787: EQUAL
23788: IFTRUE 23792
23790: GO 23818
23792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23793: LD_ADDR_VAR 0 3
23797: PUSH
23798: LD_INT 11
23800: PUSH
23801: LD_INT 12
23803: PUSH
23804: LD_INT 13
23806: PUSH
23807: LD_INT 14
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: ST_TO_ADDR
23816: GO 24427
23818: LD_INT 24
23820: DOUBLE
23821: EQUAL
23822: IFTRUE 23826
23824: GO 23852
23826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23827: LD_ADDR_VAR 0 3
23831: PUSH
23832: LD_INT 11
23834: PUSH
23835: LD_INT 12
23837: PUSH
23838: LD_INT 13
23840: PUSH
23841: LD_INT 14
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: ST_TO_ADDR
23850: GO 24427
23852: LD_INT 30
23854: DOUBLE
23855: EQUAL
23856: IFTRUE 23860
23858: GO 23886
23860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23861: LD_ADDR_VAR 0 3
23865: PUSH
23866: LD_INT 11
23868: PUSH
23869: LD_INT 12
23871: PUSH
23872: LD_INT 13
23874: PUSH
23875: LD_INT 14
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: ST_TO_ADDR
23884: GO 24427
23886: LD_INT 25
23888: DOUBLE
23889: EQUAL
23890: IFTRUE 23894
23892: GO 23912
23894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23895: LD_ADDR_VAR 0 3
23899: PUSH
23900: LD_INT 13
23902: PUSH
23903: LD_INT 14
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: ST_TO_ADDR
23910: GO 24427
23912: LD_INT 27
23914: DOUBLE
23915: EQUAL
23916: IFTRUE 23920
23918: GO 23938
23920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23921: LD_ADDR_VAR 0 3
23925: PUSH
23926: LD_INT 13
23928: PUSH
23929: LD_INT 14
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: ST_TO_ADDR
23936: GO 24427
23938: LD_INT 92
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 23972
23946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23947: LD_ADDR_VAR 0 3
23951: PUSH
23952: LD_INT 11
23954: PUSH
23955: LD_INT 12
23957: PUSH
23958: LD_INT 13
23960: PUSH
23961: LD_INT 14
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: ST_TO_ADDR
23970: GO 24427
23972: LD_INT 28
23974: DOUBLE
23975: EQUAL
23976: IFTRUE 23980
23978: GO 23998
23980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23981: LD_ADDR_VAR 0 3
23985: PUSH
23986: LD_INT 13
23988: PUSH
23989: LD_INT 14
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: ST_TO_ADDR
23996: GO 24427
23998: LD_INT 29
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24024
24006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24007: LD_ADDR_VAR 0 3
24011: PUSH
24012: LD_INT 13
24014: PUSH
24015: LD_INT 14
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: ST_TO_ADDR
24022: GO 24427
24024: LD_INT 31
24026: DOUBLE
24027: EQUAL
24028: IFTRUE 24032
24030: GO 24050
24032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24033: LD_ADDR_VAR 0 3
24037: PUSH
24038: LD_INT 13
24040: PUSH
24041: LD_INT 14
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: ST_TO_ADDR
24048: GO 24427
24050: LD_INT 26
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24076
24058: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: LD_INT 13
24066: PUSH
24067: LD_INT 14
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: ST_TO_ADDR
24074: GO 24427
24076: LD_INT 42
24078: DOUBLE
24079: EQUAL
24080: IFTRUE 24084
24082: GO 24110
24084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24085: LD_ADDR_VAR 0 3
24089: PUSH
24090: LD_INT 21
24092: PUSH
24093: LD_INT 22
24095: PUSH
24096: LD_INT 23
24098: PUSH
24099: LD_INT 24
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: ST_TO_ADDR
24108: GO 24427
24110: LD_INT 43
24112: DOUBLE
24113: EQUAL
24114: IFTRUE 24118
24116: GO 24144
24118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24119: LD_ADDR_VAR 0 3
24123: PUSH
24124: LD_INT 21
24126: PUSH
24127: LD_INT 22
24129: PUSH
24130: LD_INT 23
24132: PUSH
24133: LD_INT 24
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: ST_TO_ADDR
24142: GO 24427
24144: LD_INT 44
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24178
24152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24153: LD_ADDR_VAR 0 3
24157: PUSH
24158: LD_INT 21
24160: PUSH
24161: LD_INT 22
24163: PUSH
24164: LD_INT 23
24166: PUSH
24167: LD_INT 24
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: ST_TO_ADDR
24176: GO 24427
24178: LD_INT 45
24180: DOUBLE
24181: EQUAL
24182: IFTRUE 24186
24184: GO 24212
24186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24187: LD_ADDR_VAR 0 3
24191: PUSH
24192: LD_INT 21
24194: PUSH
24195: LD_INT 22
24197: PUSH
24198: LD_INT 23
24200: PUSH
24201: LD_INT 24
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: ST_TO_ADDR
24210: GO 24427
24212: LD_INT 49
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24246
24220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24221: LD_ADDR_VAR 0 3
24225: PUSH
24226: LD_INT 21
24228: PUSH
24229: LD_INT 22
24231: PUSH
24232: LD_INT 23
24234: PUSH
24235: LD_INT 24
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: ST_TO_ADDR
24244: GO 24427
24246: LD_INT 51
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24280
24254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_INT 21
24262: PUSH
24263: LD_INT 22
24265: PUSH
24266: LD_INT 23
24268: PUSH
24269: LD_INT 24
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: ST_TO_ADDR
24278: GO 24427
24280: LD_INT 52
24282: DOUBLE
24283: EQUAL
24284: IFTRUE 24288
24286: GO 24314
24288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24289: LD_ADDR_VAR 0 3
24293: PUSH
24294: LD_INT 21
24296: PUSH
24297: LD_INT 22
24299: PUSH
24300: LD_INT 23
24302: PUSH
24303: LD_INT 24
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
24312: GO 24427
24314: LD_INT 53
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24340
24322: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24323: LD_ADDR_VAR 0 3
24327: PUSH
24328: LD_INT 23
24330: PUSH
24331: LD_INT 24
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: ST_TO_ADDR
24338: GO 24427
24340: LD_INT 46
24342: DOUBLE
24343: EQUAL
24344: IFTRUE 24348
24346: GO 24366
24348: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24349: LD_ADDR_VAR 0 3
24353: PUSH
24354: LD_INT 23
24356: PUSH
24357: LD_INT 24
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: ST_TO_ADDR
24364: GO 24427
24366: LD_INT 47
24368: DOUBLE
24369: EQUAL
24370: IFTRUE 24374
24372: GO 24392
24374: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
24375: LD_ADDR_VAR 0 3
24379: PUSH
24380: LD_INT 23
24382: PUSH
24383: LD_INT 24
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: ST_TO_ADDR
24390: GO 24427
24392: LD_INT 98
24394: DOUBLE
24395: EQUAL
24396: IFTRUE 24400
24398: GO 24426
24400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24401: LD_ADDR_VAR 0 3
24405: PUSH
24406: LD_INT 21
24408: PUSH
24409: LD_INT 22
24411: PUSH
24412: LD_INT 23
24414: PUSH
24415: LD_INT 24
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: ST_TO_ADDR
24424: GO 24427
24426: POP
// result := ( chassis in result ) ;
24427: LD_ADDR_VAR 0 3
24431: PUSH
24432: LD_VAR 0 1
24436: PUSH
24437: LD_VAR 0 3
24441: IN
24442: ST_TO_ADDR
// end ;
24443: LD_VAR 0 3
24447: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24448: LD_INT 0
24450: PPUSH
24451: PPUSH
24452: PPUSH
24453: PPUSH
24454: PPUSH
24455: PPUSH
24456: PPUSH
// result := array ;
24457: LD_ADDR_VAR 0 5
24461: PUSH
24462: LD_VAR 0 1
24466: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24467: LD_VAR 0 1
24471: NOT
24472: IFTRUE 24481
24474: PUSH
24475: LD_VAR 0 2
24479: NOT
24480: OR
24481: IFTRUE 24490
24483: PUSH
24484: LD_VAR 0 3
24488: NOT
24489: OR
24490: IFTRUE 24504
24492: PUSH
24493: LD_VAR 0 2
24497: PUSH
24498: LD_VAR 0 1
24502: GREATER
24503: OR
24504: IFTRUE 24518
24506: PUSH
24507: LD_VAR 0 3
24511: PUSH
24512: LD_VAR 0 1
24516: GREATER
24517: OR
24518: IFFALSE 24522
// exit ;
24520: GO 24818
// if direction then
24522: LD_VAR 0 4
24526: IFFALSE 24590
// begin d := 1 ;
24528: LD_ADDR_VAR 0 9
24532: PUSH
24533: LD_INT 1
24535: ST_TO_ADDR
// if i_from > i_to then
24536: LD_VAR 0 2
24540: PUSH
24541: LD_VAR 0 3
24545: GREATER
24546: IFFALSE 24572
// length := ( array - i_from ) + i_to else
24548: LD_ADDR_VAR 0 11
24552: PUSH
24553: LD_VAR 0 1
24557: PUSH
24558: LD_VAR 0 2
24562: MINUS
24563: PUSH
24564: LD_VAR 0 3
24568: PLUS
24569: ST_TO_ADDR
24570: GO 24588
// length := i_to - i_from ;
24572: LD_ADDR_VAR 0 11
24576: PUSH
24577: LD_VAR 0 3
24581: PUSH
24582: LD_VAR 0 2
24586: MINUS
24587: ST_TO_ADDR
// end else
24588: GO 24651
// begin d := - 1 ;
24590: LD_ADDR_VAR 0 9
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: ST_TO_ADDR
// if i_from > i_to then
24599: LD_VAR 0 2
24603: PUSH
24604: LD_VAR 0 3
24608: GREATER
24609: IFFALSE 24629
// length := i_from - i_to else
24611: LD_ADDR_VAR 0 11
24615: PUSH
24616: LD_VAR 0 2
24620: PUSH
24621: LD_VAR 0 3
24625: MINUS
24626: ST_TO_ADDR
24627: GO 24651
// length := ( array - i_to ) + i_from ;
24629: LD_ADDR_VAR 0 11
24633: PUSH
24634: LD_VAR 0 1
24638: PUSH
24639: LD_VAR 0 3
24643: MINUS
24644: PUSH
24645: LD_VAR 0 2
24649: PLUS
24650: ST_TO_ADDR
// end ; if not length then
24651: LD_VAR 0 11
24655: NOT
24656: IFFALSE 24660
// exit ;
24658: GO 24818
// tmp := array ;
24660: LD_ADDR_VAR 0 10
24664: PUSH
24665: LD_VAR 0 1
24669: ST_TO_ADDR
// for i = 1 to length do
24670: LD_ADDR_VAR 0 6
24674: PUSH
24675: DOUBLE
24676: LD_INT 1
24678: DEC
24679: ST_TO_ADDR
24680: LD_VAR 0 11
24684: PUSH
24685: FOR_TO
24686: IFFALSE 24806
// begin for j = 1 to array do
24688: LD_ADDR_VAR 0 7
24692: PUSH
24693: DOUBLE
24694: LD_INT 1
24696: DEC
24697: ST_TO_ADDR
24698: LD_VAR 0 1
24702: PUSH
24703: FOR_TO
24704: IFFALSE 24792
// begin k := j + d ;
24706: LD_ADDR_VAR 0 8
24710: PUSH
24711: LD_VAR 0 7
24715: PUSH
24716: LD_VAR 0 9
24720: PLUS
24721: ST_TO_ADDR
// if k > array then
24722: LD_VAR 0 8
24726: PUSH
24727: LD_VAR 0 1
24731: GREATER
24732: IFFALSE 24742
// k := 1 ;
24734: LD_ADDR_VAR 0 8
24738: PUSH
24739: LD_INT 1
24741: ST_TO_ADDR
// if not k then
24742: LD_VAR 0 8
24746: NOT
24747: IFFALSE 24759
// k := array ;
24749: LD_ADDR_VAR 0 8
24753: PUSH
24754: LD_VAR 0 1
24758: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24759: LD_ADDR_VAR 0 10
24763: PUSH
24764: LD_VAR 0 10
24768: PPUSH
24769: LD_VAR 0 8
24773: PPUSH
24774: LD_VAR 0 1
24778: PUSH
24779: LD_VAR 0 7
24783: ARRAY
24784: PPUSH
24785: CALL_OW 1
24789: ST_TO_ADDR
// end ;
24790: GO 24703
24792: POP
24793: POP
// array := tmp ;
24794: LD_ADDR_VAR 0 1
24798: PUSH
24799: LD_VAR 0 10
24803: ST_TO_ADDR
// end ;
24804: GO 24685
24806: POP
24807: POP
// result := array ;
24808: LD_ADDR_VAR 0 5
24812: PUSH
24813: LD_VAR 0 1
24817: ST_TO_ADDR
// end ;
24818: LD_VAR 0 5
24822: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24823: LD_INT 0
24825: PPUSH
24826: PPUSH
// result := 0 ;
24827: LD_ADDR_VAR 0 3
24831: PUSH
24832: LD_INT 0
24834: ST_TO_ADDR
// if not array or not value in array then
24835: LD_VAR 0 1
24839: NOT
24840: IFTRUE 24855
24842: PUSH
24843: LD_VAR 0 2
24847: PUSH
24848: LD_VAR 0 1
24852: IN
24853: NOT
24854: OR
24855: IFFALSE 24859
// exit ;
24857: GO 24913
// for i = 1 to array do
24859: LD_ADDR_VAR 0 4
24863: PUSH
24864: DOUBLE
24865: LD_INT 1
24867: DEC
24868: ST_TO_ADDR
24869: LD_VAR 0 1
24873: PUSH
24874: FOR_TO
24875: IFFALSE 24911
// if value = array [ i ] then
24877: LD_VAR 0 2
24881: PUSH
24882: LD_VAR 0 1
24886: PUSH
24887: LD_VAR 0 4
24891: ARRAY
24892: EQUAL
24893: IFFALSE 24909
// begin result := i ;
24895: LD_ADDR_VAR 0 3
24899: PUSH
24900: LD_VAR 0 4
24904: ST_TO_ADDR
// exit ;
24905: POP
24906: POP
24907: GO 24913
// end ;
24909: GO 24874
24911: POP
24912: POP
// end ;
24913: LD_VAR 0 3
24917: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24918: LD_INT 0
24920: PPUSH
// vc_chassis := chassis ;
24921: LD_ADDR_OWVAR 37
24925: PUSH
24926: LD_VAR 0 1
24930: ST_TO_ADDR
// vc_engine := engine ;
24931: LD_ADDR_OWVAR 39
24935: PUSH
24936: LD_VAR 0 2
24940: ST_TO_ADDR
// vc_control := control ;
24941: LD_ADDR_OWVAR 38
24945: PUSH
24946: LD_VAR 0 3
24950: ST_TO_ADDR
// vc_weapon := weapon ;
24951: LD_ADDR_OWVAR 40
24955: PUSH
24956: LD_VAR 0 4
24960: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24961: LD_ADDR_OWVAR 41
24965: PUSH
24966: LD_VAR 0 5
24970: ST_TO_ADDR
// end ;
24971: LD_VAR 0 6
24975: RET
// export function WantPlant ( unit ) ; var task ; begin
24976: LD_INT 0
24978: PPUSH
24979: PPUSH
// result := false ;
24980: LD_ADDR_VAR 0 2
24984: PUSH
24985: LD_INT 0
24987: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24988: LD_ADDR_VAR 0 3
24992: PUSH
24993: LD_VAR 0 1
24997: PPUSH
24998: CALL_OW 437
25002: ST_TO_ADDR
// if task then
25003: LD_VAR 0 3
25007: IFFALSE 25035
// if task [ 1 ] [ 1 ] = p then
25009: LD_VAR 0 3
25013: PUSH
25014: LD_INT 1
25016: ARRAY
25017: PUSH
25018: LD_INT 1
25020: ARRAY
25021: PUSH
25022: LD_STRING p
25024: EQUAL
25025: IFFALSE 25035
// result := true ;
25027: LD_ADDR_VAR 0 2
25031: PUSH
25032: LD_INT 1
25034: ST_TO_ADDR
// end ;
25035: LD_VAR 0 2
25039: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25040: LD_INT 0
25042: PPUSH
25043: PPUSH
25044: PPUSH
25045: PPUSH
// if pos < 1 then
25046: LD_VAR 0 2
25050: PUSH
25051: LD_INT 1
25053: LESS
25054: IFFALSE 25058
// exit ;
25056: GO 25361
// if pos = 1 then
25058: LD_VAR 0 2
25062: PUSH
25063: LD_INT 1
25065: EQUAL
25066: IFFALSE 25099
// result := Replace ( arr , pos [ 1 ] , value ) else
25068: LD_ADDR_VAR 0 4
25072: PUSH
25073: LD_VAR 0 1
25077: PPUSH
25078: LD_VAR 0 2
25082: PUSH
25083: LD_INT 1
25085: ARRAY
25086: PPUSH
25087: LD_VAR 0 3
25091: PPUSH
25092: CALL_OW 1
25096: ST_TO_ADDR
25097: GO 25361
// begin tmp := arr ;
25099: LD_ADDR_VAR 0 6
25103: PUSH
25104: LD_VAR 0 1
25108: ST_TO_ADDR
// s_arr := [ tmp ] ;
25109: LD_ADDR_VAR 0 7
25113: PUSH
25114: LD_VAR 0 6
25118: PUSH
25119: EMPTY
25120: LIST
25121: ST_TO_ADDR
// for i = 1 to pos - 1 do
25122: LD_ADDR_VAR 0 5
25126: PUSH
25127: DOUBLE
25128: LD_INT 1
25130: DEC
25131: ST_TO_ADDR
25132: LD_VAR 0 2
25136: PUSH
25137: LD_INT 1
25139: MINUS
25140: PUSH
25141: FOR_TO
25142: IFFALSE 25187
// begin tmp := tmp [ pos [ i ] ] ;
25144: LD_ADDR_VAR 0 6
25148: PUSH
25149: LD_VAR 0 6
25153: PUSH
25154: LD_VAR 0 2
25158: PUSH
25159: LD_VAR 0 5
25163: ARRAY
25164: ARRAY
25165: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25166: LD_ADDR_VAR 0 7
25170: PUSH
25171: LD_VAR 0 7
25175: PUSH
25176: LD_VAR 0 6
25180: PUSH
25181: EMPTY
25182: LIST
25183: ADD
25184: ST_TO_ADDR
// end ;
25185: GO 25141
25187: POP
25188: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25189: LD_ADDR_VAR 0 6
25193: PUSH
25194: LD_VAR 0 6
25198: PPUSH
25199: LD_VAR 0 2
25203: PUSH
25204: LD_VAR 0 2
25208: ARRAY
25209: PPUSH
25210: LD_VAR 0 3
25214: PPUSH
25215: CALL_OW 1
25219: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25220: LD_ADDR_VAR 0 7
25224: PUSH
25225: LD_VAR 0 7
25229: PPUSH
25230: LD_VAR 0 7
25234: PPUSH
25235: LD_VAR 0 6
25239: PPUSH
25240: CALL_OW 1
25244: ST_TO_ADDR
// for i = s_arr downto 2 do
25245: LD_ADDR_VAR 0 5
25249: PUSH
25250: DOUBLE
25251: LD_VAR 0 7
25255: INC
25256: ST_TO_ADDR
25257: LD_INT 2
25259: PUSH
25260: FOR_DOWNTO
25261: IFFALSE 25345
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25263: LD_ADDR_VAR 0 6
25267: PUSH
25268: LD_VAR 0 7
25272: PUSH
25273: LD_VAR 0 5
25277: PUSH
25278: LD_INT 1
25280: MINUS
25281: ARRAY
25282: PPUSH
25283: LD_VAR 0 2
25287: PUSH
25288: LD_VAR 0 5
25292: PUSH
25293: LD_INT 1
25295: MINUS
25296: ARRAY
25297: PPUSH
25298: LD_VAR 0 7
25302: PUSH
25303: LD_VAR 0 5
25307: ARRAY
25308: PPUSH
25309: CALL_OW 1
25313: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25314: LD_ADDR_VAR 0 7
25318: PUSH
25319: LD_VAR 0 7
25323: PPUSH
25324: LD_VAR 0 5
25328: PUSH
25329: LD_INT 1
25331: MINUS
25332: PPUSH
25333: LD_VAR 0 6
25337: PPUSH
25338: CALL_OW 1
25342: ST_TO_ADDR
// end ;
25343: GO 25260
25345: POP
25346: POP
// result := s_arr [ 1 ] ;
25347: LD_ADDR_VAR 0 4
25351: PUSH
25352: LD_VAR 0 7
25356: PUSH
25357: LD_INT 1
25359: ARRAY
25360: ST_TO_ADDR
// end ; end ;
25361: LD_VAR 0 4
25365: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25366: LD_INT 0
25368: PPUSH
25369: PPUSH
// if not list then
25370: LD_VAR 0 1
25374: NOT
25375: IFFALSE 25379
// exit ;
25377: GO 25470
// i := list [ pos1 ] ;
25379: LD_ADDR_VAR 0 5
25383: PUSH
25384: LD_VAR 0 1
25388: PUSH
25389: LD_VAR 0 2
25393: ARRAY
25394: ST_TO_ADDR
// if not i then
25395: LD_VAR 0 5
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25470
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25404: LD_ADDR_VAR 0 1
25408: PUSH
25409: LD_VAR 0 1
25413: PPUSH
25414: LD_VAR 0 2
25418: PPUSH
25419: LD_VAR 0 1
25423: PUSH
25424: LD_VAR 0 3
25428: ARRAY
25429: PPUSH
25430: CALL_OW 1
25434: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25435: LD_ADDR_VAR 0 1
25439: PUSH
25440: LD_VAR 0 1
25444: PPUSH
25445: LD_VAR 0 3
25449: PPUSH
25450: LD_VAR 0 5
25454: PPUSH
25455: CALL_OW 1
25459: ST_TO_ADDR
// result := list ;
25460: LD_ADDR_VAR 0 4
25464: PUSH
25465: LD_VAR 0 1
25469: ST_TO_ADDR
// end ;
25470: LD_VAR 0 4
25474: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25475: LD_INT 0
25477: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: LD_VAR 0 1
25487: PPUSH
25488: CALL_OW 250
25492: PPUSH
25493: LD_VAR 0 1
25497: PPUSH
25498: CALL_OW 251
25502: PPUSH
25503: LD_VAR 0 2
25507: PPUSH
25508: LD_VAR 0 3
25512: PPUSH
25513: LD_VAR 0 4
25517: PPUSH
25518: CALL 25900 0 5
25522: ST_TO_ADDR
// end ;
25523: LD_VAR 0 5
25527: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
25528: LD_INT 0
25530: PPUSH
25531: PPUSH
25532: PPUSH
25533: PPUSH
// if not list or not unit then
25534: LD_VAR 0 2
25538: NOT
25539: IFTRUE 25548
25541: PUSH
25542: LD_VAR 0 1
25546: NOT
25547: OR
25548: IFFALSE 25552
// exit ;
25550: GO 25895
// result := [ ] ;
25552: LD_ADDR_VAR 0 5
25556: PUSH
25557: EMPTY
25558: ST_TO_ADDR
// for i in list do
25559: LD_ADDR_VAR 0 6
25563: PUSH
25564: LD_VAR 0 2
25568: PUSH
25569: FOR_IN
25570: IFFALSE 25788
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
25572: LD_ADDR_VAR 0 8
25576: PUSH
25577: LD_VAR 0 1
25581: PPUSH
25582: LD_VAR 0 6
25586: PUSH
25587: LD_INT 1
25589: ARRAY
25590: PPUSH
25591: LD_VAR 0 6
25595: PUSH
25596: LD_INT 2
25598: ARRAY
25599: PPUSH
25600: CALL_OW 297
25604: ST_TO_ADDR
// if not Count ( result ) then
25605: LD_VAR 0 5
25609: PPUSH
25610: CALL 22122 0 1
25614: NOT
25615: IFFALSE 25648
// begin result := Join ( result , [ i , tmp ] ) ;
25617: LD_ADDR_VAR 0 5
25621: PUSH
25622: LD_VAR 0 5
25626: PPUSH
25627: LD_VAR 0 6
25631: PUSH
25632: LD_VAR 0 8
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PPUSH
25641: CALL 58098 0 2
25645: ST_TO_ADDR
// continue ;
25646: GO 25569
// end ; if result [ result ] [ 2 ] <= tmp then
25648: LD_VAR 0 5
25652: PUSH
25653: LD_VAR 0 5
25657: ARRAY
25658: PUSH
25659: LD_INT 2
25661: ARRAY
25662: PUSH
25663: LD_VAR 0 8
25667: LESSEQUAL
25668: IFFALSE 25701
// result := Join ( result , [ i , tmp ] ) else
25670: LD_ADDR_VAR 0 5
25674: PUSH
25675: LD_VAR 0 5
25679: PPUSH
25680: LD_VAR 0 6
25684: PUSH
25685: LD_VAR 0 8
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PPUSH
25694: CALL 58098 0 2
25698: ST_TO_ADDR
25699: GO 25786
// begin for j := 1 to Count ( result ) do
25701: LD_ADDR_VAR 0 7
25705: PUSH
25706: DOUBLE
25707: LD_INT 1
25709: DEC
25710: ST_TO_ADDR
25711: LD_VAR 0 5
25715: PPUSH
25716: CALL 22122 0 1
25720: PUSH
25721: FOR_TO
25722: IFFALSE 25784
// begin if tmp < result [ j ] [ 2 ] then
25724: LD_VAR 0 8
25728: PUSH
25729: LD_VAR 0 5
25733: PUSH
25734: LD_VAR 0 7
25738: ARRAY
25739: PUSH
25740: LD_INT 2
25742: ARRAY
25743: LESS
25744: IFFALSE 25782
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25746: LD_ADDR_VAR 0 5
25750: PUSH
25751: LD_VAR 0 5
25755: PPUSH
25756: LD_VAR 0 7
25760: PPUSH
25761: LD_VAR 0 6
25765: PUSH
25766: LD_VAR 0 8
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PPUSH
25775: CALL_OW 2
25779: ST_TO_ADDR
// break ;
25780: GO 25784
// end ; end ;
25782: GO 25721
25784: POP
25785: POP
// end ; end ;
25786: GO 25569
25788: POP
25789: POP
// if result and not asc then
25790: LD_VAR 0 5
25794: IFFALSE 25803
25796: PUSH
25797: LD_VAR 0 3
25801: NOT
25802: AND
25803: IFFALSE 25820
// result := ReverseArray ( result ) ;
25805: LD_ADDR_VAR 0 5
25809: PUSH
25810: LD_VAR 0 5
25814: PPUSH
25815: CALL 53178 0 1
25819: ST_TO_ADDR
// tmp := [ ] ;
25820: LD_ADDR_VAR 0 8
25824: PUSH
25825: EMPTY
25826: ST_TO_ADDR
// if mode then
25827: LD_VAR 0 4
25831: IFFALSE 25895
// begin for i := 1 to result do
25833: LD_ADDR_VAR 0 6
25837: PUSH
25838: DOUBLE
25839: LD_INT 1
25841: DEC
25842: ST_TO_ADDR
25843: LD_VAR 0 5
25847: PUSH
25848: FOR_TO
25849: IFFALSE 25883
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
25851: LD_ADDR_VAR 0 8
25855: PUSH
25856: LD_VAR 0 8
25860: PPUSH
25861: LD_VAR 0 5
25865: PUSH
25866: LD_VAR 0 6
25870: ARRAY
25871: PUSH
25872: LD_INT 1
25874: ARRAY
25875: PPUSH
25876: CALL 58098 0 2
25880: ST_TO_ADDR
25881: GO 25848
25883: POP
25884: POP
// result := tmp ;
25885: LD_ADDR_VAR 0 5
25889: PUSH
25890: LD_VAR 0 8
25894: ST_TO_ADDR
// end ; end ;
25895: LD_VAR 0 5
25899: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25900: LD_INT 0
25902: PPUSH
25903: PPUSH
25904: PPUSH
25905: PPUSH
// if not list then
25906: LD_VAR 0 3
25910: NOT
25911: IFFALSE 25915
// exit ;
25913: GO 26305
// result := [ ] ;
25915: LD_ADDR_VAR 0 6
25919: PUSH
25920: EMPTY
25921: ST_TO_ADDR
// for i in list do
25922: LD_ADDR_VAR 0 7
25926: PUSH
25927: LD_VAR 0 3
25931: PUSH
25932: FOR_IN
25933: IFFALSE 26135
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25935: LD_ADDR_VAR 0 9
25939: PUSH
25940: LD_VAR 0 7
25944: PPUSH
25945: LD_VAR 0 1
25949: PPUSH
25950: LD_VAR 0 2
25954: PPUSH
25955: CALL_OW 297
25959: ST_TO_ADDR
// if not result then
25960: LD_VAR 0 6
25964: NOT
25965: IFFALSE 25991
// result := [ [ i , tmp ] ] else
25967: LD_ADDR_VAR 0 6
25971: PUSH
25972: LD_VAR 0 7
25976: PUSH
25977: LD_VAR 0 9
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: EMPTY
25987: LIST
25988: ST_TO_ADDR
25989: GO 26133
// begin if result [ result ] [ 2 ] <= tmp then
25991: LD_VAR 0 6
25995: PUSH
25996: LD_VAR 0 6
26000: ARRAY
26001: PUSH
26002: LD_INT 2
26004: ARRAY
26005: PUSH
26006: LD_VAR 0 9
26010: LESSEQUAL
26011: IFFALSE 26053
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26013: LD_ADDR_VAR 0 6
26017: PUSH
26018: LD_VAR 0 6
26022: PPUSH
26023: LD_VAR 0 6
26027: PUSH
26028: LD_INT 1
26030: PLUS
26031: PPUSH
26032: LD_VAR 0 7
26036: PUSH
26037: LD_VAR 0 9
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PPUSH
26046: CALL_OW 2
26050: ST_TO_ADDR
26051: GO 26133
// for j := 1 to result do
26053: LD_ADDR_VAR 0 8
26057: PUSH
26058: DOUBLE
26059: LD_INT 1
26061: DEC
26062: ST_TO_ADDR
26063: LD_VAR 0 6
26067: PUSH
26068: FOR_TO
26069: IFFALSE 26131
// begin if tmp < result [ j ] [ 2 ] then
26071: LD_VAR 0 9
26075: PUSH
26076: LD_VAR 0 6
26080: PUSH
26081: LD_VAR 0 8
26085: ARRAY
26086: PUSH
26087: LD_INT 2
26089: ARRAY
26090: LESS
26091: IFFALSE 26129
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26093: LD_ADDR_VAR 0 6
26097: PUSH
26098: LD_VAR 0 6
26102: PPUSH
26103: LD_VAR 0 8
26107: PPUSH
26108: LD_VAR 0 7
26112: PUSH
26113: LD_VAR 0 9
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PPUSH
26122: CALL_OW 2
26126: ST_TO_ADDR
// break ;
26127: GO 26131
// end ; end ;
26129: GO 26068
26131: POP
26132: POP
// end ; end ;
26133: GO 25932
26135: POP
26136: POP
// if result and not asc then
26137: LD_VAR 0 6
26141: IFFALSE 26150
26143: PUSH
26144: LD_VAR 0 4
26148: NOT
26149: AND
26150: IFFALSE 26225
// begin tmp := result ;
26152: LD_ADDR_VAR 0 9
26156: PUSH
26157: LD_VAR 0 6
26161: ST_TO_ADDR
// for i = tmp downto 1 do
26162: LD_ADDR_VAR 0 7
26166: PUSH
26167: DOUBLE
26168: LD_VAR 0 9
26172: INC
26173: ST_TO_ADDR
26174: LD_INT 1
26176: PUSH
26177: FOR_DOWNTO
26178: IFFALSE 26223
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26180: LD_ADDR_VAR 0 6
26184: PUSH
26185: LD_VAR 0 6
26189: PPUSH
26190: LD_VAR 0 9
26194: PUSH
26195: LD_VAR 0 7
26199: MINUS
26200: PUSH
26201: LD_INT 1
26203: PLUS
26204: PPUSH
26205: LD_VAR 0 9
26209: PUSH
26210: LD_VAR 0 7
26214: ARRAY
26215: PPUSH
26216: CALL_OW 1
26220: ST_TO_ADDR
26221: GO 26177
26223: POP
26224: POP
// end ; tmp := [ ] ;
26225: LD_ADDR_VAR 0 9
26229: PUSH
26230: EMPTY
26231: ST_TO_ADDR
// if mode then
26232: LD_VAR 0 5
26236: IFFALSE 26305
// begin for i = 1 to result do
26238: LD_ADDR_VAR 0 7
26242: PUSH
26243: DOUBLE
26244: LD_INT 1
26246: DEC
26247: ST_TO_ADDR
26248: LD_VAR 0 6
26252: PUSH
26253: FOR_TO
26254: IFFALSE 26293
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26256: LD_ADDR_VAR 0 9
26260: PUSH
26261: LD_VAR 0 9
26265: PPUSH
26266: LD_VAR 0 7
26270: PPUSH
26271: LD_VAR 0 6
26275: PUSH
26276: LD_VAR 0 7
26280: ARRAY
26281: PUSH
26282: LD_INT 1
26284: ARRAY
26285: PPUSH
26286: CALL_OW 1
26290: ST_TO_ADDR
26291: GO 26253
26293: POP
26294: POP
// result := tmp ;
26295: LD_ADDR_VAR 0 6
26299: PUSH
26300: LD_VAR 0 9
26304: ST_TO_ADDR
// end ; end ;
26305: LD_VAR 0 6
26309: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26310: LD_INT 0
26312: PPUSH
26313: PPUSH
26314: PPUSH
26315: PPUSH
26316: PPUSH
26317: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26318: LD_ADDR_VAR 0 5
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: ST_TO_ADDR
// if not x or not y then
26340: LD_VAR 0 2
26344: NOT
26345: IFTRUE 26354
26347: PUSH
26348: LD_VAR 0 3
26352: NOT
26353: OR
26354: IFFALSE 26358
// exit ;
26356: GO 28014
// if not range then
26358: LD_VAR 0 4
26362: NOT
26363: IFFALSE 26373
// range := 10 ;
26365: LD_ADDR_VAR 0 4
26369: PUSH
26370: LD_INT 10
26372: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26373: LD_ADDR_VAR 0 8
26377: PUSH
26378: LD_INT 81
26380: PUSH
26381: LD_VAR 0 1
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 92
26392: PUSH
26393: LD_VAR 0 2
26397: PUSH
26398: LD_VAR 0 3
26402: PUSH
26403: LD_VAR 0 4
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 3
26416: PUSH
26417: LD_INT 21
26419: PUSH
26420: LD_INT 3
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: LIST
26435: PPUSH
26436: CALL_OW 69
26440: ST_TO_ADDR
// if not tmp then
26441: LD_VAR 0 8
26445: NOT
26446: IFFALSE 26450
// exit ;
26448: GO 28014
// for i in tmp do
26450: LD_ADDR_VAR 0 6
26454: PUSH
26455: LD_VAR 0 8
26459: PUSH
26460: FOR_IN
26461: IFFALSE 27989
// begin points := [ 0 , 0 , 0 ] ;
26463: LD_ADDR_VAR 0 9
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: LIST
26481: ST_TO_ADDR
// bpoints := 1 ;
26482: LD_ADDR_VAR 0 10
26486: PUSH
26487: LD_INT 1
26489: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26490: LD_VAR 0 6
26494: PPUSH
26495: CALL_OW 247
26499: PUSH
26500: LD_INT 1
26502: DOUBLE
26503: EQUAL
26504: IFTRUE 26508
26506: GO 27090
26508: POP
// begin if GetClass ( i ) = 1 then
26509: LD_VAR 0 6
26513: PPUSH
26514: CALL_OW 257
26518: PUSH
26519: LD_INT 1
26521: EQUAL
26522: IFFALSE 26543
// points := [ 10 , 5 , 3 ] ;
26524: LD_ADDR_VAR 0 9
26528: PUSH
26529: LD_INT 10
26531: PUSH
26532: LD_INT 5
26534: PUSH
26535: LD_INT 3
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: LIST
26542: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26543: LD_VAR 0 6
26547: PPUSH
26548: CALL_OW 257
26552: PUSH
26553: LD_INT 2
26555: PUSH
26556: LD_INT 3
26558: PUSH
26559: LD_INT 4
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: LIST
26566: IN
26567: IFFALSE 26588
// points := [ 3 , 2 , 1 ] ;
26569: LD_ADDR_VAR 0 9
26573: PUSH
26574: LD_INT 3
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26588: LD_VAR 0 6
26592: PPUSH
26593: CALL_OW 257
26597: PUSH
26598: LD_INT 5
26600: EQUAL
26601: IFFALSE 26622
// points := [ 130 , 5 , 2 ] ;
26603: LD_ADDR_VAR 0 9
26607: PUSH
26608: LD_INT 130
26610: PUSH
26611: LD_INT 5
26613: PUSH
26614: LD_INT 2
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26622: LD_VAR 0 6
26626: PPUSH
26627: CALL_OW 257
26631: PUSH
26632: LD_INT 8
26634: EQUAL
26635: IFFALSE 26656
// points := [ 35 , 35 , 30 ] ;
26637: LD_ADDR_VAR 0 9
26641: PUSH
26642: LD_INT 35
26644: PUSH
26645: LD_INT 35
26647: PUSH
26648: LD_INT 30
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: LIST
26655: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26656: LD_VAR 0 6
26660: PPUSH
26661: CALL_OW 257
26665: PUSH
26666: LD_INT 9
26668: EQUAL
26669: IFFALSE 26690
// points := [ 20 , 55 , 40 ] ;
26671: LD_ADDR_VAR 0 9
26675: PUSH
26676: LD_INT 20
26678: PUSH
26679: LD_INT 55
26681: PUSH
26682: LD_INT 40
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: LIST
26689: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26690: LD_VAR 0 6
26694: PPUSH
26695: CALL_OW 257
26699: PUSH
26700: LD_INT 12
26702: PUSH
26703: LD_INT 16
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: IN
26710: IFFALSE 26731
// points := [ 5 , 3 , 2 ] ;
26712: LD_ADDR_VAR 0 9
26716: PUSH
26717: LD_INT 5
26719: PUSH
26720: LD_INT 3
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26731: LD_VAR 0 6
26735: PPUSH
26736: CALL_OW 257
26740: PUSH
26741: LD_INT 17
26743: EQUAL
26744: IFFALSE 26765
// points := [ 100 , 50 , 75 ] ;
26746: LD_ADDR_VAR 0 9
26750: PUSH
26751: LD_INT 100
26753: PUSH
26754: LD_INT 50
26756: PUSH
26757: LD_INT 75
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: LIST
26764: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26765: LD_VAR 0 6
26769: PPUSH
26770: CALL_OW 257
26774: PUSH
26775: LD_INT 15
26777: EQUAL
26778: IFFALSE 26799
// points := [ 10 , 5 , 3 ] ;
26780: LD_ADDR_VAR 0 9
26784: PUSH
26785: LD_INT 10
26787: PUSH
26788: LD_INT 5
26790: PUSH
26791: LD_INT 3
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26799: LD_VAR 0 6
26803: PPUSH
26804: CALL_OW 257
26808: PUSH
26809: LD_INT 14
26811: EQUAL
26812: IFFALSE 26833
// points := [ 10 , 0 , 0 ] ;
26814: LD_ADDR_VAR 0 9
26818: PUSH
26819: LD_INT 10
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26833: LD_VAR 0 6
26837: PPUSH
26838: CALL_OW 257
26842: PUSH
26843: LD_INT 11
26845: EQUAL
26846: IFFALSE 26867
// points := [ 30 , 10 , 5 ] ;
26848: LD_ADDR_VAR 0 9
26852: PUSH
26853: LD_INT 30
26855: PUSH
26856: LD_INT 10
26858: PUSH
26859: LD_INT 5
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: LIST
26866: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26867: LD_VAR 0 1
26871: PPUSH
26872: LD_INT 5
26874: PPUSH
26875: CALL_OW 321
26879: PUSH
26880: LD_INT 2
26882: EQUAL
26883: IFFALSE 26900
// bpoints := bpoints * 1.8 ;
26885: LD_ADDR_VAR 0 10
26889: PUSH
26890: LD_VAR 0 10
26894: PUSH
26895: LD_REAL  1.80000000000000E+0000
26898: MUL
26899: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26900: LD_VAR 0 6
26904: PPUSH
26905: CALL_OW 257
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 3
26918: PUSH
26919: LD_INT 4
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: IN
26928: IFFALSE 26948
26930: PUSH
26931: LD_VAR 0 1
26935: PPUSH
26936: LD_INT 51
26938: PPUSH
26939: CALL_OW 321
26943: PUSH
26944: LD_INT 2
26946: EQUAL
26947: AND
26948: IFFALSE 26965
// bpoints := bpoints * 1.2 ;
26950: LD_ADDR_VAR 0 10
26954: PUSH
26955: LD_VAR 0 10
26959: PUSH
26960: LD_REAL  1.20000000000000E+0000
26963: MUL
26964: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26965: LD_VAR 0 6
26969: PPUSH
26970: CALL_OW 257
26974: PUSH
26975: LD_INT 5
26977: PUSH
26978: LD_INT 7
26980: PUSH
26981: LD_INT 9
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: IN
26989: IFFALSE 27009
26991: PUSH
26992: LD_VAR 0 1
26996: PPUSH
26997: LD_INT 52
26999: PPUSH
27000: CALL_OW 321
27004: PUSH
27005: LD_INT 2
27007: EQUAL
27008: AND
27009: IFFALSE 27026
// bpoints := bpoints * 1.5 ;
27011: LD_ADDR_VAR 0 10
27015: PUSH
27016: LD_VAR 0 10
27020: PUSH
27021: LD_REAL  1.50000000000000E+0000
27024: MUL
27025: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27026: LD_VAR 0 1
27030: PPUSH
27031: LD_INT 66
27033: PPUSH
27034: CALL_OW 321
27038: PUSH
27039: LD_INT 2
27041: EQUAL
27042: IFFALSE 27059
// bpoints := bpoints * 1.1 ;
27044: LD_ADDR_VAR 0 10
27048: PUSH
27049: LD_VAR 0 10
27053: PUSH
27054: LD_REAL  1.10000000000000E+0000
27057: MUL
27058: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27059: LD_ADDR_VAR 0 10
27063: PUSH
27064: LD_VAR 0 10
27068: PUSH
27069: LD_VAR 0 6
27073: PPUSH
27074: LD_INT 1
27076: PPUSH
27077: CALL_OW 259
27081: PUSH
27082: LD_REAL  1.15000000000000E+0000
27085: MUL
27086: MUL
27087: ST_TO_ADDR
// end ; unit_vehicle :
27088: GO 27918
27090: LD_INT 2
27092: DOUBLE
27093: EQUAL
27094: IFTRUE 27098
27096: GO 27906
27098: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27099: LD_VAR 0 6
27103: PPUSH
27104: CALL_OW 264
27108: PUSH
27109: LD_INT 2
27111: PUSH
27112: LD_INT 42
27114: PUSH
27115: LD_INT 24
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: IN
27123: IFFALSE 27144
// points := [ 25 , 5 , 3 ] ;
27125: LD_ADDR_VAR 0 9
27129: PUSH
27130: LD_INT 25
27132: PUSH
27133: LD_INT 5
27135: PUSH
27136: LD_INT 3
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27144: LD_VAR 0 6
27148: PPUSH
27149: CALL_OW 264
27153: PUSH
27154: LD_INT 4
27156: PUSH
27157: LD_INT 43
27159: PUSH
27160: LD_INT 25
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: LIST
27167: IN
27168: IFFALSE 27189
// points := [ 40 , 15 , 5 ] ;
27170: LD_ADDR_VAR 0 9
27174: PUSH
27175: LD_INT 40
27177: PUSH
27178: LD_INT 15
27180: PUSH
27181: LD_INT 5
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: LIST
27188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27189: LD_VAR 0 6
27193: PPUSH
27194: CALL_OW 264
27198: PUSH
27199: LD_INT 3
27201: PUSH
27202: LD_INT 23
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: IN
27209: IFFALSE 27230
// points := [ 7 , 25 , 8 ] ;
27211: LD_ADDR_VAR 0 9
27215: PUSH
27216: LD_INT 7
27218: PUSH
27219: LD_INT 25
27221: PUSH
27222: LD_INT 8
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27230: LD_VAR 0 6
27234: PPUSH
27235: CALL_OW 264
27239: PUSH
27240: LD_INT 5
27242: PUSH
27243: LD_INT 27
27245: PUSH
27246: LD_INT 44
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: LIST
27253: IN
27254: IFFALSE 27275
// points := [ 14 , 50 , 16 ] ;
27256: LD_ADDR_VAR 0 9
27260: PUSH
27261: LD_INT 14
27263: PUSH
27264: LD_INT 50
27266: PUSH
27267: LD_INT 16
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27275: LD_VAR 0 6
27279: PPUSH
27280: CALL_OW 264
27284: PUSH
27285: LD_INT 6
27287: PUSH
27288: LD_INT 46
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: IN
27295: IFFALSE 27316
// points := [ 32 , 120 , 70 ] ;
27297: LD_ADDR_VAR 0 9
27301: PUSH
27302: LD_INT 32
27304: PUSH
27305: LD_INT 120
27307: PUSH
27308: LD_INT 70
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: LIST
27315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27316: LD_VAR 0 6
27320: PPUSH
27321: CALL_OW 264
27325: PUSH
27326: LD_INT 7
27328: PUSH
27329: LD_INT 28
27331: PUSH
27332: LD_INT 45
27334: PUSH
27335: LD_INT 92
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: IN
27344: IFFALSE 27365
// points := [ 35 , 20 , 45 ] ;
27346: LD_ADDR_VAR 0 9
27350: PUSH
27351: LD_INT 35
27353: PUSH
27354: LD_INT 20
27356: PUSH
27357: LD_INT 45
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27365: LD_VAR 0 6
27369: PPUSH
27370: CALL_OW 264
27374: PUSH
27375: LD_INT 47
27377: PUSH
27378: EMPTY
27379: LIST
27380: IN
27381: IFFALSE 27402
// points := [ 67 , 45 , 75 ] ;
27383: LD_ADDR_VAR 0 9
27387: PUSH
27388: LD_INT 67
27390: PUSH
27391: LD_INT 45
27393: PUSH
27394: LD_INT 75
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27402: LD_VAR 0 6
27406: PPUSH
27407: CALL_OW 264
27411: PUSH
27412: LD_INT 26
27414: PUSH
27415: EMPTY
27416: LIST
27417: IN
27418: IFFALSE 27439
// points := [ 120 , 30 , 80 ] ;
27420: LD_ADDR_VAR 0 9
27424: PUSH
27425: LD_INT 120
27427: PUSH
27428: LD_INT 30
27430: PUSH
27431: LD_INT 80
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27439: LD_VAR 0 6
27443: PPUSH
27444: CALL_OW 264
27448: PUSH
27449: LD_INT 22
27451: PUSH
27452: EMPTY
27453: LIST
27454: IN
27455: IFFALSE 27476
// points := [ 40 , 1 , 1 ] ;
27457: LD_ADDR_VAR 0 9
27461: PUSH
27462: LD_INT 40
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27476: LD_VAR 0 6
27480: PPUSH
27481: CALL_OW 264
27485: PUSH
27486: LD_INT 29
27488: PUSH
27489: EMPTY
27490: LIST
27491: IN
27492: IFFALSE 27513
// points := [ 70 , 200 , 400 ] ;
27494: LD_ADDR_VAR 0 9
27498: PUSH
27499: LD_INT 70
27501: PUSH
27502: LD_INT 200
27504: PUSH
27505: LD_INT 400
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: LIST
27512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27513: LD_VAR 0 6
27517: PPUSH
27518: CALL_OW 264
27522: PUSH
27523: LD_INT 14
27525: PUSH
27526: LD_INT 53
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: IN
27533: IFFALSE 27554
// points := [ 40 , 10 , 20 ] ;
27535: LD_ADDR_VAR 0 9
27539: PUSH
27540: LD_INT 40
27542: PUSH
27543: LD_INT 10
27545: PUSH
27546: LD_INT 20
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: LIST
27553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27554: LD_VAR 0 6
27558: PPUSH
27559: CALL_OW 264
27563: PUSH
27564: LD_INT 9
27566: PUSH
27567: EMPTY
27568: LIST
27569: IN
27570: IFFALSE 27591
// points := [ 5 , 70 , 20 ] ;
27572: LD_ADDR_VAR 0 9
27576: PUSH
27577: LD_INT 5
27579: PUSH
27580: LD_INT 70
27582: PUSH
27583: LD_INT 20
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27591: LD_VAR 0 6
27595: PPUSH
27596: CALL_OW 264
27600: PUSH
27601: LD_INT 10
27603: PUSH
27604: EMPTY
27605: LIST
27606: IN
27607: IFFALSE 27628
// points := [ 35 , 110 , 70 ] ;
27609: LD_ADDR_VAR 0 9
27613: PUSH
27614: LD_INT 35
27616: PUSH
27617: LD_INT 110
27619: PUSH
27620: LD_INT 70
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27628: LD_VAR 0 6
27632: PPUSH
27633: CALL_OW 265
27637: PUSH
27638: LD_INT 25
27640: EQUAL
27641: IFFALSE 27662
// points := [ 80 , 65 , 100 ] ;
27643: LD_ADDR_VAR 0 9
27647: PUSH
27648: LD_INT 80
27650: PUSH
27651: LD_INT 65
27653: PUSH
27654: LD_INT 100
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27662: LD_VAR 0 6
27666: PPUSH
27667: CALL_OW 263
27671: PUSH
27672: LD_INT 1
27674: EQUAL
27675: IFFALSE 27710
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27677: LD_ADDR_VAR 0 10
27681: PUSH
27682: LD_VAR 0 10
27686: PUSH
27687: LD_VAR 0 6
27691: PPUSH
27692: CALL_OW 311
27696: PPUSH
27697: LD_INT 3
27699: PPUSH
27700: CALL_OW 259
27704: PUSH
27705: LD_INT 4
27707: MUL
27708: MUL
27709: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27710: LD_VAR 0 6
27714: PPUSH
27715: CALL_OW 263
27719: PUSH
27720: LD_INT 2
27722: EQUAL
27723: IFFALSE 27774
// begin j := IsControledBy ( i ) ;
27725: LD_ADDR_VAR 0 7
27729: PUSH
27730: LD_VAR 0 6
27734: PPUSH
27735: CALL_OW 312
27739: ST_TO_ADDR
// if j then
27740: LD_VAR 0 7
27744: IFFALSE 27774
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27746: LD_ADDR_VAR 0 10
27750: PUSH
27751: LD_VAR 0 10
27755: PUSH
27756: LD_VAR 0 7
27760: PPUSH
27761: LD_INT 3
27763: PPUSH
27764: CALL_OW 259
27768: PUSH
27769: LD_INT 3
27771: MUL
27772: MUL
27773: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27774: LD_VAR 0 6
27778: PPUSH
27779: CALL_OW 264
27783: PUSH
27784: LD_INT 5
27786: PUSH
27787: LD_INT 6
27789: PUSH
27790: LD_INT 46
27792: PUSH
27793: LD_INT 44
27795: PUSH
27796: LD_INT 47
27798: PUSH
27799: LD_INT 45
27801: PUSH
27802: LD_INT 28
27804: PUSH
27805: LD_INT 7
27807: PUSH
27808: LD_INT 27
27810: PUSH
27811: LD_INT 29
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: IN
27826: IFFALSE 27846
27828: PUSH
27829: LD_VAR 0 1
27833: PPUSH
27834: LD_INT 52
27836: PPUSH
27837: CALL_OW 321
27841: PUSH
27842: LD_INT 2
27844: EQUAL
27845: AND
27846: IFFALSE 27863
// bpoints := bpoints * 1.2 ;
27848: LD_ADDR_VAR 0 10
27852: PUSH
27853: LD_VAR 0 10
27857: PUSH
27858: LD_REAL  1.20000000000000E+0000
27861: MUL
27862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27863: LD_VAR 0 6
27867: PPUSH
27868: CALL_OW 264
27872: PUSH
27873: LD_INT 6
27875: PUSH
27876: LD_INT 46
27878: PUSH
27879: LD_INT 47
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: IN
27887: IFFALSE 27904
// bpoints := bpoints * 1.2 ;
27889: LD_ADDR_VAR 0 10
27893: PUSH
27894: LD_VAR 0 10
27898: PUSH
27899: LD_REAL  1.20000000000000E+0000
27902: MUL
27903: ST_TO_ADDR
// end ; unit_building :
27904: GO 27918
27906: LD_INT 3
27908: DOUBLE
27909: EQUAL
27910: IFTRUE 27914
27912: GO 27917
27914: POP
// ; end ;
27915: GO 27918
27917: POP
// for j = 1 to 3 do
27918: LD_ADDR_VAR 0 7
27922: PUSH
27923: DOUBLE
27924: LD_INT 1
27926: DEC
27927: ST_TO_ADDR
27928: LD_INT 3
27930: PUSH
27931: FOR_TO
27932: IFFALSE 27985
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27934: LD_ADDR_VAR 0 5
27938: PUSH
27939: LD_VAR 0 5
27943: PPUSH
27944: LD_VAR 0 7
27948: PPUSH
27949: LD_VAR 0 5
27953: PUSH
27954: LD_VAR 0 7
27958: ARRAY
27959: PUSH
27960: LD_VAR 0 9
27964: PUSH
27965: LD_VAR 0 7
27969: ARRAY
27970: PUSH
27971: LD_VAR 0 10
27975: MUL
27976: PLUS
27977: PPUSH
27978: CALL_OW 1
27982: ST_TO_ADDR
27983: GO 27931
27985: POP
27986: POP
// end ;
27987: GO 26460
27989: POP
27990: POP
// result := Replace ( result , 4 , tmp ) ;
27991: LD_ADDR_VAR 0 5
27995: PUSH
27996: LD_VAR 0 5
28000: PPUSH
28001: LD_INT 4
28003: PPUSH
28004: LD_VAR 0 8
28008: PPUSH
28009: CALL_OW 1
28013: ST_TO_ADDR
// end ;
28014: LD_VAR 0 5
28018: RET
// export function DangerAtRange ( unit , range ) ; begin
28019: LD_INT 0
28021: PPUSH
// if not unit then
28022: LD_VAR 0 1
28026: NOT
28027: IFFALSE 28031
// exit ;
28029: GO 28076
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28031: LD_ADDR_VAR 0 3
28035: PUSH
28036: LD_VAR 0 1
28040: PPUSH
28041: CALL_OW 255
28045: PPUSH
28046: LD_VAR 0 1
28050: PPUSH
28051: CALL_OW 250
28055: PPUSH
28056: LD_VAR 0 1
28060: PPUSH
28061: CALL_OW 251
28065: PPUSH
28066: LD_VAR 0 2
28070: PPUSH
28071: CALL 26310 0 4
28075: ST_TO_ADDR
// end ;
28076: LD_VAR 0 3
28080: RET
// export function DangerInArea ( side , area ) ; begin
28081: LD_INT 0
28083: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28084: LD_ADDR_VAR 0 3
28088: PUSH
28089: LD_VAR 0 2
28093: PPUSH
28094: LD_INT 81
28096: PUSH
28097: LD_VAR 0 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PPUSH
28106: CALL_OW 70
28110: ST_TO_ADDR
// end ;
28111: LD_VAR 0 3
28115: RET
// export function IsExtension ( b ) ; begin
28116: LD_INT 0
28118: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28119: LD_ADDR_VAR 0 2
28123: PUSH
28124: LD_VAR 0 1
28128: PUSH
28129: LD_INT 23
28131: PUSH
28132: LD_INT 20
28134: PUSH
28135: LD_INT 22
28137: PUSH
28138: LD_INT 17
28140: PUSH
28141: LD_INT 24
28143: PUSH
28144: LD_INT 21
28146: PUSH
28147: LD_INT 19
28149: PUSH
28150: LD_INT 16
28152: PUSH
28153: LD_INT 25
28155: PUSH
28156: LD_INT 18
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: IN
28171: ST_TO_ADDR
// end ;
28172: LD_VAR 0 2
28176: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28177: LD_INT 0
28179: PPUSH
28180: PPUSH
28181: PPUSH
// result := [ ] ;
28182: LD_ADDR_VAR 0 4
28186: PUSH
28187: EMPTY
28188: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28189: LD_ADDR_VAR 0 5
28193: PUSH
28194: LD_VAR 0 2
28198: PPUSH
28199: LD_INT 21
28201: PUSH
28202: LD_INT 3
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL_OW 70
28213: ST_TO_ADDR
// if not tmp then
28214: LD_VAR 0 5
28218: NOT
28219: IFFALSE 28223
// exit ;
28221: GO 28287
// if checkLink then
28223: LD_VAR 0 3
28227: IFFALSE 28277
// begin for i in tmp do
28229: LD_ADDR_VAR 0 6
28233: PUSH
28234: LD_VAR 0 5
28238: PUSH
28239: FOR_IN
28240: IFFALSE 28275
// if GetBase ( i ) <> base then
28242: LD_VAR 0 6
28246: PPUSH
28247: CALL_OW 274
28251: PUSH
28252: LD_VAR 0 1
28256: NONEQUAL
28257: IFFALSE 28273
// ComLinkToBase ( base , i ) ;
28259: LD_VAR 0 1
28263: PPUSH
28264: LD_VAR 0 6
28268: PPUSH
28269: CALL_OW 169
28273: GO 28239
28275: POP
28276: POP
// end ; result := tmp ;
28277: LD_ADDR_VAR 0 4
28281: PUSH
28282: LD_VAR 0 5
28286: ST_TO_ADDR
// end ;
28287: LD_VAR 0 4
28291: RET
// export function ComComplete ( units , b ) ; var i ; begin
28292: LD_INT 0
28294: PPUSH
28295: PPUSH
// if not units then
28296: LD_VAR 0 1
28300: NOT
28301: IFFALSE 28305
// exit ;
28303: GO 28395
// for i in units do
28305: LD_ADDR_VAR 0 4
28309: PUSH
28310: LD_VAR 0 1
28314: PUSH
28315: FOR_IN
28316: IFFALSE 28393
// if BuildingStatus ( b ) = bs_build then
28318: LD_VAR 0 2
28322: PPUSH
28323: CALL_OW 461
28327: PUSH
28328: LD_INT 1
28330: EQUAL
28331: IFFALSE 28391
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28333: LD_VAR 0 4
28337: PPUSH
28338: LD_STRING h
28340: PUSH
28341: LD_VAR 0 2
28345: PPUSH
28346: CALL_OW 250
28350: PUSH
28351: LD_VAR 0 2
28355: PPUSH
28356: CALL_OW 251
28360: PUSH
28361: LD_VAR 0 2
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: LD_INT 0
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: PPUSH
28387: CALL_OW 446
28391: GO 28315
28393: POP
28394: POP
// end ;
28395: LD_VAR 0 3
28399: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28400: LD_INT 0
28402: PPUSH
28403: PPUSH
28404: PPUSH
28405: PPUSH
28406: PPUSH
28407: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28408: LD_VAR 0 1
28412: NOT
28413: IFTRUE 28430
28415: PUSH
28416: LD_VAR 0 1
28420: PPUSH
28421: CALL_OW 263
28425: PUSH
28426: LD_INT 2
28428: NONEQUAL
28429: OR
28430: IFFALSE 28434
// exit ;
28432: GO 28750
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28434: LD_ADDR_VAR 0 6
28438: PUSH
28439: LD_INT 22
28441: PUSH
28442: LD_VAR 0 1
28446: PPUSH
28447: CALL_OW 255
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: LD_INT 30
28461: PUSH
28462: LD_INT 36
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 34
28471: PUSH
28472: LD_INT 31
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 69
28492: ST_TO_ADDR
// if not tmp then
28493: LD_VAR 0 6
28497: NOT
28498: IFFALSE 28502
// exit ;
28500: GO 28750
// result := [ ] ;
28502: LD_ADDR_VAR 0 2
28506: PUSH
28507: EMPTY
28508: ST_TO_ADDR
// for i in tmp do
28509: LD_ADDR_VAR 0 3
28513: PUSH
28514: LD_VAR 0 6
28518: PUSH
28519: FOR_IN
28520: IFFALSE 28591
// begin t := UnitsInside ( i ) ;
28522: LD_ADDR_VAR 0 4
28526: PUSH
28527: LD_VAR 0 3
28531: PPUSH
28532: CALL_OW 313
28536: ST_TO_ADDR
// if t then
28537: LD_VAR 0 4
28541: IFFALSE 28589
// for j in t do
28543: LD_ADDR_VAR 0 7
28547: PUSH
28548: LD_VAR 0 4
28552: PUSH
28553: FOR_IN
28554: IFFALSE 28587
// result := Replace ( result , result + 1 , j ) ;
28556: LD_ADDR_VAR 0 2
28560: PUSH
28561: LD_VAR 0 2
28565: PPUSH
28566: LD_VAR 0 2
28570: PUSH
28571: LD_INT 1
28573: PLUS
28574: PPUSH
28575: LD_VAR 0 7
28579: PPUSH
28580: CALL_OW 1
28584: ST_TO_ADDR
28585: GO 28553
28587: POP
28588: POP
// end ;
28589: GO 28519
28591: POP
28592: POP
// if not result then
28593: LD_VAR 0 2
28597: NOT
28598: IFFALSE 28602
// exit ;
28600: GO 28750
// mech := result [ 1 ] ;
28602: LD_ADDR_VAR 0 5
28606: PUSH
28607: LD_VAR 0 2
28611: PUSH
28612: LD_INT 1
28614: ARRAY
28615: ST_TO_ADDR
// if result > 1 then
28616: LD_VAR 0 2
28620: PUSH
28621: LD_INT 1
28623: GREATER
28624: IFFALSE 28736
// begin for i = 2 to result do
28626: LD_ADDR_VAR 0 3
28630: PUSH
28631: DOUBLE
28632: LD_INT 2
28634: DEC
28635: ST_TO_ADDR
28636: LD_VAR 0 2
28640: PUSH
28641: FOR_TO
28642: IFFALSE 28734
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28644: LD_ADDR_VAR 0 4
28648: PUSH
28649: LD_VAR 0 2
28653: PUSH
28654: LD_VAR 0 3
28658: ARRAY
28659: PPUSH
28660: LD_INT 3
28662: PPUSH
28663: CALL_OW 259
28667: PUSH
28668: LD_VAR 0 2
28672: PUSH
28673: LD_VAR 0 3
28677: ARRAY
28678: PPUSH
28679: CALL_OW 432
28683: MINUS
28684: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28685: LD_VAR 0 4
28689: PUSH
28690: LD_VAR 0 5
28694: PPUSH
28695: LD_INT 3
28697: PPUSH
28698: CALL_OW 259
28702: PUSH
28703: LD_VAR 0 5
28707: PPUSH
28708: CALL_OW 432
28712: MINUS
28713: GREATEREQUAL
28714: IFFALSE 28732
// mech := result [ i ] ;
28716: LD_ADDR_VAR 0 5
28720: PUSH
28721: LD_VAR 0 2
28725: PUSH
28726: LD_VAR 0 3
28730: ARRAY
28731: ST_TO_ADDR
// end ;
28732: GO 28641
28734: POP
28735: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28736: LD_VAR 0 1
28740: PPUSH
28741: LD_VAR 0 5
28745: PPUSH
28746: CALL_OW 135
// end ;
28750: LD_VAR 0 2
28754: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28755: LD_INT 0
28757: PPUSH
28758: PPUSH
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
28767: PPUSH
28768: PPUSH
28769: PPUSH
// result := [ ] ;
28770: LD_ADDR_VAR 0 7
28774: PUSH
28775: EMPTY
28776: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28777: LD_VAR 0 1
28781: PPUSH
28782: CALL_OW 266
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: IN
28797: NOT
28798: IFFALSE 28802
// exit ;
28800: GO 30442
// if name then
28802: LD_VAR 0 3
28806: IFFALSE 28822
// SetBName ( base_dep , name ) ;
28808: LD_VAR 0 1
28812: PPUSH
28813: LD_VAR 0 3
28817: PPUSH
28818: CALL_OW 500
// base := GetBase ( base_dep ) ;
28822: LD_ADDR_VAR 0 15
28826: PUSH
28827: LD_VAR 0 1
28831: PPUSH
28832: CALL_OW 274
28836: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28837: LD_ADDR_VAR 0 16
28841: PUSH
28842: LD_VAR 0 1
28846: PPUSH
28847: CALL_OW 255
28851: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28852: LD_ADDR_VAR 0 17
28856: PUSH
28857: LD_VAR 0 1
28861: PPUSH
28862: CALL_OW 248
28866: ST_TO_ADDR
// if sources then
28867: LD_VAR 0 5
28871: IFFALSE 28918
// for i = 1 to 3 do
28873: LD_ADDR_VAR 0 8
28877: PUSH
28878: DOUBLE
28879: LD_INT 1
28881: DEC
28882: ST_TO_ADDR
28883: LD_INT 3
28885: PUSH
28886: FOR_TO
28887: IFFALSE 28916
// AddResourceType ( base , i , sources [ i ] ) ;
28889: LD_VAR 0 15
28893: PPUSH
28894: LD_VAR 0 8
28898: PPUSH
28899: LD_VAR 0 5
28903: PUSH
28904: LD_VAR 0 8
28908: ARRAY
28909: PPUSH
28910: CALL_OW 276
28914: GO 28886
28916: POP
28917: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28918: LD_ADDR_VAR 0 18
28922: PUSH
28923: LD_VAR 0 15
28927: PPUSH
28928: LD_VAR 0 2
28932: PPUSH
28933: LD_INT 1
28935: PPUSH
28936: CALL 28177 0 3
28940: ST_TO_ADDR
// InitHc ;
28941: CALL_OW 19
// InitUc ;
28945: CALL_OW 18
// uc_side := side ;
28949: LD_ADDR_OWVAR 20
28953: PUSH
28954: LD_VAR 0 16
28958: ST_TO_ADDR
// uc_nation := nation ;
28959: LD_ADDR_OWVAR 21
28963: PUSH
28964: LD_VAR 0 17
28968: ST_TO_ADDR
// if buildings then
28969: LD_VAR 0 18
28973: IFFALSE 30301
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28975: LD_ADDR_VAR 0 19
28979: PUSH
28980: LD_VAR 0 18
28984: PPUSH
28985: LD_INT 2
28987: PUSH
28988: LD_INT 30
28990: PUSH
28991: LD_INT 29
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 30
29000: PUSH
29001: LD_INT 30
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: LIST
29012: PPUSH
29013: CALL_OW 72
29017: ST_TO_ADDR
// if tmp then
29018: LD_VAR 0 19
29022: IFFALSE 29070
// for i in tmp do
29024: LD_ADDR_VAR 0 8
29028: PUSH
29029: LD_VAR 0 19
29033: PUSH
29034: FOR_IN
29035: IFFALSE 29068
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29037: LD_VAR 0 8
29041: PPUSH
29042: CALL_OW 250
29046: PPUSH
29047: LD_VAR 0 8
29051: PPUSH
29052: CALL_OW 251
29056: PPUSH
29057: LD_VAR 0 16
29061: PPUSH
29062: CALL_OW 441
29066: GO 29034
29068: POP
29069: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29070: LD_VAR 0 18
29074: PPUSH
29075: LD_INT 2
29077: PUSH
29078: LD_INT 30
29080: PUSH
29081: LD_INT 32
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 30
29090: PUSH
29091: LD_INT 33
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: PPUSH
29103: CALL_OW 72
29107: IFFALSE 29195
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29109: LD_ADDR_VAR 0 8
29113: PUSH
29114: LD_VAR 0 18
29118: PPUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 30
29124: PUSH
29125: LD_INT 32
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 30
29134: PUSH
29135: LD_INT 33
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: LIST
29146: PPUSH
29147: CALL_OW 72
29151: PUSH
29152: FOR_IN
29153: IFFALSE 29193
// begin if not GetBWeapon ( i ) then
29155: LD_VAR 0 8
29159: PPUSH
29160: CALL_OW 269
29164: NOT
29165: IFFALSE 29191
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29167: LD_VAR 0 8
29171: PPUSH
29172: LD_VAR 0 8
29176: PPUSH
29177: LD_VAR 0 2
29181: PPUSH
29182: CALL 30447 0 2
29186: PPUSH
29187: CALL_OW 431
// end ;
29191: GO 29152
29193: POP
29194: POP
// end ; for i = 1 to personel do
29195: LD_ADDR_VAR 0 8
29199: PUSH
29200: DOUBLE
29201: LD_INT 1
29203: DEC
29204: ST_TO_ADDR
29205: LD_VAR 0 6
29209: PUSH
29210: FOR_TO
29211: IFFALSE 30281
// begin if i > 4 then
29213: LD_VAR 0 8
29217: PUSH
29218: LD_INT 4
29220: GREATER
29221: IFFALSE 29225
// break ;
29223: GO 30281
// case i of 1 :
29225: LD_VAR 0 8
29229: PUSH
29230: LD_INT 1
29232: DOUBLE
29233: EQUAL
29234: IFTRUE 29238
29236: GO 29318
29238: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29239: LD_ADDR_VAR 0 12
29243: PUSH
29244: LD_VAR 0 18
29248: PPUSH
29249: LD_INT 22
29251: PUSH
29252: LD_VAR 0 16
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 58
29263: PUSH
29264: EMPTY
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 30
29272: PUSH
29273: LD_INT 32
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 30
29282: PUSH
29283: LD_INT 4
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 30
29292: PUSH
29293: LD_INT 5
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: LIST
29310: PPUSH
29311: CALL_OW 72
29315: ST_TO_ADDR
29316: GO 29540
29318: LD_INT 2
29320: DOUBLE
29321: EQUAL
29322: IFTRUE 29326
29324: GO 29388
29326: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29327: LD_ADDR_VAR 0 12
29331: PUSH
29332: LD_VAR 0 18
29336: PPUSH
29337: LD_INT 22
29339: PUSH
29340: LD_VAR 0 16
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: LD_INT 30
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 30
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PPUSH
29381: CALL_OW 72
29385: ST_TO_ADDR
29386: GO 29540
29388: LD_INT 3
29390: DOUBLE
29391: EQUAL
29392: IFTRUE 29396
29394: GO 29458
29396: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29397: LD_ADDR_VAR 0 12
29401: PUSH
29402: LD_VAR 0 18
29406: PPUSH
29407: LD_INT 22
29409: PUSH
29410: LD_VAR 0 16
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 30
29424: PUSH
29425: LD_INT 2
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 30
29434: PUSH
29435: LD_INT 3
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PPUSH
29451: CALL_OW 72
29455: ST_TO_ADDR
29456: GO 29540
29458: LD_INT 4
29460: DOUBLE
29461: EQUAL
29462: IFTRUE 29466
29464: GO 29539
29466: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29467: LD_ADDR_VAR 0 12
29471: PUSH
29472: LD_VAR 0 18
29476: PPUSH
29477: LD_INT 22
29479: PUSH
29480: LD_VAR 0 16
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: LD_INT 30
29494: PUSH
29495: LD_INT 6
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 30
29504: PUSH
29505: LD_INT 7
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 30
29514: PUSH
29515: LD_INT 8
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PPUSH
29532: CALL_OW 72
29536: ST_TO_ADDR
29537: GO 29540
29539: POP
// if i = 1 then
29540: LD_VAR 0 8
29544: PUSH
29545: LD_INT 1
29547: EQUAL
29548: IFFALSE 29659
// begin tmp := [ ] ;
29550: LD_ADDR_VAR 0 19
29554: PUSH
29555: EMPTY
29556: ST_TO_ADDR
// for j in f do
29557: LD_ADDR_VAR 0 9
29561: PUSH
29562: LD_VAR 0 12
29566: PUSH
29567: FOR_IN
29568: IFFALSE 29641
// if GetBType ( j ) = b_bunker then
29570: LD_VAR 0 9
29574: PPUSH
29575: CALL_OW 266
29579: PUSH
29580: LD_INT 32
29582: EQUAL
29583: IFFALSE 29610
// tmp := Insert ( tmp , 1 , j ) else
29585: LD_ADDR_VAR 0 19
29589: PUSH
29590: LD_VAR 0 19
29594: PPUSH
29595: LD_INT 1
29597: PPUSH
29598: LD_VAR 0 9
29602: PPUSH
29603: CALL_OW 2
29607: ST_TO_ADDR
29608: GO 29639
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29610: LD_ADDR_VAR 0 19
29614: PUSH
29615: LD_VAR 0 19
29619: PPUSH
29620: LD_VAR 0 19
29624: PUSH
29625: LD_INT 1
29627: PLUS
29628: PPUSH
29629: LD_VAR 0 9
29633: PPUSH
29634: CALL_OW 2
29638: ST_TO_ADDR
29639: GO 29567
29641: POP
29642: POP
// if tmp then
29643: LD_VAR 0 19
29647: IFFALSE 29659
// f := tmp ;
29649: LD_ADDR_VAR 0 12
29653: PUSH
29654: LD_VAR 0 19
29658: ST_TO_ADDR
// end ; x := personel [ i ] ;
29659: LD_ADDR_VAR 0 13
29663: PUSH
29664: LD_VAR 0 6
29668: PUSH
29669: LD_VAR 0 8
29673: ARRAY
29674: ST_TO_ADDR
// if x = - 1 then
29675: LD_VAR 0 13
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: EQUAL
29684: IFFALSE 29895
// begin for j in f do
29686: LD_ADDR_VAR 0 9
29690: PUSH
29691: LD_VAR 0 12
29695: PUSH
29696: FOR_IN
29697: IFFALSE 29891
// repeat InitHc ;
29699: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29703: LD_VAR 0 9
29707: PPUSH
29708: CALL_OW 266
29712: PUSH
29713: LD_INT 5
29715: EQUAL
29716: IFFALSE 29786
// begin if UnitsInside ( j ) < 3 then
29718: LD_VAR 0 9
29722: PPUSH
29723: CALL_OW 313
29727: PUSH
29728: LD_INT 3
29730: LESS
29731: IFFALSE 29767
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29733: LD_INT 0
29735: PPUSH
29736: LD_INT 5
29738: PUSH
29739: LD_INT 8
29741: PUSH
29742: LD_INT 9
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: PUSH
29750: LD_VAR 0 17
29754: ARRAY
29755: PPUSH
29756: LD_VAR 0 4
29760: PPUSH
29761: CALL_OW 380
29765: GO 29784
// PrepareHuman ( false , i , skill ) ;
29767: LD_INT 0
29769: PPUSH
29770: LD_VAR 0 8
29774: PPUSH
29775: LD_VAR 0 4
29779: PPUSH
29780: CALL_OW 380
// end else
29784: GO 29803
// PrepareHuman ( false , i , skill ) ;
29786: LD_INT 0
29788: PPUSH
29789: LD_VAR 0 8
29793: PPUSH
29794: LD_VAR 0 4
29798: PPUSH
29799: CALL_OW 380
// un := CreateHuman ;
29803: LD_ADDR_VAR 0 14
29807: PUSH
29808: CALL_OW 44
29812: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29813: LD_ADDR_VAR 0 7
29817: PUSH
29818: LD_VAR 0 7
29822: PPUSH
29823: LD_INT 1
29825: PPUSH
29826: LD_VAR 0 14
29830: PPUSH
29831: CALL_OW 2
29835: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29836: LD_VAR 0 14
29840: PPUSH
29841: LD_VAR 0 9
29845: PPUSH
29846: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29850: LD_VAR 0 9
29854: PPUSH
29855: CALL_OW 313
29859: PUSH
29860: LD_INT 6
29862: EQUAL
29863: IFTRUE 29887
29865: PUSH
29866: LD_VAR 0 9
29870: PPUSH
29871: CALL_OW 266
29875: PUSH
29876: LD_INT 32
29878: PUSH
29879: LD_INT 31
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: IN
29886: OR
29887: IFFALSE 29699
29889: GO 29696
29891: POP
29892: POP
// end else
29893: GO 30279
// for j = 1 to x do
29895: LD_ADDR_VAR 0 9
29899: PUSH
29900: DOUBLE
29901: LD_INT 1
29903: DEC
29904: ST_TO_ADDR
29905: LD_VAR 0 13
29909: PUSH
29910: FOR_TO
29911: IFFALSE 30277
// begin InitHc ;
29913: CALL_OW 19
// if not f then
29917: LD_VAR 0 12
29921: NOT
29922: IFFALSE 30011
// begin PrepareHuman ( false , i , skill ) ;
29924: LD_INT 0
29926: PPUSH
29927: LD_VAR 0 8
29931: PPUSH
29932: LD_VAR 0 4
29936: PPUSH
29937: CALL_OW 380
// un := CreateHuman ;
29941: LD_ADDR_VAR 0 14
29945: PUSH
29946: CALL_OW 44
29950: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29951: LD_ADDR_VAR 0 7
29955: PUSH
29956: LD_VAR 0 7
29960: PPUSH
29961: LD_INT 1
29963: PPUSH
29964: LD_VAR 0 14
29968: PPUSH
29969: CALL_OW 2
29973: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29974: LD_VAR 0 14
29978: PPUSH
29979: LD_VAR 0 1
29983: PPUSH
29984: CALL_OW 250
29988: PPUSH
29989: LD_VAR 0 1
29993: PPUSH
29994: CALL_OW 251
29998: PPUSH
29999: LD_INT 10
30001: PPUSH
30002: LD_INT 0
30004: PPUSH
30005: CALL_OW 50
// continue ;
30009: GO 29910
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30011: LD_VAR 0 12
30015: PUSH
30016: LD_INT 1
30018: ARRAY
30019: PPUSH
30020: CALL_OW 313
30024: IFFALSE 30052
30026: PUSH
30027: LD_VAR 0 12
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: PPUSH
30036: CALL_OW 266
30040: PUSH
30041: LD_INT 32
30043: PUSH
30044: LD_INT 31
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: IN
30051: AND
30052: IFTRUE 30073
30054: PUSH
30055: LD_VAR 0 12
30059: PUSH
30060: LD_INT 1
30062: ARRAY
30063: PPUSH
30064: CALL_OW 313
30068: PUSH
30069: LD_INT 6
30071: EQUAL
30072: OR
30073: IFFALSE 30093
// f := Delete ( f , 1 ) ;
30075: LD_ADDR_VAR 0 12
30079: PUSH
30080: LD_VAR 0 12
30084: PPUSH
30085: LD_INT 1
30087: PPUSH
30088: CALL_OW 3
30092: ST_TO_ADDR
// if not f then
30093: LD_VAR 0 12
30097: NOT
30098: IFFALSE 30116
// begin x := x + 2 ;
30100: LD_ADDR_VAR 0 13
30104: PUSH
30105: LD_VAR 0 13
30109: PUSH
30110: LD_INT 2
30112: PLUS
30113: ST_TO_ADDR
// continue ;
30114: GO 29910
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30116: LD_VAR 0 12
30120: PUSH
30121: LD_INT 1
30123: ARRAY
30124: PPUSH
30125: CALL_OW 266
30129: PUSH
30130: LD_INT 5
30132: EQUAL
30133: IFFALSE 30207
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30135: LD_VAR 0 12
30139: PUSH
30140: LD_INT 1
30142: ARRAY
30143: PPUSH
30144: CALL_OW 313
30148: PUSH
30149: LD_INT 3
30151: LESS
30152: IFFALSE 30188
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30154: LD_INT 0
30156: PPUSH
30157: LD_INT 5
30159: PUSH
30160: LD_INT 8
30162: PUSH
30163: LD_INT 9
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: LIST
30170: PUSH
30171: LD_VAR 0 17
30175: ARRAY
30176: PPUSH
30177: LD_VAR 0 4
30181: PPUSH
30182: CALL_OW 380
30186: GO 30205
// PrepareHuman ( false , i , skill ) ;
30188: LD_INT 0
30190: PPUSH
30191: LD_VAR 0 8
30195: PPUSH
30196: LD_VAR 0 4
30200: PPUSH
30201: CALL_OW 380
// end else
30205: GO 30224
// PrepareHuman ( false , i , skill ) ;
30207: LD_INT 0
30209: PPUSH
30210: LD_VAR 0 8
30214: PPUSH
30215: LD_VAR 0 4
30219: PPUSH
30220: CALL_OW 380
// un := CreateHuman ;
30224: LD_ADDR_VAR 0 14
30228: PUSH
30229: CALL_OW 44
30233: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30234: LD_ADDR_VAR 0 7
30238: PUSH
30239: LD_VAR 0 7
30243: PPUSH
30244: LD_INT 1
30246: PPUSH
30247: LD_VAR 0 14
30251: PPUSH
30252: CALL_OW 2
30256: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30257: LD_VAR 0 14
30261: PPUSH
30262: LD_VAR 0 12
30266: PUSH
30267: LD_INT 1
30269: ARRAY
30270: PPUSH
30271: CALL_OW 52
// end ;
30275: GO 29910
30277: POP
30278: POP
// end ;
30279: GO 29210
30281: POP
30282: POP
// result := result ^ buildings ;
30283: LD_ADDR_VAR 0 7
30287: PUSH
30288: LD_VAR 0 7
30292: PUSH
30293: LD_VAR 0 18
30297: ADD
30298: ST_TO_ADDR
// end else
30299: GO 30442
// begin for i = 1 to personel do
30301: LD_ADDR_VAR 0 8
30305: PUSH
30306: DOUBLE
30307: LD_INT 1
30309: DEC
30310: ST_TO_ADDR
30311: LD_VAR 0 6
30315: PUSH
30316: FOR_TO
30317: IFFALSE 30440
// begin if i > 4 then
30319: LD_VAR 0 8
30323: PUSH
30324: LD_INT 4
30326: GREATER
30327: IFFALSE 30331
// break ;
30329: GO 30440
// x := personel [ i ] ;
30331: LD_ADDR_VAR 0 13
30335: PUSH
30336: LD_VAR 0 6
30340: PUSH
30341: LD_VAR 0 8
30345: ARRAY
30346: ST_TO_ADDR
// if x = - 1 then
30347: LD_VAR 0 13
30351: PUSH
30352: LD_INT 1
30354: NEG
30355: EQUAL
30356: IFFALSE 30360
// continue ;
30358: GO 30316
// PrepareHuman ( false , i , skill ) ;
30360: LD_INT 0
30362: PPUSH
30363: LD_VAR 0 8
30367: PPUSH
30368: LD_VAR 0 4
30372: PPUSH
30373: CALL_OW 380
// un := CreateHuman ;
30377: LD_ADDR_VAR 0 14
30381: PUSH
30382: CALL_OW 44
30386: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30387: LD_VAR 0 14
30391: PPUSH
30392: LD_VAR 0 1
30396: PPUSH
30397: CALL_OW 250
30401: PPUSH
30402: LD_VAR 0 1
30406: PPUSH
30407: CALL_OW 251
30411: PPUSH
30412: LD_INT 10
30414: PPUSH
30415: LD_INT 0
30417: PPUSH
30418: CALL_OW 50
// result := result ^ un ;
30422: LD_ADDR_VAR 0 7
30426: PUSH
30427: LD_VAR 0 7
30431: PUSH
30432: LD_VAR 0 14
30436: ADD
30437: ST_TO_ADDR
// end ;
30438: GO 30316
30440: POP
30441: POP
// end ; end ;
30442: LD_VAR 0 7
30446: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30447: LD_INT 0
30449: PPUSH
30450: PPUSH
30451: PPUSH
30452: PPUSH
30453: PPUSH
30454: PPUSH
30455: PPUSH
30456: PPUSH
30457: PPUSH
30458: PPUSH
30459: PPUSH
30460: PPUSH
30461: PPUSH
30462: PPUSH
30463: PPUSH
30464: PPUSH
// result := false ;
30465: LD_ADDR_VAR 0 3
30469: PUSH
30470: LD_INT 0
30472: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30473: LD_VAR 0 1
30477: NOT
30478: IFTRUE 30503
30480: PUSH
30481: LD_VAR 0 1
30485: PPUSH
30486: CALL_OW 266
30490: PUSH
30491: LD_INT 32
30493: PUSH
30494: LD_INT 33
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: IN
30501: NOT
30502: OR
30503: IFFALSE 30507
// exit ;
30505: GO 31642
// nat := GetNation ( tower ) ;
30507: LD_ADDR_VAR 0 12
30511: PUSH
30512: LD_VAR 0 1
30516: PPUSH
30517: CALL_OW 248
30521: ST_TO_ADDR
// side := GetSide ( tower ) ;
30522: LD_ADDR_VAR 0 16
30526: PUSH
30527: LD_VAR 0 1
30531: PPUSH
30532: CALL_OW 255
30536: ST_TO_ADDR
// x := GetX ( tower ) ;
30537: LD_ADDR_VAR 0 10
30541: PUSH
30542: LD_VAR 0 1
30546: PPUSH
30547: CALL_OW 250
30551: ST_TO_ADDR
// y := GetY ( tower ) ;
30552: LD_ADDR_VAR 0 11
30556: PUSH
30557: LD_VAR 0 1
30561: PPUSH
30562: CALL_OW 251
30566: ST_TO_ADDR
// if not x or not y then
30567: LD_VAR 0 10
30571: NOT
30572: IFTRUE 30581
30574: PUSH
30575: LD_VAR 0 11
30579: NOT
30580: OR
30581: IFFALSE 30585
// exit ;
30583: GO 31642
// weapon := 0 ;
30585: LD_ADDR_VAR 0 18
30589: PUSH
30590: LD_INT 0
30592: ST_TO_ADDR
// fac_list := [ ] ;
30593: LD_ADDR_VAR 0 17
30597: PUSH
30598: EMPTY
30599: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30600: LD_ADDR_VAR 0 6
30604: PUSH
30605: LD_VAR 0 1
30609: PPUSH
30610: CALL_OW 274
30614: PPUSH
30615: LD_VAR 0 2
30619: PPUSH
30620: LD_INT 0
30622: PPUSH
30623: CALL 28177 0 3
30627: PPUSH
30628: LD_INT 30
30630: PUSH
30631: LD_INT 3
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PPUSH
30638: CALL_OW 72
30642: ST_TO_ADDR
// if not factories then
30643: LD_VAR 0 6
30647: NOT
30648: IFFALSE 30652
// exit ;
30650: GO 31642
// for i in factories do
30652: LD_ADDR_VAR 0 8
30656: PUSH
30657: LD_VAR 0 6
30661: PUSH
30662: FOR_IN
30663: IFFALSE 30688
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30665: LD_ADDR_VAR 0 17
30669: PUSH
30670: LD_VAR 0 17
30674: PUSH
30675: LD_VAR 0 8
30679: PPUSH
30680: CALL_OW 478
30684: UNION
30685: ST_TO_ADDR
30686: GO 30662
30688: POP
30689: POP
// if not fac_list then
30690: LD_VAR 0 17
30694: NOT
30695: IFFALSE 30699
// exit ;
30697: GO 31642
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30699: LD_ADDR_VAR 0 5
30703: PUSH
30704: LD_INT 4
30706: PUSH
30707: LD_INT 5
30709: PUSH
30710: LD_INT 9
30712: PUSH
30713: LD_INT 10
30715: PUSH
30716: LD_INT 6
30718: PUSH
30719: LD_INT 7
30721: PUSH
30722: LD_INT 11
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 27
30736: PUSH
30737: LD_INT 28
30739: PUSH
30740: LD_INT 26
30742: PUSH
30743: LD_INT 30
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 43
30754: PUSH
30755: LD_INT 44
30757: PUSH
30758: LD_INT 46
30760: PUSH
30761: LD_INT 45
30763: PUSH
30764: LD_INT 47
30766: PUSH
30767: LD_INT 49
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: PUSH
30783: LD_VAR 0 12
30787: ARRAY
30788: ST_TO_ADDR
// list := list isect fac_list ;
30789: LD_ADDR_VAR 0 5
30793: PUSH
30794: LD_VAR 0 5
30798: PUSH
30799: LD_VAR 0 17
30803: ISECT
30804: ST_TO_ADDR
// if not list then
30805: LD_VAR 0 5
30809: NOT
30810: IFFALSE 30814
// exit ;
30812: GO 31642
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30814: LD_VAR 0 12
30818: PUSH
30819: LD_INT 3
30821: EQUAL
30822: IFFALSE 30834
30824: PUSH
30825: LD_INT 49
30827: PUSH
30828: LD_VAR 0 5
30832: IN
30833: AND
30834: IFFALSE 30854
30836: PUSH
30837: LD_INT 31
30839: PPUSH
30840: LD_VAR 0 16
30844: PPUSH
30845: CALL_OW 321
30849: PUSH
30850: LD_INT 2
30852: EQUAL
30853: AND
30854: IFFALSE 30914
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30856: LD_INT 22
30858: PUSH
30859: LD_VAR 0 16
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 35
30870: PUSH
30871: LD_INT 49
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 91
30880: PUSH
30881: LD_VAR 0 1
30885: PUSH
30886: LD_INT 10
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: NOT
30904: IFFALSE 30914
// weapon := ru_time_lapser ;
30906: LD_ADDR_VAR 0 18
30910: PUSH
30911: LD_INT 49
30913: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30914: LD_VAR 0 12
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: IN
30929: IFFALSE 30953
30931: PUSH
30932: LD_INT 11
30934: PUSH
30935: LD_VAR 0 5
30939: IN
30940: IFTRUE 30952
30942: PUSH
30943: LD_INT 30
30945: PUSH
30946: LD_VAR 0 5
30950: IN
30951: OR
30952: AND
30953: IFFALSE 30973
30955: PUSH
30956: LD_INT 6
30958: PPUSH
30959: LD_VAR 0 16
30963: PPUSH
30964: CALL_OW 321
30968: PUSH
30969: LD_INT 2
30971: EQUAL
30972: AND
30973: IFFALSE 31140
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30975: LD_INT 22
30977: PUSH
30978: LD_VAR 0 16
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 35
30992: PUSH
30993: LD_INT 11
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 35
31002: PUSH
31003: LD_INT 30
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 91
31017: PUSH
31018: LD_VAR 0 1
31022: PUSH
31023: LD_INT 18
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: PPUSH
31036: CALL_OW 69
31040: NOT
31041: IFFALSE 31117
31043: PUSH
31044: LD_INT 22
31046: PUSH
31047: LD_VAR 0 16
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: LD_INT 30
31061: PUSH
31062: LD_INT 32
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 30
31071: PUSH
31072: LD_INT 33
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 91
31086: PUSH
31087: LD_VAR 0 1
31091: PUSH
31092: LD_INT 12
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: LIST
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: PPUSH
31108: CALL_OW 69
31112: PUSH
31113: LD_INT 2
31115: GREATER
31116: AND
31117: IFFALSE 31140
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31119: LD_ADDR_VAR 0 18
31123: PUSH
31124: LD_INT 11
31126: PUSH
31127: LD_INT 30
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_VAR 0 12
31138: ARRAY
31139: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31140: LD_VAR 0 18
31144: NOT
31145: IFFALSE 31165
31147: PUSH
31148: LD_INT 40
31150: PPUSH
31151: LD_VAR 0 16
31155: PPUSH
31156: CALL_OW 321
31160: PUSH
31161: LD_INT 2
31163: EQUAL
31164: AND
31165: IFFALSE 31201
31167: PUSH
31168: LD_INT 7
31170: PUSH
31171: LD_VAR 0 5
31175: IN
31176: IFTRUE 31188
31178: PUSH
31179: LD_INT 28
31181: PUSH
31182: LD_VAR 0 5
31186: IN
31187: OR
31188: IFTRUE 31200
31190: PUSH
31191: LD_INT 45
31193: PUSH
31194: LD_VAR 0 5
31198: IN
31199: OR
31200: AND
31201: IFFALSE 31455
// begin hex := GetHexInfo ( x , y ) ;
31203: LD_ADDR_VAR 0 4
31207: PUSH
31208: LD_VAR 0 10
31212: PPUSH
31213: LD_VAR 0 11
31217: PPUSH
31218: CALL_OW 546
31222: ST_TO_ADDR
// if hex [ 1 ] then
31223: LD_VAR 0 4
31227: PUSH
31228: LD_INT 1
31230: ARRAY
31231: IFFALSE 31235
// exit ;
31233: GO 31642
// height := hex [ 2 ] ;
31235: LD_ADDR_VAR 0 15
31239: PUSH
31240: LD_VAR 0 4
31244: PUSH
31245: LD_INT 2
31247: ARRAY
31248: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31249: LD_ADDR_VAR 0 14
31253: PUSH
31254: LD_INT 0
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: LD_INT 5
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// for i in tmp do
31272: LD_ADDR_VAR 0 8
31276: PUSH
31277: LD_VAR 0 14
31281: PUSH
31282: FOR_IN
31283: IFFALSE 31453
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31285: LD_ADDR_VAR 0 9
31289: PUSH
31290: LD_VAR 0 10
31294: PPUSH
31295: LD_VAR 0 8
31299: PPUSH
31300: LD_INT 5
31302: PPUSH
31303: CALL_OW 272
31307: PUSH
31308: LD_VAR 0 11
31312: PPUSH
31313: LD_VAR 0 8
31317: PPUSH
31318: LD_INT 5
31320: PPUSH
31321: CALL_OW 273
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31330: LD_VAR 0 9
31334: PUSH
31335: LD_INT 1
31337: ARRAY
31338: PPUSH
31339: LD_VAR 0 9
31343: PUSH
31344: LD_INT 2
31346: ARRAY
31347: PPUSH
31348: CALL_OW 488
31352: IFFALSE 31451
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31354: LD_ADDR_VAR 0 4
31358: PUSH
31359: LD_VAR 0 9
31363: PUSH
31364: LD_INT 1
31366: ARRAY
31367: PPUSH
31368: LD_VAR 0 9
31372: PUSH
31373: LD_INT 2
31375: ARRAY
31376: PPUSH
31377: CALL_OW 546
31381: ST_TO_ADDR
// if hex [ 1 ] then
31382: LD_VAR 0 4
31386: PUSH
31387: LD_INT 1
31389: ARRAY
31390: IFFALSE 31394
// continue ;
31392: GO 31282
// h := hex [ 2 ] ;
31394: LD_ADDR_VAR 0 13
31398: PUSH
31399: LD_VAR 0 4
31403: PUSH
31404: LD_INT 2
31406: ARRAY
31407: ST_TO_ADDR
// if h + 7 < height then
31408: LD_VAR 0 13
31412: PUSH
31413: LD_INT 7
31415: PLUS
31416: PUSH
31417: LD_VAR 0 15
31421: LESS
31422: IFFALSE 31451
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31424: LD_ADDR_VAR 0 18
31428: PUSH
31429: LD_INT 7
31431: PUSH
31432: LD_INT 28
31434: PUSH
31435: LD_INT 45
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: PUSH
31443: LD_VAR 0 12
31447: ARRAY
31448: ST_TO_ADDR
// break ;
31449: GO 31453
// end ; end ; end ;
31451: GO 31282
31453: POP
31454: POP
// end ; if not weapon then
31455: LD_VAR 0 18
31459: NOT
31460: IFFALSE 31520
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31462: LD_ADDR_VAR 0 5
31466: PUSH
31467: LD_VAR 0 5
31471: PUSH
31472: LD_INT 11
31474: PUSH
31475: LD_INT 30
31477: PUSH
31478: LD_INT 49
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: DIFF
31486: ST_TO_ADDR
// if not list then
31487: LD_VAR 0 5
31491: NOT
31492: IFFALSE 31496
// exit ;
31494: GO 31642
// weapon := list [ rand ( 1 , list ) ] ;
31496: LD_ADDR_VAR 0 18
31500: PUSH
31501: LD_VAR 0 5
31505: PUSH
31506: LD_INT 1
31508: PPUSH
31509: LD_VAR 0 5
31513: PPUSH
31514: CALL_OW 12
31518: ARRAY
31519: ST_TO_ADDR
// end ; if weapon then
31520: LD_VAR 0 18
31524: IFFALSE 31642
// begin tmp := CostOfWeapon ( weapon ) ;
31526: LD_ADDR_VAR 0 14
31530: PUSH
31531: LD_VAR 0 18
31535: PPUSH
31536: CALL_OW 451
31540: ST_TO_ADDR
// j := GetBase ( tower ) ;
31541: LD_ADDR_VAR 0 9
31545: PUSH
31546: LD_VAR 0 1
31550: PPUSH
31551: CALL_OW 274
31555: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31556: LD_VAR 0 9
31560: PPUSH
31561: LD_INT 1
31563: PPUSH
31564: CALL_OW 275
31568: PUSH
31569: LD_VAR 0 14
31573: PUSH
31574: LD_INT 1
31576: ARRAY
31577: GREATEREQUAL
31578: IFFALSE 31604
31580: PUSH
31581: LD_VAR 0 9
31585: PPUSH
31586: LD_INT 2
31588: PPUSH
31589: CALL_OW 275
31593: PUSH
31594: LD_VAR 0 14
31598: PUSH
31599: LD_INT 2
31601: ARRAY
31602: GREATEREQUAL
31603: AND
31604: IFFALSE 31630
31606: PUSH
31607: LD_VAR 0 9
31611: PPUSH
31612: LD_INT 3
31614: PPUSH
31615: CALL_OW 275
31619: PUSH
31620: LD_VAR 0 14
31624: PUSH
31625: LD_INT 3
31627: ARRAY
31628: GREATEREQUAL
31629: AND
31630: IFFALSE 31642
// result := weapon ;
31632: LD_ADDR_VAR 0 3
31636: PUSH
31637: LD_VAR 0 18
31641: ST_TO_ADDR
// end ; end ;
31642: LD_VAR 0 3
31646: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31647: LD_INT 0
31649: PPUSH
31650: PPUSH
// result := true ;
31651: LD_ADDR_VAR 0 3
31655: PUSH
31656: LD_INT 1
31658: ST_TO_ADDR
// if array1 = array2 then
31659: LD_VAR 0 1
31663: PUSH
31664: LD_VAR 0 2
31668: EQUAL
31669: IFFALSE 31729
// begin for i = 1 to array1 do
31671: LD_ADDR_VAR 0 4
31675: PUSH
31676: DOUBLE
31677: LD_INT 1
31679: DEC
31680: ST_TO_ADDR
31681: LD_VAR 0 1
31685: PUSH
31686: FOR_TO
31687: IFFALSE 31725
// if array1 [ i ] <> array2 [ i ] then
31689: LD_VAR 0 1
31693: PUSH
31694: LD_VAR 0 4
31698: ARRAY
31699: PUSH
31700: LD_VAR 0 2
31704: PUSH
31705: LD_VAR 0 4
31709: ARRAY
31710: NONEQUAL
31711: IFFALSE 31723
// begin result := false ;
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: LD_INT 0
31720: ST_TO_ADDR
// break ;
31721: GO 31725
// end ;
31723: GO 31686
31725: POP
31726: POP
// end else
31727: GO 31737
// result := false ;
31729: LD_ADDR_VAR 0 3
31733: PUSH
31734: LD_INT 0
31736: ST_TO_ADDR
// end ;
31737: LD_VAR 0 3
31741: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31742: LD_INT 0
31744: PPUSH
31745: PPUSH
// if not array1 or not array2 then
31746: LD_VAR 0 1
31750: NOT
31751: IFTRUE 31760
31753: PUSH
31754: LD_VAR 0 2
31758: NOT
31759: OR
31760: IFFALSE 31764
// exit ;
31762: GO 31828
// result := true ;
31764: LD_ADDR_VAR 0 3
31768: PUSH
31769: LD_INT 1
31771: ST_TO_ADDR
// for i = 1 to array1 do
31772: LD_ADDR_VAR 0 4
31776: PUSH
31777: DOUBLE
31778: LD_INT 1
31780: DEC
31781: ST_TO_ADDR
31782: LD_VAR 0 1
31786: PUSH
31787: FOR_TO
31788: IFFALSE 31826
// if array1 [ i ] <> array2 [ i ] then
31790: LD_VAR 0 1
31794: PUSH
31795: LD_VAR 0 4
31799: ARRAY
31800: PUSH
31801: LD_VAR 0 2
31805: PUSH
31806: LD_VAR 0 4
31810: ARRAY
31811: NONEQUAL
31812: IFFALSE 31824
// begin result := false ;
31814: LD_ADDR_VAR 0 3
31818: PUSH
31819: LD_INT 0
31821: ST_TO_ADDR
// break ;
31822: GO 31826
// end ;
31824: GO 31787
31826: POP
31827: POP
// end ;
31828: LD_VAR 0 3
31832: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31833: LD_INT 0
31835: PPUSH
31836: PPUSH
31837: PPUSH
// pom := GetBase ( fac ) ;
31838: LD_ADDR_VAR 0 5
31842: PUSH
31843: LD_VAR 0 1
31847: PPUSH
31848: CALL_OW 274
31852: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31853: LD_ADDR_VAR 0 4
31857: PUSH
31858: LD_VAR 0 2
31862: PUSH
31863: LD_INT 1
31865: ARRAY
31866: PPUSH
31867: LD_VAR 0 2
31871: PUSH
31872: LD_INT 2
31874: ARRAY
31875: PPUSH
31876: LD_VAR 0 2
31880: PUSH
31881: LD_INT 3
31883: ARRAY
31884: PPUSH
31885: LD_VAR 0 2
31889: PUSH
31890: LD_INT 4
31892: ARRAY
31893: PPUSH
31894: CALL_OW 449
31898: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31899: LD_ADDR_VAR 0 3
31903: PUSH
31904: LD_VAR 0 5
31908: PPUSH
31909: LD_INT 1
31911: PPUSH
31912: CALL_OW 275
31916: PUSH
31917: LD_VAR 0 4
31921: PUSH
31922: LD_INT 1
31924: ARRAY
31925: GREATEREQUAL
31926: IFFALSE 31952
31928: PUSH
31929: LD_VAR 0 5
31933: PPUSH
31934: LD_INT 2
31936: PPUSH
31937: CALL_OW 275
31941: PUSH
31942: LD_VAR 0 4
31946: PUSH
31947: LD_INT 2
31949: ARRAY
31950: GREATEREQUAL
31951: AND
31952: IFFALSE 31978
31954: PUSH
31955: LD_VAR 0 5
31959: PPUSH
31960: LD_INT 3
31962: PPUSH
31963: CALL_OW 275
31967: PUSH
31968: LD_VAR 0 4
31972: PUSH
31973: LD_INT 3
31975: ARRAY
31976: GREATEREQUAL
31977: AND
31978: ST_TO_ADDR
// end ;
31979: LD_VAR 0 3
31983: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31984: LD_INT 0
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
// pom := GetBase ( building ) ;
31990: LD_ADDR_VAR 0 3
31994: PUSH
31995: LD_VAR 0 1
31999: PPUSH
32000: CALL_OW 274
32004: ST_TO_ADDR
// if not pom then
32005: LD_VAR 0 3
32009: NOT
32010: IFFALSE 32014
// exit ;
32012: GO 32188
// btype := GetBType ( building ) ;
32014: LD_ADDR_VAR 0 5
32018: PUSH
32019: LD_VAR 0 1
32023: PPUSH
32024: CALL_OW 266
32028: ST_TO_ADDR
// if btype = b_armoury then
32029: LD_VAR 0 5
32033: PUSH
32034: LD_INT 4
32036: EQUAL
32037: IFFALSE 32047
// btype := b_barracks ;
32039: LD_ADDR_VAR 0 5
32043: PUSH
32044: LD_INT 5
32046: ST_TO_ADDR
// if btype = b_depot then
32047: LD_VAR 0 5
32051: PUSH
32052: LD_INT 0
32054: EQUAL
32055: IFFALSE 32065
// btype := b_warehouse ;
32057: LD_ADDR_VAR 0 5
32061: PUSH
32062: LD_INT 1
32064: ST_TO_ADDR
// if btype = b_workshop then
32065: LD_VAR 0 5
32069: PUSH
32070: LD_INT 2
32072: EQUAL
32073: IFFALSE 32083
// btype := b_factory ;
32075: LD_ADDR_VAR 0 5
32079: PUSH
32080: LD_INT 3
32082: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32083: LD_ADDR_VAR 0 4
32087: PUSH
32088: LD_VAR 0 5
32092: PPUSH
32093: LD_VAR 0 1
32097: PPUSH
32098: CALL_OW 248
32102: PPUSH
32103: CALL_OW 450
32107: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32108: LD_ADDR_VAR 0 2
32112: PUSH
32113: LD_VAR 0 3
32117: PPUSH
32118: LD_INT 1
32120: PPUSH
32121: CALL_OW 275
32125: PUSH
32126: LD_VAR 0 4
32130: PUSH
32131: LD_INT 1
32133: ARRAY
32134: GREATEREQUAL
32135: IFFALSE 32161
32137: PUSH
32138: LD_VAR 0 3
32142: PPUSH
32143: LD_INT 2
32145: PPUSH
32146: CALL_OW 275
32150: PUSH
32151: LD_VAR 0 4
32155: PUSH
32156: LD_INT 2
32158: ARRAY
32159: GREATEREQUAL
32160: AND
32161: IFFALSE 32187
32163: PUSH
32164: LD_VAR 0 3
32168: PPUSH
32169: LD_INT 3
32171: PPUSH
32172: CALL_OW 275
32176: PUSH
32177: LD_VAR 0 4
32181: PUSH
32182: LD_INT 3
32184: ARRAY
32185: GREATEREQUAL
32186: AND
32187: ST_TO_ADDR
// end ;
32188: LD_VAR 0 2
32192: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32193: LD_INT 0
32195: PPUSH
32196: PPUSH
32197: PPUSH
// pom := GetBase ( building ) ;
32198: LD_ADDR_VAR 0 4
32202: PUSH
32203: LD_VAR 0 1
32207: PPUSH
32208: CALL_OW 274
32212: ST_TO_ADDR
// if not pom then
32213: LD_VAR 0 4
32217: NOT
32218: IFFALSE 32222
// exit ;
32220: GO 32327
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32222: LD_ADDR_VAR 0 5
32226: PUSH
32227: LD_VAR 0 2
32231: PPUSH
32232: LD_VAR 0 1
32236: PPUSH
32237: CALL_OW 248
32241: PPUSH
32242: CALL_OW 450
32246: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32247: LD_ADDR_VAR 0 3
32251: PUSH
32252: LD_VAR 0 4
32256: PPUSH
32257: LD_INT 1
32259: PPUSH
32260: CALL_OW 275
32264: PUSH
32265: LD_VAR 0 5
32269: PUSH
32270: LD_INT 1
32272: ARRAY
32273: GREATEREQUAL
32274: IFFALSE 32300
32276: PUSH
32277: LD_VAR 0 4
32281: PPUSH
32282: LD_INT 2
32284: PPUSH
32285: CALL_OW 275
32289: PUSH
32290: LD_VAR 0 5
32294: PUSH
32295: LD_INT 2
32297: ARRAY
32298: GREATEREQUAL
32299: AND
32300: IFFALSE 32326
32302: PUSH
32303: LD_VAR 0 4
32307: PPUSH
32308: LD_INT 3
32310: PPUSH
32311: CALL_OW 275
32315: PUSH
32316: LD_VAR 0 5
32320: PUSH
32321: LD_INT 3
32323: ARRAY
32324: GREATEREQUAL
32325: AND
32326: ST_TO_ADDR
// end ;
32327: LD_VAR 0 3
32331: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32332: LD_INT 0
32334: PPUSH
32335: PPUSH
32336: PPUSH
32337: PPUSH
32338: PPUSH
32339: PPUSH
32340: PPUSH
32341: PPUSH
32342: PPUSH
32343: PPUSH
32344: PPUSH
// result := false ;
32345: LD_ADDR_VAR 0 8
32349: PUSH
32350: LD_INT 0
32352: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32353: LD_VAR 0 5
32357: NOT
32358: IFTRUE 32367
32360: PUSH
32361: LD_VAR 0 1
32365: NOT
32366: OR
32367: IFTRUE 32376
32369: PUSH
32370: LD_VAR 0 2
32374: NOT
32375: OR
32376: IFTRUE 32385
32378: PUSH
32379: LD_VAR 0 3
32383: NOT
32384: OR
32385: IFFALSE 32389
// exit ;
32387: GO 33215
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32389: LD_ADDR_VAR 0 14
32393: PUSH
32394: LD_VAR 0 1
32398: PPUSH
32399: LD_VAR 0 2
32403: PPUSH
32404: LD_VAR 0 3
32408: PPUSH
32409: LD_VAR 0 4
32413: PPUSH
32414: LD_VAR 0 5
32418: PUSH
32419: LD_INT 1
32421: ARRAY
32422: PPUSH
32423: CALL_OW 248
32427: PPUSH
32428: LD_INT 0
32430: PPUSH
32431: CALL 34496 0 6
32435: ST_TO_ADDR
// if not hexes then
32436: LD_VAR 0 14
32440: NOT
32441: IFFALSE 32445
// exit ;
32443: GO 33215
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32445: LD_ADDR_VAR 0 17
32449: PUSH
32450: LD_VAR 0 5
32454: PPUSH
32455: LD_INT 22
32457: PUSH
32458: LD_VAR 0 13
32462: PPUSH
32463: CALL_OW 255
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 30
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 30
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PPUSH
32504: CALL_OW 72
32508: ST_TO_ADDR
// for i = 1 to hexes do
32509: LD_ADDR_VAR 0 9
32513: PUSH
32514: DOUBLE
32515: LD_INT 1
32517: DEC
32518: ST_TO_ADDR
32519: LD_VAR 0 14
32523: PUSH
32524: FOR_TO
32525: IFFALSE 33213
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32527: LD_ADDR_VAR 0 13
32531: PUSH
32532: LD_VAR 0 14
32536: PUSH
32537: LD_VAR 0 9
32541: ARRAY
32542: PUSH
32543: LD_INT 1
32545: ARRAY
32546: PPUSH
32547: LD_VAR 0 14
32551: PUSH
32552: LD_VAR 0 9
32556: ARRAY
32557: PUSH
32558: LD_INT 2
32560: ARRAY
32561: PPUSH
32562: CALL_OW 428
32566: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32567: LD_VAR 0 14
32571: PUSH
32572: LD_VAR 0 9
32576: ARRAY
32577: PUSH
32578: LD_INT 1
32580: ARRAY
32581: PPUSH
32582: LD_VAR 0 14
32586: PUSH
32587: LD_VAR 0 9
32591: ARRAY
32592: PUSH
32593: LD_INT 2
32595: ARRAY
32596: PPUSH
32597: CALL_OW 351
32601: IFTRUE 32640
32603: PUSH
32604: LD_VAR 0 14
32608: PUSH
32609: LD_VAR 0 9
32613: ARRAY
32614: PUSH
32615: LD_INT 1
32617: ARRAY
32618: PPUSH
32619: LD_VAR 0 14
32623: PUSH
32624: LD_VAR 0 9
32628: ARRAY
32629: PUSH
32630: LD_INT 2
32632: ARRAY
32633: PPUSH
32634: CALL_OW 488
32638: NOT
32639: OR
32640: IFTRUE 32657
32642: PUSH
32643: LD_VAR 0 13
32647: PPUSH
32648: CALL_OW 247
32652: PUSH
32653: LD_INT 3
32655: EQUAL
32656: OR
32657: IFFALSE 32663
// exit ;
32659: POP
32660: POP
32661: GO 33215
// if not tmp then
32663: LD_VAR 0 13
32667: NOT
32668: IFFALSE 32672
// continue ;
32670: GO 32524
// result := true ;
32672: LD_ADDR_VAR 0 8
32676: PUSH
32677: LD_INT 1
32679: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32680: LD_VAR 0 6
32684: IFFALSE 32701
32686: PUSH
32687: LD_VAR 0 13
32691: PPUSH
32692: CALL_OW 247
32696: PUSH
32697: LD_INT 2
32699: EQUAL
32700: AND
32701: IFFALSE 32718
32703: PUSH
32704: LD_VAR 0 13
32708: PPUSH
32709: CALL_OW 263
32713: PUSH
32714: LD_INT 1
32716: EQUAL
32717: AND
32718: IFFALSE 32882
// begin if IsDrivenBy ( tmp ) then
32720: LD_VAR 0 13
32724: PPUSH
32725: CALL_OW 311
32729: IFFALSE 32733
// continue ;
32731: GO 32524
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32733: LD_VAR 0 6
32737: PPUSH
32738: LD_INT 3
32740: PUSH
32741: LD_INT 60
32743: PUSH
32744: EMPTY
32745: LIST
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 3
32753: PUSH
32754: LD_INT 55
32756: PUSH
32757: EMPTY
32758: LIST
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PPUSH
32768: CALL_OW 72
32772: IFFALSE 32880
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32774: LD_ADDR_VAR 0 18
32778: PUSH
32779: LD_VAR 0 6
32783: PPUSH
32784: LD_INT 3
32786: PUSH
32787: LD_INT 60
32789: PUSH
32790: EMPTY
32791: LIST
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 3
32799: PUSH
32800: LD_INT 55
32802: PUSH
32803: EMPTY
32804: LIST
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PPUSH
32814: CALL_OW 72
32818: PUSH
32819: LD_INT 1
32821: ARRAY
32822: ST_TO_ADDR
// if IsInUnit ( driver ) then
32823: LD_VAR 0 18
32827: PPUSH
32828: CALL_OW 310
32832: IFFALSE 32843
// ComExit ( driver ) ;
32834: LD_VAR 0 18
32838: PPUSH
32839: CALL 58496 0 1
// AddComEnterUnit ( driver , tmp ) ;
32843: LD_VAR 0 18
32847: PPUSH
32848: LD_VAR 0 13
32852: PPUSH
32853: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32857: LD_VAR 0 18
32861: PPUSH
32862: LD_VAR 0 7
32866: PPUSH
32867: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32871: LD_VAR 0 18
32875: PPUSH
32876: CALL_OW 181
// end ; continue ;
32880: GO 32524
// end ; if not cleaners or not tmp in cleaners then
32882: LD_VAR 0 6
32886: NOT
32887: IFTRUE 32902
32889: PUSH
32890: LD_VAR 0 13
32894: PUSH
32895: LD_VAR 0 6
32899: IN
32900: NOT
32901: OR
32902: IFFALSE 33211
// begin if dep then
32904: LD_VAR 0 17
32908: IFFALSE 33044
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32910: LD_ADDR_VAR 0 16
32914: PUSH
32915: LD_VAR 0 17
32919: PUSH
32920: LD_INT 1
32922: ARRAY
32923: PPUSH
32924: CALL_OW 250
32928: PPUSH
32929: LD_VAR 0 17
32933: PUSH
32934: LD_INT 1
32936: ARRAY
32937: PPUSH
32938: CALL_OW 254
32942: PPUSH
32943: LD_INT 5
32945: PPUSH
32946: CALL_OW 272
32950: PUSH
32951: LD_VAR 0 17
32955: PUSH
32956: LD_INT 1
32958: ARRAY
32959: PPUSH
32960: CALL_OW 251
32964: PPUSH
32965: LD_VAR 0 17
32969: PUSH
32970: LD_INT 1
32972: ARRAY
32973: PPUSH
32974: CALL_OW 254
32978: PPUSH
32979: LD_INT 5
32981: PPUSH
32982: CALL_OW 273
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32991: LD_VAR 0 16
32995: PUSH
32996: LD_INT 1
32998: ARRAY
32999: PPUSH
33000: LD_VAR 0 16
33004: PUSH
33005: LD_INT 2
33007: ARRAY
33008: PPUSH
33009: CALL_OW 488
33013: IFFALSE 33044
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33015: LD_VAR 0 13
33019: PPUSH
33020: LD_VAR 0 16
33024: PUSH
33025: LD_INT 1
33027: ARRAY
33028: PPUSH
33029: LD_VAR 0 16
33033: PUSH
33034: LD_INT 2
33036: ARRAY
33037: PPUSH
33038: CALL_OW 111
// continue ;
33042: GO 32524
// end ; end ; r := GetDir ( tmp ) ;
33044: LD_ADDR_VAR 0 15
33048: PUSH
33049: LD_VAR 0 13
33053: PPUSH
33054: CALL_OW 254
33058: ST_TO_ADDR
// if r = 5 then
33059: LD_VAR 0 15
33063: PUSH
33064: LD_INT 5
33066: EQUAL
33067: IFFALSE 33077
// r := 0 ;
33069: LD_ADDR_VAR 0 15
33073: PUSH
33074: LD_INT 0
33076: ST_TO_ADDR
// for j = r to 5 do
33077: LD_ADDR_VAR 0 10
33081: PUSH
33082: DOUBLE
33083: LD_VAR 0 15
33087: DEC
33088: ST_TO_ADDR
33089: LD_INT 5
33091: PUSH
33092: FOR_TO
33093: IFFALSE 33209
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33095: LD_ADDR_VAR 0 11
33099: PUSH
33100: LD_VAR 0 13
33104: PPUSH
33105: CALL_OW 250
33109: PPUSH
33110: LD_VAR 0 10
33114: PPUSH
33115: LD_INT 2
33117: PPUSH
33118: CALL_OW 272
33122: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33123: LD_ADDR_VAR 0 12
33127: PUSH
33128: LD_VAR 0 13
33132: PPUSH
33133: CALL_OW 251
33137: PPUSH
33138: LD_VAR 0 10
33142: PPUSH
33143: LD_INT 2
33145: PPUSH
33146: CALL_OW 273
33150: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33151: LD_VAR 0 11
33155: PPUSH
33156: LD_VAR 0 12
33160: PPUSH
33161: CALL_OW 488
33165: IFFALSE 33184
33167: PUSH
33168: LD_VAR 0 11
33172: PPUSH
33173: LD_VAR 0 12
33177: PPUSH
33178: CALL_OW 428
33182: NOT
33183: AND
33184: IFFALSE 33207
// begin ComMoveXY ( tmp , _x , _y ) ;
33186: LD_VAR 0 13
33190: PPUSH
33191: LD_VAR 0 11
33195: PPUSH
33196: LD_VAR 0 12
33200: PPUSH
33201: CALL_OW 111
// break ;
33205: GO 33209
// end ; end ;
33207: GO 33092
33209: POP
33210: POP
// end ; end ;
33211: GO 32524
33213: POP
33214: POP
// end ;
33215: LD_VAR 0 8
33219: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33220: LD_INT 0
33222: PPUSH
// result := true ;
33223: LD_ADDR_VAR 0 3
33227: PUSH
33228: LD_INT 1
33230: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33231: LD_VAR 0 2
33235: PUSH
33236: LD_INT 24
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33250
33242: LD_INT 33
33244: DOUBLE
33245: EQUAL
33246: IFTRUE 33250
33248: GO 33275
33250: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33251: LD_ADDR_VAR 0 3
33255: PUSH
33256: LD_INT 32
33258: PPUSH
33259: LD_VAR 0 1
33263: PPUSH
33264: CALL_OW 321
33268: PUSH
33269: LD_INT 2
33271: EQUAL
33272: ST_TO_ADDR
33273: GO 33591
33275: LD_INT 20
33277: DOUBLE
33278: EQUAL
33279: IFTRUE 33283
33281: GO 33308
33283: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33284: LD_ADDR_VAR 0 3
33288: PUSH
33289: LD_INT 6
33291: PPUSH
33292: LD_VAR 0 1
33296: PPUSH
33297: CALL_OW 321
33301: PUSH
33302: LD_INT 2
33304: EQUAL
33305: ST_TO_ADDR
33306: GO 33591
33308: LD_INT 22
33310: DOUBLE
33311: EQUAL
33312: IFTRUE 33322
33314: LD_INT 36
33316: DOUBLE
33317: EQUAL
33318: IFTRUE 33322
33320: GO 33347
33322: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33323: LD_ADDR_VAR 0 3
33327: PUSH
33328: LD_INT 15
33330: PPUSH
33331: LD_VAR 0 1
33335: PPUSH
33336: CALL_OW 321
33340: PUSH
33341: LD_INT 2
33343: EQUAL
33344: ST_TO_ADDR
33345: GO 33591
33347: LD_INT 30
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33380
33355: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33356: LD_ADDR_VAR 0 3
33360: PUSH
33361: LD_INT 20
33363: PPUSH
33364: LD_VAR 0 1
33368: PPUSH
33369: CALL_OW 321
33373: PUSH
33374: LD_INT 2
33376: EQUAL
33377: ST_TO_ADDR
33378: GO 33591
33380: LD_INT 28
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33394
33386: LD_INT 21
33388: DOUBLE
33389: EQUAL
33390: IFTRUE 33394
33392: GO 33419
33394: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: LD_INT 21
33402: PPUSH
33403: LD_VAR 0 1
33407: PPUSH
33408: CALL_OW 321
33412: PUSH
33413: LD_INT 2
33415: EQUAL
33416: ST_TO_ADDR
33417: GO 33591
33419: LD_INT 16
33421: DOUBLE
33422: EQUAL
33423: IFTRUE 33427
33425: GO 33452
33427: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33428: LD_ADDR_VAR 0 3
33432: PUSH
33433: LD_INT 84
33435: PPUSH
33436: LD_VAR 0 1
33440: PPUSH
33441: CALL_OW 321
33445: PUSH
33446: LD_INT 2
33448: EQUAL
33449: ST_TO_ADDR
33450: GO 33591
33452: LD_INT 19
33454: DOUBLE
33455: EQUAL
33456: IFTRUE 33466
33458: LD_INT 23
33460: DOUBLE
33461: EQUAL
33462: IFTRUE 33466
33464: GO 33491
33466: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33467: LD_ADDR_VAR 0 3
33471: PUSH
33472: LD_INT 83
33474: PPUSH
33475: LD_VAR 0 1
33479: PPUSH
33480: CALL_OW 321
33484: PUSH
33485: LD_INT 2
33487: EQUAL
33488: ST_TO_ADDR
33489: GO 33591
33491: LD_INT 17
33493: DOUBLE
33494: EQUAL
33495: IFTRUE 33499
33497: GO 33524
33499: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33500: LD_ADDR_VAR 0 3
33504: PUSH
33505: LD_INT 39
33507: PPUSH
33508: LD_VAR 0 1
33512: PPUSH
33513: CALL_OW 321
33517: PUSH
33518: LD_INT 2
33520: EQUAL
33521: ST_TO_ADDR
33522: GO 33591
33524: LD_INT 18
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33557
33532: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 40
33540: PPUSH
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL_OW 321
33550: PUSH
33551: LD_INT 2
33553: EQUAL
33554: ST_TO_ADDR
33555: GO 33591
33557: LD_INT 27
33559: DOUBLE
33560: EQUAL
33561: IFTRUE 33565
33563: GO 33590
33565: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33566: LD_ADDR_VAR 0 3
33570: PUSH
33571: LD_INT 35
33573: PPUSH
33574: LD_VAR 0 1
33578: PPUSH
33579: CALL_OW 321
33583: PUSH
33584: LD_INT 2
33586: EQUAL
33587: ST_TO_ADDR
33588: GO 33591
33590: POP
// end ;
33591: LD_VAR 0 3
33595: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33596: LD_INT 0
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
33605: PPUSH
33606: PPUSH
33607: PPUSH
33608: PPUSH
// result := false ;
33609: LD_ADDR_VAR 0 6
33613: PUSH
33614: LD_INT 0
33616: ST_TO_ADDR
// if btype = b_depot then
33617: LD_VAR 0 2
33621: PUSH
33622: LD_INT 0
33624: EQUAL
33625: IFFALSE 33637
// begin result := true ;
33627: LD_ADDR_VAR 0 6
33631: PUSH
33632: LD_INT 1
33634: ST_TO_ADDR
// exit ;
33635: GO 34491
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33637: LD_VAR 0 1
33641: NOT
33642: IFTRUE 33667
33644: PUSH
33645: LD_VAR 0 1
33649: PPUSH
33650: CALL_OW 266
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: IN
33665: NOT
33666: OR
33667: IFTRUE 33676
33669: PUSH
33670: LD_VAR 0 2
33674: NOT
33675: OR
33676: IFTRUE 33712
33678: PUSH
33679: LD_VAR 0 5
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: LD_INT 3
33695: PUSH
33696: LD_INT 4
33698: PUSH
33699: LD_INT 5
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: IN
33710: NOT
33711: OR
33712: IFTRUE 33731
33714: PUSH
33715: LD_VAR 0 3
33719: PPUSH
33720: LD_VAR 0 4
33724: PPUSH
33725: CALL_OW 488
33729: NOT
33730: OR
33731: IFFALSE 33735
// exit ;
33733: GO 34491
// side := GetSide ( depot ) ;
33735: LD_ADDR_VAR 0 9
33739: PUSH
33740: LD_VAR 0 1
33744: PPUSH
33745: CALL_OW 255
33749: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33750: LD_VAR 0 9
33754: PPUSH
33755: LD_VAR 0 2
33759: PPUSH
33760: CALL 33220 0 2
33764: NOT
33765: IFFALSE 33769
// exit ;
33767: GO 34491
// pom := GetBase ( depot ) ;
33769: LD_ADDR_VAR 0 10
33773: PUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL_OW 274
33783: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33784: LD_ADDR_VAR 0 11
33788: PUSH
33789: LD_VAR 0 2
33793: PPUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 248
33803: PPUSH
33804: CALL_OW 450
33808: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33809: LD_VAR 0 10
33813: PPUSH
33814: LD_INT 1
33816: PPUSH
33817: CALL_OW 275
33821: PUSH
33822: LD_VAR 0 11
33826: PUSH
33827: LD_INT 1
33829: ARRAY
33830: GREATEREQUAL
33831: IFFALSE 33857
33833: PUSH
33834: LD_VAR 0 10
33838: PPUSH
33839: LD_INT 2
33841: PPUSH
33842: CALL_OW 275
33846: PUSH
33847: LD_VAR 0 11
33851: PUSH
33852: LD_INT 2
33854: ARRAY
33855: GREATEREQUAL
33856: AND
33857: IFFALSE 33883
33859: PUSH
33860: LD_VAR 0 10
33864: PPUSH
33865: LD_INT 3
33867: PPUSH
33868: CALL_OW 275
33872: PUSH
33873: LD_VAR 0 11
33877: PUSH
33878: LD_INT 3
33880: ARRAY
33881: GREATEREQUAL
33882: AND
33883: NOT
33884: IFFALSE 33888
// exit ;
33886: GO 34491
// if GetBType ( depot ) = b_depot then
33888: LD_VAR 0 1
33892: PPUSH
33893: CALL_OW 266
33897: PUSH
33898: LD_INT 0
33900: EQUAL
33901: IFFALSE 33913
// dist := 28 else
33903: LD_ADDR_VAR 0 14
33907: PUSH
33908: LD_INT 28
33910: ST_TO_ADDR
33911: GO 33921
// dist := 36 ;
33913: LD_ADDR_VAR 0 14
33917: PUSH
33918: LD_INT 36
33920: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33921: LD_VAR 0 1
33925: PPUSH
33926: LD_VAR 0 3
33930: PPUSH
33931: LD_VAR 0 4
33935: PPUSH
33936: CALL_OW 297
33940: PUSH
33941: LD_VAR 0 14
33945: GREATER
33946: IFFALSE 33950
// exit ;
33948: GO 34491
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33950: LD_ADDR_VAR 0 12
33954: PUSH
33955: LD_VAR 0 2
33959: PPUSH
33960: LD_VAR 0 3
33964: PPUSH
33965: LD_VAR 0 4
33969: PPUSH
33970: LD_VAR 0 5
33974: PPUSH
33975: LD_VAR 0 1
33979: PPUSH
33980: CALL_OW 248
33984: PPUSH
33985: LD_INT 0
33987: PPUSH
33988: CALL 34496 0 6
33992: ST_TO_ADDR
// if not hexes then
33993: LD_VAR 0 12
33997: NOT
33998: IFFALSE 34002
// exit ;
34000: GO 34491
// hex := GetHexInfo ( x , y ) ;
34002: LD_ADDR_VAR 0 15
34006: PUSH
34007: LD_VAR 0 3
34011: PPUSH
34012: LD_VAR 0 4
34016: PPUSH
34017: CALL_OW 546
34021: ST_TO_ADDR
// if hex [ 1 ] then
34022: LD_VAR 0 15
34026: PUSH
34027: LD_INT 1
34029: ARRAY
34030: IFFALSE 34034
// exit ;
34032: GO 34491
// height := hex [ 2 ] ;
34034: LD_ADDR_VAR 0 13
34038: PUSH
34039: LD_VAR 0 15
34043: PUSH
34044: LD_INT 2
34046: ARRAY
34047: ST_TO_ADDR
// for i = 1 to hexes do
34048: LD_ADDR_VAR 0 7
34052: PUSH
34053: DOUBLE
34054: LD_INT 1
34056: DEC
34057: ST_TO_ADDR
34058: LD_VAR 0 12
34062: PUSH
34063: FOR_TO
34064: IFFALSE 34408
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34066: LD_VAR 0 12
34070: PUSH
34071: LD_VAR 0 7
34075: ARRAY
34076: PUSH
34077: LD_INT 1
34079: ARRAY
34080: PPUSH
34081: LD_VAR 0 12
34085: PUSH
34086: LD_VAR 0 7
34090: ARRAY
34091: PUSH
34092: LD_INT 2
34094: ARRAY
34095: PPUSH
34096: CALL_OW 488
34100: NOT
34101: IFTRUE 34143
34103: PUSH
34104: LD_VAR 0 12
34108: PUSH
34109: LD_VAR 0 7
34113: ARRAY
34114: PUSH
34115: LD_INT 1
34117: ARRAY
34118: PPUSH
34119: LD_VAR 0 12
34123: PUSH
34124: LD_VAR 0 7
34128: ARRAY
34129: PUSH
34130: LD_INT 2
34132: ARRAY
34133: PPUSH
34134: CALL_OW 428
34138: PUSH
34139: LD_INT 0
34141: GREATER
34142: OR
34143: IFTRUE 34181
34145: PUSH
34146: LD_VAR 0 12
34150: PUSH
34151: LD_VAR 0 7
34155: ARRAY
34156: PUSH
34157: LD_INT 1
34159: ARRAY
34160: PPUSH
34161: LD_VAR 0 12
34165: PUSH
34166: LD_VAR 0 7
34170: ARRAY
34171: PUSH
34172: LD_INT 2
34174: ARRAY
34175: PPUSH
34176: CALL_OW 351
34180: OR
34181: IFFALSE 34187
// exit ;
34183: POP
34184: POP
34185: GO 34491
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34187: LD_ADDR_VAR 0 8
34191: PUSH
34192: LD_VAR 0 12
34196: PUSH
34197: LD_VAR 0 7
34201: ARRAY
34202: PUSH
34203: LD_INT 1
34205: ARRAY
34206: PPUSH
34207: LD_VAR 0 12
34211: PUSH
34212: LD_VAR 0 7
34216: ARRAY
34217: PUSH
34218: LD_INT 2
34220: ARRAY
34221: PPUSH
34222: CALL_OW 546
34226: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34227: LD_VAR 0 8
34231: PUSH
34232: LD_INT 1
34234: ARRAY
34235: IFTRUE 34257
34237: PUSH
34238: LD_VAR 0 8
34242: PUSH
34243: LD_INT 2
34245: ARRAY
34246: PUSH
34247: LD_VAR 0 13
34251: PUSH
34252: LD_INT 2
34254: PLUS
34255: GREATER
34256: OR
34257: IFTRUE 34279
34259: PUSH
34260: LD_VAR 0 8
34264: PUSH
34265: LD_INT 2
34267: ARRAY
34268: PUSH
34269: LD_VAR 0 13
34273: PUSH
34274: LD_INT 2
34276: MINUS
34277: LESS
34278: OR
34279: IFTRUE 34347
34281: PUSH
34282: LD_VAR 0 8
34286: PUSH
34287: LD_INT 3
34289: ARRAY
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 8
34296: PUSH
34297: LD_INT 9
34299: PUSH
34300: LD_INT 10
34302: PUSH
34303: LD_INT 11
34305: PUSH
34306: LD_INT 12
34308: PUSH
34309: LD_INT 13
34311: PUSH
34312: LD_INT 16
34314: PUSH
34315: LD_INT 17
34317: PUSH
34318: LD_INT 18
34320: PUSH
34321: LD_INT 19
34323: PUSH
34324: LD_INT 20
34326: PUSH
34327: LD_INT 21
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: IN
34345: NOT
34346: OR
34347: IFTRUE 34360
34349: PUSH
34350: LD_VAR 0 8
34354: PUSH
34355: LD_INT 5
34357: ARRAY
34358: NOT
34359: OR
34360: IFTRUE 34400
34362: PUSH
34363: LD_VAR 0 8
34367: PUSH
34368: LD_INT 6
34370: ARRAY
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 7
34380: PUSH
34381: LD_INT 9
34383: PUSH
34384: LD_INT 10
34386: PUSH
34387: LD_INT 11
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: IN
34398: NOT
34399: OR
34400: IFFALSE 34406
// exit ;
34402: POP
34403: POP
34404: GO 34491
// end ;
34406: GO 34063
34408: POP
34409: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34410: LD_VAR 0 9
34414: PPUSH
34415: LD_VAR 0 3
34419: PPUSH
34420: LD_VAR 0 4
34424: PPUSH
34425: LD_INT 20
34427: PPUSH
34428: CALL 26310 0 4
34432: PUSH
34433: LD_INT 4
34435: ARRAY
34436: IFFALSE 34440
// exit ;
34438: GO 34491
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34440: LD_VAR 0 2
34444: PUSH
34445: LD_INT 29
34447: PUSH
34448: LD_INT 30
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: IN
34455: IFFALSE 34479
34457: PUSH
34458: LD_VAR 0 3
34462: PPUSH
34463: LD_VAR 0 4
34467: PPUSH
34468: LD_VAR 0 9
34472: PPUSH
34473: CALL_OW 440
34477: NOT
34478: AND
34479: IFFALSE 34483
// exit ;
34481: GO 34491
// result := true ;
34483: LD_ADDR_VAR 0 6
34487: PUSH
34488: LD_INT 1
34490: ST_TO_ADDR
// end ;
34491: LD_VAR 0 6
34495: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34496: LD_INT 0
34498: PPUSH
34499: PPUSH
34500: PPUSH
34501: PPUSH
34502: PPUSH
34503: PPUSH
34504: PPUSH
34505: PPUSH
34506: PPUSH
34507: PPUSH
34508: PPUSH
34509: PPUSH
34510: PPUSH
34511: PPUSH
34512: PPUSH
34513: PPUSH
34514: PPUSH
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
34521: PPUSH
34522: PPUSH
34523: PPUSH
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
34528: PPUSH
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
34535: PPUSH
34536: PPUSH
34537: PPUSH
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
34544: PPUSH
34545: PPUSH
34546: PPUSH
34547: PPUSH
34548: PPUSH
34549: PPUSH
34550: PPUSH
34551: PPUSH
34552: PPUSH
34553: PPUSH
34554: PPUSH
34555: PPUSH
// result = [ ] ;
34556: LD_ADDR_VAR 0 7
34560: PUSH
34561: EMPTY
34562: ST_TO_ADDR
// temp_list = [ ] ;
34563: LD_ADDR_VAR 0 9
34567: PUSH
34568: EMPTY
34569: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34570: LD_VAR 0 4
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: LD_INT 4
34589: PUSH
34590: LD_INT 5
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: IN
34601: NOT
34602: IFTRUE 34645
34604: PUSH
34605: LD_VAR 0 1
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: IN
34620: IFFALSE 34644
34622: PUSH
34623: LD_VAR 0 5
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: IN
34642: NOT
34643: AND
34644: OR
34645: IFFALSE 34649
// exit ;
34647: GO 53048
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34649: LD_VAR 0 1
34653: PUSH
34654: LD_INT 6
34656: PUSH
34657: LD_INT 7
34659: PUSH
34660: LD_INT 8
34662: PUSH
34663: LD_INT 13
34665: PUSH
34666: LD_INT 12
34668: PUSH
34669: LD_INT 15
34671: PUSH
34672: LD_INT 11
34674: PUSH
34675: LD_INT 14
34677: PUSH
34678: LD_INT 10
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: IN
34692: IFFALSE 34702
// btype = b_lab ;
34694: LD_ADDR_VAR 0 1
34698: PUSH
34699: LD_INT 6
34701: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34702: LD_VAR 0 6
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: IN
34721: NOT
34722: IFTRUE 34790
34724: PUSH
34725: LD_VAR 0 1
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: LD_INT 2
34738: PUSH
34739: LD_INT 3
34741: PUSH
34742: LD_INT 6
34744: PUSH
34745: LD_INT 36
34747: PUSH
34748: LD_INT 4
34750: PUSH
34751: LD_INT 5
34753: PUSH
34754: LD_INT 31
34756: PUSH
34757: LD_INT 32
34759: PUSH
34760: LD_INT 33
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: IN
34776: NOT
34777: IFFALSE 34789
34779: PUSH
34780: LD_VAR 0 6
34784: PUSH
34785: LD_INT 1
34787: EQUAL
34788: AND
34789: OR
34790: IFTRUE 34822
34792: PUSH
34793: LD_VAR 0 1
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: IN
34808: NOT
34809: IFFALSE 34821
34811: PUSH
34812: LD_VAR 0 6
34816: PUSH
34817: LD_INT 2
34819: EQUAL
34820: AND
34821: OR
34822: IFFALSE 34832
// mode = 0 ;
34824: LD_ADDR_VAR 0 6
34828: PUSH
34829: LD_INT 0
34831: ST_TO_ADDR
// case mode of 0 :
34832: LD_VAR 0 6
34836: PUSH
34837: LD_INT 0
34839: DOUBLE
34840: EQUAL
34841: IFTRUE 34845
34843: GO 46298
34845: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34846: LD_ADDR_VAR 0 11
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: NEG
34928: PUSH
34929: LD_INT 2
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: LD_INT 3
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: LD_INT 3
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35039: LD_ADDR_VAR 0 12
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 2
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 2
35162: NEG
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 3
35207: NEG
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35235: LD_ADDR_VAR 0 13
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 2
35358: NEG
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 2
35370: NEG
35371: PUSH
35372: LD_INT 2
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: LD_INT 3
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 3
35394: NEG
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 3
35406: NEG
35407: PUSH
35408: LD_INT 3
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35434: LD_ADDR_VAR 0 14
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 2
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 1
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: LD_INT 3
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 3
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35630: LD_ADDR_VAR 0 15
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: NEG
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 2
35764: NEG
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 3
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 3
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35823: LD_ADDR_VAR 0 16
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 3
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 3
35980: PUSH
35981: LD_INT 3
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 2
35990: PUSH
35991: LD_INT 3
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36016: LD_ADDR_VAR 0 17
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: LD_INT 2
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 2
36192: NEG
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: NEG
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: NEG
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36246: LD_ADDR_VAR 0 18
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: LD_INT 2
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: LD_INT 1
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: LD_INT 1
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 2
36422: NEG
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: NEG
36446: PUSH
36447: LD_INT 2
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36476: LD_ADDR_VAR 0 19
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: LD_INT 1
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: LD_INT 1
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: LD_INT 2
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: NEG
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36706: LD_ADDR_VAR 0 20
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 2
36905: NEG
36906: PUSH
36907: LD_INT 2
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36936: LD_ADDR_VAR 0 21
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: LD_INT 1
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 2
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 2
37112: NEG
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: LD_INT 1
37127: NEG
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 2
37135: NEG
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37166: LD_ADDR_VAR 0 22
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: LD_INT 2
37251: NEG
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: LD_INT 2
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 2
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 2
37365: NEG
37366: PUSH
37367: LD_INT 2
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37396: LD_ADDR_VAR 0 23
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: LD_INT 2
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 2
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: NEG
37596: PUSH
37597: LD_INT 2
37599: NEG
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: NEG
37608: PUSH
37609: LD_INT 3
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: LD_INT 3
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 2
37634: NEG
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37676: LD_ADDR_VAR 0 24
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: NEG
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 1
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: NEG
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 2
37875: NEG
37876: PUSH
37877: LD_INT 2
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: LD_INT 2
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 2
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 3
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 3
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37952: LD_ADDR_VAR 0 25
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 2
38128: NEG
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: NEG
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 2
38183: PUSH
38184: LD_INT 3
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: LD_INT 3
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38226: LD_ADDR_VAR 0 26
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 1
38307: NEG
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 2
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 2
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 2
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: LD_INT 2
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 2
38402: NEG
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: NEG
38426: PUSH
38427: LD_INT 2
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 2
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38502: LD_ADDR_VAR 0 27
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 0
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: LD_INT 2
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: LD_INT 1
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 3
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38782: LD_ADDR_VAR 0 28
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: LD_INT 2
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: NEG
38994: PUSH
38995: LD_INT 3
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: LD_INT 3
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 3
39017: NEG
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 3
39029: NEG
39030: PUSH
39031: LD_INT 2
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39064: LD_ADDR_VAR 0 29
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 0
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 2
39230: NEG
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: LD_INT 2
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: LD_INT 3
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 3
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: LD_INT 3
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 3
39308: NEG
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39343: LD_ADDR_VAR 0 30
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: LD_INT 2
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: NEG
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 3
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 3
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 3
39586: NEG
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39621: LD_ADDR_VAR 0 31
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: NEG
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: LD_INT 2
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 2
39810: NEG
39811: PUSH
39812: LD_INT 3
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 3
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: LD_INT 2
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 3
39864: NEG
39865: PUSH
39866: LD_INT 2
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39899: LD_ADDR_VAR 0 32
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: LD_INT 2
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 2
40076: NEG
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 3
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 3
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 3
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: NEG
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 3
40142: NEG
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40177: LD_ADDR_VAR 0 33
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 1
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: LD_INT 2
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 2
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 2
40355: NEG
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: LD_INT 3
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 3
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: LD_INT 3
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: LD_INT 2
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 3
40421: NEG
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40456: LD_ADDR_VAR 0 34
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 2
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 3
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 3
40670: PUSH
40671: LD_INT 2
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 2
40680: PUSH
40681: LD_INT 3
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 3
40701: NEG
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40736: LD_ADDR_VAR 0 35
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40848: LD_ADDR_VAR 0 36
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40960: LD_ADDR_VAR 0 37
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41072: LD_ADDR_VAR 0 38
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41184: LD_ADDR_VAR 0 39
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: NEG
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41296: LD_ADDR_VAR 0 40
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41408: LD_ADDR_VAR 0 41
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 3
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 3
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 3
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 3
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 3
41651: PUSH
41652: LD_INT 3
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: LD_INT 3
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 3
41682: NEG
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 3
41693: NEG
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 3
41705: NEG
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 3
41717: NEG
41718: PUSH
41719: LD_INT 3
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41758: LD_ADDR_VAR 0 42
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: NEG
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 3
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 3
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 3
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 3
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 3
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 3
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 3
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 3
42055: NEG
42056: PUSH
42057: LD_INT 2
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: LD_INT 3
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42108: LD_ADDR_VAR 0 43
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 0
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 2
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 2
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 2
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: LD_INT 3
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 3
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 3
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 3
42404: NEG
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 3
42415: NEG
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42456: LD_ADDR_VAR 0 44
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 1
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 2
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: NEG
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 2
42622: NEG
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 2
42646: NEG
42647: PUSH
42648: LD_INT 3
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 3
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 3
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: LD_INT 2
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 3
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 3
42730: NEG
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 3
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: NEG
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: NEG
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42806: LD_ADDR_VAR 0 45
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 3
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 3
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 3
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 2
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 3
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: LD_INT 3
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: LD_INT 3
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: NEG
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 3
43115: NEG
43116: PUSH
43117: LD_INT 3
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43156: LD_ADDR_VAR 0 46
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 0
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 0
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 2
43333: NEG
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: LD_INT 3
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 0
43357: PUSH
43358: LD_INT 3
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 3
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 3
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 3
43452: NEG
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 3
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43504: LD_ADDR_VAR 0 47
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43655: LD_ADDR_VAR 0 48
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 2
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43802: LD_ADDR_VAR 0 49
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 1
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: LD_INT 2
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43946: LD_ADDR_VAR 0 50
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44090: LD_ADDR_VAR 0 51
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: NEG
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44237: LD_ADDR_VAR 0 52
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 0
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44388: LD_ADDR_VAR 0 53
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 2
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44618: LD_ADDR_VAR 0 54
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44848: LD_ADDR_VAR 0 55
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45078: LD_ADDR_VAR 0 56
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: NEG
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45308: LD_ADDR_VAR 0 57
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45538: LD_ADDR_VAR 0 58
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45768: LD_ADDR_VAR 0 59
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45856: LD_ADDR_VAR 0 60
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45944: LD_ADDR_VAR 0 61
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46032: LD_ADDR_VAR 0 62
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46120: LD_ADDR_VAR 0 63
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46208: LD_ADDR_VAR 0 64
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: ST_TO_ADDR
// end ; 1 :
46296: GO 52193
46298: LD_INT 1
46300: DOUBLE
46301: EQUAL
46302: IFTRUE 46306
46304: GO 48929
46306: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46307: LD_ADDR_VAR 0 11
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 3
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 2
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46351: LD_ADDR_VAR 0 12
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 3
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: LIST
46391: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46392: LD_ADDR_VAR 0 13
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 3
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 3
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46432: LD_ADDR_VAR 0 14
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: LIST
46472: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46473: LD_ADDR_VAR 0 15
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 3
46491: NEG
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46517: LD_ADDR_VAR 0 16
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 3
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 3
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: LD_INT 3
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46563: LD_ADDR_VAR 0 17
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: LD_INT 3
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 3
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46607: LD_ADDR_VAR 0 18
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 3
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46648: LD_ADDR_VAR 0 19
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46688: LD_ADDR_VAR 0 20
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 3
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: LIST
46728: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46729: LD_ADDR_VAR 0 21
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 3
46747: NEG
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 3
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: LIST
46772: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46773: LD_ADDR_VAR 0 22
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: LD_INT 3
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 3
46792: NEG
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 3
46804: NEG
46805: PUSH
46806: LD_INT 3
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46819: LD_ADDR_VAR 0 23
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 3
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 4
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 3
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46863: LD_ADDR_VAR 0 24
46867: PUSH
46868: LD_INT 3
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 4
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46904: LD_ADDR_VAR 0 25
46908: PUSH
46909: LD_INT 3
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 4
46921: PUSH
46922: LD_INT 3
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 3
46931: PUSH
46932: LD_INT 4
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: LIST
46943: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46944: LD_ADDR_VAR 0 26
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 3
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 4
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: LD_INT 3
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46985: LD_ADDR_VAR 0 27
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 4
47014: NEG
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: LIST
47028: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47029: LD_ADDR_VAR 0 28
47033: PUSH
47034: LD_INT 3
47036: NEG
47037: PUSH
47038: LD_INT 3
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: LD_INT 4
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 4
47060: NEG
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47075: LD_ADDR_VAR 0 29
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 4
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 4
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: LD_INT 3
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 5
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 5
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 4
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: LD_INT 6
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: LD_INT 6
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 5
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47230: LD_ADDR_VAR 0 30
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 3
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 4
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 4
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 4
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 5
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 5
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 5
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 6
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 6
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47373: LD_ADDR_VAR 0 31
47377: PUSH
47378: LD_INT 3
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: LD_INT 3
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 4
47410: PUSH
47411: LD_INT 3
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 4
47420: PUSH
47421: LD_INT 4
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 4
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 5
47440: PUSH
47441: LD_INT 4
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 5
47450: PUSH
47451: LD_INT 5
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 4
47460: PUSH
47461: LD_INT 5
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 6
47470: PUSH
47471: LD_INT 5
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 6
47480: PUSH
47481: LD_INT 6
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 5
47490: PUSH
47491: LD_INT 6
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47512: LD_ADDR_VAR 0 32
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: LD_INT 4
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 4
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 5
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 5
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 4
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 6
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 6
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 5
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47655: LD_ADDR_VAR 0 33
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 3
47673: NEG
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 4
47707: NEG
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 4
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 4
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 5
47741: NEG
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 5
47752: NEG
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 5
47764: NEG
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 6
47775: NEG
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 6
47786: NEG
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47810: LD_ADDR_VAR 0 34
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: NEG
47842: PUSH
47843: LD_INT 3
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 3
47853: NEG
47854: PUSH
47855: LD_INT 4
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 4
47865: NEG
47866: PUSH
47867: LD_INT 3
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 4
47877: NEG
47878: PUSH
47879: LD_INT 4
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 4
47889: NEG
47890: PUSH
47891: LD_INT 5
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 5
47901: NEG
47902: PUSH
47903: LD_INT 4
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 5
47913: NEG
47914: PUSH
47915: LD_INT 5
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 5
47925: NEG
47926: PUSH
47927: LD_INT 6
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 6
47937: NEG
47938: PUSH
47939: LD_INT 5
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 6
47949: NEG
47950: PUSH
47951: LD_INT 6
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47973: LD_ADDR_VAR 0 41
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 3
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48017: LD_ADDR_VAR 0 42
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: LIST
48057: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48058: LD_ADDR_VAR 0 43
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48098: LD_ADDR_VAR 0 44
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48139: LD_ADDR_VAR 0 45
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 3
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: LIST
48182: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48183: LD_ADDR_VAR 0 46
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: LD_INT 3
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 3
48214: NEG
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48229: LD_ADDR_VAR 0 47
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 3
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 3
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48262: LD_ADDR_VAR 0 48
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 2
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48293: LD_ADDR_VAR 0 49
48297: PUSH
48298: LD_INT 3
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48322: LD_ADDR_VAR 0 50
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48351: LD_ADDR_VAR 0 51
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48382: LD_ADDR_VAR 0 52
48386: PUSH
48387: LD_INT 3
48389: NEG
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48415: LD_ADDR_VAR 0 53
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 3
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: LIST
48458: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48459: LD_ADDR_VAR 0 54
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: LIST
48499: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48500: LD_ADDR_VAR 0 55
48504: PUSH
48505: LD_INT 3
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 3
48517: PUSH
48518: LD_INT 3
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: PUSH
48528: LD_INT 3
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: LIST
48539: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48540: LD_ADDR_VAR 0 56
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 3
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: LIST
48580: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48581: LD_ADDR_VAR 0 57
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 3
48599: NEG
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 3
48610: NEG
48611: PUSH
48612: LD_INT 1
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: LIST
48624: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48625: LD_ADDR_VAR 0 58
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: LD_INT 3
48660: NEG
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48671: LD_ADDR_VAR 0 59
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48715: LD_ADDR_VAR 0 60
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48756: LD_ADDR_VAR 0 61
48760: PUSH
48761: LD_INT 2
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: LIST
48795: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48796: LD_ADDR_VAR 0 62
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: LIST
48836: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48837: LD_ADDR_VAR 0 63
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: LIST
48880: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48881: LD_ADDR_VAR 0 64
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: ST_TO_ADDR
// end ; 2 :
48927: GO 52193
48929: LD_INT 2
48931: DOUBLE
48932: EQUAL
48933: IFTRUE 48937
48935: GO 52192
48937: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48938: LD_ADDR_VAR 0 29
48942: PUSH
48943: LD_INT 4
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 4
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 5
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 5
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 4
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 3
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 3
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 3
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 5
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 4
49058: PUSH
49059: LD_INT 3
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 4
49068: PUSH
49069: LD_INT 4
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 4
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 4
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: LD_INT 4
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 4
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 3
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: LD_INT 4
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 5
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 5
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 4
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 5
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 2
49210: NEG
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 3
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: NEG
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 4
49277: NEG
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 4
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 4
49300: NEG
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 4
49323: NEG
49324: PUSH
49325: LD_INT 4
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 4
49335: NEG
49336: PUSH
49337: LD_INT 5
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 3
49347: NEG
49348: PUSH
49349: LD_INT 4
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 3
49359: NEG
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 4
49371: NEG
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 5
49383: NEG
49384: PUSH
49385: LD_INT 4
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 5
49395: NEG
49396: PUSH
49397: LD_INT 5
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 3
49407: NEG
49408: PUSH
49409: LD_INT 5
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 5
49419: NEG
49420: PUSH
49421: LD_INT 3
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49476: LD_ADDR_VAR 0 30
49480: PUSH
49481: LD_INT 4
49483: PUSH
49484: LD_INT 4
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: LD_INT 3
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 5
49503: PUSH
49504: LD_INT 4
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 5
49513: PUSH
49514: LD_INT 5
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 4
49523: PUSH
49524: LD_INT 5
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 3
49533: PUSH
49534: LD_INT 4
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: PUSH
49544: LD_INT 3
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 5
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 3
49563: PUSH
49564: LD_INT 5
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 3
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: LD_INT 2
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 4
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 4
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 3
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 4
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 4
49666: NEG
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 4
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 4
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 5
49722: NEG
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 5
49733: NEG
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 5
49745: NEG
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 3
49757: NEG
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: NEG
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 3
49780: NEG
49781: PUSH
49782: LD_INT 4
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 3
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 3
49816: NEG
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 4
49828: NEG
49829: PUSH
49830: LD_INT 3
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 4
49840: NEG
49841: PUSH
49842: LD_INT 4
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 2
49852: NEG
49853: PUSH
49854: LD_INT 4
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 4
49864: NEG
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 4
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 5
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 4
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 3
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 4
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: LD_INT 5
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 5
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50023: LD_ADDR_VAR 0 31
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 4
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 3
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 4
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 5
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 5
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 4
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 3
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 5
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 4
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 4
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 4
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 4
50225: NEG
50226: PUSH
50227: LD_INT 4
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 4
50237: NEG
50238: PUSH
50239: LD_INT 5
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 3
50249: NEG
50250: PUSH
50251: LD_INT 4
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 3
50261: NEG
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 4
50273: NEG
50274: PUSH
50275: LD_INT 3
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 5
50285: NEG
50286: PUSH
50287: LD_INT 4
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 5
50297: NEG
50298: PUSH
50299: LD_INT 5
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 3
50309: NEG
50310: PUSH
50311: LD_INT 5
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 5
50321: NEG
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 3
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: LD_INT 4
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 3
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 3
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 4
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: LD_INT 4
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 4
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 4
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 5
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 5
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 4
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 3
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 3
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 5
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50573: LD_ADDR_VAR 0 32
50577: PUSH
50578: LD_INT 4
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 4
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: NEG
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: NEG
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 4
50625: NEG
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 5
50636: NEG
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 5
50647: NEG
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 5
50659: NEG
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 3
50671: NEG
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: LD_INT 3
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: LD_INT 4
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: NEG
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 4
50742: NEG
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 4
50754: NEG
50755: PUSH
50756: LD_INT 4
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: LD_INT 4
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 4
50778: NEG
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 4
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 5
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 4
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 4
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 5
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 3
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 5
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 4
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 4
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 2
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 4
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 4
50985: PUSH
50986: LD_INT 4
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 4
50995: PUSH
50996: LD_INT 3
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 5
51005: PUSH
51006: LD_INT 4
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 5
51015: PUSH
51016: LD_INT 5
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 4
51025: PUSH
51026: LD_INT 5
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 3
51035: PUSH
51036: LD_INT 4
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 5
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 5
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51120: LD_ADDR_VAR 0 33
51124: PUSH
51125: LD_INT 4
51127: NEG
51128: PUSH
51129: LD_INT 4
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 4
51139: NEG
51140: PUSH
51141: LD_INT 5
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: LD_INT 4
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 3
51163: NEG
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 4
51175: NEG
51176: PUSH
51177: LD_INT 3
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 5
51187: NEG
51188: PUSH
51189: LD_INT 4
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 5
51199: NEG
51200: PUSH
51201: LD_INT 5
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 3
51211: NEG
51212: PUSH
51213: LD_INT 5
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 5
51223: NEG
51224: PUSH
51225: LD_INT 3
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 3
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: LD_INT 4
51249: NEG
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 3
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 4
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: LD_INT 4
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 4
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 4
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 5
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 5
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 4
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 3
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 3
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 3
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 5
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 3
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 4
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 4
51460: PUSH
51461: LD_INT 4
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: LD_INT 4
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: LD_INT 2
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 4
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 4
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 4
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 4
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: LD_INT 5
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 5
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: LD_INT 4
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 3
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 5
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: LD_INT 3
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51658: LD_ADDR_VAR 0 34
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 4
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 5
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 4
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 3
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 3
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 4
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 5
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 5
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 3
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 3
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 4
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 4
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 4
51850: PUSH
51851: LD_INT 2
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 4
51860: PUSH
51861: LD_INT 4
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 4
51870: PUSH
51871: LD_INT 3
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 5
51880: PUSH
51881: LD_INT 4
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 5
51890: PUSH
51891: LD_INT 5
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 4
51900: PUSH
51901: LD_INT 5
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 3
51910: PUSH
51911: LD_INT 4
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 5
51930: PUSH
51931: LD_INT 3
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 3
51940: PUSH
51941: LD_INT 5
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 3
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: LD_INT 4
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: LD_INT 4
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 4
52043: NEG
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 4
52054: NEG
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 4
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 5
52099: NEG
52100: PUSH
52101: LD_INT 0
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 5
52110: NEG
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 5
52122: NEG
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 3
52134: NEG
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: ST_TO_ADDR
// end ; end ;
52190: GO 52193
52192: POP
// case btype of b_depot , b_warehouse :
52193: LD_VAR 0 1
52197: PUSH
52198: LD_INT 0
52200: DOUBLE
52201: EQUAL
52202: IFTRUE 52212
52204: LD_INT 1
52206: DOUBLE
52207: EQUAL
52208: IFTRUE 52212
52210: GO 52413
52212: POP
// case nation of nation_american :
52213: LD_VAR 0 5
52217: PUSH
52218: LD_INT 1
52220: DOUBLE
52221: EQUAL
52222: IFTRUE 52226
52224: GO 52282
52226: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52227: LD_ADDR_VAR 0 9
52231: PUSH
52232: LD_VAR 0 11
52236: PUSH
52237: LD_VAR 0 12
52241: PUSH
52242: LD_VAR 0 13
52246: PUSH
52247: LD_VAR 0 14
52251: PUSH
52252: LD_VAR 0 15
52256: PUSH
52257: LD_VAR 0 16
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: PUSH
52270: LD_VAR 0 4
52274: PUSH
52275: LD_INT 1
52277: PLUS
52278: ARRAY
52279: ST_TO_ADDR
52280: GO 52411
52282: LD_INT 2
52284: DOUBLE
52285: EQUAL
52286: IFTRUE 52290
52288: GO 52346
52290: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52291: LD_ADDR_VAR 0 9
52295: PUSH
52296: LD_VAR 0 17
52300: PUSH
52301: LD_VAR 0 18
52305: PUSH
52306: LD_VAR 0 19
52310: PUSH
52311: LD_VAR 0 20
52315: PUSH
52316: LD_VAR 0 21
52320: PUSH
52321: LD_VAR 0 22
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: PUSH
52334: LD_VAR 0 4
52338: PUSH
52339: LD_INT 1
52341: PLUS
52342: ARRAY
52343: ST_TO_ADDR
52344: GO 52411
52346: LD_INT 3
52348: DOUBLE
52349: EQUAL
52350: IFTRUE 52354
52352: GO 52410
52354: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52355: LD_ADDR_VAR 0 9
52359: PUSH
52360: LD_VAR 0 23
52364: PUSH
52365: LD_VAR 0 24
52369: PUSH
52370: LD_VAR 0 25
52374: PUSH
52375: LD_VAR 0 26
52379: PUSH
52380: LD_VAR 0 27
52384: PUSH
52385: LD_VAR 0 28
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: PUSH
52398: LD_VAR 0 4
52402: PUSH
52403: LD_INT 1
52405: PLUS
52406: ARRAY
52407: ST_TO_ADDR
52408: GO 52411
52410: POP
52411: GO 52966
52413: LD_INT 2
52415: DOUBLE
52416: EQUAL
52417: IFTRUE 52427
52419: LD_INT 3
52421: DOUBLE
52422: EQUAL
52423: IFTRUE 52427
52425: GO 52483
52427: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52428: LD_ADDR_VAR 0 9
52432: PUSH
52433: LD_VAR 0 29
52437: PUSH
52438: LD_VAR 0 30
52442: PUSH
52443: LD_VAR 0 31
52447: PUSH
52448: LD_VAR 0 32
52452: PUSH
52453: LD_VAR 0 33
52457: PUSH
52458: LD_VAR 0 34
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: PUSH
52471: LD_VAR 0 4
52475: PUSH
52476: LD_INT 1
52478: PLUS
52479: ARRAY
52480: ST_TO_ADDR
52481: GO 52966
52483: LD_INT 16
52485: DOUBLE
52486: EQUAL
52487: IFTRUE 52545
52489: LD_INT 17
52491: DOUBLE
52492: EQUAL
52493: IFTRUE 52545
52495: LD_INT 18
52497: DOUBLE
52498: EQUAL
52499: IFTRUE 52545
52501: LD_INT 19
52503: DOUBLE
52504: EQUAL
52505: IFTRUE 52545
52507: LD_INT 22
52509: DOUBLE
52510: EQUAL
52511: IFTRUE 52545
52513: LD_INT 20
52515: DOUBLE
52516: EQUAL
52517: IFTRUE 52545
52519: LD_INT 21
52521: DOUBLE
52522: EQUAL
52523: IFTRUE 52545
52525: LD_INT 23
52527: DOUBLE
52528: EQUAL
52529: IFTRUE 52545
52531: LD_INT 24
52533: DOUBLE
52534: EQUAL
52535: IFTRUE 52545
52537: LD_INT 25
52539: DOUBLE
52540: EQUAL
52541: IFTRUE 52545
52543: GO 52601
52545: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52546: LD_ADDR_VAR 0 9
52550: PUSH
52551: LD_VAR 0 35
52555: PUSH
52556: LD_VAR 0 36
52560: PUSH
52561: LD_VAR 0 37
52565: PUSH
52566: LD_VAR 0 38
52570: PUSH
52571: LD_VAR 0 39
52575: PUSH
52576: LD_VAR 0 40
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: PUSH
52589: LD_VAR 0 4
52593: PUSH
52594: LD_INT 1
52596: PLUS
52597: ARRAY
52598: ST_TO_ADDR
52599: GO 52966
52601: LD_INT 6
52603: DOUBLE
52604: EQUAL
52605: IFTRUE 52657
52607: LD_INT 7
52609: DOUBLE
52610: EQUAL
52611: IFTRUE 52657
52613: LD_INT 8
52615: DOUBLE
52616: EQUAL
52617: IFTRUE 52657
52619: LD_INT 13
52621: DOUBLE
52622: EQUAL
52623: IFTRUE 52657
52625: LD_INT 12
52627: DOUBLE
52628: EQUAL
52629: IFTRUE 52657
52631: LD_INT 15
52633: DOUBLE
52634: EQUAL
52635: IFTRUE 52657
52637: LD_INT 11
52639: DOUBLE
52640: EQUAL
52641: IFTRUE 52657
52643: LD_INT 14
52645: DOUBLE
52646: EQUAL
52647: IFTRUE 52657
52649: LD_INT 10
52651: DOUBLE
52652: EQUAL
52653: IFTRUE 52657
52655: GO 52713
52657: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52658: LD_ADDR_VAR 0 9
52662: PUSH
52663: LD_VAR 0 41
52667: PUSH
52668: LD_VAR 0 42
52672: PUSH
52673: LD_VAR 0 43
52677: PUSH
52678: LD_VAR 0 44
52682: PUSH
52683: LD_VAR 0 45
52687: PUSH
52688: LD_VAR 0 46
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: PUSH
52701: LD_VAR 0 4
52705: PUSH
52706: LD_INT 1
52708: PLUS
52709: ARRAY
52710: ST_TO_ADDR
52711: GO 52966
52713: LD_INT 36
52715: DOUBLE
52716: EQUAL
52717: IFTRUE 52721
52719: GO 52777
52721: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52722: LD_ADDR_VAR 0 9
52726: PUSH
52727: LD_VAR 0 47
52731: PUSH
52732: LD_VAR 0 48
52736: PUSH
52737: LD_VAR 0 49
52741: PUSH
52742: LD_VAR 0 50
52746: PUSH
52747: LD_VAR 0 51
52751: PUSH
52752: LD_VAR 0 52
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: PUSH
52765: LD_VAR 0 4
52769: PUSH
52770: LD_INT 1
52772: PLUS
52773: ARRAY
52774: ST_TO_ADDR
52775: GO 52966
52777: LD_INT 4
52779: DOUBLE
52780: EQUAL
52781: IFTRUE 52803
52783: LD_INT 5
52785: DOUBLE
52786: EQUAL
52787: IFTRUE 52803
52789: LD_INT 34
52791: DOUBLE
52792: EQUAL
52793: IFTRUE 52803
52795: LD_INT 37
52797: DOUBLE
52798: EQUAL
52799: IFTRUE 52803
52801: GO 52859
52803: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52804: LD_ADDR_VAR 0 9
52808: PUSH
52809: LD_VAR 0 53
52813: PUSH
52814: LD_VAR 0 54
52818: PUSH
52819: LD_VAR 0 55
52823: PUSH
52824: LD_VAR 0 56
52828: PUSH
52829: LD_VAR 0 57
52833: PUSH
52834: LD_VAR 0 58
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: PUSH
52847: LD_VAR 0 4
52851: PUSH
52852: LD_INT 1
52854: PLUS
52855: ARRAY
52856: ST_TO_ADDR
52857: GO 52966
52859: LD_INT 31
52861: DOUBLE
52862: EQUAL
52863: IFTRUE 52909
52865: LD_INT 32
52867: DOUBLE
52868: EQUAL
52869: IFTRUE 52909
52871: LD_INT 33
52873: DOUBLE
52874: EQUAL
52875: IFTRUE 52909
52877: LD_INT 27
52879: DOUBLE
52880: EQUAL
52881: IFTRUE 52909
52883: LD_INT 26
52885: DOUBLE
52886: EQUAL
52887: IFTRUE 52909
52889: LD_INT 28
52891: DOUBLE
52892: EQUAL
52893: IFTRUE 52909
52895: LD_INT 29
52897: DOUBLE
52898: EQUAL
52899: IFTRUE 52909
52901: LD_INT 30
52903: DOUBLE
52904: EQUAL
52905: IFTRUE 52909
52907: GO 52965
52909: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52910: LD_ADDR_VAR 0 9
52914: PUSH
52915: LD_VAR 0 59
52919: PUSH
52920: LD_VAR 0 60
52924: PUSH
52925: LD_VAR 0 61
52929: PUSH
52930: LD_VAR 0 62
52934: PUSH
52935: LD_VAR 0 63
52939: PUSH
52940: LD_VAR 0 64
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: PUSH
52953: LD_VAR 0 4
52957: PUSH
52958: LD_INT 1
52960: PLUS
52961: ARRAY
52962: ST_TO_ADDR
52963: GO 52966
52965: POP
// temp_list2 = [ ] ;
52966: LD_ADDR_VAR 0 10
52970: PUSH
52971: EMPTY
52972: ST_TO_ADDR
// for i in temp_list do
52973: LD_ADDR_VAR 0 8
52977: PUSH
52978: LD_VAR 0 9
52982: PUSH
52983: FOR_IN
52984: IFFALSE 53036
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52986: LD_ADDR_VAR 0 10
52990: PUSH
52991: LD_VAR 0 10
52995: PUSH
52996: LD_VAR 0 8
53000: PUSH
53001: LD_INT 1
53003: ARRAY
53004: PUSH
53005: LD_VAR 0 2
53009: PLUS
53010: PUSH
53011: LD_VAR 0 8
53015: PUSH
53016: LD_INT 2
53018: ARRAY
53019: PUSH
53020: LD_VAR 0 3
53024: PLUS
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: EMPTY
53031: LIST
53032: ADD
53033: ST_TO_ADDR
53034: GO 52983
53036: POP
53037: POP
// result = temp_list2 ;
53038: LD_ADDR_VAR 0 7
53042: PUSH
53043: LD_VAR 0 10
53047: ST_TO_ADDR
// end ;
53048: LD_VAR 0 7
53052: RET
// export function EnemyInRange ( unit , dist ) ; begin
53053: LD_INT 0
53055: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53056: LD_ADDR_VAR 0 3
53060: PUSH
53061: LD_VAR 0 1
53065: PPUSH
53066: CALL_OW 255
53070: PPUSH
53071: LD_VAR 0 1
53075: PPUSH
53076: CALL_OW 250
53080: PPUSH
53081: LD_VAR 0 1
53085: PPUSH
53086: CALL_OW 251
53090: PPUSH
53091: LD_VAR 0 2
53095: PPUSH
53096: CALL 26310 0 4
53100: PUSH
53101: LD_INT 4
53103: ARRAY
53104: ST_TO_ADDR
// end ;
53105: LD_VAR 0 3
53109: RET
// export function PlayerSeeMe ( unit ) ; begin
53110: LD_INT 0
53112: PPUSH
// result := See ( your_side , unit ) ;
53113: LD_ADDR_VAR 0 2
53117: PUSH
53118: LD_OWVAR 2
53122: PPUSH
53123: LD_VAR 0 1
53127: PPUSH
53128: CALL_OW 292
53132: ST_TO_ADDR
// end ;
53133: LD_VAR 0 2
53137: RET
// export function ReverseDir ( unit ) ; begin
53138: LD_INT 0
53140: PPUSH
// if not unit then
53141: LD_VAR 0 1
53145: NOT
53146: IFFALSE 53150
// exit ;
53148: GO 53173
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53150: LD_ADDR_VAR 0 2
53154: PUSH
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL_OW 254
53164: PUSH
53165: LD_INT 3
53167: PLUS
53168: PUSH
53169: LD_INT 6
53171: MOD
53172: ST_TO_ADDR
// end ;
53173: LD_VAR 0 2
53177: RET
// export function ReverseArray ( array ) ; var i ; begin
53178: LD_INT 0
53180: PPUSH
53181: PPUSH
// if not array then
53182: LD_VAR 0 1
53186: NOT
53187: IFFALSE 53191
// exit ;
53189: GO 53246
// result := [ ] ;
53191: LD_ADDR_VAR 0 2
53195: PUSH
53196: EMPTY
53197: ST_TO_ADDR
// for i := array downto 1 do
53198: LD_ADDR_VAR 0 3
53202: PUSH
53203: DOUBLE
53204: LD_VAR 0 1
53208: INC
53209: ST_TO_ADDR
53210: LD_INT 1
53212: PUSH
53213: FOR_DOWNTO
53214: IFFALSE 53244
// result := Join ( result , array [ i ] ) ;
53216: LD_ADDR_VAR 0 2
53220: PUSH
53221: LD_VAR 0 2
53225: PPUSH
53226: LD_VAR 0 1
53230: PUSH
53231: LD_VAR 0 3
53235: ARRAY
53236: PPUSH
53237: CALL 58098 0 2
53241: ST_TO_ADDR
53242: GO 53213
53244: POP
53245: POP
// end ;
53246: LD_VAR 0 2
53250: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53251: LD_INT 0
53253: PPUSH
53254: PPUSH
53255: PPUSH
53256: PPUSH
53257: PPUSH
53258: PPUSH
// if not unit or not hexes then
53259: LD_VAR 0 1
53263: NOT
53264: IFTRUE 53273
53266: PUSH
53267: LD_VAR 0 2
53271: NOT
53272: OR
53273: IFFALSE 53277
// exit ;
53275: GO 53400
// dist := 9999 ;
53277: LD_ADDR_VAR 0 5
53281: PUSH
53282: LD_INT 9999
53284: ST_TO_ADDR
// for i = 1 to hexes do
53285: LD_ADDR_VAR 0 4
53289: PUSH
53290: DOUBLE
53291: LD_INT 1
53293: DEC
53294: ST_TO_ADDR
53295: LD_VAR 0 2
53299: PUSH
53300: FOR_TO
53301: IFFALSE 53388
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53303: LD_ADDR_VAR 0 6
53307: PUSH
53308: LD_VAR 0 1
53312: PPUSH
53313: LD_VAR 0 2
53317: PUSH
53318: LD_VAR 0 4
53322: ARRAY
53323: PUSH
53324: LD_INT 1
53326: ARRAY
53327: PPUSH
53328: LD_VAR 0 2
53332: PUSH
53333: LD_VAR 0 4
53337: ARRAY
53338: PUSH
53339: LD_INT 2
53341: ARRAY
53342: PPUSH
53343: CALL_OW 297
53347: ST_TO_ADDR
// if tdist < dist then
53348: LD_VAR 0 6
53352: PUSH
53353: LD_VAR 0 5
53357: LESS
53358: IFFALSE 53386
// begin hex := hexes [ i ] ;
53360: LD_ADDR_VAR 0 8
53364: PUSH
53365: LD_VAR 0 2
53369: PUSH
53370: LD_VAR 0 4
53374: ARRAY
53375: ST_TO_ADDR
// dist := tdist ;
53376: LD_ADDR_VAR 0 5
53380: PUSH
53381: LD_VAR 0 6
53385: ST_TO_ADDR
// end ; end ;
53386: GO 53300
53388: POP
53389: POP
// result := hex ;
53390: LD_ADDR_VAR 0 3
53394: PUSH
53395: LD_VAR 0 8
53399: ST_TO_ADDR
// end ;
53400: LD_VAR 0 3
53404: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53405: LD_INT 0
53407: PPUSH
53408: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53409: LD_VAR 0 1
53413: NOT
53414: IFTRUE 53453
53416: PUSH
53417: LD_VAR 0 1
53421: PUSH
53422: LD_INT 21
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 23
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PPUSH
53446: CALL_OW 69
53450: IN
53451: NOT
53452: OR
53453: IFFALSE 53457
// exit ;
53455: GO 53504
// for i = 1 to 3 do
53457: LD_ADDR_VAR 0 3
53461: PUSH
53462: DOUBLE
53463: LD_INT 1
53465: DEC
53466: ST_TO_ADDR
53467: LD_INT 3
53469: PUSH
53470: FOR_TO
53471: IFFALSE 53502
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53473: LD_VAR 0 1
53477: PPUSH
53478: CALL_OW 250
53482: PPUSH
53483: LD_VAR 0 1
53487: PPUSH
53488: CALL_OW 251
53492: PPUSH
53493: LD_INT 1
53495: PPUSH
53496: CALL_OW 453
53500: GO 53470
53502: POP
53503: POP
// end ;
53504: LD_VAR 0 2
53508: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53509: LD_INT 0
53511: PPUSH
53512: PPUSH
53513: PPUSH
53514: PPUSH
53515: PPUSH
53516: PPUSH
// if not unit or not enemy_unit then
53517: LD_VAR 0 1
53521: NOT
53522: IFTRUE 53531
53524: PUSH
53525: LD_VAR 0 2
53529: NOT
53530: OR
53531: IFFALSE 53535
// exit ;
53533: GO 54016
// if GetLives ( i ) < 250 then
53535: LD_VAR 0 4
53539: PPUSH
53540: CALL_OW 256
53544: PUSH
53545: LD_INT 250
53547: LESS
53548: IFFALSE 53561
// begin ComAutodestruct ( i ) ;
53550: LD_VAR 0 4
53554: PPUSH
53555: CALL 53405 0 1
// exit ;
53559: GO 54016
// end ; x := GetX ( enemy_unit ) ;
53561: LD_ADDR_VAR 0 7
53565: PUSH
53566: LD_VAR 0 2
53570: PPUSH
53571: CALL_OW 250
53575: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53576: LD_ADDR_VAR 0 8
53580: PUSH
53581: LD_VAR 0 2
53585: PPUSH
53586: CALL_OW 251
53590: ST_TO_ADDR
// if not x or not y then
53591: LD_VAR 0 7
53595: NOT
53596: IFTRUE 53605
53598: PUSH
53599: LD_VAR 0 8
53603: NOT
53604: OR
53605: IFFALSE 53609
// exit ;
53607: GO 54016
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53609: LD_ADDR_VAR 0 6
53613: PUSH
53614: LD_VAR 0 7
53618: PPUSH
53619: LD_INT 0
53621: PPUSH
53622: LD_INT 4
53624: PPUSH
53625: CALL_OW 272
53629: PUSH
53630: LD_VAR 0 8
53634: PPUSH
53635: LD_INT 0
53637: PPUSH
53638: LD_INT 4
53640: PPUSH
53641: CALL_OW 273
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_VAR 0 7
53654: PPUSH
53655: LD_INT 1
53657: PPUSH
53658: LD_INT 4
53660: PPUSH
53661: CALL_OW 272
53665: PUSH
53666: LD_VAR 0 8
53670: PPUSH
53671: LD_INT 1
53673: PPUSH
53674: LD_INT 4
53676: PPUSH
53677: CALL_OW 273
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_VAR 0 7
53690: PPUSH
53691: LD_INT 2
53693: PPUSH
53694: LD_INT 4
53696: PPUSH
53697: CALL_OW 272
53701: PUSH
53702: LD_VAR 0 8
53706: PPUSH
53707: LD_INT 2
53709: PPUSH
53710: LD_INT 4
53712: PPUSH
53713: CALL_OW 273
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_VAR 0 7
53726: PPUSH
53727: LD_INT 3
53729: PPUSH
53730: LD_INT 4
53732: PPUSH
53733: CALL_OW 272
53737: PUSH
53738: LD_VAR 0 8
53742: PPUSH
53743: LD_INT 3
53745: PPUSH
53746: LD_INT 4
53748: PPUSH
53749: CALL_OW 273
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_VAR 0 7
53762: PPUSH
53763: LD_INT 4
53765: PPUSH
53766: LD_INT 4
53768: PPUSH
53769: CALL_OW 272
53773: PUSH
53774: LD_VAR 0 8
53778: PPUSH
53779: LD_INT 4
53781: PPUSH
53782: LD_INT 4
53784: PPUSH
53785: CALL_OW 273
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_VAR 0 7
53798: PPUSH
53799: LD_INT 5
53801: PPUSH
53802: LD_INT 4
53804: PPUSH
53805: CALL_OW 272
53809: PUSH
53810: LD_VAR 0 8
53814: PPUSH
53815: LD_INT 5
53817: PPUSH
53818: LD_INT 4
53820: PPUSH
53821: CALL_OW 273
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: ST_TO_ADDR
// for i = tmp downto 1 do
53838: LD_ADDR_VAR 0 4
53842: PUSH
53843: DOUBLE
53844: LD_VAR 0 6
53848: INC
53849: ST_TO_ADDR
53850: LD_INT 1
53852: PUSH
53853: FOR_DOWNTO
53854: IFFALSE 53957
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53856: LD_VAR 0 6
53860: PUSH
53861: LD_VAR 0 4
53865: ARRAY
53866: PUSH
53867: LD_INT 1
53869: ARRAY
53870: PPUSH
53871: LD_VAR 0 6
53875: PUSH
53876: LD_VAR 0 4
53880: ARRAY
53881: PUSH
53882: LD_INT 2
53884: ARRAY
53885: PPUSH
53886: CALL_OW 488
53890: NOT
53891: IFTRUE 53933
53893: PUSH
53894: LD_VAR 0 6
53898: PUSH
53899: LD_VAR 0 4
53903: ARRAY
53904: PUSH
53905: LD_INT 1
53907: ARRAY
53908: PPUSH
53909: LD_VAR 0 6
53913: PUSH
53914: LD_VAR 0 4
53918: ARRAY
53919: PUSH
53920: LD_INT 2
53922: ARRAY
53923: PPUSH
53924: CALL_OW 428
53928: PUSH
53929: LD_INT 0
53931: NONEQUAL
53932: OR
53933: IFFALSE 53955
// tmp := Delete ( tmp , i ) ;
53935: LD_ADDR_VAR 0 6
53939: PUSH
53940: LD_VAR 0 6
53944: PPUSH
53945: LD_VAR 0 4
53949: PPUSH
53950: CALL_OW 3
53954: ST_TO_ADDR
53955: GO 53853
53957: POP
53958: POP
// j := GetClosestHex ( unit , tmp ) ;
53959: LD_ADDR_VAR 0 5
53963: PUSH
53964: LD_VAR 0 1
53968: PPUSH
53969: LD_VAR 0 6
53973: PPUSH
53974: CALL 53251 0 2
53978: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53979: LD_VAR 0 1
53983: PPUSH
53984: LD_VAR 0 5
53988: PUSH
53989: LD_INT 1
53991: ARRAY
53992: PPUSH
53993: LD_VAR 0 5
53997: PUSH
53998: LD_INT 2
54000: ARRAY
54001: PPUSH
54002: CALL_OW 111
// result := j ;
54006: LD_ADDR_VAR 0 3
54010: PUSH
54011: LD_VAR 0 5
54015: ST_TO_ADDR
// end ;
54016: LD_VAR 0 3
54020: RET
// export function PrepareApemanSoldier ( ) ; begin
54021: LD_INT 0
54023: PPUSH
// uc_nation := 0 ;
54024: LD_ADDR_OWVAR 21
54028: PUSH
54029: LD_INT 0
54031: ST_TO_ADDR
// hc_sex := sex_male ;
54032: LD_ADDR_OWVAR 27
54036: PUSH
54037: LD_INT 1
54039: ST_TO_ADDR
// hc_name :=  ;
54040: LD_ADDR_OWVAR 26
54044: PUSH
54045: LD_STRING 
54047: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54048: LD_ADDR_OWVAR 28
54052: PUSH
54053: LD_INT 15
54055: ST_TO_ADDR
// hc_gallery :=  ;
54056: LD_ADDR_OWVAR 33
54060: PUSH
54061: LD_STRING 
54063: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54064: LD_ADDR_OWVAR 31
54068: PUSH
54069: LD_INT 0
54071: PPUSH
54072: LD_INT 3
54074: PPUSH
54075: CALL_OW 12
54079: PUSH
54080: LD_INT 0
54082: PPUSH
54083: LD_INT 3
54085: PPUSH
54086: CALL_OW 12
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
54103: LD_ADDR_OWVAR 29
54107: PUSH
54108: LD_INT 10
54110: PUSH
54111: LD_INT 12
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: ST_TO_ADDR
// end ;
54118: LD_VAR 0 1
54122: RET
// export function PrepareApemanEngineer ( ) ; begin
54123: LD_INT 0
54125: PPUSH
// uc_nation := 0 ;
54126: LD_ADDR_OWVAR 21
54130: PUSH
54131: LD_INT 0
54133: ST_TO_ADDR
// hc_sex := sex_male ;
54134: LD_ADDR_OWVAR 27
54138: PUSH
54139: LD_INT 1
54141: ST_TO_ADDR
// hc_name :=  ;
54142: LD_ADDR_OWVAR 26
54146: PUSH
54147: LD_STRING 
54149: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54150: LD_ADDR_OWVAR 28
54154: PUSH
54155: LD_INT 16
54157: ST_TO_ADDR
// hc_gallery :=  ;
54158: LD_ADDR_OWVAR 33
54162: PUSH
54163: LD_STRING 
54165: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54166: LD_ADDR_OWVAR 31
54170: PUSH
54171: LD_INT 0
54173: PPUSH
54174: LD_INT 3
54176: PPUSH
54177: CALL_OW 12
54181: PUSH
54182: LD_INT 0
54184: PPUSH
54185: LD_INT 3
54187: PPUSH
54188: CALL_OW 12
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
54205: LD_ADDR_OWVAR 29
54209: PUSH
54210: LD_INT 10
54212: PUSH
54213: LD_INT 12
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: ST_TO_ADDR
// end ;
54220: LD_VAR 0 1
54224: RET
// export function PrepareApeman ( agressivity ) ; begin
54225: LD_INT 0
54227: PPUSH
// uc_side := 0 ;
54228: LD_ADDR_OWVAR 20
54232: PUSH
54233: LD_INT 0
54235: ST_TO_ADDR
// uc_nation := 0 ;
54236: LD_ADDR_OWVAR 21
54240: PUSH
54241: LD_INT 0
54243: ST_TO_ADDR
// hc_sex := sex_male ;
54244: LD_ADDR_OWVAR 27
54248: PUSH
54249: LD_INT 1
54251: ST_TO_ADDR
// hc_class := class_apeman ;
54252: LD_ADDR_OWVAR 28
54256: PUSH
54257: LD_INT 12
54259: ST_TO_ADDR
// hc_gallery :=  ;
54260: LD_ADDR_OWVAR 33
54264: PUSH
54265: LD_STRING 
54267: ST_TO_ADDR
// hc_name :=  ;
54268: LD_ADDR_OWVAR 26
54272: PUSH
54273: LD_STRING 
54275: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
54276: LD_ADDR_OWVAR 29
54280: PUSH
54281: LD_INT 10
54283: PUSH
54284: LD_INT 12
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: ST_TO_ADDR
// if agressivity = 0 then
54291: LD_VAR 0 1
54295: PUSH
54296: LD_INT 0
54298: EQUAL
54299: IFFALSE 54311
// hc_agressivity := 0 else
54301: LD_ADDR_OWVAR 35
54305: PUSH
54306: LD_INT 0
54308: ST_TO_ADDR
54309: GO 54332
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54311: LD_ADDR_OWVAR 35
54315: PUSH
54316: LD_VAR 0 1
54320: NEG
54321: PPUSH
54322: LD_VAR 0 1
54326: PPUSH
54327: CALL_OW 12
54331: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54332: LD_ADDR_OWVAR 31
54336: PUSH
54337: LD_INT 0
54339: PPUSH
54340: LD_INT 3
54342: PPUSH
54343: CALL_OW 12
54347: PUSH
54348: LD_INT 0
54350: PPUSH
54351: LD_INT 3
54353: PPUSH
54354: CALL_OW 12
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: ST_TO_ADDR
// end ;
54371: LD_VAR 0 2
54375: RET
// export function PrepareTiger ( agressivity ) ; begin
54376: LD_INT 0
54378: PPUSH
// uc_side := 0 ;
54379: LD_ADDR_OWVAR 20
54383: PUSH
54384: LD_INT 0
54386: ST_TO_ADDR
// uc_nation := 0 ;
54387: LD_ADDR_OWVAR 21
54391: PUSH
54392: LD_INT 0
54394: ST_TO_ADDR
// InitHc ;
54395: CALL_OW 19
// hc_class := class_tiger ;
54399: LD_ADDR_OWVAR 28
54403: PUSH
54404: LD_INT 14
54406: ST_TO_ADDR
// hc_gallery :=  ;
54407: LD_ADDR_OWVAR 33
54411: PUSH
54412: LD_STRING 
54414: ST_TO_ADDR
// hc_name :=  ;
54415: LD_ADDR_OWVAR 26
54419: PUSH
54420: LD_STRING 
54422: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54423: LD_ADDR_OWVAR 35
54427: PUSH
54428: LD_VAR 0 1
54432: NEG
54433: PPUSH
54434: LD_VAR 0 1
54438: PPUSH
54439: CALL_OW 12
54443: ST_TO_ADDR
// end ;
54444: LD_VAR 0 2
54448: RET
// export function PrepareEnchidna ( ) ; begin
54449: LD_INT 0
54451: PPUSH
// uc_side := 0 ;
54452: LD_ADDR_OWVAR 20
54456: PUSH
54457: LD_INT 0
54459: ST_TO_ADDR
// uc_nation := 0 ;
54460: LD_ADDR_OWVAR 21
54464: PUSH
54465: LD_INT 0
54467: ST_TO_ADDR
// InitHc ;
54468: CALL_OW 19
// hc_class := class_baggie ;
54472: LD_ADDR_OWVAR 28
54476: PUSH
54477: LD_INT 13
54479: ST_TO_ADDR
// hc_gallery :=  ;
54480: LD_ADDR_OWVAR 33
54484: PUSH
54485: LD_STRING 
54487: ST_TO_ADDR
// hc_name :=  ;
54488: LD_ADDR_OWVAR 26
54492: PUSH
54493: LD_STRING 
54495: ST_TO_ADDR
// end ;
54496: LD_VAR 0 1
54500: RET
// export function PrepareFrog ( ) ; begin
54501: LD_INT 0
54503: PPUSH
// uc_side := 0 ;
54504: LD_ADDR_OWVAR 20
54508: PUSH
54509: LD_INT 0
54511: ST_TO_ADDR
// uc_nation := 0 ;
54512: LD_ADDR_OWVAR 21
54516: PUSH
54517: LD_INT 0
54519: ST_TO_ADDR
// InitHc ;
54520: CALL_OW 19
// hc_class := class_frog ;
54524: LD_ADDR_OWVAR 28
54528: PUSH
54529: LD_INT 19
54531: ST_TO_ADDR
// hc_gallery :=  ;
54532: LD_ADDR_OWVAR 33
54536: PUSH
54537: LD_STRING 
54539: ST_TO_ADDR
// hc_name :=  ;
54540: LD_ADDR_OWVAR 26
54544: PUSH
54545: LD_STRING 
54547: ST_TO_ADDR
// end ;
54548: LD_VAR 0 1
54552: RET
// export function PrepareFish ( ) ; begin
54553: LD_INT 0
54555: PPUSH
// uc_side := 0 ;
54556: LD_ADDR_OWVAR 20
54560: PUSH
54561: LD_INT 0
54563: ST_TO_ADDR
// uc_nation := 0 ;
54564: LD_ADDR_OWVAR 21
54568: PUSH
54569: LD_INT 0
54571: ST_TO_ADDR
// InitHc ;
54572: CALL_OW 19
// hc_class := class_fish ;
54576: LD_ADDR_OWVAR 28
54580: PUSH
54581: LD_INT 20
54583: ST_TO_ADDR
// hc_gallery :=  ;
54584: LD_ADDR_OWVAR 33
54588: PUSH
54589: LD_STRING 
54591: ST_TO_ADDR
// hc_name :=  ;
54592: LD_ADDR_OWVAR 26
54596: PUSH
54597: LD_STRING 
54599: ST_TO_ADDR
// end ;
54600: LD_VAR 0 1
54604: RET
// export function PrepareBird ( ) ; begin
54605: LD_INT 0
54607: PPUSH
// uc_side := 0 ;
54608: LD_ADDR_OWVAR 20
54612: PUSH
54613: LD_INT 0
54615: ST_TO_ADDR
// uc_nation := 0 ;
54616: LD_ADDR_OWVAR 21
54620: PUSH
54621: LD_INT 0
54623: ST_TO_ADDR
// InitHc ;
54624: CALL_OW 19
// hc_class := class_phororhacos ;
54628: LD_ADDR_OWVAR 28
54632: PUSH
54633: LD_INT 18
54635: ST_TO_ADDR
// hc_gallery :=  ;
54636: LD_ADDR_OWVAR 33
54640: PUSH
54641: LD_STRING 
54643: ST_TO_ADDR
// hc_name :=  ;
54644: LD_ADDR_OWVAR 26
54648: PUSH
54649: LD_STRING 
54651: ST_TO_ADDR
// end ;
54652: LD_VAR 0 1
54656: RET
// export function PrepareHorse ( ) ; begin
54657: LD_INT 0
54659: PPUSH
// uc_side := 0 ;
54660: LD_ADDR_OWVAR 20
54664: PUSH
54665: LD_INT 0
54667: ST_TO_ADDR
// uc_nation := 0 ;
54668: LD_ADDR_OWVAR 21
54672: PUSH
54673: LD_INT 0
54675: ST_TO_ADDR
// InitHc ;
54676: CALL_OW 19
// hc_class := class_horse ;
54680: LD_ADDR_OWVAR 28
54684: PUSH
54685: LD_INT 21
54687: ST_TO_ADDR
// hc_gallery :=  ;
54688: LD_ADDR_OWVAR 33
54692: PUSH
54693: LD_STRING 
54695: ST_TO_ADDR
// hc_name :=  ;
54696: LD_ADDR_OWVAR 26
54700: PUSH
54701: LD_STRING 
54703: ST_TO_ADDR
// end ;
54704: LD_VAR 0 1
54708: RET
// export function PrepareMastodont ( ) ; begin
54709: LD_INT 0
54711: PPUSH
// uc_side := 0 ;
54712: LD_ADDR_OWVAR 20
54716: PUSH
54717: LD_INT 0
54719: ST_TO_ADDR
// uc_nation := 0 ;
54720: LD_ADDR_OWVAR 21
54724: PUSH
54725: LD_INT 0
54727: ST_TO_ADDR
// vc_chassis := class_mastodont ;
54728: LD_ADDR_OWVAR 37
54732: PUSH
54733: LD_INT 31
54735: ST_TO_ADDR
// vc_control := control_rider ;
54736: LD_ADDR_OWVAR 38
54740: PUSH
54741: LD_INT 4
54743: ST_TO_ADDR
// end ;
54744: LD_VAR 0 1
54748: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54749: LD_INT 0
54751: PPUSH
54752: PPUSH
54753: PPUSH
// uc_side = 0 ;
54754: LD_ADDR_OWVAR 20
54758: PUSH
54759: LD_INT 0
54761: ST_TO_ADDR
// uc_nation = 0 ;
54762: LD_ADDR_OWVAR 21
54766: PUSH
54767: LD_INT 0
54769: ST_TO_ADDR
// InitHc_All ( ) ;
54770: CALL_OW 584
// InitVc ;
54774: CALL_OW 20
// if mastodonts then
54778: LD_VAR 0 6
54782: IFFALSE 54849
// for i = 1 to mastodonts do
54784: LD_ADDR_VAR 0 11
54788: PUSH
54789: DOUBLE
54790: LD_INT 1
54792: DEC
54793: ST_TO_ADDR
54794: LD_VAR 0 6
54798: PUSH
54799: FOR_TO
54800: IFFALSE 54847
// begin vc_chassis := 31 ;
54802: LD_ADDR_OWVAR 37
54806: PUSH
54807: LD_INT 31
54809: ST_TO_ADDR
// vc_control := control_rider ;
54810: LD_ADDR_OWVAR 38
54814: PUSH
54815: LD_INT 4
54817: ST_TO_ADDR
// animal := CreateVehicle ;
54818: LD_ADDR_VAR 0 12
54822: PUSH
54823: CALL_OW 45
54827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54828: LD_VAR 0 12
54832: PPUSH
54833: LD_VAR 0 8
54837: PPUSH
54838: LD_INT 0
54840: PPUSH
54841: CALL 56991 0 3
// end ;
54845: GO 54799
54847: POP
54848: POP
// if horses then
54849: LD_VAR 0 5
54853: IFFALSE 54920
// for i = 1 to horses do
54855: LD_ADDR_VAR 0 11
54859: PUSH
54860: DOUBLE
54861: LD_INT 1
54863: DEC
54864: ST_TO_ADDR
54865: LD_VAR 0 5
54869: PUSH
54870: FOR_TO
54871: IFFALSE 54918
// begin hc_class := 21 ;
54873: LD_ADDR_OWVAR 28
54877: PUSH
54878: LD_INT 21
54880: ST_TO_ADDR
// hc_gallery :=  ;
54881: LD_ADDR_OWVAR 33
54885: PUSH
54886: LD_STRING 
54888: ST_TO_ADDR
// animal := CreateHuman ;
54889: LD_ADDR_VAR 0 12
54893: PUSH
54894: CALL_OW 44
54898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54899: LD_VAR 0 12
54903: PPUSH
54904: LD_VAR 0 8
54908: PPUSH
54909: LD_INT 0
54911: PPUSH
54912: CALL 56991 0 3
// end ;
54916: GO 54870
54918: POP
54919: POP
// if birds then
54920: LD_VAR 0 1
54924: IFFALSE 54991
// for i = 1 to birds do
54926: LD_ADDR_VAR 0 11
54930: PUSH
54931: DOUBLE
54932: LD_INT 1
54934: DEC
54935: ST_TO_ADDR
54936: LD_VAR 0 1
54940: PUSH
54941: FOR_TO
54942: IFFALSE 54989
// begin hc_class := 18 ;
54944: LD_ADDR_OWVAR 28
54948: PUSH
54949: LD_INT 18
54951: ST_TO_ADDR
// hc_gallery =  ;
54952: LD_ADDR_OWVAR 33
54956: PUSH
54957: LD_STRING 
54959: ST_TO_ADDR
// animal := CreateHuman ;
54960: LD_ADDR_VAR 0 12
54964: PUSH
54965: CALL_OW 44
54969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54970: LD_VAR 0 12
54974: PPUSH
54975: LD_VAR 0 8
54979: PPUSH
54980: LD_INT 0
54982: PPUSH
54983: CALL 56991 0 3
// end ;
54987: GO 54941
54989: POP
54990: POP
// if tigers then
54991: LD_VAR 0 2
54995: IFFALSE 55079
// for i = 1 to tigers do
54997: LD_ADDR_VAR 0 11
55001: PUSH
55002: DOUBLE
55003: LD_INT 1
55005: DEC
55006: ST_TO_ADDR
55007: LD_VAR 0 2
55011: PUSH
55012: FOR_TO
55013: IFFALSE 55077
// begin hc_class = class_tiger ;
55015: LD_ADDR_OWVAR 28
55019: PUSH
55020: LD_INT 14
55022: ST_TO_ADDR
// hc_gallery =  ;
55023: LD_ADDR_OWVAR 33
55027: PUSH
55028: LD_STRING 
55030: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55031: LD_ADDR_OWVAR 35
55035: PUSH
55036: LD_INT 7
55038: NEG
55039: PPUSH
55040: LD_INT 7
55042: PPUSH
55043: CALL_OW 12
55047: ST_TO_ADDR
// animal := CreateHuman ;
55048: LD_ADDR_VAR 0 12
55052: PUSH
55053: CALL_OW 44
55057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55058: LD_VAR 0 12
55062: PPUSH
55063: LD_VAR 0 8
55067: PPUSH
55068: LD_INT 0
55070: PPUSH
55071: CALL 56991 0 3
// end ;
55075: GO 55012
55077: POP
55078: POP
// if apemans then
55079: LD_VAR 0 3
55083: IFFALSE 55206
// for i = 1 to apemans do
55085: LD_ADDR_VAR 0 11
55089: PUSH
55090: DOUBLE
55091: LD_INT 1
55093: DEC
55094: ST_TO_ADDR
55095: LD_VAR 0 3
55099: PUSH
55100: FOR_TO
55101: IFFALSE 55204
// begin hc_class = class_apeman ;
55103: LD_ADDR_OWVAR 28
55107: PUSH
55108: LD_INT 12
55110: ST_TO_ADDR
// hc_gallery =  ;
55111: LD_ADDR_OWVAR 33
55115: PUSH
55116: LD_STRING 
55118: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55119: LD_ADDR_OWVAR 35
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PPUSH
55128: LD_INT 2
55130: PPUSH
55131: CALL_OW 12
55135: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55136: LD_ADDR_OWVAR 31
55140: PUSH
55141: LD_INT 1
55143: PPUSH
55144: LD_INT 3
55146: PPUSH
55147: CALL_OW 12
55151: PUSH
55152: LD_INT 1
55154: PPUSH
55155: LD_INT 3
55157: PPUSH
55158: CALL_OW 12
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// animal := CreateHuman ;
55175: LD_ADDR_VAR 0 12
55179: PUSH
55180: CALL_OW 44
55184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55185: LD_VAR 0 12
55189: PPUSH
55190: LD_VAR 0 8
55194: PPUSH
55195: LD_INT 0
55197: PPUSH
55198: CALL 56991 0 3
// end ;
55202: GO 55100
55204: POP
55205: POP
// if enchidnas then
55206: LD_VAR 0 4
55210: IFFALSE 55277
// for i = 1 to enchidnas do
55212: LD_ADDR_VAR 0 11
55216: PUSH
55217: DOUBLE
55218: LD_INT 1
55220: DEC
55221: ST_TO_ADDR
55222: LD_VAR 0 4
55226: PUSH
55227: FOR_TO
55228: IFFALSE 55275
// begin hc_class = 13 ;
55230: LD_ADDR_OWVAR 28
55234: PUSH
55235: LD_INT 13
55237: ST_TO_ADDR
// hc_gallery =  ;
55238: LD_ADDR_OWVAR 33
55242: PUSH
55243: LD_STRING 
55245: ST_TO_ADDR
// animal := CreateHuman ;
55246: LD_ADDR_VAR 0 12
55250: PUSH
55251: CALL_OW 44
55255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55256: LD_VAR 0 12
55260: PPUSH
55261: LD_VAR 0 8
55265: PPUSH
55266: LD_INT 0
55268: PPUSH
55269: CALL 56991 0 3
// end ;
55273: GO 55227
55275: POP
55276: POP
// if fishes then
55277: LD_VAR 0 7
55281: IFFALSE 55348
// for i = 1 to fishes do
55283: LD_ADDR_VAR 0 11
55287: PUSH
55288: DOUBLE
55289: LD_INT 1
55291: DEC
55292: ST_TO_ADDR
55293: LD_VAR 0 7
55297: PUSH
55298: FOR_TO
55299: IFFALSE 55346
// begin hc_class = 20 ;
55301: LD_ADDR_OWVAR 28
55305: PUSH
55306: LD_INT 20
55308: ST_TO_ADDR
// hc_gallery =  ;
55309: LD_ADDR_OWVAR 33
55313: PUSH
55314: LD_STRING 
55316: ST_TO_ADDR
// animal := CreateHuman ;
55317: LD_ADDR_VAR 0 12
55321: PUSH
55322: CALL_OW 44
55326: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55327: LD_VAR 0 12
55331: PPUSH
55332: LD_VAR 0 9
55336: PPUSH
55337: LD_INT 0
55339: PPUSH
55340: CALL 56991 0 3
// end ;
55344: GO 55298
55346: POP
55347: POP
// end ;
55348: LD_VAR 0 10
55352: RET
// export function WantHeal ( sci , unit ) ; begin
55353: LD_INT 0
55355: PPUSH
// if GetTaskList ( sci ) > 0 then
55356: LD_VAR 0 1
55360: PPUSH
55361: CALL_OW 437
55365: PUSH
55366: LD_INT 0
55368: GREATER
55369: IFFALSE 55441
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55371: LD_VAR 0 1
55375: PPUSH
55376: CALL_OW 437
55380: PUSH
55381: LD_INT 1
55383: ARRAY
55384: PUSH
55385: LD_INT 1
55387: ARRAY
55388: PUSH
55389: LD_STRING l
55391: EQUAL
55392: IFFALSE 55419
55394: PUSH
55395: LD_VAR 0 1
55399: PPUSH
55400: CALL_OW 437
55404: PUSH
55405: LD_INT 1
55407: ARRAY
55408: PUSH
55409: LD_INT 4
55411: ARRAY
55412: PUSH
55413: LD_VAR 0 2
55417: EQUAL
55418: AND
55419: IFFALSE 55431
// result := true else
55421: LD_ADDR_VAR 0 3
55425: PUSH
55426: LD_INT 1
55428: ST_TO_ADDR
55429: GO 55439
// result := false ;
55431: LD_ADDR_VAR 0 3
55435: PUSH
55436: LD_INT 0
55438: ST_TO_ADDR
// end else
55439: GO 55449
// result := false ;
55441: LD_ADDR_VAR 0 3
55445: PUSH
55446: LD_INT 0
55448: ST_TO_ADDR
// end ;
55449: LD_VAR 0 3
55453: RET
// export function HealTarget ( sci ) ; begin
55454: LD_INT 0
55456: PPUSH
// if not sci then
55457: LD_VAR 0 1
55461: NOT
55462: IFFALSE 55466
// exit ;
55464: GO 55531
// result := 0 ;
55466: LD_ADDR_VAR 0 2
55470: PUSH
55471: LD_INT 0
55473: ST_TO_ADDR
// if GetTaskList ( sci ) then
55474: LD_VAR 0 1
55478: PPUSH
55479: CALL_OW 437
55483: IFFALSE 55531
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55485: LD_VAR 0 1
55489: PPUSH
55490: CALL_OW 437
55494: PUSH
55495: LD_INT 1
55497: ARRAY
55498: PUSH
55499: LD_INT 1
55501: ARRAY
55502: PUSH
55503: LD_STRING l
55505: EQUAL
55506: IFFALSE 55531
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55508: LD_ADDR_VAR 0 2
55512: PUSH
55513: LD_VAR 0 1
55517: PPUSH
55518: CALL_OW 437
55522: PUSH
55523: LD_INT 1
55525: ARRAY
55526: PUSH
55527: LD_INT 4
55529: ARRAY
55530: ST_TO_ADDR
// end ;
55531: LD_VAR 0 2
55535: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55536: LD_INT 0
55538: PPUSH
55539: PPUSH
55540: PPUSH
55541: PPUSH
// if not base_units then
55542: LD_VAR 0 1
55546: NOT
55547: IFFALSE 55551
// exit ;
55549: GO 55638
// result := false ;
55551: LD_ADDR_VAR 0 2
55555: PUSH
55556: LD_INT 0
55558: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55559: LD_ADDR_VAR 0 5
55563: PUSH
55564: LD_VAR 0 1
55568: PPUSH
55569: LD_INT 21
55571: PUSH
55572: LD_INT 3
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PPUSH
55579: CALL_OW 72
55583: ST_TO_ADDR
// if not tmp then
55584: LD_VAR 0 5
55588: NOT
55589: IFFALSE 55593
// exit ;
55591: GO 55638
// for i in tmp do
55593: LD_ADDR_VAR 0 3
55597: PUSH
55598: LD_VAR 0 5
55602: PUSH
55603: FOR_IN
55604: IFFALSE 55636
// begin result := EnemyInRange ( i , 22 ) ;
55606: LD_ADDR_VAR 0 2
55610: PUSH
55611: LD_VAR 0 3
55615: PPUSH
55616: LD_INT 22
55618: PPUSH
55619: CALL 53053 0 2
55623: ST_TO_ADDR
// if result then
55624: LD_VAR 0 2
55628: IFFALSE 55634
// exit ;
55630: POP
55631: POP
55632: GO 55638
// end ;
55634: GO 55603
55636: POP
55637: POP
// end ;
55638: LD_VAR 0 2
55642: RET
// export function FilterByTag ( units , tag ) ; begin
55643: LD_INT 0
55645: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
55646: LD_ADDR_VAR 0 3
55650: PUSH
55651: LD_VAR 0 1
55655: PPUSH
55656: LD_INT 120
55658: PUSH
55659: LD_VAR 0 2
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PPUSH
55668: CALL_OW 72
55672: ST_TO_ADDR
// end ;
55673: LD_VAR 0 3
55677: RET
// export function IsDriver ( un ) ; begin
55678: LD_INT 0
55680: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55681: LD_ADDR_VAR 0 2
55685: PUSH
55686: LD_VAR 0 1
55690: PUSH
55691: LD_INT 55
55693: PUSH
55694: EMPTY
55695: LIST
55696: PPUSH
55697: CALL_OW 69
55701: IN
55702: ST_TO_ADDR
// end ;
55703: LD_VAR 0 2
55707: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55708: LD_INT 0
55710: PPUSH
55711: PPUSH
// list := [ ] ;
55712: LD_ADDR_VAR 0 5
55716: PUSH
55717: EMPTY
55718: ST_TO_ADDR
// case d of 0 :
55719: LD_VAR 0 3
55723: PUSH
55724: LD_INT 0
55726: DOUBLE
55727: EQUAL
55728: IFTRUE 55732
55730: GO 55865
55732: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55733: LD_ADDR_VAR 0 5
55737: PUSH
55738: LD_VAR 0 1
55742: PUSH
55743: LD_INT 4
55745: MINUS
55746: PUSH
55747: LD_VAR 0 2
55751: PUSH
55752: LD_INT 4
55754: MINUS
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: PUSH
55764: LD_VAR 0 1
55768: PUSH
55769: LD_INT 3
55771: MINUS
55772: PUSH
55773: LD_VAR 0 2
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: LIST
55785: PUSH
55786: LD_VAR 0 1
55790: PUSH
55791: LD_INT 4
55793: PLUS
55794: PUSH
55795: LD_VAR 0 2
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: PUSH
55808: LD_VAR 0 1
55812: PUSH
55813: LD_INT 3
55815: PLUS
55816: PUSH
55817: LD_VAR 0 2
55821: PUSH
55822: LD_INT 3
55824: PLUS
55825: PUSH
55826: LD_INT 5
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: PUSH
55834: LD_VAR 0 1
55838: PUSH
55839: LD_VAR 0 2
55843: PUSH
55844: LD_INT 4
55846: PLUS
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: LIST
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: ST_TO_ADDR
// end ; 1 :
55863: GO 56563
55865: LD_INT 1
55867: DOUBLE
55868: EQUAL
55869: IFTRUE 55873
55871: GO 56006
55873: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55874: LD_ADDR_VAR 0 5
55878: PUSH
55879: LD_VAR 0 1
55883: PUSH
55884: LD_VAR 0 2
55888: PUSH
55889: LD_INT 4
55891: MINUS
55892: PUSH
55893: LD_INT 3
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: PUSH
55901: LD_VAR 0 1
55905: PUSH
55906: LD_INT 3
55908: MINUS
55909: PUSH
55910: LD_VAR 0 2
55914: PUSH
55915: LD_INT 3
55917: MINUS
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: PUSH
55927: LD_VAR 0 1
55931: PUSH
55932: LD_INT 4
55934: MINUS
55935: PUSH
55936: LD_VAR 0 2
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: PUSH
55949: LD_VAR 0 1
55953: PUSH
55954: LD_VAR 0 2
55958: PUSH
55959: LD_INT 3
55961: PLUS
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: PUSH
55971: LD_VAR 0 1
55975: PUSH
55976: LD_INT 4
55978: PLUS
55979: PUSH
55980: LD_VAR 0 2
55984: PUSH
55985: LD_INT 4
55987: PLUS
55988: PUSH
55989: LD_INT 5
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: ST_TO_ADDR
// end ; 2 :
56004: GO 56563
56006: LD_INT 2
56008: DOUBLE
56009: EQUAL
56010: IFTRUE 56014
56012: GO 56143
56014: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56015: LD_ADDR_VAR 0 5
56019: PUSH
56020: LD_VAR 0 1
56024: PUSH
56025: LD_VAR 0 2
56029: PUSH
56030: LD_INT 3
56032: MINUS
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: LIST
56041: PUSH
56042: LD_VAR 0 1
56046: PUSH
56047: LD_INT 4
56049: PLUS
56050: PUSH
56051: LD_VAR 0 2
56055: PUSH
56056: LD_INT 4
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: LIST
56063: PUSH
56064: LD_VAR 0 1
56068: PUSH
56069: LD_VAR 0 2
56073: PUSH
56074: LD_INT 4
56076: PLUS
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: LIST
56085: PUSH
56086: LD_VAR 0 1
56090: PUSH
56091: LD_INT 3
56093: MINUS
56094: PUSH
56095: LD_VAR 0 2
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: PUSH
56108: LD_VAR 0 1
56112: PUSH
56113: LD_INT 4
56115: MINUS
56116: PUSH
56117: LD_VAR 0 2
56121: PUSH
56122: LD_INT 4
56124: MINUS
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: LIST
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// end ; 3 :
56141: GO 56563
56143: LD_INT 3
56145: DOUBLE
56146: EQUAL
56147: IFTRUE 56151
56149: GO 56284
56151: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56152: LD_ADDR_VAR 0 5
56156: PUSH
56157: LD_VAR 0 1
56161: PUSH
56162: LD_INT 3
56164: PLUS
56165: PUSH
56166: LD_VAR 0 2
56170: PUSH
56171: LD_INT 4
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: PUSH
56179: LD_VAR 0 1
56183: PUSH
56184: LD_INT 4
56186: PLUS
56187: PUSH
56188: LD_VAR 0 2
56192: PUSH
56193: LD_INT 4
56195: PLUS
56196: PUSH
56197: LD_INT 5
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: PUSH
56205: LD_VAR 0 1
56209: PUSH
56210: LD_INT 4
56212: MINUS
56213: PUSH
56214: LD_VAR 0 2
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: PUSH
56227: LD_VAR 0 1
56231: PUSH
56232: LD_VAR 0 2
56236: PUSH
56237: LD_INT 4
56239: MINUS
56240: PUSH
56241: LD_INT 3
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: PUSH
56249: LD_VAR 0 1
56253: PUSH
56254: LD_INT 3
56256: MINUS
56257: PUSH
56258: LD_VAR 0 2
56262: PUSH
56263: LD_INT 3
56265: MINUS
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: ST_TO_ADDR
// end ; 4 :
56282: GO 56563
56284: LD_INT 4
56286: DOUBLE
56287: EQUAL
56288: IFTRUE 56292
56290: GO 56425
56292: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56293: LD_ADDR_VAR 0 5
56297: PUSH
56298: LD_VAR 0 1
56302: PUSH
56303: LD_VAR 0 2
56307: PUSH
56308: LD_INT 4
56310: PLUS
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: LIST
56319: PUSH
56320: LD_VAR 0 1
56324: PUSH
56325: LD_INT 3
56327: PLUS
56328: PUSH
56329: LD_VAR 0 2
56333: PUSH
56334: LD_INT 3
56336: PLUS
56337: PUSH
56338: LD_INT 5
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: LIST
56345: PUSH
56346: LD_VAR 0 1
56350: PUSH
56351: LD_INT 4
56353: PLUS
56354: PUSH
56355: LD_VAR 0 2
56359: PUSH
56360: LD_INT 4
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: PUSH
56368: LD_VAR 0 1
56372: PUSH
56373: LD_VAR 0 2
56377: PUSH
56378: LD_INT 3
56380: MINUS
56381: PUSH
56382: LD_INT 3
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: LIST
56389: PUSH
56390: LD_VAR 0 1
56394: PUSH
56395: LD_INT 4
56397: MINUS
56398: PUSH
56399: LD_VAR 0 2
56403: PUSH
56404: LD_INT 4
56406: MINUS
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: ST_TO_ADDR
// end ; 5 :
56423: GO 56563
56425: LD_INT 5
56427: DOUBLE
56428: EQUAL
56429: IFTRUE 56433
56431: GO 56562
56433: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56434: LD_ADDR_VAR 0 5
56438: PUSH
56439: LD_VAR 0 1
56443: PUSH
56444: LD_INT 4
56446: MINUS
56447: PUSH
56448: LD_VAR 0 2
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: PUSH
56461: LD_VAR 0 1
56465: PUSH
56466: LD_VAR 0 2
56470: PUSH
56471: LD_INT 4
56473: MINUS
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: LIST
56482: PUSH
56483: LD_VAR 0 1
56487: PUSH
56488: LD_INT 4
56490: PLUS
56491: PUSH
56492: LD_VAR 0 2
56496: PUSH
56497: LD_INT 4
56499: PLUS
56500: PUSH
56501: LD_INT 5
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: LIST
56508: PUSH
56509: LD_VAR 0 1
56513: PUSH
56514: LD_INT 3
56516: PLUS
56517: PUSH
56518: LD_VAR 0 2
56522: PUSH
56523: LD_INT 4
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: LIST
56530: PUSH
56531: LD_VAR 0 1
56535: PUSH
56536: LD_VAR 0 2
56540: PUSH
56541: LD_INT 3
56543: PLUS
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: ST_TO_ADDR
// end ; end ;
56560: GO 56563
56562: POP
// result := list ;
56563: LD_ADDR_VAR 0 4
56567: PUSH
56568: LD_VAR 0 5
56572: ST_TO_ADDR
// end ;
56573: LD_VAR 0 4
56577: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56578: LD_INT 0
56580: PPUSH
56581: PPUSH
56582: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56583: LD_VAR 0 1
56587: NOT
56588: IFTRUE 56616
56590: PUSH
56591: LD_VAR 0 2
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 2
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 4
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: IN
56614: NOT
56615: OR
56616: IFFALSE 56620
// exit ;
56618: GO 56703
// tmp := [ ] ;
56620: LD_ADDR_VAR 0 5
56624: PUSH
56625: EMPTY
56626: ST_TO_ADDR
// for i in units do
56627: LD_ADDR_VAR 0 4
56631: PUSH
56632: LD_VAR 0 1
56636: PUSH
56637: FOR_IN
56638: IFFALSE 56672
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
56640: LD_ADDR_VAR 0 5
56644: PUSH
56645: LD_VAR 0 5
56649: PPUSH
56650: LD_VAR 0 4
56654: PPUSH
56655: LD_VAR 0 2
56659: PPUSH
56660: CALL_OW 259
56664: PPUSH
56665: CALL 58098 0 2
56669: ST_TO_ADDR
56670: GO 56637
56672: POP
56673: POP
// if not tmp then
56674: LD_VAR 0 5
56678: NOT
56679: IFFALSE 56683
// exit ;
56681: GO 56703
// result := SortListByListDesc ( units , tmp ) ;
56683: LD_ADDR_VAR 0 3
56687: PUSH
56688: LD_VAR 0 1
56692: PPUSH
56693: LD_VAR 0 5
56697: PPUSH
56698: CALL_OW 77
56702: ST_TO_ADDR
// end ;
56703: LD_VAR 0 3
56707: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56708: LD_INT 0
56710: PPUSH
56711: PPUSH
56712: PPUSH
// result := false ;
56713: LD_ADDR_VAR 0 3
56717: PUSH
56718: LD_INT 0
56720: ST_TO_ADDR
// if not building then
56721: LD_VAR 0 2
56725: NOT
56726: IFFALSE 56730
// exit ;
56728: GO 56874
// x := GetX ( building ) ;
56730: LD_ADDR_VAR 0 4
56734: PUSH
56735: LD_VAR 0 2
56739: PPUSH
56740: CALL_OW 250
56744: ST_TO_ADDR
// y := GetY ( building ) ;
56745: LD_ADDR_VAR 0 5
56749: PUSH
56750: LD_VAR 0 2
56754: PPUSH
56755: CALL_OW 251
56759: ST_TO_ADDR
// if not x or not y then
56760: LD_VAR 0 4
56764: NOT
56765: IFTRUE 56774
56767: PUSH
56768: LD_VAR 0 5
56772: NOT
56773: OR
56774: IFFALSE 56778
// exit ;
56776: GO 56874
// if GetTaskList ( unit ) then
56778: LD_VAR 0 1
56782: PPUSH
56783: CALL_OW 437
56787: IFFALSE 56874
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56789: LD_STRING e
56791: PUSH
56792: LD_VAR 0 1
56796: PPUSH
56797: CALL_OW 437
56801: PUSH
56802: LD_INT 1
56804: ARRAY
56805: PUSH
56806: LD_INT 1
56808: ARRAY
56809: EQUAL
56810: IFFALSE 56837
56812: PUSH
56813: LD_VAR 0 4
56817: PUSH
56818: LD_VAR 0 1
56822: PPUSH
56823: CALL_OW 437
56827: PUSH
56828: LD_INT 1
56830: ARRAY
56831: PUSH
56832: LD_INT 2
56834: ARRAY
56835: EQUAL
56836: AND
56837: IFFALSE 56864
56839: PUSH
56840: LD_VAR 0 5
56844: PUSH
56845: LD_VAR 0 1
56849: PPUSH
56850: CALL_OW 437
56854: PUSH
56855: LD_INT 1
56857: ARRAY
56858: PUSH
56859: LD_INT 3
56861: ARRAY
56862: EQUAL
56863: AND
56864: IFFALSE 56874
// result := true end ;
56866: LD_ADDR_VAR 0 3
56870: PUSH
56871: LD_INT 1
56873: ST_TO_ADDR
// end ;
56874: LD_VAR 0 3
56878: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56879: LD_INT 0
56881: PPUSH
// result := false ;
56882: LD_ADDR_VAR 0 4
56886: PUSH
56887: LD_INT 0
56889: ST_TO_ADDR
// if GetTaskList ( unit ) then
56890: LD_VAR 0 1
56894: PPUSH
56895: CALL_OW 437
56899: IFFALSE 56986
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56901: LD_STRING M
56903: PUSH
56904: LD_VAR 0 1
56908: PPUSH
56909: CALL_OW 437
56913: PUSH
56914: LD_INT 1
56916: ARRAY
56917: PUSH
56918: LD_INT 1
56920: ARRAY
56921: EQUAL
56922: IFFALSE 56949
56924: PUSH
56925: LD_VAR 0 2
56929: PUSH
56930: LD_VAR 0 1
56934: PPUSH
56935: CALL_OW 437
56939: PUSH
56940: LD_INT 1
56942: ARRAY
56943: PUSH
56944: LD_INT 2
56946: ARRAY
56947: EQUAL
56948: AND
56949: IFFALSE 56976
56951: PUSH
56952: LD_VAR 0 3
56956: PUSH
56957: LD_VAR 0 1
56961: PPUSH
56962: CALL_OW 437
56966: PUSH
56967: LD_INT 1
56969: ARRAY
56970: PUSH
56971: LD_INT 3
56973: ARRAY
56974: EQUAL
56975: AND
56976: IFFALSE 56986
// result := true ;
56978: LD_ADDR_VAR 0 4
56982: PUSH
56983: LD_INT 1
56985: ST_TO_ADDR
// end ; end ;
56986: LD_VAR 0 4
56990: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56991: LD_INT 0
56993: PPUSH
56994: PPUSH
56995: PPUSH
56996: PPUSH
// if not unit or not area then
56997: LD_VAR 0 1
57001: NOT
57002: IFTRUE 57011
57004: PUSH
57005: LD_VAR 0 2
57009: NOT
57010: OR
57011: IFFALSE 57015
// exit ;
57013: GO 57191
// tmp := AreaToList ( area , i ) ;
57015: LD_ADDR_VAR 0 6
57019: PUSH
57020: LD_VAR 0 2
57024: PPUSH
57025: LD_VAR 0 5
57029: PPUSH
57030: CALL_OW 517
57034: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57035: LD_ADDR_VAR 0 5
57039: PUSH
57040: DOUBLE
57041: LD_INT 1
57043: DEC
57044: ST_TO_ADDR
57045: LD_VAR 0 6
57049: PUSH
57050: LD_INT 1
57052: ARRAY
57053: PUSH
57054: FOR_TO
57055: IFFALSE 57189
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57057: LD_ADDR_VAR 0 7
57061: PUSH
57062: LD_VAR 0 6
57066: PUSH
57067: LD_INT 1
57069: ARRAY
57070: PUSH
57071: LD_VAR 0 5
57075: ARRAY
57076: PUSH
57077: LD_VAR 0 6
57081: PUSH
57082: LD_INT 2
57084: ARRAY
57085: PUSH
57086: LD_VAR 0 5
57090: ARRAY
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57096: LD_INT 92
57098: PUSH
57099: LD_VAR 0 7
57103: PUSH
57104: LD_INT 1
57106: ARRAY
57107: PUSH
57108: LD_VAR 0 7
57112: PUSH
57113: LD_INT 2
57115: ARRAY
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: PPUSH
57126: CALL_OW 69
57130: PUSH
57131: LD_INT 0
57133: EQUAL
57134: IFFALSE 57187
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57136: LD_VAR 0 1
57140: PPUSH
57141: LD_VAR 0 7
57145: PUSH
57146: LD_INT 1
57148: ARRAY
57149: PPUSH
57150: LD_VAR 0 7
57154: PUSH
57155: LD_INT 2
57157: ARRAY
57158: PPUSH
57159: LD_VAR 0 3
57163: PPUSH
57164: CALL_OW 48
// result := IsPlaced ( unit ) ;
57168: LD_ADDR_VAR 0 4
57172: PUSH
57173: LD_VAR 0 1
57177: PPUSH
57178: CALL_OW 305
57182: ST_TO_ADDR
// exit ;
57183: POP
57184: POP
57185: GO 57191
// end ; end ;
57187: GO 57054
57189: POP
57190: POP
// end ;
57191: LD_VAR 0 4
57195: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57196: LD_INT 0
57198: PPUSH
57199: PPUSH
57200: PPUSH
// if not side or side > 8 then
57201: LD_VAR 0 1
57205: NOT
57206: IFTRUE 57218
57208: PUSH
57209: LD_VAR 0 1
57213: PUSH
57214: LD_INT 8
57216: GREATER
57217: OR
57218: IFFALSE 57222
// exit ;
57220: GO 57409
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57222: LD_ADDR_VAR 0 4
57226: PUSH
57227: LD_INT 22
57229: PUSH
57230: LD_VAR 0 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 21
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PPUSH
57253: CALL_OW 69
57257: ST_TO_ADDR
// if not tmp then
57258: LD_VAR 0 4
57262: NOT
57263: IFFALSE 57267
// exit ;
57265: GO 57409
// enable_addtolog := true ;
57267: LD_ADDR_OWVAR 81
57271: PUSH
57272: LD_INT 1
57274: ST_TO_ADDR
// AddToLog ( [ ) ;
57275: LD_STRING [
57277: PPUSH
57278: CALL_OW 561
// for i in tmp do
57282: LD_ADDR_VAR 0 3
57286: PUSH
57287: LD_VAR 0 4
57291: PUSH
57292: FOR_IN
57293: IFFALSE 57400
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57295: LD_STRING [
57297: PUSH
57298: LD_VAR 0 3
57302: PPUSH
57303: CALL_OW 266
57307: STR
57308: PUSH
57309: LD_STRING , 
57311: STR
57312: PUSH
57313: LD_VAR 0 3
57317: PPUSH
57318: CALL_OW 250
57322: STR
57323: PUSH
57324: LD_STRING , 
57326: STR
57327: PUSH
57328: LD_VAR 0 3
57332: PPUSH
57333: CALL_OW 251
57337: STR
57338: PUSH
57339: LD_STRING , 
57341: STR
57342: PUSH
57343: LD_VAR 0 3
57347: PPUSH
57348: CALL_OW 254
57352: STR
57353: PUSH
57354: LD_STRING , 
57356: STR
57357: PUSH
57358: LD_VAR 0 3
57362: PPUSH
57363: LD_INT 1
57365: PPUSH
57366: CALL_OW 268
57370: STR
57371: PUSH
57372: LD_STRING , 
57374: STR
57375: PUSH
57376: LD_VAR 0 3
57380: PPUSH
57381: LD_INT 2
57383: PPUSH
57384: CALL_OW 268
57388: STR
57389: PUSH
57390: LD_STRING ],
57392: STR
57393: PPUSH
57394: CALL_OW 561
// end ;
57398: GO 57292
57400: POP
57401: POP
// AddToLog ( ]; ) ;
57402: LD_STRING ];
57404: PPUSH
57405: CALL_OW 561
// end ;
57409: LD_VAR 0 2
57413: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57414: LD_INT 0
57416: PPUSH
57417: PPUSH
57418: PPUSH
57419: PPUSH
57420: PPUSH
// if not area or not rate or not max then
57421: LD_VAR 0 1
57425: NOT
57426: IFTRUE 57435
57428: PUSH
57429: LD_VAR 0 2
57433: NOT
57434: OR
57435: IFTRUE 57444
57437: PUSH
57438: LD_VAR 0 4
57442: NOT
57443: OR
57444: IFFALSE 57448
// exit ;
57446: GO 57637
// while 1 do
57448: LD_INT 1
57450: IFFALSE 57637
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57452: LD_ADDR_VAR 0 9
57456: PUSH
57457: LD_VAR 0 1
57461: PPUSH
57462: LD_INT 1
57464: PPUSH
57465: CALL_OW 287
57469: PUSH
57470: LD_INT 10
57472: MUL
57473: ST_TO_ADDR
// r := rate / 10 ;
57474: LD_ADDR_VAR 0 7
57478: PUSH
57479: LD_VAR 0 2
57483: PUSH
57484: LD_INT 10
57486: DIVREAL
57487: ST_TO_ADDR
// time := 1 1$00 ;
57488: LD_ADDR_VAR 0 8
57492: PUSH
57493: LD_INT 2100
57495: ST_TO_ADDR
// if amount < min then
57496: LD_VAR 0 9
57500: PUSH
57501: LD_VAR 0 3
57505: LESS
57506: IFFALSE 57524
// r := r * 2 else
57508: LD_ADDR_VAR 0 7
57512: PUSH
57513: LD_VAR 0 7
57517: PUSH
57518: LD_INT 2
57520: MUL
57521: ST_TO_ADDR
57522: GO 57550
// if amount > max then
57524: LD_VAR 0 9
57528: PUSH
57529: LD_VAR 0 4
57533: GREATER
57534: IFFALSE 57550
// r := r / 2 ;
57536: LD_ADDR_VAR 0 7
57540: PUSH
57541: LD_VAR 0 7
57545: PUSH
57546: LD_INT 2
57548: DIVREAL
57549: ST_TO_ADDR
// time := time / r ;
57550: LD_ADDR_VAR 0 8
57554: PUSH
57555: LD_VAR 0 8
57559: PUSH
57560: LD_VAR 0 7
57564: DIVREAL
57565: ST_TO_ADDR
// if time < 0 then
57566: LD_VAR 0 8
57570: PUSH
57571: LD_INT 0
57573: LESS
57574: IFFALSE 57591
// time := time * - 1 ;
57576: LD_ADDR_VAR 0 8
57580: PUSH
57581: LD_VAR 0 8
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: MUL
57590: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
57591: LD_VAR 0 8
57595: PUSH
57596: LD_INT 35
57598: PPUSH
57599: LD_INT 875
57601: PPUSH
57602: CALL_OW 12
57606: PLUS
57607: PPUSH
57608: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57612: LD_INT 1
57614: PPUSH
57615: LD_INT 5
57617: PPUSH
57618: CALL_OW 12
57622: PPUSH
57623: LD_VAR 0 1
57627: PPUSH
57628: LD_INT 1
57630: PPUSH
57631: CALL_OW 55
// end ;
57635: GO 57448
// end ;
57637: LD_VAR 0 5
57641: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57642: LD_INT 0
57644: PPUSH
57645: PPUSH
57646: PPUSH
57647: PPUSH
57648: PPUSH
57649: PPUSH
57650: PPUSH
57651: PPUSH
// if not turrets or not factories then
57652: LD_VAR 0 1
57656: NOT
57657: IFTRUE 57666
57659: PUSH
57660: LD_VAR 0 2
57664: NOT
57665: OR
57666: IFFALSE 57670
// exit ;
57668: GO 57977
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57670: LD_ADDR_VAR 0 10
57674: PUSH
57675: LD_INT 5
57677: PUSH
57678: LD_INT 6
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: LD_INT 4
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: PUSH
57698: LD_INT 5
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 24
57712: PUSH
57713: LD_INT 25
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 23
57722: PUSH
57723: LD_INT 27
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 42
57736: PUSH
57737: LD_INT 43
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 44
57746: PUSH
57747: LD_INT 46
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 45
57756: PUSH
57757: LD_INT 47
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: LIST
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: LIST
57773: ST_TO_ADDR
// result := [ ] ;
57774: LD_ADDR_VAR 0 3
57778: PUSH
57779: EMPTY
57780: ST_TO_ADDR
// for i in turrets do
57781: LD_ADDR_VAR 0 4
57785: PUSH
57786: LD_VAR 0 1
57790: PUSH
57791: FOR_IN
57792: IFFALSE 57975
// begin nat := GetNation ( i ) ;
57794: LD_ADDR_VAR 0 7
57798: PUSH
57799: LD_VAR 0 4
57803: PPUSH
57804: CALL_OW 248
57808: ST_TO_ADDR
// weapon := 0 ;
57809: LD_ADDR_VAR 0 8
57813: PUSH
57814: LD_INT 0
57816: ST_TO_ADDR
// if not nat then
57817: LD_VAR 0 7
57821: NOT
57822: IFFALSE 57826
// continue ;
57824: GO 57791
// for j in list [ nat ] do
57826: LD_ADDR_VAR 0 5
57830: PUSH
57831: LD_VAR 0 10
57835: PUSH
57836: LD_VAR 0 7
57840: ARRAY
57841: PUSH
57842: FOR_IN
57843: IFFALSE 57884
// if GetBWeapon ( i ) = j [ 1 ] then
57845: LD_VAR 0 4
57849: PPUSH
57850: CALL_OW 269
57854: PUSH
57855: LD_VAR 0 5
57859: PUSH
57860: LD_INT 1
57862: ARRAY
57863: EQUAL
57864: IFFALSE 57882
// begin weapon := j [ 2 ] ;
57866: LD_ADDR_VAR 0 8
57870: PUSH
57871: LD_VAR 0 5
57875: PUSH
57876: LD_INT 2
57878: ARRAY
57879: ST_TO_ADDR
// break ;
57880: GO 57884
// end ;
57882: GO 57842
57884: POP
57885: POP
// if not weapon then
57886: LD_VAR 0 8
57890: NOT
57891: IFFALSE 57895
// continue ;
57893: GO 57791
// for k in factories do
57895: LD_ADDR_VAR 0 6
57899: PUSH
57900: LD_VAR 0 2
57904: PUSH
57905: FOR_IN
57906: IFFALSE 57971
// begin weapons := AvailableWeaponList ( k ) ;
57908: LD_ADDR_VAR 0 9
57912: PUSH
57913: LD_VAR 0 6
57917: PPUSH
57918: CALL_OW 478
57922: ST_TO_ADDR
// if not weapons then
57923: LD_VAR 0 9
57927: NOT
57928: IFFALSE 57932
// continue ;
57930: GO 57905
// if weapon in weapons then
57932: LD_VAR 0 8
57936: PUSH
57937: LD_VAR 0 9
57941: IN
57942: IFFALSE 57969
// begin result := [ i , weapon ] ;
57944: LD_ADDR_VAR 0 3
57948: PUSH
57949: LD_VAR 0 4
57953: PUSH
57954: LD_VAR 0 8
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: ST_TO_ADDR
// exit ;
57963: POP
57964: POP
57965: POP
57966: POP
57967: GO 57977
// end ; end ;
57969: GO 57905
57971: POP
57972: POP
// end ;
57973: GO 57791
57975: POP
57976: POP
// end ;
57977: LD_VAR 0 3
57981: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57982: LD_INT 0
57984: PPUSH
// if not side or side > 8 then
57985: LD_VAR 0 3
57989: NOT
57990: IFTRUE 58002
57992: PUSH
57993: LD_VAR 0 3
57997: PUSH
57998: LD_INT 8
58000: GREATER
58001: OR
58002: IFFALSE 58006
// exit ;
58004: GO 58065
// if not range then
58006: LD_VAR 0 4
58010: NOT
58011: IFFALSE 58022
// range := - 12 ;
58013: LD_ADDR_VAR 0 4
58017: PUSH
58018: LD_INT 12
58020: NEG
58021: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58022: LD_VAR 0 1
58026: PPUSH
58027: LD_VAR 0 2
58031: PPUSH
58032: LD_VAR 0 3
58036: PPUSH
58037: LD_VAR 0 4
58041: PPUSH
58042: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58046: LD_VAR 0 1
58050: PPUSH
58051: LD_VAR 0 2
58055: PPUSH
58056: LD_VAR 0 3
58060: PPUSH
58061: CALL_OW 331
// end ;
58065: LD_VAR 0 5
58069: RET
// export function Video ( mode ) ; begin
58070: LD_INT 0
58072: PPUSH
// ingame_video = mode ;
58073: LD_ADDR_OWVAR 52
58077: PUSH
58078: LD_VAR 0 1
58082: ST_TO_ADDR
// interface_hidden = mode ;
58083: LD_ADDR_OWVAR 54
58087: PUSH
58088: LD_VAR 0 1
58092: ST_TO_ADDR
// end ;
58093: LD_VAR 0 2
58097: RET
// export function Join ( array , element ) ; begin
58098: LD_INT 0
58100: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58101: LD_ADDR_VAR 0 3
58105: PUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: LD_VAR 0 1
58115: PUSH
58116: LD_INT 1
58118: PLUS
58119: PPUSH
58120: LD_VAR 0 2
58124: PPUSH
58125: CALL_OW 1
58129: ST_TO_ADDR
// end ;
58130: LD_VAR 0 3
58134: RET
// export function JoinUnion ( array , element ) ; begin
58135: LD_INT 0
58137: PPUSH
// result := array union element ;
58138: LD_ADDR_VAR 0 3
58142: PUSH
58143: LD_VAR 0 1
58147: PUSH
58148: LD_VAR 0 2
58152: UNION
58153: ST_TO_ADDR
// end ;
58154: LD_VAR 0 3
58158: RET
// export function GetBehemoths ( side ) ; begin
58159: LD_INT 0
58161: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58162: LD_ADDR_VAR 0 2
58166: PUSH
58167: LD_INT 22
58169: PUSH
58170: LD_VAR 0 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 31
58181: PUSH
58182: LD_INT 25
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PPUSH
58193: CALL_OW 69
58197: ST_TO_ADDR
// end ;
58198: LD_VAR 0 2
58202: RET
// export function Shuffle ( array ) ; var i , index ; begin
58203: LD_INT 0
58205: PPUSH
58206: PPUSH
58207: PPUSH
// result := [ ] ;
58208: LD_ADDR_VAR 0 2
58212: PUSH
58213: EMPTY
58214: ST_TO_ADDR
// if not array then
58215: LD_VAR 0 1
58219: NOT
58220: IFFALSE 58224
// exit ;
58222: GO 58323
// Randomize ;
58224: CALL_OW 10
// for i = array downto 1 do
58228: LD_ADDR_VAR 0 3
58232: PUSH
58233: DOUBLE
58234: LD_VAR 0 1
58238: INC
58239: ST_TO_ADDR
58240: LD_INT 1
58242: PUSH
58243: FOR_DOWNTO
58244: IFFALSE 58321
// begin index := rand ( 1 , array ) ;
58246: LD_ADDR_VAR 0 4
58250: PUSH
58251: LD_INT 1
58253: PPUSH
58254: LD_VAR 0 1
58258: PPUSH
58259: CALL_OW 12
58263: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58264: LD_ADDR_VAR 0 2
58268: PUSH
58269: LD_VAR 0 2
58273: PPUSH
58274: LD_VAR 0 2
58278: PUSH
58279: LD_INT 1
58281: PLUS
58282: PPUSH
58283: LD_VAR 0 1
58287: PUSH
58288: LD_VAR 0 4
58292: ARRAY
58293: PPUSH
58294: CALL_OW 2
58298: ST_TO_ADDR
// array := Delete ( array , index ) ;
58299: LD_ADDR_VAR 0 1
58303: PUSH
58304: LD_VAR 0 1
58308: PPUSH
58309: LD_VAR 0 4
58313: PPUSH
58314: CALL_OW 3
58318: ST_TO_ADDR
// end ;
58319: GO 58243
58321: POP
58322: POP
// end ;
58323: LD_VAR 0 2
58327: RET
// export function GetBaseMaterials ( base ) ; begin
58328: LD_INT 0
58330: PPUSH
// result := [ 0 , 0 , 0 ] ;
58331: LD_ADDR_VAR 0 2
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: ST_TO_ADDR
// if not base then
58350: LD_VAR 0 1
58354: NOT
58355: IFFALSE 58359
// exit ;
58357: GO 58408
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58359: LD_ADDR_VAR 0 2
58363: PUSH
58364: LD_VAR 0 1
58368: PPUSH
58369: LD_INT 1
58371: PPUSH
58372: CALL_OW 275
58376: PUSH
58377: LD_VAR 0 1
58381: PPUSH
58382: LD_INT 2
58384: PPUSH
58385: CALL_OW 275
58389: PUSH
58390: LD_VAR 0 1
58394: PPUSH
58395: LD_INT 3
58397: PPUSH
58398: CALL_OW 275
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: LIST
58407: ST_TO_ADDR
// end ;
58408: LD_VAR 0 2
58412: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58413: LD_INT 0
58415: PPUSH
58416: PPUSH
// result := array ;
58417: LD_ADDR_VAR 0 3
58421: PUSH
58422: LD_VAR 0 1
58426: ST_TO_ADDR
// if size >= result then
58427: LD_VAR 0 2
58431: PUSH
58432: LD_VAR 0 3
58436: GREATEREQUAL
58437: IFFALSE 58441
// exit ;
58439: GO 58491
// if size then
58441: LD_VAR 0 2
58445: IFFALSE 58491
// for i := array downto size do
58447: LD_ADDR_VAR 0 4
58451: PUSH
58452: DOUBLE
58453: LD_VAR 0 1
58457: INC
58458: ST_TO_ADDR
58459: LD_VAR 0 2
58463: PUSH
58464: FOR_DOWNTO
58465: IFFALSE 58489
// result := Delete ( result , result ) ;
58467: LD_ADDR_VAR 0 3
58471: PUSH
58472: LD_VAR 0 3
58476: PPUSH
58477: LD_VAR 0 3
58481: PPUSH
58482: CALL_OW 3
58486: ST_TO_ADDR
58487: GO 58464
58489: POP
58490: POP
// end ;
58491: LD_VAR 0 3
58495: RET
// export function ComExit ( unit ) ; var tmp ; begin
58496: LD_INT 0
58498: PPUSH
58499: PPUSH
// if not IsInUnit ( unit ) then
58500: LD_VAR 0 1
58504: PPUSH
58505: CALL_OW 310
58509: NOT
58510: IFFALSE 58514
// exit ;
58512: GO 58574
// tmp := IsInUnit ( unit ) ;
58514: LD_ADDR_VAR 0 3
58518: PUSH
58519: LD_VAR 0 1
58523: PPUSH
58524: CALL_OW 310
58528: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58529: LD_VAR 0 3
58533: PPUSH
58534: CALL_OW 247
58538: PUSH
58539: LD_INT 2
58541: EQUAL
58542: IFFALSE 58555
// ComExitVehicle ( unit ) else
58544: LD_VAR 0 1
58548: PPUSH
58549: CALL_OW 121
58553: GO 58564
// ComExitBuilding ( unit ) ;
58555: LD_VAR 0 1
58559: PPUSH
58560: CALL_OW 122
// result := tmp ;
58564: LD_ADDR_VAR 0 2
58568: PUSH
58569: LD_VAR 0 3
58573: ST_TO_ADDR
// end ;
58574: LD_VAR 0 2
58578: RET
// export function ComExitAll ( units ) ; var i ; begin
58579: LD_INT 0
58581: PPUSH
58582: PPUSH
// if not units then
58583: LD_VAR 0 1
58587: NOT
58588: IFFALSE 58592
// exit ;
58590: GO 58618
// for i in units do
58592: LD_ADDR_VAR 0 3
58596: PUSH
58597: LD_VAR 0 1
58601: PUSH
58602: FOR_IN
58603: IFFALSE 58616
// ComExit ( i ) ;
58605: LD_VAR 0 3
58609: PPUSH
58610: CALL 58496 0 1
58614: GO 58602
58616: POP
58617: POP
// end ;
58618: LD_VAR 0 2
58622: RET
// export function ResetHc ; begin
58623: LD_INT 0
58625: PPUSH
// InitHc ;
58626: CALL_OW 19
// hc_importance := 0 ;
58630: LD_ADDR_OWVAR 32
58634: PUSH
58635: LD_INT 0
58637: ST_TO_ADDR
// end ;
58638: LD_VAR 0 1
58642: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58643: LD_INT 0
58645: PPUSH
58646: PPUSH
58647: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58648: LD_ADDR_VAR 0 6
58652: PUSH
58653: LD_VAR 0 1
58657: PUSH
58658: LD_VAR 0 3
58662: PLUS
58663: PUSH
58664: LD_INT 2
58666: DIV
58667: ST_TO_ADDR
// if _x < 0 then
58668: LD_VAR 0 6
58672: PUSH
58673: LD_INT 0
58675: LESS
58676: IFFALSE 58693
// _x := _x * - 1 ;
58678: LD_ADDR_VAR 0 6
58682: PUSH
58683: LD_VAR 0 6
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: MUL
58692: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58693: LD_ADDR_VAR 0 7
58697: PUSH
58698: LD_VAR 0 2
58702: PUSH
58703: LD_VAR 0 4
58707: PLUS
58708: PUSH
58709: LD_INT 2
58711: DIV
58712: ST_TO_ADDR
// if _y < 0 then
58713: LD_VAR 0 7
58717: PUSH
58718: LD_INT 0
58720: LESS
58721: IFFALSE 58738
// _y := _y * - 1 ;
58723: LD_ADDR_VAR 0 7
58727: PUSH
58728: LD_VAR 0 7
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: MUL
58737: ST_TO_ADDR
// result := [ _x , _y ] ;
58738: LD_ADDR_VAR 0 5
58742: PUSH
58743: LD_VAR 0 6
58747: PUSH
58748: LD_VAR 0 7
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: ST_TO_ADDR
// end ;
58757: LD_VAR 0 5
58761: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58762: LD_INT 0
58764: PPUSH
58765: PPUSH
58766: PPUSH
58767: PPUSH
// task := GetTaskList ( unit ) ;
58768: LD_ADDR_VAR 0 7
58772: PUSH
58773: LD_VAR 0 1
58777: PPUSH
58778: CALL_OW 437
58782: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58783: LD_VAR 0 7
58787: NOT
58788: IFFALSE 58807
58790: PUSH
58791: LD_VAR 0 1
58795: PPUSH
58796: LD_VAR 0 2
58800: PPUSH
58801: CALL_OW 308
58805: NOT
58806: AND
58807: IFFALSE 58811
// exit ;
58809: GO 58929
// if IsInArea ( unit , area ) then
58811: LD_VAR 0 1
58815: PPUSH
58816: LD_VAR 0 2
58820: PPUSH
58821: CALL_OW 308
58825: IFFALSE 58843
// begin ComMoveToArea ( unit , goAway ) ;
58827: LD_VAR 0 1
58831: PPUSH
58832: LD_VAR 0 3
58836: PPUSH
58837: CALL_OW 113
// exit ;
58841: GO 58929
// end ; if task [ 1 ] [ 1 ] <> M then
58843: LD_VAR 0 7
58847: PUSH
58848: LD_INT 1
58850: ARRAY
58851: PUSH
58852: LD_INT 1
58854: ARRAY
58855: PUSH
58856: LD_STRING M
58858: NONEQUAL
58859: IFFALSE 58863
// exit ;
58861: GO 58929
// x := task [ 1 ] [ 2 ] ;
58863: LD_ADDR_VAR 0 5
58867: PUSH
58868: LD_VAR 0 7
58872: PUSH
58873: LD_INT 1
58875: ARRAY
58876: PUSH
58877: LD_INT 2
58879: ARRAY
58880: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58881: LD_ADDR_VAR 0 6
58885: PUSH
58886: LD_VAR 0 7
58890: PUSH
58891: LD_INT 1
58893: ARRAY
58894: PUSH
58895: LD_INT 3
58897: ARRAY
58898: ST_TO_ADDR
// if InArea ( x , y , area ) then
58899: LD_VAR 0 5
58903: PPUSH
58904: LD_VAR 0 6
58908: PPUSH
58909: LD_VAR 0 2
58913: PPUSH
58914: CALL_OW 309
58918: IFFALSE 58929
// ComStop ( unit ) ;
58920: LD_VAR 0 1
58924: PPUSH
58925: CALL_OW 141
// end ;
58929: LD_VAR 0 4
58933: RET
// export function Abs ( value ) ; begin
58934: LD_INT 0
58936: PPUSH
// result := value ;
58937: LD_ADDR_VAR 0 2
58941: PUSH
58942: LD_VAR 0 1
58946: ST_TO_ADDR
// if value < 0 then
58947: LD_VAR 0 1
58951: PUSH
58952: LD_INT 0
58954: LESS
58955: IFFALSE 58972
// result := value * - 1 ;
58957: LD_ADDR_VAR 0 2
58961: PUSH
58962: LD_VAR 0 1
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: MUL
58971: ST_TO_ADDR
// end ;
58972: LD_VAR 0 2
58976: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58977: LD_INT 0
58979: PPUSH
58980: PPUSH
58981: PPUSH
58982: PPUSH
58983: PPUSH
58984: PPUSH
58985: PPUSH
58986: PPUSH
// if not unit or not building then
58987: LD_VAR 0 1
58991: NOT
58992: IFTRUE 59001
58994: PUSH
58995: LD_VAR 0 2
58999: NOT
59000: OR
59001: IFFALSE 59005
// exit ;
59003: GO 59233
// x := GetX ( building ) ;
59005: LD_ADDR_VAR 0 4
59009: PUSH
59010: LD_VAR 0 2
59014: PPUSH
59015: CALL_OW 250
59019: ST_TO_ADDR
// y := GetY ( building ) ;
59020: LD_ADDR_VAR 0 6
59024: PUSH
59025: LD_VAR 0 2
59029: PPUSH
59030: CALL_OW 251
59034: ST_TO_ADDR
// d := GetDir ( building ) ;
59035: LD_ADDR_VAR 0 8
59039: PUSH
59040: LD_VAR 0 2
59044: PPUSH
59045: CALL_OW 254
59049: ST_TO_ADDR
// r := 4 ;
59050: LD_ADDR_VAR 0 9
59054: PUSH
59055: LD_INT 4
59057: ST_TO_ADDR
// for i := 1 to 5 do
59058: LD_ADDR_VAR 0 10
59062: PUSH
59063: DOUBLE
59064: LD_INT 1
59066: DEC
59067: ST_TO_ADDR
59068: LD_INT 5
59070: PUSH
59071: FOR_TO
59072: IFFALSE 59231
// begin _x := ShiftX ( x , d , r + i ) ;
59074: LD_ADDR_VAR 0 5
59078: PUSH
59079: LD_VAR 0 4
59083: PPUSH
59084: LD_VAR 0 8
59088: PPUSH
59089: LD_VAR 0 9
59093: PUSH
59094: LD_VAR 0 10
59098: PLUS
59099: PPUSH
59100: CALL_OW 272
59104: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59105: LD_ADDR_VAR 0 7
59109: PUSH
59110: LD_VAR 0 6
59114: PPUSH
59115: LD_VAR 0 8
59119: PPUSH
59120: LD_VAR 0 9
59124: PUSH
59125: LD_VAR 0 10
59129: PLUS
59130: PPUSH
59131: CALL_OW 273
59135: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59136: LD_VAR 0 5
59140: PPUSH
59141: LD_VAR 0 7
59145: PPUSH
59146: CALL_OW 488
59150: IFFALSE 59185
59152: PUSH
59153: LD_VAR 0 5
59157: PPUSH
59158: LD_VAR 0 7
59162: PPUSH
59163: CALL_OW 428
59167: PPUSH
59168: CALL_OW 247
59172: PUSH
59173: LD_INT 3
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: IN
59183: NOT
59184: AND
59185: IFFALSE 59229
// begin ComMoveXY ( unit , _x , _y ) ;
59187: LD_VAR 0 1
59191: PPUSH
59192: LD_VAR 0 5
59196: PPUSH
59197: LD_VAR 0 7
59201: PPUSH
59202: CALL_OW 111
// result := [ _x , _y ] ;
59206: LD_ADDR_VAR 0 3
59210: PUSH
59211: LD_VAR 0 5
59215: PUSH
59216: LD_VAR 0 7
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: ST_TO_ADDR
// exit ;
59225: POP
59226: POP
59227: GO 59233
// end ; end ;
59229: GO 59071
59231: POP
59232: POP
// end ;
59233: LD_VAR 0 3
59237: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59238: LD_INT 0
59240: PPUSH
59241: PPUSH
59242: PPUSH
// result := 0 ;
59243: LD_ADDR_VAR 0 3
59247: PUSH
59248: LD_INT 0
59250: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59251: LD_VAR 0 1
59255: PUSH
59256: LD_INT 0
59258: LESS
59259: IFTRUE 59271
59261: PUSH
59262: LD_VAR 0 1
59266: PUSH
59267: LD_INT 8
59269: GREATER
59270: OR
59271: IFTRUE 59283
59273: PUSH
59274: LD_VAR 0 2
59278: PUSH
59279: LD_INT 0
59281: LESS
59282: OR
59283: IFTRUE 59295
59285: PUSH
59286: LD_VAR 0 2
59290: PUSH
59291: LD_INT 8
59293: GREATER
59294: OR
59295: IFFALSE 59299
// exit ;
59297: GO 59374
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59299: LD_ADDR_VAR 0 4
59303: PUSH
59304: LD_INT 22
59306: PUSH
59307: LD_VAR 0 2
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PPUSH
59316: CALL_OW 69
59320: PUSH
59321: FOR_IN
59322: IFFALSE 59372
// begin un := UnitShoot ( i ) ;
59324: LD_ADDR_VAR 0 5
59328: PUSH
59329: LD_VAR 0 4
59333: PPUSH
59334: CALL_OW 504
59338: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59339: LD_VAR 0 5
59343: PPUSH
59344: CALL_OW 255
59348: PUSH
59349: LD_VAR 0 1
59353: EQUAL
59354: IFFALSE 59370
// begin result := un ;
59356: LD_ADDR_VAR 0 3
59360: PUSH
59361: LD_VAR 0 5
59365: ST_TO_ADDR
// exit ;
59366: POP
59367: POP
59368: GO 59374
// end ; end ;
59370: GO 59321
59372: POP
59373: POP
// end ;
59374: LD_VAR 0 3
59378: RET
// export function GetCargoBay ( units ) ; begin
59379: LD_INT 0
59381: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59382: LD_ADDR_VAR 0 2
59386: PUSH
59387: LD_VAR 0 1
59391: PPUSH
59392: LD_INT 2
59394: PUSH
59395: LD_INT 34
59397: PUSH
59398: LD_INT 12
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 34
59407: PUSH
59408: LD_INT 51
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 34
59417: PUSH
59418: LD_INT 32
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 34
59427: PUSH
59428: LD_INT 89
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: PPUSH
59442: CALL_OW 72
59446: ST_TO_ADDR
// end ;
59447: LD_VAR 0 2
59451: RET
// export function Negate ( value ) ; begin
59452: LD_INT 0
59454: PPUSH
// result := not value ;
59455: LD_ADDR_VAR 0 2
59459: PUSH
59460: LD_VAR 0 1
59464: NOT
59465: ST_TO_ADDR
// end ;
59466: LD_VAR 0 2
59470: RET
// export function Inc ( value ) ; begin
59471: LD_INT 0
59473: PPUSH
// result := value + 1 ;
59474: LD_ADDR_VAR 0 2
59478: PUSH
59479: LD_VAR 0 1
59483: PUSH
59484: LD_INT 1
59486: PLUS
59487: ST_TO_ADDR
// end ;
59488: LD_VAR 0 2
59492: RET
// export function Dec ( value ) ; begin
59493: LD_INT 0
59495: PPUSH
// result := value - 1 ;
59496: LD_ADDR_VAR 0 2
59500: PUSH
59501: LD_VAR 0 1
59505: PUSH
59506: LD_INT 1
59508: MINUS
59509: ST_TO_ADDR
// end ;
59510: LD_VAR 0 2
59514: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59515: LD_INT 0
59517: PPUSH
59518: PPUSH
59519: PPUSH
59520: PPUSH
59521: PPUSH
59522: PPUSH
59523: PPUSH
59524: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59525: LD_VAR 0 1
59529: PPUSH
59530: LD_VAR 0 2
59534: PPUSH
59535: CALL_OW 488
59539: NOT
59540: IFTRUE 59559
59542: PUSH
59543: LD_VAR 0 3
59547: PPUSH
59548: LD_VAR 0 4
59552: PPUSH
59553: CALL_OW 488
59557: NOT
59558: OR
59559: IFFALSE 59572
// begin result := - 1 ;
59561: LD_ADDR_VAR 0 5
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: ST_TO_ADDR
// exit ;
59570: GO 59807
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59572: LD_ADDR_VAR 0 12
59576: PUSH
59577: LD_VAR 0 1
59581: PPUSH
59582: LD_VAR 0 2
59586: PPUSH
59587: LD_VAR 0 3
59591: PPUSH
59592: LD_VAR 0 4
59596: PPUSH
59597: CALL 58643 0 4
59601: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59602: LD_ADDR_VAR 0 11
59606: PUSH
59607: LD_VAR 0 1
59611: PPUSH
59612: LD_VAR 0 2
59616: PPUSH
59617: LD_VAR 0 12
59621: PUSH
59622: LD_INT 1
59624: ARRAY
59625: PPUSH
59626: LD_VAR 0 12
59630: PUSH
59631: LD_INT 2
59633: ARRAY
59634: PPUSH
59635: CALL_OW 298
59639: ST_TO_ADDR
// distance := 9999 ;
59640: LD_ADDR_VAR 0 10
59644: PUSH
59645: LD_INT 9999
59647: ST_TO_ADDR
// for i := 0 to 5 do
59648: LD_ADDR_VAR 0 6
59652: PUSH
59653: DOUBLE
59654: LD_INT 0
59656: DEC
59657: ST_TO_ADDR
59658: LD_INT 5
59660: PUSH
59661: FOR_TO
59662: IFFALSE 59805
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59664: LD_ADDR_VAR 0 7
59668: PUSH
59669: LD_VAR 0 1
59673: PPUSH
59674: LD_VAR 0 6
59678: PPUSH
59679: LD_VAR 0 11
59683: PPUSH
59684: CALL_OW 272
59688: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59689: LD_ADDR_VAR 0 8
59693: PUSH
59694: LD_VAR 0 2
59698: PPUSH
59699: LD_VAR 0 6
59703: PPUSH
59704: LD_VAR 0 11
59708: PPUSH
59709: CALL_OW 273
59713: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59714: LD_VAR 0 7
59718: PPUSH
59719: LD_VAR 0 8
59723: PPUSH
59724: CALL_OW 488
59728: NOT
59729: IFFALSE 59733
// continue ;
59731: GO 59661
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59733: LD_ADDR_VAR 0 9
59737: PUSH
59738: LD_VAR 0 12
59742: PUSH
59743: LD_INT 1
59745: ARRAY
59746: PPUSH
59747: LD_VAR 0 12
59751: PUSH
59752: LD_INT 2
59754: ARRAY
59755: PPUSH
59756: LD_VAR 0 7
59760: PPUSH
59761: LD_VAR 0 8
59765: PPUSH
59766: CALL_OW 298
59770: ST_TO_ADDR
// if tmp < distance then
59771: LD_VAR 0 9
59775: PUSH
59776: LD_VAR 0 10
59780: LESS
59781: IFFALSE 59803
// begin result := i ;
59783: LD_ADDR_VAR 0 5
59787: PUSH
59788: LD_VAR 0 6
59792: ST_TO_ADDR
// distance := tmp ;
59793: LD_ADDR_VAR 0 10
59797: PUSH
59798: LD_VAR 0 9
59802: ST_TO_ADDR
// end ; end ;
59803: GO 59661
59805: POP
59806: POP
// end ;
59807: LD_VAR 0 5
59811: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59812: LD_INT 0
59814: PPUSH
59815: PPUSH
// if not driver or not IsInUnit ( driver ) then
59816: LD_VAR 0 1
59820: NOT
59821: IFTRUE 59835
59823: PUSH
59824: LD_VAR 0 1
59828: PPUSH
59829: CALL_OW 310
59833: NOT
59834: OR
59835: IFFALSE 59839
// exit ;
59837: GO 59929
// vehicle := IsInUnit ( driver ) ;
59839: LD_ADDR_VAR 0 3
59843: PUSH
59844: LD_VAR 0 1
59848: PPUSH
59849: CALL_OW 310
59853: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59854: LD_VAR 0 1
59858: PPUSH
59859: LD_STRING \
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 0
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: PUSH
59889: LD_STRING E
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_VAR 0 3
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PPUSH
59925: CALL_OW 446
// end ;
59929: LD_VAR 0 2
59933: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59934: LD_INT 0
59936: PPUSH
59937: PPUSH
// if not driver or not IsInUnit ( driver ) then
59938: LD_VAR 0 1
59942: NOT
59943: IFTRUE 59957
59945: PUSH
59946: LD_VAR 0 1
59950: PPUSH
59951: CALL_OW 310
59955: NOT
59956: OR
59957: IFFALSE 59961
// exit ;
59959: GO 60051
// vehicle := IsInUnit ( driver ) ;
59961: LD_ADDR_VAR 0 3
59965: PUSH
59966: LD_VAR 0 1
59970: PPUSH
59971: CALL_OW 310
59975: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59976: LD_VAR 0 1
59980: PPUSH
59981: LD_STRING \
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: PUSH
60011: LD_STRING E
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: LD_VAR 0 3
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 0
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PPUSH
60047: CALL_OW 447
// end ;
60051: LD_VAR 0 2
60055: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60056: LD_INT 0
60058: PPUSH
60059: PPUSH
60060: PPUSH
// tmp := [ ] ;
60061: LD_ADDR_VAR 0 5
60065: PUSH
60066: EMPTY
60067: ST_TO_ADDR
// for i in units do
60068: LD_ADDR_VAR 0 4
60072: PUSH
60073: LD_VAR 0 1
60077: PUSH
60078: FOR_IN
60079: IFFALSE 60117
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60081: LD_ADDR_VAR 0 5
60085: PUSH
60086: LD_VAR 0 5
60090: PPUSH
60091: LD_VAR 0 5
60095: PUSH
60096: LD_INT 1
60098: PLUS
60099: PPUSH
60100: LD_VAR 0 4
60104: PPUSH
60105: CALL_OW 256
60109: PPUSH
60110: CALL_OW 2
60114: ST_TO_ADDR
60115: GO 60078
60117: POP
60118: POP
// if not tmp then
60119: LD_VAR 0 5
60123: NOT
60124: IFFALSE 60128
// exit ;
60126: GO 60176
// if asc then
60128: LD_VAR 0 2
60132: IFFALSE 60156
// result := SortListByListAsc ( units , tmp ) else
60134: LD_ADDR_VAR 0 3
60138: PUSH
60139: LD_VAR 0 1
60143: PPUSH
60144: LD_VAR 0 5
60148: PPUSH
60149: CALL_OW 76
60153: ST_TO_ADDR
60154: GO 60176
// result := SortListByListDesc ( units , tmp ) ;
60156: LD_ADDR_VAR 0 3
60160: PUSH
60161: LD_VAR 0 1
60165: PPUSH
60166: LD_VAR 0 5
60170: PPUSH
60171: CALL_OW 77
60175: ST_TO_ADDR
// end ;
60176: LD_VAR 0 3
60180: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60181: LD_INT 0
60183: PPUSH
60184: PPUSH
// task := GetTaskList ( mech ) ;
60185: LD_ADDR_VAR 0 4
60189: PUSH
60190: LD_VAR 0 1
60194: PPUSH
60195: CALL_OW 437
60199: ST_TO_ADDR
// if not task then
60200: LD_VAR 0 4
60204: NOT
60205: IFFALSE 60209
// exit ;
60207: GO 60253
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60209: LD_ADDR_VAR 0 3
60213: PUSH
60214: LD_VAR 0 4
60218: PUSH
60219: LD_INT 1
60221: ARRAY
60222: PUSH
60223: LD_INT 1
60225: ARRAY
60226: PUSH
60227: LD_STRING r
60229: EQUAL
60230: IFFALSE 60252
60232: PUSH
60233: LD_VAR 0 4
60237: PUSH
60238: LD_INT 1
60240: ARRAY
60241: PUSH
60242: LD_INT 4
60244: ARRAY
60245: PUSH
60246: LD_VAR 0 2
60250: EQUAL
60251: AND
60252: ST_TO_ADDR
// end ;
60253: LD_VAR 0 3
60257: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60258: LD_INT 0
60260: PPUSH
// SetDir ( unit , d ) ;
60261: LD_VAR 0 1
60265: PPUSH
60266: LD_VAR 0 4
60270: PPUSH
60271: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
60275: LD_ADDR_VAR 0 6
60279: PUSH
60280: LD_VAR 0 1
60284: PPUSH
60285: LD_VAR 0 2
60289: PPUSH
60290: LD_VAR 0 3
60294: PPUSH
60295: LD_VAR 0 5
60299: PPUSH
60300: CALL_OW 48
60304: ST_TO_ADDR
// end ;
60305: LD_VAR 0 6
60309: RET
// export function ToNaturalNumber ( number ) ; begin
60310: LD_INT 0
60312: PPUSH
// result := number div 1 ;
60313: LD_ADDR_VAR 0 2
60317: PUSH
60318: LD_VAR 0 1
60322: PUSH
60323: LD_INT 1
60325: DIV
60326: ST_TO_ADDR
// if number < 0 then
60327: LD_VAR 0 1
60331: PUSH
60332: LD_INT 0
60334: LESS
60335: IFFALSE 60345
// result := 0 ;
60337: LD_ADDR_VAR 0 2
60341: PUSH
60342: LD_INT 0
60344: ST_TO_ADDR
// end ;
60345: LD_VAR 0 2
60349: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
60350: LD_INT 0
60352: PPUSH
60353: PPUSH
60354: PPUSH
// if not buildings then
60355: LD_VAR 0 1
60359: NOT
60360: IFFALSE 60364
// exit ;
60362: GO 60479
// tmp := [ ] ;
60364: LD_ADDR_VAR 0 5
60368: PUSH
60369: EMPTY
60370: ST_TO_ADDR
// for b in buildings do
60371: LD_ADDR_VAR 0 4
60375: PUSH
60376: LD_VAR 0 1
60380: PUSH
60381: FOR_IN
60382: IFFALSE 60420
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
60384: LD_ADDR_VAR 0 5
60388: PUSH
60389: LD_VAR 0 5
60393: PPUSH
60394: LD_VAR 0 5
60398: PUSH
60399: LD_INT 1
60401: PLUS
60402: PPUSH
60403: LD_VAR 0 4
60407: PPUSH
60408: CALL_OW 266
60412: PPUSH
60413: CALL_OW 1
60417: ST_TO_ADDR
60418: GO 60381
60420: POP
60421: POP
// if not tmp then
60422: LD_VAR 0 5
60426: NOT
60427: IFFALSE 60431
// exit ;
60429: GO 60479
// if asc then
60431: LD_VAR 0 2
60435: IFFALSE 60459
// result := SortListByListAsc ( buildings , tmp ) else
60437: LD_ADDR_VAR 0 3
60441: PUSH
60442: LD_VAR 0 1
60446: PPUSH
60447: LD_VAR 0 5
60451: PPUSH
60452: CALL_OW 76
60456: ST_TO_ADDR
60457: GO 60479
// result := SortListByListDesc ( buildings , tmp ) ;
60459: LD_ADDR_VAR 0 3
60463: PUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: LD_VAR 0 5
60473: PPUSH
60474: CALL_OW 77
60478: ST_TO_ADDR
// end ;
60479: LD_VAR 0 3
60483: RET
// export function SortByClass ( units , class ) ; var un ; begin
60484: LD_INT 0
60486: PPUSH
60487: PPUSH
// if not units or not class then
60488: LD_VAR 0 1
60492: NOT
60493: IFTRUE 60502
60495: PUSH
60496: LD_VAR 0 2
60500: NOT
60501: OR
60502: IFFALSE 60506
// exit ;
60504: GO 60601
// result := [ ] ;
60506: LD_ADDR_VAR 0 3
60510: PUSH
60511: EMPTY
60512: ST_TO_ADDR
// for un in units do
60513: LD_ADDR_VAR 0 4
60517: PUSH
60518: LD_VAR 0 1
60522: PUSH
60523: FOR_IN
60524: IFFALSE 60599
// if GetClass ( un ) = class then
60526: LD_VAR 0 4
60530: PPUSH
60531: CALL_OW 257
60535: PUSH
60536: LD_VAR 0 2
60540: EQUAL
60541: IFFALSE 60568
// result := Insert ( result , 1 , un ) else
60543: LD_ADDR_VAR 0 3
60547: PUSH
60548: LD_VAR 0 3
60552: PPUSH
60553: LD_INT 1
60555: PPUSH
60556: LD_VAR 0 4
60560: PPUSH
60561: CALL_OW 2
60565: ST_TO_ADDR
60566: GO 60597
// result := Replace ( result , result + 1 , un ) ;
60568: LD_ADDR_VAR 0 3
60572: PUSH
60573: LD_VAR 0 3
60577: PPUSH
60578: LD_VAR 0 3
60582: PUSH
60583: LD_INT 1
60585: PLUS
60586: PPUSH
60587: LD_VAR 0 4
60591: PPUSH
60592: CALL_OW 1
60596: ST_TO_ADDR
60597: GO 60523
60599: POP
60600: POP
// end ;
60601: LD_VAR 0 3
60605: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60606: LD_INT 0
60608: PPUSH
60609: PPUSH
60610: PPUSH
60611: PPUSH
60612: PPUSH
60613: PPUSH
60614: PPUSH
// result := [ ] ;
60615: LD_ADDR_VAR 0 4
60619: PUSH
60620: EMPTY
60621: ST_TO_ADDR
// if x - r < 0 then
60622: LD_VAR 0 1
60626: PUSH
60627: LD_VAR 0 3
60631: MINUS
60632: PUSH
60633: LD_INT 0
60635: LESS
60636: IFFALSE 60648
// min_x := 0 else
60638: LD_ADDR_VAR 0 8
60642: PUSH
60643: LD_INT 0
60645: ST_TO_ADDR
60646: GO 60664
// min_x := x - r ;
60648: LD_ADDR_VAR 0 8
60652: PUSH
60653: LD_VAR 0 1
60657: PUSH
60658: LD_VAR 0 3
60662: MINUS
60663: ST_TO_ADDR
// if y - r < 0 then
60664: LD_VAR 0 2
60668: PUSH
60669: LD_VAR 0 3
60673: MINUS
60674: PUSH
60675: LD_INT 0
60677: LESS
60678: IFFALSE 60690
// min_y := 0 else
60680: LD_ADDR_VAR 0 7
60684: PUSH
60685: LD_INT 0
60687: ST_TO_ADDR
60688: GO 60706
// min_y := y - r ;
60690: LD_ADDR_VAR 0 7
60694: PUSH
60695: LD_VAR 0 2
60699: PUSH
60700: LD_VAR 0 3
60704: MINUS
60705: ST_TO_ADDR
// max_x := x + r ;
60706: LD_ADDR_VAR 0 9
60710: PUSH
60711: LD_VAR 0 1
60715: PUSH
60716: LD_VAR 0 3
60720: PLUS
60721: ST_TO_ADDR
// max_y := y + r ;
60722: LD_ADDR_VAR 0 10
60726: PUSH
60727: LD_VAR 0 2
60731: PUSH
60732: LD_VAR 0 3
60736: PLUS
60737: ST_TO_ADDR
// for _x = min_x to max_x do
60738: LD_ADDR_VAR 0 5
60742: PUSH
60743: DOUBLE
60744: LD_VAR 0 8
60748: DEC
60749: ST_TO_ADDR
60750: LD_VAR 0 9
60754: PUSH
60755: FOR_TO
60756: IFFALSE 60857
// for _y = min_y to max_y do
60758: LD_ADDR_VAR 0 6
60762: PUSH
60763: DOUBLE
60764: LD_VAR 0 7
60768: DEC
60769: ST_TO_ADDR
60770: LD_VAR 0 10
60774: PUSH
60775: FOR_TO
60776: IFFALSE 60853
// begin if not ValidHex ( _x , _y ) then
60778: LD_VAR 0 5
60782: PPUSH
60783: LD_VAR 0 6
60787: PPUSH
60788: CALL_OW 488
60792: NOT
60793: IFFALSE 60797
// continue ;
60795: GO 60775
// if GetResourceTypeXY ( _x , _y ) then
60797: LD_VAR 0 5
60801: PPUSH
60802: LD_VAR 0 6
60806: PPUSH
60807: CALL_OW 283
60811: IFFALSE 60851
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60813: LD_ADDR_VAR 0 4
60817: PUSH
60818: LD_VAR 0 4
60822: PPUSH
60823: LD_VAR 0 4
60827: PUSH
60828: LD_INT 1
60830: PLUS
60831: PPUSH
60832: LD_VAR 0 5
60836: PUSH
60837: LD_VAR 0 6
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PPUSH
60846: CALL_OW 1
60850: ST_TO_ADDR
// end ;
60851: GO 60775
60853: POP
60854: POP
60855: GO 60755
60857: POP
60858: POP
// end ;
60859: LD_VAR 0 4
60863: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60864: LD_INT 0
60866: PPUSH
60867: PPUSH
60868: PPUSH
60869: PPUSH
60870: PPUSH
60871: PPUSH
60872: PPUSH
60873: PPUSH
// if not units then
60874: LD_VAR 0 1
60878: NOT
60879: IFFALSE 60883
// exit ;
60881: GO 61415
// result := UnitFilter ( units , [ f_ok ] ) ;
60883: LD_ADDR_VAR 0 3
60887: PUSH
60888: LD_VAR 0 1
60892: PPUSH
60893: LD_INT 50
60895: PUSH
60896: EMPTY
60897: LIST
60898: PPUSH
60899: CALL_OW 72
60903: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60904: LD_ADDR_VAR 0 8
60908: PUSH
60909: LD_VAR 0 1
60913: PUSH
60914: LD_INT 1
60916: ARRAY
60917: PPUSH
60918: CALL_OW 255
60922: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60923: LD_ADDR_VAR 0 10
60927: PUSH
60928: LD_INT 29
60930: PUSH
60931: LD_INT 91
60933: PUSH
60934: LD_INT 49
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: ST_TO_ADDR
// if not result then
60942: LD_VAR 0 3
60946: NOT
60947: IFFALSE 60951
// exit ;
60949: GO 61415
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60951: LD_ADDR_VAR 0 5
60955: PUSH
60956: LD_INT 81
60958: PUSH
60959: LD_VAR 0 8
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PPUSH
60968: CALL_OW 69
60972: ST_TO_ADDR
// for i in result do
60973: LD_ADDR_VAR 0 4
60977: PUSH
60978: LD_VAR 0 3
60982: PUSH
60983: FOR_IN
60984: IFFALSE 61413
// begin tag := GetTag ( i ) + 1 ;
60986: LD_ADDR_VAR 0 9
60990: PUSH
60991: LD_VAR 0 4
60995: PPUSH
60996: CALL_OW 110
61000: PUSH
61001: LD_INT 1
61003: PLUS
61004: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61005: LD_ADDR_VAR 0 7
61009: PUSH
61010: LD_VAR 0 4
61014: PPUSH
61015: CALL_OW 250
61019: PPUSH
61020: LD_VAR 0 4
61024: PPUSH
61025: CALL_OW 251
61029: PPUSH
61030: LD_INT 4
61032: PPUSH
61033: CALL 60606 0 3
61037: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
61038: LD_VAR 0 4
61042: PPUSH
61043: CALL_OW 247
61047: PUSH
61048: LD_INT 2
61050: EQUAL
61051: IFFALSE 61063
61053: PUSH
61054: LD_VAR 0 7
61058: PUSH
61059: LD_INT 2
61061: GREATER
61062: AND
61063: IFFALSE 61083
61065: PUSH
61066: LD_VAR 0 4
61070: PPUSH
61071: CALL_OW 264
61075: PUSH
61076: LD_VAR 0 10
61080: IN
61081: NOT
61082: AND
61083: IFFALSE 61122
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61085: LD_VAR 0 4
61089: PPUSH
61090: LD_VAR 0 7
61094: PUSH
61095: LD_INT 1
61097: ARRAY
61098: PUSH
61099: LD_INT 1
61101: ARRAY
61102: PPUSH
61103: LD_VAR 0 7
61107: PUSH
61108: LD_INT 1
61110: ARRAY
61111: PUSH
61112: LD_INT 2
61114: ARRAY
61115: PPUSH
61116: CALL_OW 116
61120: GO 61411
// if path > tag then
61122: LD_VAR 0 2
61126: PUSH
61127: LD_VAR 0 9
61131: GREATER
61132: IFFALSE 61340
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61134: LD_ADDR_VAR 0 6
61138: PUSH
61139: LD_VAR 0 5
61143: PPUSH
61144: LD_INT 91
61146: PUSH
61147: LD_VAR 0 4
61151: PUSH
61152: LD_INT 8
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: LIST
61159: PPUSH
61160: CALL_OW 72
61164: ST_TO_ADDR
// if nearEnemy then
61165: LD_VAR 0 6
61169: IFFALSE 61238
// begin if GetWeapon ( i ) = ru_time_lapser then
61171: LD_VAR 0 4
61175: PPUSH
61176: CALL_OW 264
61180: PUSH
61181: LD_INT 49
61183: EQUAL
61184: IFFALSE 61212
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61186: LD_VAR 0 4
61190: PPUSH
61191: LD_VAR 0 6
61195: PPUSH
61196: LD_VAR 0 4
61200: PPUSH
61201: CALL_OW 74
61205: PPUSH
61206: CALL_OW 112
61210: GO 61236
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61212: LD_VAR 0 4
61216: PPUSH
61217: LD_VAR 0 6
61221: PPUSH
61222: LD_VAR 0 4
61226: PPUSH
61227: CALL_OW 74
61231: PPUSH
61232: CALL 62496 0 2
// end else
61236: GO 61338
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61238: LD_VAR 0 4
61242: PPUSH
61243: LD_VAR 0 2
61247: PUSH
61248: LD_VAR 0 9
61252: ARRAY
61253: PUSH
61254: LD_INT 1
61256: ARRAY
61257: PPUSH
61258: LD_VAR 0 2
61262: PUSH
61263: LD_VAR 0 9
61267: ARRAY
61268: PUSH
61269: LD_INT 2
61271: ARRAY
61272: PPUSH
61273: CALL_OW 297
61277: PUSH
61278: LD_INT 6
61280: GREATER
61281: IFFALSE 61324
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61283: LD_VAR 0 4
61287: PPUSH
61288: LD_VAR 0 2
61292: PUSH
61293: LD_VAR 0 9
61297: ARRAY
61298: PUSH
61299: LD_INT 1
61301: ARRAY
61302: PPUSH
61303: LD_VAR 0 2
61307: PUSH
61308: LD_VAR 0 9
61312: ARRAY
61313: PUSH
61314: LD_INT 2
61316: ARRAY
61317: PPUSH
61318: CALL_OW 114
61322: GO 61338
// SetTag ( i , tag ) ;
61324: LD_VAR 0 4
61328: PPUSH
61329: LD_VAR 0 9
61333: PPUSH
61334: CALL_OW 109
// end else
61338: GO 61411
// if enemy then
61340: LD_VAR 0 5
61344: IFFALSE 61411
// begin if GetWeapon ( i ) = ru_time_lapser then
61346: LD_VAR 0 4
61350: PPUSH
61351: CALL_OW 264
61355: PUSH
61356: LD_INT 49
61358: EQUAL
61359: IFFALSE 61387
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61361: LD_VAR 0 4
61365: PPUSH
61366: LD_VAR 0 5
61370: PPUSH
61371: LD_VAR 0 4
61375: PPUSH
61376: CALL_OW 74
61380: PPUSH
61381: CALL_OW 112
61385: GO 61411
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61387: LD_VAR 0 4
61391: PPUSH
61392: LD_VAR 0 5
61396: PPUSH
61397: LD_VAR 0 4
61401: PPUSH
61402: CALL_OW 74
61406: PPUSH
61407: CALL 62496 0 2
// end ; end ;
61411: GO 60983
61413: POP
61414: POP
// end ;
61415: LD_VAR 0 3
61419: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61420: LD_INT 0
61422: PPUSH
61423: PPUSH
61424: PPUSH
// if not unit or IsInUnit ( unit ) then
61425: LD_VAR 0 1
61429: NOT
61430: IFTRUE 61443
61432: PUSH
61433: LD_VAR 0 1
61437: PPUSH
61438: CALL_OW 310
61442: OR
61443: IFFALSE 61447
// exit ;
61445: GO 61538
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61447: LD_ADDR_VAR 0 4
61451: PUSH
61452: LD_VAR 0 1
61456: PPUSH
61457: CALL_OW 250
61461: PPUSH
61462: LD_VAR 0 2
61466: PPUSH
61467: LD_INT 1
61469: PPUSH
61470: CALL_OW 272
61474: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61475: LD_ADDR_VAR 0 5
61479: PUSH
61480: LD_VAR 0 1
61484: PPUSH
61485: CALL_OW 251
61489: PPUSH
61490: LD_VAR 0 2
61494: PPUSH
61495: LD_INT 1
61497: PPUSH
61498: CALL_OW 273
61502: ST_TO_ADDR
// if ValidHex ( x , y ) then
61503: LD_VAR 0 4
61507: PPUSH
61508: LD_VAR 0 5
61512: PPUSH
61513: CALL_OW 488
61517: IFFALSE 61538
// ComTurnXY ( unit , x , y ) ;
61519: LD_VAR 0 1
61523: PPUSH
61524: LD_VAR 0 4
61528: PPUSH
61529: LD_VAR 0 5
61533: PPUSH
61534: CALL_OW 118
// end ;
61538: LD_VAR 0 3
61542: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61543: LD_INT 0
61545: PPUSH
61546: PPUSH
// result := false ;
61547: LD_ADDR_VAR 0 3
61551: PUSH
61552: LD_INT 0
61554: ST_TO_ADDR
// if not units then
61555: LD_VAR 0 2
61559: NOT
61560: IFFALSE 61564
// exit ;
61562: GO 61609
// for i in units do
61564: LD_ADDR_VAR 0 4
61568: PUSH
61569: LD_VAR 0 2
61573: PUSH
61574: FOR_IN
61575: IFFALSE 61607
// if See ( side , i ) then
61577: LD_VAR 0 1
61581: PPUSH
61582: LD_VAR 0 4
61586: PPUSH
61587: CALL_OW 292
61591: IFFALSE 61605
// begin result := true ;
61593: LD_ADDR_VAR 0 3
61597: PUSH
61598: LD_INT 1
61600: ST_TO_ADDR
// exit ;
61601: POP
61602: POP
61603: GO 61609
// end ;
61605: GO 61574
61607: POP
61608: POP
// end ;
61609: LD_VAR 0 3
61613: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61614: LD_INT 0
61616: PPUSH
61617: PPUSH
61618: PPUSH
61619: PPUSH
// if not unit or not points then
61620: LD_VAR 0 1
61624: NOT
61625: IFTRUE 61634
61627: PUSH
61628: LD_VAR 0 2
61632: NOT
61633: OR
61634: IFFALSE 61638
// exit ;
61636: GO 61728
// dist := 99999 ;
61638: LD_ADDR_VAR 0 5
61642: PUSH
61643: LD_INT 99999
61645: ST_TO_ADDR
// for i in points do
61646: LD_ADDR_VAR 0 4
61650: PUSH
61651: LD_VAR 0 2
61655: PUSH
61656: FOR_IN
61657: IFFALSE 61726
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61659: LD_ADDR_VAR 0 6
61663: PUSH
61664: LD_VAR 0 1
61668: PPUSH
61669: LD_VAR 0 4
61673: PUSH
61674: LD_INT 1
61676: ARRAY
61677: PPUSH
61678: LD_VAR 0 4
61682: PUSH
61683: LD_INT 2
61685: ARRAY
61686: PPUSH
61687: CALL_OW 297
61691: ST_TO_ADDR
// if tmpDist < dist then
61692: LD_VAR 0 6
61696: PUSH
61697: LD_VAR 0 5
61701: LESS
61702: IFFALSE 61724
// begin result := i ;
61704: LD_ADDR_VAR 0 3
61708: PUSH
61709: LD_VAR 0 4
61713: ST_TO_ADDR
// dist := tmpDist ;
61714: LD_ADDR_VAR 0 5
61718: PUSH
61719: LD_VAR 0 6
61723: ST_TO_ADDR
// end ; end ;
61724: GO 61656
61726: POP
61727: POP
// end ;
61728: LD_VAR 0 3
61732: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
61733: LD_INT 0
61735: PPUSH
// uc_side := side ;
61736: LD_ADDR_OWVAR 20
61740: PUSH
61741: LD_VAR 0 1
61745: ST_TO_ADDR
// uc_nation := 3 ;
61746: LD_ADDR_OWVAR 21
61750: PUSH
61751: LD_INT 3
61753: ST_TO_ADDR
// vc_chassis := 25 ;
61754: LD_ADDR_OWVAR 37
61758: PUSH
61759: LD_INT 25
61761: ST_TO_ADDR
// vc_engine := engine_siberite ;
61762: LD_ADDR_OWVAR 39
61766: PUSH
61767: LD_INT 3
61769: ST_TO_ADDR
// vc_control := control_computer ;
61770: LD_ADDR_OWVAR 38
61774: PUSH
61775: LD_INT 3
61777: ST_TO_ADDR
// vc_weapon := 59 ;
61778: LD_ADDR_OWVAR 40
61782: PUSH
61783: LD_INT 59
61785: ST_TO_ADDR
// result := CreateVehicle ;
61786: LD_ADDR_VAR 0 5
61790: PUSH
61791: CALL_OW 45
61795: ST_TO_ADDR
// SetDir ( result , d ) ;
61796: LD_VAR 0 5
61800: PPUSH
61801: LD_VAR 0 4
61805: PPUSH
61806: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61810: LD_VAR 0 5
61814: PPUSH
61815: LD_VAR 0 2
61819: PPUSH
61820: LD_VAR 0 3
61824: PPUSH
61825: LD_INT 0
61827: PPUSH
61828: CALL_OW 48
// end ;
61832: LD_VAR 0 5
61836: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61837: LD_INT 0
61839: PPUSH
61840: PPUSH
61841: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61842: LD_ADDR_VAR 0 2
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61865: LD_VAR 0 1
61869: NOT
61870: IFTRUE 61903
61872: PUSH
61873: LD_VAR 0 1
61877: PPUSH
61878: CALL_OW 264
61882: PUSH
61883: LD_INT 12
61885: PUSH
61886: LD_INT 51
61888: PUSH
61889: LD_INT 32
61891: PUSH
61892: LD_INT 89
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: IN
61901: NOT
61902: OR
61903: IFFALSE 61907
// exit ;
61905: GO 62005
// for i := 1 to 3 do
61907: LD_ADDR_VAR 0 3
61911: PUSH
61912: DOUBLE
61913: LD_INT 1
61915: DEC
61916: ST_TO_ADDR
61917: LD_INT 3
61919: PUSH
61920: FOR_TO
61921: IFFALSE 62003
// begin tmp := GetCargo ( cargo , i ) ;
61923: LD_ADDR_VAR 0 4
61927: PUSH
61928: LD_VAR 0 1
61932: PPUSH
61933: LD_VAR 0 3
61937: PPUSH
61938: CALL_OW 289
61942: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61943: LD_ADDR_VAR 0 2
61947: PUSH
61948: LD_VAR 0 2
61952: PPUSH
61953: LD_VAR 0 3
61957: PPUSH
61958: LD_VAR 0 4
61962: PPUSH
61963: CALL_OW 1
61967: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61968: LD_ADDR_VAR 0 2
61972: PUSH
61973: LD_VAR 0 2
61977: PPUSH
61978: LD_INT 4
61980: PPUSH
61981: LD_VAR 0 2
61985: PUSH
61986: LD_INT 4
61988: ARRAY
61989: PUSH
61990: LD_VAR 0 4
61994: PLUS
61995: PPUSH
61996: CALL_OW 1
62000: ST_TO_ADDR
// end ;
62001: GO 61920
62003: POP
62004: POP
// end ;
62005: LD_VAR 0 2
62009: RET
// export function Length ( array ) ; begin
62010: LD_INT 0
62012: PPUSH
// result := array + 0 ;
62013: LD_ADDR_VAR 0 2
62017: PUSH
62018: LD_VAR 0 1
62022: PUSH
62023: LD_INT 0
62025: PLUS
62026: ST_TO_ADDR
// end ;
62027: LD_VAR 0 2
62031: RET
// export function PrepareArray ( array ) ; begin
62032: LD_INT 0
62034: PPUSH
// result := array diff 0 ;
62035: LD_ADDR_VAR 0 2
62039: PUSH
62040: LD_VAR 0 1
62044: PUSH
62045: LD_INT 0
62047: DIFF
62048: ST_TO_ADDR
// if not result [ 1 ] then
62049: LD_VAR 0 2
62053: PUSH
62054: LD_INT 1
62056: ARRAY
62057: NOT
62058: IFFALSE 62078
// result := Delete ( result , 1 ) ;
62060: LD_ADDR_VAR 0 2
62064: PUSH
62065: LD_VAR 0 2
62069: PPUSH
62070: LD_INT 1
62072: PPUSH
62073: CALL_OW 3
62077: ST_TO_ADDR
// end ;
62078: LD_VAR 0 2
62082: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62083: LD_INT 0
62085: PPUSH
62086: PPUSH
62087: PPUSH
62088: PPUSH
// sibRocketRange := 25 ;
62089: LD_ADDR_VAR 0 6
62093: PUSH
62094: LD_INT 25
62096: ST_TO_ADDR
// result := false ;
62097: LD_ADDR_VAR 0 4
62101: PUSH
62102: LD_INT 0
62104: ST_TO_ADDR
// for i := 0 to 5 do
62105: LD_ADDR_VAR 0 5
62109: PUSH
62110: DOUBLE
62111: LD_INT 0
62113: DEC
62114: ST_TO_ADDR
62115: LD_INT 5
62117: PUSH
62118: FOR_TO
62119: IFFALSE 62186
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62121: LD_VAR 0 1
62125: PPUSH
62126: LD_VAR 0 5
62130: PPUSH
62131: LD_VAR 0 6
62135: PPUSH
62136: CALL_OW 272
62140: PPUSH
62141: LD_VAR 0 2
62145: PPUSH
62146: LD_VAR 0 5
62150: PPUSH
62151: LD_VAR 0 6
62155: PPUSH
62156: CALL_OW 273
62160: PPUSH
62161: LD_VAR 0 3
62165: PPUSH
62166: CALL_OW 309
62170: IFFALSE 62184
// begin result := true ;
62172: LD_ADDR_VAR 0 4
62176: PUSH
62177: LD_INT 1
62179: ST_TO_ADDR
// exit ;
62180: POP
62181: POP
62182: GO 62188
// end ;
62184: GO 62118
62186: POP
62187: POP
// end ;
62188: LD_VAR 0 4
62192: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62193: LD_INT 0
62195: PPUSH
62196: PPUSH
62197: PPUSH
// if btype = b_depot then
62198: LD_VAR 0 2
62202: PUSH
62203: LD_INT 0
62205: EQUAL
62206: IFFALSE 62218
// begin result := true ;
62208: LD_ADDR_VAR 0 3
62212: PUSH
62213: LD_INT 1
62215: ST_TO_ADDR
// exit ;
62216: GO 62338
// end ; pom := GetBase ( depot ) ;
62218: LD_ADDR_VAR 0 4
62222: PUSH
62223: LD_VAR 0 1
62227: PPUSH
62228: CALL_OW 274
62232: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62233: LD_ADDR_VAR 0 5
62237: PUSH
62238: LD_VAR 0 2
62242: PPUSH
62243: LD_VAR 0 1
62247: PPUSH
62248: CALL_OW 248
62252: PPUSH
62253: CALL_OW 450
62257: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62258: LD_ADDR_VAR 0 3
62262: PUSH
62263: LD_VAR 0 4
62267: PPUSH
62268: LD_INT 1
62270: PPUSH
62271: CALL_OW 275
62275: PUSH
62276: LD_VAR 0 5
62280: PUSH
62281: LD_INT 1
62283: ARRAY
62284: GREATEREQUAL
62285: IFFALSE 62311
62287: PUSH
62288: LD_VAR 0 4
62292: PPUSH
62293: LD_INT 2
62295: PPUSH
62296: CALL_OW 275
62300: PUSH
62301: LD_VAR 0 5
62305: PUSH
62306: LD_INT 2
62308: ARRAY
62309: GREATEREQUAL
62310: AND
62311: IFFALSE 62337
62313: PUSH
62314: LD_VAR 0 4
62318: PPUSH
62319: LD_INT 3
62321: PPUSH
62322: CALL_OW 275
62326: PUSH
62327: LD_VAR 0 5
62331: PUSH
62332: LD_INT 3
62334: ARRAY
62335: GREATEREQUAL
62336: AND
62337: ST_TO_ADDR
// end ;
62338: LD_VAR 0 3
62342: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62343: LD_INT 0
62345: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62346: LD_VAR 0 1
62350: PPUSH
62351: LD_VAR 0 2
62355: PPUSH
62356: LD_INT 0
62358: PPUSH
62359: LD_INT 0
62361: PPUSH
62362: LD_INT 1
62364: PPUSH
62365: LD_INT 0
62367: PPUSH
62368: CALL_OW 587
// end ;
62372: LD_VAR 0 3
62376: RET
// export function CenterOnNow ( unit ) ; begin
62377: LD_INT 0
62379: PPUSH
// result := IsInUnit ( unit ) ;
62380: LD_ADDR_VAR 0 2
62384: PUSH
62385: LD_VAR 0 1
62389: PPUSH
62390: CALL_OW 310
62394: ST_TO_ADDR
// if not result then
62395: LD_VAR 0 2
62399: NOT
62400: IFFALSE 62412
// result := unit ;
62402: LD_ADDR_VAR 0 2
62406: PUSH
62407: LD_VAR 0 1
62411: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62412: LD_VAR 0 1
62416: PPUSH
62417: CALL_OW 87
// end ;
62421: LD_VAR 0 2
62425: RET
// export function ComMoveHex ( unit , hex ) ; begin
62426: LD_INT 0
62428: PPUSH
// if not hex then
62429: LD_VAR 0 2
62433: NOT
62434: IFFALSE 62438
// exit ;
62436: GO 62491
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62438: LD_VAR 0 2
62442: PUSH
62443: LD_INT 1
62445: ARRAY
62446: PPUSH
62447: LD_VAR 0 2
62451: PUSH
62452: LD_INT 2
62454: ARRAY
62455: PPUSH
62456: CALL_OW 428
62460: IFFALSE 62464
// exit ;
62462: GO 62491
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62464: LD_VAR 0 1
62468: PPUSH
62469: LD_VAR 0 2
62473: PUSH
62474: LD_INT 1
62476: ARRAY
62477: PPUSH
62478: LD_VAR 0 2
62482: PUSH
62483: LD_INT 2
62485: ARRAY
62486: PPUSH
62487: CALL_OW 111
// end ;
62491: LD_VAR 0 3
62495: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62496: LD_INT 0
62498: PPUSH
62499: PPUSH
62500: PPUSH
// if not unit or not enemy then
62501: LD_VAR 0 1
62505: NOT
62506: IFTRUE 62515
62508: PUSH
62509: LD_VAR 0 2
62513: NOT
62514: OR
62515: IFFALSE 62519
// exit ;
62517: GO 62645
// x := GetX ( enemy ) ;
62519: LD_ADDR_VAR 0 4
62523: PUSH
62524: LD_VAR 0 2
62528: PPUSH
62529: CALL_OW 250
62533: ST_TO_ADDR
// y := GetY ( enemy ) ;
62534: LD_ADDR_VAR 0 5
62538: PUSH
62539: LD_VAR 0 2
62543: PPUSH
62544: CALL_OW 251
62548: ST_TO_ADDR
// if ValidHex ( x , y ) then
62549: LD_VAR 0 4
62553: PPUSH
62554: LD_VAR 0 5
62558: PPUSH
62559: CALL_OW 488
62563: IFFALSE 62645
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
62565: LD_VAR 0 2
62569: PPUSH
62570: CALL_OW 247
62574: PUSH
62575: LD_INT 3
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: IN
62585: IFTRUE 62608
62587: PUSH
62588: LD_VAR 0 1
62592: PPUSH
62593: CALL_OW 255
62597: PPUSH
62598: LD_VAR 0 2
62602: PPUSH
62603: CALL_OW 292
62607: OR
62608: IFFALSE 62626
// ComAttackUnit ( unit , enemy ) else
62610: LD_VAR 0 1
62614: PPUSH
62615: LD_VAR 0 2
62619: PPUSH
62620: CALL_OW 115
62624: GO 62645
// ComAgressiveMove ( unit , x , y ) ;
62626: LD_VAR 0 1
62630: PPUSH
62631: LD_VAR 0 4
62635: PPUSH
62636: LD_VAR 0 5
62640: PPUSH
62641: CALL_OW 114
// end ;
62645: LD_VAR 0 3
62649: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
62650: LD_INT 0
62652: PPUSH
62653: PPUSH
62654: PPUSH
// list := AreaToList ( area , 0 ) ;
62655: LD_ADDR_VAR 0 5
62659: PUSH
62660: LD_VAR 0 1
62664: PPUSH
62665: LD_INT 0
62667: PPUSH
62668: CALL_OW 517
62672: ST_TO_ADDR
// if not list then
62673: LD_VAR 0 5
62677: NOT
62678: IFFALSE 62682
// exit ;
62680: GO 62812
// if all then
62682: LD_VAR 0 2
62686: IFFALSE 62774
// begin for i := 1 to list [ 1 ] do
62688: LD_ADDR_VAR 0 4
62692: PUSH
62693: DOUBLE
62694: LD_INT 1
62696: DEC
62697: ST_TO_ADDR
62698: LD_VAR 0 5
62702: PUSH
62703: LD_INT 1
62705: ARRAY
62706: PUSH
62707: FOR_TO
62708: IFFALSE 62770
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
62710: LD_ADDR_VAR 0 3
62714: PUSH
62715: LD_VAR 0 3
62719: PPUSH
62720: LD_VAR 0 3
62724: PUSH
62725: LD_INT 1
62727: PLUS
62728: PPUSH
62729: LD_VAR 0 5
62733: PUSH
62734: LD_INT 1
62736: ARRAY
62737: PUSH
62738: LD_VAR 0 4
62742: ARRAY
62743: PUSH
62744: LD_VAR 0 5
62748: PUSH
62749: LD_INT 2
62751: ARRAY
62752: PUSH
62753: LD_VAR 0 4
62757: ARRAY
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PPUSH
62763: CALL_OW 1
62767: ST_TO_ADDR
62768: GO 62707
62770: POP
62771: POP
// exit ;
62772: GO 62812
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
62774: LD_ADDR_VAR 0 3
62778: PUSH
62779: LD_VAR 0 5
62783: PUSH
62784: LD_INT 1
62786: ARRAY
62787: PUSH
62788: LD_INT 1
62790: ARRAY
62791: PUSH
62792: LD_VAR 0 5
62796: PUSH
62797: LD_INT 2
62799: ARRAY
62800: PUSH
62801: LD_INT 1
62803: ARRAY
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: ST_TO_ADDR
// end ;
62812: LD_VAR 0 3
62816: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
62817: LD_INT 0
62819: PPUSH
62820: PPUSH
// list := AreaToList ( area , 0 ) ;
62821: LD_ADDR_VAR 0 4
62825: PUSH
62826: LD_VAR 0 1
62830: PPUSH
62831: LD_INT 0
62833: PPUSH
62834: CALL_OW 517
62838: ST_TO_ADDR
// if not list then
62839: LD_VAR 0 4
62843: NOT
62844: IFFALSE 62848
// exit ;
62846: GO 62889
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
62848: LD_ADDR_VAR 0 3
62852: PUSH
62853: LD_VAR 0 4
62857: PUSH
62858: LD_INT 1
62860: ARRAY
62861: PUSH
62862: LD_INT 1
62864: ARRAY
62865: PUSH
62866: LD_VAR 0 4
62870: PUSH
62871: LD_INT 2
62873: ARRAY
62874: PUSH
62875: LD_INT 1
62877: ARRAY
62878: PUSH
62879: LD_VAR 0 2
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: ST_TO_ADDR
// end ;
62889: LD_VAR 0 3
62893: RET
// export function First ( array ) ; begin
62894: LD_INT 0
62896: PPUSH
// if not array then
62897: LD_VAR 0 1
62901: NOT
62902: IFFALSE 62906
// exit ;
62904: GO 62920
// result := array [ 1 ] ;
62906: LD_ADDR_VAR 0 2
62910: PUSH
62911: LD_VAR 0 1
62915: PUSH
62916: LD_INT 1
62918: ARRAY
62919: ST_TO_ADDR
// end ;
62920: LD_VAR 0 2
62924: RET
// export function Last ( array ) ; begin
62925: LD_INT 0
62927: PPUSH
// if not array then
62928: LD_VAR 0 1
62932: NOT
62933: IFFALSE 62937
// exit ;
62935: GO 62953
// result := array [ array ] ;
62937: LD_ADDR_VAR 0 2
62941: PUSH
62942: LD_VAR 0 1
62946: PUSH
62947: LD_VAR 0 1
62951: ARRAY
62952: ST_TO_ADDR
// end ;
62953: LD_VAR 0 2
62957: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
62958: LD_INT 0
62960: PPUSH
62961: PPUSH
// result := [ ] ;
62962: LD_ADDR_VAR 0 5
62966: PUSH
62967: EMPTY
62968: ST_TO_ADDR
// if not array then
62969: LD_VAR 0 1
62973: NOT
62974: IFFALSE 62978
// exit ;
62976: GO 63090
// for i := 1 to array do
62978: LD_ADDR_VAR 0 6
62982: PUSH
62983: DOUBLE
62984: LD_INT 1
62986: DEC
62987: ST_TO_ADDR
62988: LD_VAR 0 1
62992: PUSH
62993: FOR_TO
62994: IFFALSE 63088
// if array [ i ] [ index ] = value then
62996: LD_VAR 0 1
63000: PUSH
63001: LD_VAR 0 6
63005: ARRAY
63006: PUSH
63007: LD_VAR 0 2
63011: ARRAY
63012: PUSH
63013: LD_VAR 0 3
63017: EQUAL
63018: IFFALSE 63086
// begin if indexColumn then
63020: LD_VAR 0 4
63024: IFFALSE 63060
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63026: LD_ADDR_VAR 0 5
63030: PUSH
63031: LD_VAR 0 5
63035: PPUSH
63036: LD_VAR 0 1
63040: PUSH
63041: LD_VAR 0 6
63045: ARRAY
63046: PUSH
63047: LD_VAR 0 4
63051: ARRAY
63052: PPUSH
63053: CALL 58098 0 2
63057: ST_TO_ADDR
63058: GO 63086
// result := Join ( result , array [ i ] ) ;
63060: LD_ADDR_VAR 0 5
63064: PUSH
63065: LD_VAR 0 5
63069: PPUSH
63070: LD_VAR 0 1
63074: PUSH
63075: LD_VAR 0 6
63079: ARRAY
63080: PPUSH
63081: CALL 58098 0 2
63085: ST_TO_ADDR
// end ;
63086: GO 62993
63088: POP
63089: POP
// end ;
63090: LD_VAR 0 5
63094: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63095: LD_INT 0
63097: PPUSH
// if not vehicles or not parkingPoint then
63098: LD_VAR 0 1
63102: NOT
63103: IFTRUE 63112
63105: PUSH
63106: LD_VAR 0 2
63110: NOT
63111: OR
63112: IFFALSE 63116
// exit ;
63114: GO 63214
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63116: LD_ADDR_VAR 0 1
63120: PUSH
63121: LD_VAR 0 1
63125: PPUSH
63126: LD_INT 50
63128: PUSH
63129: EMPTY
63130: LIST
63131: PUSH
63132: LD_INT 3
63134: PUSH
63135: LD_INT 92
63137: PUSH
63138: LD_VAR 0 2
63142: PUSH
63143: LD_INT 1
63145: ARRAY
63146: PUSH
63147: LD_VAR 0 2
63151: PUSH
63152: LD_INT 2
63154: ARRAY
63155: PUSH
63156: LD_INT 8
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PPUSH
63173: CALL_OW 72
63177: ST_TO_ADDR
// if not vehicles then
63178: LD_VAR 0 1
63182: NOT
63183: IFFALSE 63187
// exit ;
63185: GO 63214
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63187: LD_VAR 0 1
63191: PPUSH
63192: LD_VAR 0 2
63196: PUSH
63197: LD_INT 1
63199: ARRAY
63200: PPUSH
63201: LD_VAR 0 2
63205: PUSH
63206: LD_INT 2
63208: ARRAY
63209: PPUSH
63210: CALL_OW 111
// end ;
63214: LD_VAR 0 3
63218: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63219: LD_INT 0
63221: PPUSH
63222: PPUSH
63223: PPUSH
// if not side or not area then
63224: LD_VAR 0 1
63228: NOT
63229: IFTRUE 63238
63231: PUSH
63232: LD_VAR 0 2
63236: NOT
63237: OR
63238: IFFALSE 63242
// exit ;
63240: GO 63361
// tmp := AreaToList ( area , 0 ) ;
63242: LD_ADDR_VAR 0 5
63246: PUSH
63247: LD_VAR 0 2
63251: PPUSH
63252: LD_INT 0
63254: PPUSH
63255: CALL_OW 517
63259: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63260: LD_ADDR_VAR 0 4
63264: PUSH
63265: DOUBLE
63266: LD_INT 1
63268: DEC
63269: ST_TO_ADDR
63270: LD_VAR 0 5
63274: PUSH
63275: LD_INT 1
63277: ARRAY
63278: PUSH
63279: FOR_TO
63280: IFFALSE 63359
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63282: LD_VAR 0 5
63286: PUSH
63287: LD_INT 1
63289: ARRAY
63290: PUSH
63291: LD_VAR 0 4
63295: ARRAY
63296: PPUSH
63297: LD_VAR 0 5
63301: PUSH
63302: LD_INT 2
63304: ARRAY
63305: PUSH
63306: LD_VAR 0 4
63310: ARRAY
63311: PPUSH
63312: CALL_OW 351
63316: IFFALSE 63357
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63318: LD_VAR 0 5
63322: PUSH
63323: LD_INT 1
63325: ARRAY
63326: PUSH
63327: LD_VAR 0 4
63331: ARRAY
63332: PPUSH
63333: LD_VAR 0 5
63337: PUSH
63338: LD_INT 2
63340: ARRAY
63341: PUSH
63342: LD_VAR 0 4
63346: ARRAY
63347: PPUSH
63348: LD_VAR 0 1
63352: PPUSH
63353: CALL_OW 244
// end ;
63357: GO 63279
63359: POP
63360: POP
// end ;
63361: LD_VAR 0 3
63365: RET
// export function UniqueArray ( array ) ; var i ; begin
63366: LD_INT 0
63368: PPUSH
63369: PPUSH
// result := [ ] ;
63370: LD_ADDR_VAR 0 2
63374: PUSH
63375: EMPTY
63376: ST_TO_ADDR
// if not array then
63377: LD_VAR 0 1
63381: NOT
63382: IFFALSE 63386
// exit ;
63384: GO 63447
// for i := 1 to array do
63386: LD_ADDR_VAR 0 3
63390: PUSH
63391: DOUBLE
63392: LD_INT 1
63394: DEC
63395: ST_TO_ADDR
63396: LD_VAR 0 1
63400: PUSH
63401: FOR_TO
63402: IFFALSE 63445
// if not array [ i ] in result then
63404: LD_VAR 0 1
63408: PUSH
63409: LD_VAR 0 3
63413: ARRAY
63414: PUSH
63415: LD_VAR 0 2
63419: IN
63420: NOT
63421: IFFALSE 63443
// result := Join ( result , i ) ;
63423: LD_ADDR_VAR 0 2
63427: PUSH
63428: LD_VAR 0 2
63432: PPUSH
63433: LD_VAR 0 3
63437: PPUSH
63438: CALL 58098 0 2
63442: ST_TO_ADDR
63443: GO 63401
63445: POP
63446: POP
// end ; end_of_file
63447: LD_VAR 0 2
63451: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63452: PPOPN 6
63454: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63455: LD_INT 0
63457: PPUSH
// begin if not units then
63458: LD_VAR 0 1
63462: NOT
63463: IFFALSE 63467
// exit ;
63465: GO 63501
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63467: LD_VAR 0 1
63471: PPUSH
63472: LD_VAR 0 2
63476: PPUSH
63477: LD_VAR 0 3
63481: PPUSH
63482: LD_VAR 0 4
63486: PPUSH
63487: LD_VAR 0 5
63491: PPUSH
63492: LD_VAR 0 6
63496: PPUSH
63497: CALL 19871 0 6
// end ;
63501: PPOPN 7
63503: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63504: LD_EXP 1
63508: PUSH
63509: LD_INT 4
63511: EQUAL
63512: IFFALSE 63548
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63514: LD_STRING setGameDifficulty(
63516: PUSH
63517: LD_OWVAR 67
63521: STR
63522: PUSH
63523: LD_STRING )
63525: STR
63526: PPUSH
63527: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63531: LD_STRING displayDifficulty(
63533: PUSH
63534: LD_OWVAR 67
63538: STR
63539: PUSH
63540: LD_STRING )
63542: STR
63543: PPUSH
63544: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63548: CALL 63577 0 0
// end ; end_of_file
63552: PPOPN 1
63554: END
// every 0 0$1 do
63555: GO 63557
63557: DISABLE
// begin enable ;
63558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63559: LD_STRING updateTimer(
63561: PUSH
63562: LD_OWVAR 1
63566: STR
63567: PUSH
63568: LD_STRING );
63570: STR
63571: PPUSH
63572: CALL_OW 559
// end ;
63576: END
// export function SOS_MapStart ( ) ; begin
63577: LD_INT 0
63579: PPUSH
// UpdateFactoryWaypoints ( ) ;
63580: CALL 64518 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63584: CALL 64770 0 0
// ParseMultiDataToLua ( ) ;
63588: CALL 64917 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63592: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63594: PPUSH
63595: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63599: LD_STRING setSpecLogoNumber(
63601: PUSH
63602: LD_INT 2
63604: STR
63605: PUSH
63606: LD_STRING ,
63608: STR
63609: PUSH
63610: LD_INT 1
63612: STR
63613: PUSH
63614: LD_STRING )
63616: STR
63617: PPUSH
63618: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63622: LD_STRING setSpecLogoNumber(
63624: PUSH
63625: LD_INT 3
63627: STR
63628: PUSH
63629: LD_STRING ,
63631: STR
63632: PUSH
63633: LD_INT 2
63635: STR
63636: PUSH
63637: LD_STRING )
63639: STR
63640: PPUSH
63641: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63645: LD_STRING setSpecLogoNumber(
63647: PUSH
63648: LD_INT 4
63650: STR
63651: PUSH
63652: LD_STRING ,
63654: STR
63655: PUSH
63656: LD_INT 3
63658: STR
63659: PUSH
63660: LD_STRING )
63662: STR
63663: PPUSH
63664: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63668: LD_STRING setSpecLogoNumber(
63670: PUSH
63671: LD_INT 5
63673: STR
63674: PUSH
63675: LD_STRING ,
63677: STR
63678: PUSH
63679: LD_INT 4
63681: STR
63682: PUSH
63683: LD_STRING )
63685: STR
63686: PPUSH
63687: CALL_OW 559
// end ;
63691: LD_VAR 0 1
63695: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63696: LD_INT 0
63698: PPUSH
63699: PPUSH
63700: PPUSH
63701: PPUSH
63702: PPUSH
63703: PPUSH
63704: PPUSH
63705: PPUSH
63706: PPUSH
// for i := 1 to 8 do
63707: LD_ADDR_VAR 0 2
63711: PUSH
63712: DOUBLE
63713: LD_INT 1
63715: DEC
63716: ST_TO_ADDR
63717: LD_INT 8
63719: PUSH
63720: FOR_TO
63721: IFFALSE 64106
// begin if mpSidePositions [ i ] then
63723: LD_EXP 5
63727: PUSH
63728: LD_VAR 0 2
63732: ARRAY
63733: IFFALSE 64104
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63735: LD_ADDR_VAR 0 7
63739: PUSH
63740: LD_INT 22
63742: PUSH
63743: LD_VAR 0 2
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 21
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PPUSH
63766: CALL_OW 69
63770: PPUSH
63771: CALL 22122 0 1
63775: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63776: LD_ADDR_VAR 0 9
63780: PUSH
63781: LD_INT 22
63783: PUSH
63784: LD_VAR 0 2
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: LD_INT 30
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 30
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: LIST
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PPUSH
63825: CALL_OW 69
63829: ST_TO_ADDR
// crates := 0 ;
63830: LD_ADDR_VAR 0 4
63834: PUSH
63835: LD_INT 0
63837: ST_TO_ADDR
// oil := 0 ;
63838: LD_ADDR_VAR 0 5
63842: PUSH
63843: LD_INT 0
63845: ST_TO_ADDR
// sib := 0 ;
63846: LD_ADDR_VAR 0 6
63850: PUSH
63851: LD_INT 0
63853: ST_TO_ADDR
// if bases then
63854: LD_VAR 0 9
63858: IFFALSE 63964
// begin for j in bases do
63860: LD_ADDR_VAR 0 3
63864: PUSH
63865: LD_VAR 0 9
63869: PUSH
63870: FOR_IN
63871: IFFALSE 63962
// begin base := GetBase ( j ) ;
63873: LD_ADDR_VAR 0 8
63877: PUSH
63878: LD_VAR 0 3
63882: PPUSH
63883: CALL_OW 274
63887: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63888: LD_ADDR_VAR 0 4
63892: PUSH
63893: LD_VAR 0 4
63897: PUSH
63898: LD_VAR 0 8
63902: PPUSH
63903: LD_INT 1
63905: PPUSH
63906: CALL_OW 275
63910: PLUS
63911: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63912: LD_ADDR_VAR 0 5
63916: PUSH
63917: LD_VAR 0 5
63921: PUSH
63922: LD_VAR 0 8
63926: PPUSH
63927: LD_INT 2
63929: PPUSH
63930: CALL_OW 275
63934: PLUS
63935: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63936: LD_ADDR_VAR 0 6
63940: PUSH
63941: LD_VAR 0 6
63945: PUSH
63946: LD_VAR 0 8
63950: PPUSH
63951: LD_INT 3
63953: PPUSH
63954: CALL_OW 275
63958: PLUS
63959: ST_TO_ADDR
// end ;
63960: GO 63870
63962: POP
63963: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63964: LD_STRING setSpecText(
63966: PUSH
63967: LD_VAR 0 2
63971: STR
63972: PUSH
63973: LD_STRING ,
63975: STR
63976: PUSH
63977: LD_INT 2
63979: STR
63980: PUSH
63981: LD_STRING ,
63983: STR
63984: PUSH
63985: LD_VAR 0 4
63989: STR
63990: PUSH
63991: LD_STRING )
63993: STR
63994: PPUSH
63995: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63999: LD_STRING setSpecText(
64001: PUSH
64002: LD_VAR 0 2
64006: STR
64007: PUSH
64008: LD_STRING ,
64010: STR
64011: PUSH
64012: LD_INT 3
64014: STR
64015: PUSH
64016: LD_STRING ,
64018: STR
64019: PUSH
64020: LD_VAR 0 5
64024: STR
64025: PUSH
64026: LD_STRING )
64028: STR
64029: PPUSH
64030: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64034: LD_STRING setSpecText(
64036: PUSH
64037: LD_VAR 0 2
64041: STR
64042: PUSH
64043: LD_STRING ,
64045: STR
64046: PUSH
64047: LD_INT 4
64049: STR
64050: PUSH
64051: LD_STRING ,
64053: STR
64054: PUSH
64055: LD_VAR 0 6
64059: STR
64060: PUSH
64061: LD_STRING )
64063: STR
64064: PPUSH
64065: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64069: LD_STRING setSpecText(
64071: PUSH
64072: LD_VAR 0 2
64076: STR
64077: PUSH
64078: LD_STRING ,
64080: STR
64081: PUSH
64082: LD_INT 5
64084: STR
64085: PUSH
64086: LD_STRING ,
64088: STR
64089: PUSH
64090: LD_VAR 0 7
64094: STR
64095: PUSH
64096: LD_STRING )
64098: STR
64099: PPUSH
64100: CALL_OW 559
// end ; end ;
64104: GO 63720
64106: POP
64107: POP
// end ;
64108: LD_VAR 0 1
64112: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64113: LD_INT 2
64115: PUSH
64116: LD_INT 30
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 30
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: PPUSH
64141: CALL_OW 69
64145: IFFALSE 64155
64147: GO 64149
64149: DISABLE
// begin enable ;
64150: ENABLE
// UpdateSpectatorBar ;
64151: CALL 63696 0 0
// end ;
64155: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64156: LD_INT 0
64158: PPUSH
// end ;
64159: LD_VAR 0 12
64163: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64164: LD_INT 0
64166: PPUSH
64167: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64168: LD_VAR 0 1
64172: NOT
64173: IFTRUE 64192
64175: PUSH
64176: LD_VAR 0 2
64180: PPUSH
64181: LD_VAR 0 3
64185: PPUSH
64186: CALL_OW 488
64190: NOT
64191: OR
64192: IFTRUE 64227
64194: PUSH
64195: LD_VAR 0 1
64199: PPUSH
64200: CALL_OW 266
64204: PUSH
64205: LD_INT 3
64207: NONEQUAL
64208: IFFALSE 64226
64210: PUSH
64211: LD_VAR 0 1
64215: PPUSH
64216: CALL_OW 247
64220: PUSH
64221: LD_INT 1
64223: EQUAL
64224: NOT
64225: AND
64226: OR
64227: IFFALSE 64231
// exit ;
64229: GO 64513
// if GetType ( factory ) = unit_human then
64231: LD_VAR 0 1
64235: PPUSH
64236: CALL_OW 247
64240: PUSH
64241: LD_INT 1
64243: EQUAL
64244: IFFALSE 64261
// factory := IsInUnit ( factory ) ;
64246: LD_ADDR_VAR 0 1
64250: PUSH
64251: LD_VAR 0 1
64255: PPUSH
64256: CALL_OW 310
64260: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64261: LD_VAR 0 1
64265: PPUSH
64266: CALL_OW 266
64270: PUSH
64271: LD_INT 3
64273: NONEQUAL
64274: IFFALSE 64278
// exit ;
64276: GO 64513
// for i := 1 to Count ( factoryWaypoints ) do
64278: LD_ADDR_VAR 0 5
64282: PUSH
64283: DOUBLE
64284: LD_INT 1
64286: DEC
64287: ST_TO_ADDR
64288: LD_EXP 59
64292: PPUSH
64293: CALL 22122 0 1
64297: PUSH
64298: FOR_TO
64299: IFFALSE 64461
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64301: LD_VAR 0 2
64305: PPUSH
64306: LD_VAR 0 3
64310: PPUSH
64311: CALL_OW 428
64315: PUSH
64316: LD_EXP 59
64320: PUSH
64321: LD_VAR 0 5
64325: ARRAY
64326: PUSH
64327: LD_INT 2
64329: ARRAY
64330: EQUAL
64331: IFFALSE 64363
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64333: LD_ADDR_EXP 59
64337: PUSH
64338: LD_EXP 59
64342: PPUSH
64343: LD_VAR 0 5
64347: PPUSH
64348: CALL_OW 3
64352: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64353: CALL 64518 0 0
// exit ;
64357: POP
64358: POP
64359: GO 64513
// end else
64361: GO 64459
// if factory = factoryWaypoints [ i ] [ 2 ] then
64363: LD_VAR 0 1
64367: PUSH
64368: LD_EXP 59
64372: PUSH
64373: LD_VAR 0 5
64377: ARRAY
64378: PUSH
64379: LD_INT 2
64381: ARRAY
64382: EQUAL
64383: IFFALSE 64459
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64385: LD_ADDR_EXP 59
64389: PUSH
64390: LD_EXP 59
64394: PPUSH
64395: LD_VAR 0 5
64399: PPUSH
64400: CALL_OW 3
64404: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64405: LD_ADDR_EXP 59
64409: PUSH
64410: LD_EXP 59
64414: PPUSH
64415: LD_VAR 0 1
64419: PPUSH
64420: CALL_OW 255
64424: PUSH
64425: LD_VAR 0 1
64429: PUSH
64430: LD_VAR 0 2
64434: PUSH
64435: LD_VAR 0 3
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: PPUSH
64446: CALL 58098 0 2
64450: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64451: CALL 64518 0 0
// exit ;
64455: POP
64456: POP
64457: GO 64513
// end ; end ;
64459: GO 64298
64461: POP
64462: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64463: LD_ADDR_EXP 59
64467: PUSH
64468: LD_EXP 59
64472: PPUSH
64473: LD_VAR 0 1
64477: PPUSH
64478: CALL_OW 255
64482: PUSH
64483: LD_VAR 0 1
64487: PUSH
64488: LD_VAR 0 2
64492: PUSH
64493: LD_VAR 0 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: PPUSH
64504: CALL 58098 0 2
64508: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64509: CALL 64518 0 0
// end ;
64513: LD_VAR 0 4
64517: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64518: LD_INT 0
64520: PPUSH
64521: PPUSH
64522: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64523: LD_STRING resetFactoryWaypoint();
64525: PPUSH
64526: CALL_OW 559
// if factoryWaypoints then
64530: LD_EXP 59
64534: IFFALSE 64655
// begin list := factoryWaypoints ;
64536: LD_ADDR_VAR 0 3
64540: PUSH
64541: LD_EXP 59
64545: ST_TO_ADDR
// for i := 1 to list do
64546: LD_ADDR_VAR 0 2
64550: PUSH
64551: DOUBLE
64552: LD_INT 1
64554: DEC
64555: ST_TO_ADDR
64556: LD_VAR 0 3
64560: PUSH
64561: FOR_TO
64562: IFFALSE 64653
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64564: LD_STRING setFactoryWaypointXY(
64566: PUSH
64567: LD_VAR 0 3
64571: PUSH
64572: LD_VAR 0 2
64576: ARRAY
64577: PUSH
64578: LD_INT 1
64580: ARRAY
64581: STR
64582: PUSH
64583: LD_STRING ,
64585: STR
64586: PUSH
64587: LD_VAR 0 3
64591: PUSH
64592: LD_VAR 0 2
64596: ARRAY
64597: PUSH
64598: LD_INT 2
64600: ARRAY
64601: STR
64602: PUSH
64603: LD_STRING ,
64605: STR
64606: PUSH
64607: LD_VAR 0 3
64611: PUSH
64612: LD_VAR 0 2
64616: ARRAY
64617: PUSH
64618: LD_INT 3
64620: ARRAY
64621: STR
64622: PUSH
64623: LD_STRING ,
64625: STR
64626: PUSH
64627: LD_VAR 0 3
64631: PUSH
64632: LD_VAR 0 2
64636: ARRAY
64637: PUSH
64638: LD_INT 4
64640: ARRAY
64641: STR
64642: PUSH
64643: LD_STRING )
64645: STR
64646: PPUSH
64647: CALL_OW 559
64651: GO 64561
64653: POP
64654: POP
// end ; end ;
64655: LD_VAR 0 1
64659: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64660: LD_INT 0
64662: PPUSH
// if HexInfo ( x , y ) = warehouse then
64663: LD_VAR 0 2
64667: PPUSH
64668: LD_VAR 0 3
64672: PPUSH
64673: CALL_OW 428
64677: PUSH
64678: LD_VAR 0 1
64682: EQUAL
64683: IFFALSE 64710
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64685: LD_ADDR_EXP 61
64689: PUSH
64690: LD_EXP 61
64694: PPUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: LD_INT 0
64702: PPUSH
64703: CALL_OW 1
64707: ST_TO_ADDR
64708: GO 64761
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64710: LD_ADDR_EXP 61
64714: PUSH
64715: LD_EXP 61
64719: PPUSH
64720: LD_VAR 0 1
64724: PPUSH
64725: LD_VAR 0 1
64729: PPUSH
64730: CALL_OW 255
64734: PUSH
64735: LD_VAR 0 1
64739: PUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_VAR 0 3
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: PPUSH
64756: CALL_OW 1
64760: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64761: CALL 64770 0 0
// end ;
64765: LD_VAR 0 4
64769: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64770: LD_INT 0
64772: PPUSH
64773: PPUSH
64774: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64775: LD_STRING resetWarehouseGatheringPoints();
64777: PPUSH
64778: CALL_OW 559
// if warehouseGatheringPoints then
64782: LD_EXP 61
64786: IFFALSE 64912
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64788: LD_ADDR_VAR 0 3
64792: PUSH
64793: LD_EXP 61
64797: PPUSH
64798: CALL 62032 0 1
64802: ST_TO_ADDR
// for i := 1 to list do
64803: LD_ADDR_VAR 0 2
64807: PUSH
64808: DOUBLE
64809: LD_INT 1
64811: DEC
64812: ST_TO_ADDR
64813: LD_VAR 0 3
64817: PUSH
64818: FOR_TO
64819: IFFALSE 64910
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64821: LD_STRING setWarehouseGatheringPointXY(
64823: PUSH
64824: LD_VAR 0 3
64828: PUSH
64829: LD_VAR 0 2
64833: ARRAY
64834: PUSH
64835: LD_INT 1
64837: ARRAY
64838: STR
64839: PUSH
64840: LD_STRING ,
64842: STR
64843: PUSH
64844: LD_VAR 0 3
64848: PUSH
64849: LD_VAR 0 2
64853: ARRAY
64854: PUSH
64855: LD_INT 2
64857: ARRAY
64858: STR
64859: PUSH
64860: LD_STRING ,
64862: STR
64863: PUSH
64864: LD_VAR 0 3
64868: PUSH
64869: LD_VAR 0 2
64873: ARRAY
64874: PUSH
64875: LD_INT 3
64877: ARRAY
64878: STR
64879: PUSH
64880: LD_STRING ,
64882: STR
64883: PUSH
64884: LD_VAR 0 3
64888: PUSH
64889: LD_VAR 0 2
64893: ARRAY
64894: PUSH
64895: LD_INT 4
64897: ARRAY
64898: STR
64899: PUSH
64900: LD_STRING )
64902: STR
64903: PPUSH
64904: CALL_OW 559
64908: GO 64818
64910: POP
64911: POP
// end ; end ;
64912: LD_VAR 0 1
64916: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64917: LD_INT 0
64919: PPUSH
64920: PPUSH
// if not mpSidePositions then
64921: LD_EXP 5
64925: NOT
64926: IFFALSE 64930
// exit ;
64928: GO 65001
// result :=  ;
64930: LD_ADDR_VAR 0 1
64934: PUSH
64935: LD_STRING 
64937: ST_TO_ADDR
// for i := 1 to 8 do
64938: LD_ADDR_VAR 0 2
64942: PUSH
64943: DOUBLE
64944: LD_INT 1
64946: DEC
64947: ST_TO_ADDR
64948: LD_INT 8
64950: PUSH
64951: FOR_TO
64952: IFFALSE 64982
// begin result := result & mpSidePositions [ i ] & ; ;
64954: LD_ADDR_VAR 0 1
64958: PUSH
64959: LD_VAR 0 1
64963: PUSH
64964: LD_EXP 5
64968: PUSH
64969: LD_VAR 0 2
64973: ARRAY
64974: STR
64975: PUSH
64976: LD_STRING ;
64978: STR
64979: ST_TO_ADDR
// end ;
64980: GO 64951
64982: POP
64983: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64984: LD_STRING setMultiplayerRealPosition("
64986: PUSH
64987: LD_VAR 0 1
64991: STR
64992: PUSH
64993: LD_STRING ");
64995: STR
64996: PPUSH
64997: CALL_OW 559
// end ; end_of_file
65001: LD_VAR 0 1
65005: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
65006: LD_EXP 37
65010: IFFALSE 65053
65012: GO 65014
65014: DISABLE
65015: LD_INT 0
65017: PPUSH
// begin for i := 1 to 8 do
65018: LD_ADDR_VAR 0 1
65022: PUSH
65023: DOUBLE
65024: LD_INT 1
65026: DEC
65027: ST_TO_ADDR
65028: LD_INT 8
65030: PUSH
65031: FOR_TO
65032: IFFALSE 65051
// SetRestrict ( b_depot , i , state_disabled ) ;
65034: LD_INT 0
65036: PPUSH
65037: LD_VAR 0 1
65041: PPUSH
65042: LD_INT 0
65044: PPUSH
65045: CALL_OW 324
65049: GO 65031
65051: POP
65052: POP
// end ;
65053: PPOPN 1
65055: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
65056: LD_EXP 37
65060: IFFALSE 65068
65062: PUSH
65063: CALL 65278 0 0
65067: AND
65068: IFFALSE 65076
65070: PUSH
65071: LD_OWVAR 4
65075: AND
65076: IFFALSE 65275
65078: GO 65080
65080: DISABLE
65081: LD_INT 0
65083: PPUSH
65084: PPUSH
// begin canWin := false ;
65085: LD_ADDR_VAR 0 2
65089: PUSH
65090: LD_INT 0
65092: ST_TO_ADDR
// if not HasPower ( your_side ) then
65093: LD_OWVAR 2
65097: PPUSH
65098: CALL 65320 0 1
65102: NOT
65103: IFFALSE 65114
// begin Multiplayer_Loose_Message ;
65105: CALL_OW 521
// enable ( mpLose ) ;
65109: LD_INT 102
65111: ENABLE_MARKED
// end else
65112: GO 65275
// begin canWin := true ;
65114: LD_ADDR_VAR 0 2
65118: PUSH
65119: LD_INT 1
65121: ST_TO_ADDR
// for i := 1 to 8 do
65122: LD_ADDR_VAR 0 1
65126: PUSH
65127: DOUBLE
65128: LD_INT 1
65130: DEC
65131: ST_TO_ADDR
65132: LD_INT 8
65134: PUSH
65135: FOR_TO
65136: IFFALSE 65261
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65138: LD_EXP 5
65142: PUSH
65143: LD_VAR 0 1
65147: ARRAY
65148: IFFALSE 65161
65150: PUSH
65151: LD_VAR 0 1
65155: PPUSH
65156: CALL_OW 108
65160: AND
65161: IFFALSE 65175
65163: PUSH
65164: LD_VAR 0 1
65168: PUSH
65169: LD_OWVAR 2
65173: NONEQUAL
65174: AND
65175: IFFALSE 65259
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65177: LD_EXP 6
65181: PUSH
65182: LD_VAR 0 1
65186: ARRAY
65187: NOT
65188: IFTRUE 65236
65190: PUSH
65191: LD_EXP 6
65195: PUSH
65196: LD_VAR 0 1
65200: ARRAY
65201: PUSH
65202: LD_EXP 6
65206: PUSH
65207: LD_OWVAR 2
65211: ARRAY
65212: NONEQUAL
65213: IFFALSE 65235
65215: PUSH
65216: LD_OWVAR 2
65220: PPUSH
65221: LD_VAR 0 1
65225: PPUSH
65226: CALL_OW 81
65230: PUSH
65231: LD_INT 1
65233: NONEQUAL
65234: AND
65235: OR
65236: IFFALSE 65259
// if HasPower ( i ) then
65238: LD_VAR 0 1
65242: PPUSH
65243: CALL 65320 0 1
65247: IFFALSE 65259
// begin canWin := false ;
65249: LD_ADDR_VAR 0 2
65253: PUSH
65254: LD_INT 0
65256: ST_TO_ADDR
// break ;
65257: GO 65261
// end ;
65259: GO 65135
65261: POP
65262: POP
// if canWin then
65263: LD_VAR 0 2
65267: IFFALSE 65274
// enable ( mpWin ) else
65269: LD_INT 101
65271: ENABLE_MARKED
65272: GO 65275
// enable ;
65274: ENABLE
// end ; end ;
65275: PPOPN 2
65277: END
// function CanWinLoose ; begin
65278: LD_INT 0
65280: PPUSH
// result := true ;
65281: LD_ADDR_VAR 0 1
65285: PUSH
65286: LD_INT 1
65288: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65289: CALL_OW 531
65293: IFFALSE 65305
65295: PUSH
65296: CALL_OW 519
65300: PUSH
65301: LD_INT 1
65303: GREATER
65304: AND
65305: IFFALSE 65315
// result := false ;
65307: LD_ADDR_VAR 0 1
65311: PUSH
65312: LD_INT 0
65314: ST_TO_ADDR
// end ;
65315: LD_VAR 0 1
65319: RET
// function HasPower ( i ) ; begin
65320: LD_INT 0
65322: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65323: LD_INT 22
65325: PUSH
65326: LD_VAR 0 1
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 2
65337: PUSH
65338: LD_INT 30
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 30
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: LIST
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PPUSH
65367: CALL_OW 69
65371: NOT
65372: IFFALSE 65376
// exit ;
65374: GO 65441
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65376: LD_ADDR_VAR 0 2
65380: PUSH
65381: LD_INT 22
65383: PUSH
65384: LD_VAR 0 1
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: LD_INT 21
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 33
65408: PUSH
65409: LD_INT 3
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 33
65418: PUSH
65419: LD_INT 5
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PPUSH
65436: CALL_OW 69
65440: ST_TO_ADDR
// end ;
65441: LD_VAR 0 2
65445: RET
