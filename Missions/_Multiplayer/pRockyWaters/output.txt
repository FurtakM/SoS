// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3031 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3415 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 260 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 260
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 62039 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 62039 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 62039 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 62039 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 62039 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 62039 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 62039 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 62039 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 21354 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 61872 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 61872 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 61872 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 61872 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 61872 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 61872 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 61872 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 61872 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 61872 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 61872 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 61872 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 61872 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 61872 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 61872 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 61872 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 61872 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 62039 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 62039 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 62039 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 62039 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 62039 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 62039 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 62039 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 62039 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 62039 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 62039 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 62039 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 62039 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 62039 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 62039 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 62039 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 62039 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 62039 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 62039 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 62039 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 62039 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 62039 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 62039 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 62039 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 62039 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2885
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 58693 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// if GetResourceArea ( center3 , mat_cans ) < 15 then
2745: LD_INT 74
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 287
2755: PUSH
2756: LD_INT 15
2758: LESS
2759: IFFALSE 2791
// begin CreateCratesArea ( x , center3 , true ) ;
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_INT 74
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: CALL_OW 55
// CreateCratesArea ( x , center3 , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_INT 74
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: CALL_OW 55
// end ; for i in areas do
2791: LD_ADDR_VAR 0 1
2795: PUSH
2796: LD_VAR 0 4
2800: PUSH
2801: FOR_IN
2802: IFFALSE 2841
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 287
2816: PUSH
2817: LD_INT 20
2819: LESS
2820: IFFALSE 2839
// begin CreateCratesArea ( x , i , true ) ;
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_VAR 0 1
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 55
// end ; end ;
2839: GO 2801
2841: POP
2842: POP
// time := time + delayTime ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_VAR 0 5
2852: PUSH
2853: LD_VAR 0 7
2857: PLUS
2858: ST_TO_ADDR
// if time > maxTime then
2859: LD_VAR 0 5
2863: PUSH
2864: LD_VAR 0 8
2868: GREATER
2869: IFFALSE 2881
// time := normalTime ;
2871: LD_ADDR_VAR 0 5
2875: PUSH
2876: LD_VAR 0 6
2880: ST_TO_ADDR
// until false ;
2881: LD_INT 0
2883: IFFALSE 2703
// end ; end_of_file
2885: PPOPN 8
2887: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2888: LD_VAR 0 1
2892: PPUSH
2893: CALL 12756 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2897: LD_VAR 0 1
2901: PPUSH
2902: CALL 8317 0 1
// end ;
2906: PPOPN 1
2908: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 12773 0 1
// end ;
2918: PPOPN 1
2920: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL 9024 0 1
2930: PPOPN 1
2932: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2933: LD_VAR 0 1
2937: PPUSH
2938: LD_VAR 0 2
2942: PPUSH
2943: CALL 12814 0 2
2947: PPOPN 2
2949: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2950: LD_VAR 0 1
2954: PPUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: CALL 9077 0 3
2969: PPOPN 3
2971: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2972: LD_VAR 0 1
2976: PPUSH
2977: LD_VAR 0 2
2981: PPUSH
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_VAR 0 4
2991: PPUSH
2992: LD_VAR 0 5
2996: PPUSH
2997: CALL 9716 0 5
3001: PPOPN 5
3003: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3004: LD_VAR 0 1
3008: PPUSH
3009: LD_VAR 0 2
3013: PPUSH
3014: LD_VAR 0 3
3018: PPUSH
3019: LD_VAR 0 4
3023: PPUSH
3024: CALL 9819 0 4
3028: PPOPN 4
3030: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3031: LD_INT 0
3033: PPUSH
3034: PPUSH
// disable ( mpActive ) ;
3035: LD_INT 100
3037: DISABLE_MARKED
// disable ( mpWin ) ;
3038: LD_INT 101
3040: DISABLE_MARKED
// disable ( mpLose ) ;
3041: LD_INT 102
3043: DISABLE_MARKED
// mpGameType := 0 ;
3044: LD_ADDR_EXP 1
3048: PUSH
3049: LD_INT 0
3051: ST_TO_ADDR
// mpGameSettings := [ ] ;
3052: LD_ADDR_EXP 4
3056: PUSH
3057: EMPTY
3058: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3059: LD_ADDR_EXP 2
3063: PUSH
3064: EMPTY
3065: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3066: LD_ADDR_EXP 3
3070: PUSH
3071: EMPTY
3072: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3073: LD_ADDR_EXP 27
3077: PUSH
3078: LD_INT 2
3080: PUSH
3081: LD_INT 2
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3088: LD_ADDR_EXP 10
3092: PUSH
3093: EMPTY
3094: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3095: LD_ADDR_EXP 11
3099: PUSH
3100: EMPTY
3101: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3102: LD_ADDR_EXP 39
3106: PUSH
3107: EMPTY
3108: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3109: LD_ADDR_EXP 40
3113: PUSH
3114: EMPTY
3115: ST_TO_ADDR
// mpDepots := [ ] ;
3116: LD_ADDR_EXP 12
3120: PUSH
3121: EMPTY
3122: ST_TO_ADDR
// mpBuildings := [ ] ;
3123: LD_ADDR_EXP 15
3127: PUSH
3128: EMPTY
3129: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3130: LD_ADDR_EXP 16
3134: PUSH
3135: EMPTY
3136: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3137: LD_ADDR_EXP 17
3141: PUSH
3142: EMPTY
3143: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3144: LD_ADDR_EXP 18
3148: PUSH
3149: EMPTY
3150: ST_TO_ADDR
// mpStartingResources := [ ] ;
3151: LD_ADDR_EXP 13
3155: PUSH
3156: EMPTY
3157: ST_TO_ADDR
// mpStartPos := [ ] ;
3158: LD_ADDR_EXP 19
3162: PUSH
3163: EMPTY
3164: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3165: LD_ADDR_EXP 20
3169: PUSH
3170: LD_INT 1
3172: NEG
3173: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3174: LD_ADDR_EXP 21
3178: PUSH
3179: EMPTY
3180: ST_TO_ADDR
// mpApemans := [ ] ;
3181: LD_ADDR_EXP 28
3185: PUSH
3186: EMPTY
3187: ST_TO_ADDR
// mpApemansArea := [ ] ;
3188: LD_ADDR_EXP 29
3192: PUSH
3193: EMPTY
3194: ST_TO_ADDR
// mpRespawn := [ ] ;
3195: LD_ADDR_EXP 31
3199: PUSH
3200: EMPTY
3201: ST_TO_ADDR
// mpKingArea := 0 ;
3202: LD_ADDR_EXP 32
3206: PUSH
3207: LD_INT 0
3209: ST_TO_ADDR
// mpPoints := [ ] ;
3210: LD_ADDR_EXP 33
3214: PUSH
3215: EMPTY
3216: ST_TO_ADDR
// mpVehicles := 0 ;
3217: LD_ADDR_EXP 34
3221: PUSH
3222: LD_INT 0
3224: ST_TO_ADDR
// mpShipments := 0 ;
3225: LD_ADDR_EXP 25
3229: PUSH
3230: LD_INT 0
3232: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3233: LD_ADDR_EXP 38
3237: PUSH
3238: EMPTY
3239: PUSH
3240: EMPTY
3241: PUSH
3242: EMPTY
3243: PUSH
3244: EMPTY
3245: PUSH
3246: EMPTY
3247: PUSH
3248: EMPTY
3249: PUSH
3250: EMPTY
3251: PUSH
3252: EMPTY
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3264: LD_ADDR_EXP 30
3268: PUSH
3269: EMPTY
3270: PUSH
3271: EMPTY
3272: PUSH
3273: EMPTY
3274: PUSH
3275: EMPTY
3276: PUSH
3277: EMPTY
3278: PUSH
3279: EMPTY
3280: PUSH
3281: EMPTY
3282: PUSH
3283: EMPTY
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: ST_TO_ADDR
// mpEmissions := 0 ;
3295: LD_ADDR_EXP 35
3299: PUSH
3300: LD_INT 0
3302: ST_TO_ADDR
// mpTeleports := 0 ;
3303: LD_ADDR_EXP 41
3307: PUSH
3308: LD_INT 0
3310: ST_TO_ADDR
// mpArtifacts := 0 ;
3311: LD_ADDR_EXP 42
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3319: LD_ADDR_EXP 43
3323: PUSH
3324: LD_INT 0
3326: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3327: LD_ADDR_EXP 23
3331: PUSH
3332: LD_INT 3
3334: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3335: LD_ADDR_EXP 22
3339: PUSH
3340: LD_INT 15
3342: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3343: LD_ADDR_EXP 36
3347: PUSH
3348: LD_INT 0
3350: ST_TO_ADDR
// mpGameActive := false ;
3351: LD_ADDR_EXP 37
3355: PUSH
3356: LD_INT 0
3358: ST_TO_ADDR
// mpBlockRespThread := false ;
3359: LD_ADDR_EXP 44
3363: PUSH
3364: LD_INT 0
3366: ST_TO_ADDR
// for i := 1 to 32 do
3367: LD_ADDR_VAR 0 2
3371: PUSH
3372: DOUBLE
3373: LD_INT 1
3375: DEC
3376: ST_TO_ADDR
3377: LD_INT 32
3379: PUSH
3380: FOR_TO
3381: IFFALSE 3408
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3383: LD_ADDR_EXP 4
3387: PUSH
3388: LD_EXP 4
3392: PPUSH
3393: LD_VAR 0 2
3397: PPUSH
3398: LD_INT 0
3400: PPUSH
3401: CALL_OW 1
3405: ST_TO_ADDR
3406: GO 3380
3408: POP
3409: POP
// end ;
3410: LD_VAR 0 1
3414: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3415: LD_INT 0
3417: PPUSH
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
3422: PPUSH
3423: PPUSH
3424: PPUSH
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
3431: LD_ADDR_VAR 0 14
3435: PUSH
3436: LD_INT 1
3438: PUSH
3439: LD_INT 2
3441: PUSH
3442: LD_INT 3
3444: PUSH
3445: LD_INT 5
3447: PUSH
3448: LD_INT 6
3450: PUSH
3451: LD_INT 7
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: ST_TO_ADDR
// for i in gameTypes do
3462: LD_ADDR_VAR 0 2
3466: PUSH
3467: LD_VAR 0 14
3471: PUSH
3472: FOR_IN
3473: IFFALSE 3482
// disable ( i ) ;
3475: LD_VAR 0 2
3479: DISABLE_MARKED
3480: GO 3472
3482: POP
3483: POP
// if Multiplayer then
3484: LD_OWVAR 4
3488: IFFALSE 3672
// begin mpGameType := mp_game_type ;
3490: LD_ADDR_EXP 1
3494: PUSH
3495: LD_OWVAR 6
3499: ST_TO_ADDR
// your_side := mp_player_side ;
3500: LD_ADDR_OWVAR 2
3504: PUSH
3505: LD_OWVAR 7
3509: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3510: LD_ADDR_EXP 5
3514: PUSH
3515: LD_OWVAR 17
3519: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3520: LD_ADDR_EXP 6
3524: PUSH
3525: LD_OWVAR 15
3529: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3530: LD_ADDR_EXP 7
3534: PUSH
3535: LD_OWVAR 16
3539: ST_TO_ADDR
// mpTeams := mp_teams ;
3540: LD_ADDR_EXP 8
3544: PUSH
3545: LD_OWVAR 12
3549: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3550: LD_ADDR_VAR 0 2
3554: PUSH
3555: DOUBLE
3556: LD_INT 1
3558: DEC
3559: ST_TO_ADDR
3560: LD_EXP 2
3564: PPUSH
3565: CALL 21354 0 1
3569: PUSH
3570: FOR_TO
3571: IFFALSE 3647
// begin setting := mpGameSettingsKeys [ i ] ;
3573: LD_ADDR_VAR 0 12
3577: PUSH
3578: LD_EXP 2
3582: PUSH
3583: LD_VAR 0 2
3587: ARRAY
3588: ST_TO_ADDR
// if setting then
3589: LD_VAR 0 12
3593: IFFALSE 3645
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3595: LD_ADDR_EXP 4
3599: PUSH
3600: LD_EXP 4
3604: PPUSH
3605: LD_VAR 0 2
3609: PPUSH
3610: LD_EXP 3
3614: PUSH
3615: LD_VAR 0 2
3619: ARRAY
3620: PUSH
3621: LD_VAR 0 2
3625: PUSH
3626: LD_INT 1
3628: MINUS
3629: PPUSH
3630: CALL_OW 426
3634: PUSH
3635: LD_INT 1
3637: PLUS
3638: ARRAY
3639: PPUSH
3640: CALL_OW 1
3644: ST_TO_ADDR
// end ;
3645: GO 3570
3647: POP
3648: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3649: LD_ADDR_EXP 9
3653: PUSH
3654: LD_EXP 6
3658: PUSH
3659: LD_INT 0
3661: PUSH
3662: EMPTY
3663: LIST
3664: DIFF
3665: PUSH
3666: LD_INT 1
3668: GREATER
3669: ST_TO_ADDR
// end else
3670: GO 3672
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3672: LD_EXP 1
3676: PPUSH
3677: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3681: LD_EXP 16
3685: PPUSH
3686: CALL 21354 0 1
3690: IFFALSE 3721
// begin for i in mpMarkedAreas do
3692: LD_ADDR_VAR 0 2
3696: PUSH
3697: LD_EXP 16
3701: PUSH
3702: FOR_IN
3703: IFFALSE 3719
// SetAreaMapShow ( i , 0 ) ;
3705: LD_VAR 0 2
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 424
3717: GO 3702
3719: POP
3720: POP
// end ; for i := 1 to 8 do
3721: LD_ADDR_VAR 0 2
3725: PUSH
3726: DOUBLE
3727: LD_INT 1
3729: DEC
3730: ST_TO_ADDR
3731: LD_INT 8
3733: PUSH
3734: FOR_TO
3735: IFFALSE 5170
// begin if not mpSidePositions [ i ] then
3737: LD_EXP 5
3741: PUSH
3742: LD_VAR 0 2
3746: ARRAY
3747: NOT
3748: IFFALSE 3752
// continue ;
3750: GO 3734
// side := i ;
3752: LD_ADDR_VAR 0 7
3756: PUSH
3757: LD_VAR 0 2
3761: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3762: LD_ADDR_VAR 0 9
3766: PUSH
3767: LD_EXP 7
3771: PUSH
3772: LD_VAR 0 2
3776: ARRAY
3777: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3778: LD_ADDR_VAR 0 8
3782: PUSH
3783: LD_EXP 5
3787: PUSH
3788: LD_VAR 0 2
3792: ARRAY
3793: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3794: LD_EXP 10
3798: PPUSH
3799: CALL 21354 0 1
3803: IFFALSE 3880
// begin for j in mpOilDeposits [ pos ] do
3805: LD_ADDR_VAR 0 3
3809: PUSH
3810: LD_EXP 10
3814: PUSH
3815: LD_VAR 0 8
3819: ARRAY
3820: PUSH
3821: FOR_IN
3822: IFFALSE 3878
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3824: LD_VAR 0 3
3828: PUSH
3829: LD_INT 1
3831: ARRAY
3832: PPUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_INT 2
3840: ARRAY
3841: PPUSH
3842: LD_INT 2
3844: PPUSH
3845: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3849: LD_VAR 0 3
3853: PUSH
3854: LD_INT 1
3856: ARRAY
3857: PPUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_INT 2
3865: ARRAY
3866: PPUSH
3867: LD_VAR 0 7
3871: PPUSH
3872: CALL_OW 441
// end ;
3876: GO 3821
3878: POP
3879: POP
// end ; if Count ( mpSibDeposits ) then
3880: LD_EXP 11
3884: PPUSH
3885: CALL 21354 0 1
3889: IFFALSE 3966
// begin for j in mpSibDeposits [ pos ] do
3891: LD_ADDR_VAR 0 3
3895: PUSH
3896: LD_EXP 11
3900: PUSH
3901: LD_VAR 0 8
3905: ARRAY
3906: PUSH
3907: FOR_IN
3908: IFFALSE 3964
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3910: LD_VAR 0 3
3914: PUSH
3915: LD_INT 1
3917: ARRAY
3918: PPUSH
3919: LD_VAR 0 3
3923: PUSH
3924: LD_INT 2
3926: ARRAY
3927: PPUSH
3928: LD_INT 3
3930: PPUSH
3931: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3935: LD_VAR 0 3
3939: PUSH
3940: LD_INT 1
3942: ARRAY
3943: PPUSH
3944: LD_VAR 0 3
3948: PUSH
3949: LD_INT 2
3951: ARRAY
3952: PPUSH
3953: LD_VAR 0 7
3957: PPUSH
3958: CALL_OW 441
// end ;
3962: GO 3907
3964: POP
3965: POP
// end ; InitBc ;
3966: CALL_OW 21
// InitUc ;
3970: CALL_OW 18
// uc_side := side ;
3974: LD_ADDR_OWVAR 20
3978: PUSH
3979: LD_VAR 0 7
3983: ST_TO_ADDR
// uc_nation := nation ;
3984: LD_ADDR_OWVAR 21
3988: PUSH
3989: LD_VAR 0 9
3993: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3994: LD_EXP 20
3998: PUSH
3999: LD_INT 1
4001: NEG
4002: GREATER
4003: IFFALSE 4162
// begin x := mpStartPos [ pos ] [ 1 ] ;
4005: LD_ADDR_VAR 0 5
4009: PUSH
4010: LD_EXP 19
4014: PUSH
4015: LD_VAR 0 8
4019: ARRAY
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4025: LD_ADDR_VAR 0 6
4029: PUSH
4030: LD_EXP 19
4034: PUSH
4035: LD_VAR 0 8
4039: ARRAY
4040: PUSH
4041: LD_INT 2
4043: ARRAY
4044: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4045: LD_VAR 0 5
4049: PPUSH
4050: LD_VAR 0 6
4054: PPUSH
4055: LD_INT 12
4057: PPUSH
4058: LD_INT 2
4060: PPUSH
4061: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4065: LD_ADDR_EXP 21
4069: PUSH
4070: LD_EXP 21
4074: PPUSH
4075: LD_VAR 0 7
4079: PPUSH
4080: LD_VAR 0 7
4084: PPUSH
4085: LD_VAR 0 5
4089: PPUSH
4090: LD_VAR 0 6
4094: PPUSH
4095: LD_INT 1
4097: PUSH
4098: LD_INT 100
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: LD_INT 70
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 3
4117: PUSH
4118: LD_INT 40
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 10
4127: PUSH
4128: LD_INT 25
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: LD_INT 20
4137: PUSH
4138: LD_INT 100
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 418
4156: PPUSH
4157: CALL_OW 1
4161: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4162: LD_EXP 12
4166: PPUSH
4167: CALL 21354 0 1
4171: IFFALSE 4366
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
4173: LD_EXP 1
4177: PUSH
4178: LD_INT 2
4180: PUSH
4181: LD_INT 6
4183: PUSH
4184: LD_INT 7
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: LIST
4191: IN
4192: IFFALSE 4212
// begin bc_level := 10 ;
4194: LD_ADDR_OWVAR 43
4198: PUSH
4199: LD_INT 10
4201: ST_TO_ADDR
// bc_type := b_warehouse ;
4202: LD_ADDR_OWVAR 42
4206: PUSH
4207: LD_INT 1
4209: ST_TO_ADDR
// end else
4210: GO 4228
// begin bc_level := 0 ;
4212: LD_ADDR_OWVAR 43
4216: PUSH
4217: LD_INT 0
4219: ST_TO_ADDR
// bc_type := b_depot ;
4220: LD_ADDR_OWVAR 42
4224: PUSH
4225: LD_INT 0
4227: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4228: LD_ADDR_VAR 0 4
4232: PUSH
4233: LD_EXP 12
4237: PUSH
4238: LD_VAR 0 8
4242: ARRAY
4243: PUSH
4244: LD_INT 1
4246: ARRAY
4247: PPUSH
4248: LD_EXP 12
4252: PUSH
4253: LD_VAR 0 8
4257: ARRAY
4258: PUSH
4259: LD_INT 2
4261: ARRAY
4262: PPUSH
4263: LD_EXP 12
4267: PUSH
4268: LD_VAR 0 8
4272: ARRAY
4273: PUSH
4274: LD_INT 3
4276: ARRAY
4277: PPUSH
4278: CALL_OW 47
4282: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4283: LD_VAR 0 4
4287: PPUSH
4288: LD_STRING @
4290: PUSH
4291: LD_VAR 0 7
4295: STR
4296: PPUSH
4297: CALL_OW 500
// if Count ( mpStartingResources ) then
4301: LD_EXP 13
4305: PPUSH
4306: CALL 21354 0 1
4310: IFFALSE 4364
// begin for j := 1 to mpStartingResources do
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: DOUBLE
4318: LD_INT 1
4320: DEC
4321: ST_TO_ADDR
4322: LD_EXP 13
4326: PUSH
4327: FOR_TO
4328: IFFALSE 4362
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4330: LD_VAR 0 4
4334: PPUSH
4335: CALL_OW 274
4339: PPUSH
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_EXP 13
4349: PUSH
4350: LD_VAR 0 3
4354: ARRAY
4355: PPUSH
4356: CALL_OW 277
4360: GO 4327
4362: POP
4363: POP
// end ; end else
4364: GO 4573
// if Count ( mpStartingResources ) then
4366: LD_EXP 13
4370: PPUSH
4371: CALL 21354 0 1
4375: IFFALSE 4573
// begin x := mpStartPos [ pos ] [ 1 ] ;
4377: LD_ADDR_VAR 0 5
4381: PUSH
4382: LD_EXP 19
4386: PUSH
4387: LD_VAR 0 8
4391: ARRAY
4392: PUSH
4393: LD_INT 1
4395: ARRAY
4396: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4397: LD_ADDR_VAR 0 6
4401: PUSH
4402: LD_EXP 19
4406: PUSH
4407: LD_VAR 0 8
4411: ARRAY
4412: PUSH
4413: LD_INT 2
4415: ARRAY
4416: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4417: LD_ADDR_VAR 0 3
4421: PUSH
4422: DOUBLE
4423: LD_INT 1
4425: DEC
4426: ST_TO_ADDR
4427: LD_EXP 13
4431: PUSH
4432: FOR_TO
4433: IFFALSE 4571
// begin resources := mpStartingResources [ j ] ;
4435: LD_ADDR_VAR 0 13
4439: PUSH
4440: LD_EXP 13
4444: PUSH
4445: LD_VAR 0 3
4449: ARRAY
4450: ST_TO_ADDR
// if resources = 0 then
4451: LD_VAR 0 13
4455: PUSH
4456: LD_INT 0
4458: EQUAL
4459: IFFALSE 4463
// continue ;
4461: GO 4432
// repeat if resources >= 50 then
4463: LD_VAR 0 13
4467: PUSH
4468: LD_INT 50
4470: GREATEREQUAL
4471: IFFALSE 4517
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4473: LD_VAR 0 3
4477: PPUSH
4478: LD_INT 5
4480: PPUSH
4481: LD_VAR 0 5
4485: PPUSH
4486: LD_VAR 0 6
4490: PPUSH
4491: LD_INT 6
4493: PPUSH
4494: LD_INT 0
4496: PPUSH
4497: CALL_OW 60
// resources := resources - 50 ;
4501: LD_ADDR_VAR 0 13
4505: PUSH
4506: LD_VAR 0 13
4510: PUSH
4511: LD_INT 50
4513: MINUS
4514: ST_TO_ADDR
// end else
4515: GO 4559
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4517: LD_VAR 0 3
4521: PPUSH
4522: LD_VAR 0 13
4526: PUSH
4527: LD_INT 10
4529: DIV
4530: PPUSH
4531: LD_VAR 0 5
4535: PPUSH
4536: LD_VAR 0 6
4540: PPUSH
4541: LD_INT 6
4543: PPUSH
4544: LD_INT 0
4546: PPUSH
4547: CALL_OW 60
// resources := 0 ;
4551: LD_ADDR_VAR 0 13
4555: PUSH
4556: LD_INT 0
4558: ST_TO_ADDR
// end ; until resources <= 0 ;
4559: LD_VAR 0 13
4563: PUSH
4564: LD_INT 0
4566: LESSEQUAL
4567: IFFALSE 4463
// end ;
4569: GO 4432
4571: POP
4572: POP
// end ; if Count ( mpBuildings ) then
4573: LD_EXP 15
4577: PPUSH
4578: CALL 21354 0 1
4582: IFFALSE 4660
// begin for j in mpBuildings [ pos ] do
4584: LD_ADDR_VAR 0 3
4588: PUSH
4589: LD_EXP 15
4593: PUSH
4594: LD_VAR 0 8
4598: ARRAY
4599: PUSH
4600: FOR_IN
4601: IFFALSE 4658
// begin bc_level := 0 ;
4603: LD_ADDR_OWVAR 43
4607: PUSH
4608: LD_INT 0
4610: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4611: LD_ADDR_OWVAR 42
4615: PUSH
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4625: LD_VAR 0 3
4629: PUSH
4630: LD_INT 2
4632: ARRAY
4633: PPUSH
4634: LD_VAR 0 3
4638: PUSH
4639: LD_INT 3
4641: ARRAY
4642: PPUSH
4643: LD_VAR 0 3
4647: PUSH
4648: LD_INT 4
4650: ARRAY
4651: PPUSH
4652: CALL_OW 47
// end ;
4656: GO 4600
4658: POP
4659: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4660: LD_EXP 24
4664: IFFALSE 4684
4666: PUSH
4667: LD_INT 20
4669: PPUSH
4670: LD_VAR 0 7
4674: PPUSH
4675: CALL_OW 321
4679: PUSH
4680: LD_INT 1
4682: EQUAL
4683: AND
4684: IFFALSE 4701
// SetTech ( tech_SibDet , side , state_researched ) ;
4686: LD_INT 20
4688: PPUSH
4689: LD_VAR 0 7
4693: PPUSH
4694: LD_INT 2
4696: PPUSH
4697: CALL_OW 322
// if not mpArtifacts then
4701: LD_EXP 42
4705: NOT
4706: IFFALSE 4723
// SetTech ( tech_artifact , side , state_disabled ) ;
4708: LD_INT 24
4710: PPUSH
4711: LD_VAR 0 7
4715: PPUSH
4716: LD_INT 0
4718: PPUSH
4719: CALL_OW 322
// if mpSibBomb = 1 then
4723: LD_EXP 26
4727: PUSH
4728: LD_INT 1
4730: EQUAL
4731: IFFALSE 4750
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4733: LD_INT 25
4735: PPUSH
4736: LD_VAR 0 7
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 322
// end else
4748: GO 4765
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4750: LD_INT 25
4752: PPUSH
4753: LD_VAR 0 7
4757: PPUSH
4758: LD_INT 0
4760: PPUSH
4761: CALL_OW 322
// end ; if mpVehicles then
4765: LD_EXP 34
4769: IFFALSE 4868
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4771: LD_ADDR_VAR 0 3
4775: PUSH
4776: LD_VAR 0 7
4780: PPUSH
4781: LD_VAR 0 9
4785: PPUSH
4786: LD_EXP 34
4790: PPUSH
4791: CALL 6091 0 3
4795: PUSH
4796: FOR_IN
4797: IFFALSE 4866
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4799: LD_VAR 0 3
4803: PPUSH
4804: LD_INT 0
4806: PPUSH
4807: LD_INT 5
4809: PPUSH
4810: CALL_OW 12
4814: PPUSH
4815: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4819: LD_VAR 0 3
4823: PPUSH
4824: LD_EXP 19
4828: PUSH
4829: LD_VAR 0 8
4833: ARRAY
4834: PUSH
4835: LD_INT 1
4837: ARRAY
4838: PPUSH
4839: LD_EXP 19
4843: PUSH
4844: LD_VAR 0 8
4848: ARRAY
4849: PUSH
4850: LD_INT 2
4852: ARRAY
4853: PPUSH
4854: LD_INT 12
4856: PPUSH
4857: LD_INT 0
4859: PPUSH
4860: CALL_OW 50
// end ;
4864: GO 4796
4866: POP
4867: POP
// end ; uc_nation := nation ;
4868: LD_ADDR_OWVAR 21
4872: PUSH
4873: LD_VAR 0 9
4877: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4878: LD_EXP 1
4882: PUSH
4883: LD_INT 6
4885: PUSH
4886: LD_INT 7
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: IN
4893: IFFALSE 4918
4895: PUSH
4896: LD_EXP 5
4900: PUSH
4901: LD_VAR 0 2
4905: ARRAY
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: LD_INT 2
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: IN
4917: AND
4918: IFFALSE 4966
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4920: LD_ADDR_VAR 0 11
4924: PUSH
4925: LD_VAR 0 7
4929: PPUSH
4930: LD_VAR 0 9
4934: PPUSH
4935: LD_EXP 22
4939: PUSH
4940: LD_EXP 22
4944: PUSH
4945: LD_INT 2
4947: DIV
4948: PLUS
4949: PPUSH
4950: LD_EXP 23
4954: PUSH
4955: LD_INT 1
4957: PLUS
4958: PPUSH
4959: CALL 5582 0 4
4963: ST_TO_ADDR
4964: GO 4996
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4966: LD_ADDR_VAR 0 11
4970: PUSH
4971: LD_VAR 0 7
4975: PPUSH
4976: LD_VAR 0 9
4980: PPUSH
4981: LD_EXP 22
4985: PPUSH
4986: LD_EXP 23
4990: PPUSH
4991: CALL 5582 0 4
4995: ST_TO_ADDR
// for j in team do
4996: LD_ADDR_VAR 0 3
5000: PUSH
5001: LD_VAR 0 11
5005: PUSH
5006: FOR_IN
5007: IFFALSE 5056
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5009: LD_VAR 0 3
5013: PPUSH
5014: LD_EXP 19
5018: PUSH
5019: LD_VAR 0 8
5023: ARRAY
5024: PUSH
5025: LD_INT 1
5027: ARRAY
5028: PPUSH
5029: LD_EXP 19
5033: PUSH
5034: LD_VAR 0 8
5038: ARRAY
5039: PUSH
5040: LD_INT 2
5042: ARRAY
5043: PPUSH
5044: LD_INT 12
5046: PPUSH
5047: LD_INT 0
5049: PPUSH
5050: CALL_OW 50
5054: GO 5006
5056: POP
5057: POP
// if mpApemans then
5058: LD_EXP 28
5062: IFFALSE 5168
// begin for j := 1 to mpApemans do
5064: LD_ADDR_VAR 0 3
5068: PUSH
5069: DOUBLE
5070: LD_INT 1
5072: DEC
5073: ST_TO_ADDR
5074: LD_EXP 28
5078: PUSH
5079: FOR_TO
5080: IFFALSE 5166
// begin PrepareApeman ( - 5 ) ;
5082: LD_INT 5
5084: NEG
5085: PPUSH
5086: CALL 53447 0 1
// ape := CreateHuman ;
5090: LD_ADDR_VAR 0 10
5094: PUSH
5095: CALL_OW 44
5099: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5100: LD_ADDR_EXP 30
5104: PUSH
5105: LD_EXP 30
5109: PPUSH
5110: LD_VAR 0 8
5114: PPUSH
5115: LD_EXP 30
5119: PUSH
5120: LD_VAR 0 8
5124: ARRAY
5125: PPUSH
5126: LD_VAR 0 10
5130: PPUSH
5131: CALL 57320 0 2
5135: PPUSH
5136: CALL_OW 1
5140: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5141: LD_VAR 0 10
5145: PPUSH
5146: LD_EXP 29
5150: PUSH
5151: LD_VAR 0 8
5155: ARRAY
5156: PPUSH
5157: LD_INT 0
5159: PPUSH
5160: CALL_OW 49
// end ;
5164: GO 5079
5166: POP
5167: POP
// end ; end ;
5168: GO 3734
5170: POP
5171: POP
// if not mpTeamGame then
5172: LD_EXP 9
5176: NOT
5177: IFFALSE 5275
// begin for i := 1 to 8 do
5179: LD_ADDR_VAR 0 2
5183: PUSH
5184: DOUBLE
5185: LD_INT 1
5187: DEC
5188: ST_TO_ADDR
5189: LD_INT 8
5191: PUSH
5192: FOR_TO
5193: IFFALSE 5271
// for j := 1 to 8 do
5195: LD_ADDR_VAR 0 3
5199: PUSH
5200: DOUBLE
5201: LD_INT 1
5203: DEC
5204: ST_TO_ADDR
5205: LD_INT 8
5207: PUSH
5208: FOR_TO
5209: IFFALSE 5267
// if i <> j then
5211: LD_VAR 0 2
5215: PUSH
5216: LD_VAR 0 3
5220: NONEQUAL
5221: IFFALSE 5245
// SetAttitude ( i , j , att_neutral , true ) else
5223: LD_VAR 0 2
5227: PPUSH
5228: LD_VAR 0 3
5232: PPUSH
5233: LD_INT 0
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 80
5243: GO 5265
// SetAttitude ( i , j , att_friend , true ) ;
5245: LD_VAR 0 2
5249: PPUSH
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: LD_INT 1
5260: PPUSH
5261: CALL_OW 80
5265: GO 5208
5267: POP
5268: POP
5269: GO 5192
5271: POP
5272: POP
// end else
5273: GO 5450
// begin if mpSharedVision then
5275: LD_EXP 14
5279: IFFALSE 5344
// begin for i in mpTeams do
5281: LD_ADDR_VAR 0 2
5285: PUSH
5286: LD_EXP 8
5290: PUSH
5291: FOR_IN
5292: IFFALSE 5342
// for j := 2 to i do
5294: LD_ADDR_VAR 0 3
5298: PUSH
5299: DOUBLE
5300: LD_INT 2
5302: DEC
5303: ST_TO_ADDR
5304: LD_VAR 0 2
5308: PUSH
5309: FOR_TO
5310: IFFALSE 5338
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5312: LD_VAR 0 2
5316: PUSH
5317: LD_VAR 0 3
5321: ARRAY
5322: PPUSH
5323: LD_VAR 0 2
5327: PUSH
5328: LD_INT 1
5330: ARRAY
5331: PPUSH
5332: CALL_OW 343
5336: GO 5309
5338: POP
5339: POP
5340: GO 5291
5342: POP
5343: POP
// end ; for i := 1 to 8 do
5344: LD_ADDR_VAR 0 2
5348: PUSH
5349: DOUBLE
5350: LD_INT 1
5352: DEC
5353: ST_TO_ADDR
5354: LD_INT 8
5356: PUSH
5357: FOR_TO
5358: IFFALSE 5448
// for j := 1 to 8 do
5360: LD_ADDR_VAR 0 3
5364: PUSH
5365: DOUBLE
5366: LD_INT 1
5368: DEC
5369: ST_TO_ADDR
5370: LD_INT 8
5372: PUSH
5373: FOR_TO
5374: IFFALSE 5444
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5376: LD_EXP 6
5380: PUSH
5381: LD_VAR 0 2
5385: ARRAY
5386: PUSH
5387: LD_EXP 6
5391: PUSH
5392: LD_VAR 0 3
5396: ARRAY
5397: EQUAL
5398: IFFALSE 5422
// SetAttitude ( i , j , att_friend , true ) else
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: LD_INT 1
5415: PPUSH
5416: CALL_OW 80
5420: GO 5442
// SetAttitude ( i , j , att_enemy , true ) ;
5422: LD_VAR 0 2
5426: PPUSH
5427: LD_VAR 0 3
5431: PPUSH
5432: LD_INT 2
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: CALL_OW 80
5442: GO 5373
5444: POP
5445: POP
5446: GO 5357
5448: POP
5449: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5450: LD_ADDR_OWVAR 71
5454: PUSH
5455: LD_EXP 7
5459: PUSH
5460: LD_OWVAR 2
5464: ARRAY
5465: ST_TO_ADDR
// if IAmSpec then
5466: CALL_OW 531
5470: IFFALSE 5511
// begin FogOff ( true ) ;
5472: LD_INT 1
5474: PPUSH
5475: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5479: LD_EXP 27
5483: PUSH
5484: LD_INT 1
5486: ARRAY
5487: PUSH
5488: LD_INT 2
5490: DIV
5491: PPUSH
5492: LD_EXP 27
5496: PUSH
5497: LD_INT 2
5499: ARRAY
5500: PUSH
5501: LD_INT 2
5503: DIV
5504: PPUSH
5505: CALL_OW 86
// end else
5509: GO 5557
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5511: LD_EXP 19
5515: PUSH
5516: LD_EXP 5
5520: PUSH
5521: LD_OWVAR 2
5525: ARRAY
5526: ARRAY
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PPUSH
5532: LD_EXP 19
5536: PUSH
5537: LD_EXP 5
5541: PUSH
5542: LD_OWVAR 2
5546: ARRAY
5547: ARRAY
5548: PUSH
5549: LD_INT 2
5551: ARRAY
5552: PPUSH
5553: CALL_OW 86
// end ; BeginBuildUp ;
5557: CALL 6624 0 0
// enable ( mpActive ) ;
5561: LD_INT 100
5563: ENABLE_MARKED
// enable ( mpGameType ) ;
5564: LD_EXP 1
5568: ENABLE_MARKED
// mpGameActive := true ;
5569: LD_ADDR_EXP 37
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// end ;
5577: LD_VAR 0 1
5581: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5582: LD_INT 0
5584: PPUSH
5585: PPUSH
5586: PPUSH
5587: PPUSH
// result := [ ] ;
5588: LD_ADDR_VAR 0 5
5592: PUSH
5593: EMPTY
5594: ST_TO_ADDR
// class := class_soldier ;
5595: LD_ADDR_VAR 0 8
5599: PUSH
5600: LD_INT 1
5602: ST_TO_ADDR
// uc_side := side ;
5603: LD_ADDR_OWVAR 20
5607: PUSH
5608: LD_VAR 0 1
5612: ST_TO_ADDR
// uc_nation := nation ;
5613: LD_ADDR_OWVAR 21
5617: PUSH
5618: LD_VAR 0 2
5622: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5623: LD_ADDR_OWVAR 26
5627: PUSH
5628: LD_OWVAR 19
5632: PUSH
5633: LD_VAR 0 1
5637: ARRAY
5638: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5639: LD_INT 1
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: CALL_OW 12
5649: PPUSH
5650: LD_VAR 0 8
5654: PPUSH
5655: LD_VAR 0 4
5659: PUSH
5660: LD_INT 2
5662: PLUS
5663: PPUSH
5664: CALL_OW 380
// hc_importance := 105 ;
5668: LD_ADDR_OWVAR 32
5672: PUSH
5673: LD_INT 105
5675: ST_TO_ADDR
// if Multiplayer then
5676: LD_OWVAR 4
5680: IFFALSE 5720
// begin hc_gallery := MULTIAVATARS ;
5682: LD_ADDR_OWVAR 33
5686: PUSH
5687: LD_STRING MULTIAVATARS
5689: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5690: LD_ADDR_OWVAR 34
5694: PUSH
5695: LD_VAR 0 1
5699: PPUSH
5700: CALL_OW 525
5704: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5705: LD_ADDR_OWVAR 27
5709: PUSH
5710: LD_VAR 0 1
5714: PPUSH
5715: CALL_OW 526
5719: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5720: LD_ADDR_VAR 0 5
5724: PUSH
5725: LD_VAR 0 5
5729: PPUSH
5730: CALL_OW 44
5734: PPUSH
5735: CALL 57320 0 2
5739: ST_TO_ADDR
// if mpTeamPreset then
5740: LD_LOC 1
5744: IFFALSE 5840
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5746: LD_LOC 1
5750: PUSH
5751: LD_INT 1
5753: ARRAY
5754: PPUSH
5755: LD_VAR 0 5
5759: PUSH
5760: LD_VAR 0 5
5764: ARRAY
5765: PPUSH
5766: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5770: LD_VAR 0 5
5774: PUSH
5775: LD_VAR 0 5
5779: ARRAY
5780: PPUSH
5781: LD_INT 1
5783: PPUSH
5784: LD_LOC 1
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: LD_INT 1
5795: PPUSH
5796: CALL_OW 260
5800: PPUSH
5801: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5805: LD_VAR 0 5
5809: PUSH
5810: LD_VAR 0 5
5814: ARRAY
5815: PPUSH
5816: LD_INT 2
5818: PPUSH
5819: LD_LOC 1
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: PPUSH
5828: LD_INT 2
5830: PPUSH
5831: CALL_OW 260
5835: PPUSH
5836: CALL_OW 239
// end ; InitHc_All ( ) ;
5840: CALL_OW 584
// class := 2 ;
5844: LD_ADDR_VAR 0 8
5848: PUSH
5849: LD_INT 2
5851: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5852: LD_ADDR_VAR 0 6
5856: PUSH
5857: DOUBLE
5858: LD_INT 1
5860: DEC
5861: ST_TO_ADDR
5862: LD_VAR 0 3
5866: PUSH
5867: LD_INT 1
5869: MINUS
5870: PUSH
5871: FOR_TO
5872: IFFALSE 6067
// begin PrepareHuman ( false , class , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_VAR 0 8
5881: PPUSH
5882: LD_VAR 0 4
5886: PPUSH
5887: CALL_OW 380
// un := CreateHuman ;
5891: LD_ADDR_VAR 0 7
5895: PUSH
5896: CALL_OW 44
5900: ST_TO_ADDR
// result := Join ( result , un ) ;
5901: LD_ADDR_VAR 0 5
5905: PUSH
5906: LD_VAR 0 5
5910: PPUSH
5911: LD_VAR 0 7
5915: PPUSH
5916: CALL 57320 0 2
5920: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5921: LD_LOC 1
5925: PPUSH
5926: CALL 21354 0 1
5930: PUSH
5931: LD_VAR 0 3
5935: GREATEREQUAL
5936: IFFALSE 6032
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5938: LD_LOC 1
5942: PUSH
5943: LD_VAR 0 6
5947: PUSH
5948: LD_INT 1
5950: PLUS
5951: ARRAY
5952: PPUSH
5953: LD_VAR 0 7
5957: PPUSH
5958: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5962: LD_VAR 0 7
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: LD_LOC 1
5974: PUSH
5975: LD_VAR 0 6
5979: PUSH
5980: LD_INT 1
5982: PLUS
5983: ARRAY
5984: PPUSH
5985: LD_INT 1
5987: PPUSH
5988: CALL_OW 260
5992: PPUSH
5993: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5997: LD_VAR 0 7
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: LD_LOC 1
6009: PUSH
6010: LD_VAR 0 6
6014: PUSH
6015: LD_INT 1
6017: PLUS
6018: ARRAY
6019: PPUSH
6020: LD_INT 2
6022: PPUSH
6023: CALL_OW 260
6027: PPUSH
6028: CALL_OW 239
// end ; class := Inc ( class ) ;
6032: LD_ADDR_VAR 0 8
6036: PUSH
6037: LD_VAR 0 8
6041: PPUSH
6042: CALL 58693 0 1
6046: ST_TO_ADDR
// if class = 5 then
6047: LD_VAR 0 8
6051: PUSH
6052: LD_INT 5
6054: EQUAL
6055: IFFALSE 6065
// class := 1 ;
6057: LD_ADDR_VAR 0 8
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// end ;
6065: GO 5871
6067: POP
6068: POP
// if not mpTeamPreset then
6069: LD_LOC 1
6073: NOT
6074: IFFALSE 6086
// mpTeamPreset := result ;
6076: LD_ADDR_LOC 1
6080: PUSH
6081: LD_VAR 0 5
6085: ST_TO_ADDR
// end ;
6086: LD_VAR 0 5
6090: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6091: LD_INT 0
6093: PPUSH
6094: PPUSH
// result := [ ] ;
6095: LD_ADDR_VAR 0 4
6099: PUSH
6100: EMPTY
6101: ST_TO_ADDR
// if not vehicles then
6102: LD_VAR 0 3
6106: NOT
6107: IFFALSE 6111
// exit ;
6109: GO 6325
// for i := 1 to vehicles [ nation ] do
6111: LD_ADDR_VAR 0 5
6115: PUSH
6116: DOUBLE
6117: LD_INT 1
6119: DEC
6120: ST_TO_ADDR
6121: LD_VAR 0 3
6125: PUSH
6126: LD_VAR 0 2
6130: ARRAY
6131: PUSH
6132: FOR_TO
6133: IFFALSE 6323
// begin uc_side := side ;
6135: LD_ADDR_OWVAR 20
6139: PUSH
6140: LD_VAR 0 1
6144: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6145: LD_VAR 0 3
6149: PUSH
6150: LD_VAR 0 2
6154: ARRAY
6155: PUSH
6156: LD_VAR 0 5
6160: ARRAY
6161: PPUSH
6162: CALL 21354 0 1
6166: PUSH
6167: LD_INT 4
6169: GREATER
6170: IFFALSE 6200
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6172: LD_ADDR_OWVAR 21
6176: PUSH
6177: LD_VAR 0 3
6181: PUSH
6182: LD_VAR 0 2
6186: ARRAY
6187: PUSH
6188: LD_VAR 0 5
6192: ARRAY
6193: PUSH
6194: LD_INT 5
6196: ARRAY
6197: ST_TO_ADDR
6198: GO 6210
// uc_nation := nation ;
6200: LD_ADDR_OWVAR 21
6204: PUSH
6205: LD_VAR 0 2
6209: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6210: LD_VAR 0 3
6214: PUSH
6215: LD_VAR 0 2
6219: ARRAY
6220: PUSH
6221: LD_VAR 0 5
6225: ARRAY
6226: PUSH
6227: LD_INT 1
6229: ARRAY
6230: PPUSH
6231: LD_VAR 0 3
6235: PUSH
6236: LD_VAR 0 2
6240: ARRAY
6241: PUSH
6242: LD_VAR 0 5
6246: ARRAY
6247: PUSH
6248: LD_INT 2
6250: ARRAY
6251: PPUSH
6252: LD_VAR 0 3
6256: PUSH
6257: LD_VAR 0 2
6261: ARRAY
6262: PUSH
6263: LD_VAR 0 5
6267: ARRAY
6268: PUSH
6269: LD_INT 3
6271: ARRAY
6272: PPUSH
6273: LD_VAR 0 3
6277: PUSH
6278: LD_VAR 0 2
6282: ARRAY
6283: PUSH
6284: LD_VAR 0 5
6288: ARRAY
6289: PUSH
6290: LD_INT 4
6292: ARRAY
6293: PPUSH
6294: LD_INT 80
6296: PPUSH
6297: CALL 24150 0 5
// result := Join ( result , CreateVehicle ) ;
6301: LD_ADDR_VAR 0 4
6305: PUSH
6306: LD_VAR 0 4
6310: PPUSH
6311: CALL_OW 45
6315: PPUSH
6316: CALL 57320 0 2
6320: ST_TO_ADDR
// end ;
6321: GO 6132
6323: POP
6324: POP
// end ;
6325: LD_VAR 0 4
6329: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6330: LD_INT 0
6332: PPUSH
6333: PPUSH
// for i in mpBattleFlags do
6334: LD_ADDR_VAR 0 3
6338: PUSH
6339: LD_EXP 21
6343: PUSH
6344: FOR_IN
6345: IFFALSE 6422
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6347: LD_VAR 0 3
6351: PPUSH
6352: LD_INT 1
6354: PUSH
6355: LD_VAR 0 1
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: LD_VAR 0 1
6371: PUSH
6372: LD_REAL  7.00000000000000E-0001
6375: MUL
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: PUSH
6381: LD_INT 3
6383: PUSH
6384: LD_VAR 0 1
6388: PUSH
6389: LD_REAL  4.00000000000000E-0001
6392: MUL
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: LD_INT 20
6400: PUSH
6401: LD_VAR 0 1
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: PPUSH
6416: CALL_OW 423
6420: GO 6344
6422: POP
6423: POP
// end ;
6424: LD_VAR 0 2
6428: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6429: LD_INT 100
6431: IFFALSE 6526
6433: GO 6435
6435: DISABLE
6436: LD_INT 0
6438: PPUSH
6439: PPUSH
// begin if mpBattleFlag <= 0 then
6440: LD_EXP 20
6444: PUSH
6445: LD_INT 0
6447: LESSEQUAL
6448: IFFALSE 6452
// exit ;
6450: GO 6526
// strength := 100 ;
6452: LD_ADDR_VAR 0 2
6456: PUSH
6457: LD_INT 100
6459: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6460: LD_EXP 20
6464: PPUSH
6465: CALL_OW 67
// strength := Dec ( strength ) ;
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: LD_VAR 0 2
6478: PPUSH
6479: CALL 58715 0 1
6483: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6484: LD_VAR 0 2
6488: PPUSH
6489: CALL 6330 0 1
// until not strength ;
6493: LD_VAR 0 2
6497: NOT
6498: IFFALSE 6460
// for i in mpBattleFlags do
6500: LD_ADDR_VAR 0 1
6504: PUSH
6505: LD_EXP 21
6509: PUSH
6510: FOR_IN
6511: IFFALSE 6524
// KillBattleFlag ( i ) ;
6513: LD_VAR 0 1
6517: PPUSH
6518: CALL_OW 419
6522: GO 6510
6524: POP
6525: POP
// end ;
6526: PPOPN 2
6528: END
// every 0 0$1 marked mpActive do var side , tmp ;
6529: GO 6531
6531: DISABLE
6532: LD_INT 0
6534: PPUSH
6535: PPUSH
// begin if mpSibBomb <= 1 then
6536: LD_EXP 26
6540: PUSH
6541: LD_INT 1
6543: LESSEQUAL
6544: IFFALSE 6548
// exit ;
6546: GO 6621
// tmp := mpSibBomb ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: LD_EXP 26
6557: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6558: LD_INT 35
6560: PPUSH
6561: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6565: LD_ADDR_VAR 0 2
6569: PUSH
6570: LD_VAR 0 2
6574: PUSH
6575: LD_INT 35
6577: MINUS
6578: ST_TO_ADDR
// until not tmp ;
6579: LD_VAR 0 2
6583: NOT
6584: IFFALSE 6558
// for side := 1 to 8 do
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: DOUBLE
6592: LD_INT 1
6594: DEC
6595: ST_TO_ADDR
6596: LD_INT 8
6598: PUSH
6599: FOR_TO
6600: IFFALSE 6619
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6602: LD_INT 25
6604: PPUSH
6605: LD_VAR 0 1
6609: PPUSH
6610: LD_INT 1
6612: PPUSH
6613: CALL_OW 322
6617: GO 6599
6619: POP
6620: POP
// end ;
6621: PPOPN 2
6623: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6624: LD_INT 0
6626: PPUSH
6627: PPUSH
6628: PPUSH
// mpBuildUpTimeDelay := 0 ;
6629: LD_ADDR_EXP 45
6633: PUSH
6634: LD_INT 0
6636: ST_TO_ADDR
// if not mpBuildUpTime then
6637: LD_EXP 18
6641: NOT
6642: IFFALSE 6646
// exit ;
6644: GO 6835
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6646: LD_ADDR_EXP 45
6650: PUSH
6651: LD_INT 8400
6653: PUSH
6654: LD_INT 2100
6656: PUSH
6657: LD_EXP 18
6661: MUL
6662: PLUS
6663: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6664: LD_ADDR_EXP 46
6668: PUSH
6669: LD_INT 1
6671: ST_TO_ADDR
// for i := 1 to 8 do
6672: LD_ADDR_VAR 0 2
6676: PUSH
6677: DOUBLE
6678: LD_INT 1
6680: DEC
6681: ST_TO_ADDR
6682: LD_INT 8
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6833
// if mpSidePositions [ i ] then
6688: LD_EXP 5
6692: PUSH
6693: LD_VAR 0 2
6697: ARRAY
6698: IFFALSE 6831
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6700: LD_EXP 17
6704: PUSH
6705: LD_EXP 5
6709: PUSH
6710: LD_VAR 0 2
6714: ARRAY
6715: ARRAY
6716: PPUSH
6717: LD_INT 5
6719: PPUSH
6720: CALL_OW 424
// for j := 1 to 8 do
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: DOUBLE
6730: LD_INT 1
6732: DEC
6733: ST_TO_ADDR
6734: LD_INT 8
6736: PUSH
6737: FOR_TO
6738: IFFALSE 6829
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6740: LD_EXP 5
6744: PUSH
6745: LD_VAR 0 3
6749: ARRAY
6750: IFFALSE 6799
6752: PUSH
6753: LD_EXP 6
6757: PUSH
6758: LD_VAR 0 2
6762: ARRAY
6763: PUSH
6764: LD_EXP 6
6768: PUSH
6769: LD_VAR 0 3
6773: ARRAY
6774: NONEQUAL
6775: IFTRUE 6798
6777: PUSH
6778: LD_EXP 9
6782: NOT
6783: IFFALSE 6797
6785: PUSH
6786: LD_VAR 0 2
6790: PUSH
6791: LD_VAR 0 3
6795: NONEQUAL
6796: AND
6797: OR
6798: AND
6799: IFFALSE 6827
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6801: LD_VAR 0 3
6805: PPUSH
6806: LD_EXP 17
6810: PUSH
6811: LD_EXP 5
6815: PUSH
6816: LD_VAR 0 2
6820: ARRAY
6821: ARRAY
6822: PPUSH
6823: CALL_OW 333
6827: GO 6737
6829: POP
6830: POP
// end ;
6831: GO 6685
6833: POP
6834: POP
// end ;
6835: LD_VAR 0 1
6839: RET
// function EndBuildUp ; var i , j ; begin
6840: LD_INT 0
6842: PPUSH
6843: PPUSH
6844: PPUSH
// mpBuildUpTimeActive := false ;
6845: LD_ADDR_EXP 46
6849: PUSH
6850: LD_INT 0
6852: ST_TO_ADDR
// for i := 1 to 8 do
6853: LD_ADDR_VAR 0 2
6857: PUSH
6858: DOUBLE
6859: LD_INT 1
6861: DEC
6862: ST_TO_ADDR
6863: LD_INT 8
6865: PUSH
6866: FOR_TO
6867: IFFALSE 7014
// if mpSidePositions [ i ] then
6869: LD_EXP 5
6873: PUSH
6874: LD_VAR 0 2
6878: ARRAY
6879: IFFALSE 7012
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6881: LD_EXP 17
6885: PUSH
6886: LD_EXP 5
6890: PUSH
6891: LD_VAR 0 2
6895: ARRAY
6896: ARRAY
6897: PPUSH
6898: LD_INT 0
6900: PPUSH
6901: CALL_OW 424
// for j := 1 to 8 do
6905: LD_ADDR_VAR 0 3
6909: PUSH
6910: DOUBLE
6911: LD_INT 1
6913: DEC
6914: ST_TO_ADDR
6915: LD_INT 8
6917: PUSH
6918: FOR_TO
6919: IFFALSE 7010
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6921: LD_EXP 5
6925: PUSH
6926: LD_VAR 0 3
6930: ARRAY
6931: IFFALSE 6980
6933: PUSH
6934: LD_EXP 6
6938: PUSH
6939: LD_VAR 0 2
6943: ARRAY
6944: PUSH
6945: LD_EXP 6
6949: PUSH
6950: LD_VAR 0 3
6954: ARRAY
6955: NONEQUAL
6956: IFTRUE 6979
6958: PUSH
6959: LD_EXP 9
6963: NOT
6964: IFFALSE 6978
6966: PUSH
6967: LD_VAR 0 2
6971: PUSH
6972: LD_VAR 0 3
6976: NONEQUAL
6977: AND
6978: OR
6979: AND
6980: IFFALSE 7008
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6982: LD_VAR 0 3
6986: PPUSH
6987: LD_EXP 17
6991: PUSH
6992: LD_EXP 5
6996: PUSH
6997: LD_VAR 0 2
7001: ARRAY
7002: ARRAY
7003: PPUSH
7004: CALL_OW 334
7008: GO 6918
7010: POP
7011: POP
// end ;
7012: GO 6866
7014: POP
7015: POP
// end ;
7016: LD_VAR 0 1
7020: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7021: LD_EXP 46
7025: IFFALSE 7204
7027: GO 7029
7029: DISABLE
7030: LD_INT 0
7032: PPUSH
7033: PPUSH
// begin for i := 1 to 8 do
7034: LD_ADDR_VAR 0 1
7038: PUSH
7039: DOUBLE
7040: LD_INT 1
7042: DEC
7043: ST_TO_ADDR
7044: LD_INT 8
7046: PUSH
7047: FOR_TO
7048: IFFALSE 7201
// if mpSidePositions [ i ] then
7050: LD_EXP 5
7054: PUSH
7055: LD_VAR 0 1
7059: ARRAY
7060: IFFALSE 7199
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7062: LD_ADDR_VAR 0 2
7066: PUSH
7067: LD_EXP 17
7071: PUSH
7072: LD_EXP 5
7076: PUSH
7077: LD_VAR 0 1
7081: ARRAY
7082: ARRAY
7083: PPUSH
7084: LD_INT 2
7086: PUSH
7087: LD_INT 21
7089: PUSH
7090: LD_INT 1
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 21
7099: PUSH
7100: LD_INT 2
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 22
7114: PUSH
7115: LD_OWVAR 2
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 70
7132: PUSH
7133: FOR_IN
7134: IFFALSE 7197
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7136: LD_EXP 6
7140: PUSH
7141: LD_VAR 0 1
7145: ARRAY
7146: PUSH
7147: LD_EXP 6
7151: PUSH
7152: LD_OWVAR 2
7156: ARRAY
7157: NONEQUAL
7158: IFTRUE 7181
7160: PUSH
7161: LD_EXP 9
7165: NOT
7166: IFFALSE 7180
7168: PUSH
7169: LD_VAR 0 1
7173: PUSH
7174: LD_OWVAR 2
7178: NONEQUAL
7179: AND
7180: OR
7181: IFFALSE 7195
// ComMoveToArea ( un , BuildUpEscape ) ;
7183: LD_VAR 0 2
7187: PPUSH
7188: LD_INT 59
7190: PPUSH
7191: CALL_OW 113
7195: GO 7133
7197: POP
7198: POP
7199: GO 7047
7201: POP
7202: POP
// enable ;
7203: ENABLE
// end ;
7204: PPOPN 2
7206: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7207: LD_EXP 18
7211: IFFALSE 7261
7213: GO 7215
7215: DISABLE
7216: LD_INT 0
7218: PPUSH
// begin tmp := mpBuildUpTime ;
7219: LD_ADDR_VAR 0 1
7223: PUSH
7224: LD_EXP 18
7228: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7229: LD_INT 35
7231: PPUSH
7232: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7236: LD_ADDR_VAR 0 1
7240: PUSH
7241: LD_VAR 0 1
7245: PUSH
7246: LD_INT 35
7248: MINUS
7249: ST_TO_ADDR
// until not tmp ;
7250: LD_VAR 0 1
7254: NOT
7255: IFFALSE 7229
// EndBuildUp ;
7257: CALL 6840 0 0
// end ;
7261: PPOPN 1
7263: END
// every 0 0$1 trigger mpActive marked mpWin do
7264: LD_INT 100
7266: IFFALSE 7300
7268: GO 7270
7270: DISABLE
// begin if IAmServer then
7271: CALL_OW 518
7275: IFFALSE 7284
// wait ( 0 0$3 ) ;
7277: LD_INT 105
7279: PPUSH
7280: CALL_OW 67
// if Multiplayer then
7284: LD_OWVAR 4
7288: IFFALSE 7296
// YouWinInMultiplayer else
7290: CALL_OW 106
7294: GO 7300
// YouWin ;
7296: CALL_OW 103
// end ;
7300: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7301: LD_INT 0
7303: PPUSH
// result := false ;
7304: LD_ADDR_VAR 0 3
7308: PUSH
7309: LD_INT 0
7311: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7312: LD_VAR 0 1
7316: PUSH
7317: LD_INT 1
7319: DOUBLE
7320: EQUAL
7321: IFTRUE 7343
7323: LD_INT 5
7325: DOUBLE
7326: EQUAL
7327: IFTRUE 7343
7329: LD_INT 6
7331: DOUBLE
7332: EQUAL
7333: IFTRUE 7343
7335: LD_INT 7
7337: DOUBLE
7338: EQUAL
7339: IFTRUE 7343
7341: GO 7416
7343: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7344: LD_ADDR_VAR 0 3
7348: PUSH
7349: LD_INT 22
7351: PUSH
7352: LD_VAR 0 2
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 21
7366: PUSH
7367: LD_INT 1
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 33
7376: PUSH
7377: LD_INT 3
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 33
7386: PUSH
7387: LD_INT 5
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PPUSH
7404: CALL_OW 69
7408: PPUSH
7409: CALL 21354 0 1
7413: ST_TO_ADDR
// end ; GameTypeSurvival :
7414: GO 7655
7416: LD_INT 2
7418: DOUBLE
7419: EQUAL
7420: IFTRUE 7424
7422: GO 7554
7424: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7425: LD_ADDR_VAR 0 3
7429: PUSH
7430: LD_INT 22
7432: PUSH
7433: LD_VAR 0 2
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 30
7447: PUSH
7448: LD_INT 0
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 30
7457: PUSH
7458: LD_INT 1
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: PPUSH
7479: CALL 21354 0 1
7483: IFFALSE 7551
7485: PUSH
7486: LD_INT 22
7488: PUSH
7489: LD_VAR 0 2
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: LD_INT 21
7503: PUSH
7504: LD_INT 1
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 33
7513: PUSH
7514: LD_INT 3
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 33
7523: PUSH
7524: LD_INT 5
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 69
7545: PPUSH
7546: CALL 21354 0 1
7550: AND
7551: ST_TO_ADDR
// end ; GameTypeKing :
7552: GO 7655
7554: LD_INT 3
7556: DOUBLE
7557: EQUAL
7558: IFTRUE 7562
7560: GO 7654
7562: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_INT 22
7570: PUSH
7571: LD_VAR 0 2
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: LD_INT 2
7582: PUSH
7583: LD_INT 21
7585: PUSH
7586: LD_INT 1
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 33
7595: PUSH
7596: LD_INT 3
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 33
7605: PUSH
7606: LD_INT 5
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PPUSH
7623: CALL_OW 69
7627: PPUSH
7628: CALL 21354 0 1
7632: IFFALSE 7651
7634: PUSH
7635: LD_VAR 0 2
7639: PPUSH
7640: CALL 11156 0 1
7644: PUSH
7645: LD_EXP 33
7649: LESS
7650: AND
7651: ST_TO_ADDR
// end ; end ;
7652: GO 7655
7654: POP
// end ;
7655: LD_VAR 0 3
7659: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7660: LD_INT 100
7662: IFFALSE 7892
7664: GO 7666
7666: DISABLE
7667: LD_INT 0
7669: PPUSH
7670: PPUSH
// begin if Multiplayer then
7671: LD_OWVAR 4
7675: IFFALSE 7683
// SetPlayerSpectator ( ) else
7677: CALL_OW 572
7681: GO 7692
// FogOff ( your_side ) ;
7683: LD_OWVAR 2
7687: PPUSH
7688: CALL_OW 344
// repeat gameIsOn := false ;
7692: LD_ADDR_VAR 0 1
7696: PUSH
7697: LD_INT 0
7699: ST_TO_ADDR
// for i := 1 to 8 do
7700: LD_ADDR_VAR 0 2
7704: PUSH
7705: DOUBLE
7706: LD_INT 1
7708: DEC
7709: ST_TO_ADDR
7710: LD_INT 8
7712: PUSH
7713: FOR_TO
7714: IFFALSE 7844
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7716: LD_EXP 5
7720: PUSH
7721: LD_VAR 0 2
7725: ARRAY
7726: IFFALSE 7739
7728: PUSH
7729: LD_VAR 0 2
7733: PPUSH
7734: CALL_OW 108
7738: AND
7739: IFFALSE 7753
7741: PUSH
7742: LD_VAR 0 2
7746: PUSH
7747: LD_OWVAR 2
7751: NONEQUAL
7752: AND
7753: IFFALSE 7842
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7755: LD_EXP 6
7759: PUSH
7760: LD_VAR 0 2
7764: ARRAY
7765: NOT
7766: IFTRUE 7814
7768: PUSH
7769: LD_EXP 6
7773: PUSH
7774: LD_VAR 0 2
7778: ARRAY
7779: PUSH
7780: LD_EXP 6
7784: PUSH
7785: LD_OWVAR 2
7789: ARRAY
7790: NONEQUAL
7791: IFFALSE 7813
7793: PUSH
7794: LD_OWVAR 2
7798: PPUSH
7799: LD_VAR 0 2
7803: PPUSH
7804: CALL_OW 81
7808: PUSH
7809: LD_INT 1
7811: NONEQUAL
7812: AND
7813: OR
7814: IFFALSE 7842
// if HasPowerByGameType ( mpGameType , i ) then
7816: LD_EXP 1
7820: PPUSH
7821: LD_VAR 0 2
7825: PPUSH
7826: CALL 7301 0 2
7830: IFFALSE 7842
// begin gameIsOn := true ;
7832: LD_ADDR_VAR 0 1
7836: PUSH
7837: LD_INT 1
7839: ST_TO_ADDR
// break ;
7840: GO 7844
// end ;
7842: GO 7713
7844: POP
7845: POP
// wait ( 100 ) ;
7846: LD_INT 100
7848: PPUSH
7849: CALL_OW 67
// until not gameIsOn ;
7853: LD_VAR 0 1
7857: NOT
7858: IFFALSE 7692
// if IAmServer then
7860: CALL_OW 518
7864: IFFALSE 7873
// wait ( 0 0$3 ) ;
7866: LD_INT 105
7868: PPUSH
7869: CALL_OW 67
// if Multiplayer then
7873: LD_OWVAR 4
7877: IFFALSE 7885
// YouLostInMultiplayer else
7879: CALL_OW 107
7883: GO 7892
// YouLost (  ) ;
7885: LD_STRING 
7887: PPUSH
7888: CALL_OW 104
// end ;
7892: PPOPN 2
7894: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7895: LD_EXP 31
7899: IFFALSE 8283
7901: GO 7903
7903: DISABLE
7904: LD_INT 0
7906: PPUSH
7907: PPUSH
7908: PPUSH
7909: PPUSH
7910: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7911: LD_ADDR_VAR 0 5
7915: PUSH
7916: LD_INT 1
7918: PUSH
7919: LD_INT 2
7921: PUSH
7922: LD_INT 3
7924: PUSH
7925: LD_INT 4
7927: PUSH
7928: LD_INT 5
7930: PUSH
7931: LD_INT 6
7933: PUSH
7934: LD_INT 7
7936: PUSH
7937: LD_INT 8
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7950: LD_INT 350
7952: PPUSH
7953: CALL_OW 67
// for i := 1 to 8 do
7957: LD_ADDR_VAR 0 1
7961: PUSH
7962: DOUBLE
7963: LD_INT 1
7965: DEC
7966: ST_TO_ADDR
7967: LD_INT 8
7969: PUSH
7970: FOR_TO
7971: IFFALSE 8253
// begin j := sides [ i ] ;
7973: LD_ADDR_VAR 0 2
7977: PUSH
7978: LD_VAR 0 5
7982: PUSH
7983: LD_VAR 0 1
7987: ARRAY
7988: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7989: LD_EXP 38
7993: PUSH
7994: LD_VAR 0 2
7998: ARRAY
7999: PPUSH
8000: CALL 21354 0 1
8004: IFFALSE 8017
8006: PUSH
8007: LD_VAR 0 2
8011: PPUSH
8012: CALL_OW 108
8016: AND
8017: IFFALSE 8035
8019: PUSH
8020: LD_EXP 1
8024: PPUSH
8025: LD_VAR 0 2
8029: PPUSH
8030: CALL 7301 0 2
8034: AND
8035: IFFALSE 8251
// begin wait ( mpRespawn div 2 ) ;
8037: LD_EXP 31
8041: PUSH
8042: LD_INT 2
8044: DIV
8045: PPUSH
8046: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8050: LD_ADDR_VAR 0 3
8054: PUSH
8055: LD_INT 22
8057: PUSH
8058: LD_VAR 0 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 50
8069: PUSH
8070: EMPTY
8071: LIST
8072: PUSH
8073: LD_INT 2
8075: PUSH
8076: LD_INT 30
8078: PUSH
8079: LD_INT 0
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 30
8088: PUSH
8089: LD_INT 1
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8111: LD_VAR 0 3
8115: NOT
8116: IFTRUE 8130
8118: PUSH
8119: LD_VAR 0 2
8123: PPUSH
8124: CALL_OW 108
8128: NOT
8129: OR
8130: IFTRUE 8149
8132: PUSH
8133: LD_EXP 1
8137: PPUSH
8138: LD_VAR 0 2
8142: PPUSH
8143: CALL 7301 0 2
8147: NOT
8148: OR
8149: IFFALSE 8153
// continue ;
8151: GO 7970
// spawn := tmp [ 1 ] ;
8153: LD_ADDR_VAR 0 4
8157: PUSH
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 1
8165: ARRAY
8166: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8167: LD_EXP 38
8171: PUSH
8172: LD_VAR 0 2
8176: ARRAY
8177: PUSH
8178: LD_INT 1
8180: ARRAY
8181: PPUSH
8182: LD_VAR 0 4
8186: PPUSH
8187: CALL_OW 250
8191: PPUSH
8192: LD_VAR 0 4
8196: PPUSH
8197: CALL_OW 251
8201: PPUSH
8202: LD_INT 32
8204: PPUSH
8205: LD_INT 1
8207: PPUSH
8208: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8212: LD_ADDR_EXP 38
8216: PUSH
8217: LD_EXP 38
8221: PPUSH
8222: LD_VAR 0 2
8226: PPUSH
8227: LD_EXP 38
8231: PUSH
8232: LD_VAR 0 2
8236: ARRAY
8237: PPUSH
8238: LD_INT 1
8240: PPUSH
8241: CALL_OW 3
8245: PPUSH
8246: CALL_OW 1
8250: ST_TO_ADDR
// end ; end ;
8251: GO 7970
8253: POP
8254: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8255: LD_ADDR_VAR 0 5
8259: PUSH
8260: LD_VAR 0 5
8264: PPUSH
8265: LD_INT 1
8267: PPUSH
8268: LD_INT 8
8270: PPUSH
8271: LD_INT 1
8273: PPUSH
8274: CALL 23680 0 4
8278: ST_TO_ADDR
// until false ;
8279: LD_INT 0
8281: IFFALSE 7950
// end ;
8283: PPOPN 5
8285: END
// every 0 0$1 marked mpActive do
8286: GO 8288
8288: DISABLE
// begin enable ;
8289: ENABLE
// if not mpDisplayStrings then
8290: LD_EXP 36
8294: NOT
8295: IFFALSE 8306
// begin display_strings := [ ] ;
8297: LD_ADDR_OWVAR 47
8301: PUSH
8302: EMPTY
8303: ST_TO_ADDR
// exit ;
8304: GO 8316
// end ; display_strings := mpDisplayStrings ;
8306: LD_ADDR_OWVAR 47
8310: PUSH
8311: LD_EXP 36
8315: ST_TO_ADDR
// end ; end_of_file
8316: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8317: LD_INT 0
8319: PPUSH
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
8326: PPUSH
8327: PPUSH
// if GetType ( un ) = unit_vehicle then
8328: LD_VAR 0 1
8332: PPUSH
8333: CALL_OW 247
8337: PUSH
8338: LD_INT 2
8340: EQUAL
8341: IFFALSE 8345
// exit ;
8343: GO 9019
// side := GetSide ( un ) ;
8345: LD_ADDR_VAR 0 9
8349: PUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 255
8359: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8360: LD_EXP 1
8364: PUSH
8365: LD_INT 2
8367: EQUAL
8368: IFFALSE 8462
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 266
8379: PUSH
8380: LD_INT 0
8382: PUSH
8383: LD_INT 1
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: IN
8390: IFFALSE 8462
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8392: LD_ADDR_VAR 0 3
8396: PUSH
8397: LD_INT 22
8399: PUSH
8400: LD_VAR 0 9
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: LD_INT 21
8414: PUSH
8415: LD_INT 1
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: LD_INT 33
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PPUSH
8441: CALL_OW 69
8445: PUSH
8446: FOR_IN
8447: IFFALSE 8460
// KillUnit ( i ) ;
8449: LD_VAR 0 3
8453: PPUSH
8454: CALL_OW 66
8458: GO 8446
8460: POP
8461: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8462: LD_VAR 0 1
8466: PPUSH
8467: CALL_OW 257
8471: PUSH
8472: LD_INT 12
8474: PUSH
8475: LD_INT 17
8477: PUSH
8478: LD_INT 15
8480: PUSH
8481: LD_INT 16
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: IN
8490: IFTRUE 8507
8492: PUSH
8493: LD_VAR 0 1
8497: PPUSH
8498: CALL_OW 263
8502: PUSH
8503: LD_INT 5
8505: EQUAL
8506: OR
8507: IFFALSE 8744
// begin tag := 0 ;
8509: LD_ADDR_VAR 0 5
8513: PUSH
8514: LD_INT 0
8516: ST_TO_ADDR
// for i := 1 to 8 do
8517: LD_ADDR_VAR 0 3
8521: PUSH
8522: DOUBLE
8523: LD_INT 1
8525: DEC
8526: ST_TO_ADDR
8527: LD_INT 8
8529: PUSH
8530: FOR_TO
8531: IFFALSE 8565
// if un in mpApePosIndex [ i ] then
8533: LD_VAR 0 1
8537: PUSH
8538: LD_EXP 30
8542: PUSH
8543: LD_VAR 0 3
8547: ARRAY
8548: IN
8549: IFFALSE 8563
// begin tag := i ;
8551: LD_ADDR_VAR 0 5
8555: PUSH
8556: LD_VAR 0 3
8560: ST_TO_ADDR
// break ;
8561: GO 8565
// end ;
8563: GO 8530
8565: POP
8566: POP
// if not tag then
8567: LD_VAR 0 5
8571: NOT
8572: IFFALSE 8576
// exit ;
8574: GO 9019
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8576: LD_ADDR_VAR 0 7
8580: PUSH
8581: LD_EXP 29
8585: PUSH
8586: LD_EXP 5
8590: PUSH
8591: LD_VAR 0 5
8595: ARRAY
8596: ARRAY
8597: ST_TO_ADDR
// if not area then
8598: LD_VAR 0 7
8602: NOT
8603: IFFALSE 8607
// exit ;
8605: GO 9019
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8607: LD_INT 14700
8609: PUSH
8610: LD_VAR 0 1
8614: PUSH
8615: LD_INT 5
8617: MOD
8618: PUSH
8619: LD_INT 1
8621: PLUS
8622: PUSH
8623: LD_INT 700
8625: MUL
8626: PLUS
8627: PPUSH
8628: CALL_OW 67
// repeat wait ( 10 ) ;
8632: LD_INT 10
8634: PPUSH
8635: CALL_OW 67
// until not mpBlockRespThread ;
8639: LD_EXP 44
8643: NOT
8644: IFFALSE 8632
// mpBlockRespThread := true ;
8646: LD_ADDR_EXP 44
8650: PUSH
8651: LD_INT 1
8653: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8654: LD_INT 0
8656: PPUSH
8657: CALL 53447 0 1
// ape := CreateHuman ;
8661: LD_ADDR_VAR 0 4
8665: PUSH
8666: CALL_OW 44
8670: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8671: LD_ADDR_EXP 30
8675: PUSH
8676: LD_EXP 30
8680: PPUSH
8681: LD_VAR 0 5
8685: PPUSH
8686: LD_EXP 30
8690: PUSH
8691: LD_VAR 0 5
8695: ARRAY
8696: PPUSH
8697: LD_VAR 0 4
8701: PPUSH
8702: CALL 57320 0 2
8706: PPUSH
8707: CALL_OW 1
8711: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8712: LD_VAR 0 4
8716: PPUSH
8717: LD_VAR 0 7
8721: PPUSH
8722: LD_INT 0
8724: PPUSH
8725: CALL_OW 49
// wait ( 10 ) ;
8729: LD_INT 10
8731: PPUSH
8732: CALL_OW 67
// mpBlockRespThread := false ;
8736: LD_ADDR_EXP 44
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8744: LD_VAR 0 1
8748: PPUSH
8749: CALL_OW 247
8753: PUSH
8754: LD_INT 1
8756: EQUAL
8757: IFFALSE 8774
8759: PUSH
8760: LD_VAR 0 1
8764: PPUSH
8765: CALL_OW 248
8769: PUSH
8770: LD_INT 0
8772: GREATER
8773: AND
8774: IFFALSE 9019
// begin if not mpRespawn then
8776: LD_EXP 31
8780: NOT
8781: IFFALSE 8785
// exit ;
8783: GO 9019
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8785: LD_VAR 0 9
8789: PPUSH
8790: CALL_OW 108
8794: NOT
8795: IFFALSE 8814
8797: PUSH
8798: LD_EXP 1
8802: PPUSH
8803: LD_VAR 0 9
8807: PPUSH
8808: CALL 7301 0 2
8812: NOT
8813: AND
8814: IFFALSE 8818
// exit ;
8816: GO 9019
// side := GetSide ( un ) ;
8818: LD_ADDR_VAR 0 9
8822: PUSH
8823: LD_VAR 0 1
8827: PPUSH
8828: CALL_OW 255
8832: ST_TO_ADDR
// nation := GetNation ( un ) ;
8833: LD_ADDR_VAR 0 8
8837: PUSH
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 248
8847: ST_TO_ADDR
// class := GetClass ( un ) ;
8848: LD_ADDR_VAR 0 6
8852: PUSH
8853: LD_VAR 0 1
8857: PPUSH
8858: CALL_OW 257
8862: ST_TO_ADDR
// if class > 4 then
8863: LD_VAR 0 6
8867: PUSH
8868: LD_INT 4
8870: GREATER
8871: IFFALSE 8881
// class := 1 ;
8873: LD_ADDR_VAR 0 6
8877: PUSH
8878: LD_INT 1
8880: ST_TO_ADDR
// repeat wait ( 10 ) ;
8881: LD_INT 10
8883: PPUSH
8884: CALL_OW 67
// until not mpBlockRespThread ;
8888: LD_EXP 44
8892: NOT
8893: IFFALSE 8881
// mpBlockRespThread := true ;
8895: LD_ADDR_EXP 44
8899: PUSH
8900: LD_INT 1
8902: ST_TO_ADDR
// uc_side := side ;
8903: LD_ADDR_OWVAR 20
8907: PUSH
8908: LD_VAR 0 9
8912: ST_TO_ADDR
// uc_nation := nation ;
8913: LD_ADDR_OWVAR 21
8917: PUSH
8918: LD_VAR 0 8
8922: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8923: LD_INT 0
8925: PPUSH
8926: LD_VAR 0 6
8930: PPUSH
8931: LD_INT 2
8933: PPUSH
8934: CALL_OW 380
// un := CreateHuman ;
8938: LD_ADDR_VAR 0 1
8942: PUSH
8943: CALL_OW 44
8947: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8948: LD_ADDR_EXP 38
8952: PUSH
8953: LD_EXP 38
8957: PPUSH
8958: LD_VAR 0 9
8962: PPUSH
8963: LD_EXP 38
8967: PUSH
8968: LD_VAR 0 9
8972: ARRAY
8973: PPUSH
8974: LD_EXP 38
8978: PUSH
8979: LD_VAR 0 9
8983: ARRAY
8984: PUSH
8985: LD_INT 1
8987: PLUS
8988: PPUSH
8989: LD_VAR 0 1
8993: PPUSH
8994: CALL_OW 1
8998: PPUSH
8999: CALL_OW 1
9003: ST_TO_ADDR
// wait ( 10 ) ;
9004: LD_INT 10
9006: PPUSH
9007: CALL_OW 67
// mpBlockRespThread := false ;
9011: LD_ADDR_EXP 44
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// end ; end ;
9019: LD_VAR 0 2
9023: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9024: LD_INT 0
9026: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9027: LD_VAR 0 1
9031: PPUSH
9032: CALL_OW 266
9036: PUSH
9037: LD_INT 0
9039: PUSH
9040: LD_INT 1
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: IN
9047: IFFALSE 9072
// SetBName ( building , @ & GetSide ( building ) ) ;
9049: LD_VAR 0 1
9053: PPUSH
9054: LD_STRING @
9056: PUSH
9057: LD_VAR 0 1
9061: PPUSH
9062: CALL_OW 255
9066: STR
9067: PPUSH
9068: CALL_OW 500
// end ;
9072: LD_VAR 0 2
9076: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9077: LD_INT 0
9079: PPUSH
9080: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
9081: LD_EXP 1
9085: PUSH
9086: LD_INT 2
9088: EQUAL
9089: IFFALSE 9113
9091: PUSH
9092: LD_VAR 0 1
9096: PPUSH
9097: CALL_OW 266
9101: PUSH
9102: LD_INT 0
9104: PUSH
9105: LD_INT 1
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: IN
9112: AND
9113: IFFALSE 9192
// begin SetSide ( building , oldSide ) ;
9115: LD_VAR 0 1
9119: PPUSH
9120: LD_VAR 0 2
9124: PPUSH
9125: CALL_OW 235
// KillUnit ( building ) ;
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9138: LD_ADDR_VAR 0 5
9142: PUSH
9143: LD_INT 22
9145: PUSH
9146: LD_VAR 0 2
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 21
9157: PUSH
9158: LD_INT 1
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PPUSH
9169: CALL_OW 69
9173: PUSH
9174: FOR_IN
9175: IFFALSE 9188
// KillUnit ( i ) ;
9177: LD_VAR 0 5
9181: PPUSH
9182: CALL_OW 66
9186: GO 9174
9188: POP
9189: POP
// exit ;
9190: GO 9237
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL_OW 266
9201: PUSH
9202: LD_INT 0
9204: PUSH
9205: LD_INT 1
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: IN
9212: IFFALSE 9237
// SetBName ( building , @ & GetSide ( building ) ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_STRING @
9221: PUSH
9222: LD_VAR 0 1
9226: PPUSH
9227: CALL_OW 255
9231: STR
9232: PPUSH
9233: CALL_OW 500
// end ;
9237: LD_VAR 0 4
9241: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9242: LD_INT 0
9244: PPUSH
9245: PPUSH
9246: PPUSH
// if mpGameType <> GameTypeFamine then
9247: LD_EXP 1
9251: PUSH
9252: LD_INT 5
9254: NONEQUAL
9255: IFFALSE 9259
// exit ;
9257: GO 9474
// for i := 1 to mpGlobalOilDeposits do
9259: LD_ADDR_VAR 0 6
9263: PUSH
9264: DOUBLE
9265: LD_INT 1
9267: DEC
9268: ST_TO_ADDR
9269: LD_EXP 39
9273: PUSH
9274: FOR_TO
9275: IFFALSE 9472
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9277: LD_EXP 39
9281: PUSH
9282: LD_VAR 0 6
9286: ARRAY
9287: PUSH
9288: LD_INT 1
9290: ARRAY
9291: PPUSH
9292: LD_EXP 39
9296: PUSH
9297: LD_VAR 0 6
9301: ARRAY
9302: PUSH
9303: LD_INT 2
9305: ARRAY
9306: PPUSH
9307: CALL_OW 428
9311: PUSH
9312: LD_VAR 0 1
9316: EQUAL
9317: IFFALSE 9470
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9319: LD_ADDR_VAR 0 7
9323: PUSH
9324: LD_EXP 39
9328: PUSH
9329: LD_VAR 0 6
9333: ARRAY
9334: PUSH
9335: LD_INT 3
9337: ARRAY
9338: ST_TO_ADDR
// value := value - amount ;
9339: LD_ADDR_VAR 0 7
9343: PUSH
9344: LD_VAR 0 7
9348: PUSH
9349: LD_VAR 0 4
9353: MINUS
9354: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9355: LD_ADDR_EXP 39
9359: PUSH
9360: LD_EXP 39
9364: PPUSH
9365: LD_VAR 0 6
9369: PPUSH
9370: LD_EXP 39
9374: PUSH
9375: LD_VAR 0 6
9379: ARRAY
9380: PPUSH
9381: LD_INT 3
9383: PPUSH
9384: LD_VAR 0 7
9388: PPUSH
9389: CALL_OW 1
9393: PPUSH
9394: CALL_OW 1
9398: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9399: LD_VAR 0 1
9403: PPUSH
9404: LD_VAR 0 7
9408: PPUSH
9409: CALL_OW 505
// if value <= 0 then
9413: LD_VAR 0 7
9417: PUSH
9418: LD_INT 0
9420: LESSEQUAL
9421: IFFALSE 9470
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9423: LD_EXP 39
9427: PUSH
9428: LD_VAR 0 6
9432: ARRAY
9433: PUSH
9434: LD_INT 1
9436: ARRAY
9437: PPUSH
9438: LD_EXP 39
9442: PUSH
9443: LD_VAR 0 6
9447: ARRAY
9448: PUSH
9449: LD_INT 2
9451: ARRAY
9452: PPUSH
9453: CALL_OW 63
// KillUnit ( building ) ;
9457: LD_VAR 0 1
9461: PPUSH
9462: CALL_OW 66
// exit ;
9466: POP
9467: POP
9468: GO 9474
// end ; end ; end ;
9470: GO 9274
9472: POP
9473: POP
// end ;
9474: LD_VAR 0 5
9478: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9479: LD_INT 0
9481: PPUSH
9482: PPUSH
9483: PPUSH
// if mpGameType <> GameTypeFamine then
9484: LD_EXP 1
9488: PUSH
9489: LD_INT 5
9491: NONEQUAL
9492: IFFALSE 9496
// exit ;
9494: GO 9711
// for i := 1 to mpGlobalSibDeposits do
9496: LD_ADDR_VAR 0 6
9500: PUSH
9501: DOUBLE
9502: LD_INT 1
9504: DEC
9505: ST_TO_ADDR
9506: LD_EXP 40
9510: PUSH
9511: FOR_TO
9512: IFFALSE 9709
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9514: LD_EXP 40
9518: PUSH
9519: LD_VAR 0 6
9523: ARRAY
9524: PUSH
9525: LD_INT 1
9527: ARRAY
9528: PPUSH
9529: LD_EXP 40
9533: PUSH
9534: LD_VAR 0 6
9538: ARRAY
9539: PUSH
9540: LD_INT 2
9542: ARRAY
9543: PPUSH
9544: CALL_OW 428
9548: PUSH
9549: LD_VAR 0 1
9553: EQUAL
9554: IFFALSE 9707
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9556: LD_ADDR_VAR 0 7
9560: PUSH
9561: LD_EXP 40
9565: PUSH
9566: LD_VAR 0 6
9570: ARRAY
9571: PUSH
9572: LD_INT 3
9574: ARRAY
9575: ST_TO_ADDR
// value := value - amount ;
9576: LD_ADDR_VAR 0 7
9580: PUSH
9581: LD_VAR 0 7
9585: PUSH
9586: LD_VAR 0 4
9590: MINUS
9591: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9592: LD_ADDR_EXP 40
9596: PUSH
9597: LD_EXP 40
9601: PPUSH
9602: LD_VAR 0 6
9606: PPUSH
9607: LD_EXP 40
9611: PUSH
9612: LD_VAR 0 6
9616: ARRAY
9617: PPUSH
9618: LD_INT 3
9620: PPUSH
9621: LD_VAR 0 7
9625: PPUSH
9626: CALL_OW 1
9630: PPUSH
9631: CALL_OW 1
9635: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9636: LD_VAR 0 1
9640: PPUSH
9641: LD_VAR 0 7
9645: PPUSH
9646: CALL_OW 505
// if value <= 0 then
9650: LD_VAR 0 7
9654: PUSH
9655: LD_INT 0
9657: LESSEQUAL
9658: IFFALSE 9707
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9660: LD_EXP 40
9664: PUSH
9665: LD_VAR 0 6
9669: ARRAY
9670: PUSH
9671: LD_INT 1
9673: ARRAY
9674: PPUSH
9675: LD_EXP 40
9679: PUSH
9680: LD_VAR 0 6
9684: ARRAY
9685: PUSH
9686: LD_INT 2
9688: ARRAY
9689: PPUSH
9690: CALL_OW 63
// KillUnit ( building ) ;
9694: LD_VAR 0 1
9698: PPUSH
9699: CALL_OW 66
// exit ;
9703: POP
9704: POP
9705: GO 9711
// end ; end ; end ;
9707: GO 9511
9709: POP
9710: POP
// end ;
9711: LD_VAR 0 5
9715: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9716: LD_INT 0
9718: PPUSH
9719: PPUSH
// side := GetSide ( factory ) ;
9720: LD_ADDR_VAR 0 7
9724: PUSH
9725: LD_VAR 0 1
9729: PPUSH
9730: CALL_OW 255
9734: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9735: LD_VAR 0 5
9739: PUSH
9740: LD_INT 81
9742: EQUAL
9743: IFFALSE 9781
9745: PUSH
9746: LD_INT 22
9748: PUSH
9749: LD_VAR 0 7
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 34
9760: PUSH
9761: LD_INT 81
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PUSH
9777: LD_INT 0
9779: GREATER
9780: AND
9781: IFFALSE 9814
// begin ComCancel ( factory ) ;
9783: LD_VAR 0 1
9787: PPUSH
9788: CALL_OW 127
// if side = your_side then
9792: LD_VAR 0 7
9796: PUSH
9797: LD_OWVAR 2
9801: EQUAL
9802: IFFALSE 9814
// HintSpec ( VehLimit , 2 ) ;
9804: LD_STRING VehLimit
9806: PPUSH
9807: LD_INT 2
9809: PPUSH
9810: CALL_OW 338
// end ; end ;
9814: LD_VAR 0 6
9818: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9819: LD_INT 0
9821: PPUSH
9822: PPUSH
9823: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9824: LD_VAR 0 1
9828: PPUSH
9829: CALL_OW 264
9833: PUSH
9834: LD_INT 81
9836: EQUAL
9837: IFFALSE 9854
9839: PUSH
9840: LD_VAR 0 1
9844: PPUSH
9845: CALL_OW 263
9849: PUSH
9850: LD_INT 1
9852: EQUAL
9853: AND
9854: IFFALSE 10134
// begin for i := 1 to Count ( minersList ) do
9856: LD_ADDR_VAR 0 6
9860: PUSH
9861: DOUBLE
9862: LD_INT 1
9864: DEC
9865: ST_TO_ADDR
9866: LD_EXP 55
9870: PPUSH
9871: CALL 21354 0 1
9875: PUSH
9876: FOR_TO
9877: IFFALSE 9995
// begin if minersList [ i ] = oldId then
9879: LD_EXP 55
9883: PUSH
9884: LD_VAR 0 6
9888: ARRAY
9889: PUSH
9890: LD_VAR 0 2
9894: EQUAL
9895: IFFALSE 9993
// begin for j := 1 to minerMinesList [ i ] do
9897: LD_ADDR_VAR 0 7
9901: PUSH
9902: DOUBLE
9903: LD_INT 1
9905: DEC
9906: ST_TO_ADDR
9907: LD_EXP 56
9911: PUSH
9912: LD_VAR 0 6
9916: ARRAY
9917: PUSH
9918: FOR_TO
9919: IFFALSE 9969
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9921: LD_EXP 56
9925: PUSH
9926: LD_VAR 0 6
9930: ARRAY
9931: PUSH
9932: LD_VAR 0 7
9936: ARRAY
9937: PUSH
9938: LD_INT 1
9940: ARRAY
9941: PPUSH
9942: LD_EXP 56
9946: PUSH
9947: LD_VAR 0 6
9951: ARRAY
9952: PUSH
9953: LD_VAR 0 7
9957: ARRAY
9958: PUSH
9959: LD_INT 2
9961: ARRAY
9962: PPUSH
9963: CALL_OW 612
9967: GO 9918
9969: POP
9970: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9971: LD_ADDR_EXP 56
9975: PUSH
9976: LD_EXP 56
9980: PPUSH
9981: LD_VAR 0 6
9985: PPUSH
9986: CALL_OW 3
9990: ST_TO_ADDR
// break ;
9991: GO 9995
// end ; end ;
9993: GO 9876
9995: POP
9996: POP
// minersList := minersList diff oldId ;
9997: LD_ADDR_EXP 55
10001: PUSH
10002: LD_EXP 55
10006: PUSH
10007: LD_VAR 0 2
10011: DIFF
10012: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10013: LD_INT 22
10015: PUSH
10016: LD_VAR 0 4
10020: PPUSH
10021: CALL_OW 255
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 34
10032: PUSH
10033: LD_INT 81
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PPUSH
10044: CALL_OW 69
10048: PUSH
10049: LD_INT 1
10051: GREATER
10052: IFFALSE 10079
// begin ComExit ( unit ) ;
10054: LD_VAR 0 4
10058: PPUSH
10059: CALL 57718 0 1
// SetSide ( newId , oldSide ) ;
10063: LD_VAR 0 1
10067: PPUSH
10068: LD_VAR 0 3
10072: PPUSH
10073: CALL_OW 235
// exit ;
10077: GO 10134
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10079: LD_ADDR_EXP 55
10083: PUSH
10084: LD_EXP 55
10088: PPUSH
10089: LD_EXP 55
10093: PUSH
10094: LD_INT 1
10096: PLUS
10097: PPUSH
10098: LD_VAR 0 1
10102: PPUSH
10103: CALL_OW 1
10107: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10108: LD_ADDR_EXP 56
10112: PUSH
10113: LD_EXP 56
10117: PPUSH
10118: LD_EXP 56
10122: PUSH
10123: LD_INT 1
10125: PLUS
10126: PPUSH
10127: EMPTY
10128: PPUSH
10129: CALL_OW 1
10133: ST_TO_ADDR
// end ; end ; end_of_file
10134: LD_VAR 0 5
10138: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
10139: LD_EXP 37
10143: IFFALSE 10482
10145: GO 10147
10147: DISABLE
10148: LD_INT 0
10150: PPUSH
10151: PPUSH
10152: PPUSH
// begin mpKingPoints := [ ] ;
10153: LD_ADDR_EXP 47
10157: PUSH
10158: EMPTY
10159: ST_TO_ADDR
// if mpTeamGame then
10160: LD_EXP 9
10164: IFFALSE 10218
// begin for i := 1 to Count ( mpTeams ) do
10166: LD_ADDR_VAR 0 1
10170: PUSH
10171: DOUBLE
10172: LD_INT 1
10174: DEC
10175: ST_TO_ADDR
10176: LD_EXP 8
10180: PPUSH
10181: CALL 21354 0 1
10185: PUSH
10186: FOR_TO
10187: IFFALSE 10214
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
10189: LD_ADDR_EXP 47
10193: PUSH
10194: LD_EXP 47
10198: PPUSH
10199: LD_VAR 0 1
10203: PPUSH
10204: LD_INT 0
10206: PPUSH
10207: CALL_OW 1
10211: ST_TO_ADDR
10212: GO 10186
10214: POP
10215: POP
// end else
10216: GO 10261
// begin for i := 1 to 8 do
10218: LD_ADDR_VAR 0 1
10222: PUSH
10223: DOUBLE
10224: LD_INT 1
10226: DEC
10227: ST_TO_ADDR
10228: LD_INT 8
10230: PUSH
10231: FOR_TO
10232: IFFALSE 10259
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
10234: LD_ADDR_EXP 47
10238: PUSH
10239: LD_EXP 47
10243: PPUSH
10244: LD_VAR 0 1
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 1
10256: ST_TO_ADDR
10257: GO 10231
10259: POP
10260: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
10261: LD_ADDR_VAR 0 3
10265: PUSH
10266: LD_INT 50
10268: PPUSH
10269: LD_INT 0
10271: PPUSH
10272: CALL_OW 517
10276: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
10277: LD_ADDR_VAR 0 1
10281: PUSH
10282: DOUBLE
10283: LD_INT 1
10285: DEC
10286: ST_TO_ADDR
10287: LD_VAR 0 3
10291: PUSH
10292: LD_INT 1
10294: ARRAY
10295: PUSH
10296: FOR_TO
10297: IFFALSE 10364
// for j := 1 to 8 do
10299: LD_ADDR_VAR 0 2
10303: PUSH
10304: DOUBLE
10305: LD_INT 1
10307: DEC
10308: ST_TO_ADDR
10309: LD_INT 8
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10360
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
10315: LD_VAR 0 3
10319: PUSH
10320: LD_INT 1
10322: ARRAY
10323: PUSH
10324: LD_VAR 0 1
10328: ARRAY
10329: PPUSH
10330: LD_VAR 0 3
10334: PUSH
10335: LD_INT 2
10337: ARRAY
10338: PUSH
10339: LD_VAR 0 1
10343: ARRAY
10344: PPUSH
10345: LD_VAR 0 2
10349: PPUSH
10350: LD_INT 12
10352: NEG
10353: PPUSH
10354: CALL_OW 330
10358: GO 10312
10360: POP
10361: POP
10362: GO 10296
10364: POP
10365: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
10366: LD_EXP 32
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: CALL_OW 424
// UpdateCounter ;
10378: CALL 10986 0 0
// repeat wait ( 0 0$1 ) ;
10382: LD_INT 35
10384: PPUSH
10385: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10389: LD_ADDR_VAR 0 3
10393: PUSH
10394: LD_EXP 32
10398: PPUSH
10399: LD_INT 3
10401: PUSH
10402: LD_INT 57
10404: PUSH
10405: EMPTY
10406: LIST
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 50
10414: PUSH
10415: EMPTY
10416: LIST
10417: PUSH
10418: LD_INT 2
10420: PUSH
10421: LD_INT 30
10423: PUSH
10424: LD_INT 0
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 30
10433: PUSH
10434: LD_INT 1
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: PPUSH
10451: CALL_OW 70
10455: ST_TO_ADDR
// if not tmp then
10456: LD_VAR 0 3
10460: NOT
10461: IFFALSE 10465
// continue ;
10463: GO 10382
// AddPoints ( tmp ) ;
10465: LD_VAR 0 3
10469: PPUSH
10470: CALL 10664 0 1
// UpdateCounter ;
10474: CALL 10986 0 0
// until false ;
10478: LD_INT 0
10480: IFFALSE 10382
// end ;
10482: PPOPN 3
10484: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
10485: LD_EXP 37
10489: IFFALSE 10497
10491: PUSH
10492: LD_EXP 35
10496: AND
10497: IFFALSE 10661
10499: GO 10501
10501: DISABLE
10502: LD_INT 0
10504: PPUSH
10505: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
10506: LD_ADDR_VAR 0 2
10510: PUSH
10511: LD_INT 50
10513: PPUSH
10514: LD_INT 0
10516: PPUSH
10517: CALL_OW 517
10521: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
10522: LD_ADDR_VAR 0 1
10526: PUSH
10527: DOUBLE
10528: LD_INT 1
10530: DEC
10531: ST_TO_ADDR
10532: LD_VAR 0 2
10536: PUSH
10537: LD_INT 1
10539: ARRAY
10540: PUSH
10541: FOR_TO
10542: IFFALSE 10583
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
10544: LD_VAR 0 2
10548: PUSH
10549: LD_INT 1
10551: ARRAY
10552: PUSH
10553: LD_VAR 0 1
10557: ARRAY
10558: PPUSH
10559: LD_VAR 0 2
10563: PUSH
10564: LD_INT 2
10566: ARRAY
10567: PUSH
10568: LD_VAR 0 1
10572: ARRAY
10573: PPUSH
10574: LD_INT 125
10576: PPUSH
10577: CALL_OW 495
10581: GO 10541
10583: POP
10584: POP
// repeat wait ( mpEmissions ) ;
10585: LD_EXP 35
10589: PPUSH
10590: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
10594: LD_ADDR_VAR 0 1
10598: PUSH
10599: DOUBLE
10600: LD_INT 1
10602: DEC
10603: ST_TO_ADDR
10604: LD_VAR 0 2
10608: PUSH
10609: LD_INT 1
10611: ARRAY
10612: PUSH
10613: FOR_TO
10614: IFFALSE 10655
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
10616: LD_VAR 0 2
10620: PUSH
10621: LD_INT 1
10623: ARRAY
10624: PUSH
10625: LD_VAR 0 1
10629: ARRAY
10630: PPUSH
10631: LD_VAR 0 2
10635: PUSH
10636: LD_INT 2
10638: ARRAY
10639: PUSH
10640: LD_VAR 0 1
10644: ARRAY
10645: PPUSH
10646: LD_INT 15
10648: PPUSH
10649: CALL_OW 495
10653: GO 10613
10655: POP
10656: POP
// until false ;
10657: LD_INT 0
10659: IFFALSE 10585
// end ;
10661: PPOPN 2
10663: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
10664: LD_INT 0
10666: PPUSH
10667: PPUSH
10668: PPUSH
10669: PPUSH
10670: PPUSH
// if mpTeamGame then
10671: LD_EXP 9
10675: IFFALSE 10872
// begin first := depots [ 1 ] ;
10677: LD_ADDR_VAR 0 4
10681: PUSH
10682: LD_VAR 0 1
10686: PUSH
10687: LD_INT 1
10689: ARRAY
10690: ST_TO_ADDR
// side := GetSide ( first ) ;
10691: LD_ADDR_VAR 0 6
10695: PUSH
10696: LD_VAR 0 4
10700: PPUSH
10701: CALL_OW 255
10705: ST_TO_ADDR
// for i := 1 to mpTeams do
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: DOUBLE
10712: LD_INT 1
10714: DEC
10715: ST_TO_ADDR
10716: LD_EXP 8
10720: PUSH
10721: FOR_TO
10722: IFFALSE 10756
// if side in mpTeams [ i ] then
10724: LD_VAR 0 6
10728: PUSH
10729: LD_EXP 8
10733: PUSH
10734: LD_VAR 0 3
10738: ARRAY
10739: IN
10740: IFFALSE 10754
// begin team := i ;
10742: LD_ADDR_VAR 0 5
10746: PUSH
10747: LD_VAR 0 3
10751: ST_TO_ADDR
// break ;
10752: GO 10756
// end ;
10754: GO 10721
10756: POP
10757: POP
// if not team then
10758: LD_VAR 0 5
10762: NOT
10763: IFFALSE 10767
// exit ;
10765: GO 10981
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
10767: LD_EXP 32
10771: PPUSH
10772: LD_INT 81
10774: PUSH
10775: LD_VAR 0 6
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PPUSH
10784: CALL_OW 70
10788: IFFALSE 10792
// exit ;
10790: GO 10981
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
10792: LD_ADDR_EXP 47
10796: PUSH
10797: LD_EXP 47
10801: PPUSH
10802: LD_VAR 0 5
10806: PPUSH
10807: LD_EXP 47
10811: PUSH
10812: LD_VAR 0 5
10816: ARRAY
10817: PUSH
10818: LD_INT 1
10820: PLUS
10821: PPUSH
10822: CALL_OW 1
10826: ST_TO_ADDR
// for i in mpTeams [ team ] do
10827: LD_ADDR_VAR 0 3
10831: PUSH
10832: LD_EXP 8
10836: PUSH
10837: LD_VAR 0 5
10841: ARRAY
10842: PUSH
10843: FOR_IN
10844: IFFALSE 10868
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
10846: LD_VAR 0 3
10850: PPUSH
10851: LD_EXP 47
10855: PUSH
10856: LD_VAR 0 5
10860: ARRAY
10861: PPUSH
10862: CALL_OW 506
10866: GO 10843
10868: POP
10869: POP
// end else
10870: GO 10981
// begin first := depots [ 1 ] ;
10872: LD_ADDR_VAR 0 4
10876: PUSH
10877: LD_VAR 0 1
10881: PUSH
10882: LD_INT 1
10884: ARRAY
10885: ST_TO_ADDR
// side := GetSide ( first ) ;
10886: LD_ADDR_VAR 0 6
10890: PUSH
10891: LD_VAR 0 4
10895: PPUSH
10896: CALL_OW 255
10900: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
10901: LD_EXP 32
10905: PPUSH
10906: LD_INT 81
10908: PUSH
10909: LD_VAR 0 6
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 70
10922: IFFALSE 10926
// exit ;
10924: GO 10981
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
10926: LD_ADDR_EXP 47
10930: PUSH
10931: LD_EXP 47
10935: PPUSH
10936: LD_VAR 0 6
10940: PPUSH
10941: LD_EXP 47
10945: PUSH
10946: LD_VAR 0 6
10950: ARRAY
10951: PUSH
10952: LD_INT 1
10954: PLUS
10955: PPUSH
10956: CALL_OW 1
10960: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
10961: LD_VAR 0 6
10965: PPUSH
10966: LD_EXP 47
10970: PUSH
10971: LD_VAR 0 6
10975: ARRAY
10976: PPUSH
10977: CALL_OW 506
// end ; end ;
10981: LD_VAR 0 2
10985: RET
// function UpdateCounter ; var i ; begin
10986: LD_INT 0
10988: PPUSH
10989: PPUSH
// result := [ ] ;
10990: LD_ADDR_VAR 0 1
10994: PUSH
10995: EMPTY
10996: ST_TO_ADDR
// if mpTeamGame then
10997: LD_EXP 9
11001: IFFALSE 11068
// begin for i := 1 to mpTeams do
11003: LD_ADDR_VAR 0 2
11007: PUSH
11008: DOUBLE
11009: LD_INT 1
11011: DEC
11012: ST_TO_ADDR
11013: LD_EXP 8
11017: PUSH
11018: FOR_TO
11019: IFFALSE 11064
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
11021: LD_ADDR_VAR 0 1
11025: PUSH
11026: LD_VAR 0 1
11030: PUSH
11031: LD_STRING #KingoftheHill-Team
11033: PUSH
11034: LD_VAR 0 2
11038: PUSH
11039: LD_EXP 47
11043: PUSH
11044: LD_VAR 0 2
11048: ARRAY
11049: PUSH
11050: LD_EXP 33
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: ADD
11061: ST_TO_ADDR
11062: GO 11018
11064: POP
11065: POP
// end else
11066: GO 11141
// begin for i := 1 to 8 do
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: DOUBLE
11074: LD_INT 1
11076: DEC
11077: ST_TO_ADDR
11078: LD_INT 8
11080: PUSH
11081: FOR_TO
11082: IFFALSE 11139
// if mpSidePositions [ i ] then
11084: LD_EXP 5
11088: PUSH
11089: LD_VAR 0 2
11093: ARRAY
11094: IFFALSE 11137
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
11096: LD_ADDR_VAR 0 1
11100: PUSH
11101: LD_VAR 0 1
11105: PUSH
11106: LD_STRING #KingoftheHill-Player
11108: PUSH
11109: LD_VAR 0 2
11113: PUSH
11114: LD_EXP 47
11118: PUSH
11119: LD_VAR 0 2
11123: ARRAY
11124: PUSH
11125: LD_EXP 33
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: ADD
11136: ST_TO_ADDR
11137: GO 11081
11139: POP
11140: POP
// end ; mpDisplayStrings := result ;
11141: LD_ADDR_EXP 36
11145: PUSH
11146: LD_VAR 0 1
11150: ST_TO_ADDR
// end ;
11151: LD_VAR 0 1
11155: RET
// export function HowMuchPointsKing ( side ) ; begin
11156: LD_INT 0
11158: PPUSH
// result := HowMuchPoints ( side ) ;
11159: LD_ADDR_VAR 0 2
11163: PUSH
11164: LD_VAR 0 1
11168: PPUSH
11169: CALL 11179 0 1
11173: ST_TO_ADDR
// end ;
11174: LD_VAR 0 2
11178: RET
// function HowMuchPoints ( side ) ; var i ; begin
11179: LD_INT 0
11181: PPUSH
11182: PPUSH
// if mpTeamGame then
11183: LD_EXP 9
11187: IFFALSE 11256
// begin for i := 1 to Count ( mpTeams ) do
11189: LD_ADDR_VAR 0 3
11193: PUSH
11194: DOUBLE
11195: LD_INT 1
11197: DEC
11198: ST_TO_ADDR
11199: LD_EXP 8
11203: PPUSH
11204: CALL 21354 0 1
11208: PUSH
11209: FOR_TO
11210: IFFALSE 11252
// begin if side in mpTeams [ i ] then
11212: LD_VAR 0 1
11216: PUSH
11217: LD_EXP 8
11221: PUSH
11222: LD_VAR 0 3
11226: ARRAY
11227: IN
11228: IFFALSE 11250
// begin result := mpKingPoints [ i ] ;
11230: LD_ADDR_VAR 0 2
11234: PUSH
11235: LD_EXP 47
11239: PUSH
11240: LD_VAR 0 3
11244: ARRAY
11245: ST_TO_ADDR
// exit ;
11246: POP
11247: POP
11248: GO 11272
// end ; end ;
11250: GO 11209
11252: POP
11253: POP
// end else
11254: GO 11272
// result := mpKingPoints [ side ] ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_EXP 47
11265: PUSH
11266: LD_VAR 0 1
11270: ARRAY
11271: ST_TO_ADDR
// end ;
11272: LD_VAR 0 2
11276: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
11277: LD_EXP 37
11281: IFFALSE 11289
11283: PUSH
11284: CALL 11701 0 0
11288: AND
11289: IFFALSE 11297
11291: PUSH
11292: LD_OWVAR 4
11296: AND
11297: IFFALSE 11550
11299: GO 11301
11301: DISABLE
11302: LD_INT 0
11304: PPUSH
11305: PPUSH
// begin canWin := false ;
11306: LD_ADDR_VAR 0 2
11310: PUSH
11311: LD_INT 0
11313: ST_TO_ADDR
// if not HasPower ( your_side ) then
11314: LD_OWVAR 2
11318: PPUSH
11319: CALL 11743 0 1
11323: NOT
11324: IFFALSE 11335
// begin Multiplayer_Loose_Message ;
11326: CALL_OW 521
// enable ( mpLose ) ;
11330: LD_INT 102
11332: ENABLE_MARKED
// end else
11333: GO 11550
// begin if not EnemiesInGame then
11335: CALL 11553 0 0
11339: NOT
11340: IFFALSE 11347
// begin enable ( mpWin ) ;
11342: LD_INT 101
11344: ENABLE_MARKED
// exit ;
11345: GO 11550
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
11347: LD_ADDR_VAR 0 2
11351: PUSH
11352: LD_OWVAR 2
11356: PPUSH
11357: CALL 11179 0 1
11361: PUSH
11362: LD_EXP 33
11366: GREATEREQUAL
11367: IFFALSE 11380
11369: PUSH
11370: LD_OWVAR 2
11374: PPUSH
11375: CALL 11743 0 1
11379: AND
11380: ST_TO_ADDR
// for i := 1 to 8 do
11381: LD_ADDR_VAR 0 1
11385: PUSH
11386: DOUBLE
11387: LD_INT 1
11389: DEC
11390: ST_TO_ADDR
11391: LD_INT 8
11393: PUSH
11394: FOR_TO
11395: IFFALSE 11536
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11397: LD_EXP 5
11401: PUSH
11402: LD_VAR 0 1
11406: ARRAY
11407: IFFALSE 11420
11409: PUSH
11410: LD_VAR 0 1
11414: PPUSH
11415: CALL_OW 108
11419: AND
11420: IFFALSE 11434
11422: PUSH
11423: LD_VAR 0 1
11427: PUSH
11428: LD_OWVAR 2
11432: NONEQUAL
11433: AND
11434: IFFALSE 11534
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11436: LD_EXP 6
11440: PUSH
11441: LD_VAR 0 1
11445: ARRAY
11446: NOT
11447: IFTRUE 11495
11449: PUSH
11450: LD_EXP 6
11454: PUSH
11455: LD_VAR 0 1
11459: ARRAY
11460: PUSH
11461: LD_EXP 6
11465: PUSH
11466: LD_OWVAR 2
11470: ARRAY
11471: NONEQUAL
11472: IFFALSE 11494
11474: PUSH
11475: LD_OWVAR 2
11479: PPUSH
11480: LD_VAR 0 1
11484: PPUSH
11485: CALL_OW 81
11489: PUSH
11490: LD_INT 1
11492: NONEQUAL
11493: AND
11494: OR
11495: IFFALSE 11534
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
11497: LD_VAR 0 1
11501: PPUSH
11502: CALL 11179 0 1
11506: PUSH
11507: LD_EXP 33
11511: GREATEREQUAL
11512: IFFALSE 11525
11514: PUSH
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL 11743 0 1
11524: AND
11525: IFFALSE 11534
// begin enable ( mpLose ) ;
11527: LD_INT 102
11529: ENABLE_MARKED
// exit ;
11530: POP
11531: POP
11532: GO 11550
// end ;
11534: GO 11394
11536: POP
11537: POP
// if canWin then
11538: LD_VAR 0 2
11542: IFFALSE 11549
// enable ( mpWin ) else
11544: LD_INT 101
11546: ENABLE_MARKED
11547: GO 11550
// enable ;
11549: ENABLE
// end ; end ;
11550: PPOPN 2
11552: END
// function EnemiesInGame ; var i ; begin
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
// result := false ;
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: LD_INT 0
11564: ST_TO_ADDR
// for i := 1 to 8 do
11565: LD_ADDR_VAR 0 2
11569: PUSH
11570: DOUBLE
11571: LD_INT 1
11573: DEC
11574: ST_TO_ADDR
11575: LD_INT 8
11577: PUSH
11578: FOR_TO
11579: IFFALSE 11694
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
11581: LD_VAR 0 2
11585: PUSH
11586: LD_OWVAR 2
11590: NONEQUAL
11591: IFFALSE 11604
11593: PUSH
11594: LD_VAR 0 2
11598: PPUSH
11599: CALL 11743 0 1
11603: AND
11604: IFFALSE 11617
11606: PUSH
11607: LD_VAR 0 2
11611: PPUSH
11612: CALL_OW 108
11616: AND
11617: IFFALSE 11692
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11619: LD_EXP 6
11623: PUSH
11624: LD_VAR 0 2
11628: ARRAY
11629: NOT
11630: IFTRUE 11678
11632: PUSH
11633: LD_EXP 6
11637: PUSH
11638: LD_VAR 0 2
11642: ARRAY
11643: PUSH
11644: LD_EXP 6
11648: PUSH
11649: LD_OWVAR 2
11653: ARRAY
11654: NONEQUAL
11655: IFFALSE 11677
11657: PUSH
11658: LD_OWVAR 2
11662: PPUSH
11663: LD_VAR 0 2
11667: PPUSH
11668: CALL_OW 81
11672: PUSH
11673: LD_INT 1
11675: NONEQUAL
11676: AND
11677: OR
11678: IFFALSE 11692
// begin result := true ;
11680: LD_ADDR_VAR 0 1
11684: PUSH
11685: LD_INT 1
11687: ST_TO_ADDR
// exit ;
11688: POP
11689: POP
11690: GO 11696
// end ;
11692: GO 11578
11694: POP
11695: POP
// end ;
11696: LD_VAR 0 1
11700: RET
// function CanWinLoose ; begin
11701: LD_INT 0
11703: PPUSH
// result := true ;
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_INT 1
11711: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11712: CALL_OW 531
11716: IFFALSE 11728
11718: PUSH
11719: CALL_OW 519
11723: PUSH
11724: LD_INT 1
11726: GREATER
11727: AND
11728: IFFALSE 11738
// result := false ;
11730: LD_ADDR_VAR 0 1
11734: PUSH
11735: LD_INT 0
11737: ST_TO_ADDR
// end ;
11738: LD_VAR 0 1
11742: RET
// function HasPower ( i ) ; begin
11743: LD_INT 0
11745: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11746: LD_ADDR_VAR 0 2
11750: PUSH
11751: LD_INT 22
11753: PUSH
11754: LD_VAR 0 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 2
11765: PUSH
11766: LD_INT 21
11768: PUSH
11769: LD_INT 1
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 33
11778: PUSH
11779: LD_INT 3
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 33
11788: PUSH
11789: LD_INT 5
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PPUSH
11806: CALL_OW 69
11810: ST_TO_ADDR
// end ; end_of_file
11811: LD_VAR 0 2
11815: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
11816: LD_EXP 37
11820: IFFALSE 11828
11822: PUSH
11823: CALL 12038 0 0
11827: AND
11828: IFFALSE 11836
11830: PUSH
11831: LD_OWVAR 4
11835: AND
11836: IFFALSE 12035
11838: GO 11840
11840: DISABLE
11841: LD_INT 0
11843: PPUSH
11844: PPUSH
// begin canWin := false ;
11845: LD_ADDR_VAR 0 2
11849: PUSH
11850: LD_INT 0
11852: ST_TO_ADDR
// if not HasPower ( your_side ) then
11853: LD_OWVAR 2
11857: PPUSH
11858: CALL 12080 0 1
11862: NOT
11863: IFFALSE 11874
// begin Multiplayer_Loose_Message ;
11865: CALL_OW 521
// enable ( mpLose ) ;
11869: LD_INT 102
11871: ENABLE_MARKED
// end else
11872: GO 12035
// begin canWin := true ;
11874: LD_ADDR_VAR 0 2
11878: PUSH
11879: LD_INT 1
11881: ST_TO_ADDR
// for i := 1 to 8 do
11882: LD_ADDR_VAR 0 1
11886: PUSH
11887: DOUBLE
11888: LD_INT 1
11890: DEC
11891: ST_TO_ADDR
11892: LD_INT 8
11894: PUSH
11895: FOR_TO
11896: IFFALSE 12021
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11898: LD_EXP 5
11902: PUSH
11903: LD_VAR 0 1
11907: ARRAY
11908: IFFALSE 11921
11910: PUSH
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL_OW 108
11920: AND
11921: IFFALSE 11935
11923: PUSH
11924: LD_VAR 0 1
11928: PUSH
11929: LD_OWVAR 2
11933: NONEQUAL
11934: AND
11935: IFFALSE 12019
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11937: LD_EXP 6
11941: PUSH
11942: LD_VAR 0 1
11946: ARRAY
11947: NOT
11948: IFTRUE 11996
11950: PUSH
11951: LD_EXP 6
11955: PUSH
11956: LD_VAR 0 1
11960: ARRAY
11961: PUSH
11962: LD_EXP 6
11966: PUSH
11967: LD_OWVAR 2
11971: ARRAY
11972: NONEQUAL
11973: IFFALSE 11995
11975: PUSH
11976: LD_OWVAR 2
11980: PPUSH
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 81
11990: PUSH
11991: LD_INT 1
11993: NONEQUAL
11994: AND
11995: OR
11996: IFFALSE 12019
// if HasPower ( i ) then
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL 12080 0 1
12007: IFFALSE 12019
// begin canWin := false ;
12009: LD_ADDR_VAR 0 2
12013: PUSH
12014: LD_INT 0
12016: ST_TO_ADDR
// break ;
12017: GO 12021
// end ;
12019: GO 11895
12021: POP
12022: POP
// if canWin then
12023: LD_VAR 0 2
12027: IFFALSE 12034
// enable ( mpWin ) else
12029: LD_INT 101
12031: ENABLE_MARKED
12032: GO 12035
// enable ;
12034: ENABLE
// end ; end ;
12035: PPOPN 2
12037: END
// function CanWinLoose ; begin
12038: LD_INT 0
12040: PPUSH
// result := true ;
12041: LD_ADDR_VAR 0 1
12045: PUSH
12046: LD_INT 1
12048: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12049: CALL_OW 531
12053: IFFALSE 12065
12055: PUSH
12056: CALL_OW 519
12060: PUSH
12061: LD_INT 1
12063: GREATER
12064: AND
12065: IFFALSE 12075
// result := false ;
12067: LD_ADDR_VAR 0 1
12071: PUSH
12072: LD_INT 0
12074: ST_TO_ADDR
// end ;
12075: LD_VAR 0 1
12079: RET
// function HasPower ( i ) ; begin
12080: LD_INT 0
12082: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12083: LD_ADDR_VAR 0 2
12087: PUSH
12088: LD_INT 22
12090: PUSH
12091: LD_VAR 0 1
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 2
12102: PUSH
12103: LD_INT 21
12105: PUSH
12106: LD_INT 1
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 33
12115: PUSH
12116: LD_INT 3
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 33
12125: PUSH
12126: LD_INT 5
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: ST_TO_ADDR
// end ; end_of_file
12148: LD_VAR 0 2
12152: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
12153: LD_EXP 37
12157: IFFALSE 12200
12159: GO 12161
12161: DISABLE
12162: LD_INT 0
12164: PPUSH
// begin for i := 1 to 8 do
12165: LD_ADDR_VAR 0 1
12169: PUSH
12170: DOUBLE
12171: LD_INT 1
12173: DEC
12174: ST_TO_ADDR
12175: LD_INT 8
12177: PUSH
12178: FOR_TO
12179: IFFALSE 12198
// SetRestrict ( b_depot , i , state_disabled ) ;
12181: LD_INT 0
12183: PPUSH
12184: LD_VAR 0 1
12188: PPUSH
12189: LD_INT 0
12191: PPUSH
12192: CALL_OW 324
12196: GO 12178
12198: POP
12199: POP
// end ;
12200: PPOPN 1
12202: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
12203: LD_EXP 37
12207: IFFALSE 12215
12209: PUSH
12210: CALL 12425 0 0
12214: AND
12215: IFFALSE 12223
12217: PUSH
12218: LD_OWVAR 4
12222: AND
12223: IFFALSE 12422
12225: GO 12227
12227: DISABLE
12228: LD_INT 0
12230: PPUSH
12231: PPUSH
// begin canWin := false ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 0
12239: ST_TO_ADDR
// if not HasPower ( your_side ) then
12240: LD_OWVAR 2
12244: PPUSH
12245: CALL 12467 0 1
12249: NOT
12250: IFFALSE 12261
// begin Multiplayer_Loose_Message ;
12252: CALL_OW 521
// enable ( mpLose ) ;
12256: LD_INT 102
12258: ENABLE_MARKED
// end else
12259: GO 12422
// begin canWin := true ;
12261: LD_ADDR_VAR 0 2
12265: PUSH
12266: LD_INT 1
12268: ST_TO_ADDR
// for i := 1 to 8 do
12269: LD_ADDR_VAR 0 1
12273: PUSH
12274: DOUBLE
12275: LD_INT 1
12277: DEC
12278: ST_TO_ADDR
12279: LD_INT 8
12281: PUSH
12282: FOR_TO
12283: IFFALSE 12408
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12285: LD_EXP 5
12289: PUSH
12290: LD_VAR 0 1
12294: ARRAY
12295: IFFALSE 12308
12297: PUSH
12298: LD_VAR 0 1
12302: PPUSH
12303: CALL_OW 108
12307: AND
12308: IFFALSE 12322
12310: PUSH
12311: LD_VAR 0 1
12315: PUSH
12316: LD_OWVAR 2
12320: NONEQUAL
12321: AND
12322: IFFALSE 12406
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12324: LD_EXP 6
12328: PUSH
12329: LD_VAR 0 1
12333: ARRAY
12334: NOT
12335: IFTRUE 12383
12337: PUSH
12338: LD_EXP 6
12342: PUSH
12343: LD_VAR 0 1
12347: ARRAY
12348: PUSH
12349: LD_EXP 6
12353: PUSH
12354: LD_OWVAR 2
12358: ARRAY
12359: NONEQUAL
12360: IFFALSE 12382
12362: PUSH
12363: LD_OWVAR 2
12367: PPUSH
12368: LD_VAR 0 1
12372: PPUSH
12373: CALL_OW 81
12377: PUSH
12378: LD_INT 1
12380: NONEQUAL
12381: AND
12382: OR
12383: IFFALSE 12406
// if HasPower ( i ) then
12385: LD_VAR 0 1
12389: PPUSH
12390: CALL 12467 0 1
12394: IFFALSE 12406
// begin canWin := false ;
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: LD_INT 0
12403: ST_TO_ADDR
// break ;
12404: GO 12408
// end ;
12406: GO 12282
12408: POP
12409: POP
// if canWin then
12410: LD_VAR 0 2
12414: IFFALSE 12421
// enable ( mpWin ) else
12416: LD_INT 101
12418: ENABLE_MARKED
12419: GO 12422
// enable ;
12421: ENABLE
// end ; end ;
12422: PPOPN 2
12424: END
// function CanWinLoose ; begin
12425: LD_INT 0
12427: PPUSH
// result := true ;
12428: LD_ADDR_VAR 0 1
12432: PUSH
12433: LD_INT 1
12435: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12436: CALL_OW 531
12440: IFFALSE 12452
12442: PUSH
12443: CALL_OW 519
12447: PUSH
12448: LD_INT 1
12450: GREATER
12451: AND
12452: IFFALSE 12462
// result := false ;
12454: LD_ADDR_VAR 0 1
12458: PUSH
12459: LD_INT 0
12461: ST_TO_ADDR
// end ;
12462: LD_VAR 0 1
12466: RET
// function HasPower ( i ) ; begin
12467: LD_INT 0
12469: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
12470: LD_INT 22
12472: PUSH
12473: LD_VAR 0 1
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 30
12487: PUSH
12488: LD_INT 0
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 30
12497: PUSH
12498: LD_INT 1
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: NOT
12519: IFFALSE 12523
// exit ;
12521: GO 12588
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12523: LD_ADDR_VAR 0 2
12527: PUSH
12528: LD_INT 22
12530: PUSH
12531: LD_VAR 0 1
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: LD_INT 21
12545: PUSH
12546: LD_INT 1
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: LD_INT 33
12555: PUSH
12556: LD_INT 3
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: LD_INT 33
12565: PUSH
12566: LD_INT 5
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PPUSH
12583: CALL_OW 69
12587: ST_TO_ADDR
// end ; end_of_file
12588: LD_VAR 0 2
12592: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
12593: LD_VAR 0 1
12597: PUSH
12598: LD_INT 200
12600: DOUBLE
12601: GREATEREQUAL
12602: IFFALSE 12610
12604: LD_INT 299
12606: DOUBLE
12607: LESSEQUAL
12608: IFTRUE 12612
12610: GO 12644
12612: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
12613: LD_VAR 0 1
12617: PPUSH
12618: LD_VAR 0 2
12622: PPUSH
12623: LD_VAR 0 3
12627: PPUSH
12628: LD_VAR 0 4
12632: PPUSH
12633: LD_VAR 0 5
12637: PPUSH
12638: CALL 13506 0 5
12642: GO 12721
12644: LD_INT 300
12646: DOUBLE
12647: GREATEREQUAL
12648: IFFALSE 12656
12650: LD_INT 399
12652: DOUBLE
12653: LESSEQUAL
12654: IFTRUE 12658
12656: GO 12720
12658: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
12659: LD_VAR 0 1
12663: PPUSH
12664: LD_VAR 0 2
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_VAR 0 4
12678: PPUSH
12679: LD_VAR 0 5
12683: PPUSH
12684: LD_VAR 0 6
12688: PPUSH
12689: LD_VAR 0 7
12693: PPUSH
12694: LD_VAR 0 8
12698: PPUSH
12699: LD_VAR 0 9
12703: PPUSH
12704: LD_VAR 0 10
12708: PPUSH
12709: LD_VAR 0 11
12713: PPUSH
12714: CALL 63371 0 11
12718: GO 12721
12720: POP
// end ;
12721: PPOPN 11
12723: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
12724: LD_VAR 0 1
12728: PPUSH
12729: LD_VAR 0 2
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: LD_VAR 0 4
12743: PPUSH
12744: LD_VAR 0 5
12748: PPUSH
12749: CALL 12806 0 5
// end ; end_of_file
12753: PPOPN 5
12755: END
// export function SOS_UnitDestroyed ( un ) ; begin
12756: LD_INT 0
12758: PPUSH
// ComRadiation ( un ) ;
12759: LD_VAR 0 1
12763: PPUSH
12764: CALL 13926 0 1
// end ;
12768: LD_VAR 0 2
12772: RET
// export function SOS_UnitKamikazed ( un ) ; begin
12773: LD_INT 0
12775: PPUSH
// ComRadiation ( un ) ;
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL 13926 0 1
// end ;
12785: LD_VAR 0 2
12789: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
12790: LD_INT 0
12792: PPUSH
// end ;
12793: LD_VAR 0 4
12797: RET
// export function SOS_Command ( cmd ) ; begin
12798: LD_INT 0
12800: PPUSH
// end ;
12801: LD_VAR 0 2
12805: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
12806: LD_INT 0
12808: PPUSH
// end ;
12809: LD_VAR 0 6
12813: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
12814: LD_INT 0
12816: PPUSH
12817: PPUSH
12818: PPUSH
12819: PPUSH
12820: PPUSH
// if not vehicle or not factory then
12821: LD_VAR 0 1
12825: NOT
12826: IFTRUE 12835
12828: PUSH
12829: LD_VAR 0 2
12833: NOT
12834: OR
12835: IFFALSE 12839
// exit ;
12837: GO 13501
// weapon := GetWeapon ( vehicle ) ;
12839: LD_ADDR_VAR 0 7
12843: PUSH
12844: LD_VAR 0 1
12848: PPUSH
12849: CALL_OW 264
12853: ST_TO_ADDR
// if weapon = ar_miner then
12854: LD_VAR 0 7
12858: PUSH
12859: LD_INT 81
12861: EQUAL
12862: IFFALSE 12919
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
12864: LD_ADDR_EXP 55
12868: PUSH
12869: LD_EXP 55
12873: PPUSH
12874: LD_EXP 55
12878: PUSH
12879: LD_INT 1
12881: PLUS
12882: PPUSH
12883: LD_VAR 0 1
12887: PPUSH
12888: CALL_OW 1
12892: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12893: LD_ADDR_EXP 56
12897: PUSH
12898: LD_EXP 56
12902: PPUSH
12903: LD_EXP 56
12907: PUSH
12908: LD_INT 1
12910: PLUS
12911: PPUSH
12912: EMPTY
12913: PPUSH
12914: CALL_OW 1
12918: ST_TO_ADDR
// end ; if not factoryWaypoints then
12919: LD_EXP 58
12923: NOT
12924: IFFALSE 12928
// exit ;
12926: GO 13501
// for i := 1 to Count ( factoryWaypoints ) do
12928: LD_ADDR_VAR 0 4
12932: PUSH
12933: DOUBLE
12934: LD_INT 1
12936: DEC
12937: ST_TO_ADDR
12938: LD_EXP 58
12942: PPUSH
12943: CALL 21354 0 1
12947: PUSH
12948: FOR_TO
12949: IFFALSE 13499
// if factoryWaypoints [ i ] [ 2 ] = factory then
12951: LD_EXP 58
12955: PUSH
12956: LD_VAR 0 4
12960: ARRAY
12961: PUSH
12962: LD_INT 2
12964: ARRAY
12965: PUSH
12966: LD_VAR 0 2
12970: EQUAL
12971: IFFALSE 13497
// begin if GetControl ( vehicle ) = control_manual then
12973: LD_VAR 0 1
12977: PPUSH
12978: CALL_OW 263
12982: PUSH
12983: LD_INT 1
12985: EQUAL
12986: IFFALSE 13350
// begin driver := IsDrivenBy ( vehicle ) ;
12988: LD_ADDR_VAR 0 5
12992: PUSH
12993: LD_VAR 0 1
12997: PPUSH
12998: CALL_OW 311
13002: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
13003: LD_VAR 0 5
13007: PUSH
13008: LD_EXP 59
13012: IN
13013: IFTRUE 13027
13015: PUSH
13016: LD_VAR 0 1
13020: PUSH
13021: LD_EXP 59
13025: IN
13026: OR
13027: IFFALSE 13033
// exit ;
13029: POP
13030: POP
13031: GO 13501
// if not HasTask ( driver ) then
13033: LD_VAR 0 5
13037: PPUSH
13038: CALL_OW 314
13042: NOT
13043: IFFALSE 13348
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
13045: LD_ADDR_EXP 59
13049: PUSH
13050: LD_EXP 59
13054: PPUSH
13055: LD_VAR 0 5
13059: PPUSH
13060: CALL 57320 0 2
13064: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
13065: LD_ADDR_EXP 59
13069: PUSH
13070: LD_EXP 59
13074: PPUSH
13075: LD_VAR 0 1
13079: PPUSH
13080: CALL 57320 0 2
13084: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13085: LD_ADDR_VAR 0 6
13089: PUSH
13090: LD_EXP 58
13094: PUSH
13095: LD_VAR 0 4
13099: ARRAY
13100: PUSH
13101: LD_INT 3
13103: ARRAY
13104: PPUSH
13105: LD_EXP 58
13109: PUSH
13110: LD_VAR 0 4
13114: ARRAY
13115: PUSH
13116: LD_INT 4
13118: ARRAY
13119: PPUSH
13120: CALL_OW 428
13124: ST_TO_ADDR
// if hex then
13125: LD_VAR 0 6
13129: IFFALSE 13147
// ComMoveUnit ( driver , hex ) else
13131: LD_VAR 0 5
13135: PPUSH
13136: LD_VAR 0 6
13140: PPUSH
13141: CALL_OW 112
13145: GO 13231
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
13147: LD_VAR 0 1
13151: PPUSH
13152: LD_EXP 58
13156: PUSH
13157: LD_VAR 0 4
13161: ARRAY
13162: PUSH
13163: LD_INT 3
13165: ARRAY
13166: PPUSH
13167: LD_EXP 58
13171: PUSH
13172: LD_VAR 0 4
13176: ARRAY
13177: PUSH
13178: LD_INT 4
13180: ARRAY
13181: PPUSH
13182: CALL_OW 297
13186: PUSH
13187: LD_INT 0
13189: GREATER
13190: IFFALSE 13231
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13192: LD_VAR 0 5
13196: PPUSH
13197: LD_EXP 58
13201: PUSH
13202: LD_VAR 0 4
13206: ARRAY
13207: PUSH
13208: LD_INT 3
13210: ARRAY
13211: PPUSH
13212: LD_EXP 58
13216: PUSH
13217: LD_VAR 0 4
13221: ARRAY
13222: PUSH
13223: LD_INT 4
13225: ARRAY
13226: PPUSH
13227: CALL_OW 111
// AddComExitVehicle ( driver ) ;
13231: LD_VAR 0 5
13235: PPUSH
13236: CALL_OW 181
// if Multiplayer then
13240: LD_OWVAR 4
13244: IFFALSE 13293
// begin repeat wait ( 10 ) ;
13246: LD_INT 10
13248: PPUSH
13249: CALL_OW 67
// until not IsInUnit ( driver ) ;
13253: LD_VAR 0 5
13257: PPUSH
13258: CALL_OW 310
13262: NOT
13263: IFFALSE 13246
// if not HasTask ( driver ) then
13265: LD_VAR 0 5
13269: PPUSH
13270: CALL_OW 314
13274: NOT
13275: IFFALSE 13291
// ComEnterUnit ( driver , factory ) ;
13277: LD_VAR 0 5
13281: PPUSH
13282: LD_VAR 0 2
13286: PPUSH
13287: CALL_OW 120
// end else
13291: GO 13307
// AddComEnterUnit ( driver , factory ) ;
13293: LD_VAR 0 5
13297: PPUSH
13298: LD_VAR 0 2
13302: PPUSH
13303: CALL_OW 180
// wait ( 0 0$1 ) ;
13307: LD_INT 35
13309: PPUSH
13310: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
13314: LD_ADDR_EXP 59
13318: PUSH
13319: LD_EXP 59
13323: PUSH
13324: LD_VAR 0 5
13328: DIFF
13329: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
13330: LD_ADDR_EXP 59
13334: PUSH
13335: LD_EXP 59
13339: PUSH
13340: LD_VAR 0 1
13344: DIFF
13345: ST_TO_ADDR
// break ;
13346: GO 13499
// end ; end else
13348: GO 13497
// if GetControl ( vehicle ) = control_remote then
13350: LD_VAR 0 1
13354: PPUSH
13355: CALL_OW 263
13359: PUSH
13360: LD_INT 2
13362: EQUAL
13363: IFFALSE 13449
// begin wait ( 0 0$2 ) ;
13365: LD_INT 70
13367: PPUSH
13368: CALL_OW 67
// repeat wait ( 10 ) ;
13372: LD_INT 10
13374: PPUSH
13375: CALL_OW 67
// Connect ( vehicle ) ;
13379: LD_VAR 0 1
13383: PPUSH
13384: CALL 27632 0 1
// until IsControledBy ( vehicle ) ;
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 312
13397: IFFALSE 13372
// wait ( 10 ) ;
13399: LD_INT 10
13401: PPUSH
13402: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13406: LD_VAR 0 1
13410: PPUSH
13411: LD_EXP 58
13415: PUSH
13416: LD_VAR 0 4
13420: ARRAY
13421: PUSH
13422: LD_INT 3
13424: ARRAY
13425: PPUSH
13426: LD_EXP 58
13430: PUSH
13431: LD_VAR 0 4
13435: ARRAY
13436: PUSH
13437: LD_INT 4
13439: ARRAY
13440: PPUSH
13441: CALL_OW 111
// break ;
13445: GO 13499
// end else
13447: GO 13497
// begin wait ( 0 0$3 ) ;
13449: LD_INT 105
13451: PPUSH
13452: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13456: LD_VAR 0 1
13460: PPUSH
13461: LD_EXP 58
13465: PUSH
13466: LD_VAR 0 4
13470: ARRAY
13471: PUSH
13472: LD_INT 3
13474: ARRAY
13475: PPUSH
13476: LD_EXP 58
13480: PUSH
13481: LD_VAR 0 4
13485: ARRAY
13486: PUSH
13487: LD_INT 4
13489: ARRAY
13490: PPUSH
13491: CALL_OW 111
// break ;
13495: GO 13499
// end ; end ;
13497: GO 12948
13499: POP
13500: POP
// end ;
13501: LD_VAR 0 3
13505: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
13506: LD_INT 0
13508: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
13509: LD_VAR 0 1
13513: PUSH
13514: LD_INT 250
13516: EQUAL
13517: IFFALSE 13534
13519: PUSH
13520: LD_VAR 0 2
13524: PPUSH
13525: CALL_OW 264
13529: PUSH
13530: LD_INT 81
13532: EQUAL
13533: AND
13534: IFFALSE 13555
// MinerPlaceMine ( unit , x , y ) ;
13536: LD_VAR 0 2
13540: PPUSH
13541: LD_VAR 0 4
13545: PPUSH
13546: LD_VAR 0 5
13550: PPUSH
13551: CALL 16836 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
13555: LD_VAR 0 1
13559: PUSH
13560: LD_INT 251
13562: EQUAL
13563: IFFALSE 13580
13565: PUSH
13566: LD_VAR 0 2
13570: PPUSH
13571: CALL_OW 264
13575: PUSH
13576: LD_INT 81
13578: EQUAL
13579: AND
13580: IFFALSE 13601
// MinerDetonateMine ( unit , x , y ) ;
13582: LD_VAR 0 2
13586: PPUSH
13587: LD_VAR 0 4
13591: PPUSH
13592: LD_VAR 0 5
13596: PPUSH
13597: CALL 17243 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
13601: LD_VAR 0 1
13605: PUSH
13606: LD_INT 252
13608: EQUAL
13609: IFFALSE 13626
13611: PUSH
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 264
13621: PUSH
13622: LD_INT 81
13624: EQUAL
13625: AND
13626: IFFALSE 13647
// MinerCreateMinefield ( unit , x , y ) ;
13628: LD_VAR 0 2
13632: PPUSH
13633: LD_VAR 0 4
13637: PPUSH
13638: LD_VAR 0 5
13642: PPUSH
13643: CALL 17475 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
13647: LD_VAR 0 1
13651: PUSH
13652: LD_INT 253
13654: EQUAL
13655: IFFALSE 13672
13657: PUSH
13658: LD_VAR 0 2
13662: PPUSH
13663: CALL_OW 257
13667: PUSH
13668: LD_INT 5
13670: EQUAL
13671: AND
13672: IFFALSE 13693
// ComBinocular ( unit , x , y ) ;
13674: LD_VAR 0 2
13678: PPUSH
13679: LD_VAR 0 4
13683: PPUSH
13684: LD_VAR 0 5
13688: PPUSH
13689: CALL 17850 0 3
// if selectedUnit then
13693: LD_VAR 0 3
13697: IFFALSE 13757
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 254
13706: EQUAL
13707: IFFALSE 13724
13709: PUSH
13710: LD_VAR 0 2
13714: PPUSH
13715: CALL_OW 264
13719: PUSH
13720: LD_INT 99
13722: EQUAL
13723: AND
13724: IFFALSE 13741
13726: PUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: CALL_OW 263
13736: PUSH
13737: LD_INT 3
13739: EQUAL
13740: AND
13741: IFFALSE 13757
// HackDestroyVehicle ( unit , selectedUnit ) ;
13743: LD_VAR 0 2
13747: PPUSH
13748: LD_VAR 0 3
13752: PPUSH
13753: CALL 16047 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
13757: LD_VAR 0 1
13761: PUSH
13762: LD_INT 255
13764: EQUAL
13765: IFFALSE 13789
13767: PUSH
13768: LD_VAR 0 2
13772: PPUSH
13773: CALL_OW 264
13777: PUSH
13778: LD_INT 14
13780: PUSH
13781: LD_INT 53
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: IN
13788: AND
13789: IFFALSE 13807
13791: PUSH
13792: LD_VAR 0 4
13796: PPUSH
13797: LD_VAR 0 5
13801: PPUSH
13802: CALL_OW 488
13806: AND
13807: IFFALSE 13831
// CutTreeXYR ( unit , x , y , 12 ) ;
13809: LD_VAR 0 2
13813: PPUSH
13814: LD_VAR 0 4
13818: PPUSH
13819: LD_VAR 0 5
13823: PPUSH
13824: LD_INT 12
13826: PPUSH
13827: CALL 14022 0 4
// if cmd = 256 then
13831: LD_VAR 0 1
13835: PUSH
13836: LD_INT 256
13838: EQUAL
13839: IFFALSE 13860
// SetFactoryWaypoint ( unit , x , y ) ;
13841: LD_VAR 0 2
13845: PPUSH
13846: LD_VAR 0 4
13850: PPUSH
13851: LD_VAR 0 5
13855: PPUSH
13856: CALL 63379 0 3
// if cmd = 257 then
13860: LD_VAR 0 1
13864: PUSH
13865: LD_INT 257
13867: EQUAL
13868: IFFALSE 13889
// SetWarehouseGatheringPoint ( unit , x , y ) ;
13870: LD_VAR 0 2
13874: PPUSH
13875: LD_VAR 0 4
13879: PPUSH
13880: LD_VAR 0 5
13884: PPUSH
13885: CALL 63875 0 3
// if cmd = 258 then
13889: LD_VAR 0 1
13893: PUSH
13894: LD_INT 258
13896: EQUAL
13897: IFFALSE 13921
// BurnTreeXYR ( unit , x , y , 8 ) ;
13899: LD_VAR 0 2
13903: PPUSH
13904: LD_VAR 0 4
13908: PPUSH
13909: LD_VAR 0 5
13913: PPUSH
13914: LD_INT 8
13916: PPUSH
13917: CALL 14422 0 4
// end ;
13921: LD_VAR 0 6
13925: RET
// export function ComRadiation ( un ) ; var eff ; begin
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
13930: LD_VAR 0 1
13934: PPUSH
13935: CALL_OW 264
13939: PUSH
13940: LD_INT 91
13942: NONEQUAL
13943: IFFALSE 13947
// exit ;
13945: GO 14017
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13947: LD_INT 68
13949: PPUSH
13950: LD_VAR 0 1
13954: PPUSH
13955: CALL_OW 255
13959: PPUSH
13960: CALL_OW 321
13964: PUSH
13965: LD_INT 2
13967: EQUAL
13968: IFFALSE 13980
// eff := 50 else
13970: LD_ADDR_VAR 0 3
13974: PUSH
13975: LD_INT 50
13977: ST_TO_ADDR
13978: GO 13988
// eff := 25 ;
13980: LD_ADDR_VAR 0 3
13984: PUSH
13985: LD_INT 25
13987: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13988: LD_VAR 0 1
13992: PPUSH
13993: CALL_OW 250
13997: PPUSH
13998: LD_VAR 0 1
14002: PPUSH
14003: CALL_OW 251
14007: PPUSH
14008: LD_VAR 0 3
14012: PPUSH
14013: CALL_OW 495
// end ;
14017: LD_VAR 0 2
14021: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
14022: LD_INT 0
14024: PPUSH
14025: PPUSH
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
14030: PPUSH
14031: PPUSH
14032: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
14033: LD_VAR 0 1
14037: PPUSH
14038: CALL_OW 302
14042: NOT
14043: IFTRUE 14062
14045: PUSH
14046: LD_VAR 0 2
14050: PPUSH
14051: LD_VAR 0 3
14055: PPUSH
14056: CALL_OW 488
14060: NOT
14061: OR
14062: IFTRUE 14071
14064: PUSH
14065: LD_VAR 0 4
14069: NOT
14070: OR
14071: IFFALSE 14075
// exit ;
14073: GO 14417
// list := [ ] ;
14075: LD_ADDR_VAR 0 13
14079: PUSH
14080: EMPTY
14081: ST_TO_ADDR
// if x - r < 0 then
14082: LD_VAR 0 2
14086: PUSH
14087: LD_VAR 0 4
14091: MINUS
14092: PUSH
14093: LD_INT 0
14095: LESS
14096: IFFALSE 14108
// min_x := 0 else
14098: LD_ADDR_VAR 0 7
14102: PUSH
14103: LD_INT 0
14105: ST_TO_ADDR
14106: GO 14124
// min_x := x - r ;
14108: LD_ADDR_VAR 0 7
14112: PUSH
14113: LD_VAR 0 2
14117: PUSH
14118: LD_VAR 0 4
14122: MINUS
14123: ST_TO_ADDR
// if y - r < 0 then
14124: LD_VAR 0 3
14128: PUSH
14129: LD_VAR 0 4
14133: MINUS
14134: PUSH
14135: LD_INT 0
14137: LESS
14138: IFFALSE 14150
// min_y := 0 else
14140: LD_ADDR_VAR 0 8
14144: PUSH
14145: LD_INT 0
14147: ST_TO_ADDR
14148: GO 14166
// min_y := y - r ;
14150: LD_ADDR_VAR 0 8
14154: PUSH
14155: LD_VAR 0 3
14159: PUSH
14160: LD_VAR 0 4
14164: MINUS
14165: ST_TO_ADDR
// max_x := x + r ;
14166: LD_ADDR_VAR 0 9
14170: PUSH
14171: LD_VAR 0 2
14175: PUSH
14176: LD_VAR 0 4
14180: PLUS
14181: ST_TO_ADDR
// max_y := y + r ;
14182: LD_ADDR_VAR 0 10
14186: PUSH
14187: LD_VAR 0 3
14191: PUSH
14192: LD_VAR 0 4
14196: PLUS
14197: ST_TO_ADDR
// for _x = min_x to max_x do
14198: LD_ADDR_VAR 0 11
14202: PUSH
14203: DOUBLE
14204: LD_VAR 0 7
14208: DEC
14209: ST_TO_ADDR
14210: LD_VAR 0 9
14214: PUSH
14215: FOR_TO
14216: IFFALSE 14335
// for _y = min_y to max_y do
14218: LD_ADDR_VAR 0 12
14222: PUSH
14223: DOUBLE
14224: LD_VAR 0 8
14228: DEC
14229: ST_TO_ADDR
14230: LD_VAR 0 10
14234: PUSH
14235: FOR_TO
14236: IFFALSE 14331
// begin if not ValidHex ( _x , _y ) then
14238: LD_VAR 0 11
14242: PPUSH
14243: LD_VAR 0 12
14247: PPUSH
14248: CALL_OW 488
14252: NOT
14253: IFFALSE 14257
// continue ;
14255: GO 14235
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14257: LD_VAR 0 11
14261: PPUSH
14262: LD_VAR 0 12
14266: PPUSH
14267: CALL_OW 351
14271: IFFALSE 14289
14273: PUSH
14274: LD_VAR 0 11
14278: PPUSH
14279: LD_VAR 0 12
14283: PPUSH
14284: CALL_OW 554
14288: AND
14289: IFFALSE 14329
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14291: LD_ADDR_VAR 0 13
14295: PUSH
14296: LD_VAR 0 13
14300: PPUSH
14301: LD_VAR 0 13
14305: PUSH
14306: LD_INT 1
14308: PLUS
14309: PPUSH
14310: LD_VAR 0 11
14314: PUSH
14315: LD_VAR 0 12
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 2
14328: ST_TO_ADDR
// end ;
14329: GO 14235
14331: POP
14332: POP
14333: GO 14215
14335: POP
14336: POP
// if not list then
14337: LD_VAR 0 13
14341: NOT
14342: IFFALSE 14346
// exit ;
14344: GO 14417
// for i in list do
14346: LD_ADDR_VAR 0 6
14350: PUSH
14351: LD_VAR 0 13
14355: PUSH
14356: FOR_IN
14357: IFFALSE 14415
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14359: LD_VAR 0 1
14363: PPUSH
14364: LD_STRING M
14366: PUSH
14367: LD_VAR 0 6
14371: PUSH
14372: LD_INT 1
14374: ARRAY
14375: PUSH
14376: LD_VAR 0 6
14380: PUSH
14381: LD_INT 2
14383: ARRAY
14384: PUSH
14385: LD_INT 0
14387: PUSH
14388: LD_INT 0
14390: PUSH
14391: LD_INT 0
14393: PUSH
14394: LD_INT 0
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: PPUSH
14409: CALL_OW 447
14413: GO 14356
14415: POP
14416: POP
// end ;
14417: LD_VAR 0 5
14421: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
14422: LD_INT 0
14424: PPUSH
14425: PPUSH
14426: PPUSH
14427: PPUSH
14428: PPUSH
14429: PPUSH
14430: PPUSH
14431: PPUSH
14432: PPUSH
14433: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
14434: LD_VAR 0 1
14438: PPUSH
14439: CALL_OW 302
14443: NOT
14444: IFTRUE 14463
14446: PUSH
14447: LD_VAR 0 2
14451: PPUSH
14452: LD_VAR 0 3
14456: PPUSH
14457: CALL_OW 488
14461: NOT
14462: OR
14463: IFTRUE 14472
14465: PUSH
14466: LD_VAR 0 4
14470: NOT
14471: OR
14472: IFFALSE 14476
// exit ;
14474: GO 14993
// list := [ ] ;
14476: LD_ADDR_VAR 0 13
14480: PUSH
14481: EMPTY
14482: ST_TO_ADDR
// if x - r < 0 then
14483: LD_VAR 0 2
14487: PUSH
14488: LD_VAR 0 4
14492: MINUS
14493: PUSH
14494: LD_INT 0
14496: LESS
14497: IFFALSE 14509
// min_x := 0 else
14499: LD_ADDR_VAR 0 7
14503: PUSH
14504: LD_INT 0
14506: ST_TO_ADDR
14507: GO 14525
// min_x := x - r ;
14509: LD_ADDR_VAR 0 7
14513: PUSH
14514: LD_VAR 0 2
14518: PUSH
14519: LD_VAR 0 4
14523: MINUS
14524: ST_TO_ADDR
// if y - r < 0 then
14525: LD_VAR 0 3
14529: PUSH
14530: LD_VAR 0 4
14534: MINUS
14535: PUSH
14536: LD_INT 0
14538: LESS
14539: IFFALSE 14551
// min_y := 0 else
14541: LD_ADDR_VAR 0 8
14545: PUSH
14546: LD_INT 0
14548: ST_TO_ADDR
14549: GO 14567
// min_y := y - r ;
14551: LD_ADDR_VAR 0 8
14555: PUSH
14556: LD_VAR 0 3
14560: PUSH
14561: LD_VAR 0 4
14565: MINUS
14566: ST_TO_ADDR
// max_x := x + r ;
14567: LD_ADDR_VAR 0 9
14571: PUSH
14572: LD_VAR 0 2
14576: PUSH
14577: LD_VAR 0 4
14581: PLUS
14582: ST_TO_ADDR
// max_y := y + r ;
14583: LD_ADDR_VAR 0 10
14587: PUSH
14588: LD_VAR 0 3
14592: PUSH
14593: LD_VAR 0 4
14597: PLUS
14598: ST_TO_ADDR
// for _x = min_x to max_x do
14599: LD_ADDR_VAR 0 11
14603: PUSH
14604: DOUBLE
14605: LD_VAR 0 7
14609: DEC
14610: ST_TO_ADDR
14611: LD_VAR 0 9
14615: PUSH
14616: FOR_TO
14617: IFFALSE 14736
// for _y = min_y to max_y do
14619: LD_ADDR_VAR 0 12
14623: PUSH
14624: DOUBLE
14625: LD_VAR 0 8
14629: DEC
14630: ST_TO_ADDR
14631: LD_VAR 0 10
14635: PUSH
14636: FOR_TO
14637: IFFALSE 14732
// begin if not ValidHex ( _x , _y ) then
14639: LD_VAR 0 11
14643: PPUSH
14644: LD_VAR 0 12
14648: PPUSH
14649: CALL_OW 488
14653: NOT
14654: IFFALSE 14658
// continue ;
14656: GO 14636
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14658: LD_VAR 0 11
14662: PPUSH
14663: LD_VAR 0 12
14667: PPUSH
14668: CALL_OW 351
14672: IFFALSE 14690
14674: PUSH
14675: LD_VAR 0 11
14679: PPUSH
14680: LD_VAR 0 12
14684: PPUSH
14685: CALL_OW 554
14689: AND
14690: IFFALSE 14730
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14692: LD_ADDR_VAR 0 13
14696: PUSH
14697: LD_VAR 0 13
14701: PPUSH
14702: LD_VAR 0 13
14706: PUSH
14707: LD_INT 1
14709: PLUS
14710: PPUSH
14711: LD_VAR 0 11
14715: PUSH
14716: LD_VAR 0 12
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 2
14729: ST_TO_ADDR
// end ;
14730: GO 14636
14732: POP
14733: POP
14734: GO 14616
14736: POP
14737: POP
// if not list then
14738: LD_VAR 0 13
14742: NOT
14743: IFFALSE 14747
// exit ;
14745: GO 14993
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
14747: LD_ADDR_VAR 0 13
14751: PUSH
14752: LD_VAR 0 1
14756: PPUSH
14757: LD_VAR 0 13
14761: PPUSH
14762: LD_INT 1
14764: PPUSH
14765: LD_INT 1
14767: PPUSH
14768: CALL 24760 0 4
14772: ST_TO_ADDR
// ComStop ( flame ) ;
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 141
// for i in list do
14782: LD_ADDR_VAR 0 6
14786: PUSH
14787: LD_VAR 0 13
14791: PUSH
14792: FOR_IN
14793: IFFALSE 14824
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
14795: LD_VAR 0 1
14799: PPUSH
14800: LD_VAR 0 6
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: PPUSH
14809: LD_VAR 0 6
14813: PUSH
14814: LD_INT 2
14816: ARRAY
14817: PPUSH
14818: CALL_OW 176
14822: GO 14792
14824: POP
14825: POP
// repeat wait ( 0 0$1 ) ;
14826: LD_INT 35
14828: PPUSH
14829: CALL_OW 67
// task := GetTaskList ( flame ) ;
14833: LD_ADDR_VAR 0 14
14837: PUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 437
14847: ST_TO_ADDR
// if not task then
14848: LD_VAR 0 14
14852: NOT
14853: IFFALSE 14857
// exit ;
14855: GO 14993
// if task [ 1 ] [ 1 ] <> | then
14857: LD_VAR 0 14
14861: PUSH
14862: LD_INT 1
14864: ARRAY
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: PUSH
14870: LD_STRING |
14872: NONEQUAL
14873: IFFALSE 14877
// exit ;
14875: GO 14993
// _x := task [ 1 ] [ 2 ] ;
14877: LD_ADDR_VAR 0 11
14881: PUSH
14882: LD_VAR 0 14
14886: PUSH
14887: LD_INT 1
14889: ARRAY
14890: PUSH
14891: LD_INT 2
14893: ARRAY
14894: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
14895: LD_ADDR_VAR 0 12
14899: PUSH
14900: LD_VAR 0 14
14904: PUSH
14905: LD_INT 1
14907: ARRAY
14908: PUSH
14909: LD_INT 3
14911: ARRAY
14912: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
14913: LD_VAR 0 11
14917: PPUSH
14918: LD_VAR 0 12
14922: PPUSH
14923: CALL_OW 351
14927: NOT
14928: IFTRUE 14947
14930: PUSH
14931: LD_VAR 0 11
14935: PPUSH
14936: LD_VAR 0 12
14940: PPUSH
14941: CALL_OW 554
14945: NOT
14946: OR
14947: IFFALSE 14981
// begin task := Delete ( task , 1 ) ;
14949: LD_ADDR_VAR 0 14
14953: PUSH
14954: LD_VAR 0 14
14958: PPUSH
14959: LD_INT 1
14961: PPUSH
14962: CALL_OW 3
14966: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_VAR 0 14
14976: PPUSH
14977: CALL_OW 446
// end ; until not HasTask ( flame ) ;
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 314
14990: NOT
14991: IFFALSE 14826
// end ;
14993: LD_VAR 0 5
14997: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14998: LD_EXP 48
15002: NOT
15003: IFFALSE 15053
15005: GO 15007
15007: DISABLE
// begin initHack := true ;
15008: LD_ADDR_EXP 48
15012: PUSH
15013: LD_INT 1
15015: ST_TO_ADDR
// hackTanks := [ ] ;
15016: LD_ADDR_EXP 49
15020: PUSH
15021: EMPTY
15022: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
15023: LD_ADDR_EXP 50
15027: PUSH
15028: EMPTY
15029: ST_TO_ADDR
// hackLimit := 3 ;
15030: LD_ADDR_EXP 51
15034: PUSH
15035: LD_INT 3
15037: ST_TO_ADDR
// hackDist := 12 ;
15038: LD_ADDR_EXP 52
15042: PUSH
15043: LD_INT 12
15045: ST_TO_ADDR
// hackCounter := [ ] ;
15046: LD_ADDR_EXP 53
15050: PUSH
15051: EMPTY
15052: ST_TO_ADDR
// end ;
15053: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
15054: LD_EXP 48
15058: IFFALSE 15076
15060: PUSH
15061: LD_INT 34
15063: PUSH
15064: LD_INT 99
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PPUSH
15071: CALL_OW 69
15075: AND
15076: IFFALSE 15329
15078: GO 15080
15080: DISABLE
15081: LD_INT 0
15083: PPUSH
15084: PPUSH
// begin enable ;
15085: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15086: LD_ADDR_VAR 0 1
15090: PUSH
15091: LD_INT 34
15093: PUSH
15094: LD_INT 99
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PPUSH
15101: CALL_OW 69
15105: PUSH
15106: FOR_IN
15107: IFFALSE 15327
// begin if not i in hackTanks then
15109: LD_VAR 0 1
15113: PUSH
15114: LD_EXP 49
15118: IN
15119: NOT
15120: IFFALSE 15203
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15122: LD_ADDR_EXP 49
15126: PUSH
15127: LD_EXP 49
15131: PPUSH
15132: LD_EXP 49
15136: PUSH
15137: LD_INT 1
15139: PLUS
15140: PPUSH
15141: LD_VAR 0 1
15145: PPUSH
15146: CALL_OW 1
15150: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15151: LD_ADDR_EXP 50
15155: PUSH
15156: LD_EXP 50
15160: PPUSH
15161: LD_EXP 50
15165: PUSH
15166: LD_INT 1
15168: PLUS
15169: PPUSH
15170: EMPTY
15171: PPUSH
15172: CALL_OW 1
15176: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15177: LD_ADDR_EXP 53
15181: PUSH
15182: LD_EXP 53
15186: PPUSH
15187: LD_EXP 53
15191: PUSH
15192: LD_INT 1
15194: PLUS
15195: PPUSH
15196: EMPTY
15197: PPUSH
15198: CALL_OW 1
15202: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15203: LD_VAR 0 1
15207: PPUSH
15208: CALL_OW 302
15212: NOT
15213: IFFALSE 15226
// begin HackUnlinkAll ( i ) ;
15215: LD_VAR 0 1
15219: PPUSH
15220: CALL 15332 0 1
// continue ;
15224: GO 15106
// end ; HackCheckCapturedStatus ( i ) ;
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL 15777 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15235: LD_ADDR_VAR 0 2
15239: PUSH
15240: LD_INT 81
15242: PUSH
15243: LD_VAR 0 1
15247: PPUSH
15248: CALL_OW 255
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 33
15259: PUSH
15260: LD_INT 3
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 91
15269: PUSH
15270: LD_VAR 0 1
15274: PUSH
15275: LD_EXP 52
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: PUSH
15285: LD_INT 50
15287: PUSH
15288: EMPTY
15289: LIST
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PPUSH
15297: CALL_OW 69
15301: ST_TO_ADDR
// if not tmp then
15302: LD_VAR 0 2
15306: NOT
15307: IFFALSE 15311
// continue ;
15309: GO 15106
// HackLink ( i , tmp ) ;
15311: LD_VAR 0 1
15315: PPUSH
15316: LD_VAR 0 2
15320: PPUSH
15321: CALL 15468 0 2
// end ;
15325: GO 15106
15327: POP
15328: POP
// end ;
15329: PPOPN 2
15331: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15332: LD_INT 0
15334: PPUSH
15335: PPUSH
15336: PPUSH
// if not hack in hackTanks then
15337: LD_VAR 0 1
15341: PUSH
15342: LD_EXP 49
15346: IN
15347: NOT
15348: IFFALSE 15352
// exit ;
15350: GO 15463
// index := GetElementIndex ( hackTanks , hack ) ;
15352: LD_ADDR_VAR 0 4
15356: PUSH
15357: LD_EXP 49
15361: PPUSH
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL 24055 0 2
15371: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15372: LD_EXP 50
15376: PUSH
15377: LD_VAR 0 4
15381: ARRAY
15382: IFFALSE 15463
// begin for i in hackTanksCaptured [ index ] do
15384: LD_ADDR_VAR 0 3
15388: PUSH
15389: LD_EXP 50
15393: PUSH
15394: LD_VAR 0 4
15398: ARRAY
15399: PUSH
15400: FOR_IN
15401: IFFALSE 15427
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15403: LD_VAR 0 3
15407: PUSH
15408: LD_INT 1
15410: ARRAY
15411: PPUSH
15412: LD_VAR 0 3
15416: PUSH
15417: LD_INT 2
15419: ARRAY
15420: PPUSH
15421: CALL_OW 235
15425: GO 15400
15427: POP
15428: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15429: LD_ADDR_EXP 50
15433: PUSH
15434: LD_EXP 50
15438: PPUSH
15439: LD_VAR 0 4
15443: PPUSH
15444: EMPTY
15445: PPUSH
15446: CALL_OW 1
15450: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15451: LD_VAR 0 1
15455: PPUSH
15456: LD_INT 0
15458: PPUSH
15459: CALL_OW 505
// end ; end ;
15463: LD_VAR 0 2
15467: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15468: LD_INT 0
15470: PPUSH
15471: PPUSH
15472: PPUSH
// if not hack in hackTanks or not vehicles then
15473: LD_VAR 0 1
15477: PUSH
15478: LD_EXP 49
15482: IN
15483: NOT
15484: IFTRUE 15493
15486: PUSH
15487: LD_VAR 0 2
15491: NOT
15492: OR
15493: IFFALSE 15497
// exit ;
15495: GO 15772
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15497: LD_ADDR_VAR 0 2
15501: PUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: LD_VAR 0 2
15511: PPUSH
15512: LD_INT 1
15514: PPUSH
15515: LD_INT 1
15517: PPUSH
15518: CALL 24707 0 4
15522: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15523: LD_ADDR_VAR 0 5
15527: PUSH
15528: LD_EXP 49
15532: PPUSH
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL 24055 0 2
15542: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15543: LD_EXP 50
15547: PUSH
15548: LD_VAR 0 5
15552: ARRAY
15553: PUSH
15554: LD_EXP 51
15558: LESS
15559: IFFALSE 15748
// begin for i := 1 to vehicles do
15561: LD_ADDR_VAR 0 4
15565: PUSH
15566: DOUBLE
15567: LD_INT 1
15569: DEC
15570: ST_TO_ADDR
15571: LD_VAR 0 2
15575: PUSH
15576: FOR_TO
15577: IFFALSE 15746
// begin if hackTanksCaptured [ index ] = hackLimit then
15579: LD_EXP 50
15583: PUSH
15584: LD_VAR 0 5
15588: ARRAY
15589: PUSH
15590: LD_EXP 51
15594: EQUAL
15595: IFFALSE 15599
// break ;
15597: GO 15746
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15599: LD_ADDR_EXP 53
15603: PUSH
15604: LD_EXP 53
15608: PPUSH
15609: LD_VAR 0 5
15613: PPUSH
15614: LD_EXP 53
15618: PUSH
15619: LD_VAR 0 5
15623: ARRAY
15624: PUSH
15625: LD_INT 1
15627: PLUS
15628: PPUSH
15629: CALL_OW 1
15633: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15634: LD_ADDR_EXP 50
15638: PUSH
15639: LD_EXP 50
15643: PPUSH
15644: LD_VAR 0 5
15648: PUSH
15649: LD_EXP 50
15653: PUSH
15654: LD_VAR 0 5
15658: ARRAY
15659: PUSH
15660: LD_INT 1
15662: PLUS
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PPUSH
15668: LD_VAR 0 2
15672: PUSH
15673: LD_VAR 0 4
15677: ARRAY
15678: PUSH
15679: LD_VAR 0 2
15683: PUSH
15684: LD_VAR 0 4
15688: ARRAY
15689: PPUSH
15690: CALL_OW 255
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL 24272 0 3
15703: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15704: LD_VAR 0 2
15708: PUSH
15709: LD_VAR 0 4
15713: ARRAY
15714: PPUSH
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 255
15724: PPUSH
15725: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15729: LD_VAR 0 2
15733: PUSH
15734: LD_VAR 0 4
15738: ARRAY
15739: PPUSH
15740: CALL_OW 141
// end ;
15744: GO 15576
15746: POP
15747: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15748: LD_VAR 0 1
15752: PPUSH
15753: LD_EXP 50
15757: PUSH
15758: LD_VAR 0 5
15762: ARRAY
15763: PUSH
15764: LD_INT 0
15766: PLUS
15767: PPUSH
15768: CALL_OW 505
// end ;
15772: LD_VAR 0 3
15776: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15777: LD_INT 0
15779: PPUSH
15780: PPUSH
15781: PPUSH
15782: PPUSH
// if not hack in hackTanks then
15783: LD_VAR 0 1
15787: PUSH
15788: LD_EXP 49
15792: IN
15793: NOT
15794: IFFALSE 15798
// exit ;
15796: GO 16042
// index := GetElementIndex ( hackTanks , hack ) ;
15798: LD_ADDR_VAR 0 4
15802: PUSH
15803: LD_EXP 49
15807: PPUSH
15808: LD_VAR 0 1
15812: PPUSH
15813: CALL 24055 0 2
15817: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15818: LD_ADDR_VAR 0 3
15822: PUSH
15823: DOUBLE
15824: LD_EXP 50
15828: PUSH
15829: LD_VAR 0 4
15833: ARRAY
15834: INC
15835: ST_TO_ADDR
15836: LD_INT 1
15838: PUSH
15839: FOR_DOWNTO
15840: IFFALSE 16016
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15842: LD_ADDR_VAR 0 5
15846: PUSH
15847: LD_EXP 50
15851: PUSH
15852: LD_VAR 0 4
15856: ARRAY
15857: PUSH
15858: LD_VAR 0 3
15862: ARRAY
15863: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15864: LD_VAR 0 5
15868: PUSH
15869: LD_INT 1
15871: ARRAY
15872: PPUSH
15873: CALL_OW 302
15877: NOT
15878: IFTRUE 15906
15880: PUSH
15881: LD_VAR 0 5
15885: PUSH
15886: LD_INT 1
15888: ARRAY
15889: PPUSH
15890: CALL_OW 255
15894: PUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 255
15904: NONEQUAL
15905: OR
15906: IFFALSE 16014
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15908: LD_VAR 0 5
15912: PUSH
15913: LD_INT 1
15915: ARRAY
15916: PPUSH
15917: CALL_OW 305
15921: IFFALSE 15949
15923: PUSH
15924: LD_VAR 0 5
15928: PUSH
15929: LD_INT 1
15931: ARRAY
15932: PPUSH
15933: CALL_OW 255
15937: PUSH
15938: LD_VAR 0 1
15942: PPUSH
15943: CALL_OW 255
15947: EQUAL
15948: AND
15949: IFFALSE 15973
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15951: LD_VAR 0 5
15955: PUSH
15956: LD_INT 1
15958: ARRAY
15959: PPUSH
15960: LD_VAR 0 5
15964: PUSH
15965: LD_INT 2
15967: ARRAY
15968: PPUSH
15969: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15973: LD_ADDR_EXP 50
15977: PUSH
15978: LD_EXP 50
15982: PPUSH
15983: LD_VAR 0 4
15987: PPUSH
15988: LD_EXP 50
15992: PUSH
15993: LD_VAR 0 4
15997: ARRAY
15998: PPUSH
15999: LD_VAR 0 3
16003: PPUSH
16004: CALL_OW 3
16008: PPUSH
16009: CALL_OW 1
16013: ST_TO_ADDR
// end ; end ;
16014: GO 15839
16016: POP
16017: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
16018: LD_VAR 0 1
16022: PPUSH
16023: LD_EXP 50
16027: PUSH
16028: LD_VAR 0 4
16032: ARRAY
16033: PUSH
16034: LD_INT 0
16036: PLUS
16037: PPUSH
16038: CALL_OW 505
// end ;
16042: LD_VAR 0 2
16046: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
16047: LD_INT 0
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
// if not hack in hackTanks then
16053: LD_VAR 0 1
16057: PUSH
16058: LD_EXP 49
16062: IN
16063: NOT
16064: IFFALSE 16068
// exit ;
16066: GO 16153
// index := GetElementIndex ( hackTanks , hack ) ;
16068: LD_ADDR_VAR 0 5
16072: PUSH
16073: LD_EXP 49
16077: PPUSH
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL 24055 0 2
16087: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: DOUBLE
16094: LD_INT 1
16096: DEC
16097: ST_TO_ADDR
16098: LD_EXP 50
16102: PUSH
16103: LD_VAR 0 5
16107: ARRAY
16108: PUSH
16109: FOR_TO
16110: IFFALSE 16151
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16112: LD_EXP 50
16116: PUSH
16117: LD_VAR 0 5
16121: ARRAY
16122: PUSH
16123: LD_VAR 0 4
16127: ARRAY
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PUSH
16133: LD_VAR 0 2
16137: EQUAL
16138: IFFALSE 16149
// KillUnit ( vehicle ) ;
16140: LD_VAR 0 2
16144: PPUSH
16145: CALL_OW 66
16149: GO 16109
16151: POP
16152: POP
// end ;
16153: LD_VAR 0 3
16157: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
16158: LD_EXP 54
16162: NOT
16163: IFFALSE 16296
16165: GO 16167
16167: DISABLE
16168: LD_INT 0
16170: PPUSH
// begin initMiner := true ;
16171: LD_ADDR_EXP 54
16175: PUSH
16176: LD_INT 1
16178: ST_TO_ADDR
// minersList := [ ] ;
16179: LD_ADDR_EXP 55
16183: PUSH
16184: EMPTY
16185: ST_TO_ADDR
// minerMinesList := [ ] ;
16186: LD_ADDR_EXP 56
16190: PUSH
16191: EMPTY
16192: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
16193: LD_ADDR_EXP 57
16197: PUSH
16198: LD_INT 6
16200: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16201: LD_ADDR_VAR 0 1
16205: PUSH
16206: LD_INT 34
16208: PUSH
16209: LD_INT 81
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PPUSH
16216: CALL_OW 69
16220: PUSH
16221: FOR_IN
16222: IFFALSE 16294
// begin if not i in minersList then
16224: LD_VAR 0 1
16228: PUSH
16229: LD_EXP 55
16233: IN
16234: NOT
16235: IFFALSE 16292
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16237: LD_ADDR_EXP 55
16241: PUSH
16242: LD_EXP 55
16246: PPUSH
16247: LD_EXP 55
16251: PUSH
16252: LD_INT 1
16254: PLUS
16255: PPUSH
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 1
16265: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16266: LD_ADDR_EXP 56
16270: PUSH
16271: LD_EXP 56
16275: PPUSH
16276: LD_EXP 56
16280: PUSH
16281: LD_INT 1
16283: PLUS
16284: PPUSH
16285: EMPTY
16286: PPUSH
16287: CALL_OW 1
16291: ST_TO_ADDR
// end end ;
16292: GO 16221
16294: POP
16295: POP
// end ;
16296: PPOPN 1
16298: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
16299: LD_EXP 54
16303: IFFALSE 16334
16305: PUSH
16306: LD_EXP 56
16310: PPUSH
16311: CALL 21354 0 1
16315: IFTRUE 16333
16317: PUSH
16318: LD_INT 34
16320: PUSH
16321: LD_INT 81
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PPUSH
16328: CALL_OW 69
16332: OR
16333: AND
16334: IFFALSE 16833
16336: GO 16338
16338: DISABLE
16339: LD_INT 0
16341: PPUSH
16342: PPUSH
16343: PPUSH
16344: PPUSH
// begin enable ;
16345: ENABLE
// for i := minerMinesList downto 1 do
16346: LD_ADDR_VAR 0 1
16350: PUSH
16351: DOUBLE
16352: LD_EXP 56
16356: INC
16357: ST_TO_ADDR
16358: LD_INT 1
16360: PUSH
16361: FOR_DOWNTO
16362: IFFALSE 16831
// begin if IsLive ( minersList [ i ] ) then
16364: LD_EXP 55
16368: PUSH
16369: LD_VAR 0 1
16373: ARRAY
16374: PPUSH
16375: CALL_OW 300
16379: IFFALSE 16412
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
16381: LD_EXP 55
16385: PUSH
16386: LD_VAR 0 1
16390: ARRAY
16391: PPUSH
16392: LD_EXP 56
16396: PUSH
16397: LD_VAR 0 1
16401: ARRAY
16402: PPUSH
16403: CALL 21354 0 1
16407: PPUSH
16408: CALL_OW 505
// if not minerMinesList [ i ] then
16412: LD_EXP 56
16416: PUSH
16417: LD_VAR 0 1
16421: ARRAY
16422: NOT
16423: IFFALSE 16427
// continue ;
16425: GO 16361
// for j := minerMinesList [ i ] downto 1 do
16427: LD_ADDR_VAR 0 2
16431: PUSH
16432: DOUBLE
16433: LD_EXP 56
16437: PUSH
16438: LD_VAR 0 1
16442: ARRAY
16443: INC
16444: ST_TO_ADDR
16445: LD_INT 1
16447: PUSH
16448: FOR_DOWNTO
16449: IFFALSE 16827
// begin side := GetSide ( minersList [ i ] ) ;
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: LD_EXP 55
16460: PUSH
16461: LD_VAR 0 1
16465: ARRAY
16466: PPUSH
16467: CALL_OW 255
16471: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
16472: LD_EXP 55
16476: PUSH
16477: LD_VAR 0 1
16481: ARRAY
16482: PPUSH
16483: CALL_OW 301
16487: IFTRUE 16507
16489: PUSH
16490: LD_EXP 55
16494: PUSH
16495: LD_VAR 0 1
16499: ARRAY
16500: PPUSH
16501: CALL_OW 305
16505: NOT
16506: OR
16507: IFFALSE 16598
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16509: LD_EXP 56
16513: PUSH
16514: LD_VAR 0 1
16518: ARRAY
16519: PUSH
16520: LD_VAR 0 2
16524: ARRAY
16525: PUSH
16526: LD_INT 1
16528: ARRAY
16529: PPUSH
16530: LD_EXP 56
16534: PUSH
16535: LD_VAR 0 1
16539: ARRAY
16540: PUSH
16541: LD_VAR 0 2
16545: ARRAY
16546: PUSH
16547: LD_INT 2
16549: ARRAY
16550: PPUSH
16551: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16555: LD_ADDR_EXP 56
16559: PUSH
16560: LD_EXP 56
16564: PPUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: LD_EXP 56
16574: PUSH
16575: LD_VAR 0 1
16579: ARRAY
16580: PPUSH
16581: LD_VAR 0 2
16585: PPUSH
16586: CALL_OW 3
16590: PPUSH
16591: CALL_OW 1
16595: ST_TO_ADDR
// continue ;
16596: GO 16448
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16598: LD_ADDR_VAR 0 4
16602: PUSH
16603: LD_EXP 56
16607: PUSH
16608: LD_VAR 0 1
16612: ARRAY
16613: PUSH
16614: LD_VAR 0 2
16618: ARRAY
16619: PUSH
16620: LD_INT 1
16622: ARRAY
16623: PPUSH
16624: LD_EXP 56
16628: PUSH
16629: LD_VAR 0 1
16633: ARRAY
16634: PUSH
16635: LD_VAR 0 2
16639: ARRAY
16640: PUSH
16641: LD_INT 2
16643: ARRAY
16644: PPUSH
16645: CALL_OW 428
16649: ST_TO_ADDR
// if not tmp then
16650: LD_VAR 0 4
16654: NOT
16655: IFFALSE 16659
// continue ;
16657: GO 16448
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16659: LD_VAR 0 4
16663: PUSH
16664: LD_INT 81
16666: PUSH
16667: LD_VAR 0 3
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: IN
16681: IFFALSE 16731
16683: PUSH
16684: LD_EXP 56
16688: PUSH
16689: LD_VAR 0 1
16693: ARRAY
16694: PUSH
16695: LD_VAR 0 2
16699: ARRAY
16700: PUSH
16701: LD_INT 1
16703: ARRAY
16704: PPUSH
16705: LD_EXP 56
16709: PUSH
16710: LD_VAR 0 1
16714: ARRAY
16715: PUSH
16716: LD_VAR 0 2
16720: ARRAY
16721: PUSH
16722: LD_INT 2
16724: ARRAY
16725: PPUSH
16726: CALL_OW 458
16730: AND
16731: IFFALSE 16825
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16733: LD_EXP 56
16737: PUSH
16738: LD_VAR 0 1
16742: ARRAY
16743: PUSH
16744: LD_VAR 0 2
16748: ARRAY
16749: PUSH
16750: LD_INT 1
16752: ARRAY
16753: PPUSH
16754: LD_EXP 56
16758: PUSH
16759: LD_VAR 0 1
16763: ARRAY
16764: PUSH
16765: LD_VAR 0 2
16769: ARRAY
16770: PUSH
16771: LD_INT 2
16773: ARRAY
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16784: LD_ADDR_EXP 56
16788: PUSH
16789: LD_EXP 56
16793: PPUSH
16794: LD_VAR 0 1
16798: PPUSH
16799: LD_EXP 56
16803: PUSH
16804: LD_VAR 0 1
16808: ARRAY
16809: PPUSH
16810: LD_VAR 0 2
16814: PPUSH
16815: CALL_OW 3
16819: PPUSH
16820: CALL_OW 1
16824: ST_TO_ADDR
// end ; end ;
16825: GO 16448
16827: POP
16828: POP
// end ;
16829: GO 16361
16831: POP
16832: POP
// end ;
16833: PPOPN 4
16835: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
16836: LD_INT 0
16838: PPUSH
16839: PPUSH
16840: PPUSH
16841: PPUSH
// result := false ;
16842: LD_ADDR_VAR 0 4
16846: PUSH
16847: LD_INT 0
16849: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
16850: LD_VAR 0 1
16854: PPUSH
16855: CALL_OW 264
16859: PUSH
16860: LD_INT 81
16862: EQUAL
16863: NOT
16864: IFFALSE 16868
// exit ;
16866: GO 17238
// side := GetSide ( unit ) ;
16868: LD_ADDR_VAR 0 6
16872: PUSH
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 255
16882: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
16883: LD_ADDR_VAR 0 5
16887: PUSH
16888: LD_EXP 55
16892: PPUSH
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL 24055 0 2
16902: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16903: LD_EXP 56
16907: PUSH
16908: LD_VAR 0 5
16912: ARRAY
16913: PUSH
16914: LD_EXP 57
16918: GREATEREQUAL
16919: IFFALSE 16923
// exit ;
16921: GO 17238
// ComMoveXY ( unit , x , y ) ;
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_VAR 0 2
16932: PPUSH
16933: LD_VAR 0 3
16937: PPUSH
16938: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16942: LD_INT 35
16944: PPUSH
16945: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16949: LD_VAR 0 1
16953: PPUSH
16954: LD_VAR 0 2
16958: PPUSH
16959: LD_VAR 0 3
16963: PPUSH
16964: CALL 56101 0 3
16968: NOT
16969: IFFALSE 16982
16971: PUSH
16972: LD_VAR 0 1
16976: PPUSH
16977: CALL_OW 314
16981: AND
16982: IFFALSE 16986
// exit ;
16984: GO 17238
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16986: LD_VAR 0 2
16990: PPUSH
16991: LD_VAR 0 3
16995: PPUSH
16996: CALL_OW 428
17000: PUSH
17001: LD_VAR 0 1
17005: EQUAL
17006: IFFALSE 17020
17008: PUSH
17009: LD_VAR 0 1
17013: PPUSH
17014: CALL_OW 314
17018: NOT
17019: AND
17020: IFFALSE 16942
// if MineAtPos ( x , y ) then
17022: LD_VAR 0 2
17026: PPUSH
17027: LD_VAR 0 3
17031: PPUSH
17032: CALL_OW 458
17036: IFFALSE 17040
// exit ;
17038: GO 17238
// if your_side = side then
17040: LD_OWVAR 2
17044: PUSH
17045: LD_VAR 0 6
17049: EQUAL
17050: IFFALSE 17069
// PlaySoundXY ( x , y , PlantMine ) ;
17052: LD_VAR 0 2
17056: PPUSH
17057: LD_VAR 0 3
17061: PPUSH
17062: LD_STRING PlantMine
17064: PPUSH
17065: CALL_OW 366
// repeat wait ( 1 ) ;
17069: LD_INT 1
17071: PPUSH
17072: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
17076: LD_VAR 0 2
17080: PPUSH
17081: LD_VAR 0 3
17085: PPUSH
17086: LD_VAR 0 6
17090: PPUSH
17091: LD_INT 0
17093: PPUSH
17094: CALL_OW 454
17098: IFFALSE 17069
// if MineAtPos ( x , y ) then
17100: LD_VAR 0 2
17104: PPUSH
17105: LD_VAR 0 3
17109: PPUSH
17110: CALL_OW 458
17114: IFFALSE 17230
// begin for i in minerMinesList [ index ] do
17116: LD_ADDR_VAR 0 7
17120: PUSH
17121: LD_EXP 56
17125: PUSH
17126: LD_VAR 0 5
17130: ARRAY
17131: PUSH
17132: FOR_IN
17133: IFFALSE 17175
// if i [ 1 ] = x and i [ 2 ] = y then
17135: LD_VAR 0 7
17139: PUSH
17140: LD_INT 1
17142: ARRAY
17143: PUSH
17144: LD_VAR 0 2
17148: EQUAL
17149: IFFALSE 17167
17151: PUSH
17152: LD_VAR 0 7
17156: PUSH
17157: LD_INT 2
17159: ARRAY
17160: PUSH
17161: LD_VAR 0 3
17165: EQUAL
17166: AND
17167: IFFALSE 17173
// exit ;
17169: POP
17170: POP
17171: GO 17238
17173: GO 17132
17175: POP
17176: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17177: LD_ADDR_EXP 56
17181: PUSH
17182: LD_EXP 56
17186: PPUSH
17187: LD_VAR 0 5
17191: PUSH
17192: LD_EXP 56
17196: PUSH
17197: LD_VAR 0 5
17201: ARRAY
17202: PUSH
17203: LD_INT 1
17205: PLUS
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PPUSH
17211: LD_VAR 0 2
17215: PUSH
17216: LD_VAR 0 3
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL 24272 0 3
17229: ST_TO_ADDR
// end ; result := true ;
17230: LD_ADDR_VAR 0 4
17234: PUSH
17235: LD_INT 1
17237: ST_TO_ADDR
// end ;
17238: LD_VAR 0 4
17242: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17243: LD_INT 0
17245: PPUSH
17246: PPUSH
17247: PPUSH
// if not unit in minersList then
17248: LD_VAR 0 1
17252: PUSH
17253: LD_EXP 55
17257: IN
17258: NOT
17259: IFFALSE 17263
// exit ;
17261: GO 17470
// index := GetElementIndex ( minersList , unit ) ;
17263: LD_ADDR_VAR 0 6
17267: PUSH
17268: LD_EXP 55
17272: PPUSH
17273: LD_VAR 0 1
17277: PPUSH
17278: CALL 24055 0 2
17282: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: DOUBLE
17289: LD_EXP 56
17293: PUSH
17294: LD_VAR 0 6
17298: ARRAY
17299: INC
17300: ST_TO_ADDR
17301: LD_INT 1
17303: PUSH
17304: FOR_DOWNTO
17305: IFFALSE 17468
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17307: LD_EXP 56
17311: PUSH
17312: LD_VAR 0 6
17316: ARRAY
17317: PUSH
17318: LD_VAR 0 5
17322: ARRAY
17323: PUSH
17324: LD_INT 1
17326: ARRAY
17327: PPUSH
17328: LD_EXP 56
17332: PUSH
17333: LD_VAR 0 6
17337: ARRAY
17338: PUSH
17339: LD_VAR 0 5
17343: ARRAY
17344: PUSH
17345: LD_INT 2
17347: ARRAY
17348: PPUSH
17349: LD_VAR 0 2
17353: PPUSH
17354: LD_VAR 0 3
17358: PPUSH
17359: CALL_OW 298
17363: PUSH
17364: LD_INT 6
17366: LESS
17367: IFFALSE 17466
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17369: LD_EXP 56
17373: PUSH
17374: LD_VAR 0 6
17378: ARRAY
17379: PUSH
17380: LD_VAR 0 5
17384: ARRAY
17385: PUSH
17386: LD_INT 1
17388: ARRAY
17389: PPUSH
17390: LD_EXP 56
17394: PUSH
17395: LD_VAR 0 6
17399: ARRAY
17400: PUSH
17401: LD_VAR 0 5
17405: ARRAY
17406: PUSH
17407: LD_INT 2
17409: ARRAY
17410: PPUSH
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 255
17420: PPUSH
17421: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17425: LD_ADDR_EXP 56
17429: PUSH
17430: LD_EXP 56
17434: PPUSH
17435: LD_VAR 0 6
17439: PPUSH
17440: LD_EXP 56
17444: PUSH
17445: LD_VAR 0 6
17449: ARRAY
17450: PPUSH
17451: LD_VAR 0 5
17455: PPUSH
17456: CALL_OW 3
17460: PPUSH
17461: CALL_OW 1
17465: ST_TO_ADDR
// end ; end ;
17466: GO 17304
17468: POP
17469: POP
// end ;
17470: LD_VAR 0 4
17474: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17475: LD_INT 0
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
17485: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17486: LD_VAR 0 1
17490: PPUSH
17491: CALL_OW 264
17495: PUSH
17496: LD_INT 81
17498: EQUAL
17499: NOT
17500: IFTRUE 17515
17502: PUSH
17503: LD_VAR 0 1
17507: PUSH
17508: LD_EXP 55
17512: IN
17513: NOT
17514: OR
17515: IFFALSE 17519
// exit ;
17517: GO 17845
// index := GetElementIndex ( minersList , unit ) ;
17519: LD_ADDR_VAR 0 6
17523: PUSH
17524: LD_EXP 55
17528: PPUSH
17529: LD_VAR 0 1
17533: PPUSH
17534: CALL 24055 0 2
17538: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17539: LD_ADDR_VAR 0 8
17543: PUSH
17544: LD_EXP 57
17548: PUSH
17549: LD_EXP 56
17553: PUSH
17554: LD_VAR 0 6
17558: ARRAY
17559: MINUS
17560: ST_TO_ADDR
// if not minesFreeAmount then
17561: LD_VAR 0 8
17565: NOT
17566: IFFALSE 17570
// exit ;
17568: GO 17845
// tmp := [ ] ;
17570: LD_ADDR_VAR 0 7
17574: PUSH
17575: EMPTY
17576: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17577: LD_ADDR_VAR 0 5
17581: PUSH
17582: DOUBLE
17583: LD_INT 1
17585: DEC
17586: ST_TO_ADDR
17587: LD_VAR 0 8
17591: PUSH
17592: FOR_TO
17593: IFFALSE 17792
// begin _d := rand ( 0 , 5 ) ;
17595: LD_ADDR_VAR 0 11
17599: PUSH
17600: LD_INT 0
17602: PPUSH
17603: LD_INT 5
17605: PPUSH
17606: CALL_OW 12
17610: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17611: LD_ADDR_VAR 0 12
17615: PUSH
17616: LD_INT 2
17618: PPUSH
17619: LD_INT 6
17621: PPUSH
17622: CALL_OW 12
17626: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17627: LD_ADDR_VAR 0 9
17631: PUSH
17632: LD_VAR 0 2
17636: PPUSH
17637: LD_VAR 0 11
17641: PPUSH
17642: LD_VAR 0 12
17646: PPUSH
17647: CALL_OW 272
17651: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17652: LD_ADDR_VAR 0 10
17656: PUSH
17657: LD_VAR 0 3
17661: PPUSH
17662: LD_VAR 0 11
17666: PPUSH
17667: LD_VAR 0 12
17671: PPUSH
17672: CALL_OW 273
17676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17677: LD_VAR 0 9
17681: PPUSH
17682: LD_VAR 0 10
17686: PPUSH
17687: CALL_OW 488
17691: IFFALSE 17715
17693: PUSH
17694: LD_VAR 0 9
17698: PUSH
17699: LD_VAR 0 10
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_VAR 0 7
17712: IN
17713: NOT
17714: AND
17715: IFFALSE 17734
17717: PUSH
17718: LD_VAR 0 9
17722: PPUSH
17723: LD_VAR 0 10
17727: PPUSH
17728: CALL_OW 458
17732: NOT
17733: AND
17734: IFFALSE 17776
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17736: LD_ADDR_VAR 0 7
17740: PUSH
17741: LD_VAR 0 7
17745: PPUSH
17746: LD_VAR 0 7
17750: PUSH
17751: LD_INT 1
17753: PLUS
17754: PPUSH
17755: LD_VAR 0 9
17759: PUSH
17760: LD_VAR 0 10
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PPUSH
17769: CALL_OW 1
17773: ST_TO_ADDR
17774: GO 17790
// i := i - 1 ;
17776: LD_ADDR_VAR 0 5
17780: PUSH
17781: LD_VAR 0 5
17785: PUSH
17786: LD_INT 1
17788: MINUS
17789: ST_TO_ADDR
// end ;
17790: GO 17592
17792: POP
17793: POP
// for i in tmp do
17794: LD_ADDR_VAR 0 5
17798: PUSH
17799: LD_VAR 0 7
17803: PUSH
17804: FOR_IN
17805: IFFALSE 17843
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17807: LD_VAR 0 1
17811: PPUSH
17812: LD_VAR 0 5
17816: PUSH
17817: LD_INT 1
17819: ARRAY
17820: PPUSH
17821: LD_VAR 0 5
17825: PUSH
17826: LD_INT 2
17828: ARRAY
17829: PPUSH
17830: CALL 16836 0 3
17834: NOT
17835: IFFALSE 17841
// exit ;
17837: POP
17838: POP
17839: GO 17845
17841: GO 17804
17843: POP
17844: POP
// end ;
17845: LD_VAR 0 4
17849: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
17850: LD_INT 0
17852: PPUSH
17853: PPUSH
17854: PPUSH
17855: PPUSH
17856: PPUSH
17857: PPUSH
17858: PPUSH
17859: PPUSH
17860: PPUSH
// if GetClass ( unit ) <> class_sniper then
17861: LD_VAR 0 1
17865: PPUSH
17866: CALL_OW 257
17870: PUSH
17871: LD_INT 5
17873: NONEQUAL
17874: IFFALSE 17878
// exit ;
17876: GO 18348
// dist := 8 ;
17878: LD_ADDR_VAR 0 5
17882: PUSH
17883: LD_INT 8
17885: ST_TO_ADDR
// viewRange := 12 ;
17886: LD_ADDR_VAR 0 8
17890: PUSH
17891: LD_INT 12
17893: ST_TO_ADDR
// side := GetSide ( unit ) ;
17894: LD_ADDR_VAR 0 6
17898: PUSH
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 255
17908: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17909: LD_INT 61
17911: PPUSH
17912: LD_VAR 0 6
17916: PPUSH
17917: CALL_OW 321
17921: PUSH
17922: LD_INT 2
17924: EQUAL
17925: IFFALSE 17935
// viewRange := 16 ;
17927: LD_ADDR_VAR 0 8
17931: PUSH
17932: LD_INT 16
17934: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17935: LD_VAR 0 1
17939: PPUSH
17940: LD_VAR 0 2
17944: PPUSH
17945: LD_VAR 0 3
17949: PPUSH
17950: CALL_OW 297
17954: PUSH
17955: LD_VAR 0 5
17959: GREATER
17960: IFFALSE 18039
// begin ComMoveXY ( unit , x , y ) ;
17962: LD_VAR 0 1
17966: PPUSH
17967: LD_VAR 0 2
17971: PPUSH
17972: LD_VAR 0 3
17976: PPUSH
17977: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17981: LD_INT 35
17983: PPUSH
17984: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17988: LD_VAR 0 1
17992: PPUSH
17993: LD_VAR 0 2
17997: PPUSH
17998: LD_VAR 0 3
18002: PPUSH
18003: CALL 56101 0 3
18007: NOT
18008: IFFALSE 18012
// exit ;
18010: GO 18348
// until GetDistUnitXY ( unit , x , y ) < dist ;
18012: LD_VAR 0 1
18016: PPUSH
18017: LD_VAR 0 2
18021: PPUSH
18022: LD_VAR 0 3
18026: PPUSH
18027: CALL_OW 297
18031: PUSH
18032: LD_VAR 0 5
18036: LESS
18037: IFFALSE 17981
// end ; ComTurnXY ( unit , x , y ) ;
18039: LD_VAR 0 1
18043: PPUSH
18044: LD_VAR 0 2
18048: PPUSH
18049: LD_VAR 0 3
18053: PPUSH
18054: CALL_OW 118
// repeat if Multiplayer then
18058: LD_OWVAR 4
18062: IFFALSE 18073
// wait ( 35 ) else
18064: LD_INT 35
18066: PPUSH
18067: CALL_OW 67
18071: GO 18080
// wait ( 5 ) ;
18073: LD_INT 5
18075: PPUSH
18076: CALL_OW 67
// _d := GetDir ( unit ) ;
18080: LD_ADDR_VAR 0 11
18084: PUSH
18085: LD_VAR 0 1
18089: PPUSH
18090: CALL_OW 254
18094: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
18095: LD_ADDR_VAR 0 7
18099: PUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 250
18109: PPUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 251
18119: PPUSH
18120: LD_VAR 0 2
18124: PPUSH
18125: LD_VAR 0 3
18129: PPUSH
18130: CALL 58737 0 4
18134: ST_TO_ADDR
// until dir = _d ;
18135: LD_VAR 0 7
18139: PUSH
18140: LD_VAR 0 11
18144: EQUAL
18145: IFFALSE 18058
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
18147: LD_ADDR_VAR 0 9
18151: PUSH
18152: LD_VAR 0 1
18156: PPUSH
18157: CALL_OW 250
18161: PPUSH
18162: LD_VAR 0 7
18166: PPUSH
18167: LD_VAR 0 5
18171: PPUSH
18172: CALL_OW 272
18176: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
18177: LD_ADDR_VAR 0 10
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: CALL_OW 251
18191: PPUSH
18192: LD_VAR 0 7
18196: PPUSH
18197: LD_VAR 0 5
18201: PPUSH
18202: CALL_OW 273
18206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18207: LD_VAR 0 9
18211: PPUSH
18212: LD_VAR 0 10
18216: PPUSH
18217: CALL_OW 488
18221: NOT
18222: IFFALSE 18226
// exit ;
18224: GO 18348
// ComAnimCustom ( unit , 1 ) ;
18226: LD_VAR 0 1
18230: PPUSH
18231: LD_INT 1
18233: PPUSH
18234: CALL_OW 592
// p := 0 ;
18238: LD_ADDR_VAR 0 12
18242: PUSH
18243: LD_INT 0
18245: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18246: LD_VAR 0 9
18250: PPUSH
18251: LD_VAR 0 10
18255: PPUSH
18256: LD_VAR 0 6
18260: PPUSH
18261: LD_VAR 0 8
18265: PPUSH
18266: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
18270: LD_INT 35
18272: PPUSH
18273: CALL_OW 67
// p := Inc ( p ) ;
18277: LD_ADDR_VAR 0 12
18281: PUSH
18282: LD_VAR 0 12
18286: PPUSH
18287: CALL 58693 0 1
18291: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
18292: LD_VAR 0 12
18296: PUSH
18297: LD_INT 3
18299: EQUAL
18300: IFTRUE 18314
18302: PUSH
18303: LD_VAR 0 1
18307: PPUSH
18308: CALL_OW 302
18312: NOT
18313: OR
18314: IFTRUE 18327
18316: PUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 301
18326: OR
18327: IFFALSE 18270
// RemoveSeeing ( _x , _y , side ) ;
18329: LD_VAR 0 9
18333: PPUSH
18334: LD_VAR 0 10
18338: PPUSH
18339: LD_VAR 0 6
18343: PPUSH
18344: CALL_OW 331
// end ;
18348: LD_VAR 0 4
18352: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
18353: LD_INT 0
18355: PPUSH
18356: PPUSH
18357: PPUSH
18358: PPUSH
18359: PPUSH
18360: PPUSH
18361: PPUSH
18362: PPUSH
18363: PPUSH
18364: PPUSH
18365: PPUSH
// if not unit then
18366: LD_VAR 0 1
18370: NOT
18371: IFFALSE 18375
// exit ;
18373: GO 18646
// side := GetSide ( unit ) ;
18375: LD_ADDR_VAR 0 3
18379: PUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL_OW 255
18389: ST_TO_ADDR
// x := GetX ( unit ) ;
18390: LD_ADDR_VAR 0 5
18394: PUSH
18395: LD_VAR 0 1
18399: PPUSH
18400: CALL_OW 250
18404: ST_TO_ADDR
// y := GetY ( unit ) ;
18405: LD_ADDR_VAR 0 6
18409: PUSH
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 251
18419: ST_TO_ADDR
// r := 8 ;
18420: LD_ADDR_VAR 0 4
18424: PUSH
18425: LD_INT 8
18427: ST_TO_ADDR
// if x - r < 0 then
18428: LD_VAR 0 5
18432: PUSH
18433: LD_VAR 0 4
18437: MINUS
18438: PUSH
18439: LD_INT 0
18441: LESS
18442: IFFALSE 18454
// min_x := 0 else
18444: LD_ADDR_VAR 0 7
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
18452: GO 18470
// min_x := x - r ;
18454: LD_ADDR_VAR 0 7
18458: PUSH
18459: LD_VAR 0 5
18463: PUSH
18464: LD_VAR 0 4
18468: MINUS
18469: ST_TO_ADDR
// if y - r < 0 then
18470: LD_VAR 0 6
18474: PUSH
18475: LD_VAR 0 4
18479: MINUS
18480: PUSH
18481: LD_INT 0
18483: LESS
18484: IFFALSE 18496
// min_y := 0 else
18486: LD_ADDR_VAR 0 8
18490: PUSH
18491: LD_INT 0
18493: ST_TO_ADDR
18494: GO 18512
// min_y := y - r ;
18496: LD_ADDR_VAR 0 8
18500: PUSH
18501: LD_VAR 0 6
18505: PUSH
18506: LD_VAR 0 4
18510: MINUS
18511: ST_TO_ADDR
// max_x := x + r ;
18512: LD_ADDR_VAR 0 9
18516: PUSH
18517: LD_VAR 0 5
18521: PUSH
18522: LD_VAR 0 4
18526: PLUS
18527: ST_TO_ADDR
// max_y := y + r ;
18528: LD_ADDR_VAR 0 10
18532: PUSH
18533: LD_VAR 0 6
18537: PUSH
18538: LD_VAR 0 4
18542: PLUS
18543: ST_TO_ADDR
// for _x = min_x to max_x do
18544: LD_ADDR_VAR 0 11
18548: PUSH
18549: DOUBLE
18550: LD_VAR 0 7
18554: DEC
18555: ST_TO_ADDR
18556: LD_VAR 0 9
18560: PUSH
18561: FOR_TO
18562: IFFALSE 18644
// for _y = min_y to max_y do
18564: LD_ADDR_VAR 0 12
18568: PUSH
18569: DOUBLE
18570: LD_VAR 0 8
18574: DEC
18575: ST_TO_ADDR
18576: LD_VAR 0 10
18580: PUSH
18581: FOR_TO
18582: IFFALSE 18640
// begin if not ValidHex ( _x , _y ) then
18584: LD_VAR 0 11
18588: PPUSH
18589: LD_VAR 0 12
18593: PPUSH
18594: CALL_OW 488
18598: NOT
18599: IFFALSE 18603
// continue ;
18601: GO 18581
// if MineAtPos ( _x , _y ) then
18603: LD_VAR 0 11
18607: PPUSH
18608: LD_VAR 0 12
18612: PPUSH
18613: CALL_OW 458
18617: IFFALSE 18638
// ViewMineAtPos ( _x , _y , side ) ;
18619: LD_VAR 0 11
18623: PPUSH
18624: LD_VAR 0 12
18628: PPUSH
18629: LD_VAR 0 3
18633: PPUSH
18634: CALL_OW 457
// end ;
18638: GO 18581
18640: POP
18641: POP
18642: GO 18561
18644: POP
18645: POP
// end ;
18646: LD_VAR 0 2
18650: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
18657: PPUSH
18658: PPUSH
// if not units then
18659: LD_VAR 0 1
18663: NOT
18664: IFFALSE 18668
// exit ;
18666: GO 19098
// scaners := [ ] ;
18668: LD_ADDR_VAR 0 6
18672: PUSH
18673: EMPTY
18674: ST_TO_ADDR
// for i in units do
18675: LD_ADDR_VAR 0 3
18679: PUSH
18680: LD_VAR 0 1
18684: PUSH
18685: FOR_IN
18686: IFFALSE 18843
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
18688: LD_VAR 0 3
18692: PPUSH
18693: CALL_OW 264
18697: PUSH
18698: LD_INT 11
18700: NONEQUAL
18701: IFTRUE 18715
18703: PUSH
18704: LD_VAR 0 3
18708: PPUSH
18709: CALL_OW 302
18713: NOT
18714: OR
18715: IFTRUE 18732
18717: PUSH
18718: LD_VAR 0 3
18722: PPUSH
18723: CALL_OW 110
18727: PUSH
18728: LD_INT 502
18730: EQUAL
18731: OR
18732: IFFALSE 18736
// continue ;
18734: GO 18685
// ComStop ( i ) ;
18736: LD_VAR 0 3
18740: PPUSH
18741: CALL_OW 141
// x := GetX ( i ) ;
18745: LD_ADDR_VAR 0 4
18749: PUSH
18750: LD_VAR 0 3
18754: PPUSH
18755: CALL_OW 250
18759: ST_TO_ADDR
// y := GetY ( i ) ;
18760: LD_ADDR_VAR 0 5
18764: PUSH
18765: LD_VAR 0 3
18769: PPUSH
18770: CALL_OW 251
18774: ST_TO_ADDR
// if GetSide ( i ) = your_side then
18775: LD_VAR 0 3
18779: PPUSH
18780: CALL_OW 255
18784: PUSH
18785: LD_OWVAR 2
18789: EQUAL
18790: IFFALSE 18809
// PlaySoundXY ( x , y , mineDetector ) ;
18792: LD_VAR 0 4
18796: PPUSH
18797: LD_VAR 0 5
18801: PPUSH
18802: LD_STRING mineDetector
18804: PPUSH
18805: CALL_OW 366
// scaners := Join ( scaners , i ) ;
18809: LD_ADDR_VAR 0 6
18813: PUSH
18814: LD_VAR 0 6
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: CALL 57320 0 2
18828: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
18829: LD_VAR 0 3
18833: PPUSH
18834: LD_INT 502
18836: PPUSH
18837: CALL_OW 109
// end ;
18841: GO 18685
18843: POP
18844: POP
// if not scaners then
18845: LD_VAR 0 6
18849: NOT
18850: IFFALSE 18854
// exit ;
18852: GO 19098
// wait ( 3 ) ;
18854: LD_INT 3
18856: PPUSH
18857: CALL_OW 67
// timer := 6 ;
18861: LD_ADDR_VAR 0 7
18865: PUSH
18866: LD_INT 6
18868: ST_TO_ADDR
// repeat for i in scaners do
18869: LD_ADDR_VAR 0 3
18873: PUSH
18874: LD_VAR 0 6
18878: PUSH
18879: FOR_IN
18880: IFFALSE 18996
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
18882: LD_VAR 0 3
18886: PPUSH
18887: CALL_OW 302
18891: NOT
18892: IFTRUE 18905
18894: PUSH
18895: LD_VAR 0 3
18899: PPUSH
18900: CALL_OW 314
18904: OR
18905: IFTRUE 18936
18907: PUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: CALL_OW 263
18917: PUSH
18918: LD_INT 1
18920: EQUAL
18921: IFFALSE 18935
18923: PUSH
18924: LD_VAR 0 3
18928: PPUSH
18929: CALL_OW 311
18933: NOT
18934: AND
18935: OR
18936: IFFALSE 18980
// begin SetUnitDisplayNumber ( i , 0 ) ;
18938: LD_VAR 0 3
18942: PPUSH
18943: LD_INT 0
18945: PPUSH
18946: CALL_OW 505
// SetTag ( i , 0 ) ;
18950: LD_VAR 0 3
18954: PPUSH
18955: LD_INT 0
18957: PPUSH
18958: CALL_OW 109
// scaners := scaners diff i ;
18962: LD_ADDR_VAR 0 6
18966: PUSH
18967: LD_VAR 0 6
18971: PUSH
18972: LD_VAR 0 3
18976: DIFF
18977: ST_TO_ADDR
// continue ;
18978: GO 18879
// end ; SetUnitDisplayNumber ( i , timer ) ;
18980: LD_VAR 0 3
18984: PPUSH
18985: LD_VAR 0 7
18989: PPUSH
18990: CALL_OW 505
// end ;
18994: GO 18879
18996: POP
18997: POP
// if not scaners then
18998: LD_VAR 0 6
19002: NOT
19003: IFFALSE 19007
// exit ;
19005: GO 19098
// timer := Dec ( timer ) ;
19007: LD_ADDR_VAR 0 7
19011: PUSH
19012: LD_VAR 0 7
19016: PPUSH
19017: CALL 58715 0 1
19021: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19022: LD_INT 35
19024: PPUSH
19025: CALL_OW 67
// until timer = 0 ;
19029: LD_VAR 0 7
19033: PUSH
19034: LD_INT 0
19036: EQUAL
19037: IFFALSE 18869
// if not scaners then
19039: LD_VAR 0 6
19043: NOT
19044: IFFALSE 19048
// exit ;
19046: GO 19098
// for i in scaners do
19048: LD_ADDR_VAR 0 3
19052: PUSH
19053: LD_VAR 0 6
19057: PUSH
19058: FOR_IN
19059: IFFALSE 19096
// begin SetUnitDisplayNumber ( i , 0 ) ;
19061: LD_VAR 0 3
19065: PPUSH
19066: LD_INT 0
19068: PPUSH
19069: CALL_OW 505
// SetTag ( i , 0 ) ;
19073: LD_VAR 0 3
19077: PPUSH
19078: LD_INT 0
19080: PPUSH
19081: CALL_OW 109
// RevealDetectorMine ( i ) ;
19085: LD_VAR 0 3
19089: PPUSH
19090: CALL 18353 0 1
// end ;
19094: GO 19058
19096: POP
19097: POP
// end ;
19098: LD_VAR 0 2
19102: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
19103: LD_INT 0
19105: PPUSH
// if p1 = mine_detector_mode then
19106: LD_VAR 0 2
19110: PUSH
19111: LD_INT 103
19113: EQUAL
19114: IFFALSE 19125
// DetectMine ( units ) ;
19116: LD_VAR 0 1
19120: PPUSH
19121: CALL 18651 0 1
// end ; end_of_file
19125: LD_VAR 0 7
19129: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19130: LD_INT 0
19132: PPUSH
19133: PPUSH
// if exist_mode then
19134: LD_VAR 0 2
19138: IFFALSE 19184
// begin unit := CreateCharacter ( prefix & ident ) ;
19140: LD_ADDR_VAR 0 5
19144: PUSH
19145: LD_VAR 0 3
19149: PUSH
19150: LD_VAR 0 1
19154: STR
19155: PPUSH
19156: CALL_OW 34
19160: ST_TO_ADDR
// if unit then
19161: LD_VAR 0 5
19165: IFFALSE 19182
// DeleteCharacters ( prefix & ident ) ;
19167: LD_VAR 0 3
19171: PUSH
19172: LD_VAR 0 1
19176: STR
19177: PPUSH
19178: CALL_OW 40
// end else
19182: GO 19199
// unit := NewCharacter ( ident ) ;
19184: LD_ADDR_VAR 0 5
19188: PUSH
19189: LD_VAR 0 1
19193: PPUSH
19194: CALL_OW 25
19198: ST_TO_ADDR
// result := unit ;
19199: LD_ADDR_VAR 0 4
19203: PUSH
19204: LD_VAR 0 5
19208: ST_TO_ADDR
// end ;
19209: LD_VAR 0 4
19213: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
19214: LD_INT 0
19216: PPUSH
19217: PPUSH
// if exist_mode then
19218: LD_VAR 0 2
19222: IFFALSE 19247
// unit := CreateCharacter ( prefix & ident ) else
19224: LD_ADDR_VAR 0 5
19228: PUSH
19229: LD_VAR 0 3
19233: PUSH
19234: LD_VAR 0 1
19238: STR
19239: PPUSH
19240: CALL_OW 34
19244: ST_TO_ADDR
19245: GO 19262
// unit := NewCharacter ( ident ) ;
19247: LD_ADDR_VAR 0 5
19251: PUSH
19252: LD_VAR 0 1
19256: PPUSH
19257: CALL_OW 25
19261: ST_TO_ADDR
// result := unit ;
19262: LD_ADDR_VAR 0 4
19266: PUSH
19267: LD_VAR 0 5
19271: ST_TO_ADDR
// end ;
19272: LD_VAR 0 4
19276: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19277: LD_INT 0
19279: PPUSH
19280: PPUSH
// if not side or not nation then
19281: LD_VAR 0 1
19285: NOT
19286: IFTRUE 19295
19288: PUSH
19289: LD_VAR 0 2
19293: NOT
19294: OR
19295: IFFALSE 19299
// exit ;
19297: GO 20093
// case nation of nation_american :
19299: LD_VAR 0 2
19303: PUSH
19304: LD_INT 1
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19534
19312: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
19313: LD_ADDR_VAR 0 4
19317: PUSH
19318: LD_INT 35
19320: PUSH
19321: LD_INT 45
19323: PUSH
19324: LD_INT 46
19326: PUSH
19327: LD_INT 47
19329: PUSH
19330: LD_INT 82
19332: PUSH
19333: LD_INT 83
19335: PUSH
19336: LD_INT 84
19338: PUSH
19339: LD_INT 85
19341: PUSH
19342: LD_INT 86
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: LD_INT 6
19353: PUSH
19354: LD_INT 15
19356: PUSH
19357: LD_INT 16
19359: PUSH
19360: LD_INT 7
19362: PUSH
19363: LD_INT 12
19365: PUSH
19366: LD_INT 13
19368: PUSH
19369: LD_INT 10
19371: PUSH
19372: LD_INT 14
19374: PUSH
19375: LD_INT 20
19377: PUSH
19378: LD_INT 21
19380: PUSH
19381: LD_INT 22
19383: PUSH
19384: LD_INT 25
19386: PUSH
19387: LD_INT 32
19389: PUSH
19390: LD_INT 27
19392: PUSH
19393: LD_INT 36
19395: PUSH
19396: LD_INT 69
19398: PUSH
19399: LD_INT 39
19401: PUSH
19402: LD_INT 34
19404: PUSH
19405: LD_INT 40
19407: PUSH
19408: LD_INT 48
19410: PUSH
19411: LD_INT 49
19413: PUSH
19414: LD_INT 50
19416: PUSH
19417: LD_INT 51
19419: PUSH
19420: LD_INT 52
19422: PUSH
19423: LD_INT 53
19425: PUSH
19426: LD_INT 54
19428: PUSH
19429: LD_INT 55
19431: PUSH
19432: LD_INT 56
19434: PUSH
19435: LD_INT 57
19437: PUSH
19438: LD_INT 58
19440: PUSH
19441: LD_INT 59
19443: PUSH
19444: LD_INT 60
19446: PUSH
19447: LD_INT 61
19449: PUSH
19450: LD_INT 62
19452: PUSH
19453: LD_INT 80
19455: PUSH
19456: LD_INT 82
19458: PUSH
19459: LD_INT 83
19461: PUSH
19462: LD_INT 84
19464: PUSH
19465: LD_INT 85
19467: PUSH
19468: LD_INT 86
19470: PUSH
19471: LD_INT 90
19473: PUSH
19474: LD_INT 93
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: ST_TO_ADDR
19532: GO 20015
19534: LD_INT 2
19536: DOUBLE
19537: EQUAL
19538: IFTRUE 19542
19540: GO 19776
19542: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
19543: LD_ADDR_VAR 0 4
19547: PUSH
19548: LD_INT 35
19550: PUSH
19551: LD_INT 45
19553: PUSH
19554: LD_INT 46
19556: PUSH
19557: LD_INT 47
19559: PUSH
19560: LD_INT 82
19562: PUSH
19563: LD_INT 83
19565: PUSH
19566: LD_INT 84
19568: PUSH
19569: LD_INT 85
19571: PUSH
19572: LD_INT 87
19574: PUSH
19575: LD_INT 70
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: LD_INT 11
19583: PUSH
19584: LD_INT 3
19586: PUSH
19587: LD_INT 4
19589: PUSH
19590: LD_INT 5
19592: PUSH
19593: LD_INT 6
19595: PUSH
19596: LD_INT 15
19598: PUSH
19599: LD_INT 18
19601: PUSH
19602: LD_INT 7
19604: PUSH
19605: LD_INT 17
19607: PUSH
19608: LD_INT 8
19610: PUSH
19611: LD_INT 20
19613: PUSH
19614: LD_INT 21
19616: PUSH
19617: LD_INT 22
19619: PUSH
19620: LD_INT 72
19622: PUSH
19623: LD_INT 26
19625: PUSH
19626: LD_INT 69
19628: PUSH
19629: LD_INT 39
19631: PUSH
19632: LD_INT 40
19634: PUSH
19635: LD_INT 41
19637: PUSH
19638: LD_INT 42
19640: PUSH
19641: LD_INT 43
19643: PUSH
19644: LD_INT 48
19646: PUSH
19647: LD_INT 49
19649: PUSH
19650: LD_INT 50
19652: PUSH
19653: LD_INT 51
19655: PUSH
19656: LD_INT 52
19658: PUSH
19659: LD_INT 53
19661: PUSH
19662: LD_INT 54
19664: PUSH
19665: LD_INT 55
19667: PUSH
19668: LD_INT 56
19670: PUSH
19671: LD_INT 60
19673: PUSH
19674: LD_INT 61
19676: PUSH
19677: LD_INT 62
19679: PUSH
19680: LD_INT 66
19682: PUSH
19683: LD_INT 67
19685: PUSH
19686: LD_INT 68
19688: PUSH
19689: LD_INT 81
19691: PUSH
19692: LD_INT 82
19694: PUSH
19695: LD_INT 83
19697: PUSH
19698: LD_INT 84
19700: PUSH
19701: LD_INT 85
19703: PUSH
19704: LD_INT 87
19706: PUSH
19707: LD_INT 88
19709: PUSH
19710: LD_INT 92
19712: PUSH
19713: LD_INT 94
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: ST_TO_ADDR
19774: GO 20015
19776: LD_INT 3
19778: DOUBLE
19779: EQUAL
19780: IFTRUE 19784
19782: GO 20014
19784: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
19785: LD_ADDR_VAR 0 4
19789: PUSH
19790: LD_INT 46
19792: PUSH
19793: LD_INT 47
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: LD_INT 2
19801: PUSH
19802: LD_INT 82
19804: PUSH
19805: LD_INT 83
19807: PUSH
19808: LD_INT 84
19810: PUSH
19811: LD_INT 85
19813: PUSH
19814: LD_INT 86
19816: PUSH
19817: LD_INT 11
19819: PUSH
19820: LD_INT 9
19822: PUSH
19823: LD_INT 20
19825: PUSH
19826: LD_INT 19
19828: PUSH
19829: LD_INT 21
19831: PUSH
19832: LD_INT 24
19834: PUSH
19835: LD_INT 22
19837: PUSH
19838: LD_INT 25
19840: PUSH
19841: LD_INT 28
19843: PUSH
19844: LD_INT 29
19846: PUSH
19847: LD_INT 30
19849: PUSH
19850: LD_INT 31
19852: PUSH
19853: LD_INT 37
19855: PUSH
19856: LD_INT 38
19858: PUSH
19859: LD_INT 32
19861: PUSH
19862: LD_INT 27
19864: PUSH
19865: LD_INT 33
19867: PUSH
19868: LD_INT 69
19870: PUSH
19871: LD_INT 39
19873: PUSH
19874: LD_INT 34
19876: PUSH
19877: LD_INT 40
19879: PUSH
19880: LD_INT 71
19882: PUSH
19883: LD_INT 23
19885: PUSH
19886: LD_INT 44
19888: PUSH
19889: LD_INT 48
19891: PUSH
19892: LD_INT 49
19894: PUSH
19895: LD_INT 50
19897: PUSH
19898: LD_INT 51
19900: PUSH
19901: LD_INT 52
19903: PUSH
19904: LD_INT 53
19906: PUSH
19907: LD_INT 54
19909: PUSH
19910: LD_INT 55
19912: PUSH
19913: LD_INT 56
19915: PUSH
19916: LD_INT 57
19918: PUSH
19919: LD_INT 58
19921: PUSH
19922: LD_INT 59
19924: PUSH
19925: LD_INT 63
19927: PUSH
19928: LD_INT 64
19930: PUSH
19931: LD_INT 65
19933: PUSH
19934: LD_INT 82
19936: PUSH
19937: LD_INT 83
19939: PUSH
19940: LD_INT 84
19942: PUSH
19943: LD_INT 85
19945: PUSH
19946: LD_INT 86
19948: PUSH
19949: LD_INT 89
19951: PUSH
19952: LD_INT 91
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: ST_TO_ADDR
20012: GO 20015
20014: POP
// if state > - 1 and state < 3 then
20015: LD_VAR 0 3
20019: PUSH
20020: LD_INT 1
20022: NEG
20023: GREATER
20024: IFFALSE 20036
20026: PUSH
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 3
20034: LESS
20035: AND
20036: IFFALSE 20093
// for i in result do
20038: LD_ADDR_VAR 0 5
20042: PUSH
20043: LD_VAR 0 4
20047: PUSH
20048: FOR_IN
20049: IFFALSE 20091
// if GetTech ( i , side ) <> state then
20051: LD_VAR 0 5
20055: PPUSH
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 321
20065: PUSH
20066: LD_VAR 0 3
20070: NONEQUAL
20071: IFFALSE 20089
// result := result diff i ;
20073: LD_ADDR_VAR 0 4
20077: PUSH
20078: LD_VAR 0 4
20082: PUSH
20083: LD_VAR 0 5
20087: DIFF
20088: ST_TO_ADDR
20089: GO 20048
20091: POP
20092: POP
// end ;
20093: LD_VAR 0 4
20097: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20098: LD_INT 0
20100: PPUSH
20101: PPUSH
20102: PPUSH
// result := true ;
20103: LD_ADDR_VAR 0 3
20107: PUSH
20108: LD_INT 1
20110: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20111: LD_ADDR_VAR 0 5
20115: PUSH
20116: LD_VAR 0 2
20120: PPUSH
20121: CALL_OW 480
20125: ST_TO_ADDR
// if not tmp then
20126: LD_VAR 0 5
20130: NOT
20131: IFFALSE 20135
// exit ;
20133: GO 20184
// for i in tmp do
20135: LD_ADDR_VAR 0 4
20139: PUSH
20140: LD_VAR 0 5
20144: PUSH
20145: FOR_IN
20146: IFFALSE 20182
// if GetTech ( i , side ) <> state_researched then
20148: LD_VAR 0 4
20152: PPUSH
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 321
20162: PUSH
20163: LD_INT 2
20165: NONEQUAL
20166: IFFALSE 20180
// begin result := false ;
20168: LD_ADDR_VAR 0 3
20172: PUSH
20173: LD_INT 0
20175: ST_TO_ADDR
// exit ;
20176: POP
20177: POP
20178: GO 20184
// end ;
20180: GO 20145
20182: POP
20183: POP
// end ;
20184: LD_VAR 0 3
20188: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20189: LD_INT 0
20191: PPUSH
20192: PPUSH
20193: PPUSH
20194: PPUSH
20195: PPUSH
20196: PPUSH
20197: PPUSH
20198: PPUSH
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
20203: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20204: LD_VAR 0 1
20208: NOT
20209: IFTRUE 20226
20211: PUSH
20212: LD_VAR 0 1
20216: PPUSH
20217: CALL_OW 257
20221: PUSH
20222: LD_INT 9
20224: NONEQUAL
20225: OR
20226: IFFALSE 20230
// exit ;
20228: GO 20809
// side := GetSide ( unit ) ;
20230: LD_ADDR_VAR 0 9
20234: PUSH
20235: LD_VAR 0 1
20239: PPUSH
20240: CALL_OW 255
20244: ST_TO_ADDR
// tech_space := tech_spacanom ;
20245: LD_ADDR_VAR 0 12
20249: PUSH
20250: LD_INT 29
20252: ST_TO_ADDR
// tech_time := tech_taurad ;
20253: LD_ADDR_VAR 0 13
20257: PUSH
20258: LD_INT 28
20260: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20261: LD_ADDR_VAR 0 11
20265: PUSH
20266: LD_VAR 0 1
20270: PPUSH
20271: CALL_OW 310
20275: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20276: LD_VAR 0 11
20280: PPUSH
20281: CALL_OW 247
20285: PUSH
20286: LD_INT 2
20288: EQUAL
20289: IFFALSE 20293
// exit ;
20291: GO 20809
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20293: LD_ADDR_VAR 0 8
20297: PUSH
20298: LD_INT 81
20300: PUSH
20301: LD_VAR 0 9
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: LD_INT 21
20315: PUSH
20316: LD_INT 3
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PPUSH
20331: CALL_OW 69
20335: ST_TO_ADDR
// if not tmp then
20336: LD_VAR 0 8
20340: NOT
20341: IFFALSE 20345
// exit ;
20343: GO 20809
// if in_unit then
20345: LD_VAR 0 11
20349: IFFALSE 20373
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20351: LD_ADDR_VAR 0 10
20355: PUSH
20356: LD_VAR 0 8
20360: PPUSH
20361: LD_VAR 0 11
20365: PPUSH
20366: CALL_OW 74
20370: ST_TO_ADDR
20371: GO 20393
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20373: LD_ADDR_VAR 0 10
20377: PUSH
20378: LD_VAR 0 8
20382: PPUSH
20383: LD_VAR 0 1
20387: PPUSH
20388: CALL_OW 74
20392: ST_TO_ADDR
// if not enemy then
20393: LD_VAR 0 10
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20809
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20402: LD_VAR 0 11
20406: IFFALSE 20428
20408: PUSH
20409: LD_VAR 0 11
20413: PPUSH
20414: LD_VAR 0 10
20418: PPUSH
20419: CALL_OW 296
20423: PUSH
20424: LD_INT 13
20426: GREATER
20427: AND
20428: IFTRUE 20450
20430: PUSH
20431: LD_VAR 0 1
20435: PPUSH
20436: LD_VAR 0 10
20440: PPUSH
20441: CALL_OW 296
20445: PUSH
20446: LD_INT 12
20448: GREATER
20449: OR
20450: IFFALSE 20454
// exit ;
20452: GO 20809
// missile := [ 1 ] ;
20454: LD_ADDR_VAR 0 14
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: EMPTY
20463: LIST
20464: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20465: LD_VAR 0 9
20469: PPUSH
20470: LD_VAR 0 12
20474: PPUSH
20475: CALL_OW 325
20479: IFFALSE 20508
// missile := Replace ( missile , missile + 1 , 2 ) ;
20481: LD_ADDR_VAR 0 14
20485: PUSH
20486: LD_VAR 0 14
20490: PPUSH
20491: LD_VAR 0 14
20495: PUSH
20496: LD_INT 1
20498: PLUS
20499: PPUSH
20500: LD_INT 2
20502: PPUSH
20503: CALL_OW 1
20507: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20508: LD_VAR 0 9
20512: PPUSH
20513: LD_VAR 0 13
20517: PPUSH
20518: CALL_OW 325
20522: IFFALSE 20546
20524: PUSH
20525: LD_VAR 0 10
20529: PPUSH
20530: CALL_OW 255
20534: PPUSH
20535: LD_VAR 0 13
20539: PPUSH
20540: CALL_OW 325
20544: NOT
20545: AND
20546: IFFALSE 20575
// missile := Replace ( missile , missile + 1 , 3 ) ;
20548: LD_ADDR_VAR 0 14
20552: PUSH
20553: LD_VAR 0 14
20557: PPUSH
20558: LD_VAR 0 14
20562: PUSH
20563: LD_INT 1
20565: PLUS
20566: PPUSH
20567: LD_INT 3
20569: PPUSH
20570: CALL_OW 1
20574: ST_TO_ADDR
// if missile < 2 then
20575: LD_VAR 0 14
20579: PUSH
20580: LD_INT 2
20582: LESS
20583: IFFALSE 20587
// exit ;
20585: GO 20809
// x := GetX ( enemy ) ;
20587: LD_ADDR_VAR 0 4
20591: PUSH
20592: LD_VAR 0 10
20596: PPUSH
20597: CALL_OW 250
20601: ST_TO_ADDR
// y := GetY ( enemy ) ;
20602: LD_ADDR_VAR 0 5
20606: PUSH
20607: LD_VAR 0 10
20611: PPUSH
20612: CALL_OW 251
20616: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20617: LD_ADDR_VAR 0 6
20621: PUSH
20622: LD_VAR 0 4
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PPUSH
20631: LD_INT 1
20633: PPUSH
20634: CALL_OW 12
20638: PLUS
20639: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20640: LD_ADDR_VAR 0 7
20644: PUSH
20645: LD_VAR 0 5
20649: PUSH
20650: LD_INT 1
20652: NEG
20653: PPUSH
20654: LD_INT 1
20656: PPUSH
20657: CALL_OW 12
20661: PLUS
20662: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20663: LD_VAR 0 6
20667: PPUSH
20668: LD_VAR 0 7
20672: PPUSH
20673: CALL_OW 488
20677: NOT
20678: IFFALSE 20700
// begin _x := x ;
20680: LD_ADDR_VAR 0 6
20684: PUSH
20685: LD_VAR 0 4
20689: ST_TO_ADDR
// _y := y ;
20690: LD_ADDR_VAR 0 7
20694: PUSH
20695: LD_VAR 0 5
20699: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20700: LD_ADDR_VAR 0 3
20704: PUSH
20705: LD_INT 1
20707: PPUSH
20708: LD_VAR 0 14
20712: PPUSH
20713: CALL_OW 12
20717: ST_TO_ADDR
// case i of 1 :
20718: LD_VAR 0 3
20722: PUSH
20723: LD_INT 1
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20748
20731: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20732: LD_VAR 0 1
20736: PPUSH
20737: LD_VAR 0 10
20741: PPUSH
20742: CALL_OW 115
20746: GO 20809
20748: LD_INT 2
20750: DOUBLE
20751: EQUAL
20752: IFTRUE 20756
20754: GO 20778
20756: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_VAR 0 6
20766: PPUSH
20767: LD_VAR 0 7
20771: PPUSH
20772: CALL_OW 153
20776: GO 20809
20778: LD_INT 3
20780: DOUBLE
20781: EQUAL
20782: IFTRUE 20786
20784: GO 20808
20786: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20787: LD_VAR 0 1
20791: PPUSH
20792: LD_VAR 0 6
20796: PPUSH
20797: LD_VAR 0 7
20801: PPUSH
20802: CALL_OW 154
20806: GO 20809
20808: POP
// end ;
20809: LD_VAR 0 2
20813: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20814: LD_INT 0
20816: PPUSH
20817: PPUSH
20818: PPUSH
20819: PPUSH
20820: PPUSH
20821: PPUSH
// if not unit or not building then
20822: LD_VAR 0 1
20826: NOT
20827: IFTRUE 20836
20829: PUSH
20830: LD_VAR 0 2
20834: NOT
20835: OR
20836: IFFALSE 20840
// exit ;
20838: GO 20998
// x := GetX ( building ) ;
20840: LD_ADDR_VAR 0 5
20844: PUSH
20845: LD_VAR 0 2
20849: PPUSH
20850: CALL_OW 250
20854: ST_TO_ADDR
// y := GetY ( building ) ;
20855: LD_ADDR_VAR 0 6
20859: PUSH
20860: LD_VAR 0 2
20864: PPUSH
20865: CALL_OW 251
20869: ST_TO_ADDR
// for i := 0 to 5 do
20870: LD_ADDR_VAR 0 4
20874: PUSH
20875: DOUBLE
20876: LD_INT 0
20878: DEC
20879: ST_TO_ADDR
20880: LD_INT 5
20882: PUSH
20883: FOR_TO
20884: IFFALSE 20996
// begin _x := ShiftX ( x , i , 3 ) ;
20886: LD_ADDR_VAR 0 7
20890: PUSH
20891: LD_VAR 0 5
20895: PPUSH
20896: LD_VAR 0 4
20900: PPUSH
20901: LD_INT 3
20903: PPUSH
20904: CALL_OW 272
20908: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20909: LD_ADDR_VAR 0 8
20913: PUSH
20914: LD_VAR 0 6
20918: PPUSH
20919: LD_VAR 0 4
20923: PPUSH
20924: LD_INT 3
20926: PPUSH
20927: CALL_OW 273
20931: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20932: LD_VAR 0 7
20936: PPUSH
20937: LD_VAR 0 8
20941: PPUSH
20942: CALL_OW 488
20946: NOT
20947: IFFALSE 20951
// continue ;
20949: GO 20883
// if HexInfo ( _x , _y ) = 0 then
20951: LD_VAR 0 7
20955: PPUSH
20956: LD_VAR 0 8
20960: PPUSH
20961: CALL_OW 428
20965: PUSH
20966: LD_INT 0
20968: EQUAL
20969: IFFALSE 20994
// begin ComMoveXY ( unit , _x , _y ) ;
20971: LD_VAR 0 1
20975: PPUSH
20976: LD_VAR 0 7
20980: PPUSH
20981: LD_VAR 0 8
20985: PPUSH
20986: CALL_OW 111
// exit ;
20990: POP
20991: POP
20992: GO 20998
// end ; end ;
20994: GO 20883
20996: POP
20997: POP
// end ;
20998: LD_VAR 0 3
21002: RET
// export function ScanBase ( side , base_area ) ; begin
21003: LD_INT 0
21005: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21006: LD_ADDR_VAR 0 3
21010: PUSH
21011: LD_VAR 0 2
21015: PPUSH
21016: LD_INT 81
21018: PUSH
21019: LD_VAR 0 1
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PPUSH
21028: CALL_OW 70
21032: ST_TO_ADDR
// end ;
21033: LD_VAR 0 3
21037: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21038: LD_INT 0
21040: PPUSH
21041: PPUSH
21042: PPUSH
21043: PPUSH
// result := false ;
21044: LD_ADDR_VAR 0 2
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// side := GetSide ( unit ) ;
21052: LD_ADDR_VAR 0 3
21056: PUSH
21057: LD_VAR 0 1
21061: PPUSH
21062: CALL_OW 255
21066: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21067: LD_ADDR_VAR 0 4
21071: PUSH
21072: LD_VAR 0 1
21076: PPUSH
21077: CALL_OW 248
21081: ST_TO_ADDR
// case nat of 1 :
21082: LD_VAR 0 4
21086: PUSH
21087: LD_INT 1
21089: DOUBLE
21090: EQUAL
21091: IFTRUE 21095
21093: GO 21106
21095: POP
// tech := tech_lassight ; 2 :
21096: LD_ADDR_VAR 0 5
21100: PUSH
21101: LD_INT 12
21103: ST_TO_ADDR
21104: GO 21145
21106: LD_INT 2
21108: DOUBLE
21109: EQUAL
21110: IFTRUE 21114
21112: GO 21125
21114: POP
// tech := tech_mortar ; 3 :
21115: LD_ADDR_VAR 0 5
21119: PUSH
21120: LD_INT 41
21122: ST_TO_ADDR
21123: GO 21145
21125: LD_INT 3
21127: DOUBLE
21128: EQUAL
21129: IFTRUE 21133
21131: GO 21144
21133: POP
// tech := tech_bazooka ; end ;
21134: LD_ADDR_VAR 0 5
21138: PUSH
21139: LD_INT 44
21141: ST_TO_ADDR
21142: GO 21145
21144: POP
// if Researched ( side , tech ) then
21145: LD_VAR 0 3
21149: PPUSH
21150: LD_VAR 0 5
21154: PPUSH
21155: CALL_OW 325
21159: IFFALSE 21186
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21161: LD_ADDR_VAR 0 2
21165: PUSH
21166: LD_INT 5
21168: PUSH
21169: LD_INT 8
21171: PUSH
21172: LD_INT 9
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: PUSH
21180: LD_VAR 0 4
21184: ARRAY
21185: ST_TO_ADDR
// end ;
21186: LD_VAR 0 2
21190: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21191: LD_INT 0
21193: PPUSH
21194: PPUSH
21195: PPUSH
// if not mines then
21196: LD_VAR 0 2
21200: NOT
21201: IFFALSE 21205
// exit ;
21203: GO 21349
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21205: LD_ADDR_VAR 0 5
21209: PUSH
21210: LD_INT 81
21212: PUSH
21213: LD_VAR 0 1
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 3
21224: PUSH
21225: LD_INT 21
21227: PUSH
21228: LD_INT 3
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PPUSH
21243: CALL_OW 69
21247: ST_TO_ADDR
// for i in mines do
21248: LD_ADDR_VAR 0 4
21252: PUSH
21253: LD_VAR 0 2
21257: PUSH
21258: FOR_IN
21259: IFFALSE 21347
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21261: LD_VAR 0 4
21265: PUSH
21266: LD_INT 1
21268: ARRAY
21269: PPUSH
21270: LD_VAR 0 4
21274: PUSH
21275: LD_INT 2
21277: ARRAY
21278: PPUSH
21279: CALL_OW 458
21283: NOT
21284: IFFALSE 21288
// continue ;
21286: GO 21258
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21288: LD_VAR 0 4
21292: PUSH
21293: LD_INT 1
21295: ARRAY
21296: PPUSH
21297: LD_VAR 0 4
21301: PUSH
21302: LD_INT 2
21304: ARRAY
21305: PPUSH
21306: CALL_OW 428
21310: PUSH
21311: LD_VAR 0 5
21315: IN
21316: IFFALSE 21345
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21318: LD_VAR 0 4
21322: PUSH
21323: LD_INT 1
21325: ARRAY
21326: PPUSH
21327: LD_VAR 0 4
21331: PUSH
21332: LD_INT 2
21334: ARRAY
21335: PPUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 456
// end ;
21345: GO 21258
21347: POP
21348: POP
// end ;
21349: LD_VAR 0 3
21353: RET
// export function Count ( array ) ; begin
21354: LD_INT 0
21356: PPUSH
// result := array + 0 ;
21357: LD_ADDR_VAR 0 2
21361: PUSH
21362: LD_VAR 0 1
21366: PUSH
21367: LD_INT 0
21369: PLUS
21370: ST_TO_ADDR
// end ;
21371: LD_VAR 0 2
21375: RET
// export function IsEmpty ( building ) ; begin
21376: LD_INT 0
21378: PPUSH
// if not building then
21379: LD_VAR 0 1
21383: NOT
21384: IFFALSE 21388
// exit ;
21386: GO 21431
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21388: LD_ADDR_VAR 0 2
21392: PUSH
21393: LD_VAR 0 1
21397: PUSH
21398: LD_INT 22
21400: PUSH
21401: LD_VAR 0 1
21405: PPUSH
21406: CALL_OW 255
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 58
21417: PUSH
21418: EMPTY
21419: LIST
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PPUSH
21425: CALL_OW 69
21429: IN
21430: ST_TO_ADDR
// end ;
21431: LD_VAR 0 2
21435: RET
// export function IsNotFull ( building ) ; var places ; begin
21436: LD_INT 0
21438: PPUSH
21439: PPUSH
// if not building then
21440: LD_VAR 0 1
21444: NOT
21445: IFFALSE 21449
// exit ;
21447: GO 21477
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
21449: LD_ADDR_VAR 0 2
21453: PUSH
21454: LD_VAR 0 1
21458: PPUSH
21459: LD_INT 3
21461: PUSH
21462: LD_INT 62
21464: PUSH
21465: EMPTY
21466: LIST
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PPUSH
21472: CALL_OW 72
21476: ST_TO_ADDR
// end ;
21477: LD_VAR 0 2
21481: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21482: LD_INT 0
21484: PPUSH
21485: PPUSH
21486: PPUSH
21487: PPUSH
// tmp := [ ] ;
21488: LD_ADDR_VAR 0 3
21492: PUSH
21493: EMPTY
21494: ST_TO_ADDR
// list := [ ] ;
21495: LD_ADDR_VAR 0 5
21499: PUSH
21500: EMPTY
21501: ST_TO_ADDR
// for i = 16 to 25 do
21502: LD_ADDR_VAR 0 4
21506: PUSH
21507: DOUBLE
21508: LD_INT 16
21510: DEC
21511: ST_TO_ADDR
21512: LD_INT 25
21514: PUSH
21515: FOR_TO
21516: IFFALSE 21589
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21518: LD_ADDR_VAR 0 3
21522: PUSH
21523: LD_VAR 0 3
21527: PUSH
21528: LD_INT 22
21530: PUSH
21531: LD_VAR 0 1
21535: PPUSH
21536: CALL_OW 255
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 91
21547: PUSH
21548: LD_VAR 0 1
21552: PUSH
21553: LD_INT 6
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 30
21563: PUSH
21564: LD_VAR 0 4
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: LIST
21577: PUSH
21578: EMPTY
21579: LIST
21580: PPUSH
21581: CALL_OW 69
21585: ADD
21586: ST_TO_ADDR
21587: GO 21515
21589: POP
21590: POP
// for i = 1 to tmp do
21591: LD_ADDR_VAR 0 4
21595: PUSH
21596: DOUBLE
21597: LD_INT 1
21599: DEC
21600: ST_TO_ADDR
21601: LD_VAR 0 3
21605: PUSH
21606: FOR_TO
21607: IFFALSE 21695
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21609: LD_ADDR_VAR 0 5
21613: PUSH
21614: LD_VAR 0 5
21618: PUSH
21619: LD_VAR 0 3
21623: PUSH
21624: LD_VAR 0 4
21628: ARRAY
21629: PPUSH
21630: CALL_OW 266
21634: PUSH
21635: LD_VAR 0 3
21639: PUSH
21640: LD_VAR 0 4
21644: ARRAY
21645: PPUSH
21646: CALL_OW 250
21650: PUSH
21651: LD_VAR 0 3
21655: PUSH
21656: LD_VAR 0 4
21660: ARRAY
21661: PPUSH
21662: CALL_OW 251
21666: PUSH
21667: LD_VAR 0 3
21671: PUSH
21672: LD_VAR 0 4
21676: ARRAY
21677: PPUSH
21678: CALL_OW 254
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: ADD
21692: ST_TO_ADDR
21693: GO 21606
21695: POP
21696: POP
// result := list ;
21697: LD_ADDR_VAR 0 2
21701: PUSH
21702: LD_VAR 0 5
21706: ST_TO_ADDR
// end ;
21707: LD_VAR 0 2
21711: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21712: LD_INT 0
21714: PPUSH
21715: PPUSH
21716: PPUSH
21717: PPUSH
21718: PPUSH
21719: PPUSH
21720: PPUSH
// if not factory then
21721: LD_VAR 0 1
21725: NOT
21726: IFFALSE 21730
// exit ;
21728: GO 22333
// if control = control_apeman then
21730: LD_VAR 0 4
21734: PUSH
21735: LD_INT 5
21737: EQUAL
21738: IFFALSE 21847
// begin tmp := UnitsInside ( factory ) ;
21740: LD_ADDR_VAR 0 8
21744: PUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: CALL_OW 313
21754: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21755: LD_VAR 0 8
21759: PPUSH
21760: LD_INT 25
21762: PUSH
21763: LD_INT 12
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PPUSH
21770: CALL_OW 72
21774: NOT
21775: IFFALSE 21785
// control := control_manual ;
21777: LD_ADDR_VAR 0 4
21781: PUSH
21782: LD_INT 1
21784: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21785: LD_ADDR_VAR 0 8
21789: PUSH
21790: LD_VAR 0 1
21794: PPUSH
21795: CALL 21482 0 1
21799: ST_TO_ADDR
// if tmp then
21800: LD_VAR 0 8
21804: IFFALSE 21847
// begin for i in tmp do
21806: LD_ADDR_VAR 0 7
21810: PUSH
21811: LD_VAR 0 8
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21845
// if i [ 1 ] = b_ext_radio then
21819: LD_VAR 0 7
21823: PUSH
21824: LD_INT 1
21826: ARRAY
21827: PUSH
21828: LD_INT 22
21830: EQUAL
21831: IFFALSE 21843
// begin control := control_remote ;
21833: LD_ADDR_VAR 0 4
21837: PUSH
21838: LD_INT 2
21840: ST_TO_ADDR
// break ;
21841: GO 21845
// end ;
21843: GO 21816
21845: POP
21846: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21847: LD_VAR 0 1
21851: PPUSH
21852: LD_VAR 0 2
21856: PPUSH
21857: LD_VAR 0 3
21861: PPUSH
21862: LD_VAR 0 4
21866: PPUSH
21867: LD_VAR 0 5
21871: PPUSH
21872: CALL_OW 448
21876: IFFALSE 21911
// begin result := [ chassis , engine , control , weapon ] ;
21878: LD_ADDR_VAR 0 6
21882: PUSH
21883: LD_VAR 0 2
21887: PUSH
21888: LD_VAR 0 3
21892: PUSH
21893: LD_VAR 0 4
21897: PUSH
21898: LD_VAR 0 5
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: ST_TO_ADDR
// exit ;
21909: GO 22333
// end ; _chassis := AvailableChassisList ( factory ) ;
21911: LD_ADDR_VAR 0 9
21915: PUSH
21916: LD_VAR 0 1
21920: PPUSH
21921: CALL_OW 475
21925: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
21926: LD_ADDR_VAR 0 11
21930: PUSH
21931: LD_VAR 0 1
21935: PPUSH
21936: CALL_OW 476
21940: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
21941: LD_ADDR_VAR 0 12
21945: PUSH
21946: LD_VAR 0 1
21950: PPUSH
21951: CALL_OW 477
21955: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
21956: LD_ADDR_VAR 0 10
21960: PUSH
21961: LD_VAR 0 1
21965: PPUSH
21966: CALL_OW 478
21970: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
21971: LD_VAR 0 9
21975: NOT
21976: IFTRUE 21985
21978: PUSH
21979: LD_VAR 0 11
21983: NOT
21984: OR
21985: IFTRUE 21994
21987: PUSH
21988: LD_VAR 0 12
21992: NOT
21993: OR
21994: IFTRUE 22003
21996: PUSH
21997: LD_VAR 0 10
22001: NOT
22002: OR
22003: IFFALSE 22038
// begin result := [ chassis , engine , control , weapon ] ;
22005: LD_ADDR_VAR 0 6
22009: PUSH
22010: LD_VAR 0 2
22014: PUSH
22015: LD_VAR 0 3
22019: PUSH
22020: LD_VAR 0 4
22024: PUSH
22025: LD_VAR 0 5
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: ST_TO_ADDR
// exit ;
22036: GO 22333
// end ; if not chassis in _chassis then
22038: LD_VAR 0 2
22042: PUSH
22043: LD_VAR 0 9
22047: IN
22048: NOT
22049: IFFALSE 22075
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22051: LD_ADDR_VAR 0 2
22055: PUSH
22056: LD_VAR 0 9
22060: PUSH
22061: LD_INT 1
22063: PPUSH
22064: LD_VAR 0 9
22068: PPUSH
22069: CALL_OW 12
22073: ARRAY
22074: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22075: LD_VAR 0 2
22079: PPUSH
22080: LD_VAR 0 3
22084: PPUSH
22085: CALL 22338 0 2
22089: NOT
22090: IFFALSE 22151
// repeat engine := _engine [ 1 ] ;
22092: LD_ADDR_VAR 0 3
22096: PUSH
22097: LD_VAR 0 11
22101: PUSH
22102: LD_INT 1
22104: ARRAY
22105: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22106: LD_ADDR_VAR 0 11
22110: PUSH
22111: LD_VAR 0 11
22115: PPUSH
22116: LD_INT 1
22118: PPUSH
22119: CALL_OW 3
22123: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_VAR 0 3
22133: PPUSH
22134: CALL 22338 0 2
22138: IFTRUE 22149
22140: PUSH
22141: LD_VAR 0 11
22145: PUSH
22146: EMPTY
22147: EQUAL
22148: OR
22149: IFFALSE 22092
// if not control in _control then
22151: LD_VAR 0 4
22155: PUSH
22156: LD_VAR 0 12
22160: IN
22161: NOT
22162: IFFALSE 22188
// control := _control [ rand ( 1 , _control ) ] ;
22164: LD_ADDR_VAR 0 4
22168: PUSH
22169: LD_VAR 0 12
22173: PUSH
22174: LD_INT 1
22176: PPUSH
22177: LD_VAR 0 12
22181: PPUSH
22182: CALL_OW 12
22186: ARRAY
22187: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22188: LD_VAR 0 2
22192: PPUSH
22193: LD_VAR 0 5
22197: PPUSH
22198: CALL 22560 0 2
22202: NOT
22203: IFFALSE 22264
// repeat weapon := _weapon [ 1 ] ;
22205: LD_ADDR_VAR 0 5
22209: PUSH
22210: LD_VAR 0 10
22214: PUSH
22215: LD_INT 1
22217: ARRAY
22218: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22219: LD_ADDR_VAR 0 10
22223: PUSH
22224: LD_VAR 0 10
22228: PPUSH
22229: LD_INT 1
22231: PPUSH
22232: CALL_OW 3
22236: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22237: LD_VAR 0 2
22241: PPUSH
22242: LD_VAR 0 5
22246: PPUSH
22247: CALL 22560 0 2
22251: IFTRUE 22262
22253: PUSH
22254: LD_VAR 0 10
22258: PUSH
22259: EMPTY
22260: EQUAL
22261: OR
22262: IFFALSE 22205
// result := [ ] ;
22264: LD_ADDR_VAR 0 6
22268: PUSH
22269: EMPTY
22270: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22271: LD_VAR 0 1
22275: PPUSH
22276: LD_VAR 0 2
22280: PPUSH
22281: LD_VAR 0 3
22285: PPUSH
22286: LD_VAR 0 4
22290: PPUSH
22291: LD_VAR 0 5
22295: PPUSH
22296: CALL_OW 448
22300: IFFALSE 22333
// result := [ chassis , engine , control , weapon ] ;
22302: LD_ADDR_VAR 0 6
22306: PUSH
22307: LD_VAR 0 2
22311: PUSH
22312: LD_VAR 0 3
22316: PUSH
22317: LD_VAR 0 4
22321: PUSH
22322: LD_VAR 0 5
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: ST_TO_ADDR
// end ;
22333: LD_VAR 0 6
22337: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22338: LD_INT 0
22340: PPUSH
// if not chassis or not engine then
22341: LD_VAR 0 1
22345: NOT
22346: IFTRUE 22355
22348: PUSH
22349: LD_VAR 0 2
22353: NOT
22354: OR
22355: IFFALSE 22359
// exit ;
22357: GO 22555
// case engine of engine_solar :
22359: LD_VAR 0 2
22363: PUSH
22364: LD_INT 2
22366: DOUBLE
22367: EQUAL
22368: IFTRUE 22372
22370: GO 22410
22372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22373: LD_ADDR_VAR 0 3
22377: PUSH
22378: LD_INT 11
22380: PUSH
22381: LD_INT 12
22383: PUSH
22384: LD_INT 13
22386: PUSH
22387: LD_INT 14
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: LD_INT 3
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: ST_TO_ADDR
22408: GO 22539
22410: LD_INT 1
22412: DOUBLE
22413: EQUAL
22414: IFTRUE 22418
22416: GO 22480
22418: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22419: LD_ADDR_VAR 0 3
22423: PUSH
22424: LD_INT 11
22426: PUSH
22427: LD_INT 12
22429: PUSH
22430: LD_INT 13
22432: PUSH
22433: LD_INT 14
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: LD_INT 3
22444: PUSH
22445: LD_INT 4
22447: PUSH
22448: LD_INT 5
22450: PUSH
22451: LD_INT 21
22453: PUSH
22454: LD_INT 23
22456: PUSH
22457: LD_INT 22
22459: PUSH
22460: LD_INT 24
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: ST_TO_ADDR
22478: GO 22539
22480: LD_INT 3
22482: DOUBLE
22483: EQUAL
22484: IFTRUE 22488
22486: GO 22538
22488: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22489: LD_ADDR_VAR 0 3
22493: PUSH
22494: LD_INT 13
22496: PUSH
22497: LD_INT 14
22499: PUSH
22500: LD_INT 2
22502: PUSH
22503: LD_INT 3
22505: PUSH
22506: LD_INT 4
22508: PUSH
22509: LD_INT 5
22511: PUSH
22512: LD_INT 21
22514: PUSH
22515: LD_INT 22
22517: PUSH
22518: LD_INT 23
22520: PUSH
22521: LD_INT 24
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: ST_TO_ADDR
22536: GO 22539
22538: POP
// result := ( chassis in result ) ;
22539: LD_ADDR_VAR 0 3
22543: PUSH
22544: LD_VAR 0 1
22548: PUSH
22549: LD_VAR 0 3
22553: IN
22554: ST_TO_ADDR
// end ;
22555: LD_VAR 0 3
22559: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22560: LD_INT 0
22562: PPUSH
// if not chassis or not weapon then
22563: LD_VAR 0 1
22567: NOT
22568: IFTRUE 22577
22570: PUSH
22571: LD_VAR 0 2
22575: NOT
22576: OR
22577: IFFALSE 22581
// exit ;
22579: GO 23675
// case weapon of us_machine_gun :
22581: LD_VAR 0 2
22585: PUSH
22586: LD_INT 2
22588: DOUBLE
22589: EQUAL
22590: IFTRUE 22594
22592: GO 22624
22594: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22595: LD_ADDR_VAR 0 3
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: LD_INT 2
22605: PUSH
22606: LD_INT 3
22608: PUSH
22609: LD_INT 4
22611: PUSH
22612: LD_INT 5
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: ST_TO_ADDR
22622: GO 23659
22624: LD_INT 3
22626: DOUBLE
22627: EQUAL
22628: IFTRUE 22632
22630: GO 22662
22632: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22633: LD_ADDR_VAR 0 3
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: LD_INT 2
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: LD_INT 4
22649: PUSH
22650: LD_INT 5
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: ST_TO_ADDR
22660: GO 23659
22662: LD_INT 11
22664: DOUBLE
22665: EQUAL
22666: IFTRUE 22670
22668: GO 22700
22670: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22671: LD_ADDR_VAR 0 3
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 3
22684: PUSH
22685: LD_INT 4
22687: PUSH
22688: LD_INT 5
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: ST_TO_ADDR
22698: GO 23659
22700: LD_INT 4
22702: DOUBLE
22703: EQUAL
22704: IFTRUE 22708
22706: GO 22734
22708: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22709: LD_ADDR_VAR 0 3
22713: PUSH
22714: LD_INT 2
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: LD_INT 4
22722: PUSH
22723: LD_INT 5
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: ST_TO_ADDR
22732: GO 23659
22734: LD_INT 5
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 22768
22742: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22743: LD_ADDR_VAR 0 3
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 4
22756: PUSH
22757: LD_INT 5
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: ST_TO_ADDR
22766: GO 23659
22768: LD_INT 9
22770: DOUBLE
22771: EQUAL
22772: IFTRUE 22776
22774: GO 22802
22776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22777: LD_ADDR_VAR 0 3
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 4
22790: PUSH
22791: LD_INT 5
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: ST_TO_ADDR
22800: GO 23659
22802: LD_INT 7
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22836
22810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22811: LD_ADDR_VAR 0 3
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: LD_INT 3
22821: PUSH
22822: LD_INT 4
22824: PUSH
22825: LD_INT 5
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: ST_TO_ADDR
22834: GO 23659
22836: LD_INT 12
22838: DOUBLE
22839: EQUAL
22840: IFTRUE 22844
22842: GO 22870
22844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22845: LD_ADDR_VAR 0 3
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: LD_INT 3
22855: PUSH
22856: LD_INT 4
22858: PUSH
22859: LD_INT 5
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: ST_TO_ADDR
22868: GO 23659
22870: LD_INT 13
22872: DOUBLE
22873: EQUAL
22874: IFTRUE 22878
22876: GO 22904
22878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22879: LD_ADDR_VAR 0 3
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 3
22889: PUSH
22890: LD_INT 4
22892: PUSH
22893: LD_INT 5
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: ST_TO_ADDR
22902: GO 23659
22904: LD_INT 14
22906: DOUBLE
22907: EQUAL
22908: IFTRUE 22912
22910: GO 22930
22912: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
22913: LD_ADDR_VAR 0 3
22917: PUSH
22918: LD_INT 4
22920: PUSH
22921: LD_INT 5
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: ST_TO_ADDR
22928: GO 23659
22930: LD_INT 6
22932: DOUBLE
22933: EQUAL
22934: IFTRUE 22938
22936: GO 22956
22938: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
22939: LD_ADDR_VAR 0 3
22943: PUSH
22944: LD_INT 4
22946: PUSH
22947: LD_INT 5
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: ST_TO_ADDR
22954: GO 23659
22956: LD_INT 10
22958: DOUBLE
22959: EQUAL
22960: IFTRUE 22964
22962: GO 22982
22964: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
22965: LD_ADDR_VAR 0 3
22969: PUSH
22970: LD_INT 4
22972: PUSH
22973: LD_INT 5
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: ST_TO_ADDR
22980: GO 23659
22982: LD_INT 22
22984: DOUBLE
22985: EQUAL
22986: IFTRUE 22990
22988: GO 23016
22990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
22991: LD_ADDR_VAR 0 3
22995: PUSH
22996: LD_INT 11
22998: PUSH
22999: LD_INT 12
23001: PUSH
23002: LD_INT 13
23004: PUSH
23005: LD_INT 14
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: ST_TO_ADDR
23014: GO 23659
23016: LD_INT 23
23018: DOUBLE
23019: EQUAL
23020: IFTRUE 23024
23022: GO 23050
23024: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23025: LD_ADDR_VAR 0 3
23029: PUSH
23030: LD_INT 11
23032: PUSH
23033: LD_INT 12
23035: PUSH
23036: LD_INT 13
23038: PUSH
23039: LD_INT 14
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: ST_TO_ADDR
23048: GO 23659
23050: LD_INT 24
23052: DOUBLE
23053: EQUAL
23054: IFTRUE 23058
23056: GO 23084
23058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23059: LD_ADDR_VAR 0 3
23063: PUSH
23064: LD_INT 11
23066: PUSH
23067: LD_INT 12
23069: PUSH
23070: LD_INT 13
23072: PUSH
23073: LD_INT 14
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: ST_TO_ADDR
23082: GO 23659
23084: LD_INT 30
23086: DOUBLE
23087: EQUAL
23088: IFTRUE 23092
23090: GO 23118
23092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_INT 11
23100: PUSH
23101: LD_INT 12
23103: PUSH
23104: LD_INT 13
23106: PUSH
23107: LD_INT 14
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: ST_TO_ADDR
23116: GO 23659
23118: LD_INT 25
23120: DOUBLE
23121: EQUAL
23122: IFTRUE 23126
23124: GO 23144
23126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23127: LD_ADDR_VAR 0 3
23131: PUSH
23132: LD_INT 13
23134: PUSH
23135: LD_INT 14
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: ST_TO_ADDR
23142: GO 23659
23144: LD_INT 27
23146: DOUBLE
23147: EQUAL
23148: IFTRUE 23152
23150: GO 23170
23152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23153: LD_ADDR_VAR 0 3
23157: PUSH
23158: LD_INT 13
23160: PUSH
23161: LD_INT 14
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: ST_TO_ADDR
23168: GO 23659
23170: LD_INT 92
23172: DOUBLE
23173: EQUAL
23174: IFTRUE 23178
23176: GO 23204
23178: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23179: LD_ADDR_VAR 0 3
23183: PUSH
23184: LD_INT 11
23186: PUSH
23187: LD_INT 12
23189: PUSH
23190: LD_INT 13
23192: PUSH
23193: LD_INT 14
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: ST_TO_ADDR
23202: GO 23659
23204: LD_INT 28
23206: DOUBLE
23207: EQUAL
23208: IFTRUE 23212
23210: GO 23230
23212: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23213: LD_ADDR_VAR 0 3
23217: PUSH
23218: LD_INT 13
23220: PUSH
23221: LD_INT 14
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: ST_TO_ADDR
23228: GO 23659
23230: LD_INT 29
23232: DOUBLE
23233: EQUAL
23234: IFTRUE 23238
23236: GO 23256
23238: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23239: LD_ADDR_VAR 0 3
23243: PUSH
23244: LD_INT 13
23246: PUSH
23247: LD_INT 14
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: ST_TO_ADDR
23254: GO 23659
23256: LD_INT 31
23258: DOUBLE
23259: EQUAL
23260: IFTRUE 23264
23262: GO 23282
23264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23265: LD_ADDR_VAR 0 3
23269: PUSH
23270: LD_INT 13
23272: PUSH
23273: LD_INT 14
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: ST_TO_ADDR
23280: GO 23659
23282: LD_INT 26
23284: DOUBLE
23285: EQUAL
23286: IFTRUE 23290
23288: GO 23308
23290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23291: LD_ADDR_VAR 0 3
23295: PUSH
23296: LD_INT 13
23298: PUSH
23299: LD_INT 14
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: ST_TO_ADDR
23306: GO 23659
23308: LD_INT 42
23310: DOUBLE
23311: EQUAL
23312: IFTRUE 23316
23314: GO 23342
23316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23317: LD_ADDR_VAR 0 3
23321: PUSH
23322: LD_INT 21
23324: PUSH
23325: LD_INT 22
23327: PUSH
23328: LD_INT 23
23330: PUSH
23331: LD_INT 24
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
23340: GO 23659
23342: LD_INT 43
23344: DOUBLE
23345: EQUAL
23346: IFTRUE 23350
23348: GO 23376
23350: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23351: LD_ADDR_VAR 0 3
23355: PUSH
23356: LD_INT 21
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_INT 23
23364: PUSH
23365: LD_INT 24
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: ST_TO_ADDR
23374: GO 23659
23376: LD_INT 44
23378: DOUBLE
23379: EQUAL
23380: IFTRUE 23384
23382: GO 23410
23384: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23385: LD_ADDR_VAR 0 3
23389: PUSH
23390: LD_INT 21
23392: PUSH
23393: LD_INT 22
23395: PUSH
23396: LD_INT 23
23398: PUSH
23399: LD_INT 24
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: ST_TO_ADDR
23408: GO 23659
23410: LD_INT 45
23412: DOUBLE
23413: EQUAL
23414: IFTRUE 23418
23416: GO 23444
23418: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23419: LD_ADDR_VAR 0 3
23423: PUSH
23424: LD_INT 21
23426: PUSH
23427: LD_INT 22
23429: PUSH
23430: LD_INT 23
23432: PUSH
23433: LD_INT 24
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: ST_TO_ADDR
23442: GO 23659
23444: LD_INT 49
23446: DOUBLE
23447: EQUAL
23448: IFTRUE 23452
23450: GO 23478
23452: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23453: LD_ADDR_VAR 0 3
23457: PUSH
23458: LD_INT 21
23460: PUSH
23461: LD_INT 22
23463: PUSH
23464: LD_INT 23
23466: PUSH
23467: LD_INT 24
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: ST_TO_ADDR
23476: GO 23659
23478: LD_INT 51
23480: DOUBLE
23481: EQUAL
23482: IFTRUE 23486
23484: GO 23512
23486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23487: LD_ADDR_VAR 0 3
23491: PUSH
23492: LD_INT 21
23494: PUSH
23495: LD_INT 22
23497: PUSH
23498: LD_INT 23
23500: PUSH
23501: LD_INT 24
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: ST_TO_ADDR
23510: GO 23659
23512: LD_INT 52
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23546
23520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23521: LD_ADDR_VAR 0 3
23525: PUSH
23526: LD_INT 21
23528: PUSH
23529: LD_INT 22
23531: PUSH
23532: LD_INT 23
23534: PUSH
23535: LD_INT 24
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: ST_TO_ADDR
23544: GO 23659
23546: LD_INT 53
23548: DOUBLE
23549: EQUAL
23550: IFTRUE 23554
23552: GO 23572
23554: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23555: LD_ADDR_VAR 0 3
23559: PUSH
23560: LD_INT 23
23562: PUSH
23563: LD_INT 24
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: ST_TO_ADDR
23570: GO 23659
23572: LD_INT 46
23574: DOUBLE
23575: EQUAL
23576: IFTRUE 23580
23578: GO 23598
23580: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23581: LD_ADDR_VAR 0 3
23585: PUSH
23586: LD_INT 23
23588: PUSH
23589: LD_INT 24
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: ST_TO_ADDR
23596: GO 23659
23598: LD_INT 47
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23624
23606: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
23607: LD_ADDR_VAR 0 3
23611: PUSH
23612: LD_INT 23
23614: PUSH
23615: LD_INT 24
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: ST_TO_ADDR
23622: GO 23659
23624: LD_INT 98
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23632
23630: GO 23658
23632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23633: LD_ADDR_VAR 0 3
23637: PUSH
23638: LD_INT 21
23640: PUSH
23641: LD_INT 22
23643: PUSH
23644: LD_INT 23
23646: PUSH
23647: LD_INT 24
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: ST_TO_ADDR
23656: GO 23659
23658: POP
// result := ( chassis in result ) ;
23659: LD_ADDR_VAR 0 3
23663: PUSH
23664: LD_VAR 0 1
23668: PUSH
23669: LD_VAR 0 3
23673: IN
23674: ST_TO_ADDR
// end ;
23675: LD_VAR 0 3
23679: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23680: LD_INT 0
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
23686: PPUSH
23687: PPUSH
23688: PPUSH
// result := array ;
23689: LD_ADDR_VAR 0 5
23693: PUSH
23694: LD_VAR 0 1
23698: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23699: LD_VAR 0 1
23703: NOT
23704: IFTRUE 23713
23706: PUSH
23707: LD_VAR 0 2
23711: NOT
23712: OR
23713: IFTRUE 23722
23715: PUSH
23716: LD_VAR 0 3
23720: NOT
23721: OR
23722: IFTRUE 23736
23724: PUSH
23725: LD_VAR 0 2
23729: PUSH
23730: LD_VAR 0 1
23734: GREATER
23735: OR
23736: IFTRUE 23750
23738: PUSH
23739: LD_VAR 0 3
23743: PUSH
23744: LD_VAR 0 1
23748: GREATER
23749: OR
23750: IFFALSE 23754
// exit ;
23752: GO 24050
// if direction then
23754: LD_VAR 0 4
23758: IFFALSE 23822
// begin d := 1 ;
23760: LD_ADDR_VAR 0 9
23764: PUSH
23765: LD_INT 1
23767: ST_TO_ADDR
// if i_from > i_to then
23768: LD_VAR 0 2
23772: PUSH
23773: LD_VAR 0 3
23777: GREATER
23778: IFFALSE 23804
// length := ( array - i_from ) + i_to else
23780: LD_ADDR_VAR 0 11
23784: PUSH
23785: LD_VAR 0 1
23789: PUSH
23790: LD_VAR 0 2
23794: MINUS
23795: PUSH
23796: LD_VAR 0 3
23800: PLUS
23801: ST_TO_ADDR
23802: GO 23820
// length := i_to - i_from ;
23804: LD_ADDR_VAR 0 11
23808: PUSH
23809: LD_VAR 0 3
23813: PUSH
23814: LD_VAR 0 2
23818: MINUS
23819: ST_TO_ADDR
// end else
23820: GO 23883
// begin d := - 1 ;
23822: LD_ADDR_VAR 0 9
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: ST_TO_ADDR
// if i_from > i_to then
23831: LD_VAR 0 2
23835: PUSH
23836: LD_VAR 0 3
23840: GREATER
23841: IFFALSE 23861
// length := i_from - i_to else
23843: LD_ADDR_VAR 0 11
23847: PUSH
23848: LD_VAR 0 2
23852: PUSH
23853: LD_VAR 0 3
23857: MINUS
23858: ST_TO_ADDR
23859: GO 23883
// length := ( array - i_to ) + i_from ;
23861: LD_ADDR_VAR 0 11
23865: PUSH
23866: LD_VAR 0 1
23870: PUSH
23871: LD_VAR 0 3
23875: MINUS
23876: PUSH
23877: LD_VAR 0 2
23881: PLUS
23882: ST_TO_ADDR
// end ; if not length then
23883: LD_VAR 0 11
23887: NOT
23888: IFFALSE 23892
// exit ;
23890: GO 24050
// tmp := array ;
23892: LD_ADDR_VAR 0 10
23896: PUSH
23897: LD_VAR 0 1
23901: ST_TO_ADDR
// for i = 1 to length do
23902: LD_ADDR_VAR 0 6
23906: PUSH
23907: DOUBLE
23908: LD_INT 1
23910: DEC
23911: ST_TO_ADDR
23912: LD_VAR 0 11
23916: PUSH
23917: FOR_TO
23918: IFFALSE 24038
// begin for j = 1 to array do
23920: LD_ADDR_VAR 0 7
23924: PUSH
23925: DOUBLE
23926: LD_INT 1
23928: DEC
23929: ST_TO_ADDR
23930: LD_VAR 0 1
23934: PUSH
23935: FOR_TO
23936: IFFALSE 24024
// begin k := j + d ;
23938: LD_ADDR_VAR 0 8
23942: PUSH
23943: LD_VAR 0 7
23947: PUSH
23948: LD_VAR 0 9
23952: PLUS
23953: ST_TO_ADDR
// if k > array then
23954: LD_VAR 0 8
23958: PUSH
23959: LD_VAR 0 1
23963: GREATER
23964: IFFALSE 23974
// k := 1 ;
23966: LD_ADDR_VAR 0 8
23970: PUSH
23971: LD_INT 1
23973: ST_TO_ADDR
// if not k then
23974: LD_VAR 0 8
23978: NOT
23979: IFFALSE 23991
// k := array ;
23981: LD_ADDR_VAR 0 8
23985: PUSH
23986: LD_VAR 0 1
23990: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
23991: LD_ADDR_VAR 0 10
23995: PUSH
23996: LD_VAR 0 10
24000: PPUSH
24001: LD_VAR 0 8
24005: PPUSH
24006: LD_VAR 0 1
24010: PUSH
24011: LD_VAR 0 7
24015: ARRAY
24016: PPUSH
24017: CALL_OW 1
24021: ST_TO_ADDR
// end ;
24022: GO 23935
24024: POP
24025: POP
// array := tmp ;
24026: LD_ADDR_VAR 0 1
24030: PUSH
24031: LD_VAR 0 10
24035: ST_TO_ADDR
// end ;
24036: GO 23917
24038: POP
24039: POP
// result := array ;
24040: LD_ADDR_VAR 0 5
24044: PUSH
24045: LD_VAR 0 1
24049: ST_TO_ADDR
// end ;
24050: LD_VAR 0 5
24054: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24055: LD_INT 0
24057: PPUSH
24058: PPUSH
// result := 0 ;
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: LD_INT 0
24066: ST_TO_ADDR
// if not array or not value in array then
24067: LD_VAR 0 1
24071: NOT
24072: IFTRUE 24087
24074: PUSH
24075: LD_VAR 0 2
24079: PUSH
24080: LD_VAR 0 1
24084: IN
24085: NOT
24086: OR
24087: IFFALSE 24091
// exit ;
24089: GO 24145
// for i = 1 to array do
24091: LD_ADDR_VAR 0 4
24095: PUSH
24096: DOUBLE
24097: LD_INT 1
24099: DEC
24100: ST_TO_ADDR
24101: LD_VAR 0 1
24105: PUSH
24106: FOR_TO
24107: IFFALSE 24143
// if value = array [ i ] then
24109: LD_VAR 0 2
24113: PUSH
24114: LD_VAR 0 1
24118: PUSH
24119: LD_VAR 0 4
24123: ARRAY
24124: EQUAL
24125: IFFALSE 24141
// begin result := i ;
24127: LD_ADDR_VAR 0 3
24131: PUSH
24132: LD_VAR 0 4
24136: ST_TO_ADDR
// exit ;
24137: POP
24138: POP
24139: GO 24145
// end ;
24141: GO 24106
24143: POP
24144: POP
// end ;
24145: LD_VAR 0 3
24149: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24150: LD_INT 0
24152: PPUSH
// vc_chassis := chassis ;
24153: LD_ADDR_OWVAR 37
24157: PUSH
24158: LD_VAR 0 1
24162: ST_TO_ADDR
// vc_engine := engine ;
24163: LD_ADDR_OWVAR 39
24167: PUSH
24168: LD_VAR 0 2
24172: ST_TO_ADDR
// vc_control := control ;
24173: LD_ADDR_OWVAR 38
24177: PUSH
24178: LD_VAR 0 3
24182: ST_TO_ADDR
// vc_weapon := weapon ;
24183: LD_ADDR_OWVAR 40
24187: PUSH
24188: LD_VAR 0 4
24192: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24193: LD_ADDR_OWVAR 41
24197: PUSH
24198: LD_VAR 0 5
24202: ST_TO_ADDR
// end ;
24203: LD_VAR 0 6
24207: RET
// export function WantPlant ( unit ) ; var task ; begin
24208: LD_INT 0
24210: PPUSH
24211: PPUSH
// result := false ;
24212: LD_ADDR_VAR 0 2
24216: PUSH
24217: LD_INT 0
24219: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24220: LD_ADDR_VAR 0 3
24224: PUSH
24225: LD_VAR 0 1
24229: PPUSH
24230: CALL_OW 437
24234: ST_TO_ADDR
// if task then
24235: LD_VAR 0 3
24239: IFFALSE 24267
// if task [ 1 ] [ 1 ] = p then
24241: LD_VAR 0 3
24245: PUSH
24246: LD_INT 1
24248: ARRAY
24249: PUSH
24250: LD_INT 1
24252: ARRAY
24253: PUSH
24254: LD_STRING p
24256: EQUAL
24257: IFFALSE 24267
// result := true ;
24259: LD_ADDR_VAR 0 2
24263: PUSH
24264: LD_INT 1
24266: ST_TO_ADDR
// end ;
24267: LD_VAR 0 2
24271: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24272: LD_INT 0
24274: PPUSH
24275: PPUSH
24276: PPUSH
24277: PPUSH
// if pos < 1 then
24278: LD_VAR 0 2
24282: PUSH
24283: LD_INT 1
24285: LESS
24286: IFFALSE 24290
// exit ;
24288: GO 24593
// if pos = 1 then
24290: LD_VAR 0 2
24294: PUSH
24295: LD_INT 1
24297: EQUAL
24298: IFFALSE 24331
// result := Replace ( arr , pos [ 1 ] , value ) else
24300: LD_ADDR_VAR 0 4
24304: PUSH
24305: LD_VAR 0 1
24309: PPUSH
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 1
24317: ARRAY
24318: PPUSH
24319: LD_VAR 0 3
24323: PPUSH
24324: CALL_OW 1
24328: ST_TO_ADDR
24329: GO 24593
// begin tmp := arr ;
24331: LD_ADDR_VAR 0 6
24335: PUSH
24336: LD_VAR 0 1
24340: ST_TO_ADDR
// s_arr := [ tmp ] ;
24341: LD_ADDR_VAR 0 7
24345: PUSH
24346: LD_VAR 0 6
24350: PUSH
24351: EMPTY
24352: LIST
24353: ST_TO_ADDR
// for i = 1 to pos - 1 do
24354: LD_ADDR_VAR 0 5
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 2
24368: PUSH
24369: LD_INT 1
24371: MINUS
24372: PUSH
24373: FOR_TO
24374: IFFALSE 24419
// begin tmp := tmp [ pos [ i ] ] ;
24376: LD_ADDR_VAR 0 6
24380: PUSH
24381: LD_VAR 0 6
24385: PUSH
24386: LD_VAR 0 2
24390: PUSH
24391: LD_VAR 0 5
24395: ARRAY
24396: ARRAY
24397: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24398: LD_ADDR_VAR 0 7
24402: PUSH
24403: LD_VAR 0 7
24407: PUSH
24408: LD_VAR 0 6
24412: PUSH
24413: EMPTY
24414: LIST
24415: ADD
24416: ST_TO_ADDR
// end ;
24417: GO 24373
24419: POP
24420: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24421: LD_ADDR_VAR 0 6
24425: PUSH
24426: LD_VAR 0 6
24430: PPUSH
24431: LD_VAR 0 2
24435: PUSH
24436: LD_VAR 0 2
24440: ARRAY
24441: PPUSH
24442: LD_VAR 0 3
24446: PPUSH
24447: CALL_OW 1
24451: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24452: LD_ADDR_VAR 0 7
24456: PUSH
24457: LD_VAR 0 7
24461: PPUSH
24462: LD_VAR 0 7
24466: PPUSH
24467: LD_VAR 0 6
24471: PPUSH
24472: CALL_OW 1
24476: ST_TO_ADDR
// for i = s_arr downto 2 do
24477: LD_ADDR_VAR 0 5
24481: PUSH
24482: DOUBLE
24483: LD_VAR 0 7
24487: INC
24488: ST_TO_ADDR
24489: LD_INT 2
24491: PUSH
24492: FOR_DOWNTO
24493: IFFALSE 24577
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24495: LD_ADDR_VAR 0 6
24499: PUSH
24500: LD_VAR 0 7
24504: PUSH
24505: LD_VAR 0 5
24509: PUSH
24510: LD_INT 1
24512: MINUS
24513: ARRAY
24514: PPUSH
24515: LD_VAR 0 2
24519: PUSH
24520: LD_VAR 0 5
24524: PUSH
24525: LD_INT 1
24527: MINUS
24528: ARRAY
24529: PPUSH
24530: LD_VAR 0 7
24534: PUSH
24535: LD_VAR 0 5
24539: ARRAY
24540: PPUSH
24541: CALL_OW 1
24545: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24546: LD_ADDR_VAR 0 7
24550: PUSH
24551: LD_VAR 0 7
24555: PPUSH
24556: LD_VAR 0 5
24560: PUSH
24561: LD_INT 1
24563: MINUS
24564: PPUSH
24565: LD_VAR 0 6
24569: PPUSH
24570: CALL_OW 1
24574: ST_TO_ADDR
// end ;
24575: GO 24492
24577: POP
24578: POP
// result := s_arr [ 1 ] ;
24579: LD_ADDR_VAR 0 4
24583: PUSH
24584: LD_VAR 0 7
24588: PUSH
24589: LD_INT 1
24591: ARRAY
24592: ST_TO_ADDR
// end ; end ;
24593: LD_VAR 0 4
24597: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24598: LD_INT 0
24600: PPUSH
24601: PPUSH
// if not list then
24602: LD_VAR 0 1
24606: NOT
24607: IFFALSE 24611
// exit ;
24609: GO 24702
// i := list [ pos1 ] ;
24611: LD_ADDR_VAR 0 5
24615: PUSH
24616: LD_VAR 0 1
24620: PUSH
24621: LD_VAR 0 2
24625: ARRAY
24626: ST_TO_ADDR
// if not i then
24627: LD_VAR 0 5
24631: NOT
24632: IFFALSE 24636
// exit ;
24634: GO 24702
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24636: LD_ADDR_VAR 0 1
24640: PUSH
24641: LD_VAR 0 1
24645: PPUSH
24646: LD_VAR 0 2
24650: PPUSH
24651: LD_VAR 0 1
24655: PUSH
24656: LD_VAR 0 3
24660: ARRAY
24661: PPUSH
24662: CALL_OW 1
24666: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24667: LD_ADDR_VAR 0 1
24671: PUSH
24672: LD_VAR 0 1
24676: PPUSH
24677: LD_VAR 0 3
24681: PPUSH
24682: LD_VAR 0 5
24686: PPUSH
24687: CALL_OW 1
24691: ST_TO_ADDR
// result := list ;
24692: LD_ADDR_VAR 0 4
24696: PUSH
24697: LD_VAR 0 1
24701: ST_TO_ADDR
// end ;
24702: LD_VAR 0 4
24706: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24707: LD_INT 0
24709: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24710: LD_ADDR_VAR 0 5
24714: PUSH
24715: LD_VAR 0 1
24719: PPUSH
24720: CALL_OW 250
24724: PPUSH
24725: LD_VAR 0 1
24729: PPUSH
24730: CALL_OW 251
24734: PPUSH
24735: LD_VAR 0 2
24739: PPUSH
24740: LD_VAR 0 3
24744: PPUSH
24745: LD_VAR 0 4
24749: PPUSH
24750: CALL 25132 0 5
24754: ST_TO_ADDR
// end ;
24755: LD_VAR 0 5
24759: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
24760: LD_INT 0
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
// if not list or not unit then
24766: LD_VAR 0 2
24770: NOT
24771: IFTRUE 24780
24773: PUSH
24774: LD_VAR 0 1
24778: NOT
24779: OR
24780: IFFALSE 24784
// exit ;
24782: GO 25127
// result := [ ] ;
24784: LD_ADDR_VAR 0 5
24788: PUSH
24789: EMPTY
24790: ST_TO_ADDR
// for i in list do
24791: LD_ADDR_VAR 0 6
24795: PUSH
24796: LD_VAR 0 2
24800: PUSH
24801: FOR_IN
24802: IFFALSE 25020
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
24804: LD_ADDR_VAR 0 8
24808: PUSH
24809: LD_VAR 0 1
24813: PPUSH
24814: LD_VAR 0 6
24818: PUSH
24819: LD_INT 1
24821: ARRAY
24822: PPUSH
24823: LD_VAR 0 6
24827: PUSH
24828: LD_INT 2
24830: ARRAY
24831: PPUSH
24832: CALL_OW 297
24836: ST_TO_ADDR
// if not Count ( result ) then
24837: LD_VAR 0 5
24841: PPUSH
24842: CALL 21354 0 1
24846: NOT
24847: IFFALSE 24880
// begin result := Join ( result , [ i , tmp ] ) ;
24849: LD_ADDR_VAR 0 5
24853: PUSH
24854: LD_VAR 0 5
24858: PPUSH
24859: LD_VAR 0 6
24863: PUSH
24864: LD_VAR 0 8
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PPUSH
24873: CALL 57320 0 2
24877: ST_TO_ADDR
// continue ;
24878: GO 24801
// end ; if result [ result ] [ 2 ] <= tmp then
24880: LD_VAR 0 5
24884: PUSH
24885: LD_VAR 0 5
24889: ARRAY
24890: PUSH
24891: LD_INT 2
24893: ARRAY
24894: PUSH
24895: LD_VAR 0 8
24899: LESSEQUAL
24900: IFFALSE 24933
// result := Join ( result , [ i , tmp ] ) else
24902: LD_ADDR_VAR 0 5
24906: PUSH
24907: LD_VAR 0 5
24911: PPUSH
24912: LD_VAR 0 6
24916: PUSH
24917: LD_VAR 0 8
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PPUSH
24926: CALL 57320 0 2
24930: ST_TO_ADDR
24931: GO 25018
// begin for j := 1 to Count ( result ) do
24933: LD_ADDR_VAR 0 7
24937: PUSH
24938: DOUBLE
24939: LD_INT 1
24941: DEC
24942: ST_TO_ADDR
24943: LD_VAR 0 5
24947: PPUSH
24948: CALL 21354 0 1
24952: PUSH
24953: FOR_TO
24954: IFFALSE 25016
// begin if tmp < result [ j ] [ 2 ] then
24956: LD_VAR 0 8
24960: PUSH
24961: LD_VAR 0 5
24965: PUSH
24966: LD_VAR 0 7
24970: ARRAY
24971: PUSH
24972: LD_INT 2
24974: ARRAY
24975: LESS
24976: IFFALSE 25014
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24978: LD_ADDR_VAR 0 5
24982: PUSH
24983: LD_VAR 0 5
24987: PPUSH
24988: LD_VAR 0 7
24992: PPUSH
24993: LD_VAR 0 6
24997: PUSH
24998: LD_VAR 0 8
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PPUSH
25007: CALL_OW 2
25011: ST_TO_ADDR
// break ;
25012: GO 25016
// end ; end ;
25014: GO 24953
25016: POP
25017: POP
// end ; end ;
25018: GO 24801
25020: POP
25021: POP
// if result and not asc then
25022: LD_VAR 0 5
25026: IFFALSE 25035
25028: PUSH
25029: LD_VAR 0 3
25033: NOT
25034: AND
25035: IFFALSE 25052
// result := ReverseArray ( result ) ;
25037: LD_ADDR_VAR 0 5
25041: PUSH
25042: LD_VAR 0 5
25046: PPUSH
25047: CALL 52410 0 1
25051: ST_TO_ADDR
// tmp := [ ] ;
25052: LD_ADDR_VAR 0 8
25056: PUSH
25057: EMPTY
25058: ST_TO_ADDR
// if mode then
25059: LD_VAR 0 4
25063: IFFALSE 25127
// begin for i := 1 to result do
25065: LD_ADDR_VAR 0 6
25069: PUSH
25070: DOUBLE
25071: LD_INT 1
25073: DEC
25074: ST_TO_ADDR
25075: LD_VAR 0 5
25079: PUSH
25080: FOR_TO
25081: IFFALSE 25115
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
25083: LD_ADDR_VAR 0 8
25087: PUSH
25088: LD_VAR 0 8
25092: PPUSH
25093: LD_VAR 0 5
25097: PUSH
25098: LD_VAR 0 6
25102: ARRAY
25103: PUSH
25104: LD_INT 1
25106: ARRAY
25107: PPUSH
25108: CALL 57320 0 2
25112: ST_TO_ADDR
25113: GO 25080
25115: POP
25116: POP
// result := tmp ;
25117: LD_ADDR_VAR 0 5
25121: PUSH
25122: LD_VAR 0 8
25126: ST_TO_ADDR
// end ; end ;
25127: LD_VAR 0 5
25131: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25132: LD_INT 0
25134: PPUSH
25135: PPUSH
25136: PPUSH
25137: PPUSH
// if not list then
25138: LD_VAR 0 3
25142: NOT
25143: IFFALSE 25147
// exit ;
25145: GO 25537
// result := [ ] ;
25147: LD_ADDR_VAR 0 6
25151: PUSH
25152: EMPTY
25153: ST_TO_ADDR
// for i in list do
25154: LD_ADDR_VAR 0 7
25158: PUSH
25159: LD_VAR 0 3
25163: PUSH
25164: FOR_IN
25165: IFFALSE 25367
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25167: LD_ADDR_VAR 0 9
25171: PUSH
25172: LD_VAR 0 7
25176: PPUSH
25177: LD_VAR 0 1
25181: PPUSH
25182: LD_VAR 0 2
25186: PPUSH
25187: CALL_OW 297
25191: ST_TO_ADDR
// if not result then
25192: LD_VAR 0 6
25196: NOT
25197: IFFALSE 25223
// result := [ [ i , tmp ] ] else
25199: LD_ADDR_VAR 0 6
25203: PUSH
25204: LD_VAR 0 7
25208: PUSH
25209: LD_VAR 0 9
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: EMPTY
25219: LIST
25220: ST_TO_ADDR
25221: GO 25365
// begin if result [ result ] [ 2 ] <= tmp then
25223: LD_VAR 0 6
25227: PUSH
25228: LD_VAR 0 6
25232: ARRAY
25233: PUSH
25234: LD_INT 2
25236: ARRAY
25237: PUSH
25238: LD_VAR 0 9
25242: LESSEQUAL
25243: IFFALSE 25285
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25245: LD_ADDR_VAR 0 6
25249: PUSH
25250: LD_VAR 0 6
25254: PPUSH
25255: LD_VAR 0 6
25259: PUSH
25260: LD_INT 1
25262: PLUS
25263: PPUSH
25264: LD_VAR 0 7
25268: PUSH
25269: LD_VAR 0 9
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PPUSH
25278: CALL_OW 2
25282: ST_TO_ADDR
25283: GO 25365
// for j := 1 to result do
25285: LD_ADDR_VAR 0 8
25289: PUSH
25290: DOUBLE
25291: LD_INT 1
25293: DEC
25294: ST_TO_ADDR
25295: LD_VAR 0 6
25299: PUSH
25300: FOR_TO
25301: IFFALSE 25363
// begin if tmp < result [ j ] [ 2 ] then
25303: LD_VAR 0 9
25307: PUSH
25308: LD_VAR 0 6
25312: PUSH
25313: LD_VAR 0 8
25317: ARRAY
25318: PUSH
25319: LD_INT 2
25321: ARRAY
25322: LESS
25323: IFFALSE 25361
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25325: LD_ADDR_VAR 0 6
25329: PUSH
25330: LD_VAR 0 6
25334: PPUSH
25335: LD_VAR 0 8
25339: PPUSH
25340: LD_VAR 0 7
25344: PUSH
25345: LD_VAR 0 9
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 2
25358: ST_TO_ADDR
// break ;
25359: GO 25363
// end ; end ;
25361: GO 25300
25363: POP
25364: POP
// end ; end ;
25365: GO 25164
25367: POP
25368: POP
// if result and not asc then
25369: LD_VAR 0 6
25373: IFFALSE 25382
25375: PUSH
25376: LD_VAR 0 4
25380: NOT
25381: AND
25382: IFFALSE 25457
// begin tmp := result ;
25384: LD_ADDR_VAR 0 9
25388: PUSH
25389: LD_VAR 0 6
25393: ST_TO_ADDR
// for i = tmp downto 1 do
25394: LD_ADDR_VAR 0 7
25398: PUSH
25399: DOUBLE
25400: LD_VAR 0 9
25404: INC
25405: ST_TO_ADDR
25406: LD_INT 1
25408: PUSH
25409: FOR_DOWNTO
25410: IFFALSE 25455
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25412: LD_ADDR_VAR 0 6
25416: PUSH
25417: LD_VAR 0 6
25421: PPUSH
25422: LD_VAR 0 9
25426: PUSH
25427: LD_VAR 0 7
25431: MINUS
25432: PUSH
25433: LD_INT 1
25435: PLUS
25436: PPUSH
25437: LD_VAR 0 9
25441: PUSH
25442: LD_VAR 0 7
25446: ARRAY
25447: PPUSH
25448: CALL_OW 1
25452: ST_TO_ADDR
25453: GO 25409
25455: POP
25456: POP
// end ; tmp := [ ] ;
25457: LD_ADDR_VAR 0 9
25461: PUSH
25462: EMPTY
25463: ST_TO_ADDR
// if mode then
25464: LD_VAR 0 5
25468: IFFALSE 25537
// begin for i = 1 to result do
25470: LD_ADDR_VAR 0 7
25474: PUSH
25475: DOUBLE
25476: LD_INT 1
25478: DEC
25479: ST_TO_ADDR
25480: LD_VAR 0 6
25484: PUSH
25485: FOR_TO
25486: IFFALSE 25525
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25488: LD_ADDR_VAR 0 9
25492: PUSH
25493: LD_VAR 0 9
25497: PPUSH
25498: LD_VAR 0 7
25502: PPUSH
25503: LD_VAR 0 6
25507: PUSH
25508: LD_VAR 0 7
25512: ARRAY
25513: PUSH
25514: LD_INT 1
25516: ARRAY
25517: PPUSH
25518: CALL_OW 1
25522: ST_TO_ADDR
25523: GO 25485
25525: POP
25526: POP
// result := tmp ;
25527: LD_ADDR_VAR 0 6
25531: PUSH
25532: LD_VAR 0 9
25536: ST_TO_ADDR
// end ; end ;
25537: LD_VAR 0 6
25541: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25542: LD_INT 0
25544: PPUSH
25545: PPUSH
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25550: LD_ADDR_VAR 0 5
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: EMPTY
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: ST_TO_ADDR
// if not x or not y then
25572: LD_VAR 0 2
25576: NOT
25577: IFTRUE 25586
25579: PUSH
25580: LD_VAR 0 3
25584: NOT
25585: OR
25586: IFFALSE 25590
// exit ;
25588: GO 27246
// if not range then
25590: LD_VAR 0 4
25594: NOT
25595: IFFALSE 25605
// range := 10 ;
25597: LD_ADDR_VAR 0 4
25601: PUSH
25602: LD_INT 10
25604: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25605: LD_ADDR_VAR 0 8
25609: PUSH
25610: LD_INT 81
25612: PUSH
25613: LD_VAR 0 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 92
25624: PUSH
25625: LD_VAR 0 2
25629: PUSH
25630: LD_VAR 0 3
25634: PUSH
25635: LD_VAR 0 4
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 3
25648: PUSH
25649: LD_INT 21
25651: PUSH
25652: LD_INT 3
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: LIST
25667: PPUSH
25668: CALL_OW 69
25672: ST_TO_ADDR
// if not tmp then
25673: LD_VAR 0 8
25677: NOT
25678: IFFALSE 25682
// exit ;
25680: GO 27246
// for i in tmp do
25682: LD_ADDR_VAR 0 6
25686: PUSH
25687: LD_VAR 0 8
25691: PUSH
25692: FOR_IN
25693: IFFALSE 27221
// begin points := [ 0 , 0 , 0 ] ;
25695: LD_ADDR_VAR 0 9
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: LIST
25713: ST_TO_ADDR
// bpoints := 1 ;
25714: LD_ADDR_VAR 0 10
25718: PUSH
25719: LD_INT 1
25721: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25722: LD_VAR 0 6
25726: PPUSH
25727: CALL_OW 247
25731: PUSH
25732: LD_INT 1
25734: DOUBLE
25735: EQUAL
25736: IFTRUE 25740
25738: GO 26322
25740: POP
// begin if GetClass ( i ) = 1 then
25741: LD_VAR 0 6
25745: PPUSH
25746: CALL_OW 257
25750: PUSH
25751: LD_INT 1
25753: EQUAL
25754: IFFALSE 25775
// points := [ 10 , 5 , 3 ] ;
25756: LD_ADDR_VAR 0 9
25760: PUSH
25761: LD_INT 10
25763: PUSH
25764: LD_INT 5
25766: PUSH
25767: LD_INT 3
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25775: LD_VAR 0 6
25779: PPUSH
25780: CALL_OW 257
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: LD_INT 4
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: LIST
25798: IN
25799: IFFALSE 25820
// points := [ 3 , 2 , 1 ] ;
25801: LD_ADDR_VAR 0 9
25805: PUSH
25806: LD_INT 3
25808: PUSH
25809: LD_INT 2
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: LIST
25819: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25820: LD_VAR 0 6
25824: PPUSH
25825: CALL_OW 257
25829: PUSH
25830: LD_INT 5
25832: EQUAL
25833: IFFALSE 25854
// points := [ 130 , 5 , 2 ] ;
25835: LD_ADDR_VAR 0 9
25839: PUSH
25840: LD_INT 130
25842: PUSH
25843: LD_INT 5
25845: PUSH
25846: LD_INT 2
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: LIST
25853: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25854: LD_VAR 0 6
25858: PPUSH
25859: CALL_OW 257
25863: PUSH
25864: LD_INT 8
25866: EQUAL
25867: IFFALSE 25888
// points := [ 35 , 35 , 30 ] ;
25869: LD_ADDR_VAR 0 9
25873: PUSH
25874: LD_INT 35
25876: PUSH
25877: LD_INT 35
25879: PUSH
25880: LD_INT 30
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25888: LD_VAR 0 6
25892: PPUSH
25893: CALL_OW 257
25897: PUSH
25898: LD_INT 9
25900: EQUAL
25901: IFFALSE 25922
// points := [ 20 , 55 , 40 ] ;
25903: LD_ADDR_VAR 0 9
25907: PUSH
25908: LD_INT 20
25910: PUSH
25911: LD_INT 55
25913: PUSH
25914: LD_INT 40
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25922: LD_VAR 0 6
25926: PPUSH
25927: CALL_OW 257
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: LD_INT 16
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: IN
25942: IFFALSE 25963
// points := [ 5 , 3 , 2 ] ;
25944: LD_ADDR_VAR 0 9
25948: PUSH
25949: LD_INT 5
25951: PUSH
25952: LD_INT 3
25954: PUSH
25955: LD_INT 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25963: LD_VAR 0 6
25967: PPUSH
25968: CALL_OW 257
25972: PUSH
25973: LD_INT 17
25975: EQUAL
25976: IFFALSE 25997
// points := [ 100 , 50 , 75 ] ;
25978: LD_ADDR_VAR 0 9
25982: PUSH
25983: LD_INT 100
25985: PUSH
25986: LD_INT 50
25988: PUSH
25989: LD_INT 75
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25997: LD_VAR 0 6
26001: PPUSH
26002: CALL_OW 257
26006: PUSH
26007: LD_INT 15
26009: EQUAL
26010: IFFALSE 26031
// points := [ 10 , 5 , 3 ] ;
26012: LD_ADDR_VAR 0 9
26016: PUSH
26017: LD_INT 10
26019: PUSH
26020: LD_INT 5
26022: PUSH
26023: LD_INT 3
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: LIST
26030: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26031: LD_VAR 0 6
26035: PPUSH
26036: CALL_OW 257
26040: PUSH
26041: LD_INT 14
26043: EQUAL
26044: IFFALSE 26065
// points := [ 10 , 0 , 0 ] ;
26046: LD_ADDR_VAR 0 9
26050: PUSH
26051: LD_INT 10
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26065: LD_VAR 0 6
26069: PPUSH
26070: CALL_OW 257
26074: PUSH
26075: LD_INT 11
26077: EQUAL
26078: IFFALSE 26099
// points := [ 30 , 10 , 5 ] ;
26080: LD_ADDR_VAR 0 9
26084: PUSH
26085: LD_INT 30
26087: PUSH
26088: LD_INT 10
26090: PUSH
26091: LD_INT 5
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26099: LD_VAR 0 1
26103: PPUSH
26104: LD_INT 5
26106: PPUSH
26107: CALL_OW 321
26111: PUSH
26112: LD_INT 2
26114: EQUAL
26115: IFFALSE 26132
// bpoints := bpoints * 1.8 ;
26117: LD_ADDR_VAR 0 10
26121: PUSH
26122: LD_VAR 0 10
26126: PUSH
26127: LD_REAL  1.80000000000000E+0000
26130: MUL
26131: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26132: LD_VAR 0 6
26136: PPUSH
26137: CALL_OW 257
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: LD_INT 2
26147: PUSH
26148: LD_INT 3
26150: PUSH
26151: LD_INT 4
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: IN
26160: IFFALSE 26180
26162: PUSH
26163: LD_VAR 0 1
26167: PPUSH
26168: LD_INT 51
26170: PPUSH
26171: CALL_OW 321
26175: PUSH
26176: LD_INT 2
26178: EQUAL
26179: AND
26180: IFFALSE 26197
// bpoints := bpoints * 1.2 ;
26182: LD_ADDR_VAR 0 10
26186: PUSH
26187: LD_VAR 0 10
26191: PUSH
26192: LD_REAL  1.20000000000000E+0000
26195: MUL
26196: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26197: LD_VAR 0 6
26201: PPUSH
26202: CALL_OW 257
26206: PUSH
26207: LD_INT 5
26209: PUSH
26210: LD_INT 7
26212: PUSH
26213: LD_INT 9
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: LIST
26220: IN
26221: IFFALSE 26241
26223: PUSH
26224: LD_VAR 0 1
26228: PPUSH
26229: LD_INT 52
26231: PPUSH
26232: CALL_OW 321
26236: PUSH
26237: LD_INT 2
26239: EQUAL
26240: AND
26241: IFFALSE 26258
// bpoints := bpoints * 1.5 ;
26243: LD_ADDR_VAR 0 10
26247: PUSH
26248: LD_VAR 0 10
26252: PUSH
26253: LD_REAL  1.50000000000000E+0000
26256: MUL
26257: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26258: LD_VAR 0 1
26262: PPUSH
26263: LD_INT 66
26265: PPUSH
26266: CALL_OW 321
26270: PUSH
26271: LD_INT 2
26273: EQUAL
26274: IFFALSE 26291
// bpoints := bpoints * 1.1 ;
26276: LD_ADDR_VAR 0 10
26280: PUSH
26281: LD_VAR 0 10
26285: PUSH
26286: LD_REAL  1.10000000000000E+0000
26289: MUL
26290: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26291: LD_ADDR_VAR 0 10
26295: PUSH
26296: LD_VAR 0 10
26300: PUSH
26301: LD_VAR 0 6
26305: PPUSH
26306: LD_INT 1
26308: PPUSH
26309: CALL_OW 259
26313: PUSH
26314: LD_REAL  1.15000000000000E+0000
26317: MUL
26318: MUL
26319: ST_TO_ADDR
// end ; unit_vehicle :
26320: GO 27150
26322: LD_INT 2
26324: DOUBLE
26325: EQUAL
26326: IFTRUE 26330
26328: GO 27138
26330: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26331: LD_VAR 0 6
26335: PPUSH
26336: CALL_OW 264
26340: PUSH
26341: LD_INT 2
26343: PUSH
26344: LD_INT 42
26346: PUSH
26347: LD_INT 24
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: LIST
26354: IN
26355: IFFALSE 26376
// points := [ 25 , 5 , 3 ] ;
26357: LD_ADDR_VAR 0 9
26361: PUSH
26362: LD_INT 25
26364: PUSH
26365: LD_INT 5
26367: PUSH
26368: LD_INT 3
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26376: LD_VAR 0 6
26380: PPUSH
26381: CALL_OW 264
26385: PUSH
26386: LD_INT 4
26388: PUSH
26389: LD_INT 43
26391: PUSH
26392: LD_INT 25
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: LIST
26399: IN
26400: IFFALSE 26421
// points := [ 40 , 15 , 5 ] ;
26402: LD_ADDR_VAR 0 9
26406: PUSH
26407: LD_INT 40
26409: PUSH
26410: LD_INT 15
26412: PUSH
26413: LD_INT 5
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26421: LD_VAR 0 6
26425: PPUSH
26426: CALL_OW 264
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: LD_INT 23
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: IN
26441: IFFALSE 26462
// points := [ 7 , 25 , 8 ] ;
26443: LD_ADDR_VAR 0 9
26447: PUSH
26448: LD_INT 7
26450: PUSH
26451: LD_INT 25
26453: PUSH
26454: LD_INT 8
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: LIST
26461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26462: LD_VAR 0 6
26466: PPUSH
26467: CALL_OW 264
26471: PUSH
26472: LD_INT 5
26474: PUSH
26475: LD_INT 27
26477: PUSH
26478: LD_INT 44
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: LIST
26485: IN
26486: IFFALSE 26507
// points := [ 14 , 50 , 16 ] ;
26488: LD_ADDR_VAR 0 9
26492: PUSH
26493: LD_INT 14
26495: PUSH
26496: LD_INT 50
26498: PUSH
26499: LD_INT 16
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: LIST
26506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26507: LD_VAR 0 6
26511: PPUSH
26512: CALL_OW 264
26516: PUSH
26517: LD_INT 6
26519: PUSH
26520: LD_INT 46
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: IN
26527: IFFALSE 26548
// points := [ 32 , 120 , 70 ] ;
26529: LD_ADDR_VAR 0 9
26533: PUSH
26534: LD_INT 32
26536: PUSH
26537: LD_INT 120
26539: PUSH
26540: LD_INT 70
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: LIST
26547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26548: LD_VAR 0 6
26552: PPUSH
26553: CALL_OW 264
26557: PUSH
26558: LD_INT 7
26560: PUSH
26561: LD_INT 28
26563: PUSH
26564: LD_INT 45
26566: PUSH
26567: LD_INT 92
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: IN
26576: IFFALSE 26597
// points := [ 35 , 20 , 45 ] ;
26578: LD_ADDR_VAR 0 9
26582: PUSH
26583: LD_INT 35
26585: PUSH
26586: LD_INT 20
26588: PUSH
26589: LD_INT 45
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: LIST
26596: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26597: LD_VAR 0 6
26601: PPUSH
26602: CALL_OW 264
26606: PUSH
26607: LD_INT 47
26609: PUSH
26610: EMPTY
26611: LIST
26612: IN
26613: IFFALSE 26634
// points := [ 67 , 45 , 75 ] ;
26615: LD_ADDR_VAR 0 9
26619: PUSH
26620: LD_INT 67
26622: PUSH
26623: LD_INT 45
26625: PUSH
26626: LD_INT 75
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: LIST
26633: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26634: LD_VAR 0 6
26638: PPUSH
26639: CALL_OW 264
26643: PUSH
26644: LD_INT 26
26646: PUSH
26647: EMPTY
26648: LIST
26649: IN
26650: IFFALSE 26671
// points := [ 120 , 30 , 80 ] ;
26652: LD_ADDR_VAR 0 9
26656: PUSH
26657: LD_INT 120
26659: PUSH
26660: LD_INT 30
26662: PUSH
26663: LD_INT 80
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26671: LD_VAR 0 6
26675: PPUSH
26676: CALL_OW 264
26680: PUSH
26681: LD_INT 22
26683: PUSH
26684: EMPTY
26685: LIST
26686: IN
26687: IFFALSE 26708
// points := [ 40 , 1 , 1 ] ;
26689: LD_ADDR_VAR 0 9
26693: PUSH
26694: LD_INT 40
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26708: LD_VAR 0 6
26712: PPUSH
26713: CALL_OW 264
26717: PUSH
26718: LD_INT 29
26720: PUSH
26721: EMPTY
26722: LIST
26723: IN
26724: IFFALSE 26745
// points := [ 70 , 200 , 400 ] ;
26726: LD_ADDR_VAR 0 9
26730: PUSH
26731: LD_INT 70
26733: PUSH
26734: LD_INT 200
26736: PUSH
26737: LD_INT 400
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26745: LD_VAR 0 6
26749: PPUSH
26750: CALL_OW 264
26754: PUSH
26755: LD_INT 14
26757: PUSH
26758: LD_INT 53
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: IN
26765: IFFALSE 26786
// points := [ 40 , 10 , 20 ] ;
26767: LD_ADDR_VAR 0 9
26771: PUSH
26772: LD_INT 40
26774: PUSH
26775: LD_INT 10
26777: PUSH
26778: LD_INT 20
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: LIST
26785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26786: LD_VAR 0 6
26790: PPUSH
26791: CALL_OW 264
26795: PUSH
26796: LD_INT 9
26798: PUSH
26799: EMPTY
26800: LIST
26801: IN
26802: IFFALSE 26823
// points := [ 5 , 70 , 20 ] ;
26804: LD_ADDR_VAR 0 9
26808: PUSH
26809: LD_INT 5
26811: PUSH
26812: LD_INT 70
26814: PUSH
26815: LD_INT 20
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26823: LD_VAR 0 6
26827: PPUSH
26828: CALL_OW 264
26832: PUSH
26833: LD_INT 10
26835: PUSH
26836: EMPTY
26837: LIST
26838: IN
26839: IFFALSE 26860
// points := [ 35 , 110 , 70 ] ;
26841: LD_ADDR_VAR 0 9
26845: PUSH
26846: LD_INT 35
26848: PUSH
26849: LD_INT 110
26851: PUSH
26852: LD_INT 70
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26860: LD_VAR 0 6
26864: PPUSH
26865: CALL_OW 265
26869: PUSH
26870: LD_INT 25
26872: EQUAL
26873: IFFALSE 26894
// points := [ 80 , 65 , 100 ] ;
26875: LD_ADDR_VAR 0 9
26879: PUSH
26880: LD_INT 80
26882: PUSH
26883: LD_INT 65
26885: PUSH
26886: LD_INT 100
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26894: LD_VAR 0 6
26898: PPUSH
26899: CALL_OW 263
26903: PUSH
26904: LD_INT 1
26906: EQUAL
26907: IFFALSE 26942
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26909: LD_ADDR_VAR 0 10
26913: PUSH
26914: LD_VAR 0 10
26918: PUSH
26919: LD_VAR 0 6
26923: PPUSH
26924: CALL_OW 311
26928: PPUSH
26929: LD_INT 3
26931: PPUSH
26932: CALL_OW 259
26936: PUSH
26937: LD_INT 4
26939: MUL
26940: MUL
26941: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26942: LD_VAR 0 6
26946: PPUSH
26947: CALL_OW 263
26951: PUSH
26952: LD_INT 2
26954: EQUAL
26955: IFFALSE 27006
// begin j := IsControledBy ( i ) ;
26957: LD_ADDR_VAR 0 7
26961: PUSH
26962: LD_VAR 0 6
26966: PPUSH
26967: CALL_OW 312
26971: ST_TO_ADDR
// if j then
26972: LD_VAR 0 7
26976: IFFALSE 27006
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26978: LD_ADDR_VAR 0 10
26982: PUSH
26983: LD_VAR 0 10
26987: PUSH
26988: LD_VAR 0 7
26992: PPUSH
26993: LD_INT 3
26995: PPUSH
26996: CALL_OW 259
27000: PUSH
27001: LD_INT 3
27003: MUL
27004: MUL
27005: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27006: LD_VAR 0 6
27010: PPUSH
27011: CALL_OW 264
27015: PUSH
27016: LD_INT 5
27018: PUSH
27019: LD_INT 6
27021: PUSH
27022: LD_INT 46
27024: PUSH
27025: LD_INT 44
27027: PUSH
27028: LD_INT 47
27030: PUSH
27031: LD_INT 45
27033: PUSH
27034: LD_INT 28
27036: PUSH
27037: LD_INT 7
27039: PUSH
27040: LD_INT 27
27042: PUSH
27043: LD_INT 29
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: IN
27058: IFFALSE 27078
27060: PUSH
27061: LD_VAR 0 1
27065: PPUSH
27066: LD_INT 52
27068: PPUSH
27069: CALL_OW 321
27073: PUSH
27074: LD_INT 2
27076: EQUAL
27077: AND
27078: IFFALSE 27095
// bpoints := bpoints * 1.2 ;
27080: LD_ADDR_VAR 0 10
27084: PUSH
27085: LD_VAR 0 10
27089: PUSH
27090: LD_REAL  1.20000000000000E+0000
27093: MUL
27094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27095: LD_VAR 0 6
27099: PPUSH
27100: CALL_OW 264
27104: PUSH
27105: LD_INT 6
27107: PUSH
27108: LD_INT 46
27110: PUSH
27111: LD_INT 47
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: LIST
27118: IN
27119: IFFALSE 27136
// bpoints := bpoints * 1.2 ;
27121: LD_ADDR_VAR 0 10
27125: PUSH
27126: LD_VAR 0 10
27130: PUSH
27131: LD_REAL  1.20000000000000E+0000
27134: MUL
27135: ST_TO_ADDR
// end ; unit_building :
27136: GO 27150
27138: LD_INT 3
27140: DOUBLE
27141: EQUAL
27142: IFTRUE 27146
27144: GO 27149
27146: POP
// ; end ;
27147: GO 27150
27149: POP
// for j = 1 to 3 do
27150: LD_ADDR_VAR 0 7
27154: PUSH
27155: DOUBLE
27156: LD_INT 1
27158: DEC
27159: ST_TO_ADDR
27160: LD_INT 3
27162: PUSH
27163: FOR_TO
27164: IFFALSE 27217
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27166: LD_ADDR_VAR 0 5
27170: PUSH
27171: LD_VAR 0 5
27175: PPUSH
27176: LD_VAR 0 7
27180: PPUSH
27181: LD_VAR 0 5
27185: PUSH
27186: LD_VAR 0 7
27190: ARRAY
27191: PUSH
27192: LD_VAR 0 9
27196: PUSH
27197: LD_VAR 0 7
27201: ARRAY
27202: PUSH
27203: LD_VAR 0 10
27207: MUL
27208: PLUS
27209: PPUSH
27210: CALL_OW 1
27214: ST_TO_ADDR
27215: GO 27163
27217: POP
27218: POP
// end ;
27219: GO 25692
27221: POP
27222: POP
// result := Replace ( result , 4 , tmp ) ;
27223: LD_ADDR_VAR 0 5
27227: PUSH
27228: LD_VAR 0 5
27232: PPUSH
27233: LD_INT 4
27235: PPUSH
27236: LD_VAR 0 8
27240: PPUSH
27241: CALL_OW 1
27245: ST_TO_ADDR
// end ;
27246: LD_VAR 0 5
27250: RET
// export function DangerAtRange ( unit , range ) ; begin
27251: LD_INT 0
27253: PPUSH
// if not unit then
27254: LD_VAR 0 1
27258: NOT
27259: IFFALSE 27263
// exit ;
27261: GO 27308
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27263: LD_ADDR_VAR 0 3
27267: PUSH
27268: LD_VAR 0 1
27272: PPUSH
27273: CALL_OW 255
27277: PPUSH
27278: LD_VAR 0 1
27282: PPUSH
27283: CALL_OW 250
27287: PPUSH
27288: LD_VAR 0 1
27292: PPUSH
27293: CALL_OW 251
27297: PPUSH
27298: LD_VAR 0 2
27302: PPUSH
27303: CALL 25542 0 4
27307: ST_TO_ADDR
// end ;
27308: LD_VAR 0 3
27312: RET
// export function DangerInArea ( side , area ) ; begin
27313: LD_INT 0
27315: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27316: LD_ADDR_VAR 0 3
27320: PUSH
27321: LD_VAR 0 2
27325: PPUSH
27326: LD_INT 81
27328: PUSH
27329: LD_VAR 0 1
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 70
27342: ST_TO_ADDR
// end ;
27343: LD_VAR 0 3
27347: RET
// export function IsExtension ( b ) ; begin
27348: LD_INT 0
27350: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27351: LD_ADDR_VAR 0 2
27355: PUSH
27356: LD_VAR 0 1
27360: PUSH
27361: LD_INT 23
27363: PUSH
27364: LD_INT 20
27366: PUSH
27367: LD_INT 22
27369: PUSH
27370: LD_INT 17
27372: PUSH
27373: LD_INT 24
27375: PUSH
27376: LD_INT 21
27378: PUSH
27379: LD_INT 19
27381: PUSH
27382: LD_INT 16
27384: PUSH
27385: LD_INT 25
27387: PUSH
27388: LD_INT 18
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: IN
27403: ST_TO_ADDR
// end ;
27404: LD_VAR 0 2
27408: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27409: LD_INT 0
27411: PPUSH
27412: PPUSH
27413: PPUSH
// result := [ ] ;
27414: LD_ADDR_VAR 0 4
27418: PUSH
27419: EMPTY
27420: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27421: LD_ADDR_VAR 0 5
27425: PUSH
27426: LD_VAR 0 2
27430: PPUSH
27431: LD_INT 21
27433: PUSH
27434: LD_INT 3
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PPUSH
27441: CALL_OW 70
27445: ST_TO_ADDR
// if not tmp then
27446: LD_VAR 0 5
27450: NOT
27451: IFFALSE 27455
// exit ;
27453: GO 27519
// if checkLink then
27455: LD_VAR 0 3
27459: IFFALSE 27509
// begin for i in tmp do
27461: LD_ADDR_VAR 0 6
27465: PUSH
27466: LD_VAR 0 5
27470: PUSH
27471: FOR_IN
27472: IFFALSE 27507
// if GetBase ( i ) <> base then
27474: LD_VAR 0 6
27478: PPUSH
27479: CALL_OW 274
27483: PUSH
27484: LD_VAR 0 1
27488: NONEQUAL
27489: IFFALSE 27505
// ComLinkToBase ( base , i ) ;
27491: LD_VAR 0 1
27495: PPUSH
27496: LD_VAR 0 6
27500: PPUSH
27501: CALL_OW 169
27505: GO 27471
27507: POP
27508: POP
// end ; result := tmp ;
27509: LD_ADDR_VAR 0 4
27513: PUSH
27514: LD_VAR 0 5
27518: ST_TO_ADDR
// end ;
27519: LD_VAR 0 4
27523: RET
// export function ComComplete ( units , b ) ; var i ; begin
27524: LD_INT 0
27526: PPUSH
27527: PPUSH
// if not units then
27528: LD_VAR 0 1
27532: NOT
27533: IFFALSE 27537
// exit ;
27535: GO 27627
// for i in units do
27537: LD_ADDR_VAR 0 4
27541: PUSH
27542: LD_VAR 0 1
27546: PUSH
27547: FOR_IN
27548: IFFALSE 27625
// if BuildingStatus ( b ) = bs_build then
27550: LD_VAR 0 2
27554: PPUSH
27555: CALL_OW 461
27559: PUSH
27560: LD_INT 1
27562: EQUAL
27563: IFFALSE 27623
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27565: LD_VAR 0 4
27569: PPUSH
27570: LD_STRING h
27572: PUSH
27573: LD_VAR 0 2
27577: PPUSH
27578: CALL_OW 250
27582: PUSH
27583: LD_VAR 0 2
27587: PPUSH
27588: CALL_OW 251
27592: PUSH
27593: LD_VAR 0 2
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: PUSH
27616: EMPTY
27617: LIST
27618: PPUSH
27619: CALL_OW 446
27623: GO 27547
27625: POP
27626: POP
// end ;
27627: LD_VAR 0 3
27631: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27632: LD_INT 0
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27640: LD_VAR 0 1
27644: NOT
27645: IFTRUE 27662
27647: PUSH
27648: LD_VAR 0 1
27652: PPUSH
27653: CALL_OW 263
27657: PUSH
27658: LD_INT 2
27660: NONEQUAL
27661: OR
27662: IFFALSE 27666
// exit ;
27664: GO 27982
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27666: LD_ADDR_VAR 0 6
27670: PUSH
27671: LD_INT 22
27673: PUSH
27674: LD_VAR 0 1
27678: PPUSH
27679: CALL_OW 255
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 2
27690: PUSH
27691: LD_INT 30
27693: PUSH
27694: LD_INT 36
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 34
27703: PUSH
27704: LD_INT 31
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PPUSH
27720: CALL_OW 69
27724: ST_TO_ADDR
// if not tmp then
27725: LD_VAR 0 6
27729: NOT
27730: IFFALSE 27734
// exit ;
27732: GO 27982
// result := [ ] ;
27734: LD_ADDR_VAR 0 2
27738: PUSH
27739: EMPTY
27740: ST_TO_ADDR
// for i in tmp do
27741: LD_ADDR_VAR 0 3
27745: PUSH
27746: LD_VAR 0 6
27750: PUSH
27751: FOR_IN
27752: IFFALSE 27823
// begin t := UnitsInside ( i ) ;
27754: LD_ADDR_VAR 0 4
27758: PUSH
27759: LD_VAR 0 3
27763: PPUSH
27764: CALL_OW 313
27768: ST_TO_ADDR
// if t then
27769: LD_VAR 0 4
27773: IFFALSE 27821
// for j in t do
27775: LD_ADDR_VAR 0 7
27779: PUSH
27780: LD_VAR 0 4
27784: PUSH
27785: FOR_IN
27786: IFFALSE 27819
// result := Replace ( result , result + 1 , j ) ;
27788: LD_ADDR_VAR 0 2
27792: PUSH
27793: LD_VAR 0 2
27797: PPUSH
27798: LD_VAR 0 2
27802: PUSH
27803: LD_INT 1
27805: PLUS
27806: PPUSH
27807: LD_VAR 0 7
27811: PPUSH
27812: CALL_OW 1
27816: ST_TO_ADDR
27817: GO 27785
27819: POP
27820: POP
// end ;
27821: GO 27751
27823: POP
27824: POP
// if not result then
27825: LD_VAR 0 2
27829: NOT
27830: IFFALSE 27834
// exit ;
27832: GO 27982
// mech := result [ 1 ] ;
27834: LD_ADDR_VAR 0 5
27838: PUSH
27839: LD_VAR 0 2
27843: PUSH
27844: LD_INT 1
27846: ARRAY
27847: ST_TO_ADDR
// if result > 1 then
27848: LD_VAR 0 2
27852: PUSH
27853: LD_INT 1
27855: GREATER
27856: IFFALSE 27968
// begin for i = 2 to result do
27858: LD_ADDR_VAR 0 3
27862: PUSH
27863: DOUBLE
27864: LD_INT 2
27866: DEC
27867: ST_TO_ADDR
27868: LD_VAR 0 2
27872: PUSH
27873: FOR_TO
27874: IFFALSE 27966
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27876: LD_ADDR_VAR 0 4
27880: PUSH
27881: LD_VAR 0 2
27885: PUSH
27886: LD_VAR 0 3
27890: ARRAY
27891: PPUSH
27892: LD_INT 3
27894: PPUSH
27895: CALL_OW 259
27899: PUSH
27900: LD_VAR 0 2
27904: PUSH
27905: LD_VAR 0 3
27909: ARRAY
27910: PPUSH
27911: CALL_OW 432
27915: MINUS
27916: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27917: LD_VAR 0 4
27921: PUSH
27922: LD_VAR 0 5
27926: PPUSH
27927: LD_INT 3
27929: PPUSH
27930: CALL_OW 259
27934: PUSH
27935: LD_VAR 0 5
27939: PPUSH
27940: CALL_OW 432
27944: MINUS
27945: GREATEREQUAL
27946: IFFALSE 27964
// mech := result [ i ] ;
27948: LD_ADDR_VAR 0 5
27952: PUSH
27953: LD_VAR 0 2
27957: PUSH
27958: LD_VAR 0 3
27962: ARRAY
27963: ST_TO_ADDR
// end ;
27964: GO 27873
27966: POP
27967: POP
// end ; ComLinkTo ( vehicle , mech ) ;
27968: LD_VAR 0 1
27972: PPUSH
27973: LD_VAR 0 5
27977: PPUSH
27978: CALL_OW 135
// end ;
27982: LD_VAR 0 2
27986: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27987: LD_INT 0
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
27993: PPUSH
27994: PPUSH
27995: PPUSH
27996: PPUSH
27997: PPUSH
27998: PPUSH
27999: PPUSH
28000: PPUSH
28001: PPUSH
// result := [ ] ;
28002: LD_ADDR_VAR 0 7
28006: PUSH
28007: EMPTY
28008: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28009: LD_VAR 0 1
28013: PPUSH
28014: CALL_OW 266
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: IN
28029: NOT
28030: IFFALSE 28034
// exit ;
28032: GO 29674
// if name then
28034: LD_VAR 0 3
28038: IFFALSE 28054
// SetBName ( base_dep , name ) ;
28040: LD_VAR 0 1
28044: PPUSH
28045: LD_VAR 0 3
28049: PPUSH
28050: CALL_OW 500
// base := GetBase ( base_dep ) ;
28054: LD_ADDR_VAR 0 15
28058: PUSH
28059: LD_VAR 0 1
28063: PPUSH
28064: CALL_OW 274
28068: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28069: LD_ADDR_VAR 0 16
28073: PUSH
28074: LD_VAR 0 1
28078: PPUSH
28079: CALL_OW 255
28083: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28084: LD_ADDR_VAR 0 17
28088: PUSH
28089: LD_VAR 0 1
28093: PPUSH
28094: CALL_OW 248
28098: ST_TO_ADDR
// if sources then
28099: LD_VAR 0 5
28103: IFFALSE 28150
// for i = 1 to 3 do
28105: LD_ADDR_VAR 0 8
28109: PUSH
28110: DOUBLE
28111: LD_INT 1
28113: DEC
28114: ST_TO_ADDR
28115: LD_INT 3
28117: PUSH
28118: FOR_TO
28119: IFFALSE 28148
// AddResourceType ( base , i , sources [ i ] ) ;
28121: LD_VAR 0 15
28125: PPUSH
28126: LD_VAR 0 8
28130: PPUSH
28131: LD_VAR 0 5
28135: PUSH
28136: LD_VAR 0 8
28140: ARRAY
28141: PPUSH
28142: CALL_OW 276
28146: GO 28118
28148: POP
28149: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28150: LD_ADDR_VAR 0 18
28154: PUSH
28155: LD_VAR 0 15
28159: PPUSH
28160: LD_VAR 0 2
28164: PPUSH
28165: LD_INT 1
28167: PPUSH
28168: CALL 27409 0 3
28172: ST_TO_ADDR
// InitHc ;
28173: CALL_OW 19
// InitUc ;
28177: CALL_OW 18
// uc_side := side ;
28181: LD_ADDR_OWVAR 20
28185: PUSH
28186: LD_VAR 0 16
28190: ST_TO_ADDR
// uc_nation := nation ;
28191: LD_ADDR_OWVAR 21
28195: PUSH
28196: LD_VAR 0 17
28200: ST_TO_ADDR
// if buildings then
28201: LD_VAR 0 18
28205: IFFALSE 29533
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28207: LD_ADDR_VAR 0 19
28211: PUSH
28212: LD_VAR 0 18
28216: PPUSH
28217: LD_INT 2
28219: PUSH
28220: LD_INT 30
28222: PUSH
28223: LD_INT 29
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 30
28232: PUSH
28233: LD_INT 30
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: PPUSH
28245: CALL_OW 72
28249: ST_TO_ADDR
// if tmp then
28250: LD_VAR 0 19
28254: IFFALSE 28302
// for i in tmp do
28256: LD_ADDR_VAR 0 8
28260: PUSH
28261: LD_VAR 0 19
28265: PUSH
28266: FOR_IN
28267: IFFALSE 28300
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28269: LD_VAR 0 8
28273: PPUSH
28274: CALL_OW 250
28278: PPUSH
28279: LD_VAR 0 8
28283: PPUSH
28284: CALL_OW 251
28288: PPUSH
28289: LD_VAR 0 16
28293: PPUSH
28294: CALL_OW 441
28298: GO 28266
28300: POP
28301: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28302: LD_VAR 0 18
28306: PPUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 30
28312: PUSH
28313: LD_INT 32
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 30
28322: PUSH
28323: LD_INT 33
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: PPUSH
28335: CALL_OW 72
28339: IFFALSE 28427
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28341: LD_ADDR_VAR 0 8
28345: PUSH
28346: LD_VAR 0 18
28350: PPUSH
28351: LD_INT 2
28353: PUSH
28354: LD_INT 30
28356: PUSH
28357: LD_INT 32
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 30
28366: PUSH
28367: LD_INT 33
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: PPUSH
28379: CALL_OW 72
28383: PUSH
28384: FOR_IN
28385: IFFALSE 28425
// begin if not GetBWeapon ( i ) then
28387: LD_VAR 0 8
28391: PPUSH
28392: CALL_OW 269
28396: NOT
28397: IFFALSE 28423
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28399: LD_VAR 0 8
28403: PPUSH
28404: LD_VAR 0 8
28408: PPUSH
28409: LD_VAR 0 2
28413: PPUSH
28414: CALL 29679 0 2
28418: PPUSH
28419: CALL_OW 431
// end ;
28423: GO 28384
28425: POP
28426: POP
// end ; for i = 1 to personel do
28427: LD_ADDR_VAR 0 8
28431: PUSH
28432: DOUBLE
28433: LD_INT 1
28435: DEC
28436: ST_TO_ADDR
28437: LD_VAR 0 6
28441: PUSH
28442: FOR_TO
28443: IFFALSE 29513
// begin if i > 4 then
28445: LD_VAR 0 8
28449: PUSH
28450: LD_INT 4
28452: GREATER
28453: IFFALSE 28457
// break ;
28455: GO 29513
// case i of 1 :
28457: LD_VAR 0 8
28461: PUSH
28462: LD_INT 1
28464: DOUBLE
28465: EQUAL
28466: IFTRUE 28470
28468: GO 28550
28470: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28471: LD_ADDR_VAR 0 12
28475: PUSH
28476: LD_VAR 0 18
28480: PPUSH
28481: LD_INT 22
28483: PUSH
28484: LD_VAR 0 16
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 58
28495: PUSH
28496: EMPTY
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 30
28504: PUSH
28505: LD_INT 32
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 30
28514: PUSH
28515: LD_INT 4
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 30
28524: PUSH
28525: LD_INT 5
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: LIST
28542: PPUSH
28543: CALL_OW 72
28547: ST_TO_ADDR
28548: GO 28772
28550: LD_INT 2
28552: DOUBLE
28553: EQUAL
28554: IFTRUE 28558
28556: GO 28620
28558: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28559: LD_ADDR_VAR 0 12
28563: PUSH
28564: LD_VAR 0 18
28568: PPUSH
28569: LD_INT 22
28571: PUSH
28572: LD_VAR 0 16
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: PUSH
28584: LD_INT 30
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 30
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PPUSH
28613: CALL_OW 72
28617: ST_TO_ADDR
28618: GO 28772
28620: LD_INT 3
28622: DOUBLE
28623: EQUAL
28624: IFTRUE 28628
28626: GO 28690
28628: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28629: LD_ADDR_VAR 0 12
28633: PUSH
28634: LD_VAR 0 18
28638: PPUSH
28639: LD_INT 22
28641: PUSH
28642: LD_VAR 0 16
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: LD_INT 30
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 30
28666: PUSH
28667: LD_INT 3
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: LIST
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PPUSH
28683: CALL_OW 72
28687: ST_TO_ADDR
28688: GO 28772
28690: LD_INT 4
28692: DOUBLE
28693: EQUAL
28694: IFTRUE 28698
28696: GO 28771
28698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28699: LD_ADDR_VAR 0 12
28703: PUSH
28704: LD_VAR 0 18
28708: PPUSH
28709: LD_INT 22
28711: PUSH
28712: LD_VAR 0 16
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: PUSH
28724: LD_INT 30
28726: PUSH
28727: LD_INT 6
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 30
28736: PUSH
28737: LD_INT 7
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 30
28746: PUSH
28747: LD_INT 8
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PPUSH
28764: CALL_OW 72
28768: ST_TO_ADDR
28769: GO 28772
28771: POP
// if i = 1 then
28772: LD_VAR 0 8
28776: PUSH
28777: LD_INT 1
28779: EQUAL
28780: IFFALSE 28891
// begin tmp := [ ] ;
28782: LD_ADDR_VAR 0 19
28786: PUSH
28787: EMPTY
28788: ST_TO_ADDR
// for j in f do
28789: LD_ADDR_VAR 0 9
28793: PUSH
28794: LD_VAR 0 12
28798: PUSH
28799: FOR_IN
28800: IFFALSE 28873
// if GetBType ( j ) = b_bunker then
28802: LD_VAR 0 9
28806: PPUSH
28807: CALL_OW 266
28811: PUSH
28812: LD_INT 32
28814: EQUAL
28815: IFFALSE 28842
// tmp := Insert ( tmp , 1 , j ) else
28817: LD_ADDR_VAR 0 19
28821: PUSH
28822: LD_VAR 0 19
28826: PPUSH
28827: LD_INT 1
28829: PPUSH
28830: LD_VAR 0 9
28834: PPUSH
28835: CALL_OW 2
28839: ST_TO_ADDR
28840: GO 28871
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28842: LD_ADDR_VAR 0 19
28846: PUSH
28847: LD_VAR 0 19
28851: PPUSH
28852: LD_VAR 0 19
28856: PUSH
28857: LD_INT 1
28859: PLUS
28860: PPUSH
28861: LD_VAR 0 9
28865: PPUSH
28866: CALL_OW 2
28870: ST_TO_ADDR
28871: GO 28799
28873: POP
28874: POP
// if tmp then
28875: LD_VAR 0 19
28879: IFFALSE 28891
// f := tmp ;
28881: LD_ADDR_VAR 0 12
28885: PUSH
28886: LD_VAR 0 19
28890: ST_TO_ADDR
// end ; x := personel [ i ] ;
28891: LD_ADDR_VAR 0 13
28895: PUSH
28896: LD_VAR 0 6
28900: PUSH
28901: LD_VAR 0 8
28905: ARRAY
28906: ST_TO_ADDR
// if x = - 1 then
28907: LD_VAR 0 13
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: EQUAL
28916: IFFALSE 29127
// begin for j in f do
28918: LD_ADDR_VAR 0 9
28922: PUSH
28923: LD_VAR 0 12
28927: PUSH
28928: FOR_IN
28929: IFFALSE 29123
// repeat InitHc ;
28931: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28935: LD_VAR 0 9
28939: PPUSH
28940: CALL_OW 266
28944: PUSH
28945: LD_INT 5
28947: EQUAL
28948: IFFALSE 29018
// begin if UnitsInside ( j ) < 3 then
28950: LD_VAR 0 9
28954: PPUSH
28955: CALL_OW 313
28959: PUSH
28960: LD_INT 3
28962: LESS
28963: IFFALSE 28999
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28965: LD_INT 0
28967: PPUSH
28968: LD_INT 5
28970: PUSH
28971: LD_INT 8
28973: PUSH
28974: LD_INT 9
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: PUSH
28982: LD_VAR 0 17
28986: ARRAY
28987: PPUSH
28988: LD_VAR 0 4
28992: PPUSH
28993: CALL_OW 380
28997: GO 29016
// PrepareHuman ( false , i , skill ) ;
28999: LD_INT 0
29001: PPUSH
29002: LD_VAR 0 8
29006: PPUSH
29007: LD_VAR 0 4
29011: PPUSH
29012: CALL_OW 380
// end else
29016: GO 29035
// PrepareHuman ( false , i , skill ) ;
29018: LD_INT 0
29020: PPUSH
29021: LD_VAR 0 8
29025: PPUSH
29026: LD_VAR 0 4
29030: PPUSH
29031: CALL_OW 380
// un := CreateHuman ;
29035: LD_ADDR_VAR 0 14
29039: PUSH
29040: CALL_OW 44
29044: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29045: LD_ADDR_VAR 0 7
29049: PUSH
29050: LD_VAR 0 7
29054: PPUSH
29055: LD_INT 1
29057: PPUSH
29058: LD_VAR 0 14
29062: PPUSH
29063: CALL_OW 2
29067: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29068: LD_VAR 0 14
29072: PPUSH
29073: LD_VAR 0 9
29077: PPUSH
29078: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29082: LD_VAR 0 9
29086: PPUSH
29087: CALL_OW 313
29091: PUSH
29092: LD_INT 6
29094: EQUAL
29095: IFTRUE 29119
29097: PUSH
29098: LD_VAR 0 9
29102: PPUSH
29103: CALL_OW 266
29107: PUSH
29108: LD_INT 32
29110: PUSH
29111: LD_INT 31
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: IN
29118: OR
29119: IFFALSE 28931
29121: GO 28928
29123: POP
29124: POP
// end else
29125: GO 29511
// for j = 1 to x do
29127: LD_ADDR_VAR 0 9
29131: PUSH
29132: DOUBLE
29133: LD_INT 1
29135: DEC
29136: ST_TO_ADDR
29137: LD_VAR 0 13
29141: PUSH
29142: FOR_TO
29143: IFFALSE 29509
// begin InitHc ;
29145: CALL_OW 19
// if not f then
29149: LD_VAR 0 12
29153: NOT
29154: IFFALSE 29243
// begin PrepareHuman ( false , i , skill ) ;
29156: LD_INT 0
29158: PPUSH
29159: LD_VAR 0 8
29163: PPUSH
29164: LD_VAR 0 4
29168: PPUSH
29169: CALL_OW 380
// un := CreateHuman ;
29173: LD_ADDR_VAR 0 14
29177: PUSH
29178: CALL_OW 44
29182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29183: LD_ADDR_VAR 0 7
29187: PUSH
29188: LD_VAR 0 7
29192: PPUSH
29193: LD_INT 1
29195: PPUSH
29196: LD_VAR 0 14
29200: PPUSH
29201: CALL_OW 2
29205: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29206: LD_VAR 0 14
29210: PPUSH
29211: LD_VAR 0 1
29215: PPUSH
29216: CALL_OW 250
29220: PPUSH
29221: LD_VAR 0 1
29225: PPUSH
29226: CALL_OW 251
29230: PPUSH
29231: LD_INT 10
29233: PPUSH
29234: LD_INT 0
29236: PPUSH
29237: CALL_OW 50
// continue ;
29241: GO 29142
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29243: LD_VAR 0 12
29247: PUSH
29248: LD_INT 1
29250: ARRAY
29251: PPUSH
29252: CALL_OW 313
29256: IFFALSE 29284
29258: PUSH
29259: LD_VAR 0 12
29263: PUSH
29264: LD_INT 1
29266: ARRAY
29267: PPUSH
29268: CALL_OW 266
29272: PUSH
29273: LD_INT 32
29275: PUSH
29276: LD_INT 31
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: IN
29283: AND
29284: IFTRUE 29305
29286: PUSH
29287: LD_VAR 0 12
29291: PUSH
29292: LD_INT 1
29294: ARRAY
29295: PPUSH
29296: CALL_OW 313
29300: PUSH
29301: LD_INT 6
29303: EQUAL
29304: OR
29305: IFFALSE 29325
// f := Delete ( f , 1 ) ;
29307: LD_ADDR_VAR 0 12
29311: PUSH
29312: LD_VAR 0 12
29316: PPUSH
29317: LD_INT 1
29319: PPUSH
29320: CALL_OW 3
29324: ST_TO_ADDR
// if not f then
29325: LD_VAR 0 12
29329: NOT
29330: IFFALSE 29348
// begin x := x + 2 ;
29332: LD_ADDR_VAR 0 13
29336: PUSH
29337: LD_VAR 0 13
29341: PUSH
29342: LD_INT 2
29344: PLUS
29345: ST_TO_ADDR
// continue ;
29346: GO 29142
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29348: LD_VAR 0 12
29352: PUSH
29353: LD_INT 1
29355: ARRAY
29356: PPUSH
29357: CALL_OW 266
29361: PUSH
29362: LD_INT 5
29364: EQUAL
29365: IFFALSE 29439
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29367: LD_VAR 0 12
29371: PUSH
29372: LD_INT 1
29374: ARRAY
29375: PPUSH
29376: CALL_OW 313
29380: PUSH
29381: LD_INT 3
29383: LESS
29384: IFFALSE 29420
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29386: LD_INT 0
29388: PPUSH
29389: LD_INT 5
29391: PUSH
29392: LD_INT 8
29394: PUSH
29395: LD_INT 9
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: PUSH
29403: LD_VAR 0 17
29407: ARRAY
29408: PPUSH
29409: LD_VAR 0 4
29413: PPUSH
29414: CALL_OW 380
29418: GO 29437
// PrepareHuman ( false , i , skill ) ;
29420: LD_INT 0
29422: PPUSH
29423: LD_VAR 0 8
29427: PPUSH
29428: LD_VAR 0 4
29432: PPUSH
29433: CALL_OW 380
// end else
29437: GO 29456
// PrepareHuman ( false , i , skill ) ;
29439: LD_INT 0
29441: PPUSH
29442: LD_VAR 0 8
29446: PPUSH
29447: LD_VAR 0 4
29451: PPUSH
29452: CALL_OW 380
// un := CreateHuman ;
29456: LD_ADDR_VAR 0 14
29460: PUSH
29461: CALL_OW 44
29465: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29466: LD_ADDR_VAR 0 7
29470: PUSH
29471: LD_VAR 0 7
29475: PPUSH
29476: LD_INT 1
29478: PPUSH
29479: LD_VAR 0 14
29483: PPUSH
29484: CALL_OW 2
29488: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29489: LD_VAR 0 14
29493: PPUSH
29494: LD_VAR 0 12
29498: PUSH
29499: LD_INT 1
29501: ARRAY
29502: PPUSH
29503: CALL_OW 52
// end ;
29507: GO 29142
29509: POP
29510: POP
// end ;
29511: GO 28442
29513: POP
29514: POP
// result := result ^ buildings ;
29515: LD_ADDR_VAR 0 7
29519: PUSH
29520: LD_VAR 0 7
29524: PUSH
29525: LD_VAR 0 18
29529: ADD
29530: ST_TO_ADDR
// end else
29531: GO 29674
// begin for i = 1 to personel do
29533: LD_ADDR_VAR 0 8
29537: PUSH
29538: DOUBLE
29539: LD_INT 1
29541: DEC
29542: ST_TO_ADDR
29543: LD_VAR 0 6
29547: PUSH
29548: FOR_TO
29549: IFFALSE 29672
// begin if i > 4 then
29551: LD_VAR 0 8
29555: PUSH
29556: LD_INT 4
29558: GREATER
29559: IFFALSE 29563
// break ;
29561: GO 29672
// x := personel [ i ] ;
29563: LD_ADDR_VAR 0 13
29567: PUSH
29568: LD_VAR 0 6
29572: PUSH
29573: LD_VAR 0 8
29577: ARRAY
29578: ST_TO_ADDR
// if x = - 1 then
29579: LD_VAR 0 13
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: EQUAL
29588: IFFALSE 29592
// continue ;
29590: GO 29548
// PrepareHuman ( false , i , skill ) ;
29592: LD_INT 0
29594: PPUSH
29595: LD_VAR 0 8
29599: PPUSH
29600: LD_VAR 0 4
29604: PPUSH
29605: CALL_OW 380
// un := CreateHuman ;
29609: LD_ADDR_VAR 0 14
29613: PUSH
29614: CALL_OW 44
29618: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29619: LD_VAR 0 14
29623: PPUSH
29624: LD_VAR 0 1
29628: PPUSH
29629: CALL_OW 250
29633: PPUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: CALL_OW 251
29643: PPUSH
29644: LD_INT 10
29646: PPUSH
29647: LD_INT 0
29649: PPUSH
29650: CALL_OW 50
// result := result ^ un ;
29654: LD_ADDR_VAR 0 7
29658: PUSH
29659: LD_VAR 0 7
29663: PUSH
29664: LD_VAR 0 14
29668: ADD
29669: ST_TO_ADDR
// end ;
29670: GO 29548
29672: POP
29673: POP
// end ; end ;
29674: LD_VAR 0 7
29678: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29679: LD_INT 0
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
29693: PPUSH
29694: PPUSH
29695: PPUSH
29696: PPUSH
// result := false ;
29697: LD_ADDR_VAR 0 3
29701: PUSH
29702: LD_INT 0
29704: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29705: LD_VAR 0 1
29709: NOT
29710: IFTRUE 29735
29712: PUSH
29713: LD_VAR 0 1
29717: PPUSH
29718: CALL_OW 266
29722: PUSH
29723: LD_INT 32
29725: PUSH
29726: LD_INT 33
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: IN
29733: NOT
29734: OR
29735: IFFALSE 29739
// exit ;
29737: GO 30874
// nat := GetNation ( tower ) ;
29739: LD_ADDR_VAR 0 12
29743: PUSH
29744: LD_VAR 0 1
29748: PPUSH
29749: CALL_OW 248
29753: ST_TO_ADDR
// side := GetSide ( tower ) ;
29754: LD_ADDR_VAR 0 16
29758: PUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 255
29768: ST_TO_ADDR
// x := GetX ( tower ) ;
29769: LD_ADDR_VAR 0 10
29773: PUSH
29774: LD_VAR 0 1
29778: PPUSH
29779: CALL_OW 250
29783: ST_TO_ADDR
// y := GetY ( tower ) ;
29784: LD_ADDR_VAR 0 11
29788: PUSH
29789: LD_VAR 0 1
29793: PPUSH
29794: CALL_OW 251
29798: ST_TO_ADDR
// if not x or not y then
29799: LD_VAR 0 10
29803: NOT
29804: IFTRUE 29813
29806: PUSH
29807: LD_VAR 0 11
29811: NOT
29812: OR
29813: IFFALSE 29817
// exit ;
29815: GO 30874
// weapon := 0 ;
29817: LD_ADDR_VAR 0 18
29821: PUSH
29822: LD_INT 0
29824: ST_TO_ADDR
// fac_list := [ ] ;
29825: LD_ADDR_VAR 0 17
29829: PUSH
29830: EMPTY
29831: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29832: LD_ADDR_VAR 0 6
29836: PUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL_OW 274
29846: PPUSH
29847: LD_VAR 0 2
29851: PPUSH
29852: LD_INT 0
29854: PPUSH
29855: CALL 27409 0 3
29859: PPUSH
29860: LD_INT 30
29862: PUSH
29863: LD_INT 3
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PPUSH
29870: CALL_OW 72
29874: ST_TO_ADDR
// if not factories then
29875: LD_VAR 0 6
29879: NOT
29880: IFFALSE 29884
// exit ;
29882: GO 30874
// for i in factories do
29884: LD_ADDR_VAR 0 8
29888: PUSH
29889: LD_VAR 0 6
29893: PUSH
29894: FOR_IN
29895: IFFALSE 29920
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29897: LD_ADDR_VAR 0 17
29901: PUSH
29902: LD_VAR 0 17
29906: PUSH
29907: LD_VAR 0 8
29911: PPUSH
29912: CALL_OW 478
29916: UNION
29917: ST_TO_ADDR
29918: GO 29894
29920: POP
29921: POP
// if not fac_list then
29922: LD_VAR 0 17
29926: NOT
29927: IFFALSE 29931
// exit ;
29929: GO 30874
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29931: LD_ADDR_VAR 0 5
29935: PUSH
29936: LD_INT 4
29938: PUSH
29939: LD_INT 5
29941: PUSH
29942: LD_INT 9
29944: PUSH
29945: LD_INT 10
29947: PUSH
29948: LD_INT 6
29950: PUSH
29951: LD_INT 7
29953: PUSH
29954: LD_INT 11
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 27
29968: PUSH
29969: LD_INT 28
29971: PUSH
29972: LD_INT 26
29974: PUSH
29975: LD_INT 30
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 43
29986: PUSH
29987: LD_INT 44
29989: PUSH
29990: LD_INT 46
29992: PUSH
29993: LD_INT 45
29995: PUSH
29996: LD_INT 47
29998: PUSH
29999: LD_INT 49
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: PUSH
30015: LD_VAR 0 12
30019: ARRAY
30020: ST_TO_ADDR
// list := list isect fac_list ;
30021: LD_ADDR_VAR 0 5
30025: PUSH
30026: LD_VAR 0 5
30030: PUSH
30031: LD_VAR 0 17
30035: ISECT
30036: ST_TO_ADDR
// if not list then
30037: LD_VAR 0 5
30041: NOT
30042: IFFALSE 30046
// exit ;
30044: GO 30874
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30046: LD_VAR 0 12
30050: PUSH
30051: LD_INT 3
30053: EQUAL
30054: IFFALSE 30066
30056: PUSH
30057: LD_INT 49
30059: PUSH
30060: LD_VAR 0 5
30064: IN
30065: AND
30066: IFFALSE 30086
30068: PUSH
30069: LD_INT 31
30071: PPUSH
30072: LD_VAR 0 16
30076: PPUSH
30077: CALL_OW 321
30081: PUSH
30082: LD_INT 2
30084: EQUAL
30085: AND
30086: IFFALSE 30146
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30088: LD_INT 22
30090: PUSH
30091: LD_VAR 0 16
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 35
30102: PUSH
30103: LD_INT 49
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 91
30112: PUSH
30113: LD_VAR 0 1
30117: PUSH
30118: LD_INT 10
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: LIST
30130: PPUSH
30131: CALL_OW 69
30135: NOT
30136: IFFALSE 30146
// weapon := ru_time_lapser ;
30138: LD_ADDR_VAR 0 18
30142: PUSH
30143: LD_INT 49
30145: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30146: LD_VAR 0 12
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: IN
30161: IFFALSE 30185
30163: PUSH
30164: LD_INT 11
30166: PUSH
30167: LD_VAR 0 5
30171: IN
30172: IFTRUE 30184
30174: PUSH
30175: LD_INT 30
30177: PUSH
30178: LD_VAR 0 5
30182: IN
30183: OR
30184: AND
30185: IFFALSE 30205
30187: PUSH
30188: LD_INT 6
30190: PPUSH
30191: LD_VAR 0 16
30195: PPUSH
30196: CALL_OW 321
30200: PUSH
30201: LD_INT 2
30203: EQUAL
30204: AND
30205: IFFALSE 30372
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30207: LD_INT 22
30209: PUSH
30210: LD_VAR 0 16
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 2
30221: PUSH
30222: LD_INT 35
30224: PUSH
30225: LD_INT 11
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 35
30234: PUSH
30235: LD_INT 30
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 91
30249: PUSH
30250: LD_VAR 0 1
30254: PUSH
30255: LD_INT 18
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: PPUSH
30268: CALL_OW 69
30272: NOT
30273: IFFALSE 30349
30275: PUSH
30276: LD_INT 22
30278: PUSH
30279: LD_VAR 0 16
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 30
30293: PUSH
30294: LD_INT 32
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 30
30303: PUSH
30304: LD_INT 33
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 91
30318: PUSH
30319: LD_VAR 0 1
30323: PUSH
30324: LD_INT 12
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: PUSH
30337: EMPTY
30338: LIST
30339: PPUSH
30340: CALL_OW 69
30344: PUSH
30345: LD_INT 2
30347: GREATER
30348: AND
30349: IFFALSE 30372
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30351: LD_ADDR_VAR 0 18
30355: PUSH
30356: LD_INT 11
30358: PUSH
30359: LD_INT 30
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_VAR 0 12
30370: ARRAY
30371: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30372: LD_VAR 0 18
30376: NOT
30377: IFFALSE 30397
30379: PUSH
30380: LD_INT 40
30382: PPUSH
30383: LD_VAR 0 16
30387: PPUSH
30388: CALL_OW 321
30392: PUSH
30393: LD_INT 2
30395: EQUAL
30396: AND
30397: IFFALSE 30433
30399: PUSH
30400: LD_INT 7
30402: PUSH
30403: LD_VAR 0 5
30407: IN
30408: IFTRUE 30420
30410: PUSH
30411: LD_INT 28
30413: PUSH
30414: LD_VAR 0 5
30418: IN
30419: OR
30420: IFTRUE 30432
30422: PUSH
30423: LD_INT 45
30425: PUSH
30426: LD_VAR 0 5
30430: IN
30431: OR
30432: AND
30433: IFFALSE 30687
// begin hex := GetHexInfo ( x , y ) ;
30435: LD_ADDR_VAR 0 4
30439: PUSH
30440: LD_VAR 0 10
30444: PPUSH
30445: LD_VAR 0 11
30449: PPUSH
30450: CALL_OW 546
30454: ST_TO_ADDR
// if hex [ 1 ] then
30455: LD_VAR 0 4
30459: PUSH
30460: LD_INT 1
30462: ARRAY
30463: IFFALSE 30467
// exit ;
30465: GO 30874
// height := hex [ 2 ] ;
30467: LD_ADDR_VAR 0 15
30471: PUSH
30472: LD_VAR 0 4
30476: PUSH
30477: LD_INT 2
30479: ARRAY
30480: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30481: LD_ADDR_VAR 0 14
30485: PUSH
30486: LD_INT 0
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: LD_INT 5
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: ST_TO_ADDR
// for i in tmp do
30504: LD_ADDR_VAR 0 8
30508: PUSH
30509: LD_VAR 0 14
30513: PUSH
30514: FOR_IN
30515: IFFALSE 30685
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30517: LD_ADDR_VAR 0 9
30521: PUSH
30522: LD_VAR 0 10
30526: PPUSH
30527: LD_VAR 0 8
30531: PPUSH
30532: LD_INT 5
30534: PPUSH
30535: CALL_OW 272
30539: PUSH
30540: LD_VAR 0 11
30544: PPUSH
30545: LD_VAR 0 8
30549: PPUSH
30550: LD_INT 5
30552: PPUSH
30553: CALL_OW 273
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30562: LD_VAR 0 9
30566: PUSH
30567: LD_INT 1
30569: ARRAY
30570: PPUSH
30571: LD_VAR 0 9
30575: PUSH
30576: LD_INT 2
30578: ARRAY
30579: PPUSH
30580: CALL_OW 488
30584: IFFALSE 30683
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30586: LD_ADDR_VAR 0 4
30590: PUSH
30591: LD_VAR 0 9
30595: PUSH
30596: LD_INT 1
30598: ARRAY
30599: PPUSH
30600: LD_VAR 0 9
30604: PUSH
30605: LD_INT 2
30607: ARRAY
30608: PPUSH
30609: CALL_OW 546
30613: ST_TO_ADDR
// if hex [ 1 ] then
30614: LD_VAR 0 4
30618: PUSH
30619: LD_INT 1
30621: ARRAY
30622: IFFALSE 30626
// continue ;
30624: GO 30514
// h := hex [ 2 ] ;
30626: LD_ADDR_VAR 0 13
30630: PUSH
30631: LD_VAR 0 4
30635: PUSH
30636: LD_INT 2
30638: ARRAY
30639: ST_TO_ADDR
// if h + 7 < height then
30640: LD_VAR 0 13
30644: PUSH
30645: LD_INT 7
30647: PLUS
30648: PUSH
30649: LD_VAR 0 15
30653: LESS
30654: IFFALSE 30683
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30656: LD_ADDR_VAR 0 18
30660: PUSH
30661: LD_INT 7
30663: PUSH
30664: LD_INT 28
30666: PUSH
30667: LD_INT 45
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: PUSH
30675: LD_VAR 0 12
30679: ARRAY
30680: ST_TO_ADDR
// break ;
30681: GO 30685
// end ; end ; end ;
30683: GO 30514
30685: POP
30686: POP
// end ; if not weapon then
30687: LD_VAR 0 18
30691: NOT
30692: IFFALSE 30752
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30694: LD_ADDR_VAR 0 5
30698: PUSH
30699: LD_VAR 0 5
30703: PUSH
30704: LD_INT 11
30706: PUSH
30707: LD_INT 30
30709: PUSH
30710: LD_INT 49
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: LIST
30717: DIFF
30718: ST_TO_ADDR
// if not list then
30719: LD_VAR 0 5
30723: NOT
30724: IFFALSE 30728
// exit ;
30726: GO 30874
// weapon := list [ rand ( 1 , list ) ] ;
30728: LD_ADDR_VAR 0 18
30732: PUSH
30733: LD_VAR 0 5
30737: PUSH
30738: LD_INT 1
30740: PPUSH
30741: LD_VAR 0 5
30745: PPUSH
30746: CALL_OW 12
30750: ARRAY
30751: ST_TO_ADDR
// end ; if weapon then
30752: LD_VAR 0 18
30756: IFFALSE 30874
// begin tmp := CostOfWeapon ( weapon ) ;
30758: LD_ADDR_VAR 0 14
30762: PUSH
30763: LD_VAR 0 18
30767: PPUSH
30768: CALL_OW 451
30772: ST_TO_ADDR
// j := GetBase ( tower ) ;
30773: LD_ADDR_VAR 0 9
30777: PUSH
30778: LD_VAR 0 1
30782: PPUSH
30783: CALL_OW 274
30787: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30788: LD_VAR 0 9
30792: PPUSH
30793: LD_INT 1
30795: PPUSH
30796: CALL_OW 275
30800: PUSH
30801: LD_VAR 0 14
30805: PUSH
30806: LD_INT 1
30808: ARRAY
30809: GREATEREQUAL
30810: IFFALSE 30836
30812: PUSH
30813: LD_VAR 0 9
30817: PPUSH
30818: LD_INT 2
30820: PPUSH
30821: CALL_OW 275
30825: PUSH
30826: LD_VAR 0 14
30830: PUSH
30831: LD_INT 2
30833: ARRAY
30834: GREATEREQUAL
30835: AND
30836: IFFALSE 30862
30838: PUSH
30839: LD_VAR 0 9
30843: PPUSH
30844: LD_INT 3
30846: PPUSH
30847: CALL_OW 275
30851: PUSH
30852: LD_VAR 0 14
30856: PUSH
30857: LD_INT 3
30859: ARRAY
30860: GREATEREQUAL
30861: AND
30862: IFFALSE 30874
// result := weapon ;
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: LD_VAR 0 18
30873: ST_TO_ADDR
// end ; end ;
30874: LD_VAR 0 3
30878: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30879: LD_INT 0
30881: PPUSH
30882: PPUSH
// result := true ;
30883: LD_ADDR_VAR 0 3
30887: PUSH
30888: LD_INT 1
30890: ST_TO_ADDR
// if array1 = array2 then
30891: LD_VAR 0 1
30895: PUSH
30896: LD_VAR 0 2
30900: EQUAL
30901: IFFALSE 30961
// begin for i = 1 to array1 do
30903: LD_ADDR_VAR 0 4
30907: PUSH
30908: DOUBLE
30909: LD_INT 1
30911: DEC
30912: ST_TO_ADDR
30913: LD_VAR 0 1
30917: PUSH
30918: FOR_TO
30919: IFFALSE 30957
// if array1 [ i ] <> array2 [ i ] then
30921: LD_VAR 0 1
30925: PUSH
30926: LD_VAR 0 4
30930: ARRAY
30931: PUSH
30932: LD_VAR 0 2
30936: PUSH
30937: LD_VAR 0 4
30941: ARRAY
30942: NONEQUAL
30943: IFFALSE 30955
// begin result := false ;
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: LD_INT 0
30952: ST_TO_ADDR
// break ;
30953: GO 30957
// end ;
30955: GO 30918
30957: POP
30958: POP
// end else
30959: GO 30969
// result := false ;
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 0
30968: ST_TO_ADDR
// end ;
30969: LD_VAR 0 3
30973: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30974: LD_INT 0
30976: PPUSH
30977: PPUSH
// if not array1 or not array2 then
30978: LD_VAR 0 1
30982: NOT
30983: IFTRUE 30992
30985: PUSH
30986: LD_VAR 0 2
30990: NOT
30991: OR
30992: IFFALSE 30996
// exit ;
30994: GO 31060
// result := true ;
30996: LD_ADDR_VAR 0 3
31000: PUSH
31001: LD_INT 1
31003: ST_TO_ADDR
// for i = 1 to array1 do
31004: LD_ADDR_VAR 0 4
31008: PUSH
31009: DOUBLE
31010: LD_INT 1
31012: DEC
31013: ST_TO_ADDR
31014: LD_VAR 0 1
31018: PUSH
31019: FOR_TO
31020: IFFALSE 31058
// if array1 [ i ] <> array2 [ i ] then
31022: LD_VAR 0 1
31026: PUSH
31027: LD_VAR 0 4
31031: ARRAY
31032: PUSH
31033: LD_VAR 0 2
31037: PUSH
31038: LD_VAR 0 4
31042: ARRAY
31043: NONEQUAL
31044: IFFALSE 31056
// begin result := false ;
31046: LD_ADDR_VAR 0 3
31050: PUSH
31051: LD_INT 0
31053: ST_TO_ADDR
// break ;
31054: GO 31058
// end ;
31056: GO 31019
31058: POP
31059: POP
// end ;
31060: LD_VAR 0 3
31064: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31065: LD_INT 0
31067: PPUSH
31068: PPUSH
31069: PPUSH
// pom := GetBase ( fac ) ;
31070: LD_ADDR_VAR 0 5
31074: PUSH
31075: LD_VAR 0 1
31079: PPUSH
31080: CALL_OW 274
31084: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31085: LD_ADDR_VAR 0 4
31089: PUSH
31090: LD_VAR 0 2
31094: PUSH
31095: LD_INT 1
31097: ARRAY
31098: PPUSH
31099: LD_VAR 0 2
31103: PUSH
31104: LD_INT 2
31106: ARRAY
31107: PPUSH
31108: LD_VAR 0 2
31112: PUSH
31113: LD_INT 3
31115: ARRAY
31116: PPUSH
31117: LD_VAR 0 2
31121: PUSH
31122: LD_INT 4
31124: ARRAY
31125: PPUSH
31126: CALL_OW 449
31130: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31131: LD_ADDR_VAR 0 3
31135: PUSH
31136: LD_VAR 0 5
31140: PPUSH
31141: LD_INT 1
31143: PPUSH
31144: CALL_OW 275
31148: PUSH
31149: LD_VAR 0 4
31153: PUSH
31154: LD_INT 1
31156: ARRAY
31157: GREATEREQUAL
31158: IFFALSE 31184
31160: PUSH
31161: LD_VAR 0 5
31165: PPUSH
31166: LD_INT 2
31168: PPUSH
31169: CALL_OW 275
31173: PUSH
31174: LD_VAR 0 4
31178: PUSH
31179: LD_INT 2
31181: ARRAY
31182: GREATEREQUAL
31183: AND
31184: IFFALSE 31210
31186: PUSH
31187: LD_VAR 0 5
31191: PPUSH
31192: LD_INT 3
31194: PPUSH
31195: CALL_OW 275
31199: PUSH
31200: LD_VAR 0 4
31204: PUSH
31205: LD_INT 3
31207: ARRAY
31208: GREATEREQUAL
31209: AND
31210: ST_TO_ADDR
// end ;
31211: LD_VAR 0 3
31215: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31216: LD_INT 0
31218: PPUSH
31219: PPUSH
31220: PPUSH
31221: PPUSH
// pom := GetBase ( building ) ;
31222: LD_ADDR_VAR 0 3
31226: PUSH
31227: LD_VAR 0 1
31231: PPUSH
31232: CALL_OW 274
31236: ST_TO_ADDR
// if not pom then
31237: LD_VAR 0 3
31241: NOT
31242: IFFALSE 31246
// exit ;
31244: GO 31420
// btype := GetBType ( building ) ;
31246: LD_ADDR_VAR 0 5
31250: PUSH
31251: LD_VAR 0 1
31255: PPUSH
31256: CALL_OW 266
31260: ST_TO_ADDR
// if btype = b_armoury then
31261: LD_VAR 0 5
31265: PUSH
31266: LD_INT 4
31268: EQUAL
31269: IFFALSE 31279
// btype := b_barracks ;
31271: LD_ADDR_VAR 0 5
31275: PUSH
31276: LD_INT 5
31278: ST_TO_ADDR
// if btype = b_depot then
31279: LD_VAR 0 5
31283: PUSH
31284: LD_INT 0
31286: EQUAL
31287: IFFALSE 31297
// btype := b_warehouse ;
31289: LD_ADDR_VAR 0 5
31293: PUSH
31294: LD_INT 1
31296: ST_TO_ADDR
// if btype = b_workshop then
31297: LD_VAR 0 5
31301: PUSH
31302: LD_INT 2
31304: EQUAL
31305: IFFALSE 31315
// btype := b_factory ;
31307: LD_ADDR_VAR 0 5
31311: PUSH
31312: LD_INT 3
31314: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31315: LD_ADDR_VAR 0 4
31319: PUSH
31320: LD_VAR 0 5
31324: PPUSH
31325: LD_VAR 0 1
31329: PPUSH
31330: CALL_OW 248
31334: PPUSH
31335: CALL_OW 450
31339: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31340: LD_ADDR_VAR 0 2
31344: PUSH
31345: LD_VAR 0 3
31349: PPUSH
31350: LD_INT 1
31352: PPUSH
31353: CALL_OW 275
31357: PUSH
31358: LD_VAR 0 4
31362: PUSH
31363: LD_INT 1
31365: ARRAY
31366: GREATEREQUAL
31367: IFFALSE 31393
31369: PUSH
31370: LD_VAR 0 3
31374: PPUSH
31375: LD_INT 2
31377: PPUSH
31378: CALL_OW 275
31382: PUSH
31383: LD_VAR 0 4
31387: PUSH
31388: LD_INT 2
31390: ARRAY
31391: GREATEREQUAL
31392: AND
31393: IFFALSE 31419
31395: PUSH
31396: LD_VAR 0 3
31400: PPUSH
31401: LD_INT 3
31403: PPUSH
31404: CALL_OW 275
31408: PUSH
31409: LD_VAR 0 4
31413: PUSH
31414: LD_INT 3
31416: ARRAY
31417: GREATEREQUAL
31418: AND
31419: ST_TO_ADDR
// end ;
31420: LD_VAR 0 2
31424: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31425: LD_INT 0
31427: PPUSH
31428: PPUSH
31429: PPUSH
// pom := GetBase ( building ) ;
31430: LD_ADDR_VAR 0 4
31434: PUSH
31435: LD_VAR 0 1
31439: PPUSH
31440: CALL_OW 274
31444: ST_TO_ADDR
// if not pom then
31445: LD_VAR 0 4
31449: NOT
31450: IFFALSE 31454
// exit ;
31452: GO 31559
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31454: LD_ADDR_VAR 0 5
31458: PUSH
31459: LD_VAR 0 2
31463: PPUSH
31464: LD_VAR 0 1
31468: PPUSH
31469: CALL_OW 248
31473: PPUSH
31474: CALL_OW 450
31478: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31479: LD_ADDR_VAR 0 3
31483: PUSH
31484: LD_VAR 0 4
31488: PPUSH
31489: LD_INT 1
31491: PPUSH
31492: CALL_OW 275
31496: PUSH
31497: LD_VAR 0 5
31501: PUSH
31502: LD_INT 1
31504: ARRAY
31505: GREATEREQUAL
31506: IFFALSE 31532
31508: PUSH
31509: LD_VAR 0 4
31513: PPUSH
31514: LD_INT 2
31516: PPUSH
31517: CALL_OW 275
31521: PUSH
31522: LD_VAR 0 5
31526: PUSH
31527: LD_INT 2
31529: ARRAY
31530: GREATEREQUAL
31531: AND
31532: IFFALSE 31558
31534: PUSH
31535: LD_VAR 0 4
31539: PPUSH
31540: LD_INT 3
31542: PPUSH
31543: CALL_OW 275
31547: PUSH
31548: LD_VAR 0 5
31552: PUSH
31553: LD_INT 3
31555: ARRAY
31556: GREATEREQUAL
31557: AND
31558: ST_TO_ADDR
// end ;
31559: LD_VAR 0 3
31563: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31564: LD_INT 0
31566: PPUSH
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
31571: PPUSH
31572: PPUSH
31573: PPUSH
31574: PPUSH
31575: PPUSH
31576: PPUSH
// result := false ;
31577: LD_ADDR_VAR 0 8
31581: PUSH
31582: LD_INT 0
31584: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31585: LD_VAR 0 5
31589: NOT
31590: IFTRUE 31599
31592: PUSH
31593: LD_VAR 0 1
31597: NOT
31598: OR
31599: IFTRUE 31608
31601: PUSH
31602: LD_VAR 0 2
31606: NOT
31607: OR
31608: IFTRUE 31617
31610: PUSH
31611: LD_VAR 0 3
31615: NOT
31616: OR
31617: IFFALSE 31621
// exit ;
31619: GO 32447
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31621: LD_ADDR_VAR 0 14
31625: PUSH
31626: LD_VAR 0 1
31630: PPUSH
31631: LD_VAR 0 2
31635: PPUSH
31636: LD_VAR 0 3
31640: PPUSH
31641: LD_VAR 0 4
31645: PPUSH
31646: LD_VAR 0 5
31650: PUSH
31651: LD_INT 1
31653: ARRAY
31654: PPUSH
31655: CALL_OW 248
31659: PPUSH
31660: LD_INT 0
31662: PPUSH
31663: CALL 33728 0 6
31667: ST_TO_ADDR
// if not hexes then
31668: LD_VAR 0 14
31672: NOT
31673: IFFALSE 31677
// exit ;
31675: GO 32447
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31677: LD_ADDR_VAR 0 17
31681: PUSH
31682: LD_VAR 0 5
31686: PPUSH
31687: LD_INT 22
31689: PUSH
31690: LD_VAR 0 13
31694: PPUSH
31695: CALL_OW 255
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: LD_INT 30
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 30
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: LIST
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PPUSH
31736: CALL_OW 72
31740: ST_TO_ADDR
// for i = 1 to hexes do
31741: LD_ADDR_VAR 0 9
31745: PUSH
31746: DOUBLE
31747: LD_INT 1
31749: DEC
31750: ST_TO_ADDR
31751: LD_VAR 0 14
31755: PUSH
31756: FOR_TO
31757: IFFALSE 32445
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31759: LD_ADDR_VAR 0 13
31763: PUSH
31764: LD_VAR 0 14
31768: PUSH
31769: LD_VAR 0 9
31773: ARRAY
31774: PUSH
31775: LD_INT 1
31777: ARRAY
31778: PPUSH
31779: LD_VAR 0 14
31783: PUSH
31784: LD_VAR 0 9
31788: ARRAY
31789: PUSH
31790: LD_INT 2
31792: ARRAY
31793: PPUSH
31794: CALL_OW 428
31798: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31799: LD_VAR 0 14
31803: PUSH
31804: LD_VAR 0 9
31808: ARRAY
31809: PUSH
31810: LD_INT 1
31812: ARRAY
31813: PPUSH
31814: LD_VAR 0 14
31818: PUSH
31819: LD_VAR 0 9
31823: ARRAY
31824: PUSH
31825: LD_INT 2
31827: ARRAY
31828: PPUSH
31829: CALL_OW 351
31833: IFTRUE 31872
31835: PUSH
31836: LD_VAR 0 14
31840: PUSH
31841: LD_VAR 0 9
31845: ARRAY
31846: PUSH
31847: LD_INT 1
31849: ARRAY
31850: PPUSH
31851: LD_VAR 0 14
31855: PUSH
31856: LD_VAR 0 9
31860: ARRAY
31861: PUSH
31862: LD_INT 2
31864: ARRAY
31865: PPUSH
31866: CALL_OW 488
31870: NOT
31871: OR
31872: IFTRUE 31889
31874: PUSH
31875: LD_VAR 0 13
31879: PPUSH
31880: CALL_OW 247
31884: PUSH
31885: LD_INT 3
31887: EQUAL
31888: OR
31889: IFFALSE 31895
// exit ;
31891: POP
31892: POP
31893: GO 32447
// if not tmp then
31895: LD_VAR 0 13
31899: NOT
31900: IFFALSE 31904
// continue ;
31902: GO 31756
// result := true ;
31904: LD_ADDR_VAR 0 8
31908: PUSH
31909: LD_INT 1
31911: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31912: LD_VAR 0 6
31916: IFFALSE 31933
31918: PUSH
31919: LD_VAR 0 13
31923: PPUSH
31924: CALL_OW 247
31928: PUSH
31929: LD_INT 2
31931: EQUAL
31932: AND
31933: IFFALSE 31950
31935: PUSH
31936: LD_VAR 0 13
31940: PPUSH
31941: CALL_OW 263
31945: PUSH
31946: LD_INT 1
31948: EQUAL
31949: AND
31950: IFFALSE 32114
// begin if IsDrivenBy ( tmp ) then
31952: LD_VAR 0 13
31956: PPUSH
31957: CALL_OW 311
31961: IFFALSE 31965
// continue ;
31963: GO 31756
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31965: LD_VAR 0 6
31969: PPUSH
31970: LD_INT 3
31972: PUSH
31973: LD_INT 60
31975: PUSH
31976: EMPTY
31977: LIST
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: LD_INT 55
31988: PUSH
31989: EMPTY
31990: LIST
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PPUSH
32000: CALL_OW 72
32004: IFFALSE 32112
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32006: LD_ADDR_VAR 0 18
32010: PUSH
32011: LD_VAR 0 6
32015: PPUSH
32016: LD_INT 3
32018: PUSH
32019: LD_INT 60
32021: PUSH
32022: EMPTY
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 3
32031: PUSH
32032: LD_INT 55
32034: PUSH
32035: EMPTY
32036: LIST
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PPUSH
32046: CALL_OW 72
32050: PUSH
32051: LD_INT 1
32053: ARRAY
32054: ST_TO_ADDR
// if IsInUnit ( driver ) then
32055: LD_VAR 0 18
32059: PPUSH
32060: CALL_OW 310
32064: IFFALSE 32075
// ComExit ( driver ) ;
32066: LD_VAR 0 18
32070: PPUSH
32071: CALL 57718 0 1
// AddComEnterUnit ( driver , tmp ) ;
32075: LD_VAR 0 18
32079: PPUSH
32080: LD_VAR 0 13
32084: PPUSH
32085: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32089: LD_VAR 0 18
32093: PPUSH
32094: LD_VAR 0 7
32098: PPUSH
32099: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32103: LD_VAR 0 18
32107: PPUSH
32108: CALL_OW 181
// end ; continue ;
32112: GO 31756
// end ; if not cleaners or not tmp in cleaners then
32114: LD_VAR 0 6
32118: NOT
32119: IFTRUE 32134
32121: PUSH
32122: LD_VAR 0 13
32126: PUSH
32127: LD_VAR 0 6
32131: IN
32132: NOT
32133: OR
32134: IFFALSE 32443
// begin if dep then
32136: LD_VAR 0 17
32140: IFFALSE 32276
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32142: LD_ADDR_VAR 0 16
32146: PUSH
32147: LD_VAR 0 17
32151: PUSH
32152: LD_INT 1
32154: ARRAY
32155: PPUSH
32156: CALL_OW 250
32160: PPUSH
32161: LD_VAR 0 17
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: CALL_OW 254
32174: PPUSH
32175: LD_INT 5
32177: PPUSH
32178: CALL_OW 272
32182: PUSH
32183: LD_VAR 0 17
32187: PUSH
32188: LD_INT 1
32190: ARRAY
32191: PPUSH
32192: CALL_OW 251
32196: PPUSH
32197: LD_VAR 0 17
32201: PUSH
32202: LD_INT 1
32204: ARRAY
32205: PPUSH
32206: CALL_OW 254
32210: PPUSH
32211: LD_INT 5
32213: PPUSH
32214: CALL_OW 273
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32223: LD_VAR 0 16
32227: PUSH
32228: LD_INT 1
32230: ARRAY
32231: PPUSH
32232: LD_VAR 0 16
32236: PUSH
32237: LD_INT 2
32239: ARRAY
32240: PPUSH
32241: CALL_OW 488
32245: IFFALSE 32276
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32247: LD_VAR 0 13
32251: PPUSH
32252: LD_VAR 0 16
32256: PUSH
32257: LD_INT 1
32259: ARRAY
32260: PPUSH
32261: LD_VAR 0 16
32265: PUSH
32266: LD_INT 2
32268: ARRAY
32269: PPUSH
32270: CALL_OW 111
// continue ;
32274: GO 31756
// end ; end ; r := GetDir ( tmp ) ;
32276: LD_ADDR_VAR 0 15
32280: PUSH
32281: LD_VAR 0 13
32285: PPUSH
32286: CALL_OW 254
32290: ST_TO_ADDR
// if r = 5 then
32291: LD_VAR 0 15
32295: PUSH
32296: LD_INT 5
32298: EQUAL
32299: IFFALSE 32309
// r := 0 ;
32301: LD_ADDR_VAR 0 15
32305: PUSH
32306: LD_INT 0
32308: ST_TO_ADDR
// for j = r to 5 do
32309: LD_ADDR_VAR 0 10
32313: PUSH
32314: DOUBLE
32315: LD_VAR 0 15
32319: DEC
32320: ST_TO_ADDR
32321: LD_INT 5
32323: PUSH
32324: FOR_TO
32325: IFFALSE 32441
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32327: LD_ADDR_VAR 0 11
32331: PUSH
32332: LD_VAR 0 13
32336: PPUSH
32337: CALL_OW 250
32341: PPUSH
32342: LD_VAR 0 10
32346: PPUSH
32347: LD_INT 2
32349: PPUSH
32350: CALL_OW 272
32354: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32355: LD_ADDR_VAR 0 12
32359: PUSH
32360: LD_VAR 0 13
32364: PPUSH
32365: CALL_OW 251
32369: PPUSH
32370: LD_VAR 0 10
32374: PPUSH
32375: LD_INT 2
32377: PPUSH
32378: CALL_OW 273
32382: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32383: LD_VAR 0 11
32387: PPUSH
32388: LD_VAR 0 12
32392: PPUSH
32393: CALL_OW 488
32397: IFFALSE 32416
32399: PUSH
32400: LD_VAR 0 11
32404: PPUSH
32405: LD_VAR 0 12
32409: PPUSH
32410: CALL_OW 428
32414: NOT
32415: AND
32416: IFFALSE 32439
// begin ComMoveXY ( tmp , _x , _y ) ;
32418: LD_VAR 0 13
32422: PPUSH
32423: LD_VAR 0 11
32427: PPUSH
32428: LD_VAR 0 12
32432: PPUSH
32433: CALL_OW 111
// break ;
32437: GO 32441
// end ; end ;
32439: GO 32324
32441: POP
32442: POP
// end ; end ;
32443: GO 31756
32445: POP
32446: POP
// end ;
32447: LD_VAR 0 8
32451: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32452: LD_INT 0
32454: PPUSH
// result := true ;
32455: LD_ADDR_VAR 0 3
32459: PUSH
32460: LD_INT 1
32462: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32463: LD_VAR 0 2
32467: PUSH
32468: LD_INT 24
32470: DOUBLE
32471: EQUAL
32472: IFTRUE 32482
32474: LD_INT 33
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32507
32482: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32483: LD_ADDR_VAR 0 3
32487: PUSH
32488: LD_INT 32
32490: PPUSH
32491: LD_VAR 0 1
32495: PPUSH
32496: CALL_OW 321
32500: PUSH
32501: LD_INT 2
32503: EQUAL
32504: ST_TO_ADDR
32505: GO 32823
32507: LD_INT 20
32509: DOUBLE
32510: EQUAL
32511: IFTRUE 32515
32513: GO 32540
32515: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32516: LD_ADDR_VAR 0 3
32520: PUSH
32521: LD_INT 6
32523: PPUSH
32524: LD_VAR 0 1
32528: PPUSH
32529: CALL_OW 321
32533: PUSH
32534: LD_INT 2
32536: EQUAL
32537: ST_TO_ADDR
32538: GO 32823
32540: LD_INT 22
32542: DOUBLE
32543: EQUAL
32544: IFTRUE 32554
32546: LD_INT 36
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32579
32554: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_INT 15
32562: PPUSH
32563: LD_VAR 0 1
32567: PPUSH
32568: CALL_OW 321
32572: PUSH
32573: LD_INT 2
32575: EQUAL
32576: ST_TO_ADDR
32577: GO 32823
32579: LD_INT 30
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32587
32585: GO 32612
32587: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32588: LD_ADDR_VAR 0 3
32592: PUSH
32593: LD_INT 20
32595: PPUSH
32596: LD_VAR 0 1
32600: PPUSH
32601: CALL_OW 321
32605: PUSH
32606: LD_INT 2
32608: EQUAL
32609: ST_TO_ADDR
32610: GO 32823
32612: LD_INT 28
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32626
32618: LD_INT 21
32620: DOUBLE
32621: EQUAL
32622: IFTRUE 32626
32624: GO 32651
32626: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32627: LD_ADDR_VAR 0 3
32631: PUSH
32632: LD_INT 21
32634: PPUSH
32635: LD_VAR 0 1
32639: PPUSH
32640: CALL_OW 321
32644: PUSH
32645: LD_INT 2
32647: EQUAL
32648: ST_TO_ADDR
32649: GO 32823
32651: LD_INT 16
32653: DOUBLE
32654: EQUAL
32655: IFTRUE 32659
32657: GO 32684
32659: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32660: LD_ADDR_VAR 0 3
32664: PUSH
32665: LD_INT 84
32667: PPUSH
32668: LD_VAR 0 1
32672: PPUSH
32673: CALL_OW 321
32677: PUSH
32678: LD_INT 2
32680: EQUAL
32681: ST_TO_ADDR
32682: GO 32823
32684: LD_INT 19
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32698
32690: LD_INT 23
32692: DOUBLE
32693: EQUAL
32694: IFTRUE 32698
32696: GO 32723
32698: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32699: LD_ADDR_VAR 0 3
32703: PUSH
32704: LD_INT 83
32706: PPUSH
32707: LD_VAR 0 1
32711: PPUSH
32712: CALL_OW 321
32716: PUSH
32717: LD_INT 2
32719: EQUAL
32720: ST_TO_ADDR
32721: GO 32823
32723: LD_INT 17
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32756
32731: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_INT 39
32739: PPUSH
32740: LD_VAR 0 1
32744: PPUSH
32745: CALL_OW 321
32749: PUSH
32750: LD_INT 2
32752: EQUAL
32753: ST_TO_ADDR
32754: GO 32823
32756: LD_INT 18
32758: DOUBLE
32759: EQUAL
32760: IFTRUE 32764
32762: GO 32789
32764: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32765: LD_ADDR_VAR 0 3
32769: PUSH
32770: LD_INT 40
32772: PPUSH
32773: LD_VAR 0 1
32777: PPUSH
32778: CALL_OW 321
32782: PUSH
32783: LD_INT 2
32785: EQUAL
32786: ST_TO_ADDR
32787: GO 32823
32789: LD_INT 27
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32797
32795: GO 32822
32797: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32798: LD_ADDR_VAR 0 3
32802: PUSH
32803: LD_INT 35
32805: PPUSH
32806: LD_VAR 0 1
32810: PPUSH
32811: CALL_OW 321
32815: PUSH
32816: LD_INT 2
32818: EQUAL
32819: ST_TO_ADDR
32820: GO 32823
32822: POP
// end ;
32823: LD_VAR 0 3
32827: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32828: LD_INT 0
32830: PPUSH
32831: PPUSH
32832: PPUSH
32833: PPUSH
32834: PPUSH
32835: PPUSH
32836: PPUSH
32837: PPUSH
32838: PPUSH
32839: PPUSH
32840: PPUSH
// result := false ;
32841: LD_ADDR_VAR 0 6
32845: PUSH
32846: LD_INT 0
32848: ST_TO_ADDR
// if btype = b_depot then
32849: LD_VAR 0 2
32853: PUSH
32854: LD_INT 0
32856: EQUAL
32857: IFFALSE 32869
// begin result := true ;
32859: LD_ADDR_VAR 0 6
32863: PUSH
32864: LD_INT 1
32866: ST_TO_ADDR
// exit ;
32867: GO 33723
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32869: LD_VAR 0 1
32873: NOT
32874: IFTRUE 32899
32876: PUSH
32877: LD_VAR 0 1
32881: PPUSH
32882: CALL_OW 266
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: IN
32897: NOT
32898: OR
32899: IFTRUE 32908
32901: PUSH
32902: LD_VAR 0 2
32906: NOT
32907: OR
32908: IFTRUE 32944
32910: PUSH
32911: LD_VAR 0 5
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: LD_INT 3
32927: PUSH
32928: LD_INT 4
32930: PUSH
32931: LD_INT 5
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: IN
32942: NOT
32943: OR
32944: IFTRUE 32963
32946: PUSH
32947: LD_VAR 0 3
32951: PPUSH
32952: LD_VAR 0 4
32956: PPUSH
32957: CALL_OW 488
32961: NOT
32962: OR
32963: IFFALSE 32967
// exit ;
32965: GO 33723
// side := GetSide ( depot ) ;
32967: LD_ADDR_VAR 0 9
32971: PUSH
32972: LD_VAR 0 1
32976: PPUSH
32977: CALL_OW 255
32981: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32982: LD_VAR 0 9
32986: PPUSH
32987: LD_VAR 0 2
32991: PPUSH
32992: CALL 32452 0 2
32996: NOT
32997: IFFALSE 33001
// exit ;
32999: GO 33723
// pom := GetBase ( depot ) ;
33001: LD_ADDR_VAR 0 10
33005: PUSH
33006: LD_VAR 0 1
33010: PPUSH
33011: CALL_OW 274
33015: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33016: LD_ADDR_VAR 0 11
33020: PUSH
33021: LD_VAR 0 2
33025: PPUSH
33026: LD_VAR 0 1
33030: PPUSH
33031: CALL_OW 248
33035: PPUSH
33036: CALL_OW 450
33040: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33041: LD_VAR 0 10
33045: PPUSH
33046: LD_INT 1
33048: PPUSH
33049: CALL_OW 275
33053: PUSH
33054: LD_VAR 0 11
33058: PUSH
33059: LD_INT 1
33061: ARRAY
33062: GREATEREQUAL
33063: IFFALSE 33089
33065: PUSH
33066: LD_VAR 0 10
33070: PPUSH
33071: LD_INT 2
33073: PPUSH
33074: CALL_OW 275
33078: PUSH
33079: LD_VAR 0 11
33083: PUSH
33084: LD_INT 2
33086: ARRAY
33087: GREATEREQUAL
33088: AND
33089: IFFALSE 33115
33091: PUSH
33092: LD_VAR 0 10
33096: PPUSH
33097: LD_INT 3
33099: PPUSH
33100: CALL_OW 275
33104: PUSH
33105: LD_VAR 0 11
33109: PUSH
33110: LD_INT 3
33112: ARRAY
33113: GREATEREQUAL
33114: AND
33115: NOT
33116: IFFALSE 33120
// exit ;
33118: GO 33723
// if GetBType ( depot ) = b_depot then
33120: LD_VAR 0 1
33124: PPUSH
33125: CALL_OW 266
33129: PUSH
33130: LD_INT 0
33132: EQUAL
33133: IFFALSE 33145
// dist := 28 else
33135: LD_ADDR_VAR 0 14
33139: PUSH
33140: LD_INT 28
33142: ST_TO_ADDR
33143: GO 33153
// dist := 36 ;
33145: LD_ADDR_VAR 0 14
33149: PUSH
33150: LD_INT 36
33152: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33153: LD_VAR 0 1
33157: PPUSH
33158: LD_VAR 0 3
33162: PPUSH
33163: LD_VAR 0 4
33167: PPUSH
33168: CALL_OW 297
33172: PUSH
33173: LD_VAR 0 14
33177: GREATER
33178: IFFALSE 33182
// exit ;
33180: GO 33723
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33182: LD_ADDR_VAR 0 12
33186: PUSH
33187: LD_VAR 0 2
33191: PPUSH
33192: LD_VAR 0 3
33196: PPUSH
33197: LD_VAR 0 4
33201: PPUSH
33202: LD_VAR 0 5
33206: PPUSH
33207: LD_VAR 0 1
33211: PPUSH
33212: CALL_OW 248
33216: PPUSH
33217: LD_INT 0
33219: PPUSH
33220: CALL 33728 0 6
33224: ST_TO_ADDR
// if not hexes then
33225: LD_VAR 0 12
33229: NOT
33230: IFFALSE 33234
// exit ;
33232: GO 33723
// hex := GetHexInfo ( x , y ) ;
33234: LD_ADDR_VAR 0 15
33238: PUSH
33239: LD_VAR 0 3
33243: PPUSH
33244: LD_VAR 0 4
33248: PPUSH
33249: CALL_OW 546
33253: ST_TO_ADDR
// if hex [ 1 ] then
33254: LD_VAR 0 15
33258: PUSH
33259: LD_INT 1
33261: ARRAY
33262: IFFALSE 33266
// exit ;
33264: GO 33723
// height := hex [ 2 ] ;
33266: LD_ADDR_VAR 0 13
33270: PUSH
33271: LD_VAR 0 15
33275: PUSH
33276: LD_INT 2
33278: ARRAY
33279: ST_TO_ADDR
// for i = 1 to hexes do
33280: LD_ADDR_VAR 0 7
33284: PUSH
33285: DOUBLE
33286: LD_INT 1
33288: DEC
33289: ST_TO_ADDR
33290: LD_VAR 0 12
33294: PUSH
33295: FOR_TO
33296: IFFALSE 33640
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33298: LD_VAR 0 12
33302: PUSH
33303: LD_VAR 0 7
33307: ARRAY
33308: PUSH
33309: LD_INT 1
33311: ARRAY
33312: PPUSH
33313: LD_VAR 0 12
33317: PUSH
33318: LD_VAR 0 7
33322: ARRAY
33323: PUSH
33324: LD_INT 2
33326: ARRAY
33327: PPUSH
33328: CALL_OW 488
33332: NOT
33333: IFTRUE 33375
33335: PUSH
33336: LD_VAR 0 12
33340: PUSH
33341: LD_VAR 0 7
33345: ARRAY
33346: PUSH
33347: LD_INT 1
33349: ARRAY
33350: PPUSH
33351: LD_VAR 0 12
33355: PUSH
33356: LD_VAR 0 7
33360: ARRAY
33361: PUSH
33362: LD_INT 2
33364: ARRAY
33365: PPUSH
33366: CALL_OW 428
33370: PUSH
33371: LD_INT 0
33373: GREATER
33374: OR
33375: IFTRUE 33413
33377: PUSH
33378: LD_VAR 0 12
33382: PUSH
33383: LD_VAR 0 7
33387: ARRAY
33388: PUSH
33389: LD_INT 1
33391: ARRAY
33392: PPUSH
33393: LD_VAR 0 12
33397: PUSH
33398: LD_VAR 0 7
33402: ARRAY
33403: PUSH
33404: LD_INT 2
33406: ARRAY
33407: PPUSH
33408: CALL_OW 351
33412: OR
33413: IFFALSE 33419
// exit ;
33415: POP
33416: POP
33417: GO 33723
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33419: LD_ADDR_VAR 0 8
33423: PUSH
33424: LD_VAR 0 12
33428: PUSH
33429: LD_VAR 0 7
33433: ARRAY
33434: PUSH
33435: LD_INT 1
33437: ARRAY
33438: PPUSH
33439: LD_VAR 0 12
33443: PUSH
33444: LD_VAR 0 7
33448: ARRAY
33449: PUSH
33450: LD_INT 2
33452: ARRAY
33453: PPUSH
33454: CALL_OW 546
33458: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33459: LD_VAR 0 8
33463: PUSH
33464: LD_INT 1
33466: ARRAY
33467: IFTRUE 33489
33469: PUSH
33470: LD_VAR 0 8
33474: PUSH
33475: LD_INT 2
33477: ARRAY
33478: PUSH
33479: LD_VAR 0 13
33483: PUSH
33484: LD_INT 2
33486: PLUS
33487: GREATER
33488: OR
33489: IFTRUE 33511
33491: PUSH
33492: LD_VAR 0 8
33496: PUSH
33497: LD_INT 2
33499: ARRAY
33500: PUSH
33501: LD_VAR 0 13
33505: PUSH
33506: LD_INT 2
33508: MINUS
33509: LESS
33510: OR
33511: IFTRUE 33579
33513: PUSH
33514: LD_VAR 0 8
33518: PUSH
33519: LD_INT 3
33521: ARRAY
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 8
33528: PUSH
33529: LD_INT 9
33531: PUSH
33532: LD_INT 10
33534: PUSH
33535: LD_INT 11
33537: PUSH
33538: LD_INT 12
33540: PUSH
33541: LD_INT 13
33543: PUSH
33544: LD_INT 16
33546: PUSH
33547: LD_INT 17
33549: PUSH
33550: LD_INT 18
33552: PUSH
33553: LD_INT 19
33555: PUSH
33556: LD_INT 20
33558: PUSH
33559: LD_INT 21
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: IN
33577: NOT
33578: OR
33579: IFTRUE 33592
33581: PUSH
33582: LD_VAR 0 8
33586: PUSH
33587: LD_INT 5
33589: ARRAY
33590: NOT
33591: OR
33592: IFTRUE 33632
33594: PUSH
33595: LD_VAR 0 8
33599: PUSH
33600: LD_INT 6
33602: ARRAY
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: LD_INT 7
33612: PUSH
33613: LD_INT 9
33615: PUSH
33616: LD_INT 10
33618: PUSH
33619: LD_INT 11
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: IN
33630: NOT
33631: OR
33632: IFFALSE 33638
// exit ;
33634: POP
33635: POP
33636: GO 33723
// end ;
33638: GO 33295
33640: POP
33641: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33642: LD_VAR 0 9
33646: PPUSH
33647: LD_VAR 0 3
33651: PPUSH
33652: LD_VAR 0 4
33656: PPUSH
33657: LD_INT 20
33659: PPUSH
33660: CALL 25542 0 4
33664: PUSH
33665: LD_INT 4
33667: ARRAY
33668: IFFALSE 33672
// exit ;
33670: GO 33723
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33672: LD_VAR 0 2
33676: PUSH
33677: LD_INT 29
33679: PUSH
33680: LD_INT 30
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: IN
33687: IFFALSE 33711
33689: PUSH
33690: LD_VAR 0 3
33694: PPUSH
33695: LD_VAR 0 4
33699: PPUSH
33700: LD_VAR 0 9
33704: PPUSH
33705: CALL_OW 440
33709: NOT
33710: AND
33711: IFFALSE 33715
// exit ;
33713: GO 33723
// result := true ;
33715: LD_ADDR_VAR 0 6
33719: PUSH
33720: LD_INT 1
33722: ST_TO_ADDR
// end ;
33723: LD_VAR 0 6
33727: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33728: LD_INT 0
33730: PPUSH
33731: PPUSH
33732: PPUSH
33733: PPUSH
33734: PPUSH
33735: PPUSH
33736: PPUSH
33737: PPUSH
33738: PPUSH
33739: PPUSH
33740: PPUSH
33741: PPUSH
33742: PPUSH
33743: PPUSH
33744: PPUSH
33745: PPUSH
33746: PPUSH
33747: PPUSH
33748: PPUSH
33749: PPUSH
33750: PPUSH
33751: PPUSH
33752: PPUSH
33753: PPUSH
33754: PPUSH
33755: PPUSH
33756: PPUSH
33757: PPUSH
33758: PPUSH
33759: PPUSH
33760: PPUSH
33761: PPUSH
33762: PPUSH
33763: PPUSH
33764: PPUSH
33765: PPUSH
33766: PPUSH
33767: PPUSH
33768: PPUSH
33769: PPUSH
33770: PPUSH
33771: PPUSH
33772: PPUSH
33773: PPUSH
33774: PPUSH
33775: PPUSH
33776: PPUSH
33777: PPUSH
33778: PPUSH
33779: PPUSH
33780: PPUSH
33781: PPUSH
33782: PPUSH
33783: PPUSH
33784: PPUSH
33785: PPUSH
33786: PPUSH
33787: PPUSH
// result = [ ] ;
33788: LD_ADDR_VAR 0 7
33792: PUSH
33793: EMPTY
33794: ST_TO_ADDR
// temp_list = [ ] ;
33795: LD_ADDR_VAR 0 9
33799: PUSH
33800: EMPTY
33801: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33802: LD_VAR 0 4
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: LD_INT 2
33815: PUSH
33816: LD_INT 3
33818: PUSH
33819: LD_INT 4
33821: PUSH
33822: LD_INT 5
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: IN
33833: NOT
33834: IFTRUE 33877
33836: PUSH
33837: LD_VAR 0 1
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: IN
33852: IFFALSE 33876
33854: PUSH
33855: LD_VAR 0 5
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: LD_INT 2
33865: PUSH
33866: LD_INT 3
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: LIST
33873: IN
33874: NOT
33875: AND
33876: OR
33877: IFFALSE 33881
// exit ;
33879: GO 52280
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33881: LD_VAR 0 1
33885: PUSH
33886: LD_INT 6
33888: PUSH
33889: LD_INT 7
33891: PUSH
33892: LD_INT 8
33894: PUSH
33895: LD_INT 13
33897: PUSH
33898: LD_INT 12
33900: PUSH
33901: LD_INT 15
33903: PUSH
33904: LD_INT 11
33906: PUSH
33907: LD_INT 14
33909: PUSH
33910: LD_INT 10
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: IN
33924: IFFALSE 33934
// btype = b_lab ;
33926: LD_ADDR_VAR 0 1
33930: PUSH
33931: LD_INT 6
33933: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33934: LD_VAR 0 6
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 2
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: IN
33953: NOT
33954: IFTRUE 34022
33956: PUSH
33957: LD_VAR 0 1
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 6
33976: PUSH
33977: LD_INT 36
33979: PUSH
33980: LD_INT 4
33982: PUSH
33983: LD_INT 5
33985: PUSH
33986: LD_INT 31
33988: PUSH
33989: LD_INT 32
33991: PUSH
33992: LD_INT 33
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: IN
34008: NOT
34009: IFFALSE 34021
34011: PUSH
34012: LD_VAR 0 6
34016: PUSH
34017: LD_INT 1
34019: EQUAL
34020: AND
34021: OR
34022: IFTRUE 34054
34024: PUSH
34025: LD_VAR 0 1
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: IN
34040: NOT
34041: IFFALSE 34053
34043: PUSH
34044: LD_VAR 0 6
34048: PUSH
34049: LD_INT 2
34051: EQUAL
34052: AND
34053: OR
34054: IFFALSE 34064
// mode = 0 ;
34056: LD_ADDR_VAR 0 6
34060: PUSH
34061: LD_INT 0
34063: ST_TO_ADDR
// case mode of 0 :
34064: LD_VAR 0 6
34068: PUSH
34069: LD_INT 0
34071: DOUBLE
34072: EQUAL
34073: IFTRUE 34077
34075: GO 45530
34077: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34078: LD_ADDR_VAR 0 11
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: NEG
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: LD_INT 3
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: LD_INT 3
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: NEG
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34271: LD_ADDR_VAR 0 12
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: NEG
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: NEG
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: NEG
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 3
34428: NEG
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 3
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34467: LD_ADDR_VAR 0 13
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: LD_INT 2
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 2
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: NEG
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: LD_INT 2
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: LD_INT 3
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 3
34626: NEG
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 3
34638: NEG
34639: PUSH
34640: LD_INT 3
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34666: LD_ADDR_VAR 0 14
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 1
34686: NEG
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: LD_INT 1
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: LD_INT 2
34751: NEG
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 2
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: LD_INT 3
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: LD_INT 3
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34862: LD_ADDR_VAR 0 15
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 1
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: PUSH
34944: LD_INT 1
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 2
34996: NEG
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 2
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 3
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 3
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35055: LD_ADDR_VAR 0 16
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: LD_INT 2
35140: NEG
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: NEG
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: LD_INT 2
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 3
35212: PUSH
35213: LD_INT 3
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35248: LD_ADDR_VAR 0 17
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 0
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 1
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 2
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 2
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 2
35383: PUSH
35384: LD_INT 2
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 2
35424: NEG
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 2
35435: NEG
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: NEG
35448: PUSH
35449: LD_INT 2
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35478: LD_ADDR_VAR 0 18
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 0
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: LD_INT 2
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 2
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 2
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 2
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 2
35654: NEG
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 2
35665: NEG
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 2
35677: NEG
35678: PUSH
35679: LD_INT 2
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35708: LD_ADDR_VAR 0 19
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: LD_INT 2
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 2
35884: NEG
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 2
35895: NEG
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 2
35907: NEG
35908: PUSH
35909: LD_INT 2
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35938: LD_ADDR_VAR 0 20
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: LD_INT 2
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 2
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 2
36114: NEG
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: NEG
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 2
36137: NEG
36138: PUSH
36139: LD_INT 2
36141: NEG
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36168: LD_ADDR_VAR 0 21
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: NEG
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: LD_INT 2
36253: NEG
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36398: LD_ADDR_VAR 0 22
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: NEG
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: LD_INT 1
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 2
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: NEG
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 2
36585: NEG
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36628: LD_ADDR_VAR 0 23
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: NEG
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 2
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: NEG
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 2
36815: NEG
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 2
36827: NEG
36828: PUSH
36829: LD_INT 2
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 2
36839: NEG
36840: PUSH
36841: LD_INT 3
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 3
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36908: LD_ADDR_VAR 0 24
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 2
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: LD_INT 2
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 3
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 3
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37184: LD_ADDR_VAR 0 25
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 2
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 2
37371: NEG
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 3
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 3
37405: PUSH
37406: LD_INT 2
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 2
37415: PUSH
37416: LD_INT 3
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 3
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37458: LD_ADDR_VAR 0 26
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 2
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 2
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 2
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 2
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 2
37634: NEG
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 2
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: NEG
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: LD_INT 3
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37734: LD_ADDR_VAR 0 27
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 2
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: LD_INT 2
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 2
37910: NEG
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 2
37921: NEG
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 3
37967: NEG
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 3
37979: NEG
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38014: LD_ADDR_VAR 0 28
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: LD_INT 2
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 2
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 2
38190: NEG
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: NEG
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: NEG
38226: PUSH
38227: LD_INT 3
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 3
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 3
38249: NEG
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 3
38261: NEG
38262: PUSH
38263: LD_INT 2
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38296: LD_ADDR_VAR 0 29
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: LD_INT 1
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: LD_INT 2
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: LD_INT 2
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: LD_INT 2
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 2
38462: NEG
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 2
38474: NEG
38475: PUSH
38476: LD_INT 2
38478: NEG
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: LD_INT 3
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: LD_INT 3
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 3
38540: NEG
38541: PUSH
38542: LD_INT 2
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38575: LD_ADDR_VAR 0 30
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: LD_INT 1
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 2
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 2
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 2
38741: NEG
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 2
38752: NEG
38753: PUSH
38754: LD_INT 1
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 3
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: LD_INT 3
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: NEG
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38853: LD_ADDR_VAR 0 31
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: LD_INT 2
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 2
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: LD_INT 3
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 3
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: LD_INT 3
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 3
39096: NEG
39097: PUSH
39098: LD_INT 2
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39131: LD_ADDR_VAR 0 32
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: LD_INT 2
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: LD_INT 2
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 3
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 3
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: LD_INT 3
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 3
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39409: LD_ADDR_VAR 0 33
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 2
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: LD_INT 2
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: LD_INT 3
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 1
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 3
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 3
39653: NEG
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39688: LD_ADDR_VAR 0 34
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: LD_INT 2
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: LD_INT 2
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 2
39844: NEG
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: NEG
39868: PUSH
39869: LD_INT 2
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 3
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 3
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 3
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39968: LD_ADDR_VAR 0 35
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: NEG
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40080: LD_ADDR_VAR 0 36
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40192: LD_ADDR_VAR 0 37
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40304: LD_ADDR_VAR 0 38
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: LD_INT 1
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 2
40395: NEG
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40416: LD_ADDR_VAR 0 39
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40528: LD_ADDR_VAR 0 40
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40640: LD_ADDR_VAR 0 41
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 3
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 3
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 3
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 3
40883: PUSH
40884: LD_INT 3
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 3
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 3
40914: NEG
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 3
40925: NEG
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 3
40937: NEG
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: LD_INT 3
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40990: LD_ADDR_VAR 0 42
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: LD_INT 2
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: LD_INT 3
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 3
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 3
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 3
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: LD_INT 3
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: LD_INT 3
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 3
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 3
41287: NEG
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 3
41299: NEG
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41340: LD_ADDR_VAR 0 43
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 2
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 2
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 3
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 3
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 3
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 3
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: LD_INT 3
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 3
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 3
41636: NEG
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 3
41647: NEG
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41688: LD_ADDR_VAR 0 44
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 2
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: LD_INT 3
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 3
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 3
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 3
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: LD_INT 3
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 3
41962: NEG
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 3
41973: NEG
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 3
41985: NEG
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 3
41997: NEG
41998: PUSH
41999: LD_INT 3
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42038: LD_ADDR_VAR 0 45
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: NEG
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: LD_INT 2
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 2
42216: NEG
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: NEG
42229: PUSH
42230: LD_INT 3
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 3
42244: NEG
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: LD_INT 3
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 3
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 3
42284: PUSH
42285: LD_INT 3
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 3
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 3
42335: NEG
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 3
42347: NEG
42348: PUSH
42349: LD_INT 3
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42388: LD_ADDR_VAR 0 46
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 2
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 3
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 3
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 3
42684: NEG
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 3
42695: NEG
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42736: LD_ADDR_VAR 0 47
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42887: LD_ADDR_VAR 0 48
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: NEG
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 2
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43034: LD_ADDR_VAR 0 49
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43178: LD_ADDR_VAR 0 50
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43322: LD_ADDR_VAR 0 51
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 2
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43469: LD_ADDR_VAR 0 52
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: NEG
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43620: LD_ADDR_VAR 0 53
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: NEG
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43850: LD_ADDR_VAR 0 54
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 2
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: LD_INT 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44080: LD_ADDR_VAR 0 55
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: LD_INT 2
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44310: LD_ADDR_VAR 0 56
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: NEG
44392: PUSH
44393: LD_INT 2
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44540: LD_ADDR_VAR 0 57
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 2
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44770: LD_ADDR_VAR 0 58
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45000: LD_ADDR_VAR 0 59
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45088: LD_ADDR_VAR 0 60
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45176: LD_ADDR_VAR 0 61
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45264: LD_ADDR_VAR 0 62
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45352: LD_ADDR_VAR 0 63
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45440: LD_ADDR_VAR 0 64
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// end ; 1 :
45528: GO 51425
45530: LD_INT 1
45532: DOUBLE
45533: EQUAL
45534: IFTRUE 45538
45536: GO 48161
45538: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45539: LD_ADDR_VAR 0 11
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 3
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 3
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: LIST
45582: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45583: LD_ADDR_VAR 0 12
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 3
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 3
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45624: LD_ADDR_VAR 0 13
45628: PUSH
45629: LD_INT 3
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 3
45641: PUSH
45642: LD_INT 3
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 3
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45664: LD_ADDR_VAR 0 14
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 3
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 3
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45705: LD_ADDR_VAR 0 15
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: LIST
45748: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45749: LD_ADDR_VAR 0 16
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: LD_INT 3
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 3
45768: NEG
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: LD_INT 3
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45795: LD_ADDR_VAR 0 17
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: LD_INT 3
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 2
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45839: LD_ADDR_VAR 0 18
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 3
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 3
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45880: LD_ADDR_VAR 0 19
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 3
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45920: LD_ADDR_VAR 0 20
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 3
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45961: LD_ADDR_VAR 0 21
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 3
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 3
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46005: LD_ADDR_VAR 0 22
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 3
46036: NEG
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46051: LD_ADDR_VAR 0 23
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 3
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 4
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 3
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: LIST
46094: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46095: LD_ADDR_VAR 0 24
46099: PUSH
46100: LD_INT 3
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 4
46123: PUSH
46124: LD_INT 1
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: LIST
46135: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46136: LD_ADDR_VAR 0 25
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: LD_INT 3
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 4
46153: PUSH
46154: LD_INT 3
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 3
46163: PUSH
46164: LD_INT 4
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46176: LD_ADDR_VAR 0 26
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 3
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 4
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: LIST
46216: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46217: LD_ADDR_VAR 0 27
46221: PUSH
46222: LD_INT 3
46224: NEG
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 3
46235: NEG
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 4
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: LIST
46260: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46261: LD_ADDR_VAR 0 28
46265: PUSH
46266: LD_INT 3
46268: NEG
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 3
46280: NEG
46281: PUSH
46282: LD_INT 4
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 4
46292: NEG
46293: PUSH
46294: LD_INT 3
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46307: LD_ADDR_VAR 0 29
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 3
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 2
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 4
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 4
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 3
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 5
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_INT 5
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 4
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 6
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: LD_INT 6
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 5
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46462: LD_ADDR_VAR 0 30
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 3
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 4
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 4
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 4
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 5
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 5
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 5
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 6
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 6
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46605: LD_ADDR_VAR 0 31
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: PUSH
46623: LD_INT 3
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 4
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 4
46652: PUSH
46653: LD_INT 4
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: LD_INT 4
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 5
46672: PUSH
46673: LD_INT 4
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 5
46682: PUSH
46683: LD_INT 5
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 4
46692: PUSH
46693: LD_INT 5
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 6
46702: PUSH
46703: LD_INT 5
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 6
46712: PUSH
46713: LD_INT 6
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 5
46722: PUSH
46723: LD_INT 6
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46744: LD_ADDR_VAR 0 32
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: LD_INT 3
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 4
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 4
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: LD_INT 3
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 5
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 5
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 4
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 6
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 6
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: LD_INT 5
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46887: LD_ADDR_VAR 0 33
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 3
46905: NEG
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: NEG
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 4
46939: NEG
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 4
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 4
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 5
46973: NEG
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 5
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 5
46996: NEG
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 6
47007: NEG
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 6
47018: NEG
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47042: LD_ADDR_VAR 0 34
47046: PUSH
47047: LD_INT 2
47049: NEG
47050: PUSH
47051: LD_INT 3
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 3
47061: NEG
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: NEG
47074: PUSH
47075: LD_INT 3
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 3
47085: NEG
47086: PUSH
47087: LD_INT 4
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 4
47097: NEG
47098: PUSH
47099: LD_INT 3
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 4
47109: NEG
47110: PUSH
47111: LD_INT 4
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 4
47121: NEG
47122: PUSH
47123: LD_INT 5
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 5
47133: NEG
47134: PUSH
47135: LD_INT 4
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 5
47145: NEG
47146: PUSH
47147: LD_INT 5
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 5
47157: NEG
47158: PUSH
47159: LD_INT 6
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 6
47169: NEG
47170: PUSH
47171: LD_INT 5
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 6
47181: NEG
47182: PUSH
47183: LD_INT 6
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47205: LD_ADDR_VAR 0 41
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 3
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: LIST
47248: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47249: LD_ADDR_VAR 0 42
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: LIST
47289: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47290: LD_ADDR_VAR 0 43
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: LD_INT 3
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47330: LD_ADDR_VAR 0 44
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 2
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47371: LD_ADDR_VAR 0 45
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: NEG
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: LIST
47414: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47415: LD_ADDR_VAR 0 46
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: LD_INT 2
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47461: LD_ADDR_VAR 0 47
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47494: LD_ADDR_VAR 0 48
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47525: LD_ADDR_VAR 0 49
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47554: LD_ADDR_VAR 0 50
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47583: LD_ADDR_VAR 0 51
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47614: LD_ADDR_VAR 0 52
47618: PUSH
47619: LD_INT 3
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: NEG
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47647: LD_ADDR_VAR 0 53
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 3
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 3
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47691: LD_ADDR_VAR 0 54
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47732: LD_ADDR_VAR 0 55
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 2
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47772: LD_ADDR_VAR 0 56
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: LIST
47812: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47813: LD_ADDR_VAR 0 57
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47857: LD_ADDR_VAR 0 58
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: LD_INT 3
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: NEG
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: NEG
47889: PUSH
47890: LD_INT 3
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47903: LD_ADDR_VAR 0 59
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47947: LD_ADDR_VAR 0 60
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 2
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: LIST
47987: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47988: LD_ADDR_VAR 0 61
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48028: LD_ADDR_VAR 0 62
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48069: LD_ADDR_VAR 0 63
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48113: LD_ADDR_VAR 0 64
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: NEG
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: LD_INT 2
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: ST_TO_ADDR
// end ; 2 :
48159: GO 51425
48161: LD_INT 2
48163: DOUBLE
48164: EQUAL
48165: IFTRUE 48169
48167: GO 51424
48169: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48170: LD_ADDR_VAR 0 29
48174: PUSH
48175: LD_INT 4
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 4
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 5
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 5
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 4
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 5
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 3
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 4
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 4
48300: PUSH
48301: LD_INT 4
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: LD_INT 4
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 3
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 4
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 4
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 4
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 3
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: LD_INT 4
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 5
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 5
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 4
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 5
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: NEG
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 3
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 3
48498: NEG
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 4
48509: NEG
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 4
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 4
48532: NEG
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 4
48555: NEG
48556: PUSH
48557: LD_INT 4
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 4
48567: NEG
48568: PUSH
48569: LD_INT 5
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: LD_INT 4
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 3
48591: NEG
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 4
48603: NEG
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 5
48615: NEG
48616: PUSH
48617: LD_INT 4
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 5
48627: NEG
48628: PUSH
48629: LD_INT 5
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: LD_INT 5
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 5
48651: NEG
48652: PUSH
48653: LD_INT 3
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48708: LD_ADDR_VAR 0 30
48712: PUSH
48713: LD_INT 4
48715: PUSH
48716: LD_INT 4
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 4
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 5
48735: PUSH
48736: LD_INT 4
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 5
48745: PUSH
48746: LD_INT 5
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 4
48755: PUSH
48756: LD_INT 5
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: PUSH
48766: LD_INT 4
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: LD_INT 3
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 5
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 3
48795: PUSH
48796: LD_INT 5
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 3
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 4
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 4
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: LD_INT 4
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 4
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 4
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 4
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 5
48954: NEG
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 5
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 5
48977: NEG
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 3
48989: NEG
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 3
49000: NEG
49001: PUSH
49002: LD_INT 3
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 3
49012: NEG
49013: PUSH
49014: LD_INT 4
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 3
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: NEG
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 4
49060: NEG
49061: PUSH
49062: LD_INT 3
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 4
49072: NEG
49073: PUSH
49074: LD_INT 4
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: LD_INT 4
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 4
49096: NEG
49097: PUSH
49098: LD_INT 2
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 4
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 5
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 4
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 3
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 4
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: LD_INT 5
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 3
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: NEG
49199: PUSH
49200: LD_INT 5
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49255: LD_ADDR_VAR 0 31
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 4
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 3
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: LD_INT 4
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 5
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 5
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 4
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 5
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: LD_INT 3
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 3
49355: NEG
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 3
49400: NEG
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 4
49411: NEG
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 4
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 4
49434: NEG
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 4
49457: NEG
49458: PUSH
49459: LD_INT 4
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 4
49469: NEG
49470: PUSH
49471: LD_INT 5
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: LD_INT 4
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: LD_INT 3
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 4
49505: NEG
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 5
49517: NEG
49518: PUSH
49519: LD_INT 4
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 5
49529: NEG
49530: PUSH
49531: LD_INT 5
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 3
49541: NEG
49542: PUSH
49543: LD_INT 5
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 5
49553: NEG
49554: PUSH
49555: LD_INT 3
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 4
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 3
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: LD_INT 4
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 4
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 4
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 4
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 5
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 5
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 4
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 3
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 5
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49805: LD_ADDR_VAR 0 32
49809: PUSH
49810: LD_INT 4
49812: NEG
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 4
49823: NEG
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: NEG
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 3
49846: NEG
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 4
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 5
49868: NEG
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 5
49879: NEG
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 5
49891: NEG
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: NEG
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 3
49914: NEG
49915: PUSH
49916: LD_INT 3
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 3
49926: NEG
49927: PUSH
49928: LD_INT 4
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: LD_INT 3
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: NEG
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: NEG
49975: PUSH
49976: LD_INT 3
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 4
49986: NEG
49987: PUSH
49988: LD_INT 4
49990: NEG
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 4
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 4
50010: NEG
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 4
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 5
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 4
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 3
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 4
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 5
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: LD_INT 5
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 4
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 4
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 4
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 4
50217: PUSH
50218: LD_INT 4
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 4
50227: PUSH
50228: LD_INT 3
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 5
50237: PUSH
50238: LD_INT 4
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 5
50247: PUSH
50248: LD_INT 5
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 4
50257: PUSH
50258: LD_INT 5
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: PUSH
50268: LD_INT 4
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 5
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 5
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50352: LD_ADDR_VAR 0 33
50356: PUSH
50357: LD_INT 4
50359: NEG
50360: PUSH
50361: LD_INT 4
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 4
50371: NEG
50372: PUSH
50373: LD_INT 5
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 3
50383: NEG
50384: PUSH
50385: LD_INT 4
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 3
50395: NEG
50396: PUSH
50397: LD_INT 3
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 4
50407: NEG
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 5
50419: NEG
50420: PUSH
50421: LD_INT 4
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 5
50431: NEG
50432: PUSH
50433: LD_INT 5
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 3
50443: NEG
50444: PUSH
50445: LD_INT 5
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 5
50455: NEG
50456: PUSH
50457: LD_INT 3
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 4
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 4
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 4
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 4
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 4
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 5
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 5
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 4
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 3
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 3
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 5
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 4
50682: PUSH
50683: LD_INT 3
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 4
50692: PUSH
50693: LD_INT 4
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: LD_INT 4
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: LD_INT 3
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 4
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 4
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 4
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 3
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 4
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 5
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 0
50792: PUSH
50793: LD_INT 5
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: LD_INT 4
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: LD_INT 3
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: LD_INT 5
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: LD_INT 3
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50890: LD_ADDR_VAR 0 34
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 4
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 5
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 4
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: LD_INT 4
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: LD_INT 5
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: PUSH
50977: LD_INT 3
50979: NEG
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 5
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: LD_INT 1
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 4
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 4
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 4
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 4
51092: PUSH
51093: LD_INT 4
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 4
51102: PUSH
51103: LD_INT 3
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 5
51112: PUSH
51113: LD_INT 4
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 5
51122: PUSH
51123: LD_INT 5
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 4
51132: PUSH
51133: LD_INT 5
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 3
51142: PUSH
51143: LD_INT 4
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 5
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: LD_INT 5
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 3
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 4
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 4
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: LD_INT 4
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 4
51275: NEG
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 4
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: NEG
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 4
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 5
51331: NEG
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 5
51342: NEG
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 5
51354: NEG
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: ST_TO_ADDR
// end ; end ;
51422: GO 51425
51424: POP
// case btype of b_depot , b_warehouse :
51425: LD_VAR 0 1
51429: PUSH
51430: LD_INT 0
51432: DOUBLE
51433: EQUAL
51434: IFTRUE 51444
51436: LD_INT 1
51438: DOUBLE
51439: EQUAL
51440: IFTRUE 51444
51442: GO 51645
51444: POP
// case nation of nation_american :
51445: LD_VAR 0 5
51449: PUSH
51450: LD_INT 1
51452: DOUBLE
51453: EQUAL
51454: IFTRUE 51458
51456: GO 51514
51458: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51459: LD_ADDR_VAR 0 9
51463: PUSH
51464: LD_VAR 0 11
51468: PUSH
51469: LD_VAR 0 12
51473: PUSH
51474: LD_VAR 0 13
51478: PUSH
51479: LD_VAR 0 14
51483: PUSH
51484: LD_VAR 0 15
51488: PUSH
51489: LD_VAR 0 16
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: PUSH
51502: LD_VAR 0 4
51506: PUSH
51507: LD_INT 1
51509: PLUS
51510: ARRAY
51511: ST_TO_ADDR
51512: GO 51643
51514: LD_INT 2
51516: DOUBLE
51517: EQUAL
51518: IFTRUE 51522
51520: GO 51578
51522: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51523: LD_ADDR_VAR 0 9
51527: PUSH
51528: LD_VAR 0 17
51532: PUSH
51533: LD_VAR 0 18
51537: PUSH
51538: LD_VAR 0 19
51542: PUSH
51543: LD_VAR 0 20
51547: PUSH
51548: LD_VAR 0 21
51552: PUSH
51553: LD_VAR 0 22
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: PUSH
51566: LD_VAR 0 4
51570: PUSH
51571: LD_INT 1
51573: PLUS
51574: ARRAY
51575: ST_TO_ADDR
51576: GO 51643
51578: LD_INT 3
51580: DOUBLE
51581: EQUAL
51582: IFTRUE 51586
51584: GO 51642
51586: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51587: LD_ADDR_VAR 0 9
51591: PUSH
51592: LD_VAR 0 23
51596: PUSH
51597: LD_VAR 0 24
51601: PUSH
51602: LD_VAR 0 25
51606: PUSH
51607: LD_VAR 0 26
51611: PUSH
51612: LD_VAR 0 27
51616: PUSH
51617: LD_VAR 0 28
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: PUSH
51630: LD_VAR 0 4
51634: PUSH
51635: LD_INT 1
51637: PLUS
51638: ARRAY
51639: ST_TO_ADDR
51640: GO 51643
51642: POP
51643: GO 52198
51645: LD_INT 2
51647: DOUBLE
51648: EQUAL
51649: IFTRUE 51659
51651: LD_INT 3
51653: DOUBLE
51654: EQUAL
51655: IFTRUE 51659
51657: GO 51715
51659: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51660: LD_ADDR_VAR 0 9
51664: PUSH
51665: LD_VAR 0 29
51669: PUSH
51670: LD_VAR 0 30
51674: PUSH
51675: LD_VAR 0 31
51679: PUSH
51680: LD_VAR 0 32
51684: PUSH
51685: LD_VAR 0 33
51689: PUSH
51690: LD_VAR 0 34
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: PUSH
51703: LD_VAR 0 4
51707: PUSH
51708: LD_INT 1
51710: PLUS
51711: ARRAY
51712: ST_TO_ADDR
51713: GO 52198
51715: LD_INT 16
51717: DOUBLE
51718: EQUAL
51719: IFTRUE 51777
51721: LD_INT 17
51723: DOUBLE
51724: EQUAL
51725: IFTRUE 51777
51727: LD_INT 18
51729: DOUBLE
51730: EQUAL
51731: IFTRUE 51777
51733: LD_INT 19
51735: DOUBLE
51736: EQUAL
51737: IFTRUE 51777
51739: LD_INT 22
51741: DOUBLE
51742: EQUAL
51743: IFTRUE 51777
51745: LD_INT 20
51747: DOUBLE
51748: EQUAL
51749: IFTRUE 51777
51751: LD_INT 21
51753: DOUBLE
51754: EQUAL
51755: IFTRUE 51777
51757: LD_INT 23
51759: DOUBLE
51760: EQUAL
51761: IFTRUE 51777
51763: LD_INT 24
51765: DOUBLE
51766: EQUAL
51767: IFTRUE 51777
51769: LD_INT 25
51771: DOUBLE
51772: EQUAL
51773: IFTRUE 51777
51775: GO 51833
51777: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51778: LD_ADDR_VAR 0 9
51782: PUSH
51783: LD_VAR 0 35
51787: PUSH
51788: LD_VAR 0 36
51792: PUSH
51793: LD_VAR 0 37
51797: PUSH
51798: LD_VAR 0 38
51802: PUSH
51803: LD_VAR 0 39
51807: PUSH
51808: LD_VAR 0 40
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: PUSH
51821: LD_VAR 0 4
51825: PUSH
51826: LD_INT 1
51828: PLUS
51829: ARRAY
51830: ST_TO_ADDR
51831: GO 52198
51833: LD_INT 6
51835: DOUBLE
51836: EQUAL
51837: IFTRUE 51889
51839: LD_INT 7
51841: DOUBLE
51842: EQUAL
51843: IFTRUE 51889
51845: LD_INT 8
51847: DOUBLE
51848: EQUAL
51849: IFTRUE 51889
51851: LD_INT 13
51853: DOUBLE
51854: EQUAL
51855: IFTRUE 51889
51857: LD_INT 12
51859: DOUBLE
51860: EQUAL
51861: IFTRUE 51889
51863: LD_INT 15
51865: DOUBLE
51866: EQUAL
51867: IFTRUE 51889
51869: LD_INT 11
51871: DOUBLE
51872: EQUAL
51873: IFTRUE 51889
51875: LD_INT 14
51877: DOUBLE
51878: EQUAL
51879: IFTRUE 51889
51881: LD_INT 10
51883: DOUBLE
51884: EQUAL
51885: IFTRUE 51889
51887: GO 51945
51889: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51890: LD_ADDR_VAR 0 9
51894: PUSH
51895: LD_VAR 0 41
51899: PUSH
51900: LD_VAR 0 42
51904: PUSH
51905: LD_VAR 0 43
51909: PUSH
51910: LD_VAR 0 44
51914: PUSH
51915: LD_VAR 0 45
51919: PUSH
51920: LD_VAR 0 46
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: PUSH
51933: LD_VAR 0 4
51937: PUSH
51938: LD_INT 1
51940: PLUS
51941: ARRAY
51942: ST_TO_ADDR
51943: GO 52198
51945: LD_INT 36
51947: DOUBLE
51948: EQUAL
51949: IFTRUE 51953
51951: GO 52009
51953: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51954: LD_ADDR_VAR 0 9
51958: PUSH
51959: LD_VAR 0 47
51963: PUSH
51964: LD_VAR 0 48
51968: PUSH
51969: LD_VAR 0 49
51973: PUSH
51974: LD_VAR 0 50
51978: PUSH
51979: LD_VAR 0 51
51983: PUSH
51984: LD_VAR 0 52
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: PUSH
51997: LD_VAR 0 4
52001: PUSH
52002: LD_INT 1
52004: PLUS
52005: ARRAY
52006: ST_TO_ADDR
52007: GO 52198
52009: LD_INT 4
52011: DOUBLE
52012: EQUAL
52013: IFTRUE 52035
52015: LD_INT 5
52017: DOUBLE
52018: EQUAL
52019: IFTRUE 52035
52021: LD_INT 34
52023: DOUBLE
52024: EQUAL
52025: IFTRUE 52035
52027: LD_INT 37
52029: DOUBLE
52030: EQUAL
52031: IFTRUE 52035
52033: GO 52091
52035: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52036: LD_ADDR_VAR 0 9
52040: PUSH
52041: LD_VAR 0 53
52045: PUSH
52046: LD_VAR 0 54
52050: PUSH
52051: LD_VAR 0 55
52055: PUSH
52056: LD_VAR 0 56
52060: PUSH
52061: LD_VAR 0 57
52065: PUSH
52066: LD_VAR 0 58
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: PUSH
52079: LD_VAR 0 4
52083: PUSH
52084: LD_INT 1
52086: PLUS
52087: ARRAY
52088: ST_TO_ADDR
52089: GO 52198
52091: LD_INT 31
52093: DOUBLE
52094: EQUAL
52095: IFTRUE 52141
52097: LD_INT 32
52099: DOUBLE
52100: EQUAL
52101: IFTRUE 52141
52103: LD_INT 33
52105: DOUBLE
52106: EQUAL
52107: IFTRUE 52141
52109: LD_INT 27
52111: DOUBLE
52112: EQUAL
52113: IFTRUE 52141
52115: LD_INT 26
52117: DOUBLE
52118: EQUAL
52119: IFTRUE 52141
52121: LD_INT 28
52123: DOUBLE
52124: EQUAL
52125: IFTRUE 52141
52127: LD_INT 29
52129: DOUBLE
52130: EQUAL
52131: IFTRUE 52141
52133: LD_INT 30
52135: DOUBLE
52136: EQUAL
52137: IFTRUE 52141
52139: GO 52197
52141: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52142: LD_ADDR_VAR 0 9
52146: PUSH
52147: LD_VAR 0 59
52151: PUSH
52152: LD_VAR 0 60
52156: PUSH
52157: LD_VAR 0 61
52161: PUSH
52162: LD_VAR 0 62
52166: PUSH
52167: LD_VAR 0 63
52171: PUSH
52172: LD_VAR 0 64
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: PUSH
52185: LD_VAR 0 4
52189: PUSH
52190: LD_INT 1
52192: PLUS
52193: ARRAY
52194: ST_TO_ADDR
52195: GO 52198
52197: POP
// temp_list2 = [ ] ;
52198: LD_ADDR_VAR 0 10
52202: PUSH
52203: EMPTY
52204: ST_TO_ADDR
// for i in temp_list do
52205: LD_ADDR_VAR 0 8
52209: PUSH
52210: LD_VAR 0 9
52214: PUSH
52215: FOR_IN
52216: IFFALSE 52268
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52218: LD_ADDR_VAR 0 10
52222: PUSH
52223: LD_VAR 0 10
52227: PUSH
52228: LD_VAR 0 8
52232: PUSH
52233: LD_INT 1
52235: ARRAY
52236: PUSH
52237: LD_VAR 0 2
52241: PLUS
52242: PUSH
52243: LD_VAR 0 8
52247: PUSH
52248: LD_INT 2
52250: ARRAY
52251: PUSH
52252: LD_VAR 0 3
52256: PLUS
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: EMPTY
52263: LIST
52264: ADD
52265: ST_TO_ADDR
52266: GO 52215
52268: POP
52269: POP
// result = temp_list2 ;
52270: LD_ADDR_VAR 0 7
52274: PUSH
52275: LD_VAR 0 10
52279: ST_TO_ADDR
// end ;
52280: LD_VAR 0 7
52284: RET
// export function EnemyInRange ( unit , dist ) ; begin
52285: LD_INT 0
52287: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52288: LD_ADDR_VAR 0 3
52292: PUSH
52293: LD_VAR 0 1
52297: PPUSH
52298: CALL_OW 255
52302: PPUSH
52303: LD_VAR 0 1
52307: PPUSH
52308: CALL_OW 250
52312: PPUSH
52313: LD_VAR 0 1
52317: PPUSH
52318: CALL_OW 251
52322: PPUSH
52323: LD_VAR 0 2
52327: PPUSH
52328: CALL 25542 0 4
52332: PUSH
52333: LD_INT 4
52335: ARRAY
52336: ST_TO_ADDR
// end ;
52337: LD_VAR 0 3
52341: RET
// export function PlayerSeeMe ( unit ) ; begin
52342: LD_INT 0
52344: PPUSH
// result := See ( your_side , unit ) ;
52345: LD_ADDR_VAR 0 2
52349: PUSH
52350: LD_OWVAR 2
52354: PPUSH
52355: LD_VAR 0 1
52359: PPUSH
52360: CALL_OW 292
52364: ST_TO_ADDR
// end ;
52365: LD_VAR 0 2
52369: RET
// export function ReverseDir ( unit ) ; begin
52370: LD_INT 0
52372: PPUSH
// if not unit then
52373: LD_VAR 0 1
52377: NOT
52378: IFFALSE 52382
// exit ;
52380: GO 52405
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52382: LD_ADDR_VAR 0 2
52386: PUSH
52387: LD_VAR 0 1
52391: PPUSH
52392: CALL_OW 254
52396: PUSH
52397: LD_INT 3
52399: PLUS
52400: PUSH
52401: LD_INT 6
52403: MOD
52404: ST_TO_ADDR
// end ;
52405: LD_VAR 0 2
52409: RET
// export function ReverseArray ( array ) ; var i ; begin
52410: LD_INT 0
52412: PPUSH
52413: PPUSH
// if not array then
52414: LD_VAR 0 1
52418: NOT
52419: IFFALSE 52423
// exit ;
52421: GO 52478
// result := [ ] ;
52423: LD_ADDR_VAR 0 2
52427: PUSH
52428: EMPTY
52429: ST_TO_ADDR
// for i := array downto 1 do
52430: LD_ADDR_VAR 0 3
52434: PUSH
52435: DOUBLE
52436: LD_VAR 0 1
52440: INC
52441: ST_TO_ADDR
52442: LD_INT 1
52444: PUSH
52445: FOR_DOWNTO
52446: IFFALSE 52476
// result := Join ( result , array [ i ] ) ;
52448: LD_ADDR_VAR 0 2
52452: PUSH
52453: LD_VAR 0 2
52457: PPUSH
52458: LD_VAR 0 1
52462: PUSH
52463: LD_VAR 0 3
52467: ARRAY
52468: PPUSH
52469: CALL 57320 0 2
52473: ST_TO_ADDR
52474: GO 52445
52476: POP
52477: POP
// end ;
52478: LD_VAR 0 2
52482: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
52483: LD_INT 0
52485: PPUSH
52486: PPUSH
52487: PPUSH
52488: PPUSH
52489: PPUSH
52490: PPUSH
// if not unit or not hexes then
52491: LD_VAR 0 1
52495: NOT
52496: IFTRUE 52505
52498: PUSH
52499: LD_VAR 0 2
52503: NOT
52504: OR
52505: IFFALSE 52509
// exit ;
52507: GO 52632
// dist := 9999 ;
52509: LD_ADDR_VAR 0 5
52513: PUSH
52514: LD_INT 9999
52516: ST_TO_ADDR
// for i = 1 to hexes do
52517: LD_ADDR_VAR 0 4
52521: PUSH
52522: DOUBLE
52523: LD_INT 1
52525: DEC
52526: ST_TO_ADDR
52527: LD_VAR 0 2
52531: PUSH
52532: FOR_TO
52533: IFFALSE 52620
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52535: LD_ADDR_VAR 0 6
52539: PUSH
52540: LD_VAR 0 1
52544: PPUSH
52545: LD_VAR 0 2
52549: PUSH
52550: LD_VAR 0 4
52554: ARRAY
52555: PUSH
52556: LD_INT 1
52558: ARRAY
52559: PPUSH
52560: LD_VAR 0 2
52564: PUSH
52565: LD_VAR 0 4
52569: ARRAY
52570: PUSH
52571: LD_INT 2
52573: ARRAY
52574: PPUSH
52575: CALL_OW 297
52579: ST_TO_ADDR
// if tdist < dist then
52580: LD_VAR 0 6
52584: PUSH
52585: LD_VAR 0 5
52589: LESS
52590: IFFALSE 52618
// begin hex := hexes [ i ] ;
52592: LD_ADDR_VAR 0 8
52596: PUSH
52597: LD_VAR 0 2
52601: PUSH
52602: LD_VAR 0 4
52606: ARRAY
52607: ST_TO_ADDR
// dist := tdist ;
52608: LD_ADDR_VAR 0 5
52612: PUSH
52613: LD_VAR 0 6
52617: ST_TO_ADDR
// end ; end ;
52618: GO 52532
52620: POP
52621: POP
// result := hex ;
52622: LD_ADDR_VAR 0 3
52626: PUSH
52627: LD_VAR 0 8
52631: ST_TO_ADDR
// end ;
52632: LD_VAR 0 3
52636: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52637: LD_INT 0
52639: PPUSH
52640: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52641: LD_VAR 0 1
52645: NOT
52646: IFTRUE 52685
52648: PUSH
52649: LD_VAR 0 1
52653: PUSH
52654: LD_INT 21
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 23
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PPUSH
52678: CALL_OW 69
52682: IN
52683: NOT
52684: OR
52685: IFFALSE 52689
// exit ;
52687: GO 52736
// for i = 1 to 3 do
52689: LD_ADDR_VAR 0 3
52693: PUSH
52694: DOUBLE
52695: LD_INT 1
52697: DEC
52698: ST_TO_ADDR
52699: LD_INT 3
52701: PUSH
52702: FOR_TO
52703: IFFALSE 52734
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52705: LD_VAR 0 1
52709: PPUSH
52710: CALL_OW 250
52714: PPUSH
52715: LD_VAR 0 1
52719: PPUSH
52720: CALL_OW 251
52724: PPUSH
52725: LD_INT 1
52727: PPUSH
52728: CALL_OW 453
52732: GO 52702
52734: POP
52735: POP
// end ;
52736: LD_VAR 0 2
52740: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52741: LD_INT 0
52743: PPUSH
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
// if not unit or not enemy_unit then
52749: LD_VAR 0 1
52753: NOT
52754: IFTRUE 52763
52756: PUSH
52757: LD_VAR 0 2
52761: NOT
52762: OR
52763: IFFALSE 52767
// exit ;
52765: GO 53238
// if GetLives ( i ) < 250 then
52767: LD_VAR 0 4
52771: PPUSH
52772: CALL_OW 256
52776: PUSH
52777: LD_INT 250
52779: LESS
52780: IFFALSE 52793
// begin ComAutodestruct ( i ) ;
52782: LD_VAR 0 4
52786: PPUSH
52787: CALL 52637 0 1
// exit ;
52791: GO 53238
// end ; x := GetX ( enemy_unit ) ;
52793: LD_ADDR_VAR 0 7
52797: PUSH
52798: LD_VAR 0 2
52802: PPUSH
52803: CALL_OW 250
52807: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52808: LD_ADDR_VAR 0 8
52812: PUSH
52813: LD_VAR 0 2
52817: PPUSH
52818: CALL_OW 251
52822: ST_TO_ADDR
// if not x or not y then
52823: LD_VAR 0 7
52827: NOT
52828: IFTRUE 52837
52830: PUSH
52831: LD_VAR 0 8
52835: NOT
52836: OR
52837: IFFALSE 52841
// exit ;
52839: GO 53238
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52841: LD_ADDR_VAR 0 6
52845: PUSH
52846: LD_VAR 0 7
52850: PPUSH
52851: LD_INT 0
52853: PPUSH
52854: LD_INT 4
52856: PPUSH
52857: CALL_OW 272
52861: PUSH
52862: LD_VAR 0 8
52866: PPUSH
52867: LD_INT 0
52869: PPUSH
52870: LD_INT 4
52872: PPUSH
52873: CALL_OW 273
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_VAR 0 7
52886: PPUSH
52887: LD_INT 1
52889: PPUSH
52890: LD_INT 4
52892: PPUSH
52893: CALL_OW 272
52897: PUSH
52898: LD_VAR 0 8
52902: PPUSH
52903: LD_INT 1
52905: PPUSH
52906: LD_INT 4
52908: PPUSH
52909: CALL_OW 273
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_VAR 0 7
52922: PPUSH
52923: LD_INT 2
52925: PPUSH
52926: LD_INT 4
52928: PPUSH
52929: CALL_OW 272
52933: PUSH
52934: LD_VAR 0 8
52938: PPUSH
52939: LD_INT 2
52941: PPUSH
52942: LD_INT 4
52944: PPUSH
52945: CALL_OW 273
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_VAR 0 7
52958: PPUSH
52959: LD_INT 3
52961: PPUSH
52962: LD_INT 4
52964: PPUSH
52965: CALL_OW 272
52969: PUSH
52970: LD_VAR 0 8
52974: PPUSH
52975: LD_INT 3
52977: PPUSH
52978: LD_INT 4
52980: PPUSH
52981: CALL_OW 273
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_VAR 0 7
52994: PPUSH
52995: LD_INT 4
52997: PPUSH
52998: LD_INT 4
53000: PPUSH
53001: CALL_OW 272
53005: PUSH
53006: LD_VAR 0 8
53010: PPUSH
53011: LD_INT 4
53013: PPUSH
53014: LD_INT 4
53016: PPUSH
53017: CALL_OW 273
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_VAR 0 7
53030: PPUSH
53031: LD_INT 5
53033: PPUSH
53034: LD_INT 4
53036: PPUSH
53037: CALL_OW 272
53041: PUSH
53042: LD_VAR 0 8
53046: PPUSH
53047: LD_INT 5
53049: PPUSH
53050: LD_INT 4
53052: PPUSH
53053: CALL_OW 273
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: ST_TO_ADDR
// for i = tmp downto 1 do
53070: LD_ADDR_VAR 0 4
53074: PUSH
53075: DOUBLE
53076: LD_VAR 0 6
53080: INC
53081: ST_TO_ADDR
53082: LD_INT 1
53084: PUSH
53085: FOR_DOWNTO
53086: IFFALSE 53189
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53088: LD_VAR 0 6
53092: PUSH
53093: LD_VAR 0 4
53097: ARRAY
53098: PUSH
53099: LD_INT 1
53101: ARRAY
53102: PPUSH
53103: LD_VAR 0 6
53107: PUSH
53108: LD_VAR 0 4
53112: ARRAY
53113: PUSH
53114: LD_INT 2
53116: ARRAY
53117: PPUSH
53118: CALL_OW 488
53122: NOT
53123: IFTRUE 53165
53125: PUSH
53126: LD_VAR 0 6
53130: PUSH
53131: LD_VAR 0 4
53135: ARRAY
53136: PUSH
53137: LD_INT 1
53139: ARRAY
53140: PPUSH
53141: LD_VAR 0 6
53145: PUSH
53146: LD_VAR 0 4
53150: ARRAY
53151: PUSH
53152: LD_INT 2
53154: ARRAY
53155: PPUSH
53156: CALL_OW 428
53160: PUSH
53161: LD_INT 0
53163: NONEQUAL
53164: OR
53165: IFFALSE 53187
// tmp := Delete ( tmp , i ) ;
53167: LD_ADDR_VAR 0 6
53171: PUSH
53172: LD_VAR 0 6
53176: PPUSH
53177: LD_VAR 0 4
53181: PPUSH
53182: CALL_OW 3
53186: ST_TO_ADDR
53187: GO 53085
53189: POP
53190: POP
// j := GetClosestHex ( unit , tmp ) ;
53191: LD_ADDR_VAR 0 5
53195: PUSH
53196: LD_VAR 0 1
53200: PPUSH
53201: LD_VAR 0 6
53205: PPUSH
53206: CALL 52483 0 2
53210: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53211: LD_VAR 0 1
53215: PPUSH
53216: LD_VAR 0 5
53220: PUSH
53221: LD_INT 1
53223: ARRAY
53224: PPUSH
53225: LD_VAR 0 5
53229: PUSH
53230: LD_INT 2
53232: ARRAY
53233: PPUSH
53234: CALL_OW 111
// end ;
53238: LD_VAR 0 3
53242: RET
// export function PrepareApemanSoldier ( ) ; begin
53243: LD_INT 0
53245: PPUSH
// uc_nation := 0 ;
53246: LD_ADDR_OWVAR 21
53250: PUSH
53251: LD_INT 0
53253: ST_TO_ADDR
// hc_sex := sex_male ;
53254: LD_ADDR_OWVAR 27
53258: PUSH
53259: LD_INT 1
53261: ST_TO_ADDR
// hc_name :=  ;
53262: LD_ADDR_OWVAR 26
53266: PUSH
53267: LD_STRING 
53269: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
53270: LD_ADDR_OWVAR 28
53274: PUSH
53275: LD_INT 15
53277: ST_TO_ADDR
// hc_gallery :=  ;
53278: LD_ADDR_OWVAR 33
53282: PUSH
53283: LD_STRING 
53285: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53286: LD_ADDR_OWVAR 31
53290: PUSH
53291: LD_INT 0
53293: PPUSH
53294: LD_INT 3
53296: PPUSH
53297: CALL_OW 12
53301: PUSH
53302: LD_INT 0
53304: PPUSH
53305: LD_INT 3
53307: PPUSH
53308: CALL_OW 12
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53325: LD_ADDR_OWVAR 29
53329: PUSH
53330: LD_INT 12
53332: PUSH
53333: LD_INT 12
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: ST_TO_ADDR
// end ;
53340: LD_VAR 0 1
53344: RET
// export function PrepareApemanEngineer ( ) ; begin
53345: LD_INT 0
53347: PPUSH
// uc_nation := 0 ;
53348: LD_ADDR_OWVAR 21
53352: PUSH
53353: LD_INT 0
53355: ST_TO_ADDR
// hc_sex := sex_male ;
53356: LD_ADDR_OWVAR 27
53360: PUSH
53361: LD_INT 1
53363: ST_TO_ADDR
// hc_name :=  ;
53364: LD_ADDR_OWVAR 26
53368: PUSH
53369: LD_STRING 
53371: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
53372: LD_ADDR_OWVAR 28
53376: PUSH
53377: LD_INT 16
53379: ST_TO_ADDR
// hc_gallery :=  ;
53380: LD_ADDR_OWVAR 33
53384: PUSH
53385: LD_STRING 
53387: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53388: LD_ADDR_OWVAR 31
53392: PUSH
53393: LD_INT 0
53395: PPUSH
53396: LD_INT 3
53398: PPUSH
53399: CALL_OW 12
53403: PUSH
53404: LD_INT 0
53406: PPUSH
53407: LD_INT 3
53409: PPUSH
53410: CALL_OW 12
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53427: LD_ADDR_OWVAR 29
53431: PUSH
53432: LD_INT 12
53434: PUSH
53435: LD_INT 12
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: ST_TO_ADDR
// end ;
53442: LD_VAR 0 1
53446: RET
// export function PrepareApeman ( agressivity ) ; begin
53447: LD_INT 0
53449: PPUSH
// uc_side := 0 ;
53450: LD_ADDR_OWVAR 20
53454: PUSH
53455: LD_INT 0
53457: ST_TO_ADDR
// uc_nation := 0 ;
53458: LD_ADDR_OWVAR 21
53462: PUSH
53463: LD_INT 0
53465: ST_TO_ADDR
// hc_sex := sex_male ;
53466: LD_ADDR_OWVAR 27
53470: PUSH
53471: LD_INT 1
53473: ST_TO_ADDR
// hc_class := class_apeman ;
53474: LD_ADDR_OWVAR 28
53478: PUSH
53479: LD_INT 12
53481: ST_TO_ADDR
// hc_gallery :=  ;
53482: LD_ADDR_OWVAR 33
53486: PUSH
53487: LD_STRING 
53489: ST_TO_ADDR
// hc_name :=  ;
53490: LD_ADDR_OWVAR 26
53494: PUSH
53495: LD_STRING 
53497: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53498: LD_ADDR_OWVAR 29
53502: PUSH
53503: LD_INT 12
53505: PUSH
53506: LD_INT 12
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: ST_TO_ADDR
// if agressivity = 0 then
53513: LD_VAR 0 1
53517: PUSH
53518: LD_INT 0
53520: EQUAL
53521: IFFALSE 53533
// hc_agressivity := 0 else
53523: LD_ADDR_OWVAR 35
53527: PUSH
53528: LD_INT 0
53530: ST_TO_ADDR
53531: GO 53554
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53533: LD_ADDR_OWVAR 35
53537: PUSH
53538: LD_VAR 0 1
53542: NEG
53543: PPUSH
53544: LD_VAR 0 1
53548: PPUSH
53549: CALL_OW 12
53553: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
53554: LD_ADDR_OWVAR 31
53558: PUSH
53559: LD_INT 0
53561: PPUSH
53562: LD_INT 3
53564: PPUSH
53565: CALL_OW 12
53569: PUSH
53570: LD_INT 0
53572: PPUSH
53573: LD_INT 3
53575: PPUSH
53576: CALL_OW 12
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: ST_TO_ADDR
// end ;
53593: LD_VAR 0 2
53597: RET
// export function PrepareTiger ( agressivity ) ; begin
53598: LD_INT 0
53600: PPUSH
// uc_side := 0 ;
53601: LD_ADDR_OWVAR 20
53605: PUSH
53606: LD_INT 0
53608: ST_TO_ADDR
// uc_nation := 0 ;
53609: LD_ADDR_OWVAR 21
53613: PUSH
53614: LD_INT 0
53616: ST_TO_ADDR
// InitHc ;
53617: CALL_OW 19
// hc_class := class_tiger ;
53621: LD_ADDR_OWVAR 28
53625: PUSH
53626: LD_INT 14
53628: ST_TO_ADDR
// hc_gallery :=  ;
53629: LD_ADDR_OWVAR 33
53633: PUSH
53634: LD_STRING 
53636: ST_TO_ADDR
// hc_name :=  ;
53637: LD_ADDR_OWVAR 26
53641: PUSH
53642: LD_STRING 
53644: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
53645: LD_ADDR_OWVAR 35
53649: PUSH
53650: LD_VAR 0 1
53654: NEG
53655: PPUSH
53656: LD_VAR 0 1
53660: PPUSH
53661: CALL_OW 12
53665: ST_TO_ADDR
// end ;
53666: LD_VAR 0 2
53670: RET
// export function PrepareEnchidna ( ) ; begin
53671: LD_INT 0
53673: PPUSH
// uc_side := 0 ;
53674: LD_ADDR_OWVAR 20
53678: PUSH
53679: LD_INT 0
53681: ST_TO_ADDR
// uc_nation := 0 ;
53682: LD_ADDR_OWVAR 21
53686: PUSH
53687: LD_INT 0
53689: ST_TO_ADDR
// InitHc ;
53690: CALL_OW 19
// hc_class := class_baggie ;
53694: LD_ADDR_OWVAR 28
53698: PUSH
53699: LD_INT 13
53701: ST_TO_ADDR
// hc_gallery :=  ;
53702: LD_ADDR_OWVAR 33
53706: PUSH
53707: LD_STRING 
53709: ST_TO_ADDR
// hc_name :=  ;
53710: LD_ADDR_OWVAR 26
53714: PUSH
53715: LD_STRING 
53717: ST_TO_ADDR
// end ;
53718: LD_VAR 0 1
53722: RET
// export function PrepareFrog ( ) ; begin
53723: LD_INT 0
53725: PPUSH
// uc_side := 0 ;
53726: LD_ADDR_OWVAR 20
53730: PUSH
53731: LD_INT 0
53733: ST_TO_ADDR
// uc_nation := 0 ;
53734: LD_ADDR_OWVAR 21
53738: PUSH
53739: LD_INT 0
53741: ST_TO_ADDR
// InitHc ;
53742: CALL_OW 19
// hc_class := class_frog ;
53746: LD_ADDR_OWVAR 28
53750: PUSH
53751: LD_INT 19
53753: ST_TO_ADDR
// hc_gallery :=  ;
53754: LD_ADDR_OWVAR 33
53758: PUSH
53759: LD_STRING 
53761: ST_TO_ADDR
// hc_name :=  ;
53762: LD_ADDR_OWVAR 26
53766: PUSH
53767: LD_STRING 
53769: ST_TO_ADDR
// end ;
53770: LD_VAR 0 1
53774: RET
// export function PrepareFish ( ) ; begin
53775: LD_INT 0
53777: PPUSH
// uc_side := 0 ;
53778: LD_ADDR_OWVAR 20
53782: PUSH
53783: LD_INT 0
53785: ST_TO_ADDR
// uc_nation := 0 ;
53786: LD_ADDR_OWVAR 21
53790: PUSH
53791: LD_INT 0
53793: ST_TO_ADDR
// InitHc ;
53794: CALL_OW 19
// hc_class := class_fish ;
53798: LD_ADDR_OWVAR 28
53802: PUSH
53803: LD_INT 20
53805: ST_TO_ADDR
// hc_gallery :=  ;
53806: LD_ADDR_OWVAR 33
53810: PUSH
53811: LD_STRING 
53813: ST_TO_ADDR
// hc_name :=  ;
53814: LD_ADDR_OWVAR 26
53818: PUSH
53819: LD_STRING 
53821: ST_TO_ADDR
// end ;
53822: LD_VAR 0 1
53826: RET
// export function PrepareBird ( ) ; begin
53827: LD_INT 0
53829: PPUSH
// uc_side := 0 ;
53830: LD_ADDR_OWVAR 20
53834: PUSH
53835: LD_INT 0
53837: ST_TO_ADDR
// uc_nation := 0 ;
53838: LD_ADDR_OWVAR 21
53842: PUSH
53843: LD_INT 0
53845: ST_TO_ADDR
// InitHc ;
53846: CALL_OW 19
// hc_class := class_phororhacos ;
53850: LD_ADDR_OWVAR 28
53854: PUSH
53855: LD_INT 18
53857: ST_TO_ADDR
// hc_gallery :=  ;
53858: LD_ADDR_OWVAR 33
53862: PUSH
53863: LD_STRING 
53865: ST_TO_ADDR
// hc_name :=  ;
53866: LD_ADDR_OWVAR 26
53870: PUSH
53871: LD_STRING 
53873: ST_TO_ADDR
// end ;
53874: LD_VAR 0 1
53878: RET
// export function PrepareHorse ( ) ; begin
53879: LD_INT 0
53881: PPUSH
// uc_side := 0 ;
53882: LD_ADDR_OWVAR 20
53886: PUSH
53887: LD_INT 0
53889: ST_TO_ADDR
// uc_nation := 0 ;
53890: LD_ADDR_OWVAR 21
53894: PUSH
53895: LD_INT 0
53897: ST_TO_ADDR
// InitHc ;
53898: CALL_OW 19
// hc_class := class_horse ;
53902: LD_ADDR_OWVAR 28
53906: PUSH
53907: LD_INT 21
53909: ST_TO_ADDR
// hc_gallery :=  ;
53910: LD_ADDR_OWVAR 33
53914: PUSH
53915: LD_STRING 
53917: ST_TO_ADDR
// hc_name :=  ;
53918: LD_ADDR_OWVAR 26
53922: PUSH
53923: LD_STRING 
53925: ST_TO_ADDR
// end ;
53926: LD_VAR 0 1
53930: RET
// export function PrepareMastodont ( ) ; begin
53931: LD_INT 0
53933: PPUSH
// uc_side := 0 ;
53934: LD_ADDR_OWVAR 20
53938: PUSH
53939: LD_INT 0
53941: ST_TO_ADDR
// uc_nation := 0 ;
53942: LD_ADDR_OWVAR 21
53946: PUSH
53947: LD_INT 0
53949: ST_TO_ADDR
// vc_chassis := class_mastodont ;
53950: LD_ADDR_OWVAR 37
53954: PUSH
53955: LD_INT 31
53957: ST_TO_ADDR
// vc_control := control_rider ;
53958: LD_ADDR_OWVAR 38
53962: PUSH
53963: LD_INT 4
53965: ST_TO_ADDR
// end ;
53966: LD_VAR 0 1
53970: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53971: LD_INT 0
53973: PPUSH
53974: PPUSH
53975: PPUSH
// uc_side = 0 ;
53976: LD_ADDR_OWVAR 20
53980: PUSH
53981: LD_INT 0
53983: ST_TO_ADDR
// uc_nation = 0 ;
53984: LD_ADDR_OWVAR 21
53988: PUSH
53989: LD_INT 0
53991: ST_TO_ADDR
// InitHc_All ( ) ;
53992: CALL_OW 584
// InitVc ;
53996: CALL_OW 20
// if mastodonts then
54000: LD_VAR 0 6
54004: IFFALSE 54071
// for i = 1 to mastodonts do
54006: LD_ADDR_VAR 0 11
54010: PUSH
54011: DOUBLE
54012: LD_INT 1
54014: DEC
54015: ST_TO_ADDR
54016: LD_VAR 0 6
54020: PUSH
54021: FOR_TO
54022: IFFALSE 54069
// begin vc_chassis := 31 ;
54024: LD_ADDR_OWVAR 37
54028: PUSH
54029: LD_INT 31
54031: ST_TO_ADDR
// vc_control := control_rider ;
54032: LD_ADDR_OWVAR 38
54036: PUSH
54037: LD_INT 4
54039: ST_TO_ADDR
// animal := CreateVehicle ;
54040: LD_ADDR_VAR 0 12
54044: PUSH
54045: CALL_OW 45
54049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54050: LD_VAR 0 12
54054: PPUSH
54055: LD_VAR 0 8
54059: PPUSH
54060: LD_INT 0
54062: PPUSH
54063: CALL 56213 0 3
// end ;
54067: GO 54021
54069: POP
54070: POP
// if horses then
54071: LD_VAR 0 5
54075: IFFALSE 54142
// for i = 1 to horses do
54077: LD_ADDR_VAR 0 11
54081: PUSH
54082: DOUBLE
54083: LD_INT 1
54085: DEC
54086: ST_TO_ADDR
54087: LD_VAR 0 5
54091: PUSH
54092: FOR_TO
54093: IFFALSE 54140
// begin hc_class := 21 ;
54095: LD_ADDR_OWVAR 28
54099: PUSH
54100: LD_INT 21
54102: ST_TO_ADDR
// hc_gallery :=  ;
54103: LD_ADDR_OWVAR 33
54107: PUSH
54108: LD_STRING 
54110: ST_TO_ADDR
// animal := CreateHuman ;
54111: LD_ADDR_VAR 0 12
54115: PUSH
54116: CALL_OW 44
54120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54121: LD_VAR 0 12
54125: PPUSH
54126: LD_VAR 0 8
54130: PPUSH
54131: LD_INT 0
54133: PPUSH
54134: CALL 56213 0 3
// end ;
54138: GO 54092
54140: POP
54141: POP
// if birds then
54142: LD_VAR 0 1
54146: IFFALSE 54213
// for i = 1 to birds do
54148: LD_ADDR_VAR 0 11
54152: PUSH
54153: DOUBLE
54154: LD_INT 1
54156: DEC
54157: ST_TO_ADDR
54158: LD_VAR 0 1
54162: PUSH
54163: FOR_TO
54164: IFFALSE 54211
// begin hc_class := 18 ;
54166: LD_ADDR_OWVAR 28
54170: PUSH
54171: LD_INT 18
54173: ST_TO_ADDR
// hc_gallery =  ;
54174: LD_ADDR_OWVAR 33
54178: PUSH
54179: LD_STRING 
54181: ST_TO_ADDR
// animal := CreateHuman ;
54182: LD_ADDR_VAR 0 12
54186: PUSH
54187: CALL_OW 44
54191: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54192: LD_VAR 0 12
54196: PPUSH
54197: LD_VAR 0 8
54201: PPUSH
54202: LD_INT 0
54204: PPUSH
54205: CALL 56213 0 3
// end ;
54209: GO 54163
54211: POP
54212: POP
// if tigers then
54213: LD_VAR 0 2
54217: IFFALSE 54301
// for i = 1 to tigers do
54219: LD_ADDR_VAR 0 11
54223: PUSH
54224: DOUBLE
54225: LD_INT 1
54227: DEC
54228: ST_TO_ADDR
54229: LD_VAR 0 2
54233: PUSH
54234: FOR_TO
54235: IFFALSE 54299
// begin hc_class = class_tiger ;
54237: LD_ADDR_OWVAR 28
54241: PUSH
54242: LD_INT 14
54244: ST_TO_ADDR
// hc_gallery =  ;
54245: LD_ADDR_OWVAR 33
54249: PUSH
54250: LD_STRING 
54252: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54253: LD_ADDR_OWVAR 35
54257: PUSH
54258: LD_INT 7
54260: NEG
54261: PPUSH
54262: LD_INT 7
54264: PPUSH
54265: CALL_OW 12
54269: ST_TO_ADDR
// animal := CreateHuman ;
54270: LD_ADDR_VAR 0 12
54274: PUSH
54275: CALL_OW 44
54279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54280: LD_VAR 0 12
54284: PPUSH
54285: LD_VAR 0 8
54289: PPUSH
54290: LD_INT 0
54292: PPUSH
54293: CALL 56213 0 3
// end ;
54297: GO 54234
54299: POP
54300: POP
// if apemans then
54301: LD_VAR 0 3
54305: IFFALSE 54428
// for i = 1 to apemans do
54307: LD_ADDR_VAR 0 11
54311: PUSH
54312: DOUBLE
54313: LD_INT 1
54315: DEC
54316: ST_TO_ADDR
54317: LD_VAR 0 3
54321: PUSH
54322: FOR_TO
54323: IFFALSE 54426
// begin hc_class = class_apeman ;
54325: LD_ADDR_OWVAR 28
54329: PUSH
54330: LD_INT 12
54332: ST_TO_ADDR
// hc_gallery =  ;
54333: LD_ADDR_OWVAR 33
54337: PUSH
54338: LD_STRING 
54340: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54341: LD_ADDR_OWVAR 35
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PPUSH
54350: LD_INT 2
54352: PPUSH
54353: CALL_OW 12
54357: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54358: LD_ADDR_OWVAR 31
54362: PUSH
54363: LD_INT 1
54365: PPUSH
54366: LD_INT 3
54368: PPUSH
54369: CALL_OW 12
54373: PUSH
54374: LD_INT 1
54376: PPUSH
54377: LD_INT 3
54379: PPUSH
54380: CALL_OW 12
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: ST_TO_ADDR
// animal := CreateHuman ;
54397: LD_ADDR_VAR 0 12
54401: PUSH
54402: CALL_OW 44
54406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54407: LD_VAR 0 12
54411: PPUSH
54412: LD_VAR 0 8
54416: PPUSH
54417: LD_INT 0
54419: PPUSH
54420: CALL 56213 0 3
// end ;
54424: GO 54322
54426: POP
54427: POP
// if enchidnas then
54428: LD_VAR 0 4
54432: IFFALSE 54499
// for i = 1 to enchidnas do
54434: LD_ADDR_VAR 0 11
54438: PUSH
54439: DOUBLE
54440: LD_INT 1
54442: DEC
54443: ST_TO_ADDR
54444: LD_VAR 0 4
54448: PUSH
54449: FOR_TO
54450: IFFALSE 54497
// begin hc_class = 13 ;
54452: LD_ADDR_OWVAR 28
54456: PUSH
54457: LD_INT 13
54459: ST_TO_ADDR
// hc_gallery =  ;
54460: LD_ADDR_OWVAR 33
54464: PUSH
54465: LD_STRING 
54467: ST_TO_ADDR
// animal := CreateHuman ;
54468: LD_ADDR_VAR 0 12
54472: PUSH
54473: CALL_OW 44
54477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54478: LD_VAR 0 12
54482: PPUSH
54483: LD_VAR 0 8
54487: PPUSH
54488: LD_INT 0
54490: PPUSH
54491: CALL 56213 0 3
// end ;
54495: GO 54449
54497: POP
54498: POP
// if fishes then
54499: LD_VAR 0 7
54503: IFFALSE 54570
// for i = 1 to fishes do
54505: LD_ADDR_VAR 0 11
54509: PUSH
54510: DOUBLE
54511: LD_INT 1
54513: DEC
54514: ST_TO_ADDR
54515: LD_VAR 0 7
54519: PUSH
54520: FOR_TO
54521: IFFALSE 54568
// begin hc_class = 20 ;
54523: LD_ADDR_OWVAR 28
54527: PUSH
54528: LD_INT 20
54530: ST_TO_ADDR
// hc_gallery =  ;
54531: LD_ADDR_OWVAR 33
54535: PUSH
54536: LD_STRING 
54538: ST_TO_ADDR
// animal := CreateHuman ;
54539: LD_ADDR_VAR 0 12
54543: PUSH
54544: CALL_OW 44
54548: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54549: LD_VAR 0 12
54553: PPUSH
54554: LD_VAR 0 9
54558: PPUSH
54559: LD_INT 0
54561: PPUSH
54562: CALL 56213 0 3
// end ;
54566: GO 54520
54568: POP
54569: POP
// end ;
54570: LD_VAR 0 10
54574: RET
// export function WantHeal ( sci , unit ) ; begin
54575: LD_INT 0
54577: PPUSH
// if GetTaskList ( sci ) > 0 then
54578: LD_VAR 0 1
54582: PPUSH
54583: CALL_OW 437
54587: PUSH
54588: LD_INT 0
54590: GREATER
54591: IFFALSE 54663
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54593: LD_VAR 0 1
54597: PPUSH
54598: CALL_OW 437
54602: PUSH
54603: LD_INT 1
54605: ARRAY
54606: PUSH
54607: LD_INT 1
54609: ARRAY
54610: PUSH
54611: LD_STRING l
54613: EQUAL
54614: IFFALSE 54641
54616: PUSH
54617: LD_VAR 0 1
54621: PPUSH
54622: CALL_OW 437
54626: PUSH
54627: LD_INT 1
54629: ARRAY
54630: PUSH
54631: LD_INT 4
54633: ARRAY
54634: PUSH
54635: LD_VAR 0 2
54639: EQUAL
54640: AND
54641: IFFALSE 54653
// result := true else
54643: LD_ADDR_VAR 0 3
54647: PUSH
54648: LD_INT 1
54650: ST_TO_ADDR
54651: GO 54661
// result := false ;
54653: LD_ADDR_VAR 0 3
54657: PUSH
54658: LD_INT 0
54660: ST_TO_ADDR
// end else
54661: GO 54671
// result := false ;
54663: LD_ADDR_VAR 0 3
54667: PUSH
54668: LD_INT 0
54670: ST_TO_ADDR
// end ;
54671: LD_VAR 0 3
54675: RET
// export function HealTarget ( sci ) ; begin
54676: LD_INT 0
54678: PPUSH
// if not sci then
54679: LD_VAR 0 1
54683: NOT
54684: IFFALSE 54688
// exit ;
54686: GO 54753
// result := 0 ;
54688: LD_ADDR_VAR 0 2
54692: PUSH
54693: LD_INT 0
54695: ST_TO_ADDR
// if GetTaskList ( sci ) then
54696: LD_VAR 0 1
54700: PPUSH
54701: CALL_OW 437
54705: IFFALSE 54753
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54707: LD_VAR 0 1
54711: PPUSH
54712: CALL_OW 437
54716: PUSH
54717: LD_INT 1
54719: ARRAY
54720: PUSH
54721: LD_INT 1
54723: ARRAY
54724: PUSH
54725: LD_STRING l
54727: EQUAL
54728: IFFALSE 54753
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54730: LD_ADDR_VAR 0 2
54734: PUSH
54735: LD_VAR 0 1
54739: PPUSH
54740: CALL_OW 437
54744: PUSH
54745: LD_INT 1
54747: ARRAY
54748: PUSH
54749: LD_INT 4
54751: ARRAY
54752: ST_TO_ADDR
// end ;
54753: LD_VAR 0 2
54757: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54758: LD_INT 0
54760: PPUSH
54761: PPUSH
54762: PPUSH
54763: PPUSH
// if not base_units then
54764: LD_VAR 0 1
54768: NOT
54769: IFFALSE 54773
// exit ;
54771: GO 54860
// result := false ;
54773: LD_ADDR_VAR 0 2
54777: PUSH
54778: LD_INT 0
54780: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54781: LD_ADDR_VAR 0 5
54785: PUSH
54786: LD_VAR 0 1
54790: PPUSH
54791: LD_INT 21
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PPUSH
54801: CALL_OW 72
54805: ST_TO_ADDR
// if not tmp then
54806: LD_VAR 0 5
54810: NOT
54811: IFFALSE 54815
// exit ;
54813: GO 54860
// for i in tmp do
54815: LD_ADDR_VAR 0 3
54819: PUSH
54820: LD_VAR 0 5
54824: PUSH
54825: FOR_IN
54826: IFFALSE 54858
// begin result := EnemyInRange ( i , 22 ) ;
54828: LD_ADDR_VAR 0 2
54832: PUSH
54833: LD_VAR 0 3
54837: PPUSH
54838: LD_INT 22
54840: PPUSH
54841: CALL 52285 0 2
54845: ST_TO_ADDR
// if result then
54846: LD_VAR 0 2
54850: IFFALSE 54856
// exit ;
54852: POP
54853: POP
54854: GO 54860
// end ;
54856: GO 54825
54858: POP
54859: POP
// end ;
54860: LD_VAR 0 2
54864: RET
// export function FilterByTag ( units , tag ) ; begin
54865: LD_INT 0
54867: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
54868: LD_ADDR_VAR 0 3
54872: PUSH
54873: LD_VAR 0 1
54877: PPUSH
54878: LD_INT 120
54880: PUSH
54881: LD_VAR 0 2
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PPUSH
54890: CALL_OW 72
54894: ST_TO_ADDR
// end ;
54895: LD_VAR 0 3
54899: RET
// export function IsDriver ( un ) ; begin
54900: LD_INT 0
54902: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54903: LD_ADDR_VAR 0 2
54907: PUSH
54908: LD_VAR 0 1
54912: PUSH
54913: LD_INT 55
54915: PUSH
54916: EMPTY
54917: LIST
54918: PPUSH
54919: CALL_OW 69
54923: IN
54924: ST_TO_ADDR
// end ;
54925: LD_VAR 0 2
54929: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54930: LD_INT 0
54932: PPUSH
54933: PPUSH
// list := [ ] ;
54934: LD_ADDR_VAR 0 5
54938: PUSH
54939: EMPTY
54940: ST_TO_ADDR
// case d of 0 :
54941: LD_VAR 0 3
54945: PUSH
54946: LD_INT 0
54948: DOUBLE
54949: EQUAL
54950: IFTRUE 54954
54952: GO 55087
54954: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54955: LD_ADDR_VAR 0 5
54959: PUSH
54960: LD_VAR 0 1
54964: PUSH
54965: LD_INT 4
54967: MINUS
54968: PUSH
54969: LD_VAR 0 2
54973: PUSH
54974: LD_INT 4
54976: MINUS
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: LIST
54985: PUSH
54986: LD_VAR 0 1
54990: PUSH
54991: LD_INT 3
54993: MINUS
54994: PUSH
54995: LD_VAR 0 2
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: LIST
55007: PUSH
55008: LD_VAR 0 1
55012: PUSH
55013: LD_INT 4
55015: PLUS
55016: PUSH
55017: LD_VAR 0 2
55021: PUSH
55022: LD_INT 4
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: LIST
55029: PUSH
55030: LD_VAR 0 1
55034: PUSH
55035: LD_INT 3
55037: PLUS
55038: PUSH
55039: LD_VAR 0 2
55043: PUSH
55044: LD_INT 3
55046: PLUS
55047: PUSH
55048: LD_INT 5
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: PUSH
55056: LD_VAR 0 1
55060: PUSH
55061: LD_VAR 0 2
55065: PUSH
55066: LD_INT 4
55068: PLUS
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: LIST
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// end ; 1 :
55085: GO 55785
55087: LD_INT 1
55089: DOUBLE
55090: EQUAL
55091: IFTRUE 55095
55093: GO 55228
55095: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55096: LD_ADDR_VAR 0 5
55100: PUSH
55101: LD_VAR 0 1
55105: PUSH
55106: LD_VAR 0 2
55110: PUSH
55111: LD_INT 4
55113: MINUS
55114: PUSH
55115: LD_INT 3
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: LIST
55122: PUSH
55123: LD_VAR 0 1
55127: PUSH
55128: LD_INT 3
55130: MINUS
55131: PUSH
55132: LD_VAR 0 2
55136: PUSH
55137: LD_INT 3
55139: MINUS
55140: PUSH
55141: LD_INT 2
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: PUSH
55149: LD_VAR 0 1
55153: PUSH
55154: LD_INT 4
55156: MINUS
55157: PUSH
55158: LD_VAR 0 2
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: PUSH
55171: LD_VAR 0 1
55175: PUSH
55176: LD_VAR 0 2
55180: PUSH
55181: LD_INT 3
55183: PLUS
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: LIST
55192: PUSH
55193: LD_VAR 0 1
55197: PUSH
55198: LD_INT 4
55200: PLUS
55201: PUSH
55202: LD_VAR 0 2
55206: PUSH
55207: LD_INT 4
55209: PLUS
55210: PUSH
55211: LD_INT 5
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: ST_TO_ADDR
// end ; 2 :
55226: GO 55785
55228: LD_INT 2
55230: DOUBLE
55231: EQUAL
55232: IFTRUE 55236
55234: GO 55365
55236: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55237: LD_ADDR_VAR 0 5
55241: PUSH
55242: LD_VAR 0 1
55246: PUSH
55247: LD_VAR 0 2
55251: PUSH
55252: LD_INT 3
55254: MINUS
55255: PUSH
55256: LD_INT 3
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: LIST
55263: PUSH
55264: LD_VAR 0 1
55268: PUSH
55269: LD_INT 4
55271: PLUS
55272: PUSH
55273: LD_VAR 0 2
55277: PUSH
55278: LD_INT 4
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: PUSH
55286: LD_VAR 0 1
55290: PUSH
55291: LD_VAR 0 2
55295: PUSH
55296: LD_INT 4
55298: PLUS
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: PUSH
55308: LD_VAR 0 1
55312: PUSH
55313: LD_INT 3
55315: MINUS
55316: PUSH
55317: LD_VAR 0 2
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: PUSH
55330: LD_VAR 0 1
55334: PUSH
55335: LD_INT 4
55337: MINUS
55338: PUSH
55339: LD_VAR 0 2
55343: PUSH
55344: LD_INT 4
55346: MINUS
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: LIST
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: ST_TO_ADDR
// end ; 3 :
55363: GO 55785
55365: LD_INT 3
55367: DOUBLE
55368: EQUAL
55369: IFTRUE 55373
55371: GO 55506
55373: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55374: LD_ADDR_VAR 0 5
55378: PUSH
55379: LD_VAR 0 1
55383: PUSH
55384: LD_INT 3
55386: PLUS
55387: PUSH
55388: LD_VAR 0 2
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: LIST
55400: PUSH
55401: LD_VAR 0 1
55405: PUSH
55406: LD_INT 4
55408: PLUS
55409: PUSH
55410: LD_VAR 0 2
55414: PUSH
55415: LD_INT 4
55417: PLUS
55418: PUSH
55419: LD_INT 5
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: LIST
55426: PUSH
55427: LD_VAR 0 1
55431: PUSH
55432: LD_INT 4
55434: MINUS
55435: PUSH
55436: LD_VAR 0 2
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: PUSH
55449: LD_VAR 0 1
55453: PUSH
55454: LD_VAR 0 2
55458: PUSH
55459: LD_INT 4
55461: MINUS
55462: PUSH
55463: LD_INT 3
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: LIST
55470: PUSH
55471: LD_VAR 0 1
55475: PUSH
55476: LD_INT 3
55478: MINUS
55479: PUSH
55480: LD_VAR 0 2
55484: PUSH
55485: LD_INT 3
55487: MINUS
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: ST_TO_ADDR
// end ; 4 :
55504: GO 55785
55506: LD_INT 4
55508: DOUBLE
55509: EQUAL
55510: IFTRUE 55514
55512: GO 55647
55514: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55515: LD_ADDR_VAR 0 5
55519: PUSH
55520: LD_VAR 0 1
55524: PUSH
55525: LD_VAR 0 2
55529: PUSH
55530: LD_INT 4
55532: PLUS
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: LIST
55541: PUSH
55542: LD_VAR 0 1
55546: PUSH
55547: LD_INT 3
55549: PLUS
55550: PUSH
55551: LD_VAR 0 2
55555: PUSH
55556: LD_INT 3
55558: PLUS
55559: PUSH
55560: LD_INT 5
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: PUSH
55568: LD_VAR 0 1
55572: PUSH
55573: LD_INT 4
55575: PLUS
55576: PUSH
55577: LD_VAR 0 2
55581: PUSH
55582: LD_INT 4
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: LIST
55589: PUSH
55590: LD_VAR 0 1
55594: PUSH
55595: LD_VAR 0 2
55599: PUSH
55600: LD_INT 3
55602: MINUS
55603: PUSH
55604: LD_INT 3
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: PUSH
55612: LD_VAR 0 1
55616: PUSH
55617: LD_INT 4
55619: MINUS
55620: PUSH
55621: LD_VAR 0 2
55625: PUSH
55626: LD_INT 4
55628: MINUS
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: ST_TO_ADDR
// end ; 5 :
55645: GO 55785
55647: LD_INT 5
55649: DOUBLE
55650: EQUAL
55651: IFTRUE 55655
55653: GO 55784
55655: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55656: LD_ADDR_VAR 0 5
55660: PUSH
55661: LD_VAR 0 1
55665: PUSH
55666: LD_INT 4
55668: MINUS
55669: PUSH
55670: LD_VAR 0 2
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: PUSH
55683: LD_VAR 0 1
55687: PUSH
55688: LD_VAR 0 2
55692: PUSH
55693: LD_INT 4
55695: MINUS
55696: PUSH
55697: LD_INT 3
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: LIST
55704: PUSH
55705: LD_VAR 0 1
55709: PUSH
55710: LD_INT 4
55712: PLUS
55713: PUSH
55714: LD_VAR 0 2
55718: PUSH
55719: LD_INT 4
55721: PLUS
55722: PUSH
55723: LD_INT 5
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: LIST
55730: PUSH
55731: LD_VAR 0 1
55735: PUSH
55736: LD_INT 3
55738: PLUS
55739: PUSH
55740: LD_VAR 0 2
55744: PUSH
55745: LD_INT 4
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: LIST
55752: PUSH
55753: LD_VAR 0 1
55757: PUSH
55758: LD_VAR 0 2
55762: PUSH
55763: LD_INT 3
55765: PLUS
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: ST_TO_ADDR
// end ; end ;
55782: GO 55785
55784: POP
// result := list ;
55785: LD_ADDR_VAR 0 4
55789: PUSH
55790: LD_VAR 0 5
55794: ST_TO_ADDR
// end ;
55795: LD_VAR 0 4
55799: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55800: LD_INT 0
55802: PPUSH
55803: PPUSH
55804: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55805: LD_VAR 0 1
55809: NOT
55810: IFTRUE 55838
55812: PUSH
55813: LD_VAR 0 2
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 2
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: IN
55836: NOT
55837: OR
55838: IFFALSE 55842
// exit ;
55840: GO 55925
// tmp := [ ] ;
55842: LD_ADDR_VAR 0 5
55846: PUSH
55847: EMPTY
55848: ST_TO_ADDR
// for i in units do
55849: LD_ADDR_VAR 0 4
55853: PUSH
55854: LD_VAR 0 1
55858: PUSH
55859: FOR_IN
55860: IFFALSE 55894
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
55862: LD_ADDR_VAR 0 5
55866: PUSH
55867: LD_VAR 0 5
55871: PPUSH
55872: LD_VAR 0 4
55876: PPUSH
55877: LD_VAR 0 2
55881: PPUSH
55882: CALL_OW 259
55886: PPUSH
55887: CALL 57320 0 2
55891: ST_TO_ADDR
55892: GO 55859
55894: POP
55895: POP
// if not tmp then
55896: LD_VAR 0 5
55900: NOT
55901: IFFALSE 55905
// exit ;
55903: GO 55925
// result := SortListByListDesc ( units , tmp ) ;
55905: LD_ADDR_VAR 0 3
55909: PUSH
55910: LD_VAR 0 1
55914: PPUSH
55915: LD_VAR 0 5
55919: PPUSH
55920: CALL_OW 77
55924: ST_TO_ADDR
// end ;
55925: LD_VAR 0 3
55929: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55930: LD_INT 0
55932: PPUSH
55933: PPUSH
55934: PPUSH
// result := false ;
55935: LD_ADDR_VAR 0 3
55939: PUSH
55940: LD_INT 0
55942: ST_TO_ADDR
// if not building then
55943: LD_VAR 0 2
55947: NOT
55948: IFFALSE 55952
// exit ;
55950: GO 56096
// x := GetX ( building ) ;
55952: LD_ADDR_VAR 0 4
55956: PUSH
55957: LD_VAR 0 2
55961: PPUSH
55962: CALL_OW 250
55966: ST_TO_ADDR
// y := GetY ( building ) ;
55967: LD_ADDR_VAR 0 5
55971: PUSH
55972: LD_VAR 0 2
55976: PPUSH
55977: CALL_OW 251
55981: ST_TO_ADDR
// if not x or not y then
55982: LD_VAR 0 4
55986: NOT
55987: IFTRUE 55996
55989: PUSH
55990: LD_VAR 0 5
55994: NOT
55995: OR
55996: IFFALSE 56000
// exit ;
55998: GO 56096
// if GetTaskList ( unit ) then
56000: LD_VAR 0 1
56004: PPUSH
56005: CALL_OW 437
56009: IFFALSE 56096
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56011: LD_STRING e
56013: PUSH
56014: LD_VAR 0 1
56018: PPUSH
56019: CALL_OW 437
56023: PUSH
56024: LD_INT 1
56026: ARRAY
56027: PUSH
56028: LD_INT 1
56030: ARRAY
56031: EQUAL
56032: IFFALSE 56059
56034: PUSH
56035: LD_VAR 0 4
56039: PUSH
56040: LD_VAR 0 1
56044: PPUSH
56045: CALL_OW 437
56049: PUSH
56050: LD_INT 1
56052: ARRAY
56053: PUSH
56054: LD_INT 2
56056: ARRAY
56057: EQUAL
56058: AND
56059: IFFALSE 56086
56061: PUSH
56062: LD_VAR 0 5
56066: PUSH
56067: LD_VAR 0 1
56071: PPUSH
56072: CALL_OW 437
56076: PUSH
56077: LD_INT 1
56079: ARRAY
56080: PUSH
56081: LD_INT 3
56083: ARRAY
56084: EQUAL
56085: AND
56086: IFFALSE 56096
// result := true end ;
56088: LD_ADDR_VAR 0 3
56092: PUSH
56093: LD_INT 1
56095: ST_TO_ADDR
// end ;
56096: LD_VAR 0 3
56100: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56101: LD_INT 0
56103: PPUSH
// result := false ;
56104: LD_ADDR_VAR 0 4
56108: PUSH
56109: LD_INT 0
56111: ST_TO_ADDR
// if GetTaskList ( unit ) then
56112: LD_VAR 0 1
56116: PPUSH
56117: CALL_OW 437
56121: IFFALSE 56208
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56123: LD_STRING M
56125: PUSH
56126: LD_VAR 0 1
56130: PPUSH
56131: CALL_OW 437
56135: PUSH
56136: LD_INT 1
56138: ARRAY
56139: PUSH
56140: LD_INT 1
56142: ARRAY
56143: EQUAL
56144: IFFALSE 56171
56146: PUSH
56147: LD_VAR 0 2
56151: PUSH
56152: LD_VAR 0 1
56156: PPUSH
56157: CALL_OW 437
56161: PUSH
56162: LD_INT 1
56164: ARRAY
56165: PUSH
56166: LD_INT 2
56168: ARRAY
56169: EQUAL
56170: AND
56171: IFFALSE 56198
56173: PUSH
56174: LD_VAR 0 3
56178: PUSH
56179: LD_VAR 0 1
56183: PPUSH
56184: CALL_OW 437
56188: PUSH
56189: LD_INT 1
56191: ARRAY
56192: PUSH
56193: LD_INT 3
56195: ARRAY
56196: EQUAL
56197: AND
56198: IFFALSE 56208
// result := true ;
56200: LD_ADDR_VAR 0 4
56204: PUSH
56205: LD_INT 1
56207: ST_TO_ADDR
// end ; end ;
56208: LD_VAR 0 4
56212: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56213: LD_INT 0
56215: PPUSH
56216: PPUSH
56217: PPUSH
56218: PPUSH
// if not unit or not area then
56219: LD_VAR 0 1
56223: NOT
56224: IFTRUE 56233
56226: PUSH
56227: LD_VAR 0 2
56231: NOT
56232: OR
56233: IFFALSE 56237
// exit ;
56235: GO 56413
// tmp := AreaToList ( area , i ) ;
56237: LD_ADDR_VAR 0 6
56241: PUSH
56242: LD_VAR 0 2
56246: PPUSH
56247: LD_VAR 0 5
56251: PPUSH
56252: CALL_OW 517
56256: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56257: LD_ADDR_VAR 0 5
56261: PUSH
56262: DOUBLE
56263: LD_INT 1
56265: DEC
56266: ST_TO_ADDR
56267: LD_VAR 0 6
56271: PUSH
56272: LD_INT 1
56274: ARRAY
56275: PUSH
56276: FOR_TO
56277: IFFALSE 56411
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56279: LD_ADDR_VAR 0 7
56283: PUSH
56284: LD_VAR 0 6
56288: PUSH
56289: LD_INT 1
56291: ARRAY
56292: PUSH
56293: LD_VAR 0 5
56297: ARRAY
56298: PUSH
56299: LD_VAR 0 6
56303: PUSH
56304: LD_INT 2
56306: ARRAY
56307: PUSH
56308: LD_VAR 0 5
56312: ARRAY
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
56318: LD_INT 92
56320: PUSH
56321: LD_VAR 0 7
56325: PUSH
56326: LD_INT 1
56328: ARRAY
56329: PUSH
56330: LD_VAR 0 7
56334: PUSH
56335: LD_INT 2
56337: ARRAY
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: PPUSH
56348: CALL_OW 69
56352: PUSH
56353: LD_INT 0
56355: EQUAL
56356: IFFALSE 56409
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56358: LD_VAR 0 1
56362: PPUSH
56363: LD_VAR 0 7
56367: PUSH
56368: LD_INT 1
56370: ARRAY
56371: PPUSH
56372: LD_VAR 0 7
56376: PUSH
56377: LD_INT 2
56379: ARRAY
56380: PPUSH
56381: LD_VAR 0 3
56385: PPUSH
56386: CALL_OW 48
// result := IsPlaced ( unit ) ;
56390: LD_ADDR_VAR 0 4
56394: PUSH
56395: LD_VAR 0 1
56399: PPUSH
56400: CALL_OW 305
56404: ST_TO_ADDR
// exit ;
56405: POP
56406: POP
56407: GO 56413
// end ; end ;
56409: GO 56276
56411: POP
56412: POP
// end ;
56413: LD_VAR 0 4
56417: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56418: LD_INT 0
56420: PPUSH
56421: PPUSH
56422: PPUSH
// if not side or side > 8 then
56423: LD_VAR 0 1
56427: NOT
56428: IFTRUE 56440
56430: PUSH
56431: LD_VAR 0 1
56435: PUSH
56436: LD_INT 8
56438: GREATER
56439: OR
56440: IFFALSE 56444
// exit ;
56442: GO 56631
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56444: LD_ADDR_VAR 0 4
56448: PUSH
56449: LD_INT 22
56451: PUSH
56452: LD_VAR 0 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 21
56463: PUSH
56464: LD_INT 3
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PPUSH
56475: CALL_OW 69
56479: ST_TO_ADDR
// if not tmp then
56480: LD_VAR 0 4
56484: NOT
56485: IFFALSE 56489
// exit ;
56487: GO 56631
// enable_addtolog := true ;
56489: LD_ADDR_OWVAR 81
56493: PUSH
56494: LD_INT 1
56496: ST_TO_ADDR
// AddToLog ( [ ) ;
56497: LD_STRING [
56499: PPUSH
56500: CALL_OW 561
// for i in tmp do
56504: LD_ADDR_VAR 0 3
56508: PUSH
56509: LD_VAR 0 4
56513: PUSH
56514: FOR_IN
56515: IFFALSE 56622
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56517: LD_STRING [
56519: PUSH
56520: LD_VAR 0 3
56524: PPUSH
56525: CALL_OW 266
56529: STR
56530: PUSH
56531: LD_STRING , 
56533: STR
56534: PUSH
56535: LD_VAR 0 3
56539: PPUSH
56540: CALL_OW 250
56544: STR
56545: PUSH
56546: LD_STRING , 
56548: STR
56549: PUSH
56550: LD_VAR 0 3
56554: PPUSH
56555: CALL_OW 251
56559: STR
56560: PUSH
56561: LD_STRING , 
56563: STR
56564: PUSH
56565: LD_VAR 0 3
56569: PPUSH
56570: CALL_OW 254
56574: STR
56575: PUSH
56576: LD_STRING , 
56578: STR
56579: PUSH
56580: LD_VAR 0 3
56584: PPUSH
56585: LD_INT 1
56587: PPUSH
56588: CALL_OW 268
56592: STR
56593: PUSH
56594: LD_STRING , 
56596: STR
56597: PUSH
56598: LD_VAR 0 3
56602: PPUSH
56603: LD_INT 2
56605: PPUSH
56606: CALL_OW 268
56610: STR
56611: PUSH
56612: LD_STRING ],
56614: STR
56615: PPUSH
56616: CALL_OW 561
// end ;
56620: GO 56514
56622: POP
56623: POP
// AddToLog ( ]; ) ;
56624: LD_STRING ];
56626: PPUSH
56627: CALL_OW 561
// end ;
56631: LD_VAR 0 2
56635: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56636: LD_INT 0
56638: PPUSH
56639: PPUSH
56640: PPUSH
56641: PPUSH
56642: PPUSH
// if not area or not rate or not max then
56643: LD_VAR 0 1
56647: NOT
56648: IFTRUE 56657
56650: PUSH
56651: LD_VAR 0 2
56655: NOT
56656: OR
56657: IFTRUE 56666
56659: PUSH
56660: LD_VAR 0 4
56664: NOT
56665: OR
56666: IFFALSE 56670
// exit ;
56668: GO 56859
// while 1 do
56670: LD_INT 1
56672: IFFALSE 56859
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56674: LD_ADDR_VAR 0 9
56678: PUSH
56679: LD_VAR 0 1
56683: PPUSH
56684: LD_INT 1
56686: PPUSH
56687: CALL_OW 287
56691: PUSH
56692: LD_INT 10
56694: MUL
56695: ST_TO_ADDR
// r := rate / 10 ;
56696: LD_ADDR_VAR 0 7
56700: PUSH
56701: LD_VAR 0 2
56705: PUSH
56706: LD_INT 10
56708: DIVREAL
56709: ST_TO_ADDR
// time := 1 1$00 ;
56710: LD_ADDR_VAR 0 8
56714: PUSH
56715: LD_INT 2100
56717: ST_TO_ADDR
// if amount < min then
56718: LD_VAR 0 9
56722: PUSH
56723: LD_VAR 0 3
56727: LESS
56728: IFFALSE 56746
// r := r * 2 else
56730: LD_ADDR_VAR 0 7
56734: PUSH
56735: LD_VAR 0 7
56739: PUSH
56740: LD_INT 2
56742: MUL
56743: ST_TO_ADDR
56744: GO 56772
// if amount > max then
56746: LD_VAR 0 9
56750: PUSH
56751: LD_VAR 0 4
56755: GREATER
56756: IFFALSE 56772
// r := r / 2 ;
56758: LD_ADDR_VAR 0 7
56762: PUSH
56763: LD_VAR 0 7
56767: PUSH
56768: LD_INT 2
56770: DIVREAL
56771: ST_TO_ADDR
// time := time / r ;
56772: LD_ADDR_VAR 0 8
56776: PUSH
56777: LD_VAR 0 8
56781: PUSH
56782: LD_VAR 0 7
56786: DIVREAL
56787: ST_TO_ADDR
// if time < 0 then
56788: LD_VAR 0 8
56792: PUSH
56793: LD_INT 0
56795: LESS
56796: IFFALSE 56813
// time := time * - 1 ;
56798: LD_ADDR_VAR 0 8
56802: PUSH
56803: LD_VAR 0 8
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: MUL
56812: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
56813: LD_VAR 0 8
56817: PUSH
56818: LD_INT 35
56820: PPUSH
56821: LD_INT 875
56823: PPUSH
56824: CALL_OW 12
56828: PLUS
56829: PPUSH
56830: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56834: LD_INT 1
56836: PPUSH
56837: LD_INT 5
56839: PPUSH
56840: CALL_OW 12
56844: PPUSH
56845: LD_VAR 0 1
56849: PPUSH
56850: LD_INT 1
56852: PPUSH
56853: CALL_OW 55
// end ;
56857: GO 56670
// end ;
56859: LD_VAR 0 5
56863: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56864: LD_INT 0
56866: PPUSH
56867: PPUSH
56868: PPUSH
56869: PPUSH
56870: PPUSH
56871: PPUSH
56872: PPUSH
56873: PPUSH
// if not turrets or not factories then
56874: LD_VAR 0 1
56878: NOT
56879: IFTRUE 56888
56881: PUSH
56882: LD_VAR 0 2
56886: NOT
56887: OR
56888: IFFALSE 56892
// exit ;
56890: GO 57199
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56892: LD_ADDR_VAR 0 10
56896: PUSH
56897: LD_INT 5
56899: PUSH
56900: LD_INT 6
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 4
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 5
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 24
56934: PUSH
56935: LD_INT 25
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 23
56944: PUSH
56945: LD_INT 27
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 42
56958: PUSH
56959: LD_INT 43
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 44
56968: PUSH
56969: LD_INT 46
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 45
56978: PUSH
56979: LD_INT 47
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: LIST
56995: ST_TO_ADDR
// result := [ ] ;
56996: LD_ADDR_VAR 0 3
57000: PUSH
57001: EMPTY
57002: ST_TO_ADDR
// for i in turrets do
57003: LD_ADDR_VAR 0 4
57007: PUSH
57008: LD_VAR 0 1
57012: PUSH
57013: FOR_IN
57014: IFFALSE 57197
// begin nat := GetNation ( i ) ;
57016: LD_ADDR_VAR 0 7
57020: PUSH
57021: LD_VAR 0 4
57025: PPUSH
57026: CALL_OW 248
57030: ST_TO_ADDR
// weapon := 0 ;
57031: LD_ADDR_VAR 0 8
57035: PUSH
57036: LD_INT 0
57038: ST_TO_ADDR
// if not nat then
57039: LD_VAR 0 7
57043: NOT
57044: IFFALSE 57048
// continue ;
57046: GO 57013
// for j in list [ nat ] do
57048: LD_ADDR_VAR 0 5
57052: PUSH
57053: LD_VAR 0 10
57057: PUSH
57058: LD_VAR 0 7
57062: ARRAY
57063: PUSH
57064: FOR_IN
57065: IFFALSE 57106
// if GetBWeapon ( i ) = j [ 1 ] then
57067: LD_VAR 0 4
57071: PPUSH
57072: CALL_OW 269
57076: PUSH
57077: LD_VAR 0 5
57081: PUSH
57082: LD_INT 1
57084: ARRAY
57085: EQUAL
57086: IFFALSE 57104
// begin weapon := j [ 2 ] ;
57088: LD_ADDR_VAR 0 8
57092: PUSH
57093: LD_VAR 0 5
57097: PUSH
57098: LD_INT 2
57100: ARRAY
57101: ST_TO_ADDR
// break ;
57102: GO 57106
// end ;
57104: GO 57064
57106: POP
57107: POP
// if not weapon then
57108: LD_VAR 0 8
57112: NOT
57113: IFFALSE 57117
// continue ;
57115: GO 57013
// for k in factories do
57117: LD_ADDR_VAR 0 6
57121: PUSH
57122: LD_VAR 0 2
57126: PUSH
57127: FOR_IN
57128: IFFALSE 57193
// begin weapons := AvailableWeaponList ( k ) ;
57130: LD_ADDR_VAR 0 9
57134: PUSH
57135: LD_VAR 0 6
57139: PPUSH
57140: CALL_OW 478
57144: ST_TO_ADDR
// if not weapons then
57145: LD_VAR 0 9
57149: NOT
57150: IFFALSE 57154
// continue ;
57152: GO 57127
// if weapon in weapons then
57154: LD_VAR 0 8
57158: PUSH
57159: LD_VAR 0 9
57163: IN
57164: IFFALSE 57191
// begin result := [ i , weapon ] ;
57166: LD_ADDR_VAR 0 3
57170: PUSH
57171: LD_VAR 0 4
57175: PUSH
57176: LD_VAR 0 8
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: ST_TO_ADDR
// exit ;
57185: POP
57186: POP
57187: POP
57188: POP
57189: GO 57199
// end ; end ;
57191: GO 57127
57193: POP
57194: POP
// end ;
57195: GO 57013
57197: POP
57198: POP
// end ;
57199: LD_VAR 0 3
57203: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57204: LD_INT 0
57206: PPUSH
// if not side or side > 8 then
57207: LD_VAR 0 3
57211: NOT
57212: IFTRUE 57224
57214: PUSH
57215: LD_VAR 0 3
57219: PUSH
57220: LD_INT 8
57222: GREATER
57223: OR
57224: IFFALSE 57228
// exit ;
57226: GO 57287
// if not range then
57228: LD_VAR 0 4
57232: NOT
57233: IFFALSE 57244
// range := - 12 ;
57235: LD_ADDR_VAR 0 4
57239: PUSH
57240: LD_INT 12
57242: NEG
57243: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57244: LD_VAR 0 1
57248: PPUSH
57249: LD_VAR 0 2
57253: PPUSH
57254: LD_VAR 0 3
57258: PPUSH
57259: LD_VAR 0 4
57263: PPUSH
57264: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57268: LD_VAR 0 1
57272: PPUSH
57273: LD_VAR 0 2
57277: PPUSH
57278: LD_VAR 0 3
57282: PPUSH
57283: CALL_OW 331
// end ;
57287: LD_VAR 0 5
57291: RET
// export function Video ( mode ) ; begin
57292: LD_INT 0
57294: PPUSH
// ingame_video = mode ;
57295: LD_ADDR_OWVAR 52
57299: PUSH
57300: LD_VAR 0 1
57304: ST_TO_ADDR
// interface_hidden = mode ;
57305: LD_ADDR_OWVAR 54
57309: PUSH
57310: LD_VAR 0 1
57314: ST_TO_ADDR
// end ;
57315: LD_VAR 0 2
57319: RET
// export function Join ( array , element ) ; begin
57320: LD_INT 0
57322: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57323: LD_ADDR_VAR 0 3
57327: PUSH
57328: LD_VAR 0 1
57332: PPUSH
57333: LD_VAR 0 1
57337: PUSH
57338: LD_INT 1
57340: PLUS
57341: PPUSH
57342: LD_VAR 0 2
57346: PPUSH
57347: CALL_OW 1
57351: ST_TO_ADDR
// end ;
57352: LD_VAR 0 3
57356: RET
// export function JoinUnion ( array , element ) ; begin
57357: LD_INT 0
57359: PPUSH
// result := array union element ;
57360: LD_ADDR_VAR 0 3
57364: PUSH
57365: LD_VAR 0 1
57369: PUSH
57370: LD_VAR 0 2
57374: UNION
57375: ST_TO_ADDR
// end ;
57376: LD_VAR 0 3
57380: RET
// export function GetBehemoths ( side ) ; begin
57381: LD_INT 0
57383: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
57384: LD_ADDR_VAR 0 2
57388: PUSH
57389: LD_INT 22
57391: PUSH
57392: LD_VAR 0 1
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 31
57403: PUSH
57404: LD_INT 25
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PPUSH
57415: CALL_OW 69
57419: ST_TO_ADDR
// end ;
57420: LD_VAR 0 2
57424: RET
// export function Shuffle ( array ) ; var i , index ; begin
57425: LD_INT 0
57427: PPUSH
57428: PPUSH
57429: PPUSH
// result := [ ] ;
57430: LD_ADDR_VAR 0 2
57434: PUSH
57435: EMPTY
57436: ST_TO_ADDR
// if not array then
57437: LD_VAR 0 1
57441: NOT
57442: IFFALSE 57446
// exit ;
57444: GO 57545
// Randomize ;
57446: CALL_OW 10
// for i = array downto 1 do
57450: LD_ADDR_VAR 0 3
57454: PUSH
57455: DOUBLE
57456: LD_VAR 0 1
57460: INC
57461: ST_TO_ADDR
57462: LD_INT 1
57464: PUSH
57465: FOR_DOWNTO
57466: IFFALSE 57543
// begin index := rand ( 1 , array ) ;
57468: LD_ADDR_VAR 0 4
57472: PUSH
57473: LD_INT 1
57475: PPUSH
57476: LD_VAR 0 1
57480: PPUSH
57481: CALL_OW 12
57485: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57486: LD_ADDR_VAR 0 2
57490: PUSH
57491: LD_VAR 0 2
57495: PPUSH
57496: LD_VAR 0 2
57500: PUSH
57501: LD_INT 1
57503: PLUS
57504: PPUSH
57505: LD_VAR 0 1
57509: PUSH
57510: LD_VAR 0 4
57514: ARRAY
57515: PPUSH
57516: CALL_OW 2
57520: ST_TO_ADDR
// array := Delete ( array , index ) ;
57521: LD_ADDR_VAR 0 1
57525: PUSH
57526: LD_VAR 0 1
57530: PPUSH
57531: LD_VAR 0 4
57535: PPUSH
57536: CALL_OW 3
57540: ST_TO_ADDR
// end ;
57541: GO 57465
57543: POP
57544: POP
// end ;
57545: LD_VAR 0 2
57549: RET
// export function GetBaseMaterials ( base ) ; begin
57550: LD_INT 0
57552: PPUSH
// result := [ 0 , 0 , 0 ] ;
57553: LD_ADDR_VAR 0 2
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 0
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: ST_TO_ADDR
// if not base then
57572: LD_VAR 0 1
57576: NOT
57577: IFFALSE 57581
// exit ;
57579: GO 57630
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57581: LD_ADDR_VAR 0 2
57585: PUSH
57586: LD_VAR 0 1
57590: PPUSH
57591: LD_INT 1
57593: PPUSH
57594: CALL_OW 275
57598: PUSH
57599: LD_VAR 0 1
57603: PPUSH
57604: LD_INT 2
57606: PPUSH
57607: CALL_OW 275
57611: PUSH
57612: LD_VAR 0 1
57616: PPUSH
57617: LD_INT 3
57619: PPUSH
57620: CALL_OW 275
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// end ;
57630: LD_VAR 0 2
57634: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57635: LD_INT 0
57637: PPUSH
57638: PPUSH
// result := array ;
57639: LD_ADDR_VAR 0 3
57643: PUSH
57644: LD_VAR 0 1
57648: ST_TO_ADDR
// if size >= result then
57649: LD_VAR 0 2
57653: PUSH
57654: LD_VAR 0 3
57658: GREATEREQUAL
57659: IFFALSE 57663
// exit ;
57661: GO 57713
// if size then
57663: LD_VAR 0 2
57667: IFFALSE 57713
// for i := array downto size do
57669: LD_ADDR_VAR 0 4
57673: PUSH
57674: DOUBLE
57675: LD_VAR 0 1
57679: INC
57680: ST_TO_ADDR
57681: LD_VAR 0 2
57685: PUSH
57686: FOR_DOWNTO
57687: IFFALSE 57711
// result := Delete ( result , result ) ;
57689: LD_ADDR_VAR 0 3
57693: PUSH
57694: LD_VAR 0 3
57698: PPUSH
57699: LD_VAR 0 3
57703: PPUSH
57704: CALL_OW 3
57708: ST_TO_ADDR
57709: GO 57686
57711: POP
57712: POP
// end ;
57713: LD_VAR 0 3
57717: RET
// export function ComExit ( unit ) ; var tmp ; begin
57718: LD_INT 0
57720: PPUSH
57721: PPUSH
// if not IsInUnit ( unit ) then
57722: LD_VAR 0 1
57726: PPUSH
57727: CALL_OW 310
57731: NOT
57732: IFFALSE 57736
// exit ;
57734: GO 57796
// tmp := IsInUnit ( unit ) ;
57736: LD_ADDR_VAR 0 3
57740: PUSH
57741: LD_VAR 0 1
57745: PPUSH
57746: CALL_OW 310
57750: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57751: LD_VAR 0 3
57755: PPUSH
57756: CALL_OW 247
57760: PUSH
57761: LD_INT 2
57763: EQUAL
57764: IFFALSE 57777
// ComExitVehicle ( unit ) else
57766: LD_VAR 0 1
57770: PPUSH
57771: CALL_OW 121
57775: GO 57786
// ComExitBuilding ( unit ) ;
57777: LD_VAR 0 1
57781: PPUSH
57782: CALL_OW 122
// result := tmp ;
57786: LD_ADDR_VAR 0 2
57790: PUSH
57791: LD_VAR 0 3
57795: ST_TO_ADDR
// end ;
57796: LD_VAR 0 2
57800: RET
// export function ComExitAll ( units ) ; var i ; begin
57801: LD_INT 0
57803: PPUSH
57804: PPUSH
// if not units then
57805: LD_VAR 0 1
57809: NOT
57810: IFFALSE 57814
// exit ;
57812: GO 57840
// for i in units do
57814: LD_ADDR_VAR 0 3
57818: PUSH
57819: LD_VAR 0 1
57823: PUSH
57824: FOR_IN
57825: IFFALSE 57838
// ComExit ( i ) ;
57827: LD_VAR 0 3
57831: PPUSH
57832: CALL 57718 0 1
57836: GO 57824
57838: POP
57839: POP
// end ;
57840: LD_VAR 0 2
57844: RET
// export function ResetHc ; begin
57845: LD_INT 0
57847: PPUSH
// InitHc ;
57848: CALL_OW 19
// hc_importance := 0 ;
57852: LD_ADDR_OWVAR 32
57856: PUSH
57857: LD_INT 0
57859: ST_TO_ADDR
// end ;
57860: LD_VAR 0 1
57864: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57865: LD_INT 0
57867: PPUSH
57868: PPUSH
57869: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57870: LD_ADDR_VAR 0 6
57874: PUSH
57875: LD_VAR 0 1
57879: PUSH
57880: LD_VAR 0 3
57884: PLUS
57885: PUSH
57886: LD_INT 2
57888: DIV
57889: ST_TO_ADDR
// if _x < 0 then
57890: LD_VAR 0 6
57894: PUSH
57895: LD_INT 0
57897: LESS
57898: IFFALSE 57915
// _x := _x * - 1 ;
57900: LD_ADDR_VAR 0 6
57904: PUSH
57905: LD_VAR 0 6
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: MUL
57914: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57915: LD_ADDR_VAR 0 7
57919: PUSH
57920: LD_VAR 0 2
57924: PUSH
57925: LD_VAR 0 4
57929: PLUS
57930: PUSH
57931: LD_INT 2
57933: DIV
57934: ST_TO_ADDR
// if _y < 0 then
57935: LD_VAR 0 7
57939: PUSH
57940: LD_INT 0
57942: LESS
57943: IFFALSE 57960
// _y := _y * - 1 ;
57945: LD_ADDR_VAR 0 7
57949: PUSH
57950: LD_VAR 0 7
57954: PUSH
57955: LD_INT 1
57957: NEG
57958: MUL
57959: ST_TO_ADDR
// result := [ _x , _y ] ;
57960: LD_ADDR_VAR 0 5
57964: PUSH
57965: LD_VAR 0 6
57969: PUSH
57970: LD_VAR 0 7
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: ST_TO_ADDR
// end ;
57979: LD_VAR 0 5
57983: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57984: LD_INT 0
57986: PPUSH
57987: PPUSH
57988: PPUSH
57989: PPUSH
// task := GetTaskList ( unit ) ;
57990: LD_ADDR_VAR 0 7
57994: PUSH
57995: LD_VAR 0 1
57999: PPUSH
58000: CALL_OW 437
58004: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58005: LD_VAR 0 7
58009: NOT
58010: IFFALSE 58029
58012: PUSH
58013: LD_VAR 0 1
58017: PPUSH
58018: LD_VAR 0 2
58022: PPUSH
58023: CALL_OW 308
58027: NOT
58028: AND
58029: IFFALSE 58033
// exit ;
58031: GO 58151
// if IsInArea ( unit , area ) then
58033: LD_VAR 0 1
58037: PPUSH
58038: LD_VAR 0 2
58042: PPUSH
58043: CALL_OW 308
58047: IFFALSE 58065
// begin ComMoveToArea ( unit , goAway ) ;
58049: LD_VAR 0 1
58053: PPUSH
58054: LD_VAR 0 3
58058: PPUSH
58059: CALL_OW 113
// exit ;
58063: GO 58151
// end ; if task [ 1 ] [ 1 ] <> M then
58065: LD_VAR 0 7
58069: PUSH
58070: LD_INT 1
58072: ARRAY
58073: PUSH
58074: LD_INT 1
58076: ARRAY
58077: PUSH
58078: LD_STRING M
58080: NONEQUAL
58081: IFFALSE 58085
// exit ;
58083: GO 58151
// x := task [ 1 ] [ 2 ] ;
58085: LD_ADDR_VAR 0 5
58089: PUSH
58090: LD_VAR 0 7
58094: PUSH
58095: LD_INT 1
58097: ARRAY
58098: PUSH
58099: LD_INT 2
58101: ARRAY
58102: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58103: LD_ADDR_VAR 0 6
58107: PUSH
58108: LD_VAR 0 7
58112: PUSH
58113: LD_INT 1
58115: ARRAY
58116: PUSH
58117: LD_INT 3
58119: ARRAY
58120: ST_TO_ADDR
// if InArea ( x , y , area ) then
58121: LD_VAR 0 5
58125: PPUSH
58126: LD_VAR 0 6
58130: PPUSH
58131: LD_VAR 0 2
58135: PPUSH
58136: CALL_OW 309
58140: IFFALSE 58151
// ComStop ( unit ) ;
58142: LD_VAR 0 1
58146: PPUSH
58147: CALL_OW 141
// end ;
58151: LD_VAR 0 4
58155: RET
// export function Abs ( value ) ; begin
58156: LD_INT 0
58158: PPUSH
// result := value ;
58159: LD_ADDR_VAR 0 2
58163: PUSH
58164: LD_VAR 0 1
58168: ST_TO_ADDR
// if value < 0 then
58169: LD_VAR 0 1
58173: PUSH
58174: LD_INT 0
58176: LESS
58177: IFFALSE 58194
// result := value * - 1 ;
58179: LD_ADDR_VAR 0 2
58183: PUSH
58184: LD_VAR 0 1
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: MUL
58193: ST_TO_ADDR
// end ;
58194: LD_VAR 0 2
58198: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58199: LD_INT 0
58201: PPUSH
58202: PPUSH
58203: PPUSH
58204: PPUSH
58205: PPUSH
58206: PPUSH
58207: PPUSH
58208: PPUSH
// if not unit or not building then
58209: LD_VAR 0 1
58213: NOT
58214: IFTRUE 58223
58216: PUSH
58217: LD_VAR 0 2
58221: NOT
58222: OR
58223: IFFALSE 58227
// exit ;
58225: GO 58455
// x := GetX ( building ) ;
58227: LD_ADDR_VAR 0 4
58231: PUSH
58232: LD_VAR 0 2
58236: PPUSH
58237: CALL_OW 250
58241: ST_TO_ADDR
// y := GetY ( building ) ;
58242: LD_ADDR_VAR 0 6
58246: PUSH
58247: LD_VAR 0 2
58251: PPUSH
58252: CALL_OW 251
58256: ST_TO_ADDR
// d := GetDir ( building ) ;
58257: LD_ADDR_VAR 0 8
58261: PUSH
58262: LD_VAR 0 2
58266: PPUSH
58267: CALL_OW 254
58271: ST_TO_ADDR
// r := 4 ;
58272: LD_ADDR_VAR 0 9
58276: PUSH
58277: LD_INT 4
58279: ST_TO_ADDR
// for i := 1 to 5 do
58280: LD_ADDR_VAR 0 10
58284: PUSH
58285: DOUBLE
58286: LD_INT 1
58288: DEC
58289: ST_TO_ADDR
58290: LD_INT 5
58292: PUSH
58293: FOR_TO
58294: IFFALSE 58453
// begin _x := ShiftX ( x , d , r + i ) ;
58296: LD_ADDR_VAR 0 5
58300: PUSH
58301: LD_VAR 0 4
58305: PPUSH
58306: LD_VAR 0 8
58310: PPUSH
58311: LD_VAR 0 9
58315: PUSH
58316: LD_VAR 0 10
58320: PLUS
58321: PPUSH
58322: CALL_OW 272
58326: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58327: LD_ADDR_VAR 0 7
58331: PUSH
58332: LD_VAR 0 6
58336: PPUSH
58337: LD_VAR 0 8
58341: PPUSH
58342: LD_VAR 0 9
58346: PUSH
58347: LD_VAR 0 10
58351: PLUS
58352: PPUSH
58353: CALL_OW 273
58357: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58358: LD_VAR 0 5
58362: PPUSH
58363: LD_VAR 0 7
58367: PPUSH
58368: CALL_OW 488
58372: IFFALSE 58407
58374: PUSH
58375: LD_VAR 0 5
58379: PPUSH
58380: LD_VAR 0 7
58384: PPUSH
58385: CALL_OW 428
58389: PPUSH
58390: CALL_OW 247
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: IN
58405: NOT
58406: AND
58407: IFFALSE 58451
// begin ComMoveXY ( unit , _x , _y ) ;
58409: LD_VAR 0 1
58413: PPUSH
58414: LD_VAR 0 5
58418: PPUSH
58419: LD_VAR 0 7
58423: PPUSH
58424: CALL_OW 111
// result := [ _x , _y ] ;
58428: LD_ADDR_VAR 0 3
58432: PUSH
58433: LD_VAR 0 5
58437: PUSH
58438: LD_VAR 0 7
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: ST_TO_ADDR
// exit ;
58447: POP
58448: POP
58449: GO 58455
// end ; end ;
58451: GO 58293
58453: POP
58454: POP
// end ;
58455: LD_VAR 0 3
58459: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58460: LD_INT 0
58462: PPUSH
58463: PPUSH
58464: PPUSH
// result := 0 ;
58465: LD_ADDR_VAR 0 3
58469: PUSH
58470: LD_INT 0
58472: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58473: LD_VAR 0 1
58477: PUSH
58478: LD_INT 0
58480: LESS
58481: IFTRUE 58493
58483: PUSH
58484: LD_VAR 0 1
58488: PUSH
58489: LD_INT 8
58491: GREATER
58492: OR
58493: IFTRUE 58505
58495: PUSH
58496: LD_VAR 0 2
58500: PUSH
58501: LD_INT 0
58503: LESS
58504: OR
58505: IFTRUE 58517
58507: PUSH
58508: LD_VAR 0 2
58512: PUSH
58513: LD_INT 8
58515: GREATER
58516: OR
58517: IFFALSE 58521
// exit ;
58519: GO 58596
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58521: LD_ADDR_VAR 0 4
58525: PUSH
58526: LD_INT 22
58528: PUSH
58529: LD_VAR 0 2
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PPUSH
58538: CALL_OW 69
58542: PUSH
58543: FOR_IN
58544: IFFALSE 58594
// begin un := UnitShoot ( i ) ;
58546: LD_ADDR_VAR 0 5
58550: PUSH
58551: LD_VAR 0 4
58555: PPUSH
58556: CALL_OW 504
58560: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58561: LD_VAR 0 5
58565: PPUSH
58566: CALL_OW 255
58570: PUSH
58571: LD_VAR 0 1
58575: EQUAL
58576: IFFALSE 58592
// begin result := un ;
58578: LD_ADDR_VAR 0 3
58582: PUSH
58583: LD_VAR 0 5
58587: ST_TO_ADDR
// exit ;
58588: POP
58589: POP
58590: GO 58596
// end ; end ;
58592: GO 58543
58594: POP
58595: POP
// end ;
58596: LD_VAR 0 3
58600: RET
// export function GetCargoBay ( units ) ; begin
58601: LD_INT 0
58603: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58604: LD_ADDR_VAR 0 2
58608: PUSH
58609: LD_VAR 0 1
58613: PPUSH
58614: LD_INT 2
58616: PUSH
58617: LD_INT 34
58619: PUSH
58620: LD_INT 12
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 34
58629: PUSH
58630: LD_INT 51
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 34
58639: PUSH
58640: LD_INT 32
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 34
58649: PUSH
58650: LD_INT 89
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: PPUSH
58664: CALL_OW 72
58668: ST_TO_ADDR
// end ;
58669: LD_VAR 0 2
58673: RET
// export function Negate ( value ) ; begin
58674: LD_INT 0
58676: PPUSH
// result := not value ;
58677: LD_ADDR_VAR 0 2
58681: PUSH
58682: LD_VAR 0 1
58686: NOT
58687: ST_TO_ADDR
// end ;
58688: LD_VAR 0 2
58692: RET
// export function Inc ( value ) ; begin
58693: LD_INT 0
58695: PPUSH
// result := value + 1 ;
58696: LD_ADDR_VAR 0 2
58700: PUSH
58701: LD_VAR 0 1
58705: PUSH
58706: LD_INT 1
58708: PLUS
58709: ST_TO_ADDR
// end ;
58710: LD_VAR 0 2
58714: RET
// export function Dec ( value ) ; begin
58715: LD_INT 0
58717: PPUSH
// result := value - 1 ;
58718: LD_ADDR_VAR 0 2
58722: PUSH
58723: LD_VAR 0 1
58727: PUSH
58728: LD_INT 1
58730: MINUS
58731: ST_TO_ADDR
// end ;
58732: LD_VAR 0 2
58736: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
58737: LD_INT 0
58739: PPUSH
58740: PPUSH
58741: PPUSH
58742: PPUSH
58743: PPUSH
58744: PPUSH
58745: PPUSH
58746: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
58747: LD_VAR 0 1
58751: PPUSH
58752: LD_VAR 0 2
58756: PPUSH
58757: CALL_OW 488
58761: NOT
58762: IFTRUE 58781
58764: PUSH
58765: LD_VAR 0 3
58769: PPUSH
58770: LD_VAR 0 4
58774: PPUSH
58775: CALL_OW 488
58779: NOT
58780: OR
58781: IFFALSE 58794
// begin result := - 1 ;
58783: LD_ADDR_VAR 0 5
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: ST_TO_ADDR
// exit ;
58792: GO 59029
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58794: LD_ADDR_VAR 0 12
58798: PUSH
58799: LD_VAR 0 1
58803: PPUSH
58804: LD_VAR 0 2
58808: PPUSH
58809: LD_VAR 0 3
58813: PPUSH
58814: LD_VAR 0 4
58818: PPUSH
58819: CALL 57865 0 4
58823: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58824: LD_ADDR_VAR 0 11
58828: PUSH
58829: LD_VAR 0 1
58833: PPUSH
58834: LD_VAR 0 2
58838: PPUSH
58839: LD_VAR 0 12
58843: PUSH
58844: LD_INT 1
58846: ARRAY
58847: PPUSH
58848: LD_VAR 0 12
58852: PUSH
58853: LD_INT 2
58855: ARRAY
58856: PPUSH
58857: CALL_OW 298
58861: ST_TO_ADDR
// distance := 9999 ;
58862: LD_ADDR_VAR 0 10
58866: PUSH
58867: LD_INT 9999
58869: ST_TO_ADDR
// for i := 0 to 5 do
58870: LD_ADDR_VAR 0 6
58874: PUSH
58875: DOUBLE
58876: LD_INT 0
58878: DEC
58879: ST_TO_ADDR
58880: LD_INT 5
58882: PUSH
58883: FOR_TO
58884: IFFALSE 59027
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58886: LD_ADDR_VAR 0 7
58890: PUSH
58891: LD_VAR 0 1
58895: PPUSH
58896: LD_VAR 0 6
58900: PPUSH
58901: LD_VAR 0 11
58905: PPUSH
58906: CALL_OW 272
58910: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
58911: LD_ADDR_VAR 0 8
58915: PUSH
58916: LD_VAR 0 2
58920: PPUSH
58921: LD_VAR 0 6
58925: PPUSH
58926: LD_VAR 0 11
58930: PPUSH
58931: CALL_OW 273
58935: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58936: LD_VAR 0 7
58940: PPUSH
58941: LD_VAR 0 8
58945: PPUSH
58946: CALL_OW 488
58950: NOT
58951: IFFALSE 58955
// continue ;
58953: GO 58883
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
58955: LD_ADDR_VAR 0 9
58959: PUSH
58960: LD_VAR 0 12
58964: PUSH
58965: LD_INT 1
58967: ARRAY
58968: PPUSH
58969: LD_VAR 0 12
58973: PUSH
58974: LD_INT 2
58976: ARRAY
58977: PPUSH
58978: LD_VAR 0 7
58982: PPUSH
58983: LD_VAR 0 8
58987: PPUSH
58988: CALL_OW 298
58992: ST_TO_ADDR
// if tmp < distance then
58993: LD_VAR 0 9
58997: PUSH
58998: LD_VAR 0 10
59002: LESS
59003: IFFALSE 59025
// begin result := i ;
59005: LD_ADDR_VAR 0 5
59009: PUSH
59010: LD_VAR 0 6
59014: ST_TO_ADDR
// distance := tmp ;
59015: LD_ADDR_VAR 0 10
59019: PUSH
59020: LD_VAR 0 9
59024: ST_TO_ADDR
// end ; end ;
59025: GO 58883
59027: POP
59028: POP
// end ;
59029: LD_VAR 0 5
59033: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59034: LD_INT 0
59036: PPUSH
59037: PPUSH
// if not driver or not IsInUnit ( driver ) then
59038: LD_VAR 0 1
59042: NOT
59043: IFTRUE 59057
59045: PUSH
59046: LD_VAR 0 1
59050: PPUSH
59051: CALL_OW 310
59055: NOT
59056: OR
59057: IFFALSE 59061
// exit ;
59059: GO 59151
// vehicle := IsInUnit ( driver ) ;
59061: LD_ADDR_VAR 0 3
59065: PUSH
59066: LD_VAR 0 1
59070: PPUSH
59071: CALL_OW 310
59075: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59076: LD_VAR 0 1
59080: PPUSH
59081: LD_STRING \
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: LD_INT 0
59095: PUSH
59096: LD_INT 0
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: PUSH
59111: LD_STRING E
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: LD_VAR 0 3
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PPUSH
59147: CALL_OW 446
// end ;
59151: LD_VAR 0 2
59155: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59156: LD_INT 0
59158: PPUSH
59159: PPUSH
// if not driver or not IsInUnit ( driver ) then
59160: LD_VAR 0 1
59164: NOT
59165: IFTRUE 59179
59167: PUSH
59168: LD_VAR 0 1
59172: PPUSH
59173: CALL_OW 310
59177: NOT
59178: OR
59179: IFFALSE 59183
// exit ;
59181: GO 59273
// vehicle := IsInUnit ( driver ) ;
59183: LD_ADDR_VAR 0 3
59187: PUSH
59188: LD_VAR 0 1
59192: PPUSH
59193: CALL_OW 310
59197: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59198: LD_VAR 0 1
59202: PPUSH
59203: LD_STRING \
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 0
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 0
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: PUSH
59233: LD_STRING E
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_VAR 0 3
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PPUSH
59269: CALL_OW 447
// end ;
59273: LD_VAR 0 2
59277: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59278: LD_INT 0
59280: PPUSH
59281: PPUSH
59282: PPUSH
// tmp := [ ] ;
59283: LD_ADDR_VAR 0 5
59287: PUSH
59288: EMPTY
59289: ST_TO_ADDR
// for i in units do
59290: LD_ADDR_VAR 0 4
59294: PUSH
59295: LD_VAR 0 1
59299: PUSH
59300: FOR_IN
59301: IFFALSE 59339
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59303: LD_ADDR_VAR 0 5
59307: PUSH
59308: LD_VAR 0 5
59312: PPUSH
59313: LD_VAR 0 5
59317: PUSH
59318: LD_INT 1
59320: PLUS
59321: PPUSH
59322: LD_VAR 0 4
59326: PPUSH
59327: CALL_OW 256
59331: PPUSH
59332: CALL_OW 2
59336: ST_TO_ADDR
59337: GO 59300
59339: POP
59340: POP
// if not tmp then
59341: LD_VAR 0 5
59345: NOT
59346: IFFALSE 59350
// exit ;
59348: GO 59398
// if asc then
59350: LD_VAR 0 2
59354: IFFALSE 59378
// result := SortListByListAsc ( units , tmp ) else
59356: LD_ADDR_VAR 0 3
59360: PUSH
59361: LD_VAR 0 1
59365: PPUSH
59366: LD_VAR 0 5
59370: PPUSH
59371: CALL_OW 76
59375: ST_TO_ADDR
59376: GO 59398
// result := SortListByListDesc ( units , tmp ) ;
59378: LD_ADDR_VAR 0 3
59382: PUSH
59383: LD_VAR 0 1
59387: PPUSH
59388: LD_VAR 0 5
59392: PPUSH
59393: CALL_OW 77
59397: ST_TO_ADDR
// end ;
59398: LD_VAR 0 3
59402: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59403: LD_INT 0
59405: PPUSH
59406: PPUSH
// task := GetTaskList ( mech ) ;
59407: LD_ADDR_VAR 0 4
59411: PUSH
59412: LD_VAR 0 1
59416: PPUSH
59417: CALL_OW 437
59421: ST_TO_ADDR
// if not task then
59422: LD_VAR 0 4
59426: NOT
59427: IFFALSE 59431
// exit ;
59429: GO 59475
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59431: LD_ADDR_VAR 0 3
59435: PUSH
59436: LD_VAR 0 4
59440: PUSH
59441: LD_INT 1
59443: ARRAY
59444: PUSH
59445: LD_INT 1
59447: ARRAY
59448: PUSH
59449: LD_STRING r
59451: EQUAL
59452: IFFALSE 59474
59454: PUSH
59455: LD_VAR 0 4
59459: PUSH
59460: LD_INT 1
59462: ARRAY
59463: PUSH
59464: LD_INT 4
59466: ARRAY
59467: PUSH
59468: LD_VAR 0 2
59472: EQUAL
59473: AND
59474: ST_TO_ADDR
// end ;
59475: LD_VAR 0 3
59479: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59480: LD_INT 0
59482: PPUSH
// SetDir ( unit , d ) ;
59483: LD_VAR 0 1
59487: PPUSH
59488: LD_VAR 0 4
59492: PPUSH
59493: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
59497: LD_ADDR_VAR 0 6
59501: PUSH
59502: LD_VAR 0 1
59506: PPUSH
59507: LD_VAR 0 2
59511: PPUSH
59512: LD_VAR 0 3
59516: PPUSH
59517: LD_VAR 0 5
59521: PPUSH
59522: CALL_OW 48
59526: ST_TO_ADDR
// end ;
59527: LD_VAR 0 6
59531: RET
// export function ToNaturalNumber ( number ) ; begin
59532: LD_INT 0
59534: PPUSH
// result := number div 1 ;
59535: LD_ADDR_VAR 0 2
59539: PUSH
59540: LD_VAR 0 1
59544: PUSH
59545: LD_INT 1
59547: DIV
59548: ST_TO_ADDR
// if number < 0 then
59549: LD_VAR 0 1
59553: PUSH
59554: LD_INT 0
59556: LESS
59557: IFFALSE 59567
// result := 0 ;
59559: LD_ADDR_VAR 0 2
59563: PUSH
59564: LD_INT 0
59566: ST_TO_ADDR
// end ;
59567: LD_VAR 0 2
59571: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
59572: LD_INT 0
59574: PPUSH
59575: PPUSH
59576: PPUSH
// if not buildings then
59577: LD_VAR 0 1
59581: NOT
59582: IFFALSE 59586
// exit ;
59584: GO 59701
// tmp := [ ] ;
59586: LD_ADDR_VAR 0 5
59590: PUSH
59591: EMPTY
59592: ST_TO_ADDR
// for b in buildings do
59593: LD_ADDR_VAR 0 4
59597: PUSH
59598: LD_VAR 0 1
59602: PUSH
59603: FOR_IN
59604: IFFALSE 59642
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
59606: LD_ADDR_VAR 0 5
59610: PUSH
59611: LD_VAR 0 5
59615: PPUSH
59616: LD_VAR 0 5
59620: PUSH
59621: LD_INT 1
59623: PLUS
59624: PPUSH
59625: LD_VAR 0 4
59629: PPUSH
59630: CALL_OW 266
59634: PPUSH
59635: CALL_OW 1
59639: ST_TO_ADDR
59640: GO 59603
59642: POP
59643: POP
// if not tmp then
59644: LD_VAR 0 5
59648: NOT
59649: IFFALSE 59653
// exit ;
59651: GO 59701
// if asc then
59653: LD_VAR 0 2
59657: IFFALSE 59681
// result := SortListByListAsc ( buildings , tmp ) else
59659: LD_ADDR_VAR 0 3
59663: PUSH
59664: LD_VAR 0 1
59668: PPUSH
59669: LD_VAR 0 5
59673: PPUSH
59674: CALL_OW 76
59678: ST_TO_ADDR
59679: GO 59701
// result := SortListByListDesc ( buildings , tmp ) ;
59681: LD_ADDR_VAR 0 3
59685: PUSH
59686: LD_VAR 0 1
59690: PPUSH
59691: LD_VAR 0 5
59695: PPUSH
59696: CALL_OW 77
59700: ST_TO_ADDR
// end ;
59701: LD_VAR 0 3
59705: RET
// export function SortByClass ( units , class ) ; var un ; begin
59706: LD_INT 0
59708: PPUSH
59709: PPUSH
// if not units or not class then
59710: LD_VAR 0 1
59714: NOT
59715: IFTRUE 59724
59717: PUSH
59718: LD_VAR 0 2
59722: NOT
59723: OR
59724: IFFALSE 59728
// exit ;
59726: GO 59823
// result := [ ] ;
59728: LD_ADDR_VAR 0 3
59732: PUSH
59733: EMPTY
59734: ST_TO_ADDR
// for un in units do
59735: LD_ADDR_VAR 0 4
59739: PUSH
59740: LD_VAR 0 1
59744: PUSH
59745: FOR_IN
59746: IFFALSE 59821
// if GetClass ( un ) = class then
59748: LD_VAR 0 4
59752: PPUSH
59753: CALL_OW 257
59757: PUSH
59758: LD_VAR 0 2
59762: EQUAL
59763: IFFALSE 59790
// result := Insert ( result , 1 , un ) else
59765: LD_ADDR_VAR 0 3
59769: PUSH
59770: LD_VAR 0 3
59774: PPUSH
59775: LD_INT 1
59777: PPUSH
59778: LD_VAR 0 4
59782: PPUSH
59783: CALL_OW 2
59787: ST_TO_ADDR
59788: GO 59819
// result := Replace ( result , result + 1 , un ) ;
59790: LD_ADDR_VAR 0 3
59794: PUSH
59795: LD_VAR 0 3
59799: PPUSH
59800: LD_VAR 0 3
59804: PUSH
59805: LD_INT 1
59807: PLUS
59808: PPUSH
59809: LD_VAR 0 4
59813: PPUSH
59814: CALL_OW 1
59818: ST_TO_ADDR
59819: GO 59745
59821: POP
59822: POP
// end ;
59823: LD_VAR 0 3
59827: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59828: LD_INT 0
59830: PPUSH
59831: PPUSH
59832: PPUSH
59833: PPUSH
59834: PPUSH
59835: PPUSH
59836: PPUSH
// result := [ ] ;
59837: LD_ADDR_VAR 0 4
59841: PUSH
59842: EMPTY
59843: ST_TO_ADDR
// if x - r < 0 then
59844: LD_VAR 0 1
59848: PUSH
59849: LD_VAR 0 3
59853: MINUS
59854: PUSH
59855: LD_INT 0
59857: LESS
59858: IFFALSE 59870
// min_x := 0 else
59860: LD_ADDR_VAR 0 8
59864: PUSH
59865: LD_INT 0
59867: ST_TO_ADDR
59868: GO 59886
// min_x := x - r ;
59870: LD_ADDR_VAR 0 8
59874: PUSH
59875: LD_VAR 0 1
59879: PUSH
59880: LD_VAR 0 3
59884: MINUS
59885: ST_TO_ADDR
// if y - r < 0 then
59886: LD_VAR 0 2
59890: PUSH
59891: LD_VAR 0 3
59895: MINUS
59896: PUSH
59897: LD_INT 0
59899: LESS
59900: IFFALSE 59912
// min_y := 0 else
59902: LD_ADDR_VAR 0 7
59906: PUSH
59907: LD_INT 0
59909: ST_TO_ADDR
59910: GO 59928
// min_y := y - r ;
59912: LD_ADDR_VAR 0 7
59916: PUSH
59917: LD_VAR 0 2
59921: PUSH
59922: LD_VAR 0 3
59926: MINUS
59927: ST_TO_ADDR
// max_x := x + r ;
59928: LD_ADDR_VAR 0 9
59932: PUSH
59933: LD_VAR 0 1
59937: PUSH
59938: LD_VAR 0 3
59942: PLUS
59943: ST_TO_ADDR
// max_y := y + r ;
59944: LD_ADDR_VAR 0 10
59948: PUSH
59949: LD_VAR 0 2
59953: PUSH
59954: LD_VAR 0 3
59958: PLUS
59959: ST_TO_ADDR
// for _x = min_x to max_x do
59960: LD_ADDR_VAR 0 5
59964: PUSH
59965: DOUBLE
59966: LD_VAR 0 8
59970: DEC
59971: ST_TO_ADDR
59972: LD_VAR 0 9
59976: PUSH
59977: FOR_TO
59978: IFFALSE 60079
// for _y = min_y to max_y do
59980: LD_ADDR_VAR 0 6
59984: PUSH
59985: DOUBLE
59986: LD_VAR 0 7
59990: DEC
59991: ST_TO_ADDR
59992: LD_VAR 0 10
59996: PUSH
59997: FOR_TO
59998: IFFALSE 60075
// begin if not ValidHex ( _x , _y ) then
60000: LD_VAR 0 5
60004: PPUSH
60005: LD_VAR 0 6
60009: PPUSH
60010: CALL_OW 488
60014: NOT
60015: IFFALSE 60019
// continue ;
60017: GO 59997
// if GetResourceTypeXY ( _x , _y ) then
60019: LD_VAR 0 5
60023: PPUSH
60024: LD_VAR 0 6
60028: PPUSH
60029: CALL_OW 283
60033: IFFALSE 60073
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60035: LD_ADDR_VAR 0 4
60039: PUSH
60040: LD_VAR 0 4
60044: PPUSH
60045: LD_VAR 0 4
60049: PUSH
60050: LD_INT 1
60052: PLUS
60053: PPUSH
60054: LD_VAR 0 5
60058: PUSH
60059: LD_VAR 0 6
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PPUSH
60068: CALL_OW 1
60072: ST_TO_ADDR
// end ;
60073: GO 59997
60075: POP
60076: POP
60077: GO 59977
60079: POP
60080: POP
// end ;
60081: LD_VAR 0 4
60085: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60086: LD_INT 0
60088: PPUSH
60089: PPUSH
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
60094: PPUSH
60095: PPUSH
// if not units then
60096: LD_VAR 0 1
60100: NOT
60101: IFFALSE 60105
// exit ;
60103: GO 60637
// result := UnitFilter ( units , [ f_ok ] ) ;
60105: LD_ADDR_VAR 0 3
60109: PUSH
60110: LD_VAR 0 1
60114: PPUSH
60115: LD_INT 50
60117: PUSH
60118: EMPTY
60119: LIST
60120: PPUSH
60121: CALL_OW 72
60125: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60126: LD_ADDR_VAR 0 8
60130: PUSH
60131: LD_VAR 0 1
60135: PUSH
60136: LD_INT 1
60138: ARRAY
60139: PPUSH
60140: CALL_OW 255
60144: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
60145: LD_ADDR_VAR 0 10
60149: PUSH
60150: LD_INT 29
60152: PUSH
60153: LD_INT 91
60155: PUSH
60156: LD_INT 49
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: LIST
60163: ST_TO_ADDR
// if not result then
60164: LD_VAR 0 3
60168: NOT
60169: IFFALSE 60173
// exit ;
60171: GO 60637
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60173: LD_ADDR_VAR 0 5
60177: PUSH
60178: LD_INT 81
60180: PUSH
60181: LD_VAR 0 8
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PPUSH
60190: CALL_OW 69
60194: ST_TO_ADDR
// for i in result do
60195: LD_ADDR_VAR 0 4
60199: PUSH
60200: LD_VAR 0 3
60204: PUSH
60205: FOR_IN
60206: IFFALSE 60635
// begin tag := GetTag ( i ) + 1 ;
60208: LD_ADDR_VAR 0 9
60212: PUSH
60213: LD_VAR 0 4
60217: PPUSH
60218: CALL_OW 110
60222: PUSH
60223: LD_INT 1
60225: PLUS
60226: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
60227: LD_ADDR_VAR 0 7
60231: PUSH
60232: LD_VAR 0 4
60236: PPUSH
60237: CALL_OW 250
60241: PPUSH
60242: LD_VAR 0 4
60246: PPUSH
60247: CALL_OW 251
60251: PPUSH
60252: LD_INT 4
60254: PPUSH
60255: CALL 59828 0 3
60259: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
60260: LD_VAR 0 4
60264: PPUSH
60265: CALL_OW 247
60269: PUSH
60270: LD_INT 2
60272: EQUAL
60273: IFFALSE 60285
60275: PUSH
60276: LD_VAR 0 7
60280: PUSH
60281: LD_INT 2
60283: GREATER
60284: AND
60285: IFFALSE 60305
60287: PUSH
60288: LD_VAR 0 4
60292: PPUSH
60293: CALL_OW 264
60297: PUSH
60298: LD_VAR 0 10
60302: IN
60303: NOT
60304: AND
60305: IFFALSE 60344
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60307: LD_VAR 0 4
60311: PPUSH
60312: LD_VAR 0 7
60316: PUSH
60317: LD_INT 1
60319: ARRAY
60320: PUSH
60321: LD_INT 1
60323: ARRAY
60324: PPUSH
60325: LD_VAR 0 7
60329: PUSH
60330: LD_INT 1
60332: ARRAY
60333: PUSH
60334: LD_INT 2
60336: ARRAY
60337: PPUSH
60338: CALL_OW 116
60342: GO 60633
// if path > tag then
60344: LD_VAR 0 2
60348: PUSH
60349: LD_VAR 0 9
60353: GREATER
60354: IFFALSE 60562
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
60356: LD_ADDR_VAR 0 6
60360: PUSH
60361: LD_VAR 0 5
60365: PPUSH
60366: LD_INT 91
60368: PUSH
60369: LD_VAR 0 4
60373: PUSH
60374: LD_INT 8
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: PPUSH
60382: CALL_OW 72
60386: ST_TO_ADDR
// if nearEnemy then
60387: LD_VAR 0 6
60391: IFFALSE 60460
// begin if GetWeapon ( i ) = ru_time_lapser then
60393: LD_VAR 0 4
60397: PPUSH
60398: CALL_OW 264
60402: PUSH
60403: LD_INT 49
60405: EQUAL
60406: IFFALSE 60434
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60408: LD_VAR 0 4
60412: PPUSH
60413: LD_VAR 0 6
60417: PPUSH
60418: LD_VAR 0 4
60422: PPUSH
60423: CALL_OW 74
60427: PPUSH
60428: CALL_OW 112
60432: GO 60458
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
60434: LD_VAR 0 4
60438: PPUSH
60439: LD_VAR 0 6
60443: PPUSH
60444: LD_VAR 0 4
60448: PPUSH
60449: CALL_OW 74
60453: PPUSH
60454: CALL 61718 0 2
// end else
60458: GO 60560
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60460: LD_VAR 0 4
60464: PPUSH
60465: LD_VAR 0 2
60469: PUSH
60470: LD_VAR 0 9
60474: ARRAY
60475: PUSH
60476: LD_INT 1
60478: ARRAY
60479: PPUSH
60480: LD_VAR 0 2
60484: PUSH
60485: LD_VAR 0 9
60489: ARRAY
60490: PUSH
60491: LD_INT 2
60493: ARRAY
60494: PPUSH
60495: CALL_OW 297
60499: PUSH
60500: LD_INT 6
60502: GREATER
60503: IFFALSE 60546
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60505: LD_VAR 0 4
60509: PPUSH
60510: LD_VAR 0 2
60514: PUSH
60515: LD_VAR 0 9
60519: ARRAY
60520: PUSH
60521: LD_INT 1
60523: ARRAY
60524: PPUSH
60525: LD_VAR 0 2
60529: PUSH
60530: LD_VAR 0 9
60534: ARRAY
60535: PUSH
60536: LD_INT 2
60538: ARRAY
60539: PPUSH
60540: CALL_OW 114
60544: GO 60560
// SetTag ( i , tag ) ;
60546: LD_VAR 0 4
60550: PPUSH
60551: LD_VAR 0 9
60555: PPUSH
60556: CALL_OW 109
// end else
60560: GO 60633
// if enemy then
60562: LD_VAR 0 5
60566: IFFALSE 60633
// begin if GetWeapon ( i ) = ru_time_lapser then
60568: LD_VAR 0 4
60572: PPUSH
60573: CALL_OW 264
60577: PUSH
60578: LD_INT 49
60580: EQUAL
60581: IFFALSE 60609
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60583: LD_VAR 0 4
60587: PPUSH
60588: LD_VAR 0 5
60592: PPUSH
60593: LD_VAR 0 4
60597: PPUSH
60598: CALL_OW 74
60602: PPUSH
60603: CALL_OW 112
60607: GO 60633
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60609: LD_VAR 0 4
60613: PPUSH
60614: LD_VAR 0 5
60618: PPUSH
60619: LD_VAR 0 4
60623: PPUSH
60624: CALL_OW 74
60628: PPUSH
60629: CALL 61718 0 2
// end ; end ;
60633: GO 60205
60635: POP
60636: POP
// end ;
60637: LD_VAR 0 3
60641: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60642: LD_INT 0
60644: PPUSH
60645: PPUSH
60646: PPUSH
// if not unit or IsInUnit ( unit ) then
60647: LD_VAR 0 1
60651: NOT
60652: IFTRUE 60665
60654: PUSH
60655: LD_VAR 0 1
60659: PPUSH
60660: CALL_OW 310
60664: OR
60665: IFFALSE 60669
// exit ;
60667: GO 60760
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60669: LD_ADDR_VAR 0 4
60673: PUSH
60674: LD_VAR 0 1
60678: PPUSH
60679: CALL_OW 250
60683: PPUSH
60684: LD_VAR 0 2
60688: PPUSH
60689: LD_INT 1
60691: PPUSH
60692: CALL_OW 272
60696: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60697: LD_ADDR_VAR 0 5
60701: PUSH
60702: LD_VAR 0 1
60706: PPUSH
60707: CALL_OW 251
60711: PPUSH
60712: LD_VAR 0 2
60716: PPUSH
60717: LD_INT 1
60719: PPUSH
60720: CALL_OW 273
60724: ST_TO_ADDR
// if ValidHex ( x , y ) then
60725: LD_VAR 0 4
60729: PPUSH
60730: LD_VAR 0 5
60734: PPUSH
60735: CALL_OW 488
60739: IFFALSE 60760
// ComTurnXY ( unit , x , y ) ;
60741: LD_VAR 0 1
60745: PPUSH
60746: LD_VAR 0 4
60750: PPUSH
60751: LD_VAR 0 5
60755: PPUSH
60756: CALL_OW 118
// end ;
60760: LD_VAR 0 3
60764: RET
// export function SeeUnits ( side , units ) ; var i ; begin
60765: LD_INT 0
60767: PPUSH
60768: PPUSH
// result := false ;
60769: LD_ADDR_VAR 0 3
60773: PUSH
60774: LD_INT 0
60776: ST_TO_ADDR
// if not units then
60777: LD_VAR 0 2
60781: NOT
60782: IFFALSE 60786
// exit ;
60784: GO 60831
// for i in units do
60786: LD_ADDR_VAR 0 4
60790: PUSH
60791: LD_VAR 0 2
60795: PUSH
60796: FOR_IN
60797: IFFALSE 60829
// if See ( side , i ) then
60799: LD_VAR 0 1
60803: PPUSH
60804: LD_VAR 0 4
60808: PPUSH
60809: CALL_OW 292
60813: IFFALSE 60827
// begin result := true ;
60815: LD_ADDR_VAR 0 3
60819: PUSH
60820: LD_INT 1
60822: ST_TO_ADDR
// exit ;
60823: POP
60824: POP
60825: GO 60831
// end ;
60827: GO 60796
60829: POP
60830: POP
// end ;
60831: LD_VAR 0 3
60835: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
60836: LD_INT 0
60838: PPUSH
60839: PPUSH
60840: PPUSH
60841: PPUSH
// if not unit or not points then
60842: LD_VAR 0 1
60846: NOT
60847: IFTRUE 60856
60849: PUSH
60850: LD_VAR 0 2
60854: NOT
60855: OR
60856: IFFALSE 60860
// exit ;
60858: GO 60950
// dist := 99999 ;
60860: LD_ADDR_VAR 0 5
60864: PUSH
60865: LD_INT 99999
60867: ST_TO_ADDR
// for i in points do
60868: LD_ADDR_VAR 0 4
60872: PUSH
60873: LD_VAR 0 2
60877: PUSH
60878: FOR_IN
60879: IFFALSE 60948
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60881: LD_ADDR_VAR 0 6
60885: PUSH
60886: LD_VAR 0 1
60890: PPUSH
60891: LD_VAR 0 4
60895: PUSH
60896: LD_INT 1
60898: ARRAY
60899: PPUSH
60900: LD_VAR 0 4
60904: PUSH
60905: LD_INT 2
60907: ARRAY
60908: PPUSH
60909: CALL_OW 297
60913: ST_TO_ADDR
// if tmpDist < dist then
60914: LD_VAR 0 6
60918: PUSH
60919: LD_VAR 0 5
60923: LESS
60924: IFFALSE 60946
// begin result := i ;
60926: LD_ADDR_VAR 0 3
60930: PUSH
60931: LD_VAR 0 4
60935: ST_TO_ADDR
// dist := tmpDist ;
60936: LD_ADDR_VAR 0 5
60940: PUSH
60941: LD_VAR 0 6
60945: ST_TO_ADDR
// end ; end ;
60946: GO 60878
60948: POP
60949: POP
// end ;
60950: LD_VAR 0 3
60954: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
60955: LD_INT 0
60957: PPUSH
// uc_side := side ;
60958: LD_ADDR_OWVAR 20
60962: PUSH
60963: LD_VAR 0 1
60967: ST_TO_ADDR
// uc_nation := 3 ;
60968: LD_ADDR_OWVAR 21
60972: PUSH
60973: LD_INT 3
60975: ST_TO_ADDR
// vc_chassis := 25 ;
60976: LD_ADDR_OWVAR 37
60980: PUSH
60981: LD_INT 25
60983: ST_TO_ADDR
// vc_engine := engine_siberite ;
60984: LD_ADDR_OWVAR 39
60988: PUSH
60989: LD_INT 3
60991: ST_TO_ADDR
// vc_control := control_computer ;
60992: LD_ADDR_OWVAR 38
60996: PUSH
60997: LD_INT 3
60999: ST_TO_ADDR
// vc_weapon := 59 ;
61000: LD_ADDR_OWVAR 40
61004: PUSH
61005: LD_INT 59
61007: ST_TO_ADDR
// result := CreateVehicle ;
61008: LD_ADDR_VAR 0 5
61012: PUSH
61013: CALL_OW 45
61017: ST_TO_ADDR
// SetDir ( result , d ) ;
61018: LD_VAR 0 5
61022: PPUSH
61023: LD_VAR 0 4
61027: PPUSH
61028: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
61032: LD_VAR 0 5
61036: PPUSH
61037: LD_VAR 0 2
61041: PPUSH
61042: LD_VAR 0 3
61046: PPUSH
61047: LD_INT 0
61049: PPUSH
61050: CALL_OW 48
// end ;
61054: LD_VAR 0 5
61058: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
61059: LD_INT 0
61061: PPUSH
61062: PPUSH
61063: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
61064: LD_ADDR_VAR 0 2
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: LD_INT 0
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
61087: LD_VAR 0 1
61091: NOT
61092: IFTRUE 61125
61094: PUSH
61095: LD_VAR 0 1
61099: PPUSH
61100: CALL_OW 264
61104: PUSH
61105: LD_INT 12
61107: PUSH
61108: LD_INT 51
61110: PUSH
61111: LD_INT 32
61113: PUSH
61114: LD_INT 89
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: IN
61123: NOT
61124: OR
61125: IFFALSE 61129
// exit ;
61127: GO 61227
// for i := 1 to 3 do
61129: LD_ADDR_VAR 0 3
61133: PUSH
61134: DOUBLE
61135: LD_INT 1
61137: DEC
61138: ST_TO_ADDR
61139: LD_INT 3
61141: PUSH
61142: FOR_TO
61143: IFFALSE 61225
// begin tmp := GetCargo ( cargo , i ) ;
61145: LD_ADDR_VAR 0 4
61149: PUSH
61150: LD_VAR 0 1
61154: PPUSH
61155: LD_VAR 0 3
61159: PPUSH
61160: CALL_OW 289
61164: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
61165: LD_ADDR_VAR 0 2
61169: PUSH
61170: LD_VAR 0 2
61174: PPUSH
61175: LD_VAR 0 3
61179: PPUSH
61180: LD_VAR 0 4
61184: PPUSH
61185: CALL_OW 1
61189: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
61190: LD_ADDR_VAR 0 2
61194: PUSH
61195: LD_VAR 0 2
61199: PPUSH
61200: LD_INT 4
61202: PPUSH
61203: LD_VAR 0 2
61207: PUSH
61208: LD_INT 4
61210: ARRAY
61211: PUSH
61212: LD_VAR 0 4
61216: PLUS
61217: PPUSH
61218: CALL_OW 1
61222: ST_TO_ADDR
// end ;
61223: GO 61142
61225: POP
61226: POP
// end ;
61227: LD_VAR 0 2
61231: RET
// export function Length ( array ) ; begin
61232: LD_INT 0
61234: PPUSH
// result := array + 0 ;
61235: LD_ADDR_VAR 0 2
61239: PUSH
61240: LD_VAR 0 1
61244: PUSH
61245: LD_INT 0
61247: PLUS
61248: ST_TO_ADDR
// end ;
61249: LD_VAR 0 2
61253: RET
// export function PrepareArray ( array ) ; begin
61254: LD_INT 0
61256: PPUSH
// result := array diff 0 ;
61257: LD_ADDR_VAR 0 2
61261: PUSH
61262: LD_VAR 0 1
61266: PUSH
61267: LD_INT 0
61269: DIFF
61270: ST_TO_ADDR
// if not result [ 1 ] then
61271: LD_VAR 0 2
61275: PUSH
61276: LD_INT 1
61278: ARRAY
61279: NOT
61280: IFFALSE 61300
// result := Delete ( result , 1 ) ;
61282: LD_ADDR_VAR 0 2
61286: PUSH
61287: LD_VAR 0 2
61291: PPUSH
61292: LD_INT 1
61294: PPUSH
61295: CALL_OW 3
61299: ST_TO_ADDR
// end ;
61300: LD_VAR 0 2
61304: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
61305: LD_INT 0
61307: PPUSH
61308: PPUSH
61309: PPUSH
61310: PPUSH
// sibRocketRange := 25 ;
61311: LD_ADDR_VAR 0 6
61315: PUSH
61316: LD_INT 25
61318: ST_TO_ADDR
// result := false ;
61319: LD_ADDR_VAR 0 4
61323: PUSH
61324: LD_INT 0
61326: ST_TO_ADDR
// for i := 0 to 5 do
61327: LD_ADDR_VAR 0 5
61331: PUSH
61332: DOUBLE
61333: LD_INT 0
61335: DEC
61336: ST_TO_ADDR
61337: LD_INT 5
61339: PUSH
61340: FOR_TO
61341: IFFALSE 61408
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
61343: LD_VAR 0 1
61347: PPUSH
61348: LD_VAR 0 5
61352: PPUSH
61353: LD_VAR 0 6
61357: PPUSH
61358: CALL_OW 272
61362: PPUSH
61363: LD_VAR 0 2
61367: PPUSH
61368: LD_VAR 0 5
61372: PPUSH
61373: LD_VAR 0 6
61377: PPUSH
61378: CALL_OW 273
61382: PPUSH
61383: LD_VAR 0 3
61387: PPUSH
61388: CALL_OW 309
61392: IFFALSE 61406
// begin result := true ;
61394: LD_ADDR_VAR 0 4
61398: PUSH
61399: LD_INT 1
61401: ST_TO_ADDR
// exit ;
61402: POP
61403: POP
61404: GO 61410
// end ;
61406: GO 61340
61408: POP
61409: POP
// end ;
61410: LD_VAR 0 4
61414: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
61415: LD_INT 0
61417: PPUSH
61418: PPUSH
61419: PPUSH
// if btype = b_depot then
61420: LD_VAR 0 2
61424: PUSH
61425: LD_INT 0
61427: EQUAL
61428: IFFALSE 61440
// begin result := true ;
61430: LD_ADDR_VAR 0 3
61434: PUSH
61435: LD_INT 1
61437: ST_TO_ADDR
// exit ;
61438: GO 61560
// end ; pom := GetBase ( depot ) ;
61440: LD_ADDR_VAR 0 4
61444: PUSH
61445: LD_VAR 0 1
61449: PPUSH
61450: CALL_OW 274
61454: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
61455: LD_ADDR_VAR 0 5
61459: PUSH
61460: LD_VAR 0 2
61464: PPUSH
61465: LD_VAR 0 1
61469: PPUSH
61470: CALL_OW 248
61474: PPUSH
61475: CALL_OW 450
61479: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
61480: LD_ADDR_VAR 0 3
61484: PUSH
61485: LD_VAR 0 4
61489: PPUSH
61490: LD_INT 1
61492: PPUSH
61493: CALL_OW 275
61497: PUSH
61498: LD_VAR 0 5
61502: PUSH
61503: LD_INT 1
61505: ARRAY
61506: GREATEREQUAL
61507: IFFALSE 61533
61509: PUSH
61510: LD_VAR 0 4
61514: PPUSH
61515: LD_INT 2
61517: PPUSH
61518: CALL_OW 275
61522: PUSH
61523: LD_VAR 0 5
61527: PUSH
61528: LD_INT 2
61530: ARRAY
61531: GREATEREQUAL
61532: AND
61533: IFFALSE 61559
61535: PUSH
61536: LD_VAR 0 4
61540: PPUSH
61541: LD_INT 3
61543: PPUSH
61544: CALL_OW 275
61548: PUSH
61549: LD_VAR 0 5
61553: PUSH
61554: LD_INT 3
61556: ARRAY
61557: GREATEREQUAL
61558: AND
61559: ST_TO_ADDR
// end ;
61560: LD_VAR 0 3
61564: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
61565: LD_INT 0
61567: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
61568: LD_VAR 0 1
61572: PPUSH
61573: LD_VAR 0 2
61577: PPUSH
61578: LD_INT 0
61580: PPUSH
61581: LD_INT 0
61583: PPUSH
61584: LD_INT 1
61586: PPUSH
61587: LD_INT 0
61589: PPUSH
61590: CALL_OW 587
// end ;
61594: LD_VAR 0 3
61598: RET
// export function CenterOnNow ( unit ) ; begin
61599: LD_INT 0
61601: PPUSH
// result := IsInUnit ( unit ) ;
61602: LD_ADDR_VAR 0 2
61606: PUSH
61607: LD_VAR 0 1
61611: PPUSH
61612: CALL_OW 310
61616: ST_TO_ADDR
// if not result then
61617: LD_VAR 0 2
61621: NOT
61622: IFFALSE 61634
// result := unit ;
61624: LD_ADDR_VAR 0 2
61628: PUSH
61629: LD_VAR 0 1
61633: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
61634: LD_VAR 0 1
61638: PPUSH
61639: CALL_OW 87
// end ;
61643: LD_VAR 0 2
61647: RET
// export function ComMoveHex ( unit , hex ) ; begin
61648: LD_INT 0
61650: PPUSH
// if not hex then
61651: LD_VAR 0 2
61655: NOT
61656: IFFALSE 61660
// exit ;
61658: GO 61713
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
61660: LD_VAR 0 2
61664: PUSH
61665: LD_INT 1
61667: ARRAY
61668: PPUSH
61669: LD_VAR 0 2
61673: PUSH
61674: LD_INT 2
61676: ARRAY
61677: PPUSH
61678: CALL_OW 428
61682: IFFALSE 61686
// exit ;
61684: GO 61713
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
61686: LD_VAR 0 1
61690: PPUSH
61691: LD_VAR 0 2
61695: PUSH
61696: LD_INT 1
61698: ARRAY
61699: PPUSH
61700: LD_VAR 0 2
61704: PUSH
61705: LD_INT 2
61707: ARRAY
61708: PPUSH
61709: CALL_OW 111
// end ;
61713: LD_VAR 0 3
61717: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
61718: LD_INT 0
61720: PPUSH
61721: PPUSH
61722: PPUSH
// if not unit or not enemy then
61723: LD_VAR 0 1
61727: NOT
61728: IFTRUE 61737
61730: PUSH
61731: LD_VAR 0 2
61735: NOT
61736: OR
61737: IFFALSE 61741
// exit ;
61739: GO 61867
// x := GetX ( enemy ) ;
61741: LD_ADDR_VAR 0 4
61745: PUSH
61746: LD_VAR 0 2
61750: PPUSH
61751: CALL_OW 250
61755: ST_TO_ADDR
// y := GetY ( enemy ) ;
61756: LD_ADDR_VAR 0 5
61760: PUSH
61761: LD_VAR 0 2
61765: PPUSH
61766: CALL_OW 251
61770: ST_TO_ADDR
// if ValidHex ( x , y ) then
61771: LD_VAR 0 4
61775: PPUSH
61776: LD_VAR 0 5
61780: PPUSH
61781: CALL_OW 488
61785: IFFALSE 61867
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
61787: LD_VAR 0 2
61791: PPUSH
61792: CALL_OW 247
61796: PUSH
61797: LD_INT 3
61799: PUSH
61800: LD_INT 2
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: IN
61807: IFTRUE 61830
61809: PUSH
61810: LD_VAR 0 1
61814: PPUSH
61815: CALL_OW 255
61819: PPUSH
61820: LD_VAR 0 2
61824: PPUSH
61825: CALL_OW 292
61829: OR
61830: IFFALSE 61848
// ComAttackUnit ( unit , enemy ) else
61832: LD_VAR 0 1
61836: PPUSH
61837: LD_VAR 0 2
61841: PPUSH
61842: CALL_OW 115
61846: GO 61867
// ComAgressiveMove ( unit , x , y ) ;
61848: LD_VAR 0 1
61852: PPUSH
61853: LD_VAR 0 4
61857: PPUSH
61858: LD_VAR 0 5
61862: PPUSH
61863: CALL_OW 114
// end ;
61867: LD_VAR 0 3
61871: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
61872: LD_INT 0
61874: PPUSH
61875: PPUSH
61876: PPUSH
// list := AreaToList ( area , 0 ) ;
61877: LD_ADDR_VAR 0 5
61881: PUSH
61882: LD_VAR 0 1
61886: PPUSH
61887: LD_INT 0
61889: PPUSH
61890: CALL_OW 517
61894: ST_TO_ADDR
// if not list then
61895: LD_VAR 0 5
61899: NOT
61900: IFFALSE 61904
// exit ;
61902: GO 62034
// if all then
61904: LD_VAR 0 2
61908: IFFALSE 61996
// begin for i := 1 to list [ 1 ] do
61910: LD_ADDR_VAR 0 4
61914: PUSH
61915: DOUBLE
61916: LD_INT 1
61918: DEC
61919: ST_TO_ADDR
61920: LD_VAR 0 5
61924: PUSH
61925: LD_INT 1
61927: ARRAY
61928: PUSH
61929: FOR_TO
61930: IFFALSE 61992
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
61932: LD_ADDR_VAR 0 3
61936: PUSH
61937: LD_VAR 0 3
61941: PPUSH
61942: LD_VAR 0 3
61946: PUSH
61947: LD_INT 1
61949: PLUS
61950: PPUSH
61951: LD_VAR 0 5
61955: PUSH
61956: LD_INT 1
61958: ARRAY
61959: PUSH
61960: LD_VAR 0 4
61964: ARRAY
61965: PUSH
61966: LD_VAR 0 5
61970: PUSH
61971: LD_INT 2
61973: ARRAY
61974: PUSH
61975: LD_VAR 0 4
61979: ARRAY
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PPUSH
61985: CALL_OW 1
61989: ST_TO_ADDR
61990: GO 61929
61992: POP
61993: POP
// exit ;
61994: GO 62034
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
61996: LD_ADDR_VAR 0 3
62000: PUSH
62001: LD_VAR 0 5
62005: PUSH
62006: LD_INT 1
62008: ARRAY
62009: PUSH
62010: LD_INT 1
62012: ARRAY
62013: PUSH
62014: LD_VAR 0 5
62018: PUSH
62019: LD_INT 2
62021: ARRAY
62022: PUSH
62023: LD_INT 1
62025: ARRAY
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: EMPTY
62032: LIST
62033: ST_TO_ADDR
// end ;
62034: LD_VAR 0 3
62038: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
62039: LD_INT 0
62041: PPUSH
62042: PPUSH
// list := AreaToList ( area , 0 ) ;
62043: LD_ADDR_VAR 0 4
62047: PUSH
62048: LD_VAR 0 1
62052: PPUSH
62053: LD_INT 0
62055: PPUSH
62056: CALL_OW 517
62060: ST_TO_ADDR
// if not list then
62061: LD_VAR 0 4
62065: NOT
62066: IFFALSE 62070
// exit ;
62068: GO 62111
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
62070: LD_ADDR_VAR 0 3
62074: PUSH
62075: LD_VAR 0 4
62079: PUSH
62080: LD_INT 1
62082: ARRAY
62083: PUSH
62084: LD_INT 1
62086: ARRAY
62087: PUSH
62088: LD_VAR 0 4
62092: PUSH
62093: LD_INT 2
62095: ARRAY
62096: PUSH
62097: LD_INT 1
62099: ARRAY
62100: PUSH
62101: LD_VAR 0 2
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: LIST
62110: ST_TO_ADDR
// end ;
62111: LD_VAR 0 3
62115: RET
// export function First ( array ) ; begin
62116: LD_INT 0
62118: PPUSH
// if not array then
62119: LD_VAR 0 1
62123: NOT
62124: IFFALSE 62128
// exit ;
62126: GO 62142
// result := array [ 1 ] ;
62128: LD_ADDR_VAR 0 2
62132: PUSH
62133: LD_VAR 0 1
62137: PUSH
62138: LD_INT 1
62140: ARRAY
62141: ST_TO_ADDR
// end ;
62142: LD_VAR 0 2
62146: RET
// export function Last ( array ) ; begin
62147: LD_INT 0
62149: PPUSH
// if not array then
62150: LD_VAR 0 1
62154: NOT
62155: IFFALSE 62159
// exit ;
62157: GO 62175
// result := array [ array ] ;
62159: LD_ADDR_VAR 0 2
62163: PUSH
62164: LD_VAR 0 1
62168: PUSH
62169: LD_VAR 0 1
62173: ARRAY
62174: ST_TO_ADDR
// end ;
62175: LD_VAR 0 2
62179: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
62180: LD_INT 0
62182: PPUSH
62183: PPUSH
// result := [ ] ;
62184: LD_ADDR_VAR 0 5
62188: PUSH
62189: EMPTY
62190: ST_TO_ADDR
// if not array then
62191: LD_VAR 0 1
62195: NOT
62196: IFFALSE 62200
// exit ;
62198: GO 62312
// for i := 1 to array do
62200: LD_ADDR_VAR 0 6
62204: PUSH
62205: DOUBLE
62206: LD_INT 1
62208: DEC
62209: ST_TO_ADDR
62210: LD_VAR 0 1
62214: PUSH
62215: FOR_TO
62216: IFFALSE 62310
// if array [ i ] [ index ] = value then
62218: LD_VAR 0 1
62222: PUSH
62223: LD_VAR 0 6
62227: ARRAY
62228: PUSH
62229: LD_VAR 0 2
62233: ARRAY
62234: PUSH
62235: LD_VAR 0 3
62239: EQUAL
62240: IFFALSE 62308
// begin if indexColumn then
62242: LD_VAR 0 4
62246: IFFALSE 62282
// result := Join ( result , array [ i ] [ indexColumn ] ) else
62248: LD_ADDR_VAR 0 5
62252: PUSH
62253: LD_VAR 0 5
62257: PPUSH
62258: LD_VAR 0 1
62262: PUSH
62263: LD_VAR 0 6
62267: ARRAY
62268: PUSH
62269: LD_VAR 0 4
62273: ARRAY
62274: PPUSH
62275: CALL 57320 0 2
62279: ST_TO_ADDR
62280: GO 62308
// result := Join ( result , array [ i ] ) ;
62282: LD_ADDR_VAR 0 5
62286: PUSH
62287: LD_VAR 0 5
62291: PPUSH
62292: LD_VAR 0 1
62296: PUSH
62297: LD_VAR 0 6
62301: ARRAY
62302: PPUSH
62303: CALL 57320 0 2
62307: ST_TO_ADDR
// end ;
62308: GO 62215
62310: POP
62311: POP
// end ;
62312: LD_VAR 0 5
62316: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
62317: LD_INT 0
62319: PPUSH
// if not vehicles or not parkingPoint then
62320: LD_VAR 0 1
62324: NOT
62325: IFTRUE 62334
62327: PUSH
62328: LD_VAR 0 2
62332: NOT
62333: OR
62334: IFFALSE 62338
// exit ;
62336: GO 62436
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
62338: LD_ADDR_VAR 0 1
62342: PUSH
62343: LD_VAR 0 1
62347: PPUSH
62348: LD_INT 50
62350: PUSH
62351: EMPTY
62352: LIST
62353: PUSH
62354: LD_INT 3
62356: PUSH
62357: LD_INT 92
62359: PUSH
62360: LD_VAR 0 2
62364: PUSH
62365: LD_INT 1
62367: ARRAY
62368: PUSH
62369: LD_VAR 0 2
62373: PUSH
62374: LD_INT 2
62376: ARRAY
62377: PUSH
62378: LD_INT 8
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PPUSH
62395: CALL_OW 72
62399: ST_TO_ADDR
// if not vehicles then
62400: LD_VAR 0 1
62404: NOT
62405: IFFALSE 62409
// exit ;
62407: GO 62436
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
62409: LD_VAR 0 1
62413: PPUSH
62414: LD_VAR 0 2
62418: PUSH
62419: LD_INT 1
62421: ARRAY
62422: PPUSH
62423: LD_VAR 0 2
62427: PUSH
62428: LD_INT 2
62430: ARRAY
62431: PPUSH
62432: CALL_OW 111
// end ;
62436: LD_VAR 0 3
62440: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
62441: LD_INT 0
62443: PPUSH
62444: PPUSH
62445: PPUSH
// if not side or not area then
62446: LD_VAR 0 1
62450: NOT
62451: IFTRUE 62460
62453: PUSH
62454: LD_VAR 0 2
62458: NOT
62459: OR
62460: IFFALSE 62464
// exit ;
62462: GO 62583
// tmp := AreaToList ( area , 0 ) ;
62464: LD_ADDR_VAR 0 5
62468: PUSH
62469: LD_VAR 0 2
62473: PPUSH
62474: LD_INT 0
62476: PPUSH
62477: CALL_OW 517
62481: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
62482: LD_ADDR_VAR 0 4
62486: PUSH
62487: DOUBLE
62488: LD_INT 1
62490: DEC
62491: ST_TO_ADDR
62492: LD_VAR 0 5
62496: PUSH
62497: LD_INT 1
62499: ARRAY
62500: PUSH
62501: FOR_TO
62502: IFFALSE 62581
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
62504: LD_VAR 0 5
62508: PUSH
62509: LD_INT 1
62511: ARRAY
62512: PUSH
62513: LD_VAR 0 4
62517: ARRAY
62518: PPUSH
62519: LD_VAR 0 5
62523: PUSH
62524: LD_INT 2
62526: ARRAY
62527: PUSH
62528: LD_VAR 0 4
62532: ARRAY
62533: PPUSH
62534: CALL_OW 351
62538: IFFALSE 62579
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
62540: LD_VAR 0 5
62544: PUSH
62545: LD_INT 1
62547: ARRAY
62548: PUSH
62549: LD_VAR 0 4
62553: ARRAY
62554: PPUSH
62555: LD_VAR 0 5
62559: PUSH
62560: LD_INT 2
62562: ARRAY
62563: PUSH
62564: LD_VAR 0 4
62568: ARRAY
62569: PPUSH
62570: LD_VAR 0 1
62574: PPUSH
62575: CALL_OW 244
// end ;
62579: GO 62501
62581: POP
62582: POP
// end ;
62583: LD_VAR 0 3
62587: RET
// export function UniqueArray ( array ) ; var i ; begin
62588: LD_INT 0
62590: PPUSH
62591: PPUSH
// result := [ ] ;
62592: LD_ADDR_VAR 0 2
62596: PUSH
62597: EMPTY
62598: ST_TO_ADDR
// if not array then
62599: LD_VAR 0 1
62603: NOT
62604: IFFALSE 62608
// exit ;
62606: GO 62669
// for i := 1 to array do
62608: LD_ADDR_VAR 0 3
62612: PUSH
62613: DOUBLE
62614: LD_INT 1
62616: DEC
62617: ST_TO_ADDR
62618: LD_VAR 0 1
62622: PUSH
62623: FOR_TO
62624: IFFALSE 62667
// if not array [ i ] in result then
62626: LD_VAR 0 1
62630: PUSH
62631: LD_VAR 0 3
62635: ARRAY
62636: PUSH
62637: LD_VAR 0 2
62641: IN
62642: NOT
62643: IFFALSE 62665
// result := Join ( result , i ) ;
62645: LD_ADDR_VAR 0 2
62649: PUSH
62650: LD_VAR 0 2
62654: PPUSH
62655: LD_VAR 0 3
62659: PPUSH
62660: CALL 57320 0 2
62664: ST_TO_ADDR
62665: GO 62623
62667: POP
62668: POP
// end ; end_of_file
62669: LD_VAR 0 2
62673: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62674: PPOPN 6
62676: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62677: LD_INT 0
62679: PPUSH
// begin if not units then
62680: LD_VAR 0 1
62684: NOT
62685: IFFALSE 62689
// exit ;
62687: GO 62723
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62689: LD_VAR 0 1
62693: PPUSH
62694: LD_VAR 0 2
62698: PPUSH
62699: LD_VAR 0 3
62703: PPUSH
62704: LD_VAR 0 4
62708: PPUSH
62709: LD_VAR 0 5
62713: PPUSH
62714: LD_VAR 0 6
62718: PPUSH
62719: CALL 19103 0 6
// end ;
62723: PPOPN 7
62725: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62726: LD_EXP 1
62730: PUSH
62731: LD_INT 4
62733: EQUAL
62734: IFFALSE 62770
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62736: LD_STRING setGameDifficulty(
62738: PUSH
62739: LD_OWVAR 67
62743: STR
62744: PUSH
62745: LD_STRING )
62747: STR
62748: PPUSH
62749: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62753: LD_STRING displayDifficulty(
62755: PUSH
62756: LD_OWVAR 67
62760: STR
62761: PUSH
62762: LD_STRING )
62764: STR
62765: PPUSH
62766: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62770: CALL 62799 0 0
// end ; end_of_file
62774: PPOPN 1
62776: END
// every 0 0$1 do
62777: GO 62779
62779: DISABLE
// begin enable ;
62780: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62781: LD_STRING updateTimer(
62783: PUSH
62784: LD_OWVAR 1
62788: STR
62789: PUSH
62790: LD_STRING );
62792: STR
62793: PPUSH
62794: CALL_OW 559
// end ;
62798: END
// export function SOS_MapStart ( ) ; begin
62799: LD_INT 0
62801: PPUSH
// UpdateFactoryWaypoints ( ) ;
62802: CALL 63733 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62806: CALL 63985 0 0
// ParseMultiDataToLua ( ) ;
62810: CALL 64132 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62814: LD_STRING setSpecLogoNumber(
62816: PUSH
62817: LD_INT 2
62819: STR
62820: PUSH
62821: LD_STRING ,
62823: STR
62824: PUSH
62825: LD_INT 1
62827: STR
62828: PUSH
62829: LD_STRING )
62831: STR
62832: PPUSH
62833: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62837: LD_STRING setSpecLogoNumber(
62839: PUSH
62840: LD_INT 3
62842: STR
62843: PUSH
62844: LD_STRING ,
62846: STR
62847: PUSH
62848: LD_INT 2
62850: STR
62851: PUSH
62852: LD_STRING )
62854: STR
62855: PPUSH
62856: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62860: LD_STRING setSpecLogoNumber(
62862: PUSH
62863: LD_INT 4
62865: STR
62866: PUSH
62867: LD_STRING ,
62869: STR
62870: PUSH
62871: LD_INT 3
62873: STR
62874: PUSH
62875: LD_STRING )
62877: STR
62878: PPUSH
62879: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62883: LD_STRING setSpecLogoNumber(
62885: PUSH
62886: LD_INT 5
62888: STR
62889: PUSH
62890: LD_STRING ,
62892: STR
62893: PUSH
62894: LD_INT 4
62896: STR
62897: PUSH
62898: LD_STRING )
62900: STR
62901: PPUSH
62902: CALL_OW 559
// end ;
62906: LD_VAR 0 1
62910: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62911: LD_INT 0
62913: PPUSH
62914: PPUSH
62915: PPUSH
62916: PPUSH
62917: PPUSH
62918: PPUSH
62919: PPUSH
62920: PPUSH
62921: PPUSH
// for i := 1 to 8 do
62922: LD_ADDR_VAR 0 2
62926: PUSH
62927: DOUBLE
62928: LD_INT 1
62930: DEC
62931: ST_TO_ADDR
62932: LD_INT 8
62934: PUSH
62935: FOR_TO
62936: IFFALSE 63321
// begin if mpSidePositions [ i ] then
62938: LD_EXP 5
62942: PUSH
62943: LD_VAR 0 2
62947: ARRAY
62948: IFFALSE 63319
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62950: LD_ADDR_VAR 0 7
62954: PUSH
62955: LD_INT 22
62957: PUSH
62958: LD_VAR 0 2
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 21
62969: PUSH
62970: LD_INT 1
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PPUSH
62981: CALL_OW 69
62985: PPUSH
62986: CALL 21354 0 1
62990: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62991: LD_ADDR_VAR 0 9
62995: PUSH
62996: LD_INT 22
62998: PUSH
62999: LD_VAR 0 2
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: PUSH
63011: LD_INT 30
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 30
63023: PUSH
63024: LD_INT 1
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: LIST
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PPUSH
63040: CALL_OW 69
63044: ST_TO_ADDR
// crates := 0 ;
63045: LD_ADDR_VAR 0 4
63049: PUSH
63050: LD_INT 0
63052: ST_TO_ADDR
// oil := 0 ;
63053: LD_ADDR_VAR 0 5
63057: PUSH
63058: LD_INT 0
63060: ST_TO_ADDR
// sib := 0 ;
63061: LD_ADDR_VAR 0 6
63065: PUSH
63066: LD_INT 0
63068: ST_TO_ADDR
// if bases then
63069: LD_VAR 0 9
63073: IFFALSE 63179
// begin for j in bases do
63075: LD_ADDR_VAR 0 3
63079: PUSH
63080: LD_VAR 0 9
63084: PUSH
63085: FOR_IN
63086: IFFALSE 63177
// begin base := GetBase ( j ) ;
63088: LD_ADDR_VAR 0 8
63092: PUSH
63093: LD_VAR 0 3
63097: PPUSH
63098: CALL_OW 274
63102: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63103: LD_ADDR_VAR 0 4
63107: PUSH
63108: LD_VAR 0 4
63112: PUSH
63113: LD_VAR 0 8
63117: PPUSH
63118: LD_INT 1
63120: PPUSH
63121: CALL_OW 275
63125: PLUS
63126: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63127: LD_ADDR_VAR 0 5
63131: PUSH
63132: LD_VAR 0 5
63136: PUSH
63137: LD_VAR 0 8
63141: PPUSH
63142: LD_INT 2
63144: PPUSH
63145: CALL_OW 275
63149: PLUS
63150: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63151: LD_ADDR_VAR 0 6
63155: PUSH
63156: LD_VAR 0 6
63160: PUSH
63161: LD_VAR 0 8
63165: PPUSH
63166: LD_INT 3
63168: PPUSH
63169: CALL_OW 275
63173: PLUS
63174: ST_TO_ADDR
// end ;
63175: GO 63085
63177: POP
63178: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63179: LD_STRING setSpecText(
63181: PUSH
63182: LD_VAR 0 2
63186: STR
63187: PUSH
63188: LD_STRING ,
63190: STR
63191: PUSH
63192: LD_INT 2
63194: STR
63195: PUSH
63196: LD_STRING ,
63198: STR
63199: PUSH
63200: LD_VAR 0 4
63204: STR
63205: PUSH
63206: LD_STRING )
63208: STR
63209: PPUSH
63210: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63214: LD_STRING setSpecText(
63216: PUSH
63217: LD_VAR 0 2
63221: STR
63222: PUSH
63223: LD_STRING ,
63225: STR
63226: PUSH
63227: LD_INT 3
63229: STR
63230: PUSH
63231: LD_STRING ,
63233: STR
63234: PUSH
63235: LD_VAR 0 5
63239: STR
63240: PUSH
63241: LD_STRING )
63243: STR
63244: PPUSH
63245: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63249: LD_STRING setSpecText(
63251: PUSH
63252: LD_VAR 0 2
63256: STR
63257: PUSH
63258: LD_STRING ,
63260: STR
63261: PUSH
63262: LD_INT 4
63264: STR
63265: PUSH
63266: LD_STRING ,
63268: STR
63269: PUSH
63270: LD_VAR 0 6
63274: STR
63275: PUSH
63276: LD_STRING )
63278: STR
63279: PPUSH
63280: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63284: LD_STRING setSpecText(
63286: PUSH
63287: LD_VAR 0 2
63291: STR
63292: PUSH
63293: LD_STRING ,
63295: STR
63296: PUSH
63297: LD_INT 5
63299: STR
63300: PUSH
63301: LD_STRING ,
63303: STR
63304: PUSH
63305: LD_VAR 0 7
63309: STR
63310: PUSH
63311: LD_STRING )
63313: STR
63314: PPUSH
63315: CALL_OW 559
// end ; end ;
63319: GO 62935
63321: POP
63322: POP
// end ;
63323: LD_VAR 0 1
63327: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63328: LD_INT 2
63330: PUSH
63331: LD_INT 30
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 30
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: PPUSH
63356: CALL_OW 69
63360: IFFALSE 63370
63362: GO 63364
63364: DISABLE
// begin enable ;
63365: ENABLE
// UpdateSpectatorBar ;
63366: CALL 62911 0 0
// end ;
63370: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63371: LD_INT 0
63373: PPUSH
// end ;
63374: LD_VAR 0 12
63378: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63379: LD_INT 0
63381: PPUSH
63382: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63383: LD_VAR 0 1
63387: NOT
63388: IFTRUE 63407
63390: PUSH
63391: LD_VAR 0 2
63395: PPUSH
63396: LD_VAR 0 3
63400: PPUSH
63401: CALL_OW 488
63405: NOT
63406: OR
63407: IFTRUE 63442
63409: PUSH
63410: LD_VAR 0 1
63414: PPUSH
63415: CALL_OW 266
63419: PUSH
63420: LD_INT 3
63422: NONEQUAL
63423: IFFALSE 63441
63425: PUSH
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 247
63435: PUSH
63436: LD_INT 1
63438: EQUAL
63439: NOT
63440: AND
63441: OR
63442: IFFALSE 63446
// exit ;
63444: GO 63728
// if GetType ( factory ) = unit_human then
63446: LD_VAR 0 1
63450: PPUSH
63451: CALL_OW 247
63455: PUSH
63456: LD_INT 1
63458: EQUAL
63459: IFFALSE 63476
// factory := IsInUnit ( factory ) ;
63461: LD_ADDR_VAR 0 1
63465: PUSH
63466: LD_VAR 0 1
63470: PPUSH
63471: CALL_OW 310
63475: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63476: LD_VAR 0 1
63480: PPUSH
63481: CALL_OW 266
63485: PUSH
63486: LD_INT 3
63488: NONEQUAL
63489: IFFALSE 63493
// exit ;
63491: GO 63728
// for i := 1 to Count ( factoryWaypoints ) do
63493: LD_ADDR_VAR 0 5
63497: PUSH
63498: DOUBLE
63499: LD_INT 1
63501: DEC
63502: ST_TO_ADDR
63503: LD_EXP 58
63507: PPUSH
63508: CALL 21354 0 1
63512: PUSH
63513: FOR_TO
63514: IFFALSE 63676
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63516: LD_VAR 0 2
63520: PPUSH
63521: LD_VAR 0 3
63525: PPUSH
63526: CALL_OW 428
63530: PUSH
63531: LD_EXP 58
63535: PUSH
63536: LD_VAR 0 5
63540: ARRAY
63541: PUSH
63542: LD_INT 2
63544: ARRAY
63545: EQUAL
63546: IFFALSE 63578
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63548: LD_ADDR_EXP 58
63552: PUSH
63553: LD_EXP 58
63557: PPUSH
63558: LD_VAR 0 5
63562: PPUSH
63563: CALL_OW 3
63567: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63568: CALL 63733 0 0
// exit ;
63572: POP
63573: POP
63574: GO 63728
// end else
63576: GO 63674
// if factory = factoryWaypoints [ i ] [ 2 ] then
63578: LD_VAR 0 1
63582: PUSH
63583: LD_EXP 58
63587: PUSH
63588: LD_VAR 0 5
63592: ARRAY
63593: PUSH
63594: LD_INT 2
63596: ARRAY
63597: EQUAL
63598: IFFALSE 63674
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63600: LD_ADDR_EXP 58
63604: PUSH
63605: LD_EXP 58
63609: PPUSH
63610: LD_VAR 0 5
63614: PPUSH
63615: CALL_OW 3
63619: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63620: LD_ADDR_EXP 58
63624: PUSH
63625: LD_EXP 58
63629: PPUSH
63630: LD_VAR 0 1
63634: PPUSH
63635: CALL_OW 255
63639: PUSH
63640: LD_VAR 0 1
63644: PUSH
63645: LD_VAR 0 2
63649: PUSH
63650: LD_VAR 0 3
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: PPUSH
63661: CALL 57320 0 2
63665: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63666: CALL 63733 0 0
// exit ;
63670: POP
63671: POP
63672: GO 63728
// end ; end ;
63674: GO 63513
63676: POP
63677: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63678: LD_ADDR_EXP 58
63682: PUSH
63683: LD_EXP 58
63687: PPUSH
63688: LD_VAR 0 1
63692: PPUSH
63693: CALL_OW 255
63697: PUSH
63698: LD_VAR 0 1
63702: PUSH
63703: LD_VAR 0 2
63707: PUSH
63708: LD_VAR 0 3
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: PPUSH
63719: CALL 57320 0 2
63723: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63724: CALL 63733 0 0
// end ;
63728: LD_VAR 0 4
63732: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63733: LD_INT 0
63735: PPUSH
63736: PPUSH
63737: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63738: LD_STRING resetFactoryWaypoint();
63740: PPUSH
63741: CALL_OW 559
// if factoryWaypoints then
63745: LD_EXP 58
63749: IFFALSE 63870
// begin list := factoryWaypoints ;
63751: LD_ADDR_VAR 0 3
63755: PUSH
63756: LD_EXP 58
63760: ST_TO_ADDR
// for i := 1 to list do
63761: LD_ADDR_VAR 0 2
63765: PUSH
63766: DOUBLE
63767: LD_INT 1
63769: DEC
63770: ST_TO_ADDR
63771: LD_VAR 0 3
63775: PUSH
63776: FOR_TO
63777: IFFALSE 63868
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63779: LD_STRING setFactoryWaypointXY(
63781: PUSH
63782: LD_VAR 0 3
63786: PUSH
63787: LD_VAR 0 2
63791: ARRAY
63792: PUSH
63793: LD_INT 1
63795: ARRAY
63796: STR
63797: PUSH
63798: LD_STRING ,
63800: STR
63801: PUSH
63802: LD_VAR 0 3
63806: PUSH
63807: LD_VAR 0 2
63811: ARRAY
63812: PUSH
63813: LD_INT 2
63815: ARRAY
63816: STR
63817: PUSH
63818: LD_STRING ,
63820: STR
63821: PUSH
63822: LD_VAR 0 3
63826: PUSH
63827: LD_VAR 0 2
63831: ARRAY
63832: PUSH
63833: LD_INT 3
63835: ARRAY
63836: STR
63837: PUSH
63838: LD_STRING ,
63840: STR
63841: PUSH
63842: LD_VAR 0 3
63846: PUSH
63847: LD_VAR 0 2
63851: ARRAY
63852: PUSH
63853: LD_INT 4
63855: ARRAY
63856: STR
63857: PUSH
63858: LD_STRING )
63860: STR
63861: PPUSH
63862: CALL_OW 559
63866: GO 63776
63868: POP
63869: POP
// end ; end ;
63870: LD_VAR 0 1
63874: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63875: LD_INT 0
63877: PPUSH
// if HexInfo ( x , y ) = warehouse then
63878: LD_VAR 0 2
63882: PPUSH
63883: LD_VAR 0 3
63887: PPUSH
63888: CALL_OW 428
63892: PUSH
63893: LD_VAR 0 1
63897: EQUAL
63898: IFFALSE 63925
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63900: LD_ADDR_EXP 60
63904: PUSH
63905: LD_EXP 60
63909: PPUSH
63910: LD_VAR 0 1
63914: PPUSH
63915: LD_INT 0
63917: PPUSH
63918: CALL_OW 1
63922: ST_TO_ADDR
63923: GO 63976
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63925: LD_ADDR_EXP 60
63929: PUSH
63930: LD_EXP 60
63934: PPUSH
63935: LD_VAR 0 1
63939: PPUSH
63940: LD_VAR 0 1
63944: PPUSH
63945: CALL_OW 255
63949: PUSH
63950: LD_VAR 0 1
63954: PUSH
63955: LD_VAR 0 2
63959: PUSH
63960: LD_VAR 0 3
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: PPUSH
63971: CALL_OW 1
63975: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63976: CALL 63985 0 0
// end ;
63980: LD_VAR 0 4
63984: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63985: LD_INT 0
63987: PPUSH
63988: PPUSH
63989: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63990: LD_STRING resetWarehouseGatheringPoints();
63992: PPUSH
63993: CALL_OW 559
// if warehouseGatheringPoints then
63997: LD_EXP 60
64001: IFFALSE 64127
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64003: LD_ADDR_VAR 0 3
64007: PUSH
64008: LD_EXP 60
64012: PPUSH
64013: CALL 61254 0 1
64017: ST_TO_ADDR
// for i := 1 to list do
64018: LD_ADDR_VAR 0 2
64022: PUSH
64023: DOUBLE
64024: LD_INT 1
64026: DEC
64027: ST_TO_ADDR
64028: LD_VAR 0 3
64032: PUSH
64033: FOR_TO
64034: IFFALSE 64125
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64036: LD_STRING setWarehouseGatheringPointXY(
64038: PUSH
64039: LD_VAR 0 3
64043: PUSH
64044: LD_VAR 0 2
64048: ARRAY
64049: PUSH
64050: LD_INT 1
64052: ARRAY
64053: STR
64054: PUSH
64055: LD_STRING ,
64057: STR
64058: PUSH
64059: LD_VAR 0 3
64063: PUSH
64064: LD_VAR 0 2
64068: ARRAY
64069: PUSH
64070: LD_INT 2
64072: ARRAY
64073: STR
64074: PUSH
64075: LD_STRING ,
64077: STR
64078: PUSH
64079: LD_VAR 0 3
64083: PUSH
64084: LD_VAR 0 2
64088: ARRAY
64089: PUSH
64090: LD_INT 3
64092: ARRAY
64093: STR
64094: PUSH
64095: LD_STRING ,
64097: STR
64098: PUSH
64099: LD_VAR 0 3
64103: PUSH
64104: LD_VAR 0 2
64108: ARRAY
64109: PUSH
64110: LD_INT 4
64112: ARRAY
64113: STR
64114: PUSH
64115: LD_STRING )
64117: STR
64118: PPUSH
64119: CALL_OW 559
64123: GO 64033
64125: POP
64126: POP
// end ; end ;
64127: LD_VAR 0 1
64131: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64132: LD_INT 0
64134: PPUSH
64135: PPUSH
// if not mpSidePositions then
64136: LD_EXP 5
64140: NOT
64141: IFFALSE 64145
// exit ;
64143: GO 64216
// result :=  ;
64145: LD_ADDR_VAR 0 1
64149: PUSH
64150: LD_STRING 
64152: ST_TO_ADDR
// for i := 1 to 8 do
64153: LD_ADDR_VAR 0 2
64157: PUSH
64158: DOUBLE
64159: LD_INT 1
64161: DEC
64162: ST_TO_ADDR
64163: LD_INT 8
64165: PUSH
64166: FOR_TO
64167: IFFALSE 64197
// begin result := result & mpSidePositions [ i ] & ; ;
64169: LD_ADDR_VAR 0 1
64173: PUSH
64174: LD_VAR 0 1
64178: PUSH
64179: LD_EXP 5
64183: PUSH
64184: LD_VAR 0 2
64188: ARRAY
64189: STR
64190: PUSH
64191: LD_STRING ;
64193: STR
64194: ST_TO_ADDR
// end ;
64195: GO 64166
64197: POP
64198: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64199: LD_STRING setMultiplayerRealPosition("
64201: PUSH
64202: LD_VAR 0 1
64206: STR
64207: PUSH
64208: LD_STRING ");
64210: STR
64211: PPUSH
64212: CALL_OW 559
// end ;
64216: LD_VAR 0 1
64220: RET
