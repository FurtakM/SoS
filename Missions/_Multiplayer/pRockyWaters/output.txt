// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2972 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3348 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 10 10$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 21000
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 260 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 260
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 51
 852: PUSH
 853: LD_INT 52
 855: PUSH
 856: LD_INT 53
 858: PUSH
 859: LD_INT 54
 861: PUSH
 862: LD_INT 55
 864: PUSH
 865: LD_INT 56
 867: PUSH
 868: LD_INT 57
 870: PUSH
 871: LD_INT 58
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 70
 891: PUSH
 892: LD_INT 71
 894: PUSH
 895: LD_INT 72
 897: PUSH
 898: LD_INT 73
 900: PUSH
 901: LD_INT 68
 903: PUSH
 904: LD_INT 69
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 49
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 61
1367: PUSH
1368: LD_INT 62
1370: PUSH
1371: LD_INT 63
1373: PUSH
1374: LD_INT 64
1376: PUSH
1377: LD_INT 65
1379: PUSH
1380: LD_INT 66
1382: PUSH
1383: LD_INT 67
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 1
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 60411 0 2
1411: PUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 60411 0 2
1422: PUSH
1423: LD_INT 3
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 60411 0 2
1433: PUSH
1434: LD_INT 4
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 60411 0 2
1444: PUSH
1445: LD_INT 5
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL 60411 0 2
1455: PUSH
1456: LD_INT 6
1458: PPUSH
1459: LD_INT 5
1461: PPUSH
1462: CALL 60411 0 2
1466: PUSH
1467: LD_INT 7
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL 60411 0 2
1477: PUSH
1478: LD_INT 8
1480: PPUSH
1481: LD_INT 1
1483: PPUSH
1484: CALL 60411 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 19760 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 9
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 60244 0 2
1667: PUSH
1668: LD_INT 10
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 60244 0 2
1680: PUSH
1681: LD_INT 11
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 60244 0 2
1693: PUSH
1694: LD_INT 12
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 60244 0 2
1706: PUSH
1707: LD_INT 13
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 60244 0 2
1719: PUSH
1720: LD_INT 14
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 60244 0 2
1732: PUSH
1733: LD_INT 15
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 60244 0 2
1745: PUSH
1746: LD_INT 16
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 60244 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 17
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 60244 0 2
1810: PUSH
1811: LD_INT 18
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 60244 0 2
1823: PUSH
1824: LD_INT 19
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 60244 0 2
1836: PUSH
1837: LD_INT 20
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 60244 0 2
1849: PUSH
1850: LD_INT 21
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 60244 0 2
1862: PUSH
1863: LD_INT 22
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 60244 0 2
1875: PUSH
1876: LD_INT 23
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 60244 0 2
1888: PUSH
1889: LD_INT 24
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 60244 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 25
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 60411 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 26
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 60411 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 41
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 60411 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 60411 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 28
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 60411 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 42
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 60411 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 29
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 60411 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 30
2067: PPUSH
2068: LD_INT 0
2070: PPUSH
2071: CALL 60411 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 43
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 60411 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 31
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 60411 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 32
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL 60411 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 44
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 60411 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 33
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 60411 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 34
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL 60411 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 45
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 60411 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 35
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 60411 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 36
2217: PPUSH
2218: LD_INT 4
2220: PPUSH
2221: CALL 60411 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 46
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 60411 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 37
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 60411 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 38
2267: PPUSH
2268: LD_INT 4
2270: PPUSH
2271: CALL 60411 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 47
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 60411 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 39
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 60411 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 40
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: CALL 60411 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 48
2332: PPUSH
2333: LD_INT 4
2335: PPUSH
2336: CALL 60411 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2885
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 70
2569: PUSH
2570: LD_INT 71
2572: PUSH
2573: LD_INT 72
2575: PUSH
2576: LD_INT 73
2578: PUSH
2579: LD_INT 68
2581: PUSH
2582: LD_INT 69
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 51
2600: PUSH
2601: LD_INT 52
2603: PUSH
2604: LD_INT 53
2606: PUSH
2607: LD_INT 54
2609: PUSH
2610: LD_INT 55
2612: PUSH
2613: LD_INT 56
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: LD_INT 58
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 57065 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// if GetResourceArea ( center3 , mat_cans ) < 15 then
2745: LD_INT 74
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 287
2755: PUSH
2756: LD_INT 15
2758: LESS
2759: IFFALSE 2791
// begin CreateCratesArea ( x , center3 , true ) ;
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_INT 74
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: CALL_OW 55
// CreateCratesArea ( x , center3 , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_INT 74
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: CALL_OW 55
// end ; for i in areas do
2791: LD_ADDR_VAR 0 1
2795: PUSH
2796: LD_VAR 0 4
2800: PUSH
2801: FOR_IN
2802: IFFALSE 2841
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 287
2816: PUSH
2817: LD_INT 20
2819: LESS
2820: IFFALSE 2839
// begin CreateCratesArea ( x , i , true ) ;
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_VAR 0 1
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 55
// end ; end ;
2839: GO 2801
2841: POP
2842: POP
// time := time + delayTime ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_VAR 0 5
2852: PUSH
2853: LD_VAR 0 7
2857: PLUS
2858: ST_TO_ADDR
// if time > maxTime then
2859: LD_VAR 0 5
2863: PUSH
2864: LD_VAR 0 8
2868: GREATER
2869: IFFALSE 2881
// time := normalTime ;
2871: LD_ADDR_VAR 0 5
2875: PUSH
2876: LD_VAR 0 6
2880: ST_TO_ADDR
// until false ;
2881: LD_INT 0
2883: IFFALSE 2703
// end ; end_of_file
2885: PPOPN 8
2887: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2888: LD_VAR 0 1
2892: PPUSH
2893: CALL 12134 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2897: LD_VAR 0 1
2901: PPUSH
2902: CALL 8120 0 1
// end ;
2906: PPOPN 1
2908: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2909: LD_VAR 0 1
2913: PPUSH
2914: CALL 12151 0 1
// end ;
2918: PPOPN 1
2920: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: CALL 8827 0 1
2930: PPOPN 1
2932: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2933: LD_VAR 0 1
2937: PPUSH
2938: LD_VAR 0 2
2942: PPUSH
2943: CALL 12192 0 2
2947: PPOPN 2
2949: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2950: LD_VAR 0 1
2954: PPUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: CALL 8880 0 3
2969: PPOPN 3
2971: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2972: LD_INT 0
2974: PPUSH
2975: PPUSH
// disable ( mpActive ) ;
2976: LD_INT 100
2978: DISABLE_MARKED
// disable ( mpWin ) ;
2979: LD_INT 101
2981: DISABLE_MARKED
// disable ( mpLose ) ;
2982: LD_INT 102
2984: DISABLE_MARKED
// mpGameType := 0 ;
2985: LD_ADDR_EXP 1
2989: PUSH
2990: LD_INT 0
2992: ST_TO_ADDR
// mpGameSettings := [ ] ;
2993: LD_ADDR_EXP 4
2997: PUSH
2998: EMPTY
2999: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3000: LD_ADDR_EXP 2
3004: PUSH
3005: EMPTY
3006: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3007: LD_ADDR_EXP 3
3011: PUSH
3012: EMPTY
3013: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3014: LD_ADDR_EXP 27
3018: PUSH
3019: LD_INT 2
3021: PUSH
3022: LD_INT 2
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3029: LD_ADDR_EXP 10
3033: PUSH
3034: EMPTY
3035: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3036: LD_ADDR_EXP 11
3040: PUSH
3041: EMPTY
3042: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3043: LD_ADDR_EXP 39
3047: PUSH
3048: EMPTY
3049: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3050: LD_ADDR_EXP 40
3054: PUSH
3055: EMPTY
3056: ST_TO_ADDR
// mpDepots := [ ] ;
3057: LD_ADDR_EXP 12
3061: PUSH
3062: EMPTY
3063: ST_TO_ADDR
// mpBuildings := [ ] ;
3064: LD_ADDR_EXP 15
3068: PUSH
3069: EMPTY
3070: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3071: LD_ADDR_EXP 16
3075: PUSH
3076: EMPTY
3077: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3078: LD_ADDR_EXP 17
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3085: LD_ADDR_EXP 18
3089: PUSH
3090: EMPTY
3091: ST_TO_ADDR
// mpStartingResources := [ ] ;
3092: LD_ADDR_EXP 13
3096: PUSH
3097: EMPTY
3098: ST_TO_ADDR
// mpStartPos := [ ] ;
3099: LD_ADDR_EXP 19
3103: PUSH
3104: EMPTY
3105: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3106: LD_ADDR_EXP 20
3110: PUSH
3111: LD_INT 1
3113: NEG
3114: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3115: LD_ADDR_EXP 21
3119: PUSH
3120: EMPTY
3121: ST_TO_ADDR
// mpApemans := [ ] ;
3122: LD_ADDR_EXP 28
3126: PUSH
3127: EMPTY
3128: ST_TO_ADDR
// mpApemansArea := [ ] ;
3129: LD_ADDR_EXP 29
3133: PUSH
3134: EMPTY
3135: ST_TO_ADDR
// mpRespawn := [ ] ;
3136: LD_ADDR_EXP 31
3140: PUSH
3141: EMPTY
3142: ST_TO_ADDR
// mpKingArea := 0 ;
3143: LD_ADDR_EXP 32
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// mpPoints := [ ] ;
3151: LD_ADDR_EXP 33
3155: PUSH
3156: EMPTY
3157: ST_TO_ADDR
// mpVehicles := 0 ;
3158: LD_ADDR_EXP 34
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// mpShipments := 0 ;
3166: LD_ADDR_EXP 25
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3174: LD_ADDR_EXP 38
3178: PUSH
3179: EMPTY
3180: PUSH
3181: EMPTY
3182: PUSH
3183: EMPTY
3184: PUSH
3185: EMPTY
3186: PUSH
3187: EMPTY
3188: PUSH
3189: EMPTY
3190: PUSH
3191: EMPTY
3192: PUSH
3193: EMPTY
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3205: LD_ADDR_EXP 30
3209: PUSH
3210: EMPTY
3211: PUSH
3212: EMPTY
3213: PUSH
3214: EMPTY
3215: PUSH
3216: EMPTY
3217: PUSH
3218: EMPTY
3219: PUSH
3220: EMPTY
3221: PUSH
3222: EMPTY
3223: PUSH
3224: EMPTY
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: ST_TO_ADDR
// mpEmissions := 0 ;
3236: LD_ADDR_EXP 35
3240: PUSH
3241: LD_INT 0
3243: ST_TO_ADDR
// mpTeleports := 0 ;
3244: LD_ADDR_EXP 41
3248: PUSH
3249: LD_INT 0
3251: ST_TO_ADDR
// mpArtifacts := 0 ;
3252: LD_ADDR_EXP 42
3256: PUSH
3257: LD_INT 0
3259: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3260: LD_ADDR_EXP 23
3264: PUSH
3265: LD_INT 3
3267: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3268: LD_ADDR_EXP 22
3272: PUSH
3273: LD_INT 15
3275: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3276: LD_ADDR_EXP 36
3280: PUSH
3281: LD_INT 0
3283: ST_TO_ADDR
// mpGameActive := false ;
3284: LD_ADDR_EXP 37
3288: PUSH
3289: LD_INT 0
3291: ST_TO_ADDR
// mpBlockRespThread := false ;
3292: LD_ADDR_EXP 43
3296: PUSH
3297: LD_INT 0
3299: ST_TO_ADDR
// for i := 1 to 32 do
3300: LD_ADDR_VAR 0 2
3304: PUSH
3305: DOUBLE
3306: LD_INT 1
3308: DEC
3309: ST_TO_ADDR
3310: LD_INT 32
3312: PUSH
3313: FOR_TO
3314: IFFALSE 3341
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3316: LD_ADDR_EXP 4
3320: PUSH
3321: LD_EXP 4
3325: PPUSH
3326: LD_VAR 0 2
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 1
3338: ST_TO_ADDR
3339: GO 3313
3341: POP
3342: POP
// end ;
3343: LD_VAR 0 1
3347: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3348: LD_INT 0
3350: PPUSH
3351: PPUSH
3352: PPUSH
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
3362: PPUSH
3363: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3364: LD_ADDR_VAR 0 14
3368: PUSH
3369: LD_INT 1
3371: PUSH
3372: LD_INT 2
3374: PUSH
3375: LD_INT 3
3377: PUSH
3378: LD_INT 5
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: ST_TO_ADDR
// for i in gameTypes do
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: LD_VAR 0 14
3396: PUSH
3397: FOR_IN
3398: IFFALSE 3407
// disable ( i ) ;
3400: LD_VAR 0 2
3404: DISABLE_MARKED
3405: GO 3397
3407: POP
3408: POP
// if Multiplayer then
3409: LD_OWVAR 4
3413: IFFALSE 3597
// begin mpGameType := mp_game_type ;
3415: LD_ADDR_EXP 1
3419: PUSH
3420: LD_OWVAR 6
3424: ST_TO_ADDR
// your_side := mp_player_side ;
3425: LD_ADDR_OWVAR 2
3429: PUSH
3430: LD_OWVAR 7
3434: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3435: LD_ADDR_EXP 5
3439: PUSH
3440: LD_OWVAR 17
3444: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3445: LD_ADDR_EXP 6
3449: PUSH
3450: LD_OWVAR 15
3454: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3455: LD_ADDR_EXP 7
3459: PUSH
3460: LD_OWVAR 16
3464: ST_TO_ADDR
// mpTeams := mp_teams ;
3465: LD_ADDR_EXP 8
3469: PUSH
3470: LD_OWVAR 12
3474: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: DOUBLE
3481: LD_INT 1
3483: DEC
3484: ST_TO_ADDR
3485: LD_EXP 2
3489: PPUSH
3490: CALL 19760 0 1
3494: PUSH
3495: FOR_TO
3496: IFFALSE 3572
// begin setting := mpGameSettingsKeys [ i ] ;
3498: LD_ADDR_VAR 0 12
3502: PUSH
3503: LD_EXP 2
3507: PUSH
3508: LD_VAR 0 2
3512: ARRAY
3513: ST_TO_ADDR
// if setting then
3514: LD_VAR 0 12
3518: IFFALSE 3570
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3520: LD_ADDR_EXP 4
3524: PUSH
3525: LD_EXP 4
3529: PPUSH
3530: LD_VAR 0 2
3534: PPUSH
3535: LD_EXP 3
3539: PUSH
3540: LD_VAR 0 2
3544: ARRAY
3545: PUSH
3546: LD_VAR 0 2
3550: PUSH
3551: LD_INT 1
3553: MINUS
3554: PPUSH
3555: CALL_OW 426
3559: PUSH
3560: LD_INT 1
3562: PLUS
3563: ARRAY
3564: PPUSH
3565: CALL_OW 1
3569: ST_TO_ADDR
// end ;
3570: GO 3495
3572: POP
3573: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3574: LD_ADDR_EXP 9
3578: PUSH
3579: LD_EXP 6
3583: PUSH
3584: LD_INT 0
3586: PUSH
3587: EMPTY
3588: LIST
3589: DIFF
3590: PUSH
3591: LD_INT 1
3593: GREATER
3594: ST_TO_ADDR
// end else
3595: GO 3597
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3597: LD_EXP 1
3601: PPUSH
3602: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3606: LD_EXP 16
3610: PPUSH
3611: CALL 19760 0 1
3615: IFFALSE 3646
// begin for i in mpMarkedAreas do
3617: LD_ADDR_VAR 0 2
3621: PUSH
3622: LD_EXP 16
3626: PUSH
3627: FOR_IN
3628: IFFALSE 3644
// SetAreaMapShow ( i , 0 ) ;
3630: LD_VAR 0 2
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 424
3642: GO 3627
3644: POP
3645: POP
// end ; for i := 1 to 8 do
3646: LD_ADDR_VAR 0 2
3650: PUSH
3651: DOUBLE
3652: LD_INT 1
3654: DEC
3655: ST_TO_ADDR
3656: LD_INT 8
3658: PUSH
3659: FOR_TO
3660: IFFALSE 4996
// begin if not mpSidePositions [ i ] then
3662: LD_EXP 5
3666: PUSH
3667: LD_VAR 0 2
3671: ARRAY
3672: NOT
3673: IFFALSE 3677
// continue ;
3675: GO 3659
// side := i ;
3677: LD_ADDR_VAR 0 7
3681: PUSH
3682: LD_VAR 0 2
3686: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3687: LD_ADDR_VAR 0 9
3691: PUSH
3692: LD_EXP 7
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3703: LD_ADDR_VAR 0 8
3707: PUSH
3708: LD_EXP 5
3712: PUSH
3713: LD_VAR 0 2
3717: ARRAY
3718: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3719: LD_EXP 10
3723: PPUSH
3724: CALL 19760 0 1
3728: IFFALSE 3805
// begin for j in mpOilDeposits [ pos ] do
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: LD_EXP 10
3739: PUSH
3740: LD_VAR 0 8
3744: ARRAY
3745: PUSH
3746: FOR_IN
3747: IFFALSE 3803
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3749: LD_VAR 0 3
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_VAR 0 3
3762: PUSH
3763: LD_INT 2
3765: ARRAY
3766: PPUSH
3767: LD_INT 2
3769: PPUSH
3770: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3774: LD_VAR 0 3
3778: PUSH
3779: LD_INT 1
3781: ARRAY
3782: PPUSH
3783: LD_VAR 0 3
3787: PUSH
3788: LD_INT 2
3790: ARRAY
3791: PPUSH
3792: LD_VAR 0 7
3796: PPUSH
3797: CALL_OW 441
// end ;
3801: GO 3746
3803: POP
3804: POP
// end ; if Count ( mpSibDeposits ) then
3805: LD_EXP 11
3809: PPUSH
3810: CALL 19760 0 1
3814: IFFALSE 3891
// begin for j in mpSibDeposits [ pos ] do
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: LD_EXP 11
3825: PUSH
3826: LD_VAR 0 8
3830: ARRAY
3831: PUSH
3832: FOR_IN
3833: IFFALSE 3889
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3835: LD_VAR 0 3
3839: PUSH
3840: LD_INT 1
3842: ARRAY
3843: PPUSH
3844: LD_VAR 0 3
3848: PUSH
3849: LD_INT 2
3851: ARRAY
3852: PPUSH
3853: LD_INT 3
3855: PPUSH
3856: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3860: LD_VAR 0 3
3864: PUSH
3865: LD_INT 1
3867: ARRAY
3868: PPUSH
3869: LD_VAR 0 3
3873: PUSH
3874: LD_INT 2
3876: ARRAY
3877: PPUSH
3878: LD_VAR 0 7
3882: PPUSH
3883: CALL_OW 441
// end ;
3887: GO 3832
3889: POP
3890: POP
// end ; InitBc ;
3891: CALL_OW 21
// InitUc ;
3895: CALL_OW 18
// uc_side := side ;
3899: LD_ADDR_OWVAR 20
3903: PUSH
3904: LD_VAR 0 7
3908: ST_TO_ADDR
// uc_nation := nation ;
3909: LD_ADDR_OWVAR 21
3913: PUSH
3914: LD_VAR 0 9
3918: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3919: LD_EXP 20
3923: PUSH
3924: LD_INT 1
3926: NEG
3927: GREATER
3928: IFFALSE 4087
// begin x := mpStartPos [ pos ] [ 1 ] ;
3930: LD_ADDR_VAR 0 5
3934: PUSH
3935: LD_EXP 19
3939: PUSH
3940: LD_VAR 0 8
3944: ARRAY
3945: PUSH
3946: LD_INT 1
3948: ARRAY
3949: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3950: LD_ADDR_VAR 0 6
3954: PUSH
3955: LD_EXP 19
3959: PUSH
3960: LD_VAR 0 8
3964: ARRAY
3965: PUSH
3966: LD_INT 2
3968: ARRAY
3969: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3970: LD_VAR 0 5
3974: PPUSH
3975: LD_VAR 0 6
3979: PPUSH
3980: LD_INT 12
3982: PPUSH
3983: LD_INT 2
3985: PPUSH
3986: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3990: LD_ADDR_EXP 21
3994: PUSH
3995: LD_EXP 21
3999: PPUSH
4000: LD_VAR 0 7
4004: PPUSH
4005: LD_VAR 0 7
4009: PPUSH
4010: LD_VAR 0 5
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: LD_INT 1
4022: PUSH
4023: LD_INT 100
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: LD_INT 2
4032: PUSH
4033: LD_INT 70
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 3
4042: PUSH
4043: LD_INT 40
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: LD_INT 10
4052: PUSH
4053: LD_INT 25
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PUSH
4060: LD_INT 20
4062: PUSH
4063: LD_INT 100
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: PPUSH
4077: CALL_OW 418
4081: PPUSH
4082: CALL_OW 1
4086: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4087: LD_EXP 12
4091: PPUSH
4092: CALL 19760 0 1
4096: IFFALSE 4280
// begin if mpGameType = GameTypeSurvival then
4098: LD_EXP 1
4102: PUSH
4103: LD_INT 2
4105: EQUAL
4106: IFFALSE 4126
// begin bc_level := 10 ;
4108: LD_ADDR_OWVAR 43
4112: PUSH
4113: LD_INT 10
4115: ST_TO_ADDR
// bc_type := b_warehouse ;
4116: LD_ADDR_OWVAR 42
4120: PUSH
4121: LD_INT 1
4123: ST_TO_ADDR
// end else
4124: GO 4142
// begin bc_level := 0 ;
4126: LD_ADDR_OWVAR 43
4130: PUSH
4131: LD_INT 0
4133: ST_TO_ADDR
// bc_type := b_depot ;
4134: LD_ADDR_OWVAR 42
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4142: LD_ADDR_VAR 0 4
4146: PUSH
4147: LD_EXP 12
4151: PUSH
4152: LD_VAR 0 8
4156: ARRAY
4157: PUSH
4158: LD_INT 1
4160: ARRAY
4161: PPUSH
4162: LD_EXP 12
4166: PUSH
4167: LD_VAR 0 8
4171: ARRAY
4172: PUSH
4173: LD_INT 2
4175: ARRAY
4176: PPUSH
4177: LD_EXP 12
4181: PUSH
4182: LD_VAR 0 8
4186: ARRAY
4187: PUSH
4188: LD_INT 3
4190: ARRAY
4191: PPUSH
4192: CALL_OW 47
4196: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4197: LD_VAR 0 4
4201: PPUSH
4202: LD_STRING @
4204: PUSH
4205: LD_VAR 0 7
4209: STR
4210: PPUSH
4211: CALL_OW 500
// if Count ( mpStartingResources ) then
4215: LD_EXP 13
4219: PPUSH
4220: CALL 19760 0 1
4224: IFFALSE 4278
// begin for j := 1 to mpStartingResources do
4226: LD_ADDR_VAR 0 3
4230: PUSH
4231: DOUBLE
4232: LD_INT 1
4234: DEC
4235: ST_TO_ADDR
4236: LD_EXP 13
4240: PUSH
4241: FOR_TO
4242: IFFALSE 4276
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4244: LD_VAR 0 4
4248: PPUSH
4249: CALL_OW 274
4253: PPUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: LD_EXP 13
4263: PUSH
4264: LD_VAR 0 3
4268: ARRAY
4269: PPUSH
4270: CALL_OW 277
4274: GO 4241
4276: POP
4277: POP
// end ; end else
4278: GO 4487
// if Count ( mpStartingResources ) then
4280: LD_EXP 13
4284: PPUSH
4285: CALL 19760 0 1
4289: IFFALSE 4487
// begin x := mpStartPos [ pos ] [ 1 ] ;
4291: LD_ADDR_VAR 0 5
4295: PUSH
4296: LD_EXP 19
4300: PUSH
4301: LD_VAR 0 8
4305: ARRAY
4306: PUSH
4307: LD_INT 1
4309: ARRAY
4310: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4311: LD_ADDR_VAR 0 6
4315: PUSH
4316: LD_EXP 19
4320: PUSH
4321: LD_VAR 0 8
4325: ARRAY
4326: PUSH
4327: LD_INT 2
4329: ARRAY
4330: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4331: LD_ADDR_VAR 0 3
4335: PUSH
4336: DOUBLE
4337: LD_INT 1
4339: DEC
4340: ST_TO_ADDR
4341: LD_EXP 13
4345: PUSH
4346: FOR_TO
4347: IFFALSE 4485
// begin resources := mpStartingResources [ j ] ;
4349: LD_ADDR_VAR 0 13
4353: PUSH
4354: LD_EXP 13
4358: PUSH
4359: LD_VAR 0 3
4363: ARRAY
4364: ST_TO_ADDR
// if resources = 0 then
4365: LD_VAR 0 13
4369: PUSH
4370: LD_INT 0
4372: EQUAL
4373: IFFALSE 4377
// continue ;
4375: GO 4346
// repeat if resources >= 50 then
4377: LD_VAR 0 13
4381: PUSH
4382: LD_INT 50
4384: GREATEREQUAL
4385: IFFALSE 4431
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4387: LD_VAR 0 3
4391: PPUSH
4392: LD_INT 5
4394: PPUSH
4395: LD_VAR 0 5
4399: PPUSH
4400: LD_VAR 0 6
4404: PPUSH
4405: LD_INT 6
4407: PPUSH
4408: LD_INT 0
4410: PPUSH
4411: CALL_OW 60
// resources := resources - 50 ;
4415: LD_ADDR_VAR 0 13
4419: PUSH
4420: LD_VAR 0 13
4424: PUSH
4425: LD_INT 50
4427: MINUS
4428: ST_TO_ADDR
// end else
4429: GO 4473
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4431: LD_VAR 0 3
4435: PPUSH
4436: LD_VAR 0 13
4440: PUSH
4441: LD_INT 10
4443: DIV
4444: PPUSH
4445: LD_VAR 0 5
4449: PPUSH
4450: LD_VAR 0 6
4454: PPUSH
4455: LD_INT 6
4457: PPUSH
4458: LD_INT 0
4460: PPUSH
4461: CALL_OW 60
// resources := 0 ;
4465: LD_ADDR_VAR 0 13
4469: PUSH
4470: LD_INT 0
4472: ST_TO_ADDR
// end ; until resources <= 0 ;
4473: LD_VAR 0 13
4477: PUSH
4478: LD_INT 0
4480: LESSEQUAL
4481: IFFALSE 4377
// end ;
4483: GO 4346
4485: POP
4486: POP
// end ; if Count ( mpBuildings ) then
4487: LD_EXP 15
4491: PPUSH
4492: CALL 19760 0 1
4496: IFFALSE 4574
// begin for j in mpBuildings [ pos ] do
4498: LD_ADDR_VAR 0 3
4502: PUSH
4503: LD_EXP 15
4507: PUSH
4508: LD_VAR 0 8
4512: ARRAY
4513: PUSH
4514: FOR_IN
4515: IFFALSE 4572
// begin bc_level := 0 ;
4517: LD_ADDR_OWVAR 43
4521: PUSH
4522: LD_INT 0
4524: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4525: LD_ADDR_OWVAR 42
4529: PUSH
4530: LD_VAR 0 3
4534: PUSH
4535: LD_INT 1
4537: ARRAY
4538: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4539: LD_VAR 0 3
4543: PUSH
4544: LD_INT 2
4546: ARRAY
4547: PPUSH
4548: LD_VAR 0 3
4552: PUSH
4553: LD_INT 3
4555: ARRAY
4556: PPUSH
4557: LD_VAR 0 3
4561: PUSH
4562: LD_INT 4
4564: ARRAY
4565: PPUSH
4566: CALL_OW 47
// end ;
4570: GO 4514
4572: POP
4573: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4574: LD_EXP 24
4578: IFFALSE 4598
4580: PUSH
4581: LD_INT 20
4583: PPUSH
4584: LD_VAR 0 7
4588: PPUSH
4589: CALL_OW 321
4593: PUSH
4594: LD_INT 1
4596: EQUAL
4597: AND
4598: IFFALSE 4615
// SetTech ( tech_SibDet , side , state_researched ) ;
4600: LD_INT 20
4602: PPUSH
4603: LD_VAR 0 7
4607: PPUSH
4608: LD_INT 2
4610: PPUSH
4611: CALL_OW 322
// if not mpArtifacts then
4615: LD_EXP 42
4619: NOT
4620: IFFALSE 4637
// SetTech ( tech_artifact , side , state_disabled ) ;
4622: LD_INT 24
4624: PPUSH
4625: LD_VAR 0 7
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: CALL_OW 322
// if mpSibBomb = 1 then
4637: LD_EXP 26
4641: PUSH
4642: LD_INT 1
4644: EQUAL
4645: IFFALSE 4664
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4647: LD_INT 25
4649: PPUSH
4650: LD_VAR 0 7
4654: PPUSH
4655: LD_INT 1
4657: PPUSH
4658: CALL_OW 322
// end else
4662: GO 4679
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4664: LD_INT 25
4666: PPUSH
4667: LD_VAR 0 7
4671: PPUSH
4672: LD_INT 0
4674: PPUSH
4675: CALL_OW 322
// end ; if mpVehicles then
4679: LD_EXP 34
4683: IFFALSE 4782
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4685: LD_ADDR_VAR 0 3
4689: PUSH
4690: LD_VAR 0 7
4694: PPUSH
4695: LD_VAR 0 9
4699: PPUSH
4700: LD_EXP 34
4704: PPUSH
4705: CALL 5906 0 3
4709: PUSH
4710: FOR_IN
4711: IFFALSE 4780
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 5
4723: PPUSH
4724: CALL_OW 12
4728: PPUSH
4729: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4733: LD_VAR 0 3
4737: PPUSH
4738: LD_EXP 19
4742: PUSH
4743: LD_VAR 0 8
4747: ARRAY
4748: PUSH
4749: LD_INT 1
4751: ARRAY
4752: PPUSH
4753: LD_EXP 19
4757: PUSH
4758: LD_VAR 0 8
4762: ARRAY
4763: PUSH
4764: LD_INT 2
4766: ARRAY
4767: PPUSH
4768: LD_INT 12
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL_OW 50
// end ;
4778: GO 4710
4780: POP
4781: POP
// end ; uc_nation := nation ;
4782: LD_ADDR_OWVAR 21
4786: PUSH
4787: LD_VAR 0 9
4791: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4792: LD_ADDR_VAR 0 11
4796: PUSH
4797: LD_VAR 0 7
4801: PPUSH
4802: LD_VAR 0 9
4806: PPUSH
4807: LD_EXP 22
4811: PPUSH
4812: LD_EXP 23
4816: PPUSH
4817: CALL 5408 0 4
4821: ST_TO_ADDR
// for j in team do
4822: LD_ADDR_VAR 0 3
4826: PUSH
4827: LD_VAR 0 11
4831: PUSH
4832: FOR_IN
4833: IFFALSE 4882
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4835: LD_VAR 0 3
4839: PPUSH
4840: LD_EXP 19
4844: PUSH
4845: LD_VAR 0 8
4849: ARRAY
4850: PUSH
4851: LD_INT 1
4853: ARRAY
4854: PPUSH
4855: LD_EXP 19
4859: PUSH
4860: LD_VAR 0 8
4864: ARRAY
4865: PUSH
4866: LD_INT 2
4868: ARRAY
4869: PPUSH
4870: LD_INT 12
4872: PPUSH
4873: LD_INT 0
4875: PPUSH
4876: CALL_OW 50
4880: GO 4832
4882: POP
4883: POP
// if mpApemans then
4884: LD_EXP 28
4888: IFFALSE 4994
// begin for j := 1 to mpApemans do
4890: LD_ADDR_VAR 0 3
4894: PUSH
4895: DOUBLE
4896: LD_INT 1
4898: DEC
4899: ST_TO_ADDR
4900: LD_EXP 28
4904: PUSH
4905: FOR_TO
4906: IFFALSE 4992
// begin PrepareApeman ( - 5 ) ;
4908: LD_INT 5
4910: NEG
4911: PPUSH
4912: CALL 51819 0 1
// ape := CreateHuman ;
4916: LD_ADDR_VAR 0 10
4920: PUSH
4921: CALL_OW 44
4925: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4926: LD_ADDR_EXP 30
4930: PUSH
4931: LD_EXP 30
4935: PPUSH
4936: LD_VAR 0 8
4940: PPUSH
4941: LD_EXP 30
4945: PUSH
4946: LD_VAR 0 8
4950: ARRAY
4951: PPUSH
4952: LD_VAR 0 10
4956: PPUSH
4957: CALL 55692 0 2
4961: PPUSH
4962: CALL_OW 1
4966: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4967: LD_VAR 0 10
4971: PPUSH
4972: LD_EXP 29
4976: PUSH
4977: LD_VAR 0 8
4981: ARRAY
4982: PPUSH
4983: LD_INT 0
4985: PPUSH
4986: CALL_OW 49
// end ;
4990: GO 4905
4992: POP
4993: POP
// end ; end ;
4994: GO 3659
4996: POP
4997: POP
// if not mpTeamGame then
4998: LD_EXP 9
5002: NOT
5003: IFFALSE 5101
// begin for i := 1 to 8 do
5005: LD_ADDR_VAR 0 2
5009: PUSH
5010: DOUBLE
5011: LD_INT 1
5013: DEC
5014: ST_TO_ADDR
5015: LD_INT 8
5017: PUSH
5018: FOR_TO
5019: IFFALSE 5097
// for j := 1 to 8 do
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: DOUBLE
5027: LD_INT 1
5029: DEC
5030: ST_TO_ADDR
5031: LD_INT 8
5033: PUSH
5034: FOR_TO
5035: IFFALSE 5093
// if i <> j then
5037: LD_VAR 0 2
5041: PUSH
5042: LD_VAR 0 3
5046: NONEQUAL
5047: IFFALSE 5071
// SetAttitude ( i , j , att_neutral , true ) else
5049: LD_VAR 0 2
5053: PPUSH
5054: LD_VAR 0 3
5058: PPUSH
5059: LD_INT 0
5061: PPUSH
5062: LD_INT 1
5064: PPUSH
5065: CALL_OW 80
5069: GO 5091
// SetAttitude ( i , j , att_friend , true ) ;
5071: LD_VAR 0 2
5075: PPUSH
5076: LD_VAR 0 3
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: LD_INT 1
5086: PPUSH
5087: CALL_OW 80
5091: GO 5034
5093: POP
5094: POP
5095: GO 5018
5097: POP
5098: POP
// end else
5099: GO 5276
// begin if mpSharedVision then
5101: LD_EXP 14
5105: IFFALSE 5170
// begin for i in mpTeams do
5107: LD_ADDR_VAR 0 2
5111: PUSH
5112: LD_EXP 8
5116: PUSH
5117: FOR_IN
5118: IFFALSE 5168
// for j := 2 to i do
5120: LD_ADDR_VAR 0 3
5124: PUSH
5125: DOUBLE
5126: LD_INT 2
5128: DEC
5129: ST_TO_ADDR
5130: LD_VAR 0 2
5134: PUSH
5135: FOR_TO
5136: IFFALSE 5164
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5138: LD_VAR 0 2
5142: PUSH
5143: LD_VAR 0 3
5147: ARRAY
5148: PPUSH
5149: LD_VAR 0 2
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 343
5162: GO 5135
5164: POP
5165: POP
5166: GO 5117
5168: POP
5169: POP
// end ; for i := 1 to 8 do
5170: LD_ADDR_VAR 0 2
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_INT 8
5182: PUSH
5183: FOR_TO
5184: IFFALSE 5274
// for j := 1 to 8 do
5186: LD_ADDR_VAR 0 3
5190: PUSH
5191: DOUBLE
5192: LD_INT 1
5194: DEC
5195: ST_TO_ADDR
5196: LD_INT 8
5198: PUSH
5199: FOR_TO
5200: IFFALSE 5270
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5202: LD_EXP 6
5206: PUSH
5207: LD_VAR 0 2
5211: ARRAY
5212: PUSH
5213: LD_EXP 6
5217: PUSH
5218: LD_VAR 0 3
5222: ARRAY
5223: EQUAL
5224: IFFALSE 5248
// SetAttitude ( i , j , att_friend , true ) else
5226: LD_VAR 0 2
5230: PPUSH
5231: LD_VAR 0 3
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: LD_INT 1
5241: PPUSH
5242: CALL_OW 80
5246: GO 5268
// SetAttitude ( i , j , att_enemy , true ) ;
5248: LD_VAR 0 2
5252: PPUSH
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_INT 2
5260: PPUSH
5261: LD_INT 1
5263: PPUSH
5264: CALL_OW 80
5268: GO 5199
5270: POP
5271: POP
5272: GO 5183
5274: POP
5275: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5276: LD_ADDR_OWVAR 71
5280: PUSH
5281: LD_EXP 7
5285: PUSH
5286: LD_OWVAR 2
5290: ARRAY
5291: ST_TO_ADDR
// if IAmSpec then
5292: CALL_OW 531
5296: IFFALSE 5337
// begin FogOff ( true ) ;
5298: LD_INT 1
5300: PPUSH
5301: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5305: LD_EXP 27
5309: PUSH
5310: LD_INT 1
5312: ARRAY
5313: PUSH
5314: LD_INT 2
5316: DIV
5317: PPUSH
5318: LD_EXP 27
5322: PUSH
5323: LD_INT 2
5325: ARRAY
5326: PUSH
5327: LD_INT 2
5329: DIV
5330: PPUSH
5331: CALL_OW 86
// end else
5335: GO 5383
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5337: LD_EXP 19
5341: PUSH
5342: LD_EXP 5
5346: PUSH
5347: LD_OWVAR 2
5351: ARRAY
5352: ARRAY
5353: PUSH
5354: LD_INT 1
5356: ARRAY
5357: PPUSH
5358: LD_EXP 19
5362: PUSH
5363: LD_EXP 5
5367: PUSH
5368: LD_OWVAR 2
5372: ARRAY
5373: ARRAY
5374: PUSH
5375: LD_INT 2
5377: ARRAY
5378: PPUSH
5379: CALL_OW 86
// end ; BeginBuildUp ;
5383: CALL 6439 0 0
// enable ( mpActive ) ;
5387: LD_INT 100
5389: ENABLE_MARKED
// enable ( mpGameType ) ;
5390: LD_EXP 1
5394: ENABLE_MARKED
// mpGameActive := true ;
5395: LD_ADDR_EXP 37
5399: PUSH
5400: LD_INT 1
5402: ST_TO_ADDR
// end ;
5403: LD_VAR 0 1
5407: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5408: LD_INT 0
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
// result := [ ] ;
5414: LD_ADDR_VAR 0 5
5418: PUSH
5419: EMPTY
5420: ST_TO_ADDR
// class := class_soldier ;
5421: LD_ADDR_VAR 0 8
5425: PUSH
5426: LD_INT 1
5428: ST_TO_ADDR
// uc_side := side ;
5429: LD_ADDR_OWVAR 20
5433: PUSH
5434: LD_VAR 0 1
5438: ST_TO_ADDR
// uc_nation := nation ;
5439: LD_ADDR_OWVAR 21
5443: PUSH
5444: LD_VAR 0 2
5448: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5449: LD_ADDR_OWVAR 26
5453: PUSH
5454: LD_OWVAR 19
5458: PUSH
5459: LD_VAR 0 1
5463: ARRAY
5464: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5465: LD_INT 1
5467: PPUSH
5468: LD_INT 2
5470: PPUSH
5471: CALL_OW 12
5475: PPUSH
5476: LD_VAR 0 8
5480: PPUSH
5481: LD_VAR 0 4
5485: PUSH
5486: LD_INT 2
5488: PLUS
5489: PPUSH
5490: CALL_OW 380
// hc_importance := 105 ;
5494: LD_ADDR_OWVAR 32
5498: PUSH
5499: LD_INT 105
5501: ST_TO_ADDR
// if Multiplayer then
5502: LD_OWVAR 4
5506: IFFALSE 5546
// begin hc_gallery := MULTIAVATARS ;
5508: LD_ADDR_OWVAR 33
5512: PUSH
5513: LD_STRING MULTIAVATARS
5515: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5516: LD_ADDR_OWVAR 34
5520: PUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 525
5530: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5531: LD_ADDR_OWVAR 27
5535: PUSH
5536: LD_VAR 0 1
5540: PPUSH
5541: CALL_OW 526
5545: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5546: LD_ADDR_VAR 0 5
5550: PUSH
5551: LD_VAR 0 5
5555: PPUSH
5556: CALL_OW 44
5560: PPUSH
5561: CALL 55692 0 2
5565: ST_TO_ADDR
// if mpTeamPreset then
5566: LD_LOC 1
5570: IFFALSE 5666
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5572: LD_LOC 1
5576: PUSH
5577: LD_INT 1
5579: ARRAY
5580: PPUSH
5581: LD_VAR 0 5
5585: PUSH
5586: LD_VAR 0 5
5590: ARRAY
5591: PPUSH
5592: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5596: LD_VAR 0 5
5600: PUSH
5601: LD_VAR 0 5
5605: ARRAY
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: LD_LOC 1
5614: PUSH
5615: LD_INT 1
5617: ARRAY
5618: PPUSH
5619: LD_INT 1
5621: PPUSH
5622: CALL_OW 260
5626: PPUSH
5627: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5631: LD_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: ARRAY
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: LD_LOC 1
5649: PUSH
5650: LD_INT 1
5652: ARRAY
5653: PPUSH
5654: LD_INT 2
5656: PPUSH
5657: CALL_OW 260
5661: PPUSH
5662: CALL_OW 239
// end ; InitHc_All ( ) ;
5666: CALL_OW 584
// class := 2 ;
5670: LD_ADDR_VAR 0 8
5674: PUSH
5675: LD_INT 2
5677: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5678: LD_ADDR_VAR 0 6
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 1
5695: MINUS
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5882
// begin PrepareHuman ( false , class , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_VAR 0 8
5707: PPUSH
5708: LD_VAR 0 4
5712: PPUSH
5713: CALL_OW 380
// un := CreateHuman ;
5717: LD_ADDR_VAR 0 7
5721: PUSH
5722: CALL_OW 44
5726: ST_TO_ADDR
// result := Join ( result , un ) ;
5727: LD_ADDR_VAR 0 5
5731: PUSH
5732: LD_VAR 0 5
5736: PPUSH
5737: LD_VAR 0 7
5741: PPUSH
5742: CALL 55692 0 2
5746: ST_TO_ADDR
// if mpTeamPreset then
5747: LD_LOC 1
5751: IFFALSE 5847
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5753: LD_LOC 1
5757: PUSH
5758: LD_VAR 0 6
5762: PUSH
5763: LD_INT 1
5765: PLUS
5766: ARRAY
5767: PPUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5777: LD_VAR 0 7
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: LD_LOC 1
5789: PUSH
5790: LD_VAR 0 6
5794: PUSH
5795: LD_INT 1
5797: PLUS
5798: ARRAY
5799: PPUSH
5800: LD_INT 1
5802: PPUSH
5803: CALL_OW 260
5807: PPUSH
5808: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5812: LD_VAR 0 7
5816: PPUSH
5817: LD_INT 2
5819: PPUSH
5820: LD_LOC 1
5824: PUSH
5825: LD_VAR 0 6
5829: PUSH
5830: LD_INT 1
5832: PLUS
5833: ARRAY
5834: PPUSH
5835: LD_INT 2
5837: PPUSH
5838: CALL_OW 260
5842: PPUSH
5843: CALL_OW 239
// end ; class := Inc ( class ) ;
5847: LD_ADDR_VAR 0 8
5851: PUSH
5852: LD_VAR 0 8
5856: PPUSH
5857: CALL 57065 0 1
5861: ST_TO_ADDR
// if class = 5 then
5862: LD_VAR 0 8
5866: PUSH
5867: LD_INT 5
5869: EQUAL
5870: IFFALSE 5880
// class := 1 ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 1
5879: ST_TO_ADDR
// end ;
5880: GO 5697
5882: POP
5883: POP
// if not mpTeamPreset then
5884: LD_LOC 1
5888: NOT
5889: IFFALSE 5901
// mpTeamPreset := result ;
5891: LD_ADDR_LOC 1
5895: PUSH
5896: LD_VAR 0 5
5900: ST_TO_ADDR
// end ;
5901: LD_VAR 0 5
5905: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5906: LD_INT 0
5908: PPUSH
5909: PPUSH
// result := [ ] ;
5910: LD_ADDR_VAR 0 4
5914: PUSH
5915: EMPTY
5916: ST_TO_ADDR
// if not vehicles then
5917: LD_VAR 0 3
5921: NOT
5922: IFFALSE 5926
// exit ;
5924: GO 6140
// for i := 1 to vehicles [ nation ] do
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: DOUBLE
5932: LD_INT 1
5934: DEC
5935: ST_TO_ADDR
5936: LD_VAR 0 3
5940: PUSH
5941: LD_VAR 0 2
5945: ARRAY
5946: PUSH
5947: FOR_TO
5948: IFFALSE 6138
// begin uc_side := side ;
5950: LD_ADDR_OWVAR 20
5954: PUSH
5955: LD_VAR 0 1
5959: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5960: LD_VAR 0 3
5964: PUSH
5965: LD_VAR 0 2
5969: ARRAY
5970: PUSH
5971: LD_VAR 0 5
5975: ARRAY
5976: PPUSH
5977: CALL 19760 0 1
5981: PUSH
5982: LD_INT 4
5984: GREATER
5985: IFFALSE 6015
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5987: LD_ADDR_OWVAR 21
5991: PUSH
5992: LD_VAR 0 3
5996: PUSH
5997: LD_VAR 0 2
6001: ARRAY
6002: PUSH
6003: LD_VAR 0 5
6007: ARRAY
6008: PUSH
6009: LD_INT 5
6011: ARRAY
6012: ST_TO_ADDR
6013: GO 6025
// uc_nation := nation ;
6015: LD_ADDR_OWVAR 21
6019: PUSH
6020: LD_VAR 0 2
6024: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6025: LD_VAR 0 3
6029: PUSH
6030: LD_VAR 0 2
6034: ARRAY
6035: PUSH
6036: LD_VAR 0 5
6040: ARRAY
6041: PUSH
6042: LD_INT 1
6044: ARRAY
6045: PPUSH
6046: LD_VAR 0 3
6050: PUSH
6051: LD_VAR 0 2
6055: ARRAY
6056: PUSH
6057: LD_VAR 0 5
6061: ARRAY
6062: PUSH
6063: LD_INT 2
6065: ARRAY
6066: PPUSH
6067: LD_VAR 0 3
6071: PUSH
6072: LD_VAR 0 2
6076: ARRAY
6077: PUSH
6078: LD_VAR 0 5
6082: ARRAY
6083: PUSH
6084: LD_INT 3
6086: ARRAY
6087: PPUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_VAR 0 2
6097: ARRAY
6098: PUSH
6099: LD_VAR 0 5
6103: ARRAY
6104: PUSH
6105: LD_INT 4
6107: ARRAY
6108: PPUSH
6109: LD_INT 80
6111: PPUSH
6112: CALL 22522 0 5
// result := Join ( result , CreateVehicle ) ;
6116: LD_ADDR_VAR 0 4
6120: PUSH
6121: LD_VAR 0 4
6125: PPUSH
6126: CALL_OW 45
6130: PPUSH
6131: CALL 55692 0 2
6135: ST_TO_ADDR
// end ;
6136: GO 5947
6138: POP
6139: POP
// end ;
6140: LD_VAR 0 4
6144: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6145: LD_INT 0
6147: PPUSH
6148: PPUSH
// for i in mpBattleFlags do
6149: LD_ADDR_VAR 0 3
6153: PUSH
6154: LD_EXP 21
6158: PUSH
6159: FOR_IN
6160: IFFALSE 6237
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6162: LD_VAR 0 3
6166: PPUSH
6167: LD_INT 1
6169: PUSH
6170: LD_VAR 0 1
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 2
6181: PUSH
6182: LD_VAR 0 1
6186: PUSH
6187: LD_REAL  7.00000000000000E-0001
6190: MUL
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: LD_VAR 0 1
6203: PUSH
6204: LD_REAL  4.00000000000000E-0001
6207: MUL
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: LD_INT 20
6215: PUSH
6216: LD_VAR 0 1
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 423
6235: GO 6159
6237: POP
6238: POP
// end ;
6239: LD_VAR 0 2
6243: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6244: LD_INT 100
6246: IFFALSE 6341
6248: GO 6250
6250: DISABLE
6251: LD_INT 0
6253: PPUSH
6254: PPUSH
// begin if mpBattleFlag <= 0 then
6255: LD_EXP 20
6259: PUSH
6260: LD_INT 0
6262: LESSEQUAL
6263: IFFALSE 6267
// exit ;
6265: GO 6341
// strength := 100 ;
6267: LD_ADDR_VAR 0 2
6271: PUSH
6272: LD_INT 100
6274: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6275: LD_EXP 20
6279: PPUSH
6280: CALL_OW 67
// strength := Dec ( strength ) ;
6284: LD_ADDR_VAR 0 2
6288: PUSH
6289: LD_VAR 0 2
6293: PPUSH
6294: CALL 57087 0 1
6298: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6299: LD_VAR 0 2
6303: PPUSH
6304: CALL 6145 0 1
// until not strength ;
6308: LD_VAR 0 2
6312: NOT
6313: IFFALSE 6275
// for i in mpBattleFlags do
6315: LD_ADDR_VAR 0 1
6319: PUSH
6320: LD_EXP 21
6324: PUSH
6325: FOR_IN
6326: IFFALSE 6339
// KillBattleFlag ( i ) ;
6328: LD_VAR 0 1
6332: PPUSH
6333: CALL_OW 419
6337: GO 6325
6339: POP
6340: POP
// end ;
6341: PPOPN 2
6343: END
// every 0 0$1 marked mpActive do var side , tmp ;
6344: GO 6346
6346: DISABLE
6347: LD_INT 0
6349: PPUSH
6350: PPUSH
// begin if mpSibBomb <= 1 then
6351: LD_EXP 26
6355: PUSH
6356: LD_INT 1
6358: LESSEQUAL
6359: IFFALSE 6363
// exit ;
6361: GO 6436
// tmp := mpSibBomb ;
6363: LD_ADDR_VAR 0 2
6367: PUSH
6368: LD_EXP 26
6372: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6373: LD_INT 35
6375: PPUSH
6376: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6380: LD_ADDR_VAR 0 2
6384: PUSH
6385: LD_VAR 0 2
6389: PUSH
6390: LD_INT 35
6392: MINUS
6393: ST_TO_ADDR
// until not tmp ;
6394: LD_VAR 0 2
6398: NOT
6399: IFFALSE 6373
// for side := 1 to 8 do
6401: LD_ADDR_VAR 0 1
6405: PUSH
6406: DOUBLE
6407: LD_INT 1
6409: DEC
6410: ST_TO_ADDR
6411: LD_INT 8
6413: PUSH
6414: FOR_TO
6415: IFFALSE 6434
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6417: LD_INT 25
6419: PPUSH
6420: LD_VAR 0 1
6424: PPUSH
6425: LD_INT 1
6427: PPUSH
6428: CALL_OW 322
6432: GO 6414
6434: POP
6435: POP
// end ;
6436: PPOPN 2
6438: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
6443: PPUSH
// mpBuildUpTimeDelay := 0 ;
6444: LD_ADDR_EXP 44
6448: PUSH
6449: LD_INT 0
6451: ST_TO_ADDR
// if not mpBuildUpTime then
6452: LD_EXP 18
6456: NOT
6457: IFFALSE 6461
// exit ;
6459: GO 6650
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6461: LD_ADDR_EXP 44
6465: PUSH
6466: LD_INT 8400
6468: PUSH
6469: LD_INT 2100
6471: PUSH
6472: LD_EXP 18
6476: MUL
6477: PLUS
6478: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6479: LD_ADDR_EXP 45
6483: PUSH
6484: LD_INT 1
6486: ST_TO_ADDR
// for i := 1 to 8 do
6487: LD_ADDR_VAR 0 2
6491: PUSH
6492: DOUBLE
6493: LD_INT 1
6495: DEC
6496: ST_TO_ADDR
6497: LD_INT 8
6499: PUSH
6500: FOR_TO
6501: IFFALSE 6648
// if mpSidePositions [ i ] then
6503: LD_EXP 5
6507: PUSH
6508: LD_VAR 0 2
6512: ARRAY
6513: IFFALSE 6646
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6515: LD_EXP 17
6519: PUSH
6520: LD_EXP 5
6524: PUSH
6525: LD_VAR 0 2
6529: ARRAY
6530: ARRAY
6531: PPUSH
6532: LD_INT 5
6534: PPUSH
6535: CALL_OW 424
// for j := 1 to 8 do
6539: LD_ADDR_VAR 0 3
6543: PUSH
6544: DOUBLE
6545: LD_INT 1
6547: DEC
6548: ST_TO_ADDR
6549: LD_INT 8
6551: PUSH
6552: FOR_TO
6553: IFFALSE 6644
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6555: LD_EXP 5
6559: PUSH
6560: LD_VAR 0 3
6564: ARRAY
6565: IFFALSE 6614
6567: PUSH
6568: LD_EXP 6
6572: PUSH
6573: LD_VAR 0 2
6577: ARRAY
6578: PUSH
6579: LD_EXP 6
6583: PUSH
6584: LD_VAR 0 3
6588: ARRAY
6589: NONEQUAL
6590: IFTRUE 6613
6592: PUSH
6593: LD_EXP 9
6597: NOT
6598: IFFALSE 6612
6600: PUSH
6601: LD_VAR 0 2
6605: PUSH
6606: LD_VAR 0 3
6610: NONEQUAL
6611: AND
6612: OR
6613: AND
6614: IFFALSE 6642
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6616: LD_VAR 0 3
6620: PPUSH
6621: LD_EXP 17
6625: PUSH
6626: LD_EXP 5
6630: PUSH
6631: LD_VAR 0 2
6635: ARRAY
6636: ARRAY
6637: PPUSH
6638: CALL_OW 333
6642: GO 6552
6644: POP
6645: POP
// end ;
6646: GO 6500
6648: POP
6649: POP
// end ;
6650: LD_VAR 0 1
6654: RET
// function EndBuildUp ; var i , j ; begin
6655: LD_INT 0
6657: PPUSH
6658: PPUSH
6659: PPUSH
// mpBuildUpTimeActive := false ;
6660: LD_ADDR_EXP 45
6664: PUSH
6665: LD_INT 0
6667: ST_TO_ADDR
// for i := 1 to 8 do
6668: LD_ADDR_VAR 0 2
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 8
6680: PUSH
6681: FOR_TO
6682: IFFALSE 6829
// if mpSidePositions [ i ] then
6684: LD_EXP 5
6688: PUSH
6689: LD_VAR 0 2
6693: ARRAY
6694: IFFALSE 6827
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6696: LD_EXP 17
6700: PUSH
6701: LD_EXP 5
6705: PUSH
6706: LD_VAR 0 2
6710: ARRAY
6711: ARRAY
6712: PPUSH
6713: LD_INT 0
6715: PPUSH
6716: CALL_OW 424
// for j := 1 to 8 do
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: DOUBLE
6726: LD_INT 1
6728: DEC
6729: ST_TO_ADDR
6730: LD_INT 8
6732: PUSH
6733: FOR_TO
6734: IFFALSE 6825
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6736: LD_EXP 5
6740: PUSH
6741: LD_VAR 0 3
6745: ARRAY
6746: IFFALSE 6795
6748: PUSH
6749: LD_EXP 6
6753: PUSH
6754: LD_VAR 0 2
6758: ARRAY
6759: PUSH
6760: LD_EXP 6
6764: PUSH
6765: LD_VAR 0 3
6769: ARRAY
6770: NONEQUAL
6771: IFTRUE 6794
6773: PUSH
6774: LD_EXP 9
6778: NOT
6779: IFFALSE 6793
6781: PUSH
6782: LD_VAR 0 2
6786: PUSH
6787: LD_VAR 0 3
6791: NONEQUAL
6792: AND
6793: OR
6794: AND
6795: IFFALSE 6823
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6797: LD_VAR 0 3
6801: PPUSH
6802: LD_EXP 17
6806: PUSH
6807: LD_EXP 5
6811: PUSH
6812: LD_VAR 0 2
6816: ARRAY
6817: ARRAY
6818: PPUSH
6819: CALL_OW 334
6823: GO 6733
6825: POP
6826: POP
// end ;
6827: GO 6681
6829: POP
6830: POP
// end ;
6831: LD_VAR 0 1
6835: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6836: LD_EXP 45
6840: IFFALSE 7019
6842: GO 6844
6844: DISABLE
6845: LD_INT 0
6847: PPUSH
6848: PPUSH
// begin for i := 1 to 8 do
6849: LD_ADDR_VAR 0 1
6853: PUSH
6854: DOUBLE
6855: LD_INT 1
6857: DEC
6858: ST_TO_ADDR
6859: LD_INT 8
6861: PUSH
6862: FOR_TO
6863: IFFALSE 7016
// if mpSidePositions [ i ] then
6865: LD_EXP 5
6869: PUSH
6870: LD_VAR 0 1
6874: ARRAY
6875: IFFALSE 7014
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6877: LD_ADDR_VAR 0 2
6881: PUSH
6882: LD_EXP 17
6886: PUSH
6887: LD_EXP 5
6891: PUSH
6892: LD_VAR 0 1
6896: ARRAY
6897: ARRAY
6898: PPUSH
6899: LD_INT 2
6901: PUSH
6902: LD_INT 21
6904: PUSH
6905: LD_INT 1
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 21
6914: PUSH
6915: LD_INT 2
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 22
6929: PUSH
6930: LD_OWVAR 2
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 70
6947: PUSH
6948: FOR_IN
6949: IFFALSE 7012
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6951: LD_EXP 6
6955: PUSH
6956: LD_VAR 0 1
6960: ARRAY
6961: PUSH
6962: LD_EXP 6
6966: PUSH
6967: LD_OWVAR 2
6971: ARRAY
6972: NONEQUAL
6973: IFTRUE 6996
6975: PUSH
6976: LD_EXP 9
6980: NOT
6981: IFFALSE 6995
6983: PUSH
6984: LD_VAR 0 1
6988: PUSH
6989: LD_OWVAR 2
6993: NONEQUAL
6994: AND
6995: OR
6996: IFFALSE 7010
// ComMoveToArea ( un , BuildUpEscape ) ;
6998: LD_VAR 0 2
7002: PPUSH
7003: LD_INT 59
7005: PPUSH
7006: CALL_OW 113
7010: GO 6948
7012: POP
7013: POP
7014: GO 6862
7016: POP
7017: POP
// enable ;
7018: ENABLE
// end ;
7019: PPOPN 2
7021: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7022: LD_EXP 18
7026: IFFALSE 7076
7028: GO 7030
7030: DISABLE
7031: LD_INT 0
7033: PPUSH
// begin tmp := mpBuildUpTime ;
7034: LD_ADDR_VAR 0 1
7038: PUSH
7039: LD_EXP 18
7043: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7044: LD_INT 35
7046: PPUSH
7047: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7051: LD_ADDR_VAR 0 1
7055: PUSH
7056: LD_VAR 0 1
7060: PUSH
7061: LD_INT 35
7063: MINUS
7064: ST_TO_ADDR
// until not tmp ;
7065: LD_VAR 0 1
7069: NOT
7070: IFFALSE 7044
// EndBuildUp ;
7072: CALL 6655 0 0
// end ;
7076: PPOPN 1
7078: END
// every 0 0$1 trigger mpActive marked mpWin do
7079: LD_INT 100
7081: IFFALSE 7115
7083: GO 7085
7085: DISABLE
// begin if IAmServer then
7086: CALL_OW 518
7090: IFFALSE 7099
// wait ( 0 0$3 ) ;
7092: LD_INT 105
7094: PPUSH
7095: CALL_OW 67
// if Multiplayer then
7099: LD_OWVAR 4
7103: IFFALSE 7111
// YouWinInMultiplayer else
7105: CALL_OW 106
7109: GO 7115
// YouWin ;
7111: CALL_OW 103
// end ;
7115: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7116: LD_INT 0
7118: PPUSH
// result := false ;
7119: LD_ADDR_VAR 0 3
7123: PUSH
7124: LD_INT 0
7126: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
7127: LD_VAR 0 1
7131: PUSH
7132: LD_INT 1
7134: DOUBLE
7135: EQUAL
7136: IFTRUE 7146
7138: LD_INT 5
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7219
7146: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_INT 22
7154: PUSH
7155: LD_VAR 0 2
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 2
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 33
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 33
7189: PUSH
7190: LD_INT 5
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: PPUSH
7212: CALL 19760 0 1
7216: ST_TO_ADDR
// end ; GameTypeSurvival :
7217: GO 7458
7219: LD_INT 2
7221: DOUBLE
7222: EQUAL
7223: IFTRUE 7227
7225: GO 7357
7227: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7228: LD_ADDR_VAR 0 3
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 2
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 2
7247: PUSH
7248: LD_INT 30
7250: PUSH
7251: LD_INT 0
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 30
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 69
7281: PPUSH
7282: CALL 19760 0 1
7286: IFFALSE 7354
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_VAR 0 2
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 21
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 33
7316: PUSH
7317: LD_INT 3
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 33
7326: PUSH
7327: LD_INT 5
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 69
7348: PPUSH
7349: CALL 19760 0 1
7353: AND
7354: ST_TO_ADDR
// end ; GameTypeKing :
7355: GO 7458
7357: LD_INT 3
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7457
7365: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 22
7373: PUSH
7374: LD_VAR 0 2
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 2
7385: PUSH
7386: LD_INT 21
7388: PUSH
7389: LD_INT 1
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 33
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 33
7408: PUSH
7409: LD_INT 5
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PPUSH
7426: CALL_OW 69
7430: PPUSH
7431: CALL 19760 0 1
7435: IFFALSE 7454
7437: PUSH
7438: LD_VAR 0 2
7442: PPUSH
7443: CALL 10534 0 1
7447: PUSH
7448: LD_EXP 33
7452: LESS
7453: AND
7454: ST_TO_ADDR
// end ; end ;
7455: GO 7458
7457: POP
// end ;
7458: LD_VAR 0 3
7462: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7463: LD_INT 100
7465: IFFALSE 7695
7467: GO 7469
7469: DISABLE
7470: LD_INT 0
7472: PPUSH
7473: PPUSH
// begin if Multiplayer then
7474: LD_OWVAR 4
7478: IFFALSE 7486
// SetPlayerSpectator ( ) else
7480: CALL_OW 572
7484: GO 7495
// FogOff ( your_side ) ;
7486: LD_OWVAR 2
7490: PPUSH
7491: CALL_OW 344
// repeat gameIsOn := false ;
7495: LD_ADDR_VAR 0 1
7499: PUSH
7500: LD_INT 0
7502: ST_TO_ADDR
// for i := 1 to 8 do
7503: LD_ADDR_VAR 0 2
7507: PUSH
7508: DOUBLE
7509: LD_INT 1
7511: DEC
7512: ST_TO_ADDR
7513: LD_INT 8
7515: PUSH
7516: FOR_TO
7517: IFFALSE 7647
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7519: LD_EXP 5
7523: PUSH
7524: LD_VAR 0 2
7528: ARRAY
7529: IFFALSE 7542
7531: PUSH
7532: LD_VAR 0 2
7536: PPUSH
7537: CALL_OW 108
7541: AND
7542: IFFALSE 7556
7544: PUSH
7545: LD_VAR 0 2
7549: PUSH
7550: LD_OWVAR 2
7554: NONEQUAL
7555: AND
7556: IFFALSE 7645
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7558: LD_EXP 6
7562: PUSH
7563: LD_VAR 0 2
7567: ARRAY
7568: NOT
7569: IFTRUE 7617
7571: PUSH
7572: LD_EXP 6
7576: PUSH
7577: LD_VAR 0 2
7581: ARRAY
7582: PUSH
7583: LD_EXP 6
7587: PUSH
7588: LD_OWVAR 2
7592: ARRAY
7593: NONEQUAL
7594: IFFALSE 7616
7596: PUSH
7597: LD_OWVAR 2
7601: PPUSH
7602: LD_VAR 0 2
7606: PPUSH
7607: CALL_OW 81
7611: PUSH
7612: LD_INT 1
7614: NONEQUAL
7615: AND
7616: OR
7617: IFFALSE 7645
// if HasPowerByGameType ( mpGameType , i ) then
7619: LD_EXP 1
7623: PPUSH
7624: LD_VAR 0 2
7628: PPUSH
7629: CALL 7116 0 2
7633: IFFALSE 7645
// begin gameIsOn := true ;
7635: LD_ADDR_VAR 0 1
7639: PUSH
7640: LD_INT 1
7642: ST_TO_ADDR
// break ;
7643: GO 7647
// end ;
7645: GO 7516
7647: POP
7648: POP
// wait ( 100 ) ;
7649: LD_INT 100
7651: PPUSH
7652: CALL_OW 67
// until not gameIsOn ;
7656: LD_VAR 0 1
7660: NOT
7661: IFFALSE 7495
// if IAmServer then
7663: CALL_OW 518
7667: IFFALSE 7676
// wait ( 0 0$3 ) ;
7669: LD_INT 105
7671: PPUSH
7672: CALL_OW 67
// if Multiplayer then
7676: LD_OWVAR 4
7680: IFFALSE 7688
// YouLostInMultiplayer else
7682: CALL_OW 107
7686: GO 7695
// YouLost (  ) ;
7688: LD_STRING 
7690: PPUSH
7691: CALL_OW 104
// end ;
7695: PPOPN 2
7697: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7698: LD_EXP 31
7702: IFFALSE 8086
7704: GO 7706
7706: DISABLE
7707: LD_INT 0
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7714: LD_ADDR_VAR 0 5
7718: PUSH
7719: LD_INT 1
7721: PUSH
7722: LD_INT 2
7724: PUSH
7725: LD_INT 3
7727: PUSH
7728: LD_INT 4
7730: PUSH
7731: LD_INT 5
7733: PUSH
7734: LD_INT 6
7736: PUSH
7737: LD_INT 7
7739: PUSH
7740: LD_INT 8
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7753: LD_INT 350
7755: PPUSH
7756: CALL_OW 67
// for i := 1 to 8 do
7760: LD_ADDR_VAR 0 1
7764: PUSH
7765: DOUBLE
7766: LD_INT 1
7768: DEC
7769: ST_TO_ADDR
7770: LD_INT 8
7772: PUSH
7773: FOR_TO
7774: IFFALSE 8056
// begin j := sides [ i ] ;
7776: LD_ADDR_VAR 0 2
7780: PUSH
7781: LD_VAR 0 5
7785: PUSH
7786: LD_VAR 0 1
7790: ARRAY
7791: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7792: LD_EXP 38
7796: PUSH
7797: LD_VAR 0 2
7801: ARRAY
7802: PPUSH
7803: CALL 19760 0 1
7807: IFFALSE 7820
7809: PUSH
7810: LD_VAR 0 2
7814: PPUSH
7815: CALL_OW 108
7819: AND
7820: IFFALSE 7838
7822: PUSH
7823: LD_EXP 1
7827: PPUSH
7828: LD_VAR 0 2
7832: PPUSH
7833: CALL 7116 0 2
7837: AND
7838: IFFALSE 8054
// begin wait ( mpRespawn div 2 ) ;
7840: LD_EXP 31
7844: PUSH
7845: LD_INT 2
7847: DIV
7848: PPUSH
7849: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7853: LD_ADDR_VAR 0 3
7857: PUSH
7858: LD_INT 22
7860: PUSH
7861: LD_VAR 0 2
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 50
7872: PUSH
7873: EMPTY
7874: LIST
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 30
7881: PUSH
7882: LD_INT 0
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 30
7891: PUSH
7892: LD_INT 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: PPUSH
7909: CALL_OW 69
7913: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7914: LD_VAR 0 3
7918: NOT
7919: IFTRUE 7933
7921: PUSH
7922: LD_VAR 0 2
7926: PPUSH
7927: CALL_OW 108
7931: NOT
7932: OR
7933: IFTRUE 7952
7935: PUSH
7936: LD_EXP 1
7940: PPUSH
7941: LD_VAR 0 2
7945: PPUSH
7946: CALL 7116 0 2
7950: NOT
7951: OR
7952: IFFALSE 7956
// continue ;
7954: GO 7773
// spawn := tmp [ 1 ] ;
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 1
7968: ARRAY
7969: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7970: LD_EXP 38
7974: PUSH
7975: LD_VAR 0 2
7979: ARRAY
7980: PUSH
7981: LD_INT 1
7983: ARRAY
7984: PPUSH
7985: LD_VAR 0 4
7989: PPUSH
7990: CALL_OW 250
7994: PPUSH
7995: LD_VAR 0 4
7999: PPUSH
8000: CALL_OW 251
8004: PPUSH
8005: LD_INT 32
8007: PPUSH
8008: LD_INT 1
8010: PPUSH
8011: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8015: LD_ADDR_EXP 38
8019: PUSH
8020: LD_EXP 38
8024: PPUSH
8025: LD_VAR 0 2
8029: PPUSH
8030: LD_EXP 38
8034: PUSH
8035: LD_VAR 0 2
8039: ARRAY
8040: PPUSH
8041: LD_INT 1
8043: PPUSH
8044: CALL_OW 3
8048: PPUSH
8049: CALL_OW 1
8053: ST_TO_ADDR
// end ; end ;
8054: GO 7773
8056: POP
8057: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8058: LD_ADDR_VAR 0 5
8062: PUSH
8063: LD_VAR 0 5
8067: PPUSH
8068: LD_INT 1
8070: PPUSH
8071: LD_INT 8
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: CALL 22052 0 4
8081: ST_TO_ADDR
// until false ;
8082: LD_INT 0
8084: IFFALSE 7753
// end ;
8086: PPOPN 5
8088: END
// every 0 0$1 marked mpActive do
8089: GO 8091
8091: DISABLE
// begin enable ;
8092: ENABLE
// if not mpDisplayStrings then
8093: LD_EXP 36
8097: NOT
8098: IFFALSE 8109
// begin display_strings := [ ] ;
8100: LD_ADDR_OWVAR 47
8104: PUSH
8105: EMPTY
8106: ST_TO_ADDR
// exit ;
8107: GO 8119
// end ; display_strings := mpDisplayStrings ;
8109: LD_ADDR_OWVAR 47
8113: PUSH
8114: LD_EXP 36
8118: ST_TO_ADDR
// end ; end_of_file
8119: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8120: LD_INT 0
8122: PPUSH
8123: PPUSH
8124: PPUSH
8125: PPUSH
8126: PPUSH
8127: PPUSH
8128: PPUSH
8129: PPUSH
8130: PPUSH
// if GetType ( un ) = unit_vehicle then
8131: LD_VAR 0 1
8135: PPUSH
8136: CALL_OW 247
8140: PUSH
8141: LD_INT 2
8143: EQUAL
8144: IFFALSE 8148
// exit ;
8146: GO 8822
// side := GetSide ( un ) ;
8148: LD_ADDR_VAR 0 9
8152: PUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 255
8162: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8163: LD_EXP 1
8167: PUSH
8168: LD_INT 2
8170: EQUAL
8171: IFFALSE 8265
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8173: LD_VAR 0 1
8177: PPUSH
8178: CALL_OW 266
8182: PUSH
8183: LD_INT 0
8185: PUSH
8186: LD_INT 1
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: IN
8193: IFFALSE 8265
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8195: LD_ADDR_VAR 0 3
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_VAR 0 9
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: LD_INT 21
8217: PUSH
8218: LD_INT 1
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 33
8227: PUSH
8228: LD_INT 3
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: LIST
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PPUSH
8244: CALL_OW 69
8248: PUSH
8249: FOR_IN
8250: IFFALSE 8263
// KillUnit ( i ) ;
8252: LD_VAR 0 3
8256: PPUSH
8257: CALL_OW 66
8261: GO 8249
8263: POP
8264: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL_OW 257
8274: PUSH
8275: LD_INT 12
8277: PUSH
8278: LD_INT 17
8280: PUSH
8281: LD_INT 15
8283: PUSH
8284: LD_INT 16
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: IN
8293: IFTRUE 8310
8295: PUSH
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 263
8305: PUSH
8306: LD_INT 5
8308: EQUAL
8309: OR
8310: IFFALSE 8547
// begin tag := 0 ;
8312: LD_ADDR_VAR 0 5
8316: PUSH
8317: LD_INT 0
8319: ST_TO_ADDR
// for i := 1 to 8 do
8320: LD_ADDR_VAR 0 3
8324: PUSH
8325: DOUBLE
8326: LD_INT 1
8328: DEC
8329: ST_TO_ADDR
8330: LD_INT 8
8332: PUSH
8333: FOR_TO
8334: IFFALSE 8368
// if un in mpApePosIndex [ i ] then
8336: LD_VAR 0 1
8340: PUSH
8341: LD_EXP 30
8345: PUSH
8346: LD_VAR 0 3
8350: ARRAY
8351: IN
8352: IFFALSE 8366
// begin tag := i ;
8354: LD_ADDR_VAR 0 5
8358: PUSH
8359: LD_VAR 0 3
8363: ST_TO_ADDR
// break ;
8364: GO 8368
// end ;
8366: GO 8333
8368: POP
8369: POP
// if not tag then
8370: LD_VAR 0 5
8374: NOT
8375: IFFALSE 8379
// exit ;
8377: GO 8822
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8379: LD_ADDR_VAR 0 7
8383: PUSH
8384: LD_EXP 29
8388: PUSH
8389: LD_EXP 5
8393: PUSH
8394: LD_VAR 0 5
8398: ARRAY
8399: ARRAY
8400: ST_TO_ADDR
// if not area then
8401: LD_VAR 0 7
8405: NOT
8406: IFFALSE 8410
// exit ;
8408: GO 8822
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8410: LD_INT 14700
8412: PUSH
8413: LD_VAR 0 1
8417: PUSH
8418: LD_INT 5
8420: MOD
8421: PUSH
8422: LD_INT 1
8424: PLUS
8425: PUSH
8426: LD_INT 700
8428: MUL
8429: PLUS
8430: PPUSH
8431: CALL_OW 67
// repeat wait ( 10 ) ;
8435: LD_INT 10
8437: PPUSH
8438: CALL_OW 67
// until not mpBlockRespThread ;
8442: LD_EXP 43
8446: NOT
8447: IFFALSE 8435
// mpBlockRespThread := true ;
8449: LD_ADDR_EXP 43
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8457: LD_INT 0
8459: PPUSH
8460: CALL 51819 0 1
// ape := CreateHuman ;
8464: LD_ADDR_VAR 0 4
8468: PUSH
8469: CALL_OW 44
8473: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8474: LD_ADDR_EXP 30
8478: PUSH
8479: LD_EXP 30
8483: PPUSH
8484: LD_VAR 0 5
8488: PPUSH
8489: LD_EXP 30
8493: PUSH
8494: LD_VAR 0 5
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 4
8504: PPUSH
8505: CALL 55692 0 2
8509: PPUSH
8510: CALL_OW 1
8514: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8515: LD_VAR 0 4
8519: PPUSH
8520: LD_VAR 0 7
8524: PPUSH
8525: LD_INT 0
8527: PPUSH
8528: CALL_OW 49
// wait ( 10 ) ;
8532: LD_INT 10
8534: PPUSH
8535: CALL_OW 67
// mpBlockRespThread := false ;
8539: LD_ADDR_EXP 43
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8547: LD_VAR 0 1
8551: PPUSH
8552: CALL_OW 247
8556: PUSH
8557: LD_INT 1
8559: EQUAL
8560: IFFALSE 8577
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL_OW 248
8572: PUSH
8573: LD_INT 0
8575: GREATER
8576: AND
8577: IFFALSE 8822
// begin if not mpRespawn then
8579: LD_EXP 31
8583: NOT
8584: IFFALSE 8588
// exit ;
8586: GO 8822
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8588: LD_VAR 0 9
8592: PPUSH
8593: CALL_OW 108
8597: NOT
8598: IFFALSE 8617
8600: PUSH
8601: LD_EXP 1
8605: PPUSH
8606: LD_VAR 0 9
8610: PPUSH
8611: CALL 7116 0 2
8615: NOT
8616: AND
8617: IFFALSE 8621
// exit ;
8619: GO 8822
// side := GetSide ( un ) ;
8621: LD_ADDR_VAR 0 9
8625: PUSH
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 255
8635: ST_TO_ADDR
// nation := GetNation ( un ) ;
8636: LD_ADDR_VAR 0 8
8640: PUSH
8641: LD_VAR 0 1
8645: PPUSH
8646: CALL_OW 248
8650: ST_TO_ADDR
// class := GetClass ( un ) ;
8651: LD_ADDR_VAR 0 6
8655: PUSH
8656: LD_VAR 0 1
8660: PPUSH
8661: CALL_OW 257
8665: ST_TO_ADDR
// if class > 4 then
8666: LD_VAR 0 6
8670: PUSH
8671: LD_INT 4
8673: GREATER
8674: IFFALSE 8684
// class := 1 ;
8676: LD_ADDR_VAR 0 6
8680: PUSH
8681: LD_INT 1
8683: ST_TO_ADDR
// repeat wait ( 10 ) ;
8684: LD_INT 10
8686: PPUSH
8687: CALL_OW 67
// until not mpBlockRespThread ;
8691: LD_EXP 43
8695: NOT
8696: IFFALSE 8684
// mpBlockRespThread := true ;
8698: LD_ADDR_EXP 43
8702: PUSH
8703: LD_INT 1
8705: ST_TO_ADDR
// uc_side := side ;
8706: LD_ADDR_OWVAR 20
8710: PUSH
8711: LD_VAR 0 9
8715: ST_TO_ADDR
// uc_nation := nation ;
8716: LD_ADDR_OWVAR 21
8720: PUSH
8721: LD_VAR 0 8
8725: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8726: LD_INT 0
8728: PPUSH
8729: LD_VAR 0 6
8733: PPUSH
8734: LD_INT 2
8736: PPUSH
8737: CALL_OW 380
// un := CreateHuman ;
8741: LD_ADDR_VAR 0 1
8745: PUSH
8746: CALL_OW 44
8750: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8751: LD_ADDR_EXP 38
8755: PUSH
8756: LD_EXP 38
8760: PPUSH
8761: LD_VAR 0 9
8765: PPUSH
8766: LD_EXP 38
8770: PUSH
8771: LD_VAR 0 9
8775: ARRAY
8776: PPUSH
8777: LD_EXP 38
8781: PUSH
8782: LD_VAR 0 9
8786: ARRAY
8787: PUSH
8788: LD_INT 1
8790: PLUS
8791: PPUSH
8792: LD_VAR 0 1
8796: PPUSH
8797: CALL_OW 1
8801: PPUSH
8802: CALL_OW 1
8806: ST_TO_ADDR
// wait ( 10 ) ;
8807: LD_INT 10
8809: PPUSH
8810: CALL_OW 67
// mpBlockRespThread := false ;
8814: LD_ADDR_EXP 43
8818: PUSH
8819: LD_INT 0
8821: ST_TO_ADDR
// end ; end ;
8822: LD_VAR 0 2
8826: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8827: LD_INT 0
8829: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8830: LD_VAR 0 1
8834: PPUSH
8835: CALL_OW 266
8839: PUSH
8840: LD_INT 0
8842: PUSH
8843: LD_INT 1
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: IN
8850: IFFALSE 8875
// SetBName ( building , @ & GetSide ( building ) ) ;
8852: LD_VAR 0 1
8856: PPUSH
8857: LD_STRING @
8859: PUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 255
8869: STR
8870: PPUSH
8871: CALL_OW 500
// end ;
8875: LD_VAR 0 2
8879: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8880: LD_INT 0
8882: PPUSH
8883: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8884: LD_EXP 1
8888: PUSH
8889: LD_INT 2
8891: EQUAL
8892: IFFALSE 8916
8894: PUSH
8895: LD_VAR 0 1
8899: PPUSH
8900: CALL_OW 266
8904: PUSH
8905: LD_INT 0
8907: PUSH
8908: LD_INT 1
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: IN
8915: AND
8916: IFFALSE 8995
// begin SetSide ( building , oldSide ) ;
8918: LD_VAR 0 1
8922: PPUSH
8923: LD_VAR 0 2
8927: PPUSH
8928: CALL_OW 235
// KillUnit ( building ) ;
8932: LD_VAR 0 1
8936: PPUSH
8937: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8941: LD_ADDR_VAR 0 5
8945: PUSH
8946: LD_INT 22
8948: PUSH
8949: LD_VAR 0 2
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 21
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 69
8976: PUSH
8977: FOR_IN
8978: IFFALSE 8991
// KillUnit ( i ) ;
8980: LD_VAR 0 5
8984: PPUSH
8985: CALL_OW 66
8989: GO 8977
8991: POP
8992: POP
// exit ;
8993: GO 9040
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8995: LD_VAR 0 1
8999: PPUSH
9000: CALL_OW 266
9004: PUSH
9005: LD_INT 0
9007: PUSH
9008: LD_INT 1
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: IN
9015: IFFALSE 9040
// SetBName ( building , @ & GetSide ( building ) ) ;
9017: LD_VAR 0 1
9021: PPUSH
9022: LD_STRING @
9024: PUSH
9025: LD_VAR 0 1
9029: PPUSH
9030: CALL_OW 255
9034: STR
9035: PPUSH
9036: CALL_OW 500
// end ;
9040: LD_VAR 0 4
9044: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9045: LD_INT 0
9047: PPUSH
9048: PPUSH
9049: PPUSH
// if mpGameType <> GameTypeFamine then
9050: LD_EXP 1
9054: PUSH
9055: LD_INT 5
9057: NONEQUAL
9058: IFFALSE 9062
// exit ;
9060: GO 9276
// for i := 1 to mpGlobalOilDeposits do
9062: LD_ADDR_VAR 0 6
9066: PUSH
9067: DOUBLE
9068: LD_INT 1
9070: DEC
9071: ST_TO_ADDR
9072: LD_EXP 39
9076: PUSH
9077: FOR_TO
9078: IFFALSE 9274
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9080: LD_EXP 39
9084: PUSH
9085: LD_VAR 0 6
9089: ARRAY
9090: PUSH
9091: LD_INT 1
9093: ARRAY
9094: PPUSH
9095: LD_EXP 39
9099: PUSH
9100: LD_VAR 0 6
9104: ARRAY
9105: PUSH
9106: LD_INT 2
9108: ARRAY
9109: PPUSH
9110: CALL_OW 428
9114: PUSH
9115: LD_VAR 0 1
9119: EQUAL
9120: IFFALSE 9272
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9122: LD_ADDR_VAR 0 7
9126: PUSH
9127: LD_EXP 39
9131: PUSH
9132: LD_VAR 0 6
9136: ARRAY
9137: PUSH
9138: LD_INT 3
9140: ARRAY
9141: ST_TO_ADDR
// value := Dec ( value ) ;
9142: LD_ADDR_VAR 0 7
9146: PUSH
9147: LD_VAR 0 7
9151: PPUSH
9152: CALL 57087 0 1
9156: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9157: LD_ADDR_EXP 39
9161: PUSH
9162: LD_EXP 39
9166: PPUSH
9167: LD_VAR 0 6
9171: PPUSH
9172: LD_EXP 39
9176: PUSH
9177: LD_VAR 0 6
9181: ARRAY
9182: PPUSH
9183: LD_INT 3
9185: PPUSH
9186: LD_VAR 0 7
9190: PPUSH
9191: CALL_OW 1
9195: PPUSH
9196: CALL_OW 1
9200: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9201: LD_VAR 0 1
9205: PPUSH
9206: LD_VAR 0 7
9210: PPUSH
9211: CALL_OW 505
// if value = 0 then
9215: LD_VAR 0 7
9219: PUSH
9220: LD_INT 0
9222: EQUAL
9223: IFFALSE 9272
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9225: LD_EXP 39
9229: PUSH
9230: LD_VAR 0 6
9234: ARRAY
9235: PUSH
9236: LD_INT 1
9238: ARRAY
9239: PPUSH
9240: LD_EXP 39
9244: PUSH
9245: LD_VAR 0 6
9249: ARRAY
9250: PUSH
9251: LD_INT 2
9253: ARRAY
9254: PPUSH
9255: CALL_OW 63
// KillUnit ( building ) ;
9259: LD_VAR 0 1
9263: PPUSH
9264: CALL_OW 66
// exit ;
9268: POP
9269: POP
9270: GO 9276
// end ; end ; end ;
9272: GO 9077
9274: POP
9275: POP
// end ;
9276: LD_VAR 0 5
9280: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9281: LD_INT 0
9283: PPUSH
9284: PPUSH
9285: PPUSH
// if mpGameType <> GameTypeFamine then
9286: LD_EXP 1
9290: PUSH
9291: LD_INT 5
9293: NONEQUAL
9294: IFFALSE 9298
// exit ;
9296: GO 9512
// for i := 1 to mpGlobalSibDeposits do
9298: LD_ADDR_VAR 0 6
9302: PUSH
9303: DOUBLE
9304: LD_INT 1
9306: DEC
9307: ST_TO_ADDR
9308: LD_EXP 40
9312: PUSH
9313: FOR_TO
9314: IFFALSE 9510
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9316: LD_EXP 40
9320: PUSH
9321: LD_VAR 0 6
9325: ARRAY
9326: PUSH
9327: LD_INT 1
9329: ARRAY
9330: PPUSH
9331: LD_EXP 40
9335: PUSH
9336: LD_VAR 0 6
9340: ARRAY
9341: PUSH
9342: LD_INT 2
9344: ARRAY
9345: PPUSH
9346: CALL_OW 428
9350: PUSH
9351: LD_VAR 0 1
9355: EQUAL
9356: IFFALSE 9508
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9358: LD_ADDR_VAR 0 7
9362: PUSH
9363: LD_EXP 40
9367: PUSH
9368: LD_VAR 0 6
9372: ARRAY
9373: PUSH
9374: LD_INT 3
9376: ARRAY
9377: ST_TO_ADDR
// value := Dec ( value ) ;
9378: LD_ADDR_VAR 0 7
9382: PUSH
9383: LD_VAR 0 7
9387: PPUSH
9388: CALL 57087 0 1
9392: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9393: LD_ADDR_EXP 40
9397: PUSH
9398: LD_EXP 40
9402: PPUSH
9403: LD_VAR 0 6
9407: PPUSH
9408: LD_EXP 40
9412: PUSH
9413: LD_VAR 0 6
9417: ARRAY
9418: PPUSH
9419: LD_INT 3
9421: PPUSH
9422: LD_VAR 0 7
9426: PPUSH
9427: CALL_OW 1
9431: PPUSH
9432: CALL_OW 1
9436: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9437: LD_VAR 0 1
9441: PPUSH
9442: LD_VAR 0 7
9446: PPUSH
9447: CALL_OW 505
// if value = 0 then
9451: LD_VAR 0 7
9455: PUSH
9456: LD_INT 0
9458: EQUAL
9459: IFFALSE 9508
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9461: LD_EXP 40
9465: PUSH
9466: LD_VAR 0 6
9470: ARRAY
9471: PUSH
9472: LD_INT 1
9474: ARRAY
9475: PPUSH
9476: LD_EXP 40
9480: PUSH
9481: LD_VAR 0 6
9485: ARRAY
9486: PUSH
9487: LD_INT 2
9489: ARRAY
9490: PPUSH
9491: CALL_OW 63
// KillUnit ( building ) ;
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 66
// exit ;
9504: POP
9505: POP
9506: GO 9512
// end ; end ; end ;
9508: GO 9313
9510: POP
9511: POP
// end ; end_of_file
9512: LD_VAR 0 5
9516: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
9517: LD_EXP 37
9521: IFFALSE 9860
9523: GO 9525
9525: DISABLE
9526: LD_INT 0
9528: PPUSH
9529: PPUSH
9530: PPUSH
// begin mpKingPoints := [ ] ;
9531: LD_ADDR_EXP 46
9535: PUSH
9536: EMPTY
9537: ST_TO_ADDR
// if mpTeamGame then
9538: LD_EXP 9
9542: IFFALSE 9596
// begin for i := 1 to Count ( mpTeams ) do
9544: LD_ADDR_VAR 0 1
9548: PUSH
9549: DOUBLE
9550: LD_INT 1
9552: DEC
9553: ST_TO_ADDR
9554: LD_EXP 8
9558: PPUSH
9559: CALL 19760 0 1
9563: PUSH
9564: FOR_TO
9565: IFFALSE 9592
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
9567: LD_ADDR_EXP 46
9571: PUSH
9572: LD_EXP 46
9576: PPUSH
9577: LD_VAR 0 1
9581: PPUSH
9582: LD_INT 0
9584: PPUSH
9585: CALL_OW 1
9589: ST_TO_ADDR
9590: GO 9564
9592: POP
9593: POP
// end else
9594: GO 9639
// begin for i := 1 to 8 do
9596: LD_ADDR_VAR 0 1
9600: PUSH
9601: DOUBLE
9602: LD_INT 1
9604: DEC
9605: ST_TO_ADDR
9606: LD_INT 8
9608: PUSH
9609: FOR_TO
9610: IFFALSE 9637
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
9612: LD_ADDR_EXP 46
9616: PUSH
9617: LD_EXP 46
9621: PPUSH
9622: LD_VAR 0 1
9626: PPUSH
9627: LD_INT 0
9629: PPUSH
9630: CALL_OW 1
9634: ST_TO_ADDR
9635: GO 9609
9637: POP
9638: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
9639: LD_ADDR_VAR 0 3
9643: PUSH
9644: LD_INT 50
9646: PPUSH
9647: LD_INT 0
9649: PPUSH
9650: CALL_OW 517
9654: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
9655: LD_ADDR_VAR 0 1
9659: PUSH
9660: DOUBLE
9661: LD_INT 1
9663: DEC
9664: ST_TO_ADDR
9665: LD_VAR 0 3
9669: PUSH
9670: LD_INT 1
9672: ARRAY
9673: PUSH
9674: FOR_TO
9675: IFFALSE 9742
// for j := 1 to 8 do
9677: LD_ADDR_VAR 0 2
9681: PUSH
9682: DOUBLE
9683: LD_INT 1
9685: DEC
9686: ST_TO_ADDR
9687: LD_INT 8
9689: PUSH
9690: FOR_TO
9691: IFFALSE 9738
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
9693: LD_VAR 0 3
9697: PUSH
9698: LD_INT 1
9700: ARRAY
9701: PUSH
9702: LD_VAR 0 1
9706: ARRAY
9707: PPUSH
9708: LD_VAR 0 3
9712: PUSH
9713: LD_INT 2
9715: ARRAY
9716: PUSH
9717: LD_VAR 0 1
9721: ARRAY
9722: PPUSH
9723: LD_VAR 0 2
9727: PPUSH
9728: LD_INT 12
9730: NEG
9731: PPUSH
9732: CALL_OW 330
9736: GO 9690
9738: POP
9739: POP
9740: GO 9674
9742: POP
9743: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
9744: LD_EXP 32
9748: PPUSH
9749: LD_INT 1
9751: PPUSH
9752: CALL_OW 424
// UpdateCounter ;
9756: CALL 10364 0 0
// repeat wait ( 0 0$1 ) ;
9760: LD_INT 35
9762: PPUSH
9763: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9767: LD_ADDR_VAR 0 3
9771: PUSH
9772: LD_EXP 32
9776: PPUSH
9777: LD_INT 3
9779: PUSH
9780: LD_INT 57
9782: PUSH
9783: EMPTY
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: LD_INT 50
9792: PUSH
9793: EMPTY
9794: LIST
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: LD_INT 30
9801: PUSH
9802: LD_INT 0
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: LD_INT 30
9811: PUSH
9812: LD_INT 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: LIST
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: LIST
9828: PPUSH
9829: CALL_OW 70
9833: ST_TO_ADDR
// if not tmp then
9834: LD_VAR 0 3
9838: NOT
9839: IFFALSE 9843
// continue ;
9841: GO 9760
// AddPoints ( tmp ) ;
9843: LD_VAR 0 3
9847: PPUSH
9848: CALL 10042 0 1
// UpdateCounter ;
9852: CALL 10364 0 0
// until false ;
9856: LD_INT 0
9858: IFFALSE 9760
// end ;
9860: PPOPN 3
9862: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
9863: LD_EXP 37
9867: IFFALSE 9875
9869: PUSH
9870: LD_EXP 35
9874: AND
9875: IFFALSE 10039
9877: GO 9879
9879: DISABLE
9880: LD_INT 0
9882: PPUSH
9883: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
9884: LD_ADDR_VAR 0 2
9888: PUSH
9889: LD_INT 50
9891: PPUSH
9892: LD_INT 0
9894: PPUSH
9895: CALL_OW 517
9899: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
9900: LD_ADDR_VAR 0 1
9904: PUSH
9905: DOUBLE
9906: LD_INT 1
9908: DEC
9909: ST_TO_ADDR
9910: LD_VAR 0 2
9914: PUSH
9915: LD_INT 1
9917: ARRAY
9918: PUSH
9919: FOR_TO
9920: IFFALSE 9961
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
9922: LD_VAR 0 2
9926: PUSH
9927: LD_INT 1
9929: ARRAY
9930: PUSH
9931: LD_VAR 0 1
9935: ARRAY
9936: PPUSH
9937: LD_VAR 0 2
9941: PUSH
9942: LD_INT 2
9944: ARRAY
9945: PUSH
9946: LD_VAR 0 1
9950: ARRAY
9951: PPUSH
9952: LD_INT 125
9954: PPUSH
9955: CALL_OW 495
9959: GO 9919
9961: POP
9962: POP
// repeat wait ( mpEmissions ) ;
9963: LD_EXP 35
9967: PPUSH
9968: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
9972: LD_ADDR_VAR 0 1
9976: PUSH
9977: DOUBLE
9978: LD_INT 1
9980: DEC
9981: ST_TO_ADDR
9982: LD_VAR 0 2
9986: PUSH
9987: LD_INT 1
9989: ARRAY
9990: PUSH
9991: FOR_TO
9992: IFFALSE 10033
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
9994: LD_VAR 0 2
9998: PUSH
9999: LD_INT 1
10001: ARRAY
10002: PUSH
10003: LD_VAR 0 1
10007: ARRAY
10008: PPUSH
10009: LD_VAR 0 2
10013: PUSH
10014: LD_INT 2
10016: ARRAY
10017: PUSH
10018: LD_VAR 0 1
10022: ARRAY
10023: PPUSH
10024: LD_INT 15
10026: PPUSH
10027: CALL_OW 495
10031: GO 9991
10033: POP
10034: POP
// until false ;
10035: LD_INT 0
10037: IFFALSE 9963
// end ;
10039: PPOPN 2
10041: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
10042: LD_INT 0
10044: PPUSH
10045: PPUSH
10046: PPUSH
10047: PPUSH
10048: PPUSH
// if mpTeamGame then
10049: LD_EXP 9
10053: IFFALSE 10250
// begin first := depots [ 1 ] ;
10055: LD_ADDR_VAR 0 4
10059: PUSH
10060: LD_VAR 0 1
10064: PUSH
10065: LD_INT 1
10067: ARRAY
10068: ST_TO_ADDR
// side := GetSide ( first ) ;
10069: LD_ADDR_VAR 0 6
10073: PUSH
10074: LD_VAR 0 4
10078: PPUSH
10079: CALL_OW 255
10083: ST_TO_ADDR
// for i := 1 to mpTeams do
10084: LD_ADDR_VAR 0 3
10088: PUSH
10089: DOUBLE
10090: LD_INT 1
10092: DEC
10093: ST_TO_ADDR
10094: LD_EXP 8
10098: PUSH
10099: FOR_TO
10100: IFFALSE 10134
// if side in mpTeams [ i ] then
10102: LD_VAR 0 6
10106: PUSH
10107: LD_EXP 8
10111: PUSH
10112: LD_VAR 0 3
10116: ARRAY
10117: IN
10118: IFFALSE 10132
// begin team := i ;
10120: LD_ADDR_VAR 0 5
10124: PUSH
10125: LD_VAR 0 3
10129: ST_TO_ADDR
// break ;
10130: GO 10134
// end ;
10132: GO 10099
10134: POP
10135: POP
// if not team then
10136: LD_VAR 0 5
10140: NOT
10141: IFFALSE 10145
// exit ;
10143: GO 10359
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
10145: LD_EXP 32
10149: PPUSH
10150: LD_INT 81
10152: PUSH
10153: LD_VAR 0 6
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 70
10166: IFFALSE 10170
// exit ;
10168: GO 10359
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
10170: LD_ADDR_EXP 46
10174: PUSH
10175: LD_EXP 46
10179: PPUSH
10180: LD_VAR 0 5
10184: PPUSH
10185: LD_EXP 46
10189: PUSH
10190: LD_VAR 0 5
10194: ARRAY
10195: PUSH
10196: LD_INT 1
10198: PLUS
10199: PPUSH
10200: CALL_OW 1
10204: ST_TO_ADDR
// for i in mpTeams [ team ] do
10205: LD_ADDR_VAR 0 3
10209: PUSH
10210: LD_EXP 8
10214: PUSH
10215: LD_VAR 0 5
10219: ARRAY
10220: PUSH
10221: FOR_IN
10222: IFFALSE 10246
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
10224: LD_VAR 0 3
10228: PPUSH
10229: LD_EXP 46
10233: PUSH
10234: LD_VAR 0 5
10238: ARRAY
10239: PPUSH
10240: CALL_OW 506
10244: GO 10221
10246: POP
10247: POP
// end else
10248: GO 10359
// begin first := depots [ 1 ] ;
10250: LD_ADDR_VAR 0 4
10254: PUSH
10255: LD_VAR 0 1
10259: PUSH
10260: LD_INT 1
10262: ARRAY
10263: ST_TO_ADDR
// side := GetSide ( first ) ;
10264: LD_ADDR_VAR 0 6
10268: PUSH
10269: LD_VAR 0 4
10273: PPUSH
10274: CALL_OW 255
10278: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
10279: LD_EXP 32
10283: PPUSH
10284: LD_INT 81
10286: PUSH
10287: LD_VAR 0 6
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PPUSH
10296: CALL_OW 70
10300: IFFALSE 10304
// exit ;
10302: GO 10359
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
10304: LD_ADDR_EXP 46
10308: PUSH
10309: LD_EXP 46
10313: PPUSH
10314: LD_VAR 0 6
10318: PPUSH
10319: LD_EXP 46
10323: PUSH
10324: LD_VAR 0 6
10328: ARRAY
10329: PUSH
10330: LD_INT 1
10332: PLUS
10333: PPUSH
10334: CALL_OW 1
10338: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
10339: LD_VAR 0 6
10343: PPUSH
10344: LD_EXP 46
10348: PUSH
10349: LD_VAR 0 6
10353: ARRAY
10354: PPUSH
10355: CALL_OW 506
// end ; end ;
10359: LD_VAR 0 2
10363: RET
// function UpdateCounter ; var i ; begin
10364: LD_INT 0
10366: PPUSH
10367: PPUSH
// result := [ ] ;
10368: LD_ADDR_VAR 0 1
10372: PUSH
10373: EMPTY
10374: ST_TO_ADDR
// if mpTeamGame then
10375: LD_EXP 9
10379: IFFALSE 10446
// begin for i := 1 to mpTeams do
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: DOUBLE
10387: LD_INT 1
10389: DEC
10390: ST_TO_ADDR
10391: LD_EXP 8
10395: PUSH
10396: FOR_TO
10397: IFFALSE 10442
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
10399: LD_ADDR_VAR 0 1
10403: PUSH
10404: LD_VAR 0 1
10408: PUSH
10409: LD_STRING #KingoftheHill-Team
10411: PUSH
10412: LD_VAR 0 2
10416: PUSH
10417: LD_EXP 46
10421: PUSH
10422: LD_VAR 0 2
10426: ARRAY
10427: PUSH
10428: LD_EXP 33
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: ADD
10439: ST_TO_ADDR
10440: GO 10396
10442: POP
10443: POP
// end else
10444: GO 10519
// begin for i := 1 to 8 do
10446: LD_ADDR_VAR 0 2
10450: PUSH
10451: DOUBLE
10452: LD_INT 1
10454: DEC
10455: ST_TO_ADDR
10456: LD_INT 8
10458: PUSH
10459: FOR_TO
10460: IFFALSE 10517
// if mpSidePositions [ i ] then
10462: LD_EXP 5
10466: PUSH
10467: LD_VAR 0 2
10471: ARRAY
10472: IFFALSE 10515
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
10474: LD_ADDR_VAR 0 1
10478: PUSH
10479: LD_VAR 0 1
10483: PUSH
10484: LD_STRING #KingoftheHill-Player
10486: PUSH
10487: LD_VAR 0 2
10491: PUSH
10492: LD_EXP 46
10496: PUSH
10497: LD_VAR 0 2
10501: ARRAY
10502: PUSH
10503: LD_EXP 33
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: ADD
10514: ST_TO_ADDR
10515: GO 10459
10517: POP
10518: POP
// end ; mpDisplayStrings := result ;
10519: LD_ADDR_EXP 36
10523: PUSH
10524: LD_VAR 0 1
10528: ST_TO_ADDR
// end ;
10529: LD_VAR 0 1
10533: RET
// export function HowMuchPointsKing ( side ) ; begin
10534: LD_INT 0
10536: PPUSH
// result := HowMuchPoints ( side ) ;
10537: LD_ADDR_VAR 0 2
10541: PUSH
10542: LD_VAR 0 1
10546: PPUSH
10547: CALL 10557 0 1
10551: ST_TO_ADDR
// end ;
10552: LD_VAR 0 2
10556: RET
// function HowMuchPoints ( side ) ; var i ; begin
10557: LD_INT 0
10559: PPUSH
10560: PPUSH
// if mpTeamGame then
10561: LD_EXP 9
10565: IFFALSE 10634
// begin for i := 1 to Count ( mpTeams ) do
10567: LD_ADDR_VAR 0 3
10571: PUSH
10572: DOUBLE
10573: LD_INT 1
10575: DEC
10576: ST_TO_ADDR
10577: LD_EXP 8
10581: PPUSH
10582: CALL 19760 0 1
10586: PUSH
10587: FOR_TO
10588: IFFALSE 10630
// begin if side in mpTeams [ i ] then
10590: LD_VAR 0 1
10594: PUSH
10595: LD_EXP 8
10599: PUSH
10600: LD_VAR 0 3
10604: ARRAY
10605: IN
10606: IFFALSE 10628
// begin result := mpKingPoints [ i ] ;
10608: LD_ADDR_VAR 0 2
10612: PUSH
10613: LD_EXP 46
10617: PUSH
10618: LD_VAR 0 3
10622: ARRAY
10623: ST_TO_ADDR
// exit ;
10624: POP
10625: POP
10626: GO 10650
// end ; end ;
10628: GO 10587
10630: POP
10631: POP
// end else
10632: GO 10650
// result := mpKingPoints [ side ] ;
10634: LD_ADDR_VAR 0 2
10638: PUSH
10639: LD_EXP 46
10643: PUSH
10644: LD_VAR 0 1
10648: ARRAY
10649: ST_TO_ADDR
// end ;
10650: LD_VAR 0 2
10654: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
10655: LD_EXP 37
10659: IFFALSE 10667
10661: PUSH
10662: CALL 11079 0 0
10666: AND
10667: IFFALSE 10675
10669: PUSH
10670: LD_OWVAR 4
10674: AND
10675: IFFALSE 10928
10677: GO 10679
10679: DISABLE
10680: LD_INT 0
10682: PPUSH
10683: PPUSH
// begin canWin := false ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_INT 0
10691: ST_TO_ADDR
// if not HasPower ( your_side ) then
10692: LD_OWVAR 2
10696: PPUSH
10697: CALL 11121 0 1
10701: NOT
10702: IFFALSE 10713
// begin Multiplayer_Loose_Message ;
10704: CALL_OW 521
// enable ( mpLose ) ;
10708: LD_INT 102
10710: ENABLE_MARKED
// end else
10711: GO 10928
// begin if not EnemiesInGame then
10713: CALL 10931 0 0
10717: NOT
10718: IFFALSE 10725
// begin enable ( mpWin ) ;
10720: LD_INT 101
10722: ENABLE_MARKED
// exit ;
10723: GO 10928
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
10725: LD_ADDR_VAR 0 2
10729: PUSH
10730: LD_OWVAR 2
10734: PPUSH
10735: CALL 10557 0 1
10739: PUSH
10740: LD_EXP 33
10744: GREATEREQUAL
10745: IFFALSE 10758
10747: PUSH
10748: LD_OWVAR 2
10752: PPUSH
10753: CALL 11121 0 1
10757: AND
10758: ST_TO_ADDR
// for i := 1 to 8 do
10759: LD_ADDR_VAR 0 1
10763: PUSH
10764: DOUBLE
10765: LD_INT 1
10767: DEC
10768: ST_TO_ADDR
10769: LD_INT 8
10771: PUSH
10772: FOR_TO
10773: IFFALSE 10914
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10775: LD_EXP 5
10779: PUSH
10780: LD_VAR 0 1
10784: ARRAY
10785: IFFALSE 10798
10787: PUSH
10788: LD_VAR 0 1
10792: PPUSH
10793: CALL_OW 108
10797: AND
10798: IFFALSE 10812
10800: PUSH
10801: LD_VAR 0 1
10805: PUSH
10806: LD_OWVAR 2
10810: NONEQUAL
10811: AND
10812: IFFALSE 10912
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10814: LD_EXP 6
10818: PUSH
10819: LD_VAR 0 1
10823: ARRAY
10824: NOT
10825: IFTRUE 10873
10827: PUSH
10828: LD_EXP 6
10832: PUSH
10833: LD_VAR 0 1
10837: ARRAY
10838: PUSH
10839: LD_EXP 6
10843: PUSH
10844: LD_OWVAR 2
10848: ARRAY
10849: NONEQUAL
10850: IFFALSE 10872
10852: PUSH
10853: LD_OWVAR 2
10857: PPUSH
10858: LD_VAR 0 1
10862: PPUSH
10863: CALL_OW 81
10867: PUSH
10868: LD_INT 1
10870: NONEQUAL
10871: AND
10872: OR
10873: IFFALSE 10912
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL 10557 0 1
10884: PUSH
10885: LD_EXP 33
10889: GREATEREQUAL
10890: IFFALSE 10903
10892: PUSH
10893: LD_VAR 0 1
10897: PPUSH
10898: CALL 11121 0 1
10902: AND
10903: IFFALSE 10912
// begin enable ( mpLose ) ;
10905: LD_INT 102
10907: ENABLE_MARKED
// exit ;
10908: POP
10909: POP
10910: GO 10928
// end ;
10912: GO 10772
10914: POP
10915: POP
// if canWin then
10916: LD_VAR 0 2
10920: IFFALSE 10927
// enable ( mpWin ) else
10922: LD_INT 101
10924: ENABLE_MARKED
10925: GO 10928
// enable ;
10927: ENABLE
// end ; end ;
10928: PPOPN 2
10930: END
// function EnemiesInGame ; var i ; begin
10931: LD_INT 0
10933: PPUSH
10934: PPUSH
// result := false ;
10935: LD_ADDR_VAR 0 1
10939: PUSH
10940: LD_INT 0
10942: ST_TO_ADDR
// for i := 1 to 8 do
10943: LD_ADDR_VAR 0 2
10947: PUSH
10948: DOUBLE
10949: LD_INT 1
10951: DEC
10952: ST_TO_ADDR
10953: LD_INT 8
10955: PUSH
10956: FOR_TO
10957: IFFALSE 11072
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
10959: LD_VAR 0 2
10963: PUSH
10964: LD_OWVAR 2
10968: NONEQUAL
10969: IFFALSE 10982
10971: PUSH
10972: LD_VAR 0 2
10976: PPUSH
10977: CALL 11121 0 1
10981: AND
10982: IFFALSE 10995
10984: PUSH
10985: LD_VAR 0 2
10989: PPUSH
10990: CALL_OW 108
10994: AND
10995: IFFALSE 11070
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10997: LD_EXP 6
11001: PUSH
11002: LD_VAR 0 2
11006: ARRAY
11007: NOT
11008: IFTRUE 11056
11010: PUSH
11011: LD_EXP 6
11015: PUSH
11016: LD_VAR 0 2
11020: ARRAY
11021: PUSH
11022: LD_EXP 6
11026: PUSH
11027: LD_OWVAR 2
11031: ARRAY
11032: NONEQUAL
11033: IFFALSE 11055
11035: PUSH
11036: LD_OWVAR 2
11040: PPUSH
11041: LD_VAR 0 2
11045: PPUSH
11046: CALL_OW 81
11050: PUSH
11051: LD_INT 1
11053: NONEQUAL
11054: AND
11055: OR
11056: IFFALSE 11070
// begin result := true ;
11058: LD_ADDR_VAR 0 1
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// exit ;
11066: POP
11067: POP
11068: GO 11074
// end ;
11070: GO 10956
11072: POP
11073: POP
// end ;
11074: LD_VAR 0 1
11078: RET
// function CanWinLoose ; begin
11079: LD_INT 0
11081: PPUSH
// result := true ;
11082: LD_ADDR_VAR 0 1
11086: PUSH
11087: LD_INT 1
11089: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11090: CALL_OW 531
11094: IFFALSE 11106
11096: PUSH
11097: CALL_OW 519
11101: PUSH
11102: LD_INT 1
11104: GREATER
11105: AND
11106: IFFALSE 11116
// result := false ;
11108: LD_ADDR_VAR 0 1
11112: PUSH
11113: LD_INT 0
11115: ST_TO_ADDR
// end ;
11116: LD_VAR 0 1
11120: RET
// function HasPower ( i ) ; begin
11121: LD_INT 0
11123: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11124: LD_ADDR_VAR 0 2
11128: PUSH
11129: LD_INT 22
11131: PUSH
11132: LD_VAR 0 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 21
11146: PUSH
11147: LD_INT 1
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 33
11156: PUSH
11157: LD_INT 3
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 33
11166: PUSH
11167: LD_INT 5
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PPUSH
11184: CALL_OW 69
11188: ST_TO_ADDR
// end ; end_of_file
11189: LD_VAR 0 2
11193: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
11194: LD_EXP 37
11198: IFFALSE 11206
11200: PUSH
11201: CALL 11416 0 0
11205: AND
11206: IFFALSE 11214
11208: PUSH
11209: LD_OWVAR 4
11213: AND
11214: IFFALSE 11413
11216: GO 11218
11218: DISABLE
11219: LD_INT 0
11221: PPUSH
11222: PPUSH
// begin canWin := false ;
11223: LD_ADDR_VAR 0 2
11227: PUSH
11228: LD_INT 0
11230: ST_TO_ADDR
// if not HasPower ( your_side ) then
11231: LD_OWVAR 2
11235: PPUSH
11236: CALL 11458 0 1
11240: NOT
11241: IFFALSE 11252
// begin Multiplayer_Loose_Message ;
11243: CALL_OW 521
// enable ( mpLose ) ;
11247: LD_INT 102
11249: ENABLE_MARKED
// end else
11250: GO 11413
// begin canWin := true ;
11252: LD_ADDR_VAR 0 2
11256: PUSH
11257: LD_INT 1
11259: ST_TO_ADDR
// for i := 1 to 8 do
11260: LD_ADDR_VAR 0 1
11264: PUSH
11265: DOUBLE
11266: LD_INT 1
11268: DEC
11269: ST_TO_ADDR
11270: LD_INT 8
11272: PUSH
11273: FOR_TO
11274: IFFALSE 11399
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11276: LD_EXP 5
11280: PUSH
11281: LD_VAR 0 1
11285: ARRAY
11286: IFFALSE 11299
11288: PUSH
11289: LD_VAR 0 1
11293: PPUSH
11294: CALL_OW 108
11298: AND
11299: IFFALSE 11313
11301: PUSH
11302: LD_VAR 0 1
11306: PUSH
11307: LD_OWVAR 2
11311: NONEQUAL
11312: AND
11313: IFFALSE 11397
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11315: LD_EXP 6
11319: PUSH
11320: LD_VAR 0 1
11324: ARRAY
11325: NOT
11326: IFTRUE 11374
11328: PUSH
11329: LD_EXP 6
11333: PUSH
11334: LD_VAR 0 1
11338: ARRAY
11339: PUSH
11340: LD_EXP 6
11344: PUSH
11345: LD_OWVAR 2
11349: ARRAY
11350: NONEQUAL
11351: IFFALSE 11373
11353: PUSH
11354: LD_OWVAR 2
11358: PPUSH
11359: LD_VAR 0 1
11363: PPUSH
11364: CALL_OW 81
11368: PUSH
11369: LD_INT 1
11371: NONEQUAL
11372: AND
11373: OR
11374: IFFALSE 11397
// if HasPower ( i ) then
11376: LD_VAR 0 1
11380: PPUSH
11381: CALL 11458 0 1
11385: IFFALSE 11397
// begin canWin := false ;
11387: LD_ADDR_VAR 0 2
11391: PUSH
11392: LD_INT 0
11394: ST_TO_ADDR
// break ;
11395: GO 11399
// end ;
11397: GO 11273
11399: POP
11400: POP
// if canWin then
11401: LD_VAR 0 2
11405: IFFALSE 11412
// enable ( mpWin ) else
11407: LD_INT 101
11409: ENABLE_MARKED
11410: GO 11413
// enable ;
11412: ENABLE
// end ; end ;
11413: PPOPN 2
11415: END
// function CanWinLoose ; begin
11416: LD_INT 0
11418: PPUSH
// result := true ;
11419: LD_ADDR_VAR 0 1
11423: PUSH
11424: LD_INT 1
11426: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11427: CALL_OW 531
11431: IFFALSE 11443
11433: PUSH
11434: CALL_OW 519
11438: PUSH
11439: LD_INT 1
11441: GREATER
11442: AND
11443: IFFALSE 11453
// result := false ;
11445: LD_ADDR_VAR 0 1
11449: PUSH
11450: LD_INT 0
11452: ST_TO_ADDR
// end ;
11453: LD_VAR 0 1
11457: RET
// function HasPower ( i ) ; begin
11458: LD_INT 0
11460: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11461: LD_ADDR_VAR 0 2
11465: PUSH
11466: LD_INT 22
11468: PUSH
11469: LD_VAR 0 1
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 2
11480: PUSH
11481: LD_INT 21
11483: PUSH
11484: LD_INT 1
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 33
11493: PUSH
11494: LD_INT 3
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 33
11503: PUSH
11504: LD_INT 5
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PPUSH
11521: CALL_OW 69
11525: ST_TO_ADDR
// end ; end_of_file
11526: LD_VAR 0 2
11530: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
11531: LD_EXP 37
11535: IFFALSE 11578
11537: GO 11539
11539: DISABLE
11540: LD_INT 0
11542: PPUSH
// begin for i := 1 to 8 do
11543: LD_ADDR_VAR 0 1
11547: PUSH
11548: DOUBLE
11549: LD_INT 1
11551: DEC
11552: ST_TO_ADDR
11553: LD_INT 8
11555: PUSH
11556: FOR_TO
11557: IFFALSE 11576
// SetRestrict ( b_depot , i , state_disabled ) ;
11559: LD_INT 0
11561: PPUSH
11562: LD_VAR 0 1
11566: PPUSH
11567: LD_INT 0
11569: PPUSH
11570: CALL_OW 324
11574: GO 11556
11576: POP
11577: POP
// end ;
11578: PPOPN 1
11580: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
11581: LD_EXP 37
11585: IFFALSE 11593
11587: PUSH
11588: CALL 11803 0 0
11592: AND
11593: IFFALSE 11601
11595: PUSH
11596: LD_OWVAR 4
11600: AND
11601: IFFALSE 11800
11603: GO 11605
11605: DISABLE
11606: LD_INT 0
11608: PPUSH
11609: PPUSH
// begin canWin := false ;
11610: LD_ADDR_VAR 0 2
11614: PUSH
11615: LD_INT 0
11617: ST_TO_ADDR
// if not HasPower ( your_side ) then
11618: LD_OWVAR 2
11622: PPUSH
11623: CALL 11845 0 1
11627: NOT
11628: IFFALSE 11639
// begin Multiplayer_Loose_Message ;
11630: CALL_OW 521
// enable ( mpLose ) ;
11634: LD_INT 102
11636: ENABLE_MARKED
// end else
11637: GO 11800
// begin canWin := true ;
11639: LD_ADDR_VAR 0 2
11643: PUSH
11644: LD_INT 1
11646: ST_TO_ADDR
// for i := 1 to 8 do
11647: LD_ADDR_VAR 0 1
11651: PUSH
11652: DOUBLE
11653: LD_INT 1
11655: DEC
11656: ST_TO_ADDR
11657: LD_INT 8
11659: PUSH
11660: FOR_TO
11661: IFFALSE 11786
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11663: LD_EXP 5
11667: PUSH
11668: LD_VAR 0 1
11672: ARRAY
11673: IFFALSE 11686
11675: PUSH
11676: LD_VAR 0 1
11680: PPUSH
11681: CALL_OW 108
11685: AND
11686: IFFALSE 11700
11688: PUSH
11689: LD_VAR 0 1
11693: PUSH
11694: LD_OWVAR 2
11698: NONEQUAL
11699: AND
11700: IFFALSE 11784
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11702: LD_EXP 6
11706: PUSH
11707: LD_VAR 0 1
11711: ARRAY
11712: NOT
11713: IFTRUE 11761
11715: PUSH
11716: LD_EXP 6
11720: PUSH
11721: LD_VAR 0 1
11725: ARRAY
11726: PUSH
11727: LD_EXP 6
11731: PUSH
11732: LD_OWVAR 2
11736: ARRAY
11737: NONEQUAL
11738: IFFALSE 11760
11740: PUSH
11741: LD_OWVAR 2
11745: PPUSH
11746: LD_VAR 0 1
11750: PPUSH
11751: CALL_OW 81
11755: PUSH
11756: LD_INT 1
11758: NONEQUAL
11759: AND
11760: OR
11761: IFFALSE 11784
// if HasPower ( i ) then
11763: LD_VAR 0 1
11767: PPUSH
11768: CALL 11845 0 1
11772: IFFALSE 11784
// begin canWin := false ;
11774: LD_ADDR_VAR 0 2
11778: PUSH
11779: LD_INT 0
11781: ST_TO_ADDR
// break ;
11782: GO 11786
// end ;
11784: GO 11660
11786: POP
11787: POP
// if canWin then
11788: LD_VAR 0 2
11792: IFFALSE 11799
// enable ( mpWin ) else
11794: LD_INT 101
11796: ENABLE_MARKED
11797: GO 11800
// enable ;
11799: ENABLE
// end ; end ;
11800: PPOPN 2
11802: END
// function CanWinLoose ; begin
11803: LD_INT 0
11805: PPUSH
// result := true ;
11806: LD_ADDR_VAR 0 1
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11814: CALL_OW 531
11818: IFFALSE 11830
11820: PUSH
11821: CALL_OW 519
11825: PUSH
11826: LD_INT 1
11828: GREATER
11829: AND
11830: IFFALSE 11840
// result := false ;
11832: LD_ADDR_VAR 0 1
11836: PUSH
11837: LD_INT 0
11839: ST_TO_ADDR
// end ;
11840: LD_VAR 0 1
11844: RET
// function HasPower ( i ) ; begin
11845: LD_INT 0
11847: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11848: LD_INT 22
11850: PUSH
11851: LD_VAR 0 1
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: LD_INT 30
11865: PUSH
11866: LD_INT 0
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 30
11875: PUSH
11876: LD_INT 1
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PPUSH
11892: CALL_OW 69
11896: NOT
11897: IFFALSE 11901
// exit ;
11899: GO 11966
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11901: LD_ADDR_VAR 0 2
11905: PUSH
11906: LD_INT 22
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 2
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 33
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 33
11943: PUSH
11944: LD_INT 5
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 69
11965: ST_TO_ADDR
// end ; end_of_file
11966: LD_VAR 0 2
11970: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
11971: LD_VAR 0 1
11975: PUSH
11976: LD_INT 200
11978: DOUBLE
11979: GREATEREQUAL
11980: IFFALSE 11988
11982: LD_INT 299
11984: DOUBLE
11985: LESSEQUAL
11986: IFTRUE 11990
11988: GO 12022
11990: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
11991: LD_VAR 0 1
11995: PPUSH
11996: LD_VAR 0 2
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_VAR 0 4
12010: PPUSH
12011: LD_VAR 0 5
12015: PPUSH
12016: CALL 12803 0 5
12020: GO 12099
12022: LD_INT 300
12024: DOUBLE
12025: GREATEREQUAL
12026: IFFALSE 12034
12028: LD_INT 399
12030: DOUBLE
12031: LESSEQUAL
12032: IFTRUE 12036
12034: GO 12098
12036: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
12037: LD_VAR 0 1
12041: PPUSH
12042: LD_VAR 0 2
12046: PPUSH
12047: LD_VAR 0 3
12051: PPUSH
12052: LD_VAR 0 4
12056: PPUSH
12057: LD_VAR 0 5
12061: PPUSH
12062: LD_VAR 0 6
12066: PPUSH
12067: LD_VAR 0 7
12071: PPUSH
12072: LD_VAR 0 8
12076: PPUSH
12077: LD_VAR 0 9
12081: PPUSH
12082: LD_VAR 0 10
12086: PPUSH
12087: LD_VAR 0 11
12091: PPUSH
12092: CALL 61694 0 11
12096: GO 12099
12098: POP
// end ;
12099: PPOPN 11
12101: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
12102: LD_VAR 0 1
12106: PPUSH
12107: LD_VAR 0 2
12111: PPUSH
12112: LD_VAR 0 3
12116: PPUSH
12117: LD_VAR 0 4
12121: PPUSH
12122: LD_VAR 0 5
12126: PPUSH
12127: CALL 12184 0 5
// end ; end_of_file
12131: PPOPN 5
12133: END
// export function SOS_UnitDestroyed ( un ) ; begin
12134: LD_INT 0
12136: PPUSH
// ComRadiation ( un ) ;
12137: LD_VAR 0 1
12141: PPUSH
12142: CALL 13223 0 1
// end ;
12146: LD_VAR 0 2
12150: RET
// export function SOS_UnitKamikazed ( un ) ; begin
12151: LD_INT 0
12153: PPUSH
// ComRadiation ( un ) ;
12154: LD_VAR 0 1
12158: PPUSH
12159: CALL 13223 0 1
// end ;
12163: LD_VAR 0 2
12167: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
12168: LD_INT 0
12170: PPUSH
// end ;
12171: LD_VAR 0 4
12175: RET
// export function SOS_Command ( cmd ) ; begin
12176: LD_INT 0
12178: PPUSH
// end ;
12179: LD_VAR 0 2
12183: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
12184: LD_INT 0
12186: PPUSH
// end ;
12187: LD_VAR 0 6
12191: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
12192: LD_INT 0
12194: PPUSH
12195: PPUSH
12196: PPUSH
12197: PPUSH
// if not vehicle or not factory then
12198: LD_VAR 0 1
12202: NOT
12203: IFTRUE 12212
12205: PUSH
12206: LD_VAR 0 2
12210: NOT
12211: OR
12212: IFFALSE 12216
// exit ;
12214: GO 12798
// if not factoryWaypoints then
12216: LD_EXP 57
12220: NOT
12221: IFFALSE 12225
// exit ;
12223: GO 12798
// for i := 1 to Count ( factoryWaypoints ) do
12225: LD_ADDR_VAR 0 4
12229: PUSH
12230: DOUBLE
12231: LD_INT 1
12233: DEC
12234: ST_TO_ADDR
12235: LD_EXP 57
12239: PPUSH
12240: CALL 19760 0 1
12244: PUSH
12245: FOR_TO
12246: IFFALSE 12796
// if factoryWaypoints [ i ] [ 2 ] = factory then
12248: LD_EXP 57
12252: PUSH
12253: LD_VAR 0 4
12257: ARRAY
12258: PUSH
12259: LD_INT 2
12261: ARRAY
12262: PUSH
12263: LD_VAR 0 2
12267: EQUAL
12268: IFFALSE 12794
// begin if GetControl ( vehicle ) = control_manual then
12270: LD_VAR 0 1
12274: PPUSH
12275: CALL_OW 263
12279: PUSH
12280: LD_INT 1
12282: EQUAL
12283: IFFALSE 12647
// begin driver := IsDrivenBy ( vehicle ) ;
12285: LD_ADDR_VAR 0 5
12289: PUSH
12290: LD_VAR 0 1
12294: PPUSH
12295: CALL_OW 311
12299: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
12300: LD_VAR 0 5
12304: PUSH
12305: LD_EXP 58
12309: IN
12310: IFTRUE 12324
12312: PUSH
12313: LD_VAR 0 1
12317: PUSH
12318: LD_EXP 58
12322: IN
12323: OR
12324: IFFALSE 12330
// exit ;
12326: POP
12327: POP
12328: GO 12798
// if not HasTask ( driver ) then
12330: LD_VAR 0 5
12334: PPUSH
12335: CALL_OW 314
12339: NOT
12340: IFFALSE 12645
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
12342: LD_ADDR_EXP 58
12346: PUSH
12347: LD_EXP 58
12351: PPUSH
12352: LD_VAR 0 5
12356: PPUSH
12357: CALL 55692 0 2
12361: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
12362: LD_ADDR_EXP 58
12366: PUSH
12367: LD_EXP 58
12371: PPUSH
12372: LD_VAR 0 1
12376: PPUSH
12377: CALL 55692 0 2
12381: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12382: LD_ADDR_VAR 0 6
12386: PUSH
12387: LD_EXP 57
12391: PUSH
12392: LD_VAR 0 4
12396: ARRAY
12397: PUSH
12398: LD_INT 3
12400: ARRAY
12401: PPUSH
12402: LD_EXP 57
12406: PUSH
12407: LD_VAR 0 4
12411: ARRAY
12412: PUSH
12413: LD_INT 4
12415: ARRAY
12416: PPUSH
12417: CALL_OW 428
12421: ST_TO_ADDR
// if hex then
12422: LD_VAR 0 6
12426: IFFALSE 12444
// ComMoveUnit ( driver , hex ) else
12428: LD_VAR 0 5
12432: PPUSH
12433: LD_VAR 0 6
12437: PPUSH
12438: CALL_OW 112
12442: GO 12528
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
12444: LD_VAR 0 1
12448: PPUSH
12449: LD_EXP 57
12453: PUSH
12454: LD_VAR 0 4
12458: ARRAY
12459: PUSH
12460: LD_INT 3
12462: ARRAY
12463: PPUSH
12464: LD_EXP 57
12468: PUSH
12469: LD_VAR 0 4
12473: ARRAY
12474: PUSH
12475: LD_INT 4
12477: ARRAY
12478: PPUSH
12479: CALL_OW 297
12483: PUSH
12484: LD_INT 0
12486: GREATER
12487: IFFALSE 12528
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12489: LD_VAR 0 5
12493: PPUSH
12494: LD_EXP 57
12498: PUSH
12499: LD_VAR 0 4
12503: ARRAY
12504: PUSH
12505: LD_INT 3
12507: ARRAY
12508: PPUSH
12509: LD_EXP 57
12513: PUSH
12514: LD_VAR 0 4
12518: ARRAY
12519: PUSH
12520: LD_INT 4
12522: ARRAY
12523: PPUSH
12524: CALL_OW 111
// AddComExitVehicle ( driver ) ;
12528: LD_VAR 0 5
12532: PPUSH
12533: CALL_OW 181
// if Multiplayer then
12537: LD_OWVAR 4
12541: IFFALSE 12590
// begin repeat wait ( 10 ) ;
12543: LD_INT 10
12545: PPUSH
12546: CALL_OW 67
// until not IsInUnit ( driver ) ;
12550: LD_VAR 0 5
12554: PPUSH
12555: CALL_OW 310
12559: NOT
12560: IFFALSE 12543
// if not HasTask ( driver ) then
12562: LD_VAR 0 5
12566: PPUSH
12567: CALL_OW 314
12571: NOT
12572: IFFALSE 12588
// ComEnterUnit ( driver , factory ) ;
12574: LD_VAR 0 5
12578: PPUSH
12579: LD_VAR 0 2
12583: PPUSH
12584: CALL_OW 120
// end else
12588: GO 12604
// AddComEnterUnit ( driver , factory ) ;
12590: LD_VAR 0 5
12594: PPUSH
12595: LD_VAR 0 2
12599: PPUSH
12600: CALL_OW 180
// wait ( 0 0$1 ) ;
12604: LD_INT 35
12606: PPUSH
12607: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
12611: LD_ADDR_EXP 58
12615: PUSH
12616: LD_EXP 58
12620: PUSH
12621: LD_VAR 0 5
12625: DIFF
12626: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
12627: LD_ADDR_EXP 58
12631: PUSH
12632: LD_EXP 58
12636: PUSH
12637: LD_VAR 0 1
12641: DIFF
12642: ST_TO_ADDR
// break ;
12643: GO 12796
// end ; end else
12645: GO 12794
// if GetControl ( vehicle ) = control_remote then
12647: LD_VAR 0 1
12651: PPUSH
12652: CALL_OW 263
12656: PUSH
12657: LD_INT 2
12659: EQUAL
12660: IFFALSE 12746
// begin wait ( 0 0$2 ) ;
12662: LD_INT 70
12664: PPUSH
12665: CALL_OW 67
// repeat wait ( 10 ) ;
12669: LD_INT 10
12671: PPUSH
12672: CALL_OW 67
// Connect ( vehicle ) ;
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL 26004 0 1
// until IsControledBy ( vehicle ) ;
12685: LD_VAR 0 1
12689: PPUSH
12690: CALL_OW 312
12694: IFFALSE 12669
// wait ( 10 ) ;
12696: LD_INT 10
12698: PPUSH
12699: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12703: LD_VAR 0 1
12707: PPUSH
12708: LD_EXP 57
12712: PUSH
12713: LD_VAR 0 4
12717: ARRAY
12718: PUSH
12719: LD_INT 3
12721: ARRAY
12722: PPUSH
12723: LD_EXP 57
12727: PUSH
12728: LD_VAR 0 4
12732: ARRAY
12733: PUSH
12734: LD_INT 4
12736: ARRAY
12737: PPUSH
12738: CALL_OW 111
// break ;
12742: GO 12796
// end else
12744: GO 12794
// begin wait ( 0 0$3 ) ;
12746: LD_INT 105
12748: PPUSH
12749: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12753: LD_VAR 0 1
12757: PPUSH
12758: LD_EXP 57
12762: PUSH
12763: LD_VAR 0 4
12767: ARRAY
12768: PUSH
12769: LD_INT 3
12771: ARRAY
12772: PPUSH
12773: LD_EXP 57
12777: PUSH
12778: LD_VAR 0 4
12782: ARRAY
12783: PUSH
12784: LD_INT 4
12786: ARRAY
12787: PPUSH
12788: CALL_OW 111
// break ;
12792: GO 12796
// end ; end ;
12794: GO 12245
12796: POP
12797: POP
// end ;
12798: LD_VAR 0 3
12802: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
12803: LD_INT 0
12805: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
12806: LD_VAR 0 1
12810: PUSH
12811: LD_INT 250
12813: EQUAL
12814: IFFALSE 12831
12816: PUSH
12817: LD_VAR 0 2
12821: PPUSH
12822: CALL_OW 264
12826: PUSH
12827: LD_INT 81
12829: EQUAL
12830: AND
12831: IFFALSE 12852
// MinerPlaceMine ( unit , x , y ) ;
12833: LD_VAR 0 2
12837: PPUSH
12838: LD_VAR 0 4
12842: PPUSH
12843: LD_VAR 0 5
12847: PPUSH
12848: CALL 15984 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
12852: LD_VAR 0 1
12856: PUSH
12857: LD_INT 251
12859: EQUAL
12860: IFFALSE 12877
12862: PUSH
12863: LD_VAR 0 2
12867: PPUSH
12868: CALL_OW 264
12872: PUSH
12873: LD_INT 81
12875: EQUAL
12876: AND
12877: IFFALSE 12898
// MinerDetonateMine ( unit , x , y ) ;
12879: LD_VAR 0 2
12883: PPUSH
12884: LD_VAR 0 4
12888: PPUSH
12889: LD_VAR 0 5
12893: PPUSH
12894: CALL 16263 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
12898: LD_VAR 0 1
12902: PUSH
12903: LD_INT 252
12905: EQUAL
12906: IFFALSE 12923
12908: PUSH
12909: LD_VAR 0 2
12913: PPUSH
12914: CALL_OW 264
12918: PUSH
12919: LD_INT 81
12921: EQUAL
12922: AND
12923: IFFALSE 12944
// MinerCreateMinefield ( unit , x , y ) ;
12925: LD_VAR 0 2
12929: PPUSH
12930: LD_VAR 0 4
12934: PPUSH
12935: LD_VAR 0 5
12939: PPUSH
12940: CALL 16682 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
12944: LD_VAR 0 1
12948: PUSH
12949: LD_INT 253
12951: EQUAL
12952: IFFALSE 12969
12954: PUSH
12955: LD_VAR 0 2
12959: PPUSH
12960: CALL_OW 257
12964: PUSH
12965: LD_INT 5
12967: EQUAL
12968: AND
12969: IFFALSE 12990
// ComBinocular ( unit , x , y ) ;
12971: LD_VAR 0 2
12975: PPUSH
12976: LD_VAR 0 4
12980: PPUSH
12981: LD_VAR 0 5
12985: PPUSH
12986: CALL 17057 0 3
// if selectedUnit then
12990: LD_VAR 0 3
12994: IFFALSE 13054
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
12996: LD_VAR 0 1
13000: PUSH
13001: LD_INT 254
13003: EQUAL
13004: IFFALSE 13021
13006: PUSH
13007: LD_VAR 0 2
13011: PPUSH
13012: CALL_OW 264
13016: PUSH
13017: LD_INT 99
13019: EQUAL
13020: AND
13021: IFFALSE 13038
13023: PUSH
13024: LD_VAR 0 3
13028: PPUSH
13029: CALL_OW 263
13033: PUSH
13034: LD_INT 3
13036: EQUAL
13037: AND
13038: IFFALSE 13054
// HackDestroyVehicle ( unit , selectedUnit ) ;
13040: LD_VAR 0 2
13044: PPUSH
13045: LD_VAR 0 3
13049: PPUSH
13050: CALL 15344 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
13054: LD_VAR 0 1
13058: PUSH
13059: LD_INT 255
13061: EQUAL
13062: IFFALSE 13086
13064: PUSH
13065: LD_VAR 0 2
13069: PPUSH
13070: CALL_OW 264
13074: PUSH
13075: LD_INT 14
13077: PUSH
13078: LD_INT 53
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: IN
13085: AND
13086: IFFALSE 13104
13088: PUSH
13089: LD_VAR 0 4
13093: PPUSH
13094: LD_VAR 0 5
13098: PPUSH
13099: CALL_OW 488
13103: AND
13104: IFFALSE 13128
// CutTreeXYR ( unit , x , y , 12 ) ;
13106: LD_VAR 0 2
13110: PPUSH
13111: LD_VAR 0 4
13115: PPUSH
13116: LD_VAR 0 5
13120: PPUSH
13121: LD_INT 12
13123: PPUSH
13124: CALL 13319 0 4
// if cmd = 256 then
13128: LD_VAR 0 1
13132: PUSH
13133: LD_INT 256
13135: EQUAL
13136: IFFALSE 13157
// SetFactoryWaypoint ( unit , x , y ) ;
13138: LD_VAR 0 2
13142: PPUSH
13143: LD_VAR 0 4
13147: PPUSH
13148: LD_VAR 0 5
13152: PPUSH
13153: CALL 61702 0 3
// if cmd = 257 then
13157: LD_VAR 0 1
13161: PUSH
13162: LD_INT 257
13164: EQUAL
13165: IFFALSE 13186
// SetWarehouseGatheringPoint ( unit , x , y ) ;
13167: LD_VAR 0 2
13171: PPUSH
13172: LD_VAR 0 4
13176: PPUSH
13177: LD_VAR 0 5
13181: PPUSH
13182: CALL 62198 0 3
// if cmd = 258 then
13186: LD_VAR 0 1
13190: PUSH
13191: LD_INT 258
13193: EQUAL
13194: IFFALSE 13218
// BurnTreeXYR ( unit , x , y , 8 ) ;
13196: LD_VAR 0 2
13200: PPUSH
13201: LD_VAR 0 4
13205: PPUSH
13206: LD_VAR 0 5
13210: PPUSH
13211: LD_INT 8
13213: PPUSH
13214: CALL 13719 0 4
// end ;
13218: LD_VAR 0 6
13222: RET
// export function ComRadiation ( un ) ; var eff ; begin
13223: LD_INT 0
13225: PPUSH
13226: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL_OW 264
13236: PUSH
13237: LD_INT 91
13239: NONEQUAL
13240: IFFALSE 13244
// exit ;
13242: GO 13314
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13244: LD_INT 68
13246: PPUSH
13247: LD_VAR 0 1
13251: PPUSH
13252: CALL_OW 255
13256: PPUSH
13257: CALL_OW 321
13261: PUSH
13262: LD_INT 2
13264: EQUAL
13265: IFFALSE 13277
// eff := 50 else
13267: LD_ADDR_VAR 0 3
13271: PUSH
13272: LD_INT 50
13274: ST_TO_ADDR
13275: GO 13285
// eff := 25 ;
13277: LD_ADDR_VAR 0 3
13281: PUSH
13282: LD_INT 25
13284: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13285: LD_VAR 0 1
13289: PPUSH
13290: CALL_OW 250
13294: PPUSH
13295: LD_VAR 0 1
13299: PPUSH
13300: CALL_OW 251
13304: PPUSH
13305: LD_VAR 0 3
13309: PPUSH
13310: CALL_OW 495
// end ;
13314: LD_VAR 0 2
13318: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13319: LD_INT 0
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
13326: PPUSH
13327: PPUSH
13328: PPUSH
13329: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL_OW 302
13339: NOT
13340: IFTRUE 13359
13342: PUSH
13343: LD_VAR 0 2
13347: PPUSH
13348: LD_VAR 0 3
13352: PPUSH
13353: CALL_OW 488
13357: NOT
13358: OR
13359: IFTRUE 13368
13361: PUSH
13362: LD_VAR 0 4
13366: NOT
13367: OR
13368: IFFALSE 13372
// exit ;
13370: GO 13714
// list := [ ] ;
13372: LD_ADDR_VAR 0 13
13376: PUSH
13377: EMPTY
13378: ST_TO_ADDR
// if x - r < 0 then
13379: LD_VAR 0 2
13383: PUSH
13384: LD_VAR 0 4
13388: MINUS
13389: PUSH
13390: LD_INT 0
13392: LESS
13393: IFFALSE 13405
// min_x := 0 else
13395: LD_ADDR_VAR 0 7
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
13403: GO 13421
// min_x := x - r ;
13405: LD_ADDR_VAR 0 7
13409: PUSH
13410: LD_VAR 0 2
13414: PUSH
13415: LD_VAR 0 4
13419: MINUS
13420: ST_TO_ADDR
// if y - r < 0 then
13421: LD_VAR 0 3
13425: PUSH
13426: LD_VAR 0 4
13430: MINUS
13431: PUSH
13432: LD_INT 0
13434: LESS
13435: IFFALSE 13447
// min_y := 0 else
13437: LD_ADDR_VAR 0 8
13441: PUSH
13442: LD_INT 0
13444: ST_TO_ADDR
13445: GO 13463
// min_y := y - r ;
13447: LD_ADDR_VAR 0 8
13451: PUSH
13452: LD_VAR 0 3
13456: PUSH
13457: LD_VAR 0 4
13461: MINUS
13462: ST_TO_ADDR
// max_x := x + r ;
13463: LD_ADDR_VAR 0 9
13467: PUSH
13468: LD_VAR 0 2
13472: PUSH
13473: LD_VAR 0 4
13477: PLUS
13478: ST_TO_ADDR
// max_y := y + r ;
13479: LD_ADDR_VAR 0 10
13483: PUSH
13484: LD_VAR 0 3
13488: PUSH
13489: LD_VAR 0 4
13493: PLUS
13494: ST_TO_ADDR
// for _x = min_x to max_x do
13495: LD_ADDR_VAR 0 11
13499: PUSH
13500: DOUBLE
13501: LD_VAR 0 7
13505: DEC
13506: ST_TO_ADDR
13507: LD_VAR 0 9
13511: PUSH
13512: FOR_TO
13513: IFFALSE 13632
// for _y = min_y to max_y do
13515: LD_ADDR_VAR 0 12
13519: PUSH
13520: DOUBLE
13521: LD_VAR 0 8
13525: DEC
13526: ST_TO_ADDR
13527: LD_VAR 0 10
13531: PUSH
13532: FOR_TO
13533: IFFALSE 13628
// begin if not ValidHex ( _x , _y ) then
13535: LD_VAR 0 11
13539: PPUSH
13540: LD_VAR 0 12
13544: PPUSH
13545: CALL_OW 488
13549: NOT
13550: IFFALSE 13554
// continue ;
13552: GO 13532
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13554: LD_VAR 0 11
13558: PPUSH
13559: LD_VAR 0 12
13563: PPUSH
13564: CALL_OW 351
13568: IFFALSE 13586
13570: PUSH
13571: LD_VAR 0 11
13575: PPUSH
13576: LD_VAR 0 12
13580: PPUSH
13581: CALL_OW 554
13585: AND
13586: IFFALSE 13626
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13588: LD_ADDR_VAR 0 13
13592: PUSH
13593: LD_VAR 0 13
13597: PPUSH
13598: LD_VAR 0 13
13602: PUSH
13603: LD_INT 1
13605: PLUS
13606: PPUSH
13607: LD_VAR 0 11
13611: PUSH
13612: LD_VAR 0 12
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PPUSH
13621: CALL_OW 2
13625: ST_TO_ADDR
// end ;
13626: GO 13532
13628: POP
13629: POP
13630: GO 13512
13632: POP
13633: POP
// if not list then
13634: LD_VAR 0 13
13638: NOT
13639: IFFALSE 13643
// exit ;
13641: GO 13714
// for i in list do
13643: LD_ADDR_VAR 0 6
13647: PUSH
13648: LD_VAR 0 13
13652: PUSH
13653: FOR_IN
13654: IFFALSE 13712
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
13656: LD_VAR 0 1
13660: PPUSH
13661: LD_STRING M
13663: PUSH
13664: LD_VAR 0 6
13668: PUSH
13669: LD_INT 1
13671: ARRAY
13672: PUSH
13673: LD_VAR 0 6
13677: PUSH
13678: LD_INT 2
13680: ARRAY
13681: PUSH
13682: LD_INT 0
13684: PUSH
13685: LD_INT 0
13687: PUSH
13688: LD_INT 0
13690: PUSH
13691: LD_INT 0
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: PUSH
13703: EMPTY
13704: LIST
13705: PPUSH
13706: CALL_OW 447
13710: GO 13653
13712: POP
13713: POP
// end ;
13714: LD_VAR 0 5
13718: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
13719: LD_INT 0
13721: PPUSH
13722: PPUSH
13723: PPUSH
13724: PPUSH
13725: PPUSH
13726: PPUSH
13727: PPUSH
13728: PPUSH
13729: PPUSH
13730: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
13731: LD_VAR 0 1
13735: PPUSH
13736: CALL_OW 302
13740: NOT
13741: IFTRUE 13760
13743: PUSH
13744: LD_VAR 0 2
13748: PPUSH
13749: LD_VAR 0 3
13753: PPUSH
13754: CALL_OW 488
13758: NOT
13759: OR
13760: IFTRUE 13769
13762: PUSH
13763: LD_VAR 0 4
13767: NOT
13768: OR
13769: IFFALSE 13773
// exit ;
13771: GO 14290
// list := [ ] ;
13773: LD_ADDR_VAR 0 13
13777: PUSH
13778: EMPTY
13779: ST_TO_ADDR
// if x - r < 0 then
13780: LD_VAR 0 2
13784: PUSH
13785: LD_VAR 0 4
13789: MINUS
13790: PUSH
13791: LD_INT 0
13793: LESS
13794: IFFALSE 13806
// min_x := 0 else
13796: LD_ADDR_VAR 0 7
13800: PUSH
13801: LD_INT 0
13803: ST_TO_ADDR
13804: GO 13822
// min_x := x - r ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_VAR 0 2
13815: PUSH
13816: LD_VAR 0 4
13820: MINUS
13821: ST_TO_ADDR
// if y - r < 0 then
13822: LD_VAR 0 3
13826: PUSH
13827: LD_VAR 0 4
13831: MINUS
13832: PUSH
13833: LD_INT 0
13835: LESS
13836: IFFALSE 13848
// min_y := 0 else
13838: LD_ADDR_VAR 0 8
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
13846: GO 13864
// min_y := y - r ;
13848: LD_ADDR_VAR 0 8
13852: PUSH
13853: LD_VAR 0 3
13857: PUSH
13858: LD_VAR 0 4
13862: MINUS
13863: ST_TO_ADDR
// max_x := x + r ;
13864: LD_ADDR_VAR 0 9
13868: PUSH
13869: LD_VAR 0 2
13873: PUSH
13874: LD_VAR 0 4
13878: PLUS
13879: ST_TO_ADDR
// max_y := y + r ;
13880: LD_ADDR_VAR 0 10
13884: PUSH
13885: LD_VAR 0 3
13889: PUSH
13890: LD_VAR 0 4
13894: PLUS
13895: ST_TO_ADDR
// for _x = min_x to max_x do
13896: LD_ADDR_VAR 0 11
13900: PUSH
13901: DOUBLE
13902: LD_VAR 0 7
13906: DEC
13907: ST_TO_ADDR
13908: LD_VAR 0 9
13912: PUSH
13913: FOR_TO
13914: IFFALSE 14033
// for _y = min_y to max_y do
13916: LD_ADDR_VAR 0 12
13920: PUSH
13921: DOUBLE
13922: LD_VAR 0 8
13926: DEC
13927: ST_TO_ADDR
13928: LD_VAR 0 10
13932: PUSH
13933: FOR_TO
13934: IFFALSE 14029
// begin if not ValidHex ( _x , _y ) then
13936: LD_VAR 0 11
13940: PPUSH
13941: LD_VAR 0 12
13945: PPUSH
13946: CALL_OW 488
13950: NOT
13951: IFFALSE 13955
// continue ;
13953: GO 13933
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13955: LD_VAR 0 11
13959: PPUSH
13960: LD_VAR 0 12
13964: PPUSH
13965: CALL_OW 351
13969: IFFALSE 13987
13971: PUSH
13972: LD_VAR 0 11
13976: PPUSH
13977: LD_VAR 0 12
13981: PPUSH
13982: CALL_OW 554
13986: AND
13987: IFFALSE 14027
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13989: LD_ADDR_VAR 0 13
13993: PUSH
13994: LD_VAR 0 13
13998: PPUSH
13999: LD_VAR 0 13
14003: PUSH
14004: LD_INT 1
14006: PLUS
14007: PPUSH
14008: LD_VAR 0 11
14012: PUSH
14013: LD_VAR 0 12
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 2
14026: ST_TO_ADDR
// end ;
14027: GO 13933
14029: POP
14030: POP
14031: GO 13913
14033: POP
14034: POP
// if not list then
14035: LD_VAR 0 13
14039: NOT
14040: IFFALSE 14044
// exit ;
14042: GO 14290
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
14044: LD_ADDR_VAR 0 13
14048: PUSH
14049: LD_VAR 0 1
14053: PPUSH
14054: LD_VAR 0 13
14058: PPUSH
14059: LD_INT 1
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL 23132 0 4
14069: ST_TO_ADDR
// ComStop ( flame ) ;
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 141
// for i in list do
14079: LD_ADDR_VAR 0 6
14083: PUSH
14084: LD_VAR 0 13
14088: PUSH
14089: FOR_IN
14090: IFFALSE 14121
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
14092: LD_VAR 0 1
14096: PPUSH
14097: LD_VAR 0 6
14101: PUSH
14102: LD_INT 1
14104: ARRAY
14105: PPUSH
14106: LD_VAR 0 6
14110: PUSH
14111: LD_INT 2
14113: ARRAY
14114: PPUSH
14115: CALL_OW 176
14119: GO 14089
14121: POP
14122: POP
// repeat wait ( 0 0$1 ) ;
14123: LD_INT 35
14125: PPUSH
14126: CALL_OW 67
// task := GetTaskList ( flame ) ;
14130: LD_ADDR_VAR 0 14
14134: PUSH
14135: LD_VAR 0 1
14139: PPUSH
14140: CALL_OW 437
14144: ST_TO_ADDR
// if not task then
14145: LD_VAR 0 14
14149: NOT
14150: IFFALSE 14154
// exit ;
14152: GO 14290
// if task [ 1 ] [ 1 ] <> | then
14154: LD_VAR 0 14
14158: PUSH
14159: LD_INT 1
14161: ARRAY
14162: PUSH
14163: LD_INT 1
14165: ARRAY
14166: PUSH
14167: LD_STRING |
14169: NONEQUAL
14170: IFFALSE 14174
// exit ;
14172: GO 14290
// _x := task [ 1 ] [ 2 ] ;
14174: LD_ADDR_VAR 0 11
14178: PUSH
14179: LD_VAR 0 14
14183: PUSH
14184: LD_INT 1
14186: ARRAY
14187: PUSH
14188: LD_INT 2
14190: ARRAY
14191: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
14192: LD_ADDR_VAR 0 12
14196: PUSH
14197: LD_VAR 0 14
14201: PUSH
14202: LD_INT 1
14204: ARRAY
14205: PUSH
14206: LD_INT 3
14208: ARRAY
14209: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
14210: LD_VAR 0 11
14214: PPUSH
14215: LD_VAR 0 12
14219: PPUSH
14220: CALL_OW 351
14224: NOT
14225: IFTRUE 14244
14227: PUSH
14228: LD_VAR 0 11
14232: PPUSH
14233: LD_VAR 0 12
14237: PPUSH
14238: CALL_OW 554
14242: NOT
14243: OR
14244: IFFALSE 14278
// begin task := Delete ( task , 1 ) ;
14246: LD_ADDR_VAR 0 14
14250: PUSH
14251: LD_VAR 0 14
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 3
14263: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
14264: LD_VAR 0 1
14268: PPUSH
14269: LD_VAR 0 14
14273: PPUSH
14274: CALL_OW 446
// end ; until not HasTask ( flame ) ;
14278: LD_VAR 0 1
14282: PPUSH
14283: CALL_OW 314
14287: NOT
14288: IFFALSE 14123
// end ;
14290: LD_VAR 0 5
14294: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14295: LD_EXP 47
14299: NOT
14300: IFFALSE 14350
14302: GO 14304
14304: DISABLE
// begin initHack := true ;
14305: LD_ADDR_EXP 47
14309: PUSH
14310: LD_INT 1
14312: ST_TO_ADDR
// hackTanks := [ ] ;
14313: LD_ADDR_EXP 48
14317: PUSH
14318: EMPTY
14319: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14320: LD_ADDR_EXP 49
14324: PUSH
14325: EMPTY
14326: ST_TO_ADDR
// hackLimit := 3 ;
14327: LD_ADDR_EXP 50
14331: PUSH
14332: LD_INT 3
14334: ST_TO_ADDR
// hackDist := 12 ;
14335: LD_ADDR_EXP 51
14339: PUSH
14340: LD_INT 12
14342: ST_TO_ADDR
// hackCounter := [ ] ;
14343: LD_ADDR_EXP 52
14347: PUSH
14348: EMPTY
14349: ST_TO_ADDR
// end ;
14350: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14351: LD_EXP 47
14355: IFFALSE 14373
14357: PUSH
14358: LD_INT 34
14360: PUSH
14361: LD_INT 99
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PPUSH
14368: CALL_OW 69
14372: AND
14373: IFFALSE 14626
14375: GO 14377
14377: DISABLE
14378: LD_INT 0
14380: PPUSH
14381: PPUSH
// begin enable ;
14382: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_INT 34
14390: PUSH
14391: LD_INT 99
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PPUSH
14398: CALL_OW 69
14402: PUSH
14403: FOR_IN
14404: IFFALSE 14624
// begin if not i in hackTanks then
14406: LD_VAR 0 1
14410: PUSH
14411: LD_EXP 48
14415: IN
14416: NOT
14417: IFFALSE 14500
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14419: LD_ADDR_EXP 48
14423: PUSH
14424: LD_EXP 48
14428: PPUSH
14429: LD_EXP 48
14433: PUSH
14434: LD_INT 1
14436: PLUS
14437: PPUSH
14438: LD_VAR 0 1
14442: PPUSH
14443: CALL_OW 1
14447: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14448: LD_ADDR_EXP 49
14452: PUSH
14453: LD_EXP 49
14457: PPUSH
14458: LD_EXP 49
14462: PUSH
14463: LD_INT 1
14465: PLUS
14466: PPUSH
14467: EMPTY
14468: PPUSH
14469: CALL_OW 1
14473: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14474: LD_ADDR_EXP 52
14478: PUSH
14479: LD_EXP 52
14483: PPUSH
14484: LD_EXP 52
14488: PUSH
14489: LD_INT 1
14491: PLUS
14492: PPUSH
14493: EMPTY
14494: PPUSH
14495: CALL_OW 1
14499: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14500: LD_VAR 0 1
14504: PPUSH
14505: CALL_OW 302
14509: NOT
14510: IFFALSE 14523
// begin HackUnlinkAll ( i ) ;
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL 14629 0 1
// continue ;
14521: GO 14403
// end ; HackCheckCapturedStatus ( i ) ;
14523: LD_VAR 0 1
14527: PPUSH
14528: CALL 15074 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14532: LD_ADDR_VAR 0 2
14536: PUSH
14537: LD_INT 81
14539: PUSH
14540: LD_VAR 0 1
14544: PPUSH
14545: CALL_OW 255
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 33
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 91
14566: PUSH
14567: LD_VAR 0 1
14571: PUSH
14572: LD_EXP 51
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 50
14584: PUSH
14585: EMPTY
14586: LIST
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: PPUSH
14594: CALL_OW 69
14598: ST_TO_ADDR
// if not tmp then
14599: LD_VAR 0 2
14603: NOT
14604: IFFALSE 14608
// continue ;
14606: GO 14403
// HackLink ( i , tmp ) ;
14608: LD_VAR 0 1
14612: PPUSH
14613: LD_VAR 0 2
14617: PPUSH
14618: CALL 14765 0 2
// end ;
14622: GO 14403
14624: POP
14625: POP
// end ;
14626: PPOPN 2
14628: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
14629: LD_INT 0
14631: PPUSH
14632: PPUSH
14633: PPUSH
// if not hack in hackTanks then
14634: LD_VAR 0 1
14638: PUSH
14639: LD_EXP 48
14643: IN
14644: NOT
14645: IFFALSE 14649
// exit ;
14647: GO 14760
// index := GetElementIndex ( hackTanks , hack ) ;
14649: LD_ADDR_VAR 0 4
14653: PUSH
14654: LD_EXP 48
14658: PPUSH
14659: LD_VAR 0 1
14663: PPUSH
14664: CALL 22427 0 2
14668: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
14669: LD_EXP 49
14673: PUSH
14674: LD_VAR 0 4
14678: ARRAY
14679: IFFALSE 14760
// begin for i in hackTanksCaptured [ index ] do
14681: LD_ADDR_VAR 0 3
14685: PUSH
14686: LD_EXP 49
14690: PUSH
14691: LD_VAR 0 4
14695: ARRAY
14696: PUSH
14697: FOR_IN
14698: IFFALSE 14724
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
14700: LD_VAR 0 3
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PPUSH
14709: LD_VAR 0 3
14713: PUSH
14714: LD_INT 2
14716: ARRAY
14717: PPUSH
14718: CALL_OW 235
14722: GO 14697
14724: POP
14725: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
14726: LD_ADDR_EXP 49
14730: PUSH
14731: LD_EXP 49
14735: PPUSH
14736: LD_VAR 0 4
14740: PPUSH
14741: EMPTY
14742: PPUSH
14743: CALL_OW 1
14747: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
14748: LD_VAR 0 1
14752: PPUSH
14753: LD_INT 0
14755: PPUSH
14756: CALL_OW 505
// end ; end ;
14760: LD_VAR 0 2
14764: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
14765: LD_INT 0
14767: PPUSH
14768: PPUSH
14769: PPUSH
// if not hack in hackTanks or not vehicles then
14770: LD_VAR 0 1
14774: PUSH
14775: LD_EXP 48
14779: IN
14780: NOT
14781: IFTRUE 14790
14783: PUSH
14784: LD_VAR 0 2
14788: NOT
14789: OR
14790: IFFALSE 14794
// exit ;
14792: GO 15069
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
14794: LD_ADDR_VAR 0 2
14798: PUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: LD_VAR 0 2
14808: PPUSH
14809: LD_INT 1
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL 23079 0 4
14819: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
14820: LD_ADDR_VAR 0 5
14824: PUSH
14825: LD_EXP 48
14829: PPUSH
14830: LD_VAR 0 1
14834: PPUSH
14835: CALL 22427 0 2
14839: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
14840: LD_EXP 49
14844: PUSH
14845: LD_VAR 0 5
14849: ARRAY
14850: PUSH
14851: LD_EXP 50
14855: LESS
14856: IFFALSE 15045
// begin for i := 1 to vehicles do
14858: LD_ADDR_VAR 0 4
14862: PUSH
14863: DOUBLE
14864: LD_INT 1
14866: DEC
14867: ST_TO_ADDR
14868: LD_VAR 0 2
14872: PUSH
14873: FOR_TO
14874: IFFALSE 15043
// begin if hackTanksCaptured [ index ] = hackLimit then
14876: LD_EXP 49
14880: PUSH
14881: LD_VAR 0 5
14885: ARRAY
14886: PUSH
14887: LD_EXP 50
14891: EQUAL
14892: IFFALSE 14896
// break ;
14894: GO 15043
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
14896: LD_ADDR_EXP 52
14900: PUSH
14901: LD_EXP 52
14905: PPUSH
14906: LD_VAR 0 5
14910: PPUSH
14911: LD_EXP 52
14915: PUSH
14916: LD_VAR 0 5
14920: ARRAY
14921: PUSH
14922: LD_INT 1
14924: PLUS
14925: PPUSH
14926: CALL_OW 1
14930: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
14931: LD_ADDR_EXP 49
14935: PUSH
14936: LD_EXP 49
14940: PPUSH
14941: LD_VAR 0 5
14945: PUSH
14946: LD_EXP 49
14950: PUSH
14951: LD_VAR 0 5
14955: ARRAY
14956: PUSH
14957: LD_INT 1
14959: PLUS
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PPUSH
14965: LD_VAR 0 2
14969: PUSH
14970: LD_VAR 0 4
14974: ARRAY
14975: PUSH
14976: LD_VAR 0 2
14980: PUSH
14981: LD_VAR 0 4
14985: ARRAY
14986: PPUSH
14987: CALL_OW 255
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PPUSH
14996: CALL 22644 0 3
15000: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15001: LD_VAR 0 2
15005: PUSH
15006: LD_VAR 0 4
15010: ARRAY
15011: PPUSH
15012: LD_VAR 0 1
15016: PPUSH
15017: CALL_OW 255
15021: PPUSH
15022: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15026: LD_VAR 0 2
15030: PUSH
15031: LD_VAR 0 4
15035: ARRAY
15036: PPUSH
15037: CALL_OW 141
// end ;
15041: GO 14873
15043: POP
15044: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15045: LD_VAR 0 1
15049: PPUSH
15050: LD_EXP 49
15054: PUSH
15055: LD_VAR 0 5
15059: ARRAY
15060: PUSH
15061: LD_INT 0
15063: PLUS
15064: PPUSH
15065: CALL_OW 505
// end ;
15069: LD_VAR 0 3
15073: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15074: LD_INT 0
15076: PPUSH
15077: PPUSH
15078: PPUSH
15079: PPUSH
// if not hack in hackTanks then
15080: LD_VAR 0 1
15084: PUSH
15085: LD_EXP 48
15089: IN
15090: NOT
15091: IFFALSE 15095
// exit ;
15093: GO 15339
// index := GetElementIndex ( hackTanks , hack ) ;
15095: LD_ADDR_VAR 0 4
15099: PUSH
15100: LD_EXP 48
15104: PPUSH
15105: LD_VAR 0 1
15109: PPUSH
15110: CALL 22427 0 2
15114: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15115: LD_ADDR_VAR 0 3
15119: PUSH
15120: DOUBLE
15121: LD_EXP 49
15125: PUSH
15126: LD_VAR 0 4
15130: ARRAY
15131: INC
15132: ST_TO_ADDR
15133: LD_INT 1
15135: PUSH
15136: FOR_DOWNTO
15137: IFFALSE 15313
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15139: LD_ADDR_VAR 0 5
15143: PUSH
15144: LD_EXP 49
15148: PUSH
15149: LD_VAR 0 4
15153: ARRAY
15154: PUSH
15155: LD_VAR 0 3
15159: ARRAY
15160: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15161: LD_VAR 0 5
15165: PUSH
15166: LD_INT 1
15168: ARRAY
15169: PPUSH
15170: CALL_OW 302
15174: NOT
15175: IFTRUE 15203
15177: PUSH
15178: LD_VAR 0 5
15182: PUSH
15183: LD_INT 1
15185: ARRAY
15186: PPUSH
15187: CALL_OW 255
15191: PUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 255
15201: NONEQUAL
15202: OR
15203: IFFALSE 15311
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15205: LD_VAR 0 5
15209: PUSH
15210: LD_INT 1
15212: ARRAY
15213: PPUSH
15214: CALL_OW 305
15218: IFFALSE 15246
15220: PUSH
15221: LD_VAR 0 5
15225: PUSH
15226: LD_INT 1
15228: ARRAY
15229: PPUSH
15230: CALL_OW 255
15234: PUSH
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 255
15244: EQUAL
15245: AND
15246: IFFALSE 15270
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15248: LD_VAR 0 5
15252: PUSH
15253: LD_INT 1
15255: ARRAY
15256: PPUSH
15257: LD_VAR 0 5
15261: PUSH
15262: LD_INT 2
15264: ARRAY
15265: PPUSH
15266: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15270: LD_ADDR_EXP 49
15274: PUSH
15275: LD_EXP 49
15279: PPUSH
15280: LD_VAR 0 4
15284: PPUSH
15285: LD_EXP 49
15289: PUSH
15290: LD_VAR 0 4
15294: ARRAY
15295: PPUSH
15296: LD_VAR 0 3
15300: PPUSH
15301: CALL_OW 3
15305: PPUSH
15306: CALL_OW 1
15310: ST_TO_ADDR
// end ; end ;
15311: GO 15136
15313: POP
15314: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15315: LD_VAR 0 1
15319: PPUSH
15320: LD_EXP 49
15324: PUSH
15325: LD_VAR 0 4
15329: ARRAY
15330: PUSH
15331: LD_INT 0
15333: PLUS
15334: PPUSH
15335: CALL_OW 505
// end ;
15339: LD_VAR 0 2
15343: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15344: LD_INT 0
15346: PPUSH
15347: PPUSH
15348: PPUSH
15349: PPUSH
// if not hack in hackTanks then
15350: LD_VAR 0 1
15354: PUSH
15355: LD_EXP 48
15359: IN
15360: NOT
15361: IFFALSE 15365
// exit ;
15363: GO 15450
// index := GetElementIndex ( hackTanks , hack ) ;
15365: LD_ADDR_VAR 0 5
15369: PUSH
15370: LD_EXP 48
15374: PPUSH
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL 22427 0 2
15384: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15385: LD_ADDR_VAR 0 4
15389: PUSH
15390: DOUBLE
15391: LD_INT 1
15393: DEC
15394: ST_TO_ADDR
15395: LD_EXP 49
15399: PUSH
15400: LD_VAR 0 5
15404: ARRAY
15405: PUSH
15406: FOR_TO
15407: IFFALSE 15448
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15409: LD_EXP 49
15413: PUSH
15414: LD_VAR 0 5
15418: ARRAY
15419: PUSH
15420: LD_VAR 0 4
15424: ARRAY
15425: PUSH
15426: LD_INT 1
15428: ARRAY
15429: PUSH
15430: LD_VAR 0 2
15434: EQUAL
15435: IFFALSE 15446
// KillUnit ( vehicle ) ;
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL_OW 66
15446: GO 15406
15448: POP
15449: POP
// end ;
15450: LD_VAR 0 3
15454: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
15455: LD_EXP 53
15459: NOT
15460: IFFALSE 15495
15462: GO 15464
15464: DISABLE
// begin initMiner := true ;
15465: LD_ADDR_EXP 53
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// minersList := [ ] ;
15473: LD_ADDR_EXP 54
15477: PUSH
15478: EMPTY
15479: ST_TO_ADDR
// minerMinesList := [ ] ;
15480: LD_ADDR_EXP 55
15484: PUSH
15485: EMPTY
15486: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
15487: LD_ADDR_EXP 56
15491: PUSH
15492: LD_INT 5
15494: ST_TO_ADDR
// end ;
15495: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
15496: LD_EXP 53
15500: IFFALSE 15518
15502: PUSH
15503: LD_INT 34
15505: PUSH
15506: LD_INT 81
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL_OW 69
15517: AND
15518: IFFALSE 15981
15520: GO 15522
15522: DISABLE
15523: LD_INT 0
15525: PPUSH
15526: PPUSH
15527: PPUSH
15528: PPUSH
// begin enable ;
15529: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_INT 34
15537: PUSH
15538: LD_INT 81
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PPUSH
15545: CALL_OW 69
15549: PUSH
15550: FOR_IN
15551: IFFALSE 15623
// begin if not i in minersList then
15553: LD_VAR 0 1
15557: PUSH
15558: LD_EXP 54
15562: IN
15563: NOT
15564: IFFALSE 15621
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
15566: LD_ADDR_EXP 54
15570: PUSH
15571: LD_EXP 54
15575: PPUSH
15576: LD_EXP 54
15580: PUSH
15581: LD_INT 1
15583: PLUS
15584: PPUSH
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 1
15594: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
15595: LD_ADDR_EXP 55
15599: PUSH
15600: LD_EXP 55
15604: PPUSH
15605: LD_EXP 55
15609: PUSH
15610: LD_INT 1
15612: PLUS
15613: PPUSH
15614: EMPTY
15615: PPUSH
15616: CALL_OW 1
15620: ST_TO_ADDR
// end end ;
15621: GO 15550
15623: POP
15624: POP
// for i := minerMinesList downto 1 do
15625: LD_ADDR_VAR 0 1
15629: PUSH
15630: DOUBLE
15631: LD_EXP 55
15635: INC
15636: ST_TO_ADDR
15637: LD_INT 1
15639: PUSH
15640: FOR_DOWNTO
15641: IFFALSE 15979
// begin if IsLive ( minersList [ i ] ) then
15643: LD_EXP 54
15647: PUSH
15648: LD_VAR 0 1
15652: ARRAY
15653: PPUSH
15654: CALL_OW 300
15658: IFFALSE 15686
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
15660: LD_EXP 54
15664: PUSH
15665: LD_VAR 0 1
15669: ARRAY
15670: PPUSH
15671: LD_EXP 55
15675: PUSH
15676: LD_VAR 0 1
15680: ARRAY
15681: PPUSH
15682: CALL_OW 505
// if not minerMinesList [ i ] then
15686: LD_EXP 55
15690: PUSH
15691: LD_VAR 0 1
15695: ARRAY
15696: NOT
15697: IFFALSE 15701
// continue ;
15699: GO 15640
// for j := minerMinesList [ i ] downto 1 do
15701: LD_ADDR_VAR 0 2
15705: PUSH
15706: DOUBLE
15707: LD_EXP 55
15711: PUSH
15712: LD_VAR 0 1
15716: ARRAY
15717: INC
15718: ST_TO_ADDR
15719: LD_INT 1
15721: PUSH
15722: FOR_DOWNTO
15723: IFFALSE 15975
// begin side := GetSide ( minersList [ i ] ) ;
15725: LD_ADDR_VAR 0 3
15729: PUSH
15730: LD_EXP 54
15734: PUSH
15735: LD_VAR 0 1
15739: ARRAY
15740: PPUSH
15741: CALL_OW 255
15745: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
15746: LD_ADDR_VAR 0 4
15750: PUSH
15751: LD_EXP 55
15755: PUSH
15756: LD_VAR 0 1
15760: ARRAY
15761: PUSH
15762: LD_VAR 0 2
15766: ARRAY
15767: PUSH
15768: LD_INT 1
15770: ARRAY
15771: PPUSH
15772: LD_EXP 55
15776: PUSH
15777: LD_VAR 0 1
15781: ARRAY
15782: PUSH
15783: LD_VAR 0 2
15787: ARRAY
15788: PUSH
15789: LD_INT 2
15791: ARRAY
15792: PPUSH
15793: CALL_OW 428
15797: ST_TO_ADDR
// if not tmp then
15798: LD_VAR 0 4
15802: NOT
15803: IFFALSE 15807
// continue ;
15805: GO 15722
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
15807: LD_VAR 0 4
15811: PUSH
15812: LD_INT 81
15814: PUSH
15815: LD_VAR 0 3
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PPUSH
15824: CALL_OW 69
15828: IN
15829: IFFALSE 15879
15831: PUSH
15832: LD_EXP 55
15836: PUSH
15837: LD_VAR 0 1
15841: ARRAY
15842: PUSH
15843: LD_VAR 0 2
15847: ARRAY
15848: PUSH
15849: LD_INT 1
15851: ARRAY
15852: PPUSH
15853: LD_EXP 55
15857: PUSH
15858: LD_VAR 0 1
15862: ARRAY
15863: PUSH
15864: LD_VAR 0 2
15868: ARRAY
15869: PUSH
15870: LD_INT 2
15872: ARRAY
15873: PPUSH
15874: CALL_OW 458
15878: AND
15879: IFFALSE 15973
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
15881: LD_EXP 55
15885: PUSH
15886: LD_VAR 0 1
15890: ARRAY
15891: PUSH
15892: LD_VAR 0 2
15896: ARRAY
15897: PUSH
15898: LD_INT 1
15900: ARRAY
15901: PPUSH
15902: LD_EXP 55
15906: PUSH
15907: LD_VAR 0 1
15911: ARRAY
15912: PUSH
15913: LD_VAR 0 2
15917: ARRAY
15918: PUSH
15919: LD_INT 2
15921: ARRAY
15922: PPUSH
15923: LD_VAR 0 3
15927: PPUSH
15928: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
15932: LD_ADDR_EXP 55
15936: PUSH
15937: LD_EXP 55
15941: PPUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: LD_EXP 55
15951: PUSH
15952: LD_VAR 0 1
15956: ARRAY
15957: PPUSH
15958: LD_VAR 0 2
15962: PPUSH
15963: CALL_OW 3
15967: PPUSH
15968: CALL_OW 1
15972: ST_TO_ADDR
// end ; end ;
15973: GO 15722
15975: POP
15976: POP
// end ;
15977: GO 15640
15979: POP
15980: POP
// end ;
15981: PPOPN 4
15983: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
// result := false ;
15988: LD_ADDR_VAR 0 4
15992: PUSH
15993: LD_INT 0
15995: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
15996: LD_VAR 0 1
16000: PPUSH
16001: CALL_OW 264
16005: PUSH
16006: LD_INT 81
16008: EQUAL
16009: NOT
16010: IFFALSE 16014
// exit ;
16012: GO 16258
// index := GetElementIndex ( minersList , unit ) ;
16014: LD_ADDR_VAR 0 5
16018: PUSH
16019: LD_EXP 54
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL 22427 0 2
16033: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16034: LD_EXP 55
16038: PUSH
16039: LD_VAR 0 5
16043: ARRAY
16044: PUSH
16045: LD_EXP 56
16049: GREATEREQUAL
16050: IFFALSE 16054
// exit ;
16052: GO 16258
// ComMoveXY ( unit , x , y ) ;
16054: LD_VAR 0 1
16058: PPUSH
16059: LD_VAR 0 2
16063: PPUSH
16064: LD_VAR 0 3
16068: PPUSH
16069: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16073: LD_INT 35
16075: PPUSH
16076: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16080: LD_VAR 0 1
16084: PPUSH
16085: LD_VAR 0 2
16089: PPUSH
16090: LD_VAR 0 3
16094: PPUSH
16095: CALL 54473 0 3
16099: NOT
16100: IFFALSE 16113
16102: PUSH
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 314
16112: AND
16113: IFFALSE 16117
// exit ;
16115: GO 16258
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16117: LD_VAR 0 2
16121: PPUSH
16122: LD_VAR 0 3
16126: PPUSH
16127: CALL_OW 428
16131: PUSH
16132: LD_VAR 0 1
16136: EQUAL
16137: IFFALSE 16151
16139: PUSH
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 314
16149: NOT
16150: AND
16151: IFFALSE 16073
// PlaySoundXY ( x , y , PlantMine ) ;
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_VAR 0 3
16162: PPUSH
16163: LD_STRING PlantMine
16165: PPUSH
16166: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
16170: LD_VAR 0 2
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: CALL_OW 255
16189: PPUSH
16190: LD_INT 0
16192: PPUSH
16193: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
16197: LD_ADDR_EXP 55
16201: PUSH
16202: LD_EXP 55
16206: PPUSH
16207: LD_VAR 0 5
16211: PUSH
16212: LD_EXP 55
16216: PUSH
16217: LD_VAR 0 5
16221: ARRAY
16222: PUSH
16223: LD_INT 1
16225: PLUS
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: LD_VAR 0 2
16235: PUSH
16236: LD_VAR 0 3
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PPUSH
16245: CALL 22644 0 3
16249: ST_TO_ADDR
// result := true ;
16250: LD_ADDR_VAR 0 4
16254: PUSH
16255: LD_INT 1
16257: ST_TO_ADDR
// end ;
16258: LD_VAR 0 4
16262: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
16263: LD_INT 0
16265: PPUSH
16266: PPUSH
16267: PPUSH
// if not unit in minersList then
16268: LD_VAR 0 1
16272: PUSH
16273: LD_EXP 54
16277: IN
16278: NOT
16279: IFFALSE 16283
// exit ;
16281: GO 16677
// index := GetElementIndex ( minersList , unit ) ;
16283: LD_ADDR_VAR 0 6
16287: PUSH
16288: LD_EXP 54
16292: PPUSH
16293: LD_VAR 0 1
16297: PPUSH
16298: CALL 22427 0 2
16302: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
16303: LD_ADDR_VAR 0 5
16307: PUSH
16308: DOUBLE
16309: LD_EXP 55
16313: PUSH
16314: LD_VAR 0 6
16318: ARRAY
16319: INC
16320: ST_TO_ADDR
16321: LD_INT 1
16323: PUSH
16324: FOR_DOWNTO
16325: IFFALSE 16488
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
16327: LD_EXP 55
16331: PUSH
16332: LD_VAR 0 6
16336: ARRAY
16337: PUSH
16338: LD_VAR 0 5
16342: ARRAY
16343: PUSH
16344: LD_INT 1
16346: ARRAY
16347: PUSH
16348: LD_VAR 0 2
16352: EQUAL
16353: IFFALSE 16383
16355: PUSH
16356: LD_EXP 55
16360: PUSH
16361: LD_VAR 0 6
16365: ARRAY
16366: PUSH
16367: LD_VAR 0 5
16371: ARRAY
16372: PUSH
16373: LD_INT 2
16375: ARRAY
16376: PUSH
16377: LD_VAR 0 3
16381: EQUAL
16382: AND
16383: IFFALSE 16486
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16385: LD_EXP 55
16389: PUSH
16390: LD_VAR 0 6
16394: ARRAY
16395: PUSH
16396: LD_VAR 0 5
16400: ARRAY
16401: PUSH
16402: LD_INT 1
16404: ARRAY
16405: PPUSH
16406: LD_EXP 55
16410: PUSH
16411: LD_VAR 0 6
16415: ARRAY
16416: PUSH
16417: LD_VAR 0 5
16421: ARRAY
16422: PUSH
16423: LD_INT 2
16425: ARRAY
16426: PPUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 255
16436: PPUSH
16437: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
16441: LD_ADDR_EXP 55
16445: PUSH
16446: LD_EXP 55
16450: PPUSH
16451: LD_VAR 0 6
16455: PPUSH
16456: LD_EXP 55
16460: PUSH
16461: LD_VAR 0 6
16465: ARRAY
16466: PPUSH
16467: LD_VAR 0 5
16471: PPUSH
16472: CALL_OW 3
16476: PPUSH
16477: CALL_OW 1
16481: ST_TO_ADDR
// exit ;
16482: POP
16483: POP
16484: GO 16677
// end ; end ;
16486: GO 16324
16488: POP
16489: POP
// for i := minerMinesList [ index ] downto 1 do
16490: LD_ADDR_VAR 0 5
16494: PUSH
16495: DOUBLE
16496: LD_EXP 55
16500: PUSH
16501: LD_VAR 0 6
16505: ARRAY
16506: INC
16507: ST_TO_ADDR
16508: LD_INT 1
16510: PUSH
16511: FOR_DOWNTO
16512: IFFALSE 16675
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
16514: LD_EXP 55
16518: PUSH
16519: LD_VAR 0 6
16523: ARRAY
16524: PUSH
16525: LD_VAR 0 5
16529: ARRAY
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PPUSH
16535: LD_EXP 55
16539: PUSH
16540: LD_VAR 0 6
16544: ARRAY
16545: PUSH
16546: LD_VAR 0 5
16550: ARRAY
16551: PUSH
16552: LD_INT 2
16554: ARRAY
16555: PPUSH
16556: LD_VAR 0 2
16560: PPUSH
16561: LD_VAR 0 3
16565: PPUSH
16566: CALL_OW 298
16570: PUSH
16571: LD_INT 6
16573: LESS
16574: IFFALSE 16673
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
16576: LD_EXP 55
16580: PUSH
16581: LD_VAR 0 6
16585: ARRAY
16586: PUSH
16587: LD_VAR 0 5
16591: ARRAY
16592: PUSH
16593: LD_INT 1
16595: ARRAY
16596: PPUSH
16597: LD_EXP 55
16601: PUSH
16602: LD_VAR 0 6
16606: ARRAY
16607: PUSH
16608: LD_VAR 0 5
16612: ARRAY
16613: PUSH
16614: LD_INT 2
16616: ARRAY
16617: PPUSH
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 255
16627: PPUSH
16628: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
16632: LD_ADDR_EXP 55
16636: PUSH
16637: LD_EXP 55
16641: PPUSH
16642: LD_VAR 0 6
16646: PPUSH
16647: LD_EXP 55
16651: PUSH
16652: LD_VAR 0 6
16656: ARRAY
16657: PPUSH
16658: LD_VAR 0 5
16662: PPUSH
16663: CALL_OW 3
16667: PPUSH
16668: CALL_OW 1
16672: ST_TO_ADDR
// end ; end ;
16673: GO 16511
16675: POP
16676: POP
// end ;
16677: LD_VAR 0 4
16681: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
16682: LD_INT 0
16684: PPUSH
16685: PPUSH
16686: PPUSH
16687: PPUSH
16688: PPUSH
16689: PPUSH
16690: PPUSH
16691: PPUSH
16692: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 264
16702: PUSH
16703: LD_INT 81
16705: EQUAL
16706: NOT
16707: IFTRUE 16722
16709: PUSH
16710: LD_VAR 0 1
16714: PUSH
16715: LD_EXP 54
16719: IN
16720: NOT
16721: OR
16722: IFFALSE 16726
// exit ;
16724: GO 17052
// index := GetElementIndex ( minersList , unit ) ;
16726: LD_ADDR_VAR 0 6
16730: PUSH
16731: LD_EXP 54
16735: PPUSH
16736: LD_VAR 0 1
16740: PPUSH
16741: CALL 22427 0 2
16745: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
16746: LD_ADDR_VAR 0 8
16750: PUSH
16751: LD_EXP 56
16755: PUSH
16756: LD_EXP 55
16760: PUSH
16761: LD_VAR 0 6
16765: ARRAY
16766: MINUS
16767: ST_TO_ADDR
// if not minesFreeAmount then
16768: LD_VAR 0 8
16772: NOT
16773: IFFALSE 16777
// exit ;
16775: GO 17052
// tmp := [ ] ;
16777: LD_ADDR_VAR 0 7
16781: PUSH
16782: EMPTY
16783: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
16784: LD_ADDR_VAR 0 5
16788: PUSH
16789: DOUBLE
16790: LD_INT 1
16792: DEC
16793: ST_TO_ADDR
16794: LD_VAR 0 8
16798: PUSH
16799: FOR_TO
16800: IFFALSE 16999
// begin _d := rand ( 0 , 5 ) ;
16802: LD_ADDR_VAR 0 11
16806: PUSH
16807: LD_INT 0
16809: PPUSH
16810: LD_INT 5
16812: PPUSH
16813: CALL_OW 12
16817: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
16818: LD_ADDR_VAR 0 12
16822: PUSH
16823: LD_INT 2
16825: PPUSH
16826: LD_INT 6
16828: PPUSH
16829: CALL_OW 12
16833: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
16834: LD_ADDR_VAR 0 9
16838: PUSH
16839: LD_VAR 0 2
16843: PPUSH
16844: LD_VAR 0 11
16848: PPUSH
16849: LD_VAR 0 12
16853: PPUSH
16854: CALL_OW 272
16858: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
16859: LD_ADDR_VAR 0 10
16863: PUSH
16864: LD_VAR 0 3
16868: PPUSH
16869: LD_VAR 0 11
16873: PPUSH
16874: LD_VAR 0 12
16878: PPUSH
16879: CALL_OW 273
16883: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
16884: LD_VAR 0 9
16888: PPUSH
16889: LD_VAR 0 10
16893: PPUSH
16894: CALL_OW 488
16898: IFFALSE 16922
16900: PUSH
16901: LD_VAR 0 9
16905: PUSH
16906: LD_VAR 0 10
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_VAR 0 7
16919: IN
16920: NOT
16921: AND
16922: IFFALSE 16941
16924: PUSH
16925: LD_VAR 0 9
16929: PPUSH
16930: LD_VAR 0 10
16934: PPUSH
16935: CALL_OW 458
16939: NOT
16940: AND
16941: IFFALSE 16983
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
16943: LD_ADDR_VAR 0 7
16947: PUSH
16948: LD_VAR 0 7
16952: PPUSH
16953: LD_VAR 0 7
16957: PUSH
16958: LD_INT 1
16960: PLUS
16961: PPUSH
16962: LD_VAR 0 9
16966: PUSH
16967: LD_VAR 0 10
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PPUSH
16976: CALL_OW 1
16980: ST_TO_ADDR
16981: GO 16997
// i := i - 1 ;
16983: LD_ADDR_VAR 0 5
16987: PUSH
16988: LD_VAR 0 5
16992: PUSH
16993: LD_INT 1
16995: MINUS
16996: ST_TO_ADDR
// end ;
16997: GO 16799
16999: POP
17000: POP
// for i in tmp do
17001: LD_ADDR_VAR 0 5
17005: PUSH
17006: LD_VAR 0 7
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17050
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_VAR 0 5
17023: PUSH
17024: LD_INT 1
17026: ARRAY
17027: PPUSH
17028: LD_VAR 0 5
17032: PUSH
17033: LD_INT 2
17035: ARRAY
17036: PPUSH
17037: CALL 15984 0 3
17041: NOT
17042: IFFALSE 17048
// exit ;
17044: POP
17045: POP
17046: GO 17052
17048: GO 17011
17050: POP
17051: POP
// end ;
17052: LD_VAR 0 4
17056: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
17057: LD_INT 0
17059: PPUSH
17060: PPUSH
17061: PPUSH
17062: PPUSH
17063: PPUSH
17064: PPUSH
17065: PPUSH
17066: PPUSH
17067: PPUSH
// if GetClass ( unit ) <> class_sniper then
17068: LD_VAR 0 1
17072: PPUSH
17073: CALL_OW 257
17077: PUSH
17078: LD_INT 5
17080: NONEQUAL
17081: IFFALSE 17085
// exit ;
17083: GO 17555
// dist := 8 ;
17085: LD_ADDR_VAR 0 5
17089: PUSH
17090: LD_INT 8
17092: ST_TO_ADDR
// viewRange := 12 ;
17093: LD_ADDR_VAR 0 8
17097: PUSH
17098: LD_INT 12
17100: ST_TO_ADDR
// side := GetSide ( unit ) ;
17101: LD_ADDR_VAR 0 6
17105: PUSH
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 255
17115: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17116: LD_INT 61
17118: PPUSH
17119: LD_VAR 0 6
17123: PPUSH
17124: CALL_OW 321
17128: PUSH
17129: LD_INT 2
17131: EQUAL
17132: IFFALSE 17142
// viewRange := 16 ;
17134: LD_ADDR_VAR 0 8
17138: PUSH
17139: LD_INT 16
17141: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17142: LD_VAR 0 1
17146: PPUSH
17147: LD_VAR 0 2
17151: PPUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: CALL_OW 297
17161: PUSH
17162: LD_VAR 0 5
17166: GREATER
17167: IFFALSE 17246
// begin ComMoveXY ( unit , x , y ) ;
17169: LD_VAR 0 1
17173: PPUSH
17174: LD_VAR 0 2
17178: PPUSH
17179: LD_VAR 0 3
17183: PPUSH
17184: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17188: LD_INT 35
17190: PPUSH
17191: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17195: LD_VAR 0 1
17199: PPUSH
17200: LD_VAR 0 2
17204: PPUSH
17205: LD_VAR 0 3
17209: PPUSH
17210: CALL 54473 0 3
17214: NOT
17215: IFFALSE 17219
// exit ;
17217: GO 17555
// until GetDistUnitXY ( unit , x , y ) < dist ;
17219: LD_VAR 0 1
17223: PPUSH
17224: LD_VAR 0 2
17228: PPUSH
17229: LD_VAR 0 3
17233: PPUSH
17234: CALL_OW 297
17238: PUSH
17239: LD_VAR 0 5
17243: LESS
17244: IFFALSE 17188
// end ; ComTurnXY ( unit , x , y ) ;
17246: LD_VAR 0 1
17250: PPUSH
17251: LD_VAR 0 2
17255: PPUSH
17256: LD_VAR 0 3
17260: PPUSH
17261: CALL_OW 118
// repeat if Multiplayer then
17265: LD_OWVAR 4
17269: IFFALSE 17280
// wait ( 35 ) else
17271: LD_INT 35
17273: PPUSH
17274: CALL_OW 67
17278: GO 17287
// wait ( 5 ) ;
17280: LD_INT 5
17282: PPUSH
17283: CALL_OW 67
// _d := GetDir ( unit ) ;
17287: LD_ADDR_VAR 0 11
17291: PUSH
17292: LD_VAR 0 1
17296: PPUSH
17297: CALL_OW 254
17301: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
17302: LD_ADDR_VAR 0 7
17306: PUSH
17307: LD_VAR 0 1
17311: PPUSH
17312: CALL_OW 250
17316: PPUSH
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL_OW 251
17326: PPUSH
17327: LD_VAR 0 2
17331: PPUSH
17332: LD_VAR 0 3
17336: PPUSH
17337: CALL 57109 0 4
17341: ST_TO_ADDR
// until dir = _d ;
17342: LD_VAR 0 7
17346: PUSH
17347: LD_VAR 0 11
17351: EQUAL
17352: IFFALSE 17265
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
17354: LD_ADDR_VAR 0 9
17358: PUSH
17359: LD_VAR 0 1
17363: PPUSH
17364: CALL_OW 250
17368: PPUSH
17369: LD_VAR 0 7
17373: PPUSH
17374: LD_VAR 0 5
17378: PPUSH
17379: CALL_OW 272
17383: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
17384: LD_ADDR_VAR 0 10
17388: PUSH
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 251
17398: PPUSH
17399: LD_VAR 0 7
17403: PPUSH
17404: LD_VAR 0 5
17408: PPUSH
17409: CALL_OW 273
17413: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17414: LD_VAR 0 9
17418: PPUSH
17419: LD_VAR 0 10
17423: PPUSH
17424: CALL_OW 488
17428: NOT
17429: IFFALSE 17433
// exit ;
17431: GO 17555
// ComAnimCustom ( unit , 1 ) ;
17433: LD_VAR 0 1
17437: PPUSH
17438: LD_INT 1
17440: PPUSH
17441: CALL_OW 592
// p := 0 ;
17445: LD_ADDR_VAR 0 12
17449: PUSH
17450: LD_INT 0
17452: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
17453: LD_VAR 0 9
17457: PPUSH
17458: LD_VAR 0 10
17462: PPUSH
17463: LD_VAR 0 6
17467: PPUSH
17468: LD_VAR 0 8
17472: PPUSH
17473: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
17477: LD_INT 35
17479: PPUSH
17480: CALL_OW 67
// p := Inc ( p ) ;
17484: LD_ADDR_VAR 0 12
17488: PUSH
17489: LD_VAR 0 12
17493: PPUSH
17494: CALL 57065 0 1
17498: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
17499: LD_VAR 0 12
17503: PUSH
17504: LD_INT 3
17506: EQUAL
17507: IFTRUE 17521
17509: PUSH
17510: LD_VAR 0 1
17514: PPUSH
17515: CALL_OW 302
17519: NOT
17520: OR
17521: IFTRUE 17534
17523: PUSH
17524: LD_VAR 0 1
17528: PPUSH
17529: CALL_OW 301
17533: OR
17534: IFFALSE 17477
// RemoveSeeing ( _x , _y , side ) ;
17536: LD_VAR 0 9
17540: PPUSH
17541: LD_VAR 0 10
17545: PPUSH
17546: LD_VAR 0 6
17550: PPUSH
17551: CALL_OW 331
// end ; end_of_file
17555: LD_VAR 0 4
17559: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
// if exist_mode then
17564: LD_VAR 0 2
17568: IFFALSE 17614
// begin unit := CreateCharacter ( prefix & ident ) ;
17570: LD_ADDR_VAR 0 5
17574: PUSH
17575: LD_VAR 0 3
17579: PUSH
17580: LD_VAR 0 1
17584: STR
17585: PPUSH
17586: CALL_OW 34
17590: ST_TO_ADDR
// if unit then
17591: LD_VAR 0 5
17595: IFFALSE 17612
// DeleteCharacters ( prefix & ident ) ;
17597: LD_VAR 0 3
17601: PUSH
17602: LD_VAR 0 1
17606: STR
17607: PPUSH
17608: CALL_OW 40
// end else
17612: GO 17629
// unit := NewCharacter ( ident ) ;
17614: LD_ADDR_VAR 0 5
17618: PUSH
17619: LD_VAR 0 1
17623: PPUSH
17624: CALL_OW 25
17628: ST_TO_ADDR
// result := unit ;
17629: LD_ADDR_VAR 0 4
17633: PUSH
17634: LD_VAR 0 5
17638: ST_TO_ADDR
// end ;
17639: LD_VAR 0 4
17643: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17644: LD_INT 0
17646: PPUSH
17647: PPUSH
// if exist_mode then
17648: LD_VAR 0 2
17652: IFFALSE 17677
// unit := CreateCharacter ( prefix & ident ) else
17654: LD_ADDR_VAR 0 5
17658: PUSH
17659: LD_VAR 0 3
17663: PUSH
17664: LD_VAR 0 1
17668: STR
17669: PPUSH
17670: CALL_OW 34
17674: ST_TO_ADDR
17675: GO 17692
// unit := NewCharacter ( ident ) ;
17677: LD_ADDR_VAR 0 5
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 25
17691: ST_TO_ADDR
// result := unit ;
17692: LD_ADDR_VAR 0 4
17696: PUSH
17697: LD_VAR 0 5
17701: ST_TO_ADDR
// end ;
17702: LD_VAR 0 4
17706: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17707: LD_INT 0
17709: PPUSH
17710: PPUSH
// if not side or not nation then
17711: LD_VAR 0 1
17715: NOT
17716: IFTRUE 17725
17718: PUSH
17719: LD_VAR 0 2
17723: NOT
17724: OR
17725: IFFALSE 17729
// exit ;
17727: GO 18499
// case nation of nation_american :
17729: LD_VAR 0 2
17733: PUSH
17734: LD_INT 1
17736: DOUBLE
17737: EQUAL
17738: IFTRUE 17742
17740: GO 17956
17742: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17743: LD_ADDR_VAR 0 4
17747: PUSH
17748: LD_INT 35
17750: PUSH
17751: LD_INT 45
17753: PUSH
17754: LD_INT 46
17756: PUSH
17757: LD_INT 47
17759: PUSH
17760: LD_INT 82
17762: PUSH
17763: LD_INT 83
17765: PUSH
17766: LD_INT 84
17768: PUSH
17769: LD_INT 85
17771: PUSH
17772: LD_INT 86
17774: PUSH
17775: LD_INT 1
17777: PUSH
17778: LD_INT 2
17780: PUSH
17781: LD_INT 6
17783: PUSH
17784: LD_INT 15
17786: PUSH
17787: LD_INT 16
17789: PUSH
17790: LD_INT 7
17792: PUSH
17793: LD_INT 12
17795: PUSH
17796: LD_INT 13
17798: PUSH
17799: LD_INT 10
17801: PUSH
17802: LD_INT 14
17804: PUSH
17805: LD_INT 20
17807: PUSH
17808: LD_INT 21
17810: PUSH
17811: LD_INT 22
17813: PUSH
17814: LD_INT 25
17816: PUSH
17817: LD_INT 32
17819: PUSH
17820: LD_INT 27
17822: PUSH
17823: LD_INT 36
17825: PUSH
17826: LD_INT 69
17828: PUSH
17829: LD_INT 39
17831: PUSH
17832: LD_INT 34
17834: PUSH
17835: LD_INT 40
17837: PUSH
17838: LD_INT 48
17840: PUSH
17841: LD_INT 49
17843: PUSH
17844: LD_INT 50
17846: PUSH
17847: LD_INT 51
17849: PUSH
17850: LD_INT 52
17852: PUSH
17853: LD_INT 53
17855: PUSH
17856: LD_INT 54
17858: PUSH
17859: LD_INT 55
17861: PUSH
17862: LD_INT 56
17864: PUSH
17865: LD_INT 57
17867: PUSH
17868: LD_INT 58
17870: PUSH
17871: LD_INT 59
17873: PUSH
17874: LD_INT 60
17876: PUSH
17877: LD_INT 61
17879: PUSH
17880: LD_INT 62
17882: PUSH
17883: LD_INT 80
17885: PUSH
17886: LD_INT 82
17888: PUSH
17889: LD_INT 83
17891: PUSH
17892: LD_INT 84
17894: PUSH
17895: LD_INT 85
17897: PUSH
17898: LD_INT 86
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: ST_TO_ADDR
17954: GO 18421
17956: LD_INT 2
17958: DOUBLE
17959: EQUAL
17960: IFTRUE 17964
17962: GO 18190
17964: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17965: LD_ADDR_VAR 0 4
17969: PUSH
17970: LD_INT 35
17972: PUSH
17973: LD_INT 45
17975: PUSH
17976: LD_INT 46
17978: PUSH
17979: LD_INT 47
17981: PUSH
17982: LD_INT 82
17984: PUSH
17985: LD_INT 83
17987: PUSH
17988: LD_INT 84
17990: PUSH
17991: LD_INT 85
17993: PUSH
17994: LD_INT 87
17996: PUSH
17997: LD_INT 70
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: LD_INT 11
18005: PUSH
18006: LD_INT 3
18008: PUSH
18009: LD_INT 4
18011: PUSH
18012: LD_INT 5
18014: PUSH
18015: LD_INT 6
18017: PUSH
18018: LD_INT 15
18020: PUSH
18021: LD_INT 18
18023: PUSH
18024: LD_INT 7
18026: PUSH
18027: LD_INT 17
18029: PUSH
18030: LD_INT 8
18032: PUSH
18033: LD_INT 20
18035: PUSH
18036: LD_INT 21
18038: PUSH
18039: LD_INT 22
18041: PUSH
18042: LD_INT 72
18044: PUSH
18045: LD_INT 26
18047: PUSH
18048: LD_INT 69
18050: PUSH
18051: LD_INT 39
18053: PUSH
18054: LD_INT 40
18056: PUSH
18057: LD_INT 41
18059: PUSH
18060: LD_INT 42
18062: PUSH
18063: LD_INT 43
18065: PUSH
18066: LD_INT 48
18068: PUSH
18069: LD_INT 49
18071: PUSH
18072: LD_INT 50
18074: PUSH
18075: LD_INT 51
18077: PUSH
18078: LD_INT 52
18080: PUSH
18081: LD_INT 53
18083: PUSH
18084: LD_INT 54
18086: PUSH
18087: LD_INT 55
18089: PUSH
18090: LD_INT 56
18092: PUSH
18093: LD_INT 60
18095: PUSH
18096: LD_INT 61
18098: PUSH
18099: LD_INT 62
18101: PUSH
18102: LD_INT 66
18104: PUSH
18105: LD_INT 67
18107: PUSH
18108: LD_INT 68
18110: PUSH
18111: LD_INT 81
18113: PUSH
18114: LD_INT 82
18116: PUSH
18117: LD_INT 83
18119: PUSH
18120: LD_INT 84
18122: PUSH
18123: LD_INT 85
18125: PUSH
18126: LD_INT 87
18128: PUSH
18129: LD_INT 88
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: ST_TO_ADDR
18188: GO 18421
18190: LD_INT 3
18192: DOUBLE
18193: EQUAL
18194: IFTRUE 18198
18196: GO 18420
18198: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
18199: LD_ADDR_VAR 0 4
18203: PUSH
18204: LD_INT 46
18206: PUSH
18207: LD_INT 47
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: LD_INT 2
18215: PUSH
18216: LD_INT 82
18218: PUSH
18219: LD_INT 83
18221: PUSH
18222: LD_INT 84
18224: PUSH
18225: LD_INT 85
18227: PUSH
18228: LD_INT 86
18230: PUSH
18231: LD_INT 11
18233: PUSH
18234: LD_INT 9
18236: PUSH
18237: LD_INT 20
18239: PUSH
18240: LD_INT 19
18242: PUSH
18243: LD_INT 21
18245: PUSH
18246: LD_INT 24
18248: PUSH
18249: LD_INT 22
18251: PUSH
18252: LD_INT 25
18254: PUSH
18255: LD_INT 28
18257: PUSH
18258: LD_INT 29
18260: PUSH
18261: LD_INT 30
18263: PUSH
18264: LD_INT 31
18266: PUSH
18267: LD_INT 37
18269: PUSH
18270: LD_INT 38
18272: PUSH
18273: LD_INT 32
18275: PUSH
18276: LD_INT 27
18278: PUSH
18279: LD_INT 33
18281: PUSH
18282: LD_INT 69
18284: PUSH
18285: LD_INT 39
18287: PUSH
18288: LD_INT 34
18290: PUSH
18291: LD_INT 40
18293: PUSH
18294: LD_INT 71
18296: PUSH
18297: LD_INT 23
18299: PUSH
18300: LD_INT 44
18302: PUSH
18303: LD_INT 48
18305: PUSH
18306: LD_INT 49
18308: PUSH
18309: LD_INT 50
18311: PUSH
18312: LD_INT 51
18314: PUSH
18315: LD_INT 52
18317: PUSH
18318: LD_INT 53
18320: PUSH
18321: LD_INT 54
18323: PUSH
18324: LD_INT 55
18326: PUSH
18327: LD_INT 56
18329: PUSH
18330: LD_INT 57
18332: PUSH
18333: LD_INT 58
18335: PUSH
18336: LD_INT 59
18338: PUSH
18339: LD_INT 63
18341: PUSH
18342: LD_INT 64
18344: PUSH
18345: LD_INT 65
18347: PUSH
18348: LD_INT 82
18350: PUSH
18351: LD_INT 83
18353: PUSH
18354: LD_INT 84
18356: PUSH
18357: LD_INT 85
18359: PUSH
18360: LD_INT 86
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: ST_TO_ADDR
18418: GO 18421
18420: POP
// if state > - 1 and state < 3 then
18421: LD_VAR 0 3
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: GREATER
18430: IFFALSE 18442
18432: PUSH
18433: LD_VAR 0 3
18437: PUSH
18438: LD_INT 3
18440: LESS
18441: AND
18442: IFFALSE 18499
// for i in result do
18444: LD_ADDR_VAR 0 5
18448: PUSH
18449: LD_VAR 0 4
18453: PUSH
18454: FOR_IN
18455: IFFALSE 18497
// if GetTech ( i , side ) <> state then
18457: LD_VAR 0 5
18461: PPUSH
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 321
18471: PUSH
18472: LD_VAR 0 3
18476: NONEQUAL
18477: IFFALSE 18495
// result := result diff i ;
18479: LD_ADDR_VAR 0 4
18483: PUSH
18484: LD_VAR 0 4
18488: PUSH
18489: LD_VAR 0 5
18493: DIFF
18494: ST_TO_ADDR
18495: GO 18454
18497: POP
18498: POP
// end ;
18499: LD_VAR 0 4
18503: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18504: LD_INT 0
18506: PPUSH
18507: PPUSH
18508: PPUSH
// result := true ;
18509: LD_ADDR_VAR 0 3
18513: PUSH
18514: LD_INT 1
18516: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18517: LD_ADDR_VAR 0 5
18521: PUSH
18522: LD_VAR 0 2
18526: PPUSH
18527: CALL_OW 480
18531: ST_TO_ADDR
// if not tmp then
18532: LD_VAR 0 5
18536: NOT
18537: IFFALSE 18541
// exit ;
18539: GO 18590
// for i in tmp do
18541: LD_ADDR_VAR 0 4
18545: PUSH
18546: LD_VAR 0 5
18550: PUSH
18551: FOR_IN
18552: IFFALSE 18588
// if GetTech ( i , side ) <> state_researched then
18554: LD_VAR 0 4
18558: PPUSH
18559: LD_VAR 0 1
18563: PPUSH
18564: CALL_OW 321
18568: PUSH
18569: LD_INT 2
18571: NONEQUAL
18572: IFFALSE 18586
// begin result := false ;
18574: LD_ADDR_VAR 0 3
18578: PUSH
18579: LD_INT 0
18581: ST_TO_ADDR
// exit ;
18582: POP
18583: POP
18584: GO 18590
// end ;
18586: GO 18551
18588: POP
18589: POP
// end ;
18590: LD_VAR 0 3
18594: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18595: LD_INT 0
18597: PPUSH
18598: PPUSH
18599: PPUSH
18600: PPUSH
18601: PPUSH
18602: PPUSH
18603: PPUSH
18604: PPUSH
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
18609: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18610: LD_VAR 0 1
18614: NOT
18615: IFTRUE 18632
18617: PUSH
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL_OW 257
18627: PUSH
18628: LD_INT 9
18630: NONEQUAL
18631: OR
18632: IFFALSE 18636
// exit ;
18634: GO 19215
// side := GetSide ( unit ) ;
18636: LD_ADDR_VAR 0 9
18640: PUSH
18641: LD_VAR 0 1
18645: PPUSH
18646: CALL_OW 255
18650: ST_TO_ADDR
// tech_space := tech_spacanom ;
18651: LD_ADDR_VAR 0 12
18655: PUSH
18656: LD_INT 29
18658: ST_TO_ADDR
// tech_time := tech_taurad ;
18659: LD_ADDR_VAR 0 13
18663: PUSH
18664: LD_INT 28
18666: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18667: LD_ADDR_VAR 0 11
18671: PUSH
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL_OW 310
18681: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18682: LD_VAR 0 11
18686: PPUSH
18687: CALL_OW 247
18691: PUSH
18692: LD_INT 2
18694: EQUAL
18695: IFFALSE 18699
// exit ;
18697: GO 19215
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18699: LD_ADDR_VAR 0 8
18703: PUSH
18704: LD_INT 81
18706: PUSH
18707: LD_VAR 0 9
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 3
18718: PUSH
18719: LD_INT 21
18721: PUSH
18722: LD_INT 3
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PPUSH
18737: CALL_OW 69
18741: ST_TO_ADDR
// if not tmp then
18742: LD_VAR 0 8
18746: NOT
18747: IFFALSE 18751
// exit ;
18749: GO 19215
// if in_unit then
18751: LD_VAR 0 11
18755: IFFALSE 18779
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18757: LD_ADDR_VAR 0 10
18761: PUSH
18762: LD_VAR 0 8
18766: PPUSH
18767: LD_VAR 0 11
18771: PPUSH
18772: CALL_OW 74
18776: ST_TO_ADDR
18777: GO 18799
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18779: LD_ADDR_VAR 0 10
18783: PUSH
18784: LD_VAR 0 8
18788: PPUSH
18789: LD_VAR 0 1
18793: PPUSH
18794: CALL_OW 74
18798: ST_TO_ADDR
// if not enemy then
18799: LD_VAR 0 10
18803: NOT
18804: IFFALSE 18808
// exit ;
18806: GO 19215
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18808: LD_VAR 0 11
18812: IFFALSE 18834
18814: PUSH
18815: LD_VAR 0 11
18819: PPUSH
18820: LD_VAR 0 10
18824: PPUSH
18825: CALL_OW 296
18829: PUSH
18830: LD_INT 13
18832: GREATER
18833: AND
18834: IFTRUE 18856
18836: PUSH
18837: LD_VAR 0 1
18841: PPUSH
18842: LD_VAR 0 10
18846: PPUSH
18847: CALL_OW 296
18851: PUSH
18852: LD_INT 12
18854: GREATER
18855: OR
18856: IFFALSE 18860
// exit ;
18858: GO 19215
// missile := [ 1 ] ;
18860: LD_ADDR_VAR 0 14
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18871: LD_VAR 0 9
18875: PPUSH
18876: LD_VAR 0 12
18880: PPUSH
18881: CALL_OW 325
18885: IFFALSE 18914
// missile := Replace ( missile , missile + 1 , 2 ) ;
18887: LD_ADDR_VAR 0 14
18891: PUSH
18892: LD_VAR 0 14
18896: PPUSH
18897: LD_VAR 0 14
18901: PUSH
18902: LD_INT 1
18904: PLUS
18905: PPUSH
18906: LD_INT 2
18908: PPUSH
18909: CALL_OW 1
18913: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18914: LD_VAR 0 9
18918: PPUSH
18919: LD_VAR 0 13
18923: PPUSH
18924: CALL_OW 325
18928: IFFALSE 18952
18930: PUSH
18931: LD_VAR 0 10
18935: PPUSH
18936: CALL_OW 255
18940: PPUSH
18941: LD_VAR 0 13
18945: PPUSH
18946: CALL_OW 325
18950: NOT
18951: AND
18952: IFFALSE 18981
// missile := Replace ( missile , missile + 1 , 3 ) ;
18954: LD_ADDR_VAR 0 14
18958: PUSH
18959: LD_VAR 0 14
18963: PPUSH
18964: LD_VAR 0 14
18968: PUSH
18969: LD_INT 1
18971: PLUS
18972: PPUSH
18973: LD_INT 3
18975: PPUSH
18976: CALL_OW 1
18980: ST_TO_ADDR
// if missile < 2 then
18981: LD_VAR 0 14
18985: PUSH
18986: LD_INT 2
18988: LESS
18989: IFFALSE 18993
// exit ;
18991: GO 19215
// x := GetX ( enemy ) ;
18993: LD_ADDR_VAR 0 4
18997: PUSH
18998: LD_VAR 0 10
19002: PPUSH
19003: CALL_OW 250
19007: ST_TO_ADDR
// y := GetY ( enemy ) ;
19008: LD_ADDR_VAR 0 5
19012: PUSH
19013: LD_VAR 0 10
19017: PPUSH
19018: CALL_OW 251
19022: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19023: LD_ADDR_VAR 0 6
19027: PUSH
19028: LD_VAR 0 4
19032: PUSH
19033: LD_INT 1
19035: NEG
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: CALL_OW 12
19044: PLUS
19045: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19046: LD_ADDR_VAR 0 7
19050: PUSH
19051: LD_VAR 0 5
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PPUSH
19060: LD_INT 1
19062: PPUSH
19063: CALL_OW 12
19067: PLUS
19068: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19069: LD_VAR 0 6
19073: PPUSH
19074: LD_VAR 0 7
19078: PPUSH
19079: CALL_OW 488
19083: NOT
19084: IFFALSE 19106
// begin _x := x ;
19086: LD_ADDR_VAR 0 6
19090: PUSH
19091: LD_VAR 0 4
19095: ST_TO_ADDR
// _y := y ;
19096: LD_ADDR_VAR 0 7
19100: PUSH
19101: LD_VAR 0 5
19105: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19106: LD_ADDR_VAR 0 3
19110: PUSH
19111: LD_INT 1
19113: PPUSH
19114: LD_VAR 0 14
19118: PPUSH
19119: CALL_OW 12
19123: ST_TO_ADDR
// case i of 1 :
19124: LD_VAR 0 3
19128: PUSH
19129: LD_INT 1
19131: DOUBLE
19132: EQUAL
19133: IFTRUE 19137
19135: GO 19154
19137: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19138: LD_VAR 0 1
19142: PPUSH
19143: LD_VAR 0 10
19147: PPUSH
19148: CALL_OW 115
19152: GO 19215
19154: LD_INT 2
19156: DOUBLE
19157: EQUAL
19158: IFTRUE 19162
19160: GO 19184
19162: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19163: LD_VAR 0 1
19167: PPUSH
19168: LD_VAR 0 6
19172: PPUSH
19173: LD_VAR 0 7
19177: PPUSH
19178: CALL_OW 153
19182: GO 19215
19184: LD_INT 3
19186: DOUBLE
19187: EQUAL
19188: IFTRUE 19192
19190: GO 19214
19192: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19193: LD_VAR 0 1
19197: PPUSH
19198: LD_VAR 0 6
19202: PPUSH
19203: LD_VAR 0 7
19207: PPUSH
19208: CALL_OW 154
19212: GO 19215
19214: POP
// end ;
19215: LD_VAR 0 2
19219: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19220: LD_INT 0
19222: PPUSH
19223: PPUSH
19224: PPUSH
19225: PPUSH
19226: PPUSH
19227: PPUSH
// if not unit or not building then
19228: LD_VAR 0 1
19232: NOT
19233: IFTRUE 19242
19235: PUSH
19236: LD_VAR 0 2
19240: NOT
19241: OR
19242: IFFALSE 19246
// exit ;
19244: GO 19404
// x := GetX ( building ) ;
19246: LD_ADDR_VAR 0 5
19250: PUSH
19251: LD_VAR 0 2
19255: PPUSH
19256: CALL_OW 250
19260: ST_TO_ADDR
// y := GetY ( building ) ;
19261: LD_ADDR_VAR 0 6
19265: PUSH
19266: LD_VAR 0 2
19270: PPUSH
19271: CALL_OW 251
19275: ST_TO_ADDR
// for i := 0 to 5 do
19276: LD_ADDR_VAR 0 4
19280: PUSH
19281: DOUBLE
19282: LD_INT 0
19284: DEC
19285: ST_TO_ADDR
19286: LD_INT 5
19288: PUSH
19289: FOR_TO
19290: IFFALSE 19402
// begin _x := ShiftX ( x , i , 3 ) ;
19292: LD_ADDR_VAR 0 7
19296: PUSH
19297: LD_VAR 0 5
19301: PPUSH
19302: LD_VAR 0 4
19306: PPUSH
19307: LD_INT 3
19309: PPUSH
19310: CALL_OW 272
19314: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19315: LD_ADDR_VAR 0 8
19319: PUSH
19320: LD_VAR 0 6
19324: PPUSH
19325: LD_VAR 0 4
19329: PPUSH
19330: LD_INT 3
19332: PPUSH
19333: CALL_OW 273
19337: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19338: LD_VAR 0 7
19342: PPUSH
19343: LD_VAR 0 8
19347: PPUSH
19348: CALL_OW 488
19352: NOT
19353: IFFALSE 19357
// continue ;
19355: GO 19289
// if HexInfo ( _x , _y ) = 0 then
19357: LD_VAR 0 7
19361: PPUSH
19362: LD_VAR 0 8
19366: PPUSH
19367: CALL_OW 428
19371: PUSH
19372: LD_INT 0
19374: EQUAL
19375: IFFALSE 19400
// begin ComMoveXY ( unit , _x , _y ) ;
19377: LD_VAR 0 1
19381: PPUSH
19382: LD_VAR 0 7
19386: PPUSH
19387: LD_VAR 0 8
19391: PPUSH
19392: CALL_OW 111
// exit ;
19396: POP
19397: POP
19398: GO 19404
// end ; end ;
19400: GO 19289
19402: POP
19403: POP
// end ;
19404: LD_VAR 0 3
19408: RET
// export function ScanBase ( side , base_area ) ; begin
19409: LD_INT 0
19411: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19412: LD_ADDR_VAR 0 3
19416: PUSH
19417: LD_VAR 0 2
19421: PPUSH
19422: LD_INT 81
19424: PUSH
19425: LD_VAR 0 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PPUSH
19434: CALL_OW 70
19438: ST_TO_ADDR
// end ;
19439: LD_VAR 0 3
19443: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19444: LD_INT 0
19446: PPUSH
19447: PPUSH
19448: PPUSH
19449: PPUSH
// result := false ;
19450: LD_ADDR_VAR 0 2
19454: PUSH
19455: LD_INT 0
19457: ST_TO_ADDR
// side := GetSide ( unit ) ;
19458: LD_ADDR_VAR 0 3
19462: PUSH
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL_OW 255
19472: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19473: LD_ADDR_VAR 0 4
19477: PUSH
19478: LD_VAR 0 1
19482: PPUSH
19483: CALL_OW 248
19487: ST_TO_ADDR
// case nat of 1 :
19488: LD_VAR 0 4
19492: PUSH
19493: LD_INT 1
19495: DOUBLE
19496: EQUAL
19497: IFTRUE 19501
19499: GO 19512
19501: POP
// tech := tech_lassight ; 2 :
19502: LD_ADDR_VAR 0 5
19506: PUSH
19507: LD_INT 12
19509: ST_TO_ADDR
19510: GO 19551
19512: LD_INT 2
19514: DOUBLE
19515: EQUAL
19516: IFTRUE 19520
19518: GO 19531
19520: POP
// tech := tech_mortar ; 3 :
19521: LD_ADDR_VAR 0 5
19525: PUSH
19526: LD_INT 41
19528: ST_TO_ADDR
19529: GO 19551
19531: LD_INT 3
19533: DOUBLE
19534: EQUAL
19535: IFTRUE 19539
19537: GO 19550
19539: POP
// tech := tech_bazooka ; end ;
19540: LD_ADDR_VAR 0 5
19544: PUSH
19545: LD_INT 44
19547: ST_TO_ADDR
19548: GO 19551
19550: POP
// if Researched ( side , tech ) then
19551: LD_VAR 0 3
19555: PPUSH
19556: LD_VAR 0 5
19560: PPUSH
19561: CALL_OW 325
19565: IFFALSE 19592
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19567: LD_ADDR_VAR 0 2
19571: PUSH
19572: LD_INT 5
19574: PUSH
19575: LD_INT 8
19577: PUSH
19578: LD_INT 9
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: PUSH
19586: LD_VAR 0 4
19590: ARRAY
19591: ST_TO_ADDR
// end ;
19592: LD_VAR 0 2
19596: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19597: LD_INT 0
19599: PPUSH
19600: PPUSH
19601: PPUSH
// if not mines then
19602: LD_VAR 0 2
19606: NOT
19607: IFFALSE 19611
// exit ;
19609: GO 19755
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19611: LD_ADDR_VAR 0 5
19615: PUSH
19616: LD_INT 81
19618: PUSH
19619: LD_VAR 0 1
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 3
19630: PUSH
19631: LD_INT 21
19633: PUSH
19634: LD_INT 3
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: ST_TO_ADDR
// for i in mines do
19654: LD_ADDR_VAR 0 4
19658: PUSH
19659: LD_VAR 0 2
19663: PUSH
19664: FOR_IN
19665: IFFALSE 19753
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19667: LD_VAR 0 4
19671: PUSH
19672: LD_INT 1
19674: ARRAY
19675: PPUSH
19676: LD_VAR 0 4
19680: PUSH
19681: LD_INT 2
19683: ARRAY
19684: PPUSH
19685: CALL_OW 458
19689: NOT
19690: IFFALSE 19694
// continue ;
19692: GO 19664
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19694: LD_VAR 0 4
19698: PUSH
19699: LD_INT 1
19701: ARRAY
19702: PPUSH
19703: LD_VAR 0 4
19707: PUSH
19708: LD_INT 2
19710: ARRAY
19711: PPUSH
19712: CALL_OW 428
19716: PUSH
19717: LD_VAR 0 5
19721: IN
19722: IFFALSE 19751
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19724: LD_VAR 0 4
19728: PUSH
19729: LD_INT 1
19731: ARRAY
19732: PPUSH
19733: LD_VAR 0 4
19737: PUSH
19738: LD_INT 2
19740: ARRAY
19741: PPUSH
19742: LD_VAR 0 1
19746: PPUSH
19747: CALL_OW 456
// end ;
19751: GO 19664
19753: POP
19754: POP
// end ;
19755: LD_VAR 0 3
19759: RET
// export function Count ( array ) ; begin
19760: LD_INT 0
19762: PPUSH
// result := array + 0 ;
19763: LD_ADDR_VAR 0 2
19767: PUSH
19768: LD_VAR 0 1
19772: PUSH
19773: LD_INT 0
19775: PLUS
19776: ST_TO_ADDR
// end ;
19777: LD_VAR 0 2
19781: RET
// export function IsEmpty ( building ) ; begin
19782: LD_INT 0
19784: PPUSH
// if not building then
19785: LD_VAR 0 1
19789: NOT
19790: IFFALSE 19794
// exit ;
19792: GO 19837
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19794: LD_ADDR_VAR 0 2
19798: PUSH
19799: LD_VAR 0 1
19803: PUSH
19804: LD_INT 22
19806: PUSH
19807: LD_VAR 0 1
19811: PPUSH
19812: CALL_OW 255
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 58
19823: PUSH
19824: EMPTY
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PPUSH
19831: CALL_OW 69
19835: IN
19836: ST_TO_ADDR
// end ;
19837: LD_VAR 0 2
19841: RET
// export function IsNotFull ( building ) ; var places ; begin
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
// if not building then
19846: LD_VAR 0 1
19850: NOT
19851: IFFALSE 19855
// exit ;
19853: GO 19883
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19855: LD_ADDR_VAR 0 2
19859: PUSH
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_INT 3
19867: PUSH
19868: LD_INT 62
19870: PUSH
19871: EMPTY
19872: LIST
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PPUSH
19878: CALL_OW 72
19882: ST_TO_ADDR
// end ;
19883: LD_VAR 0 2
19887: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19888: LD_INT 0
19890: PPUSH
19891: PPUSH
19892: PPUSH
19893: PPUSH
// tmp := [ ] ;
19894: LD_ADDR_VAR 0 3
19898: PUSH
19899: EMPTY
19900: ST_TO_ADDR
// list := [ ] ;
19901: LD_ADDR_VAR 0 5
19905: PUSH
19906: EMPTY
19907: ST_TO_ADDR
// for i = 16 to 25 do
19908: LD_ADDR_VAR 0 4
19912: PUSH
19913: DOUBLE
19914: LD_INT 16
19916: DEC
19917: ST_TO_ADDR
19918: LD_INT 25
19920: PUSH
19921: FOR_TO
19922: IFFALSE 19995
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19924: LD_ADDR_VAR 0 3
19928: PUSH
19929: LD_VAR 0 3
19933: PUSH
19934: LD_INT 22
19936: PUSH
19937: LD_VAR 0 1
19941: PPUSH
19942: CALL_OW 255
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 91
19953: PUSH
19954: LD_VAR 0 1
19958: PUSH
19959: LD_INT 6
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 30
19969: PUSH
19970: LD_VAR 0 4
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: EMPTY
19985: LIST
19986: PPUSH
19987: CALL_OW 69
19991: ADD
19992: ST_TO_ADDR
19993: GO 19921
19995: POP
19996: POP
// for i = 1 to tmp do
19997: LD_ADDR_VAR 0 4
20001: PUSH
20002: DOUBLE
20003: LD_INT 1
20005: DEC
20006: ST_TO_ADDR
20007: LD_VAR 0 3
20011: PUSH
20012: FOR_TO
20013: IFFALSE 20101
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
20015: LD_ADDR_VAR 0 5
20019: PUSH
20020: LD_VAR 0 5
20024: PUSH
20025: LD_VAR 0 3
20029: PUSH
20030: LD_VAR 0 4
20034: ARRAY
20035: PPUSH
20036: CALL_OW 266
20040: PUSH
20041: LD_VAR 0 3
20045: PUSH
20046: LD_VAR 0 4
20050: ARRAY
20051: PPUSH
20052: CALL_OW 250
20056: PUSH
20057: LD_VAR 0 3
20061: PUSH
20062: LD_VAR 0 4
20066: ARRAY
20067: PPUSH
20068: CALL_OW 251
20072: PUSH
20073: LD_VAR 0 3
20077: PUSH
20078: LD_VAR 0 4
20082: ARRAY
20083: PPUSH
20084: CALL_OW 254
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: PUSH
20095: EMPTY
20096: LIST
20097: ADD
20098: ST_TO_ADDR
20099: GO 20012
20101: POP
20102: POP
// result := list ;
20103: LD_ADDR_VAR 0 2
20107: PUSH
20108: LD_VAR 0 5
20112: ST_TO_ADDR
// end ;
20113: LD_VAR 0 2
20117: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20118: LD_INT 0
20120: PPUSH
20121: PPUSH
20122: PPUSH
20123: PPUSH
20124: PPUSH
20125: PPUSH
20126: PPUSH
// if not factory then
20127: LD_VAR 0 1
20131: NOT
20132: IFFALSE 20136
// exit ;
20134: GO 20739
// if control = control_apeman then
20136: LD_VAR 0 4
20140: PUSH
20141: LD_INT 5
20143: EQUAL
20144: IFFALSE 20253
// begin tmp := UnitsInside ( factory ) ;
20146: LD_ADDR_VAR 0 8
20150: PUSH
20151: LD_VAR 0 1
20155: PPUSH
20156: CALL_OW 313
20160: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20161: LD_VAR 0 8
20165: PPUSH
20166: LD_INT 25
20168: PUSH
20169: LD_INT 12
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PPUSH
20176: CALL_OW 72
20180: NOT
20181: IFFALSE 20191
// control := control_manual ;
20183: LD_ADDR_VAR 0 4
20187: PUSH
20188: LD_INT 1
20190: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20191: LD_ADDR_VAR 0 8
20195: PUSH
20196: LD_VAR 0 1
20200: PPUSH
20201: CALL 19888 0 1
20205: ST_TO_ADDR
// if tmp then
20206: LD_VAR 0 8
20210: IFFALSE 20253
// begin for i in tmp do
20212: LD_ADDR_VAR 0 7
20216: PUSH
20217: LD_VAR 0 8
20221: PUSH
20222: FOR_IN
20223: IFFALSE 20251
// if i [ 1 ] = b_ext_radio then
20225: LD_VAR 0 7
20229: PUSH
20230: LD_INT 1
20232: ARRAY
20233: PUSH
20234: LD_INT 22
20236: EQUAL
20237: IFFALSE 20249
// begin control := control_remote ;
20239: LD_ADDR_VAR 0 4
20243: PUSH
20244: LD_INT 2
20246: ST_TO_ADDR
// break ;
20247: GO 20251
// end ;
20249: GO 20222
20251: POP
20252: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20253: LD_VAR 0 1
20257: PPUSH
20258: LD_VAR 0 2
20262: PPUSH
20263: LD_VAR 0 3
20267: PPUSH
20268: LD_VAR 0 4
20272: PPUSH
20273: LD_VAR 0 5
20277: PPUSH
20278: CALL_OW 448
20282: IFFALSE 20317
// begin result := [ chassis , engine , control , weapon ] ;
20284: LD_ADDR_VAR 0 6
20288: PUSH
20289: LD_VAR 0 2
20293: PUSH
20294: LD_VAR 0 3
20298: PUSH
20299: LD_VAR 0 4
20303: PUSH
20304: LD_VAR 0 5
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: ST_TO_ADDR
// exit ;
20315: GO 20739
// end ; _chassis := AvailableChassisList ( factory ) ;
20317: LD_ADDR_VAR 0 9
20321: PUSH
20322: LD_VAR 0 1
20326: PPUSH
20327: CALL_OW 475
20331: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20332: LD_ADDR_VAR 0 11
20336: PUSH
20337: LD_VAR 0 1
20341: PPUSH
20342: CALL_OW 476
20346: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20347: LD_ADDR_VAR 0 12
20351: PUSH
20352: LD_VAR 0 1
20356: PPUSH
20357: CALL_OW 477
20361: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20362: LD_ADDR_VAR 0 10
20366: PUSH
20367: LD_VAR 0 1
20371: PPUSH
20372: CALL_OW 478
20376: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20377: LD_VAR 0 9
20381: NOT
20382: IFTRUE 20391
20384: PUSH
20385: LD_VAR 0 11
20389: NOT
20390: OR
20391: IFTRUE 20400
20393: PUSH
20394: LD_VAR 0 12
20398: NOT
20399: OR
20400: IFTRUE 20409
20402: PUSH
20403: LD_VAR 0 10
20407: NOT
20408: OR
20409: IFFALSE 20444
// begin result := [ chassis , engine , control , weapon ] ;
20411: LD_ADDR_VAR 0 6
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: LD_VAR 0 3
20425: PUSH
20426: LD_VAR 0 4
20430: PUSH
20431: LD_VAR 0 5
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: ST_TO_ADDR
// exit ;
20442: GO 20739
// end ; if not chassis in _chassis then
20444: LD_VAR 0 2
20448: PUSH
20449: LD_VAR 0 9
20453: IN
20454: NOT
20455: IFFALSE 20481
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20457: LD_ADDR_VAR 0 2
20461: PUSH
20462: LD_VAR 0 9
20466: PUSH
20467: LD_INT 1
20469: PPUSH
20470: LD_VAR 0 9
20474: PPUSH
20475: CALL_OW 12
20479: ARRAY
20480: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20481: LD_VAR 0 2
20485: PPUSH
20486: LD_VAR 0 3
20490: PPUSH
20491: CALL 20744 0 2
20495: NOT
20496: IFFALSE 20557
// repeat engine := _engine [ 1 ] ;
20498: LD_ADDR_VAR 0 3
20502: PUSH
20503: LD_VAR 0 11
20507: PUSH
20508: LD_INT 1
20510: ARRAY
20511: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20512: LD_ADDR_VAR 0 11
20516: PUSH
20517: LD_VAR 0 11
20521: PPUSH
20522: LD_INT 1
20524: PPUSH
20525: CALL_OW 3
20529: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20530: LD_VAR 0 2
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: CALL 20744 0 2
20544: IFTRUE 20555
20546: PUSH
20547: LD_VAR 0 11
20551: PUSH
20552: EMPTY
20553: EQUAL
20554: OR
20555: IFFALSE 20498
// if not control in _control then
20557: LD_VAR 0 4
20561: PUSH
20562: LD_VAR 0 12
20566: IN
20567: NOT
20568: IFFALSE 20594
// control := _control [ rand ( 1 , _control ) ] ;
20570: LD_ADDR_VAR 0 4
20574: PUSH
20575: LD_VAR 0 12
20579: PUSH
20580: LD_INT 1
20582: PPUSH
20583: LD_VAR 0 12
20587: PPUSH
20588: CALL_OW 12
20592: ARRAY
20593: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20594: LD_VAR 0 2
20598: PPUSH
20599: LD_VAR 0 5
20603: PPUSH
20604: CALL 20966 0 2
20608: NOT
20609: IFFALSE 20670
// repeat weapon := _weapon [ 1 ] ;
20611: LD_ADDR_VAR 0 5
20615: PUSH
20616: LD_VAR 0 10
20620: PUSH
20621: LD_INT 1
20623: ARRAY
20624: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20625: LD_ADDR_VAR 0 10
20629: PUSH
20630: LD_VAR 0 10
20634: PPUSH
20635: LD_INT 1
20637: PPUSH
20638: CALL_OW 3
20642: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20643: LD_VAR 0 2
20647: PPUSH
20648: LD_VAR 0 5
20652: PPUSH
20653: CALL 20966 0 2
20657: IFTRUE 20668
20659: PUSH
20660: LD_VAR 0 10
20664: PUSH
20665: EMPTY
20666: EQUAL
20667: OR
20668: IFFALSE 20611
// result := [ ] ;
20670: LD_ADDR_VAR 0 6
20674: PUSH
20675: EMPTY
20676: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20677: LD_VAR 0 1
20681: PPUSH
20682: LD_VAR 0 2
20686: PPUSH
20687: LD_VAR 0 3
20691: PPUSH
20692: LD_VAR 0 4
20696: PPUSH
20697: LD_VAR 0 5
20701: PPUSH
20702: CALL_OW 448
20706: IFFALSE 20739
// result := [ chassis , engine , control , weapon ] ;
20708: LD_ADDR_VAR 0 6
20712: PUSH
20713: LD_VAR 0 2
20717: PUSH
20718: LD_VAR 0 3
20722: PUSH
20723: LD_VAR 0 4
20727: PUSH
20728: LD_VAR 0 5
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: ST_TO_ADDR
// end ;
20739: LD_VAR 0 6
20743: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20744: LD_INT 0
20746: PPUSH
// if not chassis or not engine then
20747: LD_VAR 0 1
20751: NOT
20752: IFTRUE 20761
20754: PUSH
20755: LD_VAR 0 2
20759: NOT
20760: OR
20761: IFFALSE 20765
// exit ;
20763: GO 20961
// case engine of engine_solar :
20765: LD_VAR 0 2
20769: PUSH
20770: LD_INT 2
20772: DOUBLE
20773: EQUAL
20774: IFTRUE 20778
20776: GO 20816
20778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20779: LD_ADDR_VAR 0 3
20783: PUSH
20784: LD_INT 11
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: LD_INT 13
20792: PUSH
20793: LD_INT 14
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: LD_INT 3
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: ST_TO_ADDR
20814: GO 20945
20816: LD_INT 1
20818: DOUBLE
20819: EQUAL
20820: IFTRUE 20824
20822: GO 20886
20824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20825: LD_ADDR_VAR 0 3
20829: PUSH
20830: LD_INT 11
20832: PUSH
20833: LD_INT 12
20835: PUSH
20836: LD_INT 13
20838: PUSH
20839: LD_INT 14
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: LD_INT 3
20850: PUSH
20851: LD_INT 4
20853: PUSH
20854: LD_INT 5
20856: PUSH
20857: LD_INT 21
20859: PUSH
20860: LD_INT 23
20862: PUSH
20863: LD_INT 22
20865: PUSH
20866: LD_INT 24
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: ST_TO_ADDR
20884: GO 20945
20886: LD_INT 3
20888: DOUBLE
20889: EQUAL
20890: IFTRUE 20894
20892: GO 20944
20894: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20895: LD_ADDR_VAR 0 3
20899: PUSH
20900: LD_INT 13
20902: PUSH
20903: LD_INT 14
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: LD_INT 3
20911: PUSH
20912: LD_INT 4
20914: PUSH
20915: LD_INT 5
20917: PUSH
20918: LD_INT 21
20920: PUSH
20921: LD_INT 22
20923: PUSH
20924: LD_INT 23
20926: PUSH
20927: LD_INT 24
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: ST_TO_ADDR
20942: GO 20945
20944: POP
// result := ( chassis in result ) ;
20945: LD_ADDR_VAR 0 3
20949: PUSH
20950: LD_VAR 0 1
20954: PUSH
20955: LD_VAR 0 3
20959: IN
20960: ST_TO_ADDR
// end ;
20961: LD_VAR 0 3
20965: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20966: LD_INT 0
20968: PPUSH
// if not chassis or not weapon then
20969: LD_VAR 0 1
20973: NOT
20974: IFTRUE 20983
20976: PUSH
20977: LD_VAR 0 2
20981: NOT
20982: OR
20983: IFFALSE 20987
// exit ;
20985: GO 22047
// case weapon of us_machine_gun :
20987: LD_VAR 0 2
20991: PUSH
20992: LD_INT 2
20994: DOUBLE
20995: EQUAL
20996: IFTRUE 21000
20998: GO 21030
21000: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
21001: LD_ADDR_VAR 0 3
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: LD_INT 3
21014: PUSH
21015: LD_INT 4
21017: PUSH
21018: LD_INT 5
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: ST_TO_ADDR
21028: GO 22031
21030: LD_INT 3
21032: DOUBLE
21033: EQUAL
21034: IFTRUE 21038
21036: GO 21068
21038: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
21039: LD_ADDR_VAR 0 3
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: LD_INT 2
21049: PUSH
21050: LD_INT 3
21052: PUSH
21053: LD_INT 4
21055: PUSH
21056: LD_INT 5
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: ST_TO_ADDR
21066: GO 22031
21068: LD_INT 11
21070: DOUBLE
21071: EQUAL
21072: IFTRUE 21076
21074: GO 21106
21076: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
21077: LD_ADDR_VAR 0 3
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: LD_INT 3
21090: PUSH
21091: LD_INT 4
21093: PUSH
21094: LD_INT 5
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: ST_TO_ADDR
21104: GO 22031
21106: LD_INT 4
21108: DOUBLE
21109: EQUAL
21110: IFTRUE 21114
21112: GO 21140
21114: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21115: LD_ADDR_VAR 0 3
21119: PUSH
21120: LD_INT 2
21122: PUSH
21123: LD_INT 3
21125: PUSH
21126: LD_INT 4
21128: PUSH
21129: LD_INT 5
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: ST_TO_ADDR
21138: GO 22031
21140: LD_INT 5
21142: DOUBLE
21143: EQUAL
21144: IFTRUE 21148
21146: GO 21174
21148: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21149: LD_ADDR_VAR 0 3
21153: PUSH
21154: LD_INT 2
21156: PUSH
21157: LD_INT 3
21159: PUSH
21160: LD_INT 4
21162: PUSH
21163: LD_INT 5
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: ST_TO_ADDR
21172: GO 22031
21174: LD_INT 9
21176: DOUBLE
21177: EQUAL
21178: IFTRUE 21182
21180: GO 21208
21182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21183: LD_ADDR_VAR 0 3
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: LD_INT 3
21193: PUSH
21194: LD_INT 4
21196: PUSH
21197: LD_INT 5
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: ST_TO_ADDR
21206: GO 22031
21208: LD_INT 7
21210: DOUBLE
21211: EQUAL
21212: IFTRUE 21216
21214: GO 21242
21216: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21217: LD_ADDR_VAR 0 3
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: LD_INT 3
21227: PUSH
21228: LD_INT 4
21230: PUSH
21231: LD_INT 5
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: ST_TO_ADDR
21240: GO 22031
21242: LD_INT 12
21244: DOUBLE
21245: EQUAL
21246: IFTRUE 21250
21248: GO 21276
21250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21251: LD_ADDR_VAR 0 3
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: LD_INT 3
21261: PUSH
21262: LD_INT 4
21264: PUSH
21265: LD_INT 5
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: ST_TO_ADDR
21274: GO 22031
21276: LD_INT 13
21278: DOUBLE
21279: EQUAL
21280: IFTRUE 21284
21282: GO 21310
21284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21285: LD_ADDR_VAR 0 3
21289: PUSH
21290: LD_INT 2
21292: PUSH
21293: LD_INT 3
21295: PUSH
21296: LD_INT 4
21298: PUSH
21299: LD_INT 5
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: ST_TO_ADDR
21308: GO 22031
21310: LD_INT 14
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21336
21318: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21319: LD_ADDR_VAR 0 3
21323: PUSH
21324: LD_INT 4
21326: PUSH
21327: LD_INT 5
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: ST_TO_ADDR
21334: GO 22031
21336: LD_INT 6
21338: DOUBLE
21339: EQUAL
21340: IFTRUE 21344
21342: GO 21362
21344: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21345: LD_ADDR_VAR 0 3
21349: PUSH
21350: LD_INT 4
21352: PUSH
21353: LD_INT 5
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: ST_TO_ADDR
21360: GO 22031
21362: LD_INT 10
21364: DOUBLE
21365: EQUAL
21366: IFTRUE 21370
21368: GO 21388
21370: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21371: LD_ADDR_VAR 0 3
21375: PUSH
21376: LD_INT 4
21378: PUSH
21379: LD_INT 5
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: ST_TO_ADDR
21386: GO 22031
21388: LD_INT 22
21390: DOUBLE
21391: EQUAL
21392: IFTRUE 21396
21394: GO 21422
21396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21397: LD_ADDR_VAR 0 3
21401: PUSH
21402: LD_INT 11
21404: PUSH
21405: LD_INT 12
21407: PUSH
21408: LD_INT 13
21410: PUSH
21411: LD_INT 14
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: ST_TO_ADDR
21420: GO 22031
21422: LD_INT 23
21424: DOUBLE
21425: EQUAL
21426: IFTRUE 21430
21428: GO 21456
21430: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21431: LD_ADDR_VAR 0 3
21435: PUSH
21436: LD_INT 11
21438: PUSH
21439: LD_INT 12
21441: PUSH
21442: LD_INT 13
21444: PUSH
21445: LD_INT 14
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: ST_TO_ADDR
21454: GO 22031
21456: LD_INT 24
21458: DOUBLE
21459: EQUAL
21460: IFTRUE 21464
21462: GO 21490
21464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21465: LD_ADDR_VAR 0 3
21469: PUSH
21470: LD_INT 11
21472: PUSH
21473: LD_INT 12
21475: PUSH
21476: LD_INT 13
21478: PUSH
21479: LD_INT 14
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: ST_TO_ADDR
21488: GO 22031
21490: LD_INT 30
21492: DOUBLE
21493: EQUAL
21494: IFTRUE 21498
21496: GO 21524
21498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21499: LD_ADDR_VAR 0 3
21503: PUSH
21504: LD_INT 11
21506: PUSH
21507: LD_INT 12
21509: PUSH
21510: LD_INT 13
21512: PUSH
21513: LD_INT 14
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: ST_TO_ADDR
21522: GO 22031
21524: LD_INT 25
21526: DOUBLE
21527: EQUAL
21528: IFTRUE 21532
21530: GO 21550
21532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21533: LD_ADDR_VAR 0 3
21537: PUSH
21538: LD_INT 13
21540: PUSH
21541: LD_INT 14
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: ST_TO_ADDR
21548: GO 22031
21550: LD_INT 27
21552: DOUBLE
21553: EQUAL
21554: IFTRUE 21558
21556: GO 21576
21558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21559: LD_ADDR_VAR 0 3
21563: PUSH
21564: LD_INT 13
21566: PUSH
21567: LD_INT 14
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: ST_TO_ADDR
21574: GO 22031
21576: LD_INT 92
21578: DOUBLE
21579: EQUAL
21580: IFTRUE 21584
21582: GO 21610
21584: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21585: LD_ADDR_VAR 0 3
21589: PUSH
21590: LD_INT 11
21592: PUSH
21593: LD_INT 12
21595: PUSH
21596: LD_INT 13
21598: PUSH
21599: LD_INT 14
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: ST_TO_ADDR
21608: GO 22031
21610: LD_INT 28
21612: DOUBLE
21613: EQUAL
21614: IFTRUE 21618
21616: GO 21636
21618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21619: LD_ADDR_VAR 0 3
21623: PUSH
21624: LD_INT 13
21626: PUSH
21627: LD_INT 14
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: ST_TO_ADDR
21634: GO 22031
21636: LD_INT 29
21638: DOUBLE
21639: EQUAL
21640: IFTRUE 21644
21642: GO 21662
21644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21645: LD_ADDR_VAR 0 3
21649: PUSH
21650: LD_INT 13
21652: PUSH
21653: LD_INT 14
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: ST_TO_ADDR
21660: GO 22031
21662: LD_INT 31
21664: DOUBLE
21665: EQUAL
21666: IFTRUE 21670
21668: GO 21688
21670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21671: LD_ADDR_VAR 0 3
21675: PUSH
21676: LD_INT 13
21678: PUSH
21679: LD_INT 14
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: ST_TO_ADDR
21686: GO 22031
21688: LD_INT 26
21690: DOUBLE
21691: EQUAL
21692: IFTRUE 21696
21694: GO 21714
21696: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21697: LD_ADDR_VAR 0 3
21701: PUSH
21702: LD_INT 13
21704: PUSH
21705: LD_INT 14
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: ST_TO_ADDR
21712: GO 22031
21714: LD_INT 42
21716: DOUBLE
21717: EQUAL
21718: IFTRUE 21722
21720: GO 21748
21722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21723: LD_ADDR_VAR 0 3
21727: PUSH
21728: LD_INT 21
21730: PUSH
21731: LD_INT 22
21733: PUSH
21734: LD_INT 23
21736: PUSH
21737: LD_INT 24
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: ST_TO_ADDR
21746: GO 22031
21748: LD_INT 43
21750: DOUBLE
21751: EQUAL
21752: IFTRUE 21756
21754: GO 21782
21756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21757: LD_ADDR_VAR 0 3
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_INT 23
21770: PUSH
21771: LD_INT 24
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: ST_TO_ADDR
21780: GO 22031
21782: LD_INT 44
21784: DOUBLE
21785: EQUAL
21786: IFTRUE 21790
21788: GO 21816
21790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21791: LD_ADDR_VAR 0 3
21795: PUSH
21796: LD_INT 21
21798: PUSH
21799: LD_INT 22
21801: PUSH
21802: LD_INT 23
21804: PUSH
21805: LD_INT 24
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: ST_TO_ADDR
21814: GO 22031
21816: LD_INT 45
21818: DOUBLE
21819: EQUAL
21820: IFTRUE 21824
21822: GO 21850
21824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21825: LD_ADDR_VAR 0 3
21829: PUSH
21830: LD_INT 21
21832: PUSH
21833: LD_INT 22
21835: PUSH
21836: LD_INT 23
21838: PUSH
21839: LD_INT 24
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: ST_TO_ADDR
21848: GO 22031
21850: LD_INT 49
21852: DOUBLE
21853: EQUAL
21854: IFTRUE 21858
21856: GO 21884
21858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21859: LD_ADDR_VAR 0 3
21863: PUSH
21864: LD_INT 21
21866: PUSH
21867: LD_INT 22
21869: PUSH
21870: LD_INT 23
21872: PUSH
21873: LD_INT 24
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: ST_TO_ADDR
21882: GO 22031
21884: LD_INT 51
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 21918
21892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21893: LD_ADDR_VAR 0 3
21897: PUSH
21898: LD_INT 21
21900: PUSH
21901: LD_INT 22
21903: PUSH
21904: LD_INT 23
21906: PUSH
21907: LD_INT 24
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: ST_TO_ADDR
21916: GO 22031
21918: LD_INT 52
21920: DOUBLE
21921: EQUAL
21922: IFTRUE 21926
21924: GO 21952
21926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21927: LD_ADDR_VAR 0 3
21931: PUSH
21932: LD_INT 21
21934: PUSH
21935: LD_INT 22
21937: PUSH
21938: LD_INT 23
21940: PUSH
21941: LD_INT 24
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: ST_TO_ADDR
21950: GO 22031
21952: LD_INT 53
21954: DOUBLE
21955: EQUAL
21956: IFTRUE 21960
21958: GO 21978
21960: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21961: LD_ADDR_VAR 0 3
21965: PUSH
21966: LD_INT 23
21968: PUSH
21969: LD_INT 24
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: ST_TO_ADDR
21976: GO 22031
21978: LD_INT 46
21980: DOUBLE
21981: EQUAL
21982: IFTRUE 21986
21984: GO 22004
21986: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21987: LD_ADDR_VAR 0 3
21991: PUSH
21992: LD_INT 23
21994: PUSH
21995: LD_INT 24
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: ST_TO_ADDR
22002: GO 22031
22004: LD_INT 47
22006: DOUBLE
22007: EQUAL
22008: IFTRUE 22012
22010: GO 22030
22012: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22013: LD_ADDR_VAR 0 3
22017: PUSH
22018: LD_INT 23
22020: PUSH
22021: LD_INT 24
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: ST_TO_ADDR
22028: GO 22031
22030: POP
// result := ( chassis in result ) ;
22031: LD_ADDR_VAR 0 3
22035: PUSH
22036: LD_VAR 0 1
22040: PUSH
22041: LD_VAR 0 3
22045: IN
22046: ST_TO_ADDR
// end ;
22047: LD_VAR 0 3
22051: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
22052: LD_INT 0
22054: PPUSH
22055: PPUSH
22056: PPUSH
22057: PPUSH
22058: PPUSH
22059: PPUSH
22060: PPUSH
// result := array ;
22061: LD_ADDR_VAR 0 5
22065: PUSH
22066: LD_VAR 0 1
22070: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
22071: LD_VAR 0 1
22075: NOT
22076: IFTRUE 22085
22078: PUSH
22079: LD_VAR 0 2
22083: NOT
22084: OR
22085: IFTRUE 22094
22087: PUSH
22088: LD_VAR 0 3
22092: NOT
22093: OR
22094: IFTRUE 22108
22096: PUSH
22097: LD_VAR 0 2
22101: PUSH
22102: LD_VAR 0 1
22106: GREATER
22107: OR
22108: IFTRUE 22122
22110: PUSH
22111: LD_VAR 0 3
22115: PUSH
22116: LD_VAR 0 1
22120: GREATER
22121: OR
22122: IFFALSE 22126
// exit ;
22124: GO 22422
// if direction then
22126: LD_VAR 0 4
22130: IFFALSE 22194
// begin d := 1 ;
22132: LD_ADDR_VAR 0 9
22136: PUSH
22137: LD_INT 1
22139: ST_TO_ADDR
// if i_from > i_to then
22140: LD_VAR 0 2
22144: PUSH
22145: LD_VAR 0 3
22149: GREATER
22150: IFFALSE 22176
// length := ( array - i_from ) + i_to else
22152: LD_ADDR_VAR 0 11
22156: PUSH
22157: LD_VAR 0 1
22161: PUSH
22162: LD_VAR 0 2
22166: MINUS
22167: PUSH
22168: LD_VAR 0 3
22172: PLUS
22173: ST_TO_ADDR
22174: GO 22192
// length := i_to - i_from ;
22176: LD_ADDR_VAR 0 11
22180: PUSH
22181: LD_VAR 0 3
22185: PUSH
22186: LD_VAR 0 2
22190: MINUS
22191: ST_TO_ADDR
// end else
22192: GO 22255
// begin d := - 1 ;
22194: LD_ADDR_VAR 0 9
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: ST_TO_ADDR
// if i_from > i_to then
22203: LD_VAR 0 2
22207: PUSH
22208: LD_VAR 0 3
22212: GREATER
22213: IFFALSE 22233
// length := i_from - i_to else
22215: LD_ADDR_VAR 0 11
22219: PUSH
22220: LD_VAR 0 2
22224: PUSH
22225: LD_VAR 0 3
22229: MINUS
22230: ST_TO_ADDR
22231: GO 22255
// length := ( array - i_to ) + i_from ;
22233: LD_ADDR_VAR 0 11
22237: PUSH
22238: LD_VAR 0 1
22242: PUSH
22243: LD_VAR 0 3
22247: MINUS
22248: PUSH
22249: LD_VAR 0 2
22253: PLUS
22254: ST_TO_ADDR
// end ; if not length then
22255: LD_VAR 0 11
22259: NOT
22260: IFFALSE 22264
// exit ;
22262: GO 22422
// tmp := array ;
22264: LD_ADDR_VAR 0 10
22268: PUSH
22269: LD_VAR 0 1
22273: ST_TO_ADDR
// for i = 1 to length do
22274: LD_ADDR_VAR 0 6
22278: PUSH
22279: DOUBLE
22280: LD_INT 1
22282: DEC
22283: ST_TO_ADDR
22284: LD_VAR 0 11
22288: PUSH
22289: FOR_TO
22290: IFFALSE 22410
// begin for j = 1 to array do
22292: LD_ADDR_VAR 0 7
22296: PUSH
22297: DOUBLE
22298: LD_INT 1
22300: DEC
22301: ST_TO_ADDR
22302: LD_VAR 0 1
22306: PUSH
22307: FOR_TO
22308: IFFALSE 22396
// begin k := j + d ;
22310: LD_ADDR_VAR 0 8
22314: PUSH
22315: LD_VAR 0 7
22319: PUSH
22320: LD_VAR 0 9
22324: PLUS
22325: ST_TO_ADDR
// if k > array then
22326: LD_VAR 0 8
22330: PUSH
22331: LD_VAR 0 1
22335: GREATER
22336: IFFALSE 22346
// k := 1 ;
22338: LD_ADDR_VAR 0 8
22342: PUSH
22343: LD_INT 1
22345: ST_TO_ADDR
// if not k then
22346: LD_VAR 0 8
22350: NOT
22351: IFFALSE 22363
// k := array ;
22353: LD_ADDR_VAR 0 8
22357: PUSH
22358: LD_VAR 0 1
22362: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22363: LD_ADDR_VAR 0 10
22367: PUSH
22368: LD_VAR 0 10
22372: PPUSH
22373: LD_VAR 0 8
22377: PPUSH
22378: LD_VAR 0 1
22382: PUSH
22383: LD_VAR 0 7
22387: ARRAY
22388: PPUSH
22389: CALL_OW 1
22393: ST_TO_ADDR
// end ;
22394: GO 22307
22396: POP
22397: POP
// array := tmp ;
22398: LD_ADDR_VAR 0 1
22402: PUSH
22403: LD_VAR 0 10
22407: ST_TO_ADDR
// end ;
22408: GO 22289
22410: POP
22411: POP
// result := array ;
22412: LD_ADDR_VAR 0 5
22416: PUSH
22417: LD_VAR 0 1
22421: ST_TO_ADDR
// end ;
22422: LD_VAR 0 5
22426: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22427: LD_INT 0
22429: PPUSH
22430: PPUSH
// result := 0 ;
22431: LD_ADDR_VAR 0 3
22435: PUSH
22436: LD_INT 0
22438: ST_TO_ADDR
// if not array or not value in array then
22439: LD_VAR 0 1
22443: NOT
22444: IFTRUE 22459
22446: PUSH
22447: LD_VAR 0 2
22451: PUSH
22452: LD_VAR 0 1
22456: IN
22457: NOT
22458: OR
22459: IFFALSE 22463
// exit ;
22461: GO 22517
// for i = 1 to array do
22463: LD_ADDR_VAR 0 4
22467: PUSH
22468: DOUBLE
22469: LD_INT 1
22471: DEC
22472: ST_TO_ADDR
22473: LD_VAR 0 1
22477: PUSH
22478: FOR_TO
22479: IFFALSE 22515
// if value = array [ i ] then
22481: LD_VAR 0 2
22485: PUSH
22486: LD_VAR 0 1
22490: PUSH
22491: LD_VAR 0 4
22495: ARRAY
22496: EQUAL
22497: IFFALSE 22513
// begin result := i ;
22499: LD_ADDR_VAR 0 3
22503: PUSH
22504: LD_VAR 0 4
22508: ST_TO_ADDR
// exit ;
22509: POP
22510: POP
22511: GO 22517
// end ;
22513: GO 22478
22515: POP
22516: POP
// end ;
22517: LD_VAR 0 3
22521: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22522: LD_INT 0
22524: PPUSH
// vc_chassis := chassis ;
22525: LD_ADDR_OWVAR 37
22529: PUSH
22530: LD_VAR 0 1
22534: ST_TO_ADDR
// vc_engine := engine ;
22535: LD_ADDR_OWVAR 39
22539: PUSH
22540: LD_VAR 0 2
22544: ST_TO_ADDR
// vc_control := control ;
22545: LD_ADDR_OWVAR 38
22549: PUSH
22550: LD_VAR 0 3
22554: ST_TO_ADDR
// vc_weapon := weapon ;
22555: LD_ADDR_OWVAR 40
22559: PUSH
22560: LD_VAR 0 4
22564: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22565: LD_ADDR_OWVAR 41
22569: PUSH
22570: LD_VAR 0 5
22574: ST_TO_ADDR
// end ;
22575: LD_VAR 0 6
22579: RET
// export function WantPlant ( unit ) ; var task ; begin
22580: LD_INT 0
22582: PPUSH
22583: PPUSH
// result := false ;
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_INT 0
22591: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22592: LD_ADDR_VAR 0 3
22596: PUSH
22597: LD_VAR 0 1
22601: PPUSH
22602: CALL_OW 437
22606: ST_TO_ADDR
// if task then
22607: LD_VAR 0 3
22611: IFFALSE 22639
// if task [ 1 ] [ 1 ] = p then
22613: LD_VAR 0 3
22617: PUSH
22618: LD_INT 1
22620: ARRAY
22621: PUSH
22622: LD_INT 1
22624: ARRAY
22625: PUSH
22626: LD_STRING p
22628: EQUAL
22629: IFFALSE 22639
// result := true ;
22631: LD_ADDR_VAR 0 2
22635: PUSH
22636: LD_INT 1
22638: ST_TO_ADDR
// end ;
22639: LD_VAR 0 2
22643: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22644: LD_INT 0
22646: PPUSH
22647: PPUSH
22648: PPUSH
22649: PPUSH
// if pos < 1 then
22650: LD_VAR 0 2
22654: PUSH
22655: LD_INT 1
22657: LESS
22658: IFFALSE 22662
// exit ;
22660: GO 22965
// if pos = 1 then
22662: LD_VAR 0 2
22666: PUSH
22667: LD_INT 1
22669: EQUAL
22670: IFFALSE 22703
// result := Replace ( arr , pos [ 1 ] , value ) else
22672: LD_ADDR_VAR 0 4
22676: PUSH
22677: LD_VAR 0 1
22681: PPUSH
22682: LD_VAR 0 2
22686: PUSH
22687: LD_INT 1
22689: ARRAY
22690: PPUSH
22691: LD_VAR 0 3
22695: PPUSH
22696: CALL_OW 1
22700: ST_TO_ADDR
22701: GO 22965
// begin tmp := arr ;
22703: LD_ADDR_VAR 0 6
22707: PUSH
22708: LD_VAR 0 1
22712: ST_TO_ADDR
// s_arr := [ tmp ] ;
22713: LD_ADDR_VAR 0 7
22717: PUSH
22718: LD_VAR 0 6
22722: PUSH
22723: EMPTY
22724: LIST
22725: ST_TO_ADDR
// for i = 1 to pos - 1 do
22726: LD_ADDR_VAR 0 5
22730: PUSH
22731: DOUBLE
22732: LD_INT 1
22734: DEC
22735: ST_TO_ADDR
22736: LD_VAR 0 2
22740: PUSH
22741: LD_INT 1
22743: MINUS
22744: PUSH
22745: FOR_TO
22746: IFFALSE 22791
// begin tmp := tmp [ pos [ i ] ] ;
22748: LD_ADDR_VAR 0 6
22752: PUSH
22753: LD_VAR 0 6
22757: PUSH
22758: LD_VAR 0 2
22762: PUSH
22763: LD_VAR 0 5
22767: ARRAY
22768: ARRAY
22769: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22770: LD_ADDR_VAR 0 7
22774: PUSH
22775: LD_VAR 0 7
22779: PUSH
22780: LD_VAR 0 6
22784: PUSH
22785: EMPTY
22786: LIST
22787: ADD
22788: ST_TO_ADDR
// end ;
22789: GO 22745
22791: POP
22792: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22793: LD_ADDR_VAR 0 6
22797: PUSH
22798: LD_VAR 0 6
22802: PPUSH
22803: LD_VAR 0 2
22807: PUSH
22808: LD_VAR 0 2
22812: ARRAY
22813: PPUSH
22814: LD_VAR 0 3
22818: PPUSH
22819: CALL_OW 1
22823: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22824: LD_ADDR_VAR 0 7
22828: PUSH
22829: LD_VAR 0 7
22833: PPUSH
22834: LD_VAR 0 7
22838: PPUSH
22839: LD_VAR 0 6
22843: PPUSH
22844: CALL_OW 1
22848: ST_TO_ADDR
// for i = s_arr downto 2 do
22849: LD_ADDR_VAR 0 5
22853: PUSH
22854: DOUBLE
22855: LD_VAR 0 7
22859: INC
22860: ST_TO_ADDR
22861: LD_INT 2
22863: PUSH
22864: FOR_DOWNTO
22865: IFFALSE 22949
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22867: LD_ADDR_VAR 0 6
22871: PUSH
22872: LD_VAR 0 7
22876: PUSH
22877: LD_VAR 0 5
22881: PUSH
22882: LD_INT 1
22884: MINUS
22885: ARRAY
22886: PPUSH
22887: LD_VAR 0 2
22891: PUSH
22892: LD_VAR 0 5
22896: PUSH
22897: LD_INT 1
22899: MINUS
22900: ARRAY
22901: PPUSH
22902: LD_VAR 0 7
22906: PUSH
22907: LD_VAR 0 5
22911: ARRAY
22912: PPUSH
22913: CALL_OW 1
22917: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22918: LD_ADDR_VAR 0 7
22922: PUSH
22923: LD_VAR 0 7
22927: PPUSH
22928: LD_VAR 0 5
22932: PUSH
22933: LD_INT 1
22935: MINUS
22936: PPUSH
22937: LD_VAR 0 6
22941: PPUSH
22942: CALL_OW 1
22946: ST_TO_ADDR
// end ;
22947: GO 22864
22949: POP
22950: POP
// result := s_arr [ 1 ] ;
22951: LD_ADDR_VAR 0 4
22955: PUSH
22956: LD_VAR 0 7
22960: PUSH
22961: LD_INT 1
22963: ARRAY
22964: ST_TO_ADDR
// end ; end ;
22965: LD_VAR 0 4
22969: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22970: LD_INT 0
22972: PPUSH
22973: PPUSH
// if not list then
22974: LD_VAR 0 1
22978: NOT
22979: IFFALSE 22983
// exit ;
22981: GO 23074
// i := list [ pos1 ] ;
22983: LD_ADDR_VAR 0 5
22987: PUSH
22988: LD_VAR 0 1
22992: PUSH
22993: LD_VAR 0 2
22997: ARRAY
22998: ST_TO_ADDR
// if not i then
22999: LD_VAR 0 5
23003: NOT
23004: IFFALSE 23008
// exit ;
23006: GO 23074
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
23008: LD_ADDR_VAR 0 1
23012: PUSH
23013: LD_VAR 0 1
23017: PPUSH
23018: LD_VAR 0 2
23022: PPUSH
23023: LD_VAR 0 1
23027: PUSH
23028: LD_VAR 0 3
23032: ARRAY
23033: PPUSH
23034: CALL_OW 1
23038: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
23039: LD_ADDR_VAR 0 1
23043: PUSH
23044: LD_VAR 0 1
23048: PPUSH
23049: LD_VAR 0 3
23053: PPUSH
23054: LD_VAR 0 5
23058: PPUSH
23059: CALL_OW 1
23063: ST_TO_ADDR
// result := list ;
23064: LD_ADDR_VAR 0 4
23068: PUSH
23069: LD_VAR 0 1
23073: ST_TO_ADDR
// end ;
23074: LD_VAR 0 4
23078: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
23079: LD_INT 0
23081: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
23082: LD_ADDR_VAR 0 5
23086: PUSH
23087: LD_VAR 0 1
23091: PPUSH
23092: CALL_OW 250
23096: PPUSH
23097: LD_VAR 0 1
23101: PPUSH
23102: CALL_OW 251
23106: PPUSH
23107: LD_VAR 0 2
23111: PPUSH
23112: LD_VAR 0 3
23116: PPUSH
23117: LD_VAR 0 4
23121: PPUSH
23122: CALL 23504 0 5
23126: ST_TO_ADDR
// end ;
23127: LD_VAR 0 5
23131: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
23132: LD_INT 0
23134: PPUSH
23135: PPUSH
23136: PPUSH
23137: PPUSH
// if not list or not unit then
23138: LD_VAR 0 2
23142: NOT
23143: IFTRUE 23152
23145: PUSH
23146: LD_VAR 0 1
23150: NOT
23151: OR
23152: IFFALSE 23156
// exit ;
23154: GO 23499
// result := [ ] ;
23156: LD_ADDR_VAR 0 5
23160: PUSH
23161: EMPTY
23162: ST_TO_ADDR
// for i in list do
23163: LD_ADDR_VAR 0 6
23167: PUSH
23168: LD_VAR 0 2
23172: PUSH
23173: FOR_IN
23174: IFFALSE 23392
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
23176: LD_ADDR_VAR 0 8
23180: PUSH
23181: LD_VAR 0 1
23185: PPUSH
23186: LD_VAR 0 6
23190: PUSH
23191: LD_INT 1
23193: ARRAY
23194: PPUSH
23195: LD_VAR 0 6
23199: PUSH
23200: LD_INT 2
23202: ARRAY
23203: PPUSH
23204: CALL_OW 297
23208: ST_TO_ADDR
// if not Count ( result ) then
23209: LD_VAR 0 5
23213: PPUSH
23214: CALL 19760 0 1
23218: NOT
23219: IFFALSE 23252
// begin result := Join ( result , [ i , tmp ] ) ;
23221: LD_ADDR_VAR 0 5
23225: PUSH
23226: LD_VAR 0 5
23230: PPUSH
23231: LD_VAR 0 6
23235: PUSH
23236: LD_VAR 0 8
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PPUSH
23245: CALL 55692 0 2
23249: ST_TO_ADDR
// continue ;
23250: GO 23173
// end ; if result [ result ] [ 2 ] <= tmp then
23252: LD_VAR 0 5
23256: PUSH
23257: LD_VAR 0 5
23261: ARRAY
23262: PUSH
23263: LD_INT 2
23265: ARRAY
23266: PUSH
23267: LD_VAR 0 8
23271: LESSEQUAL
23272: IFFALSE 23305
// result := Join ( result , [ i , tmp ] ) else
23274: LD_ADDR_VAR 0 5
23278: PUSH
23279: LD_VAR 0 5
23283: PPUSH
23284: LD_VAR 0 6
23288: PUSH
23289: LD_VAR 0 8
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PPUSH
23298: CALL 55692 0 2
23302: ST_TO_ADDR
23303: GO 23390
// begin for j := 1 to Count ( result ) do
23305: LD_ADDR_VAR 0 7
23309: PUSH
23310: DOUBLE
23311: LD_INT 1
23313: DEC
23314: ST_TO_ADDR
23315: LD_VAR 0 5
23319: PPUSH
23320: CALL 19760 0 1
23324: PUSH
23325: FOR_TO
23326: IFFALSE 23388
// begin if tmp < result [ j ] [ 2 ] then
23328: LD_VAR 0 8
23332: PUSH
23333: LD_VAR 0 5
23337: PUSH
23338: LD_VAR 0 7
23342: ARRAY
23343: PUSH
23344: LD_INT 2
23346: ARRAY
23347: LESS
23348: IFFALSE 23386
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23350: LD_ADDR_VAR 0 5
23354: PUSH
23355: LD_VAR 0 5
23359: PPUSH
23360: LD_VAR 0 7
23364: PPUSH
23365: LD_VAR 0 6
23369: PUSH
23370: LD_VAR 0 8
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PPUSH
23379: CALL_OW 2
23383: ST_TO_ADDR
// break ;
23384: GO 23388
// end ; end ;
23386: GO 23325
23388: POP
23389: POP
// end ; end ;
23390: GO 23173
23392: POP
23393: POP
// if result and not asc then
23394: LD_VAR 0 5
23398: IFFALSE 23407
23400: PUSH
23401: LD_VAR 0 3
23405: NOT
23406: AND
23407: IFFALSE 23424
// result := ReverseArray ( result ) ;
23409: LD_ADDR_VAR 0 5
23413: PUSH
23414: LD_VAR 0 5
23418: PPUSH
23419: CALL 50782 0 1
23423: ST_TO_ADDR
// tmp := [ ] ;
23424: LD_ADDR_VAR 0 8
23428: PUSH
23429: EMPTY
23430: ST_TO_ADDR
// if mode then
23431: LD_VAR 0 4
23435: IFFALSE 23499
// begin for i := 1 to result do
23437: LD_ADDR_VAR 0 6
23441: PUSH
23442: DOUBLE
23443: LD_INT 1
23445: DEC
23446: ST_TO_ADDR
23447: LD_VAR 0 5
23451: PUSH
23452: FOR_TO
23453: IFFALSE 23487
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23455: LD_ADDR_VAR 0 8
23459: PUSH
23460: LD_VAR 0 8
23464: PPUSH
23465: LD_VAR 0 5
23469: PUSH
23470: LD_VAR 0 6
23474: ARRAY
23475: PUSH
23476: LD_INT 1
23478: ARRAY
23479: PPUSH
23480: CALL 55692 0 2
23484: ST_TO_ADDR
23485: GO 23452
23487: POP
23488: POP
// result := tmp ;
23489: LD_ADDR_VAR 0 5
23493: PUSH
23494: LD_VAR 0 8
23498: ST_TO_ADDR
// end ; end ;
23499: LD_VAR 0 5
23503: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23504: LD_INT 0
23506: PPUSH
23507: PPUSH
23508: PPUSH
23509: PPUSH
// if not list then
23510: LD_VAR 0 3
23514: NOT
23515: IFFALSE 23519
// exit ;
23517: GO 23909
// result := [ ] ;
23519: LD_ADDR_VAR 0 6
23523: PUSH
23524: EMPTY
23525: ST_TO_ADDR
// for i in list do
23526: LD_ADDR_VAR 0 7
23530: PUSH
23531: LD_VAR 0 3
23535: PUSH
23536: FOR_IN
23537: IFFALSE 23739
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23539: LD_ADDR_VAR 0 9
23543: PUSH
23544: LD_VAR 0 7
23548: PPUSH
23549: LD_VAR 0 1
23553: PPUSH
23554: LD_VAR 0 2
23558: PPUSH
23559: CALL_OW 297
23563: ST_TO_ADDR
// if not result then
23564: LD_VAR 0 6
23568: NOT
23569: IFFALSE 23595
// result := [ [ i , tmp ] ] else
23571: LD_ADDR_VAR 0 6
23575: PUSH
23576: LD_VAR 0 7
23580: PUSH
23581: LD_VAR 0 9
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: EMPTY
23591: LIST
23592: ST_TO_ADDR
23593: GO 23737
// begin if result [ result ] [ 2 ] <= tmp then
23595: LD_VAR 0 6
23599: PUSH
23600: LD_VAR 0 6
23604: ARRAY
23605: PUSH
23606: LD_INT 2
23608: ARRAY
23609: PUSH
23610: LD_VAR 0 9
23614: LESSEQUAL
23615: IFFALSE 23657
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23617: LD_ADDR_VAR 0 6
23621: PUSH
23622: LD_VAR 0 6
23626: PPUSH
23627: LD_VAR 0 6
23631: PUSH
23632: LD_INT 1
23634: PLUS
23635: PPUSH
23636: LD_VAR 0 7
23640: PUSH
23641: LD_VAR 0 9
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PPUSH
23650: CALL_OW 2
23654: ST_TO_ADDR
23655: GO 23737
// for j := 1 to result do
23657: LD_ADDR_VAR 0 8
23661: PUSH
23662: DOUBLE
23663: LD_INT 1
23665: DEC
23666: ST_TO_ADDR
23667: LD_VAR 0 6
23671: PUSH
23672: FOR_TO
23673: IFFALSE 23735
// begin if tmp < result [ j ] [ 2 ] then
23675: LD_VAR 0 9
23679: PUSH
23680: LD_VAR 0 6
23684: PUSH
23685: LD_VAR 0 8
23689: ARRAY
23690: PUSH
23691: LD_INT 2
23693: ARRAY
23694: LESS
23695: IFFALSE 23733
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23697: LD_ADDR_VAR 0 6
23701: PUSH
23702: LD_VAR 0 6
23706: PPUSH
23707: LD_VAR 0 8
23711: PPUSH
23712: LD_VAR 0 7
23716: PUSH
23717: LD_VAR 0 9
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 2
23730: ST_TO_ADDR
// break ;
23731: GO 23735
// end ; end ;
23733: GO 23672
23735: POP
23736: POP
// end ; end ;
23737: GO 23536
23739: POP
23740: POP
// if result and not asc then
23741: LD_VAR 0 6
23745: IFFALSE 23754
23747: PUSH
23748: LD_VAR 0 4
23752: NOT
23753: AND
23754: IFFALSE 23829
// begin tmp := result ;
23756: LD_ADDR_VAR 0 9
23760: PUSH
23761: LD_VAR 0 6
23765: ST_TO_ADDR
// for i = tmp downto 1 do
23766: LD_ADDR_VAR 0 7
23770: PUSH
23771: DOUBLE
23772: LD_VAR 0 9
23776: INC
23777: ST_TO_ADDR
23778: LD_INT 1
23780: PUSH
23781: FOR_DOWNTO
23782: IFFALSE 23827
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23784: LD_ADDR_VAR 0 6
23788: PUSH
23789: LD_VAR 0 6
23793: PPUSH
23794: LD_VAR 0 9
23798: PUSH
23799: LD_VAR 0 7
23803: MINUS
23804: PUSH
23805: LD_INT 1
23807: PLUS
23808: PPUSH
23809: LD_VAR 0 9
23813: PUSH
23814: LD_VAR 0 7
23818: ARRAY
23819: PPUSH
23820: CALL_OW 1
23824: ST_TO_ADDR
23825: GO 23781
23827: POP
23828: POP
// end ; tmp := [ ] ;
23829: LD_ADDR_VAR 0 9
23833: PUSH
23834: EMPTY
23835: ST_TO_ADDR
// if mode then
23836: LD_VAR 0 5
23840: IFFALSE 23909
// begin for i = 1 to result do
23842: LD_ADDR_VAR 0 7
23846: PUSH
23847: DOUBLE
23848: LD_INT 1
23850: DEC
23851: ST_TO_ADDR
23852: LD_VAR 0 6
23856: PUSH
23857: FOR_TO
23858: IFFALSE 23897
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23860: LD_ADDR_VAR 0 9
23864: PUSH
23865: LD_VAR 0 9
23869: PPUSH
23870: LD_VAR 0 7
23874: PPUSH
23875: LD_VAR 0 6
23879: PUSH
23880: LD_VAR 0 7
23884: ARRAY
23885: PUSH
23886: LD_INT 1
23888: ARRAY
23889: PPUSH
23890: CALL_OW 1
23894: ST_TO_ADDR
23895: GO 23857
23897: POP
23898: POP
// result := tmp ;
23899: LD_ADDR_VAR 0 6
23903: PUSH
23904: LD_VAR 0 9
23908: ST_TO_ADDR
// end ; end ;
23909: LD_VAR 0 6
23913: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23914: LD_INT 0
23916: PPUSH
23917: PPUSH
23918: PPUSH
23919: PPUSH
23920: PPUSH
23921: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23922: LD_ADDR_VAR 0 5
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: ST_TO_ADDR
// if not x or not y then
23944: LD_VAR 0 2
23948: NOT
23949: IFTRUE 23958
23951: PUSH
23952: LD_VAR 0 3
23956: NOT
23957: OR
23958: IFFALSE 23962
// exit ;
23960: GO 25618
// if not range then
23962: LD_VAR 0 4
23966: NOT
23967: IFFALSE 23977
// range := 10 ;
23969: LD_ADDR_VAR 0 4
23973: PUSH
23974: LD_INT 10
23976: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23977: LD_ADDR_VAR 0 8
23981: PUSH
23982: LD_INT 81
23984: PUSH
23985: LD_VAR 0 1
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 92
23996: PUSH
23997: LD_VAR 0 2
24001: PUSH
24002: LD_VAR 0 3
24006: PUSH
24007: LD_VAR 0 4
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 3
24020: PUSH
24021: LD_INT 21
24023: PUSH
24024: LD_INT 3
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: PPUSH
24040: CALL_OW 69
24044: ST_TO_ADDR
// if not tmp then
24045: LD_VAR 0 8
24049: NOT
24050: IFFALSE 24054
// exit ;
24052: GO 25618
// for i in tmp do
24054: LD_ADDR_VAR 0 6
24058: PUSH
24059: LD_VAR 0 8
24063: PUSH
24064: FOR_IN
24065: IFFALSE 25593
// begin points := [ 0 , 0 , 0 ] ;
24067: LD_ADDR_VAR 0 9
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: LD_INT 0
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: ST_TO_ADDR
// bpoints := 1 ;
24086: LD_ADDR_VAR 0 10
24090: PUSH
24091: LD_INT 1
24093: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24094: LD_VAR 0 6
24098: PPUSH
24099: CALL_OW 247
24103: PUSH
24104: LD_INT 1
24106: DOUBLE
24107: EQUAL
24108: IFTRUE 24112
24110: GO 24694
24112: POP
// begin if GetClass ( i ) = 1 then
24113: LD_VAR 0 6
24117: PPUSH
24118: CALL_OW 257
24122: PUSH
24123: LD_INT 1
24125: EQUAL
24126: IFFALSE 24147
// points := [ 10 , 5 , 3 ] ;
24128: LD_ADDR_VAR 0 9
24132: PUSH
24133: LD_INT 10
24135: PUSH
24136: LD_INT 5
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24147: LD_VAR 0 6
24151: PPUSH
24152: CALL_OW 257
24156: PUSH
24157: LD_INT 2
24159: PUSH
24160: LD_INT 3
24162: PUSH
24163: LD_INT 4
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: IN
24171: IFFALSE 24192
// points := [ 3 , 2 , 1 ] ;
24173: LD_ADDR_VAR 0 9
24177: PUSH
24178: LD_INT 3
24180: PUSH
24181: LD_INT 2
24183: PUSH
24184: LD_INT 1
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24192: LD_VAR 0 6
24196: PPUSH
24197: CALL_OW 257
24201: PUSH
24202: LD_INT 5
24204: EQUAL
24205: IFFALSE 24226
// points := [ 130 , 5 , 2 ] ;
24207: LD_ADDR_VAR 0 9
24211: PUSH
24212: LD_INT 130
24214: PUSH
24215: LD_INT 5
24217: PUSH
24218: LD_INT 2
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: LIST
24225: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24226: LD_VAR 0 6
24230: PPUSH
24231: CALL_OW 257
24235: PUSH
24236: LD_INT 8
24238: EQUAL
24239: IFFALSE 24260
// points := [ 35 , 35 , 30 ] ;
24241: LD_ADDR_VAR 0 9
24245: PUSH
24246: LD_INT 35
24248: PUSH
24249: LD_INT 35
24251: PUSH
24252: LD_INT 30
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24260: LD_VAR 0 6
24264: PPUSH
24265: CALL_OW 257
24269: PUSH
24270: LD_INT 9
24272: EQUAL
24273: IFFALSE 24294
// points := [ 20 , 55 , 40 ] ;
24275: LD_ADDR_VAR 0 9
24279: PUSH
24280: LD_INT 20
24282: PUSH
24283: LD_INT 55
24285: PUSH
24286: LD_INT 40
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24294: LD_VAR 0 6
24298: PPUSH
24299: CALL_OW 257
24303: PUSH
24304: LD_INT 12
24306: PUSH
24307: LD_INT 16
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: IN
24314: IFFALSE 24335
// points := [ 5 , 3 , 2 ] ;
24316: LD_ADDR_VAR 0 9
24320: PUSH
24321: LD_INT 5
24323: PUSH
24324: LD_INT 3
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24335: LD_VAR 0 6
24339: PPUSH
24340: CALL_OW 257
24344: PUSH
24345: LD_INT 17
24347: EQUAL
24348: IFFALSE 24369
// points := [ 100 , 50 , 75 ] ;
24350: LD_ADDR_VAR 0 9
24354: PUSH
24355: LD_INT 100
24357: PUSH
24358: LD_INT 50
24360: PUSH
24361: LD_INT 75
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24369: LD_VAR 0 6
24373: PPUSH
24374: CALL_OW 257
24378: PUSH
24379: LD_INT 15
24381: EQUAL
24382: IFFALSE 24403
// points := [ 10 , 5 , 3 ] ;
24384: LD_ADDR_VAR 0 9
24388: PUSH
24389: LD_INT 10
24391: PUSH
24392: LD_INT 5
24394: PUSH
24395: LD_INT 3
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24403: LD_VAR 0 6
24407: PPUSH
24408: CALL_OW 257
24412: PUSH
24413: LD_INT 14
24415: EQUAL
24416: IFFALSE 24437
// points := [ 10 , 0 , 0 ] ;
24418: LD_ADDR_VAR 0 9
24422: PUSH
24423: LD_INT 10
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: LIST
24436: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24437: LD_VAR 0 6
24441: PPUSH
24442: CALL_OW 257
24446: PUSH
24447: LD_INT 11
24449: EQUAL
24450: IFFALSE 24471
// points := [ 30 , 10 , 5 ] ;
24452: LD_ADDR_VAR 0 9
24456: PUSH
24457: LD_INT 30
24459: PUSH
24460: LD_INT 10
24462: PUSH
24463: LD_INT 5
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: LIST
24470: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24471: LD_VAR 0 1
24475: PPUSH
24476: LD_INT 5
24478: PPUSH
24479: CALL_OW 321
24483: PUSH
24484: LD_INT 2
24486: EQUAL
24487: IFFALSE 24504
// bpoints := bpoints * 1.8 ;
24489: LD_ADDR_VAR 0 10
24493: PUSH
24494: LD_VAR 0 10
24498: PUSH
24499: LD_REAL  1.80000000000000E+0000
24502: MUL
24503: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24504: LD_VAR 0 6
24508: PPUSH
24509: CALL_OW 257
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 3
24522: PUSH
24523: LD_INT 4
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: IN
24532: IFFALSE 24552
24534: PUSH
24535: LD_VAR 0 1
24539: PPUSH
24540: LD_INT 51
24542: PPUSH
24543: CALL_OW 321
24547: PUSH
24548: LD_INT 2
24550: EQUAL
24551: AND
24552: IFFALSE 24569
// bpoints := bpoints * 1.2 ;
24554: LD_ADDR_VAR 0 10
24558: PUSH
24559: LD_VAR 0 10
24563: PUSH
24564: LD_REAL  1.20000000000000E+0000
24567: MUL
24568: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24569: LD_VAR 0 6
24573: PPUSH
24574: CALL_OW 257
24578: PUSH
24579: LD_INT 5
24581: PUSH
24582: LD_INT 7
24584: PUSH
24585: LD_INT 9
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: LIST
24592: IN
24593: IFFALSE 24613
24595: PUSH
24596: LD_VAR 0 1
24600: PPUSH
24601: LD_INT 52
24603: PPUSH
24604: CALL_OW 321
24608: PUSH
24609: LD_INT 2
24611: EQUAL
24612: AND
24613: IFFALSE 24630
// bpoints := bpoints * 1.5 ;
24615: LD_ADDR_VAR 0 10
24619: PUSH
24620: LD_VAR 0 10
24624: PUSH
24625: LD_REAL  1.50000000000000E+0000
24628: MUL
24629: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24630: LD_VAR 0 1
24634: PPUSH
24635: LD_INT 66
24637: PPUSH
24638: CALL_OW 321
24642: PUSH
24643: LD_INT 2
24645: EQUAL
24646: IFFALSE 24663
// bpoints := bpoints * 1.1 ;
24648: LD_ADDR_VAR 0 10
24652: PUSH
24653: LD_VAR 0 10
24657: PUSH
24658: LD_REAL  1.10000000000000E+0000
24661: MUL
24662: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24663: LD_ADDR_VAR 0 10
24667: PUSH
24668: LD_VAR 0 10
24672: PUSH
24673: LD_VAR 0 6
24677: PPUSH
24678: LD_INT 1
24680: PPUSH
24681: CALL_OW 259
24685: PUSH
24686: LD_REAL  1.15000000000000E+0000
24689: MUL
24690: MUL
24691: ST_TO_ADDR
// end ; unit_vehicle :
24692: GO 25522
24694: LD_INT 2
24696: DOUBLE
24697: EQUAL
24698: IFTRUE 24702
24700: GO 25510
24702: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24703: LD_VAR 0 6
24707: PPUSH
24708: CALL_OW 264
24712: PUSH
24713: LD_INT 2
24715: PUSH
24716: LD_INT 42
24718: PUSH
24719: LD_INT 24
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: LIST
24726: IN
24727: IFFALSE 24748
// points := [ 25 , 5 , 3 ] ;
24729: LD_ADDR_VAR 0 9
24733: PUSH
24734: LD_INT 25
24736: PUSH
24737: LD_INT 5
24739: PUSH
24740: LD_INT 3
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24748: LD_VAR 0 6
24752: PPUSH
24753: CALL_OW 264
24757: PUSH
24758: LD_INT 4
24760: PUSH
24761: LD_INT 43
24763: PUSH
24764: LD_INT 25
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: IN
24772: IFFALSE 24793
// points := [ 40 , 15 , 5 ] ;
24774: LD_ADDR_VAR 0 9
24778: PUSH
24779: LD_INT 40
24781: PUSH
24782: LD_INT 15
24784: PUSH
24785: LD_INT 5
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: LIST
24792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24793: LD_VAR 0 6
24797: PPUSH
24798: CALL_OW 264
24802: PUSH
24803: LD_INT 3
24805: PUSH
24806: LD_INT 23
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: IN
24813: IFFALSE 24834
// points := [ 7 , 25 , 8 ] ;
24815: LD_ADDR_VAR 0 9
24819: PUSH
24820: LD_INT 7
24822: PUSH
24823: LD_INT 25
24825: PUSH
24826: LD_INT 8
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24834: LD_VAR 0 6
24838: PPUSH
24839: CALL_OW 264
24843: PUSH
24844: LD_INT 5
24846: PUSH
24847: LD_INT 27
24849: PUSH
24850: LD_INT 44
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: IN
24858: IFFALSE 24879
// points := [ 14 , 50 , 16 ] ;
24860: LD_ADDR_VAR 0 9
24864: PUSH
24865: LD_INT 14
24867: PUSH
24868: LD_INT 50
24870: PUSH
24871: LD_INT 16
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: LIST
24878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24879: LD_VAR 0 6
24883: PPUSH
24884: CALL_OW 264
24888: PUSH
24889: LD_INT 6
24891: PUSH
24892: LD_INT 46
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: IN
24899: IFFALSE 24920
// points := [ 32 , 120 , 70 ] ;
24901: LD_ADDR_VAR 0 9
24905: PUSH
24906: LD_INT 32
24908: PUSH
24909: LD_INT 120
24911: PUSH
24912: LD_INT 70
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24920: LD_VAR 0 6
24924: PPUSH
24925: CALL_OW 264
24929: PUSH
24930: LD_INT 7
24932: PUSH
24933: LD_INT 28
24935: PUSH
24936: LD_INT 45
24938: PUSH
24939: LD_INT 92
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: IN
24948: IFFALSE 24969
// points := [ 35 , 20 , 45 ] ;
24950: LD_ADDR_VAR 0 9
24954: PUSH
24955: LD_INT 35
24957: PUSH
24958: LD_INT 20
24960: PUSH
24961: LD_INT 45
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24969: LD_VAR 0 6
24973: PPUSH
24974: CALL_OW 264
24978: PUSH
24979: LD_INT 47
24981: PUSH
24982: EMPTY
24983: LIST
24984: IN
24985: IFFALSE 25006
// points := [ 67 , 45 , 75 ] ;
24987: LD_ADDR_VAR 0 9
24991: PUSH
24992: LD_INT 67
24994: PUSH
24995: LD_INT 45
24997: PUSH
24998: LD_INT 75
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: LIST
25005: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
25006: LD_VAR 0 6
25010: PPUSH
25011: CALL_OW 264
25015: PUSH
25016: LD_INT 26
25018: PUSH
25019: EMPTY
25020: LIST
25021: IN
25022: IFFALSE 25043
// points := [ 120 , 30 , 80 ] ;
25024: LD_ADDR_VAR 0 9
25028: PUSH
25029: LD_INT 120
25031: PUSH
25032: LD_INT 30
25034: PUSH
25035: LD_INT 80
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: LIST
25042: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
25043: LD_VAR 0 6
25047: PPUSH
25048: CALL_OW 264
25052: PUSH
25053: LD_INT 22
25055: PUSH
25056: EMPTY
25057: LIST
25058: IN
25059: IFFALSE 25080
// points := [ 40 , 1 , 1 ] ;
25061: LD_ADDR_VAR 0 9
25065: PUSH
25066: LD_INT 40
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25080: LD_VAR 0 6
25084: PPUSH
25085: CALL_OW 264
25089: PUSH
25090: LD_INT 29
25092: PUSH
25093: EMPTY
25094: LIST
25095: IN
25096: IFFALSE 25117
// points := [ 70 , 200 , 400 ] ;
25098: LD_ADDR_VAR 0 9
25102: PUSH
25103: LD_INT 70
25105: PUSH
25106: LD_INT 200
25108: PUSH
25109: LD_INT 400
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: LIST
25116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25117: LD_VAR 0 6
25121: PPUSH
25122: CALL_OW 264
25126: PUSH
25127: LD_INT 14
25129: PUSH
25130: LD_INT 53
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: IN
25137: IFFALSE 25158
// points := [ 40 , 10 , 20 ] ;
25139: LD_ADDR_VAR 0 9
25143: PUSH
25144: LD_INT 40
25146: PUSH
25147: LD_INT 10
25149: PUSH
25150: LD_INT 20
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: LIST
25157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25158: LD_VAR 0 6
25162: PPUSH
25163: CALL_OW 264
25167: PUSH
25168: LD_INT 9
25170: PUSH
25171: EMPTY
25172: LIST
25173: IN
25174: IFFALSE 25195
// points := [ 5 , 70 , 20 ] ;
25176: LD_ADDR_VAR 0 9
25180: PUSH
25181: LD_INT 5
25183: PUSH
25184: LD_INT 70
25186: PUSH
25187: LD_INT 20
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: LIST
25194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25195: LD_VAR 0 6
25199: PPUSH
25200: CALL_OW 264
25204: PUSH
25205: LD_INT 10
25207: PUSH
25208: EMPTY
25209: LIST
25210: IN
25211: IFFALSE 25232
// points := [ 35 , 110 , 70 ] ;
25213: LD_ADDR_VAR 0 9
25217: PUSH
25218: LD_INT 35
25220: PUSH
25221: LD_INT 110
25223: PUSH
25224: LD_INT 70
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: LIST
25231: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25232: LD_VAR 0 6
25236: PPUSH
25237: CALL_OW 265
25241: PUSH
25242: LD_INT 25
25244: EQUAL
25245: IFFALSE 25266
// points := [ 80 , 65 , 100 ] ;
25247: LD_ADDR_VAR 0 9
25251: PUSH
25252: LD_INT 80
25254: PUSH
25255: LD_INT 65
25257: PUSH
25258: LD_INT 100
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25266: LD_VAR 0 6
25270: PPUSH
25271: CALL_OW 263
25275: PUSH
25276: LD_INT 1
25278: EQUAL
25279: IFFALSE 25314
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25281: LD_ADDR_VAR 0 10
25285: PUSH
25286: LD_VAR 0 10
25290: PUSH
25291: LD_VAR 0 6
25295: PPUSH
25296: CALL_OW 311
25300: PPUSH
25301: LD_INT 3
25303: PPUSH
25304: CALL_OW 259
25308: PUSH
25309: LD_INT 4
25311: MUL
25312: MUL
25313: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25314: LD_VAR 0 6
25318: PPUSH
25319: CALL_OW 263
25323: PUSH
25324: LD_INT 2
25326: EQUAL
25327: IFFALSE 25378
// begin j := IsControledBy ( i ) ;
25329: LD_ADDR_VAR 0 7
25333: PUSH
25334: LD_VAR 0 6
25338: PPUSH
25339: CALL_OW 312
25343: ST_TO_ADDR
// if j then
25344: LD_VAR 0 7
25348: IFFALSE 25378
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25350: LD_ADDR_VAR 0 10
25354: PUSH
25355: LD_VAR 0 10
25359: PUSH
25360: LD_VAR 0 7
25364: PPUSH
25365: LD_INT 3
25367: PPUSH
25368: CALL_OW 259
25372: PUSH
25373: LD_INT 3
25375: MUL
25376: MUL
25377: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25378: LD_VAR 0 6
25382: PPUSH
25383: CALL_OW 264
25387: PUSH
25388: LD_INT 5
25390: PUSH
25391: LD_INT 6
25393: PUSH
25394: LD_INT 46
25396: PUSH
25397: LD_INT 44
25399: PUSH
25400: LD_INT 47
25402: PUSH
25403: LD_INT 45
25405: PUSH
25406: LD_INT 28
25408: PUSH
25409: LD_INT 7
25411: PUSH
25412: LD_INT 27
25414: PUSH
25415: LD_INT 29
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: IN
25430: IFFALSE 25450
25432: PUSH
25433: LD_VAR 0 1
25437: PPUSH
25438: LD_INT 52
25440: PPUSH
25441: CALL_OW 321
25445: PUSH
25446: LD_INT 2
25448: EQUAL
25449: AND
25450: IFFALSE 25467
// bpoints := bpoints * 1.2 ;
25452: LD_ADDR_VAR 0 10
25456: PUSH
25457: LD_VAR 0 10
25461: PUSH
25462: LD_REAL  1.20000000000000E+0000
25465: MUL
25466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25467: LD_VAR 0 6
25471: PPUSH
25472: CALL_OW 264
25476: PUSH
25477: LD_INT 6
25479: PUSH
25480: LD_INT 46
25482: PUSH
25483: LD_INT 47
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: IN
25491: IFFALSE 25508
// bpoints := bpoints * 1.2 ;
25493: LD_ADDR_VAR 0 10
25497: PUSH
25498: LD_VAR 0 10
25502: PUSH
25503: LD_REAL  1.20000000000000E+0000
25506: MUL
25507: ST_TO_ADDR
// end ; unit_building :
25508: GO 25522
25510: LD_INT 3
25512: DOUBLE
25513: EQUAL
25514: IFTRUE 25518
25516: GO 25521
25518: POP
// ; end ;
25519: GO 25522
25521: POP
// for j = 1 to 3 do
25522: LD_ADDR_VAR 0 7
25526: PUSH
25527: DOUBLE
25528: LD_INT 1
25530: DEC
25531: ST_TO_ADDR
25532: LD_INT 3
25534: PUSH
25535: FOR_TO
25536: IFFALSE 25589
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25538: LD_ADDR_VAR 0 5
25542: PUSH
25543: LD_VAR 0 5
25547: PPUSH
25548: LD_VAR 0 7
25552: PPUSH
25553: LD_VAR 0 5
25557: PUSH
25558: LD_VAR 0 7
25562: ARRAY
25563: PUSH
25564: LD_VAR 0 9
25568: PUSH
25569: LD_VAR 0 7
25573: ARRAY
25574: PUSH
25575: LD_VAR 0 10
25579: MUL
25580: PLUS
25581: PPUSH
25582: CALL_OW 1
25586: ST_TO_ADDR
25587: GO 25535
25589: POP
25590: POP
// end ;
25591: GO 24064
25593: POP
25594: POP
// result := Replace ( result , 4 , tmp ) ;
25595: LD_ADDR_VAR 0 5
25599: PUSH
25600: LD_VAR 0 5
25604: PPUSH
25605: LD_INT 4
25607: PPUSH
25608: LD_VAR 0 8
25612: PPUSH
25613: CALL_OW 1
25617: ST_TO_ADDR
// end ;
25618: LD_VAR 0 5
25622: RET
// export function DangerAtRange ( unit , range ) ; begin
25623: LD_INT 0
25625: PPUSH
// if not unit then
25626: LD_VAR 0 1
25630: NOT
25631: IFFALSE 25635
// exit ;
25633: GO 25680
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25635: LD_ADDR_VAR 0 3
25639: PUSH
25640: LD_VAR 0 1
25644: PPUSH
25645: CALL_OW 255
25649: PPUSH
25650: LD_VAR 0 1
25654: PPUSH
25655: CALL_OW 250
25659: PPUSH
25660: LD_VAR 0 1
25664: PPUSH
25665: CALL_OW 251
25669: PPUSH
25670: LD_VAR 0 2
25674: PPUSH
25675: CALL 23914 0 4
25679: ST_TO_ADDR
// end ;
25680: LD_VAR 0 3
25684: RET
// export function DangerInArea ( side , area ) ; begin
25685: LD_INT 0
25687: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25688: LD_ADDR_VAR 0 3
25692: PUSH
25693: LD_VAR 0 2
25697: PPUSH
25698: LD_INT 81
25700: PUSH
25701: LD_VAR 0 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PPUSH
25710: CALL_OW 70
25714: ST_TO_ADDR
// end ;
25715: LD_VAR 0 3
25719: RET
// export function IsExtension ( b ) ; begin
25720: LD_INT 0
25722: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25723: LD_ADDR_VAR 0 2
25727: PUSH
25728: LD_VAR 0 1
25732: PUSH
25733: LD_INT 23
25735: PUSH
25736: LD_INT 20
25738: PUSH
25739: LD_INT 22
25741: PUSH
25742: LD_INT 17
25744: PUSH
25745: LD_INT 24
25747: PUSH
25748: LD_INT 21
25750: PUSH
25751: LD_INT 19
25753: PUSH
25754: LD_INT 16
25756: PUSH
25757: LD_INT 25
25759: PUSH
25760: LD_INT 18
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: IN
25775: ST_TO_ADDR
// end ;
25776: LD_VAR 0 2
25780: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25781: LD_INT 0
25783: PPUSH
25784: PPUSH
25785: PPUSH
// result := [ ] ;
25786: LD_ADDR_VAR 0 4
25790: PUSH
25791: EMPTY
25792: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25793: LD_ADDR_VAR 0 5
25797: PUSH
25798: LD_VAR 0 2
25802: PPUSH
25803: LD_INT 21
25805: PUSH
25806: LD_INT 3
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PPUSH
25813: CALL_OW 70
25817: ST_TO_ADDR
// if not tmp then
25818: LD_VAR 0 5
25822: NOT
25823: IFFALSE 25827
// exit ;
25825: GO 25891
// if checkLink then
25827: LD_VAR 0 3
25831: IFFALSE 25881
// begin for i in tmp do
25833: LD_ADDR_VAR 0 6
25837: PUSH
25838: LD_VAR 0 5
25842: PUSH
25843: FOR_IN
25844: IFFALSE 25879
// if GetBase ( i ) <> base then
25846: LD_VAR 0 6
25850: PPUSH
25851: CALL_OW 274
25855: PUSH
25856: LD_VAR 0 1
25860: NONEQUAL
25861: IFFALSE 25877
// ComLinkToBase ( base , i ) ;
25863: LD_VAR 0 1
25867: PPUSH
25868: LD_VAR 0 6
25872: PPUSH
25873: CALL_OW 169
25877: GO 25843
25879: POP
25880: POP
// end ; result := tmp ;
25881: LD_ADDR_VAR 0 4
25885: PUSH
25886: LD_VAR 0 5
25890: ST_TO_ADDR
// end ;
25891: LD_VAR 0 4
25895: RET
// export function ComComplete ( units , b ) ; var i ; begin
25896: LD_INT 0
25898: PPUSH
25899: PPUSH
// if not units then
25900: LD_VAR 0 1
25904: NOT
25905: IFFALSE 25909
// exit ;
25907: GO 25999
// for i in units do
25909: LD_ADDR_VAR 0 4
25913: PUSH
25914: LD_VAR 0 1
25918: PUSH
25919: FOR_IN
25920: IFFALSE 25997
// if BuildingStatus ( b ) = bs_build then
25922: LD_VAR 0 2
25926: PPUSH
25927: CALL_OW 461
25931: PUSH
25932: LD_INT 1
25934: EQUAL
25935: IFFALSE 25995
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25937: LD_VAR 0 4
25941: PPUSH
25942: LD_STRING h
25944: PUSH
25945: LD_VAR 0 2
25949: PPUSH
25950: CALL_OW 250
25954: PUSH
25955: LD_VAR 0 2
25959: PPUSH
25960: CALL_OW 251
25964: PUSH
25965: LD_VAR 0 2
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: PPUSH
25991: CALL_OW 446
25995: GO 25919
25997: POP
25998: POP
// end ;
25999: LD_VAR 0 3
26003: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
26004: LD_INT 0
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
26010: PPUSH
26011: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
26012: LD_VAR 0 1
26016: NOT
26017: IFTRUE 26034
26019: PUSH
26020: LD_VAR 0 1
26024: PPUSH
26025: CALL_OW 263
26029: PUSH
26030: LD_INT 2
26032: NONEQUAL
26033: OR
26034: IFFALSE 26038
// exit ;
26036: GO 26354
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
26038: LD_ADDR_VAR 0 6
26042: PUSH
26043: LD_INT 22
26045: PUSH
26046: LD_VAR 0 1
26050: PPUSH
26051: CALL_OW 255
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: LD_INT 30
26065: PUSH
26066: LD_INT 36
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 34
26075: PUSH
26076: LD_INT 31
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PPUSH
26092: CALL_OW 69
26096: ST_TO_ADDR
// if not tmp then
26097: LD_VAR 0 6
26101: NOT
26102: IFFALSE 26106
// exit ;
26104: GO 26354
// result := [ ] ;
26106: LD_ADDR_VAR 0 2
26110: PUSH
26111: EMPTY
26112: ST_TO_ADDR
// for i in tmp do
26113: LD_ADDR_VAR 0 3
26117: PUSH
26118: LD_VAR 0 6
26122: PUSH
26123: FOR_IN
26124: IFFALSE 26195
// begin t := UnitsInside ( i ) ;
26126: LD_ADDR_VAR 0 4
26130: PUSH
26131: LD_VAR 0 3
26135: PPUSH
26136: CALL_OW 313
26140: ST_TO_ADDR
// if t then
26141: LD_VAR 0 4
26145: IFFALSE 26193
// for j in t do
26147: LD_ADDR_VAR 0 7
26151: PUSH
26152: LD_VAR 0 4
26156: PUSH
26157: FOR_IN
26158: IFFALSE 26191
// result := Replace ( result , result + 1 , j ) ;
26160: LD_ADDR_VAR 0 2
26164: PUSH
26165: LD_VAR 0 2
26169: PPUSH
26170: LD_VAR 0 2
26174: PUSH
26175: LD_INT 1
26177: PLUS
26178: PPUSH
26179: LD_VAR 0 7
26183: PPUSH
26184: CALL_OW 1
26188: ST_TO_ADDR
26189: GO 26157
26191: POP
26192: POP
// end ;
26193: GO 26123
26195: POP
26196: POP
// if not result then
26197: LD_VAR 0 2
26201: NOT
26202: IFFALSE 26206
// exit ;
26204: GO 26354
// mech := result [ 1 ] ;
26206: LD_ADDR_VAR 0 5
26210: PUSH
26211: LD_VAR 0 2
26215: PUSH
26216: LD_INT 1
26218: ARRAY
26219: ST_TO_ADDR
// if result > 1 then
26220: LD_VAR 0 2
26224: PUSH
26225: LD_INT 1
26227: GREATER
26228: IFFALSE 26340
// begin for i = 2 to result do
26230: LD_ADDR_VAR 0 3
26234: PUSH
26235: DOUBLE
26236: LD_INT 2
26238: DEC
26239: ST_TO_ADDR
26240: LD_VAR 0 2
26244: PUSH
26245: FOR_TO
26246: IFFALSE 26338
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26248: LD_ADDR_VAR 0 4
26252: PUSH
26253: LD_VAR 0 2
26257: PUSH
26258: LD_VAR 0 3
26262: ARRAY
26263: PPUSH
26264: LD_INT 3
26266: PPUSH
26267: CALL_OW 259
26271: PUSH
26272: LD_VAR 0 2
26276: PUSH
26277: LD_VAR 0 3
26281: ARRAY
26282: PPUSH
26283: CALL_OW 432
26287: MINUS
26288: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26289: LD_VAR 0 4
26293: PUSH
26294: LD_VAR 0 5
26298: PPUSH
26299: LD_INT 3
26301: PPUSH
26302: CALL_OW 259
26306: PUSH
26307: LD_VAR 0 5
26311: PPUSH
26312: CALL_OW 432
26316: MINUS
26317: GREATEREQUAL
26318: IFFALSE 26336
// mech := result [ i ] ;
26320: LD_ADDR_VAR 0 5
26324: PUSH
26325: LD_VAR 0 2
26329: PUSH
26330: LD_VAR 0 3
26334: ARRAY
26335: ST_TO_ADDR
// end ;
26336: GO 26245
26338: POP
26339: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26340: LD_VAR 0 1
26344: PPUSH
26345: LD_VAR 0 5
26349: PPUSH
26350: CALL_OW 135
// end ;
26354: LD_VAR 0 2
26358: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26359: LD_INT 0
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
26365: PPUSH
26366: PPUSH
26367: PPUSH
26368: PPUSH
26369: PPUSH
26370: PPUSH
26371: PPUSH
26372: PPUSH
26373: PPUSH
// result := [ ] ;
26374: LD_ADDR_VAR 0 7
26378: PUSH
26379: EMPTY
26380: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26381: LD_VAR 0 1
26385: PPUSH
26386: CALL_OW 266
26390: PUSH
26391: LD_INT 0
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: IN
26401: NOT
26402: IFFALSE 26406
// exit ;
26404: GO 28046
// if name then
26406: LD_VAR 0 3
26410: IFFALSE 26426
// SetBName ( base_dep , name ) ;
26412: LD_VAR 0 1
26416: PPUSH
26417: LD_VAR 0 3
26421: PPUSH
26422: CALL_OW 500
// base := GetBase ( base_dep ) ;
26426: LD_ADDR_VAR 0 15
26430: PUSH
26431: LD_VAR 0 1
26435: PPUSH
26436: CALL_OW 274
26440: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26441: LD_ADDR_VAR 0 16
26445: PUSH
26446: LD_VAR 0 1
26450: PPUSH
26451: CALL_OW 255
26455: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26456: LD_ADDR_VAR 0 17
26460: PUSH
26461: LD_VAR 0 1
26465: PPUSH
26466: CALL_OW 248
26470: ST_TO_ADDR
// if sources then
26471: LD_VAR 0 5
26475: IFFALSE 26522
// for i = 1 to 3 do
26477: LD_ADDR_VAR 0 8
26481: PUSH
26482: DOUBLE
26483: LD_INT 1
26485: DEC
26486: ST_TO_ADDR
26487: LD_INT 3
26489: PUSH
26490: FOR_TO
26491: IFFALSE 26520
// AddResourceType ( base , i , sources [ i ] ) ;
26493: LD_VAR 0 15
26497: PPUSH
26498: LD_VAR 0 8
26502: PPUSH
26503: LD_VAR 0 5
26507: PUSH
26508: LD_VAR 0 8
26512: ARRAY
26513: PPUSH
26514: CALL_OW 276
26518: GO 26490
26520: POP
26521: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26522: LD_ADDR_VAR 0 18
26526: PUSH
26527: LD_VAR 0 15
26531: PPUSH
26532: LD_VAR 0 2
26536: PPUSH
26537: LD_INT 1
26539: PPUSH
26540: CALL 25781 0 3
26544: ST_TO_ADDR
// InitHc ;
26545: CALL_OW 19
// InitUc ;
26549: CALL_OW 18
// uc_side := side ;
26553: LD_ADDR_OWVAR 20
26557: PUSH
26558: LD_VAR 0 16
26562: ST_TO_ADDR
// uc_nation := nation ;
26563: LD_ADDR_OWVAR 21
26567: PUSH
26568: LD_VAR 0 17
26572: ST_TO_ADDR
// if buildings then
26573: LD_VAR 0 18
26577: IFFALSE 27905
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26579: LD_ADDR_VAR 0 19
26583: PUSH
26584: LD_VAR 0 18
26588: PPUSH
26589: LD_INT 2
26591: PUSH
26592: LD_INT 30
26594: PUSH
26595: LD_INT 29
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 30
26604: PUSH
26605: LD_INT 30
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: LIST
26616: PPUSH
26617: CALL_OW 72
26621: ST_TO_ADDR
// if tmp then
26622: LD_VAR 0 19
26626: IFFALSE 26674
// for i in tmp do
26628: LD_ADDR_VAR 0 8
26632: PUSH
26633: LD_VAR 0 19
26637: PUSH
26638: FOR_IN
26639: IFFALSE 26672
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26641: LD_VAR 0 8
26645: PPUSH
26646: CALL_OW 250
26650: PPUSH
26651: LD_VAR 0 8
26655: PPUSH
26656: CALL_OW 251
26660: PPUSH
26661: LD_VAR 0 16
26665: PPUSH
26666: CALL_OW 441
26670: GO 26638
26672: POP
26673: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26674: LD_VAR 0 18
26678: PPUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 30
26684: PUSH
26685: LD_INT 32
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 30
26694: PUSH
26695: LD_INT 33
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: PPUSH
26707: CALL_OW 72
26711: IFFALSE 26799
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26713: LD_ADDR_VAR 0 8
26717: PUSH
26718: LD_VAR 0 18
26722: PPUSH
26723: LD_INT 2
26725: PUSH
26726: LD_INT 30
26728: PUSH
26729: LD_INT 32
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 30
26738: PUSH
26739: LD_INT 33
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: LIST
26750: PPUSH
26751: CALL_OW 72
26755: PUSH
26756: FOR_IN
26757: IFFALSE 26797
// begin if not GetBWeapon ( i ) then
26759: LD_VAR 0 8
26763: PPUSH
26764: CALL_OW 269
26768: NOT
26769: IFFALSE 26795
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26771: LD_VAR 0 8
26775: PPUSH
26776: LD_VAR 0 8
26780: PPUSH
26781: LD_VAR 0 2
26785: PPUSH
26786: CALL 28051 0 2
26790: PPUSH
26791: CALL_OW 431
// end ;
26795: GO 26756
26797: POP
26798: POP
// end ; for i = 1 to personel do
26799: LD_ADDR_VAR 0 8
26803: PUSH
26804: DOUBLE
26805: LD_INT 1
26807: DEC
26808: ST_TO_ADDR
26809: LD_VAR 0 6
26813: PUSH
26814: FOR_TO
26815: IFFALSE 27885
// begin if i > 4 then
26817: LD_VAR 0 8
26821: PUSH
26822: LD_INT 4
26824: GREATER
26825: IFFALSE 26829
// break ;
26827: GO 27885
// case i of 1 :
26829: LD_VAR 0 8
26833: PUSH
26834: LD_INT 1
26836: DOUBLE
26837: EQUAL
26838: IFTRUE 26842
26840: GO 26922
26842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26843: LD_ADDR_VAR 0 12
26847: PUSH
26848: LD_VAR 0 18
26852: PPUSH
26853: LD_INT 22
26855: PUSH
26856: LD_VAR 0 16
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 58
26867: PUSH
26868: EMPTY
26869: LIST
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: LD_INT 30
26876: PUSH
26877: LD_INT 32
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 30
26886: PUSH
26887: LD_INT 4
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 30
26896: PUSH
26897: LD_INT 5
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: PPUSH
26915: CALL_OW 72
26919: ST_TO_ADDR
26920: GO 27144
26922: LD_INT 2
26924: DOUBLE
26925: EQUAL
26926: IFTRUE 26930
26928: GO 26992
26930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26931: LD_ADDR_VAR 0 12
26935: PUSH
26936: LD_VAR 0 18
26940: PPUSH
26941: LD_INT 22
26943: PUSH
26944: LD_VAR 0 16
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: LD_INT 30
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 30
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PPUSH
26985: CALL_OW 72
26989: ST_TO_ADDR
26990: GO 27144
26992: LD_INT 3
26994: DOUBLE
26995: EQUAL
26996: IFTRUE 27000
26998: GO 27062
27000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
27001: LD_ADDR_VAR 0 12
27005: PUSH
27006: LD_VAR 0 18
27010: PPUSH
27011: LD_INT 22
27013: PUSH
27014: LD_VAR 0 16
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 30
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 30
27038: PUSH
27039: LD_INT 3
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: LIST
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PPUSH
27055: CALL_OW 72
27059: ST_TO_ADDR
27060: GO 27144
27062: LD_INT 4
27064: DOUBLE
27065: EQUAL
27066: IFTRUE 27070
27068: GO 27143
27070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
27071: LD_ADDR_VAR 0 12
27075: PUSH
27076: LD_VAR 0 18
27080: PPUSH
27081: LD_INT 22
27083: PUSH
27084: LD_VAR 0 16
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: LD_INT 30
27098: PUSH
27099: LD_INT 6
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 30
27108: PUSH
27109: LD_INT 7
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 30
27118: PUSH
27119: LD_INT 8
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PPUSH
27136: CALL_OW 72
27140: ST_TO_ADDR
27141: GO 27144
27143: POP
// if i = 1 then
27144: LD_VAR 0 8
27148: PUSH
27149: LD_INT 1
27151: EQUAL
27152: IFFALSE 27263
// begin tmp := [ ] ;
27154: LD_ADDR_VAR 0 19
27158: PUSH
27159: EMPTY
27160: ST_TO_ADDR
// for j in f do
27161: LD_ADDR_VAR 0 9
27165: PUSH
27166: LD_VAR 0 12
27170: PUSH
27171: FOR_IN
27172: IFFALSE 27245
// if GetBType ( j ) = b_bunker then
27174: LD_VAR 0 9
27178: PPUSH
27179: CALL_OW 266
27183: PUSH
27184: LD_INT 32
27186: EQUAL
27187: IFFALSE 27214
// tmp := Insert ( tmp , 1 , j ) else
27189: LD_ADDR_VAR 0 19
27193: PUSH
27194: LD_VAR 0 19
27198: PPUSH
27199: LD_INT 1
27201: PPUSH
27202: LD_VAR 0 9
27206: PPUSH
27207: CALL_OW 2
27211: ST_TO_ADDR
27212: GO 27243
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27214: LD_ADDR_VAR 0 19
27218: PUSH
27219: LD_VAR 0 19
27223: PPUSH
27224: LD_VAR 0 19
27228: PUSH
27229: LD_INT 1
27231: PLUS
27232: PPUSH
27233: LD_VAR 0 9
27237: PPUSH
27238: CALL_OW 2
27242: ST_TO_ADDR
27243: GO 27171
27245: POP
27246: POP
// if tmp then
27247: LD_VAR 0 19
27251: IFFALSE 27263
// f := tmp ;
27253: LD_ADDR_VAR 0 12
27257: PUSH
27258: LD_VAR 0 19
27262: ST_TO_ADDR
// end ; x := personel [ i ] ;
27263: LD_ADDR_VAR 0 13
27267: PUSH
27268: LD_VAR 0 6
27272: PUSH
27273: LD_VAR 0 8
27277: ARRAY
27278: ST_TO_ADDR
// if x = - 1 then
27279: LD_VAR 0 13
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: EQUAL
27288: IFFALSE 27499
// begin for j in f do
27290: LD_ADDR_VAR 0 9
27294: PUSH
27295: LD_VAR 0 12
27299: PUSH
27300: FOR_IN
27301: IFFALSE 27495
// repeat InitHc ;
27303: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27307: LD_VAR 0 9
27311: PPUSH
27312: CALL_OW 266
27316: PUSH
27317: LD_INT 5
27319: EQUAL
27320: IFFALSE 27390
// begin if UnitsInside ( j ) < 3 then
27322: LD_VAR 0 9
27326: PPUSH
27327: CALL_OW 313
27331: PUSH
27332: LD_INT 3
27334: LESS
27335: IFFALSE 27371
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27337: LD_INT 0
27339: PPUSH
27340: LD_INT 5
27342: PUSH
27343: LD_INT 8
27345: PUSH
27346: LD_INT 9
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: LIST
27353: PUSH
27354: LD_VAR 0 17
27358: ARRAY
27359: PPUSH
27360: LD_VAR 0 4
27364: PPUSH
27365: CALL_OW 380
27369: GO 27388
// PrepareHuman ( false , i , skill ) ;
27371: LD_INT 0
27373: PPUSH
27374: LD_VAR 0 8
27378: PPUSH
27379: LD_VAR 0 4
27383: PPUSH
27384: CALL_OW 380
// end else
27388: GO 27407
// PrepareHuman ( false , i , skill ) ;
27390: LD_INT 0
27392: PPUSH
27393: LD_VAR 0 8
27397: PPUSH
27398: LD_VAR 0 4
27402: PPUSH
27403: CALL_OW 380
// un := CreateHuman ;
27407: LD_ADDR_VAR 0 14
27411: PUSH
27412: CALL_OW 44
27416: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27417: LD_ADDR_VAR 0 7
27421: PUSH
27422: LD_VAR 0 7
27426: PPUSH
27427: LD_INT 1
27429: PPUSH
27430: LD_VAR 0 14
27434: PPUSH
27435: CALL_OW 2
27439: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27440: LD_VAR 0 14
27444: PPUSH
27445: LD_VAR 0 9
27449: PPUSH
27450: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27454: LD_VAR 0 9
27458: PPUSH
27459: CALL_OW 313
27463: PUSH
27464: LD_INT 6
27466: EQUAL
27467: IFTRUE 27491
27469: PUSH
27470: LD_VAR 0 9
27474: PPUSH
27475: CALL_OW 266
27479: PUSH
27480: LD_INT 32
27482: PUSH
27483: LD_INT 31
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: IN
27490: OR
27491: IFFALSE 27303
27493: GO 27300
27495: POP
27496: POP
// end else
27497: GO 27883
// for j = 1 to x do
27499: LD_ADDR_VAR 0 9
27503: PUSH
27504: DOUBLE
27505: LD_INT 1
27507: DEC
27508: ST_TO_ADDR
27509: LD_VAR 0 13
27513: PUSH
27514: FOR_TO
27515: IFFALSE 27881
// begin InitHc ;
27517: CALL_OW 19
// if not f then
27521: LD_VAR 0 12
27525: NOT
27526: IFFALSE 27615
// begin PrepareHuman ( false , i , skill ) ;
27528: LD_INT 0
27530: PPUSH
27531: LD_VAR 0 8
27535: PPUSH
27536: LD_VAR 0 4
27540: PPUSH
27541: CALL_OW 380
// un := CreateHuman ;
27545: LD_ADDR_VAR 0 14
27549: PUSH
27550: CALL_OW 44
27554: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27555: LD_ADDR_VAR 0 7
27559: PUSH
27560: LD_VAR 0 7
27564: PPUSH
27565: LD_INT 1
27567: PPUSH
27568: LD_VAR 0 14
27572: PPUSH
27573: CALL_OW 2
27577: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27578: LD_VAR 0 14
27582: PPUSH
27583: LD_VAR 0 1
27587: PPUSH
27588: CALL_OW 250
27592: PPUSH
27593: LD_VAR 0 1
27597: PPUSH
27598: CALL_OW 251
27602: PPUSH
27603: LD_INT 10
27605: PPUSH
27606: LD_INT 0
27608: PPUSH
27609: CALL_OW 50
// continue ;
27613: GO 27514
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27615: LD_VAR 0 12
27619: PUSH
27620: LD_INT 1
27622: ARRAY
27623: PPUSH
27624: CALL_OW 313
27628: IFFALSE 27656
27630: PUSH
27631: LD_VAR 0 12
27635: PUSH
27636: LD_INT 1
27638: ARRAY
27639: PPUSH
27640: CALL_OW 266
27644: PUSH
27645: LD_INT 32
27647: PUSH
27648: LD_INT 31
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: IN
27655: AND
27656: IFTRUE 27677
27658: PUSH
27659: LD_VAR 0 12
27663: PUSH
27664: LD_INT 1
27666: ARRAY
27667: PPUSH
27668: CALL_OW 313
27672: PUSH
27673: LD_INT 6
27675: EQUAL
27676: OR
27677: IFFALSE 27697
// f := Delete ( f , 1 ) ;
27679: LD_ADDR_VAR 0 12
27683: PUSH
27684: LD_VAR 0 12
27688: PPUSH
27689: LD_INT 1
27691: PPUSH
27692: CALL_OW 3
27696: ST_TO_ADDR
// if not f then
27697: LD_VAR 0 12
27701: NOT
27702: IFFALSE 27720
// begin x := x + 2 ;
27704: LD_ADDR_VAR 0 13
27708: PUSH
27709: LD_VAR 0 13
27713: PUSH
27714: LD_INT 2
27716: PLUS
27717: ST_TO_ADDR
// continue ;
27718: GO 27514
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27720: LD_VAR 0 12
27724: PUSH
27725: LD_INT 1
27727: ARRAY
27728: PPUSH
27729: CALL_OW 266
27733: PUSH
27734: LD_INT 5
27736: EQUAL
27737: IFFALSE 27811
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27739: LD_VAR 0 12
27743: PUSH
27744: LD_INT 1
27746: ARRAY
27747: PPUSH
27748: CALL_OW 313
27752: PUSH
27753: LD_INT 3
27755: LESS
27756: IFFALSE 27792
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27758: LD_INT 0
27760: PPUSH
27761: LD_INT 5
27763: PUSH
27764: LD_INT 8
27766: PUSH
27767: LD_INT 9
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: PUSH
27775: LD_VAR 0 17
27779: ARRAY
27780: PPUSH
27781: LD_VAR 0 4
27785: PPUSH
27786: CALL_OW 380
27790: GO 27809
// PrepareHuman ( false , i , skill ) ;
27792: LD_INT 0
27794: PPUSH
27795: LD_VAR 0 8
27799: PPUSH
27800: LD_VAR 0 4
27804: PPUSH
27805: CALL_OW 380
// end else
27809: GO 27828
// PrepareHuman ( false , i , skill ) ;
27811: LD_INT 0
27813: PPUSH
27814: LD_VAR 0 8
27818: PPUSH
27819: LD_VAR 0 4
27823: PPUSH
27824: CALL_OW 380
// un := CreateHuman ;
27828: LD_ADDR_VAR 0 14
27832: PUSH
27833: CALL_OW 44
27837: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27838: LD_ADDR_VAR 0 7
27842: PUSH
27843: LD_VAR 0 7
27847: PPUSH
27848: LD_INT 1
27850: PPUSH
27851: LD_VAR 0 14
27855: PPUSH
27856: CALL_OW 2
27860: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27861: LD_VAR 0 14
27865: PPUSH
27866: LD_VAR 0 12
27870: PUSH
27871: LD_INT 1
27873: ARRAY
27874: PPUSH
27875: CALL_OW 52
// end ;
27879: GO 27514
27881: POP
27882: POP
// end ;
27883: GO 26814
27885: POP
27886: POP
// result := result ^ buildings ;
27887: LD_ADDR_VAR 0 7
27891: PUSH
27892: LD_VAR 0 7
27896: PUSH
27897: LD_VAR 0 18
27901: ADD
27902: ST_TO_ADDR
// end else
27903: GO 28046
// begin for i = 1 to personel do
27905: LD_ADDR_VAR 0 8
27909: PUSH
27910: DOUBLE
27911: LD_INT 1
27913: DEC
27914: ST_TO_ADDR
27915: LD_VAR 0 6
27919: PUSH
27920: FOR_TO
27921: IFFALSE 28044
// begin if i > 4 then
27923: LD_VAR 0 8
27927: PUSH
27928: LD_INT 4
27930: GREATER
27931: IFFALSE 27935
// break ;
27933: GO 28044
// x := personel [ i ] ;
27935: LD_ADDR_VAR 0 13
27939: PUSH
27940: LD_VAR 0 6
27944: PUSH
27945: LD_VAR 0 8
27949: ARRAY
27950: ST_TO_ADDR
// if x = - 1 then
27951: LD_VAR 0 13
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: EQUAL
27960: IFFALSE 27964
// continue ;
27962: GO 27920
// PrepareHuman ( false , i , skill ) ;
27964: LD_INT 0
27966: PPUSH
27967: LD_VAR 0 8
27971: PPUSH
27972: LD_VAR 0 4
27976: PPUSH
27977: CALL_OW 380
// un := CreateHuman ;
27981: LD_ADDR_VAR 0 14
27985: PUSH
27986: CALL_OW 44
27990: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27991: LD_VAR 0 14
27995: PPUSH
27996: LD_VAR 0 1
28000: PPUSH
28001: CALL_OW 250
28005: PPUSH
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL_OW 251
28015: PPUSH
28016: LD_INT 10
28018: PPUSH
28019: LD_INT 0
28021: PPUSH
28022: CALL_OW 50
// result := result ^ un ;
28026: LD_ADDR_VAR 0 7
28030: PUSH
28031: LD_VAR 0 7
28035: PUSH
28036: LD_VAR 0 14
28040: ADD
28041: ST_TO_ADDR
// end ;
28042: GO 27920
28044: POP
28045: POP
// end ; end ;
28046: LD_VAR 0 7
28050: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
28051: LD_INT 0
28053: PPUSH
28054: PPUSH
28055: PPUSH
28056: PPUSH
28057: PPUSH
28058: PPUSH
28059: PPUSH
28060: PPUSH
28061: PPUSH
28062: PPUSH
28063: PPUSH
28064: PPUSH
28065: PPUSH
28066: PPUSH
28067: PPUSH
28068: PPUSH
// result := false ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 0
28076: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
28077: LD_VAR 0 1
28081: NOT
28082: IFTRUE 28107
28084: PUSH
28085: LD_VAR 0 1
28089: PPUSH
28090: CALL_OW 266
28094: PUSH
28095: LD_INT 32
28097: PUSH
28098: LD_INT 33
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: IN
28105: NOT
28106: OR
28107: IFFALSE 28111
// exit ;
28109: GO 29246
// nat := GetNation ( tower ) ;
28111: LD_ADDR_VAR 0 12
28115: PUSH
28116: LD_VAR 0 1
28120: PPUSH
28121: CALL_OW 248
28125: ST_TO_ADDR
// side := GetSide ( tower ) ;
28126: LD_ADDR_VAR 0 16
28130: PUSH
28131: LD_VAR 0 1
28135: PPUSH
28136: CALL_OW 255
28140: ST_TO_ADDR
// x := GetX ( tower ) ;
28141: LD_ADDR_VAR 0 10
28145: PUSH
28146: LD_VAR 0 1
28150: PPUSH
28151: CALL_OW 250
28155: ST_TO_ADDR
// y := GetY ( tower ) ;
28156: LD_ADDR_VAR 0 11
28160: PUSH
28161: LD_VAR 0 1
28165: PPUSH
28166: CALL_OW 251
28170: ST_TO_ADDR
// if not x or not y then
28171: LD_VAR 0 10
28175: NOT
28176: IFTRUE 28185
28178: PUSH
28179: LD_VAR 0 11
28183: NOT
28184: OR
28185: IFFALSE 28189
// exit ;
28187: GO 29246
// weapon := 0 ;
28189: LD_ADDR_VAR 0 18
28193: PUSH
28194: LD_INT 0
28196: ST_TO_ADDR
// fac_list := [ ] ;
28197: LD_ADDR_VAR 0 17
28201: PUSH
28202: EMPTY
28203: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28204: LD_ADDR_VAR 0 6
28208: PUSH
28209: LD_VAR 0 1
28213: PPUSH
28214: CALL_OW 274
28218: PPUSH
28219: LD_VAR 0 2
28223: PPUSH
28224: LD_INT 0
28226: PPUSH
28227: CALL 25781 0 3
28231: PPUSH
28232: LD_INT 30
28234: PUSH
28235: LD_INT 3
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PPUSH
28242: CALL_OW 72
28246: ST_TO_ADDR
// if not factories then
28247: LD_VAR 0 6
28251: NOT
28252: IFFALSE 28256
// exit ;
28254: GO 29246
// for i in factories do
28256: LD_ADDR_VAR 0 8
28260: PUSH
28261: LD_VAR 0 6
28265: PUSH
28266: FOR_IN
28267: IFFALSE 28292
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28269: LD_ADDR_VAR 0 17
28273: PUSH
28274: LD_VAR 0 17
28278: PUSH
28279: LD_VAR 0 8
28283: PPUSH
28284: CALL_OW 478
28288: UNION
28289: ST_TO_ADDR
28290: GO 28266
28292: POP
28293: POP
// if not fac_list then
28294: LD_VAR 0 17
28298: NOT
28299: IFFALSE 28303
// exit ;
28301: GO 29246
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28303: LD_ADDR_VAR 0 5
28307: PUSH
28308: LD_INT 4
28310: PUSH
28311: LD_INT 5
28313: PUSH
28314: LD_INT 9
28316: PUSH
28317: LD_INT 10
28319: PUSH
28320: LD_INT 6
28322: PUSH
28323: LD_INT 7
28325: PUSH
28326: LD_INT 11
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 27
28340: PUSH
28341: LD_INT 28
28343: PUSH
28344: LD_INT 26
28346: PUSH
28347: LD_INT 30
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 43
28358: PUSH
28359: LD_INT 44
28361: PUSH
28362: LD_INT 46
28364: PUSH
28365: LD_INT 45
28367: PUSH
28368: LD_INT 47
28370: PUSH
28371: LD_INT 49
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: LIST
28386: PUSH
28387: LD_VAR 0 12
28391: ARRAY
28392: ST_TO_ADDR
// list := list isect fac_list ;
28393: LD_ADDR_VAR 0 5
28397: PUSH
28398: LD_VAR 0 5
28402: PUSH
28403: LD_VAR 0 17
28407: ISECT
28408: ST_TO_ADDR
// if not list then
28409: LD_VAR 0 5
28413: NOT
28414: IFFALSE 28418
// exit ;
28416: GO 29246
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28418: LD_VAR 0 12
28422: PUSH
28423: LD_INT 3
28425: EQUAL
28426: IFFALSE 28438
28428: PUSH
28429: LD_INT 49
28431: PUSH
28432: LD_VAR 0 5
28436: IN
28437: AND
28438: IFFALSE 28458
28440: PUSH
28441: LD_INT 31
28443: PPUSH
28444: LD_VAR 0 16
28448: PPUSH
28449: CALL_OW 321
28453: PUSH
28454: LD_INT 2
28456: EQUAL
28457: AND
28458: IFFALSE 28518
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28460: LD_INT 22
28462: PUSH
28463: LD_VAR 0 16
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 35
28474: PUSH
28475: LD_INT 49
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 91
28484: PUSH
28485: LD_VAR 0 1
28489: PUSH
28490: LD_INT 10
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: PPUSH
28503: CALL_OW 69
28507: NOT
28508: IFFALSE 28518
// weapon := ru_time_lapser ;
28510: LD_ADDR_VAR 0 18
28514: PUSH
28515: LD_INT 49
28517: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28518: LD_VAR 0 12
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: LD_INT 2
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: IN
28533: IFFALSE 28557
28535: PUSH
28536: LD_INT 11
28538: PUSH
28539: LD_VAR 0 5
28543: IN
28544: IFTRUE 28556
28546: PUSH
28547: LD_INT 30
28549: PUSH
28550: LD_VAR 0 5
28554: IN
28555: OR
28556: AND
28557: IFFALSE 28577
28559: PUSH
28560: LD_INT 6
28562: PPUSH
28563: LD_VAR 0 16
28567: PPUSH
28568: CALL_OW 321
28572: PUSH
28573: LD_INT 2
28575: EQUAL
28576: AND
28577: IFFALSE 28744
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28579: LD_INT 22
28581: PUSH
28582: LD_VAR 0 16
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 2
28593: PUSH
28594: LD_INT 35
28596: PUSH
28597: LD_INT 11
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 35
28606: PUSH
28607: LD_INT 30
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 91
28621: PUSH
28622: LD_VAR 0 1
28626: PUSH
28627: LD_INT 18
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: PPUSH
28640: CALL_OW 69
28644: NOT
28645: IFFALSE 28721
28647: PUSH
28648: LD_INT 22
28650: PUSH
28651: LD_VAR 0 16
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: LD_INT 30
28665: PUSH
28666: LD_INT 32
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 30
28675: PUSH
28676: LD_INT 33
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 91
28690: PUSH
28691: LD_VAR 0 1
28695: PUSH
28696: LD_INT 12
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: LIST
28708: PUSH
28709: EMPTY
28710: LIST
28711: PPUSH
28712: CALL_OW 69
28716: PUSH
28717: LD_INT 2
28719: GREATER
28720: AND
28721: IFFALSE 28744
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28723: LD_ADDR_VAR 0 18
28727: PUSH
28728: LD_INT 11
28730: PUSH
28731: LD_INT 30
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_VAR 0 12
28742: ARRAY
28743: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28744: LD_VAR 0 18
28748: NOT
28749: IFFALSE 28769
28751: PUSH
28752: LD_INT 40
28754: PPUSH
28755: LD_VAR 0 16
28759: PPUSH
28760: CALL_OW 321
28764: PUSH
28765: LD_INT 2
28767: EQUAL
28768: AND
28769: IFFALSE 28805
28771: PUSH
28772: LD_INT 7
28774: PUSH
28775: LD_VAR 0 5
28779: IN
28780: IFTRUE 28792
28782: PUSH
28783: LD_INT 28
28785: PUSH
28786: LD_VAR 0 5
28790: IN
28791: OR
28792: IFTRUE 28804
28794: PUSH
28795: LD_INT 45
28797: PUSH
28798: LD_VAR 0 5
28802: IN
28803: OR
28804: AND
28805: IFFALSE 29059
// begin hex := GetHexInfo ( x , y ) ;
28807: LD_ADDR_VAR 0 4
28811: PUSH
28812: LD_VAR 0 10
28816: PPUSH
28817: LD_VAR 0 11
28821: PPUSH
28822: CALL_OW 546
28826: ST_TO_ADDR
// if hex [ 1 ] then
28827: LD_VAR 0 4
28831: PUSH
28832: LD_INT 1
28834: ARRAY
28835: IFFALSE 28839
// exit ;
28837: GO 29246
// height := hex [ 2 ] ;
28839: LD_ADDR_VAR 0 15
28843: PUSH
28844: LD_VAR 0 4
28848: PUSH
28849: LD_INT 2
28851: ARRAY
28852: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28853: LD_ADDR_VAR 0 14
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: LD_INT 3
28866: PUSH
28867: LD_INT 5
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: ST_TO_ADDR
// for i in tmp do
28876: LD_ADDR_VAR 0 8
28880: PUSH
28881: LD_VAR 0 14
28885: PUSH
28886: FOR_IN
28887: IFFALSE 29057
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28889: LD_ADDR_VAR 0 9
28893: PUSH
28894: LD_VAR 0 10
28898: PPUSH
28899: LD_VAR 0 8
28903: PPUSH
28904: LD_INT 5
28906: PPUSH
28907: CALL_OW 272
28911: PUSH
28912: LD_VAR 0 11
28916: PPUSH
28917: LD_VAR 0 8
28921: PPUSH
28922: LD_INT 5
28924: PPUSH
28925: CALL_OW 273
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28934: LD_VAR 0 9
28938: PUSH
28939: LD_INT 1
28941: ARRAY
28942: PPUSH
28943: LD_VAR 0 9
28947: PUSH
28948: LD_INT 2
28950: ARRAY
28951: PPUSH
28952: CALL_OW 488
28956: IFFALSE 29055
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28958: LD_ADDR_VAR 0 4
28962: PUSH
28963: LD_VAR 0 9
28967: PUSH
28968: LD_INT 1
28970: ARRAY
28971: PPUSH
28972: LD_VAR 0 9
28976: PUSH
28977: LD_INT 2
28979: ARRAY
28980: PPUSH
28981: CALL_OW 546
28985: ST_TO_ADDR
// if hex [ 1 ] then
28986: LD_VAR 0 4
28990: PUSH
28991: LD_INT 1
28993: ARRAY
28994: IFFALSE 28998
// continue ;
28996: GO 28886
// h := hex [ 2 ] ;
28998: LD_ADDR_VAR 0 13
29002: PUSH
29003: LD_VAR 0 4
29007: PUSH
29008: LD_INT 2
29010: ARRAY
29011: ST_TO_ADDR
// if h + 7 < height then
29012: LD_VAR 0 13
29016: PUSH
29017: LD_INT 7
29019: PLUS
29020: PUSH
29021: LD_VAR 0 15
29025: LESS
29026: IFFALSE 29055
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
29028: LD_ADDR_VAR 0 18
29032: PUSH
29033: LD_INT 7
29035: PUSH
29036: LD_INT 28
29038: PUSH
29039: LD_INT 45
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: PUSH
29047: LD_VAR 0 12
29051: ARRAY
29052: ST_TO_ADDR
// break ;
29053: GO 29057
// end ; end ; end ;
29055: GO 28886
29057: POP
29058: POP
// end ; if not weapon then
29059: LD_VAR 0 18
29063: NOT
29064: IFFALSE 29124
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
29066: LD_ADDR_VAR 0 5
29070: PUSH
29071: LD_VAR 0 5
29075: PUSH
29076: LD_INT 11
29078: PUSH
29079: LD_INT 30
29081: PUSH
29082: LD_INT 49
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: LIST
29089: DIFF
29090: ST_TO_ADDR
// if not list then
29091: LD_VAR 0 5
29095: NOT
29096: IFFALSE 29100
// exit ;
29098: GO 29246
// weapon := list [ rand ( 1 , list ) ] ;
29100: LD_ADDR_VAR 0 18
29104: PUSH
29105: LD_VAR 0 5
29109: PUSH
29110: LD_INT 1
29112: PPUSH
29113: LD_VAR 0 5
29117: PPUSH
29118: CALL_OW 12
29122: ARRAY
29123: ST_TO_ADDR
// end ; if weapon then
29124: LD_VAR 0 18
29128: IFFALSE 29246
// begin tmp := CostOfWeapon ( weapon ) ;
29130: LD_ADDR_VAR 0 14
29134: PUSH
29135: LD_VAR 0 18
29139: PPUSH
29140: CALL_OW 451
29144: ST_TO_ADDR
// j := GetBase ( tower ) ;
29145: LD_ADDR_VAR 0 9
29149: PUSH
29150: LD_VAR 0 1
29154: PPUSH
29155: CALL_OW 274
29159: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29160: LD_VAR 0 9
29164: PPUSH
29165: LD_INT 1
29167: PPUSH
29168: CALL_OW 275
29172: PUSH
29173: LD_VAR 0 14
29177: PUSH
29178: LD_INT 1
29180: ARRAY
29181: GREATEREQUAL
29182: IFFALSE 29208
29184: PUSH
29185: LD_VAR 0 9
29189: PPUSH
29190: LD_INT 2
29192: PPUSH
29193: CALL_OW 275
29197: PUSH
29198: LD_VAR 0 14
29202: PUSH
29203: LD_INT 2
29205: ARRAY
29206: GREATEREQUAL
29207: AND
29208: IFFALSE 29234
29210: PUSH
29211: LD_VAR 0 9
29215: PPUSH
29216: LD_INT 3
29218: PPUSH
29219: CALL_OW 275
29223: PUSH
29224: LD_VAR 0 14
29228: PUSH
29229: LD_INT 3
29231: ARRAY
29232: GREATEREQUAL
29233: AND
29234: IFFALSE 29246
// result := weapon ;
29236: LD_ADDR_VAR 0 3
29240: PUSH
29241: LD_VAR 0 18
29245: ST_TO_ADDR
// end ; end ;
29246: LD_VAR 0 3
29250: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29251: LD_INT 0
29253: PPUSH
29254: PPUSH
// result := true ;
29255: LD_ADDR_VAR 0 3
29259: PUSH
29260: LD_INT 1
29262: ST_TO_ADDR
// if array1 = array2 then
29263: LD_VAR 0 1
29267: PUSH
29268: LD_VAR 0 2
29272: EQUAL
29273: IFFALSE 29333
// begin for i = 1 to array1 do
29275: LD_ADDR_VAR 0 4
29279: PUSH
29280: DOUBLE
29281: LD_INT 1
29283: DEC
29284: ST_TO_ADDR
29285: LD_VAR 0 1
29289: PUSH
29290: FOR_TO
29291: IFFALSE 29329
// if array1 [ i ] <> array2 [ i ] then
29293: LD_VAR 0 1
29297: PUSH
29298: LD_VAR 0 4
29302: ARRAY
29303: PUSH
29304: LD_VAR 0 2
29308: PUSH
29309: LD_VAR 0 4
29313: ARRAY
29314: NONEQUAL
29315: IFFALSE 29327
// begin result := false ;
29317: LD_ADDR_VAR 0 3
29321: PUSH
29322: LD_INT 0
29324: ST_TO_ADDR
// break ;
29325: GO 29329
// end ;
29327: GO 29290
29329: POP
29330: POP
// end else
29331: GO 29341
// result := false ;
29333: LD_ADDR_VAR 0 3
29337: PUSH
29338: LD_INT 0
29340: ST_TO_ADDR
// end ;
29341: LD_VAR 0 3
29345: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29346: LD_INT 0
29348: PPUSH
29349: PPUSH
// if not array1 or not array2 then
29350: LD_VAR 0 1
29354: NOT
29355: IFTRUE 29364
29357: PUSH
29358: LD_VAR 0 2
29362: NOT
29363: OR
29364: IFFALSE 29368
// exit ;
29366: GO 29432
// result := true ;
29368: LD_ADDR_VAR 0 3
29372: PUSH
29373: LD_INT 1
29375: ST_TO_ADDR
// for i = 1 to array1 do
29376: LD_ADDR_VAR 0 4
29380: PUSH
29381: DOUBLE
29382: LD_INT 1
29384: DEC
29385: ST_TO_ADDR
29386: LD_VAR 0 1
29390: PUSH
29391: FOR_TO
29392: IFFALSE 29430
// if array1 [ i ] <> array2 [ i ] then
29394: LD_VAR 0 1
29398: PUSH
29399: LD_VAR 0 4
29403: ARRAY
29404: PUSH
29405: LD_VAR 0 2
29409: PUSH
29410: LD_VAR 0 4
29414: ARRAY
29415: NONEQUAL
29416: IFFALSE 29428
// begin result := false ;
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_INT 0
29425: ST_TO_ADDR
// break ;
29426: GO 29430
// end ;
29428: GO 29391
29430: POP
29431: POP
// end ;
29432: LD_VAR 0 3
29436: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29437: LD_INT 0
29439: PPUSH
29440: PPUSH
29441: PPUSH
// pom := GetBase ( fac ) ;
29442: LD_ADDR_VAR 0 5
29446: PUSH
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL_OW 274
29456: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29457: LD_ADDR_VAR 0 4
29461: PUSH
29462: LD_VAR 0 2
29466: PUSH
29467: LD_INT 1
29469: ARRAY
29470: PPUSH
29471: LD_VAR 0 2
29475: PUSH
29476: LD_INT 2
29478: ARRAY
29479: PPUSH
29480: LD_VAR 0 2
29484: PUSH
29485: LD_INT 3
29487: ARRAY
29488: PPUSH
29489: LD_VAR 0 2
29493: PUSH
29494: LD_INT 4
29496: ARRAY
29497: PPUSH
29498: CALL_OW 449
29502: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_VAR 0 5
29512: PPUSH
29513: LD_INT 1
29515: PPUSH
29516: CALL_OW 275
29520: PUSH
29521: LD_VAR 0 4
29525: PUSH
29526: LD_INT 1
29528: ARRAY
29529: GREATEREQUAL
29530: IFFALSE 29556
29532: PUSH
29533: LD_VAR 0 5
29537: PPUSH
29538: LD_INT 2
29540: PPUSH
29541: CALL_OW 275
29545: PUSH
29546: LD_VAR 0 4
29550: PUSH
29551: LD_INT 2
29553: ARRAY
29554: GREATEREQUAL
29555: AND
29556: IFFALSE 29582
29558: PUSH
29559: LD_VAR 0 5
29563: PPUSH
29564: LD_INT 3
29566: PPUSH
29567: CALL_OW 275
29571: PUSH
29572: LD_VAR 0 4
29576: PUSH
29577: LD_INT 3
29579: ARRAY
29580: GREATEREQUAL
29581: AND
29582: ST_TO_ADDR
// end ;
29583: LD_VAR 0 3
29587: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29588: LD_INT 0
29590: PPUSH
29591: PPUSH
29592: PPUSH
29593: PPUSH
// pom := GetBase ( building ) ;
29594: LD_ADDR_VAR 0 3
29598: PUSH
29599: LD_VAR 0 1
29603: PPUSH
29604: CALL_OW 274
29608: ST_TO_ADDR
// if not pom then
29609: LD_VAR 0 3
29613: NOT
29614: IFFALSE 29618
// exit ;
29616: GO 29792
// btype := GetBType ( building ) ;
29618: LD_ADDR_VAR 0 5
29622: PUSH
29623: LD_VAR 0 1
29627: PPUSH
29628: CALL_OW 266
29632: ST_TO_ADDR
// if btype = b_armoury then
29633: LD_VAR 0 5
29637: PUSH
29638: LD_INT 4
29640: EQUAL
29641: IFFALSE 29651
// btype := b_barracks ;
29643: LD_ADDR_VAR 0 5
29647: PUSH
29648: LD_INT 5
29650: ST_TO_ADDR
// if btype = b_depot then
29651: LD_VAR 0 5
29655: PUSH
29656: LD_INT 0
29658: EQUAL
29659: IFFALSE 29669
// btype := b_warehouse ;
29661: LD_ADDR_VAR 0 5
29665: PUSH
29666: LD_INT 1
29668: ST_TO_ADDR
// if btype = b_workshop then
29669: LD_VAR 0 5
29673: PUSH
29674: LD_INT 2
29676: EQUAL
29677: IFFALSE 29687
// btype := b_factory ;
29679: LD_ADDR_VAR 0 5
29683: PUSH
29684: LD_INT 3
29686: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29687: LD_ADDR_VAR 0 4
29691: PUSH
29692: LD_VAR 0 5
29696: PPUSH
29697: LD_VAR 0 1
29701: PPUSH
29702: CALL_OW 248
29706: PPUSH
29707: CALL_OW 450
29711: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29712: LD_ADDR_VAR 0 2
29716: PUSH
29717: LD_VAR 0 3
29721: PPUSH
29722: LD_INT 1
29724: PPUSH
29725: CALL_OW 275
29729: PUSH
29730: LD_VAR 0 4
29734: PUSH
29735: LD_INT 1
29737: ARRAY
29738: GREATEREQUAL
29739: IFFALSE 29765
29741: PUSH
29742: LD_VAR 0 3
29746: PPUSH
29747: LD_INT 2
29749: PPUSH
29750: CALL_OW 275
29754: PUSH
29755: LD_VAR 0 4
29759: PUSH
29760: LD_INT 2
29762: ARRAY
29763: GREATEREQUAL
29764: AND
29765: IFFALSE 29791
29767: PUSH
29768: LD_VAR 0 3
29772: PPUSH
29773: LD_INT 3
29775: PPUSH
29776: CALL_OW 275
29780: PUSH
29781: LD_VAR 0 4
29785: PUSH
29786: LD_INT 3
29788: ARRAY
29789: GREATEREQUAL
29790: AND
29791: ST_TO_ADDR
// end ;
29792: LD_VAR 0 2
29796: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29797: LD_INT 0
29799: PPUSH
29800: PPUSH
29801: PPUSH
// pom := GetBase ( building ) ;
29802: LD_ADDR_VAR 0 4
29806: PUSH
29807: LD_VAR 0 1
29811: PPUSH
29812: CALL_OW 274
29816: ST_TO_ADDR
// if not pom then
29817: LD_VAR 0 4
29821: NOT
29822: IFFALSE 29826
// exit ;
29824: GO 29931
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29826: LD_ADDR_VAR 0 5
29830: PUSH
29831: LD_VAR 0 2
29835: PPUSH
29836: LD_VAR 0 1
29840: PPUSH
29841: CALL_OW 248
29845: PPUSH
29846: CALL_OW 450
29850: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29851: LD_ADDR_VAR 0 3
29855: PUSH
29856: LD_VAR 0 4
29860: PPUSH
29861: LD_INT 1
29863: PPUSH
29864: CALL_OW 275
29868: PUSH
29869: LD_VAR 0 5
29873: PUSH
29874: LD_INT 1
29876: ARRAY
29877: GREATEREQUAL
29878: IFFALSE 29904
29880: PUSH
29881: LD_VAR 0 4
29885: PPUSH
29886: LD_INT 2
29888: PPUSH
29889: CALL_OW 275
29893: PUSH
29894: LD_VAR 0 5
29898: PUSH
29899: LD_INT 2
29901: ARRAY
29902: GREATEREQUAL
29903: AND
29904: IFFALSE 29930
29906: PUSH
29907: LD_VAR 0 4
29911: PPUSH
29912: LD_INT 3
29914: PPUSH
29915: CALL_OW 275
29919: PUSH
29920: LD_VAR 0 5
29924: PUSH
29925: LD_INT 3
29927: ARRAY
29928: GREATEREQUAL
29929: AND
29930: ST_TO_ADDR
// end ;
29931: LD_VAR 0 3
29935: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29936: LD_INT 0
29938: PPUSH
29939: PPUSH
29940: PPUSH
29941: PPUSH
29942: PPUSH
29943: PPUSH
29944: PPUSH
29945: PPUSH
29946: PPUSH
29947: PPUSH
29948: PPUSH
// result := false ;
29949: LD_ADDR_VAR 0 8
29953: PUSH
29954: LD_INT 0
29956: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29957: LD_VAR 0 5
29961: NOT
29962: IFTRUE 29971
29964: PUSH
29965: LD_VAR 0 1
29969: NOT
29970: OR
29971: IFTRUE 29980
29973: PUSH
29974: LD_VAR 0 2
29978: NOT
29979: OR
29980: IFTRUE 29989
29982: PUSH
29983: LD_VAR 0 3
29987: NOT
29988: OR
29989: IFFALSE 29993
// exit ;
29991: GO 30819
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29993: LD_ADDR_VAR 0 14
29997: PUSH
29998: LD_VAR 0 1
30002: PPUSH
30003: LD_VAR 0 2
30007: PPUSH
30008: LD_VAR 0 3
30012: PPUSH
30013: LD_VAR 0 4
30017: PPUSH
30018: LD_VAR 0 5
30022: PUSH
30023: LD_INT 1
30025: ARRAY
30026: PPUSH
30027: CALL_OW 248
30031: PPUSH
30032: LD_INT 0
30034: PPUSH
30035: CALL 32100 0 6
30039: ST_TO_ADDR
// if not hexes then
30040: LD_VAR 0 14
30044: NOT
30045: IFFALSE 30049
// exit ;
30047: GO 30819
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30049: LD_ADDR_VAR 0 17
30053: PUSH
30054: LD_VAR 0 5
30058: PPUSH
30059: LD_INT 22
30061: PUSH
30062: LD_VAR 0 13
30066: PPUSH
30067: CALL_OW 255
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 2
30078: PUSH
30079: LD_INT 30
30081: PUSH
30082: LD_INT 0
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 30
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PPUSH
30108: CALL_OW 72
30112: ST_TO_ADDR
// for i = 1 to hexes do
30113: LD_ADDR_VAR 0 9
30117: PUSH
30118: DOUBLE
30119: LD_INT 1
30121: DEC
30122: ST_TO_ADDR
30123: LD_VAR 0 14
30127: PUSH
30128: FOR_TO
30129: IFFALSE 30817
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30131: LD_ADDR_VAR 0 13
30135: PUSH
30136: LD_VAR 0 14
30140: PUSH
30141: LD_VAR 0 9
30145: ARRAY
30146: PUSH
30147: LD_INT 1
30149: ARRAY
30150: PPUSH
30151: LD_VAR 0 14
30155: PUSH
30156: LD_VAR 0 9
30160: ARRAY
30161: PUSH
30162: LD_INT 2
30164: ARRAY
30165: PPUSH
30166: CALL_OW 428
30170: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30171: LD_VAR 0 14
30175: PUSH
30176: LD_VAR 0 9
30180: ARRAY
30181: PUSH
30182: LD_INT 1
30184: ARRAY
30185: PPUSH
30186: LD_VAR 0 14
30190: PUSH
30191: LD_VAR 0 9
30195: ARRAY
30196: PUSH
30197: LD_INT 2
30199: ARRAY
30200: PPUSH
30201: CALL_OW 351
30205: IFTRUE 30244
30207: PUSH
30208: LD_VAR 0 14
30212: PUSH
30213: LD_VAR 0 9
30217: ARRAY
30218: PUSH
30219: LD_INT 1
30221: ARRAY
30222: PPUSH
30223: LD_VAR 0 14
30227: PUSH
30228: LD_VAR 0 9
30232: ARRAY
30233: PUSH
30234: LD_INT 2
30236: ARRAY
30237: PPUSH
30238: CALL_OW 488
30242: NOT
30243: OR
30244: IFTRUE 30261
30246: PUSH
30247: LD_VAR 0 13
30251: PPUSH
30252: CALL_OW 247
30256: PUSH
30257: LD_INT 3
30259: EQUAL
30260: OR
30261: IFFALSE 30267
// exit ;
30263: POP
30264: POP
30265: GO 30819
// if not tmp then
30267: LD_VAR 0 13
30271: NOT
30272: IFFALSE 30276
// continue ;
30274: GO 30128
// result := true ;
30276: LD_ADDR_VAR 0 8
30280: PUSH
30281: LD_INT 1
30283: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30284: LD_VAR 0 6
30288: IFFALSE 30305
30290: PUSH
30291: LD_VAR 0 13
30295: PPUSH
30296: CALL_OW 247
30300: PUSH
30301: LD_INT 2
30303: EQUAL
30304: AND
30305: IFFALSE 30322
30307: PUSH
30308: LD_VAR 0 13
30312: PPUSH
30313: CALL_OW 263
30317: PUSH
30318: LD_INT 1
30320: EQUAL
30321: AND
30322: IFFALSE 30486
// begin if IsDrivenBy ( tmp ) then
30324: LD_VAR 0 13
30328: PPUSH
30329: CALL_OW 311
30333: IFFALSE 30337
// continue ;
30335: GO 30128
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30337: LD_VAR 0 6
30341: PPUSH
30342: LD_INT 3
30344: PUSH
30345: LD_INT 60
30347: PUSH
30348: EMPTY
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: LD_INT 55
30360: PUSH
30361: EMPTY
30362: LIST
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PPUSH
30372: CALL_OW 72
30376: IFFALSE 30484
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30378: LD_ADDR_VAR 0 18
30382: PUSH
30383: LD_VAR 0 6
30387: PPUSH
30388: LD_INT 3
30390: PUSH
30391: LD_INT 60
30393: PUSH
30394: EMPTY
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: LD_INT 55
30406: PUSH
30407: EMPTY
30408: LIST
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PPUSH
30418: CALL_OW 72
30422: PUSH
30423: LD_INT 1
30425: ARRAY
30426: ST_TO_ADDR
// if IsInUnit ( driver ) then
30427: LD_VAR 0 18
30431: PPUSH
30432: CALL_OW 310
30436: IFFALSE 30447
// ComExit ( driver ) ;
30438: LD_VAR 0 18
30442: PPUSH
30443: CALL 56090 0 1
// AddComEnterUnit ( driver , tmp ) ;
30447: LD_VAR 0 18
30451: PPUSH
30452: LD_VAR 0 13
30456: PPUSH
30457: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30461: LD_VAR 0 18
30465: PPUSH
30466: LD_VAR 0 7
30470: PPUSH
30471: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30475: LD_VAR 0 18
30479: PPUSH
30480: CALL_OW 181
// end ; continue ;
30484: GO 30128
// end ; if not cleaners or not tmp in cleaners then
30486: LD_VAR 0 6
30490: NOT
30491: IFTRUE 30506
30493: PUSH
30494: LD_VAR 0 13
30498: PUSH
30499: LD_VAR 0 6
30503: IN
30504: NOT
30505: OR
30506: IFFALSE 30815
// begin if dep then
30508: LD_VAR 0 17
30512: IFFALSE 30648
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30514: LD_ADDR_VAR 0 16
30518: PUSH
30519: LD_VAR 0 17
30523: PUSH
30524: LD_INT 1
30526: ARRAY
30527: PPUSH
30528: CALL_OW 250
30532: PPUSH
30533: LD_VAR 0 17
30537: PUSH
30538: LD_INT 1
30540: ARRAY
30541: PPUSH
30542: CALL_OW 254
30546: PPUSH
30547: LD_INT 5
30549: PPUSH
30550: CALL_OW 272
30554: PUSH
30555: LD_VAR 0 17
30559: PUSH
30560: LD_INT 1
30562: ARRAY
30563: PPUSH
30564: CALL_OW 251
30568: PPUSH
30569: LD_VAR 0 17
30573: PUSH
30574: LD_INT 1
30576: ARRAY
30577: PPUSH
30578: CALL_OW 254
30582: PPUSH
30583: LD_INT 5
30585: PPUSH
30586: CALL_OW 273
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30595: LD_VAR 0 16
30599: PUSH
30600: LD_INT 1
30602: ARRAY
30603: PPUSH
30604: LD_VAR 0 16
30608: PUSH
30609: LD_INT 2
30611: ARRAY
30612: PPUSH
30613: CALL_OW 488
30617: IFFALSE 30648
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30619: LD_VAR 0 13
30623: PPUSH
30624: LD_VAR 0 16
30628: PUSH
30629: LD_INT 1
30631: ARRAY
30632: PPUSH
30633: LD_VAR 0 16
30637: PUSH
30638: LD_INT 2
30640: ARRAY
30641: PPUSH
30642: CALL_OW 111
// continue ;
30646: GO 30128
// end ; end ; r := GetDir ( tmp ) ;
30648: LD_ADDR_VAR 0 15
30652: PUSH
30653: LD_VAR 0 13
30657: PPUSH
30658: CALL_OW 254
30662: ST_TO_ADDR
// if r = 5 then
30663: LD_VAR 0 15
30667: PUSH
30668: LD_INT 5
30670: EQUAL
30671: IFFALSE 30681
// r := 0 ;
30673: LD_ADDR_VAR 0 15
30677: PUSH
30678: LD_INT 0
30680: ST_TO_ADDR
// for j = r to 5 do
30681: LD_ADDR_VAR 0 10
30685: PUSH
30686: DOUBLE
30687: LD_VAR 0 15
30691: DEC
30692: ST_TO_ADDR
30693: LD_INT 5
30695: PUSH
30696: FOR_TO
30697: IFFALSE 30813
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30699: LD_ADDR_VAR 0 11
30703: PUSH
30704: LD_VAR 0 13
30708: PPUSH
30709: CALL_OW 250
30713: PPUSH
30714: LD_VAR 0 10
30718: PPUSH
30719: LD_INT 2
30721: PPUSH
30722: CALL_OW 272
30726: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30727: LD_ADDR_VAR 0 12
30731: PUSH
30732: LD_VAR 0 13
30736: PPUSH
30737: CALL_OW 251
30741: PPUSH
30742: LD_VAR 0 10
30746: PPUSH
30747: LD_INT 2
30749: PPUSH
30750: CALL_OW 273
30754: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30755: LD_VAR 0 11
30759: PPUSH
30760: LD_VAR 0 12
30764: PPUSH
30765: CALL_OW 488
30769: IFFALSE 30788
30771: PUSH
30772: LD_VAR 0 11
30776: PPUSH
30777: LD_VAR 0 12
30781: PPUSH
30782: CALL_OW 428
30786: NOT
30787: AND
30788: IFFALSE 30811
// begin ComMoveXY ( tmp , _x , _y ) ;
30790: LD_VAR 0 13
30794: PPUSH
30795: LD_VAR 0 11
30799: PPUSH
30800: LD_VAR 0 12
30804: PPUSH
30805: CALL_OW 111
// break ;
30809: GO 30813
// end ; end ;
30811: GO 30696
30813: POP
30814: POP
// end ; end ;
30815: GO 30128
30817: POP
30818: POP
// end ;
30819: LD_VAR 0 8
30823: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30824: LD_INT 0
30826: PPUSH
// result := true ;
30827: LD_ADDR_VAR 0 3
30831: PUSH
30832: LD_INT 1
30834: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30835: LD_VAR 0 2
30839: PUSH
30840: LD_INT 24
30842: DOUBLE
30843: EQUAL
30844: IFTRUE 30854
30846: LD_INT 33
30848: DOUBLE
30849: EQUAL
30850: IFTRUE 30854
30852: GO 30879
30854: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30855: LD_ADDR_VAR 0 3
30859: PUSH
30860: LD_INT 32
30862: PPUSH
30863: LD_VAR 0 1
30867: PPUSH
30868: CALL_OW 321
30872: PUSH
30873: LD_INT 2
30875: EQUAL
30876: ST_TO_ADDR
30877: GO 31195
30879: LD_INT 20
30881: DOUBLE
30882: EQUAL
30883: IFTRUE 30887
30885: GO 30912
30887: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30888: LD_ADDR_VAR 0 3
30892: PUSH
30893: LD_INT 6
30895: PPUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 321
30905: PUSH
30906: LD_INT 2
30908: EQUAL
30909: ST_TO_ADDR
30910: GO 31195
30912: LD_INT 22
30914: DOUBLE
30915: EQUAL
30916: IFTRUE 30926
30918: LD_INT 36
30920: DOUBLE
30921: EQUAL
30922: IFTRUE 30926
30924: GO 30951
30926: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30927: LD_ADDR_VAR 0 3
30931: PUSH
30932: LD_INT 15
30934: PPUSH
30935: LD_VAR 0 1
30939: PPUSH
30940: CALL_OW 321
30944: PUSH
30945: LD_INT 2
30947: EQUAL
30948: ST_TO_ADDR
30949: GO 31195
30951: LD_INT 30
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30984
30959: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_INT 20
30967: PPUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL_OW 321
30977: PUSH
30978: LD_INT 2
30980: EQUAL
30981: ST_TO_ADDR
30982: GO 31195
30984: LD_INT 28
30986: DOUBLE
30987: EQUAL
30988: IFTRUE 30998
30990: LD_INT 21
30992: DOUBLE
30993: EQUAL
30994: IFTRUE 30998
30996: GO 31023
30998: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30999: LD_ADDR_VAR 0 3
31003: PUSH
31004: LD_INT 21
31006: PPUSH
31007: LD_VAR 0 1
31011: PPUSH
31012: CALL_OW 321
31016: PUSH
31017: LD_INT 2
31019: EQUAL
31020: ST_TO_ADDR
31021: GO 31195
31023: LD_INT 16
31025: DOUBLE
31026: EQUAL
31027: IFTRUE 31031
31029: GO 31056
31031: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
31032: LD_ADDR_VAR 0 3
31036: PUSH
31037: LD_INT 84
31039: PPUSH
31040: LD_VAR 0 1
31044: PPUSH
31045: CALL_OW 321
31049: PUSH
31050: LD_INT 2
31052: EQUAL
31053: ST_TO_ADDR
31054: GO 31195
31056: LD_INT 19
31058: DOUBLE
31059: EQUAL
31060: IFTRUE 31070
31062: LD_INT 23
31064: DOUBLE
31065: EQUAL
31066: IFTRUE 31070
31068: GO 31095
31070: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_INT 83
31078: PPUSH
31079: LD_VAR 0 1
31083: PPUSH
31084: CALL_OW 321
31088: PUSH
31089: LD_INT 2
31091: EQUAL
31092: ST_TO_ADDR
31093: GO 31195
31095: LD_INT 17
31097: DOUBLE
31098: EQUAL
31099: IFTRUE 31103
31101: GO 31128
31103: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 39
31111: PPUSH
31112: LD_VAR 0 1
31116: PPUSH
31117: CALL_OW 321
31121: PUSH
31122: LD_INT 2
31124: EQUAL
31125: ST_TO_ADDR
31126: GO 31195
31128: LD_INT 18
31130: DOUBLE
31131: EQUAL
31132: IFTRUE 31136
31134: GO 31161
31136: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
31137: LD_ADDR_VAR 0 3
31141: PUSH
31142: LD_INT 40
31144: PPUSH
31145: LD_VAR 0 1
31149: PPUSH
31150: CALL_OW 321
31154: PUSH
31155: LD_INT 2
31157: EQUAL
31158: ST_TO_ADDR
31159: GO 31195
31161: LD_INT 27
31163: DOUBLE
31164: EQUAL
31165: IFTRUE 31169
31167: GO 31194
31169: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31170: LD_ADDR_VAR 0 3
31174: PUSH
31175: LD_INT 35
31177: PPUSH
31178: LD_VAR 0 1
31182: PPUSH
31183: CALL_OW 321
31187: PUSH
31188: LD_INT 2
31190: EQUAL
31191: ST_TO_ADDR
31192: GO 31195
31194: POP
// end ;
31195: LD_VAR 0 3
31199: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31200: LD_INT 0
31202: PPUSH
31203: PPUSH
31204: PPUSH
31205: PPUSH
31206: PPUSH
31207: PPUSH
31208: PPUSH
31209: PPUSH
31210: PPUSH
31211: PPUSH
31212: PPUSH
// result := false ;
31213: LD_ADDR_VAR 0 6
31217: PUSH
31218: LD_INT 0
31220: ST_TO_ADDR
// if btype = b_depot then
31221: LD_VAR 0 2
31225: PUSH
31226: LD_INT 0
31228: EQUAL
31229: IFFALSE 31241
// begin result := true ;
31231: LD_ADDR_VAR 0 6
31235: PUSH
31236: LD_INT 1
31238: ST_TO_ADDR
// exit ;
31239: GO 32095
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31241: LD_VAR 0 1
31245: NOT
31246: IFTRUE 31271
31248: PUSH
31249: LD_VAR 0 1
31253: PPUSH
31254: CALL_OW 266
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: IN
31269: NOT
31270: OR
31271: IFTRUE 31280
31273: PUSH
31274: LD_VAR 0 2
31278: NOT
31279: OR
31280: IFTRUE 31316
31282: PUSH
31283: LD_VAR 0 5
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: LD_INT 2
31296: PUSH
31297: LD_INT 3
31299: PUSH
31300: LD_INT 4
31302: PUSH
31303: LD_INT 5
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: IN
31314: NOT
31315: OR
31316: IFTRUE 31335
31318: PUSH
31319: LD_VAR 0 3
31323: PPUSH
31324: LD_VAR 0 4
31328: PPUSH
31329: CALL_OW 488
31333: NOT
31334: OR
31335: IFFALSE 31339
// exit ;
31337: GO 32095
// side := GetSide ( depot ) ;
31339: LD_ADDR_VAR 0 9
31343: PUSH
31344: LD_VAR 0 1
31348: PPUSH
31349: CALL_OW 255
31353: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31354: LD_VAR 0 9
31358: PPUSH
31359: LD_VAR 0 2
31363: PPUSH
31364: CALL 30824 0 2
31368: NOT
31369: IFFALSE 31373
// exit ;
31371: GO 32095
// pom := GetBase ( depot ) ;
31373: LD_ADDR_VAR 0 10
31377: PUSH
31378: LD_VAR 0 1
31382: PPUSH
31383: CALL_OW 274
31387: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31388: LD_ADDR_VAR 0 11
31392: PUSH
31393: LD_VAR 0 2
31397: PPUSH
31398: LD_VAR 0 1
31402: PPUSH
31403: CALL_OW 248
31407: PPUSH
31408: CALL_OW 450
31412: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31413: LD_VAR 0 10
31417: PPUSH
31418: LD_INT 1
31420: PPUSH
31421: CALL_OW 275
31425: PUSH
31426: LD_VAR 0 11
31430: PUSH
31431: LD_INT 1
31433: ARRAY
31434: GREATEREQUAL
31435: IFFALSE 31461
31437: PUSH
31438: LD_VAR 0 10
31442: PPUSH
31443: LD_INT 2
31445: PPUSH
31446: CALL_OW 275
31450: PUSH
31451: LD_VAR 0 11
31455: PUSH
31456: LD_INT 2
31458: ARRAY
31459: GREATEREQUAL
31460: AND
31461: IFFALSE 31487
31463: PUSH
31464: LD_VAR 0 10
31468: PPUSH
31469: LD_INT 3
31471: PPUSH
31472: CALL_OW 275
31476: PUSH
31477: LD_VAR 0 11
31481: PUSH
31482: LD_INT 3
31484: ARRAY
31485: GREATEREQUAL
31486: AND
31487: NOT
31488: IFFALSE 31492
// exit ;
31490: GO 32095
// if GetBType ( depot ) = b_depot then
31492: LD_VAR 0 1
31496: PPUSH
31497: CALL_OW 266
31501: PUSH
31502: LD_INT 0
31504: EQUAL
31505: IFFALSE 31517
// dist := 28 else
31507: LD_ADDR_VAR 0 14
31511: PUSH
31512: LD_INT 28
31514: ST_TO_ADDR
31515: GO 31525
// dist := 36 ;
31517: LD_ADDR_VAR 0 14
31521: PUSH
31522: LD_INT 36
31524: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31525: LD_VAR 0 1
31529: PPUSH
31530: LD_VAR 0 3
31534: PPUSH
31535: LD_VAR 0 4
31539: PPUSH
31540: CALL_OW 297
31544: PUSH
31545: LD_VAR 0 14
31549: GREATER
31550: IFFALSE 31554
// exit ;
31552: GO 32095
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31554: LD_ADDR_VAR 0 12
31558: PUSH
31559: LD_VAR 0 2
31563: PPUSH
31564: LD_VAR 0 3
31568: PPUSH
31569: LD_VAR 0 4
31573: PPUSH
31574: LD_VAR 0 5
31578: PPUSH
31579: LD_VAR 0 1
31583: PPUSH
31584: CALL_OW 248
31588: PPUSH
31589: LD_INT 0
31591: PPUSH
31592: CALL 32100 0 6
31596: ST_TO_ADDR
// if not hexes then
31597: LD_VAR 0 12
31601: NOT
31602: IFFALSE 31606
// exit ;
31604: GO 32095
// hex := GetHexInfo ( x , y ) ;
31606: LD_ADDR_VAR 0 15
31610: PUSH
31611: LD_VAR 0 3
31615: PPUSH
31616: LD_VAR 0 4
31620: PPUSH
31621: CALL_OW 546
31625: ST_TO_ADDR
// if hex [ 1 ] then
31626: LD_VAR 0 15
31630: PUSH
31631: LD_INT 1
31633: ARRAY
31634: IFFALSE 31638
// exit ;
31636: GO 32095
// height := hex [ 2 ] ;
31638: LD_ADDR_VAR 0 13
31642: PUSH
31643: LD_VAR 0 15
31647: PUSH
31648: LD_INT 2
31650: ARRAY
31651: ST_TO_ADDR
// for i = 1 to hexes do
31652: LD_ADDR_VAR 0 7
31656: PUSH
31657: DOUBLE
31658: LD_INT 1
31660: DEC
31661: ST_TO_ADDR
31662: LD_VAR 0 12
31666: PUSH
31667: FOR_TO
31668: IFFALSE 32012
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31670: LD_VAR 0 12
31674: PUSH
31675: LD_VAR 0 7
31679: ARRAY
31680: PUSH
31681: LD_INT 1
31683: ARRAY
31684: PPUSH
31685: LD_VAR 0 12
31689: PUSH
31690: LD_VAR 0 7
31694: ARRAY
31695: PUSH
31696: LD_INT 2
31698: ARRAY
31699: PPUSH
31700: CALL_OW 488
31704: NOT
31705: IFTRUE 31747
31707: PUSH
31708: LD_VAR 0 12
31712: PUSH
31713: LD_VAR 0 7
31717: ARRAY
31718: PUSH
31719: LD_INT 1
31721: ARRAY
31722: PPUSH
31723: LD_VAR 0 12
31727: PUSH
31728: LD_VAR 0 7
31732: ARRAY
31733: PUSH
31734: LD_INT 2
31736: ARRAY
31737: PPUSH
31738: CALL_OW 428
31742: PUSH
31743: LD_INT 0
31745: GREATER
31746: OR
31747: IFTRUE 31785
31749: PUSH
31750: LD_VAR 0 12
31754: PUSH
31755: LD_VAR 0 7
31759: ARRAY
31760: PUSH
31761: LD_INT 1
31763: ARRAY
31764: PPUSH
31765: LD_VAR 0 12
31769: PUSH
31770: LD_VAR 0 7
31774: ARRAY
31775: PUSH
31776: LD_INT 2
31778: ARRAY
31779: PPUSH
31780: CALL_OW 351
31784: OR
31785: IFFALSE 31791
// exit ;
31787: POP
31788: POP
31789: GO 32095
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31791: LD_ADDR_VAR 0 8
31795: PUSH
31796: LD_VAR 0 12
31800: PUSH
31801: LD_VAR 0 7
31805: ARRAY
31806: PUSH
31807: LD_INT 1
31809: ARRAY
31810: PPUSH
31811: LD_VAR 0 12
31815: PUSH
31816: LD_VAR 0 7
31820: ARRAY
31821: PUSH
31822: LD_INT 2
31824: ARRAY
31825: PPUSH
31826: CALL_OW 546
31830: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31831: LD_VAR 0 8
31835: PUSH
31836: LD_INT 1
31838: ARRAY
31839: IFTRUE 31861
31841: PUSH
31842: LD_VAR 0 8
31846: PUSH
31847: LD_INT 2
31849: ARRAY
31850: PUSH
31851: LD_VAR 0 13
31855: PUSH
31856: LD_INT 2
31858: PLUS
31859: GREATER
31860: OR
31861: IFTRUE 31883
31863: PUSH
31864: LD_VAR 0 8
31868: PUSH
31869: LD_INT 2
31871: ARRAY
31872: PUSH
31873: LD_VAR 0 13
31877: PUSH
31878: LD_INT 2
31880: MINUS
31881: LESS
31882: OR
31883: IFTRUE 31951
31885: PUSH
31886: LD_VAR 0 8
31890: PUSH
31891: LD_INT 3
31893: ARRAY
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 8
31900: PUSH
31901: LD_INT 9
31903: PUSH
31904: LD_INT 10
31906: PUSH
31907: LD_INT 11
31909: PUSH
31910: LD_INT 12
31912: PUSH
31913: LD_INT 13
31915: PUSH
31916: LD_INT 16
31918: PUSH
31919: LD_INT 17
31921: PUSH
31922: LD_INT 18
31924: PUSH
31925: LD_INT 19
31927: PUSH
31928: LD_INT 20
31930: PUSH
31931: LD_INT 21
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: IN
31949: NOT
31950: OR
31951: IFTRUE 31964
31953: PUSH
31954: LD_VAR 0 8
31958: PUSH
31959: LD_INT 5
31961: ARRAY
31962: NOT
31963: OR
31964: IFTRUE 32004
31966: PUSH
31967: LD_VAR 0 8
31971: PUSH
31972: LD_INT 6
31974: ARRAY
31975: PUSH
31976: LD_INT 1
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: LD_INT 7
31984: PUSH
31985: LD_INT 9
31987: PUSH
31988: LD_INT 10
31990: PUSH
31991: LD_INT 11
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: IN
32002: NOT
32003: OR
32004: IFFALSE 32010
// exit ;
32006: POP
32007: POP
32008: GO 32095
// end ;
32010: GO 31667
32012: POP
32013: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32014: LD_VAR 0 9
32018: PPUSH
32019: LD_VAR 0 3
32023: PPUSH
32024: LD_VAR 0 4
32028: PPUSH
32029: LD_INT 20
32031: PPUSH
32032: CALL 23914 0 4
32036: PUSH
32037: LD_INT 4
32039: ARRAY
32040: IFFALSE 32044
// exit ;
32042: GO 32095
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32044: LD_VAR 0 2
32048: PUSH
32049: LD_INT 29
32051: PUSH
32052: LD_INT 30
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: IN
32059: IFFALSE 32083
32061: PUSH
32062: LD_VAR 0 3
32066: PPUSH
32067: LD_VAR 0 4
32071: PPUSH
32072: LD_VAR 0 9
32076: PPUSH
32077: CALL_OW 440
32081: NOT
32082: AND
32083: IFFALSE 32087
// exit ;
32085: GO 32095
// result := true ;
32087: LD_ADDR_VAR 0 6
32091: PUSH
32092: LD_INT 1
32094: ST_TO_ADDR
// end ;
32095: LD_VAR 0 6
32099: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32100: LD_INT 0
32102: PPUSH
32103: PPUSH
32104: PPUSH
32105: PPUSH
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
32114: PPUSH
32115: PPUSH
32116: PPUSH
32117: PPUSH
32118: PPUSH
32119: PPUSH
32120: PPUSH
32121: PPUSH
32122: PPUSH
32123: PPUSH
32124: PPUSH
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
32131: PPUSH
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
32136: PPUSH
32137: PPUSH
32138: PPUSH
32139: PPUSH
32140: PPUSH
32141: PPUSH
32142: PPUSH
32143: PPUSH
32144: PPUSH
32145: PPUSH
32146: PPUSH
32147: PPUSH
32148: PPUSH
32149: PPUSH
32150: PPUSH
32151: PPUSH
32152: PPUSH
32153: PPUSH
32154: PPUSH
32155: PPUSH
32156: PPUSH
32157: PPUSH
32158: PPUSH
32159: PPUSH
// result = [ ] ;
32160: LD_ADDR_VAR 0 7
32164: PUSH
32165: EMPTY
32166: ST_TO_ADDR
// temp_list = [ ] ;
32167: LD_ADDR_VAR 0 9
32171: PUSH
32172: EMPTY
32173: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32174: LD_VAR 0 4
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: LD_INT 3
32190: PUSH
32191: LD_INT 4
32193: PUSH
32194: LD_INT 5
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: IN
32205: NOT
32206: IFTRUE 32249
32208: PUSH
32209: LD_VAR 0 1
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: IN
32224: IFFALSE 32248
32226: PUSH
32227: LD_VAR 0 5
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: LD_INT 3
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: IN
32246: NOT
32247: AND
32248: OR
32249: IFFALSE 32253
// exit ;
32251: GO 50652
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32253: LD_VAR 0 1
32257: PUSH
32258: LD_INT 6
32260: PUSH
32261: LD_INT 7
32263: PUSH
32264: LD_INT 8
32266: PUSH
32267: LD_INT 13
32269: PUSH
32270: LD_INT 12
32272: PUSH
32273: LD_INT 15
32275: PUSH
32276: LD_INT 11
32278: PUSH
32279: LD_INT 14
32281: PUSH
32282: LD_INT 10
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: IN
32296: IFFALSE 32306
// btype = b_lab ;
32298: LD_ADDR_VAR 0 1
32302: PUSH
32303: LD_INT 6
32305: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32306: LD_VAR 0 6
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: LIST
32324: IN
32325: NOT
32326: IFTRUE 32394
32328: PUSH
32329: LD_VAR 0 1
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: LD_INT 2
32342: PUSH
32343: LD_INT 3
32345: PUSH
32346: LD_INT 6
32348: PUSH
32349: LD_INT 36
32351: PUSH
32352: LD_INT 4
32354: PUSH
32355: LD_INT 5
32357: PUSH
32358: LD_INT 31
32360: PUSH
32361: LD_INT 32
32363: PUSH
32364: LD_INT 33
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: IN
32380: NOT
32381: IFFALSE 32393
32383: PUSH
32384: LD_VAR 0 6
32388: PUSH
32389: LD_INT 1
32391: EQUAL
32392: AND
32393: OR
32394: IFTRUE 32426
32396: PUSH
32397: LD_VAR 0 1
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: LD_INT 3
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: IN
32412: NOT
32413: IFFALSE 32425
32415: PUSH
32416: LD_VAR 0 6
32420: PUSH
32421: LD_INT 2
32423: EQUAL
32424: AND
32425: OR
32426: IFFALSE 32436
// mode = 0 ;
32428: LD_ADDR_VAR 0 6
32432: PUSH
32433: LD_INT 0
32435: ST_TO_ADDR
// case mode of 0 :
32436: LD_VAR 0 6
32440: PUSH
32441: LD_INT 0
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32449
32447: GO 43902
32449: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32450: LD_ADDR_VAR 0 11
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 2
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 3
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 3
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32643: LD_ADDR_VAR 0 12
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: LD_INT 1
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: LD_INT 1
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: NEG
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32839: LD_ADDR_VAR 0 13
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: LD_INT 2
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: LD_INT 1
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: NEG
32987: PUSH
32988: LD_INT 3
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 3
32998: NEG
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 3
33010: NEG
33011: PUSH
33012: LD_INT 3
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33038: LD_ADDR_VAR 0 14
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 1
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: LD_INT 1
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 3
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 3
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: LD_INT 2
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33234: LD_ADDR_VAR 0 15
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 0
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: NEG
33347: PUSH
33348: LD_INT 1
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 2
33357: NEG
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: NEG
33369: PUSH
33370: LD_INT 1
33372: NEG
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 3
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33427: LD_ADDR_VAR 0 16
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: LD_INT 2
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: LD_INT 2
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: LD_INT 2
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: LD_INT 1
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: LD_INT 2
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 3
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33620: LD_ADDR_VAR 0 17
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 1
33678: NEG
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 2
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: LD_INT 2
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 2
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: LD_INT 2
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 2
33796: NEG
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: NEG
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: NEG
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33850: LD_ADDR_VAR 0 18
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 0
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 1
33908: NEG
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: NEG
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: PUSH
33933: LD_INT 2
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: LD_INT 2
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 2
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: LD_INT 2
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: NEG
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: NEG
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 2
34049: NEG
34050: PUSH
34051: LD_INT 2
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34080: LD_ADDR_VAR 0 19
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: LD_INT 1
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 1
34138: NEG
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 1
34149: NEG
34150: PUSH
34151: LD_INT 1
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: LD_INT 2
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 1
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: LD_INT 2
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: LD_INT 2
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: NEG
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 2
34267: NEG
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 2
34279: NEG
34280: PUSH
34281: LD_INT 2
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34310: LD_ADDR_VAR 0 20
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: LD_INT 1
34330: NEG
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: LD_INT 1
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 1
34391: NEG
34392: PUSH
34393: LD_INT 2
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: LD_INT 1
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: NEG
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 2
34486: NEG
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 2
34509: NEG
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34540: LD_ADDR_VAR 0 21
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: NEG
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: LD_INT 2
34636: NEG
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: NEG
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: LD_INT 1
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: NEG
34740: PUSH
34741: LD_INT 2
34743: NEG
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34770: LD_ADDR_VAR 0 22
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: NEG
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: LD_INT 2
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 2
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 2
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: LD_INT 2
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 2
34957: NEG
34958: PUSH
34959: LD_INT 1
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 2
34969: NEG
34970: PUSH
34971: LD_INT 2
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35000: LD_ADDR_VAR 0 23
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 2
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 2
35176: NEG
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 2
35187: NEG
35188: PUSH
35189: LD_INT 1
35191: NEG
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 2
35199: NEG
35200: PUSH
35201: LD_INT 2
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: LD_INT 3
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 3
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: LD_INT 2
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35280: LD_ADDR_VAR 0 24
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 2
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 2
35456: NEG
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 2
35467: NEG
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: LD_INT 2
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: PUSH
35492: LD_INT 2
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 3
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 3
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35556: LD_ADDR_VAR 0 25
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: LD_INT 1
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 1
35614: NEG
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: NEG
35638: PUSH
35639: LD_INT 2
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 2
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 2
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: LD_INT 2
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: LD_INT 2
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 2
35732: NEG
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: NEG
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: NEG
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 3
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: LD_INT 3
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35830: LD_ADDR_VAR 0 26
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: LD_INT 2
35915: NEG
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: NEG
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: NEG
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: NEG
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: PUSH
36042: LD_INT 3
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 3
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36106: LD_ADDR_VAR 0 27
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: LD_INT 2
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: LD_INT 2
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 2
36282: NEG
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: NEG
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: LD_INT 2
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 2
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 3
36339: NEG
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 3
36351: NEG
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36386: LD_ADDR_VAR 0 28
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: LD_INT 2
36471: NEG
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 2
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 1
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 2
36585: NEG
36586: PUSH
36587: LD_INT 2
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: LD_INT 3
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 3
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 3
36621: NEG
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 3
36633: NEG
36634: PUSH
36635: LD_INT 2
36637: NEG
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36668: LD_ADDR_VAR 0 29
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 2
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 2
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: LD_INT 2
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: LD_INT 3
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 3
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 3
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: LD_INT 2
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 3
36912: NEG
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36947: LD_ADDR_VAR 0 30
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: NEG
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: NEG
37029: PUSH
37030: LD_INT 2
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: LD_INT 0
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 2
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 3
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: LD_INT 3
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37225: LD_ADDR_VAR 0 31
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: LD_INT 2
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: LD_INT 2
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 2
37414: NEG
37415: PUSH
37416: LD_INT 3
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 3
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: LD_INT 3
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 3
37468: NEG
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37503: LD_ADDR_VAR 0 32
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: NEG
37585: PUSH
37586: LD_INT 2
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 2
37599: NEG
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: LD_INT 1
37610: NEG
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 2
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 2
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 2
37669: NEG
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: NEG
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: LD_INT 3
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 3
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: LD_INT 3
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 3
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37781: LD_ADDR_VAR 0 33
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: LD_INT 1
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: LD_INT 1
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: NEG
37972: PUSH
37973: LD_INT 3
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 2
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: LD_INT 3
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38060: LD_ADDR_VAR 0 34
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: LD_INT 2
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: LD_INT 1
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: LD_INT 2
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: NEG
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: LD_INT 3
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: LD_INT 2
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 3
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: LD_INT 3
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 3
38305: NEG
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38340: LD_ADDR_VAR 0 35
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: LD_INT 1
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38452: LD_ADDR_VAR 0 36
38456: PUSH
38457: LD_INT 0
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38564: LD_ADDR_VAR 0 37
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: NEG
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38676: LD_ADDR_VAR 0 38
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: NEG
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38788: LD_ADDR_VAR 0 39
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38900: LD_ADDR_VAR 0 40
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39012: LD_ADDR_VAR 0 41
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: LD_INT 2
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 2
39178: NEG
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: LD_INT 3
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 3
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 3
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: LD_INT 3
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 3
39286: NEG
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 3
39309: NEG
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 3
39321: NEG
39322: PUSH
39323: LD_INT 3
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39362: LD_ADDR_VAR 0 42
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: LD_INT 2
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: LD_INT 2
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 2
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: NEG
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: LD_INT 2
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: LD_INT 3
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: LD_INT 3
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 3
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 3
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 3
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 3
39659: NEG
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 3
39671: NEG
39672: PUSH
39673: LD_INT 3
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39712: LD_ADDR_VAR 0 43
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 1
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: LD_INT 2
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 2
39889: NEG
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: LD_INT 3
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 3
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 3
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 3
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: LD_INT 3
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 3
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 3
40008: NEG
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 3
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40060: LD_ADDR_VAR 0 44
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: LD_INT 2
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: LD_INT 3
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 3
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 3
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 3
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 3
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 2
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 3
40334: NEG
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 3
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 3
40357: NEG
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 3
40369: NEG
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40410: LD_ADDR_VAR 0 45
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 3
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 3
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 3
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 3
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: LD_INT 3
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 3
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 3
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 3
40707: NEG
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 3
40719: NEG
40720: PUSH
40721: LD_INT 3
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40760: LD_ADDR_VAR 0 46
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 2
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 2
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 2
40937: NEG
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 3
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 3
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 3
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 3
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 3
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 3
41056: NEG
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 3
41067: NEG
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41108: LD_ADDR_VAR 0 47
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: LD_INT 2
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: NEG
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41259: LD_ADDR_VAR 0 48
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41406: LD_ADDR_VAR 0 49
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: LD_INT 2
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41550: LD_ADDR_VAR 0 50
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 2
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41694: LD_ADDR_VAR 0 51
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41841: LD_ADDR_VAR 0 52
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41992: LD_ADDR_VAR 0 53
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 2
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 2
42168: NEG
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 2
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42222: LD_ADDR_VAR 0 54
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 2
42398: NEG
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: LD_INT 1
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: LD_INT 2
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42452: LD_ADDR_VAR 0 55
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 2
42651: NEG
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42682: LD_ADDR_VAR 0 56
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 1
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 2
42778: NEG
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: NEG
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42912: LD_ADDR_VAR 0 57
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: NEG
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43142: LD_ADDR_VAR 0 58
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: LD_INT 2
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43372: LD_ADDR_VAR 0 59
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43460: LD_ADDR_VAR 0 60
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: LD_INT 1
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43548: LD_ADDR_VAR 0 61
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43636: LD_ADDR_VAR 0 62
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43724: LD_ADDR_VAR 0 63
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43812: LD_ADDR_VAR 0 64
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: ST_TO_ADDR
// end ; 1 :
43900: GO 49797
43902: LD_INT 1
43904: DOUBLE
43905: EQUAL
43906: IFTRUE 43910
43908: GO 46533
43910: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43911: LD_ADDR_VAR 0 11
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 3
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 3
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43955: LD_ADDR_VAR 0 12
43959: PUSH
43960: LD_INT 2
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 3
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 3
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43996: LD_ADDR_VAR 0 13
44000: PUSH
44001: LD_INT 3
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: LD_INT 3
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44036: LD_ADDR_VAR 0 14
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 3
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 3
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 2
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: LIST
44076: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44077: LD_ADDR_VAR 0 15
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 3
44106: NEG
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44121: LD_ADDR_VAR 0 16
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: LD_INT 3
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 3
44140: NEG
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 3
44152: NEG
44153: PUSH
44154: LD_INT 3
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: LIST
44166: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44167: LD_ADDR_VAR 0 17
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: LD_INT 3
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: LIST
44210: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44211: LD_ADDR_VAR 0 18
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44252: LD_ADDR_VAR 0 19
44256: PUSH
44257: LD_INT 3
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 3
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44292: LD_ADDR_VAR 0 20
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 3
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: LIST
44332: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44333: LD_ADDR_VAR 0 21
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 3
44351: NEG
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 3
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: LIST
44376: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44377: LD_ADDR_VAR 0 22
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 3
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 3
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 3
44408: NEG
44409: PUSH
44410: LD_INT 3
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: LIST
44422: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44423: LD_ADDR_VAR 0 23
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 3
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: LD_INT 4
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 3
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44467: LD_ADDR_VAR 0 24
44471: PUSH
44472: LD_INT 3
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 3
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 4
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44508: LD_ADDR_VAR 0 25
44512: PUSH
44513: LD_INT 3
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 4
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: LD_INT 4
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: LIST
44547: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44548: LD_ADDR_VAR 0 26
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: LD_INT 4
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: LD_INT 3
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: LIST
44588: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44589: LD_ADDR_VAR 0 27
44593: PUSH
44594: LD_INT 3
44596: NEG
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 3
44607: NEG
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 4
44618: NEG
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: LIST
44632: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44633: LD_ADDR_VAR 0 28
44637: PUSH
44638: LD_INT 3
44640: NEG
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 3
44652: NEG
44653: PUSH
44654: LD_INT 4
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 4
44664: NEG
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44679: LD_ADDR_VAR 0 29
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: LD_INT 3
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 3
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 4
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 4
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 3
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 5
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 5
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 4
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 6
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 6
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 5
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44834: LD_ADDR_VAR 0 30
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 3
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 3
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 4
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 4
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 4
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 5
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 5
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 5
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 6
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 6
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44977: LD_ADDR_VAR 0 31
44981: PUSH
44982: LD_INT 3
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: LD_INT 3
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 4
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 4
45024: PUSH
45025: LD_INT 4
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: LD_INT 4
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 5
45044: PUSH
45045: LD_INT 4
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 5
45054: PUSH
45055: LD_INT 5
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 4
45064: PUSH
45065: LD_INT 5
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 6
45074: PUSH
45075: LD_INT 5
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 6
45084: PUSH
45085: LD_INT 6
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 5
45094: PUSH
45095: LD_INT 6
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45116: LD_ADDR_VAR 0 32
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 4
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 4
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 3
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 5
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 5
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 4
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 6
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: LD_INT 6
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: NEG
45237: PUSH
45238: LD_INT 5
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45259: LD_ADDR_VAR 0 33
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 3
45277: NEG
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 3
45288: NEG
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 3
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 4
45311: NEG
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 4
45322: NEG
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 4
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 5
45345: NEG
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 5
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 5
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 6
45379: NEG
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 6
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45414: LD_ADDR_VAR 0 34
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 3
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 3
45433: NEG
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 3
45445: NEG
45446: PUSH
45447: LD_INT 3
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 3
45457: NEG
45458: PUSH
45459: LD_INT 4
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 4
45469: NEG
45470: PUSH
45471: LD_INT 3
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 4
45481: NEG
45482: PUSH
45483: LD_INT 4
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 4
45493: NEG
45494: PUSH
45495: LD_INT 5
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 5
45505: NEG
45506: PUSH
45507: LD_INT 4
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 5
45517: NEG
45518: PUSH
45519: LD_INT 5
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 5
45529: NEG
45530: PUSH
45531: LD_INT 6
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 6
45541: NEG
45542: PUSH
45543: LD_INT 5
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 6
45553: NEG
45554: PUSH
45555: LD_INT 6
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45577: LD_ADDR_VAR 0 41
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 3
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45621: LD_ADDR_VAR 0 42
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 3
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45662: LD_ADDR_VAR 0 43
45666: PUSH
45667: LD_INT 2
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 3
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: LD_INT 3
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: LIST
45701: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45702: LD_ADDR_VAR 0 44
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45743: LD_ADDR_VAR 0 45
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 3
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: LIST
45786: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45787: LD_ADDR_VAR 0 46
45791: PUSH
45792: LD_INT 2
45794: NEG
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 3
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 3
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45833: LD_ADDR_VAR 0 47
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: LD_INT 3
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 3
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45866: LD_ADDR_VAR 0 48
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45897: LD_ADDR_VAR 0 49
45901: PUSH
45902: LD_INT 3
45904: PUSH
45905: LD_INT 1
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45926: LD_ADDR_VAR 0 50
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45955: LD_ADDR_VAR 0 51
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45986: LD_ADDR_VAR 0 52
45990: PUSH
45991: LD_INT 3
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 3
46005: NEG
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46019: LD_ADDR_VAR 0 53
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 3
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46063: LD_ADDR_VAR 0 54
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46104: LD_ADDR_VAR 0 55
46108: PUSH
46109: LD_INT 3
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: LD_INT 3
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46144: LD_ADDR_VAR 0 56
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 3
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: LIST
46184: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46185: LD_ADDR_VAR 0 57
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 3
46203: NEG
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46229: LD_ADDR_VAR 0 58
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 3
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 3
46260: NEG
46261: PUSH
46262: LD_INT 3
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46275: LD_ADDR_VAR 0 59
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46319: LD_ADDR_VAR 0 60
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46360: LD_ADDR_VAR 0 61
46364: PUSH
46365: LD_INT 2
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 2
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46400: LD_ADDR_VAR 0 62
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: LIST
46440: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46441: LD_ADDR_VAR 0 63
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 2
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46485: LD_ADDR_VAR 0 64
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: ST_TO_ADDR
// end ; 2 :
46531: GO 49797
46533: LD_INT 2
46535: DOUBLE
46536: EQUAL
46537: IFTRUE 46541
46539: GO 49796
46541: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46542: LD_ADDR_VAR 0 29
46546: PUSH
46547: LD_INT 4
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 4
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 5
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 5
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 4
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 3
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 5
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 4
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 4
46672: PUSH
46673: LD_INT 4
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: LD_INT 4
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 4
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: LD_INT 4
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 4
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 3
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 4
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 5
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 5
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: LD_INT 4
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 3
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 5
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: LD_INT 3
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 3
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 4
46881: NEG
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 4
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 4
46904: NEG
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 4
46927: NEG
46928: PUSH
46929: LD_INT 4
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 4
46939: NEG
46940: PUSH
46941: LD_INT 5
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 3
46951: NEG
46952: PUSH
46953: LD_INT 4
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 4
46975: NEG
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 5
46987: NEG
46988: PUSH
46989: LD_INT 4
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 5
46999: NEG
47000: PUSH
47001: LD_INT 5
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: LD_INT 5
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 5
47023: NEG
47024: PUSH
47025: LD_INT 3
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47080: LD_ADDR_VAR 0 30
47084: PUSH
47085: LD_INT 4
47087: PUSH
47088: LD_INT 4
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 4
47097: PUSH
47098: LD_INT 3
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 5
47107: PUSH
47108: LD_INT 4
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 5
47117: PUSH
47118: LD_INT 5
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 4
47127: PUSH
47128: LD_INT 5
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: LD_INT 4
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: PUSH
47148: LD_INT 3
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 5
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: LD_INT 5
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 4
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 4
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 3
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 4
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 4
47270: NEG
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 4
47281: NEG
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: NEG
47294: PUSH
47295: LD_INT 0
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 3
47304: NEG
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 4
47315: NEG
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 5
47326: NEG
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 5
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 5
47349: NEG
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 3
47361: NEG
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: LD_INT 4
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: LD_INT 3
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 3
47420: NEG
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 4
47432: NEG
47433: PUSH
47434: LD_INT 3
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 4
47444: NEG
47445: PUSH
47446: LD_INT 4
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 4
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 4
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: LD_INT 4
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: LD_INT 5
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: LD_INT 4
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 3
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: LD_INT 4
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 5
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 3
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: NEG
47571: PUSH
47572: LD_INT 5
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47627: LD_ADDR_VAR 0 31
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 4
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: LD_INT 4
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: LD_INT 5
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 5
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: LD_INT 4
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: NEG
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: LD_INT 1
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 4
47783: NEG
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 4
47794: NEG
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 4
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 2
47818: NEG
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 4
47829: NEG
47830: PUSH
47831: LD_INT 4
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 4
47841: NEG
47842: PUSH
47843: LD_INT 5
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 3
47853: NEG
47854: PUSH
47855: LD_INT 4
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: LD_INT 3
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 4
47877: NEG
47878: PUSH
47879: LD_INT 3
47881: NEG
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 5
47889: NEG
47890: PUSH
47891: LD_INT 4
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 5
47901: NEG
47902: PUSH
47903: LD_INT 5
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: NEG
47914: PUSH
47915: LD_INT 5
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 5
47925: NEG
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 3
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 4
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 3
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 3
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 4
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: LD_INT 4
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 4
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 4
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 5
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 5
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 4
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 5
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48177: LD_ADDR_VAR 0 32
48181: PUSH
48182: LD_INT 4
48184: NEG
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 4
48195: NEG
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 3
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 4
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 5
48240: NEG
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 5
48251: NEG
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 5
48263: NEG
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 3
48275: NEG
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 3
48298: NEG
48299: PUSH
48300: LD_INT 4
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 2
48310: NEG
48311: PUSH
48312: LD_INT 3
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 4
48346: NEG
48347: PUSH
48348: LD_INT 3
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 4
48358: NEG
48359: PUSH
48360: LD_INT 4
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: NEG
48371: PUSH
48372: LD_INT 4
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 4
48382: NEG
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 4
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: LD_INT 5
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 4
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 3
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 4
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: LD_INT 5
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: LD_INT 3
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: LD_INT 5
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 3
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 3
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 4
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 4
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 3
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 4
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 4
48589: PUSH
48590: LD_INT 4
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 4
48599: PUSH
48600: LD_INT 3
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 5
48609: PUSH
48610: LD_INT 4
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 5
48619: PUSH
48620: LD_INT 5
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 4
48629: PUSH
48630: LD_INT 5
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: LD_INT 4
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 5
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 3
48669: PUSH
48670: LD_INT 5
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48724: LD_ADDR_VAR 0 33
48728: PUSH
48729: LD_INT 4
48731: NEG
48732: PUSH
48733: LD_INT 4
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 4
48743: NEG
48744: PUSH
48745: LD_INT 5
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 3
48755: NEG
48756: PUSH
48757: LD_INT 4
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 3
48767: NEG
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 4
48779: NEG
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 5
48791: NEG
48792: PUSH
48793: LD_INT 4
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 5
48803: NEG
48804: PUSH
48805: LD_INT 5
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 3
48815: NEG
48816: PUSH
48817: LD_INT 5
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 5
48827: NEG
48828: PUSH
48829: LD_INT 3
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 3
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 4
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 3
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 3
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: NEG
48907: PUSH
48908: LD_INT 4
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 4
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 4
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 4
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 5
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 5
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 4
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 3
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 3
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 5
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: LD_INT 3
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 4
49054: PUSH
49055: LD_INT 3
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 4
49064: PUSH
49065: LD_INT 4
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: LD_INT 4
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 3
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 4
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: PUSH
49115: LD_INT 4
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 4
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 3
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 4
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 5
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 5
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 4
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 3
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 5
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: LD_INT 3
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49262: LD_ADDR_VAR 0 34
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: LD_INT 4
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 5
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 4
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 3
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 3
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 4
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 5
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: LD_INT 5
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 3
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 4
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 4
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 4
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 4
49464: PUSH
49465: LD_INT 4
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 4
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 5
49484: PUSH
49485: LD_INT 4
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 5
49494: PUSH
49495: LD_INT 5
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 4
49504: PUSH
49505: LD_INT 5
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: LD_INT 4
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 5
49534: PUSH
49535: LD_INT 3
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 3
49544: PUSH
49545: LD_INT 5
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: LD_INT 3
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 3
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 4
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 4
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 3
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 4
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 4
49647: NEG
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 4
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 3
49670: NEG
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 4
49692: NEG
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 5
49703: NEG
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 5
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 5
49726: NEG
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 3
49738: NEG
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: ST_TO_ADDR
// end ; end ;
49794: GO 49797
49796: POP
// case btype of b_depot , b_warehouse :
49797: LD_VAR 0 1
49801: PUSH
49802: LD_INT 0
49804: DOUBLE
49805: EQUAL
49806: IFTRUE 49816
49808: LD_INT 1
49810: DOUBLE
49811: EQUAL
49812: IFTRUE 49816
49814: GO 50017
49816: POP
// case nation of nation_american :
49817: LD_VAR 0 5
49821: PUSH
49822: LD_INT 1
49824: DOUBLE
49825: EQUAL
49826: IFTRUE 49830
49828: GO 49886
49830: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49831: LD_ADDR_VAR 0 9
49835: PUSH
49836: LD_VAR 0 11
49840: PUSH
49841: LD_VAR 0 12
49845: PUSH
49846: LD_VAR 0 13
49850: PUSH
49851: LD_VAR 0 14
49855: PUSH
49856: LD_VAR 0 15
49860: PUSH
49861: LD_VAR 0 16
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: PUSH
49874: LD_VAR 0 4
49878: PUSH
49879: LD_INT 1
49881: PLUS
49882: ARRAY
49883: ST_TO_ADDR
49884: GO 50015
49886: LD_INT 2
49888: DOUBLE
49889: EQUAL
49890: IFTRUE 49894
49892: GO 49950
49894: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49895: LD_ADDR_VAR 0 9
49899: PUSH
49900: LD_VAR 0 17
49904: PUSH
49905: LD_VAR 0 18
49909: PUSH
49910: LD_VAR 0 19
49914: PUSH
49915: LD_VAR 0 20
49919: PUSH
49920: LD_VAR 0 21
49924: PUSH
49925: LD_VAR 0 22
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: PUSH
49938: LD_VAR 0 4
49942: PUSH
49943: LD_INT 1
49945: PLUS
49946: ARRAY
49947: ST_TO_ADDR
49948: GO 50015
49950: LD_INT 3
49952: DOUBLE
49953: EQUAL
49954: IFTRUE 49958
49956: GO 50014
49958: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49959: LD_ADDR_VAR 0 9
49963: PUSH
49964: LD_VAR 0 23
49968: PUSH
49969: LD_VAR 0 24
49973: PUSH
49974: LD_VAR 0 25
49978: PUSH
49979: LD_VAR 0 26
49983: PUSH
49984: LD_VAR 0 27
49988: PUSH
49989: LD_VAR 0 28
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: PUSH
50002: LD_VAR 0 4
50006: PUSH
50007: LD_INT 1
50009: PLUS
50010: ARRAY
50011: ST_TO_ADDR
50012: GO 50015
50014: POP
50015: GO 50570
50017: LD_INT 2
50019: DOUBLE
50020: EQUAL
50021: IFTRUE 50031
50023: LD_INT 3
50025: DOUBLE
50026: EQUAL
50027: IFTRUE 50031
50029: GO 50087
50031: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50032: LD_ADDR_VAR 0 9
50036: PUSH
50037: LD_VAR 0 29
50041: PUSH
50042: LD_VAR 0 30
50046: PUSH
50047: LD_VAR 0 31
50051: PUSH
50052: LD_VAR 0 32
50056: PUSH
50057: LD_VAR 0 33
50061: PUSH
50062: LD_VAR 0 34
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: PUSH
50075: LD_VAR 0 4
50079: PUSH
50080: LD_INT 1
50082: PLUS
50083: ARRAY
50084: ST_TO_ADDR
50085: GO 50570
50087: LD_INT 16
50089: DOUBLE
50090: EQUAL
50091: IFTRUE 50149
50093: LD_INT 17
50095: DOUBLE
50096: EQUAL
50097: IFTRUE 50149
50099: LD_INT 18
50101: DOUBLE
50102: EQUAL
50103: IFTRUE 50149
50105: LD_INT 19
50107: DOUBLE
50108: EQUAL
50109: IFTRUE 50149
50111: LD_INT 22
50113: DOUBLE
50114: EQUAL
50115: IFTRUE 50149
50117: LD_INT 20
50119: DOUBLE
50120: EQUAL
50121: IFTRUE 50149
50123: LD_INT 21
50125: DOUBLE
50126: EQUAL
50127: IFTRUE 50149
50129: LD_INT 23
50131: DOUBLE
50132: EQUAL
50133: IFTRUE 50149
50135: LD_INT 24
50137: DOUBLE
50138: EQUAL
50139: IFTRUE 50149
50141: LD_INT 25
50143: DOUBLE
50144: EQUAL
50145: IFTRUE 50149
50147: GO 50205
50149: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50150: LD_ADDR_VAR 0 9
50154: PUSH
50155: LD_VAR 0 35
50159: PUSH
50160: LD_VAR 0 36
50164: PUSH
50165: LD_VAR 0 37
50169: PUSH
50170: LD_VAR 0 38
50174: PUSH
50175: LD_VAR 0 39
50179: PUSH
50180: LD_VAR 0 40
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: PUSH
50193: LD_VAR 0 4
50197: PUSH
50198: LD_INT 1
50200: PLUS
50201: ARRAY
50202: ST_TO_ADDR
50203: GO 50570
50205: LD_INT 6
50207: DOUBLE
50208: EQUAL
50209: IFTRUE 50261
50211: LD_INT 7
50213: DOUBLE
50214: EQUAL
50215: IFTRUE 50261
50217: LD_INT 8
50219: DOUBLE
50220: EQUAL
50221: IFTRUE 50261
50223: LD_INT 13
50225: DOUBLE
50226: EQUAL
50227: IFTRUE 50261
50229: LD_INT 12
50231: DOUBLE
50232: EQUAL
50233: IFTRUE 50261
50235: LD_INT 15
50237: DOUBLE
50238: EQUAL
50239: IFTRUE 50261
50241: LD_INT 11
50243: DOUBLE
50244: EQUAL
50245: IFTRUE 50261
50247: LD_INT 14
50249: DOUBLE
50250: EQUAL
50251: IFTRUE 50261
50253: LD_INT 10
50255: DOUBLE
50256: EQUAL
50257: IFTRUE 50261
50259: GO 50317
50261: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50262: LD_ADDR_VAR 0 9
50266: PUSH
50267: LD_VAR 0 41
50271: PUSH
50272: LD_VAR 0 42
50276: PUSH
50277: LD_VAR 0 43
50281: PUSH
50282: LD_VAR 0 44
50286: PUSH
50287: LD_VAR 0 45
50291: PUSH
50292: LD_VAR 0 46
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: PUSH
50305: LD_VAR 0 4
50309: PUSH
50310: LD_INT 1
50312: PLUS
50313: ARRAY
50314: ST_TO_ADDR
50315: GO 50570
50317: LD_INT 36
50319: DOUBLE
50320: EQUAL
50321: IFTRUE 50325
50323: GO 50381
50325: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50326: LD_ADDR_VAR 0 9
50330: PUSH
50331: LD_VAR 0 47
50335: PUSH
50336: LD_VAR 0 48
50340: PUSH
50341: LD_VAR 0 49
50345: PUSH
50346: LD_VAR 0 50
50350: PUSH
50351: LD_VAR 0 51
50355: PUSH
50356: LD_VAR 0 52
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: PUSH
50369: LD_VAR 0 4
50373: PUSH
50374: LD_INT 1
50376: PLUS
50377: ARRAY
50378: ST_TO_ADDR
50379: GO 50570
50381: LD_INT 4
50383: DOUBLE
50384: EQUAL
50385: IFTRUE 50407
50387: LD_INT 5
50389: DOUBLE
50390: EQUAL
50391: IFTRUE 50407
50393: LD_INT 34
50395: DOUBLE
50396: EQUAL
50397: IFTRUE 50407
50399: LD_INT 37
50401: DOUBLE
50402: EQUAL
50403: IFTRUE 50407
50405: GO 50463
50407: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50408: LD_ADDR_VAR 0 9
50412: PUSH
50413: LD_VAR 0 53
50417: PUSH
50418: LD_VAR 0 54
50422: PUSH
50423: LD_VAR 0 55
50427: PUSH
50428: LD_VAR 0 56
50432: PUSH
50433: LD_VAR 0 57
50437: PUSH
50438: LD_VAR 0 58
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: PUSH
50451: LD_VAR 0 4
50455: PUSH
50456: LD_INT 1
50458: PLUS
50459: ARRAY
50460: ST_TO_ADDR
50461: GO 50570
50463: LD_INT 31
50465: DOUBLE
50466: EQUAL
50467: IFTRUE 50513
50469: LD_INT 32
50471: DOUBLE
50472: EQUAL
50473: IFTRUE 50513
50475: LD_INT 33
50477: DOUBLE
50478: EQUAL
50479: IFTRUE 50513
50481: LD_INT 27
50483: DOUBLE
50484: EQUAL
50485: IFTRUE 50513
50487: LD_INT 26
50489: DOUBLE
50490: EQUAL
50491: IFTRUE 50513
50493: LD_INT 28
50495: DOUBLE
50496: EQUAL
50497: IFTRUE 50513
50499: LD_INT 29
50501: DOUBLE
50502: EQUAL
50503: IFTRUE 50513
50505: LD_INT 30
50507: DOUBLE
50508: EQUAL
50509: IFTRUE 50513
50511: GO 50569
50513: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50514: LD_ADDR_VAR 0 9
50518: PUSH
50519: LD_VAR 0 59
50523: PUSH
50524: LD_VAR 0 60
50528: PUSH
50529: LD_VAR 0 61
50533: PUSH
50534: LD_VAR 0 62
50538: PUSH
50539: LD_VAR 0 63
50543: PUSH
50544: LD_VAR 0 64
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: PUSH
50557: LD_VAR 0 4
50561: PUSH
50562: LD_INT 1
50564: PLUS
50565: ARRAY
50566: ST_TO_ADDR
50567: GO 50570
50569: POP
// temp_list2 = [ ] ;
50570: LD_ADDR_VAR 0 10
50574: PUSH
50575: EMPTY
50576: ST_TO_ADDR
// for i in temp_list do
50577: LD_ADDR_VAR 0 8
50581: PUSH
50582: LD_VAR 0 9
50586: PUSH
50587: FOR_IN
50588: IFFALSE 50640
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50590: LD_ADDR_VAR 0 10
50594: PUSH
50595: LD_VAR 0 10
50599: PUSH
50600: LD_VAR 0 8
50604: PUSH
50605: LD_INT 1
50607: ARRAY
50608: PUSH
50609: LD_VAR 0 2
50613: PLUS
50614: PUSH
50615: LD_VAR 0 8
50619: PUSH
50620: LD_INT 2
50622: ARRAY
50623: PUSH
50624: LD_VAR 0 3
50628: PLUS
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: ADD
50637: ST_TO_ADDR
50638: GO 50587
50640: POP
50641: POP
// result = temp_list2 ;
50642: LD_ADDR_VAR 0 7
50646: PUSH
50647: LD_VAR 0 10
50651: ST_TO_ADDR
// end ;
50652: LD_VAR 0 7
50656: RET
// export function EnemyInRange ( unit , dist ) ; begin
50657: LD_INT 0
50659: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50660: LD_ADDR_VAR 0 3
50664: PUSH
50665: LD_VAR 0 1
50669: PPUSH
50670: CALL_OW 255
50674: PPUSH
50675: LD_VAR 0 1
50679: PPUSH
50680: CALL_OW 250
50684: PPUSH
50685: LD_VAR 0 1
50689: PPUSH
50690: CALL_OW 251
50694: PPUSH
50695: LD_VAR 0 2
50699: PPUSH
50700: CALL 23914 0 4
50704: PUSH
50705: LD_INT 4
50707: ARRAY
50708: ST_TO_ADDR
// end ;
50709: LD_VAR 0 3
50713: RET
// export function PlayerSeeMe ( unit ) ; begin
50714: LD_INT 0
50716: PPUSH
// result := See ( your_side , unit ) ;
50717: LD_ADDR_VAR 0 2
50721: PUSH
50722: LD_OWVAR 2
50726: PPUSH
50727: LD_VAR 0 1
50731: PPUSH
50732: CALL_OW 292
50736: ST_TO_ADDR
// end ;
50737: LD_VAR 0 2
50741: RET
// export function ReverseDir ( unit ) ; begin
50742: LD_INT 0
50744: PPUSH
// if not unit then
50745: LD_VAR 0 1
50749: NOT
50750: IFFALSE 50754
// exit ;
50752: GO 50777
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50754: LD_ADDR_VAR 0 2
50758: PUSH
50759: LD_VAR 0 1
50763: PPUSH
50764: CALL_OW 254
50768: PUSH
50769: LD_INT 3
50771: PLUS
50772: PUSH
50773: LD_INT 6
50775: MOD
50776: ST_TO_ADDR
// end ;
50777: LD_VAR 0 2
50781: RET
// export function ReverseArray ( array ) ; var i ; begin
50782: LD_INT 0
50784: PPUSH
50785: PPUSH
// if not array then
50786: LD_VAR 0 1
50790: NOT
50791: IFFALSE 50795
// exit ;
50793: GO 50850
// result := [ ] ;
50795: LD_ADDR_VAR 0 2
50799: PUSH
50800: EMPTY
50801: ST_TO_ADDR
// for i := array downto 1 do
50802: LD_ADDR_VAR 0 3
50806: PUSH
50807: DOUBLE
50808: LD_VAR 0 1
50812: INC
50813: ST_TO_ADDR
50814: LD_INT 1
50816: PUSH
50817: FOR_DOWNTO
50818: IFFALSE 50848
// result := Join ( result , array [ i ] ) ;
50820: LD_ADDR_VAR 0 2
50824: PUSH
50825: LD_VAR 0 2
50829: PPUSH
50830: LD_VAR 0 1
50834: PUSH
50835: LD_VAR 0 3
50839: ARRAY
50840: PPUSH
50841: CALL 55692 0 2
50845: ST_TO_ADDR
50846: GO 50817
50848: POP
50849: POP
// end ;
50850: LD_VAR 0 2
50854: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50855: LD_INT 0
50857: PPUSH
50858: PPUSH
50859: PPUSH
50860: PPUSH
50861: PPUSH
50862: PPUSH
// if not unit or not hexes then
50863: LD_VAR 0 1
50867: NOT
50868: IFTRUE 50877
50870: PUSH
50871: LD_VAR 0 2
50875: NOT
50876: OR
50877: IFFALSE 50881
// exit ;
50879: GO 51004
// dist := 9999 ;
50881: LD_ADDR_VAR 0 5
50885: PUSH
50886: LD_INT 9999
50888: ST_TO_ADDR
// for i = 1 to hexes do
50889: LD_ADDR_VAR 0 4
50893: PUSH
50894: DOUBLE
50895: LD_INT 1
50897: DEC
50898: ST_TO_ADDR
50899: LD_VAR 0 2
50903: PUSH
50904: FOR_TO
50905: IFFALSE 50992
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50907: LD_ADDR_VAR 0 6
50911: PUSH
50912: LD_VAR 0 1
50916: PPUSH
50917: LD_VAR 0 2
50921: PUSH
50922: LD_VAR 0 4
50926: ARRAY
50927: PUSH
50928: LD_INT 1
50930: ARRAY
50931: PPUSH
50932: LD_VAR 0 2
50936: PUSH
50937: LD_VAR 0 4
50941: ARRAY
50942: PUSH
50943: LD_INT 2
50945: ARRAY
50946: PPUSH
50947: CALL_OW 297
50951: ST_TO_ADDR
// if tdist < dist then
50952: LD_VAR 0 6
50956: PUSH
50957: LD_VAR 0 5
50961: LESS
50962: IFFALSE 50990
// begin hex := hexes [ i ] ;
50964: LD_ADDR_VAR 0 8
50968: PUSH
50969: LD_VAR 0 2
50973: PUSH
50974: LD_VAR 0 4
50978: ARRAY
50979: ST_TO_ADDR
// dist := tdist ;
50980: LD_ADDR_VAR 0 5
50984: PUSH
50985: LD_VAR 0 6
50989: ST_TO_ADDR
// end ; end ;
50990: GO 50904
50992: POP
50993: POP
// result := hex ;
50994: LD_ADDR_VAR 0 3
50998: PUSH
50999: LD_VAR 0 8
51003: ST_TO_ADDR
// end ;
51004: LD_VAR 0 3
51008: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51009: LD_INT 0
51011: PPUSH
51012: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51013: LD_VAR 0 1
51017: NOT
51018: IFTRUE 51057
51020: PUSH
51021: LD_VAR 0 1
51025: PUSH
51026: LD_INT 21
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 23
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PPUSH
51050: CALL_OW 69
51054: IN
51055: NOT
51056: OR
51057: IFFALSE 51061
// exit ;
51059: GO 51108
// for i = 1 to 3 do
51061: LD_ADDR_VAR 0 3
51065: PUSH
51066: DOUBLE
51067: LD_INT 1
51069: DEC
51070: ST_TO_ADDR
51071: LD_INT 3
51073: PUSH
51074: FOR_TO
51075: IFFALSE 51106
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51077: LD_VAR 0 1
51081: PPUSH
51082: CALL_OW 250
51086: PPUSH
51087: LD_VAR 0 1
51091: PPUSH
51092: CALL_OW 251
51096: PPUSH
51097: LD_INT 1
51099: PPUSH
51100: CALL_OW 453
51104: GO 51074
51106: POP
51107: POP
// end ;
51108: LD_VAR 0 2
51112: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51113: LD_INT 0
51115: PPUSH
51116: PPUSH
51117: PPUSH
51118: PPUSH
51119: PPUSH
51120: PPUSH
// if not unit or not enemy_unit then
51121: LD_VAR 0 1
51125: NOT
51126: IFTRUE 51135
51128: PUSH
51129: LD_VAR 0 2
51133: NOT
51134: OR
51135: IFFALSE 51139
// exit ;
51137: GO 51610
// if GetLives ( i ) < 250 then
51139: LD_VAR 0 4
51143: PPUSH
51144: CALL_OW 256
51148: PUSH
51149: LD_INT 250
51151: LESS
51152: IFFALSE 51165
// begin ComAutodestruct ( i ) ;
51154: LD_VAR 0 4
51158: PPUSH
51159: CALL 51009 0 1
// exit ;
51163: GO 51610
// end ; x := GetX ( enemy_unit ) ;
51165: LD_ADDR_VAR 0 7
51169: PUSH
51170: LD_VAR 0 2
51174: PPUSH
51175: CALL_OW 250
51179: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51180: LD_ADDR_VAR 0 8
51184: PUSH
51185: LD_VAR 0 2
51189: PPUSH
51190: CALL_OW 251
51194: ST_TO_ADDR
// if not x or not y then
51195: LD_VAR 0 7
51199: NOT
51200: IFTRUE 51209
51202: PUSH
51203: LD_VAR 0 8
51207: NOT
51208: OR
51209: IFFALSE 51213
// exit ;
51211: GO 51610
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51213: LD_ADDR_VAR 0 6
51217: PUSH
51218: LD_VAR 0 7
51222: PPUSH
51223: LD_INT 0
51225: PPUSH
51226: LD_INT 4
51228: PPUSH
51229: CALL_OW 272
51233: PUSH
51234: LD_VAR 0 8
51238: PPUSH
51239: LD_INT 0
51241: PPUSH
51242: LD_INT 4
51244: PPUSH
51245: CALL_OW 273
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_VAR 0 7
51258: PPUSH
51259: LD_INT 1
51261: PPUSH
51262: LD_INT 4
51264: PPUSH
51265: CALL_OW 272
51269: PUSH
51270: LD_VAR 0 8
51274: PPUSH
51275: LD_INT 1
51277: PPUSH
51278: LD_INT 4
51280: PPUSH
51281: CALL_OW 273
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_VAR 0 7
51294: PPUSH
51295: LD_INT 2
51297: PPUSH
51298: LD_INT 4
51300: PPUSH
51301: CALL_OW 272
51305: PUSH
51306: LD_VAR 0 8
51310: PPUSH
51311: LD_INT 2
51313: PPUSH
51314: LD_INT 4
51316: PPUSH
51317: CALL_OW 273
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_VAR 0 7
51330: PPUSH
51331: LD_INT 3
51333: PPUSH
51334: LD_INT 4
51336: PPUSH
51337: CALL_OW 272
51341: PUSH
51342: LD_VAR 0 8
51346: PPUSH
51347: LD_INT 3
51349: PPUSH
51350: LD_INT 4
51352: PPUSH
51353: CALL_OW 273
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_VAR 0 7
51366: PPUSH
51367: LD_INT 4
51369: PPUSH
51370: LD_INT 4
51372: PPUSH
51373: CALL_OW 272
51377: PUSH
51378: LD_VAR 0 8
51382: PPUSH
51383: LD_INT 4
51385: PPUSH
51386: LD_INT 4
51388: PPUSH
51389: CALL_OW 273
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_VAR 0 7
51402: PPUSH
51403: LD_INT 5
51405: PPUSH
51406: LD_INT 4
51408: PPUSH
51409: CALL_OW 272
51413: PUSH
51414: LD_VAR 0 8
51418: PPUSH
51419: LD_INT 5
51421: PPUSH
51422: LD_INT 4
51424: PPUSH
51425: CALL_OW 273
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// for i = tmp downto 1 do
51442: LD_ADDR_VAR 0 4
51446: PUSH
51447: DOUBLE
51448: LD_VAR 0 6
51452: INC
51453: ST_TO_ADDR
51454: LD_INT 1
51456: PUSH
51457: FOR_DOWNTO
51458: IFFALSE 51561
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51460: LD_VAR 0 6
51464: PUSH
51465: LD_VAR 0 4
51469: ARRAY
51470: PUSH
51471: LD_INT 1
51473: ARRAY
51474: PPUSH
51475: LD_VAR 0 6
51479: PUSH
51480: LD_VAR 0 4
51484: ARRAY
51485: PUSH
51486: LD_INT 2
51488: ARRAY
51489: PPUSH
51490: CALL_OW 488
51494: NOT
51495: IFTRUE 51537
51497: PUSH
51498: LD_VAR 0 6
51502: PUSH
51503: LD_VAR 0 4
51507: ARRAY
51508: PUSH
51509: LD_INT 1
51511: ARRAY
51512: PPUSH
51513: LD_VAR 0 6
51517: PUSH
51518: LD_VAR 0 4
51522: ARRAY
51523: PUSH
51524: LD_INT 2
51526: ARRAY
51527: PPUSH
51528: CALL_OW 428
51532: PUSH
51533: LD_INT 0
51535: NONEQUAL
51536: OR
51537: IFFALSE 51559
// tmp := Delete ( tmp , i ) ;
51539: LD_ADDR_VAR 0 6
51543: PUSH
51544: LD_VAR 0 6
51548: PPUSH
51549: LD_VAR 0 4
51553: PPUSH
51554: CALL_OW 3
51558: ST_TO_ADDR
51559: GO 51457
51561: POP
51562: POP
// j := GetClosestHex ( unit , tmp ) ;
51563: LD_ADDR_VAR 0 5
51567: PUSH
51568: LD_VAR 0 1
51572: PPUSH
51573: LD_VAR 0 6
51577: PPUSH
51578: CALL 50855 0 2
51582: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51583: LD_VAR 0 1
51587: PPUSH
51588: LD_VAR 0 5
51592: PUSH
51593: LD_INT 1
51595: ARRAY
51596: PPUSH
51597: LD_VAR 0 5
51601: PUSH
51602: LD_INT 2
51604: ARRAY
51605: PPUSH
51606: CALL_OW 111
// end ;
51610: LD_VAR 0 3
51614: RET
// export function PrepareApemanSoldier ( ) ; begin
51615: LD_INT 0
51617: PPUSH
// uc_nation := 0 ;
51618: LD_ADDR_OWVAR 21
51622: PUSH
51623: LD_INT 0
51625: ST_TO_ADDR
// hc_sex := sex_male ;
51626: LD_ADDR_OWVAR 27
51630: PUSH
51631: LD_INT 1
51633: ST_TO_ADDR
// hc_name :=  ;
51634: LD_ADDR_OWVAR 26
51638: PUSH
51639: LD_STRING 
51641: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51642: LD_ADDR_OWVAR 28
51646: PUSH
51647: LD_INT 15
51649: ST_TO_ADDR
// hc_gallery :=  ;
51650: LD_ADDR_OWVAR 33
51654: PUSH
51655: LD_STRING 
51657: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51658: LD_ADDR_OWVAR 31
51662: PUSH
51663: LD_INT 0
51665: PPUSH
51666: LD_INT 3
51668: PPUSH
51669: CALL_OW 12
51673: PUSH
51674: LD_INT 0
51676: PPUSH
51677: LD_INT 3
51679: PPUSH
51680: CALL_OW 12
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51697: LD_ADDR_OWVAR 29
51701: PUSH
51702: LD_INT 12
51704: PUSH
51705: LD_INT 12
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: ST_TO_ADDR
// end ;
51712: LD_VAR 0 1
51716: RET
// export function PrepareApemanEngineer ( ) ; begin
51717: LD_INT 0
51719: PPUSH
// uc_nation := 0 ;
51720: LD_ADDR_OWVAR 21
51724: PUSH
51725: LD_INT 0
51727: ST_TO_ADDR
// hc_sex := sex_male ;
51728: LD_ADDR_OWVAR 27
51732: PUSH
51733: LD_INT 1
51735: ST_TO_ADDR
// hc_name :=  ;
51736: LD_ADDR_OWVAR 26
51740: PUSH
51741: LD_STRING 
51743: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51744: LD_ADDR_OWVAR 28
51748: PUSH
51749: LD_INT 16
51751: ST_TO_ADDR
// hc_gallery :=  ;
51752: LD_ADDR_OWVAR 33
51756: PUSH
51757: LD_STRING 
51759: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51760: LD_ADDR_OWVAR 31
51764: PUSH
51765: LD_INT 0
51767: PPUSH
51768: LD_INT 3
51770: PPUSH
51771: CALL_OW 12
51775: PUSH
51776: LD_INT 0
51778: PPUSH
51779: LD_INT 3
51781: PPUSH
51782: CALL_OW 12
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51799: LD_ADDR_OWVAR 29
51803: PUSH
51804: LD_INT 12
51806: PUSH
51807: LD_INT 12
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: ST_TO_ADDR
// end ;
51814: LD_VAR 0 1
51818: RET
// export function PrepareApeman ( agressivity ) ; begin
51819: LD_INT 0
51821: PPUSH
// uc_side := 0 ;
51822: LD_ADDR_OWVAR 20
51826: PUSH
51827: LD_INT 0
51829: ST_TO_ADDR
// uc_nation := 0 ;
51830: LD_ADDR_OWVAR 21
51834: PUSH
51835: LD_INT 0
51837: ST_TO_ADDR
// hc_sex := sex_male ;
51838: LD_ADDR_OWVAR 27
51842: PUSH
51843: LD_INT 1
51845: ST_TO_ADDR
// hc_class := class_apeman ;
51846: LD_ADDR_OWVAR 28
51850: PUSH
51851: LD_INT 12
51853: ST_TO_ADDR
// hc_gallery :=  ;
51854: LD_ADDR_OWVAR 33
51858: PUSH
51859: LD_STRING 
51861: ST_TO_ADDR
// hc_name :=  ;
51862: LD_ADDR_OWVAR 26
51866: PUSH
51867: LD_STRING 
51869: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51870: LD_ADDR_OWVAR 29
51874: PUSH
51875: LD_INT 12
51877: PUSH
51878: LD_INT 12
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: ST_TO_ADDR
// if agressivity = 0 then
51885: LD_VAR 0 1
51889: PUSH
51890: LD_INT 0
51892: EQUAL
51893: IFFALSE 51905
// hc_agressivity := 0 else
51895: LD_ADDR_OWVAR 35
51899: PUSH
51900: LD_INT 0
51902: ST_TO_ADDR
51903: GO 51926
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51905: LD_ADDR_OWVAR 35
51909: PUSH
51910: LD_VAR 0 1
51914: NEG
51915: PPUSH
51916: LD_VAR 0 1
51920: PPUSH
51921: CALL_OW 12
51925: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51926: LD_ADDR_OWVAR 31
51930: PUSH
51931: LD_INT 0
51933: PPUSH
51934: LD_INT 3
51936: PPUSH
51937: CALL_OW 12
51941: PUSH
51942: LD_INT 0
51944: PPUSH
51945: LD_INT 3
51947: PPUSH
51948: CALL_OW 12
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: ST_TO_ADDR
// end ;
51965: LD_VAR 0 2
51969: RET
// export function PrepareTiger ( agressivity ) ; begin
51970: LD_INT 0
51972: PPUSH
// uc_side := 0 ;
51973: LD_ADDR_OWVAR 20
51977: PUSH
51978: LD_INT 0
51980: ST_TO_ADDR
// uc_nation := 0 ;
51981: LD_ADDR_OWVAR 21
51985: PUSH
51986: LD_INT 0
51988: ST_TO_ADDR
// InitHc ;
51989: CALL_OW 19
// hc_class := class_tiger ;
51993: LD_ADDR_OWVAR 28
51997: PUSH
51998: LD_INT 14
52000: ST_TO_ADDR
// hc_gallery :=  ;
52001: LD_ADDR_OWVAR 33
52005: PUSH
52006: LD_STRING 
52008: ST_TO_ADDR
// hc_name :=  ;
52009: LD_ADDR_OWVAR 26
52013: PUSH
52014: LD_STRING 
52016: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
52017: LD_ADDR_OWVAR 35
52021: PUSH
52022: LD_VAR 0 1
52026: NEG
52027: PPUSH
52028: LD_VAR 0 1
52032: PPUSH
52033: CALL_OW 12
52037: ST_TO_ADDR
// end ;
52038: LD_VAR 0 2
52042: RET
// export function PrepareEnchidna ( ) ; begin
52043: LD_INT 0
52045: PPUSH
// uc_side := 0 ;
52046: LD_ADDR_OWVAR 20
52050: PUSH
52051: LD_INT 0
52053: ST_TO_ADDR
// uc_nation := 0 ;
52054: LD_ADDR_OWVAR 21
52058: PUSH
52059: LD_INT 0
52061: ST_TO_ADDR
// InitHc ;
52062: CALL_OW 19
// hc_class := class_baggie ;
52066: LD_ADDR_OWVAR 28
52070: PUSH
52071: LD_INT 13
52073: ST_TO_ADDR
// hc_gallery :=  ;
52074: LD_ADDR_OWVAR 33
52078: PUSH
52079: LD_STRING 
52081: ST_TO_ADDR
// hc_name :=  ;
52082: LD_ADDR_OWVAR 26
52086: PUSH
52087: LD_STRING 
52089: ST_TO_ADDR
// end ;
52090: LD_VAR 0 1
52094: RET
// export function PrepareFrog ( ) ; begin
52095: LD_INT 0
52097: PPUSH
// uc_side := 0 ;
52098: LD_ADDR_OWVAR 20
52102: PUSH
52103: LD_INT 0
52105: ST_TO_ADDR
// uc_nation := 0 ;
52106: LD_ADDR_OWVAR 21
52110: PUSH
52111: LD_INT 0
52113: ST_TO_ADDR
// InitHc ;
52114: CALL_OW 19
// hc_class := class_frog ;
52118: LD_ADDR_OWVAR 28
52122: PUSH
52123: LD_INT 19
52125: ST_TO_ADDR
// hc_gallery :=  ;
52126: LD_ADDR_OWVAR 33
52130: PUSH
52131: LD_STRING 
52133: ST_TO_ADDR
// hc_name :=  ;
52134: LD_ADDR_OWVAR 26
52138: PUSH
52139: LD_STRING 
52141: ST_TO_ADDR
// end ;
52142: LD_VAR 0 1
52146: RET
// export function PrepareFish ( ) ; begin
52147: LD_INT 0
52149: PPUSH
// uc_side := 0 ;
52150: LD_ADDR_OWVAR 20
52154: PUSH
52155: LD_INT 0
52157: ST_TO_ADDR
// uc_nation := 0 ;
52158: LD_ADDR_OWVAR 21
52162: PUSH
52163: LD_INT 0
52165: ST_TO_ADDR
// InitHc ;
52166: CALL_OW 19
// hc_class := class_fish ;
52170: LD_ADDR_OWVAR 28
52174: PUSH
52175: LD_INT 20
52177: ST_TO_ADDR
// hc_gallery :=  ;
52178: LD_ADDR_OWVAR 33
52182: PUSH
52183: LD_STRING 
52185: ST_TO_ADDR
// hc_name :=  ;
52186: LD_ADDR_OWVAR 26
52190: PUSH
52191: LD_STRING 
52193: ST_TO_ADDR
// end ;
52194: LD_VAR 0 1
52198: RET
// export function PrepareBird ( ) ; begin
52199: LD_INT 0
52201: PPUSH
// uc_side := 0 ;
52202: LD_ADDR_OWVAR 20
52206: PUSH
52207: LD_INT 0
52209: ST_TO_ADDR
// uc_nation := 0 ;
52210: LD_ADDR_OWVAR 21
52214: PUSH
52215: LD_INT 0
52217: ST_TO_ADDR
// InitHc ;
52218: CALL_OW 19
// hc_class := class_phororhacos ;
52222: LD_ADDR_OWVAR 28
52226: PUSH
52227: LD_INT 18
52229: ST_TO_ADDR
// hc_gallery :=  ;
52230: LD_ADDR_OWVAR 33
52234: PUSH
52235: LD_STRING 
52237: ST_TO_ADDR
// hc_name :=  ;
52238: LD_ADDR_OWVAR 26
52242: PUSH
52243: LD_STRING 
52245: ST_TO_ADDR
// end ;
52246: LD_VAR 0 1
52250: RET
// export function PrepareHorse ( ) ; begin
52251: LD_INT 0
52253: PPUSH
// uc_side := 0 ;
52254: LD_ADDR_OWVAR 20
52258: PUSH
52259: LD_INT 0
52261: ST_TO_ADDR
// uc_nation := 0 ;
52262: LD_ADDR_OWVAR 21
52266: PUSH
52267: LD_INT 0
52269: ST_TO_ADDR
// InitHc ;
52270: CALL_OW 19
// hc_class := class_horse ;
52274: LD_ADDR_OWVAR 28
52278: PUSH
52279: LD_INT 21
52281: ST_TO_ADDR
// hc_gallery :=  ;
52282: LD_ADDR_OWVAR 33
52286: PUSH
52287: LD_STRING 
52289: ST_TO_ADDR
// hc_name :=  ;
52290: LD_ADDR_OWVAR 26
52294: PUSH
52295: LD_STRING 
52297: ST_TO_ADDR
// end ;
52298: LD_VAR 0 1
52302: RET
// export function PrepareMastodont ( ) ; begin
52303: LD_INT 0
52305: PPUSH
// uc_side := 0 ;
52306: LD_ADDR_OWVAR 20
52310: PUSH
52311: LD_INT 0
52313: ST_TO_ADDR
// uc_nation := 0 ;
52314: LD_ADDR_OWVAR 21
52318: PUSH
52319: LD_INT 0
52321: ST_TO_ADDR
// vc_chassis := class_mastodont ;
52322: LD_ADDR_OWVAR 37
52326: PUSH
52327: LD_INT 31
52329: ST_TO_ADDR
// vc_control := control_rider ;
52330: LD_ADDR_OWVAR 38
52334: PUSH
52335: LD_INT 4
52337: ST_TO_ADDR
// end ;
52338: LD_VAR 0 1
52342: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52343: LD_INT 0
52345: PPUSH
52346: PPUSH
52347: PPUSH
// uc_side = 0 ;
52348: LD_ADDR_OWVAR 20
52352: PUSH
52353: LD_INT 0
52355: ST_TO_ADDR
// uc_nation = 0 ;
52356: LD_ADDR_OWVAR 21
52360: PUSH
52361: LD_INT 0
52363: ST_TO_ADDR
// InitHc_All ( ) ;
52364: CALL_OW 584
// InitVc ;
52368: CALL_OW 20
// if mastodonts then
52372: LD_VAR 0 6
52376: IFFALSE 52443
// for i = 1 to mastodonts do
52378: LD_ADDR_VAR 0 11
52382: PUSH
52383: DOUBLE
52384: LD_INT 1
52386: DEC
52387: ST_TO_ADDR
52388: LD_VAR 0 6
52392: PUSH
52393: FOR_TO
52394: IFFALSE 52441
// begin vc_chassis := 31 ;
52396: LD_ADDR_OWVAR 37
52400: PUSH
52401: LD_INT 31
52403: ST_TO_ADDR
// vc_control := control_rider ;
52404: LD_ADDR_OWVAR 38
52408: PUSH
52409: LD_INT 4
52411: ST_TO_ADDR
// animal := CreateVehicle ;
52412: LD_ADDR_VAR 0 12
52416: PUSH
52417: CALL_OW 45
52421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52422: LD_VAR 0 12
52426: PPUSH
52427: LD_VAR 0 8
52431: PPUSH
52432: LD_INT 0
52434: PPUSH
52435: CALL 54585 0 3
// end ;
52439: GO 52393
52441: POP
52442: POP
// if horses then
52443: LD_VAR 0 5
52447: IFFALSE 52514
// for i = 1 to horses do
52449: LD_ADDR_VAR 0 11
52453: PUSH
52454: DOUBLE
52455: LD_INT 1
52457: DEC
52458: ST_TO_ADDR
52459: LD_VAR 0 5
52463: PUSH
52464: FOR_TO
52465: IFFALSE 52512
// begin hc_class := 21 ;
52467: LD_ADDR_OWVAR 28
52471: PUSH
52472: LD_INT 21
52474: ST_TO_ADDR
// hc_gallery :=  ;
52475: LD_ADDR_OWVAR 33
52479: PUSH
52480: LD_STRING 
52482: ST_TO_ADDR
// animal := CreateHuman ;
52483: LD_ADDR_VAR 0 12
52487: PUSH
52488: CALL_OW 44
52492: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52493: LD_VAR 0 12
52497: PPUSH
52498: LD_VAR 0 8
52502: PPUSH
52503: LD_INT 0
52505: PPUSH
52506: CALL 54585 0 3
// end ;
52510: GO 52464
52512: POP
52513: POP
// if birds then
52514: LD_VAR 0 1
52518: IFFALSE 52585
// for i = 1 to birds do
52520: LD_ADDR_VAR 0 11
52524: PUSH
52525: DOUBLE
52526: LD_INT 1
52528: DEC
52529: ST_TO_ADDR
52530: LD_VAR 0 1
52534: PUSH
52535: FOR_TO
52536: IFFALSE 52583
// begin hc_class := 18 ;
52538: LD_ADDR_OWVAR 28
52542: PUSH
52543: LD_INT 18
52545: ST_TO_ADDR
// hc_gallery =  ;
52546: LD_ADDR_OWVAR 33
52550: PUSH
52551: LD_STRING 
52553: ST_TO_ADDR
// animal := CreateHuman ;
52554: LD_ADDR_VAR 0 12
52558: PUSH
52559: CALL_OW 44
52563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52564: LD_VAR 0 12
52568: PPUSH
52569: LD_VAR 0 8
52573: PPUSH
52574: LD_INT 0
52576: PPUSH
52577: CALL 54585 0 3
// end ;
52581: GO 52535
52583: POP
52584: POP
// if tigers then
52585: LD_VAR 0 2
52589: IFFALSE 52673
// for i = 1 to tigers do
52591: LD_ADDR_VAR 0 11
52595: PUSH
52596: DOUBLE
52597: LD_INT 1
52599: DEC
52600: ST_TO_ADDR
52601: LD_VAR 0 2
52605: PUSH
52606: FOR_TO
52607: IFFALSE 52671
// begin hc_class = class_tiger ;
52609: LD_ADDR_OWVAR 28
52613: PUSH
52614: LD_INT 14
52616: ST_TO_ADDR
// hc_gallery =  ;
52617: LD_ADDR_OWVAR 33
52621: PUSH
52622: LD_STRING 
52624: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52625: LD_ADDR_OWVAR 35
52629: PUSH
52630: LD_INT 7
52632: NEG
52633: PPUSH
52634: LD_INT 7
52636: PPUSH
52637: CALL_OW 12
52641: ST_TO_ADDR
// animal := CreateHuman ;
52642: LD_ADDR_VAR 0 12
52646: PUSH
52647: CALL_OW 44
52651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52652: LD_VAR 0 12
52656: PPUSH
52657: LD_VAR 0 8
52661: PPUSH
52662: LD_INT 0
52664: PPUSH
52665: CALL 54585 0 3
// end ;
52669: GO 52606
52671: POP
52672: POP
// if apemans then
52673: LD_VAR 0 3
52677: IFFALSE 52800
// for i = 1 to apemans do
52679: LD_ADDR_VAR 0 11
52683: PUSH
52684: DOUBLE
52685: LD_INT 1
52687: DEC
52688: ST_TO_ADDR
52689: LD_VAR 0 3
52693: PUSH
52694: FOR_TO
52695: IFFALSE 52798
// begin hc_class = class_apeman ;
52697: LD_ADDR_OWVAR 28
52701: PUSH
52702: LD_INT 12
52704: ST_TO_ADDR
// hc_gallery =  ;
52705: LD_ADDR_OWVAR 33
52709: PUSH
52710: LD_STRING 
52712: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52713: LD_ADDR_OWVAR 35
52717: PUSH
52718: LD_INT 2
52720: NEG
52721: PPUSH
52722: LD_INT 2
52724: PPUSH
52725: CALL_OW 12
52729: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52730: LD_ADDR_OWVAR 31
52734: PUSH
52735: LD_INT 1
52737: PPUSH
52738: LD_INT 3
52740: PPUSH
52741: CALL_OW 12
52745: PUSH
52746: LD_INT 1
52748: PPUSH
52749: LD_INT 3
52751: PPUSH
52752: CALL_OW 12
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: ST_TO_ADDR
// animal := CreateHuman ;
52769: LD_ADDR_VAR 0 12
52773: PUSH
52774: CALL_OW 44
52778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52779: LD_VAR 0 12
52783: PPUSH
52784: LD_VAR 0 8
52788: PPUSH
52789: LD_INT 0
52791: PPUSH
52792: CALL 54585 0 3
// end ;
52796: GO 52694
52798: POP
52799: POP
// if enchidnas then
52800: LD_VAR 0 4
52804: IFFALSE 52871
// for i = 1 to enchidnas do
52806: LD_ADDR_VAR 0 11
52810: PUSH
52811: DOUBLE
52812: LD_INT 1
52814: DEC
52815: ST_TO_ADDR
52816: LD_VAR 0 4
52820: PUSH
52821: FOR_TO
52822: IFFALSE 52869
// begin hc_class = 13 ;
52824: LD_ADDR_OWVAR 28
52828: PUSH
52829: LD_INT 13
52831: ST_TO_ADDR
// hc_gallery =  ;
52832: LD_ADDR_OWVAR 33
52836: PUSH
52837: LD_STRING 
52839: ST_TO_ADDR
// animal := CreateHuman ;
52840: LD_ADDR_VAR 0 12
52844: PUSH
52845: CALL_OW 44
52849: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52850: LD_VAR 0 12
52854: PPUSH
52855: LD_VAR 0 8
52859: PPUSH
52860: LD_INT 0
52862: PPUSH
52863: CALL 54585 0 3
// end ;
52867: GO 52821
52869: POP
52870: POP
// if fishes then
52871: LD_VAR 0 7
52875: IFFALSE 52942
// for i = 1 to fishes do
52877: LD_ADDR_VAR 0 11
52881: PUSH
52882: DOUBLE
52883: LD_INT 1
52885: DEC
52886: ST_TO_ADDR
52887: LD_VAR 0 7
52891: PUSH
52892: FOR_TO
52893: IFFALSE 52940
// begin hc_class = 20 ;
52895: LD_ADDR_OWVAR 28
52899: PUSH
52900: LD_INT 20
52902: ST_TO_ADDR
// hc_gallery =  ;
52903: LD_ADDR_OWVAR 33
52907: PUSH
52908: LD_STRING 
52910: ST_TO_ADDR
// animal := CreateHuman ;
52911: LD_ADDR_VAR 0 12
52915: PUSH
52916: CALL_OW 44
52920: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52921: LD_VAR 0 12
52925: PPUSH
52926: LD_VAR 0 9
52930: PPUSH
52931: LD_INT 0
52933: PPUSH
52934: CALL 54585 0 3
// end ;
52938: GO 52892
52940: POP
52941: POP
// end ;
52942: LD_VAR 0 10
52946: RET
// export function WantHeal ( sci , unit ) ; begin
52947: LD_INT 0
52949: PPUSH
// if GetTaskList ( sci ) > 0 then
52950: LD_VAR 0 1
52954: PPUSH
52955: CALL_OW 437
52959: PUSH
52960: LD_INT 0
52962: GREATER
52963: IFFALSE 53035
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52965: LD_VAR 0 1
52969: PPUSH
52970: CALL_OW 437
52974: PUSH
52975: LD_INT 1
52977: ARRAY
52978: PUSH
52979: LD_INT 1
52981: ARRAY
52982: PUSH
52983: LD_STRING l
52985: EQUAL
52986: IFFALSE 53013
52988: PUSH
52989: LD_VAR 0 1
52993: PPUSH
52994: CALL_OW 437
52998: PUSH
52999: LD_INT 1
53001: ARRAY
53002: PUSH
53003: LD_INT 4
53005: ARRAY
53006: PUSH
53007: LD_VAR 0 2
53011: EQUAL
53012: AND
53013: IFFALSE 53025
// result := true else
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: LD_INT 1
53022: ST_TO_ADDR
53023: GO 53033
// result := false ;
53025: LD_ADDR_VAR 0 3
53029: PUSH
53030: LD_INT 0
53032: ST_TO_ADDR
// end else
53033: GO 53043
// result := false ;
53035: LD_ADDR_VAR 0 3
53039: PUSH
53040: LD_INT 0
53042: ST_TO_ADDR
// end ;
53043: LD_VAR 0 3
53047: RET
// export function HealTarget ( sci ) ; begin
53048: LD_INT 0
53050: PPUSH
// if not sci then
53051: LD_VAR 0 1
53055: NOT
53056: IFFALSE 53060
// exit ;
53058: GO 53125
// result := 0 ;
53060: LD_ADDR_VAR 0 2
53064: PUSH
53065: LD_INT 0
53067: ST_TO_ADDR
// if GetTaskList ( sci ) then
53068: LD_VAR 0 1
53072: PPUSH
53073: CALL_OW 437
53077: IFFALSE 53125
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53079: LD_VAR 0 1
53083: PPUSH
53084: CALL_OW 437
53088: PUSH
53089: LD_INT 1
53091: ARRAY
53092: PUSH
53093: LD_INT 1
53095: ARRAY
53096: PUSH
53097: LD_STRING l
53099: EQUAL
53100: IFFALSE 53125
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53102: LD_ADDR_VAR 0 2
53106: PUSH
53107: LD_VAR 0 1
53111: PPUSH
53112: CALL_OW 437
53116: PUSH
53117: LD_INT 1
53119: ARRAY
53120: PUSH
53121: LD_INT 4
53123: ARRAY
53124: ST_TO_ADDR
// end ;
53125: LD_VAR 0 2
53129: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53130: LD_INT 0
53132: PPUSH
53133: PPUSH
53134: PPUSH
53135: PPUSH
// if not base_units then
53136: LD_VAR 0 1
53140: NOT
53141: IFFALSE 53145
// exit ;
53143: GO 53232
// result := false ;
53145: LD_ADDR_VAR 0 2
53149: PUSH
53150: LD_INT 0
53152: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53153: LD_ADDR_VAR 0 5
53157: PUSH
53158: LD_VAR 0 1
53162: PPUSH
53163: LD_INT 21
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PPUSH
53173: CALL_OW 72
53177: ST_TO_ADDR
// if not tmp then
53178: LD_VAR 0 5
53182: NOT
53183: IFFALSE 53187
// exit ;
53185: GO 53232
// for i in tmp do
53187: LD_ADDR_VAR 0 3
53191: PUSH
53192: LD_VAR 0 5
53196: PUSH
53197: FOR_IN
53198: IFFALSE 53230
// begin result := EnemyInRange ( i , 22 ) ;
53200: LD_ADDR_VAR 0 2
53204: PUSH
53205: LD_VAR 0 3
53209: PPUSH
53210: LD_INT 22
53212: PPUSH
53213: CALL 50657 0 2
53217: ST_TO_ADDR
// if result then
53218: LD_VAR 0 2
53222: IFFALSE 53228
// exit ;
53224: POP
53225: POP
53226: GO 53232
// end ;
53228: GO 53197
53230: POP
53231: POP
// end ;
53232: LD_VAR 0 2
53236: RET
// export function FilterByTag ( units , tag ) ; begin
53237: LD_INT 0
53239: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53240: LD_ADDR_VAR 0 3
53244: PUSH
53245: LD_VAR 0 1
53249: PPUSH
53250: LD_INT 120
53252: PUSH
53253: LD_VAR 0 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PPUSH
53262: CALL_OW 72
53266: ST_TO_ADDR
// end ;
53267: LD_VAR 0 3
53271: RET
// export function IsDriver ( un ) ; begin
53272: LD_INT 0
53274: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53275: LD_ADDR_VAR 0 2
53279: PUSH
53280: LD_VAR 0 1
53284: PUSH
53285: LD_INT 55
53287: PUSH
53288: EMPTY
53289: LIST
53290: PPUSH
53291: CALL_OW 69
53295: IN
53296: ST_TO_ADDR
// end ;
53297: LD_VAR 0 2
53301: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53302: LD_INT 0
53304: PPUSH
53305: PPUSH
// list := [ ] ;
53306: LD_ADDR_VAR 0 5
53310: PUSH
53311: EMPTY
53312: ST_TO_ADDR
// case d of 0 :
53313: LD_VAR 0 3
53317: PUSH
53318: LD_INT 0
53320: DOUBLE
53321: EQUAL
53322: IFTRUE 53326
53324: GO 53459
53326: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53327: LD_ADDR_VAR 0 5
53331: PUSH
53332: LD_VAR 0 1
53336: PUSH
53337: LD_INT 4
53339: MINUS
53340: PUSH
53341: LD_VAR 0 2
53345: PUSH
53346: LD_INT 4
53348: MINUS
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: PUSH
53358: LD_VAR 0 1
53362: PUSH
53363: LD_INT 3
53365: MINUS
53366: PUSH
53367: LD_VAR 0 2
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: PUSH
53380: LD_VAR 0 1
53384: PUSH
53385: LD_INT 4
53387: PLUS
53388: PUSH
53389: LD_VAR 0 2
53393: PUSH
53394: LD_INT 4
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: PUSH
53402: LD_VAR 0 1
53406: PUSH
53407: LD_INT 3
53409: PLUS
53410: PUSH
53411: LD_VAR 0 2
53415: PUSH
53416: LD_INT 3
53418: PLUS
53419: PUSH
53420: LD_INT 5
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: PUSH
53428: LD_VAR 0 1
53432: PUSH
53433: LD_VAR 0 2
53437: PUSH
53438: LD_INT 4
53440: PLUS
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: ST_TO_ADDR
// end ; 1 :
53457: GO 54157
53459: LD_INT 1
53461: DOUBLE
53462: EQUAL
53463: IFTRUE 53467
53465: GO 53600
53467: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53468: LD_ADDR_VAR 0 5
53472: PUSH
53473: LD_VAR 0 1
53477: PUSH
53478: LD_VAR 0 2
53482: PUSH
53483: LD_INT 4
53485: MINUS
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: LIST
53494: PUSH
53495: LD_VAR 0 1
53499: PUSH
53500: LD_INT 3
53502: MINUS
53503: PUSH
53504: LD_VAR 0 2
53508: PUSH
53509: LD_INT 3
53511: MINUS
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: PUSH
53521: LD_VAR 0 1
53525: PUSH
53526: LD_INT 4
53528: MINUS
53529: PUSH
53530: LD_VAR 0 2
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: PUSH
53543: LD_VAR 0 1
53547: PUSH
53548: LD_VAR 0 2
53552: PUSH
53553: LD_INT 3
53555: PLUS
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: PUSH
53565: LD_VAR 0 1
53569: PUSH
53570: LD_INT 4
53572: PLUS
53573: PUSH
53574: LD_VAR 0 2
53578: PUSH
53579: LD_INT 4
53581: PLUS
53582: PUSH
53583: LD_INT 5
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: ST_TO_ADDR
// end ; 2 :
53598: GO 54157
53600: LD_INT 2
53602: DOUBLE
53603: EQUAL
53604: IFTRUE 53608
53606: GO 53737
53608: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53609: LD_ADDR_VAR 0 5
53613: PUSH
53614: LD_VAR 0 1
53618: PUSH
53619: LD_VAR 0 2
53623: PUSH
53624: LD_INT 3
53626: MINUS
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: LIST
53635: PUSH
53636: LD_VAR 0 1
53640: PUSH
53641: LD_INT 4
53643: PLUS
53644: PUSH
53645: LD_VAR 0 2
53649: PUSH
53650: LD_INT 4
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: PUSH
53658: LD_VAR 0 1
53662: PUSH
53663: LD_VAR 0 2
53667: PUSH
53668: LD_INT 4
53670: PLUS
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: PUSH
53680: LD_VAR 0 1
53684: PUSH
53685: LD_INT 3
53687: MINUS
53688: PUSH
53689: LD_VAR 0 2
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: LIST
53701: PUSH
53702: LD_VAR 0 1
53706: PUSH
53707: LD_INT 4
53709: MINUS
53710: PUSH
53711: LD_VAR 0 2
53715: PUSH
53716: LD_INT 4
53718: MINUS
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: LIST
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: ST_TO_ADDR
// end ; 3 :
53735: GO 54157
53737: LD_INT 3
53739: DOUBLE
53740: EQUAL
53741: IFTRUE 53745
53743: GO 53878
53745: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53746: LD_ADDR_VAR 0 5
53750: PUSH
53751: LD_VAR 0 1
53755: PUSH
53756: LD_INT 3
53758: PLUS
53759: PUSH
53760: LD_VAR 0 2
53764: PUSH
53765: LD_INT 4
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: LIST
53772: PUSH
53773: LD_VAR 0 1
53777: PUSH
53778: LD_INT 4
53780: PLUS
53781: PUSH
53782: LD_VAR 0 2
53786: PUSH
53787: LD_INT 4
53789: PLUS
53790: PUSH
53791: LD_INT 5
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: LIST
53798: PUSH
53799: LD_VAR 0 1
53803: PUSH
53804: LD_INT 4
53806: MINUS
53807: PUSH
53808: LD_VAR 0 2
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: LIST
53820: PUSH
53821: LD_VAR 0 1
53825: PUSH
53826: LD_VAR 0 2
53830: PUSH
53831: LD_INT 4
53833: MINUS
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: LIST
53842: PUSH
53843: LD_VAR 0 1
53847: PUSH
53848: LD_INT 3
53850: MINUS
53851: PUSH
53852: LD_VAR 0 2
53856: PUSH
53857: LD_INT 3
53859: MINUS
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: LIST
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: ST_TO_ADDR
// end ; 4 :
53876: GO 54157
53878: LD_INT 4
53880: DOUBLE
53881: EQUAL
53882: IFTRUE 53886
53884: GO 54019
53886: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53887: LD_ADDR_VAR 0 5
53891: PUSH
53892: LD_VAR 0 1
53896: PUSH
53897: LD_VAR 0 2
53901: PUSH
53902: LD_INT 4
53904: PLUS
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: LIST
53913: PUSH
53914: LD_VAR 0 1
53918: PUSH
53919: LD_INT 3
53921: PLUS
53922: PUSH
53923: LD_VAR 0 2
53927: PUSH
53928: LD_INT 3
53930: PLUS
53931: PUSH
53932: LD_INT 5
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: PUSH
53940: LD_VAR 0 1
53944: PUSH
53945: LD_INT 4
53947: PLUS
53948: PUSH
53949: LD_VAR 0 2
53953: PUSH
53954: LD_INT 4
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: LIST
53961: PUSH
53962: LD_VAR 0 1
53966: PUSH
53967: LD_VAR 0 2
53971: PUSH
53972: LD_INT 3
53974: MINUS
53975: PUSH
53976: LD_INT 3
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: PUSH
53984: LD_VAR 0 1
53988: PUSH
53989: LD_INT 4
53991: MINUS
53992: PUSH
53993: LD_VAR 0 2
53997: PUSH
53998: LD_INT 4
54000: MINUS
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: ST_TO_ADDR
// end ; 5 :
54017: GO 54157
54019: LD_INT 5
54021: DOUBLE
54022: EQUAL
54023: IFTRUE 54027
54025: GO 54156
54027: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54028: LD_ADDR_VAR 0 5
54032: PUSH
54033: LD_VAR 0 1
54037: PUSH
54038: LD_INT 4
54040: MINUS
54041: PUSH
54042: LD_VAR 0 2
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: LIST
54054: PUSH
54055: LD_VAR 0 1
54059: PUSH
54060: LD_VAR 0 2
54064: PUSH
54065: LD_INT 4
54067: MINUS
54068: PUSH
54069: LD_INT 3
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: LIST
54076: PUSH
54077: LD_VAR 0 1
54081: PUSH
54082: LD_INT 4
54084: PLUS
54085: PUSH
54086: LD_VAR 0 2
54090: PUSH
54091: LD_INT 4
54093: PLUS
54094: PUSH
54095: LD_INT 5
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: PUSH
54103: LD_VAR 0 1
54107: PUSH
54108: LD_INT 3
54110: PLUS
54111: PUSH
54112: LD_VAR 0 2
54116: PUSH
54117: LD_INT 4
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: PUSH
54125: LD_VAR 0 1
54129: PUSH
54130: LD_VAR 0 2
54134: PUSH
54135: LD_INT 3
54137: PLUS
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// end ; end ;
54154: GO 54157
54156: POP
// result := list ;
54157: LD_ADDR_VAR 0 4
54161: PUSH
54162: LD_VAR 0 5
54166: ST_TO_ADDR
// end ;
54167: LD_VAR 0 4
54171: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54172: LD_INT 0
54174: PPUSH
54175: PPUSH
54176: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54177: LD_VAR 0 1
54181: NOT
54182: IFTRUE 54210
54184: PUSH
54185: LD_VAR 0 2
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 2
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: LD_INT 4
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: IN
54208: NOT
54209: OR
54210: IFFALSE 54214
// exit ;
54212: GO 54297
// tmp := [ ] ;
54214: LD_ADDR_VAR 0 5
54218: PUSH
54219: EMPTY
54220: ST_TO_ADDR
// for i in units do
54221: LD_ADDR_VAR 0 4
54225: PUSH
54226: LD_VAR 0 1
54230: PUSH
54231: FOR_IN
54232: IFFALSE 54266
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
54234: LD_ADDR_VAR 0 5
54238: PUSH
54239: LD_VAR 0 5
54243: PPUSH
54244: LD_VAR 0 4
54248: PPUSH
54249: LD_VAR 0 2
54253: PPUSH
54254: CALL_OW 259
54258: PPUSH
54259: CALL 55692 0 2
54263: ST_TO_ADDR
54264: GO 54231
54266: POP
54267: POP
// if not tmp then
54268: LD_VAR 0 5
54272: NOT
54273: IFFALSE 54277
// exit ;
54275: GO 54297
// result := SortListByListDesc ( units , tmp ) ;
54277: LD_ADDR_VAR 0 3
54281: PUSH
54282: LD_VAR 0 1
54286: PPUSH
54287: LD_VAR 0 5
54291: PPUSH
54292: CALL_OW 77
54296: ST_TO_ADDR
// end ;
54297: LD_VAR 0 3
54301: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54302: LD_INT 0
54304: PPUSH
54305: PPUSH
54306: PPUSH
// result := false ;
54307: LD_ADDR_VAR 0 3
54311: PUSH
54312: LD_INT 0
54314: ST_TO_ADDR
// if not building then
54315: LD_VAR 0 2
54319: NOT
54320: IFFALSE 54324
// exit ;
54322: GO 54468
// x := GetX ( building ) ;
54324: LD_ADDR_VAR 0 4
54328: PUSH
54329: LD_VAR 0 2
54333: PPUSH
54334: CALL_OW 250
54338: ST_TO_ADDR
// y := GetY ( building ) ;
54339: LD_ADDR_VAR 0 5
54343: PUSH
54344: LD_VAR 0 2
54348: PPUSH
54349: CALL_OW 251
54353: ST_TO_ADDR
// if not x or not y then
54354: LD_VAR 0 4
54358: NOT
54359: IFTRUE 54368
54361: PUSH
54362: LD_VAR 0 5
54366: NOT
54367: OR
54368: IFFALSE 54372
// exit ;
54370: GO 54468
// if GetTaskList ( unit ) then
54372: LD_VAR 0 1
54376: PPUSH
54377: CALL_OW 437
54381: IFFALSE 54468
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54383: LD_STRING e
54385: PUSH
54386: LD_VAR 0 1
54390: PPUSH
54391: CALL_OW 437
54395: PUSH
54396: LD_INT 1
54398: ARRAY
54399: PUSH
54400: LD_INT 1
54402: ARRAY
54403: EQUAL
54404: IFFALSE 54431
54406: PUSH
54407: LD_VAR 0 4
54411: PUSH
54412: LD_VAR 0 1
54416: PPUSH
54417: CALL_OW 437
54421: PUSH
54422: LD_INT 1
54424: ARRAY
54425: PUSH
54426: LD_INT 2
54428: ARRAY
54429: EQUAL
54430: AND
54431: IFFALSE 54458
54433: PUSH
54434: LD_VAR 0 5
54438: PUSH
54439: LD_VAR 0 1
54443: PPUSH
54444: CALL_OW 437
54448: PUSH
54449: LD_INT 1
54451: ARRAY
54452: PUSH
54453: LD_INT 3
54455: ARRAY
54456: EQUAL
54457: AND
54458: IFFALSE 54468
// result := true end ;
54460: LD_ADDR_VAR 0 3
54464: PUSH
54465: LD_INT 1
54467: ST_TO_ADDR
// end ;
54468: LD_VAR 0 3
54472: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54473: LD_INT 0
54475: PPUSH
// result := false ;
54476: LD_ADDR_VAR 0 4
54480: PUSH
54481: LD_INT 0
54483: ST_TO_ADDR
// if GetTaskList ( unit ) then
54484: LD_VAR 0 1
54488: PPUSH
54489: CALL_OW 437
54493: IFFALSE 54580
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54495: LD_STRING M
54497: PUSH
54498: LD_VAR 0 1
54502: PPUSH
54503: CALL_OW 437
54507: PUSH
54508: LD_INT 1
54510: ARRAY
54511: PUSH
54512: LD_INT 1
54514: ARRAY
54515: EQUAL
54516: IFFALSE 54543
54518: PUSH
54519: LD_VAR 0 2
54523: PUSH
54524: LD_VAR 0 1
54528: PPUSH
54529: CALL_OW 437
54533: PUSH
54534: LD_INT 1
54536: ARRAY
54537: PUSH
54538: LD_INT 2
54540: ARRAY
54541: EQUAL
54542: AND
54543: IFFALSE 54570
54545: PUSH
54546: LD_VAR 0 3
54550: PUSH
54551: LD_VAR 0 1
54555: PPUSH
54556: CALL_OW 437
54560: PUSH
54561: LD_INT 1
54563: ARRAY
54564: PUSH
54565: LD_INT 3
54567: ARRAY
54568: EQUAL
54569: AND
54570: IFFALSE 54580
// result := true ;
54572: LD_ADDR_VAR 0 4
54576: PUSH
54577: LD_INT 1
54579: ST_TO_ADDR
// end ; end ;
54580: LD_VAR 0 4
54584: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54585: LD_INT 0
54587: PPUSH
54588: PPUSH
54589: PPUSH
54590: PPUSH
// if not unit or not area then
54591: LD_VAR 0 1
54595: NOT
54596: IFTRUE 54605
54598: PUSH
54599: LD_VAR 0 2
54603: NOT
54604: OR
54605: IFFALSE 54609
// exit ;
54607: GO 54785
// tmp := AreaToList ( area , i ) ;
54609: LD_ADDR_VAR 0 6
54613: PUSH
54614: LD_VAR 0 2
54618: PPUSH
54619: LD_VAR 0 5
54623: PPUSH
54624: CALL_OW 517
54628: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54629: LD_ADDR_VAR 0 5
54633: PUSH
54634: DOUBLE
54635: LD_INT 1
54637: DEC
54638: ST_TO_ADDR
54639: LD_VAR 0 6
54643: PUSH
54644: LD_INT 1
54646: ARRAY
54647: PUSH
54648: FOR_TO
54649: IFFALSE 54783
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54651: LD_ADDR_VAR 0 7
54655: PUSH
54656: LD_VAR 0 6
54660: PUSH
54661: LD_INT 1
54663: ARRAY
54664: PUSH
54665: LD_VAR 0 5
54669: ARRAY
54670: PUSH
54671: LD_VAR 0 6
54675: PUSH
54676: LD_INT 2
54678: ARRAY
54679: PUSH
54680: LD_VAR 0 5
54684: ARRAY
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54690: LD_INT 92
54692: PUSH
54693: LD_VAR 0 7
54697: PUSH
54698: LD_INT 1
54700: ARRAY
54701: PUSH
54702: LD_VAR 0 7
54706: PUSH
54707: LD_INT 2
54709: ARRAY
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: PPUSH
54720: CALL_OW 69
54724: PUSH
54725: LD_INT 0
54727: EQUAL
54728: IFFALSE 54781
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54730: LD_VAR 0 1
54734: PPUSH
54735: LD_VAR 0 7
54739: PUSH
54740: LD_INT 1
54742: ARRAY
54743: PPUSH
54744: LD_VAR 0 7
54748: PUSH
54749: LD_INT 2
54751: ARRAY
54752: PPUSH
54753: LD_VAR 0 3
54757: PPUSH
54758: CALL_OW 48
// result := IsPlaced ( unit ) ;
54762: LD_ADDR_VAR 0 4
54766: PUSH
54767: LD_VAR 0 1
54771: PPUSH
54772: CALL_OW 305
54776: ST_TO_ADDR
// exit ;
54777: POP
54778: POP
54779: GO 54785
// end ; end ;
54781: GO 54648
54783: POP
54784: POP
// end ;
54785: LD_VAR 0 4
54789: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54790: LD_INT 0
54792: PPUSH
54793: PPUSH
54794: PPUSH
// if not side or side > 8 then
54795: LD_VAR 0 1
54799: NOT
54800: IFTRUE 54812
54802: PUSH
54803: LD_VAR 0 1
54807: PUSH
54808: LD_INT 8
54810: GREATER
54811: OR
54812: IFFALSE 54816
// exit ;
54814: GO 55003
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54816: LD_ADDR_VAR 0 4
54820: PUSH
54821: LD_INT 22
54823: PUSH
54824: LD_VAR 0 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 21
54835: PUSH
54836: LD_INT 3
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PPUSH
54847: CALL_OW 69
54851: ST_TO_ADDR
// if not tmp then
54852: LD_VAR 0 4
54856: NOT
54857: IFFALSE 54861
// exit ;
54859: GO 55003
// enable_addtolog := true ;
54861: LD_ADDR_OWVAR 81
54865: PUSH
54866: LD_INT 1
54868: ST_TO_ADDR
// AddToLog ( [ ) ;
54869: LD_STRING [
54871: PPUSH
54872: CALL_OW 561
// for i in tmp do
54876: LD_ADDR_VAR 0 3
54880: PUSH
54881: LD_VAR 0 4
54885: PUSH
54886: FOR_IN
54887: IFFALSE 54994
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54889: LD_STRING [
54891: PUSH
54892: LD_VAR 0 3
54896: PPUSH
54897: CALL_OW 266
54901: STR
54902: PUSH
54903: LD_STRING , 
54905: STR
54906: PUSH
54907: LD_VAR 0 3
54911: PPUSH
54912: CALL_OW 250
54916: STR
54917: PUSH
54918: LD_STRING , 
54920: STR
54921: PUSH
54922: LD_VAR 0 3
54926: PPUSH
54927: CALL_OW 251
54931: STR
54932: PUSH
54933: LD_STRING , 
54935: STR
54936: PUSH
54937: LD_VAR 0 3
54941: PPUSH
54942: CALL_OW 254
54946: STR
54947: PUSH
54948: LD_STRING , 
54950: STR
54951: PUSH
54952: LD_VAR 0 3
54956: PPUSH
54957: LD_INT 1
54959: PPUSH
54960: CALL_OW 268
54964: STR
54965: PUSH
54966: LD_STRING , 
54968: STR
54969: PUSH
54970: LD_VAR 0 3
54974: PPUSH
54975: LD_INT 2
54977: PPUSH
54978: CALL_OW 268
54982: STR
54983: PUSH
54984: LD_STRING ],
54986: STR
54987: PPUSH
54988: CALL_OW 561
// end ;
54992: GO 54886
54994: POP
54995: POP
// AddToLog ( ]; ) ;
54996: LD_STRING ];
54998: PPUSH
54999: CALL_OW 561
// end ;
55003: LD_VAR 0 2
55007: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55008: LD_INT 0
55010: PPUSH
55011: PPUSH
55012: PPUSH
55013: PPUSH
55014: PPUSH
// if not area or not rate or not max then
55015: LD_VAR 0 1
55019: NOT
55020: IFTRUE 55029
55022: PUSH
55023: LD_VAR 0 2
55027: NOT
55028: OR
55029: IFTRUE 55038
55031: PUSH
55032: LD_VAR 0 4
55036: NOT
55037: OR
55038: IFFALSE 55042
// exit ;
55040: GO 55231
// while 1 do
55042: LD_INT 1
55044: IFFALSE 55231
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55046: LD_ADDR_VAR 0 9
55050: PUSH
55051: LD_VAR 0 1
55055: PPUSH
55056: LD_INT 1
55058: PPUSH
55059: CALL_OW 287
55063: PUSH
55064: LD_INT 10
55066: MUL
55067: ST_TO_ADDR
// r := rate / 10 ;
55068: LD_ADDR_VAR 0 7
55072: PUSH
55073: LD_VAR 0 2
55077: PUSH
55078: LD_INT 10
55080: DIVREAL
55081: ST_TO_ADDR
// time := 1 1$00 ;
55082: LD_ADDR_VAR 0 8
55086: PUSH
55087: LD_INT 2100
55089: ST_TO_ADDR
// if amount < min then
55090: LD_VAR 0 9
55094: PUSH
55095: LD_VAR 0 3
55099: LESS
55100: IFFALSE 55118
// r := r * 2 else
55102: LD_ADDR_VAR 0 7
55106: PUSH
55107: LD_VAR 0 7
55111: PUSH
55112: LD_INT 2
55114: MUL
55115: ST_TO_ADDR
55116: GO 55144
// if amount > max then
55118: LD_VAR 0 9
55122: PUSH
55123: LD_VAR 0 4
55127: GREATER
55128: IFFALSE 55144
// r := r / 2 ;
55130: LD_ADDR_VAR 0 7
55134: PUSH
55135: LD_VAR 0 7
55139: PUSH
55140: LD_INT 2
55142: DIVREAL
55143: ST_TO_ADDR
// time := time / r ;
55144: LD_ADDR_VAR 0 8
55148: PUSH
55149: LD_VAR 0 8
55153: PUSH
55154: LD_VAR 0 7
55158: DIVREAL
55159: ST_TO_ADDR
// if time < 0 then
55160: LD_VAR 0 8
55164: PUSH
55165: LD_INT 0
55167: LESS
55168: IFFALSE 55185
// time := time * - 1 ;
55170: LD_ADDR_VAR 0 8
55174: PUSH
55175: LD_VAR 0 8
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: MUL
55184: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55185: LD_VAR 0 8
55189: PUSH
55190: LD_INT 35
55192: PPUSH
55193: LD_INT 875
55195: PPUSH
55196: CALL_OW 12
55200: PLUS
55201: PPUSH
55202: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55206: LD_INT 1
55208: PPUSH
55209: LD_INT 5
55211: PPUSH
55212: CALL_OW 12
55216: PPUSH
55217: LD_VAR 0 1
55221: PPUSH
55222: LD_INT 1
55224: PPUSH
55225: CALL_OW 55
// end ;
55229: GO 55042
// end ;
55231: LD_VAR 0 5
55235: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55236: LD_INT 0
55238: PPUSH
55239: PPUSH
55240: PPUSH
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
55245: PPUSH
// if not turrets or not factories then
55246: LD_VAR 0 1
55250: NOT
55251: IFTRUE 55260
55253: PUSH
55254: LD_VAR 0 2
55258: NOT
55259: OR
55260: IFFALSE 55264
// exit ;
55262: GO 55571
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55264: LD_ADDR_VAR 0 10
55268: PUSH
55269: LD_INT 5
55271: PUSH
55272: LD_INT 6
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 4
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: PUSH
55292: LD_INT 5
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 24
55306: PUSH
55307: LD_INT 25
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 23
55316: PUSH
55317: LD_INT 27
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 42
55330: PUSH
55331: LD_INT 43
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 44
55340: PUSH
55341: LD_INT 46
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 45
55350: PUSH
55351: LD_INT 47
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// result := [ ] ;
55368: LD_ADDR_VAR 0 3
55372: PUSH
55373: EMPTY
55374: ST_TO_ADDR
// for i in turrets do
55375: LD_ADDR_VAR 0 4
55379: PUSH
55380: LD_VAR 0 1
55384: PUSH
55385: FOR_IN
55386: IFFALSE 55569
// begin nat := GetNation ( i ) ;
55388: LD_ADDR_VAR 0 7
55392: PUSH
55393: LD_VAR 0 4
55397: PPUSH
55398: CALL_OW 248
55402: ST_TO_ADDR
// weapon := 0 ;
55403: LD_ADDR_VAR 0 8
55407: PUSH
55408: LD_INT 0
55410: ST_TO_ADDR
// if not nat then
55411: LD_VAR 0 7
55415: NOT
55416: IFFALSE 55420
// continue ;
55418: GO 55385
// for j in list [ nat ] do
55420: LD_ADDR_VAR 0 5
55424: PUSH
55425: LD_VAR 0 10
55429: PUSH
55430: LD_VAR 0 7
55434: ARRAY
55435: PUSH
55436: FOR_IN
55437: IFFALSE 55478
// if GetBWeapon ( i ) = j [ 1 ] then
55439: LD_VAR 0 4
55443: PPUSH
55444: CALL_OW 269
55448: PUSH
55449: LD_VAR 0 5
55453: PUSH
55454: LD_INT 1
55456: ARRAY
55457: EQUAL
55458: IFFALSE 55476
// begin weapon := j [ 2 ] ;
55460: LD_ADDR_VAR 0 8
55464: PUSH
55465: LD_VAR 0 5
55469: PUSH
55470: LD_INT 2
55472: ARRAY
55473: ST_TO_ADDR
// break ;
55474: GO 55478
// end ;
55476: GO 55436
55478: POP
55479: POP
// if not weapon then
55480: LD_VAR 0 8
55484: NOT
55485: IFFALSE 55489
// continue ;
55487: GO 55385
// for k in factories do
55489: LD_ADDR_VAR 0 6
55493: PUSH
55494: LD_VAR 0 2
55498: PUSH
55499: FOR_IN
55500: IFFALSE 55565
// begin weapons := AvailableWeaponList ( k ) ;
55502: LD_ADDR_VAR 0 9
55506: PUSH
55507: LD_VAR 0 6
55511: PPUSH
55512: CALL_OW 478
55516: ST_TO_ADDR
// if not weapons then
55517: LD_VAR 0 9
55521: NOT
55522: IFFALSE 55526
// continue ;
55524: GO 55499
// if weapon in weapons then
55526: LD_VAR 0 8
55530: PUSH
55531: LD_VAR 0 9
55535: IN
55536: IFFALSE 55563
// begin result := [ i , weapon ] ;
55538: LD_ADDR_VAR 0 3
55542: PUSH
55543: LD_VAR 0 4
55547: PUSH
55548: LD_VAR 0 8
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: ST_TO_ADDR
// exit ;
55557: POP
55558: POP
55559: POP
55560: POP
55561: GO 55571
// end ; end ;
55563: GO 55499
55565: POP
55566: POP
// end ;
55567: GO 55385
55569: POP
55570: POP
// end ;
55571: LD_VAR 0 3
55575: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55576: LD_INT 0
55578: PPUSH
// if not side or side > 8 then
55579: LD_VAR 0 3
55583: NOT
55584: IFTRUE 55596
55586: PUSH
55587: LD_VAR 0 3
55591: PUSH
55592: LD_INT 8
55594: GREATER
55595: OR
55596: IFFALSE 55600
// exit ;
55598: GO 55659
// if not range then
55600: LD_VAR 0 4
55604: NOT
55605: IFFALSE 55616
// range := - 12 ;
55607: LD_ADDR_VAR 0 4
55611: PUSH
55612: LD_INT 12
55614: NEG
55615: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55616: LD_VAR 0 1
55620: PPUSH
55621: LD_VAR 0 2
55625: PPUSH
55626: LD_VAR 0 3
55630: PPUSH
55631: LD_VAR 0 4
55635: PPUSH
55636: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55640: LD_VAR 0 1
55644: PPUSH
55645: LD_VAR 0 2
55649: PPUSH
55650: LD_VAR 0 3
55654: PPUSH
55655: CALL_OW 331
// end ;
55659: LD_VAR 0 5
55663: RET
// export function Video ( mode ) ; begin
55664: LD_INT 0
55666: PPUSH
// ingame_video = mode ;
55667: LD_ADDR_OWVAR 52
55671: PUSH
55672: LD_VAR 0 1
55676: ST_TO_ADDR
// interface_hidden = mode ;
55677: LD_ADDR_OWVAR 54
55681: PUSH
55682: LD_VAR 0 1
55686: ST_TO_ADDR
// end ;
55687: LD_VAR 0 2
55691: RET
// export function Join ( array , element ) ; begin
55692: LD_INT 0
55694: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55695: LD_ADDR_VAR 0 3
55699: PUSH
55700: LD_VAR 0 1
55704: PPUSH
55705: LD_VAR 0 1
55709: PUSH
55710: LD_INT 1
55712: PLUS
55713: PPUSH
55714: LD_VAR 0 2
55718: PPUSH
55719: CALL_OW 1
55723: ST_TO_ADDR
// end ;
55724: LD_VAR 0 3
55728: RET
// export function JoinUnion ( array , element ) ; begin
55729: LD_INT 0
55731: PPUSH
// result := array union element ;
55732: LD_ADDR_VAR 0 3
55736: PUSH
55737: LD_VAR 0 1
55741: PUSH
55742: LD_VAR 0 2
55746: UNION
55747: ST_TO_ADDR
// end ;
55748: LD_VAR 0 3
55752: RET
// export function GetBehemoths ( side ) ; begin
55753: LD_INT 0
55755: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55756: LD_ADDR_VAR 0 2
55760: PUSH
55761: LD_INT 22
55763: PUSH
55764: LD_VAR 0 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 31
55775: PUSH
55776: LD_INT 25
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PPUSH
55787: CALL_OW 69
55791: ST_TO_ADDR
// end ;
55792: LD_VAR 0 2
55796: RET
// export function Shuffle ( array ) ; var i , index ; begin
55797: LD_INT 0
55799: PPUSH
55800: PPUSH
55801: PPUSH
// result := [ ] ;
55802: LD_ADDR_VAR 0 2
55806: PUSH
55807: EMPTY
55808: ST_TO_ADDR
// if not array then
55809: LD_VAR 0 1
55813: NOT
55814: IFFALSE 55818
// exit ;
55816: GO 55917
// Randomize ;
55818: CALL_OW 10
// for i = array downto 1 do
55822: LD_ADDR_VAR 0 3
55826: PUSH
55827: DOUBLE
55828: LD_VAR 0 1
55832: INC
55833: ST_TO_ADDR
55834: LD_INT 1
55836: PUSH
55837: FOR_DOWNTO
55838: IFFALSE 55915
// begin index := rand ( 1 , array ) ;
55840: LD_ADDR_VAR 0 4
55844: PUSH
55845: LD_INT 1
55847: PPUSH
55848: LD_VAR 0 1
55852: PPUSH
55853: CALL_OW 12
55857: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55858: LD_ADDR_VAR 0 2
55862: PUSH
55863: LD_VAR 0 2
55867: PPUSH
55868: LD_VAR 0 2
55872: PUSH
55873: LD_INT 1
55875: PLUS
55876: PPUSH
55877: LD_VAR 0 1
55881: PUSH
55882: LD_VAR 0 4
55886: ARRAY
55887: PPUSH
55888: CALL_OW 2
55892: ST_TO_ADDR
// array := Delete ( array , index ) ;
55893: LD_ADDR_VAR 0 1
55897: PUSH
55898: LD_VAR 0 1
55902: PPUSH
55903: LD_VAR 0 4
55907: PPUSH
55908: CALL_OW 3
55912: ST_TO_ADDR
// end ;
55913: GO 55837
55915: POP
55916: POP
// end ;
55917: LD_VAR 0 2
55921: RET
// export function GetBaseMaterials ( base ) ; begin
55922: LD_INT 0
55924: PPUSH
// result := [ 0 , 0 , 0 ] ;
55925: LD_ADDR_VAR 0 2
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: ST_TO_ADDR
// if not base then
55944: LD_VAR 0 1
55948: NOT
55949: IFFALSE 55953
// exit ;
55951: GO 56002
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55953: LD_ADDR_VAR 0 2
55957: PUSH
55958: LD_VAR 0 1
55962: PPUSH
55963: LD_INT 1
55965: PPUSH
55966: CALL_OW 275
55970: PUSH
55971: LD_VAR 0 1
55975: PPUSH
55976: LD_INT 2
55978: PPUSH
55979: CALL_OW 275
55983: PUSH
55984: LD_VAR 0 1
55988: PPUSH
55989: LD_INT 3
55991: PPUSH
55992: CALL_OW 275
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: ST_TO_ADDR
// end ;
56002: LD_VAR 0 2
56006: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56007: LD_INT 0
56009: PPUSH
56010: PPUSH
// result := array ;
56011: LD_ADDR_VAR 0 3
56015: PUSH
56016: LD_VAR 0 1
56020: ST_TO_ADDR
// if size >= result then
56021: LD_VAR 0 2
56025: PUSH
56026: LD_VAR 0 3
56030: GREATEREQUAL
56031: IFFALSE 56035
// exit ;
56033: GO 56085
// if size then
56035: LD_VAR 0 2
56039: IFFALSE 56085
// for i := array downto size do
56041: LD_ADDR_VAR 0 4
56045: PUSH
56046: DOUBLE
56047: LD_VAR 0 1
56051: INC
56052: ST_TO_ADDR
56053: LD_VAR 0 2
56057: PUSH
56058: FOR_DOWNTO
56059: IFFALSE 56083
// result := Delete ( result , result ) ;
56061: LD_ADDR_VAR 0 3
56065: PUSH
56066: LD_VAR 0 3
56070: PPUSH
56071: LD_VAR 0 3
56075: PPUSH
56076: CALL_OW 3
56080: ST_TO_ADDR
56081: GO 56058
56083: POP
56084: POP
// end ;
56085: LD_VAR 0 3
56089: RET
// export function ComExit ( unit ) ; var tmp ; begin
56090: LD_INT 0
56092: PPUSH
56093: PPUSH
// if not IsInUnit ( unit ) then
56094: LD_VAR 0 1
56098: PPUSH
56099: CALL_OW 310
56103: NOT
56104: IFFALSE 56108
// exit ;
56106: GO 56168
// tmp := IsInUnit ( unit ) ;
56108: LD_ADDR_VAR 0 3
56112: PUSH
56113: LD_VAR 0 1
56117: PPUSH
56118: CALL_OW 310
56122: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56123: LD_VAR 0 3
56127: PPUSH
56128: CALL_OW 247
56132: PUSH
56133: LD_INT 2
56135: EQUAL
56136: IFFALSE 56149
// ComExitVehicle ( unit ) else
56138: LD_VAR 0 1
56142: PPUSH
56143: CALL_OW 121
56147: GO 56158
// ComExitBuilding ( unit ) ;
56149: LD_VAR 0 1
56153: PPUSH
56154: CALL_OW 122
// result := tmp ;
56158: LD_ADDR_VAR 0 2
56162: PUSH
56163: LD_VAR 0 3
56167: ST_TO_ADDR
// end ;
56168: LD_VAR 0 2
56172: RET
// export function ComExitAll ( units ) ; var i ; begin
56173: LD_INT 0
56175: PPUSH
56176: PPUSH
// if not units then
56177: LD_VAR 0 1
56181: NOT
56182: IFFALSE 56186
// exit ;
56184: GO 56212
// for i in units do
56186: LD_ADDR_VAR 0 3
56190: PUSH
56191: LD_VAR 0 1
56195: PUSH
56196: FOR_IN
56197: IFFALSE 56210
// ComExit ( i ) ;
56199: LD_VAR 0 3
56203: PPUSH
56204: CALL 56090 0 1
56208: GO 56196
56210: POP
56211: POP
// end ;
56212: LD_VAR 0 2
56216: RET
// export function ResetHc ; begin
56217: LD_INT 0
56219: PPUSH
// InitHc ;
56220: CALL_OW 19
// hc_importance := 0 ;
56224: LD_ADDR_OWVAR 32
56228: PUSH
56229: LD_INT 0
56231: ST_TO_ADDR
// end ;
56232: LD_VAR 0 1
56236: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56237: LD_INT 0
56239: PPUSH
56240: PPUSH
56241: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56242: LD_ADDR_VAR 0 6
56246: PUSH
56247: LD_VAR 0 1
56251: PUSH
56252: LD_VAR 0 3
56256: PLUS
56257: PUSH
56258: LD_INT 2
56260: DIV
56261: ST_TO_ADDR
// if _x < 0 then
56262: LD_VAR 0 6
56266: PUSH
56267: LD_INT 0
56269: LESS
56270: IFFALSE 56287
// _x := _x * - 1 ;
56272: LD_ADDR_VAR 0 6
56276: PUSH
56277: LD_VAR 0 6
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: MUL
56286: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56287: LD_ADDR_VAR 0 7
56291: PUSH
56292: LD_VAR 0 2
56296: PUSH
56297: LD_VAR 0 4
56301: PLUS
56302: PUSH
56303: LD_INT 2
56305: DIV
56306: ST_TO_ADDR
// if _y < 0 then
56307: LD_VAR 0 7
56311: PUSH
56312: LD_INT 0
56314: LESS
56315: IFFALSE 56332
// _y := _y * - 1 ;
56317: LD_ADDR_VAR 0 7
56321: PUSH
56322: LD_VAR 0 7
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: MUL
56331: ST_TO_ADDR
// result := [ _x , _y ] ;
56332: LD_ADDR_VAR 0 5
56336: PUSH
56337: LD_VAR 0 6
56341: PUSH
56342: LD_VAR 0 7
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// end ;
56351: LD_VAR 0 5
56355: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56356: LD_INT 0
56358: PPUSH
56359: PPUSH
56360: PPUSH
56361: PPUSH
// task := GetTaskList ( unit ) ;
56362: LD_ADDR_VAR 0 7
56366: PUSH
56367: LD_VAR 0 1
56371: PPUSH
56372: CALL_OW 437
56376: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56377: LD_VAR 0 7
56381: NOT
56382: IFFALSE 56401
56384: PUSH
56385: LD_VAR 0 1
56389: PPUSH
56390: LD_VAR 0 2
56394: PPUSH
56395: CALL_OW 308
56399: NOT
56400: AND
56401: IFFALSE 56405
// exit ;
56403: GO 56523
// if IsInArea ( unit , area ) then
56405: LD_VAR 0 1
56409: PPUSH
56410: LD_VAR 0 2
56414: PPUSH
56415: CALL_OW 308
56419: IFFALSE 56437
// begin ComMoveToArea ( unit , goAway ) ;
56421: LD_VAR 0 1
56425: PPUSH
56426: LD_VAR 0 3
56430: PPUSH
56431: CALL_OW 113
// exit ;
56435: GO 56523
// end ; if task [ 1 ] [ 1 ] <> M then
56437: LD_VAR 0 7
56441: PUSH
56442: LD_INT 1
56444: ARRAY
56445: PUSH
56446: LD_INT 1
56448: ARRAY
56449: PUSH
56450: LD_STRING M
56452: NONEQUAL
56453: IFFALSE 56457
// exit ;
56455: GO 56523
// x := task [ 1 ] [ 2 ] ;
56457: LD_ADDR_VAR 0 5
56461: PUSH
56462: LD_VAR 0 7
56466: PUSH
56467: LD_INT 1
56469: ARRAY
56470: PUSH
56471: LD_INT 2
56473: ARRAY
56474: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56475: LD_ADDR_VAR 0 6
56479: PUSH
56480: LD_VAR 0 7
56484: PUSH
56485: LD_INT 1
56487: ARRAY
56488: PUSH
56489: LD_INT 3
56491: ARRAY
56492: ST_TO_ADDR
// if InArea ( x , y , area ) then
56493: LD_VAR 0 5
56497: PPUSH
56498: LD_VAR 0 6
56502: PPUSH
56503: LD_VAR 0 2
56507: PPUSH
56508: CALL_OW 309
56512: IFFALSE 56523
// ComStop ( unit ) ;
56514: LD_VAR 0 1
56518: PPUSH
56519: CALL_OW 141
// end ;
56523: LD_VAR 0 4
56527: RET
// export function Abs ( value ) ; begin
56528: LD_INT 0
56530: PPUSH
// result := value ;
56531: LD_ADDR_VAR 0 2
56535: PUSH
56536: LD_VAR 0 1
56540: ST_TO_ADDR
// if value < 0 then
56541: LD_VAR 0 1
56545: PUSH
56546: LD_INT 0
56548: LESS
56549: IFFALSE 56566
// result := value * - 1 ;
56551: LD_ADDR_VAR 0 2
56555: PUSH
56556: LD_VAR 0 1
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: MUL
56565: ST_TO_ADDR
// end ;
56566: LD_VAR 0 2
56570: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56571: LD_INT 0
56573: PPUSH
56574: PPUSH
56575: PPUSH
56576: PPUSH
56577: PPUSH
56578: PPUSH
56579: PPUSH
56580: PPUSH
// if not unit or not building then
56581: LD_VAR 0 1
56585: NOT
56586: IFTRUE 56595
56588: PUSH
56589: LD_VAR 0 2
56593: NOT
56594: OR
56595: IFFALSE 56599
// exit ;
56597: GO 56827
// x := GetX ( building ) ;
56599: LD_ADDR_VAR 0 4
56603: PUSH
56604: LD_VAR 0 2
56608: PPUSH
56609: CALL_OW 250
56613: ST_TO_ADDR
// y := GetY ( building ) ;
56614: LD_ADDR_VAR 0 6
56618: PUSH
56619: LD_VAR 0 2
56623: PPUSH
56624: CALL_OW 251
56628: ST_TO_ADDR
// d := GetDir ( building ) ;
56629: LD_ADDR_VAR 0 8
56633: PUSH
56634: LD_VAR 0 2
56638: PPUSH
56639: CALL_OW 254
56643: ST_TO_ADDR
// r := 4 ;
56644: LD_ADDR_VAR 0 9
56648: PUSH
56649: LD_INT 4
56651: ST_TO_ADDR
// for i := 1 to 5 do
56652: LD_ADDR_VAR 0 10
56656: PUSH
56657: DOUBLE
56658: LD_INT 1
56660: DEC
56661: ST_TO_ADDR
56662: LD_INT 5
56664: PUSH
56665: FOR_TO
56666: IFFALSE 56825
// begin _x := ShiftX ( x , d , r + i ) ;
56668: LD_ADDR_VAR 0 5
56672: PUSH
56673: LD_VAR 0 4
56677: PPUSH
56678: LD_VAR 0 8
56682: PPUSH
56683: LD_VAR 0 9
56687: PUSH
56688: LD_VAR 0 10
56692: PLUS
56693: PPUSH
56694: CALL_OW 272
56698: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56699: LD_ADDR_VAR 0 7
56703: PUSH
56704: LD_VAR 0 6
56708: PPUSH
56709: LD_VAR 0 8
56713: PPUSH
56714: LD_VAR 0 9
56718: PUSH
56719: LD_VAR 0 10
56723: PLUS
56724: PPUSH
56725: CALL_OW 273
56729: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56730: LD_VAR 0 5
56734: PPUSH
56735: LD_VAR 0 7
56739: PPUSH
56740: CALL_OW 488
56744: IFFALSE 56779
56746: PUSH
56747: LD_VAR 0 5
56751: PPUSH
56752: LD_VAR 0 7
56756: PPUSH
56757: CALL_OW 428
56761: PPUSH
56762: CALL_OW 247
56766: PUSH
56767: LD_INT 3
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: IN
56777: NOT
56778: AND
56779: IFFALSE 56823
// begin ComMoveXY ( unit , _x , _y ) ;
56781: LD_VAR 0 1
56785: PPUSH
56786: LD_VAR 0 5
56790: PPUSH
56791: LD_VAR 0 7
56795: PPUSH
56796: CALL_OW 111
// result := [ _x , _y ] ;
56800: LD_ADDR_VAR 0 3
56804: PUSH
56805: LD_VAR 0 5
56809: PUSH
56810: LD_VAR 0 7
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// exit ;
56819: POP
56820: POP
56821: GO 56827
// end ; end ;
56823: GO 56665
56825: POP
56826: POP
// end ;
56827: LD_VAR 0 3
56831: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56832: LD_INT 0
56834: PPUSH
56835: PPUSH
56836: PPUSH
// result := 0 ;
56837: LD_ADDR_VAR 0 3
56841: PUSH
56842: LD_INT 0
56844: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56845: LD_VAR 0 1
56849: PUSH
56850: LD_INT 0
56852: LESS
56853: IFTRUE 56865
56855: PUSH
56856: LD_VAR 0 1
56860: PUSH
56861: LD_INT 8
56863: GREATER
56864: OR
56865: IFTRUE 56877
56867: PUSH
56868: LD_VAR 0 2
56872: PUSH
56873: LD_INT 0
56875: LESS
56876: OR
56877: IFTRUE 56889
56879: PUSH
56880: LD_VAR 0 2
56884: PUSH
56885: LD_INT 8
56887: GREATER
56888: OR
56889: IFFALSE 56893
// exit ;
56891: GO 56968
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56893: LD_ADDR_VAR 0 4
56897: PUSH
56898: LD_INT 22
56900: PUSH
56901: LD_VAR 0 2
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PPUSH
56910: CALL_OW 69
56914: PUSH
56915: FOR_IN
56916: IFFALSE 56966
// begin un := UnitShoot ( i ) ;
56918: LD_ADDR_VAR 0 5
56922: PUSH
56923: LD_VAR 0 4
56927: PPUSH
56928: CALL_OW 504
56932: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56933: LD_VAR 0 5
56937: PPUSH
56938: CALL_OW 255
56942: PUSH
56943: LD_VAR 0 1
56947: EQUAL
56948: IFFALSE 56964
// begin result := un ;
56950: LD_ADDR_VAR 0 3
56954: PUSH
56955: LD_VAR 0 5
56959: ST_TO_ADDR
// exit ;
56960: POP
56961: POP
56962: GO 56968
// end ; end ;
56964: GO 56915
56966: POP
56967: POP
// end ;
56968: LD_VAR 0 3
56972: RET
// export function GetCargoBay ( units ) ; begin
56973: LD_INT 0
56975: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56976: LD_ADDR_VAR 0 2
56980: PUSH
56981: LD_VAR 0 1
56985: PPUSH
56986: LD_INT 2
56988: PUSH
56989: LD_INT 34
56991: PUSH
56992: LD_INT 12
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 34
57001: PUSH
57002: LD_INT 51
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 34
57011: PUSH
57012: LD_INT 32
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 34
57021: PUSH
57022: LD_INT 89
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: PPUSH
57036: CALL_OW 72
57040: ST_TO_ADDR
// end ;
57041: LD_VAR 0 2
57045: RET
// export function Negate ( value ) ; begin
57046: LD_INT 0
57048: PPUSH
// result := not value ;
57049: LD_ADDR_VAR 0 2
57053: PUSH
57054: LD_VAR 0 1
57058: NOT
57059: ST_TO_ADDR
// end ;
57060: LD_VAR 0 2
57064: RET
// export function Inc ( value ) ; begin
57065: LD_INT 0
57067: PPUSH
// result := value + 1 ;
57068: LD_ADDR_VAR 0 2
57072: PUSH
57073: LD_VAR 0 1
57077: PUSH
57078: LD_INT 1
57080: PLUS
57081: ST_TO_ADDR
// end ;
57082: LD_VAR 0 2
57086: RET
// export function Dec ( value ) ; begin
57087: LD_INT 0
57089: PPUSH
// result := value - 1 ;
57090: LD_ADDR_VAR 0 2
57094: PUSH
57095: LD_VAR 0 1
57099: PUSH
57100: LD_INT 1
57102: MINUS
57103: ST_TO_ADDR
// end ;
57104: LD_VAR 0 2
57108: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57109: LD_INT 0
57111: PPUSH
57112: PPUSH
57113: PPUSH
57114: PPUSH
57115: PPUSH
57116: PPUSH
57117: PPUSH
57118: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57119: LD_VAR 0 1
57123: PPUSH
57124: LD_VAR 0 2
57128: PPUSH
57129: CALL_OW 488
57133: NOT
57134: IFTRUE 57153
57136: PUSH
57137: LD_VAR 0 3
57141: PPUSH
57142: LD_VAR 0 4
57146: PPUSH
57147: CALL_OW 488
57151: NOT
57152: OR
57153: IFFALSE 57166
// begin result := - 1 ;
57155: LD_ADDR_VAR 0 5
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: ST_TO_ADDR
// exit ;
57164: GO 57401
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57166: LD_ADDR_VAR 0 12
57170: PUSH
57171: LD_VAR 0 1
57175: PPUSH
57176: LD_VAR 0 2
57180: PPUSH
57181: LD_VAR 0 3
57185: PPUSH
57186: LD_VAR 0 4
57190: PPUSH
57191: CALL 56237 0 4
57195: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57196: LD_ADDR_VAR 0 11
57200: PUSH
57201: LD_VAR 0 1
57205: PPUSH
57206: LD_VAR 0 2
57210: PPUSH
57211: LD_VAR 0 12
57215: PUSH
57216: LD_INT 1
57218: ARRAY
57219: PPUSH
57220: LD_VAR 0 12
57224: PUSH
57225: LD_INT 2
57227: ARRAY
57228: PPUSH
57229: CALL_OW 298
57233: ST_TO_ADDR
// distance := 9999 ;
57234: LD_ADDR_VAR 0 10
57238: PUSH
57239: LD_INT 9999
57241: ST_TO_ADDR
// for i := 0 to 5 do
57242: LD_ADDR_VAR 0 6
57246: PUSH
57247: DOUBLE
57248: LD_INT 0
57250: DEC
57251: ST_TO_ADDR
57252: LD_INT 5
57254: PUSH
57255: FOR_TO
57256: IFFALSE 57399
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57258: LD_ADDR_VAR 0 7
57262: PUSH
57263: LD_VAR 0 1
57267: PPUSH
57268: LD_VAR 0 6
57272: PPUSH
57273: LD_VAR 0 11
57277: PPUSH
57278: CALL_OW 272
57282: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57283: LD_ADDR_VAR 0 8
57287: PUSH
57288: LD_VAR 0 2
57292: PPUSH
57293: LD_VAR 0 6
57297: PPUSH
57298: LD_VAR 0 11
57302: PPUSH
57303: CALL_OW 273
57307: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57308: LD_VAR 0 7
57312: PPUSH
57313: LD_VAR 0 8
57317: PPUSH
57318: CALL_OW 488
57322: NOT
57323: IFFALSE 57327
// continue ;
57325: GO 57255
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57327: LD_ADDR_VAR 0 9
57331: PUSH
57332: LD_VAR 0 12
57336: PUSH
57337: LD_INT 1
57339: ARRAY
57340: PPUSH
57341: LD_VAR 0 12
57345: PUSH
57346: LD_INT 2
57348: ARRAY
57349: PPUSH
57350: LD_VAR 0 7
57354: PPUSH
57355: LD_VAR 0 8
57359: PPUSH
57360: CALL_OW 298
57364: ST_TO_ADDR
// if tmp < distance then
57365: LD_VAR 0 9
57369: PUSH
57370: LD_VAR 0 10
57374: LESS
57375: IFFALSE 57397
// begin result := i ;
57377: LD_ADDR_VAR 0 5
57381: PUSH
57382: LD_VAR 0 6
57386: ST_TO_ADDR
// distance := tmp ;
57387: LD_ADDR_VAR 0 10
57391: PUSH
57392: LD_VAR 0 9
57396: ST_TO_ADDR
// end ; end ;
57397: GO 57255
57399: POP
57400: POP
// end ;
57401: LD_VAR 0 5
57405: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57406: LD_INT 0
57408: PPUSH
57409: PPUSH
// if not driver or not IsInUnit ( driver ) then
57410: LD_VAR 0 1
57414: NOT
57415: IFTRUE 57429
57417: PUSH
57418: LD_VAR 0 1
57422: PPUSH
57423: CALL_OW 310
57427: NOT
57428: OR
57429: IFFALSE 57433
// exit ;
57431: GO 57523
// vehicle := IsInUnit ( driver ) ;
57433: LD_ADDR_VAR 0 3
57437: PUSH
57438: LD_VAR 0 1
57442: PPUSH
57443: CALL_OW 310
57447: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57448: LD_VAR 0 1
57452: PPUSH
57453: LD_STRING \
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: PUSH
57483: LD_STRING E
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_VAR 0 3
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PPUSH
57519: CALL_OW 446
// end ;
57523: LD_VAR 0 2
57527: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57528: LD_INT 0
57530: PPUSH
57531: PPUSH
// if not driver or not IsInUnit ( driver ) then
57532: LD_VAR 0 1
57536: NOT
57537: IFTRUE 57551
57539: PUSH
57540: LD_VAR 0 1
57544: PPUSH
57545: CALL_OW 310
57549: NOT
57550: OR
57551: IFFALSE 57555
// exit ;
57553: GO 57645
// vehicle := IsInUnit ( driver ) ;
57555: LD_ADDR_VAR 0 3
57559: PUSH
57560: LD_VAR 0 1
57564: PPUSH
57565: CALL_OW 310
57569: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57570: LD_VAR 0 1
57574: PPUSH
57575: LD_STRING \
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: PUSH
57605: LD_STRING E
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_VAR 0 3
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PPUSH
57641: CALL_OW 447
// end ;
57645: LD_VAR 0 2
57649: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57650: LD_INT 0
57652: PPUSH
57653: PPUSH
57654: PPUSH
// tmp := [ ] ;
57655: LD_ADDR_VAR 0 5
57659: PUSH
57660: EMPTY
57661: ST_TO_ADDR
// for i in units do
57662: LD_ADDR_VAR 0 4
57666: PUSH
57667: LD_VAR 0 1
57671: PUSH
57672: FOR_IN
57673: IFFALSE 57711
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57675: LD_ADDR_VAR 0 5
57679: PUSH
57680: LD_VAR 0 5
57684: PPUSH
57685: LD_VAR 0 5
57689: PUSH
57690: LD_INT 1
57692: PLUS
57693: PPUSH
57694: LD_VAR 0 4
57698: PPUSH
57699: CALL_OW 256
57703: PPUSH
57704: CALL_OW 2
57708: ST_TO_ADDR
57709: GO 57672
57711: POP
57712: POP
// if not tmp then
57713: LD_VAR 0 5
57717: NOT
57718: IFFALSE 57722
// exit ;
57720: GO 57770
// if asc then
57722: LD_VAR 0 2
57726: IFFALSE 57750
// result := SortListByListAsc ( units , tmp ) else
57728: LD_ADDR_VAR 0 3
57732: PUSH
57733: LD_VAR 0 1
57737: PPUSH
57738: LD_VAR 0 5
57742: PPUSH
57743: CALL_OW 76
57747: ST_TO_ADDR
57748: GO 57770
// result := SortListByListDesc ( units , tmp ) ;
57750: LD_ADDR_VAR 0 3
57754: PUSH
57755: LD_VAR 0 1
57759: PPUSH
57760: LD_VAR 0 5
57764: PPUSH
57765: CALL_OW 77
57769: ST_TO_ADDR
// end ;
57770: LD_VAR 0 3
57774: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57775: LD_INT 0
57777: PPUSH
57778: PPUSH
// task := GetTaskList ( mech ) ;
57779: LD_ADDR_VAR 0 4
57783: PUSH
57784: LD_VAR 0 1
57788: PPUSH
57789: CALL_OW 437
57793: ST_TO_ADDR
// if not task then
57794: LD_VAR 0 4
57798: NOT
57799: IFFALSE 57803
// exit ;
57801: GO 57847
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57803: LD_ADDR_VAR 0 3
57807: PUSH
57808: LD_VAR 0 4
57812: PUSH
57813: LD_INT 1
57815: ARRAY
57816: PUSH
57817: LD_INT 1
57819: ARRAY
57820: PUSH
57821: LD_STRING r
57823: EQUAL
57824: IFFALSE 57846
57826: PUSH
57827: LD_VAR 0 4
57831: PUSH
57832: LD_INT 1
57834: ARRAY
57835: PUSH
57836: LD_INT 4
57838: ARRAY
57839: PUSH
57840: LD_VAR 0 2
57844: EQUAL
57845: AND
57846: ST_TO_ADDR
// end ;
57847: LD_VAR 0 3
57851: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57852: LD_INT 0
57854: PPUSH
// SetDir ( unit , d ) ;
57855: LD_VAR 0 1
57859: PPUSH
57860: LD_VAR 0 4
57864: PPUSH
57865: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57869: LD_ADDR_VAR 0 6
57873: PUSH
57874: LD_VAR 0 1
57878: PPUSH
57879: LD_VAR 0 2
57883: PPUSH
57884: LD_VAR 0 3
57888: PPUSH
57889: LD_VAR 0 5
57893: PPUSH
57894: CALL_OW 48
57898: ST_TO_ADDR
// end ;
57899: LD_VAR 0 6
57903: RET
// export function ToNaturalNumber ( number ) ; begin
57904: LD_INT 0
57906: PPUSH
// result := number div 1 ;
57907: LD_ADDR_VAR 0 2
57911: PUSH
57912: LD_VAR 0 1
57916: PUSH
57917: LD_INT 1
57919: DIV
57920: ST_TO_ADDR
// if number < 0 then
57921: LD_VAR 0 1
57925: PUSH
57926: LD_INT 0
57928: LESS
57929: IFFALSE 57939
// result := 0 ;
57931: LD_ADDR_VAR 0 2
57935: PUSH
57936: LD_INT 0
57938: ST_TO_ADDR
// end ;
57939: LD_VAR 0 2
57943: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57944: LD_INT 0
57946: PPUSH
57947: PPUSH
57948: PPUSH
// if not buildings then
57949: LD_VAR 0 1
57953: NOT
57954: IFFALSE 57958
// exit ;
57956: GO 58073
// tmp := [ ] ;
57958: LD_ADDR_VAR 0 5
57962: PUSH
57963: EMPTY
57964: ST_TO_ADDR
// for b in buildings do
57965: LD_ADDR_VAR 0 4
57969: PUSH
57970: LD_VAR 0 1
57974: PUSH
57975: FOR_IN
57976: IFFALSE 58014
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57978: LD_ADDR_VAR 0 5
57982: PUSH
57983: LD_VAR 0 5
57987: PPUSH
57988: LD_VAR 0 5
57992: PUSH
57993: LD_INT 1
57995: PLUS
57996: PPUSH
57997: LD_VAR 0 4
58001: PPUSH
58002: CALL_OW 266
58006: PPUSH
58007: CALL_OW 1
58011: ST_TO_ADDR
58012: GO 57975
58014: POP
58015: POP
// if not tmp then
58016: LD_VAR 0 5
58020: NOT
58021: IFFALSE 58025
// exit ;
58023: GO 58073
// if asc then
58025: LD_VAR 0 2
58029: IFFALSE 58053
// result := SortListByListAsc ( buildings , tmp ) else
58031: LD_ADDR_VAR 0 3
58035: PUSH
58036: LD_VAR 0 1
58040: PPUSH
58041: LD_VAR 0 5
58045: PPUSH
58046: CALL_OW 76
58050: ST_TO_ADDR
58051: GO 58073
// result := SortListByListDesc ( buildings , tmp ) ;
58053: LD_ADDR_VAR 0 3
58057: PUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: LD_VAR 0 5
58067: PPUSH
58068: CALL_OW 77
58072: ST_TO_ADDR
// end ;
58073: LD_VAR 0 3
58077: RET
// export function SortByClass ( units , class ) ; var un ; begin
58078: LD_INT 0
58080: PPUSH
58081: PPUSH
// if not units or not class then
58082: LD_VAR 0 1
58086: NOT
58087: IFTRUE 58096
58089: PUSH
58090: LD_VAR 0 2
58094: NOT
58095: OR
58096: IFFALSE 58100
// exit ;
58098: GO 58195
// result := [ ] ;
58100: LD_ADDR_VAR 0 3
58104: PUSH
58105: EMPTY
58106: ST_TO_ADDR
// for un in units do
58107: LD_ADDR_VAR 0 4
58111: PUSH
58112: LD_VAR 0 1
58116: PUSH
58117: FOR_IN
58118: IFFALSE 58193
// if GetClass ( un ) = class then
58120: LD_VAR 0 4
58124: PPUSH
58125: CALL_OW 257
58129: PUSH
58130: LD_VAR 0 2
58134: EQUAL
58135: IFFALSE 58162
// result := Insert ( result , 1 , un ) else
58137: LD_ADDR_VAR 0 3
58141: PUSH
58142: LD_VAR 0 3
58146: PPUSH
58147: LD_INT 1
58149: PPUSH
58150: LD_VAR 0 4
58154: PPUSH
58155: CALL_OW 2
58159: ST_TO_ADDR
58160: GO 58191
// result := Replace ( result , result + 1 , un ) ;
58162: LD_ADDR_VAR 0 3
58166: PUSH
58167: LD_VAR 0 3
58171: PPUSH
58172: LD_VAR 0 3
58176: PUSH
58177: LD_INT 1
58179: PLUS
58180: PPUSH
58181: LD_VAR 0 4
58185: PPUSH
58186: CALL_OW 1
58190: ST_TO_ADDR
58191: GO 58117
58193: POP
58194: POP
// end ;
58195: LD_VAR 0 3
58199: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58200: LD_INT 0
58202: PPUSH
58203: PPUSH
58204: PPUSH
58205: PPUSH
58206: PPUSH
58207: PPUSH
58208: PPUSH
// result := [ ] ;
58209: LD_ADDR_VAR 0 4
58213: PUSH
58214: EMPTY
58215: ST_TO_ADDR
// if x - r < 0 then
58216: LD_VAR 0 1
58220: PUSH
58221: LD_VAR 0 3
58225: MINUS
58226: PUSH
58227: LD_INT 0
58229: LESS
58230: IFFALSE 58242
// min_x := 0 else
58232: LD_ADDR_VAR 0 8
58236: PUSH
58237: LD_INT 0
58239: ST_TO_ADDR
58240: GO 58258
// min_x := x - r ;
58242: LD_ADDR_VAR 0 8
58246: PUSH
58247: LD_VAR 0 1
58251: PUSH
58252: LD_VAR 0 3
58256: MINUS
58257: ST_TO_ADDR
// if y - r < 0 then
58258: LD_VAR 0 2
58262: PUSH
58263: LD_VAR 0 3
58267: MINUS
58268: PUSH
58269: LD_INT 0
58271: LESS
58272: IFFALSE 58284
// min_y := 0 else
58274: LD_ADDR_VAR 0 7
58278: PUSH
58279: LD_INT 0
58281: ST_TO_ADDR
58282: GO 58300
// min_y := y - r ;
58284: LD_ADDR_VAR 0 7
58288: PUSH
58289: LD_VAR 0 2
58293: PUSH
58294: LD_VAR 0 3
58298: MINUS
58299: ST_TO_ADDR
// max_x := x + r ;
58300: LD_ADDR_VAR 0 9
58304: PUSH
58305: LD_VAR 0 1
58309: PUSH
58310: LD_VAR 0 3
58314: PLUS
58315: ST_TO_ADDR
// max_y := y + r ;
58316: LD_ADDR_VAR 0 10
58320: PUSH
58321: LD_VAR 0 2
58325: PUSH
58326: LD_VAR 0 3
58330: PLUS
58331: ST_TO_ADDR
// for _x = min_x to max_x do
58332: LD_ADDR_VAR 0 5
58336: PUSH
58337: DOUBLE
58338: LD_VAR 0 8
58342: DEC
58343: ST_TO_ADDR
58344: LD_VAR 0 9
58348: PUSH
58349: FOR_TO
58350: IFFALSE 58451
// for _y = min_y to max_y do
58352: LD_ADDR_VAR 0 6
58356: PUSH
58357: DOUBLE
58358: LD_VAR 0 7
58362: DEC
58363: ST_TO_ADDR
58364: LD_VAR 0 10
58368: PUSH
58369: FOR_TO
58370: IFFALSE 58447
// begin if not ValidHex ( _x , _y ) then
58372: LD_VAR 0 5
58376: PPUSH
58377: LD_VAR 0 6
58381: PPUSH
58382: CALL_OW 488
58386: NOT
58387: IFFALSE 58391
// continue ;
58389: GO 58369
// if GetResourceTypeXY ( _x , _y ) then
58391: LD_VAR 0 5
58395: PPUSH
58396: LD_VAR 0 6
58400: PPUSH
58401: CALL_OW 283
58405: IFFALSE 58445
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58407: LD_ADDR_VAR 0 4
58411: PUSH
58412: LD_VAR 0 4
58416: PPUSH
58417: LD_VAR 0 4
58421: PUSH
58422: LD_INT 1
58424: PLUS
58425: PPUSH
58426: LD_VAR 0 5
58430: PUSH
58431: LD_VAR 0 6
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PPUSH
58440: CALL_OW 1
58444: ST_TO_ADDR
// end ;
58445: GO 58369
58447: POP
58448: POP
58449: GO 58349
58451: POP
58452: POP
// end ;
58453: LD_VAR 0 4
58457: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58458: LD_INT 0
58460: PPUSH
58461: PPUSH
58462: PPUSH
58463: PPUSH
58464: PPUSH
58465: PPUSH
58466: PPUSH
58467: PPUSH
// if not units then
58468: LD_VAR 0 1
58472: NOT
58473: IFFALSE 58477
// exit ;
58475: GO 59009
// result := UnitFilter ( units , [ f_ok ] ) ;
58477: LD_ADDR_VAR 0 3
58481: PUSH
58482: LD_VAR 0 1
58486: PPUSH
58487: LD_INT 50
58489: PUSH
58490: EMPTY
58491: LIST
58492: PPUSH
58493: CALL_OW 72
58497: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58498: LD_ADDR_VAR 0 8
58502: PUSH
58503: LD_VAR 0 1
58507: PUSH
58508: LD_INT 1
58510: ARRAY
58511: PPUSH
58512: CALL_OW 255
58516: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58517: LD_ADDR_VAR 0 10
58521: PUSH
58522: LD_INT 29
58524: PUSH
58525: LD_INT 91
58527: PUSH
58528: LD_INT 49
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: LIST
58535: ST_TO_ADDR
// if not result then
58536: LD_VAR 0 3
58540: NOT
58541: IFFALSE 58545
// exit ;
58543: GO 59009
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58545: LD_ADDR_VAR 0 5
58549: PUSH
58550: LD_INT 81
58552: PUSH
58553: LD_VAR 0 8
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PPUSH
58562: CALL_OW 69
58566: ST_TO_ADDR
// for i in result do
58567: LD_ADDR_VAR 0 4
58571: PUSH
58572: LD_VAR 0 3
58576: PUSH
58577: FOR_IN
58578: IFFALSE 59007
// begin tag := GetTag ( i ) + 1 ;
58580: LD_ADDR_VAR 0 9
58584: PUSH
58585: LD_VAR 0 4
58589: PPUSH
58590: CALL_OW 110
58594: PUSH
58595: LD_INT 1
58597: PLUS
58598: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58599: LD_ADDR_VAR 0 7
58603: PUSH
58604: LD_VAR 0 4
58608: PPUSH
58609: CALL_OW 250
58613: PPUSH
58614: LD_VAR 0 4
58618: PPUSH
58619: CALL_OW 251
58623: PPUSH
58624: LD_INT 4
58626: PPUSH
58627: CALL 58200 0 3
58631: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58632: LD_VAR 0 4
58636: PPUSH
58637: CALL_OW 247
58641: PUSH
58642: LD_INT 2
58644: EQUAL
58645: IFFALSE 58657
58647: PUSH
58648: LD_VAR 0 7
58652: PUSH
58653: LD_INT 2
58655: GREATER
58656: AND
58657: IFFALSE 58677
58659: PUSH
58660: LD_VAR 0 4
58664: PPUSH
58665: CALL_OW 264
58669: PUSH
58670: LD_VAR 0 10
58674: IN
58675: NOT
58676: AND
58677: IFFALSE 58716
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58679: LD_VAR 0 4
58683: PPUSH
58684: LD_VAR 0 7
58688: PUSH
58689: LD_INT 1
58691: ARRAY
58692: PUSH
58693: LD_INT 1
58695: ARRAY
58696: PPUSH
58697: LD_VAR 0 7
58701: PUSH
58702: LD_INT 1
58704: ARRAY
58705: PUSH
58706: LD_INT 2
58708: ARRAY
58709: PPUSH
58710: CALL_OW 116
58714: GO 59005
// if path > tag then
58716: LD_VAR 0 2
58720: PUSH
58721: LD_VAR 0 9
58725: GREATER
58726: IFFALSE 58934
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58728: LD_ADDR_VAR 0 6
58732: PUSH
58733: LD_VAR 0 5
58737: PPUSH
58738: LD_INT 91
58740: PUSH
58741: LD_VAR 0 4
58745: PUSH
58746: LD_INT 8
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: PPUSH
58754: CALL_OW 72
58758: ST_TO_ADDR
// if nearEnemy then
58759: LD_VAR 0 6
58763: IFFALSE 58832
// begin if GetWeapon ( i ) = ru_time_lapser then
58765: LD_VAR 0 4
58769: PPUSH
58770: CALL_OW 264
58774: PUSH
58775: LD_INT 49
58777: EQUAL
58778: IFFALSE 58806
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58780: LD_VAR 0 4
58784: PPUSH
58785: LD_VAR 0 6
58789: PPUSH
58790: LD_VAR 0 4
58794: PPUSH
58795: CALL_OW 74
58799: PPUSH
58800: CALL_OW 112
58804: GO 58830
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58806: LD_VAR 0 4
58810: PPUSH
58811: LD_VAR 0 6
58815: PPUSH
58816: LD_VAR 0 4
58820: PPUSH
58821: CALL_OW 74
58825: PPUSH
58826: CALL 60090 0 2
// end else
58830: GO 58932
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58832: LD_VAR 0 4
58836: PPUSH
58837: LD_VAR 0 2
58841: PUSH
58842: LD_VAR 0 9
58846: ARRAY
58847: PUSH
58848: LD_INT 1
58850: ARRAY
58851: PPUSH
58852: LD_VAR 0 2
58856: PUSH
58857: LD_VAR 0 9
58861: ARRAY
58862: PUSH
58863: LD_INT 2
58865: ARRAY
58866: PPUSH
58867: CALL_OW 297
58871: PUSH
58872: LD_INT 6
58874: GREATER
58875: IFFALSE 58918
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58877: LD_VAR 0 4
58881: PPUSH
58882: LD_VAR 0 2
58886: PUSH
58887: LD_VAR 0 9
58891: ARRAY
58892: PUSH
58893: LD_INT 1
58895: ARRAY
58896: PPUSH
58897: LD_VAR 0 2
58901: PUSH
58902: LD_VAR 0 9
58906: ARRAY
58907: PUSH
58908: LD_INT 2
58910: ARRAY
58911: PPUSH
58912: CALL_OW 114
58916: GO 58932
// SetTag ( i , tag ) ;
58918: LD_VAR 0 4
58922: PPUSH
58923: LD_VAR 0 9
58927: PPUSH
58928: CALL_OW 109
// end else
58932: GO 59005
// if enemy then
58934: LD_VAR 0 5
58938: IFFALSE 59005
// begin if GetWeapon ( i ) = ru_time_lapser then
58940: LD_VAR 0 4
58944: PPUSH
58945: CALL_OW 264
58949: PUSH
58950: LD_INT 49
58952: EQUAL
58953: IFFALSE 58981
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58955: LD_VAR 0 4
58959: PPUSH
58960: LD_VAR 0 5
58964: PPUSH
58965: LD_VAR 0 4
58969: PPUSH
58970: CALL_OW 74
58974: PPUSH
58975: CALL_OW 112
58979: GO 59005
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58981: LD_VAR 0 4
58985: PPUSH
58986: LD_VAR 0 5
58990: PPUSH
58991: LD_VAR 0 4
58995: PPUSH
58996: CALL_OW 74
59000: PPUSH
59001: CALL 60090 0 2
// end ; end ;
59005: GO 58577
59007: POP
59008: POP
// end ;
59009: LD_VAR 0 3
59013: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59014: LD_INT 0
59016: PPUSH
59017: PPUSH
59018: PPUSH
// if not unit or IsInUnit ( unit ) then
59019: LD_VAR 0 1
59023: NOT
59024: IFTRUE 59037
59026: PUSH
59027: LD_VAR 0 1
59031: PPUSH
59032: CALL_OW 310
59036: OR
59037: IFFALSE 59041
// exit ;
59039: GO 59132
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59041: LD_ADDR_VAR 0 4
59045: PUSH
59046: LD_VAR 0 1
59050: PPUSH
59051: CALL_OW 250
59055: PPUSH
59056: LD_VAR 0 2
59060: PPUSH
59061: LD_INT 1
59063: PPUSH
59064: CALL_OW 272
59068: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59069: LD_ADDR_VAR 0 5
59073: PUSH
59074: LD_VAR 0 1
59078: PPUSH
59079: CALL_OW 251
59083: PPUSH
59084: LD_VAR 0 2
59088: PPUSH
59089: LD_INT 1
59091: PPUSH
59092: CALL_OW 273
59096: ST_TO_ADDR
// if ValidHex ( x , y ) then
59097: LD_VAR 0 4
59101: PPUSH
59102: LD_VAR 0 5
59106: PPUSH
59107: CALL_OW 488
59111: IFFALSE 59132
// ComTurnXY ( unit , x , y ) ;
59113: LD_VAR 0 1
59117: PPUSH
59118: LD_VAR 0 4
59122: PPUSH
59123: LD_VAR 0 5
59127: PPUSH
59128: CALL_OW 118
// end ;
59132: LD_VAR 0 3
59136: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59137: LD_INT 0
59139: PPUSH
59140: PPUSH
// result := false ;
59141: LD_ADDR_VAR 0 3
59145: PUSH
59146: LD_INT 0
59148: ST_TO_ADDR
// if not units then
59149: LD_VAR 0 2
59153: NOT
59154: IFFALSE 59158
// exit ;
59156: GO 59203
// for i in units do
59158: LD_ADDR_VAR 0 4
59162: PUSH
59163: LD_VAR 0 2
59167: PUSH
59168: FOR_IN
59169: IFFALSE 59201
// if See ( side , i ) then
59171: LD_VAR 0 1
59175: PPUSH
59176: LD_VAR 0 4
59180: PPUSH
59181: CALL_OW 292
59185: IFFALSE 59199
// begin result := true ;
59187: LD_ADDR_VAR 0 3
59191: PUSH
59192: LD_INT 1
59194: ST_TO_ADDR
// exit ;
59195: POP
59196: POP
59197: GO 59203
// end ;
59199: GO 59168
59201: POP
59202: POP
// end ;
59203: LD_VAR 0 3
59207: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59208: LD_INT 0
59210: PPUSH
59211: PPUSH
59212: PPUSH
59213: PPUSH
// if not unit or not points then
59214: LD_VAR 0 1
59218: NOT
59219: IFTRUE 59228
59221: PUSH
59222: LD_VAR 0 2
59226: NOT
59227: OR
59228: IFFALSE 59232
// exit ;
59230: GO 59322
// dist := 99999 ;
59232: LD_ADDR_VAR 0 5
59236: PUSH
59237: LD_INT 99999
59239: ST_TO_ADDR
// for i in points do
59240: LD_ADDR_VAR 0 4
59244: PUSH
59245: LD_VAR 0 2
59249: PUSH
59250: FOR_IN
59251: IFFALSE 59320
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59253: LD_ADDR_VAR 0 6
59257: PUSH
59258: LD_VAR 0 1
59262: PPUSH
59263: LD_VAR 0 4
59267: PUSH
59268: LD_INT 1
59270: ARRAY
59271: PPUSH
59272: LD_VAR 0 4
59276: PUSH
59277: LD_INT 2
59279: ARRAY
59280: PPUSH
59281: CALL_OW 297
59285: ST_TO_ADDR
// if tmpDist < dist then
59286: LD_VAR 0 6
59290: PUSH
59291: LD_VAR 0 5
59295: LESS
59296: IFFALSE 59318
// begin result := i ;
59298: LD_ADDR_VAR 0 3
59302: PUSH
59303: LD_VAR 0 4
59307: ST_TO_ADDR
// dist := tmpDist ;
59308: LD_ADDR_VAR 0 5
59312: PUSH
59313: LD_VAR 0 6
59317: ST_TO_ADDR
// end ; end ;
59318: GO 59250
59320: POP
59321: POP
// end ;
59322: LD_VAR 0 3
59326: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59327: LD_INT 0
59329: PPUSH
// uc_side := side ;
59330: LD_ADDR_OWVAR 20
59334: PUSH
59335: LD_VAR 0 1
59339: ST_TO_ADDR
// uc_nation := 3 ;
59340: LD_ADDR_OWVAR 21
59344: PUSH
59345: LD_INT 3
59347: ST_TO_ADDR
// vc_chassis := 25 ;
59348: LD_ADDR_OWVAR 37
59352: PUSH
59353: LD_INT 25
59355: ST_TO_ADDR
// vc_engine := engine_siberite ;
59356: LD_ADDR_OWVAR 39
59360: PUSH
59361: LD_INT 3
59363: ST_TO_ADDR
// vc_control := control_computer ;
59364: LD_ADDR_OWVAR 38
59368: PUSH
59369: LD_INT 3
59371: ST_TO_ADDR
// vc_weapon := 59 ;
59372: LD_ADDR_OWVAR 40
59376: PUSH
59377: LD_INT 59
59379: ST_TO_ADDR
// result := CreateVehicle ;
59380: LD_ADDR_VAR 0 5
59384: PUSH
59385: CALL_OW 45
59389: ST_TO_ADDR
// SetDir ( result , d ) ;
59390: LD_VAR 0 5
59394: PPUSH
59395: LD_VAR 0 4
59399: PPUSH
59400: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59404: LD_VAR 0 5
59408: PPUSH
59409: LD_VAR 0 2
59413: PPUSH
59414: LD_VAR 0 3
59418: PPUSH
59419: LD_INT 0
59421: PPUSH
59422: CALL_OW 48
// end ;
59426: LD_VAR 0 5
59430: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59431: LD_INT 0
59433: PPUSH
59434: PPUSH
59435: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59436: LD_ADDR_VAR 0 2
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59459: LD_VAR 0 1
59463: NOT
59464: IFTRUE 59497
59466: PUSH
59467: LD_VAR 0 1
59471: PPUSH
59472: CALL_OW 264
59476: PUSH
59477: LD_INT 12
59479: PUSH
59480: LD_INT 51
59482: PUSH
59483: LD_INT 32
59485: PUSH
59486: LD_INT 89
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: IN
59495: NOT
59496: OR
59497: IFFALSE 59501
// exit ;
59499: GO 59599
// for i := 1 to 3 do
59501: LD_ADDR_VAR 0 3
59505: PUSH
59506: DOUBLE
59507: LD_INT 1
59509: DEC
59510: ST_TO_ADDR
59511: LD_INT 3
59513: PUSH
59514: FOR_TO
59515: IFFALSE 59597
// begin tmp := GetCargo ( cargo , i ) ;
59517: LD_ADDR_VAR 0 4
59521: PUSH
59522: LD_VAR 0 1
59526: PPUSH
59527: LD_VAR 0 3
59531: PPUSH
59532: CALL_OW 289
59536: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59537: LD_ADDR_VAR 0 2
59541: PUSH
59542: LD_VAR 0 2
59546: PPUSH
59547: LD_VAR 0 3
59551: PPUSH
59552: LD_VAR 0 4
59556: PPUSH
59557: CALL_OW 1
59561: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59562: LD_ADDR_VAR 0 2
59566: PUSH
59567: LD_VAR 0 2
59571: PPUSH
59572: LD_INT 4
59574: PPUSH
59575: LD_VAR 0 2
59579: PUSH
59580: LD_INT 4
59582: ARRAY
59583: PUSH
59584: LD_VAR 0 4
59588: PLUS
59589: PPUSH
59590: CALL_OW 1
59594: ST_TO_ADDR
// end ;
59595: GO 59514
59597: POP
59598: POP
// end ;
59599: LD_VAR 0 2
59603: RET
// export function Length ( array ) ; begin
59604: LD_INT 0
59606: PPUSH
// result := array + 0 ;
59607: LD_ADDR_VAR 0 2
59611: PUSH
59612: LD_VAR 0 1
59616: PUSH
59617: LD_INT 0
59619: PLUS
59620: ST_TO_ADDR
// end ;
59621: LD_VAR 0 2
59625: RET
// export function PrepareArray ( array ) ; begin
59626: LD_INT 0
59628: PPUSH
// result := array diff 0 ;
59629: LD_ADDR_VAR 0 2
59633: PUSH
59634: LD_VAR 0 1
59638: PUSH
59639: LD_INT 0
59641: DIFF
59642: ST_TO_ADDR
// if not result [ 1 ] then
59643: LD_VAR 0 2
59647: PUSH
59648: LD_INT 1
59650: ARRAY
59651: NOT
59652: IFFALSE 59672
// result := Delete ( result , 1 ) ;
59654: LD_ADDR_VAR 0 2
59658: PUSH
59659: LD_VAR 0 2
59663: PPUSH
59664: LD_INT 1
59666: PPUSH
59667: CALL_OW 3
59671: ST_TO_ADDR
// end ;
59672: LD_VAR 0 2
59676: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59677: LD_INT 0
59679: PPUSH
59680: PPUSH
59681: PPUSH
59682: PPUSH
// sibRocketRange := 25 ;
59683: LD_ADDR_VAR 0 6
59687: PUSH
59688: LD_INT 25
59690: ST_TO_ADDR
// result := false ;
59691: LD_ADDR_VAR 0 4
59695: PUSH
59696: LD_INT 0
59698: ST_TO_ADDR
// for i := 0 to 5 do
59699: LD_ADDR_VAR 0 5
59703: PUSH
59704: DOUBLE
59705: LD_INT 0
59707: DEC
59708: ST_TO_ADDR
59709: LD_INT 5
59711: PUSH
59712: FOR_TO
59713: IFFALSE 59780
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59715: LD_VAR 0 1
59719: PPUSH
59720: LD_VAR 0 5
59724: PPUSH
59725: LD_VAR 0 6
59729: PPUSH
59730: CALL_OW 272
59734: PPUSH
59735: LD_VAR 0 2
59739: PPUSH
59740: LD_VAR 0 5
59744: PPUSH
59745: LD_VAR 0 6
59749: PPUSH
59750: CALL_OW 273
59754: PPUSH
59755: LD_VAR 0 3
59759: PPUSH
59760: CALL_OW 309
59764: IFFALSE 59778
// begin result := true ;
59766: LD_ADDR_VAR 0 4
59770: PUSH
59771: LD_INT 1
59773: ST_TO_ADDR
// exit ;
59774: POP
59775: POP
59776: GO 59782
// end ;
59778: GO 59712
59780: POP
59781: POP
// end ;
59782: LD_VAR 0 4
59786: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59787: LD_INT 0
59789: PPUSH
59790: PPUSH
59791: PPUSH
// if btype = b_depot then
59792: LD_VAR 0 2
59796: PUSH
59797: LD_INT 0
59799: EQUAL
59800: IFFALSE 59812
// begin result := true ;
59802: LD_ADDR_VAR 0 3
59806: PUSH
59807: LD_INT 1
59809: ST_TO_ADDR
// exit ;
59810: GO 59932
// end ; pom := GetBase ( depot ) ;
59812: LD_ADDR_VAR 0 4
59816: PUSH
59817: LD_VAR 0 1
59821: PPUSH
59822: CALL_OW 274
59826: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59827: LD_ADDR_VAR 0 5
59831: PUSH
59832: LD_VAR 0 2
59836: PPUSH
59837: LD_VAR 0 1
59841: PPUSH
59842: CALL_OW 248
59846: PPUSH
59847: CALL_OW 450
59851: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59852: LD_ADDR_VAR 0 3
59856: PUSH
59857: LD_VAR 0 4
59861: PPUSH
59862: LD_INT 1
59864: PPUSH
59865: CALL_OW 275
59869: PUSH
59870: LD_VAR 0 5
59874: PUSH
59875: LD_INT 1
59877: ARRAY
59878: GREATEREQUAL
59879: IFFALSE 59905
59881: PUSH
59882: LD_VAR 0 4
59886: PPUSH
59887: LD_INT 2
59889: PPUSH
59890: CALL_OW 275
59894: PUSH
59895: LD_VAR 0 5
59899: PUSH
59900: LD_INT 2
59902: ARRAY
59903: GREATEREQUAL
59904: AND
59905: IFFALSE 59931
59907: PUSH
59908: LD_VAR 0 4
59912: PPUSH
59913: LD_INT 3
59915: PPUSH
59916: CALL_OW 275
59920: PUSH
59921: LD_VAR 0 5
59925: PUSH
59926: LD_INT 3
59928: ARRAY
59929: GREATEREQUAL
59930: AND
59931: ST_TO_ADDR
// end ;
59932: LD_VAR 0 3
59936: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59937: LD_INT 0
59939: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59940: LD_VAR 0 1
59944: PPUSH
59945: LD_VAR 0 2
59949: PPUSH
59950: LD_INT 0
59952: PPUSH
59953: LD_INT 0
59955: PPUSH
59956: LD_INT 1
59958: PPUSH
59959: LD_INT 0
59961: PPUSH
59962: CALL_OW 587
// end ;
59966: LD_VAR 0 3
59970: RET
// export function CenterOnNow ( unit ) ; begin
59971: LD_INT 0
59973: PPUSH
// result := IsInUnit ( unit ) ;
59974: LD_ADDR_VAR 0 2
59978: PUSH
59979: LD_VAR 0 1
59983: PPUSH
59984: CALL_OW 310
59988: ST_TO_ADDR
// if not result then
59989: LD_VAR 0 2
59993: NOT
59994: IFFALSE 60006
// result := unit ;
59996: LD_ADDR_VAR 0 2
60000: PUSH
60001: LD_VAR 0 1
60005: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
60006: LD_VAR 0 1
60010: PPUSH
60011: CALL_OW 87
// end ;
60015: LD_VAR 0 2
60019: RET
// export function ComMoveHex ( unit , hex ) ; begin
60020: LD_INT 0
60022: PPUSH
// if not hex then
60023: LD_VAR 0 2
60027: NOT
60028: IFFALSE 60032
// exit ;
60030: GO 60085
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
60032: LD_VAR 0 2
60036: PUSH
60037: LD_INT 1
60039: ARRAY
60040: PPUSH
60041: LD_VAR 0 2
60045: PUSH
60046: LD_INT 2
60048: ARRAY
60049: PPUSH
60050: CALL_OW 428
60054: IFFALSE 60058
// exit ;
60056: GO 60085
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
60058: LD_VAR 0 1
60062: PPUSH
60063: LD_VAR 0 2
60067: PUSH
60068: LD_INT 1
60070: ARRAY
60071: PPUSH
60072: LD_VAR 0 2
60076: PUSH
60077: LD_INT 2
60079: ARRAY
60080: PPUSH
60081: CALL_OW 111
// end ;
60085: LD_VAR 0 3
60089: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
60090: LD_INT 0
60092: PPUSH
60093: PPUSH
60094: PPUSH
// if not unit or not enemy then
60095: LD_VAR 0 1
60099: NOT
60100: IFTRUE 60109
60102: PUSH
60103: LD_VAR 0 2
60107: NOT
60108: OR
60109: IFFALSE 60113
// exit ;
60111: GO 60239
// x := GetX ( enemy ) ;
60113: LD_ADDR_VAR 0 4
60117: PUSH
60118: LD_VAR 0 2
60122: PPUSH
60123: CALL_OW 250
60127: ST_TO_ADDR
// y := GetY ( enemy ) ;
60128: LD_ADDR_VAR 0 5
60132: PUSH
60133: LD_VAR 0 2
60137: PPUSH
60138: CALL_OW 251
60142: ST_TO_ADDR
// if ValidHex ( x , y ) then
60143: LD_VAR 0 4
60147: PPUSH
60148: LD_VAR 0 5
60152: PPUSH
60153: CALL_OW 488
60157: IFFALSE 60239
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
60159: LD_VAR 0 2
60163: PPUSH
60164: CALL_OW 247
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: IN
60179: IFTRUE 60202
60181: PUSH
60182: LD_VAR 0 1
60186: PPUSH
60187: CALL_OW 255
60191: PPUSH
60192: LD_VAR 0 2
60196: PPUSH
60197: CALL_OW 292
60201: OR
60202: IFFALSE 60220
// ComAttackUnit ( unit , enemy ) else
60204: LD_VAR 0 1
60208: PPUSH
60209: LD_VAR 0 2
60213: PPUSH
60214: CALL_OW 115
60218: GO 60239
// ComAgressiveMove ( unit , x , y ) ;
60220: LD_VAR 0 1
60224: PPUSH
60225: LD_VAR 0 4
60229: PPUSH
60230: LD_VAR 0 5
60234: PPUSH
60235: CALL_OW 114
// end ;
60239: LD_VAR 0 3
60243: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
60244: LD_INT 0
60246: PPUSH
60247: PPUSH
60248: PPUSH
// list := AreaToList ( area , 0 ) ;
60249: LD_ADDR_VAR 0 5
60253: PUSH
60254: LD_VAR 0 1
60258: PPUSH
60259: LD_INT 0
60261: PPUSH
60262: CALL_OW 517
60266: ST_TO_ADDR
// if not list then
60267: LD_VAR 0 5
60271: NOT
60272: IFFALSE 60276
// exit ;
60274: GO 60406
// if all then
60276: LD_VAR 0 2
60280: IFFALSE 60368
// begin for i := 1 to list [ 1 ] do
60282: LD_ADDR_VAR 0 4
60286: PUSH
60287: DOUBLE
60288: LD_INT 1
60290: DEC
60291: ST_TO_ADDR
60292: LD_VAR 0 5
60296: PUSH
60297: LD_INT 1
60299: ARRAY
60300: PUSH
60301: FOR_TO
60302: IFFALSE 60364
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
60304: LD_ADDR_VAR 0 3
60308: PUSH
60309: LD_VAR 0 3
60313: PPUSH
60314: LD_VAR 0 3
60318: PUSH
60319: LD_INT 1
60321: PLUS
60322: PPUSH
60323: LD_VAR 0 5
60327: PUSH
60328: LD_INT 1
60330: ARRAY
60331: PUSH
60332: LD_VAR 0 4
60336: ARRAY
60337: PUSH
60338: LD_VAR 0 5
60342: PUSH
60343: LD_INT 2
60345: ARRAY
60346: PUSH
60347: LD_VAR 0 4
60351: ARRAY
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PPUSH
60357: CALL_OW 1
60361: ST_TO_ADDR
60362: GO 60301
60364: POP
60365: POP
// exit ;
60366: GO 60406
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
60368: LD_ADDR_VAR 0 3
60372: PUSH
60373: LD_VAR 0 5
60377: PUSH
60378: LD_INT 1
60380: ARRAY
60381: PUSH
60382: LD_INT 1
60384: ARRAY
60385: PUSH
60386: LD_VAR 0 5
60390: PUSH
60391: LD_INT 2
60393: ARRAY
60394: PUSH
60395: LD_INT 1
60397: ARRAY
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: ST_TO_ADDR
// end ;
60406: LD_VAR 0 3
60410: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
60411: LD_INT 0
60413: PPUSH
60414: PPUSH
// list := AreaToList ( area , 0 ) ;
60415: LD_ADDR_VAR 0 4
60419: PUSH
60420: LD_VAR 0 1
60424: PPUSH
60425: LD_INT 0
60427: PPUSH
60428: CALL_OW 517
60432: ST_TO_ADDR
// if not list then
60433: LD_VAR 0 4
60437: NOT
60438: IFFALSE 60442
// exit ;
60440: GO 60483
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60442: LD_ADDR_VAR 0 3
60446: PUSH
60447: LD_VAR 0 4
60451: PUSH
60452: LD_INT 1
60454: ARRAY
60455: PUSH
60456: LD_INT 1
60458: ARRAY
60459: PUSH
60460: LD_VAR 0 4
60464: PUSH
60465: LD_INT 2
60467: ARRAY
60468: PUSH
60469: LD_INT 1
60471: ARRAY
60472: PUSH
60473: LD_VAR 0 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: LIST
60482: ST_TO_ADDR
// end ;
60483: LD_VAR 0 3
60487: RET
// export function First ( array ) ; begin
60488: LD_INT 0
60490: PPUSH
// if not array then
60491: LD_VAR 0 1
60495: NOT
60496: IFFALSE 60500
// exit ;
60498: GO 60514
// result := array [ 1 ] ;
60500: LD_ADDR_VAR 0 2
60504: PUSH
60505: LD_VAR 0 1
60509: PUSH
60510: LD_INT 1
60512: ARRAY
60513: ST_TO_ADDR
// end ;
60514: LD_VAR 0 2
60518: RET
// export function Last ( array ) ; begin
60519: LD_INT 0
60521: PPUSH
// if not array then
60522: LD_VAR 0 1
60526: NOT
60527: IFFALSE 60531
// exit ;
60529: GO 60547
// result := array [ array ] ;
60531: LD_ADDR_VAR 0 2
60535: PUSH
60536: LD_VAR 0 1
60540: PUSH
60541: LD_VAR 0 1
60545: ARRAY
60546: ST_TO_ADDR
// end ;
60547: LD_VAR 0 2
60551: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60552: LD_INT 0
60554: PPUSH
60555: PPUSH
// result := [ ] ;
60556: LD_ADDR_VAR 0 5
60560: PUSH
60561: EMPTY
60562: ST_TO_ADDR
// if not array then
60563: LD_VAR 0 1
60567: NOT
60568: IFFALSE 60572
// exit ;
60570: GO 60684
// for i := 1 to array do
60572: LD_ADDR_VAR 0 6
60576: PUSH
60577: DOUBLE
60578: LD_INT 1
60580: DEC
60581: ST_TO_ADDR
60582: LD_VAR 0 1
60586: PUSH
60587: FOR_TO
60588: IFFALSE 60682
// if array [ i ] [ index ] = value then
60590: LD_VAR 0 1
60594: PUSH
60595: LD_VAR 0 6
60599: ARRAY
60600: PUSH
60601: LD_VAR 0 2
60605: ARRAY
60606: PUSH
60607: LD_VAR 0 3
60611: EQUAL
60612: IFFALSE 60680
// begin if indexColumn then
60614: LD_VAR 0 4
60618: IFFALSE 60654
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60620: LD_ADDR_VAR 0 5
60624: PUSH
60625: LD_VAR 0 5
60629: PPUSH
60630: LD_VAR 0 1
60634: PUSH
60635: LD_VAR 0 6
60639: ARRAY
60640: PUSH
60641: LD_VAR 0 4
60645: ARRAY
60646: PPUSH
60647: CALL 55692 0 2
60651: ST_TO_ADDR
60652: GO 60680
// result := Join ( result , array [ i ] ) ;
60654: LD_ADDR_VAR 0 5
60658: PUSH
60659: LD_VAR 0 5
60663: PPUSH
60664: LD_VAR 0 1
60668: PUSH
60669: LD_VAR 0 6
60673: ARRAY
60674: PPUSH
60675: CALL 55692 0 2
60679: ST_TO_ADDR
// end ;
60680: GO 60587
60682: POP
60683: POP
// end ;
60684: LD_VAR 0 5
60688: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60689: LD_INT 0
60691: PPUSH
// if not vehicles or not parkingPoint then
60692: LD_VAR 0 1
60696: NOT
60697: IFTRUE 60706
60699: PUSH
60700: LD_VAR 0 2
60704: NOT
60705: OR
60706: IFFALSE 60710
// exit ;
60708: GO 60808
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60710: LD_ADDR_VAR 0 1
60714: PUSH
60715: LD_VAR 0 1
60719: PPUSH
60720: LD_INT 50
60722: PUSH
60723: EMPTY
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: LD_INT 92
60731: PUSH
60732: LD_VAR 0 2
60736: PUSH
60737: LD_INT 1
60739: ARRAY
60740: PUSH
60741: LD_VAR 0 2
60745: PUSH
60746: LD_INT 2
60748: ARRAY
60749: PUSH
60750: LD_INT 8
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PPUSH
60767: CALL_OW 72
60771: ST_TO_ADDR
// if not vehicles then
60772: LD_VAR 0 1
60776: NOT
60777: IFFALSE 60781
// exit ;
60779: GO 60808
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60781: LD_VAR 0 1
60785: PPUSH
60786: LD_VAR 0 2
60790: PUSH
60791: LD_INT 1
60793: ARRAY
60794: PPUSH
60795: LD_VAR 0 2
60799: PUSH
60800: LD_INT 2
60802: ARRAY
60803: PPUSH
60804: CALL_OW 111
// end ;
60808: LD_VAR 0 3
60812: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60813: LD_INT 0
60815: PPUSH
60816: PPUSH
60817: PPUSH
// if not side or not area then
60818: LD_VAR 0 1
60822: NOT
60823: IFTRUE 60832
60825: PUSH
60826: LD_VAR 0 2
60830: NOT
60831: OR
60832: IFFALSE 60836
// exit ;
60834: GO 60955
// tmp := AreaToList ( area , 0 ) ;
60836: LD_ADDR_VAR 0 5
60840: PUSH
60841: LD_VAR 0 2
60845: PPUSH
60846: LD_INT 0
60848: PPUSH
60849: CALL_OW 517
60853: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60854: LD_ADDR_VAR 0 4
60858: PUSH
60859: DOUBLE
60860: LD_INT 1
60862: DEC
60863: ST_TO_ADDR
60864: LD_VAR 0 5
60868: PUSH
60869: LD_INT 1
60871: ARRAY
60872: PUSH
60873: FOR_TO
60874: IFFALSE 60953
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60876: LD_VAR 0 5
60880: PUSH
60881: LD_INT 1
60883: ARRAY
60884: PUSH
60885: LD_VAR 0 4
60889: ARRAY
60890: PPUSH
60891: LD_VAR 0 5
60895: PUSH
60896: LD_INT 2
60898: ARRAY
60899: PUSH
60900: LD_VAR 0 4
60904: ARRAY
60905: PPUSH
60906: CALL_OW 351
60910: IFFALSE 60951
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60912: LD_VAR 0 5
60916: PUSH
60917: LD_INT 1
60919: ARRAY
60920: PUSH
60921: LD_VAR 0 4
60925: ARRAY
60926: PPUSH
60927: LD_VAR 0 5
60931: PUSH
60932: LD_INT 2
60934: ARRAY
60935: PUSH
60936: LD_VAR 0 4
60940: ARRAY
60941: PPUSH
60942: LD_VAR 0 1
60946: PPUSH
60947: CALL_OW 244
// end ;
60951: GO 60873
60953: POP
60954: POP
// end ;
60955: LD_VAR 0 3
60959: RET
// export function UniqueArray ( array ) ; var i ; begin
60960: LD_INT 0
60962: PPUSH
60963: PPUSH
// result := [ ] ;
60964: LD_ADDR_VAR 0 2
60968: PUSH
60969: EMPTY
60970: ST_TO_ADDR
// if not array then
60971: LD_VAR 0 1
60975: NOT
60976: IFFALSE 60980
// exit ;
60978: GO 61041
// for i := 1 to array do
60980: LD_ADDR_VAR 0 3
60984: PUSH
60985: DOUBLE
60986: LD_INT 1
60988: DEC
60989: ST_TO_ADDR
60990: LD_VAR 0 1
60994: PUSH
60995: FOR_TO
60996: IFFALSE 61039
// if not array [ i ] in result then
60998: LD_VAR 0 1
61002: PUSH
61003: LD_VAR 0 3
61007: ARRAY
61008: PUSH
61009: LD_VAR 0 2
61013: IN
61014: NOT
61015: IFFALSE 61037
// result := Join ( result , i ) ;
61017: LD_ADDR_VAR 0 2
61021: PUSH
61022: LD_VAR 0 2
61026: PPUSH
61027: LD_VAR 0 3
61031: PPUSH
61032: CALL 55692 0 2
61036: ST_TO_ADDR
61037: GO 60995
61039: POP
61040: POP
// end ; end_of_file
61041: LD_VAR 0 2
61045: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
61046: PPOPN 6
61048: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
61049: LD_EXP 1
61053: PUSH
61054: LD_INT 4
61056: EQUAL
61057: IFFALSE 61093
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61059: LD_STRING setGameDifficulty(
61061: PUSH
61062: LD_OWVAR 67
61066: STR
61067: PUSH
61068: LD_STRING )
61070: STR
61071: PPUSH
61072: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61076: LD_STRING displayDifficulty(
61078: PUSH
61079: LD_OWVAR 67
61083: STR
61084: PUSH
61085: LD_STRING )
61087: STR
61088: PPUSH
61089: CALL_OW 559
// end ; SOS_MapStart ( ) ;
61093: CALL 61122 0 0
// end ; end_of_file
61097: PPOPN 1
61099: END
// every 0 0$1 do
61100: GO 61102
61102: DISABLE
// begin enable ;
61103: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61104: LD_STRING updateTimer(
61106: PUSH
61107: LD_OWVAR 1
61111: STR
61112: PUSH
61113: LD_STRING );
61115: STR
61116: PPUSH
61117: CALL_OW 559
// end ;
61121: END
// export function SOS_MapStart ( ) ; begin
61122: LD_INT 0
61124: PPUSH
// UpdateFactoryWaypoints ( ) ;
61125: CALL 62056 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61129: CALL 62308 0 0
// ParseMultiDataToLua ( ) ;
61133: CALL 62455 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61137: LD_STRING setSpecLogoNumber(
61139: PUSH
61140: LD_INT 2
61142: STR
61143: PUSH
61144: LD_STRING ,
61146: STR
61147: PUSH
61148: LD_INT 1
61150: STR
61151: PUSH
61152: LD_STRING )
61154: STR
61155: PPUSH
61156: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61160: LD_STRING setSpecLogoNumber(
61162: PUSH
61163: LD_INT 3
61165: STR
61166: PUSH
61167: LD_STRING ,
61169: STR
61170: PUSH
61171: LD_INT 2
61173: STR
61174: PUSH
61175: LD_STRING )
61177: STR
61178: PPUSH
61179: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61183: LD_STRING setSpecLogoNumber(
61185: PUSH
61186: LD_INT 4
61188: STR
61189: PUSH
61190: LD_STRING ,
61192: STR
61193: PUSH
61194: LD_INT 3
61196: STR
61197: PUSH
61198: LD_STRING )
61200: STR
61201: PPUSH
61202: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61206: LD_STRING setSpecLogoNumber(
61208: PUSH
61209: LD_INT 5
61211: STR
61212: PUSH
61213: LD_STRING ,
61215: STR
61216: PUSH
61217: LD_INT 4
61219: STR
61220: PUSH
61221: LD_STRING )
61223: STR
61224: PPUSH
61225: CALL_OW 559
// end ;
61229: LD_VAR 0 1
61233: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61234: LD_INT 0
61236: PPUSH
61237: PPUSH
61238: PPUSH
61239: PPUSH
61240: PPUSH
61241: PPUSH
61242: PPUSH
61243: PPUSH
61244: PPUSH
// for i := 1 to 8 do
61245: LD_ADDR_VAR 0 2
61249: PUSH
61250: DOUBLE
61251: LD_INT 1
61253: DEC
61254: ST_TO_ADDR
61255: LD_INT 8
61257: PUSH
61258: FOR_TO
61259: IFFALSE 61644
// begin if mpSidePositions [ i ] then
61261: LD_EXP 5
61265: PUSH
61266: LD_VAR 0 2
61270: ARRAY
61271: IFFALSE 61642
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61273: LD_ADDR_VAR 0 7
61277: PUSH
61278: LD_INT 22
61280: PUSH
61281: LD_VAR 0 2
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 21
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PPUSH
61304: CALL_OW 69
61308: PPUSH
61309: CALL 19760 0 1
61313: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61314: LD_ADDR_VAR 0 9
61318: PUSH
61319: LD_INT 22
61321: PUSH
61322: LD_VAR 0 2
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: LD_INT 30
61336: PUSH
61337: LD_INT 0
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 30
61346: PUSH
61347: LD_INT 1
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: LIST
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PPUSH
61363: CALL_OW 69
61367: ST_TO_ADDR
// crates := 0 ;
61368: LD_ADDR_VAR 0 4
61372: PUSH
61373: LD_INT 0
61375: ST_TO_ADDR
// oil := 0 ;
61376: LD_ADDR_VAR 0 5
61380: PUSH
61381: LD_INT 0
61383: ST_TO_ADDR
// sib := 0 ;
61384: LD_ADDR_VAR 0 6
61388: PUSH
61389: LD_INT 0
61391: ST_TO_ADDR
// if bases then
61392: LD_VAR 0 9
61396: IFFALSE 61502
// begin for j in bases do
61398: LD_ADDR_VAR 0 3
61402: PUSH
61403: LD_VAR 0 9
61407: PUSH
61408: FOR_IN
61409: IFFALSE 61500
// begin base := GetBase ( j ) ;
61411: LD_ADDR_VAR 0 8
61415: PUSH
61416: LD_VAR 0 3
61420: PPUSH
61421: CALL_OW 274
61425: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61426: LD_ADDR_VAR 0 4
61430: PUSH
61431: LD_VAR 0 4
61435: PUSH
61436: LD_VAR 0 8
61440: PPUSH
61441: LD_INT 1
61443: PPUSH
61444: CALL_OW 275
61448: PLUS
61449: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61450: LD_ADDR_VAR 0 5
61454: PUSH
61455: LD_VAR 0 5
61459: PUSH
61460: LD_VAR 0 8
61464: PPUSH
61465: LD_INT 2
61467: PPUSH
61468: CALL_OW 275
61472: PLUS
61473: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61474: LD_ADDR_VAR 0 6
61478: PUSH
61479: LD_VAR 0 6
61483: PUSH
61484: LD_VAR 0 8
61488: PPUSH
61489: LD_INT 3
61491: PPUSH
61492: CALL_OW 275
61496: PLUS
61497: ST_TO_ADDR
// end ;
61498: GO 61408
61500: POP
61501: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61502: LD_STRING setSpecText(
61504: PUSH
61505: LD_VAR 0 2
61509: STR
61510: PUSH
61511: LD_STRING ,
61513: STR
61514: PUSH
61515: LD_INT 2
61517: STR
61518: PUSH
61519: LD_STRING ,
61521: STR
61522: PUSH
61523: LD_VAR 0 4
61527: STR
61528: PUSH
61529: LD_STRING )
61531: STR
61532: PPUSH
61533: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61537: LD_STRING setSpecText(
61539: PUSH
61540: LD_VAR 0 2
61544: STR
61545: PUSH
61546: LD_STRING ,
61548: STR
61549: PUSH
61550: LD_INT 3
61552: STR
61553: PUSH
61554: LD_STRING ,
61556: STR
61557: PUSH
61558: LD_VAR 0 5
61562: STR
61563: PUSH
61564: LD_STRING )
61566: STR
61567: PPUSH
61568: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61572: LD_STRING setSpecText(
61574: PUSH
61575: LD_VAR 0 2
61579: STR
61580: PUSH
61581: LD_STRING ,
61583: STR
61584: PUSH
61585: LD_INT 4
61587: STR
61588: PUSH
61589: LD_STRING ,
61591: STR
61592: PUSH
61593: LD_VAR 0 6
61597: STR
61598: PUSH
61599: LD_STRING )
61601: STR
61602: PPUSH
61603: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61607: LD_STRING setSpecText(
61609: PUSH
61610: LD_VAR 0 2
61614: STR
61615: PUSH
61616: LD_STRING ,
61618: STR
61619: PUSH
61620: LD_INT 5
61622: STR
61623: PUSH
61624: LD_STRING ,
61626: STR
61627: PUSH
61628: LD_VAR 0 7
61632: STR
61633: PUSH
61634: LD_STRING )
61636: STR
61637: PPUSH
61638: CALL_OW 559
// end ; end ;
61642: GO 61258
61644: POP
61645: POP
// end ;
61646: LD_VAR 0 1
61650: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61651: LD_INT 2
61653: PUSH
61654: LD_INT 30
61656: PUSH
61657: LD_INT 0
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 30
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: PPUSH
61679: CALL_OW 69
61683: IFFALSE 61693
61685: GO 61687
61687: DISABLE
// begin enable ;
61688: ENABLE
// UpdateSpectatorBar ;
61689: CALL 61234 0 0
// end ;
61693: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61694: LD_INT 0
61696: PPUSH
// end ;
61697: LD_VAR 0 12
61701: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61702: LD_INT 0
61704: PPUSH
61705: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61706: LD_VAR 0 1
61710: NOT
61711: IFTRUE 61730
61713: PUSH
61714: LD_VAR 0 2
61718: PPUSH
61719: LD_VAR 0 3
61723: PPUSH
61724: CALL_OW 488
61728: NOT
61729: OR
61730: IFTRUE 61765
61732: PUSH
61733: LD_VAR 0 1
61737: PPUSH
61738: CALL_OW 266
61742: PUSH
61743: LD_INT 3
61745: NONEQUAL
61746: IFFALSE 61764
61748: PUSH
61749: LD_VAR 0 1
61753: PPUSH
61754: CALL_OW 247
61758: PUSH
61759: LD_INT 1
61761: EQUAL
61762: NOT
61763: AND
61764: OR
61765: IFFALSE 61769
// exit ;
61767: GO 62051
// if GetType ( factory ) = unit_human then
61769: LD_VAR 0 1
61773: PPUSH
61774: CALL_OW 247
61778: PUSH
61779: LD_INT 1
61781: EQUAL
61782: IFFALSE 61799
// factory := IsInUnit ( factory ) ;
61784: LD_ADDR_VAR 0 1
61788: PUSH
61789: LD_VAR 0 1
61793: PPUSH
61794: CALL_OW 310
61798: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61799: LD_VAR 0 1
61803: PPUSH
61804: CALL_OW 266
61808: PUSH
61809: LD_INT 3
61811: NONEQUAL
61812: IFFALSE 61816
// exit ;
61814: GO 62051
// for i := 1 to Count ( factoryWaypoints ) do
61816: LD_ADDR_VAR 0 5
61820: PUSH
61821: DOUBLE
61822: LD_INT 1
61824: DEC
61825: ST_TO_ADDR
61826: LD_EXP 57
61830: PPUSH
61831: CALL 19760 0 1
61835: PUSH
61836: FOR_TO
61837: IFFALSE 61999
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61839: LD_VAR 0 2
61843: PPUSH
61844: LD_VAR 0 3
61848: PPUSH
61849: CALL_OW 428
61853: PUSH
61854: LD_EXP 57
61858: PUSH
61859: LD_VAR 0 5
61863: ARRAY
61864: PUSH
61865: LD_INT 2
61867: ARRAY
61868: EQUAL
61869: IFFALSE 61901
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61871: LD_ADDR_EXP 57
61875: PUSH
61876: LD_EXP 57
61880: PPUSH
61881: LD_VAR 0 5
61885: PPUSH
61886: CALL_OW 3
61890: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61891: CALL 62056 0 0
// exit ;
61895: POP
61896: POP
61897: GO 62051
// end else
61899: GO 61997
// if factory = factoryWaypoints [ i ] [ 2 ] then
61901: LD_VAR 0 1
61905: PUSH
61906: LD_EXP 57
61910: PUSH
61911: LD_VAR 0 5
61915: ARRAY
61916: PUSH
61917: LD_INT 2
61919: ARRAY
61920: EQUAL
61921: IFFALSE 61997
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61923: LD_ADDR_EXP 57
61927: PUSH
61928: LD_EXP 57
61932: PPUSH
61933: LD_VAR 0 5
61937: PPUSH
61938: CALL_OW 3
61942: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61943: LD_ADDR_EXP 57
61947: PUSH
61948: LD_EXP 57
61952: PPUSH
61953: LD_VAR 0 1
61957: PPUSH
61958: CALL_OW 255
61962: PUSH
61963: LD_VAR 0 1
61967: PUSH
61968: LD_VAR 0 2
61972: PUSH
61973: LD_VAR 0 3
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: PPUSH
61984: CALL 55692 0 2
61988: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61989: CALL 62056 0 0
// exit ;
61993: POP
61994: POP
61995: GO 62051
// end ; end ;
61997: GO 61836
61999: POP
62000: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62001: LD_ADDR_EXP 57
62005: PUSH
62006: LD_EXP 57
62010: PPUSH
62011: LD_VAR 0 1
62015: PPUSH
62016: CALL_OW 255
62020: PUSH
62021: LD_VAR 0 1
62025: PUSH
62026: LD_VAR 0 2
62030: PUSH
62031: LD_VAR 0 3
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: PPUSH
62042: CALL 55692 0 2
62046: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62047: CALL 62056 0 0
// end ;
62051: LD_VAR 0 4
62055: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62056: LD_INT 0
62058: PPUSH
62059: PPUSH
62060: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62061: LD_STRING resetFactoryWaypoint();
62063: PPUSH
62064: CALL_OW 559
// if factoryWaypoints then
62068: LD_EXP 57
62072: IFFALSE 62193
// begin list := factoryWaypoints ;
62074: LD_ADDR_VAR 0 3
62078: PUSH
62079: LD_EXP 57
62083: ST_TO_ADDR
// for i := 1 to list do
62084: LD_ADDR_VAR 0 2
62088: PUSH
62089: DOUBLE
62090: LD_INT 1
62092: DEC
62093: ST_TO_ADDR
62094: LD_VAR 0 3
62098: PUSH
62099: FOR_TO
62100: IFFALSE 62191
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62102: LD_STRING setFactoryWaypointXY(
62104: PUSH
62105: LD_VAR 0 3
62109: PUSH
62110: LD_VAR 0 2
62114: ARRAY
62115: PUSH
62116: LD_INT 1
62118: ARRAY
62119: STR
62120: PUSH
62121: LD_STRING ,
62123: STR
62124: PUSH
62125: LD_VAR 0 3
62129: PUSH
62130: LD_VAR 0 2
62134: ARRAY
62135: PUSH
62136: LD_INT 2
62138: ARRAY
62139: STR
62140: PUSH
62141: LD_STRING ,
62143: STR
62144: PUSH
62145: LD_VAR 0 3
62149: PUSH
62150: LD_VAR 0 2
62154: ARRAY
62155: PUSH
62156: LD_INT 3
62158: ARRAY
62159: STR
62160: PUSH
62161: LD_STRING ,
62163: STR
62164: PUSH
62165: LD_VAR 0 3
62169: PUSH
62170: LD_VAR 0 2
62174: ARRAY
62175: PUSH
62176: LD_INT 4
62178: ARRAY
62179: STR
62180: PUSH
62181: LD_STRING )
62183: STR
62184: PPUSH
62185: CALL_OW 559
62189: GO 62099
62191: POP
62192: POP
// end ; end ;
62193: LD_VAR 0 1
62197: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62198: LD_INT 0
62200: PPUSH
// if HexInfo ( x , y ) = warehouse then
62201: LD_VAR 0 2
62205: PPUSH
62206: LD_VAR 0 3
62210: PPUSH
62211: CALL_OW 428
62215: PUSH
62216: LD_VAR 0 1
62220: EQUAL
62221: IFFALSE 62248
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62223: LD_ADDR_EXP 59
62227: PUSH
62228: LD_EXP 59
62232: PPUSH
62233: LD_VAR 0 1
62237: PPUSH
62238: LD_INT 0
62240: PPUSH
62241: CALL_OW 1
62245: ST_TO_ADDR
62246: GO 62299
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62248: LD_ADDR_EXP 59
62252: PUSH
62253: LD_EXP 59
62257: PPUSH
62258: LD_VAR 0 1
62262: PPUSH
62263: LD_VAR 0 1
62267: PPUSH
62268: CALL_OW 255
62272: PUSH
62273: LD_VAR 0 1
62277: PUSH
62278: LD_VAR 0 2
62282: PUSH
62283: LD_VAR 0 3
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: PPUSH
62294: CALL_OW 1
62298: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62299: CALL 62308 0 0
// end ;
62303: LD_VAR 0 4
62307: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62308: LD_INT 0
62310: PPUSH
62311: PPUSH
62312: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62313: LD_STRING resetWarehouseGatheringPoints();
62315: PPUSH
62316: CALL_OW 559
// if warehouseGatheringPoints then
62320: LD_EXP 59
62324: IFFALSE 62450
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62326: LD_ADDR_VAR 0 3
62330: PUSH
62331: LD_EXP 59
62335: PPUSH
62336: CALL 59626 0 1
62340: ST_TO_ADDR
// for i := 1 to list do
62341: LD_ADDR_VAR 0 2
62345: PUSH
62346: DOUBLE
62347: LD_INT 1
62349: DEC
62350: ST_TO_ADDR
62351: LD_VAR 0 3
62355: PUSH
62356: FOR_TO
62357: IFFALSE 62448
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62359: LD_STRING setWarehouseGatheringPointXY(
62361: PUSH
62362: LD_VAR 0 3
62366: PUSH
62367: LD_VAR 0 2
62371: ARRAY
62372: PUSH
62373: LD_INT 1
62375: ARRAY
62376: STR
62377: PUSH
62378: LD_STRING ,
62380: STR
62381: PUSH
62382: LD_VAR 0 3
62386: PUSH
62387: LD_VAR 0 2
62391: ARRAY
62392: PUSH
62393: LD_INT 2
62395: ARRAY
62396: STR
62397: PUSH
62398: LD_STRING ,
62400: STR
62401: PUSH
62402: LD_VAR 0 3
62406: PUSH
62407: LD_VAR 0 2
62411: ARRAY
62412: PUSH
62413: LD_INT 3
62415: ARRAY
62416: STR
62417: PUSH
62418: LD_STRING ,
62420: STR
62421: PUSH
62422: LD_VAR 0 3
62426: PUSH
62427: LD_VAR 0 2
62431: ARRAY
62432: PUSH
62433: LD_INT 4
62435: ARRAY
62436: STR
62437: PUSH
62438: LD_STRING )
62440: STR
62441: PPUSH
62442: CALL_OW 559
62446: GO 62356
62448: POP
62449: POP
// end ; end ;
62450: LD_VAR 0 1
62454: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62455: LD_INT 0
62457: PPUSH
62458: PPUSH
// if not mpSidePositions then
62459: LD_EXP 5
62463: NOT
62464: IFFALSE 62468
// exit ;
62466: GO 62539
// result :=  ;
62468: LD_ADDR_VAR 0 1
62472: PUSH
62473: LD_STRING 
62475: ST_TO_ADDR
// for i := 1 to 8 do
62476: LD_ADDR_VAR 0 2
62480: PUSH
62481: DOUBLE
62482: LD_INT 1
62484: DEC
62485: ST_TO_ADDR
62486: LD_INT 8
62488: PUSH
62489: FOR_TO
62490: IFFALSE 62520
// begin result := result & mpSidePositions [ i ] & ; ;
62492: LD_ADDR_VAR 0 1
62496: PUSH
62497: LD_VAR 0 1
62501: PUSH
62502: LD_EXP 5
62506: PUSH
62507: LD_VAR 0 2
62511: ARRAY
62512: STR
62513: PUSH
62514: LD_STRING ;
62516: STR
62517: ST_TO_ADDR
// end ;
62518: GO 62489
62520: POP
62521: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62522: LD_STRING setMultiplayerRealPosition("
62524: PUSH
62525: LD_VAR 0 1
62529: STR
62530: PUSH
62531: LD_STRING ");
62533: STR
62534: PPUSH
62535: CALL_OW 559
// end ;
62539: LD_VAR 0 1
62543: RET
