// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2793 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3177 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 13
 869: PUSH
 870: LD_INT 14
 872: PUSH
 873: LD_INT 15
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 19
 885: UNION
 886: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 887: LD_VAR 0 1
 891: PUSH
 892: LD_INT 2
 894: EQUAL
 895: IFFALSE 907
// baseLevel := 1 else
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
 905: GO 921
// baseLevel := mpGameSettings [ 1 ] ;
 907: LD_ADDR_VAR 0 7
 911: PUSH
 912: LD_EXP 6
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 921: LD_ADDR_EXP 24
 925: PUSH
 926: LD_EXP 6
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 6
 944: PUSH
 945: LD_INT 3
 947: ARRAY
 948: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_EXP 6
 958: PUSH
 959: LD_INT 4
 961: ARRAY
 962: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 963: LD_ADDR_EXP 27
 967: PUSH
 968: LD_EXP 6
 972: PUSH
 973: LD_INT 5
 975: ARRAY
 976: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_EXP 6
 986: PUSH
 987: LD_INT 6
 989: ARRAY
 990: PUSH
 991: LD_INT 0
 993: GREATER
 994: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 995: LD_ADDR_VAR 0 6
 999: PUSH
1000: LD_EXP 6
1004: PUSH
1005: LD_INT 7
1007: ARRAY
1008: PUSH
1009: LD_INT 0
1011: GREATER
1012: ST_TO_ADDR
// mpKingArea := 0 ;
1013: LD_ADDR_EXP 34
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpPoints := 0 ;
1021: LD_ADDR_EXP 35
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpEmissions := 0 ;
1029: LD_ADDR_EXP 37
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingArea := 0 ;
1037: LD_ADDR_EXP 1
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingCamArea := 0 ;
1045: LD_ADDR_EXP 2
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1053: LD_EXP 6
1057: PUSH
1058: LD_INT 9
1060: ARRAY
1061: IFFALSE 1193
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1063: LD_ADDR_EXP 36
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 24
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 12
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 23
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 21
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 42
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 21
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 42
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1193: LD_ADDR_EXP 16
1197: PUSH
1198: LD_EXP 6
1202: PUSH
1203: LD_INT 11
1205: ARRAY
1206: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1207: LD_ADDR_EXP 22
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_INT 12
1219: ARRAY
1220: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1221: LD_ADDR_EXP 26
1225: PUSH
1226: LD_EXP 6
1230: PUSH
1231: LD_INT 13
1233: ARRAY
1234: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1235: LD_ADDR_EXP 33
1239: PUSH
1240: LD_EXP 6
1244: PUSH
1245: LD_INT 14
1247: ARRAY
1248: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1249: LD_ADDR_EXP 30
1253: PUSH
1254: LD_EXP 6
1258: PUSH
1259: LD_INT 15
1261: ARRAY
1262: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1263: LD_ADDR_EXP 28
1267: PUSH
1268: LD_EXP 6
1272: PUSH
1273: LD_INT 18
1275: ARRAY
1276: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1277: LD_ADDR_EXP 20
1281: PUSH
1282: LD_EXP 6
1286: PUSH
1287: LD_INT 21
1289: ARRAY
1290: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 2
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: LD_INT 4
1307: PUSH
1308: LD_INT 5
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) ] ;
1322: LD_ADDR_VAR 0 8
1326: PUSH
1327: LD_INT 18
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 53587 0 2
1337: PUSH
1338: LD_INT 24
1340: PPUSH
1341: LD_INT 1
1343: PPUSH
1344: CALL 53587 0 2
1348: PUSH
1349: LD_INT 30
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL 53587 0 2
1359: PUSH
1360: LD_INT 36
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: CALL 53587 0 2
1370: PUSH
1371: LD_INT 42
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL 53587 0 2
1381: PUSH
1382: LD_INT 48
1384: PPUSH
1385: LD_INT 4
1387: PPUSH
1388: CALL 53587 0 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: DOUBLE
1407: LD_INT 1
1409: DEC
1410: ST_TO_ADDR
1411: LD_VAR 0 8
1415: PPUSH
1416: CALL 12902 0 1
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1526
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1424: LD_ADDR_EXP 21
1428: PUSH
1429: LD_EXP 21
1433: PPUSH
1434: LD_VAR 0 3
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 1
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PUSH
1465: LD_INT 3
1467: ARRAY
1468: PPUSH
1469: LD_INT 10
1471: PPUSH
1472: CALL_OW 272
1476: PUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PPUSH
1492: LD_VAR 0 8
1496: PUSH
1497: LD_VAR 0 3
1501: ARRAY
1502: PUSH
1503: LD_INT 3
1505: ARRAY
1506: PPUSH
1507: LD_INT 10
1509: PPUSH
1510: CALL_OW 273
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 1
1523: ST_TO_ADDR
1524: GO 1421
1526: POP
1527: POP
// if hasOil then
1528: LD_VAR 0 5
1532: IFFALSE 1643
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1534: LD_ADDR_VAR 0 4
1538: PUSH
1539: LD_EXP 6
1543: PUSH
1544: LD_INT 6
1546: ARRAY
1547: PUSH
1548: LD_INT 2
1550: EQUAL
1551: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1552: LD_ADDR_EXP 12
1556: PUSH
1557: LD_INT 19
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 53420 0 2
1569: PUSH
1570: LD_INT 25
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 53420 0 2
1582: PUSH
1583: LD_INT 31
1585: PPUSH
1586: LD_VAR 0 4
1590: PPUSH
1591: CALL 53420 0 2
1595: PUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL 53420 0 2
1608: PUSH
1609: LD_INT 43
1611: PPUSH
1612: LD_VAR 0 4
1616: PPUSH
1617: CALL 53420 0 2
1621: PUSH
1622: LD_INT 49
1624: PPUSH
1625: LD_VAR 0 4
1629: PPUSH
1630: CALL 53420 0 2
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// end ; if hasSib then
1643: LD_VAR 0 6
1647: IFFALSE 1758
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1649: LD_ADDR_VAR 0 4
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 7
1661: ARRAY
1662: PUSH
1663: LD_INT 2
1665: EQUAL
1666: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1667: LD_ADDR_EXP 13
1671: PUSH
1672: LD_INT 20
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 53420 0 2
1684: PUSH
1685: LD_INT 26
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 53420 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 53420 0 2
1710: PUSH
1711: LD_INT 38
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 53420 0 2
1723: PUSH
1724: LD_INT 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL 53420 0 2
1736: PUSH
1737: LD_INT 50
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL 53420 0 2
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 1
1765: GREATEREQUAL
1766: IFFALSE 1778
// mpDepots := startPos ;
1768: LD_ADDR_EXP 14
1772: PUSH
1773: LD_VAR 0 8
1777: ST_TO_ADDR
// if baseLevel >= 2 then
1778: LD_VAR 0 7
1782: PUSH
1783: LD_INT 2
1785: GREATEREQUAL
1786: IFFALSE 2101
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] ] ;
1788: LD_ADDR_EXP 17
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 21
1798: PPUSH
1799: LD_INT 4
1801: PPUSH
1802: CALL 53587 0 2
1806: ADD
1807: PUSH
1808: LD_INT 31
1810: PUSH
1811: LD_INT 22
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: CALL 53587 0 2
1821: ADD
1822: PUSH
1823: LD_INT 4
1825: PUSH
1826: LD_INT 23
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: CALL 53587 0 2
1836: ADD
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 27
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL 53587 0 2
1856: ADD
1857: PUSH
1858: LD_INT 31
1860: PUSH
1861: LD_INT 28
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL 53587 0 2
1871: ADD
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 29
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 53587 0 2
1886: ADD
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 34
1898: PPUSH
1899: LD_INT 4
1901: PPUSH
1902: CALL 53587 0 2
1906: ADD
1907: PUSH
1908: LD_INT 31
1910: PUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 4
1916: PPUSH
1917: CALL 53587 0 2
1921: ADD
1922: PUSH
1923: LD_INT 4
1925: PUSH
1926: LD_INT 33
1928: PPUSH
1929: LD_INT 4
1931: PPUSH
1932: CALL 53587 0 2
1936: ADD
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 39
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL 53587 0 2
1956: ADD
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: LD_INT 40
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL 53587 0 2
1971: ADD
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 41
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 53587 0 2
1986: ADD
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 45
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: CALL 53587 0 2
2006: ADD
2007: PUSH
2008: LD_INT 31
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL 53587 0 2
2021: ADD
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: LD_INT 47
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL 53587 0 2
2036: ADD
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL 53587 0 2
2056: ADD
2057: PUSH
2058: LD_INT 31
2060: PUSH
2061: LD_INT 52
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 53587 0 2
2071: ADD
2072: PUSH
2073: LD_INT 4
2075: PUSH
2076: LD_INT 53
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL 53587 0 2
2086: ADD
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: ST_TO_ADDR
// end ; end ;
2101: LD_VAR 0 2
2105: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2106: GO 2108
2108: DISABLE
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
2117: PPUSH
2118: PPUSH
// begin if not mpShipments then
2119: LD_EXP 27
2123: NOT
2124: IFFALSE 2128
// exit ;
2126: GO 2647
// case mpShipments of 1 :
2128: LD_EXP 27
2132: PUSH
2133: LD_INT 1
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2176
2141: POP
// begin time := 0 0$30 ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// normalTime := 0 0$30 ;
2150: LD_ADDR_VAR 0 6
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// maxTime := 1 1$20 ;
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: LD_INT 2800
2165: ST_TO_ADDR
// delayTime := 0 0$5 ;
2166: LD_ADDR_VAR 0 7
2170: PUSH
2171: LD_INT 175
2173: ST_TO_ADDR
// end ; 2 :
2174: GO 2306
2176: LD_INT 2
2178: DOUBLE
2179: EQUAL
2180: IFTRUE 2184
2182: GO 2219
2184: POP
// begin time := 0 0$25 ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// normalTime := 0 0$25 ;
2193: LD_ADDR_VAR 0 6
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// maxTime := 1 1$10 ;
2201: LD_ADDR_VAR 0 8
2205: PUSH
2206: LD_INT 2450
2208: ST_TO_ADDR
// delayTime := 0 0$4 ;
2209: LD_ADDR_VAR 0 7
2213: PUSH
2214: LD_INT 140
2216: ST_TO_ADDR
// end ; 3 :
2217: GO 2306
2219: LD_INT 3
2221: DOUBLE
2222: EQUAL
2223: IFTRUE 2227
2225: GO 2262
2227: POP
// begin time := 0 0$20 ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// normalTime := 0 0$20 ;
2236: LD_ADDR_VAR 0 6
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// maxTime := 1 1$00 ;
2244: LD_ADDR_VAR 0 8
2248: PUSH
2249: LD_INT 2100
2251: ST_TO_ADDR
// delayTime := 0 0$3 ;
2252: LD_ADDR_VAR 0 7
2256: PUSH
2257: LD_INT 105
2259: ST_TO_ADDR
// end ; 4 :
2260: GO 2306
2262: LD_INT 4
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2305
2270: POP
// begin time := 0 0$15 ;
2271: LD_ADDR_VAR 0 4
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// normalTime := 0 0$15 ;
2279: LD_ADDR_VAR 0 6
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// maxTime := 0 0$55 ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_INT 1925
2294: ST_TO_ADDR
// delayTime := 0 0$2 ;
2295: LD_ADDR_VAR 0 7
2299: PUSH
2300: LD_INT 70
2302: ST_TO_ADDR
// end ; end ;
2303: GO 2306
2305: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_INT 7
2313: PUSH
2314: LD_INT 8
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: LD_INT 11
2325: PUSH
2326: LD_INT 12
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 ] ;
2337: LD_ADDR_VAR 0 5
2341: PUSH
2342: LD_INT 13
2344: PUSH
2345: LD_INT 14
2347: PUSH
2348: LD_INT 15
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: ST_TO_ADDR
// for i := 1 to 8 do
2356: LD_ADDR_VAR 0 1
2360: PUSH
2361: DOUBLE
2362: LD_INT 1
2364: DEC
2365: ST_TO_ADDR
2366: LD_INT 8
2368: PUSH
2369: FOR_TO
2370: IFFALSE 2417
// begin if not mpSidePositions [ i ] then
2372: LD_EXP 7
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: NOT
2383: IFFALSE 2387
// continue ;
2385: GO 2369
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2387: LD_ADDR_VAR 0 5
2391: PUSH
2392: LD_VAR 0 5
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_EXP 7
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: ARRAY
2413: ADD
2414: ST_TO_ADDR
// end ;
2415: GO 2369
2417: POP
2418: POP
// x := 1 ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// repeat wait ( time ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: CALL_OW 67
// x := Inc ( x ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: CALL 50241 0 1
2450: ST_TO_ADDR
// if x > 5 then
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 5
2458: GREATER
2459: IFFALSE 2469
// x := 1 ;
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// for i in areas do
2469: LD_ADDR_VAR 0 1
2473: PUSH
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_IN
2480: IFFALSE 2519
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2482: LD_VAR 0 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 287
2494: PUSH
2495: LD_INT 20
2497: LESS
2498: IFFALSE 2517
// begin CreateCratesArea ( x , i , true ) ;
2500: LD_VAR 0 2
2504: PPUSH
2505: LD_VAR 0 1
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 55
// end ; end ;
2517: GO 2479
2519: POP
2520: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2521: LD_INT 17
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 287
2531: PUSH
2532: LD_INT 0
2534: EQUAL
2535: IFFALSE 2574
// begin for i := 1 to 3 do
2537: LD_ADDR_VAR 0 1
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_INT 3
2549: PUSH
2550: FOR_TO
2551: IFFALSE 2570
// CreateCratesArea ( x , CenterArea , true ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 17
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: CALL_OW 55
2568: GO 2550
2570: POP
2571: POP
// end else
2572: GO 2605
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2574: LD_INT 17
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL_OW 287
2584: PUSH
2585: LD_INT 30
2587: LESS
2588: IFFALSE 2605
// CreateCratesArea ( x , CenterArea , true ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 17
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 55
// time := time + delayTime ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: LD_VAR 0 4
2614: PUSH
2615: LD_VAR 0 7
2619: PLUS
2620: ST_TO_ADDR
// if time > maxTime then
2621: LD_VAR 0 4
2625: PUSH
2626: LD_VAR 0 8
2630: GREATER
2631: IFFALSE 2643
// time := normalTime ;
2633: LD_ADDR_VAR 0 4
2637: PUSH
2638: LD_VAR 0 6
2642: ST_TO_ADDR
// until false ;
2643: LD_INT 0
2645: IFFALSE 2427
// end ; end_of_file
2647: PPOPN 8
2649: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL 54385 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 8079 0 1
// end ;
2668: PPOPN 1
2670: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 54402 0 1
// end ;
2680: PPOPN 1
2682: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 8786 0 1
2692: PPOPN 1
2694: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: CALL 54443 0 2
2709: PPOPN 2
2711: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: LD_VAR 0 3
2726: PPUSH
2727: CALL 8839 0 3
2731: PPOPN 3
2733: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2734: LD_VAR 0 1
2738: PPUSH
2739: LD_VAR 0 2
2743: PPUSH
2744: LD_VAR 0 3
2748: PPUSH
2749: LD_VAR 0 4
2753: PPUSH
2754: LD_VAR 0 5
2758: PPUSH
2759: CALL 9478 0 5
2763: PPOPN 5
2765: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2766: LD_VAR 0 1
2770: PPUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: LD_VAR 0 3
2780: PPUSH
2781: LD_VAR 0 4
2785: PPUSH
2786: CALL 9581 0 4
2790: PPOPN 4
2792: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2793: LD_INT 0
2795: PPUSH
2796: PPUSH
// disable ( mpActive ) ;
2797: LD_INT 100
2799: DISABLE_MARKED
// disable ( mpWin ) ;
2800: LD_INT 101
2802: DISABLE_MARKED
// disable ( mpLose ) ;
2803: LD_INT 102
2805: DISABLE_MARKED
// mpGameType := 0 ;
2806: LD_ADDR_EXP 3
2810: PUSH
2811: LD_INT 0
2813: ST_TO_ADDR
// mpGameSettings := [ ] ;
2814: LD_ADDR_EXP 6
2818: PUSH
2819: EMPTY
2820: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2821: LD_ADDR_EXP 4
2825: PUSH
2826: EMPTY
2827: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2828: LD_ADDR_EXP 5
2832: PUSH
2833: EMPTY
2834: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2835: LD_ADDR_EXP 29
2839: PUSH
2840: LD_INT 2
2842: PUSH
2843: LD_INT 2
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2850: LD_ADDR_EXP 12
2854: PUSH
2855: EMPTY
2856: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2857: LD_ADDR_EXP 13
2861: PUSH
2862: EMPTY
2863: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2864: LD_ADDR_EXP 41
2868: PUSH
2869: EMPTY
2870: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2871: LD_ADDR_EXP 42
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpDepots := [ ] ;
2878: LD_ADDR_EXP 14
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpBuildings := [ ] ;
2885: LD_ADDR_EXP 17
2889: PUSH
2890: EMPTY
2891: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2892: LD_ADDR_EXP 18
2896: PUSH
2897: EMPTY
2898: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2899: LD_ADDR_EXP 19
2903: PUSH
2904: EMPTY
2905: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2906: LD_ADDR_EXP 20
2910: PUSH
2911: EMPTY
2912: ST_TO_ADDR
// mpStartingResources := [ ] ;
2913: LD_ADDR_EXP 15
2917: PUSH
2918: EMPTY
2919: ST_TO_ADDR
// mpStartPos := [ ] ;
2920: LD_ADDR_EXP 21
2924: PUSH
2925: EMPTY
2926: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2927: LD_ADDR_EXP 22
2931: PUSH
2932: LD_INT 1
2934: NEG
2935: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2936: LD_ADDR_EXP 23
2940: PUSH
2941: EMPTY
2942: ST_TO_ADDR
// mpApemans := [ ] ;
2943: LD_ADDR_EXP 30
2947: PUSH
2948: EMPTY
2949: ST_TO_ADDR
// mpApemansArea := [ ] ;
2950: LD_ADDR_EXP 31
2954: PUSH
2955: EMPTY
2956: ST_TO_ADDR
// mpRespawn := [ ] ;
2957: LD_ADDR_EXP 33
2961: PUSH
2962: EMPTY
2963: ST_TO_ADDR
// mpKingArea := 0 ;
2964: LD_ADDR_EXP 34
2968: PUSH
2969: LD_INT 0
2971: ST_TO_ADDR
// mpPoints := [ ] ;
2972: LD_ADDR_EXP 35
2976: PUSH
2977: EMPTY
2978: ST_TO_ADDR
// mpVehicles := 0 ;
2979: LD_ADDR_EXP 36
2983: PUSH
2984: LD_INT 0
2986: ST_TO_ADDR
// mpShipments := 0 ;
2987: LD_ADDR_EXP 27
2991: PUSH
2992: LD_INT 0
2994: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2995: LD_ADDR_EXP 40
2999: PUSH
3000: EMPTY
3001: PUSH
3002: EMPTY
3003: PUSH
3004: EMPTY
3005: PUSH
3006: EMPTY
3007: PUSH
3008: EMPTY
3009: PUSH
3010: EMPTY
3011: PUSH
3012: EMPTY
3013: PUSH
3014: EMPTY
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3026: LD_ADDR_EXP 32
3030: PUSH
3031: EMPTY
3032: PUSH
3033: EMPTY
3034: PUSH
3035: EMPTY
3036: PUSH
3037: EMPTY
3038: PUSH
3039: EMPTY
3040: PUSH
3041: EMPTY
3042: PUSH
3043: EMPTY
3044: PUSH
3045: EMPTY
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: ST_TO_ADDR
// mpEmissions := 0 ;
3057: LD_ADDR_EXP 37
3061: PUSH
3062: LD_INT 0
3064: ST_TO_ADDR
// mpTeleports := 0 ;
3065: LD_ADDR_EXP 43
3069: PUSH
3070: LD_INT 0
3072: ST_TO_ADDR
// mpArtifacts := 0 ;
3073: LD_ADDR_EXP 44
3077: PUSH
3078: LD_INT 0
3080: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3081: LD_ADDR_EXP 45
3085: PUSH
3086: LD_INT 0
3088: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3089: LD_ADDR_EXP 25
3093: PUSH
3094: LD_INT 3
3096: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3097: LD_ADDR_EXP 24
3101: PUSH
3102: LD_INT 15
3104: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3105: LD_ADDR_EXP 38
3109: PUSH
3110: LD_INT 0
3112: ST_TO_ADDR
// mpGameActive := false ;
3113: LD_ADDR_EXP 39
3117: PUSH
3118: LD_INT 0
3120: ST_TO_ADDR
// mpBlockRespThread := false ;
3121: LD_ADDR_EXP 46
3125: PUSH
3126: LD_INT 0
3128: ST_TO_ADDR
// for i := 1 to 32 do
3129: LD_ADDR_VAR 0 2
3133: PUSH
3134: DOUBLE
3135: LD_INT 1
3137: DEC
3138: ST_TO_ADDR
3139: LD_INT 32
3141: PUSH
3142: FOR_TO
3143: IFFALSE 3170
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3145: LD_ADDR_EXP 6
3149: PUSH
3150: LD_EXP 6
3154: PPUSH
3155: LD_VAR 0 2
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 1
3167: ST_TO_ADDR
3168: GO 3142
3170: POP
3171: POP
// end ;
3172: LD_VAR 0 1
3176: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3177: LD_INT 0
3179: PPUSH
3180: PPUSH
3181: PPUSH
3182: PPUSH
3183: PPUSH
3184: PPUSH
3185: PPUSH
3186: PPUSH
3187: PPUSH
3188: PPUSH
3189: PPUSH
3190: PPUSH
3191: PPUSH
3192: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
3193: LD_ADDR_VAR 0 14
3197: PUSH
3198: LD_INT 1
3200: PUSH
3201: LD_INT 2
3203: PUSH
3204: LD_INT 3
3206: PUSH
3207: LD_INT 5
3209: PUSH
3210: LD_INT 6
3212: PUSH
3213: LD_INT 7
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: ST_TO_ADDR
// for i in gameTypes do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: LD_VAR 0 14
3233: PUSH
3234: FOR_IN
3235: IFFALSE 3244
// disable ( i ) ;
3237: LD_VAR 0 2
3241: DISABLE_MARKED
3242: GO 3234
3244: POP
3245: POP
// if Multiplayer then
3246: LD_OWVAR 4
3250: IFFALSE 3434
// begin mpGameType := mp_game_type ;
3252: LD_ADDR_EXP 3
3256: PUSH
3257: LD_OWVAR 6
3261: ST_TO_ADDR
// your_side := mp_player_side ;
3262: LD_ADDR_OWVAR 2
3266: PUSH
3267: LD_OWVAR 7
3271: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3272: LD_ADDR_EXP 7
3276: PUSH
3277: LD_OWVAR 17
3281: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3282: LD_ADDR_EXP 8
3286: PUSH
3287: LD_OWVAR 15
3291: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3292: LD_ADDR_EXP 9
3296: PUSH
3297: LD_OWVAR 16
3301: ST_TO_ADDR
// mpTeams := mp_teams ;
3302: LD_ADDR_EXP 10
3306: PUSH
3307: LD_OWVAR 12
3311: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: DOUBLE
3318: LD_INT 1
3320: DEC
3321: ST_TO_ADDR
3322: LD_EXP 4
3326: PPUSH
3327: CALL 12902 0 1
3331: PUSH
3332: FOR_TO
3333: IFFALSE 3409
// begin setting := mpGameSettingsKeys [ i ] ;
3335: LD_ADDR_VAR 0 12
3339: PUSH
3340: LD_EXP 4
3344: PUSH
3345: LD_VAR 0 2
3349: ARRAY
3350: ST_TO_ADDR
// if setting then
3351: LD_VAR 0 12
3355: IFFALSE 3407
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3357: LD_ADDR_EXP 6
3361: PUSH
3362: LD_EXP 6
3366: PPUSH
3367: LD_VAR 0 2
3371: PPUSH
3372: LD_EXP 5
3376: PUSH
3377: LD_VAR 0 2
3381: ARRAY
3382: PUSH
3383: LD_VAR 0 2
3387: PUSH
3388: LD_INT 1
3390: MINUS
3391: PPUSH
3392: CALL_OW 426
3396: PUSH
3397: LD_INT 1
3399: PLUS
3400: ARRAY
3401: PPUSH
3402: CALL_OW 1
3406: ST_TO_ADDR
// end ;
3407: GO 3332
3409: POP
3410: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3411: LD_ADDR_EXP 11
3415: PUSH
3416: LD_EXP 8
3420: PUSH
3421: LD_INT 0
3423: PUSH
3424: EMPTY
3425: LIST
3426: DIFF
3427: PUSH
3428: LD_INT 1
3430: GREATER
3431: ST_TO_ADDR
// end else
3432: GO 3434
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3434: LD_EXP 3
3438: PPUSH
3439: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3443: LD_EXP 18
3447: PPUSH
3448: CALL 12902 0 1
3452: IFFALSE 3483
// begin for i in mpMarkedAreas do
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: LD_EXP 18
3463: PUSH
3464: FOR_IN
3465: IFFALSE 3481
// SetAreaMapShow ( i , 0 ) ;
3467: LD_VAR 0 2
3471: PPUSH
3472: LD_INT 0
3474: PPUSH
3475: CALL_OW 424
3479: GO 3464
3481: POP
3482: POP
// end ; for i := 1 to 8 do
3483: LD_ADDR_VAR 0 2
3487: PUSH
3488: DOUBLE
3489: LD_INT 1
3491: DEC
3492: ST_TO_ADDR
3493: LD_INT 8
3495: PUSH
3496: FOR_TO
3497: IFFALSE 4932
// begin if not mpSidePositions [ i ] then
3499: LD_EXP 7
3503: PUSH
3504: LD_VAR 0 2
3508: ARRAY
3509: NOT
3510: IFFALSE 3514
// continue ;
3512: GO 3496
// side := i ;
3514: LD_ADDR_VAR 0 7
3518: PUSH
3519: LD_VAR 0 2
3523: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3524: LD_ADDR_VAR 0 9
3528: PUSH
3529: LD_EXP 9
3533: PUSH
3534: LD_VAR 0 2
3538: ARRAY
3539: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3540: LD_ADDR_VAR 0 8
3544: PUSH
3545: LD_EXP 7
3549: PUSH
3550: LD_VAR 0 2
3554: ARRAY
3555: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3556: LD_EXP 12
3560: PPUSH
3561: CALL 12902 0 1
3565: IFFALSE 3642
// begin for j in mpOilDeposits [ pos ] do
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_EXP 12
3576: PUSH
3577: LD_VAR 0 8
3581: ARRAY
3582: PUSH
3583: FOR_IN
3584: IFFALSE 3640
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3586: LD_VAR 0 3
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: PPUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: PPUSH
3604: LD_INT 2
3606: PPUSH
3607: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3611: LD_VAR 0 3
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_VAR 0 3
3624: PUSH
3625: LD_INT 2
3627: ARRAY
3628: PPUSH
3629: LD_VAR 0 7
3633: PPUSH
3634: CALL_OW 441
// end ;
3638: GO 3583
3640: POP
3641: POP
// end ; if Count ( mpSibDeposits ) then
3642: LD_EXP 13
3646: PPUSH
3647: CALL 12902 0 1
3651: IFFALSE 3728
// begin for j in mpSibDeposits [ pos ] do
3653: LD_ADDR_VAR 0 3
3657: PUSH
3658: LD_EXP 13
3662: PUSH
3663: LD_VAR 0 8
3667: ARRAY
3668: PUSH
3669: FOR_IN
3670: IFFALSE 3726
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3672: LD_VAR 0 3
3676: PUSH
3677: LD_INT 1
3679: ARRAY
3680: PPUSH
3681: LD_VAR 0 3
3685: PUSH
3686: LD_INT 2
3688: ARRAY
3689: PPUSH
3690: LD_INT 3
3692: PPUSH
3693: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3697: LD_VAR 0 3
3701: PUSH
3702: LD_INT 1
3704: ARRAY
3705: PPUSH
3706: LD_VAR 0 3
3710: PUSH
3711: LD_INT 2
3713: ARRAY
3714: PPUSH
3715: LD_VAR 0 7
3719: PPUSH
3720: CALL_OW 441
// end ;
3724: GO 3669
3726: POP
3727: POP
// end ; InitBc ;
3728: CALL_OW 21
// InitUc ;
3732: CALL_OW 18
// uc_side := side ;
3736: LD_ADDR_OWVAR 20
3740: PUSH
3741: LD_VAR 0 7
3745: ST_TO_ADDR
// uc_nation := nation ;
3746: LD_ADDR_OWVAR 21
3750: PUSH
3751: LD_VAR 0 9
3755: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3756: LD_EXP 22
3760: PUSH
3761: LD_INT 1
3763: NEG
3764: GREATER
3765: IFFALSE 3924
// begin x := mpStartPos [ pos ] [ 1 ] ;
3767: LD_ADDR_VAR 0 5
3771: PUSH
3772: LD_EXP 21
3776: PUSH
3777: LD_VAR 0 8
3781: ARRAY
3782: PUSH
3783: LD_INT 1
3785: ARRAY
3786: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3787: LD_ADDR_VAR 0 6
3791: PUSH
3792: LD_EXP 21
3796: PUSH
3797: LD_VAR 0 8
3801: ARRAY
3802: PUSH
3803: LD_INT 2
3805: ARRAY
3806: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3807: LD_VAR 0 5
3811: PPUSH
3812: LD_VAR 0 6
3816: PPUSH
3817: LD_INT 12
3819: PPUSH
3820: LD_INT 2
3822: PPUSH
3823: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3827: LD_ADDR_EXP 23
3831: PUSH
3832: LD_EXP 23
3836: PPUSH
3837: LD_VAR 0 7
3841: PPUSH
3842: LD_VAR 0 7
3846: PPUSH
3847: LD_VAR 0 5
3851: PPUSH
3852: LD_VAR 0 6
3856: PPUSH
3857: LD_INT 1
3859: PUSH
3860: LD_INT 100
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 2
3869: PUSH
3870: LD_INT 70
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PUSH
3877: LD_INT 3
3879: PUSH
3880: LD_INT 40
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: PUSH
3887: LD_INT 10
3889: PUSH
3890: LD_INT 25
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 20
3899: PUSH
3900: LD_INT 100
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: PPUSH
3914: CALL_OW 418
3918: PPUSH
3919: CALL_OW 1
3923: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3924: LD_EXP 14
3928: PPUSH
3929: CALL 12902 0 1
3933: IFFALSE 4128
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
3935: LD_EXP 3
3939: PUSH
3940: LD_INT 2
3942: PUSH
3943: LD_INT 6
3945: PUSH
3946: LD_INT 7
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: LIST
3953: IN
3954: IFFALSE 3974
// begin bc_level := 10 ;
3956: LD_ADDR_OWVAR 43
3960: PUSH
3961: LD_INT 10
3963: ST_TO_ADDR
// bc_type := b_warehouse ;
3964: LD_ADDR_OWVAR 42
3968: PUSH
3969: LD_INT 1
3971: ST_TO_ADDR
// end else
3972: GO 3990
// begin bc_level := 0 ;
3974: LD_ADDR_OWVAR 43
3978: PUSH
3979: LD_INT 0
3981: ST_TO_ADDR
// bc_type := b_depot ;
3982: LD_ADDR_OWVAR 42
3986: PUSH
3987: LD_INT 0
3989: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3990: LD_ADDR_VAR 0 4
3994: PUSH
3995: LD_EXP 14
3999: PUSH
4000: LD_VAR 0 8
4004: ARRAY
4005: PUSH
4006: LD_INT 1
4008: ARRAY
4009: PPUSH
4010: LD_EXP 14
4014: PUSH
4015: LD_VAR 0 8
4019: ARRAY
4020: PUSH
4021: LD_INT 2
4023: ARRAY
4024: PPUSH
4025: LD_EXP 14
4029: PUSH
4030: LD_VAR 0 8
4034: ARRAY
4035: PUSH
4036: LD_INT 3
4038: ARRAY
4039: PPUSH
4040: CALL_OW 47
4044: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4045: LD_VAR 0 4
4049: PPUSH
4050: LD_STRING @
4052: PUSH
4053: LD_VAR 0 7
4057: STR
4058: PPUSH
4059: CALL_OW 500
// if Count ( mpStartingResources ) then
4063: LD_EXP 15
4067: PPUSH
4068: CALL 12902 0 1
4072: IFFALSE 4126
// begin for j := 1 to mpStartingResources do
4074: LD_ADDR_VAR 0 3
4078: PUSH
4079: DOUBLE
4080: LD_INT 1
4082: DEC
4083: ST_TO_ADDR
4084: LD_EXP 15
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4124
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4092: LD_VAR 0 4
4096: PPUSH
4097: CALL_OW 274
4101: PPUSH
4102: LD_VAR 0 3
4106: PPUSH
4107: LD_EXP 15
4111: PUSH
4112: LD_VAR 0 3
4116: ARRAY
4117: PPUSH
4118: CALL_OW 277
4122: GO 4089
4124: POP
4125: POP
// end ; end else
4126: GO 4335
// if Count ( mpStartingResources ) then
4128: LD_EXP 15
4132: PPUSH
4133: CALL 12902 0 1
4137: IFFALSE 4335
// begin x := mpStartPos [ pos ] [ 1 ] ;
4139: LD_ADDR_VAR 0 5
4143: PUSH
4144: LD_EXP 21
4148: PUSH
4149: LD_VAR 0 8
4153: ARRAY
4154: PUSH
4155: LD_INT 1
4157: ARRAY
4158: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4159: LD_ADDR_VAR 0 6
4163: PUSH
4164: LD_EXP 21
4168: PUSH
4169: LD_VAR 0 8
4173: ARRAY
4174: PUSH
4175: LD_INT 2
4177: ARRAY
4178: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4179: LD_ADDR_VAR 0 3
4183: PUSH
4184: DOUBLE
4185: LD_INT 1
4187: DEC
4188: ST_TO_ADDR
4189: LD_EXP 15
4193: PUSH
4194: FOR_TO
4195: IFFALSE 4333
// begin resources := mpStartingResources [ j ] ;
4197: LD_ADDR_VAR 0 13
4201: PUSH
4202: LD_EXP 15
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: ST_TO_ADDR
// if resources = 0 then
4213: LD_VAR 0 13
4217: PUSH
4218: LD_INT 0
4220: EQUAL
4221: IFFALSE 4225
// continue ;
4223: GO 4194
// repeat if resources >= 50 then
4225: LD_VAR 0 13
4229: PUSH
4230: LD_INT 50
4232: GREATEREQUAL
4233: IFFALSE 4279
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4235: LD_VAR 0 3
4239: PPUSH
4240: LD_INT 5
4242: PPUSH
4243: LD_VAR 0 5
4247: PPUSH
4248: LD_VAR 0 6
4252: PPUSH
4253: LD_INT 6
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: CALL_OW 60
// resources := resources - 50 ;
4263: LD_ADDR_VAR 0 13
4267: PUSH
4268: LD_VAR 0 13
4272: PUSH
4273: LD_INT 50
4275: MINUS
4276: ST_TO_ADDR
// end else
4277: GO 4321
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4279: LD_VAR 0 3
4283: PPUSH
4284: LD_VAR 0 13
4288: PUSH
4289: LD_INT 10
4291: DIV
4292: PPUSH
4293: LD_VAR 0 5
4297: PPUSH
4298: LD_VAR 0 6
4302: PPUSH
4303: LD_INT 6
4305: PPUSH
4306: LD_INT 0
4308: PPUSH
4309: CALL_OW 60
// resources := 0 ;
4313: LD_ADDR_VAR 0 13
4317: PUSH
4318: LD_INT 0
4320: ST_TO_ADDR
// end ; until resources <= 0 ;
4321: LD_VAR 0 13
4325: PUSH
4326: LD_INT 0
4328: LESSEQUAL
4329: IFFALSE 4225
// end ;
4331: GO 4194
4333: POP
4334: POP
// end ; if Count ( mpBuildings ) then
4335: LD_EXP 17
4339: PPUSH
4340: CALL 12902 0 1
4344: IFFALSE 4422
// begin for j in mpBuildings [ pos ] do
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_EXP 17
4355: PUSH
4356: LD_VAR 0 8
4360: ARRAY
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4420
// begin bc_level := 0 ;
4365: LD_ADDR_OWVAR 43
4369: PUSH
4370: LD_INT 0
4372: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4373: LD_ADDR_OWVAR 42
4377: PUSH
4378: LD_VAR 0 3
4382: PUSH
4383: LD_INT 1
4385: ARRAY
4386: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4387: LD_VAR 0 3
4391: PUSH
4392: LD_INT 2
4394: ARRAY
4395: PPUSH
4396: LD_VAR 0 3
4400: PUSH
4401: LD_INT 3
4403: ARRAY
4404: PPUSH
4405: LD_VAR 0 3
4409: PUSH
4410: LD_INT 4
4412: ARRAY
4413: PPUSH
4414: CALL_OW 47
// end ;
4418: GO 4362
4420: POP
4421: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4422: LD_EXP 26
4426: IFFALSE 4446
4428: PUSH
4429: LD_INT 20
4431: PPUSH
4432: LD_VAR 0 7
4436: PPUSH
4437: CALL_OW 321
4441: PUSH
4442: LD_INT 1
4444: EQUAL
4445: AND
4446: IFFALSE 4463
// SetTech ( tech_SibDet , side , state_researched ) ;
4448: LD_INT 20
4450: PPUSH
4451: LD_VAR 0 7
4455: PPUSH
4456: LD_INT 2
4458: PPUSH
4459: CALL_OW 322
// if not mpArtifacts then
4463: LD_EXP 44
4467: NOT
4468: IFFALSE 4485
// SetTech ( tech_artifact , side , state_disabled ) ;
4470: LD_INT 24
4472: PPUSH
4473: LD_VAR 0 7
4477: PPUSH
4478: LD_INT 0
4480: PPUSH
4481: CALL_OW 322
// if mpSibBomb = 1 then
4485: LD_EXP 28
4489: PUSH
4490: LD_INT 1
4492: EQUAL
4493: IFFALSE 4512
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4495: LD_INT 25
4497: PPUSH
4498: LD_VAR 0 7
4502: PPUSH
4503: LD_INT 1
4505: PPUSH
4506: CALL_OW 322
// end else
4510: GO 4527
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4512: LD_INT 25
4514: PPUSH
4515: LD_VAR 0 7
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL_OW 322
// end ; if mpVehicles then
4527: LD_EXP 36
4531: IFFALSE 4630
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: LD_VAR 0 7
4542: PPUSH
4543: LD_VAR 0 9
4547: PPUSH
4548: LD_EXP 36
4552: PPUSH
4553: CALL 5853 0 3
4557: PUSH
4558: FOR_IN
4559: IFFALSE 4628
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4561: LD_VAR 0 3
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: LD_INT 5
4571: PPUSH
4572: CALL_OW 12
4576: PPUSH
4577: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4581: LD_VAR 0 3
4585: PPUSH
4586: LD_EXP 21
4590: PUSH
4591: LD_VAR 0 8
4595: ARRAY
4596: PUSH
4597: LD_INT 1
4599: ARRAY
4600: PPUSH
4601: LD_EXP 21
4605: PUSH
4606: LD_VAR 0 8
4610: ARRAY
4611: PUSH
4612: LD_INT 2
4614: ARRAY
4615: PPUSH
4616: LD_INT 12
4618: PPUSH
4619: LD_INT 0
4621: PPUSH
4622: CALL_OW 50
// end ;
4626: GO 4558
4628: POP
4629: POP
// end ; uc_nation := nation ;
4630: LD_ADDR_OWVAR 21
4634: PUSH
4635: LD_VAR 0 9
4639: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4640: LD_EXP 3
4644: PUSH
4645: LD_INT 6
4647: PUSH
4648: LD_INT 7
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: IN
4655: IFFALSE 4680
4657: PUSH
4658: LD_EXP 7
4662: PUSH
4663: LD_VAR 0 2
4667: ARRAY
4668: PUSH
4669: LD_INT 1
4671: PUSH
4672: LD_INT 2
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: IN
4679: AND
4680: IFFALSE 4728
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4682: LD_ADDR_VAR 0 11
4686: PUSH
4687: LD_VAR 0 7
4691: PPUSH
4692: LD_VAR 0 9
4696: PPUSH
4697: LD_EXP 24
4701: PUSH
4702: LD_EXP 24
4706: PUSH
4707: LD_INT 2
4709: DIV
4710: PLUS
4711: PPUSH
4712: LD_EXP 25
4716: PUSH
4717: LD_INT 1
4719: PLUS
4720: PPUSH
4721: CALL 5344 0 4
4725: ST_TO_ADDR
4726: GO 4758
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4728: LD_ADDR_VAR 0 11
4732: PUSH
4733: LD_VAR 0 7
4737: PPUSH
4738: LD_VAR 0 9
4742: PPUSH
4743: LD_EXP 24
4747: PPUSH
4748: LD_EXP 25
4752: PPUSH
4753: CALL 5344 0 4
4757: ST_TO_ADDR
// for j in team do
4758: LD_ADDR_VAR 0 3
4762: PUSH
4763: LD_VAR 0 11
4767: PUSH
4768: FOR_IN
4769: IFFALSE 4818
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4771: LD_VAR 0 3
4775: PPUSH
4776: LD_EXP 21
4780: PUSH
4781: LD_VAR 0 8
4785: ARRAY
4786: PUSH
4787: LD_INT 1
4789: ARRAY
4790: PPUSH
4791: LD_EXP 21
4795: PUSH
4796: LD_VAR 0 8
4800: ARRAY
4801: PUSH
4802: LD_INT 2
4804: ARRAY
4805: PPUSH
4806: LD_INT 12
4808: PPUSH
4809: LD_INT 0
4811: PPUSH
4812: CALL_OW 50
4816: GO 4768
4818: POP
4819: POP
// if mpApemans then
4820: LD_EXP 30
4824: IFFALSE 4930
// begin for j := 1 to mpApemans do
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: DOUBLE
4832: LD_INT 1
4834: DEC
4835: ST_TO_ADDR
4836: LD_EXP 30
4840: PUSH
4841: FOR_TO
4842: IFFALSE 4928
// begin PrepareApeman ( - 5 ) ;
4844: LD_INT 5
4846: NEG
4847: PPUSH
4848: CALL 44995 0 1
// ape := CreateHuman ;
4852: LD_ADDR_VAR 0 10
4856: PUSH
4857: CALL_OW 44
4861: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4862: LD_ADDR_EXP 32
4866: PUSH
4867: LD_EXP 32
4871: PPUSH
4872: LD_VAR 0 8
4876: PPUSH
4877: LD_EXP 32
4881: PUSH
4882: LD_VAR 0 8
4886: ARRAY
4887: PPUSH
4888: LD_VAR 0 10
4892: PPUSH
4893: CALL 48868 0 2
4897: PPUSH
4898: CALL_OW 1
4902: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4903: LD_VAR 0 10
4907: PPUSH
4908: LD_EXP 31
4912: PUSH
4913: LD_VAR 0 8
4917: ARRAY
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 49
// end ;
4926: GO 4841
4928: POP
4929: POP
// end ; end ;
4930: GO 3496
4932: POP
4933: POP
// if not mpTeamGame then
4934: LD_EXP 11
4938: NOT
4939: IFFALSE 5037
// begin for i := 1 to 8 do
4941: LD_ADDR_VAR 0 2
4945: PUSH
4946: DOUBLE
4947: LD_INT 1
4949: DEC
4950: ST_TO_ADDR
4951: LD_INT 8
4953: PUSH
4954: FOR_TO
4955: IFFALSE 5033
// for j := 1 to 8 do
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: DOUBLE
4963: LD_INT 1
4965: DEC
4966: ST_TO_ADDR
4967: LD_INT 8
4969: PUSH
4970: FOR_TO
4971: IFFALSE 5029
// if i <> j then
4973: LD_VAR 0 2
4977: PUSH
4978: LD_VAR 0 3
4982: NONEQUAL
4983: IFFALSE 5007
// SetAttitude ( i , j , att_neutral , true ) else
4985: LD_VAR 0 2
4989: PPUSH
4990: LD_VAR 0 3
4994: PPUSH
4995: LD_INT 0
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: CALL_OW 80
5005: GO 5027
// SetAttitude ( i , j , att_friend , true ) ;
5007: LD_VAR 0 2
5011: PPUSH
5012: LD_VAR 0 3
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: LD_INT 1
5022: PPUSH
5023: CALL_OW 80
5027: GO 4970
5029: POP
5030: POP
5031: GO 4954
5033: POP
5034: POP
// end else
5035: GO 5212
// begin if mpSharedVision then
5037: LD_EXP 16
5041: IFFALSE 5106
// begin for i in mpTeams do
5043: LD_ADDR_VAR 0 2
5047: PUSH
5048: LD_EXP 10
5052: PUSH
5053: FOR_IN
5054: IFFALSE 5104
// for j := 2 to i do
5056: LD_ADDR_VAR 0 3
5060: PUSH
5061: DOUBLE
5062: LD_INT 2
5064: DEC
5065: ST_TO_ADDR
5066: LD_VAR 0 2
5070: PUSH
5071: FOR_TO
5072: IFFALSE 5100
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5074: LD_VAR 0 2
5078: PUSH
5079: LD_VAR 0 3
5083: ARRAY
5084: PPUSH
5085: LD_VAR 0 2
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: CALL_OW 343
5098: GO 5071
5100: POP
5101: POP
5102: GO 5053
5104: POP
5105: POP
// end ; for i := 1 to 8 do
5106: LD_ADDR_VAR 0 2
5110: PUSH
5111: DOUBLE
5112: LD_INT 1
5114: DEC
5115: ST_TO_ADDR
5116: LD_INT 8
5118: PUSH
5119: FOR_TO
5120: IFFALSE 5210
// for j := 1 to 8 do
5122: LD_ADDR_VAR 0 3
5126: PUSH
5127: DOUBLE
5128: LD_INT 1
5130: DEC
5131: ST_TO_ADDR
5132: LD_INT 8
5134: PUSH
5135: FOR_TO
5136: IFFALSE 5206
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5138: LD_EXP 8
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_EXP 8
5153: PUSH
5154: LD_VAR 0 3
5158: ARRAY
5159: EQUAL
5160: IFFALSE 5184
// SetAttitude ( i , j , att_friend , true ) else
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_VAR 0 3
5171: PPUSH
5172: LD_INT 1
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 80
5182: GO 5204
// SetAttitude ( i , j , att_enemy , true ) ;
5184: LD_VAR 0 2
5188: PPUSH
5189: LD_VAR 0 3
5193: PPUSH
5194: LD_INT 2
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 80
5204: GO 5135
5206: POP
5207: POP
5208: GO 5119
5210: POP
5211: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5212: LD_ADDR_OWVAR 71
5216: PUSH
5217: LD_EXP 9
5221: PUSH
5222: LD_OWVAR 2
5226: ARRAY
5227: ST_TO_ADDR
// if IAmSpec then
5228: CALL_OW 531
5232: IFFALSE 5273
// begin FogOff ( true ) ;
5234: LD_INT 1
5236: PPUSH
5237: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5241: LD_EXP 29
5245: PUSH
5246: LD_INT 1
5248: ARRAY
5249: PUSH
5250: LD_INT 2
5252: DIV
5253: PPUSH
5254: LD_EXP 29
5258: PUSH
5259: LD_INT 2
5261: ARRAY
5262: PUSH
5263: LD_INT 2
5265: DIV
5266: PPUSH
5267: CALL_OW 86
// end else
5271: GO 5319
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5273: LD_EXP 21
5277: PUSH
5278: LD_EXP 7
5282: PUSH
5283: LD_OWVAR 2
5287: ARRAY
5288: ARRAY
5289: PUSH
5290: LD_INT 1
5292: ARRAY
5293: PPUSH
5294: LD_EXP 21
5298: PUSH
5299: LD_EXP 7
5303: PUSH
5304: LD_OWVAR 2
5308: ARRAY
5309: ARRAY
5310: PUSH
5311: LD_INT 2
5313: ARRAY
5314: PPUSH
5315: CALL_OW 86
// end ; BeginBuildUp ;
5319: CALL 6386 0 0
// enable ( mpActive ) ;
5323: LD_INT 100
5325: ENABLE_MARKED
// enable ( mpGameType ) ;
5326: LD_EXP 3
5330: ENABLE_MARKED
// mpGameActive := true ;
5331: LD_ADDR_EXP 39
5335: PUSH
5336: LD_INT 1
5338: ST_TO_ADDR
// end ;
5339: LD_VAR 0 1
5343: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5344: LD_INT 0
5346: PPUSH
5347: PPUSH
5348: PPUSH
5349: PPUSH
// result := [ ] ;
5350: LD_ADDR_VAR 0 5
5354: PUSH
5355: EMPTY
5356: ST_TO_ADDR
// class := class_soldier ;
5357: LD_ADDR_VAR 0 8
5361: PUSH
5362: LD_INT 1
5364: ST_TO_ADDR
// uc_side := side ;
5365: LD_ADDR_OWVAR 20
5369: PUSH
5370: LD_VAR 0 1
5374: ST_TO_ADDR
// uc_nation := nation ;
5375: LD_ADDR_OWVAR 21
5379: PUSH
5380: LD_VAR 0 2
5384: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5385: LD_ADDR_OWVAR 26
5389: PUSH
5390: LD_OWVAR 19
5394: PUSH
5395: LD_VAR 0 1
5399: ARRAY
5400: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5401: LD_INT 1
5403: PPUSH
5404: LD_INT 2
5406: PPUSH
5407: CALL_OW 12
5411: PPUSH
5412: LD_VAR 0 8
5416: PPUSH
5417: LD_VAR 0 4
5421: PUSH
5422: LD_INT 2
5424: PLUS
5425: PPUSH
5426: CALL_OW 380
// hc_importance := 105 ;
5430: LD_ADDR_OWVAR 32
5434: PUSH
5435: LD_INT 105
5437: ST_TO_ADDR
// if Multiplayer then
5438: LD_OWVAR 4
5442: IFFALSE 5482
// begin hc_gallery := MULTIAVATARS ;
5444: LD_ADDR_OWVAR 33
5448: PUSH
5449: LD_STRING MULTIAVATARS
5451: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5452: LD_ADDR_OWVAR 34
5456: PUSH
5457: LD_VAR 0 1
5461: PPUSH
5462: CALL_OW 525
5466: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5467: LD_ADDR_OWVAR 27
5471: PUSH
5472: LD_VAR 0 1
5476: PPUSH
5477: CALL_OW 526
5481: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5482: LD_ADDR_VAR 0 5
5486: PUSH
5487: LD_VAR 0 5
5491: PPUSH
5492: CALL_OW 44
5496: PPUSH
5497: CALL 48868 0 2
5501: ST_TO_ADDR
// if mpTeamPreset then
5502: LD_LOC 1
5506: IFFALSE 5602
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5508: LD_LOC 1
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PPUSH
5517: LD_VAR 0 5
5521: PUSH
5522: LD_VAR 0 5
5526: ARRAY
5527: PPUSH
5528: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5532: LD_VAR 0 5
5536: PUSH
5537: LD_VAR 0 5
5541: ARRAY
5542: PPUSH
5543: LD_INT 1
5545: PPUSH
5546: LD_LOC 1
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: LD_INT 1
5557: PPUSH
5558: CALL_OW 260
5562: PPUSH
5563: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5567: LD_VAR 0 5
5571: PUSH
5572: LD_VAR 0 5
5576: ARRAY
5577: PPUSH
5578: LD_INT 2
5580: PPUSH
5581: LD_LOC 1
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: PPUSH
5590: LD_INT 2
5592: PPUSH
5593: CALL_OW 260
5597: PPUSH
5598: CALL_OW 239
// end ; InitHc_All ( ) ;
5602: CALL_OW 584
// class := 2 ;
5606: LD_ADDR_VAR 0 8
5610: PUSH
5611: LD_INT 2
5613: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5614: LD_ADDR_VAR 0 6
5618: PUSH
5619: DOUBLE
5620: LD_INT 1
5622: DEC
5623: ST_TO_ADDR
5624: LD_VAR 0 3
5628: PUSH
5629: LD_INT 1
5631: MINUS
5632: PUSH
5633: FOR_TO
5634: IFFALSE 5829
// begin PrepareHuman ( false , class , skill ) ;
5636: LD_INT 0
5638: PPUSH
5639: LD_VAR 0 8
5643: PPUSH
5644: LD_VAR 0 4
5648: PPUSH
5649: CALL_OW 380
// un := CreateHuman ;
5653: LD_ADDR_VAR 0 7
5657: PUSH
5658: CALL_OW 44
5662: ST_TO_ADDR
// result := Join ( result , un ) ;
5663: LD_ADDR_VAR 0 5
5667: PUSH
5668: LD_VAR 0 5
5672: PPUSH
5673: LD_VAR 0 7
5677: PPUSH
5678: CALL 48868 0 2
5682: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5683: LD_LOC 1
5687: PPUSH
5688: CALL 12902 0 1
5692: PUSH
5693: LD_VAR 0 3
5697: GREATEREQUAL
5698: IFFALSE 5794
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5700: LD_LOC 1
5704: PUSH
5705: LD_VAR 0 6
5709: PUSH
5710: LD_INT 1
5712: PLUS
5713: ARRAY
5714: PPUSH
5715: LD_VAR 0 7
5719: PPUSH
5720: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5724: LD_VAR 0 7
5728: PPUSH
5729: LD_INT 1
5731: PPUSH
5732: LD_LOC 1
5736: PUSH
5737: LD_VAR 0 6
5741: PUSH
5742: LD_INT 1
5744: PLUS
5745: ARRAY
5746: PPUSH
5747: LD_INT 1
5749: PPUSH
5750: CALL_OW 260
5754: PPUSH
5755: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5759: LD_VAR 0 7
5763: PPUSH
5764: LD_INT 2
5766: PPUSH
5767: LD_LOC 1
5771: PUSH
5772: LD_VAR 0 6
5776: PUSH
5777: LD_INT 1
5779: PLUS
5780: ARRAY
5781: PPUSH
5782: LD_INT 2
5784: PPUSH
5785: CALL_OW 260
5789: PPUSH
5790: CALL_OW 239
// end ; class := Inc ( class ) ;
5794: LD_ADDR_VAR 0 8
5798: PUSH
5799: LD_VAR 0 8
5803: PPUSH
5804: CALL 50241 0 1
5808: ST_TO_ADDR
// if class = 5 then
5809: LD_VAR 0 8
5813: PUSH
5814: LD_INT 5
5816: EQUAL
5817: IFFALSE 5827
// class := 1 ;
5819: LD_ADDR_VAR 0 8
5823: PUSH
5824: LD_INT 1
5826: ST_TO_ADDR
// end ;
5827: GO 5633
5829: POP
5830: POP
// if not mpTeamPreset then
5831: LD_LOC 1
5835: NOT
5836: IFFALSE 5848
// mpTeamPreset := result ;
5838: LD_ADDR_LOC 1
5842: PUSH
5843: LD_VAR 0 5
5847: ST_TO_ADDR
// end ;
5848: LD_VAR 0 5
5852: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5853: LD_INT 0
5855: PPUSH
5856: PPUSH
// result := [ ] ;
5857: LD_ADDR_VAR 0 4
5861: PUSH
5862: EMPTY
5863: ST_TO_ADDR
// if not vehicles then
5864: LD_VAR 0 3
5868: NOT
5869: IFFALSE 5873
// exit ;
5871: GO 6087
// for i := 1 to vehicles [ nation ] do
5873: LD_ADDR_VAR 0 5
5877: PUSH
5878: DOUBLE
5879: LD_INT 1
5881: DEC
5882: ST_TO_ADDR
5883: LD_VAR 0 3
5887: PUSH
5888: LD_VAR 0 2
5892: ARRAY
5893: PUSH
5894: FOR_TO
5895: IFFALSE 6085
// begin uc_side := side ;
5897: LD_ADDR_OWVAR 20
5901: PUSH
5902: LD_VAR 0 1
5906: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5907: LD_VAR 0 3
5911: PUSH
5912: LD_VAR 0 2
5916: ARRAY
5917: PUSH
5918: LD_VAR 0 5
5922: ARRAY
5923: PPUSH
5924: CALL 12902 0 1
5928: PUSH
5929: LD_INT 4
5931: GREATER
5932: IFFALSE 5962
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5934: LD_ADDR_OWVAR 21
5938: PUSH
5939: LD_VAR 0 3
5943: PUSH
5944: LD_VAR 0 2
5948: ARRAY
5949: PUSH
5950: LD_VAR 0 5
5954: ARRAY
5955: PUSH
5956: LD_INT 5
5958: ARRAY
5959: ST_TO_ADDR
5960: GO 5972
// uc_nation := nation ;
5962: LD_ADDR_OWVAR 21
5966: PUSH
5967: LD_VAR 0 2
5971: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5972: LD_VAR 0 3
5976: PUSH
5977: LD_VAR 0 2
5981: ARRAY
5982: PUSH
5983: LD_VAR 0 5
5987: ARRAY
5988: PUSH
5989: LD_INT 1
5991: ARRAY
5992: PPUSH
5993: LD_VAR 0 3
5997: PUSH
5998: LD_VAR 0 2
6002: ARRAY
6003: PUSH
6004: LD_VAR 0 5
6008: ARRAY
6009: PUSH
6010: LD_INT 2
6012: ARRAY
6013: PPUSH
6014: LD_VAR 0 3
6018: PUSH
6019: LD_VAR 0 2
6023: ARRAY
6024: PUSH
6025: LD_VAR 0 5
6029: ARRAY
6030: PUSH
6031: LD_INT 3
6033: ARRAY
6034: PPUSH
6035: LD_VAR 0 3
6039: PUSH
6040: LD_VAR 0 2
6044: ARRAY
6045: PUSH
6046: LD_VAR 0 5
6050: ARRAY
6051: PUSH
6052: LD_INT 4
6054: ARRAY
6055: PPUSH
6056: LD_INT 80
6058: PPUSH
6059: CALL 15698 0 5
// result := Join ( result , CreateVehicle ) ;
6063: LD_ADDR_VAR 0 4
6067: PUSH
6068: LD_VAR 0 4
6072: PPUSH
6073: CALL_OW 45
6077: PPUSH
6078: CALL 48868 0 2
6082: ST_TO_ADDR
// end ;
6083: GO 5894
6085: POP
6086: POP
// end ;
6087: LD_VAR 0 4
6091: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6092: LD_INT 0
6094: PPUSH
6095: PPUSH
// for i in mpBattleFlags do
6096: LD_ADDR_VAR 0 3
6100: PUSH
6101: LD_EXP 23
6105: PUSH
6106: FOR_IN
6107: IFFALSE 6184
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: LD_INT 1
6116: PUSH
6117: LD_VAR 0 1
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 2
6128: PUSH
6129: LD_VAR 0 1
6133: PUSH
6134: LD_REAL  7.00000000000000E-0001
6137: MUL
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_VAR 0 1
6150: PUSH
6151: LD_REAL  4.00000000000000E-0001
6154: MUL
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: PUSH
6160: LD_INT 20
6162: PUSH
6163: LD_VAR 0 1
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: PPUSH
6178: CALL_OW 423
6182: GO 6106
6184: POP
6185: POP
// end ;
6186: LD_VAR 0 2
6190: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6191: LD_INT 100
6193: IFFALSE 6288
6195: GO 6197
6197: DISABLE
6198: LD_INT 0
6200: PPUSH
6201: PPUSH
// begin if mpBattleFlag <= 0 then
6202: LD_EXP 22
6206: PUSH
6207: LD_INT 0
6209: LESSEQUAL
6210: IFFALSE 6214
// exit ;
6212: GO 6288
// strength := 100 ;
6214: LD_ADDR_VAR 0 2
6218: PUSH
6219: LD_INT 100
6221: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6222: LD_EXP 22
6226: PPUSH
6227: CALL_OW 67
// strength := Dec ( strength ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_VAR 0 2
6240: PPUSH
6241: CALL 50263 0 1
6245: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6246: LD_VAR 0 2
6250: PPUSH
6251: CALL 6092 0 1
// until not strength ;
6255: LD_VAR 0 2
6259: NOT
6260: IFFALSE 6222
// for i in mpBattleFlags do
6262: LD_ADDR_VAR 0 1
6266: PUSH
6267: LD_EXP 23
6271: PUSH
6272: FOR_IN
6273: IFFALSE 6286
// KillBattleFlag ( i ) ;
6275: LD_VAR 0 1
6279: PPUSH
6280: CALL_OW 419
6284: GO 6272
6286: POP
6287: POP
// end ;
6288: PPOPN 2
6290: END
// every 0 0$1 marked mpActive do var side , tmp ;
6291: GO 6293
6293: DISABLE
6294: LD_INT 0
6296: PPUSH
6297: PPUSH
// begin if mpSibBomb <= 1 then
6298: LD_EXP 28
6302: PUSH
6303: LD_INT 1
6305: LESSEQUAL
6306: IFFALSE 6310
// exit ;
6308: GO 6383
// tmp := mpSibBomb ;
6310: LD_ADDR_VAR 0 2
6314: PUSH
6315: LD_EXP 28
6319: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6320: LD_INT 35
6322: PPUSH
6323: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6327: LD_ADDR_VAR 0 2
6331: PUSH
6332: LD_VAR 0 2
6336: PUSH
6337: LD_INT 35
6339: MINUS
6340: ST_TO_ADDR
// until not tmp ;
6341: LD_VAR 0 2
6345: NOT
6346: IFFALSE 6320
// for side := 1 to 8 do
6348: LD_ADDR_VAR 0 1
6352: PUSH
6353: DOUBLE
6354: LD_INT 1
6356: DEC
6357: ST_TO_ADDR
6358: LD_INT 8
6360: PUSH
6361: FOR_TO
6362: IFFALSE 6381
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6364: LD_INT 25
6366: PPUSH
6367: LD_VAR 0 1
6371: PPUSH
6372: LD_INT 1
6374: PPUSH
6375: CALL_OW 322
6379: GO 6361
6381: POP
6382: POP
// end ;
6383: PPOPN 2
6385: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6386: LD_INT 0
6388: PPUSH
6389: PPUSH
6390: PPUSH
// mpBuildUpTimeDelay := 0 ;
6391: LD_ADDR_EXP 47
6395: PUSH
6396: LD_INT 0
6398: ST_TO_ADDR
// if not mpBuildUpTime then
6399: LD_EXP 20
6403: NOT
6404: IFFALSE 6408
// exit ;
6406: GO 6597
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6408: LD_ADDR_EXP 47
6412: PUSH
6413: LD_INT 8400
6415: PUSH
6416: LD_INT 2100
6418: PUSH
6419: LD_EXP 20
6423: MUL
6424: PLUS
6425: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6426: LD_ADDR_EXP 48
6430: PUSH
6431: LD_INT 1
6433: ST_TO_ADDR
// for i := 1 to 8 do
6434: LD_ADDR_VAR 0 2
6438: PUSH
6439: DOUBLE
6440: LD_INT 1
6442: DEC
6443: ST_TO_ADDR
6444: LD_INT 8
6446: PUSH
6447: FOR_TO
6448: IFFALSE 6595
// if mpSidePositions [ i ] then
6450: LD_EXP 7
6454: PUSH
6455: LD_VAR 0 2
6459: ARRAY
6460: IFFALSE 6593
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6462: LD_EXP 19
6466: PUSH
6467: LD_EXP 7
6471: PUSH
6472: LD_VAR 0 2
6476: ARRAY
6477: ARRAY
6478: PPUSH
6479: LD_INT 5
6481: PPUSH
6482: CALL_OW 424
// for j := 1 to 8 do
6486: LD_ADDR_VAR 0 3
6490: PUSH
6491: DOUBLE
6492: LD_INT 1
6494: DEC
6495: ST_TO_ADDR
6496: LD_INT 8
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6591
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6502: LD_EXP 7
6506: PUSH
6507: LD_VAR 0 3
6511: ARRAY
6512: IFFALSE 6561
6514: PUSH
6515: LD_EXP 8
6519: PUSH
6520: LD_VAR 0 2
6524: ARRAY
6525: PUSH
6526: LD_EXP 8
6530: PUSH
6531: LD_VAR 0 3
6535: ARRAY
6536: NONEQUAL
6537: IFTRUE 6560
6539: PUSH
6540: LD_EXP 11
6544: NOT
6545: IFFALSE 6559
6547: PUSH
6548: LD_VAR 0 2
6552: PUSH
6553: LD_VAR 0 3
6557: NONEQUAL
6558: AND
6559: OR
6560: AND
6561: IFFALSE 6589
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6563: LD_VAR 0 3
6567: PPUSH
6568: LD_EXP 19
6572: PUSH
6573: LD_EXP 7
6577: PUSH
6578: LD_VAR 0 2
6582: ARRAY
6583: ARRAY
6584: PPUSH
6585: CALL_OW 333
6589: GO 6499
6591: POP
6592: POP
// end ;
6593: GO 6447
6595: POP
6596: POP
// end ;
6597: LD_VAR 0 1
6601: RET
// function EndBuildUp ; var i , j ; begin
6602: LD_INT 0
6604: PPUSH
6605: PPUSH
6606: PPUSH
// mpBuildUpTimeActive := false ;
6607: LD_ADDR_EXP 48
6611: PUSH
6612: LD_INT 0
6614: ST_TO_ADDR
// for i := 1 to 8 do
6615: LD_ADDR_VAR 0 2
6619: PUSH
6620: DOUBLE
6621: LD_INT 1
6623: DEC
6624: ST_TO_ADDR
6625: LD_INT 8
6627: PUSH
6628: FOR_TO
6629: IFFALSE 6776
// if mpSidePositions [ i ] then
6631: LD_EXP 7
6635: PUSH
6636: LD_VAR 0 2
6640: ARRAY
6641: IFFALSE 6774
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6643: LD_EXP 19
6647: PUSH
6648: LD_EXP 7
6652: PUSH
6653: LD_VAR 0 2
6657: ARRAY
6658: ARRAY
6659: PPUSH
6660: LD_INT 0
6662: PPUSH
6663: CALL_OW 424
// for j := 1 to 8 do
6667: LD_ADDR_VAR 0 3
6671: PUSH
6672: DOUBLE
6673: LD_INT 1
6675: DEC
6676: ST_TO_ADDR
6677: LD_INT 8
6679: PUSH
6680: FOR_TO
6681: IFFALSE 6772
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6683: LD_EXP 7
6687: PUSH
6688: LD_VAR 0 3
6692: ARRAY
6693: IFFALSE 6742
6695: PUSH
6696: LD_EXP 8
6700: PUSH
6701: LD_VAR 0 2
6705: ARRAY
6706: PUSH
6707: LD_EXP 8
6711: PUSH
6712: LD_VAR 0 3
6716: ARRAY
6717: NONEQUAL
6718: IFTRUE 6741
6720: PUSH
6721: LD_EXP 11
6725: NOT
6726: IFFALSE 6740
6728: PUSH
6729: LD_VAR 0 2
6733: PUSH
6734: LD_VAR 0 3
6738: NONEQUAL
6739: AND
6740: OR
6741: AND
6742: IFFALSE 6770
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6744: LD_VAR 0 3
6748: PPUSH
6749: LD_EXP 19
6753: PUSH
6754: LD_EXP 7
6758: PUSH
6759: LD_VAR 0 2
6763: ARRAY
6764: ARRAY
6765: PPUSH
6766: CALL_OW 334
6770: GO 6680
6772: POP
6773: POP
// end ;
6774: GO 6628
6776: POP
6777: POP
// end ;
6778: LD_VAR 0 1
6782: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6783: LD_EXP 48
6787: IFFALSE 6966
6789: GO 6791
6791: DISABLE
6792: LD_INT 0
6794: PPUSH
6795: PPUSH
// begin for i := 1 to 8 do
6796: LD_ADDR_VAR 0 1
6800: PUSH
6801: DOUBLE
6802: LD_INT 1
6804: DEC
6805: ST_TO_ADDR
6806: LD_INT 8
6808: PUSH
6809: FOR_TO
6810: IFFALSE 6963
// if mpSidePositions [ i ] then
6812: LD_EXP 7
6816: PUSH
6817: LD_VAR 0 1
6821: ARRAY
6822: IFFALSE 6961
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6824: LD_ADDR_VAR 0 2
6828: PUSH
6829: LD_EXP 19
6833: PUSH
6834: LD_EXP 7
6838: PUSH
6839: LD_VAR 0 1
6843: ARRAY
6844: ARRAY
6845: PPUSH
6846: LD_INT 2
6848: PUSH
6849: LD_INT 21
6851: PUSH
6852: LD_INT 1
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 21
6861: PUSH
6862: LD_INT 2
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_OWVAR 2
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PPUSH
6890: CALL_OW 70
6894: PUSH
6895: FOR_IN
6896: IFFALSE 6959
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6898: LD_EXP 8
6902: PUSH
6903: LD_VAR 0 1
6907: ARRAY
6908: PUSH
6909: LD_EXP 8
6913: PUSH
6914: LD_OWVAR 2
6918: ARRAY
6919: NONEQUAL
6920: IFTRUE 6943
6922: PUSH
6923: LD_EXP 11
6927: NOT
6928: IFFALSE 6942
6930: PUSH
6931: LD_VAR 0 1
6935: PUSH
6936: LD_OWVAR 2
6940: NONEQUAL
6941: AND
6942: OR
6943: IFFALSE 6957
// ComMoveToArea ( un , BuildUpEscape ) ;
6945: LD_VAR 0 2
6949: PPUSH
6950: LD_INT 16
6952: PPUSH
6953: CALL_OW 113
6957: GO 6895
6959: POP
6960: POP
6961: GO 6809
6963: POP
6964: POP
// enable ;
6965: ENABLE
// end ;
6966: PPOPN 2
6968: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6969: LD_EXP 20
6973: IFFALSE 7023
6975: GO 6977
6977: DISABLE
6978: LD_INT 0
6980: PPUSH
// begin tmp := mpBuildUpTime ;
6981: LD_ADDR_VAR 0 1
6985: PUSH
6986: LD_EXP 20
6990: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6991: LD_INT 35
6993: PPUSH
6994: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6998: LD_ADDR_VAR 0 1
7002: PUSH
7003: LD_VAR 0 1
7007: PUSH
7008: LD_INT 35
7010: MINUS
7011: ST_TO_ADDR
// until not tmp ;
7012: LD_VAR 0 1
7016: NOT
7017: IFFALSE 6991
// EndBuildUp ;
7019: CALL 6602 0 0
// end ;
7023: PPOPN 1
7025: END
// every 0 0$1 trigger mpActive marked mpWin do
7026: LD_INT 100
7028: IFFALSE 7062
7030: GO 7032
7032: DISABLE
// begin if IAmServer then
7033: CALL_OW 518
7037: IFFALSE 7046
// wait ( 0 0$3 ) ;
7039: LD_INT 105
7041: PPUSH
7042: CALL_OW 67
// if Multiplayer then
7046: LD_OWVAR 4
7050: IFFALSE 7058
// YouWinInMultiplayer else
7052: CALL_OW 106
7056: GO 7062
// YouWin ;
7058: CALL_OW 103
// end ;
7062: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7063: LD_INT 0
7065: PPUSH
// result := false ;
7066: LD_ADDR_VAR 0 3
7070: PUSH
7071: LD_INT 0
7073: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7074: LD_VAR 0 1
7078: PUSH
7079: LD_INT 1
7081: DOUBLE
7082: EQUAL
7083: IFTRUE 7105
7085: LD_INT 5
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7105
7091: LD_INT 6
7093: DOUBLE
7094: EQUAL
7095: IFTRUE 7105
7097: LD_INT 7
7099: DOUBLE
7100: EQUAL
7101: IFTRUE 7105
7103: GO 7178
7105: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7106: LD_ADDR_VAR 0 3
7110: PUSH
7111: LD_INT 22
7113: PUSH
7114: LD_VAR 0 2
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: LD_INT 21
7128: PUSH
7129: LD_INT 1
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 33
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 33
7148: PUSH
7149: LD_INT 5
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PPUSH
7166: CALL_OW 69
7170: PPUSH
7171: CALL 12902 0 1
7175: ST_TO_ADDR
// end ; GameTypeSurvival :
7176: GO 7417
7178: LD_INT 2
7180: DOUBLE
7181: EQUAL
7182: IFTRUE 7186
7184: GO 7316
7186: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7187: LD_ADDR_VAR 0 3
7191: PUSH
7192: LD_INT 22
7194: PUSH
7195: LD_VAR 0 2
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 2
7206: PUSH
7207: LD_INT 30
7209: PUSH
7210: LD_INT 0
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 30
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 69
7240: PPUSH
7241: CALL 12902 0 1
7245: IFFALSE 7313
7247: PUSH
7248: LD_INT 22
7250: PUSH
7251: LD_VAR 0 2
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 2
7262: PUSH
7263: LD_INT 21
7265: PUSH
7266: LD_INT 1
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 33
7275: PUSH
7276: LD_INT 3
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 33
7285: PUSH
7286: LD_INT 5
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: PPUSH
7308: CALL 12902 0 1
7312: AND
7313: ST_TO_ADDR
// end ; GameTypeKing :
7314: GO 7417
7316: LD_INT 3
7318: DOUBLE
7319: EQUAL
7320: IFTRUE 7324
7322: GO 7416
7324: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_INT 22
7332: PUSH
7333: LD_VAR 0 2
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: LD_INT 21
7347: PUSH
7348: LD_INT 1
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 33
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 33
7367: PUSH
7368: LD_INT 5
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: PPUSH
7390: CALL 12902 0 1
7394: IFFALSE 7413
7396: PUSH
7397: LD_VAR 0 2
7401: PPUSH
7402: CALL 61780 0 1
7406: PUSH
7407: LD_EXP 35
7411: LESS
7412: AND
7413: ST_TO_ADDR
// end ; end ;
7414: GO 7417
7416: POP
// end ;
7417: LD_VAR 0 3
7421: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7422: LD_INT 100
7424: IFFALSE 7654
7426: GO 7428
7428: DISABLE
7429: LD_INT 0
7431: PPUSH
7432: PPUSH
// begin if Multiplayer then
7433: LD_OWVAR 4
7437: IFFALSE 7445
// SetPlayerSpectator ( ) else
7439: CALL_OW 572
7443: GO 7454
// FogOff ( your_side ) ;
7445: LD_OWVAR 2
7449: PPUSH
7450: CALL_OW 344
// repeat gameIsOn := false ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_INT 0
7461: ST_TO_ADDR
// for i := 1 to 8 do
7462: LD_ADDR_VAR 0 2
7466: PUSH
7467: DOUBLE
7468: LD_INT 1
7470: DEC
7471: ST_TO_ADDR
7472: LD_INT 8
7474: PUSH
7475: FOR_TO
7476: IFFALSE 7606
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7478: LD_EXP 7
7482: PUSH
7483: LD_VAR 0 2
7487: ARRAY
7488: IFFALSE 7501
7490: PUSH
7491: LD_VAR 0 2
7495: PPUSH
7496: CALL_OW 108
7500: AND
7501: IFFALSE 7515
7503: PUSH
7504: LD_VAR 0 2
7508: PUSH
7509: LD_OWVAR 2
7513: NONEQUAL
7514: AND
7515: IFFALSE 7604
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7517: LD_EXP 8
7521: PUSH
7522: LD_VAR 0 2
7526: ARRAY
7527: NOT
7528: IFTRUE 7576
7530: PUSH
7531: LD_EXP 8
7535: PUSH
7536: LD_VAR 0 2
7540: ARRAY
7541: PUSH
7542: LD_EXP 8
7546: PUSH
7547: LD_OWVAR 2
7551: ARRAY
7552: NONEQUAL
7553: IFFALSE 7575
7555: PUSH
7556: LD_OWVAR 2
7560: PPUSH
7561: LD_VAR 0 2
7565: PPUSH
7566: CALL_OW 81
7570: PUSH
7571: LD_INT 1
7573: NONEQUAL
7574: AND
7575: OR
7576: IFFALSE 7604
// if HasPowerByGameType ( mpGameType , i ) then
7578: LD_EXP 3
7582: PPUSH
7583: LD_VAR 0 2
7587: PPUSH
7588: CALL 7063 0 2
7592: IFFALSE 7604
// begin gameIsOn := true ;
7594: LD_ADDR_VAR 0 1
7598: PUSH
7599: LD_INT 1
7601: ST_TO_ADDR
// break ;
7602: GO 7606
// end ;
7604: GO 7475
7606: POP
7607: POP
// wait ( 100 ) ;
7608: LD_INT 100
7610: PPUSH
7611: CALL_OW 67
// until not gameIsOn ;
7615: LD_VAR 0 1
7619: NOT
7620: IFFALSE 7454
// if IAmServer then
7622: CALL_OW 518
7626: IFFALSE 7635
// wait ( 0 0$3 ) ;
7628: LD_INT 105
7630: PPUSH
7631: CALL_OW 67
// if Multiplayer then
7635: LD_OWVAR 4
7639: IFFALSE 7647
// YouLostInMultiplayer else
7641: CALL_OW 107
7645: GO 7654
// YouLost (  ) ;
7647: LD_STRING 
7649: PPUSH
7650: CALL_OW 104
// end ;
7654: PPOPN 2
7656: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7657: LD_EXP 33
7661: IFFALSE 8045
7663: GO 7665
7665: DISABLE
7666: LD_INT 0
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
7672: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7673: LD_ADDR_VAR 0 5
7677: PUSH
7678: LD_INT 1
7680: PUSH
7681: LD_INT 2
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 4
7689: PUSH
7690: LD_INT 5
7692: PUSH
7693: LD_INT 6
7695: PUSH
7696: LD_INT 7
7698: PUSH
7699: LD_INT 8
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7712: LD_INT 350
7714: PPUSH
7715: CALL_OW 67
// for i := 1 to 8 do
7719: LD_ADDR_VAR 0 1
7723: PUSH
7724: DOUBLE
7725: LD_INT 1
7727: DEC
7728: ST_TO_ADDR
7729: LD_INT 8
7731: PUSH
7732: FOR_TO
7733: IFFALSE 8015
// begin j := sides [ i ] ;
7735: LD_ADDR_VAR 0 2
7739: PUSH
7740: LD_VAR 0 5
7744: PUSH
7745: LD_VAR 0 1
7749: ARRAY
7750: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7751: LD_EXP 40
7755: PUSH
7756: LD_VAR 0 2
7760: ARRAY
7761: PPUSH
7762: CALL 12902 0 1
7766: IFFALSE 7779
7768: PUSH
7769: LD_VAR 0 2
7773: PPUSH
7774: CALL_OW 108
7778: AND
7779: IFFALSE 7797
7781: PUSH
7782: LD_EXP 3
7786: PPUSH
7787: LD_VAR 0 2
7791: PPUSH
7792: CALL 7063 0 2
7796: AND
7797: IFFALSE 8013
// begin wait ( mpRespawn div 2 ) ;
7799: LD_EXP 33
7803: PUSH
7804: LD_INT 2
7806: DIV
7807: PPUSH
7808: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7812: LD_ADDR_VAR 0 3
7816: PUSH
7817: LD_INT 22
7819: PUSH
7820: LD_VAR 0 2
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 50
7831: PUSH
7832: EMPTY
7833: LIST
7834: PUSH
7835: LD_INT 2
7837: PUSH
7838: LD_INT 30
7840: PUSH
7841: LD_INT 0
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 30
7850: PUSH
7851: LD_INT 1
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: PPUSH
7868: CALL_OW 69
7872: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7873: LD_VAR 0 3
7877: NOT
7878: IFTRUE 7892
7880: PUSH
7881: LD_VAR 0 2
7885: PPUSH
7886: CALL_OW 108
7890: NOT
7891: OR
7892: IFTRUE 7911
7894: PUSH
7895: LD_EXP 3
7899: PPUSH
7900: LD_VAR 0 2
7904: PPUSH
7905: CALL 7063 0 2
7909: NOT
7910: OR
7911: IFFALSE 7915
// continue ;
7913: GO 7732
// spawn := tmp [ 1 ] ;
7915: LD_ADDR_VAR 0 4
7919: PUSH
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7929: LD_EXP 40
7933: PUSH
7934: LD_VAR 0 2
7938: ARRAY
7939: PUSH
7940: LD_INT 1
7942: ARRAY
7943: PPUSH
7944: LD_VAR 0 4
7948: PPUSH
7949: CALL_OW 250
7953: PPUSH
7954: LD_VAR 0 4
7958: PPUSH
7959: CALL_OW 251
7963: PPUSH
7964: LD_INT 32
7966: PPUSH
7967: LD_INT 1
7969: PPUSH
7970: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7974: LD_ADDR_EXP 40
7978: PUSH
7979: LD_EXP 40
7983: PPUSH
7984: LD_VAR 0 2
7988: PPUSH
7989: LD_EXP 40
7993: PUSH
7994: LD_VAR 0 2
7998: ARRAY
7999: PPUSH
8000: LD_INT 1
8002: PPUSH
8003: CALL_OW 3
8007: PPUSH
8008: CALL_OW 1
8012: ST_TO_ADDR
// end ; end ;
8013: GO 7732
8015: POP
8016: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8017: LD_ADDR_VAR 0 5
8021: PUSH
8022: LD_VAR 0 5
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: LD_INT 8
8032: PPUSH
8033: LD_INT 1
8035: PPUSH
8036: CALL 15228 0 4
8040: ST_TO_ADDR
// until false ;
8041: LD_INT 0
8043: IFFALSE 7712
// end ;
8045: PPOPN 5
8047: END
// every 0 0$1 marked mpActive do
8048: GO 8050
8050: DISABLE
// begin enable ;
8051: ENABLE
// if not mpDisplayStrings then
8052: LD_EXP 38
8056: NOT
8057: IFFALSE 8068
// begin display_strings := [ ] ;
8059: LD_ADDR_OWVAR 47
8063: PUSH
8064: EMPTY
8065: ST_TO_ADDR
// exit ;
8066: GO 8078
// end ; display_strings := mpDisplayStrings ;
8068: LD_ADDR_OWVAR 47
8072: PUSH
8073: LD_EXP 38
8077: ST_TO_ADDR
// end ; end_of_file
8078: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8079: LD_INT 0
8081: PPUSH
8082: PPUSH
8083: PPUSH
8084: PPUSH
8085: PPUSH
8086: PPUSH
8087: PPUSH
8088: PPUSH
8089: PPUSH
// if GetType ( un ) = unit_vehicle then
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 247
8099: PUSH
8100: LD_INT 2
8102: EQUAL
8103: IFFALSE 8107
// exit ;
8105: GO 8781
// side := GetSide ( un ) ;
8107: LD_ADDR_VAR 0 9
8111: PUSH
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 255
8121: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8122: LD_EXP 3
8126: PUSH
8127: LD_INT 2
8129: EQUAL
8130: IFFALSE 8224
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8132: LD_VAR 0 1
8136: PPUSH
8137: CALL_OW 266
8141: PUSH
8142: LD_INT 0
8144: PUSH
8145: LD_INT 1
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: IN
8152: IFFALSE 8224
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8154: LD_ADDR_VAR 0 3
8158: PUSH
8159: LD_INT 22
8161: PUSH
8162: LD_VAR 0 9
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 2
8173: PUSH
8174: LD_INT 21
8176: PUSH
8177: LD_INT 1
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 33
8186: PUSH
8187: LD_INT 3
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PPUSH
8203: CALL_OW 69
8207: PUSH
8208: FOR_IN
8209: IFFALSE 8222
// KillUnit ( i ) ;
8211: LD_VAR 0 3
8215: PPUSH
8216: CALL_OW 66
8220: GO 8208
8222: POP
8223: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 257
8233: PUSH
8234: LD_INT 12
8236: PUSH
8237: LD_INT 17
8239: PUSH
8240: LD_INT 15
8242: PUSH
8243: LD_INT 16
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: IN
8252: IFTRUE 8269
8254: PUSH
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 263
8264: PUSH
8265: LD_INT 5
8267: EQUAL
8268: OR
8269: IFFALSE 8506
// begin tag := 0 ;
8271: LD_ADDR_VAR 0 5
8275: PUSH
8276: LD_INT 0
8278: ST_TO_ADDR
// for i := 1 to 8 do
8279: LD_ADDR_VAR 0 3
8283: PUSH
8284: DOUBLE
8285: LD_INT 1
8287: DEC
8288: ST_TO_ADDR
8289: LD_INT 8
8291: PUSH
8292: FOR_TO
8293: IFFALSE 8327
// if un in mpApePosIndex [ i ] then
8295: LD_VAR 0 1
8299: PUSH
8300: LD_EXP 32
8304: PUSH
8305: LD_VAR 0 3
8309: ARRAY
8310: IN
8311: IFFALSE 8325
// begin tag := i ;
8313: LD_ADDR_VAR 0 5
8317: PUSH
8318: LD_VAR 0 3
8322: ST_TO_ADDR
// break ;
8323: GO 8327
// end ;
8325: GO 8292
8327: POP
8328: POP
// if not tag then
8329: LD_VAR 0 5
8333: NOT
8334: IFFALSE 8338
// exit ;
8336: GO 8781
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8338: LD_ADDR_VAR 0 7
8342: PUSH
8343: LD_EXP 31
8347: PUSH
8348: LD_EXP 7
8352: PUSH
8353: LD_VAR 0 5
8357: ARRAY
8358: ARRAY
8359: ST_TO_ADDR
// if not area then
8360: LD_VAR 0 7
8364: NOT
8365: IFFALSE 8369
// exit ;
8367: GO 8781
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8369: LD_INT 14700
8371: PUSH
8372: LD_VAR 0 1
8376: PUSH
8377: LD_INT 5
8379: MOD
8380: PUSH
8381: LD_INT 1
8383: PLUS
8384: PUSH
8385: LD_INT 700
8387: MUL
8388: PLUS
8389: PPUSH
8390: CALL_OW 67
// repeat wait ( 10 ) ;
8394: LD_INT 10
8396: PPUSH
8397: CALL_OW 67
// until not mpBlockRespThread ;
8401: LD_EXP 46
8405: NOT
8406: IFFALSE 8394
// mpBlockRespThread := true ;
8408: LD_ADDR_EXP 46
8412: PUSH
8413: LD_INT 1
8415: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8416: LD_INT 0
8418: PPUSH
8419: CALL 44995 0 1
// ape := CreateHuman ;
8423: LD_ADDR_VAR 0 4
8427: PUSH
8428: CALL_OW 44
8432: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8433: LD_ADDR_EXP 32
8437: PUSH
8438: LD_EXP 32
8442: PPUSH
8443: LD_VAR 0 5
8447: PPUSH
8448: LD_EXP 32
8452: PUSH
8453: LD_VAR 0 5
8457: ARRAY
8458: PPUSH
8459: LD_VAR 0 4
8463: PPUSH
8464: CALL 48868 0 2
8468: PPUSH
8469: CALL_OW 1
8473: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8474: LD_VAR 0 4
8478: PPUSH
8479: LD_VAR 0 7
8483: PPUSH
8484: LD_INT 0
8486: PPUSH
8487: CALL_OW 49
// wait ( 10 ) ;
8491: LD_INT 10
8493: PPUSH
8494: CALL_OW 67
// mpBlockRespThread := false ;
8498: LD_ADDR_EXP 46
8502: PUSH
8503: LD_INT 0
8505: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8506: LD_VAR 0 1
8510: PPUSH
8511: CALL_OW 247
8515: PUSH
8516: LD_INT 1
8518: EQUAL
8519: IFFALSE 8536
8521: PUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 248
8531: PUSH
8532: LD_INT 0
8534: GREATER
8535: AND
8536: IFFALSE 8781
// begin if not mpRespawn then
8538: LD_EXP 33
8542: NOT
8543: IFFALSE 8547
// exit ;
8545: GO 8781
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8547: LD_VAR 0 9
8551: PPUSH
8552: CALL_OW 108
8556: NOT
8557: IFFALSE 8576
8559: PUSH
8560: LD_EXP 3
8564: PPUSH
8565: LD_VAR 0 9
8569: PPUSH
8570: CALL 7063 0 2
8574: NOT
8575: AND
8576: IFFALSE 8580
// exit ;
8578: GO 8781
// side := GetSide ( un ) ;
8580: LD_ADDR_VAR 0 9
8584: PUSH
8585: LD_VAR 0 1
8589: PPUSH
8590: CALL_OW 255
8594: ST_TO_ADDR
// nation := GetNation ( un ) ;
8595: LD_ADDR_VAR 0 8
8599: PUSH
8600: LD_VAR 0 1
8604: PPUSH
8605: CALL_OW 248
8609: ST_TO_ADDR
// class := GetClass ( un ) ;
8610: LD_ADDR_VAR 0 6
8614: PUSH
8615: LD_VAR 0 1
8619: PPUSH
8620: CALL_OW 257
8624: ST_TO_ADDR
// if class > 4 then
8625: LD_VAR 0 6
8629: PUSH
8630: LD_INT 4
8632: GREATER
8633: IFFALSE 8643
// class := 1 ;
8635: LD_ADDR_VAR 0 6
8639: PUSH
8640: LD_INT 1
8642: ST_TO_ADDR
// repeat wait ( 10 ) ;
8643: LD_INT 10
8645: PPUSH
8646: CALL_OW 67
// until not mpBlockRespThread ;
8650: LD_EXP 46
8654: NOT
8655: IFFALSE 8643
// mpBlockRespThread := true ;
8657: LD_ADDR_EXP 46
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// uc_side := side ;
8665: LD_ADDR_OWVAR 20
8669: PUSH
8670: LD_VAR 0 9
8674: ST_TO_ADDR
// uc_nation := nation ;
8675: LD_ADDR_OWVAR 21
8679: PUSH
8680: LD_VAR 0 8
8684: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8685: LD_INT 0
8687: PPUSH
8688: LD_VAR 0 6
8692: PPUSH
8693: LD_INT 2
8695: PPUSH
8696: CALL_OW 380
// un := CreateHuman ;
8700: LD_ADDR_VAR 0 1
8704: PUSH
8705: CALL_OW 44
8709: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8710: LD_ADDR_EXP 40
8714: PUSH
8715: LD_EXP 40
8719: PPUSH
8720: LD_VAR 0 9
8724: PPUSH
8725: LD_EXP 40
8729: PUSH
8730: LD_VAR 0 9
8734: ARRAY
8735: PPUSH
8736: LD_EXP 40
8740: PUSH
8741: LD_VAR 0 9
8745: ARRAY
8746: PUSH
8747: LD_INT 1
8749: PLUS
8750: PPUSH
8751: LD_VAR 0 1
8755: PPUSH
8756: CALL_OW 1
8760: PPUSH
8761: CALL_OW 1
8765: ST_TO_ADDR
// wait ( 10 ) ;
8766: LD_INT 10
8768: PPUSH
8769: CALL_OW 67
// mpBlockRespThread := false ;
8773: LD_ADDR_EXP 46
8777: PUSH
8778: LD_INT 0
8780: ST_TO_ADDR
// end ; end ;
8781: LD_VAR 0 2
8785: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8786: LD_INT 0
8788: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8789: LD_VAR 0 1
8793: PPUSH
8794: CALL_OW 266
8798: PUSH
8799: LD_INT 0
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: IN
8809: IFFALSE 8834
// SetBName ( building , @ & GetSide ( building ) ) ;
8811: LD_VAR 0 1
8815: PPUSH
8816: LD_STRING @
8818: PUSH
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 255
8828: STR
8829: PPUSH
8830: CALL_OW 500
// end ;
8834: LD_VAR 0 2
8838: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8839: LD_INT 0
8841: PPUSH
8842: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8843: LD_EXP 3
8847: PUSH
8848: LD_INT 2
8850: EQUAL
8851: IFFALSE 8875
8853: PUSH
8854: LD_VAR 0 1
8858: PPUSH
8859: CALL_OW 266
8863: PUSH
8864: LD_INT 0
8866: PUSH
8867: LD_INT 1
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: IN
8874: AND
8875: IFFALSE 8954
// begin SetSide ( building , oldSide ) ;
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: CALL_OW 235
// KillUnit ( building ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8900: LD_ADDR_VAR 0 5
8904: PUSH
8905: LD_INT 22
8907: PUSH
8908: LD_VAR 0 2
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 21
8919: PUSH
8920: LD_INT 1
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: PUSH
8936: FOR_IN
8937: IFFALSE 8950
// KillUnit ( i ) ;
8939: LD_VAR 0 5
8943: PPUSH
8944: CALL_OW 66
8948: GO 8936
8950: POP
8951: POP
// exit ;
8952: GO 8999
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8954: LD_VAR 0 1
8958: PPUSH
8959: CALL_OW 266
8963: PUSH
8964: LD_INT 0
8966: PUSH
8967: LD_INT 1
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: IN
8974: IFFALSE 8999
// SetBName ( building , @ & GetSide ( building ) ) ;
8976: LD_VAR 0 1
8980: PPUSH
8981: LD_STRING @
8983: PUSH
8984: LD_VAR 0 1
8988: PPUSH
8989: CALL_OW 255
8993: STR
8994: PPUSH
8995: CALL_OW 500
// end ;
8999: LD_VAR 0 4
9003: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9004: LD_INT 0
9006: PPUSH
9007: PPUSH
9008: PPUSH
// if mpGameType <> GameTypeFamine then
9009: LD_EXP 3
9013: PUSH
9014: LD_INT 5
9016: NONEQUAL
9017: IFFALSE 9021
// exit ;
9019: GO 9236
// for i := 1 to mpGlobalOilDeposits do
9021: LD_ADDR_VAR 0 6
9025: PUSH
9026: DOUBLE
9027: LD_INT 1
9029: DEC
9030: ST_TO_ADDR
9031: LD_EXP 41
9035: PUSH
9036: FOR_TO
9037: IFFALSE 9234
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9039: LD_EXP 41
9043: PUSH
9044: LD_VAR 0 6
9048: ARRAY
9049: PUSH
9050: LD_INT 1
9052: ARRAY
9053: PPUSH
9054: LD_EXP 41
9058: PUSH
9059: LD_VAR 0 6
9063: ARRAY
9064: PUSH
9065: LD_INT 2
9067: ARRAY
9068: PPUSH
9069: CALL_OW 428
9073: PUSH
9074: LD_VAR 0 1
9078: EQUAL
9079: IFFALSE 9232
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9081: LD_ADDR_VAR 0 7
9085: PUSH
9086: LD_EXP 41
9090: PUSH
9091: LD_VAR 0 6
9095: ARRAY
9096: PUSH
9097: LD_INT 3
9099: ARRAY
9100: ST_TO_ADDR
// value := value - amount ;
9101: LD_ADDR_VAR 0 7
9105: PUSH
9106: LD_VAR 0 7
9110: PUSH
9111: LD_VAR 0 4
9115: MINUS
9116: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9117: LD_ADDR_EXP 41
9121: PUSH
9122: LD_EXP 41
9126: PPUSH
9127: LD_VAR 0 6
9131: PPUSH
9132: LD_EXP 41
9136: PUSH
9137: LD_VAR 0 6
9141: ARRAY
9142: PPUSH
9143: LD_INT 3
9145: PPUSH
9146: LD_VAR 0 7
9150: PPUSH
9151: CALL_OW 1
9155: PPUSH
9156: CALL_OW 1
9160: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9161: LD_VAR 0 1
9165: PPUSH
9166: LD_VAR 0 7
9170: PPUSH
9171: CALL_OW 505
// if value <= 0 then
9175: LD_VAR 0 7
9179: PUSH
9180: LD_INT 0
9182: LESSEQUAL
9183: IFFALSE 9232
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9185: LD_EXP 41
9189: PUSH
9190: LD_VAR 0 6
9194: ARRAY
9195: PUSH
9196: LD_INT 1
9198: ARRAY
9199: PPUSH
9200: LD_EXP 41
9204: PUSH
9205: LD_VAR 0 6
9209: ARRAY
9210: PUSH
9211: LD_INT 2
9213: ARRAY
9214: PPUSH
9215: CALL_OW 63
// KillUnit ( building ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 66
// exit ;
9228: POP
9229: POP
9230: GO 9236
// end ; end ; end ;
9232: GO 9036
9234: POP
9235: POP
// end ;
9236: LD_VAR 0 5
9240: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9241: LD_INT 0
9243: PPUSH
9244: PPUSH
9245: PPUSH
// if mpGameType <> GameTypeFamine then
9246: LD_EXP 3
9250: PUSH
9251: LD_INT 5
9253: NONEQUAL
9254: IFFALSE 9258
// exit ;
9256: GO 9473
// for i := 1 to mpGlobalSibDeposits do
9258: LD_ADDR_VAR 0 6
9262: PUSH
9263: DOUBLE
9264: LD_INT 1
9266: DEC
9267: ST_TO_ADDR
9268: LD_EXP 42
9272: PUSH
9273: FOR_TO
9274: IFFALSE 9471
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9276: LD_EXP 42
9280: PUSH
9281: LD_VAR 0 6
9285: ARRAY
9286: PUSH
9287: LD_INT 1
9289: ARRAY
9290: PPUSH
9291: LD_EXP 42
9295: PUSH
9296: LD_VAR 0 6
9300: ARRAY
9301: PUSH
9302: LD_INT 2
9304: ARRAY
9305: PPUSH
9306: CALL_OW 428
9310: PUSH
9311: LD_VAR 0 1
9315: EQUAL
9316: IFFALSE 9469
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9318: LD_ADDR_VAR 0 7
9322: PUSH
9323: LD_EXP 42
9327: PUSH
9328: LD_VAR 0 6
9332: ARRAY
9333: PUSH
9334: LD_INT 3
9336: ARRAY
9337: ST_TO_ADDR
// value := value - amount ;
9338: LD_ADDR_VAR 0 7
9342: PUSH
9343: LD_VAR 0 7
9347: PUSH
9348: LD_VAR 0 4
9352: MINUS
9353: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9354: LD_ADDR_EXP 42
9358: PUSH
9359: LD_EXP 42
9363: PPUSH
9364: LD_VAR 0 6
9368: PPUSH
9369: LD_EXP 42
9373: PUSH
9374: LD_VAR 0 6
9378: ARRAY
9379: PPUSH
9380: LD_INT 3
9382: PPUSH
9383: LD_VAR 0 7
9387: PPUSH
9388: CALL_OW 1
9392: PPUSH
9393: CALL_OW 1
9397: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9398: LD_VAR 0 1
9402: PPUSH
9403: LD_VAR 0 7
9407: PPUSH
9408: CALL_OW 505
// if value <= 0 then
9412: LD_VAR 0 7
9416: PUSH
9417: LD_INT 0
9419: LESSEQUAL
9420: IFFALSE 9469
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9422: LD_EXP 42
9426: PUSH
9427: LD_VAR 0 6
9431: ARRAY
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: PPUSH
9437: LD_EXP 42
9441: PUSH
9442: LD_VAR 0 6
9446: ARRAY
9447: PUSH
9448: LD_INT 2
9450: ARRAY
9451: PPUSH
9452: CALL_OW 63
// KillUnit ( building ) ;
9456: LD_VAR 0 1
9460: PPUSH
9461: CALL_OW 66
// exit ;
9465: POP
9466: POP
9467: GO 9473
// end ; end ; end ;
9469: GO 9273
9471: POP
9472: POP
// end ;
9473: LD_VAR 0 5
9477: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9478: LD_INT 0
9480: PPUSH
9481: PPUSH
// side := GetSide ( factory ) ;
9482: LD_ADDR_VAR 0 7
9486: PUSH
9487: LD_VAR 0 1
9491: PPUSH
9492: CALL_OW 255
9496: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9497: LD_VAR 0 5
9501: PUSH
9502: LD_INT 81
9504: EQUAL
9505: IFFALSE 9543
9507: PUSH
9508: LD_INT 22
9510: PUSH
9511: LD_VAR 0 7
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 34
9522: PUSH
9523: LD_INT 81
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 69
9538: PUSH
9539: LD_INT 0
9541: GREATER
9542: AND
9543: IFFALSE 9576
// begin ComCancel ( factory ) ;
9545: LD_VAR 0 1
9549: PPUSH
9550: CALL_OW 127
// if side = your_side then
9554: LD_VAR 0 7
9558: PUSH
9559: LD_OWVAR 2
9563: EQUAL
9564: IFFALSE 9576
// HintSpec ( VehLimit , 2 ) ;
9566: LD_STRING VehLimit
9568: PPUSH
9569: LD_INT 2
9571: PPUSH
9572: CALL_OW 338
// end ; end ;
9576: LD_VAR 0 6
9580: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9581: LD_INT 0
9583: PPUSH
9584: PPUSH
9585: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9586: LD_VAR 0 1
9590: PPUSH
9591: CALL_OW 264
9595: PUSH
9596: LD_INT 81
9598: EQUAL
9599: IFFALSE 9616
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 263
9611: PUSH
9612: LD_INT 1
9614: EQUAL
9615: AND
9616: IFFALSE 9896
// begin for i := 1 to Count ( minersList ) do
9618: LD_ADDR_VAR 0 6
9622: PUSH
9623: DOUBLE
9624: LD_INT 1
9626: DEC
9627: ST_TO_ADDR
9628: LD_EXP 56
9632: PPUSH
9633: CALL 12902 0 1
9637: PUSH
9638: FOR_TO
9639: IFFALSE 9757
// begin if minersList [ i ] = oldId then
9641: LD_EXP 56
9645: PUSH
9646: LD_VAR 0 6
9650: ARRAY
9651: PUSH
9652: LD_VAR 0 2
9656: EQUAL
9657: IFFALSE 9755
// begin for j := 1 to minerMinesList [ i ] do
9659: LD_ADDR_VAR 0 7
9663: PUSH
9664: DOUBLE
9665: LD_INT 1
9667: DEC
9668: ST_TO_ADDR
9669: LD_EXP 57
9673: PUSH
9674: LD_VAR 0 6
9678: ARRAY
9679: PUSH
9680: FOR_TO
9681: IFFALSE 9731
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9683: LD_EXP 57
9687: PUSH
9688: LD_VAR 0 6
9692: ARRAY
9693: PUSH
9694: LD_VAR 0 7
9698: ARRAY
9699: PUSH
9700: LD_INT 1
9702: ARRAY
9703: PPUSH
9704: LD_EXP 57
9708: PUSH
9709: LD_VAR 0 6
9713: ARRAY
9714: PUSH
9715: LD_VAR 0 7
9719: ARRAY
9720: PUSH
9721: LD_INT 2
9723: ARRAY
9724: PPUSH
9725: CALL_OW 612
9729: GO 9680
9731: POP
9732: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9733: LD_ADDR_EXP 57
9737: PUSH
9738: LD_EXP 57
9742: PPUSH
9743: LD_VAR 0 6
9747: PPUSH
9748: CALL_OW 3
9752: ST_TO_ADDR
// break ;
9753: GO 9757
// end ; end ;
9755: GO 9638
9757: POP
9758: POP
// minersList := minersList diff oldId ;
9759: LD_ADDR_EXP 56
9763: PUSH
9764: LD_EXP 56
9768: PUSH
9769: LD_VAR 0 2
9773: DIFF
9774: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9775: LD_INT 22
9777: PUSH
9778: LD_VAR 0 4
9782: PPUSH
9783: CALL_OW 255
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: LD_INT 34
9794: PUSH
9795: LD_INT 81
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PPUSH
9806: CALL_OW 69
9810: PUSH
9811: LD_INT 1
9813: GREATER
9814: IFFALSE 9841
// begin ComExit ( unit ) ;
9816: LD_VAR 0 4
9820: PPUSH
9821: CALL 49266 0 1
// SetSide ( newId , oldSide ) ;
9825: LD_VAR 0 1
9829: PPUSH
9830: LD_VAR 0 3
9834: PPUSH
9835: CALL_OW 235
// exit ;
9839: GO 9896
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9841: LD_ADDR_EXP 56
9845: PUSH
9846: LD_EXP 56
9850: PPUSH
9851: LD_EXP 56
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: PPUSH
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL_OW 1
9869: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9870: LD_ADDR_EXP 57
9874: PUSH
9875: LD_EXP 57
9879: PPUSH
9880: LD_EXP 57
9884: PUSH
9885: LD_INT 1
9887: PLUS
9888: PPUSH
9889: EMPTY
9890: PPUSH
9891: CALL_OW 1
9895: ST_TO_ADDR
// end ; end ; end_of_file
9896: LD_VAR 0 5
9900: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9901: LD_EXP 39
9905: IFFALSE 9913
9907: PUSH
9908: CALL 10123 0 0
9912: AND
9913: IFFALSE 9921
9915: PUSH
9916: LD_OWVAR 4
9920: AND
9921: IFFALSE 10120
9923: GO 9925
9925: DISABLE
9926: LD_INT 0
9928: PPUSH
9929: PPUSH
// begin canWin := false ;
9930: LD_ADDR_VAR 0 2
9934: PUSH
9935: LD_INT 0
9937: ST_TO_ADDR
// if not HasPower ( your_side ) then
9938: LD_OWVAR 2
9942: PPUSH
9943: CALL 10165 0 1
9947: NOT
9948: IFFALSE 9959
// begin Multiplayer_Loose_Message ;
9950: CALL_OW 521
// enable ( mpLose ) ;
9954: LD_INT 102
9956: ENABLE_MARKED
// end else
9957: GO 10120
// begin canWin := true ;
9959: LD_ADDR_VAR 0 2
9963: PUSH
9964: LD_INT 1
9966: ST_TO_ADDR
// for i := 1 to 8 do
9967: LD_ADDR_VAR 0 1
9971: PUSH
9972: DOUBLE
9973: LD_INT 1
9975: DEC
9976: ST_TO_ADDR
9977: LD_INT 8
9979: PUSH
9980: FOR_TO
9981: IFFALSE 10106
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9983: LD_EXP 7
9987: PUSH
9988: LD_VAR 0 1
9992: ARRAY
9993: IFFALSE 10006
9995: PUSH
9996: LD_VAR 0 1
10000: PPUSH
10001: CALL_OW 108
10005: AND
10006: IFFALSE 10020
10008: PUSH
10009: LD_VAR 0 1
10013: PUSH
10014: LD_OWVAR 2
10018: NONEQUAL
10019: AND
10020: IFFALSE 10104
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10022: LD_EXP 8
10026: PUSH
10027: LD_VAR 0 1
10031: ARRAY
10032: NOT
10033: IFTRUE 10081
10035: PUSH
10036: LD_EXP 8
10040: PUSH
10041: LD_VAR 0 1
10045: ARRAY
10046: PUSH
10047: LD_EXP 8
10051: PUSH
10052: LD_OWVAR 2
10056: ARRAY
10057: NONEQUAL
10058: IFFALSE 10080
10060: PUSH
10061: LD_OWVAR 2
10065: PPUSH
10066: LD_VAR 0 1
10070: PPUSH
10071: CALL_OW 81
10075: PUSH
10076: LD_INT 1
10078: NONEQUAL
10079: AND
10080: OR
10081: IFFALSE 10104
// if HasPower ( i ) then
10083: LD_VAR 0 1
10087: PPUSH
10088: CALL 10165 0 1
10092: IFFALSE 10104
// begin canWin := false ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// break ;
10102: GO 10106
// end ;
10104: GO 9980
10106: POP
10107: POP
// if canWin then
10108: LD_VAR 0 2
10112: IFFALSE 10119
// enable ( mpWin ) else
10114: LD_INT 101
10116: ENABLE_MARKED
10117: GO 10120
// enable ;
10119: ENABLE
// end ; end ;
10120: PPOPN 2
10122: END
// function CanWinLoose ; begin
10123: LD_INT 0
10125: PPUSH
// result := true ;
10126: LD_ADDR_VAR 0 1
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10134: CALL_OW 531
10138: IFFALSE 10150
10140: PUSH
10141: CALL_OW 519
10145: PUSH
10146: LD_INT 1
10148: GREATER
10149: AND
10150: IFFALSE 10160
// result := false ;
10152: LD_ADDR_VAR 0 1
10156: PUSH
10157: LD_INT 0
10159: ST_TO_ADDR
// end ;
10160: LD_VAR 0 1
10164: RET
// function HasPower ( i ) ; begin
10165: LD_INT 0
10167: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10168: LD_ADDR_VAR 0 2
10172: PUSH
10173: LD_INT 22
10175: PUSH
10176: LD_VAR 0 1
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: LD_INT 2
10187: PUSH
10188: LD_INT 21
10190: PUSH
10191: LD_INT 1
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 33
10200: PUSH
10201: LD_INT 3
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: LD_INT 33
10210: PUSH
10211: LD_INT 5
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PPUSH
10228: CALL_OW 69
10232: ST_TO_ADDR
// end ; end_of_file
10233: LD_VAR 0 2
10237: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10238: LD_EXP 39
10242: IFFALSE 10285
10244: GO 10246
10246: DISABLE
10247: LD_INT 0
10249: PPUSH
// begin for i := 1 to 8 do
10250: LD_ADDR_VAR 0 1
10254: PUSH
10255: DOUBLE
10256: LD_INT 1
10258: DEC
10259: ST_TO_ADDR
10260: LD_INT 8
10262: PUSH
10263: FOR_TO
10264: IFFALSE 10283
// SetRestrict ( b_depot , i , state_disabled ) ;
10266: LD_INT 0
10268: PPUSH
10269: LD_VAR 0 1
10273: PPUSH
10274: LD_INT 0
10276: PPUSH
10277: CALL_OW 324
10281: GO 10263
10283: POP
10284: POP
// end ;
10285: PPOPN 1
10287: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10288: LD_EXP 39
10292: IFFALSE 10300
10294: PUSH
10295: CALL 10510 0 0
10299: AND
10300: IFFALSE 10308
10302: PUSH
10303: LD_OWVAR 4
10307: AND
10308: IFFALSE 10507
10310: GO 10312
10312: DISABLE
10313: LD_INT 0
10315: PPUSH
10316: PPUSH
// begin canWin := false ;
10317: LD_ADDR_VAR 0 2
10321: PUSH
10322: LD_INT 0
10324: ST_TO_ADDR
// if not HasPower ( your_side ) then
10325: LD_OWVAR 2
10329: PPUSH
10330: CALL 10552 0 1
10334: NOT
10335: IFFALSE 10346
// begin Multiplayer_Loose_Message ;
10337: CALL_OW 521
// enable ( mpLose ) ;
10341: LD_INT 102
10343: ENABLE_MARKED
// end else
10344: GO 10507
// begin canWin := true ;
10346: LD_ADDR_VAR 0 2
10350: PUSH
10351: LD_INT 1
10353: ST_TO_ADDR
// for i := 1 to 8 do
10354: LD_ADDR_VAR 0 1
10358: PUSH
10359: DOUBLE
10360: LD_INT 1
10362: DEC
10363: ST_TO_ADDR
10364: LD_INT 8
10366: PUSH
10367: FOR_TO
10368: IFFALSE 10493
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10370: LD_EXP 7
10374: PUSH
10375: LD_VAR 0 1
10379: ARRAY
10380: IFFALSE 10393
10382: PUSH
10383: LD_VAR 0 1
10387: PPUSH
10388: CALL_OW 108
10392: AND
10393: IFFALSE 10407
10395: PUSH
10396: LD_VAR 0 1
10400: PUSH
10401: LD_OWVAR 2
10405: NONEQUAL
10406: AND
10407: IFFALSE 10491
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10409: LD_EXP 8
10413: PUSH
10414: LD_VAR 0 1
10418: ARRAY
10419: NOT
10420: IFTRUE 10468
10422: PUSH
10423: LD_EXP 8
10427: PUSH
10428: LD_VAR 0 1
10432: ARRAY
10433: PUSH
10434: LD_EXP 8
10438: PUSH
10439: LD_OWVAR 2
10443: ARRAY
10444: NONEQUAL
10445: IFFALSE 10467
10447: PUSH
10448: LD_OWVAR 2
10452: PPUSH
10453: LD_VAR 0 1
10457: PPUSH
10458: CALL_OW 81
10462: PUSH
10463: LD_INT 1
10465: NONEQUAL
10466: AND
10467: OR
10468: IFFALSE 10491
// if HasPower ( i ) then
10470: LD_VAR 0 1
10474: PPUSH
10475: CALL 10552 0 1
10479: IFFALSE 10491
// begin canWin := false ;
10481: LD_ADDR_VAR 0 2
10485: PUSH
10486: LD_INT 0
10488: ST_TO_ADDR
// break ;
10489: GO 10493
// end ;
10491: GO 10367
10493: POP
10494: POP
// if canWin then
10495: LD_VAR 0 2
10499: IFFALSE 10506
// enable ( mpWin ) else
10501: LD_INT 101
10503: ENABLE_MARKED
10504: GO 10507
// enable ;
10506: ENABLE
// end ; end ;
10507: PPOPN 2
10509: END
// function CanWinLoose ; begin
10510: LD_INT 0
10512: PPUSH
// result := true ;
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 1
10520: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10521: CALL_OW 531
10525: IFFALSE 10537
10527: PUSH
10528: CALL_OW 519
10532: PUSH
10533: LD_INT 1
10535: GREATER
10536: AND
10537: IFFALSE 10547
// result := false ;
10539: LD_ADDR_VAR 0 1
10543: PUSH
10544: LD_INT 0
10546: ST_TO_ADDR
// end ;
10547: LD_VAR 0 1
10551: RET
// function HasPower ( i ) ; begin
10552: LD_INT 0
10554: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10555: LD_INT 22
10557: PUSH
10558: LD_VAR 0 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 2
10569: PUSH
10570: LD_INT 30
10572: PUSH
10573: LD_INT 0
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 30
10582: PUSH
10583: LD_INT 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PPUSH
10599: CALL_OW 69
10603: NOT
10604: IFFALSE 10608
// exit ;
10606: GO 10673
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10608: LD_ADDR_VAR 0 2
10612: PUSH
10613: LD_INT 22
10615: PUSH
10616: LD_VAR 0 1
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 2
10627: PUSH
10628: LD_INT 21
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 33
10640: PUSH
10641: LD_INT 3
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 33
10650: PUSH
10651: LD_INT 5
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PPUSH
10668: CALL_OW 69
10672: ST_TO_ADDR
// end ; end_of_file
10673: LD_VAR 0 2
10677: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10678: LD_INT 0
10680: PPUSH
10681: PPUSH
// if exist_mode then
10682: LD_VAR 0 2
10686: IFFALSE 10732
// begin unit := CreateCharacter ( prefix & ident ) ;
10688: LD_ADDR_VAR 0 5
10692: PUSH
10693: LD_VAR 0 3
10697: PUSH
10698: LD_VAR 0 1
10702: STR
10703: PPUSH
10704: CALL_OW 34
10708: ST_TO_ADDR
// if unit then
10709: LD_VAR 0 5
10713: IFFALSE 10730
// DeleteCharacters ( prefix & ident ) ;
10715: LD_VAR 0 3
10719: PUSH
10720: LD_VAR 0 1
10724: STR
10725: PPUSH
10726: CALL_OW 40
// end else
10730: GO 10747
// unit := NewCharacter ( ident ) ;
10732: LD_ADDR_VAR 0 5
10736: PUSH
10737: LD_VAR 0 1
10741: PPUSH
10742: CALL_OW 25
10746: ST_TO_ADDR
// result := unit ;
10747: LD_ADDR_VAR 0 4
10751: PUSH
10752: LD_VAR 0 5
10756: ST_TO_ADDR
// end ;
10757: LD_VAR 0 4
10761: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10762: LD_INT 0
10764: PPUSH
10765: PPUSH
// if exist_mode then
10766: LD_VAR 0 2
10770: IFFALSE 10795
// unit := CreateCharacter ( prefix & ident ) else
10772: LD_ADDR_VAR 0 5
10776: PUSH
10777: LD_VAR 0 3
10781: PUSH
10782: LD_VAR 0 1
10786: STR
10787: PPUSH
10788: CALL_OW 34
10792: ST_TO_ADDR
10793: GO 10810
// unit := NewCharacter ( ident ) ;
10795: LD_ADDR_VAR 0 5
10799: PUSH
10800: LD_VAR 0 1
10804: PPUSH
10805: CALL_OW 25
10809: ST_TO_ADDR
// result := unit ;
10810: LD_ADDR_VAR 0 4
10814: PUSH
10815: LD_VAR 0 5
10819: ST_TO_ADDR
// end ;
10820: LD_VAR 0 4
10824: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10825: LD_INT 0
10827: PPUSH
10828: PPUSH
// if not side or not nation then
10829: LD_VAR 0 1
10833: NOT
10834: IFTRUE 10843
10836: PUSH
10837: LD_VAR 0 2
10841: NOT
10842: OR
10843: IFFALSE 10847
// exit ;
10845: GO 11641
// case nation of nation_american :
10847: LD_VAR 0 2
10851: PUSH
10852: LD_INT 1
10854: DOUBLE
10855: EQUAL
10856: IFTRUE 10860
10858: GO 11082
10860: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10861: LD_ADDR_VAR 0 4
10865: PUSH
10866: LD_INT 35
10868: PUSH
10869: LD_INT 45
10871: PUSH
10872: LD_INT 46
10874: PUSH
10875: LD_INT 47
10877: PUSH
10878: LD_INT 82
10880: PUSH
10881: LD_INT 83
10883: PUSH
10884: LD_INT 84
10886: PUSH
10887: LD_INT 85
10889: PUSH
10890: LD_INT 86
10892: PUSH
10893: LD_INT 1
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: LD_INT 6
10901: PUSH
10902: LD_INT 15
10904: PUSH
10905: LD_INT 16
10907: PUSH
10908: LD_INT 7
10910: PUSH
10911: LD_INT 12
10913: PUSH
10914: LD_INT 13
10916: PUSH
10917: LD_INT 10
10919: PUSH
10920: LD_INT 14
10922: PUSH
10923: LD_INT 20
10925: PUSH
10926: LD_INT 21
10928: PUSH
10929: LD_INT 22
10931: PUSH
10932: LD_INT 25
10934: PUSH
10935: LD_INT 32
10937: PUSH
10938: LD_INT 27
10940: PUSH
10941: LD_INT 36
10943: PUSH
10944: LD_INT 69
10946: PUSH
10947: LD_INT 39
10949: PUSH
10950: LD_INT 34
10952: PUSH
10953: LD_INT 40
10955: PUSH
10956: LD_INT 48
10958: PUSH
10959: LD_INT 49
10961: PUSH
10962: LD_INT 50
10964: PUSH
10965: LD_INT 51
10967: PUSH
10968: LD_INT 52
10970: PUSH
10971: LD_INT 53
10973: PUSH
10974: LD_INT 54
10976: PUSH
10977: LD_INT 55
10979: PUSH
10980: LD_INT 56
10982: PUSH
10983: LD_INT 57
10985: PUSH
10986: LD_INT 58
10988: PUSH
10989: LD_INT 59
10991: PUSH
10992: LD_INT 60
10994: PUSH
10995: LD_INT 61
10997: PUSH
10998: LD_INT 62
11000: PUSH
11001: LD_INT 80
11003: PUSH
11004: LD_INT 82
11006: PUSH
11007: LD_INT 83
11009: PUSH
11010: LD_INT 84
11012: PUSH
11013: LD_INT 85
11015: PUSH
11016: LD_INT 86
11018: PUSH
11019: LD_INT 90
11021: PUSH
11022: LD_INT 93
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: ST_TO_ADDR
11080: GO 11563
11082: LD_INT 2
11084: DOUBLE
11085: EQUAL
11086: IFTRUE 11090
11088: GO 11324
11090: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11091: LD_ADDR_VAR 0 4
11095: PUSH
11096: LD_INT 35
11098: PUSH
11099: LD_INT 45
11101: PUSH
11102: LD_INT 46
11104: PUSH
11105: LD_INT 47
11107: PUSH
11108: LD_INT 82
11110: PUSH
11111: LD_INT 83
11113: PUSH
11114: LD_INT 84
11116: PUSH
11117: LD_INT 85
11119: PUSH
11120: LD_INT 87
11122: PUSH
11123: LD_INT 70
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: LD_INT 11
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: LD_INT 4
11137: PUSH
11138: LD_INT 5
11140: PUSH
11141: LD_INT 6
11143: PUSH
11144: LD_INT 15
11146: PUSH
11147: LD_INT 18
11149: PUSH
11150: LD_INT 7
11152: PUSH
11153: LD_INT 17
11155: PUSH
11156: LD_INT 8
11158: PUSH
11159: LD_INT 20
11161: PUSH
11162: LD_INT 21
11164: PUSH
11165: LD_INT 22
11167: PUSH
11168: LD_INT 72
11170: PUSH
11171: LD_INT 26
11173: PUSH
11174: LD_INT 69
11176: PUSH
11177: LD_INT 39
11179: PUSH
11180: LD_INT 40
11182: PUSH
11183: LD_INT 41
11185: PUSH
11186: LD_INT 42
11188: PUSH
11189: LD_INT 43
11191: PUSH
11192: LD_INT 48
11194: PUSH
11195: LD_INT 49
11197: PUSH
11198: LD_INT 50
11200: PUSH
11201: LD_INT 51
11203: PUSH
11204: LD_INT 52
11206: PUSH
11207: LD_INT 53
11209: PUSH
11210: LD_INT 54
11212: PUSH
11213: LD_INT 55
11215: PUSH
11216: LD_INT 56
11218: PUSH
11219: LD_INT 60
11221: PUSH
11222: LD_INT 61
11224: PUSH
11225: LD_INT 62
11227: PUSH
11228: LD_INT 66
11230: PUSH
11231: LD_INT 67
11233: PUSH
11234: LD_INT 68
11236: PUSH
11237: LD_INT 81
11239: PUSH
11240: LD_INT 82
11242: PUSH
11243: LD_INT 83
11245: PUSH
11246: LD_INT 84
11248: PUSH
11249: LD_INT 85
11251: PUSH
11252: LD_INT 87
11254: PUSH
11255: LD_INT 88
11257: PUSH
11258: LD_INT 92
11260: PUSH
11261: LD_INT 94
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: ST_TO_ADDR
11322: GO 11563
11324: LD_INT 3
11326: DOUBLE
11327: EQUAL
11328: IFTRUE 11332
11330: GO 11562
11332: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11333: LD_ADDR_VAR 0 4
11337: PUSH
11338: LD_INT 46
11340: PUSH
11341: LD_INT 47
11343: PUSH
11344: LD_INT 1
11346: PUSH
11347: LD_INT 2
11349: PUSH
11350: LD_INT 82
11352: PUSH
11353: LD_INT 83
11355: PUSH
11356: LD_INT 84
11358: PUSH
11359: LD_INT 85
11361: PUSH
11362: LD_INT 86
11364: PUSH
11365: LD_INT 11
11367: PUSH
11368: LD_INT 9
11370: PUSH
11371: LD_INT 20
11373: PUSH
11374: LD_INT 19
11376: PUSH
11377: LD_INT 21
11379: PUSH
11380: LD_INT 24
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 25
11388: PUSH
11389: LD_INT 28
11391: PUSH
11392: LD_INT 29
11394: PUSH
11395: LD_INT 30
11397: PUSH
11398: LD_INT 31
11400: PUSH
11401: LD_INT 37
11403: PUSH
11404: LD_INT 38
11406: PUSH
11407: LD_INT 32
11409: PUSH
11410: LD_INT 27
11412: PUSH
11413: LD_INT 33
11415: PUSH
11416: LD_INT 69
11418: PUSH
11419: LD_INT 39
11421: PUSH
11422: LD_INT 34
11424: PUSH
11425: LD_INT 40
11427: PUSH
11428: LD_INT 71
11430: PUSH
11431: LD_INT 23
11433: PUSH
11434: LD_INT 44
11436: PUSH
11437: LD_INT 48
11439: PUSH
11440: LD_INT 49
11442: PUSH
11443: LD_INT 50
11445: PUSH
11446: LD_INT 51
11448: PUSH
11449: LD_INT 52
11451: PUSH
11452: LD_INT 53
11454: PUSH
11455: LD_INT 54
11457: PUSH
11458: LD_INT 55
11460: PUSH
11461: LD_INT 56
11463: PUSH
11464: LD_INT 57
11466: PUSH
11467: LD_INT 58
11469: PUSH
11470: LD_INT 59
11472: PUSH
11473: LD_INT 63
11475: PUSH
11476: LD_INT 64
11478: PUSH
11479: LD_INT 65
11481: PUSH
11482: LD_INT 82
11484: PUSH
11485: LD_INT 83
11487: PUSH
11488: LD_INT 84
11490: PUSH
11491: LD_INT 85
11493: PUSH
11494: LD_INT 86
11496: PUSH
11497: LD_INT 89
11499: PUSH
11500: LD_INT 91
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: ST_TO_ADDR
11560: GO 11563
11562: POP
// if state > - 1 and state < 3 then
11563: LD_VAR 0 3
11567: PUSH
11568: LD_INT 1
11570: NEG
11571: GREATER
11572: IFFALSE 11584
11574: PUSH
11575: LD_VAR 0 3
11579: PUSH
11580: LD_INT 3
11582: LESS
11583: AND
11584: IFFALSE 11641
// for i in result do
11586: LD_ADDR_VAR 0 5
11590: PUSH
11591: LD_VAR 0 4
11595: PUSH
11596: FOR_IN
11597: IFFALSE 11639
// if GetTech ( i , side ) <> state then
11599: LD_VAR 0 5
11603: PPUSH
11604: LD_VAR 0 1
11608: PPUSH
11609: CALL_OW 321
11613: PUSH
11614: LD_VAR 0 3
11618: NONEQUAL
11619: IFFALSE 11637
// result := result diff i ;
11621: LD_ADDR_VAR 0 4
11625: PUSH
11626: LD_VAR 0 4
11630: PUSH
11631: LD_VAR 0 5
11635: DIFF
11636: ST_TO_ADDR
11637: GO 11596
11639: POP
11640: POP
// end ;
11641: LD_VAR 0 4
11645: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11646: LD_INT 0
11648: PPUSH
11649: PPUSH
11650: PPUSH
// result := true ;
11651: LD_ADDR_VAR 0 3
11655: PUSH
11656: LD_INT 1
11658: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11659: LD_ADDR_VAR 0 5
11663: PUSH
11664: LD_VAR 0 2
11668: PPUSH
11669: CALL_OW 480
11673: ST_TO_ADDR
// if not tmp then
11674: LD_VAR 0 5
11678: NOT
11679: IFFALSE 11683
// exit ;
11681: GO 11732
// for i in tmp do
11683: LD_ADDR_VAR 0 4
11687: PUSH
11688: LD_VAR 0 5
11692: PUSH
11693: FOR_IN
11694: IFFALSE 11730
// if GetTech ( i , side ) <> state_researched then
11696: LD_VAR 0 4
11700: PPUSH
11701: LD_VAR 0 1
11705: PPUSH
11706: CALL_OW 321
11710: PUSH
11711: LD_INT 2
11713: NONEQUAL
11714: IFFALSE 11728
// begin result := false ;
11716: LD_ADDR_VAR 0 3
11720: PUSH
11721: LD_INT 0
11723: ST_TO_ADDR
// exit ;
11724: POP
11725: POP
11726: GO 11732
// end ;
11728: GO 11693
11730: POP
11731: POP
// end ;
11732: LD_VAR 0 3
11736: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11737: LD_INT 0
11739: PPUSH
11740: PPUSH
11741: PPUSH
11742: PPUSH
11743: PPUSH
11744: PPUSH
11745: PPUSH
11746: PPUSH
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11752: LD_VAR 0 1
11756: NOT
11757: IFTRUE 11774
11759: PUSH
11760: LD_VAR 0 1
11764: PPUSH
11765: CALL_OW 257
11769: PUSH
11770: LD_INT 9
11772: NONEQUAL
11773: OR
11774: IFFALSE 11778
// exit ;
11776: GO 12357
// side := GetSide ( unit ) ;
11778: LD_ADDR_VAR 0 9
11782: PUSH
11783: LD_VAR 0 1
11787: PPUSH
11788: CALL_OW 255
11792: ST_TO_ADDR
// tech_space := tech_spacanom ;
11793: LD_ADDR_VAR 0 12
11797: PUSH
11798: LD_INT 29
11800: ST_TO_ADDR
// tech_time := tech_taurad ;
11801: LD_ADDR_VAR 0 13
11805: PUSH
11806: LD_INT 28
11808: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11809: LD_ADDR_VAR 0 11
11813: PUSH
11814: LD_VAR 0 1
11818: PPUSH
11819: CALL_OW 310
11823: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11824: LD_VAR 0 11
11828: PPUSH
11829: CALL_OW 247
11833: PUSH
11834: LD_INT 2
11836: EQUAL
11837: IFFALSE 11841
// exit ;
11839: GO 12357
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11841: LD_ADDR_VAR 0 8
11845: PUSH
11846: LD_INT 81
11848: PUSH
11849: LD_VAR 0 9
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: LD_INT 21
11863: PUSH
11864: LD_INT 3
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PPUSH
11879: CALL_OW 69
11883: ST_TO_ADDR
// if not tmp then
11884: LD_VAR 0 8
11888: NOT
11889: IFFALSE 11893
// exit ;
11891: GO 12357
// if in_unit then
11893: LD_VAR 0 11
11897: IFFALSE 11921
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11899: LD_ADDR_VAR 0 10
11903: PUSH
11904: LD_VAR 0 8
11908: PPUSH
11909: LD_VAR 0 11
11913: PPUSH
11914: CALL_OW 74
11918: ST_TO_ADDR
11919: GO 11941
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11921: LD_ADDR_VAR 0 10
11925: PUSH
11926: LD_VAR 0 8
11930: PPUSH
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 74
11940: ST_TO_ADDR
// if not enemy then
11941: LD_VAR 0 10
11945: NOT
11946: IFFALSE 11950
// exit ;
11948: GO 12357
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11950: LD_VAR 0 11
11954: IFFALSE 11976
11956: PUSH
11957: LD_VAR 0 11
11961: PPUSH
11962: LD_VAR 0 10
11966: PPUSH
11967: CALL_OW 296
11971: PUSH
11972: LD_INT 13
11974: GREATER
11975: AND
11976: IFTRUE 11998
11978: PUSH
11979: LD_VAR 0 1
11983: PPUSH
11984: LD_VAR 0 10
11988: PPUSH
11989: CALL_OW 296
11993: PUSH
11994: LD_INT 12
11996: GREATER
11997: OR
11998: IFFALSE 12002
// exit ;
12000: GO 12357
// missile := [ 1 ] ;
12002: LD_ADDR_VAR 0 14
12006: PUSH
12007: LD_INT 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12013: LD_VAR 0 9
12017: PPUSH
12018: LD_VAR 0 12
12022: PPUSH
12023: CALL_OW 325
12027: IFFALSE 12056
// missile := Replace ( missile , missile + 1 , 2 ) ;
12029: LD_ADDR_VAR 0 14
12033: PUSH
12034: LD_VAR 0 14
12038: PPUSH
12039: LD_VAR 0 14
12043: PUSH
12044: LD_INT 1
12046: PLUS
12047: PPUSH
12048: LD_INT 2
12050: PPUSH
12051: CALL_OW 1
12055: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12056: LD_VAR 0 9
12060: PPUSH
12061: LD_VAR 0 13
12065: PPUSH
12066: CALL_OW 325
12070: IFFALSE 12094
12072: PUSH
12073: LD_VAR 0 10
12077: PPUSH
12078: CALL_OW 255
12082: PPUSH
12083: LD_VAR 0 13
12087: PPUSH
12088: CALL_OW 325
12092: NOT
12093: AND
12094: IFFALSE 12123
// missile := Replace ( missile , missile + 1 , 3 ) ;
12096: LD_ADDR_VAR 0 14
12100: PUSH
12101: LD_VAR 0 14
12105: PPUSH
12106: LD_VAR 0 14
12110: PUSH
12111: LD_INT 1
12113: PLUS
12114: PPUSH
12115: LD_INT 3
12117: PPUSH
12118: CALL_OW 1
12122: ST_TO_ADDR
// if missile < 2 then
12123: LD_VAR 0 14
12127: PUSH
12128: LD_INT 2
12130: LESS
12131: IFFALSE 12135
// exit ;
12133: GO 12357
// x := GetX ( enemy ) ;
12135: LD_ADDR_VAR 0 4
12139: PUSH
12140: LD_VAR 0 10
12144: PPUSH
12145: CALL_OW 250
12149: ST_TO_ADDR
// y := GetY ( enemy ) ;
12150: LD_ADDR_VAR 0 5
12154: PUSH
12155: LD_VAR 0 10
12159: PPUSH
12160: CALL_OW 251
12164: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12165: LD_ADDR_VAR 0 6
12169: PUSH
12170: LD_VAR 0 4
12174: PUSH
12175: LD_INT 1
12177: NEG
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 12
12186: PLUS
12187: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12188: LD_ADDR_VAR 0 7
12192: PUSH
12193: LD_VAR 0 5
12197: PUSH
12198: LD_INT 1
12200: NEG
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: CALL_OW 12
12209: PLUS
12210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12211: LD_VAR 0 6
12215: PPUSH
12216: LD_VAR 0 7
12220: PPUSH
12221: CALL_OW 488
12225: NOT
12226: IFFALSE 12248
// begin _x := x ;
12228: LD_ADDR_VAR 0 6
12232: PUSH
12233: LD_VAR 0 4
12237: ST_TO_ADDR
// _y := y ;
12238: LD_ADDR_VAR 0 7
12242: PUSH
12243: LD_VAR 0 5
12247: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12248: LD_ADDR_VAR 0 3
12252: PUSH
12253: LD_INT 1
12255: PPUSH
12256: LD_VAR 0 14
12260: PPUSH
12261: CALL_OW 12
12265: ST_TO_ADDR
// case i of 1 :
12266: LD_VAR 0 3
12270: PUSH
12271: LD_INT 1
12273: DOUBLE
12274: EQUAL
12275: IFTRUE 12279
12277: GO 12296
12279: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12280: LD_VAR 0 1
12284: PPUSH
12285: LD_VAR 0 10
12289: PPUSH
12290: CALL_OW 115
12294: GO 12357
12296: LD_INT 2
12298: DOUBLE
12299: EQUAL
12300: IFTRUE 12304
12302: GO 12326
12304: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12305: LD_VAR 0 1
12309: PPUSH
12310: LD_VAR 0 6
12314: PPUSH
12315: LD_VAR 0 7
12319: PPUSH
12320: CALL_OW 153
12324: GO 12357
12326: LD_INT 3
12328: DOUBLE
12329: EQUAL
12330: IFTRUE 12334
12332: GO 12356
12334: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12335: LD_VAR 0 1
12339: PPUSH
12340: LD_VAR 0 6
12344: PPUSH
12345: LD_VAR 0 7
12349: PPUSH
12350: CALL_OW 154
12354: GO 12357
12356: POP
// end ;
12357: LD_VAR 0 2
12361: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12362: LD_INT 0
12364: PPUSH
12365: PPUSH
12366: PPUSH
12367: PPUSH
12368: PPUSH
12369: PPUSH
// if not unit or not building then
12370: LD_VAR 0 1
12374: NOT
12375: IFTRUE 12384
12377: PUSH
12378: LD_VAR 0 2
12382: NOT
12383: OR
12384: IFFALSE 12388
// exit ;
12386: GO 12546
// x := GetX ( building ) ;
12388: LD_ADDR_VAR 0 5
12392: PUSH
12393: LD_VAR 0 2
12397: PPUSH
12398: CALL_OW 250
12402: ST_TO_ADDR
// y := GetY ( building ) ;
12403: LD_ADDR_VAR 0 6
12407: PUSH
12408: LD_VAR 0 2
12412: PPUSH
12413: CALL_OW 251
12417: ST_TO_ADDR
// for i := 0 to 5 do
12418: LD_ADDR_VAR 0 4
12422: PUSH
12423: DOUBLE
12424: LD_INT 0
12426: DEC
12427: ST_TO_ADDR
12428: LD_INT 5
12430: PUSH
12431: FOR_TO
12432: IFFALSE 12544
// begin _x := ShiftX ( x , i , 3 ) ;
12434: LD_ADDR_VAR 0 7
12438: PUSH
12439: LD_VAR 0 5
12443: PPUSH
12444: LD_VAR 0 4
12448: PPUSH
12449: LD_INT 3
12451: PPUSH
12452: CALL_OW 272
12456: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12457: LD_ADDR_VAR 0 8
12461: PUSH
12462: LD_VAR 0 6
12466: PPUSH
12467: LD_VAR 0 4
12471: PPUSH
12472: LD_INT 3
12474: PPUSH
12475: CALL_OW 273
12479: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12480: LD_VAR 0 7
12484: PPUSH
12485: LD_VAR 0 8
12489: PPUSH
12490: CALL_OW 488
12494: NOT
12495: IFFALSE 12499
// continue ;
12497: GO 12431
// if HexInfo ( _x , _y ) = 0 then
12499: LD_VAR 0 7
12503: PPUSH
12504: LD_VAR 0 8
12508: PPUSH
12509: CALL_OW 428
12513: PUSH
12514: LD_INT 0
12516: EQUAL
12517: IFFALSE 12542
// begin ComMoveXY ( unit , _x , _y ) ;
12519: LD_VAR 0 1
12523: PPUSH
12524: LD_VAR 0 7
12528: PPUSH
12529: LD_VAR 0 8
12533: PPUSH
12534: CALL_OW 111
// exit ;
12538: POP
12539: POP
12540: GO 12546
// end ; end ;
12542: GO 12431
12544: POP
12545: POP
// end ;
12546: LD_VAR 0 3
12550: RET
// export function ScanBase ( side , base_area ) ; begin
12551: LD_INT 0
12553: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12554: LD_ADDR_VAR 0 3
12558: PUSH
12559: LD_VAR 0 2
12563: PPUSH
12564: LD_INT 81
12566: PUSH
12567: LD_VAR 0 1
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 70
12580: ST_TO_ADDR
// end ;
12581: LD_VAR 0 3
12585: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12586: LD_INT 0
12588: PPUSH
12589: PPUSH
12590: PPUSH
12591: PPUSH
// result := false ;
12592: LD_ADDR_VAR 0 2
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// side := GetSide ( unit ) ;
12600: LD_ADDR_VAR 0 3
12604: PUSH
12605: LD_VAR 0 1
12609: PPUSH
12610: CALL_OW 255
12614: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12615: LD_ADDR_VAR 0 4
12619: PUSH
12620: LD_VAR 0 1
12624: PPUSH
12625: CALL_OW 248
12629: ST_TO_ADDR
// case nat of 1 :
12630: LD_VAR 0 4
12634: PUSH
12635: LD_INT 1
12637: DOUBLE
12638: EQUAL
12639: IFTRUE 12643
12641: GO 12654
12643: POP
// tech := tech_lassight ; 2 :
12644: LD_ADDR_VAR 0 5
12648: PUSH
12649: LD_INT 12
12651: ST_TO_ADDR
12652: GO 12693
12654: LD_INT 2
12656: DOUBLE
12657: EQUAL
12658: IFTRUE 12662
12660: GO 12673
12662: POP
// tech := tech_mortar ; 3 :
12663: LD_ADDR_VAR 0 5
12667: PUSH
12668: LD_INT 41
12670: ST_TO_ADDR
12671: GO 12693
12673: LD_INT 3
12675: DOUBLE
12676: EQUAL
12677: IFTRUE 12681
12679: GO 12692
12681: POP
// tech := tech_bazooka ; end ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_INT 44
12689: ST_TO_ADDR
12690: GO 12693
12692: POP
// if Researched ( side , tech ) then
12693: LD_VAR 0 3
12697: PPUSH
12698: LD_VAR 0 5
12702: PPUSH
12703: CALL_OW 325
12707: IFFALSE 12734
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12709: LD_ADDR_VAR 0 2
12713: PUSH
12714: LD_INT 5
12716: PUSH
12717: LD_INT 8
12719: PUSH
12720: LD_INT 9
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: LD_VAR 0 4
12732: ARRAY
12733: ST_TO_ADDR
// end ;
12734: LD_VAR 0 2
12738: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12739: LD_INT 0
12741: PPUSH
12742: PPUSH
12743: PPUSH
// if not mines then
12744: LD_VAR 0 2
12748: NOT
12749: IFFALSE 12753
// exit ;
12751: GO 12897
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12753: LD_ADDR_VAR 0 5
12757: PUSH
12758: LD_INT 81
12760: PUSH
12761: LD_VAR 0 1
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 3
12772: PUSH
12773: LD_INT 21
12775: PUSH
12776: LD_INT 3
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: ST_TO_ADDR
// for i in mines do
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: LD_VAR 0 2
12805: PUSH
12806: FOR_IN
12807: IFFALSE 12895
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12809: LD_VAR 0 4
12813: PUSH
12814: LD_INT 1
12816: ARRAY
12817: PPUSH
12818: LD_VAR 0 4
12822: PUSH
12823: LD_INT 2
12825: ARRAY
12826: PPUSH
12827: CALL_OW 458
12831: NOT
12832: IFFALSE 12836
// continue ;
12834: GO 12806
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12836: LD_VAR 0 4
12840: PUSH
12841: LD_INT 1
12843: ARRAY
12844: PPUSH
12845: LD_VAR 0 4
12849: PUSH
12850: LD_INT 2
12852: ARRAY
12853: PPUSH
12854: CALL_OW 428
12858: PUSH
12859: LD_VAR 0 5
12863: IN
12864: IFFALSE 12893
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12866: LD_VAR 0 4
12870: PUSH
12871: LD_INT 1
12873: ARRAY
12874: PPUSH
12875: LD_VAR 0 4
12879: PUSH
12880: LD_INT 2
12882: ARRAY
12883: PPUSH
12884: LD_VAR 0 1
12888: PPUSH
12889: CALL_OW 456
// end ;
12893: GO 12806
12895: POP
12896: POP
// end ;
12897: LD_VAR 0 3
12901: RET
// export function Count ( array ) ; begin
12902: LD_INT 0
12904: PPUSH
// result := array + 0 ;
12905: LD_ADDR_VAR 0 2
12909: PUSH
12910: LD_VAR 0 1
12914: PUSH
12915: LD_INT 0
12917: PLUS
12918: ST_TO_ADDR
// end ;
12919: LD_VAR 0 2
12923: RET
// export function IsEmpty ( building ) ; begin
12924: LD_INT 0
12926: PPUSH
// if not building then
12927: LD_VAR 0 1
12931: NOT
12932: IFFALSE 12936
// exit ;
12934: GO 12979
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12936: LD_ADDR_VAR 0 2
12940: PUSH
12941: LD_VAR 0 1
12945: PUSH
12946: LD_INT 22
12948: PUSH
12949: LD_VAR 0 1
12953: PPUSH
12954: CALL_OW 255
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 58
12965: PUSH
12966: EMPTY
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: IN
12978: ST_TO_ADDR
// end ;
12979: LD_VAR 0 2
12983: RET
// export function IsNotFull ( building ) ; var places ; begin
12984: LD_INT 0
12986: PPUSH
12987: PPUSH
// if not building then
12988: LD_VAR 0 1
12992: NOT
12993: IFFALSE 12997
// exit ;
12995: GO 13025
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12997: LD_ADDR_VAR 0 2
13001: PUSH
13002: LD_VAR 0 1
13006: PPUSH
13007: LD_INT 3
13009: PUSH
13010: LD_INT 62
13012: PUSH
13013: EMPTY
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 72
13024: ST_TO_ADDR
// end ;
13025: LD_VAR 0 2
13029: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13030: LD_INT 0
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
// tmp := [ ] ;
13036: LD_ADDR_VAR 0 3
13040: PUSH
13041: EMPTY
13042: ST_TO_ADDR
// list := [ ] ;
13043: LD_ADDR_VAR 0 5
13047: PUSH
13048: EMPTY
13049: ST_TO_ADDR
// for i = 16 to 25 do
13050: LD_ADDR_VAR 0 4
13054: PUSH
13055: DOUBLE
13056: LD_INT 16
13058: DEC
13059: ST_TO_ADDR
13060: LD_INT 25
13062: PUSH
13063: FOR_TO
13064: IFFALSE 13137
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13066: LD_ADDR_VAR 0 3
13070: PUSH
13071: LD_VAR 0 3
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: LD_VAR 0 1
13083: PPUSH
13084: CALL_OW 255
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: LD_INT 91
13095: PUSH
13096: LD_VAR 0 1
13100: PUSH
13101: LD_INT 6
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 30
13111: PUSH
13112: LD_VAR 0 4
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: PPUSH
13129: CALL_OW 69
13133: ADD
13134: ST_TO_ADDR
13135: GO 13063
13137: POP
13138: POP
// for i = 1 to tmp do
13139: LD_ADDR_VAR 0 4
13143: PUSH
13144: DOUBLE
13145: LD_INT 1
13147: DEC
13148: ST_TO_ADDR
13149: LD_VAR 0 3
13153: PUSH
13154: FOR_TO
13155: IFFALSE 13243
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13157: LD_ADDR_VAR 0 5
13161: PUSH
13162: LD_VAR 0 5
13166: PUSH
13167: LD_VAR 0 3
13171: PUSH
13172: LD_VAR 0 4
13176: ARRAY
13177: PPUSH
13178: CALL_OW 266
13182: PUSH
13183: LD_VAR 0 3
13187: PUSH
13188: LD_VAR 0 4
13192: ARRAY
13193: PPUSH
13194: CALL_OW 250
13198: PUSH
13199: LD_VAR 0 3
13203: PUSH
13204: LD_VAR 0 4
13208: ARRAY
13209: PPUSH
13210: CALL_OW 251
13214: PUSH
13215: LD_VAR 0 3
13219: PUSH
13220: LD_VAR 0 4
13224: ARRAY
13225: PPUSH
13226: CALL_OW 254
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: PUSH
13237: EMPTY
13238: LIST
13239: ADD
13240: ST_TO_ADDR
13241: GO 13154
13243: POP
13244: POP
// result := list ;
13245: LD_ADDR_VAR 0 2
13249: PUSH
13250: LD_VAR 0 5
13254: ST_TO_ADDR
// end ;
13255: LD_VAR 0 2
13259: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13260: LD_INT 0
13262: PPUSH
13263: PPUSH
13264: PPUSH
13265: PPUSH
13266: PPUSH
13267: PPUSH
13268: PPUSH
// if not factory then
13269: LD_VAR 0 1
13273: NOT
13274: IFFALSE 13278
// exit ;
13276: GO 13881
// if control = control_apeman then
13278: LD_VAR 0 4
13282: PUSH
13283: LD_INT 5
13285: EQUAL
13286: IFFALSE 13395
// begin tmp := UnitsInside ( factory ) ;
13288: LD_ADDR_VAR 0 8
13292: PUSH
13293: LD_VAR 0 1
13297: PPUSH
13298: CALL_OW 313
13302: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13303: LD_VAR 0 8
13307: PPUSH
13308: LD_INT 25
13310: PUSH
13311: LD_INT 12
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 72
13322: NOT
13323: IFFALSE 13333
// control := control_manual ;
13325: LD_ADDR_VAR 0 4
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13333: LD_ADDR_VAR 0 8
13337: PUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL 13030 0 1
13347: ST_TO_ADDR
// if tmp then
13348: LD_VAR 0 8
13352: IFFALSE 13395
// begin for i in tmp do
13354: LD_ADDR_VAR 0 7
13358: PUSH
13359: LD_VAR 0 8
13363: PUSH
13364: FOR_IN
13365: IFFALSE 13393
// if i [ 1 ] = b_ext_radio then
13367: LD_VAR 0 7
13371: PUSH
13372: LD_INT 1
13374: ARRAY
13375: PUSH
13376: LD_INT 22
13378: EQUAL
13379: IFFALSE 13391
// begin control := control_remote ;
13381: LD_ADDR_VAR 0 4
13385: PUSH
13386: LD_INT 2
13388: ST_TO_ADDR
// break ;
13389: GO 13393
// end ;
13391: GO 13364
13393: POP
13394: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13395: LD_VAR 0 1
13399: PPUSH
13400: LD_VAR 0 2
13404: PPUSH
13405: LD_VAR 0 3
13409: PPUSH
13410: LD_VAR 0 4
13414: PPUSH
13415: LD_VAR 0 5
13419: PPUSH
13420: CALL_OW 448
13424: IFFALSE 13459
// begin result := [ chassis , engine , control , weapon ] ;
13426: LD_ADDR_VAR 0 6
13430: PUSH
13431: LD_VAR 0 2
13435: PUSH
13436: LD_VAR 0 3
13440: PUSH
13441: LD_VAR 0 4
13445: PUSH
13446: LD_VAR 0 5
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: ST_TO_ADDR
// exit ;
13457: GO 13881
// end ; _chassis := AvailableChassisList ( factory ) ;
13459: LD_ADDR_VAR 0 9
13463: PUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: CALL_OW 475
13473: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13474: LD_ADDR_VAR 0 11
13478: PUSH
13479: LD_VAR 0 1
13483: PPUSH
13484: CALL_OW 476
13488: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13489: LD_ADDR_VAR 0 12
13493: PUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: CALL_OW 477
13503: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13504: LD_ADDR_VAR 0 10
13508: PUSH
13509: LD_VAR 0 1
13513: PPUSH
13514: CALL_OW 478
13518: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13519: LD_VAR 0 9
13523: NOT
13524: IFTRUE 13533
13526: PUSH
13527: LD_VAR 0 11
13531: NOT
13532: OR
13533: IFTRUE 13542
13535: PUSH
13536: LD_VAR 0 12
13540: NOT
13541: OR
13542: IFTRUE 13551
13544: PUSH
13545: LD_VAR 0 10
13549: NOT
13550: OR
13551: IFFALSE 13586
// begin result := [ chassis , engine , control , weapon ] ;
13553: LD_ADDR_VAR 0 6
13557: PUSH
13558: LD_VAR 0 2
13562: PUSH
13563: LD_VAR 0 3
13567: PUSH
13568: LD_VAR 0 4
13572: PUSH
13573: LD_VAR 0 5
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: ST_TO_ADDR
// exit ;
13584: GO 13881
// end ; if not chassis in _chassis then
13586: LD_VAR 0 2
13590: PUSH
13591: LD_VAR 0 9
13595: IN
13596: NOT
13597: IFFALSE 13623
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13599: LD_ADDR_VAR 0 2
13603: PUSH
13604: LD_VAR 0 9
13608: PUSH
13609: LD_INT 1
13611: PPUSH
13612: LD_VAR 0 9
13616: PPUSH
13617: CALL_OW 12
13621: ARRAY
13622: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13623: LD_VAR 0 2
13627: PPUSH
13628: LD_VAR 0 3
13632: PPUSH
13633: CALL 13886 0 2
13637: NOT
13638: IFFALSE 13699
// repeat engine := _engine [ 1 ] ;
13640: LD_ADDR_VAR 0 3
13644: PUSH
13645: LD_VAR 0 11
13649: PUSH
13650: LD_INT 1
13652: ARRAY
13653: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13654: LD_ADDR_VAR 0 11
13658: PUSH
13659: LD_VAR 0 11
13663: PPUSH
13664: LD_INT 1
13666: PPUSH
13667: CALL_OW 3
13671: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13672: LD_VAR 0 2
13676: PPUSH
13677: LD_VAR 0 3
13681: PPUSH
13682: CALL 13886 0 2
13686: IFTRUE 13697
13688: PUSH
13689: LD_VAR 0 11
13693: PUSH
13694: EMPTY
13695: EQUAL
13696: OR
13697: IFFALSE 13640
// if not control in _control then
13699: LD_VAR 0 4
13703: PUSH
13704: LD_VAR 0 12
13708: IN
13709: NOT
13710: IFFALSE 13736
// control := _control [ rand ( 1 , _control ) ] ;
13712: LD_ADDR_VAR 0 4
13716: PUSH
13717: LD_VAR 0 12
13721: PUSH
13722: LD_INT 1
13724: PPUSH
13725: LD_VAR 0 12
13729: PPUSH
13730: CALL_OW 12
13734: ARRAY
13735: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13736: LD_VAR 0 2
13740: PPUSH
13741: LD_VAR 0 5
13745: PPUSH
13746: CALL 14108 0 2
13750: NOT
13751: IFFALSE 13812
// repeat weapon := _weapon [ 1 ] ;
13753: LD_ADDR_VAR 0 5
13757: PUSH
13758: LD_VAR 0 10
13762: PUSH
13763: LD_INT 1
13765: ARRAY
13766: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13767: LD_ADDR_VAR 0 10
13771: PUSH
13772: LD_VAR 0 10
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: CALL_OW 3
13784: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13785: LD_VAR 0 2
13789: PPUSH
13790: LD_VAR 0 5
13794: PPUSH
13795: CALL 14108 0 2
13799: IFTRUE 13810
13801: PUSH
13802: LD_VAR 0 10
13806: PUSH
13807: EMPTY
13808: EQUAL
13809: OR
13810: IFFALSE 13753
// result := [ ] ;
13812: LD_ADDR_VAR 0 6
13816: PUSH
13817: EMPTY
13818: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13819: LD_VAR 0 1
13823: PPUSH
13824: LD_VAR 0 2
13828: PPUSH
13829: LD_VAR 0 3
13833: PPUSH
13834: LD_VAR 0 4
13838: PPUSH
13839: LD_VAR 0 5
13843: PPUSH
13844: CALL_OW 448
13848: IFFALSE 13881
// result := [ chassis , engine , control , weapon ] ;
13850: LD_ADDR_VAR 0 6
13854: PUSH
13855: LD_VAR 0 2
13859: PUSH
13860: LD_VAR 0 3
13864: PUSH
13865: LD_VAR 0 4
13869: PUSH
13870: LD_VAR 0 5
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: ST_TO_ADDR
// end ;
13881: LD_VAR 0 6
13885: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13886: LD_INT 0
13888: PPUSH
// if not chassis or not engine then
13889: LD_VAR 0 1
13893: NOT
13894: IFTRUE 13903
13896: PUSH
13897: LD_VAR 0 2
13901: NOT
13902: OR
13903: IFFALSE 13907
// exit ;
13905: GO 14103
// case engine of engine_solar :
13907: LD_VAR 0 2
13911: PUSH
13912: LD_INT 2
13914: DOUBLE
13915: EQUAL
13916: IFTRUE 13920
13918: GO 13958
13920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13921: LD_ADDR_VAR 0 3
13925: PUSH
13926: LD_INT 11
13928: PUSH
13929: LD_INT 12
13931: PUSH
13932: LD_INT 13
13934: PUSH
13935: LD_INT 14
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: LD_INT 3
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: ST_TO_ADDR
13956: GO 14087
13958: LD_INT 1
13960: DOUBLE
13961: EQUAL
13962: IFTRUE 13966
13964: GO 14028
13966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13967: LD_ADDR_VAR 0 3
13971: PUSH
13972: LD_INT 11
13974: PUSH
13975: LD_INT 12
13977: PUSH
13978: LD_INT 13
13980: PUSH
13981: LD_INT 14
13983: PUSH
13984: LD_INT 1
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: LD_INT 3
13992: PUSH
13993: LD_INT 4
13995: PUSH
13996: LD_INT 5
13998: PUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 23
14004: PUSH
14005: LD_INT 22
14007: PUSH
14008: LD_INT 24
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: ST_TO_ADDR
14026: GO 14087
14028: LD_INT 3
14030: DOUBLE
14031: EQUAL
14032: IFTRUE 14036
14034: GO 14086
14036: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14037: LD_ADDR_VAR 0 3
14041: PUSH
14042: LD_INT 13
14044: PUSH
14045: LD_INT 14
14047: PUSH
14048: LD_INT 2
14050: PUSH
14051: LD_INT 3
14053: PUSH
14054: LD_INT 4
14056: PUSH
14057: LD_INT 5
14059: PUSH
14060: LD_INT 21
14062: PUSH
14063: LD_INT 22
14065: PUSH
14066: LD_INT 23
14068: PUSH
14069: LD_INT 24
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: ST_TO_ADDR
14084: GO 14087
14086: POP
// result := ( chassis in result ) ;
14087: LD_ADDR_VAR 0 3
14091: PUSH
14092: LD_VAR 0 1
14096: PUSH
14097: LD_VAR 0 3
14101: IN
14102: ST_TO_ADDR
// end ;
14103: LD_VAR 0 3
14107: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14108: LD_INT 0
14110: PPUSH
// if not chassis or not weapon then
14111: LD_VAR 0 1
14115: NOT
14116: IFTRUE 14125
14118: PUSH
14119: LD_VAR 0 2
14123: NOT
14124: OR
14125: IFFALSE 14129
// exit ;
14127: GO 15223
// case weapon of us_machine_gun :
14129: LD_VAR 0 2
14133: PUSH
14134: LD_INT 2
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14142
14140: GO 14172
14142: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14143: LD_ADDR_VAR 0 3
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: LD_INT 5
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: ST_TO_ADDR
14170: GO 15207
14172: LD_INT 3
14174: DOUBLE
14175: EQUAL
14176: IFTRUE 14180
14178: GO 14210
14180: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14181: LD_ADDR_VAR 0 3
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 3
14194: PUSH
14195: LD_INT 4
14197: PUSH
14198: LD_INT 5
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: ST_TO_ADDR
14208: GO 15207
14210: LD_INT 11
14212: DOUBLE
14213: EQUAL
14214: IFTRUE 14218
14216: GO 14248
14218: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14219: LD_ADDR_VAR 0 3
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: LD_INT 2
14229: PUSH
14230: LD_INT 3
14232: PUSH
14233: LD_INT 4
14235: PUSH
14236: LD_INT 5
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: ST_TO_ADDR
14246: GO 15207
14248: LD_INT 4
14250: DOUBLE
14251: EQUAL
14252: IFTRUE 14256
14254: GO 14282
14256: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14257: LD_ADDR_VAR 0 3
14261: PUSH
14262: LD_INT 2
14264: PUSH
14265: LD_INT 3
14267: PUSH
14268: LD_INT 4
14270: PUSH
14271: LD_INT 5
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: ST_TO_ADDR
14280: GO 15207
14282: LD_INT 5
14284: DOUBLE
14285: EQUAL
14286: IFTRUE 14290
14288: GO 14316
14290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14291: LD_ADDR_VAR 0 3
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: LD_INT 4
14304: PUSH
14305: LD_INT 5
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: ST_TO_ADDR
14314: GO 15207
14316: LD_INT 9
14318: DOUBLE
14319: EQUAL
14320: IFTRUE 14324
14322: GO 14350
14324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14325: LD_ADDR_VAR 0 3
14329: PUSH
14330: LD_INT 2
14332: PUSH
14333: LD_INT 3
14335: PUSH
14336: LD_INT 4
14338: PUSH
14339: LD_INT 5
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: ST_TO_ADDR
14348: GO 15207
14350: LD_INT 7
14352: DOUBLE
14353: EQUAL
14354: IFTRUE 14358
14356: GO 14384
14358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14359: LD_ADDR_VAR 0 3
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: LD_INT 3
14369: PUSH
14370: LD_INT 4
14372: PUSH
14373: LD_INT 5
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: ST_TO_ADDR
14382: GO 15207
14384: LD_INT 12
14386: DOUBLE
14387: EQUAL
14388: IFTRUE 14392
14390: GO 14418
14392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: LD_INT 3
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: LD_INT 5
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: ST_TO_ADDR
14416: GO 15207
14418: LD_INT 13
14420: DOUBLE
14421: EQUAL
14422: IFTRUE 14426
14424: GO 14452
14426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14427: LD_ADDR_VAR 0 3
14431: PUSH
14432: LD_INT 2
14434: PUSH
14435: LD_INT 3
14437: PUSH
14438: LD_INT 4
14440: PUSH
14441: LD_INT 5
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: ST_TO_ADDR
14450: GO 15207
14452: LD_INT 14
14454: DOUBLE
14455: EQUAL
14456: IFTRUE 14460
14458: GO 14478
14460: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14461: LD_ADDR_VAR 0 3
14465: PUSH
14466: LD_INT 4
14468: PUSH
14469: LD_INT 5
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: ST_TO_ADDR
14476: GO 15207
14478: LD_INT 6
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14504
14486: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14487: LD_ADDR_VAR 0 3
14491: PUSH
14492: LD_INT 4
14494: PUSH
14495: LD_INT 5
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: ST_TO_ADDR
14502: GO 15207
14504: LD_INT 10
14506: DOUBLE
14507: EQUAL
14508: IFTRUE 14512
14510: GO 14530
14512: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14513: LD_ADDR_VAR 0 3
14517: PUSH
14518: LD_INT 4
14520: PUSH
14521: LD_INT 5
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: ST_TO_ADDR
14528: GO 15207
14530: LD_INT 22
14532: DOUBLE
14533: EQUAL
14534: IFTRUE 14538
14536: GO 14564
14538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14539: LD_ADDR_VAR 0 3
14543: PUSH
14544: LD_INT 11
14546: PUSH
14547: LD_INT 12
14549: PUSH
14550: LD_INT 13
14552: PUSH
14553: LD_INT 14
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: ST_TO_ADDR
14562: GO 15207
14564: LD_INT 23
14566: DOUBLE
14567: EQUAL
14568: IFTRUE 14572
14570: GO 14598
14572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14573: LD_ADDR_VAR 0 3
14577: PUSH
14578: LD_INT 11
14580: PUSH
14581: LD_INT 12
14583: PUSH
14584: LD_INT 13
14586: PUSH
14587: LD_INT 14
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: ST_TO_ADDR
14596: GO 15207
14598: LD_INT 24
14600: DOUBLE
14601: EQUAL
14602: IFTRUE 14606
14604: GO 14632
14606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14607: LD_ADDR_VAR 0 3
14611: PUSH
14612: LD_INT 11
14614: PUSH
14615: LD_INT 12
14617: PUSH
14618: LD_INT 13
14620: PUSH
14621: LD_INT 14
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: ST_TO_ADDR
14630: GO 15207
14632: LD_INT 30
14634: DOUBLE
14635: EQUAL
14636: IFTRUE 14640
14638: GO 14666
14640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14641: LD_ADDR_VAR 0 3
14645: PUSH
14646: LD_INT 11
14648: PUSH
14649: LD_INT 12
14651: PUSH
14652: LD_INT 13
14654: PUSH
14655: LD_INT 14
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: ST_TO_ADDR
14664: GO 15207
14666: LD_INT 25
14668: DOUBLE
14669: EQUAL
14670: IFTRUE 14674
14672: GO 14692
14674: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14675: LD_ADDR_VAR 0 3
14679: PUSH
14680: LD_INT 13
14682: PUSH
14683: LD_INT 14
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: ST_TO_ADDR
14690: GO 15207
14692: LD_INT 27
14694: DOUBLE
14695: EQUAL
14696: IFTRUE 14700
14698: GO 14718
14700: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14701: LD_ADDR_VAR 0 3
14705: PUSH
14706: LD_INT 13
14708: PUSH
14709: LD_INT 14
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: ST_TO_ADDR
14716: GO 15207
14718: LD_INT 92
14720: DOUBLE
14721: EQUAL
14722: IFTRUE 14726
14724: GO 14752
14726: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14727: LD_ADDR_VAR 0 3
14731: PUSH
14732: LD_INT 11
14734: PUSH
14735: LD_INT 12
14737: PUSH
14738: LD_INT 13
14740: PUSH
14741: LD_INT 14
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: ST_TO_ADDR
14750: GO 15207
14752: LD_INT 28
14754: DOUBLE
14755: EQUAL
14756: IFTRUE 14760
14758: GO 14778
14760: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14761: LD_ADDR_VAR 0 3
14765: PUSH
14766: LD_INT 13
14768: PUSH
14769: LD_INT 14
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: ST_TO_ADDR
14776: GO 15207
14778: LD_INT 29
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14804
14786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14787: LD_ADDR_VAR 0 3
14791: PUSH
14792: LD_INT 13
14794: PUSH
14795: LD_INT 14
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: ST_TO_ADDR
14802: GO 15207
14804: LD_INT 31
14806: DOUBLE
14807: EQUAL
14808: IFTRUE 14812
14810: GO 14830
14812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14813: LD_ADDR_VAR 0 3
14817: PUSH
14818: LD_INT 13
14820: PUSH
14821: LD_INT 14
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: ST_TO_ADDR
14828: GO 15207
14830: LD_INT 26
14832: DOUBLE
14833: EQUAL
14834: IFTRUE 14838
14836: GO 14856
14838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14839: LD_ADDR_VAR 0 3
14843: PUSH
14844: LD_INT 13
14846: PUSH
14847: LD_INT 14
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: ST_TO_ADDR
14854: GO 15207
14856: LD_INT 42
14858: DOUBLE
14859: EQUAL
14860: IFTRUE 14864
14862: GO 14890
14864: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14865: LD_ADDR_VAR 0 3
14869: PUSH
14870: LD_INT 21
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_INT 23
14878: PUSH
14879: LD_INT 24
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: ST_TO_ADDR
14888: GO 15207
14890: LD_INT 43
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 14924
14898: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14899: LD_ADDR_VAR 0 3
14903: PUSH
14904: LD_INT 21
14906: PUSH
14907: LD_INT 22
14909: PUSH
14910: LD_INT 23
14912: PUSH
14913: LD_INT 24
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: ST_TO_ADDR
14922: GO 15207
14924: LD_INT 44
14926: DOUBLE
14927: EQUAL
14928: IFTRUE 14932
14930: GO 14958
14932: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14933: LD_ADDR_VAR 0 3
14937: PUSH
14938: LD_INT 21
14940: PUSH
14941: LD_INT 22
14943: PUSH
14944: LD_INT 23
14946: PUSH
14947: LD_INT 24
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: ST_TO_ADDR
14956: GO 15207
14958: LD_INT 45
14960: DOUBLE
14961: EQUAL
14962: IFTRUE 14966
14964: GO 14992
14966: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14967: LD_ADDR_VAR 0 3
14971: PUSH
14972: LD_INT 21
14974: PUSH
14975: LD_INT 22
14977: PUSH
14978: LD_INT 23
14980: PUSH
14981: LD_INT 24
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: ST_TO_ADDR
14990: GO 15207
14992: LD_INT 49
14994: DOUBLE
14995: EQUAL
14996: IFTRUE 15000
14998: GO 15026
15000: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15001: LD_ADDR_VAR 0 3
15005: PUSH
15006: LD_INT 21
15008: PUSH
15009: LD_INT 22
15011: PUSH
15012: LD_INT 23
15014: PUSH
15015: LD_INT 24
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 15207
15026: LD_INT 51
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15060
15034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15035: LD_ADDR_VAR 0 3
15039: PUSH
15040: LD_INT 21
15042: PUSH
15043: LD_INT 22
15045: PUSH
15046: LD_INT 23
15048: PUSH
15049: LD_INT 24
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: ST_TO_ADDR
15058: GO 15207
15060: LD_INT 52
15062: DOUBLE
15063: EQUAL
15064: IFTRUE 15068
15066: GO 15094
15068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15069: LD_ADDR_VAR 0 3
15073: PUSH
15074: LD_INT 21
15076: PUSH
15077: LD_INT 22
15079: PUSH
15080: LD_INT 23
15082: PUSH
15083: LD_INT 24
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: ST_TO_ADDR
15092: GO 15207
15094: LD_INT 53
15096: DOUBLE
15097: EQUAL
15098: IFTRUE 15102
15100: GO 15120
15102: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15103: LD_ADDR_VAR 0 3
15107: PUSH
15108: LD_INT 23
15110: PUSH
15111: LD_INT 24
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: ST_TO_ADDR
15118: GO 15207
15120: LD_INT 46
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15146
15128: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15129: LD_ADDR_VAR 0 3
15133: PUSH
15134: LD_INT 23
15136: PUSH
15137: LD_INT 24
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: ST_TO_ADDR
15144: GO 15207
15146: LD_INT 47
15148: DOUBLE
15149: EQUAL
15150: IFTRUE 15154
15152: GO 15172
15154: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15155: LD_ADDR_VAR 0 3
15159: PUSH
15160: LD_INT 23
15162: PUSH
15163: LD_INT 24
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: ST_TO_ADDR
15170: GO 15207
15172: LD_INT 98
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15206
15180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15181: LD_ADDR_VAR 0 3
15185: PUSH
15186: LD_INT 21
15188: PUSH
15189: LD_INT 22
15191: PUSH
15192: LD_INT 23
15194: PUSH
15195: LD_INT 24
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: ST_TO_ADDR
15204: GO 15207
15206: POP
// result := ( chassis in result ) ;
15207: LD_ADDR_VAR 0 3
15211: PUSH
15212: LD_VAR 0 1
15216: PUSH
15217: LD_VAR 0 3
15221: IN
15222: ST_TO_ADDR
// end ;
15223: LD_VAR 0 3
15227: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15228: LD_INT 0
15230: PPUSH
15231: PPUSH
15232: PPUSH
15233: PPUSH
15234: PPUSH
15235: PPUSH
15236: PPUSH
// result := array ;
15237: LD_ADDR_VAR 0 5
15241: PUSH
15242: LD_VAR 0 1
15246: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15247: LD_VAR 0 1
15251: NOT
15252: IFTRUE 15261
15254: PUSH
15255: LD_VAR 0 2
15259: NOT
15260: OR
15261: IFTRUE 15270
15263: PUSH
15264: LD_VAR 0 3
15268: NOT
15269: OR
15270: IFTRUE 15284
15272: PUSH
15273: LD_VAR 0 2
15277: PUSH
15278: LD_VAR 0 1
15282: GREATER
15283: OR
15284: IFTRUE 15298
15286: PUSH
15287: LD_VAR 0 3
15291: PUSH
15292: LD_VAR 0 1
15296: GREATER
15297: OR
15298: IFFALSE 15302
// exit ;
15300: GO 15598
// if direction then
15302: LD_VAR 0 4
15306: IFFALSE 15370
// begin d := 1 ;
15308: LD_ADDR_VAR 0 9
15312: PUSH
15313: LD_INT 1
15315: ST_TO_ADDR
// if i_from > i_to then
15316: LD_VAR 0 2
15320: PUSH
15321: LD_VAR 0 3
15325: GREATER
15326: IFFALSE 15352
// length := ( array - i_from ) + i_to else
15328: LD_ADDR_VAR 0 11
15332: PUSH
15333: LD_VAR 0 1
15337: PUSH
15338: LD_VAR 0 2
15342: MINUS
15343: PUSH
15344: LD_VAR 0 3
15348: PLUS
15349: ST_TO_ADDR
15350: GO 15368
// length := i_to - i_from ;
15352: LD_ADDR_VAR 0 11
15356: PUSH
15357: LD_VAR 0 3
15361: PUSH
15362: LD_VAR 0 2
15366: MINUS
15367: ST_TO_ADDR
// end else
15368: GO 15431
// begin d := - 1 ;
15370: LD_ADDR_VAR 0 9
15374: PUSH
15375: LD_INT 1
15377: NEG
15378: ST_TO_ADDR
// if i_from > i_to then
15379: LD_VAR 0 2
15383: PUSH
15384: LD_VAR 0 3
15388: GREATER
15389: IFFALSE 15409
// length := i_from - i_to else
15391: LD_ADDR_VAR 0 11
15395: PUSH
15396: LD_VAR 0 2
15400: PUSH
15401: LD_VAR 0 3
15405: MINUS
15406: ST_TO_ADDR
15407: GO 15431
// length := ( array - i_to ) + i_from ;
15409: LD_ADDR_VAR 0 11
15413: PUSH
15414: LD_VAR 0 1
15418: PUSH
15419: LD_VAR 0 3
15423: MINUS
15424: PUSH
15425: LD_VAR 0 2
15429: PLUS
15430: ST_TO_ADDR
// end ; if not length then
15431: LD_VAR 0 11
15435: NOT
15436: IFFALSE 15440
// exit ;
15438: GO 15598
// tmp := array ;
15440: LD_ADDR_VAR 0 10
15444: PUSH
15445: LD_VAR 0 1
15449: ST_TO_ADDR
// for i = 1 to length do
15450: LD_ADDR_VAR 0 6
15454: PUSH
15455: DOUBLE
15456: LD_INT 1
15458: DEC
15459: ST_TO_ADDR
15460: LD_VAR 0 11
15464: PUSH
15465: FOR_TO
15466: IFFALSE 15586
// begin for j = 1 to array do
15468: LD_ADDR_VAR 0 7
15472: PUSH
15473: DOUBLE
15474: LD_INT 1
15476: DEC
15477: ST_TO_ADDR
15478: LD_VAR 0 1
15482: PUSH
15483: FOR_TO
15484: IFFALSE 15572
// begin k := j + d ;
15486: LD_ADDR_VAR 0 8
15490: PUSH
15491: LD_VAR 0 7
15495: PUSH
15496: LD_VAR 0 9
15500: PLUS
15501: ST_TO_ADDR
// if k > array then
15502: LD_VAR 0 8
15506: PUSH
15507: LD_VAR 0 1
15511: GREATER
15512: IFFALSE 15522
// k := 1 ;
15514: LD_ADDR_VAR 0 8
15518: PUSH
15519: LD_INT 1
15521: ST_TO_ADDR
// if not k then
15522: LD_VAR 0 8
15526: NOT
15527: IFFALSE 15539
// k := array ;
15529: LD_ADDR_VAR 0 8
15533: PUSH
15534: LD_VAR 0 1
15538: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15539: LD_ADDR_VAR 0 10
15543: PUSH
15544: LD_VAR 0 10
15548: PPUSH
15549: LD_VAR 0 8
15553: PPUSH
15554: LD_VAR 0 1
15558: PUSH
15559: LD_VAR 0 7
15563: ARRAY
15564: PPUSH
15565: CALL_OW 1
15569: ST_TO_ADDR
// end ;
15570: GO 15483
15572: POP
15573: POP
// array := tmp ;
15574: LD_ADDR_VAR 0 1
15578: PUSH
15579: LD_VAR 0 10
15583: ST_TO_ADDR
// end ;
15584: GO 15465
15586: POP
15587: POP
// result := array ;
15588: LD_ADDR_VAR 0 5
15592: PUSH
15593: LD_VAR 0 1
15597: ST_TO_ADDR
// end ;
15598: LD_VAR 0 5
15602: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15603: LD_INT 0
15605: PPUSH
15606: PPUSH
// result := 0 ;
15607: LD_ADDR_VAR 0 3
15611: PUSH
15612: LD_INT 0
15614: ST_TO_ADDR
// if not array or not value in array then
15615: LD_VAR 0 1
15619: NOT
15620: IFTRUE 15635
15622: PUSH
15623: LD_VAR 0 2
15627: PUSH
15628: LD_VAR 0 1
15632: IN
15633: NOT
15634: OR
15635: IFFALSE 15639
// exit ;
15637: GO 15693
// for i = 1 to array do
15639: LD_ADDR_VAR 0 4
15643: PUSH
15644: DOUBLE
15645: LD_INT 1
15647: DEC
15648: ST_TO_ADDR
15649: LD_VAR 0 1
15653: PUSH
15654: FOR_TO
15655: IFFALSE 15691
// if value = array [ i ] then
15657: LD_VAR 0 2
15661: PUSH
15662: LD_VAR 0 1
15666: PUSH
15667: LD_VAR 0 4
15671: ARRAY
15672: EQUAL
15673: IFFALSE 15689
// begin result := i ;
15675: LD_ADDR_VAR 0 3
15679: PUSH
15680: LD_VAR 0 4
15684: ST_TO_ADDR
// exit ;
15685: POP
15686: POP
15687: GO 15693
// end ;
15689: GO 15654
15691: POP
15692: POP
// end ;
15693: LD_VAR 0 3
15697: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15698: LD_INT 0
15700: PPUSH
// vc_chassis := chassis ;
15701: LD_ADDR_OWVAR 37
15705: PUSH
15706: LD_VAR 0 1
15710: ST_TO_ADDR
// vc_engine := engine ;
15711: LD_ADDR_OWVAR 39
15715: PUSH
15716: LD_VAR 0 2
15720: ST_TO_ADDR
// vc_control := control ;
15721: LD_ADDR_OWVAR 38
15725: PUSH
15726: LD_VAR 0 3
15730: ST_TO_ADDR
// vc_weapon := weapon ;
15731: LD_ADDR_OWVAR 40
15735: PUSH
15736: LD_VAR 0 4
15740: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15741: LD_ADDR_OWVAR 41
15745: PUSH
15746: LD_VAR 0 5
15750: ST_TO_ADDR
// end ;
15751: LD_VAR 0 6
15755: RET
// export function WantPlant ( unit ) ; var task ; begin
15756: LD_INT 0
15758: PPUSH
15759: PPUSH
// result := false ;
15760: LD_ADDR_VAR 0 2
15764: PUSH
15765: LD_INT 0
15767: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15768: LD_ADDR_VAR 0 3
15772: PUSH
15773: LD_VAR 0 1
15777: PPUSH
15778: CALL_OW 437
15782: ST_TO_ADDR
// if task then
15783: LD_VAR 0 3
15787: IFFALSE 15815
// if task [ 1 ] [ 1 ] = p then
15789: LD_VAR 0 3
15793: PUSH
15794: LD_INT 1
15796: ARRAY
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: PUSH
15802: LD_STRING p
15804: EQUAL
15805: IFFALSE 15815
// result := true ;
15807: LD_ADDR_VAR 0 2
15811: PUSH
15812: LD_INT 1
15814: ST_TO_ADDR
// end ;
15815: LD_VAR 0 2
15819: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15820: LD_INT 0
15822: PPUSH
15823: PPUSH
15824: PPUSH
15825: PPUSH
// if pos < 1 then
15826: LD_VAR 0 2
15830: PUSH
15831: LD_INT 1
15833: LESS
15834: IFFALSE 15838
// exit ;
15836: GO 16141
// if pos = 1 then
15838: LD_VAR 0 2
15842: PUSH
15843: LD_INT 1
15845: EQUAL
15846: IFFALSE 15879
// result := Replace ( arr , pos [ 1 ] , value ) else
15848: LD_ADDR_VAR 0 4
15852: PUSH
15853: LD_VAR 0 1
15857: PPUSH
15858: LD_VAR 0 2
15862: PUSH
15863: LD_INT 1
15865: ARRAY
15866: PPUSH
15867: LD_VAR 0 3
15871: PPUSH
15872: CALL_OW 1
15876: ST_TO_ADDR
15877: GO 16141
// begin tmp := arr ;
15879: LD_ADDR_VAR 0 6
15883: PUSH
15884: LD_VAR 0 1
15888: ST_TO_ADDR
// s_arr := [ tmp ] ;
15889: LD_ADDR_VAR 0 7
15893: PUSH
15894: LD_VAR 0 6
15898: PUSH
15899: EMPTY
15900: LIST
15901: ST_TO_ADDR
// for i = 1 to pos - 1 do
15902: LD_ADDR_VAR 0 5
15906: PUSH
15907: DOUBLE
15908: LD_INT 1
15910: DEC
15911: ST_TO_ADDR
15912: LD_VAR 0 2
15916: PUSH
15917: LD_INT 1
15919: MINUS
15920: PUSH
15921: FOR_TO
15922: IFFALSE 15967
// begin tmp := tmp [ pos [ i ] ] ;
15924: LD_ADDR_VAR 0 6
15928: PUSH
15929: LD_VAR 0 6
15933: PUSH
15934: LD_VAR 0 2
15938: PUSH
15939: LD_VAR 0 5
15943: ARRAY
15944: ARRAY
15945: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15946: LD_ADDR_VAR 0 7
15950: PUSH
15951: LD_VAR 0 7
15955: PUSH
15956: LD_VAR 0 6
15960: PUSH
15961: EMPTY
15962: LIST
15963: ADD
15964: ST_TO_ADDR
// end ;
15965: GO 15921
15967: POP
15968: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15969: LD_ADDR_VAR 0 6
15973: PUSH
15974: LD_VAR 0 6
15978: PPUSH
15979: LD_VAR 0 2
15983: PUSH
15984: LD_VAR 0 2
15988: ARRAY
15989: PPUSH
15990: LD_VAR 0 3
15994: PPUSH
15995: CALL_OW 1
15999: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16000: LD_ADDR_VAR 0 7
16004: PUSH
16005: LD_VAR 0 7
16009: PPUSH
16010: LD_VAR 0 7
16014: PPUSH
16015: LD_VAR 0 6
16019: PPUSH
16020: CALL_OW 1
16024: ST_TO_ADDR
// for i = s_arr downto 2 do
16025: LD_ADDR_VAR 0 5
16029: PUSH
16030: DOUBLE
16031: LD_VAR 0 7
16035: INC
16036: ST_TO_ADDR
16037: LD_INT 2
16039: PUSH
16040: FOR_DOWNTO
16041: IFFALSE 16125
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16043: LD_ADDR_VAR 0 6
16047: PUSH
16048: LD_VAR 0 7
16052: PUSH
16053: LD_VAR 0 5
16057: PUSH
16058: LD_INT 1
16060: MINUS
16061: ARRAY
16062: PPUSH
16063: LD_VAR 0 2
16067: PUSH
16068: LD_VAR 0 5
16072: PUSH
16073: LD_INT 1
16075: MINUS
16076: ARRAY
16077: PPUSH
16078: LD_VAR 0 7
16082: PUSH
16083: LD_VAR 0 5
16087: ARRAY
16088: PPUSH
16089: CALL_OW 1
16093: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16094: LD_ADDR_VAR 0 7
16098: PUSH
16099: LD_VAR 0 7
16103: PPUSH
16104: LD_VAR 0 5
16108: PUSH
16109: LD_INT 1
16111: MINUS
16112: PPUSH
16113: LD_VAR 0 6
16117: PPUSH
16118: CALL_OW 1
16122: ST_TO_ADDR
// end ;
16123: GO 16040
16125: POP
16126: POP
// result := s_arr [ 1 ] ;
16127: LD_ADDR_VAR 0 4
16131: PUSH
16132: LD_VAR 0 7
16136: PUSH
16137: LD_INT 1
16139: ARRAY
16140: ST_TO_ADDR
// end ; end ;
16141: LD_VAR 0 4
16145: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16146: LD_INT 0
16148: PPUSH
16149: PPUSH
// if not list then
16150: LD_VAR 0 1
16154: NOT
16155: IFFALSE 16159
// exit ;
16157: GO 16250
// i := list [ pos1 ] ;
16159: LD_ADDR_VAR 0 5
16163: PUSH
16164: LD_VAR 0 1
16168: PUSH
16169: LD_VAR 0 2
16173: ARRAY
16174: ST_TO_ADDR
// if not i then
16175: LD_VAR 0 5
16179: NOT
16180: IFFALSE 16184
// exit ;
16182: GO 16250
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16184: LD_ADDR_VAR 0 1
16188: PUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: LD_VAR 0 2
16198: PPUSH
16199: LD_VAR 0 1
16203: PUSH
16204: LD_VAR 0 3
16208: ARRAY
16209: PPUSH
16210: CALL_OW 1
16214: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16215: LD_ADDR_VAR 0 1
16219: PUSH
16220: LD_VAR 0 1
16224: PPUSH
16225: LD_VAR 0 3
16229: PPUSH
16230: LD_VAR 0 5
16234: PPUSH
16235: CALL_OW 1
16239: ST_TO_ADDR
// result := list ;
16240: LD_ADDR_VAR 0 4
16244: PUSH
16245: LD_VAR 0 1
16249: ST_TO_ADDR
// end ;
16250: LD_VAR 0 4
16254: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16255: LD_INT 0
16257: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16258: LD_ADDR_VAR 0 5
16262: PUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 250
16272: PPUSH
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL_OW 251
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: LD_VAR 0 3
16292: PPUSH
16293: LD_VAR 0 4
16297: PPUSH
16298: CALL 16680 0 5
16302: ST_TO_ADDR
// end ;
16303: LD_VAR 0 5
16307: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16308: LD_INT 0
16310: PPUSH
16311: PPUSH
16312: PPUSH
16313: PPUSH
// if not list or not unit then
16314: LD_VAR 0 2
16318: NOT
16319: IFTRUE 16328
16321: PUSH
16322: LD_VAR 0 1
16326: NOT
16327: OR
16328: IFFALSE 16332
// exit ;
16330: GO 16675
// result := [ ] ;
16332: LD_ADDR_VAR 0 5
16336: PUSH
16337: EMPTY
16338: ST_TO_ADDR
// for i in list do
16339: LD_ADDR_VAR 0 6
16343: PUSH
16344: LD_VAR 0 2
16348: PUSH
16349: FOR_IN
16350: IFFALSE 16568
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16352: LD_ADDR_VAR 0 8
16356: PUSH
16357: LD_VAR 0 1
16361: PPUSH
16362: LD_VAR 0 6
16366: PUSH
16367: LD_INT 1
16369: ARRAY
16370: PPUSH
16371: LD_VAR 0 6
16375: PUSH
16376: LD_INT 2
16378: ARRAY
16379: PPUSH
16380: CALL_OW 297
16384: ST_TO_ADDR
// if not Count ( result ) then
16385: LD_VAR 0 5
16389: PPUSH
16390: CALL 12902 0 1
16394: NOT
16395: IFFALSE 16428
// begin result := Join ( result , [ i , tmp ] ) ;
16397: LD_ADDR_VAR 0 5
16401: PUSH
16402: LD_VAR 0 5
16406: PPUSH
16407: LD_VAR 0 6
16411: PUSH
16412: LD_VAR 0 8
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PPUSH
16421: CALL 48868 0 2
16425: ST_TO_ADDR
// continue ;
16426: GO 16349
// end ; if result [ result ] [ 2 ] <= tmp then
16428: LD_VAR 0 5
16432: PUSH
16433: LD_VAR 0 5
16437: ARRAY
16438: PUSH
16439: LD_INT 2
16441: ARRAY
16442: PUSH
16443: LD_VAR 0 8
16447: LESSEQUAL
16448: IFFALSE 16481
// result := Join ( result , [ i , tmp ] ) else
16450: LD_ADDR_VAR 0 5
16454: PUSH
16455: LD_VAR 0 5
16459: PPUSH
16460: LD_VAR 0 6
16464: PUSH
16465: LD_VAR 0 8
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PPUSH
16474: CALL 48868 0 2
16478: ST_TO_ADDR
16479: GO 16566
// begin for j := 1 to Count ( result ) do
16481: LD_ADDR_VAR 0 7
16485: PUSH
16486: DOUBLE
16487: LD_INT 1
16489: DEC
16490: ST_TO_ADDR
16491: LD_VAR 0 5
16495: PPUSH
16496: CALL 12902 0 1
16500: PUSH
16501: FOR_TO
16502: IFFALSE 16564
// begin if tmp < result [ j ] [ 2 ] then
16504: LD_VAR 0 8
16508: PUSH
16509: LD_VAR 0 5
16513: PUSH
16514: LD_VAR 0 7
16518: ARRAY
16519: PUSH
16520: LD_INT 2
16522: ARRAY
16523: LESS
16524: IFFALSE 16562
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16526: LD_ADDR_VAR 0 5
16530: PUSH
16531: LD_VAR 0 5
16535: PPUSH
16536: LD_VAR 0 7
16540: PPUSH
16541: LD_VAR 0 6
16545: PUSH
16546: LD_VAR 0 8
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PPUSH
16555: CALL_OW 2
16559: ST_TO_ADDR
// break ;
16560: GO 16564
// end ; end ;
16562: GO 16501
16564: POP
16565: POP
// end ; end ;
16566: GO 16349
16568: POP
16569: POP
// if result and not asc then
16570: LD_VAR 0 5
16574: IFFALSE 16583
16576: PUSH
16577: LD_VAR 0 3
16581: NOT
16582: AND
16583: IFFALSE 16600
// result := ReverseArray ( result ) ;
16585: LD_ADDR_VAR 0 5
16589: PUSH
16590: LD_VAR 0 5
16594: PPUSH
16595: CALL 43958 0 1
16599: ST_TO_ADDR
// tmp := [ ] ;
16600: LD_ADDR_VAR 0 8
16604: PUSH
16605: EMPTY
16606: ST_TO_ADDR
// if mode then
16607: LD_VAR 0 4
16611: IFFALSE 16675
// begin for i := 1 to result do
16613: LD_ADDR_VAR 0 6
16617: PUSH
16618: DOUBLE
16619: LD_INT 1
16621: DEC
16622: ST_TO_ADDR
16623: LD_VAR 0 5
16627: PUSH
16628: FOR_TO
16629: IFFALSE 16663
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16631: LD_ADDR_VAR 0 8
16635: PUSH
16636: LD_VAR 0 8
16640: PPUSH
16641: LD_VAR 0 5
16645: PUSH
16646: LD_VAR 0 6
16650: ARRAY
16651: PUSH
16652: LD_INT 1
16654: ARRAY
16655: PPUSH
16656: CALL 48868 0 2
16660: ST_TO_ADDR
16661: GO 16628
16663: POP
16664: POP
// result := tmp ;
16665: LD_ADDR_VAR 0 5
16669: PUSH
16670: LD_VAR 0 8
16674: ST_TO_ADDR
// end ; end ;
16675: LD_VAR 0 5
16679: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16680: LD_INT 0
16682: PPUSH
16683: PPUSH
16684: PPUSH
16685: PPUSH
// if not list then
16686: LD_VAR 0 3
16690: NOT
16691: IFFALSE 16695
// exit ;
16693: GO 17085
// result := [ ] ;
16695: LD_ADDR_VAR 0 6
16699: PUSH
16700: EMPTY
16701: ST_TO_ADDR
// for i in list do
16702: LD_ADDR_VAR 0 7
16706: PUSH
16707: LD_VAR 0 3
16711: PUSH
16712: FOR_IN
16713: IFFALSE 16915
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16715: LD_ADDR_VAR 0 9
16719: PUSH
16720: LD_VAR 0 7
16724: PPUSH
16725: LD_VAR 0 1
16729: PPUSH
16730: LD_VAR 0 2
16734: PPUSH
16735: CALL_OW 297
16739: ST_TO_ADDR
// if not result then
16740: LD_VAR 0 6
16744: NOT
16745: IFFALSE 16771
// result := [ [ i , tmp ] ] else
16747: LD_ADDR_VAR 0 6
16751: PUSH
16752: LD_VAR 0 7
16756: PUSH
16757: LD_VAR 0 9
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: EMPTY
16767: LIST
16768: ST_TO_ADDR
16769: GO 16913
// begin if result [ result ] [ 2 ] <= tmp then
16771: LD_VAR 0 6
16775: PUSH
16776: LD_VAR 0 6
16780: ARRAY
16781: PUSH
16782: LD_INT 2
16784: ARRAY
16785: PUSH
16786: LD_VAR 0 9
16790: LESSEQUAL
16791: IFFALSE 16833
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16793: LD_ADDR_VAR 0 6
16797: PUSH
16798: LD_VAR 0 6
16802: PPUSH
16803: LD_VAR 0 6
16807: PUSH
16808: LD_INT 1
16810: PLUS
16811: PPUSH
16812: LD_VAR 0 7
16816: PUSH
16817: LD_VAR 0 9
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PPUSH
16826: CALL_OW 2
16830: ST_TO_ADDR
16831: GO 16913
// for j := 1 to result do
16833: LD_ADDR_VAR 0 8
16837: PUSH
16838: DOUBLE
16839: LD_INT 1
16841: DEC
16842: ST_TO_ADDR
16843: LD_VAR 0 6
16847: PUSH
16848: FOR_TO
16849: IFFALSE 16911
// begin if tmp < result [ j ] [ 2 ] then
16851: LD_VAR 0 9
16855: PUSH
16856: LD_VAR 0 6
16860: PUSH
16861: LD_VAR 0 8
16865: ARRAY
16866: PUSH
16867: LD_INT 2
16869: ARRAY
16870: LESS
16871: IFFALSE 16909
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16873: LD_ADDR_VAR 0 6
16877: PUSH
16878: LD_VAR 0 6
16882: PPUSH
16883: LD_VAR 0 8
16887: PPUSH
16888: LD_VAR 0 7
16892: PUSH
16893: LD_VAR 0 9
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 2
16906: ST_TO_ADDR
// break ;
16907: GO 16911
// end ; end ;
16909: GO 16848
16911: POP
16912: POP
// end ; end ;
16913: GO 16712
16915: POP
16916: POP
// if result and not asc then
16917: LD_VAR 0 6
16921: IFFALSE 16930
16923: PUSH
16924: LD_VAR 0 4
16928: NOT
16929: AND
16930: IFFALSE 17005
// begin tmp := result ;
16932: LD_ADDR_VAR 0 9
16936: PUSH
16937: LD_VAR 0 6
16941: ST_TO_ADDR
// for i = tmp downto 1 do
16942: LD_ADDR_VAR 0 7
16946: PUSH
16947: DOUBLE
16948: LD_VAR 0 9
16952: INC
16953: ST_TO_ADDR
16954: LD_INT 1
16956: PUSH
16957: FOR_DOWNTO
16958: IFFALSE 17003
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16960: LD_ADDR_VAR 0 6
16964: PUSH
16965: LD_VAR 0 6
16969: PPUSH
16970: LD_VAR 0 9
16974: PUSH
16975: LD_VAR 0 7
16979: MINUS
16980: PUSH
16981: LD_INT 1
16983: PLUS
16984: PPUSH
16985: LD_VAR 0 9
16989: PUSH
16990: LD_VAR 0 7
16994: ARRAY
16995: PPUSH
16996: CALL_OW 1
17000: ST_TO_ADDR
17001: GO 16957
17003: POP
17004: POP
// end ; tmp := [ ] ;
17005: LD_ADDR_VAR 0 9
17009: PUSH
17010: EMPTY
17011: ST_TO_ADDR
// if mode then
17012: LD_VAR 0 5
17016: IFFALSE 17085
// begin for i = 1 to result do
17018: LD_ADDR_VAR 0 7
17022: PUSH
17023: DOUBLE
17024: LD_INT 1
17026: DEC
17027: ST_TO_ADDR
17028: LD_VAR 0 6
17032: PUSH
17033: FOR_TO
17034: IFFALSE 17073
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17036: LD_ADDR_VAR 0 9
17040: PUSH
17041: LD_VAR 0 9
17045: PPUSH
17046: LD_VAR 0 7
17050: PPUSH
17051: LD_VAR 0 6
17055: PUSH
17056: LD_VAR 0 7
17060: ARRAY
17061: PUSH
17062: LD_INT 1
17064: ARRAY
17065: PPUSH
17066: CALL_OW 1
17070: ST_TO_ADDR
17071: GO 17033
17073: POP
17074: POP
// result := tmp ;
17075: LD_ADDR_VAR 0 6
17079: PUSH
17080: LD_VAR 0 9
17084: ST_TO_ADDR
// end ; end ;
17085: LD_VAR 0 6
17089: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17090: LD_INT 0
17092: PPUSH
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17098: LD_ADDR_VAR 0 5
17102: PUSH
17103: LD_INT 0
17105: PUSH
17106: LD_INT 0
17108: PUSH
17109: LD_INT 0
17111: PUSH
17112: EMPTY
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: ST_TO_ADDR
// if not x or not y then
17120: LD_VAR 0 2
17124: NOT
17125: IFTRUE 17134
17127: PUSH
17128: LD_VAR 0 3
17132: NOT
17133: OR
17134: IFFALSE 17138
// exit ;
17136: GO 18794
// if not range then
17138: LD_VAR 0 4
17142: NOT
17143: IFFALSE 17153
// range := 10 ;
17145: LD_ADDR_VAR 0 4
17149: PUSH
17150: LD_INT 10
17152: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17153: LD_ADDR_VAR 0 8
17157: PUSH
17158: LD_INT 81
17160: PUSH
17161: LD_VAR 0 1
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: LD_INT 92
17172: PUSH
17173: LD_VAR 0 2
17177: PUSH
17178: LD_VAR 0 3
17182: PUSH
17183: LD_VAR 0 4
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 3
17196: PUSH
17197: LD_INT 21
17199: PUSH
17200: LD_INT 3
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: LIST
17215: PPUSH
17216: CALL_OW 69
17220: ST_TO_ADDR
// if not tmp then
17221: LD_VAR 0 8
17225: NOT
17226: IFFALSE 17230
// exit ;
17228: GO 18794
// for i in tmp do
17230: LD_ADDR_VAR 0 6
17234: PUSH
17235: LD_VAR 0 8
17239: PUSH
17240: FOR_IN
17241: IFFALSE 18769
// begin points := [ 0 , 0 , 0 ] ;
17243: LD_ADDR_VAR 0 9
17247: PUSH
17248: LD_INT 0
17250: PUSH
17251: LD_INT 0
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: LIST
17261: ST_TO_ADDR
// bpoints := 1 ;
17262: LD_ADDR_VAR 0 10
17266: PUSH
17267: LD_INT 1
17269: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17270: LD_VAR 0 6
17274: PPUSH
17275: CALL_OW 247
17279: PUSH
17280: LD_INT 1
17282: DOUBLE
17283: EQUAL
17284: IFTRUE 17288
17286: GO 17870
17288: POP
// begin if GetClass ( i ) = 1 then
17289: LD_VAR 0 6
17293: PPUSH
17294: CALL_OW 257
17298: PUSH
17299: LD_INT 1
17301: EQUAL
17302: IFFALSE 17323
// points := [ 10 , 5 , 3 ] ;
17304: LD_ADDR_VAR 0 9
17308: PUSH
17309: LD_INT 10
17311: PUSH
17312: LD_INT 5
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17323: LD_VAR 0 6
17327: PPUSH
17328: CALL_OW 257
17332: PUSH
17333: LD_INT 2
17335: PUSH
17336: LD_INT 3
17338: PUSH
17339: LD_INT 4
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: IN
17347: IFFALSE 17368
// points := [ 3 , 2 , 1 ] ;
17349: LD_ADDR_VAR 0 9
17353: PUSH
17354: LD_INT 3
17356: PUSH
17357: LD_INT 2
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17368: LD_VAR 0 6
17372: PPUSH
17373: CALL_OW 257
17377: PUSH
17378: LD_INT 5
17380: EQUAL
17381: IFFALSE 17402
// points := [ 130 , 5 , 2 ] ;
17383: LD_ADDR_VAR 0 9
17387: PUSH
17388: LD_INT 130
17390: PUSH
17391: LD_INT 5
17393: PUSH
17394: LD_INT 2
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17402: LD_VAR 0 6
17406: PPUSH
17407: CALL_OW 257
17411: PUSH
17412: LD_INT 8
17414: EQUAL
17415: IFFALSE 17436
// points := [ 35 , 35 , 30 ] ;
17417: LD_ADDR_VAR 0 9
17421: PUSH
17422: LD_INT 35
17424: PUSH
17425: LD_INT 35
17427: PUSH
17428: LD_INT 30
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17436: LD_VAR 0 6
17440: PPUSH
17441: CALL_OW 257
17445: PUSH
17446: LD_INT 9
17448: EQUAL
17449: IFFALSE 17470
// points := [ 20 , 55 , 40 ] ;
17451: LD_ADDR_VAR 0 9
17455: PUSH
17456: LD_INT 20
17458: PUSH
17459: LD_INT 55
17461: PUSH
17462: LD_INT 40
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17470: LD_VAR 0 6
17474: PPUSH
17475: CALL_OW 257
17479: PUSH
17480: LD_INT 12
17482: PUSH
17483: LD_INT 16
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: IN
17490: IFFALSE 17511
// points := [ 5 , 3 , 2 ] ;
17492: LD_ADDR_VAR 0 9
17496: PUSH
17497: LD_INT 5
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17511: LD_VAR 0 6
17515: PPUSH
17516: CALL_OW 257
17520: PUSH
17521: LD_INT 17
17523: EQUAL
17524: IFFALSE 17545
// points := [ 100 , 50 , 75 ] ;
17526: LD_ADDR_VAR 0 9
17530: PUSH
17531: LD_INT 100
17533: PUSH
17534: LD_INT 50
17536: PUSH
17537: LD_INT 75
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17545: LD_VAR 0 6
17549: PPUSH
17550: CALL_OW 257
17554: PUSH
17555: LD_INT 15
17557: EQUAL
17558: IFFALSE 17579
// points := [ 10 , 5 , 3 ] ;
17560: LD_ADDR_VAR 0 9
17564: PUSH
17565: LD_INT 10
17567: PUSH
17568: LD_INT 5
17570: PUSH
17571: LD_INT 3
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17579: LD_VAR 0 6
17583: PPUSH
17584: CALL_OW 257
17588: PUSH
17589: LD_INT 14
17591: EQUAL
17592: IFFALSE 17613
// points := [ 10 , 0 , 0 ] ;
17594: LD_ADDR_VAR 0 9
17598: PUSH
17599: LD_INT 10
17601: PUSH
17602: LD_INT 0
17604: PUSH
17605: LD_INT 0
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17613: LD_VAR 0 6
17617: PPUSH
17618: CALL_OW 257
17622: PUSH
17623: LD_INT 11
17625: EQUAL
17626: IFFALSE 17647
// points := [ 30 , 10 , 5 ] ;
17628: LD_ADDR_VAR 0 9
17632: PUSH
17633: LD_INT 30
17635: PUSH
17636: LD_INT 10
17638: PUSH
17639: LD_INT 5
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17647: LD_VAR 0 1
17651: PPUSH
17652: LD_INT 5
17654: PPUSH
17655: CALL_OW 321
17659: PUSH
17660: LD_INT 2
17662: EQUAL
17663: IFFALSE 17680
// bpoints := bpoints * 1.8 ;
17665: LD_ADDR_VAR 0 10
17669: PUSH
17670: LD_VAR 0 10
17674: PUSH
17675: LD_REAL  1.80000000000000E+0000
17678: MUL
17679: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17680: LD_VAR 0 6
17684: PPUSH
17685: CALL_OW 257
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: LD_INT 2
17695: PUSH
17696: LD_INT 3
17698: PUSH
17699: LD_INT 4
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: IN
17708: IFFALSE 17728
17710: PUSH
17711: LD_VAR 0 1
17715: PPUSH
17716: LD_INT 51
17718: PPUSH
17719: CALL_OW 321
17723: PUSH
17724: LD_INT 2
17726: EQUAL
17727: AND
17728: IFFALSE 17745
// bpoints := bpoints * 1.2 ;
17730: LD_ADDR_VAR 0 10
17734: PUSH
17735: LD_VAR 0 10
17739: PUSH
17740: LD_REAL  1.20000000000000E+0000
17743: MUL
17744: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17745: LD_VAR 0 6
17749: PPUSH
17750: CALL_OW 257
17754: PUSH
17755: LD_INT 5
17757: PUSH
17758: LD_INT 7
17760: PUSH
17761: LD_INT 9
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: LIST
17768: IN
17769: IFFALSE 17789
17771: PUSH
17772: LD_VAR 0 1
17776: PPUSH
17777: LD_INT 52
17779: PPUSH
17780: CALL_OW 321
17784: PUSH
17785: LD_INT 2
17787: EQUAL
17788: AND
17789: IFFALSE 17806
// bpoints := bpoints * 1.5 ;
17791: LD_ADDR_VAR 0 10
17795: PUSH
17796: LD_VAR 0 10
17800: PUSH
17801: LD_REAL  1.50000000000000E+0000
17804: MUL
17805: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17806: LD_VAR 0 1
17810: PPUSH
17811: LD_INT 66
17813: PPUSH
17814: CALL_OW 321
17818: PUSH
17819: LD_INT 2
17821: EQUAL
17822: IFFALSE 17839
// bpoints := bpoints * 1.1 ;
17824: LD_ADDR_VAR 0 10
17828: PUSH
17829: LD_VAR 0 10
17833: PUSH
17834: LD_REAL  1.10000000000000E+0000
17837: MUL
17838: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17839: LD_ADDR_VAR 0 10
17843: PUSH
17844: LD_VAR 0 10
17848: PUSH
17849: LD_VAR 0 6
17853: PPUSH
17854: LD_INT 1
17856: PPUSH
17857: CALL_OW 259
17861: PUSH
17862: LD_REAL  1.15000000000000E+0000
17865: MUL
17866: MUL
17867: ST_TO_ADDR
// end ; unit_vehicle :
17868: GO 18698
17870: LD_INT 2
17872: DOUBLE
17873: EQUAL
17874: IFTRUE 17878
17876: GO 18686
17878: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17879: LD_VAR 0 6
17883: PPUSH
17884: CALL_OW 264
17888: PUSH
17889: LD_INT 2
17891: PUSH
17892: LD_INT 42
17894: PUSH
17895: LD_INT 24
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: IN
17903: IFFALSE 17924
// points := [ 25 , 5 , 3 ] ;
17905: LD_ADDR_VAR 0 9
17909: PUSH
17910: LD_INT 25
17912: PUSH
17913: LD_INT 5
17915: PUSH
17916: LD_INT 3
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17924: LD_VAR 0 6
17928: PPUSH
17929: CALL_OW 264
17933: PUSH
17934: LD_INT 4
17936: PUSH
17937: LD_INT 43
17939: PUSH
17940: LD_INT 25
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: LIST
17947: IN
17948: IFFALSE 17969
// points := [ 40 , 15 , 5 ] ;
17950: LD_ADDR_VAR 0 9
17954: PUSH
17955: LD_INT 40
17957: PUSH
17958: LD_INT 15
17960: PUSH
17961: LD_INT 5
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17969: LD_VAR 0 6
17973: PPUSH
17974: CALL_OW 264
17978: PUSH
17979: LD_INT 3
17981: PUSH
17982: LD_INT 23
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: IN
17989: IFFALSE 18010
// points := [ 7 , 25 , 8 ] ;
17991: LD_ADDR_VAR 0 9
17995: PUSH
17996: LD_INT 7
17998: PUSH
17999: LD_INT 25
18001: PUSH
18002: LD_INT 8
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18010: LD_VAR 0 6
18014: PPUSH
18015: CALL_OW 264
18019: PUSH
18020: LD_INT 5
18022: PUSH
18023: LD_INT 27
18025: PUSH
18026: LD_INT 44
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: IN
18034: IFFALSE 18055
// points := [ 14 , 50 , 16 ] ;
18036: LD_ADDR_VAR 0 9
18040: PUSH
18041: LD_INT 14
18043: PUSH
18044: LD_INT 50
18046: PUSH
18047: LD_INT 16
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: LIST
18054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18055: LD_VAR 0 6
18059: PPUSH
18060: CALL_OW 264
18064: PUSH
18065: LD_INT 6
18067: PUSH
18068: LD_INT 46
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: IN
18075: IFFALSE 18096
// points := [ 32 , 120 , 70 ] ;
18077: LD_ADDR_VAR 0 9
18081: PUSH
18082: LD_INT 32
18084: PUSH
18085: LD_INT 120
18087: PUSH
18088: LD_INT 70
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18096: LD_VAR 0 6
18100: PPUSH
18101: CALL_OW 264
18105: PUSH
18106: LD_INT 7
18108: PUSH
18109: LD_INT 28
18111: PUSH
18112: LD_INT 45
18114: PUSH
18115: LD_INT 92
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: IN
18124: IFFALSE 18145
// points := [ 35 , 20 , 45 ] ;
18126: LD_ADDR_VAR 0 9
18130: PUSH
18131: LD_INT 35
18133: PUSH
18134: LD_INT 20
18136: PUSH
18137: LD_INT 45
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: LIST
18144: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18145: LD_VAR 0 6
18149: PPUSH
18150: CALL_OW 264
18154: PUSH
18155: LD_INT 47
18157: PUSH
18158: EMPTY
18159: LIST
18160: IN
18161: IFFALSE 18182
// points := [ 67 , 45 , 75 ] ;
18163: LD_ADDR_VAR 0 9
18167: PUSH
18168: LD_INT 67
18170: PUSH
18171: LD_INT 45
18173: PUSH
18174: LD_INT 75
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: LIST
18181: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18182: LD_VAR 0 6
18186: PPUSH
18187: CALL_OW 264
18191: PUSH
18192: LD_INT 26
18194: PUSH
18195: EMPTY
18196: LIST
18197: IN
18198: IFFALSE 18219
// points := [ 120 , 30 , 80 ] ;
18200: LD_ADDR_VAR 0 9
18204: PUSH
18205: LD_INT 120
18207: PUSH
18208: LD_INT 30
18210: PUSH
18211: LD_INT 80
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: LIST
18218: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18219: LD_VAR 0 6
18223: PPUSH
18224: CALL_OW 264
18228: PUSH
18229: LD_INT 22
18231: PUSH
18232: EMPTY
18233: LIST
18234: IN
18235: IFFALSE 18256
// points := [ 40 , 1 , 1 ] ;
18237: LD_ADDR_VAR 0 9
18241: PUSH
18242: LD_INT 40
18244: PUSH
18245: LD_INT 1
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18256: LD_VAR 0 6
18260: PPUSH
18261: CALL_OW 264
18265: PUSH
18266: LD_INT 29
18268: PUSH
18269: EMPTY
18270: LIST
18271: IN
18272: IFFALSE 18293
// points := [ 70 , 200 , 400 ] ;
18274: LD_ADDR_VAR 0 9
18278: PUSH
18279: LD_INT 70
18281: PUSH
18282: LD_INT 200
18284: PUSH
18285: LD_INT 400
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18293: LD_VAR 0 6
18297: PPUSH
18298: CALL_OW 264
18302: PUSH
18303: LD_INT 14
18305: PUSH
18306: LD_INT 53
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: IN
18313: IFFALSE 18334
// points := [ 40 , 10 , 20 ] ;
18315: LD_ADDR_VAR 0 9
18319: PUSH
18320: LD_INT 40
18322: PUSH
18323: LD_INT 10
18325: PUSH
18326: LD_INT 20
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: LIST
18333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18334: LD_VAR 0 6
18338: PPUSH
18339: CALL_OW 264
18343: PUSH
18344: LD_INT 9
18346: PUSH
18347: EMPTY
18348: LIST
18349: IN
18350: IFFALSE 18371
// points := [ 5 , 70 , 20 ] ;
18352: LD_ADDR_VAR 0 9
18356: PUSH
18357: LD_INT 5
18359: PUSH
18360: LD_INT 70
18362: PUSH
18363: LD_INT 20
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18371: LD_VAR 0 6
18375: PPUSH
18376: CALL_OW 264
18380: PUSH
18381: LD_INT 10
18383: PUSH
18384: EMPTY
18385: LIST
18386: IN
18387: IFFALSE 18408
// points := [ 35 , 110 , 70 ] ;
18389: LD_ADDR_VAR 0 9
18393: PUSH
18394: LD_INT 35
18396: PUSH
18397: LD_INT 110
18399: PUSH
18400: LD_INT 70
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: LIST
18407: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18408: LD_VAR 0 6
18412: PPUSH
18413: CALL_OW 265
18417: PUSH
18418: LD_INT 25
18420: EQUAL
18421: IFFALSE 18442
// points := [ 80 , 65 , 100 ] ;
18423: LD_ADDR_VAR 0 9
18427: PUSH
18428: LD_INT 80
18430: PUSH
18431: LD_INT 65
18433: PUSH
18434: LD_INT 100
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18442: LD_VAR 0 6
18446: PPUSH
18447: CALL_OW 263
18451: PUSH
18452: LD_INT 1
18454: EQUAL
18455: IFFALSE 18490
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18457: LD_ADDR_VAR 0 10
18461: PUSH
18462: LD_VAR 0 10
18466: PUSH
18467: LD_VAR 0 6
18471: PPUSH
18472: CALL_OW 311
18476: PPUSH
18477: LD_INT 3
18479: PPUSH
18480: CALL_OW 259
18484: PUSH
18485: LD_INT 4
18487: MUL
18488: MUL
18489: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18490: LD_VAR 0 6
18494: PPUSH
18495: CALL_OW 263
18499: PUSH
18500: LD_INT 2
18502: EQUAL
18503: IFFALSE 18554
// begin j := IsControledBy ( i ) ;
18505: LD_ADDR_VAR 0 7
18509: PUSH
18510: LD_VAR 0 6
18514: PPUSH
18515: CALL_OW 312
18519: ST_TO_ADDR
// if j then
18520: LD_VAR 0 7
18524: IFFALSE 18554
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18526: LD_ADDR_VAR 0 10
18530: PUSH
18531: LD_VAR 0 10
18535: PUSH
18536: LD_VAR 0 7
18540: PPUSH
18541: LD_INT 3
18543: PPUSH
18544: CALL_OW 259
18548: PUSH
18549: LD_INT 3
18551: MUL
18552: MUL
18553: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18554: LD_VAR 0 6
18558: PPUSH
18559: CALL_OW 264
18563: PUSH
18564: LD_INT 5
18566: PUSH
18567: LD_INT 6
18569: PUSH
18570: LD_INT 46
18572: PUSH
18573: LD_INT 44
18575: PUSH
18576: LD_INT 47
18578: PUSH
18579: LD_INT 45
18581: PUSH
18582: LD_INT 28
18584: PUSH
18585: LD_INT 7
18587: PUSH
18588: LD_INT 27
18590: PUSH
18591: LD_INT 29
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: IN
18606: IFFALSE 18626
18608: PUSH
18609: LD_VAR 0 1
18613: PPUSH
18614: LD_INT 52
18616: PPUSH
18617: CALL_OW 321
18621: PUSH
18622: LD_INT 2
18624: EQUAL
18625: AND
18626: IFFALSE 18643
// bpoints := bpoints * 1.2 ;
18628: LD_ADDR_VAR 0 10
18632: PUSH
18633: LD_VAR 0 10
18637: PUSH
18638: LD_REAL  1.20000000000000E+0000
18641: MUL
18642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18643: LD_VAR 0 6
18647: PPUSH
18648: CALL_OW 264
18652: PUSH
18653: LD_INT 6
18655: PUSH
18656: LD_INT 46
18658: PUSH
18659: LD_INT 47
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: IN
18667: IFFALSE 18684
// bpoints := bpoints * 1.2 ;
18669: LD_ADDR_VAR 0 10
18673: PUSH
18674: LD_VAR 0 10
18678: PUSH
18679: LD_REAL  1.20000000000000E+0000
18682: MUL
18683: ST_TO_ADDR
// end ; unit_building :
18684: GO 18698
18686: LD_INT 3
18688: DOUBLE
18689: EQUAL
18690: IFTRUE 18694
18692: GO 18697
18694: POP
// ; end ;
18695: GO 18698
18697: POP
// for j = 1 to 3 do
18698: LD_ADDR_VAR 0 7
18702: PUSH
18703: DOUBLE
18704: LD_INT 1
18706: DEC
18707: ST_TO_ADDR
18708: LD_INT 3
18710: PUSH
18711: FOR_TO
18712: IFFALSE 18765
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18714: LD_ADDR_VAR 0 5
18718: PUSH
18719: LD_VAR 0 5
18723: PPUSH
18724: LD_VAR 0 7
18728: PPUSH
18729: LD_VAR 0 5
18733: PUSH
18734: LD_VAR 0 7
18738: ARRAY
18739: PUSH
18740: LD_VAR 0 9
18744: PUSH
18745: LD_VAR 0 7
18749: ARRAY
18750: PUSH
18751: LD_VAR 0 10
18755: MUL
18756: PLUS
18757: PPUSH
18758: CALL_OW 1
18762: ST_TO_ADDR
18763: GO 18711
18765: POP
18766: POP
// end ;
18767: GO 17240
18769: POP
18770: POP
// result := Replace ( result , 4 , tmp ) ;
18771: LD_ADDR_VAR 0 5
18775: PUSH
18776: LD_VAR 0 5
18780: PPUSH
18781: LD_INT 4
18783: PPUSH
18784: LD_VAR 0 8
18788: PPUSH
18789: CALL_OW 1
18793: ST_TO_ADDR
// end ;
18794: LD_VAR 0 5
18798: RET
// export function DangerAtRange ( unit , range ) ; begin
18799: LD_INT 0
18801: PPUSH
// if not unit then
18802: LD_VAR 0 1
18806: NOT
18807: IFFALSE 18811
// exit ;
18809: GO 18856
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18811: LD_ADDR_VAR 0 3
18815: PUSH
18816: LD_VAR 0 1
18820: PPUSH
18821: CALL_OW 255
18825: PPUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: CALL_OW 250
18835: PPUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 251
18845: PPUSH
18846: LD_VAR 0 2
18850: PPUSH
18851: CALL 17090 0 4
18855: ST_TO_ADDR
// end ;
18856: LD_VAR 0 3
18860: RET
// export function DangerInArea ( side , area ) ; begin
18861: LD_INT 0
18863: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_VAR 0 2
18873: PPUSH
18874: LD_INT 81
18876: PUSH
18877: LD_VAR 0 1
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PPUSH
18886: CALL_OW 70
18890: ST_TO_ADDR
// end ;
18891: LD_VAR 0 3
18895: RET
// export function IsExtension ( b ) ; begin
18896: LD_INT 0
18898: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: LD_VAR 0 1
18908: PUSH
18909: LD_INT 23
18911: PUSH
18912: LD_INT 20
18914: PUSH
18915: LD_INT 22
18917: PUSH
18918: LD_INT 17
18920: PUSH
18921: LD_INT 24
18923: PUSH
18924: LD_INT 21
18926: PUSH
18927: LD_INT 19
18929: PUSH
18930: LD_INT 16
18932: PUSH
18933: LD_INT 25
18935: PUSH
18936: LD_INT 18
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: IN
18951: ST_TO_ADDR
// end ;
18952: LD_VAR 0 2
18956: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18957: LD_INT 0
18959: PPUSH
18960: PPUSH
18961: PPUSH
// result := [ ] ;
18962: LD_ADDR_VAR 0 4
18966: PUSH
18967: EMPTY
18968: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18969: LD_ADDR_VAR 0 5
18973: PUSH
18974: LD_VAR 0 2
18978: PPUSH
18979: LD_INT 21
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PPUSH
18989: CALL_OW 70
18993: ST_TO_ADDR
// if not tmp then
18994: LD_VAR 0 5
18998: NOT
18999: IFFALSE 19003
// exit ;
19001: GO 19067
// if checkLink then
19003: LD_VAR 0 3
19007: IFFALSE 19057
// begin for i in tmp do
19009: LD_ADDR_VAR 0 6
19013: PUSH
19014: LD_VAR 0 5
19018: PUSH
19019: FOR_IN
19020: IFFALSE 19055
// if GetBase ( i ) <> base then
19022: LD_VAR 0 6
19026: PPUSH
19027: CALL_OW 274
19031: PUSH
19032: LD_VAR 0 1
19036: NONEQUAL
19037: IFFALSE 19053
// ComLinkToBase ( base , i ) ;
19039: LD_VAR 0 1
19043: PPUSH
19044: LD_VAR 0 6
19048: PPUSH
19049: CALL_OW 169
19053: GO 19019
19055: POP
19056: POP
// end ; result := tmp ;
19057: LD_ADDR_VAR 0 4
19061: PUSH
19062: LD_VAR 0 5
19066: ST_TO_ADDR
// end ;
19067: LD_VAR 0 4
19071: RET
// export function ComComplete ( units , b ) ; var i ; begin
19072: LD_INT 0
19074: PPUSH
19075: PPUSH
// if not units then
19076: LD_VAR 0 1
19080: NOT
19081: IFFALSE 19085
// exit ;
19083: GO 19175
// for i in units do
19085: LD_ADDR_VAR 0 4
19089: PUSH
19090: LD_VAR 0 1
19094: PUSH
19095: FOR_IN
19096: IFFALSE 19173
// if BuildingStatus ( b ) = bs_build then
19098: LD_VAR 0 2
19102: PPUSH
19103: CALL_OW 461
19107: PUSH
19108: LD_INT 1
19110: EQUAL
19111: IFFALSE 19171
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19113: LD_VAR 0 4
19117: PPUSH
19118: LD_STRING h
19120: PUSH
19121: LD_VAR 0 2
19125: PPUSH
19126: CALL_OW 250
19130: PUSH
19131: LD_VAR 0 2
19135: PPUSH
19136: CALL_OW 251
19140: PUSH
19141: LD_VAR 0 2
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: LD_INT 0
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: PPUSH
19167: CALL_OW 446
19171: GO 19095
19173: POP
19174: POP
// end ;
19175: LD_VAR 0 3
19179: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19180: LD_INT 0
19182: PPUSH
19183: PPUSH
19184: PPUSH
19185: PPUSH
19186: PPUSH
19187: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19188: LD_VAR 0 1
19192: NOT
19193: IFTRUE 19210
19195: PUSH
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 263
19205: PUSH
19206: LD_INT 2
19208: NONEQUAL
19209: OR
19210: IFFALSE 19214
// exit ;
19212: GO 19530
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19214: LD_ADDR_VAR 0 6
19218: PUSH
19219: LD_INT 22
19221: PUSH
19222: LD_VAR 0 1
19226: PPUSH
19227: CALL_OW 255
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 2
19238: PUSH
19239: LD_INT 30
19241: PUSH
19242: LD_INT 36
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 34
19251: PUSH
19252: LD_INT 31
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PPUSH
19268: CALL_OW 69
19272: ST_TO_ADDR
// if not tmp then
19273: LD_VAR 0 6
19277: NOT
19278: IFFALSE 19282
// exit ;
19280: GO 19530
// result := [ ] ;
19282: LD_ADDR_VAR 0 2
19286: PUSH
19287: EMPTY
19288: ST_TO_ADDR
// for i in tmp do
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_VAR 0 6
19298: PUSH
19299: FOR_IN
19300: IFFALSE 19371
// begin t := UnitsInside ( i ) ;
19302: LD_ADDR_VAR 0 4
19306: PUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: CALL_OW 313
19316: ST_TO_ADDR
// if t then
19317: LD_VAR 0 4
19321: IFFALSE 19369
// for j in t do
19323: LD_ADDR_VAR 0 7
19327: PUSH
19328: LD_VAR 0 4
19332: PUSH
19333: FOR_IN
19334: IFFALSE 19367
// result := Replace ( result , result + 1 , j ) ;
19336: LD_ADDR_VAR 0 2
19340: PUSH
19341: LD_VAR 0 2
19345: PPUSH
19346: LD_VAR 0 2
19350: PUSH
19351: LD_INT 1
19353: PLUS
19354: PPUSH
19355: LD_VAR 0 7
19359: PPUSH
19360: CALL_OW 1
19364: ST_TO_ADDR
19365: GO 19333
19367: POP
19368: POP
// end ;
19369: GO 19299
19371: POP
19372: POP
// if not result then
19373: LD_VAR 0 2
19377: NOT
19378: IFFALSE 19382
// exit ;
19380: GO 19530
// mech := result [ 1 ] ;
19382: LD_ADDR_VAR 0 5
19386: PUSH
19387: LD_VAR 0 2
19391: PUSH
19392: LD_INT 1
19394: ARRAY
19395: ST_TO_ADDR
// if result > 1 then
19396: LD_VAR 0 2
19400: PUSH
19401: LD_INT 1
19403: GREATER
19404: IFFALSE 19516
// begin for i = 2 to result do
19406: LD_ADDR_VAR 0 3
19410: PUSH
19411: DOUBLE
19412: LD_INT 2
19414: DEC
19415: ST_TO_ADDR
19416: LD_VAR 0 2
19420: PUSH
19421: FOR_TO
19422: IFFALSE 19514
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19424: LD_ADDR_VAR 0 4
19428: PUSH
19429: LD_VAR 0 2
19433: PUSH
19434: LD_VAR 0 3
19438: ARRAY
19439: PPUSH
19440: LD_INT 3
19442: PPUSH
19443: CALL_OW 259
19447: PUSH
19448: LD_VAR 0 2
19452: PUSH
19453: LD_VAR 0 3
19457: ARRAY
19458: PPUSH
19459: CALL_OW 432
19463: MINUS
19464: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19465: LD_VAR 0 4
19469: PUSH
19470: LD_VAR 0 5
19474: PPUSH
19475: LD_INT 3
19477: PPUSH
19478: CALL_OW 259
19482: PUSH
19483: LD_VAR 0 5
19487: PPUSH
19488: CALL_OW 432
19492: MINUS
19493: GREATEREQUAL
19494: IFFALSE 19512
// mech := result [ i ] ;
19496: LD_ADDR_VAR 0 5
19500: PUSH
19501: LD_VAR 0 2
19505: PUSH
19506: LD_VAR 0 3
19510: ARRAY
19511: ST_TO_ADDR
// end ;
19512: GO 19421
19514: POP
19515: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19516: LD_VAR 0 1
19520: PPUSH
19521: LD_VAR 0 5
19525: PPUSH
19526: CALL_OW 135
// end ;
19530: LD_VAR 0 2
19534: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19535: LD_INT 0
19537: PPUSH
19538: PPUSH
19539: PPUSH
19540: PPUSH
19541: PPUSH
19542: PPUSH
19543: PPUSH
19544: PPUSH
19545: PPUSH
19546: PPUSH
19547: PPUSH
19548: PPUSH
19549: PPUSH
// result := [ ] ;
19550: LD_ADDR_VAR 0 7
19554: PUSH
19555: EMPTY
19556: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 266
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: IN
19577: NOT
19578: IFFALSE 19582
// exit ;
19580: GO 21222
// if name then
19582: LD_VAR 0 3
19586: IFFALSE 19602
// SetBName ( base_dep , name ) ;
19588: LD_VAR 0 1
19592: PPUSH
19593: LD_VAR 0 3
19597: PPUSH
19598: CALL_OW 500
// base := GetBase ( base_dep ) ;
19602: LD_ADDR_VAR 0 15
19606: PUSH
19607: LD_VAR 0 1
19611: PPUSH
19612: CALL_OW 274
19616: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19617: LD_ADDR_VAR 0 16
19621: PUSH
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 255
19631: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19632: LD_ADDR_VAR 0 17
19636: PUSH
19637: LD_VAR 0 1
19641: PPUSH
19642: CALL_OW 248
19646: ST_TO_ADDR
// if sources then
19647: LD_VAR 0 5
19651: IFFALSE 19698
// for i = 1 to 3 do
19653: LD_ADDR_VAR 0 8
19657: PUSH
19658: DOUBLE
19659: LD_INT 1
19661: DEC
19662: ST_TO_ADDR
19663: LD_INT 3
19665: PUSH
19666: FOR_TO
19667: IFFALSE 19696
// AddResourceType ( base , i , sources [ i ] ) ;
19669: LD_VAR 0 15
19673: PPUSH
19674: LD_VAR 0 8
19678: PPUSH
19679: LD_VAR 0 5
19683: PUSH
19684: LD_VAR 0 8
19688: ARRAY
19689: PPUSH
19690: CALL_OW 276
19694: GO 19666
19696: POP
19697: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19698: LD_ADDR_VAR 0 18
19702: PUSH
19703: LD_VAR 0 15
19707: PPUSH
19708: LD_VAR 0 2
19712: PPUSH
19713: LD_INT 1
19715: PPUSH
19716: CALL 18957 0 3
19720: ST_TO_ADDR
// InitHc ;
19721: CALL_OW 19
// InitUc ;
19725: CALL_OW 18
// uc_side := side ;
19729: LD_ADDR_OWVAR 20
19733: PUSH
19734: LD_VAR 0 16
19738: ST_TO_ADDR
// uc_nation := nation ;
19739: LD_ADDR_OWVAR 21
19743: PUSH
19744: LD_VAR 0 17
19748: ST_TO_ADDR
// if buildings then
19749: LD_VAR 0 18
19753: IFFALSE 21081
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19755: LD_ADDR_VAR 0 19
19759: PUSH
19760: LD_VAR 0 18
19764: PPUSH
19765: LD_INT 2
19767: PUSH
19768: LD_INT 30
19770: PUSH
19771: LD_INT 29
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 30
19780: PUSH
19781: LD_INT 30
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: LIST
19792: PPUSH
19793: CALL_OW 72
19797: ST_TO_ADDR
// if tmp then
19798: LD_VAR 0 19
19802: IFFALSE 19850
// for i in tmp do
19804: LD_ADDR_VAR 0 8
19808: PUSH
19809: LD_VAR 0 19
19813: PUSH
19814: FOR_IN
19815: IFFALSE 19848
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19817: LD_VAR 0 8
19821: PPUSH
19822: CALL_OW 250
19826: PPUSH
19827: LD_VAR 0 8
19831: PPUSH
19832: CALL_OW 251
19836: PPUSH
19837: LD_VAR 0 16
19841: PPUSH
19842: CALL_OW 441
19846: GO 19814
19848: POP
19849: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19850: LD_VAR 0 18
19854: PPUSH
19855: LD_INT 2
19857: PUSH
19858: LD_INT 30
19860: PUSH
19861: LD_INT 32
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 30
19870: PUSH
19871: LD_INT 33
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: LIST
19882: PPUSH
19883: CALL_OW 72
19887: IFFALSE 19975
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19889: LD_ADDR_VAR 0 8
19893: PUSH
19894: LD_VAR 0 18
19898: PPUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 30
19904: PUSH
19905: LD_INT 32
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 30
19914: PUSH
19915: LD_INT 33
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: PPUSH
19927: CALL_OW 72
19931: PUSH
19932: FOR_IN
19933: IFFALSE 19973
// begin if not GetBWeapon ( i ) then
19935: LD_VAR 0 8
19939: PPUSH
19940: CALL_OW 269
19944: NOT
19945: IFFALSE 19971
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19947: LD_VAR 0 8
19951: PPUSH
19952: LD_VAR 0 8
19956: PPUSH
19957: LD_VAR 0 2
19961: PPUSH
19962: CALL 21227 0 2
19966: PPUSH
19967: CALL_OW 431
// end ;
19971: GO 19932
19973: POP
19974: POP
// end ; for i = 1 to personel do
19975: LD_ADDR_VAR 0 8
19979: PUSH
19980: DOUBLE
19981: LD_INT 1
19983: DEC
19984: ST_TO_ADDR
19985: LD_VAR 0 6
19989: PUSH
19990: FOR_TO
19991: IFFALSE 21061
// begin if i > 4 then
19993: LD_VAR 0 8
19997: PUSH
19998: LD_INT 4
20000: GREATER
20001: IFFALSE 20005
// break ;
20003: GO 21061
// case i of 1 :
20005: LD_VAR 0 8
20009: PUSH
20010: LD_INT 1
20012: DOUBLE
20013: EQUAL
20014: IFTRUE 20018
20016: GO 20098
20018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20019: LD_ADDR_VAR 0 12
20023: PUSH
20024: LD_VAR 0 18
20028: PPUSH
20029: LD_INT 22
20031: PUSH
20032: LD_VAR 0 16
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 58
20043: PUSH
20044: EMPTY
20045: LIST
20046: PUSH
20047: LD_INT 2
20049: PUSH
20050: LD_INT 30
20052: PUSH
20053: LD_INT 32
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 30
20062: PUSH
20063: LD_INT 4
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 30
20072: PUSH
20073: LD_INT 5
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: LIST
20090: PPUSH
20091: CALL_OW 72
20095: ST_TO_ADDR
20096: GO 20320
20098: LD_INT 2
20100: DOUBLE
20101: EQUAL
20102: IFTRUE 20106
20104: GO 20168
20106: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20107: LD_ADDR_VAR 0 12
20111: PUSH
20112: LD_VAR 0 18
20116: PPUSH
20117: LD_INT 22
20119: PUSH
20120: LD_VAR 0 16
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 2
20131: PUSH
20132: LD_INT 30
20134: PUSH
20135: LD_INT 0
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 30
20144: PUSH
20145: LD_INT 1
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PPUSH
20161: CALL_OW 72
20165: ST_TO_ADDR
20166: GO 20320
20168: LD_INT 3
20170: DOUBLE
20171: EQUAL
20172: IFTRUE 20176
20174: GO 20238
20176: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20177: LD_ADDR_VAR 0 12
20181: PUSH
20182: LD_VAR 0 18
20186: PPUSH
20187: LD_INT 22
20189: PUSH
20190: LD_VAR 0 16
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 30
20204: PUSH
20205: LD_INT 2
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 30
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PPUSH
20231: CALL_OW 72
20235: ST_TO_ADDR
20236: GO 20320
20238: LD_INT 4
20240: DOUBLE
20241: EQUAL
20242: IFTRUE 20246
20244: GO 20319
20246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20247: LD_ADDR_VAR 0 12
20251: PUSH
20252: LD_VAR 0 18
20256: PPUSH
20257: LD_INT 22
20259: PUSH
20260: LD_VAR 0 16
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 30
20274: PUSH
20275: LD_INT 6
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 30
20284: PUSH
20285: LD_INT 7
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 30
20294: PUSH
20295: LD_INT 8
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PPUSH
20312: CALL_OW 72
20316: ST_TO_ADDR
20317: GO 20320
20319: POP
// if i = 1 then
20320: LD_VAR 0 8
20324: PUSH
20325: LD_INT 1
20327: EQUAL
20328: IFFALSE 20439
// begin tmp := [ ] ;
20330: LD_ADDR_VAR 0 19
20334: PUSH
20335: EMPTY
20336: ST_TO_ADDR
// for j in f do
20337: LD_ADDR_VAR 0 9
20341: PUSH
20342: LD_VAR 0 12
20346: PUSH
20347: FOR_IN
20348: IFFALSE 20421
// if GetBType ( j ) = b_bunker then
20350: LD_VAR 0 9
20354: PPUSH
20355: CALL_OW 266
20359: PUSH
20360: LD_INT 32
20362: EQUAL
20363: IFFALSE 20390
// tmp := Insert ( tmp , 1 , j ) else
20365: LD_ADDR_VAR 0 19
20369: PUSH
20370: LD_VAR 0 19
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: LD_VAR 0 9
20382: PPUSH
20383: CALL_OW 2
20387: ST_TO_ADDR
20388: GO 20419
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20390: LD_ADDR_VAR 0 19
20394: PUSH
20395: LD_VAR 0 19
20399: PPUSH
20400: LD_VAR 0 19
20404: PUSH
20405: LD_INT 1
20407: PLUS
20408: PPUSH
20409: LD_VAR 0 9
20413: PPUSH
20414: CALL_OW 2
20418: ST_TO_ADDR
20419: GO 20347
20421: POP
20422: POP
// if tmp then
20423: LD_VAR 0 19
20427: IFFALSE 20439
// f := tmp ;
20429: LD_ADDR_VAR 0 12
20433: PUSH
20434: LD_VAR 0 19
20438: ST_TO_ADDR
// end ; x := personel [ i ] ;
20439: LD_ADDR_VAR 0 13
20443: PUSH
20444: LD_VAR 0 6
20448: PUSH
20449: LD_VAR 0 8
20453: ARRAY
20454: ST_TO_ADDR
// if x = - 1 then
20455: LD_VAR 0 13
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: EQUAL
20464: IFFALSE 20675
// begin for j in f do
20466: LD_ADDR_VAR 0 9
20470: PUSH
20471: LD_VAR 0 12
20475: PUSH
20476: FOR_IN
20477: IFFALSE 20671
// repeat InitHc ;
20479: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20483: LD_VAR 0 9
20487: PPUSH
20488: CALL_OW 266
20492: PUSH
20493: LD_INT 5
20495: EQUAL
20496: IFFALSE 20566
// begin if UnitsInside ( j ) < 3 then
20498: LD_VAR 0 9
20502: PPUSH
20503: CALL_OW 313
20507: PUSH
20508: LD_INT 3
20510: LESS
20511: IFFALSE 20547
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20513: LD_INT 0
20515: PPUSH
20516: LD_INT 5
20518: PUSH
20519: LD_INT 8
20521: PUSH
20522: LD_INT 9
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: LD_VAR 0 17
20534: ARRAY
20535: PPUSH
20536: LD_VAR 0 4
20540: PPUSH
20541: CALL_OW 380
20545: GO 20564
// PrepareHuman ( false , i , skill ) ;
20547: LD_INT 0
20549: PPUSH
20550: LD_VAR 0 8
20554: PPUSH
20555: LD_VAR 0 4
20559: PPUSH
20560: CALL_OW 380
// end else
20564: GO 20583
// PrepareHuman ( false , i , skill ) ;
20566: LD_INT 0
20568: PPUSH
20569: LD_VAR 0 8
20573: PPUSH
20574: LD_VAR 0 4
20578: PPUSH
20579: CALL_OW 380
// un := CreateHuman ;
20583: LD_ADDR_VAR 0 14
20587: PUSH
20588: CALL_OW 44
20592: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20593: LD_ADDR_VAR 0 7
20597: PUSH
20598: LD_VAR 0 7
20602: PPUSH
20603: LD_INT 1
20605: PPUSH
20606: LD_VAR 0 14
20610: PPUSH
20611: CALL_OW 2
20615: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20616: LD_VAR 0 14
20620: PPUSH
20621: LD_VAR 0 9
20625: PPUSH
20626: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20630: LD_VAR 0 9
20634: PPUSH
20635: CALL_OW 313
20639: PUSH
20640: LD_INT 6
20642: EQUAL
20643: IFTRUE 20667
20645: PUSH
20646: LD_VAR 0 9
20650: PPUSH
20651: CALL_OW 266
20655: PUSH
20656: LD_INT 32
20658: PUSH
20659: LD_INT 31
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: IN
20666: OR
20667: IFFALSE 20479
20669: GO 20476
20671: POP
20672: POP
// end else
20673: GO 21059
// for j = 1 to x do
20675: LD_ADDR_VAR 0 9
20679: PUSH
20680: DOUBLE
20681: LD_INT 1
20683: DEC
20684: ST_TO_ADDR
20685: LD_VAR 0 13
20689: PUSH
20690: FOR_TO
20691: IFFALSE 21057
// begin InitHc ;
20693: CALL_OW 19
// if not f then
20697: LD_VAR 0 12
20701: NOT
20702: IFFALSE 20791
// begin PrepareHuman ( false , i , skill ) ;
20704: LD_INT 0
20706: PPUSH
20707: LD_VAR 0 8
20711: PPUSH
20712: LD_VAR 0 4
20716: PPUSH
20717: CALL_OW 380
// un := CreateHuman ;
20721: LD_ADDR_VAR 0 14
20725: PUSH
20726: CALL_OW 44
20730: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20731: LD_ADDR_VAR 0 7
20735: PUSH
20736: LD_VAR 0 7
20740: PPUSH
20741: LD_INT 1
20743: PPUSH
20744: LD_VAR 0 14
20748: PPUSH
20749: CALL_OW 2
20753: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20754: LD_VAR 0 14
20758: PPUSH
20759: LD_VAR 0 1
20763: PPUSH
20764: CALL_OW 250
20768: PPUSH
20769: LD_VAR 0 1
20773: PPUSH
20774: CALL_OW 251
20778: PPUSH
20779: LD_INT 10
20781: PPUSH
20782: LD_INT 0
20784: PPUSH
20785: CALL_OW 50
// continue ;
20789: GO 20690
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20791: LD_VAR 0 12
20795: PUSH
20796: LD_INT 1
20798: ARRAY
20799: PPUSH
20800: CALL_OW 313
20804: IFFALSE 20832
20806: PUSH
20807: LD_VAR 0 12
20811: PUSH
20812: LD_INT 1
20814: ARRAY
20815: PPUSH
20816: CALL_OW 266
20820: PUSH
20821: LD_INT 32
20823: PUSH
20824: LD_INT 31
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: IN
20831: AND
20832: IFTRUE 20853
20834: PUSH
20835: LD_VAR 0 12
20839: PUSH
20840: LD_INT 1
20842: ARRAY
20843: PPUSH
20844: CALL_OW 313
20848: PUSH
20849: LD_INT 6
20851: EQUAL
20852: OR
20853: IFFALSE 20873
// f := Delete ( f , 1 ) ;
20855: LD_ADDR_VAR 0 12
20859: PUSH
20860: LD_VAR 0 12
20864: PPUSH
20865: LD_INT 1
20867: PPUSH
20868: CALL_OW 3
20872: ST_TO_ADDR
// if not f then
20873: LD_VAR 0 12
20877: NOT
20878: IFFALSE 20896
// begin x := x + 2 ;
20880: LD_ADDR_VAR 0 13
20884: PUSH
20885: LD_VAR 0 13
20889: PUSH
20890: LD_INT 2
20892: PLUS
20893: ST_TO_ADDR
// continue ;
20894: GO 20690
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20896: LD_VAR 0 12
20900: PUSH
20901: LD_INT 1
20903: ARRAY
20904: PPUSH
20905: CALL_OW 266
20909: PUSH
20910: LD_INT 5
20912: EQUAL
20913: IFFALSE 20987
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20915: LD_VAR 0 12
20919: PUSH
20920: LD_INT 1
20922: ARRAY
20923: PPUSH
20924: CALL_OW 313
20928: PUSH
20929: LD_INT 3
20931: LESS
20932: IFFALSE 20968
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20934: LD_INT 0
20936: PPUSH
20937: LD_INT 5
20939: PUSH
20940: LD_INT 8
20942: PUSH
20943: LD_INT 9
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: PUSH
20951: LD_VAR 0 17
20955: ARRAY
20956: PPUSH
20957: LD_VAR 0 4
20961: PPUSH
20962: CALL_OW 380
20966: GO 20985
// PrepareHuman ( false , i , skill ) ;
20968: LD_INT 0
20970: PPUSH
20971: LD_VAR 0 8
20975: PPUSH
20976: LD_VAR 0 4
20980: PPUSH
20981: CALL_OW 380
// end else
20985: GO 21004
// PrepareHuman ( false , i , skill ) ;
20987: LD_INT 0
20989: PPUSH
20990: LD_VAR 0 8
20994: PPUSH
20995: LD_VAR 0 4
20999: PPUSH
21000: CALL_OW 380
// un := CreateHuman ;
21004: LD_ADDR_VAR 0 14
21008: PUSH
21009: CALL_OW 44
21013: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21014: LD_ADDR_VAR 0 7
21018: PUSH
21019: LD_VAR 0 7
21023: PPUSH
21024: LD_INT 1
21026: PPUSH
21027: LD_VAR 0 14
21031: PPUSH
21032: CALL_OW 2
21036: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21037: LD_VAR 0 14
21041: PPUSH
21042: LD_VAR 0 12
21046: PUSH
21047: LD_INT 1
21049: ARRAY
21050: PPUSH
21051: CALL_OW 52
// end ;
21055: GO 20690
21057: POP
21058: POP
// end ;
21059: GO 19990
21061: POP
21062: POP
// result := result ^ buildings ;
21063: LD_ADDR_VAR 0 7
21067: PUSH
21068: LD_VAR 0 7
21072: PUSH
21073: LD_VAR 0 18
21077: ADD
21078: ST_TO_ADDR
// end else
21079: GO 21222
// begin for i = 1 to personel do
21081: LD_ADDR_VAR 0 8
21085: PUSH
21086: DOUBLE
21087: LD_INT 1
21089: DEC
21090: ST_TO_ADDR
21091: LD_VAR 0 6
21095: PUSH
21096: FOR_TO
21097: IFFALSE 21220
// begin if i > 4 then
21099: LD_VAR 0 8
21103: PUSH
21104: LD_INT 4
21106: GREATER
21107: IFFALSE 21111
// break ;
21109: GO 21220
// x := personel [ i ] ;
21111: LD_ADDR_VAR 0 13
21115: PUSH
21116: LD_VAR 0 6
21120: PUSH
21121: LD_VAR 0 8
21125: ARRAY
21126: ST_TO_ADDR
// if x = - 1 then
21127: LD_VAR 0 13
21131: PUSH
21132: LD_INT 1
21134: NEG
21135: EQUAL
21136: IFFALSE 21140
// continue ;
21138: GO 21096
// PrepareHuman ( false , i , skill ) ;
21140: LD_INT 0
21142: PPUSH
21143: LD_VAR 0 8
21147: PPUSH
21148: LD_VAR 0 4
21152: PPUSH
21153: CALL_OW 380
// un := CreateHuman ;
21157: LD_ADDR_VAR 0 14
21161: PUSH
21162: CALL_OW 44
21166: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21167: LD_VAR 0 14
21171: PPUSH
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 250
21181: PPUSH
21182: LD_VAR 0 1
21186: PPUSH
21187: CALL_OW 251
21191: PPUSH
21192: LD_INT 10
21194: PPUSH
21195: LD_INT 0
21197: PPUSH
21198: CALL_OW 50
// result := result ^ un ;
21202: LD_ADDR_VAR 0 7
21206: PUSH
21207: LD_VAR 0 7
21211: PUSH
21212: LD_VAR 0 14
21216: ADD
21217: ST_TO_ADDR
// end ;
21218: GO 21096
21220: POP
21221: POP
// end ; end ;
21222: LD_VAR 0 7
21226: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21227: LD_INT 0
21229: PPUSH
21230: PPUSH
21231: PPUSH
21232: PPUSH
21233: PPUSH
21234: PPUSH
21235: PPUSH
21236: PPUSH
21237: PPUSH
21238: PPUSH
21239: PPUSH
21240: PPUSH
21241: PPUSH
21242: PPUSH
21243: PPUSH
21244: PPUSH
// result := false ;
21245: LD_ADDR_VAR 0 3
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21253: LD_VAR 0 1
21257: NOT
21258: IFTRUE 21283
21260: PUSH
21261: LD_VAR 0 1
21265: PPUSH
21266: CALL_OW 266
21270: PUSH
21271: LD_INT 32
21273: PUSH
21274: LD_INT 33
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: IN
21281: NOT
21282: OR
21283: IFFALSE 21287
// exit ;
21285: GO 22422
// nat := GetNation ( tower ) ;
21287: LD_ADDR_VAR 0 12
21291: PUSH
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL_OW 248
21301: ST_TO_ADDR
// side := GetSide ( tower ) ;
21302: LD_ADDR_VAR 0 16
21306: PUSH
21307: LD_VAR 0 1
21311: PPUSH
21312: CALL_OW 255
21316: ST_TO_ADDR
// x := GetX ( tower ) ;
21317: LD_ADDR_VAR 0 10
21321: PUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 250
21331: ST_TO_ADDR
// y := GetY ( tower ) ;
21332: LD_ADDR_VAR 0 11
21336: PUSH
21337: LD_VAR 0 1
21341: PPUSH
21342: CALL_OW 251
21346: ST_TO_ADDR
// if not x or not y then
21347: LD_VAR 0 10
21351: NOT
21352: IFTRUE 21361
21354: PUSH
21355: LD_VAR 0 11
21359: NOT
21360: OR
21361: IFFALSE 21365
// exit ;
21363: GO 22422
// weapon := 0 ;
21365: LD_ADDR_VAR 0 18
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// fac_list := [ ] ;
21373: LD_ADDR_VAR 0 17
21377: PUSH
21378: EMPTY
21379: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21380: LD_ADDR_VAR 0 6
21384: PUSH
21385: LD_VAR 0 1
21389: PPUSH
21390: CALL_OW 274
21394: PPUSH
21395: LD_VAR 0 2
21399: PPUSH
21400: LD_INT 0
21402: PPUSH
21403: CALL 18957 0 3
21407: PPUSH
21408: LD_INT 30
21410: PUSH
21411: LD_INT 3
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PPUSH
21418: CALL_OW 72
21422: ST_TO_ADDR
// if not factories then
21423: LD_VAR 0 6
21427: NOT
21428: IFFALSE 21432
// exit ;
21430: GO 22422
// for i in factories do
21432: LD_ADDR_VAR 0 8
21436: PUSH
21437: LD_VAR 0 6
21441: PUSH
21442: FOR_IN
21443: IFFALSE 21468
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21445: LD_ADDR_VAR 0 17
21449: PUSH
21450: LD_VAR 0 17
21454: PUSH
21455: LD_VAR 0 8
21459: PPUSH
21460: CALL_OW 478
21464: UNION
21465: ST_TO_ADDR
21466: GO 21442
21468: POP
21469: POP
// if not fac_list then
21470: LD_VAR 0 17
21474: NOT
21475: IFFALSE 21479
// exit ;
21477: GO 22422
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21479: LD_ADDR_VAR 0 5
21483: PUSH
21484: LD_INT 4
21486: PUSH
21487: LD_INT 5
21489: PUSH
21490: LD_INT 9
21492: PUSH
21493: LD_INT 10
21495: PUSH
21496: LD_INT 6
21498: PUSH
21499: LD_INT 7
21501: PUSH
21502: LD_INT 11
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 27
21516: PUSH
21517: LD_INT 28
21519: PUSH
21520: LD_INT 26
21522: PUSH
21523: LD_INT 30
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 43
21534: PUSH
21535: LD_INT 44
21537: PUSH
21538: LD_INT 46
21540: PUSH
21541: LD_INT 45
21543: PUSH
21544: LD_INT 47
21546: PUSH
21547: LD_INT 49
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: LIST
21562: PUSH
21563: LD_VAR 0 12
21567: ARRAY
21568: ST_TO_ADDR
// list := list isect fac_list ;
21569: LD_ADDR_VAR 0 5
21573: PUSH
21574: LD_VAR 0 5
21578: PUSH
21579: LD_VAR 0 17
21583: ISECT
21584: ST_TO_ADDR
// if not list then
21585: LD_VAR 0 5
21589: NOT
21590: IFFALSE 21594
// exit ;
21592: GO 22422
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21594: LD_VAR 0 12
21598: PUSH
21599: LD_INT 3
21601: EQUAL
21602: IFFALSE 21614
21604: PUSH
21605: LD_INT 49
21607: PUSH
21608: LD_VAR 0 5
21612: IN
21613: AND
21614: IFFALSE 21634
21616: PUSH
21617: LD_INT 31
21619: PPUSH
21620: LD_VAR 0 16
21624: PPUSH
21625: CALL_OW 321
21629: PUSH
21630: LD_INT 2
21632: EQUAL
21633: AND
21634: IFFALSE 21694
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21636: LD_INT 22
21638: PUSH
21639: LD_VAR 0 16
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 35
21650: PUSH
21651: LD_INT 49
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 91
21660: PUSH
21661: LD_VAR 0 1
21665: PUSH
21666: LD_INT 10
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: PPUSH
21679: CALL_OW 69
21683: NOT
21684: IFFALSE 21694
// weapon := ru_time_lapser ;
21686: LD_ADDR_VAR 0 18
21690: PUSH
21691: LD_INT 49
21693: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21694: LD_VAR 0 12
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: LD_INT 2
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: IN
21709: IFFALSE 21733
21711: PUSH
21712: LD_INT 11
21714: PUSH
21715: LD_VAR 0 5
21719: IN
21720: IFTRUE 21732
21722: PUSH
21723: LD_INT 30
21725: PUSH
21726: LD_VAR 0 5
21730: IN
21731: OR
21732: AND
21733: IFFALSE 21753
21735: PUSH
21736: LD_INT 6
21738: PPUSH
21739: LD_VAR 0 16
21743: PPUSH
21744: CALL_OW 321
21748: PUSH
21749: LD_INT 2
21751: EQUAL
21752: AND
21753: IFFALSE 21920
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21755: LD_INT 22
21757: PUSH
21758: LD_VAR 0 16
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 2
21769: PUSH
21770: LD_INT 35
21772: PUSH
21773: LD_INT 11
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 35
21782: PUSH
21783: LD_INT 30
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 91
21797: PUSH
21798: LD_VAR 0 1
21802: PUSH
21803: LD_INT 18
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: LIST
21815: PPUSH
21816: CALL_OW 69
21820: NOT
21821: IFFALSE 21897
21823: PUSH
21824: LD_INT 22
21826: PUSH
21827: LD_VAR 0 16
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: PUSH
21839: LD_INT 30
21841: PUSH
21842: LD_INT 32
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 30
21851: PUSH
21852: LD_INT 33
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 91
21866: PUSH
21867: LD_VAR 0 1
21871: PUSH
21872: LD_INT 12
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: LIST
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: PPUSH
21888: CALL_OW 69
21892: PUSH
21893: LD_INT 2
21895: GREATER
21896: AND
21897: IFFALSE 21920
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21899: LD_ADDR_VAR 0 18
21903: PUSH
21904: LD_INT 11
21906: PUSH
21907: LD_INT 30
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_VAR 0 12
21918: ARRAY
21919: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21920: LD_VAR 0 18
21924: NOT
21925: IFFALSE 21945
21927: PUSH
21928: LD_INT 40
21930: PPUSH
21931: LD_VAR 0 16
21935: PPUSH
21936: CALL_OW 321
21940: PUSH
21941: LD_INT 2
21943: EQUAL
21944: AND
21945: IFFALSE 21981
21947: PUSH
21948: LD_INT 7
21950: PUSH
21951: LD_VAR 0 5
21955: IN
21956: IFTRUE 21968
21958: PUSH
21959: LD_INT 28
21961: PUSH
21962: LD_VAR 0 5
21966: IN
21967: OR
21968: IFTRUE 21980
21970: PUSH
21971: LD_INT 45
21973: PUSH
21974: LD_VAR 0 5
21978: IN
21979: OR
21980: AND
21981: IFFALSE 22235
// begin hex := GetHexInfo ( x , y ) ;
21983: LD_ADDR_VAR 0 4
21987: PUSH
21988: LD_VAR 0 10
21992: PPUSH
21993: LD_VAR 0 11
21997: PPUSH
21998: CALL_OW 546
22002: ST_TO_ADDR
// if hex [ 1 ] then
22003: LD_VAR 0 4
22007: PUSH
22008: LD_INT 1
22010: ARRAY
22011: IFFALSE 22015
// exit ;
22013: GO 22422
// height := hex [ 2 ] ;
22015: LD_ADDR_VAR 0 15
22019: PUSH
22020: LD_VAR 0 4
22024: PUSH
22025: LD_INT 2
22027: ARRAY
22028: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22029: LD_ADDR_VAR 0 14
22033: PUSH
22034: LD_INT 0
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 5
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: ST_TO_ADDR
// for i in tmp do
22052: LD_ADDR_VAR 0 8
22056: PUSH
22057: LD_VAR 0 14
22061: PUSH
22062: FOR_IN
22063: IFFALSE 22233
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22065: LD_ADDR_VAR 0 9
22069: PUSH
22070: LD_VAR 0 10
22074: PPUSH
22075: LD_VAR 0 8
22079: PPUSH
22080: LD_INT 5
22082: PPUSH
22083: CALL_OW 272
22087: PUSH
22088: LD_VAR 0 11
22092: PPUSH
22093: LD_VAR 0 8
22097: PPUSH
22098: LD_INT 5
22100: PPUSH
22101: CALL_OW 273
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22110: LD_VAR 0 9
22114: PUSH
22115: LD_INT 1
22117: ARRAY
22118: PPUSH
22119: LD_VAR 0 9
22123: PUSH
22124: LD_INT 2
22126: ARRAY
22127: PPUSH
22128: CALL_OW 488
22132: IFFALSE 22231
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22134: LD_ADDR_VAR 0 4
22138: PUSH
22139: LD_VAR 0 9
22143: PUSH
22144: LD_INT 1
22146: ARRAY
22147: PPUSH
22148: LD_VAR 0 9
22152: PUSH
22153: LD_INT 2
22155: ARRAY
22156: PPUSH
22157: CALL_OW 546
22161: ST_TO_ADDR
// if hex [ 1 ] then
22162: LD_VAR 0 4
22166: PUSH
22167: LD_INT 1
22169: ARRAY
22170: IFFALSE 22174
// continue ;
22172: GO 22062
// h := hex [ 2 ] ;
22174: LD_ADDR_VAR 0 13
22178: PUSH
22179: LD_VAR 0 4
22183: PUSH
22184: LD_INT 2
22186: ARRAY
22187: ST_TO_ADDR
// if h + 7 < height then
22188: LD_VAR 0 13
22192: PUSH
22193: LD_INT 7
22195: PLUS
22196: PUSH
22197: LD_VAR 0 15
22201: LESS
22202: IFFALSE 22231
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22204: LD_ADDR_VAR 0 18
22208: PUSH
22209: LD_INT 7
22211: PUSH
22212: LD_INT 28
22214: PUSH
22215: LD_INT 45
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: PUSH
22223: LD_VAR 0 12
22227: ARRAY
22228: ST_TO_ADDR
// break ;
22229: GO 22233
// end ; end ; end ;
22231: GO 22062
22233: POP
22234: POP
// end ; if not weapon then
22235: LD_VAR 0 18
22239: NOT
22240: IFFALSE 22300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22242: LD_ADDR_VAR 0 5
22246: PUSH
22247: LD_VAR 0 5
22251: PUSH
22252: LD_INT 11
22254: PUSH
22255: LD_INT 30
22257: PUSH
22258: LD_INT 49
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: LIST
22265: DIFF
22266: ST_TO_ADDR
// if not list then
22267: LD_VAR 0 5
22271: NOT
22272: IFFALSE 22276
// exit ;
22274: GO 22422
// weapon := list [ rand ( 1 , list ) ] ;
22276: LD_ADDR_VAR 0 18
22280: PUSH
22281: LD_VAR 0 5
22285: PUSH
22286: LD_INT 1
22288: PPUSH
22289: LD_VAR 0 5
22293: PPUSH
22294: CALL_OW 12
22298: ARRAY
22299: ST_TO_ADDR
// end ; if weapon then
22300: LD_VAR 0 18
22304: IFFALSE 22422
// begin tmp := CostOfWeapon ( weapon ) ;
22306: LD_ADDR_VAR 0 14
22310: PUSH
22311: LD_VAR 0 18
22315: PPUSH
22316: CALL_OW 451
22320: ST_TO_ADDR
// j := GetBase ( tower ) ;
22321: LD_ADDR_VAR 0 9
22325: PUSH
22326: LD_VAR 0 1
22330: PPUSH
22331: CALL_OW 274
22335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22336: LD_VAR 0 9
22340: PPUSH
22341: LD_INT 1
22343: PPUSH
22344: CALL_OW 275
22348: PUSH
22349: LD_VAR 0 14
22353: PUSH
22354: LD_INT 1
22356: ARRAY
22357: GREATEREQUAL
22358: IFFALSE 22384
22360: PUSH
22361: LD_VAR 0 9
22365: PPUSH
22366: LD_INT 2
22368: PPUSH
22369: CALL_OW 275
22373: PUSH
22374: LD_VAR 0 14
22378: PUSH
22379: LD_INT 2
22381: ARRAY
22382: GREATEREQUAL
22383: AND
22384: IFFALSE 22410
22386: PUSH
22387: LD_VAR 0 9
22391: PPUSH
22392: LD_INT 3
22394: PPUSH
22395: CALL_OW 275
22399: PUSH
22400: LD_VAR 0 14
22404: PUSH
22405: LD_INT 3
22407: ARRAY
22408: GREATEREQUAL
22409: AND
22410: IFFALSE 22422
// result := weapon ;
22412: LD_ADDR_VAR 0 3
22416: PUSH
22417: LD_VAR 0 18
22421: ST_TO_ADDR
// end ; end ;
22422: LD_VAR 0 3
22426: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22427: LD_INT 0
22429: PPUSH
22430: PPUSH
// result := true ;
22431: LD_ADDR_VAR 0 3
22435: PUSH
22436: LD_INT 1
22438: ST_TO_ADDR
// if array1 = array2 then
22439: LD_VAR 0 1
22443: PUSH
22444: LD_VAR 0 2
22448: EQUAL
22449: IFFALSE 22509
// begin for i = 1 to array1 do
22451: LD_ADDR_VAR 0 4
22455: PUSH
22456: DOUBLE
22457: LD_INT 1
22459: DEC
22460: ST_TO_ADDR
22461: LD_VAR 0 1
22465: PUSH
22466: FOR_TO
22467: IFFALSE 22505
// if array1 [ i ] <> array2 [ i ] then
22469: LD_VAR 0 1
22473: PUSH
22474: LD_VAR 0 4
22478: ARRAY
22479: PUSH
22480: LD_VAR 0 2
22484: PUSH
22485: LD_VAR 0 4
22489: ARRAY
22490: NONEQUAL
22491: IFFALSE 22503
// begin result := false ;
22493: LD_ADDR_VAR 0 3
22497: PUSH
22498: LD_INT 0
22500: ST_TO_ADDR
// break ;
22501: GO 22505
// end ;
22503: GO 22466
22505: POP
22506: POP
// end else
22507: GO 22517
// result := false ;
22509: LD_ADDR_VAR 0 3
22513: PUSH
22514: LD_INT 0
22516: ST_TO_ADDR
// end ;
22517: LD_VAR 0 3
22521: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22522: LD_INT 0
22524: PPUSH
22525: PPUSH
// if not array1 or not array2 then
22526: LD_VAR 0 1
22530: NOT
22531: IFTRUE 22540
22533: PUSH
22534: LD_VAR 0 2
22538: NOT
22539: OR
22540: IFFALSE 22544
// exit ;
22542: GO 22608
// result := true ;
22544: LD_ADDR_VAR 0 3
22548: PUSH
22549: LD_INT 1
22551: ST_TO_ADDR
// for i = 1 to array1 do
22552: LD_ADDR_VAR 0 4
22556: PUSH
22557: DOUBLE
22558: LD_INT 1
22560: DEC
22561: ST_TO_ADDR
22562: LD_VAR 0 1
22566: PUSH
22567: FOR_TO
22568: IFFALSE 22606
// if array1 [ i ] <> array2 [ i ] then
22570: LD_VAR 0 1
22574: PUSH
22575: LD_VAR 0 4
22579: ARRAY
22580: PUSH
22581: LD_VAR 0 2
22585: PUSH
22586: LD_VAR 0 4
22590: ARRAY
22591: NONEQUAL
22592: IFFALSE 22604
// begin result := false ;
22594: LD_ADDR_VAR 0 3
22598: PUSH
22599: LD_INT 0
22601: ST_TO_ADDR
// break ;
22602: GO 22606
// end ;
22604: GO 22567
22606: POP
22607: POP
// end ;
22608: LD_VAR 0 3
22612: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22613: LD_INT 0
22615: PPUSH
22616: PPUSH
22617: PPUSH
// pom := GetBase ( fac ) ;
22618: LD_ADDR_VAR 0 5
22622: PUSH
22623: LD_VAR 0 1
22627: PPUSH
22628: CALL_OW 274
22632: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22633: LD_ADDR_VAR 0 4
22637: PUSH
22638: LD_VAR 0 2
22642: PUSH
22643: LD_INT 1
22645: ARRAY
22646: PPUSH
22647: LD_VAR 0 2
22651: PUSH
22652: LD_INT 2
22654: ARRAY
22655: PPUSH
22656: LD_VAR 0 2
22660: PUSH
22661: LD_INT 3
22663: ARRAY
22664: PPUSH
22665: LD_VAR 0 2
22669: PUSH
22670: LD_INT 4
22672: ARRAY
22673: PPUSH
22674: CALL_OW 449
22678: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22679: LD_ADDR_VAR 0 3
22683: PUSH
22684: LD_VAR 0 5
22688: PPUSH
22689: LD_INT 1
22691: PPUSH
22692: CALL_OW 275
22696: PUSH
22697: LD_VAR 0 4
22701: PUSH
22702: LD_INT 1
22704: ARRAY
22705: GREATEREQUAL
22706: IFFALSE 22732
22708: PUSH
22709: LD_VAR 0 5
22713: PPUSH
22714: LD_INT 2
22716: PPUSH
22717: CALL_OW 275
22721: PUSH
22722: LD_VAR 0 4
22726: PUSH
22727: LD_INT 2
22729: ARRAY
22730: GREATEREQUAL
22731: AND
22732: IFFALSE 22758
22734: PUSH
22735: LD_VAR 0 5
22739: PPUSH
22740: LD_INT 3
22742: PPUSH
22743: CALL_OW 275
22747: PUSH
22748: LD_VAR 0 4
22752: PUSH
22753: LD_INT 3
22755: ARRAY
22756: GREATEREQUAL
22757: AND
22758: ST_TO_ADDR
// end ;
22759: LD_VAR 0 3
22763: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22764: LD_INT 0
22766: PPUSH
22767: PPUSH
22768: PPUSH
22769: PPUSH
// pom := GetBase ( building ) ;
22770: LD_ADDR_VAR 0 3
22774: PUSH
22775: LD_VAR 0 1
22779: PPUSH
22780: CALL_OW 274
22784: ST_TO_ADDR
// if not pom then
22785: LD_VAR 0 3
22789: NOT
22790: IFFALSE 22794
// exit ;
22792: GO 22968
// btype := GetBType ( building ) ;
22794: LD_ADDR_VAR 0 5
22798: PUSH
22799: LD_VAR 0 1
22803: PPUSH
22804: CALL_OW 266
22808: ST_TO_ADDR
// if btype = b_armoury then
22809: LD_VAR 0 5
22813: PUSH
22814: LD_INT 4
22816: EQUAL
22817: IFFALSE 22827
// btype := b_barracks ;
22819: LD_ADDR_VAR 0 5
22823: PUSH
22824: LD_INT 5
22826: ST_TO_ADDR
// if btype = b_depot then
22827: LD_VAR 0 5
22831: PUSH
22832: LD_INT 0
22834: EQUAL
22835: IFFALSE 22845
// btype := b_warehouse ;
22837: LD_ADDR_VAR 0 5
22841: PUSH
22842: LD_INT 1
22844: ST_TO_ADDR
// if btype = b_workshop then
22845: LD_VAR 0 5
22849: PUSH
22850: LD_INT 2
22852: EQUAL
22853: IFFALSE 22863
// btype := b_factory ;
22855: LD_ADDR_VAR 0 5
22859: PUSH
22860: LD_INT 3
22862: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22863: LD_ADDR_VAR 0 4
22867: PUSH
22868: LD_VAR 0 5
22872: PPUSH
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 248
22882: PPUSH
22883: CALL_OW 450
22887: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22888: LD_ADDR_VAR 0 2
22892: PUSH
22893: LD_VAR 0 3
22897: PPUSH
22898: LD_INT 1
22900: PPUSH
22901: CALL_OW 275
22905: PUSH
22906: LD_VAR 0 4
22910: PUSH
22911: LD_INT 1
22913: ARRAY
22914: GREATEREQUAL
22915: IFFALSE 22941
22917: PUSH
22918: LD_VAR 0 3
22922: PPUSH
22923: LD_INT 2
22925: PPUSH
22926: CALL_OW 275
22930: PUSH
22931: LD_VAR 0 4
22935: PUSH
22936: LD_INT 2
22938: ARRAY
22939: GREATEREQUAL
22940: AND
22941: IFFALSE 22967
22943: PUSH
22944: LD_VAR 0 3
22948: PPUSH
22949: LD_INT 3
22951: PPUSH
22952: CALL_OW 275
22956: PUSH
22957: LD_VAR 0 4
22961: PUSH
22962: LD_INT 3
22964: ARRAY
22965: GREATEREQUAL
22966: AND
22967: ST_TO_ADDR
// end ;
22968: LD_VAR 0 2
22972: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22973: LD_INT 0
22975: PPUSH
22976: PPUSH
22977: PPUSH
// pom := GetBase ( building ) ;
22978: LD_ADDR_VAR 0 4
22982: PUSH
22983: LD_VAR 0 1
22987: PPUSH
22988: CALL_OW 274
22992: ST_TO_ADDR
// if not pom then
22993: LD_VAR 0 4
22997: NOT
22998: IFFALSE 23002
// exit ;
23000: GO 23107
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23002: LD_ADDR_VAR 0 5
23006: PUSH
23007: LD_VAR 0 2
23011: PPUSH
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL_OW 248
23021: PPUSH
23022: CALL_OW 450
23026: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23027: LD_ADDR_VAR 0 3
23031: PUSH
23032: LD_VAR 0 4
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: CALL_OW 275
23044: PUSH
23045: LD_VAR 0 5
23049: PUSH
23050: LD_INT 1
23052: ARRAY
23053: GREATEREQUAL
23054: IFFALSE 23080
23056: PUSH
23057: LD_VAR 0 4
23061: PPUSH
23062: LD_INT 2
23064: PPUSH
23065: CALL_OW 275
23069: PUSH
23070: LD_VAR 0 5
23074: PUSH
23075: LD_INT 2
23077: ARRAY
23078: GREATEREQUAL
23079: AND
23080: IFFALSE 23106
23082: PUSH
23083: LD_VAR 0 4
23087: PPUSH
23088: LD_INT 3
23090: PPUSH
23091: CALL_OW 275
23095: PUSH
23096: LD_VAR 0 5
23100: PUSH
23101: LD_INT 3
23103: ARRAY
23104: GREATEREQUAL
23105: AND
23106: ST_TO_ADDR
// end ;
23107: LD_VAR 0 3
23111: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23112: LD_INT 0
23114: PPUSH
23115: PPUSH
23116: PPUSH
23117: PPUSH
23118: PPUSH
23119: PPUSH
23120: PPUSH
23121: PPUSH
23122: PPUSH
23123: PPUSH
23124: PPUSH
// result := false ;
23125: LD_ADDR_VAR 0 8
23129: PUSH
23130: LD_INT 0
23132: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23133: LD_VAR 0 5
23137: NOT
23138: IFTRUE 23147
23140: PUSH
23141: LD_VAR 0 1
23145: NOT
23146: OR
23147: IFTRUE 23156
23149: PUSH
23150: LD_VAR 0 2
23154: NOT
23155: OR
23156: IFTRUE 23165
23158: PUSH
23159: LD_VAR 0 3
23163: NOT
23164: OR
23165: IFFALSE 23169
// exit ;
23167: GO 23995
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23169: LD_ADDR_VAR 0 14
23173: PUSH
23174: LD_VAR 0 1
23178: PPUSH
23179: LD_VAR 0 2
23183: PPUSH
23184: LD_VAR 0 3
23188: PPUSH
23189: LD_VAR 0 4
23193: PPUSH
23194: LD_VAR 0 5
23198: PUSH
23199: LD_INT 1
23201: ARRAY
23202: PPUSH
23203: CALL_OW 248
23207: PPUSH
23208: LD_INT 0
23210: PPUSH
23211: CALL 25276 0 6
23215: ST_TO_ADDR
// if not hexes then
23216: LD_VAR 0 14
23220: NOT
23221: IFFALSE 23225
// exit ;
23223: GO 23995
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23225: LD_ADDR_VAR 0 17
23229: PUSH
23230: LD_VAR 0 5
23234: PPUSH
23235: LD_INT 22
23237: PUSH
23238: LD_VAR 0 13
23242: PPUSH
23243: CALL_OW 255
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: LD_INT 30
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 30
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PPUSH
23284: CALL_OW 72
23288: ST_TO_ADDR
// for i = 1 to hexes do
23289: LD_ADDR_VAR 0 9
23293: PUSH
23294: DOUBLE
23295: LD_INT 1
23297: DEC
23298: ST_TO_ADDR
23299: LD_VAR 0 14
23303: PUSH
23304: FOR_TO
23305: IFFALSE 23993
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23307: LD_ADDR_VAR 0 13
23311: PUSH
23312: LD_VAR 0 14
23316: PUSH
23317: LD_VAR 0 9
23321: ARRAY
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: LD_VAR 0 14
23331: PUSH
23332: LD_VAR 0 9
23336: ARRAY
23337: PUSH
23338: LD_INT 2
23340: ARRAY
23341: PPUSH
23342: CALL_OW 428
23346: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23347: LD_VAR 0 14
23351: PUSH
23352: LD_VAR 0 9
23356: ARRAY
23357: PUSH
23358: LD_INT 1
23360: ARRAY
23361: PPUSH
23362: LD_VAR 0 14
23366: PUSH
23367: LD_VAR 0 9
23371: ARRAY
23372: PUSH
23373: LD_INT 2
23375: ARRAY
23376: PPUSH
23377: CALL_OW 351
23381: IFTRUE 23420
23383: PUSH
23384: LD_VAR 0 14
23388: PUSH
23389: LD_VAR 0 9
23393: ARRAY
23394: PUSH
23395: LD_INT 1
23397: ARRAY
23398: PPUSH
23399: LD_VAR 0 14
23403: PUSH
23404: LD_VAR 0 9
23408: ARRAY
23409: PUSH
23410: LD_INT 2
23412: ARRAY
23413: PPUSH
23414: CALL_OW 488
23418: NOT
23419: OR
23420: IFTRUE 23437
23422: PUSH
23423: LD_VAR 0 13
23427: PPUSH
23428: CALL_OW 247
23432: PUSH
23433: LD_INT 3
23435: EQUAL
23436: OR
23437: IFFALSE 23443
// exit ;
23439: POP
23440: POP
23441: GO 23995
// if not tmp then
23443: LD_VAR 0 13
23447: NOT
23448: IFFALSE 23452
// continue ;
23450: GO 23304
// result := true ;
23452: LD_ADDR_VAR 0 8
23456: PUSH
23457: LD_INT 1
23459: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23460: LD_VAR 0 6
23464: IFFALSE 23481
23466: PUSH
23467: LD_VAR 0 13
23471: PPUSH
23472: CALL_OW 247
23476: PUSH
23477: LD_INT 2
23479: EQUAL
23480: AND
23481: IFFALSE 23498
23483: PUSH
23484: LD_VAR 0 13
23488: PPUSH
23489: CALL_OW 263
23493: PUSH
23494: LD_INT 1
23496: EQUAL
23497: AND
23498: IFFALSE 23662
// begin if IsDrivenBy ( tmp ) then
23500: LD_VAR 0 13
23504: PPUSH
23505: CALL_OW 311
23509: IFFALSE 23513
// continue ;
23511: GO 23304
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23513: LD_VAR 0 6
23517: PPUSH
23518: LD_INT 3
23520: PUSH
23521: LD_INT 60
23523: PUSH
23524: EMPTY
23525: LIST
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: LD_INT 55
23536: PUSH
23537: EMPTY
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PPUSH
23548: CALL_OW 72
23552: IFFALSE 23660
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23554: LD_ADDR_VAR 0 18
23558: PUSH
23559: LD_VAR 0 6
23563: PPUSH
23564: LD_INT 3
23566: PUSH
23567: LD_INT 60
23569: PUSH
23570: EMPTY
23571: LIST
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 3
23579: PUSH
23580: LD_INT 55
23582: PUSH
23583: EMPTY
23584: LIST
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PPUSH
23594: CALL_OW 72
23598: PUSH
23599: LD_INT 1
23601: ARRAY
23602: ST_TO_ADDR
// if IsInUnit ( driver ) then
23603: LD_VAR 0 18
23607: PPUSH
23608: CALL_OW 310
23612: IFFALSE 23623
// ComExit ( driver ) ;
23614: LD_VAR 0 18
23618: PPUSH
23619: CALL 49266 0 1
// AddComEnterUnit ( driver , tmp ) ;
23623: LD_VAR 0 18
23627: PPUSH
23628: LD_VAR 0 13
23632: PPUSH
23633: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23637: LD_VAR 0 18
23641: PPUSH
23642: LD_VAR 0 7
23646: PPUSH
23647: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23651: LD_VAR 0 18
23655: PPUSH
23656: CALL_OW 181
// end ; continue ;
23660: GO 23304
// end ; if not cleaners or not tmp in cleaners then
23662: LD_VAR 0 6
23666: NOT
23667: IFTRUE 23682
23669: PUSH
23670: LD_VAR 0 13
23674: PUSH
23675: LD_VAR 0 6
23679: IN
23680: NOT
23681: OR
23682: IFFALSE 23991
// begin if dep then
23684: LD_VAR 0 17
23688: IFFALSE 23824
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23690: LD_ADDR_VAR 0 16
23694: PUSH
23695: LD_VAR 0 17
23699: PUSH
23700: LD_INT 1
23702: ARRAY
23703: PPUSH
23704: CALL_OW 250
23708: PPUSH
23709: LD_VAR 0 17
23713: PUSH
23714: LD_INT 1
23716: ARRAY
23717: PPUSH
23718: CALL_OW 254
23722: PPUSH
23723: LD_INT 5
23725: PPUSH
23726: CALL_OW 272
23730: PUSH
23731: LD_VAR 0 17
23735: PUSH
23736: LD_INT 1
23738: ARRAY
23739: PPUSH
23740: CALL_OW 251
23744: PPUSH
23745: LD_VAR 0 17
23749: PUSH
23750: LD_INT 1
23752: ARRAY
23753: PPUSH
23754: CALL_OW 254
23758: PPUSH
23759: LD_INT 5
23761: PPUSH
23762: CALL_OW 273
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23771: LD_VAR 0 16
23775: PUSH
23776: LD_INT 1
23778: ARRAY
23779: PPUSH
23780: LD_VAR 0 16
23784: PUSH
23785: LD_INT 2
23787: ARRAY
23788: PPUSH
23789: CALL_OW 488
23793: IFFALSE 23824
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23795: LD_VAR 0 13
23799: PPUSH
23800: LD_VAR 0 16
23804: PUSH
23805: LD_INT 1
23807: ARRAY
23808: PPUSH
23809: LD_VAR 0 16
23813: PUSH
23814: LD_INT 2
23816: ARRAY
23817: PPUSH
23818: CALL_OW 111
// continue ;
23822: GO 23304
// end ; end ; r := GetDir ( tmp ) ;
23824: LD_ADDR_VAR 0 15
23828: PUSH
23829: LD_VAR 0 13
23833: PPUSH
23834: CALL_OW 254
23838: ST_TO_ADDR
// if r = 5 then
23839: LD_VAR 0 15
23843: PUSH
23844: LD_INT 5
23846: EQUAL
23847: IFFALSE 23857
// r := 0 ;
23849: LD_ADDR_VAR 0 15
23853: PUSH
23854: LD_INT 0
23856: ST_TO_ADDR
// for j = r to 5 do
23857: LD_ADDR_VAR 0 10
23861: PUSH
23862: DOUBLE
23863: LD_VAR 0 15
23867: DEC
23868: ST_TO_ADDR
23869: LD_INT 5
23871: PUSH
23872: FOR_TO
23873: IFFALSE 23989
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23875: LD_ADDR_VAR 0 11
23879: PUSH
23880: LD_VAR 0 13
23884: PPUSH
23885: CALL_OW 250
23889: PPUSH
23890: LD_VAR 0 10
23894: PPUSH
23895: LD_INT 2
23897: PPUSH
23898: CALL_OW 272
23902: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23903: LD_ADDR_VAR 0 12
23907: PUSH
23908: LD_VAR 0 13
23912: PPUSH
23913: CALL_OW 251
23917: PPUSH
23918: LD_VAR 0 10
23922: PPUSH
23923: LD_INT 2
23925: PPUSH
23926: CALL_OW 273
23930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23931: LD_VAR 0 11
23935: PPUSH
23936: LD_VAR 0 12
23940: PPUSH
23941: CALL_OW 488
23945: IFFALSE 23964
23947: PUSH
23948: LD_VAR 0 11
23952: PPUSH
23953: LD_VAR 0 12
23957: PPUSH
23958: CALL_OW 428
23962: NOT
23963: AND
23964: IFFALSE 23987
// begin ComMoveXY ( tmp , _x , _y ) ;
23966: LD_VAR 0 13
23970: PPUSH
23971: LD_VAR 0 11
23975: PPUSH
23976: LD_VAR 0 12
23980: PPUSH
23981: CALL_OW 111
// break ;
23985: GO 23989
// end ; end ;
23987: GO 23872
23989: POP
23990: POP
// end ; end ;
23991: GO 23304
23993: POP
23994: POP
// end ;
23995: LD_VAR 0 8
23999: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24000: LD_INT 0
24002: PPUSH
// result := true ;
24003: LD_ADDR_VAR 0 3
24007: PUSH
24008: LD_INT 1
24010: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24011: LD_VAR 0 2
24015: PUSH
24016: LD_INT 24
24018: DOUBLE
24019: EQUAL
24020: IFTRUE 24030
24022: LD_INT 33
24024: DOUBLE
24025: EQUAL
24026: IFTRUE 24030
24028: GO 24055
24030: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24031: LD_ADDR_VAR 0 3
24035: PUSH
24036: LD_INT 32
24038: PPUSH
24039: LD_VAR 0 1
24043: PPUSH
24044: CALL_OW 321
24048: PUSH
24049: LD_INT 2
24051: EQUAL
24052: ST_TO_ADDR
24053: GO 24371
24055: LD_INT 20
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24088
24063: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24064: LD_ADDR_VAR 0 3
24068: PUSH
24069: LD_INT 6
24071: PPUSH
24072: LD_VAR 0 1
24076: PPUSH
24077: CALL_OW 321
24081: PUSH
24082: LD_INT 2
24084: EQUAL
24085: ST_TO_ADDR
24086: GO 24371
24088: LD_INT 22
24090: DOUBLE
24091: EQUAL
24092: IFTRUE 24102
24094: LD_INT 36
24096: DOUBLE
24097: EQUAL
24098: IFTRUE 24102
24100: GO 24127
24102: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24103: LD_ADDR_VAR 0 3
24107: PUSH
24108: LD_INT 15
24110: PPUSH
24111: LD_VAR 0 1
24115: PPUSH
24116: CALL_OW 321
24120: PUSH
24121: LD_INT 2
24123: EQUAL
24124: ST_TO_ADDR
24125: GO 24371
24127: LD_INT 30
24129: DOUBLE
24130: EQUAL
24131: IFTRUE 24135
24133: GO 24160
24135: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24136: LD_ADDR_VAR 0 3
24140: PUSH
24141: LD_INT 20
24143: PPUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: CALL_OW 321
24153: PUSH
24154: LD_INT 2
24156: EQUAL
24157: ST_TO_ADDR
24158: GO 24371
24160: LD_INT 28
24162: DOUBLE
24163: EQUAL
24164: IFTRUE 24174
24166: LD_INT 21
24168: DOUBLE
24169: EQUAL
24170: IFTRUE 24174
24172: GO 24199
24174: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24175: LD_ADDR_VAR 0 3
24179: PUSH
24180: LD_INT 21
24182: PPUSH
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 321
24192: PUSH
24193: LD_INT 2
24195: EQUAL
24196: ST_TO_ADDR
24197: GO 24371
24199: LD_INT 16
24201: DOUBLE
24202: EQUAL
24203: IFTRUE 24207
24205: GO 24232
24207: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24208: LD_ADDR_VAR 0 3
24212: PUSH
24213: LD_INT 84
24215: PPUSH
24216: LD_VAR 0 1
24220: PPUSH
24221: CALL_OW 321
24225: PUSH
24226: LD_INT 2
24228: EQUAL
24229: ST_TO_ADDR
24230: GO 24371
24232: LD_INT 19
24234: DOUBLE
24235: EQUAL
24236: IFTRUE 24246
24238: LD_INT 23
24240: DOUBLE
24241: EQUAL
24242: IFTRUE 24246
24244: GO 24271
24246: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24247: LD_ADDR_VAR 0 3
24251: PUSH
24252: LD_INT 83
24254: PPUSH
24255: LD_VAR 0 1
24259: PPUSH
24260: CALL_OW 321
24264: PUSH
24265: LD_INT 2
24267: EQUAL
24268: ST_TO_ADDR
24269: GO 24371
24271: LD_INT 17
24273: DOUBLE
24274: EQUAL
24275: IFTRUE 24279
24277: GO 24304
24279: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24280: LD_ADDR_VAR 0 3
24284: PUSH
24285: LD_INT 39
24287: PPUSH
24288: LD_VAR 0 1
24292: PPUSH
24293: CALL_OW 321
24297: PUSH
24298: LD_INT 2
24300: EQUAL
24301: ST_TO_ADDR
24302: GO 24371
24304: LD_INT 18
24306: DOUBLE
24307: EQUAL
24308: IFTRUE 24312
24310: GO 24337
24312: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24313: LD_ADDR_VAR 0 3
24317: PUSH
24318: LD_INT 40
24320: PPUSH
24321: LD_VAR 0 1
24325: PPUSH
24326: CALL_OW 321
24330: PUSH
24331: LD_INT 2
24333: EQUAL
24334: ST_TO_ADDR
24335: GO 24371
24337: LD_INT 27
24339: DOUBLE
24340: EQUAL
24341: IFTRUE 24345
24343: GO 24370
24345: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24346: LD_ADDR_VAR 0 3
24350: PUSH
24351: LD_INT 35
24353: PPUSH
24354: LD_VAR 0 1
24358: PPUSH
24359: CALL_OW 321
24363: PUSH
24364: LD_INT 2
24366: EQUAL
24367: ST_TO_ADDR
24368: GO 24371
24370: POP
// end ;
24371: LD_VAR 0 3
24375: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24376: LD_INT 0
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
24382: PPUSH
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
// result := false ;
24389: LD_ADDR_VAR 0 6
24393: PUSH
24394: LD_INT 0
24396: ST_TO_ADDR
// if btype = b_depot then
24397: LD_VAR 0 2
24401: PUSH
24402: LD_INT 0
24404: EQUAL
24405: IFFALSE 24417
// begin result := true ;
24407: LD_ADDR_VAR 0 6
24411: PUSH
24412: LD_INT 1
24414: ST_TO_ADDR
// exit ;
24415: GO 25271
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24417: LD_VAR 0 1
24421: NOT
24422: IFTRUE 24447
24424: PUSH
24425: LD_VAR 0 1
24429: PPUSH
24430: CALL_OW 266
24434: PUSH
24435: LD_INT 0
24437: PUSH
24438: LD_INT 1
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: IN
24445: NOT
24446: OR
24447: IFTRUE 24456
24449: PUSH
24450: LD_VAR 0 2
24454: NOT
24455: OR
24456: IFTRUE 24492
24458: PUSH
24459: LD_VAR 0 5
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 2
24472: PUSH
24473: LD_INT 3
24475: PUSH
24476: LD_INT 4
24478: PUSH
24479: LD_INT 5
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: IN
24490: NOT
24491: OR
24492: IFTRUE 24511
24494: PUSH
24495: LD_VAR 0 3
24499: PPUSH
24500: LD_VAR 0 4
24504: PPUSH
24505: CALL_OW 488
24509: NOT
24510: OR
24511: IFFALSE 24515
// exit ;
24513: GO 25271
// side := GetSide ( depot ) ;
24515: LD_ADDR_VAR 0 9
24519: PUSH
24520: LD_VAR 0 1
24524: PPUSH
24525: CALL_OW 255
24529: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24530: LD_VAR 0 9
24534: PPUSH
24535: LD_VAR 0 2
24539: PPUSH
24540: CALL 24000 0 2
24544: NOT
24545: IFFALSE 24549
// exit ;
24547: GO 25271
// pom := GetBase ( depot ) ;
24549: LD_ADDR_VAR 0 10
24553: PUSH
24554: LD_VAR 0 1
24558: PPUSH
24559: CALL_OW 274
24563: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24564: LD_ADDR_VAR 0 11
24568: PUSH
24569: LD_VAR 0 2
24573: PPUSH
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 248
24583: PPUSH
24584: CALL_OW 450
24588: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24589: LD_VAR 0 10
24593: PPUSH
24594: LD_INT 1
24596: PPUSH
24597: CALL_OW 275
24601: PUSH
24602: LD_VAR 0 11
24606: PUSH
24607: LD_INT 1
24609: ARRAY
24610: GREATEREQUAL
24611: IFFALSE 24637
24613: PUSH
24614: LD_VAR 0 10
24618: PPUSH
24619: LD_INT 2
24621: PPUSH
24622: CALL_OW 275
24626: PUSH
24627: LD_VAR 0 11
24631: PUSH
24632: LD_INT 2
24634: ARRAY
24635: GREATEREQUAL
24636: AND
24637: IFFALSE 24663
24639: PUSH
24640: LD_VAR 0 10
24644: PPUSH
24645: LD_INT 3
24647: PPUSH
24648: CALL_OW 275
24652: PUSH
24653: LD_VAR 0 11
24657: PUSH
24658: LD_INT 3
24660: ARRAY
24661: GREATEREQUAL
24662: AND
24663: NOT
24664: IFFALSE 24668
// exit ;
24666: GO 25271
// if GetBType ( depot ) = b_depot then
24668: LD_VAR 0 1
24672: PPUSH
24673: CALL_OW 266
24677: PUSH
24678: LD_INT 0
24680: EQUAL
24681: IFFALSE 24693
// dist := 28 else
24683: LD_ADDR_VAR 0 14
24687: PUSH
24688: LD_INT 28
24690: ST_TO_ADDR
24691: GO 24701
// dist := 36 ;
24693: LD_ADDR_VAR 0 14
24697: PUSH
24698: LD_INT 36
24700: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24701: LD_VAR 0 1
24705: PPUSH
24706: LD_VAR 0 3
24710: PPUSH
24711: LD_VAR 0 4
24715: PPUSH
24716: CALL_OW 297
24720: PUSH
24721: LD_VAR 0 14
24725: GREATER
24726: IFFALSE 24730
// exit ;
24728: GO 25271
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24730: LD_ADDR_VAR 0 12
24734: PUSH
24735: LD_VAR 0 2
24739: PPUSH
24740: LD_VAR 0 3
24744: PPUSH
24745: LD_VAR 0 4
24749: PPUSH
24750: LD_VAR 0 5
24754: PPUSH
24755: LD_VAR 0 1
24759: PPUSH
24760: CALL_OW 248
24764: PPUSH
24765: LD_INT 0
24767: PPUSH
24768: CALL 25276 0 6
24772: ST_TO_ADDR
// if not hexes then
24773: LD_VAR 0 12
24777: NOT
24778: IFFALSE 24782
// exit ;
24780: GO 25271
// hex := GetHexInfo ( x , y ) ;
24782: LD_ADDR_VAR 0 15
24786: PUSH
24787: LD_VAR 0 3
24791: PPUSH
24792: LD_VAR 0 4
24796: PPUSH
24797: CALL_OW 546
24801: ST_TO_ADDR
// if hex [ 1 ] then
24802: LD_VAR 0 15
24806: PUSH
24807: LD_INT 1
24809: ARRAY
24810: IFFALSE 24814
// exit ;
24812: GO 25271
// height := hex [ 2 ] ;
24814: LD_ADDR_VAR 0 13
24818: PUSH
24819: LD_VAR 0 15
24823: PUSH
24824: LD_INT 2
24826: ARRAY
24827: ST_TO_ADDR
// for i = 1 to hexes do
24828: LD_ADDR_VAR 0 7
24832: PUSH
24833: DOUBLE
24834: LD_INT 1
24836: DEC
24837: ST_TO_ADDR
24838: LD_VAR 0 12
24842: PUSH
24843: FOR_TO
24844: IFFALSE 25188
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24846: LD_VAR 0 12
24850: PUSH
24851: LD_VAR 0 7
24855: ARRAY
24856: PUSH
24857: LD_INT 1
24859: ARRAY
24860: PPUSH
24861: LD_VAR 0 12
24865: PUSH
24866: LD_VAR 0 7
24870: ARRAY
24871: PUSH
24872: LD_INT 2
24874: ARRAY
24875: PPUSH
24876: CALL_OW 488
24880: NOT
24881: IFTRUE 24923
24883: PUSH
24884: LD_VAR 0 12
24888: PUSH
24889: LD_VAR 0 7
24893: ARRAY
24894: PUSH
24895: LD_INT 1
24897: ARRAY
24898: PPUSH
24899: LD_VAR 0 12
24903: PUSH
24904: LD_VAR 0 7
24908: ARRAY
24909: PUSH
24910: LD_INT 2
24912: ARRAY
24913: PPUSH
24914: CALL_OW 428
24918: PUSH
24919: LD_INT 0
24921: GREATER
24922: OR
24923: IFTRUE 24961
24925: PUSH
24926: LD_VAR 0 12
24930: PUSH
24931: LD_VAR 0 7
24935: ARRAY
24936: PUSH
24937: LD_INT 1
24939: ARRAY
24940: PPUSH
24941: LD_VAR 0 12
24945: PUSH
24946: LD_VAR 0 7
24950: ARRAY
24951: PUSH
24952: LD_INT 2
24954: ARRAY
24955: PPUSH
24956: CALL_OW 351
24960: OR
24961: IFFALSE 24967
// exit ;
24963: POP
24964: POP
24965: GO 25271
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24967: LD_ADDR_VAR 0 8
24971: PUSH
24972: LD_VAR 0 12
24976: PUSH
24977: LD_VAR 0 7
24981: ARRAY
24982: PUSH
24983: LD_INT 1
24985: ARRAY
24986: PPUSH
24987: LD_VAR 0 12
24991: PUSH
24992: LD_VAR 0 7
24996: ARRAY
24997: PUSH
24998: LD_INT 2
25000: ARRAY
25001: PPUSH
25002: CALL_OW 546
25006: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25007: LD_VAR 0 8
25011: PUSH
25012: LD_INT 1
25014: ARRAY
25015: IFTRUE 25037
25017: PUSH
25018: LD_VAR 0 8
25022: PUSH
25023: LD_INT 2
25025: ARRAY
25026: PUSH
25027: LD_VAR 0 13
25031: PUSH
25032: LD_INT 2
25034: PLUS
25035: GREATER
25036: OR
25037: IFTRUE 25059
25039: PUSH
25040: LD_VAR 0 8
25044: PUSH
25045: LD_INT 2
25047: ARRAY
25048: PUSH
25049: LD_VAR 0 13
25053: PUSH
25054: LD_INT 2
25056: MINUS
25057: LESS
25058: OR
25059: IFTRUE 25127
25061: PUSH
25062: LD_VAR 0 8
25066: PUSH
25067: LD_INT 3
25069: ARRAY
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: LD_INT 8
25076: PUSH
25077: LD_INT 9
25079: PUSH
25080: LD_INT 10
25082: PUSH
25083: LD_INT 11
25085: PUSH
25086: LD_INT 12
25088: PUSH
25089: LD_INT 13
25091: PUSH
25092: LD_INT 16
25094: PUSH
25095: LD_INT 17
25097: PUSH
25098: LD_INT 18
25100: PUSH
25101: LD_INT 19
25103: PUSH
25104: LD_INT 20
25106: PUSH
25107: LD_INT 21
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: IN
25125: NOT
25126: OR
25127: IFTRUE 25140
25129: PUSH
25130: LD_VAR 0 8
25134: PUSH
25135: LD_INT 5
25137: ARRAY
25138: NOT
25139: OR
25140: IFTRUE 25180
25142: PUSH
25143: LD_VAR 0 8
25147: PUSH
25148: LD_INT 6
25150: ARRAY
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: LD_INT 7
25160: PUSH
25161: LD_INT 9
25163: PUSH
25164: LD_INT 10
25166: PUSH
25167: LD_INT 11
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: IN
25178: NOT
25179: OR
25180: IFFALSE 25186
// exit ;
25182: POP
25183: POP
25184: GO 25271
// end ;
25186: GO 24843
25188: POP
25189: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25190: LD_VAR 0 9
25194: PPUSH
25195: LD_VAR 0 3
25199: PPUSH
25200: LD_VAR 0 4
25204: PPUSH
25205: LD_INT 20
25207: PPUSH
25208: CALL 17090 0 4
25212: PUSH
25213: LD_INT 4
25215: ARRAY
25216: IFFALSE 25220
// exit ;
25218: GO 25271
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25220: LD_VAR 0 2
25224: PUSH
25225: LD_INT 29
25227: PUSH
25228: LD_INT 30
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: IN
25235: IFFALSE 25259
25237: PUSH
25238: LD_VAR 0 3
25242: PPUSH
25243: LD_VAR 0 4
25247: PPUSH
25248: LD_VAR 0 9
25252: PPUSH
25253: CALL_OW 440
25257: NOT
25258: AND
25259: IFFALSE 25263
// exit ;
25261: GO 25271
// result := true ;
25263: LD_ADDR_VAR 0 6
25267: PUSH
25268: LD_INT 1
25270: ST_TO_ADDR
// end ;
25271: LD_VAR 0 6
25275: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25276: LD_INT 0
25278: PPUSH
25279: PPUSH
25280: PPUSH
25281: PPUSH
25282: PPUSH
25283: PPUSH
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
25288: PPUSH
25289: PPUSH
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
25294: PPUSH
25295: PPUSH
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
25300: PPUSH
25301: PPUSH
25302: PPUSH
25303: PPUSH
25304: PPUSH
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
25328: PPUSH
25329: PPUSH
25330: PPUSH
25331: PPUSH
25332: PPUSH
25333: PPUSH
25334: PPUSH
25335: PPUSH
// result = [ ] ;
25336: LD_ADDR_VAR 0 7
25340: PUSH
25341: EMPTY
25342: ST_TO_ADDR
// temp_list = [ ] ;
25343: LD_ADDR_VAR 0 9
25347: PUSH
25348: EMPTY
25349: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25350: LD_VAR 0 4
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: LD_INT 1
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: LD_INT 3
25366: PUSH
25367: LD_INT 4
25369: PUSH
25370: LD_INT 5
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: IN
25381: NOT
25382: IFTRUE 25425
25384: PUSH
25385: LD_VAR 0 1
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: IN
25400: IFFALSE 25424
25402: PUSH
25403: LD_VAR 0 5
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 2
25413: PUSH
25414: LD_INT 3
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: IN
25422: NOT
25423: AND
25424: OR
25425: IFFALSE 25429
// exit ;
25427: GO 43828
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25429: LD_VAR 0 1
25433: PUSH
25434: LD_INT 6
25436: PUSH
25437: LD_INT 7
25439: PUSH
25440: LD_INT 8
25442: PUSH
25443: LD_INT 13
25445: PUSH
25446: LD_INT 12
25448: PUSH
25449: LD_INT 15
25451: PUSH
25452: LD_INT 11
25454: PUSH
25455: LD_INT 14
25457: PUSH
25458: LD_INT 10
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: IN
25472: IFFALSE 25482
// btype = b_lab ;
25474: LD_ADDR_VAR 0 1
25478: PUSH
25479: LD_INT 6
25481: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25482: LD_VAR 0 6
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: IN
25501: NOT
25502: IFTRUE 25570
25504: PUSH
25505: LD_VAR 0 1
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: LD_INT 2
25518: PUSH
25519: LD_INT 3
25521: PUSH
25522: LD_INT 6
25524: PUSH
25525: LD_INT 36
25527: PUSH
25528: LD_INT 4
25530: PUSH
25531: LD_INT 5
25533: PUSH
25534: LD_INT 31
25536: PUSH
25537: LD_INT 32
25539: PUSH
25540: LD_INT 33
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: IN
25556: NOT
25557: IFFALSE 25569
25559: PUSH
25560: LD_VAR 0 6
25564: PUSH
25565: LD_INT 1
25567: EQUAL
25568: AND
25569: OR
25570: IFTRUE 25602
25572: PUSH
25573: LD_VAR 0 1
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: LD_INT 3
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: IN
25588: NOT
25589: IFFALSE 25601
25591: PUSH
25592: LD_VAR 0 6
25596: PUSH
25597: LD_INT 2
25599: EQUAL
25600: AND
25601: OR
25602: IFFALSE 25612
// mode = 0 ;
25604: LD_ADDR_VAR 0 6
25608: PUSH
25609: LD_INT 0
25611: ST_TO_ADDR
// case mode of 0 :
25612: LD_VAR 0 6
25616: PUSH
25617: LD_INT 0
25619: DOUBLE
25620: EQUAL
25621: IFTRUE 25625
25623: GO 37078
25625: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25626: LD_ADDR_VAR 0 11
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: NEG
25708: PUSH
25709: LD_INT 2
25711: NEG
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 3
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 3
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: NEG
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25819: LD_ADDR_VAR 0 12
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: NEG
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 3
25976: NEG
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 3
25987: NEG
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26015: LD_ADDR_VAR 0 13
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: LD_INT 0
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 1
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: LD_INT 2
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 2
26138: NEG
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 2
26150: NEG
26151: PUSH
26152: LD_INT 2
26154: NEG
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 2
26162: NEG
26163: PUSH
26164: LD_INT 3
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 3
26174: NEG
26175: PUSH
26176: LD_INT 2
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 3
26186: NEG
26187: PUSH
26188: LD_INT 3
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26214: LD_ADDR_VAR 0 14
26218: PUSH
26219: LD_INT 0
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: LD_INT 0
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 1
26283: NEG
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: LD_INT 3
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 3
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: LD_INT 2
26386: NEG
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26410: LD_ADDR_VAR 0 15
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: LD_INT 0
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: NEG
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: NEG
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 2
26544: NEG
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 3
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 3
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26603: LD_ADDR_VAR 0 16
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: LD_INT 2
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 2
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 2
26726: NEG
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 2
26738: NEG
26739: PUSH
26740: LD_INT 2
26742: NEG
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 3
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 3
26760: PUSH
26761: LD_INT 3
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: LD_INT 3
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26796: LD_ADDR_VAR 0 17
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 1
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: LD_INT 2
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 2
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: LD_INT 1
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: LD_INT 0
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 2
26931: PUSH
26932: LD_INT 2
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: LD_INT 2
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 1
26961: NEG
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 2
26972: NEG
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 2
26983: NEG
26984: PUSH
26985: LD_INT 1
26987: NEG
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: LD_INT 2
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27026: LD_ADDR_VAR 0 18
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 0
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: LD_INT 2
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: LD_INT 2
27122: NEG
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: LD_INT 1
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 0
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 2
27202: NEG
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: NEG
27214: PUSH
27215: LD_INT 1
27217: NEG
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 2
27225: NEG
27226: PUSH
27227: LD_INT 2
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27256: LD_ADDR_VAR 0 19
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: LD_INT 2
27341: NEG
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 0
27349: PUSH
27350: LD_INT 2
27352: NEG
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 0
27411: PUSH
27412: LD_INT 2
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 2
27432: NEG
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 2
27443: NEG
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27486: LD_ADDR_VAR 0 20
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 0
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: NEG
27568: PUSH
27569: LD_INT 2
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 2
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 2
27662: NEG
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 2
27685: NEG
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27716: LD_ADDR_VAR 0 21
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 0
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: NEG
27798: PUSH
27799: LD_INT 2
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 2
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 2
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 2
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 0
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 1
27881: NEG
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 2
27892: NEG
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: LD_INT 2
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27946: LD_ADDR_VAR 0 22
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: LD_INT 2
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 0
28039: PUSH
28040: LD_INT 2
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 2
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: LD_INT 2
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 2
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 2
28122: NEG
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 2
28145: NEG
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28176: LD_ADDR_VAR 0 23
28180: PUSH
28181: LD_INT 0
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: NEG
28235: PUSH
28236: LD_INT 0
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 2
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: LD_INT 2
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 2
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 2
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: LD_INT 2
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 0
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 2
28352: NEG
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 2
28375: NEG
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 2
28387: NEG
28388: PUSH
28389: LD_INT 3
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 3
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28456: LD_ADDR_VAR 0 24
28460: PUSH
28461: LD_INT 0
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 2
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 2
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 2
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 2
28581: PUSH
28582: LD_INT 1
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 2
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: LD_INT 2
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 2
28632: NEG
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 2
28643: NEG
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 2
28655: NEG
28656: PUSH
28657: LD_INT 2
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: LD_INT 2
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 3
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 3
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28732: LD_ADDR_VAR 0 25
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: LD_INT 1
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: LD_INT 2
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 2
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 2
28867: PUSH
28868: LD_INT 2
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: LD_INT 2
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: NEG
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 2
28908: NEG
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: NEG
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 2
28931: NEG
28932: PUSH
28933: LD_INT 2
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 3
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 3
28953: PUSH
28954: LD_INT 2
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 2
28963: PUSH
28964: LD_INT 3
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: LD_INT 3
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29006: LD_ADDR_VAR 0 26
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 1
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 2
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: LD_INT 2
29102: NEG
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: LD_INT 2
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: NEG
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 2
29193: NEG
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 2
29205: NEG
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: LD_INT 3
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: LD_INT 3
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29282: LD_ADDR_VAR 0 27
29286: PUSH
29287: LD_INT 0
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: NEG
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: NEG
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: LD_INT 2
29378: NEG
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 2
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 2
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 2
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 2
29458: NEG
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: LD_INT 2
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 2
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 3
29515: NEG
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 3
29527: NEG
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29562: LD_ADDR_VAR 0 28
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: PUSH
29591: LD_INT 0
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 1
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 0
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 1
29631: NEG
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 2
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 1
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 2
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 2
29761: NEG
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 3
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: LD_INT 3
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: NEG
29798: PUSH
29799: LD_INT 1
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 3
29809: NEG
29810: PUSH
29811: LD_INT 2
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29844: LD_ADDR_VAR 0 29
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 0
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 0
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: LD_INT 2
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 2
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: LD_INT 1
29951: NEG
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: LD_INT 2
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: LD_INT 2
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 2
30010: NEG
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 2
30034: NEG
30035: PUSH
30036: LD_INT 3
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 3
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: LD_INT 3
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: NEG
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 3
30088: NEG
30089: PUSH
30090: LD_INT 2
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30123: LD_ADDR_VAR 0 30
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 0
30140: PUSH
30141: LD_INT 1
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 1
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: LD_INT 2
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: LD_INT 2
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 2
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 2
30289: NEG
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 2
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 3
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 3
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 3
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 2
30355: NEG
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30401: LD_ADDR_VAR 0 31
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: LD_INT 1
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 2
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 2
30566: NEG
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 2
30578: NEG
30579: PUSH
30580: LD_INT 2
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 2
30590: NEG
30591: PUSH
30592: LD_INT 3
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 3
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 3
30644: NEG
30645: PUSH
30646: LD_INT 2
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30679: LD_ADDR_VAR 0 32
30683: PUSH
30684: LD_INT 0
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: LD_INT 2
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: LD_INT 2
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 2
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 2
30845: NEG
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: NEG
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: LD_INT 3
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 3
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 3
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 2
30911: NEG
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30957: LD_ADDR_VAR 0 33
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 0
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 0
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 1
31015: NEG
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 1
31026: NEG
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: NEG
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 2
31147: NEG
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 3
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: LD_INT 3
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: LD_INT 2
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 3
31201: NEG
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31236: LD_ADDR_VAR 0 34
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: LD_INT 0
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: NEG
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 1
31305: NEG
31306: PUSH
31307: LD_INT 1
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: LD_INT 2
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: LD_INT 2
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: LD_INT 2
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 2
31403: NEG
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 3
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: NEG
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: NEG
31482: PUSH
31483: LD_INT 1
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31516: LD_ADDR_VAR 0 35
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 2
31607: NEG
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31628: LD_ADDR_VAR 0 36
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31740: LD_ADDR_VAR 0 37
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31852: LD_ADDR_VAR 0 38
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 2
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31964: LD_ADDR_VAR 0 39
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 1
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32076: LD_ADDR_VAR 0 40
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32188: LD_ADDR_VAR 0 41
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 1
32332: NEG
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 2
32378: NEG
32379: PUSH
32380: LD_INT 3
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 3
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 3
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 3
32431: PUSH
32432: LD_INT 3
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 2
32441: PUSH
32442: LD_INT 3
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 3
32473: NEG
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 3
32485: NEG
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 3
32497: NEG
32498: PUSH
32499: LD_INT 3
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32538: LD_ADDR_VAR 0 42
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: LD_INT 3
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: LD_INT 3
32744: NEG
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: LD_INT 3
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 3
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 3
32784: PUSH
32785: LD_INT 3
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 3
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: LD_INT 3
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: LD_INT 3
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 3
32835: NEG
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 3
32847: NEG
32848: PUSH
32849: LD_INT 3
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32888: LD_ADDR_VAR 0 43
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: LD_INT 2
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 2
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: NEG
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 2
33065: NEG
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 3
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: LD_INT 3
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 3
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 3
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 2
33173: NEG
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 3
33184: NEG
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 3
33195: NEG
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33236: LD_ADDR_VAR 0 44
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 0
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: LD_INT 3
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 3
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 3
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 3
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 3
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: LD_INT 3
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 3
33510: NEG
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: LD_INT 2
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 3
33545: NEG
33546: PUSH
33547: LD_INT 3
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33586: LD_ADDR_VAR 0 45
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 2
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 2
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 2
33776: NEG
33777: PUSH
33778: LD_INT 3
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: LD_INT 3
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: LD_INT 2
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 3
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 3
33832: PUSH
33833: LD_INT 3
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 3
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: LD_INT 3
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: LD_INT 2
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 3
33883: NEG
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 3
33895: NEG
33896: PUSH
33897: LD_INT 3
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33936: LD_ADDR_VAR 0 46
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 0
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 2
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 0
34029: PUSH
34030: LD_INT 2
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: LD_INT 1
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 2
34102: NEG
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 3
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 3
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 1
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 3
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 2
34221: NEG
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 3
34232: NEG
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 3
34243: NEG
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34284: LD_ADDR_VAR 0 47
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: LD_INT 2
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: LD_INT 1
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34435: LD_ADDR_VAR 0 48
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: PUSH
34474: LD_INT 1
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 1
34493: NEG
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: LD_INT 2
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: LD_INT 2
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34582: LD_ADDR_VAR 0 49
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 2
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34726: LD_ADDR_VAR 0 50
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: NEG
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34870: LD_ADDR_VAR 0 51
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: NEG
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35017: LD_ADDR_VAR 0 52
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: NEG
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 2
35144: NEG
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35168: LD_ADDR_VAR 0 53
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 2
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 2
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: NEG
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 2
35355: NEG
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35398: LD_ADDR_VAR 0 54
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 1
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: LD_INT 2
35483: NEG
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 2
35494: NEG
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: LD_INT 2
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 2
35574: NEG
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: NEG
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35628: LD_ADDR_VAR 0 55
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 1
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: NEG
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: LD_INT 2
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 2
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: LD_INT 2
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: NEG
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35858: LD_ADDR_VAR 0 56
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: LD_INT 0
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 2
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 2
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36088: LD_ADDR_VAR 0 57
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: LD_INT 2
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 2
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 2
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 2
36275: NEG
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 2
36287: NEG
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36318: LD_ADDR_VAR 0 58
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 2
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: LD_INT 2
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 2
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: LD_INT 1
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 2
36517: NEG
36518: PUSH
36519: LD_INT 2
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36548: LD_ADDR_VAR 0 59
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36636: LD_ADDR_VAR 0 60
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: NEG
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36724: LD_ADDR_VAR 0 61
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36812: LD_ADDR_VAR 0 62
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36900: LD_ADDR_VAR 0 63
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36988: LD_ADDR_VAR 0 64
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: ST_TO_ADDR
// end ; 1 :
37076: GO 42973
37078: LD_INT 1
37080: DOUBLE
37081: EQUAL
37082: IFTRUE 37086
37084: GO 39709
37086: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37087: LD_ADDR_VAR 0 11
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: LD_INT 3
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: LD_INT 3
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: LD_INT 2
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37131: LD_ADDR_VAR 0 12
37135: PUSH
37136: LD_INT 2
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 3
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 3
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37172: LD_ADDR_VAR 0 13
37176: PUSH
37177: LD_INT 3
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: LD_INT 3
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 3
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: LIST
37211: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37212: LD_ADDR_VAR 0 14
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: LD_INT 3
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: LD_INT 3
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37253: LD_ADDR_VAR 0 15
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 3
37271: NEG
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37297: LD_ADDR_VAR 0 16
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PUSH
37306: LD_INT 3
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 3
37316: NEG
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 3
37328: NEG
37329: PUSH
37330: LD_INT 3
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37343: LD_ADDR_VAR 0 17
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: LD_INT 3
37354: NEG
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 3
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37387: LD_ADDR_VAR 0 18
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 3
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 3
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37428: LD_ADDR_VAR 0 19
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 3
37445: PUSH
37446: LD_INT 3
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: PUSH
37456: LD_INT 3
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: LIST
37467: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37468: LD_ADDR_VAR 0 20
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: NEG
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37509: LD_ADDR_VAR 0 21
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 3
37527: NEG
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 3
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37553: LD_ADDR_VAR 0 22
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: LD_INT 3
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 3
37572: NEG
37573: PUSH
37574: LD_INT 2
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 3
37584: NEG
37585: PUSH
37586: LD_INT 3
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37599: LD_ADDR_VAR 0 23
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 3
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: LD_INT 4
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 3
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: LIST
37642: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37643: LD_ADDR_VAR 0 24
37647: PUSH
37648: LD_INT 3
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 3
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 4
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37684: LD_ADDR_VAR 0 25
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: LD_INT 3
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 4
37701: PUSH
37702: LD_INT 3
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 3
37711: PUSH
37712: LD_INT 4
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37724: LD_ADDR_VAR 0 26
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: LD_INT 3
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 4
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: LD_INT 3
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37765: LD_ADDR_VAR 0 27
37769: PUSH
37770: LD_INT 3
37772: NEG
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 3
37783: NEG
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 4
37794: NEG
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37809: LD_ADDR_VAR 0 28
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: LD_INT 3
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 3
37828: NEG
37829: PUSH
37830: LD_INT 4
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 4
37840: NEG
37841: PUSH
37842: LD_INT 3
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37855: LD_ADDR_VAR 0 29
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 3
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: LD_INT 3
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 4
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: LD_INT 4
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 3
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: LD_INT 5
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 5
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 4
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: LD_INT 6
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 6
37979: NEG
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 5
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38010: LD_ADDR_VAR 0 30
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 3
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 3
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 3
38048: PUSH
38049: LD_INT 1
38051: NEG
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 4
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 4
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 4
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 5
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 5
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 5
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 6
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 6
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38153: LD_ADDR_VAR 0 31
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 4
38190: PUSH
38191: LD_INT 3
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 4
38200: PUSH
38201: LD_INT 4
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 3
38210: PUSH
38211: LD_INT 4
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 5
38220: PUSH
38221: LD_INT 4
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 5
38230: PUSH
38231: LD_INT 5
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 4
38240: PUSH
38241: LD_INT 5
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 6
38250: PUSH
38251: LD_INT 5
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 6
38260: PUSH
38261: LD_INT 6
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 5
38270: PUSH
38271: LD_INT 6
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38292: LD_ADDR_VAR 0 32
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 3
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 4
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 4
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: LD_INT 5
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: LD_INT 5
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: LD_INT 4
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: LD_INT 6
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 6
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: LD_INT 5
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38435: LD_ADDR_VAR 0 33
38439: PUSH
38440: LD_INT 2
38442: NEG
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 3
38453: NEG
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 3
38464: NEG
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 4
38487: NEG
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 4
38498: NEG
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 4
38510: NEG
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 5
38521: NEG
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 5
38532: NEG
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 5
38544: NEG
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 6
38555: NEG
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 6
38566: NEG
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38590: LD_ADDR_VAR 0 34
38594: PUSH
38595: LD_INT 2
38597: NEG
38598: PUSH
38599: LD_INT 3
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 3
38609: NEG
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 3
38621: NEG
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 3
38633: NEG
38634: PUSH
38635: LD_INT 4
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 4
38645: NEG
38646: PUSH
38647: LD_INT 3
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 4
38657: NEG
38658: PUSH
38659: LD_INT 4
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 4
38669: NEG
38670: PUSH
38671: LD_INT 5
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 5
38681: NEG
38682: PUSH
38683: LD_INT 4
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 5
38693: NEG
38694: PUSH
38695: LD_INT 5
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 5
38705: NEG
38706: PUSH
38707: LD_INT 6
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 6
38717: NEG
38718: PUSH
38719: LD_INT 5
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 6
38729: NEG
38730: PUSH
38731: LD_INT 6
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38753: LD_ADDR_VAR 0 41
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: LD_INT 2
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: LD_INT 3
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: LD_INT 2
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: LIST
38796: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38797: LD_ADDR_VAR 0 42
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38838: LD_ADDR_VAR 0 43
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: LD_INT 3
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38878: LD_ADDR_VAR 0 44
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 3
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38919: LD_ADDR_VAR 0 45
38923: PUSH
38924: LD_INT 2
38926: NEG
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 2
38937: NEG
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 3
38948: NEG
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38963: LD_ADDR_VAR 0 46
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: NEG
38983: PUSH
38984: LD_INT 3
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 3
38994: NEG
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39009: LD_ADDR_VAR 0 47
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: LD_INT 3
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: LD_INT 3
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39042: LD_ADDR_VAR 0 48
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 2
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39073: LD_ADDR_VAR 0 49
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39102: LD_ADDR_VAR 0 50
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39131: LD_ADDR_VAR 0 51
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39162: LD_ADDR_VAR 0 52
39166: PUSH
39167: LD_INT 3
39169: NEG
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 3
39181: NEG
39182: PUSH
39183: LD_INT 2
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39195: LD_ADDR_VAR 0 53
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 3
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 3
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: LD_INT 2
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39239: LD_ADDR_VAR 0 54
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 3
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 3
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39280: LD_ADDR_VAR 0 55
39284: PUSH
39285: LD_INT 3
39287: PUSH
39288: LD_INT 2
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 3
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: LD_INT 3
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39320: LD_ADDR_VAR 0 56
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 3
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 3
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: LIST
39360: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39361: LD_ADDR_VAR 0 57
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 3
39379: NEG
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 3
39390: NEG
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39405: LD_ADDR_VAR 0 58
39409: PUSH
39410: LD_INT 2
39412: NEG
39413: PUSH
39414: LD_INT 3
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 3
39424: NEG
39425: PUSH
39426: LD_INT 2
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 3
39436: NEG
39437: PUSH
39438: LD_INT 3
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: LIST
39450: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39451: LD_ADDR_VAR 0 59
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39495: LD_ADDR_VAR 0 60
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: LIST
39535: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39536: LD_ADDR_VAR 0 61
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39576: LD_ADDR_VAR 0 62
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: LIST
39616: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39617: LD_ADDR_VAR 0 63
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 2
39635: NEG
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: NEG
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: LIST
39660: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39661: LD_ADDR_VAR 0 64
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: LD_INT 2
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
// end ; 2 :
39707: GO 42973
39709: LD_INT 2
39711: DOUBLE
39712: EQUAL
39713: IFTRUE 39717
39715: GO 42972
39717: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39718: LD_ADDR_VAR 0 29
39722: PUSH
39723: LD_INT 4
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 4
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 5
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 5
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 4
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 3
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 3
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 3
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 5
39808: PUSH
39809: LD_INT 2
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: LD_INT 3
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 3
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 4
39838: PUSH
39839: LD_INT 3
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 4
39848: PUSH
39849: LD_INT 4
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 3
39858: PUSH
39859: LD_INT 4
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 3
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 4
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: LD_INT 4
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 4
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: LD_INT 3
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: PUSH
39929: LD_INT 4
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: LD_INT 5
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 5
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 4
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: LD_INT 5
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: LD_INT 3
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 3
40001: NEG
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 3
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 3
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 4
40057: NEG
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 4
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 4
40080: NEG
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 4
40103: NEG
40104: PUSH
40105: LD_INT 4
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 4
40115: NEG
40116: PUSH
40117: LD_INT 5
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 3
40127: NEG
40128: PUSH
40129: LD_INT 4
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 3
40139: NEG
40140: PUSH
40141: LD_INT 3
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 4
40151: NEG
40152: PUSH
40153: LD_INT 3
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 5
40163: NEG
40164: PUSH
40165: LD_INT 4
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 5
40175: NEG
40176: PUSH
40177: LD_INT 5
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 3
40187: NEG
40188: PUSH
40189: LD_INT 5
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 5
40199: NEG
40200: PUSH
40201: LD_INT 3
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40256: LD_ADDR_VAR 0 30
40260: PUSH
40261: LD_INT 4
40263: PUSH
40264: LD_INT 4
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 4
40273: PUSH
40274: LD_INT 3
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 5
40283: PUSH
40284: LD_INT 4
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 5
40293: PUSH
40294: LD_INT 5
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 4
40303: PUSH
40304: LD_INT 5
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 3
40313: PUSH
40314: LD_INT 4
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 3
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 5
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 3
40343: PUSH
40344: LD_INT 5
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: LD_INT 3
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: LD_INT 2
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: LD_INT 3
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: LD_INT 4
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: LD_INT 4
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: LD_INT 3
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 4
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 4
40446: NEG
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 4
40457: NEG
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: NEG
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 3
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 4
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 5
40502: NEG
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 5
40513: NEG
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 5
40525: NEG
40526: PUSH
40527: LD_INT 2
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 3
40537: NEG
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 3
40548: NEG
40549: PUSH
40550: LD_INT 3
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 3
40560: NEG
40561: PUSH
40562: LD_INT 4
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: LD_INT 3
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 3
40596: NEG
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 4
40608: NEG
40609: PUSH
40610: LD_INT 3
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 4
40620: NEG
40621: PUSH
40622: LD_INT 4
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 2
40632: NEG
40633: PUSH
40634: LD_INT 4
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 4
40644: NEG
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 4
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: LD_INT 5
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 4
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 3
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 3
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: LD_INT 4
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 5
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: PUSH
40736: LD_INT 3
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: LD_INT 5
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40803: LD_ADDR_VAR 0 31
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 4
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: LD_INT 3
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: LD_INT 4
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 1
40840: PUSH
40841: LD_INT 5
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: LD_INT 5
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: LD_INT 4
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: LD_INT 3
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: PUSH
40883: LD_INT 5
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: LD_INT 3
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 3
40903: NEG
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 3
40914: NEG
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 2
40937: NEG
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 3
40948: NEG
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 4
40959: NEG
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 4
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 4
40982: NEG
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 2
40994: NEG
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 4
41005: NEG
41006: PUSH
41007: LD_INT 4
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 4
41017: NEG
41018: PUSH
41019: LD_INT 5
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 3
41029: NEG
41030: PUSH
41031: LD_INT 4
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 4
41053: NEG
41054: PUSH
41055: LD_INT 3
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 5
41065: NEG
41066: PUSH
41067: LD_INT 4
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 5
41077: NEG
41078: PUSH
41079: LD_INT 5
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 3
41089: NEG
41090: PUSH
41091: LD_INT 5
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 5
41101: NEG
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 3
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 4
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 3
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 2
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: LD_INT 3
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 4
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: LD_INT 4
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 4
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 4
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 5
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 5
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 4
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 3
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 3
41287: PUSH
41288: LD_INT 2
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 5
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41353: LD_ADDR_VAR 0 32
41357: PUSH
41358: LD_INT 4
41360: NEG
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 4
41371: NEG
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: NEG
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 3
41394: NEG
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 4
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 5
41416: NEG
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 5
41427: NEG
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 5
41439: NEG
41440: PUSH
41441: LD_INT 2
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 3
41451: NEG
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 3
41462: NEG
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 3
41474: NEG
41475: PUSH
41476: LD_INT 4
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: LD_INT 3
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: LD_INT 2
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 4
41522: NEG
41523: PUSH
41524: LD_INT 3
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 4
41534: NEG
41535: PUSH
41536: LD_INT 4
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: NEG
41547: PUSH
41548: LD_INT 4
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 4
41558: NEG
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 4
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 5
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 4
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 3
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 4
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 5
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 3
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: LD_INT 5
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 3
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 4
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 4
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 3
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 4
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 4
41765: PUSH
41766: LD_INT 4
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 4
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 5
41785: PUSH
41786: LD_INT 4
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 5
41795: PUSH
41796: LD_INT 5
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 4
41805: PUSH
41806: LD_INT 5
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: LD_INT 4
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 3
41825: PUSH
41826: LD_INT 3
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 5
41835: PUSH
41836: LD_INT 3
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: LD_INT 5
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41900: LD_ADDR_VAR 0 33
41904: PUSH
41905: LD_INT 4
41907: NEG
41908: PUSH
41909: LD_INT 4
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 4
41919: NEG
41920: PUSH
41921: LD_INT 5
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 3
41931: NEG
41932: PUSH
41933: LD_INT 4
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 3
41943: NEG
41944: PUSH
41945: LD_INT 3
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 4
41955: NEG
41956: PUSH
41957: LD_INT 3
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 5
41967: NEG
41968: PUSH
41969: LD_INT 4
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 5
41979: NEG
41980: PUSH
41981: LD_INT 5
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: NEG
41992: PUSH
41993: LD_INT 5
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 5
42003: NEG
42004: PUSH
42005: LD_INT 3
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 3
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 4
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: LD_INT 3
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 3
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 4
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: LD_INT 4
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 4
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 4
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 5
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 5
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 4
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 3
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 5
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 3
42210: PUSH
42211: LD_INT 3
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 3
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 4
42230: PUSH
42231: LD_INT 3
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 4
42240: PUSH
42241: LD_INT 4
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 3
42250: PUSH
42251: LD_INT 4
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 4
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: LD_INT 4
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: LD_INT 4
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 3
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 4
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 5
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 5
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: LD_INT 4
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: LD_INT 3
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 5
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42438: LD_ADDR_VAR 0 34
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 4
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 5
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 4
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: LD_INT 3
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 3
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 4
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 5
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: LD_INT 3
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: LD_INT 5
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 3
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 3
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 4
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 4
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 3
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 2
42619: PUSH
42620: LD_INT 2
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 4
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 4
42640: PUSH
42641: LD_INT 4
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 4
42650: PUSH
42651: LD_INT 3
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 5
42660: PUSH
42661: LD_INT 4
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 5
42670: PUSH
42671: LD_INT 5
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: LD_INT 5
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: LD_INT 4
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: LD_INT 3
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 5
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 3
42720: PUSH
42721: LD_INT 5
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 4
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 4
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: LD_INT 3
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: LD_INT 2
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: PUSH
42803: LD_INT 4
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 4
42823: NEG
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 4
42834: NEG
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: NEG
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 3
42857: NEG
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 4
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 5
42879: NEG
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 5
42890: NEG
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 5
42902: NEG
42903: PUSH
42904: LD_INT 2
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 3
42914: NEG
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: ST_TO_ADDR
// end ; end ;
42970: GO 42973
42972: POP
// case btype of b_depot , b_warehouse :
42973: LD_VAR 0 1
42977: PUSH
42978: LD_INT 0
42980: DOUBLE
42981: EQUAL
42982: IFTRUE 42992
42984: LD_INT 1
42986: DOUBLE
42987: EQUAL
42988: IFTRUE 42992
42990: GO 43193
42992: POP
// case nation of nation_american :
42993: LD_VAR 0 5
42997: PUSH
42998: LD_INT 1
43000: DOUBLE
43001: EQUAL
43002: IFTRUE 43006
43004: GO 43062
43006: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43007: LD_ADDR_VAR 0 9
43011: PUSH
43012: LD_VAR 0 11
43016: PUSH
43017: LD_VAR 0 12
43021: PUSH
43022: LD_VAR 0 13
43026: PUSH
43027: LD_VAR 0 14
43031: PUSH
43032: LD_VAR 0 15
43036: PUSH
43037: LD_VAR 0 16
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: PUSH
43050: LD_VAR 0 4
43054: PUSH
43055: LD_INT 1
43057: PLUS
43058: ARRAY
43059: ST_TO_ADDR
43060: GO 43191
43062: LD_INT 2
43064: DOUBLE
43065: EQUAL
43066: IFTRUE 43070
43068: GO 43126
43070: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43071: LD_ADDR_VAR 0 9
43075: PUSH
43076: LD_VAR 0 17
43080: PUSH
43081: LD_VAR 0 18
43085: PUSH
43086: LD_VAR 0 19
43090: PUSH
43091: LD_VAR 0 20
43095: PUSH
43096: LD_VAR 0 21
43100: PUSH
43101: LD_VAR 0 22
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: PUSH
43114: LD_VAR 0 4
43118: PUSH
43119: LD_INT 1
43121: PLUS
43122: ARRAY
43123: ST_TO_ADDR
43124: GO 43191
43126: LD_INT 3
43128: DOUBLE
43129: EQUAL
43130: IFTRUE 43134
43132: GO 43190
43134: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43135: LD_ADDR_VAR 0 9
43139: PUSH
43140: LD_VAR 0 23
43144: PUSH
43145: LD_VAR 0 24
43149: PUSH
43150: LD_VAR 0 25
43154: PUSH
43155: LD_VAR 0 26
43159: PUSH
43160: LD_VAR 0 27
43164: PUSH
43165: LD_VAR 0 28
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: PUSH
43178: LD_VAR 0 4
43182: PUSH
43183: LD_INT 1
43185: PLUS
43186: ARRAY
43187: ST_TO_ADDR
43188: GO 43191
43190: POP
43191: GO 43746
43193: LD_INT 2
43195: DOUBLE
43196: EQUAL
43197: IFTRUE 43207
43199: LD_INT 3
43201: DOUBLE
43202: EQUAL
43203: IFTRUE 43207
43205: GO 43263
43207: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43208: LD_ADDR_VAR 0 9
43212: PUSH
43213: LD_VAR 0 29
43217: PUSH
43218: LD_VAR 0 30
43222: PUSH
43223: LD_VAR 0 31
43227: PUSH
43228: LD_VAR 0 32
43232: PUSH
43233: LD_VAR 0 33
43237: PUSH
43238: LD_VAR 0 34
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: PUSH
43251: LD_VAR 0 4
43255: PUSH
43256: LD_INT 1
43258: PLUS
43259: ARRAY
43260: ST_TO_ADDR
43261: GO 43746
43263: LD_INT 16
43265: DOUBLE
43266: EQUAL
43267: IFTRUE 43325
43269: LD_INT 17
43271: DOUBLE
43272: EQUAL
43273: IFTRUE 43325
43275: LD_INT 18
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43325
43281: LD_INT 19
43283: DOUBLE
43284: EQUAL
43285: IFTRUE 43325
43287: LD_INT 22
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43325
43293: LD_INT 20
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43325
43299: LD_INT 21
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43325
43305: LD_INT 23
43307: DOUBLE
43308: EQUAL
43309: IFTRUE 43325
43311: LD_INT 24
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43325
43317: LD_INT 25
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43325
43323: GO 43381
43325: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43326: LD_ADDR_VAR 0 9
43330: PUSH
43331: LD_VAR 0 35
43335: PUSH
43336: LD_VAR 0 36
43340: PUSH
43341: LD_VAR 0 37
43345: PUSH
43346: LD_VAR 0 38
43350: PUSH
43351: LD_VAR 0 39
43355: PUSH
43356: LD_VAR 0 40
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: PUSH
43369: LD_VAR 0 4
43373: PUSH
43374: LD_INT 1
43376: PLUS
43377: ARRAY
43378: ST_TO_ADDR
43379: GO 43746
43381: LD_INT 6
43383: DOUBLE
43384: EQUAL
43385: IFTRUE 43437
43387: LD_INT 7
43389: DOUBLE
43390: EQUAL
43391: IFTRUE 43437
43393: LD_INT 8
43395: DOUBLE
43396: EQUAL
43397: IFTRUE 43437
43399: LD_INT 13
43401: DOUBLE
43402: EQUAL
43403: IFTRUE 43437
43405: LD_INT 12
43407: DOUBLE
43408: EQUAL
43409: IFTRUE 43437
43411: LD_INT 15
43413: DOUBLE
43414: EQUAL
43415: IFTRUE 43437
43417: LD_INT 11
43419: DOUBLE
43420: EQUAL
43421: IFTRUE 43437
43423: LD_INT 14
43425: DOUBLE
43426: EQUAL
43427: IFTRUE 43437
43429: LD_INT 10
43431: DOUBLE
43432: EQUAL
43433: IFTRUE 43437
43435: GO 43493
43437: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43438: LD_ADDR_VAR 0 9
43442: PUSH
43443: LD_VAR 0 41
43447: PUSH
43448: LD_VAR 0 42
43452: PUSH
43453: LD_VAR 0 43
43457: PUSH
43458: LD_VAR 0 44
43462: PUSH
43463: LD_VAR 0 45
43467: PUSH
43468: LD_VAR 0 46
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: PUSH
43481: LD_VAR 0 4
43485: PUSH
43486: LD_INT 1
43488: PLUS
43489: ARRAY
43490: ST_TO_ADDR
43491: GO 43746
43493: LD_INT 36
43495: DOUBLE
43496: EQUAL
43497: IFTRUE 43501
43499: GO 43557
43501: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43502: LD_ADDR_VAR 0 9
43506: PUSH
43507: LD_VAR 0 47
43511: PUSH
43512: LD_VAR 0 48
43516: PUSH
43517: LD_VAR 0 49
43521: PUSH
43522: LD_VAR 0 50
43526: PUSH
43527: LD_VAR 0 51
43531: PUSH
43532: LD_VAR 0 52
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: PUSH
43545: LD_VAR 0 4
43549: PUSH
43550: LD_INT 1
43552: PLUS
43553: ARRAY
43554: ST_TO_ADDR
43555: GO 43746
43557: LD_INT 4
43559: DOUBLE
43560: EQUAL
43561: IFTRUE 43583
43563: LD_INT 5
43565: DOUBLE
43566: EQUAL
43567: IFTRUE 43583
43569: LD_INT 34
43571: DOUBLE
43572: EQUAL
43573: IFTRUE 43583
43575: LD_INT 37
43577: DOUBLE
43578: EQUAL
43579: IFTRUE 43583
43581: GO 43639
43583: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43584: LD_ADDR_VAR 0 9
43588: PUSH
43589: LD_VAR 0 53
43593: PUSH
43594: LD_VAR 0 54
43598: PUSH
43599: LD_VAR 0 55
43603: PUSH
43604: LD_VAR 0 56
43608: PUSH
43609: LD_VAR 0 57
43613: PUSH
43614: LD_VAR 0 58
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: PUSH
43627: LD_VAR 0 4
43631: PUSH
43632: LD_INT 1
43634: PLUS
43635: ARRAY
43636: ST_TO_ADDR
43637: GO 43746
43639: LD_INT 31
43641: DOUBLE
43642: EQUAL
43643: IFTRUE 43689
43645: LD_INT 32
43647: DOUBLE
43648: EQUAL
43649: IFTRUE 43689
43651: LD_INT 33
43653: DOUBLE
43654: EQUAL
43655: IFTRUE 43689
43657: LD_INT 27
43659: DOUBLE
43660: EQUAL
43661: IFTRUE 43689
43663: LD_INT 26
43665: DOUBLE
43666: EQUAL
43667: IFTRUE 43689
43669: LD_INT 28
43671: DOUBLE
43672: EQUAL
43673: IFTRUE 43689
43675: LD_INT 29
43677: DOUBLE
43678: EQUAL
43679: IFTRUE 43689
43681: LD_INT 30
43683: DOUBLE
43684: EQUAL
43685: IFTRUE 43689
43687: GO 43745
43689: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43690: LD_ADDR_VAR 0 9
43694: PUSH
43695: LD_VAR 0 59
43699: PUSH
43700: LD_VAR 0 60
43704: PUSH
43705: LD_VAR 0 61
43709: PUSH
43710: LD_VAR 0 62
43714: PUSH
43715: LD_VAR 0 63
43719: PUSH
43720: LD_VAR 0 64
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: PUSH
43733: LD_VAR 0 4
43737: PUSH
43738: LD_INT 1
43740: PLUS
43741: ARRAY
43742: ST_TO_ADDR
43743: GO 43746
43745: POP
// temp_list2 = [ ] ;
43746: LD_ADDR_VAR 0 10
43750: PUSH
43751: EMPTY
43752: ST_TO_ADDR
// for i in temp_list do
43753: LD_ADDR_VAR 0 8
43757: PUSH
43758: LD_VAR 0 9
43762: PUSH
43763: FOR_IN
43764: IFFALSE 43816
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43766: LD_ADDR_VAR 0 10
43770: PUSH
43771: LD_VAR 0 10
43775: PUSH
43776: LD_VAR 0 8
43780: PUSH
43781: LD_INT 1
43783: ARRAY
43784: PUSH
43785: LD_VAR 0 2
43789: PLUS
43790: PUSH
43791: LD_VAR 0 8
43795: PUSH
43796: LD_INT 2
43798: ARRAY
43799: PUSH
43800: LD_VAR 0 3
43804: PLUS
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: EMPTY
43811: LIST
43812: ADD
43813: ST_TO_ADDR
43814: GO 43763
43816: POP
43817: POP
// result = temp_list2 ;
43818: LD_ADDR_VAR 0 7
43822: PUSH
43823: LD_VAR 0 10
43827: ST_TO_ADDR
// end ;
43828: LD_VAR 0 7
43832: RET
// export function EnemyInRange ( unit , dist ) ; begin
43833: LD_INT 0
43835: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43836: LD_ADDR_VAR 0 3
43840: PUSH
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 255
43850: PPUSH
43851: LD_VAR 0 1
43855: PPUSH
43856: CALL_OW 250
43860: PPUSH
43861: LD_VAR 0 1
43865: PPUSH
43866: CALL_OW 251
43870: PPUSH
43871: LD_VAR 0 2
43875: PPUSH
43876: CALL 17090 0 4
43880: PUSH
43881: LD_INT 4
43883: ARRAY
43884: ST_TO_ADDR
// end ;
43885: LD_VAR 0 3
43889: RET
// export function PlayerSeeMe ( unit ) ; begin
43890: LD_INT 0
43892: PPUSH
// result := See ( your_side , unit ) ;
43893: LD_ADDR_VAR 0 2
43897: PUSH
43898: LD_OWVAR 2
43902: PPUSH
43903: LD_VAR 0 1
43907: PPUSH
43908: CALL_OW 292
43912: ST_TO_ADDR
// end ;
43913: LD_VAR 0 2
43917: RET
// export function ReverseDir ( unit ) ; begin
43918: LD_INT 0
43920: PPUSH
// if not unit then
43921: LD_VAR 0 1
43925: NOT
43926: IFFALSE 43930
// exit ;
43928: GO 43953
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43930: LD_ADDR_VAR 0 2
43934: PUSH
43935: LD_VAR 0 1
43939: PPUSH
43940: CALL_OW 254
43944: PUSH
43945: LD_INT 3
43947: PLUS
43948: PUSH
43949: LD_INT 6
43951: MOD
43952: ST_TO_ADDR
// end ;
43953: LD_VAR 0 2
43957: RET
// export function ReverseArray ( array ) ; var i ; begin
43958: LD_INT 0
43960: PPUSH
43961: PPUSH
// if not array then
43962: LD_VAR 0 1
43966: NOT
43967: IFFALSE 43971
// exit ;
43969: GO 44026
// result := [ ] ;
43971: LD_ADDR_VAR 0 2
43975: PUSH
43976: EMPTY
43977: ST_TO_ADDR
// for i := array downto 1 do
43978: LD_ADDR_VAR 0 3
43982: PUSH
43983: DOUBLE
43984: LD_VAR 0 1
43988: INC
43989: ST_TO_ADDR
43990: LD_INT 1
43992: PUSH
43993: FOR_DOWNTO
43994: IFFALSE 44024
// result := Join ( result , array [ i ] ) ;
43996: LD_ADDR_VAR 0 2
44000: PUSH
44001: LD_VAR 0 2
44005: PPUSH
44006: LD_VAR 0 1
44010: PUSH
44011: LD_VAR 0 3
44015: ARRAY
44016: PPUSH
44017: CALL 48868 0 2
44021: ST_TO_ADDR
44022: GO 43993
44024: POP
44025: POP
// end ;
44026: LD_VAR 0 2
44030: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44031: LD_INT 0
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
// if not unit or not hexes then
44039: LD_VAR 0 1
44043: NOT
44044: IFTRUE 44053
44046: PUSH
44047: LD_VAR 0 2
44051: NOT
44052: OR
44053: IFFALSE 44057
// exit ;
44055: GO 44180
// dist := 9999 ;
44057: LD_ADDR_VAR 0 5
44061: PUSH
44062: LD_INT 9999
44064: ST_TO_ADDR
// for i = 1 to hexes do
44065: LD_ADDR_VAR 0 4
44069: PUSH
44070: DOUBLE
44071: LD_INT 1
44073: DEC
44074: ST_TO_ADDR
44075: LD_VAR 0 2
44079: PUSH
44080: FOR_TO
44081: IFFALSE 44168
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44083: LD_ADDR_VAR 0 6
44087: PUSH
44088: LD_VAR 0 1
44092: PPUSH
44093: LD_VAR 0 2
44097: PUSH
44098: LD_VAR 0 4
44102: ARRAY
44103: PUSH
44104: LD_INT 1
44106: ARRAY
44107: PPUSH
44108: LD_VAR 0 2
44112: PUSH
44113: LD_VAR 0 4
44117: ARRAY
44118: PUSH
44119: LD_INT 2
44121: ARRAY
44122: PPUSH
44123: CALL_OW 297
44127: ST_TO_ADDR
// if tdist < dist then
44128: LD_VAR 0 6
44132: PUSH
44133: LD_VAR 0 5
44137: LESS
44138: IFFALSE 44166
// begin hex := hexes [ i ] ;
44140: LD_ADDR_VAR 0 8
44144: PUSH
44145: LD_VAR 0 2
44149: PUSH
44150: LD_VAR 0 4
44154: ARRAY
44155: ST_TO_ADDR
// dist := tdist ;
44156: LD_ADDR_VAR 0 5
44160: PUSH
44161: LD_VAR 0 6
44165: ST_TO_ADDR
// end ; end ;
44166: GO 44080
44168: POP
44169: POP
// result := hex ;
44170: LD_ADDR_VAR 0 3
44174: PUSH
44175: LD_VAR 0 8
44179: ST_TO_ADDR
// end ;
44180: LD_VAR 0 3
44184: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44185: LD_INT 0
44187: PPUSH
44188: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44189: LD_VAR 0 1
44193: NOT
44194: IFTRUE 44233
44196: PUSH
44197: LD_VAR 0 1
44201: PUSH
44202: LD_INT 21
44204: PUSH
44205: LD_INT 2
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 23
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PPUSH
44226: CALL_OW 69
44230: IN
44231: NOT
44232: OR
44233: IFFALSE 44237
// exit ;
44235: GO 44284
// for i = 1 to 3 do
44237: LD_ADDR_VAR 0 3
44241: PUSH
44242: DOUBLE
44243: LD_INT 1
44245: DEC
44246: ST_TO_ADDR
44247: LD_INT 3
44249: PUSH
44250: FOR_TO
44251: IFFALSE 44282
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 250
44262: PPUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 251
44272: PPUSH
44273: LD_INT 1
44275: PPUSH
44276: CALL_OW 453
44280: GO 44250
44282: POP
44283: POP
// end ;
44284: LD_VAR 0 2
44288: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44289: LD_INT 0
44291: PPUSH
44292: PPUSH
44293: PPUSH
44294: PPUSH
44295: PPUSH
44296: PPUSH
// if not unit or not enemy_unit then
44297: LD_VAR 0 1
44301: NOT
44302: IFTRUE 44311
44304: PUSH
44305: LD_VAR 0 2
44309: NOT
44310: OR
44311: IFFALSE 44315
// exit ;
44313: GO 44786
// if GetLives ( i ) < 250 then
44315: LD_VAR 0 4
44319: PPUSH
44320: CALL_OW 256
44324: PUSH
44325: LD_INT 250
44327: LESS
44328: IFFALSE 44341
// begin ComAutodestruct ( i ) ;
44330: LD_VAR 0 4
44334: PPUSH
44335: CALL 44185 0 1
// exit ;
44339: GO 44786
// end ; x := GetX ( enemy_unit ) ;
44341: LD_ADDR_VAR 0 7
44345: PUSH
44346: LD_VAR 0 2
44350: PPUSH
44351: CALL_OW 250
44355: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44356: LD_ADDR_VAR 0 8
44360: PUSH
44361: LD_VAR 0 2
44365: PPUSH
44366: CALL_OW 251
44370: ST_TO_ADDR
// if not x or not y then
44371: LD_VAR 0 7
44375: NOT
44376: IFTRUE 44385
44378: PUSH
44379: LD_VAR 0 8
44383: NOT
44384: OR
44385: IFFALSE 44389
// exit ;
44387: GO 44786
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44389: LD_ADDR_VAR 0 6
44393: PUSH
44394: LD_VAR 0 7
44398: PPUSH
44399: LD_INT 0
44401: PPUSH
44402: LD_INT 4
44404: PPUSH
44405: CALL_OW 272
44409: PUSH
44410: LD_VAR 0 8
44414: PPUSH
44415: LD_INT 0
44417: PPUSH
44418: LD_INT 4
44420: PPUSH
44421: CALL_OW 273
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_VAR 0 7
44434: PPUSH
44435: LD_INT 1
44437: PPUSH
44438: LD_INT 4
44440: PPUSH
44441: CALL_OW 272
44445: PUSH
44446: LD_VAR 0 8
44450: PPUSH
44451: LD_INT 1
44453: PPUSH
44454: LD_INT 4
44456: PPUSH
44457: CALL_OW 273
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_VAR 0 7
44470: PPUSH
44471: LD_INT 2
44473: PPUSH
44474: LD_INT 4
44476: PPUSH
44477: CALL_OW 272
44481: PUSH
44482: LD_VAR 0 8
44486: PPUSH
44487: LD_INT 2
44489: PPUSH
44490: LD_INT 4
44492: PPUSH
44493: CALL_OW 273
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_VAR 0 7
44506: PPUSH
44507: LD_INT 3
44509: PPUSH
44510: LD_INT 4
44512: PPUSH
44513: CALL_OW 272
44517: PUSH
44518: LD_VAR 0 8
44522: PPUSH
44523: LD_INT 3
44525: PPUSH
44526: LD_INT 4
44528: PPUSH
44529: CALL_OW 273
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_VAR 0 7
44542: PPUSH
44543: LD_INT 4
44545: PPUSH
44546: LD_INT 4
44548: PPUSH
44549: CALL_OW 272
44553: PUSH
44554: LD_VAR 0 8
44558: PPUSH
44559: LD_INT 4
44561: PPUSH
44562: LD_INT 4
44564: PPUSH
44565: CALL_OW 273
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_VAR 0 7
44578: PPUSH
44579: LD_INT 5
44581: PPUSH
44582: LD_INT 4
44584: PPUSH
44585: CALL_OW 272
44589: PUSH
44590: LD_VAR 0 8
44594: PPUSH
44595: LD_INT 5
44597: PPUSH
44598: LD_INT 4
44600: PPUSH
44601: CALL_OW 273
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: ST_TO_ADDR
// for i = tmp downto 1 do
44618: LD_ADDR_VAR 0 4
44622: PUSH
44623: DOUBLE
44624: LD_VAR 0 6
44628: INC
44629: ST_TO_ADDR
44630: LD_INT 1
44632: PUSH
44633: FOR_DOWNTO
44634: IFFALSE 44737
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44636: LD_VAR 0 6
44640: PUSH
44641: LD_VAR 0 4
44645: ARRAY
44646: PUSH
44647: LD_INT 1
44649: ARRAY
44650: PPUSH
44651: LD_VAR 0 6
44655: PUSH
44656: LD_VAR 0 4
44660: ARRAY
44661: PUSH
44662: LD_INT 2
44664: ARRAY
44665: PPUSH
44666: CALL_OW 488
44670: NOT
44671: IFTRUE 44713
44673: PUSH
44674: LD_VAR 0 6
44678: PUSH
44679: LD_VAR 0 4
44683: ARRAY
44684: PUSH
44685: LD_INT 1
44687: ARRAY
44688: PPUSH
44689: LD_VAR 0 6
44693: PUSH
44694: LD_VAR 0 4
44698: ARRAY
44699: PUSH
44700: LD_INT 2
44702: ARRAY
44703: PPUSH
44704: CALL_OW 428
44708: PUSH
44709: LD_INT 0
44711: NONEQUAL
44712: OR
44713: IFFALSE 44735
// tmp := Delete ( tmp , i ) ;
44715: LD_ADDR_VAR 0 6
44719: PUSH
44720: LD_VAR 0 6
44724: PPUSH
44725: LD_VAR 0 4
44729: PPUSH
44730: CALL_OW 3
44734: ST_TO_ADDR
44735: GO 44633
44737: POP
44738: POP
// j := GetClosestHex ( unit , tmp ) ;
44739: LD_ADDR_VAR 0 5
44743: PUSH
44744: LD_VAR 0 1
44748: PPUSH
44749: LD_VAR 0 6
44753: PPUSH
44754: CALL 44031 0 2
44758: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44759: LD_VAR 0 1
44763: PPUSH
44764: LD_VAR 0 5
44768: PUSH
44769: LD_INT 1
44771: ARRAY
44772: PPUSH
44773: LD_VAR 0 5
44777: PUSH
44778: LD_INT 2
44780: ARRAY
44781: PPUSH
44782: CALL_OW 111
// end ;
44786: LD_VAR 0 3
44790: RET
// export function PrepareApemanSoldier ( ) ; begin
44791: LD_INT 0
44793: PPUSH
// uc_nation := 0 ;
44794: LD_ADDR_OWVAR 21
44798: PUSH
44799: LD_INT 0
44801: ST_TO_ADDR
// hc_sex := sex_male ;
44802: LD_ADDR_OWVAR 27
44806: PUSH
44807: LD_INT 1
44809: ST_TO_ADDR
// hc_name :=  ;
44810: LD_ADDR_OWVAR 26
44814: PUSH
44815: LD_STRING 
44817: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44818: LD_ADDR_OWVAR 28
44822: PUSH
44823: LD_INT 15
44825: ST_TO_ADDR
// hc_gallery :=  ;
44826: LD_ADDR_OWVAR 33
44830: PUSH
44831: LD_STRING 
44833: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44834: LD_ADDR_OWVAR 31
44838: PUSH
44839: LD_INT 0
44841: PPUSH
44842: LD_INT 3
44844: PPUSH
44845: CALL_OW 12
44849: PUSH
44850: LD_INT 0
44852: PPUSH
44853: LD_INT 3
44855: PPUSH
44856: CALL_OW 12
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44873: LD_ADDR_OWVAR 29
44877: PUSH
44878: LD_INT 12
44880: PUSH
44881: LD_INT 12
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// end ;
44888: LD_VAR 0 1
44892: RET
// export function PrepareApemanEngineer ( ) ; begin
44893: LD_INT 0
44895: PPUSH
// uc_nation := 0 ;
44896: LD_ADDR_OWVAR 21
44900: PUSH
44901: LD_INT 0
44903: ST_TO_ADDR
// hc_sex := sex_male ;
44904: LD_ADDR_OWVAR 27
44908: PUSH
44909: LD_INT 1
44911: ST_TO_ADDR
// hc_name :=  ;
44912: LD_ADDR_OWVAR 26
44916: PUSH
44917: LD_STRING 
44919: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44920: LD_ADDR_OWVAR 28
44924: PUSH
44925: LD_INT 16
44927: ST_TO_ADDR
// hc_gallery :=  ;
44928: LD_ADDR_OWVAR 33
44932: PUSH
44933: LD_STRING 
44935: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44936: LD_ADDR_OWVAR 31
44940: PUSH
44941: LD_INT 0
44943: PPUSH
44944: LD_INT 3
44946: PPUSH
44947: CALL_OW 12
44951: PUSH
44952: LD_INT 0
44954: PPUSH
44955: LD_INT 3
44957: PPUSH
44958: CALL_OW 12
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44975: LD_ADDR_OWVAR 29
44979: PUSH
44980: LD_INT 12
44982: PUSH
44983: LD_INT 12
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// end ;
44990: LD_VAR 0 1
44994: RET
// export function PrepareApeman ( agressivity ) ; begin
44995: LD_INT 0
44997: PPUSH
// uc_side := 0 ;
44998: LD_ADDR_OWVAR 20
45002: PUSH
45003: LD_INT 0
45005: ST_TO_ADDR
// uc_nation := 0 ;
45006: LD_ADDR_OWVAR 21
45010: PUSH
45011: LD_INT 0
45013: ST_TO_ADDR
// hc_sex := sex_male ;
45014: LD_ADDR_OWVAR 27
45018: PUSH
45019: LD_INT 1
45021: ST_TO_ADDR
// hc_class := class_apeman ;
45022: LD_ADDR_OWVAR 28
45026: PUSH
45027: LD_INT 12
45029: ST_TO_ADDR
// hc_gallery :=  ;
45030: LD_ADDR_OWVAR 33
45034: PUSH
45035: LD_STRING 
45037: ST_TO_ADDR
// hc_name :=  ;
45038: LD_ADDR_OWVAR 26
45042: PUSH
45043: LD_STRING 
45045: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
45046: LD_ADDR_OWVAR 29
45050: PUSH
45051: LD_INT 12
45053: PUSH
45054: LD_INT 12
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: ST_TO_ADDR
// if agressivity = 0 then
45061: LD_VAR 0 1
45065: PUSH
45066: LD_INT 0
45068: EQUAL
45069: IFFALSE 45081
// hc_agressivity := 0 else
45071: LD_ADDR_OWVAR 35
45075: PUSH
45076: LD_INT 0
45078: ST_TO_ADDR
45079: GO 45102
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45081: LD_ADDR_OWVAR 35
45085: PUSH
45086: LD_VAR 0 1
45090: NEG
45091: PPUSH
45092: LD_VAR 0 1
45096: PPUSH
45097: CALL_OW 12
45101: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45102: LD_ADDR_OWVAR 31
45106: PUSH
45107: LD_INT 0
45109: PPUSH
45110: LD_INT 3
45112: PPUSH
45113: CALL_OW 12
45117: PUSH
45118: LD_INT 0
45120: PPUSH
45121: LD_INT 3
45123: PPUSH
45124: CALL_OW 12
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: ST_TO_ADDR
// end ;
45141: LD_VAR 0 2
45145: RET
// export function PrepareTiger ( agressivity ) ; begin
45146: LD_INT 0
45148: PPUSH
// uc_side := 0 ;
45149: LD_ADDR_OWVAR 20
45153: PUSH
45154: LD_INT 0
45156: ST_TO_ADDR
// uc_nation := 0 ;
45157: LD_ADDR_OWVAR 21
45161: PUSH
45162: LD_INT 0
45164: ST_TO_ADDR
// InitHc ;
45165: CALL_OW 19
// hc_class := class_tiger ;
45169: LD_ADDR_OWVAR 28
45173: PUSH
45174: LD_INT 14
45176: ST_TO_ADDR
// hc_gallery :=  ;
45177: LD_ADDR_OWVAR 33
45181: PUSH
45182: LD_STRING 
45184: ST_TO_ADDR
// hc_name :=  ;
45185: LD_ADDR_OWVAR 26
45189: PUSH
45190: LD_STRING 
45192: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45193: LD_ADDR_OWVAR 35
45197: PUSH
45198: LD_VAR 0 1
45202: NEG
45203: PPUSH
45204: LD_VAR 0 1
45208: PPUSH
45209: CALL_OW 12
45213: ST_TO_ADDR
// end ;
45214: LD_VAR 0 2
45218: RET
// export function PrepareEnchidna ( ) ; begin
45219: LD_INT 0
45221: PPUSH
// uc_side := 0 ;
45222: LD_ADDR_OWVAR 20
45226: PUSH
45227: LD_INT 0
45229: ST_TO_ADDR
// uc_nation := 0 ;
45230: LD_ADDR_OWVAR 21
45234: PUSH
45235: LD_INT 0
45237: ST_TO_ADDR
// InitHc ;
45238: CALL_OW 19
// hc_class := class_baggie ;
45242: LD_ADDR_OWVAR 28
45246: PUSH
45247: LD_INT 13
45249: ST_TO_ADDR
// hc_gallery :=  ;
45250: LD_ADDR_OWVAR 33
45254: PUSH
45255: LD_STRING 
45257: ST_TO_ADDR
// hc_name :=  ;
45258: LD_ADDR_OWVAR 26
45262: PUSH
45263: LD_STRING 
45265: ST_TO_ADDR
// end ;
45266: LD_VAR 0 1
45270: RET
// export function PrepareFrog ( ) ; begin
45271: LD_INT 0
45273: PPUSH
// uc_side := 0 ;
45274: LD_ADDR_OWVAR 20
45278: PUSH
45279: LD_INT 0
45281: ST_TO_ADDR
// uc_nation := 0 ;
45282: LD_ADDR_OWVAR 21
45286: PUSH
45287: LD_INT 0
45289: ST_TO_ADDR
// InitHc ;
45290: CALL_OW 19
// hc_class := class_frog ;
45294: LD_ADDR_OWVAR 28
45298: PUSH
45299: LD_INT 19
45301: ST_TO_ADDR
// hc_gallery :=  ;
45302: LD_ADDR_OWVAR 33
45306: PUSH
45307: LD_STRING 
45309: ST_TO_ADDR
// hc_name :=  ;
45310: LD_ADDR_OWVAR 26
45314: PUSH
45315: LD_STRING 
45317: ST_TO_ADDR
// end ;
45318: LD_VAR 0 1
45322: RET
// export function PrepareFish ( ) ; begin
45323: LD_INT 0
45325: PPUSH
// uc_side := 0 ;
45326: LD_ADDR_OWVAR 20
45330: PUSH
45331: LD_INT 0
45333: ST_TO_ADDR
// uc_nation := 0 ;
45334: LD_ADDR_OWVAR 21
45338: PUSH
45339: LD_INT 0
45341: ST_TO_ADDR
// InitHc ;
45342: CALL_OW 19
// hc_class := class_fish ;
45346: LD_ADDR_OWVAR 28
45350: PUSH
45351: LD_INT 20
45353: ST_TO_ADDR
// hc_gallery :=  ;
45354: LD_ADDR_OWVAR 33
45358: PUSH
45359: LD_STRING 
45361: ST_TO_ADDR
// hc_name :=  ;
45362: LD_ADDR_OWVAR 26
45366: PUSH
45367: LD_STRING 
45369: ST_TO_ADDR
// end ;
45370: LD_VAR 0 1
45374: RET
// export function PrepareBird ( ) ; begin
45375: LD_INT 0
45377: PPUSH
// uc_side := 0 ;
45378: LD_ADDR_OWVAR 20
45382: PUSH
45383: LD_INT 0
45385: ST_TO_ADDR
// uc_nation := 0 ;
45386: LD_ADDR_OWVAR 21
45390: PUSH
45391: LD_INT 0
45393: ST_TO_ADDR
// InitHc ;
45394: CALL_OW 19
// hc_class := class_phororhacos ;
45398: LD_ADDR_OWVAR 28
45402: PUSH
45403: LD_INT 18
45405: ST_TO_ADDR
// hc_gallery :=  ;
45406: LD_ADDR_OWVAR 33
45410: PUSH
45411: LD_STRING 
45413: ST_TO_ADDR
// hc_name :=  ;
45414: LD_ADDR_OWVAR 26
45418: PUSH
45419: LD_STRING 
45421: ST_TO_ADDR
// end ;
45422: LD_VAR 0 1
45426: RET
// export function PrepareHorse ( ) ; begin
45427: LD_INT 0
45429: PPUSH
// uc_side := 0 ;
45430: LD_ADDR_OWVAR 20
45434: PUSH
45435: LD_INT 0
45437: ST_TO_ADDR
// uc_nation := 0 ;
45438: LD_ADDR_OWVAR 21
45442: PUSH
45443: LD_INT 0
45445: ST_TO_ADDR
// InitHc ;
45446: CALL_OW 19
// hc_class := class_horse ;
45450: LD_ADDR_OWVAR 28
45454: PUSH
45455: LD_INT 21
45457: ST_TO_ADDR
// hc_gallery :=  ;
45458: LD_ADDR_OWVAR 33
45462: PUSH
45463: LD_STRING 
45465: ST_TO_ADDR
// hc_name :=  ;
45466: LD_ADDR_OWVAR 26
45470: PUSH
45471: LD_STRING 
45473: ST_TO_ADDR
// end ;
45474: LD_VAR 0 1
45478: RET
// export function PrepareMastodont ( ) ; begin
45479: LD_INT 0
45481: PPUSH
// uc_side := 0 ;
45482: LD_ADDR_OWVAR 20
45486: PUSH
45487: LD_INT 0
45489: ST_TO_ADDR
// uc_nation := 0 ;
45490: LD_ADDR_OWVAR 21
45494: PUSH
45495: LD_INT 0
45497: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45498: LD_ADDR_OWVAR 37
45502: PUSH
45503: LD_INT 31
45505: ST_TO_ADDR
// vc_control := control_rider ;
45506: LD_ADDR_OWVAR 38
45510: PUSH
45511: LD_INT 4
45513: ST_TO_ADDR
// end ;
45514: LD_VAR 0 1
45518: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45519: LD_INT 0
45521: PPUSH
45522: PPUSH
45523: PPUSH
// uc_side = 0 ;
45524: LD_ADDR_OWVAR 20
45528: PUSH
45529: LD_INT 0
45531: ST_TO_ADDR
// uc_nation = 0 ;
45532: LD_ADDR_OWVAR 21
45536: PUSH
45537: LD_INT 0
45539: ST_TO_ADDR
// InitHc_All ( ) ;
45540: CALL_OW 584
// InitVc ;
45544: CALL_OW 20
// if mastodonts then
45548: LD_VAR 0 6
45552: IFFALSE 45619
// for i = 1 to mastodonts do
45554: LD_ADDR_VAR 0 11
45558: PUSH
45559: DOUBLE
45560: LD_INT 1
45562: DEC
45563: ST_TO_ADDR
45564: LD_VAR 0 6
45568: PUSH
45569: FOR_TO
45570: IFFALSE 45617
// begin vc_chassis := 31 ;
45572: LD_ADDR_OWVAR 37
45576: PUSH
45577: LD_INT 31
45579: ST_TO_ADDR
// vc_control := control_rider ;
45580: LD_ADDR_OWVAR 38
45584: PUSH
45585: LD_INT 4
45587: ST_TO_ADDR
// animal := CreateVehicle ;
45588: LD_ADDR_VAR 0 12
45592: PUSH
45593: CALL_OW 45
45597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45598: LD_VAR 0 12
45602: PPUSH
45603: LD_VAR 0 8
45607: PPUSH
45608: LD_INT 0
45610: PPUSH
45611: CALL 47761 0 3
// end ;
45615: GO 45569
45617: POP
45618: POP
// if horses then
45619: LD_VAR 0 5
45623: IFFALSE 45690
// for i = 1 to horses do
45625: LD_ADDR_VAR 0 11
45629: PUSH
45630: DOUBLE
45631: LD_INT 1
45633: DEC
45634: ST_TO_ADDR
45635: LD_VAR 0 5
45639: PUSH
45640: FOR_TO
45641: IFFALSE 45688
// begin hc_class := 21 ;
45643: LD_ADDR_OWVAR 28
45647: PUSH
45648: LD_INT 21
45650: ST_TO_ADDR
// hc_gallery :=  ;
45651: LD_ADDR_OWVAR 33
45655: PUSH
45656: LD_STRING 
45658: ST_TO_ADDR
// animal := CreateHuman ;
45659: LD_ADDR_VAR 0 12
45663: PUSH
45664: CALL_OW 44
45668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45669: LD_VAR 0 12
45673: PPUSH
45674: LD_VAR 0 8
45678: PPUSH
45679: LD_INT 0
45681: PPUSH
45682: CALL 47761 0 3
// end ;
45686: GO 45640
45688: POP
45689: POP
// if birds then
45690: LD_VAR 0 1
45694: IFFALSE 45761
// for i = 1 to birds do
45696: LD_ADDR_VAR 0 11
45700: PUSH
45701: DOUBLE
45702: LD_INT 1
45704: DEC
45705: ST_TO_ADDR
45706: LD_VAR 0 1
45710: PUSH
45711: FOR_TO
45712: IFFALSE 45759
// begin hc_class := 18 ;
45714: LD_ADDR_OWVAR 28
45718: PUSH
45719: LD_INT 18
45721: ST_TO_ADDR
// hc_gallery =  ;
45722: LD_ADDR_OWVAR 33
45726: PUSH
45727: LD_STRING 
45729: ST_TO_ADDR
// animal := CreateHuman ;
45730: LD_ADDR_VAR 0 12
45734: PUSH
45735: CALL_OW 44
45739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45740: LD_VAR 0 12
45744: PPUSH
45745: LD_VAR 0 8
45749: PPUSH
45750: LD_INT 0
45752: PPUSH
45753: CALL 47761 0 3
// end ;
45757: GO 45711
45759: POP
45760: POP
// if tigers then
45761: LD_VAR 0 2
45765: IFFALSE 45849
// for i = 1 to tigers do
45767: LD_ADDR_VAR 0 11
45771: PUSH
45772: DOUBLE
45773: LD_INT 1
45775: DEC
45776: ST_TO_ADDR
45777: LD_VAR 0 2
45781: PUSH
45782: FOR_TO
45783: IFFALSE 45847
// begin hc_class = class_tiger ;
45785: LD_ADDR_OWVAR 28
45789: PUSH
45790: LD_INT 14
45792: ST_TO_ADDR
// hc_gallery =  ;
45793: LD_ADDR_OWVAR 33
45797: PUSH
45798: LD_STRING 
45800: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45801: LD_ADDR_OWVAR 35
45805: PUSH
45806: LD_INT 7
45808: NEG
45809: PPUSH
45810: LD_INT 7
45812: PPUSH
45813: CALL_OW 12
45817: ST_TO_ADDR
// animal := CreateHuman ;
45818: LD_ADDR_VAR 0 12
45822: PUSH
45823: CALL_OW 44
45827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45828: LD_VAR 0 12
45832: PPUSH
45833: LD_VAR 0 8
45837: PPUSH
45838: LD_INT 0
45840: PPUSH
45841: CALL 47761 0 3
// end ;
45845: GO 45782
45847: POP
45848: POP
// if apemans then
45849: LD_VAR 0 3
45853: IFFALSE 45976
// for i = 1 to apemans do
45855: LD_ADDR_VAR 0 11
45859: PUSH
45860: DOUBLE
45861: LD_INT 1
45863: DEC
45864: ST_TO_ADDR
45865: LD_VAR 0 3
45869: PUSH
45870: FOR_TO
45871: IFFALSE 45974
// begin hc_class = class_apeman ;
45873: LD_ADDR_OWVAR 28
45877: PUSH
45878: LD_INT 12
45880: ST_TO_ADDR
// hc_gallery =  ;
45881: LD_ADDR_OWVAR 33
45885: PUSH
45886: LD_STRING 
45888: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45889: LD_ADDR_OWVAR 35
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PPUSH
45898: LD_INT 2
45900: PPUSH
45901: CALL_OW 12
45905: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45906: LD_ADDR_OWVAR 31
45910: PUSH
45911: LD_INT 1
45913: PPUSH
45914: LD_INT 3
45916: PPUSH
45917: CALL_OW 12
45921: PUSH
45922: LD_INT 1
45924: PPUSH
45925: LD_INT 3
45927: PPUSH
45928: CALL_OW 12
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: ST_TO_ADDR
// animal := CreateHuman ;
45945: LD_ADDR_VAR 0 12
45949: PUSH
45950: CALL_OW 44
45954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45955: LD_VAR 0 12
45959: PPUSH
45960: LD_VAR 0 8
45964: PPUSH
45965: LD_INT 0
45967: PPUSH
45968: CALL 47761 0 3
// end ;
45972: GO 45870
45974: POP
45975: POP
// if enchidnas then
45976: LD_VAR 0 4
45980: IFFALSE 46047
// for i = 1 to enchidnas do
45982: LD_ADDR_VAR 0 11
45986: PUSH
45987: DOUBLE
45988: LD_INT 1
45990: DEC
45991: ST_TO_ADDR
45992: LD_VAR 0 4
45996: PUSH
45997: FOR_TO
45998: IFFALSE 46045
// begin hc_class = 13 ;
46000: LD_ADDR_OWVAR 28
46004: PUSH
46005: LD_INT 13
46007: ST_TO_ADDR
// hc_gallery =  ;
46008: LD_ADDR_OWVAR 33
46012: PUSH
46013: LD_STRING 
46015: ST_TO_ADDR
// animal := CreateHuman ;
46016: LD_ADDR_VAR 0 12
46020: PUSH
46021: CALL_OW 44
46025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46026: LD_VAR 0 12
46030: PPUSH
46031: LD_VAR 0 8
46035: PPUSH
46036: LD_INT 0
46038: PPUSH
46039: CALL 47761 0 3
// end ;
46043: GO 45997
46045: POP
46046: POP
// if fishes then
46047: LD_VAR 0 7
46051: IFFALSE 46118
// for i = 1 to fishes do
46053: LD_ADDR_VAR 0 11
46057: PUSH
46058: DOUBLE
46059: LD_INT 1
46061: DEC
46062: ST_TO_ADDR
46063: LD_VAR 0 7
46067: PUSH
46068: FOR_TO
46069: IFFALSE 46116
// begin hc_class = 20 ;
46071: LD_ADDR_OWVAR 28
46075: PUSH
46076: LD_INT 20
46078: ST_TO_ADDR
// hc_gallery =  ;
46079: LD_ADDR_OWVAR 33
46083: PUSH
46084: LD_STRING 
46086: ST_TO_ADDR
// animal := CreateHuman ;
46087: LD_ADDR_VAR 0 12
46091: PUSH
46092: CALL_OW 44
46096: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46097: LD_VAR 0 12
46101: PPUSH
46102: LD_VAR 0 9
46106: PPUSH
46107: LD_INT 0
46109: PPUSH
46110: CALL 47761 0 3
// end ;
46114: GO 46068
46116: POP
46117: POP
// end ;
46118: LD_VAR 0 10
46122: RET
// export function WantHeal ( sci , unit ) ; begin
46123: LD_INT 0
46125: PPUSH
// if GetTaskList ( sci ) > 0 then
46126: LD_VAR 0 1
46130: PPUSH
46131: CALL_OW 437
46135: PUSH
46136: LD_INT 0
46138: GREATER
46139: IFFALSE 46211
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46141: LD_VAR 0 1
46145: PPUSH
46146: CALL_OW 437
46150: PUSH
46151: LD_INT 1
46153: ARRAY
46154: PUSH
46155: LD_INT 1
46157: ARRAY
46158: PUSH
46159: LD_STRING l
46161: EQUAL
46162: IFFALSE 46189
46164: PUSH
46165: LD_VAR 0 1
46169: PPUSH
46170: CALL_OW 437
46174: PUSH
46175: LD_INT 1
46177: ARRAY
46178: PUSH
46179: LD_INT 4
46181: ARRAY
46182: PUSH
46183: LD_VAR 0 2
46187: EQUAL
46188: AND
46189: IFFALSE 46201
// result := true else
46191: LD_ADDR_VAR 0 3
46195: PUSH
46196: LD_INT 1
46198: ST_TO_ADDR
46199: GO 46209
// result := false ;
46201: LD_ADDR_VAR 0 3
46205: PUSH
46206: LD_INT 0
46208: ST_TO_ADDR
// end else
46209: GO 46219
// result := false ;
46211: LD_ADDR_VAR 0 3
46215: PUSH
46216: LD_INT 0
46218: ST_TO_ADDR
// end ;
46219: LD_VAR 0 3
46223: RET
// export function HealTarget ( sci ) ; begin
46224: LD_INT 0
46226: PPUSH
// if not sci then
46227: LD_VAR 0 1
46231: NOT
46232: IFFALSE 46236
// exit ;
46234: GO 46301
// result := 0 ;
46236: LD_ADDR_VAR 0 2
46240: PUSH
46241: LD_INT 0
46243: ST_TO_ADDR
// if GetTaskList ( sci ) then
46244: LD_VAR 0 1
46248: PPUSH
46249: CALL_OW 437
46253: IFFALSE 46301
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46255: LD_VAR 0 1
46259: PPUSH
46260: CALL_OW 437
46264: PUSH
46265: LD_INT 1
46267: ARRAY
46268: PUSH
46269: LD_INT 1
46271: ARRAY
46272: PUSH
46273: LD_STRING l
46275: EQUAL
46276: IFFALSE 46301
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46278: LD_ADDR_VAR 0 2
46282: PUSH
46283: LD_VAR 0 1
46287: PPUSH
46288: CALL_OW 437
46292: PUSH
46293: LD_INT 1
46295: ARRAY
46296: PUSH
46297: LD_INT 4
46299: ARRAY
46300: ST_TO_ADDR
// end ;
46301: LD_VAR 0 2
46305: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46306: LD_INT 0
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
// if not base_units then
46312: LD_VAR 0 1
46316: NOT
46317: IFFALSE 46321
// exit ;
46319: GO 46408
// result := false ;
46321: LD_ADDR_VAR 0 2
46325: PUSH
46326: LD_INT 0
46328: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46329: LD_ADDR_VAR 0 5
46333: PUSH
46334: LD_VAR 0 1
46338: PPUSH
46339: LD_INT 21
46341: PUSH
46342: LD_INT 3
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PPUSH
46349: CALL_OW 72
46353: ST_TO_ADDR
// if not tmp then
46354: LD_VAR 0 5
46358: NOT
46359: IFFALSE 46363
// exit ;
46361: GO 46408
// for i in tmp do
46363: LD_ADDR_VAR 0 3
46367: PUSH
46368: LD_VAR 0 5
46372: PUSH
46373: FOR_IN
46374: IFFALSE 46406
// begin result := EnemyInRange ( i , 22 ) ;
46376: LD_ADDR_VAR 0 2
46380: PUSH
46381: LD_VAR 0 3
46385: PPUSH
46386: LD_INT 22
46388: PPUSH
46389: CALL 43833 0 2
46393: ST_TO_ADDR
// if result then
46394: LD_VAR 0 2
46398: IFFALSE 46404
// exit ;
46400: POP
46401: POP
46402: GO 46408
// end ;
46404: GO 46373
46406: POP
46407: POP
// end ;
46408: LD_VAR 0 2
46412: RET
// export function FilterByTag ( units , tag ) ; begin
46413: LD_INT 0
46415: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46416: LD_ADDR_VAR 0 3
46420: PUSH
46421: LD_VAR 0 1
46425: PPUSH
46426: LD_INT 120
46428: PUSH
46429: LD_VAR 0 2
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PPUSH
46438: CALL_OW 72
46442: ST_TO_ADDR
// end ;
46443: LD_VAR 0 3
46447: RET
// export function IsDriver ( un ) ; begin
46448: LD_INT 0
46450: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46451: LD_ADDR_VAR 0 2
46455: PUSH
46456: LD_VAR 0 1
46460: PUSH
46461: LD_INT 55
46463: PUSH
46464: EMPTY
46465: LIST
46466: PPUSH
46467: CALL_OW 69
46471: IN
46472: ST_TO_ADDR
// end ;
46473: LD_VAR 0 2
46477: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46478: LD_INT 0
46480: PPUSH
46481: PPUSH
// list := [ ] ;
46482: LD_ADDR_VAR 0 5
46486: PUSH
46487: EMPTY
46488: ST_TO_ADDR
// case d of 0 :
46489: LD_VAR 0 3
46493: PUSH
46494: LD_INT 0
46496: DOUBLE
46497: EQUAL
46498: IFTRUE 46502
46500: GO 46635
46502: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46503: LD_ADDR_VAR 0 5
46507: PUSH
46508: LD_VAR 0 1
46512: PUSH
46513: LD_INT 4
46515: MINUS
46516: PUSH
46517: LD_VAR 0 2
46521: PUSH
46522: LD_INT 4
46524: MINUS
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: LIST
46533: PUSH
46534: LD_VAR 0 1
46538: PUSH
46539: LD_INT 3
46541: MINUS
46542: PUSH
46543: LD_VAR 0 2
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: PUSH
46556: LD_VAR 0 1
46560: PUSH
46561: LD_INT 4
46563: PLUS
46564: PUSH
46565: LD_VAR 0 2
46569: PUSH
46570: LD_INT 4
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: PUSH
46578: LD_VAR 0 1
46582: PUSH
46583: LD_INT 3
46585: PLUS
46586: PUSH
46587: LD_VAR 0 2
46591: PUSH
46592: LD_INT 3
46594: PLUS
46595: PUSH
46596: LD_INT 5
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: PUSH
46604: LD_VAR 0 1
46608: PUSH
46609: LD_VAR 0 2
46613: PUSH
46614: LD_INT 4
46616: PLUS
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: ST_TO_ADDR
// end ; 1 :
46633: GO 47333
46635: LD_INT 1
46637: DOUBLE
46638: EQUAL
46639: IFTRUE 46643
46641: GO 46776
46643: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46644: LD_ADDR_VAR 0 5
46648: PUSH
46649: LD_VAR 0 1
46653: PUSH
46654: LD_VAR 0 2
46658: PUSH
46659: LD_INT 4
46661: MINUS
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: PUSH
46671: LD_VAR 0 1
46675: PUSH
46676: LD_INT 3
46678: MINUS
46679: PUSH
46680: LD_VAR 0 2
46684: PUSH
46685: LD_INT 3
46687: MINUS
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: PUSH
46697: LD_VAR 0 1
46701: PUSH
46702: LD_INT 4
46704: MINUS
46705: PUSH
46706: LD_VAR 0 2
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: PUSH
46719: LD_VAR 0 1
46723: PUSH
46724: LD_VAR 0 2
46728: PUSH
46729: LD_INT 3
46731: PLUS
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: PUSH
46741: LD_VAR 0 1
46745: PUSH
46746: LD_INT 4
46748: PLUS
46749: PUSH
46750: LD_VAR 0 2
46754: PUSH
46755: LD_INT 4
46757: PLUS
46758: PUSH
46759: LD_INT 5
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: LIST
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: ST_TO_ADDR
// end ; 2 :
46774: GO 47333
46776: LD_INT 2
46778: DOUBLE
46779: EQUAL
46780: IFTRUE 46784
46782: GO 46913
46784: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46785: LD_ADDR_VAR 0 5
46789: PUSH
46790: LD_VAR 0 1
46794: PUSH
46795: LD_VAR 0 2
46799: PUSH
46800: LD_INT 3
46802: MINUS
46803: PUSH
46804: LD_INT 3
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: LIST
46811: PUSH
46812: LD_VAR 0 1
46816: PUSH
46817: LD_INT 4
46819: PLUS
46820: PUSH
46821: LD_VAR 0 2
46825: PUSH
46826: LD_INT 4
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: PUSH
46834: LD_VAR 0 1
46838: PUSH
46839: LD_VAR 0 2
46843: PUSH
46844: LD_INT 4
46846: PLUS
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: PUSH
46856: LD_VAR 0 1
46860: PUSH
46861: LD_INT 3
46863: MINUS
46864: PUSH
46865: LD_VAR 0 2
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: PUSH
46878: LD_VAR 0 1
46882: PUSH
46883: LD_INT 4
46885: MINUS
46886: PUSH
46887: LD_VAR 0 2
46891: PUSH
46892: LD_INT 4
46894: MINUS
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: ST_TO_ADDR
// end ; 3 :
46911: GO 47333
46913: LD_INT 3
46915: DOUBLE
46916: EQUAL
46917: IFTRUE 46921
46919: GO 47054
46921: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46922: LD_ADDR_VAR 0 5
46926: PUSH
46927: LD_VAR 0 1
46931: PUSH
46932: LD_INT 3
46934: PLUS
46935: PUSH
46936: LD_VAR 0 2
46940: PUSH
46941: LD_INT 4
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: PUSH
46949: LD_VAR 0 1
46953: PUSH
46954: LD_INT 4
46956: PLUS
46957: PUSH
46958: LD_VAR 0 2
46962: PUSH
46963: LD_INT 4
46965: PLUS
46966: PUSH
46967: LD_INT 5
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: LIST
46974: PUSH
46975: LD_VAR 0 1
46979: PUSH
46980: LD_INT 4
46982: MINUS
46983: PUSH
46984: LD_VAR 0 2
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: LIST
46996: PUSH
46997: LD_VAR 0 1
47001: PUSH
47002: LD_VAR 0 2
47006: PUSH
47007: LD_INT 4
47009: MINUS
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: PUSH
47019: LD_VAR 0 1
47023: PUSH
47024: LD_INT 3
47026: MINUS
47027: PUSH
47028: LD_VAR 0 2
47032: PUSH
47033: LD_INT 3
47035: MINUS
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: ST_TO_ADDR
// end ; 4 :
47052: GO 47333
47054: LD_INT 4
47056: DOUBLE
47057: EQUAL
47058: IFTRUE 47062
47060: GO 47195
47062: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47063: LD_ADDR_VAR 0 5
47067: PUSH
47068: LD_VAR 0 1
47072: PUSH
47073: LD_VAR 0 2
47077: PUSH
47078: LD_INT 4
47080: PLUS
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: LIST
47089: PUSH
47090: LD_VAR 0 1
47094: PUSH
47095: LD_INT 3
47097: PLUS
47098: PUSH
47099: LD_VAR 0 2
47103: PUSH
47104: LD_INT 3
47106: PLUS
47107: PUSH
47108: LD_INT 5
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: LIST
47115: PUSH
47116: LD_VAR 0 1
47120: PUSH
47121: LD_INT 4
47123: PLUS
47124: PUSH
47125: LD_VAR 0 2
47129: PUSH
47130: LD_INT 4
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: LIST
47137: PUSH
47138: LD_VAR 0 1
47142: PUSH
47143: LD_VAR 0 2
47147: PUSH
47148: LD_INT 3
47150: MINUS
47151: PUSH
47152: LD_INT 3
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: PUSH
47160: LD_VAR 0 1
47164: PUSH
47165: LD_INT 4
47167: MINUS
47168: PUSH
47169: LD_VAR 0 2
47173: PUSH
47174: LD_INT 4
47176: MINUS
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// end ; 5 :
47193: GO 47333
47195: LD_INT 5
47197: DOUBLE
47198: EQUAL
47199: IFTRUE 47203
47201: GO 47332
47203: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47204: LD_ADDR_VAR 0 5
47208: PUSH
47209: LD_VAR 0 1
47213: PUSH
47214: LD_INT 4
47216: MINUS
47217: PUSH
47218: LD_VAR 0 2
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: PUSH
47231: LD_VAR 0 1
47235: PUSH
47236: LD_VAR 0 2
47240: PUSH
47241: LD_INT 4
47243: MINUS
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: LIST
47252: PUSH
47253: LD_VAR 0 1
47257: PUSH
47258: LD_INT 4
47260: PLUS
47261: PUSH
47262: LD_VAR 0 2
47266: PUSH
47267: LD_INT 4
47269: PLUS
47270: PUSH
47271: LD_INT 5
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: PUSH
47279: LD_VAR 0 1
47283: PUSH
47284: LD_INT 3
47286: PLUS
47287: PUSH
47288: LD_VAR 0 2
47292: PUSH
47293: LD_INT 4
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: PUSH
47301: LD_VAR 0 1
47305: PUSH
47306: LD_VAR 0 2
47310: PUSH
47311: LD_INT 3
47313: PLUS
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: ST_TO_ADDR
// end ; end ;
47330: GO 47333
47332: POP
// result := list ;
47333: LD_ADDR_VAR 0 4
47337: PUSH
47338: LD_VAR 0 5
47342: ST_TO_ADDR
// end ;
47343: LD_VAR 0 4
47347: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47348: LD_INT 0
47350: PPUSH
47351: PPUSH
47352: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47353: LD_VAR 0 1
47357: NOT
47358: IFTRUE 47386
47360: PUSH
47361: LD_VAR 0 2
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: LD_INT 3
47374: PUSH
47375: LD_INT 4
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: IN
47384: NOT
47385: OR
47386: IFFALSE 47390
// exit ;
47388: GO 47473
// tmp := [ ] ;
47390: LD_ADDR_VAR 0 5
47394: PUSH
47395: EMPTY
47396: ST_TO_ADDR
// for i in units do
47397: LD_ADDR_VAR 0 4
47401: PUSH
47402: LD_VAR 0 1
47406: PUSH
47407: FOR_IN
47408: IFFALSE 47442
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47410: LD_ADDR_VAR 0 5
47414: PUSH
47415: LD_VAR 0 5
47419: PPUSH
47420: LD_VAR 0 4
47424: PPUSH
47425: LD_VAR 0 2
47429: PPUSH
47430: CALL_OW 259
47434: PPUSH
47435: CALL 48868 0 2
47439: ST_TO_ADDR
47440: GO 47407
47442: POP
47443: POP
// if not tmp then
47444: LD_VAR 0 5
47448: NOT
47449: IFFALSE 47453
// exit ;
47451: GO 47473
// result := SortListByListDesc ( units , tmp ) ;
47453: LD_ADDR_VAR 0 3
47457: PUSH
47458: LD_VAR 0 1
47462: PPUSH
47463: LD_VAR 0 5
47467: PPUSH
47468: CALL_OW 77
47472: ST_TO_ADDR
// end ;
47473: LD_VAR 0 3
47477: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47478: LD_INT 0
47480: PPUSH
47481: PPUSH
47482: PPUSH
// result := false ;
47483: LD_ADDR_VAR 0 3
47487: PUSH
47488: LD_INT 0
47490: ST_TO_ADDR
// if not building then
47491: LD_VAR 0 2
47495: NOT
47496: IFFALSE 47500
// exit ;
47498: GO 47644
// x := GetX ( building ) ;
47500: LD_ADDR_VAR 0 4
47504: PUSH
47505: LD_VAR 0 2
47509: PPUSH
47510: CALL_OW 250
47514: ST_TO_ADDR
// y := GetY ( building ) ;
47515: LD_ADDR_VAR 0 5
47519: PUSH
47520: LD_VAR 0 2
47524: PPUSH
47525: CALL_OW 251
47529: ST_TO_ADDR
// if not x or not y then
47530: LD_VAR 0 4
47534: NOT
47535: IFTRUE 47544
47537: PUSH
47538: LD_VAR 0 5
47542: NOT
47543: OR
47544: IFFALSE 47548
// exit ;
47546: GO 47644
// if GetTaskList ( unit ) then
47548: LD_VAR 0 1
47552: PPUSH
47553: CALL_OW 437
47557: IFFALSE 47644
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47559: LD_STRING e
47561: PUSH
47562: LD_VAR 0 1
47566: PPUSH
47567: CALL_OW 437
47571: PUSH
47572: LD_INT 1
47574: ARRAY
47575: PUSH
47576: LD_INT 1
47578: ARRAY
47579: EQUAL
47580: IFFALSE 47607
47582: PUSH
47583: LD_VAR 0 4
47587: PUSH
47588: LD_VAR 0 1
47592: PPUSH
47593: CALL_OW 437
47597: PUSH
47598: LD_INT 1
47600: ARRAY
47601: PUSH
47602: LD_INT 2
47604: ARRAY
47605: EQUAL
47606: AND
47607: IFFALSE 47634
47609: PUSH
47610: LD_VAR 0 5
47614: PUSH
47615: LD_VAR 0 1
47619: PPUSH
47620: CALL_OW 437
47624: PUSH
47625: LD_INT 1
47627: ARRAY
47628: PUSH
47629: LD_INT 3
47631: ARRAY
47632: EQUAL
47633: AND
47634: IFFALSE 47644
// result := true end ;
47636: LD_ADDR_VAR 0 3
47640: PUSH
47641: LD_INT 1
47643: ST_TO_ADDR
// end ;
47644: LD_VAR 0 3
47648: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47649: LD_INT 0
47651: PPUSH
// result := false ;
47652: LD_ADDR_VAR 0 4
47656: PUSH
47657: LD_INT 0
47659: ST_TO_ADDR
// if GetTaskList ( unit ) then
47660: LD_VAR 0 1
47664: PPUSH
47665: CALL_OW 437
47669: IFFALSE 47756
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47671: LD_STRING M
47673: PUSH
47674: LD_VAR 0 1
47678: PPUSH
47679: CALL_OW 437
47683: PUSH
47684: LD_INT 1
47686: ARRAY
47687: PUSH
47688: LD_INT 1
47690: ARRAY
47691: EQUAL
47692: IFFALSE 47719
47694: PUSH
47695: LD_VAR 0 2
47699: PUSH
47700: LD_VAR 0 1
47704: PPUSH
47705: CALL_OW 437
47709: PUSH
47710: LD_INT 1
47712: ARRAY
47713: PUSH
47714: LD_INT 2
47716: ARRAY
47717: EQUAL
47718: AND
47719: IFFALSE 47746
47721: PUSH
47722: LD_VAR 0 3
47726: PUSH
47727: LD_VAR 0 1
47731: PPUSH
47732: CALL_OW 437
47736: PUSH
47737: LD_INT 1
47739: ARRAY
47740: PUSH
47741: LD_INT 3
47743: ARRAY
47744: EQUAL
47745: AND
47746: IFFALSE 47756
// result := true ;
47748: LD_ADDR_VAR 0 4
47752: PUSH
47753: LD_INT 1
47755: ST_TO_ADDR
// end ; end ;
47756: LD_VAR 0 4
47760: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47761: LD_INT 0
47763: PPUSH
47764: PPUSH
47765: PPUSH
47766: PPUSH
// if not unit or not area then
47767: LD_VAR 0 1
47771: NOT
47772: IFTRUE 47781
47774: PUSH
47775: LD_VAR 0 2
47779: NOT
47780: OR
47781: IFFALSE 47785
// exit ;
47783: GO 47961
// tmp := AreaToList ( area , i ) ;
47785: LD_ADDR_VAR 0 6
47789: PUSH
47790: LD_VAR 0 2
47794: PPUSH
47795: LD_VAR 0 5
47799: PPUSH
47800: CALL_OW 517
47804: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47805: LD_ADDR_VAR 0 5
47809: PUSH
47810: DOUBLE
47811: LD_INT 1
47813: DEC
47814: ST_TO_ADDR
47815: LD_VAR 0 6
47819: PUSH
47820: LD_INT 1
47822: ARRAY
47823: PUSH
47824: FOR_TO
47825: IFFALSE 47959
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47827: LD_ADDR_VAR 0 7
47831: PUSH
47832: LD_VAR 0 6
47836: PUSH
47837: LD_INT 1
47839: ARRAY
47840: PUSH
47841: LD_VAR 0 5
47845: ARRAY
47846: PUSH
47847: LD_VAR 0 6
47851: PUSH
47852: LD_INT 2
47854: ARRAY
47855: PUSH
47856: LD_VAR 0 5
47860: ARRAY
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47866: LD_INT 92
47868: PUSH
47869: LD_VAR 0 7
47873: PUSH
47874: LD_INT 1
47876: ARRAY
47877: PUSH
47878: LD_VAR 0 7
47882: PUSH
47883: LD_INT 2
47885: ARRAY
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: PPUSH
47896: CALL_OW 69
47900: PUSH
47901: LD_INT 0
47903: EQUAL
47904: IFFALSE 47957
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47906: LD_VAR 0 1
47910: PPUSH
47911: LD_VAR 0 7
47915: PUSH
47916: LD_INT 1
47918: ARRAY
47919: PPUSH
47920: LD_VAR 0 7
47924: PUSH
47925: LD_INT 2
47927: ARRAY
47928: PPUSH
47929: LD_VAR 0 3
47933: PPUSH
47934: CALL_OW 48
// result := IsPlaced ( unit ) ;
47938: LD_ADDR_VAR 0 4
47942: PUSH
47943: LD_VAR 0 1
47947: PPUSH
47948: CALL_OW 305
47952: ST_TO_ADDR
// exit ;
47953: POP
47954: POP
47955: GO 47961
// end ; end ;
47957: GO 47824
47959: POP
47960: POP
// end ;
47961: LD_VAR 0 4
47965: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47966: LD_INT 0
47968: PPUSH
47969: PPUSH
47970: PPUSH
// if not side or side > 8 then
47971: LD_VAR 0 1
47975: NOT
47976: IFTRUE 47988
47978: PUSH
47979: LD_VAR 0 1
47983: PUSH
47984: LD_INT 8
47986: GREATER
47987: OR
47988: IFFALSE 47992
// exit ;
47990: GO 48179
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47992: LD_ADDR_VAR 0 4
47996: PUSH
47997: LD_INT 22
47999: PUSH
48000: LD_VAR 0 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 21
48011: PUSH
48012: LD_INT 3
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PPUSH
48023: CALL_OW 69
48027: ST_TO_ADDR
// if not tmp then
48028: LD_VAR 0 4
48032: NOT
48033: IFFALSE 48037
// exit ;
48035: GO 48179
// enable_addtolog := true ;
48037: LD_ADDR_OWVAR 81
48041: PUSH
48042: LD_INT 1
48044: ST_TO_ADDR
// AddToLog ( [ ) ;
48045: LD_STRING [
48047: PPUSH
48048: CALL_OW 561
// for i in tmp do
48052: LD_ADDR_VAR 0 3
48056: PUSH
48057: LD_VAR 0 4
48061: PUSH
48062: FOR_IN
48063: IFFALSE 48170
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48065: LD_STRING [
48067: PUSH
48068: LD_VAR 0 3
48072: PPUSH
48073: CALL_OW 266
48077: STR
48078: PUSH
48079: LD_STRING , 
48081: STR
48082: PUSH
48083: LD_VAR 0 3
48087: PPUSH
48088: CALL_OW 250
48092: STR
48093: PUSH
48094: LD_STRING , 
48096: STR
48097: PUSH
48098: LD_VAR 0 3
48102: PPUSH
48103: CALL_OW 251
48107: STR
48108: PUSH
48109: LD_STRING , 
48111: STR
48112: PUSH
48113: LD_VAR 0 3
48117: PPUSH
48118: CALL_OW 254
48122: STR
48123: PUSH
48124: LD_STRING , 
48126: STR
48127: PUSH
48128: LD_VAR 0 3
48132: PPUSH
48133: LD_INT 1
48135: PPUSH
48136: CALL_OW 268
48140: STR
48141: PUSH
48142: LD_STRING , 
48144: STR
48145: PUSH
48146: LD_VAR 0 3
48150: PPUSH
48151: LD_INT 2
48153: PPUSH
48154: CALL_OW 268
48158: STR
48159: PUSH
48160: LD_STRING ],
48162: STR
48163: PPUSH
48164: CALL_OW 561
// end ;
48168: GO 48062
48170: POP
48171: POP
// AddToLog ( ]; ) ;
48172: LD_STRING ];
48174: PPUSH
48175: CALL_OW 561
// end ;
48179: LD_VAR 0 2
48183: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48184: LD_INT 0
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
// if not area or not rate or not max then
48191: LD_VAR 0 1
48195: NOT
48196: IFTRUE 48205
48198: PUSH
48199: LD_VAR 0 2
48203: NOT
48204: OR
48205: IFTRUE 48214
48207: PUSH
48208: LD_VAR 0 4
48212: NOT
48213: OR
48214: IFFALSE 48218
// exit ;
48216: GO 48407
// while 1 do
48218: LD_INT 1
48220: IFFALSE 48407
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48222: LD_ADDR_VAR 0 9
48226: PUSH
48227: LD_VAR 0 1
48231: PPUSH
48232: LD_INT 1
48234: PPUSH
48235: CALL_OW 287
48239: PUSH
48240: LD_INT 10
48242: MUL
48243: ST_TO_ADDR
// r := rate / 10 ;
48244: LD_ADDR_VAR 0 7
48248: PUSH
48249: LD_VAR 0 2
48253: PUSH
48254: LD_INT 10
48256: DIVREAL
48257: ST_TO_ADDR
// time := 1 1$00 ;
48258: LD_ADDR_VAR 0 8
48262: PUSH
48263: LD_INT 2100
48265: ST_TO_ADDR
// if amount < min then
48266: LD_VAR 0 9
48270: PUSH
48271: LD_VAR 0 3
48275: LESS
48276: IFFALSE 48294
// r := r * 2 else
48278: LD_ADDR_VAR 0 7
48282: PUSH
48283: LD_VAR 0 7
48287: PUSH
48288: LD_INT 2
48290: MUL
48291: ST_TO_ADDR
48292: GO 48320
// if amount > max then
48294: LD_VAR 0 9
48298: PUSH
48299: LD_VAR 0 4
48303: GREATER
48304: IFFALSE 48320
// r := r / 2 ;
48306: LD_ADDR_VAR 0 7
48310: PUSH
48311: LD_VAR 0 7
48315: PUSH
48316: LD_INT 2
48318: DIVREAL
48319: ST_TO_ADDR
// time := time / r ;
48320: LD_ADDR_VAR 0 8
48324: PUSH
48325: LD_VAR 0 8
48329: PUSH
48330: LD_VAR 0 7
48334: DIVREAL
48335: ST_TO_ADDR
// if time < 0 then
48336: LD_VAR 0 8
48340: PUSH
48341: LD_INT 0
48343: LESS
48344: IFFALSE 48361
// time := time * - 1 ;
48346: LD_ADDR_VAR 0 8
48350: PUSH
48351: LD_VAR 0 8
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: MUL
48360: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48361: LD_VAR 0 8
48365: PUSH
48366: LD_INT 35
48368: PPUSH
48369: LD_INT 875
48371: PPUSH
48372: CALL_OW 12
48376: PLUS
48377: PPUSH
48378: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48382: LD_INT 1
48384: PPUSH
48385: LD_INT 5
48387: PPUSH
48388: CALL_OW 12
48392: PPUSH
48393: LD_VAR 0 1
48397: PPUSH
48398: LD_INT 1
48400: PPUSH
48401: CALL_OW 55
// end ;
48405: GO 48218
// end ;
48407: LD_VAR 0 5
48411: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48412: LD_INT 0
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
// if not turrets or not factories then
48422: LD_VAR 0 1
48426: NOT
48427: IFTRUE 48436
48429: PUSH
48430: LD_VAR 0 2
48434: NOT
48435: OR
48436: IFFALSE 48440
// exit ;
48438: GO 48747
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48440: LD_ADDR_VAR 0 10
48444: PUSH
48445: LD_INT 5
48447: PUSH
48448: LD_INT 6
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 4
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: LD_INT 5
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 24
48482: PUSH
48483: LD_INT 25
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 23
48492: PUSH
48493: LD_INT 27
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 42
48506: PUSH
48507: LD_INT 43
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 44
48516: PUSH
48517: LD_INT 46
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 45
48526: PUSH
48527: LD_INT 47
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// result := [ ] ;
48544: LD_ADDR_VAR 0 3
48548: PUSH
48549: EMPTY
48550: ST_TO_ADDR
// for i in turrets do
48551: LD_ADDR_VAR 0 4
48555: PUSH
48556: LD_VAR 0 1
48560: PUSH
48561: FOR_IN
48562: IFFALSE 48745
// begin nat := GetNation ( i ) ;
48564: LD_ADDR_VAR 0 7
48568: PUSH
48569: LD_VAR 0 4
48573: PPUSH
48574: CALL_OW 248
48578: ST_TO_ADDR
// weapon := 0 ;
48579: LD_ADDR_VAR 0 8
48583: PUSH
48584: LD_INT 0
48586: ST_TO_ADDR
// if not nat then
48587: LD_VAR 0 7
48591: NOT
48592: IFFALSE 48596
// continue ;
48594: GO 48561
// for j in list [ nat ] do
48596: LD_ADDR_VAR 0 5
48600: PUSH
48601: LD_VAR 0 10
48605: PUSH
48606: LD_VAR 0 7
48610: ARRAY
48611: PUSH
48612: FOR_IN
48613: IFFALSE 48654
// if GetBWeapon ( i ) = j [ 1 ] then
48615: LD_VAR 0 4
48619: PPUSH
48620: CALL_OW 269
48624: PUSH
48625: LD_VAR 0 5
48629: PUSH
48630: LD_INT 1
48632: ARRAY
48633: EQUAL
48634: IFFALSE 48652
// begin weapon := j [ 2 ] ;
48636: LD_ADDR_VAR 0 8
48640: PUSH
48641: LD_VAR 0 5
48645: PUSH
48646: LD_INT 2
48648: ARRAY
48649: ST_TO_ADDR
// break ;
48650: GO 48654
// end ;
48652: GO 48612
48654: POP
48655: POP
// if not weapon then
48656: LD_VAR 0 8
48660: NOT
48661: IFFALSE 48665
// continue ;
48663: GO 48561
// for k in factories do
48665: LD_ADDR_VAR 0 6
48669: PUSH
48670: LD_VAR 0 2
48674: PUSH
48675: FOR_IN
48676: IFFALSE 48741
// begin weapons := AvailableWeaponList ( k ) ;
48678: LD_ADDR_VAR 0 9
48682: PUSH
48683: LD_VAR 0 6
48687: PPUSH
48688: CALL_OW 478
48692: ST_TO_ADDR
// if not weapons then
48693: LD_VAR 0 9
48697: NOT
48698: IFFALSE 48702
// continue ;
48700: GO 48675
// if weapon in weapons then
48702: LD_VAR 0 8
48706: PUSH
48707: LD_VAR 0 9
48711: IN
48712: IFFALSE 48739
// begin result := [ i , weapon ] ;
48714: LD_ADDR_VAR 0 3
48718: PUSH
48719: LD_VAR 0 4
48723: PUSH
48724: LD_VAR 0 8
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: ST_TO_ADDR
// exit ;
48733: POP
48734: POP
48735: POP
48736: POP
48737: GO 48747
// end ; end ;
48739: GO 48675
48741: POP
48742: POP
// end ;
48743: GO 48561
48745: POP
48746: POP
// end ;
48747: LD_VAR 0 3
48751: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48752: LD_INT 0
48754: PPUSH
// if not side or side > 8 then
48755: LD_VAR 0 3
48759: NOT
48760: IFTRUE 48772
48762: PUSH
48763: LD_VAR 0 3
48767: PUSH
48768: LD_INT 8
48770: GREATER
48771: OR
48772: IFFALSE 48776
// exit ;
48774: GO 48835
// if not range then
48776: LD_VAR 0 4
48780: NOT
48781: IFFALSE 48792
// range := - 12 ;
48783: LD_ADDR_VAR 0 4
48787: PUSH
48788: LD_INT 12
48790: NEG
48791: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48792: LD_VAR 0 1
48796: PPUSH
48797: LD_VAR 0 2
48801: PPUSH
48802: LD_VAR 0 3
48806: PPUSH
48807: LD_VAR 0 4
48811: PPUSH
48812: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48816: LD_VAR 0 1
48820: PPUSH
48821: LD_VAR 0 2
48825: PPUSH
48826: LD_VAR 0 3
48830: PPUSH
48831: CALL_OW 331
// end ;
48835: LD_VAR 0 5
48839: RET
// export function Video ( mode ) ; begin
48840: LD_INT 0
48842: PPUSH
// ingame_video = mode ;
48843: LD_ADDR_OWVAR 52
48847: PUSH
48848: LD_VAR 0 1
48852: ST_TO_ADDR
// interface_hidden = mode ;
48853: LD_ADDR_OWVAR 54
48857: PUSH
48858: LD_VAR 0 1
48862: ST_TO_ADDR
// end ;
48863: LD_VAR 0 2
48867: RET
// export function Join ( array , element ) ; begin
48868: LD_INT 0
48870: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48871: LD_ADDR_VAR 0 3
48875: PUSH
48876: LD_VAR 0 1
48880: PPUSH
48881: LD_VAR 0 1
48885: PUSH
48886: LD_INT 1
48888: PLUS
48889: PPUSH
48890: LD_VAR 0 2
48894: PPUSH
48895: CALL_OW 1
48899: ST_TO_ADDR
// end ;
48900: LD_VAR 0 3
48904: RET
// export function JoinUnion ( array , element ) ; begin
48905: LD_INT 0
48907: PPUSH
// result := array union element ;
48908: LD_ADDR_VAR 0 3
48912: PUSH
48913: LD_VAR 0 1
48917: PUSH
48918: LD_VAR 0 2
48922: UNION
48923: ST_TO_ADDR
// end ;
48924: LD_VAR 0 3
48928: RET
// export function GetBehemoths ( side ) ; begin
48929: LD_INT 0
48931: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48932: LD_ADDR_VAR 0 2
48936: PUSH
48937: LD_INT 22
48939: PUSH
48940: LD_VAR 0 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 31
48951: PUSH
48952: LD_INT 25
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PPUSH
48963: CALL_OW 69
48967: ST_TO_ADDR
// end ;
48968: LD_VAR 0 2
48972: RET
// export function Shuffle ( array ) ; var i , index ; begin
48973: LD_INT 0
48975: PPUSH
48976: PPUSH
48977: PPUSH
// result := [ ] ;
48978: LD_ADDR_VAR 0 2
48982: PUSH
48983: EMPTY
48984: ST_TO_ADDR
// if not array then
48985: LD_VAR 0 1
48989: NOT
48990: IFFALSE 48994
// exit ;
48992: GO 49093
// Randomize ;
48994: CALL_OW 10
// for i = array downto 1 do
48998: LD_ADDR_VAR 0 3
49002: PUSH
49003: DOUBLE
49004: LD_VAR 0 1
49008: INC
49009: ST_TO_ADDR
49010: LD_INT 1
49012: PUSH
49013: FOR_DOWNTO
49014: IFFALSE 49091
// begin index := rand ( 1 , array ) ;
49016: LD_ADDR_VAR 0 4
49020: PUSH
49021: LD_INT 1
49023: PPUSH
49024: LD_VAR 0 1
49028: PPUSH
49029: CALL_OW 12
49033: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49034: LD_ADDR_VAR 0 2
49038: PUSH
49039: LD_VAR 0 2
49043: PPUSH
49044: LD_VAR 0 2
49048: PUSH
49049: LD_INT 1
49051: PLUS
49052: PPUSH
49053: LD_VAR 0 1
49057: PUSH
49058: LD_VAR 0 4
49062: ARRAY
49063: PPUSH
49064: CALL_OW 2
49068: ST_TO_ADDR
// array := Delete ( array , index ) ;
49069: LD_ADDR_VAR 0 1
49073: PUSH
49074: LD_VAR 0 1
49078: PPUSH
49079: LD_VAR 0 4
49083: PPUSH
49084: CALL_OW 3
49088: ST_TO_ADDR
// end ;
49089: GO 49013
49091: POP
49092: POP
// end ;
49093: LD_VAR 0 2
49097: RET
// export function GetBaseMaterials ( base ) ; begin
49098: LD_INT 0
49100: PPUSH
// result := [ 0 , 0 , 0 ] ;
49101: LD_ADDR_VAR 0 2
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: ST_TO_ADDR
// if not base then
49120: LD_VAR 0 1
49124: NOT
49125: IFFALSE 49129
// exit ;
49127: GO 49178
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49129: LD_ADDR_VAR 0 2
49133: PUSH
49134: LD_VAR 0 1
49138: PPUSH
49139: LD_INT 1
49141: PPUSH
49142: CALL_OW 275
49146: PUSH
49147: LD_VAR 0 1
49151: PPUSH
49152: LD_INT 2
49154: PPUSH
49155: CALL_OW 275
49159: PUSH
49160: LD_VAR 0 1
49164: PPUSH
49165: LD_INT 3
49167: PPUSH
49168: CALL_OW 275
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// end ;
49178: LD_VAR 0 2
49182: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49183: LD_INT 0
49185: PPUSH
49186: PPUSH
// result := array ;
49187: LD_ADDR_VAR 0 3
49191: PUSH
49192: LD_VAR 0 1
49196: ST_TO_ADDR
// if size >= result then
49197: LD_VAR 0 2
49201: PUSH
49202: LD_VAR 0 3
49206: GREATEREQUAL
49207: IFFALSE 49211
// exit ;
49209: GO 49261
// if size then
49211: LD_VAR 0 2
49215: IFFALSE 49261
// for i := array downto size do
49217: LD_ADDR_VAR 0 4
49221: PUSH
49222: DOUBLE
49223: LD_VAR 0 1
49227: INC
49228: ST_TO_ADDR
49229: LD_VAR 0 2
49233: PUSH
49234: FOR_DOWNTO
49235: IFFALSE 49259
// result := Delete ( result , result ) ;
49237: LD_ADDR_VAR 0 3
49241: PUSH
49242: LD_VAR 0 3
49246: PPUSH
49247: LD_VAR 0 3
49251: PPUSH
49252: CALL_OW 3
49256: ST_TO_ADDR
49257: GO 49234
49259: POP
49260: POP
// end ;
49261: LD_VAR 0 3
49265: RET
// export function ComExit ( unit ) ; var tmp ; begin
49266: LD_INT 0
49268: PPUSH
49269: PPUSH
// if not IsInUnit ( unit ) then
49270: LD_VAR 0 1
49274: PPUSH
49275: CALL_OW 310
49279: NOT
49280: IFFALSE 49284
// exit ;
49282: GO 49344
// tmp := IsInUnit ( unit ) ;
49284: LD_ADDR_VAR 0 3
49288: PUSH
49289: LD_VAR 0 1
49293: PPUSH
49294: CALL_OW 310
49298: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49299: LD_VAR 0 3
49303: PPUSH
49304: CALL_OW 247
49308: PUSH
49309: LD_INT 2
49311: EQUAL
49312: IFFALSE 49325
// ComExitVehicle ( unit ) else
49314: LD_VAR 0 1
49318: PPUSH
49319: CALL_OW 121
49323: GO 49334
// ComExitBuilding ( unit ) ;
49325: LD_VAR 0 1
49329: PPUSH
49330: CALL_OW 122
// result := tmp ;
49334: LD_ADDR_VAR 0 2
49338: PUSH
49339: LD_VAR 0 3
49343: ST_TO_ADDR
// end ;
49344: LD_VAR 0 2
49348: RET
// export function ComExitAll ( units ) ; var i ; begin
49349: LD_INT 0
49351: PPUSH
49352: PPUSH
// if not units then
49353: LD_VAR 0 1
49357: NOT
49358: IFFALSE 49362
// exit ;
49360: GO 49388
// for i in units do
49362: LD_ADDR_VAR 0 3
49366: PUSH
49367: LD_VAR 0 1
49371: PUSH
49372: FOR_IN
49373: IFFALSE 49386
// ComExit ( i ) ;
49375: LD_VAR 0 3
49379: PPUSH
49380: CALL 49266 0 1
49384: GO 49372
49386: POP
49387: POP
// end ;
49388: LD_VAR 0 2
49392: RET
// export function ResetHc ; begin
49393: LD_INT 0
49395: PPUSH
// InitHc ;
49396: CALL_OW 19
// hc_importance := 0 ;
49400: LD_ADDR_OWVAR 32
49404: PUSH
49405: LD_INT 0
49407: ST_TO_ADDR
// end ;
49408: LD_VAR 0 1
49412: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49413: LD_INT 0
49415: PPUSH
49416: PPUSH
49417: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49418: LD_ADDR_VAR 0 6
49422: PUSH
49423: LD_VAR 0 1
49427: PUSH
49428: LD_VAR 0 3
49432: PLUS
49433: PUSH
49434: LD_INT 2
49436: DIV
49437: ST_TO_ADDR
// if _x < 0 then
49438: LD_VAR 0 6
49442: PUSH
49443: LD_INT 0
49445: LESS
49446: IFFALSE 49463
// _x := _x * - 1 ;
49448: LD_ADDR_VAR 0 6
49452: PUSH
49453: LD_VAR 0 6
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: MUL
49462: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49463: LD_ADDR_VAR 0 7
49467: PUSH
49468: LD_VAR 0 2
49472: PUSH
49473: LD_VAR 0 4
49477: PLUS
49478: PUSH
49479: LD_INT 2
49481: DIV
49482: ST_TO_ADDR
// if _y < 0 then
49483: LD_VAR 0 7
49487: PUSH
49488: LD_INT 0
49490: LESS
49491: IFFALSE 49508
// _y := _y * - 1 ;
49493: LD_ADDR_VAR 0 7
49497: PUSH
49498: LD_VAR 0 7
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: MUL
49507: ST_TO_ADDR
// result := [ _x , _y ] ;
49508: LD_ADDR_VAR 0 5
49512: PUSH
49513: LD_VAR 0 6
49517: PUSH
49518: LD_VAR 0 7
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// end ;
49527: LD_VAR 0 5
49531: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49532: LD_INT 0
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
// task := GetTaskList ( unit ) ;
49538: LD_ADDR_VAR 0 7
49542: PUSH
49543: LD_VAR 0 1
49547: PPUSH
49548: CALL_OW 437
49552: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49553: LD_VAR 0 7
49557: NOT
49558: IFFALSE 49577
49560: PUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: LD_VAR 0 2
49570: PPUSH
49571: CALL_OW 308
49575: NOT
49576: AND
49577: IFFALSE 49581
// exit ;
49579: GO 49699
// if IsInArea ( unit , area ) then
49581: LD_VAR 0 1
49585: PPUSH
49586: LD_VAR 0 2
49590: PPUSH
49591: CALL_OW 308
49595: IFFALSE 49613
// begin ComMoveToArea ( unit , goAway ) ;
49597: LD_VAR 0 1
49601: PPUSH
49602: LD_VAR 0 3
49606: PPUSH
49607: CALL_OW 113
// exit ;
49611: GO 49699
// end ; if task [ 1 ] [ 1 ] <> M then
49613: LD_VAR 0 7
49617: PUSH
49618: LD_INT 1
49620: ARRAY
49621: PUSH
49622: LD_INT 1
49624: ARRAY
49625: PUSH
49626: LD_STRING M
49628: NONEQUAL
49629: IFFALSE 49633
// exit ;
49631: GO 49699
// x := task [ 1 ] [ 2 ] ;
49633: LD_ADDR_VAR 0 5
49637: PUSH
49638: LD_VAR 0 7
49642: PUSH
49643: LD_INT 1
49645: ARRAY
49646: PUSH
49647: LD_INT 2
49649: ARRAY
49650: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49651: LD_ADDR_VAR 0 6
49655: PUSH
49656: LD_VAR 0 7
49660: PUSH
49661: LD_INT 1
49663: ARRAY
49664: PUSH
49665: LD_INT 3
49667: ARRAY
49668: ST_TO_ADDR
// if InArea ( x , y , area ) then
49669: LD_VAR 0 5
49673: PPUSH
49674: LD_VAR 0 6
49678: PPUSH
49679: LD_VAR 0 2
49683: PPUSH
49684: CALL_OW 309
49688: IFFALSE 49699
// ComStop ( unit ) ;
49690: LD_VAR 0 1
49694: PPUSH
49695: CALL_OW 141
// end ;
49699: LD_VAR 0 4
49703: RET
// export function Abs ( value ) ; begin
49704: LD_INT 0
49706: PPUSH
// result := value ;
49707: LD_ADDR_VAR 0 2
49711: PUSH
49712: LD_VAR 0 1
49716: ST_TO_ADDR
// if value < 0 then
49717: LD_VAR 0 1
49721: PUSH
49722: LD_INT 0
49724: LESS
49725: IFFALSE 49742
// result := value * - 1 ;
49727: LD_ADDR_VAR 0 2
49731: PUSH
49732: LD_VAR 0 1
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: MUL
49741: ST_TO_ADDR
// end ;
49742: LD_VAR 0 2
49746: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49747: LD_INT 0
49749: PPUSH
49750: PPUSH
49751: PPUSH
49752: PPUSH
49753: PPUSH
49754: PPUSH
49755: PPUSH
49756: PPUSH
// if not unit or not building then
49757: LD_VAR 0 1
49761: NOT
49762: IFTRUE 49771
49764: PUSH
49765: LD_VAR 0 2
49769: NOT
49770: OR
49771: IFFALSE 49775
// exit ;
49773: GO 50003
// x := GetX ( building ) ;
49775: LD_ADDR_VAR 0 4
49779: PUSH
49780: LD_VAR 0 2
49784: PPUSH
49785: CALL_OW 250
49789: ST_TO_ADDR
// y := GetY ( building ) ;
49790: LD_ADDR_VAR 0 6
49794: PUSH
49795: LD_VAR 0 2
49799: PPUSH
49800: CALL_OW 251
49804: ST_TO_ADDR
// d := GetDir ( building ) ;
49805: LD_ADDR_VAR 0 8
49809: PUSH
49810: LD_VAR 0 2
49814: PPUSH
49815: CALL_OW 254
49819: ST_TO_ADDR
// r := 4 ;
49820: LD_ADDR_VAR 0 9
49824: PUSH
49825: LD_INT 4
49827: ST_TO_ADDR
// for i := 1 to 5 do
49828: LD_ADDR_VAR 0 10
49832: PUSH
49833: DOUBLE
49834: LD_INT 1
49836: DEC
49837: ST_TO_ADDR
49838: LD_INT 5
49840: PUSH
49841: FOR_TO
49842: IFFALSE 50001
// begin _x := ShiftX ( x , d , r + i ) ;
49844: LD_ADDR_VAR 0 5
49848: PUSH
49849: LD_VAR 0 4
49853: PPUSH
49854: LD_VAR 0 8
49858: PPUSH
49859: LD_VAR 0 9
49863: PUSH
49864: LD_VAR 0 10
49868: PLUS
49869: PPUSH
49870: CALL_OW 272
49874: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49875: LD_ADDR_VAR 0 7
49879: PUSH
49880: LD_VAR 0 6
49884: PPUSH
49885: LD_VAR 0 8
49889: PPUSH
49890: LD_VAR 0 9
49894: PUSH
49895: LD_VAR 0 10
49899: PLUS
49900: PPUSH
49901: CALL_OW 273
49905: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49906: LD_VAR 0 5
49910: PPUSH
49911: LD_VAR 0 7
49915: PPUSH
49916: CALL_OW 488
49920: IFFALSE 49955
49922: PUSH
49923: LD_VAR 0 5
49927: PPUSH
49928: LD_VAR 0 7
49932: PPUSH
49933: CALL_OW 428
49937: PPUSH
49938: CALL_OW 247
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: IN
49953: NOT
49954: AND
49955: IFFALSE 49999
// begin ComMoveXY ( unit , _x , _y ) ;
49957: LD_VAR 0 1
49961: PPUSH
49962: LD_VAR 0 5
49966: PPUSH
49967: LD_VAR 0 7
49971: PPUSH
49972: CALL_OW 111
// result := [ _x , _y ] ;
49976: LD_ADDR_VAR 0 3
49980: PUSH
49981: LD_VAR 0 5
49985: PUSH
49986: LD_VAR 0 7
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: ST_TO_ADDR
// exit ;
49995: POP
49996: POP
49997: GO 50003
// end ; end ;
49999: GO 49841
50001: POP
50002: POP
// end ;
50003: LD_VAR 0 3
50007: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50008: LD_INT 0
50010: PPUSH
50011: PPUSH
50012: PPUSH
// result := 0 ;
50013: LD_ADDR_VAR 0 3
50017: PUSH
50018: LD_INT 0
50020: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50021: LD_VAR 0 1
50025: PUSH
50026: LD_INT 0
50028: LESS
50029: IFTRUE 50041
50031: PUSH
50032: LD_VAR 0 1
50036: PUSH
50037: LD_INT 8
50039: GREATER
50040: OR
50041: IFTRUE 50053
50043: PUSH
50044: LD_VAR 0 2
50048: PUSH
50049: LD_INT 0
50051: LESS
50052: OR
50053: IFTRUE 50065
50055: PUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_INT 8
50063: GREATER
50064: OR
50065: IFFALSE 50069
// exit ;
50067: GO 50144
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50069: LD_ADDR_VAR 0 4
50073: PUSH
50074: LD_INT 22
50076: PUSH
50077: LD_VAR 0 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PPUSH
50086: CALL_OW 69
50090: PUSH
50091: FOR_IN
50092: IFFALSE 50142
// begin un := UnitShoot ( i ) ;
50094: LD_ADDR_VAR 0 5
50098: PUSH
50099: LD_VAR 0 4
50103: PPUSH
50104: CALL_OW 504
50108: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50109: LD_VAR 0 5
50113: PPUSH
50114: CALL_OW 255
50118: PUSH
50119: LD_VAR 0 1
50123: EQUAL
50124: IFFALSE 50140
// begin result := un ;
50126: LD_ADDR_VAR 0 3
50130: PUSH
50131: LD_VAR 0 5
50135: ST_TO_ADDR
// exit ;
50136: POP
50137: POP
50138: GO 50144
// end ; end ;
50140: GO 50091
50142: POP
50143: POP
// end ;
50144: LD_VAR 0 3
50148: RET
// export function GetCargoBay ( units ) ; begin
50149: LD_INT 0
50151: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50152: LD_ADDR_VAR 0 2
50156: PUSH
50157: LD_VAR 0 1
50161: PPUSH
50162: LD_INT 2
50164: PUSH
50165: LD_INT 34
50167: PUSH
50168: LD_INT 12
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 34
50177: PUSH
50178: LD_INT 51
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 34
50187: PUSH
50188: LD_INT 32
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 34
50197: PUSH
50198: LD_INT 89
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: PPUSH
50212: CALL_OW 72
50216: ST_TO_ADDR
// end ;
50217: LD_VAR 0 2
50221: RET
// export function Negate ( value ) ; begin
50222: LD_INT 0
50224: PPUSH
// result := not value ;
50225: LD_ADDR_VAR 0 2
50229: PUSH
50230: LD_VAR 0 1
50234: NOT
50235: ST_TO_ADDR
// end ;
50236: LD_VAR 0 2
50240: RET
// export function Inc ( value ) ; begin
50241: LD_INT 0
50243: PPUSH
// result := value + 1 ;
50244: LD_ADDR_VAR 0 2
50248: PUSH
50249: LD_VAR 0 1
50253: PUSH
50254: LD_INT 1
50256: PLUS
50257: ST_TO_ADDR
// end ;
50258: LD_VAR 0 2
50262: RET
// export function Dec ( value ) ; begin
50263: LD_INT 0
50265: PPUSH
// result := value - 1 ;
50266: LD_ADDR_VAR 0 2
50270: PUSH
50271: LD_VAR 0 1
50275: PUSH
50276: LD_INT 1
50278: MINUS
50279: ST_TO_ADDR
// end ;
50280: LD_VAR 0 2
50284: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50285: LD_INT 0
50287: PPUSH
50288: PPUSH
50289: PPUSH
50290: PPUSH
50291: PPUSH
50292: PPUSH
50293: PPUSH
50294: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50295: LD_VAR 0 1
50299: PPUSH
50300: LD_VAR 0 2
50304: PPUSH
50305: CALL_OW 488
50309: NOT
50310: IFTRUE 50329
50312: PUSH
50313: LD_VAR 0 3
50317: PPUSH
50318: LD_VAR 0 4
50322: PPUSH
50323: CALL_OW 488
50327: NOT
50328: OR
50329: IFFALSE 50342
// begin result := - 1 ;
50331: LD_ADDR_VAR 0 5
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: ST_TO_ADDR
// exit ;
50340: GO 50577
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50342: LD_ADDR_VAR 0 12
50346: PUSH
50347: LD_VAR 0 1
50351: PPUSH
50352: LD_VAR 0 2
50356: PPUSH
50357: LD_VAR 0 3
50361: PPUSH
50362: LD_VAR 0 4
50366: PPUSH
50367: CALL 49413 0 4
50371: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50372: LD_ADDR_VAR 0 11
50376: PUSH
50377: LD_VAR 0 1
50381: PPUSH
50382: LD_VAR 0 2
50386: PPUSH
50387: LD_VAR 0 12
50391: PUSH
50392: LD_INT 1
50394: ARRAY
50395: PPUSH
50396: LD_VAR 0 12
50400: PUSH
50401: LD_INT 2
50403: ARRAY
50404: PPUSH
50405: CALL_OW 298
50409: ST_TO_ADDR
// distance := 9999 ;
50410: LD_ADDR_VAR 0 10
50414: PUSH
50415: LD_INT 9999
50417: ST_TO_ADDR
// for i := 0 to 5 do
50418: LD_ADDR_VAR 0 6
50422: PUSH
50423: DOUBLE
50424: LD_INT 0
50426: DEC
50427: ST_TO_ADDR
50428: LD_INT 5
50430: PUSH
50431: FOR_TO
50432: IFFALSE 50575
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50434: LD_ADDR_VAR 0 7
50438: PUSH
50439: LD_VAR 0 1
50443: PPUSH
50444: LD_VAR 0 6
50448: PPUSH
50449: LD_VAR 0 11
50453: PPUSH
50454: CALL_OW 272
50458: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50459: LD_ADDR_VAR 0 8
50463: PUSH
50464: LD_VAR 0 2
50468: PPUSH
50469: LD_VAR 0 6
50473: PPUSH
50474: LD_VAR 0 11
50478: PPUSH
50479: CALL_OW 273
50483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50484: LD_VAR 0 7
50488: PPUSH
50489: LD_VAR 0 8
50493: PPUSH
50494: CALL_OW 488
50498: NOT
50499: IFFALSE 50503
// continue ;
50501: GO 50431
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50503: LD_ADDR_VAR 0 9
50507: PUSH
50508: LD_VAR 0 12
50512: PUSH
50513: LD_INT 1
50515: ARRAY
50516: PPUSH
50517: LD_VAR 0 12
50521: PUSH
50522: LD_INT 2
50524: ARRAY
50525: PPUSH
50526: LD_VAR 0 7
50530: PPUSH
50531: LD_VAR 0 8
50535: PPUSH
50536: CALL_OW 298
50540: ST_TO_ADDR
// if tmp < distance then
50541: LD_VAR 0 9
50545: PUSH
50546: LD_VAR 0 10
50550: LESS
50551: IFFALSE 50573
// begin result := i ;
50553: LD_ADDR_VAR 0 5
50557: PUSH
50558: LD_VAR 0 6
50562: ST_TO_ADDR
// distance := tmp ;
50563: LD_ADDR_VAR 0 10
50567: PUSH
50568: LD_VAR 0 9
50572: ST_TO_ADDR
// end ; end ;
50573: GO 50431
50575: POP
50576: POP
// end ;
50577: LD_VAR 0 5
50581: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50582: LD_INT 0
50584: PPUSH
50585: PPUSH
// if not driver or not IsInUnit ( driver ) then
50586: LD_VAR 0 1
50590: NOT
50591: IFTRUE 50605
50593: PUSH
50594: LD_VAR 0 1
50598: PPUSH
50599: CALL_OW 310
50603: NOT
50604: OR
50605: IFFALSE 50609
// exit ;
50607: GO 50699
// vehicle := IsInUnit ( driver ) ;
50609: LD_ADDR_VAR 0 3
50613: PUSH
50614: LD_VAR 0 1
50618: PPUSH
50619: CALL_OW 310
50623: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50624: LD_VAR 0 1
50628: PPUSH
50629: LD_STRING \
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: PUSH
50659: LD_STRING E
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: LD_VAR 0 3
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PPUSH
50695: CALL_OW 446
// end ;
50699: LD_VAR 0 2
50703: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50704: LD_INT 0
50706: PPUSH
50707: PPUSH
// if not driver or not IsInUnit ( driver ) then
50708: LD_VAR 0 1
50712: NOT
50713: IFTRUE 50727
50715: PUSH
50716: LD_VAR 0 1
50720: PPUSH
50721: CALL_OW 310
50725: NOT
50726: OR
50727: IFFALSE 50731
// exit ;
50729: GO 50821
// vehicle := IsInUnit ( driver ) ;
50731: LD_ADDR_VAR 0 3
50735: PUSH
50736: LD_VAR 0 1
50740: PPUSH
50741: CALL_OW 310
50745: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50746: LD_VAR 0 1
50750: PPUSH
50751: LD_STRING \
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: PUSH
50781: LD_STRING E
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_VAR 0 3
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PPUSH
50817: CALL_OW 447
// end ;
50821: LD_VAR 0 2
50825: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50826: LD_INT 0
50828: PPUSH
50829: PPUSH
50830: PPUSH
// tmp := [ ] ;
50831: LD_ADDR_VAR 0 5
50835: PUSH
50836: EMPTY
50837: ST_TO_ADDR
// for i in units do
50838: LD_ADDR_VAR 0 4
50842: PUSH
50843: LD_VAR 0 1
50847: PUSH
50848: FOR_IN
50849: IFFALSE 50887
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50851: LD_ADDR_VAR 0 5
50855: PUSH
50856: LD_VAR 0 5
50860: PPUSH
50861: LD_VAR 0 5
50865: PUSH
50866: LD_INT 1
50868: PLUS
50869: PPUSH
50870: LD_VAR 0 4
50874: PPUSH
50875: CALL_OW 256
50879: PPUSH
50880: CALL_OW 2
50884: ST_TO_ADDR
50885: GO 50848
50887: POP
50888: POP
// if not tmp then
50889: LD_VAR 0 5
50893: NOT
50894: IFFALSE 50898
// exit ;
50896: GO 50946
// if asc then
50898: LD_VAR 0 2
50902: IFFALSE 50926
// result := SortListByListAsc ( units , tmp ) else
50904: LD_ADDR_VAR 0 3
50908: PUSH
50909: LD_VAR 0 1
50913: PPUSH
50914: LD_VAR 0 5
50918: PPUSH
50919: CALL_OW 76
50923: ST_TO_ADDR
50924: GO 50946
// result := SortListByListDesc ( units , tmp ) ;
50926: LD_ADDR_VAR 0 3
50930: PUSH
50931: LD_VAR 0 1
50935: PPUSH
50936: LD_VAR 0 5
50940: PPUSH
50941: CALL_OW 77
50945: ST_TO_ADDR
// end ;
50946: LD_VAR 0 3
50950: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50951: LD_INT 0
50953: PPUSH
50954: PPUSH
// task := GetTaskList ( mech ) ;
50955: LD_ADDR_VAR 0 4
50959: PUSH
50960: LD_VAR 0 1
50964: PPUSH
50965: CALL_OW 437
50969: ST_TO_ADDR
// if not task then
50970: LD_VAR 0 4
50974: NOT
50975: IFFALSE 50979
// exit ;
50977: GO 51023
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50979: LD_ADDR_VAR 0 3
50983: PUSH
50984: LD_VAR 0 4
50988: PUSH
50989: LD_INT 1
50991: ARRAY
50992: PUSH
50993: LD_INT 1
50995: ARRAY
50996: PUSH
50997: LD_STRING r
50999: EQUAL
51000: IFFALSE 51022
51002: PUSH
51003: LD_VAR 0 4
51007: PUSH
51008: LD_INT 1
51010: ARRAY
51011: PUSH
51012: LD_INT 4
51014: ARRAY
51015: PUSH
51016: LD_VAR 0 2
51020: EQUAL
51021: AND
51022: ST_TO_ADDR
// end ;
51023: LD_VAR 0 3
51027: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51028: LD_INT 0
51030: PPUSH
// SetDir ( unit , d ) ;
51031: LD_VAR 0 1
51035: PPUSH
51036: LD_VAR 0 4
51040: PPUSH
51041: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51045: LD_ADDR_VAR 0 6
51049: PUSH
51050: LD_VAR 0 1
51054: PPUSH
51055: LD_VAR 0 2
51059: PPUSH
51060: LD_VAR 0 3
51064: PPUSH
51065: LD_VAR 0 5
51069: PPUSH
51070: CALL_OW 48
51074: ST_TO_ADDR
// end ;
51075: LD_VAR 0 6
51079: RET
// export function ToNaturalNumber ( number ) ; begin
51080: LD_INT 0
51082: PPUSH
// result := number div 1 ;
51083: LD_ADDR_VAR 0 2
51087: PUSH
51088: LD_VAR 0 1
51092: PUSH
51093: LD_INT 1
51095: DIV
51096: ST_TO_ADDR
// if number < 0 then
51097: LD_VAR 0 1
51101: PUSH
51102: LD_INT 0
51104: LESS
51105: IFFALSE 51115
// result := 0 ;
51107: LD_ADDR_VAR 0 2
51111: PUSH
51112: LD_INT 0
51114: ST_TO_ADDR
// end ;
51115: LD_VAR 0 2
51119: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51120: LD_INT 0
51122: PPUSH
51123: PPUSH
51124: PPUSH
// if not buildings then
51125: LD_VAR 0 1
51129: NOT
51130: IFFALSE 51134
// exit ;
51132: GO 51249
// tmp := [ ] ;
51134: LD_ADDR_VAR 0 5
51138: PUSH
51139: EMPTY
51140: ST_TO_ADDR
// for b in buildings do
51141: LD_ADDR_VAR 0 4
51145: PUSH
51146: LD_VAR 0 1
51150: PUSH
51151: FOR_IN
51152: IFFALSE 51190
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51154: LD_ADDR_VAR 0 5
51158: PUSH
51159: LD_VAR 0 5
51163: PPUSH
51164: LD_VAR 0 5
51168: PUSH
51169: LD_INT 1
51171: PLUS
51172: PPUSH
51173: LD_VAR 0 4
51177: PPUSH
51178: CALL_OW 266
51182: PPUSH
51183: CALL_OW 1
51187: ST_TO_ADDR
51188: GO 51151
51190: POP
51191: POP
// if not tmp then
51192: LD_VAR 0 5
51196: NOT
51197: IFFALSE 51201
// exit ;
51199: GO 51249
// if asc then
51201: LD_VAR 0 2
51205: IFFALSE 51229
// result := SortListByListAsc ( buildings , tmp ) else
51207: LD_ADDR_VAR 0 3
51211: PUSH
51212: LD_VAR 0 1
51216: PPUSH
51217: LD_VAR 0 5
51221: PPUSH
51222: CALL_OW 76
51226: ST_TO_ADDR
51227: GO 51249
// result := SortListByListDesc ( buildings , tmp ) ;
51229: LD_ADDR_VAR 0 3
51233: PUSH
51234: LD_VAR 0 1
51238: PPUSH
51239: LD_VAR 0 5
51243: PPUSH
51244: CALL_OW 77
51248: ST_TO_ADDR
// end ;
51249: LD_VAR 0 3
51253: RET
// export function SortByClass ( units , class ) ; var un ; begin
51254: LD_INT 0
51256: PPUSH
51257: PPUSH
// if not units or not class then
51258: LD_VAR 0 1
51262: NOT
51263: IFTRUE 51272
51265: PUSH
51266: LD_VAR 0 2
51270: NOT
51271: OR
51272: IFFALSE 51276
// exit ;
51274: GO 51371
// result := [ ] ;
51276: LD_ADDR_VAR 0 3
51280: PUSH
51281: EMPTY
51282: ST_TO_ADDR
// for un in units do
51283: LD_ADDR_VAR 0 4
51287: PUSH
51288: LD_VAR 0 1
51292: PUSH
51293: FOR_IN
51294: IFFALSE 51369
// if GetClass ( un ) = class then
51296: LD_VAR 0 4
51300: PPUSH
51301: CALL_OW 257
51305: PUSH
51306: LD_VAR 0 2
51310: EQUAL
51311: IFFALSE 51338
// result := Insert ( result , 1 , un ) else
51313: LD_ADDR_VAR 0 3
51317: PUSH
51318: LD_VAR 0 3
51322: PPUSH
51323: LD_INT 1
51325: PPUSH
51326: LD_VAR 0 4
51330: PPUSH
51331: CALL_OW 2
51335: ST_TO_ADDR
51336: GO 51367
// result := Replace ( result , result + 1 , un ) ;
51338: LD_ADDR_VAR 0 3
51342: PUSH
51343: LD_VAR 0 3
51347: PPUSH
51348: LD_VAR 0 3
51352: PUSH
51353: LD_INT 1
51355: PLUS
51356: PPUSH
51357: LD_VAR 0 4
51361: PPUSH
51362: CALL_OW 1
51366: ST_TO_ADDR
51367: GO 51293
51369: POP
51370: POP
// end ;
51371: LD_VAR 0 3
51375: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51376: LD_INT 0
51378: PPUSH
51379: PPUSH
51380: PPUSH
51381: PPUSH
51382: PPUSH
51383: PPUSH
51384: PPUSH
// result := [ ] ;
51385: LD_ADDR_VAR 0 4
51389: PUSH
51390: EMPTY
51391: ST_TO_ADDR
// if x - r < 0 then
51392: LD_VAR 0 1
51396: PUSH
51397: LD_VAR 0 3
51401: MINUS
51402: PUSH
51403: LD_INT 0
51405: LESS
51406: IFFALSE 51418
// min_x := 0 else
51408: LD_ADDR_VAR 0 8
51412: PUSH
51413: LD_INT 0
51415: ST_TO_ADDR
51416: GO 51434
// min_x := x - r ;
51418: LD_ADDR_VAR 0 8
51422: PUSH
51423: LD_VAR 0 1
51427: PUSH
51428: LD_VAR 0 3
51432: MINUS
51433: ST_TO_ADDR
// if y - r < 0 then
51434: LD_VAR 0 2
51438: PUSH
51439: LD_VAR 0 3
51443: MINUS
51444: PUSH
51445: LD_INT 0
51447: LESS
51448: IFFALSE 51460
// min_y := 0 else
51450: LD_ADDR_VAR 0 7
51454: PUSH
51455: LD_INT 0
51457: ST_TO_ADDR
51458: GO 51476
// min_y := y - r ;
51460: LD_ADDR_VAR 0 7
51464: PUSH
51465: LD_VAR 0 2
51469: PUSH
51470: LD_VAR 0 3
51474: MINUS
51475: ST_TO_ADDR
// max_x := x + r ;
51476: LD_ADDR_VAR 0 9
51480: PUSH
51481: LD_VAR 0 1
51485: PUSH
51486: LD_VAR 0 3
51490: PLUS
51491: ST_TO_ADDR
// max_y := y + r ;
51492: LD_ADDR_VAR 0 10
51496: PUSH
51497: LD_VAR 0 2
51501: PUSH
51502: LD_VAR 0 3
51506: PLUS
51507: ST_TO_ADDR
// for _x = min_x to max_x do
51508: LD_ADDR_VAR 0 5
51512: PUSH
51513: DOUBLE
51514: LD_VAR 0 8
51518: DEC
51519: ST_TO_ADDR
51520: LD_VAR 0 9
51524: PUSH
51525: FOR_TO
51526: IFFALSE 51627
// for _y = min_y to max_y do
51528: LD_ADDR_VAR 0 6
51532: PUSH
51533: DOUBLE
51534: LD_VAR 0 7
51538: DEC
51539: ST_TO_ADDR
51540: LD_VAR 0 10
51544: PUSH
51545: FOR_TO
51546: IFFALSE 51623
// begin if not ValidHex ( _x , _y ) then
51548: LD_VAR 0 5
51552: PPUSH
51553: LD_VAR 0 6
51557: PPUSH
51558: CALL_OW 488
51562: NOT
51563: IFFALSE 51567
// continue ;
51565: GO 51545
// if GetResourceTypeXY ( _x , _y ) then
51567: LD_VAR 0 5
51571: PPUSH
51572: LD_VAR 0 6
51576: PPUSH
51577: CALL_OW 283
51581: IFFALSE 51621
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51583: LD_ADDR_VAR 0 4
51587: PUSH
51588: LD_VAR 0 4
51592: PPUSH
51593: LD_VAR 0 4
51597: PUSH
51598: LD_INT 1
51600: PLUS
51601: PPUSH
51602: LD_VAR 0 5
51606: PUSH
51607: LD_VAR 0 6
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PPUSH
51616: CALL_OW 1
51620: ST_TO_ADDR
// end ;
51621: GO 51545
51623: POP
51624: POP
51625: GO 51525
51627: POP
51628: POP
// end ;
51629: LD_VAR 0 4
51633: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51634: LD_INT 0
51636: PPUSH
51637: PPUSH
51638: PPUSH
51639: PPUSH
51640: PPUSH
51641: PPUSH
51642: PPUSH
51643: PPUSH
// if not units then
51644: LD_VAR 0 1
51648: NOT
51649: IFFALSE 51653
// exit ;
51651: GO 52185
// result := UnitFilter ( units , [ f_ok ] ) ;
51653: LD_ADDR_VAR 0 3
51657: PUSH
51658: LD_VAR 0 1
51662: PPUSH
51663: LD_INT 50
51665: PUSH
51666: EMPTY
51667: LIST
51668: PPUSH
51669: CALL_OW 72
51673: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51674: LD_ADDR_VAR 0 8
51678: PUSH
51679: LD_VAR 0 1
51683: PUSH
51684: LD_INT 1
51686: ARRAY
51687: PPUSH
51688: CALL_OW 255
51692: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51693: LD_ADDR_VAR 0 10
51697: PUSH
51698: LD_INT 29
51700: PUSH
51701: LD_INT 91
51703: PUSH
51704: LD_INT 49
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: ST_TO_ADDR
// if not result then
51712: LD_VAR 0 3
51716: NOT
51717: IFFALSE 51721
// exit ;
51719: GO 52185
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51721: LD_ADDR_VAR 0 5
51725: PUSH
51726: LD_INT 81
51728: PUSH
51729: LD_VAR 0 8
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PPUSH
51738: CALL_OW 69
51742: ST_TO_ADDR
// for i in result do
51743: LD_ADDR_VAR 0 4
51747: PUSH
51748: LD_VAR 0 3
51752: PUSH
51753: FOR_IN
51754: IFFALSE 52183
// begin tag := GetTag ( i ) + 1 ;
51756: LD_ADDR_VAR 0 9
51760: PUSH
51761: LD_VAR 0 4
51765: PPUSH
51766: CALL_OW 110
51770: PUSH
51771: LD_INT 1
51773: PLUS
51774: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51775: LD_ADDR_VAR 0 7
51779: PUSH
51780: LD_VAR 0 4
51784: PPUSH
51785: CALL_OW 250
51789: PPUSH
51790: LD_VAR 0 4
51794: PPUSH
51795: CALL_OW 251
51799: PPUSH
51800: LD_INT 4
51802: PPUSH
51803: CALL 51376 0 3
51807: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51808: LD_VAR 0 4
51812: PPUSH
51813: CALL_OW 247
51817: PUSH
51818: LD_INT 2
51820: EQUAL
51821: IFFALSE 51833
51823: PUSH
51824: LD_VAR 0 7
51828: PUSH
51829: LD_INT 2
51831: GREATER
51832: AND
51833: IFFALSE 51853
51835: PUSH
51836: LD_VAR 0 4
51840: PPUSH
51841: CALL_OW 264
51845: PUSH
51846: LD_VAR 0 10
51850: IN
51851: NOT
51852: AND
51853: IFFALSE 51892
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51855: LD_VAR 0 4
51859: PPUSH
51860: LD_VAR 0 7
51864: PUSH
51865: LD_INT 1
51867: ARRAY
51868: PUSH
51869: LD_INT 1
51871: ARRAY
51872: PPUSH
51873: LD_VAR 0 7
51877: PUSH
51878: LD_INT 1
51880: ARRAY
51881: PUSH
51882: LD_INT 2
51884: ARRAY
51885: PPUSH
51886: CALL_OW 116
51890: GO 52181
// if path > tag then
51892: LD_VAR 0 2
51896: PUSH
51897: LD_VAR 0 9
51901: GREATER
51902: IFFALSE 52110
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51904: LD_ADDR_VAR 0 6
51908: PUSH
51909: LD_VAR 0 5
51913: PPUSH
51914: LD_INT 91
51916: PUSH
51917: LD_VAR 0 4
51921: PUSH
51922: LD_INT 8
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: PPUSH
51930: CALL_OW 72
51934: ST_TO_ADDR
// if nearEnemy then
51935: LD_VAR 0 6
51939: IFFALSE 52008
// begin if GetWeapon ( i ) = ru_time_lapser then
51941: LD_VAR 0 4
51945: PPUSH
51946: CALL_OW 264
51950: PUSH
51951: LD_INT 49
51953: EQUAL
51954: IFFALSE 51982
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51956: LD_VAR 0 4
51960: PPUSH
51961: LD_VAR 0 6
51965: PPUSH
51966: LD_VAR 0 4
51970: PPUSH
51971: CALL_OW 74
51975: PPUSH
51976: CALL_OW 112
51980: GO 52006
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51982: LD_VAR 0 4
51986: PPUSH
51987: LD_VAR 0 6
51991: PPUSH
51992: LD_VAR 0 4
51996: PPUSH
51997: CALL_OW 74
52001: PPUSH
52002: CALL 53266 0 2
// end else
52006: GO 52108
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52008: LD_VAR 0 4
52012: PPUSH
52013: LD_VAR 0 2
52017: PUSH
52018: LD_VAR 0 9
52022: ARRAY
52023: PUSH
52024: LD_INT 1
52026: ARRAY
52027: PPUSH
52028: LD_VAR 0 2
52032: PUSH
52033: LD_VAR 0 9
52037: ARRAY
52038: PUSH
52039: LD_INT 2
52041: ARRAY
52042: PPUSH
52043: CALL_OW 297
52047: PUSH
52048: LD_INT 6
52050: GREATER
52051: IFFALSE 52094
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52053: LD_VAR 0 4
52057: PPUSH
52058: LD_VAR 0 2
52062: PUSH
52063: LD_VAR 0 9
52067: ARRAY
52068: PUSH
52069: LD_INT 1
52071: ARRAY
52072: PPUSH
52073: LD_VAR 0 2
52077: PUSH
52078: LD_VAR 0 9
52082: ARRAY
52083: PUSH
52084: LD_INT 2
52086: ARRAY
52087: PPUSH
52088: CALL_OW 114
52092: GO 52108
// SetTag ( i , tag ) ;
52094: LD_VAR 0 4
52098: PPUSH
52099: LD_VAR 0 9
52103: PPUSH
52104: CALL_OW 109
// end else
52108: GO 52181
// if enemy then
52110: LD_VAR 0 5
52114: IFFALSE 52181
// begin if GetWeapon ( i ) = ru_time_lapser then
52116: LD_VAR 0 4
52120: PPUSH
52121: CALL_OW 264
52125: PUSH
52126: LD_INT 49
52128: EQUAL
52129: IFFALSE 52157
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52131: LD_VAR 0 4
52135: PPUSH
52136: LD_VAR 0 5
52140: PPUSH
52141: LD_VAR 0 4
52145: PPUSH
52146: CALL_OW 74
52150: PPUSH
52151: CALL_OW 112
52155: GO 52181
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52157: LD_VAR 0 4
52161: PPUSH
52162: LD_VAR 0 5
52166: PPUSH
52167: LD_VAR 0 4
52171: PPUSH
52172: CALL_OW 74
52176: PPUSH
52177: CALL 53266 0 2
// end ; end ;
52181: GO 51753
52183: POP
52184: POP
// end ;
52185: LD_VAR 0 3
52189: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52190: LD_INT 0
52192: PPUSH
52193: PPUSH
52194: PPUSH
// if not unit or IsInUnit ( unit ) then
52195: LD_VAR 0 1
52199: NOT
52200: IFTRUE 52213
52202: PUSH
52203: LD_VAR 0 1
52207: PPUSH
52208: CALL_OW 310
52212: OR
52213: IFFALSE 52217
// exit ;
52215: GO 52308
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52217: LD_ADDR_VAR 0 4
52221: PUSH
52222: LD_VAR 0 1
52226: PPUSH
52227: CALL_OW 250
52231: PPUSH
52232: LD_VAR 0 2
52236: PPUSH
52237: LD_INT 1
52239: PPUSH
52240: CALL_OW 272
52244: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52245: LD_ADDR_VAR 0 5
52249: PUSH
52250: LD_VAR 0 1
52254: PPUSH
52255: CALL_OW 251
52259: PPUSH
52260: LD_VAR 0 2
52264: PPUSH
52265: LD_INT 1
52267: PPUSH
52268: CALL_OW 273
52272: ST_TO_ADDR
// if ValidHex ( x , y ) then
52273: LD_VAR 0 4
52277: PPUSH
52278: LD_VAR 0 5
52282: PPUSH
52283: CALL_OW 488
52287: IFFALSE 52308
// ComTurnXY ( unit , x , y ) ;
52289: LD_VAR 0 1
52293: PPUSH
52294: LD_VAR 0 4
52298: PPUSH
52299: LD_VAR 0 5
52303: PPUSH
52304: CALL_OW 118
// end ;
52308: LD_VAR 0 3
52312: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52313: LD_INT 0
52315: PPUSH
52316: PPUSH
// result := false ;
52317: LD_ADDR_VAR 0 3
52321: PUSH
52322: LD_INT 0
52324: ST_TO_ADDR
// if not units then
52325: LD_VAR 0 2
52329: NOT
52330: IFFALSE 52334
// exit ;
52332: GO 52379
// for i in units do
52334: LD_ADDR_VAR 0 4
52338: PUSH
52339: LD_VAR 0 2
52343: PUSH
52344: FOR_IN
52345: IFFALSE 52377
// if See ( side , i ) then
52347: LD_VAR 0 1
52351: PPUSH
52352: LD_VAR 0 4
52356: PPUSH
52357: CALL_OW 292
52361: IFFALSE 52375
// begin result := true ;
52363: LD_ADDR_VAR 0 3
52367: PUSH
52368: LD_INT 1
52370: ST_TO_ADDR
// exit ;
52371: POP
52372: POP
52373: GO 52379
// end ;
52375: GO 52344
52377: POP
52378: POP
// end ;
52379: LD_VAR 0 3
52383: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52384: LD_INT 0
52386: PPUSH
52387: PPUSH
52388: PPUSH
52389: PPUSH
// if not unit or not points then
52390: LD_VAR 0 1
52394: NOT
52395: IFTRUE 52404
52397: PUSH
52398: LD_VAR 0 2
52402: NOT
52403: OR
52404: IFFALSE 52408
// exit ;
52406: GO 52498
// dist := 99999 ;
52408: LD_ADDR_VAR 0 5
52412: PUSH
52413: LD_INT 99999
52415: ST_TO_ADDR
// for i in points do
52416: LD_ADDR_VAR 0 4
52420: PUSH
52421: LD_VAR 0 2
52425: PUSH
52426: FOR_IN
52427: IFFALSE 52496
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52429: LD_ADDR_VAR 0 6
52433: PUSH
52434: LD_VAR 0 1
52438: PPUSH
52439: LD_VAR 0 4
52443: PUSH
52444: LD_INT 1
52446: ARRAY
52447: PPUSH
52448: LD_VAR 0 4
52452: PUSH
52453: LD_INT 2
52455: ARRAY
52456: PPUSH
52457: CALL_OW 297
52461: ST_TO_ADDR
// if tmpDist < dist then
52462: LD_VAR 0 6
52466: PUSH
52467: LD_VAR 0 5
52471: LESS
52472: IFFALSE 52494
// begin result := i ;
52474: LD_ADDR_VAR 0 3
52478: PUSH
52479: LD_VAR 0 4
52483: ST_TO_ADDR
// dist := tmpDist ;
52484: LD_ADDR_VAR 0 5
52488: PUSH
52489: LD_VAR 0 6
52493: ST_TO_ADDR
// end ; end ;
52494: GO 52426
52496: POP
52497: POP
// end ;
52498: LD_VAR 0 3
52502: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52503: LD_INT 0
52505: PPUSH
// uc_side := side ;
52506: LD_ADDR_OWVAR 20
52510: PUSH
52511: LD_VAR 0 1
52515: ST_TO_ADDR
// uc_nation := 3 ;
52516: LD_ADDR_OWVAR 21
52520: PUSH
52521: LD_INT 3
52523: ST_TO_ADDR
// vc_chassis := 25 ;
52524: LD_ADDR_OWVAR 37
52528: PUSH
52529: LD_INT 25
52531: ST_TO_ADDR
// vc_engine := engine_siberite ;
52532: LD_ADDR_OWVAR 39
52536: PUSH
52537: LD_INT 3
52539: ST_TO_ADDR
// vc_control := control_computer ;
52540: LD_ADDR_OWVAR 38
52544: PUSH
52545: LD_INT 3
52547: ST_TO_ADDR
// vc_weapon := 59 ;
52548: LD_ADDR_OWVAR 40
52552: PUSH
52553: LD_INT 59
52555: ST_TO_ADDR
// result := CreateVehicle ;
52556: LD_ADDR_VAR 0 5
52560: PUSH
52561: CALL_OW 45
52565: ST_TO_ADDR
// SetDir ( result , d ) ;
52566: LD_VAR 0 5
52570: PPUSH
52571: LD_VAR 0 4
52575: PPUSH
52576: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52580: LD_VAR 0 5
52584: PPUSH
52585: LD_VAR 0 2
52589: PPUSH
52590: LD_VAR 0 3
52594: PPUSH
52595: LD_INT 0
52597: PPUSH
52598: CALL_OW 48
// end ;
52602: LD_VAR 0 5
52606: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52607: LD_INT 0
52609: PPUSH
52610: PPUSH
52611: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52612: LD_ADDR_VAR 0 2
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52635: LD_VAR 0 1
52639: NOT
52640: IFTRUE 52673
52642: PUSH
52643: LD_VAR 0 1
52647: PPUSH
52648: CALL_OW 264
52652: PUSH
52653: LD_INT 12
52655: PUSH
52656: LD_INT 51
52658: PUSH
52659: LD_INT 32
52661: PUSH
52662: LD_INT 89
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: IN
52671: NOT
52672: OR
52673: IFFALSE 52677
// exit ;
52675: GO 52775
// for i := 1 to 3 do
52677: LD_ADDR_VAR 0 3
52681: PUSH
52682: DOUBLE
52683: LD_INT 1
52685: DEC
52686: ST_TO_ADDR
52687: LD_INT 3
52689: PUSH
52690: FOR_TO
52691: IFFALSE 52773
// begin tmp := GetCargo ( cargo , i ) ;
52693: LD_ADDR_VAR 0 4
52697: PUSH
52698: LD_VAR 0 1
52702: PPUSH
52703: LD_VAR 0 3
52707: PPUSH
52708: CALL_OW 289
52712: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52713: LD_ADDR_VAR 0 2
52717: PUSH
52718: LD_VAR 0 2
52722: PPUSH
52723: LD_VAR 0 3
52727: PPUSH
52728: LD_VAR 0 4
52732: PPUSH
52733: CALL_OW 1
52737: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52738: LD_ADDR_VAR 0 2
52742: PUSH
52743: LD_VAR 0 2
52747: PPUSH
52748: LD_INT 4
52750: PPUSH
52751: LD_VAR 0 2
52755: PUSH
52756: LD_INT 4
52758: ARRAY
52759: PUSH
52760: LD_VAR 0 4
52764: PLUS
52765: PPUSH
52766: CALL_OW 1
52770: ST_TO_ADDR
// end ;
52771: GO 52690
52773: POP
52774: POP
// end ;
52775: LD_VAR 0 2
52779: RET
// export function Length ( array ) ; begin
52780: LD_INT 0
52782: PPUSH
// result := array + 0 ;
52783: LD_ADDR_VAR 0 2
52787: PUSH
52788: LD_VAR 0 1
52792: PUSH
52793: LD_INT 0
52795: PLUS
52796: ST_TO_ADDR
// end ;
52797: LD_VAR 0 2
52801: RET
// export function PrepareArray ( array ) ; begin
52802: LD_INT 0
52804: PPUSH
// result := array diff 0 ;
52805: LD_ADDR_VAR 0 2
52809: PUSH
52810: LD_VAR 0 1
52814: PUSH
52815: LD_INT 0
52817: DIFF
52818: ST_TO_ADDR
// if not result [ 1 ] then
52819: LD_VAR 0 2
52823: PUSH
52824: LD_INT 1
52826: ARRAY
52827: NOT
52828: IFFALSE 52848
// result := Delete ( result , 1 ) ;
52830: LD_ADDR_VAR 0 2
52834: PUSH
52835: LD_VAR 0 2
52839: PPUSH
52840: LD_INT 1
52842: PPUSH
52843: CALL_OW 3
52847: ST_TO_ADDR
// end ;
52848: LD_VAR 0 2
52852: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52853: LD_INT 0
52855: PPUSH
52856: PPUSH
52857: PPUSH
52858: PPUSH
// sibRocketRange := 25 ;
52859: LD_ADDR_VAR 0 6
52863: PUSH
52864: LD_INT 25
52866: ST_TO_ADDR
// result := false ;
52867: LD_ADDR_VAR 0 4
52871: PUSH
52872: LD_INT 0
52874: ST_TO_ADDR
// for i := 0 to 5 do
52875: LD_ADDR_VAR 0 5
52879: PUSH
52880: DOUBLE
52881: LD_INT 0
52883: DEC
52884: ST_TO_ADDR
52885: LD_INT 5
52887: PUSH
52888: FOR_TO
52889: IFFALSE 52956
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52891: LD_VAR 0 1
52895: PPUSH
52896: LD_VAR 0 5
52900: PPUSH
52901: LD_VAR 0 6
52905: PPUSH
52906: CALL_OW 272
52910: PPUSH
52911: LD_VAR 0 2
52915: PPUSH
52916: LD_VAR 0 5
52920: PPUSH
52921: LD_VAR 0 6
52925: PPUSH
52926: CALL_OW 273
52930: PPUSH
52931: LD_VAR 0 3
52935: PPUSH
52936: CALL_OW 309
52940: IFFALSE 52954
// begin result := true ;
52942: LD_ADDR_VAR 0 4
52946: PUSH
52947: LD_INT 1
52949: ST_TO_ADDR
// exit ;
52950: POP
52951: POP
52952: GO 52958
// end ;
52954: GO 52888
52956: POP
52957: POP
// end ;
52958: LD_VAR 0 4
52962: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52963: LD_INT 0
52965: PPUSH
52966: PPUSH
52967: PPUSH
// if btype = b_depot then
52968: LD_VAR 0 2
52972: PUSH
52973: LD_INT 0
52975: EQUAL
52976: IFFALSE 52988
// begin result := true ;
52978: LD_ADDR_VAR 0 3
52982: PUSH
52983: LD_INT 1
52985: ST_TO_ADDR
// exit ;
52986: GO 53108
// end ; pom := GetBase ( depot ) ;
52988: LD_ADDR_VAR 0 4
52992: PUSH
52993: LD_VAR 0 1
52997: PPUSH
52998: CALL_OW 274
53002: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53003: LD_ADDR_VAR 0 5
53007: PUSH
53008: LD_VAR 0 2
53012: PPUSH
53013: LD_VAR 0 1
53017: PPUSH
53018: CALL_OW 248
53022: PPUSH
53023: CALL_OW 450
53027: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53028: LD_ADDR_VAR 0 3
53032: PUSH
53033: LD_VAR 0 4
53037: PPUSH
53038: LD_INT 1
53040: PPUSH
53041: CALL_OW 275
53045: PUSH
53046: LD_VAR 0 5
53050: PUSH
53051: LD_INT 1
53053: ARRAY
53054: GREATEREQUAL
53055: IFFALSE 53081
53057: PUSH
53058: LD_VAR 0 4
53062: PPUSH
53063: LD_INT 2
53065: PPUSH
53066: CALL_OW 275
53070: PUSH
53071: LD_VAR 0 5
53075: PUSH
53076: LD_INT 2
53078: ARRAY
53079: GREATEREQUAL
53080: AND
53081: IFFALSE 53107
53083: PUSH
53084: LD_VAR 0 4
53088: PPUSH
53089: LD_INT 3
53091: PPUSH
53092: CALL_OW 275
53096: PUSH
53097: LD_VAR 0 5
53101: PUSH
53102: LD_INT 3
53104: ARRAY
53105: GREATEREQUAL
53106: AND
53107: ST_TO_ADDR
// end ;
53108: LD_VAR 0 3
53112: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53113: LD_INT 0
53115: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53116: LD_VAR 0 1
53120: PPUSH
53121: LD_VAR 0 2
53125: PPUSH
53126: LD_INT 0
53128: PPUSH
53129: LD_INT 0
53131: PPUSH
53132: LD_INT 1
53134: PPUSH
53135: LD_INT 0
53137: PPUSH
53138: CALL_OW 587
// end ;
53142: LD_VAR 0 3
53146: RET
// export function CenterOnNow ( unit ) ; begin
53147: LD_INT 0
53149: PPUSH
// result := IsInUnit ( unit ) ;
53150: LD_ADDR_VAR 0 2
53154: PUSH
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL_OW 310
53164: ST_TO_ADDR
// if not result then
53165: LD_VAR 0 2
53169: NOT
53170: IFFALSE 53182
// result := unit ;
53172: LD_ADDR_VAR 0 2
53176: PUSH
53177: LD_VAR 0 1
53181: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53182: LD_VAR 0 1
53186: PPUSH
53187: CALL_OW 87
// end ;
53191: LD_VAR 0 2
53195: RET
// export function ComMoveHex ( unit , hex ) ; begin
53196: LD_INT 0
53198: PPUSH
// if not hex then
53199: LD_VAR 0 2
53203: NOT
53204: IFFALSE 53208
// exit ;
53206: GO 53261
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53208: LD_VAR 0 2
53212: PUSH
53213: LD_INT 1
53215: ARRAY
53216: PPUSH
53217: LD_VAR 0 2
53221: PUSH
53222: LD_INT 2
53224: ARRAY
53225: PPUSH
53226: CALL_OW 428
53230: IFFALSE 53234
// exit ;
53232: GO 53261
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53234: LD_VAR 0 1
53238: PPUSH
53239: LD_VAR 0 2
53243: PUSH
53244: LD_INT 1
53246: ARRAY
53247: PPUSH
53248: LD_VAR 0 2
53252: PUSH
53253: LD_INT 2
53255: ARRAY
53256: PPUSH
53257: CALL_OW 111
// end ;
53261: LD_VAR 0 3
53265: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53266: LD_INT 0
53268: PPUSH
53269: PPUSH
53270: PPUSH
// if not unit or not enemy then
53271: LD_VAR 0 1
53275: NOT
53276: IFTRUE 53285
53278: PUSH
53279: LD_VAR 0 2
53283: NOT
53284: OR
53285: IFFALSE 53289
// exit ;
53287: GO 53415
// x := GetX ( enemy ) ;
53289: LD_ADDR_VAR 0 4
53293: PUSH
53294: LD_VAR 0 2
53298: PPUSH
53299: CALL_OW 250
53303: ST_TO_ADDR
// y := GetY ( enemy ) ;
53304: LD_ADDR_VAR 0 5
53308: PUSH
53309: LD_VAR 0 2
53313: PPUSH
53314: CALL_OW 251
53318: ST_TO_ADDR
// if ValidHex ( x , y ) then
53319: LD_VAR 0 4
53323: PPUSH
53324: LD_VAR 0 5
53328: PPUSH
53329: CALL_OW 488
53333: IFFALSE 53415
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53335: LD_VAR 0 2
53339: PPUSH
53340: CALL_OW 247
53344: PUSH
53345: LD_INT 3
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: IN
53355: IFTRUE 53378
53357: PUSH
53358: LD_VAR 0 1
53362: PPUSH
53363: CALL_OW 255
53367: PPUSH
53368: LD_VAR 0 2
53372: PPUSH
53373: CALL_OW 292
53377: OR
53378: IFFALSE 53396
// ComAttackUnit ( unit , enemy ) else
53380: LD_VAR 0 1
53384: PPUSH
53385: LD_VAR 0 2
53389: PPUSH
53390: CALL_OW 115
53394: GO 53415
// ComAgressiveMove ( unit , x , y ) ;
53396: LD_VAR 0 1
53400: PPUSH
53401: LD_VAR 0 4
53405: PPUSH
53406: LD_VAR 0 5
53410: PPUSH
53411: CALL_OW 114
// end ;
53415: LD_VAR 0 3
53419: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53420: LD_INT 0
53422: PPUSH
53423: PPUSH
53424: PPUSH
// list := AreaToList ( area , 0 ) ;
53425: LD_ADDR_VAR 0 5
53429: PUSH
53430: LD_VAR 0 1
53434: PPUSH
53435: LD_INT 0
53437: PPUSH
53438: CALL_OW 517
53442: ST_TO_ADDR
// if not list then
53443: LD_VAR 0 5
53447: NOT
53448: IFFALSE 53452
// exit ;
53450: GO 53582
// if all then
53452: LD_VAR 0 2
53456: IFFALSE 53544
// begin for i := 1 to list [ 1 ] do
53458: LD_ADDR_VAR 0 4
53462: PUSH
53463: DOUBLE
53464: LD_INT 1
53466: DEC
53467: ST_TO_ADDR
53468: LD_VAR 0 5
53472: PUSH
53473: LD_INT 1
53475: ARRAY
53476: PUSH
53477: FOR_TO
53478: IFFALSE 53540
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53480: LD_ADDR_VAR 0 3
53484: PUSH
53485: LD_VAR 0 3
53489: PPUSH
53490: LD_VAR 0 3
53494: PUSH
53495: LD_INT 1
53497: PLUS
53498: PPUSH
53499: LD_VAR 0 5
53503: PUSH
53504: LD_INT 1
53506: ARRAY
53507: PUSH
53508: LD_VAR 0 4
53512: ARRAY
53513: PUSH
53514: LD_VAR 0 5
53518: PUSH
53519: LD_INT 2
53521: ARRAY
53522: PUSH
53523: LD_VAR 0 4
53527: ARRAY
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PPUSH
53533: CALL_OW 1
53537: ST_TO_ADDR
53538: GO 53477
53540: POP
53541: POP
// exit ;
53542: GO 53582
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53544: LD_ADDR_VAR 0 3
53548: PUSH
53549: LD_VAR 0 5
53553: PUSH
53554: LD_INT 1
53556: ARRAY
53557: PUSH
53558: LD_INT 1
53560: ARRAY
53561: PUSH
53562: LD_VAR 0 5
53566: PUSH
53567: LD_INT 2
53569: ARRAY
53570: PUSH
53571: LD_INT 1
53573: ARRAY
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: ST_TO_ADDR
// end ;
53582: LD_VAR 0 3
53586: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53587: LD_INT 0
53589: PPUSH
53590: PPUSH
// list := AreaToList ( area , 0 ) ;
53591: LD_ADDR_VAR 0 4
53595: PUSH
53596: LD_VAR 0 1
53600: PPUSH
53601: LD_INT 0
53603: PPUSH
53604: CALL_OW 517
53608: ST_TO_ADDR
// if not list then
53609: LD_VAR 0 4
53613: NOT
53614: IFFALSE 53618
// exit ;
53616: GO 53659
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53618: LD_ADDR_VAR 0 3
53622: PUSH
53623: LD_VAR 0 4
53627: PUSH
53628: LD_INT 1
53630: ARRAY
53631: PUSH
53632: LD_INT 1
53634: ARRAY
53635: PUSH
53636: LD_VAR 0 4
53640: PUSH
53641: LD_INT 2
53643: ARRAY
53644: PUSH
53645: LD_INT 1
53647: ARRAY
53648: PUSH
53649: LD_VAR 0 2
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: LIST
53658: ST_TO_ADDR
// end ;
53659: LD_VAR 0 3
53663: RET
// export function First ( array ) ; begin
53664: LD_INT 0
53666: PPUSH
// if not array then
53667: LD_VAR 0 1
53671: NOT
53672: IFFALSE 53676
// exit ;
53674: GO 53690
// result := array [ 1 ] ;
53676: LD_ADDR_VAR 0 2
53680: PUSH
53681: LD_VAR 0 1
53685: PUSH
53686: LD_INT 1
53688: ARRAY
53689: ST_TO_ADDR
// end ;
53690: LD_VAR 0 2
53694: RET
// export function Last ( array ) ; begin
53695: LD_INT 0
53697: PPUSH
// if not array then
53698: LD_VAR 0 1
53702: NOT
53703: IFFALSE 53707
// exit ;
53705: GO 53723
// result := array [ array ] ;
53707: LD_ADDR_VAR 0 2
53711: PUSH
53712: LD_VAR 0 1
53716: PUSH
53717: LD_VAR 0 1
53721: ARRAY
53722: ST_TO_ADDR
// end ;
53723: LD_VAR 0 2
53727: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53728: LD_INT 0
53730: PPUSH
53731: PPUSH
// result := [ ] ;
53732: LD_ADDR_VAR 0 5
53736: PUSH
53737: EMPTY
53738: ST_TO_ADDR
// if not array then
53739: LD_VAR 0 1
53743: NOT
53744: IFFALSE 53748
// exit ;
53746: GO 53860
// for i := 1 to array do
53748: LD_ADDR_VAR 0 6
53752: PUSH
53753: DOUBLE
53754: LD_INT 1
53756: DEC
53757: ST_TO_ADDR
53758: LD_VAR 0 1
53762: PUSH
53763: FOR_TO
53764: IFFALSE 53858
// if array [ i ] [ index ] = value then
53766: LD_VAR 0 1
53770: PUSH
53771: LD_VAR 0 6
53775: ARRAY
53776: PUSH
53777: LD_VAR 0 2
53781: ARRAY
53782: PUSH
53783: LD_VAR 0 3
53787: EQUAL
53788: IFFALSE 53856
// begin if indexColumn then
53790: LD_VAR 0 4
53794: IFFALSE 53830
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53796: LD_ADDR_VAR 0 5
53800: PUSH
53801: LD_VAR 0 5
53805: PPUSH
53806: LD_VAR 0 1
53810: PUSH
53811: LD_VAR 0 6
53815: ARRAY
53816: PUSH
53817: LD_VAR 0 4
53821: ARRAY
53822: PPUSH
53823: CALL 48868 0 2
53827: ST_TO_ADDR
53828: GO 53856
// result := Join ( result , array [ i ] ) ;
53830: LD_ADDR_VAR 0 5
53834: PUSH
53835: LD_VAR 0 5
53839: PPUSH
53840: LD_VAR 0 1
53844: PUSH
53845: LD_VAR 0 6
53849: ARRAY
53850: PPUSH
53851: CALL 48868 0 2
53855: ST_TO_ADDR
// end ;
53856: GO 53763
53858: POP
53859: POP
// end ;
53860: LD_VAR 0 5
53864: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53865: LD_INT 0
53867: PPUSH
// if not vehicles or not parkingPoint then
53868: LD_VAR 0 1
53872: NOT
53873: IFTRUE 53882
53875: PUSH
53876: LD_VAR 0 2
53880: NOT
53881: OR
53882: IFFALSE 53886
// exit ;
53884: GO 53984
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53886: LD_ADDR_VAR 0 1
53890: PUSH
53891: LD_VAR 0 1
53895: PPUSH
53896: LD_INT 50
53898: PUSH
53899: EMPTY
53900: LIST
53901: PUSH
53902: LD_INT 3
53904: PUSH
53905: LD_INT 92
53907: PUSH
53908: LD_VAR 0 2
53912: PUSH
53913: LD_INT 1
53915: ARRAY
53916: PUSH
53917: LD_VAR 0 2
53921: PUSH
53922: LD_INT 2
53924: ARRAY
53925: PUSH
53926: LD_INT 8
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PPUSH
53943: CALL_OW 72
53947: ST_TO_ADDR
// if not vehicles then
53948: LD_VAR 0 1
53952: NOT
53953: IFFALSE 53957
// exit ;
53955: GO 53984
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53957: LD_VAR 0 1
53961: PPUSH
53962: LD_VAR 0 2
53966: PUSH
53967: LD_INT 1
53969: ARRAY
53970: PPUSH
53971: LD_VAR 0 2
53975: PUSH
53976: LD_INT 2
53978: ARRAY
53979: PPUSH
53980: CALL_OW 111
// end ;
53984: LD_VAR 0 3
53988: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53989: LD_INT 0
53991: PPUSH
53992: PPUSH
53993: PPUSH
// if not side or not area then
53994: LD_VAR 0 1
53998: NOT
53999: IFTRUE 54008
54001: PUSH
54002: LD_VAR 0 2
54006: NOT
54007: OR
54008: IFFALSE 54012
// exit ;
54010: GO 54131
// tmp := AreaToList ( area , 0 ) ;
54012: LD_ADDR_VAR 0 5
54016: PUSH
54017: LD_VAR 0 2
54021: PPUSH
54022: LD_INT 0
54024: PPUSH
54025: CALL_OW 517
54029: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54030: LD_ADDR_VAR 0 4
54034: PUSH
54035: DOUBLE
54036: LD_INT 1
54038: DEC
54039: ST_TO_ADDR
54040: LD_VAR 0 5
54044: PUSH
54045: LD_INT 1
54047: ARRAY
54048: PUSH
54049: FOR_TO
54050: IFFALSE 54129
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54052: LD_VAR 0 5
54056: PUSH
54057: LD_INT 1
54059: ARRAY
54060: PUSH
54061: LD_VAR 0 4
54065: ARRAY
54066: PPUSH
54067: LD_VAR 0 5
54071: PUSH
54072: LD_INT 2
54074: ARRAY
54075: PUSH
54076: LD_VAR 0 4
54080: ARRAY
54081: PPUSH
54082: CALL_OW 351
54086: IFFALSE 54127
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54088: LD_VAR 0 5
54092: PUSH
54093: LD_INT 1
54095: ARRAY
54096: PUSH
54097: LD_VAR 0 4
54101: ARRAY
54102: PPUSH
54103: LD_VAR 0 5
54107: PUSH
54108: LD_INT 2
54110: ARRAY
54111: PUSH
54112: LD_VAR 0 4
54116: ARRAY
54117: PPUSH
54118: LD_VAR 0 1
54122: PPUSH
54123: CALL_OW 244
// end ;
54127: GO 54049
54129: POP
54130: POP
// end ;
54131: LD_VAR 0 3
54135: RET
// export function UniqueArray ( array ) ; var i ; begin
54136: LD_INT 0
54138: PPUSH
54139: PPUSH
// result := [ ] ;
54140: LD_ADDR_VAR 0 2
54144: PUSH
54145: EMPTY
54146: ST_TO_ADDR
// if not array then
54147: LD_VAR 0 1
54151: NOT
54152: IFFALSE 54156
// exit ;
54154: GO 54217
// for i := 1 to array do
54156: LD_ADDR_VAR 0 3
54160: PUSH
54161: DOUBLE
54162: LD_INT 1
54164: DEC
54165: ST_TO_ADDR
54166: LD_VAR 0 1
54170: PUSH
54171: FOR_TO
54172: IFFALSE 54215
// if not array [ i ] in result then
54174: LD_VAR 0 1
54178: PUSH
54179: LD_VAR 0 3
54183: ARRAY
54184: PUSH
54185: LD_VAR 0 2
54189: IN
54190: NOT
54191: IFFALSE 54213
// result := Join ( result , i ) ;
54193: LD_ADDR_VAR 0 2
54197: PUSH
54198: LD_VAR 0 2
54202: PPUSH
54203: LD_VAR 0 3
54207: PPUSH
54208: CALL 48868 0 2
54212: ST_TO_ADDR
54213: GO 54171
54215: POP
54216: POP
// end ; end_of_file
54217: LD_VAR 0 2
54221: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54222: LD_VAR 0 1
54226: PUSH
54227: LD_INT 200
54229: DOUBLE
54230: GREATEREQUAL
54231: IFFALSE 54239
54233: LD_INT 299
54235: DOUBLE
54236: LESSEQUAL
54237: IFTRUE 54241
54239: GO 54273
54241: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54242: LD_VAR 0 1
54246: PPUSH
54247: LD_VAR 0 2
54251: PPUSH
54252: LD_VAR 0 3
54256: PPUSH
54257: LD_VAR 0 4
54261: PPUSH
54262: LD_VAR 0 5
54266: PPUSH
54267: CALL 55135 0 5
54271: GO 54350
54273: LD_INT 300
54275: DOUBLE
54276: GREATEREQUAL
54277: IFFALSE 54285
54279: LD_INT 399
54281: DOUBLE
54282: LESSEQUAL
54283: IFTRUE 54287
54285: GO 54349
54287: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54288: LD_VAR 0 1
54292: PPUSH
54293: LD_VAR 0 2
54297: PPUSH
54298: LD_VAR 0 3
54302: PPUSH
54303: LD_VAR 0 4
54307: PPUSH
54308: LD_VAR 0 5
54312: PPUSH
54313: LD_VAR 0 6
54317: PPUSH
54318: LD_VAR 0 7
54322: PPUSH
54323: LD_VAR 0 8
54327: PPUSH
54328: LD_VAR 0 9
54332: PPUSH
54333: LD_VAR 0 10
54337: PPUSH
54338: LD_VAR 0 11
54342: PPUSH
54343: CALL 63137 0 11
54347: GO 54350
54349: POP
// end ;
54350: PPOPN 11
54352: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54353: LD_VAR 0 1
54357: PPUSH
54358: LD_VAR 0 2
54362: PPUSH
54363: LD_VAR 0 3
54367: PPUSH
54368: LD_VAR 0 4
54372: PPUSH
54373: LD_VAR 0 5
54377: PPUSH
54378: CALL 54435 0 5
// end ; end_of_file
54382: PPOPN 5
54384: END
// export function SOS_UnitDestroyed ( un ) ; begin
54385: LD_INT 0
54387: PPUSH
// ComRadiation ( un ) ;
54388: LD_VAR 0 1
54392: PPUSH
54393: CALL 55555 0 1
// end ;
54397: LD_VAR 0 2
54401: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54402: LD_INT 0
54404: PPUSH
// ComRadiation ( un ) ;
54405: LD_VAR 0 1
54409: PPUSH
54410: CALL 55555 0 1
// end ;
54414: LD_VAR 0 2
54418: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54419: LD_INT 0
54421: PPUSH
// end ;
54422: LD_VAR 0 4
54426: RET
// export function SOS_Command ( cmd ) ; begin
54427: LD_INT 0
54429: PPUSH
// end ;
54430: LD_VAR 0 2
54434: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54435: LD_INT 0
54437: PPUSH
// end ;
54438: LD_VAR 0 6
54442: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54443: LD_INT 0
54445: PPUSH
54446: PPUSH
54447: PPUSH
54448: PPUSH
54449: PPUSH
// if not vehicle or not factory then
54450: LD_VAR 0 1
54454: NOT
54455: IFTRUE 54464
54457: PUSH
54458: LD_VAR 0 2
54462: NOT
54463: OR
54464: IFFALSE 54468
// exit ;
54466: GO 55130
// weapon := GetWeapon ( vehicle ) ;
54468: LD_ADDR_VAR 0 7
54472: PUSH
54473: LD_VAR 0 1
54477: PPUSH
54478: CALL_OW 264
54482: ST_TO_ADDR
// if weapon = ar_miner then
54483: LD_VAR 0 7
54487: PUSH
54488: LD_INT 81
54490: EQUAL
54491: IFFALSE 54548
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54493: LD_ADDR_EXP 56
54497: PUSH
54498: LD_EXP 56
54502: PPUSH
54503: LD_EXP 56
54507: PUSH
54508: LD_INT 1
54510: PLUS
54511: PPUSH
54512: LD_VAR 0 1
54516: PPUSH
54517: CALL_OW 1
54521: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54522: LD_ADDR_EXP 57
54526: PUSH
54527: LD_EXP 57
54531: PPUSH
54532: LD_EXP 57
54536: PUSH
54537: LD_INT 1
54539: PLUS
54540: PPUSH
54541: EMPTY
54542: PPUSH
54543: CALL_OW 1
54547: ST_TO_ADDR
// end ; if not factoryWaypoints then
54548: LD_EXP 60
54552: NOT
54553: IFFALSE 54557
// exit ;
54555: GO 55130
// for i := 1 to Count ( factoryWaypoints ) do
54557: LD_ADDR_VAR 0 4
54561: PUSH
54562: DOUBLE
54563: LD_INT 1
54565: DEC
54566: ST_TO_ADDR
54567: LD_EXP 60
54571: PPUSH
54572: CALL 12902 0 1
54576: PUSH
54577: FOR_TO
54578: IFFALSE 55128
// if factoryWaypoints [ i ] [ 2 ] = factory then
54580: LD_EXP 60
54584: PUSH
54585: LD_VAR 0 4
54589: ARRAY
54590: PUSH
54591: LD_INT 2
54593: ARRAY
54594: PUSH
54595: LD_VAR 0 2
54599: EQUAL
54600: IFFALSE 55126
// begin if GetControl ( vehicle ) = control_manual then
54602: LD_VAR 0 1
54606: PPUSH
54607: CALL_OW 263
54611: PUSH
54612: LD_INT 1
54614: EQUAL
54615: IFFALSE 54979
// begin driver := IsDrivenBy ( vehicle ) ;
54617: LD_ADDR_VAR 0 5
54621: PUSH
54622: LD_VAR 0 1
54626: PPUSH
54627: CALL_OW 311
54631: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54632: LD_VAR 0 5
54636: PUSH
54637: LD_EXP 61
54641: IN
54642: IFTRUE 54656
54644: PUSH
54645: LD_VAR 0 1
54649: PUSH
54650: LD_EXP 61
54654: IN
54655: OR
54656: IFFALSE 54662
// exit ;
54658: POP
54659: POP
54660: GO 55130
// if not HasTask ( driver ) then
54662: LD_VAR 0 5
54666: PPUSH
54667: CALL_OW 314
54671: NOT
54672: IFFALSE 54977
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54674: LD_ADDR_EXP 61
54678: PUSH
54679: LD_EXP 61
54683: PPUSH
54684: LD_VAR 0 5
54688: PPUSH
54689: CALL 48868 0 2
54693: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54694: LD_ADDR_EXP 61
54698: PUSH
54699: LD_EXP 61
54703: PPUSH
54704: LD_VAR 0 1
54708: PPUSH
54709: CALL 48868 0 2
54713: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54714: LD_ADDR_VAR 0 6
54718: PUSH
54719: LD_EXP 60
54723: PUSH
54724: LD_VAR 0 4
54728: ARRAY
54729: PUSH
54730: LD_INT 3
54732: ARRAY
54733: PPUSH
54734: LD_EXP 60
54738: PUSH
54739: LD_VAR 0 4
54743: ARRAY
54744: PUSH
54745: LD_INT 4
54747: ARRAY
54748: PPUSH
54749: CALL_OW 428
54753: ST_TO_ADDR
// if hex then
54754: LD_VAR 0 6
54758: IFFALSE 54776
// ComMoveUnit ( driver , hex ) else
54760: LD_VAR 0 5
54764: PPUSH
54765: LD_VAR 0 6
54769: PPUSH
54770: CALL_OW 112
54774: GO 54860
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54776: LD_VAR 0 1
54780: PPUSH
54781: LD_EXP 60
54785: PUSH
54786: LD_VAR 0 4
54790: ARRAY
54791: PUSH
54792: LD_INT 3
54794: ARRAY
54795: PPUSH
54796: LD_EXP 60
54800: PUSH
54801: LD_VAR 0 4
54805: ARRAY
54806: PUSH
54807: LD_INT 4
54809: ARRAY
54810: PPUSH
54811: CALL_OW 297
54815: PUSH
54816: LD_INT 0
54818: GREATER
54819: IFFALSE 54860
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54821: LD_VAR 0 5
54825: PPUSH
54826: LD_EXP 60
54830: PUSH
54831: LD_VAR 0 4
54835: ARRAY
54836: PUSH
54837: LD_INT 3
54839: ARRAY
54840: PPUSH
54841: LD_EXP 60
54845: PUSH
54846: LD_VAR 0 4
54850: ARRAY
54851: PUSH
54852: LD_INT 4
54854: ARRAY
54855: PPUSH
54856: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54860: LD_VAR 0 5
54864: PPUSH
54865: CALL_OW 181
// if Multiplayer then
54869: LD_OWVAR 4
54873: IFFALSE 54922
// begin repeat wait ( 10 ) ;
54875: LD_INT 10
54877: PPUSH
54878: CALL_OW 67
// until not IsInUnit ( driver ) ;
54882: LD_VAR 0 5
54886: PPUSH
54887: CALL_OW 310
54891: NOT
54892: IFFALSE 54875
// if not HasTask ( driver ) then
54894: LD_VAR 0 5
54898: PPUSH
54899: CALL_OW 314
54903: NOT
54904: IFFALSE 54920
// ComEnterUnit ( driver , factory ) ;
54906: LD_VAR 0 5
54910: PPUSH
54911: LD_VAR 0 2
54915: PPUSH
54916: CALL_OW 120
// end else
54920: GO 54936
// AddComEnterUnit ( driver , factory ) ;
54922: LD_VAR 0 5
54926: PPUSH
54927: LD_VAR 0 2
54931: PPUSH
54932: CALL_OW 180
// wait ( 0 0$1 ) ;
54936: LD_INT 35
54938: PPUSH
54939: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54943: LD_ADDR_EXP 61
54947: PUSH
54948: LD_EXP 61
54952: PUSH
54953: LD_VAR 0 5
54957: DIFF
54958: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54959: LD_ADDR_EXP 61
54963: PUSH
54964: LD_EXP 61
54968: PUSH
54969: LD_VAR 0 1
54973: DIFF
54974: ST_TO_ADDR
// break ;
54975: GO 55128
// end ; end else
54977: GO 55126
// if GetControl ( vehicle ) = control_remote then
54979: LD_VAR 0 1
54983: PPUSH
54984: CALL_OW 263
54988: PUSH
54989: LD_INT 2
54991: EQUAL
54992: IFFALSE 55078
// begin wait ( 0 0$2 ) ;
54994: LD_INT 70
54996: PPUSH
54997: CALL_OW 67
// repeat wait ( 10 ) ;
55001: LD_INT 10
55003: PPUSH
55004: CALL_OW 67
// Connect ( vehicle ) ;
55008: LD_VAR 0 1
55012: PPUSH
55013: CALL 19180 0 1
// until IsControledBy ( vehicle ) ;
55017: LD_VAR 0 1
55021: PPUSH
55022: CALL_OW 312
55026: IFFALSE 55001
// wait ( 10 ) ;
55028: LD_INT 10
55030: PPUSH
55031: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55035: LD_VAR 0 1
55039: PPUSH
55040: LD_EXP 60
55044: PUSH
55045: LD_VAR 0 4
55049: ARRAY
55050: PUSH
55051: LD_INT 3
55053: ARRAY
55054: PPUSH
55055: LD_EXP 60
55059: PUSH
55060: LD_VAR 0 4
55064: ARRAY
55065: PUSH
55066: LD_INT 4
55068: ARRAY
55069: PPUSH
55070: CALL_OW 111
// break ;
55074: GO 55128
// end else
55076: GO 55126
// begin wait ( 0 0$3 ) ;
55078: LD_INT 105
55080: PPUSH
55081: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55085: LD_VAR 0 1
55089: PPUSH
55090: LD_EXP 60
55094: PUSH
55095: LD_VAR 0 4
55099: ARRAY
55100: PUSH
55101: LD_INT 3
55103: ARRAY
55104: PPUSH
55105: LD_EXP 60
55109: PUSH
55110: LD_VAR 0 4
55114: ARRAY
55115: PUSH
55116: LD_INT 4
55118: ARRAY
55119: PPUSH
55120: CALL_OW 111
// break ;
55124: GO 55128
// end ; end ;
55126: GO 54577
55128: POP
55129: POP
// end ;
55130: LD_VAR 0 3
55134: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55135: LD_INT 0
55137: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55138: LD_VAR 0 1
55142: PUSH
55143: LD_INT 250
55145: EQUAL
55146: IFFALSE 55163
55148: PUSH
55149: LD_VAR 0 2
55153: PPUSH
55154: CALL_OW 264
55158: PUSH
55159: LD_INT 81
55161: EQUAL
55162: AND
55163: IFFALSE 55184
// MinerPlaceMine ( unit , x , y ) ;
55165: LD_VAR 0 2
55169: PPUSH
55170: LD_VAR 0 4
55174: PPUSH
55175: LD_VAR 0 5
55179: PPUSH
55180: CALL 58465 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55184: LD_VAR 0 1
55188: PUSH
55189: LD_INT 251
55191: EQUAL
55192: IFFALSE 55209
55194: PUSH
55195: LD_VAR 0 2
55199: PPUSH
55200: CALL_OW 264
55204: PUSH
55205: LD_INT 81
55207: EQUAL
55208: AND
55209: IFFALSE 55230
// MinerDetonateMine ( unit , x , y ) ;
55211: LD_VAR 0 2
55215: PPUSH
55216: LD_VAR 0 4
55220: PPUSH
55221: LD_VAR 0 5
55225: PPUSH
55226: CALL 58872 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55230: LD_VAR 0 1
55234: PUSH
55235: LD_INT 252
55237: EQUAL
55238: IFFALSE 55255
55240: PUSH
55241: LD_VAR 0 2
55245: PPUSH
55246: CALL_OW 264
55250: PUSH
55251: LD_INT 81
55253: EQUAL
55254: AND
55255: IFFALSE 55276
// MinerCreateMinefield ( unit , x , y ) ;
55257: LD_VAR 0 2
55261: PPUSH
55262: LD_VAR 0 4
55266: PPUSH
55267: LD_VAR 0 5
55271: PPUSH
55272: CALL 59104 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55276: LD_VAR 0 1
55280: PUSH
55281: LD_INT 253
55283: EQUAL
55284: IFFALSE 55301
55286: PUSH
55287: LD_VAR 0 2
55291: PPUSH
55292: CALL_OW 257
55296: PUSH
55297: LD_INT 5
55299: EQUAL
55300: AND
55301: IFFALSE 55322
// ComBinocular ( unit , x , y ) ;
55303: LD_VAR 0 2
55307: PPUSH
55308: LD_VAR 0 4
55312: PPUSH
55313: LD_VAR 0 5
55317: PPUSH
55318: CALL 59479 0 3
// if selectedUnit then
55322: LD_VAR 0 3
55326: IFFALSE 55386
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55328: LD_VAR 0 1
55332: PUSH
55333: LD_INT 254
55335: EQUAL
55336: IFFALSE 55353
55338: PUSH
55339: LD_VAR 0 2
55343: PPUSH
55344: CALL_OW 264
55348: PUSH
55349: LD_INT 99
55351: EQUAL
55352: AND
55353: IFFALSE 55370
55355: PUSH
55356: LD_VAR 0 3
55360: PPUSH
55361: CALL_OW 263
55365: PUSH
55366: LD_INT 3
55368: EQUAL
55369: AND
55370: IFFALSE 55386
// HackDestroyVehicle ( unit , selectedUnit ) ;
55372: LD_VAR 0 2
55376: PPUSH
55377: LD_VAR 0 3
55381: PPUSH
55382: CALL 57676 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55386: LD_VAR 0 1
55390: PUSH
55391: LD_INT 255
55393: EQUAL
55394: IFFALSE 55418
55396: PUSH
55397: LD_VAR 0 2
55401: PPUSH
55402: CALL_OW 264
55406: PUSH
55407: LD_INT 14
55409: PUSH
55410: LD_INT 53
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: IN
55417: AND
55418: IFFALSE 55436
55420: PUSH
55421: LD_VAR 0 4
55425: PPUSH
55426: LD_VAR 0 5
55430: PPUSH
55431: CALL_OW 488
55435: AND
55436: IFFALSE 55460
// CutTreeXYR ( unit , x , y , 12 ) ;
55438: LD_VAR 0 2
55442: PPUSH
55443: LD_VAR 0 4
55447: PPUSH
55448: LD_VAR 0 5
55452: PPUSH
55453: LD_INT 12
55455: PPUSH
55456: CALL 55651 0 4
// if cmd = 256 then
55460: LD_VAR 0 1
55464: PUSH
55465: LD_INT 256
55467: EQUAL
55468: IFFALSE 55489
// SetFactoryWaypoint ( unit , x , y ) ;
55470: LD_VAR 0 2
55474: PPUSH
55475: LD_VAR 0 4
55479: PPUSH
55480: LD_VAR 0 5
55484: PPUSH
55485: CALL 63145 0 3
// if cmd = 257 then
55489: LD_VAR 0 1
55493: PUSH
55494: LD_INT 257
55496: EQUAL
55497: IFFALSE 55518
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55499: LD_VAR 0 2
55503: PPUSH
55504: LD_VAR 0 4
55508: PPUSH
55509: LD_VAR 0 5
55513: PPUSH
55514: CALL 63641 0 3
// if cmd = 258 then
55518: LD_VAR 0 1
55522: PUSH
55523: LD_INT 258
55525: EQUAL
55526: IFFALSE 55550
// BurnTreeXYR ( unit , x , y , 8 ) ;
55528: LD_VAR 0 2
55532: PPUSH
55533: LD_VAR 0 4
55537: PPUSH
55538: LD_VAR 0 5
55542: PPUSH
55543: LD_INT 8
55545: PPUSH
55546: CALL 56051 0 4
// end ;
55550: LD_VAR 0 6
55554: RET
// export function ComRadiation ( un ) ; var eff ; begin
55555: LD_INT 0
55557: PPUSH
55558: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55559: LD_VAR 0 1
55563: PPUSH
55564: CALL_OW 264
55568: PUSH
55569: LD_INT 91
55571: NONEQUAL
55572: IFFALSE 55576
// exit ;
55574: GO 55646
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55576: LD_INT 68
55578: PPUSH
55579: LD_VAR 0 1
55583: PPUSH
55584: CALL_OW 255
55588: PPUSH
55589: CALL_OW 321
55593: PUSH
55594: LD_INT 2
55596: EQUAL
55597: IFFALSE 55609
// eff := 50 else
55599: LD_ADDR_VAR 0 3
55603: PUSH
55604: LD_INT 50
55606: ST_TO_ADDR
55607: GO 55617
// eff := 25 ;
55609: LD_ADDR_VAR 0 3
55613: PUSH
55614: LD_INT 25
55616: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55617: LD_VAR 0 1
55621: PPUSH
55622: CALL_OW 250
55626: PPUSH
55627: LD_VAR 0 1
55631: PPUSH
55632: CALL_OW 251
55636: PPUSH
55637: LD_VAR 0 3
55641: PPUSH
55642: CALL_OW 495
// end ;
55646: LD_VAR 0 2
55650: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55651: LD_INT 0
55653: PPUSH
55654: PPUSH
55655: PPUSH
55656: PPUSH
55657: PPUSH
55658: PPUSH
55659: PPUSH
55660: PPUSH
55661: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55662: LD_VAR 0 1
55666: PPUSH
55667: CALL_OW 302
55671: NOT
55672: IFTRUE 55691
55674: PUSH
55675: LD_VAR 0 2
55679: PPUSH
55680: LD_VAR 0 3
55684: PPUSH
55685: CALL_OW 488
55689: NOT
55690: OR
55691: IFTRUE 55700
55693: PUSH
55694: LD_VAR 0 4
55698: NOT
55699: OR
55700: IFFALSE 55704
// exit ;
55702: GO 56046
// list := [ ] ;
55704: LD_ADDR_VAR 0 13
55708: PUSH
55709: EMPTY
55710: ST_TO_ADDR
// if x - r < 0 then
55711: LD_VAR 0 2
55715: PUSH
55716: LD_VAR 0 4
55720: MINUS
55721: PUSH
55722: LD_INT 0
55724: LESS
55725: IFFALSE 55737
// min_x := 0 else
55727: LD_ADDR_VAR 0 7
55731: PUSH
55732: LD_INT 0
55734: ST_TO_ADDR
55735: GO 55753
// min_x := x - r ;
55737: LD_ADDR_VAR 0 7
55741: PUSH
55742: LD_VAR 0 2
55746: PUSH
55747: LD_VAR 0 4
55751: MINUS
55752: ST_TO_ADDR
// if y - r < 0 then
55753: LD_VAR 0 3
55757: PUSH
55758: LD_VAR 0 4
55762: MINUS
55763: PUSH
55764: LD_INT 0
55766: LESS
55767: IFFALSE 55779
// min_y := 0 else
55769: LD_ADDR_VAR 0 8
55773: PUSH
55774: LD_INT 0
55776: ST_TO_ADDR
55777: GO 55795
// min_y := y - r ;
55779: LD_ADDR_VAR 0 8
55783: PUSH
55784: LD_VAR 0 3
55788: PUSH
55789: LD_VAR 0 4
55793: MINUS
55794: ST_TO_ADDR
// max_x := x + r ;
55795: LD_ADDR_VAR 0 9
55799: PUSH
55800: LD_VAR 0 2
55804: PUSH
55805: LD_VAR 0 4
55809: PLUS
55810: ST_TO_ADDR
// max_y := y + r ;
55811: LD_ADDR_VAR 0 10
55815: PUSH
55816: LD_VAR 0 3
55820: PUSH
55821: LD_VAR 0 4
55825: PLUS
55826: ST_TO_ADDR
// for _x = min_x to max_x do
55827: LD_ADDR_VAR 0 11
55831: PUSH
55832: DOUBLE
55833: LD_VAR 0 7
55837: DEC
55838: ST_TO_ADDR
55839: LD_VAR 0 9
55843: PUSH
55844: FOR_TO
55845: IFFALSE 55964
// for _y = min_y to max_y do
55847: LD_ADDR_VAR 0 12
55851: PUSH
55852: DOUBLE
55853: LD_VAR 0 8
55857: DEC
55858: ST_TO_ADDR
55859: LD_VAR 0 10
55863: PUSH
55864: FOR_TO
55865: IFFALSE 55960
// begin if not ValidHex ( _x , _y ) then
55867: LD_VAR 0 11
55871: PPUSH
55872: LD_VAR 0 12
55876: PPUSH
55877: CALL_OW 488
55881: NOT
55882: IFFALSE 55886
// continue ;
55884: GO 55864
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55886: LD_VAR 0 11
55890: PPUSH
55891: LD_VAR 0 12
55895: PPUSH
55896: CALL_OW 351
55900: IFFALSE 55918
55902: PUSH
55903: LD_VAR 0 11
55907: PPUSH
55908: LD_VAR 0 12
55912: PPUSH
55913: CALL_OW 554
55917: AND
55918: IFFALSE 55958
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55920: LD_ADDR_VAR 0 13
55924: PUSH
55925: LD_VAR 0 13
55929: PPUSH
55930: LD_VAR 0 13
55934: PUSH
55935: LD_INT 1
55937: PLUS
55938: PPUSH
55939: LD_VAR 0 11
55943: PUSH
55944: LD_VAR 0 12
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PPUSH
55953: CALL_OW 2
55957: ST_TO_ADDR
// end ;
55958: GO 55864
55960: POP
55961: POP
55962: GO 55844
55964: POP
55965: POP
// if not list then
55966: LD_VAR 0 13
55970: NOT
55971: IFFALSE 55975
// exit ;
55973: GO 56046
// for i in list do
55975: LD_ADDR_VAR 0 6
55979: PUSH
55980: LD_VAR 0 13
55984: PUSH
55985: FOR_IN
55986: IFFALSE 56044
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55988: LD_VAR 0 1
55992: PPUSH
55993: LD_STRING M
55995: PUSH
55996: LD_VAR 0 6
56000: PUSH
56001: LD_INT 1
56003: ARRAY
56004: PUSH
56005: LD_VAR 0 6
56009: PUSH
56010: LD_INT 2
56012: ARRAY
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: PUSH
56035: EMPTY
56036: LIST
56037: PPUSH
56038: CALL_OW 447
56042: GO 55985
56044: POP
56045: POP
// end ;
56046: LD_VAR 0 5
56050: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56051: LD_INT 0
56053: PPUSH
56054: PPUSH
56055: PPUSH
56056: PPUSH
56057: PPUSH
56058: PPUSH
56059: PPUSH
56060: PPUSH
56061: PPUSH
56062: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56063: LD_VAR 0 1
56067: PPUSH
56068: CALL_OW 302
56072: NOT
56073: IFTRUE 56092
56075: PUSH
56076: LD_VAR 0 2
56080: PPUSH
56081: LD_VAR 0 3
56085: PPUSH
56086: CALL_OW 488
56090: NOT
56091: OR
56092: IFTRUE 56101
56094: PUSH
56095: LD_VAR 0 4
56099: NOT
56100: OR
56101: IFFALSE 56105
// exit ;
56103: GO 56622
// list := [ ] ;
56105: LD_ADDR_VAR 0 13
56109: PUSH
56110: EMPTY
56111: ST_TO_ADDR
// if x - r < 0 then
56112: LD_VAR 0 2
56116: PUSH
56117: LD_VAR 0 4
56121: MINUS
56122: PUSH
56123: LD_INT 0
56125: LESS
56126: IFFALSE 56138
// min_x := 0 else
56128: LD_ADDR_VAR 0 7
56132: PUSH
56133: LD_INT 0
56135: ST_TO_ADDR
56136: GO 56154
// min_x := x - r ;
56138: LD_ADDR_VAR 0 7
56142: PUSH
56143: LD_VAR 0 2
56147: PUSH
56148: LD_VAR 0 4
56152: MINUS
56153: ST_TO_ADDR
// if y - r < 0 then
56154: LD_VAR 0 3
56158: PUSH
56159: LD_VAR 0 4
56163: MINUS
56164: PUSH
56165: LD_INT 0
56167: LESS
56168: IFFALSE 56180
// min_y := 0 else
56170: LD_ADDR_VAR 0 8
56174: PUSH
56175: LD_INT 0
56177: ST_TO_ADDR
56178: GO 56196
// min_y := y - r ;
56180: LD_ADDR_VAR 0 8
56184: PUSH
56185: LD_VAR 0 3
56189: PUSH
56190: LD_VAR 0 4
56194: MINUS
56195: ST_TO_ADDR
// max_x := x + r ;
56196: LD_ADDR_VAR 0 9
56200: PUSH
56201: LD_VAR 0 2
56205: PUSH
56206: LD_VAR 0 4
56210: PLUS
56211: ST_TO_ADDR
// max_y := y + r ;
56212: LD_ADDR_VAR 0 10
56216: PUSH
56217: LD_VAR 0 3
56221: PUSH
56222: LD_VAR 0 4
56226: PLUS
56227: ST_TO_ADDR
// for _x = min_x to max_x do
56228: LD_ADDR_VAR 0 11
56232: PUSH
56233: DOUBLE
56234: LD_VAR 0 7
56238: DEC
56239: ST_TO_ADDR
56240: LD_VAR 0 9
56244: PUSH
56245: FOR_TO
56246: IFFALSE 56365
// for _y = min_y to max_y do
56248: LD_ADDR_VAR 0 12
56252: PUSH
56253: DOUBLE
56254: LD_VAR 0 8
56258: DEC
56259: ST_TO_ADDR
56260: LD_VAR 0 10
56264: PUSH
56265: FOR_TO
56266: IFFALSE 56361
// begin if not ValidHex ( _x , _y ) then
56268: LD_VAR 0 11
56272: PPUSH
56273: LD_VAR 0 12
56277: PPUSH
56278: CALL_OW 488
56282: NOT
56283: IFFALSE 56287
// continue ;
56285: GO 56265
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56287: LD_VAR 0 11
56291: PPUSH
56292: LD_VAR 0 12
56296: PPUSH
56297: CALL_OW 351
56301: IFFALSE 56319
56303: PUSH
56304: LD_VAR 0 11
56308: PPUSH
56309: LD_VAR 0 12
56313: PPUSH
56314: CALL_OW 554
56318: AND
56319: IFFALSE 56359
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56321: LD_ADDR_VAR 0 13
56325: PUSH
56326: LD_VAR 0 13
56330: PPUSH
56331: LD_VAR 0 13
56335: PUSH
56336: LD_INT 1
56338: PLUS
56339: PPUSH
56340: LD_VAR 0 11
56344: PUSH
56345: LD_VAR 0 12
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PPUSH
56354: CALL_OW 2
56358: ST_TO_ADDR
// end ;
56359: GO 56265
56361: POP
56362: POP
56363: GO 56245
56365: POP
56366: POP
// if not list then
56367: LD_VAR 0 13
56371: NOT
56372: IFFALSE 56376
// exit ;
56374: GO 56622
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56376: LD_ADDR_VAR 0 13
56380: PUSH
56381: LD_VAR 0 1
56385: PPUSH
56386: LD_VAR 0 13
56390: PPUSH
56391: LD_INT 1
56393: PPUSH
56394: LD_INT 1
56396: PPUSH
56397: CALL 16308 0 4
56401: ST_TO_ADDR
// ComStop ( flame ) ;
56402: LD_VAR 0 1
56406: PPUSH
56407: CALL_OW 141
// for i in list do
56411: LD_ADDR_VAR 0 6
56415: PUSH
56416: LD_VAR 0 13
56420: PUSH
56421: FOR_IN
56422: IFFALSE 56453
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56424: LD_VAR 0 1
56428: PPUSH
56429: LD_VAR 0 6
56433: PUSH
56434: LD_INT 1
56436: ARRAY
56437: PPUSH
56438: LD_VAR 0 6
56442: PUSH
56443: LD_INT 2
56445: ARRAY
56446: PPUSH
56447: CALL_OW 176
56451: GO 56421
56453: POP
56454: POP
// repeat wait ( 0 0$1 ) ;
56455: LD_INT 35
56457: PPUSH
56458: CALL_OW 67
// task := GetTaskList ( flame ) ;
56462: LD_ADDR_VAR 0 14
56466: PUSH
56467: LD_VAR 0 1
56471: PPUSH
56472: CALL_OW 437
56476: ST_TO_ADDR
// if not task then
56477: LD_VAR 0 14
56481: NOT
56482: IFFALSE 56486
// exit ;
56484: GO 56622
// if task [ 1 ] [ 1 ] <> | then
56486: LD_VAR 0 14
56490: PUSH
56491: LD_INT 1
56493: ARRAY
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PUSH
56499: LD_STRING |
56501: NONEQUAL
56502: IFFALSE 56506
// exit ;
56504: GO 56622
// _x := task [ 1 ] [ 2 ] ;
56506: LD_ADDR_VAR 0 11
56510: PUSH
56511: LD_VAR 0 14
56515: PUSH
56516: LD_INT 1
56518: ARRAY
56519: PUSH
56520: LD_INT 2
56522: ARRAY
56523: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56524: LD_ADDR_VAR 0 12
56528: PUSH
56529: LD_VAR 0 14
56533: PUSH
56534: LD_INT 1
56536: ARRAY
56537: PUSH
56538: LD_INT 3
56540: ARRAY
56541: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56542: LD_VAR 0 11
56546: PPUSH
56547: LD_VAR 0 12
56551: PPUSH
56552: CALL_OW 351
56556: NOT
56557: IFTRUE 56576
56559: PUSH
56560: LD_VAR 0 11
56564: PPUSH
56565: LD_VAR 0 12
56569: PPUSH
56570: CALL_OW 554
56574: NOT
56575: OR
56576: IFFALSE 56610
// begin task := Delete ( task , 1 ) ;
56578: LD_ADDR_VAR 0 14
56582: PUSH
56583: LD_VAR 0 14
56587: PPUSH
56588: LD_INT 1
56590: PPUSH
56591: CALL_OW 3
56595: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56596: LD_VAR 0 1
56600: PPUSH
56601: LD_VAR 0 14
56605: PPUSH
56606: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56610: LD_VAR 0 1
56614: PPUSH
56615: CALL_OW 314
56619: NOT
56620: IFFALSE 56455
// end ;
56622: LD_VAR 0 5
56626: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56627: LD_EXP 49
56631: NOT
56632: IFFALSE 56682
56634: GO 56636
56636: DISABLE
// begin initHack := true ;
56637: LD_ADDR_EXP 49
56641: PUSH
56642: LD_INT 1
56644: ST_TO_ADDR
// hackTanks := [ ] ;
56645: LD_ADDR_EXP 50
56649: PUSH
56650: EMPTY
56651: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56652: LD_ADDR_EXP 51
56656: PUSH
56657: EMPTY
56658: ST_TO_ADDR
// hackLimit := 3 ;
56659: LD_ADDR_EXP 52
56663: PUSH
56664: LD_INT 3
56666: ST_TO_ADDR
// hackDist := 12 ;
56667: LD_ADDR_EXP 53
56671: PUSH
56672: LD_INT 12
56674: ST_TO_ADDR
// hackCounter := [ ] ;
56675: LD_ADDR_EXP 54
56679: PUSH
56680: EMPTY
56681: ST_TO_ADDR
// end ;
56682: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56683: LD_EXP 49
56687: IFFALSE 56705
56689: PUSH
56690: LD_INT 34
56692: PUSH
56693: LD_INT 99
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PPUSH
56700: CALL_OW 69
56704: AND
56705: IFFALSE 56958
56707: GO 56709
56709: DISABLE
56710: LD_INT 0
56712: PPUSH
56713: PPUSH
// begin enable ;
56714: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56715: LD_ADDR_VAR 0 1
56719: PUSH
56720: LD_INT 34
56722: PUSH
56723: LD_INT 99
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PPUSH
56730: CALL_OW 69
56734: PUSH
56735: FOR_IN
56736: IFFALSE 56956
// begin if not i in hackTanks then
56738: LD_VAR 0 1
56742: PUSH
56743: LD_EXP 50
56747: IN
56748: NOT
56749: IFFALSE 56832
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56751: LD_ADDR_EXP 50
56755: PUSH
56756: LD_EXP 50
56760: PPUSH
56761: LD_EXP 50
56765: PUSH
56766: LD_INT 1
56768: PLUS
56769: PPUSH
56770: LD_VAR 0 1
56774: PPUSH
56775: CALL_OW 1
56779: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56780: LD_ADDR_EXP 51
56784: PUSH
56785: LD_EXP 51
56789: PPUSH
56790: LD_EXP 51
56794: PUSH
56795: LD_INT 1
56797: PLUS
56798: PPUSH
56799: EMPTY
56800: PPUSH
56801: CALL_OW 1
56805: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56806: LD_ADDR_EXP 54
56810: PUSH
56811: LD_EXP 54
56815: PPUSH
56816: LD_EXP 54
56820: PUSH
56821: LD_INT 1
56823: PLUS
56824: PPUSH
56825: EMPTY
56826: PPUSH
56827: CALL_OW 1
56831: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56832: LD_VAR 0 1
56836: PPUSH
56837: CALL_OW 302
56841: NOT
56842: IFFALSE 56855
// begin HackUnlinkAll ( i ) ;
56844: LD_VAR 0 1
56848: PPUSH
56849: CALL 56961 0 1
// continue ;
56853: GO 56735
// end ; HackCheckCapturedStatus ( i ) ;
56855: LD_VAR 0 1
56859: PPUSH
56860: CALL 57406 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56864: LD_ADDR_VAR 0 2
56868: PUSH
56869: LD_INT 81
56871: PUSH
56872: LD_VAR 0 1
56876: PPUSH
56877: CALL_OW 255
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 33
56888: PUSH
56889: LD_INT 3
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 91
56898: PUSH
56899: LD_VAR 0 1
56903: PUSH
56904: LD_EXP 53
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 50
56916: PUSH
56917: EMPTY
56918: LIST
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: PPUSH
56926: CALL_OW 69
56930: ST_TO_ADDR
// if not tmp then
56931: LD_VAR 0 2
56935: NOT
56936: IFFALSE 56940
// continue ;
56938: GO 56735
// HackLink ( i , tmp ) ;
56940: LD_VAR 0 1
56944: PPUSH
56945: LD_VAR 0 2
56949: PPUSH
56950: CALL 57097 0 2
// end ;
56954: GO 56735
56956: POP
56957: POP
// end ;
56958: PPOPN 2
56960: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56961: LD_INT 0
56963: PPUSH
56964: PPUSH
56965: PPUSH
// if not hack in hackTanks then
56966: LD_VAR 0 1
56970: PUSH
56971: LD_EXP 50
56975: IN
56976: NOT
56977: IFFALSE 56981
// exit ;
56979: GO 57092
// index := GetElementIndex ( hackTanks , hack ) ;
56981: LD_ADDR_VAR 0 4
56985: PUSH
56986: LD_EXP 50
56990: PPUSH
56991: LD_VAR 0 1
56995: PPUSH
56996: CALL 15603 0 2
57000: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57001: LD_EXP 51
57005: PUSH
57006: LD_VAR 0 4
57010: ARRAY
57011: IFFALSE 57092
// begin for i in hackTanksCaptured [ index ] do
57013: LD_ADDR_VAR 0 3
57017: PUSH
57018: LD_EXP 51
57022: PUSH
57023: LD_VAR 0 4
57027: ARRAY
57028: PUSH
57029: FOR_IN
57030: IFFALSE 57056
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57032: LD_VAR 0 3
57036: PUSH
57037: LD_INT 1
57039: ARRAY
57040: PPUSH
57041: LD_VAR 0 3
57045: PUSH
57046: LD_INT 2
57048: ARRAY
57049: PPUSH
57050: CALL_OW 235
57054: GO 57029
57056: POP
57057: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57058: LD_ADDR_EXP 51
57062: PUSH
57063: LD_EXP 51
57067: PPUSH
57068: LD_VAR 0 4
57072: PPUSH
57073: EMPTY
57074: PPUSH
57075: CALL_OW 1
57079: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57080: LD_VAR 0 1
57084: PPUSH
57085: LD_INT 0
57087: PPUSH
57088: CALL_OW 505
// end ; end ;
57092: LD_VAR 0 2
57096: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57097: LD_INT 0
57099: PPUSH
57100: PPUSH
57101: PPUSH
// if not hack in hackTanks or not vehicles then
57102: LD_VAR 0 1
57106: PUSH
57107: LD_EXP 50
57111: IN
57112: NOT
57113: IFTRUE 57122
57115: PUSH
57116: LD_VAR 0 2
57120: NOT
57121: OR
57122: IFFALSE 57126
// exit ;
57124: GO 57401
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57126: LD_ADDR_VAR 0 2
57130: PUSH
57131: LD_VAR 0 1
57135: PPUSH
57136: LD_VAR 0 2
57140: PPUSH
57141: LD_INT 1
57143: PPUSH
57144: LD_INT 1
57146: PPUSH
57147: CALL 16255 0 4
57151: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57152: LD_ADDR_VAR 0 5
57156: PUSH
57157: LD_EXP 50
57161: PPUSH
57162: LD_VAR 0 1
57166: PPUSH
57167: CALL 15603 0 2
57171: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57172: LD_EXP 51
57176: PUSH
57177: LD_VAR 0 5
57181: ARRAY
57182: PUSH
57183: LD_EXP 52
57187: LESS
57188: IFFALSE 57377
// begin for i := 1 to vehicles do
57190: LD_ADDR_VAR 0 4
57194: PUSH
57195: DOUBLE
57196: LD_INT 1
57198: DEC
57199: ST_TO_ADDR
57200: LD_VAR 0 2
57204: PUSH
57205: FOR_TO
57206: IFFALSE 57375
// begin if hackTanksCaptured [ index ] = hackLimit then
57208: LD_EXP 51
57212: PUSH
57213: LD_VAR 0 5
57217: ARRAY
57218: PUSH
57219: LD_EXP 52
57223: EQUAL
57224: IFFALSE 57228
// break ;
57226: GO 57375
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57228: LD_ADDR_EXP 54
57232: PUSH
57233: LD_EXP 54
57237: PPUSH
57238: LD_VAR 0 5
57242: PPUSH
57243: LD_EXP 54
57247: PUSH
57248: LD_VAR 0 5
57252: ARRAY
57253: PUSH
57254: LD_INT 1
57256: PLUS
57257: PPUSH
57258: CALL_OW 1
57262: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57263: LD_ADDR_EXP 51
57267: PUSH
57268: LD_EXP 51
57272: PPUSH
57273: LD_VAR 0 5
57277: PUSH
57278: LD_EXP 51
57282: PUSH
57283: LD_VAR 0 5
57287: ARRAY
57288: PUSH
57289: LD_INT 1
57291: PLUS
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PPUSH
57297: LD_VAR 0 2
57301: PUSH
57302: LD_VAR 0 4
57306: ARRAY
57307: PUSH
57308: LD_VAR 0 2
57312: PUSH
57313: LD_VAR 0 4
57317: ARRAY
57318: PPUSH
57319: CALL_OW 255
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PPUSH
57328: CALL 15820 0 3
57332: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57333: LD_VAR 0 2
57337: PUSH
57338: LD_VAR 0 4
57342: ARRAY
57343: PPUSH
57344: LD_VAR 0 1
57348: PPUSH
57349: CALL_OW 255
57353: PPUSH
57354: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57358: LD_VAR 0 2
57362: PUSH
57363: LD_VAR 0 4
57367: ARRAY
57368: PPUSH
57369: CALL_OW 141
// end ;
57373: GO 57205
57375: POP
57376: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57377: LD_VAR 0 1
57381: PPUSH
57382: LD_EXP 51
57386: PUSH
57387: LD_VAR 0 5
57391: ARRAY
57392: PUSH
57393: LD_INT 0
57395: PLUS
57396: PPUSH
57397: CALL_OW 505
// end ;
57401: LD_VAR 0 3
57405: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57406: LD_INT 0
57408: PPUSH
57409: PPUSH
57410: PPUSH
57411: PPUSH
// if not hack in hackTanks then
57412: LD_VAR 0 1
57416: PUSH
57417: LD_EXP 50
57421: IN
57422: NOT
57423: IFFALSE 57427
// exit ;
57425: GO 57671
// index := GetElementIndex ( hackTanks , hack ) ;
57427: LD_ADDR_VAR 0 4
57431: PUSH
57432: LD_EXP 50
57436: PPUSH
57437: LD_VAR 0 1
57441: PPUSH
57442: CALL 15603 0 2
57446: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57447: LD_ADDR_VAR 0 3
57451: PUSH
57452: DOUBLE
57453: LD_EXP 51
57457: PUSH
57458: LD_VAR 0 4
57462: ARRAY
57463: INC
57464: ST_TO_ADDR
57465: LD_INT 1
57467: PUSH
57468: FOR_DOWNTO
57469: IFFALSE 57645
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57471: LD_ADDR_VAR 0 5
57475: PUSH
57476: LD_EXP 51
57480: PUSH
57481: LD_VAR 0 4
57485: ARRAY
57486: PUSH
57487: LD_VAR 0 3
57491: ARRAY
57492: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57493: LD_VAR 0 5
57497: PUSH
57498: LD_INT 1
57500: ARRAY
57501: PPUSH
57502: CALL_OW 302
57506: NOT
57507: IFTRUE 57535
57509: PUSH
57510: LD_VAR 0 5
57514: PUSH
57515: LD_INT 1
57517: ARRAY
57518: PPUSH
57519: CALL_OW 255
57523: PUSH
57524: LD_VAR 0 1
57528: PPUSH
57529: CALL_OW 255
57533: NONEQUAL
57534: OR
57535: IFFALSE 57643
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57537: LD_VAR 0 5
57541: PUSH
57542: LD_INT 1
57544: ARRAY
57545: PPUSH
57546: CALL_OW 305
57550: IFFALSE 57578
57552: PUSH
57553: LD_VAR 0 5
57557: PUSH
57558: LD_INT 1
57560: ARRAY
57561: PPUSH
57562: CALL_OW 255
57566: PUSH
57567: LD_VAR 0 1
57571: PPUSH
57572: CALL_OW 255
57576: EQUAL
57577: AND
57578: IFFALSE 57602
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57580: LD_VAR 0 5
57584: PUSH
57585: LD_INT 1
57587: ARRAY
57588: PPUSH
57589: LD_VAR 0 5
57593: PUSH
57594: LD_INT 2
57596: ARRAY
57597: PPUSH
57598: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57602: LD_ADDR_EXP 51
57606: PUSH
57607: LD_EXP 51
57611: PPUSH
57612: LD_VAR 0 4
57616: PPUSH
57617: LD_EXP 51
57621: PUSH
57622: LD_VAR 0 4
57626: ARRAY
57627: PPUSH
57628: LD_VAR 0 3
57632: PPUSH
57633: CALL_OW 3
57637: PPUSH
57638: CALL_OW 1
57642: ST_TO_ADDR
// end ; end ;
57643: GO 57468
57645: POP
57646: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57647: LD_VAR 0 1
57651: PPUSH
57652: LD_EXP 51
57656: PUSH
57657: LD_VAR 0 4
57661: ARRAY
57662: PUSH
57663: LD_INT 0
57665: PLUS
57666: PPUSH
57667: CALL_OW 505
// end ;
57671: LD_VAR 0 2
57675: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57676: LD_INT 0
57678: PPUSH
57679: PPUSH
57680: PPUSH
57681: PPUSH
// if not hack in hackTanks then
57682: LD_VAR 0 1
57686: PUSH
57687: LD_EXP 50
57691: IN
57692: NOT
57693: IFFALSE 57697
// exit ;
57695: GO 57782
// index := GetElementIndex ( hackTanks , hack ) ;
57697: LD_ADDR_VAR 0 5
57701: PUSH
57702: LD_EXP 50
57706: PPUSH
57707: LD_VAR 0 1
57711: PPUSH
57712: CALL 15603 0 2
57716: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57717: LD_ADDR_VAR 0 4
57721: PUSH
57722: DOUBLE
57723: LD_INT 1
57725: DEC
57726: ST_TO_ADDR
57727: LD_EXP 51
57731: PUSH
57732: LD_VAR 0 5
57736: ARRAY
57737: PUSH
57738: FOR_TO
57739: IFFALSE 57780
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57741: LD_EXP 51
57745: PUSH
57746: LD_VAR 0 5
57750: ARRAY
57751: PUSH
57752: LD_VAR 0 4
57756: ARRAY
57757: PUSH
57758: LD_INT 1
57760: ARRAY
57761: PUSH
57762: LD_VAR 0 2
57766: EQUAL
57767: IFFALSE 57778
// KillUnit ( vehicle ) ;
57769: LD_VAR 0 2
57773: PPUSH
57774: CALL_OW 66
57778: GO 57738
57780: POP
57781: POP
// end ;
57782: LD_VAR 0 3
57786: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
57787: LD_EXP 55
57791: NOT
57792: IFFALSE 57925
57794: GO 57796
57796: DISABLE
57797: LD_INT 0
57799: PPUSH
// begin initMiner := true ;
57800: LD_ADDR_EXP 55
57804: PUSH
57805: LD_INT 1
57807: ST_TO_ADDR
// minersList := [ ] ;
57808: LD_ADDR_EXP 56
57812: PUSH
57813: EMPTY
57814: ST_TO_ADDR
// minerMinesList := [ ] ;
57815: LD_ADDR_EXP 57
57819: PUSH
57820: EMPTY
57821: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
57822: LD_ADDR_EXP 58
57826: PUSH
57827: LD_INT 6
57829: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57830: LD_ADDR_VAR 0 1
57834: PUSH
57835: LD_INT 34
57837: PUSH
57838: LD_INT 81
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PPUSH
57845: CALL_OW 69
57849: PUSH
57850: FOR_IN
57851: IFFALSE 57923
// begin if not i in minersList then
57853: LD_VAR 0 1
57857: PUSH
57858: LD_EXP 56
57862: IN
57863: NOT
57864: IFFALSE 57921
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57866: LD_ADDR_EXP 56
57870: PUSH
57871: LD_EXP 56
57875: PPUSH
57876: LD_EXP 56
57880: PUSH
57881: LD_INT 1
57883: PLUS
57884: PPUSH
57885: LD_VAR 0 1
57889: PPUSH
57890: CALL_OW 1
57894: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57895: LD_ADDR_EXP 57
57899: PUSH
57900: LD_EXP 57
57904: PPUSH
57905: LD_EXP 57
57909: PUSH
57910: LD_INT 1
57912: PLUS
57913: PPUSH
57914: EMPTY
57915: PPUSH
57916: CALL_OW 1
57920: ST_TO_ADDR
// end end ;
57921: GO 57850
57923: POP
57924: POP
// end ;
57925: PPOPN 1
57927: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
57928: LD_EXP 55
57932: IFFALSE 57963
57934: PUSH
57935: LD_EXP 57
57939: PPUSH
57940: CALL 12902 0 1
57944: IFTRUE 57962
57946: PUSH
57947: LD_INT 34
57949: PUSH
57950: LD_INT 81
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PPUSH
57957: CALL_OW 69
57961: OR
57962: AND
57963: IFFALSE 58462
57965: GO 57967
57967: DISABLE
57968: LD_INT 0
57970: PPUSH
57971: PPUSH
57972: PPUSH
57973: PPUSH
// begin enable ;
57974: ENABLE
// for i := minerMinesList downto 1 do
57975: LD_ADDR_VAR 0 1
57979: PUSH
57980: DOUBLE
57981: LD_EXP 57
57985: INC
57986: ST_TO_ADDR
57987: LD_INT 1
57989: PUSH
57990: FOR_DOWNTO
57991: IFFALSE 58460
// begin if IsLive ( minersList [ i ] ) then
57993: LD_EXP 56
57997: PUSH
57998: LD_VAR 0 1
58002: ARRAY
58003: PPUSH
58004: CALL_OW 300
58008: IFFALSE 58041
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58010: LD_EXP 56
58014: PUSH
58015: LD_VAR 0 1
58019: ARRAY
58020: PPUSH
58021: LD_EXP 57
58025: PUSH
58026: LD_VAR 0 1
58030: ARRAY
58031: PPUSH
58032: CALL 12902 0 1
58036: PPUSH
58037: CALL_OW 505
// if not minerMinesList [ i ] then
58041: LD_EXP 57
58045: PUSH
58046: LD_VAR 0 1
58050: ARRAY
58051: NOT
58052: IFFALSE 58056
// continue ;
58054: GO 57990
// for j := minerMinesList [ i ] downto 1 do
58056: LD_ADDR_VAR 0 2
58060: PUSH
58061: DOUBLE
58062: LD_EXP 57
58066: PUSH
58067: LD_VAR 0 1
58071: ARRAY
58072: INC
58073: ST_TO_ADDR
58074: LD_INT 1
58076: PUSH
58077: FOR_DOWNTO
58078: IFFALSE 58456
// begin side := GetSide ( minersList [ i ] ) ;
58080: LD_ADDR_VAR 0 3
58084: PUSH
58085: LD_EXP 56
58089: PUSH
58090: LD_VAR 0 1
58094: ARRAY
58095: PPUSH
58096: CALL_OW 255
58100: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58101: LD_EXP 56
58105: PUSH
58106: LD_VAR 0 1
58110: ARRAY
58111: PPUSH
58112: CALL_OW 301
58116: IFTRUE 58136
58118: PUSH
58119: LD_EXP 56
58123: PUSH
58124: LD_VAR 0 1
58128: ARRAY
58129: PPUSH
58130: CALL_OW 305
58134: NOT
58135: OR
58136: IFFALSE 58227
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58138: LD_EXP 57
58142: PUSH
58143: LD_VAR 0 1
58147: ARRAY
58148: PUSH
58149: LD_VAR 0 2
58153: ARRAY
58154: PUSH
58155: LD_INT 1
58157: ARRAY
58158: PPUSH
58159: LD_EXP 57
58163: PUSH
58164: LD_VAR 0 1
58168: ARRAY
58169: PUSH
58170: LD_VAR 0 2
58174: ARRAY
58175: PUSH
58176: LD_INT 2
58178: ARRAY
58179: PPUSH
58180: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58184: LD_ADDR_EXP 57
58188: PUSH
58189: LD_EXP 57
58193: PPUSH
58194: LD_VAR 0 1
58198: PPUSH
58199: LD_EXP 57
58203: PUSH
58204: LD_VAR 0 1
58208: ARRAY
58209: PPUSH
58210: LD_VAR 0 2
58214: PPUSH
58215: CALL_OW 3
58219: PPUSH
58220: CALL_OW 1
58224: ST_TO_ADDR
// continue ;
58225: GO 58077
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58227: LD_ADDR_VAR 0 4
58231: PUSH
58232: LD_EXP 57
58236: PUSH
58237: LD_VAR 0 1
58241: ARRAY
58242: PUSH
58243: LD_VAR 0 2
58247: ARRAY
58248: PUSH
58249: LD_INT 1
58251: ARRAY
58252: PPUSH
58253: LD_EXP 57
58257: PUSH
58258: LD_VAR 0 1
58262: ARRAY
58263: PUSH
58264: LD_VAR 0 2
58268: ARRAY
58269: PUSH
58270: LD_INT 2
58272: ARRAY
58273: PPUSH
58274: CALL_OW 428
58278: ST_TO_ADDR
// if not tmp then
58279: LD_VAR 0 4
58283: NOT
58284: IFFALSE 58288
// continue ;
58286: GO 58077
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58288: LD_VAR 0 4
58292: PUSH
58293: LD_INT 81
58295: PUSH
58296: LD_VAR 0 3
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PPUSH
58305: CALL_OW 69
58309: IN
58310: IFFALSE 58360
58312: PUSH
58313: LD_EXP 57
58317: PUSH
58318: LD_VAR 0 1
58322: ARRAY
58323: PUSH
58324: LD_VAR 0 2
58328: ARRAY
58329: PUSH
58330: LD_INT 1
58332: ARRAY
58333: PPUSH
58334: LD_EXP 57
58338: PUSH
58339: LD_VAR 0 1
58343: ARRAY
58344: PUSH
58345: LD_VAR 0 2
58349: ARRAY
58350: PUSH
58351: LD_INT 2
58353: ARRAY
58354: PPUSH
58355: CALL_OW 458
58359: AND
58360: IFFALSE 58454
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58362: LD_EXP 57
58366: PUSH
58367: LD_VAR 0 1
58371: ARRAY
58372: PUSH
58373: LD_VAR 0 2
58377: ARRAY
58378: PUSH
58379: LD_INT 1
58381: ARRAY
58382: PPUSH
58383: LD_EXP 57
58387: PUSH
58388: LD_VAR 0 1
58392: ARRAY
58393: PUSH
58394: LD_VAR 0 2
58398: ARRAY
58399: PUSH
58400: LD_INT 2
58402: ARRAY
58403: PPUSH
58404: LD_VAR 0 3
58408: PPUSH
58409: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58413: LD_ADDR_EXP 57
58417: PUSH
58418: LD_EXP 57
58422: PPUSH
58423: LD_VAR 0 1
58427: PPUSH
58428: LD_EXP 57
58432: PUSH
58433: LD_VAR 0 1
58437: ARRAY
58438: PPUSH
58439: LD_VAR 0 2
58443: PPUSH
58444: CALL_OW 3
58448: PPUSH
58449: CALL_OW 1
58453: ST_TO_ADDR
// end ; end ;
58454: GO 58077
58456: POP
58457: POP
// end ;
58458: GO 57990
58460: POP
58461: POP
// end ;
58462: PPOPN 4
58464: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
58465: LD_INT 0
58467: PPUSH
58468: PPUSH
58469: PPUSH
58470: PPUSH
// result := false ;
58471: LD_ADDR_VAR 0 4
58475: PUSH
58476: LD_INT 0
58478: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58479: LD_VAR 0 1
58483: PPUSH
58484: CALL_OW 264
58488: PUSH
58489: LD_INT 81
58491: EQUAL
58492: NOT
58493: IFFALSE 58497
// exit ;
58495: GO 58867
// side := GetSide ( unit ) ;
58497: LD_ADDR_VAR 0 6
58501: PUSH
58502: LD_VAR 0 1
58506: PPUSH
58507: CALL_OW 255
58511: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
58512: LD_ADDR_VAR 0 5
58516: PUSH
58517: LD_EXP 56
58521: PPUSH
58522: LD_VAR 0 1
58526: PPUSH
58527: CALL 15603 0 2
58531: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58532: LD_EXP 57
58536: PUSH
58537: LD_VAR 0 5
58541: ARRAY
58542: PUSH
58543: LD_EXP 58
58547: GREATEREQUAL
58548: IFFALSE 58552
// exit ;
58550: GO 58867
// ComMoveXY ( unit , x , y ) ;
58552: LD_VAR 0 1
58556: PPUSH
58557: LD_VAR 0 2
58561: PPUSH
58562: LD_VAR 0 3
58566: PPUSH
58567: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58571: LD_INT 35
58573: PPUSH
58574: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58578: LD_VAR 0 1
58582: PPUSH
58583: LD_VAR 0 2
58587: PPUSH
58588: LD_VAR 0 3
58592: PPUSH
58593: CALL 47649 0 3
58597: NOT
58598: IFFALSE 58611
58600: PUSH
58601: LD_VAR 0 1
58605: PPUSH
58606: CALL_OW 314
58610: AND
58611: IFFALSE 58615
// exit ;
58613: GO 58867
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58615: LD_VAR 0 2
58619: PPUSH
58620: LD_VAR 0 3
58624: PPUSH
58625: CALL_OW 428
58629: PUSH
58630: LD_VAR 0 1
58634: EQUAL
58635: IFFALSE 58649
58637: PUSH
58638: LD_VAR 0 1
58642: PPUSH
58643: CALL_OW 314
58647: NOT
58648: AND
58649: IFFALSE 58571
// if MineAtPos ( x , y ) then
58651: LD_VAR 0 2
58655: PPUSH
58656: LD_VAR 0 3
58660: PPUSH
58661: CALL_OW 458
58665: IFFALSE 58669
// exit ;
58667: GO 58867
// if your_side = side then
58669: LD_OWVAR 2
58673: PUSH
58674: LD_VAR 0 6
58678: EQUAL
58679: IFFALSE 58698
// PlaySoundXY ( x , y , PlantMine ) ;
58681: LD_VAR 0 2
58685: PPUSH
58686: LD_VAR 0 3
58690: PPUSH
58691: LD_STRING PlantMine
58693: PPUSH
58694: CALL_OW 366
// repeat wait ( 1 ) ;
58698: LD_INT 1
58700: PPUSH
58701: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
58705: LD_VAR 0 2
58709: PPUSH
58710: LD_VAR 0 3
58714: PPUSH
58715: LD_VAR 0 6
58719: PPUSH
58720: LD_INT 0
58722: PPUSH
58723: CALL_OW 454
58727: IFFALSE 58698
// if MineAtPos ( x , y ) then
58729: LD_VAR 0 2
58733: PPUSH
58734: LD_VAR 0 3
58738: PPUSH
58739: CALL_OW 458
58743: IFFALSE 58859
// begin for i in minerMinesList [ index ] do
58745: LD_ADDR_VAR 0 7
58749: PUSH
58750: LD_EXP 57
58754: PUSH
58755: LD_VAR 0 5
58759: ARRAY
58760: PUSH
58761: FOR_IN
58762: IFFALSE 58804
// if i [ 1 ] = x and i [ 2 ] = y then
58764: LD_VAR 0 7
58768: PUSH
58769: LD_INT 1
58771: ARRAY
58772: PUSH
58773: LD_VAR 0 2
58777: EQUAL
58778: IFFALSE 58796
58780: PUSH
58781: LD_VAR 0 7
58785: PUSH
58786: LD_INT 2
58788: ARRAY
58789: PUSH
58790: LD_VAR 0 3
58794: EQUAL
58795: AND
58796: IFFALSE 58802
// exit ;
58798: POP
58799: POP
58800: GO 58867
58802: GO 58761
58804: POP
58805: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58806: LD_ADDR_EXP 57
58810: PUSH
58811: LD_EXP 57
58815: PPUSH
58816: LD_VAR 0 5
58820: PUSH
58821: LD_EXP 57
58825: PUSH
58826: LD_VAR 0 5
58830: ARRAY
58831: PUSH
58832: LD_INT 1
58834: PLUS
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PPUSH
58840: LD_VAR 0 2
58844: PUSH
58845: LD_VAR 0 3
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PPUSH
58854: CALL 15820 0 3
58858: ST_TO_ADDR
// end ; result := true ;
58859: LD_ADDR_VAR 0 4
58863: PUSH
58864: LD_INT 1
58866: ST_TO_ADDR
// end ;
58867: LD_VAR 0 4
58871: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58872: LD_INT 0
58874: PPUSH
58875: PPUSH
58876: PPUSH
// if not unit in minersList then
58877: LD_VAR 0 1
58881: PUSH
58882: LD_EXP 56
58886: IN
58887: NOT
58888: IFFALSE 58892
// exit ;
58890: GO 59099
// index := GetElementIndex ( minersList , unit ) ;
58892: LD_ADDR_VAR 0 6
58896: PUSH
58897: LD_EXP 56
58901: PPUSH
58902: LD_VAR 0 1
58906: PPUSH
58907: CALL 15603 0 2
58911: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58912: LD_ADDR_VAR 0 5
58916: PUSH
58917: DOUBLE
58918: LD_EXP 57
58922: PUSH
58923: LD_VAR 0 6
58927: ARRAY
58928: INC
58929: ST_TO_ADDR
58930: LD_INT 1
58932: PUSH
58933: FOR_DOWNTO
58934: IFFALSE 59097
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58936: LD_EXP 57
58940: PUSH
58941: LD_VAR 0 6
58945: ARRAY
58946: PUSH
58947: LD_VAR 0 5
58951: ARRAY
58952: PUSH
58953: LD_INT 1
58955: ARRAY
58956: PPUSH
58957: LD_EXP 57
58961: PUSH
58962: LD_VAR 0 6
58966: ARRAY
58967: PUSH
58968: LD_VAR 0 5
58972: ARRAY
58973: PUSH
58974: LD_INT 2
58976: ARRAY
58977: PPUSH
58978: LD_VAR 0 2
58982: PPUSH
58983: LD_VAR 0 3
58987: PPUSH
58988: CALL_OW 298
58992: PUSH
58993: LD_INT 6
58995: LESS
58996: IFFALSE 59095
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58998: LD_EXP 57
59002: PUSH
59003: LD_VAR 0 6
59007: ARRAY
59008: PUSH
59009: LD_VAR 0 5
59013: ARRAY
59014: PUSH
59015: LD_INT 1
59017: ARRAY
59018: PPUSH
59019: LD_EXP 57
59023: PUSH
59024: LD_VAR 0 6
59028: ARRAY
59029: PUSH
59030: LD_VAR 0 5
59034: ARRAY
59035: PUSH
59036: LD_INT 2
59038: ARRAY
59039: PPUSH
59040: LD_VAR 0 1
59044: PPUSH
59045: CALL_OW 255
59049: PPUSH
59050: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59054: LD_ADDR_EXP 57
59058: PUSH
59059: LD_EXP 57
59063: PPUSH
59064: LD_VAR 0 6
59068: PPUSH
59069: LD_EXP 57
59073: PUSH
59074: LD_VAR 0 6
59078: ARRAY
59079: PPUSH
59080: LD_VAR 0 5
59084: PPUSH
59085: CALL_OW 3
59089: PPUSH
59090: CALL_OW 1
59094: ST_TO_ADDR
// end ; end ;
59095: GO 58933
59097: POP
59098: POP
// end ;
59099: LD_VAR 0 4
59103: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59104: LD_INT 0
59106: PPUSH
59107: PPUSH
59108: PPUSH
59109: PPUSH
59110: PPUSH
59111: PPUSH
59112: PPUSH
59113: PPUSH
59114: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59115: LD_VAR 0 1
59119: PPUSH
59120: CALL_OW 264
59124: PUSH
59125: LD_INT 81
59127: EQUAL
59128: NOT
59129: IFTRUE 59144
59131: PUSH
59132: LD_VAR 0 1
59136: PUSH
59137: LD_EXP 56
59141: IN
59142: NOT
59143: OR
59144: IFFALSE 59148
// exit ;
59146: GO 59474
// index := GetElementIndex ( minersList , unit ) ;
59148: LD_ADDR_VAR 0 6
59152: PUSH
59153: LD_EXP 56
59157: PPUSH
59158: LD_VAR 0 1
59162: PPUSH
59163: CALL 15603 0 2
59167: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59168: LD_ADDR_VAR 0 8
59172: PUSH
59173: LD_EXP 58
59177: PUSH
59178: LD_EXP 57
59182: PUSH
59183: LD_VAR 0 6
59187: ARRAY
59188: MINUS
59189: ST_TO_ADDR
// if not minesFreeAmount then
59190: LD_VAR 0 8
59194: NOT
59195: IFFALSE 59199
// exit ;
59197: GO 59474
// tmp := [ ] ;
59199: LD_ADDR_VAR 0 7
59203: PUSH
59204: EMPTY
59205: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59206: LD_ADDR_VAR 0 5
59210: PUSH
59211: DOUBLE
59212: LD_INT 1
59214: DEC
59215: ST_TO_ADDR
59216: LD_VAR 0 8
59220: PUSH
59221: FOR_TO
59222: IFFALSE 59421
// begin _d := rand ( 0 , 5 ) ;
59224: LD_ADDR_VAR 0 11
59228: PUSH
59229: LD_INT 0
59231: PPUSH
59232: LD_INT 5
59234: PPUSH
59235: CALL_OW 12
59239: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59240: LD_ADDR_VAR 0 12
59244: PUSH
59245: LD_INT 2
59247: PPUSH
59248: LD_INT 6
59250: PPUSH
59251: CALL_OW 12
59255: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59256: LD_ADDR_VAR 0 9
59260: PUSH
59261: LD_VAR 0 2
59265: PPUSH
59266: LD_VAR 0 11
59270: PPUSH
59271: LD_VAR 0 12
59275: PPUSH
59276: CALL_OW 272
59280: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59281: LD_ADDR_VAR 0 10
59285: PUSH
59286: LD_VAR 0 3
59290: PPUSH
59291: LD_VAR 0 11
59295: PPUSH
59296: LD_VAR 0 12
59300: PPUSH
59301: CALL_OW 273
59305: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59306: LD_VAR 0 9
59310: PPUSH
59311: LD_VAR 0 10
59315: PPUSH
59316: CALL_OW 488
59320: IFFALSE 59344
59322: PUSH
59323: LD_VAR 0 9
59327: PUSH
59328: LD_VAR 0 10
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_VAR 0 7
59341: IN
59342: NOT
59343: AND
59344: IFFALSE 59363
59346: PUSH
59347: LD_VAR 0 9
59351: PPUSH
59352: LD_VAR 0 10
59356: PPUSH
59357: CALL_OW 458
59361: NOT
59362: AND
59363: IFFALSE 59405
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59365: LD_ADDR_VAR 0 7
59369: PUSH
59370: LD_VAR 0 7
59374: PPUSH
59375: LD_VAR 0 7
59379: PUSH
59380: LD_INT 1
59382: PLUS
59383: PPUSH
59384: LD_VAR 0 9
59388: PUSH
59389: LD_VAR 0 10
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PPUSH
59398: CALL_OW 1
59402: ST_TO_ADDR
59403: GO 59419
// i := i - 1 ;
59405: LD_ADDR_VAR 0 5
59409: PUSH
59410: LD_VAR 0 5
59414: PUSH
59415: LD_INT 1
59417: MINUS
59418: ST_TO_ADDR
// end ;
59419: GO 59221
59421: POP
59422: POP
// for i in tmp do
59423: LD_ADDR_VAR 0 5
59427: PUSH
59428: LD_VAR 0 7
59432: PUSH
59433: FOR_IN
59434: IFFALSE 59472
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59436: LD_VAR 0 1
59440: PPUSH
59441: LD_VAR 0 5
59445: PUSH
59446: LD_INT 1
59448: ARRAY
59449: PPUSH
59450: LD_VAR 0 5
59454: PUSH
59455: LD_INT 2
59457: ARRAY
59458: PPUSH
59459: CALL 58465 0 3
59463: NOT
59464: IFFALSE 59470
// exit ;
59466: POP
59467: POP
59468: GO 59474
59470: GO 59433
59472: POP
59473: POP
// end ;
59474: LD_VAR 0 4
59478: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
59479: LD_INT 0
59481: PPUSH
59482: PPUSH
59483: PPUSH
59484: PPUSH
59485: PPUSH
59486: PPUSH
59487: PPUSH
59488: PPUSH
59489: PPUSH
// if GetClass ( unit ) <> class_sniper then
59490: LD_VAR 0 1
59494: PPUSH
59495: CALL_OW 257
59499: PUSH
59500: LD_INT 5
59502: NONEQUAL
59503: IFFALSE 59507
// exit ;
59505: GO 59977
// dist := 8 ;
59507: LD_ADDR_VAR 0 5
59511: PUSH
59512: LD_INT 8
59514: ST_TO_ADDR
// viewRange := 12 ;
59515: LD_ADDR_VAR 0 8
59519: PUSH
59520: LD_INT 12
59522: ST_TO_ADDR
// side := GetSide ( unit ) ;
59523: LD_ADDR_VAR 0 6
59527: PUSH
59528: LD_VAR 0 1
59532: PPUSH
59533: CALL_OW 255
59537: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59538: LD_INT 61
59540: PPUSH
59541: LD_VAR 0 6
59545: PPUSH
59546: CALL_OW 321
59550: PUSH
59551: LD_INT 2
59553: EQUAL
59554: IFFALSE 59564
// viewRange := 16 ;
59556: LD_ADDR_VAR 0 8
59560: PUSH
59561: LD_INT 16
59563: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59564: LD_VAR 0 1
59568: PPUSH
59569: LD_VAR 0 2
59573: PPUSH
59574: LD_VAR 0 3
59578: PPUSH
59579: CALL_OW 297
59583: PUSH
59584: LD_VAR 0 5
59588: GREATER
59589: IFFALSE 59668
// begin ComMoveXY ( unit , x , y ) ;
59591: LD_VAR 0 1
59595: PPUSH
59596: LD_VAR 0 2
59600: PPUSH
59601: LD_VAR 0 3
59605: PPUSH
59606: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59610: LD_INT 35
59612: PPUSH
59613: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59617: LD_VAR 0 1
59621: PPUSH
59622: LD_VAR 0 2
59626: PPUSH
59627: LD_VAR 0 3
59631: PPUSH
59632: CALL 47649 0 3
59636: NOT
59637: IFFALSE 59641
// exit ;
59639: GO 59977
// until GetDistUnitXY ( unit , x , y ) < dist ;
59641: LD_VAR 0 1
59645: PPUSH
59646: LD_VAR 0 2
59650: PPUSH
59651: LD_VAR 0 3
59655: PPUSH
59656: CALL_OW 297
59660: PUSH
59661: LD_VAR 0 5
59665: LESS
59666: IFFALSE 59610
// end ; ComTurnXY ( unit , x , y ) ;
59668: LD_VAR 0 1
59672: PPUSH
59673: LD_VAR 0 2
59677: PPUSH
59678: LD_VAR 0 3
59682: PPUSH
59683: CALL_OW 118
// repeat if Multiplayer then
59687: LD_OWVAR 4
59691: IFFALSE 59702
// wait ( 35 ) else
59693: LD_INT 35
59695: PPUSH
59696: CALL_OW 67
59700: GO 59709
// wait ( 5 ) ;
59702: LD_INT 5
59704: PPUSH
59705: CALL_OW 67
// _d := GetDir ( unit ) ;
59709: LD_ADDR_VAR 0 11
59713: PUSH
59714: LD_VAR 0 1
59718: PPUSH
59719: CALL_OW 254
59723: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59724: LD_ADDR_VAR 0 7
59728: PUSH
59729: LD_VAR 0 1
59733: PPUSH
59734: CALL_OW 250
59738: PPUSH
59739: LD_VAR 0 1
59743: PPUSH
59744: CALL_OW 251
59748: PPUSH
59749: LD_VAR 0 2
59753: PPUSH
59754: LD_VAR 0 3
59758: PPUSH
59759: CALL 50285 0 4
59763: ST_TO_ADDR
// until dir = _d ;
59764: LD_VAR 0 7
59768: PUSH
59769: LD_VAR 0 11
59773: EQUAL
59774: IFFALSE 59687
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59776: LD_ADDR_VAR 0 9
59780: PUSH
59781: LD_VAR 0 1
59785: PPUSH
59786: CALL_OW 250
59790: PPUSH
59791: LD_VAR 0 7
59795: PPUSH
59796: LD_VAR 0 5
59800: PPUSH
59801: CALL_OW 272
59805: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59806: LD_ADDR_VAR 0 10
59810: PUSH
59811: LD_VAR 0 1
59815: PPUSH
59816: CALL_OW 251
59820: PPUSH
59821: LD_VAR 0 7
59825: PPUSH
59826: LD_VAR 0 5
59830: PPUSH
59831: CALL_OW 273
59835: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59836: LD_VAR 0 9
59840: PPUSH
59841: LD_VAR 0 10
59845: PPUSH
59846: CALL_OW 488
59850: NOT
59851: IFFALSE 59855
// exit ;
59853: GO 59977
// ComAnimCustom ( unit , 1 ) ;
59855: LD_VAR 0 1
59859: PPUSH
59860: LD_INT 1
59862: PPUSH
59863: CALL_OW 592
// p := 0 ;
59867: LD_ADDR_VAR 0 12
59871: PUSH
59872: LD_INT 0
59874: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59875: LD_VAR 0 9
59879: PPUSH
59880: LD_VAR 0 10
59884: PPUSH
59885: LD_VAR 0 6
59889: PPUSH
59890: LD_VAR 0 8
59894: PPUSH
59895: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59899: LD_INT 35
59901: PPUSH
59902: CALL_OW 67
// p := Inc ( p ) ;
59906: LD_ADDR_VAR 0 12
59910: PUSH
59911: LD_VAR 0 12
59915: PPUSH
59916: CALL 50241 0 1
59920: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59921: LD_VAR 0 12
59925: PUSH
59926: LD_INT 3
59928: EQUAL
59929: IFTRUE 59943
59931: PUSH
59932: LD_VAR 0 1
59936: PPUSH
59937: CALL_OW 302
59941: NOT
59942: OR
59943: IFTRUE 59956
59945: PUSH
59946: LD_VAR 0 1
59950: PPUSH
59951: CALL_OW 301
59955: OR
59956: IFFALSE 59899
// RemoveSeeing ( _x , _y , side ) ;
59958: LD_VAR 0 9
59962: PPUSH
59963: LD_VAR 0 10
59967: PPUSH
59968: LD_VAR 0 6
59972: PPUSH
59973: CALL_OW 331
// end ;
59977: LD_VAR 0 4
59981: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
59982: LD_INT 0
59984: PPUSH
59985: PPUSH
59986: PPUSH
59987: PPUSH
59988: PPUSH
59989: PPUSH
59990: PPUSH
59991: PPUSH
59992: PPUSH
59993: PPUSH
59994: PPUSH
// if not unit then
59995: LD_VAR 0 1
59999: NOT
60000: IFFALSE 60004
// exit ;
60002: GO 60275
// side := GetSide ( unit ) ;
60004: LD_ADDR_VAR 0 3
60008: PUSH
60009: LD_VAR 0 1
60013: PPUSH
60014: CALL_OW 255
60018: ST_TO_ADDR
// x := GetX ( unit ) ;
60019: LD_ADDR_VAR 0 5
60023: PUSH
60024: LD_VAR 0 1
60028: PPUSH
60029: CALL_OW 250
60033: ST_TO_ADDR
// y := GetY ( unit ) ;
60034: LD_ADDR_VAR 0 6
60038: PUSH
60039: LD_VAR 0 1
60043: PPUSH
60044: CALL_OW 251
60048: ST_TO_ADDR
// r := 8 ;
60049: LD_ADDR_VAR 0 4
60053: PUSH
60054: LD_INT 8
60056: ST_TO_ADDR
// if x - r < 0 then
60057: LD_VAR 0 5
60061: PUSH
60062: LD_VAR 0 4
60066: MINUS
60067: PUSH
60068: LD_INT 0
60070: LESS
60071: IFFALSE 60083
// min_x := 0 else
60073: LD_ADDR_VAR 0 7
60077: PUSH
60078: LD_INT 0
60080: ST_TO_ADDR
60081: GO 60099
// min_x := x - r ;
60083: LD_ADDR_VAR 0 7
60087: PUSH
60088: LD_VAR 0 5
60092: PUSH
60093: LD_VAR 0 4
60097: MINUS
60098: ST_TO_ADDR
// if y - r < 0 then
60099: LD_VAR 0 6
60103: PUSH
60104: LD_VAR 0 4
60108: MINUS
60109: PUSH
60110: LD_INT 0
60112: LESS
60113: IFFALSE 60125
// min_y := 0 else
60115: LD_ADDR_VAR 0 8
60119: PUSH
60120: LD_INT 0
60122: ST_TO_ADDR
60123: GO 60141
// min_y := y - r ;
60125: LD_ADDR_VAR 0 8
60129: PUSH
60130: LD_VAR 0 6
60134: PUSH
60135: LD_VAR 0 4
60139: MINUS
60140: ST_TO_ADDR
// max_x := x + r ;
60141: LD_ADDR_VAR 0 9
60145: PUSH
60146: LD_VAR 0 5
60150: PUSH
60151: LD_VAR 0 4
60155: PLUS
60156: ST_TO_ADDR
// max_y := y + r ;
60157: LD_ADDR_VAR 0 10
60161: PUSH
60162: LD_VAR 0 6
60166: PUSH
60167: LD_VAR 0 4
60171: PLUS
60172: ST_TO_ADDR
// for _x = min_x to max_x do
60173: LD_ADDR_VAR 0 11
60177: PUSH
60178: DOUBLE
60179: LD_VAR 0 7
60183: DEC
60184: ST_TO_ADDR
60185: LD_VAR 0 9
60189: PUSH
60190: FOR_TO
60191: IFFALSE 60273
// for _y = min_y to max_y do
60193: LD_ADDR_VAR 0 12
60197: PUSH
60198: DOUBLE
60199: LD_VAR 0 8
60203: DEC
60204: ST_TO_ADDR
60205: LD_VAR 0 10
60209: PUSH
60210: FOR_TO
60211: IFFALSE 60269
// begin if not ValidHex ( _x , _y ) then
60213: LD_VAR 0 11
60217: PPUSH
60218: LD_VAR 0 12
60222: PPUSH
60223: CALL_OW 488
60227: NOT
60228: IFFALSE 60232
// continue ;
60230: GO 60210
// if MineAtPos ( _x , _y ) then
60232: LD_VAR 0 11
60236: PPUSH
60237: LD_VAR 0 12
60241: PPUSH
60242: CALL_OW 458
60246: IFFALSE 60267
// ViewMineAtPos ( _x , _y , side ) ;
60248: LD_VAR 0 11
60252: PPUSH
60253: LD_VAR 0 12
60257: PPUSH
60258: LD_VAR 0 3
60262: PPUSH
60263: CALL_OW 457
// end ;
60267: GO 60210
60269: POP
60270: POP
60271: GO 60190
60273: POP
60274: POP
// end ;
60275: LD_VAR 0 2
60279: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
60280: LD_INT 0
60282: PPUSH
60283: PPUSH
60284: PPUSH
60285: PPUSH
60286: PPUSH
60287: PPUSH
// if not units then
60288: LD_VAR 0 1
60292: NOT
60293: IFFALSE 60297
// exit ;
60295: GO 60727
// scaners := [ ] ;
60297: LD_ADDR_VAR 0 6
60301: PUSH
60302: EMPTY
60303: ST_TO_ADDR
// for i in units do
60304: LD_ADDR_VAR 0 3
60308: PUSH
60309: LD_VAR 0 1
60313: PUSH
60314: FOR_IN
60315: IFFALSE 60472
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60317: LD_VAR 0 3
60321: PPUSH
60322: CALL_OW 264
60326: PUSH
60327: LD_INT 11
60329: NONEQUAL
60330: IFTRUE 60344
60332: PUSH
60333: LD_VAR 0 3
60337: PPUSH
60338: CALL_OW 302
60342: NOT
60343: OR
60344: IFTRUE 60361
60346: PUSH
60347: LD_VAR 0 3
60351: PPUSH
60352: CALL_OW 110
60356: PUSH
60357: LD_INT 502
60359: EQUAL
60360: OR
60361: IFFALSE 60365
// continue ;
60363: GO 60314
// ComStop ( i ) ;
60365: LD_VAR 0 3
60369: PPUSH
60370: CALL_OW 141
// x := GetX ( i ) ;
60374: LD_ADDR_VAR 0 4
60378: PUSH
60379: LD_VAR 0 3
60383: PPUSH
60384: CALL_OW 250
60388: ST_TO_ADDR
// y := GetY ( i ) ;
60389: LD_ADDR_VAR 0 5
60393: PUSH
60394: LD_VAR 0 3
60398: PPUSH
60399: CALL_OW 251
60403: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60404: LD_VAR 0 3
60408: PPUSH
60409: CALL_OW 255
60413: PUSH
60414: LD_OWVAR 2
60418: EQUAL
60419: IFFALSE 60438
// PlaySoundXY ( x , y , mineDetector ) ;
60421: LD_VAR 0 4
60425: PPUSH
60426: LD_VAR 0 5
60430: PPUSH
60431: LD_STRING mineDetector
60433: PPUSH
60434: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60438: LD_ADDR_VAR 0 6
60442: PUSH
60443: LD_VAR 0 6
60447: PPUSH
60448: LD_VAR 0 3
60452: PPUSH
60453: CALL 48868 0 2
60457: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60458: LD_VAR 0 3
60462: PPUSH
60463: LD_INT 502
60465: PPUSH
60466: CALL_OW 109
// end ;
60470: GO 60314
60472: POP
60473: POP
// if not scaners then
60474: LD_VAR 0 6
60478: NOT
60479: IFFALSE 60483
// exit ;
60481: GO 60727
// wait ( 3 ) ;
60483: LD_INT 3
60485: PPUSH
60486: CALL_OW 67
// timer := 6 ;
60490: LD_ADDR_VAR 0 7
60494: PUSH
60495: LD_INT 6
60497: ST_TO_ADDR
// repeat for i in scaners do
60498: LD_ADDR_VAR 0 3
60502: PUSH
60503: LD_VAR 0 6
60507: PUSH
60508: FOR_IN
60509: IFFALSE 60625
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
60511: LD_VAR 0 3
60515: PPUSH
60516: CALL_OW 302
60520: NOT
60521: IFTRUE 60534
60523: PUSH
60524: LD_VAR 0 3
60528: PPUSH
60529: CALL_OW 314
60533: OR
60534: IFTRUE 60565
60536: PUSH
60537: LD_VAR 0 3
60541: PPUSH
60542: CALL_OW 263
60546: PUSH
60547: LD_INT 1
60549: EQUAL
60550: IFFALSE 60564
60552: PUSH
60553: LD_VAR 0 3
60557: PPUSH
60558: CALL_OW 311
60562: NOT
60563: AND
60564: OR
60565: IFFALSE 60609
// begin SetUnitDisplayNumber ( i , 0 ) ;
60567: LD_VAR 0 3
60571: PPUSH
60572: LD_INT 0
60574: PPUSH
60575: CALL_OW 505
// SetTag ( i , 0 ) ;
60579: LD_VAR 0 3
60583: PPUSH
60584: LD_INT 0
60586: PPUSH
60587: CALL_OW 109
// scaners := scaners diff i ;
60591: LD_ADDR_VAR 0 6
60595: PUSH
60596: LD_VAR 0 6
60600: PUSH
60601: LD_VAR 0 3
60605: DIFF
60606: ST_TO_ADDR
// continue ;
60607: GO 60508
// end ; SetUnitDisplayNumber ( i , timer ) ;
60609: LD_VAR 0 3
60613: PPUSH
60614: LD_VAR 0 7
60618: PPUSH
60619: CALL_OW 505
// end ;
60623: GO 60508
60625: POP
60626: POP
// if not scaners then
60627: LD_VAR 0 6
60631: NOT
60632: IFFALSE 60636
// exit ;
60634: GO 60727
// timer := Dec ( timer ) ;
60636: LD_ADDR_VAR 0 7
60640: PUSH
60641: LD_VAR 0 7
60645: PPUSH
60646: CALL 50263 0 1
60650: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60651: LD_INT 35
60653: PPUSH
60654: CALL_OW 67
// until timer = 0 ;
60658: LD_VAR 0 7
60662: PUSH
60663: LD_INT 0
60665: EQUAL
60666: IFFALSE 60498
// if not scaners then
60668: LD_VAR 0 6
60672: NOT
60673: IFFALSE 60677
// exit ;
60675: GO 60727
// for i in scaners do
60677: LD_ADDR_VAR 0 3
60681: PUSH
60682: LD_VAR 0 6
60686: PUSH
60687: FOR_IN
60688: IFFALSE 60725
// begin SetUnitDisplayNumber ( i , 0 ) ;
60690: LD_VAR 0 3
60694: PPUSH
60695: LD_INT 0
60697: PPUSH
60698: CALL_OW 505
// SetTag ( i , 0 ) ;
60702: LD_VAR 0 3
60706: PPUSH
60707: LD_INT 0
60709: PPUSH
60710: CALL_OW 109
// RevealDetectorMine ( i ) ;
60714: LD_VAR 0 3
60718: PPUSH
60719: CALL 59982 0 1
// end ;
60723: GO 60687
60725: POP
60726: POP
// end ;
60727: LD_VAR 0 2
60731: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
60732: LD_INT 0
60734: PPUSH
// if p1 = mine_detector_mode then
60735: LD_VAR 0 2
60739: PUSH
60740: LD_INT 103
60742: EQUAL
60743: IFFALSE 60754
// DetectMine ( units ) ;
60745: LD_VAR 0 1
60749: PPUSH
60750: CALL 60280 0 1
// end ; end_of_file
60754: LD_VAR 0 7
60758: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
60759: LD_EXP 39
60763: IFFALSE 61104
60765: GO 60767
60767: DISABLE
60768: LD_INT 0
60770: PPUSH
60771: PPUSH
60772: PPUSH
// begin mpKingPoints := [ ] ;
60773: LD_ADDR_EXP 59
60777: PUSH
60778: EMPTY
60779: ST_TO_ADDR
// if mpTeamGame then
60780: LD_EXP 11
60784: IFFALSE 60838
// begin for i := 1 to Count ( mpTeams ) do
60786: LD_ADDR_VAR 0 1
60790: PUSH
60791: DOUBLE
60792: LD_INT 1
60794: DEC
60795: ST_TO_ADDR
60796: LD_EXP 10
60800: PPUSH
60801: CALL 12902 0 1
60805: PUSH
60806: FOR_TO
60807: IFFALSE 60834
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60809: LD_ADDR_EXP 59
60813: PUSH
60814: LD_EXP 59
60818: PPUSH
60819: LD_VAR 0 1
60823: PPUSH
60824: LD_INT 0
60826: PPUSH
60827: CALL_OW 1
60831: ST_TO_ADDR
60832: GO 60806
60834: POP
60835: POP
// end else
60836: GO 60881
// begin for i := 1 to 8 do
60838: LD_ADDR_VAR 0 1
60842: PUSH
60843: DOUBLE
60844: LD_INT 1
60846: DEC
60847: ST_TO_ADDR
60848: LD_INT 8
60850: PUSH
60851: FOR_TO
60852: IFFALSE 60879
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60854: LD_ADDR_EXP 59
60858: PUSH
60859: LD_EXP 59
60863: PPUSH
60864: LD_VAR 0 1
60868: PPUSH
60869: LD_INT 0
60871: PPUSH
60872: CALL_OW 1
60876: ST_TO_ADDR
60877: GO 60851
60879: POP
60880: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
60881: LD_ADDR_VAR 0 3
60885: PUSH
60886: LD_EXP 2
60890: PPUSH
60891: LD_INT 0
60893: PPUSH
60894: CALL_OW 517
60898: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60899: LD_ADDR_VAR 0 1
60903: PUSH
60904: DOUBLE
60905: LD_INT 1
60907: DEC
60908: ST_TO_ADDR
60909: LD_VAR 0 3
60913: PUSH
60914: LD_INT 1
60916: ARRAY
60917: PUSH
60918: FOR_TO
60919: IFFALSE 60986
// for j := 1 to 8 do
60921: LD_ADDR_VAR 0 2
60925: PUSH
60926: DOUBLE
60927: LD_INT 1
60929: DEC
60930: ST_TO_ADDR
60931: LD_INT 8
60933: PUSH
60934: FOR_TO
60935: IFFALSE 60982
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
60937: LD_VAR 0 3
60941: PUSH
60942: LD_INT 1
60944: ARRAY
60945: PUSH
60946: LD_VAR 0 1
60950: ARRAY
60951: PPUSH
60952: LD_VAR 0 3
60956: PUSH
60957: LD_INT 2
60959: ARRAY
60960: PUSH
60961: LD_VAR 0 1
60965: ARRAY
60966: PPUSH
60967: LD_VAR 0 2
60971: PPUSH
60972: LD_INT 12
60974: NEG
60975: PPUSH
60976: CALL_OW 330
60980: GO 60934
60982: POP
60983: POP
60984: GO 60918
60986: POP
60987: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
60988: LD_EXP 34
60992: PPUSH
60993: LD_INT 1
60995: PPUSH
60996: CALL_OW 424
// UpdateCounter ;
61000: CALL 61610 0 0
// repeat wait ( 0 0$1 ) ;
61004: LD_INT 35
61006: PPUSH
61007: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61011: LD_ADDR_VAR 0 3
61015: PUSH
61016: LD_EXP 34
61020: PPUSH
61021: LD_INT 3
61023: PUSH
61024: LD_INT 57
61026: PUSH
61027: EMPTY
61028: LIST
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 50
61036: PUSH
61037: EMPTY
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: LD_INT 30
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 30
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: LIST
61072: PPUSH
61073: CALL_OW 70
61077: ST_TO_ADDR
// if not tmp then
61078: LD_VAR 0 3
61082: NOT
61083: IFFALSE 61087
// continue ;
61085: GO 61004
// AddPoints ( tmp ) ;
61087: LD_VAR 0 3
61091: PPUSH
61092: CALL 61288 0 1
// UpdateCounter ;
61096: CALL 61610 0 0
// until false ;
61100: LD_INT 0
61102: IFFALSE 61004
// end ;
61104: PPOPN 3
61106: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61107: LD_EXP 39
61111: IFFALSE 61119
61113: PUSH
61114: LD_EXP 37
61118: AND
61119: IFFALSE 61285
61121: GO 61123
61123: DISABLE
61124: LD_INT 0
61126: PPUSH
61127: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61128: LD_ADDR_VAR 0 2
61132: PUSH
61133: LD_EXP 2
61137: PPUSH
61138: LD_INT 0
61140: PPUSH
61141: CALL_OW 517
61145: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61146: LD_ADDR_VAR 0 1
61150: PUSH
61151: DOUBLE
61152: LD_INT 1
61154: DEC
61155: ST_TO_ADDR
61156: LD_VAR 0 2
61160: PUSH
61161: LD_INT 1
61163: ARRAY
61164: PUSH
61165: FOR_TO
61166: IFFALSE 61207
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61168: LD_VAR 0 2
61172: PUSH
61173: LD_INT 1
61175: ARRAY
61176: PUSH
61177: LD_VAR 0 1
61181: ARRAY
61182: PPUSH
61183: LD_VAR 0 2
61187: PUSH
61188: LD_INT 2
61190: ARRAY
61191: PUSH
61192: LD_VAR 0 1
61196: ARRAY
61197: PPUSH
61198: LD_INT 125
61200: PPUSH
61201: CALL_OW 495
61205: GO 61165
61207: POP
61208: POP
// repeat wait ( mpEmissions ) ;
61209: LD_EXP 37
61213: PPUSH
61214: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61218: LD_ADDR_VAR 0 1
61222: PUSH
61223: DOUBLE
61224: LD_INT 1
61226: DEC
61227: ST_TO_ADDR
61228: LD_VAR 0 2
61232: PUSH
61233: LD_INT 1
61235: ARRAY
61236: PUSH
61237: FOR_TO
61238: IFFALSE 61279
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61240: LD_VAR 0 2
61244: PUSH
61245: LD_INT 1
61247: ARRAY
61248: PUSH
61249: LD_VAR 0 1
61253: ARRAY
61254: PPUSH
61255: LD_VAR 0 2
61259: PUSH
61260: LD_INT 2
61262: ARRAY
61263: PUSH
61264: LD_VAR 0 1
61268: ARRAY
61269: PPUSH
61270: LD_INT 15
61272: PPUSH
61273: CALL_OW 495
61277: GO 61237
61279: POP
61280: POP
// until false ;
61281: LD_INT 0
61283: IFFALSE 61209
// end ;
61285: PPOPN 2
61287: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61288: LD_INT 0
61290: PPUSH
61291: PPUSH
61292: PPUSH
61293: PPUSH
61294: PPUSH
// if mpTeamGame then
61295: LD_EXP 11
61299: IFFALSE 61496
// begin first := depots [ 1 ] ;
61301: LD_ADDR_VAR 0 4
61305: PUSH
61306: LD_VAR 0 1
61310: PUSH
61311: LD_INT 1
61313: ARRAY
61314: ST_TO_ADDR
// side := GetSide ( first ) ;
61315: LD_ADDR_VAR 0 6
61319: PUSH
61320: LD_VAR 0 4
61324: PPUSH
61325: CALL_OW 255
61329: ST_TO_ADDR
// for i := 1 to mpTeams do
61330: LD_ADDR_VAR 0 3
61334: PUSH
61335: DOUBLE
61336: LD_INT 1
61338: DEC
61339: ST_TO_ADDR
61340: LD_EXP 10
61344: PUSH
61345: FOR_TO
61346: IFFALSE 61380
// if side in mpTeams [ i ] then
61348: LD_VAR 0 6
61352: PUSH
61353: LD_EXP 10
61357: PUSH
61358: LD_VAR 0 3
61362: ARRAY
61363: IN
61364: IFFALSE 61378
// begin team := i ;
61366: LD_ADDR_VAR 0 5
61370: PUSH
61371: LD_VAR 0 3
61375: ST_TO_ADDR
// break ;
61376: GO 61380
// end ;
61378: GO 61345
61380: POP
61381: POP
// if not team then
61382: LD_VAR 0 5
61386: NOT
61387: IFFALSE 61391
// exit ;
61389: GO 61605
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61391: LD_EXP 34
61395: PPUSH
61396: LD_INT 81
61398: PUSH
61399: LD_VAR 0 6
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PPUSH
61408: CALL_OW 70
61412: IFFALSE 61416
// exit ;
61414: GO 61605
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61416: LD_ADDR_EXP 59
61420: PUSH
61421: LD_EXP 59
61425: PPUSH
61426: LD_VAR 0 5
61430: PPUSH
61431: LD_EXP 59
61435: PUSH
61436: LD_VAR 0 5
61440: ARRAY
61441: PUSH
61442: LD_INT 1
61444: PLUS
61445: PPUSH
61446: CALL_OW 1
61450: ST_TO_ADDR
// for i in mpTeams [ team ] do
61451: LD_ADDR_VAR 0 3
61455: PUSH
61456: LD_EXP 10
61460: PUSH
61461: LD_VAR 0 5
61465: ARRAY
61466: PUSH
61467: FOR_IN
61468: IFFALSE 61492
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
61470: LD_VAR 0 3
61474: PPUSH
61475: LD_EXP 59
61479: PUSH
61480: LD_VAR 0 5
61484: ARRAY
61485: PPUSH
61486: CALL_OW 506
61490: GO 61467
61492: POP
61493: POP
// end else
61494: GO 61605
// begin first := depots [ 1 ] ;
61496: LD_ADDR_VAR 0 4
61500: PUSH
61501: LD_VAR 0 1
61505: PUSH
61506: LD_INT 1
61508: ARRAY
61509: ST_TO_ADDR
// side := GetSide ( first ) ;
61510: LD_ADDR_VAR 0 6
61514: PUSH
61515: LD_VAR 0 4
61519: PPUSH
61520: CALL_OW 255
61524: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61525: LD_EXP 34
61529: PPUSH
61530: LD_INT 81
61532: PUSH
61533: LD_VAR 0 6
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PPUSH
61542: CALL_OW 70
61546: IFFALSE 61550
// exit ;
61548: GO 61605
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
61550: LD_ADDR_EXP 59
61554: PUSH
61555: LD_EXP 59
61559: PPUSH
61560: LD_VAR 0 6
61564: PPUSH
61565: LD_EXP 59
61569: PUSH
61570: LD_VAR 0 6
61574: ARRAY
61575: PUSH
61576: LD_INT 1
61578: PLUS
61579: PPUSH
61580: CALL_OW 1
61584: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
61585: LD_VAR 0 6
61589: PPUSH
61590: LD_EXP 59
61594: PUSH
61595: LD_VAR 0 6
61599: ARRAY
61600: PPUSH
61601: CALL_OW 506
// end ; end ;
61605: LD_VAR 0 2
61609: RET
// function UpdateCounter ; var i ; begin
61610: LD_INT 0
61612: PPUSH
61613: PPUSH
// result := [ ] ;
61614: LD_ADDR_VAR 0 1
61618: PUSH
61619: EMPTY
61620: ST_TO_ADDR
// if mpTeamGame then
61621: LD_EXP 11
61625: IFFALSE 61692
// begin for i := 1 to mpTeams do
61627: LD_ADDR_VAR 0 2
61631: PUSH
61632: DOUBLE
61633: LD_INT 1
61635: DEC
61636: ST_TO_ADDR
61637: LD_EXP 10
61641: PUSH
61642: FOR_TO
61643: IFFALSE 61688
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
61645: LD_ADDR_VAR 0 1
61649: PUSH
61650: LD_VAR 0 1
61654: PUSH
61655: LD_STRING #KingoftheHill-Team
61657: PUSH
61658: LD_VAR 0 2
61662: PUSH
61663: LD_EXP 59
61667: PUSH
61668: LD_VAR 0 2
61672: ARRAY
61673: PUSH
61674: LD_EXP 35
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: ADD
61685: ST_TO_ADDR
61686: GO 61642
61688: POP
61689: POP
// end else
61690: GO 61765
// begin for i := 1 to 8 do
61692: LD_ADDR_VAR 0 2
61696: PUSH
61697: DOUBLE
61698: LD_INT 1
61700: DEC
61701: ST_TO_ADDR
61702: LD_INT 8
61704: PUSH
61705: FOR_TO
61706: IFFALSE 61763
// if mpSidePositions [ i ] then
61708: LD_EXP 7
61712: PUSH
61713: LD_VAR 0 2
61717: ARRAY
61718: IFFALSE 61761
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
61720: LD_ADDR_VAR 0 1
61724: PUSH
61725: LD_VAR 0 1
61729: PUSH
61730: LD_STRING #KingoftheHill-Player
61732: PUSH
61733: LD_VAR 0 2
61737: PUSH
61738: LD_EXP 59
61742: PUSH
61743: LD_VAR 0 2
61747: ARRAY
61748: PUSH
61749: LD_EXP 35
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: ADD
61760: ST_TO_ADDR
61761: GO 61705
61763: POP
61764: POP
// end ; mpDisplayStrings := result ;
61765: LD_ADDR_EXP 38
61769: PUSH
61770: LD_VAR 0 1
61774: ST_TO_ADDR
// end ;
61775: LD_VAR 0 1
61779: RET
// export function HowMuchPointsKing ( side ) ; begin
61780: LD_INT 0
61782: PPUSH
// result := HowMuchPoints ( side ) ;
61783: LD_ADDR_VAR 0 2
61787: PUSH
61788: LD_VAR 0 1
61792: PPUSH
61793: CALL 61803 0 1
61797: ST_TO_ADDR
// end ;
61798: LD_VAR 0 2
61802: RET
// function HowMuchPoints ( side ) ; var i ; begin
61803: LD_INT 0
61805: PPUSH
61806: PPUSH
// if mpTeamGame then
61807: LD_EXP 11
61811: IFFALSE 61880
// begin for i := 1 to Count ( mpTeams ) do
61813: LD_ADDR_VAR 0 3
61817: PUSH
61818: DOUBLE
61819: LD_INT 1
61821: DEC
61822: ST_TO_ADDR
61823: LD_EXP 10
61827: PPUSH
61828: CALL 12902 0 1
61832: PUSH
61833: FOR_TO
61834: IFFALSE 61876
// begin if side in mpTeams [ i ] then
61836: LD_VAR 0 1
61840: PUSH
61841: LD_EXP 10
61845: PUSH
61846: LD_VAR 0 3
61850: ARRAY
61851: IN
61852: IFFALSE 61874
// begin result := mpKingPoints [ i ] ;
61854: LD_ADDR_VAR 0 2
61858: PUSH
61859: LD_EXP 59
61863: PUSH
61864: LD_VAR 0 3
61868: ARRAY
61869: ST_TO_ADDR
// exit ;
61870: POP
61871: POP
61872: GO 61896
// end ; end ;
61874: GO 61833
61876: POP
61877: POP
// end else
61878: GO 61896
// result := mpKingPoints [ side ] ;
61880: LD_ADDR_VAR 0 2
61884: PUSH
61885: LD_EXP 59
61889: PUSH
61890: LD_VAR 0 1
61894: ARRAY
61895: ST_TO_ADDR
// end ;
61896: LD_VAR 0 2
61900: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
61901: LD_EXP 39
61905: IFFALSE 61913
61907: PUSH
61908: CALL 62325 0 0
61912: AND
61913: IFFALSE 61921
61915: PUSH
61916: LD_OWVAR 4
61920: AND
61921: IFFALSE 62174
61923: GO 61925
61925: DISABLE
61926: LD_INT 0
61928: PPUSH
61929: PPUSH
// begin canWin := false ;
61930: LD_ADDR_VAR 0 2
61934: PUSH
61935: LD_INT 0
61937: ST_TO_ADDR
// if not HasPower ( your_side ) then
61938: LD_OWVAR 2
61942: PPUSH
61943: CALL 62367 0 1
61947: NOT
61948: IFFALSE 61959
// begin Multiplayer_Loose_Message ;
61950: CALL_OW 521
// enable ( mpLose ) ;
61954: LD_INT 102
61956: ENABLE_MARKED
// end else
61957: GO 62174
// begin if not EnemiesInGame then
61959: CALL 62177 0 0
61963: NOT
61964: IFFALSE 61971
// begin enable ( mpWin ) ;
61966: LD_INT 101
61968: ENABLE_MARKED
// exit ;
61969: GO 62174
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
61971: LD_ADDR_VAR 0 2
61975: PUSH
61976: LD_OWVAR 2
61980: PPUSH
61981: CALL 61803 0 1
61985: PUSH
61986: LD_EXP 35
61990: GREATEREQUAL
61991: IFFALSE 62004
61993: PUSH
61994: LD_OWVAR 2
61998: PPUSH
61999: CALL 62367 0 1
62003: AND
62004: ST_TO_ADDR
// for i := 1 to 8 do
62005: LD_ADDR_VAR 0 1
62009: PUSH
62010: DOUBLE
62011: LD_INT 1
62013: DEC
62014: ST_TO_ADDR
62015: LD_INT 8
62017: PUSH
62018: FOR_TO
62019: IFFALSE 62160
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62021: LD_EXP 7
62025: PUSH
62026: LD_VAR 0 1
62030: ARRAY
62031: IFFALSE 62044
62033: PUSH
62034: LD_VAR 0 1
62038: PPUSH
62039: CALL_OW 108
62043: AND
62044: IFFALSE 62058
62046: PUSH
62047: LD_VAR 0 1
62051: PUSH
62052: LD_OWVAR 2
62056: NONEQUAL
62057: AND
62058: IFFALSE 62158
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62060: LD_EXP 8
62064: PUSH
62065: LD_VAR 0 1
62069: ARRAY
62070: NOT
62071: IFTRUE 62119
62073: PUSH
62074: LD_EXP 8
62078: PUSH
62079: LD_VAR 0 1
62083: ARRAY
62084: PUSH
62085: LD_EXP 8
62089: PUSH
62090: LD_OWVAR 2
62094: ARRAY
62095: NONEQUAL
62096: IFFALSE 62118
62098: PUSH
62099: LD_OWVAR 2
62103: PPUSH
62104: LD_VAR 0 1
62108: PPUSH
62109: CALL_OW 81
62113: PUSH
62114: LD_INT 1
62116: NONEQUAL
62117: AND
62118: OR
62119: IFFALSE 62158
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62121: LD_VAR 0 1
62125: PPUSH
62126: CALL 61803 0 1
62130: PUSH
62131: LD_EXP 35
62135: GREATEREQUAL
62136: IFFALSE 62149
62138: PUSH
62139: LD_VAR 0 1
62143: PPUSH
62144: CALL 62367 0 1
62148: AND
62149: IFFALSE 62158
// begin enable ( mpLose ) ;
62151: LD_INT 102
62153: ENABLE_MARKED
// exit ;
62154: POP
62155: POP
62156: GO 62174
// end ;
62158: GO 62018
62160: POP
62161: POP
// if canWin then
62162: LD_VAR 0 2
62166: IFFALSE 62173
// enable ( mpWin ) else
62168: LD_INT 101
62170: ENABLE_MARKED
62171: GO 62174
// enable ;
62173: ENABLE
// end ; end ;
62174: PPOPN 2
62176: END
// function EnemiesInGame ; var i ; begin
62177: LD_INT 0
62179: PPUSH
62180: PPUSH
// result := false ;
62181: LD_ADDR_VAR 0 1
62185: PUSH
62186: LD_INT 0
62188: ST_TO_ADDR
// for i := 1 to 8 do
62189: LD_ADDR_VAR 0 2
62193: PUSH
62194: DOUBLE
62195: LD_INT 1
62197: DEC
62198: ST_TO_ADDR
62199: LD_INT 8
62201: PUSH
62202: FOR_TO
62203: IFFALSE 62318
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62205: LD_VAR 0 2
62209: PUSH
62210: LD_OWVAR 2
62214: NONEQUAL
62215: IFFALSE 62228
62217: PUSH
62218: LD_VAR 0 2
62222: PPUSH
62223: CALL 62367 0 1
62227: AND
62228: IFFALSE 62241
62230: PUSH
62231: LD_VAR 0 2
62235: PPUSH
62236: CALL_OW 108
62240: AND
62241: IFFALSE 62316
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62243: LD_EXP 8
62247: PUSH
62248: LD_VAR 0 2
62252: ARRAY
62253: NOT
62254: IFTRUE 62302
62256: PUSH
62257: LD_EXP 8
62261: PUSH
62262: LD_VAR 0 2
62266: ARRAY
62267: PUSH
62268: LD_EXP 8
62272: PUSH
62273: LD_OWVAR 2
62277: ARRAY
62278: NONEQUAL
62279: IFFALSE 62301
62281: PUSH
62282: LD_OWVAR 2
62286: PPUSH
62287: LD_VAR 0 2
62291: PPUSH
62292: CALL_OW 81
62296: PUSH
62297: LD_INT 1
62299: NONEQUAL
62300: AND
62301: OR
62302: IFFALSE 62316
// begin result := true ;
62304: LD_ADDR_VAR 0 1
62308: PUSH
62309: LD_INT 1
62311: ST_TO_ADDR
// exit ;
62312: POP
62313: POP
62314: GO 62320
// end ;
62316: GO 62202
62318: POP
62319: POP
// end ;
62320: LD_VAR 0 1
62324: RET
// function CanWinLoose ; begin
62325: LD_INT 0
62327: PPUSH
// result := true ;
62328: LD_ADDR_VAR 0 1
62332: PUSH
62333: LD_INT 1
62335: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62336: CALL_OW 531
62340: IFFALSE 62352
62342: PUSH
62343: CALL_OW 519
62347: PUSH
62348: LD_INT 1
62350: GREATER
62351: AND
62352: IFFALSE 62362
// result := false ;
62354: LD_ADDR_VAR 0 1
62358: PUSH
62359: LD_INT 0
62361: ST_TO_ADDR
// end ;
62362: LD_VAR 0 1
62366: RET
// function HasPower ( i ) ; begin
62367: LD_INT 0
62369: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62370: LD_ADDR_VAR 0 2
62374: PUSH
62375: LD_INT 22
62377: PUSH
62378: LD_VAR 0 1
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 2
62389: PUSH
62390: LD_INT 21
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 33
62402: PUSH
62403: LD_INT 3
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 33
62412: PUSH
62413: LD_INT 5
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PPUSH
62430: CALL_OW 69
62434: ST_TO_ADDR
// end ; end_of_file
62435: LD_VAR 0 2
62439: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62440: PPOPN 6
62442: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62443: LD_INT 0
62445: PPUSH
// begin if not units then
62446: LD_VAR 0 1
62450: NOT
62451: IFFALSE 62455
// exit ;
62453: GO 62489
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62455: LD_VAR 0 1
62459: PPUSH
62460: LD_VAR 0 2
62464: PPUSH
62465: LD_VAR 0 3
62469: PPUSH
62470: LD_VAR 0 4
62474: PPUSH
62475: LD_VAR 0 5
62479: PPUSH
62480: LD_VAR 0 6
62484: PPUSH
62485: CALL 60732 0 6
// end ;
62489: PPOPN 7
62491: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62492: LD_EXP 3
62496: PUSH
62497: LD_INT 4
62499: EQUAL
62500: IFFALSE 62536
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62502: LD_STRING setGameDifficulty(
62504: PUSH
62505: LD_OWVAR 67
62509: STR
62510: PUSH
62511: LD_STRING )
62513: STR
62514: PPUSH
62515: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62519: LD_STRING displayDifficulty(
62521: PUSH
62522: LD_OWVAR 67
62526: STR
62527: PUSH
62528: LD_STRING )
62530: STR
62531: PPUSH
62532: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62536: CALL 62565 0 0
// end ; end_of_file
62540: PPOPN 1
62542: END
// every 0 0$1 do
62543: GO 62545
62545: DISABLE
// begin enable ;
62546: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62547: LD_STRING updateTimer(
62549: PUSH
62550: LD_OWVAR 1
62554: STR
62555: PUSH
62556: LD_STRING );
62558: STR
62559: PPUSH
62560: CALL_OW 559
// end ;
62564: END
// export function SOS_MapStart ( ) ; begin
62565: LD_INT 0
62567: PPUSH
// UpdateFactoryWaypoints ( ) ;
62568: CALL 63499 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62572: CALL 63751 0 0
// ParseMultiDataToLua ( ) ;
62576: CALL 63898 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62580: LD_STRING setSpecLogoNumber(
62582: PUSH
62583: LD_INT 2
62585: STR
62586: PUSH
62587: LD_STRING ,
62589: STR
62590: PUSH
62591: LD_INT 1
62593: STR
62594: PUSH
62595: LD_STRING )
62597: STR
62598: PPUSH
62599: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62603: LD_STRING setSpecLogoNumber(
62605: PUSH
62606: LD_INT 3
62608: STR
62609: PUSH
62610: LD_STRING ,
62612: STR
62613: PUSH
62614: LD_INT 2
62616: STR
62617: PUSH
62618: LD_STRING )
62620: STR
62621: PPUSH
62622: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62626: LD_STRING setSpecLogoNumber(
62628: PUSH
62629: LD_INT 4
62631: STR
62632: PUSH
62633: LD_STRING ,
62635: STR
62636: PUSH
62637: LD_INT 3
62639: STR
62640: PUSH
62641: LD_STRING )
62643: STR
62644: PPUSH
62645: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62649: LD_STRING setSpecLogoNumber(
62651: PUSH
62652: LD_INT 5
62654: STR
62655: PUSH
62656: LD_STRING ,
62658: STR
62659: PUSH
62660: LD_INT 4
62662: STR
62663: PUSH
62664: LD_STRING )
62666: STR
62667: PPUSH
62668: CALL_OW 559
// end ;
62672: LD_VAR 0 1
62676: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62677: LD_INT 0
62679: PPUSH
62680: PPUSH
62681: PPUSH
62682: PPUSH
62683: PPUSH
62684: PPUSH
62685: PPUSH
62686: PPUSH
62687: PPUSH
// for i := 1 to 8 do
62688: LD_ADDR_VAR 0 2
62692: PUSH
62693: DOUBLE
62694: LD_INT 1
62696: DEC
62697: ST_TO_ADDR
62698: LD_INT 8
62700: PUSH
62701: FOR_TO
62702: IFFALSE 63087
// begin if mpSidePositions [ i ] then
62704: LD_EXP 7
62708: PUSH
62709: LD_VAR 0 2
62713: ARRAY
62714: IFFALSE 63085
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62716: LD_ADDR_VAR 0 7
62720: PUSH
62721: LD_INT 22
62723: PUSH
62724: LD_VAR 0 2
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 21
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PPUSH
62747: CALL_OW 69
62751: PPUSH
62752: CALL 12902 0 1
62756: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62757: LD_ADDR_VAR 0 9
62761: PUSH
62762: LD_INT 22
62764: PUSH
62765: LD_VAR 0 2
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 30
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 30
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: LIST
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PPUSH
62806: CALL_OW 69
62810: ST_TO_ADDR
// crates := 0 ;
62811: LD_ADDR_VAR 0 4
62815: PUSH
62816: LD_INT 0
62818: ST_TO_ADDR
// oil := 0 ;
62819: LD_ADDR_VAR 0 5
62823: PUSH
62824: LD_INT 0
62826: ST_TO_ADDR
// sib := 0 ;
62827: LD_ADDR_VAR 0 6
62831: PUSH
62832: LD_INT 0
62834: ST_TO_ADDR
// if bases then
62835: LD_VAR 0 9
62839: IFFALSE 62945
// begin for j in bases do
62841: LD_ADDR_VAR 0 3
62845: PUSH
62846: LD_VAR 0 9
62850: PUSH
62851: FOR_IN
62852: IFFALSE 62943
// begin base := GetBase ( j ) ;
62854: LD_ADDR_VAR 0 8
62858: PUSH
62859: LD_VAR 0 3
62863: PPUSH
62864: CALL_OW 274
62868: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
62869: LD_ADDR_VAR 0 4
62873: PUSH
62874: LD_VAR 0 4
62878: PUSH
62879: LD_VAR 0 8
62883: PPUSH
62884: LD_INT 1
62886: PPUSH
62887: CALL_OW 275
62891: PLUS
62892: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62893: LD_ADDR_VAR 0 5
62897: PUSH
62898: LD_VAR 0 5
62902: PUSH
62903: LD_VAR 0 8
62907: PPUSH
62908: LD_INT 2
62910: PPUSH
62911: CALL_OW 275
62915: PLUS
62916: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62917: LD_ADDR_VAR 0 6
62921: PUSH
62922: LD_VAR 0 6
62926: PUSH
62927: LD_VAR 0 8
62931: PPUSH
62932: LD_INT 3
62934: PPUSH
62935: CALL_OW 275
62939: PLUS
62940: ST_TO_ADDR
// end ;
62941: GO 62851
62943: POP
62944: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
62945: LD_STRING setSpecText(
62947: PUSH
62948: LD_VAR 0 2
62952: STR
62953: PUSH
62954: LD_STRING ,
62956: STR
62957: PUSH
62958: LD_INT 2
62960: STR
62961: PUSH
62962: LD_STRING ,
62964: STR
62965: PUSH
62966: LD_VAR 0 4
62970: STR
62971: PUSH
62972: LD_STRING )
62974: STR
62975: PPUSH
62976: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
62980: LD_STRING setSpecText(
62982: PUSH
62983: LD_VAR 0 2
62987: STR
62988: PUSH
62989: LD_STRING ,
62991: STR
62992: PUSH
62993: LD_INT 3
62995: STR
62996: PUSH
62997: LD_STRING ,
62999: STR
63000: PUSH
63001: LD_VAR 0 5
63005: STR
63006: PUSH
63007: LD_STRING )
63009: STR
63010: PPUSH
63011: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63015: LD_STRING setSpecText(
63017: PUSH
63018: LD_VAR 0 2
63022: STR
63023: PUSH
63024: LD_STRING ,
63026: STR
63027: PUSH
63028: LD_INT 4
63030: STR
63031: PUSH
63032: LD_STRING ,
63034: STR
63035: PUSH
63036: LD_VAR 0 6
63040: STR
63041: PUSH
63042: LD_STRING )
63044: STR
63045: PPUSH
63046: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63050: LD_STRING setSpecText(
63052: PUSH
63053: LD_VAR 0 2
63057: STR
63058: PUSH
63059: LD_STRING ,
63061: STR
63062: PUSH
63063: LD_INT 5
63065: STR
63066: PUSH
63067: LD_STRING ,
63069: STR
63070: PUSH
63071: LD_VAR 0 7
63075: STR
63076: PUSH
63077: LD_STRING )
63079: STR
63080: PPUSH
63081: CALL_OW 559
// end ; end ;
63085: GO 62701
63087: POP
63088: POP
// end ;
63089: LD_VAR 0 1
63093: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63094: LD_INT 2
63096: PUSH
63097: LD_INT 30
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 30
63109: PUSH
63110: LD_INT 1
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: LIST
63121: PPUSH
63122: CALL_OW 69
63126: IFFALSE 63136
63128: GO 63130
63130: DISABLE
// begin enable ;
63131: ENABLE
// UpdateSpectatorBar ;
63132: CALL 62677 0 0
// end ;
63136: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63137: LD_INT 0
63139: PPUSH
// end ;
63140: LD_VAR 0 12
63144: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63145: LD_INT 0
63147: PPUSH
63148: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63149: LD_VAR 0 1
63153: NOT
63154: IFTRUE 63173
63156: PUSH
63157: LD_VAR 0 2
63161: PPUSH
63162: LD_VAR 0 3
63166: PPUSH
63167: CALL_OW 488
63171: NOT
63172: OR
63173: IFTRUE 63208
63175: PUSH
63176: LD_VAR 0 1
63180: PPUSH
63181: CALL_OW 266
63185: PUSH
63186: LD_INT 3
63188: NONEQUAL
63189: IFFALSE 63207
63191: PUSH
63192: LD_VAR 0 1
63196: PPUSH
63197: CALL_OW 247
63201: PUSH
63202: LD_INT 1
63204: EQUAL
63205: NOT
63206: AND
63207: OR
63208: IFFALSE 63212
// exit ;
63210: GO 63494
// if GetType ( factory ) = unit_human then
63212: LD_VAR 0 1
63216: PPUSH
63217: CALL_OW 247
63221: PUSH
63222: LD_INT 1
63224: EQUAL
63225: IFFALSE 63242
// factory := IsInUnit ( factory ) ;
63227: LD_ADDR_VAR 0 1
63231: PUSH
63232: LD_VAR 0 1
63236: PPUSH
63237: CALL_OW 310
63241: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63242: LD_VAR 0 1
63246: PPUSH
63247: CALL_OW 266
63251: PUSH
63252: LD_INT 3
63254: NONEQUAL
63255: IFFALSE 63259
// exit ;
63257: GO 63494
// for i := 1 to Count ( factoryWaypoints ) do
63259: LD_ADDR_VAR 0 5
63263: PUSH
63264: DOUBLE
63265: LD_INT 1
63267: DEC
63268: ST_TO_ADDR
63269: LD_EXP 60
63273: PPUSH
63274: CALL 12902 0 1
63278: PUSH
63279: FOR_TO
63280: IFFALSE 63442
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63282: LD_VAR 0 2
63286: PPUSH
63287: LD_VAR 0 3
63291: PPUSH
63292: CALL_OW 428
63296: PUSH
63297: LD_EXP 60
63301: PUSH
63302: LD_VAR 0 5
63306: ARRAY
63307: PUSH
63308: LD_INT 2
63310: ARRAY
63311: EQUAL
63312: IFFALSE 63344
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63314: LD_ADDR_EXP 60
63318: PUSH
63319: LD_EXP 60
63323: PPUSH
63324: LD_VAR 0 5
63328: PPUSH
63329: CALL_OW 3
63333: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63334: CALL 63499 0 0
// exit ;
63338: POP
63339: POP
63340: GO 63494
// end else
63342: GO 63440
// if factory = factoryWaypoints [ i ] [ 2 ] then
63344: LD_VAR 0 1
63348: PUSH
63349: LD_EXP 60
63353: PUSH
63354: LD_VAR 0 5
63358: ARRAY
63359: PUSH
63360: LD_INT 2
63362: ARRAY
63363: EQUAL
63364: IFFALSE 63440
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63366: LD_ADDR_EXP 60
63370: PUSH
63371: LD_EXP 60
63375: PPUSH
63376: LD_VAR 0 5
63380: PPUSH
63381: CALL_OW 3
63385: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63386: LD_ADDR_EXP 60
63390: PUSH
63391: LD_EXP 60
63395: PPUSH
63396: LD_VAR 0 1
63400: PPUSH
63401: CALL_OW 255
63405: PUSH
63406: LD_VAR 0 1
63410: PUSH
63411: LD_VAR 0 2
63415: PUSH
63416: LD_VAR 0 3
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: PPUSH
63427: CALL 48868 0 2
63431: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63432: CALL 63499 0 0
// exit ;
63436: POP
63437: POP
63438: GO 63494
// end ; end ;
63440: GO 63279
63442: POP
63443: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63444: LD_ADDR_EXP 60
63448: PUSH
63449: LD_EXP 60
63453: PPUSH
63454: LD_VAR 0 1
63458: PPUSH
63459: CALL_OW 255
63463: PUSH
63464: LD_VAR 0 1
63468: PUSH
63469: LD_VAR 0 2
63473: PUSH
63474: LD_VAR 0 3
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: PPUSH
63485: CALL 48868 0 2
63489: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63490: CALL 63499 0 0
// end ;
63494: LD_VAR 0 4
63498: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63499: LD_INT 0
63501: PPUSH
63502: PPUSH
63503: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63504: LD_STRING resetFactoryWaypoint();
63506: PPUSH
63507: CALL_OW 559
// if factoryWaypoints then
63511: LD_EXP 60
63515: IFFALSE 63636
// begin list := factoryWaypoints ;
63517: LD_ADDR_VAR 0 3
63521: PUSH
63522: LD_EXP 60
63526: ST_TO_ADDR
// for i := 1 to list do
63527: LD_ADDR_VAR 0 2
63531: PUSH
63532: DOUBLE
63533: LD_INT 1
63535: DEC
63536: ST_TO_ADDR
63537: LD_VAR 0 3
63541: PUSH
63542: FOR_TO
63543: IFFALSE 63634
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63545: LD_STRING setFactoryWaypointXY(
63547: PUSH
63548: LD_VAR 0 3
63552: PUSH
63553: LD_VAR 0 2
63557: ARRAY
63558: PUSH
63559: LD_INT 1
63561: ARRAY
63562: STR
63563: PUSH
63564: LD_STRING ,
63566: STR
63567: PUSH
63568: LD_VAR 0 3
63572: PUSH
63573: LD_VAR 0 2
63577: ARRAY
63578: PUSH
63579: LD_INT 2
63581: ARRAY
63582: STR
63583: PUSH
63584: LD_STRING ,
63586: STR
63587: PUSH
63588: LD_VAR 0 3
63592: PUSH
63593: LD_VAR 0 2
63597: ARRAY
63598: PUSH
63599: LD_INT 3
63601: ARRAY
63602: STR
63603: PUSH
63604: LD_STRING ,
63606: STR
63607: PUSH
63608: LD_VAR 0 3
63612: PUSH
63613: LD_VAR 0 2
63617: ARRAY
63618: PUSH
63619: LD_INT 4
63621: ARRAY
63622: STR
63623: PUSH
63624: LD_STRING )
63626: STR
63627: PPUSH
63628: CALL_OW 559
63632: GO 63542
63634: POP
63635: POP
// end ; end ;
63636: LD_VAR 0 1
63640: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63641: LD_INT 0
63643: PPUSH
// if HexInfo ( x , y ) = warehouse then
63644: LD_VAR 0 2
63648: PPUSH
63649: LD_VAR 0 3
63653: PPUSH
63654: CALL_OW 428
63658: PUSH
63659: LD_VAR 0 1
63663: EQUAL
63664: IFFALSE 63691
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63666: LD_ADDR_EXP 62
63670: PUSH
63671: LD_EXP 62
63675: PPUSH
63676: LD_VAR 0 1
63680: PPUSH
63681: LD_INT 0
63683: PPUSH
63684: CALL_OW 1
63688: ST_TO_ADDR
63689: GO 63742
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63691: LD_ADDR_EXP 62
63695: PUSH
63696: LD_EXP 62
63700: PPUSH
63701: LD_VAR 0 1
63705: PPUSH
63706: LD_VAR 0 1
63710: PPUSH
63711: CALL_OW 255
63715: PUSH
63716: LD_VAR 0 1
63720: PUSH
63721: LD_VAR 0 2
63725: PUSH
63726: LD_VAR 0 3
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: PPUSH
63737: CALL_OW 1
63741: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63742: CALL 63751 0 0
// end ;
63746: LD_VAR 0 4
63750: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63751: LD_INT 0
63753: PPUSH
63754: PPUSH
63755: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63756: LD_STRING resetWarehouseGatheringPoints();
63758: PPUSH
63759: CALL_OW 559
// if warehouseGatheringPoints then
63763: LD_EXP 62
63767: IFFALSE 63893
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63769: LD_ADDR_VAR 0 3
63773: PUSH
63774: LD_EXP 62
63778: PPUSH
63779: CALL 52802 0 1
63783: ST_TO_ADDR
// for i := 1 to list do
63784: LD_ADDR_VAR 0 2
63788: PUSH
63789: DOUBLE
63790: LD_INT 1
63792: DEC
63793: ST_TO_ADDR
63794: LD_VAR 0 3
63798: PUSH
63799: FOR_TO
63800: IFFALSE 63891
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63802: LD_STRING setWarehouseGatheringPointXY(
63804: PUSH
63805: LD_VAR 0 3
63809: PUSH
63810: LD_VAR 0 2
63814: ARRAY
63815: PUSH
63816: LD_INT 1
63818: ARRAY
63819: STR
63820: PUSH
63821: LD_STRING ,
63823: STR
63824: PUSH
63825: LD_VAR 0 3
63829: PUSH
63830: LD_VAR 0 2
63834: ARRAY
63835: PUSH
63836: LD_INT 2
63838: ARRAY
63839: STR
63840: PUSH
63841: LD_STRING ,
63843: STR
63844: PUSH
63845: LD_VAR 0 3
63849: PUSH
63850: LD_VAR 0 2
63854: ARRAY
63855: PUSH
63856: LD_INT 3
63858: ARRAY
63859: STR
63860: PUSH
63861: LD_STRING ,
63863: STR
63864: PUSH
63865: LD_VAR 0 3
63869: PUSH
63870: LD_VAR 0 2
63874: ARRAY
63875: PUSH
63876: LD_INT 4
63878: ARRAY
63879: STR
63880: PUSH
63881: LD_STRING )
63883: STR
63884: PPUSH
63885: CALL_OW 559
63889: GO 63799
63891: POP
63892: POP
// end ; end ;
63893: LD_VAR 0 1
63897: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63898: LD_INT 0
63900: PPUSH
63901: PPUSH
// if not mpSidePositions then
63902: LD_EXP 7
63906: NOT
63907: IFFALSE 63911
// exit ;
63909: GO 63982
// result :=  ;
63911: LD_ADDR_VAR 0 1
63915: PUSH
63916: LD_STRING 
63918: ST_TO_ADDR
// for i := 1 to 8 do
63919: LD_ADDR_VAR 0 2
63923: PUSH
63924: DOUBLE
63925: LD_INT 1
63927: DEC
63928: ST_TO_ADDR
63929: LD_INT 8
63931: PUSH
63932: FOR_TO
63933: IFFALSE 63963
// begin result := result & mpSidePositions [ i ] & ; ;
63935: LD_ADDR_VAR 0 1
63939: PUSH
63940: LD_VAR 0 1
63944: PUSH
63945: LD_EXP 7
63949: PUSH
63950: LD_VAR 0 2
63954: ARRAY
63955: STR
63956: PUSH
63957: LD_STRING ;
63959: STR
63960: ST_TO_ADDR
// end ;
63961: GO 63932
63963: POP
63964: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
63965: LD_STRING setMultiplayerRealPosition("
63967: PUSH
63968: LD_VAR 0 1
63972: STR
63973: PUSH
63974: LD_STRING ");
63976: STR
63977: PPUSH
63978: CALL_OW 559
// end ;
63982: LD_VAR 0 1
63986: RET
