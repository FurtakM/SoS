// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2734 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3110 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 13
 869: PUSH
 870: LD_INT 14
 872: PUSH
 873: LD_INT 15
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 19
 885: UNION
 886: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 887: LD_VAR 0 1
 891: PUSH
 892: LD_INT 2
 894: EQUAL
 895: IFFALSE 907
// baseLevel := 1 else
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
 905: GO 921
// baseLevel := mpGameSettings [ 1 ] ;
 907: LD_ADDR_VAR 0 7
 911: PUSH
 912: LD_EXP 6
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 921: LD_ADDR_EXP 24
 925: PUSH
 926: LD_EXP 6
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 6
 944: PUSH
 945: LD_INT 3
 947: ARRAY
 948: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_EXP 6
 958: PUSH
 959: LD_INT 4
 961: ARRAY
 962: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 963: LD_ADDR_EXP 27
 967: PUSH
 968: LD_EXP 6
 972: PUSH
 973: LD_INT 5
 975: ARRAY
 976: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_EXP 6
 986: PUSH
 987: LD_INT 6
 989: ARRAY
 990: PUSH
 991: LD_INT 0
 993: GREATER
 994: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 995: LD_ADDR_VAR 0 6
 999: PUSH
1000: LD_EXP 6
1004: PUSH
1005: LD_INT 7
1007: ARRAY
1008: PUSH
1009: LD_INT 0
1011: GREATER
1012: ST_TO_ADDR
// mpKingArea := 0 ;
1013: LD_ADDR_EXP 34
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpPoints := 0 ;
1021: LD_ADDR_EXP 35
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpEmissions := 0 ;
1029: LD_ADDR_EXP 37
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingArea := 0 ;
1037: LD_ADDR_EXP 1
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingCamArea := 0 ;
1045: LD_ADDR_EXP 2
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1053: LD_EXP 6
1057: PUSH
1058: LD_INT 9
1060: ARRAY
1061: IFFALSE 1193
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1063: LD_ADDR_EXP 36
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 24
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 12
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 23
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 21
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 42
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 21
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 42
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1193: LD_ADDR_EXP 16
1197: PUSH
1198: LD_EXP 6
1202: PUSH
1203: LD_INT 11
1205: ARRAY
1206: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1207: LD_ADDR_EXP 22
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_INT 12
1219: ARRAY
1220: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1221: LD_ADDR_EXP 26
1225: PUSH
1226: LD_EXP 6
1230: PUSH
1231: LD_INT 13
1233: ARRAY
1234: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1235: LD_ADDR_EXP 33
1239: PUSH
1240: LD_EXP 6
1244: PUSH
1245: LD_INT 14
1247: ARRAY
1248: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1249: LD_ADDR_EXP 30
1253: PUSH
1254: LD_EXP 6
1258: PUSH
1259: LD_INT 15
1261: ARRAY
1262: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1263: LD_ADDR_EXP 28
1267: PUSH
1268: LD_EXP 6
1272: PUSH
1273: LD_INT 18
1275: ARRAY
1276: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1277: LD_ADDR_EXP 20
1281: PUSH
1282: LD_EXP 6
1286: PUSH
1287: LD_INT 21
1289: ARRAY
1290: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 2
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: LD_INT 4
1307: PUSH
1308: LD_INT 5
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) ] ;
1322: LD_ADDR_VAR 0 8
1326: PUSH
1327: LD_INT 18
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 52907 0 2
1337: PUSH
1338: LD_INT 24
1340: PPUSH
1341: LD_INT 1
1343: PPUSH
1344: CALL 52907 0 2
1348: PUSH
1349: LD_INT 30
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL 52907 0 2
1359: PUSH
1360: LD_INT 36
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: CALL 52907 0 2
1370: PUSH
1371: LD_INT 42
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL 52907 0 2
1381: PUSH
1382: LD_INT 48
1384: PPUSH
1385: LD_INT 4
1387: PPUSH
1388: CALL 52907 0 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: DOUBLE
1407: LD_INT 1
1409: DEC
1410: ST_TO_ADDR
1411: LD_VAR 0 8
1415: PPUSH
1416: CALL 12256 0 1
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1526
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1424: LD_ADDR_EXP 21
1428: PUSH
1429: LD_EXP 21
1433: PPUSH
1434: LD_VAR 0 3
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 1
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PUSH
1465: LD_INT 3
1467: ARRAY
1468: PPUSH
1469: LD_INT 10
1471: PPUSH
1472: CALL_OW 272
1476: PUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PPUSH
1492: LD_VAR 0 8
1496: PUSH
1497: LD_VAR 0 3
1501: ARRAY
1502: PUSH
1503: LD_INT 3
1505: ARRAY
1506: PPUSH
1507: LD_INT 10
1509: PPUSH
1510: CALL_OW 273
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 1
1523: ST_TO_ADDR
1524: GO 1421
1526: POP
1527: POP
// if hasOil then
1528: LD_VAR 0 5
1532: IFFALSE 1643
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1534: LD_ADDR_VAR 0 4
1538: PUSH
1539: LD_EXP 6
1543: PUSH
1544: LD_INT 6
1546: ARRAY
1547: PUSH
1548: LD_INT 2
1550: EQUAL
1551: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1552: LD_ADDR_EXP 12
1556: PUSH
1557: LD_INT 19
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 52740 0 2
1569: PUSH
1570: LD_INT 25
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 52740 0 2
1582: PUSH
1583: LD_INT 31
1585: PPUSH
1586: LD_VAR 0 4
1590: PPUSH
1591: CALL 52740 0 2
1595: PUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL 52740 0 2
1608: PUSH
1609: LD_INT 43
1611: PPUSH
1612: LD_VAR 0 4
1616: PPUSH
1617: CALL 52740 0 2
1621: PUSH
1622: LD_INT 49
1624: PPUSH
1625: LD_VAR 0 4
1629: PPUSH
1630: CALL 52740 0 2
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// end ; if hasSib then
1643: LD_VAR 0 6
1647: IFFALSE 1758
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1649: LD_ADDR_VAR 0 4
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 7
1661: ARRAY
1662: PUSH
1663: LD_INT 2
1665: EQUAL
1666: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1667: LD_ADDR_EXP 13
1671: PUSH
1672: LD_INT 20
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 52740 0 2
1684: PUSH
1685: LD_INT 26
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 52740 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 52740 0 2
1710: PUSH
1711: LD_INT 38
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 52740 0 2
1723: PUSH
1724: LD_INT 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL 52740 0 2
1736: PUSH
1737: LD_INT 50
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL 52740 0 2
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 1
1765: GREATEREQUAL
1766: IFFALSE 1778
// mpDepots := startPos ;
1768: LD_ADDR_EXP 14
1772: PUSH
1773: LD_VAR 0 8
1777: ST_TO_ADDR
// if baseLevel >= 2 then
1778: LD_VAR 0 7
1782: PUSH
1783: LD_INT 2
1785: GREATEREQUAL
1786: IFFALSE 2101
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] ] ;
1788: LD_ADDR_EXP 17
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 21
1798: PPUSH
1799: LD_INT 4
1801: PPUSH
1802: CALL 52907 0 2
1806: ADD
1807: PUSH
1808: LD_INT 31
1810: PUSH
1811: LD_INT 22
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: CALL 52907 0 2
1821: ADD
1822: PUSH
1823: LD_INT 4
1825: PUSH
1826: LD_INT 23
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: CALL 52907 0 2
1836: ADD
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 27
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL 52907 0 2
1856: ADD
1857: PUSH
1858: LD_INT 31
1860: PUSH
1861: LD_INT 28
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL 52907 0 2
1871: ADD
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 29
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 52907 0 2
1886: ADD
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 34
1898: PPUSH
1899: LD_INT 4
1901: PPUSH
1902: CALL 52907 0 2
1906: ADD
1907: PUSH
1908: LD_INT 31
1910: PUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 4
1916: PPUSH
1917: CALL 52907 0 2
1921: ADD
1922: PUSH
1923: LD_INT 4
1925: PUSH
1926: LD_INT 33
1928: PPUSH
1929: LD_INT 4
1931: PPUSH
1932: CALL 52907 0 2
1936: ADD
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 39
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL 52907 0 2
1956: ADD
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: LD_INT 40
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL 52907 0 2
1971: ADD
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 41
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 52907 0 2
1986: ADD
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 45
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: CALL 52907 0 2
2006: ADD
2007: PUSH
2008: LD_INT 31
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL 52907 0 2
2021: ADD
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: LD_INT 47
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL 52907 0 2
2036: ADD
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL 52907 0 2
2056: ADD
2057: PUSH
2058: LD_INT 31
2060: PUSH
2061: LD_INT 52
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 52907 0 2
2071: ADD
2072: PUSH
2073: LD_INT 4
2075: PUSH
2076: LD_INT 53
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL 52907 0 2
2086: ADD
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: ST_TO_ADDR
// end ; end ;
2101: LD_VAR 0 2
2105: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2106: GO 2108
2108: DISABLE
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
2117: PPUSH
2118: PPUSH
// begin if not mpShipments then
2119: LD_EXP 27
2123: NOT
2124: IFFALSE 2128
// exit ;
2126: GO 2647
// case mpShipments of 1 :
2128: LD_EXP 27
2132: PUSH
2133: LD_INT 1
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2176
2141: POP
// begin time := 0 0$30 ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// normalTime := 0 0$30 ;
2150: LD_ADDR_VAR 0 6
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// maxTime := 1 1$20 ;
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: LD_INT 2800
2165: ST_TO_ADDR
// delayTime := 0 0$5 ;
2166: LD_ADDR_VAR 0 7
2170: PUSH
2171: LD_INT 175
2173: ST_TO_ADDR
// end ; 2 :
2174: GO 2306
2176: LD_INT 2
2178: DOUBLE
2179: EQUAL
2180: IFTRUE 2184
2182: GO 2219
2184: POP
// begin time := 0 0$25 ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// normalTime := 0 0$25 ;
2193: LD_ADDR_VAR 0 6
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// maxTime := 1 1$10 ;
2201: LD_ADDR_VAR 0 8
2205: PUSH
2206: LD_INT 2450
2208: ST_TO_ADDR
// delayTime := 0 0$4 ;
2209: LD_ADDR_VAR 0 7
2213: PUSH
2214: LD_INT 140
2216: ST_TO_ADDR
// end ; 3 :
2217: GO 2306
2219: LD_INT 3
2221: DOUBLE
2222: EQUAL
2223: IFTRUE 2227
2225: GO 2262
2227: POP
// begin time := 0 0$20 ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// normalTime := 0 0$20 ;
2236: LD_ADDR_VAR 0 6
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// maxTime := 1 1$00 ;
2244: LD_ADDR_VAR 0 8
2248: PUSH
2249: LD_INT 2100
2251: ST_TO_ADDR
// delayTime := 0 0$3 ;
2252: LD_ADDR_VAR 0 7
2256: PUSH
2257: LD_INT 105
2259: ST_TO_ADDR
// end ; 4 :
2260: GO 2306
2262: LD_INT 4
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2305
2270: POP
// begin time := 0 0$15 ;
2271: LD_ADDR_VAR 0 4
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// normalTime := 0 0$15 ;
2279: LD_ADDR_VAR 0 6
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// maxTime := 0 0$55 ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_INT 1925
2294: ST_TO_ADDR
// delayTime := 0 0$2 ;
2295: LD_ADDR_VAR 0 7
2299: PUSH
2300: LD_INT 70
2302: ST_TO_ADDR
// end ; end ;
2303: GO 2306
2305: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_INT 7
2313: PUSH
2314: LD_INT 8
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: LD_INT 11
2325: PUSH
2326: LD_INT 12
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 ] ;
2337: LD_ADDR_VAR 0 5
2341: PUSH
2342: LD_INT 13
2344: PUSH
2345: LD_INT 14
2347: PUSH
2348: LD_INT 15
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: ST_TO_ADDR
// for i := 1 to 8 do
2356: LD_ADDR_VAR 0 1
2360: PUSH
2361: DOUBLE
2362: LD_INT 1
2364: DEC
2365: ST_TO_ADDR
2366: LD_INT 8
2368: PUSH
2369: FOR_TO
2370: IFFALSE 2417
// begin if not mpSidePositions [ i ] then
2372: LD_EXP 7
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: NOT
2383: IFFALSE 2387
// continue ;
2385: GO 2369
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2387: LD_ADDR_VAR 0 5
2391: PUSH
2392: LD_VAR 0 5
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_EXP 7
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: ARRAY
2413: ADD
2414: ST_TO_ADDR
// end ;
2415: GO 2369
2417: POP
2418: POP
// x := 1 ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// repeat wait ( time ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: CALL_OW 67
// x := Inc ( x ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: CALL 49561 0 1
2450: ST_TO_ADDR
// if x > 5 then
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 5
2458: GREATER
2459: IFFALSE 2469
// x := 1 ;
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// for i in areas do
2469: LD_ADDR_VAR 0 1
2473: PUSH
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_IN
2480: IFFALSE 2519
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2482: LD_VAR 0 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 287
2494: PUSH
2495: LD_INT 20
2497: LESS
2498: IFFALSE 2517
// begin CreateCratesArea ( x , i , true ) ;
2500: LD_VAR 0 2
2504: PPUSH
2505: LD_VAR 0 1
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 55
// end ; end ;
2517: GO 2479
2519: POP
2520: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2521: LD_INT 17
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 287
2531: PUSH
2532: LD_INT 0
2534: EQUAL
2535: IFFALSE 2574
// begin for i := 1 to 3 do
2537: LD_ADDR_VAR 0 1
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_INT 3
2549: PUSH
2550: FOR_TO
2551: IFFALSE 2570
// CreateCratesArea ( x , CenterArea , true ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 17
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: CALL_OW 55
2568: GO 2550
2570: POP
2571: POP
// end else
2572: GO 2605
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2574: LD_INT 17
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL_OW 287
2584: PUSH
2585: LD_INT 30
2587: LESS
2588: IFFALSE 2605
// CreateCratesArea ( x , CenterArea , true ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 17
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 55
// time := time + delayTime ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: LD_VAR 0 4
2614: PUSH
2615: LD_VAR 0 7
2619: PLUS
2620: ST_TO_ADDR
// if time > maxTime then
2621: LD_VAR 0 4
2625: PUSH
2626: LD_VAR 0 8
2630: GREATER
2631: IFFALSE 2643
// time := normalTime ;
2633: LD_ADDR_VAR 0 4
2637: PUSH
2638: LD_VAR 0 6
2642: ST_TO_ADDR
// until false ;
2643: LD_INT 0
2645: IFFALSE 2427
// end ; end_of_file
2647: PPOPN 8
2649: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL 53705 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 7882 0 1
// end ;
2668: PPOPN 1
2670: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 53722 0 1
// end ;
2680: PPOPN 1
2682: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 8589 0 1
2692: PPOPN 1
2694: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: CALL 53763 0 2
2709: PPOPN 2
2711: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: LD_VAR 0 3
2726: PPUSH
2727: CALL 8642 0 3
2731: PPOPN 3
2733: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2734: LD_INT 0
2736: PPUSH
2737: PPUSH
// disable ( mpActive ) ;
2738: LD_INT 100
2740: DISABLE_MARKED
// disable ( mpWin ) ;
2741: LD_INT 101
2743: DISABLE_MARKED
// disable ( mpLose ) ;
2744: LD_INT 102
2746: DISABLE_MARKED
// mpGameType := 0 ;
2747: LD_ADDR_EXP 3
2751: PUSH
2752: LD_INT 0
2754: ST_TO_ADDR
// mpGameSettings := [ ] ;
2755: LD_ADDR_EXP 6
2759: PUSH
2760: EMPTY
2761: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2762: LD_ADDR_EXP 4
2766: PUSH
2767: EMPTY
2768: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2769: LD_ADDR_EXP 5
2773: PUSH
2774: EMPTY
2775: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2776: LD_ADDR_EXP 29
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 2
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2791: LD_ADDR_EXP 12
2795: PUSH
2796: EMPTY
2797: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2798: LD_ADDR_EXP 13
2802: PUSH
2803: EMPTY
2804: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2805: LD_ADDR_EXP 41
2809: PUSH
2810: EMPTY
2811: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2812: LD_ADDR_EXP 42
2816: PUSH
2817: EMPTY
2818: ST_TO_ADDR
// mpDepots := [ ] ;
2819: LD_ADDR_EXP 14
2823: PUSH
2824: EMPTY
2825: ST_TO_ADDR
// mpBuildings := [ ] ;
2826: LD_ADDR_EXP 17
2830: PUSH
2831: EMPTY
2832: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2833: LD_ADDR_EXP 18
2837: PUSH
2838: EMPTY
2839: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2840: LD_ADDR_EXP 19
2844: PUSH
2845: EMPTY
2846: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2847: LD_ADDR_EXP 20
2851: PUSH
2852: EMPTY
2853: ST_TO_ADDR
// mpStartingResources := [ ] ;
2854: LD_ADDR_EXP 15
2858: PUSH
2859: EMPTY
2860: ST_TO_ADDR
// mpStartPos := [ ] ;
2861: LD_ADDR_EXP 21
2865: PUSH
2866: EMPTY
2867: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2868: LD_ADDR_EXP 22
2872: PUSH
2873: LD_INT 1
2875: NEG
2876: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2877: LD_ADDR_EXP 23
2881: PUSH
2882: EMPTY
2883: ST_TO_ADDR
// mpApemans := [ ] ;
2884: LD_ADDR_EXP 30
2888: PUSH
2889: EMPTY
2890: ST_TO_ADDR
// mpApemansArea := [ ] ;
2891: LD_ADDR_EXP 31
2895: PUSH
2896: EMPTY
2897: ST_TO_ADDR
// mpRespawn := [ ] ;
2898: LD_ADDR_EXP 33
2902: PUSH
2903: EMPTY
2904: ST_TO_ADDR
// mpKingArea := 0 ;
2905: LD_ADDR_EXP 34
2909: PUSH
2910: LD_INT 0
2912: ST_TO_ADDR
// mpPoints := [ ] ;
2913: LD_ADDR_EXP 35
2917: PUSH
2918: EMPTY
2919: ST_TO_ADDR
// mpVehicles := 0 ;
2920: LD_ADDR_EXP 36
2924: PUSH
2925: LD_INT 0
2927: ST_TO_ADDR
// mpShipments := 0 ;
2928: LD_ADDR_EXP 27
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2936: LD_ADDR_EXP 40
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: PUSH
2953: EMPTY
2954: PUSH
2955: EMPTY
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2967: LD_ADDR_EXP 32
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: PUSH
2982: EMPTY
2983: PUSH
2984: EMPTY
2985: PUSH
2986: EMPTY
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: ST_TO_ADDR
// mpEmissions := 0 ;
2998: LD_ADDR_EXP 37
3002: PUSH
3003: LD_INT 0
3005: ST_TO_ADDR
// mpTeleports := 0 ;
3006: LD_ADDR_EXP 43
3010: PUSH
3011: LD_INT 0
3013: ST_TO_ADDR
// mpArtifacts := 0 ;
3014: LD_ADDR_EXP 44
3018: PUSH
3019: LD_INT 0
3021: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3022: LD_ADDR_EXP 25
3026: PUSH
3027: LD_INT 3
3029: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3030: LD_ADDR_EXP 24
3034: PUSH
3035: LD_INT 15
3037: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3038: LD_ADDR_EXP 38
3042: PUSH
3043: LD_INT 0
3045: ST_TO_ADDR
// mpGameActive := false ;
3046: LD_ADDR_EXP 39
3050: PUSH
3051: LD_INT 0
3053: ST_TO_ADDR
// mpBlockRespThread := false ;
3054: LD_ADDR_EXP 45
3058: PUSH
3059: LD_INT 0
3061: ST_TO_ADDR
// for i := 1 to 32 do
3062: LD_ADDR_VAR 0 2
3066: PUSH
3067: DOUBLE
3068: LD_INT 1
3070: DEC
3071: ST_TO_ADDR
3072: LD_INT 32
3074: PUSH
3075: FOR_TO
3076: IFFALSE 3103
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3078: LD_ADDR_EXP 6
3082: PUSH
3083: LD_EXP 6
3087: PPUSH
3088: LD_VAR 0 2
3092: PPUSH
3093: LD_INT 0
3095: PPUSH
3096: CALL_OW 1
3100: ST_TO_ADDR
3101: GO 3075
3103: POP
3104: POP
// end ;
3105: LD_VAR 0 1
3109: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3110: LD_INT 0
3112: PPUSH
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
3120: PPUSH
3121: PPUSH
3122: PPUSH
3123: PPUSH
3124: PPUSH
3125: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3126: LD_ADDR_VAR 0 14
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: LD_INT 2
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: LD_INT 5
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: ST_TO_ADDR
// for i in gameTypes do
3149: LD_ADDR_VAR 0 2
3153: PUSH
3154: LD_VAR 0 14
3158: PUSH
3159: FOR_IN
3160: IFFALSE 3169
// disable ( i ) ;
3162: LD_VAR 0 2
3166: DISABLE_MARKED
3167: GO 3159
3169: POP
3170: POP
// if Multiplayer then
3171: LD_OWVAR 4
3175: IFFALSE 3359
// begin mpGameType := mp_game_type ;
3177: LD_ADDR_EXP 3
3181: PUSH
3182: LD_OWVAR 6
3186: ST_TO_ADDR
// your_side := mp_player_side ;
3187: LD_ADDR_OWVAR 2
3191: PUSH
3192: LD_OWVAR 7
3196: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3197: LD_ADDR_EXP 7
3201: PUSH
3202: LD_OWVAR 17
3206: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3207: LD_ADDR_EXP 8
3211: PUSH
3212: LD_OWVAR 15
3216: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3217: LD_ADDR_EXP 9
3221: PUSH
3222: LD_OWVAR 16
3226: ST_TO_ADDR
// mpTeams := mp_teams ;
3227: LD_ADDR_EXP 10
3231: PUSH
3232: LD_OWVAR 12
3236: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3237: LD_ADDR_VAR 0 2
3241: PUSH
3242: DOUBLE
3243: LD_INT 1
3245: DEC
3246: ST_TO_ADDR
3247: LD_EXP 4
3251: PPUSH
3252: CALL 12256 0 1
3256: PUSH
3257: FOR_TO
3258: IFFALSE 3334
// begin setting := mpGameSettingsKeys [ i ] ;
3260: LD_ADDR_VAR 0 12
3264: PUSH
3265: LD_EXP 4
3269: PUSH
3270: LD_VAR 0 2
3274: ARRAY
3275: ST_TO_ADDR
// if setting then
3276: LD_VAR 0 12
3280: IFFALSE 3332
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3282: LD_ADDR_EXP 6
3286: PUSH
3287: LD_EXP 6
3291: PPUSH
3292: LD_VAR 0 2
3296: PPUSH
3297: LD_EXP 5
3301: PUSH
3302: LD_VAR 0 2
3306: ARRAY
3307: PUSH
3308: LD_VAR 0 2
3312: PUSH
3313: LD_INT 1
3315: MINUS
3316: PPUSH
3317: CALL_OW 426
3321: PUSH
3322: LD_INT 1
3324: PLUS
3325: ARRAY
3326: PPUSH
3327: CALL_OW 1
3331: ST_TO_ADDR
// end ;
3332: GO 3257
3334: POP
3335: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3336: LD_ADDR_EXP 11
3340: PUSH
3341: LD_EXP 8
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: EMPTY
3350: LIST
3351: DIFF
3352: PUSH
3353: LD_INT 1
3355: GREATER
3356: ST_TO_ADDR
// end else
3357: GO 3359
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3359: LD_EXP 3
3363: PPUSH
3364: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3368: LD_EXP 18
3372: PPUSH
3373: CALL 12256 0 1
3377: IFFALSE 3408
// begin for i in mpMarkedAreas do
3379: LD_ADDR_VAR 0 2
3383: PUSH
3384: LD_EXP 18
3388: PUSH
3389: FOR_IN
3390: IFFALSE 3406
// SetAreaMapShow ( i , 0 ) ;
3392: LD_VAR 0 2
3396: PPUSH
3397: LD_INT 0
3399: PPUSH
3400: CALL_OW 424
3404: GO 3389
3406: POP
3407: POP
// end ; for i := 1 to 8 do
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: DOUBLE
3414: LD_INT 1
3416: DEC
3417: ST_TO_ADDR
3418: LD_INT 8
3420: PUSH
3421: FOR_TO
3422: IFFALSE 4758
// begin if not mpSidePositions [ i ] then
3424: LD_EXP 7
3428: PUSH
3429: LD_VAR 0 2
3433: ARRAY
3434: NOT
3435: IFFALSE 3439
// continue ;
3437: GO 3421
// side := i ;
3439: LD_ADDR_VAR 0 7
3443: PUSH
3444: LD_VAR 0 2
3448: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3449: LD_ADDR_VAR 0 9
3453: PUSH
3454: LD_EXP 9
3458: PUSH
3459: LD_VAR 0 2
3463: ARRAY
3464: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3465: LD_ADDR_VAR 0 8
3469: PUSH
3470: LD_EXP 7
3474: PUSH
3475: LD_VAR 0 2
3479: ARRAY
3480: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3481: LD_EXP 12
3485: PPUSH
3486: CALL 12256 0 1
3490: IFFALSE 3567
// begin for j in mpOilDeposits [ pos ] do
3492: LD_ADDR_VAR 0 3
3496: PUSH
3497: LD_EXP 12
3501: PUSH
3502: LD_VAR 0 8
3506: ARRAY
3507: PUSH
3508: FOR_IN
3509: IFFALSE 3565
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3511: LD_VAR 0 3
3515: PUSH
3516: LD_INT 1
3518: ARRAY
3519: PPUSH
3520: LD_VAR 0 3
3524: PUSH
3525: LD_INT 2
3527: ARRAY
3528: PPUSH
3529: LD_INT 2
3531: PPUSH
3532: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3536: LD_VAR 0 3
3540: PUSH
3541: LD_INT 1
3543: ARRAY
3544: PPUSH
3545: LD_VAR 0 3
3549: PUSH
3550: LD_INT 2
3552: ARRAY
3553: PPUSH
3554: LD_VAR 0 7
3558: PPUSH
3559: CALL_OW 441
// end ;
3563: GO 3508
3565: POP
3566: POP
// end ; if Count ( mpSibDeposits ) then
3567: LD_EXP 13
3571: PPUSH
3572: CALL 12256 0 1
3576: IFFALSE 3653
// begin for j in mpSibDeposits [ pos ] do
3578: LD_ADDR_VAR 0 3
3582: PUSH
3583: LD_EXP 13
3587: PUSH
3588: LD_VAR 0 8
3592: ARRAY
3593: PUSH
3594: FOR_IN
3595: IFFALSE 3651
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3597: LD_VAR 0 3
3601: PUSH
3602: LD_INT 1
3604: ARRAY
3605: PPUSH
3606: LD_VAR 0 3
3610: PUSH
3611: LD_INT 2
3613: ARRAY
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3622: LD_VAR 0 3
3626: PUSH
3627: LD_INT 1
3629: ARRAY
3630: PPUSH
3631: LD_VAR 0 3
3635: PUSH
3636: LD_INT 2
3638: ARRAY
3639: PPUSH
3640: LD_VAR 0 7
3644: PPUSH
3645: CALL_OW 441
// end ;
3649: GO 3594
3651: POP
3652: POP
// end ; InitBc ;
3653: CALL_OW 21
// InitUc ;
3657: CALL_OW 18
// uc_side := side ;
3661: LD_ADDR_OWVAR 20
3665: PUSH
3666: LD_VAR 0 7
3670: ST_TO_ADDR
// uc_nation := nation ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_VAR 0 9
3680: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3681: LD_EXP 22
3685: PUSH
3686: LD_INT 1
3688: NEG
3689: GREATER
3690: IFFALSE 3849
// begin x := mpStartPos [ pos ] [ 1 ] ;
3692: LD_ADDR_VAR 0 5
3696: PUSH
3697: LD_EXP 21
3701: PUSH
3702: LD_VAR 0 8
3706: ARRAY
3707: PUSH
3708: LD_INT 1
3710: ARRAY
3711: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3712: LD_ADDR_VAR 0 6
3716: PUSH
3717: LD_EXP 21
3721: PUSH
3722: LD_VAR 0 8
3726: ARRAY
3727: PUSH
3728: LD_INT 2
3730: ARRAY
3731: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3732: LD_VAR 0 5
3736: PPUSH
3737: LD_VAR 0 6
3741: PPUSH
3742: LD_INT 12
3744: PPUSH
3745: LD_INT 2
3747: PPUSH
3748: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3752: LD_ADDR_EXP 23
3756: PUSH
3757: LD_EXP 23
3761: PPUSH
3762: LD_VAR 0 7
3766: PPUSH
3767: LD_VAR 0 7
3771: PPUSH
3772: LD_VAR 0 5
3776: PPUSH
3777: LD_VAR 0 6
3781: PPUSH
3782: LD_INT 1
3784: PUSH
3785: LD_INT 100
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: PUSH
3792: LD_INT 2
3794: PUSH
3795: LD_INT 70
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 3
3804: PUSH
3805: LD_INT 40
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 10
3814: PUSH
3815: LD_INT 25
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 20
3824: PUSH
3825: LD_INT 100
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: PPUSH
3839: CALL_OW 418
3843: PPUSH
3844: CALL_OW 1
3848: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3849: LD_EXP 14
3853: PPUSH
3854: CALL 12256 0 1
3858: IFFALSE 4042
// begin if mpGameType = GameTypeSurvival then
3860: LD_EXP 3
3864: PUSH
3865: LD_INT 2
3867: EQUAL
3868: IFFALSE 3888
// begin bc_level := 10 ;
3870: LD_ADDR_OWVAR 43
3874: PUSH
3875: LD_INT 10
3877: ST_TO_ADDR
// bc_type := b_warehouse ;
3878: LD_ADDR_OWVAR 42
3882: PUSH
3883: LD_INT 1
3885: ST_TO_ADDR
// end else
3886: GO 3904
// begin bc_level := 0 ;
3888: LD_ADDR_OWVAR 43
3892: PUSH
3893: LD_INT 0
3895: ST_TO_ADDR
// bc_type := b_depot ;
3896: LD_ADDR_OWVAR 42
3900: PUSH
3901: LD_INT 0
3903: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_EXP 14
3913: PUSH
3914: LD_VAR 0 8
3918: ARRAY
3919: PUSH
3920: LD_INT 1
3922: ARRAY
3923: PPUSH
3924: LD_EXP 14
3928: PUSH
3929: LD_VAR 0 8
3933: ARRAY
3934: PUSH
3935: LD_INT 2
3937: ARRAY
3938: PPUSH
3939: LD_EXP 14
3943: PUSH
3944: LD_VAR 0 8
3948: ARRAY
3949: PUSH
3950: LD_INT 3
3952: ARRAY
3953: PPUSH
3954: CALL_OW 47
3958: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3959: LD_VAR 0 4
3963: PPUSH
3964: LD_STRING @
3966: PUSH
3967: LD_VAR 0 7
3971: STR
3972: PPUSH
3973: CALL_OW 500
// if Count ( mpStartingResources ) then
3977: LD_EXP 15
3981: PPUSH
3982: CALL 12256 0 1
3986: IFFALSE 4040
// begin for j := 1 to mpStartingResources do
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: DOUBLE
3994: LD_INT 1
3996: DEC
3997: ST_TO_ADDR
3998: LD_EXP 15
4002: PUSH
4003: FOR_TO
4004: IFFALSE 4038
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4006: LD_VAR 0 4
4010: PPUSH
4011: CALL_OW 274
4015: PPUSH
4016: LD_VAR 0 3
4020: PPUSH
4021: LD_EXP 15
4025: PUSH
4026: LD_VAR 0 3
4030: ARRAY
4031: PPUSH
4032: CALL_OW 277
4036: GO 4003
4038: POP
4039: POP
// end ; end else
4040: GO 4249
// if Count ( mpStartingResources ) then
4042: LD_EXP 15
4046: PPUSH
4047: CALL 12256 0 1
4051: IFFALSE 4249
// begin x := mpStartPos [ pos ] [ 1 ] ;
4053: LD_ADDR_VAR 0 5
4057: PUSH
4058: LD_EXP 21
4062: PUSH
4063: LD_VAR 0 8
4067: ARRAY
4068: PUSH
4069: LD_INT 1
4071: ARRAY
4072: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4073: LD_ADDR_VAR 0 6
4077: PUSH
4078: LD_EXP 21
4082: PUSH
4083: LD_VAR 0 8
4087: ARRAY
4088: PUSH
4089: LD_INT 2
4091: ARRAY
4092: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4093: LD_ADDR_VAR 0 3
4097: PUSH
4098: DOUBLE
4099: LD_INT 1
4101: DEC
4102: ST_TO_ADDR
4103: LD_EXP 15
4107: PUSH
4108: FOR_TO
4109: IFFALSE 4247
// begin resources := mpStartingResources [ j ] ;
4111: LD_ADDR_VAR 0 13
4115: PUSH
4116: LD_EXP 15
4120: PUSH
4121: LD_VAR 0 3
4125: ARRAY
4126: ST_TO_ADDR
// if resources = 0 then
4127: LD_VAR 0 13
4131: PUSH
4132: LD_INT 0
4134: EQUAL
4135: IFFALSE 4139
// continue ;
4137: GO 4108
// repeat if resources >= 50 then
4139: LD_VAR 0 13
4143: PUSH
4144: LD_INT 50
4146: GREATEREQUAL
4147: IFFALSE 4193
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4149: LD_VAR 0 3
4153: PPUSH
4154: LD_INT 5
4156: PPUSH
4157: LD_VAR 0 5
4161: PPUSH
4162: LD_VAR 0 6
4166: PPUSH
4167: LD_INT 6
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL_OW 60
// resources := resources - 50 ;
4177: LD_ADDR_VAR 0 13
4181: PUSH
4182: LD_VAR 0 13
4186: PUSH
4187: LD_INT 50
4189: MINUS
4190: ST_TO_ADDR
// end else
4191: GO 4235
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4193: LD_VAR 0 3
4197: PPUSH
4198: LD_VAR 0 13
4202: PUSH
4203: LD_INT 10
4205: DIV
4206: PPUSH
4207: LD_VAR 0 5
4211: PPUSH
4212: LD_VAR 0 6
4216: PPUSH
4217: LD_INT 6
4219: PPUSH
4220: LD_INT 0
4222: PPUSH
4223: CALL_OW 60
// resources := 0 ;
4227: LD_ADDR_VAR 0 13
4231: PUSH
4232: LD_INT 0
4234: ST_TO_ADDR
// end ; until resources <= 0 ;
4235: LD_VAR 0 13
4239: PUSH
4240: LD_INT 0
4242: LESSEQUAL
4243: IFFALSE 4139
// end ;
4245: GO 4108
4247: POP
4248: POP
// end ; if Count ( mpBuildings ) then
4249: LD_EXP 17
4253: PPUSH
4254: CALL 12256 0 1
4258: IFFALSE 4336
// begin for j in mpBuildings [ pos ] do
4260: LD_ADDR_VAR 0 3
4264: PUSH
4265: LD_EXP 17
4269: PUSH
4270: LD_VAR 0 8
4274: ARRAY
4275: PUSH
4276: FOR_IN
4277: IFFALSE 4334
// begin bc_level := 0 ;
4279: LD_ADDR_OWVAR 43
4283: PUSH
4284: LD_INT 0
4286: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4287: LD_ADDR_OWVAR 42
4291: PUSH
4292: LD_VAR 0 3
4296: PUSH
4297: LD_INT 1
4299: ARRAY
4300: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4301: LD_VAR 0 3
4305: PUSH
4306: LD_INT 2
4308: ARRAY
4309: PPUSH
4310: LD_VAR 0 3
4314: PUSH
4315: LD_INT 3
4317: ARRAY
4318: PPUSH
4319: LD_VAR 0 3
4323: PUSH
4324: LD_INT 4
4326: ARRAY
4327: PPUSH
4328: CALL_OW 47
// end ;
4332: GO 4276
4334: POP
4335: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4336: LD_EXP 26
4340: IFFALSE 4360
4342: PUSH
4343: LD_INT 20
4345: PPUSH
4346: LD_VAR 0 7
4350: PPUSH
4351: CALL_OW 321
4355: PUSH
4356: LD_INT 1
4358: EQUAL
4359: AND
4360: IFFALSE 4377
// SetTech ( tech_SibDet , side , state_researched ) ;
4362: LD_INT 20
4364: PPUSH
4365: LD_VAR 0 7
4369: PPUSH
4370: LD_INT 2
4372: PPUSH
4373: CALL_OW 322
// if not mpArtifacts then
4377: LD_EXP 44
4381: NOT
4382: IFFALSE 4399
// SetTech ( tech_artifact , side , state_disabled ) ;
4384: LD_INT 24
4386: PPUSH
4387: LD_VAR 0 7
4391: PPUSH
4392: LD_INT 0
4394: PPUSH
4395: CALL_OW 322
// if mpSibBomb = 1 then
4399: LD_EXP 28
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4426
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4409: LD_INT 25
4411: PPUSH
4412: LD_VAR 0 7
4416: PPUSH
4417: LD_INT 1
4419: PPUSH
4420: CALL_OW 322
// end else
4424: GO 4441
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4426: LD_INT 25
4428: PPUSH
4429: LD_VAR 0 7
4433: PPUSH
4434: LD_INT 0
4436: PPUSH
4437: CALL_OW 322
// end ; if mpVehicles then
4441: LD_EXP 36
4445: IFFALSE 4544
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4447: LD_ADDR_VAR 0 3
4451: PUSH
4452: LD_VAR 0 7
4456: PPUSH
4457: LD_VAR 0 9
4461: PPUSH
4462: LD_EXP 36
4466: PPUSH
4467: CALL 5668 0 3
4471: PUSH
4472: FOR_IN
4473: IFFALSE 4542
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4475: LD_VAR 0 3
4479: PPUSH
4480: LD_INT 0
4482: PPUSH
4483: LD_INT 5
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4495: LD_VAR 0 3
4499: PPUSH
4500: LD_EXP 21
4504: PUSH
4505: LD_VAR 0 8
4509: ARRAY
4510: PUSH
4511: LD_INT 1
4513: ARRAY
4514: PPUSH
4515: LD_EXP 21
4519: PUSH
4520: LD_VAR 0 8
4524: ARRAY
4525: PUSH
4526: LD_INT 2
4528: ARRAY
4529: PPUSH
4530: LD_INT 12
4532: PPUSH
4533: LD_INT 0
4535: PPUSH
4536: CALL_OW 50
// end ;
4540: GO 4472
4542: POP
4543: POP
// end ; uc_nation := nation ;
4544: LD_ADDR_OWVAR 21
4548: PUSH
4549: LD_VAR 0 9
4553: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4554: LD_ADDR_VAR 0 11
4558: PUSH
4559: LD_VAR 0 7
4563: PPUSH
4564: LD_VAR 0 9
4568: PPUSH
4569: LD_EXP 24
4573: PPUSH
4574: LD_EXP 25
4578: PPUSH
4579: CALL 5170 0 4
4583: ST_TO_ADDR
// for j in team do
4584: LD_ADDR_VAR 0 3
4588: PUSH
4589: LD_VAR 0 11
4593: PUSH
4594: FOR_IN
4595: IFFALSE 4644
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_EXP 21
4606: PUSH
4607: LD_VAR 0 8
4611: ARRAY
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: LD_EXP 21
4621: PUSH
4622: LD_VAR 0 8
4626: ARRAY
4627: PUSH
4628: LD_INT 2
4630: ARRAY
4631: PPUSH
4632: LD_INT 12
4634: PPUSH
4635: LD_INT 0
4637: PPUSH
4638: CALL_OW 50
4642: GO 4594
4644: POP
4645: POP
// if mpApemans then
4646: LD_EXP 30
4650: IFFALSE 4756
// begin for j := 1 to mpApemans do
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: DOUBLE
4658: LD_INT 1
4660: DEC
4661: ST_TO_ADDR
4662: LD_EXP 30
4666: PUSH
4667: FOR_TO
4668: IFFALSE 4754
// begin PrepareApeman ( - 5 ) ;
4670: LD_INT 5
4672: NEG
4673: PPUSH
4674: CALL 44315 0 1
// ape := CreateHuman ;
4678: LD_ADDR_VAR 0 10
4682: PUSH
4683: CALL_OW 44
4687: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4688: LD_ADDR_EXP 32
4692: PUSH
4693: LD_EXP 32
4697: PPUSH
4698: LD_VAR 0 8
4702: PPUSH
4703: LD_EXP 32
4707: PUSH
4708: LD_VAR 0 8
4712: ARRAY
4713: PPUSH
4714: LD_VAR 0 10
4718: PPUSH
4719: CALL 48188 0 2
4723: PPUSH
4724: CALL_OW 1
4728: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4729: LD_VAR 0 10
4733: PPUSH
4734: LD_EXP 31
4738: PUSH
4739: LD_VAR 0 8
4743: ARRAY
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 49
// end ;
4752: GO 4667
4754: POP
4755: POP
// end ; end ;
4756: GO 3421
4758: POP
4759: POP
// if not mpTeamGame then
4760: LD_EXP 11
4764: NOT
4765: IFFALSE 4863
// begin for i := 1 to 8 do
4767: LD_ADDR_VAR 0 2
4771: PUSH
4772: DOUBLE
4773: LD_INT 1
4775: DEC
4776: ST_TO_ADDR
4777: LD_INT 8
4779: PUSH
4780: FOR_TO
4781: IFFALSE 4859
// for j := 1 to 8 do
4783: LD_ADDR_VAR 0 3
4787: PUSH
4788: DOUBLE
4789: LD_INT 1
4791: DEC
4792: ST_TO_ADDR
4793: LD_INT 8
4795: PUSH
4796: FOR_TO
4797: IFFALSE 4855
// if i <> j then
4799: LD_VAR 0 2
4803: PUSH
4804: LD_VAR 0 3
4808: NONEQUAL
4809: IFFALSE 4833
// SetAttitude ( i , j , att_neutral , true ) else
4811: LD_VAR 0 2
4815: PPUSH
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_INT 0
4823: PPUSH
4824: LD_INT 1
4826: PPUSH
4827: CALL_OW 80
4831: GO 4853
// SetAttitude ( i , j , att_friend , true ) ;
4833: LD_VAR 0 2
4837: PPUSH
4838: LD_VAR 0 3
4842: PPUSH
4843: LD_INT 1
4845: PPUSH
4846: LD_INT 1
4848: PPUSH
4849: CALL_OW 80
4853: GO 4796
4855: POP
4856: POP
4857: GO 4780
4859: POP
4860: POP
// end else
4861: GO 5038
// begin if mpSharedVision then
4863: LD_EXP 16
4867: IFFALSE 4932
// begin for i in mpTeams do
4869: LD_ADDR_VAR 0 2
4873: PUSH
4874: LD_EXP 10
4878: PUSH
4879: FOR_IN
4880: IFFALSE 4930
// for j := 2 to i do
4882: LD_ADDR_VAR 0 3
4886: PUSH
4887: DOUBLE
4888: LD_INT 2
4890: DEC
4891: ST_TO_ADDR
4892: LD_VAR 0 2
4896: PUSH
4897: FOR_TO
4898: IFFALSE 4926
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4900: LD_VAR 0 2
4904: PUSH
4905: LD_VAR 0 3
4909: ARRAY
4910: PPUSH
4911: LD_VAR 0 2
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PPUSH
4920: CALL_OW 343
4924: GO 4897
4926: POP
4927: POP
4928: GO 4879
4930: POP
4931: POP
// end ; for i := 1 to 8 do
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: DOUBLE
4938: LD_INT 1
4940: DEC
4941: ST_TO_ADDR
4942: LD_INT 8
4944: PUSH
4945: FOR_TO
4946: IFFALSE 5036
// for j := 1 to 8 do
4948: LD_ADDR_VAR 0 3
4952: PUSH
4953: DOUBLE
4954: LD_INT 1
4956: DEC
4957: ST_TO_ADDR
4958: LD_INT 8
4960: PUSH
4961: FOR_TO
4962: IFFALSE 5032
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4964: LD_EXP 8
4968: PUSH
4969: LD_VAR 0 2
4973: ARRAY
4974: PUSH
4975: LD_EXP 8
4979: PUSH
4980: LD_VAR 0 3
4984: ARRAY
4985: EQUAL
4986: IFFALSE 5010
// SetAttitude ( i , j , att_friend , true ) else
4988: LD_VAR 0 2
4992: PPUSH
4993: LD_VAR 0 3
4997: PPUSH
4998: LD_INT 1
5000: PPUSH
5001: LD_INT 1
5003: PPUSH
5004: CALL_OW 80
5008: GO 5030
// SetAttitude ( i , j , att_enemy , true ) ;
5010: LD_VAR 0 2
5014: PPUSH
5015: LD_VAR 0 3
5019: PPUSH
5020: LD_INT 2
5022: PPUSH
5023: LD_INT 1
5025: PPUSH
5026: CALL_OW 80
5030: GO 4961
5032: POP
5033: POP
5034: GO 4945
5036: POP
5037: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5038: LD_ADDR_OWVAR 71
5042: PUSH
5043: LD_EXP 9
5047: PUSH
5048: LD_OWVAR 2
5052: ARRAY
5053: ST_TO_ADDR
// if IAmSpec then
5054: CALL_OW 531
5058: IFFALSE 5099
// begin FogOff ( true ) ;
5060: LD_INT 1
5062: PPUSH
5063: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5067: LD_EXP 29
5071: PUSH
5072: LD_INT 1
5074: ARRAY
5075: PUSH
5076: LD_INT 2
5078: DIV
5079: PPUSH
5080: LD_EXP 29
5084: PUSH
5085: LD_INT 2
5087: ARRAY
5088: PUSH
5089: LD_INT 2
5091: DIV
5092: PPUSH
5093: CALL_OW 86
// end else
5097: GO 5145
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5099: LD_EXP 21
5103: PUSH
5104: LD_EXP 7
5108: PUSH
5109: LD_OWVAR 2
5113: ARRAY
5114: ARRAY
5115: PUSH
5116: LD_INT 1
5118: ARRAY
5119: PPUSH
5120: LD_EXP 21
5124: PUSH
5125: LD_EXP 7
5129: PUSH
5130: LD_OWVAR 2
5134: ARRAY
5135: ARRAY
5136: PUSH
5137: LD_INT 2
5139: ARRAY
5140: PPUSH
5141: CALL_OW 86
// end ; BeginBuildUp ;
5145: CALL 6201 0 0
// enable ( mpActive ) ;
5149: LD_INT 100
5151: ENABLE_MARKED
// enable ( mpGameType ) ;
5152: LD_EXP 3
5156: ENABLE_MARKED
// mpGameActive := true ;
5157: LD_ADDR_EXP 39
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// end ;
5165: LD_VAR 0 1
5169: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
// result := [ ] ;
5176: LD_ADDR_VAR 0 5
5180: PUSH
5181: EMPTY
5182: ST_TO_ADDR
// class := class_soldier ;
5183: LD_ADDR_VAR 0 8
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// uc_side := side ;
5191: LD_ADDR_OWVAR 20
5195: PUSH
5196: LD_VAR 0 1
5200: ST_TO_ADDR
// uc_nation := nation ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_VAR 0 2
5210: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5211: LD_ADDR_OWVAR 26
5215: PUSH
5216: LD_OWVAR 19
5220: PUSH
5221: LD_VAR 0 1
5225: ARRAY
5226: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5227: LD_INT 1
5229: PPUSH
5230: LD_INT 2
5232: PPUSH
5233: CALL_OW 12
5237: PPUSH
5238: LD_VAR 0 8
5242: PPUSH
5243: LD_VAR 0 4
5247: PUSH
5248: LD_INT 2
5250: PLUS
5251: PPUSH
5252: CALL_OW 380
// hc_importance := 105 ;
5256: LD_ADDR_OWVAR 32
5260: PUSH
5261: LD_INT 105
5263: ST_TO_ADDR
// if Multiplayer then
5264: LD_OWVAR 4
5268: IFFALSE 5308
// begin hc_gallery := MULTIAVATARS ;
5270: LD_ADDR_OWVAR 33
5274: PUSH
5275: LD_STRING MULTIAVATARS
5277: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5278: LD_ADDR_OWVAR 34
5282: PUSH
5283: LD_VAR 0 1
5287: PPUSH
5288: CALL_OW 525
5292: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5293: LD_ADDR_OWVAR 27
5297: PUSH
5298: LD_VAR 0 1
5302: PPUSH
5303: CALL_OW 526
5307: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5308: LD_ADDR_VAR 0 5
5312: PUSH
5313: LD_VAR 0 5
5317: PPUSH
5318: CALL_OW 44
5322: PPUSH
5323: CALL 48188 0 2
5327: ST_TO_ADDR
// if mpTeamPreset then
5328: LD_LOC 1
5332: IFFALSE 5428
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5334: LD_LOC 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_VAR 0 5
5347: PUSH
5348: LD_VAR 0 5
5352: ARRAY
5353: PPUSH
5354: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5358: LD_VAR 0 5
5362: PUSH
5363: LD_VAR 0 5
5367: ARRAY
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: LD_LOC 1
5376: PUSH
5377: LD_INT 1
5379: ARRAY
5380: PPUSH
5381: LD_INT 1
5383: PPUSH
5384: CALL_OW 260
5388: PPUSH
5389: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5393: LD_VAR 0 5
5397: PUSH
5398: LD_VAR 0 5
5402: ARRAY
5403: PPUSH
5404: LD_INT 2
5406: PPUSH
5407: LD_LOC 1
5411: PUSH
5412: LD_INT 1
5414: ARRAY
5415: PPUSH
5416: LD_INT 2
5418: PPUSH
5419: CALL_OW 260
5423: PPUSH
5424: CALL_OW 239
// end ; InitHc_All ( ) ;
5428: CALL_OW 584
// class := 2 ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: LD_INT 2
5439: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5440: LD_ADDR_VAR 0 6
5444: PUSH
5445: DOUBLE
5446: LD_INT 1
5448: DEC
5449: ST_TO_ADDR
5450: LD_VAR 0 3
5454: PUSH
5455: LD_INT 1
5457: MINUS
5458: PUSH
5459: FOR_TO
5460: IFFALSE 5644
// begin PrepareHuman ( false , class , skill ) ;
5462: LD_INT 0
5464: PPUSH
5465: LD_VAR 0 8
5469: PPUSH
5470: LD_VAR 0 4
5474: PPUSH
5475: CALL_OW 380
// un := CreateHuman ;
5479: LD_ADDR_VAR 0 7
5483: PUSH
5484: CALL_OW 44
5488: ST_TO_ADDR
// result := Join ( result , un ) ;
5489: LD_ADDR_VAR 0 5
5493: PUSH
5494: LD_VAR 0 5
5498: PPUSH
5499: LD_VAR 0 7
5503: PPUSH
5504: CALL 48188 0 2
5508: ST_TO_ADDR
// if mpTeamPreset then
5509: LD_LOC 1
5513: IFFALSE 5609
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5515: LD_LOC 1
5519: PUSH
5520: LD_VAR 0 6
5524: PUSH
5525: LD_INT 1
5527: PLUS
5528: ARRAY
5529: PPUSH
5530: LD_VAR 0 7
5534: PPUSH
5535: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5539: LD_VAR 0 7
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_LOC 1
5551: PUSH
5552: LD_VAR 0 6
5556: PUSH
5557: LD_INT 1
5559: PLUS
5560: ARRAY
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 260
5569: PPUSH
5570: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5574: LD_VAR 0 7
5578: PPUSH
5579: LD_INT 2
5581: PPUSH
5582: LD_LOC 1
5586: PUSH
5587: LD_VAR 0 6
5591: PUSH
5592: LD_INT 1
5594: PLUS
5595: ARRAY
5596: PPUSH
5597: LD_INT 2
5599: PPUSH
5600: CALL_OW 260
5604: PPUSH
5605: CALL_OW 239
// end ; class := Inc ( class ) ;
5609: LD_ADDR_VAR 0 8
5613: PUSH
5614: LD_VAR 0 8
5618: PPUSH
5619: CALL 49561 0 1
5623: ST_TO_ADDR
// if class = 5 then
5624: LD_VAR 0 8
5628: PUSH
5629: LD_INT 5
5631: EQUAL
5632: IFFALSE 5642
// class := 1 ;
5634: LD_ADDR_VAR 0 8
5638: PUSH
5639: LD_INT 1
5641: ST_TO_ADDR
// end ;
5642: GO 5459
5644: POP
5645: POP
// if not mpTeamPreset then
5646: LD_LOC 1
5650: NOT
5651: IFFALSE 5663
// mpTeamPreset := result ;
5653: LD_ADDR_LOC 1
5657: PUSH
5658: LD_VAR 0 5
5662: ST_TO_ADDR
// end ;
5663: LD_VAR 0 5
5667: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5668: LD_INT 0
5670: PPUSH
5671: PPUSH
// result := [ ] ;
5672: LD_ADDR_VAR 0 4
5676: PUSH
5677: EMPTY
5678: ST_TO_ADDR
// if not vehicles then
5679: LD_VAR 0 3
5683: NOT
5684: IFFALSE 5688
// exit ;
5686: GO 5902
// for i := 1 to vehicles [ nation ] do
5688: LD_ADDR_VAR 0 5
5692: PUSH
5693: DOUBLE
5694: LD_INT 1
5696: DEC
5697: ST_TO_ADDR
5698: LD_VAR 0 3
5702: PUSH
5703: LD_VAR 0 2
5707: ARRAY
5708: PUSH
5709: FOR_TO
5710: IFFALSE 5900
// begin uc_side := side ;
5712: LD_ADDR_OWVAR 20
5716: PUSH
5717: LD_VAR 0 1
5721: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5722: LD_VAR 0 3
5726: PUSH
5727: LD_VAR 0 2
5731: ARRAY
5732: PUSH
5733: LD_VAR 0 5
5737: ARRAY
5738: PPUSH
5739: CALL 12256 0 1
5743: PUSH
5744: LD_INT 4
5746: GREATER
5747: IFFALSE 5777
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5749: LD_ADDR_OWVAR 21
5753: PUSH
5754: LD_VAR 0 3
5758: PUSH
5759: LD_VAR 0 2
5763: ARRAY
5764: PUSH
5765: LD_VAR 0 5
5769: ARRAY
5770: PUSH
5771: LD_INT 5
5773: ARRAY
5774: ST_TO_ADDR
5775: GO 5787
// uc_nation := nation ;
5777: LD_ADDR_OWVAR 21
5781: PUSH
5782: LD_VAR 0 2
5786: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5787: LD_VAR 0 3
5791: PUSH
5792: LD_VAR 0 2
5796: ARRAY
5797: PUSH
5798: LD_VAR 0 5
5802: ARRAY
5803: PUSH
5804: LD_INT 1
5806: ARRAY
5807: PPUSH
5808: LD_VAR 0 3
5812: PUSH
5813: LD_VAR 0 2
5817: ARRAY
5818: PUSH
5819: LD_VAR 0 5
5823: ARRAY
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: LD_VAR 0 3
5833: PUSH
5834: LD_VAR 0 2
5838: ARRAY
5839: PUSH
5840: LD_VAR 0 5
5844: ARRAY
5845: PUSH
5846: LD_INT 3
5848: ARRAY
5849: PPUSH
5850: LD_VAR 0 3
5854: PUSH
5855: LD_VAR 0 2
5859: ARRAY
5860: PUSH
5861: LD_VAR 0 5
5865: ARRAY
5866: PUSH
5867: LD_INT 4
5869: ARRAY
5870: PPUSH
5871: LD_INT 80
5873: PPUSH
5874: CALL 15018 0 5
// result := Join ( result , CreateVehicle ) ;
5878: LD_ADDR_VAR 0 4
5882: PUSH
5883: LD_VAR 0 4
5887: PPUSH
5888: CALL_OW 45
5892: PPUSH
5893: CALL 48188 0 2
5897: ST_TO_ADDR
// end ;
5898: GO 5709
5900: POP
5901: POP
// end ;
5902: LD_VAR 0 4
5906: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5907: LD_INT 0
5909: PPUSH
5910: PPUSH
// for i in mpBattleFlags do
5911: LD_ADDR_VAR 0 3
5915: PUSH
5916: LD_EXP 23
5920: PUSH
5921: FOR_IN
5922: IFFALSE 5999
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5924: LD_VAR 0 3
5928: PPUSH
5929: LD_INT 1
5931: PUSH
5932: LD_VAR 0 1
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 2
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_REAL  7.00000000000000E-0001
5952: MUL
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: LD_INT 3
5960: PUSH
5961: LD_VAR 0 1
5965: PUSH
5966: LD_REAL  4.00000000000000E-0001
5969: MUL
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: LD_INT 20
5977: PUSH
5978: LD_VAR 0 1
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: PPUSH
5993: CALL_OW 423
5997: GO 5921
5999: POP
6000: POP
// end ;
6001: LD_VAR 0 2
6005: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6006: LD_INT 100
6008: IFFALSE 6103
6010: GO 6012
6012: DISABLE
6013: LD_INT 0
6015: PPUSH
6016: PPUSH
// begin if mpBattleFlag <= 0 then
6017: LD_EXP 22
6021: PUSH
6022: LD_INT 0
6024: LESSEQUAL
6025: IFFALSE 6029
// exit ;
6027: GO 6103
// strength := 100 ;
6029: LD_ADDR_VAR 0 2
6033: PUSH
6034: LD_INT 100
6036: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6037: LD_EXP 22
6041: PPUSH
6042: CALL_OW 67
// strength := Dec ( strength ) ;
6046: LD_ADDR_VAR 0 2
6050: PUSH
6051: LD_VAR 0 2
6055: PPUSH
6056: CALL 49583 0 1
6060: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6061: LD_VAR 0 2
6065: PPUSH
6066: CALL 5907 0 1
// until not strength ;
6070: LD_VAR 0 2
6074: NOT
6075: IFFALSE 6037
// for i in mpBattleFlags do
6077: LD_ADDR_VAR 0 1
6081: PUSH
6082: LD_EXP 23
6086: PUSH
6087: FOR_IN
6088: IFFALSE 6101
// KillBattleFlag ( i ) ;
6090: LD_VAR 0 1
6094: PPUSH
6095: CALL_OW 419
6099: GO 6087
6101: POP
6102: POP
// end ;
6103: PPOPN 2
6105: END
// every 0 0$1 marked mpActive do var side , tmp ;
6106: GO 6108
6108: DISABLE
6109: LD_INT 0
6111: PPUSH
6112: PPUSH
// begin if mpSibBomb <= 1 then
6113: LD_EXP 28
6117: PUSH
6118: LD_INT 1
6120: LESSEQUAL
6121: IFFALSE 6125
// exit ;
6123: GO 6198
// tmp := mpSibBomb ;
6125: LD_ADDR_VAR 0 2
6129: PUSH
6130: LD_EXP 28
6134: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6135: LD_INT 35
6137: PPUSH
6138: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6142: LD_ADDR_VAR 0 2
6146: PUSH
6147: LD_VAR 0 2
6151: PUSH
6152: LD_INT 35
6154: MINUS
6155: ST_TO_ADDR
// until not tmp ;
6156: LD_VAR 0 2
6160: NOT
6161: IFFALSE 6135
// for side := 1 to 8 do
6163: LD_ADDR_VAR 0 1
6167: PUSH
6168: DOUBLE
6169: LD_INT 1
6171: DEC
6172: ST_TO_ADDR
6173: LD_INT 8
6175: PUSH
6176: FOR_TO
6177: IFFALSE 6196
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6179: LD_INT 25
6181: PPUSH
6182: LD_VAR 0 1
6186: PPUSH
6187: LD_INT 1
6189: PPUSH
6190: CALL_OW 322
6194: GO 6176
6196: POP
6197: POP
// end ;
6198: PPOPN 2
6200: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6201: LD_INT 0
6203: PPUSH
6204: PPUSH
6205: PPUSH
// mpBuildUpTimeDelay := 0 ;
6206: LD_ADDR_EXP 46
6210: PUSH
6211: LD_INT 0
6213: ST_TO_ADDR
// if not mpBuildUpTime then
6214: LD_EXP 20
6218: NOT
6219: IFFALSE 6223
// exit ;
6221: GO 6412
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6223: LD_ADDR_EXP 46
6227: PUSH
6228: LD_INT 8400
6230: PUSH
6231: LD_INT 2100
6233: PUSH
6234: LD_EXP 20
6238: MUL
6239: PLUS
6240: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6241: LD_ADDR_EXP 47
6245: PUSH
6246: LD_INT 1
6248: ST_TO_ADDR
// for i := 1 to 8 do
6249: LD_ADDR_VAR 0 2
6253: PUSH
6254: DOUBLE
6255: LD_INT 1
6257: DEC
6258: ST_TO_ADDR
6259: LD_INT 8
6261: PUSH
6262: FOR_TO
6263: IFFALSE 6410
// if mpSidePositions [ i ] then
6265: LD_EXP 7
6269: PUSH
6270: LD_VAR 0 2
6274: ARRAY
6275: IFFALSE 6408
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6277: LD_EXP 19
6281: PUSH
6282: LD_EXP 7
6286: PUSH
6287: LD_VAR 0 2
6291: ARRAY
6292: ARRAY
6293: PPUSH
6294: LD_INT 5
6296: PPUSH
6297: CALL_OW 424
// for j := 1 to 8 do
6301: LD_ADDR_VAR 0 3
6305: PUSH
6306: DOUBLE
6307: LD_INT 1
6309: DEC
6310: ST_TO_ADDR
6311: LD_INT 8
6313: PUSH
6314: FOR_TO
6315: IFFALSE 6406
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6317: LD_EXP 7
6321: PUSH
6322: LD_VAR 0 3
6326: ARRAY
6327: IFFALSE 6376
6329: PUSH
6330: LD_EXP 8
6334: PUSH
6335: LD_VAR 0 2
6339: ARRAY
6340: PUSH
6341: LD_EXP 8
6345: PUSH
6346: LD_VAR 0 3
6350: ARRAY
6351: NONEQUAL
6352: IFTRUE 6375
6354: PUSH
6355: LD_EXP 11
6359: NOT
6360: IFFALSE 6374
6362: PUSH
6363: LD_VAR 0 2
6367: PUSH
6368: LD_VAR 0 3
6372: NONEQUAL
6373: AND
6374: OR
6375: AND
6376: IFFALSE 6404
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6378: LD_VAR 0 3
6382: PPUSH
6383: LD_EXP 19
6387: PUSH
6388: LD_EXP 7
6392: PUSH
6393: LD_VAR 0 2
6397: ARRAY
6398: ARRAY
6399: PPUSH
6400: CALL_OW 333
6404: GO 6314
6406: POP
6407: POP
// end ;
6408: GO 6262
6410: POP
6411: POP
// end ;
6412: LD_VAR 0 1
6416: RET
// function EndBuildUp ; var i , j ; begin
6417: LD_INT 0
6419: PPUSH
6420: PPUSH
6421: PPUSH
// mpBuildUpTimeActive := false ;
6422: LD_ADDR_EXP 47
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// for i := 1 to 8 do
6430: LD_ADDR_VAR 0 2
6434: PUSH
6435: DOUBLE
6436: LD_INT 1
6438: DEC
6439: ST_TO_ADDR
6440: LD_INT 8
6442: PUSH
6443: FOR_TO
6444: IFFALSE 6591
// if mpSidePositions [ i ] then
6446: LD_EXP 7
6450: PUSH
6451: LD_VAR 0 2
6455: ARRAY
6456: IFFALSE 6589
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6458: LD_EXP 19
6462: PUSH
6463: LD_EXP 7
6467: PUSH
6468: LD_VAR 0 2
6472: ARRAY
6473: ARRAY
6474: PPUSH
6475: LD_INT 0
6477: PPUSH
6478: CALL_OW 424
// for j := 1 to 8 do
6482: LD_ADDR_VAR 0 3
6486: PUSH
6487: DOUBLE
6488: LD_INT 1
6490: DEC
6491: ST_TO_ADDR
6492: LD_INT 8
6494: PUSH
6495: FOR_TO
6496: IFFALSE 6587
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6498: LD_EXP 7
6502: PUSH
6503: LD_VAR 0 3
6507: ARRAY
6508: IFFALSE 6557
6510: PUSH
6511: LD_EXP 8
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PUSH
6522: LD_EXP 8
6526: PUSH
6527: LD_VAR 0 3
6531: ARRAY
6532: NONEQUAL
6533: IFTRUE 6556
6535: PUSH
6536: LD_EXP 11
6540: NOT
6541: IFFALSE 6555
6543: PUSH
6544: LD_VAR 0 2
6548: PUSH
6549: LD_VAR 0 3
6553: NONEQUAL
6554: AND
6555: OR
6556: AND
6557: IFFALSE 6585
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6559: LD_VAR 0 3
6563: PPUSH
6564: LD_EXP 19
6568: PUSH
6569: LD_EXP 7
6573: PUSH
6574: LD_VAR 0 2
6578: ARRAY
6579: ARRAY
6580: PPUSH
6581: CALL_OW 334
6585: GO 6495
6587: POP
6588: POP
// end ;
6589: GO 6443
6591: POP
6592: POP
// end ;
6593: LD_VAR 0 1
6597: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6598: LD_EXP 47
6602: IFFALSE 6781
6604: GO 6606
6606: DISABLE
6607: LD_INT 0
6609: PPUSH
6610: PPUSH
// begin for i := 1 to 8 do
6611: LD_ADDR_VAR 0 1
6615: PUSH
6616: DOUBLE
6617: LD_INT 1
6619: DEC
6620: ST_TO_ADDR
6621: LD_INT 8
6623: PUSH
6624: FOR_TO
6625: IFFALSE 6778
// if mpSidePositions [ i ] then
6627: LD_EXP 7
6631: PUSH
6632: LD_VAR 0 1
6636: ARRAY
6637: IFFALSE 6776
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6639: LD_ADDR_VAR 0 2
6643: PUSH
6644: LD_EXP 19
6648: PUSH
6649: LD_EXP 7
6653: PUSH
6654: LD_VAR 0 1
6658: ARRAY
6659: ARRAY
6660: PPUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 21
6666: PUSH
6667: LD_INT 1
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 21
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 22
6691: PUSH
6692: LD_OWVAR 2
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: PPUSH
6705: CALL_OW 70
6709: PUSH
6710: FOR_IN
6711: IFFALSE 6774
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6713: LD_EXP 8
6717: PUSH
6718: LD_VAR 0 1
6722: ARRAY
6723: PUSH
6724: LD_EXP 8
6728: PUSH
6729: LD_OWVAR 2
6733: ARRAY
6734: NONEQUAL
6735: IFTRUE 6758
6737: PUSH
6738: LD_EXP 11
6742: NOT
6743: IFFALSE 6757
6745: PUSH
6746: LD_VAR 0 1
6750: PUSH
6751: LD_OWVAR 2
6755: NONEQUAL
6756: AND
6757: OR
6758: IFFALSE 6772
// ComMoveToArea ( un , BuildUpEscape ) ;
6760: LD_VAR 0 2
6764: PPUSH
6765: LD_INT 16
6767: PPUSH
6768: CALL_OW 113
6772: GO 6710
6774: POP
6775: POP
6776: GO 6624
6778: POP
6779: POP
// enable ;
6780: ENABLE
// end ;
6781: PPOPN 2
6783: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6784: LD_EXP 20
6788: IFFALSE 6838
6790: GO 6792
6792: DISABLE
6793: LD_INT 0
6795: PPUSH
// begin tmp := mpBuildUpTime ;
6796: LD_ADDR_VAR 0 1
6800: PUSH
6801: LD_EXP 20
6805: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6806: LD_INT 35
6808: PPUSH
6809: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6813: LD_ADDR_VAR 0 1
6817: PUSH
6818: LD_VAR 0 1
6822: PUSH
6823: LD_INT 35
6825: MINUS
6826: ST_TO_ADDR
// until not tmp ;
6827: LD_VAR 0 1
6831: NOT
6832: IFFALSE 6806
// EndBuildUp ;
6834: CALL 6417 0 0
// end ;
6838: PPOPN 1
6840: END
// every 0 0$1 trigger mpActive marked mpWin do
6841: LD_INT 100
6843: IFFALSE 6877
6845: GO 6847
6847: DISABLE
// begin if IAmServer then
6848: CALL_OW 518
6852: IFFALSE 6861
// wait ( 0 0$3 ) ;
6854: LD_INT 105
6856: PPUSH
6857: CALL_OW 67
// if Multiplayer then
6861: LD_OWVAR 4
6865: IFFALSE 6873
// YouWinInMultiplayer else
6867: CALL_OW 106
6871: GO 6877
// YouWin ;
6873: CALL_OW 103
// end ;
6877: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6878: LD_INT 0
6880: PPUSH
// result := false ;
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_INT 0
6888: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6889: LD_VAR 0 1
6893: PUSH
6894: LD_INT 1
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6908
6900: LD_INT 5
6902: DOUBLE
6903: EQUAL
6904: IFTRUE 6908
6906: GO 6981
6908: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6909: LD_ADDR_VAR 0 3
6913: PUSH
6914: LD_INT 22
6916: PUSH
6917: LD_VAR 0 2
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 33
6941: PUSH
6942: LD_INT 3
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 33
6951: PUSH
6952: LD_INT 5
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PPUSH
6969: CALL_OW 69
6973: PPUSH
6974: CALL 12256 0 1
6978: ST_TO_ADDR
// end ; GameTypeSurvival :
6979: GO 7220
6981: LD_INT 2
6983: DOUBLE
6984: EQUAL
6985: IFTRUE 6989
6987: GO 7119
6989: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6990: LD_ADDR_VAR 0 3
6994: PUSH
6995: LD_INT 22
6997: PUSH
6998: LD_VAR 0 2
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_INT 0
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 1
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PPUSH
7044: CALL 12256 0 1
7048: IFFALSE 7116
7050: PUSH
7051: LD_INT 22
7053: PUSH
7054: LD_VAR 0 2
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 21
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 33
7078: PUSH
7079: LD_INT 3
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 33
7088: PUSH
7089: LD_INT 5
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: PPUSH
7111: CALL 12256 0 1
7115: AND
7116: ST_TO_ADDR
// end ; GameTypeKing :
7117: GO 7220
7119: LD_INT 3
7121: DOUBLE
7122: EQUAL
7123: IFTRUE 7127
7125: GO 7219
7127: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7128: LD_ADDR_VAR 0 3
7132: PUSH
7133: LD_INT 22
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: LD_INT 21
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 33
7160: PUSH
7161: LD_INT 3
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 33
7170: PUSH
7171: LD_INT 5
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 69
7192: PPUSH
7193: CALL 12256 0 1
7197: IFFALSE 7216
7199: PUSH
7200: LD_VAR 0 2
7204: PPUSH
7205: CALL 60152 0 1
7209: PUSH
7210: LD_EXP 35
7214: LESS
7215: AND
7216: ST_TO_ADDR
// end ; end ;
7217: GO 7220
7219: POP
// end ;
7220: LD_VAR 0 3
7224: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7225: LD_INT 100
7227: IFFALSE 7457
7229: GO 7231
7231: DISABLE
7232: LD_INT 0
7234: PPUSH
7235: PPUSH
// begin if Multiplayer then
7236: LD_OWVAR 4
7240: IFFALSE 7248
// SetPlayerSpectator ( ) else
7242: CALL_OW 572
7246: GO 7257
// FogOff ( your_side ) ;
7248: LD_OWVAR 2
7252: PPUSH
7253: CALL_OW 344
// repeat gameIsOn := false ;
7257: LD_ADDR_VAR 0 1
7261: PUSH
7262: LD_INT 0
7264: ST_TO_ADDR
// for i := 1 to 8 do
7265: LD_ADDR_VAR 0 2
7269: PUSH
7270: DOUBLE
7271: LD_INT 1
7273: DEC
7274: ST_TO_ADDR
7275: LD_INT 8
7277: PUSH
7278: FOR_TO
7279: IFFALSE 7409
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7281: LD_EXP 7
7285: PUSH
7286: LD_VAR 0 2
7290: ARRAY
7291: IFFALSE 7304
7293: PUSH
7294: LD_VAR 0 2
7298: PPUSH
7299: CALL_OW 108
7303: AND
7304: IFFALSE 7318
7306: PUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_OWVAR 2
7316: NONEQUAL
7317: AND
7318: IFFALSE 7407
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7320: LD_EXP 8
7324: PUSH
7325: LD_VAR 0 2
7329: ARRAY
7330: NOT
7331: IFTRUE 7379
7333: PUSH
7334: LD_EXP 8
7338: PUSH
7339: LD_VAR 0 2
7343: ARRAY
7344: PUSH
7345: LD_EXP 8
7349: PUSH
7350: LD_OWVAR 2
7354: ARRAY
7355: NONEQUAL
7356: IFFALSE 7378
7358: PUSH
7359: LD_OWVAR 2
7363: PPUSH
7364: LD_VAR 0 2
7368: PPUSH
7369: CALL_OW 81
7373: PUSH
7374: LD_INT 1
7376: NONEQUAL
7377: AND
7378: OR
7379: IFFALSE 7407
// if HasPowerByGameType ( mpGameType , i ) then
7381: LD_EXP 3
7385: PPUSH
7386: LD_VAR 0 2
7390: PPUSH
7391: CALL 6878 0 2
7395: IFFALSE 7407
// begin gameIsOn := true ;
7397: LD_ADDR_VAR 0 1
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// break ;
7405: GO 7409
// end ;
7407: GO 7278
7409: POP
7410: POP
// wait ( 100 ) ;
7411: LD_INT 100
7413: PPUSH
7414: CALL_OW 67
// until not gameIsOn ;
7418: LD_VAR 0 1
7422: NOT
7423: IFFALSE 7257
// if IAmServer then
7425: CALL_OW 518
7429: IFFALSE 7438
// wait ( 0 0$3 ) ;
7431: LD_INT 105
7433: PPUSH
7434: CALL_OW 67
// if Multiplayer then
7438: LD_OWVAR 4
7442: IFFALSE 7450
// YouLostInMultiplayer else
7444: CALL_OW 107
7448: GO 7457
// YouLost (  ) ;
7450: LD_STRING 
7452: PPUSH
7453: CALL_OW 104
// end ;
7457: PPOPN 2
7459: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7460: LD_EXP 33
7464: IFFALSE 7848
7466: GO 7468
7468: DISABLE
7469: LD_INT 0
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7476: LD_ADDR_VAR 0 5
7480: PUSH
7481: LD_INT 1
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: LD_INT 3
7489: PUSH
7490: LD_INT 4
7492: PUSH
7493: LD_INT 5
7495: PUSH
7496: LD_INT 6
7498: PUSH
7499: LD_INT 7
7501: PUSH
7502: LD_INT 8
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7515: LD_INT 350
7517: PPUSH
7518: CALL_OW 67
// for i := 1 to 8 do
7522: LD_ADDR_VAR 0 1
7526: PUSH
7527: DOUBLE
7528: LD_INT 1
7530: DEC
7531: ST_TO_ADDR
7532: LD_INT 8
7534: PUSH
7535: FOR_TO
7536: IFFALSE 7818
// begin j := sides [ i ] ;
7538: LD_ADDR_VAR 0 2
7542: PUSH
7543: LD_VAR 0 5
7547: PUSH
7548: LD_VAR 0 1
7552: ARRAY
7553: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7554: LD_EXP 40
7558: PUSH
7559: LD_VAR 0 2
7563: ARRAY
7564: PPUSH
7565: CALL 12256 0 1
7569: IFFALSE 7582
7571: PUSH
7572: LD_VAR 0 2
7576: PPUSH
7577: CALL_OW 108
7581: AND
7582: IFFALSE 7600
7584: PUSH
7585: LD_EXP 3
7589: PPUSH
7590: LD_VAR 0 2
7594: PPUSH
7595: CALL 6878 0 2
7599: AND
7600: IFFALSE 7816
// begin wait ( mpRespawn div 2 ) ;
7602: LD_EXP 33
7606: PUSH
7607: LD_INT 2
7609: DIV
7610: PPUSH
7611: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7615: LD_ADDR_VAR 0 3
7619: PUSH
7620: LD_INT 22
7622: PUSH
7623: LD_VAR 0 2
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 50
7634: PUSH
7635: EMPTY
7636: LIST
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: LD_INT 30
7643: PUSH
7644: LD_INT 0
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 30
7653: PUSH
7654: LD_INT 1
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7676: LD_VAR 0 3
7680: NOT
7681: IFTRUE 7695
7683: PUSH
7684: LD_VAR 0 2
7688: PPUSH
7689: CALL_OW 108
7693: NOT
7694: OR
7695: IFTRUE 7714
7697: PUSH
7698: LD_EXP 3
7702: PPUSH
7703: LD_VAR 0 2
7707: PPUSH
7708: CALL 6878 0 2
7712: NOT
7713: OR
7714: IFFALSE 7718
// continue ;
7716: GO 7535
// spawn := tmp [ 1 ] ;
7718: LD_ADDR_VAR 0 4
7722: PUSH
7723: LD_VAR 0 3
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7732: LD_EXP 40
7736: PUSH
7737: LD_VAR 0 2
7741: ARRAY
7742: PUSH
7743: LD_INT 1
7745: ARRAY
7746: PPUSH
7747: LD_VAR 0 4
7751: PPUSH
7752: CALL_OW 250
7756: PPUSH
7757: LD_VAR 0 4
7761: PPUSH
7762: CALL_OW 251
7766: PPUSH
7767: LD_INT 32
7769: PPUSH
7770: LD_INT 1
7772: PPUSH
7773: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7777: LD_ADDR_EXP 40
7781: PUSH
7782: LD_EXP 40
7786: PPUSH
7787: LD_VAR 0 2
7791: PPUSH
7792: LD_EXP 40
7796: PUSH
7797: LD_VAR 0 2
7801: ARRAY
7802: PPUSH
7803: LD_INT 1
7805: PPUSH
7806: CALL_OW 3
7810: PPUSH
7811: CALL_OW 1
7815: ST_TO_ADDR
// end ; end ;
7816: GO 7535
7818: POP
7819: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7820: LD_ADDR_VAR 0 5
7824: PUSH
7825: LD_VAR 0 5
7829: PPUSH
7830: LD_INT 1
7832: PPUSH
7833: LD_INT 8
7835: PPUSH
7836: LD_INT 1
7838: PPUSH
7839: CALL 14548 0 4
7843: ST_TO_ADDR
// until false ;
7844: LD_INT 0
7846: IFFALSE 7515
// end ;
7848: PPOPN 5
7850: END
// every 0 0$1 marked mpActive do
7851: GO 7853
7853: DISABLE
// begin enable ;
7854: ENABLE
// if not mpDisplayStrings then
7855: LD_EXP 38
7859: NOT
7860: IFFALSE 7871
// begin display_strings := [ ] ;
7862: LD_ADDR_OWVAR 47
7866: PUSH
7867: EMPTY
7868: ST_TO_ADDR
// exit ;
7869: GO 7881
// end ; display_strings := mpDisplayStrings ;
7871: LD_ADDR_OWVAR 47
7875: PUSH
7876: LD_EXP 38
7880: ST_TO_ADDR
// end ; end_of_file
7881: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7882: LD_INT 0
7884: PPUSH
7885: PPUSH
7886: PPUSH
7887: PPUSH
7888: PPUSH
7889: PPUSH
7890: PPUSH
7891: PPUSH
7892: PPUSH
// if GetType ( un ) = unit_vehicle then
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 247
7902: PUSH
7903: LD_INT 2
7905: EQUAL
7906: IFFALSE 7910
// exit ;
7908: GO 8584
// side := GetSide ( un ) ;
7910: LD_ADDR_VAR 0 9
7914: PUSH
7915: LD_VAR 0 1
7919: PPUSH
7920: CALL_OW 255
7924: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7925: LD_EXP 3
7929: PUSH
7930: LD_INT 2
7932: EQUAL
7933: IFFALSE 8027
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7935: LD_VAR 0 1
7939: PPUSH
7940: CALL_OW 266
7944: PUSH
7945: LD_INT 0
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: IN
7955: IFFALSE 8027
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7957: LD_ADDR_VAR 0 3
7961: PUSH
7962: LD_INT 22
7964: PUSH
7965: LD_VAR 0 9
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 2
7976: PUSH
7977: LD_INT 21
7979: PUSH
7980: LD_INT 1
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 33
7989: PUSH
7990: LD_INT 3
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PPUSH
8006: CALL_OW 69
8010: PUSH
8011: FOR_IN
8012: IFFALSE 8025
// KillUnit ( i ) ;
8014: LD_VAR 0 3
8018: PPUSH
8019: CALL_OW 66
8023: GO 8011
8025: POP
8026: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8027: LD_VAR 0 1
8031: PPUSH
8032: CALL_OW 257
8036: PUSH
8037: LD_INT 12
8039: PUSH
8040: LD_INT 17
8042: PUSH
8043: LD_INT 15
8045: PUSH
8046: LD_INT 16
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: IN
8055: IFTRUE 8072
8057: PUSH
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 263
8067: PUSH
8068: LD_INT 5
8070: EQUAL
8071: OR
8072: IFFALSE 8309
// begin tag := 0 ;
8074: LD_ADDR_VAR 0 5
8078: PUSH
8079: LD_INT 0
8081: ST_TO_ADDR
// for i := 1 to 8 do
8082: LD_ADDR_VAR 0 3
8086: PUSH
8087: DOUBLE
8088: LD_INT 1
8090: DEC
8091: ST_TO_ADDR
8092: LD_INT 8
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8130
// if un in mpApePosIndex [ i ] then
8098: LD_VAR 0 1
8102: PUSH
8103: LD_EXP 32
8107: PUSH
8108: LD_VAR 0 3
8112: ARRAY
8113: IN
8114: IFFALSE 8128
// begin tag := i ;
8116: LD_ADDR_VAR 0 5
8120: PUSH
8121: LD_VAR 0 3
8125: ST_TO_ADDR
// break ;
8126: GO 8130
// end ;
8128: GO 8095
8130: POP
8131: POP
// if not tag then
8132: LD_VAR 0 5
8136: NOT
8137: IFFALSE 8141
// exit ;
8139: GO 8584
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8141: LD_ADDR_VAR 0 7
8145: PUSH
8146: LD_EXP 31
8150: PUSH
8151: LD_EXP 7
8155: PUSH
8156: LD_VAR 0 5
8160: ARRAY
8161: ARRAY
8162: ST_TO_ADDR
// if not area then
8163: LD_VAR 0 7
8167: NOT
8168: IFFALSE 8172
// exit ;
8170: GO 8584
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8172: LD_INT 14700
8174: PUSH
8175: LD_VAR 0 1
8179: PUSH
8180: LD_INT 5
8182: MOD
8183: PUSH
8184: LD_INT 1
8186: PLUS
8187: PUSH
8188: LD_INT 700
8190: MUL
8191: PLUS
8192: PPUSH
8193: CALL_OW 67
// repeat wait ( 10 ) ;
8197: LD_INT 10
8199: PPUSH
8200: CALL_OW 67
// until not mpBlockRespThread ;
8204: LD_EXP 45
8208: NOT
8209: IFFALSE 8197
// mpBlockRespThread := true ;
8211: LD_ADDR_EXP 45
8215: PUSH
8216: LD_INT 1
8218: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8219: LD_INT 0
8221: PPUSH
8222: CALL 44315 0 1
// ape := CreateHuman ;
8226: LD_ADDR_VAR 0 4
8230: PUSH
8231: CALL_OW 44
8235: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8236: LD_ADDR_EXP 32
8240: PUSH
8241: LD_EXP 32
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: LD_EXP 32
8255: PUSH
8256: LD_VAR 0 5
8260: ARRAY
8261: PPUSH
8262: LD_VAR 0 4
8266: PPUSH
8267: CALL 48188 0 2
8271: PPUSH
8272: CALL_OW 1
8276: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8277: LD_VAR 0 4
8281: PPUSH
8282: LD_VAR 0 7
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 49
// wait ( 10 ) ;
8294: LD_INT 10
8296: PPUSH
8297: CALL_OW 67
// mpBlockRespThread := false ;
8301: LD_ADDR_EXP 45
8305: PUSH
8306: LD_INT 0
8308: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8309: LD_VAR 0 1
8313: PPUSH
8314: CALL_OW 247
8318: PUSH
8319: LD_INT 1
8321: EQUAL
8322: IFFALSE 8339
8324: PUSH
8325: LD_VAR 0 1
8329: PPUSH
8330: CALL_OW 248
8334: PUSH
8335: LD_INT 0
8337: GREATER
8338: AND
8339: IFFALSE 8584
// begin if not mpRespawn then
8341: LD_EXP 33
8345: NOT
8346: IFFALSE 8350
// exit ;
8348: GO 8584
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8350: LD_VAR 0 9
8354: PPUSH
8355: CALL_OW 108
8359: NOT
8360: IFFALSE 8379
8362: PUSH
8363: LD_EXP 3
8367: PPUSH
8368: LD_VAR 0 9
8372: PPUSH
8373: CALL 6878 0 2
8377: NOT
8378: AND
8379: IFFALSE 8383
// exit ;
8381: GO 8584
// side := GetSide ( un ) ;
8383: LD_ADDR_VAR 0 9
8387: PUSH
8388: LD_VAR 0 1
8392: PPUSH
8393: CALL_OW 255
8397: ST_TO_ADDR
// nation := GetNation ( un ) ;
8398: LD_ADDR_VAR 0 8
8402: PUSH
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 248
8412: ST_TO_ADDR
// class := GetClass ( un ) ;
8413: LD_ADDR_VAR 0 6
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL_OW 257
8427: ST_TO_ADDR
// if class > 4 then
8428: LD_VAR 0 6
8432: PUSH
8433: LD_INT 4
8435: GREATER
8436: IFFALSE 8446
// class := 1 ;
8438: LD_ADDR_VAR 0 6
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// repeat wait ( 10 ) ;
8446: LD_INT 10
8448: PPUSH
8449: CALL_OW 67
// until not mpBlockRespThread ;
8453: LD_EXP 45
8457: NOT
8458: IFFALSE 8446
// mpBlockRespThread := true ;
8460: LD_ADDR_EXP 45
8464: PUSH
8465: LD_INT 1
8467: ST_TO_ADDR
// uc_side := side ;
8468: LD_ADDR_OWVAR 20
8472: PUSH
8473: LD_VAR 0 9
8477: ST_TO_ADDR
// uc_nation := nation ;
8478: LD_ADDR_OWVAR 21
8482: PUSH
8483: LD_VAR 0 8
8487: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8488: LD_INT 0
8490: PPUSH
8491: LD_VAR 0 6
8495: PPUSH
8496: LD_INT 2
8498: PPUSH
8499: CALL_OW 380
// un := CreateHuman ;
8503: LD_ADDR_VAR 0 1
8507: PUSH
8508: CALL_OW 44
8512: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8513: LD_ADDR_EXP 40
8517: PUSH
8518: LD_EXP 40
8522: PPUSH
8523: LD_VAR 0 9
8527: PPUSH
8528: LD_EXP 40
8532: PUSH
8533: LD_VAR 0 9
8537: ARRAY
8538: PPUSH
8539: LD_EXP 40
8543: PUSH
8544: LD_VAR 0 9
8548: ARRAY
8549: PUSH
8550: LD_INT 1
8552: PLUS
8553: PPUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: CALL_OW 1
8563: PPUSH
8564: CALL_OW 1
8568: ST_TO_ADDR
// wait ( 10 ) ;
8569: LD_INT 10
8571: PPUSH
8572: CALL_OW 67
// mpBlockRespThread := false ;
8576: LD_ADDR_EXP 45
8580: PUSH
8581: LD_INT 0
8583: ST_TO_ADDR
// end ; end ;
8584: LD_VAR 0 2
8588: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8589: LD_INT 0
8591: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8592: LD_VAR 0 1
8596: PPUSH
8597: CALL_OW 266
8601: PUSH
8602: LD_INT 0
8604: PUSH
8605: LD_INT 1
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: IN
8612: IFFALSE 8637
// SetBName ( building , @ & GetSide ( building ) ) ;
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_STRING @
8621: PUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 255
8631: STR
8632: PPUSH
8633: CALL_OW 500
// end ;
8637: LD_VAR 0 2
8641: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8642: LD_INT 0
8644: PPUSH
8645: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8646: LD_EXP 3
8650: PUSH
8651: LD_INT 2
8653: EQUAL
8654: IFFALSE 8678
8656: PUSH
8657: LD_VAR 0 1
8661: PPUSH
8662: CALL_OW 266
8666: PUSH
8667: LD_INT 0
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: IN
8677: AND
8678: IFFALSE 8757
// begin SetSide ( building , oldSide ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_VAR 0 2
8689: PPUSH
8690: CALL_OW 235
// KillUnit ( building ) ;
8694: LD_VAR 0 1
8698: PPUSH
8699: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8703: LD_ADDR_VAR 0 5
8707: PUSH
8708: LD_INT 22
8710: PUSH
8711: LD_VAR 0 2
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 21
8722: PUSH
8723: LD_INT 1
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 69
8738: PUSH
8739: FOR_IN
8740: IFFALSE 8753
// KillUnit ( i ) ;
8742: LD_VAR 0 5
8746: PPUSH
8747: CALL_OW 66
8751: GO 8739
8753: POP
8754: POP
// exit ;
8755: GO 8802
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 266
8766: PUSH
8767: LD_INT 0
8769: PUSH
8770: LD_INT 1
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: IN
8777: IFFALSE 8802
// SetBName ( building , @ & GetSide ( building ) ) ;
8779: LD_VAR 0 1
8783: PPUSH
8784: LD_STRING @
8786: PUSH
8787: LD_VAR 0 1
8791: PPUSH
8792: CALL_OW 255
8796: STR
8797: PPUSH
8798: CALL_OW 500
// end ;
8802: LD_VAR 0 4
8806: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8807: LD_INT 0
8809: PPUSH
8810: PPUSH
8811: PPUSH
// if mpGameType <> GameTypeFamine then
8812: LD_EXP 3
8816: PUSH
8817: LD_INT 5
8819: NONEQUAL
8820: IFFALSE 8824
// exit ;
8822: GO 9038
// for i := 1 to mpGlobalOilDeposits do
8824: LD_ADDR_VAR 0 6
8828: PUSH
8829: DOUBLE
8830: LD_INT 1
8832: DEC
8833: ST_TO_ADDR
8834: LD_EXP 41
8838: PUSH
8839: FOR_TO
8840: IFFALSE 9036
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8842: LD_EXP 41
8846: PUSH
8847: LD_VAR 0 6
8851: ARRAY
8852: PUSH
8853: LD_INT 1
8855: ARRAY
8856: PPUSH
8857: LD_EXP 41
8861: PUSH
8862: LD_VAR 0 6
8866: ARRAY
8867: PUSH
8868: LD_INT 2
8870: ARRAY
8871: PPUSH
8872: CALL_OW 428
8876: PUSH
8877: LD_VAR 0 1
8881: EQUAL
8882: IFFALSE 9034
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8884: LD_ADDR_VAR 0 7
8888: PUSH
8889: LD_EXP 41
8893: PUSH
8894: LD_VAR 0 6
8898: ARRAY
8899: PUSH
8900: LD_INT 3
8902: ARRAY
8903: ST_TO_ADDR
// value := Dec ( value ) ;
8904: LD_ADDR_VAR 0 7
8908: PUSH
8909: LD_VAR 0 7
8913: PPUSH
8914: CALL 49583 0 1
8918: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8919: LD_ADDR_EXP 41
8923: PUSH
8924: LD_EXP 41
8928: PPUSH
8929: LD_VAR 0 6
8933: PPUSH
8934: LD_EXP 41
8938: PUSH
8939: LD_VAR 0 6
8943: ARRAY
8944: PPUSH
8945: LD_INT 3
8947: PPUSH
8948: LD_VAR 0 7
8952: PPUSH
8953: CALL_OW 1
8957: PPUSH
8958: CALL_OW 1
8962: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8963: LD_VAR 0 1
8967: PPUSH
8968: LD_VAR 0 7
8972: PPUSH
8973: CALL_OW 505
// if value = 0 then
8977: LD_VAR 0 7
8981: PUSH
8982: LD_INT 0
8984: EQUAL
8985: IFFALSE 9034
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8987: LD_EXP 41
8991: PUSH
8992: LD_VAR 0 6
8996: ARRAY
8997: PUSH
8998: LD_INT 1
9000: ARRAY
9001: PPUSH
9002: LD_EXP 41
9006: PUSH
9007: LD_VAR 0 6
9011: ARRAY
9012: PUSH
9013: LD_INT 2
9015: ARRAY
9016: PPUSH
9017: CALL_OW 63
// KillUnit ( building ) ;
9021: LD_VAR 0 1
9025: PPUSH
9026: CALL_OW 66
// exit ;
9030: POP
9031: POP
9032: GO 9038
// end ; end ; end ;
9034: GO 8839
9036: POP
9037: POP
// end ;
9038: LD_VAR 0 5
9042: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9043: LD_INT 0
9045: PPUSH
9046: PPUSH
9047: PPUSH
// if mpGameType <> GameTypeFamine then
9048: LD_EXP 3
9052: PUSH
9053: LD_INT 5
9055: NONEQUAL
9056: IFFALSE 9060
// exit ;
9058: GO 9274
// for i := 1 to mpGlobalSibDeposits do
9060: LD_ADDR_VAR 0 6
9064: PUSH
9065: DOUBLE
9066: LD_INT 1
9068: DEC
9069: ST_TO_ADDR
9070: LD_EXP 42
9074: PUSH
9075: FOR_TO
9076: IFFALSE 9272
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9078: LD_EXP 42
9082: PUSH
9083: LD_VAR 0 6
9087: ARRAY
9088: PUSH
9089: LD_INT 1
9091: ARRAY
9092: PPUSH
9093: LD_EXP 42
9097: PUSH
9098: LD_VAR 0 6
9102: ARRAY
9103: PUSH
9104: LD_INT 2
9106: ARRAY
9107: PPUSH
9108: CALL_OW 428
9112: PUSH
9113: LD_VAR 0 1
9117: EQUAL
9118: IFFALSE 9270
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9120: LD_ADDR_VAR 0 7
9124: PUSH
9125: LD_EXP 42
9129: PUSH
9130: LD_VAR 0 6
9134: ARRAY
9135: PUSH
9136: LD_INT 3
9138: ARRAY
9139: ST_TO_ADDR
// value := Dec ( value ) ;
9140: LD_ADDR_VAR 0 7
9144: PUSH
9145: LD_VAR 0 7
9149: PPUSH
9150: CALL 49583 0 1
9154: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9155: LD_ADDR_EXP 42
9159: PUSH
9160: LD_EXP 42
9164: PPUSH
9165: LD_VAR 0 6
9169: PPUSH
9170: LD_EXP 42
9174: PUSH
9175: LD_VAR 0 6
9179: ARRAY
9180: PPUSH
9181: LD_INT 3
9183: PPUSH
9184: LD_VAR 0 7
9188: PPUSH
9189: CALL_OW 1
9193: PPUSH
9194: CALL_OW 1
9198: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9199: LD_VAR 0 1
9203: PPUSH
9204: LD_VAR 0 7
9208: PPUSH
9209: CALL_OW 505
// if value = 0 then
9213: LD_VAR 0 7
9217: PUSH
9218: LD_INT 0
9220: EQUAL
9221: IFFALSE 9270
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9223: LD_EXP 42
9227: PUSH
9228: LD_VAR 0 6
9232: ARRAY
9233: PUSH
9234: LD_INT 1
9236: ARRAY
9237: PPUSH
9238: LD_EXP 42
9242: PUSH
9243: LD_VAR 0 6
9247: ARRAY
9248: PUSH
9249: LD_INT 2
9251: ARRAY
9252: PPUSH
9253: CALL_OW 63
// KillUnit ( building ) ;
9257: LD_VAR 0 1
9261: PPUSH
9262: CALL_OW 66
// exit ;
9266: POP
9267: POP
9268: GO 9274
// end ; end ; end ;
9270: GO 9075
9272: POP
9273: POP
// end ; end_of_file
9274: LD_VAR 0 5
9278: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9279: LD_EXP 39
9283: IFFALSE 9291
9285: PUSH
9286: CALL 9501 0 0
9290: AND
9291: IFFALSE 9299
9293: PUSH
9294: LD_OWVAR 4
9298: AND
9299: IFFALSE 9498
9301: GO 9303
9303: DISABLE
9304: LD_INT 0
9306: PPUSH
9307: PPUSH
// begin canWin := false ;
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: LD_INT 0
9315: ST_TO_ADDR
// if not HasPower ( your_side ) then
9316: LD_OWVAR 2
9320: PPUSH
9321: CALL 9543 0 1
9325: NOT
9326: IFFALSE 9337
// begin Multiplayer_Loose_Message ;
9328: CALL_OW 521
// enable ( mpLose ) ;
9332: LD_INT 102
9334: ENABLE_MARKED
// end else
9335: GO 9498
// begin canWin := true ;
9337: LD_ADDR_VAR 0 2
9341: PUSH
9342: LD_INT 1
9344: ST_TO_ADDR
// for i := 1 to 8 do
9345: LD_ADDR_VAR 0 1
9349: PUSH
9350: DOUBLE
9351: LD_INT 1
9353: DEC
9354: ST_TO_ADDR
9355: LD_INT 8
9357: PUSH
9358: FOR_TO
9359: IFFALSE 9484
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9361: LD_EXP 7
9365: PUSH
9366: LD_VAR 0 1
9370: ARRAY
9371: IFFALSE 9384
9373: PUSH
9374: LD_VAR 0 1
9378: PPUSH
9379: CALL_OW 108
9383: AND
9384: IFFALSE 9398
9386: PUSH
9387: LD_VAR 0 1
9391: PUSH
9392: LD_OWVAR 2
9396: NONEQUAL
9397: AND
9398: IFFALSE 9482
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9400: LD_EXP 8
9404: PUSH
9405: LD_VAR 0 1
9409: ARRAY
9410: NOT
9411: IFTRUE 9459
9413: PUSH
9414: LD_EXP 8
9418: PUSH
9419: LD_VAR 0 1
9423: ARRAY
9424: PUSH
9425: LD_EXP 8
9429: PUSH
9430: LD_OWVAR 2
9434: ARRAY
9435: NONEQUAL
9436: IFFALSE 9458
9438: PUSH
9439: LD_OWVAR 2
9443: PPUSH
9444: LD_VAR 0 1
9448: PPUSH
9449: CALL_OW 81
9453: PUSH
9454: LD_INT 1
9456: NONEQUAL
9457: AND
9458: OR
9459: IFFALSE 9482
// if HasPower ( i ) then
9461: LD_VAR 0 1
9465: PPUSH
9466: CALL 9543 0 1
9470: IFFALSE 9482
// begin canWin := false ;
9472: LD_ADDR_VAR 0 2
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// break ;
9480: GO 9484
// end ;
9482: GO 9358
9484: POP
9485: POP
// if canWin then
9486: LD_VAR 0 2
9490: IFFALSE 9497
// enable ( mpWin ) else
9492: LD_INT 101
9494: ENABLE_MARKED
9495: GO 9498
// enable ;
9497: ENABLE
// end ; end ;
9498: PPOPN 2
9500: END
// function CanWinLoose ; begin
9501: LD_INT 0
9503: PPUSH
// result := true ;
9504: LD_ADDR_VAR 0 1
9508: PUSH
9509: LD_INT 1
9511: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9512: CALL_OW 531
9516: IFFALSE 9528
9518: PUSH
9519: CALL_OW 519
9523: PUSH
9524: LD_INT 1
9526: GREATER
9527: AND
9528: IFFALSE 9538
// result := false ;
9530: LD_ADDR_VAR 0 1
9534: PUSH
9535: LD_INT 0
9537: ST_TO_ADDR
// end ;
9538: LD_VAR 0 1
9542: RET
// function HasPower ( i ) ; begin
9543: LD_INT 0
9545: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9546: LD_ADDR_VAR 0 2
9550: PUSH
9551: LD_INT 22
9553: PUSH
9554: LD_VAR 0 1
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: LD_INT 21
9568: PUSH
9569: LD_INT 1
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 33
9578: PUSH
9579: LD_INT 3
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 33
9588: PUSH
9589: LD_INT 5
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 69
9610: ST_TO_ADDR
// end ; end_of_file
9611: LD_VAR 0 2
9615: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9616: LD_EXP 39
9620: IFFALSE 9663
9622: GO 9624
9624: DISABLE
9625: LD_INT 0
9627: PPUSH
// begin for i := 1 to 8 do
9628: LD_ADDR_VAR 0 1
9632: PUSH
9633: DOUBLE
9634: LD_INT 1
9636: DEC
9637: ST_TO_ADDR
9638: LD_INT 8
9640: PUSH
9641: FOR_TO
9642: IFFALSE 9661
// SetRestrict ( b_depot , i , state_disabled ) ;
9644: LD_INT 0
9646: PPUSH
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_INT 0
9654: PPUSH
9655: CALL_OW 324
9659: GO 9641
9661: POP
9662: POP
// end ;
9663: PPOPN 1
9665: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9666: LD_EXP 39
9670: IFFALSE 9678
9672: PUSH
9673: CALL 9888 0 0
9677: AND
9678: IFFALSE 9686
9680: PUSH
9681: LD_OWVAR 4
9685: AND
9686: IFFALSE 9885
9688: GO 9690
9690: DISABLE
9691: LD_INT 0
9693: PPUSH
9694: PPUSH
// begin canWin := false ;
9695: LD_ADDR_VAR 0 2
9699: PUSH
9700: LD_INT 0
9702: ST_TO_ADDR
// if not HasPower ( your_side ) then
9703: LD_OWVAR 2
9707: PPUSH
9708: CALL 9930 0 1
9712: NOT
9713: IFFALSE 9724
// begin Multiplayer_Loose_Message ;
9715: CALL_OW 521
// enable ( mpLose ) ;
9719: LD_INT 102
9721: ENABLE_MARKED
// end else
9722: GO 9885
// begin canWin := true ;
9724: LD_ADDR_VAR 0 2
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// for i := 1 to 8 do
9732: LD_ADDR_VAR 0 1
9736: PUSH
9737: DOUBLE
9738: LD_INT 1
9740: DEC
9741: ST_TO_ADDR
9742: LD_INT 8
9744: PUSH
9745: FOR_TO
9746: IFFALSE 9871
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9748: LD_EXP 7
9752: PUSH
9753: LD_VAR 0 1
9757: ARRAY
9758: IFFALSE 9771
9760: PUSH
9761: LD_VAR 0 1
9765: PPUSH
9766: CALL_OW 108
9770: AND
9771: IFFALSE 9785
9773: PUSH
9774: LD_VAR 0 1
9778: PUSH
9779: LD_OWVAR 2
9783: NONEQUAL
9784: AND
9785: IFFALSE 9869
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9787: LD_EXP 8
9791: PUSH
9792: LD_VAR 0 1
9796: ARRAY
9797: NOT
9798: IFTRUE 9846
9800: PUSH
9801: LD_EXP 8
9805: PUSH
9806: LD_VAR 0 1
9810: ARRAY
9811: PUSH
9812: LD_EXP 8
9816: PUSH
9817: LD_OWVAR 2
9821: ARRAY
9822: NONEQUAL
9823: IFFALSE 9845
9825: PUSH
9826: LD_OWVAR 2
9830: PPUSH
9831: LD_VAR 0 1
9835: PPUSH
9836: CALL_OW 81
9840: PUSH
9841: LD_INT 1
9843: NONEQUAL
9844: AND
9845: OR
9846: IFFALSE 9869
// if HasPower ( i ) then
9848: LD_VAR 0 1
9852: PPUSH
9853: CALL 9930 0 1
9857: IFFALSE 9869
// begin canWin := false ;
9859: LD_ADDR_VAR 0 2
9863: PUSH
9864: LD_INT 0
9866: ST_TO_ADDR
// break ;
9867: GO 9871
// end ;
9869: GO 9745
9871: POP
9872: POP
// if canWin then
9873: LD_VAR 0 2
9877: IFFALSE 9884
// enable ( mpWin ) else
9879: LD_INT 101
9881: ENABLE_MARKED
9882: GO 9885
// enable ;
9884: ENABLE
// end ; end ;
9885: PPOPN 2
9887: END
// function CanWinLoose ; begin
9888: LD_INT 0
9890: PPUSH
// result := true ;
9891: LD_ADDR_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9899: CALL_OW 531
9903: IFFALSE 9915
9905: PUSH
9906: CALL_OW 519
9910: PUSH
9911: LD_INT 1
9913: GREATER
9914: AND
9915: IFFALSE 9925
// result := false ;
9917: LD_ADDR_VAR 0 1
9921: PUSH
9922: LD_INT 0
9924: ST_TO_ADDR
// end ;
9925: LD_VAR 0 1
9929: RET
// function HasPower ( i ) ; begin
9930: LD_INT 0
9932: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9933: LD_INT 22
9935: PUSH
9936: LD_VAR 0 1
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 2
9947: PUSH
9948: LD_INT 30
9950: PUSH
9951: LD_INT 0
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 30
9960: PUSH
9961: LD_INT 1
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PPUSH
9977: CALL_OW 69
9981: NOT
9982: IFFALSE 9986
// exit ;
9984: GO 10051
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9986: LD_ADDR_VAR 0 2
9990: PUSH
9991: LD_INT 22
9993: PUSH
9994: LD_VAR 0 1
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: LD_INT 2
10005: PUSH
10006: LD_INT 21
10008: PUSH
10009: LD_INT 1
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 33
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 33
10028: PUSH
10029: LD_INT 5
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PPUSH
10046: CALL_OW 69
10050: ST_TO_ADDR
// end ; end_of_file
10051: LD_VAR 0 2
10055: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10056: LD_INT 0
10058: PPUSH
10059: PPUSH
// if exist_mode then
10060: LD_VAR 0 2
10064: IFFALSE 10110
// begin unit := CreateCharacter ( prefix & ident ) ;
10066: LD_ADDR_VAR 0 5
10070: PUSH
10071: LD_VAR 0 3
10075: PUSH
10076: LD_VAR 0 1
10080: STR
10081: PPUSH
10082: CALL_OW 34
10086: ST_TO_ADDR
// if unit then
10087: LD_VAR 0 5
10091: IFFALSE 10108
// DeleteCharacters ( prefix & ident ) ;
10093: LD_VAR 0 3
10097: PUSH
10098: LD_VAR 0 1
10102: STR
10103: PPUSH
10104: CALL_OW 40
// end else
10108: GO 10125
// unit := NewCharacter ( ident ) ;
10110: LD_ADDR_VAR 0 5
10114: PUSH
10115: LD_VAR 0 1
10119: PPUSH
10120: CALL_OW 25
10124: ST_TO_ADDR
// result := unit ;
10125: LD_ADDR_VAR 0 4
10129: PUSH
10130: LD_VAR 0 5
10134: ST_TO_ADDR
// end ;
10135: LD_VAR 0 4
10139: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10140: LD_INT 0
10142: PPUSH
10143: PPUSH
// if exist_mode then
10144: LD_VAR 0 2
10148: IFFALSE 10173
// unit := CreateCharacter ( prefix & ident ) else
10150: LD_ADDR_VAR 0 5
10154: PUSH
10155: LD_VAR 0 3
10159: PUSH
10160: LD_VAR 0 1
10164: STR
10165: PPUSH
10166: CALL_OW 34
10170: ST_TO_ADDR
10171: GO 10188
// unit := NewCharacter ( ident ) ;
10173: LD_ADDR_VAR 0 5
10177: PUSH
10178: LD_VAR 0 1
10182: PPUSH
10183: CALL_OW 25
10187: ST_TO_ADDR
// result := unit ;
10188: LD_ADDR_VAR 0 4
10192: PUSH
10193: LD_VAR 0 5
10197: ST_TO_ADDR
// end ;
10198: LD_VAR 0 4
10202: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10203: LD_INT 0
10205: PPUSH
10206: PPUSH
// if not side or not nation then
10207: LD_VAR 0 1
10211: NOT
10212: IFTRUE 10221
10214: PUSH
10215: LD_VAR 0 2
10219: NOT
10220: OR
10221: IFFALSE 10225
// exit ;
10223: GO 10995
// case nation of nation_american :
10225: LD_VAR 0 2
10229: PUSH
10230: LD_INT 1
10232: DOUBLE
10233: EQUAL
10234: IFTRUE 10238
10236: GO 10452
10238: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10239: LD_ADDR_VAR 0 4
10243: PUSH
10244: LD_INT 35
10246: PUSH
10247: LD_INT 45
10249: PUSH
10250: LD_INT 46
10252: PUSH
10253: LD_INT 47
10255: PUSH
10256: LD_INT 82
10258: PUSH
10259: LD_INT 83
10261: PUSH
10262: LD_INT 84
10264: PUSH
10265: LD_INT 85
10267: PUSH
10268: LD_INT 86
10270: PUSH
10271: LD_INT 1
10273: PUSH
10274: LD_INT 2
10276: PUSH
10277: LD_INT 6
10279: PUSH
10280: LD_INT 15
10282: PUSH
10283: LD_INT 16
10285: PUSH
10286: LD_INT 7
10288: PUSH
10289: LD_INT 12
10291: PUSH
10292: LD_INT 13
10294: PUSH
10295: LD_INT 10
10297: PUSH
10298: LD_INT 14
10300: PUSH
10301: LD_INT 20
10303: PUSH
10304: LD_INT 21
10306: PUSH
10307: LD_INT 22
10309: PUSH
10310: LD_INT 25
10312: PUSH
10313: LD_INT 32
10315: PUSH
10316: LD_INT 27
10318: PUSH
10319: LD_INT 36
10321: PUSH
10322: LD_INT 69
10324: PUSH
10325: LD_INT 39
10327: PUSH
10328: LD_INT 34
10330: PUSH
10331: LD_INT 40
10333: PUSH
10334: LD_INT 48
10336: PUSH
10337: LD_INT 49
10339: PUSH
10340: LD_INT 50
10342: PUSH
10343: LD_INT 51
10345: PUSH
10346: LD_INT 52
10348: PUSH
10349: LD_INT 53
10351: PUSH
10352: LD_INT 54
10354: PUSH
10355: LD_INT 55
10357: PUSH
10358: LD_INT 56
10360: PUSH
10361: LD_INT 57
10363: PUSH
10364: LD_INT 58
10366: PUSH
10367: LD_INT 59
10369: PUSH
10370: LD_INT 60
10372: PUSH
10373: LD_INT 61
10375: PUSH
10376: LD_INT 62
10378: PUSH
10379: LD_INT 80
10381: PUSH
10382: LD_INT 82
10384: PUSH
10385: LD_INT 83
10387: PUSH
10388: LD_INT 84
10390: PUSH
10391: LD_INT 85
10393: PUSH
10394: LD_INT 86
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: ST_TO_ADDR
10450: GO 10917
10452: LD_INT 2
10454: DOUBLE
10455: EQUAL
10456: IFTRUE 10460
10458: GO 10686
10460: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10461: LD_ADDR_VAR 0 4
10465: PUSH
10466: LD_INT 35
10468: PUSH
10469: LD_INT 45
10471: PUSH
10472: LD_INT 46
10474: PUSH
10475: LD_INT 47
10477: PUSH
10478: LD_INT 82
10480: PUSH
10481: LD_INT 83
10483: PUSH
10484: LD_INT 84
10486: PUSH
10487: LD_INT 85
10489: PUSH
10490: LD_INT 87
10492: PUSH
10493: LD_INT 70
10495: PUSH
10496: LD_INT 1
10498: PUSH
10499: LD_INT 11
10501: PUSH
10502: LD_INT 3
10504: PUSH
10505: LD_INT 4
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: LD_INT 6
10513: PUSH
10514: LD_INT 15
10516: PUSH
10517: LD_INT 18
10519: PUSH
10520: LD_INT 7
10522: PUSH
10523: LD_INT 17
10525: PUSH
10526: LD_INT 8
10528: PUSH
10529: LD_INT 20
10531: PUSH
10532: LD_INT 21
10534: PUSH
10535: LD_INT 22
10537: PUSH
10538: LD_INT 72
10540: PUSH
10541: LD_INT 26
10543: PUSH
10544: LD_INT 69
10546: PUSH
10547: LD_INT 39
10549: PUSH
10550: LD_INT 40
10552: PUSH
10553: LD_INT 41
10555: PUSH
10556: LD_INT 42
10558: PUSH
10559: LD_INT 43
10561: PUSH
10562: LD_INT 48
10564: PUSH
10565: LD_INT 49
10567: PUSH
10568: LD_INT 50
10570: PUSH
10571: LD_INT 51
10573: PUSH
10574: LD_INT 52
10576: PUSH
10577: LD_INT 53
10579: PUSH
10580: LD_INT 54
10582: PUSH
10583: LD_INT 55
10585: PUSH
10586: LD_INT 56
10588: PUSH
10589: LD_INT 60
10591: PUSH
10592: LD_INT 61
10594: PUSH
10595: LD_INT 62
10597: PUSH
10598: LD_INT 66
10600: PUSH
10601: LD_INT 67
10603: PUSH
10604: LD_INT 68
10606: PUSH
10607: LD_INT 81
10609: PUSH
10610: LD_INT 82
10612: PUSH
10613: LD_INT 83
10615: PUSH
10616: LD_INT 84
10618: PUSH
10619: LD_INT 85
10621: PUSH
10622: LD_INT 87
10624: PUSH
10625: LD_INT 88
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: ST_TO_ADDR
10684: GO 10917
10686: LD_INT 3
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10694
10692: GO 10916
10694: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10695: LD_ADDR_VAR 0 4
10699: PUSH
10700: LD_INT 46
10702: PUSH
10703: LD_INT 47
10705: PUSH
10706: LD_INT 1
10708: PUSH
10709: LD_INT 2
10711: PUSH
10712: LD_INT 82
10714: PUSH
10715: LD_INT 83
10717: PUSH
10718: LD_INT 84
10720: PUSH
10721: LD_INT 85
10723: PUSH
10724: LD_INT 86
10726: PUSH
10727: LD_INT 11
10729: PUSH
10730: LD_INT 9
10732: PUSH
10733: LD_INT 20
10735: PUSH
10736: LD_INT 19
10738: PUSH
10739: LD_INT 21
10741: PUSH
10742: LD_INT 24
10744: PUSH
10745: LD_INT 22
10747: PUSH
10748: LD_INT 25
10750: PUSH
10751: LD_INT 28
10753: PUSH
10754: LD_INT 29
10756: PUSH
10757: LD_INT 30
10759: PUSH
10760: LD_INT 31
10762: PUSH
10763: LD_INT 37
10765: PUSH
10766: LD_INT 38
10768: PUSH
10769: LD_INT 32
10771: PUSH
10772: LD_INT 27
10774: PUSH
10775: LD_INT 33
10777: PUSH
10778: LD_INT 69
10780: PUSH
10781: LD_INT 39
10783: PUSH
10784: LD_INT 34
10786: PUSH
10787: LD_INT 40
10789: PUSH
10790: LD_INT 71
10792: PUSH
10793: LD_INT 23
10795: PUSH
10796: LD_INT 44
10798: PUSH
10799: LD_INT 48
10801: PUSH
10802: LD_INT 49
10804: PUSH
10805: LD_INT 50
10807: PUSH
10808: LD_INT 51
10810: PUSH
10811: LD_INT 52
10813: PUSH
10814: LD_INT 53
10816: PUSH
10817: LD_INT 54
10819: PUSH
10820: LD_INT 55
10822: PUSH
10823: LD_INT 56
10825: PUSH
10826: LD_INT 57
10828: PUSH
10829: LD_INT 58
10831: PUSH
10832: LD_INT 59
10834: PUSH
10835: LD_INT 63
10837: PUSH
10838: LD_INT 64
10840: PUSH
10841: LD_INT 65
10843: PUSH
10844: LD_INT 82
10846: PUSH
10847: LD_INT 83
10849: PUSH
10850: LD_INT 84
10852: PUSH
10853: LD_INT 85
10855: PUSH
10856: LD_INT 86
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: ST_TO_ADDR
10914: GO 10917
10916: POP
// if state > - 1 and state < 3 then
10917: LD_VAR 0 3
10921: PUSH
10922: LD_INT 1
10924: NEG
10925: GREATER
10926: IFFALSE 10938
10928: PUSH
10929: LD_VAR 0 3
10933: PUSH
10934: LD_INT 3
10936: LESS
10937: AND
10938: IFFALSE 10995
// for i in result do
10940: LD_ADDR_VAR 0 5
10944: PUSH
10945: LD_VAR 0 4
10949: PUSH
10950: FOR_IN
10951: IFFALSE 10993
// if GetTech ( i , side ) <> state then
10953: LD_VAR 0 5
10957: PPUSH
10958: LD_VAR 0 1
10962: PPUSH
10963: CALL_OW 321
10967: PUSH
10968: LD_VAR 0 3
10972: NONEQUAL
10973: IFFALSE 10991
// result := result diff i ;
10975: LD_ADDR_VAR 0 4
10979: PUSH
10980: LD_VAR 0 4
10984: PUSH
10985: LD_VAR 0 5
10989: DIFF
10990: ST_TO_ADDR
10991: GO 10950
10993: POP
10994: POP
// end ;
10995: LD_VAR 0 4
10999: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11000: LD_INT 0
11002: PPUSH
11003: PPUSH
11004: PPUSH
// result := true ;
11005: LD_ADDR_VAR 0 3
11009: PUSH
11010: LD_INT 1
11012: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11013: LD_ADDR_VAR 0 5
11017: PUSH
11018: LD_VAR 0 2
11022: PPUSH
11023: CALL_OW 480
11027: ST_TO_ADDR
// if not tmp then
11028: LD_VAR 0 5
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11086
// for i in tmp do
11037: LD_ADDR_VAR 0 4
11041: PUSH
11042: LD_VAR 0 5
11046: PUSH
11047: FOR_IN
11048: IFFALSE 11084
// if GetTech ( i , side ) <> state_researched then
11050: LD_VAR 0 4
11054: PPUSH
11055: LD_VAR 0 1
11059: PPUSH
11060: CALL_OW 321
11064: PUSH
11065: LD_INT 2
11067: NONEQUAL
11068: IFFALSE 11082
// begin result := false ;
11070: LD_ADDR_VAR 0 3
11074: PUSH
11075: LD_INT 0
11077: ST_TO_ADDR
// exit ;
11078: POP
11079: POP
11080: GO 11086
// end ;
11082: GO 11047
11084: POP
11085: POP
// end ;
11086: LD_VAR 0 3
11090: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11091: LD_INT 0
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
11102: PPUSH
11103: PPUSH
11104: PPUSH
11105: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11106: LD_VAR 0 1
11110: NOT
11111: IFTRUE 11128
11113: PUSH
11114: LD_VAR 0 1
11118: PPUSH
11119: CALL_OW 257
11123: PUSH
11124: LD_INT 9
11126: NONEQUAL
11127: OR
11128: IFFALSE 11132
// exit ;
11130: GO 11711
// side := GetSide ( unit ) ;
11132: LD_ADDR_VAR 0 9
11136: PUSH
11137: LD_VAR 0 1
11141: PPUSH
11142: CALL_OW 255
11146: ST_TO_ADDR
// tech_space := tech_spacanom ;
11147: LD_ADDR_VAR 0 12
11151: PUSH
11152: LD_INT 29
11154: ST_TO_ADDR
// tech_time := tech_taurad ;
11155: LD_ADDR_VAR 0 13
11159: PUSH
11160: LD_INT 28
11162: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11163: LD_ADDR_VAR 0 11
11167: PUSH
11168: LD_VAR 0 1
11172: PPUSH
11173: CALL_OW 310
11177: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11178: LD_VAR 0 11
11182: PPUSH
11183: CALL_OW 247
11187: PUSH
11188: LD_INT 2
11190: EQUAL
11191: IFFALSE 11195
// exit ;
11193: GO 11711
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11195: LD_ADDR_VAR 0 8
11199: PUSH
11200: LD_INT 81
11202: PUSH
11203: LD_VAR 0 9
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 3
11214: PUSH
11215: LD_INT 21
11217: PUSH
11218: LD_INT 3
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PPUSH
11233: CALL_OW 69
11237: ST_TO_ADDR
// if not tmp then
11238: LD_VAR 0 8
11242: NOT
11243: IFFALSE 11247
// exit ;
11245: GO 11711
// if in_unit then
11247: LD_VAR 0 11
11251: IFFALSE 11275
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11253: LD_ADDR_VAR 0 10
11257: PUSH
11258: LD_VAR 0 8
11262: PPUSH
11263: LD_VAR 0 11
11267: PPUSH
11268: CALL_OW 74
11272: ST_TO_ADDR
11273: GO 11295
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11275: LD_ADDR_VAR 0 10
11279: PUSH
11280: LD_VAR 0 8
11284: PPUSH
11285: LD_VAR 0 1
11289: PPUSH
11290: CALL_OW 74
11294: ST_TO_ADDR
// if not enemy then
11295: LD_VAR 0 10
11299: NOT
11300: IFFALSE 11304
// exit ;
11302: GO 11711
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11304: LD_VAR 0 11
11308: IFFALSE 11330
11310: PUSH
11311: LD_VAR 0 11
11315: PPUSH
11316: LD_VAR 0 10
11320: PPUSH
11321: CALL_OW 296
11325: PUSH
11326: LD_INT 13
11328: GREATER
11329: AND
11330: IFTRUE 11352
11332: PUSH
11333: LD_VAR 0 1
11337: PPUSH
11338: LD_VAR 0 10
11342: PPUSH
11343: CALL_OW 296
11347: PUSH
11348: LD_INT 12
11350: GREATER
11351: OR
11352: IFFALSE 11356
// exit ;
11354: GO 11711
// missile := [ 1 ] ;
11356: LD_ADDR_VAR 0 14
11360: PUSH
11361: LD_INT 1
11363: PUSH
11364: EMPTY
11365: LIST
11366: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11367: LD_VAR 0 9
11371: PPUSH
11372: LD_VAR 0 12
11376: PPUSH
11377: CALL_OW 325
11381: IFFALSE 11410
// missile := Replace ( missile , missile + 1 , 2 ) ;
11383: LD_ADDR_VAR 0 14
11387: PUSH
11388: LD_VAR 0 14
11392: PPUSH
11393: LD_VAR 0 14
11397: PUSH
11398: LD_INT 1
11400: PLUS
11401: PPUSH
11402: LD_INT 2
11404: PPUSH
11405: CALL_OW 1
11409: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11410: LD_VAR 0 9
11414: PPUSH
11415: LD_VAR 0 13
11419: PPUSH
11420: CALL_OW 325
11424: IFFALSE 11448
11426: PUSH
11427: LD_VAR 0 10
11431: PPUSH
11432: CALL_OW 255
11436: PPUSH
11437: LD_VAR 0 13
11441: PPUSH
11442: CALL_OW 325
11446: NOT
11447: AND
11448: IFFALSE 11477
// missile := Replace ( missile , missile + 1 , 3 ) ;
11450: LD_ADDR_VAR 0 14
11454: PUSH
11455: LD_VAR 0 14
11459: PPUSH
11460: LD_VAR 0 14
11464: PUSH
11465: LD_INT 1
11467: PLUS
11468: PPUSH
11469: LD_INT 3
11471: PPUSH
11472: CALL_OW 1
11476: ST_TO_ADDR
// if missile < 2 then
11477: LD_VAR 0 14
11481: PUSH
11482: LD_INT 2
11484: LESS
11485: IFFALSE 11489
// exit ;
11487: GO 11711
// x := GetX ( enemy ) ;
11489: LD_ADDR_VAR 0 4
11493: PUSH
11494: LD_VAR 0 10
11498: PPUSH
11499: CALL_OW 250
11503: ST_TO_ADDR
// y := GetY ( enemy ) ;
11504: LD_ADDR_VAR 0 5
11508: PUSH
11509: LD_VAR 0 10
11513: PPUSH
11514: CALL_OW 251
11518: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11519: LD_ADDR_VAR 0 6
11523: PUSH
11524: LD_VAR 0 4
11528: PUSH
11529: LD_INT 1
11531: NEG
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 12
11540: PLUS
11541: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11542: LD_ADDR_VAR 0 7
11546: PUSH
11547: LD_VAR 0 5
11551: PUSH
11552: LD_INT 1
11554: NEG
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 12
11563: PLUS
11564: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11565: LD_VAR 0 6
11569: PPUSH
11570: LD_VAR 0 7
11574: PPUSH
11575: CALL_OW 488
11579: NOT
11580: IFFALSE 11602
// begin _x := x ;
11582: LD_ADDR_VAR 0 6
11586: PUSH
11587: LD_VAR 0 4
11591: ST_TO_ADDR
// _y := y ;
11592: LD_ADDR_VAR 0 7
11596: PUSH
11597: LD_VAR 0 5
11601: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11602: LD_ADDR_VAR 0 3
11606: PUSH
11607: LD_INT 1
11609: PPUSH
11610: LD_VAR 0 14
11614: PPUSH
11615: CALL_OW 12
11619: ST_TO_ADDR
// case i of 1 :
11620: LD_VAR 0 3
11624: PUSH
11625: LD_INT 1
11627: DOUBLE
11628: EQUAL
11629: IFTRUE 11633
11631: GO 11650
11633: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11634: LD_VAR 0 1
11638: PPUSH
11639: LD_VAR 0 10
11643: PPUSH
11644: CALL_OW 115
11648: GO 11711
11650: LD_INT 2
11652: DOUBLE
11653: EQUAL
11654: IFTRUE 11658
11656: GO 11680
11658: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11659: LD_VAR 0 1
11663: PPUSH
11664: LD_VAR 0 6
11668: PPUSH
11669: LD_VAR 0 7
11673: PPUSH
11674: CALL_OW 153
11678: GO 11711
11680: LD_INT 3
11682: DOUBLE
11683: EQUAL
11684: IFTRUE 11688
11686: GO 11710
11688: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11689: LD_VAR 0 1
11693: PPUSH
11694: LD_VAR 0 6
11698: PPUSH
11699: LD_VAR 0 7
11703: PPUSH
11704: CALL_OW 154
11708: GO 11711
11710: POP
// end ;
11711: LD_VAR 0 2
11715: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11716: LD_INT 0
11718: PPUSH
11719: PPUSH
11720: PPUSH
11721: PPUSH
11722: PPUSH
11723: PPUSH
// if not unit or not building then
11724: LD_VAR 0 1
11728: NOT
11729: IFTRUE 11738
11731: PUSH
11732: LD_VAR 0 2
11736: NOT
11737: OR
11738: IFFALSE 11742
// exit ;
11740: GO 11900
// x := GetX ( building ) ;
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 250
11756: ST_TO_ADDR
// y := GetY ( building ) ;
11757: LD_ADDR_VAR 0 6
11761: PUSH
11762: LD_VAR 0 2
11766: PPUSH
11767: CALL_OW 251
11771: ST_TO_ADDR
// for i := 0 to 5 do
11772: LD_ADDR_VAR 0 4
11776: PUSH
11777: DOUBLE
11778: LD_INT 0
11780: DEC
11781: ST_TO_ADDR
11782: LD_INT 5
11784: PUSH
11785: FOR_TO
11786: IFFALSE 11898
// begin _x := ShiftX ( x , i , 3 ) ;
11788: LD_ADDR_VAR 0 7
11792: PUSH
11793: LD_VAR 0 5
11797: PPUSH
11798: LD_VAR 0 4
11802: PPUSH
11803: LD_INT 3
11805: PPUSH
11806: CALL_OW 272
11810: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11811: LD_ADDR_VAR 0 8
11815: PUSH
11816: LD_VAR 0 6
11820: PPUSH
11821: LD_VAR 0 4
11825: PPUSH
11826: LD_INT 3
11828: PPUSH
11829: CALL_OW 273
11833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11834: LD_VAR 0 7
11838: PPUSH
11839: LD_VAR 0 8
11843: PPUSH
11844: CALL_OW 488
11848: NOT
11849: IFFALSE 11853
// continue ;
11851: GO 11785
// if HexInfo ( _x , _y ) = 0 then
11853: LD_VAR 0 7
11857: PPUSH
11858: LD_VAR 0 8
11862: PPUSH
11863: CALL_OW 428
11867: PUSH
11868: LD_INT 0
11870: EQUAL
11871: IFFALSE 11896
// begin ComMoveXY ( unit , _x , _y ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_VAR 0 7
11882: PPUSH
11883: LD_VAR 0 8
11887: PPUSH
11888: CALL_OW 111
// exit ;
11892: POP
11893: POP
11894: GO 11900
// end ; end ;
11896: GO 11785
11898: POP
11899: POP
// end ;
11900: LD_VAR 0 3
11904: RET
// export function ScanBase ( side , base_area ) ; begin
11905: LD_INT 0
11907: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11908: LD_ADDR_VAR 0 3
11912: PUSH
11913: LD_VAR 0 2
11917: PPUSH
11918: LD_INT 81
11920: PUSH
11921: LD_VAR 0 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 70
11934: ST_TO_ADDR
// end ;
11935: LD_VAR 0 3
11939: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11940: LD_INT 0
11942: PPUSH
11943: PPUSH
11944: PPUSH
11945: PPUSH
// result := false ;
11946: LD_ADDR_VAR 0 2
11950: PUSH
11951: LD_INT 0
11953: ST_TO_ADDR
// side := GetSide ( unit ) ;
11954: LD_ADDR_VAR 0 3
11958: PUSH
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 255
11968: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11969: LD_ADDR_VAR 0 4
11973: PUSH
11974: LD_VAR 0 1
11978: PPUSH
11979: CALL_OW 248
11983: ST_TO_ADDR
// case nat of 1 :
11984: LD_VAR 0 4
11988: PUSH
11989: LD_INT 1
11991: DOUBLE
11992: EQUAL
11993: IFTRUE 11997
11995: GO 12008
11997: POP
// tech := tech_lassight ; 2 :
11998: LD_ADDR_VAR 0 5
12002: PUSH
12003: LD_INT 12
12005: ST_TO_ADDR
12006: GO 12047
12008: LD_INT 2
12010: DOUBLE
12011: EQUAL
12012: IFTRUE 12016
12014: GO 12027
12016: POP
// tech := tech_mortar ; 3 :
12017: LD_ADDR_VAR 0 5
12021: PUSH
12022: LD_INT 41
12024: ST_TO_ADDR
12025: GO 12047
12027: LD_INT 3
12029: DOUBLE
12030: EQUAL
12031: IFTRUE 12035
12033: GO 12046
12035: POP
// tech := tech_bazooka ; end ;
12036: LD_ADDR_VAR 0 5
12040: PUSH
12041: LD_INT 44
12043: ST_TO_ADDR
12044: GO 12047
12046: POP
// if Researched ( side , tech ) then
12047: LD_VAR 0 3
12051: PPUSH
12052: LD_VAR 0 5
12056: PPUSH
12057: CALL_OW 325
12061: IFFALSE 12088
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12063: LD_ADDR_VAR 0 2
12067: PUSH
12068: LD_INT 5
12070: PUSH
12071: LD_INT 8
12073: PUSH
12074: LD_INT 9
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: PUSH
12082: LD_VAR 0 4
12086: ARRAY
12087: ST_TO_ADDR
// end ;
12088: LD_VAR 0 2
12092: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12093: LD_INT 0
12095: PPUSH
12096: PPUSH
12097: PPUSH
// if not mines then
12098: LD_VAR 0 2
12102: NOT
12103: IFFALSE 12107
// exit ;
12105: GO 12251
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12107: LD_ADDR_VAR 0 5
12111: PUSH
12112: LD_INT 81
12114: PUSH
12115: LD_VAR 0 1
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 3
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PPUSH
12145: CALL_OW 69
12149: ST_TO_ADDR
// for i in mines do
12150: LD_ADDR_VAR 0 4
12154: PUSH
12155: LD_VAR 0 2
12159: PUSH
12160: FOR_IN
12161: IFFALSE 12249
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12163: LD_VAR 0 4
12167: PUSH
12168: LD_INT 1
12170: ARRAY
12171: PPUSH
12172: LD_VAR 0 4
12176: PUSH
12177: LD_INT 2
12179: ARRAY
12180: PPUSH
12181: CALL_OW 458
12185: NOT
12186: IFFALSE 12190
// continue ;
12188: GO 12160
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12190: LD_VAR 0 4
12194: PUSH
12195: LD_INT 1
12197: ARRAY
12198: PPUSH
12199: LD_VAR 0 4
12203: PUSH
12204: LD_INT 2
12206: ARRAY
12207: PPUSH
12208: CALL_OW 428
12212: PUSH
12213: LD_VAR 0 5
12217: IN
12218: IFFALSE 12247
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12220: LD_VAR 0 4
12224: PUSH
12225: LD_INT 1
12227: ARRAY
12228: PPUSH
12229: LD_VAR 0 4
12233: PUSH
12234: LD_INT 2
12236: ARRAY
12237: PPUSH
12238: LD_VAR 0 1
12242: PPUSH
12243: CALL_OW 456
// end ;
12247: GO 12160
12249: POP
12250: POP
// end ;
12251: LD_VAR 0 3
12255: RET
// export function Count ( array ) ; begin
12256: LD_INT 0
12258: PPUSH
// result := array + 0 ;
12259: LD_ADDR_VAR 0 2
12263: PUSH
12264: LD_VAR 0 1
12268: PUSH
12269: LD_INT 0
12271: PLUS
12272: ST_TO_ADDR
// end ;
12273: LD_VAR 0 2
12277: RET
// export function IsEmpty ( building ) ; begin
12278: LD_INT 0
12280: PPUSH
// if not building then
12281: LD_VAR 0 1
12285: NOT
12286: IFFALSE 12290
// exit ;
12288: GO 12333
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12290: LD_ADDR_VAR 0 2
12294: PUSH
12295: LD_VAR 0 1
12299: PUSH
12300: LD_INT 22
12302: PUSH
12303: LD_VAR 0 1
12307: PPUSH
12308: CALL_OW 255
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 58
12319: PUSH
12320: EMPTY
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 69
12331: IN
12332: ST_TO_ADDR
// end ;
12333: LD_VAR 0 2
12337: RET
// export function IsNotFull ( building ) ; var places ; begin
12338: LD_INT 0
12340: PPUSH
12341: PPUSH
// if not building then
12342: LD_VAR 0 1
12346: NOT
12347: IFFALSE 12351
// exit ;
12349: GO 12379
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12351: LD_ADDR_VAR 0 2
12355: PUSH
12356: LD_VAR 0 1
12360: PPUSH
12361: LD_INT 3
12363: PUSH
12364: LD_INT 62
12366: PUSH
12367: EMPTY
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PPUSH
12374: CALL_OW 72
12378: ST_TO_ADDR
// end ;
12379: LD_VAR 0 2
12383: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12384: LD_INT 0
12386: PPUSH
12387: PPUSH
12388: PPUSH
12389: PPUSH
// tmp := [ ] ;
12390: LD_ADDR_VAR 0 3
12394: PUSH
12395: EMPTY
12396: ST_TO_ADDR
// list := [ ] ;
12397: LD_ADDR_VAR 0 5
12401: PUSH
12402: EMPTY
12403: ST_TO_ADDR
// for i = 16 to 25 do
12404: LD_ADDR_VAR 0 4
12408: PUSH
12409: DOUBLE
12410: LD_INT 16
12412: DEC
12413: ST_TO_ADDR
12414: LD_INT 25
12416: PUSH
12417: FOR_TO
12418: IFFALSE 12491
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12420: LD_ADDR_VAR 0 3
12424: PUSH
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 22
12432: PUSH
12433: LD_VAR 0 1
12437: PPUSH
12438: CALL_OW 255
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 91
12449: PUSH
12450: LD_VAR 0 1
12454: PUSH
12455: LD_INT 6
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_VAR 0 4
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: PPUSH
12483: CALL_OW 69
12487: ADD
12488: ST_TO_ADDR
12489: GO 12417
12491: POP
12492: POP
// for i = 1 to tmp do
12493: LD_ADDR_VAR 0 4
12497: PUSH
12498: DOUBLE
12499: LD_INT 1
12501: DEC
12502: ST_TO_ADDR
12503: LD_VAR 0 3
12507: PUSH
12508: FOR_TO
12509: IFFALSE 12597
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12511: LD_ADDR_VAR 0 5
12515: PUSH
12516: LD_VAR 0 5
12520: PUSH
12521: LD_VAR 0 3
12525: PUSH
12526: LD_VAR 0 4
12530: ARRAY
12531: PPUSH
12532: CALL_OW 266
12536: PUSH
12537: LD_VAR 0 3
12541: PUSH
12542: LD_VAR 0 4
12546: ARRAY
12547: PPUSH
12548: CALL_OW 250
12552: PUSH
12553: LD_VAR 0 3
12557: PUSH
12558: LD_VAR 0 4
12562: ARRAY
12563: PPUSH
12564: CALL_OW 251
12568: PUSH
12569: LD_VAR 0 3
12573: PUSH
12574: LD_VAR 0 4
12578: ARRAY
12579: PPUSH
12580: CALL_OW 254
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: PUSH
12591: EMPTY
12592: LIST
12593: ADD
12594: ST_TO_ADDR
12595: GO 12508
12597: POP
12598: POP
// result := list ;
12599: LD_ADDR_VAR 0 2
12603: PUSH
12604: LD_VAR 0 5
12608: ST_TO_ADDR
// end ;
12609: LD_VAR 0 2
12613: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12614: LD_INT 0
12616: PPUSH
12617: PPUSH
12618: PPUSH
12619: PPUSH
12620: PPUSH
12621: PPUSH
12622: PPUSH
// if not factory then
12623: LD_VAR 0 1
12627: NOT
12628: IFFALSE 12632
// exit ;
12630: GO 13235
// if control = control_apeman then
12632: LD_VAR 0 4
12636: PUSH
12637: LD_INT 5
12639: EQUAL
12640: IFFALSE 12749
// begin tmp := UnitsInside ( factory ) ;
12642: LD_ADDR_VAR 0 8
12646: PUSH
12647: LD_VAR 0 1
12651: PPUSH
12652: CALL_OW 313
12656: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12657: LD_VAR 0 8
12661: PPUSH
12662: LD_INT 25
12664: PUSH
12665: LD_INT 12
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 72
12676: NOT
12677: IFFALSE 12687
// control := control_manual ;
12679: LD_ADDR_VAR 0 4
12683: PUSH
12684: LD_INT 1
12686: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12687: LD_ADDR_VAR 0 8
12691: PUSH
12692: LD_VAR 0 1
12696: PPUSH
12697: CALL 12384 0 1
12701: ST_TO_ADDR
// if tmp then
12702: LD_VAR 0 8
12706: IFFALSE 12749
// begin for i in tmp do
12708: LD_ADDR_VAR 0 7
12712: PUSH
12713: LD_VAR 0 8
12717: PUSH
12718: FOR_IN
12719: IFFALSE 12747
// if i [ 1 ] = b_ext_radio then
12721: LD_VAR 0 7
12725: PUSH
12726: LD_INT 1
12728: ARRAY
12729: PUSH
12730: LD_INT 22
12732: EQUAL
12733: IFFALSE 12745
// begin control := control_remote ;
12735: LD_ADDR_VAR 0 4
12739: PUSH
12740: LD_INT 2
12742: ST_TO_ADDR
// break ;
12743: GO 12747
// end ;
12745: GO 12718
12747: POP
12748: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12749: LD_VAR 0 1
12753: PPUSH
12754: LD_VAR 0 2
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_VAR 0 4
12768: PPUSH
12769: LD_VAR 0 5
12773: PPUSH
12774: CALL_OW 448
12778: IFFALSE 12813
// begin result := [ chassis , engine , control , weapon ] ;
12780: LD_ADDR_VAR 0 6
12784: PUSH
12785: LD_VAR 0 2
12789: PUSH
12790: LD_VAR 0 3
12794: PUSH
12795: LD_VAR 0 4
12799: PUSH
12800: LD_VAR 0 5
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: ST_TO_ADDR
// exit ;
12811: GO 13235
// end ; _chassis := AvailableChassisList ( factory ) ;
12813: LD_ADDR_VAR 0 9
12817: PUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 475
12827: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12828: LD_ADDR_VAR 0 11
12832: PUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 476
12842: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12843: LD_ADDR_VAR 0 12
12847: PUSH
12848: LD_VAR 0 1
12852: PPUSH
12853: CALL_OW 477
12857: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12858: LD_ADDR_VAR 0 10
12862: PUSH
12863: LD_VAR 0 1
12867: PPUSH
12868: CALL_OW 478
12872: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12873: LD_VAR 0 9
12877: NOT
12878: IFTRUE 12887
12880: PUSH
12881: LD_VAR 0 11
12885: NOT
12886: OR
12887: IFTRUE 12896
12889: PUSH
12890: LD_VAR 0 12
12894: NOT
12895: OR
12896: IFTRUE 12905
12898: PUSH
12899: LD_VAR 0 10
12903: NOT
12904: OR
12905: IFFALSE 12940
// begin result := [ chassis , engine , control , weapon ] ;
12907: LD_ADDR_VAR 0 6
12911: PUSH
12912: LD_VAR 0 2
12916: PUSH
12917: LD_VAR 0 3
12921: PUSH
12922: LD_VAR 0 4
12926: PUSH
12927: LD_VAR 0 5
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: ST_TO_ADDR
// exit ;
12938: GO 13235
// end ; if not chassis in _chassis then
12940: LD_VAR 0 2
12944: PUSH
12945: LD_VAR 0 9
12949: IN
12950: NOT
12951: IFFALSE 12977
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12953: LD_ADDR_VAR 0 2
12957: PUSH
12958: LD_VAR 0 9
12962: PUSH
12963: LD_INT 1
12965: PPUSH
12966: LD_VAR 0 9
12970: PPUSH
12971: CALL_OW 12
12975: ARRAY
12976: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12977: LD_VAR 0 2
12981: PPUSH
12982: LD_VAR 0 3
12986: PPUSH
12987: CALL 13240 0 2
12991: NOT
12992: IFFALSE 13053
// repeat engine := _engine [ 1 ] ;
12994: LD_ADDR_VAR 0 3
12998: PUSH
12999: LD_VAR 0 11
13003: PUSH
13004: LD_INT 1
13006: ARRAY
13007: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13008: LD_ADDR_VAR 0 11
13012: PUSH
13013: LD_VAR 0 11
13017: PPUSH
13018: LD_INT 1
13020: PPUSH
13021: CALL_OW 3
13025: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13026: LD_VAR 0 2
13030: PPUSH
13031: LD_VAR 0 3
13035: PPUSH
13036: CALL 13240 0 2
13040: IFTRUE 13051
13042: PUSH
13043: LD_VAR 0 11
13047: PUSH
13048: EMPTY
13049: EQUAL
13050: OR
13051: IFFALSE 12994
// if not control in _control then
13053: LD_VAR 0 4
13057: PUSH
13058: LD_VAR 0 12
13062: IN
13063: NOT
13064: IFFALSE 13090
// control := _control [ rand ( 1 , _control ) ] ;
13066: LD_ADDR_VAR 0 4
13070: PUSH
13071: LD_VAR 0 12
13075: PUSH
13076: LD_INT 1
13078: PPUSH
13079: LD_VAR 0 12
13083: PPUSH
13084: CALL_OW 12
13088: ARRAY
13089: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13090: LD_VAR 0 2
13094: PPUSH
13095: LD_VAR 0 5
13099: PPUSH
13100: CALL 13462 0 2
13104: NOT
13105: IFFALSE 13166
// repeat weapon := _weapon [ 1 ] ;
13107: LD_ADDR_VAR 0 5
13111: PUSH
13112: LD_VAR 0 10
13116: PUSH
13117: LD_INT 1
13119: ARRAY
13120: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13121: LD_ADDR_VAR 0 10
13125: PUSH
13126: LD_VAR 0 10
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: CALL_OW 3
13138: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13139: LD_VAR 0 2
13143: PPUSH
13144: LD_VAR 0 5
13148: PPUSH
13149: CALL 13462 0 2
13153: IFTRUE 13164
13155: PUSH
13156: LD_VAR 0 10
13160: PUSH
13161: EMPTY
13162: EQUAL
13163: OR
13164: IFFALSE 13107
// result := [ ] ;
13166: LD_ADDR_VAR 0 6
13170: PUSH
13171: EMPTY
13172: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13173: LD_VAR 0 1
13177: PPUSH
13178: LD_VAR 0 2
13182: PPUSH
13183: LD_VAR 0 3
13187: PPUSH
13188: LD_VAR 0 4
13192: PPUSH
13193: LD_VAR 0 5
13197: PPUSH
13198: CALL_OW 448
13202: IFFALSE 13235
// result := [ chassis , engine , control , weapon ] ;
13204: LD_ADDR_VAR 0 6
13208: PUSH
13209: LD_VAR 0 2
13213: PUSH
13214: LD_VAR 0 3
13218: PUSH
13219: LD_VAR 0 4
13223: PUSH
13224: LD_VAR 0 5
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: ST_TO_ADDR
// end ;
13235: LD_VAR 0 6
13239: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13240: LD_INT 0
13242: PPUSH
// if not chassis or not engine then
13243: LD_VAR 0 1
13247: NOT
13248: IFTRUE 13257
13250: PUSH
13251: LD_VAR 0 2
13255: NOT
13256: OR
13257: IFFALSE 13261
// exit ;
13259: GO 13457
// case engine of engine_solar :
13261: LD_VAR 0 2
13265: PUSH
13266: LD_INT 2
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13312
13274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13275: LD_ADDR_VAR 0 3
13279: PUSH
13280: LD_INT 11
13282: PUSH
13283: LD_INT 12
13285: PUSH
13286: LD_INT 13
13288: PUSH
13289: LD_INT 14
13291: PUSH
13292: LD_INT 1
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: LD_INT 3
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: ST_TO_ADDR
13310: GO 13441
13312: LD_INT 1
13314: DOUBLE
13315: EQUAL
13316: IFTRUE 13320
13318: GO 13382
13320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13321: LD_ADDR_VAR 0 3
13325: PUSH
13326: LD_INT 11
13328: PUSH
13329: LD_INT 12
13331: PUSH
13332: LD_INT 13
13334: PUSH
13335: LD_INT 14
13337: PUSH
13338: LD_INT 1
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: LD_INT 3
13346: PUSH
13347: LD_INT 4
13349: PUSH
13350: LD_INT 5
13352: PUSH
13353: LD_INT 21
13355: PUSH
13356: LD_INT 23
13358: PUSH
13359: LD_INT 22
13361: PUSH
13362: LD_INT 24
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: ST_TO_ADDR
13380: GO 13441
13382: LD_INT 3
13384: DOUBLE
13385: EQUAL
13386: IFTRUE 13390
13388: GO 13440
13390: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13391: LD_ADDR_VAR 0 3
13395: PUSH
13396: LD_INT 13
13398: PUSH
13399: LD_INT 14
13401: PUSH
13402: LD_INT 2
13404: PUSH
13405: LD_INT 3
13407: PUSH
13408: LD_INT 4
13410: PUSH
13411: LD_INT 5
13413: PUSH
13414: LD_INT 21
13416: PUSH
13417: LD_INT 22
13419: PUSH
13420: LD_INT 23
13422: PUSH
13423: LD_INT 24
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: ST_TO_ADDR
13438: GO 13441
13440: POP
// result := ( chassis in result ) ;
13441: LD_ADDR_VAR 0 3
13445: PUSH
13446: LD_VAR 0 1
13450: PUSH
13451: LD_VAR 0 3
13455: IN
13456: ST_TO_ADDR
// end ;
13457: LD_VAR 0 3
13461: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13462: LD_INT 0
13464: PPUSH
// if not chassis or not weapon then
13465: LD_VAR 0 1
13469: NOT
13470: IFTRUE 13479
13472: PUSH
13473: LD_VAR 0 2
13477: NOT
13478: OR
13479: IFFALSE 13483
// exit ;
13481: GO 14543
// case weapon of us_machine_gun :
13483: LD_VAR 0 2
13487: PUSH
13488: LD_INT 2
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13526
13496: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13497: LD_ADDR_VAR 0 3
13501: PUSH
13502: LD_INT 1
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 3
13510: PUSH
13511: LD_INT 4
13513: PUSH
13514: LD_INT 5
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: ST_TO_ADDR
13524: GO 14527
13526: LD_INT 3
13528: DOUBLE
13529: EQUAL
13530: IFTRUE 13534
13532: GO 13564
13534: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13535: LD_ADDR_VAR 0 3
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: LD_INT 2
13545: PUSH
13546: LD_INT 3
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: LD_INT 5
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: ST_TO_ADDR
13562: GO 14527
13564: LD_INT 11
13566: DOUBLE
13567: EQUAL
13568: IFTRUE 13572
13570: GO 13602
13572: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13573: LD_ADDR_VAR 0 3
13577: PUSH
13578: LD_INT 1
13580: PUSH
13581: LD_INT 2
13583: PUSH
13584: LD_INT 3
13586: PUSH
13587: LD_INT 4
13589: PUSH
13590: LD_INT 5
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: ST_TO_ADDR
13600: GO 14527
13602: LD_INT 4
13604: DOUBLE
13605: EQUAL
13606: IFTRUE 13610
13608: GO 13636
13610: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13611: LD_ADDR_VAR 0 3
13615: PUSH
13616: LD_INT 2
13618: PUSH
13619: LD_INT 3
13621: PUSH
13622: LD_INT 4
13624: PUSH
13625: LD_INT 5
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: ST_TO_ADDR
13634: GO 14527
13636: LD_INT 5
13638: DOUBLE
13639: EQUAL
13640: IFTRUE 13644
13642: GO 13670
13644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13645: LD_ADDR_VAR 0 3
13649: PUSH
13650: LD_INT 2
13652: PUSH
13653: LD_INT 3
13655: PUSH
13656: LD_INT 4
13658: PUSH
13659: LD_INT 5
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: ST_TO_ADDR
13668: GO 14527
13670: LD_INT 9
13672: DOUBLE
13673: EQUAL
13674: IFTRUE 13678
13676: GO 13704
13678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13679: LD_ADDR_VAR 0 3
13683: PUSH
13684: LD_INT 2
13686: PUSH
13687: LD_INT 3
13689: PUSH
13690: LD_INT 4
13692: PUSH
13693: LD_INT 5
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: ST_TO_ADDR
13702: GO 14527
13704: LD_INT 7
13706: DOUBLE
13707: EQUAL
13708: IFTRUE 13712
13710: GO 13738
13712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_INT 2
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: LD_INT 4
13726: PUSH
13727: LD_INT 5
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: ST_TO_ADDR
13736: GO 14527
13738: LD_INT 12
13740: DOUBLE
13741: EQUAL
13742: IFTRUE 13746
13744: GO 13772
13746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13747: LD_ADDR_VAR 0 3
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: LD_INT 3
13757: PUSH
13758: LD_INT 4
13760: PUSH
13761: LD_INT 5
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: ST_TO_ADDR
13770: GO 14527
13772: LD_INT 13
13774: DOUBLE
13775: EQUAL
13776: IFTRUE 13780
13778: GO 13806
13780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13781: LD_ADDR_VAR 0 3
13785: PUSH
13786: LD_INT 2
13788: PUSH
13789: LD_INT 3
13791: PUSH
13792: LD_INT 4
13794: PUSH
13795: LD_INT 5
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: ST_TO_ADDR
13804: GO 14527
13806: LD_INT 14
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 13832
13814: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13815: LD_ADDR_VAR 0 3
13819: PUSH
13820: LD_INT 4
13822: PUSH
13823: LD_INT 5
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: ST_TO_ADDR
13830: GO 14527
13832: LD_INT 6
13834: DOUBLE
13835: EQUAL
13836: IFTRUE 13840
13838: GO 13858
13840: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13841: LD_ADDR_VAR 0 3
13845: PUSH
13846: LD_INT 4
13848: PUSH
13849: LD_INT 5
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: ST_TO_ADDR
13856: GO 14527
13858: LD_INT 10
13860: DOUBLE
13861: EQUAL
13862: IFTRUE 13866
13864: GO 13884
13866: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13867: LD_ADDR_VAR 0 3
13871: PUSH
13872: LD_INT 4
13874: PUSH
13875: LD_INT 5
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: ST_TO_ADDR
13882: GO 14527
13884: LD_INT 22
13886: DOUBLE
13887: EQUAL
13888: IFTRUE 13892
13890: GO 13918
13892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13893: LD_ADDR_VAR 0 3
13897: PUSH
13898: LD_INT 11
13900: PUSH
13901: LD_INT 12
13903: PUSH
13904: LD_INT 13
13906: PUSH
13907: LD_INT 14
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: ST_TO_ADDR
13916: GO 14527
13918: LD_INT 23
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13952
13926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13927: LD_ADDR_VAR 0 3
13931: PUSH
13932: LD_INT 11
13934: PUSH
13935: LD_INT 12
13937: PUSH
13938: LD_INT 13
13940: PUSH
13941: LD_INT 14
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: ST_TO_ADDR
13950: GO 14527
13952: LD_INT 24
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13986
13960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: LD_INT 11
13968: PUSH
13969: LD_INT 12
13971: PUSH
13972: LD_INT 13
13974: PUSH
13975: LD_INT 14
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: ST_TO_ADDR
13984: GO 14527
13986: LD_INT 30
13988: DOUBLE
13989: EQUAL
13990: IFTRUE 13994
13992: GO 14020
13994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: LD_INT 11
14002: PUSH
14003: LD_INT 12
14005: PUSH
14006: LD_INT 13
14008: PUSH
14009: LD_INT 14
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: ST_TO_ADDR
14018: GO 14527
14020: LD_INT 25
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14046
14028: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 13
14036: PUSH
14037: LD_INT 14
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: ST_TO_ADDR
14044: GO 14527
14046: LD_INT 27
14048: DOUBLE
14049: EQUAL
14050: IFTRUE 14054
14052: GO 14072
14054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14055: LD_ADDR_VAR 0 3
14059: PUSH
14060: LD_INT 13
14062: PUSH
14063: LD_INT 14
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: ST_TO_ADDR
14070: GO 14527
14072: LD_INT 92
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 14106
14080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14081: LD_ADDR_VAR 0 3
14085: PUSH
14086: LD_INT 11
14088: PUSH
14089: LD_INT 12
14091: PUSH
14092: LD_INT 13
14094: PUSH
14095: LD_INT 14
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: ST_TO_ADDR
14104: GO 14527
14106: LD_INT 28
14108: DOUBLE
14109: EQUAL
14110: IFTRUE 14114
14112: GO 14132
14114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14115: LD_ADDR_VAR 0 3
14119: PUSH
14120: LD_INT 13
14122: PUSH
14123: LD_INT 14
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: ST_TO_ADDR
14130: GO 14527
14132: LD_INT 29
14134: DOUBLE
14135: EQUAL
14136: IFTRUE 14140
14138: GO 14158
14140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14141: LD_ADDR_VAR 0 3
14145: PUSH
14146: LD_INT 13
14148: PUSH
14149: LD_INT 14
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: ST_TO_ADDR
14156: GO 14527
14158: LD_INT 31
14160: DOUBLE
14161: EQUAL
14162: IFTRUE 14166
14164: GO 14184
14166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14167: LD_ADDR_VAR 0 3
14171: PUSH
14172: LD_INT 13
14174: PUSH
14175: LD_INT 14
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: ST_TO_ADDR
14182: GO 14527
14184: LD_INT 26
14186: DOUBLE
14187: EQUAL
14188: IFTRUE 14192
14190: GO 14210
14192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14193: LD_ADDR_VAR 0 3
14197: PUSH
14198: LD_INT 13
14200: PUSH
14201: LD_INT 14
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: ST_TO_ADDR
14208: GO 14527
14210: LD_INT 42
14212: DOUBLE
14213: EQUAL
14214: IFTRUE 14218
14216: GO 14244
14218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14219: LD_ADDR_VAR 0 3
14223: PUSH
14224: LD_INT 21
14226: PUSH
14227: LD_INT 22
14229: PUSH
14230: LD_INT 23
14232: PUSH
14233: LD_INT 24
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: ST_TO_ADDR
14242: GO 14527
14244: LD_INT 43
14246: DOUBLE
14247: EQUAL
14248: IFTRUE 14252
14250: GO 14278
14252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14253: LD_ADDR_VAR 0 3
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 22
14263: PUSH
14264: LD_INT 23
14266: PUSH
14267: LD_INT 24
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: ST_TO_ADDR
14276: GO 14527
14278: LD_INT 44
14280: DOUBLE
14281: EQUAL
14282: IFTRUE 14286
14284: GO 14312
14286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14287: LD_ADDR_VAR 0 3
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 22
14297: PUSH
14298: LD_INT 23
14300: PUSH
14301: LD_INT 24
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: ST_TO_ADDR
14310: GO 14527
14312: LD_INT 45
14314: DOUBLE
14315: EQUAL
14316: IFTRUE 14320
14318: GO 14346
14320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14321: LD_ADDR_VAR 0 3
14325: PUSH
14326: LD_INT 21
14328: PUSH
14329: LD_INT 22
14331: PUSH
14332: LD_INT 23
14334: PUSH
14335: LD_INT 24
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: ST_TO_ADDR
14344: GO 14527
14346: LD_INT 49
14348: DOUBLE
14349: EQUAL
14350: IFTRUE 14354
14352: GO 14380
14354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14355: LD_ADDR_VAR 0 3
14359: PUSH
14360: LD_INT 21
14362: PUSH
14363: LD_INT 22
14365: PUSH
14366: LD_INT 23
14368: PUSH
14369: LD_INT 24
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: ST_TO_ADDR
14378: GO 14527
14380: LD_INT 51
14382: DOUBLE
14383: EQUAL
14384: IFTRUE 14388
14386: GO 14414
14388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14389: LD_ADDR_VAR 0 3
14393: PUSH
14394: LD_INT 21
14396: PUSH
14397: LD_INT 22
14399: PUSH
14400: LD_INT 23
14402: PUSH
14403: LD_INT 24
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: ST_TO_ADDR
14412: GO 14527
14414: LD_INT 52
14416: DOUBLE
14417: EQUAL
14418: IFTRUE 14422
14420: GO 14448
14422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14423: LD_ADDR_VAR 0 3
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 23
14436: PUSH
14437: LD_INT 24
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: ST_TO_ADDR
14446: GO 14527
14448: LD_INT 53
14450: DOUBLE
14451: EQUAL
14452: IFTRUE 14456
14454: GO 14474
14456: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14457: LD_ADDR_VAR 0 3
14461: PUSH
14462: LD_INT 23
14464: PUSH
14465: LD_INT 24
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: ST_TO_ADDR
14472: GO 14527
14474: LD_INT 46
14476: DOUBLE
14477: EQUAL
14478: IFTRUE 14482
14480: GO 14500
14482: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14483: LD_ADDR_VAR 0 3
14487: PUSH
14488: LD_INT 23
14490: PUSH
14491: LD_INT 24
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: ST_TO_ADDR
14498: GO 14527
14500: LD_INT 47
14502: DOUBLE
14503: EQUAL
14504: IFTRUE 14508
14506: GO 14526
14508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14509: LD_ADDR_VAR 0 3
14513: PUSH
14514: LD_INT 23
14516: PUSH
14517: LD_INT 24
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: ST_TO_ADDR
14524: GO 14527
14526: POP
// result := ( chassis in result ) ;
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_VAR 0 1
14536: PUSH
14537: LD_VAR 0 3
14541: IN
14542: ST_TO_ADDR
// end ;
14543: LD_VAR 0 3
14547: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14548: LD_INT 0
14550: PPUSH
14551: PPUSH
14552: PPUSH
14553: PPUSH
14554: PPUSH
14555: PPUSH
14556: PPUSH
// result := array ;
14557: LD_ADDR_VAR 0 5
14561: PUSH
14562: LD_VAR 0 1
14566: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14567: LD_VAR 0 1
14571: NOT
14572: IFTRUE 14581
14574: PUSH
14575: LD_VAR 0 2
14579: NOT
14580: OR
14581: IFTRUE 14590
14583: PUSH
14584: LD_VAR 0 3
14588: NOT
14589: OR
14590: IFTRUE 14604
14592: PUSH
14593: LD_VAR 0 2
14597: PUSH
14598: LD_VAR 0 1
14602: GREATER
14603: OR
14604: IFTRUE 14618
14606: PUSH
14607: LD_VAR 0 3
14611: PUSH
14612: LD_VAR 0 1
14616: GREATER
14617: OR
14618: IFFALSE 14622
// exit ;
14620: GO 14918
// if direction then
14622: LD_VAR 0 4
14626: IFFALSE 14690
// begin d := 1 ;
14628: LD_ADDR_VAR 0 9
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// if i_from > i_to then
14636: LD_VAR 0 2
14640: PUSH
14641: LD_VAR 0 3
14645: GREATER
14646: IFFALSE 14672
// length := ( array - i_from ) + i_to else
14648: LD_ADDR_VAR 0 11
14652: PUSH
14653: LD_VAR 0 1
14657: PUSH
14658: LD_VAR 0 2
14662: MINUS
14663: PUSH
14664: LD_VAR 0 3
14668: PLUS
14669: ST_TO_ADDR
14670: GO 14688
// length := i_to - i_from ;
14672: LD_ADDR_VAR 0 11
14676: PUSH
14677: LD_VAR 0 3
14681: PUSH
14682: LD_VAR 0 2
14686: MINUS
14687: ST_TO_ADDR
// end else
14688: GO 14751
// begin d := - 1 ;
14690: LD_ADDR_VAR 0 9
14694: PUSH
14695: LD_INT 1
14697: NEG
14698: ST_TO_ADDR
// if i_from > i_to then
14699: LD_VAR 0 2
14703: PUSH
14704: LD_VAR 0 3
14708: GREATER
14709: IFFALSE 14729
// length := i_from - i_to else
14711: LD_ADDR_VAR 0 11
14715: PUSH
14716: LD_VAR 0 2
14720: PUSH
14721: LD_VAR 0 3
14725: MINUS
14726: ST_TO_ADDR
14727: GO 14751
// length := ( array - i_to ) + i_from ;
14729: LD_ADDR_VAR 0 11
14733: PUSH
14734: LD_VAR 0 1
14738: PUSH
14739: LD_VAR 0 3
14743: MINUS
14744: PUSH
14745: LD_VAR 0 2
14749: PLUS
14750: ST_TO_ADDR
// end ; if not length then
14751: LD_VAR 0 11
14755: NOT
14756: IFFALSE 14760
// exit ;
14758: GO 14918
// tmp := array ;
14760: LD_ADDR_VAR 0 10
14764: PUSH
14765: LD_VAR 0 1
14769: ST_TO_ADDR
// for i = 1 to length do
14770: LD_ADDR_VAR 0 6
14774: PUSH
14775: DOUBLE
14776: LD_INT 1
14778: DEC
14779: ST_TO_ADDR
14780: LD_VAR 0 11
14784: PUSH
14785: FOR_TO
14786: IFFALSE 14906
// begin for j = 1 to array do
14788: LD_ADDR_VAR 0 7
14792: PUSH
14793: DOUBLE
14794: LD_INT 1
14796: DEC
14797: ST_TO_ADDR
14798: LD_VAR 0 1
14802: PUSH
14803: FOR_TO
14804: IFFALSE 14892
// begin k := j + d ;
14806: LD_ADDR_VAR 0 8
14810: PUSH
14811: LD_VAR 0 7
14815: PUSH
14816: LD_VAR 0 9
14820: PLUS
14821: ST_TO_ADDR
// if k > array then
14822: LD_VAR 0 8
14826: PUSH
14827: LD_VAR 0 1
14831: GREATER
14832: IFFALSE 14842
// k := 1 ;
14834: LD_ADDR_VAR 0 8
14838: PUSH
14839: LD_INT 1
14841: ST_TO_ADDR
// if not k then
14842: LD_VAR 0 8
14846: NOT
14847: IFFALSE 14859
// k := array ;
14849: LD_ADDR_VAR 0 8
14853: PUSH
14854: LD_VAR 0 1
14858: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14859: LD_ADDR_VAR 0 10
14863: PUSH
14864: LD_VAR 0 10
14868: PPUSH
14869: LD_VAR 0 8
14873: PPUSH
14874: LD_VAR 0 1
14878: PUSH
14879: LD_VAR 0 7
14883: ARRAY
14884: PPUSH
14885: CALL_OW 1
14889: ST_TO_ADDR
// end ;
14890: GO 14803
14892: POP
14893: POP
// array := tmp ;
14894: LD_ADDR_VAR 0 1
14898: PUSH
14899: LD_VAR 0 10
14903: ST_TO_ADDR
// end ;
14904: GO 14785
14906: POP
14907: POP
// result := array ;
14908: LD_ADDR_VAR 0 5
14912: PUSH
14913: LD_VAR 0 1
14917: ST_TO_ADDR
// end ;
14918: LD_VAR 0 5
14922: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
// result := 0 ;
14927: LD_ADDR_VAR 0 3
14931: PUSH
14932: LD_INT 0
14934: ST_TO_ADDR
// if not array or not value in array then
14935: LD_VAR 0 1
14939: NOT
14940: IFTRUE 14955
14942: PUSH
14943: LD_VAR 0 2
14947: PUSH
14948: LD_VAR 0 1
14952: IN
14953: NOT
14954: OR
14955: IFFALSE 14959
// exit ;
14957: GO 15013
// for i = 1 to array do
14959: LD_ADDR_VAR 0 4
14963: PUSH
14964: DOUBLE
14965: LD_INT 1
14967: DEC
14968: ST_TO_ADDR
14969: LD_VAR 0 1
14973: PUSH
14974: FOR_TO
14975: IFFALSE 15011
// if value = array [ i ] then
14977: LD_VAR 0 2
14981: PUSH
14982: LD_VAR 0 1
14986: PUSH
14987: LD_VAR 0 4
14991: ARRAY
14992: EQUAL
14993: IFFALSE 15009
// begin result := i ;
14995: LD_ADDR_VAR 0 3
14999: PUSH
15000: LD_VAR 0 4
15004: ST_TO_ADDR
// exit ;
15005: POP
15006: POP
15007: GO 15013
// end ;
15009: GO 14974
15011: POP
15012: POP
// end ;
15013: LD_VAR 0 3
15017: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15018: LD_INT 0
15020: PPUSH
// vc_chassis := chassis ;
15021: LD_ADDR_OWVAR 37
15025: PUSH
15026: LD_VAR 0 1
15030: ST_TO_ADDR
// vc_engine := engine ;
15031: LD_ADDR_OWVAR 39
15035: PUSH
15036: LD_VAR 0 2
15040: ST_TO_ADDR
// vc_control := control ;
15041: LD_ADDR_OWVAR 38
15045: PUSH
15046: LD_VAR 0 3
15050: ST_TO_ADDR
// vc_weapon := weapon ;
15051: LD_ADDR_OWVAR 40
15055: PUSH
15056: LD_VAR 0 4
15060: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15061: LD_ADDR_OWVAR 41
15065: PUSH
15066: LD_VAR 0 5
15070: ST_TO_ADDR
// end ;
15071: LD_VAR 0 6
15075: RET
// export function WantPlant ( unit ) ; var task ; begin
15076: LD_INT 0
15078: PPUSH
15079: PPUSH
// result := false ;
15080: LD_ADDR_VAR 0 2
15084: PUSH
15085: LD_INT 0
15087: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15088: LD_ADDR_VAR 0 3
15092: PUSH
15093: LD_VAR 0 1
15097: PPUSH
15098: CALL_OW 437
15102: ST_TO_ADDR
// if task then
15103: LD_VAR 0 3
15107: IFFALSE 15135
// if task [ 1 ] [ 1 ] = p then
15109: LD_VAR 0 3
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PUSH
15118: LD_INT 1
15120: ARRAY
15121: PUSH
15122: LD_STRING p
15124: EQUAL
15125: IFFALSE 15135
// result := true ;
15127: LD_ADDR_VAR 0 2
15131: PUSH
15132: LD_INT 1
15134: ST_TO_ADDR
// end ;
15135: LD_VAR 0 2
15139: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15140: LD_INT 0
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
// if pos < 1 then
15146: LD_VAR 0 2
15150: PUSH
15151: LD_INT 1
15153: LESS
15154: IFFALSE 15158
// exit ;
15156: GO 15461
// if pos = 1 then
15158: LD_VAR 0 2
15162: PUSH
15163: LD_INT 1
15165: EQUAL
15166: IFFALSE 15199
// result := Replace ( arr , pos [ 1 ] , value ) else
15168: LD_ADDR_VAR 0 4
15172: PUSH
15173: LD_VAR 0 1
15177: PPUSH
15178: LD_VAR 0 2
15182: PUSH
15183: LD_INT 1
15185: ARRAY
15186: PPUSH
15187: LD_VAR 0 3
15191: PPUSH
15192: CALL_OW 1
15196: ST_TO_ADDR
15197: GO 15461
// begin tmp := arr ;
15199: LD_ADDR_VAR 0 6
15203: PUSH
15204: LD_VAR 0 1
15208: ST_TO_ADDR
// s_arr := [ tmp ] ;
15209: LD_ADDR_VAR 0 7
15213: PUSH
15214: LD_VAR 0 6
15218: PUSH
15219: EMPTY
15220: LIST
15221: ST_TO_ADDR
// for i = 1 to pos - 1 do
15222: LD_ADDR_VAR 0 5
15226: PUSH
15227: DOUBLE
15228: LD_INT 1
15230: DEC
15231: ST_TO_ADDR
15232: LD_VAR 0 2
15236: PUSH
15237: LD_INT 1
15239: MINUS
15240: PUSH
15241: FOR_TO
15242: IFFALSE 15287
// begin tmp := tmp [ pos [ i ] ] ;
15244: LD_ADDR_VAR 0 6
15248: PUSH
15249: LD_VAR 0 6
15253: PUSH
15254: LD_VAR 0 2
15258: PUSH
15259: LD_VAR 0 5
15263: ARRAY
15264: ARRAY
15265: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15266: LD_ADDR_VAR 0 7
15270: PUSH
15271: LD_VAR 0 7
15275: PUSH
15276: LD_VAR 0 6
15280: PUSH
15281: EMPTY
15282: LIST
15283: ADD
15284: ST_TO_ADDR
// end ;
15285: GO 15241
15287: POP
15288: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15289: LD_ADDR_VAR 0 6
15293: PUSH
15294: LD_VAR 0 6
15298: PPUSH
15299: LD_VAR 0 2
15303: PUSH
15304: LD_VAR 0 2
15308: ARRAY
15309: PPUSH
15310: LD_VAR 0 3
15314: PPUSH
15315: CALL_OW 1
15319: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15320: LD_ADDR_VAR 0 7
15324: PUSH
15325: LD_VAR 0 7
15329: PPUSH
15330: LD_VAR 0 7
15334: PPUSH
15335: LD_VAR 0 6
15339: PPUSH
15340: CALL_OW 1
15344: ST_TO_ADDR
// for i = s_arr downto 2 do
15345: LD_ADDR_VAR 0 5
15349: PUSH
15350: DOUBLE
15351: LD_VAR 0 7
15355: INC
15356: ST_TO_ADDR
15357: LD_INT 2
15359: PUSH
15360: FOR_DOWNTO
15361: IFFALSE 15445
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15363: LD_ADDR_VAR 0 6
15367: PUSH
15368: LD_VAR 0 7
15372: PUSH
15373: LD_VAR 0 5
15377: PUSH
15378: LD_INT 1
15380: MINUS
15381: ARRAY
15382: PPUSH
15383: LD_VAR 0 2
15387: PUSH
15388: LD_VAR 0 5
15392: PUSH
15393: LD_INT 1
15395: MINUS
15396: ARRAY
15397: PPUSH
15398: LD_VAR 0 7
15402: PUSH
15403: LD_VAR 0 5
15407: ARRAY
15408: PPUSH
15409: CALL_OW 1
15413: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15414: LD_ADDR_VAR 0 7
15418: PUSH
15419: LD_VAR 0 7
15423: PPUSH
15424: LD_VAR 0 5
15428: PUSH
15429: LD_INT 1
15431: MINUS
15432: PPUSH
15433: LD_VAR 0 6
15437: PPUSH
15438: CALL_OW 1
15442: ST_TO_ADDR
// end ;
15443: GO 15360
15445: POP
15446: POP
// result := s_arr [ 1 ] ;
15447: LD_ADDR_VAR 0 4
15451: PUSH
15452: LD_VAR 0 7
15456: PUSH
15457: LD_INT 1
15459: ARRAY
15460: ST_TO_ADDR
// end ; end ;
15461: LD_VAR 0 4
15465: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15466: LD_INT 0
15468: PPUSH
15469: PPUSH
// if not list then
15470: LD_VAR 0 1
15474: NOT
15475: IFFALSE 15479
// exit ;
15477: GO 15570
// i := list [ pos1 ] ;
15479: LD_ADDR_VAR 0 5
15483: PUSH
15484: LD_VAR 0 1
15488: PUSH
15489: LD_VAR 0 2
15493: ARRAY
15494: ST_TO_ADDR
// if not i then
15495: LD_VAR 0 5
15499: NOT
15500: IFFALSE 15504
// exit ;
15502: GO 15570
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15504: LD_ADDR_VAR 0 1
15508: PUSH
15509: LD_VAR 0 1
15513: PPUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_VAR 0 1
15523: PUSH
15524: LD_VAR 0 3
15528: ARRAY
15529: PPUSH
15530: CALL_OW 1
15534: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15535: LD_ADDR_VAR 0 1
15539: PUSH
15540: LD_VAR 0 1
15544: PPUSH
15545: LD_VAR 0 3
15549: PPUSH
15550: LD_VAR 0 5
15554: PPUSH
15555: CALL_OW 1
15559: ST_TO_ADDR
// result := list ;
15560: LD_ADDR_VAR 0 4
15564: PUSH
15565: LD_VAR 0 1
15569: ST_TO_ADDR
// end ;
15570: LD_VAR 0 4
15574: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15575: LD_INT 0
15577: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15578: LD_ADDR_VAR 0 5
15582: PUSH
15583: LD_VAR 0 1
15587: PPUSH
15588: CALL_OW 250
15592: PPUSH
15593: LD_VAR 0 1
15597: PPUSH
15598: CALL_OW 251
15602: PPUSH
15603: LD_VAR 0 2
15607: PPUSH
15608: LD_VAR 0 3
15612: PPUSH
15613: LD_VAR 0 4
15617: PPUSH
15618: CALL 16000 0 5
15622: ST_TO_ADDR
// end ;
15623: LD_VAR 0 5
15627: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15628: LD_INT 0
15630: PPUSH
15631: PPUSH
15632: PPUSH
15633: PPUSH
// if not list or not unit then
15634: LD_VAR 0 2
15638: NOT
15639: IFTRUE 15648
15641: PUSH
15642: LD_VAR 0 1
15646: NOT
15647: OR
15648: IFFALSE 15652
// exit ;
15650: GO 15995
// result := [ ] ;
15652: LD_ADDR_VAR 0 5
15656: PUSH
15657: EMPTY
15658: ST_TO_ADDR
// for i in list do
15659: LD_ADDR_VAR 0 6
15663: PUSH
15664: LD_VAR 0 2
15668: PUSH
15669: FOR_IN
15670: IFFALSE 15888
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15672: LD_ADDR_VAR 0 8
15676: PUSH
15677: LD_VAR 0 1
15681: PPUSH
15682: LD_VAR 0 6
15686: PUSH
15687: LD_INT 1
15689: ARRAY
15690: PPUSH
15691: LD_VAR 0 6
15695: PUSH
15696: LD_INT 2
15698: ARRAY
15699: PPUSH
15700: CALL_OW 297
15704: ST_TO_ADDR
// if not Count ( result ) then
15705: LD_VAR 0 5
15709: PPUSH
15710: CALL 12256 0 1
15714: NOT
15715: IFFALSE 15748
// begin result := Join ( result , [ i , tmp ] ) ;
15717: LD_ADDR_VAR 0 5
15721: PUSH
15722: LD_VAR 0 5
15726: PPUSH
15727: LD_VAR 0 6
15731: PUSH
15732: LD_VAR 0 8
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PPUSH
15741: CALL 48188 0 2
15745: ST_TO_ADDR
// continue ;
15746: GO 15669
// end ; if result [ result ] [ 2 ] <= tmp then
15748: LD_VAR 0 5
15752: PUSH
15753: LD_VAR 0 5
15757: ARRAY
15758: PUSH
15759: LD_INT 2
15761: ARRAY
15762: PUSH
15763: LD_VAR 0 8
15767: LESSEQUAL
15768: IFFALSE 15801
// result := Join ( result , [ i , tmp ] ) else
15770: LD_ADDR_VAR 0 5
15774: PUSH
15775: LD_VAR 0 5
15779: PPUSH
15780: LD_VAR 0 6
15784: PUSH
15785: LD_VAR 0 8
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL 48188 0 2
15798: ST_TO_ADDR
15799: GO 15886
// begin for j := 1 to Count ( result ) do
15801: LD_ADDR_VAR 0 7
15805: PUSH
15806: DOUBLE
15807: LD_INT 1
15809: DEC
15810: ST_TO_ADDR
15811: LD_VAR 0 5
15815: PPUSH
15816: CALL 12256 0 1
15820: PUSH
15821: FOR_TO
15822: IFFALSE 15884
// begin if tmp < result [ j ] [ 2 ] then
15824: LD_VAR 0 8
15828: PUSH
15829: LD_VAR 0 5
15833: PUSH
15834: LD_VAR 0 7
15838: ARRAY
15839: PUSH
15840: LD_INT 2
15842: ARRAY
15843: LESS
15844: IFFALSE 15882
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15846: LD_ADDR_VAR 0 5
15850: PUSH
15851: LD_VAR 0 5
15855: PPUSH
15856: LD_VAR 0 7
15860: PPUSH
15861: LD_VAR 0 6
15865: PUSH
15866: LD_VAR 0 8
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PPUSH
15875: CALL_OW 2
15879: ST_TO_ADDR
// break ;
15880: GO 15884
// end ; end ;
15882: GO 15821
15884: POP
15885: POP
// end ; end ;
15886: GO 15669
15888: POP
15889: POP
// if result and not asc then
15890: LD_VAR 0 5
15894: IFFALSE 15903
15896: PUSH
15897: LD_VAR 0 3
15901: NOT
15902: AND
15903: IFFALSE 15920
// result := ReverseArray ( result ) ;
15905: LD_ADDR_VAR 0 5
15909: PUSH
15910: LD_VAR 0 5
15914: PPUSH
15915: CALL 43278 0 1
15919: ST_TO_ADDR
// tmp := [ ] ;
15920: LD_ADDR_VAR 0 8
15924: PUSH
15925: EMPTY
15926: ST_TO_ADDR
// if mode then
15927: LD_VAR 0 4
15931: IFFALSE 15995
// begin for i := 1 to result do
15933: LD_ADDR_VAR 0 6
15937: PUSH
15938: DOUBLE
15939: LD_INT 1
15941: DEC
15942: ST_TO_ADDR
15943: LD_VAR 0 5
15947: PUSH
15948: FOR_TO
15949: IFFALSE 15983
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15951: LD_ADDR_VAR 0 8
15955: PUSH
15956: LD_VAR 0 8
15960: PPUSH
15961: LD_VAR 0 5
15965: PUSH
15966: LD_VAR 0 6
15970: ARRAY
15971: PUSH
15972: LD_INT 1
15974: ARRAY
15975: PPUSH
15976: CALL 48188 0 2
15980: ST_TO_ADDR
15981: GO 15948
15983: POP
15984: POP
// result := tmp ;
15985: LD_ADDR_VAR 0 5
15989: PUSH
15990: LD_VAR 0 8
15994: ST_TO_ADDR
// end ; end ;
15995: LD_VAR 0 5
15999: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16000: LD_INT 0
16002: PPUSH
16003: PPUSH
16004: PPUSH
16005: PPUSH
// if not list then
16006: LD_VAR 0 3
16010: NOT
16011: IFFALSE 16015
// exit ;
16013: GO 16405
// result := [ ] ;
16015: LD_ADDR_VAR 0 6
16019: PUSH
16020: EMPTY
16021: ST_TO_ADDR
// for i in list do
16022: LD_ADDR_VAR 0 7
16026: PUSH
16027: LD_VAR 0 3
16031: PUSH
16032: FOR_IN
16033: IFFALSE 16235
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16035: LD_ADDR_VAR 0 9
16039: PUSH
16040: LD_VAR 0 7
16044: PPUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: LD_VAR 0 2
16054: PPUSH
16055: CALL_OW 297
16059: ST_TO_ADDR
// if not result then
16060: LD_VAR 0 6
16064: NOT
16065: IFFALSE 16091
// result := [ [ i , tmp ] ] else
16067: LD_ADDR_VAR 0 6
16071: PUSH
16072: LD_VAR 0 7
16076: PUSH
16077: LD_VAR 0 9
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: EMPTY
16087: LIST
16088: ST_TO_ADDR
16089: GO 16233
// begin if result [ result ] [ 2 ] <= tmp then
16091: LD_VAR 0 6
16095: PUSH
16096: LD_VAR 0 6
16100: ARRAY
16101: PUSH
16102: LD_INT 2
16104: ARRAY
16105: PUSH
16106: LD_VAR 0 9
16110: LESSEQUAL
16111: IFFALSE 16153
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16113: LD_ADDR_VAR 0 6
16117: PUSH
16118: LD_VAR 0 6
16122: PPUSH
16123: LD_VAR 0 6
16127: PUSH
16128: LD_INT 1
16130: PLUS
16131: PPUSH
16132: LD_VAR 0 7
16136: PUSH
16137: LD_VAR 0 9
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PPUSH
16146: CALL_OW 2
16150: ST_TO_ADDR
16151: GO 16233
// for j := 1 to result do
16153: LD_ADDR_VAR 0 8
16157: PUSH
16158: DOUBLE
16159: LD_INT 1
16161: DEC
16162: ST_TO_ADDR
16163: LD_VAR 0 6
16167: PUSH
16168: FOR_TO
16169: IFFALSE 16231
// begin if tmp < result [ j ] [ 2 ] then
16171: LD_VAR 0 9
16175: PUSH
16176: LD_VAR 0 6
16180: PUSH
16181: LD_VAR 0 8
16185: ARRAY
16186: PUSH
16187: LD_INT 2
16189: ARRAY
16190: LESS
16191: IFFALSE 16229
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16193: LD_ADDR_VAR 0 6
16197: PUSH
16198: LD_VAR 0 6
16202: PPUSH
16203: LD_VAR 0 8
16207: PPUSH
16208: LD_VAR 0 7
16212: PUSH
16213: LD_VAR 0 9
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PPUSH
16222: CALL_OW 2
16226: ST_TO_ADDR
// break ;
16227: GO 16231
// end ; end ;
16229: GO 16168
16231: POP
16232: POP
// end ; end ;
16233: GO 16032
16235: POP
16236: POP
// if result and not asc then
16237: LD_VAR 0 6
16241: IFFALSE 16250
16243: PUSH
16244: LD_VAR 0 4
16248: NOT
16249: AND
16250: IFFALSE 16325
// begin tmp := result ;
16252: LD_ADDR_VAR 0 9
16256: PUSH
16257: LD_VAR 0 6
16261: ST_TO_ADDR
// for i = tmp downto 1 do
16262: LD_ADDR_VAR 0 7
16266: PUSH
16267: DOUBLE
16268: LD_VAR 0 9
16272: INC
16273: ST_TO_ADDR
16274: LD_INT 1
16276: PUSH
16277: FOR_DOWNTO
16278: IFFALSE 16323
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16280: LD_ADDR_VAR 0 6
16284: PUSH
16285: LD_VAR 0 6
16289: PPUSH
16290: LD_VAR 0 9
16294: PUSH
16295: LD_VAR 0 7
16299: MINUS
16300: PUSH
16301: LD_INT 1
16303: PLUS
16304: PPUSH
16305: LD_VAR 0 9
16309: PUSH
16310: LD_VAR 0 7
16314: ARRAY
16315: PPUSH
16316: CALL_OW 1
16320: ST_TO_ADDR
16321: GO 16277
16323: POP
16324: POP
// end ; tmp := [ ] ;
16325: LD_ADDR_VAR 0 9
16329: PUSH
16330: EMPTY
16331: ST_TO_ADDR
// if mode then
16332: LD_VAR 0 5
16336: IFFALSE 16405
// begin for i = 1 to result do
16338: LD_ADDR_VAR 0 7
16342: PUSH
16343: DOUBLE
16344: LD_INT 1
16346: DEC
16347: ST_TO_ADDR
16348: LD_VAR 0 6
16352: PUSH
16353: FOR_TO
16354: IFFALSE 16393
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16356: LD_ADDR_VAR 0 9
16360: PUSH
16361: LD_VAR 0 9
16365: PPUSH
16366: LD_VAR 0 7
16370: PPUSH
16371: LD_VAR 0 6
16375: PUSH
16376: LD_VAR 0 7
16380: ARRAY
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: PPUSH
16386: CALL_OW 1
16390: ST_TO_ADDR
16391: GO 16353
16393: POP
16394: POP
// result := tmp ;
16395: LD_ADDR_VAR 0 6
16399: PUSH
16400: LD_VAR 0 9
16404: ST_TO_ADDR
// end ; end ;
16405: LD_VAR 0 6
16409: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16410: LD_INT 0
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
16417: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16418: LD_ADDR_VAR 0 5
16422: PUSH
16423: LD_INT 0
16425: PUSH
16426: LD_INT 0
16428: PUSH
16429: LD_INT 0
16431: PUSH
16432: EMPTY
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: ST_TO_ADDR
// if not x or not y then
16440: LD_VAR 0 2
16444: NOT
16445: IFTRUE 16454
16447: PUSH
16448: LD_VAR 0 3
16452: NOT
16453: OR
16454: IFFALSE 16458
// exit ;
16456: GO 18114
// if not range then
16458: LD_VAR 0 4
16462: NOT
16463: IFFALSE 16473
// range := 10 ;
16465: LD_ADDR_VAR 0 4
16469: PUSH
16470: LD_INT 10
16472: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16473: LD_ADDR_VAR 0 8
16477: PUSH
16478: LD_INT 81
16480: PUSH
16481: LD_VAR 0 1
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 92
16492: PUSH
16493: LD_VAR 0 2
16497: PUSH
16498: LD_VAR 0 3
16502: PUSH
16503: LD_VAR 0 4
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 3
16516: PUSH
16517: LD_INT 21
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: PPUSH
16536: CALL_OW 69
16540: ST_TO_ADDR
// if not tmp then
16541: LD_VAR 0 8
16545: NOT
16546: IFFALSE 16550
// exit ;
16548: GO 18114
// for i in tmp do
16550: LD_ADDR_VAR 0 6
16554: PUSH
16555: LD_VAR 0 8
16559: PUSH
16560: FOR_IN
16561: IFFALSE 18089
// begin points := [ 0 , 0 , 0 ] ;
16563: LD_ADDR_VAR 0 9
16567: PUSH
16568: LD_INT 0
16570: PUSH
16571: LD_INT 0
16573: PUSH
16574: LD_INT 0
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: ST_TO_ADDR
// bpoints := 1 ;
16582: LD_ADDR_VAR 0 10
16586: PUSH
16587: LD_INT 1
16589: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16590: LD_VAR 0 6
16594: PPUSH
16595: CALL_OW 247
16599: PUSH
16600: LD_INT 1
16602: DOUBLE
16603: EQUAL
16604: IFTRUE 16608
16606: GO 17190
16608: POP
// begin if GetClass ( i ) = 1 then
16609: LD_VAR 0 6
16613: PPUSH
16614: CALL_OW 257
16618: PUSH
16619: LD_INT 1
16621: EQUAL
16622: IFFALSE 16643
// points := [ 10 , 5 , 3 ] ;
16624: LD_ADDR_VAR 0 9
16628: PUSH
16629: LD_INT 10
16631: PUSH
16632: LD_INT 5
16634: PUSH
16635: LD_INT 3
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16643: LD_VAR 0 6
16647: PPUSH
16648: CALL_OW 257
16652: PUSH
16653: LD_INT 2
16655: PUSH
16656: LD_INT 3
16658: PUSH
16659: LD_INT 4
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: IN
16667: IFFALSE 16688
// points := [ 3 , 2 , 1 ] ;
16669: LD_ADDR_VAR 0 9
16673: PUSH
16674: LD_INT 3
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16688: LD_VAR 0 6
16692: PPUSH
16693: CALL_OW 257
16697: PUSH
16698: LD_INT 5
16700: EQUAL
16701: IFFALSE 16722
// points := [ 130 , 5 , 2 ] ;
16703: LD_ADDR_VAR 0 9
16707: PUSH
16708: LD_INT 130
16710: PUSH
16711: LD_INT 5
16713: PUSH
16714: LD_INT 2
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: LIST
16721: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16722: LD_VAR 0 6
16726: PPUSH
16727: CALL_OW 257
16731: PUSH
16732: LD_INT 8
16734: EQUAL
16735: IFFALSE 16756
// points := [ 35 , 35 , 30 ] ;
16737: LD_ADDR_VAR 0 9
16741: PUSH
16742: LD_INT 35
16744: PUSH
16745: LD_INT 35
16747: PUSH
16748: LD_INT 30
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: LIST
16755: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16756: LD_VAR 0 6
16760: PPUSH
16761: CALL_OW 257
16765: PUSH
16766: LD_INT 9
16768: EQUAL
16769: IFFALSE 16790
// points := [ 20 , 55 , 40 ] ;
16771: LD_ADDR_VAR 0 9
16775: PUSH
16776: LD_INT 20
16778: PUSH
16779: LD_INT 55
16781: PUSH
16782: LD_INT 40
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: LIST
16789: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16790: LD_VAR 0 6
16794: PPUSH
16795: CALL_OW 257
16799: PUSH
16800: LD_INT 12
16802: PUSH
16803: LD_INT 16
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: IN
16810: IFFALSE 16831
// points := [ 5 , 3 , 2 ] ;
16812: LD_ADDR_VAR 0 9
16816: PUSH
16817: LD_INT 5
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: LIST
16830: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16831: LD_VAR 0 6
16835: PPUSH
16836: CALL_OW 257
16840: PUSH
16841: LD_INT 17
16843: EQUAL
16844: IFFALSE 16865
// points := [ 100 , 50 , 75 ] ;
16846: LD_ADDR_VAR 0 9
16850: PUSH
16851: LD_INT 100
16853: PUSH
16854: LD_INT 50
16856: PUSH
16857: LD_INT 75
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: LIST
16864: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16865: LD_VAR 0 6
16869: PPUSH
16870: CALL_OW 257
16874: PUSH
16875: LD_INT 15
16877: EQUAL
16878: IFFALSE 16899
// points := [ 10 , 5 , 3 ] ;
16880: LD_ADDR_VAR 0 9
16884: PUSH
16885: LD_INT 10
16887: PUSH
16888: LD_INT 5
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16899: LD_VAR 0 6
16903: PPUSH
16904: CALL_OW 257
16908: PUSH
16909: LD_INT 14
16911: EQUAL
16912: IFFALSE 16933
// points := [ 10 , 0 , 0 ] ;
16914: LD_ADDR_VAR 0 9
16918: PUSH
16919: LD_INT 10
16921: PUSH
16922: LD_INT 0
16924: PUSH
16925: LD_INT 0
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16933: LD_VAR 0 6
16937: PPUSH
16938: CALL_OW 257
16942: PUSH
16943: LD_INT 11
16945: EQUAL
16946: IFFALSE 16967
// points := [ 30 , 10 , 5 ] ;
16948: LD_ADDR_VAR 0 9
16952: PUSH
16953: LD_INT 30
16955: PUSH
16956: LD_INT 10
16958: PUSH
16959: LD_INT 5
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: LIST
16966: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_INT 5
16974: PPUSH
16975: CALL_OW 321
16979: PUSH
16980: LD_INT 2
16982: EQUAL
16983: IFFALSE 17000
// bpoints := bpoints * 1.8 ;
16985: LD_ADDR_VAR 0 10
16989: PUSH
16990: LD_VAR 0 10
16994: PUSH
16995: LD_REAL  1.80000000000000E+0000
16998: MUL
16999: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17000: LD_VAR 0 6
17004: PPUSH
17005: CALL_OW 257
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: LD_INT 2
17015: PUSH
17016: LD_INT 3
17018: PUSH
17019: LD_INT 4
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: IN
17028: IFFALSE 17048
17030: PUSH
17031: LD_VAR 0 1
17035: PPUSH
17036: LD_INT 51
17038: PPUSH
17039: CALL_OW 321
17043: PUSH
17044: LD_INT 2
17046: EQUAL
17047: AND
17048: IFFALSE 17065
// bpoints := bpoints * 1.2 ;
17050: LD_ADDR_VAR 0 10
17054: PUSH
17055: LD_VAR 0 10
17059: PUSH
17060: LD_REAL  1.20000000000000E+0000
17063: MUL
17064: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17065: LD_VAR 0 6
17069: PPUSH
17070: CALL_OW 257
17074: PUSH
17075: LD_INT 5
17077: PUSH
17078: LD_INT 7
17080: PUSH
17081: LD_INT 9
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: IN
17089: IFFALSE 17109
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: LD_INT 52
17099: PPUSH
17100: CALL_OW 321
17104: PUSH
17105: LD_INT 2
17107: EQUAL
17108: AND
17109: IFFALSE 17126
// bpoints := bpoints * 1.5 ;
17111: LD_ADDR_VAR 0 10
17115: PUSH
17116: LD_VAR 0 10
17120: PUSH
17121: LD_REAL  1.50000000000000E+0000
17124: MUL
17125: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17126: LD_VAR 0 1
17130: PPUSH
17131: LD_INT 66
17133: PPUSH
17134: CALL_OW 321
17138: PUSH
17139: LD_INT 2
17141: EQUAL
17142: IFFALSE 17159
// bpoints := bpoints * 1.1 ;
17144: LD_ADDR_VAR 0 10
17148: PUSH
17149: LD_VAR 0 10
17153: PUSH
17154: LD_REAL  1.10000000000000E+0000
17157: MUL
17158: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17159: LD_ADDR_VAR 0 10
17163: PUSH
17164: LD_VAR 0 10
17168: PUSH
17169: LD_VAR 0 6
17173: PPUSH
17174: LD_INT 1
17176: PPUSH
17177: CALL_OW 259
17181: PUSH
17182: LD_REAL  1.15000000000000E+0000
17185: MUL
17186: MUL
17187: ST_TO_ADDR
// end ; unit_vehicle :
17188: GO 18018
17190: LD_INT 2
17192: DOUBLE
17193: EQUAL
17194: IFTRUE 17198
17196: GO 18006
17198: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17199: LD_VAR 0 6
17203: PPUSH
17204: CALL_OW 264
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: LD_INT 42
17214: PUSH
17215: LD_INT 24
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: IN
17223: IFFALSE 17244
// points := [ 25 , 5 , 3 ] ;
17225: LD_ADDR_VAR 0 9
17229: PUSH
17230: LD_INT 25
17232: PUSH
17233: LD_INT 5
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: LIST
17243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17244: LD_VAR 0 6
17248: PPUSH
17249: CALL_OW 264
17253: PUSH
17254: LD_INT 4
17256: PUSH
17257: LD_INT 43
17259: PUSH
17260: LD_INT 25
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: IN
17268: IFFALSE 17289
// points := [ 40 , 15 , 5 ] ;
17270: LD_ADDR_VAR 0 9
17274: PUSH
17275: LD_INT 40
17277: PUSH
17278: LD_INT 15
17280: PUSH
17281: LD_INT 5
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: LIST
17288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17289: LD_VAR 0 6
17293: PPUSH
17294: CALL_OW 264
17298: PUSH
17299: LD_INT 3
17301: PUSH
17302: LD_INT 23
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: IN
17309: IFFALSE 17330
// points := [ 7 , 25 , 8 ] ;
17311: LD_ADDR_VAR 0 9
17315: PUSH
17316: LD_INT 7
17318: PUSH
17319: LD_INT 25
17321: PUSH
17322: LD_INT 8
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17330: LD_VAR 0 6
17334: PPUSH
17335: CALL_OW 264
17339: PUSH
17340: LD_INT 5
17342: PUSH
17343: LD_INT 27
17345: PUSH
17346: LD_INT 44
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: LIST
17353: IN
17354: IFFALSE 17375
// points := [ 14 , 50 , 16 ] ;
17356: LD_ADDR_VAR 0 9
17360: PUSH
17361: LD_INT 14
17363: PUSH
17364: LD_INT 50
17366: PUSH
17367: LD_INT 16
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: LIST
17374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17375: LD_VAR 0 6
17379: PPUSH
17380: CALL_OW 264
17384: PUSH
17385: LD_INT 6
17387: PUSH
17388: LD_INT 46
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: IN
17395: IFFALSE 17416
// points := [ 32 , 120 , 70 ] ;
17397: LD_ADDR_VAR 0 9
17401: PUSH
17402: LD_INT 32
17404: PUSH
17405: LD_INT 120
17407: PUSH
17408: LD_INT 70
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17416: LD_VAR 0 6
17420: PPUSH
17421: CALL_OW 264
17425: PUSH
17426: LD_INT 7
17428: PUSH
17429: LD_INT 28
17431: PUSH
17432: LD_INT 45
17434: PUSH
17435: LD_INT 92
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: IN
17444: IFFALSE 17465
// points := [ 35 , 20 , 45 ] ;
17446: LD_ADDR_VAR 0 9
17450: PUSH
17451: LD_INT 35
17453: PUSH
17454: LD_INT 20
17456: PUSH
17457: LD_INT 45
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17465: LD_VAR 0 6
17469: PPUSH
17470: CALL_OW 264
17474: PUSH
17475: LD_INT 47
17477: PUSH
17478: EMPTY
17479: LIST
17480: IN
17481: IFFALSE 17502
// points := [ 67 , 45 , 75 ] ;
17483: LD_ADDR_VAR 0 9
17487: PUSH
17488: LD_INT 67
17490: PUSH
17491: LD_INT 45
17493: PUSH
17494: LD_INT 75
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: LIST
17501: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17502: LD_VAR 0 6
17506: PPUSH
17507: CALL_OW 264
17511: PUSH
17512: LD_INT 26
17514: PUSH
17515: EMPTY
17516: LIST
17517: IN
17518: IFFALSE 17539
// points := [ 120 , 30 , 80 ] ;
17520: LD_ADDR_VAR 0 9
17524: PUSH
17525: LD_INT 120
17527: PUSH
17528: LD_INT 30
17530: PUSH
17531: LD_INT 80
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: LIST
17538: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17539: LD_VAR 0 6
17543: PPUSH
17544: CALL_OW 264
17548: PUSH
17549: LD_INT 22
17551: PUSH
17552: EMPTY
17553: LIST
17554: IN
17555: IFFALSE 17576
// points := [ 40 , 1 , 1 ] ;
17557: LD_ADDR_VAR 0 9
17561: PUSH
17562: LD_INT 40
17564: PUSH
17565: LD_INT 1
17567: PUSH
17568: LD_INT 1
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17576: LD_VAR 0 6
17580: PPUSH
17581: CALL_OW 264
17585: PUSH
17586: LD_INT 29
17588: PUSH
17589: EMPTY
17590: LIST
17591: IN
17592: IFFALSE 17613
// points := [ 70 , 200 , 400 ] ;
17594: LD_ADDR_VAR 0 9
17598: PUSH
17599: LD_INT 70
17601: PUSH
17602: LD_INT 200
17604: PUSH
17605: LD_INT 400
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17613: LD_VAR 0 6
17617: PPUSH
17618: CALL_OW 264
17622: PUSH
17623: LD_INT 14
17625: PUSH
17626: LD_INT 53
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: IN
17633: IFFALSE 17654
// points := [ 40 , 10 , 20 ] ;
17635: LD_ADDR_VAR 0 9
17639: PUSH
17640: LD_INT 40
17642: PUSH
17643: LD_INT 10
17645: PUSH
17646: LD_INT 20
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17654: LD_VAR 0 6
17658: PPUSH
17659: CALL_OW 264
17663: PUSH
17664: LD_INT 9
17666: PUSH
17667: EMPTY
17668: LIST
17669: IN
17670: IFFALSE 17691
// points := [ 5 , 70 , 20 ] ;
17672: LD_ADDR_VAR 0 9
17676: PUSH
17677: LD_INT 5
17679: PUSH
17680: LD_INT 70
17682: PUSH
17683: LD_INT 20
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: LIST
17690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17691: LD_VAR 0 6
17695: PPUSH
17696: CALL_OW 264
17700: PUSH
17701: LD_INT 10
17703: PUSH
17704: EMPTY
17705: LIST
17706: IN
17707: IFFALSE 17728
// points := [ 35 , 110 , 70 ] ;
17709: LD_ADDR_VAR 0 9
17713: PUSH
17714: LD_INT 35
17716: PUSH
17717: LD_INT 110
17719: PUSH
17720: LD_INT 70
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17728: LD_VAR 0 6
17732: PPUSH
17733: CALL_OW 265
17737: PUSH
17738: LD_INT 25
17740: EQUAL
17741: IFFALSE 17762
// points := [ 80 , 65 , 100 ] ;
17743: LD_ADDR_VAR 0 9
17747: PUSH
17748: LD_INT 80
17750: PUSH
17751: LD_INT 65
17753: PUSH
17754: LD_INT 100
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17762: LD_VAR 0 6
17766: PPUSH
17767: CALL_OW 263
17771: PUSH
17772: LD_INT 1
17774: EQUAL
17775: IFFALSE 17810
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17777: LD_ADDR_VAR 0 10
17781: PUSH
17782: LD_VAR 0 10
17786: PUSH
17787: LD_VAR 0 6
17791: PPUSH
17792: CALL_OW 311
17796: PPUSH
17797: LD_INT 3
17799: PPUSH
17800: CALL_OW 259
17804: PUSH
17805: LD_INT 4
17807: MUL
17808: MUL
17809: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17810: LD_VAR 0 6
17814: PPUSH
17815: CALL_OW 263
17819: PUSH
17820: LD_INT 2
17822: EQUAL
17823: IFFALSE 17874
// begin j := IsControledBy ( i ) ;
17825: LD_ADDR_VAR 0 7
17829: PUSH
17830: LD_VAR 0 6
17834: PPUSH
17835: CALL_OW 312
17839: ST_TO_ADDR
// if j then
17840: LD_VAR 0 7
17844: IFFALSE 17874
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17846: LD_ADDR_VAR 0 10
17850: PUSH
17851: LD_VAR 0 10
17855: PUSH
17856: LD_VAR 0 7
17860: PPUSH
17861: LD_INT 3
17863: PPUSH
17864: CALL_OW 259
17868: PUSH
17869: LD_INT 3
17871: MUL
17872: MUL
17873: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17874: LD_VAR 0 6
17878: PPUSH
17879: CALL_OW 264
17883: PUSH
17884: LD_INT 5
17886: PUSH
17887: LD_INT 6
17889: PUSH
17890: LD_INT 46
17892: PUSH
17893: LD_INT 44
17895: PUSH
17896: LD_INT 47
17898: PUSH
17899: LD_INT 45
17901: PUSH
17902: LD_INT 28
17904: PUSH
17905: LD_INT 7
17907: PUSH
17908: LD_INT 27
17910: PUSH
17911: LD_INT 29
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: IN
17926: IFFALSE 17946
17928: PUSH
17929: LD_VAR 0 1
17933: PPUSH
17934: LD_INT 52
17936: PPUSH
17937: CALL_OW 321
17941: PUSH
17942: LD_INT 2
17944: EQUAL
17945: AND
17946: IFFALSE 17963
// bpoints := bpoints * 1.2 ;
17948: LD_ADDR_VAR 0 10
17952: PUSH
17953: LD_VAR 0 10
17957: PUSH
17958: LD_REAL  1.20000000000000E+0000
17961: MUL
17962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17963: LD_VAR 0 6
17967: PPUSH
17968: CALL_OW 264
17972: PUSH
17973: LD_INT 6
17975: PUSH
17976: LD_INT 46
17978: PUSH
17979: LD_INT 47
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: LIST
17986: IN
17987: IFFALSE 18004
// bpoints := bpoints * 1.2 ;
17989: LD_ADDR_VAR 0 10
17993: PUSH
17994: LD_VAR 0 10
17998: PUSH
17999: LD_REAL  1.20000000000000E+0000
18002: MUL
18003: ST_TO_ADDR
// end ; unit_building :
18004: GO 18018
18006: LD_INT 3
18008: DOUBLE
18009: EQUAL
18010: IFTRUE 18014
18012: GO 18017
18014: POP
// ; end ;
18015: GO 18018
18017: POP
// for j = 1 to 3 do
18018: LD_ADDR_VAR 0 7
18022: PUSH
18023: DOUBLE
18024: LD_INT 1
18026: DEC
18027: ST_TO_ADDR
18028: LD_INT 3
18030: PUSH
18031: FOR_TO
18032: IFFALSE 18085
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18034: LD_ADDR_VAR 0 5
18038: PUSH
18039: LD_VAR 0 5
18043: PPUSH
18044: LD_VAR 0 7
18048: PPUSH
18049: LD_VAR 0 5
18053: PUSH
18054: LD_VAR 0 7
18058: ARRAY
18059: PUSH
18060: LD_VAR 0 9
18064: PUSH
18065: LD_VAR 0 7
18069: ARRAY
18070: PUSH
18071: LD_VAR 0 10
18075: MUL
18076: PLUS
18077: PPUSH
18078: CALL_OW 1
18082: ST_TO_ADDR
18083: GO 18031
18085: POP
18086: POP
// end ;
18087: GO 16560
18089: POP
18090: POP
// result := Replace ( result , 4 , tmp ) ;
18091: LD_ADDR_VAR 0 5
18095: PUSH
18096: LD_VAR 0 5
18100: PPUSH
18101: LD_INT 4
18103: PPUSH
18104: LD_VAR 0 8
18108: PPUSH
18109: CALL_OW 1
18113: ST_TO_ADDR
// end ;
18114: LD_VAR 0 5
18118: RET
// export function DangerAtRange ( unit , range ) ; begin
18119: LD_INT 0
18121: PPUSH
// if not unit then
18122: LD_VAR 0 1
18126: NOT
18127: IFFALSE 18131
// exit ;
18129: GO 18176
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18131: LD_ADDR_VAR 0 3
18135: PUSH
18136: LD_VAR 0 1
18140: PPUSH
18141: CALL_OW 255
18145: PPUSH
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL_OW 250
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 251
18165: PPUSH
18166: LD_VAR 0 2
18170: PPUSH
18171: CALL 16410 0 4
18175: ST_TO_ADDR
// end ;
18176: LD_VAR 0 3
18180: RET
// export function DangerInArea ( side , area ) ; begin
18181: LD_INT 0
18183: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18184: LD_ADDR_VAR 0 3
18188: PUSH
18189: LD_VAR 0 2
18193: PPUSH
18194: LD_INT 81
18196: PUSH
18197: LD_VAR 0 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 70
18210: ST_TO_ADDR
// end ;
18211: LD_VAR 0 3
18215: RET
// export function IsExtension ( b ) ; begin
18216: LD_INT 0
18218: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18219: LD_ADDR_VAR 0 2
18223: PUSH
18224: LD_VAR 0 1
18228: PUSH
18229: LD_INT 23
18231: PUSH
18232: LD_INT 20
18234: PUSH
18235: LD_INT 22
18237: PUSH
18238: LD_INT 17
18240: PUSH
18241: LD_INT 24
18243: PUSH
18244: LD_INT 21
18246: PUSH
18247: LD_INT 19
18249: PUSH
18250: LD_INT 16
18252: PUSH
18253: LD_INT 25
18255: PUSH
18256: LD_INT 18
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: IN
18271: ST_TO_ADDR
// end ;
18272: LD_VAR 0 2
18276: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18277: LD_INT 0
18279: PPUSH
18280: PPUSH
18281: PPUSH
// result := [ ] ;
18282: LD_ADDR_VAR 0 4
18286: PUSH
18287: EMPTY
18288: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18289: LD_ADDR_VAR 0 5
18293: PUSH
18294: LD_VAR 0 2
18298: PPUSH
18299: LD_INT 21
18301: PUSH
18302: LD_INT 3
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PPUSH
18309: CALL_OW 70
18313: ST_TO_ADDR
// if not tmp then
18314: LD_VAR 0 5
18318: NOT
18319: IFFALSE 18323
// exit ;
18321: GO 18387
// if checkLink then
18323: LD_VAR 0 3
18327: IFFALSE 18377
// begin for i in tmp do
18329: LD_ADDR_VAR 0 6
18333: PUSH
18334: LD_VAR 0 5
18338: PUSH
18339: FOR_IN
18340: IFFALSE 18375
// if GetBase ( i ) <> base then
18342: LD_VAR 0 6
18346: PPUSH
18347: CALL_OW 274
18351: PUSH
18352: LD_VAR 0 1
18356: NONEQUAL
18357: IFFALSE 18373
// ComLinkToBase ( base , i ) ;
18359: LD_VAR 0 1
18363: PPUSH
18364: LD_VAR 0 6
18368: PPUSH
18369: CALL_OW 169
18373: GO 18339
18375: POP
18376: POP
// end ; result := tmp ;
18377: LD_ADDR_VAR 0 4
18381: PUSH
18382: LD_VAR 0 5
18386: ST_TO_ADDR
// end ;
18387: LD_VAR 0 4
18391: RET
// export function ComComplete ( units , b ) ; var i ; begin
18392: LD_INT 0
18394: PPUSH
18395: PPUSH
// if not units then
18396: LD_VAR 0 1
18400: NOT
18401: IFFALSE 18405
// exit ;
18403: GO 18495
// for i in units do
18405: LD_ADDR_VAR 0 4
18409: PUSH
18410: LD_VAR 0 1
18414: PUSH
18415: FOR_IN
18416: IFFALSE 18493
// if BuildingStatus ( b ) = bs_build then
18418: LD_VAR 0 2
18422: PPUSH
18423: CALL_OW 461
18427: PUSH
18428: LD_INT 1
18430: EQUAL
18431: IFFALSE 18491
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18433: LD_VAR 0 4
18437: PPUSH
18438: LD_STRING h
18440: PUSH
18441: LD_VAR 0 2
18445: PPUSH
18446: CALL_OW 250
18450: PUSH
18451: LD_VAR 0 2
18455: PPUSH
18456: CALL_OW 251
18460: PUSH
18461: LD_VAR 0 2
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: LD_INT 0
18471: PUSH
18472: LD_INT 0
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: PPUSH
18487: CALL_OW 446
18491: GO 18415
18493: POP
18494: POP
// end ;
18495: LD_VAR 0 3
18499: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18500: LD_INT 0
18502: PPUSH
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
18507: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18508: LD_VAR 0 1
18512: NOT
18513: IFTRUE 18530
18515: PUSH
18516: LD_VAR 0 1
18520: PPUSH
18521: CALL_OW 263
18525: PUSH
18526: LD_INT 2
18528: NONEQUAL
18529: OR
18530: IFFALSE 18534
// exit ;
18532: GO 18850
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18534: LD_ADDR_VAR 0 6
18538: PUSH
18539: LD_INT 22
18541: PUSH
18542: LD_VAR 0 1
18546: PPUSH
18547: CALL_OW 255
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: LD_INT 30
18561: PUSH
18562: LD_INT 36
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 34
18571: PUSH
18572: LD_INT 31
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PPUSH
18588: CALL_OW 69
18592: ST_TO_ADDR
// if not tmp then
18593: LD_VAR 0 6
18597: NOT
18598: IFFALSE 18602
// exit ;
18600: GO 18850
// result := [ ] ;
18602: LD_ADDR_VAR 0 2
18606: PUSH
18607: EMPTY
18608: ST_TO_ADDR
// for i in tmp do
18609: LD_ADDR_VAR 0 3
18613: PUSH
18614: LD_VAR 0 6
18618: PUSH
18619: FOR_IN
18620: IFFALSE 18691
// begin t := UnitsInside ( i ) ;
18622: LD_ADDR_VAR 0 4
18626: PUSH
18627: LD_VAR 0 3
18631: PPUSH
18632: CALL_OW 313
18636: ST_TO_ADDR
// if t then
18637: LD_VAR 0 4
18641: IFFALSE 18689
// for j in t do
18643: LD_ADDR_VAR 0 7
18647: PUSH
18648: LD_VAR 0 4
18652: PUSH
18653: FOR_IN
18654: IFFALSE 18687
// result := Replace ( result , result + 1 , j ) ;
18656: LD_ADDR_VAR 0 2
18660: PUSH
18661: LD_VAR 0 2
18665: PPUSH
18666: LD_VAR 0 2
18670: PUSH
18671: LD_INT 1
18673: PLUS
18674: PPUSH
18675: LD_VAR 0 7
18679: PPUSH
18680: CALL_OW 1
18684: ST_TO_ADDR
18685: GO 18653
18687: POP
18688: POP
// end ;
18689: GO 18619
18691: POP
18692: POP
// if not result then
18693: LD_VAR 0 2
18697: NOT
18698: IFFALSE 18702
// exit ;
18700: GO 18850
// mech := result [ 1 ] ;
18702: LD_ADDR_VAR 0 5
18706: PUSH
18707: LD_VAR 0 2
18711: PUSH
18712: LD_INT 1
18714: ARRAY
18715: ST_TO_ADDR
// if result > 1 then
18716: LD_VAR 0 2
18720: PUSH
18721: LD_INT 1
18723: GREATER
18724: IFFALSE 18836
// begin for i = 2 to result do
18726: LD_ADDR_VAR 0 3
18730: PUSH
18731: DOUBLE
18732: LD_INT 2
18734: DEC
18735: ST_TO_ADDR
18736: LD_VAR 0 2
18740: PUSH
18741: FOR_TO
18742: IFFALSE 18834
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18744: LD_ADDR_VAR 0 4
18748: PUSH
18749: LD_VAR 0 2
18753: PUSH
18754: LD_VAR 0 3
18758: ARRAY
18759: PPUSH
18760: LD_INT 3
18762: PPUSH
18763: CALL_OW 259
18767: PUSH
18768: LD_VAR 0 2
18772: PUSH
18773: LD_VAR 0 3
18777: ARRAY
18778: PPUSH
18779: CALL_OW 432
18783: MINUS
18784: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18785: LD_VAR 0 4
18789: PUSH
18790: LD_VAR 0 5
18794: PPUSH
18795: LD_INT 3
18797: PPUSH
18798: CALL_OW 259
18802: PUSH
18803: LD_VAR 0 5
18807: PPUSH
18808: CALL_OW 432
18812: MINUS
18813: GREATEREQUAL
18814: IFFALSE 18832
// mech := result [ i ] ;
18816: LD_ADDR_VAR 0 5
18820: PUSH
18821: LD_VAR 0 2
18825: PUSH
18826: LD_VAR 0 3
18830: ARRAY
18831: ST_TO_ADDR
// end ;
18832: GO 18741
18834: POP
18835: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18836: LD_VAR 0 1
18840: PPUSH
18841: LD_VAR 0 5
18845: PPUSH
18846: CALL_OW 135
// end ;
18850: LD_VAR 0 2
18854: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18855: LD_INT 0
18857: PPUSH
18858: PPUSH
18859: PPUSH
18860: PPUSH
18861: PPUSH
18862: PPUSH
18863: PPUSH
18864: PPUSH
18865: PPUSH
18866: PPUSH
18867: PPUSH
18868: PPUSH
18869: PPUSH
// result := [ ] ;
18870: LD_ADDR_VAR 0 7
18874: PUSH
18875: EMPTY
18876: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18877: LD_VAR 0 1
18881: PPUSH
18882: CALL_OW 266
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: LD_INT 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: IN
18897: NOT
18898: IFFALSE 18902
// exit ;
18900: GO 20542
// if name then
18902: LD_VAR 0 3
18906: IFFALSE 18922
// SetBName ( base_dep , name ) ;
18908: LD_VAR 0 1
18912: PPUSH
18913: LD_VAR 0 3
18917: PPUSH
18918: CALL_OW 500
// base := GetBase ( base_dep ) ;
18922: LD_ADDR_VAR 0 15
18926: PUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 274
18936: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18937: LD_ADDR_VAR 0 16
18941: PUSH
18942: LD_VAR 0 1
18946: PPUSH
18947: CALL_OW 255
18951: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18952: LD_ADDR_VAR 0 17
18956: PUSH
18957: LD_VAR 0 1
18961: PPUSH
18962: CALL_OW 248
18966: ST_TO_ADDR
// if sources then
18967: LD_VAR 0 5
18971: IFFALSE 19018
// for i = 1 to 3 do
18973: LD_ADDR_VAR 0 8
18977: PUSH
18978: DOUBLE
18979: LD_INT 1
18981: DEC
18982: ST_TO_ADDR
18983: LD_INT 3
18985: PUSH
18986: FOR_TO
18987: IFFALSE 19016
// AddResourceType ( base , i , sources [ i ] ) ;
18989: LD_VAR 0 15
18993: PPUSH
18994: LD_VAR 0 8
18998: PPUSH
18999: LD_VAR 0 5
19003: PUSH
19004: LD_VAR 0 8
19008: ARRAY
19009: PPUSH
19010: CALL_OW 276
19014: GO 18986
19016: POP
19017: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19018: LD_ADDR_VAR 0 18
19022: PUSH
19023: LD_VAR 0 15
19027: PPUSH
19028: LD_VAR 0 2
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: CALL 18277 0 3
19040: ST_TO_ADDR
// InitHc ;
19041: CALL_OW 19
// InitUc ;
19045: CALL_OW 18
// uc_side := side ;
19049: LD_ADDR_OWVAR 20
19053: PUSH
19054: LD_VAR 0 16
19058: ST_TO_ADDR
// uc_nation := nation ;
19059: LD_ADDR_OWVAR 21
19063: PUSH
19064: LD_VAR 0 17
19068: ST_TO_ADDR
// if buildings then
19069: LD_VAR 0 18
19073: IFFALSE 20401
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19075: LD_ADDR_VAR 0 19
19079: PUSH
19080: LD_VAR 0 18
19084: PPUSH
19085: LD_INT 2
19087: PUSH
19088: LD_INT 30
19090: PUSH
19091: LD_INT 29
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 30
19100: PUSH
19101: LD_INT 30
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: PPUSH
19113: CALL_OW 72
19117: ST_TO_ADDR
// if tmp then
19118: LD_VAR 0 19
19122: IFFALSE 19170
// for i in tmp do
19124: LD_ADDR_VAR 0 8
19128: PUSH
19129: LD_VAR 0 19
19133: PUSH
19134: FOR_IN
19135: IFFALSE 19168
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19137: LD_VAR 0 8
19141: PPUSH
19142: CALL_OW 250
19146: PPUSH
19147: LD_VAR 0 8
19151: PPUSH
19152: CALL_OW 251
19156: PPUSH
19157: LD_VAR 0 16
19161: PPUSH
19162: CALL_OW 441
19166: GO 19134
19168: POP
19169: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19170: LD_VAR 0 18
19174: PPUSH
19175: LD_INT 2
19177: PUSH
19178: LD_INT 30
19180: PUSH
19181: LD_INT 32
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 30
19190: PUSH
19191: LD_INT 33
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: LIST
19202: PPUSH
19203: CALL_OW 72
19207: IFFALSE 19295
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19209: LD_ADDR_VAR 0 8
19213: PUSH
19214: LD_VAR 0 18
19218: PPUSH
19219: LD_INT 2
19221: PUSH
19222: LD_INT 30
19224: PUSH
19225: LD_INT 32
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 30
19234: PUSH
19235: LD_INT 33
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: PPUSH
19247: CALL_OW 72
19251: PUSH
19252: FOR_IN
19253: IFFALSE 19293
// begin if not GetBWeapon ( i ) then
19255: LD_VAR 0 8
19259: PPUSH
19260: CALL_OW 269
19264: NOT
19265: IFFALSE 19291
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19267: LD_VAR 0 8
19271: PPUSH
19272: LD_VAR 0 8
19276: PPUSH
19277: LD_VAR 0 2
19281: PPUSH
19282: CALL 20547 0 2
19286: PPUSH
19287: CALL_OW 431
// end ;
19291: GO 19252
19293: POP
19294: POP
// end ; for i = 1 to personel do
19295: LD_ADDR_VAR 0 8
19299: PUSH
19300: DOUBLE
19301: LD_INT 1
19303: DEC
19304: ST_TO_ADDR
19305: LD_VAR 0 6
19309: PUSH
19310: FOR_TO
19311: IFFALSE 20381
// begin if i > 4 then
19313: LD_VAR 0 8
19317: PUSH
19318: LD_INT 4
19320: GREATER
19321: IFFALSE 19325
// break ;
19323: GO 20381
// case i of 1 :
19325: LD_VAR 0 8
19329: PUSH
19330: LD_INT 1
19332: DOUBLE
19333: EQUAL
19334: IFTRUE 19338
19336: GO 19418
19338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19339: LD_ADDR_VAR 0 12
19343: PUSH
19344: LD_VAR 0 18
19348: PPUSH
19349: LD_INT 22
19351: PUSH
19352: LD_VAR 0 16
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 58
19363: PUSH
19364: EMPTY
19365: LIST
19366: PUSH
19367: LD_INT 2
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 32
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 30
19382: PUSH
19383: LD_INT 4
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 30
19392: PUSH
19393: LD_INT 5
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: PPUSH
19411: CALL_OW 72
19415: ST_TO_ADDR
19416: GO 19640
19418: LD_INT 2
19420: DOUBLE
19421: EQUAL
19422: IFTRUE 19426
19424: GO 19488
19426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19427: LD_ADDR_VAR 0 12
19431: PUSH
19432: LD_VAR 0 18
19436: PPUSH
19437: LD_INT 22
19439: PUSH
19440: LD_VAR 0 16
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 2
19451: PUSH
19452: LD_INT 30
19454: PUSH
19455: LD_INT 0
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: LD_INT 30
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PPUSH
19481: CALL_OW 72
19485: ST_TO_ADDR
19486: GO 19640
19488: LD_INT 3
19490: DOUBLE
19491: EQUAL
19492: IFTRUE 19496
19494: GO 19558
19496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19497: LD_ADDR_VAR 0 12
19501: PUSH
19502: LD_VAR 0 18
19506: PPUSH
19507: LD_INT 22
19509: PUSH
19510: LD_VAR 0 16
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 2
19521: PUSH
19522: LD_INT 30
19524: PUSH
19525: LD_INT 2
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 30
19534: PUSH
19535: LD_INT 3
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: LIST
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PPUSH
19551: CALL_OW 72
19555: ST_TO_ADDR
19556: GO 19640
19558: LD_INT 4
19560: DOUBLE
19561: EQUAL
19562: IFTRUE 19566
19564: GO 19639
19566: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19567: LD_ADDR_VAR 0 12
19571: PUSH
19572: LD_VAR 0 18
19576: PPUSH
19577: LD_INT 22
19579: PUSH
19580: LD_VAR 0 16
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 2
19591: PUSH
19592: LD_INT 30
19594: PUSH
19595: LD_INT 6
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 30
19604: PUSH
19605: LD_INT 7
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 30
19614: PUSH
19615: LD_INT 8
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PPUSH
19632: CALL_OW 72
19636: ST_TO_ADDR
19637: GO 19640
19639: POP
// if i = 1 then
19640: LD_VAR 0 8
19644: PUSH
19645: LD_INT 1
19647: EQUAL
19648: IFFALSE 19759
// begin tmp := [ ] ;
19650: LD_ADDR_VAR 0 19
19654: PUSH
19655: EMPTY
19656: ST_TO_ADDR
// for j in f do
19657: LD_ADDR_VAR 0 9
19661: PUSH
19662: LD_VAR 0 12
19666: PUSH
19667: FOR_IN
19668: IFFALSE 19741
// if GetBType ( j ) = b_bunker then
19670: LD_VAR 0 9
19674: PPUSH
19675: CALL_OW 266
19679: PUSH
19680: LD_INT 32
19682: EQUAL
19683: IFFALSE 19710
// tmp := Insert ( tmp , 1 , j ) else
19685: LD_ADDR_VAR 0 19
19689: PUSH
19690: LD_VAR 0 19
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: LD_VAR 0 9
19702: PPUSH
19703: CALL_OW 2
19707: ST_TO_ADDR
19708: GO 19739
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19710: LD_ADDR_VAR 0 19
19714: PUSH
19715: LD_VAR 0 19
19719: PPUSH
19720: LD_VAR 0 19
19724: PUSH
19725: LD_INT 1
19727: PLUS
19728: PPUSH
19729: LD_VAR 0 9
19733: PPUSH
19734: CALL_OW 2
19738: ST_TO_ADDR
19739: GO 19667
19741: POP
19742: POP
// if tmp then
19743: LD_VAR 0 19
19747: IFFALSE 19759
// f := tmp ;
19749: LD_ADDR_VAR 0 12
19753: PUSH
19754: LD_VAR 0 19
19758: ST_TO_ADDR
// end ; x := personel [ i ] ;
19759: LD_ADDR_VAR 0 13
19763: PUSH
19764: LD_VAR 0 6
19768: PUSH
19769: LD_VAR 0 8
19773: ARRAY
19774: ST_TO_ADDR
// if x = - 1 then
19775: LD_VAR 0 13
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: EQUAL
19784: IFFALSE 19995
// begin for j in f do
19786: LD_ADDR_VAR 0 9
19790: PUSH
19791: LD_VAR 0 12
19795: PUSH
19796: FOR_IN
19797: IFFALSE 19991
// repeat InitHc ;
19799: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19803: LD_VAR 0 9
19807: PPUSH
19808: CALL_OW 266
19812: PUSH
19813: LD_INT 5
19815: EQUAL
19816: IFFALSE 19886
// begin if UnitsInside ( j ) < 3 then
19818: LD_VAR 0 9
19822: PPUSH
19823: CALL_OW 313
19827: PUSH
19828: LD_INT 3
19830: LESS
19831: IFFALSE 19867
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19833: LD_INT 0
19835: PPUSH
19836: LD_INT 5
19838: PUSH
19839: LD_INT 8
19841: PUSH
19842: LD_INT 9
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: LIST
19849: PUSH
19850: LD_VAR 0 17
19854: ARRAY
19855: PPUSH
19856: LD_VAR 0 4
19860: PPUSH
19861: CALL_OW 380
19865: GO 19884
// PrepareHuman ( false , i , skill ) ;
19867: LD_INT 0
19869: PPUSH
19870: LD_VAR 0 8
19874: PPUSH
19875: LD_VAR 0 4
19879: PPUSH
19880: CALL_OW 380
// end else
19884: GO 19903
// PrepareHuman ( false , i , skill ) ;
19886: LD_INT 0
19888: PPUSH
19889: LD_VAR 0 8
19893: PPUSH
19894: LD_VAR 0 4
19898: PPUSH
19899: CALL_OW 380
// un := CreateHuman ;
19903: LD_ADDR_VAR 0 14
19907: PUSH
19908: CALL_OW 44
19912: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19913: LD_ADDR_VAR 0 7
19917: PUSH
19918: LD_VAR 0 7
19922: PPUSH
19923: LD_INT 1
19925: PPUSH
19926: LD_VAR 0 14
19930: PPUSH
19931: CALL_OW 2
19935: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19936: LD_VAR 0 14
19940: PPUSH
19941: LD_VAR 0 9
19945: PPUSH
19946: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19950: LD_VAR 0 9
19954: PPUSH
19955: CALL_OW 313
19959: PUSH
19960: LD_INT 6
19962: EQUAL
19963: IFTRUE 19987
19965: PUSH
19966: LD_VAR 0 9
19970: PPUSH
19971: CALL_OW 266
19975: PUSH
19976: LD_INT 32
19978: PUSH
19979: LD_INT 31
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: IN
19986: OR
19987: IFFALSE 19799
19989: GO 19796
19991: POP
19992: POP
// end else
19993: GO 20379
// for j = 1 to x do
19995: LD_ADDR_VAR 0 9
19999: PUSH
20000: DOUBLE
20001: LD_INT 1
20003: DEC
20004: ST_TO_ADDR
20005: LD_VAR 0 13
20009: PUSH
20010: FOR_TO
20011: IFFALSE 20377
// begin InitHc ;
20013: CALL_OW 19
// if not f then
20017: LD_VAR 0 12
20021: NOT
20022: IFFALSE 20111
// begin PrepareHuman ( false , i , skill ) ;
20024: LD_INT 0
20026: PPUSH
20027: LD_VAR 0 8
20031: PPUSH
20032: LD_VAR 0 4
20036: PPUSH
20037: CALL_OW 380
// un := CreateHuman ;
20041: LD_ADDR_VAR 0 14
20045: PUSH
20046: CALL_OW 44
20050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20051: LD_ADDR_VAR 0 7
20055: PUSH
20056: LD_VAR 0 7
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: LD_VAR 0 14
20068: PPUSH
20069: CALL_OW 2
20073: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20074: LD_VAR 0 14
20078: PPUSH
20079: LD_VAR 0 1
20083: PPUSH
20084: CALL_OW 250
20088: PPUSH
20089: LD_VAR 0 1
20093: PPUSH
20094: CALL_OW 251
20098: PPUSH
20099: LD_INT 10
20101: PPUSH
20102: LD_INT 0
20104: PPUSH
20105: CALL_OW 50
// continue ;
20109: GO 20010
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20111: LD_VAR 0 12
20115: PUSH
20116: LD_INT 1
20118: ARRAY
20119: PPUSH
20120: CALL_OW 313
20124: IFFALSE 20152
20126: PUSH
20127: LD_VAR 0 12
20131: PUSH
20132: LD_INT 1
20134: ARRAY
20135: PPUSH
20136: CALL_OW 266
20140: PUSH
20141: LD_INT 32
20143: PUSH
20144: LD_INT 31
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: IN
20151: AND
20152: IFTRUE 20173
20154: PUSH
20155: LD_VAR 0 12
20159: PUSH
20160: LD_INT 1
20162: ARRAY
20163: PPUSH
20164: CALL_OW 313
20168: PUSH
20169: LD_INT 6
20171: EQUAL
20172: OR
20173: IFFALSE 20193
// f := Delete ( f , 1 ) ;
20175: LD_ADDR_VAR 0 12
20179: PUSH
20180: LD_VAR 0 12
20184: PPUSH
20185: LD_INT 1
20187: PPUSH
20188: CALL_OW 3
20192: ST_TO_ADDR
// if not f then
20193: LD_VAR 0 12
20197: NOT
20198: IFFALSE 20216
// begin x := x + 2 ;
20200: LD_ADDR_VAR 0 13
20204: PUSH
20205: LD_VAR 0 13
20209: PUSH
20210: LD_INT 2
20212: PLUS
20213: ST_TO_ADDR
// continue ;
20214: GO 20010
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20216: LD_VAR 0 12
20220: PUSH
20221: LD_INT 1
20223: ARRAY
20224: PPUSH
20225: CALL_OW 266
20229: PUSH
20230: LD_INT 5
20232: EQUAL
20233: IFFALSE 20307
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20235: LD_VAR 0 12
20239: PUSH
20240: LD_INT 1
20242: ARRAY
20243: PPUSH
20244: CALL_OW 313
20248: PUSH
20249: LD_INT 3
20251: LESS
20252: IFFALSE 20288
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20254: LD_INT 0
20256: PPUSH
20257: LD_INT 5
20259: PUSH
20260: LD_INT 8
20262: PUSH
20263: LD_INT 9
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: LIST
20270: PUSH
20271: LD_VAR 0 17
20275: ARRAY
20276: PPUSH
20277: LD_VAR 0 4
20281: PPUSH
20282: CALL_OW 380
20286: GO 20305
// PrepareHuman ( false , i , skill ) ;
20288: LD_INT 0
20290: PPUSH
20291: LD_VAR 0 8
20295: PPUSH
20296: LD_VAR 0 4
20300: PPUSH
20301: CALL_OW 380
// end else
20305: GO 20324
// PrepareHuman ( false , i , skill ) ;
20307: LD_INT 0
20309: PPUSH
20310: LD_VAR 0 8
20314: PPUSH
20315: LD_VAR 0 4
20319: PPUSH
20320: CALL_OW 380
// un := CreateHuman ;
20324: LD_ADDR_VAR 0 14
20328: PUSH
20329: CALL_OW 44
20333: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20334: LD_ADDR_VAR 0 7
20338: PUSH
20339: LD_VAR 0 7
20343: PPUSH
20344: LD_INT 1
20346: PPUSH
20347: LD_VAR 0 14
20351: PPUSH
20352: CALL_OW 2
20356: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20357: LD_VAR 0 14
20361: PPUSH
20362: LD_VAR 0 12
20366: PUSH
20367: LD_INT 1
20369: ARRAY
20370: PPUSH
20371: CALL_OW 52
// end ;
20375: GO 20010
20377: POP
20378: POP
// end ;
20379: GO 19310
20381: POP
20382: POP
// result := result ^ buildings ;
20383: LD_ADDR_VAR 0 7
20387: PUSH
20388: LD_VAR 0 7
20392: PUSH
20393: LD_VAR 0 18
20397: ADD
20398: ST_TO_ADDR
// end else
20399: GO 20542
// begin for i = 1 to personel do
20401: LD_ADDR_VAR 0 8
20405: PUSH
20406: DOUBLE
20407: LD_INT 1
20409: DEC
20410: ST_TO_ADDR
20411: LD_VAR 0 6
20415: PUSH
20416: FOR_TO
20417: IFFALSE 20540
// begin if i > 4 then
20419: LD_VAR 0 8
20423: PUSH
20424: LD_INT 4
20426: GREATER
20427: IFFALSE 20431
// break ;
20429: GO 20540
// x := personel [ i ] ;
20431: LD_ADDR_VAR 0 13
20435: PUSH
20436: LD_VAR 0 6
20440: PUSH
20441: LD_VAR 0 8
20445: ARRAY
20446: ST_TO_ADDR
// if x = - 1 then
20447: LD_VAR 0 13
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: EQUAL
20456: IFFALSE 20460
// continue ;
20458: GO 20416
// PrepareHuman ( false , i , skill ) ;
20460: LD_INT 0
20462: PPUSH
20463: LD_VAR 0 8
20467: PPUSH
20468: LD_VAR 0 4
20472: PPUSH
20473: CALL_OW 380
// un := CreateHuman ;
20477: LD_ADDR_VAR 0 14
20481: PUSH
20482: CALL_OW 44
20486: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20487: LD_VAR 0 14
20491: PPUSH
20492: LD_VAR 0 1
20496: PPUSH
20497: CALL_OW 250
20501: PPUSH
20502: LD_VAR 0 1
20506: PPUSH
20507: CALL_OW 251
20511: PPUSH
20512: LD_INT 10
20514: PPUSH
20515: LD_INT 0
20517: PPUSH
20518: CALL_OW 50
// result := result ^ un ;
20522: LD_ADDR_VAR 0 7
20526: PUSH
20527: LD_VAR 0 7
20531: PUSH
20532: LD_VAR 0 14
20536: ADD
20537: ST_TO_ADDR
// end ;
20538: GO 20416
20540: POP
20541: POP
// end ; end ;
20542: LD_VAR 0 7
20546: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20547: LD_INT 0
20549: PPUSH
20550: PPUSH
20551: PPUSH
20552: PPUSH
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
20557: PPUSH
20558: PPUSH
20559: PPUSH
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
20564: PPUSH
// result := false ;
20565: LD_ADDR_VAR 0 3
20569: PUSH
20570: LD_INT 0
20572: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20573: LD_VAR 0 1
20577: NOT
20578: IFTRUE 20603
20580: PUSH
20581: LD_VAR 0 1
20585: PPUSH
20586: CALL_OW 266
20590: PUSH
20591: LD_INT 32
20593: PUSH
20594: LD_INT 33
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: IN
20601: NOT
20602: OR
20603: IFFALSE 20607
// exit ;
20605: GO 21742
// nat := GetNation ( tower ) ;
20607: LD_ADDR_VAR 0 12
20611: PUSH
20612: LD_VAR 0 1
20616: PPUSH
20617: CALL_OW 248
20621: ST_TO_ADDR
// side := GetSide ( tower ) ;
20622: LD_ADDR_VAR 0 16
20626: PUSH
20627: LD_VAR 0 1
20631: PPUSH
20632: CALL_OW 255
20636: ST_TO_ADDR
// x := GetX ( tower ) ;
20637: LD_ADDR_VAR 0 10
20641: PUSH
20642: LD_VAR 0 1
20646: PPUSH
20647: CALL_OW 250
20651: ST_TO_ADDR
// y := GetY ( tower ) ;
20652: LD_ADDR_VAR 0 11
20656: PUSH
20657: LD_VAR 0 1
20661: PPUSH
20662: CALL_OW 251
20666: ST_TO_ADDR
// if not x or not y then
20667: LD_VAR 0 10
20671: NOT
20672: IFTRUE 20681
20674: PUSH
20675: LD_VAR 0 11
20679: NOT
20680: OR
20681: IFFALSE 20685
// exit ;
20683: GO 21742
// weapon := 0 ;
20685: LD_ADDR_VAR 0 18
20689: PUSH
20690: LD_INT 0
20692: ST_TO_ADDR
// fac_list := [ ] ;
20693: LD_ADDR_VAR 0 17
20697: PUSH
20698: EMPTY
20699: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20700: LD_ADDR_VAR 0 6
20704: PUSH
20705: LD_VAR 0 1
20709: PPUSH
20710: CALL_OW 274
20714: PPUSH
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_INT 0
20722: PPUSH
20723: CALL 18277 0 3
20727: PPUSH
20728: LD_INT 30
20730: PUSH
20731: LD_INT 3
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 72
20742: ST_TO_ADDR
// if not factories then
20743: LD_VAR 0 6
20747: NOT
20748: IFFALSE 20752
// exit ;
20750: GO 21742
// for i in factories do
20752: LD_ADDR_VAR 0 8
20756: PUSH
20757: LD_VAR 0 6
20761: PUSH
20762: FOR_IN
20763: IFFALSE 20788
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20765: LD_ADDR_VAR 0 17
20769: PUSH
20770: LD_VAR 0 17
20774: PUSH
20775: LD_VAR 0 8
20779: PPUSH
20780: CALL_OW 478
20784: UNION
20785: ST_TO_ADDR
20786: GO 20762
20788: POP
20789: POP
// if not fac_list then
20790: LD_VAR 0 17
20794: NOT
20795: IFFALSE 20799
// exit ;
20797: GO 21742
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20799: LD_ADDR_VAR 0 5
20803: PUSH
20804: LD_INT 4
20806: PUSH
20807: LD_INT 5
20809: PUSH
20810: LD_INT 9
20812: PUSH
20813: LD_INT 10
20815: PUSH
20816: LD_INT 6
20818: PUSH
20819: LD_INT 7
20821: PUSH
20822: LD_INT 11
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 27
20836: PUSH
20837: LD_INT 28
20839: PUSH
20840: LD_INT 26
20842: PUSH
20843: LD_INT 30
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 43
20854: PUSH
20855: LD_INT 44
20857: PUSH
20858: LD_INT 46
20860: PUSH
20861: LD_INT 45
20863: PUSH
20864: LD_INT 47
20866: PUSH
20867: LD_INT 49
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: LIST
20882: PUSH
20883: LD_VAR 0 12
20887: ARRAY
20888: ST_TO_ADDR
// list := list isect fac_list ;
20889: LD_ADDR_VAR 0 5
20893: PUSH
20894: LD_VAR 0 5
20898: PUSH
20899: LD_VAR 0 17
20903: ISECT
20904: ST_TO_ADDR
// if not list then
20905: LD_VAR 0 5
20909: NOT
20910: IFFALSE 20914
// exit ;
20912: GO 21742
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20914: LD_VAR 0 12
20918: PUSH
20919: LD_INT 3
20921: EQUAL
20922: IFFALSE 20934
20924: PUSH
20925: LD_INT 49
20927: PUSH
20928: LD_VAR 0 5
20932: IN
20933: AND
20934: IFFALSE 20954
20936: PUSH
20937: LD_INT 31
20939: PPUSH
20940: LD_VAR 0 16
20944: PPUSH
20945: CALL_OW 321
20949: PUSH
20950: LD_INT 2
20952: EQUAL
20953: AND
20954: IFFALSE 21014
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20956: LD_INT 22
20958: PUSH
20959: LD_VAR 0 16
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 35
20970: PUSH
20971: LD_INT 49
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 91
20980: PUSH
20981: LD_VAR 0 1
20985: PUSH
20986: LD_INT 10
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: PPUSH
20999: CALL_OW 69
21003: NOT
21004: IFFALSE 21014
// weapon := ru_time_lapser ;
21006: LD_ADDR_VAR 0 18
21010: PUSH
21011: LD_INT 49
21013: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21014: LD_VAR 0 12
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: LD_INT 2
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: IN
21029: IFFALSE 21053
21031: PUSH
21032: LD_INT 11
21034: PUSH
21035: LD_VAR 0 5
21039: IN
21040: IFTRUE 21052
21042: PUSH
21043: LD_INT 30
21045: PUSH
21046: LD_VAR 0 5
21050: IN
21051: OR
21052: AND
21053: IFFALSE 21073
21055: PUSH
21056: LD_INT 6
21058: PPUSH
21059: LD_VAR 0 16
21063: PPUSH
21064: CALL_OW 321
21068: PUSH
21069: LD_INT 2
21071: EQUAL
21072: AND
21073: IFFALSE 21240
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21075: LD_INT 22
21077: PUSH
21078: LD_VAR 0 16
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 2
21089: PUSH
21090: LD_INT 35
21092: PUSH
21093: LD_INT 11
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 35
21102: PUSH
21103: LD_INT 30
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 91
21117: PUSH
21118: LD_VAR 0 1
21122: PUSH
21123: LD_INT 18
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: PPUSH
21136: CALL_OW 69
21140: NOT
21141: IFFALSE 21217
21143: PUSH
21144: LD_INT 22
21146: PUSH
21147: LD_VAR 0 16
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 2
21158: PUSH
21159: LD_INT 30
21161: PUSH
21162: LD_INT 32
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 30
21171: PUSH
21172: LD_INT 33
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 91
21186: PUSH
21187: LD_VAR 0 1
21191: PUSH
21192: LD_INT 12
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: PPUSH
21208: CALL_OW 69
21212: PUSH
21213: LD_INT 2
21215: GREATER
21216: AND
21217: IFFALSE 21240
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21219: LD_ADDR_VAR 0 18
21223: PUSH
21224: LD_INT 11
21226: PUSH
21227: LD_INT 30
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_VAR 0 12
21238: ARRAY
21239: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21240: LD_VAR 0 18
21244: NOT
21245: IFFALSE 21265
21247: PUSH
21248: LD_INT 40
21250: PPUSH
21251: LD_VAR 0 16
21255: PPUSH
21256: CALL_OW 321
21260: PUSH
21261: LD_INT 2
21263: EQUAL
21264: AND
21265: IFFALSE 21301
21267: PUSH
21268: LD_INT 7
21270: PUSH
21271: LD_VAR 0 5
21275: IN
21276: IFTRUE 21288
21278: PUSH
21279: LD_INT 28
21281: PUSH
21282: LD_VAR 0 5
21286: IN
21287: OR
21288: IFTRUE 21300
21290: PUSH
21291: LD_INT 45
21293: PUSH
21294: LD_VAR 0 5
21298: IN
21299: OR
21300: AND
21301: IFFALSE 21555
// begin hex := GetHexInfo ( x , y ) ;
21303: LD_ADDR_VAR 0 4
21307: PUSH
21308: LD_VAR 0 10
21312: PPUSH
21313: LD_VAR 0 11
21317: PPUSH
21318: CALL_OW 546
21322: ST_TO_ADDR
// if hex [ 1 ] then
21323: LD_VAR 0 4
21327: PUSH
21328: LD_INT 1
21330: ARRAY
21331: IFFALSE 21335
// exit ;
21333: GO 21742
// height := hex [ 2 ] ;
21335: LD_ADDR_VAR 0 15
21339: PUSH
21340: LD_VAR 0 4
21344: PUSH
21345: LD_INT 2
21347: ARRAY
21348: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21349: LD_ADDR_VAR 0 14
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: LD_INT 3
21362: PUSH
21363: LD_INT 5
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: ST_TO_ADDR
// for i in tmp do
21372: LD_ADDR_VAR 0 8
21376: PUSH
21377: LD_VAR 0 14
21381: PUSH
21382: FOR_IN
21383: IFFALSE 21553
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21385: LD_ADDR_VAR 0 9
21389: PUSH
21390: LD_VAR 0 10
21394: PPUSH
21395: LD_VAR 0 8
21399: PPUSH
21400: LD_INT 5
21402: PPUSH
21403: CALL_OW 272
21407: PUSH
21408: LD_VAR 0 11
21412: PPUSH
21413: LD_VAR 0 8
21417: PPUSH
21418: LD_INT 5
21420: PPUSH
21421: CALL_OW 273
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21430: LD_VAR 0 9
21434: PUSH
21435: LD_INT 1
21437: ARRAY
21438: PPUSH
21439: LD_VAR 0 9
21443: PUSH
21444: LD_INT 2
21446: ARRAY
21447: PPUSH
21448: CALL_OW 488
21452: IFFALSE 21551
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21454: LD_ADDR_VAR 0 4
21458: PUSH
21459: LD_VAR 0 9
21463: PUSH
21464: LD_INT 1
21466: ARRAY
21467: PPUSH
21468: LD_VAR 0 9
21472: PUSH
21473: LD_INT 2
21475: ARRAY
21476: PPUSH
21477: CALL_OW 546
21481: ST_TO_ADDR
// if hex [ 1 ] then
21482: LD_VAR 0 4
21486: PUSH
21487: LD_INT 1
21489: ARRAY
21490: IFFALSE 21494
// continue ;
21492: GO 21382
// h := hex [ 2 ] ;
21494: LD_ADDR_VAR 0 13
21498: PUSH
21499: LD_VAR 0 4
21503: PUSH
21504: LD_INT 2
21506: ARRAY
21507: ST_TO_ADDR
// if h + 7 < height then
21508: LD_VAR 0 13
21512: PUSH
21513: LD_INT 7
21515: PLUS
21516: PUSH
21517: LD_VAR 0 15
21521: LESS
21522: IFFALSE 21551
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21524: LD_ADDR_VAR 0 18
21528: PUSH
21529: LD_INT 7
21531: PUSH
21532: LD_INT 28
21534: PUSH
21535: LD_INT 45
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: LIST
21542: PUSH
21543: LD_VAR 0 12
21547: ARRAY
21548: ST_TO_ADDR
// break ;
21549: GO 21553
// end ; end ; end ;
21551: GO 21382
21553: POP
21554: POP
// end ; if not weapon then
21555: LD_VAR 0 18
21559: NOT
21560: IFFALSE 21620
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21562: LD_ADDR_VAR 0 5
21566: PUSH
21567: LD_VAR 0 5
21571: PUSH
21572: LD_INT 11
21574: PUSH
21575: LD_INT 30
21577: PUSH
21578: LD_INT 49
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: LIST
21585: DIFF
21586: ST_TO_ADDR
// if not list then
21587: LD_VAR 0 5
21591: NOT
21592: IFFALSE 21596
// exit ;
21594: GO 21742
// weapon := list [ rand ( 1 , list ) ] ;
21596: LD_ADDR_VAR 0 18
21600: PUSH
21601: LD_VAR 0 5
21605: PUSH
21606: LD_INT 1
21608: PPUSH
21609: LD_VAR 0 5
21613: PPUSH
21614: CALL_OW 12
21618: ARRAY
21619: ST_TO_ADDR
// end ; if weapon then
21620: LD_VAR 0 18
21624: IFFALSE 21742
// begin tmp := CostOfWeapon ( weapon ) ;
21626: LD_ADDR_VAR 0 14
21630: PUSH
21631: LD_VAR 0 18
21635: PPUSH
21636: CALL_OW 451
21640: ST_TO_ADDR
// j := GetBase ( tower ) ;
21641: LD_ADDR_VAR 0 9
21645: PUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 274
21655: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21656: LD_VAR 0 9
21660: PPUSH
21661: LD_INT 1
21663: PPUSH
21664: CALL_OW 275
21668: PUSH
21669: LD_VAR 0 14
21673: PUSH
21674: LD_INT 1
21676: ARRAY
21677: GREATEREQUAL
21678: IFFALSE 21704
21680: PUSH
21681: LD_VAR 0 9
21685: PPUSH
21686: LD_INT 2
21688: PPUSH
21689: CALL_OW 275
21693: PUSH
21694: LD_VAR 0 14
21698: PUSH
21699: LD_INT 2
21701: ARRAY
21702: GREATEREQUAL
21703: AND
21704: IFFALSE 21730
21706: PUSH
21707: LD_VAR 0 9
21711: PPUSH
21712: LD_INT 3
21714: PPUSH
21715: CALL_OW 275
21719: PUSH
21720: LD_VAR 0 14
21724: PUSH
21725: LD_INT 3
21727: ARRAY
21728: GREATEREQUAL
21729: AND
21730: IFFALSE 21742
// result := weapon ;
21732: LD_ADDR_VAR 0 3
21736: PUSH
21737: LD_VAR 0 18
21741: ST_TO_ADDR
// end ; end ;
21742: LD_VAR 0 3
21746: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21747: LD_INT 0
21749: PPUSH
21750: PPUSH
// result := true ;
21751: LD_ADDR_VAR 0 3
21755: PUSH
21756: LD_INT 1
21758: ST_TO_ADDR
// if array1 = array2 then
21759: LD_VAR 0 1
21763: PUSH
21764: LD_VAR 0 2
21768: EQUAL
21769: IFFALSE 21829
// begin for i = 1 to array1 do
21771: LD_ADDR_VAR 0 4
21775: PUSH
21776: DOUBLE
21777: LD_INT 1
21779: DEC
21780: ST_TO_ADDR
21781: LD_VAR 0 1
21785: PUSH
21786: FOR_TO
21787: IFFALSE 21825
// if array1 [ i ] <> array2 [ i ] then
21789: LD_VAR 0 1
21793: PUSH
21794: LD_VAR 0 4
21798: ARRAY
21799: PUSH
21800: LD_VAR 0 2
21804: PUSH
21805: LD_VAR 0 4
21809: ARRAY
21810: NONEQUAL
21811: IFFALSE 21823
// begin result := false ;
21813: LD_ADDR_VAR 0 3
21817: PUSH
21818: LD_INT 0
21820: ST_TO_ADDR
// break ;
21821: GO 21825
// end ;
21823: GO 21786
21825: POP
21826: POP
// end else
21827: GO 21837
// result := false ;
21829: LD_ADDR_VAR 0 3
21833: PUSH
21834: LD_INT 0
21836: ST_TO_ADDR
// end ;
21837: LD_VAR 0 3
21841: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21842: LD_INT 0
21844: PPUSH
21845: PPUSH
// if not array1 or not array2 then
21846: LD_VAR 0 1
21850: NOT
21851: IFTRUE 21860
21853: PUSH
21854: LD_VAR 0 2
21858: NOT
21859: OR
21860: IFFALSE 21864
// exit ;
21862: GO 21928
// result := true ;
21864: LD_ADDR_VAR 0 3
21868: PUSH
21869: LD_INT 1
21871: ST_TO_ADDR
// for i = 1 to array1 do
21872: LD_ADDR_VAR 0 4
21876: PUSH
21877: DOUBLE
21878: LD_INT 1
21880: DEC
21881: ST_TO_ADDR
21882: LD_VAR 0 1
21886: PUSH
21887: FOR_TO
21888: IFFALSE 21926
// if array1 [ i ] <> array2 [ i ] then
21890: LD_VAR 0 1
21894: PUSH
21895: LD_VAR 0 4
21899: ARRAY
21900: PUSH
21901: LD_VAR 0 2
21905: PUSH
21906: LD_VAR 0 4
21910: ARRAY
21911: NONEQUAL
21912: IFFALSE 21924
// begin result := false ;
21914: LD_ADDR_VAR 0 3
21918: PUSH
21919: LD_INT 0
21921: ST_TO_ADDR
// break ;
21922: GO 21926
// end ;
21924: GO 21887
21926: POP
21927: POP
// end ;
21928: LD_VAR 0 3
21932: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21933: LD_INT 0
21935: PPUSH
21936: PPUSH
21937: PPUSH
// pom := GetBase ( fac ) ;
21938: LD_ADDR_VAR 0 5
21942: PUSH
21943: LD_VAR 0 1
21947: PPUSH
21948: CALL_OW 274
21952: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21953: LD_ADDR_VAR 0 4
21957: PUSH
21958: LD_VAR 0 2
21962: PUSH
21963: LD_INT 1
21965: ARRAY
21966: PPUSH
21967: LD_VAR 0 2
21971: PUSH
21972: LD_INT 2
21974: ARRAY
21975: PPUSH
21976: LD_VAR 0 2
21980: PUSH
21981: LD_INT 3
21983: ARRAY
21984: PPUSH
21985: LD_VAR 0 2
21989: PUSH
21990: LD_INT 4
21992: ARRAY
21993: PPUSH
21994: CALL_OW 449
21998: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21999: LD_ADDR_VAR 0 3
22003: PUSH
22004: LD_VAR 0 5
22008: PPUSH
22009: LD_INT 1
22011: PPUSH
22012: CALL_OW 275
22016: PUSH
22017: LD_VAR 0 4
22021: PUSH
22022: LD_INT 1
22024: ARRAY
22025: GREATEREQUAL
22026: IFFALSE 22052
22028: PUSH
22029: LD_VAR 0 5
22033: PPUSH
22034: LD_INT 2
22036: PPUSH
22037: CALL_OW 275
22041: PUSH
22042: LD_VAR 0 4
22046: PUSH
22047: LD_INT 2
22049: ARRAY
22050: GREATEREQUAL
22051: AND
22052: IFFALSE 22078
22054: PUSH
22055: LD_VAR 0 5
22059: PPUSH
22060: LD_INT 3
22062: PPUSH
22063: CALL_OW 275
22067: PUSH
22068: LD_VAR 0 4
22072: PUSH
22073: LD_INT 3
22075: ARRAY
22076: GREATEREQUAL
22077: AND
22078: ST_TO_ADDR
// end ;
22079: LD_VAR 0 3
22083: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22084: LD_INT 0
22086: PPUSH
22087: PPUSH
22088: PPUSH
22089: PPUSH
// pom := GetBase ( building ) ;
22090: LD_ADDR_VAR 0 3
22094: PUSH
22095: LD_VAR 0 1
22099: PPUSH
22100: CALL_OW 274
22104: ST_TO_ADDR
// if not pom then
22105: LD_VAR 0 3
22109: NOT
22110: IFFALSE 22114
// exit ;
22112: GO 22288
// btype := GetBType ( building ) ;
22114: LD_ADDR_VAR 0 5
22118: PUSH
22119: LD_VAR 0 1
22123: PPUSH
22124: CALL_OW 266
22128: ST_TO_ADDR
// if btype = b_armoury then
22129: LD_VAR 0 5
22133: PUSH
22134: LD_INT 4
22136: EQUAL
22137: IFFALSE 22147
// btype := b_barracks ;
22139: LD_ADDR_VAR 0 5
22143: PUSH
22144: LD_INT 5
22146: ST_TO_ADDR
// if btype = b_depot then
22147: LD_VAR 0 5
22151: PUSH
22152: LD_INT 0
22154: EQUAL
22155: IFFALSE 22165
// btype := b_warehouse ;
22157: LD_ADDR_VAR 0 5
22161: PUSH
22162: LD_INT 1
22164: ST_TO_ADDR
// if btype = b_workshop then
22165: LD_VAR 0 5
22169: PUSH
22170: LD_INT 2
22172: EQUAL
22173: IFFALSE 22183
// btype := b_factory ;
22175: LD_ADDR_VAR 0 5
22179: PUSH
22180: LD_INT 3
22182: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22183: LD_ADDR_VAR 0 4
22187: PUSH
22188: LD_VAR 0 5
22192: PPUSH
22193: LD_VAR 0 1
22197: PPUSH
22198: CALL_OW 248
22202: PPUSH
22203: CALL_OW 450
22207: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22208: LD_ADDR_VAR 0 2
22212: PUSH
22213: LD_VAR 0 3
22217: PPUSH
22218: LD_INT 1
22220: PPUSH
22221: CALL_OW 275
22225: PUSH
22226: LD_VAR 0 4
22230: PUSH
22231: LD_INT 1
22233: ARRAY
22234: GREATEREQUAL
22235: IFFALSE 22261
22237: PUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: LD_INT 2
22245: PPUSH
22246: CALL_OW 275
22250: PUSH
22251: LD_VAR 0 4
22255: PUSH
22256: LD_INT 2
22258: ARRAY
22259: GREATEREQUAL
22260: AND
22261: IFFALSE 22287
22263: PUSH
22264: LD_VAR 0 3
22268: PPUSH
22269: LD_INT 3
22271: PPUSH
22272: CALL_OW 275
22276: PUSH
22277: LD_VAR 0 4
22281: PUSH
22282: LD_INT 3
22284: ARRAY
22285: GREATEREQUAL
22286: AND
22287: ST_TO_ADDR
// end ;
22288: LD_VAR 0 2
22292: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22293: LD_INT 0
22295: PPUSH
22296: PPUSH
22297: PPUSH
// pom := GetBase ( building ) ;
22298: LD_ADDR_VAR 0 4
22302: PUSH
22303: LD_VAR 0 1
22307: PPUSH
22308: CALL_OW 274
22312: ST_TO_ADDR
// if not pom then
22313: LD_VAR 0 4
22317: NOT
22318: IFFALSE 22322
// exit ;
22320: GO 22427
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22322: LD_ADDR_VAR 0 5
22326: PUSH
22327: LD_VAR 0 2
22331: PPUSH
22332: LD_VAR 0 1
22336: PPUSH
22337: CALL_OW 248
22341: PPUSH
22342: CALL_OW 450
22346: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22347: LD_ADDR_VAR 0 3
22351: PUSH
22352: LD_VAR 0 4
22356: PPUSH
22357: LD_INT 1
22359: PPUSH
22360: CALL_OW 275
22364: PUSH
22365: LD_VAR 0 5
22369: PUSH
22370: LD_INT 1
22372: ARRAY
22373: GREATEREQUAL
22374: IFFALSE 22400
22376: PUSH
22377: LD_VAR 0 4
22381: PPUSH
22382: LD_INT 2
22384: PPUSH
22385: CALL_OW 275
22389: PUSH
22390: LD_VAR 0 5
22394: PUSH
22395: LD_INT 2
22397: ARRAY
22398: GREATEREQUAL
22399: AND
22400: IFFALSE 22426
22402: PUSH
22403: LD_VAR 0 4
22407: PPUSH
22408: LD_INT 3
22410: PPUSH
22411: CALL_OW 275
22415: PUSH
22416: LD_VAR 0 5
22420: PUSH
22421: LD_INT 3
22423: ARRAY
22424: GREATEREQUAL
22425: AND
22426: ST_TO_ADDR
// end ;
22427: LD_VAR 0 3
22431: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22432: LD_INT 0
22434: PPUSH
22435: PPUSH
22436: PPUSH
22437: PPUSH
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
22444: PPUSH
// result := false ;
22445: LD_ADDR_VAR 0 8
22449: PUSH
22450: LD_INT 0
22452: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22453: LD_VAR 0 5
22457: NOT
22458: IFTRUE 22467
22460: PUSH
22461: LD_VAR 0 1
22465: NOT
22466: OR
22467: IFTRUE 22476
22469: PUSH
22470: LD_VAR 0 2
22474: NOT
22475: OR
22476: IFTRUE 22485
22478: PUSH
22479: LD_VAR 0 3
22483: NOT
22484: OR
22485: IFFALSE 22489
// exit ;
22487: GO 23315
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22489: LD_ADDR_VAR 0 14
22493: PUSH
22494: LD_VAR 0 1
22498: PPUSH
22499: LD_VAR 0 2
22503: PPUSH
22504: LD_VAR 0 3
22508: PPUSH
22509: LD_VAR 0 4
22513: PPUSH
22514: LD_VAR 0 5
22518: PUSH
22519: LD_INT 1
22521: ARRAY
22522: PPUSH
22523: CALL_OW 248
22527: PPUSH
22528: LD_INT 0
22530: PPUSH
22531: CALL 24596 0 6
22535: ST_TO_ADDR
// if not hexes then
22536: LD_VAR 0 14
22540: NOT
22541: IFFALSE 22545
// exit ;
22543: GO 23315
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22545: LD_ADDR_VAR 0 17
22549: PUSH
22550: LD_VAR 0 5
22554: PPUSH
22555: LD_INT 22
22557: PUSH
22558: LD_VAR 0 13
22562: PPUSH
22563: CALL_OW 255
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: LD_INT 30
22577: PUSH
22578: LD_INT 0
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 30
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 72
22608: ST_TO_ADDR
// for i = 1 to hexes do
22609: LD_ADDR_VAR 0 9
22613: PUSH
22614: DOUBLE
22615: LD_INT 1
22617: DEC
22618: ST_TO_ADDR
22619: LD_VAR 0 14
22623: PUSH
22624: FOR_TO
22625: IFFALSE 23313
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22627: LD_ADDR_VAR 0 13
22631: PUSH
22632: LD_VAR 0 14
22636: PUSH
22637: LD_VAR 0 9
22641: ARRAY
22642: PUSH
22643: LD_INT 1
22645: ARRAY
22646: PPUSH
22647: LD_VAR 0 14
22651: PUSH
22652: LD_VAR 0 9
22656: ARRAY
22657: PUSH
22658: LD_INT 2
22660: ARRAY
22661: PPUSH
22662: CALL_OW 428
22666: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22667: LD_VAR 0 14
22671: PUSH
22672: LD_VAR 0 9
22676: ARRAY
22677: PUSH
22678: LD_INT 1
22680: ARRAY
22681: PPUSH
22682: LD_VAR 0 14
22686: PUSH
22687: LD_VAR 0 9
22691: ARRAY
22692: PUSH
22693: LD_INT 2
22695: ARRAY
22696: PPUSH
22697: CALL_OW 351
22701: IFTRUE 22740
22703: PUSH
22704: LD_VAR 0 14
22708: PUSH
22709: LD_VAR 0 9
22713: ARRAY
22714: PUSH
22715: LD_INT 1
22717: ARRAY
22718: PPUSH
22719: LD_VAR 0 14
22723: PUSH
22724: LD_VAR 0 9
22728: ARRAY
22729: PUSH
22730: LD_INT 2
22732: ARRAY
22733: PPUSH
22734: CALL_OW 488
22738: NOT
22739: OR
22740: IFTRUE 22757
22742: PUSH
22743: LD_VAR 0 13
22747: PPUSH
22748: CALL_OW 247
22752: PUSH
22753: LD_INT 3
22755: EQUAL
22756: OR
22757: IFFALSE 22763
// exit ;
22759: POP
22760: POP
22761: GO 23315
// if not tmp then
22763: LD_VAR 0 13
22767: NOT
22768: IFFALSE 22772
// continue ;
22770: GO 22624
// result := true ;
22772: LD_ADDR_VAR 0 8
22776: PUSH
22777: LD_INT 1
22779: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22780: LD_VAR 0 6
22784: IFFALSE 22801
22786: PUSH
22787: LD_VAR 0 13
22791: PPUSH
22792: CALL_OW 247
22796: PUSH
22797: LD_INT 2
22799: EQUAL
22800: AND
22801: IFFALSE 22818
22803: PUSH
22804: LD_VAR 0 13
22808: PPUSH
22809: CALL_OW 263
22813: PUSH
22814: LD_INT 1
22816: EQUAL
22817: AND
22818: IFFALSE 22982
// begin if IsDrivenBy ( tmp ) then
22820: LD_VAR 0 13
22824: PPUSH
22825: CALL_OW 311
22829: IFFALSE 22833
// continue ;
22831: GO 22624
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22833: LD_VAR 0 6
22837: PPUSH
22838: LD_INT 3
22840: PUSH
22841: LD_INT 60
22843: PUSH
22844: EMPTY
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 55
22856: PUSH
22857: EMPTY
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PPUSH
22868: CALL_OW 72
22872: IFFALSE 22980
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22874: LD_ADDR_VAR 0 18
22878: PUSH
22879: LD_VAR 0 6
22883: PPUSH
22884: LD_INT 3
22886: PUSH
22887: LD_INT 60
22889: PUSH
22890: EMPTY
22891: LIST
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 3
22899: PUSH
22900: LD_INT 55
22902: PUSH
22903: EMPTY
22904: LIST
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PPUSH
22914: CALL_OW 72
22918: PUSH
22919: LD_INT 1
22921: ARRAY
22922: ST_TO_ADDR
// if IsInUnit ( driver ) then
22923: LD_VAR 0 18
22927: PPUSH
22928: CALL_OW 310
22932: IFFALSE 22943
// ComExit ( driver ) ;
22934: LD_VAR 0 18
22938: PPUSH
22939: CALL 48586 0 1
// AddComEnterUnit ( driver , tmp ) ;
22943: LD_VAR 0 18
22947: PPUSH
22948: LD_VAR 0 13
22952: PPUSH
22953: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22957: LD_VAR 0 18
22961: PPUSH
22962: LD_VAR 0 7
22966: PPUSH
22967: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22971: LD_VAR 0 18
22975: PPUSH
22976: CALL_OW 181
// end ; continue ;
22980: GO 22624
// end ; if not cleaners or not tmp in cleaners then
22982: LD_VAR 0 6
22986: NOT
22987: IFTRUE 23002
22989: PUSH
22990: LD_VAR 0 13
22994: PUSH
22995: LD_VAR 0 6
22999: IN
23000: NOT
23001: OR
23002: IFFALSE 23311
// begin if dep then
23004: LD_VAR 0 17
23008: IFFALSE 23144
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23010: LD_ADDR_VAR 0 16
23014: PUSH
23015: LD_VAR 0 17
23019: PUSH
23020: LD_INT 1
23022: ARRAY
23023: PPUSH
23024: CALL_OW 250
23028: PPUSH
23029: LD_VAR 0 17
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: PPUSH
23038: CALL_OW 254
23042: PPUSH
23043: LD_INT 5
23045: PPUSH
23046: CALL_OW 272
23050: PUSH
23051: LD_VAR 0 17
23055: PUSH
23056: LD_INT 1
23058: ARRAY
23059: PPUSH
23060: CALL_OW 251
23064: PPUSH
23065: LD_VAR 0 17
23069: PUSH
23070: LD_INT 1
23072: ARRAY
23073: PPUSH
23074: CALL_OW 254
23078: PPUSH
23079: LD_INT 5
23081: PPUSH
23082: CALL_OW 273
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23091: LD_VAR 0 16
23095: PUSH
23096: LD_INT 1
23098: ARRAY
23099: PPUSH
23100: LD_VAR 0 16
23104: PUSH
23105: LD_INT 2
23107: ARRAY
23108: PPUSH
23109: CALL_OW 488
23113: IFFALSE 23144
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23115: LD_VAR 0 13
23119: PPUSH
23120: LD_VAR 0 16
23124: PUSH
23125: LD_INT 1
23127: ARRAY
23128: PPUSH
23129: LD_VAR 0 16
23133: PUSH
23134: LD_INT 2
23136: ARRAY
23137: PPUSH
23138: CALL_OW 111
// continue ;
23142: GO 22624
// end ; end ; r := GetDir ( tmp ) ;
23144: LD_ADDR_VAR 0 15
23148: PUSH
23149: LD_VAR 0 13
23153: PPUSH
23154: CALL_OW 254
23158: ST_TO_ADDR
// if r = 5 then
23159: LD_VAR 0 15
23163: PUSH
23164: LD_INT 5
23166: EQUAL
23167: IFFALSE 23177
// r := 0 ;
23169: LD_ADDR_VAR 0 15
23173: PUSH
23174: LD_INT 0
23176: ST_TO_ADDR
// for j = r to 5 do
23177: LD_ADDR_VAR 0 10
23181: PUSH
23182: DOUBLE
23183: LD_VAR 0 15
23187: DEC
23188: ST_TO_ADDR
23189: LD_INT 5
23191: PUSH
23192: FOR_TO
23193: IFFALSE 23309
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23195: LD_ADDR_VAR 0 11
23199: PUSH
23200: LD_VAR 0 13
23204: PPUSH
23205: CALL_OW 250
23209: PPUSH
23210: LD_VAR 0 10
23214: PPUSH
23215: LD_INT 2
23217: PPUSH
23218: CALL_OW 272
23222: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23223: LD_ADDR_VAR 0 12
23227: PUSH
23228: LD_VAR 0 13
23232: PPUSH
23233: CALL_OW 251
23237: PPUSH
23238: LD_VAR 0 10
23242: PPUSH
23243: LD_INT 2
23245: PPUSH
23246: CALL_OW 273
23250: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23251: LD_VAR 0 11
23255: PPUSH
23256: LD_VAR 0 12
23260: PPUSH
23261: CALL_OW 488
23265: IFFALSE 23284
23267: PUSH
23268: LD_VAR 0 11
23272: PPUSH
23273: LD_VAR 0 12
23277: PPUSH
23278: CALL_OW 428
23282: NOT
23283: AND
23284: IFFALSE 23307
// begin ComMoveXY ( tmp , _x , _y ) ;
23286: LD_VAR 0 13
23290: PPUSH
23291: LD_VAR 0 11
23295: PPUSH
23296: LD_VAR 0 12
23300: PPUSH
23301: CALL_OW 111
// break ;
23305: GO 23309
// end ; end ;
23307: GO 23192
23309: POP
23310: POP
// end ; end ;
23311: GO 22624
23313: POP
23314: POP
// end ;
23315: LD_VAR 0 8
23319: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23320: LD_INT 0
23322: PPUSH
// result := true ;
23323: LD_ADDR_VAR 0 3
23327: PUSH
23328: LD_INT 1
23330: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23331: LD_VAR 0 2
23335: PUSH
23336: LD_INT 24
23338: DOUBLE
23339: EQUAL
23340: IFTRUE 23350
23342: LD_INT 33
23344: DOUBLE
23345: EQUAL
23346: IFTRUE 23350
23348: GO 23375
23350: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23351: LD_ADDR_VAR 0 3
23355: PUSH
23356: LD_INT 32
23358: PPUSH
23359: LD_VAR 0 1
23363: PPUSH
23364: CALL_OW 321
23368: PUSH
23369: LD_INT 2
23371: EQUAL
23372: ST_TO_ADDR
23373: GO 23691
23375: LD_INT 20
23377: DOUBLE
23378: EQUAL
23379: IFTRUE 23383
23381: GO 23408
23383: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23384: LD_ADDR_VAR 0 3
23388: PUSH
23389: LD_INT 6
23391: PPUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL_OW 321
23401: PUSH
23402: LD_INT 2
23404: EQUAL
23405: ST_TO_ADDR
23406: GO 23691
23408: LD_INT 22
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23422
23414: LD_INT 36
23416: DOUBLE
23417: EQUAL
23418: IFTRUE 23422
23420: GO 23447
23422: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23423: LD_ADDR_VAR 0 3
23427: PUSH
23428: LD_INT 15
23430: PPUSH
23431: LD_VAR 0 1
23435: PPUSH
23436: CALL_OW 321
23440: PUSH
23441: LD_INT 2
23443: EQUAL
23444: ST_TO_ADDR
23445: GO 23691
23447: LD_INT 30
23449: DOUBLE
23450: EQUAL
23451: IFTRUE 23455
23453: GO 23480
23455: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23456: LD_ADDR_VAR 0 3
23460: PUSH
23461: LD_INT 20
23463: PPUSH
23464: LD_VAR 0 1
23468: PPUSH
23469: CALL_OW 321
23473: PUSH
23474: LD_INT 2
23476: EQUAL
23477: ST_TO_ADDR
23478: GO 23691
23480: LD_INT 28
23482: DOUBLE
23483: EQUAL
23484: IFTRUE 23494
23486: LD_INT 21
23488: DOUBLE
23489: EQUAL
23490: IFTRUE 23494
23492: GO 23519
23494: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23495: LD_ADDR_VAR 0 3
23499: PUSH
23500: LD_INT 21
23502: PPUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 321
23512: PUSH
23513: LD_INT 2
23515: EQUAL
23516: ST_TO_ADDR
23517: GO 23691
23519: LD_INT 16
23521: DOUBLE
23522: EQUAL
23523: IFTRUE 23527
23525: GO 23552
23527: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23528: LD_ADDR_VAR 0 3
23532: PUSH
23533: LD_INT 84
23535: PPUSH
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL_OW 321
23545: PUSH
23546: LD_INT 2
23548: EQUAL
23549: ST_TO_ADDR
23550: GO 23691
23552: LD_INT 19
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23566
23558: LD_INT 23
23560: DOUBLE
23561: EQUAL
23562: IFTRUE 23566
23564: GO 23591
23566: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23567: LD_ADDR_VAR 0 3
23571: PUSH
23572: LD_INT 83
23574: PPUSH
23575: LD_VAR 0 1
23579: PPUSH
23580: CALL_OW 321
23584: PUSH
23585: LD_INT 2
23587: EQUAL
23588: ST_TO_ADDR
23589: GO 23691
23591: LD_INT 17
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23624
23599: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23600: LD_ADDR_VAR 0 3
23604: PUSH
23605: LD_INT 39
23607: PPUSH
23608: LD_VAR 0 1
23612: PPUSH
23613: CALL_OW 321
23617: PUSH
23618: LD_INT 2
23620: EQUAL
23621: ST_TO_ADDR
23622: GO 23691
23624: LD_INT 18
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23632
23630: GO 23657
23632: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23633: LD_ADDR_VAR 0 3
23637: PUSH
23638: LD_INT 40
23640: PPUSH
23641: LD_VAR 0 1
23645: PPUSH
23646: CALL_OW 321
23650: PUSH
23651: LD_INT 2
23653: EQUAL
23654: ST_TO_ADDR
23655: GO 23691
23657: LD_INT 27
23659: DOUBLE
23660: EQUAL
23661: IFTRUE 23665
23663: GO 23690
23665: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23666: LD_ADDR_VAR 0 3
23670: PUSH
23671: LD_INT 35
23673: PPUSH
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 321
23683: PUSH
23684: LD_INT 2
23686: EQUAL
23687: ST_TO_ADDR
23688: GO 23691
23690: POP
// end ;
23691: LD_VAR 0 3
23695: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23696: LD_INT 0
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
// result := false ;
23709: LD_ADDR_VAR 0 6
23713: PUSH
23714: LD_INT 0
23716: ST_TO_ADDR
// if btype = b_depot then
23717: LD_VAR 0 2
23721: PUSH
23722: LD_INT 0
23724: EQUAL
23725: IFFALSE 23737
// begin result := true ;
23727: LD_ADDR_VAR 0 6
23731: PUSH
23732: LD_INT 1
23734: ST_TO_ADDR
// exit ;
23735: GO 24591
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23737: LD_VAR 0 1
23741: NOT
23742: IFTRUE 23767
23744: PUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 266
23754: PUSH
23755: LD_INT 0
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: IN
23765: NOT
23766: OR
23767: IFTRUE 23776
23769: PUSH
23770: LD_VAR 0 2
23774: NOT
23775: OR
23776: IFTRUE 23812
23778: PUSH
23779: LD_VAR 0 5
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: LD_INT 3
23795: PUSH
23796: LD_INT 4
23798: PUSH
23799: LD_INT 5
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: IN
23810: NOT
23811: OR
23812: IFTRUE 23831
23814: PUSH
23815: LD_VAR 0 3
23819: PPUSH
23820: LD_VAR 0 4
23824: PPUSH
23825: CALL_OW 488
23829: NOT
23830: OR
23831: IFFALSE 23835
// exit ;
23833: GO 24591
// side := GetSide ( depot ) ;
23835: LD_ADDR_VAR 0 9
23839: PUSH
23840: LD_VAR 0 1
23844: PPUSH
23845: CALL_OW 255
23849: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23850: LD_VAR 0 9
23854: PPUSH
23855: LD_VAR 0 2
23859: PPUSH
23860: CALL 23320 0 2
23864: NOT
23865: IFFALSE 23869
// exit ;
23867: GO 24591
// pom := GetBase ( depot ) ;
23869: LD_ADDR_VAR 0 10
23873: PUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 274
23883: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23884: LD_ADDR_VAR 0 11
23888: PUSH
23889: LD_VAR 0 2
23893: PPUSH
23894: LD_VAR 0 1
23898: PPUSH
23899: CALL_OW 248
23903: PPUSH
23904: CALL_OW 450
23908: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23909: LD_VAR 0 10
23913: PPUSH
23914: LD_INT 1
23916: PPUSH
23917: CALL_OW 275
23921: PUSH
23922: LD_VAR 0 11
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: GREATEREQUAL
23931: IFFALSE 23957
23933: PUSH
23934: LD_VAR 0 10
23938: PPUSH
23939: LD_INT 2
23941: PPUSH
23942: CALL_OW 275
23946: PUSH
23947: LD_VAR 0 11
23951: PUSH
23952: LD_INT 2
23954: ARRAY
23955: GREATEREQUAL
23956: AND
23957: IFFALSE 23983
23959: PUSH
23960: LD_VAR 0 10
23964: PPUSH
23965: LD_INT 3
23967: PPUSH
23968: CALL_OW 275
23972: PUSH
23973: LD_VAR 0 11
23977: PUSH
23978: LD_INT 3
23980: ARRAY
23981: GREATEREQUAL
23982: AND
23983: NOT
23984: IFFALSE 23988
// exit ;
23986: GO 24591
// if GetBType ( depot ) = b_depot then
23988: LD_VAR 0 1
23992: PPUSH
23993: CALL_OW 266
23997: PUSH
23998: LD_INT 0
24000: EQUAL
24001: IFFALSE 24013
// dist := 28 else
24003: LD_ADDR_VAR 0 14
24007: PUSH
24008: LD_INT 28
24010: ST_TO_ADDR
24011: GO 24021
// dist := 36 ;
24013: LD_ADDR_VAR 0 14
24017: PUSH
24018: LD_INT 36
24020: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24021: LD_VAR 0 1
24025: PPUSH
24026: LD_VAR 0 3
24030: PPUSH
24031: LD_VAR 0 4
24035: PPUSH
24036: CALL_OW 297
24040: PUSH
24041: LD_VAR 0 14
24045: GREATER
24046: IFFALSE 24050
// exit ;
24048: GO 24591
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24050: LD_ADDR_VAR 0 12
24054: PUSH
24055: LD_VAR 0 2
24059: PPUSH
24060: LD_VAR 0 3
24064: PPUSH
24065: LD_VAR 0 4
24069: PPUSH
24070: LD_VAR 0 5
24074: PPUSH
24075: LD_VAR 0 1
24079: PPUSH
24080: CALL_OW 248
24084: PPUSH
24085: LD_INT 0
24087: PPUSH
24088: CALL 24596 0 6
24092: ST_TO_ADDR
// if not hexes then
24093: LD_VAR 0 12
24097: NOT
24098: IFFALSE 24102
// exit ;
24100: GO 24591
// hex := GetHexInfo ( x , y ) ;
24102: LD_ADDR_VAR 0 15
24106: PUSH
24107: LD_VAR 0 3
24111: PPUSH
24112: LD_VAR 0 4
24116: PPUSH
24117: CALL_OW 546
24121: ST_TO_ADDR
// if hex [ 1 ] then
24122: LD_VAR 0 15
24126: PUSH
24127: LD_INT 1
24129: ARRAY
24130: IFFALSE 24134
// exit ;
24132: GO 24591
// height := hex [ 2 ] ;
24134: LD_ADDR_VAR 0 13
24138: PUSH
24139: LD_VAR 0 15
24143: PUSH
24144: LD_INT 2
24146: ARRAY
24147: ST_TO_ADDR
// for i = 1 to hexes do
24148: LD_ADDR_VAR 0 7
24152: PUSH
24153: DOUBLE
24154: LD_INT 1
24156: DEC
24157: ST_TO_ADDR
24158: LD_VAR 0 12
24162: PUSH
24163: FOR_TO
24164: IFFALSE 24508
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24166: LD_VAR 0 12
24170: PUSH
24171: LD_VAR 0 7
24175: ARRAY
24176: PUSH
24177: LD_INT 1
24179: ARRAY
24180: PPUSH
24181: LD_VAR 0 12
24185: PUSH
24186: LD_VAR 0 7
24190: ARRAY
24191: PUSH
24192: LD_INT 2
24194: ARRAY
24195: PPUSH
24196: CALL_OW 488
24200: NOT
24201: IFTRUE 24243
24203: PUSH
24204: LD_VAR 0 12
24208: PUSH
24209: LD_VAR 0 7
24213: ARRAY
24214: PUSH
24215: LD_INT 1
24217: ARRAY
24218: PPUSH
24219: LD_VAR 0 12
24223: PUSH
24224: LD_VAR 0 7
24228: ARRAY
24229: PUSH
24230: LD_INT 2
24232: ARRAY
24233: PPUSH
24234: CALL_OW 428
24238: PUSH
24239: LD_INT 0
24241: GREATER
24242: OR
24243: IFTRUE 24281
24245: PUSH
24246: LD_VAR 0 12
24250: PUSH
24251: LD_VAR 0 7
24255: ARRAY
24256: PUSH
24257: LD_INT 1
24259: ARRAY
24260: PPUSH
24261: LD_VAR 0 12
24265: PUSH
24266: LD_VAR 0 7
24270: ARRAY
24271: PUSH
24272: LD_INT 2
24274: ARRAY
24275: PPUSH
24276: CALL_OW 351
24280: OR
24281: IFFALSE 24287
// exit ;
24283: POP
24284: POP
24285: GO 24591
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24287: LD_ADDR_VAR 0 8
24291: PUSH
24292: LD_VAR 0 12
24296: PUSH
24297: LD_VAR 0 7
24301: ARRAY
24302: PUSH
24303: LD_INT 1
24305: ARRAY
24306: PPUSH
24307: LD_VAR 0 12
24311: PUSH
24312: LD_VAR 0 7
24316: ARRAY
24317: PUSH
24318: LD_INT 2
24320: ARRAY
24321: PPUSH
24322: CALL_OW 546
24326: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24327: LD_VAR 0 8
24331: PUSH
24332: LD_INT 1
24334: ARRAY
24335: IFTRUE 24357
24337: PUSH
24338: LD_VAR 0 8
24342: PUSH
24343: LD_INT 2
24345: ARRAY
24346: PUSH
24347: LD_VAR 0 13
24351: PUSH
24352: LD_INT 2
24354: PLUS
24355: GREATER
24356: OR
24357: IFTRUE 24379
24359: PUSH
24360: LD_VAR 0 8
24364: PUSH
24365: LD_INT 2
24367: ARRAY
24368: PUSH
24369: LD_VAR 0 13
24373: PUSH
24374: LD_INT 2
24376: MINUS
24377: LESS
24378: OR
24379: IFTRUE 24447
24381: PUSH
24382: LD_VAR 0 8
24386: PUSH
24387: LD_INT 3
24389: ARRAY
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: LD_INT 8
24396: PUSH
24397: LD_INT 9
24399: PUSH
24400: LD_INT 10
24402: PUSH
24403: LD_INT 11
24405: PUSH
24406: LD_INT 12
24408: PUSH
24409: LD_INT 13
24411: PUSH
24412: LD_INT 16
24414: PUSH
24415: LD_INT 17
24417: PUSH
24418: LD_INT 18
24420: PUSH
24421: LD_INT 19
24423: PUSH
24424: LD_INT 20
24426: PUSH
24427: LD_INT 21
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: IN
24445: NOT
24446: OR
24447: IFTRUE 24460
24449: PUSH
24450: LD_VAR 0 8
24454: PUSH
24455: LD_INT 5
24457: ARRAY
24458: NOT
24459: OR
24460: IFTRUE 24500
24462: PUSH
24463: LD_VAR 0 8
24467: PUSH
24468: LD_INT 6
24470: ARRAY
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: LD_INT 2
24477: PUSH
24478: LD_INT 7
24480: PUSH
24481: LD_INT 9
24483: PUSH
24484: LD_INT 10
24486: PUSH
24487: LD_INT 11
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: IN
24498: NOT
24499: OR
24500: IFFALSE 24506
// exit ;
24502: POP
24503: POP
24504: GO 24591
// end ;
24506: GO 24163
24508: POP
24509: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24510: LD_VAR 0 9
24514: PPUSH
24515: LD_VAR 0 3
24519: PPUSH
24520: LD_VAR 0 4
24524: PPUSH
24525: LD_INT 20
24527: PPUSH
24528: CALL 16410 0 4
24532: PUSH
24533: LD_INT 4
24535: ARRAY
24536: IFFALSE 24540
// exit ;
24538: GO 24591
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24540: LD_VAR 0 2
24544: PUSH
24545: LD_INT 29
24547: PUSH
24548: LD_INT 30
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: IN
24555: IFFALSE 24579
24557: PUSH
24558: LD_VAR 0 3
24562: PPUSH
24563: LD_VAR 0 4
24567: PPUSH
24568: LD_VAR 0 9
24572: PPUSH
24573: CALL_OW 440
24577: NOT
24578: AND
24579: IFFALSE 24583
// exit ;
24581: GO 24591
// result := true ;
24583: LD_ADDR_VAR 0 6
24587: PUSH
24588: LD_INT 1
24590: ST_TO_ADDR
// end ;
24591: LD_VAR 0 6
24595: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24596: LD_INT 0
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
24614: PPUSH
24615: PPUSH
24616: PPUSH
24617: PPUSH
24618: PPUSH
24619: PPUSH
24620: PPUSH
24621: PPUSH
24622: PPUSH
24623: PPUSH
24624: PPUSH
24625: PPUSH
24626: PPUSH
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
24631: PPUSH
24632: PPUSH
24633: PPUSH
24634: PPUSH
24635: PPUSH
24636: PPUSH
24637: PPUSH
24638: PPUSH
24639: PPUSH
24640: PPUSH
24641: PPUSH
24642: PPUSH
24643: PPUSH
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
24650: PPUSH
24651: PPUSH
24652: PPUSH
24653: PPUSH
24654: PPUSH
24655: PPUSH
// result = [ ] ;
24656: LD_ADDR_VAR 0 7
24660: PUSH
24661: EMPTY
24662: ST_TO_ADDR
// temp_list = [ ] ;
24663: LD_ADDR_VAR 0 9
24667: PUSH
24668: EMPTY
24669: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24670: LD_VAR 0 4
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: LD_INT 2
24683: PUSH
24684: LD_INT 3
24686: PUSH
24687: LD_INT 4
24689: PUSH
24690: LD_INT 5
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: IN
24701: NOT
24702: IFTRUE 24745
24704: PUSH
24705: LD_VAR 0 1
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: IN
24720: IFFALSE 24744
24722: PUSH
24723: LD_VAR 0 5
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: LD_INT 2
24733: PUSH
24734: LD_INT 3
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: LIST
24741: IN
24742: NOT
24743: AND
24744: OR
24745: IFFALSE 24749
// exit ;
24747: GO 43148
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24749: LD_VAR 0 1
24753: PUSH
24754: LD_INT 6
24756: PUSH
24757: LD_INT 7
24759: PUSH
24760: LD_INT 8
24762: PUSH
24763: LD_INT 13
24765: PUSH
24766: LD_INT 12
24768: PUSH
24769: LD_INT 15
24771: PUSH
24772: LD_INT 11
24774: PUSH
24775: LD_INT 14
24777: PUSH
24778: LD_INT 10
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: IN
24792: IFFALSE 24802
// btype = b_lab ;
24794: LD_ADDR_VAR 0 1
24798: PUSH
24799: LD_INT 6
24801: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24802: LD_VAR 0 6
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: LIST
24820: IN
24821: NOT
24822: IFTRUE 24890
24824: PUSH
24825: LD_VAR 0 1
24829: PUSH
24830: LD_INT 0
24832: PUSH
24833: LD_INT 1
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: LD_INT 3
24841: PUSH
24842: LD_INT 6
24844: PUSH
24845: LD_INT 36
24847: PUSH
24848: LD_INT 4
24850: PUSH
24851: LD_INT 5
24853: PUSH
24854: LD_INT 31
24856: PUSH
24857: LD_INT 32
24859: PUSH
24860: LD_INT 33
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: IN
24876: NOT
24877: IFFALSE 24889
24879: PUSH
24880: LD_VAR 0 6
24884: PUSH
24885: LD_INT 1
24887: EQUAL
24888: AND
24889: OR
24890: IFTRUE 24922
24892: PUSH
24893: LD_VAR 0 1
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 3
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: IN
24908: NOT
24909: IFFALSE 24921
24911: PUSH
24912: LD_VAR 0 6
24916: PUSH
24917: LD_INT 2
24919: EQUAL
24920: AND
24921: OR
24922: IFFALSE 24932
// mode = 0 ;
24924: LD_ADDR_VAR 0 6
24928: PUSH
24929: LD_INT 0
24931: ST_TO_ADDR
// case mode of 0 :
24932: LD_VAR 0 6
24936: PUSH
24937: LD_INT 0
24939: DOUBLE
24940: EQUAL
24941: IFTRUE 24945
24943: GO 36398
24945: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24946: LD_ADDR_VAR 0 11
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 0
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: LD_INT 2
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: LD_INT 2
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 2
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: LD_INT 3
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25139: LD_ADDR_VAR 0 12
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 1
25167: PUSH
25168: LD_INT 0
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 1
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: LD_INT 0
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 2
25262: NEG
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 2
25273: NEG
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: NEG
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 3
25296: NEG
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 3
25307: NEG
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25335: LD_ADDR_VAR 0 13
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: LD_INT 1
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: LD_INT 2
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 2
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 2
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 2
25470: NEG
25471: PUSH
25472: LD_INT 2
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: LD_INT 3
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 3
25494: NEG
25495: PUSH
25496: LD_INT 2
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 3
25506: NEG
25507: PUSH
25508: LD_INT 3
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25534: LD_ADDR_VAR 0 14
25538: PUSH
25539: LD_INT 0
25541: PUSH
25542: LD_INT 0
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: LD_INT 1
25554: NEG
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: LD_INT 0
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 0
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: NEG
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 1
25603: NEG
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: NEG
25616: PUSH
25617: LD_INT 2
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: LD_INT 2
25630: NEG
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: LD_INT 3
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 3
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25730: LD_ADDR_VAR 0 15
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: LD_INT 0
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: NEG
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 1
25799: NEG
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 1
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 1
25842: NEG
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 2
25853: NEG
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 2
25864: NEG
25865: PUSH
25866: LD_INT 1
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: LD_INT 1
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 3
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 3
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25923: LD_ADDR_VAR 0 16
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: NEG
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: LD_INT 2
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: LD_INT 2
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 2
26046: NEG
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: LD_INT 2
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: LD_INT 2
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 3
26080: PUSH
26081: LD_INT 3
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 2
26090: PUSH
26091: LD_INT 3
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26116: LD_ADDR_VAR 0 17
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 0
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: LD_INT 2
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: LD_INT 2
26212: NEG
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: NEG
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26346: LD_ADDR_VAR 0 18
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 1
26404: NEG
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: LD_INT 2
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 2
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 2
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: NEG
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: NEG
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26576: LD_ADDR_VAR 0 19
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: NEG
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: LD_INT 2
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 2
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 2
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 2
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: LD_INT 2
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: NEG
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26806: LD_ADDR_VAR 0 20
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: NEG
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: LD_INT 1
26879: NEG
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: LD_INT 2
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 2
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 2
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: LD_INT 2
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 2
26982: NEG
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 2
26993: NEG
26994: PUSH
26995: LD_INT 1
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: NEG
27006: PUSH
27007: LD_INT 2
27009: NEG
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27036: LD_ADDR_VAR 0 21
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 1
27105: NEG
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 2
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: LD_INT 2
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 2
27212: NEG
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 2
27223: NEG
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: LD_INT 2
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27266: LD_ADDR_VAR 0 22
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 0
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: LD_INT 2
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 2
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 2
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: LD_INT 2
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: LD_INT 2
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: LD_INT 2
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 2
27442: NEG
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 2
27453: NEG
27454: PUSH
27455: LD_INT 1
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 2
27465: NEG
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27496: LD_ADDR_VAR 0 23
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: NEG
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 2
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: LD_INT 1
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 2
27707: NEG
27708: PUSH
27709: LD_INT 3
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: NEG
27720: PUSH
27721: LD_INT 3
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: PUSH
27732: LD_INT 2
27734: NEG
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: LD_INT 1
27745: NEG
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27776: LD_ADDR_VAR 0 24
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: LD_INT 0
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: LD_INT 2
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: LD_INT 2
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: LD_INT 2
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 2
27952: NEG
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 2
27963: NEG
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: LD_INT 2
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: LD_INT 2
27990: NEG
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 3
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 3
28019: PUSH
28020: LD_INT 2
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28052: LD_ADDR_VAR 0 25
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: LD_INT 1
28072: NEG
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 1
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: NEG
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: LD_INT 2
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: LD_INT 2
28148: NEG
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: LD_INT 1
28156: PUSH
28157: LD_INT 1
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 2
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 2
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 2
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: LD_INT 2
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 1
28217: NEG
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 2
28228: NEG
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: LD_INT 2
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 3
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 3
28273: PUSH
28274: LD_INT 2
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: LD_INT 3
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 3
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28326: LD_ADDR_VAR 0 26
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 0
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: NEG
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 2
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 2
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 1
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 2
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 2
28502: NEG
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: NEG
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 2
28525: NEG
28526: PUSH
28527: LD_INT 2
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 2
28537: PUSH
28538: LD_INT 3
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: LD_INT 3
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: LD_INT 2
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28602: LD_ADDR_VAR 0 27
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: LD_INT 2
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: LD_INT 2
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 2
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: NEG
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: NEG
28790: PUSH
28791: LD_INT 1
28793: NEG
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 2
28824: NEG
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 3
28835: NEG
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 3
28847: NEG
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28882: LD_ADDR_VAR 0 28
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: LD_INT 1
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: LD_INT 2
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: LD_INT 2
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 2
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 2
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: LD_INT 2
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: LD_INT 2
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: LD_INT 2
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 1
29047: NEG
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 2
29058: NEG
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 2
29069: NEG
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: LD_INT 2
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: LD_INT 3
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: LD_INT 3
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 3
29117: NEG
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 3
29129: NEG
29130: PUSH
29131: LD_INT 2
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29164: LD_ADDR_VAR 0 29
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: LD_INT 2
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: LD_INT 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: NEG
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: NEG
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: NEG
29355: PUSH
29356: LD_INT 3
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 2
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 3
29408: NEG
29409: PUSH
29410: LD_INT 2
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29443: LD_ADDR_VAR 0 30
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: LD_INT 2
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: LD_INT 2
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: LD_INT 2
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 2
29609: NEG
29610: PUSH
29611: LD_INT 0
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: NEG
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 1
29632: NEG
29633: PUSH
29634: LD_INT 3
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 3
29655: PUSH
29656: LD_INT 2
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 2
29665: PUSH
29666: LD_INT 3
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 3
29686: NEG
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29721: LD_ADDR_VAR 0 31
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: LD_INT 1
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: NEG
29791: PUSH
29792: LD_INT 1
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 2
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 2
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: LD_INT 2
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: LD_INT 2
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: NEG
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: LD_INT 2
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 2
29910: NEG
29911: PUSH
29912: LD_INT 3
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 3
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: LD_INT 3
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 3
29964: NEG
29965: PUSH
29966: LD_INT 2
29968: NEG
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29999: LD_ADDR_VAR 0 32
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 1
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: LD_INT 2
30084: NEG
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: LD_INT 2
30095: NEG
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 2
30124: PUSH
30125: LD_INT 2
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 2
30165: NEG
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: NEG
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 3
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: LD_INT 2
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 3
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 2
30221: PUSH
30222: LD_INT 3
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: NEG
30232: PUSH
30233: LD_INT 1
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 3
30242: NEG
30243: PUSH
30244: LD_INT 1
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30277: LD_ADDR_VAR 0 33
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: NEG
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: LD_INT 2
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: NEG
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: NEG
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 2
30467: NEG
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 2
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 3
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 3
30521: NEG
30522: PUSH
30523: LD_INT 2
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30556: LD_ADDR_VAR 0 34
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: LD_INT 1
30629: NEG
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: LD_INT 2
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 2
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: LD_INT 1
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 2
30712: NEG
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 2
30723: NEG
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: NEG
30736: PUSH
30737: LD_INT 2
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: NEG
30748: PUSH
30749: LD_INT 3
30751: NEG
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: LD_INT 2
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: LD_INT 3
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: NEG
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30836: LD_ADDR_VAR 0 35
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: LD_INT 0
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 1
30905: NEG
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 2
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30948: LD_ADDR_VAR 0 36
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: NEG
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: LD_INT 2
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31060: LD_ADDR_VAR 0 37
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: LD_INT 1
31080: NEG
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 1
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: LD_INT 0
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: LD_INT 1
31133: NEG
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31172: LD_ADDR_VAR 0 38
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 0
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: NEG
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31284: LD_ADDR_VAR 0 39
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 0
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: LD_INT 2
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31396: LD_ADDR_VAR 0 40
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: NEG
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31508: LD_ADDR_VAR 0 41
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: LD_INT 1
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 2
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 2
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: LD_INT 2
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: NEG
31687: PUSH
31688: LD_INT 2
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: LD_INT 3
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 3
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 3
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 3
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 3
31751: PUSH
31752: LD_INT 3
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 2
31771: NEG
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 3
31782: NEG
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 3
31805: NEG
31806: PUSH
31807: LD_INT 2
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 3
31817: NEG
31818: PUSH
31819: LD_INT 3
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31858: LD_ADDR_VAR 0 42
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: LD_INT 2
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 3
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: LD_INT 3
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 3
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 3
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 2
32114: PUSH
32115: LD_INT 3
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: NEG
32145: PUSH
32146: LD_INT 2
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 3
32155: NEG
32156: PUSH
32157: LD_INT 2
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: LD_INT 3
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32208: LD_ADDR_VAR 0 43
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: LD_INT 1
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 2
32385: NEG
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 3
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: LD_INT 3
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: LD_INT 1
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 3
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 3
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: PUSH
32463: LD_INT 3
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: NEG
32483: PUSH
32484: LD_INT 2
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: NEG
32494: PUSH
32495: LD_INT 1
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 3
32504: NEG
32505: PUSH
32506: LD_INT 0
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: NEG
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32556: LD_ADDR_VAR 0 44
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: LD_INT 1
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: LD_INT 1
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 1
32637: NEG
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 2
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: LD_INT 3
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 3
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 3
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 3
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: NEG
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 3
32830: NEG
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: NEG
32854: PUSH
32855: LD_INT 2
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 3
32865: NEG
32866: PUSH
32867: LD_INT 3
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32906: LD_ADDR_VAR 0 45
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: LD_INT 1
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: LD_INT 3
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: LD_INT 3
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 3
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 3
33142: PUSH
33143: LD_INT 2
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 3
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: LD_INT 3
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 3
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: NEG
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: LD_INT 2
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 3
33215: NEG
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33256: LD_ADDR_VAR 0 46
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 2
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: LD_INT 2
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 2
33433: NEG
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: LD_INT 3
33449: NEG
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: LD_INT 3
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: LD_INT 2
33471: NEG
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 3
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 3
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: LD_INT 3
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: LD_INT 3
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: LD_INT 2
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 3
33552: NEG
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 3
33563: NEG
33564: PUSH
33565: LD_INT 1
33567: NEG
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33604: LD_ADDR_VAR 0 47
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: LD_INT 1
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 1
33673: NEG
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: LD_INT 2
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: LD_INT 2
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 2
33719: NEG
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: NEG
33732: PUSH
33733: LD_INT 2
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33755: LD_ADDR_VAR 0 48
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 0
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 2
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: LD_INT 2
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33902: LD_ADDR_VAR 0 49
33906: PUSH
33907: LD_INT 0
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: LD_INT 1
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 1
33960: NEG
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 1
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: LD_INT 1
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: LD_INT 2
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: LD_INT 2
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34046: LD_ADDR_VAR 0 50
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: LD_INT 2
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 1
34167: NEG
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34190: LD_ADDR_VAR 0 51
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 1
34248: NEG
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: LD_INT 2
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 2
34302: NEG
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 2
34313: NEG
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34337: LD_ADDR_VAR 0 52
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: NEG
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 2
34452: NEG
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: LD_INT 2
34468: NEG
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34488: LD_ADDR_VAR 0 53
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: LD_INT 2
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 2
34664: NEG
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: NEG
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34718: LD_ADDR_VAR 0 54
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 1
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: LD_INT 2
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 2
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 2
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: LD_INT 1
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 2
34894: NEG
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: NEG
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: LD_INT 2
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34948: LD_ADDR_VAR 0 55
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 2
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 2
35124: NEG
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: LD_INT 2
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35178: LD_ADDR_VAR 0 56
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 1
35247: NEG
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 2
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 2
35354: NEG
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 2
35377: NEG
35378: PUSH
35379: LD_INT 2
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35408: LD_ADDR_VAR 0 57
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: LD_INT 2
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 2
35595: NEG
35596: PUSH
35597: LD_INT 1
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: LD_INT 2
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35638: LD_ADDR_VAR 0 58
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 0
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: LD_INT 2
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 2
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: LD_INT 2
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: LD_INT 2
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 2
35814: NEG
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: NEG
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35868: LD_ADDR_VAR 0 59
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35956: LD_ADDR_VAR 0 60
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36044: LD_ADDR_VAR 0 61
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: LD_INT 1
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: NEG
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36132: LD_ADDR_VAR 0 62
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: LD_INT 1
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36220: LD_ADDR_VAR 0 63
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36308: LD_ADDR_VAR 0 64
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: ST_TO_ADDR
// end ; 1 :
36396: GO 42293
36398: LD_INT 1
36400: DOUBLE
36401: EQUAL
36402: IFTRUE 36406
36404: GO 39029
36406: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36407: LD_ADDR_VAR 0 11
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: LD_INT 3
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: LD_INT 3
36429: NEG
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36451: LD_ADDR_VAR 0 12
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 3
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 3
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: LIST
36491: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36492: LD_ADDR_VAR 0 13
36496: PUSH
36497: LD_INT 3
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 3
36509: PUSH
36510: LD_INT 3
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: PUSH
36520: LD_INT 3
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36532: LD_ADDR_VAR 0 14
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 3
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: LIST
36572: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36573: LD_ADDR_VAR 0 15
36577: PUSH
36578: LD_INT 2
36580: NEG
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 3
36591: NEG
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 3
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: LIST
36616: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36617: LD_ADDR_VAR 0 16
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: LD_INT 3
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 3
36636: NEG
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 3
36648: NEG
36649: PUSH
36650: LD_INT 3
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36663: LD_ADDR_VAR 0 17
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: LD_INT 3
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: LD_INT 3
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36707: LD_ADDR_VAR 0 18
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 3
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 3
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36748: LD_ADDR_VAR 0 19
36752: PUSH
36753: LD_INT 3
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 3
36765: PUSH
36766: LD_INT 3
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: LD_INT 3
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36788: LD_ADDR_VAR 0 20
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: LD_INT 3
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: LD_INT 3
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: LD_INT 2
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36829: LD_ADDR_VAR 0 21
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 3
36847: NEG
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 3
36858: NEG
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: LIST
36872: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36873: LD_ADDR_VAR 0 22
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 3
36892: NEG
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 3
36904: NEG
36905: PUSH
36906: LD_INT 3
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36919: LD_ADDR_VAR 0 23
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 3
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: LD_INT 4
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 3
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36963: LD_ADDR_VAR 0 24
36967: PUSH
36968: LD_INT 3
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 4
36991: PUSH
36992: LD_INT 1
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37004: LD_ADDR_VAR 0 25
37008: PUSH
37009: LD_INT 3
37011: PUSH
37012: LD_INT 3
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 4
37021: PUSH
37022: LD_INT 3
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 3
37031: PUSH
37032: LD_INT 4
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37044: LD_ADDR_VAR 0 26
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: LD_INT 3
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: LD_INT 4
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 3
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37085: LD_ADDR_VAR 0 27
37089: PUSH
37090: LD_INT 3
37092: NEG
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 3
37103: NEG
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 4
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37129: LD_ADDR_VAR 0 28
37133: PUSH
37134: LD_INT 3
37136: NEG
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 3
37148: NEG
37149: PUSH
37150: LD_INT 4
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 4
37160: NEG
37161: PUSH
37162: LD_INT 3
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: LIST
37174: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37175: LD_ADDR_VAR 0 29
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: LD_INT 3
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 3
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 2
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: LD_INT 4
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: LD_INT 4
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: LD_INT 3
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: LD_INT 5
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 5
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: LD_INT 4
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: LD_INT 6
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 6
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: LD_INT 5
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37330: LD_ADDR_VAR 0 30
37334: PUSH
37335: LD_INT 2
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 3
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 3
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 3
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 4
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 4
37389: PUSH
37390: LD_INT 1
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 4
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 5
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 5
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 6
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 6
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37473: LD_ADDR_VAR 0 31
37477: PUSH
37478: LD_INT 3
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 3
37490: PUSH
37491: LD_INT 3
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 4
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 4
37520: PUSH
37521: LD_INT 4
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 3
37530: PUSH
37531: LD_INT 4
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 5
37540: PUSH
37541: LD_INT 4
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 5
37550: PUSH
37551: LD_INT 5
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 4
37560: PUSH
37561: LD_INT 5
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 6
37570: PUSH
37571: LD_INT 5
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 6
37580: PUSH
37581: LD_INT 6
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 5
37590: PUSH
37591: LD_INT 6
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37612: LD_ADDR_VAR 0 32
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 4
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: LD_INT 4
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: LD_INT 5
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 5
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: LD_INT 4
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: LD_INT 6
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 6
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 5
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37755: LD_ADDR_VAR 0 33
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 3
37773: NEG
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 3
37784: NEG
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 4
37807: NEG
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 4
37818: NEG
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 4
37830: NEG
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 5
37841: NEG
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 5
37852: NEG
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 5
37864: NEG
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 6
37875: NEG
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 6
37886: NEG
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37910: LD_ADDR_VAR 0 34
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: LD_INT 3
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: NEG
37930: PUSH
37931: LD_INT 2
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 3
37941: NEG
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 3
37953: NEG
37954: PUSH
37955: LD_INT 4
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 4
37965: NEG
37966: PUSH
37967: LD_INT 3
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 4
37977: NEG
37978: PUSH
37979: LD_INT 4
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 4
37989: NEG
37990: PUSH
37991: LD_INT 5
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 5
38001: NEG
38002: PUSH
38003: LD_INT 4
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 5
38013: NEG
38014: PUSH
38015: LD_INT 5
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 5
38025: NEG
38026: PUSH
38027: LD_INT 6
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 6
38037: NEG
38038: PUSH
38039: LD_INT 5
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 6
38049: NEG
38050: PUSH
38051: LD_INT 6
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38073: LD_ADDR_VAR 0 41
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 3
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: LIST
38116: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38117: LD_ADDR_VAR 0 42
38121: PUSH
38122: LD_INT 2
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 3
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38158: LD_ADDR_VAR 0 43
38162: PUSH
38163: LD_INT 2
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 3
38175: PUSH
38176: LD_INT 2
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: LD_INT 3
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: LIST
38197: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38198: LD_ADDR_VAR 0 44
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 3
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38239: LD_ADDR_VAR 0 45
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 3
38268: NEG
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38283: LD_ADDR_VAR 0 46
38287: PUSH
38288: LD_INT 2
38290: NEG
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: LD_INT 3
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 3
38314: NEG
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38329: LD_ADDR_VAR 0 47
38333: PUSH
38334: LD_INT 2
38336: NEG
38337: PUSH
38338: LD_INT 3
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: LD_INT 3
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38362: LD_ADDR_VAR 0 48
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38393: LD_ADDR_VAR 0 49
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 3
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38422: LD_ADDR_VAR 0 50
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38451: LD_ADDR_VAR 0 51
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38482: LD_ADDR_VAR 0 52
38486: PUSH
38487: LD_INT 3
38489: NEG
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 3
38501: NEG
38502: PUSH
38503: LD_INT 2
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38515: LD_ADDR_VAR 0 53
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 3
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: LD_INT 3
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 2
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38559: LD_ADDR_VAR 0 54
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 3
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38600: LD_ADDR_VAR 0 55
38604: PUSH
38605: LD_INT 3
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 3
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: LD_INT 3
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38640: LD_ADDR_VAR 0 56
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: LD_INT 3
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 3
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38681: LD_ADDR_VAR 0 57
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: NEG
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 3
38710: NEG
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: LIST
38724: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38725: LD_ADDR_VAR 0 58
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 3
38744: NEG
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: LD_INT 3
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38771: LD_ADDR_VAR 0 59
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 2
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38815: LD_ADDR_VAR 0 60
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 2
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38856: LD_ADDR_VAR 0 61
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38896: LD_ADDR_VAR 0 62
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38937: LD_ADDR_VAR 0 63
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38981: LD_ADDR_VAR 0 64
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: NEG
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: LIST
39026: ST_TO_ADDR
// end ; 2 :
39027: GO 42293
39029: LD_INT 2
39031: DOUBLE
39032: EQUAL
39033: IFTRUE 39037
39035: GO 42292
39037: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39038: LD_ADDR_VAR 0 29
39042: PUSH
39043: LD_INT 4
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 4
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 5
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 5
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 4
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 3
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 3
39117: PUSH
39118: LD_INT 2
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 5
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: PUSH
39139: LD_INT 3
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 3
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 4
39158: PUSH
39159: LD_INT 3
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 4
39168: PUSH
39169: LD_INT 4
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 3
39178: PUSH
39179: LD_INT 4
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: LD_INT 3
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 4
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: PUSH
39219: LD_INT 4
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 4
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 3
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: LD_INT 4
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 5
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: LD_INT 5
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: LD_INT 4
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 3
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: LD_INT 5
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: NEG
39311: PUSH
39312: LD_INT 3
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 3
39321: NEG
39322: PUSH
39323: LD_INT 0
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 3
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 3
39366: NEG
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 4
39377: NEG
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 4
39388: NEG
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 4
39400: NEG
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 2
39412: NEG
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 4
39423: NEG
39424: PUSH
39425: LD_INT 4
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 4
39435: NEG
39436: PUSH
39437: LD_INT 5
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 3
39447: NEG
39448: PUSH
39449: LD_INT 4
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 4
39471: NEG
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 5
39483: NEG
39484: PUSH
39485: LD_INT 4
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 5
39495: NEG
39496: PUSH
39497: LD_INT 5
39499: NEG
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 3
39507: NEG
39508: PUSH
39509: LD_INT 5
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 5
39519: NEG
39520: PUSH
39521: LD_INT 3
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39576: LD_ADDR_VAR 0 30
39580: PUSH
39581: LD_INT 4
39583: PUSH
39584: LD_INT 4
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 4
39593: PUSH
39594: LD_INT 3
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 5
39603: PUSH
39604: LD_INT 4
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 5
39613: PUSH
39614: LD_INT 5
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 4
39623: PUSH
39624: LD_INT 5
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 3
39633: PUSH
39634: LD_INT 4
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 3
39643: PUSH
39644: LD_INT 3
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 5
39653: PUSH
39654: LD_INT 3
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 3
39663: PUSH
39664: LD_INT 5
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: LD_INT 3
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 3
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 4
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 4
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: LD_INT 4
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 4
39766: NEG
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 4
39777: NEG
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 3
39789: NEG
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 3
39800: NEG
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 4
39811: NEG
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 5
39822: NEG
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 5
39833: NEG
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 5
39845: NEG
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 3
39857: NEG
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 3
39868: NEG
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 3
39880: NEG
39881: PUSH
39882: LD_INT 4
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: NEG
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 2
39904: NEG
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 3
39916: NEG
39917: PUSH
39918: LD_INT 2
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 4
39928: NEG
39929: PUSH
39930: LD_INT 3
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 4
39940: NEG
39941: PUSH
39942: LD_INT 4
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 2
39952: NEG
39953: PUSH
39954: LD_INT 4
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 4
39964: NEG
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 4
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 5
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: LD_INT 4
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 3
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: LD_INT 3
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: LD_INT 4
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 5
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: LD_INT 3
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: LD_INT 5
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40123: LD_ADDR_VAR 0 31
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: LD_INT 4
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: PUSH
40151: LD_INT 4
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 5
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 5
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: LD_INT 4
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: LD_INT 3
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 2
40202: PUSH
40203: LD_INT 5
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: LD_INT 3
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 3
40223: NEG
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 3
40234: NEG
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: NEG
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 2
40257: NEG
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 3
40268: NEG
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 4
40279: NEG
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 4
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 4
40302: NEG
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 4
40325: NEG
40326: PUSH
40327: LD_INT 4
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 4
40337: NEG
40338: PUSH
40339: LD_INT 5
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 3
40349: NEG
40350: PUSH
40351: LD_INT 4
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 3
40361: NEG
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 4
40373: NEG
40374: PUSH
40375: LD_INT 3
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 5
40385: NEG
40386: PUSH
40387: LD_INT 4
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 5
40397: NEG
40398: PUSH
40399: LD_INT 5
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 3
40409: NEG
40410: PUSH
40411: LD_INT 5
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 5
40421: NEG
40422: PUSH
40423: LD_INT 3
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: LD_INT 3
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: LD_INT 4
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 3
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 4
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: LD_INT 4
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 4
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 4
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 5
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 5
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 4
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 3
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 3
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 3
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 5
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40673: LD_ADDR_VAR 0 32
40677: PUSH
40678: LD_INT 4
40680: NEG
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 4
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 3
40703: NEG
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 3
40714: NEG
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 4
40725: NEG
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 5
40736: NEG
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 5
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 5
40759: NEG
40760: PUSH
40761: LD_INT 2
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 3
40771: NEG
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 3
40782: NEG
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 3
40794: NEG
40795: PUSH
40796: LD_INT 4
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: LD_INT 3
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 3
40830: NEG
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 4
40842: NEG
40843: PUSH
40844: LD_INT 3
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 4
40854: NEG
40855: PUSH
40856: LD_INT 4
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 2
40866: NEG
40867: PUSH
40868: LD_INT 4
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 4
40878: NEG
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 4
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 5
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 4
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 3
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: LD_INT 3
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: LD_INT 4
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: LD_INT 5
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 3
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: NEG
40981: PUSH
40982: LD_INT 5
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 3
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 4
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 4
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 3
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 4
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 4
41085: PUSH
41086: LD_INT 4
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 4
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 5
41105: PUSH
41106: LD_INT 4
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 5
41115: PUSH
41116: LD_INT 5
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 4
41125: PUSH
41126: LD_INT 5
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: LD_INT 4
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 3
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 5
41155: PUSH
41156: LD_INT 3
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 3
41165: PUSH
41166: LD_INT 5
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41220: LD_ADDR_VAR 0 33
41224: PUSH
41225: LD_INT 4
41227: NEG
41228: PUSH
41229: LD_INT 4
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 4
41239: NEG
41240: PUSH
41241: LD_INT 5
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 3
41251: NEG
41252: PUSH
41253: LD_INT 4
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 3
41263: NEG
41264: PUSH
41265: LD_INT 3
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 4
41275: NEG
41276: PUSH
41277: LD_INT 3
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 5
41287: NEG
41288: PUSH
41289: LD_INT 4
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 5
41299: NEG
41300: PUSH
41301: LD_INT 5
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 3
41311: NEG
41312: PUSH
41313: LD_INT 5
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 5
41323: NEG
41324: PUSH
41325: LD_INT 3
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: LD_INT 3
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 0
41346: PUSH
41347: LD_INT 4
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: LD_INT 3
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: LD_INT 3
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: LD_INT 4
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: LD_INT 4
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 4
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 4
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 5
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 5
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 4
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 5
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 3
41530: PUSH
41531: LD_INT 3
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 4
41550: PUSH
41551: LD_INT 3
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 4
41560: PUSH
41561: LD_INT 4
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 3
41570: PUSH
41571: LD_INT 4
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: LD_INT 3
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 4
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 4
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 4
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 3
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: LD_INT 4
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: LD_INT 5
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 5
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: LD_INT 4
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 3
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: LD_INT 5
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 3
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41758: LD_ADDR_VAR 0 34
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 4
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 5
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 4
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 3
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 3
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 4
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 5
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: LD_INT 3
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 5
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 3
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 4
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 4
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 2
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: LD_INT 2
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 4
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 4
41960: PUSH
41961: LD_INT 4
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 4
41970: PUSH
41971: LD_INT 3
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 5
41980: PUSH
41981: LD_INT 4
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 5
41990: PUSH
41991: LD_INT 5
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 4
42000: PUSH
42001: LD_INT 5
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 3
42010: PUSH
42011: LD_INT 4
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 3
42020: PUSH
42021: LD_INT 3
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 5
42030: PUSH
42031: LD_INT 3
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 5
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 3
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 4
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 4
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 3
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: LD_INT 4
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 4
42143: NEG
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 4
42154: NEG
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 3
42166: NEG
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 3
42177: NEG
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 4
42188: NEG
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 5
42199: NEG
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 5
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 5
42222: NEG
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 3
42234: NEG
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: ST_TO_ADDR
// end ; end ;
42290: GO 42293
42292: POP
// case btype of b_depot , b_warehouse :
42293: LD_VAR 0 1
42297: PUSH
42298: LD_INT 0
42300: DOUBLE
42301: EQUAL
42302: IFTRUE 42312
42304: LD_INT 1
42306: DOUBLE
42307: EQUAL
42308: IFTRUE 42312
42310: GO 42513
42312: POP
// case nation of nation_american :
42313: LD_VAR 0 5
42317: PUSH
42318: LD_INT 1
42320: DOUBLE
42321: EQUAL
42322: IFTRUE 42326
42324: GO 42382
42326: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42327: LD_ADDR_VAR 0 9
42331: PUSH
42332: LD_VAR 0 11
42336: PUSH
42337: LD_VAR 0 12
42341: PUSH
42342: LD_VAR 0 13
42346: PUSH
42347: LD_VAR 0 14
42351: PUSH
42352: LD_VAR 0 15
42356: PUSH
42357: LD_VAR 0 16
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: PUSH
42370: LD_VAR 0 4
42374: PUSH
42375: LD_INT 1
42377: PLUS
42378: ARRAY
42379: ST_TO_ADDR
42380: GO 42511
42382: LD_INT 2
42384: DOUBLE
42385: EQUAL
42386: IFTRUE 42390
42388: GO 42446
42390: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42391: LD_ADDR_VAR 0 9
42395: PUSH
42396: LD_VAR 0 17
42400: PUSH
42401: LD_VAR 0 18
42405: PUSH
42406: LD_VAR 0 19
42410: PUSH
42411: LD_VAR 0 20
42415: PUSH
42416: LD_VAR 0 21
42420: PUSH
42421: LD_VAR 0 22
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: PUSH
42434: LD_VAR 0 4
42438: PUSH
42439: LD_INT 1
42441: PLUS
42442: ARRAY
42443: ST_TO_ADDR
42444: GO 42511
42446: LD_INT 3
42448: DOUBLE
42449: EQUAL
42450: IFTRUE 42454
42452: GO 42510
42454: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42455: LD_ADDR_VAR 0 9
42459: PUSH
42460: LD_VAR 0 23
42464: PUSH
42465: LD_VAR 0 24
42469: PUSH
42470: LD_VAR 0 25
42474: PUSH
42475: LD_VAR 0 26
42479: PUSH
42480: LD_VAR 0 27
42484: PUSH
42485: LD_VAR 0 28
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: PUSH
42498: LD_VAR 0 4
42502: PUSH
42503: LD_INT 1
42505: PLUS
42506: ARRAY
42507: ST_TO_ADDR
42508: GO 42511
42510: POP
42511: GO 43066
42513: LD_INT 2
42515: DOUBLE
42516: EQUAL
42517: IFTRUE 42527
42519: LD_INT 3
42521: DOUBLE
42522: EQUAL
42523: IFTRUE 42527
42525: GO 42583
42527: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42528: LD_ADDR_VAR 0 9
42532: PUSH
42533: LD_VAR 0 29
42537: PUSH
42538: LD_VAR 0 30
42542: PUSH
42543: LD_VAR 0 31
42547: PUSH
42548: LD_VAR 0 32
42552: PUSH
42553: LD_VAR 0 33
42557: PUSH
42558: LD_VAR 0 34
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: PUSH
42571: LD_VAR 0 4
42575: PUSH
42576: LD_INT 1
42578: PLUS
42579: ARRAY
42580: ST_TO_ADDR
42581: GO 43066
42583: LD_INT 16
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42645
42589: LD_INT 17
42591: DOUBLE
42592: EQUAL
42593: IFTRUE 42645
42595: LD_INT 18
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42645
42601: LD_INT 19
42603: DOUBLE
42604: EQUAL
42605: IFTRUE 42645
42607: LD_INT 22
42609: DOUBLE
42610: EQUAL
42611: IFTRUE 42645
42613: LD_INT 20
42615: DOUBLE
42616: EQUAL
42617: IFTRUE 42645
42619: LD_INT 21
42621: DOUBLE
42622: EQUAL
42623: IFTRUE 42645
42625: LD_INT 23
42627: DOUBLE
42628: EQUAL
42629: IFTRUE 42645
42631: LD_INT 24
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42645
42637: LD_INT 25
42639: DOUBLE
42640: EQUAL
42641: IFTRUE 42645
42643: GO 42701
42645: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42646: LD_ADDR_VAR 0 9
42650: PUSH
42651: LD_VAR 0 35
42655: PUSH
42656: LD_VAR 0 36
42660: PUSH
42661: LD_VAR 0 37
42665: PUSH
42666: LD_VAR 0 38
42670: PUSH
42671: LD_VAR 0 39
42675: PUSH
42676: LD_VAR 0 40
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: PUSH
42689: LD_VAR 0 4
42693: PUSH
42694: LD_INT 1
42696: PLUS
42697: ARRAY
42698: ST_TO_ADDR
42699: GO 43066
42701: LD_INT 6
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42757
42707: LD_INT 7
42709: DOUBLE
42710: EQUAL
42711: IFTRUE 42757
42713: LD_INT 8
42715: DOUBLE
42716: EQUAL
42717: IFTRUE 42757
42719: LD_INT 13
42721: DOUBLE
42722: EQUAL
42723: IFTRUE 42757
42725: LD_INT 12
42727: DOUBLE
42728: EQUAL
42729: IFTRUE 42757
42731: LD_INT 15
42733: DOUBLE
42734: EQUAL
42735: IFTRUE 42757
42737: LD_INT 11
42739: DOUBLE
42740: EQUAL
42741: IFTRUE 42757
42743: LD_INT 14
42745: DOUBLE
42746: EQUAL
42747: IFTRUE 42757
42749: LD_INT 10
42751: DOUBLE
42752: EQUAL
42753: IFTRUE 42757
42755: GO 42813
42757: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42758: LD_ADDR_VAR 0 9
42762: PUSH
42763: LD_VAR 0 41
42767: PUSH
42768: LD_VAR 0 42
42772: PUSH
42773: LD_VAR 0 43
42777: PUSH
42778: LD_VAR 0 44
42782: PUSH
42783: LD_VAR 0 45
42787: PUSH
42788: LD_VAR 0 46
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: PUSH
42801: LD_VAR 0 4
42805: PUSH
42806: LD_INT 1
42808: PLUS
42809: ARRAY
42810: ST_TO_ADDR
42811: GO 43066
42813: LD_INT 36
42815: DOUBLE
42816: EQUAL
42817: IFTRUE 42821
42819: GO 42877
42821: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42822: LD_ADDR_VAR 0 9
42826: PUSH
42827: LD_VAR 0 47
42831: PUSH
42832: LD_VAR 0 48
42836: PUSH
42837: LD_VAR 0 49
42841: PUSH
42842: LD_VAR 0 50
42846: PUSH
42847: LD_VAR 0 51
42851: PUSH
42852: LD_VAR 0 52
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: PUSH
42865: LD_VAR 0 4
42869: PUSH
42870: LD_INT 1
42872: PLUS
42873: ARRAY
42874: ST_TO_ADDR
42875: GO 43066
42877: LD_INT 4
42879: DOUBLE
42880: EQUAL
42881: IFTRUE 42903
42883: LD_INT 5
42885: DOUBLE
42886: EQUAL
42887: IFTRUE 42903
42889: LD_INT 34
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42903
42895: LD_INT 37
42897: DOUBLE
42898: EQUAL
42899: IFTRUE 42903
42901: GO 42959
42903: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42904: LD_ADDR_VAR 0 9
42908: PUSH
42909: LD_VAR 0 53
42913: PUSH
42914: LD_VAR 0 54
42918: PUSH
42919: LD_VAR 0 55
42923: PUSH
42924: LD_VAR 0 56
42928: PUSH
42929: LD_VAR 0 57
42933: PUSH
42934: LD_VAR 0 58
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: PUSH
42947: LD_VAR 0 4
42951: PUSH
42952: LD_INT 1
42954: PLUS
42955: ARRAY
42956: ST_TO_ADDR
42957: GO 43066
42959: LD_INT 31
42961: DOUBLE
42962: EQUAL
42963: IFTRUE 43009
42965: LD_INT 32
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 43009
42971: LD_INT 33
42973: DOUBLE
42974: EQUAL
42975: IFTRUE 43009
42977: LD_INT 27
42979: DOUBLE
42980: EQUAL
42981: IFTRUE 43009
42983: LD_INT 26
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 43009
42989: LD_INT 28
42991: DOUBLE
42992: EQUAL
42993: IFTRUE 43009
42995: LD_INT 29
42997: DOUBLE
42998: EQUAL
42999: IFTRUE 43009
43001: LD_INT 30
43003: DOUBLE
43004: EQUAL
43005: IFTRUE 43009
43007: GO 43065
43009: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43010: LD_ADDR_VAR 0 9
43014: PUSH
43015: LD_VAR 0 59
43019: PUSH
43020: LD_VAR 0 60
43024: PUSH
43025: LD_VAR 0 61
43029: PUSH
43030: LD_VAR 0 62
43034: PUSH
43035: LD_VAR 0 63
43039: PUSH
43040: LD_VAR 0 64
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: PUSH
43053: LD_VAR 0 4
43057: PUSH
43058: LD_INT 1
43060: PLUS
43061: ARRAY
43062: ST_TO_ADDR
43063: GO 43066
43065: POP
// temp_list2 = [ ] ;
43066: LD_ADDR_VAR 0 10
43070: PUSH
43071: EMPTY
43072: ST_TO_ADDR
// for i in temp_list do
43073: LD_ADDR_VAR 0 8
43077: PUSH
43078: LD_VAR 0 9
43082: PUSH
43083: FOR_IN
43084: IFFALSE 43136
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43086: LD_ADDR_VAR 0 10
43090: PUSH
43091: LD_VAR 0 10
43095: PUSH
43096: LD_VAR 0 8
43100: PUSH
43101: LD_INT 1
43103: ARRAY
43104: PUSH
43105: LD_VAR 0 2
43109: PLUS
43110: PUSH
43111: LD_VAR 0 8
43115: PUSH
43116: LD_INT 2
43118: ARRAY
43119: PUSH
43120: LD_VAR 0 3
43124: PLUS
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: EMPTY
43131: LIST
43132: ADD
43133: ST_TO_ADDR
43134: GO 43083
43136: POP
43137: POP
// result = temp_list2 ;
43138: LD_ADDR_VAR 0 7
43142: PUSH
43143: LD_VAR 0 10
43147: ST_TO_ADDR
// end ;
43148: LD_VAR 0 7
43152: RET
// export function EnemyInRange ( unit , dist ) ; begin
43153: LD_INT 0
43155: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43156: LD_ADDR_VAR 0 3
43160: PUSH
43161: LD_VAR 0 1
43165: PPUSH
43166: CALL_OW 255
43170: PPUSH
43171: LD_VAR 0 1
43175: PPUSH
43176: CALL_OW 250
43180: PPUSH
43181: LD_VAR 0 1
43185: PPUSH
43186: CALL_OW 251
43190: PPUSH
43191: LD_VAR 0 2
43195: PPUSH
43196: CALL 16410 0 4
43200: PUSH
43201: LD_INT 4
43203: ARRAY
43204: ST_TO_ADDR
// end ;
43205: LD_VAR 0 3
43209: RET
// export function PlayerSeeMe ( unit ) ; begin
43210: LD_INT 0
43212: PPUSH
// result := See ( your_side , unit ) ;
43213: LD_ADDR_VAR 0 2
43217: PUSH
43218: LD_OWVAR 2
43222: PPUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: CALL_OW 292
43232: ST_TO_ADDR
// end ;
43233: LD_VAR 0 2
43237: RET
// export function ReverseDir ( unit ) ; begin
43238: LD_INT 0
43240: PPUSH
// if not unit then
43241: LD_VAR 0 1
43245: NOT
43246: IFFALSE 43250
// exit ;
43248: GO 43273
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43250: LD_ADDR_VAR 0 2
43254: PUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: CALL_OW 254
43264: PUSH
43265: LD_INT 3
43267: PLUS
43268: PUSH
43269: LD_INT 6
43271: MOD
43272: ST_TO_ADDR
// end ;
43273: LD_VAR 0 2
43277: RET
// export function ReverseArray ( array ) ; var i ; begin
43278: LD_INT 0
43280: PPUSH
43281: PPUSH
// if not array then
43282: LD_VAR 0 1
43286: NOT
43287: IFFALSE 43291
// exit ;
43289: GO 43346
// result := [ ] ;
43291: LD_ADDR_VAR 0 2
43295: PUSH
43296: EMPTY
43297: ST_TO_ADDR
// for i := array downto 1 do
43298: LD_ADDR_VAR 0 3
43302: PUSH
43303: DOUBLE
43304: LD_VAR 0 1
43308: INC
43309: ST_TO_ADDR
43310: LD_INT 1
43312: PUSH
43313: FOR_DOWNTO
43314: IFFALSE 43344
// result := Join ( result , array [ i ] ) ;
43316: LD_ADDR_VAR 0 2
43320: PUSH
43321: LD_VAR 0 2
43325: PPUSH
43326: LD_VAR 0 1
43330: PUSH
43331: LD_VAR 0 3
43335: ARRAY
43336: PPUSH
43337: CALL 48188 0 2
43341: ST_TO_ADDR
43342: GO 43313
43344: POP
43345: POP
// end ;
43346: LD_VAR 0 2
43350: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43351: LD_INT 0
43353: PPUSH
43354: PPUSH
43355: PPUSH
43356: PPUSH
43357: PPUSH
43358: PPUSH
// if not unit or not hexes then
43359: LD_VAR 0 1
43363: NOT
43364: IFTRUE 43373
43366: PUSH
43367: LD_VAR 0 2
43371: NOT
43372: OR
43373: IFFALSE 43377
// exit ;
43375: GO 43500
// dist := 9999 ;
43377: LD_ADDR_VAR 0 5
43381: PUSH
43382: LD_INT 9999
43384: ST_TO_ADDR
// for i = 1 to hexes do
43385: LD_ADDR_VAR 0 4
43389: PUSH
43390: DOUBLE
43391: LD_INT 1
43393: DEC
43394: ST_TO_ADDR
43395: LD_VAR 0 2
43399: PUSH
43400: FOR_TO
43401: IFFALSE 43488
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43403: LD_ADDR_VAR 0 6
43407: PUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: LD_VAR 0 2
43417: PUSH
43418: LD_VAR 0 4
43422: ARRAY
43423: PUSH
43424: LD_INT 1
43426: ARRAY
43427: PPUSH
43428: LD_VAR 0 2
43432: PUSH
43433: LD_VAR 0 4
43437: ARRAY
43438: PUSH
43439: LD_INT 2
43441: ARRAY
43442: PPUSH
43443: CALL_OW 297
43447: ST_TO_ADDR
// if tdist < dist then
43448: LD_VAR 0 6
43452: PUSH
43453: LD_VAR 0 5
43457: LESS
43458: IFFALSE 43486
// begin hex := hexes [ i ] ;
43460: LD_ADDR_VAR 0 8
43464: PUSH
43465: LD_VAR 0 2
43469: PUSH
43470: LD_VAR 0 4
43474: ARRAY
43475: ST_TO_ADDR
// dist := tdist ;
43476: LD_ADDR_VAR 0 5
43480: PUSH
43481: LD_VAR 0 6
43485: ST_TO_ADDR
// end ; end ;
43486: GO 43400
43488: POP
43489: POP
// result := hex ;
43490: LD_ADDR_VAR 0 3
43494: PUSH
43495: LD_VAR 0 8
43499: ST_TO_ADDR
// end ;
43500: LD_VAR 0 3
43504: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43505: LD_INT 0
43507: PPUSH
43508: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43509: LD_VAR 0 1
43513: NOT
43514: IFTRUE 43553
43516: PUSH
43517: LD_VAR 0 1
43521: PUSH
43522: LD_INT 21
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 23
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PPUSH
43546: CALL_OW 69
43550: IN
43551: NOT
43552: OR
43553: IFFALSE 43557
// exit ;
43555: GO 43604
// for i = 1 to 3 do
43557: LD_ADDR_VAR 0 3
43561: PUSH
43562: DOUBLE
43563: LD_INT 1
43565: DEC
43566: ST_TO_ADDR
43567: LD_INT 3
43569: PUSH
43570: FOR_TO
43571: IFFALSE 43602
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43573: LD_VAR 0 1
43577: PPUSH
43578: CALL_OW 250
43582: PPUSH
43583: LD_VAR 0 1
43587: PPUSH
43588: CALL_OW 251
43592: PPUSH
43593: LD_INT 1
43595: PPUSH
43596: CALL_OW 453
43600: GO 43570
43602: POP
43603: POP
// end ;
43604: LD_VAR 0 2
43608: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43609: LD_INT 0
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
// if not unit or not enemy_unit then
43617: LD_VAR 0 1
43621: NOT
43622: IFTRUE 43631
43624: PUSH
43625: LD_VAR 0 2
43629: NOT
43630: OR
43631: IFFALSE 43635
// exit ;
43633: GO 44106
// if GetLives ( i ) < 250 then
43635: LD_VAR 0 4
43639: PPUSH
43640: CALL_OW 256
43644: PUSH
43645: LD_INT 250
43647: LESS
43648: IFFALSE 43661
// begin ComAutodestruct ( i ) ;
43650: LD_VAR 0 4
43654: PPUSH
43655: CALL 43505 0 1
// exit ;
43659: GO 44106
// end ; x := GetX ( enemy_unit ) ;
43661: LD_ADDR_VAR 0 7
43665: PUSH
43666: LD_VAR 0 2
43670: PPUSH
43671: CALL_OW 250
43675: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43676: LD_ADDR_VAR 0 8
43680: PUSH
43681: LD_VAR 0 2
43685: PPUSH
43686: CALL_OW 251
43690: ST_TO_ADDR
// if not x or not y then
43691: LD_VAR 0 7
43695: NOT
43696: IFTRUE 43705
43698: PUSH
43699: LD_VAR 0 8
43703: NOT
43704: OR
43705: IFFALSE 43709
// exit ;
43707: GO 44106
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43709: LD_ADDR_VAR 0 6
43713: PUSH
43714: LD_VAR 0 7
43718: PPUSH
43719: LD_INT 0
43721: PPUSH
43722: LD_INT 4
43724: PPUSH
43725: CALL_OW 272
43729: PUSH
43730: LD_VAR 0 8
43734: PPUSH
43735: LD_INT 0
43737: PPUSH
43738: LD_INT 4
43740: PPUSH
43741: CALL_OW 273
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_VAR 0 7
43754: PPUSH
43755: LD_INT 1
43757: PPUSH
43758: LD_INT 4
43760: PPUSH
43761: CALL_OW 272
43765: PUSH
43766: LD_VAR 0 8
43770: PPUSH
43771: LD_INT 1
43773: PPUSH
43774: LD_INT 4
43776: PPUSH
43777: CALL_OW 273
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_VAR 0 7
43790: PPUSH
43791: LD_INT 2
43793: PPUSH
43794: LD_INT 4
43796: PPUSH
43797: CALL_OW 272
43801: PUSH
43802: LD_VAR 0 8
43806: PPUSH
43807: LD_INT 2
43809: PPUSH
43810: LD_INT 4
43812: PPUSH
43813: CALL_OW 273
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_VAR 0 7
43826: PPUSH
43827: LD_INT 3
43829: PPUSH
43830: LD_INT 4
43832: PPUSH
43833: CALL_OW 272
43837: PUSH
43838: LD_VAR 0 8
43842: PPUSH
43843: LD_INT 3
43845: PPUSH
43846: LD_INT 4
43848: PPUSH
43849: CALL_OW 273
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_VAR 0 7
43862: PPUSH
43863: LD_INT 4
43865: PPUSH
43866: LD_INT 4
43868: PPUSH
43869: CALL_OW 272
43873: PUSH
43874: LD_VAR 0 8
43878: PPUSH
43879: LD_INT 4
43881: PPUSH
43882: LD_INT 4
43884: PPUSH
43885: CALL_OW 273
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_VAR 0 7
43898: PPUSH
43899: LD_INT 5
43901: PPUSH
43902: LD_INT 4
43904: PPUSH
43905: CALL_OW 272
43909: PUSH
43910: LD_VAR 0 8
43914: PPUSH
43915: LD_INT 5
43917: PPUSH
43918: LD_INT 4
43920: PPUSH
43921: CALL_OW 273
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
// for i = tmp downto 1 do
43938: LD_ADDR_VAR 0 4
43942: PUSH
43943: DOUBLE
43944: LD_VAR 0 6
43948: INC
43949: ST_TO_ADDR
43950: LD_INT 1
43952: PUSH
43953: FOR_DOWNTO
43954: IFFALSE 44057
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43956: LD_VAR 0 6
43960: PUSH
43961: LD_VAR 0 4
43965: ARRAY
43966: PUSH
43967: LD_INT 1
43969: ARRAY
43970: PPUSH
43971: LD_VAR 0 6
43975: PUSH
43976: LD_VAR 0 4
43980: ARRAY
43981: PUSH
43982: LD_INT 2
43984: ARRAY
43985: PPUSH
43986: CALL_OW 488
43990: NOT
43991: IFTRUE 44033
43993: PUSH
43994: LD_VAR 0 6
43998: PUSH
43999: LD_VAR 0 4
44003: ARRAY
44004: PUSH
44005: LD_INT 1
44007: ARRAY
44008: PPUSH
44009: LD_VAR 0 6
44013: PUSH
44014: LD_VAR 0 4
44018: ARRAY
44019: PUSH
44020: LD_INT 2
44022: ARRAY
44023: PPUSH
44024: CALL_OW 428
44028: PUSH
44029: LD_INT 0
44031: NONEQUAL
44032: OR
44033: IFFALSE 44055
// tmp := Delete ( tmp , i ) ;
44035: LD_ADDR_VAR 0 6
44039: PUSH
44040: LD_VAR 0 6
44044: PPUSH
44045: LD_VAR 0 4
44049: PPUSH
44050: CALL_OW 3
44054: ST_TO_ADDR
44055: GO 43953
44057: POP
44058: POP
// j := GetClosestHex ( unit , tmp ) ;
44059: LD_ADDR_VAR 0 5
44063: PUSH
44064: LD_VAR 0 1
44068: PPUSH
44069: LD_VAR 0 6
44073: PPUSH
44074: CALL 43351 0 2
44078: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44079: LD_VAR 0 1
44083: PPUSH
44084: LD_VAR 0 5
44088: PUSH
44089: LD_INT 1
44091: ARRAY
44092: PPUSH
44093: LD_VAR 0 5
44097: PUSH
44098: LD_INT 2
44100: ARRAY
44101: PPUSH
44102: CALL_OW 111
// end ;
44106: LD_VAR 0 3
44110: RET
// export function PrepareApemanSoldier ( ) ; begin
44111: LD_INT 0
44113: PPUSH
// uc_nation := 0 ;
44114: LD_ADDR_OWVAR 21
44118: PUSH
44119: LD_INT 0
44121: ST_TO_ADDR
// hc_sex := sex_male ;
44122: LD_ADDR_OWVAR 27
44126: PUSH
44127: LD_INT 1
44129: ST_TO_ADDR
// hc_name :=  ;
44130: LD_ADDR_OWVAR 26
44134: PUSH
44135: LD_STRING 
44137: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44138: LD_ADDR_OWVAR 28
44142: PUSH
44143: LD_INT 15
44145: ST_TO_ADDR
// hc_gallery :=  ;
44146: LD_ADDR_OWVAR 33
44150: PUSH
44151: LD_STRING 
44153: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44154: LD_ADDR_OWVAR 31
44158: PUSH
44159: LD_INT 0
44161: PPUSH
44162: LD_INT 3
44164: PPUSH
44165: CALL_OW 12
44169: PUSH
44170: LD_INT 0
44172: PPUSH
44173: LD_INT 3
44175: PPUSH
44176: CALL_OW 12
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44193: LD_ADDR_OWVAR 29
44197: PUSH
44198: LD_INT 12
44200: PUSH
44201: LD_INT 12
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: ST_TO_ADDR
// end ;
44208: LD_VAR 0 1
44212: RET
// export function PrepareApemanEngineer ( ) ; begin
44213: LD_INT 0
44215: PPUSH
// uc_nation := 0 ;
44216: LD_ADDR_OWVAR 21
44220: PUSH
44221: LD_INT 0
44223: ST_TO_ADDR
// hc_sex := sex_male ;
44224: LD_ADDR_OWVAR 27
44228: PUSH
44229: LD_INT 1
44231: ST_TO_ADDR
// hc_name :=  ;
44232: LD_ADDR_OWVAR 26
44236: PUSH
44237: LD_STRING 
44239: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44240: LD_ADDR_OWVAR 28
44244: PUSH
44245: LD_INT 16
44247: ST_TO_ADDR
// hc_gallery :=  ;
44248: LD_ADDR_OWVAR 33
44252: PUSH
44253: LD_STRING 
44255: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44256: LD_ADDR_OWVAR 31
44260: PUSH
44261: LD_INT 0
44263: PPUSH
44264: LD_INT 3
44266: PPUSH
44267: CALL_OW 12
44271: PUSH
44272: LD_INT 0
44274: PPUSH
44275: LD_INT 3
44277: PPUSH
44278: CALL_OW 12
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44295: LD_ADDR_OWVAR 29
44299: PUSH
44300: LD_INT 12
44302: PUSH
44303: LD_INT 12
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: ST_TO_ADDR
// end ;
44310: LD_VAR 0 1
44314: RET
// export function PrepareApeman ( agressivity ) ; begin
44315: LD_INT 0
44317: PPUSH
// uc_side := 0 ;
44318: LD_ADDR_OWVAR 20
44322: PUSH
44323: LD_INT 0
44325: ST_TO_ADDR
// uc_nation := 0 ;
44326: LD_ADDR_OWVAR 21
44330: PUSH
44331: LD_INT 0
44333: ST_TO_ADDR
// hc_sex := sex_male ;
44334: LD_ADDR_OWVAR 27
44338: PUSH
44339: LD_INT 1
44341: ST_TO_ADDR
// hc_class := class_apeman ;
44342: LD_ADDR_OWVAR 28
44346: PUSH
44347: LD_INT 12
44349: ST_TO_ADDR
// hc_gallery :=  ;
44350: LD_ADDR_OWVAR 33
44354: PUSH
44355: LD_STRING 
44357: ST_TO_ADDR
// hc_name :=  ;
44358: LD_ADDR_OWVAR 26
44362: PUSH
44363: LD_STRING 
44365: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44366: LD_ADDR_OWVAR 29
44370: PUSH
44371: LD_INT 12
44373: PUSH
44374: LD_INT 12
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: ST_TO_ADDR
// if agressivity = 0 then
44381: LD_VAR 0 1
44385: PUSH
44386: LD_INT 0
44388: EQUAL
44389: IFFALSE 44401
// hc_agressivity := 0 else
44391: LD_ADDR_OWVAR 35
44395: PUSH
44396: LD_INT 0
44398: ST_TO_ADDR
44399: GO 44422
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44401: LD_ADDR_OWVAR 35
44405: PUSH
44406: LD_VAR 0 1
44410: NEG
44411: PPUSH
44412: LD_VAR 0 1
44416: PPUSH
44417: CALL_OW 12
44421: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44422: LD_ADDR_OWVAR 31
44426: PUSH
44427: LD_INT 0
44429: PPUSH
44430: LD_INT 3
44432: PPUSH
44433: CALL_OW 12
44437: PUSH
44438: LD_INT 0
44440: PPUSH
44441: LD_INT 3
44443: PPUSH
44444: CALL_OW 12
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: ST_TO_ADDR
// end ;
44461: LD_VAR 0 2
44465: RET
// export function PrepareTiger ( agressivity ) ; begin
44466: LD_INT 0
44468: PPUSH
// uc_side := 0 ;
44469: LD_ADDR_OWVAR 20
44473: PUSH
44474: LD_INT 0
44476: ST_TO_ADDR
// uc_nation := 0 ;
44477: LD_ADDR_OWVAR 21
44481: PUSH
44482: LD_INT 0
44484: ST_TO_ADDR
// InitHc ;
44485: CALL_OW 19
// hc_class := class_tiger ;
44489: LD_ADDR_OWVAR 28
44493: PUSH
44494: LD_INT 14
44496: ST_TO_ADDR
// hc_gallery :=  ;
44497: LD_ADDR_OWVAR 33
44501: PUSH
44502: LD_STRING 
44504: ST_TO_ADDR
// hc_name :=  ;
44505: LD_ADDR_OWVAR 26
44509: PUSH
44510: LD_STRING 
44512: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44513: LD_ADDR_OWVAR 35
44517: PUSH
44518: LD_VAR 0 1
44522: NEG
44523: PPUSH
44524: LD_VAR 0 1
44528: PPUSH
44529: CALL_OW 12
44533: ST_TO_ADDR
// end ;
44534: LD_VAR 0 2
44538: RET
// export function PrepareEnchidna ( ) ; begin
44539: LD_INT 0
44541: PPUSH
// uc_side := 0 ;
44542: LD_ADDR_OWVAR 20
44546: PUSH
44547: LD_INT 0
44549: ST_TO_ADDR
// uc_nation := 0 ;
44550: LD_ADDR_OWVAR 21
44554: PUSH
44555: LD_INT 0
44557: ST_TO_ADDR
// InitHc ;
44558: CALL_OW 19
// hc_class := class_baggie ;
44562: LD_ADDR_OWVAR 28
44566: PUSH
44567: LD_INT 13
44569: ST_TO_ADDR
// hc_gallery :=  ;
44570: LD_ADDR_OWVAR 33
44574: PUSH
44575: LD_STRING 
44577: ST_TO_ADDR
// hc_name :=  ;
44578: LD_ADDR_OWVAR 26
44582: PUSH
44583: LD_STRING 
44585: ST_TO_ADDR
// end ;
44586: LD_VAR 0 1
44590: RET
// export function PrepareFrog ( ) ; begin
44591: LD_INT 0
44593: PPUSH
// uc_side := 0 ;
44594: LD_ADDR_OWVAR 20
44598: PUSH
44599: LD_INT 0
44601: ST_TO_ADDR
// uc_nation := 0 ;
44602: LD_ADDR_OWVAR 21
44606: PUSH
44607: LD_INT 0
44609: ST_TO_ADDR
// InitHc ;
44610: CALL_OW 19
// hc_class := class_frog ;
44614: LD_ADDR_OWVAR 28
44618: PUSH
44619: LD_INT 19
44621: ST_TO_ADDR
// hc_gallery :=  ;
44622: LD_ADDR_OWVAR 33
44626: PUSH
44627: LD_STRING 
44629: ST_TO_ADDR
// hc_name :=  ;
44630: LD_ADDR_OWVAR 26
44634: PUSH
44635: LD_STRING 
44637: ST_TO_ADDR
// end ;
44638: LD_VAR 0 1
44642: RET
// export function PrepareFish ( ) ; begin
44643: LD_INT 0
44645: PPUSH
// uc_side := 0 ;
44646: LD_ADDR_OWVAR 20
44650: PUSH
44651: LD_INT 0
44653: ST_TO_ADDR
// uc_nation := 0 ;
44654: LD_ADDR_OWVAR 21
44658: PUSH
44659: LD_INT 0
44661: ST_TO_ADDR
// InitHc ;
44662: CALL_OW 19
// hc_class := class_fish ;
44666: LD_ADDR_OWVAR 28
44670: PUSH
44671: LD_INT 20
44673: ST_TO_ADDR
// hc_gallery :=  ;
44674: LD_ADDR_OWVAR 33
44678: PUSH
44679: LD_STRING 
44681: ST_TO_ADDR
// hc_name :=  ;
44682: LD_ADDR_OWVAR 26
44686: PUSH
44687: LD_STRING 
44689: ST_TO_ADDR
// end ;
44690: LD_VAR 0 1
44694: RET
// export function PrepareBird ( ) ; begin
44695: LD_INT 0
44697: PPUSH
// uc_side := 0 ;
44698: LD_ADDR_OWVAR 20
44702: PUSH
44703: LD_INT 0
44705: ST_TO_ADDR
// uc_nation := 0 ;
44706: LD_ADDR_OWVAR 21
44710: PUSH
44711: LD_INT 0
44713: ST_TO_ADDR
// InitHc ;
44714: CALL_OW 19
// hc_class := class_phororhacos ;
44718: LD_ADDR_OWVAR 28
44722: PUSH
44723: LD_INT 18
44725: ST_TO_ADDR
// hc_gallery :=  ;
44726: LD_ADDR_OWVAR 33
44730: PUSH
44731: LD_STRING 
44733: ST_TO_ADDR
// hc_name :=  ;
44734: LD_ADDR_OWVAR 26
44738: PUSH
44739: LD_STRING 
44741: ST_TO_ADDR
// end ;
44742: LD_VAR 0 1
44746: RET
// export function PrepareHorse ( ) ; begin
44747: LD_INT 0
44749: PPUSH
// uc_side := 0 ;
44750: LD_ADDR_OWVAR 20
44754: PUSH
44755: LD_INT 0
44757: ST_TO_ADDR
// uc_nation := 0 ;
44758: LD_ADDR_OWVAR 21
44762: PUSH
44763: LD_INT 0
44765: ST_TO_ADDR
// InitHc ;
44766: CALL_OW 19
// hc_class := class_horse ;
44770: LD_ADDR_OWVAR 28
44774: PUSH
44775: LD_INT 21
44777: ST_TO_ADDR
// hc_gallery :=  ;
44778: LD_ADDR_OWVAR 33
44782: PUSH
44783: LD_STRING 
44785: ST_TO_ADDR
// hc_name :=  ;
44786: LD_ADDR_OWVAR 26
44790: PUSH
44791: LD_STRING 
44793: ST_TO_ADDR
// end ;
44794: LD_VAR 0 1
44798: RET
// export function PrepareMastodont ( ) ; begin
44799: LD_INT 0
44801: PPUSH
// uc_side := 0 ;
44802: LD_ADDR_OWVAR 20
44806: PUSH
44807: LD_INT 0
44809: ST_TO_ADDR
// uc_nation := 0 ;
44810: LD_ADDR_OWVAR 21
44814: PUSH
44815: LD_INT 0
44817: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44818: LD_ADDR_OWVAR 37
44822: PUSH
44823: LD_INT 31
44825: ST_TO_ADDR
// vc_control := control_rider ;
44826: LD_ADDR_OWVAR 38
44830: PUSH
44831: LD_INT 4
44833: ST_TO_ADDR
// end ;
44834: LD_VAR 0 1
44838: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44839: LD_INT 0
44841: PPUSH
44842: PPUSH
44843: PPUSH
// uc_side = 0 ;
44844: LD_ADDR_OWVAR 20
44848: PUSH
44849: LD_INT 0
44851: ST_TO_ADDR
// uc_nation = 0 ;
44852: LD_ADDR_OWVAR 21
44856: PUSH
44857: LD_INT 0
44859: ST_TO_ADDR
// InitHc_All ( ) ;
44860: CALL_OW 584
// InitVc ;
44864: CALL_OW 20
// if mastodonts then
44868: LD_VAR 0 6
44872: IFFALSE 44939
// for i = 1 to mastodonts do
44874: LD_ADDR_VAR 0 11
44878: PUSH
44879: DOUBLE
44880: LD_INT 1
44882: DEC
44883: ST_TO_ADDR
44884: LD_VAR 0 6
44888: PUSH
44889: FOR_TO
44890: IFFALSE 44937
// begin vc_chassis := 31 ;
44892: LD_ADDR_OWVAR 37
44896: PUSH
44897: LD_INT 31
44899: ST_TO_ADDR
// vc_control := control_rider ;
44900: LD_ADDR_OWVAR 38
44904: PUSH
44905: LD_INT 4
44907: ST_TO_ADDR
// animal := CreateVehicle ;
44908: LD_ADDR_VAR 0 12
44912: PUSH
44913: CALL_OW 45
44917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44918: LD_VAR 0 12
44922: PPUSH
44923: LD_VAR 0 8
44927: PPUSH
44928: LD_INT 0
44930: PPUSH
44931: CALL 47081 0 3
// end ;
44935: GO 44889
44937: POP
44938: POP
// if horses then
44939: LD_VAR 0 5
44943: IFFALSE 45010
// for i = 1 to horses do
44945: LD_ADDR_VAR 0 11
44949: PUSH
44950: DOUBLE
44951: LD_INT 1
44953: DEC
44954: ST_TO_ADDR
44955: LD_VAR 0 5
44959: PUSH
44960: FOR_TO
44961: IFFALSE 45008
// begin hc_class := 21 ;
44963: LD_ADDR_OWVAR 28
44967: PUSH
44968: LD_INT 21
44970: ST_TO_ADDR
// hc_gallery :=  ;
44971: LD_ADDR_OWVAR 33
44975: PUSH
44976: LD_STRING 
44978: ST_TO_ADDR
// animal := CreateHuman ;
44979: LD_ADDR_VAR 0 12
44983: PUSH
44984: CALL_OW 44
44988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44989: LD_VAR 0 12
44993: PPUSH
44994: LD_VAR 0 8
44998: PPUSH
44999: LD_INT 0
45001: PPUSH
45002: CALL 47081 0 3
// end ;
45006: GO 44960
45008: POP
45009: POP
// if birds then
45010: LD_VAR 0 1
45014: IFFALSE 45081
// for i = 1 to birds do
45016: LD_ADDR_VAR 0 11
45020: PUSH
45021: DOUBLE
45022: LD_INT 1
45024: DEC
45025: ST_TO_ADDR
45026: LD_VAR 0 1
45030: PUSH
45031: FOR_TO
45032: IFFALSE 45079
// begin hc_class := 18 ;
45034: LD_ADDR_OWVAR 28
45038: PUSH
45039: LD_INT 18
45041: ST_TO_ADDR
// hc_gallery =  ;
45042: LD_ADDR_OWVAR 33
45046: PUSH
45047: LD_STRING 
45049: ST_TO_ADDR
// animal := CreateHuman ;
45050: LD_ADDR_VAR 0 12
45054: PUSH
45055: CALL_OW 44
45059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45060: LD_VAR 0 12
45064: PPUSH
45065: LD_VAR 0 8
45069: PPUSH
45070: LD_INT 0
45072: PPUSH
45073: CALL 47081 0 3
// end ;
45077: GO 45031
45079: POP
45080: POP
// if tigers then
45081: LD_VAR 0 2
45085: IFFALSE 45169
// for i = 1 to tigers do
45087: LD_ADDR_VAR 0 11
45091: PUSH
45092: DOUBLE
45093: LD_INT 1
45095: DEC
45096: ST_TO_ADDR
45097: LD_VAR 0 2
45101: PUSH
45102: FOR_TO
45103: IFFALSE 45167
// begin hc_class = class_tiger ;
45105: LD_ADDR_OWVAR 28
45109: PUSH
45110: LD_INT 14
45112: ST_TO_ADDR
// hc_gallery =  ;
45113: LD_ADDR_OWVAR 33
45117: PUSH
45118: LD_STRING 
45120: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45121: LD_ADDR_OWVAR 35
45125: PUSH
45126: LD_INT 7
45128: NEG
45129: PPUSH
45130: LD_INT 7
45132: PPUSH
45133: CALL_OW 12
45137: ST_TO_ADDR
// animal := CreateHuman ;
45138: LD_ADDR_VAR 0 12
45142: PUSH
45143: CALL_OW 44
45147: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45148: LD_VAR 0 12
45152: PPUSH
45153: LD_VAR 0 8
45157: PPUSH
45158: LD_INT 0
45160: PPUSH
45161: CALL 47081 0 3
// end ;
45165: GO 45102
45167: POP
45168: POP
// if apemans then
45169: LD_VAR 0 3
45173: IFFALSE 45296
// for i = 1 to apemans do
45175: LD_ADDR_VAR 0 11
45179: PUSH
45180: DOUBLE
45181: LD_INT 1
45183: DEC
45184: ST_TO_ADDR
45185: LD_VAR 0 3
45189: PUSH
45190: FOR_TO
45191: IFFALSE 45294
// begin hc_class = class_apeman ;
45193: LD_ADDR_OWVAR 28
45197: PUSH
45198: LD_INT 12
45200: ST_TO_ADDR
// hc_gallery =  ;
45201: LD_ADDR_OWVAR 33
45205: PUSH
45206: LD_STRING 
45208: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45209: LD_ADDR_OWVAR 35
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PPUSH
45218: LD_INT 2
45220: PPUSH
45221: CALL_OW 12
45225: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45226: LD_ADDR_OWVAR 31
45230: PUSH
45231: LD_INT 1
45233: PPUSH
45234: LD_INT 3
45236: PPUSH
45237: CALL_OW 12
45241: PUSH
45242: LD_INT 1
45244: PPUSH
45245: LD_INT 3
45247: PPUSH
45248: CALL_OW 12
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: ST_TO_ADDR
// animal := CreateHuman ;
45265: LD_ADDR_VAR 0 12
45269: PUSH
45270: CALL_OW 44
45274: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45275: LD_VAR 0 12
45279: PPUSH
45280: LD_VAR 0 8
45284: PPUSH
45285: LD_INT 0
45287: PPUSH
45288: CALL 47081 0 3
// end ;
45292: GO 45190
45294: POP
45295: POP
// if enchidnas then
45296: LD_VAR 0 4
45300: IFFALSE 45367
// for i = 1 to enchidnas do
45302: LD_ADDR_VAR 0 11
45306: PUSH
45307: DOUBLE
45308: LD_INT 1
45310: DEC
45311: ST_TO_ADDR
45312: LD_VAR 0 4
45316: PUSH
45317: FOR_TO
45318: IFFALSE 45365
// begin hc_class = 13 ;
45320: LD_ADDR_OWVAR 28
45324: PUSH
45325: LD_INT 13
45327: ST_TO_ADDR
// hc_gallery =  ;
45328: LD_ADDR_OWVAR 33
45332: PUSH
45333: LD_STRING 
45335: ST_TO_ADDR
// animal := CreateHuman ;
45336: LD_ADDR_VAR 0 12
45340: PUSH
45341: CALL_OW 44
45345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45346: LD_VAR 0 12
45350: PPUSH
45351: LD_VAR 0 8
45355: PPUSH
45356: LD_INT 0
45358: PPUSH
45359: CALL 47081 0 3
// end ;
45363: GO 45317
45365: POP
45366: POP
// if fishes then
45367: LD_VAR 0 7
45371: IFFALSE 45438
// for i = 1 to fishes do
45373: LD_ADDR_VAR 0 11
45377: PUSH
45378: DOUBLE
45379: LD_INT 1
45381: DEC
45382: ST_TO_ADDR
45383: LD_VAR 0 7
45387: PUSH
45388: FOR_TO
45389: IFFALSE 45436
// begin hc_class = 20 ;
45391: LD_ADDR_OWVAR 28
45395: PUSH
45396: LD_INT 20
45398: ST_TO_ADDR
// hc_gallery =  ;
45399: LD_ADDR_OWVAR 33
45403: PUSH
45404: LD_STRING 
45406: ST_TO_ADDR
// animal := CreateHuman ;
45407: LD_ADDR_VAR 0 12
45411: PUSH
45412: CALL_OW 44
45416: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45417: LD_VAR 0 12
45421: PPUSH
45422: LD_VAR 0 9
45426: PPUSH
45427: LD_INT 0
45429: PPUSH
45430: CALL 47081 0 3
// end ;
45434: GO 45388
45436: POP
45437: POP
// end ;
45438: LD_VAR 0 10
45442: RET
// export function WantHeal ( sci , unit ) ; begin
45443: LD_INT 0
45445: PPUSH
// if GetTaskList ( sci ) > 0 then
45446: LD_VAR 0 1
45450: PPUSH
45451: CALL_OW 437
45455: PUSH
45456: LD_INT 0
45458: GREATER
45459: IFFALSE 45531
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 437
45470: PUSH
45471: LD_INT 1
45473: ARRAY
45474: PUSH
45475: LD_INT 1
45477: ARRAY
45478: PUSH
45479: LD_STRING l
45481: EQUAL
45482: IFFALSE 45509
45484: PUSH
45485: LD_VAR 0 1
45489: PPUSH
45490: CALL_OW 437
45494: PUSH
45495: LD_INT 1
45497: ARRAY
45498: PUSH
45499: LD_INT 4
45501: ARRAY
45502: PUSH
45503: LD_VAR 0 2
45507: EQUAL
45508: AND
45509: IFFALSE 45521
// result := true else
45511: LD_ADDR_VAR 0 3
45515: PUSH
45516: LD_INT 1
45518: ST_TO_ADDR
45519: GO 45529
// result := false ;
45521: LD_ADDR_VAR 0 3
45525: PUSH
45526: LD_INT 0
45528: ST_TO_ADDR
// end else
45529: GO 45539
// result := false ;
45531: LD_ADDR_VAR 0 3
45535: PUSH
45536: LD_INT 0
45538: ST_TO_ADDR
// end ;
45539: LD_VAR 0 3
45543: RET
// export function HealTarget ( sci ) ; begin
45544: LD_INT 0
45546: PPUSH
// if not sci then
45547: LD_VAR 0 1
45551: NOT
45552: IFFALSE 45556
// exit ;
45554: GO 45621
// result := 0 ;
45556: LD_ADDR_VAR 0 2
45560: PUSH
45561: LD_INT 0
45563: ST_TO_ADDR
// if GetTaskList ( sci ) then
45564: LD_VAR 0 1
45568: PPUSH
45569: CALL_OW 437
45573: IFFALSE 45621
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45575: LD_VAR 0 1
45579: PPUSH
45580: CALL_OW 437
45584: PUSH
45585: LD_INT 1
45587: ARRAY
45588: PUSH
45589: LD_INT 1
45591: ARRAY
45592: PUSH
45593: LD_STRING l
45595: EQUAL
45596: IFFALSE 45621
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45598: LD_ADDR_VAR 0 2
45602: PUSH
45603: LD_VAR 0 1
45607: PPUSH
45608: CALL_OW 437
45612: PUSH
45613: LD_INT 1
45615: ARRAY
45616: PUSH
45617: LD_INT 4
45619: ARRAY
45620: ST_TO_ADDR
// end ;
45621: LD_VAR 0 2
45625: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45626: LD_INT 0
45628: PPUSH
45629: PPUSH
45630: PPUSH
45631: PPUSH
// if not base_units then
45632: LD_VAR 0 1
45636: NOT
45637: IFFALSE 45641
// exit ;
45639: GO 45728
// result := false ;
45641: LD_ADDR_VAR 0 2
45645: PUSH
45646: LD_INT 0
45648: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45649: LD_ADDR_VAR 0 5
45653: PUSH
45654: LD_VAR 0 1
45658: PPUSH
45659: LD_INT 21
45661: PUSH
45662: LD_INT 3
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PPUSH
45669: CALL_OW 72
45673: ST_TO_ADDR
// if not tmp then
45674: LD_VAR 0 5
45678: NOT
45679: IFFALSE 45683
// exit ;
45681: GO 45728
// for i in tmp do
45683: LD_ADDR_VAR 0 3
45687: PUSH
45688: LD_VAR 0 5
45692: PUSH
45693: FOR_IN
45694: IFFALSE 45726
// begin result := EnemyInRange ( i , 22 ) ;
45696: LD_ADDR_VAR 0 2
45700: PUSH
45701: LD_VAR 0 3
45705: PPUSH
45706: LD_INT 22
45708: PPUSH
45709: CALL 43153 0 2
45713: ST_TO_ADDR
// if result then
45714: LD_VAR 0 2
45718: IFFALSE 45724
// exit ;
45720: POP
45721: POP
45722: GO 45728
// end ;
45724: GO 45693
45726: POP
45727: POP
// end ;
45728: LD_VAR 0 2
45732: RET
// export function FilterByTag ( units , tag ) ; begin
45733: LD_INT 0
45735: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45736: LD_ADDR_VAR 0 3
45740: PUSH
45741: LD_VAR 0 1
45745: PPUSH
45746: LD_INT 120
45748: PUSH
45749: LD_VAR 0 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PPUSH
45758: CALL_OW 72
45762: ST_TO_ADDR
// end ;
45763: LD_VAR 0 3
45767: RET
// export function IsDriver ( un ) ; begin
45768: LD_INT 0
45770: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45771: LD_ADDR_VAR 0 2
45775: PUSH
45776: LD_VAR 0 1
45780: PUSH
45781: LD_INT 55
45783: PUSH
45784: EMPTY
45785: LIST
45786: PPUSH
45787: CALL_OW 69
45791: IN
45792: ST_TO_ADDR
// end ;
45793: LD_VAR 0 2
45797: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45798: LD_INT 0
45800: PPUSH
45801: PPUSH
// list := [ ] ;
45802: LD_ADDR_VAR 0 5
45806: PUSH
45807: EMPTY
45808: ST_TO_ADDR
// case d of 0 :
45809: LD_VAR 0 3
45813: PUSH
45814: LD_INT 0
45816: DOUBLE
45817: EQUAL
45818: IFTRUE 45822
45820: GO 45955
45822: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45823: LD_ADDR_VAR 0 5
45827: PUSH
45828: LD_VAR 0 1
45832: PUSH
45833: LD_INT 4
45835: MINUS
45836: PUSH
45837: LD_VAR 0 2
45841: PUSH
45842: LD_INT 4
45844: MINUS
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: PUSH
45854: LD_VAR 0 1
45858: PUSH
45859: LD_INT 3
45861: MINUS
45862: PUSH
45863: LD_VAR 0 2
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: LIST
45875: PUSH
45876: LD_VAR 0 1
45880: PUSH
45881: LD_INT 4
45883: PLUS
45884: PUSH
45885: LD_VAR 0 2
45889: PUSH
45890: LD_INT 4
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: PUSH
45898: LD_VAR 0 1
45902: PUSH
45903: LD_INT 3
45905: PLUS
45906: PUSH
45907: LD_VAR 0 2
45911: PUSH
45912: LD_INT 3
45914: PLUS
45915: PUSH
45916: LD_INT 5
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: LIST
45923: PUSH
45924: LD_VAR 0 1
45928: PUSH
45929: LD_VAR 0 2
45933: PUSH
45934: LD_INT 4
45936: PLUS
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
// end ; 1 :
45953: GO 46653
45955: LD_INT 1
45957: DOUBLE
45958: EQUAL
45959: IFTRUE 45963
45961: GO 46096
45963: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45964: LD_ADDR_VAR 0 5
45968: PUSH
45969: LD_VAR 0 1
45973: PUSH
45974: LD_VAR 0 2
45978: PUSH
45979: LD_INT 4
45981: MINUS
45982: PUSH
45983: LD_INT 3
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: PUSH
45991: LD_VAR 0 1
45995: PUSH
45996: LD_INT 3
45998: MINUS
45999: PUSH
46000: LD_VAR 0 2
46004: PUSH
46005: LD_INT 3
46007: MINUS
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: PUSH
46017: LD_VAR 0 1
46021: PUSH
46022: LD_INT 4
46024: MINUS
46025: PUSH
46026: LD_VAR 0 2
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: PUSH
46039: LD_VAR 0 1
46043: PUSH
46044: LD_VAR 0 2
46048: PUSH
46049: LD_INT 3
46051: PLUS
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: LIST
46060: PUSH
46061: LD_VAR 0 1
46065: PUSH
46066: LD_INT 4
46068: PLUS
46069: PUSH
46070: LD_VAR 0 2
46074: PUSH
46075: LD_INT 4
46077: PLUS
46078: PUSH
46079: LD_INT 5
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: ST_TO_ADDR
// end ; 2 :
46094: GO 46653
46096: LD_INT 2
46098: DOUBLE
46099: EQUAL
46100: IFTRUE 46104
46102: GO 46233
46104: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46105: LD_ADDR_VAR 0 5
46109: PUSH
46110: LD_VAR 0 1
46114: PUSH
46115: LD_VAR 0 2
46119: PUSH
46120: LD_INT 3
46122: MINUS
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: PUSH
46132: LD_VAR 0 1
46136: PUSH
46137: LD_INT 4
46139: PLUS
46140: PUSH
46141: LD_VAR 0 2
46145: PUSH
46146: LD_INT 4
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: PUSH
46154: LD_VAR 0 1
46158: PUSH
46159: LD_VAR 0 2
46163: PUSH
46164: LD_INT 4
46166: PLUS
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: PUSH
46176: LD_VAR 0 1
46180: PUSH
46181: LD_INT 3
46183: MINUS
46184: PUSH
46185: LD_VAR 0 2
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: PUSH
46198: LD_VAR 0 1
46202: PUSH
46203: LD_INT 4
46205: MINUS
46206: PUSH
46207: LD_VAR 0 2
46211: PUSH
46212: LD_INT 4
46214: MINUS
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: LIST
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: ST_TO_ADDR
// end ; 3 :
46231: GO 46653
46233: LD_INT 3
46235: DOUBLE
46236: EQUAL
46237: IFTRUE 46241
46239: GO 46374
46241: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46242: LD_ADDR_VAR 0 5
46246: PUSH
46247: LD_VAR 0 1
46251: PUSH
46252: LD_INT 3
46254: PLUS
46255: PUSH
46256: LD_VAR 0 2
46260: PUSH
46261: LD_INT 4
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: PUSH
46269: LD_VAR 0 1
46273: PUSH
46274: LD_INT 4
46276: PLUS
46277: PUSH
46278: LD_VAR 0 2
46282: PUSH
46283: LD_INT 4
46285: PLUS
46286: PUSH
46287: LD_INT 5
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: PUSH
46295: LD_VAR 0 1
46299: PUSH
46300: LD_INT 4
46302: MINUS
46303: PUSH
46304: LD_VAR 0 2
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: PUSH
46317: LD_VAR 0 1
46321: PUSH
46322: LD_VAR 0 2
46326: PUSH
46327: LD_INT 4
46329: MINUS
46330: PUSH
46331: LD_INT 3
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: LIST
46338: PUSH
46339: LD_VAR 0 1
46343: PUSH
46344: LD_INT 3
46346: MINUS
46347: PUSH
46348: LD_VAR 0 2
46352: PUSH
46353: LD_INT 3
46355: MINUS
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: LIST
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: ST_TO_ADDR
// end ; 4 :
46372: GO 46653
46374: LD_INT 4
46376: DOUBLE
46377: EQUAL
46378: IFTRUE 46382
46380: GO 46515
46382: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46383: LD_ADDR_VAR 0 5
46387: PUSH
46388: LD_VAR 0 1
46392: PUSH
46393: LD_VAR 0 2
46397: PUSH
46398: LD_INT 4
46400: PLUS
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: LIST
46409: PUSH
46410: LD_VAR 0 1
46414: PUSH
46415: LD_INT 3
46417: PLUS
46418: PUSH
46419: LD_VAR 0 2
46423: PUSH
46424: LD_INT 3
46426: PLUS
46427: PUSH
46428: LD_INT 5
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: LIST
46435: PUSH
46436: LD_VAR 0 1
46440: PUSH
46441: LD_INT 4
46443: PLUS
46444: PUSH
46445: LD_VAR 0 2
46449: PUSH
46450: LD_INT 4
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: PUSH
46458: LD_VAR 0 1
46462: PUSH
46463: LD_VAR 0 2
46467: PUSH
46468: LD_INT 3
46470: MINUS
46471: PUSH
46472: LD_INT 3
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: LIST
46479: PUSH
46480: LD_VAR 0 1
46484: PUSH
46485: LD_INT 4
46487: MINUS
46488: PUSH
46489: LD_VAR 0 2
46493: PUSH
46494: LD_INT 4
46496: MINUS
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: ST_TO_ADDR
// end ; 5 :
46513: GO 46653
46515: LD_INT 5
46517: DOUBLE
46518: EQUAL
46519: IFTRUE 46523
46521: GO 46652
46523: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46524: LD_ADDR_VAR 0 5
46528: PUSH
46529: LD_VAR 0 1
46533: PUSH
46534: LD_INT 4
46536: MINUS
46537: PUSH
46538: LD_VAR 0 2
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: PUSH
46551: LD_VAR 0 1
46555: PUSH
46556: LD_VAR 0 2
46560: PUSH
46561: LD_INT 4
46563: MINUS
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: PUSH
46573: LD_VAR 0 1
46577: PUSH
46578: LD_INT 4
46580: PLUS
46581: PUSH
46582: LD_VAR 0 2
46586: PUSH
46587: LD_INT 4
46589: PLUS
46590: PUSH
46591: LD_INT 5
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: PUSH
46599: LD_VAR 0 1
46603: PUSH
46604: LD_INT 3
46606: PLUS
46607: PUSH
46608: LD_VAR 0 2
46612: PUSH
46613: LD_INT 4
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: PUSH
46621: LD_VAR 0 1
46625: PUSH
46626: LD_VAR 0 2
46630: PUSH
46631: LD_INT 3
46633: PLUS
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: LIST
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
// end ; end ;
46650: GO 46653
46652: POP
// result := list ;
46653: LD_ADDR_VAR 0 4
46657: PUSH
46658: LD_VAR 0 5
46662: ST_TO_ADDR
// end ;
46663: LD_VAR 0 4
46667: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46668: LD_INT 0
46670: PPUSH
46671: PPUSH
46672: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46673: LD_VAR 0 1
46677: NOT
46678: IFTRUE 46706
46680: PUSH
46681: LD_VAR 0 2
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 3
46694: PUSH
46695: LD_INT 4
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: IN
46704: NOT
46705: OR
46706: IFFALSE 46710
// exit ;
46708: GO 46793
// tmp := [ ] ;
46710: LD_ADDR_VAR 0 5
46714: PUSH
46715: EMPTY
46716: ST_TO_ADDR
// for i in units do
46717: LD_ADDR_VAR 0 4
46721: PUSH
46722: LD_VAR 0 1
46726: PUSH
46727: FOR_IN
46728: IFFALSE 46762
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46730: LD_ADDR_VAR 0 5
46734: PUSH
46735: LD_VAR 0 5
46739: PPUSH
46740: LD_VAR 0 4
46744: PPUSH
46745: LD_VAR 0 2
46749: PPUSH
46750: CALL_OW 259
46754: PPUSH
46755: CALL 48188 0 2
46759: ST_TO_ADDR
46760: GO 46727
46762: POP
46763: POP
// if not tmp then
46764: LD_VAR 0 5
46768: NOT
46769: IFFALSE 46773
// exit ;
46771: GO 46793
// result := SortListByListDesc ( units , tmp ) ;
46773: LD_ADDR_VAR 0 3
46777: PUSH
46778: LD_VAR 0 1
46782: PPUSH
46783: LD_VAR 0 5
46787: PPUSH
46788: CALL_OW 77
46792: ST_TO_ADDR
// end ;
46793: LD_VAR 0 3
46797: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46798: LD_INT 0
46800: PPUSH
46801: PPUSH
46802: PPUSH
// result := false ;
46803: LD_ADDR_VAR 0 3
46807: PUSH
46808: LD_INT 0
46810: ST_TO_ADDR
// if not building then
46811: LD_VAR 0 2
46815: NOT
46816: IFFALSE 46820
// exit ;
46818: GO 46964
// x := GetX ( building ) ;
46820: LD_ADDR_VAR 0 4
46824: PUSH
46825: LD_VAR 0 2
46829: PPUSH
46830: CALL_OW 250
46834: ST_TO_ADDR
// y := GetY ( building ) ;
46835: LD_ADDR_VAR 0 5
46839: PUSH
46840: LD_VAR 0 2
46844: PPUSH
46845: CALL_OW 251
46849: ST_TO_ADDR
// if not x or not y then
46850: LD_VAR 0 4
46854: NOT
46855: IFTRUE 46864
46857: PUSH
46858: LD_VAR 0 5
46862: NOT
46863: OR
46864: IFFALSE 46868
// exit ;
46866: GO 46964
// if GetTaskList ( unit ) then
46868: LD_VAR 0 1
46872: PPUSH
46873: CALL_OW 437
46877: IFFALSE 46964
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46879: LD_STRING e
46881: PUSH
46882: LD_VAR 0 1
46886: PPUSH
46887: CALL_OW 437
46891: PUSH
46892: LD_INT 1
46894: ARRAY
46895: PUSH
46896: LD_INT 1
46898: ARRAY
46899: EQUAL
46900: IFFALSE 46927
46902: PUSH
46903: LD_VAR 0 4
46907: PUSH
46908: LD_VAR 0 1
46912: PPUSH
46913: CALL_OW 437
46917: PUSH
46918: LD_INT 1
46920: ARRAY
46921: PUSH
46922: LD_INT 2
46924: ARRAY
46925: EQUAL
46926: AND
46927: IFFALSE 46954
46929: PUSH
46930: LD_VAR 0 5
46934: PUSH
46935: LD_VAR 0 1
46939: PPUSH
46940: CALL_OW 437
46944: PUSH
46945: LD_INT 1
46947: ARRAY
46948: PUSH
46949: LD_INT 3
46951: ARRAY
46952: EQUAL
46953: AND
46954: IFFALSE 46964
// result := true end ;
46956: LD_ADDR_VAR 0 3
46960: PUSH
46961: LD_INT 1
46963: ST_TO_ADDR
// end ;
46964: LD_VAR 0 3
46968: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46969: LD_INT 0
46971: PPUSH
// result := false ;
46972: LD_ADDR_VAR 0 4
46976: PUSH
46977: LD_INT 0
46979: ST_TO_ADDR
// if GetTaskList ( unit ) then
46980: LD_VAR 0 1
46984: PPUSH
46985: CALL_OW 437
46989: IFFALSE 47076
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46991: LD_STRING M
46993: PUSH
46994: LD_VAR 0 1
46998: PPUSH
46999: CALL_OW 437
47003: PUSH
47004: LD_INT 1
47006: ARRAY
47007: PUSH
47008: LD_INT 1
47010: ARRAY
47011: EQUAL
47012: IFFALSE 47039
47014: PUSH
47015: LD_VAR 0 2
47019: PUSH
47020: LD_VAR 0 1
47024: PPUSH
47025: CALL_OW 437
47029: PUSH
47030: LD_INT 1
47032: ARRAY
47033: PUSH
47034: LD_INT 2
47036: ARRAY
47037: EQUAL
47038: AND
47039: IFFALSE 47066
47041: PUSH
47042: LD_VAR 0 3
47046: PUSH
47047: LD_VAR 0 1
47051: PPUSH
47052: CALL_OW 437
47056: PUSH
47057: LD_INT 1
47059: ARRAY
47060: PUSH
47061: LD_INT 3
47063: ARRAY
47064: EQUAL
47065: AND
47066: IFFALSE 47076
// result := true ;
47068: LD_ADDR_VAR 0 4
47072: PUSH
47073: LD_INT 1
47075: ST_TO_ADDR
// end ; end ;
47076: LD_VAR 0 4
47080: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47081: LD_INT 0
47083: PPUSH
47084: PPUSH
47085: PPUSH
47086: PPUSH
// if not unit or not area then
47087: LD_VAR 0 1
47091: NOT
47092: IFTRUE 47101
47094: PUSH
47095: LD_VAR 0 2
47099: NOT
47100: OR
47101: IFFALSE 47105
// exit ;
47103: GO 47281
// tmp := AreaToList ( area , i ) ;
47105: LD_ADDR_VAR 0 6
47109: PUSH
47110: LD_VAR 0 2
47114: PPUSH
47115: LD_VAR 0 5
47119: PPUSH
47120: CALL_OW 517
47124: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47125: LD_ADDR_VAR 0 5
47129: PUSH
47130: DOUBLE
47131: LD_INT 1
47133: DEC
47134: ST_TO_ADDR
47135: LD_VAR 0 6
47139: PUSH
47140: LD_INT 1
47142: ARRAY
47143: PUSH
47144: FOR_TO
47145: IFFALSE 47279
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47147: LD_ADDR_VAR 0 7
47151: PUSH
47152: LD_VAR 0 6
47156: PUSH
47157: LD_INT 1
47159: ARRAY
47160: PUSH
47161: LD_VAR 0 5
47165: ARRAY
47166: PUSH
47167: LD_VAR 0 6
47171: PUSH
47172: LD_INT 2
47174: ARRAY
47175: PUSH
47176: LD_VAR 0 5
47180: ARRAY
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47186: LD_INT 92
47188: PUSH
47189: LD_VAR 0 7
47193: PUSH
47194: LD_INT 1
47196: ARRAY
47197: PUSH
47198: LD_VAR 0 7
47202: PUSH
47203: LD_INT 2
47205: ARRAY
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: PPUSH
47216: CALL_OW 69
47220: PUSH
47221: LD_INT 0
47223: EQUAL
47224: IFFALSE 47277
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47226: LD_VAR 0 1
47230: PPUSH
47231: LD_VAR 0 7
47235: PUSH
47236: LD_INT 1
47238: ARRAY
47239: PPUSH
47240: LD_VAR 0 7
47244: PUSH
47245: LD_INT 2
47247: ARRAY
47248: PPUSH
47249: LD_VAR 0 3
47253: PPUSH
47254: CALL_OW 48
// result := IsPlaced ( unit ) ;
47258: LD_ADDR_VAR 0 4
47262: PUSH
47263: LD_VAR 0 1
47267: PPUSH
47268: CALL_OW 305
47272: ST_TO_ADDR
// exit ;
47273: POP
47274: POP
47275: GO 47281
// end ; end ;
47277: GO 47144
47279: POP
47280: POP
// end ;
47281: LD_VAR 0 4
47285: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47286: LD_INT 0
47288: PPUSH
47289: PPUSH
47290: PPUSH
// if not side or side > 8 then
47291: LD_VAR 0 1
47295: NOT
47296: IFTRUE 47308
47298: PUSH
47299: LD_VAR 0 1
47303: PUSH
47304: LD_INT 8
47306: GREATER
47307: OR
47308: IFFALSE 47312
// exit ;
47310: GO 47499
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47312: LD_ADDR_VAR 0 4
47316: PUSH
47317: LD_INT 22
47319: PUSH
47320: LD_VAR 0 1
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 21
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PPUSH
47343: CALL_OW 69
47347: ST_TO_ADDR
// if not tmp then
47348: LD_VAR 0 4
47352: NOT
47353: IFFALSE 47357
// exit ;
47355: GO 47499
// enable_addtolog := true ;
47357: LD_ADDR_OWVAR 81
47361: PUSH
47362: LD_INT 1
47364: ST_TO_ADDR
// AddToLog ( [ ) ;
47365: LD_STRING [
47367: PPUSH
47368: CALL_OW 561
// for i in tmp do
47372: LD_ADDR_VAR 0 3
47376: PUSH
47377: LD_VAR 0 4
47381: PUSH
47382: FOR_IN
47383: IFFALSE 47490
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47385: LD_STRING [
47387: PUSH
47388: LD_VAR 0 3
47392: PPUSH
47393: CALL_OW 266
47397: STR
47398: PUSH
47399: LD_STRING , 
47401: STR
47402: PUSH
47403: LD_VAR 0 3
47407: PPUSH
47408: CALL_OW 250
47412: STR
47413: PUSH
47414: LD_STRING , 
47416: STR
47417: PUSH
47418: LD_VAR 0 3
47422: PPUSH
47423: CALL_OW 251
47427: STR
47428: PUSH
47429: LD_STRING , 
47431: STR
47432: PUSH
47433: LD_VAR 0 3
47437: PPUSH
47438: CALL_OW 254
47442: STR
47443: PUSH
47444: LD_STRING , 
47446: STR
47447: PUSH
47448: LD_VAR 0 3
47452: PPUSH
47453: LD_INT 1
47455: PPUSH
47456: CALL_OW 268
47460: STR
47461: PUSH
47462: LD_STRING , 
47464: STR
47465: PUSH
47466: LD_VAR 0 3
47470: PPUSH
47471: LD_INT 2
47473: PPUSH
47474: CALL_OW 268
47478: STR
47479: PUSH
47480: LD_STRING ],
47482: STR
47483: PPUSH
47484: CALL_OW 561
// end ;
47488: GO 47382
47490: POP
47491: POP
// AddToLog ( ]; ) ;
47492: LD_STRING ];
47494: PPUSH
47495: CALL_OW 561
// end ;
47499: LD_VAR 0 2
47503: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47504: LD_INT 0
47506: PPUSH
47507: PPUSH
47508: PPUSH
47509: PPUSH
47510: PPUSH
// if not area or not rate or not max then
47511: LD_VAR 0 1
47515: NOT
47516: IFTRUE 47525
47518: PUSH
47519: LD_VAR 0 2
47523: NOT
47524: OR
47525: IFTRUE 47534
47527: PUSH
47528: LD_VAR 0 4
47532: NOT
47533: OR
47534: IFFALSE 47538
// exit ;
47536: GO 47727
// while 1 do
47538: LD_INT 1
47540: IFFALSE 47727
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47542: LD_ADDR_VAR 0 9
47546: PUSH
47547: LD_VAR 0 1
47551: PPUSH
47552: LD_INT 1
47554: PPUSH
47555: CALL_OW 287
47559: PUSH
47560: LD_INT 10
47562: MUL
47563: ST_TO_ADDR
// r := rate / 10 ;
47564: LD_ADDR_VAR 0 7
47568: PUSH
47569: LD_VAR 0 2
47573: PUSH
47574: LD_INT 10
47576: DIVREAL
47577: ST_TO_ADDR
// time := 1 1$00 ;
47578: LD_ADDR_VAR 0 8
47582: PUSH
47583: LD_INT 2100
47585: ST_TO_ADDR
// if amount < min then
47586: LD_VAR 0 9
47590: PUSH
47591: LD_VAR 0 3
47595: LESS
47596: IFFALSE 47614
// r := r * 2 else
47598: LD_ADDR_VAR 0 7
47602: PUSH
47603: LD_VAR 0 7
47607: PUSH
47608: LD_INT 2
47610: MUL
47611: ST_TO_ADDR
47612: GO 47640
// if amount > max then
47614: LD_VAR 0 9
47618: PUSH
47619: LD_VAR 0 4
47623: GREATER
47624: IFFALSE 47640
// r := r / 2 ;
47626: LD_ADDR_VAR 0 7
47630: PUSH
47631: LD_VAR 0 7
47635: PUSH
47636: LD_INT 2
47638: DIVREAL
47639: ST_TO_ADDR
// time := time / r ;
47640: LD_ADDR_VAR 0 8
47644: PUSH
47645: LD_VAR 0 8
47649: PUSH
47650: LD_VAR 0 7
47654: DIVREAL
47655: ST_TO_ADDR
// if time < 0 then
47656: LD_VAR 0 8
47660: PUSH
47661: LD_INT 0
47663: LESS
47664: IFFALSE 47681
// time := time * - 1 ;
47666: LD_ADDR_VAR 0 8
47670: PUSH
47671: LD_VAR 0 8
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: MUL
47680: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47681: LD_VAR 0 8
47685: PUSH
47686: LD_INT 35
47688: PPUSH
47689: LD_INT 875
47691: PPUSH
47692: CALL_OW 12
47696: PLUS
47697: PPUSH
47698: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47702: LD_INT 1
47704: PPUSH
47705: LD_INT 5
47707: PPUSH
47708: CALL_OW 12
47712: PPUSH
47713: LD_VAR 0 1
47717: PPUSH
47718: LD_INT 1
47720: PPUSH
47721: CALL_OW 55
// end ;
47725: GO 47538
// end ;
47727: LD_VAR 0 5
47731: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47732: LD_INT 0
47734: PPUSH
47735: PPUSH
47736: PPUSH
47737: PPUSH
47738: PPUSH
47739: PPUSH
47740: PPUSH
47741: PPUSH
// if not turrets or not factories then
47742: LD_VAR 0 1
47746: NOT
47747: IFTRUE 47756
47749: PUSH
47750: LD_VAR 0 2
47754: NOT
47755: OR
47756: IFFALSE 47760
// exit ;
47758: GO 48067
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47760: LD_ADDR_VAR 0 10
47764: PUSH
47765: LD_INT 5
47767: PUSH
47768: LD_INT 6
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: LD_INT 4
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: LD_INT 5
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 24
47802: PUSH
47803: LD_INT 25
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 23
47812: PUSH
47813: LD_INT 27
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 42
47826: PUSH
47827: LD_INT 43
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 44
47836: PUSH
47837: LD_INT 46
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 45
47846: PUSH
47847: LD_INT 47
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: ST_TO_ADDR
// result := [ ] ;
47864: LD_ADDR_VAR 0 3
47868: PUSH
47869: EMPTY
47870: ST_TO_ADDR
// for i in turrets do
47871: LD_ADDR_VAR 0 4
47875: PUSH
47876: LD_VAR 0 1
47880: PUSH
47881: FOR_IN
47882: IFFALSE 48065
// begin nat := GetNation ( i ) ;
47884: LD_ADDR_VAR 0 7
47888: PUSH
47889: LD_VAR 0 4
47893: PPUSH
47894: CALL_OW 248
47898: ST_TO_ADDR
// weapon := 0 ;
47899: LD_ADDR_VAR 0 8
47903: PUSH
47904: LD_INT 0
47906: ST_TO_ADDR
// if not nat then
47907: LD_VAR 0 7
47911: NOT
47912: IFFALSE 47916
// continue ;
47914: GO 47881
// for j in list [ nat ] do
47916: LD_ADDR_VAR 0 5
47920: PUSH
47921: LD_VAR 0 10
47925: PUSH
47926: LD_VAR 0 7
47930: ARRAY
47931: PUSH
47932: FOR_IN
47933: IFFALSE 47974
// if GetBWeapon ( i ) = j [ 1 ] then
47935: LD_VAR 0 4
47939: PPUSH
47940: CALL_OW 269
47944: PUSH
47945: LD_VAR 0 5
47949: PUSH
47950: LD_INT 1
47952: ARRAY
47953: EQUAL
47954: IFFALSE 47972
// begin weapon := j [ 2 ] ;
47956: LD_ADDR_VAR 0 8
47960: PUSH
47961: LD_VAR 0 5
47965: PUSH
47966: LD_INT 2
47968: ARRAY
47969: ST_TO_ADDR
// break ;
47970: GO 47974
// end ;
47972: GO 47932
47974: POP
47975: POP
// if not weapon then
47976: LD_VAR 0 8
47980: NOT
47981: IFFALSE 47985
// continue ;
47983: GO 47881
// for k in factories do
47985: LD_ADDR_VAR 0 6
47989: PUSH
47990: LD_VAR 0 2
47994: PUSH
47995: FOR_IN
47996: IFFALSE 48061
// begin weapons := AvailableWeaponList ( k ) ;
47998: LD_ADDR_VAR 0 9
48002: PUSH
48003: LD_VAR 0 6
48007: PPUSH
48008: CALL_OW 478
48012: ST_TO_ADDR
// if not weapons then
48013: LD_VAR 0 9
48017: NOT
48018: IFFALSE 48022
// continue ;
48020: GO 47995
// if weapon in weapons then
48022: LD_VAR 0 8
48026: PUSH
48027: LD_VAR 0 9
48031: IN
48032: IFFALSE 48059
// begin result := [ i , weapon ] ;
48034: LD_ADDR_VAR 0 3
48038: PUSH
48039: LD_VAR 0 4
48043: PUSH
48044: LD_VAR 0 8
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// exit ;
48053: POP
48054: POP
48055: POP
48056: POP
48057: GO 48067
// end ; end ;
48059: GO 47995
48061: POP
48062: POP
// end ;
48063: GO 47881
48065: POP
48066: POP
// end ;
48067: LD_VAR 0 3
48071: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48072: LD_INT 0
48074: PPUSH
// if not side or side > 8 then
48075: LD_VAR 0 3
48079: NOT
48080: IFTRUE 48092
48082: PUSH
48083: LD_VAR 0 3
48087: PUSH
48088: LD_INT 8
48090: GREATER
48091: OR
48092: IFFALSE 48096
// exit ;
48094: GO 48155
// if not range then
48096: LD_VAR 0 4
48100: NOT
48101: IFFALSE 48112
// range := - 12 ;
48103: LD_ADDR_VAR 0 4
48107: PUSH
48108: LD_INT 12
48110: NEG
48111: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48112: LD_VAR 0 1
48116: PPUSH
48117: LD_VAR 0 2
48121: PPUSH
48122: LD_VAR 0 3
48126: PPUSH
48127: LD_VAR 0 4
48131: PPUSH
48132: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48136: LD_VAR 0 1
48140: PPUSH
48141: LD_VAR 0 2
48145: PPUSH
48146: LD_VAR 0 3
48150: PPUSH
48151: CALL_OW 331
// end ;
48155: LD_VAR 0 5
48159: RET
// export function Video ( mode ) ; begin
48160: LD_INT 0
48162: PPUSH
// ingame_video = mode ;
48163: LD_ADDR_OWVAR 52
48167: PUSH
48168: LD_VAR 0 1
48172: ST_TO_ADDR
// interface_hidden = mode ;
48173: LD_ADDR_OWVAR 54
48177: PUSH
48178: LD_VAR 0 1
48182: ST_TO_ADDR
// end ;
48183: LD_VAR 0 2
48187: RET
// export function Join ( array , element ) ; begin
48188: LD_INT 0
48190: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48191: LD_ADDR_VAR 0 3
48195: PUSH
48196: LD_VAR 0 1
48200: PPUSH
48201: LD_VAR 0 1
48205: PUSH
48206: LD_INT 1
48208: PLUS
48209: PPUSH
48210: LD_VAR 0 2
48214: PPUSH
48215: CALL_OW 1
48219: ST_TO_ADDR
// end ;
48220: LD_VAR 0 3
48224: RET
// export function JoinUnion ( array , element ) ; begin
48225: LD_INT 0
48227: PPUSH
// result := array union element ;
48228: LD_ADDR_VAR 0 3
48232: PUSH
48233: LD_VAR 0 1
48237: PUSH
48238: LD_VAR 0 2
48242: UNION
48243: ST_TO_ADDR
// end ;
48244: LD_VAR 0 3
48248: RET
// export function GetBehemoths ( side ) ; begin
48249: LD_INT 0
48251: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48252: LD_ADDR_VAR 0 2
48256: PUSH
48257: LD_INT 22
48259: PUSH
48260: LD_VAR 0 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 31
48271: PUSH
48272: LD_INT 25
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PPUSH
48283: CALL_OW 69
48287: ST_TO_ADDR
// end ;
48288: LD_VAR 0 2
48292: RET
// export function Shuffle ( array ) ; var i , index ; begin
48293: LD_INT 0
48295: PPUSH
48296: PPUSH
48297: PPUSH
// result := [ ] ;
48298: LD_ADDR_VAR 0 2
48302: PUSH
48303: EMPTY
48304: ST_TO_ADDR
// if not array then
48305: LD_VAR 0 1
48309: NOT
48310: IFFALSE 48314
// exit ;
48312: GO 48413
// Randomize ;
48314: CALL_OW 10
// for i = array downto 1 do
48318: LD_ADDR_VAR 0 3
48322: PUSH
48323: DOUBLE
48324: LD_VAR 0 1
48328: INC
48329: ST_TO_ADDR
48330: LD_INT 1
48332: PUSH
48333: FOR_DOWNTO
48334: IFFALSE 48411
// begin index := rand ( 1 , array ) ;
48336: LD_ADDR_VAR 0 4
48340: PUSH
48341: LD_INT 1
48343: PPUSH
48344: LD_VAR 0 1
48348: PPUSH
48349: CALL_OW 12
48353: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48354: LD_ADDR_VAR 0 2
48358: PUSH
48359: LD_VAR 0 2
48363: PPUSH
48364: LD_VAR 0 2
48368: PUSH
48369: LD_INT 1
48371: PLUS
48372: PPUSH
48373: LD_VAR 0 1
48377: PUSH
48378: LD_VAR 0 4
48382: ARRAY
48383: PPUSH
48384: CALL_OW 2
48388: ST_TO_ADDR
// array := Delete ( array , index ) ;
48389: LD_ADDR_VAR 0 1
48393: PUSH
48394: LD_VAR 0 1
48398: PPUSH
48399: LD_VAR 0 4
48403: PPUSH
48404: CALL_OW 3
48408: ST_TO_ADDR
// end ;
48409: GO 48333
48411: POP
48412: POP
// end ;
48413: LD_VAR 0 2
48417: RET
// export function GetBaseMaterials ( base ) ; begin
48418: LD_INT 0
48420: PPUSH
// result := [ 0 , 0 , 0 ] ;
48421: LD_ADDR_VAR 0 2
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// if not base then
48440: LD_VAR 0 1
48444: NOT
48445: IFFALSE 48449
// exit ;
48447: GO 48498
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48449: LD_ADDR_VAR 0 2
48453: PUSH
48454: LD_VAR 0 1
48458: PPUSH
48459: LD_INT 1
48461: PPUSH
48462: CALL_OW 275
48466: PUSH
48467: LD_VAR 0 1
48471: PPUSH
48472: LD_INT 2
48474: PPUSH
48475: CALL_OW 275
48479: PUSH
48480: LD_VAR 0 1
48484: PPUSH
48485: LD_INT 3
48487: PPUSH
48488: CALL_OW 275
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: ST_TO_ADDR
// end ;
48498: LD_VAR 0 2
48502: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48503: LD_INT 0
48505: PPUSH
48506: PPUSH
// result := array ;
48507: LD_ADDR_VAR 0 3
48511: PUSH
48512: LD_VAR 0 1
48516: ST_TO_ADDR
// if size >= result then
48517: LD_VAR 0 2
48521: PUSH
48522: LD_VAR 0 3
48526: GREATEREQUAL
48527: IFFALSE 48531
// exit ;
48529: GO 48581
// if size then
48531: LD_VAR 0 2
48535: IFFALSE 48581
// for i := array downto size do
48537: LD_ADDR_VAR 0 4
48541: PUSH
48542: DOUBLE
48543: LD_VAR 0 1
48547: INC
48548: ST_TO_ADDR
48549: LD_VAR 0 2
48553: PUSH
48554: FOR_DOWNTO
48555: IFFALSE 48579
// result := Delete ( result , result ) ;
48557: LD_ADDR_VAR 0 3
48561: PUSH
48562: LD_VAR 0 3
48566: PPUSH
48567: LD_VAR 0 3
48571: PPUSH
48572: CALL_OW 3
48576: ST_TO_ADDR
48577: GO 48554
48579: POP
48580: POP
// end ;
48581: LD_VAR 0 3
48585: RET
// export function ComExit ( unit ) ; var tmp ; begin
48586: LD_INT 0
48588: PPUSH
48589: PPUSH
// if not IsInUnit ( unit ) then
48590: LD_VAR 0 1
48594: PPUSH
48595: CALL_OW 310
48599: NOT
48600: IFFALSE 48604
// exit ;
48602: GO 48664
// tmp := IsInUnit ( unit ) ;
48604: LD_ADDR_VAR 0 3
48608: PUSH
48609: LD_VAR 0 1
48613: PPUSH
48614: CALL_OW 310
48618: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48619: LD_VAR 0 3
48623: PPUSH
48624: CALL_OW 247
48628: PUSH
48629: LD_INT 2
48631: EQUAL
48632: IFFALSE 48645
// ComExitVehicle ( unit ) else
48634: LD_VAR 0 1
48638: PPUSH
48639: CALL_OW 121
48643: GO 48654
// ComExitBuilding ( unit ) ;
48645: LD_VAR 0 1
48649: PPUSH
48650: CALL_OW 122
// result := tmp ;
48654: LD_ADDR_VAR 0 2
48658: PUSH
48659: LD_VAR 0 3
48663: ST_TO_ADDR
// end ;
48664: LD_VAR 0 2
48668: RET
// export function ComExitAll ( units ) ; var i ; begin
48669: LD_INT 0
48671: PPUSH
48672: PPUSH
// if not units then
48673: LD_VAR 0 1
48677: NOT
48678: IFFALSE 48682
// exit ;
48680: GO 48708
// for i in units do
48682: LD_ADDR_VAR 0 3
48686: PUSH
48687: LD_VAR 0 1
48691: PUSH
48692: FOR_IN
48693: IFFALSE 48706
// ComExit ( i ) ;
48695: LD_VAR 0 3
48699: PPUSH
48700: CALL 48586 0 1
48704: GO 48692
48706: POP
48707: POP
// end ;
48708: LD_VAR 0 2
48712: RET
// export function ResetHc ; begin
48713: LD_INT 0
48715: PPUSH
// InitHc ;
48716: CALL_OW 19
// hc_importance := 0 ;
48720: LD_ADDR_OWVAR 32
48724: PUSH
48725: LD_INT 0
48727: ST_TO_ADDR
// end ;
48728: LD_VAR 0 1
48732: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48733: LD_INT 0
48735: PPUSH
48736: PPUSH
48737: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48738: LD_ADDR_VAR 0 6
48742: PUSH
48743: LD_VAR 0 1
48747: PUSH
48748: LD_VAR 0 3
48752: PLUS
48753: PUSH
48754: LD_INT 2
48756: DIV
48757: ST_TO_ADDR
// if _x < 0 then
48758: LD_VAR 0 6
48762: PUSH
48763: LD_INT 0
48765: LESS
48766: IFFALSE 48783
// _x := _x * - 1 ;
48768: LD_ADDR_VAR 0 6
48772: PUSH
48773: LD_VAR 0 6
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: MUL
48782: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48783: LD_ADDR_VAR 0 7
48787: PUSH
48788: LD_VAR 0 2
48792: PUSH
48793: LD_VAR 0 4
48797: PLUS
48798: PUSH
48799: LD_INT 2
48801: DIV
48802: ST_TO_ADDR
// if _y < 0 then
48803: LD_VAR 0 7
48807: PUSH
48808: LD_INT 0
48810: LESS
48811: IFFALSE 48828
// _y := _y * - 1 ;
48813: LD_ADDR_VAR 0 7
48817: PUSH
48818: LD_VAR 0 7
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: MUL
48827: ST_TO_ADDR
// result := [ _x , _y ] ;
48828: LD_ADDR_VAR 0 5
48832: PUSH
48833: LD_VAR 0 6
48837: PUSH
48838: LD_VAR 0 7
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: ST_TO_ADDR
// end ;
48847: LD_VAR 0 5
48851: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48852: LD_INT 0
48854: PPUSH
48855: PPUSH
48856: PPUSH
48857: PPUSH
// task := GetTaskList ( unit ) ;
48858: LD_ADDR_VAR 0 7
48862: PUSH
48863: LD_VAR 0 1
48867: PPUSH
48868: CALL_OW 437
48872: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48873: LD_VAR 0 7
48877: NOT
48878: IFFALSE 48897
48880: PUSH
48881: LD_VAR 0 1
48885: PPUSH
48886: LD_VAR 0 2
48890: PPUSH
48891: CALL_OW 308
48895: NOT
48896: AND
48897: IFFALSE 48901
// exit ;
48899: GO 49019
// if IsInArea ( unit , area ) then
48901: LD_VAR 0 1
48905: PPUSH
48906: LD_VAR 0 2
48910: PPUSH
48911: CALL_OW 308
48915: IFFALSE 48933
// begin ComMoveToArea ( unit , goAway ) ;
48917: LD_VAR 0 1
48921: PPUSH
48922: LD_VAR 0 3
48926: PPUSH
48927: CALL_OW 113
// exit ;
48931: GO 49019
// end ; if task [ 1 ] [ 1 ] <> M then
48933: LD_VAR 0 7
48937: PUSH
48938: LD_INT 1
48940: ARRAY
48941: PUSH
48942: LD_INT 1
48944: ARRAY
48945: PUSH
48946: LD_STRING M
48948: NONEQUAL
48949: IFFALSE 48953
// exit ;
48951: GO 49019
// x := task [ 1 ] [ 2 ] ;
48953: LD_ADDR_VAR 0 5
48957: PUSH
48958: LD_VAR 0 7
48962: PUSH
48963: LD_INT 1
48965: ARRAY
48966: PUSH
48967: LD_INT 2
48969: ARRAY
48970: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48971: LD_ADDR_VAR 0 6
48975: PUSH
48976: LD_VAR 0 7
48980: PUSH
48981: LD_INT 1
48983: ARRAY
48984: PUSH
48985: LD_INT 3
48987: ARRAY
48988: ST_TO_ADDR
// if InArea ( x , y , area ) then
48989: LD_VAR 0 5
48993: PPUSH
48994: LD_VAR 0 6
48998: PPUSH
48999: LD_VAR 0 2
49003: PPUSH
49004: CALL_OW 309
49008: IFFALSE 49019
// ComStop ( unit ) ;
49010: LD_VAR 0 1
49014: PPUSH
49015: CALL_OW 141
// end ;
49019: LD_VAR 0 4
49023: RET
// export function Abs ( value ) ; begin
49024: LD_INT 0
49026: PPUSH
// result := value ;
49027: LD_ADDR_VAR 0 2
49031: PUSH
49032: LD_VAR 0 1
49036: ST_TO_ADDR
// if value < 0 then
49037: LD_VAR 0 1
49041: PUSH
49042: LD_INT 0
49044: LESS
49045: IFFALSE 49062
// result := value * - 1 ;
49047: LD_ADDR_VAR 0 2
49051: PUSH
49052: LD_VAR 0 1
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: MUL
49061: ST_TO_ADDR
// end ;
49062: LD_VAR 0 2
49066: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49067: LD_INT 0
49069: PPUSH
49070: PPUSH
49071: PPUSH
49072: PPUSH
49073: PPUSH
49074: PPUSH
49075: PPUSH
49076: PPUSH
// if not unit or not building then
49077: LD_VAR 0 1
49081: NOT
49082: IFTRUE 49091
49084: PUSH
49085: LD_VAR 0 2
49089: NOT
49090: OR
49091: IFFALSE 49095
// exit ;
49093: GO 49323
// x := GetX ( building ) ;
49095: LD_ADDR_VAR 0 4
49099: PUSH
49100: LD_VAR 0 2
49104: PPUSH
49105: CALL_OW 250
49109: ST_TO_ADDR
// y := GetY ( building ) ;
49110: LD_ADDR_VAR 0 6
49114: PUSH
49115: LD_VAR 0 2
49119: PPUSH
49120: CALL_OW 251
49124: ST_TO_ADDR
// d := GetDir ( building ) ;
49125: LD_ADDR_VAR 0 8
49129: PUSH
49130: LD_VAR 0 2
49134: PPUSH
49135: CALL_OW 254
49139: ST_TO_ADDR
// r := 4 ;
49140: LD_ADDR_VAR 0 9
49144: PUSH
49145: LD_INT 4
49147: ST_TO_ADDR
// for i := 1 to 5 do
49148: LD_ADDR_VAR 0 10
49152: PUSH
49153: DOUBLE
49154: LD_INT 1
49156: DEC
49157: ST_TO_ADDR
49158: LD_INT 5
49160: PUSH
49161: FOR_TO
49162: IFFALSE 49321
// begin _x := ShiftX ( x , d , r + i ) ;
49164: LD_ADDR_VAR 0 5
49168: PUSH
49169: LD_VAR 0 4
49173: PPUSH
49174: LD_VAR 0 8
49178: PPUSH
49179: LD_VAR 0 9
49183: PUSH
49184: LD_VAR 0 10
49188: PLUS
49189: PPUSH
49190: CALL_OW 272
49194: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49195: LD_ADDR_VAR 0 7
49199: PUSH
49200: LD_VAR 0 6
49204: PPUSH
49205: LD_VAR 0 8
49209: PPUSH
49210: LD_VAR 0 9
49214: PUSH
49215: LD_VAR 0 10
49219: PLUS
49220: PPUSH
49221: CALL_OW 273
49225: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49226: LD_VAR 0 5
49230: PPUSH
49231: LD_VAR 0 7
49235: PPUSH
49236: CALL_OW 488
49240: IFFALSE 49275
49242: PUSH
49243: LD_VAR 0 5
49247: PPUSH
49248: LD_VAR 0 7
49252: PPUSH
49253: CALL_OW 428
49257: PPUSH
49258: CALL_OW 247
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: IN
49273: NOT
49274: AND
49275: IFFALSE 49319
// begin ComMoveXY ( unit , _x , _y ) ;
49277: LD_VAR 0 1
49281: PPUSH
49282: LD_VAR 0 5
49286: PPUSH
49287: LD_VAR 0 7
49291: PPUSH
49292: CALL_OW 111
// result := [ _x , _y ] ;
49296: LD_ADDR_VAR 0 3
49300: PUSH
49301: LD_VAR 0 5
49305: PUSH
49306: LD_VAR 0 7
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: ST_TO_ADDR
// exit ;
49315: POP
49316: POP
49317: GO 49323
// end ; end ;
49319: GO 49161
49321: POP
49322: POP
// end ;
49323: LD_VAR 0 3
49327: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49328: LD_INT 0
49330: PPUSH
49331: PPUSH
49332: PPUSH
// result := 0 ;
49333: LD_ADDR_VAR 0 3
49337: PUSH
49338: LD_INT 0
49340: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49341: LD_VAR 0 1
49345: PUSH
49346: LD_INT 0
49348: LESS
49349: IFTRUE 49361
49351: PUSH
49352: LD_VAR 0 1
49356: PUSH
49357: LD_INT 8
49359: GREATER
49360: OR
49361: IFTRUE 49373
49363: PUSH
49364: LD_VAR 0 2
49368: PUSH
49369: LD_INT 0
49371: LESS
49372: OR
49373: IFTRUE 49385
49375: PUSH
49376: LD_VAR 0 2
49380: PUSH
49381: LD_INT 8
49383: GREATER
49384: OR
49385: IFFALSE 49389
// exit ;
49387: GO 49464
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49389: LD_ADDR_VAR 0 4
49393: PUSH
49394: LD_INT 22
49396: PUSH
49397: LD_VAR 0 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PPUSH
49406: CALL_OW 69
49410: PUSH
49411: FOR_IN
49412: IFFALSE 49462
// begin un := UnitShoot ( i ) ;
49414: LD_ADDR_VAR 0 5
49418: PUSH
49419: LD_VAR 0 4
49423: PPUSH
49424: CALL_OW 504
49428: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49429: LD_VAR 0 5
49433: PPUSH
49434: CALL_OW 255
49438: PUSH
49439: LD_VAR 0 1
49443: EQUAL
49444: IFFALSE 49460
// begin result := un ;
49446: LD_ADDR_VAR 0 3
49450: PUSH
49451: LD_VAR 0 5
49455: ST_TO_ADDR
// exit ;
49456: POP
49457: POP
49458: GO 49464
// end ; end ;
49460: GO 49411
49462: POP
49463: POP
// end ;
49464: LD_VAR 0 3
49468: RET
// export function GetCargoBay ( units ) ; begin
49469: LD_INT 0
49471: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49472: LD_ADDR_VAR 0 2
49476: PUSH
49477: LD_VAR 0 1
49481: PPUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 34
49487: PUSH
49488: LD_INT 12
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 34
49497: PUSH
49498: LD_INT 51
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 34
49507: PUSH
49508: LD_INT 32
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 34
49517: PUSH
49518: LD_INT 89
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: PPUSH
49532: CALL_OW 72
49536: ST_TO_ADDR
// end ;
49537: LD_VAR 0 2
49541: RET
// export function Negate ( value ) ; begin
49542: LD_INT 0
49544: PPUSH
// result := not value ;
49545: LD_ADDR_VAR 0 2
49549: PUSH
49550: LD_VAR 0 1
49554: NOT
49555: ST_TO_ADDR
// end ;
49556: LD_VAR 0 2
49560: RET
// export function Inc ( value ) ; begin
49561: LD_INT 0
49563: PPUSH
// result := value + 1 ;
49564: LD_ADDR_VAR 0 2
49568: PUSH
49569: LD_VAR 0 1
49573: PUSH
49574: LD_INT 1
49576: PLUS
49577: ST_TO_ADDR
// end ;
49578: LD_VAR 0 2
49582: RET
// export function Dec ( value ) ; begin
49583: LD_INT 0
49585: PPUSH
// result := value - 1 ;
49586: LD_ADDR_VAR 0 2
49590: PUSH
49591: LD_VAR 0 1
49595: PUSH
49596: LD_INT 1
49598: MINUS
49599: ST_TO_ADDR
// end ;
49600: LD_VAR 0 2
49604: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49605: LD_INT 0
49607: PPUSH
49608: PPUSH
49609: PPUSH
49610: PPUSH
49611: PPUSH
49612: PPUSH
49613: PPUSH
49614: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49615: LD_VAR 0 1
49619: PPUSH
49620: LD_VAR 0 2
49624: PPUSH
49625: CALL_OW 488
49629: NOT
49630: IFTRUE 49649
49632: PUSH
49633: LD_VAR 0 3
49637: PPUSH
49638: LD_VAR 0 4
49642: PPUSH
49643: CALL_OW 488
49647: NOT
49648: OR
49649: IFFALSE 49662
// begin result := - 1 ;
49651: LD_ADDR_VAR 0 5
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: ST_TO_ADDR
// exit ;
49660: GO 49897
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49662: LD_ADDR_VAR 0 12
49666: PUSH
49667: LD_VAR 0 1
49671: PPUSH
49672: LD_VAR 0 2
49676: PPUSH
49677: LD_VAR 0 3
49681: PPUSH
49682: LD_VAR 0 4
49686: PPUSH
49687: CALL 48733 0 4
49691: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49692: LD_ADDR_VAR 0 11
49696: PUSH
49697: LD_VAR 0 1
49701: PPUSH
49702: LD_VAR 0 2
49706: PPUSH
49707: LD_VAR 0 12
49711: PUSH
49712: LD_INT 1
49714: ARRAY
49715: PPUSH
49716: LD_VAR 0 12
49720: PUSH
49721: LD_INT 2
49723: ARRAY
49724: PPUSH
49725: CALL_OW 298
49729: ST_TO_ADDR
// distance := 9999 ;
49730: LD_ADDR_VAR 0 10
49734: PUSH
49735: LD_INT 9999
49737: ST_TO_ADDR
// for i := 0 to 5 do
49738: LD_ADDR_VAR 0 6
49742: PUSH
49743: DOUBLE
49744: LD_INT 0
49746: DEC
49747: ST_TO_ADDR
49748: LD_INT 5
49750: PUSH
49751: FOR_TO
49752: IFFALSE 49895
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49754: LD_ADDR_VAR 0 7
49758: PUSH
49759: LD_VAR 0 1
49763: PPUSH
49764: LD_VAR 0 6
49768: PPUSH
49769: LD_VAR 0 11
49773: PPUSH
49774: CALL_OW 272
49778: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49779: LD_ADDR_VAR 0 8
49783: PUSH
49784: LD_VAR 0 2
49788: PPUSH
49789: LD_VAR 0 6
49793: PPUSH
49794: LD_VAR 0 11
49798: PPUSH
49799: CALL_OW 273
49803: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49804: LD_VAR 0 7
49808: PPUSH
49809: LD_VAR 0 8
49813: PPUSH
49814: CALL_OW 488
49818: NOT
49819: IFFALSE 49823
// continue ;
49821: GO 49751
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49823: LD_ADDR_VAR 0 9
49827: PUSH
49828: LD_VAR 0 12
49832: PUSH
49833: LD_INT 1
49835: ARRAY
49836: PPUSH
49837: LD_VAR 0 12
49841: PUSH
49842: LD_INT 2
49844: ARRAY
49845: PPUSH
49846: LD_VAR 0 7
49850: PPUSH
49851: LD_VAR 0 8
49855: PPUSH
49856: CALL_OW 298
49860: ST_TO_ADDR
// if tmp < distance then
49861: LD_VAR 0 9
49865: PUSH
49866: LD_VAR 0 10
49870: LESS
49871: IFFALSE 49893
// begin result := i ;
49873: LD_ADDR_VAR 0 5
49877: PUSH
49878: LD_VAR 0 6
49882: ST_TO_ADDR
// distance := tmp ;
49883: LD_ADDR_VAR 0 10
49887: PUSH
49888: LD_VAR 0 9
49892: ST_TO_ADDR
// end ; end ;
49893: GO 49751
49895: POP
49896: POP
// end ;
49897: LD_VAR 0 5
49901: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49902: LD_INT 0
49904: PPUSH
49905: PPUSH
// if not driver or not IsInUnit ( driver ) then
49906: LD_VAR 0 1
49910: NOT
49911: IFTRUE 49925
49913: PUSH
49914: LD_VAR 0 1
49918: PPUSH
49919: CALL_OW 310
49923: NOT
49924: OR
49925: IFFALSE 49929
// exit ;
49927: GO 50019
// vehicle := IsInUnit ( driver ) ;
49929: LD_ADDR_VAR 0 3
49933: PUSH
49934: LD_VAR 0 1
49938: PPUSH
49939: CALL_OW 310
49943: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49944: LD_VAR 0 1
49948: PPUSH
49949: LD_STRING \
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: PUSH
49979: LD_STRING E
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_VAR 0 3
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PPUSH
50015: CALL_OW 446
// end ;
50019: LD_VAR 0 2
50023: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50024: LD_INT 0
50026: PPUSH
50027: PPUSH
// if not driver or not IsInUnit ( driver ) then
50028: LD_VAR 0 1
50032: NOT
50033: IFTRUE 50047
50035: PUSH
50036: LD_VAR 0 1
50040: PPUSH
50041: CALL_OW 310
50045: NOT
50046: OR
50047: IFFALSE 50051
// exit ;
50049: GO 50141
// vehicle := IsInUnit ( driver ) ;
50051: LD_ADDR_VAR 0 3
50055: PUSH
50056: LD_VAR 0 1
50060: PPUSH
50061: CALL_OW 310
50065: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50066: LD_VAR 0 1
50070: PPUSH
50071: LD_STRING \
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: PUSH
50101: LD_STRING E
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_VAR 0 3
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PPUSH
50137: CALL_OW 447
// end ;
50141: LD_VAR 0 2
50145: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50146: LD_INT 0
50148: PPUSH
50149: PPUSH
50150: PPUSH
// tmp := [ ] ;
50151: LD_ADDR_VAR 0 5
50155: PUSH
50156: EMPTY
50157: ST_TO_ADDR
// for i in units do
50158: LD_ADDR_VAR 0 4
50162: PUSH
50163: LD_VAR 0 1
50167: PUSH
50168: FOR_IN
50169: IFFALSE 50207
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50171: LD_ADDR_VAR 0 5
50175: PUSH
50176: LD_VAR 0 5
50180: PPUSH
50181: LD_VAR 0 5
50185: PUSH
50186: LD_INT 1
50188: PLUS
50189: PPUSH
50190: LD_VAR 0 4
50194: PPUSH
50195: CALL_OW 256
50199: PPUSH
50200: CALL_OW 2
50204: ST_TO_ADDR
50205: GO 50168
50207: POP
50208: POP
// if not tmp then
50209: LD_VAR 0 5
50213: NOT
50214: IFFALSE 50218
// exit ;
50216: GO 50266
// if asc then
50218: LD_VAR 0 2
50222: IFFALSE 50246
// result := SortListByListAsc ( units , tmp ) else
50224: LD_ADDR_VAR 0 3
50228: PUSH
50229: LD_VAR 0 1
50233: PPUSH
50234: LD_VAR 0 5
50238: PPUSH
50239: CALL_OW 76
50243: ST_TO_ADDR
50244: GO 50266
// result := SortListByListDesc ( units , tmp ) ;
50246: LD_ADDR_VAR 0 3
50250: PUSH
50251: LD_VAR 0 1
50255: PPUSH
50256: LD_VAR 0 5
50260: PPUSH
50261: CALL_OW 77
50265: ST_TO_ADDR
// end ;
50266: LD_VAR 0 3
50270: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50271: LD_INT 0
50273: PPUSH
50274: PPUSH
// task := GetTaskList ( mech ) ;
50275: LD_ADDR_VAR 0 4
50279: PUSH
50280: LD_VAR 0 1
50284: PPUSH
50285: CALL_OW 437
50289: ST_TO_ADDR
// if not task then
50290: LD_VAR 0 4
50294: NOT
50295: IFFALSE 50299
// exit ;
50297: GO 50343
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50299: LD_ADDR_VAR 0 3
50303: PUSH
50304: LD_VAR 0 4
50308: PUSH
50309: LD_INT 1
50311: ARRAY
50312: PUSH
50313: LD_INT 1
50315: ARRAY
50316: PUSH
50317: LD_STRING r
50319: EQUAL
50320: IFFALSE 50342
50322: PUSH
50323: LD_VAR 0 4
50327: PUSH
50328: LD_INT 1
50330: ARRAY
50331: PUSH
50332: LD_INT 4
50334: ARRAY
50335: PUSH
50336: LD_VAR 0 2
50340: EQUAL
50341: AND
50342: ST_TO_ADDR
// end ;
50343: LD_VAR 0 3
50347: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50348: LD_INT 0
50350: PPUSH
// SetDir ( unit , d ) ;
50351: LD_VAR 0 1
50355: PPUSH
50356: LD_VAR 0 4
50360: PPUSH
50361: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50365: LD_ADDR_VAR 0 6
50369: PUSH
50370: LD_VAR 0 1
50374: PPUSH
50375: LD_VAR 0 2
50379: PPUSH
50380: LD_VAR 0 3
50384: PPUSH
50385: LD_VAR 0 5
50389: PPUSH
50390: CALL_OW 48
50394: ST_TO_ADDR
// end ;
50395: LD_VAR 0 6
50399: RET
// export function ToNaturalNumber ( number ) ; begin
50400: LD_INT 0
50402: PPUSH
// result := number div 1 ;
50403: LD_ADDR_VAR 0 2
50407: PUSH
50408: LD_VAR 0 1
50412: PUSH
50413: LD_INT 1
50415: DIV
50416: ST_TO_ADDR
// if number < 0 then
50417: LD_VAR 0 1
50421: PUSH
50422: LD_INT 0
50424: LESS
50425: IFFALSE 50435
// result := 0 ;
50427: LD_ADDR_VAR 0 2
50431: PUSH
50432: LD_INT 0
50434: ST_TO_ADDR
// end ;
50435: LD_VAR 0 2
50439: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50440: LD_INT 0
50442: PPUSH
50443: PPUSH
50444: PPUSH
// if not buildings then
50445: LD_VAR 0 1
50449: NOT
50450: IFFALSE 50454
// exit ;
50452: GO 50569
// tmp := [ ] ;
50454: LD_ADDR_VAR 0 5
50458: PUSH
50459: EMPTY
50460: ST_TO_ADDR
// for b in buildings do
50461: LD_ADDR_VAR 0 4
50465: PUSH
50466: LD_VAR 0 1
50470: PUSH
50471: FOR_IN
50472: IFFALSE 50510
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50474: LD_ADDR_VAR 0 5
50478: PUSH
50479: LD_VAR 0 5
50483: PPUSH
50484: LD_VAR 0 5
50488: PUSH
50489: LD_INT 1
50491: PLUS
50492: PPUSH
50493: LD_VAR 0 4
50497: PPUSH
50498: CALL_OW 266
50502: PPUSH
50503: CALL_OW 1
50507: ST_TO_ADDR
50508: GO 50471
50510: POP
50511: POP
// if not tmp then
50512: LD_VAR 0 5
50516: NOT
50517: IFFALSE 50521
// exit ;
50519: GO 50569
// if asc then
50521: LD_VAR 0 2
50525: IFFALSE 50549
// result := SortListByListAsc ( buildings , tmp ) else
50527: LD_ADDR_VAR 0 3
50531: PUSH
50532: LD_VAR 0 1
50536: PPUSH
50537: LD_VAR 0 5
50541: PPUSH
50542: CALL_OW 76
50546: ST_TO_ADDR
50547: GO 50569
// result := SortListByListDesc ( buildings , tmp ) ;
50549: LD_ADDR_VAR 0 3
50553: PUSH
50554: LD_VAR 0 1
50558: PPUSH
50559: LD_VAR 0 5
50563: PPUSH
50564: CALL_OW 77
50568: ST_TO_ADDR
// end ;
50569: LD_VAR 0 3
50573: RET
// export function SortByClass ( units , class ) ; var un ; begin
50574: LD_INT 0
50576: PPUSH
50577: PPUSH
// if not units or not class then
50578: LD_VAR 0 1
50582: NOT
50583: IFTRUE 50592
50585: PUSH
50586: LD_VAR 0 2
50590: NOT
50591: OR
50592: IFFALSE 50596
// exit ;
50594: GO 50691
// result := [ ] ;
50596: LD_ADDR_VAR 0 3
50600: PUSH
50601: EMPTY
50602: ST_TO_ADDR
// for un in units do
50603: LD_ADDR_VAR 0 4
50607: PUSH
50608: LD_VAR 0 1
50612: PUSH
50613: FOR_IN
50614: IFFALSE 50689
// if GetClass ( un ) = class then
50616: LD_VAR 0 4
50620: PPUSH
50621: CALL_OW 257
50625: PUSH
50626: LD_VAR 0 2
50630: EQUAL
50631: IFFALSE 50658
// result := Insert ( result , 1 , un ) else
50633: LD_ADDR_VAR 0 3
50637: PUSH
50638: LD_VAR 0 3
50642: PPUSH
50643: LD_INT 1
50645: PPUSH
50646: LD_VAR 0 4
50650: PPUSH
50651: CALL_OW 2
50655: ST_TO_ADDR
50656: GO 50687
// result := Replace ( result , result + 1 , un ) ;
50658: LD_ADDR_VAR 0 3
50662: PUSH
50663: LD_VAR 0 3
50667: PPUSH
50668: LD_VAR 0 3
50672: PUSH
50673: LD_INT 1
50675: PLUS
50676: PPUSH
50677: LD_VAR 0 4
50681: PPUSH
50682: CALL_OW 1
50686: ST_TO_ADDR
50687: GO 50613
50689: POP
50690: POP
// end ;
50691: LD_VAR 0 3
50695: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50696: LD_INT 0
50698: PPUSH
50699: PPUSH
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
// result := [ ] ;
50705: LD_ADDR_VAR 0 4
50709: PUSH
50710: EMPTY
50711: ST_TO_ADDR
// if x - r < 0 then
50712: LD_VAR 0 1
50716: PUSH
50717: LD_VAR 0 3
50721: MINUS
50722: PUSH
50723: LD_INT 0
50725: LESS
50726: IFFALSE 50738
// min_x := 0 else
50728: LD_ADDR_VAR 0 8
50732: PUSH
50733: LD_INT 0
50735: ST_TO_ADDR
50736: GO 50754
// min_x := x - r ;
50738: LD_ADDR_VAR 0 8
50742: PUSH
50743: LD_VAR 0 1
50747: PUSH
50748: LD_VAR 0 3
50752: MINUS
50753: ST_TO_ADDR
// if y - r < 0 then
50754: LD_VAR 0 2
50758: PUSH
50759: LD_VAR 0 3
50763: MINUS
50764: PUSH
50765: LD_INT 0
50767: LESS
50768: IFFALSE 50780
// min_y := 0 else
50770: LD_ADDR_VAR 0 7
50774: PUSH
50775: LD_INT 0
50777: ST_TO_ADDR
50778: GO 50796
// min_y := y - r ;
50780: LD_ADDR_VAR 0 7
50784: PUSH
50785: LD_VAR 0 2
50789: PUSH
50790: LD_VAR 0 3
50794: MINUS
50795: ST_TO_ADDR
// max_x := x + r ;
50796: LD_ADDR_VAR 0 9
50800: PUSH
50801: LD_VAR 0 1
50805: PUSH
50806: LD_VAR 0 3
50810: PLUS
50811: ST_TO_ADDR
// max_y := y + r ;
50812: LD_ADDR_VAR 0 10
50816: PUSH
50817: LD_VAR 0 2
50821: PUSH
50822: LD_VAR 0 3
50826: PLUS
50827: ST_TO_ADDR
// for _x = min_x to max_x do
50828: LD_ADDR_VAR 0 5
50832: PUSH
50833: DOUBLE
50834: LD_VAR 0 8
50838: DEC
50839: ST_TO_ADDR
50840: LD_VAR 0 9
50844: PUSH
50845: FOR_TO
50846: IFFALSE 50947
// for _y = min_y to max_y do
50848: LD_ADDR_VAR 0 6
50852: PUSH
50853: DOUBLE
50854: LD_VAR 0 7
50858: DEC
50859: ST_TO_ADDR
50860: LD_VAR 0 10
50864: PUSH
50865: FOR_TO
50866: IFFALSE 50943
// begin if not ValidHex ( _x , _y ) then
50868: LD_VAR 0 5
50872: PPUSH
50873: LD_VAR 0 6
50877: PPUSH
50878: CALL_OW 488
50882: NOT
50883: IFFALSE 50887
// continue ;
50885: GO 50865
// if GetResourceTypeXY ( _x , _y ) then
50887: LD_VAR 0 5
50891: PPUSH
50892: LD_VAR 0 6
50896: PPUSH
50897: CALL_OW 283
50901: IFFALSE 50941
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50903: LD_ADDR_VAR 0 4
50907: PUSH
50908: LD_VAR 0 4
50912: PPUSH
50913: LD_VAR 0 4
50917: PUSH
50918: LD_INT 1
50920: PLUS
50921: PPUSH
50922: LD_VAR 0 5
50926: PUSH
50927: LD_VAR 0 6
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PPUSH
50936: CALL_OW 1
50940: ST_TO_ADDR
// end ;
50941: GO 50865
50943: POP
50944: POP
50945: GO 50845
50947: POP
50948: POP
// end ;
50949: LD_VAR 0 4
50953: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50954: LD_INT 0
50956: PPUSH
50957: PPUSH
50958: PPUSH
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
50963: PPUSH
// if not units then
50964: LD_VAR 0 1
50968: NOT
50969: IFFALSE 50973
// exit ;
50971: GO 51505
// result := UnitFilter ( units , [ f_ok ] ) ;
50973: LD_ADDR_VAR 0 3
50977: PUSH
50978: LD_VAR 0 1
50982: PPUSH
50983: LD_INT 50
50985: PUSH
50986: EMPTY
50987: LIST
50988: PPUSH
50989: CALL_OW 72
50993: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50994: LD_ADDR_VAR 0 8
50998: PUSH
50999: LD_VAR 0 1
51003: PUSH
51004: LD_INT 1
51006: ARRAY
51007: PPUSH
51008: CALL_OW 255
51012: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51013: LD_ADDR_VAR 0 10
51017: PUSH
51018: LD_INT 29
51020: PUSH
51021: LD_INT 91
51023: PUSH
51024: LD_INT 49
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// if not result then
51032: LD_VAR 0 3
51036: NOT
51037: IFFALSE 51041
// exit ;
51039: GO 51505
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51041: LD_ADDR_VAR 0 5
51045: PUSH
51046: LD_INT 81
51048: PUSH
51049: LD_VAR 0 8
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PPUSH
51058: CALL_OW 69
51062: ST_TO_ADDR
// for i in result do
51063: LD_ADDR_VAR 0 4
51067: PUSH
51068: LD_VAR 0 3
51072: PUSH
51073: FOR_IN
51074: IFFALSE 51503
// begin tag := GetTag ( i ) + 1 ;
51076: LD_ADDR_VAR 0 9
51080: PUSH
51081: LD_VAR 0 4
51085: PPUSH
51086: CALL_OW 110
51090: PUSH
51091: LD_INT 1
51093: PLUS
51094: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51095: LD_ADDR_VAR 0 7
51099: PUSH
51100: LD_VAR 0 4
51104: PPUSH
51105: CALL_OW 250
51109: PPUSH
51110: LD_VAR 0 4
51114: PPUSH
51115: CALL_OW 251
51119: PPUSH
51120: LD_INT 4
51122: PPUSH
51123: CALL 50696 0 3
51127: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51128: LD_VAR 0 4
51132: PPUSH
51133: CALL_OW 247
51137: PUSH
51138: LD_INT 2
51140: EQUAL
51141: IFFALSE 51153
51143: PUSH
51144: LD_VAR 0 7
51148: PUSH
51149: LD_INT 2
51151: GREATER
51152: AND
51153: IFFALSE 51173
51155: PUSH
51156: LD_VAR 0 4
51160: PPUSH
51161: CALL_OW 264
51165: PUSH
51166: LD_VAR 0 10
51170: IN
51171: NOT
51172: AND
51173: IFFALSE 51212
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51175: LD_VAR 0 4
51179: PPUSH
51180: LD_VAR 0 7
51184: PUSH
51185: LD_INT 1
51187: ARRAY
51188: PUSH
51189: LD_INT 1
51191: ARRAY
51192: PPUSH
51193: LD_VAR 0 7
51197: PUSH
51198: LD_INT 1
51200: ARRAY
51201: PUSH
51202: LD_INT 2
51204: ARRAY
51205: PPUSH
51206: CALL_OW 116
51210: GO 51501
// if path > tag then
51212: LD_VAR 0 2
51216: PUSH
51217: LD_VAR 0 9
51221: GREATER
51222: IFFALSE 51430
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51224: LD_ADDR_VAR 0 6
51228: PUSH
51229: LD_VAR 0 5
51233: PPUSH
51234: LD_INT 91
51236: PUSH
51237: LD_VAR 0 4
51241: PUSH
51242: LD_INT 8
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: LIST
51249: PPUSH
51250: CALL_OW 72
51254: ST_TO_ADDR
// if nearEnemy then
51255: LD_VAR 0 6
51259: IFFALSE 51328
// begin if GetWeapon ( i ) = ru_time_lapser then
51261: LD_VAR 0 4
51265: PPUSH
51266: CALL_OW 264
51270: PUSH
51271: LD_INT 49
51273: EQUAL
51274: IFFALSE 51302
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51276: LD_VAR 0 4
51280: PPUSH
51281: LD_VAR 0 6
51285: PPUSH
51286: LD_VAR 0 4
51290: PPUSH
51291: CALL_OW 74
51295: PPUSH
51296: CALL_OW 112
51300: GO 51326
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51302: LD_VAR 0 4
51306: PPUSH
51307: LD_VAR 0 6
51311: PPUSH
51312: LD_VAR 0 4
51316: PPUSH
51317: CALL_OW 74
51321: PPUSH
51322: CALL 52586 0 2
// end else
51326: GO 51428
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51328: LD_VAR 0 4
51332: PPUSH
51333: LD_VAR 0 2
51337: PUSH
51338: LD_VAR 0 9
51342: ARRAY
51343: PUSH
51344: LD_INT 1
51346: ARRAY
51347: PPUSH
51348: LD_VAR 0 2
51352: PUSH
51353: LD_VAR 0 9
51357: ARRAY
51358: PUSH
51359: LD_INT 2
51361: ARRAY
51362: PPUSH
51363: CALL_OW 297
51367: PUSH
51368: LD_INT 6
51370: GREATER
51371: IFFALSE 51414
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51373: LD_VAR 0 4
51377: PPUSH
51378: LD_VAR 0 2
51382: PUSH
51383: LD_VAR 0 9
51387: ARRAY
51388: PUSH
51389: LD_INT 1
51391: ARRAY
51392: PPUSH
51393: LD_VAR 0 2
51397: PUSH
51398: LD_VAR 0 9
51402: ARRAY
51403: PUSH
51404: LD_INT 2
51406: ARRAY
51407: PPUSH
51408: CALL_OW 114
51412: GO 51428
// SetTag ( i , tag ) ;
51414: LD_VAR 0 4
51418: PPUSH
51419: LD_VAR 0 9
51423: PPUSH
51424: CALL_OW 109
// end else
51428: GO 51501
// if enemy then
51430: LD_VAR 0 5
51434: IFFALSE 51501
// begin if GetWeapon ( i ) = ru_time_lapser then
51436: LD_VAR 0 4
51440: PPUSH
51441: CALL_OW 264
51445: PUSH
51446: LD_INT 49
51448: EQUAL
51449: IFFALSE 51477
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51451: LD_VAR 0 4
51455: PPUSH
51456: LD_VAR 0 5
51460: PPUSH
51461: LD_VAR 0 4
51465: PPUSH
51466: CALL_OW 74
51470: PPUSH
51471: CALL_OW 112
51475: GO 51501
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51477: LD_VAR 0 4
51481: PPUSH
51482: LD_VAR 0 5
51486: PPUSH
51487: LD_VAR 0 4
51491: PPUSH
51492: CALL_OW 74
51496: PPUSH
51497: CALL 52586 0 2
// end ; end ;
51501: GO 51073
51503: POP
51504: POP
// end ;
51505: LD_VAR 0 3
51509: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51510: LD_INT 0
51512: PPUSH
51513: PPUSH
51514: PPUSH
// if not unit or IsInUnit ( unit ) then
51515: LD_VAR 0 1
51519: NOT
51520: IFTRUE 51533
51522: PUSH
51523: LD_VAR 0 1
51527: PPUSH
51528: CALL_OW 310
51532: OR
51533: IFFALSE 51537
// exit ;
51535: GO 51628
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51537: LD_ADDR_VAR 0 4
51541: PUSH
51542: LD_VAR 0 1
51546: PPUSH
51547: CALL_OW 250
51551: PPUSH
51552: LD_VAR 0 2
51556: PPUSH
51557: LD_INT 1
51559: PPUSH
51560: CALL_OW 272
51564: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51565: LD_ADDR_VAR 0 5
51569: PUSH
51570: LD_VAR 0 1
51574: PPUSH
51575: CALL_OW 251
51579: PPUSH
51580: LD_VAR 0 2
51584: PPUSH
51585: LD_INT 1
51587: PPUSH
51588: CALL_OW 273
51592: ST_TO_ADDR
// if ValidHex ( x , y ) then
51593: LD_VAR 0 4
51597: PPUSH
51598: LD_VAR 0 5
51602: PPUSH
51603: CALL_OW 488
51607: IFFALSE 51628
// ComTurnXY ( unit , x , y ) ;
51609: LD_VAR 0 1
51613: PPUSH
51614: LD_VAR 0 4
51618: PPUSH
51619: LD_VAR 0 5
51623: PPUSH
51624: CALL_OW 118
// end ;
51628: LD_VAR 0 3
51632: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51633: LD_INT 0
51635: PPUSH
51636: PPUSH
// result := false ;
51637: LD_ADDR_VAR 0 3
51641: PUSH
51642: LD_INT 0
51644: ST_TO_ADDR
// if not units then
51645: LD_VAR 0 2
51649: NOT
51650: IFFALSE 51654
// exit ;
51652: GO 51699
// for i in units do
51654: LD_ADDR_VAR 0 4
51658: PUSH
51659: LD_VAR 0 2
51663: PUSH
51664: FOR_IN
51665: IFFALSE 51697
// if See ( side , i ) then
51667: LD_VAR 0 1
51671: PPUSH
51672: LD_VAR 0 4
51676: PPUSH
51677: CALL_OW 292
51681: IFFALSE 51695
// begin result := true ;
51683: LD_ADDR_VAR 0 3
51687: PUSH
51688: LD_INT 1
51690: ST_TO_ADDR
// exit ;
51691: POP
51692: POP
51693: GO 51699
// end ;
51695: GO 51664
51697: POP
51698: POP
// end ;
51699: LD_VAR 0 3
51703: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51704: LD_INT 0
51706: PPUSH
51707: PPUSH
51708: PPUSH
51709: PPUSH
// if not unit or not points then
51710: LD_VAR 0 1
51714: NOT
51715: IFTRUE 51724
51717: PUSH
51718: LD_VAR 0 2
51722: NOT
51723: OR
51724: IFFALSE 51728
// exit ;
51726: GO 51818
// dist := 99999 ;
51728: LD_ADDR_VAR 0 5
51732: PUSH
51733: LD_INT 99999
51735: ST_TO_ADDR
// for i in points do
51736: LD_ADDR_VAR 0 4
51740: PUSH
51741: LD_VAR 0 2
51745: PUSH
51746: FOR_IN
51747: IFFALSE 51816
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51749: LD_ADDR_VAR 0 6
51753: PUSH
51754: LD_VAR 0 1
51758: PPUSH
51759: LD_VAR 0 4
51763: PUSH
51764: LD_INT 1
51766: ARRAY
51767: PPUSH
51768: LD_VAR 0 4
51772: PUSH
51773: LD_INT 2
51775: ARRAY
51776: PPUSH
51777: CALL_OW 297
51781: ST_TO_ADDR
// if tmpDist < dist then
51782: LD_VAR 0 6
51786: PUSH
51787: LD_VAR 0 5
51791: LESS
51792: IFFALSE 51814
// begin result := i ;
51794: LD_ADDR_VAR 0 3
51798: PUSH
51799: LD_VAR 0 4
51803: ST_TO_ADDR
// dist := tmpDist ;
51804: LD_ADDR_VAR 0 5
51808: PUSH
51809: LD_VAR 0 6
51813: ST_TO_ADDR
// end ; end ;
51814: GO 51746
51816: POP
51817: POP
// end ;
51818: LD_VAR 0 3
51822: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51823: LD_INT 0
51825: PPUSH
// uc_side := side ;
51826: LD_ADDR_OWVAR 20
51830: PUSH
51831: LD_VAR 0 1
51835: ST_TO_ADDR
// uc_nation := 3 ;
51836: LD_ADDR_OWVAR 21
51840: PUSH
51841: LD_INT 3
51843: ST_TO_ADDR
// vc_chassis := 25 ;
51844: LD_ADDR_OWVAR 37
51848: PUSH
51849: LD_INT 25
51851: ST_TO_ADDR
// vc_engine := engine_siberite ;
51852: LD_ADDR_OWVAR 39
51856: PUSH
51857: LD_INT 3
51859: ST_TO_ADDR
// vc_control := control_computer ;
51860: LD_ADDR_OWVAR 38
51864: PUSH
51865: LD_INT 3
51867: ST_TO_ADDR
// vc_weapon := 59 ;
51868: LD_ADDR_OWVAR 40
51872: PUSH
51873: LD_INT 59
51875: ST_TO_ADDR
// result := CreateVehicle ;
51876: LD_ADDR_VAR 0 5
51880: PUSH
51881: CALL_OW 45
51885: ST_TO_ADDR
// SetDir ( result , d ) ;
51886: LD_VAR 0 5
51890: PPUSH
51891: LD_VAR 0 4
51895: PPUSH
51896: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51900: LD_VAR 0 5
51904: PPUSH
51905: LD_VAR 0 2
51909: PPUSH
51910: LD_VAR 0 3
51914: PPUSH
51915: LD_INT 0
51917: PPUSH
51918: CALL_OW 48
// end ;
51922: LD_VAR 0 5
51926: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51927: LD_INT 0
51929: PPUSH
51930: PPUSH
51931: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51932: LD_ADDR_VAR 0 2
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51955: LD_VAR 0 1
51959: NOT
51960: IFTRUE 51993
51962: PUSH
51963: LD_VAR 0 1
51967: PPUSH
51968: CALL_OW 264
51972: PUSH
51973: LD_INT 12
51975: PUSH
51976: LD_INT 51
51978: PUSH
51979: LD_INT 32
51981: PUSH
51982: LD_INT 89
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: IN
51991: NOT
51992: OR
51993: IFFALSE 51997
// exit ;
51995: GO 52095
// for i := 1 to 3 do
51997: LD_ADDR_VAR 0 3
52001: PUSH
52002: DOUBLE
52003: LD_INT 1
52005: DEC
52006: ST_TO_ADDR
52007: LD_INT 3
52009: PUSH
52010: FOR_TO
52011: IFFALSE 52093
// begin tmp := GetCargo ( cargo , i ) ;
52013: LD_ADDR_VAR 0 4
52017: PUSH
52018: LD_VAR 0 1
52022: PPUSH
52023: LD_VAR 0 3
52027: PPUSH
52028: CALL_OW 289
52032: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52033: LD_ADDR_VAR 0 2
52037: PUSH
52038: LD_VAR 0 2
52042: PPUSH
52043: LD_VAR 0 3
52047: PPUSH
52048: LD_VAR 0 4
52052: PPUSH
52053: CALL_OW 1
52057: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52058: LD_ADDR_VAR 0 2
52062: PUSH
52063: LD_VAR 0 2
52067: PPUSH
52068: LD_INT 4
52070: PPUSH
52071: LD_VAR 0 2
52075: PUSH
52076: LD_INT 4
52078: ARRAY
52079: PUSH
52080: LD_VAR 0 4
52084: PLUS
52085: PPUSH
52086: CALL_OW 1
52090: ST_TO_ADDR
// end ;
52091: GO 52010
52093: POP
52094: POP
// end ;
52095: LD_VAR 0 2
52099: RET
// export function Length ( array ) ; begin
52100: LD_INT 0
52102: PPUSH
// result := array + 0 ;
52103: LD_ADDR_VAR 0 2
52107: PUSH
52108: LD_VAR 0 1
52112: PUSH
52113: LD_INT 0
52115: PLUS
52116: ST_TO_ADDR
// end ;
52117: LD_VAR 0 2
52121: RET
// export function PrepareArray ( array ) ; begin
52122: LD_INT 0
52124: PPUSH
// result := array diff 0 ;
52125: LD_ADDR_VAR 0 2
52129: PUSH
52130: LD_VAR 0 1
52134: PUSH
52135: LD_INT 0
52137: DIFF
52138: ST_TO_ADDR
// if not result [ 1 ] then
52139: LD_VAR 0 2
52143: PUSH
52144: LD_INT 1
52146: ARRAY
52147: NOT
52148: IFFALSE 52168
// result := Delete ( result , 1 ) ;
52150: LD_ADDR_VAR 0 2
52154: PUSH
52155: LD_VAR 0 2
52159: PPUSH
52160: LD_INT 1
52162: PPUSH
52163: CALL_OW 3
52167: ST_TO_ADDR
// end ;
52168: LD_VAR 0 2
52172: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52173: LD_INT 0
52175: PPUSH
52176: PPUSH
52177: PPUSH
52178: PPUSH
// sibRocketRange := 25 ;
52179: LD_ADDR_VAR 0 6
52183: PUSH
52184: LD_INT 25
52186: ST_TO_ADDR
// result := false ;
52187: LD_ADDR_VAR 0 4
52191: PUSH
52192: LD_INT 0
52194: ST_TO_ADDR
// for i := 0 to 5 do
52195: LD_ADDR_VAR 0 5
52199: PUSH
52200: DOUBLE
52201: LD_INT 0
52203: DEC
52204: ST_TO_ADDR
52205: LD_INT 5
52207: PUSH
52208: FOR_TO
52209: IFFALSE 52276
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52211: LD_VAR 0 1
52215: PPUSH
52216: LD_VAR 0 5
52220: PPUSH
52221: LD_VAR 0 6
52225: PPUSH
52226: CALL_OW 272
52230: PPUSH
52231: LD_VAR 0 2
52235: PPUSH
52236: LD_VAR 0 5
52240: PPUSH
52241: LD_VAR 0 6
52245: PPUSH
52246: CALL_OW 273
52250: PPUSH
52251: LD_VAR 0 3
52255: PPUSH
52256: CALL_OW 309
52260: IFFALSE 52274
// begin result := true ;
52262: LD_ADDR_VAR 0 4
52266: PUSH
52267: LD_INT 1
52269: ST_TO_ADDR
// exit ;
52270: POP
52271: POP
52272: GO 52278
// end ;
52274: GO 52208
52276: POP
52277: POP
// end ;
52278: LD_VAR 0 4
52282: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52283: LD_INT 0
52285: PPUSH
52286: PPUSH
52287: PPUSH
// if btype = b_depot then
52288: LD_VAR 0 2
52292: PUSH
52293: LD_INT 0
52295: EQUAL
52296: IFFALSE 52308
// begin result := true ;
52298: LD_ADDR_VAR 0 3
52302: PUSH
52303: LD_INT 1
52305: ST_TO_ADDR
// exit ;
52306: GO 52428
// end ; pom := GetBase ( depot ) ;
52308: LD_ADDR_VAR 0 4
52312: PUSH
52313: LD_VAR 0 1
52317: PPUSH
52318: CALL_OW 274
52322: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52323: LD_ADDR_VAR 0 5
52327: PUSH
52328: LD_VAR 0 2
52332: PPUSH
52333: LD_VAR 0 1
52337: PPUSH
52338: CALL_OW 248
52342: PPUSH
52343: CALL_OW 450
52347: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52348: LD_ADDR_VAR 0 3
52352: PUSH
52353: LD_VAR 0 4
52357: PPUSH
52358: LD_INT 1
52360: PPUSH
52361: CALL_OW 275
52365: PUSH
52366: LD_VAR 0 5
52370: PUSH
52371: LD_INT 1
52373: ARRAY
52374: GREATEREQUAL
52375: IFFALSE 52401
52377: PUSH
52378: LD_VAR 0 4
52382: PPUSH
52383: LD_INT 2
52385: PPUSH
52386: CALL_OW 275
52390: PUSH
52391: LD_VAR 0 5
52395: PUSH
52396: LD_INT 2
52398: ARRAY
52399: GREATEREQUAL
52400: AND
52401: IFFALSE 52427
52403: PUSH
52404: LD_VAR 0 4
52408: PPUSH
52409: LD_INT 3
52411: PPUSH
52412: CALL_OW 275
52416: PUSH
52417: LD_VAR 0 5
52421: PUSH
52422: LD_INT 3
52424: ARRAY
52425: GREATEREQUAL
52426: AND
52427: ST_TO_ADDR
// end ;
52428: LD_VAR 0 3
52432: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52433: LD_INT 0
52435: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52436: LD_VAR 0 1
52440: PPUSH
52441: LD_VAR 0 2
52445: PPUSH
52446: LD_INT 0
52448: PPUSH
52449: LD_INT 0
52451: PPUSH
52452: LD_INT 1
52454: PPUSH
52455: LD_INT 0
52457: PPUSH
52458: CALL_OW 587
// end ;
52462: LD_VAR 0 3
52466: RET
// export function CenterOnNow ( unit ) ; begin
52467: LD_INT 0
52469: PPUSH
// result := IsInUnit ( unit ) ;
52470: LD_ADDR_VAR 0 2
52474: PUSH
52475: LD_VAR 0 1
52479: PPUSH
52480: CALL_OW 310
52484: ST_TO_ADDR
// if not result then
52485: LD_VAR 0 2
52489: NOT
52490: IFFALSE 52502
// result := unit ;
52492: LD_ADDR_VAR 0 2
52496: PUSH
52497: LD_VAR 0 1
52501: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52502: LD_VAR 0 1
52506: PPUSH
52507: CALL_OW 87
// end ;
52511: LD_VAR 0 2
52515: RET
// export function ComMoveHex ( unit , hex ) ; begin
52516: LD_INT 0
52518: PPUSH
// if not hex then
52519: LD_VAR 0 2
52523: NOT
52524: IFFALSE 52528
// exit ;
52526: GO 52581
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52528: LD_VAR 0 2
52532: PUSH
52533: LD_INT 1
52535: ARRAY
52536: PPUSH
52537: LD_VAR 0 2
52541: PUSH
52542: LD_INT 2
52544: ARRAY
52545: PPUSH
52546: CALL_OW 428
52550: IFFALSE 52554
// exit ;
52552: GO 52581
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52554: LD_VAR 0 1
52558: PPUSH
52559: LD_VAR 0 2
52563: PUSH
52564: LD_INT 1
52566: ARRAY
52567: PPUSH
52568: LD_VAR 0 2
52572: PUSH
52573: LD_INT 2
52575: ARRAY
52576: PPUSH
52577: CALL_OW 111
// end ;
52581: LD_VAR 0 3
52585: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52586: LD_INT 0
52588: PPUSH
52589: PPUSH
52590: PPUSH
// if not unit or not enemy then
52591: LD_VAR 0 1
52595: NOT
52596: IFTRUE 52605
52598: PUSH
52599: LD_VAR 0 2
52603: NOT
52604: OR
52605: IFFALSE 52609
// exit ;
52607: GO 52735
// x := GetX ( enemy ) ;
52609: LD_ADDR_VAR 0 4
52613: PUSH
52614: LD_VAR 0 2
52618: PPUSH
52619: CALL_OW 250
52623: ST_TO_ADDR
// y := GetY ( enemy ) ;
52624: LD_ADDR_VAR 0 5
52628: PUSH
52629: LD_VAR 0 2
52633: PPUSH
52634: CALL_OW 251
52638: ST_TO_ADDR
// if ValidHex ( x , y ) then
52639: LD_VAR 0 4
52643: PPUSH
52644: LD_VAR 0 5
52648: PPUSH
52649: CALL_OW 488
52653: IFFALSE 52735
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52655: LD_VAR 0 2
52659: PPUSH
52660: CALL_OW 247
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: IN
52675: IFTRUE 52698
52677: PUSH
52678: LD_VAR 0 1
52682: PPUSH
52683: CALL_OW 255
52687: PPUSH
52688: LD_VAR 0 2
52692: PPUSH
52693: CALL_OW 292
52697: OR
52698: IFFALSE 52716
// ComAttackUnit ( unit , enemy ) else
52700: LD_VAR 0 1
52704: PPUSH
52705: LD_VAR 0 2
52709: PPUSH
52710: CALL_OW 115
52714: GO 52735
// ComAgressiveMove ( unit , x , y ) ;
52716: LD_VAR 0 1
52720: PPUSH
52721: LD_VAR 0 4
52725: PPUSH
52726: LD_VAR 0 5
52730: PPUSH
52731: CALL_OW 114
// end ;
52735: LD_VAR 0 3
52739: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52740: LD_INT 0
52742: PPUSH
52743: PPUSH
52744: PPUSH
// list := AreaToList ( area , 0 ) ;
52745: LD_ADDR_VAR 0 5
52749: PUSH
52750: LD_VAR 0 1
52754: PPUSH
52755: LD_INT 0
52757: PPUSH
52758: CALL_OW 517
52762: ST_TO_ADDR
// if not list then
52763: LD_VAR 0 5
52767: NOT
52768: IFFALSE 52772
// exit ;
52770: GO 52902
// if all then
52772: LD_VAR 0 2
52776: IFFALSE 52864
// begin for i := 1 to list [ 1 ] do
52778: LD_ADDR_VAR 0 4
52782: PUSH
52783: DOUBLE
52784: LD_INT 1
52786: DEC
52787: ST_TO_ADDR
52788: LD_VAR 0 5
52792: PUSH
52793: LD_INT 1
52795: ARRAY
52796: PUSH
52797: FOR_TO
52798: IFFALSE 52860
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52800: LD_ADDR_VAR 0 3
52804: PUSH
52805: LD_VAR 0 3
52809: PPUSH
52810: LD_VAR 0 3
52814: PUSH
52815: LD_INT 1
52817: PLUS
52818: PPUSH
52819: LD_VAR 0 5
52823: PUSH
52824: LD_INT 1
52826: ARRAY
52827: PUSH
52828: LD_VAR 0 4
52832: ARRAY
52833: PUSH
52834: LD_VAR 0 5
52838: PUSH
52839: LD_INT 2
52841: ARRAY
52842: PUSH
52843: LD_VAR 0 4
52847: ARRAY
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PPUSH
52853: CALL_OW 1
52857: ST_TO_ADDR
52858: GO 52797
52860: POP
52861: POP
// exit ;
52862: GO 52902
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52864: LD_ADDR_VAR 0 3
52868: PUSH
52869: LD_VAR 0 5
52873: PUSH
52874: LD_INT 1
52876: ARRAY
52877: PUSH
52878: LD_INT 1
52880: ARRAY
52881: PUSH
52882: LD_VAR 0 5
52886: PUSH
52887: LD_INT 2
52889: ARRAY
52890: PUSH
52891: LD_INT 1
52893: ARRAY
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: EMPTY
52900: LIST
52901: ST_TO_ADDR
// end ;
52902: LD_VAR 0 3
52906: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52907: LD_INT 0
52909: PPUSH
52910: PPUSH
// list := AreaToList ( area , 0 ) ;
52911: LD_ADDR_VAR 0 4
52915: PUSH
52916: LD_VAR 0 1
52920: PPUSH
52921: LD_INT 0
52923: PPUSH
52924: CALL_OW 517
52928: ST_TO_ADDR
// if not list then
52929: LD_VAR 0 4
52933: NOT
52934: IFFALSE 52938
// exit ;
52936: GO 52979
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52938: LD_ADDR_VAR 0 3
52942: PUSH
52943: LD_VAR 0 4
52947: PUSH
52948: LD_INT 1
52950: ARRAY
52951: PUSH
52952: LD_INT 1
52954: ARRAY
52955: PUSH
52956: LD_VAR 0 4
52960: PUSH
52961: LD_INT 2
52963: ARRAY
52964: PUSH
52965: LD_INT 1
52967: ARRAY
52968: PUSH
52969: LD_VAR 0 2
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// end ;
52979: LD_VAR 0 3
52983: RET
// export function First ( array ) ; begin
52984: LD_INT 0
52986: PPUSH
// if not array then
52987: LD_VAR 0 1
52991: NOT
52992: IFFALSE 52996
// exit ;
52994: GO 53010
// result := array [ 1 ] ;
52996: LD_ADDR_VAR 0 2
53000: PUSH
53001: LD_VAR 0 1
53005: PUSH
53006: LD_INT 1
53008: ARRAY
53009: ST_TO_ADDR
// end ;
53010: LD_VAR 0 2
53014: RET
// export function Last ( array ) ; begin
53015: LD_INT 0
53017: PPUSH
// if not array then
53018: LD_VAR 0 1
53022: NOT
53023: IFFALSE 53027
// exit ;
53025: GO 53043
// result := array [ array ] ;
53027: LD_ADDR_VAR 0 2
53031: PUSH
53032: LD_VAR 0 1
53036: PUSH
53037: LD_VAR 0 1
53041: ARRAY
53042: ST_TO_ADDR
// end ;
53043: LD_VAR 0 2
53047: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53048: LD_INT 0
53050: PPUSH
53051: PPUSH
// result := [ ] ;
53052: LD_ADDR_VAR 0 5
53056: PUSH
53057: EMPTY
53058: ST_TO_ADDR
// if not array then
53059: LD_VAR 0 1
53063: NOT
53064: IFFALSE 53068
// exit ;
53066: GO 53180
// for i := 1 to array do
53068: LD_ADDR_VAR 0 6
53072: PUSH
53073: DOUBLE
53074: LD_INT 1
53076: DEC
53077: ST_TO_ADDR
53078: LD_VAR 0 1
53082: PUSH
53083: FOR_TO
53084: IFFALSE 53178
// if array [ i ] [ index ] = value then
53086: LD_VAR 0 1
53090: PUSH
53091: LD_VAR 0 6
53095: ARRAY
53096: PUSH
53097: LD_VAR 0 2
53101: ARRAY
53102: PUSH
53103: LD_VAR 0 3
53107: EQUAL
53108: IFFALSE 53176
// begin if indexColumn then
53110: LD_VAR 0 4
53114: IFFALSE 53150
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53116: LD_ADDR_VAR 0 5
53120: PUSH
53121: LD_VAR 0 5
53125: PPUSH
53126: LD_VAR 0 1
53130: PUSH
53131: LD_VAR 0 6
53135: ARRAY
53136: PUSH
53137: LD_VAR 0 4
53141: ARRAY
53142: PPUSH
53143: CALL 48188 0 2
53147: ST_TO_ADDR
53148: GO 53176
// result := Join ( result , array [ i ] ) ;
53150: LD_ADDR_VAR 0 5
53154: PUSH
53155: LD_VAR 0 5
53159: PPUSH
53160: LD_VAR 0 1
53164: PUSH
53165: LD_VAR 0 6
53169: ARRAY
53170: PPUSH
53171: CALL 48188 0 2
53175: ST_TO_ADDR
// end ;
53176: GO 53083
53178: POP
53179: POP
// end ;
53180: LD_VAR 0 5
53184: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53185: LD_INT 0
53187: PPUSH
// if not vehicles or not parkingPoint then
53188: LD_VAR 0 1
53192: NOT
53193: IFTRUE 53202
53195: PUSH
53196: LD_VAR 0 2
53200: NOT
53201: OR
53202: IFFALSE 53206
// exit ;
53204: GO 53304
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53206: LD_ADDR_VAR 0 1
53210: PUSH
53211: LD_VAR 0 1
53215: PPUSH
53216: LD_INT 50
53218: PUSH
53219: EMPTY
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: LD_INT 92
53227: PUSH
53228: LD_VAR 0 2
53232: PUSH
53233: LD_INT 1
53235: ARRAY
53236: PUSH
53237: LD_VAR 0 2
53241: PUSH
53242: LD_INT 2
53244: ARRAY
53245: PUSH
53246: LD_INT 8
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PPUSH
53263: CALL_OW 72
53267: ST_TO_ADDR
// if not vehicles then
53268: LD_VAR 0 1
53272: NOT
53273: IFFALSE 53277
// exit ;
53275: GO 53304
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53277: LD_VAR 0 1
53281: PPUSH
53282: LD_VAR 0 2
53286: PUSH
53287: LD_INT 1
53289: ARRAY
53290: PPUSH
53291: LD_VAR 0 2
53295: PUSH
53296: LD_INT 2
53298: ARRAY
53299: PPUSH
53300: CALL_OW 111
// end ;
53304: LD_VAR 0 3
53308: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53309: LD_INT 0
53311: PPUSH
53312: PPUSH
53313: PPUSH
// if not side or not area then
53314: LD_VAR 0 1
53318: NOT
53319: IFTRUE 53328
53321: PUSH
53322: LD_VAR 0 2
53326: NOT
53327: OR
53328: IFFALSE 53332
// exit ;
53330: GO 53451
// tmp := AreaToList ( area , 0 ) ;
53332: LD_ADDR_VAR 0 5
53336: PUSH
53337: LD_VAR 0 2
53341: PPUSH
53342: LD_INT 0
53344: PPUSH
53345: CALL_OW 517
53349: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53350: LD_ADDR_VAR 0 4
53354: PUSH
53355: DOUBLE
53356: LD_INT 1
53358: DEC
53359: ST_TO_ADDR
53360: LD_VAR 0 5
53364: PUSH
53365: LD_INT 1
53367: ARRAY
53368: PUSH
53369: FOR_TO
53370: IFFALSE 53449
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53372: LD_VAR 0 5
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: PUSH
53381: LD_VAR 0 4
53385: ARRAY
53386: PPUSH
53387: LD_VAR 0 5
53391: PUSH
53392: LD_INT 2
53394: ARRAY
53395: PUSH
53396: LD_VAR 0 4
53400: ARRAY
53401: PPUSH
53402: CALL_OW 351
53406: IFFALSE 53447
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53408: LD_VAR 0 5
53412: PUSH
53413: LD_INT 1
53415: ARRAY
53416: PUSH
53417: LD_VAR 0 4
53421: ARRAY
53422: PPUSH
53423: LD_VAR 0 5
53427: PUSH
53428: LD_INT 2
53430: ARRAY
53431: PUSH
53432: LD_VAR 0 4
53436: ARRAY
53437: PPUSH
53438: LD_VAR 0 1
53442: PPUSH
53443: CALL_OW 244
// end ;
53447: GO 53369
53449: POP
53450: POP
// end ;
53451: LD_VAR 0 3
53455: RET
// export function UniqueArray ( array ) ; var i ; begin
53456: LD_INT 0
53458: PPUSH
53459: PPUSH
// result := [ ] ;
53460: LD_ADDR_VAR 0 2
53464: PUSH
53465: EMPTY
53466: ST_TO_ADDR
// if not array then
53467: LD_VAR 0 1
53471: NOT
53472: IFFALSE 53476
// exit ;
53474: GO 53537
// for i := 1 to array do
53476: LD_ADDR_VAR 0 3
53480: PUSH
53481: DOUBLE
53482: LD_INT 1
53484: DEC
53485: ST_TO_ADDR
53486: LD_VAR 0 1
53490: PUSH
53491: FOR_TO
53492: IFFALSE 53535
// if not array [ i ] in result then
53494: LD_VAR 0 1
53498: PUSH
53499: LD_VAR 0 3
53503: ARRAY
53504: PUSH
53505: LD_VAR 0 2
53509: IN
53510: NOT
53511: IFFALSE 53533
// result := Join ( result , i ) ;
53513: LD_ADDR_VAR 0 2
53517: PUSH
53518: LD_VAR 0 2
53522: PPUSH
53523: LD_VAR 0 3
53527: PPUSH
53528: CALL 48188 0 2
53532: ST_TO_ADDR
53533: GO 53491
53535: POP
53536: POP
// end ; end_of_file
53537: LD_VAR 0 2
53541: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53542: LD_VAR 0 1
53546: PUSH
53547: LD_INT 200
53549: DOUBLE
53550: GREATEREQUAL
53551: IFFALSE 53559
53553: LD_INT 299
53555: DOUBLE
53556: LESSEQUAL
53557: IFTRUE 53561
53559: GO 53593
53561: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53562: LD_VAR 0 1
53566: PPUSH
53567: LD_VAR 0 2
53571: PPUSH
53572: LD_VAR 0 3
53576: PPUSH
53577: LD_VAR 0 4
53581: PPUSH
53582: LD_VAR 0 5
53586: PPUSH
53587: CALL 54374 0 5
53591: GO 53670
53593: LD_INT 300
53595: DOUBLE
53596: GREATEREQUAL
53597: IFFALSE 53605
53599: LD_INT 399
53601: DOUBLE
53602: LESSEQUAL
53603: IFTRUE 53607
53605: GO 53669
53607: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53608: LD_VAR 0 1
53612: PPUSH
53613: LD_VAR 0 2
53617: PPUSH
53618: LD_VAR 0 3
53622: PPUSH
53623: LD_VAR 0 4
53627: PPUSH
53628: LD_VAR 0 5
53632: PPUSH
53633: LD_VAR 0 6
53637: PPUSH
53638: LD_VAR 0 7
53642: PPUSH
53643: LD_VAR 0 8
53647: PPUSH
53648: LD_VAR 0 9
53652: PPUSH
53653: LD_VAR 0 10
53657: PPUSH
53658: LD_VAR 0 11
53662: PPUSH
53663: CALL 61460 0 11
53667: GO 53670
53669: POP
// end ;
53670: PPOPN 11
53672: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53673: LD_VAR 0 1
53677: PPUSH
53678: LD_VAR 0 2
53682: PPUSH
53683: LD_VAR 0 3
53687: PPUSH
53688: LD_VAR 0 4
53692: PPUSH
53693: LD_VAR 0 5
53697: PPUSH
53698: CALL 53755 0 5
// end ; end_of_file
53702: PPOPN 5
53704: END
// export function SOS_UnitDestroyed ( un ) ; begin
53705: LD_INT 0
53707: PPUSH
// ComRadiation ( un ) ;
53708: LD_VAR 0 1
53712: PPUSH
53713: CALL 54794 0 1
// end ;
53717: LD_VAR 0 2
53721: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53722: LD_INT 0
53724: PPUSH
// ComRadiation ( un ) ;
53725: LD_VAR 0 1
53729: PPUSH
53730: CALL 54794 0 1
// end ;
53734: LD_VAR 0 2
53738: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53739: LD_INT 0
53741: PPUSH
// end ;
53742: LD_VAR 0 4
53746: RET
// export function SOS_Command ( cmd ) ; begin
53747: LD_INT 0
53749: PPUSH
// end ;
53750: LD_VAR 0 2
53754: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53755: LD_INT 0
53757: PPUSH
// end ;
53758: LD_VAR 0 6
53762: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53763: LD_INT 0
53765: PPUSH
53766: PPUSH
53767: PPUSH
53768: PPUSH
// if not vehicle or not factory then
53769: LD_VAR 0 1
53773: NOT
53774: IFTRUE 53783
53776: PUSH
53777: LD_VAR 0 2
53781: NOT
53782: OR
53783: IFFALSE 53787
// exit ;
53785: GO 54369
// if not factoryWaypoints then
53787: LD_EXP 59
53791: NOT
53792: IFFALSE 53796
// exit ;
53794: GO 54369
// for i := 1 to Count ( factoryWaypoints ) do
53796: LD_ADDR_VAR 0 4
53800: PUSH
53801: DOUBLE
53802: LD_INT 1
53804: DEC
53805: ST_TO_ADDR
53806: LD_EXP 59
53810: PPUSH
53811: CALL 12256 0 1
53815: PUSH
53816: FOR_TO
53817: IFFALSE 54367
// if factoryWaypoints [ i ] [ 2 ] = factory then
53819: LD_EXP 59
53823: PUSH
53824: LD_VAR 0 4
53828: ARRAY
53829: PUSH
53830: LD_INT 2
53832: ARRAY
53833: PUSH
53834: LD_VAR 0 2
53838: EQUAL
53839: IFFALSE 54365
// begin if GetControl ( vehicle ) = control_manual then
53841: LD_VAR 0 1
53845: PPUSH
53846: CALL_OW 263
53850: PUSH
53851: LD_INT 1
53853: EQUAL
53854: IFFALSE 54218
// begin driver := IsDrivenBy ( vehicle ) ;
53856: LD_ADDR_VAR 0 5
53860: PUSH
53861: LD_VAR 0 1
53865: PPUSH
53866: CALL_OW 311
53870: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53871: LD_VAR 0 5
53875: PUSH
53876: LD_EXP 60
53880: IN
53881: IFTRUE 53895
53883: PUSH
53884: LD_VAR 0 1
53888: PUSH
53889: LD_EXP 60
53893: IN
53894: OR
53895: IFFALSE 53901
// exit ;
53897: POP
53898: POP
53899: GO 54369
// if not HasTask ( driver ) then
53901: LD_VAR 0 5
53905: PPUSH
53906: CALL_OW 314
53910: NOT
53911: IFFALSE 54216
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53913: LD_ADDR_EXP 60
53917: PUSH
53918: LD_EXP 60
53922: PPUSH
53923: LD_VAR 0 5
53927: PPUSH
53928: CALL 48188 0 2
53932: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53933: LD_ADDR_EXP 60
53937: PUSH
53938: LD_EXP 60
53942: PPUSH
53943: LD_VAR 0 1
53947: PPUSH
53948: CALL 48188 0 2
53952: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53953: LD_ADDR_VAR 0 6
53957: PUSH
53958: LD_EXP 59
53962: PUSH
53963: LD_VAR 0 4
53967: ARRAY
53968: PUSH
53969: LD_INT 3
53971: ARRAY
53972: PPUSH
53973: LD_EXP 59
53977: PUSH
53978: LD_VAR 0 4
53982: ARRAY
53983: PUSH
53984: LD_INT 4
53986: ARRAY
53987: PPUSH
53988: CALL_OW 428
53992: ST_TO_ADDR
// if hex then
53993: LD_VAR 0 6
53997: IFFALSE 54015
// ComMoveUnit ( driver , hex ) else
53999: LD_VAR 0 5
54003: PPUSH
54004: LD_VAR 0 6
54008: PPUSH
54009: CALL_OW 112
54013: GO 54099
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54015: LD_VAR 0 1
54019: PPUSH
54020: LD_EXP 59
54024: PUSH
54025: LD_VAR 0 4
54029: ARRAY
54030: PUSH
54031: LD_INT 3
54033: ARRAY
54034: PPUSH
54035: LD_EXP 59
54039: PUSH
54040: LD_VAR 0 4
54044: ARRAY
54045: PUSH
54046: LD_INT 4
54048: ARRAY
54049: PPUSH
54050: CALL_OW 297
54054: PUSH
54055: LD_INT 0
54057: GREATER
54058: IFFALSE 54099
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54060: LD_VAR 0 5
54064: PPUSH
54065: LD_EXP 59
54069: PUSH
54070: LD_VAR 0 4
54074: ARRAY
54075: PUSH
54076: LD_INT 3
54078: ARRAY
54079: PPUSH
54080: LD_EXP 59
54084: PUSH
54085: LD_VAR 0 4
54089: ARRAY
54090: PUSH
54091: LD_INT 4
54093: ARRAY
54094: PPUSH
54095: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54099: LD_VAR 0 5
54103: PPUSH
54104: CALL_OW 181
// if Multiplayer then
54108: LD_OWVAR 4
54112: IFFALSE 54161
// begin repeat wait ( 10 ) ;
54114: LD_INT 10
54116: PPUSH
54117: CALL_OW 67
// until not IsInUnit ( driver ) ;
54121: LD_VAR 0 5
54125: PPUSH
54126: CALL_OW 310
54130: NOT
54131: IFFALSE 54114
// if not HasTask ( driver ) then
54133: LD_VAR 0 5
54137: PPUSH
54138: CALL_OW 314
54142: NOT
54143: IFFALSE 54159
// ComEnterUnit ( driver , factory ) ;
54145: LD_VAR 0 5
54149: PPUSH
54150: LD_VAR 0 2
54154: PPUSH
54155: CALL_OW 120
// end else
54159: GO 54175
// AddComEnterUnit ( driver , factory ) ;
54161: LD_VAR 0 5
54165: PPUSH
54166: LD_VAR 0 2
54170: PPUSH
54171: CALL_OW 180
// wait ( 0 0$1 ) ;
54175: LD_INT 35
54177: PPUSH
54178: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54182: LD_ADDR_EXP 60
54186: PUSH
54187: LD_EXP 60
54191: PUSH
54192: LD_VAR 0 5
54196: DIFF
54197: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54198: LD_ADDR_EXP 60
54202: PUSH
54203: LD_EXP 60
54207: PUSH
54208: LD_VAR 0 1
54212: DIFF
54213: ST_TO_ADDR
// break ;
54214: GO 54367
// end ; end else
54216: GO 54365
// if GetControl ( vehicle ) = control_remote then
54218: LD_VAR 0 1
54222: PPUSH
54223: CALL_OW 263
54227: PUSH
54228: LD_INT 2
54230: EQUAL
54231: IFFALSE 54317
// begin wait ( 0 0$2 ) ;
54233: LD_INT 70
54235: PPUSH
54236: CALL_OW 67
// repeat wait ( 10 ) ;
54240: LD_INT 10
54242: PPUSH
54243: CALL_OW 67
// Connect ( vehicle ) ;
54247: LD_VAR 0 1
54251: PPUSH
54252: CALL 18500 0 1
// until IsControledBy ( vehicle ) ;
54256: LD_VAR 0 1
54260: PPUSH
54261: CALL_OW 312
54265: IFFALSE 54240
// wait ( 10 ) ;
54267: LD_INT 10
54269: PPUSH
54270: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54274: LD_VAR 0 1
54278: PPUSH
54279: LD_EXP 59
54283: PUSH
54284: LD_VAR 0 4
54288: ARRAY
54289: PUSH
54290: LD_INT 3
54292: ARRAY
54293: PPUSH
54294: LD_EXP 59
54298: PUSH
54299: LD_VAR 0 4
54303: ARRAY
54304: PUSH
54305: LD_INT 4
54307: ARRAY
54308: PPUSH
54309: CALL_OW 111
// break ;
54313: GO 54367
// end else
54315: GO 54365
// begin wait ( 0 0$3 ) ;
54317: LD_INT 105
54319: PPUSH
54320: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54324: LD_VAR 0 1
54328: PPUSH
54329: LD_EXP 59
54333: PUSH
54334: LD_VAR 0 4
54338: ARRAY
54339: PUSH
54340: LD_INT 3
54342: ARRAY
54343: PPUSH
54344: LD_EXP 59
54348: PUSH
54349: LD_VAR 0 4
54353: ARRAY
54354: PUSH
54355: LD_INT 4
54357: ARRAY
54358: PPUSH
54359: CALL_OW 111
// break ;
54363: GO 54367
// end ; end ;
54365: GO 53816
54367: POP
54368: POP
// end ;
54369: LD_VAR 0 3
54373: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54374: LD_INT 0
54376: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54377: LD_VAR 0 1
54381: PUSH
54382: LD_INT 250
54384: EQUAL
54385: IFFALSE 54402
54387: PUSH
54388: LD_VAR 0 2
54392: PPUSH
54393: CALL_OW 264
54397: PUSH
54398: LD_INT 81
54400: EQUAL
54401: AND
54402: IFFALSE 54423
// MinerPlaceMine ( unit , x , y ) ;
54404: LD_VAR 0 2
54408: PPUSH
54409: LD_VAR 0 4
54413: PPUSH
54414: LD_VAR 0 5
54418: PPUSH
54419: CALL 57555 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54423: LD_VAR 0 1
54427: PUSH
54428: LD_INT 251
54430: EQUAL
54431: IFFALSE 54448
54433: PUSH
54434: LD_VAR 0 2
54438: PPUSH
54439: CALL_OW 264
54443: PUSH
54444: LD_INT 81
54446: EQUAL
54447: AND
54448: IFFALSE 54469
// MinerDetonateMine ( unit , x , y ) ;
54450: LD_VAR 0 2
54454: PPUSH
54455: LD_VAR 0 4
54459: PPUSH
54460: LD_VAR 0 5
54464: PPUSH
54465: CALL 57834 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54469: LD_VAR 0 1
54473: PUSH
54474: LD_INT 252
54476: EQUAL
54477: IFFALSE 54494
54479: PUSH
54480: LD_VAR 0 2
54484: PPUSH
54485: CALL_OW 264
54489: PUSH
54490: LD_INT 81
54492: EQUAL
54493: AND
54494: IFFALSE 54515
// MinerCreateMinefield ( unit , x , y ) ;
54496: LD_VAR 0 2
54500: PPUSH
54501: LD_VAR 0 4
54505: PPUSH
54506: LD_VAR 0 5
54510: PPUSH
54511: CALL 58253 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54515: LD_VAR 0 1
54519: PUSH
54520: LD_INT 253
54522: EQUAL
54523: IFFALSE 54540
54525: PUSH
54526: LD_VAR 0 2
54530: PPUSH
54531: CALL_OW 257
54535: PUSH
54536: LD_INT 5
54538: EQUAL
54539: AND
54540: IFFALSE 54561
// ComBinocular ( unit , x , y ) ;
54542: LD_VAR 0 2
54546: PPUSH
54547: LD_VAR 0 4
54551: PPUSH
54552: LD_VAR 0 5
54556: PPUSH
54557: CALL 58628 0 3
// if selectedUnit then
54561: LD_VAR 0 3
54565: IFFALSE 54625
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54567: LD_VAR 0 1
54571: PUSH
54572: LD_INT 254
54574: EQUAL
54575: IFFALSE 54592
54577: PUSH
54578: LD_VAR 0 2
54582: PPUSH
54583: CALL_OW 264
54587: PUSH
54588: LD_INT 99
54590: EQUAL
54591: AND
54592: IFFALSE 54609
54594: PUSH
54595: LD_VAR 0 3
54599: PPUSH
54600: CALL_OW 263
54604: PUSH
54605: LD_INT 3
54607: EQUAL
54608: AND
54609: IFFALSE 54625
// HackDestroyVehicle ( unit , selectedUnit ) ;
54611: LD_VAR 0 2
54615: PPUSH
54616: LD_VAR 0 3
54620: PPUSH
54621: CALL 56915 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54625: LD_VAR 0 1
54629: PUSH
54630: LD_INT 255
54632: EQUAL
54633: IFFALSE 54657
54635: PUSH
54636: LD_VAR 0 2
54640: PPUSH
54641: CALL_OW 264
54645: PUSH
54646: LD_INT 14
54648: PUSH
54649: LD_INT 53
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: IN
54656: AND
54657: IFFALSE 54675
54659: PUSH
54660: LD_VAR 0 4
54664: PPUSH
54665: LD_VAR 0 5
54669: PPUSH
54670: CALL_OW 488
54674: AND
54675: IFFALSE 54699
// CutTreeXYR ( unit , x , y , 12 ) ;
54677: LD_VAR 0 2
54681: PPUSH
54682: LD_VAR 0 4
54686: PPUSH
54687: LD_VAR 0 5
54691: PPUSH
54692: LD_INT 12
54694: PPUSH
54695: CALL 54890 0 4
// if cmd = 256 then
54699: LD_VAR 0 1
54703: PUSH
54704: LD_INT 256
54706: EQUAL
54707: IFFALSE 54728
// SetFactoryWaypoint ( unit , x , y ) ;
54709: LD_VAR 0 2
54713: PPUSH
54714: LD_VAR 0 4
54718: PPUSH
54719: LD_VAR 0 5
54723: PPUSH
54724: CALL 61468 0 3
// if cmd = 257 then
54728: LD_VAR 0 1
54732: PUSH
54733: LD_INT 257
54735: EQUAL
54736: IFFALSE 54757
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54738: LD_VAR 0 2
54742: PPUSH
54743: LD_VAR 0 4
54747: PPUSH
54748: LD_VAR 0 5
54752: PPUSH
54753: CALL 61964 0 3
// if cmd = 258 then
54757: LD_VAR 0 1
54761: PUSH
54762: LD_INT 258
54764: EQUAL
54765: IFFALSE 54789
// BurnTreeXYR ( unit , x , y , 8 ) ;
54767: LD_VAR 0 2
54771: PPUSH
54772: LD_VAR 0 4
54776: PPUSH
54777: LD_VAR 0 5
54781: PPUSH
54782: LD_INT 8
54784: PPUSH
54785: CALL 55290 0 4
// end ;
54789: LD_VAR 0 6
54793: RET
// export function ComRadiation ( un ) ; var eff ; begin
54794: LD_INT 0
54796: PPUSH
54797: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54798: LD_VAR 0 1
54802: PPUSH
54803: CALL_OW 264
54807: PUSH
54808: LD_INT 91
54810: NONEQUAL
54811: IFFALSE 54815
// exit ;
54813: GO 54885
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54815: LD_INT 68
54817: PPUSH
54818: LD_VAR 0 1
54822: PPUSH
54823: CALL_OW 255
54827: PPUSH
54828: CALL_OW 321
54832: PUSH
54833: LD_INT 2
54835: EQUAL
54836: IFFALSE 54848
// eff := 50 else
54838: LD_ADDR_VAR 0 3
54842: PUSH
54843: LD_INT 50
54845: ST_TO_ADDR
54846: GO 54856
// eff := 25 ;
54848: LD_ADDR_VAR 0 3
54852: PUSH
54853: LD_INT 25
54855: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54856: LD_VAR 0 1
54860: PPUSH
54861: CALL_OW 250
54865: PPUSH
54866: LD_VAR 0 1
54870: PPUSH
54871: CALL_OW 251
54875: PPUSH
54876: LD_VAR 0 3
54880: PPUSH
54881: CALL_OW 495
// end ;
54885: LD_VAR 0 2
54889: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54890: LD_INT 0
54892: PPUSH
54893: PPUSH
54894: PPUSH
54895: PPUSH
54896: PPUSH
54897: PPUSH
54898: PPUSH
54899: PPUSH
54900: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54901: LD_VAR 0 1
54905: PPUSH
54906: CALL_OW 302
54910: NOT
54911: IFTRUE 54930
54913: PUSH
54914: LD_VAR 0 2
54918: PPUSH
54919: LD_VAR 0 3
54923: PPUSH
54924: CALL_OW 488
54928: NOT
54929: OR
54930: IFTRUE 54939
54932: PUSH
54933: LD_VAR 0 4
54937: NOT
54938: OR
54939: IFFALSE 54943
// exit ;
54941: GO 55285
// list := [ ] ;
54943: LD_ADDR_VAR 0 13
54947: PUSH
54948: EMPTY
54949: ST_TO_ADDR
// if x - r < 0 then
54950: LD_VAR 0 2
54954: PUSH
54955: LD_VAR 0 4
54959: MINUS
54960: PUSH
54961: LD_INT 0
54963: LESS
54964: IFFALSE 54976
// min_x := 0 else
54966: LD_ADDR_VAR 0 7
54970: PUSH
54971: LD_INT 0
54973: ST_TO_ADDR
54974: GO 54992
// min_x := x - r ;
54976: LD_ADDR_VAR 0 7
54980: PUSH
54981: LD_VAR 0 2
54985: PUSH
54986: LD_VAR 0 4
54990: MINUS
54991: ST_TO_ADDR
// if y - r < 0 then
54992: LD_VAR 0 3
54996: PUSH
54997: LD_VAR 0 4
55001: MINUS
55002: PUSH
55003: LD_INT 0
55005: LESS
55006: IFFALSE 55018
// min_y := 0 else
55008: LD_ADDR_VAR 0 8
55012: PUSH
55013: LD_INT 0
55015: ST_TO_ADDR
55016: GO 55034
// min_y := y - r ;
55018: LD_ADDR_VAR 0 8
55022: PUSH
55023: LD_VAR 0 3
55027: PUSH
55028: LD_VAR 0 4
55032: MINUS
55033: ST_TO_ADDR
// max_x := x + r ;
55034: LD_ADDR_VAR 0 9
55038: PUSH
55039: LD_VAR 0 2
55043: PUSH
55044: LD_VAR 0 4
55048: PLUS
55049: ST_TO_ADDR
// max_y := y + r ;
55050: LD_ADDR_VAR 0 10
55054: PUSH
55055: LD_VAR 0 3
55059: PUSH
55060: LD_VAR 0 4
55064: PLUS
55065: ST_TO_ADDR
// for _x = min_x to max_x do
55066: LD_ADDR_VAR 0 11
55070: PUSH
55071: DOUBLE
55072: LD_VAR 0 7
55076: DEC
55077: ST_TO_ADDR
55078: LD_VAR 0 9
55082: PUSH
55083: FOR_TO
55084: IFFALSE 55203
// for _y = min_y to max_y do
55086: LD_ADDR_VAR 0 12
55090: PUSH
55091: DOUBLE
55092: LD_VAR 0 8
55096: DEC
55097: ST_TO_ADDR
55098: LD_VAR 0 10
55102: PUSH
55103: FOR_TO
55104: IFFALSE 55199
// begin if not ValidHex ( _x , _y ) then
55106: LD_VAR 0 11
55110: PPUSH
55111: LD_VAR 0 12
55115: PPUSH
55116: CALL_OW 488
55120: NOT
55121: IFFALSE 55125
// continue ;
55123: GO 55103
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55125: LD_VAR 0 11
55129: PPUSH
55130: LD_VAR 0 12
55134: PPUSH
55135: CALL_OW 351
55139: IFFALSE 55157
55141: PUSH
55142: LD_VAR 0 11
55146: PPUSH
55147: LD_VAR 0 12
55151: PPUSH
55152: CALL_OW 554
55156: AND
55157: IFFALSE 55197
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55159: LD_ADDR_VAR 0 13
55163: PUSH
55164: LD_VAR 0 13
55168: PPUSH
55169: LD_VAR 0 13
55173: PUSH
55174: LD_INT 1
55176: PLUS
55177: PPUSH
55178: LD_VAR 0 11
55182: PUSH
55183: LD_VAR 0 12
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PPUSH
55192: CALL_OW 2
55196: ST_TO_ADDR
// end ;
55197: GO 55103
55199: POP
55200: POP
55201: GO 55083
55203: POP
55204: POP
// if not list then
55205: LD_VAR 0 13
55209: NOT
55210: IFFALSE 55214
// exit ;
55212: GO 55285
// for i in list do
55214: LD_ADDR_VAR 0 6
55218: PUSH
55219: LD_VAR 0 13
55223: PUSH
55224: FOR_IN
55225: IFFALSE 55283
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55227: LD_VAR 0 1
55231: PPUSH
55232: LD_STRING M
55234: PUSH
55235: LD_VAR 0 6
55239: PUSH
55240: LD_INT 1
55242: ARRAY
55243: PUSH
55244: LD_VAR 0 6
55248: PUSH
55249: LD_INT 2
55251: ARRAY
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: PUSH
55274: EMPTY
55275: LIST
55276: PPUSH
55277: CALL_OW 447
55281: GO 55224
55283: POP
55284: POP
// end ;
55285: LD_VAR 0 5
55289: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55290: LD_INT 0
55292: PPUSH
55293: PPUSH
55294: PPUSH
55295: PPUSH
55296: PPUSH
55297: PPUSH
55298: PPUSH
55299: PPUSH
55300: PPUSH
55301: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55302: LD_VAR 0 1
55306: PPUSH
55307: CALL_OW 302
55311: NOT
55312: IFTRUE 55331
55314: PUSH
55315: LD_VAR 0 2
55319: PPUSH
55320: LD_VAR 0 3
55324: PPUSH
55325: CALL_OW 488
55329: NOT
55330: OR
55331: IFTRUE 55340
55333: PUSH
55334: LD_VAR 0 4
55338: NOT
55339: OR
55340: IFFALSE 55344
// exit ;
55342: GO 55861
// list := [ ] ;
55344: LD_ADDR_VAR 0 13
55348: PUSH
55349: EMPTY
55350: ST_TO_ADDR
// if x - r < 0 then
55351: LD_VAR 0 2
55355: PUSH
55356: LD_VAR 0 4
55360: MINUS
55361: PUSH
55362: LD_INT 0
55364: LESS
55365: IFFALSE 55377
// min_x := 0 else
55367: LD_ADDR_VAR 0 7
55371: PUSH
55372: LD_INT 0
55374: ST_TO_ADDR
55375: GO 55393
// min_x := x - r ;
55377: LD_ADDR_VAR 0 7
55381: PUSH
55382: LD_VAR 0 2
55386: PUSH
55387: LD_VAR 0 4
55391: MINUS
55392: ST_TO_ADDR
// if y - r < 0 then
55393: LD_VAR 0 3
55397: PUSH
55398: LD_VAR 0 4
55402: MINUS
55403: PUSH
55404: LD_INT 0
55406: LESS
55407: IFFALSE 55419
// min_y := 0 else
55409: LD_ADDR_VAR 0 8
55413: PUSH
55414: LD_INT 0
55416: ST_TO_ADDR
55417: GO 55435
// min_y := y - r ;
55419: LD_ADDR_VAR 0 8
55423: PUSH
55424: LD_VAR 0 3
55428: PUSH
55429: LD_VAR 0 4
55433: MINUS
55434: ST_TO_ADDR
// max_x := x + r ;
55435: LD_ADDR_VAR 0 9
55439: PUSH
55440: LD_VAR 0 2
55444: PUSH
55445: LD_VAR 0 4
55449: PLUS
55450: ST_TO_ADDR
// max_y := y + r ;
55451: LD_ADDR_VAR 0 10
55455: PUSH
55456: LD_VAR 0 3
55460: PUSH
55461: LD_VAR 0 4
55465: PLUS
55466: ST_TO_ADDR
// for _x = min_x to max_x do
55467: LD_ADDR_VAR 0 11
55471: PUSH
55472: DOUBLE
55473: LD_VAR 0 7
55477: DEC
55478: ST_TO_ADDR
55479: LD_VAR 0 9
55483: PUSH
55484: FOR_TO
55485: IFFALSE 55604
// for _y = min_y to max_y do
55487: LD_ADDR_VAR 0 12
55491: PUSH
55492: DOUBLE
55493: LD_VAR 0 8
55497: DEC
55498: ST_TO_ADDR
55499: LD_VAR 0 10
55503: PUSH
55504: FOR_TO
55505: IFFALSE 55600
// begin if not ValidHex ( _x , _y ) then
55507: LD_VAR 0 11
55511: PPUSH
55512: LD_VAR 0 12
55516: PPUSH
55517: CALL_OW 488
55521: NOT
55522: IFFALSE 55526
// continue ;
55524: GO 55504
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55526: LD_VAR 0 11
55530: PPUSH
55531: LD_VAR 0 12
55535: PPUSH
55536: CALL_OW 351
55540: IFFALSE 55558
55542: PUSH
55543: LD_VAR 0 11
55547: PPUSH
55548: LD_VAR 0 12
55552: PPUSH
55553: CALL_OW 554
55557: AND
55558: IFFALSE 55598
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55560: LD_ADDR_VAR 0 13
55564: PUSH
55565: LD_VAR 0 13
55569: PPUSH
55570: LD_VAR 0 13
55574: PUSH
55575: LD_INT 1
55577: PLUS
55578: PPUSH
55579: LD_VAR 0 11
55583: PUSH
55584: LD_VAR 0 12
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PPUSH
55593: CALL_OW 2
55597: ST_TO_ADDR
// end ;
55598: GO 55504
55600: POP
55601: POP
55602: GO 55484
55604: POP
55605: POP
// if not list then
55606: LD_VAR 0 13
55610: NOT
55611: IFFALSE 55615
// exit ;
55613: GO 55861
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55615: LD_ADDR_VAR 0 13
55619: PUSH
55620: LD_VAR 0 1
55624: PPUSH
55625: LD_VAR 0 13
55629: PPUSH
55630: LD_INT 1
55632: PPUSH
55633: LD_INT 1
55635: PPUSH
55636: CALL 15628 0 4
55640: ST_TO_ADDR
// ComStop ( flame ) ;
55641: LD_VAR 0 1
55645: PPUSH
55646: CALL_OW 141
// for i in list do
55650: LD_ADDR_VAR 0 6
55654: PUSH
55655: LD_VAR 0 13
55659: PUSH
55660: FOR_IN
55661: IFFALSE 55692
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55663: LD_VAR 0 1
55667: PPUSH
55668: LD_VAR 0 6
55672: PUSH
55673: LD_INT 1
55675: ARRAY
55676: PPUSH
55677: LD_VAR 0 6
55681: PUSH
55682: LD_INT 2
55684: ARRAY
55685: PPUSH
55686: CALL_OW 176
55690: GO 55660
55692: POP
55693: POP
// repeat wait ( 0 0$1 ) ;
55694: LD_INT 35
55696: PPUSH
55697: CALL_OW 67
// task := GetTaskList ( flame ) ;
55701: LD_ADDR_VAR 0 14
55705: PUSH
55706: LD_VAR 0 1
55710: PPUSH
55711: CALL_OW 437
55715: ST_TO_ADDR
// if not task then
55716: LD_VAR 0 14
55720: NOT
55721: IFFALSE 55725
// exit ;
55723: GO 55861
// if task [ 1 ] [ 1 ] <> | then
55725: LD_VAR 0 14
55729: PUSH
55730: LD_INT 1
55732: ARRAY
55733: PUSH
55734: LD_INT 1
55736: ARRAY
55737: PUSH
55738: LD_STRING |
55740: NONEQUAL
55741: IFFALSE 55745
// exit ;
55743: GO 55861
// _x := task [ 1 ] [ 2 ] ;
55745: LD_ADDR_VAR 0 11
55749: PUSH
55750: LD_VAR 0 14
55754: PUSH
55755: LD_INT 1
55757: ARRAY
55758: PUSH
55759: LD_INT 2
55761: ARRAY
55762: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55763: LD_ADDR_VAR 0 12
55767: PUSH
55768: LD_VAR 0 14
55772: PUSH
55773: LD_INT 1
55775: ARRAY
55776: PUSH
55777: LD_INT 3
55779: ARRAY
55780: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55781: LD_VAR 0 11
55785: PPUSH
55786: LD_VAR 0 12
55790: PPUSH
55791: CALL_OW 351
55795: NOT
55796: IFTRUE 55815
55798: PUSH
55799: LD_VAR 0 11
55803: PPUSH
55804: LD_VAR 0 12
55808: PPUSH
55809: CALL_OW 554
55813: NOT
55814: OR
55815: IFFALSE 55849
// begin task := Delete ( task , 1 ) ;
55817: LD_ADDR_VAR 0 14
55821: PUSH
55822: LD_VAR 0 14
55826: PPUSH
55827: LD_INT 1
55829: PPUSH
55830: CALL_OW 3
55834: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55835: LD_VAR 0 1
55839: PPUSH
55840: LD_VAR 0 14
55844: PPUSH
55845: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55849: LD_VAR 0 1
55853: PPUSH
55854: CALL_OW 314
55858: NOT
55859: IFFALSE 55694
// end ;
55861: LD_VAR 0 5
55865: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55866: LD_EXP 48
55870: NOT
55871: IFFALSE 55921
55873: GO 55875
55875: DISABLE
// begin initHack := true ;
55876: LD_ADDR_EXP 48
55880: PUSH
55881: LD_INT 1
55883: ST_TO_ADDR
// hackTanks := [ ] ;
55884: LD_ADDR_EXP 49
55888: PUSH
55889: EMPTY
55890: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55891: LD_ADDR_EXP 50
55895: PUSH
55896: EMPTY
55897: ST_TO_ADDR
// hackLimit := 3 ;
55898: LD_ADDR_EXP 51
55902: PUSH
55903: LD_INT 3
55905: ST_TO_ADDR
// hackDist := 12 ;
55906: LD_ADDR_EXP 52
55910: PUSH
55911: LD_INT 12
55913: ST_TO_ADDR
// hackCounter := [ ] ;
55914: LD_ADDR_EXP 53
55918: PUSH
55919: EMPTY
55920: ST_TO_ADDR
// end ;
55921: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55922: LD_EXP 48
55926: IFFALSE 55944
55928: PUSH
55929: LD_INT 34
55931: PUSH
55932: LD_INT 99
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PPUSH
55939: CALL_OW 69
55943: AND
55944: IFFALSE 56197
55946: GO 55948
55948: DISABLE
55949: LD_INT 0
55951: PPUSH
55952: PPUSH
// begin enable ;
55953: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55954: LD_ADDR_VAR 0 1
55958: PUSH
55959: LD_INT 34
55961: PUSH
55962: LD_INT 99
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PPUSH
55969: CALL_OW 69
55973: PUSH
55974: FOR_IN
55975: IFFALSE 56195
// begin if not i in hackTanks then
55977: LD_VAR 0 1
55981: PUSH
55982: LD_EXP 49
55986: IN
55987: NOT
55988: IFFALSE 56071
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55990: LD_ADDR_EXP 49
55994: PUSH
55995: LD_EXP 49
55999: PPUSH
56000: LD_EXP 49
56004: PUSH
56005: LD_INT 1
56007: PLUS
56008: PPUSH
56009: LD_VAR 0 1
56013: PPUSH
56014: CALL_OW 1
56018: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56019: LD_ADDR_EXP 50
56023: PUSH
56024: LD_EXP 50
56028: PPUSH
56029: LD_EXP 50
56033: PUSH
56034: LD_INT 1
56036: PLUS
56037: PPUSH
56038: EMPTY
56039: PPUSH
56040: CALL_OW 1
56044: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56045: LD_ADDR_EXP 53
56049: PUSH
56050: LD_EXP 53
56054: PPUSH
56055: LD_EXP 53
56059: PUSH
56060: LD_INT 1
56062: PLUS
56063: PPUSH
56064: EMPTY
56065: PPUSH
56066: CALL_OW 1
56070: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56071: LD_VAR 0 1
56075: PPUSH
56076: CALL_OW 302
56080: NOT
56081: IFFALSE 56094
// begin HackUnlinkAll ( i ) ;
56083: LD_VAR 0 1
56087: PPUSH
56088: CALL 56200 0 1
// continue ;
56092: GO 55974
// end ; HackCheckCapturedStatus ( i ) ;
56094: LD_VAR 0 1
56098: PPUSH
56099: CALL 56645 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56103: LD_ADDR_VAR 0 2
56107: PUSH
56108: LD_INT 81
56110: PUSH
56111: LD_VAR 0 1
56115: PPUSH
56116: CALL_OW 255
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 33
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 91
56137: PUSH
56138: LD_VAR 0 1
56142: PUSH
56143: LD_EXP 52
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 50
56155: PUSH
56156: EMPTY
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: PPUSH
56165: CALL_OW 69
56169: ST_TO_ADDR
// if not tmp then
56170: LD_VAR 0 2
56174: NOT
56175: IFFALSE 56179
// continue ;
56177: GO 55974
// HackLink ( i , tmp ) ;
56179: LD_VAR 0 1
56183: PPUSH
56184: LD_VAR 0 2
56188: PPUSH
56189: CALL 56336 0 2
// end ;
56193: GO 55974
56195: POP
56196: POP
// end ;
56197: PPOPN 2
56199: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56200: LD_INT 0
56202: PPUSH
56203: PPUSH
56204: PPUSH
// if not hack in hackTanks then
56205: LD_VAR 0 1
56209: PUSH
56210: LD_EXP 49
56214: IN
56215: NOT
56216: IFFALSE 56220
// exit ;
56218: GO 56331
// index := GetElementIndex ( hackTanks , hack ) ;
56220: LD_ADDR_VAR 0 4
56224: PUSH
56225: LD_EXP 49
56229: PPUSH
56230: LD_VAR 0 1
56234: PPUSH
56235: CALL 14923 0 2
56239: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56240: LD_EXP 50
56244: PUSH
56245: LD_VAR 0 4
56249: ARRAY
56250: IFFALSE 56331
// begin for i in hackTanksCaptured [ index ] do
56252: LD_ADDR_VAR 0 3
56256: PUSH
56257: LD_EXP 50
56261: PUSH
56262: LD_VAR 0 4
56266: ARRAY
56267: PUSH
56268: FOR_IN
56269: IFFALSE 56295
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56271: LD_VAR 0 3
56275: PUSH
56276: LD_INT 1
56278: ARRAY
56279: PPUSH
56280: LD_VAR 0 3
56284: PUSH
56285: LD_INT 2
56287: ARRAY
56288: PPUSH
56289: CALL_OW 235
56293: GO 56268
56295: POP
56296: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56297: LD_ADDR_EXP 50
56301: PUSH
56302: LD_EXP 50
56306: PPUSH
56307: LD_VAR 0 4
56311: PPUSH
56312: EMPTY
56313: PPUSH
56314: CALL_OW 1
56318: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56319: LD_VAR 0 1
56323: PPUSH
56324: LD_INT 0
56326: PPUSH
56327: CALL_OW 505
// end ; end ;
56331: LD_VAR 0 2
56335: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56336: LD_INT 0
56338: PPUSH
56339: PPUSH
56340: PPUSH
// if not hack in hackTanks or not vehicles then
56341: LD_VAR 0 1
56345: PUSH
56346: LD_EXP 49
56350: IN
56351: NOT
56352: IFTRUE 56361
56354: PUSH
56355: LD_VAR 0 2
56359: NOT
56360: OR
56361: IFFALSE 56365
// exit ;
56363: GO 56640
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56365: LD_ADDR_VAR 0 2
56369: PUSH
56370: LD_VAR 0 1
56374: PPUSH
56375: LD_VAR 0 2
56379: PPUSH
56380: LD_INT 1
56382: PPUSH
56383: LD_INT 1
56385: PPUSH
56386: CALL 15575 0 4
56390: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56391: LD_ADDR_VAR 0 5
56395: PUSH
56396: LD_EXP 49
56400: PPUSH
56401: LD_VAR 0 1
56405: PPUSH
56406: CALL 14923 0 2
56410: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56411: LD_EXP 50
56415: PUSH
56416: LD_VAR 0 5
56420: ARRAY
56421: PUSH
56422: LD_EXP 51
56426: LESS
56427: IFFALSE 56616
// begin for i := 1 to vehicles do
56429: LD_ADDR_VAR 0 4
56433: PUSH
56434: DOUBLE
56435: LD_INT 1
56437: DEC
56438: ST_TO_ADDR
56439: LD_VAR 0 2
56443: PUSH
56444: FOR_TO
56445: IFFALSE 56614
// begin if hackTanksCaptured [ index ] = hackLimit then
56447: LD_EXP 50
56451: PUSH
56452: LD_VAR 0 5
56456: ARRAY
56457: PUSH
56458: LD_EXP 51
56462: EQUAL
56463: IFFALSE 56467
// break ;
56465: GO 56614
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56467: LD_ADDR_EXP 53
56471: PUSH
56472: LD_EXP 53
56476: PPUSH
56477: LD_VAR 0 5
56481: PPUSH
56482: LD_EXP 53
56486: PUSH
56487: LD_VAR 0 5
56491: ARRAY
56492: PUSH
56493: LD_INT 1
56495: PLUS
56496: PPUSH
56497: CALL_OW 1
56501: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56502: LD_ADDR_EXP 50
56506: PUSH
56507: LD_EXP 50
56511: PPUSH
56512: LD_VAR 0 5
56516: PUSH
56517: LD_EXP 50
56521: PUSH
56522: LD_VAR 0 5
56526: ARRAY
56527: PUSH
56528: LD_INT 1
56530: PLUS
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PPUSH
56536: LD_VAR 0 2
56540: PUSH
56541: LD_VAR 0 4
56545: ARRAY
56546: PUSH
56547: LD_VAR 0 2
56551: PUSH
56552: LD_VAR 0 4
56556: ARRAY
56557: PPUSH
56558: CALL_OW 255
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PPUSH
56567: CALL 15140 0 3
56571: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56572: LD_VAR 0 2
56576: PUSH
56577: LD_VAR 0 4
56581: ARRAY
56582: PPUSH
56583: LD_VAR 0 1
56587: PPUSH
56588: CALL_OW 255
56592: PPUSH
56593: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56597: LD_VAR 0 2
56601: PUSH
56602: LD_VAR 0 4
56606: ARRAY
56607: PPUSH
56608: CALL_OW 141
// end ;
56612: GO 56444
56614: POP
56615: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56616: LD_VAR 0 1
56620: PPUSH
56621: LD_EXP 50
56625: PUSH
56626: LD_VAR 0 5
56630: ARRAY
56631: PUSH
56632: LD_INT 0
56634: PLUS
56635: PPUSH
56636: CALL_OW 505
// end ;
56640: LD_VAR 0 3
56644: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56645: LD_INT 0
56647: PPUSH
56648: PPUSH
56649: PPUSH
56650: PPUSH
// if not hack in hackTanks then
56651: LD_VAR 0 1
56655: PUSH
56656: LD_EXP 49
56660: IN
56661: NOT
56662: IFFALSE 56666
// exit ;
56664: GO 56910
// index := GetElementIndex ( hackTanks , hack ) ;
56666: LD_ADDR_VAR 0 4
56670: PUSH
56671: LD_EXP 49
56675: PPUSH
56676: LD_VAR 0 1
56680: PPUSH
56681: CALL 14923 0 2
56685: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56686: LD_ADDR_VAR 0 3
56690: PUSH
56691: DOUBLE
56692: LD_EXP 50
56696: PUSH
56697: LD_VAR 0 4
56701: ARRAY
56702: INC
56703: ST_TO_ADDR
56704: LD_INT 1
56706: PUSH
56707: FOR_DOWNTO
56708: IFFALSE 56884
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56710: LD_ADDR_VAR 0 5
56714: PUSH
56715: LD_EXP 50
56719: PUSH
56720: LD_VAR 0 4
56724: ARRAY
56725: PUSH
56726: LD_VAR 0 3
56730: ARRAY
56731: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56732: LD_VAR 0 5
56736: PUSH
56737: LD_INT 1
56739: ARRAY
56740: PPUSH
56741: CALL_OW 302
56745: NOT
56746: IFTRUE 56774
56748: PUSH
56749: LD_VAR 0 5
56753: PUSH
56754: LD_INT 1
56756: ARRAY
56757: PPUSH
56758: CALL_OW 255
56762: PUSH
56763: LD_VAR 0 1
56767: PPUSH
56768: CALL_OW 255
56772: NONEQUAL
56773: OR
56774: IFFALSE 56882
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56776: LD_VAR 0 5
56780: PUSH
56781: LD_INT 1
56783: ARRAY
56784: PPUSH
56785: CALL_OW 305
56789: IFFALSE 56817
56791: PUSH
56792: LD_VAR 0 5
56796: PUSH
56797: LD_INT 1
56799: ARRAY
56800: PPUSH
56801: CALL_OW 255
56805: PUSH
56806: LD_VAR 0 1
56810: PPUSH
56811: CALL_OW 255
56815: EQUAL
56816: AND
56817: IFFALSE 56841
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56819: LD_VAR 0 5
56823: PUSH
56824: LD_INT 1
56826: ARRAY
56827: PPUSH
56828: LD_VAR 0 5
56832: PUSH
56833: LD_INT 2
56835: ARRAY
56836: PPUSH
56837: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56841: LD_ADDR_EXP 50
56845: PUSH
56846: LD_EXP 50
56850: PPUSH
56851: LD_VAR 0 4
56855: PPUSH
56856: LD_EXP 50
56860: PUSH
56861: LD_VAR 0 4
56865: ARRAY
56866: PPUSH
56867: LD_VAR 0 3
56871: PPUSH
56872: CALL_OW 3
56876: PPUSH
56877: CALL_OW 1
56881: ST_TO_ADDR
// end ; end ;
56882: GO 56707
56884: POP
56885: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56886: LD_VAR 0 1
56890: PPUSH
56891: LD_EXP 50
56895: PUSH
56896: LD_VAR 0 4
56900: ARRAY
56901: PUSH
56902: LD_INT 0
56904: PLUS
56905: PPUSH
56906: CALL_OW 505
// end ;
56910: LD_VAR 0 2
56914: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56915: LD_INT 0
56917: PPUSH
56918: PPUSH
56919: PPUSH
56920: PPUSH
// if not hack in hackTanks then
56921: LD_VAR 0 1
56925: PUSH
56926: LD_EXP 49
56930: IN
56931: NOT
56932: IFFALSE 56936
// exit ;
56934: GO 57021
// index := GetElementIndex ( hackTanks , hack ) ;
56936: LD_ADDR_VAR 0 5
56940: PUSH
56941: LD_EXP 49
56945: PPUSH
56946: LD_VAR 0 1
56950: PPUSH
56951: CALL 14923 0 2
56955: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56956: LD_ADDR_VAR 0 4
56960: PUSH
56961: DOUBLE
56962: LD_INT 1
56964: DEC
56965: ST_TO_ADDR
56966: LD_EXP 50
56970: PUSH
56971: LD_VAR 0 5
56975: ARRAY
56976: PUSH
56977: FOR_TO
56978: IFFALSE 57019
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56980: LD_EXP 50
56984: PUSH
56985: LD_VAR 0 5
56989: ARRAY
56990: PUSH
56991: LD_VAR 0 4
56995: ARRAY
56996: PUSH
56997: LD_INT 1
56999: ARRAY
57000: PUSH
57001: LD_VAR 0 2
57005: EQUAL
57006: IFFALSE 57017
// KillUnit ( vehicle ) ;
57008: LD_VAR 0 2
57012: PPUSH
57013: CALL_OW 66
57017: GO 56977
57019: POP
57020: POP
// end ;
57021: LD_VAR 0 3
57025: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57026: LD_EXP 54
57030: NOT
57031: IFFALSE 57066
57033: GO 57035
57035: DISABLE
// begin initMiner := true ;
57036: LD_ADDR_EXP 54
57040: PUSH
57041: LD_INT 1
57043: ST_TO_ADDR
// minersList := [ ] ;
57044: LD_ADDR_EXP 55
57048: PUSH
57049: EMPTY
57050: ST_TO_ADDR
// minerMinesList := [ ] ;
57051: LD_ADDR_EXP 56
57055: PUSH
57056: EMPTY
57057: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57058: LD_ADDR_EXP 57
57062: PUSH
57063: LD_INT 5
57065: ST_TO_ADDR
// end ;
57066: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57067: LD_EXP 54
57071: IFFALSE 57089
57073: PUSH
57074: LD_INT 34
57076: PUSH
57077: LD_INT 81
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PPUSH
57084: CALL_OW 69
57088: AND
57089: IFFALSE 57552
57091: GO 57093
57093: DISABLE
57094: LD_INT 0
57096: PPUSH
57097: PPUSH
57098: PPUSH
57099: PPUSH
// begin enable ;
57100: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57101: LD_ADDR_VAR 0 1
57105: PUSH
57106: LD_INT 34
57108: PUSH
57109: LD_INT 81
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PPUSH
57116: CALL_OW 69
57120: PUSH
57121: FOR_IN
57122: IFFALSE 57194
// begin if not i in minersList then
57124: LD_VAR 0 1
57128: PUSH
57129: LD_EXP 55
57133: IN
57134: NOT
57135: IFFALSE 57192
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57137: LD_ADDR_EXP 55
57141: PUSH
57142: LD_EXP 55
57146: PPUSH
57147: LD_EXP 55
57151: PUSH
57152: LD_INT 1
57154: PLUS
57155: PPUSH
57156: LD_VAR 0 1
57160: PPUSH
57161: CALL_OW 1
57165: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57166: LD_ADDR_EXP 56
57170: PUSH
57171: LD_EXP 56
57175: PPUSH
57176: LD_EXP 56
57180: PUSH
57181: LD_INT 1
57183: PLUS
57184: PPUSH
57185: EMPTY
57186: PPUSH
57187: CALL_OW 1
57191: ST_TO_ADDR
// end end ;
57192: GO 57121
57194: POP
57195: POP
// for i := minerMinesList downto 1 do
57196: LD_ADDR_VAR 0 1
57200: PUSH
57201: DOUBLE
57202: LD_EXP 56
57206: INC
57207: ST_TO_ADDR
57208: LD_INT 1
57210: PUSH
57211: FOR_DOWNTO
57212: IFFALSE 57550
// begin if IsLive ( minersList [ i ] ) then
57214: LD_EXP 55
57218: PUSH
57219: LD_VAR 0 1
57223: ARRAY
57224: PPUSH
57225: CALL_OW 300
57229: IFFALSE 57257
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57231: LD_EXP 55
57235: PUSH
57236: LD_VAR 0 1
57240: ARRAY
57241: PPUSH
57242: LD_EXP 56
57246: PUSH
57247: LD_VAR 0 1
57251: ARRAY
57252: PPUSH
57253: CALL_OW 505
// if not minerMinesList [ i ] then
57257: LD_EXP 56
57261: PUSH
57262: LD_VAR 0 1
57266: ARRAY
57267: NOT
57268: IFFALSE 57272
// continue ;
57270: GO 57211
// for j := minerMinesList [ i ] downto 1 do
57272: LD_ADDR_VAR 0 2
57276: PUSH
57277: DOUBLE
57278: LD_EXP 56
57282: PUSH
57283: LD_VAR 0 1
57287: ARRAY
57288: INC
57289: ST_TO_ADDR
57290: LD_INT 1
57292: PUSH
57293: FOR_DOWNTO
57294: IFFALSE 57546
// begin side := GetSide ( minersList [ i ] ) ;
57296: LD_ADDR_VAR 0 3
57300: PUSH
57301: LD_EXP 55
57305: PUSH
57306: LD_VAR 0 1
57310: ARRAY
57311: PPUSH
57312: CALL_OW 255
57316: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57317: LD_ADDR_VAR 0 4
57321: PUSH
57322: LD_EXP 56
57326: PUSH
57327: LD_VAR 0 1
57331: ARRAY
57332: PUSH
57333: LD_VAR 0 2
57337: ARRAY
57338: PUSH
57339: LD_INT 1
57341: ARRAY
57342: PPUSH
57343: LD_EXP 56
57347: PUSH
57348: LD_VAR 0 1
57352: ARRAY
57353: PUSH
57354: LD_VAR 0 2
57358: ARRAY
57359: PUSH
57360: LD_INT 2
57362: ARRAY
57363: PPUSH
57364: CALL_OW 428
57368: ST_TO_ADDR
// if not tmp then
57369: LD_VAR 0 4
57373: NOT
57374: IFFALSE 57378
// continue ;
57376: GO 57293
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57378: LD_VAR 0 4
57382: PUSH
57383: LD_INT 81
57385: PUSH
57386: LD_VAR 0 3
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PPUSH
57395: CALL_OW 69
57399: IN
57400: IFFALSE 57450
57402: PUSH
57403: LD_EXP 56
57407: PUSH
57408: LD_VAR 0 1
57412: ARRAY
57413: PUSH
57414: LD_VAR 0 2
57418: ARRAY
57419: PUSH
57420: LD_INT 1
57422: ARRAY
57423: PPUSH
57424: LD_EXP 56
57428: PUSH
57429: LD_VAR 0 1
57433: ARRAY
57434: PUSH
57435: LD_VAR 0 2
57439: ARRAY
57440: PUSH
57441: LD_INT 2
57443: ARRAY
57444: PPUSH
57445: CALL_OW 458
57449: AND
57450: IFFALSE 57544
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57452: LD_EXP 56
57456: PUSH
57457: LD_VAR 0 1
57461: ARRAY
57462: PUSH
57463: LD_VAR 0 2
57467: ARRAY
57468: PUSH
57469: LD_INT 1
57471: ARRAY
57472: PPUSH
57473: LD_EXP 56
57477: PUSH
57478: LD_VAR 0 1
57482: ARRAY
57483: PUSH
57484: LD_VAR 0 2
57488: ARRAY
57489: PUSH
57490: LD_INT 2
57492: ARRAY
57493: PPUSH
57494: LD_VAR 0 3
57498: PPUSH
57499: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57503: LD_ADDR_EXP 56
57507: PUSH
57508: LD_EXP 56
57512: PPUSH
57513: LD_VAR 0 1
57517: PPUSH
57518: LD_EXP 56
57522: PUSH
57523: LD_VAR 0 1
57527: ARRAY
57528: PPUSH
57529: LD_VAR 0 2
57533: PPUSH
57534: CALL_OW 3
57538: PPUSH
57539: CALL_OW 1
57543: ST_TO_ADDR
// end ; end ;
57544: GO 57293
57546: POP
57547: POP
// end ;
57548: GO 57211
57550: POP
57551: POP
// end ;
57552: PPOPN 4
57554: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57555: LD_INT 0
57557: PPUSH
57558: PPUSH
// result := false ;
57559: LD_ADDR_VAR 0 4
57563: PUSH
57564: LD_INT 0
57566: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57567: LD_VAR 0 1
57571: PPUSH
57572: CALL_OW 264
57576: PUSH
57577: LD_INT 81
57579: EQUAL
57580: NOT
57581: IFFALSE 57585
// exit ;
57583: GO 57829
// index := GetElementIndex ( minersList , unit ) ;
57585: LD_ADDR_VAR 0 5
57589: PUSH
57590: LD_EXP 55
57594: PPUSH
57595: LD_VAR 0 1
57599: PPUSH
57600: CALL 14923 0 2
57604: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57605: LD_EXP 56
57609: PUSH
57610: LD_VAR 0 5
57614: ARRAY
57615: PUSH
57616: LD_EXP 57
57620: GREATEREQUAL
57621: IFFALSE 57625
// exit ;
57623: GO 57829
// ComMoveXY ( unit , x , y ) ;
57625: LD_VAR 0 1
57629: PPUSH
57630: LD_VAR 0 2
57634: PPUSH
57635: LD_VAR 0 3
57639: PPUSH
57640: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57644: LD_INT 35
57646: PPUSH
57647: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57651: LD_VAR 0 1
57655: PPUSH
57656: LD_VAR 0 2
57660: PPUSH
57661: LD_VAR 0 3
57665: PPUSH
57666: CALL 46969 0 3
57670: NOT
57671: IFFALSE 57684
57673: PUSH
57674: LD_VAR 0 1
57678: PPUSH
57679: CALL_OW 314
57683: AND
57684: IFFALSE 57688
// exit ;
57686: GO 57829
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57688: LD_VAR 0 2
57692: PPUSH
57693: LD_VAR 0 3
57697: PPUSH
57698: CALL_OW 428
57702: PUSH
57703: LD_VAR 0 1
57707: EQUAL
57708: IFFALSE 57722
57710: PUSH
57711: LD_VAR 0 1
57715: PPUSH
57716: CALL_OW 314
57720: NOT
57721: AND
57722: IFFALSE 57644
// PlaySoundXY ( x , y , PlantMine ) ;
57724: LD_VAR 0 2
57728: PPUSH
57729: LD_VAR 0 3
57733: PPUSH
57734: LD_STRING PlantMine
57736: PPUSH
57737: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57741: LD_VAR 0 2
57745: PPUSH
57746: LD_VAR 0 3
57750: PPUSH
57751: LD_VAR 0 1
57755: PPUSH
57756: CALL_OW 255
57760: PPUSH
57761: LD_INT 0
57763: PPUSH
57764: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57768: LD_ADDR_EXP 56
57772: PUSH
57773: LD_EXP 56
57777: PPUSH
57778: LD_VAR 0 5
57782: PUSH
57783: LD_EXP 56
57787: PUSH
57788: LD_VAR 0 5
57792: ARRAY
57793: PUSH
57794: LD_INT 1
57796: PLUS
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PPUSH
57802: LD_VAR 0 2
57806: PUSH
57807: LD_VAR 0 3
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PPUSH
57816: CALL 15140 0 3
57820: ST_TO_ADDR
// result := true ;
57821: LD_ADDR_VAR 0 4
57825: PUSH
57826: LD_INT 1
57828: ST_TO_ADDR
// end ;
57829: LD_VAR 0 4
57833: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57834: LD_INT 0
57836: PPUSH
57837: PPUSH
57838: PPUSH
// if not unit in minersList then
57839: LD_VAR 0 1
57843: PUSH
57844: LD_EXP 55
57848: IN
57849: NOT
57850: IFFALSE 57854
// exit ;
57852: GO 58248
// index := GetElementIndex ( minersList , unit ) ;
57854: LD_ADDR_VAR 0 6
57858: PUSH
57859: LD_EXP 55
57863: PPUSH
57864: LD_VAR 0 1
57868: PPUSH
57869: CALL 14923 0 2
57873: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57874: LD_ADDR_VAR 0 5
57878: PUSH
57879: DOUBLE
57880: LD_EXP 56
57884: PUSH
57885: LD_VAR 0 6
57889: ARRAY
57890: INC
57891: ST_TO_ADDR
57892: LD_INT 1
57894: PUSH
57895: FOR_DOWNTO
57896: IFFALSE 58059
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57898: LD_EXP 56
57902: PUSH
57903: LD_VAR 0 6
57907: ARRAY
57908: PUSH
57909: LD_VAR 0 5
57913: ARRAY
57914: PUSH
57915: LD_INT 1
57917: ARRAY
57918: PUSH
57919: LD_VAR 0 2
57923: EQUAL
57924: IFFALSE 57954
57926: PUSH
57927: LD_EXP 56
57931: PUSH
57932: LD_VAR 0 6
57936: ARRAY
57937: PUSH
57938: LD_VAR 0 5
57942: ARRAY
57943: PUSH
57944: LD_INT 2
57946: ARRAY
57947: PUSH
57948: LD_VAR 0 3
57952: EQUAL
57953: AND
57954: IFFALSE 58057
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57956: LD_EXP 56
57960: PUSH
57961: LD_VAR 0 6
57965: ARRAY
57966: PUSH
57967: LD_VAR 0 5
57971: ARRAY
57972: PUSH
57973: LD_INT 1
57975: ARRAY
57976: PPUSH
57977: LD_EXP 56
57981: PUSH
57982: LD_VAR 0 6
57986: ARRAY
57987: PUSH
57988: LD_VAR 0 5
57992: ARRAY
57993: PUSH
57994: LD_INT 2
57996: ARRAY
57997: PPUSH
57998: LD_VAR 0 1
58002: PPUSH
58003: CALL_OW 255
58007: PPUSH
58008: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58012: LD_ADDR_EXP 56
58016: PUSH
58017: LD_EXP 56
58021: PPUSH
58022: LD_VAR 0 6
58026: PPUSH
58027: LD_EXP 56
58031: PUSH
58032: LD_VAR 0 6
58036: ARRAY
58037: PPUSH
58038: LD_VAR 0 5
58042: PPUSH
58043: CALL_OW 3
58047: PPUSH
58048: CALL_OW 1
58052: ST_TO_ADDR
// exit ;
58053: POP
58054: POP
58055: GO 58248
// end ; end ;
58057: GO 57895
58059: POP
58060: POP
// for i := minerMinesList [ index ] downto 1 do
58061: LD_ADDR_VAR 0 5
58065: PUSH
58066: DOUBLE
58067: LD_EXP 56
58071: PUSH
58072: LD_VAR 0 6
58076: ARRAY
58077: INC
58078: ST_TO_ADDR
58079: LD_INT 1
58081: PUSH
58082: FOR_DOWNTO
58083: IFFALSE 58246
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58085: LD_EXP 56
58089: PUSH
58090: LD_VAR 0 6
58094: ARRAY
58095: PUSH
58096: LD_VAR 0 5
58100: ARRAY
58101: PUSH
58102: LD_INT 1
58104: ARRAY
58105: PPUSH
58106: LD_EXP 56
58110: PUSH
58111: LD_VAR 0 6
58115: ARRAY
58116: PUSH
58117: LD_VAR 0 5
58121: ARRAY
58122: PUSH
58123: LD_INT 2
58125: ARRAY
58126: PPUSH
58127: LD_VAR 0 2
58131: PPUSH
58132: LD_VAR 0 3
58136: PPUSH
58137: CALL_OW 298
58141: PUSH
58142: LD_INT 6
58144: LESS
58145: IFFALSE 58244
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58147: LD_EXP 56
58151: PUSH
58152: LD_VAR 0 6
58156: ARRAY
58157: PUSH
58158: LD_VAR 0 5
58162: ARRAY
58163: PUSH
58164: LD_INT 1
58166: ARRAY
58167: PPUSH
58168: LD_EXP 56
58172: PUSH
58173: LD_VAR 0 6
58177: ARRAY
58178: PUSH
58179: LD_VAR 0 5
58183: ARRAY
58184: PUSH
58185: LD_INT 2
58187: ARRAY
58188: PPUSH
58189: LD_VAR 0 1
58193: PPUSH
58194: CALL_OW 255
58198: PPUSH
58199: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58203: LD_ADDR_EXP 56
58207: PUSH
58208: LD_EXP 56
58212: PPUSH
58213: LD_VAR 0 6
58217: PPUSH
58218: LD_EXP 56
58222: PUSH
58223: LD_VAR 0 6
58227: ARRAY
58228: PPUSH
58229: LD_VAR 0 5
58233: PPUSH
58234: CALL_OW 3
58238: PPUSH
58239: CALL_OW 1
58243: ST_TO_ADDR
// end ; end ;
58244: GO 58082
58246: POP
58247: POP
// end ;
58248: LD_VAR 0 4
58252: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58253: LD_INT 0
58255: PPUSH
58256: PPUSH
58257: PPUSH
58258: PPUSH
58259: PPUSH
58260: PPUSH
58261: PPUSH
58262: PPUSH
58263: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58264: LD_VAR 0 1
58268: PPUSH
58269: CALL_OW 264
58273: PUSH
58274: LD_INT 81
58276: EQUAL
58277: NOT
58278: IFTRUE 58293
58280: PUSH
58281: LD_VAR 0 1
58285: PUSH
58286: LD_EXP 55
58290: IN
58291: NOT
58292: OR
58293: IFFALSE 58297
// exit ;
58295: GO 58623
// index := GetElementIndex ( minersList , unit ) ;
58297: LD_ADDR_VAR 0 6
58301: PUSH
58302: LD_EXP 55
58306: PPUSH
58307: LD_VAR 0 1
58311: PPUSH
58312: CALL 14923 0 2
58316: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58317: LD_ADDR_VAR 0 8
58321: PUSH
58322: LD_EXP 57
58326: PUSH
58327: LD_EXP 56
58331: PUSH
58332: LD_VAR 0 6
58336: ARRAY
58337: MINUS
58338: ST_TO_ADDR
// if not minesFreeAmount then
58339: LD_VAR 0 8
58343: NOT
58344: IFFALSE 58348
// exit ;
58346: GO 58623
// tmp := [ ] ;
58348: LD_ADDR_VAR 0 7
58352: PUSH
58353: EMPTY
58354: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58355: LD_ADDR_VAR 0 5
58359: PUSH
58360: DOUBLE
58361: LD_INT 1
58363: DEC
58364: ST_TO_ADDR
58365: LD_VAR 0 8
58369: PUSH
58370: FOR_TO
58371: IFFALSE 58570
// begin _d := rand ( 0 , 5 ) ;
58373: LD_ADDR_VAR 0 11
58377: PUSH
58378: LD_INT 0
58380: PPUSH
58381: LD_INT 5
58383: PPUSH
58384: CALL_OW 12
58388: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58389: LD_ADDR_VAR 0 12
58393: PUSH
58394: LD_INT 2
58396: PPUSH
58397: LD_INT 6
58399: PPUSH
58400: CALL_OW 12
58404: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58405: LD_ADDR_VAR 0 9
58409: PUSH
58410: LD_VAR 0 2
58414: PPUSH
58415: LD_VAR 0 11
58419: PPUSH
58420: LD_VAR 0 12
58424: PPUSH
58425: CALL_OW 272
58429: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58430: LD_ADDR_VAR 0 10
58434: PUSH
58435: LD_VAR 0 3
58439: PPUSH
58440: LD_VAR 0 11
58444: PPUSH
58445: LD_VAR 0 12
58449: PPUSH
58450: CALL_OW 273
58454: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58455: LD_VAR 0 9
58459: PPUSH
58460: LD_VAR 0 10
58464: PPUSH
58465: CALL_OW 488
58469: IFFALSE 58493
58471: PUSH
58472: LD_VAR 0 9
58476: PUSH
58477: LD_VAR 0 10
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_VAR 0 7
58490: IN
58491: NOT
58492: AND
58493: IFFALSE 58512
58495: PUSH
58496: LD_VAR 0 9
58500: PPUSH
58501: LD_VAR 0 10
58505: PPUSH
58506: CALL_OW 458
58510: NOT
58511: AND
58512: IFFALSE 58554
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58514: LD_ADDR_VAR 0 7
58518: PUSH
58519: LD_VAR 0 7
58523: PPUSH
58524: LD_VAR 0 7
58528: PUSH
58529: LD_INT 1
58531: PLUS
58532: PPUSH
58533: LD_VAR 0 9
58537: PUSH
58538: LD_VAR 0 10
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PPUSH
58547: CALL_OW 1
58551: ST_TO_ADDR
58552: GO 58568
// i := i - 1 ;
58554: LD_ADDR_VAR 0 5
58558: PUSH
58559: LD_VAR 0 5
58563: PUSH
58564: LD_INT 1
58566: MINUS
58567: ST_TO_ADDR
// end ;
58568: GO 58370
58570: POP
58571: POP
// for i in tmp do
58572: LD_ADDR_VAR 0 5
58576: PUSH
58577: LD_VAR 0 7
58581: PUSH
58582: FOR_IN
58583: IFFALSE 58621
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58585: LD_VAR 0 1
58589: PPUSH
58590: LD_VAR 0 5
58594: PUSH
58595: LD_INT 1
58597: ARRAY
58598: PPUSH
58599: LD_VAR 0 5
58603: PUSH
58604: LD_INT 2
58606: ARRAY
58607: PPUSH
58608: CALL 57555 0 3
58612: NOT
58613: IFFALSE 58619
// exit ;
58615: POP
58616: POP
58617: GO 58623
58619: GO 58582
58621: POP
58622: POP
// end ;
58623: LD_VAR 0 4
58627: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58628: LD_INT 0
58630: PPUSH
58631: PPUSH
58632: PPUSH
58633: PPUSH
58634: PPUSH
58635: PPUSH
58636: PPUSH
58637: PPUSH
58638: PPUSH
// if GetClass ( unit ) <> class_sniper then
58639: LD_VAR 0 1
58643: PPUSH
58644: CALL_OW 257
58648: PUSH
58649: LD_INT 5
58651: NONEQUAL
58652: IFFALSE 58656
// exit ;
58654: GO 59126
// dist := 8 ;
58656: LD_ADDR_VAR 0 5
58660: PUSH
58661: LD_INT 8
58663: ST_TO_ADDR
// viewRange := 12 ;
58664: LD_ADDR_VAR 0 8
58668: PUSH
58669: LD_INT 12
58671: ST_TO_ADDR
// side := GetSide ( unit ) ;
58672: LD_ADDR_VAR 0 6
58676: PUSH
58677: LD_VAR 0 1
58681: PPUSH
58682: CALL_OW 255
58686: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58687: LD_INT 61
58689: PPUSH
58690: LD_VAR 0 6
58694: PPUSH
58695: CALL_OW 321
58699: PUSH
58700: LD_INT 2
58702: EQUAL
58703: IFFALSE 58713
// viewRange := 16 ;
58705: LD_ADDR_VAR 0 8
58709: PUSH
58710: LD_INT 16
58712: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58713: LD_VAR 0 1
58717: PPUSH
58718: LD_VAR 0 2
58722: PPUSH
58723: LD_VAR 0 3
58727: PPUSH
58728: CALL_OW 297
58732: PUSH
58733: LD_VAR 0 5
58737: GREATER
58738: IFFALSE 58817
// begin ComMoveXY ( unit , x , y ) ;
58740: LD_VAR 0 1
58744: PPUSH
58745: LD_VAR 0 2
58749: PPUSH
58750: LD_VAR 0 3
58754: PPUSH
58755: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58759: LD_INT 35
58761: PPUSH
58762: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58766: LD_VAR 0 1
58770: PPUSH
58771: LD_VAR 0 2
58775: PPUSH
58776: LD_VAR 0 3
58780: PPUSH
58781: CALL 46969 0 3
58785: NOT
58786: IFFALSE 58790
// exit ;
58788: GO 59126
// until GetDistUnitXY ( unit , x , y ) < dist ;
58790: LD_VAR 0 1
58794: PPUSH
58795: LD_VAR 0 2
58799: PPUSH
58800: LD_VAR 0 3
58804: PPUSH
58805: CALL_OW 297
58809: PUSH
58810: LD_VAR 0 5
58814: LESS
58815: IFFALSE 58759
// end ; ComTurnXY ( unit , x , y ) ;
58817: LD_VAR 0 1
58821: PPUSH
58822: LD_VAR 0 2
58826: PPUSH
58827: LD_VAR 0 3
58831: PPUSH
58832: CALL_OW 118
// repeat if Multiplayer then
58836: LD_OWVAR 4
58840: IFFALSE 58851
// wait ( 35 ) else
58842: LD_INT 35
58844: PPUSH
58845: CALL_OW 67
58849: GO 58858
// wait ( 5 ) ;
58851: LD_INT 5
58853: PPUSH
58854: CALL_OW 67
// _d := GetDir ( unit ) ;
58858: LD_ADDR_VAR 0 11
58862: PUSH
58863: LD_VAR 0 1
58867: PPUSH
58868: CALL_OW 254
58872: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58873: LD_ADDR_VAR 0 7
58877: PUSH
58878: LD_VAR 0 1
58882: PPUSH
58883: CALL_OW 250
58887: PPUSH
58888: LD_VAR 0 1
58892: PPUSH
58893: CALL_OW 251
58897: PPUSH
58898: LD_VAR 0 2
58902: PPUSH
58903: LD_VAR 0 3
58907: PPUSH
58908: CALL 49605 0 4
58912: ST_TO_ADDR
// until dir = _d ;
58913: LD_VAR 0 7
58917: PUSH
58918: LD_VAR 0 11
58922: EQUAL
58923: IFFALSE 58836
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58925: LD_ADDR_VAR 0 9
58929: PUSH
58930: LD_VAR 0 1
58934: PPUSH
58935: CALL_OW 250
58939: PPUSH
58940: LD_VAR 0 7
58944: PPUSH
58945: LD_VAR 0 5
58949: PPUSH
58950: CALL_OW 272
58954: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58955: LD_ADDR_VAR 0 10
58959: PUSH
58960: LD_VAR 0 1
58964: PPUSH
58965: CALL_OW 251
58969: PPUSH
58970: LD_VAR 0 7
58974: PPUSH
58975: LD_VAR 0 5
58979: PPUSH
58980: CALL_OW 273
58984: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58985: LD_VAR 0 9
58989: PPUSH
58990: LD_VAR 0 10
58994: PPUSH
58995: CALL_OW 488
58999: NOT
59000: IFFALSE 59004
// exit ;
59002: GO 59126
// ComAnimCustom ( unit , 1 ) ;
59004: LD_VAR 0 1
59008: PPUSH
59009: LD_INT 1
59011: PPUSH
59012: CALL_OW 592
// p := 0 ;
59016: LD_ADDR_VAR 0 12
59020: PUSH
59021: LD_INT 0
59023: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59024: LD_VAR 0 9
59028: PPUSH
59029: LD_VAR 0 10
59033: PPUSH
59034: LD_VAR 0 6
59038: PPUSH
59039: LD_VAR 0 8
59043: PPUSH
59044: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59048: LD_INT 35
59050: PPUSH
59051: CALL_OW 67
// p := Inc ( p ) ;
59055: LD_ADDR_VAR 0 12
59059: PUSH
59060: LD_VAR 0 12
59064: PPUSH
59065: CALL 49561 0 1
59069: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59070: LD_VAR 0 12
59074: PUSH
59075: LD_INT 3
59077: EQUAL
59078: IFTRUE 59092
59080: PUSH
59081: LD_VAR 0 1
59085: PPUSH
59086: CALL_OW 302
59090: NOT
59091: OR
59092: IFTRUE 59105
59094: PUSH
59095: LD_VAR 0 1
59099: PPUSH
59100: CALL_OW 301
59104: OR
59105: IFFALSE 59048
// RemoveSeeing ( _x , _y , side ) ;
59107: LD_VAR 0 9
59111: PPUSH
59112: LD_VAR 0 10
59116: PPUSH
59117: LD_VAR 0 6
59121: PPUSH
59122: CALL_OW 331
// end ; end_of_file
59126: LD_VAR 0 4
59130: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59131: LD_EXP 39
59135: IFFALSE 59476
59137: GO 59139
59139: DISABLE
59140: LD_INT 0
59142: PPUSH
59143: PPUSH
59144: PPUSH
// begin mpKingPoints := [ ] ;
59145: LD_ADDR_EXP 58
59149: PUSH
59150: EMPTY
59151: ST_TO_ADDR
// if mpTeamGame then
59152: LD_EXP 11
59156: IFFALSE 59210
// begin for i := 1 to Count ( mpTeams ) do
59158: LD_ADDR_VAR 0 1
59162: PUSH
59163: DOUBLE
59164: LD_INT 1
59166: DEC
59167: ST_TO_ADDR
59168: LD_EXP 10
59172: PPUSH
59173: CALL 12256 0 1
59177: PUSH
59178: FOR_TO
59179: IFFALSE 59206
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59181: LD_ADDR_EXP 58
59185: PUSH
59186: LD_EXP 58
59190: PPUSH
59191: LD_VAR 0 1
59195: PPUSH
59196: LD_INT 0
59198: PPUSH
59199: CALL_OW 1
59203: ST_TO_ADDR
59204: GO 59178
59206: POP
59207: POP
// end else
59208: GO 59253
// begin for i := 1 to 8 do
59210: LD_ADDR_VAR 0 1
59214: PUSH
59215: DOUBLE
59216: LD_INT 1
59218: DEC
59219: ST_TO_ADDR
59220: LD_INT 8
59222: PUSH
59223: FOR_TO
59224: IFFALSE 59251
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59226: LD_ADDR_EXP 58
59230: PUSH
59231: LD_EXP 58
59235: PPUSH
59236: LD_VAR 0 1
59240: PPUSH
59241: LD_INT 0
59243: PPUSH
59244: CALL_OW 1
59248: ST_TO_ADDR
59249: GO 59223
59251: POP
59252: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59253: LD_ADDR_VAR 0 3
59257: PUSH
59258: LD_EXP 2
59262: PPUSH
59263: LD_INT 0
59265: PPUSH
59266: CALL_OW 517
59270: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59271: LD_ADDR_VAR 0 1
59275: PUSH
59276: DOUBLE
59277: LD_INT 1
59279: DEC
59280: ST_TO_ADDR
59281: LD_VAR 0 3
59285: PUSH
59286: LD_INT 1
59288: ARRAY
59289: PUSH
59290: FOR_TO
59291: IFFALSE 59358
// for j := 1 to 8 do
59293: LD_ADDR_VAR 0 2
59297: PUSH
59298: DOUBLE
59299: LD_INT 1
59301: DEC
59302: ST_TO_ADDR
59303: LD_INT 8
59305: PUSH
59306: FOR_TO
59307: IFFALSE 59354
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59309: LD_VAR 0 3
59313: PUSH
59314: LD_INT 1
59316: ARRAY
59317: PUSH
59318: LD_VAR 0 1
59322: ARRAY
59323: PPUSH
59324: LD_VAR 0 3
59328: PUSH
59329: LD_INT 2
59331: ARRAY
59332: PUSH
59333: LD_VAR 0 1
59337: ARRAY
59338: PPUSH
59339: LD_VAR 0 2
59343: PPUSH
59344: LD_INT 12
59346: NEG
59347: PPUSH
59348: CALL_OW 330
59352: GO 59306
59354: POP
59355: POP
59356: GO 59290
59358: POP
59359: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59360: LD_EXP 34
59364: PPUSH
59365: LD_INT 1
59367: PPUSH
59368: CALL_OW 424
// UpdateCounter ;
59372: CALL 59982 0 0
// repeat wait ( 0 0$1 ) ;
59376: LD_INT 35
59378: PPUSH
59379: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59383: LD_ADDR_VAR 0 3
59387: PUSH
59388: LD_EXP 34
59392: PPUSH
59393: LD_INT 3
59395: PUSH
59396: LD_INT 57
59398: PUSH
59399: EMPTY
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 50
59408: PUSH
59409: EMPTY
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 30
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 30
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: PPUSH
59445: CALL_OW 70
59449: ST_TO_ADDR
// if not tmp then
59450: LD_VAR 0 3
59454: NOT
59455: IFFALSE 59459
// continue ;
59457: GO 59376
// AddPoints ( tmp ) ;
59459: LD_VAR 0 3
59463: PPUSH
59464: CALL 59660 0 1
// UpdateCounter ;
59468: CALL 59982 0 0
// until false ;
59472: LD_INT 0
59474: IFFALSE 59376
// end ;
59476: PPOPN 3
59478: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59479: LD_EXP 39
59483: IFFALSE 59491
59485: PUSH
59486: LD_EXP 37
59490: AND
59491: IFFALSE 59657
59493: GO 59495
59495: DISABLE
59496: LD_INT 0
59498: PPUSH
59499: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59500: LD_ADDR_VAR 0 2
59504: PUSH
59505: LD_EXP 2
59509: PPUSH
59510: LD_INT 0
59512: PPUSH
59513: CALL_OW 517
59517: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59518: LD_ADDR_VAR 0 1
59522: PUSH
59523: DOUBLE
59524: LD_INT 1
59526: DEC
59527: ST_TO_ADDR
59528: LD_VAR 0 2
59532: PUSH
59533: LD_INT 1
59535: ARRAY
59536: PUSH
59537: FOR_TO
59538: IFFALSE 59579
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59540: LD_VAR 0 2
59544: PUSH
59545: LD_INT 1
59547: ARRAY
59548: PUSH
59549: LD_VAR 0 1
59553: ARRAY
59554: PPUSH
59555: LD_VAR 0 2
59559: PUSH
59560: LD_INT 2
59562: ARRAY
59563: PUSH
59564: LD_VAR 0 1
59568: ARRAY
59569: PPUSH
59570: LD_INT 125
59572: PPUSH
59573: CALL_OW 495
59577: GO 59537
59579: POP
59580: POP
// repeat wait ( mpEmissions ) ;
59581: LD_EXP 37
59585: PPUSH
59586: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59590: LD_ADDR_VAR 0 1
59594: PUSH
59595: DOUBLE
59596: LD_INT 1
59598: DEC
59599: ST_TO_ADDR
59600: LD_VAR 0 2
59604: PUSH
59605: LD_INT 1
59607: ARRAY
59608: PUSH
59609: FOR_TO
59610: IFFALSE 59651
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59612: LD_VAR 0 2
59616: PUSH
59617: LD_INT 1
59619: ARRAY
59620: PUSH
59621: LD_VAR 0 1
59625: ARRAY
59626: PPUSH
59627: LD_VAR 0 2
59631: PUSH
59632: LD_INT 2
59634: ARRAY
59635: PUSH
59636: LD_VAR 0 1
59640: ARRAY
59641: PPUSH
59642: LD_INT 15
59644: PPUSH
59645: CALL_OW 495
59649: GO 59609
59651: POP
59652: POP
// until false ;
59653: LD_INT 0
59655: IFFALSE 59581
// end ;
59657: PPOPN 2
59659: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59660: LD_INT 0
59662: PPUSH
59663: PPUSH
59664: PPUSH
59665: PPUSH
59666: PPUSH
// if mpTeamGame then
59667: LD_EXP 11
59671: IFFALSE 59868
// begin first := depots [ 1 ] ;
59673: LD_ADDR_VAR 0 4
59677: PUSH
59678: LD_VAR 0 1
59682: PUSH
59683: LD_INT 1
59685: ARRAY
59686: ST_TO_ADDR
// side := GetSide ( first ) ;
59687: LD_ADDR_VAR 0 6
59691: PUSH
59692: LD_VAR 0 4
59696: PPUSH
59697: CALL_OW 255
59701: ST_TO_ADDR
// for i := 1 to mpTeams do
59702: LD_ADDR_VAR 0 3
59706: PUSH
59707: DOUBLE
59708: LD_INT 1
59710: DEC
59711: ST_TO_ADDR
59712: LD_EXP 10
59716: PUSH
59717: FOR_TO
59718: IFFALSE 59752
// if side in mpTeams [ i ] then
59720: LD_VAR 0 6
59724: PUSH
59725: LD_EXP 10
59729: PUSH
59730: LD_VAR 0 3
59734: ARRAY
59735: IN
59736: IFFALSE 59750
// begin team := i ;
59738: LD_ADDR_VAR 0 5
59742: PUSH
59743: LD_VAR 0 3
59747: ST_TO_ADDR
// break ;
59748: GO 59752
// end ;
59750: GO 59717
59752: POP
59753: POP
// if not team then
59754: LD_VAR 0 5
59758: NOT
59759: IFFALSE 59763
// exit ;
59761: GO 59977
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59763: LD_EXP 34
59767: PPUSH
59768: LD_INT 81
59770: PUSH
59771: LD_VAR 0 6
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PPUSH
59780: CALL_OW 70
59784: IFFALSE 59788
// exit ;
59786: GO 59977
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59788: LD_ADDR_EXP 58
59792: PUSH
59793: LD_EXP 58
59797: PPUSH
59798: LD_VAR 0 5
59802: PPUSH
59803: LD_EXP 58
59807: PUSH
59808: LD_VAR 0 5
59812: ARRAY
59813: PUSH
59814: LD_INT 1
59816: PLUS
59817: PPUSH
59818: CALL_OW 1
59822: ST_TO_ADDR
// for i in mpTeams [ team ] do
59823: LD_ADDR_VAR 0 3
59827: PUSH
59828: LD_EXP 10
59832: PUSH
59833: LD_VAR 0 5
59837: ARRAY
59838: PUSH
59839: FOR_IN
59840: IFFALSE 59864
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59842: LD_VAR 0 3
59846: PPUSH
59847: LD_EXP 58
59851: PUSH
59852: LD_VAR 0 5
59856: ARRAY
59857: PPUSH
59858: CALL_OW 506
59862: GO 59839
59864: POP
59865: POP
// end else
59866: GO 59977
// begin first := depots [ 1 ] ;
59868: LD_ADDR_VAR 0 4
59872: PUSH
59873: LD_VAR 0 1
59877: PUSH
59878: LD_INT 1
59880: ARRAY
59881: ST_TO_ADDR
// side := GetSide ( first ) ;
59882: LD_ADDR_VAR 0 6
59886: PUSH
59887: LD_VAR 0 4
59891: PPUSH
59892: CALL_OW 255
59896: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59897: LD_EXP 34
59901: PPUSH
59902: LD_INT 81
59904: PUSH
59905: LD_VAR 0 6
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PPUSH
59914: CALL_OW 70
59918: IFFALSE 59922
// exit ;
59920: GO 59977
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59922: LD_ADDR_EXP 58
59926: PUSH
59927: LD_EXP 58
59931: PPUSH
59932: LD_VAR 0 6
59936: PPUSH
59937: LD_EXP 58
59941: PUSH
59942: LD_VAR 0 6
59946: ARRAY
59947: PUSH
59948: LD_INT 1
59950: PLUS
59951: PPUSH
59952: CALL_OW 1
59956: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59957: LD_VAR 0 6
59961: PPUSH
59962: LD_EXP 58
59966: PUSH
59967: LD_VAR 0 6
59971: ARRAY
59972: PPUSH
59973: CALL_OW 506
// end ; end ;
59977: LD_VAR 0 2
59981: RET
// function UpdateCounter ; var i ; begin
59982: LD_INT 0
59984: PPUSH
59985: PPUSH
// result := [ ] ;
59986: LD_ADDR_VAR 0 1
59990: PUSH
59991: EMPTY
59992: ST_TO_ADDR
// if mpTeamGame then
59993: LD_EXP 11
59997: IFFALSE 60064
// begin for i := 1 to mpTeams do
59999: LD_ADDR_VAR 0 2
60003: PUSH
60004: DOUBLE
60005: LD_INT 1
60007: DEC
60008: ST_TO_ADDR
60009: LD_EXP 10
60013: PUSH
60014: FOR_TO
60015: IFFALSE 60060
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
60017: LD_ADDR_VAR 0 1
60021: PUSH
60022: LD_VAR 0 1
60026: PUSH
60027: LD_STRING #KingoftheHill-Team
60029: PUSH
60030: LD_VAR 0 2
60034: PUSH
60035: LD_EXP 58
60039: PUSH
60040: LD_VAR 0 2
60044: ARRAY
60045: PUSH
60046: LD_EXP 35
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: ADD
60057: ST_TO_ADDR
60058: GO 60014
60060: POP
60061: POP
// end else
60062: GO 60137
// begin for i := 1 to 8 do
60064: LD_ADDR_VAR 0 2
60068: PUSH
60069: DOUBLE
60070: LD_INT 1
60072: DEC
60073: ST_TO_ADDR
60074: LD_INT 8
60076: PUSH
60077: FOR_TO
60078: IFFALSE 60135
// if mpSidePositions [ i ] then
60080: LD_EXP 7
60084: PUSH
60085: LD_VAR 0 2
60089: ARRAY
60090: IFFALSE 60133
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60092: LD_ADDR_VAR 0 1
60096: PUSH
60097: LD_VAR 0 1
60101: PUSH
60102: LD_STRING #KingoftheHill-Player
60104: PUSH
60105: LD_VAR 0 2
60109: PUSH
60110: LD_EXP 58
60114: PUSH
60115: LD_VAR 0 2
60119: ARRAY
60120: PUSH
60121: LD_EXP 35
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: ADD
60132: ST_TO_ADDR
60133: GO 60077
60135: POP
60136: POP
// end ; mpDisplayStrings := result ;
60137: LD_ADDR_EXP 38
60141: PUSH
60142: LD_VAR 0 1
60146: ST_TO_ADDR
// end ;
60147: LD_VAR 0 1
60151: RET
// export function HowMuchPointsKing ( side ) ; begin
60152: LD_INT 0
60154: PPUSH
// result := HowMuchPoints ( side ) ;
60155: LD_ADDR_VAR 0 2
60159: PUSH
60160: LD_VAR 0 1
60164: PPUSH
60165: CALL 60175 0 1
60169: ST_TO_ADDR
// end ;
60170: LD_VAR 0 2
60174: RET
// function HowMuchPoints ( side ) ; var i ; begin
60175: LD_INT 0
60177: PPUSH
60178: PPUSH
// if mpTeamGame then
60179: LD_EXP 11
60183: IFFALSE 60252
// begin for i := 1 to Count ( mpTeams ) do
60185: LD_ADDR_VAR 0 3
60189: PUSH
60190: DOUBLE
60191: LD_INT 1
60193: DEC
60194: ST_TO_ADDR
60195: LD_EXP 10
60199: PPUSH
60200: CALL 12256 0 1
60204: PUSH
60205: FOR_TO
60206: IFFALSE 60248
// begin if side in mpTeams [ i ] then
60208: LD_VAR 0 1
60212: PUSH
60213: LD_EXP 10
60217: PUSH
60218: LD_VAR 0 3
60222: ARRAY
60223: IN
60224: IFFALSE 60246
// begin result := mpKingPoints [ i ] ;
60226: LD_ADDR_VAR 0 2
60230: PUSH
60231: LD_EXP 58
60235: PUSH
60236: LD_VAR 0 3
60240: ARRAY
60241: ST_TO_ADDR
// exit ;
60242: POP
60243: POP
60244: GO 60268
// end ; end ;
60246: GO 60205
60248: POP
60249: POP
// end else
60250: GO 60268
// result := mpKingPoints [ side ] ;
60252: LD_ADDR_VAR 0 2
60256: PUSH
60257: LD_EXP 58
60261: PUSH
60262: LD_VAR 0 1
60266: ARRAY
60267: ST_TO_ADDR
// end ;
60268: LD_VAR 0 2
60272: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60273: LD_EXP 39
60277: IFFALSE 60285
60279: PUSH
60280: CALL 60697 0 0
60284: AND
60285: IFFALSE 60293
60287: PUSH
60288: LD_OWVAR 4
60292: AND
60293: IFFALSE 60546
60295: GO 60297
60297: DISABLE
60298: LD_INT 0
60300: PPUSH
60301: PPUSH
// begin canWin := false ;
60302: LD_ADDR_VAR 0 2
60306: PUSH
60307: LD_INT 0
60309: ST_TO_ADDR
// if not HasPower ( your_side ) then
60310: LD_OWVAR 2
60314: PPUSH
60315: CALL 60739 0 1
60319: NOT
60320: IFFALSE 60331
// begin Multiplayer_Loose_Message ;
60322: CALL_OW 521
// enable ( mpLose ) ;
60326: LD_INT 102
60328: ENABLE_MARKED
// end else
60329: GO 60546
// begin if not EnemiesInGame then
60331: CALL 60549 0 0
60335: NOT
60336: IFFALSE 60343
// begin enable ( mpWin ) ;
60338: LD_INT 101
60340: ENABLE_MARKED
// exit ;
60341: GO 60546
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
60343: LD_ADDR_VAR 0 2
60347: PUSH
60348: LD_OWVAR 2
60352: PPUSH
60353: CALL 60175 0 1
60357: PUSH
60358: LD_EXP 35
60362: GREATEREQUAL
60363: IFFALSE 60376
60365: PUSH
60366: LD_OWVAR 2
60370: PPUSH
60371: CALL 60739 0 1
60375: AND
60376: ST_TO_ADDR
// for i := 1 to 8 do
60377: LD_ADDR_VAR 0 1
60381: PUSH
60382: DOUBLE
60383: LD_INT 1
60385: DEC
60386: ST_TO_ADDR
60387: LD_INT 8
60389: PUSH
60390: FOR_TO
60391: IFFALSE 60532
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60393: LD_EXP 7
60397: PUSH
60398: LD_VAR 0 1
60402: ARRAY
60403: IFFALSE 60416
60405: PUSH
60406: LD_VAR 0 1
60410: PPUSH
60411: CALL_OW 108
60415: AND
60416: IFFALSE 60430
60418: PUSH
60419: LD_VAR 0 1
60423: PUSH
60424: LD_OWVAR 2
60428: NONEQUAL
60429: AND
60430: IFFALSE 60530
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60432: LD_EXP 8
60436: PUSH
60437: LD_VAR 0 1
60441: ARRAY
60442: NOT
60443: IFTRUE 60491
60445: PUSH
60446: LD_EXP 8
60450: PUSH
60451: LD_VAR 0 1
60455: ARRAY
60456: PUSH
60457: LD_EXP 8
60461: PUSH
60462: LD_OWVAR 2
60466: ARRAY
60467: NONEQUAL
60468: IFFALSE 60490
60470: PUSH
60471: LD_OWVAR 2
60475: PPUSH
60476: LD_VAR 0 1
60480: PPUSH
60481: CALL_OW 81
60485: PUSH
60486: LD_INT 1
60488: NONEQUAL
60489: AND
60490: OR
60491: IFFALSE 60530
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60493: LD_VAR 0 1
60497: PPUSH
60498: CALL 60175 0 1
60502: PUSH
60503: LD_EXP 35
60507: GREATEREQUAL
60508: IFFALSE 60521
60510: PUSH
60511: LD_VAR 0 1
60515: PPUSH
60516: CALL 60739 0 1
60520: AND
60521: IFFALSE 60530
// begin enable ( mpLose ) ;
60523: LD_INT 102
60525: ENABLE_MARKED
// exit ;
60526: POP
60527: POP
60528: GO 60546
// end ;
60530: GO 60390
60532: POP
60533: POP
// if canWin then
60534: LD_VAR 0 2
60538: IFFALSE 60545
// enable ( mpWin ) else
60540: LD_INT 101
60542: ENABLE_MARKED
60543: GO 60546
// enable ;
60545: ENABLE
// end ; end ;
60546: PPOPN 2
60548: END
// function EnemiesInGame ; var i ; begin
60549: LD_INT 0
60551: PPUSH
60552: PPUSH
// result := false ;
60553: LD_ADDR_VAR 0 1
60557: PUSH
60558: LD_INT 0
60560: ST_TO_ADDR
// for i := 1 to 8 do
60561: LD_ADDR_VAR 0 2
60565: PUSH
60566: DOUBLE
60567: LD_INT 1
60569: DEC
60570: ST_TO_ADDR
60571: LD_INT 8
60573: PUSH
60574: FOR_TO
60575: IFFALSE 60690
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
60577: LD_VAR 0 2
60581: PUSH
60582: LD_OWVAR 2
60586: NONEQUAL
60587: IFFALSE 60600
60589: PUSH
60590: LD_VAR 0 2
60594: PPUSH
60595: CALL 60739 0 1
60599: AND
60600: IFFALSE 60613
60602: PUSH
60603: LD_VAR 0 2
60607: PPUSH
60608: CALL_OW 108
60612: AND
60613: IFFALSE 60688
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60615: LD_EXP 8
60619: PUSH
60620: LD_VAR 0 2
60624: ARRAY
60625: NOT
60626: IFTRUE 60674
60628: PUSH
60629: LD_EXP 8
60633: PUSH
60634: LD_VAR 0 2
60638: ARRAY
60639: PUSH
60640: LD_EXP 8
60644: PUSH
60645: LD_OWVAR 2
60649: ARRAY
60650: NONEQUAL
60651: IFFALSE 60673
60653: PUSH
60654: LD_OWVAR 2
60658: PPUSH
60659: LD_VAR 0 2
60663: PPUSH
60664: CALL_OW 81
60668: PUSH
60669: LD_INT 1
60671: NONEQUAL
60672: AND
60673: OR
60674: IFFALSE 60688
// begin result := true ;
60676: LD_ADDR_VAR 0 1
60680: PUSH
60681: LD_INT 1
60683: ST_TO_ADDR
// exit ;
60684: POP
60685: POP
60686: GO 60692
// end ;
60688: GO 60574
60690: POP
60691: POP
// end ;
60692: LD_VAR 0 1
60696: RET
// function CanWinLoose ; begin
60697: LD_INT 0
60699: PPUSH
// result := true ;
60700: LD_ADDR_VAR 0 1
60704: PUSH
60705: LD_INT 1
60707: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60708: CALL_OW 531
60712: IFFALSE 60724
60714: PUSH
60715: CALL_OW 519
60719: PUSH
60720: LD_INT 1
60722: GREATER
60723: AND
60724: IFFALSE 60734
// result := false ;
60726: LD_ADDR_VAR 0 1
60730: PUSH
60731: LD_INT 0
60733: ST_TO_ADDR
// end ;
60734: LD_VAR 0 1
60738: RET
// function HasPower ( i ) ; begin
60739: LD_INT 0
60741: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60742: LD_ADDR_VAR 0 2
60746: PUSH
60747: LD_INT 22
60749: PUSH
60750: LD_VAR 0 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: LD_INT 21
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 33
60774: PUSH
60775: LD_INT 3
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 33
60784: PUSH
60785: LD_INT 5
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PPUSH
60802: CALL_OW 69
60806: ST_TO_ADDR
// end ; end_of_file
60807: LD_VAR 0 2
60811: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60812: PPOPN 6
60814: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60815: LD_EXP 3
60819: PUSH
60820: LD_INT 4
60822: EQUAL
60823: IFFALSE 60859
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60825: LD_STRING setGameDifficulty(
60827: PUSH
60828: LD_OWVAR 67
60832: STR
60833: PUSH
60834: LD_STRING )
60836: STR
60837: PPUSH
60838: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60842: LD_STRING displayDifficulty(
60844: PUSH
60845: LD_OWVAR 67
60849: STR
60850: PUSH
60851: LD_STRING )
60853: STR
60854: PPUSH
60855: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60859: CALL 60888 0 0
// end ; end_of_file
60863: PPOPN 1
60865: END
// every 0 0$1 do
60866: GO 60868
60868: DISABLE
// begin enable ;
60869: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60870: LD_STRING updateTimer(
60872: PUSH
60873: LD_OWVAR 1
60877: STR
60878: PUSH
60879: LD_STRING );
60881: STR
60882: PPUSH
60883: CALL_OW 559
// end ;
60887: END
// export function SOS_MapStart ( ) ; begin
60888: LD_INT 0
60890: PPUSH
// UpdateFactoryWaypoints ( ) ;
60891: CALL 61822 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60895: CALL 62074 0 0
// ParseMultiDataToLua ( ) ;
60899: CALL 62221 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60903: LD_STRING setSpecLogoNumber(
60905: PUSH
60906: LD_INT 2
60908: STR
60909: PUSH
60910: LD_STRING ,
60912: STR
60913: PUSH
60914: LD_INT 1
60916: STR
60917: PUSH
60918: LD_STRING )
60920: STR
60921: PPUSH
60922: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60926: LD_STRING setSpecLogoNumber(
60928: PUSH
60929: LD_INT 3
60931: STR
60932: PUSH
60933: LD_STRING ,
60935: STR
60936: PUSH
60937: LD_INT 2
60939: STR
60940: PUSH
60941: LD_STRING )
60943: STR
60944: PPUSH
60945: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60949: LD_STRING setSpecLogoNumber(
60951: PUSH
60952: LD_INT 4
60954: STR
60955: PUSH
60956: LD_STRING ,
60958: STR
60959: PUSH
60960: LD_INT 3
60962: STR
60963: PUSH
60964: LD_STRING )
60966: STR
60967: PPUSH
60968: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60972: LD_STRING setSpecLogoNumber(
60974: PUSH
60975: LD_INT 5
60977: STR
60978: PUSH
60979: LD_STRING ,
60981: STR
60982: PUSH
60983: LD_INT 4
60985: STR
60986: PUSH
60987: LD_STRING )
60989: STR
60990: PPUSH
60991: CALL_OW 559
// end ;
60995: LD_VAR 0 1
60999: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61000: LD_INT 0
61002: PPUSH
61003: PPUSH
61004: PPUSH
61005: PPUSH
61006: PPUSH
61007: PPUSH
61008: PPUSH
61009: PPUSH
61010: PPUSH
// for i := 1 to 8 do
61011: LD_ADDR_VAR 0 2
61015: PUSH
61016: DOUBLE
61017: LD_INT 1
61019: DEC
61020: ST_TO_ADDR
61021: LD_INT 8
61023: PUSH
61024: FOR_TO
61025: IFFALSE 61410
// begin if mpSidePositions [ i ] then
61027: LD_EXP 7
61031: PUSH
61032: LD_VAR 0 2
61036: ARRAY
61037: IFFALSE 61408
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61039: LD_ADDR_VAR 0 7
61043: PUSH
61044: LD_INT 22
61046: PUSH
61047: LD_VAR 0 2
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 21
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PPUSH
61070: CALL_OW 69
61074: PPUSH
61075: CALL 12256 0 1
61079: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61080: LD_ADDR_VAR 0 9
61084: PUSH
61085: LD_INT 22
61087: PUSH
61088: LD_VAR 0 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 2
61099: PUSH
61100: LD_INT 30
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 30
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PPUSH
61129: CALL_OW 69
61133: ST_TO_ADDR
// crates := 0 ;
61134: LD_ADDR_VAR 0 4
61138: PUSH
61139: LD_INT 0
61141: ST_TO_ADDR
// oil := 0 ;
61142: LD_ADDR_VAR 0 5
61146: PUSH
61147: LD_INT 0
61149: ST_TO_ADDR
// sib := 0 ;
61150: LD_ADDR_VAR 0 6
61154: PUSH
61155: LD_INT 0
61157: ST_TO_ADDR
// if bases then
61158: LD_VAR 0 9
61162: IFFALSE 61268
// begin for j in bases do
61164: LD_ADDR_VAR 0 3
61168: PUSH
61169: LD_VAR 0 9
61173: PUSH
61174: FOR_IN
61175: IFFALSE 61266
// begin base := GetBase ( j ) ;
61177: LD_ADDR_VAR 0 8
61181: PUSH
61182: LD_VAR 0 3
61186: PPUSH
61187: CALL_OW 274
61191: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61192: LD_ADDR_VAR 0 4
61196: PUSH
61197: LD_VAR 0 4
61201: PUSH
61202: LD_VAR 0 8
61206: PPUSH
61207: LD_INT 1
61209: PPUSH
61210: CALL_OW 275
61214: PLUS
61215: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61216: LD_ADDR_VAR 0 5
61220: PUSH
61221: LD_VAR 0 5
61225: PUSH
61226: LD_VAR 0 8
61230: PPUSH
61231: LD_INT 2
61233: PPUSH
61234: CALL_OW 275
61238: PLUS
61239: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61240: LD_ADDR_VAR 0 6
61244: PUSH
61245: LD_VAR 0 6
61249: PUSH
61250: LD_VAR 0 8
61254: PPUSH
61255: LD_INT 3
61257: PPUSH
61258: CALL_OW 275
61262: PLUS
61263: ST_TO_ADDR
// end ;
61264: GO 61174
61266: POP
61267: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61268: LD_STRING setSpecText(
61270: PUSH
61271: LD_VAR 0 2
61275: STR
61276: PUSH
61277: LD_STRING ,
61279: STR
61280: PUSH
61281: LD_INT 2
61283: STR
61284: PUSH
61285: LD_STRING ,
61287: STR
61288: PUSH
61289: LD_VAR 0 4
61293: STR
61294: PUSH
61295: LD_STRING )
61297: STR
61298: PPUSH
61299: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61303: LD_STRING setSpecText(
61305: PUSH
61306: LD_VAR 0 2
61310: STR
61311: PUSH
61312: LD_STRING ,
61314: STR
61315: PUSH
61316: LD_INT 3
61318: STR
61319: PUSH
61320: LD_STRING ,
61322: STR
61323: PUSH
61324: LD_VAR 0 5
61328: STR
61329: PUSH
61330: LD_STRING )
61332: STR
61333: PPUSH
61334: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61338: LD_STRING setSpecText(
61340: PUSH
61341: LD_VAR 0 2
61345: STR
61346: PUSH
61347: LD_STRING ,
61349: STR
61350: PUSH
61351: LD_INT 4
61353: STR
61354: PUSH
61355: LD_STRING ,
61357: STR
61358: PUSH
61359: LD_VAR 0 6
61363: STR
61364: PUSH
61365: LD_STRING )
61367: STR
61368: PPUSH
61369: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61373: LD_STRING setSpecText(
61375: PUSH
61376: LD_VAR 0 2
61380: STR
61381: PUSH
61382: LD_STRING ,
61384: STR
61385: PUSH
61386: LD_INT 5
61388: STR
61389: PUSH
61390: LD_STRING ,
61392: STR
61393: PUSH
61394: LD_VAR 0 7
61398: STR
61399: PUSH
61400: LD_STRING )
61402: STR
61403: PPUSH
61404: CALL_OW 559
// end ; end ;
61408: GO 61024
61410: POP
61411: POP
// end ;
61412: LD_VAR 0 1
61416: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61417: LD_INT 2
61419: PUSH
61420: LD_INT 30
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 30
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: LIST
61444: PPUSH
61445: CALL_OW 69
61449: IFFALSE 61459
61451: GO 61453
61453: DISABLE
// begin enable ;
61454: ENABLE
// UpdateSpectatorBar ;
61455: CALL 61000 0 0
// end ;
61459: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61460: LD_INT 0
61462: PPUSH
// end ;
61463: LD_VAR 0 12
61467: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61468: LD_INT 0
61470: PPUSH
61471: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61472: LD_VAR 0 1
61476: NOT
61477: IFTRUE 61496
61479: PUSH
61480: LD_VAR 0 2
61484: PPUSH
61485: LD_VAR 0 3
61489: PPUSH
61490: CALL_OW 488
61494: NOT
61495: OR
61496: IFTRUE 61531
61498: PUSH
61499: LD_VAR 0 1
61503: PPUSH
61504: CALL_OW 266
61508: PUSH
61509: LD_INT 3
61511: NONEQUAL
61512: IFFALSE 61530
61514: PUSH
61515: LD_VAR 0 1
61519: PPUSH
61520: CALL_OW 247
61524: PUSH
61525: LD_INT 1
61527: EQUAL
61528: NOT
61529: AND
61530: OR
61531: IFFALSE 61535
// exit ;
61533: GO 61817
// if GetType ( factory ) = unit_human then
61535: LD_VAR 0 1
61539: PPUSH
61540: CALL_OW 247
61544: PUSH
61545: LD_INT 1
61547: EQUAL
61548: IFFALSE 61565
// factory := IsInUnit ( factory ) ;
61550: LD_ADDR_VAR 0 1
61554: PUSH
61555: LD_VAR 0 1
61559: PPUSH
61560: CALL_OW 310
61564: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61565: LD_VAR 0 1
61569: PPUSH
61570: CALL_OW 266
61574: PUSH
61575: LD_INT 3
61577: NONEQUAL
61578: IFFALSE 61582
// exit ;
61580: GO 61817
// for i := 1 to Count ( factoryWaypoints ) do
61582: LD_ADDR_VAR 0 5
61586: PUSH
61587: DOUBLE
61588: LD_INT 1
61590: DEC
61591: ST_TO_ADDR
61592: LD_EXP 59
61596: PPUSH
61597: CALL 12256 0 1
61601: PUSH
61602: FOR_TO
61603: IFFALSE 61765
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61605: LD_VAR 0 2
61609: PPUSH
61610: LD_VAR 0 3
61614: PPUSH
61615: CALL_OW 428
61619: PUSH
61620: LD_EXP 59
61624: PUSH
61625: LD_VAR 0 5
61629: ARRAY
61630: PUSH
61631: LD_INT 2
61633: ARRAY
61634: EQUAL
61635: IFFALSE 61667
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61637: LD_ADDR_EXP 59
61641: PUSH
61642: LD_EXP 59
61646: PPUSH
61647: LD_VAR 0 5
61651: PPUSH
61652: CALL_OW 3
61656: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61657: CALL 61822 0 0
// exit ;
61661: POP
61662: POP
61663: GO 61817
// end else
61665: GO 61763
// if factory = factoryWaypoints [ i ] [ 2 ] then
61667: LD_VAR 0 1
61671: PUSH
61672: LD_EXP 59
61676: PUSH
61677: LD_VAR 0 5
61681: ARRAY
61682: PUSH
61683: LD_INT 2
61685: ARRAY
61686: EQUAL
61687: IFFALSE 61763
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61689: LD_ADDR_EXP 59
61693: PUSH
61694: LD_EXP 59
61698: PPUSH
61699: LD_VAR 0 5
61703: PPUSH
61704: CALL_OW 3
61708: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61709: LD_ADDR_EXP 59
61713: PUSH
61714: LD_EXP 59
61718: PPUSH
61719: LD_VAR 0 1
61723: PPUSH
61724: CALL_OW 255
61728: PUSH
61729: LD_VAR 0 1
61733: PUSH
61734: LD_VAR 0 2
61738: PUSH
61739: LD_VAR 0 3
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: PPUSH
61750: CALL 48188 0 2
61754: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61755: CALL 61822 0 0
// exit ;
61759: POP
61760: POP
61761: GO 61817
// end ; end ;
61763: GO 61602
61765: POP
61766: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61767: LD_ADDR_EXP 59
61771: PUSH
61772: LD_EXP 59
61776: PPUSH
61777: LD_VAR 0 1
61781: PPUSH
61782: CALL_OW 255
61786: PUSH
61787: LD_VAR 0 1
61791: PUSH
61792: LD_VAR 0 2
61796: PUSH
61797: LD_VAR 0 3
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: PPUSH
61808: CALL 48188 0 2
61812: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61813: CALL 61822 0 0
// end ;
61817: LD_VAR 0 4
61821: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61822: LD_INT 0
61824: PPUSH
61825: PPUSH
61826: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61827: LD_STRING resetFactoryWaypoint();
61829: PPUSH
61830: CALL_OW 559
// if factoryWaypoints then
61834: LD_EXP 59
61838: IFFALSE 61959
// begin list := factoryWaypoints ;
61840: LD_ADDR_VAR 0 3
61844: PUSH
61845: LD_EXP 59
61849: ST_TO_ADDR
// for i := 1 to list do
61850: LD_ADDR_VAR 0 2
61854: PUSH
61855: DOUBLE
61856: LD_INT 1
61858: DEC
61859: ST_TO_ADDR
61860: LD_VAR 0 3
61864: PUSH
61865: FOR_TO
61866: IFFALSE 61957
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61868: LD_STRING setFactoryWaypointXY(
61870: PUSH
61871: LD_VAR 0 3
61875: PUSH
61876: LD_VAR 0 2
61880: ARRAY
61881: PUSH
61882: LD_INT 1
61884: ARRAY
61885: STR
61886: PUSH
61887: LD_STRING ,
61889: STR
61890: PUSH
61891: LD_VAR 0 3
61895: PUSH
61896: LD_VAR 0 2
61900: ARRAY
61901: PUSH
61902: LD_INT 2
61904: ARRAY
61905: STR
61906: PUSH
61907: LD_STRING ,
61909: STR
61910: PUSH
61911: LD_VAR 0 3
61915: PUSH
61916: LD_VAR 0 2
61920: ARRAY
61921: PUSH
61922: LD_INT 3
61924: ARRAY
61925: STR
61926: PUSH
61927: LD_STRING ,
61929: STR
61930: PUSH
61931: LD_VAR 0 3
61935: PUSH
61936: LD_VAR 0 2
61940: ARRAY
61941: PUSH
61942: LD_INT 4
61944: ARRAY
61945: STR
61946: PUSH
61947: LD_STRING )
61949: STR
61950: PPUSH
61951: CALL_OW 559
61955: GO 61865
61957: POP
61958: POP
// end ; end ;
61959: LD_VAR 0 1
61963: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61964: LD_INT 0
61966: PPUSH
// if HexInfo ( x , y ) = warehouse then
61967: LD_VAR 0 2
61971: PPUSH
61972: LD_VAR 0 3
61976: PPUSH
61977: CALL_OW 428
61981: PUSH
61982: LD_VAR 0 1
61986: EQUAL
61987: IFFALSE 62014
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61989: LD_ADDR_EXP 61
61993: PUSH
61994: LD_EXP 61
61998: PPUSH
61999: LD_VAR 0 1
62003: PPUSH
62004: LD_INT 0
62006: PPUSH
62007: CALL_OW 1
62011: ST_TO_ADDR
62012: GO 62065
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62014: LD_ADDR_EXP 61
62018: PUSH
62019: LD_EXP 61
62023: PPUSH
62024: LD_VAR 0 1
62028: PPUSH
62029: LD_VAR 0 1
62033: PPUSH
62034: CALL_OW 255
62038: PUSH
62039: LD_VAR 0 1
62043: PUSH
62044: LD_VAR 0 2
62048: PUSH
62049: LD_VAR 0 3
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: PPUSH
62060: CALL_OW 1
62064: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62065: CALL 62074 0 0
// end ;
62069: LD_VAR 0 4
62073: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62074: LD_INT 0
62076: PPUSH
62077: PPUSH
62078: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62079: LD_STRING resetWarehouseGatheringPoints();
62081: PPUSH
62082: CALL_OW 559
// if warehouseGatheringPoints then
62086: LD_EXP 61
62090: IFFALSE 62216
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62092: LD_ADDR_VAR 0 3
62096: PUSH
62097: LD_EXP 61
62101: PPUSH
62102: CALL 52122 0 1
62106: ST_TO_ADDR
// for i := 1 to list do
62107: LD_ADDR_VAR 0 2
62111: PUSH
62112: DOUBLE
62113: LD_INT 1
62115: DEC
62116: ST_TO_ADDR
62117: LD_VAR 0 3
62121: PUSH
62122: FOR_TO
62123: IFFALSE 62214
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62125: LD_STRING setWarehouseGatheringPointXY(
62127: PUSH
62128: LD_VAR 0 3
62132: PUSH
62133: LD_VAR 0 2
62137: ARRAY
62138: PUSH
62139: LD_INT 1
62141: ARRAY
62142: STR
62143: PUSH
62144: LD_STRING ,
62146: STR
62147: PUSH
62148: LD_VAR 0 3
62152: PUSH
62153: LD_VAR 0 2
62157: ARRAY
62158: PUSH
62159: LD_INT 2
62161: ARRAY
62162: STR
62163: PUSH
62164: LD_STRING ,
62166: STR
62167: PUSH
62168: LD_VAR 0 3
62172: PUSH
62173: LD_VAR 0 2
62177: ARRAY
62178: PUSH
62179: LD_INT 3
62181: ARRAY
62182: STR
62183: PUSH
62184: LD_STRING ,
62186: STR
62187: PUSH
62188: LD_VAR 0 3
62192: PUSH
62193: LD_VAR 0 2
62197: ARRAY
62198: PUSH
62199: LD_INT 4
62201: ARRAY
62202: STR
62203: PUSH
62204: LD_STRING )
62206: STR
62207: PPUSH
62208: CALL_OW 559
62212: GO 62122
62214: POP
62215: POP
// end ; end ;
62216: LD_VAR 0 1
62220: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62221: LD_INT 0
62223: PPUSH
62224: PPUSH
// if not mpSidePositions then
62225: LD_EXP 7
62229: NOT
62230: IFFALSE 62234
// exit ;
62232: GO 62305
// result :=  ;
62234: LD_ADDR_VAR 0 1
62238: PUSH
62239: LD_STRING 
62241: ST_TO_ADDR
// for i := 1 to 8 do
62242: LD_ADDR_VAR 0 2
62246: PUSH
62247: DOUBLE
62248: LD_INT 1
62250: DEC
62251: ST_TO_ADDR
62252: LD_INT 8
62254: PUSH
62255: FOR_TO
62256: IFFALSE 62286
// begin result := result & mpSidePositions [ i ] & ; ;
62258: LD_ADDR_VAR 0 1
62262: PUSH
62263: LD_VAR 0 1
62267: PUSH
62268: LD_EXP 7
62272: PUSH
62273: LD_VAR 0 2
62277: ARRAY
62278: STR
62279: PUSH
62280: LD_STRING ;
62282: STR
62283: ST_TO_ADDR
// end ;
62284: GO 62255
62286: POP
62287: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62288: LD_STRING setMultiplayerRealPosition("
62290: PUSH
62291: LD_VAR 0 1
62295: STR
62296: PUSH
62297: LD_STRING ");
62299: STR
62300: PPUSH
62301: CALL_OW 559
// end ;
62305: LD_VAR 0 1
62309: RET
