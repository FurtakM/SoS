// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2810 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3233 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 220 , 160 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 220
 809: PUSH
 810: LD_INT 160
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 7
 838: PUSH
 839: LD_INT 8
 841: PUSH
 842: LD_INT 9
 844: PUSH
 845: LD_INT 10
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 12
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 13
 869: PUSH
 870: LD_INT 14
 872: PUSH
 873: LD_INT 15
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 19
 885: UNION
 886: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 887: LD_VAR 0 1
 891: PUSH
 892: LD_INT 2
 894: EQUAL
 895: IFFALSE 907
// baseLevel := 1 else
 897: LD_ADDR_VAR 0 7
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
 905: GO 921
// baseLevel := mpGameSettings [ 1 ] ;
 907: LD_ADDR_VAR 0 7
 911: PUSH
 912: LD_EXP 6
 916: PUSH
 917: LD_INT 1
 919: ARRAY
 920: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 921: LD_ADDR_EXP 24
 925: PUSH
 926: LD_EXP 6
 930: PUSH
 931: LD_INT 2
 933: ARRAY
 934: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 935: LD_ADDR_EXP 25
 939: PUSH
 940: LD_EXP 6
 944: PUSH
 945: LD_INT 3
 947: ARRAY
 948: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 949: LD_ADDR_EXP 15
 953: PUSH
 954: LD_EXP 6
 958: PUSH
 959: LD_INT 4
 961: ARRAY
 962: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 963: LD_ADDR_EXP 27
 967: PUSH
 968: LD_EXP 6
 972: PUSH
 973: LD_INT 5
 975: ARRAY
 976: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 977: LD_ADDR_VAR 0 5
 981: PUSH
 982: LD_EXP 6
 986: PUSH
 987: LD_INT 6
 989: ARRAY
 990: PUSH
 991: LD_INT 0
 993: GREATER
 994: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 995: LD_ADDR_VAR 0 6
 999: PUSH
1000: LD_EXP 6
1004: PUSH
1005: LD_INT 7
1007: ARRAY
1008: PUSH
1009: LD_INT 0
1011: GREATER
1012: ST_TO_ADDR
// mpKingArea := 0 ;
1013: LD_ADDR_EXP 34
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpPoints := 0 ;
1021: LD_ADDR_EXP 35
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// mpEmissions := 0 ;
1029: LD_ADDR_EXP 37
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingArea := 0 ;
1037: LD_ADDR_EXP 1
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// kingCamArea := 0 ;
1045: LD_ADDR_EXP 2
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1053: LD_EXP 6
1057: PUSH
1058: LD_INT 9
1060: ARRAY
1061: IFFALSE 1193
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1063: LD_ADDR_EXP 36
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 2
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: LD_INT 1
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 12
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 24
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 12
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: LD_INT 1
1134: PUSH
1135: LD_INT 23
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 21
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 42
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 21
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 42
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1193: LD_ADDR_EXP 16
1197: PUSH
1198: LD_EXP 6
1202: PUSH
1203: LD_INT 11
1205: ARRAY
1206: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1207: LD_ADDR_EXP 22
1211: PUSH
1212: LD_EXP 6
1216: PUSH
1217: LD_INT 12
1219: ARRAY
1220: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1221: LD_ADDR_EXP 26
1225: PUSH
1226: LD_EXP 6
1230: PUSH
1231: LD_INT 13
1233: ARRAY
1234: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1235: LD_ADDR_EXP 33
1239: PUSH
1240: LD_EXP 6
1244: PUSH
1245: LD_INT 14
1247: ARRAY
1248: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1249: LD_ADDR_EXP 30
1253: PUSH
1254: LD_EXP 6
1258: PUSH
1259: LD_INT 15
1261: ARRAY
1262: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1263: LD_ADDR_EXP 28
1267: PUSH
1268: LD_EXP 6
1272: PUSH
1273: LD_INT 18
1275: ARRAY
1276: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1277: LD_ADDR_EXP 20
1281: PUSH
1282: LD_EXP 6
1286: PUSH
1287: LD_INT 21
1289: ARRAY
1290: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1291: LD_ADDR_EXP 31
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: LD_INT 2
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: LD_INT 4
1307: PUSH
1308: LD_INT 5
1310: PUSH
1311: LD_INT 6
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 1 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) ] ;
1322: LD_ADDR_VAR 0 8
1326: PUSH
1327: LD_INT 18
1329: PPUSH
1330: LD_INT 1
1332: PPUSH
1333: CALL 54265 0 2
1337: PUSH
1338: LD_INT 24
1340: PPUSH
1341: LD_INT 1
1343: PPUSH
1344: CALL 54265 0 2
1348: PUSH
1349: LD_INT 30
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL 54265 0 2
1359: PUSH
1360: LD_INT 36
1362: PPUSH
1363: LD_INT 4
1365: PPUSH
1366: CALL 54265 0 2
1370: PUSH
1371: LD_INT 42
1373: PPUSH
1374: LD_INT 4
1376: PPUSH
1377: CALL 54265 0 2
1381: PUSH
1382: LD_INT 48
1384: PPUSH
1385: LD_INT 4
1387: PPUSH
1388: CALL 54265 0 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1401: LD_ADDR_VAR 0 3
1405: PUSH
1406: DOUBLE
1407: LD_INT 1
1409: DEC
1410: ST_TO_ADDR
1411: LD_VAR 0 8
1415: PPUSH
1416: CALL 13570 0 1
1420: PUSH
1421: FOR_TO
1422: IFFALSE 1526
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1424: LD_ADDR_EXP 21
1428: PUSH
1429: LD_EXP 21
1433: PPUSH
1434: LD_VAR 0 3
1438: PPUSH
1439: LD_VAR 0 8
1443: PUSH
1444: LD_VAR 0 3
1448: ARRAY
1449: PUSH
1450: LD_INT 1
1452: ARRAY
1453: PPUSH
1454: LD_VAR 0 8
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PUSH
1465: LD_INT 3
1467: ARRAY
1468: PPUSH
1469: LD_INT 10
1471: PPUSH
1472: CALL_OW 272
1476: PUSH
1477: LD_VAR 0 8
1481: PUSH
1482: LD_VAR 0 3
1486: ARRAY
1487: PUSH
1488: LD_INT 2
1490: ARRAY
1491: PPUSH
1492: LD_VAR 0 8
1496: PUSH
1497: LD_VAR 0 3
1501: ARRAY
1502: PUSH
1503: LD_INT 3
1505: ARRAY
1506: PPUSH
1507: LD_INT 10
1509: PPUSH
1510: CALL_OW 273
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PPUSH
1519: CALL_OW 1
1523: ST_TO_ADDR
1524: GO 1421
1526: POP
1527: POP
// if hasOil then
1528: LD_VAR 0 5
1532: IFFALSE 1643
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1534: LD_ADDR_VAR 0 4
1538: PUSH
1539: LD_EXP 6
1543: PUSH
1544: LD_INT 6
1546: ARRAY
1547: PUSH
1548: LD_INT 2
1550: EQUAL
1551: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1552: LD_ADDR_EXP 12
1556: PUSH
1557: LD_INT 19
1559: PPUSH
1560: LD_VAR 0 4
1564: PPUSH
1565: CALL 54098 0 2
1569: PUSH
1570: LD_INT 25
1572: PPUSH
1573: LD_VAR 0 4
1577: PPUSH
1578: CALL 54098 0 2
1582: PUSH
1583: LD_INT 31
1585: PPUSH
1586: LD_VAR 0 4
1590: PPUSH
1591: CALL 54098 0 2
1595: PUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_VAR 0 4
1603: PPUSH
1604: CALL 54098 0 2
1608: PUSH
1609: LD_INT 43
1611: PPUSH
1612: LD_VAR 0 4
1616: PPUSH
1617: CALL 54098 0 2
1621: PUSH
1622: LD_INT 49
1624: PPUSH
1625: LD_VAR 0 4
1629: PPUSH
1630: CALL 54098 0 2
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// end ; if hasSib then
1643: LD_VAR 0 6
1647: IFFALSE 1758
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1649: LD_ADDR_VAR 0 4
1653: PUSH
1654: LD_EXP 6
1658: PUSH
1659: LD_INT 7
1661: ARRAY
1662: PUSH
1663: LD_INT 2
1665: EQUAL
1666: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1667: LD_ADDR_EXP 13
1671: PUSH
1672: LD_INT 20
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 54098 0 2
1684: PUSH
1685: LD_INT 26
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 54098 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 54098 0 2
1710: PUSH
1711: LD_INT 38
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 54098 0 2
1723: PUSH
1724: LD_INT 44
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL 54098 0 2
1736: PUSH
1737: LD_INT 50
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL 54098 0 2
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 1
1765: GREATEREQUAL
1766: IFFALSE 1778
// mpDepots := startPos ;
1768: LD_ADDR_EXP 14
1772: PUSH
1773: LD_VAR 0 8
1777: ST_TO_ADDR
// if baseLevel >= 2 then
1778: LD_VAR 0 7
1782: PUSH
1783: LD_INT 2
1785: GREATEREQUAL
1786: IFFALSE 2101
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] ] ;
1788: LD_ADDR_EXP 17
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 21
1798: PPUSH
1799: LD_INT 4
1801: PPUSH
1802: CALL 54265 0 2
1806: ADD
1807: PUSH
1808: LD_INT 31
1810: PUSH
1811: LD_INT 22
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: CALL 54265 0 2
1821: ADD
1822: PUSH
1823: LD_INT 4
1825: PUSH
1826: LD_INT 23
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: CALL 54265 0 2
1836: ADD
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 31
1845: PUSH
1846: LD_INT 27
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: CALL 54265 0 2
1856: ADD
1857: PUSH
1858: LD_INT 31
1860: PUSH
1861: LD_INT 28
1863: PPUSH
1864: LD_INT 4
1866: PPUSH
1867: CALL 54265 0 2
1871: ADD
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 29
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 54265 0 2
1886: ADD
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 31
1895: PUSH
1896: LD_INT 34
1898: PPUSH
1899: LD_INT 4
1901: PPUSH
1902: CALL 54265 0 2
1906: ADD
1907: PUSH
1908: LD_INT 31
1910: PUSH
1911: LD_INT 35
1913: PPUSH
1914: LD_INT 4
1916: PPUSH
1917: CALL 54265 0 2
1921: ADD
1922: PUSH
1923: LD_INT 4
1925: PUSH
1926: LD_INT 33
1928: PPUSH
1929: LD_INT 4
1931: PPUSH
1932: CALL 54265 0 2
1936: ADD
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 31
1945: PUSH
1946: LD_INT 39
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL 54265 0 2
1956: ADD
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: LD_INT 40
1963: PPUSH
1964: LD_INT 1
1966: PPUSH
1967: CALL 54265 0 2
1971: ADD
1972: PUSH
1973: LD_INT 4
1975: PUSH
1976: LD_INT 41
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 54265 0 2
1986: ADD
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 31
1995: PUSH
1996: LD_INT 45
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: CALL 54265 0 2
2006: ADD
2007: PUSH
2008: LD_INT 31
2010: PUSH
2011: LD_INT 46
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL 54265 0 2
2021: ADD
2022: PUSH
2023: LD_INT 4
2025: PUSH
2026: LD_INT 47
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL 54265 0 2
2036: ADD
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 31
2045: PUSH
2046: LD_INT 51
2048: PPUSH
2049: LD_INT 1
2051: PPUSH
2052: CALL 54265 0 2
2056: ADD
2057: PUSH
2058: LD_INT 31
2060: PUSH
2061: LD_INT 52
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: CALL 54265 0 2
2071: ADD
2072: PUSH
2073: LD_INT 4
2075: PUSH
2076: LD_INT 53
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: CALL 54265 0 2
2086: ADD
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: ST_TO_ADDR
// end ; end ;
2101: LD_VAR 0 2
2105: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2106: GO 2108
2108: DISABLE
2109: LD_INT 0
2111: PPUSH
2112: PPUSH
2113: PPUSH
2114: PPUSH
2115: PPUSH
2116: PPUSH
2117: PPUSH
2118: PPUSH
// begin if not mpShipments then
2119: LD_EXP 27
2123: NOT
2124: IFFALSE 2128
// exit ;
2126: GO 2647
// case mpShipments of 1 :
2128: LD_EXP 27
2132: PUSH
2133: LD_INT 1
2135: DOUBLE
2136: EQUAL
2137: IFTRUE 2141
2139: GO 2176
2141: POP
// begin time := 0 0$30 ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// normalTime := 0 0$30 ;
2150: LD_ADDR_VAR 0 6
2154: PUSH
2155: LD_INT 1050
2157: ST_TO_ADDR
// maxTime := 1 1$20 ;
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: LD_INT 2800
2165: ST_TO_ADDR
// delayTime := 0 0$5 ;
2166: LD_ADDR_VAR 0 7
2170: PUSH
2171: LD_INT 175
2173: ST_TO_ADDR
// end ; 2 :
2174: GO 2306
2176: LD_INT 2
2178: DOUBLE
2179: EQUAL
2180: IFTRUE 2184
2182: GO 2219
2184: POP
// begin time := 0 0$25 ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// normalTime := 0 0$25 ;
2193: LD_ADDR_VAR 0 6
2197: PUSH
2198: LD_INT 875
2200: ST_TO_ADDR
// maxTime := 1 1$10 ;
2201: LD_ADDR_VAR 0 8
2205: PUSH
2206: LD_INT 2450
2208: ST_TO_ADDR
// delayTime := 0 0$4 ;
2209: LD_ADDR_VAR 0 7
2213: PUSH
2214: LD_INT 140
2216: ST_TO_ADDR
// end ; 3 :
2217: GO 2306
2219: LD_INT 3
2221: DOUBLE
2222: EQUAL
2223: IFTRUE 2227
2225: GO 2262
2227: POP
// begin time := 0 0$20 ;
2228: LD_ADDR_VAR 0 4
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// normalTime := 0 0$20 ;
2236: LD_ADDR_VAR 0 6
2240: PUSH
2241: LD_INT 700
2243: ST_TO_ADDR
// maxTime := 1 1$00 ;
2244: LD_ADDR_VAR 0 8
2248: PUSH
2249: LD_INT 2100
2251: ST_TO_ADDR
// delayTime := 0 0$3 ;
2252: LD_ADDR_VAR 0 7
2256: PUSH
2257: LD_INT 105
2259: ST_TO_ADDR
// end ; 4 :
2260: GO 2306
2262: LD_INT 4
2264: DOUBLE
2265: EQUAL
2266: IFTRUE 2270
2268: GO 2305
2270: POP
// begin time := 0 0$15 ;
2271: LD_ADDR_VAR 0 4
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// normalTime := 0 0$15 ;
2279: LD_ADDR_VAR 0 6
2283: PUSH
2284: LD_INT 525
2286: ST_TO_ADDR
// maxTime := 0 0$55 ;
2287: LD_ADDR_VAR 0 8
2291: PUSH
2292: LD_INT 1925
2294: ST_TO_ADDR
// delayTime := 0 0$2 ;
2295: LD_ADDR_VAR 0 7
2299: PUSH
2300: LD_INT 70
2302: ST_TO_ADDR
// end ; end ;
2303: GO 2306
2305: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_INT 7
2313: PUSH
2314: LD_INT 8
2316: PUSH
2317: LD_INT 9
2319: PUSH
2320: LD_INT 10
2322: PUSH
2323: LD_INT 11
2325: PUSH
2326: LD_INT 12
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 ] ;
2337: LD_ADDR_VAR 0 5
2341: PUSH
2342: LD_INT 13
2344: PUSH
2345: LD_INT 14
2347: PUSH
2348: LD_INT 15
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: ST_TO_ADDR
// for i := 1 to 8 do
2356: LD_ADDR_VAR 0 1
2360: PUSH
2361: DOUBLE
2362: LD_INT 1
2364: DEC
2365: ST_TO_ADDR
2366: LD_INT 8
2368: PUSH
2369: FOR_TO
2370: IFFALSE 2417
// begin if not mpSidePositions [ i ] then
2372: LD_EXP 7
2376: PUSH
2377: LD_VAR 0 1
2381: ARRAY
2382: NOT
2383: IFFALSE 2387
// continue ;
2385: GO 2369
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2387: LD_ADDR_VAR 0 5
2391: PUSH
2392: LD_VAR 0 5
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_EXP 7
2406: PUSH
2407: LD_VAR 0 1
2411: ARRAY
2412: ARRAY
2413: ADD
2414: ST_TO_ADDR
// end ;
2415: GO 2369
2417: POP
2418: POP
// x := 1 ;
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// repeat wait ( time ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: CALL_OW 67
// x := Inc ( x ) ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: CALL 50919 0 1
2450: ST_TO_ADDR
// if x > 5 then
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 5
2458: GREATER
2459: IFFALSE 2469
// x := 1 ;
2461: LD_ADDR_VAR 0 2
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// for i in areas do
2469: LD_ADDR_VAR 0 1
2473: PUSH
2474: LD_VAR 0 5
2478: PUSH
2479: FOR_IN
2480: IFFALSE 2519
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2482: LD_VAR 0 1
2486: PPUSH
2487: LD_INT 1
2489: PPUSH
2490: CALL_OW 287
2494: PUSH
2495: LD_INT 20
2497: LESS
2498: IFFALSE 2517
// begin CreateCratesArea ( x , i , true ) ;
2500: LD_VAR 0 2
2504: PPUSH
2505: LD_VAR 0 1
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 55
// end ; end ;
2517: GO 2479
2519: POP
2520: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2521: LD_INT 17
2523: PPUSH
2524: LD_INT 1
2526: PPUSH
2527: CALL_OW 287
2531: PUSH
2532: LD_INT 0
2534: EQUAL
2535: IFFALSE 2574
// begin for i := 1 to 3 do
2537: LD_ADDR_VAR 0 1
2541: PUSH
2542: DOUBLE
2543: LD_INT 1
2545: DEC
2546: ST_TO_ADDR
2547: LD_INT 3
2549: PUSH
2550: FOR_TO
2551: IFFALSE 2570
// CreateCratesArea ( x , CenterArea , true ) ;
2553: LD_VAR 0 2
2557: PPUSH
2558: LD_INT 17
2560: PPUSH
2561: LD_INT 1
2563: PPUSH
2564: CALL_OW 55
2568: GO 2550
2570: POP
2571: POP
// end else
2572: GO 2605
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2574: LD_INT 17
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL_OW 287
2584: PUSH
2585: LD_INT 30
2587: LESS
2588: IFFALSE 2605
// CreateCratesArea ( x , CenterArea , true ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 17
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 55
// time := time + delayTime ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: LD_VAR 0 4
2614: PUSH
2615: LD_VAR 0 7
2619: PLUS
2620: ST_TO_ADDR
// if time > maxTime then
2621: LD_VAR 0 4
2625: PUSH
2626: LD_VAR 0 8
2630: GREATER
2631: IFFALSE 2643
// time := normalTime ;
2633: LD_ADDR_VAR 0 4
2637: PUSH
2638: LD_VAR 0 6
2642: ST_TO_ADDR
// until false ;
2643: LD_INT 0
2645: IFFALSE 2427
// end ; end_of_file
2647: PPOPN 8
2649: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2650: LD_VAR 0 1
2654: PPUSH
2655: CALL 55063 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2659: LD_VAR 0 1
2663: PPUSH
2664: CALL 8356 0 1
// end ;
2668: PPOPN 1
2670: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2671: LD_VAR 0 1
2675: PPUSH
2676: CALL 55080 0 1
// end ;
2680: PPOPN 1
2682: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2683: LD_VAR 0 1
2687: PPUSH
2688: CALL 9409 0 1
2692: PPOPN 1
2694: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 2
2704: PPUSH
2705: CALL 55121 0 2
2709: PPOPN 2
2711: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2712: LD_VAR 0 1
2716: PPUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 9162 0 2
2726: PPOPN 2
2728: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_VAR 0 2
2738: PPUSH
2739: LD_VAR 0 3
2743: PPUSH
2744: CALL 9462 0 3
2748: PPOPN 3
2750: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2751: LD_VAR 0 1
2755: PPUSH
2756: LD_VAR 0 2
2760: PPUSH
2761: LD_VAR 0 3
2765: PPUSH
2766: LD_VAR 0 4
2770: PPUSH
2771: LD_VAR 0 5
2775: PPUSH
2776: CALL 10146 0 5
2780: PPOPN 5
2782: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2783: LD_VAR 0 1
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: LD_VAR 0 3
2797: PPUSH
2798: LD_VAR 0 4
2802: PPUSH
2803: CALL 10249 0 4
2807: PPOPN 4
2809: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2810: LD_INT 0
2812: PPUSH
2813: PPUSH
// disable ( mpActive ) ;
2814: LD_INT 100
2816: DISABLE_MARKED
// disable ( mpWin ) ;
2817: LD_INT 101
2819: DISABLE_MARKED
// disable ( mpLose ) ;
2820: LD_INT 102
2822: DISABLE_MARKED
// mpGameType := 0 ;
2823: LD_ADDR_EXP 3
2827: PUSH
2828: LD_INT 0
2830: ST_TO_ADDR
// mpGameSettings := [ ] ;
2831: LD_ADDR_EXP 6
2835: PUSH
2836: EMPTY
2837: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2838: LD_ADDR_EXP 4
2842: PUSH
2843: EMPTY
2844: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2845: LD_ADDR_EXP 5
2849: PUSH
2850: EMPTY
2851: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2852: LD_ADDR_EXP 29
2856: PUSH
2857: LD_INT 2
2859: PUSH
2860: LD_INT 2
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2867: LD_ADDR_EXP 12
2871: PUSH
2872: EMPTY
2873: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2874: LD_ADDR_EXP 13
2878: PUSH
2879: EMPTY
2880: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2881: LD_ADDR_EXP 42
2885: PUSH
2886: EMPTY
2887: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2888: LD_ADDR_EXP 43
2892: PUSH
2893: EMPTY
2894: ST_TO_ADDR
// mpDepots := [ ] ;
2895: LD_ADDR_EXP 14
2899: PUSH
2900: EMPTY
2901: ST_TO_ADDR
// mpBuildings := [ ] ;
2902: LD_ADDR_EXP 17
2906: PUSH
2907: EMPTY
2908: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2909: LD_ADDR_EXP 18
2913: PUSH
2914: EMPTY
2915: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2916: LD_ADDR_EXP 19
2920: PUSH
2921: EMPTY
2922: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2923: LD_ADDR_EXP 20
2927: PUSH
2928: EMPTY
2929: ST_TO_ADDR
// mpStartingResources := [ ] ;
2930: LD_ADDR_EXP 15
2934: PUSH
2935: EMPTY
2936: ST_TO_ADDR
// mpStartPos := [ ] ;
2937: LD_ADDR_EXP 21
2941: PUSH
2942: EMPTY
2943: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2944: LD_ADDR_EXP 22
2948: PUSH
2949: LD_INT 1
2951: NEG
2952: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2953: LD_ADDR_EXP 23
2957: PUSH
2958: EMPTY
2959: ST_TO_ADDR
// mpApemans := [ ] ;
2960: LD_ADDR_EXP 30
2964: PUSH
2965: EMPTY
2966: ST_TO_ADDR
// mpApemansArea := [ ] ;
2967: LD_ADDR_EXP 31
2971: PUSH
2972: EMPTY
2973: ST_TO_ADDR
// mpRespawn := [ ] ;
2974: LD_ADDR_EXP 33
2978: PUSH
2979: EMPTY
2980: ST_TO_ADDR
// mpKingArea := 0 ;
2981: LD_ADDR_EXP 34
2985: PUSH
2986: LD_INT 0
2988: ST_TO_ADDR
// mpPoints := [ ] ;
2989: LD_ADDR_EXP 35
2993: PUSH
2994: EMPTY
2995: ST_TO_ADDR
// mpVehicles := 0 ;
2996: LD_ADDR_EXP 36
3000: PUSH
3001: LD_INT 0
3003: ST_TO_ADDR
// mpShipments := 0 ;
3004: LD_ADDR_EXP 27
3008: PUSH
3009: LD_INT 0
3011: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3012: LD_ADDR_EXP 40
3016: PUSH
3017: EMPTY
3018: PUSH
3019: EMPTY
3020: PUSH
3021: EMPTY
3022: PUSH
3023: EMPTY
3024: PUSH
3025: EMPTY
3026: PUSH
3027: EMPTY
3028: PUSH
3029: EMPTY
3030: PUSH
3031: EMPTY
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3043: LD_ADDR_EXP 32
3047: PUSH
3048: EMPTY
3049: PUSH
3050: EMPTY
3051: PUSH
3052: EMPTY
3053: PUSH
3054: EMPTY
3055: PUSH
3056: EMPTY
3057: PUSH
3058: EMPTY
3059: PUSH
3060: EMPTY
3061: PUSH
3062: EMPTY
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3074: LD_ADDR_EXP 41
3078: PUSH
3079: LD_INT 0
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: LD_INT 0
3096: PUSH
3097: LD_INT 0
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: ST_TO_ADDR
// mpEmissions := 0 ;
3113: LD_ADDR_EXP 37
3117: PUSH
3118: LD_INT 0
3120: ST_TO_ADDR
// mpTeleports := 0 ;
3121: LD_ADDR_EXP 44
3125: PUSH
3126: LD_INT 0
3128: ST_TO_ADDR
// mpArtifacts := 0 ;
3129: LD_ADDR_EXP 45
3133: PUSH
3134: LD_INT 0
3136: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3137: LD_ADDR_EXP 46
3141: PUSH
3142: LD_INT 0
3144: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3145: LD_ADDR_EXP 25
3149: PUSH
3150: LD_INT 3
3152: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3153: LD_ADDR_EXP 24
3157: PUSH
3158: LD_INT 15
3160: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3161: LD_ADDR_EXP 38
3165: PUSH
3166: LD_INT 0
3168: ST_TO_ADDR
// mpGameActive := false ;
3169: LD_ADDR_EXP 39
3173: PUSH
3174: LD_INT 0
3176: ST_TO_ADDR
// mpBlockRespThread := false ;
3177: LD_ADDR_EXP 47
3181: PUSH
3182: LD_INT 0
3184: ST_TO_ADDR
// for i := 1 to 32 do
3185: LD_ADDR_VAR 0 2
3189: PUSH
3190: DOUBLE
3191: LD_INT 1
3193: DEC
3194: ST_TO_ADDR
3195: LD_INT 32
3197: PUSH
3198: FOR_TO
3199: IFFALSE 3226
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3201: LD_ADDR_EXP 6
3205: PUSH
3206: LD_EXP 6
3210: PPUSH
3211: LD_VAR 0 2
3215: PPUSH
3216: LD_INT 0
3218: PPUSH
3219: CALL_OW 1
3223: ST_TO_ADDR
3224: GO 3198
3226: POP
3227: POP
// end ;
3228: LD_VAR 0 1
3232: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3233: LD_INT 0
3235: PPUSH
3236: PPUSH
3237: PPUSH
3238: PPUSH
3239: PPUSH
3240: PPUSH
3241: PPUSH
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3249: LD_ADDR_VAR 0 14
3253: PUSH
3254: LD_INT 1
3256: PUSH
3257: LD_INT 2
3259: PUSH
3260: LD_INT 3
3262: PUSH
3263: LD_INT 5
3265: PUSH
3266: LD_INT 6
3268: PUSH
3269: LD_INT 7
3271: PUSH
3272: LD_INT 8
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: ST_TO_ADDR
// for i in gameTypes do
3284: LD_ADDR_VAR 0 2
3288: PUSH
3289: LD_VAR 0 14
3293: PUSH
3294: FOR_IN
3295: IFFALSE 3304
// disable ( i ) ;
3297: LD_VAR 0 2
3301: DISABLE_MARKED
3302: GO 3294
3304: POP
3305: POP
// if Multiplayer then
3306: LD_OWVAR 4
3310: IFFALSE 3494
// begin mpGameType := mp_game_type ;
3312: LD_ADDR_EXP 3
3316: PUSH
3317: LD_OWVAR 6
3321: ST_TO_ADDR
// your_side := mp_player_side ;
3322: LD_ADDR_OWVAR 2
3326: PUSH
3327: LD_OWVAR 7
3331: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3332: LD_ADDR_EXP 7
3336: PUSH
3337: LD_OWVAR 17
3341: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3342: LD_ADDR_EXP 8
3346: PUSH
3347: LD_OWVAR 15
3351: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3352: LD_ADDR_EXP 9
3356: PUSH
3357: LD_OWVAR 16
3361: ST_TO_ADDR
// mpTeams := mp_teams ;
3362: LD_ADDR_EXP 10
3366: PUSH
3367: LD_OWVAR 12
3371: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3372: LD_ADDR_VAR 0 2
3376: PUSH
3377: DOUBLE
3378: LD_INT 1
3380: DEC
3381: ST_TO_ADDR
3382: LD_EXP 4
3386: PPUSH
3387: CALL 13570 0 1
3391: PUSH
3392: FOR_TO
3393: IFFALSE 3469
// begin setting := mpGameSettingsKeys [ i ] ;
3395: LD_ADDR_VAR 0 12
3399: PUSH
3400: LD_EXP 4
3404: PUSH
3405: LD_VAR 0 2
3409: ARRAY
3410: ST_TO_ADDR
// if setting then
3411: LD_VAR 0 12
3415: IFFALSE 3467
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3417: LD_ADDR_EXP 6
3421: PUSH
3422: LD_EXP 6
3426: PPUSH
3427: LD_VAR 0 2
3431: PPUSH
3432: LD_EXP 5
3436: PUSH
3437: LD_VAR 0 2
3441: ARRAY
3442: PUSH
3443: LD_VAR 0 2
3447: PUSH
3448: LD_INT 1
3450: MINUS
3451: PPUSH
3452: CALL_OW 426
3456: PUSH
3457: LD_INT 1
3459: PLUS
3460: ARRAY
3461: PPUSH
3462: CALL_OW 1
3466: ST_TO_ADDR
// end ;
3467: GO 3392
3469: POP
3470: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3471: LD_ADDR_EXP 11
3475: PUSH
3476: LD_EXP 8
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: EMPTY
3485: LIST
3486: DIFF
3487: PUSH
3488: LD_INT 1
3490: GREATER
3491: ST_TO_ADDR
// end else
3492: GO 3494
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3494: LD_EXP 3
3498: PPUSH
3499: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3503: LD_EXP 18
3507: PPUSH
3508: CALL 13570 0 1
3512: IFFALSE 3543
// begin for i in mpMarkedAreas do
3514: LD_ADDR_VAR 0 2
3518: PUSH
3519: LD_EXP 18
3523: PUSH
3524: FOR_IN
3525: IFFALSE 3541
// SetAreaMapShow ( i , 0 ) ;
3527: LD_VAR 0 2
3531: PPUSH
3532: LD_INT 0
3534: PPUSH
3535: CALL_OW 424
3539: GO 3524
3541: POP
3542: POP
// end ; for i := 1 to 8 do
3543: LD_ADDR_VAR 0 2
3547: PUSH
3548: DOUBLE
3549: LD_INT 1
3551: DEC
3552: ST_TO_ADDR
3553: LD_INT 8
3555: PUSH
3556: FOR_TO
3557: IFFALSE 5016
// begin if not mpSidePositions [ i ] then
3559: LD_EXP 7
3563: PUSH
3564: LD_VAR 0 2
3568: ARRAY
3569: NOT
3570: IFFALSE 3574
// continue ;
3572: GO 3556
// side := i ;
3574: LD_ADDR_VAR 0 7
3578: PUSH
3579: LD_VAR 0 2
3583: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3584: LD_ADDR_VAR 0 9
3588: PUSH
3589: LD_EXP 9
3593: PUSH
3594: LD_VAR 0 2
3598: ARRAY
3599: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3600: LD_ADDR_VAR 0 8
3604: PUSH
3605: LD_EXP 7
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3616: LD_EXP 12
3620: PPUSH
3621: CALL 13570 0 1
3625: IFFALSE 3702
// begin for j in mpOilDeposits [ pos ] do
3627: LD_ADDR_VAR 0 3
3631: PUSH
3632: LD_EXP 12
3636: PUSH
3637: LD_VAR 0 8
3641: ARRAY
3642: PUSH
3643: FOR_IN
3644: IFFALSE 3700
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3646: LD_VAR 0 3
3650: PUSH
3651: LD_INT 1
3653: ARRAY
3654: PPUSH
3655: LD_VAR 0 3
3659: PUSH
3660: LD_INT 2
3662: ARRAY
3663: PPUSH
3664: LD_INT 2
3666: PPUSH
3667: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3671: LD_VAR 0 3
3675: PUSH
3676: LD_INT 1
3678: ARRAY
3679: PPUSH
3680: LD_VAR 0 3
3684: PUSH
3685: LD_INT 2
3687: ARRAY
3688: PPUSH
3689: LD_VAR 0 7
3693: PPUSH
3694: CALL_OW 441
// end ;
3698: GO 3643
3700: POP
3701: POP
// end ; if Count ( mpSibDeposits ) then
3702: LD_EXP 13
3706: PPUSH
3707: CALL 13570 0 1
3711: IFFALSE 3788
// begin for j in mpSibDeposits [ pos ] do
3713: LD_ADDR_VAR 0 3
3717: PUSH
3718: LD_EXP 13
3722: PUSH
3723: LD_VAR 0 8
3727: ARRAY
3728: PUSH
3729: FOR_IN
3730: IFFALSE 3786
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3732: LD_VAR 0 3
3736: PUSH
3737: LD_INT 1
3739: ARRAY
3740: PPUSH
3741: LD_VAR 0 3
3745: PUSH
3746: LD_INT 2
3748: ARRAY
3749: PPUSH
3750: LD_INT 3
3752: PPUSH
3753: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3757: LD_VAR 0 3
3761: PUSH
3762: LD_INT 1
3764: ARRAY
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 2
3773: ARRAY
3774: PPUSH
3775: LD_VAR 0 7
3779: PPUSH
3780: CALL_OW 441
// end ;
3784: GO 3729
3786: POP
3787: POP
// end ; InitBc ;
3788: CALL_OW 21
// InitUc ;
3792: CALL_OW 18
// uc_side := side ;
3796: LD_ADDR_OWVAR 20
3800: PUSH
3801: LD_VAR 0 7
3805: ST_TO_ADDR
// uc_nation := nation ;
3806: LD_ADDR_OWVAR 21
3810: PUSH
3811: LD_VAR 0 9
3815: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3816: LD_EXP 22
3820: PUSH
3821: LD_INT 1
3823: NEG
3824: GREATER
3825: IFFALSE 3984
// begin x := mpStartPos [ pos ] [ 1 ] ;
3827: LD_ADDR_VAR 0 5
3831: PUSH
3832: LD_EXP 21
3836: PUSH
3837: LD_VAR 0 8
3841: ARRAY
3842: PUSH
3843: LD_INT 1
3845: ARRAY
3846: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3847: LD_ADDR_VAR 0 6
3851: PUSH
3852: LD_EXP 21
3856: PUSH
3857: LD_VAR 0 8
3861: ARRAY
3862: PUSH
3863: LD_INT 2
3865: ARRAY
3866: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_VAR 0 6
3876: PPUSH
3877: LD_INT 12
3879: PPUSH
3880: LD_INT 2
3882: PPUSH
3883: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3887: LD_ADDR_EXP 23
3891: PUSH
3892: LD_EXP 23
3896: PPUSH
3897: LD_VAR 0 7
3901: PPUSH
3902: LD_VAR 0 7
3906: PPUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_VAR 0 6
3916: PPUSH
3917: LD_INT 1
3919: PUSH
3920: LD_INT 100
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_INT 2
3929: PUSH
3930: LD_INT 70
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_INT 3
3939: PUSH
3940: LD_INT 40
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: PUSH
3947: LD_INT 10
3949: PUSH
3950: LD_INT 25
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 20
3959: PUSH
3960: LD_INT 100
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: PPUSH
3974: CALL_OW 418
3978: PPUSH
3979: CALL_OW 1
3983: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3984: LD_EXP 14
3988: PPUSH
3989: CALL 13570 0 1
3993: IFFALSE 4192
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
3995: LD_EXP 3
3999: PUSH
4000: LD_INT 2
4002: PUSH
4003: LD_INT 8
4005: PUSH
4006: LD_INT 6
4008: PUSH
4009: LD_INT 7
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: IN
4018: IFFALSE 4038
// begin bc_level := 10 ;
4020: LD_ADDR_OWVAR 43
4024: PUSH
4025: LD_INT 10
4027: ST_TO_ADDR
// bc_type := b_warehouse ;
4028: LD_ADDR_OWVAR 42
4032: PUSH
4033: LD_INT 1
4035: ST_TO_ADDR
// end else
4036: GO 4054
// begin bc_level := 0 ;
4038: LD_ADDR_OWVAR 43
4042: PUSH
4043: LD_INT 0
4045: ST_TO_ADDR
// bc_type := b_depot ;
4046: LD_ADDR_OWVAR 42
4050: PUSH
4051: LD_INT 0
4053: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4054: LD_ADDR_VAR 0 4
4058: PUSH
4059: LD_EXP 14
4063: PUSH
4064: LD_VAR 0 8
4068: ARRAY
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PPUSH
4074: LD_EXP 14
4078: PUSH
4079: LD_VAR 0 8
4083: ARRAY
4084: PUSH
4085: LD_INT 2
4087: ARRAY
4088: PPUSH
4089: LD_EXP 14
4093: PUSH
4094: LD_VAR 0 8
4098: ARRAY
4099: PUSH
4100: LD_INT 3
4102: ARRAY
4103: PPUSH
4104: CALL_OW 47
4108: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4109: LD_VAR 0 4
4113: PPUSH
4114: LD_STRING @
4116: PUSH
4117: LD_VAR 0 7
4121: STR
4122: PPUSH
4123: CALL_OW 500
// if Count ( mpStartingResources ) then
4127: LD_EXP 15
4131: PPUSH
4132: CALL 13570 0 1
4136: IFFALSE 4190
// begin for j := 1 to mpStartingResources do
4138: LD_ADDR_VAR 0 3
4142: PUSH
4143: DOUBLE
4144: LD_INT 1
4146: DEC
4147: ST_TO_ADDR
4148: LD_EXP 15
4152: PUSH
4153: FOR_TO
4154: IFFALSE 4188
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4156: LD_VAR 0 4
4160: PPUSH
4161: CALL_OW 274
4165: PPUSH
4166: LD_VAR 0 3
4170: PPUSH
4171: LD_EXP 15
4175: PUSH
4176: LD_VAR 0 3
4180: ARRAY
4181: PPUSH
4182: CALL_OW 277
4186: GO 4153
4188: POP
4189: POP
// end ; end else
4190: GO 4399
// if Count ( mpStartingResources ) then
4192: LD_EXP 15
4196: PPUSH
4197: CALL 13570 0 1
4201: IFFALSE 4399
// begin x := mpStartPos [ pos ] [ 1 ] ;
4203: LD_ADDR_VAR 0 5
4207: PUSH
4208: LD_EXP 21
4212: PUSH
4213: LD_VAR 0 8
4217: ARRAY
4218: PUSH
4219: LD_INT 1
4221: ARRAY
4222: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4223: LD_ADDR_VAR 0 6
4227: PUSH
4228: LD_EXP 21
4232: PUSH
4233: LD_VAR 0 8
4237: ARRAY
4238: PUSH
4239: LD_INT 2
4241: ARRAY
4242: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4243: LD_ADDR_VAR 0 3
4247: PUSH
4248: DOUBLE
4249: LD_INT 1
4251: DEC
4252: ST_TO_ADDR
4253: LD_EXP 15
4257: PUSH
4258: FOR_TO
4259: IFFALSE 4397
// begin resources := mpStartingResources [ j ] ;
4261: LD_ADDR_VAR 0 13
4265: PUSH
4266: LD_EXP 15
4270: PUSH
4271: LD_VAR 0 3
4275: ARRAY
4276: ST_TO_ADDR
// if resources = 0 then
4277: LD_VAR 0 13
4281: PUSH
4282: LD_INT 0
4284: EQUAL
4285: IFFALSE 4289
// continue ;
4287: GO 4258
// repeat if resources >= 50 then
4289: LD_VAR 0 13
4293: PUSH
4294: LD_INT 50
4296: GREATEREQUAL
4297: IFFALSE 4343
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4299: LD_VAR 0 3
4303: PPUSH
4304: LD_INT 5
4306: PPUSH
4307: LD_VAR 0 5
4311: PPUSH
4312: LD_VAR 0 6
4316: PPUSH
4317: LD_INT 6
4319: PPUSH
4320: LD_INT 0
4322: PPUSH
4323: CALL_OW 60
// resources := resources - 50 ;
4327: LD_ADDR_VAR 0 13
4331: PUSH
4332: LD_VAR 0 13
4336: PUSH
4337: LD_INT 50
4339: MINUS
4340: ST_TO_ADDR
// end else
4341: GO 4385
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4343: LD_VAR 0 3
4347: PPUSH
4348: LD_VAR 0 13
4352: PUSH
4353: LD_INT 10
4355: DIV
4356: PPUSH
4357: LD_VAR 0 5
4361: PPUSH
4362: LD_VAR 0 6
4366: PPUSH
4367: LD_INT 6
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 60
// resources := 0 ;
4377: LD_ADDR_VAR 0 13
4381: PUSH
4382: LD_INT 0
4384: ST_TO_ADDR
// end ; until resources <= 0 ;
4385: LD_VAR 0 13
4389: PUSH
4390: LD_INT 0
4392: LESSEQUAL
4393: IFFALSE 4289
// end ;
4395: GO 4258
4397: POP
4398: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
4399: LD_EXP 17
4403: PPUSH
4404: CALL 13570 0 1
4408: IFFALSE 4428
4410: PUSH
4411: LD_EXP 3
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 8
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: IN
4426: NOT
4427: AND
4428: IFFALSE 4506
// begin for j in mpBuildings [ pos ] do
4430: LD_ADDR_VAR 0 3
4434: PUSH
4435: LD_EXP 17
4439: PUSH
4440: LD_VAR 0 8
4444: ARRAY
4445: PUSH
4446: FOR_IN
4447: IFFALSE 4504
// begin bc_level := 0 ;
4449: LD_ADDR_OWVAR 43
4453: PUSH
4454: LD_INT 0
4456: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4457: LD_ADDR_OWVAR 42
4461: PUSH
4462: LD_VAR 0 3
4466: PUSH
4467: LD_INT 1
4469: ARRAY
4470: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4471: LD_VAR 0 3
4475: PUSH
4476: LD_INT 2
4478: ARRAY
4479: PPUSH
4480: LD_VAR 0 3
4484: PUSH
4485: LD_INT 3
4487: ARRAY
4488: PPUSH
4489: LD_VAR 0 3
4493: PUSH
4494: LD_INT 4
4496: ARRAY
4497: PPUSH
4498: CALL_OW 47
// end ;
4502: GO 4446
4504: POP
4505: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4506: LD_EXP 26
4510: IFFALSE 4530
4512: PUSH
4513: LD_INT 20
4515: PPUSH
4516: LD_VAR 0 7
4520: PPUSH
4521: CALL_OW 321
4525: PUSH
4526: LD_INT 1
4528: EQUAL
4529: AND
4530: IFFALSE 4547
// SetTech ( tech_SibDet , side , state_researched ) ;
4532: LD_INT 20
4534: PPUSH
4535: LD_VAR 0 7
4539: PPUSH
4540: LD_INT 2
4542: PPUSH
4543: CALL_OW 322
// if not mpArtifacts then
4547: LD_EXP 45
4551: NOT
4552: IFFALSE 4569
// SetTech ( tech_artifact , side , state_disabled ) ;
4554: LD_INT 24
4556: PPUSH
4557: LD_VAR 0 7
4561: PPUSH
4562: LD_INT 0
4564: PPUSH
4565: CALL_OW 322
// if mpSibBomb = 1 then
4569: LD_EXP 28
4573: PUSH
4574: LD_INT 1
4576: EQUAL
4577: IFFALSE 4596
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4579: LD_INT 25
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL_OW 322
// end else
4594: GO 4611
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4596: LD_INT 25
4598: PPUSH
4599: LD_VAR 0 7
4603: PPUSH
4604: LD_INT 0
4606: PPUSH
4607: CALL_OW 322
// end ; if mpVehicles then
4611: LD_EXP 36
4615: IFFALSE 4714
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_VAR 0 7
4626: PPUSH
4627: LD_VAR 0 9
4631: PPUSH
4632: LD_EXP 36
4636: PPUSH
4637: CALL 5973 0 3
4641: PUSH
4642: FOR_IN
4643: IFFALSE 4712
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4645: LD_VAR 0 3
4649: PPUSH
4650: LD_INT 0
4652: PPUSH
4653: LD_INT 5
4655: PPUSH
4656: CALL_OW 12
4660: PPUSH
4661: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4665: LD_VAR 0 3
4669: PPUSH
4670: LD_EXP 21
4674: PUSH
4675: LD_VAR 0 8
4679: ARRAY
4680: PUSH
4681: LD_INT 1
4683: ARRAY
4684: PPUSH
4685: LD_EXP 21
4689: PUSH
4690: LD_VAR 0 8
4694: ARRAY
4695: PUSH
4696: LD_INT 2
4698: ARRAY
4699: PPUSH
4700: LD_INT 12
4702: PPUSH
4703: LD_INT 0
4705: PPUSH
4706: CALL_OW 50
// end ;
4710: GO 4642
4712: POP
4713: POP
// end ; uc_nation := nation ;
4714: LD_ADDR_OWVAR 21
4718: PUSH
4719: LD_VAR 0 9
4723: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4724: LD_EXP 3
4728: PUSH
4729: LD_INT 6
4731: PUSH
4732: LD_INT 7
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: IN
4739: IFFALSE 4764
4741: PUSH
4742: LD_EXP 7
4746: PUSH
4747: LD_VAR 0 2
4751: ARRAY
4752: PUSH
4753: LD_INT 1
4755: PUSH
4756: LD_INT 2
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: IN
4763: AND
4764: IFFALSE 4812
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4766: LD_ADDR_VAR 0 11
4770: PUSH
4771: LD_VAR 0 7
4775: PPUSH
4776: LD_VAR 0 9
4780: PPUSH
4781: LD_EXP 24
4785: PUSH
4786: LD_EXP 24
4790: PUSH
4791: LD_INT 2
4793: DIV
4794: PLUS
4795: PPUSH
4796: LD_EXP 25
4800: PUSH
4801: LD_INT 1
4803: PLUS
4804: PPUSH
4805: CALL 5428 0 4
4809: ST_TO_ADDR
4810: GO 4842
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4812: LD_ADDR_VAR 0 11
4816: PUSH
4817: LD_VAR 0 7
4821: PPUSH
4822: LD_VAR 0 9
4826: PPUSH
4827: LD_EXP 24
4831: PPUSH
4832: LD_EXP 25
4836: PPUSH
4837: CALL 5428 0 4
4841: ST_TO_ADDR
// for j in team do
4842: LD_ADDR_VAR 0 3
4846: PUSH
4847: LD_VAR 0 11
4851: PUSH
4852: FOR_IN
4853: IFFALSE 4902
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4855: LD_VAR 0 3
4859: PPUSH
4860: LD_EXP 21
4864: PUSH
4865: LD_VAR 0 8
4869: ARRAY
4870: PUSH
4871: LD_INT 1
4873: ARRAY
4874: PPUSH
4875: LD_EXP 21
4879: PUSH
4880: LD_VAR 0 8
4884: ARRAY
4885: PUSH
4886: LD_INT 2
4888: ARRAY
4889: PPUSH
4890: LD_INT 12
4892: PPUSH
4893: LD_INT 0
4895: PPUSH
4896: CALL_OW 50
4900: GO 4852
4902: POP
4903: POP
// if mpApemans then
4904: LD_EXP 30
4908: IFFALSE 5014
// begin for j := 1 to mpApemans do
4910: LD_ADDR_VAR 0 3
4914: PUSH
4915: DOUBLE
4916: LD_INT 1
4918: DEC
4919: ST_TO_ADDR
4920: LD_EXP 30
4924: PUSH
4925: FOR_TO
4926: IFFALSE 5012
// begin PrepareApeman ( - 5 ) ;
4928: LD_INT 5
4930: NEG
4931: PPUSH
4932: CALL 45673 0 1
// ape := CreateHuman ;
4936: LD_ADDR_VAR 0 10
4940: PUSH
4941: CALL_OW 44
4945: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4946: LD_ADDR_EXP 32
4950: PUSH
4951: LD_EXP 32
4955: PPUSH
4956: LD_VAR 0 8
4960: PPUSH
4961: LD_EXP 32
4965: PUSH
4966: LD_VAR 0 8
4970: ARRAY
4971: PPUSH
4972: LD_VAR 0 10
4976: PPUSH
4977: CALL 49546 0 2
4981: PPUSH
4982: CALL_OW 1
4986: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4987: LD_VAR 0 10
4991: PPUSH
4992: LD_EXP 31
4996: PUSH
4997: LD_VAR 0 8
5001: ARRAY
5002: PPUSH
5003: LD_INT 0
5005: PPUSH
5006: CALL_OW 49
// end ;
5010: GO 4925
5012: POP
5013: POP
// end ; end ;
5014: GO 3556
5016: POP
5017: POP
// if not mpTeamGame then
5018: LD_EXP 11
5022: NOT
5023: IFFALSE 5121
// begin for i := 1 to 8 do
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: DOUBLE
5031: LD_INT 1
5033: DEC
5034: ST_TO_ADDR
5035: LD_INT 8
5037: PUSH
5038: FOR_TO
5039: IFFALSE 5117
// for j := 1 to 8 do
5041: LD_ADDR_VAR 0 3
5045: PUSH
5046: DOUBLE
5047: LD_INT 1
5049: DEC
5050: ST_TO_ADDR
5051: LD_INT 8
5053: PUSH
5054: FOR_TO
5055: IFFALSE 5113
// if i <> j then
5057: LD_VAR 0 2
5061: PUSH
5062: LD_VAR 0 3
5066: NONEQUAL
5067: IFFALSE 5091
// SetAttitude ( i , j , att_neutral , true ) else
5069: LD_VAR 0 2
5073: PPUSH
5074: LD_VAR 0 3
5078: PPUSH
5079: LD_INT 0
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: CALL_OW 80
5089: GO 5111
// SetAttitude ( i , j , att_friend , true ) ;
5091: LD_VAR 0 2
5095: PPUSH
5096: LD_VAR 0 3
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 80
5111: GO 5054
5113: POP
5114: POP
5115: GO 5038
5117: POP
5118: POP
// end else
5119: GO 5296
// begin if mpSharedVision then
5121: LD_EXP 16
5125: IFFALSE 5190
// begin for i in mpTeams do
5127: LD_ADDR_VAR 0 2
5131: PUSH
5132: LD_EXP 10
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5188
// for j := 2 to i do
5140: LD_ADDR_VAR 0 3
5144: PUSH
5145: DOUBLE
5146: LD_INT 2
5148: DEC
5149: ST_TO_ADDR
5150: LD_VAR 0 2
5154: PUSH
5155: FOR_TO
5156: IFFALSE 5184
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5158: LD_VAR 0 2
5162: PUSH
5163: LD_VAR 0 3
5167: ARRAY
5168: PPUSH
5169: LD_VAR 0 2
5173: PUSH
5174: LD_INT 1
5176: ARRAY
5177: PPUSH
5178: CALL_OW 343
5182: GO 5155
5184: POP
5185: POP
5186: GO 5137
5188: POP
5189: POP
// end ; for i := 1 to 8 do
5190: LD_ADDR_VAR 0 2
5194: PUSH
5195: DOUBLE
5196: LD_INT 1
5198: DEC
5199: ST_TO_ADDR
5200: LD_INT 8
5202: PUSH
5203: FOR_TO
5204: IFFALSE 5294
// for j := 1 to 8 do
5206: LD_ADDR_VAR 0 3
5210: PUSH
5211: DOUBLE
5212: LD_INT 1
5214: DEC
5215: ST_TO_ADDR
5216: LD_INT 8
5218: PUSH
5219: FOR_TO
5220: IFFALSE 5290
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5222: LD_EXP 8
5226: PUSH
5227: LD_VAR 0 2
5231: ARRAY
5232: PUSH
5233: LD_EXP 8
5237: PUSH
5238: LD_VAR 0 3
5242: ARRAY
5243: EQUAL
5244: IFFALSE 5268
// SetAttitude ( i , j , att_friend , true ) else
5246: LD_VAR 0 2
5250: PPUSH
5251: LD_VAR 0 3
5255: PPUSH
5256: LD_INT 1
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: CALL_OW 80
5266: GO 5288
// SetAttitude ( i , j , att_enemy , true ) ;
5268: LD_VAR 0 2
5272: PPUSH
5273: LD_VAR 0 3
5277: PPUSH
5278: LD_INT 2
5280: PPUSH
5281: LD_INT 1
5283: PPUSH
5284: CALL_OW 80
5288: GO 5219
5290: POP
5291: POP
5292: GO 5203
5294: POP
5295: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5296: LD_ADDR_OWVAR 71
5300: PUSH
5301: LD_EXP 9
5305: PUSH
5306: LD_OWVAR 2
5310: ARRAY
5311: ST_TO_ADDR
// if IAmSpec then
5312: CALL_OW 531
5316: IFFALSE 5357
// begin FogOff ( true ) ;
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5325: LD_EXP 29
5329: PUSH
5330: LD_INT 1
5332: ARRAY
5333: PUSH
5334: LD_INT 2
5336: DIV
5337: PPUSH
5338: LD_EXP 29
5342: PUSH
5343: LD_INT 2
5345: ARRAY
5346: PUSH
5347: LD_INT 2
5349: DIV
5350: PPUSH
5351: CALL_OW 86
// end else
5355: GO 5403
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5357: LD_EXP 21
5361: PUSH
5362: LD_EXP 7
5366: PUSH
5367: LD_OWVAR 2
5371: ARRAY
5372: ARRAY
5373: PUSH
5374: LD_INT 1
5376: ARRAY
5377: PPUSH
5378: LD_EXP 21
5382: PUSH
5383: LD_EXP 7
5387: PUSH
5388: LD_OWVAR 2
5392: ARRAY
5393: ARRAY
5394: PUSH
5395: LD_INT 2
5397: ARRAY
5398: PPUSH
5399: CALL_OW 86
// end ; BeginBuildUp ;
5403: CALL 6506 0 0
// enable ( mpActive ) ;
5407: LD_INT 100
5409: ENABLE_MARKED
// enable ( mpGameType ) ;
5410: LD_EXP 3
5414: ENABLE_MARKED
// mpGameActive := true ;
5415: LD_ADDR_EXP 39
5419: PUSH
5420: LD_INT 1
5422: ST_TO_ADDR
// end ;
5423: LD_VAR 0 1
5427: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5428: LD_INT 0
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
5434: PPUSH
// result := [ ] ;
5435: LD_ADDR_VAR 0 5
5439: PUSH
5440: EMPTY
5441: ST_TO_ADDR
// class := class_soldier ;
5442: LD_ADDR_VAR 0 8
5446: PUSH
5447: LD_INT 1
5449: ST_TO_ADDR
// uc_side := side ;
5450: LD_ADDR_OWVAR 20
5454: PUSH
5455: LD_VAR 0 1
5459: ST_TO_ADDR
// uc_nation := nation ;
5460: LD_ADDR_OWVAR 21
5464: PUSH
5465: LD_VAR 0 2
5469: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5470: LD_ADDR_OWVAR 26
5474: PUSH
5475: LD_OWVAR 19
5479: PUSH
5480: LD_VAR 0 1
5484: ARRAY
5485: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5486: LD_INT 1
5488: PPUSH
5489: LD_INT 2
5491: PPUSH
5492: CALL_OW 12
5496: PPUSH
5497: LD_VAR 0 8
5501: PPUSH
5502: LD_VAR 0 4
5506: PUSH
5507: LD_INT 2
5509: PLUS
5510: PPUSH
5511: CALL_OW 380
// hc_importance := 105 ;
5515: LD_ADDR_OWVAR 32
5519: PUSH
5520: LD_INT 105
5522: ST_TO_ADDR
// if Multiplayer then
5523: LD_OWVAR 4
5527: IFFALSE 5567
// begin hc_gallery := MULTIAVATARS ;
5529: LD_ADDR_OWVAR 33
5533: PUSH
5534: LD_STRING MULTIAVATARS
5536: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5537: LD_ADDR_OWVAR 34
5541: PUSH
5542: LD_VAR 0 1
5546: PPUSH
5547: CALL_OW 525
5551: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5552: LD_ADDR_OWVAR 27
5556: PUSH
5557: LD_VAR 0 1
5561: PPUSH
5562: CALL_OW 526
5566: ST_TO_ADDR
// end ; commander := CreateHuman ;
5567: LD_ADDR_VAR 0 9
5571: PUSH
5572: CALL_OW 44
5576: ST_TO_ADDR
// result := Join ( result , commander ) ;
5577: LD_ADDR_VAR 0 5
5581: PUSH
5582: LD_VAR 0 5
5586: PPUSH
5587: LD_VAR 0 9
5591: PPUSH
5592: CALL 49546 0 2
5596: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5597: LD_ADDR_EXP 41
5601: PUSH
5602: LD_EXP 41
5606: PPUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_VAR 0 9
5616: PPUSH
5617: CALL_OW 1
5621: ST_TO_ADDR
// if mpTeamPreset then
5622: LD_LOC 1
5626: IFFALSE 5722
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5628: LD_LOC 1
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 5
5641: PUSH
5642: LD_VAR 0 5
5646: ARRAY
5647: PPUSH
5648: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5652: LD_VAR 0 5
5656: PUSH
5657: LD_VAR 0 5
5661: ARRAY
5662: PPUSH
5663: LD_INT 1
5665: PPUSH
5666: LD_LOC 1
5670: PUSH
5671: LD_INT 1
5673: ARRAY
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: CALL_OW 260
5682: PPUSH
5683: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5687: LD_VAR 0 5
5691: PUSH
5692: LD_VAR 0 5
5696: ARRAY
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: LD_LOC 1
5705: PUSH
5706: LD_INT 1
5708: ARRAY
5709: PPUSH
5710: LD_INT 2
5712: PPUSH
5713: CALL_OW 260
5717: PPUSH
5718: CALL_OW 239
// end ; InitHc_All ( ) ;
5722: CALL_OW 584
// class := 2 ;
5726: LD_ADDR_VAR 0 8
5730: PUSH
5731: LD_INT 2
5733: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5734: LD_ADDR_VAR 0 6
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_VAR 0 3
5748: PUSH
5749: LD_INT 1
5751: MINUS
5752: PUSH
5753: FOR_TO
5754: IFFALSE 5949
// begin PrepareHuman ( false , class , skill ) ;
5756: LD_INT 0
5758: PPUSH
5759: LD_VAR 0 8
5763: PPUSH
5764: LD_VAR 0 4
5768: PPUSH
5769: CALL_OW 380
// un := CreateHuman ;
5773: LD_ADDR_VAR 0 7
5777: PUSH
5778: CALL_OW 44
5782: ST_TO_ADDR
// result := Join ( result , un ) ;
5783: LD_ADDR_VAR 0 5
5787: PUSH
5788: LD_VAR 0 5
5792: PPUSH
5793: LD_VAR 0 7
5797: PPUSH
5798: CALL 49546 0 2
5802: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5803: LD_LOC 1
5807: PPUSH
5808: CALL 13570 0 1
5812: PUSH
5813: LD_VAR 0 3
5817: GREATEREQUAL
5818: IFFALSE 5914
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5820: LD_LOC 1
5824: PUSH
5825: LD_VAR 0 6
5829: PUSH
5830: LD_INT 1
5832: PLUS
5833: ARRAY
5834: PPUSH
5835: LD_VAR 0 7
5839: PPUSH
5840: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5844: LD_VAR 0 7
5848: PPUSH
5849: LD_INT 1
5851: PPUSH
5852: LD_LOC 1
5856: PUSH
5857: LD_VAR 0 6
5861: PUSH
5862: LD_INT 1
5864: PLUS
5865: ARRAY
5866: PPUSH
5867: LD_INT 1
5869: PPUSH
5870: CALL_OW 260
5874: PPUSH
5875: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5879: LD_VAR 0 7
5883: PPUSH
5884: LD_INT 2
5886: PPUSH
5887: LD_LOC 1
5891: PUSH
5892: LD_VAR 0 6
5896: PUSH
5897: LD_INT 1
5899: PLUS
5900: ARRAY
5901: PPUSH
5902: LD_INT 2
5904: PPUSH
5905: CALL_OW 260
5909: PPUSH
5910: CALL_OW 239
// end ; class := Inc ( class ) ;
5914: LD_ADDR_VAR 0 8
5918: PUSH
5919: LD_VAR 0 8
5923: PPUSH
5924: CALL 50919 0 1
5928: ST_TO_ADDR
// if class = 5 then
5929: LD_VAR 0 8
5933: PUSH
5934: LD_INT 5
5936: EQUAL
5937: IFFALSE 5947
// class := 1 ;
5939: LD_ADDR_VAR 0 8
5943: PUSH
5944: LD_INT 1
5946: ST_TO_ADDR
// end ;
5947: GO 5753
5949: POP
5950: POP
// if not mpTeamPreset then
5951: LD_LOC 1
5955: NOT
5956: IFFALSE 5968
// mpTeamPreset := result ;
5958: LD_ADDR_LOC 1
5962: PUSH
5963: LD_VAR 0 5
5967: ST_TO_ADDR
// end ;
5968: LD_VAR 0 5
5972: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
// result := [ ] ;
5977: LD_ADDR_VAR 0 4
5981: PUSH
5982: EMPTY
5983: ST_TO_ADDR
// if not vehicles then
5984: LD_VAR 0 3
5988: NOT
5989: IFFALSE 5993
// exit ;
5991: GO 6207
// for i := 1 to vehicles [ nation ] do
5993: LD_ADDR_VAR 0 5
5997: PUSH
5998: DOUBLE
5999: LD_INT 1
6001: DEC
6002: ST_TO_ADDR
6003: LD_VAR 0 3
6007: PUSH
6008: LD_VAR 0 2
6012: ARRAY
6013: PUSH
6014: FOR_TO
6015: IFFALSE 6205
// begin uc_side := side ;
6017: LD_ADDR_OWVAR 20
6021: PUSH
6022: LD_VAR 0 1
6026: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6027: LD_VAR 0 3
6031: PUSH
6032: LD_VAR 0 2
6036: ARRAY
6037: PUSH
6038: LD_VAR 0 5
6042: ARRAY
6043: PPUSH
6044: CALL 13570 0 1
6048: PUSH
6049: LD_INT 4
6051: GREATER
6052: IFFALSE 6082
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6054: LD_ADDR_OWVAR 21
6058: PUSH
6059: LD_VAR 0 3
6063: PUSH
6064: LD_VAR 0 2
6068: ARRAY
6069: PUSH
6070: LD_VAR 0 5
6074: ARRAY
6075: PUSH
6076: LD_INT 5
6078: ARRAY
6079: ST_TO_ADDR
6080: GO 6092
// uc_nation := nation ;
6082: LD_ADDR_OWVAR 21
6086: PUSH
6087: LD_VAR 0 2
6091: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6092: LD_VAR 0 3
6096: PUSH
6097: LD_VAR 0 2
6101: ARRAY
6102: PUSH
6103: LD_VAR 0 5
6107: ARRAY
6108: PUSH
6109: LD_INT 1
6111: ARRAY
6112: PPUSH
6113: LD_VAR 0 3
6117: PUSH
6118: LD_VAR 0 2
6122: ARRAY
6123: PUSH
6124: LD_VAR 0 5
6128: ARRAY
6129: PUSH
6130: LD_INT 2
6132: ARRAY
6133: PPUSH
6134: LD_VAR 0 3
6138: PUSH
6139: LD_VAR 0 2
6143: ARRAY
6144: PUSH
6145: LD_VAR 0 5
6149: ARRAY
6150: PUSH
6151: LD_INT 3
6153: ARRAY
6154: PPUSH
6155: LD_VAR 0 3
6159: PUSH
6160: LD_VAR 0 2
6164: ARRAY
6165: PUSH
6166: LD_VAR 0 5
6170: ARRAY
6171: PUSH
6172: LD_INT 4
6174: ARRAY
6175: PPUSH
6176: LD_INT 80
6178: PPUSH
6179: CALL 16366 0 5
// result := Join ( result , CreateVehicle ) ;
6183: LD_ADDR_VAR 0 4
6187: PUSH
6188: LD_VAR 0 4
6192: PPUSH
6193: CALL_OW 45
6197: PPUSH
6198: CALL 49546 0 2
6202: ST_TO_ADDR
// end ;
6203: GO 6014
6205: POP
6206: POP
// end ;
6207: LD_VAR 0 4
6211: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6212: LD_INT 0
6214: PPUSH
6215: PPUSH
// for i in mpBattleFlags do
6216: LD_ADDR_VAR 0 3
6220: PUSH
6221: LD_EXP 23
6225: PUSH
6226: FOR_IN
6227: IFFALSE 6304
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6229: LD_VAR 0 3
6233: PPUSH
6234: LD_INT 1
6236: PUSH
6237: LD_VAR 0 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 2
6248: PUSH
6249: LD_VAR 0 1
6253: PUSH
6254: LD_REAL  7.00000000000000E-0001
6257: MUL
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 3
6265: PUSH
6266: LD_VAR 0 1
6270: PUSH
6271: LD_REAL  4.00000000000000E-0001
6274: MUL
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 20
6282: PUSH
6283: LD_VAR 0 1
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: PPUSH
6298: CALL_OW 423
6302: GO 6226
6304: POP
6305: POP
// end ;
6306: LD_VAR 0 2
6310: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6311: LD_INT 100
6313: IFFALSE 6408
6315: GO 6317
6317: DISABLE
6318: LD_INT 0
6320: PPUSH
6321: PPUSH
// begin if mpBattleFlag <= 0 then
6322: LD_EXP 22
6326: PUSH
6327: LD_INT 0
6329: LESSEQUAL
6330: IFFALSE 6334
// exit ;
6332: GO 6408
// strength := 100 ;
6334: LD_ADDR_VAR 0 2
6338: PUSH
6339: LD_INT 100
6341: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6342: LD_EXP 22
6346: PPUSH
6347: CALL_OW 67
// strength := Dec ( strength ) ;
6351: LD_ADDR_VAR 0 2
6355: PUSH
6356: LD_VAR 0 2
6360: PPUSH
6361: CALL 50941 0 1
6365: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6366: LD_VAR 0 2
6370: PPUSH
6371: CALL 6212 0 1
// until not strength ;
6375: LD_VAR 0 2
6379: NOT
6380: IFFALSE 6342
// for i in mpBattleFlags do
6382: LD_ADDR_VAR 0 1
6386: PUSH
6387: LD_EXP 23
6391: PUSH
6392: FOR_IN
6393: IFFALSE 6406
// KillBattleFlag ( i ) ;
6395: LD_VAR 0 1
6399: PPUSH
6400: CALL_OW 419
6404: GO 6392
6406: POP
6407: POP
// end ;
6408: PPOPN 2
6410: END
// every 0 0$1 marked mpActive do var side , tmp ;
6411: GO 6413
6413: DISABLE
6414: LD_INT 0
6416: PPUSH
6417: PPUSH
// begin if mpSibBomb <= 1 then
6418: LD_EXP 28
6422: PUSH
6423: LD_INT 1
6425: LESSEQUAL
6426: IFFALSE 6430
// exit ;
6428: GO 6503
// tmp := mpSibBomb ;
6430: LD_ADDR_VAR 0 2
6434: PUSH
6435: LD_EXP 28
6439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6440: LD_INT 35
6442: PPUSH
6443: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6447: LD_ADDR_VAR 0 2
6451: PUSH
6452: LD_VAR 0 2
6456: PUSH
6457: LD_INT 35
6459: MINUS
6460: ST_TO_ADDR
// until not tmp ;
6461: LD_VAR 0 2
6465: NOT
6466: IFFALSE 6440
// for side := 1 to 8 do
6468: LD_ADDR_VAR 0 1
6472: PUSH
6473: DOUBLE
6474: LD_INT 1
6476: DEC
6477: ST_TO_ADDR
6478: LD_INT 8
6480: PUSH
6481: FOR_TO
6482: IFFALSE 6501
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6484: LD_INT 25
6486: PPUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: LD_INT 1
6494: PPUSH
6495: CALL_OW 322
6499: GO 6481
6501: POP
6502: POP
// end ;
6503: PPOPN 2
6505: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6506: LD_INT 0
6508: PPUSH
6509: PPUSH
6510: PPUSH
// mpBuildUpTimeDelay := 0 ;
6511: LD_ADDR_EXP 48
6515: PUSH
6516: LD_INT 0
6518: ST_TO_ADDR
// if not mpBuildUpTime then
6519: LD_EXP 20
6523: NOT
6524: IFFALSE 6528
// exit ;
6526: GO 6717
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6528: LD_ADDR_EXP 48
6532: PUSH
6533: LD_INT 8400
6535: PUSH
6536: LD_INT 2100
6538: PUSH
6539: LD_EXP 20
6543: MUL
6544: PLUS
6545: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6546: LD_ADDR_EXP 49
6550: PUSH
6551: LD_INT 1
6553: ST_TO_ADDR
// for i := 1 to 8 do
6554: LD_ADDR_VAR 0 2
6558: PUSH
6559: DOUBLE
6560: LD_INT 1
6562: DEC
6563: ST_TO_ADDR
6564: LD_INT 8
6566: PUSH
6567: FOR_TO
6568: IFFALSE 6715
// if mpSidePositions [ i ] then
6570: LD_EXP 7
6574: PUSH
6575: LD_VAR 0 2
6579: ARRAY
6580: IFFALSE 6713
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6582: LD_EXP 19
6586: PUSH
6587: LD_EXP 7
6591: PUSH
6592: LD_VAR 0 2
6596: ARRAY
6597: ARRAY
6598: PPUSH
6599: LD_INT 5
6601: PPUSH
6602: CALL_OW 424
// for j := 1 to 8 do
6606: LD_ADDR_VAR 0 3
6610: PUSH
6611: DOUBLE
6612: LD_INT 1
6614: DEC
6615: ST_TO_ADDR
6616: LD_INT 8
6618: PUSH
6619: FOR_TO
6620: IFFALSE 6711
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6622: LD_EXP 7
6626: PUSH
6627: LD_VAR 0 3
6631: ARRAY
6632: IFFALSE 6681
6634: PUSH
6635: LD_EXP 8
6639: PUSH
6640: LD_VAR 0 2
6644: ARRAY
6645: PUSH
6646: LD_EXP 8
6650: PUSH
6651: LD_VAR 0 3
6655: ARRAY
6656: NONEQUAL
6657: IFTRUE 6680
6659: PUSH
6660: LD_EXP 11
6664: NOT
6665: IFFALSE 6679
6667: PUSH
6668: LD_VAR 0 2
6672: PUSH
6673: LD_VAR 0 3
6677: NONEQUAL
6678: AND
6679: OR
6680: AND
6681: IFFALSE 6709
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6683: LD_VAR 0 3
6687: PPUSH
6688: LD_EXP 19
6692: PUSH
6693: LD_EXP 7
6697: PUSH
6698: LD_VAR 0 2
6702: ARRAY
6703: ARRAY
6704: PPUSH
6705: CALL_OW 333
6709: GO 6619
6711: POP
6712: POP
// end ;
6713: GO 6567
6715: POP
6716: POP
// end ;
6717: LD_VAR 0 1
6721: RET
// function EndBuildUp ; var i , j ; begin
6722: LD_INT 0
6724: PPUSH
6725: PPUSH
6726: PPUSH
// mpBuildUpTimeActive := false ;
6727: LD_ADDR_EXP 49
6731: PUSH
6732: LD_INT 0
6734: ST_TO_ADDR
// for i := 1 to 8 do
6735: LD_ADDR_VAR 0 2
6739: PUSH
6740: DOUBLE
6741: LD_INT 1
6743: DEC
6744: ST_TO_ADDR
6745: LD_INT 8
6747: PUSH
6748: FOR_TO
6749: IFFALSE 6896
// if mpSidePositions [ i ] then
6751: LD_EXP 7
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: IFFALSE 6894
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6763: LD_EXP 19
6767: PUSH
6768: LD_EXP 7
6772: PUSH
6773: LD_VAR 0 2
6777: ARRAY
6778: ARRAY
6779: PPUSH
6780: LD_INT 0
6782: PPUSH
6783: CALL_OW 424
// for j := 1 to 8 do
6787: LD_ADDR_VAR 0 3
6791: PUSH
6792: DOUBLE
6793: LD_INT 1
6795: DEC
6796: ST_TO_ADDR
6797: LD_INT 8
6799: PUSH
6800: FOR_TO
6801: IFFALSE 6892
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6803: LD_EXP 7
6807: PUSH
6808: LD_VAR 0 3
6812: ARRAY
6813: IFFALSE 6862
6815: PUSH
6816: LD_EXP 8
6820: PUSH
6821: LD_VAR 0 2
6825: ARRAY
6826: PUSH
6827: LD_EXP 8
6831: PUSH
6832: LD_VAR 0 3
6836: ARRAY
6837: NONEQUAL
6838: IFTRUE 6861
6840: PUSH
6841: LD_EXP 11
6845: NOT
6846: IFFALSE 6860
6848: PUSH
6849: LD_VAR 0 2
6853: PUSH
6854: LD_VAR 0 3
6858: NONEQUAL
6859: AND
6860: OR
6861: AND
6862: IFFALSE 6890
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_EXP 19
6873: PUSH
6874: LD_EXP 7
6878: PUSH
6879: LD_VAR 0 2
6883: ARRAY
6884: ARRAY
6885: PPUSH
6886: CALL_OW 334
6890: GO 6800
6892: POP
6893: POP
// end ;
6894: GO 6748
6896: POP
6897: POP
// end ;
6898: LD_VAR 0 1
6902: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6903: LD_EXP 49
6907: IFFALSE 7086
6909: GO 6911
6911: DISABLE
6912: LD_INT 0
6914: PPUSH
6915: PPUSH
// begin for i := 1 to 8 do
6916: LD_ADDR_VAR 0 1
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_INT 8
6928: PUSH
6929: FOR_TO
6930: IFFALSE 7083
// if mpSidePositions [ i ] then
6932: LD_EXP 7
6936: PUSH
6937: LD_VAR 0 1
6941: ARRAY
6942: IFFALSE 7081
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6944: LD_ADDR_VAR 0 2
6948: PUSH
6949: LD_EXP 19
6953: PUSH
6954: LD_EXP 7
6958: PUSH
6959: LD_VAR 0 1
6963: ARRAY
6964: ARRAY
6965: PPUSH
6966: LD_INT 2
6968: PUSH
6969: LD_INT 21
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 21
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 22
6996: PUSH
6997: LD_OWVAR 2
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 70
7014: PUSH
7015: FOR_IN
7016: IFFALSE 7079
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7018: LD_EXP 8
7022: PUSH
7023: LD_VAR 0 1
7027: ARRAY
7028: PUSH
7029: LD_EXP 8
7033: PUSH
7034: LD_OWVAR 2
7038: ARRAY
7039: NONEQUAL
7040: IFTRUE 7063
7042: PUSH
7043: LD_EXP 11
7047: NOT
7048: IFFALSE 7062
7050: PUSH
7051: LD_VAR 0 1
7055: PUSH
7056: LD_OWVAR 2
7060: NONEQUAL
7061: AND
7062: OR
7063: IFFALSE 7077
// ComMoveToArea ( un , BuildUpEscape ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: LD_INT 16
7072: PPUSH
7073: CALL_OW 113
7077: GO 7015
7079: POP
7080: POP
7081: GO 6929
7083: POP
7084: POP
// enable ;
7085: ENABLE
// end ;
7086: PPOPN 2
7088: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7089: LD_EXP 20
7093: IFFALSE 7143
7095: GO 7097
7097: DISABLE
7098: LD_INT 0
7100: PPUSH
// begin tmp := mpBuildUpTime ;
7101: LD_ADDR_VAR 0 1
7105: PUSH
7106: LD_EXP 20
7110: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7111: LD_INT 35
7113: PPUSH
7114: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7118: LD_ADDR_VAR 0 1
7122: PUSH
7123: LD_VAR 0 1
7127: PUSH
7128: LD_INT 35
7130: MINUS
7131: ST_TO_ADDR
// until not tmp ;
7132: LD_VAR 0 1
7136: NOT
7137: IFFALSE 7111
// EndBuildUp ;
7139: CALL 6722 0 0
// end ;
7143: PPOPN 1
7145: END
// every 0 0$1 trigger mpActive marked mpWin do
7146: LD_INT 100
7148: IFFALSE 7182
7150: GO 7152
7152: DISABLE
// begin if IAmServer then
7153: CALL_OW 518
7157: IFFALSE 7166
// wait ( 0 0$3 ) ;
7159: LD_INT 105
7161: PPUSH
7162: CALL_OW 67
// if Multiplayer then
7166: LD_OWVAR 4
7170: IFFALSE 7178
// YouWinInMultiplayer else
7172: CALL_OW 106
7176: GO 7182
// YouWin ;
7178: CALL_OW 103
// end ;
7182: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7183: LD_INT 0
7185: PPUSH
// result := false ;
7186: LD_ADDR_VAR 0 3
7190: PUSH
7191: LD_INT 0
7193: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7194: LD_VAR 0 1
7198: PUSH
7199: LD_INT 1
7201: DOUBLE
7202: EQUAL
7203: IFTRUE 7225
7205: LD_INT 5
7207: DOUBLE
7208: EQUAL
7209: IFTRUE 7225
7211: LD_INT 6
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7225
7217: LD_INT 7
7219: DOUBLE
7220: EQUAL
7221: IFTRUE 7225
7223: GO 7298
7225: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7226: LD_ADDR_VAR 0 3
7230: PUSH
7231: LD_INT 22
7233: PUSH
7234: LD_VAR 0 2
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 2
7245: PUSH
7246: LD_INT 21
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 33
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 33
7268: PUSH
7269: LD_INT 5
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 69
7290: PPUSH
7291: CALL 13570 0 1
7295: ST_TO_ADDR
// end ; GameTypeSurvival :
7296: GO 7694
7298: LD_INT 2
7300: DOUBLE
7301: EQUAL
7302: IFTRUE 7306
7304: GO 7436
7306: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7307: LD_ADDR_VAR 0 3
7311: PUSH
7312: LD_INT 22
7314: PUSH
7315: LD_VAR 0 2
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 2
7326: PUSH
7327: LD_INT 30
7329: PUSH
7330: LD_INT 0
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 30
7339: PUSH
7340: LD_INT 1
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 69
7360: PPUSH
7361: CALL 13570 0 1
7365: IFFALSE 7433
7367: PUSH
7368: LD_INT 22
7370: PUSH
7371: LD_VAR 0 2
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: LD_INT 21
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 33
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 33
7405: PUSH
7406: LD_INT 5
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 69
7427: PPUSH
7428: CALL 13570 0 1
7432: AND
7433: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7434: GO 7694
7436: LD_INT 8
7438: DOUBLE
7439: EQUAL
7440: IFTRUE 7444
7442: GO 7593
7444: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7445: LD_ADDR_VAR 0 3
7449: PUSH
7450: LD_EXP 41
7454: PUSH
7455: LD_VAR 0 2
7459: ARRAY
7460: PPUSH
7461: CALL_OW 300
7465: IFFALSE 7522
7467: PUSH
7468: LD_INT 22
7470: PUSH
7471: LD_VAR 0 2
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 2
7482: PUSH
7483: LD_INT 30
7485: PUSH
7486: LD_INT 0
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 30
7495: PUSH
7496: LD_INT 1
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PPUSH
7512: CALL_OW 69
7516: PPUSH
7517: CALL 13570 0 1
7521: AND
7522: IFFALSE 7590
7524: PUSH
7525: LD_INT 22
7527: PUSH
7528: LD_VAR 0 2
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 2
7539: PUSH
7540: LD_INT 21
7542: PUSH
7543: LD_INT 1
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: LD_INT 33
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PUSH
7560: LD_INT 33
7562: PUSH
7563: LD_INT 5
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PPUSH
7580: CALL_OW 69
7584: PPUSH
7585: CALL 13570 0 1
7589: AND
7590: ST_TO_ADDR
// end ; GameTypeKing :
7591: GO 7694
7593: LD_INT 3
7595: DOUBLE
7596: EQUAL
7597: IFTRUE 7601
7599: GO 7693
7601: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7602: LD_ADDR_VAR 0 3
7606: PUSH
7607: LD_INT 22
7609: PUSH
7610: LD_VAR 0 2
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 2
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 33
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 33
7644: PUSH
7645: LD_INT 5
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PPUSH
7662: CALL_OW 69
7666: PPUSH
7667: CALL 13570 0 1
7671: IFFALSE 7690
7673: PUSH
7674: LD_VAR 0 2
7678: PPUSH
7679: CALL 62558 0 1
7683: PUSH
7684: LD_EXP 35
7688: LESS
7689: AND
7690: ST_TO_ADDR
// end ; end ;
7691: GO 7694
7693: POP
// end ;
7694: LD_VAR 0 3
7698: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7699: LD_INT 100
7701: IFFALSE 7931
7703: GO 7705
7705: DISABLE
7706: LD_INT 0
7708: PPUSH
7709: PPUSH
// begin if Multiplayer then
7710: LD_OWVAR 4
7714: IFFALSE 7722
// SetPlayerSpectator ( ) else
7716: CALL_OW 572
7720: GO 7731
// FogOff ( your_side ) ;
7722: LD_OWVAR 2
7726: PPUSH
7727: CALL_OW 344
// repeat gameIsOn := false ;
7731: LD_ADDR_VAR 0 1
7735: PUSH
7736: LD_INT 0
7738: ST_TO_ADDR
// for i := 1 to 8 do
7739: LD_ADDR_VAR 0 2
7743: PUSH
7744: DOUBLE
7745: LD_INT 1
7747: DEC
7748: ST_TO_ADDR
7749: LD_INT 8
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7883
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7755: LD_EXP 7
7759: PUSH
7760: LD_VAR 0 2
7764: ARRAY
7765: IFFALSE 7778
7767: PUSH
7768: LD_VAR 0 2
7772: PPUSH
7773: CALL_OW 108
7777: AND
7778: IFFALSE 7792
7780: PUSH
7781: LD_VAR 0 2
7785: PUSH
7786: LD_OWVAR 2
7790: NONEQUAL
7791: AND
7792: IFFALSE 7881
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7794: LD_EXP 8
7798: PUSH
7799: LD_VAR 0 2
7803: ARRAY
7804: NOT
7805: IFTRUE 7853
7807: PUSH
7808: LD_EXP 8
7812: PUSH
7813: LD_VAR 0 2
7817: ARRAY
7818: PUSH
7819: LD_EXP 8
7823: PUSH
7824: LD_OWVAR 2
7828: ARRAY
7829: NONEQUAL
7830: IFFALSE 7852
7832: PUSH
7833: LD_OWVAR 2
7837: PPUSH
7838: LD_VAR 0 2
7842: PPUSH
7843: CALL_OW 81
7847: PUSH
7848: LD_INT 1
7850: NONEQUAL
7851: AND
7852: OR
7853: IFFALSE 7881
// if HasPowerByGameType ( mpGameType , i ) then
7855: LD_EXP 3
7859: PPUSH
7860: LD_VAR 0 2
7864: PPUSH
7865: CALL 7183 0 2
7869: IFFALSE 7881
// begin gameIsOn := true ;
7871: LD_ADDR_VAR 0 1
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// break ;
7879: GO 7883
// end ;
7881: GO 7752
7883: POP
7884: POP
// wait ( 100 ) ;
7885: LD_INT 100
7887: PPUSH
7888: CALL_OW 67
// until not gameIsOn ;
7892: LD_VAR 0 1
7896: NOT
7897: IFFALSE 7731
// if IAmServer then
7899: CALL_OW 518
7903: IFFALSE 7912
// wait ( 0 0$3 ) ;
7905: LD_INT 105
7907: PPUSH
7908: CALL_OW 67
// if Multiplayer then
7912: LD_OWVAR 4
7916: IFFALSE 7924
// YouLostInMultiplayer else
7918: CALL_OW 107
7922: GO 7931
// YouLost (  ) ;
7924: LD_STRING 
7926: PPUSH
7927: CALL_OW 104
// end ;
7931: PPOPN 2
7933: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7934: LD_EXP 33
7938: IFFALSE 8322
7940: GO 7942
7942: DISABLE
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7950: LD_ADDR_VAR 0 5
7954: PUSH
7955: LD_INT 1
7957: PUSH
7958: LD_INT 2
7960: PUSH
7961: LD_INT 3
7963: PUSH
7964: LD_INT 4
7966: PUSH
7967: LD_INT 5
7969: PUSH
7970: LD_INT 6
7972: PUSH
7973: LD_INT 7
7975: PUSH
7976: LD_INT 8
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7989: LD_INT 350
7991: PPUSH
7992: CALL_OW 67
// for i := 1 to 8 do
7996: LD_ADDR_VAR 0 1
8000: PUSH
8001: DOUBLE
8002: LD_INT 1
8004: DEC
8005: ST_TO_ADDR
8006: LD_INT 8
8008: PUSH
8009: FOR_TO
8010: IFFALSE 8292
// begin j := sides [ i ] ;
8012: LD_ADDR_VAR 0 2
8016: PUSH
8017: LD_VAR 0 5
8021: PUSH
8022: LD_VAR 0 1
8026: ARRAY
8027: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8028: LD_EXP 40
8032: PUSH
8033: LD_VAR 0 2
8037: ARRAY
8038: PPUSH
8039: CALL 13570 0 1
8043: IFFALSE 8056
8045: PUSH
8046: LD_VAR 0 2
8050: PPUSH
8051: CALL_OW 108
8055: AND
8056: IFFALSE 8074
8058: PUSH
8059: LD_EXP 3
8063: PPUSH
8064: LD_VAR 0 2
8068: PPUSH
8069: CALL 7183 0 2
8073: AND
8074: IFFALSE 8290
// begin wait ( mpRespawn div 2 ) ;
8076: LD_EXP 33
8080: PUSH
8081: LD_INT 2
8083: DIV
8084: PPUSH
8085: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8089: LD_ADDR_VAR 0 3
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_VAR 0 2
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PUSH
8106: LD_INT 50
8108: PUSH
8109: EMPTY
8110: LIST
8111: PUSH
8112: LD_INT 2
8114: PUSH
8115: LD_INT 30
8117: PUSH
8118: LD_INT 0
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PUSH
8125: LD_INT 30
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: LIST
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: LIST
8144: PPUSH
8145: CALL_OW 69
8149: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8150: LD_VAR 0 3
8154: NOT
8155: IFTRUE 8169
8157: PUSH
8158: LD_VAR 0 2
8162: PPUSH
8163: CALL_OW 108
8167: NOT
8168: OR
8169: IFTRUE 8188
8171: PUSH
8172: LD_EXP 3
8176: PPUSH
8177: LD_VAR 0 2
8181: PPUSH
8182: CALL 7183 0 2
8186: NOT
8187: OR
8188: IFFALSE 8192
// continue ;
8190: GO 8009
// spawn := tmp [ 1 ] ;
8192: LD_ADDR_VAR 0 4
8196: PUSH
8197: LD_VAR 0 3
8201: PUSH
8202: LD_INT 1
8204: ARRAY
8205: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8206: LD_EXP 40
8210: PUSH
8211: LD_VAR 0 2
8215: ARRAY
8216: PUSH
8217: LD_INT 1
8219: ARRAY
8220: PPUSH
8221: LD_VAR 0 4
8225: PPUSH
8226: CALL_OW 250
8230: PPUSH
8231: LD_VAR 0 4
8235: PPUSH
8236: CALL_OW 251
8240: PPUSH
8241: LD_INT 32
8243: PPUSH
8244: LD_INT 1
8246: PPUSH
8247: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8251: LD_ADDR_EXP 40
8255: PUSH
8256: LD_EXP 40
8260: PPUSH
8261: LD_VAR 0 2
8265: PPUSH
8266: LD_EXP 40
8270: PUSH
8271: LD_VAR 0 2
8275: ARRAY
8276: PPUSH
8277: LD_INT 1
8279: PPUSH
8280: CALL_OW 3
8284: PPUSH
8285: CALL_OW 1
8289: ST_TO_ADDR
// end ; end ;
8290: GO 8009
8292: POP
8293: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8294: LD_ADDR_VAR 0 5
8298: PUSH
8299: LD_VAR 0 5
8303: PPUSH
8304: LD_INT 1
8306: PPUSH
8307: LD_INT 8
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: CALL 15896 0 4
8317: ST_TO_ADDR
// until false ;
8318: LD_INT 0
8320: IFFALSE 7989
// end ;
8322: PPOPN 5
8324: END
// every 0 0$1 marked mpActive do
8325: GO 8327
8327: DISABLE
// begin enable ;
8328: ENABLE
// if not mpDisplayStrings then
8329: LD_EXP 38
8333: NOT
8334: IFFALSE 8345
// begin display_strings := [ ] ;
8336: LD_ADDR_OWVAR 47
8340: PUSH
8341: EMPTY
8342: ST_TO_ADDR
// exit ;
8343: GO 8355
// end ; display_strings := mpDisplayStrings ;
8345: LD_ADDR_OWVAR 47
8349: PUSH
8350: LD_EXP 38
8354: ST_TO_ADDR
// end ; end_of_file
8355: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
8360: PPUSH
8361: PPUSH
8362: PPUSH
8363: PPUSH
8364: PPUSH
8365: PPUSH
8366: PPUSH
// if GetType ( un ) = unit_vehicle then
8367: LD_VAR 0 1
8371: PPUSH
8372: CALL_OW 247
8376: PUSH
8377: LD_INT 2
8379: EQUAL
8380: IFFALSE 8384
// exit ;
8382: GO 9157
// side := GetSide ( un ) ;
8384: LD_ADDR_VAR 0 9
8388: PUSH
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 255
8398: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8399: LD_EXP 3
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: LD_INT 8
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: IN
8414: IFFALSE 8508
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8416: LD_VAR 0 1
8420: PPUSH
8421: CALL_OW 266
8425: PUSH
8426: LD_INT 0
8428: PUSH
8429: LD_INT 1
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: IN
8436: IFFALSE 8508
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8438: LD_ADDR_VAR 0 3
8442: PUSH
8443: LD_INT 22
8445: PUSH
8446: LD_VAR 0 9
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: LD_INT 21
8460: PUSH
8461: LD_INT 1
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 33
8470: PUSH
8471: LD_INT 3
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 69
8491: PUSH
8492: FOR_IN
8493: IFFALSE 8506
// KillUnit ( i ) ;
8495: LD_VAR 0 3
8499: PPUSH
8500: CALL_OW 66
8504: GO 8492
8506: POP
8507: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
8508: LD_EXP 3
8512: PUSH
8513: LD_INT 8
8515: EQUAL
8516: IFFALSE 8600
// if un in mpCommanders then
8518: LD_VAR 0 1
8522: PUSH
8523: LD_EXP 41
8527: IN
8528: IFFALSE 8600
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8530: LD_ADDR_VAR 0 3
8534: PUSH
8535: LD_INT 22
8537: PUSH
8538: LD_VAR 0 9
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: LD_INT 2
8549: PUSH
8550: LD_INT 21
8552: PUSH
8553: LD_INT 1
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 33
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PPUSH
8579: CALL_OW 69
8583: PUSH
8584: FOR_IN
8585: IFFALSE 8598
// KillUnit ( i ) ;
8587: LD_VAR 0 3
8591: PPUSH
8592: CALL_OW 66
8596: GO 8584
8598: POP
8599: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8600: LD_VAR 0 1
8604: PPUSH
8605: CALL_OW 257
8609: PUSH
8610: LD_INT 12
8612: PUSH
8613: LD_INT 17
8615: PUSH
8616: LD_INT 15
8618: PUSH
8619: LD_INT 16
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: IN
8628: IFTRUE 8645
8630: PUSH
8631: LD_VAR 0 1
8635: PPUSH
8636: CALL_OW 263
8640: PUSH
8641: LD_INT 5
8643: EQUAL
8644: OR
8645: IFFALSE 8882
// begin tag := 0 ;
8647: LD_ADDR_VAR 0 5
8651: PUSH
8652: LD_INT 0
8654: ST_TO_ADDR
// for i := 1 to 8 do
8655: LD_ADDR_VAR 0 3
8659: PUSH
8660: DOUBLE
8661: LD_INT 1
8663: DEC
8664: ST_TO_ADDR
8665: LD_INT 8
8667: PUSH
8668: FOR_TO
8669: IFFALSE 8703
// if un in mpApePosIndex [ i ] then
8671: LD_VAR 0 1
8675: PUSH
8676: LD_EXP 32
8680: PUSH
8681: LD_VAR 0 3
8685: ARRAY
8686: IN
8687: IFFALSE 8701
// begin tag := i ;
8689: LD_ADDR_VAR 0 5
8693: PUSH
8694: LD_VAR 0 3
8698: ST_TO_ADDR
// break ;
8699: GO 8703
// end ;
8701: GO 8668
8703: POP
8704: POP
// if not tag then
8705: LD_VAR 0 5
8709: NOT
8710: IFFALSE 8714
// exit ;
8712: GO 9157
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8714: LD_ADDR_VAR 0 7
8718: PUSH
8719: LD_EXP 31
8723: PUSH
8724: LD_EXP 7
8728: PUSH
8729: LD_VAR 0 5
8733: ARRAY
8734: ARRAY
8735: ST_TO_ADDR
// if not area then
8736: LD_VAR 0 7
8740: NOT
8741: IFFALSE 8745
// exit ;
8743: GO 9157
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8745: LD_INT 14700
8747: PUSH
8748: LD_VAR 0 1
8752: PUSH
8753: LD_INT 5
8755: MOD
8756: PUSH
8757: LD_INT 1
8759: PLUS
8760: PUSH
8761: LD_INT 700
8763: MUL
8764: PLUS
8765: PPUSH
8766: CALL_OW 67
// repeat wait ( 10 ) ;
8770: LD_INT 10
8772: PPUSH
8773: CALL_OW 67
// until not mpBlockRespThread ;
8777: LD_EXP 47
8781: NOT
8782: IFFALSE 8770
// mpBlockRespThread := true ;
8784: LD_ADDR_EXP 47
8788: PUSH
8789: LD_INT 1
8791: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8792: LD_INT 0
8794: PPUSH
8795: CALL 45673 0 1
// ape := CreateHuman ;
8799: LD_ADDR_VAR 0 4
8803: PUSH
8804: CALL_OW 44
8808: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8809: LD_ADDR_EXP 32
8813: PUSH
8814: LD_EXP 32
8818: PPUSH
8819: LD_VAR 0 5
8823: PPUSH
8824: LD_EXP 32
8828: PUSH
8829: LD_VAR 0 5
8833: ARRAY
8834: PPUSH
8835: LD_VAR 0 4
8839: PPUSH
8840: CALL 49546 0 2
8844: PPUSH
8845: CALL_OW 1
8849: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8850: LD_VAR 0 4
8854: PPUSH
8855: LD_VAR 0 7
8859: PPUSH
8860: LD_INT 0
8862: PPUSH
8863: CALL_OW 49
// wait ( 10 ) ;
8867: LD_INT 10
8869: PPUSH
8870: CALL_OW 67
// mpBlockRespThread := false ;
8874: LD_ADDR_EXP 47
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8882: LD_VAR 0 1
8886: PPUSH
8887: CALL_OW 247
8891: PUSH
8892: LD_INT 1
8894: EQUAL
8895: IFFALSE 8912
8897: PUSH
8898: LD_VAR 0 1
8902: PPUSH
8903: CALL_OW 248
8907: PUSH
8908: LD_INT 0
8910: GREATER
8911: AND
8912: IFFALSE 9157
// begin if not mpRespawn then
8914: LD_EXP 33
8918: NOT
8919: IFFALSE 8923
// exit ;
8921: GO 9157
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8923: LD_VAR 0 9
8927: PPUSH
8928: CALL_OW 108
8932: NOT
8933: IFFALSE 8952
8935: PUSH
8936: LD_EXP 3
8940: PPUSH
8941: LD_VAR 0 9
8945: PPUSH
8946: CALL 7183 0 2
8950: NOT
8951: AND
8952: IFFALSE 8956
// exit ;
8954: GO 9157
// side := GetSide ( un ) ;
8956: LD_ADDR_VAR 0 9
8960: PUSH
8961: LD_VAR 0 1
8965: PPUSH
8966: CALL_OW 255
8970: ST_TO_ADDR
// nation := GetNation ( un ) ;
8971: LD_ADDR_VAR 0 8
8975: PUSH
8976: LD_VAR 0 1
8980: PPUSH
8981: CALL_OW 248
8985: ST_TO_ADDR
// class := GetClass ( un ) ;
8986: LD_ADDR_VAR 0 6
8990: PUSH
8991: LD_VAR 0 1
8995: PPUSH
8996: CALL_OW 257
9000: ST_TO_ADDR
// if class > 4 then
9001: LD_VAR 0 6
9005: PUSH
9006: LD_INT 4
9008: GREATER
9009: IFFALSE 9019
// class := 1 ;
9011: LD_ADDR_VAR 0 6
9015: PUSH
9016: LD_INT 1
9018: ST_TO_ADDR
// repeat wait ( 10 ) ;
9019: LD_INT 10
9021: PPUSH
9022: CALL_OW 67
// until not mpBlockRespThread ;
9026: LD_EXP 47
9030: NOT
9031: IFFALSE 9019
// mpBlockRespThread := true ;
9033: LD_ADDR_EXP 47
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// uc_side := side ;
9041: LD_ADDR_OWVAR 20
9045: PUSH
9046: LD_VAR 0 9
9050: ST_TO_ADDR
// uc_nation := nation ;
9051: LD_ADDR_OWVAR 21
9055: PUSH
9056: LD_VAR 0 8
9060: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9061: LD_INT 0
9063: PPUSH
9064: LD_VAR 0 6
9068: PPUSH
9069: LD_INT 2
9071: PPUSH
9072: CALL_OW 380
// un := CreateHuman ;
9076: LD_ADDR_VAR 0 1
9080: PUSH
9081: CALL_OW 44
9085: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9086: LD_ADDR_EXP 40
9090: PUSH
9091: LD_EXP 40
9095: PPUSH
9096: LD_VAR 0 9
9100: PPUSH
9101: LD_EXP 40
9105: PUSH
9106: LD_VAR 0 9
9110: ARRAY
9111: PPUSH
9112: LD_EXP 40
9116: PUSH
9117: LD_VAR 0 9
9121: ARRAY
9122: PUSH
9123: LD_INT 1
9125: PLUS
9126: PPUSH
9127: LD_VAR 0 1
9131: PPUSH
9132: CALL_OW 1
9136: PPUSH
9137: CALL_OW 1
9141: ST_TO_ADDR
// wait ( 10 ) ;
9142: LD_INT 10
9144: PPUSH
9145: CALL_OW 67
// mpBlockRespThread := false ;
9149: LD_ADDR_EXP 47
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// end ; end ;
9157: LD_VAR 0 2
9161: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9162: LD_INT 0
9164: PPUSH
9165: PPUSH
9166: PPUSH
9167: PPUSH
9168: PPUSH
// tag := 0 ;
9169: LD_ADDR_VAR 0 5
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// for i := 1 to 8 do
9177: LD_ADDR_VAR 0 4
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_INT 8
9189: PUSH
9190: FOR_TO
9191: IFFALSE 9225
// if un in mpApePosIndex [ i ] then
9193: LD_VAR 0 2
9197: PUSH
9198: LD_EXP 32
9202: PUSH
9203: LD_VAR 0 4
9207: ARRAY
9208: IN
9209: IFFALSE 9223
// begin tag := i ;
9211: LD_ADDR_VAR 0 5
9215: PUSH
9216: LD_VAR 0 4
9220: ST_TO_ADDR
// break ;
9221: GO 9225
// end ;
9223: GO 9190
9225: POP
9226: POP
// if not tag then
9227: LD_VAR 0 5
9231: NOT
9232: IFFALSE 9236
// exit ;
9234: GO 9404
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9236: LD_ADDR_VAR 0 6
9240: PUSH
9241: LD_EXP 31
9245: PUSH
9246: LD_EXP 7
9250: PUSH
9251: LD_VAR 0 5
9255: ARRAY
9256: ARRAY
9257: ST_TO_ADDR
// if not area then
9258: LD_VAR 0 6
9262: NOT
9263: IFFALSE 9267
// exit ;
9265: GO 9404
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9267: LD_INT 14700
9269: PUSH
9270: LD_VAR 0 2
9274: PUSH
9275: LD_INT 5
9277: MOD
9278: PUSH
9279: LD_INT 1
9281: PLUS
9282: PUSH
9283: LD_INT 700
9285: MUL
9286: PLUS
9287: PPUSH
9288: CALL_OW 67
// repeat wait ( 10 ) ;
9292: LD_INT 10
9294: PPUSH
9295: CALL_OW 67
// until not mpBlockRespThread ;
9299: LD_EXP 47
9303: NOT
9304: IFFALSE 9292
// mpBlockRespThread := true ;
9306: LD_ADDR_EXP 47
9310: PUSH
9311: LD_INT 1
9313: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9314: LD_INT 0
9316: PPUSH
9317: CALL 45673 0 1
// ape := CreateHuman ;
9321: LD_ADDR_VAR 0 7
9325: PUSH
9326: CALL_OW 44
9330: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9331: LD_ADDR_EXP 32
9335: PUSH
9336: LD_EXP 32
9340: PPUSH
9341: LD_VAR 0 5
9345: PPUSH
9346: LD_EXP 32
9350: PUSH
9351: LD_VAR 0 5
9355: ARRAY
9356: PPUSH
9357: LD_VAR 0 7
9361: PPUSH
9362: CALL 49546 0 2
9366: PPUSH
9367: CALL_OW 1
9371: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9372: LD_VAR 0 7
9376: PPUSH
9377: LD_VAR 0 6
9381: PPUSH
9382: LD_INT 0
9384: PPUSH
9385: CALL_OW 49
// wait ( 10 ) ;
9389: LD_INT 10
9391: PPUSH
9392: CALL_OW 67
// mpBlockRespThread := false ;
9396: LD_ADDR_EXP 47
9400: PUSH
9401: LD_INT 0
9403: ST_TO_ADDR
// end ;
9404: LD_VAR 0 3
9408: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9409: LD_INT 0
9411: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9412: LD_VAR 0 1
9416: PPUSH
9417: CALL_OW 266
9421: PUSH
9422: LD_INT 0
9424: PUSH
9425: LD_INT 1
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: IN
9432: IFFALSE 9457
// SetBName ( building , @ & GetSide ( building ) ) ;
9434: LD_VAR 0 1
9438: PPUSH
9439: LD_STRING @
9441: PUSH
9442: LD_VAR 0 1
9446: PPUSH
9447: CALL_OW 255
9451: STR
9452: PPUSH
9453: CALL_OW 500
// end ;
9457: LD_VAR 0 2
9461: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9462: LD_INT 0
9464: PPUSH
9465: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9466: LD_EXP 3
9470: PUSH
9471: LD_INT 2
9473: PUSH
9474: LD_INT 8
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: IN
9481: IFFALSE 9505
9483: PUSH
9484: LD_VAR 0 1
9488: PPUSH
9489: CALL_OW 266
9493: PUSH
9494: LD_INT 0
9496: PUSH
9497: LD_INT 1
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: IN
9504: AND
9505: IFFALSE 9584
// begin SetSide ( building , oldSide ) ;
9507: LD_VAR 0 1
9511: PPUSH
9512: LD_VAR 0 2
9516: PPUSH
9517: CALL_OW 235
// KillUnit ( building ) ;
9521: LD_VAR 0 1
9525: PPUSH
9526: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9530: LD_ADDR_VAR 0 5
9534: PUSH
9535: LD_INT 22
9537: PUSH
9538: LD_VAR 0 2
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 21
9549: PUSH
9550: LD_INT 1
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 69
9565: PUSH
9566: FOR_IN
9567: IFFALSE 9580
// KillUnit ( i ) ;
9569: LD_VAR 0 5
9573: PPUSH
9574: CALL_OW 66
9578: GO 9566
9580: POP
9581: POP
// exit ;
9582: GO 9629
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9584: LD_VAR 0 1
9588: PPUSH
9589: CALL_OW 266
9593: PUSH
9594: LD_INT 0
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: IN
9604: IFFALSE 9629
// SetBName ( building , @ & GetSide ( building ) ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: LD_STRING @
9613: PUSH
9614: LD_VAR 0 1
9618: PPUSH
9619: CALL_OW 255
9623: STR
9624: PPUSH
9625: CALL_OW 500
// end ;
9629: LD_VAR 0 4
9633: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9634: LD_INT 0
9636: PPUSH
9637: PPUSH
9638: PPUSH
// if mpGameType <> GameTypeFamine then
9639: LD_EXP 3
9643: PUSH
9644: LD_INT 5
9646: NONEQUAL
9647: IFFALSE 9651
// exit ;
9649: GO 9885
// for i := 1 to mpGlobalOilDeposits do
9651: LD_ADDR_VAR 0 6
9655: PUSH
9656: DOUBLE
9657: LD_INT 1
9659: DEC
9660: ST_TO_ADDR
9661: LD_EXP 42
9665: PUSH
9666: FOR_TO
9667: IFFALSE 9883
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9669: LD_EXP 42
9673: PUSH
9674: LD_VAR 0 6
9678: ARRAY
9679: PUSH
9680: LD_INT 1
9682: ARRAY
9683: PPUSH
9684: LD_EXP 42
9688: PUSH
9689: LD_VAR 0 6
9693: ARRAY
9694: PUSH
9695: LD_INT 2
9697: ARRAY
9698: PPUSH
9699: CALL_OW 428
9703: PUSH
9704: LD_VAR 0 1
9708: EQUAL
9709: IFFALSE 9881
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9711: LD_ADDR_VAR 0 7
9715: PUSH
9716: LD_EXP 42
9720: PUSH
9721: LD_VAR 0 6
9725: ARRAY
9726: PUSH
9727: LD_INT 3
9729: ARRAY
9730: ST_TO_ADDR
// value := value - amount ;
9731: LD_ADDR_VAR 0 7
9735: PUSH
9736: LD_VAR 0 7
9740: PUSH
9741: LD_VAR 0 4
9745: MINUS
9746: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9747: LD_ADDR_EXP 42
9751: PUSH
9752: LD_EXP 42
9756: PPUSH
9757: LD_VAR 0 6
9761: PPUSH
9762: LD_EXP 42
9766: PUSH
9767: LD_VAR 0 6
9771: ARRAY
9772: PPUSH
9773: LD_INT 3
9775: PPUSH
9776: LD_VAR 0 7
9780: PPUSH
9781: CALL_OW 1
9785: PPUSH
9786: CALL_OW 1
9790: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9791: LD_VAR 0 2
9795: PUSH
9796: LD_OWVAR 2
9800: PUSH
9801: LD_INT 9
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: IN
9808: IFFALSE 9824
// SetUnitDisplayNumber ( building , value ) ;
9810: LD_VAR 0 1
9814: PPUSH
9815: LD_VAR 0 7
9819: PPUSH
9820: CALL_OW 505
// if value <= 0 then
9824: LD_VAR 0 7
9828: PUSH
9829: LD_INT 0
9831: LESSEQUAL
9832: IFFALSE 9881
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9834: LD_EXP 42
9838: PUSH
9839: LD_VAR 0 6
9843: ARRAY
9844: PUSH
9845: LD_INT 1
9847: ARRAY
9848: PPUSH
9849: LD_EXP 42
9853: PUSH
9854: LD_VAR 0 6
9858: ARRAY
9859: PUSH
9860: LD_INT 2
9862: ARRAY
9863: PPUSH
9864: CALL_OW 63
// KillUnit ( building ) ;
9868: LD_VAR 0 1
9872: PPUSH
9873: CALL_OW 66
// exit ;
9877: POP
9878: POP
9879: GO 9885
// end ; end ; end ;
9881: GO 9666
9883: POP
9884: POP
// end ;
9885: LD_VAR 0 5
9889: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9890: LD_INT 0
9892: PPUSH
9893: PPUSH
9894: PPUSH
// if mpGameType <> GameTypeFamine then
9895: LD_EXP 3
9899: PUSH
9900: LD_INT 5
9902: NONEQUAL
9903: IFFALSE 9907
// exit ;
9905: GO 10141
// for i := 1 to mpGlobalSibDeposits do
9907: LD_ADDR_VAR 0 6
9911: PUSH
9912: DOUBLE
9913: LD_INT 1
9915: DEC
9916: ST_TO_ADDR
9917: LD_EXP 43
9921: PUSH
9922: FOR_TO
9923: IFFALSE 10139
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9925: LD_EXP 43
9929: PUSH
9930: LD_VAR 0 6
9934: ARRAY
9935: PUSH
9936: LD_INT 1
9938: ARRAY
9939: PPUSH
9940: LD_EXP 43
9944: PUSH
9945: LD_VAR 0 6
9949: ARRAY
9950: PUSH
9951: LD_INT 2
9953: ARRAY
9954: PPUSH
9955: CALL_OW 428
9959: PUSH
9960: LD_VAR 0 1
9964: EQUAL
9965: IFFALSE 10137
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9967: LD_ADDR_VAR 0 7
9971: PUSH
9972: LD_EXP 43
9976: PUSH
9977: LD_VAR 0 6
9981: ARRAY
9982: PUSH
9983: LD_INT 3
9985: ARRAY
9986: ST_TO_ADDR
// value := value - amount ;
9987: LD_ADDR_VAR 0 7
9991: PUSH
9992: LD_VAR 0 7
9996: PUSH
9997: LD_VAR 0 4
10001: MINUS
10002: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10003: LD_ADDR_EXP 43
10007: PUSH
10008: LD_EXP 43
10012: PPUSH
10013: LD_VAR 0 6
10017: PPUSH
10018: LD_EXP 43
10022: PUSH
10023: LD_VAR 0 6
10027: ARRAY
10028: PPUSH
10029: LD_INT 3
10031: PPUSH
10032: LD_VAR 0 7
10036: PPUSH
10037: CALL_OW 1
10041: PPUSH
10042: CALL_OW 1
10046: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10047: LD_VAR 0 2
10051: PUSH
10052: LD_OWVAR 2
10056: PUSH
10057: LD_INT 9
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: IN
10064: IFFALSE 10080
// SetUnitDisplayNumber ( building , value ) ;
10066: LD_VAR 0 1
10070: PPUSH
10071: LD_VAR 0 7
10075: PPUSH
10076: CALL_OW 505
// if value <= 0 then
10080: LD_VAR 0 7
10084: PUSH
10085: LD_INT 0
10087: LESSEQUAL
10088: IFFALSE 10137
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10090: LD_EXP 43
10094: PUSH
10095: LD_VAR 0 6
10099: ARRAY
10100: PUSH
10101: LD_INT 1
10103: ARRAY
10104: PPUSH
10105: LD_EXP 43
10109: PUSH
10110: LD_VAR 0 6
10114: ARRAY
10115: PUSH
10116: LD_INT 2
10118: ARRAY
10119: PPUSH
10120: CALL_OW 63
// KillUnit ( building ) ;
10124: LD_VAR 0 1
10128: PPUSH
10129: CALL_OW 66
// exit ;
10133: POP
10134: POP
10135: GO 10141
// end ; end ; end ;
10137: GO 9922
10139: POP
10140: POP
// end ;
10141: LD_VAR 0 5
10145: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10146: LD_INT 0
10148: PPUSH
10149: PPUSH
// side := GetSide ( factory ) ;
10150: LD_ADDR_VAR 0 7
10154: PUSH
10155: LD_VAR 0 1
10159: PPUSH
10160: CALL_OW 255
10164: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10165: LD_VAR 0 5
10169: PUSH
10170: LD_INT 81
10172: EQUAL
10173: IFFALSE 10211
10175: PUSH
10176: LD_INT 22
10178: PUSH
10179: LD_VAR 0 7
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 34
10190: PUSH
10191: LD_INT 81
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: LD_INT 0
10209: GREATER
10210: AND
10211: IFFALSE 10244
// begin ComCancel ( factory ) ;
10213: LD_VAR 0 1
10217: PPUSH
10218: CALL_OW 127
// if side = your_side then
10222: LD_VAR 0 7
10226: PUSH
10227: LD_OWVAR 2
10231: EQUAL
10232: IFFALSE 10244
// HintSpec ( VehLimit , 2 ) ;
10234: LD_STRING VehLimit
10236: PPUSH
10237: LD_INT 2
10239: PPUSH
10240: CALL_OW 338
// end ; end ;
10244: LD_VAR 0 6
10248: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10249: LD_INT 0
10251: PPUSH
10252: PPUSH
10253: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10254: LD_VAR 0 1
10258: PPUSH
10259: CALL_OW 264
10263: PUSH
10264: LD_INT 81
10266: EQUAL
10267: IFFALSE 10284
10269: PUSH
10270: LD_VAR 0 1
10274: PPUSH
10275: CALL_OW 263
10279: PUSH
10280: LD_INT 1
10282: EQUAL
10283: AND
10284: IFFALSE 10564
// begin for i := 1 to Count ( minersList ) do
10286: LD_ADDR_VAR 0 6
10290: PUSH
10291: DOUBLE
10292: LD_INT 1
10294: DEC
10295: ST_TO_ADDR
10296: LD_EXP 57
10300: PPUSH
10301: CALL 13570 0 1
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10425
// begin if minersList [ i ] = oldId then
10309: LD_EXP 57
10313: PUSH
10314: LD_VAR 0 6
10318: ARRAY
10319: PUSH
10320: LD_VAR 0 2
10324: EQUAL
10325: IFFALSE 10423
// begin for j := 1 to minerMinesList [ i ] do
10327: LD_ADDR_VAR 0 7
10331: PUSH
10332: DOUBLE
10333: LD_INT 1
10335: DEC
10336: ST_TO_ADDR
10337: LD_EXP 58
10341: PUSH
10342: LD_VAR 0 6
10346: ARRAY
10347: PUSH
10348: FOR_TO
10349: IFFALSE 10399
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10351: LD_EXP 58
10355: PUSH
10356: LD_VAR 0 6
10360: ARRAY
10361: PUSH
10362: LD_VAR 0 7
10366: ARRAY
10367: PUSH
10368: LD_INT 1
10370: ARRAY
10371: PPUSH
10372: LD_EXP 58
10376: PUSH
10377: LD_VAR 0 6
10381: ARRAY
10382: PUSH
10383: LD_VAR 0 7
10387: ARRAY
10388: PUSH
10389: LD_INT 2
10391: ARRAY
10392: PPUSH
10393: CALL_OW 612
10397: GO 10348
10399: POP
10400: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10401: LD_ADDR_EXP 58
10405: PUSH
10406: LD_EXP 58
10410: PPUSH
10411: LD_VAR 0 6
10415: PPUSH
10416: CALL_OW 3
10420: ST_TO_ADDR
// break ;
10421: GO 10425
// end ; end ;
10423: GO 10306
10425: POP
10426: POP
// minersList := minersList diff oldId ;
10427: LD_ADDR_EXP 57
10431: PUSH
10432: LD_EXP 57
10436: PUSH
10437: LD_VAR 0 2
10441: DIFF
10442: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10443: LD_INT 22
10445: PUSH
10446: LD_VAR 0 4
10450: PPUSH
10451: CALL_OW 255
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: LD_INT 34
10462: PUSH
10463: LD_INT 81
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PPUSH
10474: CALL_OW 69
10478: PUSH
10479: LD_INT 1
10481: GREATER
10482: IFFALSE 10509
// begin ComExit ( unit ) ;
10484: LD_VAR 0 4
10488: PPUSH
10489: CALL 49944 0 1
// SetSide ( newId , oldSide ) ;
10493: LD_VAR 0 1
10497: PPUSH
10498: LD_VAR 0 3
10502: PPUSH
10503: CALL_OW 235
// exit ;
10507: GO 10564
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10509: LD_ADDR_EXP 57
10513: PUSH
10514: LD_EXP 57
10518: PPUSH
10519: LD_EXP 57
10523: PUSH
10524: LD_INT 1
10526: PLUS
10527: PPUSH
10528: LD_VAR 0 1
10532: PPUSH
10533: CALL_OW 1
10537: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10538: LD_ADDR_EXP 58
10542: PUSH
10543: LD_EXP 58
10547: PPUSH
10548: LD_EXP 58
10552: PUSH
10553: LD_INT 1
10555: PLUS
10556: PPUSH
10557: EMPTY
10558: PPUSH
10559: CALL_OW 1
10563: ST_TO_ADDR
// end ; end ; end_of_file
10564: LD_VAR 0 5
10568: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10569: LD_EXP 39
10573: IFFALSE 10581
10575: PUSH
10576: CALL 10791 0 0
10580: AND
10581: IFFALSE 10589
10583: PUSH
10584: LD_OWVAR 4
10588: AND
10589: IFFALSE 10788
10591: GO 10593
10593: DISABLE
10594: LD_INT 0
10596: PPUSH
10597: PPUSH
// begin canWin := false ;
10598: LD_ADDR_VAR 0 2
10602: PUSH
10603: LD_INT 0
10605: ST_TO_ADDR
// if not HasPower ( your_side ) then
10606: LD_OWVAR 2
10610: PPUSH
10611: CALL 10833 0 1
10615: NOT
10616: IFFALSE 10627
// begin Multiplayer_Loose_Message ;
10618: CALL_OW 521
// enable ( mpLose ) ;
10622: LD_INT 102
10624: ENABLE_MARKED
// end else
10625: GO 10788
// begin canWin := true ;
10627: LD_ADDR_VAR 0 2
10631: PUSH
10632: LD_INT 1
10634: ST_TO_ADDR
// for i := 1 to 8 do
10635: LD_ADDR_VAR 0 1
10639: PUSH
10640: DOUBLE
10641: LD_INT 1
10643: DEC
10644: ST_TO_ADDR
10645: LD_INT 8
10647: PUSH
10648: FOR_TO
10649: IFFALSE 10774
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10651: LD_EXP 7
10655: PUSH
10656: LD_VAR 0 1
10660: ARRAY
10661: IFFALSE 10674
10663: PUSH
10664: LD_VAR 0 1
10668: PPUSH
10669: CALL_OW 108
10673: AND
10674: IFFALSE 10688
10676: PUSH
10677: LD_VAR 0 1
10681: PUSH
10682: LD_OWVAR 2
10686: NONEQUAL
10687: AND
10688: IFFALSE 10772
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10690: LD_EXP 8
10694: PUSH
10695: LD_VAR 0 1
10699: ARRAY
10700: NOT
10701: IFTRUE 10749
10703: PUSH
10704: LD_EXP 8
10708: PUSH
10709: LD_VAR 0 1
10713: ARRAY
10714: PUSH
10715: LD_EXP 8
10719: PUSH
10720: LD_OWVAR 2
10724: ARRAY
10725: NONEQUAL
10726: IFFALSE 10748
10728: PUSH
10729: LD_OWVAR 2
10733: PPUSH
10734: LD_VAR 0 1
10738: PPUSH
10739: CALL_OW 81
10743: PUSH
10744: LD_INT 1
10746: NONEQUAL
10747: AND
10748: OR
10749: IFFALSE 10772
// if HasPower ( i ) then
10751: LD_VAR 0 1
10755: PPUSH
10756: CALL 10833 0 1
10760: IFFALSE 10772
// begin canWin := false ;
10762: LD_ADDR_VAR 0 2
10766: PUSH
10767: LD_INT 0
10769: ST_TO_ADDR
// break ;
10770: GO 10774
// end ;
10772: GO 10648
10774: POP
10775: POP
// if canWin then
10776: LD_VAR 0 2
10780: IFFALSE 10787
// enable ( mpWin ) else
10782: LD_INT 101
10784: ENABLE_MARKED
10785: GO 10788
// enable ;
10787: ENABLE
// end ; end ;
10788: PPOPN 2
10790: END
// function CanWinLoose ; begin
10791: LD_INT 0
10793: PPUSH
// result := true ;
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10802: CALL_OW 531
10806: IFFALSE 10818
10808: PUSH
10809: CALL_OW 519
10813: PUSH
10814: LD_INT 1
10816: GREATER
10817: AND
10818: IFFALSE 10828
// result := false ;
10820: LD_ADDR_VAR 0 1
10824: PUSH
10825: LD_INT 0
10827: ST_TO_ADDR
// end ;
10828: LD_VAR 0 1
10832: RET
// function HasPower ( i ) ; begin
10833: LD_INT 0
10835: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_INT 22
10843: PUSH
10844: LD_VAR 0 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 2
10855: PUSH
10856: LD_INT 21
10858: PUSH
10859: LD_INT 1
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 33
10868: PUSH
10869: LD_INT 3
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 33
10878: PUSH
10879: LD_INT 5
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PPUSH
10896: CALL_OW 69
10900: ST_TO_ADDR
// end ; end_of_file
10901: LD_VAR 0 2
10905: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10906: LD_EXP 39
10910: IFFALSE 10953
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
// begin for i := 1 to 8 do
10918: LD_ADDR_VAR 0 1
10922: PUSH
10923: DOUBLE
10924: LD_INT 1
10926: DEC
10927: ST_TO_ADDR
10928: LD_INT 8
10930: PUSH
10931: FOR_TO
10932: IFFALSE 10951
// SetRestrict ( b_depot , i , state_disabled ) ;
10934: LD_INT 0
10936: PPUSH
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_INT 0
10944: PPUSH
10945: CALL_OW 324
10949: GO 10931
10951: POP
10952: POP
// end ;
10953: PPOPN 1
10955: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10956: LD_EXP 39
10960: IFFALSE 10968
10962: PUSH
10963: CALL 11178 0 0
10967: AND
10968: IFFALSE 10976
10970: PUSH
10971: LD_OWVAR 4
10975: AND
10976: IFFALSE 11175
10978: GO 10980
10980: DISABLE
10981: LD_INT 0
10983: PPUSH
10984: PPUSH
// begin canWin := false ;
10985: LD_ADDR_VAR 0 2
10989: PUSH
10990: LD_INT 0
10992: ST_TO_ADDR
// if not HasPower ( your_side ) then
10993: LD_OWVAR 2
10997: PPUSH
10998: CALL 11220 0 1
11002: NOT
11003: IFFALSE 11014
// begin Multiplayer_Loose_Message ;
11005: CALL_OW 521
// enable ( mpLose ) ;
11009: LD_INT 102
11011: ENABLE_MARKED
// end else
11012: GO 11175
// begin canWin := true ;
11014: LD_ADDR_VAR 0 2
11018: PUSH
11019: LD_INT 1
11021: ST_TO_ADDR
// for i := 1 to 8 do
11022: LD_ADDR_VAR 0 1
11026: PUSH
11027: DOUBLE
11028: LD_INT 1
11030: DEC
11031: ST_TO_ADDR
11032: LD_INT 8
11034: PUSH
11035: FOR_TO
11036: IFFALSE 11161
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11038: LD_EXP 7
11042: PUSH
11043: LD_VAR 0 1
11047: ARRAY
11048: IFFALSE 11061
11050: PUSH
11051: LD_VAR 0 1
11055: PPUSH
11056: CALL_OW 108
11060: AND
11061: IFFALSE 11075
11063: PUSH
11064: LD_VAR 0 1
11068: PUSH
11069: LD_OWVAR 2
11073: NONEQUAL
11074: AND
11075: IFFALSE 11159
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11077: LD_EXP 8
11081: PUSH
11082: LD_VAR 0 1
11086: ARRAY
11087: NOT
11088: IFTRUE 11136
11090: PUSH
11091: LD_EXP 8
11095: PUSH
11096: LD_VAR 0 1
11100: ARRAY
11101: PUSH
11102: LD_EXP 8
11106: PUSH
11107: LD_OWVAR 2
11111: ARRAY
11112: NONEQUAL
11113: IFFALSE 11135
11115: PUSH
11116: LD_OWVAR 2
11120: PPUSH
11121: LD_VAR 0 1
11125: PPUSH
11126: CALL_OW 81
11130: PUSH
11131: LD_INT 1
11133: NONEQUAL
11134: AND
11135: OR
11136: IFFALSE 11159
// if HasPower ( i ) then
11138: LD_VAR 0 1
11142: PPUSH
11143: CALL 11220 0 1
11147: IFFALSE 11159
// begin canWin := false ;
11149: LD_ADDR_VAR 0 2
11153: PUSH
11154: LD_INT 0
11156: ST_TO_ADDR
// break ;
11157: GO 11161
// end ;
11159: GO 11035
11161: POP
11162: POP
// if canWin then
11163: LD_VAR 0 2
11167: IFFALSE 11174
// enable ( mpWin ) else
11169: LD_INT 101
11171: ENABLE_MARKED
11172: GO 11175
// enable ;
11174: ENABLE
// end ; end ;
11175: PPOPN 2
11177: END
// function CanWinLoose ; begin
11178: LD_INT 0
11180: PPUSH
// result := true ;
11181: LD_ADDR_VAR 0 1
11185: PUSH
11186: LD_INT 1
11188: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11189: CALL_OW 531
11193: IFFALSE 11205
11195: PUSH
11196: CALL_OW 519
11200: PUSH
11201: LD_INT 1
11203: GREATER
11204: AND
11205: IFFALSE 11215
// result := false ;
11207: LD_ADDR_VAR 0 1
11211: PUSH
11212: LD_INT 0
11214: ST_TO_ADDR
// end ;
11215: LD_VAR 0 1
11219: RET
// function HasPower ( i ) ; begin
11220: LD_INT 0
11222: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11223: LD_INT 22
11225: PUSH
11226: LD_VAR 0 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: LD_INT 30
11240: PUSH
11241: LD_INT 0
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 30
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: NOT
11272: IFFALSE 11276
// exit ;
11274: GO 11341
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11276: LD_ADDR_VAR 0 2
11280: PUSH
11281: LD_INT 22
11283: PUSH
11284: LD_VAR 0 1
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 2
11295: PUSH
11296: LD_INT 21
11298: PUSH
11299: LD_INT 1
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 33
11308: PUSH
11309: LD_INT 3
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: LD_INT 33
11318: PUSH
11319: LD_INT 5
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PPUSH
11336: CALL_OW 69
11340: ST_TO_ADDR
// end ; end_of_file
11341: LD_VAR 0 2
11345: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11346: LD_INT 0
11348: PPUSH
11349: PPUSH
// if exist_mode then
11350: LD_VAR 0 2
11354: IFFALSE 11400
// begin unit := CreateCharacter ( prefix & ident ) ;
11356: LD_ADDR_VAR 0 5
11360: PUSH
11361: LD_VAR 0 3
11365: PUSH
11366: LD_VAR 0 1
11370: STR
11371: PPUSH
11372: CALL_OW 34
11376: ST_TO_ADDR
// if unit then
11377: LD_VAR 0 5
11381: IFFALSE 11398
// DeleteCharacters ( prefix & ident ) ;
11383: LD_VAR 0 3
11387: PUSH
11388: LD_VAR 0 1
11392: STR
11393: PPUSH
11394: CALL_OW 40
// end else
11398: GO 11415
// unit := NewCharacter ( ident ) ;
11400: LD_ADDR_VAR 0 5
11404: PUSH
11405: LD_VAR 0 1
11409: PPUSH
11410: CALL_OW 25
11414: ST_TO_ADDR
// result := unit ;
11415: LD_ADDR_VAR 0 4
11419: PUSH
11420: LD_VAR 0 5
11424: ST_TO_ADDR
// end ;
11425: LD_VAR 0 4
11429: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11430: LD_INT 0
11432: PPUSH
11433: PPUSH
// if exist_mode then
11434: LD_VAR 0 2
11438: IFFALSE 11463
// unit := CreateCharacter ( prefix & ident ) else
11440: LD_ADDR_VAR 0 5
11444: PUSH
11445: LD_VAR 0 3
11449: PUSH
11450: LD_VAR 0 1
11454: STR
11455: PPUSH
11456: CALL_OW 34
11460: ST_TO_ADDR
11461: GO 11478
// unit := NewCharacter ( ident ) ;
11463: LD_ADDR_VAR 0 5
11467: PUSH
11468: LD_VAR 0 1
11472: PPUSH
11473: CALL_OW 25
11477: ST_TO_ADDR
// result := unit ;
11478: LD_ADDR_VAR 0 4
11482: PUSH
11483: LD_VAR 0 5
11487: ST_TO_ADDR
// end ;
11488: LD_VAR 0 4
11492: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11493: LD_INT 0
11495: PPUSH
11496: PPUSH
// if not side or not nation then
11497: LD_VAR 0 1
11501: NOT
11502: IFTRUE 11511
11504: PUSH
11505: LD_VAR 0 2
11509: NOT
11510: OR
11511: IFFALSE 11515
// exit ;
11513: GO 12309
// case nation of nation_american :
11515: LD_VAR 0 2
11519: PUSH
11520: LD_INT 1
11522: DOUBLE
11523: EQUAL
11524: IFTRUE 11528
11526: GO 11750
11528: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11529: LD_ADDR_VAR 0 4
11533: PUSH
11534: LD_INT 35
11536: PUSH
11537: LD_INT 45
11539: PUSH
11540: LD_INT 46
11542: PUSH
11543: LD_INT 47
11545: PUSH
11546: LD_INT 82
11548: PUSH
11549: LD_INT 83
11551: PUSH
11552: LD_INT 84
11554: PUSH
11555: LD_INT 85
11557: PUSH
11558: LD_INT 86
11560: PUSH
11561: LD_INT 1
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: LD_INT 6
11569: PUSH
11570: LD_INT 15
11572: PUSH
11573: LD_INT 16
11575: PUSH
11576: LD_INT 7
11578: PUSH
11579: LD_INT 12
11581: PUSH
11582: LD_INT 13
11584: PUSH
11585: LD_INT 10
11587: PUSH
11588: LD_INT 14
11590: PUSH
11591: LD_INT 20
11593: PUSH
11594: LD_INT 21
11596: PUSH
11597: LD_INT 22
11599: PUSH
11600: LD_INT 25
11602: PUSH
11603: LD_INT 32
11605: PUSH
11606: LD_INT 27
11608: PUSH
11609: LD_INT 36
11611: PUSH
11612: LD_INT 69
11614: PUSH
11615: LD_INT 39
11617: PUSH
11618: LD_INT 34
11620: PUSH
11621: LD_INT 40
11623: PUSH
11624: LD_INT 48
11626: PUSH
11627: LD_INT 49
11629: PUSH
11630: LD_INT 50
11632: PUSH
11633: LD_INT 51
11635: PUSH
11636: LD_INT 52
11638: PUSH
11639: LD_INT 53
11641: PUSH
11642: LD_INT 54
11644: PUSH
11645: LD_INT 55
11647: PUSH
11648: LD_INT 56
11650: PUSH
11651: LD_INT 57
11653: PUSH
11654: LD_INT 58
11656: PUSH
11657: LD_INT 59
11659: PUSH
11660: LD_INT 60
11662: PUSH
11663: LD_INT 61
11665: PUSH
11666: LD_INT 62
11668: PUSH
11669: LD_INT 80
11671: PUSH
11672: LD_INT 82
11674: PUSH
11675: LD_INT 83
11677: PUSH
11678: LD_INT 84
11680: PUSH
11681: LD_INT 85
11683: PUSH
11684: LD_INT 86
11686: PUSH
11687: LD_INT 90
11689: PUSH
11690: LD_INT 93
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: ST_TO_ADDR
11748: GO 12231
11750: LD_INT 2
11752: DOUBLE
11753: EQUAL
11754: IFTRUE 11758
11756: GO 11992
11758: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11759: LD_ADDR_VAR 0 4
11763: PUSH
11764: LD_INT 35
11766: PUSH
11767: LD_INT 45
11769: PUSH
11770: LD_INT 46
11772: PUSH
11773: LD_INT 47
11775: PUSH
11776: LD_INT 82
11778: PUSH
11779: LD_INT 83
11781: PUSH
11782: LD_INT 84
11784: PUSH
11785: LD_INT 85
11787: PUSH
11788: LD_INT 87
11790: PUSH
11791: LD_INT 70
11793: PUSH
11794: LD_INT 1
11796: PUSH
11797: LD_INT 11
11799: PUSH
11800: LD_INT 3
11802: PUSH
11803: LD_INT 4
11805: PUSH
11806: LD_INT 5
11808: PUSH
11809: LD_INT 6
11811: PUSH
11812: LD_INT 15
11814: PUSH
11815: LD_INT 18
11817: PUSH
11818: LD_INT 7
11820: PUSH
11821: LD_INT 17
11823: PUSH
11824: LD_INT 8
11826: PUSH
11827: LD_INT 20
11829: PUSH
11830: LD_INT 21
11832: PUSH
11833: LD_INT 22
11835: PUSH
11836: LD_INT 72
11838: PUSH
11839: LD_INT 26
11841: PUSH
11842: LD_INT 69
11844: PUSH
11845: LD_INT 39
11847: PUSH
11848: LD_INT 40
11850: PUSH
11851: LD_INT 41
11853: PUSH
11854: LD_INT 42
11856: PUSH
11857: LD_INT 43
11859: PUSH
11860: LD_INT 48
11862: PUSH
11863: LD_INT 49
11865: PUSH
11866: LD_INT 50
11868: PUSH
11869: LD_INT 51
11871: PUSH
11872: LD_INT 52
11874: PUSH
11875: LD_INT 53
11877: PUSH
11878: LD_INT 54
11880: PUSH
11881: LD_INT 55
11883: PUSH
11884: LD_INT 56
11886: PUSH
11887: LD_INT 60
11889: PUSH
11890: LD_INT 61
11892: PUSH
11893: LD_INT 62
11895: PUSH
11896: LD_INT 66
11898: PUSH
11899: LD_INT 67
11901: PUSH
11902: LD_INT 68
11904: PUSH
11905: LD_INT 81
11907: PUSH
11908: LD_INT 82
11910: PUSH
11911: LD_INT 83
11913: PUSH
11914: LD_INT 84
11916: PUSH
11917: LD_INT 85
11919: PUSH
11920: LD_INT 87
11922: PUSH
11923: LD_INT 88
11925: PUSH
11926: LD_INT 92
11928: PUSH
11929: LD_INT 94
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: ST_TO_ADDR
11990: GO 12231
11992: LD_INT 3
11994: DOUBLE
11995: EQUAL
11996: IFTRUE 12000
11998: GO 12230
12000: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
12001: LD_ADDR_VAR 0 4
12005: PUSH
12006: LD_INT 46
12008: PUSH
12009: LD_INT 47
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: LD_INT 2
12017: PUSH
12018: LD_INT 82
12020: PUSH
12021: LD_INT 83
12023: PUSH
12024: LD_INT 84
12026: PUSH
12027: LD_INT 85
12029: PUSH
12030: LD_INT 86
12032: PUSH
12033: LD_INT 11
12035: PUSH
12036: LD_INT 9
12038: PUSH
12039: LD_INT 20
12041: PUSH
12042: LD_INT 19
12044: PUSH
12045: LD_INT 21
12047: PUSH
12048: LD_INT 24
12050: PUSH
12051: LD_INT 22
12053: PUSH
12054: LD_INT 25
12056: PUSH
12057: LD_INT 28
12059: PUSH
12060: LD_INT 29
12062: PUSH
12063: LD_INT 30
12065: PUSH
12066: LD_INT 31
12068: PUSH
12069: LD_INT 37
12071: PUSH
12072: LD_INT 38
12074: PUSH
12075: LD_INT 32
12077: PUSH
12078: LD_INT 27
12080: PUSH
12081: LD_INT 33
12083: PUSH
12084: LD_INT 69
12086: PUSH
12087: LD_INT 39
12089: PUSH
12090: LD_INT 34
12092: PUSH
12093: LD_INT 40
12095: PUSH
12096: LD_INT 71
12098: PUSH
12099: LD_INT 23
12101: PUSH
12102: LD_INT 44
12104: PUSH
12105: LD_INT 48
12107: PUSH
12108: LD_INT 49
12110: PUSH
12111: LD_INT 50
12113: PUSH
12114: LD_INT 51
12116: PUSH
12117: LD_INT 52
12119: PUSH
12120: LD_INT 53
12122: PUSH
12123: LD_INT 54
12125: PUSH
12126: LD_INT 55
12128: PUSH
12129: LD_INT 56
12131: PUSH
12132: LD_INT 57
12134: PUSH
12135: LD_INT 58
12137: PUSH
12138: LD_INT 59
12140: PUSH
12141: LD_INT 63
12143: PUSH
12144: LD_INT 64
12146: PUSH
12147: LD_INT 65
12149: PUSH
12150: LD_INT 82
12152: PUSH
12153: LD_INT 83
12155: PUSH
12156: LD_INT 84
12158: PUSH
12159: LD_INT 85
12161: PUSH
12162: LD_INT 86
12164: PUSH
12165: LD_INT 89
12167: PUSH
12168: LD_INT 91
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: ST_TO_ADDR
12228: GO 12231
12230: POP
// if state > - 1 and state < 3 then
12231: LD_VAR 0 3
12235: PUSH
12236: LD_INT 1
12238: NEG
12239: GREATER
12240: IFFALSE 12252
12242: PUSH
12243: LD_VAR 0 3
12247: PUSH
12248: LD_INT 3
12250: LESS
12251: AND
12252: IFFALSE 12309
// for i in result do
12254: LD_ADDR_VAR 0 5
12258: PUSH
12259: LD_VAR 0 4
12263: PUSH
12264: FOR_IN
12265: IFFALSE 12307
// if GetTech ( i , side ) <> state then
12267: LD_VAR 0 5
12271: PPUSH
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 321
12281: PUSH
12282: LD_VAR 0 3
12286: NONEQUAL
12287: IFFALSE 12305
// result := result diff i ;
12289: LD_ADDR_VAR 0 4
12293: PUSH
12294: LD_VAR 0 4
12298: PUSH
12299: LD_VAR 0 5
12303: DIFF
12304: ST_TO_ADDR
12305: GO 12264
12307: POP
12308: POP
// end ;
12309: LD_VAR 0 4
12313: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12314: LD_INT 0
12316: PPUSH
12317: PPUSH
12318: PPUSH
// result := true ;
12319: LD_ADDR_VAR 0 3
12323: PUSH
12324: LD_INT 1
12326: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12327: LD_ADDR_VAR 0 5
12331: PUSH
12332: LD_VAR 0 2
12336: PPUSH
12337: CALL_OW 480
12341: ST_TO_ADDR
// if not tmp then
12342: LD_VAR 0 5
12346: NOT
12347: IFFALSE 12351
// exit ;
12349: GO 12400
// for i in tmp do
12351: LD_ADDR_VAR 0 4
12355: PUSH
12356: LD_VAR 0 5
12360: PUSH
12361: FOR_IN
12362: IFFALSE 12398
// if GetTech ( i , side ) <> state_researched then
12364: LD_VAR 0 4
12368: PPUSH
12369: LD_VAR 0 1
12373: PPUSH
12374: CALL_OW 321
12378: PUSH
12379: LD_INT 2
12381: NONEQUAL
12382: IFFALSE 12396
// begin result := false ;
12384: LD_ADDR_VAR 0 3
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// exit ;
12392: POP
12393: POP
12394: GO 12400
// end ;
12396: GO 12361
12398: POP
12399: POP
// end ;
12400: LD_VAR 0 3
12404: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12405: LD_INT 0
12407: PPUSH
12408: PPUSH
12409: PPUSH
12410: PPUSH
12411: PPUSH
12412: PPUSH
12413: PPUSH
12414: PPUSH
12415: PPUSH
12416: PPUSH
12417: PPUSH
12418: PPUSH
12419: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12420: LD_VAR 0 1
12424: NOT
12425: IFTRUE 12442
12427: PUSH
12428: LD_VAR 0 1
12432: PPUSH
12433: CALL_OW 257
12437: PUSH
12438: LD_INT 9
12440: NONEQUAL
12441: OR
12442: IFFALSE 12446
// exit ;
12444: GO 13025
// side := GetSide ( unit ) ;
12446: LD_ADDR_VAR 0 9
12450: PUSH
12451: LD_VAR 0 1
12455: PPUSH
12456: CALL_OW 255
12460: ST_TO_ADDR
// tech_space := tech_spacanom ;
12461: LD_ADDR_VAR 0 12
12465: PUSH
12466: LD_INT 29
12468: ST_TO_ADDR
// tech_time := tech_taurad ;
12469: LD_ADDR_VAR 0 13
12473: PUSH
12474: LD_INT 28
12476: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12477: LD_ADDR_VAR 0 11
12481: PUSH
12482: LD_VAR 0 1
12486: PPUSH
12487: CALL_OW 310
12491: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12492: LD_VAR 0 11
12496: PPUSH
12497: CALL_OW 247
12501: PUSH
12502: LD_INT 2
12504: EQUAL
12505: IFFALSE 12509
// exit ;
12507: GO 13025
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12509: LD_ADDR_VAR 0 8
12513: PUSH
12514: LD_INT 81
12516: PUSH
12517: LD_VAR 0 9
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 3
12528: PUSH
12529: LD_INT 21
12531: PUSH
12532: LD_INT 3
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: ST_TO_ADDR
// if not tmp then
12552: LD_VAR 0 8
12556: NOT
12557: IFFALSE 12561
// exit ;
12559: GO 13025
// if in_unit then
12561: LD_VAR 0 11
12565: IFFALSE 12589
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12567: LD_ADDR_VAR 0 10
12571: PUSH
12572: LD_VAR 0 8
12576: PPUSH
12577: LD_VAR 0 11
12581: PPUSH
12582: CALL_OW 74
12586: ST_TO_ADDR
12587: GO 12609
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12589: LD_ADDR_VAR 0 10
12593: PUSH
12594: LD_VAR 0 8
12598: PPUSH
12599: LD_VAR 0 1
12603: PPUSH
12604: CALL_OW 74
12608: ST_TO_ADDR
// if not enemy then
12609: LD_VAR 0 10
12613: NOT
12614: IFFALSE 12618
// exit ;
12616: GO 13025
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12618: LD_VAR 0 11
12622: IFFALSE 12644
12624: PUSH
12625: LD_VAR 0 11
12629: PPUSH
12630: LD_VAR 0 10
12634: PPUSH
12635: CALL_OW 296
12639: PUSH
12640: LD_INT 13
12642: GREATER
12643: AND
12644: IFTRUE 12666
12646: PUSH
12647: LD_VAR 0 1
12651: PPUSH
12652: LD_VAR 0 10
12656: PPUSH
12657: CALL_OW 296
12661: PUSH
12662: LD_INT 12
12664: GREATER
12665: OR
12666: IFFALSE 12670
// exit ;
12668: GO 13025
// missile := [ 1 ] ;
12670: LD_ADDR_VAR 0 14
12674: PUSH
12675: LD_INT 1
12677: PUSH
12678: EMPTY
12679: LIST
12680: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12681: LD_VAR 0 9
12685: PPUSH
12686: LD_VAR 0 12
12690: PPUSH
12691: CALL_OW 325
12695: IFFALSE 12724
// missile := Replace ( missile , missile + 1 , 2 ) ;
12697: LD_ADDR_VAR 0 14
12701: PUSH
12702: LD_VAR 0 14
12706: PPUSH
12707: LD_VAR 0 14
12711: PUSH
12712: LD_INT 1
12714: PLUS
12715: PPUSH
12716: LD_INT 2
12718: PPUSH
12719: CALL_OW 1
12723: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12724: LD_VAR 0 9
12728: PPUSH
12729: LD_VAR 0 13
12733: PPUSH
12734: CALL_OW 325
12738: IFFALSE 12762
12740: PUSH
12741: LD_VAR 0 10
12745: PPUSH
12746: CALL_OW 255
12750: PPUSH
12751: LD_VAR 0 13
12755: PPUSH
12756: CALL_OW 325
12760: NOT
12761: AND
12762: IFFALSE 12791
// missile := Replace ( missile , missile + 1 , 3 ) ;
12764: LD_ADDR_VAR 0 14
12768: PUSH
12769: LD_VAR 0 14
12773: PPUSH
12774: LD_VAR 0 14
12778: PUSH
12779: LD_INT 1
12781: PLUS
12782: PPUSH
12783: LD_INT 3
12785: PPUSH
12786: CALL_OW 1
12790: ST_TO_ADDR
// if missile < 2 then
12791: LD_VAR 0 14
12795: PUSH
12796: LD_INT 2
12798: LESS
12799: IFFALSE 12803
// exit ;
12801: GO 13025
// x := GetX ( enemy ) ;
12803: LD_ADDR_VAR 0 4
12807: PUSH
12808: LD_VAR 0 10
12812: PPUSH
12813: CALL_OW 250
12817: ST_TO_ADDR
// y := GetY ( enemy ) ;
12818: LD_ADDR_VAR 0 5
12822: PUSH
12823: LD_VAR 0 10
12827: PPUSH
12828: CALL_OW 251
12832: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12833: LD_ADDR_VAR 0 6
12837: PUSH
12838: LD_VAR 0 4
12842: PUSH
12843: LD_INT 1
12845: NEG
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 12
12854: PLUS
12855: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12856: LD_ADDR_VAR 0 7
12860: PUSH
12861: LD_VAR 0 5
12865: PUSH
12866: LD_INT 1
12868: NEG
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: CALL_OW 12
12877: PLUS
12878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12879: LD_VAR 0 6
12883: PPUSH
12884: LD_VAR 0 7
12888: PPUSH
12889: CALL_OW 488
12893: NOT
12894: IFFALSE 12916
// begin _x := x ;
12896: LD_ADDR_VAR 0 6
12900: PUSH
12901: LD_VAR 0 4
12905: ST_TO_ADDR
// _y := y ;
12906: LD_ADDR_VAR 0 7
12910: PUSH
12911: LD_VAR 0 5
12915: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12916: LD_ADDR_VAR 0 3
12920: PUSH
12921: LD_INT 1
12923: PPUSH
12924: LD_VAR 0 14
12928: PPUSH
12929: CALL_OW 12
12933: ST_TO_ADDR
// case i of 1 :
12934: LD_VAR 0 3
12938: PUSH
12939: LD_INT 1
12941: DOUBLE
12942: EQUAL
12943: IFTRUE 12947
12945: GO 12964
12947: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12948: LD_VAR 0 1
12952: PPUSH
12953: LD_VAR 0 10
12957: PPUSH
12958: CALL_OW 115
12962: GO 13025
12964: LD_INT 2
12966: DOUBLE
12967: EQUAL
12968: IFTRUE 12972
12970: GO 12994
12972: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12973: LD_VAR 0 1
12977: PPUSH
12978: LD_VAR 0 6
12982: PPUSH
12983: LD_VAR 0 7
12987: PPUSH
12988: CALL_OW 153
12992: GO 13025
12994: LD_INT 3
12996: DOUBLE
12997: EQUAL
12998: IFTRUE 13002
13000: GO 13024
13002: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13003: LD_VAR 0 1
13007: PPUSH
13008: LD_VAR 0 6
13012: PPUSH
13013: LD_VAR 0 7
13017: PPUSH
13018: CALL_OW 154
13022: GO 13025
13024: POP
// end ;
13025: LD_VAR 0 2
13029: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13030: LD_INT 0
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
// if not unit or not building then
13038: LD_VAR 0 1
13042: NOT
13043: IFTRUE 13052
13045: PUSH
13046: LD_VAR 0 2
13050: NOT
13051: OR
13052: IFFALSE 13056
// exit ;
13054: GO 13214
// x := GetX ( building ) ;
13056: LD_ADDR_VAR 0 5
13060: PUSH
13061: LD_VAR 0 2
13065: PPUSH
13066: CALL_OW 250
13070: ST_TO_ADDR
// y := GetY ( building ) ;
13071: LD_ADDR_VAR 0 6
13075: PUSH
13076: LD_VAR 0 2
13080: PPUSH
13081: CALL_OW 251
13085: ST_TO_ADDR
// for i := 0 to 5 do
13086: LD_ADDR_VAR 0 4
13090: PUSH
13091: DOUBLE
13092: LD_INT 0
13094: DEC
13095: ST_TO_ADDR
13096: LD_INT 5
13098: PUSH
13099: FOR_TO
13100: IFFALSE 13212
// begin _x := ShiftX ( x , i , 3 ) ;
13102: LD_ADDR_VAR 0 7
13106: PUSH
13107: LD_VAR 0 5
13111: PPUSH
13112: LD_VAR 0 4
13116: PPUSH
13117: LD_INT 3
13119: PPUSH
13120: CALL_OW 272
13124: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13125: LD_ADDR_VAR 0 8
13129: PUSH
13130: LD_VAR 0 6
13134: PPUSH
13135: LD_VAR 0 4
13139: PPUSH
13140: LD_INT 3
13142: PPUSH
13143: CALL_OW 273
13147: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13148: LD_VAR 0 7
13152: PPUSH
13153: LD_VAR 0 8
13157: PPUSH
13158: CALL_OW 488
13162: NOT
13163: IFFALSE 13167
// continue ;
13165: GO 13099
// if HexInfo ( _x , _y ) = 0 then
13167: LD_VAR 0 7
13171: PPUSH
13172: LD_VAR 0 8
13176: PPUSH
13177: CALL_OW 428
13181: PUSH
13182: LD_INT 0
13184: EQUAL
13185: IFFALSE 13210
// begin ComMoveXY ( unit , _x , _y ) ;
13187: LD_VAR 0 1
13191: PPUSH
13192: LD_VAR 0 7
13196: PPUSH
13197: LD_VAR 0 8
13201: PPUSH
13202: CALL_OW 111
// exit ;
13206: POP
13207: POP
13208: GO 13214
// end ; end ;
13210: GO 13099
13212: POP
13213: POP
// end ;
13214: LD_VAR 0 3
13218: RET
// export function ScanBase ( side , base_area ) ; begin
13219: LD_INT 0
13221: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13222: LD_ADDR_VAR 0 3
13226: PUSH
13227: LD_VAR 0 2
13231: PPUSH
13232: LD_INT 81
13234: PUSH
13235: LD_VAR 0 1
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PPUSH
13244: CALL_OW 70
13248: ST_TO_ADDR
// end ;
13249: LD_VAR 0 3
13253: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13254: LD_INT 0
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
// result := false ;
13260: LD_ADDR_VAR 0 2
13264: PUSH
13265: LD_INT 0
13267: ST_TO_ADDR
// side := GetSide ( unit ) ;
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 255
13282: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13283: LD_ADDR_VAR 0 4
13287: PUSH
13288: LD_VAR 0 1
13292: PPUSH
13293: CALL_OW 248
13297: ST_TO_ADDR
// case nat of 1 :
13298: LD_VAR 0 4
13302: PUSH
13303: LD_INT 1
13305: DOUBLE
13306: EQUAL
13307: IFTRUE 13311
13309: GO 13322
13311: POP
// tech := tech_lassight ; 2 :
13312: LD_ADDR_VAR 0 5
13316: PUSH
13317: LD_INT 12
13319: ST_TO_ADDR
13320: GO 13361
13322: LD_INT 2
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13341
13330: POP
// tech := tech_mortar ; 3 :
13331: LD_ADDR_VAR 0 5
13335: PUSH
13336: LD_INT 41
13338: ST_TO_ADDR
13339: GO 13361
13341: LD_INT 3
13343: DOUBLE
13344: EQUAL
13345: IFTRUE 13349
13347: GO 13360
13349: POP
// tech := tech_bazooka ; end ;
13350: LD_ADDR_VAR 0 5
13354: PUSH
13355: LD_INT 44
13357: ST_TO_ADDR
13358: GO 13361
13360: POP
// if Researched ( side , tech ) then
13361: LD_VAR 0 3
13365: PPUSH
13366: LD_VAR 0 5
13370: PPUSH
13371: CALL_OW 325
13375: IFFALSE 13402
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13377: LD_ADDR_VAR 0 2
13381: PUSH
13382: LD_INT 5
13384: PUSH
13385: LD_INT 8
13387: PUSH
13388: LD_INT 9
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: LIST
13395: PUSH
13396: LD_VAR 0 4
13400: ARRAY
13401: ST_TO_ADDR
// end ;
13402: LD_VAR 0 2
13406: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13407: LD_INT 0
13409: PPUSH
13410: PPUSH
13411: PPUSH
// if not mines then
13412: LD_VAR 0 2
13416: NOT
13417: IFFALSE 13421
// exit ;
13419: GO 13565
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13421: LD_ADDR_VAR 0 5
13425: PUSH
13426: LD_INT 81
13428: PUSH
13429: LD_VAR 0 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 3
13440: PUSH
13441: LD_INT 21
13443: PUSH
13444: LD_INT 3
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: ST_TO_ADDR
// for i in mines do
13464: LD_ADDR_VAR 0 4
13468: PUSH
13469: LD_VAR 0 2
13473: PUSH
13474: FOR_IN
13475: IFFALSE 13563
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13477: LD_VAR 0 4
13481: PUSH
13482: LD_INT 1
13484: ARRAY
13485: PPUSH
13486: LD_VAR 0 4
13490: PUSH
13491: LD_INT 2
13493: ARRAY
13494: PPUSH
13495: CALL_OW 458
13499: NOT
13500: IFFALSE 13504
// continue ;
13502: GO 13474
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13504: LD_VAR 0 4
13508: PUSH
13509: LD_INT 1
13511: ARRAY
13512: PPUSH
13513: LD_VAR 0 4
13517: PUSH
13518: LD_INT 2
13520: ARRAY
13521: PPUSH
13522: CALL_OW 428
13526: PUSH
13527: LD_VAR 0 5
13531: IN
13532: IFFALSE 13561
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13534: LD_VAR 0 4
13538: PUSH
13539: LD_INT 1
13541: ARRAY
13542: PPUSH
13543: LD_VAR 0 4
13547: PUSH
13548: LD_INT 2
13550: ARRAY
13551: PPUSH
13552: LD_VAR 0 1
13556: PPUSH
13557: CALL_OW 456
// end ;
13561: GO 13474
13563: POP
13564: POP
// end ;
13565: LD_VAR 0 3
13569: RET
// export function Count ( array ) ; begin
13570: LD_INT 0
13572: PPUSH
// result := array + 0 ;
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_VAR 0 1
13582: PUSH
13583: LD_INT 0
13585: PLUS
13586: ST_TO_ADDR
// end ;
13587: LD_VAR 0 2
13591: RET
// export function IsEmpty ( building ) ; begin
13592: LD_INT 0
13594: PPUSH
// if not building then
13595: LD_VAR 0 1
13599: NOT
13600: IFFALSE 13604
// exit ;
13602: GO 13647
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13604: LD_ADDR_VAR 0 2
13608: PUSH
13609: LD_VAR 0 1
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_VAR 0 1
13621: PPUSH
13622: CALL_OW 255
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 58
13633: PUSH
13634: EMPTY
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PPUSH
13641: CALL_OW 69
13645: IN
13646: ST_TO_ADDR
// end ;
13647: LD_VAR 0 2
13651: RET
// export function IsNotFull ( building ) ; var places ; begin
13652: LD_INT 0
13654: PPUSH
13655: PPUSH
// if not building then
13656: LD_VAR 0 1
13660: NOT
13661: IFFALSE 13665
// exit ;
13663: GO 13693
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13665: LD_ADDR_VAR 0 2
13669: PUSH
13670: LD_VAR 0 1
13674: PPUSH
13675: LD_INT 3
13677: PUSH
13678: LD_INT 62
13680: PUSH
13681: EMPTY
13682: LIST
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PPUSH
13688: CALL_OW 72
13692: ST_TO_ADDR
// end ;
13693: LD_VAR 0 2
13697: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13698: LD_INT 0
13700: PPUSH
13701: PPUSH
13702: PPUSH
13703: PPUSH
// tmp := [ ] ;
13704: LD_ADDR_VAR 0 3
13708: PUSH
13709: EMPTY
13710: ST_TO_ADDR
// list := [ ] ;
13711: LD_ADDR_VAR 0 5
13715: PUSH
13716: EMPTY
13717: ST_TO_ADDR
// for i = 16 to 25 do
13718: LD_ADDR_VAR 0 4
13722: PUSH
13723: DOUBLE
13724: LD_INT 16
13726: DEC
13727: ST_TO_ADDR
13728: LD_INT 25
13730: PUSH
13731: FOR_TO
13732: IFFALSE 13805
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13734: LD_ADDR_VAR 0 3
13738: PUSH
13739: LD_VAR 0 3
13743: PUSH
13744: LD_INT 22
13746: PUSH
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 255
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: LD_INT 91
13763: PUSH
13764: LD_VAR 0 1
13768: PUSH
13769: LD_INT 6
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 30
13779: PUSH
13780: LD_VAR 0 4
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: PPUSH
13797: CALL_OW 69
13801: ADD
13802: ST_TO_ADDR
13803: GO 13731
13805: POP
13806: POP
// for i = 1 to tmp do
13807: LD_ADDR_VAR 0 4
13811: PUSH
13812: DOUBLE
13813: LD_INT 1
13815: DEC
13816: ST_TO_ADDR
13817: LD_VAR 0 3
13821: PUSH
13822: FOR_TO
13823: IFFALSE 13911
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13825: LD_ADDR_VAR 0 5
13829: PUSH
13830: LD_VAR 0 5
13834: PUSH
13835: LD_VAR 0 3
13839: PUSH
13840: LD_VAR 0 4
13844: ARRAY
13845: PPUSH
13846: CALL_OW 266
13850: PUSH
13851: LD_VAR 0 3
13855: PUSH
13856: LD_VAR 0 4
13860: ARRAY
13861: PPUSH
13862: CALL_OW 250
13866: PUSH
13867: LD_VAR 0 3
13871: PUSH
13872: LD_VAR 0 4
13876: ARRAY
13877: PPUSH
13878: CALL_OW 251
13882: PUSH
13883: LD_VAR 0 3
13887: PUSH
13888: LD_VAR 0 4
13892: ARRAY
13893: PPUSH
13894: CALL_OW 254
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: ADD
13908: ST_TO_ADDR
13909: GO 13822
13911: POP
13912: POP
// result := list ;
13913: LD_ADDR_VAR 0 2
13917: PUSH
13918: LD_VAR 0 5
13922: ST_TO_ADDR
// end ;
13923: LD_VAR 0 2
13927: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13928: LD_INT 0
13930: PPUSH
13931: PPUSH
13932: PPUSH
13933: PPUSH
13934: PPUSH
13935: PPUSH
13936: PPUSH
// if not factory then
13937: LD_VAR 0 1
13941: NOT
13942: IFFALSE 13946
// exit ;
13944: GO 14549
// if control = control_apeman then
13946: LD_VAR 0 4
13950: PUSH
13951: LD_INT 5
13953: EQUAL
13954: IFFALSE 14063
// begin tmp := UnitsInside ( factory ) ;
13956: LD_ADDR_VAR 0 8
13960: PUSH
13961: LD_VAR 0 1
13965: PPUSH
13966: CALL_OW 313
13970: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13971: LD_VAR 0 8
13975: PPUSH
13976: LD_INT 25
13978: PUSH
13979: LD_INT 12
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 72
13990: NOT
13991: IFFALSE 14001
// control := control_manual ;
13993: LD_ADDR_VAR 0 4
13997: PUSH
13998: LD_INT 1
14000: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14001: LD_ADDR_VAR 0 8
14005: PUSH
14006: LD_VAR 0 1
14010: PPUSH
14011: CALL 13698 0 1
14015: ST_TO_ADDR
// if tmp then
14016: LD_VAR 0 8
14020: IFFALSE 14063
// begin for i in tmp do
14022: LD_ADDR_VAR 0 7
14026: PUSH
14027: LD_VAR 0 8
14031: PUSH
14032: FOR_IN
14033: IFFALSE 14061
// if i [ 1 ] = b_ext_radio then
14035: LD_VAR 0 7
14039: PUSH
14040: LD_INT 1
14042: ARRAY
14043: PUSH
14044: LD_INT 22
14046: EQUAL
14047: IFFALSE 14059
// begin control := control_remote ;
14049: LD_ADDR_VAR 0 4
14053: PUSH
14054: LD_INT 2
14056: ST_TO_ADDR
// break ;
14057: GO 14061
// end ;
14059: GO 14032
14061: POP
14062: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14063: LD_VAR 0 1
14067: PPUSH
14068: LD_VAR 0 2
14072: PPUSH
14073: LD_VAR 0 3
14077: PPUSH
14078: LD_VAR 0 4
14082: PPUSH
14083: LD_VAR 0 5
14087: PPUSH
14088: CALL_OW 448
14092: IFFALSE 14127
// begin result := [ chassis , engine , control , weapon ] ;
14094: LD_ADDR_VAR 0 6
14098: PUSH
14099: LD_VAR 0 2
14103: PUSH
14104: LD_VAR 0 3
14108: PUSH
14109: LD_VAR 0 4
14113: PUSH
14114: LD_VAR 0 5
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: ST_TO_ADDR
// exit ;
14125: GO 14549
// end ; _chassis := AvailableChassisList ( factory ) ;
14127: LD_ADDR_VAR 0 9
14131: PUSH
14132: LD_VAR 0 1
14136: PPUSH
14137: CALL_OW 475
14141: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14142: LD_ADDR_VAR 0 11
14146: PUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 476
14156: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14157: LD_ADDR_VAR 0 12
14161: PUSH
14162: LD_VAR 0 1
14166: PPUSH
14167: CALL_OW 477
14171: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14172: LD_ADDR_VAR 0 10
14176: PUSH
14177: LD_VAR 0 1
14181: PPUSH
14182: CALL_OW 478
14186: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14187: LD_VAR 0 9
14191: NOT
14192: IFTRUE 14201
14194: PUSH
14195: LD_VAR 0 11
14199: NOT
14200: OR
14201: IFTRUE 14210
14203: PUSH
14204: LD_VAR 0 12
14208: NOT
14209: OR
14210: IFTRUE 14219
14212: PUSH
14213: LD_VAR 0 10
14217: NOT
14218: OR
14219: IFFALSE 14254
// begin result := [ chassis , engine , control , weapon ] ;
14221: LD_ADDR_VAR 0 6
14225: PUSH
14226: LD_VAR 0 2
14230: PUSH
14231: LD_VAR 0 3
14235: PUSH
14236: LD_VAR 0 4
14240: PUSH
14241: LD_VAR 0 5
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: ST_TO_ADDR
// exit ;
14252: GO 14549
// end ; if not chassis in _chassis then
14254: LD_VAR 0 2
14258: PUSH
14259: LD_VAR 0 9
14263: IN
14264: NOT
14265: IFFALSE 14291
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14267: LD_ADDR_VAR 0 2
14271: PUSH
14272: LD_VAR 0 9
14276: PUSH
14277: LD_INT 1
14279: PPUSH
14280: LD_VAR 0 9
14284: PPUSH
14285: CALL_OW 12
14289: ARRAY
14290: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14291: LD_VAR 0 2
14295: PPUSH
14296: LD_VAR 0 3
14300: PPUSH
14301: CALL 14554 0 2
14305: NOT
14306: IFFALSE 14367
// repeat engine := _engine [ 1 ] ;
14308: LD_ADDR_VAR 0 3
14312: PUSH
14313: LD_VAR 0 11
14317: PUSH
14318: LD_INT 1
14320: ARRAY
14321: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14322: LD_ADDR_VAR 0 11
14326: PUSH
14327: LD_VAR 0 11
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: CALL_OW 3
14339: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_VAR 0 3
14349: PPUSH
14350: CALL 14554 0 2
14354: IFTRUE 14365
14356: PUSH
14357: LD_VAR 0 11
14361: PUSH
14362: EMPTY
14363: EQUAL
14364: OR
14365: IFFALSE 14308
// if not control in _control then
14367: LD_VAR 0 4
14371: PUSH
14372: LD_VAR 0 12
14376: IN
14377: NOT
14378: IFFALSE 14404
// control := _control [ rand ( 1 , _control ) ] ;
14380: LD_ADDR_VAR 0 4
14384: PUSH
14385: LD_VAR 0 12
14389: PUSH
14390: LD_INT 1
14392: PPUSH
14393: LD_VAR 0 12
14397: PPUSH
14398: CALL_OW 12
14402: ARRAY
14403: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14404: LD_VAR 0 2
14408: PPUSH
14409: LD_VAR 0 5
14413: PPUSH
14414: CALL 14776 0 2
14418: NOT
14419: IFFALSE 14480
// repeat weapon := _weapon [ 1 ] ;
14421: LD_ADDR_VAR 0 5
14425: PUSH
14426: LD_VAR 0 10
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14435: LD_ADDR_VAR 0 10
14439: PUSH
14440: LD_VAR 0 10
14444: PPUSH
14445: LD_INT 1
14447: PPUSH
14448: CALL_OW 3
14452: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14453: LD_VAR 0 2
14457: PPUSH
14458: LD_VAR 0 5
14462: PPUSH
14463: CALL 14776 0 2
14467: IFTRUE 14478
14469: PUSH
14470: LD_VAR 0 10
14474: PUSH
14475: EMPTY
14476: EQUAL
14477: OR
14478: IFFALSE 14421
// result := [ ] ;
14480: LD_ADDR_VAR 0 6
14484: PUSH
14485: EMPTY
14486: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14487: LD_VAR 0 1
14491: PPUSH
14492: LD_VAR 0 2
14496: PPUSH
14497: LD_VAR 0 3
14501: PPUSH
14502: LD_VAR 0 4
14506: PPUSH
14507: LD_VAR 0 5
14511: PPUSH
14512: CALL_OW 448
14516: IFFALSE 14549
// result := [ chassis , engine , control , weapon ] ;
14518: LD_ADDR_VAR 0 6
14522: PUSH
14523: LD_VAR 0 2
14527: PUSH
14528: LD_VAR 0 3
14532: PUSH
14533: LD_VAR 0 4
14537: PUSH
14538: LD_VAR 0 5
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: ST_TO_ADDR
// end ;
14549: LD_VAR 0 6
14553: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14554: LD_INT 0
14556: PPUSH
// if not chassis or not engine then
14557: LD_VAR 0 1
14561: NOT
14562: IFTRUE 14571
14564: PUSH
14565: LD_VAR 0 2
14569: NOT
14570: OR
14571: IFFALSE 14575
// exit ;
14573: GO 14771
// case engine of engine_solar :
14575: LD_VAR 0 2
14579: PUSH
14580: LD_INT 2
14582: DOUBLE
14583: EQUAL
14584: IFTRUE 14588
14586: GO 14626
14588: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14589: LD_ADDR_VAR 0 3
14593: PUSH
14594: LD_INT 11
14596: PUSH
14597: LD_INT 12
14599: PUSH
14600: LD_INT 13
14602: PUSH
14603: LD_INT 14
14605: PUSH
14606: LD_INT 1
14608: PUSH
14609: LD_INT 2
14611: PUSH
14612: LD_INT 3
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: ST_TO_ADDR
14624: GO 14755
14626: LD_INT 1
14628: DOUBLE
14629: EQUAL
14630: IFTRUE 14634
14632: GO 14696
14634: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14635: LD_ADDR_VAR 0 3
14639: PUSH
14640: LD_INT 11
14642: PUSH
14643: LD_INT 12
14645: PUSH
14646: LD_INT 13
14648: PUSH
14649: LD_INT 14
14651: PUSH
14652: LD_INT 1
14654: PUSH
14655: LD_INT 2
14657: PUSH
14658: LD_INT 3
14660: PUSH
14661: LD_INT 4
14663: PUSH
14664: LD_INT 5
14666: PUSH
14667: LD_INT 21
14669: PUSH
14670: LD_INT 23
14672: PUSH
14673: LD_INT 22
14675: PUSH
14676: LD_INT 24
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: ST_TO_ADDR
14694: GO 14755
14696: LD_INT 3
14698: DOUBLE
14699: EQUAL
14700: IFTRUE 14704
14702: GO 14754
14704: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14705: LD_ADDR_VAR 0 3
14709: PUSH
14710: LD_INT 13
14712: PUSH
14713: LD_INT 14
14715: PUSH
14716: LD_INT 2
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: LD_INT 5
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 22
14733: PUSH
14734: LD_INT 23
14736: PUSH
14737: LD_INT 24
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: ST_TO_ADDR
14752: GO 14755
14754: POP
// result := ( chassis in result ) ;
14755: LD_ADDR_VAR 0 3
14759: PUSH
14760: LD_VAR 0 1
14764: PUSH
14765: LD_VAR 0 3
14769: IN
14770: ST_TO_ADDR
// end ;
14771: LD_VAR 0 3
14775: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14776: LD_INT 0
14778: PPUSH
// if not chassis or not weapon then
14779: LD_VAR 0 1
14783: NOT
14784: IFTRUE 14793
14786: PUSH
14787: LD_VAR 0 2
14791: NOT
14792: OR
14793: IFFALSE 14797
// exit ;
14795: GO 15891
// case weapon of us_machine_gun :
14797: LD_VAR 0 2
14801: PUSH
14802: LD_INT 2
14804: DOUBLE
14805: EQUAL
14806: IFTRUE 14810
14808: GO 14840
14810: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14811: LD_ADDR_VAR 0 3
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: LD_INT 3
14824: PUSH
14825: LD_INT 4
14827: PUSH
14828: LD_INT 5
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: ST_TO_ADDR
14838: GO 15875
14840: LD_INT 3
14842: DOUBLE
14843: EQUAL
14844: IFTRUE 14848
14846: GO 14878
14848: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14849: LD_ADDR_VAR 0 3
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: LD_INT 4
14865: PUSH
14866: LD_INT 5
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: ST_TO_ADDR
14876: GO 15875
14878: LD_INT 11
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 14916
14886: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14887: LD_ADDR_VAR 0 3
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: LD_INT 2
14897: PUSH
14898: LD_INT 3
14900: PUSH
14901: LD_INT 4
14903: PUSH
14904: LD_INT 5
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: ST_TO_ADDR
14914: GO 15875
14916: LD_INT 4
14918: DOUBLE
14919: EQUAL
14920: IFTRUE 14924
14922: GO 14950
14924: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14925: LD_ADDR_VAR 0 3
14929: PUSH
14930: LD_INT 2
14932: PUSH
14933: LD_INT 3
14935: PUSH
14936: LD_INT 4
14938: PUSH
14939: LD_INT 5
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: ST_TO_ADDR
14948: GO 15875
14950: LD_INT 5
14952: DOUBLE
14953: EQUAL
14954: IFTRUE 14958
14956: GO 14984
14958: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_INT 2
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: LD_INT 4
14972: PUSH
14973: LD_INT 5
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: ST_TO_ADDR
14982: GO 15875
14984: LD_INT 9
14986: DOUBLE
14987: EQUAL
14988: IFTRUE 14992
14990: GO 15018
14992: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_INT 2
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: LD_INT 4
15006: PUSH
15007: LD_INT 5
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 15875
15018: LD_INT 7
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15052
15026: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_INT 2
15034: PUSH
15035: LD_INT 3
15037: PUSH
15038: LD_INT 4
15040: PUSH
15041: LD_INT 5
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: ST_TO_ADDR
15050: GO 15875
15052: LD_INT 12
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15086
15060: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15061: LD_ADDR_VAR 0 3
15065: PUSH
15066: LD_INT 2
15068: PUSH
15069: LD_INT 3
15071: PUSH
15072: LD_INT 4
15074: PUSH
15075: LD_INT 5
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: ST_TO_ADDR
15084: GO 15875
15086: LD_INT 13
15088: DOUBLE
15089: EQUAL
15090: IFTRUE 15094
15092: GO 15120
15094: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15095: LD_ADDR_VAR 0 3
15099: PUSH
15100: LD_INT 2
15102: PUSH
15103: LD_INT 3
15105: PUSH
15106: LD_INT 4
15108: PUSH
15109: LD_INT 5
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: ST_TO_ADDR
15118: GO 15875
15120: LD_INT 14
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15146
15128: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15129: LD_ADDR_VAR 0 3
15133: PUSH
15134: LD_INT 4
15136: PUSH
15137: LD_INT 5
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: ST_TO_ADDR
15144: GO 15875
15146: LD_INT 6
15148: DOUBLE
15149: EQUAL
15150: IFTRUE 15154
15152: GO 15172
15154: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15155: LD_ADDR_VAR 0 3
15159: PUSH
15160: LD_INT 4
15162: PUSH
15163: LD_INT 5
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: ST_TO_ADDR
15170: GO 15875
15172: LD_INT 10
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15198
15180: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15181: LD_ADDR_VAR 0 3
15185: PUSH
15186: LD_INT 4
15188: PUSH
15189: LD_INT 5
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: ST_TO_ADDR
15196: GO 15875
15198: LD_INT 22
15200: DOUBLE
15201: EQUAL
15202: IFTRUE 15206
15204: GO 15232
15206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15207: LD_ADDR_VAR 0 3
15211: PUSH
15212: LD_INT 11
15214: PUSH
15215: LD_INT 12
15217: PUSH
15218: LD_INT 13
15220: PUSH
15221: LD_INT 14
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: ST_TO_ADDR
15230: GO 15875
15232: LD_INT 23
15234: DOUBLE
15235: EQUAL
15236: IFTRUE 15240
15238: GO 15266
15240: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15241: LD_ADDR_VAR 0 3
15245: PUSH
15246: LD_INT 11
15248: PUSH
15249: LD_INT 12
15251: PUSH
15252: LD_INT 13
15254: PUSH
15255: LD_INT 14
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: ST_TO_ADDR
15264: GO 15875
15266: LD_INT 24
15268: DOUBLE
15269: EQUAL
15270: IFTRUE 15274
15272: GO 15300
15274: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15275: LD_ADDR_VAR 0 3
15279: PUSH
15280: LD_INT 11
15282: PUSH
15283: LD_INT 12
15285: PUSH
15286: LD_INT 13
15288: PUSH
15289: LD_INT 14
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: ST_TO_ADDR
15298: GO 15875
15300: LD_INT 30
15302: DOUBLE
15303: EQUAL
15304: IFTRUE 15308
15306: GO 15334
15308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15309: LD_ADDR_VAR 0 3
15313: PUSH
15314: LD_INT 11
15316: PUSH
15317: LD_INT 12
15319: PUSH
15320: LD_INT 13
15322: PUSH
15323: LD_INT 14
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: ST_TO_ADDR
15332: GO 15875
15334: LD_INT 25
15336: DOUBLE
15337: EQUAL
15338: IFTRUE 15342
15340: GO 15360
15342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15343: LD_ADDR_VAR 0 3
15347: PUSH
15348: LD_INT 13
15350: PUSH
15351: LD_INT 14
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: ST_TO_ADDR
15358: GO 15875
15360: LD_INT 27
15362: DOUBLE
15363: EQUAL
15364: IFTRUE 15368
15366: GO 15386
15368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15369: LD_ADDR_VAR 0 3
15373: PUSH
15374: LD_INT 13
15376: PUSH
15377: LD_INT 14
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: ST_TO_ADDR
15384: GO 15875
15386: LD_INT 92
15388: DOUBLE
15389: EQUAL
15390: IFTRUE 15394
15392: GO 15420
15394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15395: LD_ADDR_VAR 0 3
15399: PUSH
15400: LD_INT 11
15402: PUSH
15403: LD_INT 12
15405: PUSH
15406: LD_INT 13
15408: PUSH
15409: LD_INT 14
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: ST_TO_ADDR
15418: GO 15875
15420: LD_INT 28
15422: DOUBLE
15423: EQUAL
15424: IFTRUE 15428
15426: GO 15446
15428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15429: LD_ADDR_VAR 0 3
15433: PUSH
15434: LD_INT 13
15436: PUSH
15437: LD_INT 14
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: ST_TO_ADDR
15444: GO 15875
15446: LD_INT 29
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15472
15454: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15455: LD_ADDR_VAR 0 3
15459: PUSH
15460: LD_INT 13
15462: PUSH
15463: LD_INT 14
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: ST_TO_ADDR
15470: GO 15875
15472: LD_INT 31
15474: DOUBLE
15475: EQUAL
15476: IFTRUE 15480
15478: GO 15498
15480: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: LD_INT 13
15488: PUSH
15489: LD_INT 14
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: ST_TO_ADDR
15496: GO 15875
15498: LD_INT 26
15500: DOUBLE
15501: EQUAL
15502: IFTRUE 15506
15504: GO 15524
15506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15507: LD_ADDR_VAR 0 3
15511: PUSH
15512: LD_INT 13
15514: PUSH
15515: LD_INT 14
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: ST_TO_ADDR
15522: GO 15875
15524: LD_INT 42
15526: DOUBLE
15527: EQUAL
15528: IFTRUE 15532
15530: GO 15558
15532: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15533: LD_ADDR_VAR 0 3
15537: PUSH
15538: LD_INT 21
15540: PUSH
15541: LD_INT 22
15543: PUSH
15544: LD_INT 23
15546: PUSH
15547: LD_INT 24
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: ST_TO_ADDR
15556: GO 15875
15558: LD_INT 43
15560: DOUBLE
15561: EQUAL
15562: IFTRUE 15566
15564: GO 15592
15566: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15567: LD_ADDR_VAR 0 3
15571: PUSH
15572: LD_INT 21
15574: PUSH
15575: LD_INT 22
15577: PUSH
15578: LD_INT 23
15580: PUSH
15581: LD_INT 24
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: ST_TO_ADDR
15590: GO 15875
15592: LD_INT 44
15594: DOUBLE
15595: EQUAL
15596: IFTRUE 15600
15598: GO 15626
15600: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15601: LD_ADDR_VAR 0 3
15605: PUSH
15606: LD_INT 21
15608: PUSH
15609: LD_INT 22
15611: PUSH
15612: LD_INT 23
15614: PUSH
15615: LD_INT 24
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: ST_TO_ADDR
15624: GO 15875
15626: LD_INT 45
15628: DOUBLE
15629: EQUAL
15630: IFTRUE 15634
15632: GO 15660
15634: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15635: LD_ADDR_VAR 0 3
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 22
15645: PUSH
15646: LD_INT 23
15648: PUSH
15649: LD_INT 24
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: ST_TO_ADDR
15658: GO 15875
15660: LD_INT 49
15662: DOUBLE
15663: EQUAL
15664: IFTRUE 15668
15666: GO 15694
15668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15669: LD_ADDR_VAR 0 3
15673: PUSH
15674: LD_INT 21
15676: PUSH
15677: LD_INT 22
15679: PUSH
15680: LD_INT 23
15682: PUSH
15683: LD_INT 24
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: ST_TO_ADDR
15692: GO 15875
15694: LD_INT 51
15696: DOUBLE
15697: EQUAL
15698: IFTRUE 15702
15700: GO 15728
15702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15703: LD_ADDR_VAR 0 3
15707: PUSH
15708: LD_INT 21
15710: PUSH
15711: LD_INT 22
15713: PUSH
15714: LD_INT 23
15716: PUSH
15717: LD_INT 24
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: ST_TO_ADDR
15726: GO 15875
15728: LD_INT 52
15730: DOUBLE
15731: EQUAL
15732: IFTRUE 15736
15734: GO 15762
15736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15737: LD_ADDR_VAR 0 3
15741: PUSH
15742: LD_INT 21
15744: PUSH
15745: LD_INT 22
15747: PUSH
15748: LD_INT 23
15750: PUSH
15751: LD_INT 24
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: ST_TO_ADDR
15760: GO 15875
15762: LD_INT 53
15764: DOUBLE
15765: EQUAL
15766: IFTRUE 15770
15768: GO 15788
15770: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15771: LD_ADDR_VAR 0 3
15775: PUSH
15776: LD_INT 23
15778: PUSH
15779: LD_INT 24
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: ST_TO_ADDR
15786: GO 15875
15788: LD_INT 46
15790: DOUBLE
15791: EQUAL
15792: IFTRUE 15796
15794: GO 15814
15796: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15797: LD_ADDR_VAR 0 3
15801: PUSH
15802: LD_INT 23
15804: PUSH
15805: LD_INT 24
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: ST_TO_ADDR
15812: GO 15875
15814: LD_INT 47
15816: DOUBLE
15817: EQUAL
15818: IFTRUE 15822
15820: GO 15840
15822: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15823: LD_ADDR_VAR 0 3
15827: PUSH
15828: LD_INT 23
15830: PUSH
15831: LD_INT 24
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: ST_TO_ADDR
15838: GO 15875
15840: LD_INT 98
15842: DOUBLE
15843: EQUAL
15844: IFTRUE 15848
15846: GO 15874
15848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15849: LD_ADDR_VAR 0 3
15853: PUSH
15854: LD_INT 21
15856: PUSH
15857: LD_INT 22
15859: PUSH
15860: LD_INT 23
15862: PUSH
15863: LD_INT 24
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: ST_TO_ADDR
15872: GO 15875
15874: POP
// result := ( chassis in result ) ;
15875: LD_ADDR_VAR 0 3
15879: PUSH
15880: LD_VAR 0 1
15884: PUSH
15885: LD_VAR 0 3
15889: IN
15890: ST_TO_ADDR
// end ;
15891: LD_VAR 0 3
15895: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15896: LD_INT 0
15898: PPUSH
15899: PPUSH
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
15904: PPUSH
// result := array ;
15905: LD_ADDR_VAR 0 5
15909: PUSH
15910: LD_VAR 0 1
15914: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15915: LD_VAR 0 1
15919: NOT
15920: IFTRUE 15929
15922: PUSH
15923: LD_VAR 0 2
15927: NOT
15928: OR
15929: IFTRUE 15938
15931: PUSH
15932: LD_VAR 0 3
15936: NOT
15937: OR
15938: IFTRUE 15952
15940: PUSH
15941: LD_VAR 0 2
15945: PUSH
15946: LD_VAR 0 1
15950: GREATER
15951: OR
15952: IFTRUE 15966
15954: PUSH
15955: LD_VAR 0 3
15959: PUSH
15960: LD_VAR 0 1
15964: GREATER
15965: OR
15966: IFFALSE 15970
// exit ;
15968: GO 16266
// if direction then
15970: LD_VAR 0 4
15974: IFFALSE 16038
// begin d := 1 ;
15976: LD_ADDR_VAR 0 9
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
// if i_from > i_to then
15984: LD_VAR 0 2
15988: PUSH
15989: LD_VAR 0 3
15993: GREATER
15994: IFFALSE 16020
// length := ( array - i_from ) + i_to else
15996: LD_ADDR_VAR 0 11
16000: PUSH
16001: LD_VAR 0 1
16005: PUSH
16006: LD_VAR 0 2
16010: MINUS
16011: PUSH
16012: LD_VAR 0 3
16016: PLUS
16017: ST_TO_ADDR
16018: GO 16036
// length := i_to - i_from ;
16020: LD_ADDR_VAR 0 11
16024: PUSH
16025: LD_VAR 0 3
16029: PUSH
16030: LD_VAR 0 2
16034: MINUS
16035: ST_TO_ADDR
// end else
16036: GO 16099
// begin d := - 1 ;
16038: LD_ADDR_VAR 0 9
16042: PUSH
16043: LD_INT 1
16045: NEG
16046: ST_TO_ADDR
// if i_from > i_to then
16047: LD_VAR 0 2
16051: PUSH
16052: LD_VAR 0 3
16056: GREATER
16057: IFFALSE 16077
// length := i_from - i_to else
16059: LD_ADDR_VAR 0 11
16063: PUSH
16064: LD_VAR 0 2
16068: PUSH
16069: LD_VAR 0 3
16073: MINUS
16074: ST_TO_ADDR
16075: GO 16099
// length := ( array - i_to ) + i_from ;
16077: LD_ADDR_VAR 0 11
16081: PUSH
16082: LD_VAR 0 1
16086: PUSH
16087: LD_VAR 0 3
16091: MINUS
16092: PUSH
16093: LD_VAR 0 2
16097: PLUS
16098: ST_TO_ADDR
// end ; if not length then
16099: LD_VAR 0 11
16103: NOT
16104: IFFALSE 16108
// exit ;
16106: GO 16266
// tmp := array ;
16108: LD_ADDR_VAR 0 10
16112: PUSH
16113: LD_VAR 0 1
16117: ST_TO_ADDR
// for i = 1 to length do
16118: LD_ADDR_VAR 0 6
16122: PUSH
16123: DOUBLE
16124: LD_INT 1
16126: DEC
16127: ST_TO_ADDR
16128: LD_VAR 0 11
16132: PUSH
16133: FOR_TO
16134: IFFALSE 16254
// begin for j = 1 to array do
16136: LD_ADDR_VAR 0 7
16140: PUSH
16141: DOUBLE
16142: LD_INT 1
16144: DEC
16145: ST_TO_ADDR
16146: LD_VAR 0 1
16150: PUSH
16151: FOR_TO
16152: IFFALSE 16240
// begin k := j + d ;
16154: LD_ADDR_VAR 0 8
16158: PUSH
16159: LD_VAR 0 7
16163: PUSH
16164: LD_VAR 0 9
16168: PLUS
16169: ST_TO_ADDR
// if k > array then
16170: LD_VAR 0 8
16174: PUSH
16175: LD_VAR 0 1
16179: GREATER
16180: IFFALSE 16190
// k := 1 ;
16182: LD_ADDR_VAR 0 8
16186: PUSH
16187: LD_INT 1
16189: ST_TO_ADDR
// if not k then
16190: LD_VAR 0 8
16194: NOT
16195: IFFALSE 16207
// k := array ;
16197: LD_ADDR_VAR 0 8
16201: PUSH
16202: LD_VAR 0 1
16206: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16207: LD_ADDR_VAR 0 10
16211: PUSH
16212: LD_VAR 0 10
16216: PPUSH
16217: LD_VAR 0 8
16221: PPUSH
16222: LD_VAR 0 1
16226: PUSH
16227: LD_VAR 0 7
16231: ARRAY
16232: PPUSH
16233: CALL_OW 1
16237: ST_TO_ADDR
// end ;
16238: GO 16151
16240: POP
16241: POP
// array := tmp ;
16242: LD_ADDR_VAR 0 1
16246: PUSH
16247: LD_VAR 0 10
16251: ST_TO_ADDR
// end ;
16252: GO 16133
16254: POP
16255: POP
// result := array ;
16256: LD_ADDR_VAR 0 5
16260: PUSH
16261: LD_VAR 0 1
16265: ST_TO_ADDR
// end ;
16266: LD_VAR 0 5
16270: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16271: LD_INT 0
16273: PPUSH
16274: PPUSH
// result := 0 ;
16275: LD_ADDR_VAR 0 3
16279: PUSH
16280: LD_INT 0
16282: ST_TO_ADDR
// if not array or not value in array then
16283: LD_VAR 0 1
16287: NOT
16288: IFTRUE 16303
16290: PUSH
16291: LD_VAR 0 2
16295: PUSH
16296: LD_VAR 0 1
16300: IN
16301: NOT
16302: OR
16303: IFFALSE 16307
// exit ;
16305: GO 16361
// for i = 1 to array do
16307: LD_ADDR_VAR 0 4
16311: PUSH
16312: DOUBLE
16313: LD_INT 1
16315: DEC
16316: ST_TO_ADDR
16317: LD_VAR 0 1
16321: PUSH
16322: FOR_TO
16323: IFFALSE 16359
// if value = array [ i ] then
16325: LD_VAR 0 2
16329: PUSH
16330: LD_VAR 0 1
16334: PUSH
16335: LD_VAR 0 4
16339: ARRAY
16340: EQUAL
16341: IFFALSE 16357
// begin result := i ;
16343: LD_ADDR_VAR 0 3
16347: PUSH
16348: LD_VAR 0 4
16352: ST_TO_ADDR
// exit ;
16353: POP
16354: POP
16355: GO 16361
// end ;
16357: GO 16322
16359: POP
16360: POP
// end ;
16361: LD_VAR 0 3
16365: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16366: LD_INT 0
16368: PPUSH
// vc_chassis := chassis ;
16369: LD_ADDR_OWVAR 37
16373: PUSH
16374: LD_VAR 0 1
16378: ST_TO_ADDR
// vc_engine := engine ;
16379: LD_ADDR_OWVAR 39
16383: PUSH
16384: LD_VAR 0 2
16388: ST_TO_ADDR
// vc_control := control ;
16389: LD_ADDR_OWVAR 38
16393: PUSH
16394: LD_VAR 0 3
16398: ST_TO_ADDR
// vc_weapon := weapon ;
16399: LD_ADDR_OWVAR 40
16403: PUSH
16404: LD_VAR 0 4
16408: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16409: LD_ADDR_OWVAR 41
16413: PUSH
16414: LD_VAR 0 5
16418: ST_TO_ADDR
// end ;
16419: LD_VAR 0 6
16423: RET
// export function WantPlant ( unit ) ; var task ; begin
16424: LD_INT 0
16426: PPUSH
16427: PPUSH
// result := false ;
16428: LD_ADDR_VAR 0 2
16432: PUSH
16433: LD_INT 0
16435: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16436: LD_ADDR_VAR 0 3
16440: PUSH
16441: LD_VAR 0 1
16445: PPUSH
16446: CALL_OW 437
16450: ST_TO_ADDR
// if task then
16451: LD_VAR 0 3
16455: IFFALSE 16483
// if task [ 1 ] [ 1 ] = p then
16457: LD_VAR 0 3
16461: PUSH
16462: LD_INT 1
16464: ARRAY
16465: PUSH
16466: LD_INT 1
16468: ARRAY
16469: PUSH
16470: LD_STRING p
16472: EQUAL
16473: IFFALSE 16483
// result := true ;
16475: LD_ADDR_VAR 0 2
16479: PUSH
16480: LD_INT 1
16482: ST_TO_ADDR
// end ;
16483: LD_VAR 0 2
16487: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16488: LD_INT 0
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
// if pos < 1 then
16494: LD_VAR 0 2
16498: PUSH
16499: LD_INT 1
16501: LESS
16502: IFFALSE 16506
// exit ;
16504: GO 16809
// if pos = 1 then
16506: LD_VAR 0 2
16510: PUSH
16511: LD_INT 1
16513: EQUAL
16514: IFFALSE 16547
// result := Replace ( arr , pos [ 1 ] , value ) else
16516: LD_ADDR_VAR 0 4
16520: PUSH
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_VAR 0 2
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PPUSH
16535: LD_VAR 0 3
16539: PPUSH
16540: CALL_OW 1
16544: ST_TO_ADDR
16545: GO 16809
// begin tmp := arr ;
16547: LD_ADDR_VAR 0 6
16551: PUSH
16552: LD_VAR 0 1
16556: ST_TO_ADDR
// s_arr := [ tmp ] ;
16557: LD_ADDR_VAR 0 7
16561: PUSH
16562: LD_VAR 0 6
16566: PUSH
16567: EMPTY
16568: LIST
16569: ST_TO_ADDR
// for i = 1 to pos - 1 do
16570: LD_ADDR_VAR 0 5
16574: PUSH
16575: DOUBLE
16576: LD_INT 1
16578: DEC
16579: ST_TO_ADDR
16580: LD_VAR 0 2
16584: PUSH
16585: LD_INT 1
16587: MINUS
16588: PUSH
16589: FOR_TO
16590: IFFALSE 16635
// begin tmp := tmp [ pos [ i ] ] ;
16592: LD_ADDR_VAR 0 6
16596: PUSH
16597: LD_VAR 0 6
16601: PUSH
16602: LD_VAR 0 2
16606: PUSH
16607: LD_VAR 0 5
16611: ARRAY
16612: ARRAY
16613: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16614: LD_ADDR_VAR 0 7
16618: PUSH
16619: LD_VAR 0 7
16623: PUSH
16624: LD_VAR 0 6
16628: PUSH
16629: EMPTY
16630: LIST
16631: ADD
16632: ST_TO_ADDR
// end ;
16633: GO 16589
16635: POP
16636: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16637: LD_ADDR_VAR 0 6
16641: PUSH
16642: LD_VAR 0 6
16646: PPUSH
16647: LD_VAR 0 2
16651: PUSH
16652: LD_VAR 0 2
16656: ARRAY
16657: PPUSH
16658: LD_VAR 0 3
16662: PPUSH
16663: CALL_OW 1
16667: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16668: LD_ADDR_VAR 0 7
16672: PUSH
16673: LD_VAR 0 7
16677: PPUSH
16678: LD_VAR 0 7
16682: PPUSH
16683: LD_VAR 0 6
16687: PPUSH
16688: CALL_OW 1
16692: ST_TO_ADDR
// for i = s_arr downto 2 do
16693: LD_ADDR_VAR 0 5
16697: PUSH
16698: DOUBLE
16699: LD_VAR 0 7
16703: INC
16704: ST_TO_ADDR
16705: LD_INT 2
16707: PUSH
16708: FOR_DOWNTO
16709: IFFALSE 16793
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16711: LD_ADDR_VAR 0 6
16715: PUSH
16716: LD_VAR 0 7
16720: PUSH
16721: LD_VAR 0 5
16725: PUSH
16726: LD_INT 1
16728: MINUS
16729: ARRAY
16730: PPUSH
16731: LD_VAR 0 2
16735: PUSH
16736: LD_VAR 0 5
16740: PUSH
16741: LD_INT 1
16743: MINUS
16744: ARRAY
16745: PPUSH
16746: LD_VAR 0 7
16750: PUSH
16751: LD_VAR 0 5
16755: ARRAY
16756: PPUSH
16757: CALL_OW 1
16761: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16762: LD_ADDR_VAR 0 7
16766: PUSH
16767: LD_VAR 0 7
16771: PPUSH
16772: LD_VAR 0 5
16776: PUSH
16777: LD_INT 1
16779: MINUS
16780: PPUSH
16781: LD_VAR 0 6
16785: PPUSH
16786: CALL_OW 1
16790: ST_TO_ADDR
// end ;
16791: GO 16708
16793: POP
16794: POP
// result := s_arr [ 1 ] ;
16795: LD_ADDR_VAR 0 4
16799: PUSH
16800: LD_VAR 0 7
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: ST_TO_ADDR
// end ; end ;
16809: LD_VAR 0 4
16813: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16814: LD_INT 0
16816: PPUSH
16817: PPUSH
// if not list then
16818: LD_VAR 0 1
16822: NOT
16823: IFFALSE 16827
// exit ;
16825: GO 16918
// i := list [ pos1 ] ;
16827: LD_ADDR_VAR 0 5
16831: PUSH
16832: LD_VAR 0 1
16836: PUSH
16837: LD_VAR 0 2
16841: ARRAY
16842: ST_TO_ADDR
// if not i then
16843: LD_VAR 0 5
16847: NOT
16848: IFFALSE 16852
// exit ;
16850: GO 16918
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16852: LD_ADDR_VAR 0 1
16856: PUSH
16857: LD_VAR 0 1
16861: PPUSH
16862: LD_VAR 0 2
16866: PPUSH
16867: LD_VAR 0 1
16871: PUSH
16872: LD_VAR 0 3
16876: ARRAY
16877: PPUSH
16878: CALL_OW 1
16882: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16883: LD_ADDR_VAR 0 1
16887: PUSH
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_VAR 0 3
16897: PPUSH
16898: LD_VAR 0 5
16902: PPUSH
16903: CALL_OW 1
16907: ST_TO_ADDR
// result := list ;
16908: LD_ADDR_VAR 0 4
16912: PUSH
16913: LD_VAR 0 1
16917: ST_TO_ADDR
// end ;
16918: LD_VAR 0 4
16922: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16923: LD_INT 0
16925: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16926: LD_ADDR_VAR 0 5
16930: PUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: CALL_OW 250
16940: PPUSH
16941: LD_VAR 0 1
16945: PPUSH
16946: CALL_OW 251
16950: PPUSH
16951: LD_VAR 0 2
16955: PPUSH
16956: LD_VAR 0 3
16960: PPUSH
16961: LD_VAR 0 4
16965: PPUSH
16966: CALL 17348 0 5
16970: ST_TO_ADDR
// end ;
16971: LD_VAR 0 5
16975: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16976: LD_INT 0
16978: PPUSH
16979: PPUSH
16980: PPUSH
16981: PPUSH
// if not list or not unit then
16982: LD_VAR 0 2
16986: NOT
16987: IFTRUE 16996
16989: PUSH
16990: LD_VAR 0 1
16994: NOT
16995: OR
16996: IFFALSE 17000
// exit ;
16998: GO 17343
// result := [ ] ;
17000: LD_ADDR_VAR 0 5
17004: PUSH
17005: EMPTY
17006: ST_TO_ADDR
// for i in list do
17007: LD_ADDR_VAR 0 6
17011: PUSH
17012: LD_VAR 0 2
17016: PUSH
17017: FOR_IN
17018: IFFALSE 17236
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17020: LD_ADDR_VAR 0 8
17024: PUSH
17025: LD_VAR 0 1
17029: PPUSH
17030: LD_VAR 0 6
17034: PUSH
17035: LD_INT 1
17037: ARRAY
17038: PPUSH
17039: LD_VAR 0 6
17043: PUSH
17044: LD_INT 2
17046: ARRAY
17047: PPUSH
17048: CALL_OW 297
17052: ST_TO_ADDR
// if not Count ( result ) then
17053: LD_VAR 0 5
17057: PPUSH
17058: CALL 13570 0 1
17062: NOT
17063: IFFALSE 17096
// begin result := Join ( result , [ i , tmp ] ) ;
17065: LD_ADDR_VAR 0 5
17069: PUSH
17070: LD_VAR 0 5
17074: PPUSH
17075: LD_VAR 0 6
17079: PUSH
17080: LD_VAR 0 8
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL 49546 0 2
17093: ST_TO_ADDR
// continue ;
17094: GO 17017
// end ; if result [ result ] [ 2 ] <= tmp then
17096: LD_VAR 0 5
17100: PUSH
17101: LD_VAR 0 5
17105: ARRAY
17106: PUSH
17107: LD_INT 2
17109: ARRAY
17110: PUSH
17111: LD_VAR 0 8
17115: LESSEQUAL
17116: IFFALSE 17149
// result := Join ( result , [ i , tmp ] ) else
17118: LD_ADDR_VAR 0 5
17122: PUSH
17123: LD_VAR 0 5
17127: PPUSH
17128: LD_VAR 0 6
17132: PUSH
17133: LD_VAR 0 8
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PPUSH
17142: CALL 49546 0 2
17146: ST_TO_ADDR
17147: GO 17234
// begin for j := 1 to Count ( result ) do
17149: LD_ADDR_VAR 0 7
17153: PUSH
17154: DOUBLE
17155: LD_INT 1
17157: DEC
17158: ST_TO_ADDR
17159: LD_VAR 0 5
17163: PPUSH
17164: CALL 13570 0 1
17168: PUSH
17169: FOR_TO
17170: IFFALSE 17232
// begin if tmp < result [ j ] [ 2 ] then
17172: LD_VAR 0 8
17176: PUSH
17177: LD_VAR 0 5
17181: PUSH
17182: LD_VAR 0 7
17186: ARRAY
17187: PUSH
17188: LD_INT 2
17190: ARRAY
17191: LESS
17192: IFFALSE 17230
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17194: LD_ADDR_VAR 0 5
17198: PUSH
17199: LD_VAR 0 5
17203: PPUSH
17204: LD_VAR 0 7
17208: PPUSH
17209: LD_VAR 0 6
17213: PUSH
17214: LD_VAR 0 8
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PPUSH
17223: CALL_OW 2
17227: ST_TO_ADDR
// break ;
17228: GO 17232
// end ; end ;
17230: GO 17169
17232: POP
17233: POP
// end ; end ;
17234: GO 17017
17236: POP
17237: POP
// if result and not asc then
17238: LD_VAR 0 5
17242: IFFALSE 17251
17244: PUSH
17245: LD_VAR 0 3
17249: NOT
17250: AND
17251: IFFALSE 17268
// result := ReverseArray ( result ) ;
17253: LD_ADDR_VAR 0 5
17257: PUSH
17258: LD_VAR 0 5
17262: PPUSH
17263: CALL 44626 0 1
17267: ST_TO_ADDR
// tmp := [ ] ;
17268: LD_ADDR_VAR 0 8
17272: PUSH
17273: EMPTY
17274: ST_TO_ADDR
// if mode then
17275: LD_VAR 0 4
17279: IFFALSE 17343
// begin for i := 1 to result do
17281: LD_ADDR_VAR 0 6
17285: PUSH
17286: DOUBLE
17287: LD_INT 1
17289: DEC
17290: ST_TO_ADDR
17291: LD_VAR 0 5
17295: PUSH
17296: FOR_TO
17297: IFFALSE 17331
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17299: LD_ADDR_VAR 0 8
17303: PUSH
17304: LD_VAR 0 8
17308: PPUSH
17309: LD_VAR 0 5
17313: PUSH
17314: LD_VAR 0 6
17318: ARRAY
17319: PUSH
17320: LD_INT 1
17322: ARRAY
17323: PPUSH
17324: CALL 49546 0 2
17328: ST_TO_ADDR
17329: GO 17296
17331: POP
17332: POP
// result := tmp ;
17333: LD_ADDR_VAR 0 5
17337: PUSH
17338: LD_VAR 0 8
17342: ST_TO_ADDR
// end ; end ;
17343: LD_VAR 0 5
17347: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17348: LD_INT 0
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
// if not list then
17354: LD_VAR 0 3
17358: NOT
17359: IFFALSE 17363
// exit ;
17361: GO 17753
// result := [ ] ;
17363: LD_ADDR_VAR 0 6
17367: PUSH
17368: EMPTY
17369: ST_TO_ADDR
// for i in list do
17370: LD_ADDR_VAR 0 7
17374: PUSH
17375: LD_VAR 0 3
17379: PUSH
17380: FOR_IN
17381: IFFALSE 17583
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17383: LD_ADDR_VAR 0 9
17387: PUSH
17388: LD_VAR 0 7
17392: PPUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: LD_VAR 0 2
17402: PPUSH
17403: CALL_OW 297
17407: ST_TO_ADDR
// if not result then
17408: LD_VAR 0 6
17412: NOT
17413: IFFALSE 17439
// result := [ [ i , tmp ] ] else
17415: LD_ADDR_VAR 0 6
17419: PUSH
17420: LD_VAR 0 7
17424: PUSH
17425: LD_VAR 0 9
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: PUSH
17434: EMPTY
17435: LIST
17436: ST_TO_ADDR
17437: GO 17581
// begin if result [ result ] [ 2 ] <= tmp then
17439: LD_VAR 0 6
17443: PUSH
17444: LD_VAR 0 6
17448: ARRAY
17449: PUSH
17450: LD_INT 2
17452: ARRAY
17453: PUSH
17454: LD_VAR 0 9
17458: LESSEQUAL
17459: IFFALSE 17501
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17461: LD_ADDR_VAR 0 6
17465: PUSH
17466: LD_VAR 0 6
17470: PPUSH
17471: LD_VAR 0 6
17475: PUSH
17476: LD_INT 1
17478: PLUS
17479: PPUSH
17480: LD_VAR 0 7
17484: PUSH
17485: LD_VAR 0 9
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PPUSH
17494: CALL_OW 2
17498: ST_TO_ADDR
17499: GO 17581
// for j := 1 to result do
17501: LD_ADDR_VAR 0 8
17505: PUSH
17506: DOUBLE
17507: LD_INT 1
17509: DEC
17510: ST_TO_ADDR
17511: LD_VAR 0 6
17515: PUSH
17516: FOR_TO
17517: IFFALSE 17579
// begin if tmp < result [ j ] [ 2 ] then
17519: LD_VAR 0 9
17523: PUSH
17524: LD_VAR 0 6
17528: PUSH
17529: LD_VAR 0 8
17533: ARRAY
17534: PUSH
17535: LD_INT 2
17537: ARRAY
17538: LESS
17539: IFFALSE 17577
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17541: LD_ADDR_VAR 0 6
17545: PUSH
17546: LD_VAR 0 6
17550: PPUSH
17551: LD_VAR 0 8
17555: PPUSH
17556: LD_VAR 0 7
17560: PUSH
17561: LD_VAR 0 9
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PPUSH
17570: CALL_OW 2
17574: ST_TO_ADDR
// break ;
17575: GO 17579
// end ; end ;
17577: GO 17516
17579: POP
17580: POP
// end ; end ;
17581: GO 17380
17583: POP
17584: POP
// if result and not asc then
17585: LD_VAR 0 6
17589: IFFALSE 17598
17591: PUSH
17592: LD_VAR 0 4
17596: NOT
17597: AND
17598: IFFALSE 17673
// begin tmp := result ;
17600: LD_ADDR_VAR 0 9
17604: PUSH
17605: LD_VAR 0 6
17609: ST_TO_ADDR
// for i = tmp downto 1 do
17610: LD_ADDR_VAR 0 7
17614: PUSH
17615: DOUBLE
17616: LD_VAR 0 9
17620: INC
17621: ST_TO_ADDR
17622: LD_INT 1
17624: PUSH
17625: FOR_DOWNTO
17626: IFFALSE 17671
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17628: LD_ADDR_VAR 0 6
17632: PUSH
17633: LD_VAR 0 6
17637: PPUSH
17638: LD_VAR 0 9
17642: PUSH
17643: LD_VAR 0 7
17647: MINUS
17648: PUSH
17649: LD_INT 1
17651: PLUS
17652: PPUSH
17653: LD_VAR 0 9
17657: PUSH
17658: LD_VAR 0 7
17662: ARRAY
17663: PPUSH
17664: CALL_OW 1
17668: ST_TO_ADDR
17669: GO 17625
17671: POP
17672: POP
// end ; tmp := [ ] ;
17673: LD_ADDR_VAR 0 9
17677: PUSH
17678: EMPTY
17679: ST_TO_ADDR
// if mode then
17680: LD_VAR 0 5
17684: IFFALSE 17753
// begin for i = 1 to result do
17686: LD_ADDR_VAR 0 7
17690: PUSH
17691: DOUBLE
17692: LD_INT 1
17694: DEC
17695: ST_TO_ADDR
17696: LD_VAR 0 6
17700: PUSH
17701: FOR_TO
17702: IFFALSE 17741
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17704: LD_ADDR_VAR 0 9
17708: PUSH
17709: LD_VAR 0 9
17713: PPUSH
17714: LD_VAR 0 7
17718: PPUSH
17719: LD_VAR 0 6
17723: PUSH
17724: LD_VAR 0 7
17728: ARRAY
17729: PUSH
17730: LD_INT 1
17732: ARRAY
17733: PPUSH
17734: CALL_OW 1
17738: ST_TO_ADDR
17739: GO 17701
17741: POP
17742: POP
// result := tmp ;
17743: LD_ADDR_VAR 0 6
17747: PUSH
17748: LD_VAR 0 9
17752: ST_TO_ADDR
// end ; end ;
17753: LD_VAR 0 6
17757: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17758: LD_INT 0
17760: PPUSH
17761: PPUSH
17762: PPUSH
17763: PPUSH
17764: PPUSH
17765: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17766: LD_ADDR_VAR 0 5
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: LD_INT 0
17776: PUSH
17777: LD_INT 0
17779: PUSH
17780: EMPTY
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: ST_TO_ADDR
// if not x or not y then
17788: LD_VAR 0 2
17792: NOT
17793: IFTRUE 17802
17795: PUSH
17796: LD_VAR 0 3
17800: NOT
17801: OR
17802: IFFALSE 17806
// exit ;
17804: GO 19462
// if not range then
17806: LD_VAR 0 4
17810: NOT
17811: IFFALSE 17821
// range := 10 ;
17813: LD_ADDR_VAR 0 4
17817: PUSH
17818: LD_INT 10
17820: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17821: LD_ADDR_VAR 0 8
17825: PUSH
17826: LD_INT 81
17828: PUSH
17829: LD_VAR 0 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 92
17840: PUSH
17841: LD_VAR 0 2
17845: PUSH
17846: LD_VAR 0 3
17850: PUSH
17851: LD_VAR 0 4
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 3
17864: PUSH
17865: LD_INT 21
17867: PUSH
17868: LD_INT 3
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: LIST
17883: PPUSH
17884: CALL_OW 69
17888: ST_TO_ADDR
// if not tmp then
17889: LD_VAR 0 8
17893: NOT
17894: IFFALSE 17898
// exit ;
17896: GO 19462
// for i in tmp do
17898: LD_ADDR_VAR 0 6
17902: PUSH
17903: LD_VAR 0 8
17907: PUSH
17908: FOR_IN
17909: IFFALSE 19437
// begin points := [ 0 , 0 , 0 ] ;
17911: LD_ADDR_VAR 0 9
17915: PUSH
17916: LD_INT 0
17918: PUSH
17919: LD_INT 0
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: ST_TO_ADDR
// bpoints := 1 ;
17930: LD_ADDR_VAR 0 10
17934: PUSH
17935: LD_INT 1
17937: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17938: LD_VAR 0 6
17942: PPUSH
17943: CALL_OW 247
17947: PUSH
17948: LD_INT 1
17950: DOUBLE
17951: EQUAL
17952: IFTRUE 17956
17954: GO 18538
17956: POP
// begin if GetClass ( i ) = 1 then
17957: LD_VAR 0 6
17961: PPUSH
17962: CALL_OW 257
17966: PUSH
17967: LD_INT 1
17969: EQUAL
17970: IFFALSE 17991
// points := [ 10 , 5 , 3 ] ;
17972: LD_ADDR_VAR 0 9
17976: PUSH
17977: LD_INT 10
17979: PUSH
17980: LD_INT 5
17982: PUSH
17983: LD_INT 3
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17991: LD_VAR 0 6
17995: PPUSH
17996: CALL_OW 257
18000: PUSH
18001: LD_INT 2
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: LD_INT 4
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: LIST
18014: IN
18015: IFFALSE 18036
// points := [ 3 , 2 , 1 ] ;
18017: LD_ADDR_VAR 0 9
18021: PUSH
18022: LD_INT 3
18024: PUSH
18025: LD_INT 2
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: LIST
18035: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18036: LD_VAR 0 6
18040: PPUSH
18041: CALL_OW 257
18045: PUSH
18046: LD_INT 5
18048: EQUAL
18049: IFFALSE 18070
// points := [ 130 , 5 , 2 ] ;
18051: LD_ADDR_VAR 0 9
18055: PUSH
18056: LD_INT 130
18058: PUSH
18059: LD_INT 5
18061: PUSH
18062: LD_INT 2
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18070: LD_VAR 0 6
18074: PPUSH
18075: CALL_OW 257
18079: PUSH
18080: LD_INT 8
18082: EQUAL
18083: IFFALSE 18104
// points := [ 35 , 35 , 30 ] ;
18085: LD_ADDR_VAR 0 9
18089: PUSH
18090: LD_INT 35
18092: PUSH
18093: LD_INT 35
18095: PUSH
18096: LD_INT 30
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: LIST
18103: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18104: LD_VAR 0 6
18108: PPUSH
18109: CALL_OW 257
18113: PUSH
18114: LD_INT 9
18116: EQUAL
18117: IFFALSE 18138
// points := [ 20 , 55 , 40 ] ;
18119: LD_ADDR_VAR 0 9
18123: PUSH
18124: LD_INT 20
18126: PUSH
18127: LD_INT 55
18129: PUSH
18130: LD_INT 40
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18138: LD_VAR 0 6
18142: PPUSH
18143: CALL_OW 257
18147: PUSH
18148: LD_INT 12
18150: PUSH
18151: LD_INT 16
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: IN
18158: IFFALSE 18179
// points := [ 5 , 3 , 2 ] ;
18160: LD_ADDR_VAR 0 9
18164: PUSH
18165: LD_INT 5
18167: PUSH
18168: LD_INT 3
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18179: LD_VAR 0 6
18183: PPUSH
18184: CALL_OW 257
18188: PUSH
18189: LD_INT 17
18191: EQUAL
18192: IFFALSE 18213
// points := [ 100 , 50 , 75 ] ;
18194: LD_ADDR_VAR 0 9
18198: PUSH
18199: LD_INT 100
18201: PUSH
18202: LD_INT 50
18204: PUSH
18205: LD_INT 75
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: LIST
18212: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18213: LD_VAR 0 6
18217: PPUSH
18218: CALL_OW 257
18222: PUSH
18223: LD_INT 15
18225: EQUAL
18226: IFFALSE 18247
// points := [ 10 , 5 , 3 ] ;
18228: LD_ADDR_VAR 0 9
18232: PUSH
18233: LD_INT 10
18235: PUSH
18236: LD_INT 5
18238: PUSH
18239: LD_INT 3
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: LIST
18246: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18247: LD_VAR 0 6
18251: PPUSH
18252: CALL_OW 257
18256: PUSH
18257: LD_INT 14
18259: EQUAL
18260: IFFALSE 18281
// points := [ 10 , 0 , 0 ] ;
18262: LD_ADDR_VAR 0 9
18266: PUSH
18267: LD_INT 10
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: LD_INT 0
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: LIST
18280: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18281: LD_VAR 0 6
18285: PPUSH
18286: CALL_OW 257
18290: PUSH
18291: LD_INT 11
18293: EQUAL
18294: IFFALSE 18315
// points := [ 30 , 10 , 5 ] ;
18296: LD_ADDR_VAR 0 9
18300: PUSH
18301: LD_INT 30
18303: PUSH
18304: LD_INT 10
18306: PUSH
18307: LD_INT 5
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: LIST
18314: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18315: LD_VAR 0 1
18319: PPUSH
18320: LD_INT 5
18322: PPUSH
18323: CALL_OW 321
18327: PUSH
18328: LD_INT 2
18330: EQUAL
18331: IFFALSE 18348
// bpoints := bpoints * 1.8 ;
18333: LD_ADDR_VAR 0 10
18337: PUSH
18338: LD_VAR 0 10
18342: PUSH
18343: LD_REAL  1.80000000000000E+0000
18346: MUL
18347: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18348: LD_VAR 0 6
18352: PPUSH
18353: CALL_OW 257
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 2
18363: PUSH
18364: LD_INT 3
18366: PUSH
18367: LD_INT 4
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: IN
18376: IFFALSE 18396
18378: PUSH
18379: LD_VAR 0 1
18383: PPUSH
18384: LD_INT 51
18386: PPUSH
18387: CALL_OW 321
18391: PUSH
18392: LD_INT 2
18394: EQUAL
18395: AND
18396: IFFALSE 18413
// bpoints := bpoints * 1.2 ;
18398: LD_ADDR_VAR 0 10
18402: PUSH
18403: LD_VAR 0 10
18407: PUSH
18408: LD_REAL  1.20000000000000E+0000
18411: MUL
18412: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18413: LD_VAR 0 6
18417: PPUSH
18418: CALL_OW 257
18422: PUSH
18423: LD_INT 5
18425: PUSH
18426: LD_INT 7
18428: PUSH
18429: LD_INT 9
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: IN
18437: IFFALSE 18457
18439: PUSH
18440: LD_VAR 0 1
18444: PPUSH
18445: LD_INT 52
18447: PPUSH
18448: CALL_OW 321
18452: PUSH
18453: LD_INT 2
18455: EQUAL
18456: AND
18457: IFFALSE 18474
// bpoints := bpoints * 1.5 ;
18459: LD_ADDR_VAR 0 10
18463: PUSH
18464: LD_VAR 0 10
18468: PUSH
18469: LD_REAL  1.50000000000000E+0000
18472: MUL
18473: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18474: LD_VAR 0 1
18478: PPUSH
18479: LD_INT 66
18481: PPUSH
18482: CALL_OW 321
18486: PUSH
18487: LD_INT 2
18489: EQUAL
18490: IFFALSE 18507
// bpoints := bpoints * 1.1 ;
18492: LD_ADDR_VAR 0 10
18496: PUSH
18497: LD_VAR 0 10
18501: PUSH
18502: LD_REAL  1.10000000000000E+0000
18505: MUL
18506: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18507: LD_ADDR_VAR 0 10
18511: PUSH
18512: LD_VAR 0 10
18516: PUSH
18517: LD_VAR 0 6
18521: PPUSH
18522: LD_INT 1
18524: PPUSH
18525: CALL_OW 259
18529: PUSH
18530: LD_REAL  1.15000000000000E+0000
18533: MUL
18534: MUL
18535: ST_TO_ADDR
// end ; unit_vehicle :
18536: GO 19366
18538: LD_INT 2
18540: DOUBLE
18541: EQUAL
18542: IFTRUE 18546
18544: GO 19354
18546: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18547: LD_VAR 0 6
18551: PPUSH
18552: CALL_OW 264
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: LD_INT 42
18562: PUSH
18563: LD_INT 24
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: IN
18571: IFFALSE 18592
// points := [ 25 , 5 , 3 ] ;
18573: LD_ADDR_VAR 0 9
18577: PUSH
18578: LD_INT 25
18580: PUSH
18581: LD_INT 5
18583: PUSH
18584: LD_INT 3
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: LIST
18591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18592: LD_VAR 0 6
18596: PPUSH
18597: CALL_OW 264
18601: PUSH
18602: LD_INT 4
18604: PUSH
18605: LD_INT 43
18607: PUSH
18608: LD_INT 25
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: LIST
18615: IN
18616: IFFALSE 18637
// points := [ 40 , 15 , 5 ] ;
18618: LD_ADDR_VAR 0 9
18622: PUSH
18623: LD_INT 40
18625: PUSH
18626: LD_INT 15
18628: PUSH
18629: LD_INT 5
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: LIST
18636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18637: LD_VAR 0 6
18641: PPUSH
18642: CALL_OW 264
18646: PUSH
18647: LD_INT 3
18649: PUSH
18650: LD_INT 23
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: IN
18657: IFFALSE 18678
// points := [ 7 , 25 , 8 ] ;
18659: LD_ADDR_VAR 0 9
18663: PUSH
18664: LD_INT 7
18666: PUSH
18667: LD_INT 25
18669: PUSH
18670: LD_INT 8
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18678: LD_VAR 0 6
18682: PPUSH
18683: CALL_OW 264
18687: PUSH
18688: LD_INT 5
18690: PUSH
18691: LD_INT 27
18693: PUSH
18694: LD_INT 44
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: IN
18702: IFFALSE 18723
// points := [ 14 , 50 , 16 ] ;
18704: LD_ADDR_VAR 0 9
18708: PUSH
18709: LD_INT 14
18711: PUSH
18712: LD_INT 50
18714: PUSH
18715: LD_INT 16
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18723: LD_VAR 0 6
18727: PPUSH
18728: CALL_OW 264
18732: PUSH
18733: LD_INT 6
18735: PUSH
18736: LD_INT 46
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: IN
18743: IFFALSE 18764
// points := [ 32 , 120 , 70 ] ;
18745: LD_ADDR_VAR 0 9
18749: PUSH
18750: LD_INT 32
18752: PUSH
18753: LD_INT 120
18755: PUSH
18756: LD_INT 70
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18764: LD_VAR 0 6
18768: PPUSH
18769: CALL_OW 264
18773: PUSH
18774: LD_INT 7
18776: PUSH
18777: LD_INT 28
18779: PUSH
18780: LD_INT 45
18782: PUSH
18783: LD_INT 92
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: IN
18792: IFFALSE 18813
// points := [ 35 , 20 , 45 ] ;
18794: LD_ADDR_VAR 0 9
18798: PUSH
18799: LD_INT 35
18801: PUSH
18802: LD_INT 20
18804: PUSH
18805: LD_INT 45
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18813: LD_VAR 0 6
18817: PPUSH
18818: CALL_OW 264
18822: PUSH
18823: LD_INT 47
18825: PUSH
18826: EMPTY
18827: LIST
18828: IN
18829: IFFALSE 18850
// points := [ 67 , 45 , 75 ] ;
18831: LD_ADDR_VAR 0 9
18835: PUSH
18836: LD_INT 67
18838: PUSH
18839: LD_INT 45
18841: PUSH
18842: LD_INT 75
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: LIST
18849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18850: LD_VAR 0 6
18854: PPUSH
18855: CALL_OW 264
18859: PUSH
18860: LD_INT 26
18862: PUSH
18863: EMPTY
18864: LIST
18865: IN
18866: IFFALSE 18887
// points := [ 120 , 30 , 80 ] ;
18868: LD_ADDR_VAR 0 9
18872: PUSH
18873: LD_INT 120
18875: PUSH
18876: LD_INT 30
18878: PUSH
18879: LD_INT 80
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18887: LD_VAR 0 6
18891: PPUSH
18892: CALL_OW 264
18896: PUSH
18897: LD_INT 22
18899: PUSH
18900: EMPTY
18901: LIST
18902: IN
18903: IFFALSE 18924
// points := [ 40 , 1 , 1 ] ;
18905: LD_ADDR_VAR 0 9
18909: PUSH
18910: LD_INT 40
18912: PUSH
18913: LD_INT 1
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18924: LD_VAR 0 6
18928: PPUSH
18929: CALL_OW 264
18933: PUSH
18934: LD_INT 29
18936: PUSH
18937: EMPTY
18938: LIST
18939: IN
18940: IFFALSE 18961
// points := [ 70 , 200 , 400 ] ;
18942: LD_ADDR_VAR 0 9
18946: PUSH
18947: LD_INT 70
18949: PUSH
18950: LD_INT 200
18952: PUSH
18953: LD_INT 400
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18961: LD_VAR 0 6
18965: PPUSH
18966: CALL_OW 264
18970: PUSH
18971: LD_INT 14
18973: PUSH
18974: LD_INT 53
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: IN
18981: IFFALSE 19002
// points := [ 40 , 10 , 20 ] ;
18983: LD_ADDR_VAR 0 9
18987: PUSH
18988: LD_INT 40
18990: PUSH
18991: LD_INT 10
18993: PUSH
18994: LD_INT 20
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: LIST
19001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19002: LD_VAR 0 6
19006: PPUSH
19007: CALL_OW 264
19011: PUSH
19012: LD_INT 9
19014: PUSH
19015: EMPTY
19016: LIST
19017: IN
19018: IFFALSE 19039
// points := [ 5 , 70 , 20 ] ;
19020: LD_ADDR_VAR 0 9
19024: PUSH
19025: LD_INT 5
19027: PUSH
19028: LD_INT 70
19030: PUSH
19031: LD_INT 20
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: LIST
19038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19039: LD_VAR 0 6
19043: PPUSH
19044: CALL_OW 264
19048: PUSH
19049: LD_INT 10
19051: PUSH
19052: EMPTY
19053: LIST
19054: IN
19055: IFFALSE 19076
// points := [ 35 , 110 , 70 ] ;
19057: LD_ADDR_VAR 0 9
19061: PUSH
19062: LD_INT 35
19064: PUSH
19065: LD_INT 110
19067: PUSH
19068: LD_INT 70
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19076: LD_VAR 0 6
19080: PPUSH
19081: CALL_OW 265
19085: PUSH
19086: LD_INT 25
19088: EQUAL
19089: IFFALSE 19110
// points := [ 80 , 65 , 100 ] ;
19091: LD_ADDR_VAR 0 9
19095: PUSH
19096: LD_INT 80
19098: PUSH
19099: LD_INT 65
19101: PUSH
19102: LD_INT 100
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: LIST
19109: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19110: LD_VAR 0 6
19114: PPUSH
19115: CALL_OW 263
19119: PUSH
19120: LD_INT 1
19122: EQUAL
19123: IFFALSE 19158
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19125: LD_ADDR_VAR 0 10
19129: PUSH
19130: LD_VAR 0 10
19134: PUSH
19135: LD_VAR 0 6
19139: PPUSH
19140: CALL_OW 311
19144: PPUSH
19145: LD_INT 3
19147: PPUSH
19148: CALL_OW 259
19152: PUSH
19153: LD_INT 4
19155: MUL
19156: MUL
19157: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19158: LD_VAR 0 6
19162: PPUSH
19163: CALL_OW 263
19167: PUSH
19168: LD_INT 2
19170: EQUAL
19171: IFFALSE 19222
// begin j := IsControledBy ( i ) ;
19173: LD_ADDR_VAR 0 7
19177: PUSH
19178: LD_VAR 0 6
19182: PPUSH
19183: CALL_OW 312
19187: ST_TO_ADDR
// if j then
19188: LD_VAR 0 7
19192: IFFALSE 19222
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19194: LD_ADDR_VAR 0 10
19198: PUSH
19199: LD_VAR 0 10
19203: PUSH
19204: LD_VAR 0 7
19208: PPUSH
19209: LD_INT 3
19211: PPUSH
19212: CALL_OW 259
19216: PUSH
19217: LD_INT 3
19219: MUL
19220: MUL
19221: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19222: LD_VAR 0 6
19226: PPUSH
19227: CALL_OW 264
19231: PUSH
19232: LD_INT 5
19234: PUSH
19235: LD_INT 6
19237: PUSH
19238: LD_INT 46
19240: PUSH
19241: LD_INT 44
19243: PUSH
19244: LD_INT 47
19246: PUSH
19247: LD_INT 45
19249: PUSH
19250: LD_INT 28
19252: PUSH
19253: LD_INT 7
19255: PUSH
19256: LD_INT 27
19258: PUSH
19259: LD_INT 29
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: IN
19274: IFFALSE 19294
19276: PUSH
19277: LD_VAR 0 1
19281: PPUSH
19282: LD_INT 52
19284: PPUSH
19285: CALL_OW 321
19289: PUSH
19290: LD_INT 2
19292: EQUAL
19293: AND
19294: IFFALSE 19311
// bpoints := bpoints * 1.2 ;
19296: LD_ADDR_VAR 0 10
19300: PUSH
19301: LD_VAR 0 10
19305: PUSH
19306: LD_REAL  1.20000000000000E+0000
19309: MUL
19310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19311: LD_VAR 0 6
19315: PPUSH
19316: CALL_OW 264
19320: PUSH
19321: LD_INT 6
19323: PUSH
19324: LD_INT 46
19326: PUSH
19327: LD_INT 47
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: IN
19335: IFFALSE 19352
// bpoints := bpoints * 1.2 ;
19337: LD_ADDR_VAR 0 10
19341: PUSH
19342: LD_VAR 0 10
19346: PUSH
19347: LD_REAL  1.20000000000000E+0000
19350: MUL
19351: ST_TO_ADDR
// end ; unit_building :
19352: GO 19366
19354: LD_INT 3
19356: DOUBLE
19357: EQUAL
19358: IFTRUE 19362
19360: GO 19365
19362: POP
// ; end ;
19363: GO 19366
19365: POP
// for j = 1 to 3 do
19366: LD_ADDR_VAR 0 7
19370: PUSH
19371: DOUBLE
19372: LD_INT 1
19374: DEC
19375: ST_TO_ADDR
19376: LD_INT 3
19378: PUSH
19379: FOR_TO
19380: IFFALSE 19433
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19382: LD_ADDR_VAR 0 5
19386: PUSH
19387: LD_VAR 0 5
19391: PPUSH
19392: LD_VAR 0 7
19396: PPUSH
19397: LD_VAR 0 5
19401: PUSH
19402: LD_VAR 0 7
19406: ARRAY
19407: PUSH
19408: LD_VAR 0 9
19412: PUSH
19413: LD_VAR 0 7
19417: ARRAY
19418: PUSH
19419: LD_VAR 0 10
19423: MUL
19424: PLUS
19425: PPUSH
19426: CALL_OW 1
19430: ST_TO_ADDR
19431: GO 19379
19433: POP
19434: POP
// end ;
19435: GO 17908
19437: POP
19438: POP
// result := Replace ( result , 4 , tmp ) ;
19439: LD_ADDR_VAR 0 5
19443: PUSH
19444: LD_VAR 0 5
19448: PPUSH
19449: LD_INT 4
19451: PPUSH
19452: LD_VAR 0 8
19456: PPUSH
19457: CALL_OW 1
19461: ST_TO_ADDR
// end ;
19462: LD_VAR 0 5
19466: RET
// export function DangerAtRange ( unit , range ) ; begin
19467: LD_INT 0
19469: PPUSH
// if not unit then
19470: LD_VAR 0 1
19474: NOT
19475: IFFALSE 19479
// exit ;
19477: GO 19524
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19479: LD_ADDR_VAR 0 3
19483: PUSH
19484: LD_VAR 0 1
19488: PPUSH
19489: CALL_OW 255
19493: PPUSH
19494: LD_VAR 0 1
19498: PPUSH
19499: CALL_OW 250
19503: PPUSH
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 251
19513: PPUSH
19514: LD_VAR 0 2
19518: PPUSH
19519: CALL 17758 0 4
19523: ST_TO_ADDR
// end ;
19524: LD_VAR 0 3
19528: RET
// export function DangerInArea ( side , area ) ; begin
19529: LD_INT 0
19531: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19532: LD_ADDR_VAR 0 3
19536: PUSH
19537: LD_VAR 0 2
19541: PPUSH
19542: LD_INT 81
19544: PUSH
19545: LD_VAR 0 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PPUSH
19554: CALL_OW 70
19558: ST_TO_ADDR
// end ;
19559: LD_VAR 0 3
19563: RET
// export function IsExtension ( b ) ; begin
19564: LD_INT 0
19566: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19567: LD_ADDR_VAR 0 2
19571: PUSH
19572: LD_VAR 0 1
19576: PUSH
19577: LD_INT 23
19579: PUSH
19580: LD_INT 20
19582: PUSH
19583: LD_INT 22
19585: PUSH
19586: LD_INT 17
19588: PUSH
19589: LD_INT 24
19591: PUSH
19592: LD_INT 21
19594: PUSH
19595: LD_INT 19
19597: PUSH
19598: LD_INT 16
19600: PUSH
19601: LD_INT 25
19603: PUSH
19604: LD_INT 18
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: IN
19619: ST_TO_ADDR
// end ;
19620: LD_VAR 0 2
19624: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19625: LD_INT 0
19627: PPUSH
19628: PPUSH
19629: PPUSH
// result := [ ] ;
19630: LD_ADDR_VAR 0 4
19634: PUSH
19635: EMPTY
19636: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19637: LD_ADDR_VAR 0 5
19641: PUSH
19642: LD_VAR 0 2
19646: PPUSH
19647: LD_INT 21
19649: PUSH
19650: LD_INT 3
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PPUSH
19657: CALL_OW 70
19661: ST_TO_ADDR
// if not tmp then
19662: LD_VAR 0 5
19666: NOT
19667: IFFALSE 19671
// exit ;
19669: GO 19735
// if checkLink then
19671: LD_VAR 0 3
19675: IFFALSE 19725
// begin for i in tmp do
19677: LD_ADDR_VAR 0 6
19681: PUSH
19682: LD_VAR 0 5
19686: PUSH
19687: FOR_IN
19688: IFFALSE 19723
// if GetBase ( i ) <> base then
19690: LD_VAR 0 6
19694: PPUSH
19695: CALL_OW 274
19699: PUSH
19700: LD_VAR 0 1
19704: NONEQUAL
19705: IFFALSE 19721
// ComLinkToBase ( base , i ) ;
19707: LD_VAR 0 1
19711: PPUSH
19712: LD_VAR 0 6
19716: PPUSH
19717: CALL_OW 169
19721: GO 19687
19723: POP
19724: POP
// end ; result := tmp ;
19725: LD_ADDR_VAR 0 4
19729: PUSH
19730: LD_VAR 0 5
19734: ST_TO_ADDR
// end ;
19735: LD_VAR 0 4
19739: RET
// export function ComComplete ( units , b ) ; var i ; begin
19740: LD_INT 0
19742: PPUSH
19743: PPUSH
// if not units then
19744: LD_VAR 0 1
19748: NOT
19749: IFFALSE 19753
// exit ;
19751: GO 19843
// for i in units do
19753: LD_ADDR_VAR 0 4
19757: PUSH
19758: LD_VAR 0 1
19762: PUSH
19763: FOR_IN
19764: IFFALSE 19841
// if BuildingStatus ( b ) = bs_build then
19766: LD_VAR 0 2
19770: PPUSH
19771: CALL_OW 461
19775: PUSH
19776: LD_INT 1
19778: EQUAL
19779: IFFALSE 19839
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19781: LD_VAR 0 4
19785: PPUSH
19786: LD_STRING h
19788: PUSH
19789: LD_VAR 0 2
19793: PPUSH
19794: CALL_OW 250
19798: PUSH
19799: LD_VAR 0 2
19803: PPUSH
19804: CALL_OW 251
19808: PUSH
19809: LD_VAR 0 2
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: PUSH
19832: EMPTY
19833: LIST
19834: PPUSH
19835: CALL_OW 446
19839: GO 19763
19841: POP
19842: POP
// end ;
19843: LD_VAR 0 3
19847: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19848: LD_INT 0
19850: PPUSH
19851: PPUSH
19852: PPUSH
19853: PPUSH
19854: PPUSH
19855: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19856: LD_VAR 0 1
19860: NOT
19861: IFTRUE 19878
19863: PUSH
19864: LD_VAR 0 1
19868: PPUSH
19869: CALL_OW 263
19873: PUSH
19874: LD_INT 2
19876: NONEQUAL
19877: OR
19878: IFFALSE 19882
// exit ;
19880: GO 20198
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19882: LD_ADDR_VAR 0 6
19886: PUSH
19887: LD_INT 22
19889: PUSH
19890: LD_VAR 0 1
19894: PPUSH
19895: CALL_OW 255
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: LD_INT 30
19909: PUSH
19910: LD_INT 36
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 34
19919: PUSH
19920: LD_INT 31
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PPUSH
19936: CALL_OW 69
19940: ST_TO_ADDR
// if not tmp then
19941: LD_VAR 0 6
19945: NOT
19946: IFFALSE 19950
// exit ;
19948: GO 20198
// result := [ ] ;
19950: LD_ADDR_VAR 0 2
19954: PUSH
19955: EMPTY
19956: ST_TO_ADDR
// for i in tmp do
19957: LD_ADDR_VAR 0 3
19961: PUSH
19962: LD_VAR 0 6
19966: PUSH
19967: FOR_IN
19968: IFFALSE 20039
// begin t := UnitsInside ( i ) ;
19970: LD_ADDR_VAR 0 4
19974: PUSH
19975: LD_VAR 0 3
19979: PPUSH
19980: CALL_OW 313
19984: ST_TO_ADDR
// if t then
19985: LD_VAR 0 4
19989: IFFALSE 20037
// for j in t do
19991: LD_ADDR_VAR 0 7
19995: PUSH
19996: LD_VAR 0 4
20000: PUSH
20001: FOR_IN
20002: IFFALSE 20035
// result := Replace ( result , result + 1 , j ) ;
20004: LD_ADDR_VAR 0 2
20008: PUSH
20009: LD_VAR 0 2
20013: PPUSH
20014: LD_VAR 0 2
20018: PUSH
20019: LD_INT 1
20021: PLUS
20022: PPUSH
20023: LD_VAR 0 7
20027: PPUSH
20028: CALL_OW 1
20032: ST_TO_ADDR
20033: GO 20001
20035: POP
20036: POP
// end ;
20037: GO 19967
20039: POP
20040: POP
// if not result then
20041: LD_VAR 0 2
20045: NOT
20046: IFFALSE 20050
// exit ;
20048: GO 20198
// mech := result [ 1 ] ;
20050: LD_ADDR_VAR 0 5
20054: PUSH
20055: LD_VAR 0 2
20059: PUSH
20060: LD_INT 1
20062: ARRAY
20063: ST_TO_ADDR
// if result > 1 then
20064: LD_VAR 0 2
20068: PUSH
20069: LD_INT 1
20071: GREATER
20072: IFFALSE 20184
// begin for i = 2 to result do
20074: LD_ADDR_VAR 0 3
20078: PUSH
20079: DOUBLE
20080: LD_INT 2
20082: DEC
20083: ST_TO_ADDR
20084: LD_VAR 0 2
20088: PUSH
20089: FOR_TO
20090: IFFALSE 20182
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20092: LD_ADDR_VAR 0 4
20096: PUSH
20097: LD_VAR 0 2
20101: PUSH
20102: LD_VAR 0 3
20106: ARRAY
20107: PPUSH
20108: LD_INT 3
20110: PPUSH
20111: CALL_OW 259
20115: PUSH
20116: LD_VAR 0 2
20120: PUSH
20121: LD_VAR 0 3
20125: ARRAY
20126: PPUSH
20127: CALL_OW 432
20131: MINUS
20132: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20133: LD_VAR 0 4
20137: PUSH
20138: LD_VAR 0 5
20142: PPUSH
20143: LD_INT 3
20145: PPUSH
20146: CALL_OW 259
20150: PUSH
20151: LD_VAR 0 5
20155: PPUSH
20156: CALL_OW 432
20160: MINUS
20161: GREATEREQUAL
20162: IFFALSE 20180
// mech := result [ i ] ;
20164: LD_ADDR_VAR 0 5
20168: PUSH
20169: LD_VAR 0 2
20173: PUSH
20174: LD_VAR 0 3
20178: ARRAY
20179: ST_TO_ADDR
// end ;
20180: GO 20089
20182: POP
20183: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20184: LD_VAR 0 1
20188: PPUSH
20189: LD_VAR 0 5
20193: PPUSH
20194: CALL_OW 135
// end ;
20198: LD_VAR 0 2
20202: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20203: LD_INT 0
20205: PPUSH
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
20210: PPUSH
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
20215: PPUSH
20216: PPUSH
20217: PPUSH
// result := [ ] ;
20218: LD_ADDR_VAR 0 7
20222: PUSH
20223: EMPTY
20224: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20225: LD_VAR 0 1
20229: PPUSH
20230: CALL_OW 266
20234: PUSH
20235: LD_INT 0
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: IN
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 21890
// if name then
20250: LD_VAR 0 3
20254: IFFALSE 20270
// SetBName ( base_dep , name ) ;
20256: LD_VAR 0 1
20260: PPUSH
20261: LD_VAR 0 3
20265: PPUSH
20266: CALL_OW 500
// base := GetBase ( base_dep ) ;
20270: LD_ADDR_VAR 0 15
20274: PUSH
20275: LD_VAR 0 1
20279: PPUSH
20280: CALL_OW 274
20284: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20285: LD_ADDR_VAR 0 16
20289: PUSH
20290: LD_VAR 0 1
20294: PPUSH
20295: CALL_OW 255
20299: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20300: LD_ADDR_VAR 0 17
20304: PUSH
20305: LD_VAR 0 1
20309: PPUSH
20310: CALL_OW 248
20314: ST_TO_ADDR
// if sources then
20315: LD_VAR 0 5
20319: IFFALSE 20366
// for i = 1 to 3 do
20321: LD_ADDR_VAR 0 8
20325: PUSH
20326: DOUBLE
20327: LD_INT 1
20329: DEC
20330: ST_TO_ADDR
20331: LD_INT 3
20333: PUSH
20334: FOR_TO
20335: IFFALSE 20364
// AddResourceType ( base , i , sources [ i ] ) ;
20337: LD_VAR 0 15
20341: PPUSH
20342: LD_VAR 0 8
20346: PPUSH
20347: LD_VAR 0 5
20351: PUSH
20352: LD_VAR 0 8
20356: ARRAY
20357: PPUSH
20358: CALL_OW 276
20362: GO 20334
20364: POP
20365: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20366: LD_ADDR_VAR 0 18
20370: PUSH
20371: LD_VAR 0 15
20375: PPUSH
20376: LD_VAR 0 2
20380: PPUSH
20381: LD_INT 1
20383: PPUSH
20384: CALL 19625 0 3
20388: ST_TO_ADDR
// InitHc ;
20389: CALL_OW 19
// InitUc ;
20393: CALL_OW 18
// uc_side := side ;
20397: LD_ADDR_OWVAR 20
20401: PUSH
20402: LD_VAR 0 16
20406: ST_TO_ADDR
// uc_nation := nation ;
20407: LD_ADDR_OWVAR 21
20411: PUSH
20412: LD_VAR 0 17
20416: ST_TO_ADDR
// if buildings then
20417: LD_VAR 0 18
20421: IFFALSE 21749
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20423: LD_ADDR_VAR 0 19
20427: PUSH
20428: LD_VAR 0 18
20432: PPUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 29
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 30
20448: PUSH
20449: LD_INT 30
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: PPUSH
20461: CALL_OW 72
20465: ST_TO_ADDR
// if tmp then
20466: LD_VAR 0 19
20470: IFFALSE 20518
// for i in tmp do
20472: LD_ADDR_VAR 0 8
20476: PUSH
20477: LD_VAR 0 19
20481: PUSH
20482: FOR_IN
20483: IFFALSE 20516
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20485: LD_VAR 0 8
20489: PPUSH
20490: CALL_OW 250
20494: PPUSH
20495: LD_VAR 0 8
20499: PPUSH
20500: CALL_OW 251
20504: PPUSH
20505: LD_VAR 0 16
20509: PPUSH
20510: CALL_OW 441
20514: GO 20482
20516: POP
20517: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20518: LD_VAR 0 18
20522: PPUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 30
20528: PUSH
20529: LD_INT 32
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 30
20538: PUSH
20539: LD_INT 33
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: PPUSH
20551: CALL_OW 72
20555: IFFALSE 20643
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20557: LD_ADDR_VAR 0 8
20561: PUSH
20562: LD_VAR 0 18
20566: PPUSH
20567: LD_INT 2
20569: PUSH
20570: LD_INT 30
20572: PUSH
20573: LD_INT 32
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 30
20582: PUSH
20583: LD_INT 33
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: LIST
20594: PPUSH
20595: CALL_OW 72
20599: PUSH
20600: FOR_IN
20601: IFFALSE 20641
// begin if not GetBWeapon ( i ) then
20603: LD_VAR 0 8
20607: PPUSH
20608: CALL_OW 269
20612: NOT
20613: IFFALSE 20639
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20615: LD_VAR 0 8
20619: PPUSH
20620: LD_VAR 0 8
20624: PPUSH
20625: LD_VAR 0 2
20629: PPUSH
20630: CALL 21895 0 2
20634: PPUSH
20635: CALL_OW 431
// end ;
20639: GO 20600
20641: POP
20642: POP
// end ; for i = 1 to personel do
20643: LD_ADDR_VAR 0 8
20647: PUSH
20648: DOUBLE
20649: LD_INT 1
20651: DEC
20652: ST_TO_ADDR
20653: LD_VAR 0 6
20657: PUSH
20658: FOR_TO
20659: IFFALSE 21729
// begin if i > 4 then
20661: LD_VAR 0 8
20665: PUSH
20666: LD_INT 4
20668: GREATER
20669: IFFALSE 20673
// break ;
20671: GO 21729
// case i of 1 :
20673: LD_VAR 0 8
20677: PUSH
20678: LD_INT 1
20680: DOUBLE
20681: EQUAL
20682: IFTRUE 20686
20684: GO 20766
20686: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20687: LD_ADDR_VAR 0 12
20691: PUSH
20692: LD_VAR 0 18
20696: PPUSH
20697: LD_INT 22
20699: PUSH
20700: LD_VAR 0 16
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 58
20711: PUSH
20712: EMPTY
20713: LIST
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: LD_INT 30
20720: PUSH
20721: LD_INT 32
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 30
20730: PUSH
20731: LD_INT 4
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 30
20740: PUSH
20741: LD_INT 5
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 72
20763: ST_TO_ADDR
20764: GO 20988
20766: LD_INT 2
20768: DOUBLE
20769: EQUAL
20770: IFTRUE 20774
20772: GO 20836
20774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20775: LD_ADDR_VAR 0 12
20779: PUSH
20780: LD_VAR 0 18
20784: PPUSH
20785: LD_INT 22
20787: PUSH
20788: LD_VAR 0 16
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 30
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 30
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PPUSH
20829: CALL_OW 72
20833: ST_TO_ADDR
20834: GO 20988
20836: LD_INT 3
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20906
20844: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20845: LD_ADDR_VAR 0 12
20849: PUSH
20850: LD_VAR 0 18
20854: PPUSH
20855: LD_INT 22
20857: PUSH
20858: LD_VAR 0 16
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 2
20869: PUSH
20870: LD_INT 30
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 30
20882: PUSH
20883: LD_INT 3
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PPUSH
20899: CALL_OW 72
20903: ST_TO_ADDR
20904: GO 20988
20906: LD_INT 4
20908: DOUBLE
20909: EQUAL
20910: IFTRUE 20914
20912: GO 20987
20914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20915: LD_ADDR_VAR 0 12
20919: PUSH
20920: LD_VAR 0 18
20924: PPUSH
20925: LD_INT 22
20927: PUSH
20928: LD_VAR 0 16
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: PUSH
20940: LD_INT 30
20942: PUSH
20943: LD_INT 6
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 30
20952: PUSH
20953: LD_INT 7
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 30
20962: PUSH
20963: LD_INT 8
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PPUSH
20980: CALL_OW 72
20984: ST_TO_ADDR
20985: GO 20988
20987: POP
// if i = 1 then
20988: LD_VAR 0 8
20992: PUSH
20993: LD_INT 1
20995: EQUAL
20996: IFFALSE 21107
// begin tmp := [ ] ;
20998: LD_ADDR_VAR 0 19
21002: PUSH
21003: EMPTY
21004: ST_TO_ADDR
// for j in f do
21005: LD_ADDR_VAR 0 9
21009: PUSH
21010: LD_VAR 0 12
21014: PUSH
21015: FOR_IN
21016: IFFALSE 21089
// if GetBType ( j ) = b_bunker then
21018: LD_VAR 0 9
21022: PPUSH
21023: CALL_OW 266
21027: PUSH
21028: LD_INT 32
21030: EQUAL
21031: IFFALSE 21058
// tmp := Insert ( tmp , 1 , j ) else
21033: LD_ADDR_VAR 0 19
21037: PUSH
21038: LD_VAR 0 19
21042: PPUSH
21043: LD_INT 1
21045: PPUSH
21046: LD_VAR 0 9
21050: PPUSH
21051: CALL_OW 2
21055: ST_TO_ADDR
21056: GO 21087
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21058: LD_ADDR_VAR 0 19
21062: PUSH
21063: LD_VAR 0 19
21067: PPUSH
21068: LD_VAR 0 19
21072: PUSH
21073: LD_INT 1
21075: PLUS
21076: PPUSH
21077: LD_VAR 0 9
21081: PPUSH
21082: CALL_OW 2
21086: ST_TO_ADDR
21087: GO 21015
21089: POP
21090: POP
// if tmp then
21091: LD_VAR 0 19
21095: IFFALSE 21107
// f := tmp ;
21097: LD_ADDR_VAR 0 12
21101: PUSH
21102: LD_VAR 0 19
21106: ST_TO_ADDR
// end ; x := personel [ i ] ;
21107: LD_ADDR_VAR 0 13
21111: PUSH
21112: LD_VAR 0 6
21116: PUSH
21117: LD_VAR 0 8
21121: ARRAY
21122: ST_TO_ADDR
// if x = - 1 then
21123: LD_VAR 0 13
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: EQUAL
21132: IFFALSE 21343
// begin for j in f do
21134: LD_ADDR_VAR 0 9
21138: PUSH
21139: LD_VAR 0 12
21143: PUSH
21144: FOR_IN
21145: IFFALSE 21339
// repeat InitHc ;
21147: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21151: LD_VAR 0 9
21155: PPUSH
21156: CALL_OW 266
21160: PUSH
21161: LD_INT 5
21163: EQUAL
21164: IFFALSE 21234
// begin if UnitsInside ( j ) < 3 then
21166: LD_VAR 0 9
21170: PPUSH
21171: CALL_OW 313
21175: PUSH
21176: LD_INT 3
21178: LESS
21179: IFFALSE 21215
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21181: LD_INT 0
21183: PPUSH
21184: LD_INT 5
21186: PUSH
21187: LD_INT 8
21189: PUSH
21190: LD_INT 9
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: LD_VAR 0 17
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 4
21208: PPUSH
21209: CALL_OW 380
21213: GO 21232
// PrepareHuman ( false , i , skill ) ;
21215: LD_INT 0
21217: PPUSH
21218: LD_VAR 0 8
21222: PPUSH
21223: LD_VAR 0 4
21227: PPUSH
21228: CALL_OW 380
// end else
21232: GO 21251
// PrepareHuman ( false , i , skill ) ;
21234: LD_INT 0
21236: PPUSH
21237: LD_VAR 0 8
21241: PPUSH
21242: LD_VAR 0 4
21246: PPUSH
21247: CALL_OW 380
// un := CreateHuman ;
21251: LD_ADDR_VAR 0 14
21255: PUSH
21256: CALL_OW 44
21260: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21261: LD_ADDR_VAR 0 7
21265: PUSH
21266: LD_VAR 0 7
21270: PPUSH
21271: LD_INT 1
21273: PPUSH
21274: LD_VAR 0 14
21278: PPUSH
21279: CALL_OW 2
21283: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21284: LD_VAR 0 14
21288: PPUSH
21289: LD_VAR 0 9
21293: PPUSH
21294: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21298: LD_VAR 0 9
21302: PPUSH
21303: CALL_OW 313
21307: PUSH
21308: LD_INT 6
21310: EQUAL
21311: IFTRUE 21335
21313: PUSH
21314: LD_VAR 0 9
21318: PPUSH
21319: CALL_OW 266
21323: PUSH
21324: LD_INT 32
21326: PUSH
21327: LD_INT 31
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: IN
21334: OR
21335: IFFALSE 21147
21337: GO 21144
21339: POP
21340: POP
// end else
21341: GO 21727
// for j = 1 to x do
21343: LD_ADDR_VAR 0 9
21347: PUSH
21348: DOUBLE
21349: LD_INT 1
21351: DEC
21352: ST_TO_ADDR
21353: LD_VAR 0 13
21357: PUSH
21358: FOR_TO
21359: IFFALSE 21725
// begin InitHc ;
21361: CALL_OW 19
// if not f then
21365: LD_VAR 0 12
21369: NOT
21370: IFFALSE 21459
// begin PrepareHuman ( false , i , skill ) ;
21372: LD_INT 0
21374: PPUSH
21375: LD_VAR 0 8
21379: PPUSH
21380: LD_VAR 0 4
21384: PPUSH
21385: CALL_OW 380
// un := CreateHuman ;
21389: LD_ADDR_VAR 0 14
21393: PUSH
21394: CALL_OW 44
21398: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21399: LD_ADDR_VAR 0 7
21403: PUSH
21404: LD_VAR 0 7
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: LD_VAR 0 14
21416: PPUSH
21417: CALL_OW 2
21421: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21422: LD_VAR 0 14
21426: PPUSH
21427: LD_VAR 0 1
21431: PPUSH
21432: CALL_OW 250
21436: PPUSH
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 251
21446: PPUSH
21447: LD_INT 10
21449: PPUSH
21450: LD_INT 0
21452: PPUSH
21453: CALL_OW 50
// continue ;
21457: GO 21358
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21459: LD_VAR 0 12
21463: PUSH
21464: LD_INT 1
21466: ARRAY
21467: PPUSH
21468: CALL_OW 313
21472: IFFALSE 21500
21474: PUSH
21475: LD_VAR 0 12
21479: PUSH
21480: LD_INT 1
21482: ARRAY
21483: PPUSH
21484: CALL_OW 266
21488: PUSH
21489: LD_INT 32
21491: PUSH
21492: LD_INT 31
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: IN
21499: AND
21500: IFTRUE 21521
21502: PUSH
21503: LD_VAR 0 12
21507: PUSH
21508: LD_INT 1
21510: ARRAY
21511: PPUSH
21512: CALL_OW 313
21516: PUSH
21517: LD_INT 6
21519: EQUAL
21520: OR
21521: IFFALSE 21541
// f := Delete ( f , 1 ) ;
21523: LD_ADDR_VAR 0 12
21527: PUSH
21528: LD_VAR 0 12
21532: PPUSH
21533: LD_INT 1
21535: PPUSH
21536: CALL_OW 3
21540: ST_TO_ADDR
// if not f then
21541: LD_VAR 0 12
21545: NOT
21546: IFFALSE 21564
// begin x := x + 2 ;
21548: LD_ADDR_VAR 0 13
21552: PUSH
21553: LD_VAR 0 13
21557: PUSH
21558: LD_INT 2
21560: PLUS
21561: ST_TO_ADDR
// continue ;
21562: GO 21358
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21564: LD_VAR 0 12
21568: PUSH
21569: LD_INT 1
21571: ARRAY
21572: PPUSH
21573: CALL_OW 266
21577: PUSH
21578: LD_INT 5
21580: EQUAL
21581: IFFALSE 21655
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21583: LD_VAR 0 12
21587: PUSH
21588: LD_INT 1
21590: ARRAY
21591: PPUSH
21592: CALL_OW 313
21596: PUSH
21597: LD_INT 3
21599: LESS
21600: IFFALSE 21636
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21602: LD_INT 0
21604: PPUSH
21605: LD_INT 5
21607: PUSH
21608: LD_INT 8
21610: PUSH
21611: LD_INT 9
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: PUSH
21619: LD_VAR 0 17
21623: ARRAY
21624: PPUSH
21625: LD_VAR 0 4
21629: PPUSH
21630: CALL_OW 380
21634: GO 21653
// PrepareHuman ( false , i , skill ) ;
21636: LD_INT 0
21638: PPUSH
21639: LD_VAR 0 8
21643: PPUSH
21644: LD_VAR 0 4
21648: PPUSH
21649: CALL_OW 380
// end else
21653: GO 21672
// PrepareHuman ( false , i , skill ) ;
21655: LD_INT 0
21657: PPUSH
21658: LD_VAR 0 8
21662: PPUSH
21663: LD_VAR 0 4
21667: PPUSH
21668: CALL_OW 380
// un := CreateHuman ;
21672: LD_ADDR_VAR 0 14
21676: PUSH
21677: CALL_OW 44
21681: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21682: LD_ADDR_VAR 0 7
21686: PUSH
21687: LD_VAR 0 7
21691: PPUSH
21692: LD_INT 1
21694: PPUSH
21695: LD_VAR 0 14
21699: PPUSH
21700: CALL_OW 2
21704: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21705: LD_VAR 0 14
21709: PPUSH
21710: LD_VAR 0 12
21714: PUSH
21715: LD_INT 1
21717: ARRAY
21718: PPUSH
21719: CALL_OW 52
// end ;
21723: GO 21358
21725: POP
21726: POP
// end ;
21727: GO 20658
21729: POP
21730: POP
// result := result ^ buildings ;
21731: LD_ADDR_VAR 0 7
21735: PUSH
21736: LD_VAR 0 7
21740: PUSH
21741: LD_VAR 0 18
21745: ADD
21746: ST_TO_ADDR
// end else
21747: GO 21890
// begin for i = 1 to personel do
21749: LD_ADDR_VAR 0 8
21753: PUSH
21754: DOUBLE
21755: LD_INT 1
21757: DEC
21758: ST_TO_ADDR
21759: LD_VAR 0 6
21763: PUSH
21764: FOR_TO
21765: IFFALSE 21888
// begin if i > 4 then
21767: LD_VAR 0 8
21771: PUSH
21772: LD_INT 4
21774: GREATER
21775: IFFALSE 21779
// break ;
21777: GO 21888
// x := personel [ i ] ;
21779: LD_ADDR_VAR 0 13
21783: PUSH
21784: LD_VAR 0 6
21788: PUSH
21789: LD_VAR 0 8
21793: ARRAY
21794: ST_TO_ADDR
// if x = - 1 then
21795: LD_VAR 0 13
21799: PUSH
21800: LD_INT 1
21802: NEG
21803: EQUAL
21804: IFFALSE 21808
// continue ;
21806: GO 21764
// PrepareHuman ( false , i , skill ) ;
21808: LD_INT 0
21810: PPUSH
21811: LD_VAR 0 8
21815: PPUSH
21816: LD_VAR 0 4
21820: PPUSH
21821: CALL_OW 380
// un := CreateHuman ;
21825: LD_ADDR_VAR 0 14
21829: PUSH
21830: CALL_OW 44
21834: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21835: LD_VAR 0 14
21839: PPUSH
21840: LD_VAR 0 1
21844: PPUSH
21845: CALL_OW 250
21849: PPUSH
21850: LD_VAR 0 1
21854: PPUSH
21855: CALL_OW 251
21859: PPUSH
21860: LD_INT 10
21862: PPUSH
21863: LD_INT 0
21865: PPUSH
21866: CALL_OW 50
// result := result ^ un ;
21870: LD_ADDR_VAR 0 7
21874: PUSH
21875: LD_VAR 0 7
21879: PUSH
21880: LD_VAR 0 14
21884: ADD
21885: ST_TO_ADDR
// end ;
21886: GO 21764
21888: POP
21889: POP
// end ; end ;
21890: LD_VAR 0 7
21894: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21895: LD_INT 0
21897: PPUSH
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
21910: PPUSH
21911: PPUSH
21912: PPUSH
// result := false ;
21913: LD_ADDR_VAR 0 3
21917: PUSH
21918: LD_INT 0
21920: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21921: LD_VAR 0 1
21925: NOT
21926: IFTRUE 21951
21928: PUSH
21929: LD_VAR 0 1
21933: PPUSH
21934: CALL_OW 266
21938: PUSH
21939: LD_INT 32
21941: PUSH
21942: LD_INT 33
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: IN
21949: NOT
21950: OR
21951: IFFALSE 21955
// exit ;
21953: GO 23090
// nat := GetNation ( tower ) ;
21955: LD_ADDR_VAR 0 12
21959: PUSH
21960: LD_VAR 0 1
21964: PPUSH
21965: CALL_OW 248
21969: ST_TO_ADDR
// side := GetSide ( tower ) ;
21970: LD_ADDR_VAR 0 16
21974: PUSH
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL_OW 255
21984: ST_TO_ADDR
// x := GetX ( tower ) ;
21985: LD_ADDR_VAR 0 10
21989: PUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 250
21999: ST_TO_ADDR
// y := GetY ( tower ) ;
22000: LD_ADDR_VAR 0 11
22004: PUSH
22005: LD_VAR 0 1
22009: PPUSH
22010: CALL_OW 251
22014: ST_TO_ADDR
// if not x or not y then
22015: LD_VAR 0 10
22019: NOT
22020: IFTRUE 22029
22022: PUSH
22023: LD_VAR 0 11
22027: NOT
22028: OR
22029: IFFALSE 22033
// exit ;
22031: GO 23090
// weapon := 0 ;
22033: LD_ADDR_VAR 0 18
22037: PUSH
22038: LD_INT 0
22040: ST_TO_ADDR
// fac_list := [ ] ;
22041: LD_ADDR_VAR 0 17
22045: PUSH
22046: EMPTY
22047: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22048: LD_ADDR_VAR 0 6
22052: PUSH
22053: LD_VAR 0 1
22057: PPUSH
22058: CALL_OW 274
22062: PPUSH
22063: LD_VAR 0 2
22067: PPUSH
22068: LD_INT 0
22070: PPUSH
22071: CALL 19625 0 3
22075: PPUSH
22076: LD_INT 30
22078: PUSH
22079: LD_INT 3
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PPUSH
22086: CALL_OW 72
22090: ST_TO_ADDR
// if not factories then
22091: LD_VAR 0 6
22095: NOT
22096: IFFALSE 22100
// exit ;
22098: GO 23090
// for i in factories do
22100: LD_ADDR_VAR 0 8
22104: PUSH
22105: LD_VAR 0 6
22109: PUSH
22110: FOR_IN
22111: IFFALSE 22136
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22113: LD_ADDR_VAR 0 17
22117: PUSH
22118: LD_VAR 0 17
22122: PUSH
22123: LD_VAR 0 8
22127: PPUSH
22128: CALL_OW 478
22132: UNION
22133: ST_TO_ADDR
22134: GO 22110
22136: POP
22137: POP
// if not fac_list then
22138: LD_VAR 0 17
22142: NOT
22143: IFFALSE 22147
// exit ;
22145: GO 23090
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22147: LD_ADDR_VAR 0 5
22151: PUSH
22152: LD_INT 4
22154: PUSH
22155: LD_INT 5
22157: PUSH
22158: LD_INT 9
22160: PUSH
22161: LD_INT 10
22163: PUSH
22164: LD_INT 6
22166: PUSH
22167: LD_INT 7
22169: PUSH
22170: LD_INT 11
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 27
22184: PUSH
22185: LD_INT 28
22187: PUSH
22188: LD_INT 26
22190: PUSH
22191: LD_INT 30
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 43
22202: PUSH
22203: LD_INT 44
22205: PUSH
22206: LD_INT 46
22208: PUSH
22209: LD_INT 45
22211: PUSH
22212: LD_INT 47
22214: PUSH
22215: LD_INT 49
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: PUSH
22231: LD_VAR 0 12
22235: ARRAY
22236: ST_TO_ADDR
// list := list isect fac_list ;
22237: LD_ADDR_VAR 0 5
22241: PUSH
22242: LD_VAR 0 5
22246: PUSH
22247: LD_VAR 0 17
22251: ISECT
22252: ST_TO_ADDR
// if not list then
22253: LD_VAR 0 5
22257: NOT
22258: IFFALSE 22262
// exit ;
22260: GO 23090
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22262: LD_VAR 0 12
22266: PUSH
22267: LD_INT 3
22269: EQUAL
22270: IFFALSE 22282
22272: PUSH
22273: LD_INT 49
22275: PUSH
22276: LD_VAR 0 5
22280: IN
22281: AND
22282: IFFALSE 22302
22284: PUSH
22285: LD_INT 31
22287: PPUSH
22288: LD_VAR 0 16
22292: PPUSH
22293: CALL_OW 321
22297: PUSH
22298: LD_INT 2
22300: EQUAL
22301: AND
22302: IFFALSE 22362
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22304: LD_INT 22
22306: PUSH
22307: LD_VAR 0 16
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 35
22318: PUSH
22319: LD_INT 49
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 91
22328: PUSH
22329: LD_VAR 0 1
22333: PUSH
22334: LD_INT 10
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: LIST
22346: PPUSH
22347: CALL_OW 69
22351: NOT
22352: IFFALSE 22362
// weapon := ru_time_lapser ;
22354: LD_ADDR_VAR 0 18
22358: PUSH
22359: LD_INT 49
22361: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22362: LD_VAR 0 12
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: LD_INT 2
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: IN
22377: IFFALSE 22401
22379: PUSH
22380: LD_INT 11
22382: PUSH
22383: LD_VAR 0 5
22387: IN
22388: IFTRUE 22400
22390: PUSH
22391: LD_INT 30
22393: PUSH
22394: LD_VAR 0 5
22398: IN
22399: OR
22400: AND
22401: IFFALSE 22421
22403: PUSH
22404: LD_INT 6
22406: PPUSH
22407: LD_VAR 0 16
22411: PPUSH
22412: CALL_OW 321
22416: PUSH
22417: LD_INT 2
22419: EQUAL
22420: AND
22421: IFFALSE 22588
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22423: LD_INT 22
22425: PUSH
22426: LD_VAR 0 16
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 35
22440: PUSH
22441: LD_INT 11
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 35
22450: PUSH
22451: LD_INT 30
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 91
22465: PUSH
22466: LD_VAR 0 1
22470: PUSH
22471: LD_INT 18
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: LIST
22483: PPUSH
22484: CALL_OW 69
22488: NOT
22489: IFFALSE 22565
22491: PUSH
22492: LD_INT 22
22494: PUSH
22495: LD_VAR 0 16
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: LD_INT 30
22509: PUSH
22510: LD_INT 32
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 33
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 91
22534: PUSH
22535: LD_VAR 0 1
22539: PUSH
22540: LD_INT 12
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: LIST
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: PUSH
22553: EMPTY
22554: LIST
22555: PPUSH
22556: CALL_OW 69
22560: PUSH
22561: LD_INT 2
22563: GREATER
22564: AND
22565: IFFALSE 22588
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22567: LD_ADDR_VAR 0 18
22571: PUSH
22572: LD_INT 11
22574: PUSH
22575: LD_INT 30
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_VAR 0 12
22586: ARRAY
22587: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22588: LD_VAR 0 18
22592: NOT
22593: IFFALSE 22613
22595: PUSH
22596: LD_INT 40
22598: PPUSH
22599: LD_VAR 0 16
22603: PPUSH
22604: CALL_OW 321
22608: PUSH
22609: LD_INT 2
22611: EQUAL
22612: AND
22613: IFFALSE 22649
22615: PUSH
22616: LD_INT 7
22618: PUSH
22619: LD_VAR 0 5
22623: IN
22624: IFTRUE 22636
22626: PUSH
22627: LD_INT 28
22629: PUSH
22630: LD_VAR 0 5
22634: IN
22635: OR
22636: IFTRUE 22648
22638: PUSH
22639: LD_INT 45
22641: PUSH
22642: LD_VAR 0 5
22646: IN
22647: OR
22648: AND
22649: IFFALSE 22903
// begin hex := GetHexInfo ( x , y ) ;
22651: LD_ADDR_VAR 0 4
22655: PUSH
22656: LD_VAR 0 10
22660: PPUSH
22661: LD_VAR 0 11
22665: PPUSH
22666: CALL_OW 546
22670: ST_TO_ADDR
// if hex [ 1 ] then
22671: LD_VAR 0 4
22675: PUSH
22676: LD_INT 1
22678: ARRAY
22679: IFFALSE 22683
// exit ;
22681: GO 23090
// height := hex [ 2 ] ;
22683: LD_ADDR_VAR 0 15
22687: PUSH
22688: LD_VAR 0 4
22692: PUSH
22693: LD_INT 2
22695: ARRAY
22696: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22697: LD_ADDR_VAR 0 14
22701: PUSH
22702: LD_INT 0
22704: PUSH
22705: LD_INT 2
22707: PUSH
22708: LD_INT 3
22710: PUSH
22711: LD_INT 5
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: ST_TO_ADDR
// for i in tmp do
22720: LD_ADDR_VAR 0 8
22724: PUSH
22725: LD_VAR 0 14
22729: PUSH
22730: FOR_IN
22731: IFFALSE 22901
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22733: LD_ADDR_VAR 0 9
22737: PUSH
22738: LD_VAR 0 10
22742: PPUSH
22743: LD_VAR 0 8
22747: PPUSH
22748: LD_INT 5
22750: PPUSH
22751: CALL_OW 272
22755: PUSH
22756: LD_VAR 0 11
22760: PPUSH
22761: LD_VAR 0 8
22765: PPUSH
22766: LD_INT 5
22768: PPUSH
22769: CALL_OW 273
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22778: LD_VAR 0 9
22782: PUSH
22783: LD_INT 1
22785: ARRAY
22786: PPUSH
22787: LD_VAR 0 9
22791: PUSH
22792: LD_INT 2
22794: ARRAY
22795: PPUSH
22796: CALL_OW 488
22800: IFFALSE 22899
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22802: LD_ADDR_VAR 0 4
22806: PUSH
22807: LD_VAR 0 9
22811: PUSH
22812: LD_INT 1
22814: ARRAY
22815: PPUSH
22816: LD_VAR 0 9
22820: PUSH
22821: LD_INT 2
22823: ARRAY
22824: PPUSH
22825: CALL_OW 546
22829: ST_TO_ADDR
// if hex [ 1 ] then
22830: LD_VAR 0 4
22834: PUSH
22835: LD_INT 1
22837: ARRAY
22838: IFFALSE 22842
// continue ;
22840: GO 22730
// h := hex [ 2 ] ;
22842: LD_ADDR_VAR 0 13
22846: PUSH
22847: LD_VAR 0 4
22851: PUSH
22852: LD_INT 2
22854: ARRAY
22855: ST_TO_ADDR
// if h + 7 < height then
22856: LD_VAR 0 13
22860: PUSH
22861: LD_INT 7
22863: PLUS
22864: PUSH
22865: LD_VAR 0 15
22869: LESS
22870: IFFALSE 22899
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22872: LD_ADDR_VAR 0 18
22876: PUSH
22877: LD_INT 7
22879: PUSH
22880: LD_INT 28
22882: PUSH
22883: LD_INT 45
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: LIST
22890: PUSH
22891: LD_VAR 0 12
22895: ARRAY
22896: ST_TO_ADDR
// break ;
22897: GO 22901
// end ; end ; end ;
22899: GO 22730
22901: POP
22902: POP
// end ; if not weapon then
22903: LD_VAR 0 18
22907: NOT
22908: IFFALSE 22968
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22910: LD_ADDR_VAR 0 5
22914: PUSH
22915: LD_VAR 0 5
22919: PUSH
22920: LD_INT 11
22922: PUSH
22923: LD_INT 30
22925: PUSH
22926: LD_INT 49
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: LIST
22933: DIFF
22934: ST_TO_ADDR
// if not list then
22935: LD_VAR 0 5
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 23090
// weapon := list [ rand ( 1 , list ) ] ;
22944: LD_ADDR_VAR 0 18
22948: PUSH
22949: LD_VAR 0 5
22953: PUSH
22954: LD_INT 1
22956: PPUSH
22957: LD_VAR 0 5
22961: PPUSH
22962: CALL_OW 12
22966: ARRAY
22967: ST_TO_ADDR
// end ; if weapon then
22968: LD_VAR 0 18
22972: IFFALSE 23090
// begin tmp := CostOfWeapon ( weapon ) ;
22974: LD_ADDR_VAR 0 14
22978: PUSH
22979: LD_VAR 0 18
22983: PPUSH
22984: CALL_OW 451
22988: ST_TO_ADDR
// j := GetBase ( tower ) ;
22989: LD_ADDR_VAR 0 9
22993: PUSH
22994: LD_VAR 0 1
22998: PPUSH
22999: CALL_OW 274
23003: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23004: LD_VAR 0 9
23008: PPUSH
23009: LD_INT 1
23011: PPUSH
23012: CALL_OW 275
23016: PUSH
23017: LD_VAR 0 14
23021: PUSH
23022: LD_INT 1
23024: ARRAY
23025: GREATEREQUAL
23026: IFFALSE 23052
23028: PUSH
23029: LD_VAR 0 9
23033: PPUSH
23034: LD_INT 2
23036: PPUSH
23037: CALL_OW 275
23041: PUSH
23042: LD_VAR 0 14
23046: PUSH
23047: LD_INT 2
23049: ARRAY
23050: GREATEREQUAL
23051: AND
23052: IFFALSE 23078
23054: PUSH
23055: LD_VAR 0 9
23059: PPUSH
23060: LD_INT 3
23062: PPUSH
23063: CALL_OW 275
23067: PUSH
23068: LD_VAR 0 14
23072: PUSH
23073: LD_INT 3
23075: ARRAY
23076: GREATEREQUAL
23077: AND
23078: IFFALSE 23090
// result := weapon ;
23080: LD_ADDR_VAR 0 3
23084: PUSH
23085: LD_VAR 0 18
23089: ST_TO_ADDR
// end ; end ;
23090: LD_VAR 0 3
23094: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23095: LD_INT 0
23097: PPUSH
23098: PPUSH
// result := true ;
23099: LD_ADDR_VAR 0 3
23103: PUSH
23104: LD_INT 1
23106: ST_TO_ADDR
// if array1 = array2 then
23107: LD_VAR 0 1
23111: PUSH
23112: LD_VAR 0 2
23116: EQUAL
23117: IFFALSE 23177
// begin for i = 1 to array1 do
23119: LD_ADDR_VAR 0 4
23123: PUSH
23124: DOUBLE
23125: LD_INT 1
23127: DEC
23128: ST_TO_ADDR
23129: LD_VAR 0 1
23133: PUSH
23134: FOR_TO
23135: IFFALSE 23173
// if array1 [ i ] <> array2 [ i ] then
23137: LD_VAR 0 1
23141: PUSH
23142: LD_VAR 0 4
23146: ARRAY
23147: PUSH
23148: LD_VAR 0 2
23152: PUSH
23153: LD_VAR 0 4
23157: ARRAY
23158: NONEQUAL
23159: IFFALSE 23171
// begin result := false ;
23161: LD_ADDR_VAR 0 3
23165: PUSH
23166: LD_INT 0
23168: ST_TO_ADDR
// break ;
23169: GO 23173
// end ;
23171: GO 23134
23173: POP
23174: POP
// end else
23175: GO 23185
// result := false ;
23177: LD_ADDR_VAR 0 3
23181: PUSH
23182: LD_INT 0
23184: ST_TO_ADDR
// end ;
23185: LD_VAR 0 3
23189: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23190: LD_INT 0
23192: PPUSH
23193: PPUSH
// if not array1 or not array2 then
23194: LD_VAR 0 1
23198: NOT
23199: IFTRUE 23208
23201: PUSH
23202: LD_VAR 0 2
23206: NOT
23207: OR
23208: IFFALSE 23212
// exit ;
23210: GO 23276
// result := true ;
23212: LD_ADDR_VAR 0 3
23216: PUSH
23217: LD_INT 1
23219: ST_TO_ADDR
// for i = 1 to array1 do
23220: LD_ADDR_VAR 0 4
23224: PUSH
23225: DOUBLE
23226: LD_INT 1
23228: DEC
23229: ST_TO_ADDR
23230: LD_VAR 0 1
23234: PUSH
23235: FOR_TO
23236: IFFALSE 23274
// if array1 [ i ] <> array2 [ i ] then
23238: LD_VAR 0 1
23242: PUSH
23243: LD_VAR 0 4
23247: ARRAY
23248: PUSH
23249: LD_VAR 0 2
23253: PUSH
23254: LD_VAR 0 4
23258: ARRAY
23259: NONEQUAL
23260: IFFALSE 23272
// begin result := false ;
23262: LD_ADDR_VAR 0 3
23266: PUSH
23267: LD_INT 0
23269: ST_TO_ADDR
// break ;
23270: GO 23274
// end ;
23272: GO 23235
23274: POP
23275: POP
// end ;
23276: LD_VAR 0 3
23280: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23281: LD_INT 0
23283: PPUSH
23284: PPUSH
23285: PPUSH
// pom := GetBase ( fac ) ;
23286: LD_ADDR_VAR 0 5
23290: PUSH
23291: LD_VAR 0 1
23295: PPUSH
23296: CALL_OW 274
23300: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23301: LD_ADDR_VAR 0 4
23305: PUSH
23306: LD_VAR 0 2
23310: PUSH
23311: LD_INT 1
23313: ARRAY
23314: PPUSH
23315: LD_VAR 0 2
23319: PUSH
23320: LD_INT 2
23322: ARRAY
23323: PPUSH
23324: LD_VAR 0 2
23328: PUSH
23329: LD_INT 3
23331: ARRAY
23332: PPUSH
23333: LD_VAR 0 2
23337: PUSH
23338: LD_INT 4
23340: ARRAY
23341: PPUSH
23342: CALL_OW 449
23346: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23347: LD_ADDR_VAR 0 3
23351: PUSH
23352: LD_VAR 0 5
23356: PPUSH
23357: LD_INT 1
23359: PPUSH
23360: CALL_OW 275
23364: PUSH
23365: LD_VAR 0 4
23369: PUSH
23370: LD_INT 1
23372: ARRAY
23373: GREATEREQUAL
23374: IFFALSE 23400
23376: PUSH
23377: LD_VAR 0 5
23381: PPUSH
23382: LD_INT 2
23384: PPUSH
23385: CALL_OW 275
23389: PUSH
23390: LD_VAR 0 4
23394: PUSH
23395: LD_INT 2
23397: ARRAY
23398: GREATEREQUAL
23399: AND
23400: IFFALSE 23426
23402: PUSH
23403: LD_VAR 0 5
23407: PPUSH
23408: LD_INT 3
23410: PPUSH
23411: CALL_OW 275
23415: PUSH
23416: LD_VAR 0 4
23420: PUSH
23421: LD_INT 3
23423: ARRAY
23424: GREATEREQUAL
23425: AND
23426: ST_TO_ADDR
// end ;
23427: LD_VAR 0 3
23431: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23432: LD_INT 0
23434: PPUSH
23435: PPUSH
23436: PPUSH
23437: PPUSH
// pom := GetBase ( building ) ;
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: LD_VAR 0 1
23447: PPUSH
23448: CALL_OW 274
23452: ST_TO_ADDR
// if not pom then
23453: LD_VAR 0 3
23457: NOT
23458: IFFALSE 23462
// exit ;
23460: GO 23636
// btype := GetBType ( building ) ;
23462: LD_ADDR_VAR 0 5
23466: PUSH
23467: LD_VAR 0 1
23471: PPUSH
23472: CALL_OW 266
23476: ST_TO_ADDR
// if btype = b_armoury then
23477: LD_VAR 0 5
23481: PUSH
23482: LD_INT 4
23484: EQUAL
23485: IFFALSE 23495
// btype := b_barracks ;
23487: LD_ADDR_VAR 0 5
23491: PUSH
23492: LD_INT 5
23494: ST_TO_ADDR
// if btype = b_depot then
23495: LD_VAR 0 5
23499: PUSH
23500: LD_INT 0
23502: EQUAL
23503: IFFALSE 23513
// btype := b_warehouse ;
23505: LD_ADDR_VAR 0 5
23509: PUSH
23510: LD_INT 1
23512: ST_TO_ADDR
// if btype = b_workshop then
23513: LD_VAR 0 5
23517: PUSH
23518: LD_INT 2
23520: EQUAL
23521: IFFALSE 23531
// btype := b_factory ;
23523: LD_ADDR_VAR 0 5
23527: PUSH
23528: LD_INT 3
23530: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23531: LD_ADDR_VAR 0 4
23535: PUSH
23536: LD_VAR 0 5
23540: PPUSH
23541: LD_VAR 0 1
23545: PPUSH
23546: CALL_OW 248
23550: PPUSH
23551: CALL_OW 450
23555: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23556: LD_ADDR_VAR 0 2
23560: PUSH
23561: LD_VAR 0 3
23565: PPUSH
23566: LD_INT 1
23568: PPUSH
23569: CALL_OW 275
23573: PUSH
23574: LD_VAR 0 4
23578: PUSH
23579: LD_INT 1
23581: ARRAY
23582: GREATEREQUAL
23583: IFFALSE 23609
23585: PUSH
23586: LD_VAR 0 3
23590: PPUSH
23591: LD_INT 2
23593: PPUSH
23594: CALL_OW 275
23598: PUSH
23599: LD_VAR 0 4
23603: PUSH
23604: LD_INT 2
23606: ARRAY
23607: GREATEREQUAL
23608: AND
23609: IFFALSE 23635
23611: PUSH
23612: LD_VAR 0 3
23616: PPUSH
23617: LD_INT 3
23619: PPUSH
23620: CALL_OW 275
23624: PUSH
23625: LD_VAR 0 4
23629: PUSH
23630: LD_INT 3
23632: ARRAY
23633: GREATEREQUAL
23634: AND
23635: ST_TO_ADDR
// end ;
23636: LD_VAR 0 2
23640: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23641: LD_INT 0
23643: PPUSH
23644: PPUSH
23645: PPUSH
// pom := GetBase ( building ) ;
23646: LD_ADDR_VAR 0 4
23650: PUSH
23651: LD_VAR 0 1
23655: PPUSH
23656: CALL_OW 274
23660: ST_TO_ADDR
// if not pom then
23661: LD_VAR 0 4
23665: NOT
23666: IFFALSE 23670
// exit ;
23668: GO 23775
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23670: LD_ADDR_VAR 0 5
23674: PUSH
23675: LD_VAR 0 2
23679: PPUSH
23680: LD_VAR 0 1
23684: PPUSH
23685: CALL_OW 248
23689: PPUSH
23690: CALL_OW 450
23694: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23695: LD_ADDR_VAR 0 3
23699: PUSH
23700: LD_VAR 0 4
23704: PPUSH
23705: LD_INT 1
23707: PPUSH
23708: CALL_OW 275
23712: PUSH
23713: LD_VAR 0 5
23717: PUSH
23718: LD_INT 1
23720: ARRAY
23721: GREATEREQUAL
23722: IFFALSE 23748
23724: PUSH
23725: LD_VAR 0 4
23729: PPUSH
23730: LD_INT 2
23732: PPUSH
23733: CALL_OW 275
23737: PUSH
23738: LD_VAR 0 5
23742: PUSH
23743: LD_INT 2
23745: ARRAY
23746: GREATEREQUAL
23747: AND
23748: IFFALSE 23774
23750: PUSH
23751: LD_VAR 0 4
23755: PPUSH
23756: LD_INT 3
23758: PPUSH
23759: CALL_OW 275
23763: PUSH
23764: LD_VAR 0 5
23768: PUSH
23769: LD_INT 3
23771: ARRAY
23772: GREATEREQUAL
23773: AND
23774: ST_TO_ADDR
// end ;
23775: LD_VAR 0 3
23779: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23780: LD_INT 0
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
23787: PPUSH
23788: PPUSH
23789: PPUSH
23790: PPUSH
23791: PPUSH
23792: PPUSH
// result := false ;
23793: LD_ADDR_VAR 0 8
23797: PUSH
23798: LD_INT 0
23800: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23801: LD_VAR 0 5
23805: NOT
23806: IFTRUE 23815
23808: PUSH
23809: LD_VAR 0 1
23813: NOT
23814: OR
23815: IFTRUE 23824
23817: PUSH
23818: LD_VAR 0 2
23822: NOT
23823: OR
23824: IFTRUE 23833
23826: PUSH
23827: LD_VAR 0 3
23831: NOT
23832: OR
23833: IFFALSE 23837
// exit ;
23835: GO 24663
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23837: LD_ADDR_VAR 0 14
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: LD_VAR 0 2
23851: PPUSH
23852: LD_VAR 0 3
23856: PPUSH
23857: LD_VAR 0 4
23861: PPUSH
23862: LD_VAR 0 5
23866: PUSH
23867: LD_INT 1
23869: ARRAY
23870: PPUSH
23871: CALL_OW 248
23875: PPUSH
23876: LD_INT 0
23878: PPUSH
23879: CALL 25944 0 6
23883: ST_TO_ADDR
// if not hexes then
23884: LD_VAR 0 14
23888: NOT
23889: IFFALSE 23893
// exit ;
23891: GO 24663
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23893: LD_ADDR_VAR 0 17
23897: PUSH
23898: LD_VAR 0 5
23902: PPUSH
23903: LD_INT 22
23905: PUSH
23906: LD_VAR 0 13
23910: PPUSH
23911: CALL_OW 255
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 2
23922: PUSH
23923: LD_INT 30
23925: PUSH
23926: LD_INT 0
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 30
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: LIST
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PPUSH
23952: CALL_OW 72
23956: ST_TO_ADDR
// for i = 1 to hexes do
23957: LD_ADDR_VAR 0 9
23961: PUSH
23962: DOUBLE
23963: LD_INT 1
23965: DEC
23966: ST_TO_ADDR
23967: LD_VAR 0 14
23971: PUSH
23972: FOR_TO
23973: IFFALSE 24661
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23975: LD_ADDR_VAR 0 13
23979: PUSH
23980: LD_VAR 0 14
23984: PUSH
23985: LD_VAR 0 9
23989: ARRAY
23990: PUSH
23991: LD_INT 1
23993: ARRAY
23994: PPUSH
23995: LD_VAR 0 14
23999: PUSH
24000: LD_VAR 0 9
24004: ARRAY
24005: PUSH
24006: LD_INT 2
24008: ARRAY
24009: PPUSH
24010: CALL_OW 428
24014: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24015: LD_VAR 0 14
24019: PUSH
24020: LD_VAR 0 9
24024: ARRAY
24025: PUSH
24026: LD_INT 1
24028: ARRAY
24029: PPUSH
24030: LD_VAR 0 14
24034: PUSH
24035: LD_VAR 0 9
24039: ARRAY
24040: PUSH
24041: LD_INT 2
24043: ARRAY
24044: PPUSH
24045: CALL_OW 351
24049: IFTRUE 24088
24051: PUSH
24052: LD_VAR 0 14
24056: PUSH
24057: LD_VAR 0 9
24061: ARRAY
24062: PUSH
24063: LD_INT 1
24065: ARRAY
24066: PPUSH
24067: LD_VAR 0 14
24071: PUSH
24072: LD_VAR 0 9
24076: ARRAY
24077: PUSH
24078: LD_INT 2
24080: ARRAY
24081: PPUSH
24082: CALL_OW 488
24086: NOT
24087: OR
24088: IFTRUE 24105
24090: PUSH
24091: LD_VAR 0 13
24095: PPUSH
24096: CALL_OW 247
24100: PUSH
24101: LD_INT 3
24103: EQUAL
24104: OR
24105: IFFALSE 24111
// exit ;
24107: POP
24108: POP
24109: GO 24663
// if not tmp then
24111: LD_VAR 0 13
24115: NOT
24116: IFFALSE 24120
// continue ;
24118: GO 23972
// result := true ;
24120: LD_ADDR_VAR 0 8
24124: PUSH
24125: LD_INT 1
24127: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24128: LD_VAR 0 6
24132: IFFALSE 24149
24134: PUSH
24135: LD_VAR 0 13
24139: PPUSH
24140: CALL_OW 247
24144: PUSH
24145: LD_INT 2
24147: EQUAL
24148: AND
24149: IFFALSE 24166
24151: PUSH
24152: LD_VAR 0 13
24156: PPUSH
24157: CALL_OW 263
24161: PUSH
24162: LD_INT 1
24164: EQUAL
24165: AND
24166: IFFALSE 24330
// begin if IsDrivenBy ( tmp ) then
24168: LD_VAR 0 13
24172: PPUSH
24173: CALL_OW 311
24177: IFFALSE 24181
// continue ;
24179: GO 23972
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24181: LD_VAR 0 6
24185: PPUSH
24186: LD_INT 3
24188: PUSH
24189: LD_INT 60
24191: PUSH
24192: EMPTY
24193: LIST
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 3
24201: PUSH
24202: LD_INT 55
24204: PUSH
24205: EMPTY
24206: LIST
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PPUSH
24216: CALL_OW 72
24220: IFFALSE 24328
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24222: LD_ADDR_VAR 0 18
24226: PUSH
24227: LD_VAR 0 6
24231: PPUSH
24232: LD_INT 3
24234: PUSH
24235: LD_INT 60
24237: PUSH
24238: EMPTY
24239: LIST
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 3
24247: PUSH
24248: LD_INT 55
24250: PUSH
24251: EMPTY
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PPUSH
24262: CALL_OW 72
24266: PUSH
24267: LD_INT 1
24269: ARRAY
24270: ST_TO_ADDR
// if IsInUnit ( driver ) then
24271: LD_VAR 0 18
24275: PPUSH
24276: CALL_OW 310
24280: IFFALSE 24291
// ComExit ( driver ) ;
24282: LD_VAR 0 18
24286: PPUSH
24287: CALL 49944 0 1
// AddComEnterUnit ( driver , tmp ) ;
24291: LD_VAR 0 18
24295: PPUSH
24296: LD_VAR 0 13
24300: PPUSH
24301: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24305: LD_VAR 0 18
24309: PPUSH
24310: LD_VAR 0 7
24314: PPUSH
24315: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24319: LD_VAR 0 18
24323: PPUSH
24324: CALL_OW 181
// end ; continue ;
24328: GO 23972
// end ; if not cleaners or not tmp in cleaners then
24330: LD_VAR 0 6
24334: NOT
24335: IFTRUE 24350
24337: PUSH
24338: LD_VAR 0 13
24342: PUSH
24343: LD_VAR 0 6
24347: IN
24348: NOT
24349: OR
24350: IFFALSE 24659
// begin if dep then
24352: LD_VAR 0 17
24356: IFFALSE 24492
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24358: LD_ADDR_VAR 0 16
24362: PUSH
24363: LD_VAR 0 17
24367: PUSH
24368: LD_INT 1
24370: ARRAY
24371: PPUSH
24372: CALL_OW 250
24376: PPUSH
24377: LD_VAR 0 17
24381: PUSH
24382: LD_INT 1
24384: ARRAY
24385: PPUSH
24386: CALL_OW 254
24390: PPUSH
24391: LD_INT 5
24393: PPUSH
24394: CALL_OW 272
24398: PUSH
24399: LD_VAR 0 17
24403: PUSH
24404: LD_INT 1
24406: ARRAY
24407: PPUSH
24408: CALL_OW 251
24412: PPUSH
24413: LD_VAR 0 17
24417: PUSH
24418: LD_INT 1
24420: ARRAY
24421: PPUSH
24422: CALL_OW 254
24426: PPUSH
24427: LD_INT 5
24429: PPUSH
24430: CALL_OW 273
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24439: LD_VAR 0 16
24443: PUSH
24444: LD_INT 1
24446: ARRAY
24447: PPUSH
24448: LD_VAR 0 16
24452: PUSH
24453: LD_INT 2
24455: ARRAY
24456: PPUSH
24457: CALL_OW 488
24461: IFFALSE 24492
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24463: LD_VAR 0 13
24467: PPUSH
24468: LD_VAR 0 16
24472: PUSH
24473: LD_INT 1
24475: ARRAY
24476: PPUSH
24477: LD_VAR 0 16
24481: PUSH
24482: LD_INT 2
24484: ARRAY
24485: PPUSH
24486: CALL_OW 111
// continue ;
24490: GO 23972
// end ; end ; r := GetDir ( tmp ) ;
24492: LD_ADDR_VAR 0 15
24496: PUSH
24497: LD_VAR 0 13
24501: PPUSH
24502: CALL_OW 254
24506: ST_TO_ADDR
// if r = 5 then
24507: LD_VAR 0 15
24511: PUSH
24512: LD_INT 5
24514: EQUAL
24515: IFFALSE 24525
// r := 0 ;
24517: LD_ADDR_VAR 0 15
24521: PUSH
24522: LD_INT 0
24524: ST_TO_ADDR
// for j = r to 5 do
24525: LD_ADDR_VAR 0 10
24529: PUSH
24530: DOUBLE
24531: LD_VAR 0 15
24535: DEC
24536: ST_TO_ADDR
24537: LD_INT 5
24539: PUSH
24540: FOR_TO
24541: IFFALSE 24657
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24543: LD_ADDR_VAR 0 11
24547: PUSH
24548: LD_VAR 0 13
24552: PPUSH
24553: CALL_OW 250
24557: PPUSH
24558: LD_VAR 0 10
24562: PPUSH
24563: LD_INT 2
24565: PPUSH
24566: CALL_OW 272
24570: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24571: LD_ADDR_VAR 0 12
24575: PUSH
24576: LD_VAR 0 13
24580: PPUSH
24581: CALL_OW 251
24585: PPUSH
24586: LD_VAR 0 10
24590: PPUSH
24591: LD_INT 2
24593: PPUSH
24594: CALL_OW 273
24598: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24599: LD_VAR 0 11
24603: PPUSH
24604: LD_VAR 0 12
24608: PPUSH
24609: CALL_OW 488
24613: IFFALSE 24632
24615: PUSH
24616: LD_VAR 0 11
24620: PPUSH
24621: LD_VAR 0 12
24625: PPUSH
24626: CALL_OW 428
24630: NOT
24631: AND
24632: IFFALSE 24655
// begin ComMoveXY ( tmp , _x , _y ) ;
24634: LD_VAR 0 13
24638: PPUSH
24639: LD_VAR 0 11
24643: PPUSH
24644: LD_VAR 0 12
24648: PPUSH
24649: CALL_OW 111
// break ;
24653: GO 24657
// end ; end ;
24655: GO 24540
24657: POP
24658: POP
// end ; end ;
24659: GO 23972
24661: POP
24662: POP
// end ;
24663: LD_VAR 0 8
24667: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24668: LD_INT 0
24670: PPUSH
// result := true ;
24671: LD_ADDR_VAR 0 3
24675: PUSH
24676: LD_INT 1
24678: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24679: LD_VAR 0 2
24683: PUSH
24684: LD_INT 24
24686: DOUBLE
24687: EQUAL
24688: IFTRUE 24698
24690: LD_INT 33
24692: DOUBLE
24693: EQUAL
24694: IFTRUE 24698
24696: GO 24723
24698: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24699: LD_ADDR_VAR 0 3
24703: PUSH
24704: LD_INT 32
24706: PPUSH
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 321
24716: PUSH
24717: LD_INT 2
24719: EQUAL
24720: ST_TO_ADDR
24721: GO 25039
24723: LD_INT 20
24725: DOUBLE
24726: EQUAL
24727: IFTRUE 24731
24729: GO 24756
24731: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24732: LD_ADDR_VAR 0 3
24736: PUSH
24737: LD_INT 6
24739: PPUSH
24740: LD_VAR 0 1
24744: PPUSH
24745: CALL_OW 321
24749: PUSH
24750: LD_INT 2
24752: EQUAL
24753: ST_TO_ADDR
24754: GO 25039
24756: LD_INT 22
24758: DOUBLE
24759: EQUAL
24760: IFTRUE 24770
24762: LD_INT 36
24764: DOUBLE
24765: EQUAL
24766: IFTRUE 24770
24768: GO 24795
24770: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24771: LD_ADDR_VAR 0 3
24775: PUSH
24776: LD_INT 15
24778: PPUSH
24779: LD_VAR 0 1
24783: PPUSH
24784: CALL_OW 321
24788: PUSH
24789: LD_INT 2
24791: EQUAL
24792: ST_TO_ADDR
24793: GO 25039
24795: LD_INT 30
24797: DOUBLE
24798: EQUAL
24799: IFTRUE 24803
24801: GO 24828
24803: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24804: LD_ADDR_VAR 0 3
24808: PUSH
24809: LD_INT 20
24811: PPUSH
24812: LD_VAR 0 1
24816: PPUSH
24817: CALL_OW 321
24821: PUSH
24822: LD_INT 2
24824: EQUAL
24825: ST_TO_ADDR
24826: GO 25039
24828: LD_INT 28
24830: DOUBLE
24831: EQUAL
24832: IFTRUE 24842
24834: LD_INT 21
24836: DOUBLE
24837: EQUAL
24838: IFTRUE 24842
24840: GO 24867
24842: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24843: LD_ADDR_VAR 0 3
24847: PUSH
24848: LD_INT 21
24850: PPUSH
24851: LD_VAR 0 1
24855: PPUSH
24856: CALL_OW 321
24860: PUSH
24861: LD_INT 2
24863: EQUAL
24864: ST_TO_ADDR
24865: GO 25039
24867: LD_INT 16
24869: DOUBLE
24870: EQUAL
24871: IFTRUE 24875
24873: GO 24900
24875: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24876: LD_ADDR_VAR 0 3
24880: PUSH
24881: LD_INT 84
24883: PPUSH
24884: LD_VAR 0 1
24888: PPUSH
24889: CALL_OW 321
24893: PUSH
24894: LD_INT 2
24896: EQUAL
24897: ST_TO_ADDR
24898: GO 25039
24900: LD_INT 19
24902: DOUBLE
24903: EQUAL
24904: IFTRUE 24914
24906: LD_INT 23
24908: DOUBLE
24909: EQUAL
24910: IFTRUE 24914
24912: GO 24939
24914: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24915: LD_ADDR_VAR 0 3
24919: PUSH
24920: LD_INT 83
24922: PPUSH
24923: LD_VAR 0 1
24927: PPUSH
24928: CALL_OW 321
24932: PUSH
24933: LD_INT 2
24935: EQUAL
24936: ST_TO_ADDR
24937: GO 25039
24939: LD_INT 17
24941: DOUBLE
24942: EQUAL
24943: IFTRUE 24947
24945: GO 24972
24947: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24948: LD_ADDR_VAR 0 3
24952: PUSH
24953: LD_INT 39
24955: PPUSH
24956: LD_VAR 0 1
24960: PPUSH
24961: CALL_OW 321
24965: PUSH
24966: LD_INT 2
24968: EQUAL
24969: ST_TO_ADDR
24970: GO 25039
24972: LD_INT 18
24974: DOUBLE
24975: EQUAL
24976: IFTRUE 24980
24978: GO 25005
24980: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24981: LD_ADDR_VAR 0 3
24985: PUSH
24986: LD_INT 40
24988: PPUSH
24989: LD_VAR 0 1
24993: PPUSH
24994: CALL_OW 321
24998: PUSH
24999: LD_INT 2
25001: EQUAL
25002: ST_TO_ADDR
25003: GO 25039
25005: LD_INT 27
25007: DOUBLE
25008: EQUAL
25009: IFTRUE 25013
25011: GO 25038
25013: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25014: LD_ADDR_VAR 0 3
25018: PUSH
25019: LD_INT 35
25021: PPUSH
25022: LD_VAR 0 1
25026: PPUSH
25027: CALL_OW 321
25031: PUSH
25032: LD_INT 2
25034: EQUAL
25035: ST_TO_ADDR
25036: GO 25039
25038: POP
// end ;
25039: LD_VAR 0 3
25043: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25044: LD_INT 0
25046: PPUSH
25047: PPUSH
25048: PPUSH
25049: PPUSH
25050: PPUSH
25051: PPUSH
25052: PPUSH
25053: PPUSH
25054: PPUSH
25055: PPUSH
25056: PPUSH
// result := false ;
25057: LD_ADDR_VAR 0 6
25061: PUSH
25062: LD_INT 0
25064: ST_TO_ADDR
// if btype = b_depot then
25065: LD_VAR 0 2
25069: PUSH
25070: LD_INT 0
25072: EQUAL
25073: IFFALSE 25085
// begin result := true ;
25075: LD_ADDR_VAR 0 6
25079: PUSH
25080: LD_INT 1
25082: ST_TO_ADDR
// exit ;
25083: GO 25939
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25085: LD_VAR 0 1
25089: NOT
25090: IFTRUE 25115
25092: PUSH
25093: LD_VAR 0 1
25097: PPUSH
25098: CALL_OW 266
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: LD_INT 1
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: IN
25113: NOT
25114: OR
25115: IFTRUE 25124
25117: PUSH
25118: LD_VAR 0 2
25122: NOT
25123: OR
25124: IFTRUE 25160
25126: PUSH
25127: LD_VAR 0 5
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: LD_INT 2
25140: PUSH
25141: LD_INT 3
25143: PUSH
25144: LD_INT 4
25146: PUSH
25147: LD_INT 5
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: IN
25158: NOT
25159: OR
25160: IFTRUE 25179
25162: PUSH
25163: LD_VAR 0 3
25167: PPUSH
25168: LD_VAR 0 4
25172: PPUSH
25173: CALL_OW 488
25177: NOT
25178: OR
25179: IFFALSE 25183
// exit ;
25181: GO 25939
// side := GetSide ( depot ) ;
25183: LD_ADDR_VAR 0 9
25187: PUSH
25188: LD_VAR 0 1
25192: PPUSH
25193: CALL_OW 255
25197: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25198: LD_VAR 0 9
25202: PPUSH
25203: LD_VAR 0 2
25207: PPUSH
25208: CALL 24668 0 2
25212: NOT
25213: IFFALSE 25217
// exit ;
25215: GO 25939
// pom := GetBase ( depot ) ;
25217: LD_ADDR_VAR 0 10
25221: PUSH
25222: LD_VAR 0 1
25226: PPUSH
25227: CALL_OW 274
25231: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25232: LD_ADDR_VAR 0 11
25236: PUSH
25237: LD_VAR 0 2
25241: PPUSH
25242: LD_VAR 0 1
25246: PPUSH
25247: CALL_OW 248
25251: PPUSH
25252: CALL_OW 450
25256: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25257: LD_VAR 0 10
25261: PPUSH
25262: LD_INT 1
25264: PPUSH
25265: CALL_OW 275
25269: PUSH
25270: LD_VAR 0 11
25274: PUSH
25275: LD_INT 1
25277: ARRAY
25278: GREATEREQUAL
25279: IFFALSE 25305
25281: PUSH
25282: LD_VAR 0 10
25286: PPUSH
25287: LD_INT 2
25289: PPUSH
25290: CALL_OW 275
25294: PUSH
25295: LD_VAR 0 11
25299: PUSH
25300: LD_INT 2
25302: ARRAY
25303: GREATEREQUAL
25304: AND
25305: IFFALSE 25331
25307: PUSH
25308: LD_VAR 0 10
25312: PPUSH
25313: LD_INT 3
25315: PPUSH
25316: CALL_OW 275
25320: PUSH
25321: LD_VAR 0 11
25325: PUSH
25326: LD_INT 3
25328: ARRAY
25329: GREATEREQUAL
25330: AND
25331: NOT
25332: IFFALSE 25336
// exit ;
25334: GO 25939
// if GetBType ( depot ) = b_depot then
25336: LD_VAR 0 1
25340: PPUSH
25341: CALL_OW 266
25345: PUSH
25346: LD_INT 0
25348: EQUAL
25349: IFFALSE 25361
// dist := 28 else
25351: LD_ADDR_VAR 0 14
25355: PUSH
25356: LD_INT 28
25358: ST_TO_ADDR
25359: GO 25369
// dist := 36 ;
25361: LD_ADDR_VAR 0 14
25365: PUSH
25366: LD_INT 36
25368: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25369: LD_VAR 0 1
25373: PPUSH
25374: LD_VAR 0 3
25378: PPUSH
25379: LD_VAR 0 4
25383: PPUSH
25384: CALL_OW 297
25388: PUSH
25389: LD_VAR 0 14
25393: GREATER
25394: IFFALSE 25398
// exit ;
25396: GO 25939
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25398: LD_ADDR_VAR 0 12
25402: PUSH
25403: LD_VAR 0 2
25407: PPUSH
25408: LD_VAR 0 3
25412: PPUSH
25413: LD_VAR 0 4
25417: PPUSH
25418: LD_VAR 0 5
25422: PPUSH
25423: LD_VAR 0 1
25427: PPUSH
25428: CALL_OW 248
25432: PPUSH
25433: LD_INT 0
25435: PPUSH
25436: CALL 25944 0 6
25440: ST_TO_ADDR
// if not hexes then
25441: LD_VAR 0 12
25445: NOT
25446: IFFALSE 25450
// exit ;
25448: GO 25939
// hex := GetHexInfo ( x , y ) ;
25450: LD_ADDR_VAR 0 15
25454: PUSH
25455: LD_VAR 0 3
25459: PPUSH
25460: LD_VAR 0 4
25464: PPUSH
25465: CALL_OW 546
25469: ST_TO_ADDR
// if hex [ 1 ] then
25470: LD_VAR 0 15
25474: PUSH
25475: LD_INT 1
25477: ARRAY
25478: IFFALSE 25482
// exit ;
25480: GO 25939
// height := hex [ 2 ] ;
25482: LD_ADDR_VAR 0 13
25486: PUSH
25487: LD_VAR 0 15
25491: PUSH
25492: LD_INT 2
25494: ARRAY
25495: ST_TO_ADDR
// for i = 1 to hexes do
25496: LD_ADDR_VAR 0 7
25500: PUSH
25501: DOUBLE
25502: LD_INT 1
25504: DEC
25505: ST_TO_ADDR
25506: LD_VAR 0 12
25510: PUSH
25511: FOR_TO
25512: IFFALSE 25856
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25514: LD_VAR 0 12
25518: PUSH
25519: LD_VAR 0 7
25523: ARRAY
25524: PUSH
25525: LD_INT 1
25527: ARRAY
25528: PPUSH
25529: LD_VAR 0 12
25533: PUSH
25534: LD_VAR 0 7
25538: ARRAY
25539: PUSH
25540: LD_INT 2
25542: ARRAY
25543: PPUSH
25544: CALL_OW 488
25548: NOT
25549: IFTRUE 25591
25551: PUSH
25552: LD_VAR 0 12
25556: PUSH
25557: LD_VAR 0 7
25561: ARRAY
25562: PUSH
25563: LD_INT 1
25565: ARRAY
25566: PPUSH
25567: LD_VAR 0 12
25571: PUSH
25572: LD_VAR 0 7
25576: ARRAY
25577: PUSH
25578: LD_INT 2
25580: ARRAY
25581: PPUSH
25582: CALL_OW 428
25586: PUSH
25587: LD_INT 0
25589: GREATER
25590: OR
25591: IFTRUE 25629
25593: PUSH
25594: LD_VAR 0 12
25598: PUSH
25599: LD_VAR 0 7
25603: ARRAY
25604: PUSH
25605: LD_INT 1
25607: ARRAY
25608: PPUSH
25609: LD_VAR 0 12
25613: PUSH
25614: LD_VAR 0 7
25618: ARRAY
25619: PUSH
25620: LD_INT 2
25622: ARRAY
25623: PPUSH
25624: CALL_OW 351
25628: OR
25629: IFFALSE 25635
// exit ;
25631: POP
25632: POP
25633: GO 25939
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25635: LD_ADDR_VAR 0 8
25639: PUSH
25640: LD_VAR 0 12
25644: PUSH
25645: LD_VAR 0 7
25649: ARRAY
25650: PUSH
25651: LD_INT 1
25653: ARRAY
25654: PPUSH
25655: LD_VAR 0 12
25659: PUSH
25660: LD_VAR 0 7
25664: ARRAY
25665: PUSH
25666: LD_INT 2
25668: ARRAY
25669: PPUSH
25670: CALL_OW 546
25674: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25675: LD_VAR 0 8
25679: PUSH
25680: LD_INT 1
25682: ARRAY
25683: IFTRUE 25705
25685: PUSH
25686: LD_VAR 0 8
25690: PUSH
25691: LD_INT 2
25693: ARRAY
25694: PUSH
25695: LD_VAR 0 13
25699: PUSH
25700: LD_INT 2
25702: PLUS
25703: GREATER
25704: OR
25705: IFTRUE 25727
25707: PUSH
25708: LD_VAR 0 8
25712: PUSH
25713: LD_INT 2
25715: ARRAY
25716: PUSH
25717: LD_VAR 0 13
25721: PUSH
25722: LD_INT 2
25724: MINUS
25725: LESS
25726: OR
25727: IFTRUE 25795
25729: PUSH
25730: LD_VAR 0 8
25734: PUSH
25735: LD_INT 3
25737: ARRAY
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 8
25744: PUSH
25745: LD_INT 9
25747: PUSH
25748: LD_INT 10
25750: PUSH
25751: LD_INT 11
25753: PUSH
25754: LD_INT 12
25756: PUSH
25757: LD_INT 13
25759: PUSH
25760: LD_INT 16
25762: PUSH
25763: LD_INT 17
25765: PUSH
25766: LD_INT 18
25768: PUSH
25769: LD_INT 19
25771: PUSH
25772: LD_INT 20
25774: PUSH
25775: LD_INT 21
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: IN
25793: NOT
25794: OR
25795: IFTRUE 25808
25797: PUSH
25798: LD_VAR 0 8
25802: PUSH
25803: LD_INT 5
25805: ARRAY
25806: NOT
25807: OR
25808: IFTRUE 25848
25810: PUSH
25811: LD_VAR 0 8
25815: PUSH
25816: LD_INT 6
25818: ARRAY
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: LD_INT 2
25825: PUSH
25826: LD_INT 7
25828: PUSH
25829: LD_INT 9
25831: PUSH
25832: LD_INT 10
25834: PUSH
25835: LD_INT 11
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: IN
25846: NOT
25847: OR
25848: IFFALSE 25854
// exit ;
25850: POP
25851: POP
25852: GO 25939
// end ;
25854: GO 25511
25856: POP
25857: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25858: LD_VAR 0 9
25862: PPUSH
25863: LD_VAR 0 3
25867: PPUSH
25868: LD_VAR 0 4
25872: PPUSH
25873: LD_INT 20
25875: PPUSH
25876: CALL 17758 0 4
25880: PUSH
25881: LD_INT 4
25883: ARRAY
25884: IFFALSE 25888
// exit ;
25886: GO 25939
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25888: LD_VAR 0 2
25892: PUSH
25893: LD_INT 29
25895: PUSH
25896: LD_INT 30
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: IN
25903: IFFALSE 25927
25905: PUSH
25906: LD_VAR 0 3
25910: PPUSH
25911: LD_VAR 0 4
25915: PPUSH
25916: LD_VAR 0 9
25920: PPUSH
25921: CALL_OW 440
25925: NOT
25926: AND
25927: IFFALSE 25931
// exit ;
25929: GO 25939
// result := true ;
25931: LD_ADDR_VAR 0 6
25935: PUSH
25936: LD_INT 1
25938: ST_TO_ADDR
// end ;
25939: LD_VAR 0 6
25943: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25944: LD_INT 0
25946: PPUSH
25947: PPUSH
25948: PPUSH
25949: PPUSH
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
25996: PPUSH
25997: PPUSH
25998: PPUSH
25999: PPUSH
26000: PPUSH
26001: PPUSH
26002: PPUSH
26003: PPUSH
// result = [ ] ;
26004: LD_ADDR_VAR 0 7
26008: PUSH
26009: EMPTY
26010: ST_TO_ADDR
// temp_list = [ ] ;
26011: LD_ADDR_VAR 0 9
26015: PUSH
26016: EMPTY
26017: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26018: LD_VAR 0 4
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: LD_INT 4
26037: PUSH
26038: LD_INT 5
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: IN
26049: NOT
26050: IFTRUE 26093
26052: PUSH
26053: LD_VAR 0 1
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: IN
26068: IFFALSE 26092
26070: PUSH
26071: LD_VAR 0 5
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: LD_INT 2
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: IN
26090: NOT
26091: AND
26092: OR
26093: IFFALSE 26097
// exit ;
26095: GO 44496
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26097: LD_VAR 0 1
26101: PUSH
26102: LD_INT 6
26104: PUSH
26105: LD_INT 7
26107: PUSH
26108: LD_INT 8
26110: PUSH
26111: LD_INT 13
26113: PUSH
26114: LD_INT 12
26116: PUSH
26117: LD_INT 15
26119: PUSH
26120: LD_INT 11
26122: PUSH
26123: LD_INT 14
26125: PUSH
26126: LD_INT 10
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: IN
26140: IFFALSE 26150
// btype = b_lab ;
26142: LD_ADDR_VAR 0 1
26146: PUSH
26147: LD_INT 6
26149: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26150: LD_VAR 0 6
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 1
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: LIST
26168: IN
26169: NOT
26170: IFTRUE 26238
26172: PUSH
26173: LD_VAR 0 1
26177: PUSH
26178: LD_INT 0
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: LD_INT 2
26186: PUSH
26187: LD_INT 3
26189: PUSH
26190: LD_INT 6
26192: PUSH
26193: LD_INT 36
26195: PUSH
26196: LD_INT 4
26198: PUSH
26199: LD_INT 5
26201: PUSH
26202: LD_INT 31
26204: PUSH
26205: LD_INT 32
26207: PUSH
26208: LD_INT 33
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: IN
26224: NOT
26225: IFFALSE 26237
26227: PUSH
26228: LD_VAR 0 6
26232: PUSH
26233: LD_INT 1
26235: EQUAL
26236: AND
26237: OR
26238: IFTRUE 26270
26240: PUSH
26241: LD_VAR 0 1
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 3
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: IN
26256: NOT
26257: IFFALSE 26269
26259: PUSH
26260: LD_VAR 0 6
26264: PUSH
26265: LD_INT 2
26267: EQUAL
26268: AND
26269: OR
26270: IFFALSE 26280
// mode = 0 ;
26272: LD_ADDR_VAR 0 6
26276: PUSH
26277: LD_INT 0
26279: ST_TO_ADDR
// case mode of 0 :
26280: LD_VAR 0 6
26284: PUSH
26285: LD_INT 0
26287: DOUBLE
26288: EQUAL
26289: IFTRUE 26293
26291: GO 37746
26293: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26294: LD_ADDR_VAR 0 11
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: LD_INT 0
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: LD_INT 2
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: LD_INT 2
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 2
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 3
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 3
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26487: LD_ADDR_VAR 0 12
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: LD_INT 1
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: LD_INT 0
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: NEG
26557: PUSH
26558: LD_INT 1
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 2
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 2
26610: NEG
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 2
26621: NEG
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 3
26644: NEG
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 3
26655: NEG
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26683: LD_ADDR_VAR 0 13
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: NEG
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: LD_INT 2
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: LD_INT 2
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: LD_INT 2
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: NEG
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 2
26818: NEG
26819: PUSH
26820: LD_INT 2
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 2
26830: NEG
26831: PUSH
26832: LD_INT 3
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 3
26842: NEG
26843: PUSH
26844: LD_INT 2
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 3
26854: NEG
26855: PUSH
26856: LD_INT 3
26858: NEG
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26882: LD_ADDR_VAR 0 14
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: LD_INT 3
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 3
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27078: LD_ADDR_VAR 0 15
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: LD_INT 0
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 2
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 1
27190: NEG
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 2
27201: NEG
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 2
27212: NEG
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 2
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 3
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27271: LD_ADDR_VAR 0 16
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: LD_INT 1
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: LD_INT 2
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 2
27394: NEG
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 2
27406: NEG
27407: PUSH
27408: LD_INT 2
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 3
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 3
27428: PUSH
27429: LD_INT 3
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: LD_INT 3
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27464: LD_ADDR_VAR 0 17
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: LD_INT 1
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 1
27545: NEG
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 2
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 2
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 2
27651: NEG
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27694: LD_ADDR_VAR 0 18
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: LD_INT 0
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 1
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: LD_INT 1
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 2
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: LD_INT 2
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 2
27870: NEG
27871: PUSH
27872: LD_INT 0
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 2
27881: NEG
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: NEG
27894: PUSH
27895: LD_INT 2
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27924: LD_ADDR_VAR 0 19
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: LD_INT 0
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 1
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 0
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 2
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 2
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 1
28089: NEG
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 2
28111: NEG
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28154: LD_ADDR_VAR 0 20
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: LD_INT 0
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: LD_INT 1
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 2
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 2
28330: NEG
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 2
28341: NEG
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28384: LD_ADDR_VAR 0 21
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 0
28401: PUSH
28402: LD_INT 1
28404: NEG
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 2
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 2
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 2
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 2
28571: NEG
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: NEG
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28614: LD_ADDR_VAR 0 22
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 2
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: LD_INT 2
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 2
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28844: LD_ADDR_VAR 0 23
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 0
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 2
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 2
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 2
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: NEG
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: LD_INT 1
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: LD_INT 2
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: NEG
29056: PUSH
29057: LD_INT 3
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 3
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 2
29090: PUSH
29091: LD_INT 1
29093: NEG
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29124: LD_ADDR_VAR 0 24
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: LD_INT 2
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: NEG
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 2
29311: NEG
29312: PUSH
29313: LD_INT 1
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 2
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29400: LD_ADDR_VAR 0 25
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: NEG
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 2
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 0
29493: PUSH
29494: LD_INT 2
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: LD_INT 1
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: LD_INT 1
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: LD_INT 2
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: LD_INT 2
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 2
29587: NEG
29588: PUSH
29589: LD_INT 1
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: LD_INT 2
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 3
29621: PUSH
29622: LD_INT 2
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: LD_INT 3
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: LD_INT 3
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29674: LD_ADDR_VAR 0 26
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: LD_INT 1
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 1
29743: NEG
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 2
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: LD_INT 1
29781: NEG
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 2
29861: NEG
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: LD_INT 2
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 2
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: LD_INT 3
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 1
29905: NEG
29906: PUSH
29907: LD_INT 2
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 2
29916: NEG
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29950: LD_ADDR_VAR 0 27
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 2
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 0
30043: PUSH
30044: LD_INT 2
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 2
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: NEG
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 2
30137: NEG
30138: PUSH
30139: LD_INT 1
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 2
30149: NEG
30150: PUSH
30151: LD_INT 2
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: LD_INT 2
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 3
30183: NEG
30184: PUSH
30185: LD_INT 1
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 3
30195: NEG
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30230: LD_ADDR_VAR 0 28
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: LD_INT 1
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: LD_INT 2
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: LD_INT 2
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 1
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 2
30406: NEG
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 2
30417: NEG
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: LD_INT 3
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: LD_INT 3
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: LD_INT 1
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 3
30477: NEG
30478: PUSH
30479: LD_INT 2
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30512: LD_ADDR_VAR 0 29
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 1
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: LD_INT 1
30585: NEG
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: NEG
30679: PUSH
30680: LD_INT 1
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 2
30690: NEG
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 2
30702: NEG
30703: PUSH
30704: LD_INT 3
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 3
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: LD_INT 3
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: NEG
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 3
30756: NEG
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30791: LD_ADDR_VAR 0 30
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 1
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 2
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: NEG
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 2
30968: NEG
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: LD_INT 3
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: LD_INT 2
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: LD_INT 3
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 2
31023: NEG
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 3
31034: NEG
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31069: LD_ADDR_VAR 0 31
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 2
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 2
31234: NEG
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 2
31246: NEG
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: LD_INT 3
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: NEG
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 3
31312: NEG
31313: PUSH
31314: LD_INT 2
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31347: LD_ADDR_VAR 0 32
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: LD_INT 2
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 2
31513: NEG
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 2
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: LD_INT 2
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: LD_INT 3
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 2
31579: NEG
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 3
31590: NEG
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31625: LD_ADDR_VAR 0 33
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 2
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: LD_INT 2
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: LD_INT 2
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 1
31769: NEG
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 2
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 3
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: LD_INT 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 3
31869: NEG
31870: PUSH
31871: LD_INT 2
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31904: LD_ADDR_VAR 0 34
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: LD_INT 1
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: NEG
31974: PUSH
31975: LD_INT 1
31977: NEG
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: LD_INT 2
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 2
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 2
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: NEG
32084: PUSH
32085: LD_INT 2
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: LD_INT 2
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: NEG
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 3
32149: NEG
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32184: LD_ADDR_VAR 0 35
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: LD_INT 1
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: NEG
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32296: LD_ADDR_VAR 0 36
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 1
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 1
32377: NEG
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32408: LD_ADDR_VAR 0 37
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: LD_INT 0
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32520: LD_ADDR_VAR 0 38
32524: PUSH
32525: LD_INT 0
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 1
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 2
32601: PUSH
32602: LD_INT 1
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 2
32611: NEG
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32632: LD_ADDR_VAR 0 39
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: LD_INT 1
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 2
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32744: LD_ADDR_VAR 0 40
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 1
32813: NEG
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32856: LD_ADDR_VAR 0 41
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: LD_INT 1
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 2
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: NEG
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: NEG
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: NEG
33047: PUSH
33048: LD_INT 3
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 3
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 3
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 3
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 3
33099: PUSH
33100: LD_INT 3
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: LD_INT 3
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 2
33119: NEG
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 3
33130: NEG
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 3
33141: NEG
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 3
33165: NEG
33166: PUSH
33167: LD_INT 3
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33206: LD_ADDR_VAR 0 42
33210: PUSH
33211: LD_INT 0
33213: PUSH
33214: LD_INT 0
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 2
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 2
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: LD_INT 3
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 3
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 2
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 3
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 3
33503: NEG
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 3
33515: NEG
33516: PUSH
33517: LD_INT 3
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33556: LD_ADDR_VAR 0 43
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 1
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: LD_INT 2
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 2
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: NEG
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: LD_INT 3
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 3
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: LD_INT 3
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 1
33830: NEG
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: NEG
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 3
33863: NEG
33864: PUSH
33865: LD_INT 1
33867: NEG
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33904: LD_ADDR_VAR 0 44
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 0
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: LD_INT 2
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: LD_INT 3
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 3
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 3
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 3
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 3
34147: PUSH
34148: LD_INT 3
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 3
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: NEG
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 3
34178: NEG
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 3
34189: NEG
34190: PUSH
34191: LD_INT 1
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 3
34201: NEG
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: LD_INT 3
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34254: LD_ADDR_VAR 0 45
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 3
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 3
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: LD_INT 3
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 3
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 3
34551: NEG
34552: PUSH
34553: LD_INT 2
34555: NEG
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 3
34563: NEG
34564: PUSH
34565: LD_INT 3
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34604: LD_ADDR_VAR 0 46
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: NEG
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: LD_INT 3
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: LD_INT 3
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: LD_INT 2
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 3
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: LD_INT 2
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 2
34889: NEG
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 3
34900: NEG
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 3
34911: NEG
34912: PUSH
34913: LD_INT 1
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34952: LD_ADDR_VAR 0 47
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: LD_INT 1
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 2
35079: NEG
35080: PUSH
35081: LD_INT 2
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35103: LD_ADDR_VAR 0 48
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 1
35123: NEG
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: LD_INT 1
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 2
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 2
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35250: LD_ADDR_VAR 0 49
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: LD_INT 1
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 2
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 2
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: LD_INT 2
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35394: LD_ADDR_VAR 0 50
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35538: LD_ADDR_VAR 0 51
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 2
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 2
35661: NEG
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35685: LD_ADDR_VAR 0 52
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35836: LD_ADDR_VAR 0 53
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: LD_INT 2
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: NEG
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 2
36023: NEG
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: NEG
36036: PUSH
36037: LD_INT 2
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36066: LD_ADDR_VAR 0 54
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: LD_INT 1
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 2
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 2
36242: NEG
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 2
36253: NEG
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 2
36265: NEG
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36296: LD_ADDR_VAR 0 55
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: NEG
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36526: LD_ADDR_VAR 0 56
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 2
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: NEG
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36756: LD_ADDR_VAR 0 57
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 2
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: NEG
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36986: LD_ADDR_VAR 0 58
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 2
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: NEG
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37216: LD_ADDR_VAR 0 59
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 1
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 0
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37304: LD_ADDR_VAR 0 60
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 0
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37392: LD_ADDR_VAR 0 61
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: NEG
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37480: LD_ADDR_VAR 0 62
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 1
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37568: LD_ADDR_VAR 0 63
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37656: LD_ADDR_VAR 0 64
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// end ; 1 :
37744: GO 43641
37746: LD_INT 1
37748: DOUBLE
37749: EQUAL
37750: IFTRUE 37754
37752: GO 40377
37754: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37755: LD_ADDR_VAR 0 11
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: LD_INT 3
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: LD_INT 3
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: LIST
37798: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37799: LD_ADDR_VAR 0 12
37803: PUSH
37804: LD_INT 2
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 3
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37840: LD_ADDR_VAR 0 13
37844: PUSH
37845: LD_INT 3
37847: PUSH
37848: LD_INT 2
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 3
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37880: LD_ADDR_VAR 0 14
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: LD_INT 3
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: LD_INT 2
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37921: LD_ADDR_VAR 0 15
37925: PUSH
37926: LD_INT 2
37928: NEG
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: NEG
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 3
37950: NEG
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37965: LD_ADDR_VAR 0 16
37969: PUSH
37970: LD_INT 2
37972: NEG
37973: PUSH
37974: LD_INT 3
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 3
37984: NEG
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 3
37996: NEG
37997: PUSH
37998: LD_INT 3
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38011: LD_ADDR_VAR 0 17
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 3
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 3
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 2
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38055: LD_ADDR_VAR 0 18
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 3
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 3
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38096: LD_ADDR_VAR 0 19
38100: PUSH
38101: LD_INT 3
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: LD_INT 3
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 3
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: LIST
38135: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38136: LD_ADDR_VAR 0 20
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: LD_INT 3
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 2
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38177: LD_ADDR_VAR 0 21
38181: PUSH
38182: LD_INT 2
38184: NEG
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 3
38206: NEG
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: LIST
38220: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38221: LD_ADDR_VAR 0 22
38225: PUSH
38226: LD_INT 2
38228: NEG
38229: PUSH
38230: LD_INT 3
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 3
38240: NEG
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 3
38252: NEG
38253: PUSH
38254: LD_INT 3
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38267: LD_ADDR_VAR 0 23
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: LD_INT 3
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 4
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38311: LD_ADDR_VAR 0 24
38315: PUSH
38316: LD_INT 3
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 3
38328: PUSH
38329: LD_INT 1
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 4
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38352: LD_ADDR_VAR 0 25
38356: PUSH
38357: LD_INT 3
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 4
38369: PUSH
38370: LD_INT 3
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 3
38379: PUSH
38380: LD_INT 4
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38392: LD_ADDR_VAR 0 26
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: LD_INT 3
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 4
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: LD_INT 3
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38433: LD_ADDR_VAR 0 27
38437: PUSH
38438: LD_INT 3
38440: NEG
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 3
38451: NEG
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 4
38462: NEG
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: LIST
38476: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38477: LD_ADDR_VAR 0 28
38481: PUSH
38482: LD_INT 3
38484: NEG
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 3
38496: NEG
38497: PUSH
38498: LD_INT 4
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 4
38508: NEG
38509: PUSH
38510: LD_INT 3
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38523: LD_ADDR_VAR 0 29
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: LD_INT 3
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: LD_INT 3
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: LD_INT 2
38556: NEG
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: LD_INT 4
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 4
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: LD_INT 3
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: LD_INT 5
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: LD_INT 5
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: PUSH
38622: LD_INT 4
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: LD_INT 6
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 6
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 5
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38678: LD_ADDR_VAR 0 30
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 3
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 3
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 4
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 4
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 4
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 5
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 5
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 5
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 6
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 6
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38821: LD_ADDR_VAR 0 31
38825: PUSH
38826: LD_INT 3
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 3
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: LD_INT 3
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 4
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 4
38868: PUSH
38869: LD_INT 4
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 3
38878: PUSH
38879: LD_INT 4
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 5
38888: PUSH
38889: LD_INT 4
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 5
38898: PUSH
38899: LD_INT 5
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 4
38908: PUSH
38909: LD_INT 5
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 6
38918: PUSH
38919: LD_INT 5
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 6
38928: PUSH
38929: LD_INT 6
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 5
38938: PUSH
38939: LD_INT 6
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38960: LD_ADDR_VAR 0 32
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: LD_INT 3
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: LD_INT 4
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 4
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: NEG
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: LD_INT 5
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 4
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 6
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 6
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 5
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39103: LD_ADDR_VAR 0 33
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 3
39121: NEG
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 3
39132: NEG
39133: PUSH
39134: LD_INT 1
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 3
39144: NEG
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 4
39155: NEG
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 4
39166: NEG
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 4
39178: NEG
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 5
39189: NEG
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 5
39200: NEG
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 5
39212: NEG
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 6
39223: NEG
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 6
39234: NEG
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39258: LD_ADDR_VAR 0 34
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: LD_INT 3
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 3
39277: NEG
39278: PUSH
39279: LD_INT 2
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 3
39289: NEG
39290: PUSH
39291: LD_INT 3
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 3
39301: NEG
39302: PUSH
39303: LD_INT 4
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 4
39313: NEG
39314: PUSH
39315: LD_INT 3
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 4
39325: NEG
39326: PUSH
39327: LD_INT 4
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 4
39337: NEG
39338: PUSH
39339: LD_INT 5
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 5
39349: NEG
39350: PUSH
39351: LD_INT 4
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 5
39361: NEG
39362: PUSH
39363: LD_INT 5
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 5
39373: NEG
39374: PUSH
39375: LD_INT 6
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 6
39385: NEG
39386: PUSH
39387: LD_INT 5
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 6
39397: NEG
39398: PUSH
39399: LD_INT 6
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39421: LD_ADDR_VAR 0 41
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39465: LD_ADDR_VAR 0 42
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: LIST
39505: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39506: LD_ADDR_VAR 0 43
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 3
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: LD_INT 3
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39546: LD_ADDR_VAR 0 44
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 3
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: LIST
39586: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39587: LD_ADDR_VAR 0 45
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: NEG
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 3
39616: NEG
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: LIST
39630: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39631: LD_ADDR_VAR 0 46
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 3
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 3
39662: NEG
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: LIST
39676: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39677: LD_ADDR_VAR 0 47
39681: PUSH
39682: LD_INT 2
39684: NEG
39685: PUSH
39686: LD_INT 3
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 3
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39710: LD_ADDR_VAR 0 48
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 2
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39741: LD_ADDR_VAR 0 49
39745: PUSH
39746: LD_INT 3
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 3
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39770: LD_ADDR_VAR 0 50
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: LD_INT 3
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39799: LD_ADDR_VAR 0 51
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 2
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39830: LD_ADDR_VAR 0 52
39834: PUSH
39835: LD_INT 3
39837: NEG
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 3
39849: NEG
39850: PUSH
39851: LD_INT 2
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39863: LD_ADDR_VAR 0 53
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: LD_INT 3
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 3
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39907: LD_ADDR_VAR 0 54
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 3
39935: PUSH
39936: LD_INT 1
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39948: LD_ADDR_VAR 0 55
39952: PUSH
39953: LD_INT 3
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 3
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 3
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: LIST
39987: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39988: LD_ADDR_VAR 0 56
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 3
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 3
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: LIST
40028: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40029: LD_ADDR_VAR 0 57
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 3
40047: NEG
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 3
40058: NEG
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40073: LD_ADDR_VAR 0 58
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: LD_INT 3
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 3
40092: NEG
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: LD_INT 3
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40119: LD_ADDR_VAR 0 59
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40163: LD_ADDR_VAR 0 60
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: LIST
40203: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40204: LD_ADDR_VAR 0 61
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40244: LD_ADDR_VAR 0 62
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40285: LD_ADDR_VAR 0 63
40289: PUSH
40290: LD_INT 1
40292: NEG
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40329: LD_ADDR_VAR 0 64
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: LD_INT 2
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: ST_TO_ADDR
// end ; 2 :
40375: GO 43641
40377: LD_INT 2
40379: DOUBLE
40380: EQUAL
40381: IFTRUE 40385
40383: GO 43640
40385: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40386: LD_ADDR_VAR 0 29
40390: PUSH
40391: LD_INT 4
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 4
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 5
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 5
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 4
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 3
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 3
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 3
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 5
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 3
40486: PUSH
40487: LD_INT 3
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 3
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 4
40506: PUSH
40507: LD_INT 3
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 4
40516: PUSH
40517: LD_INT 4
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: PUSH
40527: LD_INT 4
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 3
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 4
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: LD_INT 4
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 4
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 3
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 4
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 5
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 5
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 4
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 3
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: PUSH
40649: LD_INT 5
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: LD_INT 3
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 3
40669: NEG
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 3
40680: NEG
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 3
40714: NEG
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 4
40725: NEG
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 4
40736: NEG
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 4
40748: NEG
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 4
40771: NEG
40772: PUSH
40773: LD_INT 4
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 4
40783: NEG
40784: PUSH
40785: LD_INT 5
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 3
40795: NEG
40796: PUSH
40797: LD_INT 4
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 3
40807: NEG
40808: PUSH
40809: LD_INT 3
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 4
40819: NEG
40820: PUSH
40821: LD_INT 3
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 5
40831: NEG
40832: PUSH
40833: LD_INT 4
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 5
40843: NEG
40844: PUSH
40845: LD_INT 5
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 3
40855: NEG
40856: PUSH
40857: LD_INT 5
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 5
40867: NEG
40868: PUSH
40869: LD_INT 3
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40924: LD_ADDR_VAR 0 30
40928: PUSH
40929: LD_INT 4
40931: PUSH
40932: LD_INT 4
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 4
40941: PUSH
40942: LD_INT 3
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 5
40951: PUSH
40952: LD_INT 4
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 5
40961: PUSH
40962: LD_INT 5
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 4
40971: PUSH
40972: LD_INT 5
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 3
40981: PUSH
40982: LD_INT 4
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 3
40991: PUSH
40992: LD_INT 3
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 5
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 3
41011: PUSH
41012: LD_INT 5
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 3
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 3
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 4
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: LD_INT 4
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: LD_INT 3
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: LD_INT 4
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: NEG
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 4
41114: NEG
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 4
41125: NEG
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 3
41137: NEG
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 3
41148: NEG
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 4
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 5
41170: NEG
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 5
41181: NEG
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 5
41193: NEG
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 3
41205: NEG
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 3
41216: NEG
41217: PUSH
41218: LD_INT 3
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 3
41228: NEG
41229: PUSH
41230: LD_INT 4
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: LD_INT 3
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 3
41264: NEG
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 4
41276: NEG
41277: PUSH
41278: LD_INT 3
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 4
41288: NEG
41289: PUSH
41290: LD_INT 4
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 2
41300: NEG
41301: PUSH
41302: LD_INT 4
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 4
41312: NEG
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 4
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: LD_INT 5
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 4
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: LD_INT 3
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 3
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: LD_INT 4
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: PUSH
41393: LD_INT 5
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: NEG
41415: PUSH
41416: LD_INT 5
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41471: LD_ADDR_VAR 0 31
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 4
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 3
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 4
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: LD_INT 5
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 5
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 4
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: LD_INT 3
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 5
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 3
41571: NEG
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: NEG
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 3
41616: NEG
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 4
41627: NEG
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 4
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 4
41650: NEG
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: LD_INT 2
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 4
41673: NEG
41674: PUSH
41675: LD_INT 4
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 4
41685: NEG
41686: PUSH
41687: LD_INT 5
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 3
41697: NEG
41698: PUSH
41699: LD_INT 4
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 3
41709: NEG
41710: PUSH
41711: LD_INT 3
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 4
41721: NEG
41722: PUSH
41723: LD_INT 3
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 5
41733: NEG
41734: PUSH
41735: LD_INT 4
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 5
41745: NEG
41746: PUSH
41747: LD_INT 5
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 3
41757: NEG
41758: PUSH
41759: LD_INT 5
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 5
41769: NEG
41770: PUSH
41771: LD_INT 3
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 3
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 4
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: LD_INT 3
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 3
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: LD_INT 4
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: LD_INT 4
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 4
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 4
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 5
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 5
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 4
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 3
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: LD_INT 1
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 3
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 5
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42021: LD_ADDR_VAR 0 32
42025: PUSH
42026: LD_INT 4
42028: NEG
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 4
42039: NEG
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: NEG
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 3
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 4
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 5
42084: NEG
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 5
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 5
42107: NEG
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 3
42119: NEG
42120: PUSH
42121: LD_INT 2
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 3
42130: NEG
42131: PUSH
42132: LD_INT 3
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: NEG
42143: PUSH
42144: LD_INT 4
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: LD_INT 3
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 3
42178: NEG
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 4
42190: NEG
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 4
42202: NEG
42203: PUSH
42204: LD_INT 4
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PUSH
42216: LD_INT 4
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 4
42226: NEG
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 4
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 5
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 4
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 3
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: LD_INT 4
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: LD_INT 5
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: LD_INT 3
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: LD_INT 5
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 4
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 4
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 4
42423: PUSH
42424: LD_INT 2
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 4
42433: PUSH
42434: LD_INT 4
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 4
42443: PUSH
42444: LD_INT 3
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 5
42453: PUSH
42454: LD_INT 4
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 5
42463: PUSH
42464: LD_INT 5
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 4
42473: PUSH
42474: LD_INT 5
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 3
42483: PUSH
42484: LD_INT 4
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 3
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 5
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: PUSH
42514: LD_INT 5
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42568: LD_ADDR_VAR 0 33
42572: PUSH
42573: LD_INT 4
42575: NEG
42576: PUSH
42577: LD_INT 4
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 4
42587: NEG
42588: PUSH
42589: LD_INT 5
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 3
42599: NEG
42600: PUSH
42601: LD_INT 4
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: NEG
42612: PUSH
42613: LD_INT 3
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 4
42623: NEG
42624: PUSH
42625: LD_INT 3
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 5
42635: NEG
42636: PUSH
42637: LD_INT 4
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 5
42647: NEG
42648: PUSH
42649: LD_INT 5
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 3
42659: NEG
42660: PUSH
42661: LD_INT 5
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 5
42671: NEG
42672: PUSH
42673: LD_INT 3
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 3
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 4
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: LD_INT 3
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 4
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: LD_INT 4
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 4
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 4
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 5
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 5
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 4
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 5
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 3
42878: PUSH
42879: LD_INT 3
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 3
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 4
42898: PUSH
42899: LD_INT 3
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 4
42908: PUSH
42909: LD_INT 4
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 3
42918: PUSH
42919: LD_INT 4
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: LD_INT 3
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 4
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: PUSH
42959: LD_INT 4
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 4
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 4
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 5
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 5
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 4
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 3
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: LD_INT 5
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: LD_INT 3
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43106: LD_ADDR_VAR 0 34
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 4
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 5
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 4
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 3
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 3
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 4
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 5
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: LD_INT 3
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 5
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 4
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 4
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 3
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 4
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 4
43308: PUSH
43309: LD_INT 4
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 4
43318: PUSH
43319: LD_INT 3
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 5
43328: PUSH
43329: LD_INT 4
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 5
43338: PUSH
43339: LD_INT 5
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 4
43348: PUSH
43349: LD_INT 5
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 3
43358: PUSH
43359: LD_INT 4
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 3
43368: PUSH
43369: LD_INT 3
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 5
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: LD_INT 5
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 3
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 3
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 4
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 4
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 3
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: LD_INT 4
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 4
43491: NEG
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 4
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 3
43514: NEG
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 3
43525: NEG
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 4
43536: NEG
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 5
43547: NEG
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 5
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 5
43570: NEG
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 3
43582: NEG
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
// end ; end ;
43638: GO 43641
43640: POP
// case btype of b_depot , b_warehouse :
43641: LD_VAR 0 1
43645: PUSH
43646: LD_INT 0
43648: DOUBLE
43649: EQUAL
43650: IFTRUE 43660
43652: LD_INT 1
43654: DOUBLE
43655: EQUAL
43656: IFTRUE 43660
43658: GO 43861
43660: POP
// case nation of nation_american :
43661: LD_VAR 0 5
43665: PUSH
43666: LD_INT 1
43668: DOUBLE
43669: EQUAL
43670: IFTRUE 43674
43672: GO 43730
43674: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43675: LD_ADDR_VAR 0 9
43679: PUSH
43680: LD_VAR 0 11
43684: PUSH
43685: LD_VAR 0 12
43689: PUSH
43690: LD_VAR 0 13
43694: PUSH
43695: LD_VAR 0 14
43699: PUSH
43700: LD_VAR 0 15
43704: PUSH
43705: LD_VAR 0 16
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: PUSH
43718: LD_VAR 0 4
43722: PUSH
43723: LD_INT 1
43725: PLUS
43726: ARRAY
43727: ST_TO_ADDR
43728: GO 43859
43730: LD_INT 2
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 43794
43738: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43739: LD_ADDR_VAR 0 9
43743: PUSH
43744: LD_VAR 0 17
43748: PUSH
43749: LD_VAR 0 18
43753: PUSH
43754: LD_VAR 0 19
43758: PUSH
43759: LD_VAR 0 20
43763: PUSH
43764: LD_VAR 0 21
43768: PUSH
43769: LD_VAR 0 22
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: PUSH
43782: LD_VAR 0 4
43786: PUSH
43787: LD_INT 1
43789: PLUS
43790: ARRAY
43791: ST_TO_ADDR
43792: GO 43859
43794: LD_INT 3
43796: DOUBLE
43797: EQUAL
43798: IFTRUE 43802
43800: GO 43858
43802: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43803: LD_ADDR_VAR 0 9
43807: PUSH
43808: LD_VAR 0 23
43812: PUSH
43813: LD_VAR 0 24
43817: PUSH
43818: LD_VAR 0 25
43822: PUSH
43823: LD_VAR 0 26
43827: PUSH
43828: LD_VAR 0 27
43832: PUSH
43833: LD_VAR 0 28
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: PUSH
43846: LD_VAR 0 4
43850: PUSH
43851: LD_INT 1
43853: PLUS
43854: ARRAY
43855: ST_TO_ADDR
43856: GO 43859
43858: POP
43859: GO 44414
43861: LD_INT 2
43863: DOUBLE
43864: EQUAL
43865: IFTRUE 43875
43867: LD_INT 3
43869: DOUBLE
43870: EQUAL
43871: IFTRUE 43875
43873: GO 43931
43875: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43876: LD_ADDR_VAR 0 9
43880: PUSH
43881: LD_VAR 0 29
43885: PUSH
43886: LD_VAR 0 30
43890: PUSH
43891: LD_VAR 0 31
43895: PUSH
43896: LD_VAR 0 32
43900: PUSH
43901: LD_VAR 0 33
43905: PUSH
43906: LD_VAR 0 34
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: PUSH
43919: LD_VAR 0 4
43923: PUSH
43924: LD_INT 1
43926: PLUS
43927: ARRAY
43928: ST_TO_ADDR
43929: GO 44414
43931: LD_INT 16
43933: DOUBLE
43934: EQUAL
43935: IFTRUE 43993
43937: LD_INT 17
43939: DOUBLE
43940: EQUAL
43941: IFTRUE 43993
43943: LD_INT 18
43945: DOUBLE
43946: EQUAL
43947: IFTRUE 43993
43949: LD_INT 19
43951: DOUBLE
43952: EQUAL
43953: IFTRUE 43993
43955: LD_INT 22
43957: DOUBLE
43958: EQUAL
43959: IFTRUE 43993
43961: LD_INT 20
43963: DOUBLE
43964: EQUAL
43965: IFTRUE 43993
43967: LD_INT 21
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43993
43973: LD_INT 23
43975: DOUBLE
43976: EQUAL
43977: IFTRUE 43993
43979: LD_INT 24
43981: DOUBLE
43982: EQUAL
43983: IFTRUE 43993
43985: LD_INT 25
43987: DOUBLE
43988: EQUAL
43989: IFTRUE 43993
43991: GO 44049
43993: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43994: LD_ADDR_VAR 0 9
43998: PUSH
43999: LD_VAR 0 35
44003: PUSH
44004: LD_VAR 0 36
44008: PUSH
44009: LD_VAR 0 37
44013: PUSH
44014: LD_VAR 0 38
44018: PUSH
44019: LD_VAR 0 39
44023: PUSH
44024: LD_VAR 0 40
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: PUSH
44037: LD_VAR 0 4
44041: PUSH
44042: LD_INT 1
44044: PLUS
44045: ARRAY
44046: ST_TO_ADDR
44047: GO 44414
44049: LD_INT 6
44051: DOUBLE
44052: EQUAL
44053: IFTRUE 44105
44055: LD_INT 7
44057: DOUBLE
44058: EQUAL
44059: IFTRUE 44105
44061: LD_INT 8
44063: DOUBLE
44064: EQUAL
44065: IFTRUE 44105
44067: LD_INT 13
44069: DOUBLE
44070: EQUAL
44071: IFTRUE 44105
44073: LD_INT 12
44075: DOUBLE
44076: EQUAL
44077: IFTRUE 44105
44079: LD_INT 15
44081: DOUBLE
44082: EQUAL
44083: IFTRUE 44105
44085: LD_INT 11
44087: DOUBLE
44088: EQUAL
44089: IFTRUE 44105
44091: LD_INT 14
44093: DOUBLE
44094: EQUAL
44095: IFTRUE 44105
44097: LD_INT 10
44099: DOUBLE
44100: EQUAL
44101: IFTRUE 44105
44103: GO 44161
44105: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44106: LD_ADDR_VAR 0 9
44110: PUSH
44111: LD_VAR 0 41
44115: PUSH
44116: LD_VAR 0 42
44120: PUSH
44121: LD_VAR 0 43
44125: PUSH
44126: LD_VAR 0 44
44130: PUSH
44131: LD_VAR 0 45
44135: PUSH
44136: LD_VAR 0 46
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: PUSH
44149: LD_VAR 0 4
44153: PUSH
44154: LD_INT 1
44156: PLUS
44157: ARRAY
44158: ST_TO_ADDR
44159: GO 44414
44161: LD_INT 36
44163: DOUBLE
44164: EQUAL
44165: IFTRUE 44169
44167: GO 44225
44169: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44170: LD_ADDR_VAR 0 9
44174: PUSH
44175: LD_VAR 0 47
44179: PUSH
44180: LD_VAR 0 48
44184: PUSH
44185: LD_VAR 0 49
44189: PUSH
44190: LD_VAR 0 50
44194: PUSH
44195: LD_VAR 0 51
44199: PUSH
44200: LD_VAR 0 52
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: PUSH
44213: LD_VAR 0 4
44217: PUSH
44218: LD_INT 1
44220: PLUS
44221: ARRAY
44222: ST_TO_ADDR
44223: GO 44414
44225: LD_INT 4
44227: DOUBLE
44228: EQUAL
44229: IFTRUE 44251
44231: LD_INT 5
44233: DOUBLE
44234: EQUAL
44235: IFTRUE 44251
44237: LD_INT 34
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44251
44243: LD_INT 37
44245: DOUBLE
44246: EQUAL
44247: IFTRUE 44251
44249: GO 44307
44251: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44252: LD_ADDR_VAR 0 9
44256: PUSH
44257: LD_VAR 0 53
44261: PUSH
44262: LD_VAR 0 54
44266: PUSH
44267: LD_VAR 0 55
44271: PUSH
44272: LD_VAR 0 56
44276: PUSH
44277: LD_VAR 0 57
44281: PUSH
44282: LD_VAR 0 58
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: PUSH
44295: LD_VAR 0 4
44299: PUSH
44300: LD_INT 1
44302: PLUS
44303: ARRAY
44304: ST_TO_ADDR
44305: GO 44414
44307: LD_INT 31
44309: DOUBLE
44310: EQUAL
44311: IFTRUE 44357
44313: LD_INT 32
44315: DOUBLE
44316: EQUAL
44317: IFTRUE 44357
44319: LD_INT 33
44321: DOUBLE
44322: EQUAL
44323: IFTRUE 44357
44325: LD_INT 27
44327: DOUBLE
44328: EQUAL
44329: IFTRUE 44357
44331: LD_INT 26
44333: DOUBLE
44334: EQUAL
44335: IFTRUE 44357
44337: LD_INT 28
44339: DOUBLE
44340: EQUAL
44341: IFTRUE 44357
44343: LD_INT 29
44345: DOUBLE
44346: EQUAL
44347: IFTRUE 44357
44349: LD_INT 30
44351: DOUBLE
44352: EQUAL
44353: IFTRUE 44357
44355: GO 44413
44357: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44358: LD_ADDR_VAR 0 9
44362: PUSH
44363: LD_VAR 0 59
44367: PUSH
44368: LD_VAR 0 60
44372: PUSH
44373: LD_VAR 0 61
44377: PUSH
44378: LD_VAR 0 62
44382: PUSH
44383: LD_VAR 0 63
44387: PUSH
44388: LD_VAR 0 64
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: PUSH
44401: LD_VAR 0 4
44405: PUSH
44406: LD_INT 1
44408: PLUS
44409: ARRAY
44410: ST_TO_ADDR
44411: GO 44414
44413: POP
// temp_list2 = [ ] ;
44414: LD_ADDR_VAR 0 10
44418: PUSH
44419: EMPTY
44420: ST_TO_ADDR
// for i in temp_list do
44421: LD_ADDR_VAR 0 8
44425: PUSH
44426: LD_VAR 0 9
44430: PUSH
44431: FOR_IN
44432: IFFALSE 44484
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44434: LD_ADDR_VAR 0 10
44438: PUSH
44439: LD_VAR 0 10
44443: PUSH
44444: LD_VAR 0 8
44448: PUSH
44449: LD_INT 1
44451: ARRAY
44452: PUSH
44453: LD_VAR 0 2
44457: PLUS
44458: PUSH
44459: LD_VAR 0 8
44463: PUSH
44464: LD_INT 2
44466: ARRAY
44467: PUSH
44468: LD_VAR 0 3
44472: PLUS
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: EMPTY
44479: LIST
44480: ADD
44481: ST_TO_ADDR
44482: GO 44431
44484: POP
44485: POP
// result = temp_list2 ;
44486: LD_ADDR_VAR 0 7
44490: PUSH
44491: LD_VAR 0 10
44495: ST_TO_ADDR
// end ;
44496: LD_VAR 0 7
44500: RET
// export function EnemyInRange ( unit , dist ) ; begin
44501: LD_INT 0
44503: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44504: LD_ADDR_VAR 0 3
44508: PUSH
44509: LD_VAR 0 1
44513: PPUSH
44514: CALL_OW 255
44518: PPUSH
44519: LD_VAR 0 1
44523: PPUSH
44524: CALL_OW 250
44528: PPUSH
44529: LD_VAR 0 1
44533: PPUSH
44534: CALL_OW 251
44538: PPUSH
44539: LD_VAR 0 2
44543: PPUSH
44544: CALL 17758 0 4
44548: PUSH
44549: LD_INT 4
44551: ARRAY
44552: ST_TO_ADDR
// end ;
44553: LD_VAR 0 3
44557: RET
// export function PlayerSeeMe ( unit ) ; begin
44558: LD_INT 0
44560: PPUSH
// result := See ( your_side , unit ) ;
44561: LD_ADDR_VAR 0 2
44565: PUSH
44566: LD_OWVAR 2
44570: PPUSH
44571: LD_VAR 0 1
44575: PPUSH
44576: CALL_OW 292
44580: ST_TO_ADDR
// end ;
44581: LD_VAR 0 2
44585: RET
// export function ReverseDir ( unit ) ; begin
44586: LD_INT 0
44588: PPUSH
// if not unit then
44589: LD_VAR 0 1
44593: NOT
44594: IFFALSE 44598
// exit ;
44596: GO 44621
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44598: LD_ADDR_VAR 0 2
44602: PUSH
44603: LD_VAR 0 1
44607: PPUSH
44608: CALL_OW 254
44612: PUSH
44613: LD_INT 3
44615: PLUS
44616: PUSH
44617: LD_INT 6
44619: MOD
44620: ST_TO_ADDR
// end ;
44621: LD_VAR 0 2
44625: RET
// export function ReverseArray ( array ) ; var i ; begin
44626: LD_INT 0
44628: PPUSH
44629: PPUSH
// if not array then
44630: LD_VAR 0 1
44634: NOT
44635: IFFALSE 44639
// exit ;
44637: GO 44694
// result := [ ] ;
44639: LD_ADDR_VAR 0 2
44643: PUSH
44644: EMPTY
44645: ST_TO_ADDR
// for i := array downto 1 do
44646: LD_ADDR_VAR 0 3
44650: PUSH
44651: DOUBLE
44652: LD_VAR 0 1
44656: INC
44657: ST_TO_ADDR
44658: LD_INT 1
44660: PUSH
44661: FOR_DOWNTO
44662: IFFALSE 44692
// result := Join ( result , array [ i ] ) ;
44664: LD_ADDR_VAR 0 2
44668: PUSH
44669: LD_VAR 0 2
44673: PPUSH
44674: LD_VAR 0 1
44678: PUSH
44679: LD_VAR 0 3
44683: ARRAY
44684: PPUSH
44685: CALL 49546 0 2
44689: ST_TO_ADDR
44690: GO 44661
44692: POP
44693: POP
// end ;
44694: LD_VAR 0 2
44698: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44699: LD_INT 0
44701: PPUSH
44702: PPUSH
44703: PPUSH
44704: PPUSH
44705: PPUSH
44706: PPUSH
// if not unit or not hexes then
44707: LD_VAR 0 1
44711: NOT
44712: IFTRUE 44721
44714: PUSH
44715: LD_VAR 0 2
44719: NOT
44720: OR
44721: IFFALSE 44725
// exit ;
44723: GO 44848
// dist := 9999 ;
44725: LD_ADDR_VAR 0 5
44729: PUSH
44730: LD_INT 9999
44732: ST_TO_ADDR
// for i = 1 to hexes do
44733: LD_ADDR_VAR 0 4
44737: PUSH
44738: DOUBLE
44739: LD_INT 1
44741: DEC
44742: ST_TO_ADDR
44743: LD_VAR 0 2
44747: PUSH
44748: FOR_TO
44749: IFFALSE 44836
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44751: LD_ADDR_VAR 0 6
44755: PUSH
44756: LD_VAR 0 1
44760: PPUSH
44761: LD_VAR 0 2
44765: PUSH
44766: LD_VAR 0 4
44770: ARRAY
44771: PUSH
44772: LD_INT 1
44774: ARRAY
44775: PPUSH
44776: LD_VAR 0 2
44780: PUSH
44781: LD_VAR 0 4
44785: ARRAY
44786: PUSH
44787: LD_INT 2
44789: ARRAY
44790: PPUSH
44791: CALL_OW 297
44795: ST_TO_ADDR
// if tdist < dist then
44796: LD_VAR 0 6
44800: PUSH
44801: LD_VAR 0 5
44805: LESS
44806: IFFALSE 44834
// begin hex := hexes [ i ] ;
44808: LD_ADDR_VAR 0 8
44812: PUSH
44813: LD_VAR 0 2
44817: PUSH
44818: LD_VAR 0 4
44822: ARRAY
44823: ST_TO_ADDR
// dist := tdist ;
44824: LD_ADDR_VAR 0 5
44828: PUSH
44829: LD_VAR 0 6
44833: ST_TO_ADDR
// end ; end ;
44834: GO 44748
44836: POP
44837: POP
// result := hex ;
44838: LD_ADDR_VAR 0 3
44842: PUSH
44843: LD_VAR 0 8
44847: ST_TO_ADDR
// end ;
44848: LD_VAR 0 3
44852: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44853: LD_INT 0
44855: PPUSH
44856: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44857: LD_VAR 0 1
44861: NOT
44862: IFTRUE 44901
44864: PUSH
44865: LD_VAR 0 1
44869: PUSH
44870: LD_INT 21
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 23
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PPUSH
44894: CALL_OW 69
44898: IN
44899: NOT
44900: OR
44901: IFFALSE 44905
// exit ;
44903: GO 44952
// for i = 1 to 3 do
44905: LD_ADDR_VAR 0 3
44909: PUSH
44910: DOUBLE
44911: LD_INT 1
44913: DEC
44914: ST_TO_ADDR
44915: LD_INT 3
44917: PUSH
44918: FOR_TO
44919: IFFALSE 44950
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44921: LD_VAR 0 1
44925: PPUSH
44926: CALL_OW 250
44930: PPUSH
44931: LD_VAR 0 1
44935: PPUSH
44936: CALL_OW 251
44940: PPUSH
44941: LD_INT 1
44943: PPUSH
44944: CALL_OW 453
44948: GO 44918
44950: POP
44951: POP
// end ;
44952: LD_VAR 0 2
44956: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44957: LD_INT 0
44959: PPUSH
44960: PPUSH
44961: PPUSH
44962: PPUSH
44963: PPUSH
44964: PPUSH
// if not unit or not enemy_unit then
44965: LD_VAR 0 1
44969: NOT
44970: IFTRUE 44979
44972: PUSH
44973: LD_VAR 0 2
44977: NOT
44978: OR
44979: IFFALSE 44983
// exit ;
44981: GO 45464
// if GetLives ( i ) < 250 then
44983: LD_VAR 0 4
44987: PPUSH
44988: CALL_OW 256
44992: PUSH
44993: LD_INT 250
44995: LESS
44996: IFFALSE 45009
// begin ComAutodestruct ( i ) ;
44998: LD_VAR 0 4
45002: PPUSH
45003: CALL 44853 0 1
// exit ;
45007: GO 45464
// end ; x := GetX ( enemy_unit ) ;
45009: LD_ADDR_VAR 0 7
45013: PUSH
45014: LD_VAR 0 2
45018: PPUSH
45019: CALL_OW 250
45023: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45024: LD_ADDR_VAR 0 8
45028: PUSH
45029: LD_VAR 0 2
45033: PPUSH
45034: CALL_OW 251
45038: ST_TO_ADDR
// if not x or not y then
45039: LD_VAR 0 7
45043: NOT
45044: IFTRUE 45053
45046: PUSH
45047: LD_VAR 0 8
45051: NOT
45052: OR
45053: IFFALSE 45057
// exit ;
45055: GO 45464
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45057: LD_ADDR_VAR 0 6
45061: PUSH
45062: LD_VAR 0 7
45066: PPUSH
45067: LD_INT 0
45069: PPUSH
45070: LD_INT 4
45072: PPUSH
45073: CALL_OW 272
45077: PUSH
45078: LD_VAR 0 8
45082: PPUSH
45083: LD_INT 0
45085: PPUSH
45086: LD_INT 4
45088: PPUSH
45089: CALL_OW 273
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_VAR 0 7
45102: PPUSH
45103: LD_INT 1
45105: PPUSH
45106: LD_INT 4
45108: PPUSH
45109: CALL_OW 272
45113: PUSH
45114: LD_VAR 0 8
45118: PPUSH
45119: LD_INT 1
45121: PPUSH
45122: LD_INT 4
45124: PPUSH
45125: CALL_OW 273
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_VAR 0 7
45138: PPUSH
45139: LD_INT 2
45141: PPUSH
45142: LD_INT 4
45144: PPUSH
45145: CALL_OW 272
45149: PUSH
45150: LD_VAR 0 8
45154: PPUSH
45155: LD_INT 2
45157: PPUSH
45158: LD_INT 4
45160: PPUSH
45161: CALL_OW 273
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_VAR 0 7
45174: PPUSH
45175: LD_INT 3
45177: PPUSH
45178: LD_INT 4
45180: PPUSH
45181: CALL_OW 272
45185: PUSH
45186: LD_VAR 0 8
45190: PPUSH
45191: LD_INT 3
45193: PPUSH
45194: LD_INT 4
45196: PPUSH
45197: CALL_OW 273
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_VAR 0 7
45210: PPUSH
45211: LD_INT 4
45213: PPUSH
45214: LD_INT 4
45216: PPUSH
45217: CALL_OW 272
45221: PUSH
45222: LD_VAR 0 8
45226: PPUSH
45227: LD_INT 4
45229: PPUSH
45230: LD_INT 4
45232: PPUSH
45233: CALL_OW 273
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_VAR 0 7
45246: PPUSH
45247: LD_INT 5
45249: PPUSH
45250: LD_INT 4
45252: PPUSH
45253: CALL_OW 272
45257: PUSH
45258: LD_VAR 0 8
45262: PPUSH
45263: LD_INT 5
45265: PPUSH
45266: LD_INT 4
45268: PPUSH
45269: CALL_OW 273
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: ST_TO_ADDR
// for i = tmp downto 1 do
45286: LD_ADDR_VAR 0 4
45290: PUSH
45291: DOUBLE
45292: LD_VAR 0 6
45296: INC
45297: ST_TO_ADDR
45298: LD_INT 1
45300: PUSH
45301: FOR_DOWNTO
45302: IFFALSE 45405
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45304: LD_VAR 0 6
45308: PUSH
45309: LD_VAR 0 4
45313: ARRAY
45314: PUSH
45315: LD_INT 1
45317: ARRAY
45318: PPUSH
45319: LD_VAR 0 6
45323: PUSH
45324: LD_VAR 0 4
45328: ARRAY
45329: PUSH
45330: LD_INT 2
45332: ARRAY
45333: PPUSH
45334: CALL_OW 488
45338: NOT
45339: IFTRUE 45381
45341: PUSH
45342: LD_VAR 0 6
45346: PUSH
45347: LD_VAR 0 4
45351: ARRAY
45352: PUSH
45353: LD_INT 1
45355: ARRAY
45356: PPUSH
45357: LD_VAR 0 6
45361: PUSH
45362: LD_VAR 0 4
45366: ARRAY
45367: PUSH
45368: LD_INT 2
45370: ARRAY
45371: PPUSH
45372: CALL_OW 428
45376: PUSH
45377: LD_INT 0
45379: NONEQUAL
45380: OR
45381: IFFALSE 45403
// tmp := Delete ( tmp , i ) ;
45383: LD_ADDR_VAR 0 6
45387: PUSH
45388: LD_VAR 0 6
45392: PPUSH
45393: LD_VAR 0 4
45397: PPUSH
45398: CALL_OW 3
45402: ST_TO_ADDR
45403: GO 45301
45405: POP
45406: POP
// j := GetClosestHex ( unit , tmp ) ;
45407: LD_ADDR_VAR 0 5
45411: PUSH
45412: LD_VAR 0 1
45416: PPUSH
45417: LD_VAR 0 6
45421: PPUSH
45422: CALL 44699 0 2
45426: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45427: LD_VAR 0 1
45431: PPUSH
45432: LD_VAR 0 5
45436: PUSH
45437: LD_INT 1
45439: ARRAY
45440: PPUSH
45441: LD_VAR 0 5
45445: PUSH
45446: LD_INT 2
45448: ARRAY
45449: PPUSH
45450: CALL_OW 111
// result := j ;
45454: LD_ADDR_VAR 0 3
45458: PUSH
45459: LD_VAR 0 5
45463: ST_TO_ADDR
// end ;
45464: LD_VAR 0 3
45468: RET
// export function PrepareApemanSoldier ( ) ; begin
45469: LD_INT 0
45471: PPUSH
// uc_nation := 0 ;
45472: LD_ADDR_OWVAR 21
45476: PUSH
45477: LD_INT 0
45479: ST_TO_ADDR
// hc_sex := sex_male ;
45480: LD_ADDR_OWVAR 27
45484: PUSH
45485: LD_INT 1
45487: ST_TO_ADDR
// hc_name :=  ;
45488: LD_ADDR_OWVAR 26
45492: PUSH
45493: LD_STRING 
45495: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45496: LD_ADDR_OWVAR 28
45500: PUSH
45501: LD_INT 15
45503: ST_TO_ADDR
// hc_gallery :=  ;
45504: LD_ADDR_OWVAR 33
45508: PUSH
45509: LD_STRING 
45511: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45512: LD_ADDR_OWVAR 31
45516: PUSH
45517: LD_INT 0
45519: PPUSH
45520: LD_INT 3
45522: PPUSH
45523: CALL_OW 12
45527: PUSH
45528: LD_INT 0
45530: PPUSH
45531: LD_INT 3
45533: PPUSH
45534: CALL_OW 12
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45551: LD_ADDR_OWVAR 29
45555: PUSH
45556: LD_INT 10
45558: PUSH
45559: LD_INT 12
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: ST_TO_ADDR
// end ;
45566: LD_VAR 0 1
45570: RET
// export function PrepareApemanEngineer ( ) ; begin
45571: LD_INT 0
45573: PPUSH
// uc_nation := 0 ;
45574: LD_ADDR_OWVAR 21
45578: PUSH
45579: LD_INT 0
45581: ST_TO_ADDR
// hc_sex := sex_male ;
45582: LD_ADDR_OWVAR 27
45586: PUSH
45587: LD_INT 1
45589: ST_TO_ADDR
// hc_name :=  ;
45590: LD_ADDR_OWVAR 26
45594: PUSH
45595: LD_STRING 
45597: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45598: LD_ADDR_OWVAR 28
45602: PUSH
45603: LD_INT 16
45605: ST_TO_ADDR
// hc_gallery :=  ;
45606: LD_ADDR_OWVAR 33
45610: PUSH
45611: LD_STRING 
45613: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45614: LD_ADDR_OWVAR 31
45618: PUSH
45619: LD_INT 0
45621: PPUSH
45622: LD_INT 3
45624: PPUSH
45625: CALL_OW 12
45629: PUSH
45630: LD_INT 0
45632: PPUSH
45633: LD_INT 3
45635: PPUSH
45636: CALL_OW 12
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45653: LD_ADDR_OWVAR 29
45657: PUSH
45658: LD_INT 10
45660: PUSH
45661: LD_INT 12
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: ST_TO_ADDR
// end ;
45668: LD_VAR 0 1
45672: RET
// export function PrepareApeman ( agressivity ) ; begin
45673: LD_INT 0
45675: PPUSH
// uc_side := 0 ;
45676: LD_ADDR_OWVAR 20
45680: PUSH
45681: LD_INT 0
45683: ST_TO_ADDR
// uc_nation := 0 ;
45684: LD_ADDR_OWVAR 21
45688: PUSH
45689: LD_INT 0
45691: ST_TO_ADDR
// hc_sex := sex_male ;
45692: LD_ADDR_OWVAR 27
45696: PUSH
45697: LD_INT 1
45699: ST_TO_ADDR
// hc_class := class_apeman ;
45700: LD_ADDR_OWVAR 28
45704: PUSH
45705: LD_INT 12
45707: ST_TO_ADDR
// hc_gallery :=  ;
45708: LD_ADDR_OWVAR 33
45712: PUSH
45713: LD_STRING 
45715: ST_TO_ADDR
// hc_name :=  ;
45716: LD_ADDR_OWVAR 26
45720: PUSH
45721: LD_STRING 
45723: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45724: LD_ADDR_OWVAR 29
45728: PUSH
45729: LD_INT 10
45731: PUSH
45732: LD_INT 12
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: ST_TO_ADDR
// if agressivity = 0 then
45739: LD_VAR 0 1
45743: PUSH
45744: LD_INT 0
45746: EQUAL
45747: IFFALSE 45759
// hc_agressivity := 0 else
45749: LD_ADDR_OWVAR 35
45753: PUSH
45754: LD_INT 0
45756: ST_TO_ADDR
45757: GO 45780
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45759: LD_ADDR_OWVAR 35
45763: PUSH
45764: LD_VAR 0 1
45768: NEG
45769: PPUSH
45770: LD_VAR 0 1
45774: PPUSH
45775: CALL_OW 12
45779: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45780: LD_ADDR_OWVAR 31
45784: PUSH
45785: LD_INT 0
45787: PPUSH
45788: LD_INT 3
45790: PPUSH
45791: CALL_OW 12
45795: PUSH
45796: LD_INT 0
45798: PPUSH
45799: LD_INT 3
45801: PPUSH
45802: CALL_OW 12
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: ST_TO_ADDR
// end ;
45819: LD_VAR 0 2
45823: RET
// export function PrepareTiger ( agressivity ) ; begin
45824: LD_INT 0
45826: PPUSH
// uc_side := 0 ;
45827: LD_ADDR_OWVAR 20
45831: PUSH
45832: LD_INT 0
45834: ST_TO_ADDR
// uc_nation := 0 ;
45835: LD_ADDR_OWVAR 21
45839: PUSH
45840: LD_INT 0
45842: ST_TO_ADDR
// InitHc ;
45843: CALL_OW 19
// hc_class := class_tiger ;
45847: LD_ADDR_OWVAR 28
45851: PUSH
45852: LD_INT 14
45854: ST_TO_ADDR
// hc_gallery :=  ;
45855: LD_ADDR_OWVAR 33
45859: PUSH
45860: LD_STRING 
45862: ST_TO_ADDR
// hc_name :=  ;
45863: LD_ADDR_OWVAR 26
45867: PUSH
45868: LD_STRING 
45870: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45871: LD_ADDR_OWVAR 35
45875: PUSH
45876: LD_VAR 0 1
45880: NEG
45881: PPUSH
45882: LD_VAR 0 1
45886: PPUSH
45887: CALL_OW 12
45891: ST_TO_ADDR
// end ;
45892: LD_VAR 0 2
45896: RET
// export function PrepareEnchidna ( ) ; begin
45897: LD_INT 0
45899: PPUSH
// uc_side := 0 ;
45900: LD_ADDR_OWVAR 20
45904: PUSH
45905: LD_INT 0
45907: ST_TO_ADDR
// uc_nation := 0 ;
45908: LD_ADDR_OWVAR 21
45912: PUSH
45913: LD_INT 0
45915: ST_TO_ADDR
// InitHc ;
45916: CALL_OW 19
// hc_class := class_baggie ;
45920: LD_ADDR_OWVAR 28
45924: PUSH
45925: LD_INT 13
45927: ST_TO_ADDR
// hc_gallery :=  ;
45928: LD_ADDR_OWVAR 33
45932: PUSH
45933: LD_STRING 
45935: ST_TO_ADDR
// hc_name :=  ;
45936: LD_ADDR_OWVAR 26
45940: PUSH
45941: LD_STRING 
45943: ST_TO_ADDR
// end ;
45944: LD_VAR 0 1
45948: RET
// export function PrepareFrog ( ) ; begin
45949: LD_INT 0
45951: PPUSH
// uc_side := 0 ;
45952: LD_ADDR_OWVAR 20
45956: PUSH
45957: LD_INT 0
45959: ST_TO_ADDR
// uc_nation := 0 ;
45960: LD_ADDR_OWVAR 21
45964: PUSH
45965: LD_INT 0
45967: ST_TO_ADDR
// InitHc ;
45968: CALL_OW 19
// hc_class := class_frog ;
45972: LD_ADDR_OWVAR 28
45976: PUSH
45977: LD_INT 19
45979: ST_TO_ADDR
// hc_gallery :=  ;
45980: LD_ADDR_OWVAR 33
45984: PUSH
45985: LD_STRING 
45987: ST_TO_ADDR
// hc_name :=  ;
45988: LD_ADDR_OWVAR 26
45992: PUSH
45993: LD_STRING 
45995: ST_TO_ADDR
// end ;
45996: LD_VAR 0 1
46000: RET
// export function PrepareFish ( ) ; begin
46001: LD_INT 0
46003: PPUSH
// uc_side := 0 ;
46004: LD_ADDR_OWVAR 20
46008: PUSH
46009: LD_INT 0
46011: ST_TO_ADDR
// uc_nation := 0 ;
46012: LD_ADDR_OWVAR 21
46016: PUSH
46017: LD_INT 0
46019: ST_TO_ADDR
// InitHc ;
46020: CALL_OW 19
// hc_class := class_fish ;
46024: LD_ADDR_OWVAR 28
46028: PUSH
46029: LD_INT 20
46031: ST_TO_ADDR
// hc_gallery :=  ;
46032: LD_ADDR_OWVAR 33
46036: PUSH
46037: LD_STRING 
46039: ST_TO_ADDR
// hc_name :=  ;
46040: LD_ADDR_OWVAR 26
46044: PUSH
46045: LD_STRING 
46047: ST_TO_ADDR
// end ;
46048: LD_VAR 0 1
46052: RET
// export function PrepareBird ( ) ; begin
46053: LD_INT 0
46055: PPUSH
// uc_side := 0 ;
46056: LD_ADDR_OWVAR 20
46060: PUSH
46061: LD_INT 0
46063: ST_TO_ADDR
// uc_nation := 0 ;
46064: LD_ADDR_OWVAR 21
46068: PUSH
46069: LD_INT 0
46071: ST_TO_ADDR
// InitHc ;
46072: CALL_OW 19
// hc_class := class_phororhacos ;
46076: LD_ADDR_OWVAR 28
46080: PUSH
46081: LD_INT 18
46083: ST_TO_ADDR
// hc_gallery :=  ;
46084: LD_ADDR_OWVAR 33
46088: PUSH
46089: LD_STRING 
46091: ST_TO_ADDR
// hc_name :=  ;
46092: LD_ADDR_OWVAR 26
46096: PUSH
46097: LD_STRING 
46099: ST_TO_ADDR
// end ;
46100: LD_VAR 0 1
46104: RET
// export function PrepareHorse ( ) ; begin
46105: LD_INT 0
46107: PPUSH
// uc_side := 0 ;
46108: LD_ADDR_OWVAR 20
46112: PUSH
46113: LD_INT 0
46115: ST_TO_ADDR
// uc_nation := 0 ;
46116: LD_ADDR_OWVAR 21
46120: PUSH
46121: LD_INT 0
46123: ST_TO_ADDR
// InitHc ;
46124: CALL_OW 19
// hc_class := class_horse ;
46128: LD_ADDR_OWVAR 28
46132: PUSH
46133: LD_INT 21
46135: ST_TO_ADDR
// hc_gallery :=  ;
46136: LD_ADDR_OWVAR 33
46140: PUSH
46141: LD_STRING 
46143: ST_TO_ADDR
// hc_name :=  ;
46144: LD_ADDR_OWVAR 26
46148: PUSH
46149: LD_STRING 
46151: ST_TO_ADDR
// end ;
46152: LD_VAR 0 1
46156: RET
// export function PrepareMastodont ( ) ; begin
46157: LD_INT 0
46159: PPUSH
// uc_side := 0 ;
46160: LD_ADDR_OWVAR 20
46164: PUSH
46165: LD_INT 0
46167: ST_TO_ADDR
// uc_nation := 0 ;
46168: LD_ADDR_OWVAR 21
46172: PUSH
46173: LD_INT 0
46175: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46176: LD_ADDR_OWVAR 37
46180: PUSH
46181: LD_INT 31
46183: ST_TO_ADDR
// vc_control := control_rider ;
46184: LD_ADDR_OWVAR 38
46188: PUSH
46189: LD_INT 4
46191: ST_TO_ADDR
// end ;
46192: LD_VAR 0 1
46196: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46197: LD_INT 0
46199: PPUSH
46200: PPUSH
46201: PPUSH
// uc_side = 0 ;
46202: LD_ADDR_OWVAR 20
46206: PUSH
46207: LD_INT 0
46209: ST_TO_ADDR
// uc_nation = 0 ;
46210: LD_ADDR_OWVAR 21
46214: PUSH
46215: LD_INT 0
46217: ST_TO_ADDR
// InitHc_All ( ) ;
46218: CALL_OW 584
// InitVc ;
46222: CALL_OW 20
// if mastodonts then
46226: LD_VAR 0 6
46230: IFFALSE 46297
// for i = 1 to mastodonts do
46232: LD_ADDR_VAR 0 11
46236: PUSH
46237: DOUBLE
46238: LD_INT 1
46240: DEC
46241: ST_TO_ADDR
46242: LD_VAR 0 6
46246: PUSH
46247: FOR_TO
46248: IFFALSE 46295
// begin vc_chassis := 31 ;
46250: LD_ADDR_OWVAR 37
46254: PUSH
46255: LD_INT 31
46257: ST_TO_ADDR
// vc_control := control_rider ;
46258: LD_ADDR_OWVAR 38
46262: PUSH
46263: LD_INT 4
46265: ST_TO_ADDR
// animal := CreateVehicle ;
46266: LD_ADDR_VAR 0 12
46270: PUSH
46271: CALL_OW 45
46275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46276: LD_VAR 0 12
46280: PPUSH
46281: LD_VAR 0 8
46285: PPUSH
46286: LD_INT 0
46288: PPUSH
46289: CALL 48439 0 3
// end ;
46293: GO 46247
46295: POP
46296: POP
// if horses then
46297: LD_VAR 0 5
46301: IFFALSE 46368
// for i = 1 to horses do
46303: LD_ADDR_VAR 0 11
46307: PUSH
46308: DOUBLE
46309: LD_INT 1
46311: DEC
46312: ST_TO_ADDR
46313: LD_VAR 0 5
46317: PUSH
46318: FOR_TO
46319: IFFALSE 46366
// begin hc_class := 21 ;
46321: LD_ADDR_OWVAR 28
46325: PUSH
46326: LD_INT 21
46328: ST_TO_ADDR
// hc_gallery :=  ;
46329: LD_ADDR_OWVAR 33
46333: PUSH
46334: LD_STRING 
46336: ST_TO_ADDR
// animal := CreateHuman ;
46337: LD_ADDR_VAR 0 12
46341: PUSH
46342: CALL_OW 44
46346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46347: LD_VAR 0 12
46351: PPUSH
46352: LD_VAR 0 8
46356: PPUSH
46357: LD_INT 0
46359: PPUSH
46360: CALL 48439 0 3
// end ;
46364: GO 46318
46366: POP
46367: POP
// if birds then
46368: LD_VAR 0 1
46372: IFFALSE 46439
// for i = 1 to birds do
46374: LD_ADDR_VAR 0 11
46378: PUSH
46379: DOUBLE
46380: LD_INT 1
46382: DEC
46383: ST_TO_ADDR
46384: LD_VAR 0 1
46388: PUSH
46389: FOR_TO
46390: IFFALSE 46437
// begin hc_class := 18 ;
46392: LD_ADDR_OWVAR 28
46396: PUSH
46397: LD_INT 18
46399: ST_TO_ADDR
// hc_gallery =  ;
46400: LD_ADDR_OWVAR 33
46404: PUSH
46405: LD_STRING 
46407: ST_TO_ADDR
// animal := CreateHuman ;
46408: LD_ADDR_VAR 0 12
46412: PUSH
46413: CALL_OW 44
46417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46418: LD_VAR 0 12
46422: PPUSH
46423: LD_VAR 0 8
46427: PPUSH
46428: LD_INT 0
46430: PPUSH
46431: CALL 48439 0 3
// end ;
46435: GO 46389
46437: POP
46438: POP
// if tigers then
46439: LD_VAR 0 2
46443: IFFALSE 46527
// for i = 1 to tigers do
46445: LD_ADDR_VAR 0 11
46449: PUSH
46450: DOUBLE
46451: LD_INT 1
46453: DEC
46454: ST_TO_ADDR
46455: LD_VAR 0 2
46459: PUSH
46460: FOR_TO
46461: IFFALSE 46525
// begin hc_class = class_tiger ;
46463: LD_ADDR_OWVAR 28
46467: PUSH
46468: LD_INT 14
46470: ST_TO_ADDR
// hc_gallery =  ;
46471: LD_ADDR_OWVAR 33
46475: PUSH
46476: LD_STRING 
46478: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46479: LD_ADDR_OWVAR 35
46483: PUSH
46484: LD_INT 7
46486: NEG
46487: PPUSH
46488: LD_INT 7
46490: PPUSH
46491: CALL_OW 12
46495: ST_TO_ADDR
// animal := CreateHuman ;
46496: LD_ADDR_VAR 0 12
46500: PUSH
46501: CALL_OW 44
46505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46506: LD_VAR 0 12
46510: PPUSH
46511: LD_VAR 0 8
46515: PPUSH
46516: LD_INT 0
46518: PPUSH
46519: CALL 48439 0 3
// end ;
46523: GO 46460
46525: POP
46526: POP
// if apemans then
46527: LD_VAR 0 3
46531: IFFALSE 46654
// for i = 1 to apemans do
46533: LD_ADDR_VAR 0 11
46537: PUSH
46538: DOUBLE
46539: LD_INT 1
46541: DEC
46542: ST_TO_ADDR
46543: LD_VAR 0 3
46547: PUSH
46548: FOR_TO
46549: IFFALSE 46652
// begin hc_class = class_apeman ;
46551: LD_ADDR_OWVAR 28
46555: PUSH
46556: LD_INT 12
46558: ST_TO_ADDR
// hc_gallery =  ;
46559: LD_ADDR_OWVAR 33
46563: PUSH
46564: LD_STRING 
46566: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46567: LD_ADDR_OWVAR 35
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PPUSH
46576: LD_INT 2
46578: PPUSH
46579: CALL_OW 12
46583: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46584: LD_ADDR_OWVAR 31
46588: PUSH
46589: LD_INT 1
46591: PPUSH
46592: LD_INT 3
46594: PPUSH
46595: CALL_OW 12
46599: PUSH
46600: LD_INT 1
46602: PPUSH
46603: LD_INT 3
46605: PPUSH
46606: CALL_OW 12
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: ST_TO_ADDR
// animal := CreateHuman ;
46623: LD_ADDR_VAR 0 12
46627: PUSH
46628: CALL_OW 44
46632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46633: LD_VAR 0 12
46637: PPUSH
46638: LD_VAR 0 8
46642: PPUSH
46643: LD_INT 0
46645: PPUSH
46646: CALL 48439 0 3
// end ;
46650: GO 46548
46652: POP
46653: POP
// if enchidnas then
46654: LD_VAR 0 4
46658: IFFALSE 46725
// for i = 1 to enchidnas do
46660: LD_ADDR_VAR 0 11
46664: PUSH
46665: DOUBLE
46666: LD_INT 1
46668: DEC
46669: ST_TO_ADDR
46670: LD_VAR 0 4
46674: PUSH
46675: FOR_TO
46676: IFFALSE 46723
// begin hc_class = 13 ;
46678: LD_ADDR_OWVAR 28
46682: PUSH
46683: LD_INT 13
46685: ST_TO_ADDR
// hc_gallery =  ;
46686: LD_ADDR_OWVAR 33
46690: PUSH
46691: LD_STRING 
46693: ST_TO_ADDR
// animal := CreateHuman ;
46694: LD_ADDR_VAR 0 12
46698: PUSH
46699: CALL_OW 44
46703: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46704: LD_VAR 0 12
46708: PPUSH
46709: LD_VAR 0 8
46713: PPUSH
46714: LD_INT 0
46716: PPUSH
46717: CALL 48439 0 3
// end ;
46721: GO 46675
46723: POP
46724: POP
// if fishes then
46725: LD_VAR 0 7
46729: IFFALSE 46796
// for i = 1 to fishes do
46731: LD_ADDR_VAR 0 11
46735: PUSH
46736: DOUBLE
46737: LD_INT 1
46739: DEC
46740: ST_TO_ADDR
46741: LD_VAR 0 7
46745: PUSH
46746: FOR_TO
46747: IFFALSE 46794
// begin hc_class = 20 ;
46749: LD_ADDR_OWVAR 28
46753: PUSH
46754: LD_INT 20
46756: ST_TO_ADDR
// hc_gallery =  ;
46757: LD_ADDR_OWVAR 33
46761: PUSH
46762: LD_STRING 
46764: ST_TO_ADDR
// animal := CreateHuman ;
46765: LD_ADDR_VAR 0 12
46769: PUSH
46770: CALL_OW 44
46774: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46775: LD_VAR 0 12
46779: PPUSH
46780: LD_VAR 0 9
46784: PPUSH
46785: LD_INT 0
46787: PPUSH
46788: CALL 48439 0 3
// end ;
46792: GO 46746
46794: POP
46795: POP
// end ;
46796: LD_VAR 0 10
46800: RET
// export function WantHeal ( sci , unit ) ; begin
46801: LD_INT 0
46803: PPUSH
// if GetTaskList ( sci ) > 0 then
46804: LD_VAR 0 1
46808: PPUSH
46809: CALL_OW 437
46813: PUSH
46814: LD_INT 0
46816: GREATER
46817: IFFALSE 46889
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46819: LD_VAR 0 1
46823: PPUSH
46824: CALL_OW 437
46828: PUSH
46829: LD_INT 1
46831: ARRAY
46832: PUSH
46833: LD_INT 1
46835: ARRAY
46836: PUSH
46837: LD_STRING l
46839: EQUAL
46840: IFFALSE 46867
46842: PUSH
46843: LD_VAR 0 1
46847: PPUSH
46848: CALL_OW 437
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: PUSH
46857: LD_INT 4
46859: ARRAY
46860: PUSH
46861: LD_VAR 0 2
46865: EQUAL
46866: AND
46867: IFFALSE 46879
// result := true else
46869: LD_ADDR_VAR 0 3
46873: PUSH
46874: LD_INT 1
46876: ST_TO_ADDR
46877: GO 46887
// result := false ;
46879: LD_ADDR_VAR 0 3
46883: PUSH
46884: LD_INT 0
46886: ST_TO_ADDR
// end else
46887: GO 46897
// result := false ;
46889: LD_ADDR_VAR 0 3
46893: PUSH
46894: LD_INT 0
46896: ST_TO_ADDR
// end ;
46897: LD_VAR 0 3
46901: RET
// export function HealTarget ( sci ) ; begin
46902: LD_INT 0
46904: PPUSH
// if not sci then
46905: LD_VAR 0 1
46909: NOT
46910: IFFALSE 46914
// exit ;
46912: GO 46979
// result := 0 ;
46914: LD_ADDR_VAR 0 2
46918: PUSH
46919: LD_INT 0
46921: ST_TO_ADDR
// if GetTaskList ( sci ) then
46922: LD_VAR 0 1
46926: PPUSH
46927: CALL_OW 437
46931: IFFALSE 46979
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46933: LD_VAR 0 1
46937: PPUSH
46938: CALL_OW 437
46942: PUSH
46943: LD_INT 1
46945: ARRAY
46946: PUSH
46947: LD_INT 1
46949: ARRAY
46950: PUSH
46951: LD_STRING l
46953: EQUAL
46954: IFFALSE 46979
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46956: LD_ADDR_VAR 0 2
46960: PUSH
46961: LD_VAR 0 1
46965: PPUSH
46966: CALL_OW 437
46970: PUSH
46971: LD_INT 1
46973: ARRAY
46974: PUSH
46975: LD_INT 4
46977: ARRAY
46978: ST_TO_ADDR
// end ;
46979: LD_VAR 0 2
46983: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46984: LD_INT 0
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
// if not base_units then
46990: LD_VAR 0 1
46994: NOT
46995: IFFALSE 46999
// exit ;
46997: GO 47086
// result := false ;
46999: LD_ADDR_VAR 0 2
47003: PUSH
47004: LD_INT 0
47006: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47007: LD_ADDR_VAR 0 5
47011: PUSH
47012: LD_VAR 0 1
47016: PPUSH
47017: LD_INT 21
47019: PUSH
47020: LD_INT 3
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PPUSH
47027: CALL_OW 72
47031: ST_TO_ADDR
// if not tmp then
47032: LD_VAR 0 5
47036: NOT
47037: IFFALSE 47041
// exit ;
47039: GO 47086
// for i in tmp do
47041: LD_ADDR_VAR 0 3
47045: PUSH
47046: LD_VAR 0 5
47050: PUSH
47051: FOR_IN
47052: IFFALSE 47084
// begin result := EnemyInRange ( i , 22 ) ;
47054: LD_ADDR_VAR 0 2
47058: PUSH
47059: LD_VAR 0 3
47063: PPUSH
47064: LD_INT 22
47066: PPUSH
47067: CALL 44501 0 2
47071: ST_TO_ADDR
// if result then
47072: LD_VAR 0 2
47076: IFFALSE 47082
// exit ;
47078: POP
47079: POP
47080: GO 47086
// end ;
47082: GO 47051
47084: POP
47085: POP
// end ;
47086: LD_VAR 0 2
47090: RET
// export function FilterByTag ( units , tag ) ; begin
47091: LD_INT 0
47093: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47094: LD_ADDR_VAR 0 3
47098: PUSH
47099: LD_VAR 0 1
47103: PPUSH
47104: LD_INT 120
47106: PUSH
47107: LD_VAR 0 2
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PPUSH
47116: CALL_OW 72
47120: ST_TO_ADDR
// end ;
47121: LD_VAR 0 3
47125: RET
// export function IsDriver ( un ) ; begin
47126: LD_INT 0
47128: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47129: LD_ADDR_VAR 0 2
47133: PUSH
47134: LD_VAR 0 1
47138: PUSH
47139: LD_INT 55
47141: PUSH
47142: EMPTY
47143: LIST
47144: PPUSH
47145: CALL_OW 69
47149: IN
47150: ST_TO_ADDR
// end ;
47151: LD_VAR 0 2
47155: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47156: LD_INT 0
47158: PPUSH
47159: PPUSH
// list := [ ] ;
47160: LD_ADDR_VAR 0 5
47164: PUSH
47165: EMPTY
47166: ST_TO_ADDR
// case d of 0 :
47167: LD_VAR 0 3
47171: PUSH
47172: LD_INT 0
47174: DOUBLE
47175: EQUAL
47176: IFTRUE 47180
47178: GO 47313
47180: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47181: LD_ADDR_VAR 0 5
47185: PUSH
47186: LD_VAR 0 1
47190: PUSH
47191: LD_INT 4
47193: MINUS
47194: PUSH
47195: LD_VAR 0 2
47199: PUSH
47200: LD_INT 4
47202: MINUS
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: LIST
47211: PUSH
47212: LD_VAR 0 1
47216: PUSH
47217: LD_INT 3
47219: MINUS
47220: PUSH
47221: LD_VAR 0 2
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: PUSH
47234: LD_VAR 0 1
47238: PUSH
47239: LD_INT 4
47241: PLUS
47242: PUSH
47243: LD_VAR 0 2
47247: PUSH
47248: LD_INT 4
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: PUSH
47256: LD_VAR 0 1
47260: PUSH
47261: LD_INT 3
47263: PLUS
47264: PUSH
47265: LD_VAR 0 2
47269: PUSH
47270: LD_INT 3
47272: PLUS
47273: PUSH
47274: LD_INT 5
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: PUSH
47282: LD_VAR 0 1
47286: PUSH
47287: LD_VAR 0 2
47291: PUSH
47292: LD_INT 4
47294: PLUS
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: ST_TO_ADDR
// end ; 1 :
47311: GO 48011
47313: LD_INT 1
47315: DOUBLE
47316: EQUAL
47317: IFTRUE 47321
47319: GO 47454
47321: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47322: LD_ADDR_VAR 0 5
47326: PUSH
47327: LD_VAR 0 1
47331: PUSH
47332: LD_VAR 0 2
47336: PUSH
47337: LD_INT 4
47339: MINUS
47340: PUSH
47341: LD_INT 3
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: PUSH
47349: LD_VAR 0 1
47353: PUSH
47354: LD_INT 3
47356: MINUS
47357: PUSH
47358: LD_VAR 0 2
47362: PUSH
47363: LD_INT 3
47365: MINUS
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: PUSH
47375: LD_VAR 0 1
47379: PUSH
47380: LD_INT 4
47382: MINUS
47383: PUSH
47384: LD_VAR 0 2
47388: PUSH
47389: LD_INT 1
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: PUSH
47397: LD_VAR 0 1
47401: PUSH
47402: LD_VAR 0 2
47406: PUSH
47407: LD_INT 3
47409: PLUS
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: PUSH
47419: LD_VAR 0 1
47423: PUSH
47424: LD_INT 4
47426: PLUS
47427: PUSH
47428: LD_VAR 0 2
47432: PUSH
47433: LD_INT 4
47435: PLUS
47436: PUSH
47437: LD_INT 5
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// end ; 2 :
47452: GO 48011
47454: LD_INT 2
47456: DOUBLE
47457: EQUAL
47458: IFTRUE 47462
47460: GO 47591
47462: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47463: LD_ADDR_VAR 0 5
47467: PUSH
47468: LD_VAR 0 1
47472: PUSH
47473: LD_VAR 0 2
47477: PUSH
47478: LD_INT 3
47480: MINUS
47481: PUSH
47482: LD_INT 3
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: LIST
47489: PUSH
47490: LD_VAR 0 1
47494: PUSH
47495: LD_INT 4
47497: PLUS
47498: PUSH
47499: LD_VAR 0 2
47503: PUSH
47504: LD_INT 4
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: LIST
47511: PUSH
47512: LD_VAR 0 1
47516: PUSH
47517: LD_VAR 0 2
47521: PUSH
47522: LD_INT 4
47524: PLUS
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: PUSH
47534: LD_VAR 0 1
47538: PUSH
47539: LD_INT 3
47541: MINUS
47542: PUSH
47543: LD_VAR 0 2
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: LIST
47555: PUSH
47556: LD_VAR 0 1
47560: PUSH
47561: LD_INT 4
47563: MINUS
47564: PUSH
47565: LD_VAR 0 2
47569: PUSH
47570: LD_INT 4
47572: MINUS
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: LIST
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: ST_TO_ADDR
// end ; 3 :
47589: GO 48011
47591: LD_INT 3
47593: DOUBLE
47594: EQUAL
47595: IFTRUE 47599
47597: GO 47732
47599: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47600: LD_ADDR_VAR 0 5
47604: PUSH
47605: LD_VAR 0 1
47609: PUSH
47610: LD_INT 3
47612: PLUS
47613: PUSH
47614: LD_VAR 0 2
47618: PUSH
47619: LD_INT 4
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: PUSH
47627: LD_VAR 0 1
47631: PUSH
47632: LD_INT 4
47634: PLUS
47635: PUSH
47636: LD_VAR 0 2
47640: PUSH
47641: LD_INT 4
47643: PLUS
47644: PUSH
47645: LD_INT 5
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: PUSH
47653: LD_VAR 0 1
47657: PUSH
47658: LD_INT 4
47660: MINUS
47661: PUSH
47662: LD_VAR 0 2
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: PUSH
47675: LD_VAR 0 1
47679: PUSH
47680: LD_VAR 0 2
47684: PUSH
47685: LD_INT 4
47687: MINUS
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: PUSH
47697: LD_VAR 0 1
47701: PUSH
47702: LD_INT 3
47704: MINUS
47705: PUSH
47706: LD_VAR 0 2
47710: PUSH
47711: LD_INT 3
47713: MINUS
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: ST_TO_ADDR
// end ; 4 :
47730: GO 48011
47732: LD_INT 4
47734: DOUBLE
47735: EQUAL
47736: IFTRUE 47740
47738: GO 47873
47740: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47741: LD_ADDR_VAR 0 5
47745: PUSH
47746: LD_VAR 0 1
47750: PUSH
47751: LD_VAR 0 2
47755: PUSH
47756: LD_INT 4
47758: PLUS
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: PUSH
47768: LD_VAR 0 1
47772: PUSH
47773: LD_INT 3
47775: PLUS
47776: PUSH
47777: LD_VAR 0 2
47781: PUSH
47782: LD_INT 3
47784: PLUS
47785: PUSH
47786: LD_INT 5
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: PUSH
47794: LD_VAR 0 1
47798: PUSH
47799: LD_INT 4
47801: PLUS
47802: PUSH
47803: LD_VAR 0 2
47807: PUSH
47808: LD_INT 4
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: PUSH
47816: LD_VAR 0 1
47820: PUSH
47821: LD_VAR 0 2
47825: PUSH
47826: LD_INT 3
47828: MINUS
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: LIST
47837: PUSH
47838: LD_VAR 0 1
47842: PUSH
47843: LD_INT 4
47845: MINUS
47846: PUSH
47847: LD_VAR 0 2
47851: PUSH
47852: LD_INT 4
47854: MINUS
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: LIST
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: ST_TO_ADDR
// end ; 5 :
47871: GO 48011
47873: LD_INT 5
47875: DOUBLE
47876: EQUAL
47877: IFTRUE 47881
47879: GO 48010
47881: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47882: LD_ADDR_VAR 0 5
47886: PUSH
47887: LD_VAR 0 1
47891: PUSH
47892: LD_INT 4
47894: MINUS
47895: PUSH
47896: LD_VAR 0 2
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: LIST
47908: PUSH
47909: LD_VAR 0 1
47913: PUSH
47914: LD_VAR 0 2
47918: PUSH
47919: LD_INT 4
47921: MINUS
47922: PUSH
47923: LD_INT 3
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: LIST
47930: PUSH
47931: LD_VAR 0 1
47935: PUSH
47936: LD_INT 4
47938: PLUS
47939: PUSH
47940: LD_VAR 0 2
47944: PUSH
47945: LD_INT 4
47947: PLUS
47948: PUSH
47949: LD_INT 5
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: LIST
47956: PUSH
47957: LD_VAR 0 1
47961: PUSH
47962: LD_INT 3
47964: PLUS
47965: PUSH
47966: LD_VAR 0 2
47970: PUSH
47971: LD_INT 4
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: PUSH
47979: LD_VAR 0 1
47983: PUSH
47984: LD_VAR 0 2
47988: PUSH
47989: LD_INT 3
47991: PLUS
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: LIST
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: ST_TO_ADDR
// end ; end ;
48008: GO 48011
48010: POP
// result := list ;
48011: LD_ADDR_VAR 0 4
48015: PUSH
48016: LD_VAR 0 5
48020: ST_TO_ADDR
// end ;
48021: LD_VAR 0 4
48025: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48026: LD_INT 0
48028: PPUSH
48029: PPUSH
48030: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48031: LD_VAR 0 1
48035: NOT
48036: IFTRUE 48064
48038: PUSH
48039: LD_VAR 0 2
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: LD_INT 4
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: IN
48062: NOT
48063: OR
48064: IFFALSE 48068
// exit ;
48066: GO 48151
// tmp := [ ] ;
48068: LD_ADDR_VAR 0 5
48072: PUSH
48073: EMPTY
48074: ST_TO_ADDR
// for i in units do
48075: LD_ADDR_VAR 0 4
48079: PUSH
48080: LD_VAR 0 1
48084: PUSH
48085: FOR_IN
48086: IFFALSE 48120
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48088: LD_ADDR_VAR 0 5
48092: PUSH
48093: LD_VAR 0 5
48097: PPUSH
48098: LD_VAR 0 4
48102: PPUSH
48103: LD_VAR 0 2
48107: PPUSH
48108: CALL_OW 259
48112: PPUSH
48113: CALL 49546 0 2
48117: ST_TO_ADDR
48118: GO 48085
48120: POP
48121: POP
// if not tmp then
48122: LD_VAR 0 5
48126: NOT
48127: IFFALSE 48131
// exit ;
48129: GO 48151
// result := SortListByListDesc ( units , tmp ) ;
48131: LD_ADDR_VAR 0 3
48135: PUSH
48136: LD_VAR 0 1
48140: PPUSH
48141: LD_VAR 0 5
48145: PPUSH
48146: CALL_OW 77
48150: ST_TO_ADDR
// end ;
48151: LD_VAR 0 3
48155: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48156: LD_INT 0
48158: PPUSH
48159: PPUSH
48160: PPUSH
// result := false ;
48161: LD_ADDR_VAR 0 3
48165: PUSH
48166: LD_INT 0
48168: ST_TO_ADDR
// if not building then
48169: LD_VAR 0 2
48173: NOT
48174: IFFALSE 48178
// exit ;
48176: GO 48322
// x := GetX ( building ) ;
48178: LD_ADDR_VAR 0 4
48182: PUSH
48183: LD_VAR 0 2
48187: PPUSH
48188: CALL_OW 250
48192: ST_TO_ADDR
// y := GetY ( building ) ;
48193: LD_ADDR_VAR 0 5
48197: PUSH
48198: LD_VAR 0 2
48202: PPUSH
48203: CALL_OW 251
48207: ST_TO_ADDR
// if not x or not y then
48208: LD_VAR 0 4
48212: NOT
48213: IFTRUE 48222
48215: PUSH
48216: LD_VAR 0 5
48220: NOT
48221: OR
48222: IFFALSE 48226
// exit ;
48224: GO 48322
// if GetTaskList ( unit ) then
48226: LD_VAR 0 1
48230: PPUSH
48231: CALL_OW 437
48235: IFFALSE 48322
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48237: LD_STRING e
48239: PUSH
48240: LD_VAR 0 1
48244: PPUSH
48245: CALL_OW 437
48249: PUSH
48250: LD_INT 1
48252: ARRAY
48253: PUSH
48254: LD_INT 1
48256: ARRAY
48257: EQUAL
48258: IFFALSE 48285
48260: PUSH
48261: LD_VAR 0 4
48265: PUSH
48266: LD_VAR 0 1
48270: PPUSH
48271: CALL_OW 437
48275: PUSH
48276: LD_INT 1
48278: ARRAY
48279: PUSH
48280: LD_INT 2
48282: ARRAY
48283: EQUAL
48284: AND
48285: IFFALSE 48312
48287: PUSH
48288: LD_VAR 0 5
48292: PUSH
48293: LD_VAR 0 1
48297: PPUSH
48298: CALL_OW 437
48302: PUSH
48303: LD_INT 1
48305: ARRAY
48306: PUSH
48307: LD_INT 3
48309: ARRAY
48310: EQUAL
48311: AND
48312: IFFALSE 48322
// result := true end ;
48314: LD_ADDR_VAR 0 3
48318: PUSH
48319: LD_INT 1
48321: ST_TO_ADDR
// end ;
48322: LD_VAR 0 3
48326: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48327: LD_INT 0
48329: PPUSH
// result := false ;
48330: LD_ADDR_VAR 0 4
48334: PUSH
48335: LD_INT 0
48337: ST_TO_ADDR
// if GetTaskList ( unit ) then
48338: LD_VAR 0 1
48342: PPUSH
48343: CALL_OW 437
48347: IFFALSE 48434
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48349: LD_STRING M
48351: PUSH
48352: LD_VAR 0 1
48356: PPUSH
48357: CALL_OW 437
48361: PUSH
48362: LD_INT 1
48364: ARRAY
48365: PUSH
48366: LD_INT 1
48368: ARRAY
48369: EQUAL
48370: IFFALSE 48397
48372: PUSH
48373: LD_VAR 0 2
48377: PUSH
48378: LD_VAR 0 1
48382: PPUSH
48383: CALL_OW 437
48387: PUSH
48388: LD_INT 1
48390: ARRAY
48391: PUSH
48392: LD_INT 2
48394: ARRAY
48395: EQUAL
48396: AND
48397: IFFALSE 48424
48399: PUSH
48400: LD_VAR 0 3
48404: PUSH
48405: LD_VAR 0 1
48409: PPUSH
48410: CALL_OW 437
48414: PUSH
48415: LD_INT 1
48417: ARRAY
48418: PUSH
48419: LD_INT 3
48421: ARRAY
48422: EQUAL
48423: AND
48424: IFFALSE 48434
// result := true ;
48426: LD_ADDR_VAR 0 4
48430: PUSH
48431: LD_INT 1
48433: ST_TO_ADDR
// end ; end ;
48434: LD_VAR 0 4
48438: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48439: LD_INT 0
48441: PPUSH
48442: PPUSH
48443: PPUSH
48444: PPUSH
// if not unit or not area then
48445: LD_VAR 0 1
48449: NOT
48450: IFTRUE 48459
48452: PUSH
48453: LD_VAR 0 2
48457: NOT
48458: OR
48459: IFFALSE 48463
// exit ;
48461: GO 48639
// tmp := AreaToList ( area , i ) ;
48463: LD_ADDR_VAR 0 6
48467: PUSH
48468: LD_VAR 0 2
48472: PPUSH
48473: LD_VAR 0 5
48477: PPUSH
48478: CALL_OW 517
48482: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48483: LD_ADDR_VAR 0 5
48487: PUSH
48488: DOUBLE
48489: LD_INT 1
48491: DEC
48492: ST_TO_ADDR
48493: LD_VAR 0 6
48497: PUSH
48498: LD_INT 1
48500: ARRAY
48501: PUSH
48502: FOR_TO
48503: IFFALSE 48637
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48505: LD_ADDR_VAR 0 7
48509: PUSH
48510: LD_VAR 0 6
48514: PUSH
48515: LD_INT 1
48517: ARRAY
48518: PUSH
48519: LD_VAR 0 5
48523: ARRAY
48524: PUSH
48525: LD_VAR 0 6
48529: PUSH
48530: LD_INT 2
48532: ARRAY
48533: PUSH
48534: LD_VAR 0 5
48538: ARRAY
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48544: LD_INT 92
48546: PUSH
48547: LD_VAR 0 7
48551: PUSH
48552: LD_INT 1
48554: ARRAY
48555: PUSH
48556: LD_VAR 0 7
48560: PUSH
48561: LD_INT 2
48563: ARRAY
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: PPUSH
48574: CALL_OW 69
48578: PUSH
48579: LD_INT 0
48581: EQUAL
48582: IFFALSE 48635
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48584: LD_VAR 0 1
48588: PPUSH
48589: LD_VAR 0 7
48593: PUSH
48594: LD_INT 1
48596: ARRAY
48597: PPUSH
48598: LD_VAR 0 7
48602: PUSH
48603: LD_INT 2
48605: ARRAY
48606: PPUSH
48607: LD_VAR 0 3
48611: PPUSH
48612: CALL_OW 48
// result := IsPlaced ( unit ) ;
48616: LD_ADDR_VAR 0 4
48620: PUSH
48621: LD_VAR 0 1
48625: PPUSH
48626: CALL_OW 305
48630: ST_TO_ADDR
// exit ;
48631: POP
48632: POP
48633: GO 48639
// end ; end ;
48635: GO 48502
48637: POP
48638: POP
// end ;
48639: LD_VAR 0 4
48643: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48644: LD_INT 0
48646: PPUSH
48647: PPUSH
48648: PPUSH
// if not side or side > 8 then
48649: LD_VAR 0 1
48653: NOT
48654: IFTRUE 48666
48656: PUSH
48657: LD_VAR 0 1
48661: PUSH
48662: LD_INT 8
48664: GREATER
48665: OR
48666: IFFALSE 48670
// exit ;
48668: GO 48857
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48670: LD_ADDR_VAR 0 4
48674: PUSH
48675: LD_INT 22
48677: PUSH
48678: LD_VAR 0 1
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 21
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PPUSH
48701: CALL_OW 69
48705: ST_TO_ADDR
// if not tmp then
48706: LD_VAR 0 4
48710: NOT
48711: IFFALSE 48715
// exit ;
48713: GO 48857
// enable_addtolog := true ;
48715: LD_ADDR_OWVAR 81
48719: PUSH
48720: LD_INT 1
48722: ST_TO_ADDR
// AddToLog ( [ ) ;
48723: LD_STRING [
48725: PPUSH
48726: CALL_OW 561
// for i in tmp do
48730: LD_ADDR_VAR 0 3
48734: PUSH
48735: LD_VAR 0 4
48739: PUSH
48740: FOR_IN
48741: IFFALSE 48848
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48743: LD_STRING [
48745: PUSH
48746: LD_VAR 0 3
48750: PPUSH
48751: CALL_OW 266
48755: STR
48756: PUSH
48757: LD_STRING , 
48759: STR
48760: PUSH
48761: LD_VAR 0 3
48765: PPUSH
48766: CALL_OW 250
48770: STR
48771: PUSH
48772: LD_STRING , 
48774: STR
48775: PUSH
48776: LD_VAR 0 3
48780: PPUSH
48781: CALL_OW 251
48785: STR
48786: PUSH
48787: LD_STRING , 
48789: STR
48790: PUSH
48791: LD_VAR 0 3
48795: PPUSH
48796: CALL_OW 254
48800: STR
48801: PUSH
48802: LD_STRING , 
48804: STR
48805: PUSH
48806: LD_VAR 0 3
48810: PPUSH
48811: LD_INT 1
48813: PPUSH
48814: CALL_OW 268
48818: STR
48819: PUSH
48820: LD_STRING , 
48822: STR
48823: PUSH
48824: LD_VAR 0 3
48828: PPUSH
48829: LD_INT 2
48831: PPUSH
48832: CALL_OW 268
48836: STR
48837: PUSH
48838: LD_STRING ],
48840: STR
48841: PPUSH
48842: CALL_OW 561
// end ;
48846: GO 48740
48848: POP
48849: POP
// AddToLog ( ]; ) ;
48850: LD_STRING ];
48852: PPUSH
48853: CALL_OW 561
// end ;
48857: LD_VAR 0 2
48861: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48862: LD_INT 0
48864: PPUSH
48865: PPUSH
48866: PPUSH
48867: PPUSH
48868: PPUSH
// if not area or not rate or not max then
48869: LD_VAR 0 1
48873: NOT
48874: IFTRUE 48883
48876: PUSH
48877: LD_VAR 0 2
48881: NOT
48882: OR
48883: IFTRUE 48892
48885: PUSH
48886: LD_VAR 0 4
48890: NOT
48891: OR
48892: IFFALSE 48896
// exit ;
48894: GO 49085
// while 1 do
48896: LD_INT 1
48898: IFFALSE 49085
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48900: LD_ADDR_VAR 0 9
48904: PUSH
48905: LD_VAR 0 1
48909: PPUSH
48910: LD_INT 1
48912: PPUSH
48913: CALL_OW 287
48917: PUSH
48918: LD_INT 10
48920: MUL
48921: ST_TO_ADDR
// r := rate / 10 ;
48922: LD_ADDR_VAR 0 7
48926: PUSH
48927: LD_VAR 0 2
48931: PUSH
48932: LD_INT 10
48934: DIVREAL
48935: ST_TO_ADDR
// time := 1 1$00 ;
48936: LD_ADDR_VAR 0 8
48940: PUSH
48941: LD_INT 2100
48943: ST_TO_ADDR
// if amount < min then
48944: LD_VAR 0 9
48948: PUSH
48949: LD_VAR 0 3
48953: LESS
48954: IFFALSE 48972
// r := r * 2 else
48956: LD_ADDR_VAR 0 7
48960: PUSH
48961: LD_VAR 0 7
48965: PUSH
48966: LD_INT 2
48968: MUL
48969: ST_TO_ADDR
48970: GO 48998
// if amount > max then
48972: LD_VAR 0 9
48976: PUSH
48977: LD_VAR 0 4
48981: GREATER
48982: IFFALSE 48998
// r := r / 2 ;
48984: LD_ADDR_VAR 0 7
48988: PUSH
48989: LD_VAR 0 7
48993: PUSH
48994: LD_INT 2
48996: DIVREAL
48997: ST_TO_ADDR
// time := time / r ;
48998: LD_ADDR_VAR 0 8
49002: PUSH
49003: LD_VAR 0 8
49007: PUSH
49008: LD_VAR 0 7
49012: DIVREAL
49013: ST_TO_ADDR
// if time < 0 then
49014: LD_VAR 0 8
49018: PUSH
49019: LD_INT 0
49021: LESS
49022: IFFALSE 49039
// time := time * - 1 ;
49024: LD_ADDR_VAR 0 8
49028: PUSH
49029: LD_VAR 0 8
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: MUL
49038: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49039: LD_VAR 0 8
49043: PUSH
49044: LD_INT 35
49046: PPUSH
49047: LD_INT 875
49049: PPUSH
49050: CALL_OW 12
49054: PLUS
49055: PPUSH
49056: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49060: LD_INT 1
49062: PPUSH
49063: LD_INT 5
49065: PPUSH
49066: CALL_OW 12
49070: PPUSH
49071: LD_VAR 0 1
49075: PPUSH
49076: LD_INT 1
49078: PPUSH
49079: CALL_OW 55
// end ;
49083: GO 48896
// end ;
49085: LD_VAR 0 5
49089: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49090: LD_INT 0
49092: PPUSH
49093: PPUSH
49094: PPUSH
49095: PPUSH
49096: PPUSH
49097: PPUSH
49098: PPUSH
49099: PPUSH
// if not turrets or not factories then
49100: LD_VAR 0 1
49104: NOT
49105: IFTRUE 49114
49107: PUSH
49108: LD_VAR 0 2
49112: NOT
49113: OR
49114: IFFALSE 49118
// exit ;
49116: GO 49425
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49118: LD_ADDR_VAR 0 10
49122: PUSH
49123: LD_INT 5
49125: PUSH
49126: LD_INT 6
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: LD_INT 4
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 3
49145: PUSH
49146: LD_INT 5
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 24
49160: PUSH
49161: LD_INT 25
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 23
49170: PUSH
49171: LD_INT 27
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 42
49184: PUSH
49185: LD_INT 43
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 44
49194: PUSH
49195: LD_INT 46
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 45
49204: PUSH
49205: LD_INT 47
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: LIST
49221: ST_TO_ADDR
// result := [ ] ;
49222: LD_ADDR_VAR 0 3
49226: PUSH
49227: EMPTY
49228: ST_TO_ADDR
// for i in turrets do
49229: LD_ADDR_VAR 0 4
49233: PUSH
49234: LD_VAR 0 1
49238: PUSH
49239: FOR_IN
49240: IFFALSE 49423
// begin nat := GetNation ( i ) ;
49242: LD_ADDR_VAR 0 7
49246: PUSH
49247: LD_VAR 0 4
49251: PPUSH
49252: CALL_OW 248
49256: ST_TO_ADDR
// weapon := 0 ;
49257: LD_ADDR_VAR 0 8
49261: PUSH
49262: LD_INT 0
49264: ST_TO_ADDR
// if not nat then
49265: LD_VAR 0 7
49269: NOT
49270: IFFALSE 49274
// continue ;
49272: GO 49239
// for j in list [ nat ] do
49274: LD_ADDR_VAR 0 5
49278: PUSH
49279: LD_VAR 0 10
49283: PUSH
49284: LD_VAR 0 7
49288: ARRAY
49289: PUSH
49290: FOR_IN
49291: IFFALSE 49332
// if GetBWeapon ( i ) = j [ 1 ] then
49293: LD_VAR 0 4
49297: PPUSH
49298: CALL_OW 269
49302: PUSH
49303: LD_VAR 0 5
49307: PUSH
49308: LD_INT 1
49310: ARRAY
49311: EQUAL
49312: IFFALSE 49330
// begin weapon := j [ 2 ] ;
49314: LD_ADDR_VAR 0 8
49318: PUSH
49319: LD_VAR 0 5
49323: PUSH
49324: LD_INT 2
49326: ARRAY
49327: ST_TO_ADDR
// break ;
49328: GO 49332
// end ;
49330: GO 49290
49332: POP
49333: POP
// if not weapon then
49334: LD_VAR 0 8
49338: NOT
49339: IFFALSE 49343
// continue ;
49341: GO 49239
// for k in factories do
49343: LD_ADDR_VAR 0 6
49347: PUSH
49348: LD_VAR 0 2
49352: PUSH
49353: FOR_IN
49354: IFFALSE 49419
// begin weapons := AvailableWeaponList ( k ) ;
49356: LD_ADDR_VAR 0 9
49360: PUSH
49361: LD_VAR 0 6
49365: PPUSH
49366: CALL_OW 478
49370: ST_TO_ADDR
// if not weapons then
49371: LD_VAR 0 9
49375: NOT
49376: IFFALSE 49380
// continue ;
49378: GO 49353
// if weapon in weapons then
49380: LD_VAR 0 8
49384: PUSH
49385: LD_VAR 0 9
49389: IN
49390: IFFALSE 49417
// begin result := [ i , weapon ] ;
49392: LD_ADDR_VAR 0 3
49396: PUSH
49397: LD_VAR 0 4
49401: PUSH
49402: LD_VAR 0 8
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: ST_TO_ADDR
// exit ;
49411: POP
49412: POP
49413: POP
49414: POP
49415: GO 49425
// end ; end ;
49417: GO 49353
49419: POP
49420: POP
// end ;
49421: GO 49239
49423: POP
49424: POP
// end ;
49425: LD_VAR 0 3
49429: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49430: LD_INT 0
49432: PPUSH
// if not side or side > 8 then
49433: LD_VAR 0 3
49437: NOT
49438: IFTRUE 49450
49440: PUSH
49441: LD_VAR 0 3
49445: PUSH
49446: LD_INT 8
49448: GREATER
49449: OR
49450: IFFALSE 49454
// exit ;
49452: GO 49513
// if not range then
49454: LD_VAR 0 4
49458: NOT
49459: IFFALSE 49470
// range := - 12 ;
49461: LD_ADDR_VAR 0 4
49465: PUSH
49466: LD_INT 12
49468: NEG
49469: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49470: LD_VAR 0 1
49474: PPUSH
49475: LD_VAR 0 2
49479: PPUSH
49480: LD_VAR 0 3
49484: PPUSH
49485: LD_VAR 0 4
49489: PPUSH
49490: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49494: LD_VAR 0 1
49498: PPUSH
49499: LD_VAR 0 2
49503: PPUSH
49504: LD_VAR 0 3
49508: PPUSH
49509: CALL_OW 331
// end ;
49513: LD_VAR 0 5
49517: RET
// export function Video ( mode ) ; begin
49518: LD_INT 0
49520: PPUSH
// ingame_video = mode ;
49521: LD_ADDR_OWVAR 52
49525: PUSH
49526: LD_VAR 0 1
49530: ST_TO_ADDR
// interface_hidden = mode ;
49531: LD_ADDR_OWVAR 54
49535: PUSH
49536: LD_VAR 0 1
49540: ST_TO_ADDR
// end ;
49541: LD_VAR 0 2
49545: RET
// export function Join ( array , element ) ; begin
49546: LD_INT 0
49548: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49549: LD_ADDR_VAR 0 3
49553: PUSH
49554: LD_VAR 0 1
49558: PPUSH
49559: LD_VAR 0 1
49563: PUSH
49564: LD_INT 1
49566: PLUS
49567: PPUSH
49568: LD_VAR 0 2
49572: PPUSH
49573: CALL_OW 1
49577: ST_TO_ADDR
// end ;
49578: LD_VAR 0 3
49582: RET
// export function JoinUnion ( array , element ) ; begin
49583: LD_INT 0
49585: PPUSH
// result := array union element ;
49586: LD_ADDR_VAR 0 3
49590: PUSH
49591: LD_VAR 0 1
49595: PUSH
49596: LD_VAR 0 2
49600: UNION
49601: ST_TO_ADDR
// end ;
49602: LD_VAR 0 3
49606: RET
// export function GetBehemoths ( side ) ; begin
49607: LD_INT 0
49609: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49610: LD_ADDR_VAR 0 2
49614: PUSH
49615: LD_INT 22
49617: PUSH
49618: LD_VAR 0 1
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 31
49629: PUSH
49630: LD_INT 25
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PPUSH
49641: CALL_OW 69
49645: ST_TO_ADDR
// end ;
49646: LD_VAR 0 2
49650: RET
// export function Shuffle ( array ) ; var i , index ; begin
49651: LD_INT 0
49653: PPUSH
49654: PPUSH
49655: PPUSH
// result := [ ] ;
49656: LD_ADDR_VAR 0 2
49660: PUSH
49661: EMPTY
49662: ST_TO_ADDR
// if not array then
49663: LD_VAR 0 1
49667: NOT
49668: IFFALSE 49672
// exit ;
49670: GO 49771
// Randomize ;
49672: CALL_OW 10
// for i = array downto 1 do
49676: LD_ADDR_VAR 0 3
49680: PUSH
49681: DOUBLE
49682: LD_VAR 0 1
49686: INC
49687: ST_TO_ADDR
49688: LD_INT 1
49690: PUSH
49691: FOR_DOWNTO
49692: IFFALSE 49769
// begin index := rand ( 1 , array ) ;
49694: LD_ADDR_VAR 0 4
49698: PUSH
49699: LD_INT 1
49701: PPUSH
49702: LD_VAR 0 1
49706: PPUSH
49707: CALL_OW 12
49711: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49712: LD_ADDR_VAR 0 2
49716: PUSH
49717: LD_VAR 0 2
49721: PPUSH
49722: LD_VAR 0 2
49726: PUSH
49727: LD_INT 1
49729: PLUS
49730: PPUSH
49731: LD_VAR 0 1
49735: PUSH
49736: LD_VAR 0 4
49740: ARRAY
49741: PPUSH
49742: CALL_OW 2
49746: ST_TO_ADDR
// array := Delete ( array , index ) ;
49747: LD_ADDR_VAR 0 1
49751: PUSH
49752: LD_VAR 0 1
49756: PPUSH
49757: LD_VAR 0 4
49761: PPUSH
49762: CALL_OW 3
49766: ST_TO_ADDR
// end ;
49767: GO 49691
49769: POP
49770: POP
// end ;
49771: LD_VAR 0 2
49775: RET
// export function GetBaseMaterials ( base ) ; begin
49776: LD_INT 0
49778: PPUSH
// result := [ 0 , 0 , 0 ] ;
49779: LD_ADDR_VAR 0 2
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// if not base then
49798: LD_VAR 0 1
49802: NOT
49803: IFFALSE 49807
// exit ;
49805: GO 49856
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49807: LD_ADDR_VAR 0 2
49811: PUSH
49812: LD_VAR 0 1
49816: PPUSH
49817: LD_INT 1
49819: PPUSH
49820: CALL_OW 275
49824: PUSH
49825: LD_VAR 0 1
49829: PPUSH
49830: LD_INT 2
49832: PPUSH
49833: CALL_OW 275
49837: PUSH
49838: LD_VAR 0 1
49842: PPUSH
49843: LD_INT 3
49845: PPUSH
49846: CALL_OW 275
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: ST_TO_ADDR
// end ;
49856: LD_VAR 0 2
49860: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49861: LD_INT 0
49863: PPUSH
49864: PPUSH
// result := array ;
49865: LD_ADDR_VAR 0 3
49869: PUSH
49870: LD_VAR 0 1
49874: ST_TO_ADDR
// if size >= result then
49875: LD_VAR 0 2
49879: PUSH
49880: LD_VAR 0 3
49884: GREATEREQUAL
49885: IFFALSE 49889
// exit ;
49887: GO 49939
// if size then
49889: LD_VAR 0 2
49893: IFFALSE 49939
// for i := array downto size do
49895: LD_ADDR_VAR 0 4
49899: PUSH
49900: DOUBLE
49901: LD_VAR 0 1
49905: INC
49906: ST_TO_ADDR
49907: LD_VAR 0 2
49911: PUSH
49912: FOR_DOWNTO
49913: IFFALSE 49937
// result := Delete ( result , result ) ;
49915: LD_ADDR_VAR 0 3
49919: PUSH
49920: LD_VAR 0 3
49924: PPUSH
49925: LD_VAR 0 3
49929: PPUSH
49930: CALL_OW 3
49934: ST_TO_ADDR
49935: GO 49912
49937: POP
49938: POP
// end ;
49939: LD_VAR 0 3
49943: RET
// export function ComExit ( unit ) ; var tmp ; begin
49944: LD_INT 0
49946: PPUSH
49947: PPUSH
// if not IsInUnit ( unit ) then
49948: LD_VAR 0 1
49952: PPUSH
49953: CALL_OW 310
49957: NOT
49958: IFFALSE 49962
// exit ;
49960: GO 50022
// tmp := IsInUnit ( unit ) ;
49962: LD_ADDR_VAR 0 3
49966: PUSH
49967: LD_VAR 0 1
49971: PPUSH
49972: CALL_OW 310
49976: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49977: LD_VAR 0 3
49981: PPUSH
49982: CALL_OW 247
49986: PUSH
49987: LD_INT 2
49989: EQUAL
49990: IFFALSE 50003
// ComExitVehicle ( unit ) else
49992: LD_VAR 0 1
49996: PPUSH
49997: CALL_OW 121
50001: GO 50012
// ComExitBuilding ( unit ) ;
50003: LD_VAR 0 1
50007: PPUSH
50008: CALL_OW 122
// result := tmp ;
50012: LD_ADDR_VAR 0 2
50016: PUSH
50017: LD_VAR 0 3
50021: ST_TO_ADDR
// end ;
50022: LD_VAR 0 2
50026: RET
// export function ComExitAll ( units ) ; var i ; begin
50027: LD_INT 0
50029: PPUSH
50030: PPUSH
// if not units then
50031: LD_VAR 0 1
50035: NOT
50036: IFFALSE 50040
// exit ;
50038: GO 50066
// for i in units do
50040: LD_ADDR_VAR 0 3
50044: PUSH
50045: LD_VAR 0 1
50049: PUSH
50050: FOR_IN
50051: IFFALSE 50064
// ComExit ( i ) ;
50053: LD_VAR 0 3
50057: PPUSH
50058: CALL 49944 0 1
50062: GO 50050
50064: POP
50065: POP
// end ;
50066: LD_VAR 0 2
50070: RET
// export function ResetHc ; begin
50071: LD_INT 0
50073: PPUSH
// InitHc ;
50074: CALL_OW 19
// hc_importance := 0 ;
50078: LD_ADDR_OWVAR 32
50082: PUSH
50083: LD_INT 0
50085: ST_TO_ADDR
// end ;
50086: LD_VAR 0 1
50090: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50091: LD_INT 0
50093: PPUSH
50094: PPUSH
50095: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50096: LD_ADDR_VAR 0 6
50100: PUSH
50101: LD_VAR 0 1
50105: PUSH
50106: LD_VAR 0 3
50110: PLUS
50111: PUSH
50112: LD_INT 2
50114: DIV
50115: ST_TO_ADDR
// if _x < 0 then
50116: LD_VAR 0 6
50120: PUSH
50121: LD_INT 0
50123: LESS
50124: IFFALSE 50141
// _x := _x * - 1 ;
50126: LD_ADDR_VAR 0 6
50130: PUSH
50131: LD_VAR 0 6
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: MUL
50140: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50141: LD_ADDR_VAR 0 7
50145: PUSH
50146: LD_VAR 0 2
50150: PUSH
50151: LD_VAR 0 4
50155: PLUS
50156: PUSH
50157: LD_INT 2
50159: DIV
50160: ST_TO_ADDR
// if _y < 0 then
50161: LD_VAR 0 7
50165: PUSH
50166: LD_INT 0
50168: LESS
50169: IFFALSE 50186
// _y := _y * - 1 ;
50171: LD_ADDR_VAR 0 7
50175: PUSH
50176: LD_VAR 0 7
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: MUL
50185: ST_TO_ADDR
// result := [ _x , _y ] ;
50186: LD_ADDR_VAR 0 5
50190: PUSH
50191: LD_VAR 0 6
50195: PUSH
50196: LD_VAR 0 7
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// end ;
50205: LD_VAR 0 5
50209: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50210: LD_INT 0
50212: PPUSH
50213: PPUSH
50214: PPUSH
50215: PPUSH
// task := GetTaskList ( unit ) ;
50216: LD_ADDR_VAR 0 7
50220: PUSH
50221: LD_VAR 0 1
50225: PPUSH
50226: CALL_OW 437
50230: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50231: LD_VAR 0 7
50235: NOT
50236: IFFALSE 50255
50238: PUSH
50239: LD_VAR 0 1
50243: PPUSH
50244: LD_VAR 0 2
50248: PPUSH
50249: CALL_OW 308
50253: NOT
50254: AND
50255: IFFALSE 50259
// exit ;
50257: GO 50377
// if IsInArea ( unit , area ) then
50259: LD_VAR 0 1
50263: PPUSH
50264: LD_VAR 0 2
50268: PPUSH
50269: CALL_OW 308
50273: IFFALSE 50291
// begin ComMoveToArea ( unit , goAway ) ;
50275: LD_VAR 0 1
50279: PPUSH
50280: LD_VAR 0 3
50284: PPUSH
50285: CALL_OW 113
// exit ;
50289: GO 50377
// end ; if task [ 1 ] [ 1 ] <> M then
50291: LD_VAR 0 7
50295: PUSH
50296: LD_INT 1
50298: ARRAY
50299: PUSH
50300: LD_INT 1
50302: ARRAY
50303: PUSH
50304: LD_STRING M
50306: NONEQUAL
50307: IFFALSE 50311
// exit ;
50309: GO 50377
// x := task [ 1 ] [ 2 ] ;
50311: LD_ADDR_VAR 0 5
50315: PUSH
50316: LD_VAR 0 7
50320: PUSH
50321: LD_INT 1
50323: ARRAY
50324: PUSH
50325: LD_INT 2
50327: ARRAY
50328: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50329: LD_ADDR_VAR 0 6
50333: PUSH
50334: LD_VAR 0 7
50338: PUSH
50339: LD_INT 1
50341: ARRAY
50342: PUSH
50343: LD_INT 3
50345: ARRAY
50346: ST_TO_ADDR
// if InArea ( x , y , area ) then
50347: LD_VAR 0 5
50351: PPUSH
50352: LD_VAR 0 6
50356: PPUSH
50357: LD_VAR 0 2
50361: PPUSH
50362: CALL_OW 309
50366: IFFALSE 50377
// ComStop ( unit ) ;
50368: LD_VAR 0 1
50372: PPUSH
50373: CALL_OW 141
// end ;
50377: LD_VAR 0 4
50381: RET
// export function Abs ( value ) ; begin
50382: LD_INT 0
50384: PPUSH
// result := value ;
50385: LD_ADDR_VAR 0 2
50389: PUSH
50390: LD_VAR 0 1
50394: ST_TO_ADDR
// if value < 0 then
50395: LD_VAR 0 1
50399: PUSH
50400: LD_INT 0
50402: LESS
50403: IFFALSE 50420
// result := value * - 1 ;
50405: LD_ADDR_VAR 0 2
50409: PUSH
50410: LD_VAR 0 1
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: MUL
50419: ST_TO_ADDR
// end ;
50420: LD_VAR 0 2
50424: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50425: LD_INT 0
50427: PPUSH
50428: PPUSH
50429: PPUSH
50430: PPUSH
50431: PPUSH
50432: PPUSH
50433: PPUSH
50434: PPUSH
// if not unit or not building then
50435: LD_VAR 0 1
50439: NOT
50440: IFTRUE 50449
50442: PUSH
50443: LD_VAR 0 2
50447: NOT
50448: OR
50449: IFFALSE 50453
// exit ;
50451: GO 50681
// x := GetX ( building ) ;
50453: LD_ADDR_VAR 0 4
50457: PUSH
50458: LD_VAR 0 2
50462: PPUSH
50463: CALL_OW 250
50467: ST_TO_ADDR
// y := GetY ( building ) ;
50468: LD_ADDR_VAR 0 6
50472: PUSH
50473: LD_VAR 0 2
50477: PPUSH
50478: CALL_OW 251
50482: ST_TO_ADDR
// d := GetDir ( building ) ;
50483: LD_ADDR_VAR 0 8
50487: PUSH
50488: LD_VAR 0 2
50492: PPUSH
50493: CALL_OW 254
50497: ST_TO_ADDR
// r := 4 ;
50498: LD_ADDR_VAR 0 9
50502: PUSH
50503: LD_INT 4
50505: ST_TO_ADDR
// for i := 1 to 5 do
50506: LD_ADDR_VAR 0 10
50510: PUSH
50511: DOUBLE
50512: LD_INT 1
50514: DEC
50515: ST_TO_ADDR
50516: LD_INT 5
50518: PUSH
50519: FOR_TO
50520: IFFALSE 50679
// begin _x := ShiftX ( x , d , r + i ) ;
50522: LD_ADDR_VAR 0 5
50526: PUSH
50527: LD_VAR 0 4
50531: PPUSH
50532: LD_VAR 0 8
50536: PPUSH
50537: LD_VAR 0 9
50541: PUSH
50542: LD_VAR 0 10
50546: PLUS
50547: PPUSH
50548: CALL_OW 272
50552: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50553: LD_ADDR_VAR 0 7
50557: PUSH
50558: LD_VAR 0 6
50562: PPUSH
50563: LD_VAR 0 8
50567: PPUSH
50568: LD_VAR 0 9
50572: PUSH
50573: LD_VAR 0 10
50577: PLUS
50578: PPUSH
50579: CALL_OW 273
50583: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50584: LD_VAR 0 5
50588: PPUSH
50589: LD_VAR 0 7
50593: PPUSH
50594: CALL_OW 488
50598: IFFALSE 50633
50600: PUSH
50601: LD_VAR 0 5
50605: PPUSH
50606: LD_VAR 0 7
50610: PPUSH
50611: CALL_OW 428
50615: PPUSH
50616: CALL_OW 247
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: LD_INT 2
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: IN
50631: NOT
50632: AND
50633: IFFALSE 50677
// begin ComMoveXY ( unit , _x , _y ) ;
50635: LD_VAR 0 1
50639: PPUSH
50640: LD_VAR 0 5
50644: PPUSH
50645: LD_VAR 0 7
50649: PPUSH
50650: CALL_OW 111
// result := [ _x , _y ] ;
50654: LD_ADDR_VAR 0 3
50658: PUSH
50659: LD_VAR 0 5
50663: PUSH
50664: LD_VAR 0 7
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: ST_TO_ADDR
// exit ;
50673: POP
50674: POP
50675: GO 50681
// end ; end ;
50677: GO 50519
50679: POP
50680: POP
// end ;
50681: LD_VAR 0 3
50685: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50686: LD_INT 0
50688: PPUSH
50689: PPUSH
50690: PPUSH
// result := 0 ;
50691: LD_ADDR_VAR 0 3
50695: PUSH
50696: LD_INT 0
50698: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50699: LD_VAR 0 1
50703: PUSH
50704: LD_INT 0
50706: LESS
50707: IFTRUE 50719
50709: PUSH
50710: LD_VAR 0 1
50714: PUSH
50715: LD_INT 8
50717: GREATER
50718: OR
50719: IFTRUE 50731
50721: PUSH
50722: LD_VAR 0 2
50726: PUSH
50727: LD_INT 0
50729: LESS
50730: OR
50731: IFTRUE 50743
50733: PUSH
50734: LD_VAR 0 2
50738: PUSH
50739: LD_INT 8
50741: GREATER
50742: OR
50743: IFFALSE 50747
// exit ;
50745: GO 50822
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50747: LD_ADDR_VAR 0 4
50751: PUSH
50752: LD_INT 22
50754: PUSH
50755: LD_VAR 0 2
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PPUSH
50764: CALL_OW 69
50768: PUSH
50769: FOR_IN
50770: IFFALSE 50820
// begin un := UnitShoot ( i ) ;
50772: LD_ADDR_VAR 0 5
50776: PUSH
50777: LD_VAR 0 4
50781: PPUSH
50782: CALL_OW 504
50786: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50787: LD_VAR 0 5
50791: PPUSH
50792: CALL_OW 255
50796: PUSH
50797: LD_VAR 0 1
50801: EQUAL
50802: IFFALSE 50818
// begin result := un ;
50804: LD_ADDR_VAR 0 3
50808: PUSH
50809: LD_VAR 0 5
50813: ST_TO_ADDR
// exit ;
50814: POP
50815: POP
50816: GO 50822
// end ; end ;
50818: GO 50769
50820: POP
50821: POP
// end ;
50822: LD_VAR 0 3
50826: RET
// export function GetCargoBay ( units ) ; begin
50827: LD_INT 0
50829: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50830: LD_ADDR_VAR 0 2
50834: PUSH
50835: LD_VAR 0 1
50839: PPUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 34
50845: PUSH
50846: LD_INT 12
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 34
50855: PUSH
50856: LD_INT 51
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 34
50865: PUSH
50866: LD_INT 32
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 34
50875: PUSH
50876: LD_INT 89
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: PPUSH
50890: CALL_OW 72
50894: ST_TO_ADDR
// end ;
50895: LD_VAR 0 2
50899: RET
// export function Negate ( value ) ; begin
50900: LD_INT 0
50902: PPUSH
// result := not value ;
50903: LD_ADDR_VAR 0 2
50907: PUSH
50908: LD_VAR 0 1
50912: NOT
50913: ST_TO_ADDR
// end ;
50914: LD_VAR 0 2
50918: RET
// export function Inc ( value ) ; begin
50919: LD_INT 0
50921: PPUSH
// result := value + 1 ;
50922: LD_ADDR_VAR 0 2
50926: PUSH
50927: LD_VAR 0 1
50931: PUSH
50932: LD_INT 1
50934: PLUS
50935: ST_TO_ADDR
// end ;
50936: LD_VAR 0 2
50940: RET
// export function Dec ( value ) ; begin
50941: LD_INT 0
50943: PPUSH
// result := value - 1 ;
50944: LD_ADDR_VAR 0 2
50948: PUSH
50949: LD_VAR 0 1
50953: PUSH
50954: LD_INT 1
50956: MINUS
50957: ST_TO_ADDR
// end ;
50958: LD_VAR 0 2
50962: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50963: LD_INT 0
50965: PPUSH
50966: PPUSH
50967: PPUSH
50968: PPUSH
50969: PPUSH
50970: PPUSH
50971: PPUSH
50972: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50973: LD_VAR 0 1
50977: PPUSH
50978: LD_VAR 0 2
50982: PPUSH
50983: CALL_OW 488
50987: NOT
50988: IFTRUE 51007
50990: PUSH
50991: LD_VAR 0 3
50995: PPUSH
50996: LD_VAR 0 4
51000: PPUSH
51001: CALL_OW 488
51005: NOT
51006: OR
51007: IFFALSE 51020
// begin result := - 1 ;
51009: LD_ADDR_VAR 0 5
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: ST_TO_ADDR
// exit ;
51018: GO 51255
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51020: LD_ADDR_VAR 0 12
51024: PUSH
51025: LD_VAR 0 1
51029: PPUSH
51030: LD_VAR 0 2
51034: PPUSH
51035: LD_VAR 0 3
51039: PPUSH
51040: LD_VAR 0 4
51044: PPUSH
51045: CALL 50091 0 4
51049: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51050: LD_ADDR_VAR 0 11
51054: PUSH
51055: LD_VAR 0 1
51059: PPUSH
51060: LD_VAR 0 2
51064: PPUSH
51065: LD_VAR 0 12
51069: PUSH
51070: LD_INT 1
51072: ARRAY
51073: PPUSH
51074: LD_VAR 0 12
51078: PUSH
51079: LD_INT 2
51081: ARRAY
51082: PPUSH
51083: CALL_OW 298
51087: ST_TO_ADDR
// distance := 9999 ;
51088: LD_ADDR_VAR 0 10
51092: PUSH
51093: LD_INT 9999
51095: ST_TO_ADDR
// for i := 0 to 5 do
51096: LD_ADDR_VAR 0 6
51100: PUSH
51101: DOUBLE
51102: LD_INT 0
51104: DEC
51105: ST_TO_ADDR
51106: LD_INT 5
51108: PUSH
51109: FOR_TO
51110: IFFALSE 51253
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51112: LD_ADDR_VAR 0 7
51116: PUSH
51117: LD_VAR 0 1
51121: PPUSH
51122: LD_VAR 0 6
51126: PPUSH
51127: LD_VAR 0 11
51131: PPUSH
51132: CALL_OW 272
51136: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51137: LD_ADDR_VAR 0 8
51141: PUSH
51142: LD_VAR 0 2
51146: PPUSH
51147: LD_VAR 0 6
51151: PPUSH
51152: LD_VAR 0 11
51156: PPUSH
51157: CALL_OW 273
51161: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51162: LD_VAR 0 7
51166: PPUSH
51167: LD_VAR 0 8
51171: PPUSH
51172: CALL_OW 488
51176: NOT
51177: IFFALSE 51181
// continue ;
51179: GO 51109
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51181: LD_ADDR_VAR 0 9
51185: PUSH
51186: LD_VAR 0 12
51190: PUSH
51191: LD_INT 1
51193: ARRAY
51194: PPUSH
51195: LD_VAR 0 12
51199: PUSH
51200: LD_INT 2
51202: ARRAY
51203: PPUSH
51204: LD_VAR 0 7
51208: PPUSH
51209: LD_VAR 0 8
51213: PPUSH
51214: CALL_OW 298
51218: ST_TO_ADDR
// if tmp < distance then
51219: LD_VAR 0 9
51223: PUSH
51224: LD_VAR 0 10
51228: LESS
51229: IFFALSE 51251
// begin result := i ;
51231: LD_ADDR_VAR 0 5
51235: PUSH
51236: LD_VAR 0 6
51240: ST_TO_ADDR
// distance := tmp ;
51241: LD_ADDR_VAR 0 10
51245: PUSH
51246: LD_VAR 0 9
51250: ST_TO_ADDR
// end ; end ;
51251: GO 51109
51253: POP
51254: POP
// end ;
51255: LD_VAR 0 5
51259: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51260: LD_INT 0
51262: PPUSH
51263: PPUSH
// if not driver or not IsInUnit ( driver ) then
51264: LD_VAR 0 1
51268: NOT
51269: IFTRUE 51283
51271: PUSH
51272: LD_VAR 0 1
51276: PPUSH
51277: CALL_OW 310
51281: NOT
51282: OR
51283: IFFALSE 51287
// exit ;
51285: GO 51377
// vehicle := IsInUnit ( driver ) ;
51287: LD_ADDR_VAR 0 3
51291: PUSH
51292: LD_VAR 0 1
51296: PPUSH
51297: CALL_OW 310
51301: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51302: LD_VAR 0 1
51306: PPUSH
51307: LD_STRING \
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: PUSH
51337: LD_STRING E
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_VAR 0 3
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PPUSH
51373: CALL_OW 446
// end ;
51377: LD_VAR 0 2
51381: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51382: LD_INT 0
51384: PPUSH
51385: PPUSH
// if not driver or not IsInUnit ( driver ) then
51386: LD_VAR 0 1
51390: NOT
51391: IFTRUE 51405
51393: PUSH
51394: LD_VAR 0 1
51398: PPUSH
51399: CALL_OW 310
51403: NOT
51404: OR
51405: IFFALSE 51409
// exit ;
51407: GO 51499
// vehicle := IsInUnit ( driver ) ;
51409: LD_ADDR_VAR 0 3
51413: PUSH
51414: LD_VAR 0 1
51418: PPUSH
51419: CALL_OW 310
51423: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51424: LD_VAR 0 1
51428: PPUSH
51429: LD_STRING \
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: PUSH
51459: LD_STRING E
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_VAR 0 3
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PPUSH
51495: CALL_OW 447
// end ;
51499: LD_VAR 0 2
51503: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51504: LD_INT 0
51506: PPUSH
51507: PPUSH
51508: PPUSH
// tmp := [ ] ;
51509: LD_ADDR_VAR 0 5
51513: PUSH
51514: EMPTY
51515: ST_TO_ADDR
// for i in units do
51516: LD_ADDR_VAR 0 4
51520: PUSH
51521: LD_VAR 0 1
51525: PUSH
51526: FOR_IN
51527: IFFALSE 51565
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51529: LD_ADDR_VAR 0 5
51533: PUSH
51534: LD_VAR 0 5
51538: PPUSH
51539: LD_VAR 0 5
51543: PUSH
51544: LD_INT 1
51546: PLUS
51547: PPUSH
51548: LD_VAR 0 4
51552: PPUSH
51553: CALL_OW 256
51557: PPUSH
51558: CALL_OW 2
51562: ST_TO_ADDR
51563: GO 51526
51565: POP
51566: POP
// if not tmp then
51567: LD_VAR 0 5
51571: NOT
51572: IFFALSE 51576
// exit ;
51574: GO 51624
// if asc then
51576: LD_VAR 0 2
51580: IFFALSE 51604
// result := SortListByListAsc ( units , tmp ) else
51582: LD_ADDR_VAR 0 3
51586: PUSH
51587: LD_VAR 0 1
51591: PPUSH
51592: LD_VAR 0 5
51596: PPUSH
51597: CALL_OW 76
51601: ST_TO_ADDR
51602: GO 51624
// result := SortListByListDesc ( units , tmp ) ;
51604: LD_ADDR_VAR 0 3
51608: PUSH
51609: LD_VAR 0 1
51613: PPUSH
51614: LD_VAR 0 5
51618: PPUSH
51619: CALL_OW 77
51623: ST_TO_ADDR
// end ;
51624: LD_VAR 0 3
51628: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51629: LD_INT 0
51631: PPUSH
51632: PPUSH
// task := GetTaskList ( mech ) ;
51633: LD_ADDR_VAR 0 4
51637: PUSH
51638: LD_VAR 0 1
51642: PPUSH
51643: CALL_OW 437
51647: ST_TO_ADDR
// if not task then
51648: LD_VAR 0 4
51652: NOT
51653: IFFALSE 51657
// exit ;
51655: GO 51701
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51657: LD_ADDR_VAR 0 3
51661: PUSH
51662: LD_VAR 0 4
51666: PUSH
51667: LD_INT 1
51669: ARRAY
51670: PUSH
51671: LD_INT 1
51673: ARRAY
51674: PUSH
51675: LD_STRING r
51677: EQUAL
51678: IFFALSE 51700
51680: PUSH
51681: LD_VAR 0 4
51685: PUSH
51686: LD_INT 1
51688: ARRAY
51689: PUSH
51690: LD_INT 4
51692: ARRAY
51693: PUSH
51694: LD_VAR 0 2
51698: EQUAL
51699: AND
51700: ST_TO_ADDR
// end ;
51701: LD_VAR 0 3
51705: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51706: LD_INT 0
51708: PPUSH
// SetDir ( unit , d ) ;
51709: LD_VAR 0 1
51713: PPUSH
51714: LD_VAR 0 4
51718: PPUSH
51719: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51723: LD_ADDR_VAR 0 6
51727: PUSH
51728: LD_VAR 0 1
51732: PPUSH
51733: LD_VAR 0 2
51737: PPUSH
51738: LD_VAR 0 3
51742: PPUSH
51743: LD_VAR 0 5
51747: PPUSH
51748: CALL_OW 48
51752: ST_TO_ADDR
// end ;
51753: LD_VAR 0 6
51757: RET
// export function ToNaturalNumber ( number ) ; begin
51758: LD_INT 0
51760: PPUSH
// result := number div 1 ;
51761: LD_ADDR_VAR 0 2
51765: PUSH
51766: LD_VAR 0 1
51770: PUSH
51771: LD_INT 1
51773: DIV
51774: ST_TO_ADDR
// if number < 0 then
51775: LD_VAR 0 1
51779: PUSH
51780: LD_INT 0
51782: LESS
51783: IFFALSE 51793
// result := 0 ;
51785: LD_ADDR_VAR 0 2
51789: PUSH
51790: LD_INT 0
51792: ST_TO_ADDR
// end ;
51793: LD_VAR 0 2
51797: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51798: LD_INT 0
51800: PPUSH
51801: PPUSH
51802: PPUSH
// if not buildings then
51803: LD_VAR 0 1
51807: NOT
51808: IFFALSE 51812
// exit ;
51810: GO 51927
// tmp := [ ] ;
51812: LD_ADDR_VAR 0 5
51816: PUSH
51817: EMPTY
51818: ST_TO_ADDR
// for b in buildings do
51819: LD_ADDR_VAR 0 4
51823: PUSH
51824: LD_VAR 0 1
51828: PUSH
51829: FOR_IN
51830: IFFALSE 51868
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51832: LD_ADDR_VAR 0 5
51836: PUSH
51837: LD_VAR 0 5
51841: PPUSH
51842: LD_VAR 0 5
51846: PUSH
51847: LD_INT 1
51849: PLUS
51850: PPUSH
51851: LD_VAR 0 4
51855: PPUSH
51856: CALL_OW 266
51860: PPUSH
51861: CALL_OW 1
51865: ST_TO_ADDR
51866: GO 51829
51868: POP
51869: POP
// if not tmp then
51870: LD_VAR 0 5
51874: NOT
51875: IFFALSE 51879
// exit ;
51877: GO 51927
// if asc then
51879: LD_VAR 0 2
51883: IFFALSE 51907
// result := SortListByListAsc ( buildings , tmp ) else
51885: LD_ADDR_VAR 0 3
51889: PUSH
51890: LD_VAR 0 1
51894: PPUSH
51895: LD_VAR 0 5
51899: PPUSH
51900: CALL_OW 76
51904: ST_TO_ADDR
51905: GO 51927
// result := SortListByListDesc ( buildings , tmp ) ;
51907: LD_ADDR_VAR 0 3
51911: PUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: LD_VAR 0 5
51921: PPUSH
51922: CALL_OW 77
51926: ST_TO_ADDR
// end ;
51927: LD_VAR 0 3
51931: RET
// export function SortByClass ( units , class ) ; var un ; begin
51932: LD_INT 0
51934: PPUSH
51935: PPUSH
// if not units or not class then
51936: LD_VAR 0 1
51940: NOT
51941: IFTRUE 51950
51943: PUSH
51944: LD_VAR 0 2
51948: NOT
51949: OR
51950: IFFALSE 51954
// exit ;
51952: GO 52049
// result := [ ] ;
51954: LD_ADDR_VAR 0 3
51958: PUSH
51959: EMPTY
51960: ST_TO_ADDR
// for un in units do
51961: LD_ADDR_VAR 0 4
51965: PUSH
51966: LD_VAR 0 1
51970: PUSH
51971: FOR_IN
51972: IFFALSE 52047
// if GetClass ( un ) = class then
51974: LD_VAR 0 4
51978: PPUSH
51979: CALL_OW 257
51983: PUSH
51984: LD_VAR 0 2
51988: EQUAL
51989: IFFALSE 52016
// result := Insert ( result , 1 , un ) else
51991: LD_ADDR_VAR 0 3
51995: PUSH
51996: LD_VAR 0 3
52000: PPUSH
52001: LD_INT 1
52003: PPUSH
52004: LD_VAR 0 4
52008: PPUSH
52009: CALL_OW 2
52013: ST_TO_ADDR
52014: GO 52045
// result := Replace ( result , result + 1 , un ) ;
52016: LD_ADDR_VAR 0 3
52020: PUSH
52021: LD_VAR 0 3
52025: PPUSH
52026: LD_VAR 0 3
52030: PUSH
52031: LD_INT 1
52033: PLUS
52034: PPUSH
52035: LD_VAR 0 4
52039: PPUSH
52040: CALL_OW 1
52044: ST_TO_ADDR
52045: GO 51971
52047: POP
52048: POP
// end ;
52049: LD_VAR 0 3
52053: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52054: LD_INT 0
52056: PPUSH
52057: PPUSH
52058: PPUSH
52059: PPUSH
52060: PPUSH
52061: PPUSH
52062: PPUSH
// result := [ ] ;
52063: LD_ADDR_VAR 0 4
52067: PUSH
52068: EMPTY
52069: ST_TO_ADDR
// if x - r < 0 then
52070: LD_VAR 0 1
52074: PUSH
52075: LD_VAR 0 3
52079: MINUS
52080: PUSH
52081: LD_INT 0
52083: LESS
52084: IFFALSE 52096
// min_x := 0 else
52086: LD_ADDR_VAR 0 8
52090: PUSH
52091: LD_INT 0
52093: ST_TO_ADDR
52094: GO 52112
// min_x := x - r ;
52096: LD_ADDR_VAR 0 8
52100: PUSH
52101: LD_VAR 0 1
52105: PUSH
52106: LD_VAR 0 3
52110: MINUS
52111: ST_TO_ADDR
// if y - r < 0 then
52112: LD_VAR 0 2
52116: PUSH
52117: LD_VAR 0 3
52121: MINUS
52122: PUSH
52123: LD_INT 0
52125: LESS
52126: IFFALSE 52138
// min_y := 0 else
52128: LD_ADDR_VAR 0 7
52132: PUSH
52133: LD_INT 0
52135: ST_TO_ADDR
52136: GO 52154
// min_y := y - r ;
52138: LD_ADDR_VAR 0 7
52142: PUSH
52143: LD_VAR 0 2
52147: PUSH
52148: LD_VAR 0 3
52152: MINUS
52153: ST_TO_ADDR
// max_x := x + r ;
52154: LD_ADDR_VAR 0 9
52158: PUSH
52159: LD_VAR 0 1
52163: PUSH
52164: LD_VAR 0 3
52168: PLUS
52169: ST_TO_ADDR
// max_y := y + r ;
52170: LD_ADDR_VAR 0 10
52174: PUSH
52175: LD_VAR 0 2
52179: PUSH
52180: LD_VAR 0 3
52184: PLUS
52185: ST_TO_ADDR
// for _x = min_x to max_x do
52186: LD_ADDR_VAR 0 5
52190: PUSH
52191: DOUBLE
52192: LD_VAR 0 8
52196: DEC
52197: ST_TO_ADDR
52198: LD_VAR 0 9
52202: PUSH
52203: FOR_TO
52204: IFFALSE 52305
// for _y = min_y to max_y do
52206: LD_ADDR_VAR 0 6
52210: PUSH
52211: DOUBLE
52212: LD_VAR 0 7
52216: DEC
52217: ST_TO_ADDR
52218: LD_VAR 0 10
52222: PUSH
52223: FOR_TO
52224: IFFALSE 52301
// begin if not ValidHex ( _x , _y ) then
52226: LD_VAR 0 5
52230: PPUSH
52231: LD_VAR 0 6
52235: PPUSH
52236: CALL_OW 488
52240: NOT
52241: IFFALSE 52245
// continue ;
52243: GO 52223
// if GetResourceTypeXY ( _x , _y ) then
52245: LD_VAR 0 5
52249: PPUSH
52250: LD_VAR 0 6
52254: PPUSH
52255: CALL_OW 283
52259: IFFALSE 52299
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52261: LD_ADDR_VAR 0 4
52265: PUSH
52266: LD_VAR 0 4
52270: PPUSH
52271: LD_VAR 0 4
52275: PUSH
52276: LD_INT 1
52278: PLUS
52279: PPUSH
52280: LD_VAR 0 5
52284: PUSH
52285: LD_VAR 0 6
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PPUSH
52294: CALL_OW 1
52298: ST_TO_ADDR
// end ;
52299: GO 52223
52301: POP
52302: POP
52303: GO 52203
52305: POP
52306: POP
// end ;
52307: LD_VAR 0 4
52311: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52312: LD_INT 0
52314: PPUSH
52315: PPUSH
52316: PPUSH
52317: PPUSH
52318: PPUSH
52319: PPUSH
52320: PPUSH
52321: PPUSH
// if not units then
52322: LD_VAR 0 1
52326: NOT
52327: IFFALSE 52331
// exit ;
52329: GO 52863
// result := UnitFilter ( units , [ f_ok ] ) ;
52331: LD_ADDR_VAR 0 3
52335: PUSH
52336: LD_VAR 0 1
52340: PPUSH
52341: LD_INT 50
52343: PUSH
52344: EMPTY
52345: LIST
52346: PPUSH
52347: CALL_OW 72
52351: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52352: LD_ADDR_VAR 0 8
52356: PUSH
52357: LD_VAR 0 1
52361: PUSH
52362: LD_INT 1
52364: ARRAY
52365: PPUSH
52366: CALL_OW 255
52370: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52371: LD_ADDR_VAR 0 10
52375: PUSH
52376: LD_INT 29
52378: PUSH
52379: LD_INT 91
52381: PUSH
52382: LD_INT 49
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: ST_TO_ADDR
// if not result then
52390: LD_VAR 0 3
52394: NOT
52395: IFFALSE 52399
// exit ;
52397: GO 52863
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52399: LD_ADDR_VAR 0 5
52403: PUSH
52404: LD_INT 81
52406: PUSH
52407: LD_VAR 0 8
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PPUSH
52416: CALL_OW 69
52420: ST_TO_ADDR
// for i in result do
52421: LD_ADDR_VAR 0 4
52425: PUSH
52426: LD_VAR 0 3
52430: PUSH
52431: FOR_IN
52432: IFFALSE 52861
// begin tag := GetTag ( i ) + 1 ;
52434: LD_ADDR_VAR 0 9
52438: PUSH
52439: LD_VAR 0 4
52443: PPUSH
52444: CALL_OW 110
52448: PUSH
52449: LD_INT 1
52451: PLUS
52452: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52453: LD_ADDR_VAR 0 7
52457: PUSH
52458: LD_VAR 0 4
52462: PPUSH
52463: CALL_OW 250
52467: PPUSH
52468: LD_VAR 0 4
52472: PPUSH
52473: CALL_OW 251
52477: PPUSH
52478: LD_INT 4
52480: PPUSH
52481: CALL 52054 0 3
52485: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52486: LD_VAR 0 4
52490: PPUSH
52491: CALL_OW 247
52495: PUSH
52496: LD_INT 2
52498: EQUAL
52499: IFFALSE 52511
52501: PUSH
52502: LD_VAR 0 7
52506: PUSH
52507: LD_INT 2
52509: GREATER
52510: AND
52511: IFFALSE 52531
52513: PUSH
52514: LD_VAR 0 4
52518: PPUSH
52519: CALL_OW 264
52523: PUSH
52524: LD_VAR 0 10
52528: IN
52529: NOT
52530: AND
52531: IFFALSE 52570
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52533: LD_VAR 0 4
52537: PPUSH
52538: LD_VAR 0 7
52542: PUSH
52543: LD_INT 1
52545: ARRAY
52546: PUSH
52547: LD_INT 1
52549: ARRAY
52550: PPUSH
52551: LD_VAR 0 7
52555: PUSH
52556: LD_INT 1
52558: ARRAY
52559: PUSH
52560: LD_INT 2
52562: ARRAY
52563: PPUSH
52564: CALL_OW 116
52568: GO 52859
// if path > tag then
52570: LD_VAR 0 2
52574: PUSH
52575: LD_VAR 0 9
52579: GREATER
52580: IFFALSE 52788
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52582: LD_ADDR_VAR 0 6
52586: PUSH
52587: LD_VAR 0 5
52591: PPUSH
52592: LD_INT 91
52594: PUSH
52595: LD_VAR 0 4
52599: PUSH
52600: LD_INT 8
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: LIST
52607: PPUSH
52608: CALL_OW 72
52612: ST_TO_ADDR
// if nearEnemy then
52613: LD_VAR 0 6
52617: IFFALSE 52686
// begin if GetWeapon ( i ) = ru_time_lapser then
52619: LD_VAR 0 4
52623: PPUSH
52624: CALL_OW 264
52628: PUSH
52629: LD_INT 49
52631: EQUAL
52632: IFFALSE 52660
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52634: LD_VAR 0 4
52638: PPUSH
52639: LD_VAR 0 6
52643: PPUSH
52644: LD_VAR 0 4
52648: PPUSH
52649: CALL_OW 74
52653: PPUSH
52654: CALL_OW 112
52658: GO 52684
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52660: LD_VAR 0 4
52664: PPUSH
52665: LD_VAR 0 6
52669: PPUSH
52670: LD_VAR 0 4
52674: PPUSH
52675: CALL_OW 74
52679: PPUSH
52680: CALL 53944 0 2
// end else
52684: GO 52786
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52686: LD_VAR 0 4
52690: PPUSH
52691: LD_VAR 0 2
52695: PUSH
52696: LD_VAR 0 9
52700: ARRAY
52701: PUSH
52702: LD_INT 1
52704: ARRAY
52705: PPUSH
52706: LD_VAR 0 2
52710: PUSH
52711: LD_VAR 0 9
52715: ARRAY
52716: PUSH
52717: LD_INT 2
52719: ARRAY
52720: PPUSH
52721: CALL_OW 297
52725: PUSH
52726: LD_INT 6
52728: GREATER
52729: IFFALSE 52772
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52731: LD_VAR 0 4
52735: PPUSH
52736: LD_VAR 0 2
52740: PUSH
52741: LD_VAR 0 9
52745: ARRAY
52746: PUSH
52747: LD_INT 1
52749: ARRAY
52750: PPUSH
52751: LD_VAR 0 2
52755: PUSH
52756: LD_VAR 0 9
52760: ARRAY
52761: PUSH
52762: LD_INT 2
52764: ARRAY
52765: PPUSH
52766: CALL_OW 114
52770: GO 52786
// SetTag ( i , tag ) ;
52772: LD_VAR 0 4
52776: PPUSH
52777: LD_VAR 0 9
52781: PPUSH
52782: CALL_OW 109
// end else
52786: GO 52859
// if enemy then
52788: LD_VAR 0 5
52792: IFFALSE 52859
// begin if GetWeapon ( i ) = ru_time_lapser then
52794: LD_VAR 0 4
52798: PPUSH
52799: CALL_OW 264
52803: PUSH
52804: LD_INT 49
52806: EQUAL
52807: IFFALSE 52835
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52809: LD_VAR 0 4
52813: PPUSH
52814: LD_VAR 0 5
52818: PPUSH
52819: LD_VAR 0 4
52823: PPUSH
52824: CALL_OW 74
52828: PPUSH
52829: CALL_OW 112
52833: GO 52859
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52835: LD_VAR 0 4
52839: PPUSH
52840: LD_VAR 0 5
52844: PPUSH
52845: LD_VAR 0 4
52849: PPUSH
52850: CALL_OW 74
52854: PPUSH
52855: CALL 53944 0 2
// end ; end ;
52859: GO 52431
52861: POP
52862: POP
// end ;
52863: LD_VAR 0 3
52867: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52868: LD_INT 0
52870: PPUSH
52871: PPUSH
52872: PPUSH
// if not unit or IsInUnit ( unit ) then
52873: LD_VAR 0 1
52877: NOT
52878: IFTRUE 52891
52880: PUSH
52881: LD_VAR 0 1
52885: PPUSH
52886: CALL_OW 310
52890: OR
52891: IFFALSE 52895
// exit ;
52893: GO 52986
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52895: LD_ADDR_VAR 0 4
52899: PUSH
52900: LD_VAR 0 1
52904: PPUSH
52905: CALL_OW 250
52909: PPUSH
52910: LD_VAR 0 2
52914: PPUSH
52915: LD_INT 1
52917: PPUSH
52918: CALL_OW 272
52922: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52923: LD_ADDR_VAR 0 5
52927: PUSH
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL_OW 251
52937: PPUSH
52938: LD_VAR 0 2
52942: PPUSH
52943: LD_INT 1
52945: PPUSH
52946: CALL_OW 273
52950: ST_TO_ADDR
// if ValidHex ( x , y ) then
52951: LD_VAR 0 4
52955: PPUSH
52956: LD_VAR 0 5
52960: PPUSH
52961: CALL_OW 488
52965: IFFALSE 52986
// ComTurnXY ( unit , x , y ) ;
52967: LD_VAR 0 1
52971: PPUSH
52972: LD_VAR 0 4
52976: PPUSH
52977: LD_VAR 0 5
52981: PPUSH
52982: CALL_OW 118
// end ;
52986: LD_VAR 0 3
52990: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52991: LD_INT 0
52993: PPUSH
52994: PPUSH
// result := false ;
52995: LD_ADDR_VAR 0 3
52999: PUSH
53000: LD_INT 0
53002: ST_TO_ADDR
// if not units then
53003: LD_VAR 0 2
53007: NOT
53008: IFFALSE 53012
// exit ;
53010: GO 53057
// for i in units do
53012: LD_ADDR_VAR 0 4
53016: PUSH
53017: LD_VAR 0 2
53021: PUSH
53022: FOR_IN
53023: IFFALSE 53055
// if See ( side , i ) then
53025: LD_VAR 0 1
53029: PPUSH
53030: LD_VAR 0 4
53034: PPUSH
53035: CALL_OW 292
53039: IFFALSE 53053
// begin result := true ;
53041: LD_ADDR_VAR 0 3
53045: PUSH
53046: LD_INT 1
53048: ST_TO_ADDR
// exit ;
53049: POP
53050: POP
53051: GO 53057
// end ;
53053: GO 53022
53055: POP
53056: POP
// end ;
53057: LD_VAR 0 3
53061: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53062: LD_INT 0
53064: PPUSH
53065: PPUSH
53066: PPUSH
53067: PPUSH
// if not unit or not points then
53068: LD_VAR 0 1
53072: NOT
53073: IFTRUE 53082
53075: PUSH
53076: LD_VAR 0 2
53080: NOT
53081: OR
53082: IFFALSE 53086
// exit ;
53084: GO 53176
// dist := 99999 ;
53086: LD_ADDR_VAR 0 5
53090: PUSH
53091: LD_INT 99999
53093: ST_TO_ADDR
// for i in points do
53094: LD_ADDR_VAR 0 4
53098: PUSH
53099: LD_VAR 0 2
53103: PUSH
53104: FOR_IN
53105: IFFALSE 53174
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53107: LD_ADDR_VAR 0 6
53111: PUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: LD_VAR 0 4
53121: PUSH
53122: LD_INT 1
53124: ARRAY
53125: PPUSH
53126: LD_VAR 0 4
53130: PUSH
53131: LD_INT 2
53133: ARRAY
53134: PPUSH
53135: CALL_OW 297
53139: ST_TO_ADDR
// if tmpDist < dist then
53140: LD_VAR 0 6
53144: PUSH
53145: LD_VAR 0 5
53149: LESS
53150: IFFALSE 53172
// begin result := i ;
53152: LD_ADDR_VAR 0 3
53156: PUSH
53157: LD_VAR 0 4
53161: ST_TO_ADDR
// dist := tmpDist ;
53162: LD_ADDR_VAR 0 5
53166: PUSH
53167: LD_VAR 0 6
53171: ST_TO_ADDR
// end ; end ;
53172: GO 53104
53174: POP
53175: POP
// end ;
53176: LD_VAR 0 3
53180: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53181: LD_INT 0
53183: PPUSH
// uc_side := side ;
53184: LD_ADDR_OWVAR 20
53188: PUSH
53189: LD_VAR 0 1
53193: ST_TO_ADDR
// uc_nation := 3 ;
53194: LD_ADDR_OWVAR 21
53198: PUSH
53199: LD_INT 3
53201: ST_TO_ADDR
// vc_chassis := 25 ;
53202: LD_ADDR_OWVAR 37
53206: PUSH
53207: LD_INT 25
53209: ST_TO_ADDR
// vc_engine := engine_siberite ;
53210: LD_ADDR_OWVAR 39
53214: PUSH
53215: LD_INT 3
53217: ST_TO_ADDR
// vc_control := control_computer ;
53218: LD_ADDR_OWVAR 38
53222: PUSH
53223: LD_INT 3
53225: ST_TO_ADDR
// vc_weapon := 59 ;
53226: LD_ADDR_OWVAR 40
53230: PUSH
53231: LD_INT 59
53233: ST_TO_ADDR
// result := CreateVehicle ;
53234: LD_ADDR_VAR 0 5
53238: PUSH
53239: CALL_OW 45
53243: ST_TO_ADDR
// SetDir ( result , d ) ;
53244: LD_VAR 0 5
53248: PPUSH
53249: LD_VAR 0 4
53253: PPUSH
53254: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53258: LD_VAR 0 5
53262: PPUSH
53263: LD_VAR 0 2
53267: PPUSH
53268: LD_VAR 0 3
53272: PPUSH
53273: LD_INT 0
53275: PPUSH
53276: CALL_OW 48
// end ;
53280: LD_VAR 0 5
53284: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53285: LD_INT 0
53287: PPUSH
53288: PPUSH
53289: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53290: LD_ADDR_VAR 0 2
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53313: LD_VAR 0 1
53317: NOT
53318: IFTRUE 53351
53320: PUSH
53321: LD_VAR 0 1
53325: PPUSH
53326: CALL_OW 264
53330: PUSH
53331: LD_INT 12
53333: PUSH
53334: LD_INT 51
53336: PUSH
53337: LD_INT 32
53339: PUSH
53340: LD_INT 89
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: IN
53349: NOT
53350: OR
53351: IFFALSE 53355
// exit ;
53353: GO 53453
// for i := 1 to 3 do
53355: LD_ADDR_VAR 0 3
53359: PUSH
53360: DOUBLE
53361: LD_INT 1
53363: DEC
53364: ST_TO_ADDR
53365: LD_INT 3
53367: PUSH
53368: FOR_TO
53369: IFFALSE 53451
// begin tmp := GetCargo ( cargo , i ) ;
53371: LD_ADDR_VAR 0 4
53375: PUSH
53376: LD_VAR 0 1
53380: PPUSH
53381: LD_VAR 0 3
53385: PPUSH
53386: CALL_OW 289
53390: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53391: LD_ADDR_VAR 0 2
53395: PUSH
53396: LD_VAR 0 2
53400: PPUSH
53401: LD_VAR 0 3
53405: PPUSH
53406: LD_VAR 0 4
53410: PPUSH
53411: CALL_OW 1
53415: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53416: LD_ADDR_VAR 0 2
53420: PUSH
53421: LD_VAR 0 2
53425: PPUSH
53426: LD_INT 4
53428: PPUSH
53429: LD_VAR 0 2
53433: PUSH
53434: LD_INT 4
53436: ARRAY
53437: PUSH
53438: LD_VAR 0 4
53442: PLUS
53443: PPUSH
53444: CALL_OW 1
53448: ST_TO_ADDR
// end ;
53449: GO 53368
53451: POP
53452: POP
// end ;
53453: LD_VAR 0 2
53457: RET
// export function Length ( array ) ; begin
53458: LD_INT 0
53460: PPUSH
// result := array + 0 ;
53461: LD_ADDR_VAR 0 2
53465: PUSH
53466: LD_VAR 0 1
53470: PUSH
53471: LD_INT 0
53473: PLUS
53474: ST_TO_ADDR
// end ;
53475: LD_VAR 0 2
53479: RET
// export function PrepareArray ( array ) ; begin
53480: LD_INT 0
53482: PPUSH
// result := array diff 0 ;
53483: LD_ADDR_VAR 0 2
53487: PUSH
53488: LD_VAR 0 1
53492: PUSH
53493: LD_INT 0
53495: DIFF
53496: ST_TO_ADDR
// if not result [ 1 ] then
53497: LD_VAR 0 2
53501: PUSH
53502: LD_INT 1
53504: ARRAY
53505: NOT
53506: IFFALSE 53526
// result := Delete ( result , 1 ) ;
53508: LD_ADDR_VAR 0 2
53512: PUSH
53513: LD_VAR 0 2
53517: PPUSH
53518: LD_INT 1
53520: PPUSH
53521: CALL_OW 3
53525: ST_TO_ADDR
// end ;
53526: LD_VAR 0 2
53530: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53531: LD_INT 0
53533: PPUSH
53534: PPUSH
53535: PPUSH
53536: PPUSH
// sibRocketRange := 25 ;
53537: LD_ADDR_VAR 0 6
53541: PUSH
53542: LD_INT 25
53544: ST_TO_ADDR
// result := false ;
53545: LD_ADDR_VAR 0 4
53549: PUSH
53550: LD_INT 0
53552: ST_TO_ADDR
// for i := 0 to 5 do
53553: LD_ADDR_VAR 0 5
53557: PUSH
53558: DOUBLE
53559: LD_INT 0
53561: DEC
53562: ST_TO_ADDR
53563: LD_INT 5
53565: PUSH
53566: FOR_TO
53567: IFFALSE 53634
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53569: LD_VAR 0 1
53573: PPUSH
53574: LD_VAR 0 5
53578: PPUSH
53579: LD_VAR 0 6
53583: PPUSH
53584: CALL_OW 272
53588: PPUSH
53589: LD_VAR 0 2
53593: PPUSH
53594: LD_VAR 0 5
53598: PPUSH
53599: LD_VAR 0 6
53603: PPUSH
53604: CALL_OW 273
53608: PPUSH
53609: LD_VAR 0 3
53613: PPUSH
53614: CALL_OW 309
53618: IFFALSE 53632
// begin result := true ;
53620: LD_ADDR_VAR 0 4
53624: PUSH
53625: LD_INT 1
53627: ST_TO_ADDR
// exit ;
53628: POP
53629: POP
53630: GO 53636
// end ;
53632: GO 53566
53634: POP
53635: POP
// end ;
53636: LD_VAR 0 4
53640: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53641: LD_INT 0
53643: PPUSH
53644: PPUSH
53645: PPUSH
// if btype = b_depot then
53646: LD_VAR 0 2
53650: PUSH
53651: LD_INT 0
53653: EQUAL
53654: IFFALSE 53666
// begin result := true ;
53656: LD_ADDR_VAR 0 3
53660: PUSH
53661: LD_INT 1
53663: ST_TO_ADDR
// exit ;
53664: GO 53786
// end ; pom := GetBase ( depot ) ;
53666: LD_ADDR_VAR 0 4
53670: PUSH
53671: LD_VAR 0 1
53675: PPUSH
53676: CALL_OW 274
53680: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53681: LD_ADDR_VAR 0 5
53685: PUSH
53686: LD_VAR 0 2
53690: PPUSH
53691: LD_VAR 0 1
53695: PPUSH
53696: CALL_OW 248
53700: PPUSH
53701: CALL_OW 450
53705: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53706: LD_ADDR_VAR 0 3
53710: PUSH
53711: LD_VAR 0 4
53715: PPUSH
53716: LD_INT 1
53718: PPUSH
53719: CALL_OW 275
53723: PUSH
53724: LD_VAR 0 5
53728: PUSH
53729: LD_INT 1
53731: ARRAY
53732: GREATEREQUAL
53733: IFFALSE 53759
53735: PUSH
53736: LD_VAR 0 4
53740: PPUSH
53741: LD_INT 2
53743: PPUSH
53744: CALL_OW 275
53748: PUSH
53749: LD_VAR 0 5
53753: PUSH
53754: LD_INT 2
53756: ARRAY
53757: GREATEREQUAL
53758: AND
53759: IFFALSE 53785
53761: PUSH
53762: LD_VAR 0 4
53766: PPUSH
53767: LD_INT 3
53769: PPUSH
53770: CALL_OW 275
53774: PUSH
53775: LD_VAR 0 5
53779: PUSH
53780: LD_INT 3
53782: ARRAY
53783: GREATEREQUAL
53784: AND
53785: ST_TO_ADDR
// end ;
53786: LD_VAR 0 3
53790: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53791: LD_INT 0
53793: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53794: LD_VAR 0 1
53798: PPUSH
53799: LD_VAR 0 2
53803: PPUSH
53804: LD_INT 0
53806: PPUSH
53807: LD_INT 0
53809: PPUSH
53810: LD_INT 1
53812: PPUSH
53813: LD_INT 0
53815: PPUSH
53816: CALL_OW 587
// end ;
53820: LD_VAR 0 3
53824: RET
// export function CenterOnNow ( unit ) ; begin
53825: LD_INT 0
53827: PPUSH
// result := IsInUnit ( unit ) ;
53828: LD_ADDR_VAR 0 2
53832: PUSH
53833: LD_VAR 0 1
53837: PPUSH
53838: CALL_OW 310
53842: ST_TO_ADDR
// if not result then
53843: LD_VAR 0 2
53847: NOT
53848: IFFALSE 53860
// result := unit ;
53850: LD_ADDR_VAR 0 2
53854: PUSH
53855: LD_VAR 0 1
53859: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53860: LD_VAR 0 1
53864: PPUSH
53865: CALL_OW 87
// end ;
53869: LD_VAR 0 2
53873: RET
// export function ComMoveHex ( unit , hex ) ; begin
53874: LD_INT 0
53876: PPUSH
// if not hex then
53877: LD_VAR 0 2
53881: NOT
53882: IFFALSE 53886
// exit ;
53884: GO 53939
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53886: LD_VAR 0 2
53890: PUSH
53891: LD_INT 1
53893: ARRAY
53894: PPUSH
53895: LD_VAR 0 2
53899: PUSH
53900: LD_INT 2
53902: ARRAY
53903: PPUSH
53904: CALL_OW 428
53908: IFFALSE 53912
// exit ;
53910: GO 53939
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53912: LD_VAR 0 1
53916: PPUSH
53917: LD_VAR 0 2
53921: PUSH
53922: LD_INT 1
53924: ARRAY
53925: PPUSH
53926: LD_VAR 0 2
53930: PUSH
53931: LD_INT 2
53933: ARRAY
53934: PPUSH
53935: CALL_OW 111
// end ;
53939: LD_VAR 0 3
53943: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53944: LD_INT 0
53946: PPUSH
53947: PPUSH
53948: PPUSH
// if not unit or not enemy then
53949: LD_VAR 0 1
53953: NOT
53954: IFTRUE 53963
53956: PUSH
53957: LD_VAR 0 2
53961: NOT
53962: OR
53963: IFFALSE 53967
// exit ;
53965: GO 54093
// x := GetX ( enemy ) ;
53967: LD_ADDR_VAR 0 4
53971: PUSH
53972: LD_VAR 0 2
53976: PPUSH
53977: CALL_OW 250
53981: ST_TO_ADDR
// y := GetY ( enemy ) ;
53982: LD_ADDR_VAR 0 5
53986: PUSH
53987: LD_VAR 0 2
53991: PPUSH
53992: CALL_OW 251
53996: ST_TO_ADDR
// if ValidHex ( x , y ) then
53997: LD_VAR 0 4
54001: PPUSH
54002: LD_VAR 0 5
54006: PPUSH
54007: CALL_OW 488
54011: IFFALSE 54093
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54013: LD_VAR 0 2
54017: PPUSH
54018: CALL_OW 247
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: IN
54033: IFTRUE 54056
54035: PUSH
54036: LD_VAR 0 1
54040: PPUSH
54041: CALL_OW 255
54045: PPUSH
54046: LD_VAR 0 2
54050: PPUSH
54051: CALL_OW 292
54055: OR
54056: IFFALSE 54074
// ComAttackUnit ( unit , enemy ) else
54058: LD_VAR 0 1
54062: PPUSH
54063: LD_VAR 0 2
54067: PPUSH
54068: CALL_OW 115
54072: GO 54093
// ComAgressiveMove ( unit , x , y ) ;
54074: LD_VAR 0 1
54078: PPUSH
54079: LD_VAR 0 4
54083: PPUSH
54084: LD_VAR 0 5
54088: PPUSH
54089: CALL_OW 114
// end ;
54093: LD_VAR 0 3
54097: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54098: LD_INT 0
54100: PPUSH
54101: PPUSH
54102: PPUSH
// list := AreaToList ( area , 0 ) ;
54103: LD_ADDR_VAR 0 5
54107: PUSH
54108: LD_VAR 0 1
54112: PPUSH
54113: LD_INT 0
54115: PPUSH
54116: CALL_OW 517
54120: ST_TO_ADDR
// if not list then
54121: LD_VAR 0 5
54125: NOT
54126: IFFALSE 54130
// exit ;
54128: GO 54260
// if all then
54130: LD_VAR 0 2
54134: IFFALSE 54222
// begin for i := 1 to list [ 1 ] do
54136: LD_ADDR_VAR 0 4
54140: PUSH
54141: DOUBLE
54142: LD_INT 1
54144: DEC
54145: ST_TO_ADDR
54146: LD_VAR 0 5
54150: PUSH
54151: LD_INT 1
54153: ARRAY
54154: PUSH
54155: FOR_TO
54156: IFFALSE 54218
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54158: LD_ADDR_VAR 0 3
54162: PUSH
54163: LD_VAR 0 3
54167: PPUSH
54168: LD_VAR 0 3
54172: PUSH
54173: LD_INT 1
54175: PLUS
54176: PPUSH
54177: LD_VAR 0 5
54181: PUSH
54182: LD_INT 1
54184: ARRAY
54185: PUSH
54186: LD_VAR 0 4
54190: ARRAY
54191: PUSH
54192: LD_VAR 0 5
54196: PUSH
54197: LD_INT 2
54199: ARRAY
54200: PUSH
54201: LD_VAR 0 4
54205: ARRAY
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PPUSH
54211: CALL_OW 1
54215: ST_TO_ADDR
54216: GO 54155
54218: POP
54219: POP
// exit ;
54220: GO 54260
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54222: LD_ADDR_VAR 0 3
54226: PUSH
54227: LD_VAR 0 5
54231: PUSH
54232: LD_INT 1
54234: ARRAY
54235: PUSH
54236: LD_INT 1
54238: ARRAY
54239: PUSH
54240: LD_VAR 0 5
54244: PUSH
54245: LD_INT 2
54247: ARRAY
54248: PUSH
54249: LD_INT 1
54251: ARRAY
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: ST_TO_ADDR
// end ;
54260: LD_VAR 0 3
54264: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54265: LD_INT 0
54267: PPUSH
54268: PPUSH
// list := AreaToList ( area , 0 ) ;
54269: LD_ADDR_VAR 0 4
54273: PUSH
54274: LD_VAR 0 1
54278: PPUSH
54279: LD_INT 0
54281: PPUSH
54282: CALL_OW 517
54286: ST_TO_ADDR
// if not list then
54287: LD_VAR 0 4
54291: NOT
54292: IFFALSE 54296
// exit ;
54294: GO 54337
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54296: LD_ADDR_VAR 0 3
54300: PUSH
54301: LD_VAR 0 4
54305: PUSH
54306: LD_INT 1
54308: ARRAY
54309: PUSH
54310: LD_INT 1
54312: ARRAY
54313: PUSH
54314: LD_VAR 0 4
54318: PUSH
54319: LD_INT 2
54321: ARRAY
54322: PUSH
54323: LD_INT 1
54325: ARRAY
54326: PUSH
54327: LD_VAR 0 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: LIST
54336: ST_TO_ADDR
// end ;
54337: LD_VAR 0 3
54341: RET
// export function First ( array ) ; begin
54342: LD_INT 0
54344: PPUSH
// if not array then
54345: LD_VAR 0 1
54349: NOT
54350: IFFALSE 54354
// exit ;
54352: GO 54368
// result := array [ 1 ] ;
54354: LD_ADDR_VAR 0 2
54358: PUSH
54359: LD_VAR 0 1
54363: PUSH
54364: LD_INT 1
54366: ARRAY
54367: ST_TO_ADDR
// end ;
54368: LD_VAR 0 2
54372: RET
// export function Last ( array ) ; begin
54373: LD_INT 0
54375: PPUSH
// if not array then
54376: LD_VAR 0 1
54380: NOT
54381: IFFALSE 54385
// exit ;
54383: GO 54401
// result := array [ array ] ;
54385: LD_ADDR_VAR 0 2
54389: PUSH
54390: LD_VAR 0 1
54394: PUSH
54395: LD_VAR 0 1
54399: ARRAY
54400: ST_TO_ADDR
// end ;
54401: LD_VAR 0 2
54405: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54406: LD_INT 0
54408: PPUSH
54409: PPUSH
// result := [ ] ;
54410: LD_ADDR_VAR 0 5
54414: PUSH
54415: EMPTY
54416: ST_TO_ADDR
// if not array then
54417: LD_VAR 0 1
54421: NOT
54422: IFFALSE 54426
// exit ;
54424: GO 54538
// for i := 1 to array do
54426: LD_ADDR_VAR 0 6
54430: PUSH
54431: DOUBLE
54432: LD_INT 1
54434: DEC
54435: ST_TO_ADDR
54436: LD_VAR 0 1
54440: PUSH
54441: FOR_TO
54442: IFFALSE 54536
// if array [ i ] [ index ] = value then
54444: LD_VAR 0 1
54448: PUSH
54449: LD_VAR 0 6
54453: ARRAY
54454: PUSH
54455: LD_VAR 0 2
54459: ARRAY
54460: PUSH
54461: LD_VAR 0 3
54465: EQUAL
54466: IFFALSE 54534
// begin if indexColumn then
54468: LD_VAR 0 4
54472: IFFALSE 54508
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54474: LD_ADDR_VAR 0 5
54478: PUSH
54479: LD_VAR 0 5
54483: PPUSH
54484: LD_VAR 0 1
54488: PUSH
54489: LD_VAR 0 6
54493: ARRAY
54494: PUSH
54495: LD_VAR 0 4
54499: ARRAY
54500: PPUSH
54501: CALL 49546 0 2
54505: ST_TO_ADDR
54506: GO 54534
// result := Join ( result , array [ i ] ) ;
54508: LD_ADDR_VAR 0 5
54512: PUSH
54513: LD_VAR 0 5
54517: PPUSH
54518: LD_VAR 0 1
54522: PUSH
54523: LD_VAR 0 6
54527: ARRAY
54528: PPUSH
54529: CALL 49546 0 2
54533: ST_TO_ADDR
// end ;
54534: GO 54441
54536: POP
54537: POP
// end ;
54538: LD_VAR 0 5
54542: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54543: LD_INT 0
54545: PPUSH
// if not vehicles or not parkingPoint then
54546: LD_VAR 0 1
54550: NOT
54551: IFTRUE 54560
54553: PUSH
54554: LD_VAR 0 2
54558: NOT
54559: OR
54560: IFFALSE 54564
// exit ;
54562: GO 54662
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54564: LD_ADDR_VAR 0 1
54568: PUSH
54569: LD_VAR 0 1
54573: PPUSH
54574: LD_INT 50
54576: PUSH
54577: EMPTY
54578: LIST
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: LD_INT 92
54585: PUSH
54586: LD_VAR 0 2
54590: PUSH
54591: LD_INT 1
54593: ARRAY
54594: PUSH
54595: LD_VAR 0 2
54599: PUSH
54600: LD_INT 2
54602: ARRAY
54603: PUSH
54604: LD_INT 8
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PPUSH
54621: CALL_OW 72
54625: ST_TO_ADDR
// if not vehicles then
54626: LD_VAR 0 1
54630: NOT
54631: IFFALSE 54635
// exit ;
54633: GO 54662
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54635: LD_VAR 0 1
54639: PPUSH
54640: LD_VAR 0 2
54644: PUSH
54645: LD_INT 1
54647: ARRAY
54648: PPUSH
54649: LD_VAR 0 2
54653: PUSH
54654: LD_INT 2
54656: ARRAY
54657: PPUSH
54658: CALL_OW 111
// end ;
54662: LD_VAR 0 3
54666: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54667: LD_INT 0
54669: PPUSH
54670: PPUSH
54671: PPUSH
// if not side or not area then
54672: LD_VAR 0 1
54676: NOT
54677: IFTRUE 54686
54679: PUSH
54680: LD_VAR 0 2
54684: NOT
54685: OR
54686: IFFALSE 54690
// exit ;
54688: GO 54809
// tmp := AreaToList ( area , 0 ) ;
54690: LD_ADDR_VAR 0 5
54694: PUSH
54695: LD_VAR 0 2
54699: PPUSH
54700: LD_INT 0
54702: PPUSH
54703: CALL_OW 517
54707: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54708: LD_ADDR_VAR 0 4
54712: PUSH
54713: DOUBLE
54714: LD_INT 1
54716: DEC
54717: ST_TO_ADDR
54718: LD_VAR 0 5
54722: PUSH
54723: LD_INT 1
54725: ARRAY
54726: PUSH
54727: FOR_TO
54728: IFFALSE 54807
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54730: LD_VAR 0 5
54734: PUSH
54735: LD_INT 1
54737: ARRAY
54738: PUSH
54739: LD_VAR 0 4
54743: ARRAY
54744: PPUSH
54745: LD_VAR 0 5
54749: PUSH
54750: LD_INT 2
54752: ARRAY
54753: PUSH
54754: LD_VAR 0 4
54758: ARRAY
54759: PPUSH
54760: CALL_OW 351
54764: IFFALSE 54805
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54766: LD_VAR 0 5
54770: PUSH
54771: LD_INT 1
54773: ARRAY
54774: PUSH
54775: LD_VAR 0 4
54779: ARRAY
54780: PPUSH
54781: LD_VAR 0 5
54785: PUSH
54786: LD_INT 2
54788: ARRAY
54789: PUSH
54790: LD_VAR 0 4
54794: ARRAY
54795: PPUSH
54796: LD_VAR 0 1
54800: PPUSH
54801: CALL_OW 244
// end ;
54805: GO 54727
54807: POP
54808: POP
// end ;
54809: LD_VAR 0 3
54813: RET
// export function UniqueArray ( array ) ; var i ; begin
54814: LD_INT 0
54816: PPUSH
54817: PPUSH
// result := [ ] ;
54818: LD_ADDR_VAR 0 2
54822: PUSH
54823: EMPTY
54824: ST_TO_ADDR
// if not array then
54825: LD_VAR 0 1
54829: NOT
54830: IFFALSE 54834
// exit ;
54832: GO 54895
// for i := 1 to array do
54834: LD_ADDR_VAR 0 3
54838: PUSH
54839: DOUBLE
54840: LD_INT 1
54842: DEC
54843: ST_TO_ADDR
54844: LD_VAR 0 1
54848: PUSH
54849: FOR_TO
54850: IFFALSE 54893
// if not array [ i ] in result then
54852: LD_VAR 0 1
54856: PUSH
54857: LD_VAR 0 3
54861: ARRAY
54862: PUSH
54863: LD_VAR 0 2
54867: IN
54868: NOT
54869: IFFALSE 54891
// result := Join ( result , i ) ;
54871: LD_ADDR_VAR 0 2
54875: PUSH
54876: LD_VAR 0 2
54880: PPUSH
54881: LD_VAR 0 3
54885: PPUSH
54886: CALL 49546 0 2
54890: ST_TO_ADDR
54891: GO 54849
54893: POP
54894: POP
// end ; end_of_file
54895: LD_VAR 0 2
54899: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54900: LD_VAR 0 1
54904: PUSH
54905: LD_INT 200
54907: DOUBLE
54908: GREATEREQUAL
54909: IFFALSE 54917
54911: LD_INT 299
54913: DOUBLE
54914: LESSEQUAL
54915: IFTRUE 54919
54917: GO 54951
54919: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54920: LD_VAR 0 1
54924: PPUSH
54925: LD_VAR 0 2
54929: PPUSH
54930: LD_VAR 0 3
54934: PPUSH
54935: LD_VAR 0 4
54939: PPUSH
54940: LD_VAR 0 5
54944: PPUSH
54945: CALL 55813 0 5
54949: GO 55028
54951: LD_INT 300
54953: DOUBLE
54954: GREATEREQUAL
54955: IFFALSE 54963
54957: LD_INT 399
54959: DOUBLE
54960: LESSEQUAL
54961: IFTRUE 54965
54963: GO 55027
54965: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54966: LD_VAR 0 1
54970: PPUSH
54971: LD_VAR 0 2
54975: PPUSH
54976: LD_VAR 0 3
54980: PPUSH
54981: LD_VAR 0 4
54985: PPUSH
54986: LD_VAR 0 5
54990: PPUSH
54991: LD_VAR 0 6
54995: PPUSH
54996: LD_VAR 0 7
55000: PPUSH
55001: LD_VAR 0 8
55005: PPUSH
55006: LD_VAR 0 9
55010: PPUSH
55011: LD_VAR 0 10
55015: PPUSH
55016: LD_VAR 0 11
55020: PPUSH
55021: CALL 63922 0 11
55025: GO 55028
55027: POP
// end ;
55028: PPOPN 11
55030: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55031: LD_VAR 0 1
55035: PPUSH
55036: LD_VAR 0 2
55040: PPUSH
55041: LD_VAR 0 3
55045: PPUSH
55046: LD_VAR 0 4
55050: PPUSH
55051: LD_VAR 0 5
55055: PPUSH
55056: CALL 55113 0 5
// end ; end_of_file
55060: PPOPN 5
55062: END
// export function SOS_UnitDestroyed ( un ) ; begin
55063: LD_INT 0
55065: PPUSH
// ComRadiation ( un ) ;
55066: LD_VAR 0 1
55070: PPUSH
55071: CALL 56233 0 1
// end ;
55075: LD_VAR 0 2
55079: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55080: LD_INT 0
55082: PPUSH
// ComRadiation ( un ) ;
55083: LD_VAR 0 1
55087: PPUSH
55088: CALL 56233 0 1
// end ;
55092: LD_VAR 0 2
55096: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55097: LD_INT 0
55099: PPUSH
// end ;
55100: LD_VAR 0 4
55104: RET
// export function SOS_Command ( cmd ) ; begin
55105: LD_INT 0
55107: PPUSH
// end ;
55108: LD_VAR 0 2
55112: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55113: LD_INT 0
55115: PPUSH
// end ;
55116: LD_VAR 0 6
55120: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55121: LD_INT 0
55123: PPUSH
55124: PPUSH
55125: PPUSH
55126: PPUSH
55127: PPUSH
// if not vehicle or not factory then
55128: LD_VAR 0 1
55132: NOT
55133: IFTRUE 55142
55135: PUSH
55136: LD_VAR 0 2
55140: NOT
55141: OR
55142: IFFALSE 55146
// exit ;
55144: GO 55808
// weapon := GetWeapon ( vehicle ) ;
55146: LD_ADDR_VAR 0 7
55150: PUSH
55151: LD_VAR 0 1
55155: PPUSH
55156: CALL_OW 264
55160: ST_TO_ADDR
// if weapon = ar_miner then
55161: LD_VAR 0 7
55165: PUSH
55166: LD_INT 81
55168: EQUAL
55169: IFFALSE 55226
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55171: LD_ADDR_EXP 57
55175: PUSH
55176: LD_EXP 57
55180: PPUSH
55181: LD_EXP 57
55185: PUSH
55186: LD_INT 1
55188: PLUS
55189: PPUSH
55190: LD_VAR 0 1
55194: PPUSH
55195: CALL_OW 1
55199: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55200: LD_ADDR_EXP 58
55204: PUSH
55205: LD_EXP 58
55209: PPUSH
55210: LD_EXP 58
55214: PUSH
55215: LD_INT 1
55217: PLUS
55218: PPUSH
55219: EMPTY
55220: PPUSH
55221: CALL_OW 1
55225: ST_TO_ADDR
// end ; if not factoryWaypoints then
55226: LD_EXP 61
55230: NOT
55231: IFFALSE 55235
// exit ;
55233: GO 55808
// for i := 1 to Count ( factoryWaypoints ) do
55235: LD_ADDR_VAR 0 4
55239: PUSH
55240: DOUBLE
55241: LD_INT 1
55243: DEC
55244: ST_TO_ADDR
55245: LD_EXP 61
55249: PPUSH
55250: CALL 13570 0 1
55254: PUSH
55255: FOR_TO
55256: IFFALSE 55806
// if factoryWaypoints [ i ] [ 2 ] = factory then
55258: LD_EXP 61
55262: PUSH
55263: LD_VAR 0 4
55267: ARRAY
55268: PUSH
55269: LD_INT 2
55271: ARRAY
55272: PUSH
55273: LD_VAR 0 2
55277: EQUAL
55278: IFFALSE 55804
// begin if GetControl ( vehicle ) = control_manual then
55280: LD_VAR 0 1
55284: PPUSH
55285: CALL_OW 263
55289: PUSH
55290: LD_INT 1
55292: EQUAL
55293: IFFALSE 55657
// begin driver := IsDrivenBy ( vehicle ) ;
55295: LD_ADDR_VAR 0 5
55299: PUSH
55300: LD_VAR 0 1
55304: PPUSH
55305: CALL_OW 311
55309: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55310: LD_VAR 0 5
55314: PUSH
55315: LD_EXP 62
55319: IN
55320: IFTRUE 55334
55322: PUSH
55323: LD_VAR 0 1
55327: PUSH
55328: LD_EXP 62
55332: IN
55333: OR
55334: IFFALSE 55340
// exit ;
55336: POP
55337: POP
55338: GO 55808
// if not HasTask ( driver ) then
55340: LD_VAR 0 5
55344: PPUSH
55345: CALL_OW 314
55349: NOT
55350: IFFALSE 55655
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55352: LD_ADDR_EXP 62
55356: PUSH
55357: LD_EXP 62
55361: PPUSH
55362: LD_VAR 0 5
55366: PPUSH
55367: CALL 49546 0 2
55371: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55372: LD_ADDR_EXP 62
55376: PUSH
55377: LD_EXP 62
55381: PPUSH
55382: LD_VAR 0 1
55386: PPUSH
55387: CALL 49546 0 2
55391: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55392: LD_ADDR_VAR 0 6
55396: PUSH
55397: LD_EXP 61
55401: PUSH
55402: LD_VAR 0 4
55406: ARRAY
55407: PUSH
55408: LD_INT 3
55410: ARRAY
55411: PPUSH
55412: LD_EXP 61
55416: PUSH
55417: LD_VAR 0 4
55421: ARRAY
55422: PUSH
55423: LD_INT 4
55425: ARRAY
55426: PPUSH
55427: CALL_OW 428
55431: ST_TO_ADDR
// if hex then
55432: LD_VAR 0 6
55436: IFFALSE 55454
// ComMoveUnit ( driver , hex ) else
55438: LD_VAR 0 5
55442: PPUSH
55443: LD_VAR 0 6
55447: PPUSH
55448: CALL_OW 112
55452: GO 55538
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55454: LD_VAR 0 1
55458: PPUSH
55459: LD_EXP 61
55463: PUSH
55464: LD_VAR 0 4
55468: ARRAY
55469: PUSH
55470: LD_INT 3
55472: ARRAY
55473: PPUSH
55474: LD_EXP 61
55478: PUSH
55479: LD_VAR 0 4
55483: ARRAY
55484: PUSH
55485: LD_INT 4
55487: ARRAY
55488: PPUSH
55489: CALL_OW 297
55493: PUSH
55494: LD_INT 0
55496: GREATER
55497: IFFALSE 55538
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55499: LD_VAR 0 5
55503: PPUSH
55504: LD_EXP 61
55508: PUSH
55509: LD_VAR 0 4
55513: ARRAY
55514: PUSH
55515: LD_INT 3
55517: ARRAY
55518: PPUSH
55519: LD_EXP 61
55523: PUSH
55524: LD_VAR 0 4
55528: ARRAY
55529: PUSH
55530: LD_INT 4
55532: ARRAY
55533: PPUSH
55534: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55538: LD_VAR 0 5
55542: PPUSH
55543: CALL_OW 181
// if Multiplayer then
55547: LD_OWVAR 4
55551: IFFALSE 55600
// begin repeat wait ( 10 ) ;
55553: LD_INT 10
55555: PPUSH
55556: CALL_OW 67
// until not IsInUnit ( driver ) ;
55560: LD_VAR 0 5
55564: PPUSH
55565: CALL_OW 310
55569: NOT
55570: IFFALSE 55553
// if not HasTask ( driver ) then
55572: LD_VAR 0 5
55576: PPUSH
55577: CALL_OW 314
55581: NOT
55582: IFFALSE 55598
// ComEnterUnit ( driver , factory ) ;
55584: LD_VAR 0 5
55588: PPUSH
55589: LD_VAR 0 2
55593: PPUSH
55594: CALL_OW 120
// end else
55598: GO 55614
// AddComEnterUnit ( driver , factory ) ;
55600: LD_VAR 0 5
55604: PPUSH
55605: LD_VAR 0 2
55609: PPUSH
55610: CALL_OW 180
// wait ( 0 0$1 ) ;
55614: LD_INT 35
55616: PPUSH
55617: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55621: LD_ADDR_EXP 62
55625: PUSH
55626: LD_EXP 62
55630: PUSH
55631: LD_VAR 0 5
55635: DIFF
55636: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55637: LD_ADDR_EXP 62
55641: PUSH
55642: LD_EXP 62
55646: PUSH
55647: LD_VAR 0 1
55651: DIFF
55652: ST_TO_ADDR
// break ;
55653: GO 55806
// end ; end else
55655: GO 55804
// if GetControl ( vehicle ) = control_remote then
55657: LD_VAR 0 1
55661: PPUSH
55662: CALL_OW 263
55666: PUSH
55667: LD_INT 2
55669: EQUAL
55670: IFFALSE 55756
// begin wait ( 0 0$2 ) ;
55672: LD_INT 70
55674: PPUSH
55675: CALL_OW 67
// repeat wait ( 10 ) ;
55679: LD_INT 10
55681: PPUSH
55682: CALL_OW 67
// Connect ( vehicle ) ;
55686: LD_VAR 0 1
55690: PPUSH
55691: CALL 19848 0 1
// until IsControledBy ( vehicle ) ;
55695: LD_VAR 0 1
55699: PPUSH
55700: CALL_OW 312
55704: IFFALSE 55679
// wait ( 10 ) ;
55706: LD_INT 10
55708: PPUSH
55709: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55713: LD_VAR 0 1
55717: PPUSH
55718: LD_EXP 61
55722: PUSH
55723: LD_VAR 0 4
55727: ARRAY
55728: PUSH
55729: LD_INT 3
55731: ARRAY
55732: PPUSH
55733: LD_EXP 61
55737: PUSH
55738: LD_VAR 0 4
55742: ARRAY
55743: PUSH
55744: LD_INT 4
55746: ARRAY
55747: PPUSH
55748: CALL_OW 111
// break ;
55752: GO 55806
// end else
55754: GO 55804
// begin wait ( 0 0$3 ) ;
55756: LD_INT 105
55758: PPUSH
55759: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55763: LD_VAR 0 1
55767: PPUSH
55768: LD_EXP 61
55772: PUSH
55773: LD_VAR 0 4
55777: ARRAY
55778: PUSH
55779: LD_INT 3
55781: ARRAY
55782: PPUSH
55783: LD_EXP 61
55787: PUSH
55788: LD_VAR 0 4
55792: ARRAY
55793: PUSH
55794: LD_INT 4
55796: ARRAY
55797: PPUSH
55798: CALL_OW 111
// break ;
55802: GO 55806
// end ; end ;
55804: GO 55255
55806: POP
55807: POP
// end ;
55808: LD_VAR 0 3
55812: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55813: LD_INT 0
55815: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55816: LD_VAR 0 1
55820: PUSH
55821: LD_INT 250
55823: EQUAL
55824: IFFALSE 55841
55826: PUSH
55827: LD_VAR 0 2
55831: PPUSH
55832: CALL_OW 264
55836: PUSH
55837: LD_INT 81
55839: EQUAL
55840: AND
55841: IFFALSE 55862
// MinerPlaceMine ( unit , x , y ) ;
55843: LD_VAR 0 2
55847: PPUSH
55848: LD_VAR 0 4
55852: PPUSH
55853: LD_VAR 0 5
55857: PPUSH
55858: CALL 59208 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55862: LD_VAR 0 1
55866: PUSH
55867: LD_INT 251
55869: EQUAL
55870: IFFALSE 55887
55872: PUSH
55873: LD_VAR 0 2
55877: PPUSH
55878: CALL_OW 264
55882: PUSH
55883: LD_INT 81
55885: EQUAL
55886: AND
55887: IFFALSE 55908
// MinerDetonateMine ( unit , x , y ) ;
55889: LD_VAR 0 2
55893: PPUSH
55894: LD_VAR 0 4
55898: PPUSH
55899: LD_VAR 0 5
55903: PPUSH
55904: CALL 59615 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55908: LD_VAR 0 1
55912: PUSH
55913: LD_INT 252
55915: EQUAL
55916: IFFALSE 55933
55918: PUSH
55919: LD_VAR 0 2
55923: PPUSH
55924: CALL_OW 264
55928: PUSH
55929: LD_INT 81
55931: EQUAL
55932: AND
55933: IFFALSE 55954
// MinerCreateMinefield ( unit , x , y ) ;
55935: LD_VAR 0 2
55939: PPUSH
55940: LD_VAR 0 4
55944: PPUSH
55945: LD_VAR 0 5
55949: PPUSH
55950: CALL 59847 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55954: LD_VAR 0 1
55958: PUSH
55959: LD_INT 253
55961: EQUAL
55962: IFFALSE 55979
55964: PUSH
55965: LD_VAR 0 2
55969: PPUSH
55970: CALL_OW 257
55974: PUSH
55975: LD_INT 5
55977: EQUAL
55978: AND
55979: IFFALSE 56000
// ComBinocular ( unit , x , y ) ;
55981: LD_VAR 0 2
55985: PPUSH
55986: LD_VAR 0 4
55990: PPUSH
55991: LD_VAR 0 5
55995: PPUSH
55996: CALL 60222 0 3
// if selectedUnit then
56000: LD_VAR 0 3
56004: IFFALSE 56064
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56006: LD_VAR 0 1
56010: PUSH
56011: LD_INT 254
56013: EQUAL
56014: IFFALSE 56031
56016: PUSH
56017: LD_VAR 0 2
56021: PPUSH
56022: CALL_OW 264
56026: PUSH
56027: LD_INT 99
56029: EQUAL
56030: AND
56031: IFFALSE 56048
56033: PUSH
56034: LD_VAR 0 3
56038: PPUSH
56039: CALL_OW 263
56043: PUSH
56044: LD_INT 3
56046: EQUAL
56047: AND
56048: IFFALSE 56064
// HackDestroyVehicle ( unit , selectedUnit ) ;
56050: LD_VAR 0 2
56054: PPUSH
56055: LD_VAR 0 3
56059: PPUSH
56060: CALL 58398 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56064: LD_VAR 0 1
56068: PUSH
56069: LD_INT 255
56071: EQUAL
56072: IFFALSE 56096
56074: PUSH
56075: LD_VAR 0 2
56079: PPUSH
56080: CALL_OW 264
56084: PUSH
56085: LD_INT 14
56087: PUSH
56088: LD_INT 53
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: IN
56095: AND
56096: IFFALSE 56114
56098: PUSH
56099: LD_VAR 0 4
56103: PPUSH
56104: LD_VAR 0 5
56108: PPUSH
56109: CALL_OW 488
56113: AND
56114: IFFALSE 56138
// CutTreeXYR ( unit , x , y , 12 ) ;
56116: LD_VAR 0 2
56120: PPUSH
56121: LD_VAR 0 4
56125: PPUSH
56126: LD_VAR 0 5
56130: PPUSH
56131: LD_INT 12
56133: PPUSH
56134: CALL 56329 0 4
// if cmd = 256 then
56138: LD_VAR 0 1
56142: PUSH
56143: LD_INT 256
56145: EQUAL
56146: IFFALSE 56167
// SetFactoryWaypoint ( unit , x , y ) ;
56148: LD_VAR 0 2
56152: PPUSH
56153: LD_VAR 0 4
56157: PPUSH
56158: LD_VAR 0 5
56162: PPUSH
56163: CALL 63930 0 3
// if cmd = 257 then
56167: LD_VAR 0 1
56171: PUSH
56172: LD_INT 257
56174: EQUAL
56175: IFFALSE 56196
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56177: LD_VAR 0 2
56181: PPUSH
56182: LD_VAR 0 4
56186: PPUSH
56187: LD_VAR 0 5
56191: PPUSH
56192: CALL 64426 0 3
// if cmd = 258 then
56196: LD_VAR 0 1
56200: PUSH
56201: LD_INT 258
56203: EQUAL
56204: IFFALSE 56228
// BurnTreeXYR ( unit , x , y , 8 ) ;
56206: LD_VAR 0 2
56210: PPUSH
56211: LD_VAR 0 4
56215: PPUSH
56216: LD_VAR 0 5
56220: PPUSH
56221: LD_INT 8
56223: PPUSH
56224: CALL 56751 0 4
// end ;
56228: LD_VAR 0 6
56232: RET
// export function ComRadiation ( un ) ; var eff ; begin
56233: LD_INT 0
56235: PPUSH
56236: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56237: LD_VAR 0 1
56241: PPUSH
56242: CALL_OW 264
56246: PUSH
56247: LD_INT 91
56249: NONEQUAL
56250: IFFALSE 56254
// exit ;
56252: GO 56324
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56254: LD_INT 68
56256: PPUSH
56257: LD_VAR 0 1
56261: PPUSH
56262: CALL_OW 255
56266: PPUSH
56267: CALL_OW 321
56271: PUSH
56272: LD_INT 2
56274: EQUAL
56275: IFFALSE 56287
// eff := 50 else
56277: LD_ADDR_VAR 0 3
56281: PUSH
56282: LD_INT 50
56284: ST_TO_ADDR
56285: GO 56295
// eff := 25 ;
56287: LD_ADDR_VAR 0 3
56291: PUSH
56292: LD_INT 25
56294: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56295: LD_VAR 0 1
56299: PPUSH
56300: CALL_OW 250
56304: PPUSH
56305: LD_VAR 0 1
56309: PPUSH
56310: CALL_OW 251
56314: PPUSH
56315: LD_VAR 0 3
56319: PPUSH
56320: CALL_OW 495
// end ;
56324: LD_VAR 0 2
56328: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56329: LD_INT 0
56331: PPUSH
56332: PPUSH
56333: PPUSH
56334: PPUSH
56335: PPUSH
56336: PPUSH
56337: PPUSH
56338: PPUSH
56339: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56340: LD_VAR 0 1
56344: PPUSH
56345: CALL_OW 302
56349: NOT
56350: IFTRUE 56369
56352: PUSH
56353: LD_VAR 0 2
56357: PPUSH
56358: LD_VAR 0 3
56362: PPUSH
56363: CALL_OW 488
56367: NOT
56368: OR
56369: IFTRUE 56378
56371: PUSH
56372: LD_VAR 0 4
56376: NOT
56377: OR
56378: IFFALSE 56382
// exit ;
56380: GO 56746
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56382: LD_VAR 0 1
56386: PPUSH
56387: CALL_OW 437
56391: PPUSH
56392: CALL 13570 0 1
56396: PUSH
56397: LD_INT 10
56399: GREATER
56400: IFFALSE 56404
// exit ;
56402: GO 56746
// list := [ ] ;
56404: LD_ADDR_VAR 0 13
56408: PUSH
56409: EMPTY
56410: ST_TO_ADDR
// if x - r < 0 then
56411: LD_VAR 0 2
56415: PUSH
56416: LD_VAR 0 4
56420: MINUS
56421: PUSH
56422: LD_INT 0
56424: LESS
56425: IFFALSE 56437
// min_x := 0 else
56427: LD_ADDR_VAR 0 7
56431: PUSH
56432: LD_INT 0
56434: ST_TO_ADDR
56435: GO 56453
// min_x := x - r ;
56437: LD_ADDR_VAR 0 7
56441: PUSH
56442: LD_VAR 0 2
56446: PUSH
56447: LD_VAR 0 4
56451: MINUS
56452: ST_TO_ADDR
// if y - r < 0 then
56453: LD_VAR 0 3
56457: PUSH
56458: LD_VAR 0 4
56462: MINUS
56463: PUSH
56464: LD_INT 0
56466: LESS
56467: IFFALSE 56479
// min_y := 0 else
56469: LD_ADDR_VAR 0 8
56473: PUSH
56474: LD_INT 0
56476: ST_TO_ADDR
56477: GO 56495
// min_y := y - r ;
56479: LD_ADDR_VAR 0 8
56483: PUSH
56484: LD_VAR 0 3
56488: PUSH
56489: LD_VAR 0 4
56493: MINUS
56494: ST_TO_ADDR
// max_x := x + r ;
56495: LD_ADDR_VAR 0 9
56499: PUSH
56500: LD_VAR 0 2
56504: PUSH
56505: LD_VAR 0 4
56509: PLUS
56510: ST_TO_ADDR
// max_y := y + r ;
56511: LD_ADDR_VAR 0 10
56515: PUSH
56516: LD_VAR 0 3
56520: PUSH
56521: LD_VAR 0 4
56525: PLUS
56526: ST_TO_ADDR
// for _x = min_x to max_x do
56527: LD_ADDR_VAR 0 11
56531: PUSH
56532: DOUBLE
56533: LD_VAR 0 7
56537: DEC
56538: ST_TO_ADDR
56539: LD_VAR 0 9
56543: PUSH
56544: FOR_TO
56545: IFFALSE 56664
// for _y = min_y to max_y do
56547: LD_ADDR_VAR 0 12
56551: PUSH
56552: DOUBLE
56553: LD_VAR 0 8
56557: DEC
56558: ST_TO_ADDR
56559: LD_VAR 0 10
56563: PUSH
56564: FOR_TO
56565: IFFALSE 56660
// begin if not ValidHex ( _x , _y ) then
56567: LD_VAR 0 11
56571: PPUSH
56572: LD_VAR 0 12
56576: PPUSH
56577: CALL_OW 488
56581: NOT
56582: IFFALSE 56586
// continue ;
56584: GO 56564
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56586: LD_VAR 0 11
56590: PPUSH
56591: LD_VAR 0 12
56595: PPUSH
56596: CALL_OW 351
56600: IFFALSE 56618
56602: PUSH
56603: LD_VAR 0 11
56607: PPUSH
56608: LD_VAR 0 12
56612: PPUSH
56613: CALL_OW 554
56617: AND
56618: IFFALSE 56658
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56620: LD_ADDR_VAR 0 13
56624: PUSH
56625: LD_VAR 0 13
56629: PPUSH
56630: LD_VAR 0 13
56634: PUSH
56635: LD_INT 1
56637: PLUS
56638: PPUSH
56639: LD_VAR 0 11
56643: PUSH
56644: LD_VAR 0 12
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PPUSH
56653: CALL_OW 2
56657: ST_TO_ADDR
// end ;
56658: GO 56564
56660: POP
56661: POP
56662: GO 56544
56664: POP
56665: POP
// if not list then
56666: LD_VAR 0 13
56670: NOT
56671: IFFALSE 56675
// exit ;
56673: GO 56746
// for i in list do
56675: LD_ADDR_VAR 0 6
56679: PUSH
56680: LD_VAR 0 13
56684: PUSH
56685: FOR_IN
56686: IFFALSE 56744
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56688: LD_VAR 0 1
56692: PPUSH
56693: LD_STRING M
56695: PUSH
56696: LD_VAR 0 6
56700: PUSH
56701: LD_INT 1
56703: ARRAY
56704: PUSH
56705: LD_VAR 0 6
56709: PUSH
56710: LD_INT 2
56712: ARRAY
56713: PUSH
56714: LD_INT 0
56716: PUSH
56717: LD_INT 0
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: PUSH
56735: EMPTY
56736: LIST
56737: PPUSH
56738: CALL_OW 447
56742: GO 56685
56744: POP
56745: POP
// end ;
56746: LD_VAR 0 5
56750: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56751: LD_INT 0
56753: PPUSH
56754: PPUSH
56755: PPUSH
56756: PPUSH
56757: PPUSH
56758: PPUSH
56759: PPUSH
56760: PPUSH
56761: PPUSH
56762: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56763: LD_VAR 0 1
56767: PPUSH
56768: CALL_OW 302
56772: NOT
56773: IFTRUE 56792
56775: PUSH
56776: LD_VAR 0 2
56780: PPUSH
56781: LD_VAR 0 3
56785: PPUSH
56786: CALL_OW 488
56790: NOT
56791: OR
56792: IFTRUE 56801
56794: PUSH
56795: LD_VAR 0 4
56799: NOT
56800: OR
56801: IFFALSE 56805
// exit ;
56803: GO 57344
// if Count ( GetTaskList ( flame ) ) > 10 then
56805: LD_VAR 0 1
56809: PPUSH
56810: CALL_OW 437
56814: PPUSH
56815: CALL 13570 0 1
56819: PUSH
56820: LD_INT 10
56822: GREATER
56823: IFFALSE 56827
// exit ;
56825: GO 57344
// list := [ ] ;
56827: LD_ADDR_VAR 0 13
56831: PUSH
56832: EMPTY
56833: ST_TO_ADDR
// if x - r < 0 then
56834: LD_VAR 0 2
56838: PUSH
56839: LD_VAR 0 4
56843: MINUS
56844: PUSH
56845: LD_INT 0
56847: LESS
56848: IFFALSE 56860
// min_x := 0 else
56850: LD_ADDR_VAR 0 7
56854: PUSH
56855: LD_INT 0
56857: ST_TO_ADDR
56858: GO 56876
// min_x := x - r ;
56860: LD_ADDR_VAR 0 7
56864: PUSH
56865: LD_VAR 0 2
56869: PUSH
56870: LD_VAR 0 4
56874: MINUS
56875: ST_TO_ADDR
// if y - r < 0 then
56876: LD_VAR 0 3
56880: PUSH
56881: LD_VAR 0 4
56885: MINUS
56886: PUSH
56887: LD_INT 0
56889: LESS
56890: IFFALSE 56902
// min_y := 0 else
56892: LD_ADDR_VAR 0 8
56896: PUSH
56897: LD_INT 0
56899: ST_TO_ADDR
56900: GO 56918
// min_y := y - r ;
56902: LD_ADDR_VAR 0 8
56906: PUSH
56907: LD_VAR 0 3
56911: PUSH
56912: LD_VAR 0 4
56916: MINUS
56917: ST_TO_ADDR
// max_x := x + r ;
56918: LD_ADDR_VAR 0 9
56922: PUSH
56923: LD_VAR 0 2
56927: PUSH
56928: LD_VAR 0 4
56932: PLUS
56933: ST_TO_ADDR
// max_y := y + r ;
56934: LD_ADDR_VAR 0 10
56938: PUSH
56939: LD_VAR 0 3
56943: PUSH
56944: LD_VAR 0 4
56948: PLUS
56949: ST_TO_ADDR
// for _x = min_x to max_x do
56950: LD_ADDR_VAR 0 11
56954: PUSH
56955: DOUBLE
56956: LD_VAR 0 7
56960: DEC
56961: ST_TO_ADDR
56962: LD_VAR 0 9
56966: PUSH
56967: FOR_TO
56968: IFFALSE 57087
// for _y = min_y to max_y do
56970: LD_ADDR_VAR 0 12
56974: PUSH
56975: DOUBLE
56976: LD_VAR 0 8
56980: DEC
56981: ST_TO_ADDR
56982: LD_VAR 0 10
56986: PUSH
56987: FOR_TO
56988: IFFALSE 57083
// begin if not ValidHex ( _x , _y ) then
56990: LD_VAR 0 11
56994: PPUSH
56995: LD_VAR 0 12
56999: PPUSH
57000: CALL_OW 488
57004: NOT
57005: IFFALSE 57009
// continue ;
57007: GO 56987
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57009: LD_VAR 0 11
57013: PPUSH
57014: LD_VAR 0 12
57018: PPUSH
57019: CALL_OW 351
57023: IFFALSE 57041
57025: PUSH
57026: LD_VAR 0 11
57030: PPUSH
57031: LD_VAR 0 12
57035: PPUSH
57036: CALL_OW 554
57040: AND
57041: IFFALSE 57081
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57043: LD_ADDR_VAR 0 13
57047: PUSH
57048: LD_VAR 0 13
57052: PPUSH
57053: LD_VAR 0 13
57057: PUSH
57058: LD_INT 1
57060: PLUS
57061: PPUSH
57062: LD_VAR 0 11
57066: PUSH
57067: LD_VAR 0 12
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PPUSH
57076: CALL_OW 2
57080: ST_TO_ADDR
// end ;
57081: GO 56987
57083: POP
57084: POP
57085: GO 56967
57087: POP
57088: POP
// if not list then
57089: LD_VAR 0 13
57093: NOT
57094: IFFALSE 57098
// exit ;
57096: GO 57344
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57098: LD_ADDR_VAR 0 13
57102: PUSH
57103: LD_VAR 0 1
57107: PPUSH
57108: LD_VAR 0 13
57112: PPUSH
57113: LD_INT 1
57115: PPUSH
57116: LD_INT 1
57118: PPUSH
57119: CALL 16976 0 4
57123: ST_TO_ADDR
// ComStop ( flame ) ;
57124: LD_VAR 0 1
57128: PPUSH
57129: CALL_OW 141
// for i in list do
57133: LD_ADDR_VAR 0 6
57137: PUSH
57138: LD_VAR 0 13
57142: PUSH
57143: FOR_IN
57144: IFFALSE 57175
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57146: LD_VAR 0 1
57150: PPUSH
57151: LD_VAR 0 6
57155: PUSH
57156: LD_INT 1
57158: ARRAY
57159: PPUSH
57160: LD_VAR 0 6
57164: PUSH
57165: LD_INT 2
57167: ARRAY
57168: PPUSH
57169: CALL_OW 176
57173: GO 57143
57175: POP
57176: POP
// repeat wait ( 0 0$1 ) ;
57177: LD_INT 35
57179: PPUSH
57180: CALL_OW 67
// task := GetTaskList ( flame ) ;
57184: LD_ADDR_VAR 0 14
57188: PUSH
57189: LD_VAR 0 1
57193: PPUSH
57194: CALL_OW 437
57198: ST_TO_ADDR
// if not task then
57199: LD_VAR 0 14
57203: NOT
57204: IFFALSE 57208
// exit ;
57206: GO 57344
// if task [ 1 ] [ 1 ] <> | then
57208: LD_VAR 0 14
57212: PUSH
57213: LD_INT 1
57215: ARRAY
57216: PUSH
57217: LD_INT 1
57219: ARRAY
57220: PUSH
57221: LD_STRING |
57223: NONEQUAL
57224: IFFALSE 57228
// exit ;
57226: GO 57344
// _x := task [ 1 ] [ 2 ] ;
57228: LD_ADDR_VAR 0 11
57232: PUSH
57233: LD_VAR 0 14
57237: PUSH
57238: LD_INT 1
57240: ARRAY
57241: PUSH
57242: LD_INT 2
57244: ARRAY
57245: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57246: LD_ADDR_VAR 0 12
57250: PUSH
57251: LD_VAR 0 14
57255: PUSH
57256: LD_INT 1
57258: ARRAY
57259: PUSH
57260: LD_INT 3
57262: ARRAY
57263: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57264: LD_VAR 0 11
57268: PPUSH
57269: LD_VAR 0 12
57273: PPUSH
57274: CALL_OW 351
57278: NOT
57279: IFTRUE 57298
57281: PUSH
57282: LD_VAR 0 11
57286: PPUSH
57287: LD_VAR 0 12
57291: PPUSH
57292: CALL_OW 554
57296: NOT
57297: OR
57298: IFFALSE 57332
// begin task := Delete ( task , 1 ) ;
57300: LD_ADDR_VAR 0 14
57304: PUSH
57305: LD_VAR 0 14
57309: PPUSH
57310: LD_INT 1
57312: PPUSH
57313: CALL_OW 3
57317: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57318: LD_VAR 0 1
57322: PPUSH
57323: LD_VAR 0 14
57327: PPUSH
57328: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57332: LD_VAR 0 1
57336: PPUSH
57337: CALL_OW 314
57341: NOT
57342: IFFALSE 57177
// end ;
57344: LD_VAR 0 5
57348: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57349: LD_EXP 50
57353: NOT
57354: IFFALSE 57404
57356: GO 57358
57358: DISABLE
// begin initHack := true ;
57359: LD_ADDR_EXP 50
57363: PUSH
57364: LD_INT 1
57366: ST_TO_ADDR
// hackTanks := [ ] ;
57367: LD_ADDR_EXP 51
57371: PUSH
57372: EMPTY
57373: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57374: LD_ADDR_EXP 52
57378: PUSH
57379: EMPTY
57380: ST_TO_ADDR
// hackLimit := 3 ;
57381: LD_ADDR_EXP 53
57385: PUSH
57386: LD_INT 3
57388: ST_TO_ADDR
// hackDist := 12 ;
57389: LD_ADDR_EXP 54
57393: PUSH
57394: LD_INT 12
57396: ST_TO_ADDR
// hackCounter := [ ] ;
57397: LD_ADDR_EXP 55
57401: PUSH
57402: EMPTY
57403: ST_TO_ADDR
// end ;
57404: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57405: LD_EXP 50
57409: IFFALSE 57427
57411: PUSH
57412: LD_INT 34
57414: PUSH
57415: LD_INT 99
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PPUSH
57422: CALL_OW 69
57426: AND
57427: IFFALSE 57680
57429: GO 57431
57431: DISABLE
57432: LD_INT 0
57434: PPUSH
57435: PPUSH
// begin enable ;
57436: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57437: LD_ADDR_VAR 0 1
57441: PUSH
57442: LD_INT 34
57444: PUSH
57445: LD_INT 99
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PPUSH
57452: CALL_OW 69
57456: PUSH
57457: FOR_IN
57458: IFFALSE 57678
// begin if not i in hackTanks then
57460: LD_VAR 0 1
57464: PUSH
57465: LD_EXP 51
57469: IN
57470: NOT
57471: IFFALSE 57554
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57473: LD_ADDR_EXP 51
57477: PUSH
57478: LD_EXP 51
57482: PPUSH
57483: LD_EXP 51
57487: PUSH
57488: LD_INT 1
57490: PLUS
57491: PPUSH
57492: LD_VAR 0 1
57496: PPUSH
57497: CALL_OW 1
57501: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57502: LD_ADDR_EXP 52
57506: PUSH
57507: LD_EXP 52
57511: PPUSH
57512: LD_EXP 52
57516: PUSH
57517: LD_INT 1
57519: PLUS
57520: PPUSH
57521: EMPTY
57522: PPUSH
57523: CALL_OW 1
57527: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57528: LD_ADDR_EXP 55
57532: PUSH
57533: LD_EXP 55
57537: PPUSH
57538: LD_EXP 55
57542: PUSH
57543: LD_INT 1
57545: PLUS
57546: PPUSH
57547: EMPTY
57548: PPUSH
57549: CALL_OW 1
57553: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57554: LD_VAR 0 1
57558: PPUSH
57559: CALL_OW 302
57563: NOT
57564: IFFALSE 57577
// begin HackUnlinkAll ( i ) ;
57566: LD_VAR 0 1
57570: PPUSH
57571: CALL 57683 0 1
// continue ;
57575: GO 57457
// end ; HackCheckCapturedStatus ( i ) ;
57577: LD_VAR 0 1
57581: PPUSH
57582: CALL 58128 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57586: LD_ADDR_VAR 0 2
57590: PUSH
57591: LD_INT 81
57593: PUSH
57594: LD_VAR 0 1
57598: PPUSH
57599: CALL_OW 255
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 33
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 91
57620: PUSH
57621: LD_VAR 0 1
57625: PUSH
57626: LD_EXP 54
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 50
57638: PUSH
57639: EMPTY
57640: LIST
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: PPUSH
57648: CALL_OW 69
57652: ST_TO_ADDR
// if not tmp then
57653: LD_VAR 0 2
57657: NOT
57658: IFFALSE 57662
// continue ;
57660: GO 57457
// HackLink ( i , tmp ) ;
57662: LD_VAR 0 1
57666: PPUSH
57667: LD_VAR 0 2
57671: PPUSH
57672: CALL 57819 0 2
// end ;
57676: GO 57457
57678: POP
57679: POP
// end ;
57680: PPOPN 2
57682: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57683: LD_INT 0
57685: PPUSH
57686: PPUSH
57687: PPUSH
// if not hack in hackTanks then
57688: LD_VAR 0 1
57692: PUSH
57693: LD_EXP 51
57697: IN
57698: NOT
57699: IFFALSE 57703
// exit ;
57701: GO 57814
// index := GetElementIndex ( hackTanks , hack ) ;
57703: LD_ADDR_VAR 0 4
57707: PUSH
57708: LD_EXP 51
57712: PPUSH
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL 16271 0 2
57722: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57723: LD_EXP 52
57727: PUSH
57728: LD_VAR 0 4
57732: ARRAY
57733: IFFALSE 57814
// begin for i in hackTanksCaptured [ index ] do
57735: LD_ADDR_VAR 0 3
57739: PUSH
57740: LD_EXP 52
57744: PUSH
57745: LD_VAR 0 4
57749: ARRAY
57750: PUSH
57751: FOR_IN
57752: IFFALSE 57778
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57754: LD_VAR 0 3
57758: PUSH
57759: LD_INT 1
57761: ARRAY
57762: PPUSH
57763: LD_VAR 0 3
57767: PUSH
57768: LD_INT 2
57770: ARRAY
57771: PPUSH
57772: CALL_OW 235
57776: GO 57751
57778: POP
57779: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57780: LD_ADDR_EXP 52
57784: PUSH
57785: LD_EXP 52
57789: PPUSH
57790: LD_VAR 0 4
57794: PPUSH
57795: EMPTY
57796: PPUSH
57797: CALL_OW 1
57801: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57802: LD_VAR 0 1
57806: PPUSH
57807: LD_INT 0
57809: PPUSH
57810: CALL_OW 505
// end ; end ;
57814: LD_VAR 0 2
57818: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57819: LD_INT 0
57821: PPUSH
57822: PPUSH
57823: PPUSH
// if not hack in hackTanks or not vehicles then
57824: LD_VAR 0 1
57828: PUSH
57829: LD_EXP 51
57833: IN
57834: NOT
57835: IFTRUE 57844
57837: PUSH
57838: LD_VAR 0 2
57842: NOT
57843: OR
57844: IFFALSE 57848
// exit ;
57846: GO 58123
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57848: LD_ADDR_VAR 0 2
57852: PUSH
57853: LD_VAR 0 1
57857: PPUSH
57858: LD_VAR 0 2
57862: PPUSH
57863: LD_INT 1
57865: PPUSH
57866: LD_INT 1
57868: PPUSH
57869: CALL 16923 0 4
57873: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57874: LD_ADDR_VAR 0 5
57878: PUSH
57879: LD_EXP 51
57883: PPUSH
57884: LD_VAR 0 1
57888: PPUSH
57889: CALL 16271 0 2
57893: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57894: LD_EXP 52
57898: PUSH
57899: LD_VAR 0 5
57903: ARRAY
57904: PUSH
57905: LD_EXP 53
57909: LESS
57910: IFFALSE 58099
// begin for i := 1 to vehicles do
57912: LD_ADDR_VAR 0 4
57916: PUSH
57917: DOUBLE
57918: LD_INT 1
57920: DEC
57921: ST_TO_ADDR
57922: LD_VAR 0 2
57926: PUSH
57927: FOR_TO
57928: IFFALSE 58097
// begin if hackTanksCaptured [ index ] = hackLimit then
57930: LD_EXP 52
57934: PUSH
57935: LD_VAR 0 5
57939: ARRAY
57940: PUSH
57941: LD_EXP 53
57945: EQUAL
57946: IFFALSE 57950
// break ;
57948: GO 58097
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57950: LD_ADDR_EXP 55
57954: PUSH
57955: LD_EXP 55
57959: PPUSH
57960: LD_VAR 0 5
57964: PPUSH
57965: LD_EXP 55
57969: PUSH
57970: LD_VAR 0 5
57974: ARRAY
57975: PUSH
57976: LD_INT 1
57978: PLUS
57979: PPUSH
57980: CALL_OW 1
57984: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57985: LD_ADDR_EXP 52
57989: PUSH
57990: LD_EXP 52
57994: PPUSH
57995: LD_VAR 0 5
57999: PUSH
58000: LD_EXP 52
58004: PUSH
58005: LD_VAR 0 5
58009: ARRAY
58010: PUSH
58011: LD_INT 1
58013: PLUS
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PPUSH
58019: LD_VAR 0 2
58023: PUSH
58024: LD_VAR 0 4
58028: ARRAY
58029: PUSH
58030: LD_VAR 0 2
58034: PUSH
58035: LD_VAR 0 4
58039: ARRAY
58040: PPUSH
58041: CALL_OW 255
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PPUSH
58050: CALL 16488 0 3
58054: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58055: LD_VAR 0 2
58059: PUSH
58060: LD_VAR 0 4
58064: ARRAY
58065: PPUSH
58066: LD_VAR 0 1
58070: PPUSH
58071: CALL_OW 255
58075: PPUSH
58076: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58080: LD_VAR 0 2
58084: PUSH
58085: LD_VAR 0 4
58089: ARRAY
58090: PPUSH
58091: CALL_OW 141
// end ;
58095: GO 57927
58097: POP
58098: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58099: LD_VAR 0 1
58103: PPUSH
58104: LD_EXP 52
58108: PUSH
58109: LD_VAR 0 5
58113: ARRAY
58114: PUSH
58115: LD_INT 0
58117: PLUS
58118: PPUSH
58119: CALL_OW 505
// end ;
58123: LD_VAR 0 3
58127: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58128: LD_INT 0
58130: PPUSH
58131: PPUSH
58132: PPUSH
58133: PPUSH
// if not hack in hackTanks then
58134: LD_VAR 0 1
58138: PUSH
58139: LD_EXP 51
58143: IN
58144: NOT
58145: IFFALSE 58149
// exit ;
58147: GO 58393
// index := GetElementIndex ( hackTanks , hack ) ;
58149: LD_ADDR_VAR 0 4
58153: PUSH
58154: LD_EXP 51
58158: PPUSH
58159: LD_VAR 0 1
58163: PPUSH
58164: CALL 16271 0 2
58168: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58169: LD_ADDR_VAR 0 3
58173: PUSH
58174: DOUBLE
58175: LD_EXP 52
58179: PUSH
58180: LD_VAR 0 4
58184: ARRAY
58185: INC
58186: ST_TO_ADDR
58187: LD_INT 1
58189: PUSH
58190: FOR_DOWNTO
58191: IFFALSE 58367
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58193: LD_ADDR_VAR 0 5
58197: PUSH
58198: LD_EXP 52
58202: PUSH
58203: LD_VAR 0 4
58207: ARRAY
58208: PUSH
58209: LD_VAR 0 3
58213: ARRAY
58214: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58215: LD_VAR 0 5
58219: PUSH
58220: LD_INT 1
58222: ARRAY
58223: PPUSH
58224: CALL_OW 302
58228: NOT
58229: IFTRUE 58257
58231: PUSH
58232: LD_VAR 0 5
58236: PUSH
58237: LD_INT 1
58239: ARRAY
58240: PPUSH
58241: CALL_OW 255
58245: PUSH
58246: LD_VAR 0 1
58250: PPUSH
58251: CALL_OW 255
58255: NONEQUAL
58256: OR
58257: IFFALSE 58365
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58259: LD_VAR 0 5
58263: PUSH
58264: LD_INT 1
58266: ARRAY
58267: PPUSH
58268: CALL_OW 305
58272: IFFALSE 58300
58274: PUSH
58275: LD_VAR 0 5
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: PPUSH
58284: CALL_OW 255
58288: PUSH
58289: LD_VAR 0 1
58293: PPUSH
58294: CALL_OW 255
58298: EQUAL
58299: AND
58300: IFFALSE 58324
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58302: LD_VAR 0 5
58306: PUSH
58307: LD_INT 1
58309: ARRAY
58310: PPUSH
58311: LD_VAR 0 5
58315: PUSH
58316: LD_INT 2
58318: ARRAY
58319: PPUSH
58320: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58324: LD_ADDR_EXP 52
58328: PUSH
58329: LD_EXP 52
58333: PPUSH
58334: LD_VAR 0 4
58338: PPUSH
58339: LD_EXP 52
58343: PUSH
58344: LD_VAR 0 4
58348: ARRAY
58349: PPUSH
58350: LD_VAR 0 3
58354: PPUSH
58355: CALL_OW 3
58359: PPUSH
58360: CALL_OW 1
58364: ST_TO_ADDR
// end ; end ;
58365: GO 58190
58367: POP
58368: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58369: LD_VAR 0 1
58373: PPUSH
58374: LD_EXP 52
58378: PUSH
58379: LD_VAR 0 4
58383: ARRAY
58384: PUSH
58385: LD_INT 0
58387: PLUS
58388: PPUSH
58389: CALL_OW 505
// end ;
58393: LD_VAR 0 2
58397: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58398: LD_INT 0
58400: PPUSH
58401: PPUSH
58402: PPUSH
58403: PPUSH
// if not hack in hackTanks then
58404: LD_VAR 0 1
58408: PUSH
58409: LD_EXP 51
58413: IN
58414: NOT
58415: IFFALSE 58419
// exit ;
58417: GO 58504
// index := GetElementIndex ( hackTanks , hack ) ;
58419: LD_ADDR_VAR 0 5
58423: PUSH
58424: LD_EXP 51
58428: PPUSH
58429: LD_VAR 0 1
58433: PPUSH
58434: CALL 16271 0 2
58438: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58439: LD_ADDR_VAR 0 4
58443: PUSH
58444: DOUBLE
58445: LD_INT 1
58447: DEC
58448: ST_TO_ADDR
58449: LD_EXP 52
58453: PUSH
58454: LD_VAR 0 5
58458: ARRAY
58459: PUSH
58460: FOR_TO
58461: IFFALSE 58502
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58463: LD_EXP 52
58467: PUSH
58468: LD_VAR 0 5
58472: ARRAY
58473: PUSH
58474: LD_VAR 0 4
58478: ARRAY
58479: PUSH
58480: LD_INT 1
58482: ARRAY
58483: PUSH
58484: LD_VAR 0 2
58488: EQUAL
58489: IFFALSE 58500
// KillUnit ( vehicle ) ;
58491: LD_VAR 0 2
58495: PPUSH
58496: CALL_OW 66
58500: GO 58460
58502: POP
58503: POP
// end ;
58504: LD_VAR 0 3
58508: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58509: LD_EXP 56
58513: NOT
58514: IFFALSE 58647
58516: GO 58518
58518: DISABLE
58519: LD_INT 0
58521: PPUSH
// begin initMiner := true ;
58522: LD_ADDR_EXP 56
58526: PUSH
58527: LD_INT 1
58529: ST_TO_ADDR
// minersList := [ ] ;
58530: LD_ADDR_EXP 57
58534: PUSH
58535: EMPTY
58536: ST_TO_ADDR
// minerMinesList := [ ] ;
58537: LD_ADDR_EXP 58
58541: PUSH
58542: EMPTY
58543: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58544: LD_ADDR_EXP 59
58548: PUSH
58549: LD_INT 10
58551: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58552: LD_ADDR_VAR 0 1
58556: PUSH
58557: LD_INT 34
58559: PUSH
58560: LD_INT 81
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PPUSH
58567: CALL_OW 69
58571: PUSH
58572: FOR_IN
58573: IFFALSE 58645
// begin if not i in minersList then
58575: LD_VAR 0 1
58579: PUSH
58580: LD_EXP 57
58584: IN
58585: NOT
58586: IFFALSE 58643
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58588: LD_ADDR_EXP 57
58592: PUSH
58593: LD_EXP 57
58597: PPUSH
58598: LD_EXP 57
58602: PUSH
58603: LD_INT 1
58605: PLUS
58606: PPUSH
58607: LD_VAR 0 1
58611: PPUSH
58612: CALL_OW 1
58616: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58617: LD_ADDR_EXP 58
58621: PUSH
58622: LD_EXP 58
58626: PPUSH
58627: LD_EXP 58
58631: PUSH
58632: LD_INT 1
58634: PLUS
58635: PPUSH
58636: EMPTY
58637: PPUSH
58638: CALL_OW 1
58642: ST_TO_ADDR
// end end ;
58643: GO 58572
58645: POP
58646: POP
// end ;
58647: PPOPN 1
58649: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58650: LD_EXP 56
58654: IFFALSE 58685
58656: PUSH
58657: LD_EXP 58
58661: PPUSH
58662: CALL 13570 0 1
58666: IFTRUE 58684
58668: PUSH
58669: LD_INT 34
58671: PUSH
58672: LD_INT 81
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PPUSH
58679: CALL_OW 69
58683: OR
58684: AND
58685: IFFALSE 59205
58687: GO 58689
58689: DISABLE
58690: LD_INT 0
58692: PPUSH
58693: PPUSH
58694: PPUSH
58695: PPUSH
// begin enable ;
58696: ENABLE
// for i := minerMinesList downto 1 do
58697: LD_ADDR_VAR 0 1
58701: PUSH
58702: DOUBLE
58703: LD_EXP 58
58707: INC
58708: ST_TO_ADDR
58709: LD_INT 1
58711: PUSH
58712: FOR_DOWNTO
58713: IFFALSE 59203
// begin side := GetSide ( minersList [ i ] ) ;
58715: LD_ADDR_VAR 0 3
58719: PUSH
58720: LD_EXP 57
58724: PUSH
58725: LD_VAR 0 1
58729: ARRAY
58730: PPUSH
58731: CALL_OW 255
58735: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58736: LD_EXP 57
58740: PUSH
58741: LD_VAR 0 1
58745: ARRAY
58746: PPUSH
58747: CALL_OW 300
58751: IFFALSE 58772
58753: PUSH
58754: LD_VAR 0 3
58758: PUSH
58759: LD_OWVAR 2
58763: PUSH
58764: LD_INT 9
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: IN
58771: AND
58772: IFFALSE 58805
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58774: LD_EXP 57
58778: PUSH
58779: LD_VAR 0 1
58783: ARRAY
58784: PPUSH
58785: LD_EXP 58
58789: PUSH
58790: LD_VAR 0 1
58794: ARRAY
58795: PPUSH
58796: CALL 13570 0 1
58800: PPUSH
58801: CALL_OW 505
// if not minerMinesList [ i ] then
58805: LD_EXP 58
58809: PUSH
58810: LD_VAR 0 1
58814: ARRAY
58815: NOT
58816: IFFALSE 58820
// continue ;
58818: GO 58712
// for j := minerMinesList [ i ] downto 1 do
58820: LD_ADDR_VAR 0 2
58824: PUSH
58825: DOUBLE
58826: LD_EXP 58
58830: PUSH
58831: LD_VAR 0 1
58835: ARRAY
58836: INC
58837: ST_TO_ADDR
58838: LD_INT 1
58840: PUSH
58841: FOR_DOWNTO
58842: IFFALSE 59199
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58844: LD_EXP 57
58848: PUSH
58849: LD_VAR 0 1
58853: ARRAY
58854: PPUSH
58855: CALL_OW 301
58859: IFTRUE 58879
58861: PUSH
58862: LD_EXP 57
58866: PUSH
58867: LD_VAR 0 1
58871: ARRAY
58872: PPUSH
58873: CALL_OW 305
58877: NOT
58878: OR
58879: IFFALSE 58970
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58881: LD_EXP 58
58885: PUSH
58886: LD_VAR 0 1
58890: ARRAY
58891: PUSH
58892: LD_VAR 0 2
58896: ARRAY
58897: PUSH
58898: LD_INT 1
58900: ARRAY
58901: PPUSH
58902: LD_EXP 58
58906: PUSH
58907: LD_VAR 0 1
58911: ARRAY
58912: PUSH
58913: LD_VAR 0 2
58917: ARRAY
58918: PUSH
58919: LD_INT 2
58921: ARRAY
58922: PPUSH
58923: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58927: LD_ADDR_EXP 58
58931: PUSH
58932: LD_EXP 58
58936: PPUSH
58937: LD_VAR 0 1
58941: PPUSH
58942: LD_EXP 58
58946: PUSH
58947: LD_VAR 0 1
58951: ARRAY
58952: PPUSH
58953: LD_VAR 0 2
58957: PPUSH
58958: CALL_OW 3
58962: PPUSH
58963: CALL_OW 1
58967: ST_TO_ADDR
// continue ;
58968: GO 58841
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58970: LD_ADDR_VAR 0 4
58974: PUSH
58975: LD_EXP 58
58979: PUSH
58980: LD_VAR 0 1
58984: ARRAY
58985: PUSH
58986: LD_VAR 0 2
58990: ARRAY
58991: PUSH
58992: LD_INT 1
58994: ARRAY
58995: PPUSH
58996: LD_EXP 58
59000: PUSH
59001: LD_VAR 0 1
59005: ARRAY
59006: PUSH
59007: LD_VAR 0 2
59011: ARRAY
59012: PUSH
59013: LD_INT 2
59015: ARRAY
59016: PPUSH
59017: CALL_OW 428
59021: ST_TO_ADDR
// if not tmp then
59022: LD_VAR 0 4
59026: NOT
59027: IFFALSE 59031
// continue ;
59029: GO 58841
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59031: LD_VAR 0 4
59035: PUSH
59036: LD_INT 81
59038: PUSH
59039: LD_VAR 0 3
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PPUSH
59048: CALL_OW 69
59052: IN
59053: IFFALSE 59103
59055: PUSH
59056: LD_EXP 58
59060: PUSH
59061: LD_VAR 0 1
59065: ARRAY
59066: PUSH
59067: LD_VAR 0 2
59071: ARRAY
59072: PUSH
59073: LD_INT 1
59075: ARRAY
59076: PPUSH
59077: LD_EXP 58
59081: PUSH
59082: LD_VAR 0 1
59086: ARRAY
59087: PUSH
59088: LD_VAR 0 2
59092: ARRAY
59093: PUSH
59094: LD_INT 2
59096: ARRAY
59097: PPUSH
59098: CALL_OW 458
59102: AND
59103: IFFALSE 59197
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59105: LD_EXP 58
59109: PUSH
59110: LD_VAR 0 1
59114: ARRAY
59115: PUSH
59116: LD_VAR 0 2
59120: ARRAY
59121: PUSH
59122: LD_INT 1
59124: ARRAY
59125: PPUSH
59126: LD_EXP 58
59130: PUSH
59131: LD_VAR 0 1
59135: ARRAY
59136: PUSH
59137: LD_VAR 0 2
59141: ARRAY
59142: PUSH
59143: LD_INT 2
59145: ARRAY
59146: PPUSH
59147: LD_VAR 0 3
59151: PPUSH
59152: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59156: LD_ADDR_EXP 58
59160: PUSH
59161: LD_EXP 58
59165: PPUSH
59166: LD_VAR 0 1
59170: PPUSH
59171: LD_EXP 58
59175: PUSH
59176: LD_VAR 0 1
59180: ARRAY
59181: PPUSH
59182: LD_VAR 0 2
59186: PPUSH
59187: CALL_OW 3
59191: PPUSH
59192: CALL_OW 1
59196: ST_TO_ADDR
// end ; end ;
59197: GO 58841
59199: POP
59200: POP
// end ;
59201: GO 58712
59203: POP
59204: POP
// end ;
59205: PPOPN 4
59207: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59208: LD_INT 0
59210: PPUSH
59211: PPUSH
59212: PPUSH
59213: PPUSH
// result := false ;
59214: LD_ADDR_VAR 0 4
59218: PUSH
59219: LD_INT 0
59221: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59222: LD_VAR 0 1
59226: PPUSH
59227: CALL_OW 264
59231: PUSH
59232: LD_INT 81
59234: EQUAL
59235: NOT
59236: IFFALSE 59240
// exit ;
59238: GO 59610
// side := GetSide ( unit ) ;
59240: LD_ADDR_VAR 0 6
59244: PUSH
59245: LD_VAR 0 1
59249: PPUSH
59250: CALL_OW 255
59254: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59255: LD_ADDR_VAR 0 5
59259: PUSH
59260: LD_EXP 57
59264: PPUSH
59265: LD_VAR 0 1
59269: PPUSH
59270: CALL 16271 0 2
59274: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59275: LD_EXP 58
59279: PUSH
59280: LD_VAR 0 5
59284: ARRAY
59285: PUSH
59286: LD_EXP 59
59290: GREATEREQUAL
59291: IFFALSE 59295
// exit ;
59293: GO 59610
// ComMoveXY ( unit , x , y ) ;
59295: LD_VAR 0 1
59299: PPUSH
59300: LD_VAR 0 2
59304: PPUSH
59305: LD_VAR 0 3
59309: PPUSH
59310: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59314: LD_INT 35
59316: PPUSH
59317: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59321: LD_VAR 0 1
59325: PPUSH
59326: LD_VAR 0 2
59330: PPUSH
59331: LD_VAR 0 3
59335: PPUSH
59336: CALL 48327 0 3
59340: NOT
59341: IFFALSE 59354
59343: PUSH
59344: LD_VAR 0 1
59348: PPUSH
59349: CALL_OW 314
59353: AND
59354: IFFALSE 59358
// exit ;
59356: GO 59610
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59358: LD_VAR 0 2
59362: PPUSH
59363: LD_VAR 0 3
59367: PPUSH
59368: CALL_OW 428
59372: PUSH
59373: LD_VAR 0 1
59377: EQUAL
59378: IFFALSE 59392
59380: PUSH
59381: LD_VAR 0 1
59385: PPUSH
59386: CALL_OW 314
59390: NOT
59391: AND
59392: IFFALSE 59314
// if MineAtPos ( x , y ) then
59394: LD_VAR 0 2
59398: PPUSH
59399: LD_VAR 0 3
59403: PPUSH
59404: CALL_OW 458
59408: IFFALSE 59412
// exit ;
59410: GO 59610
// if your_side = side then
59412: LD_OWVAR 2
59416: PUSH
59417: LD_VAR 0 6
59421: EQUAL
59422: IFFALSE 59441
// PlaySoundXY ( x , y , PlantMine ) ;
59424: LD_VAR 0 2
59428: PPUSH
59429: LD_VAR 0 3
59433: PPUSH
59434: LD_STRING PlantMine
59436: PPUSH
59437: CALL_OW 366
// repeat wait ( 1 ) ;
59441: LD_INT 1
59443: PPUSH
59444: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59448: LD_VAR 0 2
59452: PPUSH
59453: LD_VAR 0 3
59457: PPUSH
59458: LD_VAR 0 6
59462: PPUSH
59463: LD_INT 0
59465: PPUSH
59466: CALL_OW 454
59470: IFFALSE 59441
// if MineAtPos ( x , y ) then
59472: LD_VAR 0 2
59476: PPUSH
59477: LD_VAR 0 3
59481: PPUSH
59482: CALL_OW 458
59486: IFFALSE 59602
// begin for i in minerMinesList [ index ] do
59488: LD_ADDR_VAR 0 7
59492: PUSH
59493: LD_EXP 58
59497: PUSH
59498: LD_VAR 0 5
59502: ARRAY
59503: PUSH
59504: FOR_IN
59505: IFFALSE 59547
// if i [ 1 ] = x and i [ 2 ] = y then
59507: LD_VAR 0 7
59511: PUSH
59512: LD_INT 1
59514: ARRAY
59515: PUSH
59516: LD_VAR 0 2
59520: EQUAL
59521: IFFALSE 59539
59523: PUSH
59524: LD_VAR 0 7
59528: PUSH
59529: LD_INT 2
59531: ARRAY
59532: PUSH
59533: LD_VAR 0 3
59537: EQUAL
59538: AND
59539: IFFALSE 59545
// exit ;
59541: POP
59542: POP
59543: GO 59610
59545: GO 59504
59547: POP
59548: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59549: LD_ADDR_EXP 58
59553: PUSH
59554: LD_EXP 58
59558: PPUSH
59559: LD_VAR 0 5
59563: PUSH
59564: LD_EXP 58
59568: PUSH
59569: LD_VAR 0 5
59573: ARRAY
59574: PUSH
59575: LD_INT 1
59577: PLUS
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PPUSH
59583: LD_VAR 0 2
59587: PUSH
59588: LD_VAR 0 3
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PPUSH
59597: CALL 16488 0 3
59601: ST_TO_ADDR
// end ; result := true ;
59602: LD_ADDR_VAR 0 4
59606: PUSH
59607: LD_INT 1
59609: ST_TO_ADDR
// end ;
59610: LD_VAR 0 4
59614: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59615: LD_INT 0
59617: PPUSH
59618: PPUSH
59619: PPUSH
// if not unit in minersList then
59620: LD_VAR 0 1
59624: PUSH
59625: LD_EXP 57
59629: IN
59630: NOT
59631: IFFALSE 59635
// exit ;
59633: GO 59842
// index := GetElementIndex ( minersList , unit ) ;
59635: LD_ADDR_VAR 0 6
59639: PUSH
59640: LD_EXP 57
59644: PPUSH
59645: LD_VAR 0 1
59649: PPUSH
59650: CALL 16271 0 2
59654: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59655: LD_ADDR_VAR 0 5
59659: PUSH
59660: DOUBLE
59661: LD_EXP 58
59665: PUSH
59666: LD_VAR 0 6
59670: ARRAY
59671: INC
59672: ST_TO_ADDR
59673: LD_INT 1
59675: PUSH
59676: FOR_DOWNTO
59677: IFFALSE 59840
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59679: LD_EXP 58
59683: PUSH
59684: LD_VAR 0 6
59688: ARRAY
59689: PUSH
59690: LD_VAR 0 5
59694: ARRAY
59695: PUSH
59696: LD_INT 1
59698: ARRAY
59699: PPUSH
59700: LD_EXP 58
59704: PUSH
59705: LD_VAR 0 6
59709: ARRAY
59710: PUSH
59711: LD_VAR 0 5
59715: ARRAY
59716: PUSH
59717: LD_INT 2
59719: ARRAY
59720: PPUSH
59721: LD_VAR 0 2
59725: PPUSH
59726: LD_VAR 0 3
59730: PPUSH
59731: CALL_OW 298
59735: PUSH
59736: LD_INT 6
59738: LESS
59739: IFFALSE 59838
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59741: LD_EXP 58
59745: PUSH
59746: LD_VAR 0 6
59750: ARRAY
59751: PUSH
59752: LD_VAR 0 5
59756: ARRAY
59757: PUSH
59758: LD_INT 1
59760: ARRAY
59761: PPUSH
59762: LD_EXP 58
59766: PUSH
59767: LD_VAR 0 6
59771: ARRAY
59772: PUSH
59773: LD_VAR 0 5
59777: ARRAY
59778: PUSH
59779: LD_INT 2
59781: ARRAY
59782: PPUSH
59783: LD_VAR 0 1
59787: PPUSH
59788: CALL_OW 255
59792: PPUSH
59793: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59797: LD_ADDR_EXP 58
59801: PUSH
59802: LD_EXP 58
59806: PPUSH
59807: LD_VAR 0 6
59811: PPUSH
59812: LD_EXP 58
59816: PUSH
59817: LD_VAR 0 6
59821: ARRAY
59822: PPUSH
59823: LD_VAR 0 5
59827: PPUSH
59828: CALL_OW 3
59832: PPUSH
59833: CALL_OW 1
59837: ST_TO_ADDR
// end ; end ;
59838: GO 59676
59840: POP
59841: POP
// end ;
59842: LD_VAR 0 4
59846: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59847: LD_INT 0
59849: PPUSH
59850: PPUSH
59851: PPUSH
59852: PPUSH
59853: PPUSH
59854: PPUSH
59855: PPUSH
59856: PPUSH
59857: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59858: LD_VAR 0 1
59862: PPUSH
59863: CALL_OW 264
59867: PUSH
59868: LD_INT 81
59870: EQUAL
59871: NOT
59872: IFTRUE 59887
59874: PUSH
59875: LD_VAR 0 1
59879: PUSH
59880: LD_EXP 57
59884: IN
59885: NOT
59886: OR
59887: IFFALSE 59891
// exit ;
59889: GO 60217
// index := GetElementIndex ( minersList , unit ) ;
59891: LD_ADDR_VAR 0 6
59895: PUSH
59896: LD_EXP 57
59900: PPUSH
59901: LD_VAR 0 1
59905: PPUSH
59906: CALL 16271 0 2
59910: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59911: LD_ADDR_VAR 0 8
59915: PUSH
59916: LD_EXP 59
59920: PUSH
59921: LD_EXP 58
59925: PUSH
59926: LD_VAR 0 6
59930: ARRAY
59931: MINUS
59932: ST_TO_ADDR
// if not minesFreeAmount then
59933: LD_VAR 0 8
59937: NOT
59938: IFFALSE 59942
// exit ;
59940: GO 60217
// tmp := [ ] ;
59942: LD_ADDR_VAR 0 7
59946: PUSH
59947: EMPTY
59948: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59949: LD_ADDR_VAR 0 5
59953: PUSH
59954: DOUBLE
59955: LD_INT 1
59957: DEC
59958: ST_TO_ADDR
59959: LD_VAR 0 8
59963: PUSH
59964: FOR_TO
59965: IFFALSE 60164
// begin _d := rand ( 0 , 5 ) ;
59967: LD_ADDR_VAR 0 11
59971: PUSH
59972: LD_INT 0
59974: PPUSH
59975: LD_INT 5
59977: PPUSH
59978: CALL_OW 12
59982: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59983: LD_ADDR_VAR 0 12
59987: PUSH
59988: LD_INT 2
59990: PPUSH
59991: LD_INT 6
59993: PPUSH
59994: CALL_OW 12
59998: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59999: LD_ADDR_VAR 0 9
60003: PUSH
60004: LD_VAR 0 2
60008: PPUSH
60009: LD_VAR 0 11
60013: PPUSH
60014: LD_VAR 0 12
60018: PPUSH
60019: CALL_OW 272
60023: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60024: LD_ADDR_VAR 0 10
60028: PUSH
60029: LD_VAR 0 3
60033: PPUSH
60034: LD_VAR 0 11
60038: PPUSH
60039: LD_VAR 0 12
60043: PPUSH
60044: CALL_OW 273
60048: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60049: LD_VAR 0 9
60053: PPUSH
60054: LD_VAR 0 10
60058: PPUSH
60059: CALL_OW 488
60063: IFFALSE 60087
60065: PUSH
60066: LD_VAR 0 9
60070: PUSH
60071: LD_VAR 0 10
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_VAR 0 7
60084: IN
60085: NOT
60086: AND
60087: IFFALSE 60106
60089: PUSH
60090: LD_VAR 0 9
60094: PPUSH
60095: LD_VAR 0 10
60099: PPUSH
60100: CALL_OW 458
60104: NOT
60105: AND
60106: IFFALSE 60148
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60108: LD_ADDR_VAR 0 7
60112: PUSH
60113: LD_VAR 0 7
60117: PPUSH
60118: LD_VAR 0 7
60122: PUSH
60123: LD_INT 1
60125: PLUS
60126: PPUSH
60127: LD_VAR 0 9
60131: PUSH
60132: LD_VAR 0 10
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PPUSH
60141: CALL_OW 1
60145: ST_TO_ADDR
60146: GO 60162
// i := i - 1 ;
60148: LD_ADDR_VAR 0 5
60152: PUSH
60153: LD_VAR 0 5
60157: PUSH
60158: LD_INT 1
60160: MINUS
60161: ST_TO_ADDR
// end ;
60162: GO 59964
60164: POP
60165: POP
// for i in tmp do
60166: LD_ADDR_VAR 0 5
60170: PUSH
60171: LD_VAR 0 7
60175: PUSH
60176: FOR_IN
60177: IFFALSE 60215
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60179: LD_VAR 0 1
60183: PPUSH
60184: LD_VAR 0 5
60188: PUSH
60189: LD_INT 1
60191: ARRAY
60192: PPUSH
60193: LD_VAR 0 5
60197: PUSH
60198: LD_INT 2
60200: ARRAY
60201: PPUSH
60202: CALL 59208 0 3
60206: NOT
60207: IFFALSE 60213
// exit ;
60209: POP
60210: POP
60211: GO 60217
60213: GO 60176
60215: POP
60216: POP
// end ;
60217: LD_VAR 0 4
60221: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60222: LD_INT 0
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
// if GetClass ( unit ) <> class_sniper then
60233: LD_VAR 0 1
60237: PPUSH
60238: CALL_OW 257
60242: PUSH
60243: LD_INT 5
60245: NONEQUAL
60246: IFFALSE 60250
// exit ;
60248: GO 60720
// dist := 8 ;
60250: LD_ADDR_VAR 0 5
60254: PUSH
60255: LD_INT 8
60257: ST_TO_ADDR
// viewRange := 12 ;
60258: LD_ADDR_VAR 0 8
60262: PUSH
60263: LD_INT 12
60265: ST_TO_ADDR
// side := GetSide ( unit ) ;
60266: LD_ADDR_VAR 0 6
60270: PUSH
60271: LD_VAR 0 1
60275: PPUSH
60276: CALL_OW 255
60280: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60281: LD_INT 61
60283: PPUSH
60284: LD_VAR 0 6
60288: PPUSH
60289: CALL_OW 321
60293: PUSH
60294: LD_INT 2
60296: EQUAL
60297: IFFALSE 60307
// viewRange := 16 ;
60299: LD_ADDR_VAR 0 8
60303: PUSH
60304: LD_INT 16
60306: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60307: LD_VAR 0 1
60311: PPUSH
60312: LD_VAR 0 2
60316: PPUSH
60317: LD_VAR 0 3
60321: PPUSH
60322: CALL_OW 297
60326: PUSH
60327: LD_VAR 0 5
60331: GREATER
60332: IFFALSE 60411
// begin ComMoveXY ( unit , x , y ) ;
60334: LD_VAR 0 1
60338: PPUSH
60339: LD_VAR 0 2
60343: PPUSH
60344: LD_VAR 0 3
60348: PPUSH
60349: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60353: LD_INT 35
60355: PPUSH
60356: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60360: LD_VAR 0 1
60364: PPUSH
60365: LD_VAR 0 2
60369: PPUSH
60370: LD_VAR 0 3
60374: PPUSH
60375: CALL 48327 0 3
60379: NOT
60380: IFFALSE 60384
// exit ;
60382: GO 60720
// until GetDistUnitXY ( unit , x , y ) < dist ;
60384: LD_VAR 0 1
60388: PPUSH
60389: LD_VAR 0 2
60393: PPUSH
60394: LD_VAR 0 3
60398: PPUSH
60399: CALL_OW 297
60403: PUSH
60404: LD_VAR 0 5
60408: LESS
60409: IFFALSE 60353
// end ; ComTurnXY ( unit , x , y ) ;
60411: LD_VAR 0 1
60415: PPUSH
60416: LD_VAR 0 2
60420: PPUSH
60421: LD_VAR 0 3
60425: PPUSH
60426: CALL_OW 118
// repeat if Multiplayer then
60430: LD_OWVAR 4
60434: IFFALSE 60445
// wait ( 35 ) else
60436: LD_INT 35
60438: PPUSH
60439: CALL_OW 67
60443: GO 60452
// wait ( 5 ) ;
60445: LD_INT 5
60447: PPUSH
60448: CALL_OW 67
// _d := GetDir ( unit ) ;
60452: LD_ADDR_VAR 0 11
60456: PUSH
60457: LD_VAR 0 1
60461: PPUSH
60462: CALL_OW 254
60466: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60467: LD_ADDR_VAR 0 7
60471: PUSH
60472: LD_VAR 0 1
60476: PPUSH
60477: CALL_OW 250
60481: PPUSH
60482: LD_VAR 0 1
60486: PPUSH
60487: CALL_OW 251
60491: PPUSH
60492: LD_VAR 0 2
60496: PPUSH
60497: LD_VAR 0 3
60501: PPUSH
60502: CALL 50963 0 4
60506: ST_TO_ADDR
// until dir = _d ;
60507: LD_VAR 0 7
60511: PUSH
60512: LD_VAR 0 11
60516: EQUAL
60517: IFFALSE 60430
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60519: LD_ADDR_VAR 0 9
60523: PUSH
60524: LD_VAR 0 1
60528: PPUSH
60529: CALL_OW 250
60533: PPUSH
60534: LD_VAR 0 7
60538: PPUSH
60539: LD_VAR 0 5
60543: PPUSH
60544: CALL_OW 272
60548: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60549: LD_ADDR_VAR 0 10
60553: PUSH
60554: LD_VAR 0 1
60558: PPUSH
60559: CALL_OW 251
60563: PPUSH
60564: LD_VAR 0 7
60568: PPUSH
60569: LD_VAR 0 5
60573: PPUSH
60574: CALL_OW 273
60578: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60579: LD_VAR 0 9
60583: PPUSH
60584: LD_VAR 0 10
60588: PPUSH
60589: CALL_OW 488
60593: NOT
60594: IFFALSE 60598
// exit ;
60596: GO 60720
// ComAnimCustom ( unit , 1 ) ;
60598: LD_VAR 0 1
60602: PPUSH
60603: LD_INT 1
60605: PPUSH
60606: CALL_OW 592
// p := 0 ;
60610: LD_ADDR_VAR 0 12
60614: PUSH
60615: LD_INT 0
60617: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60618: LD_VAR 0 9
60622: PPUSH
60623: LD_VAR 0 10
60627: PPUSH
60628: LD_VAR 0 6
60632: PPUSH
60633: LD_VAR 0 8
60637: PPUSH
60638: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60642: LD_INT 35
60644: PPUSH
60645: CALL_OW 67
// p := Inc ( p ) ;
60649: LD_ADDR_VAR 0 12
60653: PUSH
60654: LD_VAR 0 12
60658: PPUSH
60659: CALL 50919 0 1
60663: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60664: LD_VAR 0 12
60668: PUSH
60669: LD_INT 3
60671: EQUAL
60672: IFTRUE 60686
60674: PUSH
60675: LD_VAR 0 1
60679: PPUSH
60680: CALL_OW 302
60684: NOT
60685: OR
60686: IFTRUE 60699
60688: PUSH
60689: LD_VAR 0 1
60693: PPUSH
60694: CALL_OW 301
60698: OR
60699: IFFALSE 60642
// RemoveSeeing ( _x , _y , side ) ;
60701: LD_VAR 0 9
60705: PPUSH
60706: LD_VAR 0 10
60710: PPUSH
60711: LD_VAR 0 6
60715: PPUSH
60716: CALL_OW 331
// end ;
60720: LD_VAR 0 4
60724: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60725: LD_INT 0
60727: PPUSH
60728: PPUSH
60729: PPUSH
60730: PPUSH
60731: PPUSH
60732: PPUSH
60733: PPUSH
60734: PPUSH
60735: PPUSH
60736: PPUSH
60737: PPUSH
// if not unit then
60738: LD_VAR 0 1
60742: NOT
60743: IFFALSE 60747
// exit ;
60745: GO 61018
// side := GetSide ( unit ) ;
60747: LD_ADDR_VAR 0 3
60751: PUSH
60752: LD_VAR 0 1
60756: PPUSH
60757: CALL_OW 255
60761: ST_TO_ADDR
// x := GetX ( unit ) ;
60762: LD_ADDR_VAR 0 5
60766: PUSH
60767: LD_VAR 0 1
60771: PPUSH
60772: CALL_OW 250
60776: ST_TO_ADDR
// y := GetY ( unit ) ;
60777: LD_ADDR_VAR 0 6
60781: PUSH
60782: LD_VAR 0 1
60786: PPUSH
60787: CALL_OW 251
60791: ST_TO_ADDR
// r := 8 ;
60792: LD_ADDR_VAR 0 4
60796: PUSH
60797: LD_INT 8
60799: ST_TO_ADDR
// if x - r < 0 then
60800: LD_VAR 0 5
60804: PUSH
60805: LD_VAR 0 4
60809: MINUS
60810: PUSH
60811: LD_INT 0
60813: LESS
60814: IFFALSE 60826
// min_x := 0 else
60816: LD_ADDR_VAR 0 7
60820: PUSH
60821: LD_INT 0
60823: ST_TO_ADDR
60824: GO 60842
// min_x := x - r ;
60826: LD_ADDR_VAR 0 7
60830: PUSH
60831: LD_VAR 0 5
60835: PUSH
60836: LD_VAR 0 4
60840: MINUS
60841: ST_TO_ADDR
// if y - r < 0 then
60842: LD_VAR 0 6
60846: PUSH
60847: LD_VAR 0 4
60851: MINUS
60852: PUSH
60853: LD_INT 0
60855: LESS
60856: IFFALSE 60868
// min_y := 0 else
60858: LD_ADDR_VAR 0 8
60862: PUSH
60863: LD_INT 0
60865: ST_TO_ADDR
60866: GO 60884
// min_y := y - r ;
60868: LD_ADDR_VAR 0 8
60872: PUSH
60873: LD_VAR 0 6
60877: PUSH
60878: LD_VAR 0 4
60882: MINUS
60883: ST_TO_ADDR
// max_x := x + r ;
60884: LD_ADDR_VAR 0 9
60888: PUSH
60889: LD_VAR 0 5
60893: PUSH
60894: LD_VAR 0 4
60898: PLUS
60899: ST_TO_ADDR
// max_y := y + r ;
60900: LD_ADDR_VAR 0 10
60904: PUSH
60905: LD_VAR 0 6
60909: PUSH
60910: LD_VAR 0 4
60914: PLUS
60915: ST_TO_ADDR
// for _x = min_x to max_x do
60916: LD_ADDR_VAR 0 11
60920: PUSH
60921: DOUBLE
60922: LD_VAR 0 7
60926: DEC
60927: ST_TO_ADDR
60928: LD_VAR 0 9
60932: PUSH
60933: FOR_TO
60934: IFFALSE 61016
// for _y = min_y to max_y do
60936: LD_ADDR_VAR 0 12
60940: PUSH
60941: DOUBLE
60942: LD_VAR 0 8
60946: DEC
60947: ST_TO_ADDR
60948: LD_VAR 0 10
60952: PUSH
60953: FOR_TO
60954: IFFALSE 61012
// begin if not ValidHex ( _x , _y ) then
60956: LD_VAR 0 11
60960: PPUSH
60961: LD_VAR 0 12
60965: PPUSH
60966: CALL_OW 488
60970: NOT
60971: IFFALSE 60975
// continue ;
60973: GO 60953
// if MineAtPos ( _x , _y ) then
60975: LD_VAR 0 11
60979: PPUSH
60980: LD_VAR 0 12
60984: PPUSH
60985: CALL_OW 458
60989: IFFALSE 61010
// ViewMineAtPos ( _x , _y , side ) ;
60991: LD_VAR 0 11
60995: PPUSH
60996: LD_VAR 0 12
61000: PPUSH
61001: LD_VAR 0 3
61005: PPUSH
61006: CALL_OW 457
// end ;
61010: GO 60953
61012: POP
61013: POP
61014: GO 60933
61016: POP
61017: POP
// end ;
61018: LD_VAR 0 2
61022: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
61023: LD_INT 0
61025: PPUSH
61026: PPUSH
61027: PPUSH
61028: PPUSH
61029: PPUSH
61030: PPUSH
61031: PPUSH
// if not units then
61032: LD_VAR 0 1
61036: NOT
61037: IFFALSE 61041
// exit ;
61039: GO 61505
// scaners := [ ] ;
61041: LD_ADDR_VAR 0 6
61045: PUSH
61046: EMPTY
61047: ST_TO_ADDR
// for i in units do
61048: LD_ADDR_VAR 0 3
61052: PUSH
61053: LD_VAR 0 1
61057: PUSH
61058: FOR_IN
61059: IFFALSE 61216
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
61061: LD_VAR 0 3
61065: PPUSH
61066: CALL_OW 264
61070: PUSH
61071: LD_INT 11
61073: NONEQUAL
61074: IFTRUE 61088
61076: PUSH
61077: LD_VAR 0 3
61081: PPUSH
61082: CALL_OW 302
61086: NOT
61087: OR
61088: IFTRUE 61105
61090: PUSH
61091: LD_VAR 0 3
61095: PPUSH
61096: CALL_OW 110
61100: PUSH
61101: LD_INT 502
61103: EQUAL
61104: OR
61105: IFFALSE 61109
// continue ;
61107: GO 61058
// ComStop ( i ) ;
61109: LD_VAR 0 3
61113: PPUSH
61114: CALL_OW 141
// x := GetX ( i ) ;
61118: LD_ADDR_VAR 0 4
61122: PUSH
61123: LD_VAR 0 3
61127: PPUSH
61128: CALL_OW 250
61132: ST_TO_ADDR
// y := GetY ( i ) ;
61133: LD_ADDR_VAR 0 5
61137: PUSH
61138: LD_VAR 0 3
61142: PPUSH
61143: CALL_OW 251
61147: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61148: LD_VAR 0 3
61152: PPUSH
61153: CALL_OW 255
61157: PUSH
61158: LD_OWVAR 2
61162: EQUAL
61163: IFFALSE 61182
// PlaySoundXY ( x , y , mineDetector ) ;
61165: LD_VAR 0 4
61169: PPUSH
61170: LD_VAR 0 5
61174: PPUSH
61175: LD_STRING mineDetector
61177: PPUSH
61178: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61182: LD_ADDR_VAR 0 6
61186: PUSH
61187: LD_VAR 0 6
61191: PPUSH
61192: LD_VAR 0 3
61196: PPUSH
61197: CALL 49546 0 2
61201: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61202: LD_VAR 0 3
61206: PPUSH
61207: LD_INT 502
61209: PPUSH
61210: CALL_OW 109
// end ;
61214: GO 61058
61216: POP
61217: POP
// if not scaners then
61218: LD_VAR 0 6
61222: NOT
61223: IFFALSE 61227
// exit ;
61225: GO 61505
// wait ( 3 ) ;
61227: LD_INT 3
61229: PPUSH
61230: CALL_OW 67
// timer := 6 ;
61234: LD_ADDR_VAR 0 7
61238: PUSH
61239: LD_INT 6
61241: ST_TO_ADDR
// repeat for i in scaners do
61242: LD_ADDR_VAR 0 3
61246: PUSH
61247: LD_VAR 0 6
61251: PUSH
61252: FOR_IN
61253: IFFALSE 61403
// begin side := GetSide ( i ) ;
61255: LD_ADDR_VAR 0 8
61259: PUSH
61260: LD_VAR 0 3
61264: PPUSH
61265: CALL_OW 255
61269: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61270: LD_VAR 0 3
61274: PPUSH
61275: CALL_OW 302
61279: NOT
61280: IFTRUE 61293
61282: PUSH
61283: LD_VAR 0 3
61287: PPUSH
61288: CALL_OW 314
61292: OR
61293: IFTRUE 61324
61295: PUSH
61296: LD_VAR 0 3
61300: PPUSH
61301: CALL_OW 263
61305: PUSH
61306: LD_INT 1
61308: EQUAL
61309: IFFALSE 61323
61311: PUSH
61312: LD_VAR 0 3
61316: PPUSH
61317: CALL_OW 311
61321: NOT
61322: AND
61323: OR
61324: IFFALSE 61368
// begin SetUnitDisplayNumber ( i , 0 ) ;
61326: LD_VAR 0 3
61330: PPUSH
61331: LD_INT 0
61333: PPUSH
61334: CALL_OW 505
// SetTag ( i , 0 ) ;
61338: LD_VAR 0 3
61342: PPUSH
61343: LD_INT 0
61345: PPUSH
61346: CALL_OW 109
// scaners := scaners diff i ;
61350: LD_ADDR_VAR 0 6
61354: PUSH
61355: LD_VAR 0 6
61359: PUSH
61360: LD_VAR 0 3
61364: DIFF
61365: ST_TO_ADDR
// continue ;
61366: GO 61252
// end ; if side in [ your_side , 9 ] then
61368: LD_VAR 0 8
61372: PUSH
61373: LD_OWVAR 2
61377: PUSH
61378: LD_INT 9
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: IN
61385: IFFALSE 61401
// SetUnitDisplayNumber ( i , timer ) ;
61387: LD_VAR 0 3
61391: PPUSH
61392: LD_VAR 0 7
61396: PPUSH
61397: CALL_OW 505
// end ;
61401: GO 61252
61403: POP
61404: POP
// if not scaners then
61405: LD_VAR 0 6
61409: NOT
61410: IFFALSE 61414
// exit ;
61412: GO 61505
// timer := Dec ( timer ) ;
61414: LD_ADDR_VAR 0 7
61418: PUSH
61419: LD_VAR 0 7
61423: PPUSH
61424: CALL 50941 0 1
61428: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61429: LD_INT 35
61431: PPUSH
61432: CALL_OW 67
// until timer = 0 ;
61436: LD_VAR 0 7
61440: PUSH
61441: LD_INT 0
61443: EQUAL
61444: IFFALSE 61242
// if not scaners then
61446: LD_VAR 0 6
61450: NOT
61451: IFFALSE 61455
// exit ;
61453: GO 61505
// for i in scaners do
61455: LD_ADDR_VAR 0 3
61459: PUSH
61460: LD_VAR 0 6
61464: PUSH
61465: FOR_IN
61466: IFFALSE 61503
// begin SetUnitDisplayNumber ( i , 0 ) ;
61468: LD_VAR 0 3
61472: PPUSH
61473: LD_INT 0
61475: PPUSH
61476: CALL_OW 505
// SetTag ( i , 0 ) ;
61480: LD_VAR 0 3
61484: PPUSH
61485: LD_INT 0
61487: PPUSH
61488: CALL_OW 109
// RevealDetectorMine ( i ) ;
61492: LD_VAR 0 3
61496: PPUSH
61497: CALL 60725 0 1
// end ;
61501: GO 61465
61503: POP
61504: POP
// end ;
61505: LD_VAR 0 2
61509: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61510: LD_INT 0
61512: PPUSH
// if p1 = mine_detector_mode then
61513: LD_VAR 0 2
61517: PUSH
61518: LD_INT 103
61520: EQUAL
61521: IFFALSE 61532
// DetectMine ( units ) ;
61523: LD_VAR 0 1
61527: PPUSH
61528: CALL 61023 0 1
// end ; end_of_file
61532: LD_VAR 0 7
61536: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61537: LD_EXP 39
61541: IFFALSE 61882
61543: GO 61545
61545: DISABLE
61546: LD_INT 0
61548: PPUSH
61549: PPUSH
61550: PPUSH
// begin mpKingPoints := [ ] ;
61551: LD_ADDR_EXP 60
61555: PUSH
61556: EMPTY
61557: ST_TO_ADDR
// if mpTeamGame then
61558: LD_EXP 11
61562: IFFALSE 61616
// begin for i := 1 to Count ( mpTeams ) do
61564: LD_ADDR_VAR 0 1
61568: PUSH
61569: DOUBLE
61570: LD_INT 1
61572: DEC
61573: ST_TO_ADDR
61574: LD_EXP 10
61578: PPUSH
61579: CALL 13570 0 1
61583: PUSH
61584: FOR_TO
61585: IFFALSE 61612
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61587: LD_ADDR_EXP 60
61591: PUSH
61592: LD_EXP 60
61596: PPUSH
61597: LD_VAR 0 1
61601: PPUSH
61602: LD_INT 0
61604: PPUSH
61605: CALL_OW 1
61609: ST_TO_ADDR
61610: GO 61584
61612: POP
61613: POP
// end else
61614: GO 61659
// begin for i := 1 to 8 do
61616: LD_ADDR_VAR 0 1
61620: PUSH
61621: DOUBLE
61622: LD_INT 1
61624: DEC
61625: ST_TO_ADDR
61626: LD_INT 8
61628: PUSH
61629: FOR_TO
61630: IFFALSE 61657
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61632: LD_ADDR_EXP 60
61636: PUSH
61637: LD_EXP 60
61641: PPUSH
61642: LD_VAR 0 1
61646: PPUSH
61647: LD_INT 0
61649: PPUSH
61650: CALL_OW 1
61654: ST_TO_ADDR
61655: GO 61629
61657: POP
61658: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61659: LD_ADDR_VAR 0 3
61663: PUSH
61664: LD_EXP 2
61668: PPUSH
61669: LD_INT 0
61671: PPUSH
61672: CALL_OW 517
61676: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61677: LD_ADDR_VAR 0 1
61681: PUSH
61682: DOUBLE
61683: LD_INT 1
61685: DEC
61686: ST_TO_ADDR
61687: LD_VAR 0 3
61691: PUSH
61692: LD_INT 1
61694: ARRAY
61695: PUSH
61696: FOR_TO
61697: IFFALSE 61764
// for j := 1 to 8 do
61699: LD_ADDR_VAR 0 2
61703: PUSH
61704: DOUBLE
61705: LD_INT 1
61707: DEC
61708: ST_TO_ADDR
61709: LD_INT 8
61711: PUSH
61712: FOR_TO
61713: IFFALSE 61760
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61715: LD_VAR 0 3
61719: PUSH
61720: LD_INT 1
61722: ARRAY
61723: PUSH
61724: LD_VAR 0 1
61728: ARRAY
61729: PPUSH
61730: LD_VAR 0 3
61734: PUSH
61735: LD_INT 2
61737: ARRAY
61738: PUSH
61739: LD_VAR 0 1
61743: ARRAY
61744: PPUSH
61745: LD_VAR 0 2
61749: PPUSH
61750: LD_INT 12
61752: NEG
61753: PPUSH
61754: CALL_OW 330
61758: GO 61712
61760: POP
61761: POP
61762: GO 61696
61764: POP
61765: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61766: LD_EXP 34
61770: PPUSH
61771: LD_INT 1
61773: PPUSH
61774: CALL_OW 424
// UpdateCounter ;
61778: CALL 62388 0 0
// repeat wait ( 0 0$1 ) ;
61782: LD_INT 35
61784: PPUSH
61785: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61789: LD_ADDR_VAR 0 3
61793: PUSH
61794: LD_EXP 34
61798: PPUSH
61799: LD_INT 3
61801: PUSH
61802: LD_INT 57
61804: PUSH
61805: EMPTY
61806: LIST
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 50
61814: PUSH
61815: EMPTY
61816: LIST
61817: PUSH
61818: LD_INT 2
61820: PUSH
61821: LD_INT 30
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 30
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: LIST
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: LIST
61850: PPUSH
61851: CALL_OW 70
61855: ST_TO_ADDR
// if not tmp then
61856: LD_VAR 0 3
61860: NOT
61861: IFFALSE 61865
// continue ;
61863: GO 61782
// AddPoints ( tmp ) ;
61865: LD_VAR 0 3
61869: PPUSH
61870: CALL 62066 0 1
// UpdateCounter ;
61874: CALL 62388 0 0
// until false ;
61878: LD_INT 0
61880: IFFALSE 61782
// end ;
61882: PPOPN 3
61884: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61885: LD_EXP 39
61889: IFFALSE 61897
61891: PUSH
61892: LD_EXP 37
61896: AND
61897: IFFALSE 62063
61899: GO 61901
61901: DISABLE
61902: LD_INT 0
61904: PPUSH
61905: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61906: LD_ADDR_VAR 0 2
61910: PUSH
61911: LD_EXP 2
61915: PPUSH
61916: LD_INT 0
61918: PPUSH
61919: CALL_OW 517
61923: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61924: LD_ADDR_VAR 0 1
61928: PUSH
61929: DOUBLE
61930: LD_INT 1
61932: DEC
61933: ST_TO_ADDR
61934: LD_VAR 0 2
61938: PUSH
61939: LD_INT 1
61941: ARRAY
61942: PUSH
61943: FOR_TO
61944: IFFALSE 61985
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61946: LD_VAR 0 2
61950: PUSH
61951: LD_INT 1
61953: ARRAY
61954: PUSH
61955: LD_VAR 0 1
61959: ARRAY
61960: PPUSH
61961: LD_VAR 0 2
61965: PUSH
61966: LD_INT 2
61968: ARRAY
61969: PUSH
61970: LD_VAR 0 1
61974: ARRAY
61975: PPUSH
61976: LD_INT 125
61978: PPUSH
61979: CALL_OW 495
61983: GO 61943
61985: POP
61986: POP
// repeat wait ( mpEmissions ) ;
61987: LD_EXP 37
61991: PPUSH
61992: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61996: LD_ADDR_VAR 0 1
62000: PUSH
62001: DOUBLE
62002: LD_INT 1
62004: DEC
62005: ST_TO_ADDR
62006: LD_VAR 0 2
62010: PUSH
62011: LD_INT 1
62013: ARRAY
62014: PUSH
62015: FOR_TO
62016: IFFALSE 62057
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
62018: LD_VAR 0 2
62022: PUSH
62023: LD_INT 1
62025: ARRAY
62026: PUSH
62027: LD_VAR 0 1
62031: ARRAY
62032: PPUSH
62033: LD_VAR 0 2
62037: PUSH
62038: LD_INT 2
62040: ARRAY
62041: PUSH
62042: LD_VAR 0 1
62046: ARRAY
62047: PPUSH
62048: LD_INT 15
62050: PPUSH
62051: CALL_OW 495
62055: GO 62015
62057: POP
62058: POP
// until false ;
62059: LD_INT 0
62061: IFFALSE 61987
// end ;
62063: PPOPN 2
62065: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
62066: LD_INT 0
62068: PPUSH
62069: PPUSH
62070: PPUSH
62071: PPUSH
62072: PPUSH
// if mpTeamGame then
62073: LD_EXP 11
62077: IFFALSE 62274
// begin first := depots [ 1 ] ;
62079: LD_ADDR_VAR 0 4
62083: PUSH
62084: LD_VAR 0 1
62088: PUSH
62089: LD_INT 1
62091: ARRAY
62092: ST_TO_ADDR
// side := GetSide ( first ) ;
62093: LD_ADDR_VAR 0 6
62097: PUSH
62098: LD_VAR 0 4
62102: PPUSH
62103: CALL_OW 255
62107: ST_TO_ADDR
// for i := 1 to mpTeams do
62108: LD_ADDR_VAR 0 3
62112: PUSH
62113: DOUBLE
62114: LD_INT 1
62116: DEC
62117: ST_TO_ADDR
62118: LD_EXP 10
62122: PUSH
62123: FOR_TO
62124: IFFALSE 62158
// if side in mpTeams [ i ] then
62126: LD_VAR 0 6
62130: PUSH
62131: LD_EXP 10
62135: PUSH
62136: LD_VAR 0 3
62140: ARRAY
62141: IN
62142: IFFALSE 62156
// begin team := i ;
62144: LD_ADDR_VAR 0 5
62148: PUSH
62149: LD_VAR 0 3
62153: ST_TO_ADDR
// break ;
62154: GO 62158
// end ;
62156: GO 62123
62158: POP
62159: POP
// if not team then
62160: LD_VAR 0 5
62164: NOT
62165: IFFALSE 62169
// exit ;
62167: GO 62383
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62169: LD_EXP 34
62173: PPUSH
62174: LD_INT 81
62176: PUSH
62177: LD_VAR 0 6
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PPUSH
62186: CALL_OW 70
62190: IFFALSE 62194
// exit ;
62192: GO 62383
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62194: LD_ADDR_EXP 60
62198: PUSH
62199: LD_EXP 60
62203: PPUSH
62204: LD_VAR 0 5
62208: PPUSH
62209: LD_EXP 60
62213: PUSH
62214: LD_VAR 0 5
62218: ARRAY
62219: PUSH
62220: LD_INT 1
62222: PLUS
62223: PPUSH
62224: CALL_OW 1
62228: ST_TO_ADDR
// for i in mpTeams [ team ] do
62229: LD_ADDR_VAR 0 3
62233: PUSH
62234: LD_EXP 10
62238: PUSH
62239: LD_VAR 0 5
62243: ARRAY
62244: PUSH
62245: FOR_IN
62246: IFFALSE 62270
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62248: LD_VAR 0 3
62252: PPUSH
62253: LD_EXP 60
62257: PUSH
62258: LD_VAR 0 5
62262: ARRAY
62263: PPUSH
62264: CALL_OW 506
62268: GO 62245
62270: POP
62271: POP
// end else
62272: GO 62383
// begin first := depots [ 1 ] ;
62274: LD_ADDR_VAR 0 4
62278: PUSH
62279: LD_VAR 0 1
62283: PUSH
62284: LD_INT 1
62286: ARRAY
62287: ST_TO_ADDR
// side := GetSide ( first ) ;
62288: LD_ADDR_VAR 0 6
62292: PUSH
62293: LD_VAR 0 4
62297: PPUSH
62298: CALL_OW 255
62302: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62303: LD_EXP 34
62307: PPUSH
62308: LD_INT 81
62310: PUSH
62311: LD_VAR 0 6
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PPUSH
62320: CALL_OW 70
62324: IFFALSE 62328
// exit ;
62326: GO 62383
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62328: LD_ADDR_EXP 60
62332: PUSH
62333: LD_EXP 60
62337: PPUSH
62338: LD_VAR 0 6
62342: PPUSH
62343: LD_EXP 60
62347: PUSH
62348: LD_VAR 0 6
62352: ARRAY
62353: PUSH
62354: LD_INT 1
62356: PLUS
62357: PPUSH
62358: CALL_OW 1
62362: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62363: LD_VAR 0 6
62367: PPUSH
62368: LD_EXP 60
62372: PUSH
62373: LD_VAR 0 6
62377: ARRAY
62378: PPUSH
62379: CALL_OW 506
// end ; end ;
62383: LD_VAR 0 2
62387: RET
// function UpdateCounter ; var i ; begin
62388: LD_INT 0
62390: PPUSH
62391: PPUSH
// result := [ ] ;
62392: LD_ADDR_VAR 0 1
62396: PUSH
62397: EMPTY
62398: ST_TO_ADDR
// if mpTeamGame then
62399: LD_EXP 11
62403: IFFALSE 62470
// begin for i := 1 to mpTeams do
62405: LD_ADDR_VAR 0 2
62409: PUSH
62410: DOUBLE
62411: LD_INT 1
62413: DEC
62414: ST_TO_ADDR
62415: LD_EXP 10
62419: PUSH
62420: FOR_TO
62421: IFFALSE 62466
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62423: LD_ADDR_VAR 0 1
62427: PUSH
62428: LD_VAR 0 1
62432: PUSH
62433: LD_STRING #KingoftheHill-Team
62435: PUSH
62436: LD_VAR 0 2
62440: PUSH
62441: LD_EXP 60
62445: PUSH
62446: LD_VAR 0 2
62450: ARRAY
62451: PUSH
62452: LD_EXP 35
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: ADD
62463: ST_TO_ADDR
62464: GO 62420
62466: POP
62467: POP
// end else
62468: GO 62543
// begin for i := 1 to 8 do
62470: LD_ADDR_VAR 0 2
62474: PUSH
62475: DOUBLE
62476: LD_INT 1
62478: DEC
62479: ST_TO_ADDR
62480: LD_INT 8
62482: PUSH
62483: FOR_TO
62484: IFFALSE 62541
// if mpSidePositions [ i ] then
62486: LD_EXP 7
62490: PUSH
62491: LD_VAR 0 2
62495: ARRAY
62496: IFFALSE 62539
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62498: LD_ADDR_VAR 0 1
62502: PUSH
62503: LD_VAR 0 1
62507: PUSH
62508: LD_STRING #KingoftheHill-Player
62510: PUSH
62511: LD_VAR 0 2
62515: PUSH
62516: LD_EXP 60
62520: PUSH
62521: LD_VAR 0 2
62525: ARRAY
62526: PUSH
62527: LD_EXP 35
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: ADD
62538: ST_TO_ADDR
62539: GO 62483
62541: POP
62542: POP
// end ; mpDisplayStrings := result ;
62543: LD_ADDR_EXP 38
62547: PUSH
62548: LD_VAR 0 1
62552: ST_TO_ADDR
// end ;
62553: LD_VAR 0 1
62557: RET
// export function HowMuchPointsKing ( side ) ; begin
62558: LD_INT 0
62560: PPUSH
// result := HowMuchPoints ( side ) ;
62561: LD_ADDR_VAR 0 2
62565: PUSH
62566: LD_VAR 0 1
62570: PPUSH
62571: CALL 62581 0 1
62575: ST_TO_ADDR
// end ;
62576: LD_VAR 0 2
62580: RET
// function HowMuchPoints ( side ) ; var i ; begin
62581: LD_INT 0
62583: PPUSH
62584: PPUSH
// if mpTeamGame then
62585: LD_EXP 11
62589: IFFALSE 62658
// begin for i := 1 to Count ( mpTeams ) do
62591: LD_ADDR_VAR 0 3
62595: PUSH
62596: DOUBLE
62597: LD_INT 1
62599: DEC
62600: ST_TO_ADDR
62601: LD_EXP 10
62605: PPUSH
62606: CALL 13570 0 1
62610: PUSH
62611: FOR_TO
62612: IFFALSE 62654
// begin if side in mpTeams [ i ] then
62614: LD_VAR 0 1
62618: PUSH
62619: LD_EXP 10
62623: PUSH
62624: LD_VAR 0 3
62628: ARRAY
62629: IN
62630: IFFALSE 62652
// begin result := mpKingPoints [ i ] ;
62632: LD_ADDR_VAR 0 2
62636: PUSH
62637: LD_EXP 60
62641: PUSH
62642: LD_VAR 0 3
62646: ARRAY
62647: ST_TO_ADDR
// exit ;
62648: POP
62649: POP
62650: GO 62674
// end ; end ;
62652: GO 62611
62654: POP
62655: POP
// end else
62656: GO 62674
// result := mpKingPoints [ side ] ;
62658: LD_ADDR_VAR 0 2
62662: PUSH
62663: LD_EXP 60
62667: PUSH
62668: LD_VAR 0 1
62672: ARRAY
62673: ST_TO_ADDR
// end ;
62674: LD_VAR 0 2
62678: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62679: LD_EXP 39
62683: IFFALSE 62691
62685: PUSH
62686: CALL 63103 0 0
62690: AND
62691: IFFALSE 62699
62693: PUSH
62694: LD_OWVAR 4
62698: AND
62699: IFFALSE 62952
62701: GO 62703
62703: DISABLE
62704: LD_INT 0
62706: PPUSH
62707: PPUSH
// begin canWin := false ;
62708: LD_ADDR_VAR 0 2
62712: PUSH
62713: LD_INT 0
62715: ST_TO_ADDR
// if not HasPower ( your_side ) then
62716: LD_OWVAR 2
62720: PPUSH
62721: CALL 63145 0 1
62725: NOT
62726: IFFALSE 62737
// begin Multiplayer_Loose_Message ;
62728: CALL_OW 521
// enable ( mpLose ) ;
62732: LD_INT 102
62734: ENABLE_MARKED
// end else
62735: GO 62952
// begin if not EnemiesInGame then
62737: CALL 62955 0 0
62741: NOT
62742: IFFALSE 62749
// begin enable ( mpWin ) ;
62744: LD_INT 101
62746: ENABLE_MARKED
// exit ;
62747: GO 62952
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62749: LD_ADDR_VAR 0 2
62753: PUSH
62754: LD_OWVAR 2
62758: PPUSH
62759: CALL 62581 0 1
62763: PUSH
62764: LD_EXP 35
62768: GREATEREQUAL
62769: IFFALSE 62782
62771: PUSH
62772: LD_OWVAR 2
62776: PPUSH
62777: CALL 63145 0 1
62781: AND
62782: ST_TO_ADDR
// for i := 1 to 8 do
62783: LD_ADDR_VAR 0 1
62787: PUSH
62788: DOUBLE
62789: LD_INT 1
62791: DEC
62792: ST_TO_ADDR
62793: LD_INT 8
62795: PUSH
62796: FOR_TO
62797: IFFALSE 62938
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62799: LD_EXP 7
62803: PUSH
62804: LD_VAR 0 1
62808: ARRAY
62809: IFFALSE 62822
62811: PUSH
62812: LD_VAR 0 1
62816: PPUSH
62817: CALL_OW 108
62821: AND
62822: IFFALSE 62836
62824: PUSH
62825: LD_VAR 0 1
62829: PUSH
62830: LD_OWVAR 2
62834: NONEQUAL
62835: AND
62836: IFFALSE 62936
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62838: LD_EXP 8
62842: PUSH
62843: LD_VAR 0 1
62847: ARRAY
62848: NOT
62849: IFTRUE 62897
62851: PUSH
62852: LD_EXP 8
62856: PUSH
62857: LD_VAR 0 1
62861: ARRAY
62862: PUSH
62863: LD_EXP 8
62867: PUSH
62868: LD_OWVAR 2
62872: ARRAY
62873: NONEQUAL
62874: IFFALSE 62896
62876: PUSH
62877: LD_OWVAR 2
62881: PPUSH
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL_OW 81
62891: PUSH
62892: LD_INT 1
62894: NONEQUAL
62895: AND
62896: OR
62897: IFFALSE 62936
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62899: LD_VAR 0 1
62903: PPUSH
62904: CALL 62581 0 1
62908: PUSH
62909: LD_EXP 35
62913: GREATEREQUAL
62914: IFFALSE 62927
62916: PUSH
62917: LD_VAR 0 1
62921: PPUSH
62922: CALL 63145 0 1
62926: AND
62927: IFFALSE 62936
// begin enable ( mpLose ) ;
62929: LD_INT 102
62931: ENABLE_MARKED
// exit ;
62932: POP
62933: POP
62934: GO 62952
// end ;
62936: GO 62796
62938: POP
62939: POP
// if canWin then
62940: LD_VAR 0 2
62944: IFFALSE 62951
// enable ( mpWin ) else
62946: LD_INT 101
62948: ENABLE_MARKED
62949: GO 62952
// enable ;
62951: ENABLE
// end ; end ;
62952: PPOPN 2
62954: END
// function EnemiesInGame ; var i ; begin
62955: LD_INT 0
62957: PPUSH
62958: PPUSH
// result := false ;
62959: LD_ADDR_VAR 0 1
62963: PUSH
62964: LD_INT 0
62966: ST_TO_ADDR
// for i := 1 to 8 do
62967: LD_ADDR_VAR 0 2
62971: PUSH
62972: DOUBLE
62973: LD_INT 1
62975: DEC
62976: ST_TO_ADDR
62977: LD_INT 8
62979: PUSH
62980: FOR_TO
62981: IFFALSE 63096
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62983: LD_VAR 0 2
62987: PUSH
62988: LD_OWVAR 2
62992: NONEQUAL
62993: IFFALSE 63006
62995: PUSH
62996: LD_VAR 0 2
63000: PPUSH
63001: CALL 63145 0 1
63005: AND
63006: IFFALSE 63019
63008: PUSH
63009: LD_VAR 0 2
63013: PPUSH
63014: CALL_OW 108
63018: AND
63019: IFFALSE 63094
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63021: LD_EXP 8
63025: PUSH
63026: LD_VAR 0 2
63030: ARRAY
63031: NOT
63032: IFTRUE 63080
63034: PUSH
63035: LD_EXP 8
63039: PUSH
63040: LD_VAR 0 2
63044: ARRAY
63045: PUSH
63046: LD_EXP 8
63050: PUSH
63051: LD_OWVAR 2
63055: ARRAY
63056: NONEQUAL
63057: IFFALSE 63079
63059: PUSH
63060: LD_OWVAR 2
63064: PPUSH
63065: LD_VAR 0 2
63069: PPUSH
63070: CALL_OW 81
63074: PUSH
63075: LD_INT 1
63077: NONEQUAL
63078: AND
63079: OR
63080: IFFALSE 63094
// begin result := true ;
63082: LD_ADDR_VAR 0 1
63086: PUSH
63087: LD_INT 1
63089: ST_TO_ADDR
// exit ;
63090: POP
63091: POP
63092: GO 63098
// end ;
63094: GO 62980
63096: POP
63097: POP
// end ;
63098: LD_VAR 0 1
63102: RET
// function CanWinLoose ; begin
63103: LD_INT 0
63105: PPUSH
// result := true ;
63106: LD_ADDR_VAR 0 1
63110: PUSH
63111: LD_INT 1
63113: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63114: CALL_OW 531
63118: IFFALSE 63130
63120: PUSH
63121: CALL_OW 519
63125: PUSH
63126: LD_INT 1
63128: GREATER
63129: AND
63130: IFFALSE 63140
// result := false ;
63132: LD_ADDR_VAR 0 1
63136: PUSH
63137: LD_INT 0
63139: ST_TO_ADDR
// end ;
63140: LD_VAR 0 1
63144: RET
// function HasPower ( i ) ; begin
63145: LD_INT 0
63147: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63148: LD_ADDR_VAR 0 2
63152: PUSH
63153: LD_INT 22
63155: PUSH
63156: LD_VAR 0 1
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: LD_INT 2
63167: PUSH
63168: LD_INT 21
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 33
63180: PUSH
63181: LD_INT 3
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 33
63190: PUSH
63191: LD_INT 5
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PPUSH
63208: CALL_OW 69
63212: ST_TO_ADDR
// end ; end_of_file
63213: LD_VAR 0 2
63217: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63218: PPOPN 6
63220: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63221: LD_INT 0
63223: PPUSH
// begin if not units then
63224: LD_VAR 0 1
63228: NOT
63229: IFFALSE 63233
// exit ;
63231: GO 63267
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63233: LD_VAR 0 1
63237: PPUSH
63238: LD_VAR 0 2
63242: PPUSH
63243: LD_VAR 0 3
63247: PPUSH
63248: LD_VAR 0 4
63252: PPUSH
63253: LD_VAR 0 5
63257: PPUSH
63258: LD_VAR 0 6
63262: PPUSH
63263: CALL 61510 0 6
// end ;
63267: PPOPN 7
63269: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63270: LD_EXP 3
63274: PUSH
63275: LD_INT 4
63277: EQUAL
63278: IFFALSE 63314
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63280: LD_STRING setGameDifficulty(
63282: PUSH
63283: LD_OWVAR 67
63287: STR
63288: PUSH
63289: LD_STRING )
63291: STR
63292: PPUSH
63293: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63297: LD_STRING displayDifficulty(
63299: PUSH
63300: LD_OWVAR 67
63304: STR
63305: PUSH
63306: LD_STRING )
63308: STR
63309: PPUSH
63310: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63314: CALL 63343 0 0
// end ; end_of_file
63318: PPOPN 1
63320: END
// every 0 0$1 do
63321: GO 63323
63323: DISABLE
// begin enable ;
63324: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63325: LD_STRING updateTimer(
63327: PUSH
63328: LD_OWVAR 1
63332: STR
63333: PUSH
63334: LD_STRING );
63336: STR
63337: PPUSH
63338: CALL_OW 559
// end ;
63342: END
// export function SOS_MapStart ( ) ; begin
63343: LD_INT 0
63345: PPUSH
// UpdateFactoryWaypoints ( ) ;
63346: CALL 64284 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63350: CALL 64536 0 0
// ParseMultiDataToLua ( ) ;
63354: CALL 64683 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63358: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63360: PPUSH
63361: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63365: LD_STRING setSpecLogoNumber(
63367: PUSH
63368: LD_INT 2
63370: STR
63371: PUSH
63372: LD_STRING ,
63374: STR
63375: PUSH
63376: LD_INT 1
63378: STR
63379: PUSH
63380: LD_STRING )
63382: STR
63383: PPUSH
63384: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63388: LD_STRING setSpecLogoNumber(
63390: PUSH
63391: LD_INT 3
63393: STR
63394: PUSH
63395: LD_STRING ,
63397: STR
63398: PUSH
63399: LD_INT 2
63401: STR
63402: PUSH
63403: LD_STRING )
63405: STR
63406: PPUSH
63407: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63411: LD_STRING setSpecLogoNumber(
63413: PUSH
63414: LD_INT 4
63416: STR
63417: PUSH
63418: LD_STRING ,
63420: STR
63421: PUSH
63422: LD_INT 3
63424: STR
63425: PUSH
63426: LD_STRING )
63428: STR
63429: PPUSH
63430: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63434: LD_STRING setSpecLogoNumber(
63436: PUSH
63437: LD_INT 5
63439: STR
63440: PUSH
63441: LD_STRING ,
63443: STR
63444: PUSH
63445: LD_INT 4
63447: STR
63448: PUSH
63449: LD_STRING )
63451: STR
63452: PPUSH
63453: CALL_OW 559
// end ;
63457: LD_VAR 0 1
63461: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63462: LD_INT 0
63464: PPUSH
63465: PPUSH
63466: PPUSH
63467: PPUSH
63468: PPUSH
63469: PPUSH
63470: PPUSH
63471: PPUSH
63472: PPUSH
// for i := 1 to 8 do
63473: LD_ADDR_VAR 0 2
63477: PUSH
63478: DOUBLE
63479: LD_INT 1
63481: DEC
63482: ST_TO_ADDR
63483: LD_INT 8
63485: PUSH
63486: FOR_TO
63487: IFFALSE 63872
// begin if mpSidePositions [ i ] then
63489: LD_EXP 7
63493: PUSH
63494: LD_VAR 0 2
63498: ARRAY
63499: IFFALSE 63870
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63501: LD_ADDR_VAR 0 7
63505: PUSH
63506: LD_INT 22
63508: PUSH
63509: LD_VAR 0 2
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 21
63520: PUSH
63521: LD_INT 1
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PPUSH
63532: CALL_OW 69
63536: PPUSH
63537: CALL 13570 0 1
63541: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63542: LD_ADDR_VAR 0 9
63546: PUSH
63547: LD_INT 22
63549: PUSH
63550: LD_VAR 0 2
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: LD_INT 30
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 30
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PPUSH
63591: CALL_OW 69
63595: ST_TO_ADDR
// crates := 0 ;
63596: LD_ADDR_VAR 0 4
63600: PUSH
63601: LD_INT 0
63603: ST_TO_ADDR
// oil := 0 ;
63604: LD_ADDR_VAR 0 5
63608: PUSH
63609: LD_INT 0
63611: ST_TO_ADDR
// sib := 0 ;
63612: LD_ADDR_VAR 0 6
63616: PUSH
63617: LD_INT 0
63619: ST_TO_ADDR
// if bases then
63620: LD_VAR 0 9
63624: IFFALSE 63730
// begin for j in bases do
63626: LD_ADDR_VAR 0 3
63630: PUSH
63631: LD_VAR 0 9
63635: PUSH
63636: FOR_IN
63637: IFFALSE 63728
// begin base := GetBase ( j ) ;
63639: LD_ADDR_VAR 0 8
63643: PUSH
63644: LD_VAR 0 3
63648: PPUSH
63649: CALL_OW 274
63653: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63654: LD_ADDR_VAR 0 4
63658: PUSH
63659: LD_VAR 0 4
63663: PUSH
63664: LD_VAR 0 8
63668: PPUSH
63669: LD_INT 1
63671: PPUSH
63672: CALL_OW 275
63676: PLUS
63677: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63678: LD_ADDR_VAR 0 5
63682: PUSH
63683: LD_VAR 0 5
63687: PUSH
63688: LD_VAR 0 8
63692: PPUSH
63693: LD_INT 2
63695: PPUSH
63696: CALL_OW 275
63700: PLUS
63701: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63702: LD_ADDR_VAR 0 6
63706: PUSH
63707: LD_VAR 0 6
63711: PUSH
63712: LD_VAR 0 8
63716: PPUSH
63717: LD_INT 3
63719: PPUSH
63720: CALL_OW 275
63724: PLUS
63725: ST_TO_ADDR
// end ;
63726: GO 63636
63728: POP
63729: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63730: LD_STRING setSpecText(
63732: PUSH
63733: LD_VAR 0 2
63737: STR
63738: PUSH
63739: LD_STRING ,
63741: STR
63742: PUSH
63743: LD_INT 2
63745: STR
63746: PUSH
63747: LD_STRING ,
63749: STR
63750: PUSH
63751: LD_VAR 0 4
63755: STR
63756: PUSH
63757: LD_STRING )
63759: STR
63760: PPUSH
63761: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63765: LD_STRING setSpecText(
63767: PUSH
63768: LD_VAR 0 2
63772: STR
63773: PUSH
63774: LD_STRING ,
63776: STR
63777: PUSH
63778: LD_INT 3
63780: STR
63781: PUSH
63782: LD_STRING ,
63784: STR
63785: PUSH
63786: LD_VAR 0 5
63790: STR
63791: PUSH
63792: LD_STRING )
63794: STR
63795: PPUSH
63796: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63800: LD_STRING setSpecText(
63802: PUSH
63803: LD_VAR 0 2
63807: STR
63808: PUSH
63809: LD_STRING ,
63811: STR
63812: PUSH
63813: LD_INT 4
63815: STR
63816: PUSH
63817: LD_STRING ,
63819: STR
63820: PUSH
63821: LD_VAR 0 6
63825: STR
63826: PUSH
63827: LD_STRING )
63829: STR
63830: PPUSH
63831: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63835: LD_STRING setSpecText(
63837: PUSH
63838: LD_VAR 0 2
63842: STR
63843: PUSH
63844: LD_STRING ,
63846: STR
63847: PUSH
63848: LD_INT 5
63850: STR
63851: PUSH
63852: LD_STRING ,
63854: STR
63855: PUSH
63856: LD_VAR 0 7
63860: STR
63861: PUSH
63862: LD_STRING )
63864: STR
63865: PPUSH
63866: CALL_OW 559
// end ; end ;
63870: GO 63486
63872: POP
63873: POP
// end ;
63874: LD_VAR 0 1
63878: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63879: LD_INT 2
63881: PUSH
63882: LD_INT 30
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 30
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: LIST
63906: PPUSH
63907: CALL_OW 69
63911: IFFALSE 63921
63913: GO 63915
63915: DISABLE
// begin enable ;
63916: ENABLE
// UpdateSpectatorBar ;
63917: CALL 63462 0 0
// end ;
63921: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63922: LD_INT 0
63924: PPUSH
// end ;
63925: LD_VAR 0 12
63929: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63930: LD_INT 0
63932: PPUSH
63933: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63934: LD_VAR 0 1
63938: NOT
63939: IFTRUE 63958
63941: PUSH
63942: LD_VAR 0 2
63946: PPUSH
63947: LD_VAR 0 3
63951: PPUSH
63952: CALL_OW 488
63956: NOT
63957: OR
63958: IFTRUE 63993
63960: PUSH
63961: LD_VAR 0 1
63965: PPUSH
63966: CALL_OW 266
63970: PUSH
63971: LD_INT 3
63973: NONEQUAL
63974: IFFALSE 63992
63976: PUSH
63977: LD_VAR 0 1
63981: PPUSH
63982: CALL_OW 247
63986: PUSH
63987: LD_INT 1
63989: EQUAL
63990: NOT
63991: AND
63992: OR
63993: IFFALSE 63997
// exit ;
63995: GO 64279
// if GetType ( factory ) = unit_human then
63997: LD_VAR 0 1
64001: PPUSH
64002: CALL_OW 247
64006: PUSH
64007: LD_INT 1
64009: EQUAL
64010: IFFALSE 64027
// factory := IsInUnit ( factory ) ;
64012: LD_ADDR_VAR 0 1
64016: PUSH
64017: LD_VAR 0 1
64021: PPUSH
64022: CALL_OW 310
64026: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64027: LD_VAR 0 1
64031: PPUSH
64032: CALL_OW 266
64036: PUSH
64037: LD_INT 3
64039: NONEQUAL
64040: IFFALSE 64044
// exit ;
64042: GO 64279
// for i := 1 to Count ( factoryWaypoints ) do
64044: LD_ADDR_VAR 0 5
64048: PUSH
64049: DOUBLE
64050: LD_INT 1
64052: DEC
64053: ST_TO_ADDR
64054: LD_EXP 61
64058: PPUSH
64059: CALL 13570 0 1
64063: PUSH
64064: FOR_TO
64065: IFFALSE 64227
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64067: LD_VAR 0 2
64071: PPUSH
64072: LD_VAR 0 3
64076: PPUSH
64077: CALL_OW 428
64081: PUSH
64082: LD_EXP 61
64086: PUSH
64087: LD_VAR 0 5
64091: ARRAY
64092: PUSH
64093: LD_INT 2
64095: ARRAY
64096: EQUAL
64097: IFFALSE 64129
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64099: LD_ADDR_EXP 61
64103: PUSH
64104: LD_EXP 61
64108: PPUSH
64109: LD_VAR 0 5
64113: PPUSH
64114: CALL_OW 3
64118: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64119: CALL 64284 0 0
// exit ;
64123: POP
64124: POP
64125: GO 64279
// end else
64127: GO 64225
// if factory = factoryWaypoints [ i ] [ 2 ] then
64129: LD_VAR 0 1
64133: PUSH
64134: LD_EXP 61
64138: PUSH
64139: LD_VAR 0 5
64143: ARRAY
64144: PUSH
64145: LD_INT 2
64147: ARRAY
64148: EQUAL
64149: IFFALSE 64225
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64151: LD_ADDR_EXP 61
64155: PUSH
64156: LD_EXP 61
64160: PPUSH
64161: LD_VAR 0 5
64165: PPUSH
64166: CALL_OW 3
64170: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64171: LD_ADDR_EXP 61
64175: PUSH
64176: LD_EXP 61
64180: PPUSH
64181: LD_VAR 0 1
64185: PPUSH
64186: CALL_OW 255
64190: PUSH
64191: LD_VAR 0 1
64195: PUSH
64196: LD_VAR 0 2
64200: PUSH
64201: LD_VAR 0 3
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: PPUSH
64212: CALL 49546 0 2
64216: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64217: CALL 64284 0 0
// exit ;
64221: POP
64222: POP
64223: GO 64279
// end ; end ;
64225: GO 64064
64227: POP
64228: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64229: LD_ADDR_EXP 61
64233: PUSH
64234: LD_EXP 61
64238: PPUSH
64239: LD_VAR 0 1
64243: PPUSH
64244: CALL_OW 255
64248: PUSH
64249: LD_VAR 0 1
64253: PUSH
64254: LD_VAR 0 2
64258: PUSH
64259: LD_VAR 0 3
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: PPUSH
64270: CALL 49546 0 2
64274: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64275: CALL 64284 0 0
// end ;
64279: LD_VAR 0 4
64283: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64284: LD_INT 0
64286: PPUSH
64287: PPUSH
64288: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64289: LD_STRING resetFactoryWaypoint();
64291: PPUSH
64292: CALL_OW 559
// if factoryWaypoints then
64296: LD_EXP 61
64300: IFFALSE 64421
// begin list := factoryWaypoints ;
64302: LD_ADDR_VAR 0 3
64306: PUSH
64307: LD_EXP 61
64311: ST_TO_ADDR
// for i := 1 to list do
64312: LD_ADDR_VAR 0 2
64316: PUSH
64317: DOUBLE
64318: LD_INT 1
64320: DEC
64321: ST_TO_ADDR
64322: LD_VAR 0 3
64326: PUSH
64327: FOR_TO
64328: IFFALSE 64419
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64330: LD_STRING setFactoryWaypointXY(
64332: PUSH
64333: LD_VAR 0 3
64337: PUSH
64338: LD_VAR 0 2
64342: ARRAY
64343: PUSH
64344: LD_INT 1
64346: ARRAY
64347: STR
64348: PUSH
64349: LD_STRING ,
64351: STR
64352: PUSH
64353: LD_VAR 0 3
64357: PUSH
64358: LD_VAR 0 2
64362: ARRAY
64363: PUSH
64364: LD_INT 2
64366: ARRAY
64367: STR
64368: PUSH
64369: LD_STRING ,
64371: STR
64372: PUSH
64373: LD_VAR 0 3
64377: PUSH
64378: LD_VAR 0 2
64382: ARRAY
64383: PUSH
64384: LD_INT 3
64386: ARRAY
64387: STR
64388: PUSH
64389: LD_STRING ,
64391: STR
64392: PUSH
64393: LD_VAR 0 3
64397: PUSH
64398: LD_VAR 0 2
64402: ARRAY
64403: PUSH
64404: LD_INT 4
64406: ARRAY
64407: STR
64408: PUSH
64409: LD_STRING )
64411: STR
64412: PPUSH
64413: CALL_OW 559
64417: GO 64327
64419: POP
64420: POP
// end ; end ;
64421: LD_VAR 0 1
64425: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64426: LD_INT 0
64428: PPUSH
// if HexInfo ( x , y ) = warehouse then
64429: LD_VAR 0 2
64433: PPUSH
64434: LD_VAR 0 3
64438: PPUSH
64439: CALL_OW 428
64443: PUSH
64444: LD_VAR 0 1
64448: EQUAL
64449: IFFALSE 64476
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64451: LD_ADDR_EXP 63
64455: PUSH
64456: LD_EXP 63
64460: PPUSH
64461: LD_VAR 0 1
64465: PPUSH
64466: LD_INT 0
64468: PPUSH
64469: CALL_OW 1
64473: ST_TO_ADDR
64474: GO 64527
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64476: LD_ADDR_EXP 63
64480: PUSH
64481: LD_EXP 63
64485: PPUSH
64486: LD_VAR 0 1
64490: PPUSH
64491: LD_VAR 0 1
64495: PPUSH
64496: CALL_OW 255
64500: PUSH
64501: LD_VAR 0 1
64505: PUSH
64506: LD_VAR 0 2
64510: PUSH
64511: LD_VAR 0 3
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: PPUSH
64522: CALL_OW 1
64526: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64527: CALL 64536 0 0
// end ;
64531: LD_VAR 0 4
64535: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64536: LD_INT 0
64538: PPUSH
64539: PPUSH
64540: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64541: LD_STRING resetWarehouseGatheringPoints();
64543: PPUSH
64544: CALL_OW 559
// if warehouseGatheringPoints then
64548: LD_EXP 63
64552: IFFALSE 64678
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64554: LD_ADDR_VAR 0 3
64558: PUSH
64559: LD_EXP 63
64563: PPUSH
64564: CALL 53480 0 1
64568: ST_TO_ADDR
// for i := 1 to list do
64569: LD_ADDR_VAR 0 2
64573: PUSH
64574: DOUBLE
64575: LD_INT 1
64577: DEC
64578: ST_TO_ADDR
64579: LD_VAR 0 3
64583: PUSH
64584: FOR_TO
64585: IFFALSE 64676
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64587: LD_STRING setWarehouseGatheringPointXY(
64589: PUSH
64590: LD_VAR 0 3
64594: PUSH
64595: LD_VAR 0 2
64599: ARRAY
64600: PUSH
64601: LD_INT 1
64603: ARRAY
64604: STR
64605: PUSH
64606: LD_STRING ,
64608: STR
64609: PUSH
64610: LD_VAR 0 3
64614: PUSH
64615: LD_VAR 0 2
64619: ARRAY
64620: PUSH
64621: LD_INT 2
64623: ARRAY
64624: STR
64625: PUSH
64626: LD_STRING ,
64628: STR
64629: PUSH
64630: LD_VAR 0 3
64634: PUSH
64635: LD_VAR 0 2
64639: ARRAY
64640: PUSH
64641: LD_INT 3
64643: ARRAY
64644: STR
64645: PUSH
64646: LD_STRING ,
64648: STR
64649: PUSH
64650: LD_VAR 0 3
64654: PUSH
64655: LD_VAR 0 2
64659: ARRAY
64660: PUSH
64661: LD_INT 4
64663: ARRAY
64664: STR
64665: PUSH
64666: LD_STRING )
64668: STR
64669: PPUSH
64670: CALL_OW 559
64674: GO 64584
64676: POP
64677: POP
// end ; end ;
64678: LD_VAR 0 1
64682: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64683: LD_INT 0
64685: PPUSH
64686: PPUSH
// if not mpSidePositions then
64687: LD_EXP 7
64691: NOT
64692: IFFALSE 64696
// exit ;
64694: GO 64767
// result :=  ;
64696: LD_ADDR_VAR 0 1
64700: PUSH
64701: LD_STRING 
64703: ST_TO_ADDR
// for i := 1 to 8 do
64704: LD_ADDR_VAR 0 2
64708: PUSH
64709: DOUBLE
64710: LD_INT 1
64712: DEC
64713: ST_TO_ADDR
64714: LD_INT 8
64716: PUSH
64717: FOR_TO
64718: IFFALSE 64748
// begin result := result & mpSidePositions [ i ] & ; ;
64720: LD_ADDR_VAR 0 1
64724: PUSH
64725: LD_VAR 0 1
64729: PUSH
64730: LD_EXP 7
64734: PUSH
64735: LD_VAR 0 2
64739: ARRAY
64740: STR
64741: PUSH
64742: LD_STRING ;
64744: STR
64745: ST_TO_ADDR
// end ;
64746: GO 64717
64748: POP
64749: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64750: LD_STRING setMultiplayerRealPosition("
64752: PUSH
64753: LD_VAR 0 1
64757: STR
64758: PUSH
64759: LD_STRING ");
64761: STR
64762: PPUSH
64763: CALL_OW 559
// end ;
64767: LD_VAR 0 1
64771: RET
