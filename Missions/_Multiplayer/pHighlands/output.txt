// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2343 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2766 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 9
 128: PUSH
 129: LD_INT 12
 131: PUSH
 132: LD_INT 15
 134: PUSH
 135: LD_INT 24
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 3
 149: PUSH
 150: LD_INT 5
 152: PUSH
 153: LD_INT 7
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 100
 178: PUSH
 179: LD_INT 30
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 200
 192: PUSH
 193: LD_INT 75
 195: PUSH
 196: LD_INT 10
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 500
 206: PUSH
 207: LD_INT 150
 209: PUSH
 210: LD_INT 30
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 250
 272: PUSH
 273: LD_INT 350
 275: PUSH
 276: LD_INT 500
 278: PUSH
 279: LD_INT 1000
 281: PUSH
 282: LD_INT 2000
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: LD_INT 10500
 307: PUSH
 308: LD_INT 21000
 310: PUSH
 311: LD_INT 31500
 313: PUSH
 314: LD_INT 42000
 316: PUSH
 317: LD_INT 63000
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 1
 340: NEG
 341: PUSH
 342: LD_INT 350
 344: PUSH
 345: LD_INT 700
 347: PUSH
 348: LD_INT 1400
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 13650
 376: PUSH
 377: LD_INT 7350
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 31500
 415: PUSH
 416: LD_INT 52500
 418: PUSH
 419: LD_INT 63000
 421: PUSH
 422: LD_INT 94500
 424: PUSH
 425: LD_INT 126000
 427: PUSH
 428: LD_INT 189000
 430: PUSH
 431: LD_INT 210000
 433: PUSH
 434: LD_INT 252000
 436: PUSH
 437: LD_INT 378000
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 2
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 6300
 478: PUSH
 479: LD_INT 10500
 481: PUSH
 482: LD_INT 16800
 484: PUSH
 485: LD_INT 21000
 487: PUSH
 488: LD_INT 25200
 490: PUSH
 491: LD_INT 31500
 493: PUSH
 494: LD_INT 42000
 496: PUSH
 497: LD_INT 63000
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 15
 544: PUSH
 545: LD_INT 4
 547: PUSH
 548: LD_INT 100
 550: PUSH
 551: LD_INT 30
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 250
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: LD_INT 700
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 700
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 31500
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// your_side := 1 ;
 644: LD_ADDR_OWVAR 2
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: LD_INT 0
 677: PUSH
 678: LD_INT 0
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 0
 710: PUSH
 711: LD_INT 0
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 769: LD_ADDR_EXP 10
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: ST_TO_ADDR
// mpTeamGame := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 806: LD_ADDR_EXP 29
 810: PUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 120
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// end ;
 821: LD_VAR 0 1
 825: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , area , hasOil , hasSib , baseLevel , startPos ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 836: LD_ADDR_EXP 19
 840: PUSH
 841: LD_INT 6
 843: PUSH
 844: LD_INT 8
 846: PUSH
 847: LD_INT 7
 849: PUSH
 850: LD_INT 9
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 859: LD_ADDR_EXP 18
 863: PUSH
 864: EMPTY
 865: PUSH
 866: LD_EXP 19
 870: UNION
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 8
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 7
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1178
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 12
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 24
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 12
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 23
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 42
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 21
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 42
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1178: LD_ADDR_EXP 16
1182: PUSH
1183: LD_EXP 6
1187: PUSH
1188: LD_INT 11
1190: ARRAY
1191: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1192: LD_ADDR_EXP 22
1196: PUSH
1197: LD_EXP 6
1201: PUSH
1202: LD_INT 12
1204: ARRAY
1205: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1206: LD_ADDR_EXP 26
1210: PUSH
1211: LD_EXP 6
1215: PUSH
1216: LD_INT 13
1218: ARRAY
1219: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1220: LD_ADDR_EXP 33
1224: PUSH
1225: LD_EXP 6
1229: PUSH
1230: LD_INT 14
1232: ARRAY
1233: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1234: LD_ADDR_EXP 30
1238: PUSH
1239: LD_EXP 6
1243: PUSH
1244: LD_INT 15
1246: ARRAY
1247: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1248: LD_ADDR_EXP 28
1252: PUSH
1253: LD_EXP 6
1257: PUSH
1258: LD_INT 18
1260: ARRAY
1261: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1262: LD_ADDR_EXP 20
1266: PUSH
1267: LD_EXP 6
1271: PUSH
1272: LD_INT 21
1274: ARRAY
1275: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1276: LD_ADDR_EXP 31
1280: PUSH
1281: LD_INT 11
1283: PUSH
1284: LD_INT 13
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: LD_INT 14
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1299: LD_ADDR_VAR 0 9
1303: PUSH
1304: LD_INT 15
1306: PPUSH
1307: LD_INT 2
1309: PPUSH
1310: CALL 54238 0 2
1314: PUSH
1315: LD_INT 21
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL 54238 0 2
1325: PUSH
1326: LD_INT 18
1328: PPUSH
1329: LD_INT 3
1331: PPUSH
1332: CALL 54238 0 2
1336: PUSH
1337: LD_INT 24
1339: PPUSH
1340: LD_INT 5
1342: PPUSH
1343: CALL 54238 0 2
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1354: LD_ADDR_VAR 0 3
1358: PUSH
1359: DOUBLE
1360: LD_INT 1
1362: DEC
1363: ST_TO_ADDR
1364: LD_VAR 0 9
1368: PPUSH
1369: CALL 13543 0 1
1373: PUSH
1374: FOR_TO
1375: IFFALSE 1479
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1377: LD_ADDR_EXP 21
1381: PUSH
1382: LD_EXP 21
1386: PPUSH
1387: LD_VAR 0 3
1391: PPUSH
1392: LD_VAR 0 9
1396: PUSH
1397: LD_VAR 0 3
1401: ARRAY
1402: PUSH
1403: LD_INT 1
1405: ARRAY
1406: PPUSH
1407: LD_VAR 0 9
1411: PUSH
1412: LD_VAR 0 3
1416: ARRAY
1417: PUSH
1418: LD_INT 3
1420: ARRAY
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: CALL_OW 272
1429: PUSH
1430: LD_VAR 0 9
1434: PUSH
1435: LD_VAR 0 3
1439: ARRAY
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 9
1449: PUSH
1450: LD_VAR 0 3
1454: ARRAY
1455: PUSH
1456: LD_INT 3
1458: ARRAY
1459: PPUSH
1460: LD_INT 10
1462: PPUSH
1463: CALL_OW 273
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 1
1476: ST_TO_ADDR
1477: GO 1374
1479: POP
1480: POP
// if baseLevel >= 1 then
1481: LD_VAR 0 8
1485: PUSH
1486: LD_INT 1
1488: GREATEREQUAL
1489: IFFALSE 1501
// mpDepots := startPos ;
1491: LD_ADDR_EXP 14
1495: PUSH
1496: LD_VAR 0 9
1500: ST_TO_ADDR
// if hasOil then
1501: LD_VAR 0 6
1505: IFFALSE 1588
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1507: LD_ADDR_VAR 0 4
1511: PUSH
1512: LD_EXP 6
1516: PUSH
1517: LD_INT 6
1519: ARRAY
1520: PUSH
1521: LD_INT 2
1523: EQUAL
1524: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1525: LD_ADDR_EXP 12
1529: PUSH
1530: LD_INT 16
1532: PPUSH
1533: LD_VAR 0 4
1537: PPUSH
1538: CALL 54071 0 2
1542: PUSH
1543: LD_INT 22
1545: PPUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: CALL 54071 0 2
1555: PUSH
1556: LD_INT 19
1558: PPUSH
1559: LD_VAR 0 4
1563: PPUSH
1564: CALL 54071 0 2
1568: PUSH
1569: LD_INT 25
1571: PPUSH
1572: LD_VAR 0 4
1576: PPUSH
1577: CALL 54071 0 2
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: ST_TO_ADDR
// end ; if hasSib then
1588: LD_VAR 0 7
1592: IFFALSE 1675
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1594: LD_ADDR_VAR 0 4
1598: PUSH
1599: LD_EXP 6
1603: PUSH
1604: LD_INT 7
1606: ARRAY
1607: PUSH
1608: LD_INT 2
1610: EQUAL
1611: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1612: LD_ADDR_EXP 13
1616: PUSH
1617: LD_INT 17
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 54071 0 2
1629: PUSH
1630: LD_INT 23
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 54071 0 2
1642: PUSH
1643: LD_INT 20
1645: PPUSH
1646: LD_VAR 0 4
1650: PPUSH
1651: CALL 54071 0 2
1655: PUSH
1656: LD_INT 26
1658: PPUSH
1659: LD_VAR 0 4
1663: PPUSH
1664: CALL 54071 0 2
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: ST_TO_ADDR
// end ; end ;
1675: LD_VAR 0 2
1679: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1680: GO 1682
1682: DISABLE
1683: LD_INT 0
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
// begin if not mpShipments then
1693: LD_EXP 27
1697: NOT
1698: IFFALSE 1702
// exit ;
1700: GO 2180
// case mpShipments of 1 :
1702: LD_EXP 27
1706: PUSH
1707: LD_INT 1
1709: DOUBLE
1710: EQUAL
1711: IFTRUE 1715
1713: GO 1750
1715: POP
// begin time := 0 0$20 ;
1716: LD_ADDR_VAR 0 4
1720: PUSH
1721: LD_INT 700
1723: ST_TO_ADDR
// normalTime := 0 0$20 ;
1724: LD_ADDR_VAR 0 6
1728: PUSH
1729: LD_INT 700
1731: ST_TO_ADDR
// maxTime := 1 1$20 ;
1732: LD_ADDR_VAR 0 8
1736: PUSH
1737: LD_INT 2800
1739: ST_TO_ADDR
// delayTime := 0 0$4 ;
1740: LD_ADDR_VAR 0 7
1744: PUSH
1745: LD_INT 140
1747: ST_TO_ADDR
// end ; 2 :
1748: GO 1880
1750: LD_INT 2
1752: DOUBLE
1753: EQUAL
1754: IFTRUE 1758
1756: GO 1793
1758: POP
// begin time := 0 0$17 ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_INT 595
1766: ST_TO_ADDR
// normalTime := 0 0$17 ;
1767: LD_ADDR_VAR 0 6
1771: PUSH
1772: LD_INT 595
1774: ST_TO_ADDR
// maxTime := 1 1$10 ;
1775: LD_ADDR_VAR 0 8
1779: PUSH
1780: LD_INT 2450
1782: ST_TO_ADDR
// delayTime := 0 0$3 ;
1783: LD_ADDR_VAR 0 7
1787: PUSH
1788: LD_INT 105
1790: ST_TO_ADDR
// end ; 3 :
1791: GO 1880
1793: LD_INT 3
1795: DOUBLE
1796: EQUAL
1797: IFTRUE 1801
1799: GO 1836
1801: POP
// begin time := 0 0$15 ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: LD_INT 525
1809: ST_TO_ADDR
// normalTime := 0 0$15 ;
1810: LD_ADDR_VAR 0 6
1814: PUSH
1815: LD_INT 525
1817: ST_TO_ADDR
// maxTime := 1 1$00 ;
1818: LD_ADDR_VAR 0 8
1822: PUSH
1823: LD_INT 2100
1825: ST_TO_ADDR
// delayTime := 0 0$2 ;
1826: LD_ADDR_VAR 0 7
1830: PUSH
1831: LD_INT 70
1833: ST_TO_ADDR
// end ; 4 :
1834: GO 1880
1836: LD_INT 4
1838: DOUBLE
1839: EQUAL
1840: IFTRUE 1844
1842: GO 1879
1844: POP
// begin time := 0 0$12 ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: LD_INT 420
1852: ST_TO_ADDR
// normalTime := 0 0$12 ;
1853: LD_ADDR_VAR 0 6
1857: PUSH
1858: LD_INT 420
1860: ST_TO_ADDR
// maxTime := 0 0$55 ;
1861: LD_ADDR_VAR 0 8
1865: PUSH
1866: LD_INT 1925
1868: ST_TO_ADDR
// delayTime := 0 0$1 ;
1869: LD_ADDR_VAR 0 7
1873: PUSH
1874: LD_INT 35
1876: ST_TO_ADDR
// end ; end ;
1877: GO 1880
1879: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
1880: LD_ADDR_VAR 0 3
1884: PUSH
1885: LD_INT 6
1887: PUSH
1888: LD_INT 8
1890: PUSH
1891: LD_INT 7
1893: PUSH
1894: LD_INT 9
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// areas := [ CratesArea1 , CratesArea2 , CratesArea3 , CratesArea4 ] ;
1903: LD_ADDR_VAR 0 5
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 3
1913: PUSH
1914: LD_INT 2
1916: PUSH
1917: LD_INT 4
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: ST_TO_ADDR
// for i := 1 to 8 do
1926: LD_ADDR_VAR 0 1
1930: PUSH
1931: DOUBLE
1932: LD_INT 1
1934: DEC
1935: ST_TO_ADDR
1936: LD_INT 8
1938: PUSH
1939: FOR_TO
1940: IFFALSE 1987
// begin if not mpSidePositions [ i ] then
1942: LD_EXP 7
1946: PUSH
1947: LD_VAR 0 1
1951: ARRAY
1952: NOT
1953: IFFALSE 1957
// continue ;
1955: GO 1939
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
1957: LD_ADDR_VAR 0 5
1961: PUSH
1962: LD_VAR 0 5
1966: PUSH
1967: LD_VAR 0 3
1971: PUSH
1972: LD_EXP 7
1976: PUSH
1977: LD_VAR 0 1
1981: ARRAY
1982: ARRAY
1983: ADD
1984: ST_TO_ADDR
// end ;
1985: GO 1939
1987: POP
1988: POP
// x := 1 ;
1989: LD_ADDR_VAR 0 2
1993: PUSH
1994: LD_INT 1
1996: ST_TO_ADDR
// repeat wait ( time ) ;
1997: LD_VAR 0 4
2001: PPUSH
2002: CALL_OW 67
// x := Inc ( x ) ;
2006: LD_ADDR_VAR 0 2
2010: PUSH
2011: LD_VAR 0 2
2015: PPUSH
2016: CALL 50892 0 1
2020: ST_TO_ADDR
// if x > 5 then
2021: LD_VAR 0 2
2025: PUSH
2026: LD_INT 5
2028: GREATER
2029: IFFALSE 2039
// x := 1 ;
2031: LD_ADDR_VAR 0 2
2035: PUSH
2036: LD_INT 1
2038: ST_TO_ADDR
// for i in areas do
2039: LD_ADDR_VAR 0 1
2043: PUSH
2044: LD_VAR 0 5
2048: PUSH
2049: FOR_IN
2050: IFFALSE 2136
// begin if i = CenterArea then
2052: LD_VAR 0 1
2056: PUSH
2057: LD_INT 5
2059: EQUAL
2060: IFFALSE 2099
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2062: LD_VAR 0 1
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: CALL_OW 287
2074: PUSH
2075: LD_INT 30
2077: LESS
2078: IFFALSE 2097
// CreateCratesArea ( x , i , true ) ;
2080: LD_VAR 0 2
2084: PPUSH
2085: LD_VAR 0 1
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 55
// end else
2097: GO 2134
// if GetResourceArea ( i , mat_cans ) < 20 then
2099: LD_VAR 0 1
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: CALL_OW 287
2111: PUSH
2112: LD_INT 20
2114: LESS
2115: IFFALSE 2134
// begin CreateCratesArea ( x , i , true ) ;
2117: LD_VAR 0 2
2121: PPUSH
2122: LD_VAR 0 1
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: CALL_OW 55
// end ; end ;
2134: GO 2049
2136: POP
2137: POP
// time := time + delayTime ;
2138: LD_ADDR_VAR 0 4
2142: PUSH
2143: LD_VAR 0 4
2147: PUSH
2148: LD_VAR 0 7
2152: PLUS
2153: ST_TO_ADDR
// if time > maxTime then
2154: LD_VAR 0 4
2158: PUSH
2159: LD_VAR 0 8
2163: GREATER
2164: IFFALSE 2176
// time := normalTime ;
2166: LD_ADDR_VAR 0 4
2170: PUSH
2171: LD_VAR 0 6
2175: ST_TO_ADDR
// until false ;
2176: LD_INT 0
2178: IFFALSE 1997
// end ; end_of_file
2180: PPOPN 8
2182: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL 55036 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2192: LD_VAR 0 1
2196: PPUSH
2197: CALL 7889 0 1
// end ;
2201: PPOPN 1
2203: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2204: LD_VAR 0 1
2208: PPUSH
2209: CALL 55053 0 1
// end ;
2213: PPOPN 1
2215: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2216: LD_VAR 0 1
2220: PPUSH
2221: CALL 8942 0 1
2225: PPOPN 1
2227: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2228: LD_VAR 0 1
2232: PPUSH
2233: LD_VAR 0 2
2237: PPUSH
2238: CALL 55094 0 2
2242: PPOPN 2
2244: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2245: LD_VAR 0 1
2249: PPUSH
2250: LD_VAR 0 2
2254: PPUSH
2255: CALL 8695 0 2
2259: PPOPN 2
2261: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2262: LD_VAR 0 1
2266: PPUSH
2267: LD_VAR 0 2
2271: PPUSH
2272: LD_VAR 0 3
2276: PPUSH
2277: CALL 8995 0 3
2281: PPOPN 3
2283: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2284: LD_VAR 0 1
2288: PPUSH
2289: LD_VAR 0 2
2293: PPUSH
2294: LD_VAR 0 3
2298: PPUSH
2299: LD_VAR 0 4
2303: PPUSH
2304: LD_VAR 0 5
2308: PPUSH
2309: CALL 9679 0 5
// end ;
2313: PPOPN 5
2315: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2316: LD_VAR 0 1
2320: PPUSH
2321: LD_VAR 0 2
2325: PPUSH
2326: LD_VAR 0 3
2330: PPUSH
2331: LD_VAR 0 4
2335: PPUSH
2336: CALL 9782 0 4
2340: PPOPN 4
2342: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
// disable ( mpActive ) ;
2347: LD_INT 100
2349: DISABLE_MARKED
// disable ( mpWin ) ;
2350: LD_INT 101
2352: DISABLE_MARKED
// disable ( mpLose ) ;
2353: LD_INT 102
2355: DISABLE_MARKED
// mpGameType := 0 ;
2356: LD_ADDR_EXP 3
2360: PUSH
2361: LD_INT 0
2363: ST_TO_ADDR
// mpGameSettings := [ ] ;
2364: LD_ADDR_EXP 6
2368: PUSH
2369: EMPTY
2370: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2371: LD_ADDR_EXP 4
2375: PUSH
2376: EMPTY
2377: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2378: LD_ADDR_EXP 5
2382: PUSH
2383: EMPTY
2384: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2385: LD_ADDR_EXP 29
2389: PUSH
2390: LD_INT 2
2392: PUSH
2393: LD_INT 2
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2400: LD_ADDR_EXP 12
2404: PUSH
2405: EMPTY
2406: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2407: LD_ADDR_EXP 13
2411: PUSH
2412: EMPTY
2413: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2414: LD_ADDR_EXP 42
2418: PUSH
2419: EMPTY
2420: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2421: LD_ADDR_EXP 43
2425: PUSH
2426: EMPTY
2427: ST_TO_ADDR
// mpDepots := [ ] ;
2428: LD_ADDR_EXP 14
2432: PUSH
2433: EMPTY
2434: ST_TO_ADDR
// mpBuildings := [ ] ;
2435: LD_ADDR_EXP 17
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2442: LD_ADDR_EXP 18
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2449: LD_ADDR_EXP 19
2453: PUSH
2454: EMPTY
2455: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2456: LD_ADDR_EXP 20
2460: PUSH
2461: EMPTY
2462: ST_TO_ADDR
// mpStartingResources := [ ] ;
2463: LD_ADDR_EXP 15
2467: PUSH
2468: EMPTY
2469: ST_TO_ADDR
// mpStartPos := [ ] ;
2470: LD_ADDR_EXP 21
2474: PUSH
2475: EMPTY
2476: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2477: LD_ADDR_EXP 22
2481: PUSH
2482: LD_INT 1
2484: NEG
2485: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2486: LD_ADDR_EXP 23
2490: PUSH
2491: EMPTY
2492: ST_TO_ADDR
// mpApemans := [ ] ;
2493: LD_ADDR_EXP 30
2497: PUSH
2498: EMPTY
2499: ST_TO_ADDR
// mpApemansArea := [ ] ;
2500: LD_ADDR_EXP 31
2504: PUSH
2505: EMPTY
2506: ST_TO_ADDR
// mpRespawn := [ ] ;
2507: LD_ADDR_EXP 33
2511: PUSH
2512: EMPTY
2513: ST_TO_ADDR
// mpKingArea := 0 ;
2514: LD_ADDR_EXP 34
2518: PUSH
2519: LD_INT 0
2521: ST_TO_ADDR
// mpPoints := [ ] ;
2522: LD_ADDR_EXP 35
2526: PUSH
2527: EMPTY
2528: ST_TO_ADDR
// mpVehicles := 0 ;
2529: LD_ADDR_EXP 36
2533: PUSH
2534: LD_INT 0
2536: ST_TO_ADDR
// mpShipments := 0 ;
2537: LD_ADDR_EXP 27
2541: PUSH
2542: LD_INT 0
2544: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2545: LD_ADDR_EXP 40
2549: PUSH
2550: EMPTY
2551: PUSH
2552: EMPTY
2553: PUSH
2554: EMPTY
2555: PUSH
2556: EMPTY
2557: PUSH
2558: EMPTY
2559: PUSH
2560: EMPTY
2561: PUSH
2562: EMPTY
2563: PUSH
2564: EMPTY
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2576: LD_ADDR_EXP 32
2580: PUSH
2581: EMPTY
2582: PUSH
2583: EMPTY
2584: PUSH
2585: EMPTY
2586: PUSH
2587: EMPTY
2588: PUSH
2589: EMPTY
2590: PUSH
2591: EMPTY
2592: PUSH
2593: EMPTY
2594: PUSH
2595: EMPTY
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2607: LD_ADDR_EXP 41
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: LD_INT 0
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: LD_INT 0
2626: PUSH
2627: LD_INT 0
2629: PUSH
2630: LD_INT 0
2632: PUSH
2633: LD_INT 0
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: ST_TO_ADDR
// mpEmissions := 0 ;
2646: LD_ADDR_EXP 37
2650: PUSH
2651: LD_INT 0
2653: ST_TO_ADDR
// mpTeleports := 0 ;
2654: LD_ADDR_EXP 44
2658: PUSH
2659: LD_INT 0
2661: ST_TO_ADDR
// mpArtifacts := 0 ;
2662: LD_ADDR_EXP 45
2666: PUSH
2667: LD_INT 0
2669: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2670: LD_ADDR_EXP 46
2674: PUSH
2675: LD_INT 0
2677: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2678: LD_ADDR_EXP 25
2682: PUSH
2683: LD_INT 3
2685: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2686: LD_ADDR_EXP 24
2690: PUSH
2691: LD_INT 15
2693: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2694: LD_ADDR_EXP 38
2698: PUSH
2699: LD_INT 0
2701: ST_TO_ADDR
// mpGameActive := false ;
2702: LD_ADDR_EXP 39
2706: PUSH
2707: LD_INT 0
2709: ST_TO_ADDR
// mpBlockRespThread := false ;
2710: LD_ADDR_EXP 47
2714: PUSH
2715: LD_INT 0
2717: ST_TO_ADDR
// for i := 1 to 32 do
2718: LD_ADDR_VAR 0 2
2722: PUSH
2723: DOUBLE
2724: LD_INT 1
2726: DEC
2727: ST_TO_ADDR
2728: LD_INT 32
2730: PUSH
2731: FOR_TO
2732: IFFALSE 2759
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2734: LD_ADDR_EXP 6
2738: PUSH
2739: LD_EXP 6
2743: PPUSH
2744: LD_VAR 0 2
2748: PPUSH
2749: LD_INT 0
2751: PPUSH
2752: CALL_OW 1
2756: ST_TO_ADDR
2757: GO 2731
2759: POP
2760: POP
// end ;
2761: LD_VAR 0 1
2765: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2766: LD_INT 0
2768: PPUSH
2769: PPUSH
2770: PPUSH
2771: PPUSH
2772: PPUSH
2773: PPUSH
2774: PPUSH
2775: PPUSH
2776: PPUSH
2777: PPUSH
2778: PPUSH
2779: PPUSH
2780: PPUSH
2781: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
2782: LD_ADDR_VAR 0 14
2786: PUSH
2787: LD_INT 1
2789: PUSH
2790: LD_INT 2
2792: PUSH
2793: LD_INT 3
2795: PUSH
2796: LD_INT 5
2798: PUSH
2799: LD_INT 6
2801: PUSH
2802: LD_INT 7
2804: PUSH
2805: LD_INT 8
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: ST_TO_ADDR
// for i in gameTypes do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: LD_VAR 0 14
2826: PUSH
2827: FOR_IN
2828: IFFALSE 2837
// disable ( i ) ;
2830: LD_VAR 0 2
2834: DISABLE_MARKED
2835: GO 2827
2837: POP
2838: POP
// if Multiplayer then
2839: LD_OWVAR 4
2843: IFFALSE 3027
// begin mpGameType := mp_game_type ;
2845: LD_ADDR_EXP 3
2849: PUSH
2850: LD_OWVAR 6
2854: ST_TO_ADDR
// your_side := mp_player_side ;
2855: LD_ADDR_OWVAR 2
2859: PUSH
2860: LD_OWVAR 7
2864: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2865: LD_ADDR_EXP 7
2869: PUSH
2870: LD_OWVAR 17
2874: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
2875: LD_ADDR_EXP 8
2879: PUSH
2880: LD_OWVAR 15
2884: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
2885: LD_ADDR_EXP 9
2889: PUSH
2890: LD_OWVAR 16
2894: ST_TO_ADDR
// mpTeams := mp_teams ;
2895: LD_ADDR_EXP 10
2899: PUSH
2900: LD_OWVAR 12
2904: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
2905: LD_ADDR_VAR 0 2
2909: PUSH
2910: DOUBLE
2911: LD_INT 1
2913: DEC
2914: ST_TO_ADDR
2915: LD_EXP 4
2919: PPUSH
2920: CALL 13543 0 1
2924: PUSH
2925: FOR_TO
2926: IFFALSE 3002
// begin setting := mpGameSettingsKeys [ i ] ;
2928: LD_ADDR_VAR 0 12
2932: PUSH
2933: LD_EXP 4
2937: PUSH
2938: LD_VAR 0 2
2942: ARRAY
2943: ST_TO_ADDR
// if setting then
2944: LD_VAR 0 12
2948: IFFALSE 3000
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
2950: LD_ADDR_EXP 6
2954: PUSH
2955: LD_EXP 6
2959: PPUSH
2960: LD_VAR 0 2
2964: PPUSH
2965: LD_EXP 5
2969: PUSH
2970: LD_VAR 0 2
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 1
2983: MINUS
2984: PPUSH
2985: CALL_OW 426
2989: PUSH
2990: LD_INT 1
2992: PLUS
2993: ARRAY
2994: PPUSH
2995: CALL_OW 1
2999: ST_TO_ADDR
// end ;
3000: GO 2925
3002: POP
3003: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3004: LD_ADDR_EXP 11
3008: PUSH
3009: LD_EXP 8
3013: PUSH
3014: LD_INT 0
3016: PUSH
3017: EMPTY
3018: LIST
3019: DIFF
3020: PUSH
3021: LD_INT 1
3023: GREATER
3024: ST_TO_ADDR
// end else
3025: GO 3027
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3027: LD_EXP 3
3031: PPUSH
3032: CALL 826 0 1
// if Count ( mpMarkedAreas ) then
3036: LD_EXP 18
3040: PPUSH
3041: CALL 13543 0 1
3045: IFFALSE 3076
// begin for i in mpMarkedAreas do
3047: LD_ADDR_VAR 0 2
3051: PUSH
3052: LD_EXP 18
3056: PUSH
3057: FOR_IN
3058: IFFALSE 3074
// SetAreaMapShow ( i , 0 ) ;
3060: LD_VAR 0 2
3064: PPUSH
3065: LD_INT 0
3067: PPUSH
3068: CALL_OW 424
3072: GO 3057
3074: POP
3075: POP
// end ; for i := 1 to 8 do
3076: LD_ADDR_VAR 0 2
3080: PUSH
3081: DOUBLE
3082: LD_INT 1
3084: DEC
3085: ST_TO_ADDR
3086: LD_INT 8
3088: PUSH
3089: FOR_TO
3090: IFFALSE 4549
// begin if not mpSidePositions [ i ] then
3092: LD_EXP 7
3096: PUSH
3097: LD_VAR 0 2
3101: ARRAY
3102: NOT
3103: IFFALSE 3107
// continue ;
3105: GO 3089
// side := i ;
3107: LD_ADDR_VAR 0 7
3111: PUSH
3112: LD_VAR 0 2
3116: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3117: LD_ADDR_VAR 0 9
3121: PUSH
3122: LD_EXP 9
3126: PUSH
3127: LD_VAR 0 2
3131: ARRAY
3132: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3133: LD_ADDR_VAR 0 8
3137: PUSH
3138: LD_EXP 7
3142: PUSH
3143: LD_VAR 0 2
3147: ARRAY
3148: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3149: LD_EXP 12
3153: PPUSH
3154: CALL 13543 0 1
3158: IFFALSE 3235
// begin for j in mpOilDeposits [ pos ] do
3160: LD_ADDR_VAR 0 3
3164: PUSH
3165: LD_EXP 12
3169: PUSH
3170: LD_VAR 0 8
3174: ARRAY
3175: PUSH
3176: FOR_IN
3177: IFFALSE 3233
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3179: LD_VAR 0 3
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: PPUSH
3188: LD_VAR 0 3
3192: PUSH
3193: LD_INT 2
3195: ARRAY
3196: PPUSH
3197: LD_INT 2
3199: PPUSH
3200: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3204: LD_VAR 0 3
3208: PUSH
3209: LD_INT 1
3211: ARRAY
3212: PPUSH
3213: LD_VAR 0 3
3217: PUSH
3218: LD_INT 2
3220: ARRAY
3221: PPUSH
3222: LD_VAR 0 7
3226: PPUSH
3227: CALL_OW 441
// end ;
3231: GO 3176
3233: POP
3234: POP
// end ; if Count ( mpSibDeposits ) then
3235: LD_EXP 13
3239: PPUSH
3240: CALL 13543 0 1
3244: IFFALSE 3321
// begin for j in mpSibDeposits [ pos ] do
3246: LD_ADDR_VAR 0 3
3250: PUSH
3251: LD_EXP 13
3255: PUSH
3256: LD_VAR 0 8
3260: ARRAY
3261: PUSH
3262: FOR_IN
3263: IFFALSE 3319
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3265: LD_VAR 0 3
3269: PUSH
3270: LD_INT 1
3272: ARRAY
3273: PPUSH
3274: LD_VAR 0 3
3278: PUSH
3279: LD_INT 2
3281: ARRAY
3282: PPUSH
3283: LD_INT 3
3285: PPUSH
3286: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3290: LD_VAR 0 3
3294: PUSH
3295: LD_INT 1
3297: ARRAY
3298: PPUSH
3299: LD_VAR 0 3
3303: PUSH
3304: LD_INT 2
3306: ARRAY
3307: PPUSH
3308: LD_VAR 0 7
3312: PPUSH
3313: CALL_OW 441
// end ;
3317: GO 3262
3319: POP
3320: POP
// end ; InitBc ;
3321: CALL_OW 21
// InitUc ;
3325: CALL_OW 18
// uc_side := side ;
3329: LD_ADDR_OWVAR 20
3333: PUSH
3334: LD_VAR 0 7
3338: ST_TO_ADDR
// uc_nation := nation ;
3339: LD_ADDR_OWVAR 21
3343: PUSH
3344: LD_VAR 0 9
3348: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3349: LD_EXP 22
3353: PUSH
3354: LD_INT 1
3356: NEG
3357: GREATER
3358: IFFALSE 3517
// begin x := mpStartPos [ pos ] [ 1 ] ;
3360: LD_ADDR_VAR 0 5
3364: PUSH
3365: LD_EXP 21
3369: PUSH
3370: LD_VAR 0 8
3374: ARRAY
3375: PUSH
3376: LD_INT 1
3378: ARRAY
3379: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3380: LD_ADDR_VAR 0 6
3384: PUSH
3385: LD_EXP 21
3389: PUSH
3390: LD_VAR 0 8
3394: ARRAY
3395: PUSH
3396: LD_INT 2
3398: ARRAY
3399: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3400: LD_VAR 0 5
3404: PPUSH
3405: LD_VAR 0 6
3409: PPUSH
3410: LD_INT 12
3412: PPUSH
3413: LD_INT 2
3415: PPUSH
3416: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3420: LD_ADDR_EXP 23
3424: PUSH
3425: LD_EXP 23
3429: PPUSH
3430: LD_VAR 0 7
3434: PPUSH
3435: LD_VAR 0 7
3439: PPUSH
3440: LD_VAR 0 5
3444: PPUSH
3445: LD_VAR 0 6
3449: PPUSH
3450: LD_INT 1
3452: PUSH
3453: LD_INT 100
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: LD_INT 2
3462: PUSH
3463: LD_INT 70
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: LD_INT 40
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 10
3482: PUSH
3483: LD_INT 25
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 20
3492: PUSH
3493: LD_INT 100
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: PPUSH
3507: CALL_OW 418
3511: PPUSH
3512: CALL_OW 1
3516: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3517: LD_EXP 14
3521: PPUSH
3522: CALL 13543 0 1
3526: IFFALSE 3725
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
3528: LD_EXP 3
3532: PUSH
3533: LD_INT 2
3535: PUSH
3536: LD_INT 8
3538: PUSH
3539: LD_INT 6
3541: PUSH
3542: LD_INT 7
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: IN
3551: IFFALSE 3571
// begin bc_level := 10 ;
3553: LD_ADDR_OWVAR 43
3557: PUSH
3558: LD_INT 10
3560: ST_TO_ADDR
// bc_type := b_warehouse ;
3561: LD_ADDR_OWVAR 42
3565: PUSH
3566: LD_INT 1
3568: ST_TO_ADDR
// end else
3569: GO 3587
// begin bc_level := 0 ;
3571: LD_ADDR_OWVAR 43
3575: PUSH
3576: LD_INT 0
3578: ST_TO_ADDR
// bc_type := b_depot ;
3579: LD_ADDR_OWVAR 42
3583: PUSH
3584: LD_INT 0
3586: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3587: LD_ADDR_VAR 0 4
3591: PUSH
3592: LD_EXP 14
3596: PUSH
3597: LD_VAR 0 8
3601: ARRAY
3602: PUSH
3603: LD_INT 1
3605: ARRAY
3606: PPUSH
3607: LD_EXP 14
3611: PUSH
3612: LD_VAR 0 8
3616: ARRAY
3617: PUSH
3618: LD_INT 2
3620: ARRAY
3621: PPUSH
3622: LD_EXP 14
3626: PUSH
3627: LD_VAR 0 8
3631: ARRAY
3632: PUSH
3633: LD_INT 3
3635: ARRAY
3636: PPUSH
3637: CALL_OW 47
3641: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3642: LD_VAR 0 4
3646: PPUSH
3647: LD_STRING @
3649: PUSH
3650: LD_VAR 0 7
3654: STR
3655: PPUSH
3656: CALL_OW 500
// if Count ( mpStartingResources ) then
3660: LD_EXP 15
3664: PPUSH
3665: CALL 13543 0 1
3669: IFFALSE 3723
// begin for j := 1 to mpStartingResources do
3671: LD_ADDR_VAR 0 3
3675: PUSH
3676: DOUBLE
3677: LD_INT 1
3679: DEC
3680: ST_TO_ADDR
3681: LD_EXP 15
3685: PUSH
3686: FOR_TO
3687: IFFALSE 3721
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3689: LD_VAR 0 4
3693: PPUSH
3694: CALL_OW 274
3698: PPUSH
3699: LD_VAR 0 3
3703: PPUSH
3704: LD_EXP 15
3708: PUSH
3709: LD_VAR 0 3
3713: ARRAY
3714: PPUSH
3715: CALL_OW 277
3719: GO 3686
3721: POP
3722: POP
// end ; end else
3723: GO 3932
// if Count ( mpStartingResources ) then
3725: LD_EXP 15
3729: PPUSH
3730: CALL 13543 0 1
3734: IFFALSE 3932
// begin x := mpStartPos [ pos ] [ 1 ] ;
3736: LD_ADDR_VAR 0 5
3740: PUSH
3741: LD_EXP 21
3745: PUSH
3746: LD_VAR 0 8
3750: ARRAY
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3756: LD_ADDR_VAR 0 6
3760: PUSH
3761: LD_EXP 21
3765: PUSH
3766: LD_VAR 0 8
3770: ARRAY
3771: PUSH
3772: LD_INT 2
3774: ARRAY
3775: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3776: LD_ADDR_VAR 0 3
3780: PUSH
3781: DOUBLE
3782: LD_INT 1
3784: DEC
3785: ST_TO_ADDR
3786: LD_EXP 15
3790: PUSH
3791: FOR_TO
3792: IFFALSE 3930
// begin resources := mpStartingResources [ j ] ;
3794: LD_ADDR_VAR 0 13
3798: PUSH
3799: LD_EXP 15
3803: PUSH
3804: LD_VAR 0 3
3808: ARRAY
3809: ST_TO_ADDR
// if resources = 0 then
3810: LD_VAR 0 13
3814: PUSH
3815: LD_INT 0
3817: EQUAL
3818: IFFALSE 3822
// continue ;
3820: GO 3791
// repeat if resources >= 50 then
3822: LD_VAR 0 13
3826: PUSH
3827: LD_INT 50
3829: GREATEREQUAL
3830: IFFALSE 3876
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3832: LD_VAR 0 3
3836: PPUSH
3837: LD_INT 5
3839: PPUSH
3840: LD_VAR 0 5
3844: PPUSH
3845: LD_VAR 0 6
3849: PPUSH
3850: LD_INT 6
3852: PPUSH
3853: LD_INT 0
3855: PPUSH
3856: CALL_OW 60
// resources := resources - 50 ;
3860: LD_ADDR_VAR 0 13
3864: PUSH
3865: LD_VAR 0 13
3869: PUSH
3870: LD_INT 50
3872: MINUS
3873: ST_TO_ADDR
// end else
3874: GO 3918
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: LD_VAR 0 13
3885: PUSH
3886: LD_INT 10
3888: DIV
3889: PPUSH
3890: LD_VAR 0 5
3894: PPUSH
3895: LD_VAR 0 6
3899: PPUSH
3900: LD_INT 6
3902: PPUSH
3903: LD_INT 0
3905: PPUSH
3906: CALL_OW 60
// resources := 0 ;
3910: LD_ADDR_VAR 0 13
3914: PUSH
3915: LD_INT 0
3917: ST_TO_ADDR
// end ; until resources <= 0 ;
3918: LD_VAR 0 13
3922: PUSH
3923: LD_INT 0
3925: LESSEQUAL
3926: IFFALSE 3822
// end ;
3928: GO 3791
3930: POP
3931: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
3932: LD_EXP 17
3936: PPUSH
3937: CALL 13543 0 1
3941: IFFALSE 3961
3943: PUSH
3944: LD_EXP 3
3948: PUSH
3949: LD_INT 2
3951: PUSH
3952: LD_INT 8
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: IN
3959: NOT
3960: AND
3961: IFFALSE 4039
// begin for j in mpBuildings [ pos ] do
3963: LD_ADDR_VAR 0 3
3967: PUSH
3968: LD_EXP 17
3972: PUSH
3973: LD_VAR 0 8
3977: ARRAY
3978: PUSH
3979: FOR_IN
3980: IFFALSE 4037
// begin bc_level := 0 ;
3982: LD_ADDR_OWVAR 43
3986: PUSH
3987: LD_INT 0
3989: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3990: LD_ADDR_OWVAR 42
3994: PUSH
3995: LD_VAR 0 3
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4004: LD_VAR 0 3
4008: PUSH
4009: LD_INT 2
4011: ARRAY
4012: PPUSH
4013: LD_VAR 0 3
4017: PUSH
4018: LD_INT 3
4020: ARRAY
4021: PPUSH
4022: LD_VAR 0 3
4026: PUSH
4027: LD_INT 4
4029: ARRAY
4030: PPUSH
4031: CALL_OW 47
// end ;
4035: GO 3979
4037: POP
4038: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4039: LD_EXP 26
4043: IFFALSE 4063
4045: PUSH
4046: LD_INT 20
4048: PPUSH
4049: LD_VAR 0 7
4053: PPUSH
4054: CALL_OW 321
4058: PUSH
4059: LD_INT 1
4061: EQUAL
4062: AND
4063: IFFALSE 4080
// SetTech ( tech_SibDet , side , state_researched ) ;
4065: LD_INT 20
4067: PPUSH
4068: LD_VAR 0 7
4072: PPUSH
4073: LD_INT 2
4075: PPUSH
4076: CALL_OW 322
// if not mpArtifacts then
4080: LD_EXP 45
4084: NOT
4085: IFFALSE 4102
// SetTech ( tech_artifact , side , state_disabled ) ;
4087: LD_INT 24
4089: PPUSH
4090: LD_VAR 0 7
4094: PPUSH
4095: LD_INT 0
4097: PPUSH
4098: CALL_OW 322
// if mpSibBomb = 1 then
4102: LD_EXP 28
4106: PUSH
4107: LD_INT 1
4109: EQUAL
4110: IFFALSE 4129
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4112: LD_INT 25
4114: PPUSH
4115: LD_VAR 0 7
4119: PPUSH
4120: LD_INT 1
4122: PPUSH
4123: CALL_OW 322
// end else
4127: GO 4144
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4129: LD_INT 25
4131: PPUSH
4132: LD_VAR 0 7
4136: PPUSH
4137: LD_INT 0
4139: PPUSH
4140: CALL_OW 322
// end ; if mpVehicles then
4144: LD_EXP 36
4148: IFFALSE 4247
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4150: LD_ADDR_VAR 0 3
4154: PUSH
4155: LD_VAR 0 7
4159: PPUSH
4160: LD_VAR 0 9
4164: PPUSH
4165: LD_EXP 36
4169: PPUSH
4170: CALL 5506 0 3
4174: PUSH
4175: FOR_IN
4176: IFFALSE 4245
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 0
4185: PPUSH
4186: LD_INT 5
4188: PPUSH
4189: CALL_OW 12
4193: PPUSH
4194: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4198: LD_VAR 0 3
4202: PPUSH
4203: LD_EXP 21
4207: PUSH
4208: LD_VAR 0 8
4212: ARRAY
4213: PUSH
4214: LD_INT 1
4216: ARRAY
4217: PPUSH
4218: LD_EXP 21
4222: PUSH
4223: LD_VAR 0 8
4227: ARRAY
4228: PUSH
4229: LD_INT 2
4231: ARRAY
4232: PPUSH
4233: LD_INT 12
4235: PPUSH
4236: LD_INT 0
4238: PPUSH
4239: CALL_OW 50
// end ;
4243: GO 4175
4245: POP
4246: POP
// end ; uc_nation := nation ;
4247: LD_ADDR_OWVAR 21
4251: PUSH
4252: LD_VAR 0 9
4256: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4257: LD_EXP 3
4261: PUSH
4262: LD_INT 6
4264: PUSH
4265: LD_INT 7
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: IN
4272: IFFALSE 4297
4274: PUSH
4275: LD_EXP 7
4279: PUSH
4280: LD_VAR 0 2
4284: ARRAY
4285: PUSH
4286: LD_INT 1
4288: PUSH
4289: LD_INT 2
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: IN
4296: AND
4297: IFFALSE 4345
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4299: LD_ADDR_VAR 0 11
4303: PUSH
4304: LD_VAR 0 7
4308: PPUSH
4309: LD_VAR 0 9
4313: PPUSH
4314: LD_EXP 24
4318: PUSH
4319: LD_EXP 24
4323: PUSH
4324: LD_INT 2
4326: DIV
4327: PLUS
4328: PPUSH
4329: LD_EXP 25
4333: PUSH
4334: LD_INT 1
4336: PLUS
4337: PPUSH
4338: CALL 4961 0 4
4342: ST_TO_ADDR
4343: GO 4375
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4345: LD_ADDR_VAR 0 11
4349: PUSH
4350: LD_VAR 0 7
4354: PPUSH
4355: LD_VAR 0 9
4359: PPUSH
4360: LD_EXP 24
4364: PPUSH
4365: LD_EXP 25
4369: PPUSH
4370: CALL 4961 0 4
4374: ST_TO_ADDR
// for j in team do
4375: LD_ADDR_VAR 0 3
4379: PUSH
4380: LD_VAR 0 11
4384: PUSH
4385: FOR_IN
4386: IFFALSE 4435
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4388: LD_VAR 0 3
4392: PPUSH
4393: LD_EXP 21
4397: PUSH
4398: LD_VAR 0 8
4402: ARRAY
4403: PUSH
4404: LD_INT 1
4406: ARRAY
4407: PPUSH
4408: LD_EXP 21
4412: PUSH
4413: LD_VAR 0 8
4417: ARRAY
4418: PUSH
4419: LD_INT 2
4421: ARRAY
4422: PPUSH
4423: LD_INT 12
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 50
4433: GO 4385
4435: POP
4436: POP
// if mpApemans then
4437: LD_EXP 30
4441: IFFALSE 4547
// begin for j := 1 to mpApemans do
4443: LD_ADDR_VAR 0 3
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_EXP 30
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4545
// begin PrepareApeman ( - 5 ) ;
4461: LD_INT 5
4463: NEG
4464: PPUSH
4465: CALL 45646 0 1
// ape := CreateHuman ;
4469: LD_ADDR_VAR 0 10
4473: PUSH
4474: CALL_OW 44
4478: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4479: LD_ADDR_EXP 32
4483: PUSH
4484: LD_EXP 32
4488: PPUSH
4489: LD_VAR 0 8
4493: PPUSH
4494: LD_EXP 32
4498: PUSH
4499: LD_VAR 0 8
4503: ARRAY
4504: PPUSH
4505: LD_VAR 0 10
4509: PPUSH
4510: CALL 49519 0 2
4514: PPUSH
4515: CALL_OW 1
4519: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4520: LD_VAR 0 10
4524: PPUSH
4525: LD_EXP 31
4529: PUSH
4530: LD_VAR 0 8
4534: ARRAY
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: CALL_OW 49
// end ;
4543: GO 4458
4545: POP
4546: POP
// end ; end ;
4547: GO 3089
4549: POP
4550: POP
// if not mpTeamGame then
4551: LD_EXP 11
4555: NOT
4556: IFFALSE 4654
// begin for i := 1 to 8 do
4558: LD_ADDR_VAR 0 2
4562: PUSH
4563: DOUBLE
4564: LD_INT 1
4566: DEC
4567: ST_TO_ADDR
4568: LD_INT 8
4570: PUSH
4571: FOR_TO
4572: IFFALSE 4650
// for j := 1 to 8 do
4574: LD_ADDR_VAR 0 3
4578: PUSH
4579: DOUBLE
4580: LD_INT 1
4582: DEC
4583: ST_TO_ADDR
4584: LD_INT 8
4586: PUSH
4587: FOR_TO
4588: IFFALSE 4646
// if i <> j then
4590: LD_VAR 0 2
4594: PUSH
4595: LD_VAR 0 3
4599: NONEQUAL
4600: IFFALSE 4624
// SetAttitude ( i , j , att_neutral , true ) else
4602: LD_VAR 0 2
4606: PPUSH
4607: LD_VAR 0 3
4611: PPUSH
4612: LD_INT 0
4614: PPUSH
4615: LD_INT 1
4617: PPUSH
4618: CALL_OW 80
4622: GO 4644
// SetAttitude ( i , j , att_friend , true ) ;
4624: LD_VAR 0 2
4628: PPUSH
4629: LD_VAR 0 3
4633: PPUSH
4634: LD_INT 1
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: CALL_OW 80
4644: GO 4587
4646: POP
4647: POP
4648: GO 4571
4650: POP
4651: POP
// end else
4652: GO 4829
// begin if mpSharedVision then
4654: LD_EXP 16
4658: IFFALSE 4723
// begin for i in mpTeams do
4660: LD_ADDR_VAR 0 2
4664: PUSH
4665: LD_EXP 10
4669: PUSH
4670: FOR_IN
4671: IFFALSE 4721
// for j := 2 to i do
4673: LD_ADDR_VAR 0 3
4677: PUSH
4678: DOUBLE
4679: LD_INT 2
4681: DEC
4682: ST_TO_ADDR
4683: LD_VAR 0 2
4687: PUSH
4688: FOR_TO
4689: IFFALSE 4717
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4691: LD_VAR 0 2
4695: PUSH
4696: LD_VAR 0 3
4700: ARRAY
4701: PPUSH
4702: LD_VAR 0 2
4706: PUSH
4707: LD_INT 1
4709: ARRAY
4710: PPUSH
4711: CALL_OW 343
4715: GO 4688
4717: POP
4718: POP
4719: GO 4670
4721: POP
4722: POP
// end ; for i := 1 to 8 do
4723: LD_ADDR_VAR 0 2
4727: PUSH
4728: DOUBLE
4729: LD_INT 1
4731: DEC
4732: ST_TO_ADDR
4733: LD_INT 8
4735: PUSH
4736: FOR_TO
4737: IFFALSE 4827
// for j := 1 to 8 do
4739: LD_ADDR_VAR 0 3
4743: PUSH
4744: DOUBLE
4745: LD_INT 1
4747: DEC
4748: ST_TO_ADDR
4749: LD_INT 8
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4823
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4755: LD_EXP 8
4759: PUSH
4760: LD_VAR 0 2
4764: ARRAY
4765: PUSH
4766: LD_EXP 8
4770: PUSH
4771: LD_VAR 0 3
4775: ARRAY
4776: EQUAL
4777: IFFALSE 4801
// SetAttitude ( i , j , att_friend , true ) else
4779: LD_VAR 0 2
4783: PPUSH
4784: LD_VAR 0 3
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: LD_INT 1
4794: PPUSH
4795: CALL_OW 80
4799: GO 4821
// SetAttitude ( i , j , att_enemy , true ) ;
4801: LD_VAR 0 2
4805: PPUSH
4806: LD_VAR 0 3
4810: PPUSH
4811: LD_INT 2
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: CALL_OW 80
4821: GO 4752
4823: POP
4824: POP
4825: GO 4736
4827: POP
4828: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4829: LD_ADDR_OWVAR 71
4833: PUSH
4834: LD_EXP 9
4838: PUSH
4839: LD_OWVAR 2
4843: ARRAY
4844: ST_TO_ADDR
// if IAmSpec then
4845: CALL_OW 531
4849: IFFALSE 4890
// begin FogOff ( true ) ;
4851: LD_INT 1
4853: PPUSH
4854: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4858: LD_EXP 29
4862: PUSH
4863: LD_INT 1
4865: ARRAY
4866: PUSH
4867: LD_INT 2
4869: DIV
4870: PPUSH
4871: LD_EXP 29
4875: PUSH
4876: LD_INT 2
4878: ARRAY
4879: PUSH
4880: LD_INT 2
4882: DIV
4883: PPUSH
4884: CALL_OW 86
// end else
4888: GO 4936
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4890: LD_EXP 21
4894: PUSH
4895: LD_EXP 7
4899: PUSH
4900: LD_OWVAR 2
4904: ARRAY
4905: ARRAY
4906: PUSH
4907: LD_INT 1
4909: ARRAY
4910: PPUSH
4911: LD_EXP 21
4915: PUSH
4916: LD_EXP 7
4920: PUSH
4921: LD_OWVAR 2
4925: ARRAY
4926: ARRAY
4927: PUSH
4928: LD_INT 2
4930: ARRAY
4931: PPUSH
4932: CALL_OW 86
// end ; BeginBuildUp ;
4936: CALL 6039 0 0
// enable ( mpActive ) ;
4940: LD_INT 100
4942: ENABLE_MARKED
// enable ( mpGameType ) ;
4943: LD_EXP 3
4947: ENABLE_MARKED
// mpGameActive := true ;
4948: LD_ADDR_EXP 39
4952: PUSH
4953: LD_INT 1
4955: ST_TO_ADDR
// end ;
4956: LD_VAR 0 1
4960: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
4961: LD_INT 0
4963: PPUSH
4964: PPUSH
4965: PPUSH
4966: PPUSH
4967: PPUSH
// result := [ ] ;
4968: LD_ADDR_VAR 0 5
4972: PUSH
4973: EMPTY
4974: ST_TO_ADDR
// class := class_soldier ;
4975: LD_ADDR_VAR 0 8
4979: PUSH
4980: LD_INT 1
4982: ST_TO_ADDR
// uc_side := side ;
4983: LD_ADDR_OWVAR 20
4987: PUSH
4988: LD_VAR 0 1
4992: ST_TO_ADDR
// uc_nation := nation ;
4993: LD_ADDR_OWVAR 21
4997: PUSH
4998: LD_VAR 0 2
5002: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5003: LD_ADDR_OWVAR 26
5007: PUSH
5008: LD_OWVAR 19
5012: PUSH
5013: LD_VAR 0 1
5017: ARRAY
5018: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5019: LD_INT 1
5021: PPUSH
5022: LD_INT 2
5024: PPUSH
5025: CALL_OW 12
5029: PPUSH
5030: LD_VAR 0 8
5034: PPUSH
5035: LD_VAR 0 4
5039: PUSH
5040: LD_INT 2
5042: PLUS
5043: PPUSH
5044: CALL_OW 380
// hc_importance := 105 ;
5048: LD_ADDR_OWVAR 32
5052: PUSH
5053: LD_INT 105
5055: ST_TO_ADDR
// if Multiplayer then
5056: LD_OWVAR 4
5060: IFFALSE 5100
// begin hc_gallery := MULTIAVATARS ;
5062: LD_ADDR_OWVAR 33
5066: PUSH
5067: LD_STRING MULTIAVATARS
5069: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5070: LD_ADDR_OWVAR 34
5074: PUSH
5075: LD_VAR 0 1
5079: PPUSH
5080: CALL_OW 525
5084: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5085: LD_ADDR_OWVAR 27
5089: PUSH
5090: LD_VAR 0 1
5094: PPUSH
5095: CALL_OW 526
5099: ST_TO_ADDR
// end ; commander := CreateHuman ;
5100: LD_ADDR_VAR 0 9
5104: PUSH
5105: CALL_OW 44
5109: ST_TO_ADDR
// result := Join ( result , commander ) ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PPUSH
5120: LD_VAR 0 9
5124: PPUSH
5125: CALL 49519 0 2
5129: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5130: LD_ADDR_EXP 41
5134: PUSH
5135: LD_EXP 41
5139: PPUSH
5140: LD_VAR 0 1
5144: PPUSH
5145: LD_VAR 0 9
5149: PPUSH
5150: CALL_OW 1
5154: ST_TO_ADDR
// if mpTeamPreset then
5155: LD_LOC 1
5159: IFFALSE 5255
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5161: LD_LOC 1
5165: PUSH
5166: LD_INT 1
5168: ARRAY
5169: PPUSH
5170: LD_VAR 0 5
5174: PUSH
5175: LD_VAR 0 5
5179: ARRAY
5180: PPUSH
5181: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5185: LD_VAR 0 5
5189: PUSH
5190: LD_VAR 0 5
5194: ARRAY
5195: PPUSH
5196: LD_INT 1
5198: PPUSH
5199: LD_LOC 1
5203: PUSH
5204: LD_INT 1
5206: ARRAY
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 260
5215: PPUSH
5216: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5220: LD_VAR 0 5
5224: PUSH
5225: LD_VAR 0 5
5229: ARRAY
5230: PPUSH
5231: LD_INT 2
5233: PPUSH
5234: LD_LOC 1
5238: PUSH
5239: LD_INT 1
5241: ARRAY
5242: PPUSH
5243: LD_INT 2
5245: PPUSH
5246: CALL_OW 260
5250: PPUSH
5251: CALL_OW 239
// end ; InitHc_All ( ) ;
5255: CALL_OW 584
// class := 2 ;
5259: LD_ADDR_VAR 0 8
5263: PUSH
5264: LD_INT 2
5266: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5267: LD_ADDR_VAR 0 6
5271: PUSH
5272: DOUBLE
5273: LD_INT 1
5275: DEC
5276: ST_TO_ADDR
5277: LD_VAR 0 3
5281: PUSH
5282: LD_INT 1
5284: MINUS
5285: PUSH
5286: FOR_TO
5287: IFFALSE 5482
// begin PrepareHuman ( false , class , skill ) ;
5289: LD_INT 0
5291: PPUSH
5292: LD_VAR 0 8
5296: PPUSH
5297: LD_VAR 0 4
5301: PPUSH
5302: CALL_OW 380
// un := CreateHuman ;
5306: LD_ADDR_VAR 0 7
5310: PUSH
5311: CALL_OW 44
5315: ST_TO_ADDR
// result := Join ( result , un ) ;
5316: LD_ADDR_VAR 0 5
5320: PUSH
5321: LD_VAR 0 5
5325: PPUSH
5326: LD_VAR 0 7
5330: PPUSH
5331: CALL 49519 0 2
5335: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5336: LD_LOC 1
5340: PPUSH
5341: CALL 13543 0 1
5345: PUSH
5346: LD_VAR 0 3
5350: GREATEREQUAL
5351: IFFALSE 5447
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5353: LD_LOC 1
5357: PUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 1
5365: PLUS
5366: ARRAY
5367: PPUSH
5368: LD_VAR 0 7
5372: PPUSH
5373: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5377: LD_VAR 0 7
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: LD_LOC 1
5389: PUSH
5390: LD_VAR 0 6
5394: PUSH
5395: LD_INT 1
5397: PLUS
5398: ARRAY
5399: PPUSH
5400: LD_INT 1
5402: PPUSH
5403: CALL_OW 260
5407: PPUSH
5408: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5412: LD_VAR 0 7
5416: PPUSH
5417: LD_INT 2
5419: PPUSH
5420: LD_LOC 1
5424: PUSH
5425: LD_VAR 0 6
5429: PUSH
5430: LD_INT 1
5432: PLUS
5433: ARRAY
5434: PPUSH
5435: LD_INT 2
5437: PPUSH
5438: CALL_OW 260
5442: PPUSH
5443: CALL_OW 239
// end ; class := Inc ( class ) ;
5447: LD_ADDR_VAR 0 8
5451: PUSH
5452: LD_VAR 0 8
5456: PPUSH
5457: CALL 50892 0 1
5461: ST_TO_ADDR
// if class = 5 then
5462: LD_VAR 0 8
5466: PUSH
5467: LD_INT 5
5469: EQUAL
5470: IFFALSE 5480
// class := 1 ;
5472: LD_ADDR_VAR 0 8
5476: PUSH
5477: LD_INT 1
5479: ST_TO_ADDR
// end ;
5480: GO 5286
5482: POP
5483: POP
// if not mpTeamPreset then
5484: LD_LOC 1
5488: NOT
5489: IFFALSE 5501
// mpTeamPreset := result ;
5491: LD_ADDR_LOC 1
5495: PUSH
5496: LD_VAR 0 5
5500: ST_TO_ADDR
// end ;
5501: LD_VAR 0 5
5505: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5506: LD_INT 0
5508: PPUSH
5509: PPUSH
// result := [ ] ;
5510: LD_ADDR_VAR 0 4
5514: PUSH
5515: EMPTY
5516: ST_TO_ADDR
// if not vehicles then
5517: LD_VAR 0 3
5521: NOT
5522: IFFALSE 5526
// exit ;
5524: GO 5740
// for i := 1 to vehicles [ nation ] do
5526: LD_ADDR_VAR 0 5
5530: PUSH
5531: DOUBLE
5532: LD_INT 1
5534: DEC
5535: ST_TO_ADDR
5536: LD_VAR 0 3
5540: PUSH
5541: LD_VAR 0 2
5545: ARRAY
5546: PUSH
5547: FOR_TO
5548: IFFALSE 5738
// begin uc_side := side ;
5550: LD_ADDR_OWVAR 20
5554: PUSH
5555: LD_VAR 0 1
5559: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5560: LD_VAR 0 3
5564: PUSH
5565: LD_VAR 0 2
5569: ARRAY
5570: PUSH
5571: LD_VAR 0 5
5575: ARRAY
5576: PPUSH
5577: CALL 13543 0 1
5581: PUSH
5582: LD_INT 4
5584: GREATER
5585: IFFALSE 5615
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5587: LD_ADDR_OWVAR 21
5591: PUSH
5592: LD_VAR 0 3
5596: PUSH
5597: LD_VAR 0 2
5601: ARRAY
5602: PUSH
5603: LD_VAR 0 5
5607: ARRAY
5608: PUSH
5609: LD_INT 5
5611: ARRAY
5612: ST_TO_ADDR
5613: GO 5625
// uc_nation := nation ;
5615: LD_ADDR_OWVAR 21
5619: PUSH
5620: LD_VAR 0 2
5624: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5625: LD_VAR 0 3
5629: PUSH
5630: LD_VAR 0 2
5634: ARRAY
5635: PUSH
5636: LD_VAR 0 5
5640: ARRAY
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PPUSH
5646: LD_VAR 0 3
5650: PUSH
5651: LD_VAR 0 2
5655: ARRAY
5656: PUSH
5657: LD_VAR 0 5
5661: ARRAY
5662: PUSH
5663: LD_INT 2
5665: ARRAY
5666: PPUSH
5667: LD_VAR 0 3
5671: PUSH
5672: LD_VAR 0 2
5676: ARRAY
5677: PUSH
5678: LD_VAR 0 5
5682: ARRAY
5683: PUSH
5684: LD_INT 3
5686: ARRAY
5687: PPUSH
5688: LD_VAR 0 3
5692: PUSH
5693: LD_VAR 0 2
5697: ARRAY
5698: PUSH
5699: LD_VAR 0 5
5703: ARRAY
5704: PUSH
5705: LD_INT 4
5707: ARRAY
5708: PPUSH
5709: LD_INT 80
5711: PPUSH
5712: CALL 16339 0 5
// result := Join ( result , CreateVehicle ) ;
5716: LD_ADDR_VAR 0 4
5720: PUSH
5721: LD_VAR 0 4
5725: PPUSH
5726: CALL_OW 45
5730: PPUSH
5731: CALL 49519 0 2
5735: ST_TO_ADDR
// end ;
5736: GO 5547
5738: POP
5739: POP
// end ;
5740: LD_VAR 0 4
5744: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
// for i in mpBattleFlags do
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_EXP 23
5758: PUSH
5759: FOR_IN
5760: IFFALSE 5837
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5762: LD_VAR 0 3
5766: PPUSH
5767: LD_INT 1
5769: PUSH
5770: LD_VAR 0 1
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 2
5781: PUSH
5782: LD_VAR 0 1
5786: PUSH
5787: LD_REAL  7.00000000000000E-0001
5790: MUL
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 3
5798: PUSH
5799: LD_VAR 0 1
5803: PUSH
5804: LD_REAL  4.00000000000000E-0001
5807: MUL
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 20
5815: PUSH
5816: LD_VAR 0 1
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: PPUSH
5831: CALL_OW 423
5835: GO 5759
5837: POP
5838: POP
// end ;
5839: LD_VAR 0 2
5843: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5844: LD_INT 100
5846: IFFALSE 5941
5848: GO 5850
5850: DISABLE
5851: LD_INT 0
5853: PPUSH
5854: PPUSH
// begin if mpBattleFlag <= 0 then
5855: LD_EXP 22
5859: PUSH
5860: LD_INT 0
5862: LESSEQUAL
5863: IFFALSE 5867
// exit ;
5865: GO 5941
// strength := 100 ;
5867: LD_ADDR_VAR 0 2
5871: PUSH
5872: LD_INT 100
5874: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5875: LD_EXP 22
5879: PPUSH
5880: CALL_OW 67
// strength := Dec ( strength ) ;
5884: LD_ADDR_VAR 0 2
5888: PUSH
5889: LD_VAR 0 2
5893: PPUSH
5894: CALL 50914 0 1
5898: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL 5745 0 1
// until not strength ;
5908: LD_VAR 0 2
5912: NOT
5913: IFFALSE 5875
// for i in mpBattleFlags do
5915: LD_ADDR_VAR 0 1
5919: PUSH
5920: LD_EXP 23
5924: PUSH
5925: FOR_IN
5926: IFFALSE 5939
// KillBattleFlag ( i ) ;
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 419
5937: GO 5925
5939: POP
5940: POP
// end ;
5941: PPOPN 2
5943: END
// every 0 0$1 marked mpActive do var side , tmp ;
5944: GO 5946
5946: DISABLE
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
// begin if mpSibBomb <= 1 then
5951: LD_EXP 28
5955: PUSH
5956: LD_INT 1
5958: LESSEQUAL
5959: IFFALSE 5963
// exit ;
5961: GO 6036
// tmp := mpSibBomb ;
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: LD_EXP 28
5972: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5973: LD_INT 35
5975: PPUSH
5976: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5980: LD_ADDR_VAR 0 2
5984: PUSH
5985: LD_VAR 0 2
5989: PUSH
5990: LD_INT 35
5992: MINUS
5993: ST_TO_ADDR
// until not tmp ;
5994: LD_VAR 0 2
5998: NOT
5999: IFFALSE 5973
// for side := 1 to 8 do
6001: LD_ADDR_VAR 0 1
6005: PUSH
6006: DOUBLE
6007: LD_INT 1
6009: DEC
6010: ST_TO_ADDR
6011: LD_INT 8
6013: PUSH
6014: FOR_TO
6015: IFFALSE 6034
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6017: LD_INT 25
6019: PPUSH
6020: LD_VAR 0 1
6024: PPUSH
6025: LD_INT 1
6027: PPUSH
6028: CALL_OW 322
6032: GO 6014
6034: POP
6035: POP
// end ;
6036: PPOPN 2
6038: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6039: LD_INT 0
6041: PPUSH
6042: PPUSH
6043: PPUSH
// mpBuildUpTimeDelay := 0 ;
6044: LD_ADDR_EXP 48
6048: PUSH
6049: LD_INT 0
6051: ST_TO_ADDR
// if not mpBuildUpTime then
6052: LD_EXP 20
6056: NOT
6057: IFFALSE 6061
// exit ;
6059: GO 6250
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6061: LD_ADDR_EXP 48
6065: PUSH
6066: LD_INT 8400
6068: PUSH
6069: LD_INT 2100
6071: PUSH
6072: LD_EXP 20
6076: MUL
6077: PLUS
6078: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6079: LD_ADDR_EXP 49
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// for i := 1 to 8 do
6087: LD_ADDR_VAR 0 2
6091: PUSH
6092: DOUBLE
6093: LD_INT 1
6095: DEC
6096: ST_TO_ADDR
6097: LD_INT 8
6099: PUSH
6100: FOR_TO
6101: IFFALSE 6248
// if mpSidePositions [ i ] then
6103: LD_EXP 7
6107: PUSH
6108: LD_VAR 0 2
6112: ARRAY
6113: IFFALSE 6246
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6115: LD_EXP 19
6119: PUSH
6120: LD_EXP 7
6124: PUSH
6125: LD_VAR 0 2
6129: ARRAY
6130: ARRAY
6131: PPUSH
6132: LD_INT 5
6134: PPUSH
6135: CALL_OW 424
// for j := 1 to 8 do
6139: LD_ADDR_VAR 0 3
6143: PUSH
6144: DOUBLE
6145: LD_INT 1
6147: DEC
6148: ST_TO_ADDR
6149: LD_INT 8
6151: PUSH
6152: FOR_TO
6153: IFFALSE 6244
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6155: LD_EXP 7
6159: PUSH
6160: LD_VAR 0 3
6164: ARRAY
6165: IFFALSE 6214
6167: PUSH
6168: LD_EXP 8
6172: PUSH
6173: LD_VAR 0 2
6177: ARRAY
6178: PUSH
6179: LD_EXP 8
6183: PUSH
6184: LD_VAR 0 3
6188: ARRAY
6189: NONEQUAL
6190: IFTRUE 6213
6192: PUSH
6193: LD_EXP 11
6197: NOT
6198: IFFALSE 6212
6200: PUSH
6201: LD_VAR 0 2
6205: PUSH
6206: LD_VAR 0 3
6210: NONEQUAL
6211: AND
6212: OR
6213: AND
6214: IFFALSE 6242
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6216: LD_VAR 0 3
6220: PPUSH
6221: LD_EXP 19
6225: PUSH
6226: LD_EXP 7
6230: PUSH
6231: LD_VAR 0 2
6235: ARRAY
6236: ARRAY
6237: PPUSH
6238: CALL_OW 333
6242: GO 6152
6244: POP
6245: POP
// end ;
6246: GO 6100
6248: POP
6249: POP
// end ;
6250: LD_VAR 0 1
6254: RET
// function EndBuildUp ; var i , j ; begin
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
// mpBuildUpTimeActive := false ;
6260: LD_ADDR_EXP 49
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
// for i := 1 to 8 do
6268: LD_ADDR_VAR 0 2
6272: PUSH
6273: DOUBLE
6274: LD_INT 1
6276: DEC
6277: ST_TO_ADDR
6278: LD_INT 8
6280: PUSH
6281: FOR_TO
6282: IFFALSE 6429
// if mpSidePositions [ i ] then
6284: LD_EXP 7
6288: PUSH
6289: LD_VAR 0 2
6293: ARRAY
6294: IFFALSE 6427
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6296: LD_EXP 19
6300: PUSH
6301: LD_EXP 7
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: ARRAY
6312: PPUSH
6313: LD_INT 0
6315: PPUSH
6316: CALL_OW 424
// for j := 1 to 8 do
6320: LD_ADDR_VAR 0 3
6324: PUSH
6325: DOUBLE
6326: LD_INT 1
6328: DEC
6329: ST_TO_ADDR
6330: LD_INT 8
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6425
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6336: LD_EXP 7
6340: PUSH
6341: LD_VAR 0 3
6345: ARRAY
6346: IFFALSE 6395
6348: PUSH
6349: LD_EXP 8
6353: PUSH
6354: LD_VAR 0 2
6358: ARRAY
6359: PUSH
6360: LD_EXP 8
6364: PUSH
6365: LD_VAR 0 3
6369: ARRAY
6370: NONEQUAL
6371: IFTRUE 6394
6373: PUSH
6374: LD_EXP 11
6378: NOT
6379: IFFALSE 6393
6381: PUSH
6382: LD_VAR 0 2
6386: PUSH
6387: LD_VAR 0 3
6391: NONEQUAL
6392: AND
6393: OR
6394: AND
6395: IFFALSE 6423
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6397: LD_VAR 0 3
6401: PPUSH
6402: LD_EXP 19
6406: PUSH
6407: LD_EXP 7
6411: PUSH
6412: LD_VAR 0 2
6416: ARRAY
6417: ARRAY
6418: PPUSH
6419: CALL_OW 334
6423: GO 6333
6425: POP
6426: POP
// end ;
6427: GO 6281
6429: POP
6430: POP
// end ;
6431: LD_VAR 0 1
6435: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6436: LD_EXP 49
6440: IFFALSE 6619
6442: GO 6444
6444: DISABLE
6445: LD_INT 0
6447: PPUSH
6448: PPUSH
// begin for i := 1 to 8 do
6449: LD_ADDR_VAR 0 1
6453: PUSH
6454: DOUBLE
6455: LD_INT 1
6457: DEC
6458: ST_TO_ADDR
6459: LD_INT 8
6461: PUSH
6462: FOR_TO
6463: IFFALSE 6616
// if mpSidePositions [ i ] then
6465: LD_EXP 7
6469: PUSH
6470: LD_VAR 0 1
6474: ARRAY
6475: IFFALSE 6614
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6477: LD_ADDR_VAR 0 2
6481: PUSH
6482: LD_EXP 19
6486: PUSH
6487: LD_EXP 7
6491: PUSH
6492: LD_VAR 0 1
6496: ARRAY
6497: ARRAY
6498: PPUSH
6499: LD_INT 2
6501: PUSH
6502: LD_INT 21
6504: PUSH
6505: LD_INT 1
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: PUSH
6512: LD_INT 21
6514: PUSH
6515: LD_INT 2
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_OWVAR 2
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PPUSH
6543: CALL_OW 70
6547: PUSH
6548: FOR_IN
6549: IFFALSE 6612
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6551: LD_EXP 8
6555: PUSH
6556: LD_VAR 0 1
6560: ARRAY
6561: PUSH
6562: LD_EXP 8
6566: PUSH
6567: LD_OWVAR 2
6571: ARRAY
6572: NONEQUAL
6573: IFTRUE 6596
6575: PUSH
6576: LD_EXP 11
6580: NOT
6581: IFFALSE 6595
6583: PUSH
6584: LD_VAR 0 1
6588: PUSH
6589: LD_OWVAR 2
6593: NONEQUAL
6594: AND
6595: OR
6596: IFFALSE 6610
// ComMoveToArea ( un , BuildUpEscape ) ;
6598: LD_VAR 0 2
6602: PPUSH
6603: LD_INT 10
6605: PPUSH
6606: CALL_OW 113
6610: GO 6548
6612: POP
6613: POP
6614: GO 6462
6616: POP
6617: POP
// enable ;
6618: ENABLE
// end ;
6619: PPOPN 2
6621: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6622: LD_EXP 20
6626: IFFALSE 6676
6628: GO 6630
6630: DISABLE
6631: LD_INT 0
6633: PPUSH
// begin tmp := mpBuildUpTime ;
6634: LD_ADDR_VAR 0 1
6638: PUSH
6639: LD_EXP 20
6643: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6644: LD_INT 35
6646: PPUSH
6647: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6651: LD_ADDR_VAR 0 1
6655: PUSH
6656: LD_VAR 0 1
6660: PUSH
6661: LD_INT 35
6663: MINUS
6664: ST_TO_ADDR
// until not tmp ;
6665: LD_VAR 0 1
6669: NOT
6670: IFFALSE 6644
// EndBuildUp ;
6672: CALL 6255 0 0
// end ;
6676: PPOPN 1
6678: END
// every 0 0$1 trigger mpActive marked mpWin do
6679: LD_INT 100
6681: IFFALSE 6715
6683: GO 6685
6685: DISABLE
// begin if IAmServer then
6686: CALL_OW 518
6690: IFFALSE 6699
// wait ( 0 0$3 ) ;
6692: LD_INT 105
6694: PPUSH
6695: CALL_OW 67
// if Multiplayer then
6699: LD_OWVAR 4
6703: IFFALSE 6711
// YouWinInMultiplayer else
6705: CALL_OW 106
6709: GO 6715
// YouWin ;
6711: CALL_OW 103
// end ;
6715: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6716: LD_INT 0
6718: PPUSH
// result := false ;
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_INT 0
6726: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6727: LD_VAR 0 1
6731: PUSH
6732: LD_INT 1
6734: DOUBLE
6735: EQUAL
6736: IFTRUE 6758
6738: LD_INT 5
6740: DOUBLE
6741: EQUAL
6742: IFTRUE 6758
6744: LD_INT 6
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6758
6750: LD_INT 7
6752: DOUBLE
6753: EQUAL
6754: IFTRUE 6758
6756: GO 6831
6758: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6759: LD_ADDR_VAR 0 3
6763: PUSH
6764: LD_INT 22
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: LD_INT 2
6778: PUSH
6779: LD_INT 21
6781: PUSH
6782: LD_INT 1
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 33
6791: PUSH
6792: LD_INT 3
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 33
6801: PUSH
6802: LD_INT 5
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PPUSH
6819: CALL_OW 69
6823: PPUSH
6824: CALL 13543 0 1
6828: ST_TO_ADDR
// end ; GameTypeSurvival :
6829: GO 7227
6831: LD_INT 2
6833: DOUBLE
6834: EQUAL
6835: IFTRUE 6839
6837: GO 6969
6839: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6840: LD_ADDR_VAR 0 3
6844: PUSH
6845: LD_INT 22
6847: PUSH
6848: LD_VAR 0 2
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 2
6859: PUSH
6860: LD_INT 30
6862: PUSH
6863: LD_INT 0
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 30
6872: PUSH
6873: LD_INT 1
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PPUSH
6889: CALL_OW 69
6893: PPUSH
6894: CALL 13543 0 1
6898: IFFALSE 6966
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_VAR 0 2
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 2
6915: PUSH
6916: LD_INT 21
6918: PUSH
6919: LD_INT 1
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 33
6928: PUSH
6929: LD_INT 3
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: LD_INT 33
6938: PUSH
6939: LD_INT 5
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 69
6960: PPUSH
6961: CALL 13543 0 1
6965: AND
6966: ST_TO_ADDR
// end ; GameTypeSurvivalH :
6967: GO 7227
6969: LD_INT 8
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 7126
6977: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6978: LD_ADDR_VAR 0 3
6982: PUSH
6983: LD_EXP 41
6987: PUSH
6988: LD_VAR 0 2
6992: ARRAY
6993: PPUSH
6994: CALL_OW 300
6998: IFFALSE 7055
7000: PUSH
7001: LD_INT 22
7003: PUSH
7004: LD_VAR 0 2
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 2
7015: PUSH
7016: LD_INT 30
7018: PUSH
7019: LD_INT 0
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 30
7028: PUSH
7029: LD_INT 1
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PPUSH
7045: CALL_OW 69
7049: PPUSH
7050: CALL 13543 0 1
7054: AND
7055: IFFALSE 7123
7057: PUSH
7058: LD_INT 22
7060: PUSH
7061: LD_VAR 0 2
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 2
7072: PUSH
7073: LD_INT 21
7075: PUSH
7076: LD_INT 1
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 33
7085: PUSH
7086: LD_INT 3
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: LD_INT 33
7095: PUSH
7096: LD_INT 5
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PPUSH
7113: CALL_OW 69
7117: PPUSH
7118: CALL 13543 0 1
7122: AND
7123: ST_TO_ADDR
// end ; GameTypeKing :
7124: GO 7227
7126: LD_INT 3
7128: DOUBLE
7129: EQUAL
7130: IFTRUE 7134
7132: GO 7226
7134: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7135: LD_ADDR_VAR 0 3
7139: PUSH
7140: LD_INT 22
7142: PUSH
7143: LD_VAR 0 2
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 2
7154: PUSH
7155: LD_INT 21
7157: PUSH
7158: LD_INT 1
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PUSH
7165: LD_INT 33
7167: PUSH
7168: LD_INT 3
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 33
7177: PUSH
7178: LD_INT 5
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PPUSH
7195: CALL_OW 69
7199: PPUSH
7200: CALL 13543 0 1
7204: IFFALSE 7223
7206: PUSH
7207: LD_VAR 0 2
7211: PPUSH
7212: CALL 62531 0 1
7216: PUSH
7217: LD_EXP 35
7221: LESS
7222: AND
7223: ST_TO_ADDR
// end ; end ;
7224: GO 7227
7226: POP
// end ;
7227: LD_VAR 0 3
7231: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7232: LD_INT 100
7234: IFFALSE 7464
7236: GO 7238
7238: DISABLE
7239: LD_INT 0
7241: PPUSH
7242: PPUSH
// begin if Multiplayer then
7243: LD_OWVAR 4
7247: IFFALSE 7255
// SetPlayerSpectator ( ) else
7249: CALL_OW 572
7253: GO 7264
// FogOff ( your_side ) ;
7255: LD_OWVAR 2
7259: PPUSH
7260: CALL_OW 344
// repeat gameIsOn := false ;
7264: LD_ADDR_VAR 0 1
7268: PUSH
7269: LD_INT 0
7271: ST_TO_ADDR
// for i := 1 to 8 do
7272: LD_ADDR_VAR 0 2
7276: PUSH
7277: DOUBLE
7278: LD_INT 1
7280: DEC
7281: ST_TO_ADDR
7282: LD_INT 8
7284: PUSH
7285: FOR_TO
7286: IFFALSE 7416
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7288: LD_EXP 7
7292: PUSH
7293: LD_VAR 0 2
7297: ARRAY
7298: IFFALSE 7311
7300: PUSH
7301: LD_VAR 0 2
7305: PPUSH
7306: CALL_OW 108
7310: AND
7311: IFFALSE 7325
7313: PUSH
7314: LD_VAR 0 2
7318: PUSH
7319: LD_OWVAR 2
7323: NONEQUAL
7324: AND
7325: IFFALSE 7414
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7327: LD_EXP 8
7331: PUSH
7332: LD_VAR 0 2
7336: ARRAY
7337: NOT
7338: IFTRUE 7386
7340: PUSH
7341: LD_EXP 8
7345: PUSH
7346: LD_VAR 0 2
7350: ARRAY
7351: PUSH
7352: LD_EXP 8
7356: PUSH
7357: LD_OWVAR 2
7361: ARRAY
7362: NONEQUAL
7363: IFFALSE 7385
7365: PUSH
7366: LD_OWVAR 2
7370: PPUSH
7371: LD_VAR 0 2
7375: PPUSH
7376: CALL_OW 81
7380: PUSH
7381: LD_INT 1
7383: NONEQUAL
7384: AND
7385: OR
7386: IFFALSE 7414
// if HasPowerByGameType ( mpGameType , i ) then
7388: LD_EXP 3
7392: PPUSH
7393: LD_VAR 0 2
7397: PPUSH
7398: CALL 6716 0 2
7402: IFFALSE 7414
// begin gameIsOn := true ;
7404: LD_ADDR_VAR 0 1
7408: PUSH
7409: LD_INT 1
7411: ST_TO_ADDR
// break ;
7412: GO 7416
// end ;
7414: GO 7285
7416: POP
7417: POP
// wait ( 100 ) ;
7418: LD_INT 100
7420: PPUSH
7421: CALL_OW 67
// until not gameIsOn ;
7425: LD_VAR 0 1
7429: NOT
7430: IFFALSE 7264
// if IAmServer then
7432: CALL_OW 518
7436: IFFALSE 7445
// wait ( 0 0$3 ) ;
7438: LD_INT 105
7440: PPUSH
7441: CALL_OW 67
// if Multiplayer then
7445: LD_OWVAR 4
7449: IFFALSE 7457
// YouLostInMultiplayer else
7451: CALL_OW 107
7455: GO 7464
// YouLost (  ) ;
7457: LD_STRING 
7459: PPUSH
7460: CALL_OW 104
// end ;
7464: PPOPN 2
7466: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7467: LD_EXP 33
7471: IFFALSE 7855
7473: GO 7475
7475: DISABLE
7476: LD_INT 0
7478: PPUSH
7479: PPUSH
7480: PPUSH
7481: PPUSH
7482: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7483: LD_ADDR_VAR 0 5
7487: PUSH
7488: LD_INT 1
7490: PUSH
7491: LD_INT 2
7493: PUSH
7494: LD_INT 3
7496: PUSH
7497: LD_INT 4
7499: PUSH
7500: LD_INT 5
7502: PUSH
7503: LD_INT 6
7505: PUSH
7506: LD_INT 7
7508: PUSH
7509: LD_INT 8
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7522: LD_INT 350
7524: PPUSH
7525: CALL_OW 67
// for i := 1 to 8 do
7529: LD_ADDR_VAR 0 1
7533: PUSH
7534: DOUBLE
7535: LD_INT 1
7537: DEC
7538: ST_TO_ADDR
7539: LD_INT 8
7541: PUSH
7542: FOR_TO
7543: IFFALSE 7825
// begin j := sides [ i ] ;
7545: LD_ADDR_VAR 0 2
7549: PUSH
7550: LD_VAR 0 5
7554: PUSH
7555: LD_VAR 0 1
7559: ARRAY
7560: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7561: LD_EXP 40
7565: PUSH
7566: LD_VAR 0 2
7570: ARRAY
7571: PPUSH
7572: CALL 13543 0 1
7576: IFFALSE 7589
7578: PUSH
7579: LD_VAR 0 2
7583: PPUSH
7584: CALL_OW 108
7588: AND
7589: IFFALSE 7607
7591: PUSH
7592: LD_EXP 3
7596: PPUSH
7597: LD_VAR 0 2
7601: PPUSH
7602: CALL 6716 0 2
7606: AND
7607: IFFALSE 7823
// begin wait ( mpRespawn div 2 ) ;
7609: LD_EXP 33
7613: PUSH
7614: LD_INT 2
7616: DIV
7617: PPUSH
7618: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7622: LD_ADDR_VAR 0 3
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_VAR 0 2
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 50
7641: PUSH
7642: EMPTY
7643: LIST
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 30
7650: PUSH
7651: LD_INT 0
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 30
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 69
7682: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7683: LD_VAR 0 3
7687: NOT
7688: IFTRUE 7702
7690: PUSH
7691: LD_VAR 0 2
7695: PPUSH
7696: CALL_OW 108
7700: NOT
7701: OR
7702: IFTRUE 7721
7704: PUSH
7705: LD_EXP 3
7709: PPUSH
7710: LD_VAR 0 2
7714: PPUSH
7715: CALL 6716 0 2
7719: NOT
7720: OR
7721: IFFALSE 7725
// continue ;
7723: GO 7542
// spawn := tmp [ 1 ] ;
7725: LD_ADDR_VAR 0 4
7729: PUSH
7730: LD_VAR 0 3
7734: PUSH
7735: LD_INT 1
7737: ARRAY
7738: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7739: LD_EXP 40
7743: PUSH
7744: LD_VAR 0 2
7748: ARRAY
7749: PUSH
7750: LD_INT 1
7752: ARRAY
7753: PPUSH
7754: LD_VAR 0 4
7758: PPUSH
7759: CALL_OW 250
7763: PPUSH
7764: LD_VAR 0 4
7768: PPUSH
7769: CALL_OW 251
7773: PPUSH
7774: LD_INT 32
7776: PPUSH
7777: LD_INT 1
7779: PPUSH
7780: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7784: LD_ADDR_EXP 40
7788: PUSH
7789: LD_EXP 40
7793: PPUSH
7794: LD_VAR 0 2
7798: PPUSH
7799: LD_EXP 40
7803: PUSH
7804: LD_VAR 0 2
7808: ARRAY
7809: PPUSH
7810: LD_INT 1
7812: PPUSH
7813: CALL_OW 3
7817: PPUSH
7818: CALL_OW 1
7822: ST_TO_ADDR
// end ; end ;
7823: GO 7542
7825: POP
7826: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7827: LD_ADDR_VAR 0 5
7831: PUSH
7832: LD_VAR 0 5
7836: PPUSH
7837: LD_INT 1
7839: PPUSH
7840: LD_INT 8
7842: PPUSH
7843: LD_INT 1
7845: PPUSH
7846: CALL 15869 0 4
7850: ST_TO_ADDR
// until false ;
7851: LD_INT 0
7853: IFFALSE 7522
// end ;
7855: PPOPN 5
7857: END
// every 0 0$1 marked mpActive do
7858: GO 7860
7860: DISABLE
// begin enable ;
7861: ENABLE
// if not mpDisplayStrings then
7862: LD_EXP 38
7866: NOT
7867: IFFALSE 7878
// begin display_strings := [ ] ;
7869: LD_ADDR_OWVAR 47
7873: PUSH
7874: EMPTY
7875: ST_TO_ADDR
// exit ;
7876: GO 7888
// end ; display_strings := mpDisplayStrings ;
7878: LD_ADDR_OWVAR 47
7882: PUSH
7883: LD_EXP 38
7887: ST_TO_ADDR
// end ; end_of_file
7888: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7889: LD_INT 0
7891: PPUSH
7892: PPUSH
7893: PPUSH
7894: PPUSH
7895: PPUSH
7896: PPUSH
7897: PPUSH
7898: PPUSH
7899: PPUSH
// if GetType ( un ) = unit_vehicle then
7900: LD_VAR 0 1
7904: PPUSH
7905: CALL_OW 247
7909: PUSH
7910: LD_INT 2
7912: EQUAL
7913: IFFALSE 7917
// exit ;
7915: GO 8690
// side := GetSide ( un ) ;
7917: LD_ADDR_VAR 0 9
7921: PUSH
7922: LD_VAR 0 1
7926: PPUSH
7927: CALL_OW 255
7931: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
7932: LD_EXP 3
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: LD_INT 8
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: IN
7947: IFFALSE 8041
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7949: LD_VAR 0 1
7953: PPUSH
7954: CALL_OW 266
7958: PUSH
7959: LD_INT 0
7961: PUSH
7962: LD_INT 1
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: IN
7969: IFFALSE 8041
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7971: LD_ADDR_VAR 0 3
7975: PUSH
7976: LD_INT 22
7978: PUSH
7979: LD_VAR 0 9
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: LD_INT 21
7993: PUSH
7994: LD_INT 1
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: LD_INT 33
8003: PUSH
8004: LD_INT 3
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: PPUSH
8020: CALL_OW 69
8024: PUSH
8025: FOR_IN
8026: IFFALSE 8039
// KillUnit ( i ) ;
8028: LD_VAR 0 3
8032: PPUSH
8033: CALL_OW 66
8037: GO 8025
8039: POP
8040: POP
// end ; if mpGameType = GameTypeSurvivalH then
8041: LD_EXP 3
8045: PUSH
8046: LD_INT 8
8048: EQUAL
8049: IFFALSE 8133
// if un in mpCommanders then
8051: LD_VAR 0 1
8055: PUSH
8056: LD_EXP 41
8060: IN
8061: IFFALSE 8133
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8063: LD_ADDR_VAR 0 3
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_VAR 0 9
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: LD_INT 21
8085: PUSH
8086: LD_INT 1
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 33
8095: PUSH
8096: LD_INT 3
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PPUSH
8112: CALL_OW 69
8116: PUSH
8117: FOR_IN
8118: IFFALSE 8131
// KillUnit ( i ) ;
8120: LD_VAR 0 3
8124: PPUSH
8125: CALL_OW 66
8129: GO 8117
8131: POP
8132: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8133: LD_VAR 0 1
8137: PPUSH
8138: CALL_OW 257
8142: PUSH
8143: LD_INT 12
8145: PUSH
8146: LD_INT 17
8148: PUSH
8149: LD_INT 15
8151: PUSH
8152: LD_INT 16
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: IN
8161: IFTRUE 8178
8163: PUSH
8164: LD_VAR 0 1
8168: PPUSH
8169: CALL_OW 263
8173: PUSH
8174: LD_INT 5
8176: EQUAL
8177: OR
8178: IFFALSE 8415
// begin tag := 0 ;
8180: LD_ADDR_VAR 0 5
8184: PUSH
8185: LD_INT 0
8187: ST_TO_ADDR
// for i := 1 to 8 do
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: DOUBLE
8194: LD_INT 1
8196: DEC
8197: ST_TO_ADDR
8198: LD_INT 8
8200: PUSH
8201: FOR_TO
8202: IFFALSE 8236
// if un in mpApePosIndex [ i ] then
8204: LD_VAR 0 1
8208: PUSH
8209: LD_EXP 32
8213: PUSH
8214: LD_VAR 0 3
8218: ARRAY
8219: IN
8220: IFFALSE 8234
// begin tag := i ;
8222: LD_ADDR_VAR 0 5
8226: PUSH
8227: LD_VAR 0 3
8231: ST_TO_ADDR
// break ;
8232: GO 8236
// end ;
8234: GO 8201
8236: POP
8237: POP
// if not tag then
8238: LD_VAR 0 5
8242: NOT
8243: IFFALSE 8247
// exit ;
8245: GO 8690
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8247: LD_ADDR_VAR 0 7
8251: PUSH
8252: LD_EXP 31
8256: PUSH
8257: LD_EXP 7
8261: PUSH
8262: LD_VAR 0 5
8266: ARRAY
8267: ARRAY
8268: ST_TO_ADDR
// if not area then
8269: LD_VAR 0 7
8273: NOT
8274: IFFALSE 8278
// exit ;
8276: GO 8690
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8278: LD_INT 14700
8280: PUSH
8281: LD_VAR 0 1
8285: PUSH
8286: LD_INT 5
8288: MOD
8289: PUSH
8290: LD_INT 1
8292: PLUS
8293: PUSH
8294: LD_INT 700
8296: MUL
8297: PLUS
8298: PPUSH
8299: CALL_OW 67
// repeat wait ( 10 ) ;
8303: LD_INT 10
8305: PPUSH
8306: CALL_OW 67
// until not mpBlockRespThread ;
8310: LD_EXP 47
8314: NOT
8315: IFFALSE 8303
// mpBlockRespThread := true ;
8317: LD_ADDR_EXP 47
8321: PUSH
8322: LD_INT 1
8324: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8325: LD_INT 0
8327: PPUSH
8328: CALL 45646 0 1
// ape := CreateHuman ;
8332: LD_ADDR_VAR 0 4
8336: PUSH
8337: CALL_OW 44
8341: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8342: LD_ADDR_EXP 32
8346: PUSH
8347: LD_EXP 32
8351: PPUSH
8352: LD_VAR 0 5
8356: PPUSH
8357: LD_EXP 32
8361: PUSH
8362: LD_VAR 0 5
8366: ARRAY
8367: PPUSH
8368: LD_VAR 0 4
8372: PPUSH
8373: CALL 49519 0 2
8377: PPUSH
8378: CALL_OW 1
8382: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8383: LD_VAR 0 4
8387: PPUSH
8388: LD_VAR 0 7
8392: PPUSH
8393: LD_INT 0
8395: PPUSH
8396: CALL_OW 49
// wait ( 10 ) ;
8400: LD_INT 10
8402: PPUSH
8403: CALL_OW 67
// mpBlockRespThread := false ;
8407: LD_ADDR_EXP 47
8411: PUSH
8412: LD_INT 0
8414: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8415: LD_VAR 0 1
8419: PPUSH
8420: CALL_OW 247
8424: PUSH
8425: LD_INT 1
8427: EQUAL
8428: IFFALSE 8445
8430: PUSH
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 248
8440: PUSH
8441: LD_INT 0
8443: GREATER
8444: AND
8445: IFFALSE 8690
// begin if not mpRespawn then
8447: LD_EXP 33
8451: NOT
8452: IFFALSE 8456
// exit ;
8454: GO 8690
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8456: LD_VAR 0 9
8460: PPUSH
8461: CALL_OW 108
8465: NOT
8466: IFFALSE 8485
8468: PUSH
8469: LD_EXP 3
8473: PPUSH
8474: LD_VAR 0 9
8478: PPUSH
8479: CALL 6716 0 2
8483: NOT
8484: AND
8485: IFFALSE 8489
// exit ;
8487: GO 8690
// side := GetSide ( un ) ;
8489: LD_ADDR_VAR 0 9
8493: PUSH
8494: LD_VAR 0 1
8498: PPUSH
8499: CALL_OW 255
8503: ST_TO_ADDR
// nation := GetNation ( un ) ;
8504: LD_ADDR_VAR 0 8
8508: PUSH
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 248
8518: ST_TO_ADDR
// class := GetClass ( un ) ;
8519: LD_ADDR_VAR 0 6
8523: PUSH
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 257
8533: ST_TO_ADDR
// if class > 4 then
8534: LD_VAR 0 6
8538: PUSH
8539: LD_INT 4
8541: GREATER
8542: IFFALSE 8552
// class := 1 ;
8544: LD_ADDR_VAR 0 6
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// repeat wait ( 10 ) ;
8552: LD_INT 10
8554: PPUSH
8555: CALL_OW 67
// until not mpBlockRespThread ;
8559: LD_EXP 47
8563: NOT
8564: IFFALSE 8552
// mpBlockRespThread := true ;
8566: LD_ADDR_EXP 47
8570: PUSH
8571: LD_INT 1
8573: ST_TO_ADDR
// uc_side := side ;
8574: LD_ADDR_OWVAR 20
8578: PUSH
8579: LD_VAR 0 9
8583: ST_TO_ADDR
// uc_nation := nation ;
8584: LD_ADDR_OWVAR 21
8588: PUSH
8589: LD_VAR 0 8
8593: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8594: LD_INT 0
8596: PPUSH
8597: LD_VAR 0 6
8601: PPUSH
8602: LD_INT 2
8604: PPUSH
8605: CALL_OW 380
// un := CreateHuman ;
8609: LD_ADDR_VAR 0 1
8613: PUSH
8614: CALL_OW 44
8618: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8619: LD_ADDR_EXP 40
8623: PUSH
8624: LD_EXP 40
8628: PPUSH
8629: LD_VAR 0 9
8633: PPUSH
8634: LD_EXP 40
8638: PUSH
8639: LD_VAR 0 9
8643: ARRAY
8644: PPUSH
8645: LD_EXP 40
8649: PUSH
8650: LD_VAR 0 9
8654: ARRAY
8655: PUSH
8656: LD_INT 1
8658: PLUS
8659: PPUSH
8660: LD_VAR 0 1
8664: PPUSH
8665: CALL_OW 1
8669: PPUSH
8670: CALL_OW 1
8674: ST_TO_ADDR
// wait ( 10 ) ;
8675: LD_INT 10
8677: PPUSH
8678: CALL_OW 67
// mpBlockRespThread := false ;
8682: LD_ADDR_EXP 47
8686: PUSH
8687: LD_INT 0
8689: ST_TO_ADDR
// end ; end ;
8690: LD_VAR 0 2
8694: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
8695: LD_INT 0
8697: PPUSH
8698: PPUSH
8699: PPUSH
8700: PPUSH
8701: PPUSH
// tag := 0 ;
8702: LD_ADDR_VAR 0 5
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// for i := 1 to 8 do
8710: LD_ADDR_VAR 0 4
8714: PUSH
8715: DOUBLE
8716: LD_INT 1
8718: DEC
8719: ST_TO_ADDR
8720: LD_INT 8
8722: PUSH
8723: FOR_TO
8724: IFFALSE 8758
// if un in mpApePosIndex [ i ] then
8726: LD_VAR 0 2
8730: PUSH
8731: LD_EXP 32
8735: PUSH
8736: LD_VAR 0 4
8740: ARRAY
8741: IN
8742: IFFALSE 8756
// begin tag := i ;
8744: LD_ADDR_VAR 0 5
8748: PUSH
8749: LD_VAR 0 4
8753: ST_TO_ADDR
// break ;
8754: GO 8758
// end ;
8756: GO 8723
8758: POP
8759: POP
// if not tag then
8760: LD_VAR 0 5
8764: NOT
8765: IFFALSE 8769
// exit ;
8767: GO 8937
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8769: LD_ADDR_VAR 0 6
8773: PUSH
8774: LD_EXP 31
8778: PUSH
8779: LD_EXP 7
8783: PUSH
8784: LD_VAR 0 5
8788: ARRAY
8789: ARRAY
8790: ST_TO_ADDR
// if not area then
8791: LD_VAR 0 6
8795: NOT
8796: IFFALSE 8800
// exit ;
8798: GO 8937
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8800: LD_INT 14700
8802: PUSH
8803: LD_VAR 0 2
8807: PUSH
8808: LD_INT 5
8810: MOD
8811: PUSH
8812: LD_INT 1
8814: PLUS
8815: PUSH
8816: LD_INT 700
8818: MUL
8819: PLUS
8820: PPUSH
8821: CALL_OW 67
// repeat wait ( 10 ) ;
8825: LD_INT 10
8827: PPUSH
8828: CALL_OW 67
// until not mpBlockRespThread ;
8832: LD_EXP 47
8836: NOT
8837: IFFALSE 8825
// mpBlockRespThread := true ;
8839: LD_ADDR_EXP 47
8843: PUSH
8844: LD_INT 1
8846: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8847: LD_INT 0
8849: PPUSH
8850: CALL 45646 0 1
// ape := CreateHuman ;
8854: LD_ADDR_VAR 0 7
8858: PUSH
8859: CALL_OW 44
8863: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8864: LD_ADDR_EXP 32
8868: PUSH
8869: LD_EXP 32
8873: PPUSH
8874: LD_VAR 0 5
8878: PPUSH
8879: LD_EXP 32
8883: PUSH
8884: LD_VAR 0 5
8888: ARRAY
8889: PPUSH
8890: LD_VAR 0 7
8894: PPUSH
8895: CALL 49519 0 2
8899: PPUSH
8900: CALL_OW 1
8904: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8905: LD_VAR 0 7
8909: PPUSH
8910: LD_VAR 0 6
8914: PPUSH
8915: LD_INT 0
8917: PPUSH
8918: CALL_OW 49
// wait ( 10 ) ;
8922: LD_INT 10
8924: PPUSH
8925: CALL_OW 67
// mpBlockRespThread := false ;
8929: LD_ADDR_EXP 47
8933: PUSH
8934: LD_INT 0
8936: ST_TO_ADDR
// end ;
8937: LD_VAR 0 3
8941: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8942: LD_INT 0
8944: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8945: LD_VAR 0 1
8949: PPUSH
8950: CALL_OW 266
8954: PUSH
8955: LD_INT 0
8957: PUSH
8958: LD_INT 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: IN
8965: IFFALSE 8990
// SetBName ( building , @ & GetSide ( building ) ) ;
8967: LD_VAR 0 1
8971: PPUSH
8972: LD_STRING @
8974: PUSH
8975: LD_VAR 0 1
8979: PPUSH
8980: CALL_OW 255
8984: STR
8985: PPUSH
8986: CALL_OW 500
// end ;
8990: LD_VAR 0 2
8994: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8995: LD_INT 0
8997: PPUSH
8998: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
8999: LD_EXP 3
9003: PUSH
9004: LD_INT 2
9006: PUSH
9007: LD_INT 8
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: IN
9014: IFFALSE 9038
9016: PUSH
9017: LD_VAR 0 1
9021: PPUSH
9022: CALL_OW 266
9026: PUSH
9027: LD_INT 0
9029: PUSH
9030: LD_INT 1
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: IN
9037: AND
9038: IFFALSE 9117
// begin SetSide ( building , oldSide ) ;
9040: LD_VAR 0 1
9044: PPUSH
9045: LD_VAR 0 2
9049: PPUSH
9050: CALL_OW 235
// KillUnit ( building ) ;
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9063: LD_ADDR_VAR 0 5
9067: PUSH
9068: LD_INT 22
9070: PUSH
9071: LD_VAR 0 2
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 21
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: PUSH
9099: FOR_IN
9100: IFFALSE 9113
// KillUnit ( i ) ;
9102: LD_VAR 0 5
9106: PPUSH
9107: CALL_OW 66
9111: GO 9099
9113: POP
9114: POP
// exit ;
9115: GO 9162
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9117: LD_VAR 0 1
9121: PPUSH
9122: CALL_OW 266
9126: PUSH
9127: LD_INT 0
9129: PUSH
9130: LD_INT 1
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: IN
9137: IFFALSE 9162
// SetBName ( building , @ & GetSide ( building ) ) ;
9139: LD_VAR 0 1
9143: PPUSH
9144: LD_STRING @
9146: PUSH
9147: LD_VAR 0 1
9151: PPUSH
9152: CALL_OW 255
9156: STR
9157: PPUSH
9158: CALL_OW 500
// end ;
9162: LD_VAR 0 4
9166: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9167: LD_INT 0
9169: PPUSH
9170: PPUSH
9171: PPUSH
// if mpGameType <> GameTypeFamine then
9172: LD_EXP 3
9176: PUSH
9177: LD_INT 5
9179: NONEQUAL
9180: IFFALSE 9184
// exit ;
9182: GO 9418
// for i := 1 to mpGlobalOilDeposits do
9184: LD_ADDR_VAR 0 6
9188: PUSH
9189: DOUBLE
9190: LD_INT 1
9192: DEC
9193: ST_TO_ADDR
9194: LD_EXP 42
9198: PUSH
9199: FOR_TO
9200: IFFALSE 9416
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9202: LD_EXP 42
9206: PUSH
9207: LD_VAR 0 6
9211: ARRAY
9212: PUSH
9213: LD_INT 1
9215: ARRAY
9216: PPUSH
9217: LD_EXP 42
9221: PUSH
9222: LD_VAR 0 6
9226: ARRAY
9227: PUSH
9228: LD_INT 2
9230: ARRAY
9231: PPUSH
9232: CALL_OW 428
9236: PUSH
9237: LD_VAR 0 1
9241: EQUAL
9242: IFFALSE 9414
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9244: LD_ADDR_VAR 0 7
9248: PUSH
9249: LD_EXP 42
9253: PUSH
9254: LD_VAR 0 6
9258: ARRAY
9259: PUSH
9260: LD_INT 3
9262: ARRAY
9263: ST_TO_ADDR
// value := value - amount ;
9264: LD_ADDR_VAR 0 7
9268: PUSH
9269: LD_VAR 0 7
9273: PUSH
9274: LD_VAR 0 4
9278: MINUS
9279: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9280: LD_ADDR_EXP 42
9284: PUSH
9285: LD_EXP 42
9289: PPUSH
9290: LD_VAR 0 6
9294: PPUSH
9295: LD_EXP 42
9299: PUSH
9300: LD_VAR 0 6
9304: ARRAY
9305: PPUSH
9306: LD_INT 3
9308: PPUSH
9309: LD_VAR 0 7
9313: PPUSH
9314: CALL_OW 1
9318: PPUSH
9319: CALL_OW 1
9323: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9324: LD_VAR 0 2
9328: PUSH
9329: LD_OWVAR 2
9333: PUSH
9334: LD_INT 9
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: IN
9341: IFFALSE 9357
// SetUnitDisplayNumber ( building , value ) ;
9343: LD_VAR 0 1
9347: PPUSH
9348: LD_VAR 0 7
9352: PPUSH
9353: CALL_OW 505
// if value <= 0 then
9357: LD_VAR 0 7
9361: PUSH
9362: LD_INT 0
9364: LESSEQUAL
9365: IFFALSE 9414
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9367: LD_EXP 42
9371: PUSH
9372: LD_VAR 0 6
9376: ARRAY
9377: PUSH
9378: LD_INT 1
9380: ARRAY
9381: PPUSH
9382: LD_EXP 42
9386: PUSH
9387: LD_VAR 0 6
9391: ARRAY
9392: PUSH
9393: LD_INT 2
9395: ARRAY
9396: PPUSH
9397: CALL_OW 63
// KillUnit ( building ) ;
9401: LD_VAR 0 1
9405: PPUSH
9406: CALL_OW 66
// exit ;
9410: POP
9411: POP
9412: GO 9418
// end ; end ; end ;
9414: GO 9199
9416: POP
9417: POP
// end ;
9418: LD_VAR 0 5
9422: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9423: LD_INT 0
9425: PPUSH
9426: PPUSH
9427: PPUSH
// if mpGameType <> GameTypeFamine then
9428: LD_EXP 3
9432: PUSH
9433: LD_INT 5
9435: NONEQUAL
9436: IFFALSE 9440
// exit ;
9438: GO 9674
// for i := 1 to mpGlobalSibDeposits do
9440: LD_ADDR_VAR 0 6
9444: PUSH
9445: DOUBLE
9446: LD_INT 1
9448: DEC
9449: ST_TO_ADDR
9450: LD_EXP 43
9454: PUSH
9455: FOR_TO
9456: IFFALSE 9672
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9458: LD_EXP 43
9462: PUSH
9463: LD_VAR 0 6
9467: ARRAY
9468: PUSH
9469: LD_INT 1
9471: ARRAY
9472: PPUSH
9473: LD_EXP 43
9477: PUSH
9478: LD_VAR 0 6
9482: ARRAY
9483: PUSH
9484: LD_INT 2
9486: ARRAY
9487: PPUSH
9488: CALL_OW 428
9492: PUSH
9493: LD_VAR 0 1
9497: EQUAL
9498: IFFALSE 9670
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9500: LD_ADDR_VAR 0 7
9504: PUSH
9505: LD_EXP 43
9509: PUSH
9510: LD_VAR 0 6
9514: ARRAY
9515: PUSH
9516: LD_INT 3
9518: ARRAY
9519: ST_TO_ADDR
// value := value - amount ;
9520: LD_ADDR_VAR 0 7
9524: PUSH
9525: LD_VAR 0 7
9529: PUSH
9530: LD_VAR 0 4
9534: MINUS
9535: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9536: LD_ADDR_EXP 43
9540: PUSH
9541: LD_EXP 43
9545: PPUSH
9546: LD_VAR 0 6
9550: PPUSH
9551: LD_EXP 43
9555: PUSH
9556: LD_VAR 0 6
9560: ARRAY
9561: PPUSH
9562: LD_INT 3
9564: PPUSH
9565: LD_VAR 0 7
9569: PPUSH
9570: CALL_OW 1
9574: PPUSH
9575: CALL_OW 1
9579: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9580: LD_VAR 0 2
9584: PUSH
9585: LD_OWVAR 2
9589: PUSH
9590: LD_INT 9
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: IN
9597: IFFALSE 9613
// SetUnitDisplayNumber ( building , value ) ;
9599: LD_VAR 0 1
9603: PPUSH
9604: LD_VAR 0 7
9608: PPUSH
9609: CALL_OW 505
// if value <= 0 then
9613: LD_VAR 0 7
9617: PUSH
9618: LD_INT 0
9620: LESSEQUAL
9621: IFFALSE 9670
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9623: LD_EXP 43
9627: PUSH
9628: LD_VAR 0 6
9632: ARRAY
9633: PUSH
9634: LD_INT 1
9636: ARRAY
9637: PPUSH
9638: LD_EXP 43
9642: PUSH
9643: LD_VAR 0 6
9647: ARRAY
9648: PUSH
9649: LD_INT 2
9651: ARRAY
9652: PPUSH
9653: CALL_OW 63
// KillUnit ( building ) ;
9657: LD_VAR 0 1
9661: PPUSH
9662: CALL_OW 66
// exit ;
9666: POP
9667: POP
9668: GO 9674
// end ; end ; end ;
9670: GO 9455
9672: POP
9673: POP
// end ;
9674: LD_VAR 0 5
9678: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
// side := GetSide ( factory ) ;
9683: LD_ADDR_VAR 0 7
9687: PUSH
9688: LD_VAR 0 1
9692: PPUSH
9693: CALL_OW 255
9697: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9698: LD_VAR 0 5
9702: PUSH
9703: LD_INT 81
9705: EQUAL
9706: IFFALSE 9744
9708: PUSH
9709: LD_INT 22
9711: PUSH
9712: LD_VAR 0 7
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: LD_INT 34
9723: PUSH
9724: LD_INT 81
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PPUSH
9735: CALL_OW 69
9739: PUSH
9740: LD_INT 0
9742: GREATER
9743: AND
9744: IFFALSE 9777
// begin ComCancel ( factory ) ;
9746: LD_VAR 0 1
9750: PPUSH
9751: CALL_OW 127
// if side = your_side then
9755: LD_VAR 0 7
9759: PUSH
9760: LD_OWVAR 2
9764: EQUAL
9765: IFFALSE 9777
// HintSpec ( VehLimit , 2 ) ;
9767: LD_STRING VehLimit
9769: PPUSH
9770: LD_INT 2
9772: PPUSH
9773: CALL_OW 338
// end ; end ;
9777: LD_VAR 0 6
9781: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9782: LD_INT 0
9784: PPUSH
9785: PPUSH
9786: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9787: LD_VAR 0 1
9791: PPUSH
9792: CALL_OW 264
9796: PUSH
9797: LD_INT 81
9799: EQUAL
9800: IFFALSE 9817
9802: PUSH
9803: LD_VAR 0 1
9807: PPUSH
9808: CALL_OW 263
9812: PUSH
9813: LD_INT 1
9815: EQUAL
9816: AND
9817: IFFALSE 10097
// begin for i := 1 to Count ( minersList ) do
9819: LD_ADDR_VAR 0 6
9823: PUSH
9824: DOUBLE
9825: LD_INT 1
9827: DEC
9828: ST_TO_ADDR
9829: LD_EXP 57
9833: PPUSH
9834: CALL 13543 0 1
9838: PUSH
9839: FOR_TO
9840: IFFALSE 9958
// begin if minersList [ i ] = oldId then
9842: LD_EXP 57
9846: PUSH
9847: LD_VAR 0 6
9851: ARRAY
9852: PUSH
9853: LD_VAR 0 2
9857: EQUAL
9858: IFFALSE 9956
// begin for j := 1 to minerMinesList [ i ] do
9860: LD_ADDR_VAR 0 7
9864: PUSH
9865: DOUBLE
9866: LD_INT 1
9868: DEC
9869: ST_TO_ADDR
9870: LD_EXP 58
9874: PUSH
9875: LD_VAR 0 6
9879: ARRAY
9880: PUSH
9881: FOR_TO
9882: IFFALSE 9932
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9884: LD_EXP 58
9888: PUSH
9889: LD_VAR 0 6
9893: ARRAY
9894: PUSH
9895: LD_VAR 0 7
9899: ARRAY
9900: PUSH
9901: LD_INT 1
9903: ARRAY
9904: PPUSH
9905: LD_EXP 58
9909: PUSH
9910: LD_VAR 0 6
9914: ARRAY
9915: PUSH
9916: LD_VAR 0 7
9920: ARRAY
9921: PUSH
9922: LD_INT 2
9924: ARRAY
9925: PPUSH
9926: CALL_OW 612
9930: GO 9881
9932: POP
9933: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9934: LD_ADDR_EXP 58
9938: PUSH
9939: LD_EXP 58
9943: PPUSH
9944: LD_VAR 0 6
9948: PPUSH
9949: CALL_OW 3
9953: ST_TO_ADDR
// break ;
9954: GO 9958
// end ; end ;
9956: GO 9839
9958: POP
9959: POP
// minersList := minersList diff oldId ;
9960: LD_ADDR_EXP 57
9964: PUSH
9965: LD_EXP 57
9969: PUSH
9970: LD_VAR 0 2
9974: DIFF
9975: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9976: LD_INT 22
9978: PUSH
9979: LD_VAR 0 4
9983: PPUSH
9984: CALL_OW 255
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 34
9995: PUSH
9996: LD_INT 81
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PUSH
10012: LD_INT 1
10014: GREATER
10015: IFFALSE 10042
// begin ComExit ( unit ) ;
10017: LD_VAR 0 4
10021: PPUSH
10022: CALL 49917 0 1
// SetSide ( newId , oldSide ) ;
10026: LD_VAR 0 1
10030: PPUSH
10031: LD_VAR 0 3
10035: PPUSH
10036: CALL_OW 235
// exit ;
10040: GO 10097
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10042: LD_ADDR_EXP 57
10046: PUSH
10047: LD_EXP 57
10051: PPUSH
10052: LD_EXP 57
10056: PUSH
10057: LD_INT 1
10059: PLUS
10060: PPUSH
10061: LD_VAR 0 1
10065: PPUSH
10066: CALL_OW 1
10070: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10071: LD_ADDR_EXP 58
10075: PUSH
10076: LD_EXP 58
10080: PPUSH
10081: LD_EXP 58
10085: PUSH
10086: LD_INT 1
10088: PLUS
10089: PPUSH
10090: EMPTY
10091: PPUSH
10092: CALL_OW 1
10096: ST_TO_ADDR
// end ; end ; end_of_file
10097: LD_VAR 0 5
10101: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10102: LD_EXP 39
10106: IFFALSE 10114
10108: PUSH
10109: CALL 10324 0 0
10113: AND
10114: IFFALSE 10122
10116: PUSH
10117: LD_OWVAR 4
10121: AND
10122: IFFALSE 10321
10124: GO 10126
10126: DISABLE
10127: LD_INT 0
10129: PPUSH
10130: PPUSH
// begin canWin := false ;
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// if not HasPower ( your_side ) then
10139: LD_OWVAR 2
10143: PPUSH
10144: CALL 10366 0 1
10148: NOT
10149: IFFALSE 10160
// begin Multiplayer_Loose_Message ;
10151: CALL_OW 521
// enable ( mpLose ) ;
10155: LD_INT 102
10157: ENABLE_MARKED
// end else
10158: GO 10321
// begin canWin := true ;
10160: LD_ADDR_VAR 0 2
10164: PUSH
10165: LD_INT 1
10167: ST_TO_ADDR
// for i := 1 to 8 do
10168: LD_ADDR_VAR 0 1
10172: PUSH
10173: DOUBLE
10174: LD_INT 1
10176: DEC
10177: ST_TO_ADDR
10178: LD_INT 8
10180: PUSH
10181: FOR_TO
10182: IFFALSE 10307
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10184: LD_EXP 7
10188: PUSH
10189: LD_VAR 0 1
10193: ARRAY
10194: IFFALSE 10207
10196: PUSH
10197: LD_VAR 0 1
10201: PPUSH
10202: CALL_OW 108
10206: AND
10207: IFFALSE 10221
10209: PUSH
10210: LD_VAR 0 1
10214: PUSH
10215: LD_OWVAR 2
10219: NONEQUAL
10220: AND
10221: IFFALSE 10305
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10223: LD_EXP 8
10227: PUSH
10228: LD_VAR 0 1
10232: ARRAY
10233: NOT
10234: IFTRUE 10282
10236: PUSH
10237: LD_EXP 8
10241: PUSH
10242: LD_VAR 0 1
10246: ARRAY
10247: PUSH
10248: LD_EXP 8
10252: PUSH
10253: LD_OWVAR 2
10257: ARRAY
10258: NONEQUAL
10259: IFFALSE 10281
10261: PUSH
10262: LD_OWVAR 2
10266: PPUSH
10267: LD_VAR 0 1
10271: PPUSH
10272: CALL_OW 81
10276: PUSH
10277: LD_INT 1
10279: NONEQUAL
10280: AND
10281: OR
10282: IFFALSE 10305
// if HasPower ( i ) then
10284: LD_VAR 0 1
10288: PPUSH
10289: CALL 10366 0 1
10293: IFFALSE 10305
// begin canWin := false ;
10295: LD_ADDR_VAR 0 2
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// break ;
10303: GO 10307
// end ;
10305: GO 10181
10307: POP
10308: POP
// if canWin then
10309: LD_VAR 0 2
10313: IFFALSE 10320
// enable ( mpWin ) else
10315: LD_INT 101
10317: ENABLE_MARKED
10318: GO 10321
// enable ;
10320: ENABLE
// end ; end ;
10321: PPOPN 2
10323: END
// function CanWinLoose ; begin
10324: LD_INT 0
10326: PPUSH
// result := true ;
10327: LD_ADDR_VAR 0 1
10331: PUSH
10332: LD_INT 1
10334: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10335: CALL_OW 531
10339: IFFALSE 10351
10341: PUSH
10342: CALL_OW 519
10346: PUSH
10347: LD_INT 1
10349: GREATER
10350: AND
10351: IFFALSE 10361
// result := false ;
10353: LD_ADDR_VAR 0 1
10357: PUSH
10358: LD_INT 0
10360: ST_TO_ADDR
// end ;
10361: LD_VAR 0 1
10365: RET
// function HasPower ( i ) ; begin
10366: LD_INT 0
10368: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10369: LD_ADDR_VAR 0 2
10373: PUSH
10374: LD_INT 22
10376: PUSH
10377: LD_VAR 0 1
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 2
10388: PUSH
10389: LD_INT 21
10391: PUSH
10392: LD_INT 1
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 33
10401: PUSH
10402: LD_INT 3
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 33
10411: PUSH
10412: LD_INT 5
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 69
10433: ST_TO_ADDR
// end ; end_of_file
10434: LD_VAR 0 2
10438: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10439: LD_EXP 39
10443: IFFALSE 10486
10445: GO 10447
10447: DISABLE
10448: LD_INT 0
10450: PPUSH
// begin for i := 1 to 8 do
10451: LD_ADDR_VAR 0 1
10455: PUSH
10456: DOUBLE
10457: LD_INT 1
10459: DEC
10460: ST_TO_ADDR
10461: LD_INT 8
10463: PUSH
10464: FOR_TO
10465: IFFALSE 10484
// SetRestrict ( b_depot , i , state_disabled ) ;
10467: LD_INT 0
10469: PPUSH
10470: LD_VAR 0 1
10474: PPUSH
10475: LD_INT 0
10477: PPUSH
10478: CALL_OW 324
10482: GO 10464
10484: POP
10485: POP
// end ;
10486: PPOPN 1
10488: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10489: LD_EXP 39
10493: IFFALSE 10501
10495: PUSH
10496: CALL 10711 0 0
10500: AND
10501: IFFALSE 10509
10503: PUSH
10504: LD_OWVAR 4
10508: AND
10509: IFFALSE 10708
10511: GO 10513
10513: DISABLE
10514: LD_INT 0
10516: PPUSH
10517: PPUSH
// begin canWin := false ;
10518: LD_ADDR_VAR 0 2
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// if not HasPower ( your_side ) then
10526: LD_OWVAR 2
10530: PPUSH
10531: CALL 10753 0 1
10535: NOT
10536: IFFALSE 10547
// begin Multiplayer_Loose_Message ;
10538: CALL_OW 521
// enable ( mpLose ) ;
10542: LD_INT 102
10544: ENABLE_MARKED
// end else
10545: GO 10708
// begin canWin := true ;
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: LD_INT 1
10554: ST_TO_ADDR
// for i := 1 to 8 do
10555: LD_ADDR_VAR 0 1
10559: PUSH
10560: DOUBLE
10561: LD_INT 1
10563: DEC
10564: ST_TO_ADDR
10565: LD_INT 8
10567: PUSH
10568: FOR_TO
10569: IFFALSE 10694
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10571: LD_EXP 7
10575: PUSH
10576: LD_VAR 0 1
10580: ARRAY
10581: IFFALSE 10594
10583: PUSH
10584: LD_VAR 0 1
10588: PPUSH
10589: CALL_OW 108
10593: AND
10594: IFFALSE 10608
10596: PUSH
10597: LD_VAR 0 1
10601: PUSH
10602: LD_OWVAR 2
10606: NONEQUAL
10607: AND
10608: IFFALSE 10692
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10610: LD_EXP 8
10614: PUSH
10615: LD_VAR 0 1
10619: ARRAY
10620: NOT
10621: IFTRUE 10669
10623: PUSH
10624: LD_EXP 8
10628: PUSH
10629: LD_VAR 0 1
10633: ARRAY
10634: PUSH
10635: LD_EXP 8
10639: PUSH
10640: LD_OWVAR 2
10644: ARRAY
10645: NONEQUAL
10646: IFFALSE 10668
10648: PUSH
10649: LD_OWVAR 2
10653: PPUSH
10654: LD_VAR 0 1
10658: PPUSH
10659: CALL_OW 81
10663: PUSH
10664: LD_INT 1
10666: NONEQUAL
10667: AND
10668: OR
10669: IFFALSE 10692
// if HasPower ( i ) then
10671: LD_VAR 0 1
10675: PPUSH
10676: CALL 10753 0 1
10680: IFFALSE 10692
// begin canWin := false ;
10682: LD_ADDR_VAR 0 2
10686: PUSH
10687: LD_INT 0
10689: ST_TO_ADDR
// break ;
10690: GO 10694
// end ;
10692: GO 10568
10694: POP
10695: POP
// if canWin then
10696: LD_VAR 0 2
10700: IFFALSE 10707
// enable ( mpWin ) else
10702: LD_INT 101
10704: ENABLE_MARKED
10705: GO 10708
// enable ;
10707: ENABLE
// end ; end ;
10708: PPOPN 2
10710: END
// function CanWinLoose ; begin
10711: LD_INT 0
10713: PPUSH
// result := true ;
10714: LD_ADDR_VAR 0 1
10718: PUSH
10719: LD_INT 1
10721: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10722: CALL_OW 531
10726: IFFALSE 10738
10728: PUSH
10729: CALL_OW 519
10733: PUSH
10734: LD_INT 1
10736: GREATER
10737: AND
10738: IFFALSE 10748
// result := false ;
10740: LD_ADDR_VAR 0 1
10744: PUSH
10745: LD_INT 0
10747: ST_TO_ADDR
// end ;
10748: LD_VAR 0 1
10752: RET
// function HasPower ( i ) ; begin
10753: LD_INT 0
10755: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10756: LD_INT 22
10758: PUSH
10759: LD_VAR 0 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 30
10773: PUSH
10774: LD_INT 0
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 30
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 69
10804: NOT
10805: IFFALSE 10809
// exit ;
10807: GO 10874
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10809: LD_ADDR_VAR 0 2
10813: PUSH
10814: LD_INT 22
10816: PUSH
10817: LD_VAR 0 1
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 2
10828: PUSH
10829: LD_INT 21
10831: PUSH
10832: LD_INT 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 33
10841: PUSH
10842: LD_INT 3
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 33
10851: PUSH
10852: LD_INT 5
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PPUSH
10869: CALL_OW 69
10873: ST_TO_ADDR
// end ; end_of_file
10874: LD_VAR 0 2
10878: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalH do var i ;
10879: LD_EXP 39
10883: IFFALSE 10926
10885: GO 10887
10887: DISABLE
10888: LD_INT 0
10890: PPUSH
// begin for i := 1 to 8 do
10891: LD_ADDR_VAR 0 1
10895: PUSH
10896: DOUBLE
10897: LD_INT 1
10899: DEC
10900: ST_TO_ADDR
10901: LD_INT 8
10903: PUSH
10904: FOR_TO
10905: IFFALSE 10924
// SetRestrict ( b_depot , i , state_disabled ) ;
10907: LD_INT 0
10909: PPUSH
10910: LD_VAR 0 1
10914: PPUSH
10915: LD_INT 0
10917: PPUSH
10918: CALL_OW 324
10922: GO 10904
10924: POP
10925: POP
// end ;
10926: PPOPN 1
10928: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalH do var i , canWin ;
10929: LD_EXP 39
10933: IFFALSE 10941
10935: PUSH
10936: CALL 11151 0 0
10940: AND
10941: IFFALSE 10949
10943: PUSH
10944: LD_OWVAR 4
10948: AND
10949: IFFALSE 11148
10951: GO 10953
10953: DISABLE
10954: LD_INT 0
10956: PPUSH
10957: PPUSH
// begin canWin := false ;
10958: LD_ADDR_VAR 0 2
10962: PUSH
10963: LD_INT 0
10965: ST_TO_ADDR
// if not HasPower ( your_side ) then
10966: LD_OWVAR 2
10970: PPUSH
10971: CALL 11193 0 1
10975: NOT
10976: IFFALSE 10987
// begin Multiplayer_Loose_Message ;
10978: CALL_OW 521
// enable ( mpLose ) ;
10982: LD_INT 102
10984: ENABLE_MARKED
// end else
10985: GO 11148
// begin canWin := true ;
10987: LD_ADDR_VAR 0 2
10991: PUSH
10992: LD_INT 1
10994: ST_TO_ADDR
// for i := 1 to 8 do
10995: LD_ADDR_VAR 0 1
10999: PUSH
11000: DOUBLE
11001: LD_INT 1
11003: DEC
11004: ST_TO_ADDR
11005: LD_INT 8
11007: PUSH
11008: FOR_TO
11009: IFFALSE 11134
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11011: LD_EXP 7
11015: PUSH
11016: LD_VAR 0 1
11020: ARRAY
11021: IFFALSE 11034
11023: PUSH
11024: LD_VAR 0 1
11028: PPUSH
11029: CALL_OW 108
11033: AND
11034: IFFALSE 11048
11036: PUSH
11037: LD_VAR 0 1
11041: PUSH
11042: LD_OWVAR 2
11046: NONEQUAL
11047: AND
11048: IFFALSE 11132
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11050: LD_EXP 8
11054: PUSH
11055: LD_VAR 0 1
11059: ARRAY
11060: NOT
11061: IFTRUE 11109
11063: PUSH
11064: LD_EXP 8
11068: PUSH
11069: LD_VAR 0 1
11073: ARRAY
11074: PUSH
11075: LD_EXP 8
11079: PUSH
11080: LD_OWVAR 2
11084: ARRAY
11085: NONEQUAL
11086: IFFALSE 11108
11088: PUSH
11089: LD_OWVAR 2
11093: PPUSH
11094: LD_VAR 0 1
11098: PPUSH
11099: CALL_OW 81
11103: PUSH
11104: LD_INT 1
11106: NONEQUAL
11107: AND
11108: OR
11109: IFFALSE 11132
// if HasPower ( i ) then
11111: LD_VAR 0 1
11115: PPUSH
11116: CALL 11193 0 1
11120: IFFALSE 11132
// begin canWin := false ;
11122: LD_ADDR_VAR 0 2
11126: PUSH
11127: LD_INT 0
11129: ST_TO_ADDR
// break ;
11130: GO 11134
// end ;
11132: GO 11008
11134: POP
11135: POP
// if canWin then
11136: LD_VAR 0 2
11140: IFFALSE 11147
// enable ( mpWin ) else
11142: LD_INT 101
11144: ENABLE_MARKED
11145: GO 11148
// enable ;
11147: ENABLE
// end ; end ;
11148: PPOPN 2
11150: END
// function CanWinLoose ; begin
11151: LD_INT 0
11153: PPUSH
// result := true ;
11154: LD_ADDR_VAR 0 1
11158: PUSH
11159: LD_INT 1
11161: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11162: CALL_OW 531
11166: IFFALSE 11178
11168: PUSH
11169: CALL_OW 519
11173: PUSH
11174: LD_INT 1
11176: GREATER
11177: AND
11178: IFFALSE 11188
// result := false ;
11180: LD_ADDR_VAR 0 1
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// end ;
11188: LD_VAR 0 1
11192: RET
// function HasPower ( i ) ; begin
11193: LD_INT 0
11195: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11196: LD_INT 22
11198: PUSH
11199: LD_VAR 0 1
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: LD_INT 2
11210: PUSH
11211: LD_INT 30
11213: PUSH
11214: LD_INT 0
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 30
11223: PUSH
11224: LD_INT 1
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: LIST
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PPUSH
11240: CALL_OW 69
11244: NOT
11245: IFFALSE 11249
// exit ;
11247: GO 11314
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11249: LD_ADDR_VAR 0 2
11253: PUSH
11254: LD_INT 22
11256: PUSH
11257: LD_VAR 0 1
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 2
11268: PUSH
11269: LD_INT 21
11271: PUSH
11272: LD_INT 1
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 33
11281: PUSH
11282: LD_INT 3
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: LD_INT 33
11291: PUSH
11292: LD_INT 5
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PPUSH
11309: CALL_OW 69
11313: ST_TO_ADDR
// end ; end_of_file
11314: LD_VAR 0 2
11318: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11319: LD_INT 0
11321: PPUSH
11322: PPUSH
// if exist_mode then
11323: LD_VAR 0 2
11327: IFFALSE 11373
// begin unit := CreateCharacter ( prefix & ident ) ;
11329: LD_ADDR_VAR 0 5
11333: PUSH
11334: LD_VAR 0 3
11338: PUSH
11339: LD_VAR 0 1
11343: STR
11344: PPUSH
11345: CALL_OW 34
11349: ST_TO_ADDR
// if unit then
11350: LD_VAR 0 5
11354: IFFALSE 11371
// DeleteCharacters ( prefix & ident ) ;
11356: LD_VAR 0 3
11360: PUSH
11361: LD_VAR 0 1
11365: STR
11366: PPUSH
11367: CALL_OW 40
// end else
11371: GO 11388
// unit := NewCharacter ( ident ) ;
11373: LD_ADDR_VAR 0 5
11377: PUSH
11378: LD_VAR 0 1
11382: PPUSH
11383: CALL_OW 25
11387: ST_TO_ADDR
// result := unit ;
11388: LD_ADDR_VAR 0 4
11392: PUSH
11393: LD_VAR 0 5
11397: ST_TO_ADDR
// end ;
11398: LD_VAR 0 4
11402: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
// if exist_mode then
11407: LD_VAR 0 2
11411: IFFALSE 11436
// unit := CreateCharacter ( prefix & ident ) else
11413: LD_ADDR_VAR 0 5
11417: PUSH
11418: LD_VAR 0 3
11422: PUSH
11423: LD_VAR 0 1
11427: STR
11428: PPUSH
11429: CALL_OW 34
11433: ST_TO_ADDR
11434: GO 11451
// unit := NewCharacter ( ident ) ;
11436: LD_ADDR_VAR 0 5
11440: PUSH
11441: LD_VAR 0 1
11445: PPUSH
11446: CALL_OW 25
11450: ST_TO_ADDR
// result := unit ;
11451: LD_ADDR_VAR 0 4
11455: PUSH
11456: LD_VAR 0 5
11460: ST_TO_ADDR
// end ;
11461: LD_VAR 0 4
11465: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11466: LD_INT 0
11468: PPUSH
11469: PPUSH
// if not side or not nation then
11470: LD_VAR 0 1
11474: NOT
11475: IFTRUE 11484
11477: PUSH
11478: LD_VAR 0 2
11482: NOT
11483: OR
11484: IFFALSE 11488
// exit ;
11486: GO 12282
// case nation of nation_american :
11488: LD_VAR 0 2
11492: PUSH
11493: LD_INT 1
11495: DOUBLE
11496: EQUAL
11497: IFTRUE 11501
11499: GO 11723
11501: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11502: LD_ADDR_VAR 0 4
11506: PUSH
11507: LD_INT 35
11509: PUSH
11510: LD_INT 45
11512: PUSH
11513: LD_INT 46
11515: PUSH
11516: LD_INT 47
11518: PUSH
11519: LD_INT 82
11521: PUSH
11522: LD_INT 83
11524: PUSH
11525: LD_INT 84
11527: PUSH
11528: LD_INT 85
11530: PUSH
11531: LD_INT 86
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: LD_INT 2
11539: PUSH
11540: LD_INT 6
11542: PUSH
11543: LD_INT 15
11545: PUSH
11546: LD_INT 16
11548: PUSH
11549: LD_INT 7
11551: PUSH
11552: LD_INT 12
11554: PUSH
11555: LD_INT 13
11557: PUSH
11558: LD_INT 10
11560: PUSH
11561: LD_INT 14
11563: PUSH
11564: LD_INT 20
11566: PUSH
11567: LD_INT 21
11569: PUSH
11570: LD_INT 22
11572: PUSH
11573: LD_INT 25
11575: PUSH
11576: LD_INT 32
11578: PUSH
11579: LD_INT 27
11581: PUSH
11582: LD_INT 36
11584: PUSH
11585: LD_INT 69
11587: PUSH
11588: LD_INT 39
11590: PUSH
11591: LD_INT 34
11593: PUSH
11594: LD_INT 40
11596: PUSH
11597: LD_INT 48
11599: PUSH
11600: LD_INT 49
11602: PUSH
11603: LD_INT 50
11605: PUSH
11606: LD_INT 51
11608: PUSH
11609: LD_INT 52
11611: PUSH
11612: LD_INT 53
11614: PUSH
11615: LD_INT 54
11617: PUSH
11618: LD_INT 55
11620: PUSH
11621: LD_INT 56
11623: PUSH
11624: LD_INT 57
11626: PUSH
11627: LD_INT 58
11629: PUSH
11630: LD_INT 59
11632: PUSH
11633: LD_INT 60
11635: PUSH
11636: LD_INT 61
11638: PUSH
11639: LD_INT 62
11641: PUSH
11642: LD_INT 80
11644: PUSH
11645: LD_INT 82
11647: PUSH
11648: LD_INT 83
11650: PUSH
11651: LD_INT 84
11653: PUSH
11654: LD_INT 85
11656: PUSH
11657: LD_INT 86
11659: PUSH
11660: LD_INT 90
11662: PUSH
11663: LD_INT 93
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: ST_TO_ADDR
11721: GO 12204
11723: LD_INT 2
11725: DOUBLE
11726: EQUAL
11727: IFTRUE 11731
11729: GO 11965
11731: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11732: LD_ADDR_VAR 0 4
11736: PUSH
11737: LD_INT 35
11739: PUSH
11740: LD_INT 45
11742: PUSH
11743: LD_INT 46
11745: PUSH
11746: LD_INT 47
11748: PUSH
11749: LD_INT 82
11751: PUSH
11752: LD_INT 83
11754: PUSH
11755: LD_INT 84
11757: PUSH
11758: LD_INT 85
11760: PUSH
11761: LD_INT 87
11763: PUSH
11764: LD_INT 70
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: LD_INT 11
11772: PUSH
11773: LD_INT 3
11775: PUSH
11776: LD_INT 4
11778: PUSH
11779: LD_INT 5
11781: PUSH
11782: LD_INT 6
11784: PUSH
11785: LD_INT 15
11787: PUSH
11788: LD_INT 18
11790: PUSH
11791: LD_INT 7
11793: PUSH
11794: LD_INT 17
11796: PUSH
11797: LD_INT 8
11799: PUSH
11800: LD_INT 20
11802: PUSH
11803: LD_INT 21
11805: PUSH
11806: LD_INT 22
11808: PUSH
11809: LD_INT 72
11811: PUSH
11812: LD_INT 26
11814: PUSH
11815: LD_INT 69
11817: PUSH
11818: LD_INT 39
11820: PUSH
11821: LD_INT 40
11823: PUSH
11824: LD_INT 41
11826: PUSH
11827: LD_INT 42
11829: PUSH
11830: LD_INT 43
11832: PUSH
11833: LD_INT 48
11835: PUSH
11836: LD_INT 49
11838: PUSH
11839: LD_INT 50
11841: PUSH
11842: LD_INT 51
11844: PUSH
11845: LD_INT 52
11847: PUSH
11848: LD_INT 53
11850: PUSH
11851: LD_INT 54
11853: PUSH
11854: LD_INT 55
11856: PUSH
11857: LD_INT 56
11859: PUSH
11860: LD_INT 60
11862: PUSH
11863: LD_INT 61
11865: PUSH
11866: LD_INT 62
11868: PUSH
11869: LD_INT 66
11871: PUSH
11872: LD_INT 67
11874: PUSH
11875: LD_INT 68
11877: PUSH
11878: LD_INT 81
11880: PUSH
11881: LD_INT 82
11883: PUSH
11884: LD_INT 83
11886: PUSH
11887: LD_INT 84
11889: PUSH
11890: LD_INT 85
11892: PUSH
11893: LD_INT 87
11895: PUSH
11896: LD_INT 88
11898: PUSH
11899: LD_INT 92
11901: PUSH
11902: LD_INT 94
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: ST_TO_ADDR
11963: GO 12204
11965: LD_INT 3
11967: DOUBLE
11968: EQUAL
11969: IFTRUE 11973
11971: GO 12203
11973: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11974: LD_ADDR_VAR 0 4
11978: PUSH
11979: LD_INT 46
11981: PUSH
11982: LD_INT 47
11984: PUSH
11985: LD_INT 1
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 82
11993: PUSH
11994: LD_INT 83
11996: PUSH
11997: LD_INT 84
11999: PUSH
12000: LD_INT 85
12002: PUSH
12003: LD_INT 86
12005: PUSH
12006: LD_INT 11
12008: PUSH
12009: LD_INT 9
12011: PUSH
12012: LD_INT 20
12014: PUSH
12015: LD_INT 19
12017: PUSH
12018: LD_INT 21
12020: PUSH
12021: LD_INT 24
12023: PUSH
12024: LD_INT 22
12026: PUSH
12027: LD_INT 25
12029: PUSH
12030: LD_INT 28
12032: PUSH
12033: LD_INT 29
12035: PUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 31
12041: PUSH
12042: LD_INT 37
12044: PUSH
12045: LD_INT 38
12047: PUSH
12048: LD_INT 32
12050: PUSH
12051: LD_INT 27
12053: PUSH
12054: LD_INT 33
12056: PUSH
12057: LD_INT 69
12059: PUSH
12060: LD_INT 39
12062: PUSH
12063: LD_INT 34
12065: PUSH
12066: LD_INT 40
12068: PUSH
12069: LD_INT 71
12071: PUSH
12072: LD_INT 23
12074: PUSH
12075: LD_INT 44
12077: PUSH
12078: LD_INT 48
12080: PUSH
12081: LD_INT 49
12083: PUSH
12084: LD_INT 50
12086: PUSH
12087: LD_INT 51
12089: PUSH
12090: LD_INT 52
12092: PUSH
12093: LD_INT 53
12095: PUSH
12096: LD_INT 54
12098: PUSH
12099: LD_INT 55
12101: PUSH
12102: LD_INT 56
12104: PUSH
12105: LD_INT 57
12107: PUSH
12108: LD_INT 58
12110: PUSH
12111: LD_INT 59
12113: PUSH
12114: LD_INT 63
12116: PUSH
12117: LD_INT 64
12119: PUSH
12120: LD_INT 65
12122: PUSH
12123: LD_INT 82
12125: PUSH
12126: LD_INT 83
12128: PUSH
12129: LD_INT 84
12131: PUSH
12132: LD_INT 85
12134: PUSH
12135: LD_INT 86
12137: PUSH
12138: LD_INT 89
12140: PUSH
12141: LD_INT 91
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: ST_TO_ADDR
12201: GO 12204
12203: POP
// if state > - 1 and state < 3 then
12204: LD_VAR 0 3
12208: PUSH
12209: LD_INT 1
12211: NEG
12212: GREATER
12213: IFFALSE 12225
12215: PUSH
12216: LD_VAR 0 3
12220: PUSH
12221: LD_INT 3
12223: LESS
12224: AND
12225: IFFALSE 12282
// for i in result do
12227: LD_ADDR_VAR 0 5
12231: PUSH
12232: LD_VAR 0 4
12236: PUSH
12237: FOR_IN
12238: IFFALSE 12280
// if GetTech ( i , side ) <> state then
12240: LD_VAR 0 5
12244: PPUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 321
12254: PUSH
12255: LD_VAR 0 3
12259: NONEQUAL
12260: IFFALSE 12278
// result := result diff i ;
12262: LD_ADDR_VAR 0 4
12266: PUSH
12267: LD_VAR 0 4
12271: PUSH
12272: LD_VAR 0 5
12276: DIFF
12277: ST_TO_ADDR
12278: GO 12237
12280: POP
12281: POP
// end ;
12282: LD_VAR 0 4
12286: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12287: LD_INT 0
12289: PPUSH
12290: PPUSH
12291: PPUSH
// result := true ;
12292: LD_ADDR_VAR 0 3
12296: PUSH
12297: LD_INT 1
12299: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12300: LD_ADDR_VAR 0 5
12304: PUSH
12305: LD_VAR 0 2
12309: PPUSH
12310: CALL_OW 480
12314: ST_TO_ADDR
// if not tmp then
12315: LD_VAR 0 5
12319: NOT
12320: IFFALSE 12324
// exit ;
12322: GO 12373
// for i in tmp do
12324: LD_ADDR_VAR 0 4
12328: PUSH
12329: LD_VAR 0 5
12333: PUSH
12334: FOR_IN
12335: IFFALSE 12371
// if GetTech ( i , side ) <> state_researched then
12337: LD_VAR 0 4
12341: PPUSH
12342: LD_VAR 0 1
12346: PPUSH
12347: CALL_OW 321
12351: PUSH
12352: LD_INT 2
12354: NONEQUAL
12355: IFFALSE 12369
// begin result := false ;
12357: LD_ADDR_VAR 0 3
12361: PUSH
12362: LD_INT 0
12364: ST_TO_ADDR
// exit ;
12365: POP
12366: POP
12367: GO 12373
// end ;
12369: GO 12334
12371: POP
12372: POP
// end ;
12373: LD_VAR 0 3
12377: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12378: LD_INT 0
12380: PPUSH
12381: PPUSH
12382: PPUSH
12383: PPUSH
12384: PPUSH
12385: PPUSH
12386: PPUSH
12387: PPUSH
12388: PPUSH
12389: PPUSH
12390: PPUSH
12391: PPUSH
12392: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12393: LD_VAR 0 1
12397: NOT
12398: IFTRUE 12415
12400: PUSH
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 257
12410: PUSH
12411: LD_INT 9
12413: NONEQUAL
12414: OR
12415: IFFALSE 12419
// exit ;
12417: GO 12998
// side := GetSide ( unit ) ;
12419: LD_ADDR_VAR 0 9
12423: PUSH
12424: LD_VAR 0 1
12428: PPUSH
12429: CALL_OW 255
12433: ST_TO_ADDR
// tech_space := tech_spacanom ;
12434: LD_ADDR_VAR 0 12
12438: PUSH
12439: LD_INT 29
12441: ST_TO_ADDR
// tech_time := tech_taurad ;
12442: LD_ADDR_VAR 0 13
12446: PUSH
12447: LD_INT 28
12449: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12450: LD_ADDR_VAR 0 11
12454: PUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 310
12464: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12465: LD_VAR 0 11
12469: PPUSH
12470: CALL_OW 247
12474: PUSH
12475: LD_INT 2
12477: EQUAL
12478: IFFALSE 12482
// exit ;
12480: GO 12998
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12482: LD_ADDR_VAR 0 8
12486: PUSH
12487: LD_INT 81
12489: PUSH
12490: LD_VAR 0 9
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: LD_INT 3
12501: PUSH
12502: LD_INT 21
12504: PUSH
12505: LD_INT 3
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PPUSH
12520: CALL_OW 69
12524: ST_TO_ADDR
// if not tmp then
12525: LD_VAR 0 8
12529: NOT
12530: IFFALSE 12534
// exit ;
12532: GO 12998
// if in_unit then
12534: LD_VAR 0 11
12538: IFFALSE 12562
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12540: LD_ADDR_VAR 0 10
12544: PUSH
12545: LD_VAR 0 8
12549: PPUSH
12550: LD_VAR 0 11
12554: PPUSH
12555: CALL_OW 74
12559: ST_TO_ADDR
12560: GO 12582
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12562: LD_ADDR_VAR 0 10
12566: PUSH
12567: LD_VAR 0 8
12571: PPUSH
12572: LD_VAR 0 1
12576: PPUSH
12577: CALL_OW 74
12581: ST_TO_ADDR
// if not enemy then
12582: LD_VAR 0 10
12586: NOT
12587: IFFALSE 12591
// exit ;
12589: GO 12998
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12591: LD_VAR 0 11
12595: IFFALSE 12617
12597: PUSH
12598: LD_VAR 0 11
12602: PPUSH
12603: LD_VAR 0 10
12607: PPUSH
12608: CALL_OW 296
12612: PUSH
12613: LD_INT 13
12615: GREATER
12616: AND
12617: IFTRUE 12639
12619: PUSH
12620: LD_VAR 0 1
12624: PPUSH
12625: LD_VAR 0 10
12629: PPUSH
12630: CALL_OW 296
12634: PUSH
12635: LD_INT 12
12637: GREATER
12638: OR
12639: IFFALSE 12643
// exit ;
12641: GO 12998
// missile := [ 1 ] ;
12643: LD_ADDR_VAR 0 14
12647: PUSH
12648: LD_INT 1
12650: PUSH
12651: EMPTY
12652: LIST
12653: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12654: LD_VAR 0 9
12658: PPUSH
12659: LD_VAR 0 12
12663: PPUSH
12664: CALL_OW 325
12668: IFFALSE 12697
// missile := Replace ( missile , missile + 1 , 2 ) ;
12670: LD_ADDR_VAR 0 14
12674: PUSH
12675: LD_VAR 0 14
12679: PPUSH
12680: LD_VAR 0 14
12684: PUSH
12685: LD_INT 1
12687: PLUS
12688: PPUSH
12689: LD_INT 2
12691: PPUSH
12692: CALL_OW 1
12696: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12697: LD_VAR 0 9
12701: PPUSH
12702: LD_VAR 0 13
12706: PPUSH
12707: CALL_OW 325
12711: IFFALSE 12735
12713: PUSH
12714: LD_VAR 0 10
12718: PPUSH
12719: CALL_OW 255
12723: PPUSH
12724: LD_VAR 0 13
12728: PPUSH
12729: CALL_OW 325
12733: NOT
12734: AND
12735: IFFALSE 12764
// missile := Replace ( missile , missile + 1 , 3 ) ;
12737: LD_ADDR_VAR 0 14
12741: PUSH
12742: LD_VAR 0 14
12746: PPUSH
12747: LD_VAR 0 14
12751: PUSH
12752: LD_INT 1
12754: PLUS
12755: PPUSH
12756: LD_INT 3
12758: PPUSH
12759: CALL_OW 1
12763: ST_TO_ADDR
// if missile < 2 then
12764: LD_VAR 0 14
12768: PUSH
12769: LD_INT 2
12771: LESS
12772: IFFALSE 12776
// exit ;
12774: GO 12998
// x := GetX ( enemy ) ;
12776: LD_ADDR_VAR 0 4
12780: PUSH
12781: LD_VAR 0 10
12785: PPUSH
12786: CALL_OW 250
12790: ST_TO_ADDR
// y := GetY ( enemy ) ;
12791: LD_ADDR_VAR 0 5
12795: PUSH
12796: LD_VAR 0 10
12800: PPUSH
12801: CALL_OW 251
12805: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12806: LD_ADDR_VAR 0 6
12810: PUSH
12811: LD_VAR 0 4
12815: PUSH
12816: LD_INT 1
12818: NEG
12819: PPUSH
12820: LD_INT 1
12822: PPUSH
12823: CALL_OW 12
12827: PLUS
12828: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12829: LD_ADDR_VAR 0 7
12833: PUSH
12834: LD_VAR 0 5
12838: PUSH
12839: LD_INT 1
12841: NEG
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: CALL_OW 12
12850: PLUS
12851: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12852: LD_VAR 0 6
12856: PPUSH
12857: LD_VAR 0 7
12861: PPUSH
12862: CALL_OW 488
12866: NOT
12867: IFFALSE 12889
// begin _x := x ;
12869: LD_ADDR_VAR 0 6
12873: PUSH
12874: LD_VAR 0 4
12878: ST_TO_ADDR
// _y := y ;
12879: LD_ADDR_VAR 0 7
12883: PUSH
12884: LD_VAR 0 5
12888: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12889: LD_ADDR_VAR 0 3
12893: PUSH
12894: LD_INT 1
12896: PPUSH
12897: LD_VAR 0 14
12901: PPUSH
12902: CALL_OW 12
12906: ST_TO_ADDR
// case i of 1 :
12907: LD_VAR 0 3
12911: PUSH
12912: LD_INT 1
12914: DOUBLE
12915: EQUAL
12916: IFTRUE 12920
12918: GO 12937
12920: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12921: LD_VAR 0 1
12925: PPUSH
12926: LD_VAR 0 10
12930: PPUSH
12931: CALL_OW 115
12935: GO 12998
12937: LD_INT 2
12939: DOUBLE
12940: EQUAL
12941: IFTRUE 12945
12943: GO 12967
12945: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12946: LD_VAR 0 1
12950: PPUSH
12951: LD_VAR 0 6
12955: PPUSH
12956: LD_VAR 0 7
12960: PPUSH
12961: CALL_OW 153
12965: GO 12998
12967: LD_INT 3
12969: DOUBLE
12970: EQUAL
12971: IFTRUE 12975
12973: GO 12997
12975: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12976: LD_VAR 0 1
12980: PPUSH
12981: LD_VAR 0 6
12985: PPUSH
12986: LD_VAR 0 7
12990: PPUSH
12991: CALL_OW 154
12995: GO 12998
12997: POP
// end ;
12998: LD_VAR 0 2
13002: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13003: LD_INT 0
13005: PPUSH
13006: PPUSH
13007: PPUSH
13008: PPUSH
13009: PPUSH
13010: PPUSH
// if not unit or not building then
13011: LD_VAR 0 1
13015: NOT
13016: IFTRUE 13025
13018: PUSH
13019: LD_VAR 0 2
13023: NOT
13024: OR
13025: IFFALSE 13029
// exit ;
13027: GO 13187
// x := GetX ( building ) ;
13029: LD_ADDR_VAR 0 5
13033: PUSH
13034: LD_VAR 0 2
13038: PPUSH
13039: CALL_OW 250
13043: ST_TO_ADDR
// y := GetY ( building ) ;
13044: LD_ADDR_VAR 0 6
13048: PUSH
13049: LD_VAR 0 2
13053: PPUSH
13054: CALL_OW 251
13058: ST_TO_ADDR
// for i := 0 to 5 do
13059: LD_ADDR_VAR 0 4
13063: PUSH
13064: DOUBLE
13065: LD_INT 0
13067: DEC
13068: ST_TO_ADDR
13069: LD_INT 5
13071: PUSH
13072: FOR_TO
13073: IFFALSE 13185
// begin _x := ShiftX ( x , i , 3 ) ;
13075: LD_ADDR_VAR 0 7
13079: PUSH
13080: LD_VAR 0 5
13084: PPUSH
13085: LD_VAR 0 4
13089: PPUSH
13090: LD_INT 3
13092: PPUSH
13093: CALL_OW 272
13097: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13098: LD_ADDR_VAR 0 8
13102: PUSH
13103: LD_VAR 0 6
13107: PPUSH
13108: LD_VAR 0 4
13112: PPUSH
13113: LD_INT 3
13115: PPUSH
13116: CALL_OW 273
13120: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13121: LD_VAR 0 7
13125: PPUSH
13126: LD_VAR 0 8
13130: PPUSH
13131: CALL_OW 488
13135: NOT
13136: IFFALSE 13140
// continue ;
13138: GO 13072
// if HexInfo ( _x , _y ) = 0 then
13140: LD_VAR 0 7
13144: PPUSH
13145: LD_VAR 0 8
13149: PPUSH
13150: CALL_OW 428
13154: PUSH
13155: LD_INT 0
13157: EQUAL
13158: IFFALSE 13183
// begin ComMoveXY ( unit , _x , _y ) ;
13160: LD_VAR 0 1
13164: PPUSH
13165: LD_VAR 0 7
13169: PPUSH
13170: LD_VAR 0 8
13174: PPUSH
13175: CALL_OW 111
// exit ;
13179: POP
13180: POP
13181: GO 13187
// end ; end ;
13183: GO 13072
13185: POP
13186: POP
// end ;
13187: LD_VAR 0 3
13191: RET
// export function ScanBase ( side , base_area ) ; begin
13192: LD_INT 0
13194: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13195: LD_ADDR_VAR 0 3
13199: PUSH
13200: LD_VAR 0 2
13204: PPUSH
13205: LD_INT 81
13207: PUSH
13208: LD_VAR 0 1
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 70
13221: ST_TO_ADDR
// end ;
13222: LD_VAR 0 3
13226: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13227: LD_INT 0
13229: PPUSH
13230: PPUSH
13231: PPUSH
13232: PPUSH
// result := false ;
13233: LD_ADDR_VAR 0 2
13237: PUSH
13238: LD_INT 0
13240: ST_TO_ADDR
// side := GetSide ( unit ) ;
13241: LD_ADDR_VAR 0 3
13245: PUSH
13246: LD_VAR 0 1
13250: PPUSH
13251: CALL_OW 255
13255: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13256: LD_ADDR_VAR 0 4
13260: PUSH
13261: LD_VAR 0 1
13265: PPUSH
13266: CALL_OW 248
13270: ST_TO_ADDR
// case nat of 1 :
13271: LD_VAR 0 4
13275: PUSH
13276: LD_INT 1
13278: DOUBLE
13279: EQUAL
13280: IFTRUE 13284
13282: GO 13295
13284: POP
// tech := tech_lassight ; 2 :
13285: LD_ADDR_VAR 0 5
13289: PUSH
13290: LD_INT 12
13292: ST_TO_ADDR
13293: GO 13334
13295: LD_INT 2
13297: DOUBLE
13298: EQUAL
13299: IFTRUE 13303
13301: GO 13314
13303: POP
// tech := tech_mortar ; 3 :
13304: LD_ADDR_VAR 0 5
13308: PUSH
13309: LD_INT 41
13311: ST_TO_ADDR
13312: GO 13334
13314: LD_INT 3
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13333
13322: POP
// tech := tech_bazooka ; end ;
13323: LD_ADDR_VAR 0 5
13327: PUSH
13328: LD_INT 44
13330: ST_TO_ADDR
13331: GO 13334
13333: POP
// if Researched ( side , tech ) then
13334: LD_VAR 0 3
13338: PPUSH
13339: LD_VAR 0 5
13343: PPUSH
13344: CALL_OW 325
13348: IFFALSE 13375
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13350: LD_ADDR_VAR 0 2
13354: PUSH
13355: LD_INT 5
13357: PUSH
13358: LD_INT 8
13360: PUSH
13361: LD_INT 9
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: LIST
13368: PUSH
13369: LD_VAR 0 4
13373: ARRAY
13374: ST_TO_ADDR
// end ;
13375: LD_VAR 0 2
13379: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13380: LD_INT 0
13382: PPUSH
13383: PPUSH
13384: PPUSH
// if not mines then
13385: LD_VAR 0 2
13389: NOT
13390: IFFALSE 13394
// exit ;
13392: GO 13538
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13394: LD_ADDR_VAR 0 5
13398: PUSH
13399: LD_INT 81
13401: PUSH
13402: LD_VAR 0 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 3
13413: PUSH
13414: LD_INT 21
13416: PUSH
13417: LD_INT 3
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PPUSH
13432: CALL_OW 69
13436: ST_TO_ADDR
// for i in mines do
13437: LD_ADDR_VAR 0 4
13441: PUSH
13442: LD_VAR 0 2
13446: PUSH
13447: FOR_IN
13448: IFFALSE 13536
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13450: LD_VAR 0 4
13454: PUSH
13455: LD_INT 1
13457: ARRAY
13458: PPUSH
13459: LD_VAR 0 4
13463: PUSH
13464: LD_INT 2
13466: ARRAY
13467: PPUSH
13468: CALL_OW 458
13472: NOT
13473: IFFALSE 13477
// continue ;
13475: GO 13447
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13477: LD_VAR 0 4
13481: PUSH
13482: LD_INT 1
13484: ARRAY
13485: PPUSH
13486: LD_VAR 0 4
13490: PUSH
13491: LD_INT 2
13493: ARRAY
13494: PPUSH
13495: CALL_OW 428
13499: PUSH
13500: LD_VAR 0 5
13504: IN
13505: IFFALSE 13534
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13507: LD_VAR 0 4
13511: PUSH
13512: LD_INT 1
13514: ARRAY
13515: PPUSH
13516: LD_VAR 0 4
13520: PUSH
13521: LD_INT 2
13523: ARRAY
13524: PPUSH
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL_OW 456
// end ;
13534: GO 13447
13536: POP
13537: POP
// end ;
13538: LD_VAR 0 3
13542: RET
// export function Count ( array ) ; begin
13543: LD_INT 0
13545: PPUSH
// result := array + 0 ;
13546: LD_ADDR_VAR 0 2
13550: PUSH
13551: LD_VAR 0 1
13555: PUSH
13556: LD_INT 0
13558: PLUS
13559: ST_TO_ADDR
// end ;
13560: LD_VAR 0 2
13564: RET
// export function IsEmpty ( building ) ; begin
13565: LD_INT 0
13567: PPUSH
// if not building then
13568: LD_VAR 0 1
13572: NOT
13573: IFFALSE 13577
// exit ;
13575: GO 13620
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13577: LD_ADDR_VAR 0 2
13581: PUSH
13582: LD_VAR 0 1
13586: PUSH
13587: LD_INT 22
13589: PUSH
13590: LD_VAR 0 1
13594: PPUSH
13595: CALL_OW 255
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 58
13606: PUSH
13607: EMPTY
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: IN
13619: ST_TO_ADDR
// end ;
13620: LD_VAR 0 2
13624: RET
// export function IsNotFull ( building ) ; var places ; begin
13625: LD_INT 0
13627: PPUSH
13628: PPUSH
// if not building then
13629: LD_VAR 0 1
13633: NOT
13634: IFFALSE 13638
// exit ;
13636: GO 13666
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13638: LD_ADDR_VAR 0 2
13642: PUSH
13643: LD_VAR 0 1
13647: PPUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 62
13653: PUSH
13654: EMPTY
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PPUSH
13661: CALL_OW 72
13665: ST_TO_ADDR
// end ;
13666: LD_VAR 0 2
13670: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13671: LD_INT 0
13673: PPUSH
13674: PPUSH
13675: PPUSH
13676: PPUSH
// tmp := [ ] ;
13677: LD_ADDR_VAR 0 3
13681: PUSH
13682: EMPTY
13683: ST_TO_ADDR
// list := [ ] ;
13684: LD_ADDR_VAR 0 5
13688: PUSH
13689: EMPTY
13690: ST_TO_ADDR
// for i = 16 to 25 do
13691: LD_ADDR_VAR 0 4
13695: PUSH
13696: DOUBLE
13697: LD_INT 16
13699: DEC
13700: ST_TO_ADDR
13701: LD_INT 25
13703: PUSH
13704: FOR_TO
13705: IFFALSE 13778
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_VAR 0 3
13716: PUSH
13717: LD_INT 22
13719: PUSH
13720: LD_VAR 0 1
13724: PPUSH
13725: CALL_OW 255
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 91
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: LD_INT 6
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 30
13752: PUSH
13753: LD_VAR 0 4
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: PPUSH
13770: CALL_OW 69
13774: ADD
13775: ST_TO_ADDR
13776: GO 13704
13778: POP
13779: POP
// for i = 1 to tmp do
13780: LD_ADDR_VAR 0 4
13784: PUSH
13785: DOUBLE
13786: LD_INT 1
13788: DEC
13789: ST_TO_ADDR
13790: LD_VAR 0 3
13794: PUSH
13795: FOR_TO
13796: IFFALSE 13884
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13798: LD_ADDR_VAR 0 5
13802: PUSH
13803: LD_VAR 0 5
13807: PUSH
13808: LD_VAR 0 3
13812: PUSH
13813: LD_VAR 0 4
13817: ARRAY
13818: PPUSH
13819: CALL_OW 266
13823: PUSH
13824: LD_VAR 0 3
13828: PUSH
13829: LD_VAR 0 4
13833: ARRAY
13834: PPUSH
13835: CALL_OW 250
13839: PUSH
13840: LD_VAR 0 3
13844: PUSH
13845: LD_VAR 0 4
13849: ARRAY
13850: PPUSH
13851: CALL_OW 251
13855: PUSH
13856: LD_VAR 0 3
13860: PUSH
13861: LD_VAR 0 4
13865: ARRAY
13866: PPUSH
13867: CALL_OW 254
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: ADD
13881: ST_TO_ADDR
13882: GO 13795
13884: POP
13885: POP
// result := list ;
13886: LD_ADDR_VAR 0 2
13890: PUSH
13891: LD_VAR 0 5
13895: ST_TO_ADDR
// end ;
13896: LD_VAR 0 2
13900: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13901: LD_INT 0
13903: PPUSH
13904: PPUSH
13905: PPUSH
13906: PPUSH
13907: PPUSH
13908: PPUSH
13909: PPUSH
// if not factory then
13910: LD_VAR 0 1
13914: NOT
13915: IFFALSE 13919
// exit ;
13917: GO 14522
// if control = control_apeman then
13919: LD_VAR 0 4
13923: PUSH
13924: LD_INT 5
13926: EQUAL
13927: IFFALSE 14036
// begin tmp := UnitsInside ( factory ) ;
13929: LD_ADDR_VAR 0 8
13933: PUSH
13934: LD_VAR 0 1
13938: PPUSH
13939: CALL_OW 313
13943: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13944: LD_VAR 0 8
13948: PPUSH
13949: LD_INT 25
13951: PUSH
13952: LD_INT 12
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PPUSH
13959: CALL_OW 72
13963: NOT
13964: IFFALSE 13974
// control := control_manual ;
13966: LD_ADDR_VAR 0 4
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13974: LD_ADDR_VAR 0 8
13978: PUSH
13979: LD_VAR 0 1
13983: PPUSH
13984: CALL 13671 0 1
13988: ST_TO_ADDR
// if tmp then
13989: LD_VAR 0 8
13993: IFFALSE 14036
// begin for i in tmp do
13995: LD_ADDR_VAR 0 7
13999: PUSH
14000: LD_VAR 0 8
14004: PUSH
14005: FOR_IN
14006: IFFALSE 14034
// if i [ 1 ] = b_ext_radio then
14008: LD_VAR 0 7
14012: PUSH
14013: LD_INT 1
14015: ARRAY
14016: PUSH
14017: LD_INT 22
14019: EQUAL
14020: IFFALSE 14032
// begin control := control_remote ;
14022: LD_ADDR_VAR 0 4
14026: PUSH
14027: LD_INT 2
14029: ST_TO_ADDR
// break ;
14030: GO 14034
// end ;
14032: GO 14005
14034: POP
14035: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14036: LD_VAR 0 1
14040: PPUSH
14041: LD_VAR 0 2
14045: PPUSH
14046: LD_VAR 0 3
14050: PPUSH
14051: LD_VAR 0 4
14055: PPUSH
14056: LD_VAR 0 5
14060: PPUSH
14061: CALL_OW 448
14065: IFFALSE 14100
// begin result := [ chassis , engine , control , weapon ] ;
14067: LD_ADDR_VAR 0 6
14071: PUSH
14072: LD_VAR 0 2
14076: PUSH
14077: LD_VAR 0 3
14081: PUSH
14082: LD_VAR 0 4
14086: PUSH
14087: LD_VAR 0 5
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: ST_TO_ADDR
// exit ;
14098: GO 14522
// end ; _chassis := AvailableChassisList ( factory ) ;
14100: LD_ADDR_VAR 0 9
14104: PUSH
14105: LD_VAR 0 1
14109: PPUSH
14110: CALL_OW 475
14114: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14115: LD_ADDR_VAR 0 11
14119: PUSH
14120: LD_VAR 0 1
14124: PPUSH
14125: CALL_OW 476
14129: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14130: LD_ADDR_VAR 0 12
14134: PUSH
14135: LD_VAR 0 1
14139: PPUSH
14140: CALL_OW 477
14144: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14145: LD_ADDR_VAR 0 10
14149: PUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL_OW 478
14159: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14160: LD_VAR 0 9
14164: NOT
14165: IFTRUE 14174
14167: PUSH
14168: LD_VAR 0 11
14172: NOT
14173: OR
14174: IFTRUE 14183
14176: PUSH
14177: LD_VAR 0 12
14181: NOT
14182: OR
14183: IFTRUE 14192
14185: PUSH
14186: LD_VAR 0 10
14190: NOT
14191: OR
14192: IFFALSE 14227
// begin result := [ chassis , engine , control , weapon ] ;
14194: LD_ADDR_VAR 0 6
14198: PUSH
14199: LD_VAR 0 2
14203: PUSH
14204: LD_VAR 0 3
14208: PUSH
14209: LD_VAR 0 4
14213: PUSH
14214: LD_VAR 0 5
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: ST_TO_ADDR
// exit ;
14225: GO 14522
// end ; if not chassis in _chassis then
14227: LD_VAR 0 2
14231: PUSH
14232: LD_VAR 0 9
14236: IN
14237: NOT
14238: IFFALSE 14264
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14240: LD_ADDR_VAR 0 2
14244: PUSH
14245: LD_VAR 0 9
14249: PUSH
14250: LD_INT 1
14252: PPUSH
14253: LD_VAR 0 9
14257: PPUSH
14258: CALL_OW 12
14262: ARRAY
14263: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14264: LD_VAR 0 2
14268: PPUSH
14269: LD_VAR 0 3
14273: PPUSH
14274: CALL 14527 0 2
14278: NOT
14279: IFFALSE 14340
// repeat engine := _engine [ 1 ] ;
14281: LD_ADDR_VAR 0 3
14285: PUSH
14286: LD_VAR 0 11
14290: PUSH
14291: LD_INT 1
14293: ARRAY
14294: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14295: LD_ADDR_VAR 0 11
14299: PUSH
14300: LD_VAR 0 11
14304: PPUSH
14305: LD_INT 1
14307: PPUSH
14308: CALL_OW 3
14312: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14313: LD_VAR 0 2
14317: PPUSH
14318: LD_VAR 0 3
14322: PPUSH
14323: CALL 14527 0 2
14327: IFTRUE 14338
14329: PUSH
14330: LD_VAR 0 11
14334: PUSH
14335: EMPTY
14336: EQUAL
14337: OR
14338: IFFALSE 14281
// if not control in _control then
14340: LD_VAR 0 4
14344: PUSH
14345: LD_VAR 0 12
14349: IN
14350: NOT
14351: IFFALSE 14377
// control := _control [ rand ( 1 , _control ) ] ;
14353: LD_ADDR_VAR 0 4
14357: PUSH
14358: LD_VAR 0 12
14362: PUSH
14363: LD_INT 1
14365: PPUSH
14366: LD_VAR 0 12
14370: PPUSH
14371: CALL_OW 12
14375: ARRAY
14376: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14377: LD_VAR 0 2
14381: PPUSH
14382: LD_VAR 0 5
14386: PPUSH
14387: CALL 14749 0 2
14391: NOT
14392: IFFALSE 14453
// repeat weapon := _weapon [ 1 ] ;
14394: LD_ADDR_VAR 0 5
14398: PUSH
14399: LD_VAR 0 10
14403: PUSH
14404: LD_INT 1
14406: ARRAY
14407: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14408: LD_ADDR_VAR 0 10
14412: PUSH
14413: LD_VAR 0 10
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 3
14425: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14426: LD_VAR 0 2
14430: PPUSH
14431: LD_VAR 0 5
14435: PPUSH
14436: CALL 14749 0 2
14440: IFTRUE 14451
14442: PUSH
14443: LD_VAR 0 10
14447: PUSH
14448: EMPTY
14449: EQUAL
14450: OR
14451: IFFALSE 14394
// result := [ ] ;
14453: LD_ADDR_VAR 0 6
14457: PUSH
14458: EMPTY
14459: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14460: LD_VAR 0 1
14464: PPUSH
14465: LD_VAR 0 2
14469: PPUSH
14470: LD_VAR 0 3
14474: PPUSH
14475: LD_VAR 0 4
14479: PPUSH
14480: LD_VAR 0 5
14484: PPUSH
14485: CALL_OW 448
14489: IFFALSE 14522
// result := [ chassis , engine , control , weapon ] ;
14491: LD_ADDR_VAR 0 6
14495: PUSH
14496: LD_VAR 0 2
14500: PUSH
14501: LD_VAR 0 3
14505: PUSH
14506: LD_VAR 0 4
14510: PUSH
14511: LD_VAR 0 5
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: ST_TO_ADDR
// end ;
14522: LD_VAR 0 6
14526: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14527: LD_INT 0
14529: PPUSH
// if not chassis or not engine then
14530: LD_VAR 0 1
14534: NOT
14535: IFTRUE 14544
14537: PUSH
14538: LD_VAR 0 2
14542: NOT
14543: OR
14544: IFFALSE 14548
// exit ;
14546: GO 14744
// case engine of engine_solar :
14548: LD_VAR 0 2
14552: PUSH
14553: LD_INT 2
14555: DOUBLE
14556: EQUAL
14557: IFTRUE 14561
14559: GO 14599
14561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14562: LD_ADDR_VAR 0 3
14566: PUSH
14567: LD_INT 11
14569: PUSH
14570: LD_INT 12
14572: PUSH
14573: LD_INT 13
14575: PUSH
14576: LD_INT 14
14578: PUSH
14579: LD_INT 1
14581: PUSH
14582: LD_INT 2
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: ST_TO_ADDR
14597: GO 14728
14599: LD_INT 1
14601: DOUBLE
14602: EQUAL
14603: IFTRUE 14607
14605: GO 14669
14607: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14608: LD_ADDR_VAR 0 3
14612: PUSH
14613: LD_INT 11
14615: PUSH
14616: LD_INT 12
14618: PUSH
14619: LD_INT 13
14621: PUSH
14622: LD_INT 14
14624: PUSH
14625: LD_INT 1
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: LD_INT 3
14633: PUSH
14634: LD_INT 4
14636: PUSH
14637: LD_INT 5
14639: PUSH
14640: LD_INT 21
14642: PUSH
14643: LD_INT 23
14645: PUSH
14646: LD_INT 22
14648: PUSH
14649: LD_INT 24
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: ST_TO_ADDR
14667: GO 14728
14669: LD_INT 3
14671: DOUBLE
14672: EQUAL
14673: IFTRUE 14677
14675: GO 14727
14677: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14678: LD_ADDR_VAR 0 3
14682: PUSH
14683: LD_INT 13
14685: PUSH
14686: LD_INT 14
14688: PUSH
14689: LD_INT 2
14691: PUSH
14692: LD_INT 3
14694: PUSH
14695: LD_INT 4
14697: PUSH
14698: LD_INT 5
14700: PUSH
14701: LD_INT 21
14703: PUSH
14704: LD_INT 22
14706: PUSH
14707: LD_INT 23
14709: PUSH
14710: LD_INT 24
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: ST_TO_ADDR
14725: GO 14728
14727: POP
// result := ( chassis in result ) ;
14728: LD_ADDR_VAR 0 3
14732: PUSH
14733: LD_VAR 0 1
14737: PUSH
14738: LD_VAR 0 3
14742: IN
14743: ST_TO_ADDR
// end ;
14744: LD_VAR 0 3
14748: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14749: LD_INT 0
14751: PPUSH
// if not chassis or not weapon then
14752: LD_VAR 0 1
14756: NOT
14757: IFTRUE 14766
14759: PUSH
14760: LD_VAR 0 2
14764: NOT
14765: OR
14766: IFFALSE 14770
// exit ;
14768: GO 15864
// case weapon of us_machine_gun :
14770: LD_VAR 0 2
14774: PUSH
14775: LD_INT 2
14777: DOUBLE
14778: EQUAL
14779: IFTRUE 14783
14781: GO 14813
14783: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14784: LD_ADDR_VAR 0 3
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: LD_INT 2
14794: PUSH
14795: LD_INT 3
14797: PUSH
14798: LD_INT 4
14800: PUSH
14801: LD_INT 5
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: ST_TO_ADDR
14811: GO 15848
14813: LD_INT 3
14815: DOUBLE
14816: EQUAL
14817: IFTRUE 14821
14819: GO 14851
14821: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_INT 1
14829: PUSH
14830: LD_INT 2
14832: PUSH
14833: LD_INT 3
14835: PUSH
14836: LD_INT 4
14838: PUSH
14839: LD_INT 5
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: ST_TO_ADDR
14849: GO 15848
14851: LD_INT 11
14853: DOUBLE
14854: EQUAL
14855: IFTRUE 14859
14857: GO 14889
14859: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14860: LD_ADDR_VAR 0 3
14864: PUSH
14865: LD_INT 1
14867: PUSH
14868: LD_INT 2
14870: PUSH
14871: LD_INT 3
14873: PUSH
14874: LD_INT 4
14876: PUSH
14877: LD_INT 5
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: ST_TO_ADDR
14887: GO 15848
14889: LD_INT 4
14891: DOUBLE
14892: EQUAL
14893: IFTRUE 14897
14895: GO 14923
14897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14898: LD_ADDR_VAR 0 3
14902: PUSH
14903: LD_INT 2
14905: PUSH
14906: LD_INT 3
14908: PUSH
14909: LD_INT 4
14911: PUSH
14912: LD_INT 5
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: ST_TO_ADDR
14921: GO 15848
14923: LD_INT 5
14925: DOUBLE
14926: EQUAL
14927: IFTRUE 14931
14929: GO 14957
14931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14932: LD_ADDR_VAR 0 3
14936: PUSH
14937: LD_INT 2
14939: PUSH
14940: LD_INT 3
14942: PUSH
14943: LD_INT 4
14945: PUSH
14946: LD_INT 5
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: ST_TO_ADDR
14955: GO 15848
14957: LD_INT 9
14959: DOUBLE
14960: EQUAL
14961: IFTRUE 14965
14963: GO 14991
14965: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14966: LD_ADDR_VAR 0 3
14970: PUSH
14971: LD_INT 2
14973: PUSH
14974: LD_INT 3
14976: PUSH
14977: LD_INT 4
14979: PUSH
14980: LD_INT 5
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: ST_TO_ADDR
14989: GO 15848
14991: LD_INT 7
14993: DOUBLE
14994: EQUAL
14995: IFTRUE 14999
14997: GO 15025
14999: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15000: LD_ADDR_VAR 0 3
15004: PUSH
15005: LD_INT 2
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: LD_INT 5
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: ST_TO_ADDR
15023: GO 15848
15025: LD_INT 12
15027: DOUBLE
15028: EQUAL
15029: IFTRUE 15033
15031: GO 15059
15033: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15034: LD_ADDR_VAR 0 3
15038: PUSH
15039: LD_INT 2
15041: PUSH
15042: LD_INT 3
15044: PUSH
15045: LD_INT 4
15047: PUSH
15048: LD_INT 5
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: ST_TO_ADDR
15057: GO 15848
15059: LD_INT 13
15061: DOUBLE
15062: EQUAL
15063: IFTRUE 15067
15065: GO 15093
15067: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15068: LD_ADDR_VAR 0 3
15072: PUSH
15073: LD_INT 2
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: LD_INT 4
15081: PUSH
15082: LD_INT 5
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: ST_TO_ADDR
15091: GO 15848
15093: LD_INT 14
15095: DOUBLE
15096: EQUAL
15097: IFTRUE 15101
15099: GO 15119
15101: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15102: LD_ADDR_VAR 0 3
15106: PUSH
15107: LD_INT 4
15109: PUSH
15110: LD_INT 5
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: ST_TO_ADDR
15117: GO 15848
15119: LD_INT 6
15121: DOUBLE
15122: EQUAL
15123: IFTRUE 15127
15125: GO 15145
15127: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15128: LD_ADDR_VAR 0 3
15132: PUSH
15133: LD_INT 4
15135: PUSH
15136: LD_INT 5
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: ST_TO_ADDR
15143: GO 15848
15145: LD_INT 10
15147: DOUBLE
15148: EQUAL
15149: IFTRUE 15153
15151: GO 15171
15153: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15154: LD_ADDR_VAR 0 3
15158: PUSH
15159: LD_INT 4
15161: PUSH
15162: LD_INT 5
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: ST_TO_ADDR
15169: GO 15848
15171: LD_INT 22
15173: DOUBLE
15174: EQUAL
15175: IFTRUE 15179
15177: GO 15205
15179: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15180: LD_ADDR_VAR 0 3
15184: PUSH
15185: LD_INT 11
15187: PUSH
15188: LD_INT 12
15190: PUSH
15191: LD_INT 13
15193: PUSH
15194: LD_INT 14
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: ST_TO_ADDR
15203: GO 15848
15205: LD_INT 23
15207: DOUBLE
15208: EQUAL
15209: IFTRUE 15213
15211: GO 15239
15213: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15214: LD_ADDR_VAR 0 3
15218: PUSH
15219: LD_INT 11
15221: PUSH
15222: LD_INT 12
15224: PUSH
15225: LD_INT 13
15227: PUSH
15228: LD_INT 14
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: ST_TO_ADDR
15237: GO 15848
15239: LD_INT 24
15241: DOUBLE
15242: EQUAL
15243: IFTRUE 15247
15245: GO 15273
15247: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15248: LD_ADDR_VAR 0 3
15252: PUSH
15253: LD_INT 11
15255: PUSH
15256: LD_INT 12
15258: PUSH
15259: LD_INT 13
15261: PUSH
15262: LD_INT 14
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: ST_TO_ADDR
15271: GO 15848
15273: LD_INT 30
15275: DOUBLE
15276: EQUAL
15277: IFTRUE 15281
15279: GO 15307
15281: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15282: LD_ADDR_VAR 0 3
15286: PUSH
15287: LD_INT 11
15289: PUSH
15290: LD_INT 12
15292: PUSH
15293: LD_INT 13
15295: PUSH
15296: LD_INT 14
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: ST_TO_ADDR
15305: GO 15848
15307: LD_INT 25
15309: DOUBLE
15310: EQUAL
15311: IFTRUE 15315
15313: GO 15333
15315: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15316: LD_ADDR_VAR 0 3
15320: PUSH
15321: LD_INT 13
15323: PUSH
15324: LD_INT 14
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: ST_TO_ADDR
15331: GO 15848
15333: LD_INT 27
15335: DOUBLE
15336: EQUAL
15337: IFTRUE 15341
15339: GO 15359
15341: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15342: LD_ADDR_VAR 0 3
15346: PUSH
15347: LD_INT 13
15349: PUSH
15350: LD_INT 14
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: ST_TO_ADDR
15357: GO 15848
15359: LD_INT 92
15361: DOUBLE
15362: EQUAL
15363: IFTRUE 15367
15365: GO 15393
15367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15368: LD_ADDR_VAR 0 3
15372: PUSH
15373: LD_INT 11
15375: PUSH
15376: LD_INT 12
15378: PUSH
15379: LD_INT 13
15381: PUSH
15382: LD_INT 14
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: ST_TO_ADDR
15391: GO 15848
15393: LD_INT 28
15395: DOUBLE
15396: EQUAL
15397: IFTRUE 15401
15399: GO 15419
15401: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15402: LD_ADDR_VAR 0 3
15406: PUSH
15407: LD_INT 13
15409: PUSH
15410: LD_INT 14
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: ST_TO_ADDR
15417: GO 15848
15419: LD_INT 29
15421: DOUBLE
15422: EQUAL
15423: IFTRUE 15427
15425: GO 15445
15427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15428: LD_ADDR_VAR 0 3
15432: PUSH
15433: LD_INT 13
15435: PUSH
15436: LD_INT 14
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: ST_TO_ADDR
15443: GO 15848
15445: LD_INT 31
15447: DOUBLE
15448: EQUAL
15449: IFTRUE 15453
15451: GO 15471
15453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15454: LD_ADDR_VAR 0 3
15458: PUSH
15459: LD_INT 13
15461: PUSH
15462: LD_INT 14
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: ST_TO_ADDR
15469: GO 15848
15471: LD_INT 26
15473: DOUBLE
15474: EQUAL
15475: IFTRUE 15479
15477: GO 15497
15479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15480: LD_ADDR_VAR 0 3
15484: PUSH
15485: LD_INT 13
15487: PUSH
15488: LD_INT 14
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: ST_TO_ADDR
15495: GO 15848
15497: LD_INT 42
15499: DOUBLE
15500: EQUAL
15501: IFTRUE 15505
15503: GO 15531
15505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15506: LD_ADDR_VAR 0 3
15510: PUSH
15511: LD_INT 21
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_INT 23
15519: PUSH
15520: LD_INT 24
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: ST_TO_ADDR
15529: GO 15848
15531: LD_INT 43
15533: DOUBLE
15534: EQUAL
15535: IFTRUE 15539
15537: GO 15565
15539: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15540: LD_ADDR_VAR 0 3
15544: PUSH
15545: LD_INT 21
15547: PUSH
15548: LD_INT 22
15550: PUSH
15551: LD_INT 23
15553: PUSH
15554: LD_INT 24
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: ST_TO_ADDR
15563: GO 15848
15565: LD_INT 44
15567: DOUBLE
15568: EQUAL
15569: IFTRUE 15573
15571: GO 15599
15573: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15574: LD_ADDR_VAR 0 3
15578: PUSH
15579: LD_INT 21
15581: PUSH
15582: LD_INT 22
15584: PUSH
15585: LD_INT 23
15587: PUSH
15588: LD_INT 24
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: ST_TO_ADDR
15597: GO 15848
15599: LD_INT 45
15601: DOUBLE
15602: EQUAL
15603: IFTRUE 15607
15605: GO 15633
15607: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15608: LD_ADDR_VAR 0 3
15612: PUSH
15613: LD_INT 21
15615: PUSH
15616: LD_INT 22
15618: PUSH
15619: LD_INT 23
15621: PUSH
15622: LD_INT 24
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: ST_TO_ADDR
15631: GO 15848
15633: LD_INT 49
15635: DOUBLE
15636: EQUAL
15637: IFTRUE 15641
15639: GO 15667
15641: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15642: LD_ADDR_VAR 0 3
15646: PUSH
15647: LD_INT 21
15649: PUSH
15650: LD_INT 22
15652: PUSH
15653: LD_INT 23
15655: PUSH
15656: LD_INT 24
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: ST_TO_ADDR
15665: GO 15848
15667: LD_INT 51
15669: DOUBLE
15670: EQUAL
15671: IFTRUE 15675
15673: GO 15701
15675: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15676: LD_ADDR_VAR 0 3
15680: PUSH
15681: LD_INT 21
15683: PUSH
15684: LD_INT 22
15686: PUSH
15687: LD_INT 23
15689: PUSH
15690: LD_INT 24
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: ST_TO_ADDR
15699: GO 15848
15701: LD_INT 52
15703: DOUBLE
15704: EQUAL
15705: IFTRUE 15709
15707: GO 15735
15709: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15710: LD_ADDR_VAR 0 3
15714: PUSH
15715: LD_INT 21
15717: PUSH
15718: LD_INT 22
15720: PUSH
15721: LD_INT 23
15723: PUSH
15724: LD_INT 24
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: ST_TO_ADDR
15733: GO 15848
15735: LD_INT 53
15737: DOUBLE
15738: EQUAL
15739: IFTRUE 15743
15741: GO 15761
15743: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15744: LD_ADDR_VAR 0 3
15748: PUSH
15749: LD_INT 23
15751: PUSH
15752: LD_INT 24
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: ST_TO_ADDR
15759: GO 15848
15761: LD_INT 46
15763: DOUBLE
15764: EQUAL
15765: IFTRUE 15769
15767: GO 15787
15769: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15770: LD_ADDR_VAR 0 3
15774: PUSH
15775: LD_INT 23
15777: PUSH
15778: LD_INT 24
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: ST_TO_ADDR
15785: GO 15848
15787: LD_INT 47
15789: DOUBLE
15790: EQUAL
15791: IFTRUE 15795
15793: GO 15813
15795: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15796: LD_ADDR_VAR 0 3
15800: PUSH
15801: LD_INT 23
15803: PUSH
15804: LD_INT 24
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: ST_TO_ADDR
15811: GO 15848
15813: LD_INT 98
15815: DOUBLE
15816: EQUAL
15817: IFTRUE 15821
15819: GO 15847
15821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15822: LD_ADDR_VAR 0 3
15826: PUSH
15827: LD_INT 21
15829: PUSH
15830: LD_INT 22
15832: PUSH
15833: LD_INT 23
15835: PUSH
15836: LD_INT 24
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: ST_TO_ADDR
15845: GO 15848
15847: POP
// result := ( chassis in result ) ;
15848: LD_ADDR_VAR 0 3
15852: PUSH
15853: LD_VAR 0 1
15857: PUSH
15858: LD_VAR 0 3
15862: IN
15863: ST_TO_ADDR
// end ;
15864: LD_VAR 0 3
15868: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15869: LD_INT 0
15871: PPUSH
15872: PPUSH
15873: PPUSH
15874: PPUSH
15875: PPUSH
15876: PPUSH
15877: PPUSH
// result := array ;
15878: LD_ADDR_VAR 0 5
15882: PUSH
15883: LD_VAR 0 1
15887: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15888: LD_VAR 0 1
15892: NOT
15893: IFTRUE 15902
15895: PUSH
15896: LD_VAR 0 2
15900: NOT
15901: OR
15902: IFTRUE 15911
15904: PUSH
15905: LD_VAR 0 3
15909: NOT
15910: OR
15911: IFTRUE 15925
15913: PUSH
15914: LD_VAR 0 2
15918: PUSH
15919: LD_VAR 0 1
15923: GREATER
15924: OR
15925: IFTRUE 15939
15927: PUSH
15928: LD_VAR 0 3
15932: PUSH
15933: LD_VAR 0 1
15937: GREATER
15938: OR
15939: IFFALSE 15943
// exit ;
15941: GO 16239
// if direction then
15943: LD_VAR 0 4
15947: IFFALSE 16011
// begin d := 1 ;
15949: LD_ADDR_VAR 0 9
15953: PUSH
15954: LD_INT 1
15956: ST_TO_ADDR
// if i_from > i_to then
15957: LD_VAR 0 2
15961: PUSH
15962: LD_VAR 0 3
15966: GREATER
15967: IFFALSE 15993
// length := ( array - i_from ) + i_to else
15969: LD_ADDR_VAR 0 11
15973: PUSH
15974: LD_VAR 0 1
15978: PUSH
15979: LD_VAR 0 2
15983: MINUS
15984: PUSH
15985: LD_VAR 0 3
15989: PLUS
15990: ST_TO_ADDR
15991: GO 16009
// length := i_to - i_from ;
15993: LD_ADDR_VAR 0 11
15997: PUSH
15998: LD_VAR 0 3
16002: PUSH
16003: LD_VAR 0 2
16007: MINUS
16008: ST_TO_ADDR
// end else
16009: GO 16072
// begin d := - 1 ;
16011: LD_ADDR_VAR 0 9
16015: PUSH
16016: LD_INT 1
16018: NEG
16019: ST_TO_ADDR
// if i_from > i_to then
16020: LD_VAR 0 2
16024: PUSH
16025: LD_VAR 0 3
16029: GREATER
16030: IFFALSE 16050
// length := i_from - i_to else
16032: LD_ADDR_VAR 0 11
16036: PUSH
16037: LD_VAR 0 2
16041: PUSH
16042: LD_VAR 0 3
16046: MINUS
16047: ST_TO_ADDR
16048: GO 16072
// length := ( array - i_to ) + i_from ;
16050: LD_ADDR_VAR 0 11
16054: PUSH
16055: LD_VAR 0 1
16059: PUSH
16060: LD_VAR 0 3
16064: MINUS
16065: PUSH
16066: LD_VAR 0 2
16070: PLUS
16071: ST_TO_ADDR
// end ; if not length then
16072: LD_VAR 0 11
16076: NOT
16077: IFFALSE 16081
// exit ;
16079: GO 16239
// tmp := array ;
16081: LD_ADDR_VAR 0 10
16085: PUSH
16086: LD_VAR 0 1
16090: ST_TO_ADDR
// for i = 1 to length do
16091: LD_ADDR_VAR 0 6
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_VAR 0 11
16105: PUSH
16106: FOR_TO
16107: IFFALSE 16227
// begin for j = 1 to array do
16109: LD_ADDR_VAR 0 7
16113: PUSH
16114: DOUBLE
16115: LD_INT 1
16117: DEC
16118: ST_TO_ADDR
16119: LD_VAR 0 1
16123: PUSH
16124: FOR_TO
16125: IFFALSE 16213
// begin k := j + d ;
16127: LD_ADDR_VAR 0 8
16131: PUSH
16132: LD_VAR 0 7
16136: PUSH
16137: LD_VAR 0 9
16141: PLUS
16142: ST_TO_ADDR
// if k > array then
16143: LD_VAR 0 8
16147: PUSH
16148: LD_VAR 0 1
16152: GREATER
16153: IFFALSE 16163
// k := 1 ;
16155: LD_ADDR_VAR 0 8
16159: PUSH
16160: LD_INT 1
16162: ST_TO_ADDR
// if not k then
16163: LD_VAR 0 8
16167: NOT
16168: IFFALSE 16180
// k := array ;
16170: LD_ADDR_VAR 0 8
16174: PUSH
16175: LD_VAR 0 1
16179: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16180: LD_ADDR_VAR 0 10
16184: PUSH
16185: LD_VAR 0 10
16189: PPUSH
16190: LD_VAR 0 8
16194: PPUSH
16195: LD_VAR 0 1
16199: PUSH
16200: LD_VAR 0 7
16204: ARRAY
16205: PPUSH
16206: CALL_OW 1
16210: ST_TO_ADDR
// end ;
16211: GO 16124
16213: POP
16214: POP
// array := tmp ;
16215: LD_ADDR_VAR 0 1
16219: PUSH
16220: LD_VAR 0 10
16224: ST_TO_ADDR
// end ;
16225: GO 16106
16227: POP
16228: POP
// result := array ;
16229: LD_ADDR_VAR 0 5
16233: PUSH
16234: LD_VAR 0 1
16238: ST_TO_ADDR
// end ;
16239: LD_VAR 0 5
16243: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16244: LD_INT 0
16246: PPUSH
16247: PPUSH
// result := 0 ;
16248: LD_ADDR_VAR 0 3
16252: PUSH
16253: LD_INT 0
16255: ST_TO_ADDR
// if not array or not value in array then
16256: LD_VAR 0 1
16260: NOT
16261: IFTRUE 16276
16263: PUSH
16264: LD_VAR 0 2
16268: PUSH
16269: LD_VAR 0 1
16273: IN
16274: NOT
16275: OR
16276: IFFALSE 16280
// exit ;
16278: GO 16334
// for i = 1 to array do
16280: LD_ADDR_VAR 0 4
16284: PUSH
16285: DOUBLE
16286: LD_INT 1
16288: DEC
16289: ST_TO_ADDR
16290: LD_VAR 0 1
16294: PUSH
16295: FOR_TO
16296: IFFALSE 16332
// if value = array [ i ] then
16298: LD_VAR 0 2
16302: PUSH
16303: LD_VAR 0 1
16307: PUSH
16308: LD_VAR 0 4
16312: ARRAY
16313: EQUAL
16314: IFFALSE 16330
// begin result := i ;
16316: LD_ADDR_VAR 0 3
16320: PUSH
16321: LD_VAR 0 4
16325: ST_TO_ADDR
// exit ;
16326: POP
16327: POP
16328: GO 16334
// end ;
16330: GO 16295
16332: POP
16333: POP
// end ;
16334: LD_VAR 0 3
16338: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16339: LD_INT 0
16341: PPUSH
// vc_chassis := chassis ;
16342: LD_ADDR_OWVAR 37
16346: PUSH
16347: LD_VAR 0 1
16351: ST_TO_ADDR
// vc_engine := engine ;
16352: LD_ADDR_OWVAR 39
16356: PUSH
16357: LD_VAR 0 2
16361: ST_TO_ADDR
// vc_control := control ;
16362: LD_ADDR_OWVAR 38
16366: PUSH
16367: LD_VAR 0 3
16371: ST_TO_ADDR
// vc_weapon := weapon ;
16372: LD_ADDR_OWVAR 40
16376: PUSH
16377: LD_VAR 0 4
16381: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16382: LD_ADDR_OWVAR 41
16386: PUSH
16387: LD_VAR 0 5
16391: ST_TO_ADDR
// end ;
16392: LD_VAR 0 6
16396: RET
// export function WantPlant ( unit ) ; var task ; begin
16397: LD_INT 0
16399: PPUSH
16400: PPUSH
// result := false ;
16401: LD_ADDR_VAR 0 2
16405: PUSH
16406: LD_INT 0
16408: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16409: LD_ADDR_VAR 0 3
16413: PUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 437
16423: ST_TO_ADDR
// if task then
16424: LD_VAR 0 3
16428: IFFALSE 16456
// if task [ 1 ] [ 1 ] = p then
16430: LD_VAR 0 3
16434: PUSH
16435: LD_INT 1
16437: ARRAY
16438: PUSH
16439: LD_INT 1
16441: ARRAY
16442: PUSH
16443: LD_STRING p
16445: EQUAL
16446: IFFALSE 16456
// result := true ;
16448: LD_ADDR_VAR 0 2
16452: PUSH
16453: LD_INT 1
16455: ST_TO_ADDR
// end ;
16456: LD_VAR 0 2
16460: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16461: LD_INT 0
16463: PPUSH
16464: PPUSH
16465: PPUSH
16466: PPUSH
// if pos < 1 then
16467: LD_VAR 0 2
16471: PUSH
16472: LD_INT 1
16474: LESS
16475: IFFALSE 16479
// exit ;
16477: GO 16782
// if pos = 1 then
16479: LD_VAR 0 2
16483: PUSH
16484: LD_INT 1
16486: EQUAL
16487: IFFALSE 16520
// result := Replace ( arr , pos [ 1 ] , value ) else
16489: LD_ADDR_VAR 0 4
16493: PUSH
16494: LD_VAR 0 1
16498: PPUSH
16499: LD_VAR 0 2
16503: PUSH
16504: LD_INT 1
16506: ARRAY
16507: PPUSH
16508: LD_VAR 0 3
16512: PPUSH
16513: CALL_OW 1
16517: ST_TO_ADDR
16518: GO 16782
// begin tmp := arr ;
16520: LD_ADDR_VAR 0 6
16524: PUSH
16525: LD_VAR 0 1
16529: ST_TO_ADDR
// s_arr := [ tmp ] ;
16530: LD_ADDR_VAR 0 7
16534: PUSH
16535: LD_VAR 0 6
16539: PUSH
16540: EMPTY
16541: LIST
16542: ST_TO_ADDR
// for i = 1 to pos - 1 do
16543: LD_ADDR_VAR 0 5
16547: PUSH
16548: DOUBLE
16549: LD_INT 1
16551: DEC
16552: ST_TO_ADDR
16553: LD_VAR 0 2
16557: PUSH
16558: LD_INT 1
16560: MINUS
16561: PUSH
16562: FOR_TO
16563: IFFALSE 16608
// begin tmp := tmp [ pos [ i ] ] ;
16565: LD_ADDR_VAR 0 6
16569: PUSH
16570: LD_VAR 0 6
16574: PUSH
16575: LD_VAR 0 2
16579: PUSH
16580: LD_VAR 0 5
16584: ARRAY
16585: ARRAY
16586: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16587: LD_ADDR_VAR 0 7
16591: PUSH
16592: LD_VAR 0 7
16596: PUSH
16597: LD_VAR 0 6
16601: PUSH
16602: EMPTY
16603: LIST
16604: ADD
16605: ST_TO_ADDR
// end ;
16606: GO 16562
16608: POP
16609: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16610: LD_ADDR_VAR 0 6
16614: PUSH
16615: LD_VAR 0 6
16619: PPUSH
16620: LD_VAR 0 2
16624: PUSH
16625: LD_VAR 0 2
16629: ARRAY
16630: PPUSH
16631: LD_VAR 0 3
16635: PPUSH
16636: CALL_OW 1
16640: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16641: LD_ADDR_VAR 0 7
16645: PUSH
16646: LD_VAR 0 7
16650: PPUSH
16651: LD_VAR 0 7
16655: PPUSH
16656: LD_VAR 0 6
16660: PPUSH
16661: CALL_OW 1
16665: ST_TO_ADDR
// for i = s_arr downto 2 do
16666: LD_ADDR_VAR 0 5
16670: PUSH
16671: DOUBLE
16672: LD_VAR 0 7
16676: INC
16677: ST_TO_ADDR
16678: LD_INT 2
16680: PUSH
16681: FOR_DOWNTO
16682: IFFALSE 16766
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16684: LD_ADDR_VAR 0 6
16688: PUSH
16689: LD_VAR 0 7
16693: PUSH
16694: LD_VAR 0 5
16698: PUSH
16699: LD_INT 1
16701: MINUS
16702: ARRAY
16703: PPUSH
16704: LD_VAR 0 2
16708: PUSH
16709: LD_VAR 0 5
16713: PUSH
16714: LD_INT 1
16716: MINUS
16717: ARRAY
16718: PPUSH
16719: LD_VAR 0 7
16723: PUSH
16724: LD_VAR 0 5
16728: ARRAY
16729: PPUSH
16730: CALL_OW 1
16734: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16735: LD_ADDR_VAR 0 7
16739: PUSH
16740: LD_VAR 0 7
16744: PPUSH
16745: LD_VAR 0 5
16749: PUSH
16750: LD_INT 1
16752: MINUS
16753: PPUSH
16754: LD_VAR 0 6
16758: PPUSH
16759: CALL_OW 1
16763: ST_TO_ADDR
// end ;
16764: GO 16681
16766: POP
16767: POP
// result := s_arr [ 1 ] ;
16768: LD_ADDR_VAR 0 4
16772: PUSH
16773: LD_VAR 0 7
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: ST_TO_ADDR
// end ; end ;
16782: LD_VAR 0 4
16786: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16787: LD_INT 0
16789: PPUSH
16790: PPUSH
// if not list then
16791: LD_VAR 0 1
16795: NOT
16796: IFFALSE 16800
// exit ;
16798: GO 16891
// i := list [ pos1 ] ;
16800: LD_ADDR_VAR 0 5
16804: PUSH
16805: LD_VAR 0 1
16809: PUSH
16810: LD_VAR 0 2
16814: ARRAY
16815: ST_TO_ADDR
// if not i then
16816: LD_VAR 0 5
16820: NOT
16821: IFFALSE 16825
// exit ;
16823: GO 16891
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16825: LD_ADDR_VAR 0 1
16829: PUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: LD_VAR 0 2
16839: PPUSH
16840: LD_VAR 0 1
16844: PUSH
16845: LD_VAR 0 3
16849: ARRAY
16850: PPUSH
16851: CALL_OW 1
16855: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16856: LD_ADDR_VAR 0 1
16860: PUSH
16861: LD_VAR 0 1
16865: PPUSH
16866: LD_VAR 0 3
16870: PPUSH
16871: LD_VAR 0 5
16875: PPUSH
16876: CALL_OW 1
16880: ST_TO_ADDR
// result := list ;
16881: LD_ADDR_VAR 0 4
16885: PUSH
16886: LD_VAR 0 1
16890: ST_TO_ADDR
// end ;
16891: LD_VAR 0 4
16895: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16896: LD_INT 0
16898: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16899: LD_ADDR_VAR 0 5
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 250
16913: PPUSH
16914: LD_VAR 0 1
16918: PPUSH
16919: CALL_OW 251
16923: PPUSH
16924: LD_VAR 0 2
16928: PPUSH
16929: LD_VAR 0 3
16933: PPUSH
16934: LD_VAR 0 4
16938: PPUSH
16939: CALL 17321 0 5
16943: ST_TO_ADDR
// end ;
16944: LD_VAR 0 5
16948: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
16953: PPUSH
16954: PPUSH
// if not list or not unit then
16955: LD_VAR 0 2
16959: NOT
16960: IFTRUE 16969
16962: PUSH
16963: LD_VAR 0 1
16967: NOT
16968: OR
16969: IFFALSE 16973
// exit ;
16971: GO 17316
// result := [ ] ;
16973: LD_ADDR_VAR 0 5
16977: PUSH
16978: EMPTY
16979: ST_TO_ADDR
// for i in list do
16980: LD_ADDR_VAR 0 6
16984: PUSH
16985: LD_VAR 0 2
16989: PUSH
16990: FOR_IN
16991: IFFALSE 17209
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16993: LD_ADDR_VAR 0 8
16997: PUSH
16998: LD_VAR 0 1
17002: PPUSH
17003: LD_VAR 0 6
17007: PUSH
17008: LD_INT 1
17010: ARRAY
17011: PPUSH
17012: LD_VAR 0 6
17016: PUSH
17017: LD_INT 2
17019: ARRAY
17020: PPUSH
17021: CALL_OW 297
17025: ST_TO_ADDR
// if not Count ( result ) then
17026: LD_VAR 0 5
17030: PPUSH
17031: CALL 13543 0 1
17035: NOT
17036: IFFALSE 17069
// begin result := Join ( result , [ i , tmp ] ) ;
17038: LD_ADDR_VAR 0 5
17042: PUSH
17043: LD_VAR 0 5
17047: PPUSH
17048: LD_VAR 0 6
17052: PUSH
17053: LD_VAR 0 8
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PPUSH
17062: CALL 49519 0 2
17066: ST_TO_ADDR
// continue ;
17067: GO 16990
// end ; if result [ result ] [ 2 ] <= tmp then
17069: LD_VAR 0 5
17073: PUSH
17074: LD_VAR 0 5
17078: ARRAY
17079: PUSH
17080: LD_INT 2
17082: ARRAY
17083: PUSH
17084: LD_VAR 0 8
17088: LESSEQUAL
17089: IFFALSE 17122
// result := Join ( result , [ i , tmp ] ) else
17091: LD_ADDR_VAR 0 5
17095: PUSH
17096: LD_VAR 0 5
17100: PPUSH
17101: LD_VAR 0 6
17105: PUSH
17106: LD_VAR 0 8
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PPUSH
17115: CALL 49519 0 2
17119: ST_TO_ADDR
17120: GO 17207
// begin for j := 1 to Count ( result ) do
17122: LD_ADDR_VAR 0 7
17126: PUSH
17127: DOUBLE
17128: LD_INT 1
17130: DEC
17131: ST_TO_ADDR
17132: LD_VAR 0 5
17136: PPUSH
17137: CALL 13543 0 1
17141: PUSH
17142: FOR_TO
17143: IFFALSE 17205
// begin if tmp < result [ j ] [ 2 ] then
17145: LD_VAR 0 8
17149: PUSH
17150: LD_VAR 0 5
17154: PUSH
17155: LD_VAR 0 7
17159: ARRAY
17160: PUSH
17161: LD_INT 2
17163: ARRAY
17164: LESS
17165: IFFALSE 17203
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17167: LD_ADDR_VAR 0 5
17171: PUSH
17172: LD_VAR 0 5
17176: PPUSH
17177: LD_VAR 0 7
17181: PPUSH
17182: LD_VAR 0 6
17186: PUSH
17187: LD_VAR 0 8
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PPUSH
17196: CALL_OW 2
17200: ST_TO_ADDR
// break ;
17201: GO 17205
// end ; end ;
17203: GO 17142
17205: POP
17206: POP
// end ; end ;
17207: GO 16990
17209: POP
17210: POP
// if result and not asc then
17211: LD_VAR 0 5
17215: IFFALSE 17224
17217: PUSH
17218: LD_VAR 0 3
17222: NOT
17223: AND
17224: IFFALSE 17241
// result := ReverseArray ( result ) ;
17226: LD_ADDR_VAR 0 5
17230: PUSH
17231: LD_VAR 0 5
17235: PPUSH
17236: CALL 44599 0 1
17240: ST_TO_ADDR
// tmp := [ ] ;
17241: LD_ADDR_VAR 0 8
17245: PUSH
17246: EMPTY
17247: ST_TO_ADDR
// if mode then
17248: LD_VAR 0 4
17252: IFFALSE 17316
// begin for i := 1 to result do
17254: LD_ADDR_VAR 0 6
17258: PUSH
17259: DOUBLE
17260: LD_INT 1
17262: DEC
17263: ST_TO_ADDR
17264: LD_VAR 0 5
17268: PUSH
17269: FOR_TO
17270: IFFALSE 17304
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17272: LD_ADDR_VAR 0 8
17276: PUSH
17277: LD_VAR 0 8
17281: PPUSH
17282: LD_VAR 0 5
17286: PUSH
17287: LD_VAR 0 6
17291: ARRAY
17292: PUSH
17293: LD_INT 1
17295: ARRAY
17296: PPUSH
17297: CALL 49519 0 2
17301: ST_TO_ADDR
17302: GO 17269
17304: POP
17305: POP
// result := tmp ;
17306: LD_ADDR_VAR 0 5
17310: PUSH
17311: LD_VAR 0 8
17315: ST_TO_ADDR
// end ; end ;
17316: LD_VAR 0 5
17320: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17321: LD_INT 0
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
// if not list then
17327: LD_VAR 0 3
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17726
// result := [ ] ;
17336: LD_ADDR_VAR 0 6
17340: PUSH
17341: EMPTY
17342: ST_TO_ADDR
// for i in list do
17343: LD_ADDR_VAR 0 7
17347: PUSH
17348: LD_VAR 0 3
17352: PUSH
17353: FOR_IN
17354: IFFALSE 17556
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17356: LD_ADDR_VAR 0 9
17360: PUSH
17361: LD_VAR 0 7
17365: PPUSH
17366: LD_VAR 0 1
17370: PPUSH
17371: LD_VAR 0 2
17375: PPUSH
17376: CALL_OW 297
17380: ST_TO_ADDR
// if not result then
17381: LD_VAR 0 6
17385: NOT
17386: IFFALSE 17412
// result := [ [ i , tmp ] ] else
17388: LD_ADDR_VAR 0 6
17392: PUSH
17393: LD_VAR 0 7
17397: PUSH
17398: LD_VAR 0 9
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: EMPTY
17408: LIST
17409: ST_TO_ADDR
17410: GO 17554
// begin if result [ result ] [ 2 ] <= tmp then
17412: LD_VAR 0 6
17416: PUSH
17417: LD_VAR 0 6
17421: ARRAY
17422: PUSH
17423: LD_INT 2
17425: ARRAY
17426: PUSH
17427: LD_VAR 0 9
17431: LESSEQUAL
17432: IFFALSE 17474
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17434: LD_ADDR_VAR 0 6
17438: PUSH
17439: LD_VAR 0 6
17443: PPUSH
17444: LD_VAR 0 6
17448: PUSH
17449: LD_INT 1
17451: PLUS
17452: PPUSH
17453: LD_VAR 0 7
17457: PUSH
17458: LD_VAR 0 9
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PPUSH
17467: CALL_OW 2
17471: ST_TO_ADDR
17472: GO 17554
// for j := 1 to result do
17474: LD_ADDR_VAR 0 8
17478: PUSH
17479: DOUBLE
17480: LD_INT 1
17482: DEC
17483: ST_TO_ADDR
17484: LD_VAR 0 6
17488: PUSH
17489: FOR_TO
17490: IFFALSE 17552
// begin if tmp < result [ j ] [ 2 ] then
17492: LD_VAR 0 9
17496: PUSH
17497: LD_VAR 0 6
17501: PUSH
17502: LD_VAR 0 8
17506: ARRAY
17507: PUSH
17508: LD_INT 2
17510: ARRAY
17511: LESS
17512: IFFALSE 17550
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17514: LD_ADDR_VAR 0 6
17518: PUSH
17519: LD_VAR 0 6
17523: PPUSH
17524: LD_VAR 0 8
17528: PPUSH
17529: LD_VAR 0 7
17533: PUSH
17534: LD_VAR 0 9
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PPUSH
17543: CALL_OW 2
17547: ST_TO_ADDR
// break ;
17548: GO 17552
// end ; end ;
17550: GO 17489
17552: POP
17553: POP
// end ; end ;
17554: GO 17353
17556: POP
17557: POP
// if result and not asc then
17558: LD_VAR 0 6
17562: IFFALSE 17571
17564: PUSH
17565: LD_VAR 0 4
17569: NOT
17570: AND
17571: IFFALSE 17646
// begin tmp := result ;
17573: LD_ADDR_VAR 0 9
17577: PUSH
17578: LD_VAR 0 6
17582: ST_TO_ADDR
// for i = tmp downto 1 do
17583: LD_ADDR_VAR 0 7
17587: PUSH
17588: DOUBLE
17589: LD_VAR 0 9
17593: INC
17594: ST_TO_ADDR
17595: LD_INT 1
17597: PUSH
17598: FOR_DOWNTO
17599: IFFALSE 17644
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17601: LD_ADDR_VAR 0 6
17605: PUSH
17606: LD_VAR 0 6
17610: PPUSH
17611: LD_VAR 0 9
17615: PUSH
17616: LD_VAR 0 7
17620: MINUS
17621: PUSH
17622: LD_INT 1
17624: PLUS
17625: PPUSH
17626: LD_VAR 0 9
17630: PUSH
17631: LD_VAR 0 7
17635: ARRAY
17636: PPUSH
17637: CALL_OW 1
17641: ST_TO_ADDR
17642: GO 17598
17644: POP
17645: POP
// end ; tmp := [ ] ;
17646: LD_ADDR_VAR 0 9
17650: PUSH
17651: EMPTY
17652: ST_TO_ADDR
// if mode then
17653: LD_VAR 0 5
17657: IFFALSE 17726
// begin for i = 1 to result do
17659: LD_ADDR_VAR 0 7
17663: PUSH
17664: DOUBLE
17665: LD_INT 1
17667: DEC
17668: ST_TO_ADDR
17669: LD_VAR 0 6
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17714
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17677: LD_ADDR_VAR 0 9
17681: PUSH
17682: LD_VAR 0 9
17686: PPUSH
17687: LD_VAR 0 7
17691: PPUSH
17692: LD_VAR 0 6
17696: PUSH
17697: LD_VAR 0 7
17701: ARRAY
17702: PUSH
17703: LD_INT 1
17705: ARRAY
17706: PPUSH
17707: CALL_OW 1
17711: ST_TO_ADDR
17712: GO 17674
17714: POP
17715: POP
// result := tmp ;
17716: LD_ADDR_VAR 0 6
17720: PUSH
17721: LD_VAR 0 9
17725: ST_TO_ADDR
// end ; end ;
17726: LD_VAR 0 6
17730: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17731: LD_INT 0
17733: PPUSH
17734: PPUSH
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17739: LD_ADDR_VAR 0 5
17743: PUSH
17744: LD_INT 0
17746: PUSH
17747: LD_INT 0
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: EMPTY
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: ST_TO_ADDR
// if not x or not y then
17761: LD_VAR 0 2
17765: NOT
17766: IFTRUE 17775
17768: PUSH
17769: LD_VAR 0 3
17773: NOT
17774: OR
17775: IFFALSE 17779
// exit ;
17777: GO 19435
// if not range then
17779: LD_VAR 0 4
17783: NOT
17784: IFFALSE 17794
// range := 10 ;
17786: LD_ADDR_VAR 0 4
17790: PUSH
17791: LD_INT 10
17793: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17794: LD_ADDR_VAR 0 8
17798: PUSH
17799: LD_INT 81
17801: PUSH
17802: LD_VAR 0 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 92
17813: PUSH
17814: LD_VAR 0 2
17818: PUSH
17819: LD_VAR 0 3
17823: PUSH
17824: LD_VAR 0 4
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 3
17837: PUSH
17838: LD_INT 21
17840: PUSH
17841: LD_INT 3
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: PPUSH
17857: CALL_OW 69
17861: ST_TO_ADDR
// if not tmp then
17862: LD_VAR 0 8
17866: NOT
17867: IFFALSE 17871
// exit ;
17869: GO 19435
// for i in tmp do
17871: LD_ADDR_VAR 0 6
17875: PUSH
17876: LD_VAR 0 8
17880: PUSH
17881: FOR_IN
17882: IFFALSE 19410
// begin points := [ 0 , 0 , 0 ] ;
17884: LD_ADDR_VAR 0 9
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: LD_INT 0
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: ST_TO_ADDR
// bpoints := 1 ;
17903: LD_ADDR_VAR 0 10
17907: PUSH
17908: LD_INT 1
17910: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17911: LD_VAR 0 6
17915: PPUSH
17916: CALL_OW 247
17920: PUSH
17921: LD_INT 1
17923: DOUBLE
17924: EQUAL
17925: IFTRUE 17929
17927: GO 18511
17929: POP
// begin if GetClass ( i ) = 1 then
17930: LD_VAR 0 6
17934: PPUSH
17935: CALL_OW 257
17939: PUSH
17940: LD_INT 1
17942: EQUAL
17943: IFFALSE 17964
// points := [ 10 , 5 , 3 ] ;
17945: LD_ADDR_VAR 0 9
17949: PUSH
17950: LD_INT 10
17952: PUSH
17953: LD_INT 5
17955: PUSH
17956: LD_INT 3
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17964: LD_VAR 0 6
17968: PPUSH
17969: CALL_OW 257
17973: PUSH
17974: LD_INT 2
17976: PUSH
17977: LD_INT 3
17979: PUSH
17980: LD_INT 4
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: LIST
17987: IN
17988: IFFALSE 18009
// points := [ 3 , 2 , 1 ] ;
17990: LD_ADDR_VAR 0 9
17994: PUSH
17995: LD_INT 3
17997: PUSH
17998: LD_INT 2
18000: PUSH
18001: LD_INT 1
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18009: LD_VAR 0 6
18013: PPUSH
18014: CALL_OW 257
18018: PUSH
18019: LD_INT 5
18021: EQUAL
18022: IFFALSE 18043
// points := [ 130 , 5 , 2 ] ;
18024: LD_ADDR_VAR 0 9
18028: PUSH
18029: LD_INT 130
18031: PUSH
18032: LD_INT 5
18034: PUSH
18035: LD_INT 2
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: LIST
18042: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18043: LD_VAR 0 6
18047: PPUSH
18048: CALL_OW 257
18052: PUSH
18053: LD_INT 8
18055: EQUAL
18056: IFFALSE 18077
// points := [ 35 , 35 , 30 ] ;
18058: LD_ADDR_VAR 0 9
18062: PUSH
18063: LD_INT 35
18065: PUSH
18066: LD_INT 35
18068: PUSH
18069: LD_INT 30
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: LIST
18076: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18077: LD_VAR 0 6
18081: PPUSH
18082: CALL_OW 257
18086: PUSH
18087: LD_INT 9
18089: EQUAL
18090: IFFALSE 18111
// points := [ 20 , 55 , 40 ] ;
18092: LD_ADDR_VAR 0 9
18096: PUSH
18097: LD_INT 20
18099: PUSH
18100: LD_INT 55
18102: PUSH
18103: LD_INT 40
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: LIST
18110: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18111: LD_VAR 0 6
18115: PPUSH
18116: CALL_OW 257
18120: PUSH
18121: LD_INT 12
18123: PUSH
18124: LD_INT 16
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: IN
18131: IFFALSE 18152
// points := [ 5 , 3 , 2 ] ;
18133: LD_ADDR_VAR 0 9
18137: PUSH
18138: LD_INT 5
18140: PUSH
18141: LD_INT 3
18143: PUSH
18144: LD_INT 2
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: LIST
18151: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18152: LD_VAR 0 6
18156: PPUSH
18157: CALL_OW 257
18161: PUSH
18162: LD_INT 17
18164: EQUAL
18165: IFFALSE 18186
// points := [ 100 , 50 , 75 ] ;
18167: LD_ADDR_VAR 0 9
18171: PUSH
18172: LD_INT 100
18174: PUSH
18175: LD_INT 50
18177: PUSH
18178: LD_INT 75
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: LIST
18185: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18186: LD_VAR 0 6
18190: PPUSH
18191: CALL_OW 257
18195: PUSH
18196: LD_INT 15
18198: EQUAL
18199: IFFALSE 18220
// points := [ 10 , 5 , 3 ] ;
18201: LD_ADDR_VAR 0 9
18205: PUSH
18206: LD_INT 10
18208: PUSH
18209: LD_INT 5
18211: PUSH
18212: LD_INT 3
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: LIST
18219: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18220: LD_VAR 0 6
18224: PPUSH
18225: CALL_OW 257
18229: PUSH
18230: LD_INT 14
18232: EQUAL
18233: IFFALSE 18254
// points := [ 10 , 0 , 0 ] ;
18235: LD_ADDR_VAR 0 9
18239: PUSH
18240: LD_INT 10
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18254: LD_VAR 0 6
18258: PPUSH
18259: CALL_OW 257
18263: PUSH
18264: LD_INT 11
18266: EQUAL
18267: IFFALSE 18288
// points := [ 30 , 10 , 5 ] ;
18269: LD_ADDR_VAR 0 9
18273: PUSH
18274: LD_INT 30
18276: PUSH
18277: LD_INT 10
18279: PUSH
18280: LD_INT 5
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18288: LD_VAR 0 1
18292: PPUSH
18293: LD_INT 5
18295: PPUSH
18296: CALL_OW 321
18300: PUSH
18301: LD_INT 2
18303: EQUAL
18304: IFFALSE 18321
// bpoints := bpoints * 1.8 ;
18306: LD_ADDR_VAR 0 10
18310: PUSH
18311: LD_VAR 0 10
18315: PUSH
18316: LD_REAL  1.80000000000000E+0000
18319: MUL
18320: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18321: LD_VAR 0 6
18325: PPUSH
18326: CALL_OW 257
18330: PUSH
18331: LD_INT 1
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: LD_INT 3
18339: PUSH
18340: LD_INT 4
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: IN
18349: IFFALSE 18369
18351: PUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: LD_INT 51
18359: PPUSH
18360: CALL_OW 321
18364: PUSH
18365: LD_INT 2
18367: EQUAL
18368: AND
18369: IFFALSE 18386
// bpoints := bpoints * 1.2 ;
18371: LD_ADDR_VAR 0 10
18375: PUSH
18376: LD_VAR 0 10
18380: PUSH
18381: LD_REAL  1.20000000000000E+0000
18384: MUL
18385: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18386: LD_VAR 0 6
18390: PPUSH
18391: CALL_OW 257
18395: PUSH
18396: LD_INT 5
18398: PUSH
18399: LD_INT 7
18401: PUSH
18402: LD_INT 9
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: IN
18410: IFFALSE 18430
18412: PUSH
18413: LD_VAR 0 1
18417: PPUSH
18418: LD_INT 52
18420: PPUSH
18421: CALL_OW 321
18425: PUSH
18426: LD_INT 2
18428: EQUAL
18429: AND
18430: IFFALSE 18447
// bpoints := bpoints * 1.5 ;
18432: LD_ADDR_VAR 0 10
18436: PUSH
18437: LD_VAR 0 10
18441: PUSH
18442: LD_REAL  1.50000000000000E+0000
18445: MUL
18446: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18447: LD_VAR 0 1
18451: PPUSH
18452: LD_INT 66
18454: PPUSH
18455: CALL_OW 321
18459: PUSH
18460: LD_INT 2
18462: EQUAL
18463: IFFALSE 18480
// bpoints := bpoints * 1.1 ;
18465: LD_ADDR_VAR 0 10
18469: PUSH
18470: LD_VAR 0 10
18474: PUSH
18475: LD_REAL  1.10000000000000E+0000
18478: MUL
18479: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18480: LD_ADDR_VAR 0 10
18484: PUSH
18485: LD_VAR 0 10
18489: PUSH
18490: LD_VAR 0 6
18494: PPUSH
18495: LD_INT 1
18497: PPUSH
18498: CALL_OW 259
18502: PUSH
18503: LD_REAL  1.15000000000000E+0000
18506: MUL
18507: MUL
18508: ST_TO_ADDR
// end ; unit_vehicle :
18509: GO 19339
18511: LD_INT 2
18513: DOUBLE
18514: EQUAL
18515: IFTRUE 18519
18517: GO 19327
18519: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18520: LD_VAR 0 6
18524: PPUSH
18525: CALL_OW 264
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: LD_INT 42
18535: PUSH
18536: LD_INT 24
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: LIST
18543: IN
18544: IFFALSE 18565
// points := [ 25 , 5 , 3 ] ;
18546: LD_ADDR_VAR 0 9
18550: PUSH
18551: LD_INT 25
18553: PUSH
18554: LD_INT 5
18556: PUSH
18557: LD_INT 3
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18565: LD_VAR 0 6
18569: PPUSH
18570: CALL_OW 264
18574: PUSH
18575: LD_INT 4
18577: PUSH
18578: LD_INT 43
18580: PUSH
18581: LD_INT 25
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: IN
18589: IFFALSE 18610
// points := [ 40 , 15 , 5 ] ;
18591: LD_ADDR_VAR 0 9
18595: PUSH
18596: LD_INT 40
18598: PUSH
18599: LD_INT 15
18601: PUSH
18602: LD_INT 5
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18610: LD_VAR 0 6
18614: PPUSH
18615: CALL_OW 264
18619: PUSH
18620: LD_INT 3
18622: PUSH
18623: LD_INT 23
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: IN
18630: IFFALSE 18651
// points := [ 7 , 25 , 8 ] ;
18632: LD_ADDR_VAR 0 9
18636: PUSH
18637: LD_INT 7
18639: PUSH
18640: LD_INT 25
18642: PUSH
18643: LD_INT 8
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: LIST
18650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18651: LD_VAR 0 6
18655: PPUSH
18656: CALL_OW 264
18660: PUSH
18661: LD_INT 5
18663: PUSH
18664: LD_INT 27
18666: PUSH
18667: LD_INT 44
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: LIST
18674: IN
18675: IFFALSE 18696
// points := [ 14 , 50 , 16 ] ;
18677: LD_ADDR_VAR 0 9
18681: PUSH
18682: LD_INT 14
18684: PUSH
18685: LD_INT 50
18687: PUSH
18688: LD_INT 16
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: LIST
18695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18696: LD_VAR 0 6
18700: PPUSH
18701: CALL_OW 264
18705: PUSH
18706: LD_INT 6
18708: PUSH
18709: LD_INT 46
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: IN
18716: IFFALSE 18737
// points := [ 32 , 120 , 70 ] ;
18718: LD_ADDR_VAR 0 9
18722: PUSH
18723: LD_INT 32
18725: PUSH
18726: LD_INT 120
18728: PUSH
18729: LD_INT 70
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18737: LD_VAR 0 6
18741: PPUSH
18742: CALL_OW 264
18746: PUSH
18747: LD_INT 7
18749: PUSH
18750: LD_INT 28
18752: PUSH
18753: LD_INT 45
18755: PUSH
18756: LD_INT 92
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: IN
18765: IFFALSE 18786
// points := [ 35 , 20 , 45 ] ;
18767: LD_ADDR_VAR 0 9
18771: PUSH
18772: LD_INT 35
18774: PUSH
18775: LD_INT 20
18777: PUSH
18778: LD_INT 45
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: LIST
18785: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18786: LD_VAR 0 6
18790: PPUSH
18791: CALL_OW 264
18795: PUSH
18796: LD_INT 47
18798: PUSH
18799: EMPTY
18800: LIST
18801: IN
18802: IFFALSE 18823
// points := [ 67 , 45 , 75 ] ;
18804: LD_ADDR_VAR 0 9
18808: PUSH
18809: LD_INT 67
18811: PUSH
18812: LD_INT 45
18814: PUSH
18815: LD_INT 75
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18823: LD_VAR 0 6
18827: PPUSH
18828: CALL_OW 264
18832: PUSH
18833: LD_INT 26
18835: PUSH
18836: EMPTY
18837: LIST
18838: IN
18839: IFFALSE 18860
// points := [ 120 , 30 , 80 ] ;
18841: LD_ADDR_VAR 0 9
18845: PUSH
18846: LD_INT 120
18848: PUSH
18849: LD_INT 30
18851: PUSH
18852: LD_INT 80
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18860: LD_VAR 0 6
18864: PPUSH
18865: CALL_OW 264
18869: PUSH
18870: LD_INT 22
18872: PUSH
18873: EMPTY
18874: LIST
18875: IN
18876: IFFALSE 18897
// points := [ 40 , 1 , 1 ] ;
18878: LD_ADDR_VAR 0 9
18882: PUSH
18883: LD_INT 40
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18897: LD_VAR 0 6
18901: PPUSH
18902: CALL_OW 264
18906: PUSH
18907: LD_INT 29
18909: PUSH
18910: EMPTY
18911: LIST
18912: IN
18913: IFFALSE 18934
// points := [ 70 , 200 , 400 ] ;
18915: LD_ADDR_VAR 0 9
18919: PUSH
18920: LD_INT 70
18922: PUSH
18923: LD_INT 200
18925: PUSH
18926: LD_INT 400
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18934: LD_VAR 0 6
18938: PPUSH
18939: CALL_OW 264
18943: PUSH
18944: LD_INT 14
18946: PUSH
18947: LD_INT 53
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: IN
18954: IFFALSE 18975
// points := [ 40 , 10 , 20 ] ;
18956: LD_ADDR_VAR 0 9
18960: PUSH
18961: LD_INT 40
18963: PUSH
18964: LD_INT 10
18966: PUSH
18967: LD_INT 20
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: LIST
18974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18975: LD_VAR 0 6
18979: PPUSH
18980: CALL_OW 264
18984: PUSH
18985: LD_INT 9
18987: PUSH
18988: EMPTY
18989: LIST
18990: IN
18991: IFFALSE 19012
// points := [ 5 , 70 , 20 ] ;
18993: LD_ADDR_VAR 0 9
18997: PUSH
18998: LD_INT 5
19000: PUSH
19001: LD_INT 70
19003: PUSH
19004: LD_INT 20
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: LIST
19011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19012: LD_VAR 0 6
19016: PPUSH
19017: CALL_OW 264
19021: PUSH
19022: LD_INT 10
19024: PUSH
19025: EMPTY
19026: LIST
19027: IN
19028: IFFALSE 19049
// points := [ 35 , 110 , 70 ] ;
19030: LD_ADDR_VAR 0 9
19034: PUSH
19035: LD_INT 35
19037: PUSH
19038: LD_INT 110
19040: PUSH
19041: LD_INT 70
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: LIST
19048: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19049: LD_VAR 0 6
19053: PPUSH
19054: CALL_OW 265
19058: PUSH
19059: LD_INT 25
19061: EQUAL
19062: IFFALSE 19083
// points := [ 80 , 65 , 100 ] ;
19064: LD_ADDR_VAR 0 9
19068: PUSH
19069: LD_INT 80
19071: PUSH
19072: LD_INT 65
19074: PUSH
19075: LD_INT 100
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19083: LD_VAR 0 6
19087: PPUSH
19088: CALL_OW 263
19092: PUSH
19093: LD_INT 1
19095: EQUAL
19096: IFFALSE 19131
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19098: LD_ADDR_VAR 0 10
19102: PUSH
19103: LD_VAR 0 10
19107: PUSH
19108: LD_VAR 0 6
19112: PPUSH
19113: CALL_OW 311
19117: PPUSH
19118: LD_INT 3
19120: PPUSH
19121: CALL_OW 259
19125: PUSH
19126: LD_INT 4
19128: MUL
19129: MUL
19130: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19131: LD_VAR 0 6
19135: PPUSH
19136: CALL_OW 263
19140: PUSH
19141: LD_INT 2
19143: EQUAL
19144: IFFALSE 19195
// begin j := IsControledBy ( i ) ;
19146: LD_ADDR_VAR 0 7
19150: PUSH
19151: LD_VAR 0 6
19155: PPUSH
19156: CALL_OW 312
19160: ST_TO_ADDR
// if j then
19161: LD_VAR 0 7
19165: IFFALSE 19195
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19167: LD_ADDR_VAR 0 10
19171: PUSH
19172: LD_VAR 0 10
19176: PUSH
19177: LD_VAR 0 7
19181: PPUSH
19182: LD_INT 3
19184: PPUSH
19185: CALL_OW 259
19189: PUSH
19190: LD_INT 3
19192: MUL
19193: MUL
19194: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19195: LD_VAR 0 6
19199: PPUSH
19200: CALL_OW 264
19204: PUSH
19205: LD_INT 5
19207: PUSH
19208: LD_INT 6
19210: PUSH
19211: LD_INT 46
19213: PUSH
19214: LD_INT 44
19216: PUSH
19217: LD_INT 47
19219: PUSH
19220: LD_INT 45
19222: PUSH
19223: LD_INT 28
19225: PUSH
19226: LD_INT 7
19228: PUSH
19229: LD_INT 27
19231: PUSH
19232: LD_INT 29
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: IN
19247: IFFALSE 19267
19249: PUSH
19250: LD_VAR 0 1
19254: PPUSH
19255: LD_INT 52
19257: PPUSH
19258: CALL_OW 321
19262: PUSH
19263: LD_INT 2
19265: EQUAL
19266: AND
19267: IFFALSE 19284
// bpoints := bpoints * 1.2 ;
19269: LD_ADDR_VAR 0 10
19273: PUSH
19274: LD_VAR 0 10
19278: PUSH
19279: LD_REAL  1.20000000000000E+0000
19282: MUL
19283: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19284: LD_VAR 0 6
19288: PPUSH
19289: CALL_OW 264
19293: PUSH
19294: LD_INT 6
19296: PUSH
19297: LD_INT 46
19299: PUSH
19300: LD_INT 47
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: LIST
19307: IN
19308: IFFALSE 19325
// bpoints := bpoints * 1.2 ;
19310: LD_ADDR_VAR 0 10
19314: PUSH
19315: LD_VAR 0 10
19319: PUSH
19320: LD_REAL  1.20000000000000E+0000
19323: MUL
19324: ST_TO_ADDR
// end ; unit_building :
19325: GO 19339
19327: LD_INT 3
19329: DOUBLE
19330: EQUAL
19331: IFTRUE 19335
19333: GO 19338
19335: POP
// ; end ;
19336: GO 19339
19338: POP
// for j = 1 to 3 do
19339: LD_ADDR_VAR 0 7
19343: PUSH
19344: DOUBLE
19345: LD_INT 1
19347: DEC
19348: ST_TO_ADDR
19349: LD_INT 3
19351: PUSH
19352: FOR_TO
19353: IFFALSE 19406
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19355: LD_ADDR_VAR 0 5
19359: PUSH
19360: LD_VAR 0 5
19364: PPUSH
19365: LD_VAR 0 7
19369: PPUSH
19370: LD_VAR 0 5
19374: PUSH
19375: LD_VAR 0 7
19379: ARRAY
19380: PUSH
19381: LD_VAR 0 9
19385: PUSH
19386: LD_VAR 0 7
19390: ARRAY
19391: PUSH
19392: LD_VAR 0 10
19396: MUL
19397: PLUS
19398: PPUSH
19399: CALL_OW 1
19403: ST_TO_ADDR
19404: GO 19352
19406: POP
19407: POP
// end ;
19408: GO 17881
19410: POP
19411: POP
// result := Replace ( result , 4 , tmp ) ;
19412: LD_ADDR_VAR 0 5
19416: PUSH
19417: LD_VAR 0 5
19421: PPUSH
19422: LD_INT 4
19424: PPUSH
19425: LD_VAR 0 8
19429: PPUSH
19430: CALL_OW 1
19434: ST_TO_ADDR
// end ;
19435: LD_VAR 0 5
19439: RET
// export function DangerAtRange ( unit , range ) ; begin
19440: LD_INT 0
19442: PPUSH
// if not unit then
19443: LD_VAR 0 1
19447: NOT
19448: IFFALSE 19452
// exit ;
19450: GO 19497
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19452: LD_ADDR_VAR 0 3
19456: PUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: CALL_OW 255
19466: PPUSH
19467: LD_VAR 0 1
19471: PPUSH
19472: CALL_OW 250
19476: PPUSH
19477: LD_VAR 0 1
19481: PPUSH
19482: CALL_OW 251
19486: PPUSH
19487: LD_VAR 0 2
19491: PPUSH
19492: CALL 17731 0 4
19496: ST_TO_ADDR
// end ;
19497: LD_VAR 0 3
19501: RET
// export function DangerInArea ( side , area ) ; begin
19502: LD_INT 0
19504: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19505: LD_ADDR_VAR 0 3
19509: PUSH
19510: LD_VAR 0 2
19514: PPUSH
19515: LD_INT 81
19517: PUSH
19518: LD_VAR 0 1
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 70
19531: ST_TO_ADDR
// end ;
19532: LD_VAR 0 3
19536: RET
// export function IsExtension ( b ) ; begin
19537: LD_INT 0
19539: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19540: LD_ADDR_VAR 0 2
19544: PUSH
19545: LD_VAR 0 1
19549: PUSH
19550: LD_INT 23
19552: PUSH
19553: LD_INT 20
19555: PUSH
19556: LD_INT 22
19558: PUSH
19559: LD_INT 17
19561: PUSH
19562: LD_INT 24
19564: PUSH
19565: LD_INT 21
19567: PUSH
19568: LD_INT 19
19570: PUSH
19571: LD_INT 16
19573: PUSH
19574: LD_INT 25
19576: PUSH
19577: LD_INT 18
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: IN
19592: ST_TO_ADDR
// end ;
19593: LD_VAR 0 2
19597: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19598: LD_INT 0
19600: PPUSH
19601: PPUSH
19602: PPUSH
// result := [ ] ;
19603: LD_ADDR_VAR 0 4
19607: PUSH
19608: EMPTY
19609: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19610: LD_ADDR_VAR 0 5
19614: PUSH
19615: LD_VAR 0 2
19619: PPUSH
19620: LD_INT 21
19622: PUSH
19623: LD_INT 3
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PPUSH
19630: CALL_OW 70
19634: ST_TO_ADDR
// if not tmp then
19635: LD_VAR 0 5
19639: NOT
19640: IFFALSE 19644
// exit ;
19642: GO 19708
// if checkLink then
19644: LD_VAR 0 3
19648: IFFALSE 19698
// begin for i in tmp do
19650: LD_ADDR_VAR 0 6
19654: PUSH
19655: LD_VAR 0 5
19659: PUSH
19660: FOR_IN
19661: IFFALSE 19696
// if GetBase ( i ) <> base then
19663: LD_VAR 0 6
19667: PPUSH
19668: CALL_OW 274
19672: PUSH
19673: LD_VAR 0 1
19677: NONEQUAL
19678: IFFALSE 19694
// ComLinkToBase ( base , i ) ;
19680: LD_VAR 0 1
19684: PPUSH
19685: LD_VAR 0 6
19689: PPUSH
19690: CALL_OW 169
19694: GO 19660
19696: POP
19697: POP
// end ; result := tmp ;
19698: LD_ADDR_VAR 0 4
19702: PUSH
19703: LD_VAR 0 5
19707: ST_TO_ADDR
// end ;
19708: LD_VAR 0 4
19712: RET
// export function ComComplete ( units , b ) ; var i ; begin
19713: LD_INT 0
19715: PPUSH
19716: PPUSH
// if not units then
19717: LD_VAR 0 1
19721: NOT
19722: IFFALSE 19726
// exit ;
19724: GO 19816
// for i in units do
19726: LD_ADDR_VAR 0 4
19730: PUSH
19731: LD_VAR 0 1
19735: PUSH
19736: FOR_IN
19737: IFFALSE 19814
// if BuildingStatus ( b ) = bs_build then
19739: LD_VAR 0 2
19743: PPUSH
19744: CALL_OW 461
19748: PUSH
19749: LD_INT 1
19751: EQUAL
19752: IFFALSE 19812
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19754: LD_VAR 0 4
19758: PPUSH
19759: LD_STRING h
19761: PUSH
19762: LD_VAR 0 2
19766: PPUSH
19767: CALL_OW 250
19771: PUSH
19772: LD_VAR 0 2
19776: PPUSH
19777: CALL_OW 251
19781: PUSH
19782: LD_VAR 0 2
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: LD_INT 0
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: PUSH
19805: EMPTY
19806: LIST
19807: PPUSH
19808: CALL_OW 446
19812: GO 19736
19814: POP
19815: POP
// end ;
19816: LD_VAR 0 3
19820: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19821: LD_INT 0
19823: PPUSH
19824: PPUSH
19825: PPUSH
19826: PPUSH
19827: PPUSH
19828: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19829: LD_VAR 0 1
19833: NOT
19834: IFTRUE 19851
19836: PUSH
19837: LD_VAR 0 1
19841: PPUSH
19842: CALL_OW 263
19846: PUSH
19847: LD_INT 2
19849: NONEQUAL
19850: OR
19851: IFFALSE 19855
// exit ;
19853: GO 20171
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19855: LD_ADDR_VAR 0 6
19859: PUSH
19860: LD_INT 22
19862: PUSH
19863: LD_VAR 0 1
19867: PPUSH
19868: CALL_OW 255
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 30
19882: PUSH
19883: LD_INT 36
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 34
19892: PUSH
19893: LD_INT 31
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PPUSH
19909: CALL_OW 69
19913: ST_TO_ADDR
// if not tmp then
19914: LD_VAR 0 6
19918: NOT
19919: IFFALSE 19923
// exit ;
19921: GO 20171
// result := [ ] ;
19923: LD_ADDR_VAR 0 2
19927: PUSH
19928: EMPTY
19929: ST_TO_ADDR
// for i in tmp do
19930: LD_ADDR_VAR 0 3
19934: PUSH
19935: LD_VAR 0 6
19939: PUSH
19940: FOR_IN
19941: IFFALSE 20012
// begin t := UnitsInside ( i ) ;
19943: LD_ADDR_VAR 0 4
19947: PUSH
19948: LD_VAR 0 3
19952: PPUSH
19953: CALL_OW 313
19957: ST_TO_ADDR
// if t then
19958: LD_VAR 0 4
19962: IFFALSE 20010
// for j in t do
19964: LD_ADDR_VAR 0 7
19968: PUSH
19969: LD_VAR 0 4
19973: PUSH
19974: FOR_IN
19975: IFFALSE 20008
// result := Replace ( result , result + 1 , j ) ;
19977: LD_ADDR_VAR 0 2
19981: PUSH
19982: LD_VAR 0 2
19986: PPUSH
19987: LD_VAR 0 2
19991: PUSH
19992: LD_INT 1
19994: PLUS
19995: PPUSH
19996: LD_VAR 0 7
20000: PPUSH
20001: CALL_OW 1
20005: ST_TO_ADDR
20006: GO 19974
20008: POP
20009: POP
// end ;
20010: GO 19940
20012: POP
20013: POP
// if not result then
20014: LD_VAR 0 2
20018: NOT
20019: IFFALSE 20023
// exit ;
20021: GO 20171
// mech := result [ 1 ] ;
20023: LD_ADDR_VAR 0 5
20027: PUSH
20028: LD_VAR 0 2
20032: PUSH
20033: LD_INT 1
20035: ARRAY
20036: ST_TO_ADDR
// if result > 1 then
20037: LD_VAR 0 2
20041: PUSH
20042: LD_INT 1
20044: GREATER
20045: IFFALSE 20157
// begin for i = 2 to result do
20047: LD_ADDR_VAR 0 3
20051: PUSH
20052: DOUBLE
20053: LD_INT 2
20055: DEC
20056: ST_TO_ADDR
20057: LD_VAR 0 2
20061: PUSH
20062: FOR_TO
20063: IFFALSE 20155
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20065: LD_ADDR_VAR 0 4
20069: PUSH
20070: LD_VAR 0 2
20074: PUSH
20075: LD_VAR 0 3
20079: ARRAY
20080: PPUSH
20081: LD_INT 3
20083: PPUSH
20084: CALL_OW 259
20088: PUSH
20089: LD_VAR 0 2
20093: PUSH
20094: LD_VAR 0 3
20098: ARRAY
20099: PPUSH
20100: CALL_OW 432
20104: MINUS
20105: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20106: LD_VAR 0 4
20110: PUSH
20111: LD_VAR 0 5
20115: PPUSH
20116: LD_INT 3
20118: PPUSH
20119: CALL_OW 259
20123: PUSH
20124: LD_VAR 0 5
20128: PPUSH
20129: CALL_OW 432
20133: MINUS
20134: GREATEREQUAL
20135: IFFALSE 20153
// mech := result [ i ] ;
20137: LD_ADDR_VAR 0 5
20141: PUSH
20142: LD_VAR 0 2
20146: PUSH
20147: LD_VAR 0 3
20151: ARRAY
20152: ST_TO_ADDR
// end ;
20153: GO 20062
20155: POP
20156: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20157: LD_VAR 0 1
20161: PPUSH
20162: LD_VAR 0 5
20166: PPUSH
20167: CALL_OW 135
// end ;
20171: LD_VAR 0 2
20175: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20176: LD_INT 0
20178: PPUSH
20179: PPUSH
20180: PPUSH
20181: PPUSH
20182: PPUSH
20183: PPUSH
20184: PPUSH
20185: PPUSH
20186: PPUSH
20187: PPUSH
20188: PPUSH
20189: PPUSH
20190: PPUSH
// result := [ ] ;
20191: LD_ADDR_VAR 0 7
20195: PUSH
20196: EMPTY
20197: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 266
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: IN
20218: NOT
20219: IFFALSE 20223
// exit ;
20221: GO 21863
// if name then
20223: LD_VAR 0 3
20227: IFFALSE 20243
// SetBName ( base_dep , name ) ;
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_VAR 0 3
20238: PPUSH
20239: CALL_OW 500
// base := GetBase ( base_dep ) ;
20243: LD_ADDR_VAR 0 15
20247: PUSH
20248: LD_VAR 0 1
20252: PPUSH
20253: CALL_OW 274
20257: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20258: LD_ADDR_VAR 0 16
20262: PUSH
20263: LD_VAR 0 1
20267: PPUSH
20268: CALL_OW 255
20272: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20273: LD_ADDR_VAR 0 17
20277: PUSH
20278: LD_VAR 0 1
20282: PPUSH
20283: CALL_OW 248
20287: ST_TO_ADDR
// if sources then
20288: LD_VAR 0 5
20292: IFFALSE 20339
// for i = 1 to 3 do
20294: LD_ADDR_VAR 0 8
20298: PUSH
20299: DOUBLE
20300: LD_INT 1
20302: DEC
20303: ST_TO_ADDR
20304: LD_INT 3
20306: PUSH
20307: FOR_TO
20308: IFFALSE 20337
// AddResourceType ( base , i , sources [ i ] ) ;
20310: LD_VAR 0 15
20314: PPUSH
20315: LD_VAR 0 8
20319: PPUSH
20320: LD_VAR 0 5
20324: PUSH
20325: LD_VAR 0 8
20329: ARRAY
20330: PPUSH
20331: CALL_OW 276
20335: GO 20307
20337: POP
20338: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20339: LD_ADDR_VAR 0 18
20343: PUSH
20344: LD_VAR 0 15
20348: PPUSH
20349: LD_VAR 0 2
20353: PPUSH
20354: LD_INT 1
20356: PPUSH
20357: CALL 19598 0 3
20361: ST_TO_ADDR
// InitHc ;
20362: CALL_OW 19
// InitUc ;
20366: CALL_OW 18
// uc_side := side ;
20370: LD_ADDR_OWVAR 20
20374: PUSH
20375: LD_VAR 0 16
20379: ST_TO_ADDR
// uc_nation := nation ;
20380: LD_ADDR_OWVAR 21
20384: PUSH
20385: LD_VAR 0 17
20389: ST_TO_ADDR
// if buildings then
20390: LD_VAR 0 18
20394: IFFALSE 21722
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20396: LD_ADDR_VAR 0 19
20400: PUSH
20401: LD_VAR 0 18
20405: PPUSH
20406: LD_INT 2
20408: PUSH
20409: LD_INT 30
20411: PUSH
20412: LD_INT 29
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 30
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: LIST
20433: PPUSH
20434: CALL_OW 72
20438: ST_TO_ADDR
// if tmp then
20439: LD_VAR 0 19
20443: IFFALSE 20491
// for i in tmp do
20445: LD_ADDR_VAR 0 8
20449: PUSH
20450: LD_VAR 0 19
20454: PUSH
20455: FOR_IN
20456: IFFALSE 20489
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20458: LD_VAR 0 8
20462: PPUSH
20463: CALL_OW 250
20467: PPUSH
20468: LD_VAR 0 8
20472: PPUSH
20473: CALL_OW 251
20477: PPUSH
20478: LD_VAR 0 16
20482: PPUSH
20483: CALL_OW 441
20487: GO 20455
20489: POP
20490: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20491: LD_VAR 0 18
20495: PPUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 30
20501: PUSH
20502: LD_INT 32
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 30
20511: PUSH
20512: LD_INT 33
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: PPUSH
20524: CALL_OW 72
20528: IFFALSE 20616
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20530: LD_ADDR_VAR 0 8
20534: PUSH
20535: LD_VAR 0 18
20539: PPUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 30
20545: PUSH
20546: LD_INT 32
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 30
20555: PUSH
20556: LD_INT 33
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: LIST
20567: PPUSH
20568: CALL_OW 72
20572: PUSH
20573: FOR_IN
20574: IFFALSE 20614
// begin if not GetBWeapon ( i ) then
20576: LD_VAR 0 8
20580: PPUSH
20581: CALL_OW 269
20585: NOT
20586: IFFALSE 20612
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20588: LD_VAR 0 8
20592: PPUSH
20593: LD_VAR 0 8
20597: PPUSH
20598: LD_VAR 0 2
20602: PPUSH
20603: CALL 21868 0 2
20607: PPUSH
20608: CALL_OW 431
// end ;
20612: GO 20573
20614: POP
20615: POP
// end ; for i = 1 to personel do
20616: LD_ADDR_VAR 0 8
20620: PUSH
20621: DOUBLE
20622: LD_INT 1
20624: DEC
20625: ST_TO_ADDR
20626: LD_VAR 0 6
20630: PUSH
20631: FOR_TO
20632: IFFALSE 21702
// begin if i > 4 then
20634: LD_VAR 0 8
20638: PUSH
20639: LD_INT 4
20641: GREATER
20642: IFFALSE 20646
// break ;
20644: GO 21702
// case i of 1 :
20646: LD_VAR 0 8
20650: PUSH
20651: LD_INT 1
20653: DOUBLE
20654: EQUAL
20655: IFTRUE 20659
20657: GO 20739
20659: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20660: LD_ADDR_VAR 0 12
20664: PUSH
20665: LD_VAR 0 18
20669: PPUSH
20670: LD_INT 22
20672: PUSH
20673: LD_VAR 0 16
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 58
20684: PUSH
20685: EMPTY
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: LD_INT 30
20693: PUSH
20694: LD_INT 32
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 30
20703: PUSH
20704: LD_INT 4
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 30
20713: PUSH
20714: LD_INT 5
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: LIST
20731: PPUSH
20732: CALL_OW 72
20736: ST_TO_ADDR
20737: GO 20961
20739: LD_INT 2
20741: DOUBLE
20742: EQUAL
20743: IFTRUE 20747
20745: GO 20809
20747: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20748: LD_ADDR_VAR 0 12
20752: PUSH
20753: LD_VAR 0 18
20757: PPUSH
20758: LD_INT 22
20760: PUSH
20761: LD_VAR 0 16
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: LD_INT 30
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 30
20785: PUSH
20786: LD_INT 1
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PPUSH
20802: CALL_OW 72
20806: ST_TO_ADDR
20807: GO 20961
20809: LD_INT 3
20811: DOUBLE
20812: EQUAL
20813: IFTRUE 20817
20815: GO 20879
20817: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20818: LD_ADDR_VAR 0 12
20822: PUSH
20823: LD_VAR 0 18
20827: PPUSH
20828: LD_INT 22
20830: PUSH
20831: LD_VAR 0 16
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 2
20842: PUSH
20843: LD_INT 30
20845: PUSH
20846: LD_INT 2
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 30
20855: PUSH
20856: LD_INT 3
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: LIST
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PPUSH
20872: CALL_OW 72
20876: ST_TO_ADDR
20877: GO 20961
20879: LD_INT 4
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20960
20887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20888: LD_ADDR_VAR 0 12
20892: PUSH
20893: LD_VAR 0 18
20897: PPUSH
20898: LD_INT 22
20900: PUSH
20901: LD_VAR 0 16
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 2
20912: PUSH
20913: LD_INT 30
20915: PUSH
20916: LD_INT 6
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 30
20925: PUSH
20926: LD_INT 7
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 30
20935: PUSH
20936: LD_INT 8
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PPUSH
20953: CALL_OW 72
20957: ST_TO_ADDR
20958: GO 20961
20960: POP
// if i = 1 then
20961: LD_VAR 0 8
20965: PUSH
20966: LD_INT 1
20968: EQUAL
20969: IFFALSE 21080
// begin tmp := [ ] ;
20971: LD_ADDR_VAR 0 19
20975: PUSH
20976: EMPTY
20977: ST_TO_ADDR
// for j in f do
20978: LD_ADDR_VAR 0 9
20982: PUSH
20983: LD_VAR 0 12
20987: PUSH
20988: FOR_IN
20989: IFFALSE 21062
// if GetBType ( j ) = b_bunker then
20991: LD_VAR 0 9
20995: PPUSH
20996: CALL_OW 266
21000: PUSH
21001: LD_INT 32
21003: EQUAL
21004: IFFALSE 21031
// tmp := Insert ( tmp , 1 , j ) else
21006: LD_ADDR_VAR 0 19
21010: PUSH
21011: LD_VAR 0 19
21015: PPUSH
21016: LD_INT 1
21018: PPUSH
21019: LD_VAR 0 9
21023: PPUSH
21024: CALL_OW 2
21028: ST_TO_ADDR
21029: GO 21060
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21031: LD_ADDR_VAR 0 19
21035: PUSH
21036: LD_VAR 0 19
21040: PPUSH
21041: LD_VAR 0 19
21045: PUSH
21046: LD_INT 1
21048: PLUS
21049: PPUSH
21050: LD_VAR 0 9
21054: PPUSH
21055: CALL_OW 2
21059: ST_TO_ADDR
21060: GO 20988
21062: POP
21063: POP
// if tmp then
21064: LD_VAR 0 19
21068: IFFALSE 21080
// f := tmp ;
21070: LD_ADDR_VAR 0 12
21074: PUSH
21075: LD_VAR 0 19
21079: ST_TO_ADDR
// end ; x := personel [ i ] ;
21080: LD_ADDR_VAR 0 13
21084: PUSH
21085: LD_VAR 0 6
21089: PUSH
21090: LD_VAR 0 8
21094: ARRAY
21095: ST_TO_ADDR
// if x = - 1 then
21096: LD_VAR 0 13
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: EQUAL
21105: IFFALSE 21316
// begin for j in f do
21107: LD_ADDR_VAR 0 9
21111: PUSH
21112: LD_VAR 0 12
21116: PUSH
21117: FOR_IN
21118: IFFALSE 21312
// repeat InitHc ;
21120: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21124: LD_VAR 0 9
21128: PPUSH
21129: CALL_OW 266
21133: PUSH
21134: LD_INT 5
21136: EQUAL
21137: IFFALSE 21207
// begin if UnitsInside ( j ) < 3 then
21139: LD_VAR 0 9
21143: PPUSH
21144: CALL_OW 313
21148: PUSH
21149: LD_INT 3
21151: LESS
21152: IFFALSE 21188
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21154: LD_INT 0
21156: PPUSH
21157: LD_INT 5
21159: PUSH
21160: LD_INT 8
21162: PUSH
21163: LD_INT 9
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: LIST
21170: PUSH
21171: LD_VAR 0 17
21175: ARRAY
21176: PPUSH
21177: LD_VAR 0 4
21181: PPUSH
21182: CALL_OW 380
21186: GO 21205
// PrepareHuman ( false , i , skill ) ;
21188: LD_INT 0
21190: PPUSH
21191: LD_VAR 0 8
21195: PPUSH
21196: LD_VAR 0 4
21200: PPUSH
21201: CALL_OW 380
// end else
21205: GO 21224
// PrepareHuman ( false , i , skill ) ;
21207: LD_INT 0
21209: PPUSH
21210: LD_VAR 0 8
21214: PPUSH
21215: LD_VAR 0 4
21219: PPUSH
21220: CALL_OW 380
// un := CreateHuman ;
21224: LD_ADDR_VAR 0 14
21228: PUSH
21229: CALL_OW 44
21233: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21234: LD_ADDR_VAR 0 7
21238: PUSH
21239: LD_VAR 0 7
21243: PPUSH
21244: LD_INT 1
21246: PPUSH
21247: LD_VAR 0 14
21251: PPUSH
21252: CALL_OW 2
21256: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21257: LD_VAR 0 14
21261: PPUSH
21262: LD_VAR 0 9
21266: PPUSH
21267: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21271: LD_VAR 0 9
21275: PPUSH
21276: CALL_OW 313
21280: PUSH
21281: LD_INT 6
21283: EQUAL
21284: IFTRUE 21308
21286: PUSH
21287: LD_VAR 0 9
21291: PPUSH
21292: CALL_OW 266
21296: PUSH
21297: LD_INT 32
21299: PUSH
21300: LD_INT 31
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: IN
21307: OR
21308: IFFALSE 21120
21310: GO 21117
21312: POP
21313: POP
// end else
21314: GO 21700
// for j = 1 to x do
21316: LD_ADDR_VAR 0 9
21320: PUSH
21321: DOUBLE
21322: LD_INT 1
21324: DEC
21325: ST_TO_ADDR
21326: LD_VAR 0 13
21330: PUSH
21331: FOR_TO
21332: IFFALSE 21698
// begin InitHc ;
21334: CALL_OW 19
// if not f then
21338: LD_VAR 0 12
21342: NOT
21343: IFFALSE 21432
// begin PrepareHuman ( false , i , skill ) ;
21345: LD_INT 0
21347: PPUSH
21348: LD_VAR 0 8
21352: PPUSH
21353: LD_VAR 0 4
21357: PPUSH
21358: CALL_OW 380
// un := CreateHuman ;
21362: LD_ADDR_VAR 0 14
21366: PUSH
21367: CALL_OW 44
21371: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21372: LD_ADDR_VAR 0 7
21376: PUSH
21377: LD_VAR 0 7
21381: PPUSH
21382: LD_INT 1
21384: PPUSH
21385: LD_VAR 0 14
21389: PPUSH
21390: CALL_OW 2
21394: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21395: LD_VAR 0 14
21399: PPUSH
21400: LD_VAR 0 1
21404: PPUSH
21405: CALL_OW 250
21409: PPUSH
21410: LD_VAR 0 1
21414: PPUSH
21415: CALL_OW 251
21419: PPUSH
21420: LD_INT 10
21422: PPUSH
21423: LD_INT 0
21425: PPUSH
21426: CALL_OW 50
// continue ;
21430: GO 21331
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21432: LD_VAR 0 12
21436: PUSH
21437: LD_INT 1
21439: ARRAY
21440: PPUSH
21441: CALL_OW 313
21445: IFFALSE 21473
21447: PUSH
21448: LD_VAR 0 12
21452: PUSH
21453: LD_INT 1
21455: ARRAY
21456: PPUSH
21457: CALL_OW 266
21461: PUSH
21462: LD_INT 32
21464: PUSH
21465: LD_INT 31
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: IN
21472: AND
21473: IFTRUE 21494
21475: PUSH
21476: LD_VAR 0 12
21480: PUSH
21481: LD_INT 1
21483: ARRAY
21484: PPUSH
21485: CALL_OW 313
21489: PUSH
21490: LD_INT 6
21492: EQUAL
21493: OR
21494: IFFALSE 21514
// f := Delete ( f , 1 ) ;
21496: LD_ADDR_VAR 0 12
21500: PUSH
21501: LD_VAR 0 12
21505: PPUSH
21506: LD_INT 1
21508: PPUSH
21509: CALL_OW 3
21513: ST_TO_ADDR
// if not f then
21514: LD_VAR 0 12
21518: NOT
21519: IFFALSE 21537
// begin x := x + 2 ;
21521: LD_ADDR_VAR 0 13
21525: PUSH
21526: LD_VAR 0 13
21530: PUSH
21531: LD_INT 2
21533: PLUS
21534: ST_TO_ADDR
// continue ;
21535: GO 21331
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21537: LD_VAR 0 12
21541: PUSH
21542: LD_INT 1
21544: ARRAY
21545: PPUSH
21546: CALL_OW 266
21550: PUSH
21551: LD_INT 5
21553: EQUAL
21554: IFFALSE 21628
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21556: LD_VAR 0 12
21560: PUSH
21561: LD_INT 1
21563: ARRAY
21564: PPUSH
21565: CALL_OW 313
21569: PUSH
21570: LD_INT 3
21572: LESS
21573: IFFALSE 21609
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21575: LD_INT 0
21577: PPUSH
21578: LD_INT 5
21580: PUSH
21581: LD_INT 8
21583: PUSH
21584: LD_INT 9
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: PUSH
21592: LD_VAR 0 17
21596: ARRAY
21597: PPUSH
21598: LD_VAR 0 4
21602: PPUSH
21603: CALL_OW 380
21607: GO 21626
// PrepareHuman ( false , i , skill ) ;
21609: LD_INT 0
21611: PPUSH
21612: LD_VAR 0 8
21616: PPUSH
21617: LD_VAR 0 4
21621: PPUSH
21622: CALL_OW 380
// end else
21626: GO 21645
// PrepareHuman ( false , i , skill ) ;
21628: LD_INT 0
21630: PPUSH
21631: LD_VAR 0 8
21635: PPUSH
21636: LD_VAR 0 4
21640: PPUSH
21641: CALL_OW 380
// un := CreateHuman ;
21645: LD_ADDR_VAR 0 14
21649: PUSH
21650: CALL_OW 44
21654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21655: LD_ADDR_VAR 0 7
21659: PUSH
21660: LD_VAR 0 7
21664: PPUSH
21665: LD_INT 1
21667: PPUSH
21668: LD_VAR 0 14
21672: PPUSH
21673: CALL_OW 2
21677: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21678: LD_VAR 0 14
21682: PPUSH
21683: LD_VAR 0 12
21687: PUSH
21688: LD_INT 1
21690: ARRAY
21691: PPUSH
21692: CALL_OW 52
// end ;
21696: GO 21331
21698: POP
21699: POP
// end ;
21700: GO 20631
21702: POP
21703: POP
// result := result ^ buildings ;
21704: LD_ADDR_VAR 0 7
21708: PUSH
21709: LD_VAR 0 7
21713: PUSH
21714: LD_VAR 0 18
21718: ADD
21719: ST_TO_ADDR
// end else
21720: GO 21863
// begin for i = 1 to personel do
21722: LD_ADDR_VAR 0 8
21726: PUSH
21727: DOUBLE
21728: LD_INT 1
21730: DEC
21731: ST_TO_ADDR
21732: LD_VAR 0 6
21736: PUSH
21737: FOR_TO
21738: IFFALSE 21861
// begin if i > 4 then
21740: LD_VAR 0 8
21744: PUSH
21745: LD_INT 4
21747: GREATER
21748: IFFALSE 21752
// break ;
21750: GO 21861
// x := personel [ i ] ;
21752: LD_ADDR_VAR 0 13
21756: PUSH
21757: LD_VAR 0 6
21761: PUSH
21762: LD_VAR 0 8
21766: ARRAY
21767: ST_TO_ADDR
// if x = - 1 then
21768: LD_VAR 0 13
21772: PUSH
21773: LD_INT 1
21775: NEG
21776: EQUAL
21777: IFFALSE 21781
// continue ;
21779: GO 21737
// PrepareHuman ( false , i , skill ) ;
21781: LD_INT 0
21783: PPUSH
21784: LD_VAR 0 8
21788: PPUSH
21789: LD_VAR 0 4
21793: PPUSH
21794: CALL_OW 380
// un := CreateHuman ;
21798: LD_ADDR_VAR 0 14
21802: PUSH
21803: CALL_OW 44
21807: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21808: LD_VAR 0 14
21812: PPUSH
21813: LD_VAR 0 1
21817: PPUSH
21818: CALL_OW 250
21822: PPUSH
21823: LD_VAR 0 1
21827: PPUSH
21828: CALL_OW 251
21832: PPUSH
21833: LD_INT 10
21835: PPUSH
21836: LD_INT 0
21838: PPUSH
21839: CALL_OW 50
// result := result ^ un ;
21843: LD_ADDR_VAR 0 7
21847: PUSH
21848: LD_VAR 0 7
21852: PUSH
21853: LD_VAR 0 14
21857: ADD
21858: ST_TO_ADDR
// end ;
21859: GO 21737
21861: POP
21862: POP
// end ; end ;
21863: LD_VAR 0 7
21867: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21868: LD_INT 0
21870: PPUSH
21871: PPUSH
21872: PPUSH
21873: PPUSH
21874: PPUSH
21875: PPUSH
21876: PPUSH
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
21884: PPUSH
21885: PPUSH
// result := false ;
21886: LD_ADDR_VAR 0 3
21890: PUSH
21891: LD_INT 0
21893: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21894: LD_VAR 0 1
21898: NOT
21899: IFTRUE 21924
21901: PUSH
21902: LD_VAR 0 1
21906: PPUSH
21907: CALL_OW 266
21911: PUSH
21912: LD_INT 32
21914: PUSH
21915: LD_INT 33
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: IN
21922: NOT
21923: OR
21924: IFFALSE 21928
// exit ;
21926: GO 23063
// nat := GetNation ( tower ) ;
21928: LD_ADDR_VAR 0 12
21932: PUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 248
21942: ST_TO_ADDR
// side := GetSide ( tower ) ;
21943: LD_ADDR_VAR 0 16
21947: PUSH
21948: LD_VAR 0 1
21952: PPUSH
21953: CALL_OW 255
21957: ST_TO_ADDR
// x := GetX ( tower ) ;
21958: LD_ADDR_VAR 0 10
21962: PUSH
21963: LD_VAR 0 1
21967: PPUSH
21968: CALL_OW 250
21972: ST_TO_ADDR
// y := GetY ( tower ) ;
21973: LD_ADDR_VAR 0 11
21977: PUSH
21978: LD_VAR 0 1
21982: PPUSH
21983: CALL_OW 251
21987: ST_TO_ADDR
// if not x or not y then
21988: LD_VAR 0 10
21992: NOT
21993: IFTRUE 22002
21995: PUSH
21996: LD_VAR 0 11
22000: NOT
22001: OR
22002: IFFALSE 22006
// exit ;
22004: GO 23063
// weapon := 0 ;
22006: LD_ADDR_VAR 0 18
22010: PUSH
22011: LD_INT 0
22013: ST_TO_ADDR
// fac_list := [ ] ;
22014: LD_ADDR_VAR 0 17
22018: PUSH
22019: EMPTY
22020: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22021: LD_ADDR_VAR 0 6
22025: PUSH
22026: LD_VAR 0 1
22030: PPUSH
22031: CALL_OW 274
22035: PPUSH
22036: LD_VAR 0 2
22040: PPUSH
22041: LD_INT 0
22043: PPUSH
22044: CALL 19598 0 3
22048: PPUSH
22049: LD_INT 30
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PPUSH
22059: CALL_OW 72
22063: ST_TO_ADDR
// if not factories then
22064: LD_VAR 0 6
22068: NOT
22069: IFFALSE 22073
// exit ;
22071: GO 23063
// for i in factories do
22073: LD_ADDR_VAR 0 8
22077: PUSH
22078: LD_VAR 0 6
22082: PUSH
22083: FOR_IN
22084: IFFALSE 22109
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22086: LD_ADDR_VAR 0 17
22090: PUSH
22091: LD_VAR 0 17
22095: PUSH
22096: LD_VAR 0 8
22100: PPUSH
22101: CALL_OW 478
22105: UNION
22106: ST_TO_ADDR
22107: GO 22083
22109: POP
22110: POP
// if not fac_list then
22111: LD_VAR 0 17
22115: NOT
22116: IFFALSE 22120
// exit ;
22118: GO 23063
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22120: LD_ADDR_VAR 0 5
22124: PUSH
22125: LD_INT 4
22127: PUSH
22128: LD_INT 5
22130: PUSH
22131: LD_INT 9
22133: PUSH
22134: LD_INT 10
22136: PUSH
22137: LD_INT 6
22139: PUSH
22140: LD_INT 7
22142: PUSH
22143: LD_INT 11
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 27
22157: PUSH
22158: LD_INT 28
22160: PUSH
22161: LD_INT 26
22163: PUSH
22164: LD_INT 30
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 43
22175: PUSH
22176: LD_INT 44
22178: PUSH
22179: LD_INT 46
22181: PUSH
22182: LD_INT 45
22184: PUSH
22185: LD_INT 47
22187: PUSH
22188: LD_INT 49
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: LIST
22203: PUSH
22204: LD_VAR 0 12
22208: ARRAY
22209: ST_TO_ADDR
// list := list isect fac_list ;
22210: LD_ADDR_VAR 0 5
22214: PUSH
22215: LD_VAR 0 5
22219: PUSH
22220: LD_VAR 0 17
22224: ISECT
22225: ST_TO_ADDR
// if not list then
22226: LD_VAR 0 5
22230: NOT
22231: IFFALSE 22235
// exit ;
22233: GO 23063
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22235: LD_VAR 0 12
22239: PUSH
22240: LD_INT 3
22242: EQUAL
22243: IFFALSE 22255
22245: PUSH
22246: LD_INT 49
22248: PUSH
22249: LD_VAR 0 5
22253: IN
22254: AND
22255: IFFALSE 22275
22257: PUSH
22258: LD_INT 31
22260: PPUSH
22261: LD_VAR 0 16
22265: PPUSH
22266: CALL_OW 321
22270: PUSH
22271: LD_INT 2
22273: EQUAL
22274: AND
22275: IFFALSE 22335
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22277: LD_INT 22
22279: PUSH
22280: LD_VAR 0 16
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 35
22291: PUSH
22292: LD_INT 49
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 91
22301: PUSH
22302: LD_VAR 0 1
22306: PUSH
22307: LD_INT 10
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: LIST
22319: PPUSH
22320: CALL_OW 69
22324: NOT
22325: IFFALSE 22335
// weapon := ru_time_lapser ;
22327: LD_ADDR_VAR 0 18
22331: PUSH
22332: LD_INT 49
22334: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22335: LD_VAR 0 12
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: IN
22350: IFFALSE 22374
22352: PUSH
22353: LD_INT 11
22355: PUSH
22356: LD_VAR 0 5
22360: IN
22361: IFTRUE 22373
22363: PUSH
22364: LD_INT 30
22366: PUSH
22367: LD_VAR 0 5
22371: IN
22372: OR
22373: AND
22374: IFFALSE 22394
22376: PUSH
22377: LD_INT 6
22379: PPUSH
22380: LD_VAR 0 16
22384: PPUSH
22385: CALL_OW 321
22389: PUSH
22390: LD_INT 2
22392: EQUAL
22393: AND
22394: IFFALSE 22561
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22396: LD_INT 22
22398: PUSH
22399: LD_VAR 0 16
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: LD_INT 35
22413: PUSH
22414: LD_INT 11
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 35
22423: PUSH
22424: LD_INT 30
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 91
22438: PUSH
22439: LD_VAR 0 1
22443: PUSH
22444: LD_INT 18
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: LIST
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: PPUSH
22457: CALL_OW 69
22461: NOT
22462: IFFALSE 22538
22464: PUSH
22465: LD_INT 22
22467: PUSH
22468: LD_VAR 0 16
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: LD_INT 30
22482: PUSH
22483: LD_INT 32
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 30
22492: PUSH
22493: LD_INT 33
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 91
22507: PUSH
22508: LD_VAR 0 1
22512: PUSH
22513: LD_INT 12
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: LIST
22525: PUSH
22526: EMPTY
22527: LIST
22528: PPUSH
22529: CALL_OW 69
22533: PUSH
22534: LD_INT 2
22536: GREATER
22537: AND
22538: IFFALSE 22561
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22540: LD_ADDR_VAR 0 18
22544: PUSH
22545: LD_INT 11
22547: PUSH
22548: LD_INT 30
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_VAR 0 12
22559: ARRAY
22560: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22561: LD_VAR 0 18
22565: NOT
22566: IFFALSE 22586
22568: PUSH
22569: LD_INT 40
22571: PPUSH
22572: LD_VAR 0 16
22576: PPUSH
22577: CALL_OW 321
22581: PUSH
22582: LD_INT 2
22584: EQUAL
22585: AND
22586: IFFALSE 22622
22588: PUSH
22589: LD_INT 7
22591: PUSH
22592: LD_VAR 0 5
22596: IN
22597: IFTRUE 22609
22599: PUSH
22600: LD_INT 28
22602: PUSH
22603: LD_VAR 0 5
22607: IN
22608: OR
22609: IFTRUE 22621
22611: PUSH
22612: LD_INT 45
22614: PUSH
22615: LD_VAR 0 5
22619: IN
22620: OR
22621: AND
22622: IFFALSE 22876
// begin hex := GetHexInfo ( x , y ) ;
22624: LD_ADDR_VAR 0 4
22628: PUSH
22629: LD_VAR 0 10
22633: PPUSH
22634: LD_VAR 0 11
22638: PPUSH
22639: CALL_OW 546
22643: ST_TO_ADDR
// if hex [ 1 ] then
22644: LD_VAR 0 4
22648: PUSH
22649: LD_INT 1
22651: ARRAY
22652: IFFALSE 22656
// exit ;
22654: GO 23063
// height := hex [ 2 ] ;
22656: LD_ADDR_VAR 0 15
22660: PUSH
22661: LD_VAR 0 4
22665: PUSH
22666: LD_INT 2
22668: ARRAY
22669: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22670: LD_ADDR_VAR 0 14
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: LD_INT 2
22680: PUSH
22681: LD_INT 3
22683: PUSH
22684: LD_INT 5
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: ST_TO_ADDR
// for i in tmp do
22693: LD_ADDR_VAR 0 8
22697: PUSH
22698: LD_VAR 0 14
22702: PUSH
22703: FOR_IN
22704: IFFALSE 22874
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22706: LD_ADDR_VAR 0 9
22710: PUSH
22711: LD_VAR 0 10
22715: PPUSH
22716: LD_VAR 0 8
22720: PPUSH
22721: LD_INT 5
22723: PPUSH
22724: CALL_OW 272
22728: PUSH
22729: LD_VAR 0 11
22733: PPUSH
22734: LD_VAR 0 8
22738: PPUSH
22739: LD_INT 5
22741: PPUSH
22742: CALL_OW 273
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22751: LD_VAR 0 9
22755: PUSH
22756: LD_INT 1
22758: ARRAY
22759: PPUSH
22760: LD_VAR 0 9
22764: PUSH
22765: LD_INT 2
22767: ARRAY
22768: PPUSH
22769: CALL_OW 488
22773: IFFALSE 22872
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22775: LD_ADDR_VAR 0 4
22779: PUSH
22780: LD_VAR 0 9
22784: PUSH
22785: LD_INT 1
22787: ARRAY
22788: PPUSH
22789: LD_VAR 0 9
22793: PUSH
22794: LD_INT 2
22796: ARRAY
22797: PPUSH
22798: CALL_OW 546
22802: ST_TO_ADDR
// if hex [ 1 ] then
22803: LD_VAR 0 4
22807: PUSH
22808: LD_INT 1
22810: ARRAY
22811: IFFALSE 22815
// continue ;
22813: GO 22703
// h := hex [ 2 ] ;
22815: LD_ADDR_VAR 0 13
22819: PUSH
22820: LD_VAR 0 4
22824: PUSH
22825: LD_INT 2
22827: ARRAY
22828: ST_TO_ADDR
// if h + 7 < height then
22829: LD_VAR 0 13
22833: PUSH
22834: LD_INT 7
22836: PLUS
22837: PUSH
22838: LD_VAR 0 15
22842: LESS
22843: IFFALSE 22872
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22845: LD_ADDR_VAR 0 18
22849: PUSH
22850: LD_INT 7
22852: PUSH
22853: LD_INT 28
22855: PUSH
22856: LD_INT 45
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: LD_VAR 0 12
22868: ARRAY
22869: ST_TO_ADDR
// break ;
22870: GO 22874
// end ; end ; end ;
22872: GO 22703
22874: POP
22875: POP
// end ; if not weapon then
22876: LD_VAR 0 18
22880: NOT
22881: IFFALSE 22941
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22883: LD_ADDR_VAR 0 5
22887: PUSH
22888: LD_VAR 0 5
22892: PUSH
22893: LD_INT 11
22895: PUSH
22896: LD_INT 30
22898: PUSH
22899: LD_INT 49
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: DIFF
22907: ST_TO_ADDR
// if not list then
22908: LD_VAR 0 5
22912: NOT
22913: IFFALSE 22917
// exit ;
22915: GO 23063
// weapon := list [ rand ( 1 , list ) ] ;
22917: LD_ADDR_VAR 0 18
22921: PUSH
22922: LD_VAR 0 5
22926: PUSH
22927: LD_INT 1
22929: PPUSH
22930: LD_VAR 0 5
22934: PPUSH
22935: CALL_OW 12
22939: ARRAY
22940: ST_TO_ADDR
// end ; if weapon then
22941: LD_VAR 0 18
22945: IFFALSE 23063
// begin tmp := CostOfWeapon ( weapon ) ;
22947: LD_ADDR_VAR 0 14
22951: PUSH
22952: LD_VAR 0 18
22956: PPUSH
22957: CALL_OW 451
22961: ST_TO_ADDR
// j := GetBase ( tower ) ;
22962: LD_ADDR_VAR 0 9
22966: PUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 274
22976: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22977: LD_VAR 0 9
22981: PPUSH
22982: LD_INT 1
22984: PPUSH
22985: CALL_OW 275
22989: PUSH
22990: LD_VAR 0 14
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: GREATEREQUAL
22999: IFFALSE 23025
23001: PUSH
23002: LD_VAR 0 9
23006: PPUSH
23007: LD_INT 2
23009: PPUSH
23010: CALL_OW 275
23014: PUSH
23015: LD_VAR 0 14
23019: PUSH
23020: LD_INT 2
23022: ARRAY
23023: GREATEREQUAL
23024: AND
23025: IFFALSE 23051
23027: PUSH
23028: LD_VAR 0 9
23032: PPUSH
23033: LD_INT 3
23035: PPUSH
23036: CALL_OW 275
23040: PUSH
23041: LD_VAR 0 14
23045: PUSH
23046: LD_INT 3
23048: ARRAY
23049: GREATEREQUAL
23050: AND
23051: IFFALSE 23063
// result := weapon ;
23053: LD_ADDR_VAR 0 3
23057: PUSH
23058: LD_VAR 0 18
23062: ST_TO_ADDR
// end ; end ;
23063: LD_VAR 0 3
23067: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23068: LD_INT 0
23070: PPUSH
23071: PPUSH
// result := true ;
23072: LD_ADDR_VAR 0 3
23076: PUSH
23077: LD_INT 1
23079: ST_TO_ADDR
// if array1 = array2 then
23080: LD_VAR 0 1
23084: PUSH
23085: LD_VAR 0 2
23089: EQUAL
23090: IFFALSE 23150
// begin for i = 1 to array1 do
23092: LD_ADDR_VAR 0 4
23096: PUSH
23097: DOUBLE
23098: LD_INT 1
23100: DEC
23101: ST_TO_ADDR
23102: LD_VAR 0 1
23106: PUSH
23107: FOR_TO
23108: IFFALSE 23146
// if array1 [ i ] <> array2 [ i ] then
23110: LD_VAR 0 1
23114: PUSH
23115: LD_VAR 0 4
23119: ARRAY
23120: PUSH
23121: LD_VAR 0 2
23125: PUSH
23126: LD_VAR 0 4
23130: ARRAY
23131: NONEQUAL
23132: IFFALSE 23144
// begin result := false ;
23134: LD_ADDR_VAR 0 3
23138: PUSH
23139: LD_INT 0
23141: ST_TO_ADDR
// break ;
23142: GO 23146
// end ;
23144: GO 23107
23146: POP
23147: POP
// end else
23148: GO 23158
// result := false ;
23150: LD_ADDR_VAR 0 3
23154: PUSH
23155: LD_INT 0
23157: ST_TO_ADDR
// end ;
23158: LD_VAR 0 3
23162: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23163: LD_INT 0
23165: PPUSH
23166: PPUSH
// if not array1 or not array2 then
23167: LD_VAR 0 1
23171: NOT
23172: IFTRUE 23181
23174: PUSH
23175: LD_VAR 0 2
23179: NOT
23180: OR
23181: IFFALSE 23185
// exit ;
23183: GO 23249
// result := true ;
23185: LD_ADDR_VAR 0 3
23189: PUSH
23190: LD_INT 1
23192: ST_TO_ADDR
// for i = 1 to array1 do
23193: LD_ADDR_VAR 0 4
23197: PUSH
23198: DOUBLE
23199: LD_INT 1
23201: DEC
23202: ST_TO_ADDR
23203: LD_VAR 0 1
23207: PUSH
23208: FOR_TO
23209: IFFALSE 23247
// if array1 [ i ] <> array2 [ i ] then
23211: LD_VAR 0 1
23215: PUSH
23216: LD_VAR 0 4
23220: ARRAY
23221: PUSH
23222: LD_VAR 0 2
23226: PUSH
23227: LD_VAR 0 4
23231: ARRAY
23232: NONEQUAL
23233: IFFALSE 23245
// begin result := false ;
23235: LD_ADDR_VAR 0 3
23239: PUSH
23240: LD_INT 0
23242: ST_TO_ADDR
// break ;
23243: GO 23247
// end ;
23245: GO 23208
23247: POP
23248: POP
// end ;
23249: LD_VAR 0 3
23253: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23254: LD_INT 0
23256: PPUSH
23257: PPUSH
23258: PPUSH
// pom := GetBase ( fac ) ;
23259: LD_ADDR_VAR 0 5
23263: PUSH
23264: LD_VAR 0 1
23268: PPUSH
23269: CALL_OW 274
23273: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23274: LD_ADDR_VAR 0 4
23278: PUSH
23279: LD_VAR 0 2
23283: PUSH
23284: LD_INT 1
23286: ARRAY
23287: PPUSH
23288: LD_VAR 0 2
23292: PUSH
23293: LD_INT 2
23295: ARRAY
23296: PPUSH
23297: LD_VAR 0 2
23301: PUSH
23302: LD_INT 3
23304: ARRAY
23305: PPUSH
23306: LD_VAR 0 2
23310: PUSH
23311: LD_INT 4
23313: ARRAY
23314: PPUSH
23315: CALL_OW 449
23319: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23320: LD_ADDR_VAR 0 3
23324: PUSH
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_INT 1
23332: PPUSH
23333: CALL_OW 275
23337: PUSH
23338: LD_VAR 0 4
23342: PUSH
23343: LD_INT 1
23345: ARRAY
23346: GREATEREQUAL
23347: IFFALSE 23373
23349: PUSH
23350: LD_VAR 0 5
23354: PPUSH
23355: LD_INT 2
23357: PPUSH
23358: CALL_OW 275
23362: PUSH
23363: LD_VAR 0 4
23367: PUSH
23368: LD_INT 2
23370: ARRAY
23371: GREATEREQUAL
23372: AND
23373: IFFALSE 23399
23375: PUSH
23376: LD_VAR 0 5
23380: PPUSH
23381: LD_INT 3
23383: PPUSH
23384: CALL_OW 275
23388: PUSH
23389: LD_VAR 0 4
23393: PUSH
23394: LD_INT 3
23396: ARRAY
23397: GREATEREQUAL
23398: AND
23399: ST_TO_ADDR
// end ;
23400: LD_VAR 0 3
23404: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23405: LD_INT 0
23407: PPUSH
23408: PPUSH
23409: PPUSH
23410: PPUSH
// pom := GetBase ( building ) ;
23411: LD_ADDR_VAR 0 3
23415: PUSH
23416: LD_VAR 0 1
23420: PPUSH
23421: CALL_OW 274
23425: ST_TO_ADDR
// if not pom then
23426: LD_VAR 0 3
23430: NOT
23431: IFFALSE 23435
// exit ;
23433: GO 23609
// btype := GetBType ( building ) ;
23435: LD_ADDR_VAR 0 5
23439: PUSH
23440: LD_VAR 0 1
23444: PPUSH
23445: CALL_OW 266
23449: ST_TO_ADDR
// if btype = b_armoury then
23450: LD_VAR 0 5
23454: PUSH
23455: LD_INT 4
23457: EQUAL
23458: IFFALSE 23468
// btype := b_barracks ;
23460: LD_ADDR_VAR 0 5
23464: PUSH
23465: LD_INT 5
23467: ST_TO_ADDR
// if btype = b_depot then
23468: LD_VAR 0 5
23472: PUSH
23473: LD_INT 0
23475: EQUAL
23476: IFFALSE 23486
// btype := b_warehouse ;
23478: LD_ADDR_VAR 0 5
23482: PUSH
23483: LD_INT 1
23485: ST_TO_ADDR
// if btype = b_workshop then
23486: LD_VAR 0 5
23490: PUSH
23491: LD_INT 2
23493: EQUAL
23494: IFFALSE 23504
// btype := b_factory ;
23496: LD_ADDR_VAR 0 5
23500: PUSH
23501: LD_INT 3
23503: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23504: LD_ADDR_VAR 0 4
23508: PUSH
23509: LD_VAR 0 5
23513: PPUSH
23514: LD_VAR 0 1
23518: PPUSH
23519: CALL_OW 248
23523: PPUSH
23524: CALL_OW 450
23528: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23529: LD_ADDR_VAR 0 2
23533: PUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: LD_INT 1
23541: PPUSH
23542: CALL_OW 275
23546: PUSH
23547: LD_VAR 0 4
23551: PUSH
23552: LD_INT 1
23554: ARRAY
23555: GREATEREQUAL
23556: IFFALSE 23582
23558: PUSH
23559: LD_VAR 0 3
23563: PPUSH
23564: LD_INT 2
23566: PPUSH
23567: CALL_OW 275
23571: PUSH
23572: LD_VAR 0 4
23576: PUSH
23577: LD_INT 2
23579: ARRAY
23580: GREATEREQUAL
23581: AND
23582: IFFALSE 23608
23584: PUSH
23585: LD_VAR 0 3
23589: PPUSH
23590: LD_INT 3
23592: PPUSH
23593: CALL_OW 275
23597: PUSH
23598: LD_VAR 0 4
23602: PUSH
23603: LD_INT 3
23605: ARRAY
23606: GREATEREQUAL
23607: AND
23608: ST_TO_ADDR
// end ;
23609: LD_VAR 0 2
23613: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23614: LD_INT 0
23616: PPUSH
23617: PPUSH
23618: PPUSH
// pom := GetBase ( building ) ;
23619: LD_ADDR_VAR 0 4
23623: PUSH
23624: LD_VAR 0 1
23628: PPUSH
23629: CALL_OW 274
23633: ST_TO_ADDR
// if not pom then
23634: LD_VAR 0 4
23638: NOT
23639: IFFALSE 23643
// exit ;
23641: GO 23748
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23643: LD_ADDR_VAR 0 5
23647: PUSH
23648: LD_VAR 0 2
23652: PPUSH
23653: LD_VAR 0 1
23657: PPUSH
23658: CALL_OW 248
23662: PPUSH
23663: CALL_OW 450
23667: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23668: LD_ADDR_VAR 0 3
23672: PUSH
23673: LD_VAR 0 4
23677: PPUSH
23678: LD_INT 1
23680: PPUSH
23681: CALL_OW 275
23685: PUSH
23686: LD_VAR 0 5
23690: PUSH
23691: LD_INT 1
23693: ARRAY
23694: GREATEREQUAL
23695: IFFALSE 23721
23697: PUSH
23698: LD_VAR 0 4
23702: PPUSH
23703: LD_INT 2
23705: PPUSH
23706: CALL_OW 275
23710: PUSH
23711: LD_VAR 0 5
23715: PUSH
23716: LD_INT 2
23718: ARRAY
23719: GREATEREQUAL
23720: AND
23721: IFFALSE 23747
23723: PUSH
23724: LD_VAR 0 4
23728: PPUSH
23729: LD_INT 3
23731: PPUSH
23732: CALL_OW 275
23736: PUSH
23737: LD_VAR 0 5
23741: PUSH
23742: LD_INT 3
23744: ARRAY
23745: GREATEREQUAL
23746: AND
23747: ST_TO_ADDR
// end ;
23748: LD_VAR 0 3
23752: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23753: LD_INT 0
23755: PPUSH
23756: PPUSH
23757: PPUSH
23758: PPUSH
23759: PPUSH
23760: PPUSH
23761: PPUSH
23762: PPUSH
23763: PPUSH
23764: PPUSH
23765: PPUSH
// result := false ;
23766: LD_ADDR_VAR 0 8
23770: PUSH
23771: LD_INT 0
23773: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23774: LD_VAR 0 5
23778: NOT
23779: IFTRUE 23788
23781: PUSH
23782: LD_VAR 0 1
23786: NOT
23787: OR
23788: IFTRUE 23797
23790: PUSH
23791: LD_VAR 0 2
23795: NOT
23796: OR
23797: IFTRUE 23806
23799: PUSH
23800: LD_VAR 0 3
23804: NOT
23805: OR
23806: IFFALSE 23810
// exit ;
23808: GO 24636
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23810: LD_ADDR_VAR 0 14
23814: PUSH
23815: LD_VAR 0 1
23819: PPUSH
23820: LD_VAR 0 2
23824: PPUSH
23825: LD_VAR 0 3
23829: PPUSH
23830: LD_VAR 0 4
23834: PPUSH
23835: LD_VAR 0 5
23839: PUSH
23840: LD_INT 1
23842: ARRAY
23843: PPUSH
23844: CALL_OW 248
23848: PPUSH
23849: LD_INT 0
23851: PPUSH
23852: CALL 25917 0 6
23856: ST_TO_ADDR
// if not hexes then
23857: LD_VAR 0 14
23861: NOT
23862: IFFALSE 23866
// exit ;
23864: GO 24636
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23866: LD_ADDR_VAR 0 17
23870: PUSH
23871: LD_VAR 0 5
23875: PPUSH
23876: LD_INT 22
23878: PUSH
23879: LD_VAR 0 13
23883: PPUSH
23884: CALL_OW 255
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: LD_INT 30
23898: PUSH
23899: LD_INT 0
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 30
23908: PUSH
23909: LD_INT 1
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PPUSH
23925: CALL_OW 72
23929: ST_TO_ADDR
// for i = 1 to hexes do
23930: LD_ADDR_VAR 0 9
23934: PUSH
23935: DOUBLE
23936: LD_INT 1
23938: DEC
23939: ST_TO_ADDR
23940: LD_VAR 0 14
23944: PUSH
23945: FOR_TO
23946: IFFALSE 24634
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23948: LD_ADDR_VAR 0 13
23952: PUSH
23953: LD_VAR 0 14
23957: PUSH
23958: LD_VAR 0 9
23962: ARRAY
23963: PUSH
23964: LD_INT 1
23966: ARRAY
23967: PPUSH
23968: LD_VAR 0 14
23972: PUSH
23973: LD_VAR 0 9
23977: ARRAY
23978: PUSH
23979: LD_INT 2
23981: ARRAY
23982: PPUSH
23983: CALL_OW 428
23987: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23988: LD_VAR 0 14
23992: PUSH
23993: LD_VAR 0 9
23997: ARRAY
23998: PUSH
23999: LD_INT 1
24001: ARRAY
24002: PPUSH
24003: LD_VAR 0 14
24007: PUSH
24008: LD_VAR 0 9
24012: ARRAY
24013: PUSH
24014: LD_INT 2
24016: ARRAY
24017: PPUSH
24018: CALL_OW 351
24022: IFTRUE 24061
24024: PUSH
24025: LD_VAR 0 14
24029: PUSH
24030: LD_VAR 0 9
24034: ARRAY
24035: PUSH
24036: LD_INT 1
24038: ARRAY
24039: PPUSH
24040: LD_VAR 0 14
24044: PUSH
24045: LD_VAR 0 9
24049: ARRAY
24050: PUSH
24051: LD_INT 2
24053: ARRAY
24054: PPUSH
24055: CALL_OW 488
24059: NOT
24060: OR
24061: IFTRUE 24078
24063: PUSH
24064: LD_VAR 0 13
24068: PPUSH
24069: CALL_OW 247
24073: PUSH
24074: LD_INT 3
24076: EQUAL
24077: OR
24078: IFFALSE 24084
// exit ;
24080: POP
24081: POP
24082: GO 24636
// if not tmp then
24084: LD_VAR 0 13
24088: NOT
24089: IFFALSE 24093
// continue ;
24091: GO 23945
// result := true ;
24093: LD_ADDR_VAR 0 8
24097: PUSH
24098: LD_INT 1
24100: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24101: LD_VAR 0 6
24105: IFFALSE 24122
24107: PUSH
24108: LD_VAR 0 13
24112: PPUSH
24113: CALL_OW 247
24117: PUSH
24118: LD_INT 2
24120: EQUAL
24121: AND
24122: IFFALSE 24139
24124: PUSH
24125: LD_VAR 0 13
24129: PPUSH
24130: CALL_OW 263
24134: PUSH
24135: LD_INT 1
24137: EQUAL
24138: AND
24139: IFFALSE 24303
// begin if IsDrivenBy ( tmp ) then
24141: LD_VAR 0 13
24145: PPUSH
24146: CALL_OW 311
24150: IFFALSE 24154
// continue ;
24152: GO 23945
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24154: LD_VAR 0 6
24158: PPUSH
24159: LD_INT 3
24161: PUSH
24162: LD_INT 60
24164: PUSH
24165: EMPTY
24166: LIST
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 3
24174: PUSH
24175: LD_INT 55
24177: PUSH
24178: EMPTY
24179: LIST
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PPUSH
24189: CALL_OW 72
24193: IFFALSE 24301
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24195: LD_ADDR_VAR 0 18
24199: PUSH
24200: LD_VAR 0 6
24204: PPUSH
24205: LD_INT 3
24207: PUSH
24208: LD_INT 60
24210: PUSH
24211: EMPTY
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 3
24220: PUSH
24221: LD_INT 55
24223: PUSH
24224: EMPTY
24225: LIST
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PPUSH
24235: CALL_OW 72
24239: PUSH
24240: LD_INT 1
24242: ARRAY
24243: ST_TO_ADDR
// if IsInUnit ( driver ) then
24244: LD_VAR 0 18
24248: PPUSH
24249: CALL_OW 310
24253: IFFALSE 24264
// ComExit ( driver ) ;
24255: LD_VAR 0 18
24259: PPUSH
24260: CALL 49917 0 1
// AddComEnterUnit ( driver , tmp ) ;
24264: LD_VAR 0 18
24268: PPUSH
24269: LD_VAR 0 13
24273: PPUSH
24274: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24278: LD_VAR 0 18
24282: PPUSH
24283: LD_VAR 0 7
24287: PPUSH
24288: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24292: LD_VAR 0 18
24296: PPUSH
24297: CALL_OW 181
// end ; continue ;
24301: GO 23945
// end ; if not cleaners or not tmp in cleaners then
24303: LD_VAR 0 6
24307: NOT
24308: IFTRUE 24323
24310: PUSH
24311: LD_VAR 0 13
24315: PUSH
24316: LD_VAR 0 6
24320: IN
24321: NOT
24322: OR
24323: IFFALSE 24632
// begin if dep then
24325: LD_VAR 0 17
24329: IFFALSE 24465
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24331: LD_ADDR_VAR 0 16
24335: PUSH
24336: LD_VAR 0 17
24340: PUSH
24341: LD_INT 1
24343: ARRAY
24344: PPUSH
24345: CALL_OW 250
24349: PPUSH
24350: LD_VAR 0 17
24354: PUSH
24355: LD_INT 1
24357: ARRAY
24358: PPUSH
24359: CALL_OW 254
24363: PPUSH
24364: LD_INT 5
24366: PPUSH
24367: CALL_OW 272
24371: PUSH
24372: LD_VAR 0 17
24376: PUSH
24377: LD_INT 1
24379: ARRAY
24380: PPUSH
24381: CALL_OW 251
24385: PPUSH
24386: LD_VAR 0 17
24390: PUSH
24391: LD_INT 1
24393: ARRAY
24394: PPUSH
24395: CALL_OW 254
24399: PPUSH
24400: LD_INT 5
24402: PPUSH
24403: CALL_OW 273
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24412: LD_VAR 0 16
24416: PUSH
24417: LD_INT 1
24419: ARRAY
24420: PPUSH
24421: LD_VAR 0 16
24425: PUSH
24426: LD_INT 2
24428: ARRAY
24429: PPUSH
24430: CALL_OW 488
24434: IFFALSE 24465
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24436: LD_VAR 0 13
24440: PPUSH
24441: LD_VAR 0 16
24445: PUSH
24446: LD_INT 1
24448: ARRAY
24449: PPUSH
24450: LD_VAR 0 16
24454: PUSH
24455: LD_INT 2
24457: ARRAY
24458: PPUSH
24459: CALL_OW 111
// continue ;
24463: GO 23945
// end ; end ; r := GetDir ( tmp ) ;
24465: LD_ADDR_VAR 0 15
24469: PUSH
24470: LD_VAR 0 13
24474: PPUSH
24475: CALL_OW 254
24479: ST_TO_ADDR
// if r = 5 then
24480: LD_VAR 0 15
24484: PUSH
24485: LD_INT 5
24487: EQUAL
24488: IFFALSE 24498
// r := 0 ;
24490: LD_ADDR_VAR 0 15
24494: PUSH
24495: LD_INT 0
24497: ST_TO_ADDR
// for j = r to 5 do
24498: LD_ADDR_VAR 0 10
24502: PUSH
24503: DOUBLE
24504: LD_VAR 0 15
24508: DEC
24509: ST_TO_ADDR
24510: LD_INT 5
24512: PUSH
24513: FOR_TO
24514: IFFALSE 24630
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24516: LD_ADDR_VAR 0 11
24520: PUSH
24521: LD_VAR 0 13
24525: PPUSH
24526: CALL_OW 250
24530: PPUSH
24531: LD_VAR 0 10
24535: PPUSH
24536: LD_INT 2
24538: PPUSH
24539: CALL_OW 272
24543: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24544: LD_ADDR_VAR 0 12
24548: PUSH
24549: LD_VAR 0 13
24553: PPUSH
24554: CALL_OW 251
24558: PPUSH
24559: LD_VAR 0 10
24563: PPUSH
24564: LD_INT 2
24566: PPUSH
24567: CALL_OW 273
24571: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24572: LD_VAR 0 11
24576: PPUSH
24577: LD_VAR 0 12
24581: PPUSH
24582: CALL_OW 488
24586: IFFALSE 24605
24588: PUSH
24589: LD_VAR 0 11
24593: PPUSH
24594: LD_VAR 0 12
24598: PPUSH
24599: CALL_OW 428
24603: NOT
24604: AND
24605: IFFALSE 24628
// begin ComMoveXY ( tmp , _x , _y ) ;
24607: LD_VAR 0 13
24611: PPUSH
24612: LD_VAR 0 11
24616: PPUSH
24617: LD_VAR 0 12
24621: PPUSH
24622: CALL_OW 111
// break ;
24626: GO 24630
// end ; end ;
24628: GO 24513
24630: POP
24631: POP
// end ; end ;
24632: GO 23945
24634: POP
24635: POP
// end ;
24636: LD_VAR 0 8
24640: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24641: LD_INT 0
24643: PPUSH
// result := true ;
24644: LD_ADDR_VAR 0 3
24648: PUSH
24649: LD_INT 1
24651: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24652: LD_VAR 0 2
24656: PUSH
24657: LD_INT 24
24659: DOUBLE
24660: EQUAL
24661: IFTRUE 24671
24663: LD_INT 33
24665: DOUBLE
24666: EQUAL
24667: IFTRUE 24671
24669: GO 24696
24671: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24672: LD_ADDR_VAR 0 3
24676: PUSH
24677: LD_INT 32
24679: PPUSH
24680: LD_VAR 0 1
24684: PPUSH
24685: CALL_OW 321
24689: PUSH
24690: LD_INT 2
24692: EQUAL
24693: ST_TO_ADDR
24694: GO 25012
24696: LD_INT 20
24698: DOUBLE
24699: EQUAL
24700: IFTRUE 24704
24702: GO 24729
24704: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24705: LD_ADDR_VAR 0 3
24709: PUSH
24710: LD_INT 6
24712: PPUSH
24713: LD_VAR 0 1
24717: PPUSH
24718: CALL_OW 321
24722: PUSH
24723: LD_INT 2
24725: EQUAL
24726: ST_TO_ADDR
24727: GO 25012
24729: LD_INT 22
24731: DOUBLE
24732: EQUAL
24733: IFTRUE 24743
24735: LD_INT 36
24737: DOUBLE
24738: EQUAL
24739: IFTRUE 24743
24741: GO 24768
24743: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24744: LD_ADDR_VAR 0 3
24748: PUSH
24749: LD_INT 15
24751: PPUSH
24752: LD_VAR 0 1
24756: PPUSH
24757: CALL_OW 321
24761: PUSH
24762: LD_INT 2
24764: EQUAL
24765: ST_TO_ADDR
24766: GO 25012
24768: LD_INT 30
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24776
24774: GO 24801
24776: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24777: LD_ADDR_VAR 0 3
24781: PUSH
24782: LD_INT 20
24784: PPUSH
24785: LD_VAR 0 1
24789: PPUSH
24790: CALL_OW 321
24794: PUSH
24795: LD_INT 2
24797: EQUAL
24798: ST_TO_ADDR
24799: GO 25012
24801: LD_INT 28
24803: DOUBLE
24804: EQUAL
24805: IFTRUE 24815
24807: LD_INT 21
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 24840
24815: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24816: LD_ADDR_VAR 0 3
24820: PUSH
24821: LD_INT 21
24823: PPUSH
24824: LD_VAR 0 1
24828: PPUSH
24829: CALL_OW 321
24833: PUSH
24834: LD_INT 2
24836: EQUAL
24837: ST_TO_ADDR
24838: GO 25012
24840: LD_INT 16
24842: DOUBLE
24843: EQUAL
24844: IFTRUE 24848
24846: GO 24873
24848: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24849: LD_ADDR_VAR 0 3
24853: PUSH
24854: LD_INT 84
24856: PPUSH
24857: LD_VAR 0 1
24861: PPUSH
24862: CALL_OW 321
24866: PUSH
24867: LD_INT 2
24869: EQUAL
24870: ST_TO_ADDR
24871: GO 25012
24873: LD_INT 19
24875: DOUBLE
24876: EQUAL
24877: IFTRUE 24887
24879: LD_INT 23
24881: DOUBLE
24882: EQUAL
24883: IFTRUE 24887
24885: GO 24912
24887: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_INT 83
24895: PPUSH
24896: LD_VAR 0 1
24900: PPUSH
24901: CALL_OW 321
24905: PUSH
24906: LD_INT 2
24908: EQUAL
24909: ST_TO_ADDR
24910: GO 25012
24912: LD_INT 17
24914: DOUBLE
24915: EQUAL
24916: IFTRUE 24920
24918: GO 24945
24920: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24921: LD_ADDR_VAR 0 3
24925: PUSH
24926: LD_INT 39
24928: PPUSH
24929: LD_VAR 0 1
24933: PPUSH
24934: CALL_OW 321
24938: PUSH
24939: LD_INT 2
24941: EQUAL
24942: ST_TO_ADDR
24943: GO 25012
24945: LD_INT 18
24947: DOUBLE
24948: EQUAL
24949: IFTRUE 24953
24951: GO 24978
24953: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24954: LD_ADDR_VAR 0 3
24958: PUSH
24959: LD_INT 40
24961: PPUSH
24962: LD_VAR 0 1
24966: PPUSH
24967: CALL_OW 321
24971: PUSH
24972: LD_INT 2
24974: EQUAL
24975: ST_TO_ADDR
24976: GO 25012
24978: LD_INT 27
24980: DOUBLE
24981: EQUAL
24982: IFTRUE 24986
24984: GO 25011
24986: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_INT 35
24994: PPUSH
24995: LD_VAR 0 1
24999: PPUSH
25000: CALL_OW 321
25004: PUSH
25005: LD_INT 2
25007: EQUAL
25008: ST_TO_ADDR
25009: GO 25012
25011: POP
// end ;
25012: LD_VAR 0 3
25016: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25017: LD_INT 0
25019: PPUSH
25020: PPUSH
25021: PPUSH
25022: PPUSH
25023: PPUSH
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
25029: PPUSH
// result := false ;
25030: LD_ADDR_VAR 0 6
25034: PUSH
25035: LD_INT 0
25037: ST_TO_ADDR
// if btype = b_depot then
25038: LD_VAR 0 2
25042: PUSH
25043: LD_INT 0
25045: EQUAL
25046: IFFALSE 25058
// begin result := true ;
25048: LD_ADDR_VAR 0 6
25052: PUSH
25053: LD_INT 1
25055: ST_TO_ADDR
// exit ;
25056: GO 25912
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25058: LD_VAR 0 1
25062: NOT
25063: IFTRUE 25088
25065: PUSH
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL_OW 266
25075: PUSH
25076: LD_INT 0
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: IN
25086: NOT
25087: OR
25088: IFTRUE 25097
25090: PUSH
25091: LD_VAR 0 2
25095: NOT
25096: OR
25097: IFTRUE 25133
25099: PUSH
25100: LD_VAR 0 5
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: LD_INT 3
25116: PUSH
25117: LD_INT 4
25119: PUSH
25120: LD_INT 5
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: IN
25131: NOT
25132: OR
25133: IFTRUE 25152
25135: PUSH
25136: LD_VAR 0 3
25140: PPUSH
25141: LD_VAR 0 4
25145: PPUSH
25146: CALL_OW 488
25150: NOT
25151: OR
25152: IFFALSE 25156
// exit ;
25154: GO 25912
// side := GetSide ( depot ) ;
25156: LD_ADDR_VAR 0 9
25160: PUSH
25161: LD_VAR 0 1
25165: PPUSH
25166: CALL_OW 255
25170: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25171: LD_VAR 0 9
25175: PPUSH
25176: LD_VAR 0 2
25180: PPUSH
25181: CALL 24641 0 2
25185: NOT
25186: IFFALSE 25190
// exit ;
25188: GO 25912
// pom := GetBase ( depot ) ;
25190: LD_ADDR_VAR 0 10
25194: PUSH
25195: LD_VAR 0 1
25199: PPUSH
25200: CALL_OW 274
25204: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25205: LD_ADDR_VAR 0 11
25209: PUSH
25210: LD_VAR 0 2
25214: PPUSH
25215: LD_VAR 0 1
25219: PPUSH
25220: CALL_OW 248
25224: PPUSH
25225: CALL_OW 450
25229: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25230: LD_VAR 0 10
25234: PPUSH
25235: LD_INT 1
25237: PPUSH
25238: CALL_OW 275
25242: PUSH
25243: LD_VAR 0 11
25247: PUSH
25248: LD_INT 1
25250: ARRAY
25251: GREATEREQUAL
25252: IFFALSE 25278
25254: PUSH
25255: LD_VAR 0 10
25259: PPUSH
25260: LD_INT 2
25262: PPUSH
25263: CALL_OW 275
25267: PUSH
25268: LD_VAR 0 11
25272: PUSH
25273: LD_INT 2
25275: ARRAY
25276: GREATEREQUAL
25277: AND
25278: IFFALSE 25304
25280: PUSH
25281: LD_VAR 0 10
25285: PPUSH
25286: LD_INT 3
25288: PPUSH
25289: CALL_OW 275
25293: PUSH
25294: LD_VAR 0 11
25298: PUSH
25299: LD_INT 3
25301: ARRAY
25302: GREATEREQUAL
25303: AND
25304: NOT
25305: IFFALSE 25309
// exit ;
25307: GO 25912
// if GetBType ( depot ) = b_depot then
25309: LD_VAR 0 1
25313: PPUSH
25314: CALL_OW 266
25318: PUSH
25319: LD_INT 0
25321: EQUAL
25322: IFFALSE 25334
// dist := 28 else
25324: LD_ADDR_VAR 0 14
25328: PUSH
25329: LD_INT 28
25331: ST_TO_ADDR
25332: GO 25342
// dist := 36 ;
25334: LD_ADDR_VAR 0 14
25338: PUSH
25339: LD_INT 36
25341: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25342: LD_VAR 0 1
25346: PPUSH
25347: LD_VAR 0 3
25351: PPUSH
25352: LD_VAR 0 4
25356: PPUSH
25357: CALL_OW 297
25361: PUSH
25362: LD_VAR 0 14
25366: GREATER
25367: IFFALSE 25371
// exit ;
25369: GO 25912
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25371: LD_ADDR_VAR 0 12
25375: PUSH
25376: LD_VAR 0 2
25380: PPUSH
25381: LD_VAR 0 3
25385: PPUSH
25386: LD_VAR 0 4
25390: PPUSH
25391: LD_VAR 0 5
25395: PPUSH
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 248
25405: PPUSH
25406: LD_INT 0
25408: PPUSH
25409: CALL 25917 0 6
25413: ST_TO_ADDR
// if not hexes then
25414: LD_VAR 0 12
25418: NOT
25419: IFFALSE 25423
// exit ;
25421: GO 25912
// hex := GetHexInfo ( x , y ) ;
25423: LD_ADDR_VAR 0 15
25427: PUSH
25428: LD_VAR 0 3
25432: PPUSH
25433: LD_VAR 0 4
25437: PPUSH
25438: CALL_OW 546
25442: ST_TO_ADDR
// if hex [ 1 ] then
25443: LD_VAR 0 15
25447: PUSH
25448: LD_INT 1
25450: ARRAY
25451: IFFALSE 25455
// exit ;
25453: GO 25912
// height := hex [ 2 ] ;
25455: LD_ADDR_VAR 0 13
25459: PUSH
25460: LD_VAR 0 15
25464: PUSH
25465: LD_INT 2
25467: ARRAY
25468: ST_TO_ADDR
// for i = 1 to hexes do
25469: LD_ADDR_VAR 0 7
25473: PUSH
25474: DOUBLE
25475: LD_INT 1
25477: DEC
25478: ST_TO_ADDR
25479: LD_VAR 0 12
25483: PUSH
25484: FOR_TO
25485: IFFALSE 25829
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25487: LD_VAR 0 12
25491: PUSH
25492: LD_VAR 0 7
25496: ARRAY
25497: PUSH
25498: LD_INT 1
25500: ARRAY
25501: PPUSH
25502: LD_VAR 0 12
25506: PUSH
25507: LD_VAR 0 7
25511: ARRAY
25512: PUSH
25513: LD_INT 2
25515: ARRAY
25516: PPUSH
25517: CALL_OW 488
25521: NOT
25522: IFTRUE 25564
25524: PUSH
25525: LD_VAR 0 12
25529: PUSH
25530: LD_VAR 0 7
25534: ARRAY
25535: PUSH
25536: LD_INT 1
25538: ARRAY
25539: PPUSH
25540: LD_VAR 0 12
25544: PUSH
25545: LD_VAR 0 7
25549: ARRAY
25550: PUSH
25551: LD_INT 2
25553: ARRAY
25554: PPUSH
25555: CALL_OW 428
25559: PUSH
25560: LD_INT 0
25562: GREATER
25563: OR
25564: IFTRUE 25602
25566: PUSH
25567: LD_VAR 0 12
25571: PUSH
25572: LD_VAR 0 7
25576: ARRAY
25577: PUSH
25578: LD_INT 1
25580: ARRAY
25581: PPUSH
25582: LD_VAR 0 12
25586: PUSH
25587: LD_VAR 0 7
25591: ARRAY
25592: PUSH
25593: LD_INT 2
25595: ARRAY
25596: PPUSH
25597: CALL_OW 351
25601: OR
25602: IFFALSE 25608
// exit ;
25604: POP
25605: POP
25606: GO 25912
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25608: LD_ADDR_VAR 0 8
25612: PUSH
25613: LD_VAR 0 12
25617: PUSH
25618: LD_VAR 0 7
25622: ARRAY
25623: PUSH
25624: LD_INT 1
25626: ARRAY
25627: PPUSH
25628: LD_VAR 0 12
25632: PUSH
25633: LD_VAR 0 7
25637: ARRAY
25638: PUSH
25639: LD_INT 2
25641: ARRAY
25642: PPUSH
25643: CALL_OW 546
25647: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25648: LD_VAR 0 8
25652: PUSH
25653: LD_INT 1
25655: ARRAY
25656: IFTRUE 25678
25658: PUSH
25659: LD_VAR 0 8
25663: PUSH
25664: LD_INT 2
25666: ARRAY
25667: PUSH
25668: LD_VAR 0 13
25672: PUSH
25673: LD_INT 2
25675: PLUS
25676: GREATER
25677: OR
25678: IFTRUE 25700
25680: PUSH
25681: LD_VAR 0 8
25685: PUSH
25686: LD_INT 2
25688: ARRAY
25689: PUSH
25690: LD_VAR 0 13
25694: PUSH
25695: LD_INT 2
25697: MINUS
25698: LESS
25699: OR
25700: IFTRUE 25768
25702: PUSH
25703: LD_VAR 0 8
25707: PUSH
25708: LD_INT 3
25710: ARRAY
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: LD_INT 8
25717: PUSH
25718: LD_INT 9
25720: PUSH
25721: LD_INT 10
25723: PUSH
25724: LD_INT 11
25726: PUSH
25727: LD_INT 12
25729: PUSH
25730: LD_INT 13
25732: PUSH
25733: LD_INT 16
25735: PUSH
25736: LD_INT 17
25738: PUSH
25739: LD_INT 18
25741: PUSH
25742: LD_INT 19
25744: PUSH
25745: LD_INT 20
25747: PUSH
25748: LD_INT 21
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: IN
25766: NOT
25767: OR
25768: IFTRUE 25781
25770: PUSH
25771: LD_VAR 0 8
25775: PUSH
25776: LD_INT 5
25778: ARRAY
25779: NOT
25780: OR
25781: IFTRUE 25821
25783: PUSH
25784: LD_VAR 0 8
25788: PUSH
25789: LD_INT 6
25791: ARRAY
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: LD_INT 7
25801: PUSH
25802: LD_INT 9
25804: PUSH
25805: LD_INT 10
25807: PUSH
25808: LD_INT 11
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: IN
25819: NOT
25820: OR
25821: IFFALSE 25827
// exit ;
25823: POP
25824: POP
25825: GO 25912
// end ;
25827: GO 25484
25829: POP
25830: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25831: LD_VAR 0 9
25835: PPUSH
25836: LD_VAR 0 3
25840: PPUSH
25841: LD_VAR 0 4
25845: PPUSH
25846: LD_INT 20
25848: PPUSH
25849: CALL 17731 0 4
25853: PUSH
25854: LD_INT 4
25856: ARRAY
25857: IFFALSE 25861
// exit ;
25859: GO 25912
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25861: LD_VAR 0 2
25865: PUSH
25866: LD_INT 29
25868: PUSH
25869: LD_INT 30
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: IN
25876: IFFALSE 25900
25878: PUSH
25879: LD_VAR 0 3
25883: PPUSH
25884: LD_VAR 0 4
25888: PPUSH
25889: LD_VAR 0 9
25893: PPUSH
25894: CALL_OW 440
25898: NOT
25899: AND
25900: IFFALSE 25904
// exit ;
25902: GO 25912
// result := true ;
25904: LD_ADDR_VAR 0 6
25908: PUSH
25909: LD_INT 1
25911: ST_TO_ADDR
// end ;
25912: LD_VAR 0 6
25916: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25917: LD_INT 0
25919: PPUSH
25920: PPUSH
25921: PPUSH
25922: PPUSH
25923: PPUSH
25924: PPUSH
25925: PPUSH
25926: PPUSH
25927: PPUSH
25928: PPUSH
25929: PPUSH
25930: PPUSH
25931: PPUSH
25932: PPUSH
25933: PPUSH
25934: PPUSH
25935: PPUSH
25936: PPUSH
25937: PPUSH
25938: PPUSH
25939: PPUSH
25940: PPUSH
25941: PPUSH
25942: PPUSH
25943: PPUSH
25944: PPUSH
25945: PPUSH
25946: PPUSH
25947: PPUSH
25948: PPUSH
25949: PPUSH
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
// result = [ ] ;
25977: LD_ADDR_VAR 0 7
25981: PUSH
25982: EMPTY
25983: ST_TO_ADDR
// temp_list = [ ] ;
25984: LD_ADDR_VAR 0 9
25988: PUSH
25989: EMPTY
25990: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25991: LD_VAR 0 4
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: LD_INT 3
26007: PUSH
26008: LD_INT 4
26010: PUSH
26011: LD_INT 5
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: IN
26022: NOT
26023: IFTRUE 26066
26025: PUSH
26026: LD_VAR 0 1
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: IN
26041: IFFALSE 26065
26043: PUSH
26044: LD_VAR 0 5
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: IN
26063: NOT
26064: AND
26065: OR
26066: IFFALSE 26070
// exit ;
26068: GO 44469
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26070: LD_VAR 0 1
26074: PUSH
26075: LD_INT 6
26077: PUSH
26078: LD_INT 7
26080: PUSH
26081: LD_INT 8
26083: PUSH
26084: LD_INT 13
26086: PUSH
26087: LD_INT 12
26089: PUSH
26090: LD_INT 15
26092: PUSH
26093: LD_INT 11
26095: PUSH
26096: LD_INT 14
26098: PUSH
26099: LD_INT 10
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: IN
26113: IFFALSE 26123
// btype = b_lab ;
26115: LD_ADDR_VAR 0 1
26119: PUSH
26120: LD_INT 6
26122: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26123: LD_VAR 0 6
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 2
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: IN
26142: NOT
26143: IFTRUE 26211
26145: PUSH
26146: LD_VAR 0 1
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: LD_INT 6
26165: PUSH
26166: LD_INT 36
26168: PUSH
26169: LD_INT 4
26171: PUSH
26172: LD_INT 5
26174: PUSH
26175: LD_INT 31
26177: PUSH
26178: LD_INT 32
26180: PUSH
26181: LD_INT 33
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: IN
26197: NOT
26198: IFFALSE 26210
26200: PUSH
26201: LD_VAR 0 6
26205: PUSH
26206: LD_INT 1
26208: EQUAL
26209: AND
26210: OR
26211: IFTRUE 26243
26213: PUSH
26214: LD_VAR 0 1
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 3
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: IN
26229: NOT
26230: IFFALSE 26242
26232: PUSH
26233: LD_VAR 0 6
26237: PUSH
26238: LD_INT 2
26240: EQUAL
26241: AND
26242: OR
26243: IFFALSE 26253
// mode = 0 ;
26245: LD_ADDR_VAR 0 6
26249: PUSH
26250: LD_INT 0
26252: ST_TO_ADDR
// case mode of 0 :
26253: LD_VAR 0 6
26257: PUSH
26258: LD_INT 0
26260: DOUBLE
26261: EQUAL
26262: IFTRUE 26266
26264: GO 37719
26266: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26267: LD_ADDR_VAR 0 11
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: NEG
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 2
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: LD_INT 2
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: LD_INT 3
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: LD_INT 3
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26460: LD_ADDR_VAR 0 12
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 2
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 2
26583: NEG
26584: PUSH
26585: LD_INT 0
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 2
26594: NEG
26595: PUSH
26596: LD_INT 1
26598: NEG
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: NEG
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 3
26617: NEG
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 3
26628: NEG
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26656: LD_ADDR_VAR 0 13
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: LD_INT 1
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: PUSH
26695: LD_INT 1
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: LD_INT 1
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 1
26714: NEG
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 1
26737: NEG
26738: PUSH
26739: LD_INT 2
26741: NEG
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 2
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: LD_INT 2
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 2
26791: NEG
26792: PUSH
26793: LD_INT 2
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 2
26803: NEG
26804: PUSH
26805: LD_INT 3
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 3
26815: NEG
26816: PUSH
26817: LD_INT 2
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 3
26827: NEG
26828: PUSH
26829: LD_INT 3
26831: NEG
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26855: LD_ADDR_VAR 0 14
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: LD_INT 1
26875: NEG
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: LD_INT 2
26940: NEG
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: LD_INT 3
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: LD_INT 3
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27051: LD_ADDR_VAR 0 15
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 2
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: NEG
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 2
27185: NEG
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 2
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 3
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 3
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27244: LD_ADDR_VAR 0 16
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: NEG
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 2
27379: NEG
27380: PUSH
27381: LD_INT 2
27383: NEG
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 3
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 3
27401: PUSH
27402: LD_INT 3
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: PUSH
27412: LD_INT 3
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27437: LD_ADDR_VAR 0 17
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: LD_INT 0
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: LD_INT 1
27457: NEG
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 1
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 1
27495: NEG
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: NEG
27519: PUSH
27520: LD_INT 2
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 2
27572: PUSH
27573: LD_INT 2
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: LD_INT 2
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: NEG
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: NEG
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27667: LD_ADDR_VAR 0 18
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: LD_INT 1
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 1
27748: NEG
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: LD_INT 2
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 2
27782: PUSH
27783: LD_INT 0
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 2
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 2
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: NEG
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: NEG
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 2
27866: NEG
27867: PUSH
27868: LD_INT 2
27870: NEG
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27897: LD_ADDR_VAR 0 19
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: LD_INT 0
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 1
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 1
27955: NEG
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 1
27978: NEG
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 2
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 2
28012: PUSH
28013: LD_INT 0
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 2
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 2
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 2
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 2
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: NEG
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 2
28084: NEG
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28127: LD_ADDR_VAR 0 20
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: LD_INT 1
28147: NEG
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: LD_INT 1
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: NEG
28209: PUSH
28210: LD_INT 2
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: LD_INT 1
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 2
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 2
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: LD_INT 2
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: LD_INT 2
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 2
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: LD_INT 1
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: NEG
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: NEG
28315: PUSH
28316: LD_INT 1
28318: NEG
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: LD_INT 2
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28357: LD_ADDR_VAR 0 21
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 0
28374: PUSH
28375: LD_INT 1
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 1
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: LD_INT 1
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: NEG
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: LD_INT 2
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: LD_INT 2
28453: NEG
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: LD_INT 1
28464: NEG
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 2
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 2
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 2
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: NEG
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 2
28544: NEG
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 2
28556: NEG
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28587: LD_ADDR_VAR 0 22
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: LD_INT 1
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 1
28645: NEG
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 1
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 1
28668: NEG
28669: PUSH
28670: LD_INT 2
28672: NEG
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 2
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: LD_INT 2
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 2
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: NEG
28753: PUSH
28754: LD_INT 1
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: NEG
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: NEG
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 2
28786: NEG
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28817: LD_ADDR_VAR 0 23
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: LD_INT 1
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 2
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 2
28932: PUSH
28933: LD_INT 0
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 2
28993: NEG
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 2
29028: NEG
29029: PUSH
29030: LD_INT 3
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: LD_INT 3
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: LD_INT 2
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29097: LD_ADDR_VAR 0 24
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: LD_INT 1
29170: NEG
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: LD_INT 2
29182: NEG
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: LD_INT 2
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 0
29252: PUSH
29253: LD_INT 2
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 2
29273: NEG
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 2
29284: NEG
29285: PUSH
29286: LD_INT 1
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 2
29296: NEG
29297: PUSH
29298: LD_INT 2
29300: NEG
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: LD_INT 2
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 1
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 3
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29373: LD_ADDR_VAR 0 25
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: LD_INT 0
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 0
29390: PUSH
29391: LD_INT 1
29393: NEG
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: LD_INT 1
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: NEG
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: LD_INT 2
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: LD_INT 1
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 2
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: LD_INT 2
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 1
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: LD_INT 2
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: NEG
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: NEG
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: NEG
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 3
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: LD_INT 3
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29647: LD_ADDR_VAR 0 26
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: LD_INT 0
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 1
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 2
29782: PUSH
29783: LD_INT 2
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: LD_INT 2
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 1
29812: NEG
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 2
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: LD_INT 3
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 2
29889: NEG
29890: PUSH
29891: LD_INT 1
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29923: LD_ADDR_VAR 0 27
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: LD_INT 0
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 2
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 2
30099: NEG
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: NEG
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 2
30122: NEG
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 2
30145: NEG
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 3
30156: NEG
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30203: LD_ADDR_VAR 0 28
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 2
30288: NEG
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 2
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 2
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 2
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 1
30368: NEG
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 2
30379: NEG
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 2
30402: NEG
30403: PUSH
30404: LD_INT 2
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 2
30414: NEG
30415: PUSH
30416: LD_INT 3
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 3
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 3
30438: NEG
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 3
30450: NEG
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30485: LD_ADDR_VAR 0 29
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: LD_INT 0
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 0
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: LD_INT 1
30558: NEG
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: LD_INT 2
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: LD_INT 1
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 2
30651: NEG
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 2
30663: NEG
30664: PUSH
30665: LD_INT 2
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 2
30675: NEG
30676: PUSH
30677: LD_INT 3
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: LD_INT 3
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: LD_INT 2
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 3
30729: NEG
30730: PUSH
30731: LD_INT 2
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30764: LD_ADDR_VAR 0 30
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: NEG
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: LD_INT 1
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: LD_INT 2
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 2
30930: NEG
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: LD_INT 2
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 3
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: LD_INT 3
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 2
30996: NEG
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31042: LD_ADDR_VAR 0 31
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: NEG
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 2
31207: NEG
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: LD_INT 2
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: LD_INT 3
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: LD_INT 3
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: LD_INT 2
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: LD_INT 2
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31320: LD_ADDR_VAR 0 32
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 2
31416: NEG
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 2
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 1
31455: PUSH
31456: LD_INT 2
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: LD_INT 1
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: NEG
31498: PUSH
31499: LD_INT 1
31501: NEG
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: NEG
31510: PUSH
31511: LD_INT 3
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 3
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: LD_INT 3
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 2
31552: NEG
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 3
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31598: LD_ADDR_VAR 0 33
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 2
31788: NEG
31789: PUSH
31790: LD_INT 3
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: LD_INT 3
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: LD_INT 2
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31877: LD_ADDR_VAR 0 34
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: LD_INT 2
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 2
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 2
32002: PUSH
32003: LD_INT 2
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: LD_INT 2
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: NEG
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 2
32044: NEG
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: NEG
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: LD_INT 3
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 2
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 3
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32157: LD_ADDR_VAR 0 35
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 2
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32269: LD_ADDR_VAR 0 36
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: LD_INT 2
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32381: LD_ADDR_VAR 0 37
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32493: LD_ADDR_VAR 0 38
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: NEG
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: LD_INT 1
32566: NEG
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32605: LD_ADDR_VAR 0 39
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: LD_INT 2
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32717: LD_ADDR_VAR 0 40
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: LD_INT 1
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32829: LD_ADDR_VAR 0 41
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: LD_INT 0
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: LD_INT 2
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 2
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 2
33007: NEG
33008: PUSH
33009: LD_INT 2
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: LD_INT 3
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 3
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 3
33062: PUSH
33063: LD_INT 2
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 3
33072: PUSH
33073: LD_INT 3
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 3
33103: NEG
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 3
33114: NEG
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 3
33126: NEG
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 3
33138: NEG
33139: PUSH
33140: LD_INT 3
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33179: LD_ADDR_VAR 0 42
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 1
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: LD_INT 2
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 2
33357: NEG
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: LD_INT 3
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: NEG
33382: PUSH
33383: LD_INT 3
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: LD_INT 3
33396: NEG
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 3
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 3
33425: PUSH
33426: LD_INT 3
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: LD_INT 3
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 3
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 2
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 3
33476: NEG
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 3
33488: NEG
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33529: LD_ADDR_VAR 0 43
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: NEG
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: NEG
33707: PUSH
33708: LD_INT 1
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: LD_INT 3
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: LD_INT 3
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: LD_INT 2
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 3
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 3
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 3
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 2
33814: NEG
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 3
33825: NEG
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 3
33836: NEG
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33877: LD_ADDR_VAR 0 44
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 1
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 1
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 2
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: NEG
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 2
34055: NEG
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 2
34067: NEG
34068: PUSH
34069: LD_INT 3
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 2
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 3
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 3
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 3
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 3
34120: PUSH
34121: LD_INT 3
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: LD_INT 3
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 3
34151: NEG
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 3
34162: NEG
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 3
34174: NEG
34175: PUSH
34176: LD_INT 2
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 3
34186: NEG
34187: PUSH
34188: LD_INT 3
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34227: LD_ADDR_VAR 0 45
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: LD_INT 0
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 1
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: LD_INT 2
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: LD_INT 2
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: LD_INT 3
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 1
34429: NEG
34430: PUSH
34431: LD_INT 3
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 3
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 3
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 3
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: LD_INT 3
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: LD_INT 2
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 3
34524: NEG
34525: PUSH
34526: LD_INT 2
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 3
34536: NEG
34537: PUSH
34538: LD_INT 3
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34577: LD_ADDR_VAR 0 46
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 0
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: LD_INT 1
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 2
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 2
34743: NEG
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 2
34754: NEG
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: LD_INT 3
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 0
34778: PUSH
34779: LD_INT 3
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 2
34792: NEG
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 3
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 3
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 3
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 2
34862: NEG
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 3
34873: NEG
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 3
34884: NEG
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34925: LD_ADDR_VAR 0 47
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 1
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: LD_INT 2
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 2
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 2
35040: NEG
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35076: LD_ADDR_VAR 0 48
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: LD_INT 2
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 2
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35223: LD_ADDR_VAR 0 49
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 1
35281: NEG
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 1
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: LD_INT 2
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35367: LD_ADDR_VAR 0 50
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35511: LD_ADDR_VAR 0 51
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: LD_INT 1
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 1
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: LD_INT 1
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 2
35634: NEG
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35658: LD_ADDR_VAR 0 52
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: LD_INT 2
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: NEG
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: NEG
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 2
35773: NEG
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35809: LD_ADDR_VAR 0 53
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: NEG
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: LD_INT 2
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 2
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 2
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 2
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: LD_INT 2
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 0
35964: PUSH
35965: LD_INT 2
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: NEG
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: LD_INT 1
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: LD_INT 2
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36039: LD_ADDR_VAR 0 54
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: LD_INT 2
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 0
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: NEG
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: LD_INT 2
36242: NEG
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36269: LD_ADDR_VAR 0 55
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: LD_INT 0
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: LD_INT 2
36354: NEG
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 2
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: LD_INT 2
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: NEG
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 2
36468: NEG
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36499: LD_ADDR_VAR 0 56
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 1
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: NEG
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: LD_INT 2
36595: NEG
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 2
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: LD_INT 2
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: LD_INT 2
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: NEG
36676: PUSH
36677: LD_INT 0
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 2
36686: NEG
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36729: LD_ADDR_VAR 0 57
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: LD_INT 2
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 2
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 2
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: LD_INT 1
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 2
36905: NEG
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 2
36928: NEG
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36959: LD_ADDR_VAR 0 58
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: LD_INT 0
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 1
37028: NEG
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 2
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 2
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 2
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 2
37135: NEG
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37189: LD_ADDR_VAR 0 59
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37277: LD_ADDR_VAR 0 60
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 1
37335: NEG
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: NEG
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37365: LD_ADDR_VAR 0 61
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37453: LD_ADDR_VAR 0 62
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 0
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37541: LD_ADDR_VAR 0 63
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 1
37599: NEG
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 1
37610: NEG
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37629: LD_ADDR_VAR 0 64
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 1
37702: NEG
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: ST_TO_ADDR
// end ; 1 :
37717: GO 43614
37719: LD_INT 1
37721: DOUBLE
37722: EQUAL
37723: IFTRUE 37727
37725: GO 40350
37727: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37728: LD_ADDR_VAR 0 11
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 3
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 3
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: LIST
37771: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37772: LD_ADDR_VAR 0 12
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 3
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 3
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37813: LD_ADDR_VAR 0 13
37817: PUSH
37818: LD_INT 3
37820: PUSH
37821: LD_INT 2
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 3
37830: PUSH
37831: LD_INT 3
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37853: LD_ADDR_VAR 0 14
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: LD_INT 3
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: LD_INT 3
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37894: LD_ADDR_VAR 0 15
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 3
37912: NEG
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 3
37923: NEG
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37938: LD_ADDR_VAR 0 16
37942: PUSH
37943: LD_INT 2
37945: NEG
37946: PUSH
37947: LD_INT 3
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 3
37957: NEG
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 3
37969: NEG
37970: PUSH
37971: LD_INT 3
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37984: LD_ADDR_VAR 0 17
37988: PUSH
37989: LD_INT 1
37991: NEG
37992: PUSH
37993: LD_INT 3
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: LD_INT 3
38006: NEG
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38028: LD_ADDR_VAR 0 18
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 3
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 3
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38069: LD_ADDR_VAR 0 19
38073: PUSH
38074: LD_INT 3
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 3
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 3
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38109: LD_ADDR_VAR 0 20
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: LD_INT 3
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 3
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: LIST
38149: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38150: LD_ADDR_VAR 0 21
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 3
38168: NEG
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 3
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: LIST
38193: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38194: LD_ADDR_VAR 0 22
38198: PUSH
38199: LD_INT 2
38201: NEG
38202: PUSH
38203: LD_INT 3
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 3
38213: NEG
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 3
38225: NEG
38226: PUSH
38227: LD_INT 3
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38240: LD_ADDR_VAR 0 23
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 3
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: LD_INT 4
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: LD_INT 3
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: LIST
38283: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38284: LD_ADDR_VAR 0 24
38288: PUSH
38289: LD_INT 3
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 3
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 4
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: LIST
38324: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38325: LD_ADDR_VAR 0 25
38329: PUSH
38330: LD_INT 3
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 4
38342: PUSH
38343: LD_INT 3
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 3
38352: PUSH
38353: LD_INT 4
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38365: LD_ADDR_VAR 0 26
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: LD_INT 3
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: LD_INT 4
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: LD_INT 3
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38406: LD_ADDR_VAR 0 27
38410: PUSH
38411: LD_INT 3
38413: NEG
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 3
38424: NEG
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 4
38435: NEG
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: LIST
38449: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38450: LD_ADDR_VAR 0 28
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: LD_INT 4
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 4
38481: NEG
38482: PUSH
38483: LD_INT 3
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38496: LD_ADDR_VAR 0 29
38500: PUSH
38501: LD_INT 1
38503: NEG
38504: PUSH
38505: LD_INT 3
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 0
38515: PUSH
38516: LD_INT 3
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: PUSH
38527: LD_INT 2
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: LD_INT 4
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: LD_INT 4
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: PUSH
38561: LD_INT 3
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 5
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 5
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 4
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: LD_INT 6
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: LD_INT 6
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 5
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38651: LD_ADDR_VAR 0 30
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 3
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 3
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 4
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 4
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 4
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 5
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 5
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 6
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 6
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38794: LD_ADDR_VAR 0 31
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: LD_INT 3
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: LD_INT 3
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 4
38831: PUSH
38832: LD_INT 3
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 4
38841: PUSH
38842: LD_INT 4
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 3
38851: PUSH
38852: LD_INT 4
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 5
38861: PUSH
38862: LD_INT 4
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 5
38871: PUSH
38872: LD_INT 5
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 4
38881: PUSH
38882: LD_INT 5
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 6
38891: PUSH
38892: LD_INT 5
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 6
38901: PUSH
38902: LD_INT 6
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 5
38911: PUSH
38912: LD_INT 6
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38933: LD_ADDR_VAR 0 32
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 3
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 4
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 4
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: NEG
38992: PUSH
38993: LD_INT 3
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: LD_INT 5
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: LD_INT 5
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 4
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 6
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: LD_INT 6
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: LD_INT 5
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39076: LD_ADDR_VAR 0 33
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: NEG
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 3
39117: NEG
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 4
39128: NEG
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 4
39139: NEG
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 4
39151: NEG
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 5
39162: NEG
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 5
39173: NEG
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 5
39185: NEG
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 6
39196: NEG
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 6
39207: NEG
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39231: LD_ADDR_VAR 0 34
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: LD_INT 3
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 3
39250: NEG
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 3
39262: NEG
39263: PUSH
39264: LD_INT 3
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 3
39274: NEG
39275: PUSH
39276: LD_INT 4
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 4
39286: NEG
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 4
39298: NEG
39299: PUSH
39300: LD_INT 4
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 4
39310: NEG
39311: PUSH
39312: LD_INT 5
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 5
39322: NEG
39323: PUSH
39324: LD_INT 4
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 5
39334: NEG
39335: PUSH
39336: LD_INT 5
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 5
39346: NEG
39347: PUSH
39348: LD_INT 6
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 6
39358: NEG
39359: PUSH
39360: LD_INT 5
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 6
39370: NEG
39371: PUSH
39372: LD_INT 6
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39394: LD_ADDR_VAR 0 41
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: LD_INT 3
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39438: LD_ADDR_VAR 0 42
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 3
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39479: LD_ADDR_VAR 0 43
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: LD_INT 2
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 3
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: LD_INT 3
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39519: LD_ADDR_VAR 0 44
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39560: LD_ADDR_VAR 0 45
39564: PUSH
39565: LD_INT 2
39567: NEG
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39604: LD_ADDR_VAR 0 46
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: LD_INT 3
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39650: LD_ADDR_VAR 0 47
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: LD_INT 3
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 3
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39683: LD_ADDR_VAR 0 48
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39714: LD_ADDR_VAR 0 49
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 3
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39743: LD_ADDR_VAR 0 50
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: LD_INT 3
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: LD_INT 3
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39772: LD_ADDR_VAR 0 51
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 2
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39803: LD_ADDR_VAR 0 52
39807: PUSH
39808: LD_INT 3
39810: NEG
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 3
39822: NEG
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39836: LD_ADDR_VAR 0 53
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 3
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39880: LD_ADDR_VAR 0 54
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 3
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39921: LD_ADDR_VAR 0 55
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: LD_INT 3
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: LIST
39960: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39961: LD_ADDR_VAR 0 56
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 3
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40002: LD_ADDR_VAR 0 57
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 3
40020: NEG
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 3
40031: NEG
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40046: LD_ADDR_VAR 0 58
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: LD_INT 3
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 3
40065: NEG
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 3
40077: NEG
40078: PUSH
40079: LD_INT 3
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40092: LD_ADDR_VAR 0 59
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40136: LD_ADDR_VAR 0 60
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: LIST
40176: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40177: LD_ADDR_VAR 0 61
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40217: LD_ADDR_VAR 0 62
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40258: LD_ADDR_VAR 0 63
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: NEG
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40302: LD_ADDR_VAR 0 64
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: LD_INT 2
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: NEG
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: ST_TO_ADDR
// end ; 2 :
40348: GO 43614
40350: LD_INT 2
40352: DOUBLE
40353: EQUAL
40354: IFTRUE 40358
40356: GO 43613
40358: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40359: LD_ADDR_VAR 0 29
40363: PUSH
40364: LD_INT 4
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 4
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 5
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 5
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 4
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 3
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 3
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 2
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 5
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 3
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 4
40479: PUSH
40480: LD_INT 3
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 4
40489: PUSH
40490: LD_INT 4
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 3
40499: PUSH
40500: LD_INT 4
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: LD_INT 3
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 4
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 4
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: LD_INT 4
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: LD_INT 3
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 4
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 5
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: LD_INT 5
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: LD_INT 4
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 3
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 2
40621: PUSH
40622: LD_INT 5
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 3
40642: NEG
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 3
40653: NEG
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: NEG
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 3
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 4
40698: NEG
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 4
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 4
40721: NEG
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 4
40744: NEG
40745: PUSH
40746: LD_INT 4
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 4
40756: NEG
40757: PUSH
40758: LD_INT 5
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 3
40768: NEG
40769: PUSH
40770: LD_INT 4
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 3
40780: NEG
40781: PUSH
40782: LD_INT 3
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 4
40792: NEG
40793: PUSH
40794: LD_INT 3
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 5
40804: NEG
40805: PUSH
40806: LD_INT 4
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 5
40816: NEG
40817: PUSH
40818: LD_INT 5
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 3
40828: NEG
40829: PUSH
40830: LD_INT 5
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 5
40840: NEG
40841: PUSH
40842: LD_INT 3
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40897: LD_ADDR_VAR 0 30
40901: PUSH
40902: LD_INT 4
40904: PUSH
40905: LD_INT 4
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 4
40914: PUSH
40915: LD_INT 3
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 5
40924: PUSH
40925: LD_INT 4
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 5
40934: PUSH
40935: LD_INT 5
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 4
40944: PUSH
40945: LD_INT 5
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 3
40954: PUSH
40955: LD_INT 4
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 3
40964: PUSH
40965: LD_INT 3
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 5
40974: PUSH
40975: LD_INT 3
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 3
40984: PUSH
40985: LD_INT 5
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 3
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 3
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: LD_INT 4
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: LD_INT 4
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: LD_INT 3
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: PUSH
41067: LD_INT 4
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 4
41087: NEG
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 4
41098: NEG
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 3
41110: NEG
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 3
41121: NEG
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 4
41132: NEG
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 5
41143: NEG
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 5
41154: NEG
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 5
41166: NEG
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 3
41178: NEG
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 3
41189: NEG
41190: PUSH
41191: LD_INT 3
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 3
41201: NEG
41202: PUSH
41203: LD_INT 4
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 2
41213: NEG
41214: PUSH
41215: LD_INT 3
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 2
41225: NEG
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 3
41237: NEG
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 4
41249: NEG
41250: PUSH
41251: LD_INT 3
41253: NEG
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 4
41261: NEG
41262: PUSH
41263: LD_INT 4
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: LD_INT 4
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 4
41285: NEG
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: LD_INT 4
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 5
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 4
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 3
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 3
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 4
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: LD_INT 5
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 3
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 5
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41444: LD_ADDR_VAR 0 31
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 4
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 4
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 5
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 5
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 4
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 3
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: LD_INT 5
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: LD_INT 3
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 3
41544: NEG
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 3
41555: NEG
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 3
41589: NEG
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 4
41600: NEG
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 4
41611: NEG
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 4
41623: NEG
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 4
41646: NEG
41647: PUSH
41648: LD_INT 4
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 4
41658: NEG
41659: PUSH
41660: LD_INT 5
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 3
41670: NEG
41671: PUSH
41672: LD_INT 4
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 3
41682: NEG
41683: PUSH
41684: LD_INT 3
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 4
41694: NEG
41695: PUSH
41696: LD_INT 3
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 5
41706: NEG
41707: PUSH
41708: LD_INT 4
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 5
41718: NEG
41719: PUSH
41720: LD_INT 5
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 3
41730: NEG
41731: PUSH
41732: LD_INT 5
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 5
41742: NEG
41743: PUSH
41744: LD_INT 3
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: LD_INT 3
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 4
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 3
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 3
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 4
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 4
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 4
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 5
41877: PUSH
41878: LD_INT 0
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 5
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 4
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 3
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 3
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 3
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 5
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41994: LD_ADDR_VAR 0 32
41998: PUSH
41999: LD_INT 4
42001: NEG
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 4
42012: NEG
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 3
42024: NEG
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 3
42035: NEG
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 4
42046: NEG
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 5
42057: NEG
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 5
42068: NEG
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 5
42080: NEG
42081: PUSH
42082: LD_INT 2
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 3
42092: NEG
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 3
42103: NEG
42104: PUSH
42105: LD_INT 3
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: NEG
42116: PUSH
42117: LD_INT 4
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: LD_INT 3
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 4
42163: NEG
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 4
42175: NEG
42176: PUSH
42177: LD_INT 4
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 2
42187: NEG
42188: PUSH
42189: LD_INT 4
42191: NEG
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 4
42199: NEG
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 4
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 5
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 4
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 3
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 3
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: LD_INT 4
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 5
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: LD_INT 3
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: LD_INT 5
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 3
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 3
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 4
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 4
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 2
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 2
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 4
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 4
42406: PUSH
42407: LD_INT 4
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 4
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 5
42426: PUSH
42427: LD_INT 4
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 5
42436: PUSH
42437: LD_INT 5
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 4
42446: PUSH
42447: LD_INT 5
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 3
42456: PUSH
42457: LD_INT 4
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 3
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 5
42476: PUSH
42477: LD_INT 3
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 3
42486: PUSH
42487: LD_INT 5
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42541: LD_ADDR_VAR 0 33
42545: PUSH
42546: LD_INT 4
42548: NEG
42549: PUSH
42550: LD_INT 4
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 4
42560: NEG
42561: PUSH
42562: LD_INT 5
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 3
42572: NEG
42573: PUSH
42574: LD_INT 4
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 3
42584: NEG
42585: PUSH
42586: LD_INT 3
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 4
42596: NEG
42597: PUSH
42598: LD_INT 3
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 5
42608: NEG
42609: PUSH
42610: LD_INT 4
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 5
42620: NEG
42621: PUSH
42622: LD_INT 5
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 3
42632: NEG
42633: PUSH
42634: LD_INT 5
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 5
42644: NEG
42645: PUSH
42646: LD_INT 3
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 3
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 4
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: LD_INT 3
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 4
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: LD_INT 2
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: LD_INT 4
42750: NEG
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 4
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 4
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 5
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 5
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 4
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 3
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 3
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 5
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 4
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 4
42881: PUSH
42882: LD_INT 4
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 3
42891: PUSH
42892: LD_INT 4
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 4
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: LD_INT 4
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 4
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 3
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 4
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 5
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 5
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 4
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 3
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 5
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43079: LD_ADDR_VAR 0 34
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 4
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 5
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: LD_INT 4
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: LD_INT 3
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_INT 3
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 4
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: LD_INT 5
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: LD_INT 5
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 3
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 4
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 4
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: LD_INT 1
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 4
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 4
43281: PUSH
43282: LD_INT 4
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 4
43291: PUSH
43292: LD_INT 3
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 5
43301: PUSH
43302: LD_INT 4
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 5
43311: PUSH
43312: LD_INT 5
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 4
43321: PUSH
43322: LD_INT 5
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 3
43331: PUSH
43332: LD_INT 4
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 5
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: LD_INT 5
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 3
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 4
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 4
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 3
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: LD_INT 4
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 4
43464: NEG
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 4
43475: NEG
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: NEG
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 3
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 4
43509: NEG
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 5
43520: NEG
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 5
43531: NEG
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 5
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 3
43555: NEG
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: ST_TO_ADDR
// end ; end ;
43611: GO 43614
43613: POP
// case btype of b_depot , b_warehouse :
43614: LD_VAR 0 1
43618: PUSH
43619: LD_INT 0
43621: DOUBLE
43622: EQUAL
43623: IFTRUE 43633
43625: LD_INT 1
43627: DOUBLE
43628: EQUAL
43629: IFTRUE 43633
43631: GO 43834
43633: POP
// case nation of nation_american :
43634: LD_VAR 0 5
43638: PUSH
43639: LD_INT 1
43641: DOUBLE
43642: EQUAL
43643: IFTRUE 43647
43645: GO 43703
43647: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43648: LD_ADDR_VAR 0 9
43652: PUSH
43653: LD_VAR 0 11
43657: PUSH
43658: LD_VAR 0 12
43662: PUSH
43663: LD_VAR 0 13
43667: PUSH
43668: LD_VAR 0 14
43672: PUSH
43673: LD_VAR 0 15
43677: PUSH
43678: LD_VAR 0 16
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: PUSH
43691: LD_VAR 0 4
43695: PUSH
43696: LD_INT 1
43698: PLUS
43699: ARRAY
43700: ST_TO_ADDR
43701: GO 43832
43703: LD_INT 2
43705: DOUBLE
43706: EQUAL
43707: IFTRUE 43711
43709: GO 43767
43711: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43712: LD_ADDR_VAR 0 9
43716: PUSH
43717: LD_VAR 0 17
43721: PUSH
43722: LD_VAR 0 18
43726: PUSH
43727: LD_VAR 0 19
43731: PUSH
43732: LD_VAR 0 20
43736: PUSH
43737: LD_VAR 0 21
43741: PUSH
43742: LD_VAR 0 22
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: PUSH
43755: LD_VAR 0 4
43759: PUSH
43760: LD_INT 1
43762: PLUS
43763: ARRAY
43764: ST_TO_ADDR
43765: GO 43832
43767: LD_INT 3
43769: DOUBLE
43770: EQUAL
43771: IFTRUE 43775
43773: GO 43831
43775: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43776: LD_ADDR_VAR 0 9
43780: PUSH
43781: LD_VAR 0 23
43785: PUSH
43786: LD_VAR 0 24
43790: PUSH
43791: LD_VAR 0 25
43795: PUSH
43796: LD_VAR 0 26
43800: PUSH
43801: LD_VAR 0 27
43805: PUSH
43806: LD_VAR 0 28
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: PUSH
43819: LD_VAR 0 4
43823: PUSH
43824: LD_INT 1
43826: PLUS
43827: ARRAY
43828: ST_TO_ADDR
43829: GO 43832
43831: POP
43832: GO 44387
43834: LD_INT 2
43836: DOUBLE
43837: EQUAL
43838: IFTRUE 43848
43840: LD_INT 3
43842: DOUBLE
43843: EQUAL
43844: IFTRUE 43848
43846: GO 43904
43848: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43849: LD_ADDR_VAR 0 9
43853: PUSH
43854: LD_VAR 0 29
43858: PUSH
43859: LD_VAR 0 30
43863: PUSH
43864: LD_VAR 0 31
43868: PUSH
43869: LD_VAR 0 32
43873: PUSH
43874: LD_VAR 0 33
43878: PUSH
43879: LD_VAR 0 34
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: PUSH
43892: LD_VAR 0 4
43896: PUSH
43897: LD_INT 1
43899: PLUS
43900: ARRAY
43901: ST_TO_ADDR
43902: GO 44387
43904: LD_INT 16
43906: DOUBLE
43907: EQUAL
43908: IFTRUE 43966
43910: LD_INT 17
43912: DOUBLE
43913: EQUAL
43914: IFTRUE 43966
43916: LD_INT 18
43918: DOUBLE
43919: EQUAL
43920: IFTRUE 43966
43922: LD_INT 19
43924: DOUBLE
43925: EQUAL
43926: IFTRUE 43966
43928: LD_INT 22
43930: DOUBLE
43931: EQUAL
43932: IFTRUE 43966
43934: LD_INT 20
43936: DOUBLE
43937: EQUAL
43938: IFTRUE 43966
43940: LD_INT 21
43942: DOUBLE
43943: EQUAL
43944: IFTRUE 43966
43946: LD_INT 23
43948: DOUBLE
43949: EQUAL
43950: IFTRUE 43966
43952: LD_INT 24
43954: DOUBLE
43955: EQUAL
43956: IFTRUE 43966
43958: LD_INT 25
43960: DOUBLE
43961: EQUAL
43962: IFTRUE 43966
43964: GO 44022
43966: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43967: LD_ADDR_VAR 0 9
43971: PUSH
43972: LD_VAR 0 35
43976: PUSH
43977: LD_VAR 0 36
43981: PUSH
43982: LD_VAR 0 37
43986: PUSH
43987: LD_VAR 0 38
43991: PUSH
43992: LD_VAR 0 39
43996: PUSH
43997: LD_VAR 0 40
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: PUSH
44010: LD_VAR 0 4
44014: PUSH
44015: LD_INT 1
44017: PLUS
44018: ARRAY
44019: ST_TO_ADDR
44020: GO 44387
44022: LD_INT 6
44024: DOUBLE
44025: EQUAL
44026: IFTRUE 44078
44028: LD_INT 7
44030: DOUBLE
44031: EQUAL
44032: IFTRUE 44078
44034: LD_INT 8
44036: DOUBLE
44037: EQUAL
44038: IFTRUE 44078
44040: LD_INT 13
44042: DOUBLE
44043: EQUAL
44044: IFTRUE 44078
44046: LD_INT 12
44048: DOUBLE
44049: EQUAL
44050: IFTRUE 44078
44052: LD_INT 15
44054: DOUBLE
44055: EQUAL
44056: IFTRUE 44078
44058: LD_INT 11
44060: DOUBLE
44061: EQUAL
44062: IFTRUE 44078
44064: LD_INT 14
44066: DOUBLE
44067: EQUAL
44068: IFTRUE 44078
44070: LD_INT 10
44072: DOUBLE
44073: EQUAL
44074: IFTRUE 44078
44076: GO 44134
44078: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44079: LD_ADDR_VAR 0 9
44083: PUSH
44084: LD_VAR 0 41
44088: PUSH
44089: LD_VAR 0 42
44093: PUSH
44094: LD_VAR 0 43
44098: PUSH
44099: LD_VAR 0 44
44103: PUSH
44104: LD_VAR 0 45
44108: PUSH
44109: LD_VAR 0 46
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: PUSH
44122: LD_VAR 0 4
44126: PUSH
44127: LD_INT 1
44129: PLUS
44130: ARRAY
44131: ST_TO_ADDR
44132: GO 44387
44134: LD_INT 36
44136: DOUBLE
44137: EQUAL
44138: IFTRUE 44142
44140: GO 44198
44142: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44143: LD_ADDR_VAR 0 9
44147: PUSH
44148: LD_VAR 0 47
44152: PUSH
44153: LD_VAR 0 48
44157: PUSH
44158: LD_VAR 0 49
44162: PUSH
44163: LD_VAR 0 50
44167: PUSH
44168: LD_VAR 0 51
44172: PUSH
44173: LD_VAR 0 52
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: PUSH
44186: LD_VAR 0 4
44190: PUSH
44191: LD_INT 1
44193: PLUS
44194: ARRAY
44195: ST_TO_ADDR
44196: GO 44387
44198: LD_INT 4
44200: DOUBLE
44201: EQUAL
44202: IFTRUE 44224
44204: LD_INT 5
44206: DOUBLE
44207: EQUAL
44208: IFTRUE 44224
44210: LD_INT 34
44212: DOUBLE
44213: EQUAL
44214: IFTRUE 44224
44216: LD_INT 37
44218: DOUBLE
44219: EQUAL
44220: IFTRUE 44224
44222: GO 44280
44224: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44225: LD_ADDR_VAR 0 9
44229: PUSH
44230: LD_VAR 0 53
44234: PUSH
44235: LD_VAR 0 54
44239: PUSH
44240: LD_VAR 0 55
44244: PUSH
44245: LD_VAR 0 56
44249: PUSH
44250: LD_VAR 0 57
44254: PUSH
44255: LD_VAR 0 58
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: PUSH
44268: LD_VAR 0 4
44272: PUSH
44273: LD_INT 1
44275: PLUS
44276: ARRAY
44277: ST_TO_ADDR
44278: GO 44387
44280: LD_INT 31
44282: DOUBLE
44283: EQUAL
44284: IFTRUE 44330
44286: LD_INT 32
44288: DOUBLE
44289: EQUAL
44290: IFTRUE 44330
44292: LD_INT 33
44294: DOUBLE
44295: EQUAL
44296: IFTRUE 44330
44298: LD_INT 27
44300: DOUBLE
44301: EQUAL
44302: IFTRUE 44330
44304: LD_INT 26
44306: DOUBLE
44307: EQUAL
44308: IFTRUE 44330
44310: LD_INT 28
44312: DOUBLE
44313: EQUAL
44314: IFTRUE 44330
44316: LD_INT 29
44318: DOUBLE
44319: EQUAL
44320: IFTRUE 44330
44322: LD_INT 30
44324: DOUBLE
44325: EQUAL
44326: IFTRUE 44330
44328: GO 44386
44330: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44331: LD_ADDR_VAR 0 9
44335: PUSH
44336: LD_VAR 0 59
44340: PUSH
44341: LD_VAR 0 60
44345: PUSH
44346: LD_VAR 0 61
44350: PUSH
44351: LD_VAR 0 62
44355: PUSH
44356: LD_VAR 0 63
44360: PUSH
44361: LD_VAR 0 64
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: PUSH
44374: LD_VAR 0 4
44378: PUSH
44379: LD_INT 1
44381: PLUS
44382: ARRAY
44383: ST_TO_ADDR
44384: GO 44387
44386: POP
// temp_list2 = [ ] ;
44387: LD_ADDR_VAR 0 10
44391: PUSH
44392: EMPTY
44393: ST_TO_ADDR
// for i in temp_list do
44394: LD_ADDR_VAR 0 8
44398: PUSH
44399: LD_VAR 0 9
44403: PUSH
44404: FOR_IN
44405: IFFALSE 44457
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44407: LD_ADDR_VAR 0 10
44411: PUSH
44412: LD_VAR 0 10
44416: PUSH
44417: LD_VAR 0 8
44421: PUSH
44422: LD_INT 1
44424: ARRAY
44425: PUSH
44426: LD_VAR 0 2
44430: PLUS
44431: PUSH
44432: LD_VAR 0 8
44436: PUSH
44437: LD_INT 2
44439: ARRAY
44440: PUSH
44441: LD_VAR 0 3
44445: PLUS
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: EMPTY
44452: LIST
44453: ADD
44454: ST_TO_ADDR
44455: GO 44404
44457: POP
44458: POP
// result = temp_list2 ;
44459: LD_ADDR_VAR 0 7
44463: PUSH
44464: LD_VAR 0 10
44468: ST_TO_ADDR
// end ;
44469: LD_VAR 0 7
44473: RET
// export function EnemyInRange ( unit , dist ) ; begin
44474: LD_INT 0
44476: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44477: LD_ADDR_VAR 0 3
44481: PUSH
44482: LD_VAR 0 1
44486: PPUSH
44487: CALL_OW 255
44491: PPUSH
44492: LD_VAR 0 1
44496: PPUSH
44497: CALL_OW 250
44501: PPUSH
44502: LD_VAR 0 1
44506: PPUSH
44507: CALL_OW 251
44511: PPUSH
44512: LD_VAR 0 2
44516: PPUSH
44517: CALL 17731 0 4
44521: PUSH
44522: LD_INT 4
44524: ARRAY
44525: ST_TO_ADDR
// end ;
44526: LD_VAR 0 3
44530: RET
// export function PlayerSeeMe ( unit ) ; begin
44531: LD_INT 0
44533: PPUSH
// result := See ( your_side , unit ) ;
44534: LD_ADDR_VAR 0 2
44538: PUSH
44539: LD_OWVAR 2
44543: PPUSH
44544: LD_VAR 0 1
44548: PPUSH
44549: CALL_OW 292
44553: ST_TO_ADDR
// end ;
44554: LD_VAR 0 2
44558: RET
// export function ReverseDir ( unit ) ; begin
44559: LD_INT 0
44561: PPUSH
// if not unit then
44562: LD_VAR 0 1
44566: NOT
44567: IFFALSE 44571
// exit ;
44569: GO 44594
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44571: LD_ADDR_VAR 0 2
44575: PUSH
44576: LD_VAR 0 1
44580: PPUSH
44581: CALL_OW 254
44585: PUSH
44586: LD_INT 3
44588: PLUS
44589: PUSH
44590: LD_INT 6
44592: MOD
44593: ST_TO_ADDR
// end ;
44594: LD_VAR 0 2
44598: RET
// export function ReverseArray ( array ) ; var i ; begin
44599: LD_INT 0
44601: PPUSH
44602: PPUSH
// if not array then
44603: LD_VAR 0 1
44607: NOT
44608: IFFALSE 44612
// exit ;
44610: GO 44667
// result := [ ] ;
44612: LD_ADDR_VAR 0 2
44616: PUSH
44617: EMPTY
44618: ST_TO_ADDR
// for i := array downto 1 do
44619: LD_ADDR_VAR 0 3
44623: PUSH
44624: DOUBLE
44625: LD_VAR 0 1
44629: INC
44630: ST_TO_ADDR
44631: LD_INT 1
44633: PUSH
44634: FOR_DOWNTO
44635: IFFALSE 44665
// result := Join ( result , array [ i ] ) ;
44637: LD_ADDR_VAR 0 2
44641: PUSH
44642: LD_VAR 0 2
44646: PPUSH
44647: LD_VAR 0 1
44651: PUSH
44652: LD_VAR 0 3
44656: ARRAY
44657: PPUSH
44658: CALL 49519 0 2
44662: ST_TO_ADDR
44663: GO 44634
44665: POP
44666: POP
// end ;
44667: LD_VAR 0 2
44671: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44672: LD_INT 0
44674: PPUSH
44675: PPUSH
44676: PPUSH
44677: PPUSH
44678: PPUSH
44679: PPUSH
// if not unit or not hexes then
44680: LD_VAR 0 1
44684: NOT
44685: IFTRUE 44694
44687: PUSH
44688: LD_VAR 0 2
44692: NOT
44693: OR
44694: IFFALSE 44698
// exit ;
44696: GO 44821
// dist := 9999 ;
44698: LD_ADDR_VAR 0 5
44702: PUSH
44703: LD_INT 9999
44705: ST_TO_ADDR
// for i = 1 to hexes do
44706: LD_ADDR_VAR 0 4
44710: PUSH
44711: DOUBLE
44712: LD_INT 1
44714: DEC
44715: ST_TO_ADDR
44716: LD_VAR 0 2
44720: PUSH
44721: FOR_TO
44722: IFFALSE 44809
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44724: LD_ADDR_VAR 0 6
44728: PUSH
44729: LD_VAR 0 1
44733: PPUSH
44734: LD_VAR 0 2
44738: PUSH
44739: LD_VAR 0 4
44743: ARRAY
44744: PUSH
44745: LD_INT 1
44747: ARRAY
44748: PPUSH
44749: LD_VAR 0 2
44753: PUSH
44754: LD_VAR 0 4
44758: ARRAY
44759: PUSH
44760: LD_INT 2
44762: ARRAY
44763: PPUSH
44764: CALL_OW 297
44768: ST_TO_ADDR
// if tdist < dist then
44769: LD_VAR 0 6
44773: PUSH
44774: LD_VAR 0 5
44778: LESS
44779: IFFALSE 44807
// begin hex := hexes [ i ] ;
44781: LD_ADDR_VAR 0 8
44785: PUSH
44786: LD_VAR 0 2
44790: PUSH
44791: LD_VAR 0 4
44795: ARRAY
44796: ST_TO_ADDR
// dist := tdist ;
44797: LD_ADDR_VAR 0 5
44801: PUSH
44802: LD_VAR 0 6
44806: ST_TO_ADDR
// end ; end ;
44807: GO 44721
44809: POP
44810: POP
// result := hex ;
44811: LD_ADDR_VAR 0 3
44815: PUSH
44816: LD_VAR 0 8
44820: ST_TO_ADDR
// end ;
44821: LD_VAR 0 3
44825: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44826: LD_INT 0
44828: PPUSH
44829: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44830: LD_VAR 0 1
44834: NOT
44835: IFTRUE 44874
44837: PUSH
44838: LD_VAR 0 1
44842: PUSH
44843: LD_INT 21
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 23
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PPUSH
44867: CALL_OW 69
44871: IN
44872: NOT
44873: OR
44874: IFFALSE 44878
// exit ;
44876: GO 44925
// for i = 1 to 3 do
44878: LD_ADDR_VAR 0 3
44882: PUSH
44883: DOUBLE
44884: LD_INT 1
44886: DEC
44887: ST_TO_ADDR
44888: LD_INT 3
44890: PUSH
44891: FOR_TO
44892: IFFALSE 44923
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44894: LD_VAR 0 1
44898: PPUSH
44899: CALL_OW 250
44903: PPUSH
44904: LD_VAR 0 1
44908: PPUSH
44909: CALL_OW 251
44913: PPUSH
44914: LD_INT 1
44916: PPUSH
44917: CALL_OW 453
44921: GO 44891
44923: POP
44924: POP
// end ;
44925: LD_VAR 0 2
44929: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44930: LD_INT 0
44932: PPUSH
44933: PPUSH
44934: PPUSH
44935: PPUSH
44936: PPUSH
44937: PPUSH
// if not unit or not enemy_unit then
44938: LD_VAR 0 1
44942: NOT
44943: IFTRUE 44952
44945: PUSH
44946: LD_VAR 0 2
44950: NOT
44951: OR
44952: IFFALSE 44956
// exit ;
44954: GO 45437
// if GetLives ( i ) < 250 then
44956: LD_VAR 0 4
44960: PPUSH
44961: CALL_OW 256
44965: PUSH
44966: LD_INT 250
44968: LESS
44969: IFFALSE 44982
// begin ComAutodestruct ( i ) ;
44971: LD_VAR 0 4
44975: PPUSH
44976: CALL 44826 0 1
// exit ;
44980: GO 45437
// end ; x := GetX ( enemy_unit ) ;
44982: LD_ADDR_VAR 0 7
44986: PUSH
44987: LD_VAR 0 2
44991: PPUSH
44992: CALL_OW 250
44996: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44997: LD_ADDR_VAR 0 8
45001: PUSH
45002: LD_VAR 0 2
45006: PPUSH
45007: CALL_OW 251
45011: ST_TO_ADDR
// if not x or not y then
45012: LD_VAR 0 7
45016: NOT
45017: IFTRUE 45026
45019: PUSH
45020: LD_VAR 0 8
45024: NOT
45025: OR
45026: IFFALSE 45030
// exit ;
45028: GO 45437
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45030: LD_ADDR_VAR 0 6
45034: PUSH
45035: LD_VAR 0 7
45039: PPUSH
45040: LD_INT 0
45042: PPUSH
45043: LD_INT 4
45045: PPUSH
45046: CALL_OW 272
45050: PUSH
45051: LD_VAR 0 8
45055: PPUSH
45056: LD_INT 0
45058: PPUSH
45059: LD_INT 4
45061: PPUSH
45062: CALL_OW 273
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_VAR 0 7
45075: PPUSH
45076: LD_INT 1
45078: PPUSH
45079: LD_INT 4
45081: PPUSH
45082: CALL_OW 272
45086: PUSH
45087: LD_VAR 0 8
45091: PPUSH
45092: LD_INT 1
45094: PPUSH
45095: LD_INT 4
45097: PPUSH
45098: CALL_OW 273
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_VAR 0 7
45111: PPUSH
45112: LD_INT 2
45114: PPUSH
45115: LD_INT 4
45117: PPUSH
45118: CALL_OW 272
45122: PUSH
45123: LD_VAR 0 8
45127: PPUSH
45128: LD_INT 2
45130: PPUSH
45131: LD_INT 4
45133: PPUSH
45134: CALL_OW 273
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_VAR 0 7
45147: PPUSH
45148: LD_INT 3
45150: PPUSH
45151: LD_INT 4
45153: PPUSH
45154: CALL_OW 272
45158: PUSH
45159: LD_VAR 0 8
45163: PPUSH
45164: LD_INT 3
45166: PPUSH
45167: LD_INT 4
45169: PPUSH
45170: CALL_OW 273
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_VAR 0 7
45183: PPUSH
45184: LD_INT 4
45186: PPUSH
45187: LD_INT 4
45189: PPUSH
45190: CALL_OW 272
45194: PUSH
45195: LD_VAR 0 8
45199: PPUSH
45200: LD_INT 4
45202: PPUSH
45203: LD_INT 4
45205: PPUSH
45206: CALL_OW 273
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_VAR 0 7
45219: PPUSH
45220: LD_INT 5
45222: PPUSH
45223: LD_INT 4
45225: PPUSH
45226: CALL_OW 272
45230: PUSH
45231: LD_VAR 0 8
45235: PPUSH
45236: LD_INT 5
45238: PPUSH
45239: LD_INT 4
45241: PPUSH
45242: CALL_OW 273
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: ST_TO_ADDR
// for i = tmp downto 1 do
45259: LD_ADDR_VAR 0 4
45263: PUSH
45264: DOUBLE
45265: LD_VAR 0 6
45269: INC
45270: ST_TO_ADDR
45271: LD_INT 1
45273: PUSH
45274: FOR_DOWNTO
45275: IFFALSE 45378
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45277: LD_VAR 0 6
45281: PUSH
45282: LD_VAR 0 4
45286: ARRAY
45287: PUSH
45288: LD_INT 1
45290: ARRAY
45291: PPUSH
45292: LD_VAR 0 6
45296: PUSH
45297: LD_VAR 0 4
45301: ARRAY
45302: PUSH
45303: LD_INT 2
45305: ARRAY
45306: PPUSH
45307: CALL_OW 488
45311: NOT
45312: IFTRUE 45354
45314: PUSH
45315: LD_VAR 0 6
45319: PUSH
45320: LD_VAR 0 4
45324: ARRAY
45325: PUSH
45326: LD_INT 1
45328: ARRAY
45329: PPUSH
45330: LD_VAR 0 6
45334: PUSH
45335: LD_VAR 0 4
45339: ARRAY
45340: PUSH
45341: LD_INT 2
45343: ARRAY
45344: PPUSH
45345: CALL_OW 428
45349: PUSH
45350: LD_INT 0
45352: NONEQUAL
45353: OR
45354: IFFALSE 45376
// tmp := Delete ( tmp , i ) ;
45356: LD_ADDR_VAR 0 6
45360: PUSH
45361: LD_VAR 0 6
45365: PPUSH
45366: LD_VAR 0 4
45370: PPUSH
45371: CALL_OW 3
45375: ST_TO_ADDR
45376: GO 45274
45378: POP
45379: POP
// j := GetClosestHex ( unit , tmp ) ;
45380: LD_ADDR_VAR 0 5
45384: PUSH
45385: LD_VAR 0 1
45389: PPUSH
45390: LD_VAR 0 6
45394: PPUSH
45395: CALL 44672 0 2
45399: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45400: LD_VAR 0 1
45404: PPUSH
45405: LD_VAR 0 5
45409: PUSH
45410: LD_INT 1
45412: ARRAY
45413: PPUSH
45414: LD_VAR 0 5
45418: PUSH
45419: LD_INT 2
45421: ARRAY
45422: PPUSH
45423: CALL_OW 111
// result := j ;
45427: LD_ADDR_VAR 0 3
45431: PUSH
45432: LD_VAR 0 5
45436: ST_TO_ADDR
// end ;
45437: LD_VAR 0 3
45441: RET
// export function PrepareApemanSoldier ( ) ; begin
45442: LD_INT 0
45444: PPUSH
// uc_nation := 0 ;
45445: LD_ADDR_OWVAR 21
45449: PUSH
45450: LD_INT 0
45452: ST_TO_ADDR
// hc_sex := sex_male ;
45453: LD_ADDR_OWVAR 27
45457: PUSH
45458: LD_INT 1
45460: ST_TO_ADDR
// hc_name :=  ;
45461: LD_ADDR_OWVAR 26
45465: PUSH
45466: LD_STRING 
45468: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45469: LD_ADDR_OWVAR 28
45473: PUSH
45474: LD_INT 15
45476: ST_TO_ADDR
// hc_gallery :=  ;
45477: LD_ADDR_OWVAR 33
45481: PUSH
45482: LD_STRING 
45484: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45485: LD_ADDR_OWVAR 31
45489: PUSH
45490: LD_INT 0
45492: PPUSH
45493: LD_INT 3
45495: PPUSH
45496: CALL_OW 12
45500: PUSH
45501: LD_INT 0
45503: PPUSH
45504: LD_INT 3
45506: PPUSH
45507: CALL_OW 12
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45524: LD_ADDR_OWVAR 29
45528: PUSH
45529: LD_INT 10
45531: PUSH
45532: LD_INT 12
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: ST_TO_ADDR
// end ;
45539: LD_VAR 0 1
45543: RET
// export function PrepareApemanEngineer ( ) ; begin
45544: LD_INT 0
45546: PPUSH
// uc_nation := 0 ;
45547: LD_ADDR_OWVAR 21
45551: PUSH
45552: LD_INT 0
45554: ST_TO_ADDR
// hc_sex := sex_male ;
45555: LD_ADDR_OWVAR 27
45559: PUSH
45560: LD_INT 1
45562: ST_TO_ADDR
// hc_name :=  ;
45563: LD_ADDR_OWVAR 26
45567: PUSH
45568: LD_STRING 
45570: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45571: LD_ADDR_OWVAR 28
45575: PUSH
45576: LD_INT 16
45578: ST_TO_ADDR
// hc_gallery :=  ;
45579: LD_ADDR_OWVAR 33
45583: PUSH
45584: LD_STRING 
45586: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45587: LD_ADDR_OWVAR 31
45591: PUSH
45592: LD_INT 0
45594: PPUSH
45595: LD_INT 3
45597: PPUSH
45598: CALL_OW 12
45602: PUSH
45603: LD_INT 0
45605: PPUSH
45606: LD_INT 3
45608: PPUSH
45609: CALL_OW 12
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45626: LD_ADDR_OWVAR 29
45630: PUSH
45631: LD_INT 10
45633: PUSH
45634: LD_INT 12
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: ST_TO_ADDR
// end ;
45641: LD_VAR 0 1
45645: RET
// export function PrepareApeman ( agressivity ) ; begin
45646: LD_INT 0
45648: PPUSH
// uc_side := 0 ;
45649: LD_ADDR_OWVAR 20
45653: PUSH
45654: LD_INT 0
45656: ST_TO_ADDR
// uc_nation := 0 ;
45657: LD_ADDR_OWVAR 21
45661: PUSH
45662: LD_INT 0
45664: ST_TO_ADDR
// hc_sex := sex_male ;
45665: LD_ADDR_OWVAR 27
45669: PUSH
45670: LD_INT 1
45672: ST_TO_ADDR
// hc_class := class_apeman ;
45673: LD_ADDR_OWVAR 28
45677: PUSH
45678: LD_INT 12
45680: ST_TO_ADDR
// hc_gallery :=  ;
45681: LD_ADDR_OWVAR 33
45685: PUSH
45686: LD_STRING 
45688: ST_TO_ADDR
// hc_name :=  ;
45689: LD_ADDR_OWVAR 26
45693: PUSH
45694: LD_STRING 
45696: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45697: LD_ADDR_OWVAR 29
45701: PUSH
45702: LD_INT 10
45704: PUSH
45705: LD_INT 12
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: ST_TO_ADDR
// if agressivity = 0 then
45712: LD_VAR 0 1
45716: PUSH
45717: LD_INT 0
45719: EQUAL
45720: IFFALSE 45732
// hc_agressivity := 0 else
45722: LD_ADDR_OWVAR 35
45726: PUSH
45727: LD_INT 0
45729: ST_TO_ADDR
45730: GO 45753
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45732: LD_ADDR_OWVAR 35
45736: PUSH
45737: LD_VAR 0 1
45741: NEG
45742: PPUSH
45743: LD_VAR 0 1
45747: PPUSH
45748: CALL_OW 12
45752: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45753: LD_ADDR_OWVAR 31
45757: PUSH
45758: LD_INT 0
45760: PPUSH
45761: LD_INT 3
45763: PPUSH
45764: CALL_OW 12
45768: PUSH
45769: LD_INT 0
45771: PPUSH
45772: LD_INT 3
45774: PPUSH
45775: CALL_OW 12
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: ST_TO_ADDR
// end ;
45792: LD_VAR 0 2
45796: RET
// export function PrepareTiger ( agressivity ) ; begin
45797: LD_INT 0
45799: PPUSH
// uc_side := 0 ;
45800: LD_ADDR_OWVAR 20
45804: PUSH
45805: LD_INT 0
45807: ST_TO_ADDR
// uc_nation := 0 ;
45808: LD_ADDR_OWVAR 21
45812: PUSH
45813: LD_INT 0
45815: ST_TO_ADDR
// InitHc ;
45816: CALL_OW 19
// hc_class := class_tiger ;
45820: LD_ADDR_OWVAR 28
45824: PUSH
45825: LD_INT 14
45827: ST_TO_ADDR
// hc_gallery :=  ;
45828: LD_ADDR_OWVAR 33
45832: PUSH
45833: LD_STRING 
45835: ST_TO_ADDR
// hc_name :=  ;
45836: LD_ADDR_OWVAR 26
45840: PUSH
45841: LD_STRING 
45843: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45844: LD_ADDR_OWVAR 35
45848: PUSH
45849: LD_VAR 0 1
45853: NEG
45854: PPUSH
45855: LD_VAR 0 1
45859: PPUSH
45860: CALL_OW 12
45864: ST_TO_ADDR
// end ;
45865: LD_VAR 0 2
45869: RET
// export function PrepareEnchidna ( ) ; begin
45870: LD_INT 0
45872: PPUSH
// uc_side := 0 ;
45873: LD_ADDR_OWVAR 20
45877: PUSH
45878: LD_INT 0
45880: ST_TO_ADDR
// uc_nation := 0 ;
45881: LD_ADDR_OWVAR 21
45885: PUSH
45886: LD_INT 0
45888: ST_TO_ADDR
// InitHc ;
45889: CALL_OW 19
// hc_class := class_baggie ;
45893: LD_ADDR_OWVAR 28
45897: PUSH
45898: LD_INT 13
45900: ST_TO_ADDR
// hc_gallery :=  ;
45901: LD_ADDR_OWVAR 33
45905: PUSH
45906: LD_STRING 
45908: ST_TO_ADDR
// hc_name :=  ;
45909: LD_ADDR_OWVAR 26
45913: PUSH
45914: LD_STRING 
45916: ST_TO_ADDR
// end ;
45917: LD_VAR 0 1
45921: RET
// export function PrepareFrog ( ) ; begin
45922: LD_INT 0
45924: PPUSH
// uc_side := 0 ;
45925: LD_ADDR_OWVAR 20
45929: PUSH
45930: LD_INT 0
45932: ST_TO_ADDR
// uc_nation := 0 ;
45933: LD_ADDR_OWVAR 21
45937: PUSH
45938: LD_INT 0
45940: ST_TO_ADDR
// InitHc ;
45941: CALL_OW 19
// hc_class := class_frog ;
45945: LD_ADDR_OWVAR 28
45949: PUSH
45950: LD_INT 19
45952: ST_TO_ADDR
// hc_gallery :=  ;
45953: LD_ADDR_OWVAR 33
45957: PUSH
45958: LD_STRING 
45960: ST_TO_ADDR
// hc_name :=  ;
45961: LD_ADDR_OWVAR 26
45965: PUSH
45966: LD_STRING 
45968: ST_TO_ADDR
// end ;
45969: LD_VAR 0 1
45973: RET
// export function PrepareFish ( ) ; begin
45974: LD_INT 0
45976: PPUSH
// uc_side := 0 ;
45977: LD_ADDR_OWVAR 20
45981: PUSH
45982: LD_INT 0
45984: ST_TO_ADDR
// uc_nation := 0 ;
45985: LD_ADDR_OWVAR 21
45989: PUSH
45990: LD_INT 0
45992: ST_TO_ADDR
// InitHc ;
45993: CALL_OW 19
// hc_class := class_fish ;
45997: LD_ADDR_OWVAR 28
46001: PUSH
46002: LD_INT 20
46004: ST_TO_ADDR
// hc_gallery :=  ;
46005: LD_ADDR_OWVAR 33
46009: PUSH
46010: LD_STRING 
46012: ST_TO_ADDR
// hc_name :=  ;
46013: LD_ADDR_OWVAR 26
46017: PUSH
46018: LD_STRING 
46020: ST_TO_ADDR
// end ;
46021: LD_VAR 0 1
46025: RET
// export function PrepareBird ( ) ; begin
46026: LD_INT 0
46028: PPUSH
// uc_side := 0 ;
46029: LD_ADDR_OWVAR 20
46033: PUSH
46034: LD_INT 0
46036: ST_TO_ADDR
// uc_nation := 0 ;
46037: LD_ADDR_OWVAR 21
46041: PUSH
46042: LD_INT 0
46044: ST_TO_ADDR
// InitHc ;
46045: CALL_OW 19
// hc_class := class_phororhacos ;
46049: LD_ADDR_OWVAR 28
46053: PUSH
46054: LD_INT 18
46056: ST_TO_ADDR
// hc_gallery :=  ;
46057: LD_ADDR_OWVAR 33
46061: PUSH
46062: LD_STRING 
46064: ST_TO_ADDR
// hc_name :=  ;
46065: LD_ADDR_OWVAR 26
46069: PUSH
46070: LD_STRING 
46072: ST_TO_ADDR
// end ;
46073: LD_VAR 0 1
46077: RET
// export function PrepareHorse ( ) ; begin
46078: LD_INT 0
46080: PPUSH
// uc_side := 0 ;
46081: LD_ADDR_OWVAR 20
46085: PUSH
46086: LD_INT 0
46088: ST_TO_ADDR
// uc_nation := 0 ;
46089: LD_ADDR_OWVAR 21
46093: PUSH
46094: LD_INT 0
46096: ST_TO_ADDR
// InitHc ;
46097: CALL_OW 19
// hc_class := class_horse ;
46101: LD_ADDR_OWVAR 28
46105: PUSH
46106: LD_INT 21
46108: ST_TO_ADDR
// hc_gallery :=  ;
46109: LD_ADDR_OWVAR 33
46113: PUSH
46114: LD_STRING 
46116: ST_TO_ADDR
// hc_name :=  ;
46117: LD_ADDR_OWVAR 26
46121: PUSH
46122: LD_STRING 
46124: ST_TO_ADDR
// end ;
46125: LD_VAR 0 1
46129: RET
// export function PrepareMastodont ( ) ; begin
46130: LD_INT 0
46132: PPUSH
// uc_side := 0 ;
46133: LD_ADDR_OWVAR 20
46137: PUSH
46138: LD_INT 0
46140: ST_TO_ADDR
// uc_nation := 0 ;
46141: LD_ADDR_OWVAR 21
46145: PUSH
46146: LD_INT 0
46148: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46149: LD_ADDR_OWVAR 37
46153: PUSH
46154: LD_INT 31
46156: ST_TO_ADDR
// vc_control := control_rider ;
46157: LD_ADDR_OWVAR 38
46161: PUSH
46162: LD_INT 4
46164: ST_TO_ADDR
// end ;
46165: LD_VAR 0 1
46169: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46170: LD_INT 0
46172: PPUSH
46173: PPUSH
46174: PPUSH
// uc_side = 0 ;
46175: LD_ADDR_OWVAR 20
46179: PUSH
46180: LD_INT 0
46182: ST_TO_ADDR
// uc_nation = 0 ;
46183: LD_ADDR_OWVAR 21
46187: PUSH
46188: LD_INT 0
46190: ST_TO_ADDR
// InitHc_All ( ) ;
46191: CALL_OW 584
// InitVc ;
46195: CALL_OW 20
// if mastodonts then
46199: LD_VAR 0 6
46203: IFFALSE 46270
// for i = 1 to mastodonts do
46205: LD_ADDR_VAR 0 11
46209: PUSH
46210: DOUBLE
46211: LD_INT 1
46213: DEC
46214: ST_TO_ADDR
46215: LD_VAR 0 6
46219: PUSH
46220: FOR_TO
46221: IFFALSE 46268
// begin vc_chassis := 31 ;
46223: LD_ADDR_OWVAR 37
46227: PUSH
46228: LD_INT 31
46230: ST_TO_ADDR
// vc_control := control_rider ;
46231: LD_ADDR_OWVAR 38
46235: PUSH
46236: LD_INT 4
46238: ST_TO_ADDR
// animal := CreateVehicle ;
46239: LD_ADDR_VAR 0 12
46243: PUSH
46244: CALL_OW 45
46248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46249: LD_VAR 0 12
46253: PPUSH
46254: LD_VAR 0 8
46258: PPUSH
46259: LD_INT 0
46261: PPUSH
46262: CALL 48412 0 3
// end ;
46266: GO 46220
46268: POP
46269: POP
// if horses then
46270: LD_VAR 0 5
46274: IFFALSE 46341
// for i = 1 to horses do
46276: LD_ADDR_VAR 0 11
46280: PUSH
46281: DOUBLE
46282: LD_INT 1
46284: DEC
46285: ST_TO_ADDR
46286: LD_VAR 0 5
46290: PUSH
46291: FOR_TO
46292: IFFALSE 46339
// begin hc_class := 21 ;
46294: LD_ADDR_OWVAR 28
46298: PUSH
46299: LD_INT 21
46301: ST_TO_ADDR
// hc_gallery :=  ;
46302: LD_ADDR_OWVAR 33
46306: PUSH
46307: LD_STRING 
46309: ST_TO_ADDR
// animal := CreateHuman ;
46310: LD_ADDR_VAR 0 12
46314: PUSH
46315: CALL_OW 44
46319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46320: LD_VAR 0 12
46324: PPUSH
46325: LD_VAR 0 8
46329: PPUSH
46330: LD_INT 0
46332: PPUSH
46333: CALL 48412 0 3
// end ;
46337: GO 46291
46339: POP
46340: POP
// if birds then
46341: LD_VAR 0 1
46345: IFFALSE 46412
// for i = 1 to birds do
46347: LD_ADDR_VAR 0 11
46351: PUSH
46352: DOUBLE
46353: LD_INT 1
46355: DEC
46356: ST_TO_ADDR
46357: LD_VAR 0 1
46361: PUSH
46362: FOR_TO
46363: IFFALSE 46410
// begin hc_class := 18 ;
46365: LD_ADDR_OWVAR 28
46369: PUSH
46370: LD_INT 18
46372: ST_TO_ADDR
// hc_gallery =  ;
46373: LD_ADDR_OWVAR 33
46377: PUSH
46378: LD_STRING 
46380: ST_TO_ADDR
// animal := CreateHuman ;
46381: LD_ADDR_VAR 0 12
46385: PUSH
46386: CALL_OW 44
46390: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46391: LD_VAR 0 12
46395: PPUSH
46396: LD_VAR 0 8
46400: PPUSH
46401: LD_INT 0
46403: PPUSH
46404: CALL 48412 0 3
// end ;
46408: GO 46362
46410: POP
46411: POP
// if tigers then
46412: LD_VAR 0 2
46416: IFFALSE 46500
// for i = 1 to tigers do
46418: LD_ADDR_VAR 0 11
46422: PUSH
46423: DOUBLE
46424: LD_INT 1
46426: DEC
46427: ST_TO_ADDR
46428: LD_VAR 0 2
46432: PUSH
46433: FOR_TO
46434: IFFALSE 46498
// begin hc_class = class_tiger ;
46436: LD_ADDR_OWVAR 28
46440: PUSH
46441: LD_INT 14
46443: ST_TO_ADDR
// hc_gallery =  ;
46444: LD_ADDR_OWVAR 33
46448: PUSH
46449: LD_STRING 
46451: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46452: LD_ADDR_OWVAR 35
46456: PUSH
46457: LD_INT 7
46459: NEG
46460: PPUSH
46461: LD_INT 7
46463: PPUSH
46464: CALL_OW 12
46468: ST_TO_ADDR
// animal := CreateHuman ;
46469: LD_ADDR_VAR 0 12
46473: PUSH
46474: CALL_OW 44
46478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46479: LD_VAR 0 12
46483: PPUSH
46484: LD_VAR 0 8
46488: PPUSH
46489: LD_INT 0
46491: PPUSH
46492: CALL 48412 0 3
// end ;
46496: GO 46433
46498: POP
46499: POP
// if apemans then
46500: LD_VAR 0 3
46504: IFFALSE 46627
// for i = 1 to apemans do
46506: LD_ADDR_VAR 0 11
46510: PUSH
46511: DOUBLE
46512: LD_INT 1
46514: DEC
46515: ST_TO_ADDR
46516: LD_VAR 0 3
46520: PUSH
46521: FOR_TO
46522: IFFALSE 46625
// begin hc_class = class_apeman ;
46524: LD_ADDR_OWVAR 28
46528: PUSH
46529: LD_INT 12
46531: ST_TO_ADDR
// hc_gallery =  ;
46532: LD_ADDR_OWVAR 33
46536: PUSH
46537: LD_STRING 
46539: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46540: LD_ADDR_OWVAR 35
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PPUSH
46549: LD_INT 2
46551: PPUSH
46552: CALL_OW 12
46556: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46557: LD_ADDR_OWVAR 31
46561: PUSH
46562: LD_INT 1
46564: PPUSH
46565: LD_INT 3
46567: PPUSH
46568: CALL_OW 12
46572: PUSH
46573: LD_INT 1
46575: PPUSH
46576: LD_INT 3
46578: PPUSH
46579: CALL_OW 12
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: ST_TO_ADDR
// animal := CreateHuman ;
46596: LD_ADDR_VAR 0 12
46600: PUSH
46601: CALL_OW 44
46605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46606: LD_VAR 0 12
46610: PPUSH
46611: LD_VAR 0 8
46615: PPUSH
46616: LD_INT 0
46618: PPUSH
46619: CALL 48412 0 3
// end ;
46623: GO 46521
46625: POP
46626: POP
// if enchidnas then
46627: LD_VAR 0 4
46631: IFFALSE 46698
// for i = 1 to enchidnas do
46633: LD_ADDR_VAR 0 11
46637: PUSH
46638: DOUBLE
46639: LD_INT 1
46641: DEC
46642: ST_TO_ADDR
46643: LD_VAR 0 4
46647: PUSH
46648: FOR_TO
46649: IFFALSE 46696
// begin hc_class = 13 ;
46651: LD_ADDR_OWVAR 28
46655: PUSH
46656: LD_INT 13
46658: ST_TO_ADDR
// hc_gallery =  ;
46659: LD_ADDR_OWVAR 33
46663: PUSH
46664: LD_STRING 
46666: ST_TO_ADDR
// animal := CreateHuman ;
46667: LD_ADDR_VAR 0 12
46671: PUSH
46672: CALL_OW 44
46676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46677: LD_VAR 0 12
46681: PPUSH
46682: LD_VAR 0 8
46686: PPUSH
46687: LD_INT 0
46689: PPUSH
46690: CALL 48412 0 3
// end ;
46694: GO 46648
46696: POP
46697: POP
// if fishes then
46698: LD_VAR 0 7
46702: IFFALSE 46769
// for i = 1 to fishes do
46704: LD_ADDR_VAR 0 11
46708: PUSH
46709: DOUBLE
46710: LD_INT 1
46712: DEC
46713: ST_TO_ADDR
46714: LD_VAR 0 7
46718: PUSH
46719: FOR_TO
46720: IFFALSE 46767
// begin hc_class = 20 ;
46722: LD_ADDR_OWVAR 28
46726: PUSH
46727: LD_INT 20
46729: ST_TO_ADDR
// hc_gallery =  ;
46730: LD_ADDR_OWVAR 33
46734: PUSH
46735: LD_STRING 
46737: ST_TO_ADDR
// animal := CreateHuman ;
46738: LD_ADDR_VAR 0 12
46742: PUSH
46743: CALL_OW 44
46747: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46748: LD_VAR 0 12
46752: PPUSH
46753: LD_VAR 0 9
46757: PPUSH
46758: LD_INT 0
46760: PPUSH
46761: CALL 48412 0 3
// end ;
46765: GO 46719
46767: POP
46768: POP
// end ;
46769: LD_VAR 0 10
46773: RET
// export function WantHeal ( sci , unit ) ; begin
46774: LD_INT 0
46776: PPUSH
// if GetTaskList ( sci ) > 0 then
46777: LD_VAR 0 1
46781: PPUSH
46782: CALL_OW 437
46786: PUSH
46787: LD_INT 0
46789: GREATER
46790: IFFALSE 46862
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46792: LD_VAR 0 1
46796: PPUSH
46797: CALL_OW 437
46801: PUSH
46802: LD_INT 1
46804: ARRAY
46805: PUSH
46806: LD_INT 1
46808: ARRAY
46809: PUSH
46810: LD_STRING l
46812: EQUAL
46813: IFFALSE 46840
46815: PUSH
46816: LD_VAR 0 1
46820: PPUSH
46821: CALL_OW 437
46825: PUSH
46826: LD_INT 1
46828: ARRAY
46829: PUSH
46830: LD_INT 4
46832: ARRAY
46833: PUSH
46834: LD_VAR 0 2
46838: EQUAL
46839: AND
46840: IFFALSE 46852
// result := true else
46842: LD_ADDR_VAR 0 3
46846: PUSH
46847: LD_INT 1
46849: ST_TO_ADDR
46850: GO 46860
// result := false ;
46852: LD_ADDR_VAR 0 3
46856: PUSH
46857: LD_INT 0
46859: ST_TO_ADDR
// end else
46860: GO 46870
// result := false ;
46862: LD_ADDR_VAR 0 3
46866: PUSH
46867: LD_INT 0
46869: ST_TO_ADDR
// end ;
46870: LD_VAR 0 3
46874: RET
// export function HealTarget ( sci ) ; begin
46875: LD_INT 0
46877: PPUSH
// if not sci then
46878: LD_VAR 0 1
46882: NOT
46883: IFFALSE 46887
// exit ;
46885: GO 46952
// result := 0 ;
46887: LD_ADDR_VAR 0 2
46891: PUSH
46892: LD_INT 0
46894: ST_TO_ADDR
// if GetTaskList ( sci ) then
46895: LD_VAR 0 1
46899: PPUSH
46900: CALL_OW 437
46904: IFFALSE 46952
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46906: LD_VAR 0 1
46910: PPUSH
46911: CALL_OW 437
46915: PUSH
46916: LD_INT 1
46918: ARRAY
46919: PUSH
46920: LD_INT 1
46922: ARRAY
46923: PUSH
46924: LD_STRING l
46926: EQUAL
46927: IFFALSE 46952
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46929: LD_ADDR_VAR 0 2
46933: PUSH
46934: LD_VAR 0 1
46938: PPUSH
46939: CALL_OW 437
46943: PUSH
46944: LD_INT 1
46946: ARRAY
46947: PUSH
46948: LD_INT 4
46950: ARRAY
46951: ST_TO_ADDR
// end ;
46952: LD_VAR 0 2
46956: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46957: LD_INT 0
46959: PPUSH
46960: PPUSH
46961: PPUSH
46962: PPUSH
// if not base_units then
46963: LD_VAR 0 1
46967: NOT
46968: IFFALSE 46972
// exit ;
46970: GO 47059
// result := false ;
46972: LD_ADDR_VAR 0 2
46976: PUSH
46977: LD_INT 0
46979: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46980: LD_ADDR_VAR 0 5
46984: PUSH
46985: LD_VAR 0 1
46989: PPUSH
46990: LD_INT 21
46992: PUSH
46993: LD_INT 3
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PPUSH
47000: CALL_OW 72
47004: ST_TO_ADDR
// if not tmp then
47005: LD_VAR 0 5
47009: NOT
47010: IFFALSE 47014
// exit ;
47012: GO 47059
// for i in tmp do
47014: LD_ADDR_VAR 0 3
47018: PUSH
47019: LD_VAR 0 5
47023: PUSH
47024: FOR_IN
47025: IFFALSE 47057
// begin result := EnemyInRange ( i , 22 ) ;
47027: LD_ADDR_VAR 0 2
47031: PUSH
47032: LD_VAR 0 3
47036: PPUSH
47037: LD_INT 22
47039: PPUSH
47040: CALL 44474 0 2
47044: ST_TO_ADDR
// if result then
47045: LD_VAR 0 2
47049: IFFALSE 47055
// exit ;
47051: POP
47052: POP
47053: GO 47059
// end ;
47055: GO 47024
47057: POP
47058: POP
// end ;
47059: LD_VAR 0 2
47063: RET
// export function FilterByTag ( units , tag ) ; begin
47064: LD_INT 0
47066: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47067: LD_ADDR_VAR 0 3
47071: PUSH
47072: LD_VAR 0 1
47076: PPUSH
47077: LD_INT 120
47079: PUSH
47080: LD_VAR 0 2
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PPUSH
47089: CALL_OW 72
47093: ST_TO_ADDR
// end ;
47094: LD_VAR 0 3
47098: RET
// export function IsDriver ( un ) ; begin
47099: LD_INT 0
47101: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47102: LD_ADDR_VAR 0 2
47106: PUSH
47107: LD_VAR 0 1
47111: PUSH
47112: LD_INT 55
47114: PUSH
47115: EMPTY
47116: LIST
47117: PPUSH
47118: CALL_OW 69
47122: IN
47123: ST_TO_ADDR
// end ;
47124: LD_VAR 0 2
47128: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47129: LD_INT 0
47131: PPUSH
47132: PPUSH
// list := [ ] ;
47133: LD_ADDR_VAR 0 5
47137: PUSH
47138: EMPTY
47139: ST_TO_ADDR
// case d of 0 :
47140: LD_VAR 0 3
47144: PUSH
47145: LD_INT 0
47147: DOUBLE
47148: EQUAL
47149: IFTRUE 47153
47151: GO 47286
47153: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47154: LD_ADDR_VAR 0 5
47158: PUSH
47159: LD_VAR 0 1
47163: PUSH
47164: LD_INT 4
47166: MINUS
47167: PUSH
47168: LD_VAR 0 2
47172: PUSH
47173: LD_INT 4
47175: MINUS
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: LIST
47184: PUSH
47185: LD_VAR 0 1
47189: PUSH
47190: LD_INT 3
47192: MINUS
47193: PUSH
47194: LD_VAR 0 2
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: LIST
47206: PUSH
47207: LD_VAR 0 1
47211: PUSH
47212: LD_INT 4
47214: PLUS
47215: PUSH
47216: LD_VAR 0 2
47220: PUSH
47221: LD_INT 4
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: LIST
47228: PUSH
47229: LD_VAR 0 1
47233: PUSH
47234: LD_INT 3
47236: PLUS
47237: PUSH
47238: LD_VAR 0 2
47242: PUSH
47243: LD_INT 3
47245: PLUS
47246: PUSH
47247: LD_INT 5
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: LIST
47254: PUSH
47255: LD_VAR 0 1
47259: PUSH
47260: LD_VAR 0 2
47264: PUSH
47265: LD_INT 4
47267: PLUS
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// end ; 1 :
47284: GO 47984
47286: LD_INT 1
47288: DOUBLE
47289: EQUAL
47290: IFTRUE 47294
47292: GO 47427
47294: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47295: LD_ADDR_VAR 0 5
47299: PUSH
47300: LD_VAR 0 1
47304: PUSH
47305: LD_VAR 0 2
47309: PUSH
47310: LD_INT 4
47312: MINUS
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: PUSH
47322: LD_VAR 0 1
47326: PUSH
47327: LD_INT 3
47329: MINUS
47330: PUSH
47331: LD_VAR 0 2
47335: PUSH
47336: LD_INT 3
47338: MINUS
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: LIST
47347: PUSH
47348: LD_VAR 0 1
47352: PUSH
47353: LD_INT 4
47355: MINUS
47356: PUSH
47357: LD_VAR 0 2
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: LIST
47369: PUSH
47370: LD_VAR 0 1
47374: PUSH
47375: LD_VAR 0 2
47379: PUSH
47380: LD_INT 3
47382: PLUS
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: PUSH
47392: LD_VAR 0 1
47396: PUSH
47397: LD_INT 4
47399: PLUS
47400: PUSH
47401: LD_VAR 0 2
47405: PUSH
47406: LD_INT 4
47408: PLUS
47409: PUSH
47410: LD_INT 5
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// end ; 2 :
47425: GO 47984
47427: LD_INT 2
47429: DOUBLE
47430: EQUAL
47431: IFTRUE 47435
47433: GO 47564
47435: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47436: LD_ADDR_VAR 0 5
47440: PUSH
47441: LD_VAR 0 1
47445: PUSH
47446: LD_VAR 0 2
47450: PUSH
47451: LD_INT 3
47453: MINUS
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: LIST
47462: PUSH
47463: LD_VAR 0 1
47467: PUSH
47468: LD_INT 4
47470: PLUS
47471: PUSH
47472: LD_VAR 0 2
47476: PUSH
47477: LD_INT 4
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: PUSH
47485: LD_VAR 0 1
47489: PUSH
47490: LD_VAR 0 2
47494: PUSH
47495: LD_INT 4
47497: PLUS
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: LIST
47506: PUSH
47507: LD_VAR 0 1
47511: PUSH
47512: LD_INT 3
47514: MINUS
47515: PUSH
47516: LD_VAR 0 2
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: LIST
47528: PUSH
47529: LD_VAR 0 1
47533: PUSH
47534: LD_INT 4
47536: MINUS
47537: PUSH
47538: LD_VAR 0 2
47542: PUSH
47543: LD_INT 4
47545: MINUS
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: LIST
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// end ; 3 :
47562: GO 47984
47564: LD_INT 3
47566: DOUBLE
47567: EQUAL
47568: IFTRUE 47572
47570: GO 47705
47572: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47573: LD_ADDR_VAR 0 5
47577: PUSH
47578: LD_VAR 0 1
47582: PUSH
47583: LD_INT 3
47585: PLUS
47586: PUSH
47587: LD_VAR 0 2
47591: PUSH
47592: LD_INT 4
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: PUSH
47600: LD_VAR 0 1
47604: PUSH
47605: LD_INT 4
47607: PLUS
47608: PUSH
47609: LD_VAR 0 2
47613: PUSH
47614: LD_INT 4
47616: PLUS
47617: PUSH
47618: LD_INT 5
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: PUSH
47626: LD_VAR 0 1
47630: PUSH
47631: LD_INT 4
47633: MINUS
47634: PUSH
47635: LD_VAR 0 2
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: PUSH
47648: LD_VAR 0 1
47652: PUSH
47653: LD_VAR 0 2
47657: PUSH
47658: LD_INT 4
47660: MINUS
47661: PUSH
47662: LD_INT 3
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: LIST
47669: PUSH
47670: LD_VAR 0 1
47674: PUSH
47675: LD_INT 3
47677: MINUS
47678: PUSH
47679: LD_VAR 0 2
47683: PUSH
47684: LD_INT 3
47686: MINUS
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: ST_TO_ADDR
// end ; 4 :
47703: GO 47984
47705: LD_INT 4
47707: DOUBLE
47708: EQUAL
47709: IFTRUE 47713
47711: GO 47846
47713: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47714: LD_ADDR_VAR 0 5
47718: PUSH
47719: LD_VAR 0 1
47723: PUSH
47724: LD_VAR 0 2
47728: PUSH
47729: LD_INT 4
47731: PLUS
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: PUSH
47741: LD_VAR 0 1
47745: PUSH
47746: LD_INT 3
47748: PLUS
47749: PUSH
47750: LD_VAR 0 2
47754: PUSH
47755: LD_INT 3
47757: PLUS
47758: PUSH
47759: LD_INT 5
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: PUSH
47767: LD_VAR 0 1
47771: PUSH
47772: LD_INT 4
47774: PLUS
47775: PUSH
47776: LD_VAR 0 2
47780: PUSH
47781: LD_INT 4
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: LIST
47788: PUSH
47789: LD_VAR 0 1
47793: PUSH
47794: LD_VAR 0 2
47798: PUSH
47799: LD_INT 3
47801: MINUS
47802: PUSH
47803: LD_INT 3
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: LIST
47810: PUSH
47811: LD_VAR 0 1
47815: PUSH
47816: LD_INT 4
47818: MINUS
47819: PUSH
47820: LD_VAR 0 2
47824: PUSH
47825: LD_INT 4
47827: MINUS
47828: PUSH
47829: LD_INT 2
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: ST_TO_ADDR
// end ; 5 :
47844: GO 47984
47846: LD_INT 5
47848: DOUBLE
47849: EQUAL
47850: IFTRUE 47854
47852: GO 47983
47854: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47855: LD_ADDR_VAR 0 5
47859: PUSH
47860: LD_VAR 0 1
47864: PUSH
47865: LD_INT 4
47867: MINUS
47868: PUSH
47869: LD_VAR 0 2
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: LIST
47881: PUSH
47882: LD_VAR 0 1
47886: PUSH
47887: LD_VAR 0 2
47891: PUSH
47892: LD_INT 4
47894: MINUS
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: PUSH
47904: LD_VAR 0 1
47908: PUSH
47909: LD_INT 4
47911: PLUS
47912: PUSH
47913: LD_VAR 0 2
47917: PUSH
47918: LD_INT 4
47920: PLUS
47921: PUSH
47922: LD_INT 5
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: PUSH
47930: LD_VAR 0 1
47934: PUSH
47935: LD_INT 3
47937: PLUS
47938: PUSH
47939: LD_VAR 0 2
47943: PUSH
47944: LD_INT 4
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: PUSH
47952: LD_VAR 0 1
47956: PUSH
47957: LD_VAR 0 2
47961: PUSH
47962: LD_INT 3
47964: PLUS
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: ST_TO_ADDR
// end ; end ;
47981: GO 47984
47983: POP
// result := list ;
47984: LD_ADDR_VAR 0 4
47988: PUSH
47989: LD_VAR 0 5
47993: ST_TO_ADDR
// end ;
47994: LD_VAR 0 4
47998: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47999: LD_INT 0
48001: PPUSH
48002: PPUSH
48003: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48004: LD_VAR 0 1
48008: NOT
48009: IFTRUE 48037
48011: PUSH
48012: LD_VAR 0 2
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: LD_INT 2
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: LD_INT 4
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: IN
48035: NOT
48036: OR
48037: IFFALSE 48041
// exit ;
48039: GO 48124
// tmp := [ ] ;
48041: LD_ADDR_VAR 0 5
48045: PUSH
48046: EMPTY
48047: ST_TO_ADDR
// for i in units do
48048: LD_ADDR_VAR 0 4
48052: PUSH
48053: LD_VAR 0 1
48057: PUSH
48058: FOR_IN
48059: IFFALSE 48093
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48061: LD_ADDR_VAR 0 5
48065: PUSH
48066: LD_VAR 0 5
48070: PPUSH
48071: LD_VAR 0 4
48075: PPUSH
48076: LD_VAR 0 2
48080: PPUSH
48081: CALL_OW 259
48085: PPUSH
48086: CALL 49519 0 2
48090: ST_TO_ADDR
48091: GO 48058
48093: POP
48094: POP
// if not tmp then
48095: LD_VAR 0 5
48099: NOT
48100: IFFALSE 48104
// exit ;
48102: GO 48124
// result := SortListByListDesc ( units , tmp ) ;
48104: LD_ADDR_VAR 0 3
48108: PUSH
48109: LD_VAR 0 1
48113: PPUSH
48114: LD_VAR 0 5
48118: PPUSH
48119: CALL_OW 77
48123: ST_TO_ADDR
// end ;
48124: LD_VAR 0 3
48128: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48129: LD_INT 0
48131: PPUSH
48132: PPUSH
48133: PPUSH
// result := false ;
48134: LD_ADDR_VAR 0 3
48138: PUSH
48139: LD_INT 0
48141: ST_TO_ADDR
// if not building then
48142: LD_VAR 0 2
48146: NOT
48147: IFFALSE 48151
// exit ;
48149: GO 48295
// x := GetX ( building ) ;
48151: LD_ADDR_VAR 0 4
48155: PUSH
48156: LD_VAR 0 2
48160: PPUSH
48161: CALL_OW 250
48165: ST_TO_ADDR
// y := GetY ( building ) ;
48166: LD_ADDR_VAR 0 5
48170: PUSH
48171: LD_VAR 0 2
48175: PPUSH
48176: CALL_OW 251
48180: ST_TO_ADDR
// if not x or not y then
48181: LD_VAR 0 4
48185: NOT
48186: IFTRUE 48195
48188: PUSH
48189: LD_VAR 0 5
48193: NOT
48194: OR
48195: IFFALSE 48199
// exit ;
48197: GO 48295
// if GetTaskList ( unit ) then
48199: LD_VAR 0 1
48203: PPUSH
48204: CALL_OW 437
48208: IFFALSE 48295
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48210: LD_STRING e
48212: PUSH
48213: LD_VAR 0 1
48217: PPUSH
48218: CALL_OW 437
48222: PUSH
48223: LD_INT 1
48225: ARRAY
48226: PUSH
48227: LD_INT 1
48229: ARRAY
48230: EQUAL
48231: IFFALSE 48258
48233: PUSH
48234: LD_VAR 0 4
48238: PUSH
48239: LD_VAR 0 1
48243: PPUSH
48244: CALL_OW 437
48248: PUSH
48249: LD_INT 1
48251: ARRAY
48252: PUSH
48253: LD_INT 2
48255: ARRAY
48256: EQUAL
48257: AND
48258: IFFALSE 48285
48260: PUSH
48261: LD_VAR 0 5
48265: PUSH
48266: LD_VAR 0 1
48270: PPUSH
48271: CALL_OW 437
48275: PUSH
48276: LD_INT 1
48278: ARRAY
48279: PUSH
48280: LD_INT 3
48282: ARRAY
48283: EQUAL
48284: AND
48285: IFFALSE 48295
// result := true end ;
48287: LD_ADDR_VAR 0 3
48291: PUSH
48292: LD_INT 1
48294: ST_TO_ADDR
// end ;
48295: LD_VAR 0 3
48299: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48300: LD_INT 0
48302: PPUSH
// result := false ;
48303: LD_ADDR_VAR 0 4
48307: PUSH
48308: LD_INT 0
48310: ST_TO_ADDR
// if GetTaskList ( unit ) then
48311: LD_VAR 0 1
48315: PPUSH
48316: CALL_OW 437
48320: IFFALSE 48407
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48322: LD_STRING M
48324: PUSH
48325: LD_VAR 0 1
48329: PPUSH
48330: CALL_OW 437
48334: PUSH
48335: LD_INT 1
48337: ARRAY
48338: PUSH
48339: LD_INT 1
48341: ARRAY
48342: EQUAL
48343: IFFALSE 48370
48345: PUSH
48346: LD_VAR 0 2
48350: PUSH
48351: LD_VAR 0 1
48355: PPUSH
48356: CALL_OW 437
48360: PUSH
48361: LD_INT 1
48363: ARRAY
48364: PUSH
48365: LD_INT 2
48367: ARRAY
48368: EQUAL
48369: AND
48370: IFFALSE 48397
48372: PUSH
48373: LD_VAR 0 3
48377: PUSH
48378: LD_VAR 0 1
48382: PPUSH
48383: CALL_OW 437
48387: PUSH
48388: LD_INT 1
48390: ARRAY
48391: PUSH
48392: LD_INT 3
48394: ARRAY
48395: EQUAL
48396: AND
48397: IFFALSE 48407
// result := true ;
48399: LD_ADDR_VAR 0 4
48403: PUSH
48404: LD_INT 1
48406: ST_TO_ADDR
// end ; end ;
48407: LD_VAR 0 4
48411: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48412: LD_INT 0
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
// if not unit or not area then
48418: LD_VAR 0 1
48422: NOT
48423: IFTRUE 48432
48425: PUSH
48426: LD_VAR 0 2
48430: NOT
48431: OR
48432: IFFALSE 48436
// exit ;
48434: GO 48612
// tmp := AreaToList ( area , i ) ;
48436: LD_ADDR_VAR 0 6
48440: PUSH
48441: LD_VAR 0 2
48445: PPUSH
48446: LD_VAR 0 5
48450: PPUSH
48451: CALL_OW 517
48455: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48456: LD_ADDR_VAR 0 5
48460: PUSH
48461: DOUBLE
48462: LD_INT 1
48464: DEC
48465: ST_TO_ADDR
48466: LD_VAR 0 6
48470: PUSH
48471: LD_INT 1
48473: ARRAY
48474: PUSH
48475: FOR_TO
48476: IFFALSE 48610
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48478: LD_ADDR_VAR 0 7
48482: PUSH
48483: LD_VAR 0 6
48487: PUSH
48488: LD_INT 1
48490: ARRAY
48491: PUSH
48492: LD_VAR 0 5
48496: ARRAY
48497: PUSH
48498: LD_VAR 0 6
48502: PUSH
48503: LD_INT 2
48505: ARRAY
48506: PUSH
48507: LD_VAR 0 5
48511: ARRAY
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48517: LD_INT 92
48519: PUSH
48520: LD_VAR 0 7
48524: PUSH
48525: LD_INT 1
48527: ARRAY
48528: PUSH
48529: LD_VAR 0 7
48533: PUSH
48534: LD_INT 2
48536: ARRAY
48537: PUSH
48538: LD_INT 2
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: PPUSH
48547: CALL_OW 69
48551: PUSH
48552: LD_INT 0
48554: EQUAL
48555: IFFALSE 48608
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48557: LD_VAR 0 1
48561: PPUSH
48562: LD_VAR 0 7
48566: PUSH
48567: LD_INT 1
48569: ARRAY
48570: PPUSH
48571: LD_VAR 0 7
48575: PUSH
48576: LD_INT 2
48578: ARRAY
48579: PPUSH
48580: LD_VAR 0 3
48584: PPUSH
48585: CALL_OW 48
// result := IsPlaced ( unit ) ;
48589: LD_ADDR_VAR 0 4
48593: PUSH
48594: LD_VAR 0 1
48598: PPUSH
48599: CALL_OW 305
48603: ST_TO_ADDR
// exit ;
48604: POP
48605: POP
48606: GO 48612
// end ; end ;
48608: GO 48475
48610: POP
48611: POP
// end ;
48612: LD_VAR 0 4
48616: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48617: LD_INT 0
48619: PPUSH
48620: PPUSH
48621: PPUSH
// if not side or side > 8 then
48622: LD_VAR 0 1
48626: NOT
48627: IFTRUE 48639
48629: PUSH
48630: LD_VAR 0 1
48634: PUSH
48635: LD_INT 8
48637: GREATER
48638: OR
48639: IFFALSE 48643
// exit ;
48641: GO 48830
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48643: LD_ADDR_VAR 0 4
48647: PUSH
48648: LD_INT 22
48650: PUSH
48651: LD_VAR 0 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 21
48662: PUSH
48663: LD_INT 3
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PPUSH
48674: CALL_OW 69
48678: ST_TO_ADDR
// if not tmp then
48679: LD_VAR 0 4
48683: NOT
48684: IFFALSE 48688
// exit ;
48686: GO 48830
// enable_addtolog := true ;
48688: LD_ADDR_OWVAR 81
48692: PUSH
48693: LD_INT 1
48695: ST_TO_ADDR
// AddToLog ( [ ) ;
48696: LD_STRING [
48698: PPUSH
48699: CALL_OW 561
// for i in tmp do
48703: LD_ADDR_VAR 0 3
48707: PUSH
48708: LD_VAR 0 4
48712: PUSH
48713: FOR_IN
48714: IFFALSE 48821
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48716: LD_STRING [
48718: PUSH
48719: LD_VAR 0 3
48723: PPUSH
48724: CALL_OW 266
48728: STR
48729: PUSH
48730: LD_STRING , 
48732: STR
48733: PUSH
48734: LD_VAR 0 3
48738: PPUSH
48739: CALL_OW 250
48743: STR
48744: PUSH
48745: LD_STRING , 
48747: STR
48748: PUSH
48749: LD_VAR 0 3
48753: PPUSH
48754: CALL_OW 251
48758: STR
48759: PUSH
48760: LD_STRING , 
48762: STR
48763: PUSH
48764: LD_VAR 0 3
48768: PPUSH
48769: CALL_OW 254
48773: STR
48774: PUSH
48775: LD_STRING , 
48777: STR
48778: PUSH
48779: LD_VAR 0 3
48783: PPUSH
48784: LD_INT 1
48786: PPUSH
48787: CALL_OW 268
48791: STR
48792: PUSH
48793: LD_STRING , 
48795: STR
48796: PUSH
48797: LD_VAR 0 3
48801: PPUSH
48802: LD_INT 2
48804: PPUSH
48805: CALL_OW 268
48809: STR
48810: PUSH
48811: LD_STRING ],
48813: STR
48814: PPUSH
48815: CALL_OW 561
// end ;
48819: GO 48713
48821: POP
48822: POP
// AddToLog ( ]; ) ;
48823: LD_STRING ];
48825: PPUSH
48826: CALL_OW 561
// end ;
48830: LD_VAR 0 2
48834: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48835: LD_INT 0
48837: PPUSH
48838: PPUSH
48839: PPUSH
48840: PPUSH
48841: PPUSH
// if not area or not rate or not max then
48842: LD_VAR 0 1
48846: NOT
48847: IFTRUE 48856
48849: PUSH
48850: LD_VAR 0 2
48854: NOT
48855: OR
48856: IFTRUE 48865
48858: PUSH
48859: LD_VAR 0 4
48863: NOT
48864: OR
48865: IFFALSE 48869
// exit ;
48867: GO 49058
// while 1 do
48869: LD_INT 1
48871: IFFALSE 49058
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48873: LD_ADDR_VAR 0 9
48877: PUSH
48878: LD_VAR 0 1
48882: PPUSH
48883: LD_INT 1
48885: PPUSH
48886: CALL_OW 287
48890: PUSH
48891: LD_INT 10
48893: MUL
48894: ST_TO_ADDR
// r := rate / 10 ;
48895: LD_ADDR_VAR 0 7
48899: PUSH
48900: LD_VAR 0 2
48904: PUSH
48905: LD_INT 10
48907: DIVREAL
48908: ST_TO_ADDR
// time := 1 1$00 ;
48909: LD_ADDR_VAR 0 8
48913: PUSH
48914: LD_INT 2100
48916: ST_TO_ADDR
// if amount < min then
48917: LD_VAR 0 9
48921: PUSH
48922: LD_VAR 0 3
48926: LESS
48927: IFFALSE 48945
// r := r * 2 else
48929: LD_ADDR_VAR 0 7
48933: PUSH
48934: LD_VAR 0 7
48938: PUSH
48939: LD_INT 2
48941: MUL
48942: ST_TO_ADDR
48943: GO 48971
// if amount > max then
48945: LD_VAR 0 9
48949: PUSH
48950: LD_VAR 0 4
48954: GREATER
48955: IFFALSE 48971
// r := r / 2 ;
48957: LD_ADDR_VAR 0 7
48961: PUSH
48962: LD_VAR 0 7
48966: PUSH
48967: LD_INT 2
48969: DIVREAL
48970: ST_TO_ADDR
// time := time / r ;
48971: LD_ADDR_VAR 0 8
48975: PUSH
48976: LD_VAR 0 8
48980: PUSH
48981: LD_VAR 0 7
48985: DIVREAL
48986: ST_TO_ADDR
// if time < 0 then
48987: LD_VAR 0 8
48991: PUSH
48992: LD_INT 0
48994: LESS
48995: IFFALSE 49012
// time := time * - 1 ;
48997: LD_ADDR_VAR 0 8
49001: PUSH
49002: LD_VAR 0 8
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: MUL
49011: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49012: LD_VAR 0 8
49016: PUSH
49017: LD_INT 35
49019: PPUSH
49020: LD_INT 875
49022: PPUSH
49023: CALL_OW 12
49027: PLUS
49028: PPUSH
49029: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49033: LD_INT 1
49035: PPUSH
49036: LD_INT 5
49038: PPUSH
49039: CALL_OW 12
49043: PPUSH
49044: LD_VAR 0 1
49048: PPUSH
49049: LD_INT 1
49051: PPUSH
49052: CALL_OW 55
// end ;
49056: GO 48869
// end ;
49058: LD_VAR 0 5
49062: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49063: LD_INT 0
49065: PPUSH
49066: PPUSH
49067: PPUSH
49068: PPUSH
49069: PPUSH
49070: PPUSH
49071: PPUSH
49072: PPUSH
// if not turrets or not factories then
49073: LD_VAR 0 1
49077: NOT
49078: IFTRUE 49087
49080: PUSH
49081: LD_VAR 0 2
49085: NOT
49086: OR
49087: IFFALSE 49091
// exit ;
49089: GO 49398
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49091: LD_ADDR_VAR 0 10
49095: PUSH
49096: LD_INT 5
49098: PUSH
49099: LD_INT 6
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: LD_INT 4
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 3
49118: PUSH
49119: LD_INT 5
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 24
49133: PUSH
49134: LD_INT 25
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 23
49143: PUSH
49144: LD_INT 27
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 42
49157: PUSH
49158: LD_INT 43
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 44
49167: PUSH
49168: LD_INT 46
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 45
49177: PUSH
49178: LD_INT 47
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: LIST
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: LIST
49194: ST_TO_ADDR
// result := [ ] ;
49195: LD_ADDR_VAR 0 3
49199: PUSH
49200: EMPTY
49201: ST_TO_ADDR
// for i in turrets do
49202: LD_ADDR_VAR 0 4
49206: PUSH
49207: LD_VAR 0 1
49211: PUSH
49212: FOR_IN
49213: IFFALSE 49396
// begin nat := GetNation ( i ) ;
49215: LD_ADDR_VAR 0 7
49219: PUSH
49220: LD_VAR 0 4
49224: PPUSH
49225: CALL_OW 248
49229: ST_TO_ADDR
// weapon := 0 ;
49230: LD_ADDR_VAR 0 8
49234: PUSH
49235: LD_INT 0
49237: ST_TO_ADDR
// if not nat then
49238: LD_VAR 0 7
49242: NOT
49243: IFFALSE 49247
// continue ;
49245: GO 49212
// for j in list [ nat ] do
49247: LD_ADDR_VAR 0 5
49251: PUSH
49252: LD_VAR 0 10
49256: PUSH
49257: LD_VAR 0 7
49261: ARRAY
49262: PUSH
49263: FOR_IN
49264: IFFALSE 49305
// if GetBWeapon ( i ) = j [ 1 ] then
49266: LD_VAR 0 4
49270: PPUSH
49271: CALL_OW 269
49275: PUSH
49276: LD_VAR 0 5
49280: PUSH
49281: LD_INT 1
49283: ARRAY
49284: EQUAL
49285: IFFALSE 49303
// begin weapon := j [ 2 ] ;
49287: LD_ADDR_VAR 0 8
49291: PUSH
49292: LD_VAR 0 5
49296: PUSH
49297: LD_INT 2
49299: ARRAY
49300: ST_TO_ADDR
// break ;
49301: GO 49305
// end ;
49303: GO 49263
49305: POP
49306: POP
// if not weapon then
49307: LD_VAR 0 8
49311: NOT
49312: IFFALSE 49316
// continue ;
49314: GO 49212
// for k in factories do
49316: LD_ADDR_VAR 0 6
49320: PUSH
49321: LD_VAR 0 2
49325: PUSH
49326: FOR_IN
49327: IFFALSE 49392
// begin weapons := AvailableWeaponList ( k ) ;
49329: LD_ADDR_VAR 0 9
49333: PUSH
49334: LD_VAR 0 6
49338: PPUSH
49339: CALL_OW 478
49343: ST_TO_ADDR
// if not weapons then
49344: LD_VAR 0 9
49348: NOT
49349: IFFALSE 49353
// continue ;
49351: GO 49326
// if weapon in weapons then
49353: LD_VAR 0 8
49357: PUSH
49358: LD_VAR 0 9
49362: IN
49363: IFFALSE 49390
// begin result := [ i , weapon ] ;
49365: LD_ADDR_VAR 0 3
49369: PUSH
49370: LD_VAR 0 4
49374: PUSH
49375: LD_VAR 0 8
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: ST_TO_ADDR
// exit ;
49384: POP
49385: POP
49386: POP
49387: POP
49388: GO 49398
// end ; end ;
49390: GO 49326
49392: POP
49393: POP
// end ;
49394: GO 49212
49396: POP
49397: POP
// end ;
49398: LD_VAR 0 3
49402: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49403: LD_INT 0
49405: PPUSH
// if not side or side > 8 then
49406: LD_VAR 0 3
49410: NOT
49411: IFTRUE 49423
49413: PUSH
49414: LD_VAR 0 3
49418: PUSH
49419: LD_INT 8
49421: GREATER
49422: OR
49423: IFFALSE 49427
// exit ;
49425: GO 49486
// if not range then
49427: LD_VAR 0 4
49431: NOT
49432: IFFALSE 49443
// range := - 12 ;
49434: LD_ADDR_VAR 0 4
49438: PUSH
49439: LD_INT 12
49441: NEG
49442: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49443: LD_VAR 0 1
49447: PPUSH
49448: LD_VAR 0 2
49452: PPUSH
49453: LD_VAR 0 3
49457: PPUSH
49458: LD_VAR 0 4
49462: PPUSH
49463: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49467: LD_VAR 0 1
49471: PPUSH
49472: LD_VAR 0 2
49476: PPUSH
49477: LD_VAR 0 3
49481: PPUSH
49482: CALL_OW 331
// end ;
49486: LD_VAR 0 5
49490: RET
// export function Video ( mode ) ; begin
49491: LD_INT 0
49493: PPUSH
// ingame_video = mode ;
49494: LD_ADDR_OWVAR 52
49498: PUSH
49499: LD_VAR 0 1
49503: ST_TO_ADDR
// interface_hidden = mode ;
49504: LD_ADDR_OWVAR 54
49508: PUSH
49509: LD_VAR 0 1
49513: ST_TO_ADDR
// end ;
49514: LD_VAR 0 2
49518: RET
// export function Join ( array , element ) ; begin
49519: LD_INT 0
49521: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49522: LD_ADDR_VAR 0 3
49526: PUSH
49527: LD_VAR 0 1
49531: PPUSH
49532: LD_VAR 0 1
49536: PUSH
49537: LD_INT 1
49539: PLUS
49540: PPUSH
49541: LD_VAR 0 2
49545: PPUSH
49546: CALL_OW 1
49550: ST_TO_ADDR
// end ;
49551: LD_VAR 0 3
49555: RET
// export function JoinUnion ( array , element ) ; begin
49556: LD_INT 0
49558: PPUSH
// result := array union element ;
49559: LD_ADDR_VAR 0 3
49563: PUSH
49564: LD_VAR 0 1
49568: PUSH
49569: LD_VAR 0 2
49573: UNION
49574: ST_TO_ADDR
// end ;
49575: LD_VAR 0 3
49579: RET
// export function GetBehemoths ( side ) ; begin
49580: LD_INT 0
49582: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49583: LD_ADDR_VAR 0 2
49587: PUSH
49588: LD_INT 22
49590: PUSH
49591: LD_VAR 0 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 31
49602: PUSH
49603: LD_INT 25
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PPUSH
49614: CALL_OW 69
49618: ST_TO_ADDR
// end ;
49619: LD_VAR 0 2
49623: RET
// export function Shuffle ( array ) ; var i , index ; begin
49624: LD_INT 0
49626: PPUSH
49627: PPUSH
49628: PPUSH
// result := [ ] ;
49629: LD_ADDR_VAR 0 2
49633: PUSH
49634: EMPTY
49635: ST_TO_ADDR
// if not array then
49636: LD_VAR 0 1
49640: NOT
49641: IFFALSE 49645
// exit ;
49643: GO 49744
// Randomize ;
49645: CALL_OW 10
// for i = array downto 1 do
49649: LD_ADDR_VAR 0 3
49653: PUSH
49654: DOUBLE
49655: LD_VAR 0 1
49659: INC
49660: ST_TO_ADDR
49661: LD_INT 1
49663: PUSH
49664: FOR_DOWNTO
49665: IFFALSE 49742
// begin index := rand ( 1 , array ) ;
49667: LD_ADDR_VAR 0 4
49671: PUSH
49672: LD_INT 1
49674: PPUSH
49675: LD_VAR 0 1
49679: PPUSH
49680: CALL_OW 12
49684: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49685: LD_ADDR_VAR 0 2
49689: PUSH
49690: LD_VAR 0 2
49694: PPUSH
49695: LD_VAR 0 2
49699: PUSH
49700: LD_INT 1
49702: PLUS
49703: PPUSH
49704: LD_VAR 0 1
49708: PUSH
49709: LD_VAR 0 4
49713: ARRAY
49714: PPUSH
49715: CALL_OW 2
49719: ST_TO_ADDR
// array := Delete ( array , index ) ;
49720: LD_ADDR_VAR 0 1
49724: PUSH
49725: LD_VAR 0 1
49729: PPUSH
49730: LD_VAR 0 4
49734: PPUSH
49735: CALL_OW 3
49739: ST_TO_ADDR
// end ;
49740: GO 49664
49742: POP
49743: POP
// end ;
49744: LD_VAR 0 2
49748: RET
// export function GetBaseMaterials ( base ) ; begin
49749: LD_INT 0
49751: PPUSH
// result := [ 0 , 0 , 0 ] ;
49752: LD_ADDR_VAR 0 2
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: ST_TO_ADDR
// if not base then
49771: LD_VAR 0 1
49775: NOT
49776: IFFALSE 49780
// exit ;
49778: GO 49829
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49780: LD_ADDR_VAR 0 2
49784: PUSH
49785: LD_VAR 0 1
49789: PPUSH
49790: LD_INT 1
49792: PPUSH
49793: CALL_OW 275
49797: PUSH
49798: LD_VAR 0 1
49802: PPUSH
49803: LD_INT 2
49805: PPUSH
49806: CALL_OW 275
49810: PUSH
49811: LD_VAR 0 1
49815: PPUSH
49816: LD_INT 3
49818: PPUSH
49819: CALL_OW 275
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: ST_TO_ADDR
// end ;
49829: LD_VAR 0 2
49833: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49834: LD_INT 0
49836: PPUSH
49837: PPUSH
// result := array ;
49838: LD_ADDR_VAR 0 3
49842: PUSH
49843: LD_VAR 0 1
49847: ST_TO_ADDR
// if size >= result then
49848: LD_VAR 0 2
49852: PUSH
49853: LD_VAR 0 3
49857: GREATEREQUAL
49858: IFFALSE 49862
// exit ;
49860: GO 49912
// if size then
49862: LD_VAR 0 2
49866: IFFALSE 49912
// for i := array downto size do
49868: LD_ADDR_VAR 0 4
49872: PUSH
49873: DOUBLE
49874: LD_VAR 0 1
49878: INC
49879: ST_TO_ADDR
49880: LD_VAR 0 2
49884: PUSH
49885: FOR_DOWNTO
49886: IFFALSE 49910
// result := Delete ( result , result ) ;
49888: LD_ADDR_VAR 0 3
49892: PUSH
49893: LD_VAR 0 3
49897: PPUSH
49898: LD_VAR 0 3
49902: PPUSH
49903: CALL_OW 3
49907: ST_TO_ADDR
49908: GO 49885
49910: POP
49911: POP
// end ;
49912: LD_VAR 0 3
49916: RET
// export function ComExit ( unit ) ; var tmp ; begin
49917: LD_INT 0
49919: PPUSH
49920: PPUSH
// if not IsInUnit ( unit ) then
49921: LD_VAR 0 1
49925: PPUSH
49926: CALL_OW 310
49930: NOT
49931: IFFALSE 49935
// exit ;
49933: GO 49995
// tmp := IsInUnit ( unit ) ;
49935: LD_ADDR_VAR 0 3
49939: PUSH
49940: LD_VAR 0 1
49944: PPUSH
49945: CALL_OW 310
49949: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49950: LD_VAR 0 3
49954: PPUSH
49955: CALL_OW 247
49959: PUSH
49960: LD_INT 2
49962: EQUAL
49963: IFFALSE 49976
// ComExitVehicle ( unit ) else
49965: LD_VAR 0 1
49969: PPUSH
49970: CALL_OW 121
49974: GO 49985
// ComExitBuilding ( unit ) ;
49976: LD_VAR 0 1
49980: PPUSH
49981: CALL_OW 122
// result := tmp ;
49985: LD_ADDR_VAR 0 2
49989: PUSH
49990: LD_VAR 0 3
49994: ST_TO_ADDR
// end ;
49995: LD_VAR 0 2
49999: RET
// export function ComExitAll ( units ) ; var i ; begin
50000: LD_INT 0
50002: PPUSH
50003: PPUSH
// if not units then
50004: LD_VAR 0 1
50008: NOT
50009: IFFALSE 50013
// exit ;
50011: GO 50039
// for i in units do
50013: LD_ADDR_VAR 0 3
50017: PUSH
50018: LD_VAR 0 1
50022: PUSH
50023: FOR_IN
50024: IFFALSE 50037
// ComExit ( i ) ;
50026: LD_VAR 0 3
50030: PPUSH
50031: CALL 49917 0 1
50035: GO 50023
50037: POP
50038: POP
// end ;
50039: LD_VAR 0 2
50043: RET
// export function ResetHc ; begin
50044: LD_INT 0
50046: PPUSH
// InitHc ;
50047: CALL_OW 19
// hc_importance := 0 ;
50051: LD_ADDR_OWVAR 32
50055: PUSH
50056: LD_INT 0
50058: ST_TO_ADDR
// end ;
50059: LD_VAR 0 1
50063: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50064: LD_INT 0
50066: PPUSH
50067: PPUSH
50068: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50069: LD_ADDR_VAR 0 6
50073: PUSH
50074: LD_VAR 0 1
50078: PUSH
50079: LD_VAR 0 3
50083: PLUS
50084: PUSH
50085: LD_INT 2
50087: DIV
50088: ST_TO_ADDR
// if _x < 0 then
50089: LD_VAR 0 6
50093: PUSH
50094: LD_INT 0
50096: LESS
50097: IFFALSE 50114
// _x := _x * - 1 ;
50099: LD_ADDR_VAR 0 6
50103: PUSH
50104: LD_VAR 0 6
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: MUL
50113: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50114: LD_ADDR_VAR 0 7
50118: PUSH
50119: LD_VAR 0 2
50123: PUSH
50124: LD_VAR 0 4
50128: PLUS
50129: PUSH
50130: LD_INT 2
50132: DIV
50133: ST_TO_ADDR
// if _y < 0 then
50134: LD_VAR 0 7
50138: PUSH
50139: LD_INT 0
50141: LESS
50142: IFFALSE 50159
// _y := _y * - 1 ;
50144: LD_ADDR_VAR 0 7
50148: PUSH
50149: LD_VAR 0 7
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: MUL
50158: ST_TO_ADDR
// result := [ _x , _y ] ;
50159: LD_ADDR_VAR 0 5
50163: PUSH
50164: LD_VAR 0 6
50168: PUSH
50169: LD_VAR 0 7
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: ST_TO_ADDR
// end ;
50178: LD_VAR 0 5
50182: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50183: LD_INT 0
50185: PPUSH
50186: PPUSH
50187: PPUSH
50188: PPUSH
// task := GetTaskList ( unit ) ;
50189: LD_ADDR_VAR 0 7
50193: PUSH
50194: LD_VAR 0 1
50198: PPUSH
50199: CALL_OW 437
50203: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50204: LD_VAR 0 7
50208: NOT
50209: IFFALSE 50228
50211: PUSH
50212: LD_VAR 0 1
50216: PPUSH
50217: LD_VAR 0 2
50221: PPUSH
50222: CALL_OW 308
50226: NOT
50227: AND
50228: IFFALSE 50232
// exit ;
50230: GO 50350
// if IsInArea ( unit , area ) then
50232: LD_VAR 0 1
50236: PPUSH
50237: LD_VAR 0 2
50241: PPUSH
50242: CALL_OW 308
50246: IFFALSE 50264
// begin ComMoveToArea ( unit , goAway ) ;
50248: LD_VAR 0 1
50252: PPUSH
50253: LD_VAR 0 3
50257: PPUSH
50258: CALL_OW 113
// exit ;
50262: GO 50350
// end ; if task [ 1 ] [ 1 ] <> M then
50264: LD_VAR 0 7
50268: PUSH
50269: LD_INT 1
50271: ARRAY
50272: PUSH
50273: LD_INT 1
50275: ARRAY
50276: PUSH
50277: LD_STRING M
50279: NONEQUAL
50280: IFFALSE 50284
// exit ;
50282: GO 50350
// x := task [ 1 ] [ 2 ] ;
50284: LD_ADDR_VAR 0 5
50288: PUSH
50289: LD_VAR 0 7
50293: PUSH
50294: LD_INT 1
50296: ARRAY
50297: PUSH
50298: LD_INT 2
50300: ARRAY
50301: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50302: LD_ADDR_VAR 0 6
50306: PUSH
50307: LD_VAR 0 7
50311: PUSH
50312: LD_INT 1
50314: ARRAY
50315: PUSH
50316: LD_INT 3
50318: ARRAY
50319: ST_TO_ADDR
// if InArea ( x , y , area ) then
50320: LD_VAR 0 5
50324: PPUSH
50325: LD_VAR 0 6
50329: PPUSH
50330: LD_VAR 0 2
50334: PPUSH
50335: CALL_OW 309
50339: IFFALSE 50350
// ComStop ( unit ) ;
50341: LD_VAR 0 1
50345: PPUSH
50346: CALL_OW 141
// end ;
50350: LD_VAR 0 4
50354: RET
// export function Abs ( value ) ; begin
50355: LD_INT 0
50357: PPUSH
// result := value ;
50358: LD_ADDR_VAR 0 2
50362: PUSH
50363: LD_VAR 0 1
50367: ST_TO_ADDR
// if value < 0 then
50368: LD_VAR 0 1
50372: PUSH
50373: LD_INT 0
50375: LESS
50376: IFFALSE 50393
// result := value * - 1 ;
50378: LD_ADDR_VAR 0 2
50382: PUSH
50383: LD_VAR 0 1
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: MUL
50392: ST_TO_ADDR
// end ;
50393: LD_VAR 0 2
50397: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50398: LD_INT 0
50400: PPUSH
50401: PPUSH
50402: PPUSH
50403: PPUSH
50404: PPUSH
50405: PPUSH
50406: PPUSH
50407: PPUSH
// if not unit or not building then
50408: LD_VAR 0 1
50412: NOT
50413: IFTRUE 50422
50415: PUSH
50416: LD_VAR 0 2
50420: NOT
50421: OR
50422: IFFALSE 50426
// exit ;
50424: GO 50654
// x := GetX ( building ) ;
50426: LD_ADDR_VAR 0 4
50430: PUSH
50431: LD_VAR 0 2
50435: PPUSH
50436: CALL_OW 250
50440: ST_TO_ADDR
// y := GetY ( building ) ;
50441: LD_ADDR_VAR 0 6
50445: PUSH
50446: LD_VAR 0 2
50450: PPUSH
50451: CALL_OW 251
50455: ST_TO_ADDR
// d := GetDir ( building ) ;
50456: LD_ADDR_VAR 0 8
50460: PUSH
50461: LD_VAR 0 2
50465: PPUSH
50466: CALL_OW 254
50470: ST_TO_ADDR
// r := 4 ;
50471: LD_ADDR_VAR 0 9
50475: PUSH
50476: LD_INT 4
50478: ST_TO_ADDR
// for i := 1 to 5 do
50479: LD_ADDR_VAR 0 10
50483: PUSH
50484: DOUBLE
50485: LD_INT 1
50487: DEC
50488: ST_TO_ADDR
50489: LD_INT 5
50491: PUSH
50492: FOR_TO
50493: IFFALSE 50652
// begin _x := ShiftX ( x , d , r + i ) ;
50495: LD_ADDR_VAR 0 5
50499: PUSH
50500: LD_VAR 0 4
50504: PPUSH
50505: LD_VAR 0 8
50509: PPUSH
50510: LD_VAR 0 9
50514: PUSH
50515: LD_VAR 0 10
50519: PLUS
50520: PPUSH
50521: CALL_OW 272
50525: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50526: LD_ADDR_VAR 0 7
50530: PUSH
50531: LD_VAR 0 6
50535: PPUSH
50536: LD_VAR 0 8
50540: PPUSH
50541: LD_VAR 0 9
50545: PUSH
50546: LD_VAR 0 10
50550: PLUS
50551: PPUSH
50552: CALL_OW 273
50556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50557: LD_VAR 0 5
50561: PPUSH
50562: LD_VAR 0 7
50566: PPUSH
50567: CALL_OW 488
50571: IFFALSE 50606
50573: PUSH
50574: LD_VAR 0 5
50578: PPUSH
50579: LD_VAR 0 7
50583: PPUSH
50584: CALL_OW 428
50588: PPUSH
50589: CALL_OW 247
50593: PUSH
50594: LD_INT 3
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: IN
50604: NOT
50605: AND
50606: IFFALSE 50650
// begin ComMoveXY ( unit , _x , _y ) ;
50608: LD_VAR 0 1
50612: PPUSH
50613: LD_VAR 0 5
50617: PPUSH
50618: LD_VAR 0 7
50622: PPUSH
50623: CALL_OW 111
// result := [ _x , _y ] ;
50627: LD_ADDR_VAR 0 3
50631: PUSH
50632: LD_VAR 0 5
50636: PUSH
50637: LD_VAR 0 7
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: ST_TO_ADDR
// exit ;
50646: POP
50647: POP
50648: GO 50654
// end ; end ;
50650: GO 50492
50652: POP
50653: POP
// end ;
50654: LD_VAR 0 3
50658: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50659: LD_INT 0
50661: PPUSH
50662: PPUSH
50663: PPUSH
// result := 0 ;
50664: LD_ADDR_VAR 0 3
50668: PUSH
50669: LD_INT 0
50671: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50672: LD_VAR 0 1
50676: PUSH
50677: LD_INT 0
50679: LESS
50680: IFTRUE 50692
50682: PUSH
50683: LD_VAR 0 1
50687: PUSH
50688: LD_INT 8
50690: GREATER
50691: OR
50692: IFTRUE 50704
50694: PUSH
50695: LD_VAR 0 2
50699: PUSH
50700: LD_INT 0
50702: LESS
50703: OR
50704: IFTRUE 50716
50706: PUSH
50707: LD_VAR 0 2
50711: PUSH
50712: LD_INT 8
50714: GREATER
50715: OR
50716: IFFALSE 50720
// exit ;
50718: GO 50795
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50720: LD_ADDR_VAR 0 4
50724: PUSH
50725: LD_INT 22
50727: PUSH
50728: LD_VAR 0 2
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PPUSH
50737: CALL_OW 69
50741: PUSH
50742: FOR_IN
50743: IFFALSE 50793
// begin un := UnitShoot ( i ) ;
50745: LD_ADDR_VAR 0 5
50749: PUSH
50750: LD_VAR 0 4
50754: PPUSH
50755: CALL_OW 504
50759: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50760: LD_VAR 0 5
50764: PPUSH
50765: CALL_OW 255
50769: PUSH
50770: LD_VAR 0 1
50774: EQUAL
50775: IFFALSE 50791
// begin result := un ;
50777: LD_ADDR_VAR 0 3
50781: PUSH
50782: LD_VAR 0 5
50786: ST_TO_ADDR
// exit ;
50787: POP
50788: POP
50789: GO 50795
// end ; end ;
50791: GO 50742
50793: POP
50794: POP
// end ;
50795: LD_VAR 0 3
50799: RET
// export function GetCargoBay ( units ) ; begin
50800: LD_INT 0
50802: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50803: LD_ADDR_VAR 0 2
50807: PUSH
50808: LD_VAR 0 1
50812: PPUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 34
50818: PUSH
50819: LD_INT 12
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 34
50828: PUSH
50829: LD_INT 51
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 34
50838: PUSH
50839: LD_INT 32
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 34
50848: PUSH
50849: LD_INT 89
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: PPUSH
50863: CALL_OW 72
50867: ST_TO_ADDR
// end ;
50868: LD_VAR 0 2
50872: RET
// export function Negate ( value ) ; begin
50873: LD_INT 0
50875: PPUSH
// result := not value ;
50876: LD_ADDR_VAR 0 2
50880: PUSH
50881: LD_VAR 0 1
50885: NOT
50886: ST_TO_ADDR
// end ;
50887: LD_VAR 0 2
50891: RET
// export function Inc ( value ) ; begin
50892: LD_INT 0
50894: PPUSH
// result := value + 1 ;
50895: LD_ADDR_VAR 0 2
50899: PUSH
50900: LD_VAR 0 1
50904: PUSH
50905: LD_INT 1
50907: PLUS
50908: ST_TO_ADDR
// end ;
50909: LD_VAR 0 2
50913: RET
// export function Dec ( value ) ; begin
50914: LD_INT 0
50916: PPUSH
// result := value - 1 ;
50917: LD_ADDR_VAR 0 2
50921: PUSH
50922: LD_VAR 0 1
50926: PUSH
50927: LD_INT 1
50929: MINUS
50930: ST_TO_ADDR
// end ;
50931: LD_VAR 0 2
50935: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50936: LD_INT 0
50938: PPUSH
50939: PPUSH
50940: PPUSH
50941: PPUSH
50942: PPUSH
50943: PPUSH
50944: PPUSH
50945: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50946: LD_VAR 0 1
50950: PPUSH
50951: LD_VAR 0 2
50955: PPUSH
50956: CALL_OW 488
50960: NOT
50961: IFTRUE 50980
50963: PUSH
50964: LD_VAR 0 3
50968: PPUSH
50969: LD_VAR 0 4
50973: PPUSH
50974: CALL_OW 488
50978: NOT
50979: OR
50980: IFFALSE 50993
// begin result := - 1 ;
50982: LD_ADDR_VAR 0 5
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: ST_TO_ADDR
// exit ;
50991: GO 51228
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50993: LD_ADDR_VAR 0 12
50997: PUSH
50998: LD_VAR 0 1
51002: PPUSH
51003: LD_VAR 0 2
51007: PPUSH
51008: LD_VAR 0 3
51012: PPUSH
51013: LD_VAR 0 4
51017: PPUSH
51018: CALL 50064 0 4
51022: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51023: LD_ADDR_VAR 0 11
51027: PUSH
51028: LD_VAR 0 1
51032: PPUSH
51033: LD_VAR 0 2
51037: PPUSH
51038: LD_VAR 0 12
51042: PUSH
51043: LD_INT 1
51045: ARRAY
51046: PPUSH
51047: LD_VAR 0 12
51051: PUSH
51052: LD_INT 2
51054: ARRAY
51055: PPUSH
51056: CALL_OW 298
51060: ST_TO_ADDR
// distance := 9999 ;
51061: LD_ADDR_VAR 0 10
51065: PUSH
51066: LD_INT 9999
51068: ST_TO_ADDR
// for i := 0 to 5 do
51069: LD_ADDR_VAR 0 6
51073: PUSH
51074: DOUBLE
51075: LD_INT 0
51077: DEC
51078: ST_TO_ADDR
51079: LD_INT 5
51081: PUSH
51082: FOR_TO
51083: IFFALSE 51226
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51085: LD_ADDR_VAR 0 7
51089: PUSH
51090: LD_VAR 0 1
51094: PPUSH
51095: LD_VAR 0 6
51099: PPUSH
51100: LD_VAR 0 11
51104: PPUSH
51105: CALL_OW 272
51109: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51110: LD_ADDR_VAR 0 8
51114: PUSH
51115: LD_VAR 0 2
51119: PPUSH
51120: LD_VAR 0 6
51124: PPUSH
51125: LD_VAR 0 11
51129: PPUSH
51130: CALL_OW 273
51134: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51135: LD_VAR 0 7
51139: PPUSH
51140: LD_VAR 0 8
51144: PPUSH
51145: CALL_OW 488
51149: NOT
51150: IFFALSE 51154
// continue ;
51152: GO 51082
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51154: LD_ADDR_VAR 0 9
51158: PUSH
51159: LD_VAR 0 12
51163: PUSH
51164: LD_INT 1
51166: ARRAY
51167: PPUSH
51168: LD_VAR 0 12
51172: PUSH
51173: LD_INT 2
51175: ARRAY
51176: PPUSH
51177: LD_VAR 0 7
51181: PPUSH
51182: LD_VAR 0 8
51186: PPUSH
51187: CALL_OW 298
51191: ST_TO_ADDR
// if tmp < distance then
51192: LD_VAR 0 9
51196: PUSH
51197: LD_VAR 0 10
51201: LESS
51202: IFFALSE 51224
// begin result := i ;
51204: LD_ADDR_VAR 0 5
51208: PUSH
51209: LD_VAR 0 6
51213: ST_TO_ADDR
// distance := tmp ;
51214: LD_ADDR_VAR 0 10
51218: PUSH
51219: LD_VAR 0 9
51223: ST_TO_ADDR
// end ; end ;
51224: GO 51082
51226: POP
51227: POP
// end ;
51228: LD_VAR 0 5
51232: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51233: LD_INT 0
51235: PPUSH
51236: PPUSH
// if not driver or not IsInUnit ( driver ) then
51237: LD_VAR 0 1
51241: NOT
51242: IFTRUE 51256
51244: PUSH
51245: LD_VAR 0 1
51249: PPUSH
51250: CALL_OW 310
51254: NOT
51255: OR
51256: IFFALSE 51260
// exit ;
51258: GO 51350
// vehicle := IsInUnit ( driver ) ;
51260: LD_ADDR_VAR 0 3
51264: PUSH
51265: LD_VAR 0 1
51269: PPUSH
51270: CALL_OW 310
51274: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51275: LD_VAR 0 1
51279: PPUSH
51280: LD_STRING \
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: PUSH
51310: LD_STRING E
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_VAR 0 3
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PPUSH
51346: CALL_OW 446
// end ;
51350: LD_VAR 0 2
51354: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51355: LD_INT 0
51357: PPUSH
51358: PPUSH
// if not driver or not IsInUnit ( driver ) then
51359: LD_VAR 0 1
51363: NOT
51364: IFTRUE 51378
51366: PUSH
51367: LD_VAR 0 1
51371: PPUSH
51372: CALL_OW 310
51376: NOT
51377: OR
51378: IFFALSE 51382
// exit ;
51380: GO 51472
// vehicle := IsInUnit ( driver ) ;
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_VAR 0 1
51391: PPUSH
51392: CALL_OW 310
51396: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51397: LD_VAR 0 1
51401: PPUSH
51402: LD_STRING \
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: PUSH
51432: LD_STRING E
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_VAR 0 3
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PPUSH
51468: CALL_OW 447
// end ;
51472: LD_VAR 0 2
51476: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51477: LD_INT 0
51479: PPUSH
51480: PPUSH
51481: PPUSH
// tmp := [ ] ;
51482: LD_ADDR_VAR 0 5
51486: PUSH
51487: EMPTY
51488: ST_TO_ADDR
// for i in units do
51489: LD_ADDR_VAR 0 4
51493: PUSH
51494: LD_VAR 0 1
51498: PUSH
51499: FOR_IN
51500: IFFALSE 51538
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51502: LD_ADDR_VAR 0 5
51506: PUSH
51507: LD_VAR 0 5
51511: PPUSH
51512: LD_VAR 0 5
51516: PUSH
51517: LD_INT 1
51519: PLUS
51520: PPUSH
51521: LD_VAR 0 4
51525: PPUSH
51526: CALL_OW 256
51530: PPUSH
51531: CALL_OW 2
51535: ST_TO_ADDR
51536: GO 51499
51538: POP
51539: POP
// if not tmp then
51540: LD_VAR 0 5
51544: NOT
51545: IFFALSE 51549
// exit ;
51547: GO 51597
// if asc then
51549: LD_VAR 0 2
51553: IFFALSE 51577
// result := SortListByListAsc ( units , tmp ) else
51555: LD_ADDR_VAR 0 3
51559: PUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: LD_VAR 0 5
51569: PPUSH
51570: CALL_OW 76
51574: ST_TO_ADDR
51575: GO 51597
// result := SortListByListDesc ( units , tmp ) ;
51577: LD_ADDR_VAR 0 3
51581: PUSH
51582: LD_VAR 0 1
51586: PPUSH
51587: LD_VAR 0 5
51591: PPUSH
51592: CALL_OW 77
51596: ST_TO_ADDR
// end ;
51597: LD_VAR 0 3
51601: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51602: LD_INT 0
51604: PPUSH
51605: PPUSH
// task := GetTaskList ( mech ) ;
51606: LD_ADDR_VAR 0 4
51610: PUSH
51611: LD_VAR 0 1
51615: PPUSH
51616: CALL_OW 437
51620: ST_TO_ADDR
// if not task then
51621: LD_VAR 0 4
51625: NOT
51626: IFFALSE 51630
// exit ;
51628: GO 51674
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51630: LD_ADDR_VAR 0 3
51634: PUSH
51635: LD_VAR 0 4
51639: PUSH
51640: LD_INT 1
51642: ARRAY
51643: PUSH
51644: LD_INT 1
51646: ARRAY
51647: PUSH
51648: LD_STRING r
51650: EQUAL
51651: IFFALSE 51673
51653: PUSH
51654: LD_VAR 0 4
51658: PUSH
51659: LD_INT 1
51661: ARRAY
51662: PUSH
51663: LD_INT 4
51665: ARRAY
51666: PUSH
51667: LD_VAR 0 2
51671: EQUAL
51672: AND
51673: ST_TO_ADDR
// end ;
51674: LD_VAR 0 3
51678: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51679: LD_INT 0
51681: PPUSH
// SetDir ( unit , d ) ;
51682: LD_VAR 0 1
51686: PPUSH
51687: LD_VAR 0 4
51691: PPUSH
51692: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51696: LD_ADDR_VAR 0 6
51700: PUSH
51701: LD_VAR 0 1
51705: PPUSH
51706: LD_VAR 0 2
51710: PPUSH
51711: LD_VAR 0 3
51715: PPUSH
51716: LD_VAR 0 5
51720: PPUSH
51721: CALL_OW 48
51725: ST_TO_ADDR
// end ;
51726: LD_VAR 0 6
51730: RET
// export function ToNaturalNumber ( number ) ; begin
51731: LD_INT 0
51733: PPUSH
// result := number div 1 ;
51734: LD_ADDR_VAR 0 2
51738: PUSH
51739: LD_VAR 0 1
51743: PUSH
51744: LD_INT 1
51746: DIV
51747: ST_TO_ADDR
// if number < 0 then
51748: LD_VAR 0 1
51752: PUSH
51753: LD_INT 0
51755: LESS
51756: IFFALSE 51766
// result := 0 ;
51758: LD_ADDR_VAR 0 2
51762: PUSH
51763: LD_INT 0
51765: ST_TO_ADDR
// end ;
51766: LD_VAR 0 2
51770: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51771: LD_INT 0
51773: PPUSH
51774: PPUSH
51775: PPUSH
// if not buildings then
51776: LD_VAR 0 1
51780: NOT
51781: IFFALSE 51785
// exit ;
51783: GO 51900
// tmp := [ ] ;
51785: LD_ADDR_VAR 0 5
51789: PUSH
51790: EMPTY
51791: ST_TO_ADDR
// for b in buildings do
51792: LD_ADDR_VAR 0 4
51796: PUSH
51797: LD_VAR 0 1
51801: PUSH
51802: FOR_IN
51803: IFFALSE 51841
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51805: LD_ADDR_VAR 0 5
51809: PUSH
51810: LD_VAR 0 5
51814: PPUSH
51815: LD_VAR 0 5
51819: PUSH
51820: LD_INT 1
51822: PLUS
51823: PPUSH
51824: LD_VAR 0 4
51828: PPUSH
51829: CALL_OW 266
51833: PPUSH
51834: CALL_OW 1
51838: ST_TO_ADDR
51839: GO 51802
51841: POP
51842: POP
// if not tmp then
51843: LD_VAR 0 5
51847: NOT
51848: IFFALSE 51852
// exit ;
51850: GO 51900
// if asc then
51852: LD_VAR 0 2
51856: IFFALSE 51880
// result := SortListByListAsc ( buildings , tmp ) else
51858: LD_ADDR_VAR 0 3
51862: PUSH
51863: LD_VAR 0 1
51867: PPUSH
51868: LD_VAR 0 5
51872: PPUSH
51873: CALL_OW 76
51877: ST_TO_ADDR
51878: GO 51900
// result := SortListByListDesc ( buildings , tmp ) ;
51880: LD_ADDR_VAR 0 3
51884: PUSH
51885: LD_VAR 0 1
51889: PPUSH
51890: LD_VAR 0 5
51894: PPUSH
51895: CALL_OW 77
51899: ST_TO_ADDR
// end ;
51900: LD_VAR 0 3
51904: RET
// export function SortByClass ( units , class ) ; var un ; begin
51905: LD_INT 0
51907: PPUSH
51908: PPUSH
// if not units or not class then
51909: LD_VAR 0 1
51913: NOT
51914: IFTRUE 51923
51916: PUSH
51917: LD_VAR 0 2
51921: NOT
51922: OR
51923: IFFALSE 51927
// exit ;
51925: GO 52022
// result := [ ] ;
51927: LD_ADDR_VAR 0 3
51931: PUSH
51932: EMPTY
51933: ST_TO_ADDR
// for un in units do
51934: LD_ADDR_VAR 0 4
51938: PUSH
51939: LD_VAR 0 1
51943: PUSH
51944: FOR_IN
51945: IFFALSE 52020
// if GetClass ( un ) = class then
51947: LD_VAR 0 4
51951: PPUSH
51952: CALL_OW 257
51956: PUSH
51957: LD_VAR 0 2
51961: EQUAL
51962: IFFALSE 51989
// result := Insert ( result , 1 , un ) else
51964: LD_ADDR_VAR 0 3
51968: PUSH
51969: LD_VAR 0 3
51973: PPUSH
51974: LD_INT 1
51976: PPUSH
51977: LD_VAR 0 4
51981: PPUSH
51982: CALL_OW 2
51986: ST_TO_ADDR
51987: GO 52018
// result := Replace ( result , result + 1 , un ) ;
51989: LD_ADDR_VAR 0 3
51993: PUSH
51994: LD_VAR 0 3
51998: PPUSH
51999: LD_VAR 0 3
52003: PUSH
52004: LD_INT 1
52006: PLUS
52007: PPUSH
52008: LD_VAR 0 4
52012: PPUSH
52013: CALL_OW 1
52017: ST_TO_ADDR
52018: GO 51944
52020: POP
52021: POP
// end ;
52022: LD_VAR 0 3
52026: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52027: LD_INT 0
52029: PPUSH
52030: PPUSH
52031: PPUSH
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
// result := [ ] ;
52036: LD_ADDR_VAR 0 4
52040: PUSH
52041: EMPTY
52042: ST_TO_ADDR
// if x - r < 0 then
52043: LD_VAR 0 1
52047: PUSH
52048: LD_VAR 0 3
52052: MINUS
52053: PUSH
52054: LD_INT 0
52056: LESS
52057: IFFALSE 52069
// min_x := 0 else
52059: LD_ADDR_VAR 0 8
52063: PUSH
52064: LD_INT 0
52066: ST_TO_ADDR
52067: GO 52085
// min_x := x - r ;
52069: LD_ADDR_VAR 0 8
52073: PUSH
52074: LD_VAR 0 1
52078: PUSH
52079: LD_VAR 0 3
52083: MINUS
52084: ST_TO_ADDR
// if y - r < 0 then
52085: LD_VAR 0 2
52089: PUSH
52090: LD_VAR 0 3
52094: MINUS
52095: PUSH
52096: LD_INT 0
52098: LESS
52099: IFFALSE 52111
// min_y := 0 else
52101: LD_ADDR_VAR 0 7
52105: PUSH
52106: LD_INT 0
52108: ST_TO_ADDR
52109: GO 52127
// min_y := y - r ;
52111: LD_ADDR_VAR 0 7
52115: PUSH
52116: LD_VAR 0 2
52120: PUSH
52121: LD_VAR 0 3
52125: MINUS
52126: ST_TO_ADDR
// max_x := x + r ;
52127: LD_ADDR_VAR 0 9
52131: PUSH
52132: LD_VAR 0 1
52136: PUSH
52137: LD_VAR 0 3
52141: PLUS
52142: ST_TO_ADDR
// max_y := y + r ;
52143: LD_ADDR_VAR 0 10
52147: PUSH
52148: LD_VAR 0 2
52152: PUSH
52153: LD_VAR 0 3
52157: PLUS
52158: ST_TO_ADDR
// for _x = min_x to max_x do
52159: LD_ADDR_VAR 0 5
52163: PUSH
52164: DOUBLE
52165: LD_VAR 0 8
52169: DEC
52170: ST_TO_ADDR
52171: LD_VAR 0 9
52175: PUSH
52176: FOR_TO
52177: IFFALSE 52278
// for _y = min_y to max_y do
52179: LD_ADDR_VAR 0 6
52183: PUSH
52184: DOUBLE
52185: LD_VAR 0 7
52189: DEC
52190: ST_TO_ADDR
52191: LD_VAR 0 10
52195: PUSH
52196: FOR_TO
52197: IFFALSE 52274
// begin if not ValidHex ( _x , _y ) then
52199: LD_VAR 0 5
52203: PPUSH
52204: LD_VAR 0 6
52208: PPUSH
52209: CALL_OW 488
52213: NOT
52214: IFFALSE 52218
// continue ;
52216: GO 52196
// if GetResourceTypeXY ( _x , _y ) then
52218: LD_VAR 0 5
52222: PPUSH
52223: LD_VAR 0 6
52227: PPUSH
52228: CALL_OW 283
52232: IFFALSE 52272
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52234: LD_ADDR_VAR 0 4
52238: PUSH
52239: LD_VAR 0 4
52243: PPUSH
52244: LD_VAR 0 4
52248: PUSH
52249: LD_INT 1
52251: PLUS
52252: PPUSH
52253: LD_VAR 0 5
52257: PUSH
52258: LD_VAR 0 6
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PPUSH
52267: CALL_OW 1
52271: ST_TO_ADDR
// end ;
52272: GO 52196
52274: POP
52275: POP
52276: GO 52176
52278: POP
52279: POP
// end ;
52280: LD_VAR 0 4
52284: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52285: LD_INT 0
52287: PPUSH
52288: PPUSH
52289: PPUSH
52290: PPUSH
52291: PPUSH
52292: PPUSH
52293: PPUSH
52294: PPUSH
// if not units then
52295: LD_VAR 0 1
52299: NOT
52300: IFFALSE 52304
// exit ;
52302: GO 52836
// result := UnitFilter ( units , [ f_ok ] ) ;
52304: LD_ADDR_VAR 0 3
52308: PUSH
52309: LD_VAR 0 1
52313: PPUSH
52314: LD_INT 50
52316: PUSH
52317: EMPTY
52318: LIST
52319: PPUSH
52320: CALL_OW 72
52324: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52325: LD_ADDR_VAR 0 8
52329: PUSH
52330: LD_VAR 0 1
52334: PUSH
52335: LD_INT 1
52337: ARRAY
52338: PPUSH
52339: CALL_OW 255
52343: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52344: LD_ADDR_VAR 0 10
52348: PUSH
52349: LD_INT 29
52351: PUSH
52352: LD_INT 91
52354: PUSH
52355: LD_INT 49
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: ST_TO_ADDR
// if not result then
52363: LD_VAR 0 3
52367: NOT
52368: IFFALSE 52372
// exit ;
52370: GO 52836
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52372: LD_ADDR_VAR 0 5
52376: PUSH
52377: LD_INT 81
52379: PUSH
52380: LD_VAR 0 8
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PPUSH
52389: CALL_OW 69
52393: ST_TO_ADDR
// for i in result do
52394: LD_ADDR_VAR 0 4
52398: PUSH
52399: LD_VAR 0 3
52403: PUSH
52404: FOR_IN
52405: IFFALSE 52834
// begin tag := GetTag ( i ) + 1 ;
52407: LD_ADDR_VAR 0 9
52411: PUSH
52412: LD_VAR 0 4
52416: PPUSH
52417: CALL_OW 110
52421: PUSH
52422: LD_INT 1
52424: PLUS
52425: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52426: LD_ADDR_VAR 0 7
52430: PUSH
52431: LD_VAR 0 4
52435: PPUSH
52436: CALL_OW 250
52440: PPUSH
52441: LD_VAR 0 4
52445: PPUSH
52446: CALL_OW 251
52450: PPUSH
52451: LD_INT 4
52453: PPUSH
52454: CALL 52027 0 3
52458: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52459: LD_VAR 0 4
52463: PPUSH
52464: CALL_OW 247
52468: PUSH
52469: LD_INT 2
52471: EQUAL
52472: IFFALSE 52484
52474: PUSH
52475: LD_VAR 0 7
52479: PUSH
52480: LD_INT 2
52482: GREATER
52483: AND
52484: IFFALSE 52504
52486: PUSH
52487: LD_VAR 0 4
52491: PPUSH
52492: CALL_OW 264
52496: PUSH
52497: LD_VAR 0 10
52501: IN
52502: NOT
52503: AND
52504: IFFALSE 52543
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52506: LD_VAR 0 4
52510: PPUSH
52511: LD_VAR 0 7
52515: PUSH
52516: LD_INT 1
52518: ARRAY
52519: PUSH
52520: LD_INT 1
52522: ARRAY
52523: PPUSH
52524: LD_VAR 0 7
52528: PUSH
52529: LD_INT 1
52531: ARRAY
52532: PUSH
52533: LD_INT 2
52535: ARRAY
52536: PPUSH
52537: CALL_OW 116
52541: GO 52832
// if path > tag then
52543: LD_VAR 0 2
52547: PUSH
52548: LD_VAR 0 9
52552: GREATER
52553: IFFALSE 52761
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52555: LD_ADDR_VAR 0 6
52559: PUSH
52560: LD_VAR 0 5
52564: PPUSH
52565: LD_INT 91
52567: PUSH
52568: LD_VAR 0 4
52572: PUSH
52573: LD_INT 8
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: LIST
52580: PPUSH
52581: CALL_OW 72
52585: ST_TO_ADDR
// if nearEnemy then
52586: LD_VAR 0 6
52590: IFFALSE 52659
// begin if GetWeapon ( i ) = ru_time_lapser then
52592: LD_VAR 0 4
52596: PPUSH
52597: CALL_OW 264
52601: PUSH
52602: LD_INT 49
52604: EQUAL
52605: IFFALSE 52633
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52607: LD_VAR 0 4
52611: PPUSH
52612: LD_VAR 0 6
52616: PPUSH
52617: LD_VAR 0 4
52621: PPUSH
52622: CALL_OW 74
52626: PPUSH
52627: CALL_OW 112
52631: GO 52657
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52633: LD_VAR 0 4
52637: PPUSH
52638: LD_VAR 0 6
52642: PPUSH
52643: LD_VAR 0 4
52647: PPUSH
52648: CALL_OW 74
52652: PPUSH
52653: CALL 53917 0 2
// end else
52657: GO 52759
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52659: LD_VAR 0 4
52663: PPUSH
52664: LD_VAR 0 2
52668: PUSH
52669: LD_VAR 0 9
52673: ARRAY
52674: PUSH
52675: LD_INT 1
52677: ARRAY
52678: PPUSH
52679: LD_VAR 0 2
52683: PUSH
52684: LD_VAR 0 9
52688: ARRAY
52689: PUSH
52690: LD_INT 2
52692: ARRAY
52693: PPUSH
52694: CALL_OW 297
52698: PUSH
52699: LD_INT 6
52701: GREATER
52702: IFFALSE 52745
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52704: LD_VAR 0 4
52708: PPUSH
52709: LD_VAR 0 2
52713: PUSH
52714: LD_VAR 0 9
52718: ARRAY
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: PPUSH
52724: LD_VAR 0 2
52728: PUSH
52729: LD_VAR 0 9
52733: ARRAY
52734: PUSH
52735: LD_INT 2
52737: ARRAY
52738: PPUSH
52739: CALL_OW 114
52743: GO 52759
// SetTag ( i , tag ) ;
52745: LD_VAR 0 4
52749: PPUSH
52750: LD_VAR 0 9
52754: PPUSH
52755: CALL_OW 109
// end else
52759: GO 52832
// if enemy then
52761: LD_VAR 0 5
52765: IFFALSE 52832
// begin if GetWeapon ( i ) = ru_time_lapser then
52767: LD_VAR 0 4
52771: PPUSH
52772: CALL_OW 264
52776: PUSH
52777: LD_INT 49
52779: EQUAL
52780: IFFALSE 52808
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52782: LD_VAR 0 4
52786: PPUSH
52787: LD_VAR 0 5
52791: PPUSH
52792: LD_VAR 0 4
52796: PPUSH
52797: CALL_OW 74
52801: PPUSH
52802: CALL_OW 112
52806: GO 52832
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52808: LD_VAR 0 4
52812: PPUSH
52813: LD_VAR 0 5
52817: PPUSH
52818: LD_VAR 0 4
52822: PPUSH
52823: CALL_OW 74
52827: PPUSH
52828: CALL 53917 0 2
// end ; end ;
52832: GO 52404
52834: POP
52835: POP
// end ;
52836: LD_VAR 0 3
52840: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52841: LD_INT 0
52843: PPUSH
52844: PPUSH
52845: PPUSH
// if not unit or IsInUnit ( unit ) then
52846: LD_VAR 0 1
52850: NOT
52851: IFTRUE 52864
52853: PUSH
52854: LD_VAR 0 1
52858: PPUSH
52859: CALL_OW 310
52863: OR
52864: IFFALSE 52868
// exit ;
52866: GO 52959
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52868: LD_ADDR_VAR 0 4
52872: PUSH
52873: LD_VAR 0 1
52877: PPUSH
52878: CALL_OW 250
52882: PPUSH
52883: LD_VAR 0 2
52887: PPUSH
52888: LD_INT 1
52890: PPUSH
52891: CALL_OW 272
52895: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52896: LD_ADDR_VAR 0 5
52900: PUSH
52901: LD_VAR 0 1
52905: PPUSH
52906: CALL_OW 251
52910: PPUSH
52911: LD_VAR 0 2
52915: PPUSH
52916: LD_INT 1
52918: PPUSH
52919: CALL_OW 273
52923: ST_TO_ADDR
// if ValidHex ( x , y ) then
52924: LD_VAR 0 4
52928: PPUSH
52929: LD_VAR 0 5
52933: PPUSH
52934: CALL_OW 488
52938: IFFALSE 52959
// ComTurnXY ( unit , x , y ) ;
52940: LD_VAR 0 1
52944: PPUSH
52945: LD_VAR 0 4
52949: PPUSH
52950: LD_VAR 0 5
52954: PPUSH
52955: CALL_OW 118
// end ;
52959: LD_VAR 0 3
52963: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52964: LD_INT 0
52966: PPUSH
52967: PPUSH
// result := false ;
52968: LD_ADDR_VAR 0 3
52972: PUSH
52973: LD_INT 0
52975: ST_TO_ADDR
// if not units then
52976: LD_VAR 0 2
52980: NOT
52981: IFFALSE 52985
// exit ;
52983: GO 53030
// for i in units do
52985: LD_ADDR_VAR 0 4
52989: PUSH
52990: LD_VAR 0 2
52994: PUSH
52995: FOR_IN
52996: IFFALSE 53028
// if See ( side , i ) then
52998: LD_VAR 0 1
53002: PPUSH
53003: LD_VAR 0 4
53007: PPUSH
53008: CALL_OW 292
53012: IFFALSE 53026
// begin result := true ;
53014: LD_ADDR_VAR 0 3
53018: PUSH
53019: LD_INT 1
53021: ST_TO_ADDR
// exit ;
53022: POP
53023: POP
53024: GO 53030
// end ;
53026: GO 52995
53028: POP
53029: POP
// end ;
53030: LD_VAR 0 3
53034: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53035: LD_INT 0
53037: PPUSH
53038: PPUSH
53039: PPUSH
53040: PPUSH
// if not unit or not points then
53041: LD_VAR 0 1
53045: NOT
53046: IFTRUE 53055
53048: PUSH
53049: LD_VAR 0 2
53053: NOT
53054: OR
53055: IFFALSE 53059
// exit ;
53057: GO 53149
// dist := 99999 ;
53059: LD_ADDR_VAR 0 5
53063: PUSH
53064: LD_INT 99999
53066: ST_TO_ADDR
// for i in points do
53067: LD_ADDR_VAR 0 4
53071: PUSH
53072: LD_VAR 0 2
53076: PUSH
53077: FOR_IN
53078: IFFALSE 53147
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53080: LD_ADDR_VAR 0 6
53084: PUSH
53085: LD_VAR 0 1
53089: PPUSH
53090: LD_VAR 0 4
53094: PUSH
53095: LD_INT 1
53097: ARRAY
53098: PPUSH
53099: LD_VAR 0 4
53103: PUSH
53104: LD_INT 2
53106: ARRAY
53107: PPUSH
53108: CALL_OW 297
53112: ST_TO_ADDR
// if tmpDist < dist then
53113: LD_VAR 0 6
53117: PUSH
53118: LD_VAR 0 5
53122: LESS
53123: IFFALSE 53145
// begin result := i ;
53125: LD_ADDR_VAR 0 3
53129: PUSH
53130: LD_VAR 0 4
53134: ST_TO_ADDR
// dist := tmpDist ;
53135: LD_ADDR_VAR 0 5
53139: PUSH
53140: LD_VAR 0 6
53144: ST_TO_ADDR
// end ; end ;
53145: GO 53077
53147: POP
53148: POP
// end ;
53149: LD_VAR 0 3
53153: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53154: LD_INT 0
53156: PPUSH
// uc_side := side ;
53157: LD_ADDR_OWVAR 20
53161: PUSH
53162: LD_VAR 0 1
53166: ST_TO_ADDR
// uc_nation := 3 ;
53167: LD_ADDR_OWVAR 21
53171: PUSH
53172: LD_INT 3
53174: ST_TO_ADDR
// vc_chassis := 25 ;
53175: LD_ADDR_OWVAR 37
53179: PUSH
53180: LD_INT 25
53182: ST_TO_ADDR
// vc_engine := engine_siberite ;
53183: LD_ADDR_OWVAR 39
53187: PUSH
53188: LD_INT 3
53190: ST_TO_ADDR
// vc_control := control_computer ;
53191: LD_ADDR_OWVAR 38
53195: PUSH
53196: LD_INT 3
53198: ST_TO_ADDR
// vc_weapon := 59 ;
53199: LD_ADDR_OWVAR 40
53203: PUSH
53204: LD_INT 59
53206: ST_TO_ADDR
// result := CreateVehicle ;
53207: LD_ADDR_VAR 0 5
53211: PUSH
53212: CALL_OW 45
53216: ST_TO_ADDR
// SetDir ( result , d ) ;
53217: LD_VAR 0 5
53221: PPUSH
53222: LD_VAR 0 4
53226: PPUSH
53227: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53231: LD_VAR 0 5
53235: PPUSH
53236: LD_VAR 0 2
53240: PPUSH
53241: LD_VAR 0 3
53245: PPUSH
53246: LD_INT 0
53248: PPUSH
53249: CALL_OW 48
// end ;
53253: LD_VAR 0 5
53257: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53258: LD_INT 0
53260: PPUSH
53261: PPUSH
53262: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53263: LD_ADDR_VAR 0 2
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53286: LD_VAR 0 1
53290: NOT
53291: IFTRUE 53324
53293: PUSH
53294: LD_VAR 0 1
53298: PPUSH
53299: CALL_OW 264
53303: PUSH
53304: LD_INT 12
53306: PUSH
53307: LD_INT 51
53309: PUSH
53310: LD_INT 32
53312: PUSH
53313: LD_INT 89
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: IN
53322: NOT
53323: OR
53324: IFFALSE 53328
// exit ;
53326: GO 53426
// for i := 1 to 3 do
53328: LD_ADDR_VAR 0 3
53332: PUSH
53333: DOUBLE
53334: LD_INT 1
53336: DEC
53337: ST_TO_ADDR
53338: LD_INT 3
53340: PUSH
53341: FOR_TO
53342: IFFALSE 53424
// begin tmp := GetCargo ( cargo , i ) ;
53344: LD_ADDR_VAR 0 4
53348: PUSH
53349: LD_VAR 0 1
53353: PPUSH
53354: LD_VAR 0 3
53358: PPUSH
53359: CALL_OW 289
53363: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53364: LD_ADDR_VAR 0 2
53368: PUSH
53369: LD_VAR 0 2
53373: PPUSH
53374: LD_VAR 0 3
53378: PPUSH
53379: LD_VAR 0 4
53383: PPUSH
53384: CALL_OW 1
53388: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53389: LD_ADDR_VAR 0 2
53393: PUSH
53394: LD_VAR 0 2
53398: PPUSH
53399: LD_INT 4
53401: PPUSH
53402: LD_VAR 0 2
53406: PUSH
53407: LD_INT 4
53409: ARRAY
53410: PUSH
53411: LD_VAR 0 4
53415: PLUS
53416: PPUSH
53417: CALL_OW 1
53421: ST_TO_ADDR
// end ;
53422: GO 53341
53424: POP
53425: POP
// end ;
53426: LD_VAR 0 2
53430: RET
// export function Length ( array ) ; begin
53431: LD_INT 0
53433: PPUSH
// result := array + 0 ;
53434: LD_ADDR_VAR 0 2
53438: PUSH
53439: LD_VAR 0 1
53443: PUSH
53444: LD_INT 0
53446: PLUS
53447: ST_TO_ADDR
// end ;
53448: LD_VAR 0 2
53452: RET
// export function PrepareArray ( array ) ; begin
53453: LD_INT 0
53455: PPUSH
// result := array diff 0 ;
53456: LD_ADDR_VAR 0 2
53460: PUSH
53461: LD_VAR 0 1
53465: PUSH
53466: LD_INT 0
53468: DIFF
53469: ST_TO_ADDR
// if not result [ 1 ] then
53470: LD_VAR 0 2
53474: PUSH
53475: LD_INT 1
53477: ARRAY
53478: NOT
53479: IFFALSE 53499
// result := Delete ( result , 1 ) ;
53481: LD_ADDR_VAR 0 2
53485: PUSH
53486: LD_VAR 0 2
53490: PPUSH
53491: LD_INT 1
53493: PPUSH
53494: CALL_OW 3
53498: ST_TO_ADDR
// end ;
53499: LD_VAR 0 2
53503: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53504: LD_INT 0
53506: PPUSH
53507: PPUSH
53508: PPUSH
53509: PPUSH
// sibRocketRange := 25 ;
53510: LD_ADDR_VAR 0 6
53514: PUSH
53515: LD_INT 25
53517: ST_TO_ADDR
// result := false ;
53518: LD_ADDR_VAR 0 4
53522: PUSH
53523: LD_INT 0
53525: ST_TO_ADDR
// for i := 0 to 5 do
53526: LD_ADDR_VAR 0 5
53530: PUSH
53531: DOUBLE
53532: LD_INT 0
53534: DEC
53535: ST_TO_ADDR
53536: LD_INT 5
53538: PUSH
53539: FOR_TO
53540: IFFALSE 53607
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53542: LD_VAR 0 1
53546: PPUSH
53547: LD_VAR 0 5
53551: PPUSH
53552: LD_VAR 0 6
53556: PPUSH
53557: CALL_OW 272
53561: PPUSH
53562: LD_VAR 0 2
53566: PPUSH
53567: LD_VAR 0 5
53571: PPUSH
53572: LD_VAR 0 6
53576: PPUSH
53577: CALL_OW 273
53581: PPUSH
53582: LD_VAR 0 3
53586: PPUSH
53587: CALL_OW 309
53591: IFFALSE 53605
// begin result := true ;
53593: LD_ADDR_VAR 0 4
53597: PUSH
53598: LD_INT 1
53600: ST_TO_ADDR
// exit ;
53601: POP
53602: POP
53603: GO 53609
// end ;
53605: GO 53539
53607: POP
53608: POP
// end ;
53609: LD_VAR 0 4
53613: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53614: LD_INT 0
53616: PPUSH
53617: PPUSH
53618: PPUSH
// if btype = b_depot then
53619: LD_VAR 0 2
53623: PUSH
53624: LD_INT 0
53626: EQUAL
53627: IFFALSE 53639
// begin result := true ;
53629: LD_ADDR_VAR 0 3
53633: PUSH
53634: LD_INT 1
53636: ST_TO_ADDR
// exit ;
53637: GO 53759
// end ; pom := GetBase ( depot ) ;
53639: LD_ADDR_VAR 0 4
53643: PUSH
53644: LD_VAR 0 1
53648: PPUSH
53649: CALL_OW 274
53653: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53654: LD_ADDR_VAR 0 5
53658: PUSH
53659: LD_VAR 0 2
53663: PPUSH
53664: LD_VAR 0 1
53668: PPUSH
53669: CALL_OW 248
53673: PPUSH
53674: CALL_OW 450
53678: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53679: LD_ADDR_VAR 0 3
53683: PUSH
53684: LD_VAR 0 4
53688: PPUSH
53689: LD_INT 1
53691: PPUSH
53692: CALL_OW 275
53696: PUSH
53697: LD_VAR 0 5
53701: PUSH
53702: LD_INT 1
53704: ARRAY
53705: GREATEREQUAL
53706: IFFALSE 53732
53708: PUSH
53709: LD_VAR 0 4
53713: PPUSH
53714: LD_INT 2
53716: PPUSH
53717: CALL_OW 275
53721: PUSH
53722: LD_VAR 0 5
53726: PUSH
53727: LD_INT 2
53729: ARRAY
53730: GREATEREQUAL
53731: AND
53732: IFFALSE 53758
53734: PUSH
53735: LD_VAR 0 4
53739: PPUSH
53740: LD_INT 3
53742: PPUSH
53743: CALL_OW 275
53747: PUSH
53748: LD_VAR 0 5
53752: PUSH
53753: LD_INT 3
53755: ARRAY
53756: GREATEREQUAL
53757: AND
53758: ST_TO_ADDR
// end ;
53759: LD_VAR 0 3
53763: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53764: LD_INT 0
53766: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53767: LD_VAR 0 1
53771: PPUSH
53772: LD_VAR 0 2
53776: PPUSH
53777: LD_INT 0
53779: PPUSH
53780: LD_INT 0
53782: PPUSH
53783: LD_INT 1
53785: PPUSH
53786: LD_INT 0
53788: PPUSH
53789: CALL_OW 587
// end ;
53793: LD_VAR 0 3
53797: RET
// export function CenterOnNow ( unit ) ; begin
53798: LD_INT 0
53800: PPUSH
// result := IsInUnit ( unit ) ;
53801: LD_ADDR_VAR 0 2
53805: PUSH
53806: LD_VAR 0 1
53810: PPUSH
53811: CALL_OW 310
53815: ST_TO_ADDR
// if not result then
53816: LD_VAR 0 2
53820: NOT
53821: IFFALSE 53833
// result := unit ;
53823: LD_ADDR_VAR 0 2
53827: PUSH
53828: LD_VAR 0 1
53832: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53833: LD_VAR 0 1
53837: PPUSH
53838: CALL_OW 87
// end ;
53842: LD_VAR 0 2
53846: RET
// export function ComMoveHex ( unit , hex ) ; begin
53847: LD_INT 0
53849: PPUSH
// if not hex then
53850: LD_VAR 0 2
53854: NOT
53855: IFFALSE 53859
// exit ;
53857: GO 53912
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53859: LD_VAR 0 2
53863: PUSH
53864: LD_INT 1
53866: ARRAY
53867: PPUSH
53868: LD_VAR 0 2
53872: PUSH
53873: LD_INT 2
53875: ARRAY
53876: PPUSH
53877: CALL_OW 428
53881: IFFALSE 53885
// exit ;
53883: GO 53912
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53885: LD_VAR 0 1
53889: PPUSH
53890: LD_VAR 0 2
53894: PUSH
53895: LD_INT 1
53897: ARRAY
53898: PPUSH
53899: LD_VAR 0 2
53903: PUSH
53904: LD_INT 2
53906: ARRAY
53907: PPUSH
53908: CALL_OW 111
// end ;
53912: LD_VAR 0 3
53916: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53917: LD_INT 0
53919: PPUSH
53920: PPUSH
53921: PPUSH
// if not unit or not enemy then
53922: LD_VAR 0 1
53926: NOT
53927: IFTRUE 53936
53929: PUSH
53930: LD_VAR 0 2
53934: NOT
53935: OR
53936: IFFALSE 53940
// exit ;
53938: GO 54066
// x := GetX ( enemy ) ;
53940: LD_ADDR_VAR 0 4
53944: PUSH
53945: LD_VAR 0 2
53949: PPUSH
53950: CALL_OW 250
53954: ST_TO_ADDR
// y := GetY ( enemy ) ;
53955: LD_ADDR_VAR 0 5
53959: PUSH
53960: LD_VAR 0 2
53964: PPUSH
53965: CALL_OW 251
53969: ST_TO_ADDR
// if ValidHex ( x , y ) then
53970: LD_VAR 0 4
53974: PPUSH
53975: LD_VAR 0 5
53979: PPUSH
53980: CALL_OW 488
53984: IFFALSE 54066
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53986: LD_VAR 0 2
53990: PPUSH
53991: CALL_OW 247
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: IN
54006: IFTRUE 54029
54008: PUSH
54009: LD_VAR 0 1
54013: PPUSH
54014: CALL_OW 255
54018: PPUSH
54019: LD_VAR 0 2
54023: PPUSH
54024: CALL_OW 292
54028: OR
54029: IFFALSE 54047
// ComAttackUnit ( unit , enemy ) else
54031: LD_VAR 0 1
54035: PPUSH
54036: LD_VAR 0 2
54040: PPUSH
54041: CALL_OW 115
54045: GO 54066
// ComAgressiveMove ( unit , x , y ) ;
54047: LD_VAR 0 1
54051: PPUSH
54052: LD_VAR 0 4
54056: PPUSH
54057: LD_VAR 0 5
54061: PPUSH
54062: CALL_OW 114
// end ;
54066: LD_VAR 0 3
54070: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54071: LD_INT 0
54073: PPUSH
54074: PPUSH
54075: PPUSH
// list := AreaToList ( area , 0 ) ;
54076: LD_ADDR_VAR 0 5
54080: PUSH
54081: LD_VAR 0 1
54085: PPUSH
54086: LD_INT 0
54088: PPUSH
54089: CALL_OW 517
54093: ST_TO_ADDR
// if not list then
54094: LD_VAR 0 5
54098: NOT
54099: IFFALSE 54103
// exit ;
54101: GO 54233
// if all then
54103: LD_VAR 0 2
54107: IFFALSE 54195
// begin for i := 1 to list [ 1 ] do
54109: LD_ADDR_VAR 0 4
54113: PUSH
54114: DOUBLE
54115: LD_INT 1
54117: DEC
54118: ST_TO_ADDR
54119: LD_VAR 0 5
54123: PUSH
54124: LD_INT 1
54126: ARRAY
54127: PUSH
54128: FOR_TO
54129: IFFALSE 54191
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54131: LD_ADDR_VAR 0 3
54135: PUSH
54136: LD_VAR 0 3
54140: PPUSH
54141: LD_VAR 0 3
54145: PUSH
54146: LD_INT 1
54148: PLUS
54149: PPUSH
54150: LD_VAR 0 5
54154: PUSH
54155: LD_INT 1
54157: ARRAY
54158: PUSH
54159: LD_VAR 0 4
54163: ARRAY
54164: PUSH
54165: LD_VAR 0 5
54169: PUSH
54170: LD_INT 2
54172: ARRAY
54173: PUSH
54174: LD_VAR 0 4
54178: ARRAY
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PPUSH
54184: CALL_OW 1
54188: ST_TO_ADDR
54189: GO 54128
54191: POP
54192: POP
// exit ;
54193: GO 54233
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54195: LD_ADDR_VAR 0 3
54199: PUSH
54200: LD_VAR 0 5
54204: PUSH
54205: LD_INT 1
54207: ARRAY
54208: PUSH
54209: LD_INT 1
54211: ARRAY
54212: PUSH
54213: LD_VAR 0 5
54217: PUSH
54218: LD_INT 2
54220: ARRAY
54221: PUSH
54222: LD_INT 1
54224: ARRAY
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: EMPTY
54231: LIST
54232: ST_TO_ADDR
// end ;
54233: LD_VAR 0 3
54237: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54238: LD_INT 0
54240: PPUSH
54241: PPUSH
// list := AreaToList ( area , 0 ) ;
54242: LD_ADDR_VAR 0 4
54246: PUSH
54247: LD_VAR 0 1
54251: PPUSH
54252: LD_INT 0
54254: PPUSH
54255: CALL_OW 517
54259: ST_TO_ADDR
// if not list then
54260: LD_VAR 0 4
54264: NOT
54265: IFFALSE 54269
// exit ;
54267: GO 54310
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54269: LD_ADDR_VAR 0 3
54273: PUSH
54274: LD_VAR 0 4
54278: PUSH
54279: LD_INT 1
54281: ARRAY
54282: PUSH
54283: LD_INT 1
54285: ARRAY
54286: PUSH
54287: LD_VAR 0 4
54291: PUSH
54292: LD_INT 2
54294: ARRAY
54295: PUSH
54296: LD_INT 1
54298: ARRAY
54299: PUSH
54300: LD_VAR 0 2
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// end ;
54310: LD_VAR 0 3
54314: RET
// export function First ( array ) ; begin
54315: LD_INT 0
54317: PPUSH
// if not array then
54318: LD_VAR 0 1
54322: NOT
54323: IFFALSE 54327
// exit ;
54325: GO 54341
// result := array [ 1 ] ;
54327: LD_ADDR_VAR 0 2
54331: PUSH
54332: LD_VAR 0 1
54336: PUSH
54337: LD_INT 1
54339: ARRAY
54340: ST_TO_ADDR
// end ;
54341: LD_VAR 0 2
54345: RET
// export function Last ( array ) ; begin
54346: LD_INT 0
54348: PPUSH
// if not array then
54349: LD_VAR 0 1
54353: NOT
54354: IFFALSE 54358
// exit ;
54356: GO 54374
// result := array [ array ] ;
54358: LD_ADDR_VAR 0 2
54362: PUSH
54363: LD_VAR 0 1
54367: PUSH
54368: LD_VAR 0 1
54372: ARRAY
54373: ST_TO_ADDR
// end ;
54374: LD_VAR 0 2
54378: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54379: LD_INT 0
54381: PPUSH
54382: PPUSH
// result := [ ] ;
54383: LD_ADDR_VAR 0 5
54387: PUSH
54388: EMPTY
54389: ST_TO_ADDR
// if not array then
54390: LD_VAR 0 1
54394: NOT
54395: IFFALSE 54399
// exit ;
54397: GO 54511
// for i := 1 to array do
54399: LD_ADDR_VAR 0 6
54403: PUSH
54404: DOUBLE
54405: LD_INT 1
54407: DEC
54408: ST_TO_ADDR
54409: LD_VAR 0 1
54413: PUSH
54414: FOR_TO
54415: IFFALSE 54509
// if array [ i ] [ index ] = value then
54417: LD_VAR 0 1
54421: PUSH
54422: LD_VAR 0 6
54426: ARRAY
54427: PUSH
54428: LD_VAR 0 2
54432: ARRAY
54433: PUSH
54434: LD_VAR 0 3
54438: EQUAL
54439: IFFALSE 54507
// begin if indexColumn then
54441: LD_VAR 0 4
54445: IFFALSE 54481
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54447: LD_ADDR_VAR 0 5
54451: PUSH
54452: LD_VAR 0 5
54456: PPUSH
54457: LD_VAR 0 1
54461: PUSH
54462: LD_VAR 0 6
54466: ARRAY
54467: PUSH
54468: LD_VAR 0 4
54472: ARRAY
54473: PPUSH
54474: CALL 49519 0 2
54478: ST_TO_ADDR
54479: GO 54507
// result := Join ( result , array [ i ] ) ;
54481: LD_ADDR_VAR 0 5
54485: PUSH
54486: LD_VAR 0 5
54490: PPUSH
54491: LD_VAR 0 1
54495: PUSH
54496: LD_VAR 0 6
54500: ARRAY
54501: PPUSH
54502: CALL 49519 0 2
54506: ST_TO_ADDR
// end ;
54507: GO 54414
54509: POP
54510: POP
// end ;
54511: LD_VAR 0 5
54515: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54516: LD_INT 0
54518: PPUSH
// if not vehicles or not parkingPoint then
54519: LD_VAR 0 1
54523: NOT
54524: IFTRUE 54533
54526: PUSH
54527: LD_VAR 0 2
54531: NOT
54532: OR
54533: IFFALSE 54537
// exit ;
54535: GO 54635
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54537: LD_ADDR_VAR 0 1
54541: PUSH
54542: LD_VAR 0 1
54546: PPUSH
54547: LD_INT 50
54549: PUSH
54550: EMPTY
54551: LIST
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: LD_INT 92
54558: PUSH
54559: LD_VAR 0 2
54563: PUSH
54564: LD_INT 1
54566: ARRAY
54567: PUSH
54568: LD_VAR 0 2
54572: PUSH
54573: LD_INT 2
54575: ARRAY
54576: PUSH
54577: LD_INT 8
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PPUSH
54594: CALL_OW 72
54598: ST_TO_ADDR
// if not vehicles then
54599: LD_VAR 0 1
54603: NOT
54604: IFFALSE 54608
// exit ;
54606: GO 54635
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54608: LD_VAR 0 1
54612: PPUSH
54613: LD_VAR 0 2
54617: PUSH
54618: LD_INT 1
54620: ARRAY
54621: PPUSH
54622: LD_VAR 0 2
54626: PUSH
54627: LD_INT 2
54629: ARRAY
54630: PPUSH
54631: CALL_OW 111
// end ;
54635: LD_VAR 0 3
54639: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54640: LD_INT 0
54642: PPUSH
54643: PPUSH
54644: PPUSH
// if not side or not area then
54645: LD_VAR 0 1
54649: NOT
54650: IFTRUE 54659
54652: PUSH
54653: LD_VAR 0 2
54657: NOT
54658: OR
54659: IFFALSE 54663
// exit ;
54661: GO 54782
// tmp := AreaToList ( area , 0 ) ;
54663: LD_ADDR_VAR 0 5
54667: PUSH
54668: LD_VAR 0 2
54672: PPUSH
54673: LD_INT 0
54675: PPUSH
54676: CALL_OW 517
54680: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54681: LD_ADDR_VAR 0 4
54685: PUSH
54686: DOUBLE
54687: LD_INT 1
54689: DEC
54690: ST_TO_ADDR
54691: LD_VAR 0 5
54695: PUSH
54696: LD_INT 1
54698: ARRAY
54699: PUSH
54700: FOR_TO
54701: IFFALSE 54780
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54703: LD_VAR 0 5
54707: PUSH
54708: LD_INT 1
54710: ARRAY
54711: PUSH
54712: LD_VAR 0 4
54716: ARRAY
54717: PPUSH
54718: LD_VAR 0 5
54722: PUSH
54723: LD_INT 2
54725: ARRAY
54726: PUSH
54727: LD_VAR 0 4
54731: ARRAY
54732: PPUSH
54733: CALL_OW 351
54737: IFFALSE 54778
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54739: LD_VAR 0 5
54743: PUSH
54744: LD_INT 1
54746: ARRAY
54747: PUSH
54748: LD_VAR 0 4
54752: ARRAY
54753: PPUSH
54754: LD_VAR 0 5
54758: PUSH
54759: LD_INT 2
54761: ARRAY
54762: PUSH
54763: LD_VAR 0 4
54767: ARRAY
54768: PPUSH
54769: LD_VAR 0 1
54773: PPUSH
54774: CALL_OW 244
// end ;
54778: GO 54700
54780: POP
54781: POP
// end ;
54782: LD_VAR 0 3
54786: RET
// export function UniqueArray ( array ) ; var i ; begin
54787: LD_INT 0
54789: PPUSH
54790: PPUSH
// result := [ ] ;
54791: LD_ADDR_VAR 0 2
54795: PUSH
54796: EMPTY
54797: ST_TO_ADDR
// if not array then
54798: LD_VAR 0 1
54802: NOT
54803: IFFALSE 54807
// exit ;
54805: GO 54868
// for i := 1 to array do
54807: LD_ADDR_VAR 0 3
54811: PUSH
54812: DOUBLE
54813: LD_INT 1
54815: DEC
54816: ST_TO_ADDR
54817: LD_VAR 0 1
54821: PUSH
54822: FOR_TO
54823: IFFALSE 54866
// if not array [ i ] in result then
54825: LD_VAR 0 1
54829: PUSH
54830: LD_VAR 0 3
54834: ARRAY
54835: PUSH
54836: LD_VAR 0 2
54840: IN
54841: NOT
54842: IFFALSE 54864
// result := Join ( result , i ) ;
54844: LD_ADDR_VAR 0 2
54848: PUSH
54849: LD_VAR 0 2
54853: PPUSH
54854: LD_VAR 0 3
54858: PPUSH
54859: CALL 49519 0 2
54863: ST_TO_ADDR
54864: GO 54822
54866: POP
54867: POP
// end ; end_of_file
54868: LD_VAR 0 2
54872: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54873: LD_VAR 0 1
54877: PUSH
54878: LD_INT 200
54880: DOUBLE
54881: GREATEREQUAL
54882: IFFALSE 54890
54884: LD_INT 299
54886: DOUBLE
54887: LESSEQUAL
54888: IFTRUE 54892
54890: GO 54924
54892: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54893: LD_VAR 0 1
54897: PPUSH
54898: LD_VAR 0 2
54902: PPUSH
54903: LD_VAR 0 3
54907: PPUSH
54908: LD_VAR 0 4
54912: PPUSH
54913: LD_VAR 0 5
54917: PPUSH
54918: CALL 55786 0 5
54922: GO 55001
54924: LD_INT 300
54926: DOUBLE
54927: GREATEREQUAL
54928: IFFALSE 54936
54930: LD_INT 399
54932: DOUBLE
54933: LESSEQUAL
54934: IFTRUE 54938
54936: GO 55000
54938: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54939: LD_VAR 0 1
54943: PPUSH
54944: LD_VAR 0 2
54948: PPUSH
54949: LD_VAR 0 3
54953: PPUSH
54954: LD_VAR 0 4
54958: PPUSH
54959: LD_VAR 0 5
54963: PPUSH
54964: LD_VAR 0 6
54968: PPUSH
54969: LD_VAR 0 7
54973: PPUSH
54974: LD_VAR 0 8
54978: PPUSH
54979: LD_VAR 0 9
54983: PPUSH
54984: LD_VAR 0 10
54988: PPUSH
54989: LD_VAR 0 11
54993: PPUSH
54994: CALL 63888 0 11
54998: GO 55001
55000: POP
// end ;
55001: PPOPN 11
55003: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55004: LD_VAR 0 1
55008: PPUSH
55009: LD_VAR 0 2
55013: PPUSH
55014: LD_VAR 0 3
55018: PPUSH
55019: LD_VAR 0 4
55023: PPUSH
55024: LD_VAR 0 5
55028: PPUSH
55029: CALL 55086 0 5
// end ; end_of_file
55033: PPOPN 5
55035: END
// export function SOS_UnitDestroyed ( un ) ; begin
55036: LD_INT 0
55038: PPUSH
// ComRadiation ( un ) ;
55039: LD_VAR 0 1
55043: PPUSH
55044: CALL 56206 0 1
// end ;
55048: LD_VAR 0 2
55052: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55053: LD_INT 0
55055: PPUSH
// ComRadiation ( un ) ;
55056: LD_VAR 0 1
55060: PPUSH
55061: CALL 56206 0 1
// end ;
55065: LD_VAR 0 2
55069: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55070: LD_INT 0
55072: PPUSH
// end ;
55073: LD_VAR 0 4
55077: RET
// export function SOS_Command ( cmd ) ; begin
55078: LD_INT 0
55080: PPUSH
// end ;
55081: LD_VAR 0 2
55085: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55086: LD_INT 0
55088: PPUSH
// end ;
55089: LD_VAR 0 6
55093: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55094: LD_INT 0
55096: PPUSH
55097: PPUSH
55098: PPUSH
55099: PPUSH
55100: PPUSH
// if not vehicle or not factory then
55101: LD_VAR 0 1
55105: NOT
55106: IFTRUE 55115
55108: PUSH
55109: LD_VAR 0 2
55113: NOT
55114: OR
55115: IFFALSE 55119
// exit ;
55117: GO 55781
// weapon := GetWeapon ( vehicle ) ;
55119: LD_ADDR_VAR 0 7
55123: PUSH
55124: LD_VAR 0 1
55128: PPUSH
55129: CALL_OW 264
55133: ST_TO_ADDR
// if weapon = ar_miner then
55134: LD_VAR 0 7
55138: PUSH
55139: LD_INT 81
55141: EQUAL
55142: IFFALSE 55199
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55144: LD_ADDR_EXP 57
55148: PUSH
55149: LD_EXP 57
55153: PPUSH
55154: LD_EXP 57
55158: PUSH
55159: LD_INT 1
55161: PLUS
55162: PPUSH
55163: LD_VAR 0 1
55167: PPUSH
55168: CALL_OW 1
55172: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55173: LD_ADDR_EXP 58
55177: PUSH
55178: LD_EXP 58
55182: PPUSH
55183: LD_EXP 58
55187: PUSH
55188: LD_INT 1
55190: PLUS
55191: PPUSH
55192: EMPTY
55193: PPUSH
55194: CALL_OW 1
55198: ST_TO_ADDR
// end ; if not factoryWaypoints then
55199: LD_EXP 61
55203: NOT
55204: IFFALSE 55208
// exit ;
55206: GO 55781
// for i := 1 to Count ( factoryWaypoints ) do
55208: LD_ADDR_VAR 0 4
55212: PUSH
55213: DOUBLE
55214: LD_INT 1
55216: DEC
55217: ST_TO_ADDR
55218: LD_EXP 61
55222: PPUSH
55223: CALL 13543 0 1
55227: PUSH
55228: FOR_TO
55229: IFFALSE 55779
// if factoryWaypoints [ i ] [ 2 ] = factory then
55231: LD_EXP 61
55235: PUSH
55236: LD_VAR 0 4
55240: ARRAY
55241: PUSH
55242: LD_INT 2
55244: ARRAY
55245: PUSH
55246: LD_VAR 0 2
55250: EQUAL
55251: IFFALSE 55777
// begin if GetControl ( vehicle ) = control_manual then
55253: LD_VAR 0 1
55257: PPUSH
55258: CALL_OW 263
55262: PUSH
55263: LD_INT 1
55265: EQUAL
55266: IFFALSE 55630
// begin driver := IsDrivenBy ( vehicle ) ;
55268: LD_ADDR_VAR 0 5
55272: PUSH
55273: LD_VAR 0 1
55277: PPUSH
55278: CALL_OW 311
55282: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55283: LD_VAR 0 5
55287: PUSH
55288: LD_EXP 62
55292: IN
55293: IFTRUE 55307
55295: PUSH
55296: LD_VAR 0 1
55300: PUSH
55301: LD_EXP 62
55305: IN
55306: OR
55307: IFFALSE 55313
// exit ;
55309: POP
55310: POP
55311: GO 55781
// if not HasTask ( driver ) then
55313: LD_VAR 0 5
55317: PPUSH
55318: CALL_OW 314
55322: NOT
55323: IFFALSE 55628
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55325: LD_ADDR_EXP 62
55329: PUSH
55330: LD_EXP 62
55334: PPUSH
55335: LD_VAR 0 5
55339: PPUSH
55340: CALL 49519 0 2
55344: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55345: LD_ADDR_EXP 62
55349: PUSH
55350: LD_EXP 62
55354: PPUSH
55355: LD_VAR 0 1
55359: PPUSH
55360: CALL 49519 0 2
55364: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55365: LD_ADDR_VAR 0 6
55369: PUSH
55370: LD_EXP 61
55374: PUSH
55375: LD_VAR 0 4
55379: ARRAY
55380: PUSH
55381: LD_INT 3
55383: ARRAY
55384: PPUSH
55385: LD_EXP 61
55389: PUSH
55390: LD_VAR 0 4
55394: ARRAY
55395: PUSH
55396: LD_INT 4
55398: ARRAY
55399: PPUSH
55400: CALL_OW 428
55404: ST_TO_ADDR
// if hex then
55405: LD_VAR 0 6
55409: IFFALSE 55427
// ComMoveUnit ( driver , hex ) else
55411: LD_VAR 0 5
55415: PPUSH
55416: LD_VAR 0 6
55420: PPUSH
55421: CALL_OW 112
55425: GO 55511
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55427: LD_VAR 0 1
55431: PPUSH
55432: LD_EXP 61
55436: PUSH
55437: LD_VAR 0 4
55441: ARRAY
55442: PUSH
55443: LD_INT 3
55445: ARRAY
55446: PPUSH
55447: LD_EXP 61
55451: PUSH
55452: LD_VAR 0 4
55456: ARRAY
55457: PUSH
55458: LD_INT 4
55460: ARRAY
55461: PPUSH
55462: CALL_OW 297
55466: PUSH
55467: LD_INT 0
55469: GREATER
55470: IFFALSE 55511
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55472: LD_VAR 0 5
55476: PPUSH
55477: LD_EXP 61
55481: PUSH
55482: LD_VAR 0 4
55486: ARRAY
55487: PUSH
55488: LD_INT 3
55490: ARRAY
55491: PPUSH
55492: LD_EXP 61
55496: PUSH
55497: LD_VAR 0 4
55501: ARRAY
55502: PUSH
55503: LD_INT 4
55505: ARRAY
55506: PPUSH
55507: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55511: LD_VAR 0 5
55515: PPUSH
55516: CALL_OW 181
// if Multiplayer then
55520: LD_OWVAR 4
55524: IFFALSE 55573
// begin repeat wait ( 10 ) ;
55526: LD_INT 10
55528: PPUSH
55529: CALL_OW 67
// until not IsInUnit ( driver ) ;
55533: LD_VAR 0 5
55537: PPUSH
55538: CALL_OW 310
55542: NOT
55543: IFFALSE 55526
// if not HasTask ( driver ) then
55545: LD_VAR 0 5
55549: PPUSH
55550: CALL_OW 314
55554: NOT
55555: IFFALSE 55571
// ComEnterUnit ( driver , factory ) ;
55557: LD_VAR 0 5
55561: PPUSH
55562: LD_VAR 0 2
55566: PPUSH
55567: CALL_OW 120
// end else
55571: GO 55587
// AddComEnterUnit ( driver , factory ) ;
55573: LD_VAR 0 5
55577: PPUSH
55578: LD_VAR 0 2
55582: PPUSH
55583: CALL_OW 180
// wait ( 0 0$1 ) ;
55587: LD_INT 35
55589: PPUSH
55590: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55594: LD_ADDR_EXP 62
55598: PUSH
55599: LD_EXP 62
55603: PUSH
55604: LD_VAR 0 5
55608: DIFF
55609: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55610: LD_ADDR_EXP 62
55614: PUSH
55615: LD_EXP 62
55619: PUSH
55620: LD_VAR 0 1
55624: DIFF
55625: ST_TO_ADDR
// break ;
55626: GO 55779
// end ; end else
55628: GO 55777
// if GetControl ( vehicle ) = control_remote then
55630: LD_VAR 0 1
55634: PPUSH
55635: CALL_OW 263
55639: PUSH
55640: LD_INT 2
55642: EQUAL
55643: IFFALSE 55729
// begin wait ( 0 0$2 ) ;
55645: LD_INT 70
55647: PPUSH
55648: CALL_OW 67
// repeat wait ( 10 ) ;
55652: LD_INT 10
55654: PPUSH
55655: CALL_OW 67
// Connect ( vehicle ) ;
55659: LD_VAR 0 1
55663: PPUSH
55664: CALL 19821 0 1
// until IsControledBy ( vehicle ) ;
55668: LD_VAR 0 1
55672: PPUSH
55673: CALL_OW 312
55677: IFFALSE 55652
// wait ( 10 ) ;
55679: LD_INT 10
55681: PPUSH
55682: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55686: LD_VAR 0 1
55690: PPUSH
55691: LD_EXP 61
55695: PUSH
55696: LD_VAR 0 4
55700: ARRAY
55701: PUSH
55702: LD_INT 3
55704: ARRAY
55705: PPUSH
55706: LD_EXP 61
55710: PUSH
55711: LD_VAR 0 4
55715: ARRAY
55716: PUSH
55717: LD_INT 4
55719: ARRAY
55720: PPUSH
55721: CALL_OW 111
// break ;
55725: GO 55779
// end else
55727: GO 55777
// begin wait ( 0 0$3 ) ;
55729: LD_INT 105
55731: PPUSH
55732: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55736: LD_VAR 0 1
55740: PPUSH
55741: LD_EXP 61
55745: PUSH
55746: LD_VAR 0 4
55750: ARRAY
55751: PUSH
55752: LD_INT 3
55754: ARRAY
55755: PPUSH
55756: LD_EXP 61
55760: PUSH
55761: LD_VAR 0 4
55765: ARRAY
55766: PUSH
55767: LD_INT 4
55769: ARRAY
55770: PPUSH
55771: CALL_OW 111
// break ;
55775: GO 55779
// end ; end ;
55777: GO 55228
55779: POP
55780: POP
// end ;
55781: LD_VAR 0 3
55785: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55786: LD_INT 0
55788: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55789: LD_VAR 0 1
55793: PUSH
55794: LD_INT 250
55796: EQUAL
55797: IFFALSE 55814
55799: PUSH
55800: LD_VAR 0 2
55804: PPUSH
55805: CALL_OW 264
55809: PUSH
55810: LD_INT 81
55812: EQUAL
55813: AND
55814: IFFALSE 55835
// MinerPlaceMine ( unit , x , y ) ;
55816: LD_VAR 0 2
55820: PPUSH
55821: LD_VAR 0 4
55825: PPUSH
55826: LD_VAR 0 5
55830: PPUSH
55831: CALL 59181 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55835: LD_VAR 0 1
55839: PUSH
55840: LD_INT 251
55842: EQUAL
55843: IFFALSE 55860
55845: PUSH
55846: LD_VAR 0 2
55850: PPUSH
55851: CALL_OW 264
55855: PUSH
55856: LD_INT 81
55858: EQUAL
55859: AND
55860: IFFALSE 55881
// MinerDetonateMine ( unit , x , y ) ;
55862: LD_VAR 0 2
55866: PPUSH
55867: LD_VAR 0 4
55871: PPUSH
55872: LD_VAR 0 5
55876: PPUSH
55877: CALL 59588 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55881: LD_VAR 0 1
55885: PUSH
55886: LD_INT 252
55888: EQUAL
55889: IFFALSE 55906
55891: PUSH
55892: LD_VAR 0 2
55896: PPUSH
55897: CALL_OW 264
55901: PUSH
55902: LD_INT 81
55904: EQUAL
55905: AND
55906: IFFALSE 55927
// MinerCreateMinefield ( unit , x , y ) ;
55908: LD_VAR 0 2
55912: PPUSH
55913: LD_VAR 0 4
55917: PPUSH
55918: LD_VAR 0 5
55922: PPUSH
55923: CALL 59820 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55927: LD_VAR 0 1
55931: PUSH
55932: LD_INT 253
55934: EQUAL
55935: IFFALSE 55952
55937: PUSH
55938: LD_VAR 0 2
55942: PPUSH
55943: CALL_OW 257
55947: PUSH
55948: LD_INT 5
55950: EQUAL
55951: AND
55952: IFFALSE 55973
// ComBinocular ( unit , x , y ) ;
55954: LD_VAR 0 2
55958: PPUSH
55959: LD_VAR 0 4
55963: PPUSH
55964: LD_VAR 0 5
55968: PPUSH
55969: CALL 60195 0 3
// if selectedUnit then
55973: LD_VAR 0 3
55977: IFFALSE 56037
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55979: LD_VAR 0 1
55983: PUSH
55984: LD_INT 254
55986: EQUAL
55987: IFFALSE 56004
55989: PUSH
55990: LD_VAR 0 2
55994: PPUSH
55995: CALL_OW 264
55999: PUSH
56000: LD_INT 99
56002: EQUAL
56003: AND
56004: IFFALSE 56021
56006: PUSH
56007: LD_VAR 0 3
56011: PPUSH
56012: CALL_OW 263
56016: PUSH
56017: LD_INT 3
56019: EQUAL
56020: AND
56021: IFFALSE 56037
// HackDestroyVehicle ( unit , selectedUnit ) ;
56023: LD_VAR 0 2
56027: PPUSH
56028: LD_VAR 0 3
56032: PPUSH
56033: CALL 58371 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56037: LD_VAR 0 1
56041: PUSH
56042: LD_INT 255
56044: EQUAL
56045: IFFALSE 56069
56047: PUSH
56048: LD_VAR 0 2
56052: PPUSH
56053: CALL_OW 264
56057: PUSH
56058: LD_INT 14
56060: PUSH
56061: LD_INT 53
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: IN
56068: AND
56069: IFFALSE 56087
56071: PUSH
56072: LD_VAR 0 4
56076: PPUSH
56077: LD_VAR 0 5
56081: PPUSH
56082: CALL_OW 488
56086: AND
56087: IFFALSE 56111
// CutTreeXYR ( unit , x , y , 12 ) ;
56089: LD_VAR 0 2
56093: PPUSH
56094: LD_VAR 0 4
56098: PPUSH
56099: LD_VAR 0 5
56103: PPUSH
56104: LD_INT 12
56106: PPUSH
56107: CALL 56302 0 4
// if cmd = 256 then
56111: LD_VAR 0 1
56115: PUSH
56116: LD_INT 256
56118: EQUAL
56119: IFFALSE 56140
// SetFactoryWaypoint ( unit , x , y ) ;
56121: LD_VAR 0 2
56125: PPUSH
56126: LD_VAR 0 4
56130: PPUSH
56131: LD_VAR 0 5
56135: PPUSH
56136: CALL 63896 0 3
// if cmd = 257 then
56140: LD_VAR 0 1
56144: PUSH
56145: LD_INT 257
56147: EQUAL
56148: IFFALSE 56169
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56150: LD_VAR 0 2
56154: PPUSH
56155: LD_VAR 0 4
56159: PPUSH
56160: LD_VAR 0 5
56164: PPUSH
56165: CALL 64392 0 3
// if cmd = 258 then
56169: LD_VAR 0 1
56173: PUSH
56174: LD_INT 258
56176: EQUAL
56177: IFFALSE 56201
// BurnTreeXYR ( unit , x , y , 8 ) ;
56179: LD_VAR 0 2
56183: PPUSH
56184: LD_VAR 0 4
56188: PPUSH
56189: LD_VAR 0 5
56193: PPUSH
56194: LD_INT 8
56196: PPUSH
56197: CALL 56724 0 4
// end ;
56201: LD_VAR 0 6
56205: RET
// export function ComRadiation ( un ) ; var eff ; begin
56206: LD_INT 0
56208: PPUSH
56209: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56210: LD_VAR 0 1
56214: PPUSH
56215: CALL_OW 264
56219: PUSH
56220: LD_INT 91
56222: NONEQUAL
56223: IFFALSE 56227
// exit ;
56225: GO 56297
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56227: LD_INT 68
56229: PPUSH
56230: LD_VAR 0 1
56234: PPUSH
56235: CALL_OW 255
56239: PPUSH
56240: CALL_OW 321
56244: PUSH
56245: LD_INT 2
56247: EQUAL
56248: IFFALSE 56260
// eff := 50 else
56250: LD_ADDR_VAR 0 3
56254: PUSH
56255: LD_INT 50
56257: ST_TO_ADDR
56258: GO 56268
// eff := 25 ;
56260: LD_ADDR_VAR 0 3
56264: PUSH
56265: LD_INT 25
56267: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56268: LD_VAR 0 1
56272: PPUSH
56273: CALL_OW 250
56277: PPUSH
56278: LD_VAR 0 1
56282: PPUSH
56283: CALL_OW 251
56287: PPUSH
56288: LD_VAR 0 3
56292: PPUSH
56293: CALL_OW 495
// end ;
56297: LD_VAR 0 2
56301: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56302: LD_INT 0
56304: PPUSH
56305: PPUSH
56306: PPUSH
56307: PPUSH
56308: PPUSH
56309: PPUSH
56310: PPUSH
56311: PPUSH
56312: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56313: LD_VAR 0 1
56317: PPUSH
56318: CALL_OW 302
56322: NOT
56323: IFTRUE 56342
56325: PUSH
56326: LD_VAR 0 2
56330: PPUSH
56331: LD_VAR 0 3
56335: PPUSH
56336: CALL_OW 488
56340: NOT
56341: OR
56342: IFTRUE 56351
56344: PUSH
56345: LD_VAR 0 4
56349: NOT
56350: OR
56351: IFFALSE 56355
// exit ;
56353: GO 56719
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56355: LD_VAR 0 1
56359: PPUSH
56360: CALL_OW 437
56364: PPUSH
56365: CALL 13543 0 1
56369: PUSH
56370: LD_INT 10
56372: GREATER
56373: IFFALSE 56377
// exit ;
56375: GO 56719
// list := [ ] ;
56377: LD_ADDR_VAR 0 13
56381: PUSH
56382: EMPTY
56383: ST_TO_ADDR
// if x - r < 0 then
56384: LD_VAR 0 2
56388: PUSH
56389: LD_VAR 0 4
56393: MINUS
56394: PUSH
56395: LD_INT 0
56397: LESS
56398: IFFALSE 56410
// min_x := 0 else
56400: LD_ADDR_VAR 0 7
56404: PUSH
56405: LD_INT 0
56407: ST_TO_ADDR
56408: GO 56426
// min_x := x - r ;
56410: LD_ADDR_VAR 0 7
56414: PUSH
56415: LD_VAR 0 2
56419: PUSH
56420: LD_VAR 0 4
56424: MINUS
56425: ST_TO_ADDR
// if y - r < 0 then
56426: LD_VAR 0 3
56430: PUSH
56431: LD_VAR 0 4
56435: MINUS
56436: PUSH
56437: LD_INT 0
56439: LESS
56440: IFFALSE 56452
// min_y := 0 else
56442: LD_ADDR_VAR 0 8
56446: PUSH
56447: LD_INT 0
56449: ST_TO_ADDR
56450: GO 56468
// min_y := y - r ;
56452: LD_ADDR_VAR 0 8
56456: PUSH
56457: LD_VAR 0 3
56461: PUSH
56462: LD_VAR 0 4
56466: MINUS
56467: ST_TO_ADDR
// max_x := x + r ;
56468: LD_ADDR_VAR 0 9
56472: PUSH
56473: LD_VAR 0 2
56477: PUSH
56478: LD_VAR 0 4
56482: PLUS
56483: ST_TO_ADDR
// max_y := y + r ;
56484: LD_ADDR_VAR 0 10
56488: PUSH
56489: LD_VAR 0 3
56493: PUSH
56494: LD_VAR 0 4
56498: PLUS
56499: ST_TO_ADDR
// for _x = min_x to max_x do
56500: LD_ADDR_VAR 0 11
56504: PUSH
56505: DOUBLE
56506: LD_VAR 0 7
56510: DEC
56511: ST_TO_ADDR
56512: LD_VAR 0 9
56516: PUSH
56517: FOR_TO
56518: IFFALSE 56637
// for _y = min_y to max_y do
56520: LD_ADDR_VAR 0 12
56524: PUSH
56525: DOUBLE
56526: LD_VAR 0 8
56530: DEC
56531: ST_TO_ADDR
56532: LD_VAR 0 10
56536: PUSH
56537: FOR_TO
56538: IFFALSE 56633
// begin if not ValidHex ( _x , _y ) then
56540: LD_VAR 0 11
56544: PPUSH
56545: LD_VAR 0 12
56549: PPUSH
56550: CALL_OW 488
56554: NOT
56555: IFFALSE 56559
// continue ;
56557: GO 56537
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56559: LD_VAR 0 11
56563: PPUSH
56564: LD_VAR 0 12
56568: PPUSH
56569: CALL_OW 351
56573: IFFALSE 56591
56575: PUSH
56576: LD_VAR 0 11
56580: PPUSH
56581: LD_VAR 0 12
56585: PPUSH
56586: CALL_OW 554
56590: AND
56591: IFFALSE 56631
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56593: LD_ADDR_VAR 0 13
56597: PUSH
56598: LD_VAR 0 13
56602: PPUSH
56603: LD_VAR 0 13
56607: PUSH
56608: LD_INT 1
56610: PLUS
56611: PPUSH
56612: LD_VAR 0 11
56616: PUSH
56617: LD_VAR 0 12
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PPUSH
56626: CALL_OW 2
56630: ST_TO_ADDR
// end ;
56631: GO 56537
56633: POP
56634: POP
56635: GO 56517
56637: POP
56638: POP
// if not list then
56639: LD_VAR 0 13
56643: NOT
56644: IFFALSE 56648
// exit ;
56646: GO 56719
// for i in list do
56648: LD_ADDR_VAR 0 6
56652: PUSH
56653: LD_VAR 0 13
56657: PUSH
56658: FOR_IN
56659: IFFALSE 56717
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56661: LD_VAR 0 1
56665: PPUSH
56666: LD_STRING M
56668: PUSH
56669: LD_VAR 0 6
56673: PUSH
56674: LD_INT 1
56676: ARRAY
56677: PUSH
56678: LD_VAR 0 6
56682: PUSH
56683: LD_INT 2
56685: ARRAY
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: PPUSH
56711: CALL_OW 447
56715: GO 56658
56717: POP
56718: POP
// end ;
56719: LD_VAR 0 5
56723: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56724: LD_INT 0
56726: PPUSH
56727: PPUSH
56728: PPUSH
56729: PPUSH
56730: PPUSH
56731: PPUSH
56732: PPUSH
56733: PPUSH
56734: PPUSH
56735: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56736: LD_VAR 0 1
56740: PPUSH
56741: CALL_OW 302
56745: NOT
56746: IFTRUE 56765
56748: PUSH
56749: LD_VAR 0 2
56753: PPUSH
56754: LD_VAR 0 3
56758: PPUSH
56759: CALL_OW 488
56763: NOT
56764: OR
56765: IFTRUE 56774
56767: PUSH
56768: LD_VAR 0 4
56772: NOT
56773: OR
56774: IFFALSE 56778
// exit ;
56776: GO 57317
// if Count ( GetTaskList ( flame ) ) > 10 then
56778: LD_VAR 0 1
56782: PPUSH
56783: CALL_OW 437
56787: PPUSH
56788: CALL 13543 0 1
56792: PUSH
56793: LD_INT 10
56795: GREATER
56796: IFFALSE 56800
// exit ;
56798: GO 57317
// list := [ ] ;
56800: LD_ADDR_VAR 0 13
56804: PUSH
56805: EMPTY
56806: ST_TO_ADDR
// if x - r < 0 then
56807: LD_VAR 0 2
56811: PUSH
56812: LD_VAR 0 4
56816: MINUS
56817: PUSH
56818: LD_INT 0
56820: LESS
56821: IFFALSE 56833
// min_x := 0 else
56823: LD_ADDR_VAR 0 7
56827: PUSH
56828: LD_INT 0
56830: ST_TO_ADDR
56831: GO 56849
// min_x := x - r ;
56833: LD_ADDR_VAR 0 7
56837: PUSH
56838: LD_VAR 0 2
56842: PUSH
56843: LD_VAR 0 4
56847: MINUS
56848: ST_TO_ADDR
// if y - r < 0 then
56849: LD_VAR 0 3
56853: PUSH
56854: LD_VAR 0 4
56858: MINUS
56859: PUSH
56860: LD_INT 0
56862: LESS
56863: IFFALSE 56875
// min_y := 0 else
56865: LD_ADDR_VAR 0 8
56869: PUSH
56870: LD_INT 0
56872: ST_TO_ADDR
56873: GO 56891
// min_y := y - r ;
56875: LD_ADDR_VAR 0 8
56879: PUSH
56880: LD_VAR 0 3
56884: PUSH
56885: LD_VAR 0 4
56889: MINUS
56890: ST_TO_ADDR
// max_x := x + r ;
56891: LD_ADDR_VAR 0 9
56895: PUSH
56896: LD_VAR 0 2
56900: PUSH
56901: LD_VAR 0 4
56905: PLUS
56906: ST_TO_ADDR
// max_y := y + r ;
56907: LD_ADDR_VAR 0 10
56911: PUSH
56912: LD_VAR 0 3
56916: PUSH
56917: LD_VAR 0 4
56921: PLUS
56922: ST_TO_ADDR
// for _x = min_x to max_x do
56923: LD_ADDR_VAR 0 11
56927: PUSH
56928: DOUBLE
56929: LD_VAR 0 7
56933: DEC
56934: ST_TO_ADDR
56935: LD_VAR 0 9
56939: PUSH
56940: FOR_TO
56941: IFFALSE 57060
// for _y = min_y to max_y do
56943: LD_ADDR_VAR 0 12
56947: PUSH
56948: DOUBLE
56949: LD_VAR 0 8
56953: DEC
56954: ST_TO_ADDR
56955: LD_VAR 0 10
56959: PUSH
56960: FOR_TO
56961: IFFALSE 57056
// begin if not ValidHex ( _x , _y ) then
56963: LD_VAR 0 11
56967: PPUSH
56968: LD_VAR 0 12
56972: PPUSH
56973: CALL_OW 488
56977: NOT
56978: IFFALSE 56982
// continue ;
56980: GO 56960
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56982: LD_VAR 0 11
56986: PPUSH
56987: LD_VAR 0 12
56991: PPUSH
56992: CALL_OW 351
56996: IFFALSE 57014
56998: PUSH
56999: LD_VAR 0 11
57003: PPUSH
57004: LD_VAR 0 12
57008: PPUSH
57009: CALL_OW 554
57013: AND
57014: IFFALSE 57054
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57016: LD_ADDR_VAR 0 13
57020: PUSH
57021: LD_VAR 0 13
57025: PPUSH
57026: LD_VAR 0 13
57030: PUSH
57031: LD_INT 1
57033: PLUS
57034: PPUSH
57035: LD_VAR 0 11
57039: PUSH
57040: LD_VAR 0 12
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PPUSH
57049: CALL_OW 2
57053: ST_TO_ADDR
// end ;
57054: GO 56960
57056: POP
57057: POP
57058: GO 56940
57060: POP
57061: POP
// if not list then
57062: LD_VAR 0 13
57066: NOT
57067: IFFALSE 57071
// exit ;
57069: GO 57317
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57071: LD_ADDR_VAR 0 13
57075: PUSH
57076: LD_VAR 0 1
57080: PPUSH
57081: LD_VAR 0 13
57085: PPUSH
57086: LD_INT 1
57088: PPUSH
57089: LD_INT 1
57091: PPUSH
57092: CALL 16949 0 4
57096: ST_TO_ADDR
// ComStop ( flame ) ;
57097: LD_VAR 0 1
57101: PPUSH
57102: CALL_OW 141
// for i in list do
57106: LD_ADDR_VAR 0 6
57110: PUSH
57111: LD_VAR 0 13
57115: PUSH
57116: FOR_IN
57117: IFFALSE 57148
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57119: LD_VAR 0 1
57123: PPUSH
57124: LD_VAR 0 6
57128: PUSH
57129: LD_INT 1
57131: ARRAY
57132: PPUSH
57133: LD_VAR 0 6
57137: PUSH
57138: LD_INT 2
57140: ARRAY
57141: PPUSH
57142: CALL_OW 176
57146: GO 57116
57148: POP
57149: POP
// repeat wait ( 0 0$1 ) ;
57150: LD_INT 35
57152: PPUSH
57153: CALL_OW 67
// task := GetTaskList ( flame ) ;
57157: LD_ADDR_VAR 0 14
57161: PUSH
57162: LD_VAR 0 1
57166: PPUSH
57167: CALL_OW 437
57171: ST_TO_ADDR
// if not task then
57172: LD_VAR 0 14
57176: NOT
57177: IFFALSE 57181
// exit ;
57179: GO 57317
// if task [ 1 ] [ 1 ] <> | then
57181: LD_VAR 0 14
57185: PUSH
57186: LD_INT 1
57188: ARRAY
57189: PUSH
57190: LD_INT 1
57192: ARRAY
57193: PUSH
57194: LD_STRING |
57196: NONEQUAL
57197: IFFALSE 57201
// exit ;
57199: GO 57317
// _x := task [ 1 ] [ 2 ] ;
57201: LD_ADDR_VAR 0 11
57205: PUSH
57206: LD_VAR 0 14
57210: PUSH
57211: LD_INT 1
57213: ARRAY
57214: PUSH
57215: LD_INT 2
57217: ARRAY
57218: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57219: LD_ADDR_VAR 0 12
57223: PUSH
57224: LD_VAR 0 14
57228: PUSH
57229: LD_INT 1
57231: ARRAY
57232: PUSH
57233: LD_INT 3
57235: ARRAY
57236: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57237: LD_VAR 0 11
57241: PPUSH
57242: LD_VAR 0 12
57246: PPUSH
57247: CALL_OW 351
57251: NOT
57252: IFTRUE 57271
57254: PUSH
57255: LD_VAR 0 11
57259: PPUSH
57260: LD_VAR 0 12
57264: PPUSH
57265: CALL_OW 554
57269: NOT
57270: OR
57271: IFFALSE 57305
// begin task := Delete ( task , 1 ) ;
57273: LD_ADDR_VAR 0 14
57277: PUSH
57278: LD_VAR 0 14
57282: PPUSH
57283: LD_INT 1
57285: PPUSH
57286: CALL_OW 3
57290: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57291: LD_VAR 0 1
57295: PPUSH
57296: LD_VAR 0 14
57300: PPUSH
57301: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57305: LD_VAR 0 1
57309: PPUSH
57310: CALL_OW 314
57314: NOT
57315: IFFALSE 57150
// end ;
57317: LD_VAR 0 5
57321: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57322: LD_EXP 50
57326: NOT
57327: IFFALSE 57377
57329: GO 57331
57331: DISABLE
// begin initHack := true ;
57332: LD_ADDR_EXP 50
57336: PUSH
57337: LD_INT 1
57339: ST_TO_ADDR
// hackTanks := [ ] ;
57340: LD_ADDR_EXP 51
57344: PUSH
57345: EMPTY
57346: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57347: LD_ADDR_EXP 52
57351: PUSH
57352: EMPTY
57353: ST_TO_ADDR
// hackLimit := 3 ;
57354: LD_ADDR_EXP 53
57358: PUSH
57359: LD_INT 3
57361: ST_TO_ADDR
// hackDist := 12 ;
57362: LD_ADDR_EXP 54
57366: PUSH
57367: LD_INT 12
57369: ST_TO_ADDR
// hackCounter := [ ] ;
57370: LD_ADDR_EXP 55
57374: PUSH
57375: EMPTY
57376: ST_TO_ADDR
// end ;
57377: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57378: LD_EXP 50
57382: IFFALSE 57400
57384: PUSH
57385: LD_INT 34
57387: PUSH
57388: LD_INT 99
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PPUSH
57395: CALL_OW 69
57399: AND
57400: IFFALSE 57653
57402: GO 57404
57404: DISABLE
57405: LD_INT 0
57407: PPUSH
57408: PPUSH
// begin enable ;
57409: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57410: LD_ADDR_VAR 0 1
57414: PUSH
57415: LD_INT 34
57417: PUSH
57418: LD_INT 99
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PPUSH
57425: CALL_OW 69
57429: PUSH
57430: FOR_IN
57431: IFFALSE 57651
// begin if not i in hackTanks then
57433: LD_VAR 0 1
57437: PUSH
57438: LD_EXP 51
57442: IN
57443: NOT
57444: IFFALSE 57527
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57446: LD_ADDR_EXP 51
57450: PUSH
57451: LD_EXP 51
57455: PPUSH
57456: LD_EXP 51
57460: PUSH
57461: LD_INT 1
57463: PLUS
57464: PPUSH
57465: LD_VAR 0 1
57469: PPUSH
57470: CALL_OW 1
57474: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57475: LD_ADDR_EXP 52
57479: PUSH
57480: LD_EXP 52
57484: PPUSH
57485: LD_EXP 52
57489: PUSH
57490: LD_INT 1
57492: PLUS
57493: PPUSH
57494: EMPTY
57495: PPUSH
57496: CALL_OW 1
57500: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57501: LD_ADDR_EXP 55
57505: PUSH
57506: LD_EXP 55
57510: PPUSH
57511: LD_EXP 55
57515: PUSH
57516: LD_INT 1
57518: PLUS
57519: PPUSH
57520: EMPTY
57521: PPUSH
57522: CALL_OW 1
57526: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57527: LD_VAR 0 1
57531: PPUSH
57532: CALL_OW 302
57536: NOT
57537: IFFALSE 57550
// begin HackUnlinkAll ( i ) ;
57539: LD_VAR 0 1
57543: PPUSH
57544: CALL 57656 0 1
// continue ;
57548: GO 57430
// end ; HackCheckCapturedStatus ( i ) ;
57550: LD_VAR 0 1
57554: PPUSH
57555: CALL 58101 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57559: LD_ADDR_VAR 0 2
57563: PUSH
57564: LD_INT 81
57566: PUSH
57567: LD_VAR 0 1
57571: PPUSH
57572: CALL_OW 255
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 33
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 91
57593: PUSH
57594: LD_VAR 0 1
57598: PUSH
57599: LD_EXP 54
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 50
57611: PUSH
57612: EMPTY
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: PPUSH
57621: CALL_OW 69
57625: ST_TO_ADDR
// if not tmp then
57626: LD_VAR 0 2
57630: NOT
57631: IFFALSE 57635
// continue ;
57633: GO 57430
// HackLink ( i , tmp ) ;
57635: LD_VAR 0 1
57639: PPUSH
57640: LD_VAR 0 2
57644: PPUSH
57645: CALL 57792 0 2
// end ;
57649: GO 57430
57651: POP
57652: POP
// end ;
57653: PPOPN 2
57655: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57656: LD_INT 0
57658: PPUSH
57659: PPUSH
57660: PPUSH
// if not hack in hackTanks then
57661: LD_VAR 0 1
57665: PUSH
57666: LD_EXP 51
57670: IN
57671: NOT
57672: IFFALSE 57676
// exit ;
57674: GO 57787
// index := GetElementIndex ( hackTanks , hack ) ;
57676: LD_ADDR_VAR 0 4
57680: PUSH
57681: LD_EXP 51
57685: PPUSH
57686: LD_VAR 0 1
57690: PPUSH
57691: CALL 16244 0 2
57695: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57696: LD_EXP 52
57700: PUSH
57701: LD_VAR 0 4
57705: ARRAY
57706: IFFALSE 57787
// begin for i in hackTanksCaptured [ index ] do
57708: LD_ADDR_VAR 0 3
57712: PUSH
57713: LD_EXP 52
57717: PUSH
57718: LD_VAR 0 4
57722: ARRAY
57723: PUSH
57724: FOR_IN
57725: IFFALSE 57751
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57727: LD_VAR 0 3
57731: PUSH
57732: LD_INT 1
57734: ARRAY
57735: PPUSH
57736: LD_VAR 0 3
57740: PUSH
57741: LD_INT 2
57743: ARRAY
57744: PPUSH
57745: CALL_OW 235
57749: GO 57724
57751: POP
57752: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57753: LD_ADDR_EXP 52
57757: PUSH
57758: LD_EXP 52
57762: PPUSH
57763: LD_VAR 0 4
57767: PPUSH
57768: EMPTY
57769: PPUSH
57770: CALL_OW 1
57774: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57775: LD_VAR 0 1
57779: PPUSH
57780: LD_INT 0
57782: PPUSH
57783: CALL_OW 505
// end ; end ;
57787: LD_VAR 0 2
57791: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57792: LD_INT 0
57794: PPUSH
57795: PPUSH
57796: PPUSH
// if not hack in hackTanks or not vehicles then
57797: LD_VAR 0 1
57801: PUSH
57802: LD_EXP 51
57806: IN
57807: NOT
57808: IFTRUE 57817
57810: PUSH
57811: LD_VAR 0 2
57815: NOT
57816: OR
57817: IFFALSE 57821
// exit ;
57819: GO 58096
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57821: LD_ADDR_VAR 0 2
57825: PUSH
57826: LD_VAR 0 1
57830: PPUSH
57831: LD_VAR 0 2
57835: PPUSH
57836: LD_INT 1
57838: PPUSH
57839: LD_INT 1
57841: PPUSH
57842: CALL 16896 0 4
57846: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57847: LD_ADDR_VAR 0 5
57851: PUSH
57852: LD_EXP 51
57856: PPUSH
57857: LD_VAR 0 1
57861: PPUSH
57862: CALL 16244 0 2
57866: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57867: LD_EXP 52
57871: PUSH
57872: LD_VAR 0 5
57876: ARRAY
57877: PUSH
57878: LD_EXP 53
57882: LESS
57883: IFFALSE 58072
// begin for i := 1 to vehicles do
57885: LD_ADDR_VAR 0 4
57889: PUSH
57890: DOUBLE
57891: LD_INT 1
57893: DEC
57894: ST_TO_ADDR
57895: LD_VAR 0 2
57899: PUSH
57900: FOR_TO
57901: IFFALSE 58070
// begin if hackTanksCaptured [ index ] = hackLimit then
57903: LD_EXP 52
57907: PUSH
57908: LD_VAR 0 5
57912: ARRAY
57913: PUSH
57914: LD_EXP 53
57918: EQUAL
57919: IFFALSE 57923
// break ;
57921: GO 58070
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57923: LD_ADDR_EXP 55
57927: PUSH
57928: LD_EXP 55
57932: PPUSH
57933: LD_VAR 0 5
57937: PPUSH
57938: LD_EXP 55
57942: PUSH
57943: LD_VAR 0 5
57947: ARRAY
57948: PUSH
57949: LD_INT 1
57951: PLUS
57952: PPUSH
57953: CALL_OW 1
57957: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57958: LD_ADDR_EXP 52
57962: PUSH
57963: LD_EXP 52
57967: PPUSH
57968: LD_VAR 0 5
57972: PUSH
57973: LD_EXP 52
57977: PUSH
57978: LD_VAR 0 5
57982: ARRAY
57983: PUSH
57984: LD_INT 1
57986: PLUS
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PPUSH
57992: LD_VAR 0 2
57996: PUSH
57997: LD_VAR 0 4
58001: ARRAY
58002: PUSH
58003: LD_VAR 0 2
58007: PUSH
58008: LD_VAR 0 4
58012: ARRAY
58013: PPUSH
58014: CALL_OW 255
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PPUSH
58023: CALL 16461 0 3
58027: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58028: LD_VAR 0 2
58032: PUSH
58033: LD_VAR 0 4
58037: ARRAY
58038: PPUSH
58039: LD_VAR 0 1
58043: PPUSH
58044: CALL_OW 255
58048: PPUSH
58049: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58053: LD_VAR 0 2
58057: PUSH
58058: LD_VAR 0 4
58062: ARRAY
58063: PPUSH
58064: CALL_OW 141
// end ;
58068: GO 57900
58070: POP
58071: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58072: LD_VAR 0 1
58076: PPUSH
58077: LD_EXP 52
58081: PUSH
58082: LD_VAR 0 5
58086: ARRAY
58087: PUSH
58088: LD_INT 0
58090: PLUS
58091: PPUSH
58092: CALL_OW 505
// end ;
58096: LD_VAR 0 3
58100: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58101: LD_INT 0
58103: PPUSH
58104: PPUSH
58105: PPUSH
58106: PPUSH
// if not hack in hackTanks then
58107: LD_VAR 0 1
58111: PUSH
58112: LD_EXP 51
58116: IN
58117: NOT
58118: IFFALSE 58122
// exit ;
58120: GO 58366
// index := GetElementIndex ( hackTanks , hack ) ;
58122: LD_ADDR_VAR 0 4
58126: PUSH
58127: LD_EXP 51
58131: PPUSH
58132: LD_VAR 0 1
58136: PPUSH
58137: CALL 16244 0 2
58141: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58142: LD_ADDR_VAR 0 3
58146: PUSH
58147: DOUBLE
58148: LD_EXP 52
58152: PUSH
58153: LD_VAR 0 4
58157: ARRAY
58158: INC
58159: ST_TO_ADDR
58160: LD_INT 1
58162: PUSH
58163: FOR_DOWNTO
58164: IFFALSE 58340
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58166: LD_ADDR_VAR 0 5
58170: PUSH
58171: LD_EXP 52
58175: PUSH
58176: LD_VAR 0 4
58180: ARRAY
58181: PUSH
58182: LD_VAR 0 3
58186: ARRAY
58187: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58188: LD_VAR 0 5
58192: PUSH
58193: LD_INT 1
58195: ARRAY
58196: PPUSH
58197: CALL_OW 302
58201: NOT
58202: IFTRUE 58230
58204: PUSH
58205: LD_VAR 0 5
58209: PUSH
58210: LD_INT 1
58212: ARRAY
58213: PPUSH
58214: CALL_OW 255
58218: PUSH
58219: LD_VAR 0 1
58223: PPUSH
58224: CALL_OW 255
58228: NONEQUAL
58229: OR
58230: IFFALSE 58338
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58232: LD_VAR 0 5
58236: PUSH
58237: LD_INT 1
58239: ARRAY
58240: PPUSH
58241: CALL_OW 305
58245: IFFALSE 58273
58247: PUSH
58248: LD_VAR 0 5
58252: PUSH
58253: LD_INT 1
58255: ARRAY
58256: PPUSH
58257: CALL_OW 255
58261: PUSH
58262: LD_VAR 0 1
58266: PPUSH
58267: CALL_OW 255
58271: EQUAL
58272: AND
58273: IFFALSE 58297
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58275: LD_VAR 0 5
58279: PUSH
58280: LD_INT 1
58282: ARRAY
58283: PPUSH
58284: LD_VAR 0 5
58288: PUSH
58289: LD_INT 2
58291: ARRAY
58292: PPUSH
58293: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58297: LD_ADDR_EXP 52
58301: PUSH
58302: LD_EXP 52
58306: PPUSH
58307: LD_VAR 0 4
58311: PPUSH
58312: LD_EXP 52
58316: PUSH
58317: LD_VAR 0 4
58321: ARRAY
58322: PPUSH
58323: LD_VAR 0 3
58327: PPUSH
58328: CALL_OW 3
58332: PPUSH
58333: CALL_OW 1
58337: ST_TO_ADDR
// end ; end ;
58338: GO 58163
58340: POP
58341: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58342: LD_VAR 0 1
58346: PPUSH
58347: LD_EXP 52
58351: PUSH
58352: LD_VAR 0 4
58356: ARRAY
58357: PUSH
58358: LD_INT 0
58360: PLUS
58361: PPUSH
58362: CALL_OW 505
// end ;
58366: LD_VAR 0 2
58370: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58371: LD_INT 0
58373: PPUSH
58374: PPUSH
58375: PPUSH
58376: PPUSH
// if not hack in hackTanks then
58377: LD_VAR 0 1
58381: PUSH
58382: LD_EXP 51
58386: IN
58387: NOT
58388: IFFALSE 58392
// exit ;
58390: GO 58477
// index := GetElementIndex ( hackTanks , hack ) ;
58392: LD_ADDR_VAR 0 5
58396: PUSH
58397: LD_EXP 51
58401: PPUSH
58402: LD_VAR 0 1
58406: PPUSH
58407: CALL 16244 0 2
58411: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58412: LD_ADDR_VAR 0 4
58416: PUSH
58417: DOUBLE
58418: LD_INT 1
58420: DEC
58421: ST_TO_ADDR
58422: LD_EXP 52
58426: PUSH
58427: LD_VAR 0 5
58431: ARRAY
58432: PUSH
58433: FOR_TO
58434: IFFALSE 58475
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58436: LD_EXP 52
58440: PUSH
58441: LD_VAR 0 5
58445: ARRAY
58446: PUSH
58447: LD_VAR 0 4
58451: ARRAY
58452: PUSH
58453: LD_INT 1
58455: ARRAY
58456: PUSH
58457: LD_VAR 0 2
58461: EQUAL
58462: IFFALSE 58473
// KillUnit ( vehicle ) ;
58464: LD_VAR 0 2
58468: PPUSH
58469: CALL_OW 66
58473: GO 58433
58475: POP
58476: POP
// end ;
58477: LD_VAR 0 3
58481: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58482: LD_EXP 56
58486: NOT
58487: IFFALSE 58620
58489: GO 58491
58491: DISABLE
58492: LD_INT 0
58494: PPUSH
// begin initMiner := true ;
58495: LD_ADDR_EXP 56
58499: PUSH
58500: LD_INT 1
58502: ST_TO_ADDR
// minersList := [ ] ;
58503: LD_ADDR_EXP 57
58507: PUSH
58508: EMPTY
58509: ST_TO_ADDR
// minerMinesList := [ ] ;
58510: LD_ADDR_EXP 58
58514: PUSH
58515: EMPTY
58516: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58517: LD_ADDR_EXP 59
58521: PUSH
58522: LD_INT 10
58524: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58525: LD_ADDR_VAR 0 1
58529: PUSH
58530: LD_INT 34
58532: PUSH
58533: LD_INT 81
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PPUSH
58540: CALL_OW 69
58544: PUSH
58545: FOR_IN
58546: IFFALSE 58618
// begin if not i in minersList then
58548: LD_VAR 0 1
58552: PUSH
58553: LD_EXP 57
58557: IN
58558: NOT
58559: IFFALSE 58616
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58561: LD_ADDR_EXP 57
58565: PUSH
58566: LD_EXP 57
58570: PPUSH
58571: LD_EXP 57
58575: PUSH
58576: LD_INT 1
58578: PLUS
58579: PPUSH
58580: LD_VAR 0 1
58584: PPUSH
58585: CALL_OW 1
58589: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58590: LD_ADDR_EXP 58
58594: PUSH
58595: LD_EXP 58
58599: PPUSH
58600: LD_EXP 58
58604: PUSH
58605: LD_INT 1
58607: PLUS
58608: PPUSH
58609: EMPTY
58610: PPUSH
58611: CALL_OW 1
58615: ST_TO_ADDR
// end end ;
58616: GO 58545
58618: POP
58619: POP
// end ;
58620: PPOPN 1
58622: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58623: LD_EXP 56
58627: IFFALSE 58658
58629: PUSH
58630: LD_EXP 58
58634: PPUSH
58635: CALL 13543 0 1
58639: IFTRUE 58657
58641: PUSH
58642: LD_INT 34
58644: PUSH
58645: LD_INT 81
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PPUSH
58652: CALL_OW 69
58656: OR
58657: AND
58658: IFFALSE 59178
58660: GO 58662
58662: DISABLE
58663: LD_INT 0
58665: PPUSH
58666: PPUSH
58667: PPUSH
58668: PPUSH
// begin enable ;
58669: ENABLE
// for i := minerMinesList downto 1 do
58670: LD_ADDR_VAR 0 1
58674: PUSH
58675: DOUBLE
58676: LD_EXP 58
58680: INC
58681: ST_TO_ADDR
58682: LD_INT 1
58684: PUSH
58685: FOR_DOWNTO
58686: IFFALSE 59176
// begin side := GetSide ( minersList [ i ] ) ;
58688: LD_ADDR_VAR 0 3
58692: PUSH
58693: LD_EXP 57
58697: PUSH
58698: LD_VAR 0 1
58702: ARRAY
58703: PPUSH
58704: CALL_OW 255
58708: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58709: LD_EXP 57
58713: PUSH
58714: LD_VAR 0 1
58718: ARRAY
58719: PPUSH
58720: CALL_OW 300
58724: IFFALSE 58745
58726: PUSH
58727: LD_VAR 0 3
58731: PUSH
58732: LD_OWVAR 2
58736: PUSH
58737: LD_INT 9
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: IN
58744: AND
58745: IFFALSE 58778
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58747: LD_EXP 57
58751: PUSH
58752: LD_VAR 0 1
58756: ARRAY
58757: PPUSH
58758: LD_EXP 58
58762: PUSH
58763: LD_VAR 0 1
58767: ARRAY
58768: PPUSH
58769: CALL 13543 0 1
58773: PPUSH
58774: CALL_OW 505
// if not minerMinesList [ i ] then
58778: LD_EXP 58
58782: PUSH
58783: LD_VAR 0 1
58787: ARRAY
58788: NOT
58789: IFFALSE 58793
// continue ;
58791: GO 58685
// for j := minerMinesList [ i ] downto 1 do
58793: LD_ADDR_VAR 0 2
58797: PUSH
58798: DOUBLE
58799: LD_EXP 58
58803: PUSH
58804: LD_VAR 0 1
58808: ARRAY
58809: INC
58810: ST_TO_ADDR
58811: LD_INT 1
58813: PUSH
58814: FOR_DOWNTO
58815: IFFALSE 59172
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58817: LD_EXP 57
58821: PUSH
58822: LD_VAR 0 1
58826: ARRAY
58827: PPUSH
58828: CALL_OW 301
58832: IFTRUE 58852
58834: PUSH
58835: LD_EXP 57
58839: PUSH
58840: LD_VAR 0 1
58844: ARRAY
58845: PPUSH
58846: CALL_OW 305
58850: NOT
58851: OR
58852: IFFALSE 58943
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58854: LD_EXP 58
58858: PUSH
58859: LD_VAR 0 1
58863: ARRAY
58864: PUSH
58865: LD_VAR 0 2
58869: ARRAY
58870: PUSH
58871: LD_INT 1
58873: ARRAY
58874: PPUSH
58875: LD_EXP 58
58879: PUSH
58880: LD_VAR 0 1
58884: ARRAY
58885: PUSH
58886: LD_VAR 0 2
58890: ARRAY
58891: PUSH
58892: LD_INT 2
58894: ARRAY
58895: PPUSH
58896: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58900: LD_ADDR_EXP 58
58904: PUSH
58905: LD_EXP 58
58909: PPUSH
58910: LD_VAR 0 1
58914: PPUSH
58915: LD_EXP 58
58919: PUSH
58920: LD_VAR 0 1
58924: ARRAY
58925: PPUSH
58926: LD_VAR 0 2
58930: PPUSH
58931: CALL_OW 3
58935: PPUSH
58936: CALL_OW 1
58940: ST_TO_ADDR
// continue ;
58941: GO 58814
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58943: LD_ADDR_VAR 0 4
58947: PUSH
58948: LD_EXP 58
58952: PUSH
58953: LD_VAR 0 1
58957: ARRAY
58958: PUSH
58959: LD_VAR 0 2
58963: ARRAY
58964: PUSH
58965: LD_INT 1
58967: ARRAY
58968: PPUSH
58969: LD_EXP 58
58973: PUSH
58974: LD_VAR 0 1
58978: ARRAY
58979: PUSH
58980: LD_VAR 0 2
58984: ARRAY
58985: PUSH
58986: LD_INT 2
58988: ARRAY
58989: PPUSH
58990: CALL_OW 428
58994: ST_TO_ADDR
// if not tmp then
58995: LD_VAR 0 4
58999: NOT
59000: IFFALSE 59004
// continue ;
59002: GO 58814
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59004: LD_VAR 0 4
59008: PUSH
59009: LD_INT 81
59011: PUSH
59012: LD_VAR 0 3
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PPUSH
59021: CALL_OW 69
59025: IN
59026: IFFALSE 59076
59028: PUSH
59029: LD_EXP 58
59033: PUSH
59034: LD_VAR 0 1
59038: ARRAY
59039: PUSH
59040: LD_VAR 0 2
59044: ARRAY
59045: PUSH
59046: LD_INT 1
59048: ARRAY
59049: PPUSH
59050: LD_EXP 58
59054: PUSH
59055: LD_VAR 0 1
59059: ARRAY
59060: PUSH
59061: LD_VAR 0 2
59065: ARRAY
59066: PUSH
59067: LD_INT 2
59069: ARRAY
59070: PPUSH
59071: CALL_OW 458
59075: AND
59076: IFFALSE 59170
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59078: LD_EXP 58
59082: PUSH
59083: LD_VAR 0 1
59087: ARRAY
59088: PUSH
59089: LD_VAR 0 2
59093: ARRAY
59094: PUSH
59095: LD_INT 1
59097: ARRAY
59098: PPUSH
59099: LD_EXP 58
59103: PUSH
59104: LD_VAR 0 1
59108: ARRAY
59109: PUSH
59110: LD_VAR 0 2
59114: ARRAY
59115: PUSH
59116: LD_INT 2
59118: ARRAY
59119: PPUSH
59120: LD_VAR 0 3
59124: PPUSH
59125: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59129: LD_ADDR_EXP 58
59133: PUSH
59134: LD_EXP 58
59138: PPUSH
59139: LD_VAR 0 1
59143: PPUSH
59144: LD_EXP 58
59148: PUSH
59149: LD_VAR 0 1
59153: ARRAY
59154: PPUSH
59155: LD_VAR 0 2
59159: PPUSH
59160: CALL_OW 3
59164: PPUSH
59165: CALL_OW 1
59169: ST_TO_ADDR
// end ; end ;
59170: GO 58814
59172: POP
59173: POP
// end ;
59174: GO 58685
59176: POP
59177: POP
// end ;
59178: PPOPN 4
59180: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59181: LD_INT 0
59183: PPUSH
59184: PPUSH
59185: PPUSH
59186: PPUSH
// result := false ;
59187: LD_ADDR_VAR 0 4
59191: PUSH
59192: LD_INT 0
59194: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59195: LD_VAR 0 1
59199: PPUSH
59200: CALL_OW 264
59204: PUSH
59205: LD_INT 81
59207: EQUAL
59208: NOT
59209: IFFALSE 59213
// exit ;
59211: GO 59583
// side := GetSide ( unit ) ;
59213: LD_ADDR_VAR 0 6
59217: PUSH
59218: LD_VAR 0 1
59222: PPUSH
59223: CALL_OW 255
59227: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59228: LD_ADDR_VAR 0 5
59232: PUSH
59233: LD_EXP 57
59237: PPUSH
59238: LD_VAR 0 1
59242: PPUSH
59243: CALL 16244 0 2
59247: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59248: LD_EXP 58
59252: PUSH
59253: LD_VAR 0 5
59257: ARRAY
59258: PUSH
59259: LD_EXP 59
59263: GREATEREQUAL
59264: IFFALSE 59268
// exit ;
59266: GO 59583
// ComMoveXY ( unit , x , y ) ;
59268: LD_VAR 0 1
59272: PPUSH
59273: LD_VAR 0 2
59277: PPUSH
59278: LD_VAR 0 3
59282: PPUSH
59283: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59287: LD_INT 35
59289: PPUSH
59290: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59294: LD_VAR 0 1
59298: PPUSH
59299: LD_VAR 0 2
59303: PPUSH
59304: LD_VAR 0 3
59308: PPUSH
59309: CALL 48300 0 3
59313: NOT
59314: IFFALSE 59327
59316: PUSH
59317: LD_VAR 0 1
59321: PPUSH
59322: CALL_OW 314
59326: AND
59327: IFFALSE 59331
// exit ;
59329: GO 59583
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59331: LD_VAR 0 2
59335: PPUSH
59336: LD_VAR 0 3
59340: PPUSH
59341: CALL_OW 428
59345: PUSH
59346: LD_VAR 0 1
59350: EQUAL
59351: IFFALSE 59365
59353: PUSH
59354: LD_VAR 0 1
59358: PPUSH
59359: CALL_OW 314
59363: NOT
59364: AND
59365: IFFALSE 59287
// if MineAtPos ( x , y ) then
59367: LD_VAR 0 2
59371: PPUSH
59372: LD_VAR 0 3
59376: PPUSH
59377: CALL_OW 458
59381: IFFALSE 59385
// exit ;
59383: GO 59583
// if your_side = side then
59385: LD_OWVAR 2
59389: PUSH
59390: LD_VAR 0 6
59394: EQUAL
59395: IFFALSE 59414
// PlaySoundXY ( x , y , PlantMine ) ;
59397: LD_VAR 0 2
59401: PPUSH
59402: LD_VAR 0 3
59406: PPUSH
59407: LD_STRING PlantMine
59409: PPUSH
59410: CALL_OW 366
// repeat wait ( 1 ) ;
59414: LD_INT 1
59416: PPUSH
59417: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59421: LD_VAR 0 2
59425: PPUSH
59426: LD_VAR 0 3
59430: PPUSH
59431: LD_VAR 0 6
59435: PPUSH
59436: LD_INT 0
59438: PPUSH
59439: CALL_OW 454
59443: IFFALSE 59414
// if MineAtPos ( x , y ) then
59445: LD_VAR 0 2
59449: PPUSH
59450: LD_VAR 0 3
59454: PPUSH
59455: CALL_OW 458
59459: IFFALSE 59575
// begin for i in minerMinesList [ index ] do
59461: LD_ADDR_VAR 0 7
59465: PUSH
59466: LD_EXP 58
59470: PUSH
59471: LD_VAR 0 5
59475: ARRAY
59476: PUSH
59477: FOR_IN
59478: IFFALSE 59520
// if i [ 1 ] = x and i [ 2 ] = y then
59480: LD_VAR 0 7
59484: PUSH
59485: LD_INT 1
59487: ARRAY
59488: PUSH
59489: LD_VAR 0 2
59493: EQUAL
59494: IFFALSE 59512
59496: PUSH
59497: LD_VAR 0 7
59501: PUSH
59502: LD_INT 2
59504: ARRAY
59505: PUSH
59506: LD_VAR 0 3
59510: EQUAL
59511: AND
59512: IFFALSE 59518
// exit ;
59514: POP
59515: POP
59516: GO 59583
59518: GO 59477
59520: POP
59521: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59522: LD_ADDR_EXP 58
59526: PUSH
59527: LD_EXP 58
59531: PPUSH
59532: LD_VAR 0 5
59536: PUSH
59537: LD_EXP 58
59541: PUSH
59542: LD_VAR 0 5
59546: ARRAY
59547: PUSH
59548: LD_INT 1
59550: PLUS
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PPUSH
59556: LD_VAR 0 2
59560: PUSH
59561: LD_VAR 0 3
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PPUSH
59570: CALL 16461 0 3
59574: ST_TO_ADDR
// end ; result := true ;
59575: LD_ADDR_VAR 0 4
59579: PUSH
59580: LD_INT 1
59582: ST_TO_ADDR
// end ;
59583: LD_VAR 0 4
59587: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59588: LD_INT 0
59590: PPUSH
59591: PPUSH
59592: PPUSH
// if not unit in minersList then
59593: LD_VAR 0 1
59597: PUSH
59598: LD_EXP 57
59602: IN
59603: NOT
59604: IFFALSE 59608
// exit ;
59606: GO 59815
// index := GetElementIndex ( minersList , unit ) ;
59608: LD_ADDR_VAR 0 6
59612: PUSH
59613: LD_EXP 57
59617: PPUSH
59618: LD_VAR 0 1
59622: PPUSH
59623: CALL 16244 0 2
59627: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59628: LD_ADDR_VAR 0 5
59632: PUSH
59633: DOUBLE
59634: LD_EXP 58
59638: PUSH
59639: LD_VAR 0 6
59643: ARRAY
59644: INC
59645: ST_TO_ADDR
59646: LD_INT 1
59648: PUSH
59649: FOR_DOWNTO
59650: IFFALSE 59813
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59652: LD_EXP 58
59656: PUSH
59657: LD_VAR 0 6
59661: ARRAY
59662: PUSH
59663: LD_VAR 0 5
59667: ARRAY
59668: PUSH
59669: LD_INT 1
59671: ARRAY
59672: PPUSH
59673: LD_EXP 58
59677: PUSH
59678: LD_VAR 0 6
59682: ARRAY
59683: PUSH
59684: LD_VAR 0 5
59688: ARRAY
59689: PUSH
59690: LD_INT 2
59692: ARRAY
59693: PPUSH
59694: LD_VAR 0 2
59698: PPUSH
59699: LD_VAR 0 3
59703: PPUSH
59704: CALL_OW 298
59708: PUSH
59709: LD_INT 6
59711: LESS
59712: IFFALSE 59811
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59714: LD_EXP 58
59718: PUSH
59719: LD_VAR 0 6
59723: ARRAY
59724: PUSH
59725: LD_VAR 0 5
59729: ARRAY
59730: PUSH
59731: LD_INT 1
59733: ARRAY
59734: PPUSH
59735: LD_EXP 58
59739: PUSH
59740: LD_VAR 0 6
59744: ARRAY
59745: PUSH
59746: LD_VAR 0 5
59750: ARRAY
59751: PUSH
59752: LD_INT 2
59754: ARRAY
59755: PPUSH
59756: LD_VAR 0 1
59760: PPUSH
59761: CALL_OW 255
59765: PPUSH
59766: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59770: LD_ADDR_EXP 58
59774: PUSH
59775: LD_EXP 58
59779: PPUSH
59780: LD_VAR 0 6
59784: PPUSH
59785: LD_EXP 58
59789: PUSH
59790: LD_VAR 0 6
59794: ARRAY
59795: PPUSH
59796: LD_VAR 0 5
59800: PPUSH
59801: CALL_OW 3
59805: PPUSH
59806: CALL_OW 1
59810: ST_TO_ADDR
// end ; end ;
59811: GO 59649
59813: POP
59814: POP
// end ;
59815: LD_VAR 0 4
59819: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59820: LD_INT 0
59822: PPUSH
59823: PPUSH
59824: PPUSH
59825: PPUSH
59826: PPUSH
59827: PPUSH
59828: PPUSH
59829: PPUSH
59830: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59831: LD_VAR 0 1
59835: PPUSH
59836: CALL_OW 264
59840: PUSH
59841: LD_INT 81
59843: EQUAL
59844: NOT
59845: IFTRUE 59860
59847: PUSH
59848: LD_VAR 0 1
59852: PUSH
59853: LD_EXP 57
59857: IN
59858: NOT
59859: OR
59860: IFFALSE 59864
// exit ;
59862: GO 60190
// index := GetElementIndex ( minersList , unit ) ;
59864: LD_ADDR_VAR 0 6
59868: PUSH
59869: LD_EXP 57
59873: PPUSH
59874: LD_VAR 0 1
59878: PPUSH
59879: CALL 16244 0 2
59883: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59884: LD_ADDR_VAR 0 8
59888: PUSH
59889: LD_EXP 59
59893: PUSH
59894: LD_EXP 58
59898: PUSH
59899: LD_VAR 0 6
59903: ARRAY
59904: MINUS
59905: ST_TO_ADDR
// if not minesFreeAmount then
59906: LD_VAR 0 8
59910: NOT
59911: IFFALSE 59915
// exit ;
59913: GO 60190
// tmp := [ ] ;
59915: LD_ADDR_VAR 0 7
59919: PUSH
59920: EMPTY
59921: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59922: LD_ADDR_VAR 0 5
59926: PUSH
59927: DOUBLE
59928: LD_INT 1
59930: DEC
59931: ST_TO_ADDR
59932: LD_VAR 0 8
59936: PUSH
59937: FOR_TO
59938: IFFALSE 60137
// begin _d := rand ( 0 , 5 ) ;
59940: LD_ADDR_VAR 0 11
59944: PUSH
59945: LD_INT 0
59947: PPUSH
59948: LD_INT 5
59950: PPUSH
59951: CALL_OW 12
59955: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59956: LD_ADDR_VAR 0 12
59960: PUSH
59961: LD_INT 2
59963: PPUSH
59964: LD_INT 6
59966: PPUSH
59967: CALL_OW 12
59971: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59972: LD_ADDR_VAR 0 9
59976: PUSH
59977: LD_VAR 0 2
59981: PPUSH
59982: LD_VAR 0 11
59986: PPUSH
59987: LD_VAR 0 12
59991: PPUSH
59992: CALL_OW 272
59996: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59997: LD_ADDR_VAR 0 10
60001: PUSH
60002: LD_VAR 0 3
60006: PPUSH
60007: LD_VAR 0 11
60011: PPUSH
60012: LD_VAR 0 12
60016: PPUSH
60017: CALL_OW 273
60021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60022: LD_VAR 0 9
60026: PPUSH
60027: LD_VAR 0 10
60031: PPUSH
60032: CALL_OW 488
60036: IFFALSE 60060
60038: PUSH
60039: LD_VAR 0 9
60043: PUSH
60044: LD_VAR 0 10
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_VAR 0 7
60057: IN
60058: NOT
60059: AND
60060: IFFALSE 60079
60062: PUSH
60063: LD_VAR 0 9
60067: PPUSH
60068: LD_VAR 0 10
60072: PPUSH
60073: CALL_OW 458
60077: NOT
60078: AND
60079: IFFALSE 60121
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60081: LD_ADDR_VAR 0 7
60085: PUSH
60086: LD_VAR 0 7
60090: PPUSH
60091: LD_VAR 0 7
60095: PUSH
60096: LD_INT 1
60098: PLUS
60099: PPUSH
60100: LD_VAR 0 9
60104: PUSH
60105: LD_VAR 0 10
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PPUSH
60114: CALL_OW 1
60118: ST_TO_ADDR
60119: GO 60135
// i := i - 1 ;
60121: LD_ADDR_VAR 0 5
60125: PUSH
60126: LD_VAR 0 5
60130: PUSH
60131: LD_INT 1
60133: MINUS
60134: ST_TO_ADDR
// end ;
60135: GO 59937
60137: POP
60138: POP
// for i in tmp do
60139: LD_ADDR_VAR 0 5
60143: PUSH
60144: LD_VAR 0 7
60148: PUSH
60149: FOR_IN
60150: IFFALSE 60188
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60152: LD_VAR 0 1
60156: PPUSH
60157: LD_VAR 0 5
60161: PUSH
60162: LD_INT 1
60164: ARRAY
60165: PPUSH
60166: LD_VAR 0 5
60170: PUSH
60171: LD_INT 2
60173: ARRAY
60174: PPUSH
60175: CALL 59181 0 3
60179: NOT
60180: IFFALSE 60186
// exit ;
60182: POP
60183: POP
60184: GO 60190
60186: GO 60149
60188: POP
60189: POP
// end ;
60190: LD_VAR 0 4
60194: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60195: LD_INT 0
60197: PPUSH
60198: PPUSH
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
60203: PPUSH
60204: PPUSH
60205: PPUSH
// if GetClass ( unit ) <> class_sniper then
60206: LD_VAR 0 1
60210: PPUSH
60211: CALL_OW 257
60215: PUSH
60216: LD_INT 5
60218: NONEQUAL
60219: IFFALSE 60223
// exit ;
60221: GO 60693
// dist := 8 ;
60223: LD_ADDR_VAR 0 5
60227: PUSH
60228: LD_INT 8
60230: ST_TO_ADDR
// viewRange := 12 ;
60231: LD_ADDR_VAR 0 8
60235: PUSH
60236: LD_INT 12
60238: ST_TO_ADDR
// side := GetSide ( unit ) ;
60239: LD_ADDR_VAR 0 6
60243: PUSH
60244: LD_VAR 0 1
60248: PPUSH
60249: CALL_OW 255
60253: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60254: LD_INT 61
60256: PPUSH
60257: LD_VAR 0 6
60261: PPUSH
60262: CALL_OW 321
60266: PUSH
60267: LD_INT 2
60269: EQUAL
60270: IFFALSE 60280
// viewRange := 16 ;
60272: LD_ADDR_VAR 0 8
60276: PUSH
60277: LD_INT 16
60279: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60280: LD_VAR 0 1
60284: PPUSH
60285: LD_VAR 0 2
60289: PPUSH
60290: LD_VAR 0 3
60294: PPUSH
60295: CALL_OW 297
60299: PUSH
60300: LD_VAR 0 5
60304: GREATER
60305: IFFALSE 60384
// begin ComMoveXY ( unit , x , y ) ;
60307: LD_VAR 0 1
60311: PPUSH
60312: LD_VAR 0 2
60316: PPUSH
60317: LD_VAR 0 3
60321: PPUSH
60322: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60326: LD_INT 35
60328: PPUSH
60329: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60333: LD_VAR 0 1
60337: PPUSH
60338: LD_VAR 0 2
60342: PPUSH
60343: LD_VAR 0 3
60347: PPUSH
60348: CALL 48300 0 3
60352: NOT
60353: IFFALSE 60357
// exit ;
60355: GO 60693
// until GetDistUnitXY ( unit , x , y ) < dist ;
60357: LD_VAR 0 1
60361: PPUSH
60362: LD_VAR 0 2
60366: PPUSH
60367: LD_VAR 0 3
60371: PPUSH
60372: CALL_OW 297
60376: PUSH
60377: LD_VAR 0 5
60381: LESS
60382: IFFALSE 60326
// end ; ComTurnXY ( unit , x , y ) ;
60384: LD_VAR 0 1
60388: PPUSH
60389: LD_VAR 0 2
60393: PPUSH
60394: LD_VAR 0 3
60398: PPUSH
60399: CALL_OW 118
// repeat if Multiplayer then
60403: LD_OWVAR 4
60407: IFFALSE 60418
// wait ( 35 ) else
60409: LD_INT 35
60411: PPUSH
60412: CALL_OW 67
60416: GO 60425
// wait ( 5 ) ;
60418: LD_INT 5
60420: PPUSH
60421: CALL_OW 67
// _d := GetDir ( unit ) ;
60425: LD_ADDR_VAR 0 11
60429: PUSH
60430: LD_VAR 0 1
60434: PPUSH
60435: CALL_OW 254
60439: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60440: LD_ADDR_VAR 0 7
60444: PUSH
60445: LD_VAR 0 1
60449: PPUSH
60450: CALL_OW 250
60454: PPUSH
60455: LD_VAR 0 1
60459: PPUSH
60460: CALL_OW 251
60464: PPUSH
60465: LD_VAR 0 2
60469: PPUSH
60470: LD_VAR 0 3
60474: PPUSH
60475: CALL 50936 0 4
60479: ST_TO_ADDR
// until dir = _d ;
60480: LD_VAR 0 7
60484: PUSH
60485: LD_VAR 0 11
60489: EQUAL
60490: IFFALSE 60403
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60492: LD_ADDR_VAR 0 9
60496: PUSH
60497: LD_VAR 0 1
60501: PPUSH
60502: CALL_OW 250
60506: PPUSH
60507: LD_VAR 0 7
60511: PPUSH
60512: LD_VAR 0 5
60516: PPUSH
60517: CALL_OW 272
60521: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60522: LD_ADDR_VAR 0 10
60526: PUSH
60527: LD_VAR 0 1
60531: PPUSH
60532: CALL_OW 251
60536: PPUSH
60537: LD_VAR 0 7
60541: PPUSH
60542: LD_VAR 0 5
60546: PPUSH
60547: CALL_OW 273
60551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60552: LD_VAR 0 9
60556: PPUSH
60557: LD_VAR 0 10
60561: PPUSH
60562: CALL_OW 488
60566: NOT
60567: IFFALSE 60571
// exit ;
60569: GO 60693
// ComAnimCustom ( unit , 1 ) ;
60571: LD_VAR 0 1
60575: PPUSH
60576: LD_INT 1
60578: PPUSH
60579: CALL_OW 592
// p := 0 ;
60583: LD_ADDR_VAR 0 12
60587: PUSH
60588: LD_INT 0
60590: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60591: LD_VAR 0 9
60595: PPUSH
60596: LD_VAR 0 10
60600: PPUSH
60601: LD_VAR 0 6
60605: PPUSH
60606: LD_VAR 0 8
60610: PPUSH
60611: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60615: LD_INT 35
60617: PPUSH
60618: CALL_OW 67
// p := Inc ( p ) ;
60622: LD_ADDR_VAR 0 12
60626: PUSH
60627: LD_VAR 0 12
60631: PPUSH
60632: CALL 50892 0 1
60636: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60637: LD_VAR 0 12
60641: PUSH
60642: LD_INT 3
60644: EQUAL
60645: IFTRUE 60659
60647: PUSH
60648: LD_VAR 0 1
60652: PPUSH
60653: CALL_OW 302
60657: NOT
60658: OR
60659: IFTRUE 60672
60661: PUSH
60662: LD_VAR 0 1
60666: PPUSH
60667: CALL_OW 301
60671: OR
60672: IFFALSE 60615
// RemoveSeeing ( _x , _y , side ) ;
60674: LD_VAR 0 9
60678: PPUSH
60679: LD_VAR 0 10
60683: PPUSH
60684: LD_VAR 0 6
60688: PPUSH
60689: CALL_OW 331
// end ;
60693: LD_VAR 0 4
60697: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60698: LD_INT 0
60700: PPUSH
60701: PPUSH
60702: PPUSH
60703: PPUSH
60704: PPUSH
60705: PPUSH
60706: PPUSH
60707: PPUSH
60708: PPUSH
60709: PPUSH
60710: PPUSH
// if not unit then
60711: LD_VAR 0 1
60715: NOT
60716: IFFALSE 60720
// exit ;
60718: GO 60991
// side := GetSide ( unit ) ;
60720: LD_ADDR_VAR 0 3
60724: PUSH
60725: LD_VAR 0 1
60729: PPUSH
60730: CALL_OW 255
60734: ST_TO_ADDR
// x := GetX ( unit ) ;
60735: LD_ADDR_VAR 0 5
60739: PUSH
60740: LD_VAR 0 1
60744: PPUSH
60745: CALL_OW 250
60749: ST_TO_ADDR
// y := GetY ( unit ) ;
60750: LD_ADDR_VAR 0 6
60754: PUSH
60755: LD_VAR 0 1
60759: PPUSH
60760: CALL_OW 251
60764: ST_TO_ADDR
// r := 8 ;
60765: LD_ADDR_VAR 0 4
60769: PUSH
60770: LD_INT 8
60772: ST_TO_ADDR
// if x - r < 0 then
60773: LD_VAR 0 5
60777: PUSH
60778: LD_VAR 0 4
60782: MINUS
60783: PUSH
60784: LD_INT 0
60786: LESS
60787: IFFALSE 60799
// min_x := 0 else
60789: LD_ADDR_VAR 0 7
60793: PUSH
60794: LD_INT 0
60796: ST_TO_ADDR
60797: GO 60815
// min_x := x - r ;
60799: LD_ADDR_VAR 0 7
60803: PUSH
60804: LD_VAR 0 5
60808: PUSH
60809: LD_VAR 0 4
60813: MINUS
60814: ST_TO_ADDR
// if y - r < 0 then
60815: LD_VAR 0 6
60819: PUSH
60820: LD_VAR 0 4
60824: MINUS
60825: PUSH
60826: LD_INT 0
60828: LESS
60829: IFFALSE 60841
// min_y := 0 else
60831: LD_ADDR_VAR 0 8
60835: PUSH
60836: LD_INT 0
60838: ST_TO_ADDR
60839: GO 60857
// min_y := y - r ;
60841: LD_ADDR_VAR 0 8
60845: PUSH
60846: LD_VAR 0 6
60850: PUSH
60851: LD_VAR 0 4
60855: MINUS
60856: ST_TO_ADDR
// max_x := x + r ;
60857: LD_ADDR_VAR 0 9
60861: PUSH
60862: LD_VAR 0 5
60866: PUSH
60867: LD_VAR 0 4
60871: PLUS
60872: ST_TO_ADDR
// max_y := y + r ;
60873: LD_ADDR_VAR 0 10
60877: PUSH
60878: LD_VAR 0 6
60882: PUSH
60883: LD_VAR 0 4
60887: PLUS
60888: ST_TO_ADDR
// for _x = min_x to max_x do
60889: LD_ADDR_VAR 0 11
60893: PUSH
60894: DOUBLE
60895: LD_VAR 0 7
60899: DEC
60900: ST_TO_ADDR
60901: LD_VAR 0 9
60905: PUSH
60906: FOR_TO
60907: IFFALSE 60989
// for _y = min_y to max_y do
60909: LD_ADDR_VAR 0 12
60913: PUSH
60914: DOUBLE
60915: LD_VAR 0 8
60919: DEC
60920: ST_TO_ADDR
60921: LD_VAR 0 10
60925: PUSH
60926: FOR_TO
60927: IFFALSE 60985
// begin if not ValidHex ( _x , _y ) then
60929: LD_VAR 0 11
60933: PPUSH
60934: LD_VAR 0 12
60938: PPUSH
60939: CALL_OW 488
60943: NOT
60944: IFFALSE 60948
// continue ;
60946: GO 60926
// if MineAtPos ( _x , _y ) then
60948: LD_VAR 0 11
60952: PPUSH
60953: LD_VAR 0 12
60957: PPUSH
60958: CALL_OW 458
60962: IFFALSE 60983
// ViewMineAtPos ( _x , _y , side ) ;
60964: LD_VAR 0 11
60968: PPUSH
60969: LD_VAR 0 12
60973: PPUSH
60974: LD_VAR 0 3
60978: PPUSH
60979: CALL_OW 457
// end ;
60983: GO 60926
60985: POP
60986: POP
60987: GO 60906
60989: POP
60990: POP
// end ;
60991: LD_VAR 0 2
60995: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
60996: LD_INT 0
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
// if not units then
61005: LD_VAR 0 1
61009: NOT
61010: IFFALSE 61014
// exit ;
61012: GO 61478
// scaners := [ ] ;
61014: LD_ADDR_VAR 0 6
61018: PUSH
61019: EMPTY
61020: ST_TO_ADDR
// for i in units do
61021: LD_ADDR_VAR 0 3
61025: PUSH
61026: LD_VAR 0 1
61030: PUSH
61031: FOR_IN
61032: IFFALSE 61189
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
61034: LD_VAR 0 3
61038: PPUSH
61039: CALL_OW 264
61043: PUSH
61044: LD_INT 11
61046: NONEQUAL
61047: IFTRUE 61061
61049: PUSH
61050: LD_VAR 0 3
61054: PPUSH
61055: CALL_OW 302
61059: NOT
61060: OR
61061: IFTRUE 61078
61063: PUSH
61064: LD_VAR 0 3
61068: PPUSH
61069: CALL_OW 110
61073: PUSH
61074: LD_INT 502
61076: EQUAL
61077: OR
61078: IFFALSE 61082
// continue ;
61080: GO 61031
// ComStop ( i ) ;
61082: LD_VAR 0 3
61086: PPUSH
61087: CALL_OW 141
// x := GetX ( i ) ;
61091: LD_ADDR_VAR 0 4
61095: PUSH
61096: LD_VAR 0 3
61100: PPUSH
61101: CALL_OW 250
61105: ST_TO_ADDR
// y := GetY ( i ) ;
61106: LD_ADDR_VAR 0 5
61110: PUSH
61111: LD_VAR 0 3
61115: PPUSH
61116: CALL_OW 251
61120: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61121: LD_VAR 0 3
61125: PPUSH
61126: CALL_OW 255
61130: PUSH
61131: LD_OWVAR 2
61135: EQUAL
61136: IFFALSE 61155
// PlaySoundXY ( x , y , mineDetector ) ;
61138: LD_VAR 0 4
61142: PPUSH
61143: LD_VAR 0 5
61147: PPUSH
61148: LD_STRING mineDetector
61150: PPUSH
61151: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61155: LD_ADDR_VAR 0 6
61159: PUSH
61160: LD_VAR 0 6
61164: PPUSH
61165: LD_VAR 0 3
61169: PPUSH
61170: CALL 49519 0 2
61174: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61175: LD_VAR 0 3
61179: PPUSH
61180: LD_INT 502
61182: PPUSH
61183: CALL_OW 109
// end ;
61187: GO 61031
61189: POP
61190: POP
// if not scaners then
61191: LD_VAR 0 6
61195: NOT
61196: IFFALSE 61200
// exit ;
61198: GO 61478
// wait ( 3 ) ;
61200: LD_INT 3
61202: PPUSH
61203: CALL_OW 67
// timer := 6 ;
61207: LD_ADDR_VAR 0 7
61211: PUSH
61212: LD_INT 6
61214: ST_TO_ADDR
// repeat for i in scaners do
61215: LD_ADDR_VAR 0 3
61219: PUSH
61220: LD_VAR 0 6
61224: PUSH
61225: FOR_IN
61226: IFFALSE 61376
// begin side := GetSide ( i ) ;
61228: LD_ADDR_VAR 0 8
61232: PUSH
61233: LD_VAR 0 3
61237: PPUSH
61238: CALL_OW 255
61242: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61243: LD_VAR 0 3
61247: PPUSH
61248: CALL_OW 302
61252: NOT
61253: IFTRUE 61266
61255: PUSH
61256: LD_VAR 0 3
61260: PPUSH
61261: CALL_OW 314
61265: OR
61266: IFTRUE 61297
61268: PUSH
61269: LD_VAR 0 3
61273: PPUSH
61274: CALL_OW 263
61278: PUSH
61279: LD_INT 1
61281: EQUAL
61282: IFFALSE 61296
61284: PUSH
61285: LD_VAR 0 3
61289: PPUSH
61290: CALL_OW 311
61294: NOT
61295: AND
61296: OR
61297: IFFALSE 61341
// begin SetUnitDisplayNumber ( i , 0 ) ;
61299: LD_VAR 0 3
61303: PPUSH
61304: LD_INT 0
61306: PPUSH
61307: CALL_OW 505
// SetTag ( i , 0 ) ;
61311: LD_VAR 0 3
61315: PPUSH
61316: LD_INT 0
61318: PPUSH
61319: CALL_OW 109
// scaners := scaners diff i ;
61323: LD_ADDR_VAR 0 6
61327: PUSH
61328: LD_VAR 0 6
61332: PUSH
61333: LD_VAR 0 3
61337: DIFF
61338: ST_TO_ADDR
// continue ;
61339: GO 61225
// end ; if side in [ your_side , 9 ] then
61341: LD_VAR 0 8
61345: PUSH
61346: LD_OWVAR 2
61350: PUSH
61351: LD_INT 9
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: IN
61358: IFFALSE 61374
// SetUnitDisplayNumber ( i , timer ) ;
61360: LD_VAR 0 3
61364: PPUSH
61365: LD_VAR 0 7
61369: PPUSH
61370: CALL_OW 505
// end ;
61374: GO 61225
61376: POP
61377: POP
// if not scaners then
61378: LD_VAR 0 6
61382: NOT
61383: IFFALSE 61387
// exit ;
61385: GO 61478
// timer := Dec ( timer ) ;
61387: LD_ADDR_VAR 0 7
61391: PUSH
61392: LD_VAR 0 7
61396: PPUSH
61397: CALL 50914 0 1
61401: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61402: LD_INT 35
61404: PPUSH
61405: CALL_OW 67
// until timer = 0 ;
61409: LD_VAR 0 7
61413: PUSH
61414: LD_INT 0
61416: EQUAL
61417: IFFALSE 61215
// if not scaners then
61419: LD_VAR 0 6
61423: NOT
61424: IFFALSE 61428
// exit ;
61426: GO 61478
// for i in scaners do
61428: LD_ADDR_VAR 0 3
61432: PUSH
61433: LD_VAR 0 6
61437: PUSH
61438: FOR_IN
61439: IFFALSE 61476
// begin SetUnitDisplayNumber ( i , 0 ) ;
61441: LD_VAR 0 3
61445: PPUSH
61446: LD_INT 0
61448: PPUSH
61449: CALL_OW 505
// SetTag ( i , 0 ) ;
61453: LD_VAR 0 3
61457: PPUSH
61458: LD_INT 0
61460: PPUSH
61461: CALL_OW 109
// RevealDetectorMine ( i ) ;
61465: LD_VAR 0 3
61469: PPUSH
61470: CALL 60698 0 1
// end ;
61474: GO 61438
61476: POP
61477: POP
// end ;
61478: LD_VAR 0 2
61482: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61483: LD_INT 0
61485: PPUSH
// if p1 = mine_detector_mode then
61486: LD_VAR 0 2
61490: PUSH
61491: LD_INT 103
61493: EQUAL
61494: IFFALSE 61505
// DetectMine ( units ) ;
61496: LD_VAR 0 1
61500: PPUSH
61501: CALL 60996 0 1
// end ; end_of_file
61505: LD_VAR 0 7
61509: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61510: LD_EXP 39
61514: IFFALSE 61855
61516: GO 61518
61518: DISABLE
61519: LD_INT 0
61521: PPUSH
61522: PPUSH
61523: PPUSH
// begin mpKingPoints := [ ] ;
61524: LD_ADDR_EXP 60
61528: PUSH
61529: EMPTY
61530: ST_TO_ADDR
// if mpTeamGame then
61531: LD_EXP 11
61535: IFFALSE 61589
// begin for i := 1 to Count ( mpTeams ) do
61537: LD_ADDR_VAR 0 1
61541: PUSH
61542: DOUBLE
61543: LD_INT 1
61545: DEC
61546: ST_TO_ADDR
61547: LD_EXP 10
61551: PPUSH
61552: CALL 13543 0 1
61556: PUSH
61557: FOR_TO
61558: IFFALSE 61585
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61560: LD_ADDR_EXP 60
61564: PUSH
61565: LD_EXP 60
61569: PPUSH
61570: LD_VAR 0 1
61574: PPUSH
61575: LD_INT 0
61577: PPUSH
61578: CALL_OW 1
61582: ST_TO_ADDR
61583: GO 61557
61585: POP
61586: POP
// end else
61587: GO 61632
// begin for i := 1 to 8 do
61589: LD_ADDR_VAR 0 1
61593: PUSH
61594: DOUBLE
61595: LD_INT 1
61597: DEC
61598: ST_TO_ADDR
61599: LD_INT 8
61601: PUSH
61602: FOR_TO
61603: IFFALSE 61630
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61605: LD_ADDR_EXP 60
61609: PUSH
61610: LD_EXP 60
61614: PPUSH
61615: LD_VAR 0 1
61619: PPUSH
61620: LD_INT 0
61622: PPUSH
61623: CALL_OW 1
61627: ST_TO_ADDR
61628: GO 61602
61630: POP
61631: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61632: LD_ADDR_VAR 0 3
61636: PUSH
61637: LD_EXP 2
61641: PPUSH
61642: LD_INT 0
61644: PPUSH
61645: CALL_OW 517
61649: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61650: LD_ADDR_VAR 0 1
61654: PUSH
61655: DOUBLE
61656: LD_INT 1
61658: DEC
61659: ST_TO_ADDR
61660: LD_VAR 0 3
61664: PUSH
61665: LD_INT 1
61667: ARRAY
61668: PUSH
61669: FOR_TO
61670: IFFALSE 61737
// for j := 1 to 8 do
61672: LD_ADDR_VAR 0 2
61676: PUSH
61677: DOUBLE
61678: LD_INT 1
61680: DEC
61681: ST_TO_ADDR
61682: LD_INT 8
61684: PUSH
61685: FOR_TO
61686: IFFALSE 61733
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61688: LD_VAR 0 3
61692: PUSH
61693: LD_INT 1
61695: ARRAY
61696: PUSH
61697: LD_VAR 0 1
61701: ARRAY
61702: PPUSH
61703: LD_VAR 0 3
61707: PUSH
61708: LD_INT 2
61710: ARRAY
61711: PUSH
61712: LD_VAR 0 1
61716: ARRAY
61717: PPUSH
61718: LD_VAR 0 2
61722: PPUSH
61723: LD_INT 12
61725: NEG
61726: PPUSH
61727: CALL_OW 330
61731: GO 61685
61733: POP
61734: POP
61735: GO 61669
61737: POP
61738: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61739: LD_EXP 34
61743: PPUSH
61744: LD_INT 1
61746: PPUSH
61747: CALL_OW 424
// UpdateCounter ;
61751: CALL 62361 0 0
// repeat wait ( 0 0$1 ) ;
61755: LD_INT 35
61757: PPUSH
61758: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61762: LD_ADDR_VAR 0 3
61766: PUSH
61767: LD_EXP 34
61771: PPUSH
61772: LD_INT 3
61774: PUSH
61775: LD_INT 57
61777: PUSH
61778: EMPTY
61779: LIST
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 50
61787: PUSH
61788: EMPTY
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: LD_INT 30
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 30
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: PPUSH
61824: CALL_OW 70
61828: ST_TO_ADDR
// if not tmp then
61829: LD_VAR 0 3
61833: NOT
61834: IFFALSE 61838
// continue ;
61836: GO 61755
// AddPoints ( tmp ) ;
61838: LD_VAR 0 3
61842: PPUSH
61843: CALL 62039 0 1
// UpdateCounter ;
61847: CALL 62361 0 0
// until false ;
61851: LD_INT 0
61853: IFFALSE 61755
// end ;
61855: PPOPN 3
61857: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61858: LD_EXP 39
61862: IFFALSE 61870
61864: PUSH
61865: LD_EXP 37
61869: AND
61870: IFFALSE 62036
61872: GO 61874
61874: DISABLE
61875: LD_INT 0
61877: PPUSH
61878: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61879: LD_ADDR_VAR 0 2
61883: PUSH
61884: LD_EXP 2
61888: PPUSH
61889: LD_INT 0
61891: PPUSH
61892: CALL_OW 517
61896: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61897: LD_ADDR_VAR 0 1
61901: PUSH
61902: DOUBLE
61903: LD_INT 1
61905: DEC
61906: ST_TO_ADDR
61907: LD_VAR 0 2
61911: PUSH
61912: LD_INT 1
61914: ARRAY
61915: PUSH
61916: FOR_TO
61917: IFFALSE 61958
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61919: LD_VAR 0 2
61923: PUSH
61924: LD_INT 1
61926: ARRAY
61927: PUSH
61928: LD_VAR 0 1
61932: ARRAY
61933: PPUSH
61934: LD_VAR 0 2
61938: PUSH
61939: LD_INT 2
61941: ARRAY
61942: PUSH
61943: LD_VAR 0 1
61947: ARRAY
61948: PPUSH
61949: LD_INT 125
61951: PPUSH
61952: CALL_OW 495
61956: GO 61916
61958: POP
61959: POP
// repeat wait ( mpEmissions ) ;
61960: LD_EXP 37
61964: PPUSH
61965: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61969: LD_ADDR_VAR 0 1
61973: PUSH
61974: DOUBLE
61975: LD_INT 1
61977: DEC
61978: ST_TO_ADDR
61979: LD_VAR 0 2
61983: PUSH
61984: LD_INT 1
61986: ARRAY
61987: PUSH
61988: FOR_TO
61989: IFFALSE 62030
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61991: LD_VAR 0 2
61995: PUSH
61996: LD_INT 1
61998: ARRAY
61999: PUSH
62000: LD_VAR 0 1
62004: ARRAY
62005: PPUSH
62006: LD_VAR 0 2
62010: PUSH
62011: LD_INT 2
62013: ARRAY
62014: PUSH
62015: LD_VAR 0 1
62019: ARRAY
62020: PPUSH
62021: LD_INT 15
62023: PPUSH
62024: CALL_OW 495
62028: GO 61988
62030: POP
62031: POP
// until false ;
62032: LD_INT 0
62034: IFFALSE 61960
// end ;
62036: PPOPN 2
62038: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
62039: LD_INT 0
62041: PPUSH
62042: PPUSH
62043: PPUSH
62044: PPUSH
62045: PPUSH
// if mpTeamGame then
62046: LD_EXP 11
62050: IFFALSE 62247
// begin first := depots [ 1 ] ;
62052: LD_ADDR_VAR 0 4
62056: PUSH
62057: LD_VAR 0 1
62061: PUSH
62062: LD_INT 1
62064: ARRAY
62065: ST_TO_ADDR
// side := GetSide ( first ) ;
62066: LD_ADDR_VAR 0 6
62070: PUSH
62071: LD_VAR 0 4
62075: PPUSH
62076: CALL_OW 255
62080: ST_TO_ADDR
// for i := 1 to mpTeams do
62081: LD_ADDR_VAR 0 3
62085: PUSH
62086: DOUBLE
62087: LD_INT 1
62089: DEC
62090: ST_TO_ADDR
62091: LD_EXP 10
62095: PUSH
62096: FOR_TO
62097: IFFALSE 62131
// if side in mpTeams [ i ] then
62099: LD_VAR 0 6
62103: PUSH
62104: LD_EXP 10
62108: PUSH
62109: LD_VAR 0 3
62113: ARRAY
62114: IN
62115: IFFALSE 62129
// begin team := i ;
62117: LD_ADDR_VAR 0 5
62121: PUSH
62122: LD_VAR 0 3
62126: ST_TO_ADDR
// break ;
62127: GO 62131
// end ;
62129: GO 62096
62131: POP
62132: POP
// if not team then
62133: LD_VAR 0 5
62137: NOT
62138: IFFALSE 62142
// exit ;
62140: GO 62356
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62142: LD_EXP 34
62146: PPUSH
62147: LD_INT 81
62149: PUSH
62150: LD_VAR 0 6
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PPUSH
62159: CALL_OW 70
62163: IFFALSE 62167
// exit ;
62165: GO 62356
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62167: LD_ADDR_EXP 60
62171: PUSH
62172: LD_EXP 60
62176: PPUSH
62177: LD_VAR 0 5
62181: PPUSH
62182: LD_EXP 60
62186: PUSH
62187: LD_VAR 0 5
62191: ARRAY
62192: PUSH
62193: LD_INT 1
62195: PLUS
62196: PPUSH
62197: CALL_OW 1
62201: ST_TO_ADDR
// for i in mpTeams [ team ] do
62202: LD_ADDR_VAR 0 3
62206: PUSH
62207: LD_EXP 10
62211: PUSH
62212: LD_VAR 0 5
62216: ARRAY
62217: PUSH
62218: FOR_IN
62219: IFFALSE 62243
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62221: LD_VAR 0 3
62225: PPUSH
62226: LD_EXP 60
62230: PUSH
62231: LD_VAR 0 5
62235: ARRAY
62236: PPUSH
62237: CALL_OW 506
62241: GO 62218
62243: POP
62244: POP
// end else
62245: GO 62356
// begin first := depots [ 1 ] ;
62247: LD_ADDR_VAR 0 4
62251: PUSH
62252: LD_VAR 0 1
62256: PUSH
62257: LD_INT 1
62259: ARRAY
62260: ST_TO_ADDR
// side := GetSide ( first ) ;
62261: LD_ADDR_VAR 0 6
62265: PUSH
62266: LD_VAR 0 4
62270: PPUSH
62271: CALL_OW 255
62275: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62276: LD_EXP 34
62280: PPUSH
62281: LD_INT 81
62283: PUSH
62284: LD_VAR 0 6
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PPUSH
62293: CALL_OW 70
62297: IFFALSE 62301
// exit ;
62299: GO 62356
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62301: LD_ADDR_EXP 60
62305: PUSH
62306: LD_EXP 60
62310: PPUSH
62311: LD_VAR 0 6
62315: PPUSH
62316: LD_EXP 60
62320: PUSH
62321: LD_VAR 0 6
62325: ARRAY
62326: PUSH
62327: LD_INT 1
62329: PLUS
62330: PPUSH
62331: CALL_OW 1
62335: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62336: LD_VAR 0 6
62340: PPUSH
62341: LD_EXP 60
62345: PUSH
62346: LD_VAR 0 6
62350: ARRAY
62351: PPUSH
62352: CALL_OW 506
// end ; end ;
62356: LD_VAR 0 2
62360: RET
// function UpdateCounter ; var i ; begin
62361: LD_INT 0
62363: PPUSH
62364: PPUSH
// result := [ ] ;
62365: LD_ADDR_VAR 0 1
62369: PUSH
62370: EMPTY
62371: ST_TO_ADDR
// if mpTeamGame then
62372: LD_EXP 11
62376: IFFALSE 62443
// begin for i := 1 to mpTeams do
62378: LD_ADDR_VAR 0 2
62382: PUSH
62383: DOUBLE
62384: LD_INT 1
62386: DEC
62387: ST_TO_ADDR
62388: LD_EXP 10
62392: PUSH
62393: FOR_TO
62394: IFFALSE 62439
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62396: LD_ADDR_VAR 0 1
62400: PUSH
62401: LD_VAR 0 1
62405: PUSH
62406: LD_STRING #KingoftheHill-Team
62408: PUSH
62409: LD_VAR 0 2
62413: PUSH
62414: LD_EXP 60
62418: PUSH
62419: LD_VAR 0 2
62423: ARRAY
62424: PUSH
62425: LD_EXP 35
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: ADD
62436: ST_TO_ADDR
62437: GO 62393
62439: POP
62440: POP
// end else
62441: GO 62516
// begin for i := 1 to 8 do
62443: LD_ADDR_VAR 0 2
62447: PUSH
62448: DOUBLE
62449: LD_INT 1
62451: DEC
62452: ST_TO_ADDR
62453: LD_INT 8
62455: PUSH
62456: FOR_TO
62457: IFFALSE 62514
// if mpSidePositions [ i ] then
62459: LD_EXP 7
62463: PUSH
62464: LD_VAR 0 2
62468: ARRAY
62469: IFFALSE 62512
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62471: LD_ADDR_VAR 0 1
62475: PUSH
62476: LD_VAR 0 1
62480: PUSH
62481: LD_STRING #KingoftheHill-Player
62483: PUSH
62484: LD_VAR 0 2
62488: PUSH
62489: LD_EXP 60
62493: PUSH
62494: LD_VAR 0 2
62498: ARRAY
62499: PUSH
62500: LD_EXP 35
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: ADD
62511: ST_TO_ADDR
62512: GO 62456
62514: POP
62515: POP
// end ; mpDisplayStrings := result ;
62516: LD_ADDR_EXP 38
62520: PUSH
62521: LD_VAR 0 1
62525: ST_TO_ADDR
// end ;
62526: LD_VAR 0 1
62530: RET
// export function HowMuchPointsKing ( side ) ; begin
62531: LD_INT 0
62533: PPUSH
// result := HowMuchPoints ( side ) ;
62534: LD_ADDR_VAR 0 2
62538: PUSH
62539: LD_VAR 0 1
62543: PPUSH
62544: CALL 62554 0 1
62548: ST_TO_ADDR
// end ;
62549: LD_VAR 0 2
62553: RET
// function HowMuchPoints ( side ) ; var i ; begin
62554: LD_INT 0
62556: PPUSH
62557: PPUSH
// if mpTeamGame then
62558: LD_EXP 11
62562: IFFALSE 62631
// begin for i := 1 to Count ( mpTeams ) do
62564: LD_ADDR_VAR 0 3
62568: PUSH
62569: DOUBLE
62570: LD_INT 1
62572: DEC
62573: ST_TO_ADDR
62574: LD_EXP 10
62578: PPUSH
62579: CALL 13543 0 1
62583: PUSH
62584: FOR_TO
62585: IFFALSE 62627
// begin if side in mpTeams [ i ] then
62587: LD_VAR 0 1
62591: PUSH
62592: LD_EXP 10
62596: PUSH
62597: LD_VAR 0 3
62601: ARRAY
62602: IN
62603: IFFALSE 62625
// begin result := mpKingPoints [ i ] ;
62605: LD_ADDR_VAR 0 2
62609: PUSH
62610: LD_EXP 60
62614: PUSH
62615: LD_VAR 0 3
62619: ARRAY
62620: ST_TO_ADDR
// exit ;
62621: POP
62622: POP
62623: GO 62647
// end ; end ;
62625: GO 62584
62627: POP
62628: POP
// end else
62629: GO 62647
// result := mpKingPoints [ side ] ;
62631: LD_ADDR_VAR 0 2
62635: PUSH
62636: LD_EXP 60
62640: PUSH
62641: LD_VAR 0 1
62645: ARRAY
62646: ST_TO_ADDR
// end ;
62647: LD_VAR 0 2
62651: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62652: LD_EXP 39
62656: IFFALSE 62664
62658: PUSH
62659: CALL 63076 0 0
62663: AND
62664: IFFALSE 62672
62666: PUSH
62667: LD_OWVAR 4
62671: AND
62672: IFFALSE 62925
62674: GO 62676
62676: DISABLE
62677: LD_INT 0
62679: PPUSH
62680: PPUSH
// begin canWin := false ;
62681: LD_ADDR_VAR 0 2
62685: PUSH
62686: LD_INT 0
62688: ST_TO_ADDR
// if not HasPower ( your_side ) then
62689: LD_OWVAR 2
62693: PPUSH
62694: CALL 63118 0 1
62698: NOT
62699: IFFALSE 62710
// begin Multiplayer_Loose_Message ;
62701: CALL_OW 521
// enable ( mpLose ) ;
62705: LD_INT 102
62707: ENABLE_MARKED
// end else
62708: GO 62925
// begin if not EnemiesInGame then
62710: CALL 62928 0 0
62714: NOT
62715: IFFALSE 62722
// begin enable ( mpWin ) ;
62717: LD_INT 101
62719: ENABLE_MARKED
// exit ;
62720: GO 62925
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62722: LD_ADDR_VAR 0 2
62726: PUSH
62727: LD_OWVAR 2
62731: PPUSH
62732: CALL 62554 0 1
62736: PUSH
62737: LD_EXP 35
62741: GREATEREQUAL
62742: IFFALSE 62755
62744: PUSH
62745: LD_OWVAR 2
62749: PPUSH
62750: CALL 63118 0 1
62754: AND
62755: ST_TO_ADDR
// for i := 1 to 8 do
62756: LD_ADDR_VAR 0 1
62760: PUSH
62761: DOUBLE
62762: LD_INT 1
62764: DEC
62765: ST_TO_ADDR
62766: LD_INT 8
62768: PUSH
62769: FOR_TO
62770: IFFALSE 62911
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62772: LD_EXP 7
62776: PUSH
62777: LD_VAR 0 1
62781: ARRAY
62782: IFFALSE 62795
62784: PUSH
62785: LD_VAR 0 1
62789: PPUSH
62790: CALL_OW 108
62794: AND
62795: IFFALSE 62809
62797: PUSH
62798: LD_VAR 0 1
62802: PUSH
62803: LD_OWVAR 2
62807: NONEQUAL
62808: AND
62809: IFFALSE 62909
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62811: LD_EXP 8
62815: PUSH
62816: LD_VAR 0 1
62820: ARRAY
62821: NOT
62822: IFTRUE 62870
62824: PUSH
62825: LD_EXP 8
62829: PUSH
62830: LD_VAR 0 1
62834: ARRAY
62835: PUSH
62836: LD_EXP 8
62840: PUSH
62841: LD_OWVAR 2
62845: ARRAY
62846: NONEQUAL
62847: IFFALSE 62869
62849: PUSH
62850: LD_OWVAR 2
62854: PPUSH
62855: LD_VAR 0 1
62859: PPUSH
62860: CALL_OW 81
62864: PUSH
62865: LD_INT 1
62867: NONEQUAL
62868: AND
62869: OR
62870: IFFALSE 62909
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62872: LD_VAR 0 1
62876: PPUSH
62877: CALL 62554 0 1
62881: PUSH
62882: LD_EXP 35
62886: GREATEREQUAL
62887: IFFALSE 62900
62889: PUSH
62890: LD_VAR 0 1
62894: PPUSH
62895: CALL 63118 0 1
62899: AND
62900: IFFALSE 62909
// begin enable ( mpLose ) ;
62902: LD_INT 102
62904: ENABLE_MARKED
// exit ;
62905: POP
62906: POP
62907: GO 62925
// end ;
62909: GO 62769
62911: POP
62912: POP
// if canWin then
62913: LD_VAR 0 2
62917: IFFALSE 62924
// enable ( mpWin ) else
62919: LD_INT 101
62921: ENABLE_MARKED
62922: GO 62925
// enable ;
62924: ENABLE
// end ; end ;
62925: PPOPN 2
62927: END
// function EnemiesInGame ; var i ; begin
62928: LD_INT 0
62930: PPUSH
62931: PPUSH
// result := false ;
62932: LD_ADDR_VAR 0 1
62936: PUSH
62937: LD_INT 0
62939: ST_TO_ADDR
// for i := 1 to 8 do
62940: LD_ADDR_VAR 0 2
62944: PUSH
62945: DOUBLE
62946: LD_INT 1
62948: DEC
62949: ST_TO_ADDR
62950: LD_INT 8
62952: PUSH
62953: FOR_TO
62954: IFFALSE 63069
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62956: LD_VAR 0 2
62960: PUSH
62961: LD_OWVAR 2
62965: NONEQUAL
62966: IFFALSE 62979
62968: PUSH
62969: LD_VAR 0 2
62973: PPUSH
62974: CALL 63118 0 1
62978: AND
62979: IFFALSE 62992
62981: PUSH
62982: LD_VAR 0 2
62986: PPUSH
62987: CALL_OW 108
62991: AND
62992: IFFALSE 63067
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62994: LD_EXP 8
62998: PUSH
62999: LD_VAR 0 2
63003: ARRAY
63004: NOT
63005: IFTRUE 63053
63007: PUSH
63008: LD_EXP 8
63012: PUSH
63013: LD_VAR 0 2
63017: ARRAY
63018: PUSH
63019: LD_EXP 8
63023: PUSH
63024: LD_OWVAR 2
63028: ARRAY
63029: NONEQUAL
63030: IFFALSE 63052
63032: PUSH
63033: LD_OWVAR 2
63037: PPUSH
63038: LD_VAR 0 2
63042: PPUSH
63043: CALL_OW 81
63047: PUSH
63048: LD_INT 1
63050: NONEQUAL
63051: AND
63052: OR
63053: IFFALSE 63067
// begin result := true ;
63055: LD_ADDR_VAR 0 1
63059: PUSH
63060: LD_INT 1
63062: ST_TO_ADDR
// exit ;
63063: POP
63064: POP
63065: GO 63071
// end ;
63067: GO 62953
63069: POP
63070: POP
// end ;
63071: LD_VAR 0 1
63075: RET
// function CanWinLoose ; begin
63076: LD_INT 0
63078: PPUSH
// result := true ;
63079: LD_ADDR_VAR 0 1
63083: PUSH
63084: LD_INT 1
63086: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63087: CALL_OW 531
63091: IFFALSE 63103
63093: PUSH
63094: CALL_OW 519
63098: PUSH
63099: LD_INT 1
63101: GREATER
63102: AND
63103: IFFALSE 63113
// result := false ;
63105: LD_ADDR_VAR 0 1
63109: PUSH
63110: LD_INT 0
63112: ST_TO_ADDR
// end ;
63113: LD_VAR 0 1
63117: RET
// function HasPower ( i ) ; begin
63118: LD_INT 0
63120: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63121: LD_ADDR_VAR 0 2
63125: PUSH
63126: LD_INT 22
63128: PUSH
63129: LD_VAR 0 1
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 2
63140: PUSH
63141: LD_INT 21
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 33
63153: PUSH
63154: LD_INT 3
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 33
63163: PUSH
63164: LD_INT 5
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PPUSH
63181: CALL_OW 69
63185: ST_TO_ADDR
// end ; end_of_file
63186: LD_VAR 0 2
63190: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63191: PPOPN 6
63193: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63194: LD_INT 0
63196: PPUSH
// begin if not units then
63197: LD_VAR 0 1
63201: NOT
63202: IFFALSE 63206
// exit ;
63204: GO 63240
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63206: LD_VAR 0 1
63210: PPUSH
63211: LD_VAR 0 2
63215: PPUSH
63216: LD_VAR 0 3
63220: PPUSH
63221: LD_VAR 0 4
63225: PPUSH
63226: LD_VAR 0 5
63230: PPUSH
63231: LD_VAR 0 6
63235: PPUSH
63236: CALL 61483 0 6
// end ;
63240: PPOPN 7
63242: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63243: LD_EXP 3
63247: PUSH
63248: LD_INT 4
63250: EQUAL
63251: IFFALSE 63287
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63253: LD_STRING setGameDifficulty(
63255: PUSH
63256: LD_OWVAR 67
63260: STR
63261: PUSH
63262: LD_STRING )
63264: STR
63265: PPUSH
63266: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63270: LD_STRING displayDifficulty(
63272: PUSH
63273: LD_OWVAR 67
63277: STR
63278: PUSH
63279: LD_STRING )
63281: STR
63282: PPUSH
63283: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63287: CALL 63316 0 0
// end ; end_of_file
63291: PPOPN 1
63293: END
// every 0 0$1 do
63294: GO 63296
63296: DISABLE
// begin enable ;
63297: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63298: LD_STRING updateTimer(
63300: PUSH
63301: LD_OWVAR 1
63305: STR
63306: PUSH
63307: LD_STRING );
63309: STR
63310: PPUSH
63311: CALL_OW 559
// end ;
63315: END
// export function SOS_MapStart ( ) ; begin
63316: LD_INT 0
63318: PPUSH
// UpdateFactoryWaypoints ( ) ;
63319: CALL 64250 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63323: CALL 64502 0 0
// ParseMultiDataToLua ( ) ;
63327: CALL 64649 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63331: LD_STRING setSpecLogoNumber(
63333: PUSH
63334: LD_INT 2
63336: STR
63337: PUSH
63338: LD_STRING ,
63340: STR
63341: PUSH
63342: LD_INT 1
63344: STR
63345: PUSH
63346: LD_STRING )
63348: STR
63349: PPUSH
63350: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63354: LD_STRING setSpecLogoNumber(
63356: PUSH
63357: LD_INT 3
63359: STR
63360: PUSH
63361: LD_STRING ,
63363: STR
63364: PUSH
63365: LD_INT 2
63367: STR
63368: PUSH
63369: LD_STRING )
63371: STR
63372: PPUSH
63373: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63377: LD_STRING setSpecLogoNumber(
63379: PUSH
63380: LD_INT 4
63382: STR
63383: PUSH
63384: LD_STRING ,
63386: STR
63387: PUSH
63388: LD_INT 3
63390: STR
63391: PUSH
63392: LD_STRING )
63394: STR
63395: PPUSH
63396: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63400: LD_STRING setSpecLogoNumber(
63402: PUSH
63403: LD_INT 5
63405: STR
63406: PUSH
63407: LD_STRING ,
63409: STR
63410: PUSH
63411: LD_INT 4
63413: STR
63414: PUSH
63415: LD_STRING )
63417: STR
63418: PPUSH
63419: CALL_OW 559
// end ;
63423: LD_VAR 0 1
63427: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63428: LD_INT 0
63430: PPUSH
63431: PPUSH
63432: PPUSH
63433: PPUSH
63434: PPUSH
63435: PPUSH
63436: PPUSH
63437: PPUSH
63438: PPUSH
// for i := 1 to 8 do
63439: LD_ADDR_VAR 0 2
63443: PUSH
63444: DOUBLE
63445: LD_INT 1
63447: DEC
63448: ST_TO_ADDR
63449: LD_INT 8
63451: PUSH
63452: FOR_TO
63453: IFFALSE 63838
// begin if mpSidePositions [ i ] then
63455: LD_EXP 7
63459: PUSH
63460: LD_VAR 0 2
63464: ARRAY
63465: IFFALSE 63836
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63467: LD_ADDR_VAR 0 7
63471: PUSH
63472: LD_INT 22
63474: PUSH
63475: LD_VAR 0 2
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 21
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PPUSH
63498: CALL_OW 69
63502: PPUSH
63503: CALL 13543 0 1
63507: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63508: LD_ADDR_VAR 0 9
63512: PUSH
63513: LD_INT 22
63515: PUSH
63516: LD_VAR 0 2
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 2
63527: PUSH
63528: LD_INT 30
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 30
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: LIST
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PPUSH
63557: CALL_OW 69
63561: ST_TO_ADDR
// crates := 0 ;
63562: LD_ADDR_VAR 0 4
63566: PUSH
63567: LD_INT 0
63569: ST_TO_ADDR
// oil := 0 ;
63570: LD_ADDR_VAR 0 5
63574: PUSH
63575: LD_INT 0
63577: ST_TO_ADDR
// sib := 0 ;
63578: LD_ADDR_VAR 0 6
63582: PUSH
63583: LD_INT 0
63585: ST_TO_ADDR
// if bases then
63586: LD_VAR 0 9
63590: IFFALSE 63696
// begin for j in bases do
63592: LD_ADDR_VAR 0 3
63596: PUSH
63597: LD_VAR 0 9
63601: PUSH
63602: FOR_IN
63603: IFFALSE 63694
// begin base := GetBase ( j ) ;
63605: LD_ADDR_VAR 0 8
63609: PUSH
63610: LD_VAR 0 3
63614: PPUSH
63615: CALL_OW 274
63619: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63620: LD_ADDR_VAR 0 4
63624: PUSH
63625: LD_VAR 0 4
63629: PUSH
63630: LD_VAR 0 8
63634: PPUSH
63635: LD_INT 1
63637: PPUSH
63638: CALL_OW 275
63642: PLUS
63643: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63644: LD_ADDR_VAR 0 5
63648: PUSH
63649: LD_VAR 0 5
63653: PUSH
63654: LD_VAR 0 8
63658: PPUSH
63659: LD_INT 2
63661: PPUSH
63662: CALL_OW 275
63666: PLUS
63667: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63668: LD_ADDR_VAR 0 6
63672: PUSH
63673: LD_VAR 0 6
63677: PUSH
63678: LD_VAR 0 8
63682: PPUSH
63683: LD_INT 3
63685: PPUSH
63686: CALL_OW 275
63690: PLUS
63691: ST_TO_ADDR
// end ;
63692: GO 63602
63694: POP
63695: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63696: LD_STRING setSpecText(
63698: PUSH
63699: LD_VAR 0 2
63703: STR
63704: PUSH
63705: LD_STRING ,
63707: STR
63708: PUSH
63709: LD_INT 2
63711: STR
63712: PUSH
63713: LD_STRING ,
63715: STR
63716: PUSH
63717: LD_VAR 0 4
63721: STR
63722: PUSH
63723: LD_STRING )
63725: STR
63726: PPUSH
63727: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63731: LD_STRING setSpecText(
63733: PUSH
63734: LD_VAR 0 2
63738: STR
63739: PUSH
63740: LD_STRING ,
63742: STR
63743: PUSH
63744: LD_INT 3
63746: STR
63747: PUSH
63748: LD_STRING ,
63750: STR
63751: PUSH
63752: LD_VAR 0 5
63756: STR
63757: PUSH
63758: LD_STRING )
63760: STR
63761: PPUSH
63762: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63766: LD_STRING setSpecText(
63768: PUSH
63769: LD_VAR 0 2
63773: STR
63774: PUSH
63775: LD_STRING ,
63777: STR
63778: PUSH
63779: LD_INT 4
63781: STR
63782: PUSH
63783: LD_STRING ,
63785: STR
63786: PUSH
63787: LD_VAR 0 6
63791: STR
63792: PUSH
63793: LD_STRING )
63795: STR
63796: PPUSH
63797: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63801: LD_STRING setSpecText(
63803: PUSH
63804: LD_VAR 0 2
63808: STR
63809: PUSH
63810: LD_STRING ,
63812: STR
63813: PUSH
63814: LD_INT 5
63816: STR
63817: PUSH
63818: LD_STRING ,
63820: STR
63821: PUSH
63822: LD_VAR 0 7
63826: STR
63827: PUSH
63828: LD_STRING )
63830: STR
63831: PPUSH
63832: CALL_OW 559
// end ; end ;
63836: GO 63452
63838: POP
63839: POP
// end ;
63840: LD_VAR 0 1
63844: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63845: LD_INT 2
63847: PUSH
63848: LD_INT 30
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 30
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: PPUSH
63873: CALL_OW 69
63877: IFFALSE 63887
63879: GO 63881
63881: DISABLE
// begin enable ;
63882: ENABLE
// UpdateSpectatorBar ;
63883: CALL 63428 0 0
// end ;
63887: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63888: LD_INT 0
63890: PPUSH
// end ;
63891: LD_VAR 0 12
63895: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63896: LD_INT 0
63898: PPUSH
63899: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63900: LD_VAR 0 1
63904: NOT
63905: IFTRUE 63924
63907: PUSH
63908: LD_VAR 0 2
63912: PPUSH
63913: LD_VAR 0 3
63917: PPUSH
63918: CALL_OW 488
63922: NOT
63923: OR
63924: IFTRUE 63959
63926: PUSH
63927: LD_VAR 0 1
63931: PPUSH
63932: CALL_OW 266
63936: PUSH
63937: LD_INT 3
63939: NONEQUAL
63940: IFFALSE 63958
63942: PUSH
63943: LD_VAR 0 1
63947: PPUSH
63948: CALL_OW 247
63952: PUSH
63953: LD_INT 1
63955: EQUAL
63956: NOT
63957: AND
63958: OR
63959: IFFALSE 63963
// exit ;
63961: GO 64245
// if GetType ( factory ) = unit_human then
63963: LD_VAR 0 1
63967: PPUSH
63968: CALL_OW 247
63972: PUSH
63973: LD_INT 1
63975: EQUAL
63976: IFFALSE 63993
// factory := IsInUnit ( factory ) ;
63978: LD_ADDR_VAR 0 1
63982: PUSH
63983: LD_VAR 0 1
63987: PPUSH
63988: CALL_OW 310
63992: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63993: LD_VAR 0 1
63997: PPUSH
63998: CALL_OW 266
64002: PUSH
64003: LD_INT 3
64005: NONEQUAL
64006: IFFALSE 64010
// exit ;
64008: GO 64245
// for i := 1 to Count ( factoryWaypoints ) do
64010: LD_ADDR_VAR 0 5
64014: PUSH
64015: DOUBLE
64016: LD_INT 1
64018: DEC
64019: ST_TO_ADDR
64020: LD_EXP 61
64024: PPUSH
64025: CALL 13543 0 1
64029: PUSH
64030: FOR_TO
64031: IFFALSE 64193
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64033: LD_VAR 0 2
64037: PPUSH
64038: LD_VAR 0 3
64042: PPUSH
64043: CALL_OW 428
64047: PUSH
64048: LD_EXP 61
64052: PUSH
64053: LD_VAR 0 5
64057: ARRAY
64058: PUSH
64059: LD_INT 2
64061: ARRAY
64062: EQUAL
64063: IFFALSE 64095
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64065: LD_ADDR_EXP 61
64069: PUSH
64070: LD_EXP 61
64074: PPUSH
64075: LD_VAR 0 5
64079: PPUSH
64080: CALL_OW 3
64084: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64085: CALL 64250 0 0
// exit ;
64089: POP
64090: POP
64091: GO 64245
// end else
64093: GO 64191
// if factory = factoryWaypoints [ i ] [ 2 ] then
64095: LD_VAR 0 1
64099: PUSH
64100: LD_EXP 61
64104: PUSH
64105: LD_VAR 0 5
64109: ARRAY
64110: PUSH
64111: LD_INT 2
64113: ARRAY
64114: EQUAL
64115: IFFALSE 64191
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64117: LD_ADDR_EXP 61
64121: PUSH
64122: LD_EXP 61
64126: PPUSH
64127: LD_VAR 0 5
64131: PPUSH
64132: CALL_OW 3
64136: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64137: LD_ADDR_EXP 61
64141: PUSH
64142: LD_EXP 61
64146: PPUSH
64147: LD_VAR 0 1
64151: PPUSH
64152: CALL_OW 255
64156: PUSH
64157: LD_VAR 0 1
64161: PUSH
64162: LD_VAR 0 2
64166: PUSH
64167: LD_VAR 0 3
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: PPUSH
64178: CALL 49519 0 2
64182: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64183: CALL 64250 0 0
// exit ;
64187: POP
64188: POP
64189: GO 64245
// end ; end ;
64191: GO 64030
64193: POP
64194: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64195: LD_ADDR_EXP 61
64199: PUSH
64200: LD_EXP 61
64204: PPUSH
64205: LD_VAR 0 1
64209: PPUSH
64210: CALL_OW 255
64214: PUSH
64215: LD_VAR 0 1
64219: PUSH
64220: LD_VAR 0 2
64224: PUSH
64225: LD_VAR 0 3
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: PPUSH
64236: CALL 49519 0 2
64240: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64241: CALL 64250 0 0
// end ;
64245: LD_VAR 0 4
64249: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64250: LD_INT 0
64252: PPUSH
64253: PPUSH
64254: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64255: LD_STRING resetFactoryWaypoint();
64257: PPUSH
64258: CALL_OW 559
// if factoryWaypoints then
64262: LD_EXP 61
64266: IFFALSE 64387
// begin list := factoryWaypoints ;
64268: LD_ADDR_VAR 0 3
64272: PUSH
64273: LD_EXP 61
64277: ST_TO_ADDR
// for i := 1 to list do
64278: LD_ADDR_VAR 0 2
64282: PUSH
64283: DOUBLE
64284: LD_INT 1
64286: DEC
64287: ST_TO_ADDR
64288: LD_VAR 0 3
64292: PUSH
64293: FOR_TO
64294: IFFALSE 64385
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64296: LD_STRING setFactoryWaypointXY(
64298: PUSH
64299: LD_VAR 0 3
64303: PUSH
64304: LD_VAR 0 2
64308: ARRAY
64309: PUSH
64310: LD_INT 1
64312: ARRAY
64313: STR
64314: PUSH
64315: LD_STRING ,
64317: STR
64318: PUSH
64319: LD_VAR 0 3
64323: PUSH
64324: LD_VAR 0 2
64328: ARRAY
64329: PUSH
64330: LD_INT 2
64332: ARRAY
64333: STR
64334: PUSH
64335: LD_STRING ,
64337: STR
64338: PUSH
64339: LD_VAR 0 3
64343: PUSH
64344: LD_VAR 0 2
64348: ARRAY
64349: PUSH
64350: LD_INT 3
64352: ARRAY
64353: STR
64354: PUSH
64355: LD_STRING ,
64357: STR
64358: PUSH
64359: LD_VAR 0 3
64363: PUSH
64364: LD_VAR 0 2
64368: ARRAY
64369: PUSH
64370: LD_INT 4
64372: ARRAY
64373: STR
64374: PUSH
64375: LD_STRING )
64377: STR
64378: PPUSH
64379: CALL_OW 559
64383: GO 64293
64385: POP
64386: POP
// end ; end ;
64387: LD_VAR 0 1
64391: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64392: LD_INT 0
64394: PPUSH
// if HexInfo ( x , y ) = warehouse then
64395: LD_VAR 0 2
64399: PPUSH
64400: LD_VAR 0 3
64404: PPUSH
64405: CALL_OW 428
64409: PUSH
64410: LD_VAR 0 1
64414: EQUAL
64415: IFFALSE 64442
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64417: LD_ADDR_EXP 63
64421: PUSH
64422: LD_EXP 63
64426: PPUSH
64427: LD_VAR 0 1
64431: PPUSH
64432: LD_INT 0
64434: PPUSH
64435: CALL_OW 1
64439: ST_TO_ADDR
64440: GO 64493
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64442: LD_ADDR_EXP 63
64446: PUSH
64447: LD_EXP 63
64451: PPUSH
64452: LD_VAR 0 1
64456: PPUSH
64457: LD_VAR 0 1
64461: PPUSH
64462: CALL_OW 255
64466: PUSH
64467: LD_VAR 0 1
64471: PUSH
64472: LD_VAR 0 2
64476: PUSH
64477: LD_VAR 0 3
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: PPUSH
64488: CALL_OW 1
64492: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64493: CALL 64502 0 0
// end ;
64497: LD_VAR 0 4
64501: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64502: LD_INT 0
64504: PPUSH
64505: PPUSH
64506: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64507: LD_STRING resetWarehouseGatheringPoints();
64509: PPUSH
64510: CALL_OW 559
// if warehouseGatheringPoints then
64514: LD_EXP 63
64518: IFFALSE 64644
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64520: LD_ADDR_VAR 0 3
64524: PUSH
64525: LD_EXP 63
64529: PPUSH
64530: CALL 53453 0 1
64534: ST_TO_ADDR
// for i := 1 to list do
64535: LD_ADDR_VAR 0 2
64539: PUSH
64540: DOUBLE
64541: LD_INT 1
64543: DEC
64544: ST_TO_ADDR
64545: LD_VAR 0 3
64549: PUSH
64550: FOR_TO
64551: IFFALSE 64642
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64553: LD_STRING setWarehouseGatheringPointXY(
64555: PUSH
64556: LD_VAR 0 3
64560: PUSH
64561: LD_VAR 0 2
64565: ARRAY
64566: PUSH
64567: LD_INT 1
64569: ARRAY
64570: STR
64571: PUSH
64572: LD_STRING ,
64574: STR
64575: PUSH
64576: LD_VAR 0 3
64580: PUSH
64581: LD_VAR 0 2
64585: ARRAY
64586: PUSH
64587: LD_INT 2
64589: ARRAY
64590: STR
64591: PUSH
64592: LD_STRING ,
64594: STR
64595: PUSH
64596: LD_VAR 0 3
64600: PUSH
64601: LD_VAR 0 2
64605: ARRAY
64606: PUSH
64607: LD_INT 3
64609: ARRAY
64610: STR
64611: PUSH
64612: LD_STRING ,
64614: STR
64615: PUSH
64616: LD_VAR 0 3
64620: PUSH
64621: LD_VAR 0 2
64625: ARRAY
64626: PUSH
64627: LD_INT 4
64629: ARRAY
64630: STR
64631: PUSH
64632: LD_STRING )
64634: STR
64635: PPUSH
64636: CALL_OW 559
64640: GO 64550
64642: POP
64643: POP
// end ; end ;
64644: LD_VAR 0 1
64648: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64649: LD_INT 0
64651: PPUSH
64652: PPUSH
// if not mpSidePositions then
64653: LD_EXP 7
64657: NOT
64658: IFFALSE 64662
// exit ;
64660: GO 64733
// result :=  ;
64662: LD_ADDR_VAR 0 1
64666: PUSH
64667: LD_STRING 
64669: ST_TO_ADDR
// for i := 1 to 8 do
64670: LD_ADDR_VAR 0 2
64674: PUSH
64675: DOUBLE
64676: LD_INT 1
64678: DEC
64679: ST_TO_ADDR
64680: LD_INT 8
64682: PUSH
64683: FOR_TO
64684: IFFALSE 64714
// begin result := result & mpSidePositions [ i ] & ; ;
64686: LD_ADDR_VAR 0 1
64690: PUSH
64691: LD_VAR 0 1
64695: PUSH
64696: LD_EXP 7
64700: PUSH
64701: LD_VAR 0 2
64705: ARRAY
64706: STR
64707: PUSH
64708: LD_STRING ;
64710: STR
64711: ST_TO_ADDR
// end ;
64712: GO 64683
64714: POP
64715: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64716: LD_STRING setMultiplayerRealPosition("
64718: PUSH
64719: LD_VAR 0 1
64723: STR
64724: PUSH
64725: LD_STRING ");
64727: STR
64728: PPUSH
64729: CALL_OW 559
// end ;
64733: LD_VAR 0 1
64737: RET
