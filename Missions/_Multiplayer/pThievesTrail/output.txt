// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46436 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46812 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 230
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 8
 852: PUSH
 853: LD_INT 9
 855: PUSH
 856: LD_INT 10
 858: PUSH
 859: LD_INT 11
 861: PUSH
 862: LD_INT 12
 864: PUSH
 865: LD_INT 13
 867: PUSH
 868: LD_INT 14
 870: PUSH
 871: LD_INT 15
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 4
 891: PUSH
 892: LD_INT 5
 894: PUSH
 895: LD_INT 6
 897: PUSH
 898: LD_INT 7
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 2
 906: PUSH
 907: LD_INT 3
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 19
 923: UNION
 924: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 925: LD_VAR 0 1
 929: PUSH
 930: LD_INT 2
 932: EQUAL
 933: IFFALSE 945
// baseLevel := 1 else
 935: LD_ADDR_VAR 0 7
 939: PUSH
 940: LD_INT 1
 942: ST_TO_ADDR
 943: GO 959
// baseLevel := mpGameSettings [ 1 ] ;
 945: LD_ADDR_VAR 0 7
 949: PUSH
 950: LD_EXP 6
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 959: LD_ADDR_EXP 24
 963: PUSH
 964: LD_EXP 6
 968: PUSH
 969: LD_INT 2
 971: ARRAY
 972: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 973: LD_ADDR_EXP 25
 977: PUSH
 978: LD_EXP 6
 982: PUSH
 983: LD_INT 3
 985: ARRAY
 986: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 987: LD_ADDR_EXP 15
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 4
 999: ARRAY
1000: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1001: LD_ADDR_EXP 27
1005: PUSH
1006: LD_EXP 6
1010: PUSH
1011: LD_INT 5
1013: ARRAY
1014: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1015: LD_ADDR_VAR 0 5
1019: PUSH
1020: LD_EXP 6
1024: PUSH
1025: LD_INT 6
1027: ARRAY
1028: PUSH
1029: LD_INT 0
1031: GREATER
1032: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1033: LD_ADDR_VAR 0 6
1037: PUSH
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 7
1045: ARRAY
1046: PUSH
1047: LD_INT 0
1049: GREATER
1050: ST_TO_ADDR
// kingCamArea := 0 ;
1051: LD_ADDR_EXP 2
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// kingArea := 0 ;
1059: LD_ADDR_EXP 1
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// if gameType = GameTypeKing then
1067: LD_VAR 0 1
1071: PUSH
1072: LD_INT 3
1074: EQUAL
1075: IFFALSE 1115
// begin mpKingArea := 0 ;
1077: LD_ADDR_EXP 34
1081: PUSH
1082: LD_INT 0
1084: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1085: LD_ADDR_EXP 35
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_INT 8
1097: ARRAY
1098: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1099: LD_ADDR_EXP 37
1103: PUSH
1104: LD_EXP 6
1108: PUSH
1109: LD_INT 10
1111: ARRAY
1112: ST_TO_ADDR
// end else
1113: GO 1139
// begin mpKingArea := 0 ;
1115: LD_ADDR_EXP 34
1119: PUSH
1120: LD_INT 0
1122: ST_TO_ADDR
// mpPoints := 0 ;
1123: LD_ADDR_EXP 35
1127: PUSH
1128: LD_INT 0
1130: ST_TO_ADDR
// mpEmissions := 0 ;
1131: LD_ADDR_EXP 37
1135: PUSH
1136: LD_INT 0
1138: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1139: LD_EXP 6
1143: PUSH
1144: LD_INT 9
1146: ARRAY
1147: IFFALSE 1279
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1149: LD_ADDR_EXP 36
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 3
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 12
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 24
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 12
1214: PUSH
1215: LD_INT 1
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 23
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 21
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: LD_INT 42
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 21
1254: PUSH
1255: LD_INT 1
1257: PUSH
1258: LD_INT 1
1260: PUSH
1261: LD_INT 42
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: LIST
1278: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1279: LD_ADDR_EXP 16
1283: PUSH
1284: LD_EXP 6
1288: PUSH
1289: LD_INT 11
1291: ARRAY
1292: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1293: LD_ADDR_EXP 22
1297: PUSH
1298: LD_EXP 6
1302: PUSH
1303: LD_INT 12
1305: ARRAY
1306: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1307: LD_ADDR_EXP 26
1311: PUSH
1312: LD_EXP 6
1316: PUSH
1317: LD_INT 13
1319: ARRAY
1320: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1321: LD_ADDR_EXP 33
1325: PUSH
1326: LD_EXP 6
1330: PUSH
1331: LD_INT 14
1333: ARRAY
1334: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1335: LD_ADDR_EXP 30
1339: PUSH
1340: LD_EXP 6
1344: PUSH
1345: LD_INT 15
1347: ARRAY
1348: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1349: LD_ADDR_EXP 28
1353: PUSH
1354: LD_EXP 6
1358: PUSH
1359: LD_INT 18
1361: ARRAY
1362: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1363: LD_ADDR_EXP 20
1367: PUSH
1368: LD_EXP 6
1372: PUSH
1373: LD_INT 21
1375: ARRAY
1376: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1377: LD_ADDR_EXP 31
1381: PUSH
1382: LD_INT 16
1384: PUSH
1385: LD_INT 17
1387: PUSH
1388: LD_INT 18
1390: PUSH
1391: LD_INT 19
1393: PUSH
1394: LD_INT 20
1396: PUSH
1397: LD_INT 21
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_INT 23
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 3 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 0 ) ] ;
1416: LD_ADDR_VAR 0 8
1420: PUSH
1421: LD_INT 24
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: CALL 45801 0 2
1431: PUSH
1432: LD_INT 30
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: CALL 45801 0 2
1442: PUSH
1443: LD_INT 36
1445: PPUSH
1446: LD_INT 3
1448: PPUSH
1449: CALL 45801 0 2
1453: PUSH
1454: LD_INT 42
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL 45801 0 2
1464: PUSH
1465: LD_INT 48
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL 45801 0 2
1475: PUSH
1476: LD_INT 54
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL 45801 0 2
1486: PUSH
1487: LD_INT 60
1489: PPUSH
1490: LD_INT 5
1492: PPUSH
1493: CALL 45801 0 2
1497: PUSH
1498: LD_INT 66
1500: PPUSH
1501: LD_INT 0
1503: PPUSH
1504: CALL 45801 0 2
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1519: LD_ADDR_VAR 0 3
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_VAR 0 8
1533: PPUSH
1534: CALL 5150 0 1
1538: PUSH
1539: FOR_TO
1540: IFFALSE 1644
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1542: LD_ADDR_EXP 21
1546: PUSH
1547: LD_EXP 21
1551: PPUSH
1552: LD_VAR 0 3
1556: PPUSH
1557: LD_VAR 0 8
1561: PUSH
1562: LD_VAR 0 3
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: PPUSH
1572: LD_VAR 0 8
1576: PUSH
1577: LD_VAR 0 3
1581: ARRAY
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 10
1589: PPUSH
1590: CALL_OW 272
1594: PUSH
1595: LD_VAR 0 8
1599: PUSH
1600: LD_VAR 0 3
1604: ARRAY
1605: PUSH
1606: LD_INT 2
1608: ARRAY
1609: PPUSH
1610: LD_VAR 0 8
1614: PUSH
1615: LD_VAR 0 3
1619: ARRAY
1620: PUSH
1621: LD_INT 3
1623: ARRAY
1624: PPUSH
1625: LD_INT 10
1627: PPUSH
1628: CALL_OW 273
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PPUSH
1637: CALL_OW 1
1641: ST_TO_ADDR
1642: GO 1539
1644: POP
1645: POP
// if hasOil then
1646: LD_VAR 0 5
1650: IFFALSE 1789
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1652: LD_ADDR_VAR 0 4
1656: PUSH
1657: LD_EXP 6
1661: PUSH
1662: LD_INT 6
1664: ARRAY
1665: PUSH
1666: LD_INT 2
1668: EQUAL
1669: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1670: LD_ADDR_EXP 12
1674: PUSH
1675: LD_INT 25
1677: PPUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: CALL 45634 0 2
1687: PUSH
1688: LD_INT 31
1690: PPUSH
1691: LD_VAR 0 4
1695: PPUSH
1696: CALL 45634 0 2
1700: PUSH
1701: LD_INT 37
1703: PPUSH
1704: LD_VAR 0 4
1708: PPUSH
1709: CALL 45634 0 2
1713: PUSH
1714: LD_INT 43
1716: PPUSH
1717: LD_VAR 0 4
1721: PPUSH
1722: CALL 45634 0 2
1726: PUSH
1727: LD_INT 49
1729: PPUSH
1730: LD_VAR 0 4
1734: PPUSH
1735: CALL 45634 0 2
1739: PUSH
1740: LD_INT 55
1742: PPUSH
1743: LD_VAR 0 4
1747: PPUSH
1748: CALL 45634 0 2
1752: PUSH
1753: LD_INT 61
1755: PPUSH
1756: LD_VAR 0 4
1760: PPUSH
1761: CALL 45634 0 2
1765: PUSH
1766: LD_INT 67
1768: PPUSH
1769: LD_VAR 0 4
1773: PPUSH
1774: CALL 45634 0 2
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: ST_TO_ADDR
// end ; if hasSib then
1789: LD_VAR 0 6
1793: IFFALSE 1932
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1795: LD_ADDR_VAR 0 4
1799: PUSH
1800: LD_EXP 6
1804: PUSH
1805: LD_INT 7
1807: ARRAY
1808: PUSH
1809: LD_INT 2
1811: EQUAL
1812: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1813: LD_ADDR_EXP 13
1817: PUSH
1818: LD_INT 26
1820: PPUSH
1821: LD_VAR 0 4
1825: PPUSH
1826: CALL 45634 0 2
1830: PUSH
1831: LD_INT 32
1833: PPUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: CALL 45634 0 2
1843: PUSH
1844: LD_INT 38
1846: PPUSH
1847: LD_VAR 0 4
1851: PPUSH
1852: CALL 45634 0 2
1856: PUSH
1857: LD_INT 44
1859: PPUSH
1860: LD_VAR 0 4
1864: PPUSH
1865: CALL 45634 0 2
1869: PUSH
1870: LD_INT 50
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL 45634 0 2
1882: PUSH
1883: LD_INT 56
1885: PPUSH
1886: LD_VAR 0 4
1890: PPUSH
1891: CALL 45634 0 2
1895: PUSH
1896: LD_INT 62
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL 45634 0 2
1908: PUSH
1909: LD_INT 68
1911: PPUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 45634 0 2
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 1
1939: GREATEREQUAL
1940: IFFALSE 1952
// mpDepots := startPos ;
1942: LD_ADDR_EXP 14
1946: PUSH
1947: LD_VAR 0 8
1951: ST_TO_ADDR
// if baseLevel >= 2 then
1952: LD_VAR 0 7
1956: PUSH
1957: LD_INT 2
1959: GREATEREQUAL
1960: IFFALSE 2377
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 2 ) ] ] ;
1962: LD_ADDR_EXP 17
1966: PUSH
1967: LD_INT 31
1969: PUSH
1970: LD_INT 28
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL 45801 0 2
1980: ADD
1981: PUSH
1982: LD_INT 31
1984: PUSH
1985: LD_INT 29
1987: PPUSH
1988: LD_INT 5
1990: PPUSH
1991: CALL 45801 0 2
1995: ADD
1996: PUSH
1997: LD_INT 4
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 5
2005: PPUSH
2006: CALL 45801 0 2
2010: ADD
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 31
2019: PUSH
2020: LD_INT 34
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL 45801 0 2
2030: ADD
2031: PUSH
2032: LD_INT 31
2034: PUSH
2035: LD_INT 35
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL 45801 0 2
2045: ADD
2046: PUSH
2047: LD_INT 4
2049: PUSH
2050: LD_INT 33
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 45801 0 2
2060: ADD
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 31
2069: PUSH
2070: LD_INT 40
2072: PPUSH
2073: LD_INT 4
2075: PPUSH
2076: CALL 45801 0 2
2080: ADD
2081: PUSH
2082: LD_INT 31
2084: PUSH
2085: LD_INT 41
2087: PPUSH
2088: LD_INT 0
2090: PPUSH
2091: CALL 45801 0 2
2095: ADD
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: LD_INT 39
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL 45801 0 2
2110: ADD
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 31
2119: PUSH
2120: LD_INT 46
2122: PPUSH
2123: LD_INT 5
2125: PPUSH
2126: CALL 45801 0 2
2130: ADD
2131: PUSH
2132: LD_INT 31
2134: PUSH
2135: LD_INT 47
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 45801 0 2
2145: ADD
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: LD_INT 45
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL 45801 0 2
2160: ADD
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 31
2169: PUSH
2170: LD_INT 52
2172: PPUSH
2173: LD_INT 2
2175: PPUSH
2176: CALL 45801 0 2
2180: ADD
2181: PUSH
2182: LD_INT 31
2184: PUSH
2185: LD_INT 53
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: CALL 45801 0 2
2195: ADD
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: LD_INT 51
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: CALL 45801 0 2
2210: ADD
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 31
2219: PUSH
2220: LD_INT 58
2222: PPUSH
2223: LD_INT 2
2225: PPUSH
2226: CALL 45801 0 2
2230: ADD
2231: PUSH
2232: LD_INT 31
2234: PUSH
2235: LD_INT 59
2237: PPUSH
2238: LD_INT 3
2240: PPUSH
2241: CALL 45801 0 2
2245: ADD
2246: PUSH
2247: LD_INT 4
2249: PUSH
2250: LD_INT 57
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 45801 0 2
2260: ADD
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 31
2269: PUSH
2270: LD_INT 64
2272: PPUSH
2273: LD_INT 2
2275: PPUSH
2276: CALL 45801 0 2
2280: ADD
2281: PUSH
2282: LD_INT 31
2284: PUSH
2285: LD_INT 65
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: CALL 45801 0 2
2295: ADD
2296: PUSH
2297: LD_INT 4
2299: PUSH
2300: LD_INT 63
2302: PPUSH
2303: LD_INT 3
2305: PPUSH
2306: CALL 45801 0 2
2310: ADD
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 31
2319: PUSH
2320: LD_INT 70
2322: PPUSH
2323: LD_INT 3
2325: PPUSH
2326: CALL 45801 0 2
2330: ADD
2331: PUSH
2332: LD_INT 31
2334: PUSH
2335: LD_INT 71
2337: PPUSH
2338: LD_INT 2
2340: PPUSH
2341: CALL 45801 0 2
2345: ADD
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: LD_INT 69
2352: PPUSH
2353: LD_INT 2
2355: PPUSH
2356: CALL 45801 0 2
2360: ADD
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: ST_TO_ADDR
// end ; end ;
2377: LD_VAR 0 2
2381: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2382: GO 2384
2384: DISABLE
2385: LD_INT 0
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
// begin if not mpShipments then
2395: LD_EXP 27
2399: NOT
2400: IFFALSE 2404
// exit ;
2402: GO 2863
// case mpShipments of 1 :
2404: LD_EXP 27
2408: PUSH
2409: LD_INT 1
2411: DOUBLE
2412: EQUAL
2413: IFTRUE 2417
2415: GO 2452
2417: POP
// begin time := 0 0$30 ;
2418: LD_ADDR_VAR 0 5
2422: PUSH
2423: LD_INT 1050
2425: ST_TO_ADDR
// normalTime := 0 0$30 ;
2426: LD_ADDR_VAR 0 6
2430: PUSH
2431: LD_INT 1050
2433: ST_TO_ADDR
// maxTime := 1 1$20 ;
2434: LD_ADDR_VAR 0 8
2438: PUSH
2439: LD_INT 2800
2441: ST_TO_ADDR
// delayTime := 0 0$5 ;
2442: LD_ADDR_VAR 0 7
2446: PUSH
2447: LD_INT 175
2449: ST_TO_ADDR
// end ; 2 :
2450: GO 2582
2452: LD_INT 2
2454: DOUBLE
2455: EQUAL
2456: IFTRUE 2460
2458: GO 2495
2460: POP
// begin time := 0 0$25 ;
2461: LD_ADDR_VAR 0 5
2465: PUSH
2466: LD_INT 875
2468: ST_TO_ADDR
// normalTime := 0 0$25 ;
2469: LD_ADDR_VAR 0 6
2473: PUSH
2474: LD_INT 875
2476: ST_TO_ADDR
// maxTime := 1 1$10 ;
2477: LD_ADDR_VAR 0 8
2481: PUSH
2482: LD_INT 2450
2484: ST_TO_ADDR
// delayTime := 0 0$4 ;
2485: LD_ADDR_VAR 0 7
2489: PUSH
2490: LD_INT 140
2492: ST_TO_ADDR
// end ; 3 :
2493: GO 2582
2495: LD_INT 3
2497: DOUBLE
2498: EQUAL
2499: IFTRUE 2503
2501: GO 2538
2503: POP
// begin time := 0 0$20 ;
2504: LD_ADDR_VAR 0 5
2508: PUSH
2509: LD_INT 700
2511: ST_TO_ADDR
// normalTime := 0 0$20 ;
2512: LD_ADDR_VAR 0 6
2516: PUSH
2517: LD_INT 700
2519: ST_TO_ADDR
// maxTime := 1 1$00 ;
2520: LD_ADDR_VAR 0 8
2524: PUSH
2525: LD_INT 2100
2527: ST_TO_ADDR
// delayTime := 0 0$3 ;
2528: LD_ADDR_VAR 0 7
2532: PUSH
2533: LD_INT 105
2535: ST_TO_ADDR
// end ; 4 :
2536: GO 2582
2538: LD_INT 4
2540: DOUBLE
2541: EQUAL
2542: IFTRUE 2546
2544: GO 2581
2546: POP
// begin time := 0 0$15 ;
2547: LD_ADDR_VAR 0 5
2551: PUSH
2552: LD_INT 525
2554: ST_TO_ADDR
// normalTime := 0 0$15 ;
2555: LD_ADDR_VAR 0 6
2559: PUSH
2560: LD_INT 525
2562: ST_TO_ADDR
// maxTime := 0 0$55 ;
2563: LD_ADDR_VAR 0 8
2567: PUSH
2568: LD_INT 1925
2570: ST_TO_ADDR
// delayTime := 0 0$2 ;
2571: LD_ADDR_VAR 0 7
2575: PUSH
2576: LD_INT 70
2578: ST_TO_ADDR
// end ; end ;
2579: GO 2582
2581: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 , Center3 ] ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_INT 4
2589: PUSH
2590: LD_INT 5
2592: PUSH
2593: LD_INT 6
2595: PUSH
2596: LD_INT 7
2598: PUSH
2599: LD_INT 1
2601: PUSH
2602: LD_INT 2
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2617: LD_ADDR_VAR 0 3
2621: PUSH
2622: LD_INT 8
2624: PUSH
2625: LD_INT 9
2627: PUSH
2628: LD_INT 10
2630: PUSH
2631: LD_INT 11
2633: PUSH
2634: LD_INT 12
2636: PUSH
2637: LD_INT 13
2639: PUSH
2640: LD_INT 14
2642: PUSH
2643: LD_INT 15
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: ST_TO_ADDR
// for i := 1 to 8 do
2656: LD_ADDR_VAR 0 1
2660: PUSH
2661: DOUBLE
2662: LD_INT 1
2664: DEC
2665: ST_TO_ADDR
2666: LD_INT 8
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2717
// begin if not mpSidePositions [ i ] then
2672: LD_EXP 7
2676: PUSH
2677: LD_VAR 0 1
2681: ARRAY
2682: NOT
2683: IFFALSE 2687
// continue ;
2685: GO 2669
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2687: LD_ADDR_VAR 0 4
2691: PUSH
2692: LD_VAR 0 4
2696: PUSH
2697: LD_VAR 0 3
2701: PUSH
2702: LD_EXP 7
2706: PUSH
2707: LD_VAR 0 1
2711: ARRAY
2712: ARRAY
2713: ADD
2714: ST_TO_ADDR
// end ;
2715: GO 2669
2717: POP
2718: POP
// x := 1 ;
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// repeat wait ( time ) ;
2727: LD_VAR 0 5
2731: PPUSH
2732: CALL_OW 67
// x := Inc ( x ) ;
2736: LD_ADDR_VAR 0 2
2740: PUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL 42455 0 1
2750: ST_TO_ADDR
// if x > 5 then
2751: LD_VAR 0 2
2755: PUSH
2756: LD_INT 5
2758: GREATER
2759: IFFALSE 2769
// x := 1 ;
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// for i in areas do
2769: LD_ADDR_VAR 0 1
2773: PUSH
2774: LD_VAR 0 4
2778: PUSH
2779: FOR_IN
2780: IFFALSE 2819
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2782: LD_VAR 0 1
2786: PPUSH
2787: LD_INT 1
2789: PPUSH
2790: CALL_OW 287
2794: PUSH
2795: LD_INT 30
2797: LESS
2798: IFFALSE 2817
// begin CreateCratesArea ( x , i , true ) ;
2800: LD_VAR 0 2
2804: PPUSH
2805: LD_VAR 0 1
2809: PPUSH
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 55
// end ; end ;
2817: GO 2779
2819: POP
2820: POP
// time := time + delayTime ;
2821: LD_ADDR_VAR 0 5
2825: PUSH
2826: LD_VAR 0 5
2830: PUSH
2831: LD_VAR 0 7
2835: PLUS
2836: ST_TO_ADDR
// if time > maxTime then
2837: LD_VAR 0 5
2841: PUSH
2842: LD_VAR 0 8
2846: GREATER
2847: IFFALSE 2859
// time := normalTime ;
2849: LD_ADDR_VAR 0 5
2853: PUSH
2854: LD_VAR 0 6
2858: ST_TO_ADDR
// until false ;
2859: LD_INT 0
2861: IFFALSE 2727
// end ; end_of_file
2863: PPOPN 8
2865: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2866: LD_VAR 0 1
2870: PPUSH
2871: CALL 55602 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 51584 0 1
// end ;
2884: PPOPN 1
2886: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL 55619 0 1
// end ;
2896: PPOPN 1
2898: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2899: LD_VAR 0 1
2903: PPUSH
2904: CALL 52291 0 1
2908: PPOPN 1
2910: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2911: LD_VAR 0 1
2915: PPUSH
2916: LD_VAR 0 2
2920: PPUSH
2921: CALL 55660 0 2
2925: PPOPN 2
2927: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2928: LD_VAR 0 1
2932: PPUSH
2933: LD_VAR 0 2
2937: PPUSH
2938: LD_VAR 0 3
2942: PPUSH
2943: CALL 52344 0 3
2947: PPOPN 3
2949: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2950: LD_INT 0
2952: PPUSH
2953: PPUSH
// if exist_mode then
2954: LD_VAR 0 2
2958: IFFALSE 3004
// begin unit := CreateCharacter ( prefix & ident ) ;
2960: LD_ADDR_VAR 0 5
2964: PUSH
2965: LD_VAR 0 3
2969: PUSH
2970: LD_VAR 0 1
2974: STR
2975: PPUSH
2976: CALL_OW 34
2980: ST_TO_ADDR
// if unit then
2981: LD_VAR 0 5
2985: IFFALSE 3002
// DeleteCharacters ( prefix & ident ) ;
2987: LD_VAR 0 3
2991: PUSH
2992: LD_VAR 0 1
2996: STR
2997: PPUSH
2998: CALL_OW 40
// end else
3002: GO 3019
// unit := NewCharacter ( ident ) ;
3004: LD_ADDR_VAR 0 5
3008: PUSH
3009: LD_VAR 0 1
3013: PPUSH
3014: CALL_OW 25
3018: ST_TO_ADDR
// result := unit ;
3019: LD_ADDR_VAR 0 4
3023: PUSH
3024: LD_VAR 0 5
3028: ST_TO_ADDR
// end ;
3029: LD_VAR 0 4
3033: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
// if exist_mode then
3038: LD_VAR 0 2
3042: IFFALSE 3067
// unit := CreateCharacter ( prefix & ident ) else
3044: LD_ADDR_VAR 0 5
3048: PUSH
3049: LD_VAR 0 3
3053: PUSH
3054: LD_VAR 0 1
3058: STR
3059: PPUSH
3060: CALL_OW 34
3064: ST_TO_ADDR
3065: GO 3082
// unit := NewCharacter ( ident ) ;
3067: LD_ADDR_VAR 0 5
3071: PUSH
3072: LD_VAR 0 1
3076: PPUSH
3077: CALL_OW 25
3081: ST_TO_ADDR
// result := unit ;
3082: LD_ADDR_VAR 0 4
3086: PUSH
3087: LD_VAR 0 5
3091: ST_TO_ADDR
// end ;
3092: LD_VAR 0 4
3096: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// if not side or not nation then
3101: LD_VAR 0 1
3105: NOT
3106: IFTRUE 3115
3108: PUSH
3109: LD_VAR 0 2
3113: NOT
3114: OR
3115: IFFALSE 3119
// exit ;
3117: GO 3889
// case nation of nation_american :
3119: LD_VAR 0 2
3123: PUSH
3124: LD_INT 1
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3346
3132: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3133: LD_ADDR_VAR 0 4
3137: PUSH
3138: LD_INT 35
3140: PUSH
3141: LD_INT 45
3143: PUSH
3144: LD_INT 46
3146: PUSH
3147: LD_INT 47
3149: PUSH
3150: LD_INT 82
3152: PUSH
3153: LD_INT 83
3155: PUSH
3156: LD_INT 84
3158: PUSH
3159: LD_INT 85
3161: PUSH
3162: LD_INT 86
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: LD_INT 2
3170: PUSH
3171: LD_INT 6
3173: PUSH
3174: LD_INT 15
3176: PUSH
3177: LD_INT 16
3179: PUSH
3180: LD_INT 7
3182: PUSH
3183: LD_INT 12
3185: PUSH
3186: LD_INT 13
3188: PUSH
3189: LD_INT 10
3191: PUSH
3192: LD_INT 14
3194: PUSH
3195: LD_INT 20
3197: PUSH
3198: LD_INT 21
3200: PUSH
3201: LD_INT 22
3203: PUSH
3204: LD_INT 25
3206: PUSH
3207: LD_INT 32
3209: PUSH
3210: LD_INT 27
3212: PUSH
3213: LD_INT 36
3215: PUSH
3216: LD_INT 69
3218: PUSH
3219: LD_INT 39
3221: PUSH
3222: LD_INT 34
3224: PUSH
3225: LD_INT 40
3227: PUSH
3228: LD_INT 48
3230: PUSH
3231: LD_INT 49
3233: PUSH
3234: LD_INT 50
3236: PUSH
3237: LD_INT 51
3239: PUSH
3240: LD_INT 52
3242: PUSH
3243: LD_INT 53
3245: PUSH
3246: LD_INT 54
3248: PUSH
3249: LD_INT 55
3251: PUSH
3252: LD_INT 56
3254: PUSH
3255: LD_INT 57
3257: PUSH
3258: LD_INT 58
3260: PUSH
3261: LD_INT 59
3263: PUSH
3264: LD_INT 60
3266: PUSH
3267: LD_INT 61
3269: PUSH
3270: LD_INT 62
3272: PUSH
3273: LD_INT 80
3275: PUSH
3276: LD_INT 82
3278: PUSH
3279: LD_INT 83
3281: PUSH
3282: LD_INT 84
3284: PUSH
3285: LD_INT 85
3287: PUSH
3288: LD_INT 86
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: ST_TO_ADDR
3344: GO 3811
3346: LD_INT 2
3348: DOUBLE
3349: EQUAL
3350: IFTRUE 3354
3352: GO 3580
3354: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3355: LD_ADDR_VAR 0 4
3359: PUSH
3360: LD_INT 35
3362: PUSH
3363: LD_INT 45
3365: PUSH
3366: LD_INT 46
3368: PUSH
3369: LD_INT 47
3371: PUSH
3372: LD_INT 82
3374: PUSH
3375: LD_INT 83
3377: PUSH
3378: LD_INT 84
3380: PUSH
3381: LD_INT 85
3383: PUSH
3384: LD_INT 87
3386: PUSH
3387: LD_INT 70
3389: PUSH
3390: LD_INT 1
3392: PUSH
3393: LD_INT 11
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: LD_INT 4
3401: PUSH
3402: LD_INT 5
3404: PUSH
3405: LD_INT 6
3407: PUSH
3408: LD_INT 15
3410: PUSH
3411: LD_INT 18
3413: PUSH
3414: LD_INT 7
3416: PUSH
3417: LD_INT 17
3419: PUSH
3420: LD_INT 8
3422: PUSH
3423: LD_INT 20
3425: PUSH
3426: LD_INT 21
3428: PUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 72
3434: PUSH
3435: LD_INT 26
3437: PUSH
3438: LD_INT 69
3440: PUSH
3441: LD_INT 39
3443: PUSH
3444: LD_INT 40
3446: PUSH
3447: LD_INT 41
3449: PUSH
3450: LD_INT 42
3452: PUSH
3453: LD_INT 43
3455: PUSH
3456: LD_INT 48
3458: PUSH
3459: LD_INT 49
3461: PUSH
3462: LD_INT 50
3464: PUSH
3465: LD_INT 51
3467: PUSH
3468: LD_INT 52
3470: PUSH
3471: LD_INT 53
3473: PUSH
3474: LD_INT 54
3476: PUSH
3477: LD_INT 55
3479: PUSH
3480: LD_INT 56
3482: PUSH
3483: LD_INT 60
3485: PUSH
3486: LD_INT 61
3488: PUSH
3489: LD_INT 62
3491: PUSH
3492: LD_INT 66
3494: PUSH
3495: LD_INT 67
3497: PUSH
3498: LD_INT 68
3500: PUSH
3501: LD_INT 81
3503: PUSH
3504: LD_INT 82
3506: PUSH
3507: LD_INT 83
3509: PUSH
3510: LD_INT 84
3512: PUSH
3513: LD_INT 85
3515: PUSH
3516: LD_INT 87
3518: PUSH
3519: LD_INT 88
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: ST_TO_ADDR
3578: GO 3811
3580: LD_INT 3
3582: DOUBLE
3583: EQUAL
3584: IFTRUE 3588
3586: GO 3810
3588: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: LD_INT 46
3596: PUSH
3597: LD_INT 47
3599: PUSH
3600: LD_INT 1
3602: PUSH
3603: LD_INT 2
3605: PUSH
3606: LD_INT 82
3608: PUSH
3609: LD_INT 83
3611: PUSH
3612: LD_INT 84
3614: PUSH
3615: LD_INT 85
3617: PUSH
3618: LD_INT 86
3620: PUSH
3621: LD_INT 11
3623: PUSH
3624: LD_INT 9
3626: PUSH
3627: LD_INT 20
3629: PUSH
3630: LD_INT 19
3632: PUSH
3633: LD_INT 21
3635: PUSH
3636: LD_INT 24
3638: PUSH
3639: LD_INT 22
3641: PUSH
3642: LD_INT 25
3644: PUSH
3645: LD_INT 28
3647: PUSH
3648: LD_INT 29
3650: PUSH
3651: LD_INT 30
3653: PUSH
3654: LD_INT 31
3656: PUSH
3657: LD_INT 37
3659: PUSH
3660: LD_INT 38
3662: PUSH
3663: LD_INT 32
3665: PUSH
3666: LD_INT 27
3668: PUSH
3669: LD_INT 33
3671: PUSH
3672: LD_INT 69
3674: PUSH
3675: LD_INT 39
3677: PUSH
3678: LD_INT 34
3680: PUSH
3681: LD_INT 40
3683: PUSH
3684: LD_INT 71
3686: PUSH
3687: LD_INT 23
3689: PUSH
3690: LD_INT 44
3692: PUSH
3693: LD_INT 48
3695: PUSH
3696: LD_INT 49
3698: PUSH
3699: LD_INT 50
3701: PUSH
3702: LD_INT 51
3704: PUSH
3705: LD_INT 52
3707: PUSH
3708: LD_INT 53
3710: PUSH
3711: LD_INT 54
3713: PUSH
3714: LD_INT 55
3716: PUSH
3717: LD_INT 56
3719: PUSH
3720: LD_INT 57
3722: PUSH
3723: LD_INT 58
3725: PUSH
3726: LD_INT 59
3728: PUSH
3729: LD_INT 63
3731: PUSH
3732: LD_INT 64
3734: PUSH
3735: LD_INT 65
3737: PUSH
3738: LD_INT 82
3740: PUSH
3741: LD_INT 83
3743: PUSH
3744: LD_INT 84
3746: PUSH
3747: LD_INT 85
3749: PUSH
3750: LD_INT 86
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: ST_TO_ADDR
3808: GO 3811
3810: POP
// if state > - 1 and state < 3 then
3811: LD_VAR 0 3
3815: PUSH
3816: LD_INT 1
3818: NEG
3819: GREATER
3820: IFFALSE 3832
3822: PUSH
3823: LD_VAR 0 3
3827: PUSH
3828: LD_INT 3
3830: LESS
3831: AND
3832: IFFALSE 3889
// for i in result do
3834: LD_ADDR_VAR 0 5
3838: PUSH
3839: LD_VAR 0 4
3843: PUSH
3844: FOR_IN
3845: IFFALSE 3887
// if GetTech ( i , side ) <> state then
3847: LD_VAR 0 5
3851: PPUSH
3852: LD_VAR 0 1
3856: PPUSH
3857: CALL_OW 321
3861: PUSH
3862: LD_VAR 0 3
3866: NONEQUAL
3867: IFFALSE 3885
// result := result diff i ;
3869: LD_ADDR_VAR 0 4
3873: PUSH
3874: LD_VAR 0 4
3878: PUSH
3879: LD_VAR 0 5
3883: DIFF
3884: ST_TO_ADDR
3885: GO 3844
3887: POP
3888: POP
// end ;
3889: LD_VAR 0 4
3893: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3894: LD_INT 0
3896: PPUSH
3897: PPUSH
3898: PPUSH
// result := true ;
3899: LD_ADDR_VAR 0 3
3903: PUSH
3904: LD_INT 1
3906: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3907: LD_ADDR_VAR 0 5
3911: PUSH
3912: LD_VAR 0 2
3916: PPUSH
3917: CALL_OW 480
3921: ST_TO_ADDR
// if not tmp then
3922: LD_VAR 0 5
3926: NOT
3927: IFFALSE 3931
// exit ;
3929: GO 3980
// for i in tmp do
3931: LD_ADDR_VAR 0 4
3935: PUSH
3936: LD_VAR 0 5
3940: PUSH
3941: FOR_IN
3942: IFFALSE 3978
// if GetTech ( i , side ) <> state_researched then
3944: LD_VAR 0 4
3948: PPUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: CALL_OW 321
3958: PUSH
3959: LD_INT 2
3961: NONEQUAL
3962: IFFALSE 3976
// begin result := false ;
3964: LD_ADDR_VAR 0 3
3968: PUSH
3969: LD_INT 0
3971: ST_TO_ADDR
// exit ;
3972: POP
3973: POP
3974: GO 3980
// end ;
3976: GO 3941
3978: POP
3979: POP
// end ;
3980: LD_VAR 0 3
3984: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3985: LD_INT 0
3987: PPUSH
3988: PPUSH
3989: PPUSH
3990: PPUSH
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
3995: PPUSH
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4000: LD_VAR 0 1
4004: NOT
4005: IFTRUE 4022
4007: PUSH
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 257
4017: PUSH
4018: LD_INT 9
4020: NONEQUAL
4021: OR
4022: IFFALSE 4026
// exit ;
4024: GO 4605
// side := GetSide ( unit ) ;
4026: LD_ADDR_VAR 0 9
4030: PUSH
4031: LD_VAR 0 1
4035: PPUSH
4036: CALL_OW 255
4040: ST_TO_ADDR
// tech_space := tech_spacanom ;
4041: LD_ADDR_VAR 0 12
4045: PUSH
4046: LD_INT 29
4048: ST_TO_ADDR
// tech_time := tech_taurad ;
4049: LD_ADDR_VAR 0 13
4053: PUSH
4054: LD_INT 28
4056: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4057: LD_ADDR_VAR 0 11
4061: PUSH
4062: LD_VAR 0 1
4066: PPUSH
4067: CALL_OW 310
4071: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4072: LD_VAR 0 11
4076: PPUSH
4077: CALL_OW 247
4081: PUSH
4082: LD_INT 2
4084: EQUAL
4085: IFFALSE 4089
// exit ;
4087: GO 4605
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4089: LD_ADDR_VAR 0 8
4093: PUSH
4094: LD_INT 81
4096: PUSH
4097: LD_VAR 0 9
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 21
4111: PUSH
4112: LD_INT 3
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PPUSH
4127: CALL_OW 69
4131: ST_TO_ADDR
// if not tmp then
4132: LD_VAR 0 8
4136: NOT
4137: IFFALSE 4141
// exit ;
4139: GO 4605
// if in_unit then
4141: LD_VAR 0 11
4145: IFFALSE 4169
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4147: LD_ADDR_VAR 0 10
4151: PUSH
4152: LD_VAR 0 8
4156: PPUSH
4157: LD_VAR 0 11
4161: PPUSH
4162: CALL_OW 74
4166: ST_TO_ADDR
4167: GO 4189
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4169: LD_ADDR_VAR 0 10
4173: PUSH
4174: LD_VAR 0 8
4178: PPUSH
4179: LD_VAR 0 1
4183: PPUSH
4184: CALL_OW 74
4188: ST_TO_ADDR
// if not enemy then
4189: LD_VAR 0 10
4193: NOT
4194: IFFALSE 4198
// exit ;
4196: GO 4605
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4198: LD_VAR 0 11
4202: IFFALSE 4224
4204: PUSH
4205: LD_VAR 0 11
4209: PPUSH
4210: LD_VAR 0 10
4214: PPUSH
4215: CALL_OW 296
4219: PUSH
4220: LD_INT 13
4222: GREATER
4223: AND
4224: IFTRUE 4246
4226: PUSH
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_VAR 0 10
4236: PPUSH
4237: CALL_OW 296
4241: PUSH
4242: LD_INT 12
4244: GREATER
4245: OR
4246: IFFALSE 4250
// exit ;
4248: GO 4605
// missile := [ 1 ] ;
4250: LD_ADDR_VAR 0 14
4254: PUSH
4255: LD_INT 1
4257: PUSH
4258: EMPTY
4259: LIST
4260: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4261: LD_VAR 0 9
4265: PPUSH
4266: LD_VAR 0 12
4270: PPUSH
4271: CALL_OW 325
4275: IFFALSE 4304
// missile := Replace ( missile , missile + 1 , 2 ) ;
4277: LD_ADDR_VAR 0 14
4281: PUSH
4282: LD_VAR 0 14
4286: PPUSH
4287: LD_VAR 0 14
4291: PUSH
4292: LD_INT 1
4294: PLUS
4295: PPUSH
4296: LD_INT 2
4298: PPUSH
4299: CALL_OW 1
4303: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4304: LD_VAR 0 9
4308: PPUSH
4309: LD_VAR 0 13
4313: PPUSH
4314: CALL_OW 325
4318: IFFALSE 4342
4320: PUSH
4321: LD_VAR 0 10
4325: PPUSH
4326: CALL_OW 255
4330: PPUSH
4331: LD_VAR 0 13
4335: PPUSH
4336: CALL_OW 325
4340: NOT
4341: AND
4342: IFFALSE 4371
// missile := Replace ( missile , missile + 1 , 3 ) ;
4344: LD_ADDR_VAR 0 14
4348: PUSH
4349: LD_VAR 0 14
4353: PPUSH
4354: LD_VAR 0 14
4358: PUSH
4359: LD_INT 1
4361: PLUS
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: CALL_OW 1
4370: ST_TO_ADDR
// if missile < 2 then
4371: LD_VAR 0 14
4375: PUSH
4376: LD_INT 2
4378: LESS
4379: IFFALSE 4383
// exit ;
4381: GO 4605
// x := GetX ( enemy ) ;
4383: LD_ADDR_VAR 0 4
4387: PUSH
4388: LD_VAR 0 10
4392: PPUSH
4393: CALL_OW 250
4397: ST_TO_ADDR
// y := GetY ( enemy ) ;
4398: LD_ADDR_VAR 0 5
4402: PUSH
4403: LD_VAR 0 10
4407: PPUSH
4408: CALL_OW 251
4412: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4413: LD_ADDR_VAR 0 6
4417: PUSH
4418: LD_VAR 0 4
4422: PUSH
4423: LD_INT 1
4425: NEG
4426: PPUSH
4427: LD_INT 1
4429: PPUSH
4430: CALL_OW 12
4434: PLUS
4435: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4436: LD_ADDR_VAR 0 7
4440: PUSH
4441: LD_VAR 0 5
4445: PUSH
4446: LD_INT 1
4448: NEG
4449: PPUSH
4450: LD_INT 1
4452: PPUSH
4453: CALL_OW 12
4457: PLUS
4458: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4459: LD_VAR 0 6
4463: PPUSH
4464: LD_VAR 0 7
4468: PPUSH
4469: CALL_OW 488
4473: NOT
4474: IFFALSE 4496
// begin _x := x ;
4476: LD_ADDR_VAR 0 6
4480: PUSH
4481: LD_VAR 0 4
4485: ST_TO_ADDR
// _y := y ;
4486: LD_ADDR_VAR 0 7
4490: PUSH
4491: LD_VAR 0 5
4495: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4496: LD_ADDR_VAR 0 3
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_VAR 0 14
4508: PPUSH
4509: CALL_OW 12
4513: ST_TO_ADDR
// case i of 1 :
4514: LD_VAR 0 3
4518: PUSH
4519: LD_INT 1
4521: DOUBLE
4522: EQUAL
4523: IFTRUE 4527
4525: GO 4544
4527: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4528: LD_VAR 0 1
4532: PPUSH
4533: LD_VAR 0 10
4537: PPUSH
4538: CALL_OW 115
4542: GO 4605
4544: LD_INT 2
4546: DOUBLE
4547: EQUAL
4548: IFTRUE 4552
4550: GO 4574
4552: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4553: LD_VAR 0 1
4557: PPUSH
4558: LD_VAR 0 6
4562: PPUSH
4563: LD_VAR 0 7
4567: PPUSH
4568: CALL_OW 153
4572: GO 4605
4574: LD_INT 3
4576: DOUBLE
4577: EQUAL
4578: IFTRUE 4582
4580: GO 4604
4582: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4583: LD_VAR 0 1
4587: PPUSH
4588: LD_VAR 0 6
4592: PPUSH
4593: LD_VAR 0 7
4597: PPUSH
4598: CALL_OW 154
4602: GO 4605
4604: POP
// end ;
4605: LD_VAR 0 2
4609: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4610: LD_INT 0
4612: PPUSH
4613: PPUSH
4614: PPUSH
4615: PPUSH
4616: PPUSH
4617: PPUSH
// if not unit or not building then
4618: LD_VAR 0 1
4622: NOT
4623: IFTRUE 4632
4625: PUSH
4626: LD_VAR 0 2
4630: NOT
4631: OR
4632: IFFALSE 4636
// exit ;
4634: GO 4794
// x := GetX ( building ) ;
4636: LD_ADDR_VAR 0 5
4640: PUSH
4641: LD_VAR 0 2
4645: PPUSH
4646: CALL_OW 250
4650: ST_TO_ADDR
// y := GetY ( building ) ;
4651: LD_ADDR_VAR 0 6
4655: PUSH
4656: LD_VAR 0 2
4660: PPUSH
4661: CALL_OW 251
4665: ST_TO_ADDR
// for i := 0 to 5 do
4666: LD_ADDR_VAR 0 4
4670: PUSH
4671: DOUBLE
4672: LD_INT 0
4674: DEC
4675: ST_TO_ADDR
4676: LD_INT 5
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4792
// begin _x := ShiftX ( x , i , 3 ) ;
4682: LD_ADDR_VAR 0 7
4686: PUSH
4687: LD_VAR 0 5
4691: PPUSH
4692: LD_VAR 0 4
4696: PPUSH
4697: LD_INT 3
4699: PPUSH
4700: CALL_OW 272
4704: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4705: LD_ADDR_VAR 0 8
4709: PUSH
4710: LD_VAR 0 6
4714: PPUSH
4715: LD_VAR 0 4
4719: PPUSH
4720: LD_INT 3
4722: PPUSH
4723: CALL_OW 273
4727: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4728: LD_VAR 0 7
4732: PPUSH
4733: LD_VAR 0 8
4737: PPUSH
4738: CALL_OW 488
4742: NOT
4743: IFFALSE 4747
// continue ;
4745: GO 4679
// if HexInfo ( _x , _y ) = 0 then
4747: LD_VAR 0 7
4751: PPUSH
4752: LD_VAR 0 8
4756: PPUSH
4757: CALL_OW 428
4761: PUSH
4762: LD_INT 0
4764: EQUAL
4765: IFFALSE 4790
// begin ComMoveXY ( unit , _x , _y ) ;
4767: LD_VAR 0 1
4771: PPUSH
4772: LD_VAR 0 7
4776: PPUSH
4777: LD_VAR 0 8
4781: PPUSH
4782: CALL_OW 111
// exit ;
4786: POP
4787: POP
4788: GO 4794
// end ; end ;
4790: GO 4679
4792: POP
4793: POP
// end ;
4794: LD_VAR 0 3
4798: RET
// export function ScanBase ( side , base_area ) ; begin
4799: LD_INT 0
4801: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4802: LD_ADDR_VAR 0 3
4806: PUSH
4807: LD_VAR 0 2
4811: PPUSH
4812: LD_INT 81
4814: PUSH
4815: LD_VAR 0 1
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL_OW 70
4828: ST_TO_ADDR
// end ;
4829: LD_VAR 0 3
4833: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4834: LD_INT 0
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
// result := false ;
4840: LD_ADDR_VAR 0 2
4844: PUSH
4845: LD_INT 0
4847: ST_TO_ADDR
// side := GetSide ( unit ) ;
4848: LD_ADDR_VAR 0 3
4852: PUSH
4853: LD_VAR 0 1
4857: PPUSH
4858: CALL_OW 255
4862: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_VAR 0 1
4872: PPUSH
4873: CALL_OW 248
4877: ST_TO_ADDR
// case nat of 1 :
4878: LD_VAR 0 4
4882: PUSH
4883: LD_INT 1
4885: DOUBLE
4886: EQUAL
4887: IFTRUE 4891
4889: GO 4902
4891: POP
// tech := tech_lassight ; 2 :
4892: LD_ADDR_VAR 0 5
4896: PUSH
4897: LD_INT 12
4899: ST_TO_ADDR
4900: GO 4941
4902: LD_INT 2
4904: DOUBLE
4905: EQUAL
4906: IFTRUE 4910
4908: GO 4921
4910: POP
// tech := tech_mortar ; 3 :
4911: LD_ADDR_VAR 0 5
4915: PUSH
4916: LD_INT 41
4918: ST_TO_ADDR
4919: GO 4941
4921: LD_INT 3
4923: DOUBLE
4924: EQUAL
4925: IFTRUE 4929
4927: GO 4940
4929: POP
// tech := tech_bazooka ; end ;
4930: LD_ADDR_VAR 0 5
4934: PUSH
4935: LD_INT 44
4937: ST_TO_ADDR
4938: GO 4941
4940: POP
// if Researched ( side , tech ) then
4941: LD_VAR 0 3
4945: PPUSH
4946: LD_VAR 0 5
4950: PPUSH
4951: CALL_OW 325
4955: IFFALSE 4982
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4957: LD_ADDR_VAR 0 2
4961: PUSH
4962: LD_INT 5
4964: PUSH
4965: LD_INT 8
4967: PUSH
4968: LD_INT 9
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: LD_VAR 0 4
4980: ARRAY
4981: ST_TO_ADDR
// end ;
4982: LD_VAR 0 2
4986: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4987: LD_INT 0
4989: PPUSH
4990: PPUSH
4991: PPUSH
// if not mines then
4992: LD_VAR 0 2
4996: NOT
4997: IFFALSE 5001
// exit ;
4999: GO 5145
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5001: LD_ADDR_VAR 0 5
5005: PUSH
5006: LD_INT 81
5008: PUSH
5009: LD_VAR 0 1
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: LD_INT 3
5020: PUSH
5021: LD_INT 21
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PPUSH
5039: CALL_OW 69
5043: ST_TO_ADDR
// for i in mines do
5044: LD_ADDR_VAR 0 4
5048: PUSH
5049: LD_VAR 0 2
5053: PUSH
5054: FOR_IN
5055: IFFALSE 5143
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5057: LD_VAR 0 4
5061: PUSH
5062: LD_INT 1
5064: ARRAY
5065: PPUSH
5066: LD_VAR 0 4
5070: PUSH
5071: LD_INT 2
5073: ARRAY
5074: PPUSH
5075: CALL_OW 458
5079: NOT
5080: IFFALSE 5084
// continue ;
5082: GO 5054
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5084: LD_VAR 0 4
5088: PUSH
5089: LD_INT 1
5091: ARRAY
5092: PPUSH
5093: LD_VAR 0 4
5097: PUSH
5098: LD_INT 2
5100: ARRAY
5101: PPUSH
5102: CALL_OW 428
5106: PUSH
5107: LD_VAR 0 5
5111: IN
5112: IFFALSE 5141
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5114: LD_VAR 0 4
5118: PUSH
5119: LD_INT 1
5121: ARRAY
5122: PPUSH
5123: LD_VAR 0 4
5127: PUSH
5128: LD_INT 2
5130: ARRAY
5131: PPUSH
5132: LD_VAR 0 1
5136: PPUSH
5137: CALL_OW 456
// end ;
5141: GO 5054
5143: POP
5144: POP
// end ;
5145: LD_VAR 0 3
5149: RET
// export function Count ( array ) ; begin
5150: LD_INT 0
5152: PPUSH
// result := array + 0 ;
5153: LD_ADDR_VAR 0 2
5157: PUSH
5158: LD_VAR 0 1
5162: PUSH
5163: LD_INT 0
5165: PLUS
5166: ST_TO_ADDR
// end ;
5167: LD_VAR 0 2
5171: RET
// export function IsEmpty ( building ) ; begin
5172: LD_INT 0
5174: PPUSH
// if not building then
5175: LD_VAR 0 1
5179: NOT
5180: IFFALSE 5184
// exit ;
5182: GO 5227
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5184: LD_ADDR_VAR 0 2
5188: PUSH
5189: LD_VAR 0 1
5193: PUSH
5194: LD_INT 22
5196: PUSH
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL_OW 255
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: LD_INT 58
5213: PUSH
5214: EMPTY
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 69
5225: IN
5226: ST_TO_ADDR
// end ;
5227: LD_VAR 0 2
5231: RET
// export function IsNotFull ( building ) ; var places ; begin
5232: LD_INT 0
5234: PPUSH
5235: PPUSH
// if not building then
5236: LD_VAR 0 1
5240: NOT
5241: IFFALSE 5245
// exit ;
5243: GO 5273
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_VAR 0 1
5254: PPUSH
5255: LD_INT 3
5257: PUSH
5258: LD_INT 62
5260: PUSH
5261: EMPTY
5262: LIST
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PPUSH
5268: CALL_OW 72
5272: ST_TO_ADDR
// end ;
5273: LD_VAR 0 2
5277: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5278: LD_INT 0
5280: PPUSH
5281: PPUSH
5282: PPUSH
5283: PPUSH
// tmp := [ ] ;
5284: LD_ADDR_VAR 0 3
5288: PUSH
5289: EMPTY
5290: ST_TO_ADDR
// list := [ ] ;
5291: LD_ADDR_VAR 0 5
5295: PUSH
5296: EMPTY
5297: ST_TO_ADDR
// for i = 16 to 25 do
5298: LD_ADDR_VAR 0 4
5302: PUSH
5303: DOUBLE
5304: LD_INT 16
5306: DEC
5307: ST_TO_ADDR
5308: LD_INT 25
5310: PUSH
5311: FOR_TO
5312: IFFALSE 5385
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5314: LD_ADDR_VAR 0 3
5318: PUSH
5319: LD_VAR 0 3
5323: PUSH
5324: LD_INT 22
5326: PUSH
5327: LD_VAR 0 1
5331: PPUSH
5332: CALL_OW 255
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: LD_INT 91
5343: PUSH
5344: LD_VAR 0 1
5348: PUSH
5349: LD_INT 6
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 30
5359: PUSH
5360: LD_VAR 0 4
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: EMPTY
5375: LIST
5376: PPUSH
5377: CALL_OW 69
5381: ADD
5382: ST_TO_ADDR
5383: GO 5311
5385: POP
5386: POP
// for i = 1 to tmp do
5387: LD_ADDR_VAR 0 4
5391: PUSH
5392: DOUBLE
5393: LD_INT 1
5395: DEC
5396: ST_TO_ADDR
5397: LD_VAR 0 3
5401: PUSH
5402: FOR_TO
5403: IFFALSE 5491
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5405: LD_ADDR_VAR 0 5
5409: PUSH
5410: LD_VAR 0 5
5414: PUSH
5415: LD_VAR 0 3
5419: PUSH
5420: LD_VAR 0 4
5424: ARRAY
5425: PPUSH
5426: CALL_OW 266
5430: PUSH
5431: LD_VAR 0 3
5435: PUSH
5436: LD_VAR 0 4
5440: ARRAY
5441: PPUSH
5442: CALL_OW 250
5446: PUSH
5447: LD_VAR 0 3
5451: PUSH
5452: LD_VAR 0 4
5456: ARRAY
5457: PPUSH
5458: CALL_OW 251
5462: PUSH
5463: LD_VAR 0 3
5467: PUSH
5468: LD_VAR 0 4
5472: ARRAY
5473: PPUSH
5474: CALL_OW 254
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: PUSH
5485: EMPTY
5486: LIST
5487: ADD
5488: ST_TO_ADDR
5489: GO 5402
5491: POP
5492: POP
// result := list ;
5493: LD_ADDR_VAR 0 2
5497: PUSH
5498: LD_VAR 0 5
5502: ST_TO_ADDR
// end ;
5503: LD_VAR 0 2
5507: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
// if not factory then
5517: LD_VAR 0 1
5521: NOT
5522: IFFALSE 5526
// exit ;
5524: GO 6129
// if control = control_apeman then
5526: LD_VAR 0 4
5530: PUSH
5531: LD_INT 5
5533: EQUAL
5534: IFFALSE 5643
// begin tmp := UnitsInside ( factory ) ;
5536: LD_ADDR_VAR 0 8
5540: PUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 313
5550: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5551: LD_VAR 0 8
5555: PPUSH
5556: LD_INT 25
5558: PUSH
5559: LD_INT 12
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: PPUSH
5566: CALL_OW 72
5570: NOT
5571: IFFALSE 5581
// control := control_manual ;
5573: LD_ADDR_VAR 0 4
5577: PUSH
5578: LD_INT 1
5580: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5581: LD_ADDR_VAR 0 8
5585: PUSH
5586: LD_VAR 0 1
5590: PPUSH
5591: CALL 5278 0 1
5595: ST_TO_ADDR
// if tmp then
5596: LD_VAR 0 8
5600: IFFALSE 5643
// begin for i in tmp do
5602: LD_ADDR_VAR 0 7
5606: PUSH
5607: LD_VAR 0 8
5611: PUSH
5612: FOR_IN
5613: IFFALSE 5641
// if i [ 1 ] = b_ext_radio then
5615: LD_VAR 0 7
5619: PUSH
5620: LD_INT 1
5622: ARRAY
5623: PUSH
5624: LD_INT 22
5626: EQUAL
5627: IFFALSE 5639
// begin control := control_remote ;
5629: LD_ADDR_VAR 0 4
5633: PUSH
5634: LD_INT 2
5636: ST_TO_ADDR
// break ;
5637: GO 5641
// end ;
5639: GO 5612
5641: POP
5642: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_VAR 0 2
5652: PPUSH
5653: LD_VAR 0 3
5657: PPUSH
5658: LD_VAR 0 4
5662: PPUSH
5663: LD_VAR 0 5
5667: PPUSH
5668: CALL_OW 448
5672: IFFALSE 5707
// begin result := [ chassis , engine , control , weapon ] ;
5674: LD_ADDR_VAR 0 6
5678: PUSH
5679: LD_VAR 0 2
5683: PUSH
5684: LD_VAR 0 3
5688: PUSH
5689: LD_VAR 0 4
5693: PUSH
5694: LD_VAR 0 5
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: ST_TO_ADDR
// exit ;
5705: GO 6129
// end ; _chassis := AvailableChassisList ( factory ) ;
5707: LD_ADDR_VAR 0 9
5711: PUSH
5712: LD_VAR 0 1
5716: PPUSH
5717: CALL_OW 475
5721: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5722: LD_ADDR_VAR 0 11
5726: PUSH
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 476
5736: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5737: LD_ADDR_VAR 0 12
5741: PUSH
5742: LD_VAR 0 1
5746: PPUSH
5747: CALL_OW 477
5751: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5752: LD_ADDR_VAR 0 10
5756: PUSH
5757: LD_VAR 0 1
5761: PPUSH
5762: CALL_OW 478
5766: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5767: LD_VAR 0 9
5771: NOT
5772: IFTRUE 5781
5774: PUSH
5775: LD_VAR 0 11
5779: NOT
5780: OR
5781: IFTRUE 5790
5783: PUSH
5784: LD_VAR 0 12
5788: NOT
5789: OR
5790: IFTRUE 5799
5792: PUSH
5793: LD_VAR 0 10
5797: NOT
5798: OR
5799: IFFALSE 5834
// begin result := [ chassis , engine , control , weapon ] ;
5801: LD_ADDR_VAR 0 6
5805: PUSH
5806: LD_VAR 0 2
5810: PUSH
5811: LD_VAR 0 3
5815: PUSH
5816: LD_VAR 0 4
5820: PUSH
5821: LD_VAR 0 5
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: ST_TO_ADDR
// exit ;
5832: GO 6129
// end ; if not chassis in _chassis then
5834: LD_VAR 0 2
5838: PUSH
5839: LD_VAR 0 9
5843: IN
5844: NOT
5845: IFFALSE 5871
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: LD_VAR 0 9
5856: PUSH
5857: LD_INT 1
5859: PPUSH
5860: LD_VAR 0 9
5864: PPUSH
5865: CALL_OW 12
5869: ARRAY
5870: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5871: LD_VAR 0 2
5875: PPUSH
5876: LD_VAR 0 3
5880: PPUSH
5881: CALL 6134 0 2
5885: NOT
5886: IFFALSE 5947
// repeat engine := _engine [ 1 ] ;
5888: LD_ADDR_VAR 0 3
5892: PUSH
5893: LD_VAR 0 11
5897: PUSH
5898: LD_INT 1
5900: ARRAY
5901: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5902: LD_ADDR_VAR 0 11
5906: PUSH
5907: LD_VAR 0 11
5911: PPUSH
5912: LD_INT 1
5914: PPUSH
5915: CALL_OW 3
5919: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5920: LD_VAR 0 2
5924: PPUSH
5925: LD_VAR 0 3
5929: PPUSH
5930: CALL 6134 0 2
5934: IFTRUE 5945
5936: PUSH
5937: LD_VAR 0 11
5941: PUSH
5942: EMPTY
5943: EQUAL
5944: OR
5945: IFFALSE 5888
// if not control in _control then
5947: LD_VAR 0 4
5951: PUSH
5952: LD_VAR 0 12
5956: IN
5957: NOT
5958: IFFALSE 5984
// control := _control [ rand ( 1 , _control ) ] ;
5960: LD_ADDR_VAR 0 4
5964: PUSH
5965: LD_VAR 0 12
5969: PUSH
5970: LD_INT 1
5972: PPUSH
5973: LD_VAR 0 12
5977: PPUSH
5978: CALL_OW 12
5982: ARRAY
5983: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5984: LD_VAR 0 2
5988: PPUSH
5989: LD_VAR 0 5
5993: PPUSH
5994: CALL 6356 0 2
5998: NOT
5999: IFFALSE 6060
// repeat weapon := _weapon [ 1 ] ;
6001: LD_ADDR_VAR 0 5
6005: PUSH
6006: LD_VAR 0 10
6010: PUSH
6011: LD_INT 1
6013: ARRAY
6014: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6015: LD_ADDR_VAR 0 10
6019: PUSH
6020: LD_VAR 0 10
6024: PPUSH
6025: LD_INT 1
6027: PPUSH
6028: CALL_OW 3
6032: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6033: LD_VAR 0 2
6037: PPUSH
6038: LD_VAR 0 5
6042: PPUSH
6043: CALL 6356 0 2
6047: IFTRUE 6058
6049: PUSH
6050: LD_VAR 0 10
6054: PUSH
6055: EMPTY
6056: EQUAL
6057: OR
6058: IFFALSE 6001
// result := [ ] ;
6060: LD_ADDR_VAR 0 6
6064: PUSH
6065: EMPTY
6066: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6067: LD_VAR 0 1
6071: PPUSH
6072: LD_VAR 0 2
6076: PPUSH
6077: LD_VAR 0 3
6081: PPUSH
6082: LD_VAR 0 4
6086: PPUSH
6087: LD_VAR 0 5
6091: PPUSH
6092: CALL_OW 448
6096: IFFALSE 6129
// result := [ chassis , engine , control , weapon ] ;
6098: LD_ADDR_VAR 0 6
6102: PUSH
6103: LD_VAR 0 2
6107: PUSH
6108: LD_VAR 0 3
6112: PUSH
6113: LD_VAR 0 4
6117: PUSH
6118: LD_VAR 0 5
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: ST_TO_ADDR
// end ;
6129: LD_VAR 0 6
6133: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6134: LD_INT 0
6136: PPUSH
// if not chassis or not engine then
6137: LD_VAR 0 1
6141: NOT
6142: IFTRUE 6151
6144: PUSH
6145: LD_VAR 0 2
6149: NOT
6150: OR
6151: IFFALSE 6155
// exit ;
6153: GO 6351
// case engine of engine_solar :
6155: LD_VAR 0 2
6159: PUSH
6160: LD_INT 2
6162: DOUBLE
6163: EQUAL
6164: IFTRUE 6168
6166: GO 6206
6168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6169: LD_ADDR_VAR 0 3
6173: PUSH
6174: LD_INT 11
6176: PUSH
6177: LD_INT 12
6179: PUSH
6180: LD_INT 13
6182: PUSH
6183: LD_INT 14
6185: PUSH
6186: LD_INT 1
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: ST_TO_ADDR
6204: GO 6335
6206: LD_INT 1
6208: DOUBLE
6209: EQUAL
6210: IFTRUE 6214
6212: GO 6276
6214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6215: LD_ADDR_VAR 0 3
6219: PUSH
6220: LD_INT 11
6222: PUSH
6223: LD_INT 12
6225: PUSH
6226: LD_INT 13
6228: PUSH
6229: LD_INT 14
6231: PUSH
6232: LD_INT 1
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: LD_INT 3
6240: PUSH
6241: LD_INT 4
6243: PUSH
6244: LD_INT 5
6246: PUSH
6247: LD_INT 21
6249: PUSH
6250: LD_INT 23
6252: PUSH
6253: LD_INT 22
6255: PUSH
6256: LD_INT 24
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: ST_TO_ADDR
6274: GO 6335
6276: LD_INT 3
6278: DOUBLE
6279: EQUAL
6280: IFTRUE 6284
6282: GO 6334
6284: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6285: LD_ADDR_VAR 0 3
6289: PUSH
6290: LD_INT 13
6292: PUSH
6293: LD_INT 14
6295: PUSH
6296: LD_INT 2
6298: PUSH
6299: LD_INT 3
6301: PUSH
6302: LD_INT 4
6304: PUSH
6305: LD_INT 5
6307: PUSH
6308: LD_INT 21
6310: PUSH
6311: LD_INT 22
6313: PUSH
6314: LD_INT 23
6316: PUSH
6317: LD_INT 24
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: ST_TO_ADDR
6332: GO 6335
6334: POP
// result := ( chassis in result ) ;
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: LD_VAR 0 1
6344: PUSH
6345: LD_VAR 0 3
6349: IN
6350: ST_TO_ADDR
// end ;
6351: LD_VAR 0 3
6355: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6356: LD_INT 0
6358: PPUSH
// if not chassis or not weapon then
6359: LD_VAR 0 1
6363: NOT
6364: IFTRUE 6373
6366: PUSH
6367: LD_VAR 0 2
6371: NOT
6372: OR
6373: IFFALSE 6377
// exit ;
6375: GO 7437
// case weapon of us_machine_gun :
6377: LD_VAR 0 2
6381: PUSH
6382: LD_INT 2
6384: DOUBLE
6385: EQUAL
6386: IFTRUE 6390
6388: GO 6420
6390: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6391: LD_ADDR_VAR 0 3
6395: PUSH
6396: LD_INT 1
6398: PUSH
6399: LD_INT 2
6401: PUSH
6402: LD_INT 3
6404: PUSH
6405: LD_INT 4
6407: PUSH
6408: LD_INT 5
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: ST_TO_ADDR
6418: GO 7421
6420: LD_INT 3
6422: DOUBLE
6423: EQUAL
6424: IFTRUE 6428
6426: GO 6458
6428: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6429: LD_ADDR_VAR 0 3
6433: PUSH
6434: LD_INT 1
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: LD_INT 3
6442: PUSH
6443: LD_INT 4
6445: PUSH
6446: LD_INT 5
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: ST_TO_ADDR
6456: GO 7421
6458: LD_INT 11
6460: DOUBLE
6461: EQUAL
6462: IFTRUE 6466
6464: GO 6496
6466: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: LD_INT 1
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 4
6483: PUSH
6484: LD_INT 5
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: ST_TO_ADDR
6494: GO 7421
6496: LD_INT 4
6498: DOUBLE
6499: EQUAL
6500: IFTRUE 6504
6502: GO 6530
6504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: LD_INT 2
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: LD_INT 4
6518: PUSH
6519: LD_INT 5
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: ST_TO_ADDR
6528: GO 7421
6530: LD_INT 5
6532: DOUBLE
6533: EQUAL
6534: IFTRUE 6538
6536: GO 6564
6538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6539: LD_ADDR_VAR 0 3
6543: PUSH
6544: LD_INT 2
6546: PUSH
6547: LD_INT 3
6549: PUSH
6550: LD_INT 4
6552: PUSH
6553: LD_INT 5
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: ST_TO_ADDR
6562: GO 7421
6564: LD_INT 9
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6572
6570: GO 6598
6572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 2
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: LD_INT 4
6586: PUSH
6587: LD_INT 5
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: ST_TO_ADDR
6596: GO 7421
6598: LD_INT 7
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6632
6606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6607: LD_ADDR_VAR 0 3
6611: PUSH
6612: LD_INT 2
6614: PUSH
6615: LD_INT 3
6617: PUSH
6618: LD_INT 4
6620: PUSH
6621: LD_INT 5
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: ST_TO_ADDR
6630: GO 7421
6632: LD_INT 12
6634: DOUBLE
6635: EQUAL
6636: IFTRUE 6640
6638: GO 6666
6640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: LD_INT 2
6648: PUSH
6649: LD_INT 3
6651: PUSH
6652: LD_INT 4
6654: PUSH
6655: LD_INT 5
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: ST_TO_ADDR
6664: GO 7421
6666: LD_INT 13
6668: DOUBLE
6669: EQUAL
6670: IFTRUE 6674
6672: GO 6700
6674: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: LD_INT 2
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: LD_INT 4
6688: PUSH
6689: LD_INT 5
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: ST_TO_ADDR
6698: GO 7421
6700: LD_INT 14
6702: DOUBLE
6703: EQUAL
6704: IFTRUE 6708
6706: GO 6726
6708: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6709: LD_ADDR_VAR 0 3
6713: PUSH
6714: LD_INT 4
6716: PUSH
6717: LD_INT 5
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: ST_TO_ADDR
6724: GO 7421
6726: LD_INT 6
6728: DOUBLE
6729: EQUAL
6730: IFTRUE 6734
6732: GO 6752
6734: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6735: LD_ADDR_VAR 0 3
6739: PUSH
6740: LD_INT 4
6742: PUSH
6743: LD_INT 5
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: ST_TO_ADDR
6750: GO 7421
6752: LD_INT 10
6754: DOUBLE
6755: EQUAL
6756: IFTRUE 6760
6758: GO 6778
6760: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6761: LD_ADDR_VAR 0 3
6765: PUSH
6766: LD_INT 4
6768: PUSH
6769: LD_INT 5
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: ST_TO_ADDR
6776: GO 7421
6778: LD_INT 22
6780: DOUBLE
6781: EQUAL
6782: IFTRUE 6786
6784: GO 6812
6786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6787: LD_ADDR_VAR 0 3
6791: PUSH
6792: LD_INT 11
6794: PUSH
6795: LD_INT 12
6797: PUSH
6798: LD_INT 13
6800: PUSH
6801: LD_INT 14
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: ST_TO_ADDR
6810: GO 7421
6812: LD_INT 23
6814: DOUBLE
6815: EQUAL
6816: IFTRUE 6820
6818: GO 6846
6820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6821: LD_ADDR_VAR 0 3
6825: PUSH
6826: LD_INT 11
6828: PUSH
6829: LD_INT 12
6831: PUSH
6832: LD_INT 13
6834: PUSH
6835: LD_INT 14
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: ST_TO_ADDR
6844: GO 7421
6846: LD_INT 24
6848: DOUBLE
6849: EQUAL
6850: IFTRUE 6854
6852: GO 6880
6854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6855: LD_ADDR_VAR 0 3
6859: PUSH
6860: LD_INT 11
6862: PUSH
6863: LD_INT 12
6865: PUSH
6866: LD_INT 13
6868: PUSH
6869: LD_INT 14
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: ST_TO_ADDR
6878: GO 7421
6880: LD_INT 30
6882: DOUBLE
6883: EQUAL
6884: IFTRUE 6888
6886: GO 6914
6888: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6889: LD_ADDR_VAR 0 3
6893: PUSH
6894: LD_INT 11
6896: PUSH
6897: LD_INT 12
6899: PUSH
6900: LD_INT 13
6902: PUSH
6903: LD_INT 14
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: ST_TO_ADDR
6912: GO 7421
6914: LD_INT 25
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 6940
6922: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6923: LD_ADDR_VAR 0 3
6927: PUSH
6928: LD_INT 13
6930: PUSH
6931: LD_INT 14
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: ST_TO_ADDR
6938: GO 7421
6940: LD_INT 27
6942: DOUBLE
6943: EQUAL
6944: IFTRUE 6948
6946: GO 6966
6948: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6949: LD_ADDR_VAR 0 3
6953: PUSH
6954: LD_INT 13
6956: PUSH
6957: LD_INT 14
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: ST_TO_ADDR
6964: GO 7421
6966: LD_INT 92
6968: DOUBLE
6969: EQUAL
6970: IFTRUE 6974
6972: GO 7000
6974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6975: LD_ADDR_VAR 0 3
6979: PUSH
6980: LD_INT 11
6982: PUSH
6983: LD_INT 12
6985: PUSH
6986: LD_INT 13
6988: PUSH
6989: LD_INT 14
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: ST_TO_ADDR
6998: GO 7421
7000: LD_INT 28
7002: DOUBLE
7003: EQUAL
7004: IFTRUE 7008
7006: GO 7026
7008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7009: LD_ADDR_VAR 0 3
7013: PUSH
7014: LD_INT 13
7016: PUSH
7017: LD_INT 14
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: ST_TO_ADDR
7024: GO 7421
7026: LD_INT 29
7028: DOUBLE
7029: EQUAL
7030: IFTRUE 7034
7032: GO 7052
7034: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7035: LD_ADDR_VAR 0 3
7039: PUSH
7040: LD_INT 13
7042: PUSH
7043: LD_INT 14
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: ST_TO_ADDR
7050: GO 7421
7052: LD_INT 31
7054: DOUBLE
7055: EQUAL
7056: IFTRUE 7060
7058: GO 7078
7060: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_INT 13
7068: PUSH
7069: LD_INT 14
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: ST_TO_ADDR
7076: GO 7421
7078: LD_INT 26
7080: DOUBLE
7081: EQUAL
7082: IFTRUE 7086
7084: GO 7104
7086: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7087: LD_ADDR_VAR 0 3
7091: PUSH
7092: LD_INT 13
7094: PUSH
7095: LD_INT 14
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: ST_TO_ADDR
7102: GO 7421
7104: LD_INT 42
7106: DOUBLE
7107: EQUAL
7108: IFTRUE 7112
7110: GO 7138
7112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_INT 21
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 23
7126: PUSH
7127: LD_INT 24
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: ST_TO_ADDR
7136: GO 7421
7138: LD_INT 43
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7172
7146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 24
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: ST_TO_ADDR
7170: GO 7421
7172: LD_INT 44
7174: DOUBLE
7175: EQUAL
7176: IFTRUE 7180
7178: GO 7206
7180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7181: LD_ADDR_VAR 0 3
7185: PUSH
7186: LD_INT 21
7188: PUSH
7189: LD_INT 22
7191: PUSH
7192: LD_INT 23
7194: PUSH
7195: LD_INT 24
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: ST_TO_ADDR
7204: GO 7421
7206: LD_INT 45
7208: DOUBLE
7209: EQUAL
7210: IFTRUE 7214
7212: GO 7240
7214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7215: LD_ADDR_VAR 0 3
7219: PUSH
7220: LD_INT 21
7222: PUSH
7223: LD_INT 22
7225: PUSH
7226: LD_INT 23
7228: PUSH
7229: LD_INT 24
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: ST_TO_ADDR
7238: GO 7421
7240: LD_INT 49
7242: DOUBLE
7243: EQUAL
7244: IFTRUE 7248
7246: GO 7274
7248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7249: LD_ADDR_VAR 0 3
7253: PUSH
7254: LD_INT 21
7256: PUSH
7257: LD_INT 22
7259: PUSH
7260: LD_INT 23
7262: PUSH
7263: LD_INT 24
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: ST_TO_ADDR
7272: GO 7421
7274: LD_INT 51
7276: DOUBLE
7277: EQUAL
7278: IFTRUE 7282
7280: GO 7308
7282: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: LD_INT 21
7290: PUSH
7291: LD_INT 22
7293: PUSH
7294: LD_INT 23
7296: PUSH
7297: LD_INT 24
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: ST_TO_ADDR
7306: GO 7421
7308: LD_INT 52
7310: DOUBLE
7311: EQUAL
7312: IFTRUE 7316
7314: GO 7342
7316: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 22
7327: PUSH
7328: LD_INT 23
7330: PUSH
7331: LD_INT 24
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: ST_TO_ADDR
7340: GO 7421
7342: LD_INT 53
7344: DOUBLE
7345: EQUAL
7346: IFTRUE 7350
7348: GO 7368
7350: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7351: LD_ADDR_VAR 0 3
7355: PUSH
7356: LD_INT 23
7358: PUSH
7359: LD_INT 24
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: ST_TO_ADDR
7366: GO 7421
7368: LD_INT 46
7370: DOUBLE
7371: EQUAL
7372: IFTRUE 7376
7374: GO 7394
7376: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7377: LD_ADDR_VAR 0 3
7381: PUSH
7382: LD_INT 23
7384: PUSH
7385: LD_INT 24
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: ST_TO_ADDR
7392: GO 7421
7394: LD_INT 47
7396: DOUBLE
7397: EQUAL
7398: IFTRUE 7402
7400: GO 7420
7402: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7403: LD_ADDR_VAR 0 3
7407: PUSH
7408: LD_INT 23
7410: PUSH
7411: LD_INT 24
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: ST_TO_ADDR
7418: GO 7421
7420: POP
// result := ( chassis in result ) ;
7421: LD_ADDR_VAR 0 3
7425: PUSH
7426: LD_VAR 0 1
7430: PUSH
7431: LD_VAR 0 3
7435: IN
7436: ST_TO_ADDR
// end ;
7437: LD_VAR 0 3
7441: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7442: LD_INT 0
7444: PPUSH
7445: PPUSH
7446: PPUSH
7447: PPUSH
7448: PPUSH
7449: PPUSH
7450: PPUSH
// result := array ;
7451: LD_ADDR_VAR 0 5
7455: PUSH
7456: LD_VAR 0 1
7460: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7461: LD_VAR 0 1
7465: NOT
7466: IFTRUE 7475
7468: PUSH
7469: LD_VAR 0 2
7473: NOT
7474: OR
7475: IFTRUE 7484
7477: PUSH
7478: LD_VAR 0 3
7482: NOT
7483: OR
7484: IFTRUE 7498
7486: PUSH
7487: LD_VAR 0 2
7491: PUSH
7492: LD_VAR 0 1
7496: GREATER
7497: OR
7498: IFTRUE 7512
7500: PUSH
7501: LD_VAR 0 3
7505: PUSH
7506: LD_VAR 0 1
7510: GREATER
7511: OR
7512: IFFALSE 7516
// exit ;
7514: GO 7812
// if direction then
7516: LD_VAR 0 4
7520: IFFALSE 7584
// begin d := 1 ;
7522: LD_ADDR_VAR 0 9
7526: PUSH
7527: LD_INT 1
7529: ST_TO_ADDR
// if i_from > i_to then
7530: LD_VAR 0 2
7534: PUSH
7535: LD_VAR 0 3
7539: GREATER
7540: IFFALSE 7566
// length := ( array - i_from ) + i_to else
7542: LD_ADDR_VAR 0 11
7546: PUSH
7547: LD_VAR 0 1
7551: PUSH
7552: LD_VAR 0 2
7556: MINUS
7557: PUSH
7558: LD_VAR 0 3
7562: PLUS
7563: ST_TO_ADDR
7564: GO 7582
// length := i_to - i_from ;
7566: LD_ADDR_VAR 0 11
7570: PUSH
7571: LD_VAR 0 3
7575: PUSH
7576: LD_VAR 0 2
7580: MINUS
7581: ST_TO_ADDR
// end else
7582: GO 7645
// begin d := - 1 ;
7584: LD_ADDR_VAR 0 9
7588: PUSH
7589: LD_INT 1
7591: NEG
7592: ST_TO_ADDR
// if i_from > i_to then
7593: LD_VAR 0 2
7597: PUSH
7598: LD_VAR 0 3
7602: GREATER
7603: IFFALSE 7623
// length := i_from - i_to else
7605: LD_ADDR_VAR 0 11
7609: PUSH
7610: LD_VAR 0 2
7614: PUSH
7615: LD_VAR 0 3
7619: MINUS
7620: ST_TO_ADDR
7621: GO 7645
// length := ( array - i_to ) + i_from ;
7623: LD_ADDR_VAR 0 11
7627: PUSH
7628: LD_VAR 0 1
7632: PUSH
7633: LD_VAR 0 3
7637: MINUS
7638: PUSH
7639: LD_VAR 0 2
7643: PLUS
7644: ST_TO_ADDR
// end ; if not length then
7645: LD_VAR 0 11
7649: NOT
7650: IFFALSE 7654
// exit ;
7652: GO 7812
// tmp := array ;
7654: LD_ADDR_VAR 0 10
7658: PUSH
7659: LD_VAR 0 1
7663: ST_TO_ADDR
// for i = 1 to length do
7664: LD_ADDR_VAR 0 6
7668: PUSH
7669: DOUBLE
7670: LD_INT 1
7672: DEC
7673: ST_TO_ADDR
7674: LD_VAR 0 11
7678: PUSH
7679: FOR_TO
7680: IFFALSE 7800
// begin for j = 1 to array do
7682: LD_ADDR_VAR 0 7
7686: PUSH
7687: DOUBLE
7688: LD_INT 1
7690: DEC
7691: ST_TO_ADDR
7692: LD_VAR 0 1
7696: PUSH
7697: FOR_TO
7698: IFFALSE 7786
// begin k := j + d ;
7700: LD_ADDR_VAR 0 8
7704: PUSH
7705: LD_VAR 0 7
7709: PUSH
7710: LD_VAR 0 9
7714: PLUS
7715: ST_TO_ADDR
// if k > array then
7716: LD_VAR 0 8
7720: PUSH
7721: LD_VAR 0 1
7725: GREATER
7726: IFFALSE 7736
// k := 1 ;
7728: LD_ADDR_VAR 0 8
7732: PUSH
7733: LD_INT 1
7735: ST_TO_ADDR
// if not k then
7736: LD_VAR 0 8
7740: NOT
7741: IFFALSE 7753
// k := array ;
7743: LD_ADDR_VAR 0 8
7747: PUSH
7748: LD_VAR 0 1
7752: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7753: LD_ADDR_VAR 0 10
7757: PUSH
7758: LD_VAR 0 10
7762: PPUSH
7763: LD_VAR 0 8
7767: PPUSH
7768: LD_VAR 0 1
7772: PUSH
7773: LD_VAR 0 7
7777: ARRAY
7778: PPUSH
7779: CALL_OW 1
7783: ST_TO_ADDR
// end ;
7784: GO 7697
7786: POP
7787: POP
// array := tmp ;
7788: LD_ADDR_VAR 0 1
7792: PUSH
7793: LD_VAR 0 10
7797: ST_TO_ADDR
// end ;
7798: GO 7679
7800: POP
7801: POP
// result := array ;
7802: LD_ADDR_VAR 0 5
7806: PUSH
7807: LD_VAR 0 1
7811: ST_TO_ADDR
// end ;
7812: LD_VAR 0 5
7816: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7817: LD_INT 0
7819: PPUSH
7820: PPUSH
// result := 0 ;
7821: LD_ADDR_VAR 0 3
7825: PUSH
7826: LD_INT 0
7828: ST_TO_ADDR
// if not array or not value in array then
7829: LD_VAR 0 1
7833: NOT
7834: IFTRUE 7849
7836: PUSH
7837: LD_VAR 0 2
7841: PUSH
7842: LD_VAR 0 1
7846: IN
7847: NOT
7848: OR
7849: IFFALSE 7853
// exit ;
7851: GO 7907
// for i = 1 to array do
7853: LD_ADDR_VAR 0 4
7857: PUSH
7858: DOUBLE
7859: LD_INT 1
7861: DEC
7862: ST_TO_ADDR
7863: LD_VAR 0 1
7867: PUSH
7868: FOR_TO
7869: IFFALSE 7905
// if value = array [ i ] then
7871: LD_VAR 0 2
7875: PUSH
7876: LD_VAR 0 1
7880: PUSH
7881: LD_VAR 0 4
7885: ARRAY
7886: EQUAL
7887: IFFALSE 7903
// begin result := i ;
7889: LD_ADDR_VAR 0 3
7893: PUSH
7894: LD_VAR 0 4
7898: ST_TO_ADDR
// exit ;
7899: POP
7900: POP
7901: GO 7907
// end ;
7903: GO 7868
7905: POP
7906: POP
// end ;
7907: LD_VAR 0 3
7911: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7912: LD_INT 0
7914: PPUSH
// vc_chassis := chassis ;
7915: LD_ADDR_OWVAR 37
7919: PUSH
7920: LD_VAR 0 1
7924: ST_TO_ADDR
// vc_engine := engine ;
7925: LD_ADDR_OWVAR 39
7929: PUSH
7930: LD_VAR 0 2
7934: ST_TO_ADDR
// vc_control := control ;
7935: LD_ADDR_OWVAR 38
7939: PUSH
7940: LD_VAR 0 3
7944: ST_TO_ADDR
// vc_weapon := weapon ;
7945: LD_ADDR_OWVAR 40
7949: PUSH
7950: LD_VAR 0 4
7954: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7955: LD_ADDR_OWVAR 41
7959: PUSH
7960: LD_VAR 0 5
7964: ST_TO_ADDR
// end ;
7965: LD_VAR 0 6
7969: RET
// export function WantPlant ( unit ) ; var task ; begin
7970: LD_INT 0
7972: PPUSH
7973: PPUSH
// result := false ;
7974: LD_ADDR_VAR 0 2
7978: PUSH
7979: LD_INT 0
7981: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7982: LD_ADDR_VAR 0 3
7986: PUSH
7987: LD_VAR 0 1
7991: PPUSH
7992: CALL_OW 437
7996: ST_TO_ADDR
// if task then
7997: LD_VAR 0 3
8001: IFFALSE 8029
// if task [ 1 ] [ 1 ] = p then
8003: LD_VAR 0 3
8007: PUSH
8008: LD_INT 1
8010: ARRAY
8011: PUSH
8012: LD_INT 1
8014: ARRAY
8015: PUSH
8016: LD_STRING p
8018: EQUAL
8019: IFFALSE 8029
// result := true ;
8021: LD_ADDR_VAR 0 2
8025: PUSH
8026: LD_INT 1
8028: ST_TO_ADDR
// end ;
8029: LD_VAR 0 2
8033: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8034: LD_INT 0
8036: PPUSH
8037: PPUSH
8038: PPUSH
8039: PPUSH
// if pos < 1 then
8040: LD_VAR 0 2
8044: PUSH
8045: LD_INT 1
8047: LESS
8048: IFFALSE 8052
// exit ;
8050: GO 8355
// if pos = 1 then
8052: LD_VAR 0 2
8056: PUSH
8057: LD_INT 1
8059: EQUAL
8060: IFFALSE 8093
// result := Replace ( arr , pos [ 1 ] , value ) else
8062: LD_ADDR_VAR 0 4
8066: PUSH
8067: LD_VAR 0 1
8071: PPUSH
8072: LD_VAR 0 2
8076: PUSH
8077: LD_INT 1
8079: ARRAY
8080: PPUSH
8081: LD_VAR 0 3
8085: PPUSH
8086: CALL_OW 1
8090: ST_TO_ADDR
8091: GO 8355
// begin tmp := arr ;
8093: LD_ADDR_VAR 0 6
8097: PUSH
8098: LD_VAR 0 1
8102: ST_TO_ADDR
// s_arr := [ tmp ] ;
8103: LD_ADDR_VAR 0 7
8107: PUSH
8108: LD_VAR 0 6
8112: PUSH
8113: EMPTY
8114: LIST
8115: ST_TO_ADDR
// for i = 1 to pos - 1 do
8116: LD_ADDR_VAR 0 5
8120: PUSH
8121: DOUBLE
8122: LD_INT 1
8124: DEC
8125: ST_TO_ADDR
8126: LD_VAR 0 2
8130: PUSH
8131: LD_INT 1
8133: MINUS
8134: PUSH
8135: FOR_TO
8136: IFFALSE 8181
// begin tmp := tmp [ pos [ i ] ] ;
8138: LD_ADDR_VAR 0 6
8142: PUSH
8143: LD_VAR 0 6
8147: PUSH
8148: LD_VAR 0 2
8152: PUSH
8153: LD_VAR 0 5
8157: ARRAY
8158: ARRAY
8159: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8160: LD_ADDR_VAR 0 7
8164: PUSH
8165: LD_VAR 0 7
8169: PUSH
8170: LD_VAR 0 6
8174: PUSH
8175: EMPTY
8176: LIST
8177: ADD
8178: ST_TO_ADDR
// end ;
8179: GO 8135
8181: POP
8182: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8183: LD_ADDR_VAR 0 6
8187: PUSH
8188: LD_VAR 0 6
8192: PPUSH
8193: LD_VAR 0 2
8197: PUSH
8198: LD_VAR 0 2
8202: ARRAY
8203: PPUSH
8204: LD_VAR 0 3
8208: PPUSH
8209: CALL_OW 1
8213: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8214: LD_ADDR_VAR 0 7
8218: PUSH
8219: LD_VAR 0 7
8223: PPUSH
8224: LD_VAR 0 7
8228: PPUSH
8229: LD_VAR 0 6
8233: PPUSH
8234: CALL_OW 1
8238: ST_TO_ADDR
// for i = s_arr downto 2 do
8239: LD_ADDR_VAR 0 5
8243: PUSH
8244: DOUBLE
8245: LD_VAR 0 7
8249: INC
8250: ST_TO_ADDR
8251: LD_INT 2
8253: PUSH
8254: FOR_DOWNTO
8255: IFFALSE 8339
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8257: LD_ADDR_VAR 0 6
8261: PUSH
8262: LD_VAR 0 7
8266: PUSH
8267: LD_VAR 0 5
8271: PUSH
8272: LD_INT 1
8274: MINUS
8275: ARRAY
8276: PPUSH
8277: LD_VAR 0 2
8281: PUSH
8282: LD_VAR 0 5
8286: PUSH
8287: LD_INT 1
8289: MINUS
8290: ARRAY
8291: PPUSH
8292: LD_VAR 0 7
8296: PUSH
8297: LD_VAR 0 5
8301: ARRAY
8302: PPUSH
8303: CALL_OW 1
8307: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8308: LD_ADDR_VAR 0 7
8312: PUSH
8313: LD_VAR 0 7
8317: PPUSH
8318: LD_VAR 0 5
8322: PUSH
8323: LD_INT 1
8325: MINUS
8326: PPUSH
8327: LD_VAR 0 6
8331: PPUSH
8332: CALL_OW 1
8336: ST_TO_ADDR
// end ;
8337: GO 8254
8339: POP
8340: POP
// result := s_arr [ 1 ] ;
8341: LD_ADDR_VAR 0 4
8345: PUSH
8346: LD_VAR 0 7
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: ST_TO_ADDR
// end ; end ;
8355: LD_VAR 0 4
8359: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8360: LD_INT 0
8362: PPUSH
8363: PPUSH
// if not list then
8364: LD_VAR 0 1
8368: NOT
8369: IFFALSE 8373
// exit ;
8371: GO 8464
// i := list [ pos1 ] ;
8373: LD_ADDR_VAR 0 5
8377: PUSH
8378: LD_VAR 0 1
8382: PUSH
8383: LD_VAR 0 2
8387: ARRAY
8388: ST_TO_ADDR
// if not i then
8389: LD_VAR 0 5
8393: NOT
8394: IFFALSE 8398
// exit ;
8396: GO 8464
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8398: LD_ADDR_VAR 0 1
8402: PUSH
8403: LD_VAR 0 1
8407: PPUSH
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_VAR 0 1
8417: PUSH
8418: LD_VAR 0 3
8422: ARRAY
8423: PPUSH
8424: CALL_OW 1
8428: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8429: LD_ADDR_VAR 0 1
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: LD_VAR 0 3
8443: PPUSH
8444: LD_VAR 0 5
8448: PPUSH
8449: CALL_OW 1
8453: ST_TO_ADDR
// result := list ;
8454: LD_ADDR_VAR 0 4
8458: PUSH
8459: LD_VAR 0 1
8463: ST_TO_ADDR
// end ;
8464: LD_VAR 0 4
8468: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8469: LD_INT 0
8471: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8472: LD_ADDR_VAR 0 5
8476: PUSH
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 250
8486: PPUSH
8487: LD_VAR 0 1
8491: PPUSH
8492: CALL_OW 251
8496: PPUSH
8497: LD_VAR 0 2
8501: PPUSH
8502: LD_VAR 0 3
8506: PPUSH
8507: LD_VAR 0 4
8511: PPUSH
8512: CALL 8894 0 5
8516: ST_TO_ADDR
// end ;
8517: LD_VAR 0 5
8521: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
8526: PPUSH
8527: PPUSH
// if not list or not unit then
8528: LD_VAR 0 2
8532: NOT
8533: IFTRUE 8542
8535: PUSH
8536: LD_VAR 0 1
8540: NOT
8541: OR
8542: IFFALSE 8546
// exit ;
8544: GO 8889
// result := [ ] ;
8546: LD_ADDR_VAR 0 5
8550: PUSH
8551: EMPTY
8552: ST_TO_ADDR
// for i in list do
8553: LD_ADDR_VAR 0 6
8557: PUSH
8558: LD_VAR 0 2
8562: PUSH
8563: FOR_IN
8564: IFFALSE 8782
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8566: LD_ADDR_VAR 0 8
8570: PUSH
8571: LD_VAR 0 1
8575: PPUSH
8576: LD_VAR 0 6
8580: PUSH
8581: LD_INT 1
8583: ARRAY
8584: PPUSH
8585: LD_VAR 0 6
8589: PUSH
8590: LD_INT 2
8592: ARRAY
8593: PPUSH
8594: CALL_OW 297
8598: ST_TO_ADDR
// if not Count ( result ) then
8599: LD_VAR 0 5
8603: PPUSH
8604: CALL 5150 0 1
8608: NOT
8609: IFFALSE 8642
// begin result := Join ( result , [ i , tmp ] ) ;
8611: LD_ADDR_VAR 0 5
8615: PUSH
8616: LD_VAR 0 5
8620: PPUSH
8621: LD_VAR 0 6
8625: PUSH
8626: LD_VAR 0 8
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PPUSH
8635: CALL 41082 0 2
8639: ST_TO_ADDR
// continue ;
8640: GO 8563
// end ; if result [ result ] [ 2 ] <= tmp then
8642: LD_VAR 0 5
8646: PUSH
8647: LD_VAR 0 5
8651: ARRAY
8652: PUSH
8653: LD_INT 2
8655: ARRAY
8656: PUSH
8657: LD_VAR 0 8
8661: LESSEQUAL
8662: IFFALSE 8695
// result := Join ( result , [ i , tmp ] ) else
8664: LD_ADDR_VAR 0 5
8668: PUSH
8669: LD_VAR 0 5
8673: PPUSH
8674: LD_VAR 0 6
8678: PUSH
8679: LD_VAR 0 8
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PPUSH
8688: CALL 41082 0 2
8692: ST_TO_ADDR
8693: GO 8780
// begin for j := 1 to Count ( result ) do
8695: LD_ADDR_VAR 0 7
8699: PUSH
8700: DOUBLE
8701: LD_INT 1
8703: DEC
8704: ST_TO_ADDR
8705: LD_VAR 0 5
8709: PPUSH
8710: CALL 5150 0 1
8714: PUSH
8715: FOR_TO
8716: IFFALSE 8778
// begin if tmp < result [ j ] [ 2 ] then
8718: LD_VAR 0 8
8722: PUSH
8723: LD_VAR 0 5
8727: PUSH
8728: LD_VAR 0 7
8732: ARRAY
8733: PUSH
8734: LD_INT 2
8736: ARRAY
8737: LESS
8738: IFFALSE 8776
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8740: LD_ADDR_VAR 0 5
8744: PUSH
8745: LD_VAR 0 5
8749: PPUSH
8750: LD_VAR 0 7
8754: PPUSH
8755: LD_VAR 0 6
8759: PUSH
8760: LD_VAR 0 8
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PPUSH
8769: CALL_OW 2
8773: ST_TO_ADDR
// break ;
8774: GO 8778
// end ; end ;
8776: GO 8715
8778: POP
8779: POP
// end ; end ;
8780: GO 8563
8782: POP
8783: POP
// if result and not asc then
8784: LD_VAR 0 5
8788: IFFALSE 8797
8790: PUSH
8791: LD_VAR 0 3
8795: NOT
8796: AND
8797: IFFALSE 8814
// result := ReverseArray ( result ) ;
8799: LD_ADDR_VAR 0 5
8803: PUSH
8804: LD_VAR 0 5
8808: PPUSH
8809: CALL 36172 0 1
8813: ST_TO_ADDR
// tmp := [ ] ;
8814: LD_ADDR_VAR 0 8
8818: PUSH
8819: EMPTY
8820: ST_TO_ADDR
// if mode then
8821: LD_VAR 0 4
8825: IFFALSE 8889
// begin for i := 1 to result do
8827: LD_ADDR_VAR 0 6
8831: PUSH
8832: DOUBLE
8833: LD_INT 1
8835: DEC
8836: ST_TO_ADDR
8837: LD_VAR 0 5
8841: PUSH
8842: FOR_TO
8843: IFFALSE 8877
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8845: LD_ADDR_VAR 0 8
8849: PUSH
8850: LD_VAR 0 8
8854: PPUSH
8855: LD_VAR 0 5
8859: PUSH
8860: LD_VAR 0 6
8864: ARRAY
8865: PUSH
8866: LD_INT 1
8868: ARRAY
8869: PPUSH
8870: CALL 41082 0 2
8874: ST_TO_ADDR
8875: GO 8842
8877: POP
8878: POP
// result := tmp ;
8879: LD_ADDR_VAR 0 5
8883: PUSH
8884: LD_VAR 0 8
8888: ST_TO_ADDR
// end ; end ;
8889: LD_VAR 0 5
8893: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8894: LD_INT 0
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
// if not list then
8900: LD_VAR 0 3
8904: NOT
8905: IFFALSE 8909
// exit ;
8907: GO 9299
// result := [ ] ;
8909: LD_ADDR_VAR 0 6
8913: PUSH
8914: EMPTY
8915: ST_TO_ADDR
// for i in list do
8916: LD_ADDR_VAR 0 7
8920: PUSH
8921: LD_VAR 0 3
8925: PUSH
8926: FOR_IN
8927: IFFALSE 9129
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8929: LD_ADDR_VAR 0 9
8933: PUSH
8934: LD_VAR 0 7
8938: PPUSH
8939: LD_VAR 0 1
8943: PPUSH
8944: LD_VAR 0 2
8948: PPUSH
8949: CALL_OW 297
8953: ST_TO_ADDR
// if not result then
8954: LD_VAR 0 6
8958: NOT
8959: IFFALSE 8985
// result := [ [ i , tmp ] ] else
8961: LD_ADDR_VAR 0 6
8965: PUSH
8966: LD_VAR 0 7
8970: PUSH
8971: LD_VAR 0 9
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: ST_TO_ADDR
8983: GO 9127
// begin if result [ result ] [ 2 ] <= tmp then
8985: LD_VAR 0 6
8989: PUSH
8990: LD_VAR 0 6
8994: ARRAY
8995: PUSH
8996: LD_INT 2
8998: ARRAY
8999: PUSH
9000: LD_VAR 0 9
9004: LESSEQUAL
9005: IFFALSE 9047
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9007: LD_ADDR_VAR 0 6
9011: PUSH
9012: LD_VAR 0 6
9016: PPUSH
9017: LD_VAR 0 6
9021: PUSH
9022: LD_INT 1
9024: PLUS
9025: PPUSH
9026: LD_VAR 0 7
9030: PUSH
9031: LD_VAR 0 9
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PPUSH
9040: CALL_OW 2
9044: ST_TO_ADDR
9045: GO 9127
// for j := 1 to result do
9047: LD_ADDR_VAR 0 8
9051: PUSH
9052: DOUBLE
9053: LD_INT 1
9055: DEC
9056: ST_TO_ADDR
9057: LD_VAR 0 6
9061: PUSH
9062: FOR_TO
9063: IFFALSE 9125
// begin if tmp < result [ j ] [ 2 ] then
9065: LD_VAR 0 9
9069: PUSH
9070: LD_VAR 0 6
9074: PUSH
9075: LD_VAR 0 8
9079: ARRAY
9080: PUSH
9081: LD_INT 2
9083: ARRAY
9084: LESS
9085: IFFALSE 9123
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9087: LD_ADDR_VAR 0 6
9091: PUSH
9092: LD_VAR 0 6
9096: PPUSH
9097: LD_VAR 0 8
9101: PPUSH
9102: LD_VAR 0 7
9106: PUSH
9107: LD_VAR 0 9
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 2
9120: ST_TO_ADDR
// break ;
9121: GO 9125
// end ; end ;
9123: GO 9062
9125: POP
9126: POP
// end ; end ;
9127: GO 8926
9129: POP
9130: POP
// if result and not asc then
9131: LD_VAR 0 6
9135: IFFALSE 9144
9137: PUSH
9138: LD_VAR 0 4
9142: NOT
9143: AND
9144: IFFALSE 9219
// begin tmp := result ;
9146: LD_ADDR_VAR 0 9
9150: PUSH
9151: LD_VAR 0 6
9155: ST_TO_ADDR
// for i = tmp downto 1 do
9156: LD_ADDR_VAR 0 7
9160: PUSH
9161: DOUBLE
9162: LD_VAR 0 9
9166: INC
9167: ST_TO_ADDR
9168: LD_INT 1
9170: PUSH
9171: FOR_DOWNTO
9172: IFFALSE 9217
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9174: LD_ADDR_VAR 0 6
9178: PUSH
9179: LD_VAR 0 6
9183: PPUSH
9184: LD_VAR 0 9
9188: PUSH
9189: LD_VAR 0 7
9193: MINUS
9194: PUSH
9195: LD_INT 1
9197: PLUS
9198: PPUSH
9199: LD_VAR 0 9
9203: PUSH
9204: LD_VAR 0 7
9208: ARRAY
9209: PPUSH
9210: CALL_OW 1
9214: ST_TO_ADDR
9215: GO 9171
9217: POP
9218: POP
// end ; tmp := [ ] ;
9219: LD_ADDR_VAR 0 9
9223: PUSH
9224: EMPTY
9225: ST_TO_ADDR
// if mode then
9226: LD_VAR 0 5
9230: IFFALSE 9299
// begin for i = 1 to result do
9232: LD_ADDR_VAR 0 7
9236: PUSH
9237: DOUBLE
9238: LD_INT 1
9240: DEC
9241: ST_TO_ADDR
9242: LD_VAR 0 6
9246: PUSH
9247: FOR_TO
9248: IFFALSE 9287
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9250: LD_ADDR_VAR 0 9
9254: PUSH
9255: LD_VAR 0 9
9259: PPUSH
9260: LD_VAR 0 7
9264: PPUSH
9265: LD_VAR 0 6
9269: PUSH
9270: LD_VAR 0 7
9274: ARRAY
9275: PUSH
9276: LD_INT 1
9278: ARRAY
9279: PPUSH
9280: CALL_OW 1
9284: ST_TO_ADDR
9285: GO 9247
9287: POP
9288: POP
// result := tmp ;
9289: LD_ADDR_VAR 0 6
9293: PUSH
9294: LD_VAR 0 9
9298: ST_TO_ADDR
// end ; end ;
9299: LD_VAR 0 6
9303: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9304: LD_INT 0
9306: PPUSH
9307: PPUSH
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9312: LD_ADDR_VAR 0 5
9316: PUSH
9317: LD_INT 0
9319: PUSH
9320: LD_INT 0
9322: PUSH
9323: LD_INT 0
9325: PUSH
9326: EMPTY
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: ST_TO_ADDR
// if not x or not y then
9334: LD_VAR 0 2
9338: NOT
9339: IFTRUE 9348
9341: PUSH
9342: LD_VAR 0 3
9346: NOT
9347: OR
9348: IFFALSE 9352
// exit ;
9350: GO 11008
// if not range then
9352: LD_VAR 0 4
9356: NOT
9357: IFFALSE 9367
// range := 10 ;
9359: LD_ADDR_VAR 0 4
9363: PUSH
9364: LD_INT 10
9366: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9367: LD_ADDR_VAR 0 8
9371: PUSH
9372: LD_INT 81
9374: PUSH
9375: LD_VAR 0 1
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 92
9386: PUSH
9387: LD_VAR 0 2
9391: PUSH
9392: LD_VAR 0 3
9396: PUSH
9397: LD_VAR 0 4
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: LD_INT 21
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: LIST
9429: PPUSH
9430: CALL_OW 69
9434: ST_TO_ADDR
// if not tmp then
9435: LD_VAR 0 8
9439: NOT
9440: IFFALSE 9444
// exit ;
9442: GO 11008
// for i in tmp do
9444: LD_ADDR_VAR 0 6
9448: PUSH
9449: LD_VAR 0 8
9453: PUSH
9454: FOR_IN
9455: IFFALSE 10983
// begin points := [ 0 , 0 , 0 ] ;
9457: LD_ADDR_VAR 0 9
9461: PUSH
9462: LD_INT 0
9464: PUSH
9465: LD_INT 0
9467: PUSH
9468: LD_INT 0
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: LIST
9475: ST_TO_ADDR
// bpoints := 1 ;
9476: LD_ADDR_VAR 0 10
9480: PUSH
9481: LD_INT 1
9483: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9484: LD_VAR 0 6
9488: PPUSH
9489: CALL_OW 247
9493: PUSH
9494: LD_INT 1
9496: DOUBLE
9497: EQUAL
9498: IFTRUE 9502
9500: GO 10084
9502: POP
// begin if GetClass ( i ) = 1 then
9503: LD_VAR 0 6
9507: PPUSH
9508: CALL_OW 257
9512: PUSH
9513: LD_INT 1
9515: EQUAL
9516: IFFALSE 9537
// points := [ 10 , 5 , 3 ] ;
9518: LD_ADDR_VAR 0 9
9522: PUSH
9523: LD_INT 10
9525: PUSH
9526: LD_INT 5
9528: PUSH
9529: LD_INT 3
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9537: LD_VAR 0 6
9541: PPUSH
9542: CALL_OW 257
9546: PUSH
9547: LD_INT 2
9549: PUSH
9550: LD_INT 3
9552: PUSH
9553: LD_INT 4
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: IN
9561: IFFALSE 9582
// points := [ 3 , 2 , 1 ] ;
9563: LD_ADDR_VAR 0 9
9567: PUSH
9568: LD_INT 3
9570: PUSH
9571: LD_INT 2
9573: PUSH
9574: LD_INT 1
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9582: LD_VAR 0 6
9586: PPUSH
9587: CALL_OW 257
9591: PUSH
9592: LD_INT 5
9594: EQUAL
9595: IFFALSE 9616
// points := [ 130 , 5 , 2 ] ;
9597: LD_ADDR_VAR 0 9
9601: PUSH
9602: LD_INT 130
9604: PUSH
9605: LD_INT 5
9607: PUSH
9608: LD_INT 2
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9616: LD_VAR 0 6
9620: PPUSH
9621: CALL_OW 257
9625: PUSH
9626: LD_INT 8
9628: EQUAL
9629: IFFALSE 9650
// points := [ 35 , 35 , 30 ] ;
9631: LD_ADDR_VAR 0 9
9635: PUSH
9636: LD_INT 35
9638: PUSH
9639: LD_INT 35
9641: PUSH
9642: LD_INT 30
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9650: LD_VAR 0 6
9654: PPUSH
9655: CALL_OW 257
9659: PUSH
9660: LD_INT 9
9662: EQUAL
9663: IFFALSE 9684
// points := [ 20 , 55 , 40 ] ;
9665: LD_ADDR_VAR 0 9
9669: PUSH
9670: LD_INT 20
9672: PUSH
9673: LD_INT 55
9675: PUSH
9676: LD_INT 40
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: LIST
9683: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9684: LD_VAR 0 6
9688: PPUSH
9689: CALL_OW 257
9693: PUSH
9694: LD_INT 12
9696: PUSH
9697: LD_INT 16
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: IN
9704: IFFALSE 9725
// points := [ 5 , 3 , 2 ] ;
9706: LD_ADDR_VAR 0 9
9710: PUSH
9711: LD_INT 5
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: LD_INT 2
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9725: LD_VAR 0 6
9729: PPUSH
9730: CALL_OW 257
9734: PUSH
9735: LD_INT 17
9737: EQUAL
9738: IFFALSE 9759
// points := [ 100 , 50 , 75 ] ;
9740: LD_ADDR_VAR 0 9
9744: PUSH
9745: LD_INT 100
9747: PUSH
9748: LD_INT 50
9750: PUSH
9751: LD_INT 75
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9759: LD_VAR 0 6
9763: PPUSH
9764: CALL_OW 257
9768: PUSH
9769: LD_INT 15
9771: EQUAL
9772: IFFALSE 9793
// points := [ 10 , 5 , 3 ] ;
9774: LD_ADDR_VAR 0 9
9778: PUSH
9779: LD_INT 10
9781: PUSH
9782: LD_INT 5
9784: PUSH
9785: LD_INT 3
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9793: LD_VAR 0 6
9797: PPUSH
9798: CALL_OW 257
9802: PUSH
9803: LD_INT 14
9805: EQUAL
9806: IFFALSE 9827
// points := [ 10 , 0 , 0 ] ;
9808: LD_ADDR_VAR 0 9
9812: PUSH
9813: LD_INT 10
9815: PUSH
9816: LD_INT 0
9818: PUSH
9819: LD_INT 0
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9827: LD_VAR 0 6
9831: PPUSH
9832: CALL_OW 257
9836: PUSH
9837: LD_INT 11
9839: EQUAL
9840: IFFALSE 9861
// points := [ 30 , 10 , 5 ] ;
9842: LD_ADDR_VAR 0 9
9846: PUSH
9847: LD_INT 30
9849: PUSH
9850: LD_INT 10
9852: PUSH
9853: LD_INT 5
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9861: LD_VAR 0 1
9865: PPUSH
9866: LD_INT 5
9868: PPUSH
9869: CALL_OW 321
9873: PUSH
9874: LD_INT 2
9876: EQUAL
9877: IFFALSE 9894
// bpoints := bpoints * 1.8 ;
9879: LD_ADDR_VAR 0 10
9883: PUSH
9884: LD_VAR 0 10
9888: PUSH
9889: LD_REAL  1.80000000000000E+0000
9892: MUL
9893: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9894: LD_VAR 0 6
9898: PPUSH
9899: CALL_OW 257
9903: PUSH
9904: LD_INT 1
9906: PUSH
9907: LD_INT 2
9909: PUSH
9910: LD_INT 3
9912: PUSH
9913: LD_INT 4
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: IN
9922: IFFALSE 9942
9924: PUSH
9925: LD_VAR 0 1
9929: PPUSH
9930: LD_INT 51
9932: PPUSH
9933: CALL_OW 321
9937: PUSH
9938: LD_INT 2
9940: EQUAL
9941: AND
9942: IFFALSE 9959
// bpoints := bpoints * 1.2 ;
9944: LD_ADDR_VAR 0 10
9948: PUSH
9949: LD_VAR 0 10
9953: PUSH
9954: LD_REAL  1.20000000000000E+0000
9957: MUL
9958: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9959: LD_VAR 0 6
9963: PPUSH
9964: CALL_OW 257
9968: PUSH
9969: LD_INT 5
9971: PUSH
9972: LD_INT 7
9974: PUSH
9975: LD_INT 9
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: IN
9983: IFFALSE 10003
9985: PUSH
9986: LD_VAR 0 1
9990: PPUSH
9991: LD_INT 52
9993: PPUSH
9994: CALL_OW 321
9998: PUSH
9999: LD_INT 2
10001: EQUAL
10002: AND
10003: IFFALSE 10020
// bpoints := bpoints * 1.5 ;
10005: LD_ADDR_VAR 0 10
10009: PUSH
10010: LD_VAR 0 10
10014: PUSH
10015: LD_REAL  1.50000000000000E+0000
10018: MUL
10019: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10020: LD_VAR 0 1
10024: PPUSH
10025: LD_INT 66
10027: PPUSH
10028: CALL_OW 321
10032: PUSH
10033: LD_INT 2
10035: EQUAL
10036: IFFALSE 10053
// bpoints := bpoints * 1.1 ;
10038: LD_ADDR_VAR 0 10
10042: PUSH
10043: LD_VAR 0 10
10047: PUSH
10048: LD_REAL  1.10000000000000E+0000
10051: MUL
10052: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10053: LD_ADDR_VAR 0 10
10057: PUSH
10058: LD_VAR 0 10
10062: PUSH
10063: LD_VAR 0 6
10067: PPUSH
10068: LD_INT 1
10070: PPUSH
10071: CALL_OW 259
10075: PUSH
10076: LD_REAL  1.15000000000000E+0000
10079: MUL
10080: MUL
10081: ST_TO_ADDR
// end ; unit_vehicle :
10082: GO 10912
10084: LD_INT 2
10086: DOUBLE
10087: EQUAL
10088: IFTRUE 10092
10090: GO 10900
10092: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10093: LD_VAR 0 6
10097: PPUSH
10098: CALL_OW 264
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: LD_INT 42
10108: PUSH
10109: LD_INT 24
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: IN
10117: IFFALSE 10138
// points := [ 25 , 5 , 3 ] ;
10119: LD_ADDR_VAR 0 9
10123: PUSH
10124: LD_INT 25
10126: PUSH
10127: LD_INT 5
10129: PUSH
10130: LD_INT 3
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10138: LD_VAR 0 6
10142: PPUSH
10143: CALL_OW 264
10147: PUSH
10148: LD_INT 4
10150: PUSH
10151: LD_INT 43
10153: PUSH
10154: LD_INT 25
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: IN
10162: IFFALSE 10183
// points := [ 40 , 15 , 5 ] ;
10164: LD_ADDR_VAR 0 9
10168: PUSH
10169: LD_INT 40
10171: PUSH
10172: LD_INT 15
10174: PUSH
10175: LD_INT 5
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: LIST
10182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10183: LD_VAR 0 6
10187: PPUSH
10188: CALL_OW 264
10192: PUSH
10193: LD_INT 3
10195: PUSH
10196: LD_INT 23
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: IN
10203: IFFALSE 10224
// points := [ 7 , 25 , 8 ] ;
10205: LD_ADDR_VAR 0 9
10209: PUSH
10210: LD_INT 7
10212: PUSH
10213: LD_INT 25
10215: PUSH
10216: LD_INT 8
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10224: LD_VAR 0 6
10228: PPUSH
10229: CALL_OW 264
10233: PUSH
10234: LD_INT 5
10236: PUSH
10237: LD_INT 27
10239: PUSH
10240: LD_INT 44
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: IN
10248: IFFALSE 10269
// points := [ 14 , 50 , 16 ] ;
10250: LD_ADDR_VAR 0 9
10254: PUSH
10255: LD_INT 14
10257: PUSH
10258: LD_INT 50
10260: PUSH
10261: LD_INT 16
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: LIST
10268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10269: LD_VAR 0 6
10273: PPUSH
10274: CALL_OW 264
10278: PUSH
10279: LD_INT 6
10281: PUSH
10282: LD_INT 46
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: IN
10289: IFFALSE 10310
// points := [ 32 , 120 , 70 ] ;
10291: LD_ADDR_VAR 0 9
10295: PUSH
10296: LD_INT 32
10298: PUSH
10299: LD_INT 120
10301: PUSH
10302: LD_INT 70
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10310: LD_VAR 0 6
10314: PPUSH
10315: CALL_OW 264
10319: PUSH
10320: LD_INT 7
10322: PUSH
10323: LD_INT 28
10325: PUSH
10326: LD_INT 45
10328: PUSH
10329: LD_INT 92
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: IN
10338: IFFALSE 10359
// points := [ 35 , 20 , 45 ] ;
10340: LD_ADDR_VAR 0 9
10344: PUSH
10345: LD_INT 35
10347: PUSH
10348: LD_INT 20
10350: PUSH
10351: LD_INT 45
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10359: LD_VAR 0 6
10363: PPUSH
10364: CALL_OW 264
10368: PUSH
10369: LD_INT 47
10371: PUSH
10372: EMPTY
10373: LIST
10374: IN
10375: IFFALSE 10396
// points := [ 67 , 45 , 75 ] ;
10377: LD_ADDR_VAR 0 9
10381: PUSH
10382: LD_INT 67
10384: PUSH
10385: LD_INT 45
10387: PUSH
10388: LD_INT 75
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10396: LD_VAR 0 6
10400: PPUSH
10401: CALL_OW 264
10405: PUSH
10406: LD_INT 26
10408: PUSH
10409: EMPTY
10410: LIST
10411: IN
10412: IFFALSE 10433
// points := [ 120 , 30 , 80 ] ;
10414: LD_ADDR_VAR 0 9
10418: PUSH
10419: LD_INT 120
10421: PUSH
10422: LD_INT 30
10424: PUSH
10425: LD_INT 80
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10433: LD_VAR 0 6
10437: PPUSH
10438: CALL_OW 264
10442: PUSH
10443: LD_INT 22
10445: PUSH
10446: EMPTY
10447: LIST
10448: IN
10449: IFFALSE 10470
// points := [ 40 , 1 , 1 ] ;
10451: LD_ADDR_VAR 0 9
10455: PUSH
10456: LD_INT 40
10458: PUSH
10459: LD_INT 1
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10470: LD_VAR 0 6
10474: PPUSH
10475: CALL_OW 264
10479: PUSH
10480: LD_INT 29
10482: PUSH
10483: EMPTY
10484: LIST
10485: IN
10486: IFFALSE 10507
// points := [ 70 , 200 , 400 ] ;
10488: LD_ADDR_VAR 0 9
10492: PUSH
10493: LD_INT 70
10495: PUSH
10496: LD_INT 200
10498: PUSH
10499: LD_INT 400
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: LIST
10506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10507: LD_VAR 0 6
10511: PPUSH
10512: CALL_OW 264
10516: PUSH
10517: LD_INT 14
10519: PUSH
10520: LD_INT 53
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: IN
10527: IFFALSE 10548
// points := [ 40 , 10 , 20 ] ;
10529: LD_ADDR_VAR 0 9
10533: PUSH
10534: LD_INT 40
10536: PUSH
10537: LD_INT 10
10539: PUSH
10540: LD_INT 20
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10548: LD_VAR 0 6
10552: PPUSH
10553: CALL_OW 264
10557: PUSH
10558: LD_INT 9
10560: PUSH
10561: EMPTY
10562: LIST
10563: IN
10564: IFFALSE 10585
// points := [ 5 , 70 , 20 ] ;
10566: LD_ADDR_VAR 0 9
10570: PUSH
10571: LD_INT 5
10573: PUSH
10574: LD_INT 70
10576: PUSH
10577: LD_INT 20
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: LIST
10584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10585: LD_VAR 0 6
10589: PPUSH
10590: CALL_OW 264
10594: PUSH
10595: LD_INT 10
10597: PUSH
10598: EMPTY
10599: LIST
10600: IN
10601: IFFALSE 10622
// points := [ 35 , 110 , 70 ] ;
10603: LD_ADDR_VAR 0 9
10607: PUSH
10608: LD_INT 35
10610: PUSH
10611: LD_INT 110
10613: PUSH
10614: LD_INT 70
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10622: LD_VAR 0 6
10626: PPUSH
10627: CALL_OW 265
10631: PUSH
10632: LD_INT 25
10634: EQUAL
10635: IFFALSE 10656
// points := [ 80 , 65 , 100 ] ;
10637: LD_ADDR_VAR 0 9
10641: PUSH
10642: LD_INT 80
10644: PUSH
10645: LD_INT 65
10647: PUSH
10648: LD_INT 100
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10656: LD_VAR 0 6
10660: PPUSH
10661: CALL_OW 263
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10704
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10671: LD_ADDR_VAR 0 10
10675: PUSH
10676: LD_VAR 0 10
10680: PUSH
10681: LD_VAR 0 6
10685: PPUSH
10686: CALL_OW 311
10690: PPUSH
10691: LD_INT 3
10693: PPUSH
10694: CALL_OW 259
10698: PUSH
10699: LD_INT 4
10701: MUL
10702: MUL
10703: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10704: LD_VAR 0 6
10708: PPUSH
10709: CALL_OW 263
10713: PUSH
10714: LD_INT 2
10716: EQUAL
10717: IFFALSE 10768
// begin j := IsControledBy ( i ) ;
10719: LD_ADDR_VAR 0 7
10723: PUSH
10724: LD_VAR 0 6
10728: PPUSH
10729: CALL_OW 312
10733: ST_TO_ADDR
// if j then
10734: LD_VAR 0 7
10738: IFFALSE 10768
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10740: LD_ADDR_VAR 0 10
10744: PUSH
10745: LD_VAR 0 10
10749: PUSH
10750: LD_VAR 0 7
10754: PPUSH
10755: LD_INT 3
10757: PPUSH
10758: CALL_OW 259
10762: PUSH
10763: LD_INT 3
10765: MUL
10766: MUL
10767: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10768: LD_VAR 0 6
10772: PPUSH
10773: CALL_OW 264
10777: PUSH
10778: LD_INT 5
10780: PUSH
10781: LD_INT 6
10783: PUSH
10784: LD_INT 46
10786: PUSH
10787: LD_INT 44
10789: PUSH
10790: LD_INT 47
10792: PUSH
10793: LD_INT 45
10795: PUSH
10796: LD_INT 28
10798: PUSH
10799: LD_INT 7
10801: PUSH
10802: LD_INT 27
10804: PUSH
10805: LD_INT 29
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: IN
10820: IFFALSE 10840
10822: PUSH
10823: LD_VAR 0 1
10827: PPUSH
10828: LD_INT 52
10830: PPUSH
10831: CALL_OW 321
10835: PUSH
10836: LD_INT 2
10838: EQUAL
10839: AND
10840: IFFALSE 10857
// bpoints := bpoints * 1.2 ;
10842: LD_ADDR_VAR 0 10
10846: PUSH
10847: LD_VAR 0 10
10851: PUSH
10852: LD_REAL  1.20000000000000E+0000
10855: MUL
10856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10857: LD_VAR 0 6
10861: PPUSH
10862: CALL_OW 264
10866: PUSH
10867: LD_INT 6
10869: PUSH
10870: LD_INT 46
10872: PUSH
10873: LD_INT 47
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: IN
10881: IFFALSE 10898
// bpoints := bpoints * 1.2 ;
10883: LD_ADDR_VAR 0 10
10887: PUSH
10888: LD_VAR 0 10
10892: PUSH
10893: LD_REAL  1.20000000000000E+0000
10896: MUL
10897: ST_TO_ADDR
// end ; unit_building :
10898: GO 10912
10900: LD_INT 3
10902: DOUBLE
10903: EQUAL
10904: IFTRUE 10908
10906: GO 10911
10908: POP
// ; end ;
10909: GO 10912
10911: POP
// for j = 1 to 3 do
10912: LD_ADDR_VAR 0 7
10916: PUSH
10917: DOUBLE
10918: LD_INT 1
10920: DEC
10921: ST_TO_ADDR
10922: LD_INT 3
10924: PUSH
10925: FOR_TO
10926: IFFALSE 10979
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10928: LD_ADDR_VAR 0 5
10932: PUSH
10933: LD_VAR 0 5
10937: PPUSH
10938: LD_VAR 0 7
10942: PPUSH
10943: LD_VAR 0 5
10947: PUSH
10948: LD_VAR 0 7
10952: ARRAY
10953: PUSH
10954: LD_VAR 0 9
10958: PUSH
10959: LD_VAR 0 7
10963: ARRAY
10964: PUSH
10965: LD_VAR 0 10
10969: MUL
10970: PLUS
10971: PPUSH
10972: CALL_OW 1
10976: ST_TO_ADDR
10977: GO 10925
10979: POP
10980: POP
// end ;
10981: GO 9454
10983: POP
10984: POP
// result := Replace ( result , 4 , tmp ) ;
10985: LD_ADDR_VAR 0 5
10989: PUSH
10990: LD_VAR 0 5
10994: PPUSH
10995: LD_INT 4
10997: PPUSH
10998: LD_VAR 0 8
11002: PPUSH
11003: CALL_OW 1
11007: ST_TO_ADDR
// end ;
11008: LD_VAR 0 5
11012: RET
// export function DangerAtRange ( unit , range ) ; begin
11013: LD_INT 0
11015: PPUSH
// if not unit then
11016: LD_VAR 0 1
11020: NOT
11021: IFFALSE 11025
// exit ;
11023: GO 11070
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11025: LD_ADDR_VAR 0 3
11029: PUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: CALL_OW 255
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 250
11049: PPUSH
11050: LD_VAR 0 1
11054: PPUSH
11055: CALL_OW 251
11059: PPUSH
11060: LD_VAR 0 2
11064: PPUSH
11065: CALL 9304 0 4
11069: ST_TO_ADDR
// end ;
11070: LD_VAR 0 3
11074: RET
// export function DangerInArea ( side , area ) ; begin
11075: LD_INT 0
11077: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11078: LD_ADDR_VAR 0 3
11082: PUSH
11083: LD_VAR 0 2
11087: PPUSH
11088: LD_INT 81
11090: PUSH
11091: LD_VAR 0 1
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PPUSH
11100: CALL_OW 70
11104: ST_TO_ADDR
// end ;
11105: LD_VAR 0 3
11109: RET
// export function IsExtension ( b ) ; begin
11110: LD_INT 0
11112: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11113: LD_ADDR_VAR 0 2
11117: PUSH
11118: LD_VAR 0 1
11122: PUSH
11123: LD_INT 23
11125: PUSH
11126: LD_INT 20
11128: PUSH
11129: LD_INT 22
11131: PUSH
11132: LD_INT 17
11134: PUSH
11135: LD_INT 24
11137: PUSH
11138: LD_INT 21
11140: PUSH
11141: LD_INT 19
11143: PUSH
11144: LD_INT 16
11146: PUSH
11147: LD_INT 25
11149: PUSH
11150: LD_INT 18
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: IN
11165: ST_TO_ADDR
// end ;
11166: LD_VAR 0 2
11170: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11171: LD_INT 0
11173: PPUSH
11174: PPUSH
11175: PPUSH
// result := [ ] ;
11176: LD_ADDR_VAR 0 4
11180: PUSH
11181: EMPTY
11182: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11183: LD_ADDR_VAR 0 5
11187: PUSH
11188: LD_VAR 0 2
11192: PPUSH
11193: LD_INT 21
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 70
11207: ST_TO_ADDR
// if not tmp then
11208: LD_VAR 0 5
11212: NOT
11213: IFFALSE 11217
// exit ;
11215: GO 11281
// if checkLink then
11217: LD_VAR 0 3
11221: IFFALSE 11271
// begin for i in tmp do
11223: LD_ADDR_VAR 0 6
11227: PUSH
11228: LD_VAR 0 5
11232: PUSH
11233: FOR_IN
11234: IFFALSE 11269
// if GetBase ( i ) <> base then
11236: LD_VAR 0 6
11240: PPUSH
11241: CALL_OW 274
11245: PUSH
11246: LD_VAR 0 1
11250: NONEQUAL
11251: IFFALSE 11267
// ComLinkToBase ( base , i ) ;
11253: LD_VAR 0 1
11257: PPUSH
11258: LD_VAR 0 6
11262: PPUSH
11263: CALL_OW 169
11267: GO 11233
11269: POP
11270: POP
// end ; result := tmp ;
11271: LD_ADDR_VAR 0 4
11275: PUSH
11276: LD_VAR 0 5
11280: ST_TO_ADDR
// end ;
11281: LD_VAR 0 4
11285: RET
// export function ComComplete ( units , b ) ; var i ; begin
11286: LD_INT 0
11288: PPUSH
11289: PPUSH
// if not units then
11290: LD_VAR 0 1
11294: NOT
11295: IFFALSE 11299
// exit ;
11297: GO 11389
// for i in units do
11299: LD_ADDR_VAR 0 4
11303: PUSH
11304: LD_VAR 0 1
11308: PUSH
11309: FOR_IN
11310: IFFALSE 11387
// if BuildingStatus ( b ) = bs_build then
11312: LD_VAR 0 2
11316: PPUSH
11317: CALL_OW 461
11321: PUSH
11322: LD_INT 1
11324: EQUAL
11325: IFFALSE 11385
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11327: LD_VAR 0 4
11331: PPUSH
11332: LD_STRING h
11334: PUSH
11335: LD_VAR 0 2
11339: PPUSH
11340: CALL_OW 250
11344: PUSH
11345: LD_VAR 0 2
11349: PPUSH
11350: CALL_OW 251
11354: PUSH
11355: LD_VAR 0 2
11359: PUSH
11360: LD_INT 0
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: LD_INT 0
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: PPUSH
11381: CALL_OW 446
11385: GO 11309
11387: POP
11388: POP
// end ;
11389: LD_VAR 0 3
11393: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11394: LD_INT 0
11396: PPUSH
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
11401: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11402: LD_VAR 0 1
11406: NOT
11407: IFTRUE 11424
11409: PUSH
11410: LD_VAR 0 1
11414: PPUSH
11415: CALL_OW 263
11419: PUSH
11420: LD_INT 2
11422: NONEQUAL
11423: OR
11424: IFFALSE 11428
// exit ;
11426: GO 11744
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11428: LD_ADDR_VAR 0 6
11432: PUSH
11433: LD_INT 22
11435: PUSH
11436: LD_VAR 0 1
11440: PPUSH
11441: CALL_OW 255
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 2
11452: PUSH
11453: LD_INT 30
11455: PUSH
11456: LD_INT 36
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 34
11465: PUSH
11466: LD_INT 31
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PPUSH
11482: CALL_OW 69
11486: ST_TO_ADDR
// if not tmp then
11487: LD_VAR 0 6
11491: NOT
11492: IFFALSE 11496
// exit ;
11494: GO 11744
// result := [ ] ;
11496: LD_ADDR_VAR 0 2
11500: PUSH
11501: EMPTY
11502: ST_TO_ADDR
// for i in tmp do
11503: LD_ADDR_VAR 0 3
11507: PUSH
11508: LD_VAR 0 6
11512: PUSH
11513: FOR_IN
11514: IFFALSE 11585
// begin t := UnitsInside ( i ) ;
11516: LD_ADDR_VAR 0 4
11520: PUSH
11521: LD_VAR 0 3
11525: PPUSH
11526: CALL_OW 313
11530: ST_TO_ADDR
// if t then
11531: LD_VAR 0 4
11535: IFFALSE 11583
// for j in t do
11537: LD_ADDR_VAR 0 7
11541: PUSH
11542: LD_VAR 0 4
11546: PUSH
11547: FOR_IN
11548: IFFALSE 11581
// result := Replace ( result , result + 1 , j ) ;
11550: LD_ADDR_VAR 0 2
11554: PUSH
11555: LD_VAR 0 2
11559: PPUSH
11560: LD_VAR 0 2
11564: PUSH
11565: LD_INT 1
11567: PLUS
11568: PPUSH
11569: LD_VAR 0 7
11573: PPUSH
11574: CALL_OW 1
11578: ST_TO_ADDR
11579: GO 11547
11581: POP
11582: POP
// end ;
11583: GO 11513
11585: POP
11586: POP
// if not result then
11587: LD_VAR 0 2
11591: NOT
11592: IFFALSE 11596
// exit ;
11594: GO 11744
// mech := result [ 1 ] ;
11596: LD_ADDR_VAR 0 5
11600: PUSH
11601: LD_VAR 0 2
11605: PUSH
11606: LD_INT 1
11608: ARRAY
11609: ST_TO_ADDR
// if result > 1 then
11610: LD_VAR 0 2
11614: PUSH
11615: LD_INT 1
11617: GREATER
11618: IFFALSE 11730
// begin for i = 2 to result do
11620: LD_ADDR_VAR 0 3
11624: PUSH
11625: DOUBLE
11626: LD_INT 2
11628: DEC
11629: ST_TO_ADDR
11630: LD_VAR 0 2
11634: PUSH
11635: FOR_TO
11636: IFFALSE 11728
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11638: LD_ADDR_VAR 0 4
11642: PUSH
11643: LD_VAR 0 2
11647: PUSH
11648: LD_VAR 0 3
11652: ARRAY
11653: PPUSH
11654: LD_INT 3
11656: PPUSH
11657: CALL_OW 259
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: LD_VAR 0 3
11671: ARRAY
11672: PPUSH
11673: CALL_OW 432
11677: MINUS
11678: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11679: LD_VAR 0 4
11683: PUSH
11684: LD_VAR 0 5
11688: PPUSH
11689: LD_INT 3
11691: PPUSH
11692: CALL_OW 259
11696: PUSH
11697: LD_VAR 0 5
11701: PPUSH
11702: CALL_OW 432
11706: MINUS
11707: GREATEREQUAL
11708: IFFALSE 11726
// mech := result [ i ] ;
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_VAR 0 2
11719: PUSH
11720: LD_VAR 0 3
11724: ARRAY
11725: ST_TO_ADDR
// end ;
11726: GO 11635
11728: POP
11729: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11730: LD_VAR 0 1
11734: PPUSH
11735: LD_VAR 0 5
11739: PPUSH
11740: CALL_OW 135
// end ;
11744: LD_VAR 0 2
11748: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11749: LD_INT 0
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
11760: PPUSH
11761: PPUSH
11762: PPUSH
11763: PPUSH
// result := [ ] ;
11764: LD_ADDR_VAR 0 7
11768: PUSH
11769: EMPTY
11770: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11771: LD_VAR 0 1
11775: PPUSH
11776: CALL_OW 266
11780: PUSH
11781: LD_INT 0
11783: PUSH
11784: LD_INT 1
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: IN
11791: NOT
11792: IFFALSE 11796
// exit ;
11794: GO 13436
// if name then
11796: LD_VAR 0 3
11800: IFFALSE 11816
// SetBName ( base_dep , name ) ;
11802: LD_VAR 0 1
11806: PPUSH
11807: LD_VAR 0 3
11811: PPUSH
11812: CALL_OW 500
// base := GetBase ( base_dep ) ;
11816: LD_ADDR_VAR 0 15
11820: PUSH
11821: LD_VAR 0 1
11825: PPUSH
11826: CALL_OW 274
11830: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11831: LD_ADDR_VAR 0 16
11835: PUSH
11836: LD_VAR 0 1
11840: PPUSH
11841: CALL_OW 255
11845: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11846: LD_ADDR_VAR 0 17
11850: PUSH
11851: LD_VAR 0 1
11855: PPUSH
11856: CALL_OW 248
11860: ST_TO_ADDR
// if sources then
11861: LD_VAR 0 5
11865: IFFALSE 11912
// for i = 1 to 3 do
11867: LD_ADDR_VAR 0 8
11871: PUSH
11872: DOUBLE
11873: LD_INT 1
11875: DEC
11876: ST_TO_ADDR
11877: LD_INT 3
11879: PUSH
11880: FOR_TO
11881: IFFALSE 11910
// AddResourceType ( base , i , sources [ i ] ) ;
11883: LD_VAR 0 15
11887: PPUSH
11888: LD_VAR 0 8
11892: PPUSH
11893: LD_VAR 0 5
11897: PUSH
11898: LD_VAR 0 8
11902: ARRAY
11903: PPUSH
11904: CALL_OW 276
11908: GO 11880
11910: POP
11911: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11912: LD_ADDR_VAR 0 18
11916: PUSH
11917: LD_VAR 0 15
11921: PPUSH
11922: LD_VAR 0 2
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: CALL 11171 0 3
11934: ST_TO_ADDR
// InitHc ;
11935: CALL_OW 19
// InitUc ;
11939: CALL_OW 18
// uc_side := side ;
11943: LD_ADDR_OWVAR 20
11947: PUSH
11948: LD_VAR 0 16
11952: ST_TO_ADDR
// uc_nation := nation ;
11953: LD_ADDR_OWVAR 21
11957: PUSH
11958: LD_VAR 0 17
11962: ST_TO_ADDR
// if buildings then
11963: LD_VAR 0 18
11967: IFFALSE 13295
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11969: LD_ADDR_VAR 0 19
11973: PUSH
11974: LD_VAR 0 18
11978: PPUSH
11979: LD_INT 2
11981: PUSH
11982: LD_INT 30
11984: PUSH
11985: LD_INT 29
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 30
11994: PUSH
11995: LD_INT 30
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 72
12011: ST_TO_ADDR
// if tmp then
12012: LD_VAR 0 19
12016: IFFALSE 12064
// for i in tmp do
12018: LD_ADDR_VAR 0 8
12022: PUSH
12023: LD_VAR 0 19
12027: PUSH
12028: FOR_IN
12029: IFFALSE 12062
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12031: LD_VAR 0 8
12035: PPUSH
12036: CALL_OW 250
12040: PPUSH
12041: LD_VAR 0 8
12045: PPUSH
12046: CALL_OW 251
12050: PPUSH
12051: LD_VAR 0 16
12055: PPUSH
12056: CALL_OW 441
12060: GO 12028
12062: POP
12063: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12064: LD_VAR 0 18
12068: PPUSH
12069: LD_INT 2
12071: PUSH
12072: LD_INT 30
12074: PUSH
12075: LD_INT 32
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 30
12084: PUSH
12085: LD_INT 33
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 72
12101: IFFALSE 12189
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12103: LD_ADDR_VAR 0 8
12107: PUSH
12108: LD_VAR 0 18
12112: PPUSH
12113: LD_INT 2
12115: PUSH
12116: LD_INT 30
12118: PUSH
12119: LD_INT 32
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 30
12128: PUSH
12129: LD_INT 33
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 72
12145: PUSH
12146: FOR_IN
12147: IFFALSE 12187
// begin if not GetBWeapon ( i ) then
12149: LD_VAR 0 8
12153: PPUSH
12154: CALL_OW 269
12158: NOT
12159: IFFALSE 12185
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12161: LD_VAR 0 8
12165: PPUSH
12166: LD_VAR 0 8
12170: PPUSH
12171: LD_VAR 0 2
12175: PPUSH
12176: CALL 13441 0 2
12180: PPUSH
12181: CALL_OW 431
// end ;
12185: GO 12146
12187: POP
12188: POP
// end ; for i = 1 to personel do
12189: LD_ADDR_VAR 0 8
12193: PUSH
12194: DOUBLE
12195: LD_INT 1
12197: DEC
12198: ST_TO_ADDR
12199: LD_VAR 0 6
12203: PUSH
12204: FOR_TO
12205: IFFALSE 13275
// begin if i > 4 then
12207: LD_VAR 0 8
12211: PUSH
12212: LD_INT 4
12214: GREATER
12215: IFFALSE 12219
// break ;
12217: GO 13275
// case i of 1 :
12219: LD_VAR 0 8
12223: PUSH
12224: LD_INT 1
12226: DOUBLE
12227: EQUAL
12228: IFTRUE 12232
12230: GO 12312
12232: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12233: LD_ADDR_VAR 0 12
12237: PUSH
12238: LD_VAR 0 18
12242: PPUSH
12243: LD_INT 22
12245: PUSH
12246: LD_VAR 0 16
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 58
12257: PUSH
12258: EMPTY
12259: LIST
12260: PUSH
12261: LD_INT 2
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 32
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 30
12276: PUSH
12277: LD_INT 4
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 30
12286: PUSH
12287: LD_INT 5
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: LIST
12304: PPUSH
12305: CALL_OW 72
12309: ST_TO_ADDR
12310: GO 12534
12312: LD_INT 2
12314: DOUBLE
12315: EQUAL
12316: IFTRUE 12320
12318: GO 12382
12320: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12321: LD_ADDR_VAR 0 12
12325: PUSH
12326: LD_VAR 0 18
12330: PPUSH
12331: LD_INT 22
12333: PUSH
12334: LD_VAR 0 16
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: LD_INT 30
12348: PUSH
12349: LD_INT 0
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 30
12358: PUSH
12359: LD_INT 1
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 72
12379: ST_TO_ADDR
12380: GO 12534
12382: LD_INT 3
12384: DOUBLE
12385: EQUAL
12386: IFTRUE 12390
12388: GO 12452
12390: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12391: LD_ADDR_VAR 0 12
12395: PUSH
12396: LD_VAR 0 18
12400: PPUSH
12401: LD_INT 22
12403: PUSH
12404: LD_VAR 0 16
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: LD_INT 30
12418: PUSH
12419: LD_INT 2
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 30
12428: PUSH
12429: LD_INT 3
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PPUSH
12445: CALL_OW 72
12449: ST_TO_ADDR
12450: GO 12534
12452: LD_INT 4
12454: DOUBLE
12455: EQUAL
12456: IFTRUE 12460
12458: GO 12533
12460: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12461: LD_ADDR_VAR 0 12
12465: PUSH
12466: LD_VAR 0 18
12470: PPUSH
12471: LD_INT 22
12473: PUSH
12474: LD_VAR 0 16
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 2
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 6
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 30
12498: PUSH
12499: LD_INT 7
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 30
12508: PUSH
12509: LD_INT 8
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 72
12530: ST_TO_ADDR
12531: GO 12534
12533: POP
// if i = 1 then
12534: LD_VAR 0 8
12538: PUSH
12539: LD_INT 1
12541: EQUAL
12542: IFFALSE 12653
// begin tmp := [ ] ;
12544: LD_ADDR_VAR 0 19
12548: PUSH
12549: EMPTY
12550: ST_TO_ADDR
// for j in f do
12551: LD_ADDR_VAR 0 9
12555: PUSH
12556: LD_VAR 0 12
12560: PUSH
12561: FOR_IN
12562: IFFALSE 12635
// if GetBType ( j ) = b_bunker then
12564: LD_VAR 0 9
12568: PPUSH
12569: CALL_OW 266
12573: PUSH
12574: LD_INT 32
12576: EQUAL
12577: IFFALSE 12604
// tmp := Insert ( tmp , 1 , j ) else
12579: LD_ADDR_VAR 0 19
12583: PUSH
12584: LD_VAR 0 19
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: LD_VAR 0 9
12596: PPUSH
12597: CALL_OW 2
12601: ST_TO_ADDR
12602: GO 12633
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12604: LD_ADDR_VAR 0 19
12608: PUSH
12609: LD_VAR 0 19
12613: PPUSH
12614: LD_VAR 0 19
12618: PUSH
12619: LD_INT 1
12621: PLUS
12622: PPUSH
12623: LD_VAR 0 9
12627: PPUSH
12628: CALL_OW 2
12632: ST_TO_ADDR
12633: GO 12561
12635: POP
12636: POP
// if tmp then
12637: LD_VAR 0 19
12641: IFFALSE 12653
// f := tmp ;
12643: LD_ADDR_VAR 0 12
12647: PUSH
12648: LD_VAR 0 19
12652: ST_TO_ADDR
// end ; x := personel [ i ] ;
12653: LD_ADDR_VAR 0 13
12657: PUSH
12658: LD_VAR 0 6
12662: PUSH
12663: LD_VAR 0 8
12667: ARRAY
12668: ST_TO_ADDR
// if x = - 1 then
12669: LD_VAR 0 13
12673: PUSH
12674: LD_INT 1
12676: NEG
12677: EQUAL
12678: IFFALSE 12889
// begin for j in f do
12680: LD_ADDR_VAR 0 9
12684: PUSH
12685: LD_VAR 0 12
12689: PUSH
12690: FOR_IN
12691: IFFALSE 12885
// repeat InitHc ;
12693: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12697: LD_VAR 0 9
12701: PPUSH
12702: CALL_OW 266
12706: PUSH
12707: LD_INT 5
12709: EQUAL
12710: IFFALSE 12780
// begin if UnitsInside ( j ) < 3 then
12712: LD_VAR 0 9
12716: PPUSH
12717: CALL_OW 313
12721: PUSH
12722: LD_INT 3
12724: LESS
12725: IFFALSE 12761
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12727: LD_INT 0
12729: PPUSH
12730: LD_INT 5
12732: PUSH
12733: LD_INT 8
12735: PUSH
12736: LD_INT 9
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: PUSH
12744: LD_VAR 0 17
12748: ARRAY
12749: PPUSH
12750: LD_VAR 0 4
12754: PPUSH
12755: CALL_OW 380
12759: GO 12778
// PrepareHuman ( false , i , skill ) ;
12761: LD_INT 0
12763: PPUSH
12764: LD_VAR 0 8
12768: PPUSH
12769: LD_VAR 0 4
12773: PPUSH
12774: CALL_OW 380
// end else
12778: GO 12797
// PrepareHuman ( false , i , skill ) ;
12780: LD_INT 0
12782: PPUSH
12783: LD_VAR 0 8
12787: PPUSH
12788: LD_VAR 0 4
12792: PPUSH
12793: CALL_OW 380
// un := CreateHuman ;
12797: LD_ADDR_VAR 0 14
12801: PUSH
12802: CALL_OW 44
12806: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12807: LD_ADDR_VAR 0 7
12811: PUSH
12812: LD_VAR 0 7
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: LD_VAR 0 14
12824: PPUSH
12825: CALL_OW 2
12829: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12830: LD_VAR 0 14
12834: PPUSH
12835: LD_VAR 0 9
12839: PPUSH
12840: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12844: LD_VAR 0 9
12848: PPUSH
12849: CALL_OW 313
12853: PUSH
12854: LD_INT 6
12856: EQUAL
12857: IFTRUE 12881
12859: PUSH
12860: LD_VAR 0 9
12864: PPUSH
12865: CALL_OW 266
12869: PUSH
12870: LD_INT 32
12872: PUSH
12873: LD_INT 31
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: IN
12880: OR
12881: IFFALSE 12693
12883: GO 12690
12885: POP
12886: POP
// end else
12887: GO 13273
// for j = 1 to x do
12889: LD_ADDR_VAR 0 9
12893: PUSH
12894: DOUBLE
12895: LD_INT 1
12897: DEC
12898: ST_TO_ADDR
12899: LD_VAR 0 13
12903: PUSH
12904: FOR_TO
12905: IFFALSE 13271
// begin InitHc ;
12907: CALL_OW 19
// if not f then
12911: LD_VAR 0 12
12915: NOT
12916: IFFALSE 13005
// begin PrepareHuman ( false , i , skill ) ;
12918: LD_INT 0
12920: PPUSH
12921: LD_VAR 0 8
12925: PPUSH
12926: LD_VAR 0 4
12930: PPUSH
12931: CALL_OW 380
// un := CreateHuman ;
12935: LD_ADDR_VAR 0 14
12939: PUSH
12940: CALL_OW 44
12944: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12945: LD_ADDR_VAR 0 7
12949: PUSH
12950: LD_VAR 0 7
12954: PPUSH
12955: LD_INT 1
12957: PPUSH
12958: LD_VAR 0 14
12962: PPUSH
12963: CALL_OW 2
12967: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12968: LD_VAR 0 14
12972: PPUSH
12973: LD_VAR 0 1
12977: PPUSH
12978: CALL_OW 250
12982: PPUSH
12983: LD_VAR 0 1
12987: PPUSH
12988: CALL_OW 251
12992: PPUSH
12993: LD_INT 10
12995: PPUSH
12996: LD_INT 0
12998: PPUSH
12999: CALL_OW 50
// continue ;
13003: GO 12904
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13005: LD_VAR 0 12
13009: PUSH
13010: LD_INT 1
13012: ARRAY
13013: PPUSH
13014: CALL_OW 313
13018: IFFALSE 13046
13020: PUSH
13021: LD_VAR 0 12
13025: PUSH
13026: LD_INT 1
13028: ARRAY
13029: PPUSH
13030: CALL_OW 266
13034: PUSH
13035: LD_INT 32
13037: PUSH
13038: LD_INT 31
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: IN
13045: AND
13046: IFTRUE 13067
13048: PUSH
13049: LD_VAR 0 12
13053: PUSH
13054: LD_INT 1
13056: ARRAY
13057: PPUSH
13058: CALL_OW 313
13062: PUSH
13063: LD_INT 6
13065: EQUAL
13066: OR
13067: IFFALSE 13087
// f := Delete ( f , 1 ) ;
13069: LD_ADDR_VAR 0 12
13073: PUSH
13074: LD_VAR 0 12
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 3
13086: ST_TO_ADDR
// if not f then
13087: LD_VAR 0 12
13091: NOT
13092: IFFALSE 13110
// begin x := x + 2 ;
13094: LD_ADDR_VAR 0 13
13098: PUSH
13099: LD_VAR 0 13
13103: PUSH
13104: LD_INT 2
13106: PLUS
13107: ST_TO_ADDR
// continue ;
13108: GO 12904
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13110: LD_VAR 0 12
13114: PUSH
13115: LD_INT 1
13117: ARRAY
13118: PPUSH
13119: CALL_OW 266
13123: PUSH
13124: LD_INT 5
13126: EQUAL
13127: IFFALSE 13201
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13129: LD_VAR 0 12
13133: PUSH
13134: LD_INT 1
13136: ARRAY
13137: PPUSH
13138: CALL_OW 313
13142: PUSH
13143: LD_INT 3
13145: LESS
13146: IFFALSE 13182
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13148: LD_INT 0
13150: PPUSH
13151: LD_INT 5
13153: PUSH
13154: LD_INT 8
13156: PUSH
13157: LD_INT 9
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: PUSH
13165: LD_VAR 0 17
13169: ARRAY
13170: PPUSH
13171: LD_VAR 0 4
13175: PPUSH
13176: CALL_OW 380
13180: GO 13199
// PrepareHuman ( false , i , skill ) ;
13182: LD_INT 0
13184: PPUSH
13185: LD_VAR 0 8
13189: PPUSH
13190: LD_VAR 0 4
13194: PPUSH
13195: CALL_OW 380
// end else
13199: GO 13218
// PrepareHuman ( false , i , skill ) ;
13201: LD_INT 0
13203: PPUSH
13204: LD_VAR 0 8
13208: PPUSH
13209: LD_VAR 0 4
13213: PPUSH
13214: CALL_OW 380
// un := CreateHuman ;
13218: LD_ADDR_VAR 0 14
13222: PUSH
13223: CALL_OW 44
13227: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13228: LD_ADDR_VAR 0 7
13232: PUSH
13233: LD_VAR 0 7
13237: PPUSH
13238: LD_INT 1
13240: PPUSH
13241: LD_VAR 0 14
13245: PPUSH
13246: CALL_OW 2
13250: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13251: LD_VAR 0 14
13255: PPUSH
13256: LD_VAR 0 12
13260: PUSH
13261: LD_INT 1
13263: ARRAY
13264: PPUSH
13265: CALL_OW 52
// end ;
13269: GO 12904
13271: POP
13272: POP
// end ;
13273: GO 12204
13275: POP
13276: POP
// result := result ^ buildings ;
13277: LD_ADDR_VAR 0 7
13281: PUSH
13282: LD_VAR 0 7
13286: PUSH
13287: LD_VAR 0 18
13291: ADD
13292: ST_TO_ADDR
// end else
13293: GO 13436
// begin for i = 1 to personel do
13295: LD_ADDR_VAR 0 8
13299: PUSH
13300: DOUBLE
13301: LD_INT 1
13303: DEC
13304: ST_TO_ADDR
13305: LD_VAR 0 6
13309: PUSH
13310: FOR_TO
13311: IFFALSE 13434
// begin if i > 4 then
13313: LD_VAR 0 8
13317: PUSH
13318: LD_INT 4
13320: GREATER
13321: IFFALSE 13325
// break ;
13323: GO 13434
// x := personel [ i ] ;
13325: LD_ADDR_VAR 0 13
13329: PUSH
13330: LD_VAR 0 6
13334: PUSH
13335: LD_VAR 0 8
13339: ARRAY
13340: ST_TO_ADDR
// if x = - 1 then
13341: LD_VAR 0 13
13345: PUSH
13346: LD_INT 1
13348: NEG
13349: EQUAL
13350: IFFALSE 13354
// continue ;
13352: GO 13310
// PrepareHuman ( false , i , skill ) ;
13354: LD_INT 0
13356: PPUSH
13357: LD_VAR 0 8
13361: PPUSH
13362: LD_VAR 0 4
13366: PPUSH
13367: CALL_OW 380
// un := CreateHuman ;
13371: LD_ADDR_VAR 0 14
13375: PUSH
13376: CALL_OW 44
13380: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13381: LD_VAR 0 14
13385: PPUSH
13386: LD_VAR 0 1
13390: PPUSH
13391: CALL_OW 250
13395: PPUSH
13396: LD_VAR 0 1
13400: PPUSH
13401: CALL_OW 251
13405: PPUSH
13406: LD_INT 10
13408: PPUSH
13409: LD_INT 0
13411: PPUSH
13412: CALL_OW 50
// result := result ^ un ;
13416: LD_ADDR_VAR 0 7
13420: PUSH
13421: LD_VAR 0 7
13425: PUSH
13426: LD_VAR 0 14
13430: ADD
13431: ST_TO_ADDR
// end ;
13432: GO 13310
13434: POP
13435: POP
// end ; end ;
13436: LD_VAR 0 7
13440: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13441: LD_INT 0
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
13451: PPUSH
13452: PPUSH
13453: PPUSH
13454: PPUSH
13455: PPUSH
13456: PPUSH
13457: PPUSH
13458: PPUSH
// result := false ;
13459: LD_ADDR_VAR 0 3
13463: PUSH
13464: LD_INT 0
13466: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13467: LD_VAR 0 1
13471: NOT
13472: IFTRUE 13497
13474: PUSH
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 266
13484: PUSH
13485: LD_INT 32
13487: PUSH
13488: LD_INT 33
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: IN
13495: NOT
13496: OR
13497: IFFALSE 13501
// exit ;
13499: GO 14636
// nat := GetNation ( tower ) ;
13501: LD_ADDR_VAR 0 12
13505: PUSH
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 248
13515: ST_TO_ADDR
// side := GetSide ( tower ) ;
13516: LD_ADDR_VAR 0 16
13520: PUSH
13521: LD_VAR 0 1
13525: PPUSH
13526: CALL_OW 255
13530: ST_TO_ADDR
// x := GetX ( tower ) ;
13531: LD_ADDR_VAR 0 10
13535: PUSH
13536: LD_VAR 0 1
13540: PPUSH
13541: CALL_OW 250
13545: ST_TO_ADDR
// y := GetY ( tower ) ;
13546: LD_ADDR_VAR 0 11
13550: PUSH
13551: LD_VAR 0 1
13555: PPUSH
13556: CALL_OW 251
13560: ST_TO_ADDR
// if not x or not y then
13561: LD_VAR 0 10
13565: NOT
13566: IFTRUE 13575
13568: PUSH
13569: LD_VAR 0 11
13573: NOT
13574: OR
13575: IFFALSE 13579
// exit ;
13577: GO 14636
// weapon := 0 ;
13579: LD_ADDR_VAR 0 18
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// fac_list := [ ] ;
13587: LD_ADDR_VAR 0 17
13591: PUSH
13592: EMPTY
13593: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13594: LD_ADDR_VAR 0 6
13598: PUSH
13599: LD_VAR 0 1
13603: PPUSH
13604: CALL_OW 274
13608: PPUSH
13609: LD_VAR 0 2
13613: PPUSH
13614: LD_INT 0
13616: PPUSH
13617: CALL 11171 0 3
13621: PPUSH
13622: LD_INT 30
13624: PUSH
13625: LD_INT 3
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PPUSH
13632: CALL_OW 72
13636: ST_TO_ADDR
// if not factories then
13637: LD_VAR 0 6
13641: NOT
13642: IFFALSE 13646
// exit ;
13644: GO 14636
// for i in factories do
13646: LD_ADDR_VAR 0 8
13650: PUSH
13651: LD_VAR 0 6
13655: PUSH
13656: FOR_IN
13657: IFFALSE 13682
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13659: LD_ADDR_VAR 0 17
13663: PUSH
13664: LD_VAR 0 17
13668: PUSH
13669: LD_VAR 0 8
13673: PPUSH
13674: CALL_OW 478
13678: UNION
13679: ST_TO_ADDR
13680: GO 13656
13682: POP
13683: POP
// if not fac_list then
13684: LD_VAR 0 17
13688: NOT
13689: IFFALSE 13693
// exit ;
13691: GO 14636
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13693: LD_ADDR_VAR 0 5
13697: PUSH
13698: LD_INT 4
13700: PUSH
13701: LD_INT 5
13703: PUSH
13704: LD_INT 9
13706: PUSH
13707: LD_INT 10
13709: PUSH
13710: LD_INT 6
13712: PUSH
13713: LD_INT 7
13715: PUSH
13716: LD_INT 11
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 27
13730: PUSH
13731: LD_INT 28
13733: PUSH
13734: LD_INT 26
13736: PUSH
13737: LD_INT 30
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 43
13748: PUSH
13749: LD_INT 44
13751: PUSH
13752: LD_INT 46
13754: PUSH
13755: LD_INT 45
13757: PUSH
13758: LD_INT 47
13760: PUSH
13761: LD_INT 49
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: PUSH
13777: LD_VAR 0 12
13781: ARRAY
13782: ST_TO_ADDR
// list := list isect fac_list ;
13783: LD_ADDR_VAR 0 5
13787: PUSH
13788: LD_VAR 0 5
13792: PUSH
13793: LD_VAR 0 17
13797: ISECT
13798: ST_TO_ADDR
// if not list then
13799: LD_VAR 0 5
13803: NOT
13804: IFFALSE 13808
// exit ;
13806: GO 14636
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13808: LD_VAR 0 12
13812: PUSH
13813: LD_INT 3
13815: EQUAL
13816: IFFALSE 13828
13818: PUSH
13819: LD_INT 49
13821: PUSH
13822: LD_VAR 0 5
13826: IN
13827: AND
13828: IFFALSE 13848
13830: PUSH
13831: LD_INT 31
13833: PPUSH
13834: LD_VAR 0 16
13838: PPUSH
13839: CALL_OW 321
13843: PUSH
13844: LD_INT 2
13846: EQUAL
13847: AND
13848: IFFALSE 13908
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13850: LD_INT 22
13852: PUSH
13853: LD_VAR 0 16
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 35
13864: PUSH
13865: LD_INT 49
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 91
13874: PUSH
13875: LD_VAR 0 1
13879: PUSH
13880: LD_INT 10
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: PPUSH
13893: CALL_OW 69
13897: NOT
13898: IFFALSE 13908
// weapon := ru_time_lapser ;
13900: LD_ADDR_VAR 0 18
13904: PUSH
13905: LD_INT 49
13907: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13908: LD_VAR 0 12
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: IN
13923: IFFALSE 13947
13925: PUSH
13926: LD_INT 11
13928: PUSH
13929: LD_VAR 0 5
13933: IN
13934: IFTRUE 13946
13936: PUSH
13937: LD_INT 30
13939: PUSH
13940: LD_VAR 0 5
13944: IN
13945: OR
13946: AND
13947: IFFALSE 13967
13949: PUSH
13950: LD_INT 6
13952: PPUSH
13953: LD_VAR 0 16
13957: PPUSH
13958: CALL_OW 321
13962: PUSH
13963: LD_INT 2
13965: EQUAL
13966: AND
13967: IFFALSE 14134
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13969: LD_INT 22
13971: PUSH
13972: LD_VAR 0 16
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 35
13986: PUSH
13987: LD_INT 11
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 35
13996: PUSH
13997: LD_INT 30
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 91
14011: PUSH
14012: LD_VAR 0 1
14016: PUSH
14017: LD_INT 18
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: PPUSH
14030: CALL_OW 69
14034: NOT
14035: IFFALSE 14111
14037: PUSH
14038: LD_INT 22
14040: PUSH
14041: LD_VAR 0 16
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 2
14052: PUSH
14053: LD_INT 30
14055: PUSH
14056: LD_INT 32
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: LD_INT 30
14065: PUSH
14066: LD_INT 33
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 91
14080: PUSH
14081: LD_VAR 0 1
14085: PUSH
14086: LD_INT 12
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: PPUSH
14102: CALL_OW 69
14106: PUSH
14107: LD_INT 2
14109: GREATER
14110: AND
14111: IFFALSE 14134
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14113: LD_ADDR_VAR 0 18
14117: PUSH
14118: LD_INT 11
14120: PUSH
14121: LD_INT 30
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_VAR 0 12
14132: ARRAY
14133: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14134: LD_VAR 0 18
14138: NOT
14139: IFFALSE 14159
14141: PUSH
14142: LD_INT 40
14144: PPUSH
14145: LD_VAR 0 16
14149: PPUSH
14150: CALL_OW 321
14154: PUSH
14155: LD_INT 2
14157: EQUAL
14158: AND
14159: IFFALSE 14195
14161: PUSH
14162: LD_INT 7
14164: PUSH
14165: LD_VAR 0 5
14169: IN
14170: IFTRUE 14182
14172: PUSH
14173: LD_INT 28
14175: PUSH
14176: LD_VAR 0 5
14180: IN
14181: OR
14182: IFTRUE 14194
14184: PUSH
14185: LD_INT 45
14187: PUSH
14188: LD_VAR 0 5
14192: IN
14193: OR
14194: AND
14195: IFFALSE 14449
// begin hex := GetHexInfo ( x , y ) ;
14197: LD_ADDR_VAR 0 4
14201: PUSH
14202: LD_VAR 0 10
14206: PPUSH
14207: LD_VAR 0 11
14211: PPUSH
14212: CALL_OW 546
14216: ST_TO_ADDR
// if hex [ 1 ] then
14217: LD_VAR 0 4
14221: PUSH
14222: LD_INT 1
14224: ARRAY
14225: IFFALSE 14229
// exit ;
14227: GO 14636
// height := hex [ 2 ] ;
14229: LD_ADDR_VAR 0 15
14233: PUSH
14234: LD_VAR 0 4
14238: PUSH
14239: LD_INT 2
14241: ARRAY
14242: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14243: LD_ADDR_VAR 0 14
14247: PUSH
14248: LD_INT 0
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: LD_INT 3
14256: PUSH
14257: LD_INT 5
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: ST_TO_ADDR
// for i in tmp do
14266: LD_ADDR_VAR 0 8
14270: PUSH
14271: LD_VAR 0 14
14275: PUSH
14276: FOR_IN
14277: IFFALSE 14447
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14279: LD_ADDR_VAR 0 9
14283: PUSH
14284: LD_VAR 0 10
14288: PPUSH
14289: LD_VAR 0 8
14293: PPUSH
14294: LD_INT 5
14296: PPUSH
14297: CALL_OW 272
14301: PUSH
14302: LD_VAR 0 11
14306: PPUSH
14307: LD_VAR 0 8
14311: PPUSH
14312: LD_INT 5
14314: PPUSH
14315: CALL_OW 273
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14324: LD_VAR 0 9
14328: PUSH
14329: LD_INT 1
14331: ARRAY
14332: PPUSH
14333: LD_VAR 0 9
14337: PUSH
14338: LD_INT 2
14340: ARRAY
14341: PPUSH
14342: CALL_OW 488
14346: IFFALSE 14445
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14348: LD_ADDR_VAR 0 4
14352: PUSH
14353: LD_VAR 0 9
14357: PUSH
14358: LD_INT 1
14360: ARRAY
14361: PPUSH
14362: LD_VAR 0 9
14366: PUSH
14367: LD_INT 2
14369: ARRAY
14370: PPUSH
14371: CALL_OW 546
14375: ST_TO_ADDR
// if hex [ 1 ] then
14376: LD_VAR 0 4
14380: PUSH
14381: LD_INT 1
14383: ARRAY
14384: IFFALSE 14388
// continue ;
14386: GO 14276
// h := hex [ 2 ] ;
14388: LD_ADDR_VAR 0 13
14392: PUSH
14393: LD_VAR 0 4
14397: PUSH
14398: LD_INT 2
14400: ARRAY
14401: ST_TO_ADDR
// if h + 7 < height then
14402: LD_VAR 0 13
14406: PUSH
14407: LD_INT 7
14409: PLUS
14410: PUSH
14411: LD_VAR 0 15
14415: LESS
14416: IFFALSE 14445
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14418: LD_ADDR_VAR 0 18
14422: PUSH
14423: LD_INT 7
14425: PUSH
14426: LD_INT 28
14428: PUSH
14429: LD_INT 45
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: PUSH
14437: LD_VAR 0 12
14441: ARRAY
14442: ST_TO_ADDR
// break ;
14443: GO 14447
// end ; end ; end ;
14445: GO 14276
14447: POP
14448: POP
// end ; if not weapon then
14449: LD_VAR 0 18
14453: NOT
14454: IFFALSE 14514
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14456: LD_ADDR_VAR 0 5
14460: PUSH
14461: LD_VAR 0 5
14465: PUSH
14466: LD_INT 11
14468: PUSH
14469: LD_INT 30
14471: PUSH
14472: LD_INT 49
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: LIST
14479: DIFF
14480: ST_TO_ADDR
// if not list then
14481: LD_VAR 0 5
14485: NOT
14486: IFFALSE 14490
// exit ;
14488: GO 14636
// weapon := list [ rand ( 1 , list ) ] ;
14490: LD_ADDR_VAR 0 18
14494: PUSH
14495: LD_VAR 0 5
14499: PUSH
14500: LD_INT 1
14502: PPUSH
14503: LD_VAR 0 5
14507: PPUSH
14508: CALL_OW 12
14512: ARRAY
14513: ST_TO_ADDR
// end ; if weapon then
14514: LD_VAR 0 18
14518: IFFALSE 14636
// begin tmp := CostOfWeapon ( weapon ) ;
14520: LD_ADDR_VAR 0 14
14524: PUSH
14525: LD_VAR 0 18
14529: PPUSH
14530: CALL_OW 451
14534: ST_TO_ADDR
// j := GetBase ( tower ) ;
14535: LD_ADDR_VAR 0 9
14539: PUSH
14540: LD_VAR 0 1
14544: PPUSH
14545: CALL_OW 274
14549: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14550: LD_VAR 0 9
14554: PPUSH
14555: LD_INT 1
14557: PPUSH
14558: CALL_OW 275
14562: PUSH
14563: LD_VAR 0 14
14567: PUSH
14568: LD_INT 1
14570: ARRAY
14571: GREATEREQUAL
14572: IFFALSE 14598
14574: PUSH
14575: LD_VAR 0 9
14579: PPUSH
14580: LD_INT 2
14582: PPUSH
14583: CALL_OW 275
14587: PUSH
14588: LD_VAR 0 14
14592: PUSH
14593: LD_INT 2
14595: ARRAY
14596: GREATEREQUAL
14597: AND
14598: IFFALSE 14624
14600: PUSH
14601: LD_VAR 0 9
14605: PPUSH
14606: LD_INT 3
14608: PPUSH
14609: CALL_OW 275
14613: PUSH
14614: LD_VAR 0 14
14618: PUSH
14619: LD_INT 3
14621: ARRAY
14622: GREATEREQUAL
14623: AND
14624: IFFALSE 14636
// result := weapon ;
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_VAR 0 18
14635: ST_TO_ADDR
// end ; end ;
14636: LD_VAR 0 3
14640: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14641: LD_INT 0
14643: PPUSH
14644: PPUSH
// result := true ;
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: LD_INT 1
14652: ST_TO_ADDR
// if array1 = array2 then
14653: LD_VAR 0 1
14657: PUSH
14658: LD_VAR 0 2
14662: EQUAL
14663: IFFALSE 14723
// begin for i = 1 to array1 do
14665: LD_ADDR_VAR 0 4
14669: PUSH
14670: DOUBLE
14671: LD_INT 1
14673: DEC
14674: ST_TO_ADDR
14675: LD_VAR 0 1
14679: PUSH
14680: FOR_TO
14681: IFFALSE 14719
// if array1 [ i ] <> array2 [ i ] then
14683: LD_VAR 0 1
14687: PUSH
14688: LD_VAR 0 4
14692: ARRAY
14693: PUSH
14694: LD_VAR 0 2
14698: PUSH
14699: LD_VAR 0 4
14703: ARRAY
14704: NONEQUAL
14705: IFFALSE 14717
// begin result := false ;
14707: LD_ADDR_VAR 0 3
14711: PUSH
14712: LD_INT 0
14714: ST_TO_ADDR
// break ;
14715: GO 14719
// end ;
14717: GO 14680
14719: POP
14720: POP
// end else
14721: GO 14731
// result := false ;
14723: LD_ADDR_VAR 0 3
14727: PUSH
14728: LD_INT 0
14730: ST_TO_ADDR
// end ;
14731: LD_VAR 0 3
14735: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14736: LD_INT 0
14738: PPUSH
14739: PPUSH
// if not array1 or not array2 then
14740: LD_VAR 0 1
14744: NOT
14745: IFTRUE 14754
14747: PUSH
14748: LD_VAR 0 2
14752: NOT
14753: OR
14754: IFFALSE 14758
// exit ;
14756: GO 14822
// result := true ;
14758: LD_ADDR_VAR 0 3
14762: PUSH
14763: LD_INT 1
14765: ST_TO_ADDR
// for i = 1 to array1 do
14766: LD_ADDR_VAR 0 4
14770: PUSH
14771: DOUBLE
14772: LD_INT 1
14774: DEC
14775: ST_TO_ADDR
14776: LD_VAR 0 1
14780: PUSH
14781: FOR_TO
14782: IFFALSE 14820
// if array1 [ i ] <> array2 [ i ] then
14784: LD_VAR 0 1
14788: PUSH
14789: LD_VAR 0 4
14793: ARRAY
14794: PUSH
14795: LD_VAR 0 2
14799: PUSH
14800: LD_VAR 0 4
14804: ARRAY
14805: NONEQUAL
14806: IFFALSE 14818
// begin result := false ;
14808: LD_ADDR_VAR 0 3
14812: PUSH
14813: LD_INT 0
14815: ST_TO_ADDR
// break ;
14816: GO 14820
// end ;
14818: GO 14781
14820: POP
14821: POP
// end ;
14822: LD_VAR 0 3
14826: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14827: LD_INT 0
14829: PPUSH
14830: PPUSH
14831: PPUSH
// pom := GetBase ( fac ) ;
14832: LD_ADDR_VAR 0 5
14836: PUSH
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 274
14846: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14847: LD_ADDR_VAR 0 4
14851: PUSH
14852: LD_VAR 0 2
14856: PUSH
14857: LD_INT 1
14859: ARRAY
14860: PPUSH
14861: LD_VAR 0 2
14865: PUSH
14866: LD_INT 2
14868: ARRAY
14869: PPUSH
14870: LD_VAR 0 2
14874: PUSH
14875: LD_INT 3
14877: ARRAY
14878: PPUSH
14879: LD_VAR 0 2
14883: PUSH
14884: LD_INT 4
14886: ARRAY
14887: PPUSH
14888: CALL_OW 449
14892: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14893: LD_ADDR_VAR 0 3
14897: PUSH
14898: LD_VAR 0 5
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: CALL_OW 275
14910: PUSH
14911: LD_VAR 0 4
14915: PUSH
14916: LD_INT 1
14918: ARRAY
14919: GREATEREQUAL
14920: IFFALSE 14946
14922: PUSH
14923: LD_VAR 0 5
14927: PPUSH
14928: LD_INT 2
14930: PPUSH
14931: CALL_OW 275
14935: PUSH
14936: LD_VAR 0 4
14940: PUSH
14941: LD_INT 2
14943: ARRAY
14944: GREATEREQUAL
14945: AND
14946: IFFALSE 14972
14948: PUSH
14949: LD_VAR 0 5
14953: PPUSH
14954: LD_INT 3
14956: PPUSH
14957: CALL_OW 275
14961: PUSH
14962: LD_VAR 0 4
14966: PUSH
14967: LD_INT 3
14969: ARRAY
14970: GREATEREQUAL
14971: AND
14972: ST_TO_ADDR
// end ;
14973: LD_VAR 0 3
14977: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14978: LD_INT 0
14980: PPUSH
14981: PPUSH
14982: PPUSH
14983: PPUSH
// pom := GetBase ( building ) ;
14984: LD_ADDR_VAR 0 3
14988: PUSH
14989: LD_VAR 0 1
14993: PPUSH
14994: CALL_OW 274
14998: ST_TO_ADDR
// if not pom then
14999: LD_VAR 0 3
15003: NOT
15004: IFFALSE 15008
// exit ;
15006: GO 15182
// btype := GetBType ( building ) ;
15008: LD_ADDR_VAR 0 5
15012: PUSH
15013: LD_VAR 0 1
15017: PPUSH
15018: CALL_OW 266
15022: ST_TO_ADDR
// if btype = b_armoury then
15023: LD_VAR 0 5
15027: PUSH
15028: LD_INT 4
15030: EQUAL
15031: IFFALSE 15041
// btype := b_barracks ;
15033: LD_ADDR_VAR 0 5
15037: PUSH
15038: LD_INT 5
15040: ST_TO_ADDR
// if btype = b_depot then
15041: LD_VAR 0 5
15045: PUSH
15046: LD_INT 0
15048: EQUAL
15049: IFFALSE 15059
// btype := b_warehouse ;
15051: LD_ADDR_VAR 0 5
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// if btype = b_workshop then
15059: LD_VAR 0 5
15063: PUSH
15064: LD_INT 2
15066: EQUAL
15067: IFFALSE 15077
// btype := b_factory ;
15069: LD_ADDR_VAR 0 5
15073: PUSH
15074: LD_INT 3
15076: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15077: LD_ADDR_VAR 0 4
15081: PUSH
15082: LD_VAR 0 5
15086: PPUSH
15087: LD_VAR 0 1
15091: PPUSH
15092: CALL_OW 248
15096: PPUSH
15097: CALL_OW 450
15101: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: LD_INT 1
15114: PPUSH
15115: CALL_OW 275
15119: PUSH
15120: LD_VAR 0 4
15124: PUSH
15125: LD_INT 1
15127: ARRAY
15128: GREATEREQUAL
15129: IFFALSE 15155
15131: PUSH
15132: LD_VAR 0 3
15136: PPUSH
15137: LD_INT 2
15139: PPUSH
15140: CALL_OW 275
15144: PUSH
15145: LD_VAR 0 4
15149: PUSH
15150: LD_INT 2
15152: ARRAY
15153: GREATEREQUAL
15154: AND
15155: IFFALSE 15181
15157: PUSH
15158: LD_VAR 0 3
15162: PPUSH
15163: LD_INT 3
15165: PPUSH
15166: CALL_OW 275
15170: PUSH
15171: LD_VAR 0 4
15175: PUSH
15176: LD_INT 3
15178: ARRAY
15179: GREATEREQUAL
15180: AND
15181: ST_TO_ADDR
// end ;
15182: LD_VAR 0 2
15186: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15187: LD_INT 0
15189: PPUSH
15190: PPUSH
15191: PPUSH
// pom := GetBase ( building ) ;
15192: LD_ADDR_VAR 0 4
15196: PUSH
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 274
15206: ST_TO_ADDR
// if not pom then
15207: LD_VAR 0 4
15211: NOT
15212: IFFALSE 15216
// exit ;
15214: GO 15321
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15216: LD_ADDR_VAR 0 5
15220: PUSH
15221: LD_VAR 0 2
15225: PPUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 248
15235: PPUSH
15236: CALL_OW 450
15240: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15241: LD_ADDR_VAR 0 3
15245: PUSH
15246: LD_VAR 0 4
15250: PPUSH
15251: LD_INT 1
15253: PPUSH
15254: CALL_OW 275
15258: PUSH
15259: LD_VAR 0 5
15263: PUSH
15264: LD_INT 1
15266: ARRAY
15267: GREATEREQUAL
15268: IFFALSE 15294
15270: PUSH
15271: LD_VAR 0 4
15275: PPUSH
15276: LD_INT 2
15278: PPUSH
15279: CALL_OW 275
15283: PUSH
15284: LD_VAR 0 5
15288: PUSH
15289: LD_INT 2
15291: ARRAY
15292: GREATEREQUAL
15293: AND
15294: IFFALSE 15320
15296: PUSH
15297: LD_VAR 0 4
15301: PPUSH
15302: LD_INT 3
15304: PPUSH
15305: CALL_OW 275
15309: PUSH
15310: LD_VAR 0 5
15314: PUSH
15315: LD_INT 3
15317: ARRAY
15318: GREATEREQUAL
15319: AND
15320: ST_TO_ADDR
// end ;
15321: LD_VAR 0 3
15325: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15326: LD_INT 0
15328: PPUSH
15329: PPUSH
15330: PPUSH
15331: PPUSH
15332: PPUSH
15333: PPUSH
15334: PPUSH
15335: PPUSH
15336: PPUSH
15337: PPUSH
15338: PPUSH
// result := false ;
15339: LD_ADDR_VAR 0 8
15343: PUSH
15344: LD_INT 0
15346: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15347: LD_VAR 0 5
15351: NOT
15352: IFTRUE 15361
15354: PUSH
15355: LD_VAR 0 1
15359: NOT
15360: OR
15361: IFTRUE 15370
15363: PUSH
15364: LD_VAR 0 2
15368: NOT
15369: OR
15370: IFTRUE 15379
15372: PUSH
15373: LD_VAR 0 3
15377: NOT
15378: OR
15379: IFFALSE 15383
// exit ;
15381: GO 16209
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15383: LD_ADDR_VAR 0 14
15387: PUSH
15388: LD_VAR 0 1
15392: PPUSH
15393: LD_VAR 0 2
15397: PPUSH
15398: LD_VAR 0 3
15402: PPUSH
15403: LD_VAR 0 4
15407: PPUSH
15408: LD_VAR 0 5
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: PPUSH
15417: CALL_OW 248
15421: PPUSH
15422: LD_INT 0
15424: PPUSH
15425: CALL 17490 0 6
15429: ST_TO_ADDR
// if not hexes then
15430: LD_VAR 0 14
15434: NOT
15435: IFFALSE 15439
// exit ;
15437: GO 16209
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15439: LD_ADDR_VAR 0 17
15443: PUSH
15444: LD_VAR 0 5
15448: PPUSH
15449: LD_INT 22
15451: PUSH
15452: LD_VAR 0 13
15456: PPUSH
15457: CALL_OW 255
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 2
15468: PUSH
15469: LD_INT 30
15471: PUSH
15472: LD_INT 0
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 30
15481: PUSH
15482: LD_INT 1
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PPUSH
15498: CALL_OW 72
15502: ST_TO_ADDR
// for i = 1 to hexes do
15503: LD_ADDR_VAR 0 9
15507: PUSH
15508: DOUBLE
15509: LD_INT 1
15511: DEC
15512: ST_TO_ADDR
15513: LD_VAR 0 14
15517: PUSH
15518: FOR_TO
15519: IFFALSE 16207
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15521: LD_ADDR_VAR 0 13
15525: PUSH
15526: LD_VAR 0 14
15530: PUSH
15531: LD_VAR 0 9
15535: ARRAY
15536: PUSH
15537: LD_INT 1
15539: ARRAY
15540: PPUSH
15541: LD_VAR 0 14
15545: PUSH
15546: LD_VAR 0 9
15550: ARRAY
15551: PUSH
15552: LD_INT 2
15554: ARRAY
15555: PPUSH
15556: CALL_OW 428
15560: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15561: LD_VAR 0 14
15565: PUSH
15566: LD_VAR 0 9
15570: ARRAY
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: LD_VAR 0 14
15580: PUSH
15581: LD_VAR 0 9
15585: ARRAY
15586: PUSH
15587: LD_INT 2
15589: ARRAY
15590: PPUSH
15591: CALL_OW 351
15595: IFTRUE 15634
15597: PUSH
15598: LD_VAR 0 14
15602: PUSH
15603: LD_VAR 0 9
15607: ARRAY
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PPUSH
15613: LD_VAR 0 14
15617: PUSH
15618: LD_VAR 0 9
15622: ARRAY
15623: PUSH
15624: LD_INT 2
15626: ARRAY
15627: PPUSH
15628: CALL_OW 488
15632: NOT
15633: OR
15634: IFTRUE 15651
15636: PUSH
15637: LD_VAR 0 13
15641: PPUSH
15642: CALL_OW 247
15646: PUSH
15647: LD_INT 3
15649: EQUAL
15650: OR
15651: IFFALSE 15657
// exit ;
15653: POP
15654: POP
15655: GO 16209
// if not tmp then
15657: LD_VAR 0 13
15661: NOT
15662: IFFALSE 15666
// continue ;
15664: GO 15518
// result := true ;
15666: LD_ADDR_VAR 0 8
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15674: LD_VAR 0 6
15678: IFFALSE 15695
15680: PUSH
15681: LD_VAR 0 13
15685: PPUSH
15686: CALL_OW 247
15690: PUSH
15691: LD_INT 2
15693: EQUAL
15694: AND
15695: IFFALSE 15712
15697: PUSH
15698: LD_VAR 0 13
15702: PPUSH
15703: CALL_OW 263
15707: PUSH
15708: LD_INT 1
15710: EQUAL
15711: AND
15712: IFFALSE 15876
// begin if IsDrivenBy ( tmp ) then
15714: LD_VAR 0 13
15718: PPUSH
15719: CALL_OW 311
15723: IFFALSE 15727
// continue ;
15725: GO 15518
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15727: LD_VAR 0 6
15731: PPUSH
15732: LD_INT 3
15734: PUSH
15735: LD_INT 60
15737: PUSH
15738: EMPTY
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 3
15747: PUSH
15748: LD_INT 55
15750: PUSH
15751: EMPTY
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PPUSH
15762: CALL_OW 72
15766: IFFALSE 15874
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15768: LD_ADDR_VAR 0 18
15772: PUSH
15773: LD_VAR 0 6
15777: PPUSH
15778: LD_INT 3
15780: PUSH
15781: LD_INT 60
15783: PUSH
15784: EMPTY
15785: LIST
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 3
15793: PUSH
15794: LD_INT 55
15796: PUSH
15797: EMPTY
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PPUSH
15808: CALL_OW 72
15812: PUSH
15813: LD_INT 1
15815: ARRAY
15816: ST_TO_ADDR
// if IsInUnit ( driver ) then
15817: LD_VAR 0 18
15821: PPUSH
15822: CALL_OW 310
15826: IFFALSE 15837
// ComExit ( driver ) ;
15828: LD_VAR 0 18
15832: PPUSH
15833: CALL 41480 0 1
// AddComEnterUnit ( driver , tmp ) ;
15837: LD_VAR 0 18
15841: PPUSH
15842: LD_VAR 0 13
15846: PPUSH
15847: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15851: LD_VAR 0 18
15855: PPUSH
15856: LD_VAR 0 7
15860: PPUSH
15861: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15865: LD_VAR 0 18
15869: PPUSH
15870: CALL_OW 181
// end ; continue ;
15874: GO 15518
// end ; if not cleaners or not tmp in cleaners then
15876: LD_VAR 0 6
15880: NOT
15881: IFTRUE 15896
15883: PUSH
15884: LD_VAR 0 13
15888: PUSH
15889: LD_VAR 0 6
15893: IN
15894: NOT
15895: OR
15896: IFFALSE 16205
// begin if dep then
15898: LD_VAR 0 17
15902: IFFALSE 16038
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15904: LD_ADDR_VAR 0 16
15908: PUSH
15909: LD_VAR 0 17
15913: PUSH
15914: LD_INT 1
15916: ARRAY
15917: PPUSH
15918: CALL_OW 250
15922: PPUSH
15923: LD_VAR 0 17
15927: PUSH
15928: LD_INT 1
15930: ARRAY
15931: PPUSH
15932: CALL_OW 254
15936: PPUSH
15937: LD_INT 5
15939: PPUSH
15940: CALL_OW 272
15944: PUSH
15945: LD_VAR 0 17
15949: PUSH
15950: LD_INT 1
15952: ARRAY
15953: PPUSH
15954: CALL_OW 251
15958: PPUSH
15959: LD_VAR 0 17
15963: PUSH
15964: LD_INT 1
15966: ARRAY
15967: PPUSH
15968: CALL_OW 254
15972: PPUSH
15973: LD_INT 5
15975: PPUSH
15976: CALL_OW 273
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15985: LD_VAR 0 16
15989: PUSH
15990: LD_INT 1
15992: ARRAY
15993: PPUSH
15994: LD_VAR 0 16
15998: PUSH
15999: LD_INT 2
16001: ARRAY
16002: PPUSH
16003: CALL_OW 488
16007: IFFALSE 16038
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16009: LD_VAR 0 13
16013: PPUSH
16014: LD_VAR 0 16
16018: PUSH
16019: LD_INT 1
16021: ARRAY
16022: PPUSH
16023: LD_VAR 0 16
16027: PUSH
16028: LD_INT 2
16030: ARRAY
16031: PPUSH
16032: CALL_OW 111
// continue ;
16036: GO 15518
// end ; end ; r := GetDir ( tmp ) ;
16038: LD_ADDR_VAR 0 15
16042: PUSH
16043: LD_VAR 0 13
16047: PPUSH
16048: CALL_OW 254
16052: ST_TO_ADDR
// if r = 5 then
16053: LD_VAR 0 15
16057: PUSH
16058: LD_INT 5
16060: EQUAL
16061: IFFALSE 16071
// r := 0 ;
16063: LD_ADDR_VAR 0 15
16067: PUSH
16068: LD_INT 0
16070: ST_TO_ADDR
// for j = r to 5 do
16071: LD_ADDR_VAR 0 10
16075: PUSH
16076: DOUBLE
16077: LD_VAR 0 15
16081: DEC
16082: ST_TO_ADDR
16083: LD_INT 5
16085: PUSH
16086: FOR_TO
16087: IFFALSE 16203
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16089: LD_ADDR_VAR 0 11
16093: PUSH
16094: LD_VAR 0 13
16098: PPUSH
16099: CALL_OW 250
16103: PPUSH
16104: LD_VAR 0 10
16108: PPUSH
16109: LD_INT 2
16111: PPUSH
16112: CALL_OW 272
16116: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16117: LD_ADDR_VAR 0 12
16121: PUSH
16122: LD_VAR 0 13
16126: PPUSH
16127: CALL_OW 251
16131: PPUSH
16132: LD_VAR 0 10
16136: PPUSH
16137: LD_INT 2
16139: PPUSH
16140: CALL_OW 273
16144: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16145: LD_VAR 0 11
16149: PPUSH
16150: LD_VAR 0 12
16154: PPUSH
16155: CALL_OW 488
16159: IFFALSE 16178
16161: PUSH
16162: LD_VAR 0 11
16166: PPUSH
16167: LD_VAR 0 12
16171: PPUSH
16172: CALL_OW 428
16176: NOT
16177: AND
16178: IFFALSE 16201
// begin ComMoveXY ( tmp , _x , _y ) ;
16180: LD_VAR 0 13
16184: PPUSH
16185: LD_VAR 0 11
16189: PPUSH
16190: LD_VAR 0 12
16194: PPUSH
16195: CALL_OW 111
// break ;
16199: GO 16203
// end ; end ;
16201: GO 16086
16203: POP
16204: POP
// end ; end ;
16205: GO 15518
16207: POP
16208: POP
// end ;
16209: LD_VAR 0 8
16213: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16214: LD_INT 0
16216: PPUSH
// result := true ;
16217: LD_ADDR_VAR 0 3
16221: PUSH
16222: LD_INT 1
16224: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16225: LD_VAR 0 2
16229: PUSH
16230: LD_INT 24
16232: DOUBLE
16233: EQUAL
16234: IFTRUE 16244
16236: LD_INT 33
16238: DOUBLE
16239: EQUAL
16240: IFTRUE 16244
16242: GO 16269
16244: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16245: LD_ADDR_VAR 0 3
16249: PUSH
16250: LD_INT 32
16252: PPUSH
16253: LD_VAR 0 1
16257: PPUSH
16258: CALL_OW 321
16262: PUSH
16263: LD_INT 2
16265: EQUAL
16266: ST_TO_ADDR
16267: GO 16585
16269: LD_INT 20
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16302
16277: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16278: LD_ADDR_VAR 0 3
16282: PUSH
16283: LD_INT 6
16285: PPUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 321
16295: PUSH
16296: LD_INT 2
16298: EQUAL
16299: ST_TO_ADDR
16300: GO 16585
16302: LD_INT 22
16304: DOUBLE
16305: EQUAL
16306: IFTRUE 16316
16308: LD_INT 36
16310: DOUBLE
16311: EQUAL
16312: IFTRUE 16316
16314: GO 16341
16316: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16317: LD_ADDR_VAR 0 3
16321: PUSH
16322: LD_INT 15
16324: PPUSH
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 321
16334: PUSH
16335: LD_INT 2
16337: EQUAL
16338: ST_TO_ADDR
16339: GO 16585
16341: LD_INT 30
16343: DOUBLE
16344: EQUAL
16345: IFTRUE 16349
16347: GO 16374
16349: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16350: LD_ADDR_VAR 0 3
16354: PUSH
16355: LD_INT 20
16357: PPUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: CALL_OW 321
16367: PUSH
16368: LD_INT 2
16370: EQUAL
16371: ST_TO_ADDR
16372: GO 16585
16374: LD_INT 28
16376: DOUBLE
16377: EQUAL
16378: IFTRUE 16388
16380: LD_INT 21
16382: DOUBLE
16383: EQUAL
16384: IFTRUE 16388
16386: GO 16413
16388: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16389: LD_ADDR_VAR 0 3
16393: PUSH
16394: LD_INT 21
16396: PPUSH
16397: LD_VAR 0 1
16401: PPUSH
16402: CALL_OW 321
16406: PUSH
16407: LD_INT 2
16409: EQUAL
16410: ST_TO_ADDR
16411: GO 16585
16413: LD_INT 16
16415: DOUBLE
16416: EQUAL
16417: IFTRUE 16421
16419: GO 16446
16421: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16422: LD_ADDR_VAR 0 3
16426: PUSH
16427: LD_INT 84
16429: PPUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 321
16439: PUSH
16440: LD_INT 2
16442: EQUAL
16443: ST_TO_ADDR
16444: GO 16585
16446: LD_INT 19
16448: DOUBLE
16449: EQUAL
16450: IFTRUE 16460
16452: LD_INT 23
16454: DOUBLE
16455: EQUAL
16456: IFTRUE 16460
16458: GO 16485
16460: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16461: LD_ADDR_VAR 0 3
16465: PUSH
16466: LD_INT 83
16468: PPUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: CALL_OW 321
16478: PUSH
16479: LD_INT 2
16481: EQUAL
16482: ST_TO_ADDR
16483: GO 16585
16485: LD_INT 17
16487: DOUBLE
16488: EQUAL
16489: IFTRUE 16493
16491: GO 16518
16493: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16494: LD_ADDR_VAR 0 3
16498: PUSH
16499: LD_INT 39
16501: PPUSH
16502: LD_VAR 0 1
16506: PPUSH
16507: CALL_OW 321
16511: PUSH
16512: LD_INT 2
16514: EQUAL
16515: ST_TO_ADDR
16516: GO 16585
16518: LD_INT 18
16520: DOUBLE
16521: EQUAL
16522: IFTRUE 16526
16524: GO 16551
16526: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16527: LD_ADDR_VAR 0 3
16531: PUSH
16532: LD_INT 40
16534: PPUSH
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 321
16544: PUSH
16545: LD_INT 2
16547: EQUAL
16548: ST_TO_ADDR
16549: GO 16585
16551: LD_INT 27
16553: DOUBLE
16554: EQUAL
16555: IFTRUE 16559
16557: GO 16584
16559: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16560: LD_ADDR_VAR 0 3
16564: PUSH
16565: LD_INT 35
16567: PPUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 321
16577: PUSH
16578: LD_INT 2
16580: EQUAL
16581: ST_TO_ADDR
16582: GO 16585
16584: POP
// end ;
16585: LD_VAR 0 3
16589: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16590: LD_INT 0
16592: PPUSH
16593: PPUSH
16594: PPUSH
16595: PPUSH
16596: PPUSH
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
16602: PPUSH
// result := false ;
16603: LD_ADDR_VAR 0 6
16607: PUSH
16608: LD_INT 0
16610: ST_TO_ADDR
// if btype = b_depot then
16611: LD_VAR 0 2
16615: PUSH
16616: LD_INT 0
16618: EQUAL
16619: IFFALSE 16631
// begin result := true ;
16621: LD_ADDR_VAR 0 6
16625: PUSH
16626: LD_INT 1
16628: ST_TO_ADDR
// exit ;
16629: GO 17485
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16631: LD_VAR 0 1
16635: NOT
16636: IFTRUE 16661
16638: PUSH
16639: LD_VAR 0 1
16643: PPUSH
16644: CALL_OW 266
16648: PUSH
16649: LD_INT 0
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: IN
16659: NOT
16660: OR
16661: IFTRUE 16670
16663: PUSH
16664: LD_VAR 0 2
16668: NOT
16669: OR
16670: IFTRUE 16706
16672: PUSH
16673: LD_VAR 0 5
16677: PUSH
16678: LD_INT 0
16680: PUSH
16681: LD_INT 1
16683: PUSH
16684: LD_INT 2
16686: PUSH
16687: LD_INT 3
16689: PUSH
16690: LD_INT 4
16692: PUSH
16693: LD_INT 5
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: IN
16704: NOT
16705: OR
16706: IFTRUE 16725
16708: PUSH
16709: LD_VAR 0 3
16713: PPUSH
16714: LD_VAR 0 4
16718: PPUSH
16719: CALL_OW 488
16723: NOT
16724: OR
16725: IFFALSE 16729
// exit ;
16727: GO 17485
// side := GetSide ( depot ) ;
16729: LD_ADDR_VAR 0 9
16733: PUSH
16734: LD_VAR 0 1
16738: PPUSH
16739: CALL_OW 255
16743: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16744: LD_VAR 0 9
16748: PPUSH
16749: LD_VAR 0 2
16753: PPUSH
16754: CALL 16214 0 2
16758: NOT
16759: IFFALSE 16763
// exit ;
16761: GO 17485
// pom := GetBase ( depot ) ;
16763: LD_ADDR_VAR 0 10
16767: PUSH
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 274
16777: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16778: LD_ADDR_VAR 0 11
16782: PUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 248
16797: PPUSH
16798: CALL_OW 450
16802: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16803: LD_VAR 0 10
16807: PPUSH
16808: LD_INT 1
16810: PPUSH
16811: CALL_OW 275
16815: PUSH
16816: LD_VAR 0 11
16820: PUSH
16821: LD_INT 1
16823: ARRAY
16824: GREATEREQUAL
16825: IFFALSE 16851
16827: PUSH
16828: LD_VAR 0 10
16832: PPUSH
16833: LD_INT 2
16835: PPUSH
16836: CALL_OW 275
16840: PUSH
16841: LD_VAR 0 11
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: GREATEREQUAL
16850: AND
16851: IFFALSE 16877
16853: PUSH
16854: LD_VAR 0 10
16858: PPUSH
16859: LD_INT 3
16861: PPUSH
16862: CALL_OW 275
16866: PUSH
16867: LD_VAR 0 11
16871: PUSH
16872: LD_INT 3
16874: ARRAY
16875: GREATEREQUAL
16876: AND
16877: NOT
16878: IFFALSE 16882
// exit ;
16880: GO 17485
// if GetBType ( depot ) = b_depot then
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 266
16891: PUSH
16892: LD_INT 0
16894: EQUAL
16895: IFFALSE 16907
// dist := 28 else
16897: LD_ADDR_VAR 0 14
16901: PUSH
16902: LD_INT 28
16904: ST_TO_ADDR
16905: GO 16915
// dist := 36 ;
16907: LD_ADDR_VAR 0 14
16911: PUSH
16912: LD_INT 36
16914: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16915: LD_VAR 0 1
16919: PPUSH
16920: LD_VAR 0 3
16924: PPUSH
16925: LD_VAR 0 4
16929: PPUSH
16930: CALL_OW 297
16934: PUSH
16935: LD_VAR 0 14
16939: GREATER
16940: IFFALSE 16944
// exit ;
16942: GO 17485
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16944: LD_ADDR_VAR 0 12
16948: PUSH
16949: LD_VAR 0 2
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: LD_VAR 0 4
16963: PPUSH
16964: LD_VAR 0 5
16968: PPUSH
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 248
16978: PPUSH
16979: LD_INT 0
16981: PPUSH
16982: CALL 17490 0 6
16986: ST_TO_ADDR
// if not hexes then
16987: LD_VAR 0 12
16991: NOT
16992: IFFALSE 16996
// exit ;
16994: GO 17485
// hex := GetHexInfo ( x , y ) ;
16996: LD_ADDR_VAR 0 15
17000: PUSH
17001: LD_VAR 0 3
17005: PPUSH
17006: LD_VAR 0 4
17010: PPUSH
17011: CALL_OW 546
17015: ST_TO_ADDR
// if hex [ 1 ] then
17016: LD_VAR 0 15
17020: PUSH
17021: LD_INT 1
17023: ARRAY
17024: IFFALSE 17028
// exit ;
17026: GO 17485
// height := hex [ 2 ] ;
17028: LD_ADDR_VAR 0 13
17032: PUSH
17033: LD_VAR 0 15
17037: PUSH
17038: LD_INT 2
17040: ARRAY
17041: ST_TO_ADDR
// for i = 1 to hexes do
17042: LD_ADDR_VAR 0 7
17046: PUSH
17047: DOUBLE
17048: LD_INT 1
17050: DEC
17051: ST_TO_ADDR
17052: LD_VAR 0 12
17056: PUSH
17057: FOR_TO
17058: IFFALSE 17402
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17060: LD_VAR 0 12
17064: PUSH
17065: LD_VAR 0 7
17069: ARRAY
17070: PUSH
17071: LD_INT 1
17073: ARRAY
17074: PPUSH
17075: LD_VAR 0 12
17079: PUSH
17080: LD_VAR 0 7
17084: ARRAY
17085: PUSH
17086: LD_INT 2
17088: ARRAY
17089: PPUSH
17090: CALL_OW 488
17094: NOT
17095: IFTRUE 17137
17097: PUSH
17098: LD_VAR 0 12
17102: PUSH
17103: LD_VAR 0 7
17107: ARRAY
17108: PUSH
17109: LD_INT 1
17111: ARRAY
17112: PPUSH
17113: LD_VAR 0 12
17117: PUSH
17118: LD_VAR 0 7
17122: ARRAY
17123: PUSH
17124: LD_INT 2
17126: ARRAY
17127: PPUSH
17128: CALL_OW 428
17132: PUSH
17133: LD_INT 0
17135: GREATER
17136: OR
17137: IFTRUE 17175
17139: PUSH
17140: LD_VAR 0 12
17144: PUSH
17145: LD_VAR 0 7
17149: ARRAY
17150: PUSH
17151: LD_INT 1
17153: ARRAY
17154: PPUSH
17155: LD_VAR 0 12
17159: PUSH
17160: LD_VAR 0 7
17164: ARRAY
17165: PUSH
17166: LD_INT 2
17168: ARRAY
17169: PPUSH
17170: CALL_OW 351
17174: OR
17175: IFFALSE 17181
// exit ;
17177: POP
17178: POP
17179: GO 17485
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17181: LD_ADDR_VAR 0 8
17185: PUSH
17186: LD_VAR 0 12
17190: PUSH
17191: LD_VAR 0 7
17195: ARRAY
17196: PUSH
17197: LD_INT 1
17199: ARRAY
17200: PPUSH
17201: LD_VAR 0 12
17205: PUSH
17206: LD_VAR 0 7
17210: ARRAY
17211: PUSH
17212: LD_INT 2
17214: ARRAY
17215: PPUSH
17216: CALL_OW 546
17220: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17221: LD_VAR 0 8
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: IFTRUE 17251
17231: PUSH
17232: LD_VAR 0 8
17236: PUSH
17237: LD_INT 2
17239: ARRAY
17240: PUSH
17241: LD_VAR 0 13
17245: PUSH
17246: LD_INT 2
17248: PLUS
17249: GREATER
17250: OR
17251: IFTRUE 17273
17253: PUSH
17254: LD_VAR 0 8
17258: PUSH
17259: LD_INT 2
17261: ARRAY
17262: PUSH
17263: LD_VAR 0 13
17267: PUSH
17268: LD_INT 2
17270: MINUS
17271: LESS
17272: OR
17273: IFTRUE 17341
17275: PUSH
17276: LD_VAR 0 8
17280: PUSH
17281: LD_INT 3
17283: ARRAY
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 8
17290: PUSH
17291: LD_INT 9
17293: PUSH
17294: LD_INT 10
17296: PUSH
17297: LD_INT 11
17299: PUSH
17300: LD_INT 12
17302: PUSH
17303: LD_INT 13
17305: PUSH
17306: LD_INT 16
17308: PUSH
17309: LD_INT 17
17311: PUSH
17312: LD_INT 18
17314: PUSH
17315: LD_INT 19
17317: PUSH
17318: LD_INT 20
17320: PUSH
17321: LD_INT 21
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: IN
17339: NOT
17340: OR
17341: IFTRUE 17354
17343: PUSH
17344: LD_VAR 0 8
17348: PUSH
17349: LD_INT 5
17351: ARRAY
17352: NOT
17353: OR
17354: IFTRUE 17394
17356: PUSH
17357: LD_VAR 0 8
17361: PUSH
17362: LD_INT 6
17364: ARRAY
17365: PUSH
17366: LD_INT 1
17368: PUSH
17369: LD_INT 2
17371: PUSH
17372: LD_INT 7
17374: PUSH
17375: LD_INT 9
17377: PUSH
17378: LD_INT 10
17380: PUSH
17381: LD_INT 11
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: IN
17392: NOT
17393: OR
17394: IFFALSE 17400
// exit ;
17396: POP
17397: POP
17398: GO 17485
// end ;
17400: GO 17057
17402: POP
17403: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17404: LD_VAR 0 9
17408: PPUSH
17409: LD_VAR 0 3
17413: PPUSH
17414: LD_VAR 0 4
17418: PPUSH
17419: LD_INT 20
17421: PPUSH
17422: CALL 9304 0 4
17426: PUSH
17427: LD_INT 4
17429: ARRAY
17430: IFFALSE 17434
// exit ;
17432: GO 17485
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17434: LD_VAR 0 2
17438: PUSH
17439: LD_INT 29
17441: PUSH
17442: LD_INT 30
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: IN
17449: IFFALSE 17473
17451: PUSH
17452: LD_VAR 0 3
17456: PPUSH
17457: LD_VAR 0 4
17461: PPUSH
17462: LD_VAR 0 9
17466: PPUSH
17467: CALL_OW 440
17471: NOT
17472: AND
17473: IFFALSE 17477
// exit ;
17475: GO 17485
// result := true ;
17477: LD_ADDR_VAR 0 6
17481: PUSH
17482: LD_INT 1
17484: ST_TO_ADDR
// end ;
17485: LD_VAR 0 6
17489: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
17534: PPUSH
17535: PPUSH
17536: PPUSH
17537: PPUSH
17538: PPUSH
17539: PPUSH
17540: PPUSH
17541: PPUSH
17542: PPUSH
17543: PPUSH
17544: PPUSH
17545: PPUSH
17546: PPUSH
17547: PPUSH
17548: PPUSH
17549: PPUSH
// result = [ ] ;
17550: LD_ADDR_VAR 0 7
17554: PUSH
17555: EMPTY
17556: ST_TO_ADDR
// temp_list = [ ] ;
17557: LD_ADDR_VAR 0 9
17561: PUSH
17562: EMPTY
17563: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17564: LD_VAR 0 4
17568: PUSH
17569: LD_INT 0
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: LD_INT 3
17580: PUSH
17581: LD_INT 4
17583: PUSH
17584: LD_INT 5
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: IN
17595: NOT
17596: IFTRUE 17639
17598: PUSH
17599: LD_VAR 0 1
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: IN
17614: IFFALSE 17638
17616: PUSH
17617: LD_VAR 0 5
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: LD_INT 3
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: IN
17636: NOT
17637: AND
17638: OR
17639: IFFALSE 17643
// exit ;
17641: GO 36042
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17643: LD_VAR 0 1
17647: PUSH
17648: LD_INT 6
17650: PUSH
17651: LD_INT 7
17653: PUSH
17654: LD_INT 8
17656: PUSH
17657: LD_INT 13
17659: PUSH
17660: LD_INT 12
17662: PUSH
17663: LD_INT 15
17665: PUSH
17666: LD_INT 11
17668: PUSH
17669: LD_INT 14
17671: PUSH
17672: LD_INT 10
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: IN
17686: IFFALSE 17696
// btype = b_lab ;
17688: LD_ADDR_VAR 0 1
17692: PUSH
17693: LD_INT 6
17695: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17696: LD_VAR 0 6
17700: PUSH
17701: LD_INT 0
17703: PUSH
17704: LD_INT 1
17706: PUSH
17707: LD_INT 2
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: LIST
17714: IN
17715: NOT
17716: IFTRUE 17784
17718: PUSH
17719: LD_VAR 0 1
17723: PUSH
17724: LD_INT 0
17726: PUSH
17727: LD_INT 1
17729: PUSH
17730: LD_INT 2
17732: PUSH
17733: LD_INT 3
17735: PUSH
17736: LD_INT 6
17738: PUSH
17739: LD_INT 36
17741: PUSH
17742: LD_INT 4
17744: PUSH
17745: LD_INT 5
17747: PUSH
17748: LD_INT 31
17750: PUSH
17751: LD_INT 32
17753: PUSH
17754: LD_INT 33
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: IN
17770: NOT
17771: IFFALSE 17783
17773: PUSH
17774: LD_VAR 0 6
17778: PUSH
17779: LD_INT 1
17781: EQUAL
17782: AND
17783: OR
17784: IFTRUE 17816
17786: PUSH
17787: LD_VAR 0 1
17791: PUSH
17792: LD_INT 2
17794: PUSH
17795: LD_INT 3
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: IN
17802: NOT
17803: IFFALSE 17815
17805: PUSH
17806: LD_VAR 0 6
17810: PUSH
17811: LD_INT 2
17813: EQUAL
17814: AND
17815: OR
17816: IFFALSE 17826
// mode = 0 ;
17818: LD_ADDR_VAR 0 6
17822: PUSH
17823: LD_INT 0
17825: ST_TO_ADDR
// case mode of 0 :
17826: LD_VAR 0 6
17830: PUSH
17831: LD_INT 0
17833: DOUBLE
17834: EQUAL
17835: IFTRUE 17839
17837: GO 29292
17839: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17840: LD_ADDR_VAR 0 11
17844: PUSH
17845: LD_INT 0
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: LD_INT 1
17860: NEG
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 1
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: NEG
17899: PUSH
17900: LD_INT 0
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: NEG
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 1
17921: NEG
17922: PUSH
17923: LD_INT 2
17925: NEG
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 0
17933: PUSH
17934: LD_INT 2
17936: NEG
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 1
17944: PUSH
17945: LD_INT 1
17947: NEG
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: LD_INT 2
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: LD_INT 3
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 0
17996: PUSH
17997: LD_INT 3
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 1
18006: NEG
18007: PUSH
18008: LD_INT 2
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18033: LD_ADDR_VAR 0 12
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: LD_INT 1
18053: NEG
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: LD_INT 1
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 1
18091: NEG
18092: PUSH
18093: LD_INT 0
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: LD_INT 1
18117: NEG
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 2
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: LD_INT 1
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: NEG
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 2
18156: NEG
18157: PUSH
18158: LD_INT 0
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 2
18167: NEG
18168: PUSH
18169: LD_INT 1
18171: NEG
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 2
18179: NEG
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 3
18190: NEG
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 3
18201: NEG
18202: PUSH
18203: LD_INT 1
18205: NEG
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18229: LD_ADDR_VAR 0 13
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 0
18246: PUSH
18247: LD_INT 1
18249: NEG
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 1
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 1
18287: NEG
18288: PUSH
18289: LD_INT 0
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 1
18298: NEG
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 1
18310: NEG
18311: PUSH
18312: LD_INT 2
18314: NEG
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 2
18332: PUSH
18333: LD_INT 2
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 2
18352: NEG
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 2
18364: NEG
18365: PUSH
18366: LD_INT 2
18368: NEG
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 2
18376: NEG
18377: PUSH
18378: LD_INT 3
18380: NEG
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 3
18388: NEG
18389: PUSH
18390: LD_INT 2
18392: NEG
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 3
18400: NEG
18401: PUSH
18402: LD_INT 3
18404: NEG
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18428: LD_ADDR_VAR 0 14
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 0
18445: PUSH
18446: LD_INT 1
18448: NEG
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 0
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 1
18486: NEG
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 1
18497: NEG
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 1
18509: NEG
18510: PUSH
18511: LD_INT 2
18513: NEG
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 0
18521: PUSH
18522: LD_INT 2
18524: NEG
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 1
18532: PUSH
18533: LD_INT 1
18535: NEG
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: LD_INT 2
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: LD_INT 3
18578: NEG
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 3
18589: NEG
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: LD_INT 2
18600: NEG
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18624: LD_ADDR_VAR 0 15
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 0
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 1
18693: NEG
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: LD_INT 1
18708: NEG
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 0
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: NEG
18737: PUSH
18738: LD_INT 1
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 2
18747: NEG
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 2
18758: NEG
18759: PUSH
18760: LD_INT 1
18762: NEG
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 3
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 3
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18817: LD_ADDR_VAR 0 16
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 1
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: LD_INT 1
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 1
18875: NEG
18876: PUSH
18877: LD_INT 0
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 1
18898: NEG
18899: PUSH
18900: LD_INT 2
18902: NEG
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: LD_INT 2
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: LD_INT 2
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: LD_INT 2
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 2
18940: NEG
18941: PUSH
18942: LD_INT 1
18944: NEG
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 2
18952: NEG
18953: PUSH
18954: LD_INT 2
18956: NEG
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 3
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 3
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: LD_INT 3
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19010: LD_ADDR_VAR 0 17
19014: PUSH
19015: LD_INT 0
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 1
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 1
19068: NEG
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: LD_INT 2
19106: NEG
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: LD_INT 0
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: LD_INT 0
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 2
19197: NEG
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: NEG
19210: PUSH
19211: LD_INT 2
19213: NEG
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19240: LD_ADDR_VAR 0 18
19244: PUSH
19245: LD_INT 0
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: LD_INT 0
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: LD_INT 0
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: LD_INT 1
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: LD_INT 2
19325: NEG
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: LD_INT 2
19336: NEG
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 2
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 2
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 2
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 1
19405: NEG
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 2
19416: NEG
19417: PUSH
19418: LD_INT 0
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 2
19427: NEG
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 2
19439: NEG
19440: PUSH
19441: LD_INT 2
19443: NEG
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19470: LD_ADDR_VAR 0 19
19474: PUSH
19475: LD_INT 0
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: LD_INT 0
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: LD_INT 0
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 1
19551: NEG
19552: PUSH
19553: LD_INT 2
19555: NEG
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 0
19563: PUSH
19564: LD_INT 2
19566: NEG
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: LD_INT 1
19577: NEG
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: LD_INT 0
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: LD_INT 2
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: LD_INT 2
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 1
19635: NEG
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 2
19646: NEG
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 2
19657: NEG
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 2
19669: NEG
19670: PUSH
19671: LD_INT 2
19673: NEG
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19700: LD_ADDR_VAR 0 20
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 0
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: PUSH
19760: LD_INT 0
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: LD_INT 1
19773: NEG
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 1
19781: NEG
19782: PUSH
19783: LD_INT 2
19785: NEG
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 0
19793: PUSH
19794: LD_INT 2
19796: NEG
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: LD_INT 1
19807: NEG
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 2
19815: PUSH
19816: LD_INT 0
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 2
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 1
19865: NEG
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 2
19876: NEG
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 2
19887: NEG
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: LD_INT 2
19903: NEG
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19930: LD_ADDR_VAR 0 21
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: LD_INT 1
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 1
19988: NEG
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: LD_INT 1
20003: NEG
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 1
20011: NEG
20012: PUSH
20013: LD_INT 2
20015: NEG
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 0
20023: PUSH
20024: LD_INT 2
20026: NEG
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: LD_INT 1
20037: NEG
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 2
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 2
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 2
20065: PUSH
20066: LD_INT 2
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: LD_INT 2
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 1
20095: NEG
20096: PUSH
20097: LD_INT 1
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 2
20106: NEG
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: NEG
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: NEG
20130: PUSH
20131: LD_INT 2
20133: NEG
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20160: LD_ADDR_VAR 0 22
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 0
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: LD_INT 0
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 1
20218: NEG
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: LD_INT 1
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 1
20241: NEG
20242: PUSH
20243: LD_INT 2
20245: NEG
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: LD_INT 2
20256: NEG
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 2
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 2
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: LD_INT 1
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 2
20336: NEG
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 2
20347: NEG
20348: PUSH
20349: LD_INT 1
20351: NEG
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 2
20359: NEG
20360: PUSH
20361: LD_INT 2
20363: NEG
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20390: LD_ADDR_VAR 0 23
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: LD_INT 0
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: LD_INT 1
20410: NEG
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: PUSH
20450: LD_INT 0
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: LD_INT 1
20463: NEG
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: LD_INT 2
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: LD_INT 2
20486: NEG
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 0
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: LD_INT 2
20515: PUSH
20516: LD_INT 1
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 1
20555: NEG
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 2
20566: NEG
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 2
20577: NEG
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: NEG
20590: PUSH
20591: LD_INT 2
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 2
20601: NEG
20602: PUSH
20603: LD_INT 3
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: LD_INT 3
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: LD_INT 2
20628: NEG
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 2
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20670: LD_ADDR_VAR 0 24
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: LD_INT 1
20690: NEG
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 1
20728: NEG
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: LD_INT 2
20755: NEG
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 0
20763: PUSH
20764: LD_INT 2
20766: NEG
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 1
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 2
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: LD_INT 2
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 2
20846: NEG
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 2
20857: NEG
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 2
20869: NEG
20870: PUSH
20871: LD_INT 2
20873: NEG
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: LD_INT 2
20884: NEG
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: LD_INT 1
20895: NEG
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 3
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 3
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20946: LD_ADDR_VAR 0 25
20950: PUSH
20951: LD_INT 0
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 1
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: NEG
21016: PUSH
21017: LD_INT 1
21019: NEG
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 1
21027: NEG
21028: PUSH
21029: LD_INT 2
21031: NEG
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: LD_INT 2
21042: NEG
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 1
21053: NEG
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: LD_INT 2
21061: PUSH
21062: LD_INT 0
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 2
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 2
21081: PUSH
21082: LD_INT 2
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: LD_INT 2
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: LD_INT 2
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 1
21111: NEG
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 2
21122: NEG
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 2
21133: NEG
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 2
21145: NEG
21146: PUSH
21147: LD_INT 2
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 3
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 3
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 3
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: LD_INT 3
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21220: LD_ADDR_VAR 0 26
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 0
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: LD_INT 1
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: LD_INT 1
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: LD_INT 2
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 2
21316: NEG
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: LD_INT 1
21327: NEG
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: PUSH
21333: LD_INT 2
21335: PUSH
21336: LD_INT 0
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 2
21355: PUSH
21356: LD_INT 2
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: LD_INT 2
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PUSH
21387: LD_INT 1
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 2
21396: NEG
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 2
21407: NEG
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 2
21419: NEG
21420: PUSH
21421: LD_INT 2
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: LD_INT 3
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 3
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: NEG
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 2
21462: NEG
21463: PUSH
21464: LD_INT 1
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21496: LD_ADDR_VAR 0 27
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: LD_INT 0
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 0
21513: PUSH
21514: LD_INT 1
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 1
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: LD_INT 1
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 0
21544: PUSH
21545: LD_INT 1
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: LD_INT 0
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: LD_INT 1
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: LD_INT 2
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: LD_INT 2
21592: NEG
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 1
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 2
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: LD_INT 2
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: NEG
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 2
21672: NEG
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 2
21683: NEG
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: LD_INT 2
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 2
21718: NEG
21719: PUSH
21720: LD_INT 1
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 3
21729: NEG
21730: PUSH
21731: LD_INT 1
21733: NEG
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 3
21741: NEG
21742: PUSH
21743: LD_INT 2
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21776: LD_ADDR_VAR 0 28
21780: PUSH
21781: LD_INT 0
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: LD_INT 1
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 0
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: NEG
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 1
21845: NEG
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: NEG
21858: PUSH
21859: LD_INT 2
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 0
21869: PUSH
21870: LD_INT 2
21872: NEG
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: LD_INT 1
21883: NEG
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 2
21891: PUSH
21892: LD_INT 0
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 2
21911: PUSH
21912: LD_INT 2
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 1
21921: PUSH
21922: LD_INT 2
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 1
21941: NEG
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 2
21952: NEG
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 2
21963: NEG
21964: PUSH
21965: LD_INT 1
21967: NEG
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 2
21975: NEG
21976: PUSH
21977: LD_INT 2
21979: NEG
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: LD_INT 3
21991: NEG
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: LD_INT 3
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 3
22011: NEG
22012: PUSH
22013: LD_INT 1
22015: NEG
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 3
22023: NEG
22024: PUSH
22025: LD_INT 2
22027: NEG
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22058: LD_ADDR_VAR 0 29
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 0
22075: PUSH
22076: LD_INT 1
22078: NEG
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: LD_INT 1
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 1
22139: NEG
22140: PUSH
22141: LD_INT 2
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 0
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: LD_INT 1
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: LD_INT 0
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 1
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: LD_INT 2
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 1
22213: NEG
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 2
22224: NEG
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 2
22236: NEG
22237: PUSH
22238: LD_INT 2
22240: NEG
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 2
22248: NEG
22249: PUSH
22250: LD_INT 3
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 2
22260: PUSH
22261: LD_INT 1
22263: NEG
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 3
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: NEG
22292: PUSH
22293: LD_INT 2
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 3
22302: NEG
22303: PUSH
22304: LD_INT 2
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22337: LD_ADDR_VAR 0 30
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: LD_INT 0
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 1
22357: NEG
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: LD_INT 1
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 1
22395: NEG
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 1
22418: NEG
22419: PUSH
22420: LD_INT 2
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: LD_INT 2
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: LD_INT 2
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 2
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: NEG
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 1
22526: NEG
22527: PUSH
22528: LD_INT 3
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 2
22541: NEG
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 3
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: NEG
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 3
22580: NEG
22581: PUSH
22582: LD_INT 1
22584: NEG
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22615: LD_ADDR_VAR 0 31
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 0
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: LD_INT 2
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 1
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 2
22739: PUSH
22740: LD_INT 2
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 0
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 2
22780: NEG
22781: PUSH
22782: LD_INT 1
22784: NEG
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 2
22792: NEG
22793: PUSH
22794: LD_INT 2
22796: NEG
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 2
22804: NEG
22805: PUSH
22806: LD_INT 3
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 1
22819: NEG
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 3
22827: PUSH
22828: LD_INT 1
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: LD_INT 3
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: NEG
22848: PUSH
22849: LD_INT 2
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 3
22858: NEG
22859: PUSH
22860: LD_INT 2
22862: NEG
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22893: LD_ADDR_VAR 0 32
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: LD_INT 0
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: LD_INT 1
22913: NEG
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: LD_INT 1
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 0
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 1
22962: NEG
22963: PUSH
22964: LD_INT 1
22966: NEG
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PUSH
22976: LD_INT 2
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 0
22986: PUSH
22987: LD_INT 2
22989: NEG
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 2
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: LD_INT 2
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: LD_INT 2
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 2
23059: NEG
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 2
23070: NEG
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: LD_INT 3
23086: NEG
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: LD_INT 2
23097: NEG
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 3
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 2
23125: NEG
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 3
23136: NEG
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23171: LD_ADDR_VAR 0 33
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 0
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: LD_INT 0
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: LD_INT 2
23256: NEG
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 2
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 2
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: LD_INT 2
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: LD_INT 2
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 1
23315: NEG
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 2
23326: NEG
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: NEG
23338: PUSH
23339: LD_INT 1
23341: NEG
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 2
23349: NEG
23350: PUSH
23351: LD_INT 2
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 2
23361: NEG
23362: PUSH
23363: LD_INT 3
23365: NEG
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 3
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: LD_INT 3
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: LD_INT 2
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 3
23415: NEG
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23450: LD_ADDR_VAR 0 34
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: LD_INT 1
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 0
23498: PUSH
23499: LD_INT 1
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 1
23508: NEG
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 1
23519: NEG
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: PUSH
23533: LD_INT 2
23535: NEG
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: LD_INT 2
23546: NEG
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 2
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: NEG
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 2
23606: NEG
23607: PUSH
23608: LD_INT 0
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 2
23617: NEG
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 2
23629: NEG
23630: PUSH
23631: LD_INT 2
23633: NEG
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: LD_INT 3
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: LD_INT 2
23656: NEG
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 3
23664: PUSH
23665: LD_INT 2
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 2
23674: PUSH
23675: LD_INT 3
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 2
23684: NEG
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 3
23695: NEG
23696: PUSH
23697: LD_INT 1
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23730: LD_ADDR_VAR 0 35
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 2
23821: NEG
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23842: LD_ADDR_VAR 0 36
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: LD_INT 0
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 0
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 1
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 1
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 1
23923: NEG
23924: PUSH
23925: LD_INT 2
23927: NEG
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 1
23935: PUSH
23936: LD_INT 2
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23954: LD_ADDR_VAR 0 37
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 0
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: LD_INT 1
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24066: LD_ADDR_VAR 0 38
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: NEG
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: LD_INT 1
24139: NEG
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: NEG
24158: PUSH
24159: LD_INT 1
24161: NEG
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24178: LD_ADDR_VAR 0 39
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 1
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 0
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 1
24236: NEG
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 1
24259: NEG
24260: PUSH
24261: LD_INT 2
24263: NEG
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: LD_INT 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24290: LD_ADDR_VAR 0 40
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 0
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: LD_INT 1
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: LD_INT 0
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: LD_INT 1
24374: NEG
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24402: LD_ADDR_VAR 0 41
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 0
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 1
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: NEG
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: LD_INT 2
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 2
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: LD_INT 2
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 1
24546: NEG
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 2
24568: NEG
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: LD_INT 2
24584: NEG
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: LD_INT 3
24596: NEG
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 2
24604: PUSH
24605: LD_INT 1
24607: NEG
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 3
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 3
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: LD_INT 3
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: LD_INT 3
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 2
24665: NEG
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 3
24676: NEG
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 3
24687: NEG
24688: PUSH
24689: LD_INT 1
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 3
24699: NEG
24700: PUSH
24701: LD_INT 2
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 3
24711: NEG
24712: PUSH
24713: LD_INT 3
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24752: LD_ADDR_VAR 0 42
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 0
24769: PUSH
24770: LD_INT 1
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 1
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: LD_INT 2
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: LD_INT 2
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: NEG
24919: PUSH
24920: LD_INT 1
24922: NEG
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: LD_INT 2
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: NEG
24943: PUSH
24944: LD_INT 3
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: LD_INT 3
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: LD_INT 3
24969: NEG
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 1
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 3
24988: PUSH
24989: LD_INT 2
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 3
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 3
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: LD_INT 3
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: LD_INT 3
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: PUSH
25040: LD_INT 2
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 3
25049: NEG
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 3
25061: NEG
25062: PUSH
25063: LD_INT 3
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25102: LD_ADDR_VAR 0 43
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: LD_INT 2
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 2
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: LD_INT 2
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: LD_INT 2
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: LD_INT 1
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: NEG
25280: PUSH
25281: LD_INT 1
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: LD_INT 3
25295: NEG
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: LD_INT 3
25306: NEG
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 1
25314: PUSH
25315: LD_INT 2
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 3
25336: PUSH
25337: LD_INT 0
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: LD_INT 3
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 3
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 2
25387: NEG
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 3
25398: NEG
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 3
25409: NEG
25410: PUSH
25411: LD_INT 1
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25450: LD_ADDR_VAR 0 44
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 2
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: LD_INT 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: LD_INT 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: NEG
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 2
25616: NEG
25617: PUSH
25618: LD_INT 1
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 2
25628: NEG
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: NEG
25641: PUSH
25642: LD_INT 3
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 3
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 3
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 3
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 3
25693: PUSH
25694: LD_INT 3
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: LD_INT 3
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 2
25713: NEG
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: NEG
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 3
25735: NEG
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 3
25747: NEG
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 3
25759: NEG
25760: PUSH
25761: LD_INT 3
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25800: LD_ADDR_VAR 0 45
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: LD_INT 2
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 2
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 2
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: LD_INT 2
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: LD_INT 1
25970: NEG
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: LD_INT 2
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 2
25990: NEG
25991: PUSH
25992: LD_INT 3
25994: NEG
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: LD_INT 3
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: LD_INT 3
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: LD_INT 2
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: LD_INT 2
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: LD_INT 3
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: LD_INT 3
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: LD_INT 3
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: LD_INT 3
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: LD_INT 2
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 3
26097: NEG
26098: PUSH
26099: LD_INT 2
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 3
26109: NEG
26110: PUSH
26111: LD_INT 3
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26150: LD_ADDR_VAR 0 46
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 2
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 2
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: LD_INT 2
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: LD_INT 3
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: LD_INT 3
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 2
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 3
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 3
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: LD_INT 3
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 3
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 2
26435: NEG
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 3
26446: NEG
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 3
26457: NEG
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26498: LD_ADDR_VAR 0 47
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: LD_INT 1
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: NEG
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: LD_INT 2
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 0
26591: PUSH
26592: LD_INT 2
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: NEG
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: LD_INT 2
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26649: LD_ADDR_VAR 0 48
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: NEG
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: LD_INT 2
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: LD_INT 2
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: LD_INT 1
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 2
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 2
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26796: LD_ADDR_VAR 0 49
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 1
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: LD_INT 1
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26940: LD_ADDR_VAR 0 50
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: LD_INT 1
26960: NEG
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 2
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: LD_INT 2
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: LD_INT 2
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 2
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27084: LD_ADDR_VAR 0 51
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: NEG
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 2
27207: NEG
27208: PUSH
27209: LD_INT 1
27211: NEG
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27231: LD_ADDR_VAR 0 52
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 1
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 2
27346: NEG
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: NEG
27359: PUSH
27360: LD_INT 2
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27382: LD_ADDR_VAR 0 53
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 1
27440: NEG
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: LD_INT 2
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 2
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 2
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 2
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: LD_INT 2
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: NEG
27548: PUSH
27549: LD_INT 1
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 2
27558: NEG
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 2
27569: NEG
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27612: LD_ADDR_VAR 0 54
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 1
27670: NEG
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: NEG
27694: PUSH
27695: LD_INT 2
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: LD_INT 2
27708: NEG
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 1
27719: NEG
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 2
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 2
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 2
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 2
27788: NEG
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: NEG
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27842: LD_ADDR_VAR 0 55
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: LD_INT 1
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 1
27900: NEG
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 2
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: LD_INT 2
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: LD_INT 1
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 2
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: NEG
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28072: LD_ADDR_VAR 0 56
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 1
28130: NEG
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 2
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 2
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 2
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 2
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: LD_INT 1
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 2
28248: NEG
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 2
28259: NEG
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: LD_INT 2
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28302: LD_ADDR_VAR 0 57
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: LD_INT 2
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 2
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 2
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 2
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 2
28489: NEG
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28532: LD_ADDR_VAR 0 58
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: LD_INT 2
28617: NEG
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: LD_INT 2
28628: NEG
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: LD_INT 2
28735: NEG
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28762: LD_ADDR_VAR 0 59
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 0
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 1
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: LD_INT 1
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28850: LD_ADDR_VAR 0 60
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28938: LD_ADDR_VAR 0 61
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 1
28958: NEG
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29026: LD_ADDR_VAR 0 62
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 0
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29114: LD_ADDR_VAR 0 63
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29202: LD_ADDR_VAR 0 64
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: ST_TO_ADDR
// end ; 1 :
29290: GO 35187
29292: LD_INT 1
29294: DOUBLE
29295: EQUAL
29296: IFTRUE 29300
29298: GO 31923
29300: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29301: LD_ADDR_VAR 0 11
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: LD_INT 3
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 3
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29345: LD_ADDR_VAR 0 12
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 3
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29386: LD_ADDR_VAR 0 13
29390: PUSH
29391: LD_INT 3
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 3
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: LD_INT 3
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29426: LD_ADDR_VAR 0 14
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 3
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 3
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: LIST
29466: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29467: LD_ADDR_VAR 0 15
29471: PUSH
29472: LD_INT 2
29474: NEG
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 3
29485: NEG
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 3
29496: NEG
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29511: LD_ADDR_VAR 0 16
29515: PUSH
29516: LD_INT 2
29518: NEG
29519: PUSH
29520: LD_INT 3
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 3
29530: NEG
29531: PUSH
29532: LD_INT 2
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 3
29542: NEG
29543: PUSH
29544: LD_INT 3
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29557: LD_ADDR_VAR 0 17
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: LD_INT 3
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: LD_INT 3
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: LD_INT 2
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29601: LD_ADDR_VAR 0 18
29605: PUSH
29606: LD_INT 2
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: LIST
29641: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29642: LD_ADDR_VAR 0 19
29646: PUSH
29647: LD_INT 3
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: LD_INT 3
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: LD_INT 3
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: LIST
29681: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29682: LD_ADDR_VAR 0 20
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: LD_INT 3
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 3
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29723: LD_ADDR_VAR 0 21
29727: PUSH
29728: LD_INT 2
29730: NEG
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 3
29741: NEG
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 3
29752: NEG
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: LIST
29766: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29767: LD_ADDR_VAR 0 22
29771: PUSH
29772: LD_INT 2
29774: NEG
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 3
29786: NEG
29787: PUSH
29788: LD_INT 2
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 3
29798: NEG
29799: PUSH
29800: LD_INT 3
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29813: LD_ADDR_VAR 0 23
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 3
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 4
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: LD_INT 3
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: LIST
29856: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29857: LD_ADDR_VAR 0 24
29861: PUSH
29862: LD_INT 3
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 3
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 4
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29898: LD_ADDR_VAR 0 25
29902: PUSH
29903: LD_INT 3
29905: PUSH
29906: LD_INT 3
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 4
29915: PUSH
29916: LD_INT 3
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 3
29925: PUSH
29926: LD_INT 4
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29938: LD_ADDR_VAR 0 26
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: LD_INT 3
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: LD_INT 4
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: LD_INT 3
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29979: LD_ADDR_VAR 0 27
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 3
29997: NEG
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 4
30008: NEG
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: LIST
30022: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30023: LD_ADDR_VAR 0 28
30027: PUSH
30028: LD_INT 3
30030: NEG
30031: PUSH
30032: LD_INT 3
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 3
30042: NEG
30043: PUSH
30044: LD_INT 4
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 4
30054: NEG
30055: PUSH
30056: LD_INT 3
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30069: LD_ADDR_VAR 0 29
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: LD_INT 3
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: LD_INT 3
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 2
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: LD_INT 4
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: LD_INT 4
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: LD_INT 3
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: LD_INT 5
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 0
30156: PUSH
30157: LD_INT 5
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 4
30170: NEG
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: LD_INT 6
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: LD_INT 6
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: LD_INT 5
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30224: LD_ADDR_VAR 0 30
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 1
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 3
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 4
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 4
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 4
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 5
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 5
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 5
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 6
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 6
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30367: LD_ADDR_VAR 0 31
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: LD_INT 3
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: LD_INT 3
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 4
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 4
30414: PUSH
30415: LD_INT 4
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 3
30424: PUSH
30425: LD_INT 4
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 5
30434: PUSH
30435: LD_INT 4
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 5
30444: PUSH
30445: LD_INT 5
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 4
30454: PUSH
30455: LD_INT 5
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 6
30464: PUSH
30465: LD_INT 5
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 6
30474: PUSH
30475: LD_INT 6
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 5
30484: PUSH
30485: LD_INT 6
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30506: LD_ADDR_VAR 0 32
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: LD_INT 3
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 3
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: NEG
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: LD_INT 4
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 4
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 3
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: LD_INT 5
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: LD_INT 5
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: LD_INT 4
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 6
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: LD_INT 6
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 5
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30649: LD_ADDR_VAR 0 33
30653: PUSH
30654: LD_INT 2
30656: NEG
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 3
30667: NEG
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 3
30678: NEG
30679: PUSH
30680: LD_INT 1
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 3
30690: NEG
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 4
30701: NEG
30702: PUSH
30703: LD_INT 0
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 4
30712: NEG
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 4
30724: NEG
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 5
30735: NEG
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 5
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 5
30758: NEG
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 6
30769: NEG
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 6
30780: NEG
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30804: LD_ADDR_VAR 0 34
30808: PUSH
30809: LD_INT 2
30811: NEG
30812: PUSH
30813: LD_INT 3
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 3
30823: NEG
30824: PUSH
30825: LD_INT 2
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 3
30835: NEG
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 3
30847: NEG
30848: PUSH
30849: LD_INT 4
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 4
30859: NEG
30860: PUSH
30861: LD_INT 3
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 4
30871: NEG
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 4
30883: NEG
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 5
30895: NEG
30896: PUSH
30897: LD_INT 4
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 5
30907: NEG
30908: PUSH
30909: LD_INT 5
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 5
30919: NEG
30920: PUSH
30921: LD_INT 6
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 6
30931: NEG
30932: PUSH
30933: LD_INT 5
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 6
30943: NEG
30944: PUSH
30945: LD_INT 6
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30967: LD_ADDR_VAR 0 41
30971: PUSH
30972: LD_INT 0
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 1
30985: NEG
30986: PUSH
30987: LD_INT 3
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31011: LD_ADDR_VAR 0 42
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 2
31028: PUSH
31029: LD_INT 1
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: LIST
31051: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31052: LD_ADDR_VAR 0 43
31056: PUSH
31057: LD_INT 2
31059: PUSH
31060: LD_INT 2
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31092: LD_ADDR_VAR 0 44
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 2
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 3
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31133: LD_ADDR_VAR 0 45
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 3
31162: NEG
31163: PUSH
31164: LD_INT 1
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31177: LD_ADDR_VAR 0 46
31181: PUSH
31182: LD_INT 2
31184: NEG
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: LD_INT 3
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 3
31208: NEG
31209: PUSH
31210: LD_INT 2
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: LIST
31222: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31223: LD_ADDR_VAR 0 47
31227: PUSH
31228: LD_INT 2
31230: NEG
31231: PUSH
31232: LD_INT 3
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: LD_INT 3
31246: NEG
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31256: LD_ADDR_VAR 0 48
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 2
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: LD_INT 1
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31287: LD_ADDR_VAR 0 49
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31316: LD_ADDR_VAR 0 50
31320: PUSH
31321: LD_INT 2
31323: PUSH
31324: LD_INT 3
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: LD_INT 3
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31345: LD_ADDR_VAR 0 51
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31376: LD_ADDR_VAR 0 52
31380: PUSH
31381: LD_INT 3
31383: NEG
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 3
31395: NEG
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31409: LD_ADDR_VAR 0 53
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: LD_INT 3
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: LD_INT 3
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31453: LD_ADDR_VAR 0 54
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31494: LD_ADDR_VAR 0 55
31498: PUSH
31499: LD_INT 3
31501: PUSH
31502: LD_INT 2
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: LD_INT 3
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: LD_INT 3
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31534: LD_ADDR_VAR 0 56
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 3
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: LD_INT 2
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31575: LD_ADDR_VAR 0 57
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: NEG
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: LIST
31618: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31619: LD_ADDR_VAR 0 58
31623: PUSH
31624: LD_INT 2
31626: NEG
31627: PUSH
31628: LD_INT 3
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 3
31638: NEG
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 3
31650: NEG
31651: PUSH
31652: LD_INT 3
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31665: LD_ADDR_VAR 0 59
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: LD_INT 2
31676: NEG
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31709: LD_ADDR_VAR 0 60
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 2
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: LIST
31749: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31750: LD_ADDR_VAR 0 61
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31790: LD_ADDR_VAR 0 62
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: LIST
31830: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31831: LD_ADDR_VAR 0 63
31835: PUSH
31836: LD_INT 1
31838: NEG
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 2
31849: NEG
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 2
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: LIST
31874: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31875: LD_ADDR_VAR 0 64
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: NEG
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: LIST
31920: ST_TO_ADDR
// end ; 2 :
31921: GO 35187
31923: LD_INT 2
31925: DOUBLE
31926: EQUAL
31927: IFTRUE 31931
31929: GO 35186
31931: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31932: LD_ADDR_VAR 0 29
31936: PUSH
31937: LD_INT 4
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 4
31949: PUSH
31950: LD_INT 1
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 5
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 5
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 4
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 3
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 3
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 3
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 5
32022: PUSH
32023: LD_INT 2
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: LD_INT 3
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 3
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 4
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 4
32062: PUSH
32063: LD_INT 4
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: LD_INT 4
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 4
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: LD_INT 4
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: LD_INT 4
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: LD_INT 4
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: LD_INT 5
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: LD_INT 5
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: LD_INT 4
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: LD_INT 3
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: LD_INT 5
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 2
32204: NEG
32205: PUSH
32206: LD_INT 3
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 3
32215: NEG
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 3
32226: NEG
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 2
32238: NEG
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 3
32260: NEG
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 4
32271: NEG
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 4
32282: NEG
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 4
32294: NEG
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: NEG
32307: PUSH
32308: LD_INT 2
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 4
32317: NEG
32318: PUSH
32319: LD_INT 4
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 4
32329: NEG
32330: PUSH
32331: LD_INT 5
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 3
32341: NEG
32342: PUSH
32343: LD_INT 4
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 3
32353: NEG
32354: PUSH
32355: LD_INT 3
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 4
32365: NEG
32366: PUSH
32367: LD_INT 3
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 5
32377: NEG
32378: PUSH
32379: LD_INT 4
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 5
32389: NEG
32390: PUSH
32391: LD_INT 5
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 3
32401: NEG
32402: PUSH
32403: LD_INT 5
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 5
32413: NEG
32414: PUSH
32415: LD_INT 3
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32470: LD_ADDR_VAR 0 30
32474: PUSH
32475: LD_INT 4
32477: PUSH
32478: LD_INT 4
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 4
32487: PUSH
32488: LD_INT 3
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 5
32497: PUSH
32498: LD_INT 4
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 5
32507: PUSH
32508: LD_INT 5
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 4
32517: PUSH
32518: LD_INT 5
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 3
32527: PUSH
32528: LD_INT 4
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 3
32537: PUSH
32538: LD_INT 3
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 5
32547: PUSH
32548: LD_INT 3
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: LD_INT 5
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 3
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: LD_INT 3
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: LD_INT 4
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 4
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: LD_INT 3
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: LD_INT 4
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 2
32649: NEG
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 4
32660: NEG
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 4
32671: NEG
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 3
32683: NEG
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 3
32694: NEG
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 4
32705: NEG
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 5
32716: NEG
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 5
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 5
32739: NEG
32740: PUSH
32741: LD_INT 2
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 3
32751: NEG
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 3
32762: NEG
32763: PUSH
32764: LD_INT 3
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 3
32774: NEG
32775: PUSH
32776: LD_INT 4
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 2
32798: NEG
32799: PUSH
32800: LD_INT 2
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 3
32810: NEG
32811: PUSH
32812: LD_INT 2
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 4
32822: NEG
32823: PUSH
32824: LD_INT 3
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 4
32834: NEG
32835: PUSH
32836: LD_INT 4
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: LD_INT 4
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 4
32858: NEG
32859: PUSH
32860: LD_INT 2
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: LD_INT 4
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 5
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: LD_INT 4
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: LD_INT 3
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 3
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: NEG
32926: PUSH
32927: LD_INT 4
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 5
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: LD_INT 3
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: LD_INT 5
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33017: LD_ADDR_VAR 0 31
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: LD_INT 4
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: LD_INT 4
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 5
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: LD_INT 5
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: LD_INT 4
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: LD_INT 3
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: LD_INT 5
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: NEG
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 3
33128: NEG
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 3
33162: NEG
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 4
33173: NEG
33174: PUSH
33175: LD_INT 0
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 4
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 4
33196: NEG
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 2
33208: NEG
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 4
33219: NEG
33220: PUSH
33221: LD_INT 4
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 4
33231: NEG
33232: PUSH
33233: LD_INT 5
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 3
33243: NEG
33244: PUSH
33245: LD_INT 4
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 3
33255: NEG
33256: PUSH
33257: LD_INT 3
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 4
33267: NEG
33268: PUSH
33269: LD_INT 3
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 5
33279: NEG
33280: PUSH
33281: LD_INT 4
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 5
33291: NEG
33292: PUSH
33293: LD_INT 5
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 3
33303: NEG
33304: PUSH
33305: LD_INT 5
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 5
33315: NEG
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: LD_INT 4
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: LD_INT 3
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: LD_INT 3
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 1
33394: NEG
33395: PUSH
33396: LD_INT 4
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: PUSH
33407: LD_INT 2
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: NEG
33418: PUSH
33419: LD_INT 4
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 4
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 4
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 5
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 5
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 4
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 3
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 3
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 3
33501: PUSH
33502: LD_INT 2
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 5
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33567: LD_ADDR_VAR 0 32
33571: PUSH
33572: LD_INT 4
33574: NEG
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 4
33585: NEG
33586: PUSH
33587: LD_INT 1
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 3
33597: NEG
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 4
33619: NEG
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 5
33630: NEG
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 5
33641: NEG
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 5
33653: NEG
33654: PUSH
33655: LD_INT 2
33657: NEG
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 3
33665: NEG
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 3
33676: NEG
33677: PUSH
33678: LD_INT 3
33680: NEG
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 3
33688: NEG
33689: PUSH
33690: LD_INT 4
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 2
33700: NEG
33701: PUSH
33702: LD_INT 3
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: LD_INT 2
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 3
33724: NEG
33725: PUSH
33726: LD_INT 2
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 4
33736: NEG
33737: PUSH
33738: LD_INT 3
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 4
33748: NEG
33749: PUSH
33750: LD_INT 4
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: LD_INT 4
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 4
33772: NEG
33773: PUSH
33774: LD_INT 2
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: LD_INT 4
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: LD_INT 5
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: LD_INT 4
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: LD_INT 3
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: LD_INT 3
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: LD_INT 4
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 1
33851: NEG
33852: PUSH
33853: LD_INT 5
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: PUSH
33864: LD_INT 3
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: NEG
33875: PUSH
33876: LD_INT 5
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 3
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 3
33896: PUSH
33897: LD_INT 1
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 4
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 4
33917: PUSH
33918: LD_INT 1
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 3
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 2
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 4
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 4
33979: PUSH
33980: LD_INT 4
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 4
33989: PUSH
33990: LD_INT 3
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 5
33999: PUSH
34000: LD_INT 4
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 5
34009: PUSH
34010: LD_INT 5
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 4
34019: PUSH
34020: LD_INT 5
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 3
34029: PUSH
34030: LD_INT 4
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 3
34039: PUSH
34040: LD_INT 3
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 5
34049: PUSH
34050: LD_INT 3
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 3
34059: PUSH
34060: LD_INT 5
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34114: LD_ADDR_VAR 0 33
34118: PUSH
34119: LD_INT 4
34121: NEG
34122: PUSH
34123: LD_INT 4
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 4
34133: NEG
34134: PUSH
34135: LD_INT 5
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: NEG
34146: PUSH
34147: LD_INT 4
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 3
34157: NEG
34158: PUSH
34159: LD_INT 3
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 4
34169: NEG
34170: PUSH
34171: LD_INT 3
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 5
34181: NEG
34182: PUSH
34183: LD_INT 4
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 5
34193: NEG
34194: PUSH
34195: LD_INT 5
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: LD_INT 5
34209: NEG
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 5
34217: NEG
34218: PUSH
34219: LD_INT 3
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: LD_INT 3
34232: NEG
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: LD_INT 4
34243: NEG
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: LD_INT 3
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: LD_INT 2
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: LD_INT 2
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: LD_INT 3
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 4
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 2
34308: PUSH
34309: LD_INT 2
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 2
34319: NEG
34320: PUSH
34321: LD_INT 4
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 4
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 4
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 5
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 5
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 4
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 3
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 3
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 5
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 3
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 3
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 4
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 4
34454: PUSH
34455: LD_INT 4
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: LD_INT 3
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 4
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 2
34504: PUSH
34505: LD_INT 4
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 0
34514: PUSH
34515: LD_INT 4
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: LD_INT 4
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: LD_INT 5
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: LD_INT 5
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: LD_INT 4
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 5
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 2
34596: NEG
34597: PUSH
34598: LD_INT 3
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34652: LD_ADDR_VAR 0 34
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 4
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 5
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 4
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: LD_INT 3
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 3
34706: NEG
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: LD_INT 4
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 5
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: PUSH
34739: LD_INT 3
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 5
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 3
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 3
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 4
34782: PUSH
34783: LD_INT 0
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 4
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 3
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 2
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 4
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 4
34854: PUSH
34855: LD_INT 4
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 4
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 5
34874: PUSH
34875: LD_INT 4
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 5
34884: PUSH
34885: LD_INT 5
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 4
34894: PUSH
34895: LD_INT 5
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 3
34904: PUSH
34905: LD_INT 4
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: LD_INT 3
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 5
34924: PUSH
34925: LD_INT 3
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 3
34934: PUSH
34935: LD_INT 5
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 4
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: LD_INT 3
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: NEG
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: LD_INT 4
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: NEG
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 4
35037: NEG
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 4
35048: NEG
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 3
35060: NEG
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 3
35071: NEG
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 4
35082: NEG
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 5
35093: NEG
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 5
35104: NEG
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 5
35116: NEG
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 3
35128: NEG
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: ST_TO_ADDR
// end ; end ;
35184: GO 35187
35186: POP
// case btype of b_depot , b_warehouse :
35187: LD_VAR 0 1
35191: PUSH
35192: LD_INT 0
35194: DOUBLE
35195: EQUAL
35196: IFTRUE 35206
35198: LD_INT 1
35200: DOUBLE
35201: EQUAL
35202: IFTRUE 35206
35204: GO 35407
35206: POP
// case nation of nation_american :
35207: LD_VAR 0 5
35211: PUSH
35212: LD_INT 1
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35220
35218: GO 35276
35220: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35221: LD_ADDR_VAR 0 9
35225: PUSH
35226: LD_VAR 0 11
35230: PUSH
35231: LD_VAR 0 12
35235: PUSH
35236: LD_VAR 0 13
35240: PUSH
35241: LD_VAR 0 14
35245: PUSH
35246: LD_VAR 0 15
35250: PUSH
35251: LD_VAR 0 16
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: PUSH
35264: LD_VAR 0 4
35268: PUSH
35269: LD_INT 1
35271: PLUS
35272: ARRAY
35273: ST_TO_ADDR
35274: GO 35405
35276: LD_INT 2
35278: DOUBLE
35279: EQUAL
35280: IFTRUE 35284
35282: GO 35340
35284: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35285: LD_ADDR_VAR 0 9
35289: PUSH
35290: LD_VAR 0 17
35294: PUSH
35295: LD_VAR 0 18
35299: PUSH
35300: LD_VAR 0 19
35304: PUSH
35305: LD_VAR 0 20
35309: PUSH
35310: LD_VAR 0 21
35314: PUSH
35315: LD_VAR 0 22
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: PUSH
35328: LD_VAR 0 4
35332: PUSH
35333: LD_INT 1
35335: PLUS
35336: ARRAY
35337: ST_TO_ADDR
35338: GO 35405
35340: LD_INT 3
35342: DOUBLE
35343: EQUAL
35344: IFTRUE 35348
35346: GO 35404
35348: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35349: LD_ADDR_VAR 0 9
35353: PUSH
35354: LD_VAR 0 23
35358: PUSH
35359: LD_VAR 0 24
35363: PUSH
35364: LD_VAR 0 25
35368: PUSH
35369: LD_VAR 0 26
35373: PUSH
35374: LD_VAR 0 27
35378: PUSH
35379: LD_VAR 0 28
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: PUSH
35392: LD_VAR 0 4
35396: PUSH
35397: LD_INT 1
35399: PLUS
35400: ARRAY
35401: ST_TO_ADDR
35402: GO 35405
35404: POP
35405: GO 35960
35407: LD_INT 2
35409: DOUBLE
35410: EQUAL
35411: IFTRUE 35421
35413: LD_INT 3
35415: DOUBLE
35416: EQUAL
35417: IFTRUE 35421
35419: GO 35477
35421: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35422: LD_ADDR_VAR 0 9
35426: PUSH
35427: LD_VAR 0 29
35431: PUSH
35432: LD_VAR 0 30
35436: PUSH
35437: LD_VAR 0 31
35441: PUSH
35442: LD_VAR 0 32
35446: PUSH
35447: LD_VAR 0 33
35451: PUSH
35452: LD_VAR 0 34
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: PUSH
35465: LD_VAR 0 4
35469: PUSH
35470: LD_INT 1
35472: PLUS
35473: ARRAY
35474: ST_TO_ADDR
35475: GO 35960
35477: LD_INT 16
35479: DOUBLE
35480: EQUAL
35481: IFTRUE 35539
35483: LD_INT 17
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35539
35489: LD_INT 18
35491: DOUBLE
35492: EQUAL
35493: IFTRUE 35539
35495: LD_INT 19
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35539
35501: LD_INT 22
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35539
35507: LD_INT 20
35509: DOUBLE
35510: EQUAL
35511: IFTRUE 35539
35513: LD_INT 21
35515: DOUBLE
35516: EQUAL
35517: IFTRUE 35539
35519: LD_INT 23
35521: DOUBLE
35522: EQUAL
35523: IFTRUE 35539
35525: LD_INT 24
35527: DOUBLE
35528: EQUAL
35529: IFTRUE 35539
35531: LD_INT 25
35533: DOUBLE
35534: EQUAL
35535: IFTRUE 35539
35537: GO 35595
35539: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35540: LD_ADDR_VAR 0 9
35544: PUSH
35545: LD_VAR 0 35
35549: PUSH
35550: LD_VAR 0 36
35554: PUSH
35555: LD_VAR 0 37
35559: PUSH
35560: LD_VAR 0 38
35564: PUSH
35565: LD_VAR 0 39
35569: PUSH
35570: LD_VAR 0 40
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: PUSH
35583: LD_VAR 0 4
35587: PUSH
35588: LD_INT 1
35590: PLUS
35591: ARRAY
35592: ST_TO_ADDR
35593: GO 35960
35595: LD_INT 6
35597: DOUBLE
35598: EQUAL
35599: IFTRUE 35651
35601: LD_INT 7
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35651
35607: LD_INT 8
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35651
35613: LD_INT 13
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35651
35619: LD_INT 12
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35651
35625: LD_INT 15
35627: DOUBLE
35628: EQUAL
35629: IFTRUE 35651
35631: LD_INT 11
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35651
35637: LD_INT 14
35639: DOUBLE
35640: EQUAL
35641: IFTRUE 35651
35643: LD_INT 10
35645: DOUBLE
35646: EQUAL
35647: IFTRUE 35651
35649: GO 35707
35651: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35652: LD_ADDR_VAR 0 9
35656: PUSH
35657: LD_VAR 0 41
35661: PUSH
35662: LD_VAR 0 42
35666: PUSH
35667: LD_VAR 0 43
35671: PUSH
35672: LD_VAR 0 44
35676: PUSH
35677: LD_VAR 0 45
35681: PUSH
35682: LD_VAR 0 46
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: PUSH
35695: LD_VAR 0 4
35699: PUSH
35700: LD_INT 1
35702: PLUS
35703: ARRAY
35704: ST_TO_ADDR
35705: GO 35960
35707: LD_INT 36
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35715
35713: GO 35771
35715: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35716: LD_ADDR_VAR 0 9
35720: PUSH
35721: LD_VAR 0 47
35725: PUSH
35726: LD_VAR 0 48
35730: PUSH
35731: LD_VAR 0 49
35735: PUSH
35736: LD_VAR 0 50
35740: PUSH
35741: LD_VAR 0 51
35745: PUSH
35746: LD_VAR 0 52
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: PUSH
35759: LD_VAR 0 4
35763: PUSH
35764: LD_INT 1
35766: PLUS
35767: ARRAY
35768: ST_TO_ADDR
35769: GO 35960
35771: LD_INT 4
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35797
35777: LD_INT 5
35779: DOUBLE
35780: EQUAL
35781: IFTRUE 35797
35783: LD_INT 34
35785: DOUBLE
35786: EQUAL
35787: IFTRUE 35797
35789: LD_INT 37
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35797
35795: GO 35853
35797: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35798: LD_ADDR_VAR 0 9
35802: PUSH
35803: LD_VAR 0 53
35807: PUSH
35808: LD_VAR 0 54
35812: PUSH
35813: LD_VAR 0 55
35817: PUSH
35818: LD_VAR 0 56
35822: PUSH
35823: LD_VAR 0 57
35827: PUSH
35828: LD_VAR 0 58
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: PUSH
35841: LD_VAR 0 4
35845: PUSH
35846: LD_INT 1
35848: PLUS
35849: ARRAY
35850: ST_TO_ADDR
35851: GO 35960
35853: LD_INT 31
35855: DOUBLE
35856: EQUAL
35857: IFTRUE 35903
35859: LD_INT 32
35861: DOUBLE
35862: EQUAL
35863: IFTRUE 35903
35865: LD_INT 33
35867: DOUBLE
35868: EQUAL
35869: IFTRUE 35903
35871: LD_INT 27
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35903
35877: LD_INT 26
35879: DOUBLE
35880: EQUAL
35881: IFTRUE 35903
35883: LD_INT 28
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35903
35889: LD_INT 29
35891: DOUBLE
35892: EQUAL
35893: IFTRUE 35903
35895: LD_INT 30
35897: DOUBLE
35898: EQUAL
35899: IFTRUE 35903
35901: GO 35959
35903: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35904: LD_ADDR_VAR 0 9
35908: PUSH
35909: LD_VAR 0 59
35913: PUSH
35914: LD_VAR 0 60
35918: PUSH
35919: LD_VAR 0 61
35923: PUSH
35924: LD_VAR 0 62
35928: PUSH
35929: LD_VAR 0 63
35933: PUSH
35934: LD_VAR 0 64
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: PUSH
35947: LD_VAR 0 4
35951: PUSH
35952: LD_INT 1
35954: PLUS
35955: ARRAY
35956: ST_TO_ADDR
35957: GO 35960
35959: POP
// temp_list2 = [ ] ;
35960: LD_ADDR_VAR 0 10
35964: PUSH
35965: EMPTY
35966: ST_TO_ADDR
// for i in temp_list do
35967: LD_ADDR_VAR 0 8
35971: PUSH
35972: LD_VAR 0 9
35976: PUSH
35977: FOR_IN
35978: IFFALSE 36030
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35980: LD_ADDR_VAR 0 10
35984: PUSH
35985: LD_VAR 0 10
35989: PUSH
35990: LD_VAR 0 8
35994: PUSH
35995: LD_INT 1
35997: ARRAY
35998: PUSH
35999: LD_VAR 0 2
36003: PLUS
36004: PUSH
36005: LD_VAR 0 8
36009: PUSH
36010: LD_INT 2
36012: ARRAY
36013: PUSH
36014: LD_VAR 0 3
36018: PLUS
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: EMPTY
36025: LIST
36026: ADD
36027: ST_TO_ADDR
36028: GO 35977
36030: POP
36031: POP
// result = temp_list2 ;
36032: LD_ADDR_VAR 0 7
36036: PUSH
36037: LD_VAR 0 10
36041: ST_TO_ADDR
// end ;
36042: LD_VAR 0 7
36046: RET
// export function EnemyInRange ( unit , dist ) ; begin
36047: LD_INT 0
36049: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36050: LD_ADDR_VAR 0 3
36054: PUSH
36055: LD_VAR 0 1
36059: PPUSH
36060: CALL_OW 255
36064: PPUSH
36065: LD_VAR 0 1
36069: PPUSH
36070: CALL_OW 250
36074: PPUSH
36075: LD_VAR 0 1
36079: PPUSH
36080: CALL_OW 251
36084: PPUSH
36085: LD_VAR 0 2
36089: PPUSH
36090: CALL 9304 0 4
36094: PUSH
36095: LD_INT 4
36097: ARRAY
36098: ST_TO_ADDR
// end ;
36099: LD_VAR 0 3
36103: RET
// export function PlayerSeeMe ( unit ) ; begin
36104: LD_INT 0
36106: PPUSH
// result := See ( your_side , unit ) ;
36107: LD_ADDR_VAR 0 2
36111: PUSH
36112: LD_OWVAR 2
36116: PPUSH
36117: LD_VAR 0 1
36121: PPUSH
36122: CALL_OW 292
36126: ST_TO_ADDR
// end ;
36127: LD_VAR 0 2
36131: RET
// export function ReverseDir ( unit ) ; begin
36132: LD_INT 0
36134: PPUSH
// if not unit then
36135: LD_VAR 0 1
36139: NOT
36140: IFFALSE 36144
// exit ;
36142: GO 36167
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36144: LD_ADDR_VAR 0 2
36148: PUSH
36149: LD_VAR 0 1
36153: PPUSH
36154: CALL_OW 254
36158: PUSH
36159: LD_INT 3
36161: PLUS
36162: PUSH
36163: LD_INT 6
36165: MOD
36166: ST_TO_ADDR
// end ;
36167: LD_VAR 0 2
36171: RET
// export function ReverseArray ( array ) ; var i ; begin
36172: LD_INT 0
36174: PPUSH
36175: PPUSH
// if not array then
36176: LD_VAR 0 1
36180: NOT
36181: IFFALSE 36185
// exit ;
36183: GO 36240
// result := [ ] ;
36185: LD_ADDR_VAR 0 2
36189: PUSH
36190: EMPTY
36191: ST_TO_ADDR
// for i := array downto 1 do
36192: LD_ADDR_VAR 0 3
36196: PUSH
36197: DOUBLE
36198: LD_VAR 0 1
36202: INC
36203: ST_TO_ADDR
36204: LD_INT 1
36206: PUSH
36207: FOR_DOWNTO
36208: IFFALSE 36238
// result := Join ( result , array [ i ] ) ;
36210: LD_ADDR_VAR 0 2
36214: PUSH
36215: LD_VAR 0 2
36219: PPUSH
36220: LD_VAR 0 1
36224: PUSH
36225: LD_VAR 0 3
36229: ARRAY
36230: PPUSH
36231: CALL 41082 0 2
36235: ST_TO_ADDR
36236: GO 36207
36238: POP
36239: POP
// end ;
36240: LD_VAR 0 2
36244: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36245: LD_INT 0
36247: PPUSH
36248: PPUSH
36249: PPUSH
36250: PPUSH
36251: PPUSH
36252: PPUSH
// if not unit or not hexes then
36253: LD_VAR 0 1
36257: NOT
36258: IFTRUE 36267
36260: PUSH
36261: LD_VAR 0 2
36265: NOT
36266: OR
36267: IFFALSE 36271
// exit ;
36269: GO 36394
// dist := 9999 ;
36271: LD_ADDR_VAR 0 5
36275: PUSH
36276: LD_INT 9999
36278: ST_TO_ADDR
// for i = 1 to hexes do
36279: LD_ADDR_VAR 0 4
36283: PUSH
36284: DOUBLE
36285: LD_INT 1
36287: DEC
36288: ST_TO_ADDR
36289: LD_VAR 0 2
36293: PUSH
36294: FOR_TO
36295: IFFALSE 36382
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36297: LD_ADDR_VAR 0 6
36301: PUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: LD_VAR 0 2
36311: PUSH
36312: LD_VAR 0 4
36316: ARRAY
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PPUSH
36322: LD_VAR 0 2
36326: PUSH
36327: LD_VAR 0 4
36331: ARRAY
36332: PUSH
36333: LD_INT 2
36335: ARRAY
36336: PPUSH
36337: CALL_OW 297
36341: ST_TO_ADDR
// if tdist < dist then
36342: LD_VAR 0 6
36346: PUSH
36347: LD_VAR 0 5
36351: LESS
36352: IFFALSE 36380
// begin hex := hexes [ i ] ;
36354: LD_ADDR_VAR 0 8
36358: PUSH
36359: LD_VAR 0 2
36363: PUSH
36364: LD_VAR 0 4
36368: ARRAY
36369: ST_TO_ADDR
// dist := tdist ;
36370: LD_ADDR_VAR 0 5
36374: PUSH
36375: LD_VAR 0 6
36379: ST_TO_ADDR
// end ; end ;
36380: GO 36294
36382: POP
36383: POP
// result := hex ;
36384: LD_ADDR_VAR 0 3
36388: PUSH
36389: LD_VAR 0 8
36393: ST_TO_ADDR
// end ;
36394: LD_VAR 0 3
36398: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36399: LD_INT 0
36401: PPUSH
36402: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36403: LD_VAR 0 1
36407: NOT
36408: IFTRUE 36447
36410: PUSH
36411: LD_VAR 0 1
36415: PUSH
36416: LD_INT 21
36418: PUSH
36419: LD_INT 2
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 23
36428: PUSH
36429: LD_INT 2
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PPUSH
36440: CALL_OW 69
36444: IN
36445: NOT
36446: OR
36447: IFFALSE 36451
// exit ;
36449: GO 36498
// for i = 1 to 3 do
36451: LD_ADDR_VAR 0 3
36455: PUSH
36456: DOUBLE
36457: LD_INT 1
36459: DEC
36460: ST_TO_ADDR
36461: LD_INT 3
36463: PUSH
36464: FOR_TO
36465: IFFALSE 36496
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36467: LD_VAR 0 1
36471: PPUSH
36472: CALL_OW 250
36476: PPUSH
36477: LD_VAR 0 1
36481: PPUSH
36482: CALL_OW 251
36486: PPUSH
36487: LD_INT 1
36489: PPUSH
36490: CALL_OW 453
36494: GO 36464
36496: POP
36497: POP
// end ;
36498: LD_VAR 0 2
36502: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36503: LD_INT 0
36505: PPUSH
36506: PPUSH
36507: PPUSH
36508: PPUSH
36509: PPUSH
36510: PPUSH
// if not unit or not enemy_unit then
36511: LD_VAR 0 1
36515: NOT
36516: IFTRUE 36525
36518: PUSH
36519: LD_VAR 0 2
36523: NOT
36524: OR
36525: IFFALSE 36529
// exit ;
36527: GO 37000
// if GetLives ( i ) < 250 then
36529: LD_VAR 0 4
36533: PPUSH
36534: CALL_OW 256
36538: PUSH
36539: LD_INT 250
36541: LESS
36542: IFFALSE 36555
// begin ComAutodestruct ( i ) ;
36544: LD_VAR 0 4
36548: PPUSH
36549: CALL 36399 0 1
// exit ;
36553: GO 37000
// end ; x := GetX ( enemy_unit ) ;
36555: LD_ADDR_VAR 0 7
36559: PUSH
36560: LD_VAR 0 2
36564: PPUSH
36565: CALL_OW 250
36569: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36570: LD_ADDR_VAR 0 8
36574: PUSH
36575: LD_VAR 0 2
36579: PPUSH
36580: CALL_OW 251
36584: ST_TO_ADDR
// if not x or not y then
36585: LD_VAR 0 7
36589: NOT
36590: IFTRUE 36599
36592: PUSH
36593: LD_VAR 0 8
36597: NOT
36598: OR
36599: IFFALSE 36603
// exit ;
36601: GO 37000
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36603: LD_ADDR_VAR 0 6
36607: PUSH
36608: LD_VAR 0 7
36612: PPUSH
36613: LD_INT 0
36615: PPUSH
36616: LD_INT 4
36618: PPUSH
36619: CALL_OW 272
36623: PUSH
36624: LD_VAR 0 8
36628: PPUSH
36629: LD_INT 0
36631: PPUSH
36632: LD_INT 4
36634: PPUSH
36635: CALL_OW 273
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_VAR 0 7
36648: PPUSH
36649: LD_INT 1
36651: PPUSH
36652: LD_INT 4
36654: PPUSH
36655: CALL_OW 272
36659: PUSH
36660: LD_VAR 0 8
36664: PPUSH
36665: LD_INT 1
36667: PPUSH
36668: LD_INT 4
36670: PPUSH
36671: CALL_OW 273
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_VAR 0 7
36684: PPUSH
36685: LD_INT 2
36687: PPUSH
36688: LD_INT 4
36690: PPUSH
36691: CALL_OW 272
36695: PUSH
36696: LD_VAR 0 8
36700: PPUSH
36701: LD_INT 2
36703: PPUSH
36704: LD_INT 4
36706: PPUSH
36707: CALL_OW 273
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_VAR 0 7
36720: PPUSH
36721: LD_INT 3
36723: PPUSH
36724: LD_INT 4
36726: PPUSH
36727: CALL_OW 272
36731: PUSH
36732: LD_VAR 0 8
36736: PPUSH
36737: LD_INT 3
36739: PPUSH
36740: LD_INT 4
36742: PPUSH
36743: CALL_OW 273
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_VAR 0 7
36756: PPUSH
36757: LD_INT 4
36759: PPUSH
36760: LD_INT 4
36762: PPUSH
36763: CALL_OW 272
36767: PUSH
36768: LD_VAR 0 8
36772: PPUSH
36773: LD_INT 4
36775: PPUSH
36776: LD_INT 4
36778: PPUSH
36779: CALL_OW 273
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_VAR 0 7
36792: PPUSH
36793: LD_INT 5
36795: PPUSH
36796: LD_INT 4
36798: PPUSH
36799: CALL_OW 272
36803: PUSH
36804: LD_VAR 0 8
36808: PPUSH
36809: LD_INT 5
36811: PPUSH
36812: LD_INT 4
36814: PPUSH
36815: CALL_OW 273
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: ST_TO_ADDR
// for i = tmp downto 1 do
36832: LD_ADDR_VAR 0 4
36836: PUSH
36837: DOUBLE
36838: LD_VAR 0 6
36842: INC
36843: ST_TO_ADDR
36844: LD_INT 1
36846: PUSH
36847: FOR_DOWNTO
36848: IFFALSE 36951
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36850: LD_VAR 0 6
36854: PUSH
36855: LD_VAR 0 4
36859: ARRAY
36860: PUSH
36861: LD_INT 1
36863: ARRAY
36864: PPUSH
36865: LD_VAR 0 6
36869: PUSH
36870: LD_VAR 0 4
36874: ARRAY
36875: PUSH
36876: LD_INT 2
36878: ARRAY
36879: PPUSH
36880: CALL_OW 488
36884: NOT
36885: IFTRUE 36927
36887: PUSH
36888: LD_VAR 0 6
36892: PUSH
36893: LD_VAR 0 4
36897: ARRAY
36898: PUSH
36899: LD_INT 1
36901: ARRAY
36902: PPUSH
36903: LD_VAR 0 6
36907: PUSH
36908: LD_VAR 0 4
36912: ARRAY
36913: PUSH
36914: LD_INT 2
36916: ARRAY
36917: PPUSH
36918: CALL_OW 428
36922: PUSH
36923: LD_INT 0
36925: NONEQUAL
36926: OR
36927: IFFALSE 36949
// tmp := Delete ( tmp , i ) ;
36929: LD_ADDR_VAR 0 6
36933: PUSH
36934: LD_VAR 0 6
36938: PPUSH
36939: LD_VAR 0 4
36943: PPUSH
36944: CALL_OW 3
36948: ST_TO_ADDR
36949: GO 36847
36951: POP
36952: POP
// j := GetClosestHex ( unit , tmp ) ;
36953: LD_ADDR_VAR 0 5
36957: PUSH
36958: LD_VAR 0 1
36962: PPUSH
36963: LD_VAR 0 6
36967: PPUSH
36968: CALL 36245 0 2
36972: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36973: LD_VAR 0 1
36977: PPUSH
36978: LD_VAR 0 5
36982: PUSH
36983: LD_INT 1
36985: ARRAY
36986: PPUSH
36987: LD_VAR 0 5
36991: PUSH
36992: LD_INT 2
36994: ARRAY
36995: PPUSH
36996: CALL_OW 111
// end ;
37000: LD_VAR 0 3
37004: RET
// export function PrepareApemanSoldier ( ) ; begin
37005: LD_INT 0
37007: PPUSH
// uc_nation := 0 ;
37008: LD_ADDR_OWVAR 21
37012: PUSH
37013: LD_INT 0
37015: ST_TO_ADDR
// hc_sex := sex_male ;
37016: LD_ADDR_OWVAR 27
37020: PUSH
37021: LD_INT 1
37023: ST_TO_ADDR
// hc_name :=  ;
37024: LD_ADDR_OWVAR 26
37028: PUSH
37029: LD_STRING 
37031: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37032: LD_ADDR_OWVAR 28
37036: PUSH
37037: LD_INT 15
37039: ST_TO_ADDR
// hc_gallery :=  ;
37040: LD_ADDR_OWVAR 33
37044: PUSH
37045: LD_STRING 
37047: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37048: LD_ADDR_OWVAR 31
37052: PUSH
37053: LD_INT 0
37055: PPUSH
37056: LD_INT 3
37058: PPUSH
37059: CALL_OW 12
37063: PUSH
37064: LD_INT 0
37066: PPUSH
37067: LD_INT 3
37069: PPUSH
37070: CALL_OW 12
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37087: LD_ADDR_OWVAR 29
37091: PUSH
37092: LD_INT 12
37094: PUSH
37095: LD_INT 12
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: ST_TO_ADDR
// end ;
37102: LD_VAR 0 1
37106: RET
// export function PrepareApemanEngineer ( ) ; begin
37107: LD_INT 0
37109: PPUSH
// uc_nation := 0 ;
37110: LD_ADDR_OWVAR 21
37114: PUSH
37115: LD_INT 0
37117: ST_TO_ADDR
// hc_sex := sex_male ;
37118: LD_ADDR_OWVAR 27
37122: PUSH
37123: LD_INT 1
37125: ST_TO_ADDR
// hc_name :=  ;
37126: LD_ADDR_OWVAR 26
37130: PUSH
37131: LD_STRING 
37133: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37134: LD_ADDR_OWVAR 28
37138: PUSH
37139: LD_INT 16
37141: ST_TO_ADDR
// hc_gallery :=  ;
37142: LD_ADDR_OWVAR 33
37146: PUSH
37147: LD_STRING 
37149: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37150: LD_ADDR_OWVAR 31
37154: PUSH
37155: LD_INT 0
37157: PPUSH
37158: LD_INT 3
37160: PPUSH
37161: CALL_OW 12
37165: PUSH
37166: LD_INT 0
37168: PPUSH
37169: LD_INT 3
37171: PPUSH
37172: CALL_OW 12
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37189: LD_ADDR_OWVAR 29
37193: PUSH
37194: LD_INT 12
37196: PUSH
37197: LD_INT 12
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// end ;
37204: LD_VAR 0 1
37208: RET
// export function PrepareApeman ( agressivity ) ; begin
37209: LD_INT 0
37211: PPUSH
// uc_side := 0 ;
37212: LD_ADDR_OWVAR 20
37216: PUSH
37217: LD_INT 0
37219: ST_TO_ADDR
// uc_nation := 0 ;
37220: LD_ADDR_OWVAR 21
37224: PUSH
37225: LD_INT 0
37227: ST_TO_ADDR
// hc_sex := sex_male ;
37228: LD_ADDR_OWVAR 27
37232: PUSH
37233: LD_INT 1
37235: ST_TO_ADDR
// hc_class := class_apeman ;
37236: LD_ADDR_OWVAR 28
37240: PUSH
37241: LD_INT 12
37243: ST_TO_ADDR
// hc_gallery :=  ;
37244: LD_ADDR_OWVAR 33
37248: PUSH
37249: LD_STRING 
37251: ST_TO_ADDR
// hc_name :=  ;
37252: LD_ADDR_OWVAR 26
37256: PUSH
37257: LD_STRING 
37259: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37260: LD_ADDR_OWVAR 29
37264: PUSH
37265: LD_INT 12
37267: PUSH
37268: LD_INT 12
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: ST_TO_ADDR
// if agressivity = 0 then
37275: LD_VAR 0 1
37279: PUSH
37280: LD_INT 0
37282: EQUAL
37283: IFFALSE 37295
// hc_agressivity := 0 else
37285: LD_ADDR_OWVAR 35
37289: PUSH
37290: LD_INT 0
37292: ST_TO_ADDR
37293: GO 37316
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37295: LD_ADDR_OWVAR 35
37299: PUSH
37300: LD_VAR 0 1
37304: NEG
37305: PPUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 12
37315: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37316: LD_ADDR_OWVAR 31
37320: PUSH
37321: LD_INT 0
37323: PPUSH
37324: LD_INT 3
37326: PPUSH
37327: CALL_OW 12
37331: PUSH
37332: LD_INT 0
37334: PPUSH
37335: LD_INT 3
37337: PPUSH
37338: CALL_OW 12
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// end ;
37355: LD_VAR 0 2
37359: RET
// export function PrepareTiger ( agressivity ) ; begin
37360: LD_INT 0
37362: PPUSH
// uc_side := 0 ;
37363: LD_ADDR_OWVAR 20
37367: PUSH
37368: LD_INT 0
37370: ST_TO_ADDR
// uc_nation := 0 ;
37371: LD_ADDR_OWVAR 21
37375: PUSH
37376: LD_INT 0
37378: ST_TO_ADDR
// InitHc ;
37379: CALL_OW 19
// hc_class := class_tiger ;
37383: LD_ADDR_OWVAR 28
37387: PUSH
37388: LD_INT 14
37390: ST_TO_ADDR
// hc_gallery :=  ;
37391: LD_ADDR_OWVAR 33
37395: PUSH
37396: LD_STRING 
37398: ST_TO_ADDR
// hc_name :=  ;
37399: LD_ADDR_OWVAR 26
37403: PUSH
37404: LD_STRING 
37406: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37407: LD_ADDR_OWVAR 35
37411: PUSH
37412: LD_VAR 0 1
37416: NEG
37417: PPUSH
37418: LD_VAR 0 1
37422: PPUSH
37423: CALL_OW 12
37427: ST_TO_ADDR
// end ;
37428: LD_VAR 0 2
37432: RET
// export function PrepareEnchidna ( ) ; begin
37433: LD_INT 0
37435: PPUSH
// uc_side := 0 ;
37436: LD_ADDR_OWVAR 20
37440: PUSH
37441: LD_INT 0
37443: ST_TO_ADDR
// uc_nation := 0 ;
37444: LD_ADDR_OWVAR 21
37448: PUSH
37449: LD_INT 0
37451: ST_TO_ADDR
// InitHc ;
37452: CALL_OW 19
// hc_class := class_baggie ;
37456: LD_ADDR_OWVAR 28
37460: PUSH
37461: LD_INT 13
37463: ST_TO_ADDR
// hc_gallery :=  ;
37464: LD_ADDR_OWVAR 33
37468: PUSH
37469: LD_STRING 
37471: ST_TO_ADDR
// hc_name :=  ;
37472: LD_ADDR_OWVAR 26
37476: PUSH
37477: LD_STRING 
37479: ST_TO_ADDR
// end ;
37480: LD_VAR 0 1
37484: RET
// export function PrepareFrog ( ) ; begin
37485: LD_INT 0
37487: PPUSH
// uc_side := 0 ;
37488: LD_ADDR_OWVAR 20
37492: PUSH
37493: LD_INT 0
37495: ST_TO_ADDR
// uc_nation := 0 ;
37496: LD_ADDR_OWVAR 21
37500: PUSH
37501: LD_INT 0
37503: ST_TO_ADDR
// InitHc ;
37504: CALL_OW 19
// hc_class := class_frog ;
37508: LD_ADDR_OWVAR 28
37512: PUSH
37513: LD_INT 19
37515: ST_TO_ADDR
// hc_gallery :=  ;
37516: LD_ADDR_OWVAR 33
37520: PUSH
37521: LD_STRING 
37523: ST_TO_ADDR
// hc_name :=  ;
37524: LD_ADDR_OWVAR 26
37528: PUSH
37529: LD_STRING 
37531: ST_TO_ADDR
// end ;
37532: LD_VAR 0 1
37536: RET
// export function PrepareFish ( ) ; begin
37537: LD_INT 0
37539: PPUSH
// uc_side := 0 ;
37540: LD_ADDR_OWVAR 20
37544: PUSH
37545: LD_INT 0
37547: ST_TO_ADDR
// uc_nation := 0 ;
37548: LD_ADDR_OWVAR 21
37552: PUSH
37553: LD_INT 0
37555: ST_TO_ADDR
// InitHc ;
37556: CALL_OW 19
// hc_class := class_fish ;
37560: LD_ADDR_OWVAR 28
37564: PUSH
37565: LD_INT 20
37567: ST_TO_ADDR
// hc_gallery :=  ;
37568: LD_ADDR_OWVAR 33
37572: PUSH
37573: LD_STRING 
37575: ST_TO_ADDR
// hc_name :=  ;
37576: LD_ADDR_OWVAR 26
37580: PUSH
37581: LD_STRING 
37583: ST_TO_ADDR
// end ;
37584: LD_VAR 0 1
37588: RET
// export function PrepareBird ( ) ; begin
37589: LD_INT 0
37591: PPUSH
// uc_side := 0 ;
37592: LD_ADDR_OWVAR 20
37596: PUSH
37597: LD_INT 0
37599: ST_TO_ADDR
// uc_nation := 0 ;
37600: LD_ADDR_OWVAR 21
37604: PUSH
37605: LD_INT 0
37607: ST_TO_ADDR
// InitHc ;
37608: CALL_OW 19
// hc_class := class_phororhacos ;
37612: LD_ADDR_OWVAR 28
37616: PUSH
37617: LD_INT 18
37619: ST_TO_ADDR
// hc_gallery :=  ;
37620: LD_ADDR_OWVAR 33
37624: PUSH
37625: LD_STRING 
37627: ST_TO_ADDR
// hc_name :=  ;
37628: LD_ADDR_OWVAR 26
37632: PUSH
37633: LD_STRING 
37635: ST_TO_ADDR
// end ;
37636: LD_VAR 0 1
37640: RET
// export function PrepareHorse ( ) ; begin
37641: LD_INT 0
37643: PPUSH
// uc_side := 0 ;
37644: LD_ADDR_OWVAR 20
37648: PUSH
37649: LD_INT 0
37651: ST_TO_ADDR
// uc_nation := 0 ;
37652: LD_ADDR_OWVAR 21
37656: PUSH
37657: LD_INT 0
37659: ST_TO_ADDR
// InitHc ;
37660: CALL_OW 19
// hc_class := class_horse ;
37664: LD_ADDR_OWVAR 28
37668: PUSH
37669: LD_INT 21
37671: ST_TO_ADDR
// hc_gallery :=  ;
37672: LD_ADDR_OWVAR 33
37676: PUSH
37677: LD_STRING 
37679: ST_TO_ADDR
// hc_name :=  ;
37680: LD_ADDR_OWVAR 26
37684: PUSH
37685: LD_STRING 
37687: ST_TO_ADDR
// end ;
37688: LD_VAR 0 1
37692: RET
// export function PrepareMastodont ( ) ; begin
37693: LD_INT 0
37695: PPUSH
// uc_side := 0 ;
37696: LD_ADDR_OWVAR 20
37700: PUSH
37701: LD_INT 0
37703: ST_TO_ADDR
// uc_nation := 0 ;
37704: LD_ADDR_OWVAR 21
37708: PUSH
37709: LD_INT 0
37711: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37712: LD_ADDR_OWVAR 37
37716: PUSH
37717: LD_INT 31
37719: ST_TO_ADDR
// vc_control := control_rider ;
37720: LD_ADDR_OWVAR 38
37724: PUSH
37725: LD_INT 4
37727: ST_TO_ADDR
// end ;
37728: LD_VAR 0 1
37732: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37733: LD_INT 0
37735: PPUSH
37736: PPUSH
37737: PPUSH
// uc_side = 0 ;
37738: LD_ADDR_OWVAR 20
37742: PUSH
37743: LD_INT 0
37745: ST_TO_ADDR
// uc_nation = 0 ;
37746: LD_ADDR_OWVAR 21
37750: PUSH
37751: LD_INT 0
37753: ST_TO_ADDR
// InitHc_All ( ) ;
37754: CALL_OW 584
// InitVc ;
37758: CALL_OW 20
// if mastodonts then
37762: LD_VAR 0 6
37766: IFFALSE 37833
// for i = 1 to mastodonts do
37768: LD_ADDR_VAR 0 11
37772: PUSH
37773: DOUBLE
37774: LD_INT 1
37776: DEC
37777: ST_TO_ADDR
37778: LD_VAR 0 6
37782: PUSH
37783: FOR_TO
37784: IFFALSE 37831
// begin vc_chassis := 31 ;
37786: LD_ADDR_OWVAR 37
37790: PUSH
37791: LD_INT 31
37793: ST_TO_ADDR
// vc_control := control_rider ;
37794: LD_ADDR_OWVAR 38
37798: PUSH
37799: LD_INT 4
37801: ST_TO_ADDR
// animal := CreateVehicle ;
37802: LD_ADDR_VAR 0 12
37806: PUSH
37807: CALL_OW 45
37811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37812: LD_VAR 0 12
37816: PPUSH
37817: LD_VAR 0 8
37821: PPUSH
37822: LD_INT 0
37824: PPUSH
37825: CALL 39975 0 3
// end ;
37829: GO 37783
37831: POP
37832: POP
// if horses then
37833: LD_VAR 0 5
37837: IFFALSE 37904
// for i = 1 to horses do
37839: LD_ADDR_VAR 0 11
37843: PUSH
37844: DOUBLE
37845: LD_INT 1
37847: DEC
37848: ST_TO_ADDR
37849: LD_VAR 0 5
37853: PUSH
37854: FOR_TO
37855: IFFALSE 37902
// begin hc_class := 21 ;
37857: LD_ADDR_OWVAR 28
37861: PUSH
37862: LD_INT 21
37864: ST_TO_ADDR
// hc_gallery :=  ;
37865: LD_ADDR_OWVAR 33
37869: PUSH
37870: LD_STRING 
37872: ST_TO_ADDR
// animal := CreateHuman ;
37873: LD_ADDR_VAR 0 12
37877: PUSH
37878: CALL_OW 44
37882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37883: LD_VAR 0 12
37887: PPUSH
37888: LD_VAR 0 8
37892: PPUSH
37893: LD_INT 0
37895: PPUSH
37896: CALL 39975 0 3
// end ;
37900: GO 37854
37902: POP
37903: POP
// if birds then
37904: LD_VAR 0 1
37908: IFFALSE 37975
// for i = 1 to birds do
37910: LD_ADDR_VAR 0 11
37914: PUSH
37915: DOUBLE
37916: LD_INT 1
37918: DEC
37919: ST_TO_ADDR
37920: LD_VAR 0 1
37924: PUSH
37925: FOR_TO
37926: IFFALSE 37973
// begin hc_class := 18 ;
37928: LD_ADDR_OWVAR 28
37932: PUSH
37933: LD_INT 18
37935: ST_TO_ADDR
// hc_gallery =  ;
37936: LD_ADDR_OWVAR 33
37940: PUSH
37941: LD_STRING 
37943: ST_TO_ADDR
// animal := CreateHuman ;
37944: LD_ADDR_VAR 0 12
37948: PUSH
37949: CALL_OW 44
37953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37954: LD_VAR 0 12
37958: PPUSH
37959: LD_VAR 0 8
37963: PPUSH
37964: LD_INT 0
37966: PPUSH
37967: CALL 39975 0 3
// end ;
37971: GO 37925
37973: POP
37974: POP
// if tigers then
37975: LD_VAR 0 2
37979: IFFALSE 38063
// for i = 1 to tigers do
37981: LD_ADDR_VAR 0 11
37985: PUSH
37986: DOUBLE
37987: LD_INT 1
37989: DEC
37990: ST_TO_ADDR
37991: LD_VAR 0 2
37995: PUSH
37996: FOR_TO
37997: IFFALSE 38061
// begin hc_class = class_tiger ;
37999: LD_ADDR_OWVAR 28
38003: PUSH
38004: LD_INT 14
38006: ST_TO_ADDR
// hc_gallery =  ;
38007: LD_ADDR_OWVAR 33
38011: PUSH
38012: LD_STRING 
38014: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38015: LD_ADDR_OWVAR 35
38019: PUSH
38020: LD_INT 7
38022: NEG
38023: PPUSH
38024: LD_INT 7
38026: PPUSH
38027: CALL_OW 12
38031: ST_TO_ADDR
// animal := CreateHuman ;
38032: LD_ADDR_VAR 0 12
38036: PUSH
38037: CALL_OW 44
38041: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38042: LD_VAR 0 12
38046: PPUSH
38047: LD_VAR 0 8
38051: PPUSH
38052: LD_INT 0
38054: PPUSH
38055: CALL 39975 0 3
// end ;
38059: GO 37996
38061: POP
38062: POP
// if apemans then
38063: LD_VAR 0 3
38067: IFFALSE 38190
// for i = 1 to apemans do
38069: LD_ADDR_VAR 0 11
38073: PUSH
38074: DOUBLE
38075: LD_INT 1
38077: DEC
38078: ST_TO_ADDR
38079: LD_VAR 0 3
38083: PUSH
38084: FOR_TO
38085: IFFALSE 38188
// begin hc_class = class_apeman ;
38087: LD_ADDR_OWVAR 28
38091: PUSH
38092: LD_INT 12
38094: ST_TO_ADDR
// hc_gallery =  ;
38095: LD_ADDR_OWVAR 33
38099: PUSH
38100: LD_STRING 
38102: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38103: LD_ADDR_OWVAR 35
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PPUSH
38112: LD_INT 2
38114: PPUSH
38115: CALL_OW 12
38119: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38120: LD_ADDR_OWVAR 31
38124: PUSH
38125: LD_INT 1
38127: PPUSH
38128: LD_INT 3
38130: PPUSH
38131: CALL_OW 12
38135: PUSH
38136: LD_INT 1
38138: PPUSH
38139: LD_INT 3
38141: PPUSH
38142: CALL_OW 12
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: ST_TO_ADDR
// animal := CreateHuman ;
38159: LD_ADDR_VAR 0 12
38163: PUSH
38164: CALL_OW 44
38168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38169: LD_VAR 0 12
38173: PPUSH
38174: LD_VAR 0 8
38178: PPUSH
38179: LD_INT 0
38181: PPUSH
38182: CALL 39975 0 3
// end ;
38186: GO 38084
38188: POP
38189: POP
// if enchidnas then
38190: LD_VAR 0 4
38194: IFFALSE 38261
// for i = 1 to enchidnas do
38196: LD_ADDR_VAR 0 11
38200: PUSH
38201: DOUBLE
38202: LD_INT 1
38204: DEC
38205: ST_TO_ADDR
38206: LD_VAR 0 4
38210: PUSH
38211: FOR_TO
38212: IFFALSE 38259
// begin hc_class = 13 ;
38214: LD_ADDR_OWVAR 28
38218: PUSH
38219: LD_INT 13
38221: ST_TO_ADDR
// hc_gallery =  ;
38222: LD_ADDR_OWVAR 33
38226: PUSH
38227: LD_STRING 
38229: ST_TO_ADDR
// animal := CreateHuman ;
38230: LD_ADDR_VAR 0 12
38234: PUSH
38235: CALL_OW 44
38239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38240: LD_VAR 0 12
38244: PPUSH
38245: LD_VAR 0 8
38249: PPUSH
38250: LD_INT 0
38252: PPUSH
38253: CALL 39975 0 3
// end ;
38257: GO 38211
38259: POP
38260: POP
// if fishes then
38261: LD_VAR 0 7
38265: IFFALSE 38332
// for i = 1 to fishes do
38267: LD_ADDR_VAR 0 11
38271: PUSH
38272: DOUBLE
38273: LD_INT 1
38275: DEC
38276: ST_TO_ADDR
38277: LD_VAR 0 7
38281: PUSH
38282: FOR_TO
38283: IFFALSE 38330
// begin hc_class = 20 ;
38285: LD_ADDR_OWVAR 28
38289: PUSH
38290: LD_INT 20
38292: ST_TO_ADDR
// hc_gallery =  ;
38293: LD_ADDR_OWVAR 33
38297: PUSH
38298: LD_STRING 
38300: ST_TO_ADDR
// animal := CreateHuman ;
38301: LD_ADDR_VAR 0 12
38305: PUSH
38306: CALL_OW 44
38310: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38311: LD_VAR 0 12
38315: PPUSH
38316: LD_VAR 0 9
38320: PPUSH
38321: LD_INT 0
38323: PPUSH
38324: CALL 39975 0 3
// end ;
38328: GO 38282
38330: POP
38331: POP
// end ;
38332: LD_VAR 0 10
38336: RET
// export function WantHeal ( sci , unit ) ; begin
38337: LD_INT 0
38339: PPUSH
// if GetTaskList ( sci ) > 0 then
38340: LD_VAR 0 1
38344: PPUSH
38345: CALL_OW 437
38349: PUSH
38350: LD_INT 0
38352: GREATER
38353: IFFALSE 38425
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38355: LD_VAR 0 1
38359: PPUSH
38360: CALL_OW 437
38364: PUSH
38365: LD_INT 1
38367: ARRAY
38368: PUSH
38369: LD_INT 1
38371: ARRAY
38372: PUSH
38373: LD_STRING l
38375: EQUAL
38376: IFFALSE 38403
38378: PUSH
38379: LD_VAR 0 1
38383: PPUSH
38384: CALL_OW 437
38388: PUSH
38389: LD_INT 1
38391: ARRAY
38392: PUSH
38393: LD_INT 4
38395: ARRAY
38396: PUSH
38397: LD_VAR 0 2
38401: EQUAL
38402: AND
38403: IFFALSE 38415
// result := true else
38405: LD_ADDR_VAR 0 3
38409: PUSH
38410: LD_INT 1
38412: ST_TO_ADDR
38413: GO 38423
// result := false ;
38415: LD_ADDR_VAR 0 3
38419: PUSH
38420: LD_INT 0
38422: ST_TO_ADDR
// end else
38423: GO 38433
// result := false ;
38425: LD_ADDR_VAR 0 3
38429: PUSH
38430: LD_INT 0
38432: ST_TO_ADDR
// end ;
38433: LD_VAR 0 3
38437: RET
// export function HealTarget ( sci ) ; begin
38438: LD_INT 0
38440: PPUSH
// if not sci then
38441: LD_VAR 0 1
38445: NOT
38446: IFFALSE 38450
// exit ;
38448: GO 38515
// result := 0 ;
38450: LD_ADDR_VAR 0 2
38454: PUSH
38455: LD_INT 0
38457: ST_TO_ADDR
// if GetTaskList ( sci ) then
38458: LD_VAR 0 1
38462: PPUSH
38463: CALL_OW 437
38467: IFFALSE 38515
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38469: LD_VAR 0 1
38473: PPUSH
38474: CALL_OW 437
38478: PUSH
38479: LD_INT 1
38481: ARRAY
38482: PUSH
38483: LD_INT 1
38485: ARRAY
38486: PUSH
38487: LD_STRING l
38489: EQUAL
38490: IFFALSE 38515
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38492: LD_ADDR_VAR 0 2
38496: PUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: CALL_OW 437
38506: PUSH
38507: LD_INT 1
38509: ARRAY
38510: PUSH
38511: LD_INT 4
38513: ARRAY
38514: ST_TO_ADDR
// end ;
38515: LD_VAR 0 2
38519: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38520: LD_INT 0
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
// if not base_units then
38526: LD_VAR 0 1
38530: NOT
38531: IFFALSE 38535
// exit ;
38533: GO 38622
// result := false ;
38535: LD_ADDR_VAR 0 2
38539: PUSH
38540: LD_INT 0
38542: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38543: LD_ADDR_VAR 0 5
38547: PUSH
38548: LD_VAR 0 1
38552: PPUSH
38553: LD_INT 21
38555: PUSH
38556: LD_INT 3
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PPUSH
38563: CALL_OW 72
38567: ST_TO_ADDR
// if not tmp then
38568: LD_VAR 0 5
38572: NOT
38573: IFFALSE 38577
// exit ;
38575: GO 38622
// for i in tmp do
38577: LD_ADDR_VAR 0 3
38581: PUSH
38582: LD_VAR 0 5
38586: PUSH
38587: FOR_IN
38588: IFFALSE 38620
// begin result := EnemyInRange ( i , 22 ) ;
38590: LD_ADDR_VAR 0 2
38594: PUSH
38595: LD_VAR 0 3
38599: PPUSH
38600: LD_INT 22
38602: PPUSH
38603: CALL 36047 0 2
38607: ST_TO_ADDR
// if result then
38608: LD_VAR 0 2
38612: IFFALSE 38618
// exit ;
38614: POP
38615: POP
38616: GO 38622
// end ;
38618: GO 38587
38620: POP
38621: POP
// end ;
38622: LD_VAR 0 2
38626: RET
// export function FilterByTag ( units , tag ) ; begin
38627: LD_INT 0
38629: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38630: LD_ADDR_VAR 0 3
38634: PUSH
38635: LD_VAR 0 1
38639: PPUSH
38640: LD_INT 120
38642: PUSH
38643: LD_VAR 0 2
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PPUSH
38652: CALL_OW 72
38656: ST_TO_ADDR
// end ;
38657: LD_VAR 0 3
38661: RET
// export function IsDriver ( un ) ; begin
38662: LD_INT 0
38664: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38665: LD_ADDR_VAR 0 2
38669: PUSH
38670: LD_VAR 0 1
38674: PUSH
38675: LD_INT 55
38677: PUSH
38678: EMPTY
38679: LIST
38680: PPUSH
38681: CALL_OW 69
38685: IN
38686: ST_TO_ADDR
// end ;
38687: LD_VAR 0 2
38691: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38692: LD_INT 0
38694: PPUSH
38695: PPUSH
// list := [ ] ;
38696: LD_ADDR_VAR 0 5
38700: PUSH
38701: EMPTY
38702: ST_TO_ADDR
// case d of 0 :
38703: LD_VAR 0 3
38707: PUSH
38708: LD_INT 0
38710: DOUBLE
38711: EQUAL
38712: IFTRUE 38716
38714: GO 38849
38716: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38717: LD_ADDR_VAR 0 5
38721: PUSH
38722: LD_VAR 0 1
38726: PUSH
38727: LD_INT 4
38729: MINUS
38730: PUSH
38731: LD_VAR 0 2
38735: PUSH
38736: LD_INT 4
38738: MINUS
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: PUSH
38748: LD_VAR 0 1
38752: PUSH
38753: LD_INT 3
38755: MINUS
38756: PUSH
38757: LD_VAR 0 2
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: PUSH
38770: LD_VAR 0 1
38774: PUSH
38775: LD_INT 4
38777: PLUS
38778: PUSH
38779: LD_VAR 0 2
38783: PUSH
38784: LD_INT 4
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: PUSH
38792: LD_VAR 0 1
38796: PUSH
38797: LD_INT 3
38799: PLUS
38800: PUSH
38801: LD_VAR 0 2
38805: PUSH
38806: LD_INT 3
38808: PLUS
38809: PUSH
38810: LD_INT 5
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: PUSH
38818: LD_VAR 0 1
38822: PUSH
38823: LD_VAR 0 2
38827: PUSH
38828: LD_INT 4
38830: PLUS
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: ST_TO_ADDR
// end ; 1 :
38847: GO 39547
38849: LD_INT 1
38851: DOUBLE
38852: EQUAL
38853: IFTRUE 38857
38855: GO 38990
38857: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38858: LD_ADDR_VAR 0 5
38862: PUSH
38863: LD_VAR 0 1
38867: PUSH
38868: LD_VAR 0 2
38872: PUSH
38873: LD_INT 4
38875: MINUS
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: PUSH
38885: LD_VAR 0 1
38889: PUSH
38890: LD_INT 3
38892: MINUS
38893: PUSH
38894: LD_VAR 0 2
38898: PUSH
38899: LD_INT 3
38901: MINUS
38902: PUSH
38903: LD_INT 2
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: PUSH
38911: LD_VAR 0 1
38915: PUSH
38916: LD_INT 4
38918: MINUS
38919: PUSH
38920: LD_VAR 0 2
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: PUSH
38933: LD_VAR 0 1
38937: PUSH
38938: LD_VAR 0 2
38942: PUSH
38943: LD_INT 3
38945: PLUS
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: LIST
38954: PUSH
38955: LD_VAR 0 1
38959: PUSH
38960: LD_INT 4
38962: PLUS
38963: PUSH
38964: LD_VAR 0 2
38968: PUSH
38969: LD_INT 4
38971: PLUS
38972: PUSH
38973: LD_INT 5
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: ST_TO_ADDR
// end ; 2 :
38988: GO 39547
38990: LD_INT 2
38992: DOUBLE
38993: EQUAL
38994: IFTRUE 38998
38996: GO 39127
38998: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38999: LD_ADDR_VAR 0 5
39003: PUSH
39004: LD_VAR 0 1
39008: PUSH
39009: LD_VAR 0 2
39013: PUSH
39014: LD_INT 3
39016: MINUS
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: PUSH
39026: LD_VAR 0 1
39030: PUSH
39031: LD_INT 4
39033: PLUS
39034: PUSH
39035: LD_VAR 0 2
39039: PUSH
39040: LD_INT 4
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: PUSH
39048: LD_VAR 0 1
39052: PUSH
39053: LD_VAR 0 2
39057: PUSH
39058: LD_INT 4
39060: PLUS
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: PUSH
39070: LD_VAR 0 1
39074: PUSH
39075: LD_INT 3
39077: MINUS
39078: PUSH
39079: LD_VAR 0 2
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: LIST
39091: PUSH
39092: LD_VAR 0 1
39096: PUSH
39097: LD_INT 4
39099: MINUS
39100: PUSH
39101: LD_VAR 0 2
39105: PUSH
39106: LD_INT 4
39108: MINUS
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: LIST
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: ST_TO_ADDR
// end ; 3 :
39125: GO 39547
39127: LD_INT 3
39129: DOUBLE
39130: EQUAL
39131: IFTRUE 39135
39133: GO 39268
39135: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39136: LD_ADDR_VAR 0 5
39140: PUSH
39141: LD_VAR 0 1
39145: PUSH
39146: LD_INT 3
39148: PLUS
39149: PUSH
39150: LD_VAR 0 2
39154: PUSH
39155: LD_INT 4
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: PUSH
39163: LD_VAR 0 1
39167: PUSH
39168: LD_INT 4
39170: PLUS
39171: PUSH
39172: LD_VAR 0 2
39176: PUSH
39177: LD_INT 4
39179: PLUS
39180: PUSH
39181: LD_INT 5
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: LIST
39188: PUSH
39189: LD_VAR 0 1
39193: PUSH
39194: LD_INT 4
39196: MINUS
39197: PUSH
39198: LD_VAR 0 2
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: PUSH
39211: LD_VAR 0 1
39215: PUSH
39216: LD_VAR 0 2
39220: PUSH
39221: LD_INT 4
39223: MINUS
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: LIST
39232: PUSH
39233: LD_VAR 0 1
39237: PUSH
39238: LD_INT 3
39240: MINUS
39241: PUSH
39242: LD_VAR 0 2
39246: PUSH
39247: LD_INT 3
39249: MINUS
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: ST_TO_ADDR
// end ; 4 :
39266: GO 39547
39268: LD_INT 4
39270: DOUBLE
39271: EQUAL
39272: IFTRUE 39276
39274: GO 39409
39276: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39277: LD_ADDR_VAR 0 5
39281: PUSH
39282: LD_VAR 0 1
39286: PUSH
39287: LD_VAR 0 2
39291: PUSH
39292: LD_INT 4
39294: PLUS
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: PUSH
39304: LD_VAR 0 1
39308: PUSH
39309: LD_INT 3
39311: PLUS
39312: PUSH
39313: LD_VAR 0 2
39317: PUSH
39318: LD_INT 3
39320: PLUS
39321: PUSH
39322: LD_INT 5
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: PUSH
39330: LD_VAR 0 1
39334: PUSH
39335: LD_INT 4
39337: PLUS
39338: PUSH
39339: LD_VAR 0 2
39343: PUSH
39344: LD_INT 4
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: PUSH
39352: LD_VAR 0 1
39356: PUSH
39357: LD_VAR 0 2
39361: PUSH
39362: LD_INT 3
39364: MINUS
39365: PUSH
39366: LD_INT 3
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: PUSH
39374: LD_VAR 0 1
39378: PUSH
39379: LD_INT 4
39381: MINUS
39382: PUSH
39383: LD_VAR 0 2
39387: PUSH
39388: LD_INT 4
39390: MINUS
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: ST_TO_ADDR
// end ; 5 :
39407: GO 39547
39409: LD_INT 5
39411: DOUBLE
39412: EQUAL
39413: IFTRUE 39417
39415: GO 39546
39417: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39418: LD_ADDR_VAR 0 5
39422: PUSH
39423: LD_VAR 0 1
39427: PUSH
39428: LD_INT 4
39430: MINUS
39431: PUSH
39432: LD_VAR 0 2
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: PUSH
39445: LD_VAR 0 1
39449: PUSH
39450: LD_VAR 0 2
39454: PUSH
39455: LD_INT 4
39457: MINUS
39458: PUSH
39459: LD_INT 3
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: LIST
39466: PUSH
39467: LD_VAR 0 1
39471: PUSH
39472: LD_INT 4
39474: PLUS
39475: PUSH
39476: LD_VAR 0 2
39480: PUSH
39481: LD_INT 4
39483: PLUS
39484: PUSH
39485: LD_INT 5
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: PUSH
39493: LD_VAR 0 1
39497: PUSH
39498: LD_INT 3
39500: PLUS
39501: PUSH
39502: LD_VAR 0 2
39506: PUSH
39507: LD_INT 4
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: PUSH
39515: LD_VAR 0 1
39519: PUSH
39520: LD_VAR 0 2
39524: PUSH
39525: LD_INT 3
39527: PLUS
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: ST_TO_ADDR
// end ; end ;
39544: GO 39547
39546: POP
// result := list ;
39547: LD_ADDR_VAR 0 4
39551: PUSH
39552: LD_VAR 0 5
39556: ST_TO_ADDR
// end ;
39557: LD_VAR 0 4
39561: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39562: LD_INT 0
39564: PPUSH
39565: PPUSH
39566: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39567: LD_VAR 0 1
39571: NOT
39572: IFTRUE 39600
39574: PUSH
39575: LD_VAR 0 2
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 2
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: LD_INT 4
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: IN
39598: NOT
39599: OR
39600: IFFALSE 39604
// exit ;
39602: GO 39687
// tmp := [ ] ;
39604: LD_ADDR_VAR 0 5
39608: PUSH
39609: EMPTY
39610: ST_TO_ADDR
// for i in units do
39611: LD_ADDR_VAR 0 4
39615: PUSH
39616: LD_VAR 0 1
39620: PUSH
39621: FOR_IN
39622: IFFALSE 39656
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39624: LD_ADDR_VAR 0 5
39628: PUSH
39629: LD_VAR 0 5
39633: PPUSH
39634: LD_VAR 0 4
39638: PPUSH
39639: LD_VAR 0 2
39643: PPUSH
39644: CALL_OW 259
39648: PPUSH
39649: CALL 41082 0 2
39653: ST_TO_ADDR
39654: GO 39621
39656: POP
39657: POP
// if not tmp then
39658: LD_VAR 0 5
39662: NOT
39663: IFFALSE 39667
// exit ;
39665: GO 39687
// result := SortListByListDesc ( units , tmp ) ;
39667: LD_ADDR_VAR 0 3
39671: PUSH
39672: LD_VAR 0 1
39676: PPUSH
39677: LD_VAR 0 5
39681: PPUSH
39682: CALL_OW 77
39686: ST_TO_ADDR
// end ;
39687: LD_VAR 0 3
39691: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39692: LD_INT 0
39694: PPUSH
39695: PPUSH
39696: PPUSH
// result := false ;
39697: LD_ADDR_VAR 0 3
39701: PUSH
39702: LD_INT 0
39704: ST_TO_ADDR
// if not building then
39705: LD_VAR 0 2
39709: NOT
39710: IFFALSE 39714
// exit ;
39712: GO 39858
// x := GetX ( building ) ;
39714: LD_ADDR_VAR 0 4
39718: PUSH
39719: LD_VAR 0 2
39723: PPUSH
39724: CALL_OW 250
39728: ST_TO_ADDR
// y := GetY ( building ) ;
39729: LD_ADDR_VAR 0 5
39733: PUSH
39734: LD_VAR 0 2
39738: PPUSH
39739: CALL_OW 251
39743: ST_TO_ADDR
// if not x or not y then
39744: LD_VAR 0 4
39748: NOT
39749: IFTRUE 39758
39751: PUSH
39752: LD_VAR 0 5
39756: NOT
39757: OR
39758: IFFALSE 39762
// exit ;
39760: GO 39858
// if GetTaskList ( unit ) then
39762: LD_VAR 0 1
39766: PPUSH
39767: CALL_OW 437
39771: IFFALSE 39858
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39773: LD_STRING e
39775: PUSH
39776: LD_VAR 0 1
39780: PPUSH
39781: CALL_OW 437
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PUSH
39790: LD_INT 1
39792: ARRAY
39793: EQUAL
39794: IFFALSE 39821
39796: PUSH
39797: LD_VAR 0 4
39801: PUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 437
39811: PUSH
39812: LD_INT 1
39814: ARRAY
39815: PUSH
39816: LD_INT 2
39818: ARRAY
39819: EQUAL
39820: AND
39821: IFFALSE 39848
39823: PUSH
39824: LD_VAR 0 5
39828: PUSH
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 437
39838: PUSH
39839: LD_INT 1
39841: ARRAY
39842: PUSH
39843: LD_INT 3
39845: ARRAY
39846: EQUAL
39847: AND
39848: IFFALSE 39858
// result := true end ;
39850: LD_ADDR_VAR 0 3
39854: PUSH
39855: LD_INT 1
39857: ST_TO_ADDR
// end ;
39858: LD_VAR 0 3
39862: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39863: LD_INT 0
39865: PPUSH
// result := false ;
39866: LD_ADDR_VAR 0 4
39870: PUSH
39871: LD_INT 0
39873: ST_TO_ADDR
// if GetTaskList ( unit ) then
39874: LD_VAR 0 1
39878: PPUSH
39879: CALL_OW 437
39883: IFFALSE 39970
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39885: LD_STRING M
39887: PUSH
39888: LD_VAR 0 1
39892: PPUSH
39893: CALL_OW 437
39897: PUSH
39898: LD_INT 1
39900: ARRAY
39901: PUSH
39902: LD_INT 1
39904: ARRAY
39905: EQUAL
39906: IFFALSE 39933
39908: PUSH
39909: LD_VAR 0 2
39913: PUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 437
39923: PUSH
39924: LD_INT 1
39926: ARRAY
39927: PUSH
39928: LD_INT 2
39930: ARRAY
39931: EQUAL
39932: AND
39933: IFFALSE 39960
39935: PUSH
39936: LD_VAR 0 3
39940: PUSH
39941: LD_VAR 0 1
39945: PPUSH
39946: CALL_OW 437
39950: PUSH
39951: LD_INT 1
39953: ARRAY
39954: PUSH
39955: LD_INT 3
39957: ARRAY
39958: EQUAL
39959: AND
39960: IFFALSE 39970
// result := true ;
39962: LD_ADDR_VAR 0 4
39966: PUSH
39967: LD_INT 1
39969: ST_TO_ADDR
// end ; end ;
39970: LD_VAR 0 4
39974: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39975: LD_INT 0
39977: PPUSH
39978: PPUSH
39979: PPUSH
39980: PPUSH
// if not unit or not area then
39981: LD_VAR 0 1
39985: NOT
39986: IFTRUE 39995
39988: PUSH
39989: LD_VAR 0 2
39993: NOT
39994: OR
39995: IFFALSE 39999
// exit ;
39997: GO 40175
// tmp := AreaToList ( area , i ) ;
39999: LD_ADDR_VAR 0 6
40003: PUSH
40004: LD_VAR 0 2
40008: PPUSH
40009: LD_VAR 0 5
40013: PPUSH
40014: CALL_OW 517
40018: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40019: LD_ADDR_VAR 0 5
40023: PUSH
40024: DOUBLE
40025: LD_INT 1
40027: DEC
40028: ST_TO_ADDR
40029: LD_VAR 0 6
40033: PUSH
40034: LD_INT 1
40036: ARRAY
40037: PUSH
40038: FOR_TO
40039: IFFALSE 40173
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40041: LD_ADDR_VAR 0 7
40045: PUSH
40046: LD_VAR 0 6
40050: PUSH
40051: LD_INT 1
40053: ARRAY
40054: PUSH
40055: LD_VAR 0 5
40059: ARRAY
40060: PUSH
40061: LD_VAR 0 6
40065: PUSH
40066: LD_INT 2
40068: ARRAY
40069: PUSH
40070: LD_VAR 0 5
40074: ARRAY
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40080: LD_INT 92
40082: PUSH
40083: LD_VAR 0 7
40087: PUSH
40088: LD_INT 1
40090: ARRAY
40091: PUSH
40092: LD_VAR 0 7
40096: PUSH
40097: LD_INT 2
40099: ARRAY
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: PPUSH
40110: CALL_OW 69
40114: PUSH
40115: LD_INT 0
40117: EQUAL
40118: IFFALSE 40171
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40120: LD_VAR 0 1
40124: PPUSH
40125: LD_VAR 0 7
40129: PUSH
40130: LD_INT 1
40132: ARRAY
40133: PPUSH
40134: LD_VAR 0 7
40138: PUSH
40139: LD_INT 2
40141: ARRAY
40142: PPUSH
40143: LD_VAR 0 3
40147: PPUSH
40148: CALL_OW 48
// result := IsPlaced ( unit ) ;
40152: LD_ADDR_VAR 0 4
40156: PUSH
40157: LD_VAR 0 1
40161: PPUSH
40162: CALL_OW 305
40166: ST_TO_ADDR
// exit ;
40167: POP
40168: POP
40169: GO 40175
// end ; end ;
40171: GO 40038
40173: POP
40174: POP
// end ;
40175: LD_VAR 0 4
40179: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40180: LD_INT 0
40182: PPUSH
40183: PPUSH
40184: PPUSH
// if not side or side > 8 then
40185: LD_VAR 0 1
40189: NOT
40190: IFTRUE 40202
40192: PUSH
40193: LD_VAR 0 1
40197: PUSH
40198: LD_INT 8
40200: GREATER
40201: OR
40202: IFFALSE 40206
// exit ;
40204: GO 40393
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40206: LD_ADDR_VAR 0 4
40210: PUSH
40211: LD_INT 22
40213: PUSH
40214: LD_VAR 0 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 21
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PPUSH
40237: CALL_OW 69
40241: ST_TO_ADDR
// if not tmp then
40242: LD_VAR 0 4
40246: NOT
40247: IFFALSE 40251
// exit ;
40249: GO 40393
// enable_addtolog := true ;
40251: LD_ADDR_OWVAR 81
40255: PUSH
40256: LD_INT 1
40258: ST_TO_ADDR
// AddToLog ( [ ) ;
40259: LD_STRING [
40261: PPUSH
40262: CALL_OW 561
// for i in tmp do
40266: LD_ADDR_VAR 0 3
40270: PUSH
40271: LD_VAR 0 4
40275: PUSH
40276: FOR_IN
40277: IFFALSE 40384
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40279: LD_STRING [
40281: PUSH
40282: LD_VAR 0 3
40286: PPUSH
40287: CALL_OW 266
40291: STR
40292: PUSH
40293: LD_STRING , 
40295: STR
40296: PUSH
40297: LD_VAR 0 3
40301: PPUSH
40302: CALL_OW 250
40306: STR
40307: PUSH
40308: LD_STRING , 
40310: STR
40311: PUSH
40312: LD_VAR 0 3
40316: PPUSH
40317: CALL_OW 251
40321: STR
40322: PUSH
40323: LD_STRING , 
40325: STR
40326: PUSH
40327: LD_VAR 0 3
40331: PPUSH
40332: CALL_OW 254
40336: STR
40337: PUSH
40338: LD_STRING , 
40340: STR
40341: PUSH
40342: LD_VAR 0 3
40346: PPUSH
40347: LD_INT 1
40349: PPUSH
40350: CALL_OW 268
40354: STR
40355: PUSH
40356: LD_STRING , 
40358: STR
40359: PUSH
40360: LD_VAR 0 3
40364: PPUSH
40365: LD_INT 2
40367: PPUSH
40368: CALL_OW 268
40372: STR
40373: PUSH
40374: LD_STRING ],
40376: STR
40377: PPUSH
40378: CALL_OW 561
// end ;
40382: GO 40276
40384: POP
40385: POP
// AddToLog ( ]; ) ;
40386: LD_STRING ];
40388: PPUSH
40389: CALL_OW 561
// end ;
40393: LD_VAR 0 2
40397: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40398: LD_INT 0
40400: PPUSH
40401: PPUSH
40402: PPUSH
40403: PPUSH
40404: PPUSH
// if not area or not rate or not max then
40405: LD_VAR 0 1
40409: NOT
40410: IFTRUE 40419
40412: PUSH
40413: LD_VAR 0 2
40417: NOT
40418: OR
40419: IFTRUE 40428
40421: PUSH
40422: LD_VAR 0 4
40426: NOT
40427: OR
40428: IFFALSE 40432
// exit ;
40430: GO 40621
// while 1 do
40432: LD_INT 1
40434: IFFALSE 40621
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40436: LD_ADDR_VAR 0 9
40440: PUSH
40441: LD_VAR 0 1
40445: PPUSH
40446: LD_INT 1
40448: PPUSH
40449: CALL_OW 287
40453: PUSH
40454: LD_INT 10
40456: MUL
40457: ST_TO_ADDR
// r := rate / 10 ;
40458: LD_ADDR_VAR 0 7
40462: PUSH
40463: LD_VAR 0 2
40467: PUSH
40468: LD_INT 10
40470: DIVREAL
40471: ST_TO_ADDR
// time := 1 1$00 ;
40472: LD_ADDR_VAR 0 8
40476: PUSH
40477: LD_INT 2100
40479: ST_TO_ADDR
// if amount < min then
40480: LD_VAR 0 9
40484: PUSH
40485: LD_VAR 0 3
40489: LESS
40490: IFFALSE 40508
// r := r * 2 else
40492: LD_ADDR_VAR 0 7
40496: PUSH
40497: LD_VAR 0 7
40501: PUSH
40502: LD_INT 2
40504: MUL
40505: ST_TO_ADDR
40506: GO 40534
// if amount > max then
40508: LD_VAR 0 9
40512: PUSH
40513: LD_VAR 0 4
40517: GREATER
40518: IFFALSE 40534
// r := r / 2 ;
40520: LD_ADDR_VAR 0 7
40524: PUSH
40525: LD_VAR 0 7
40529: PUSH
40530: LD_INT 2
40532: DIVREAL
40533: ST_TO_ADDR
// time := time / r ;
40534: LD_ADDR_VAR 0 8
40538: PUSH
40539: LD_VAR 0 8
40543: PUSH
40544: LD_VAR 0 7
40548: DIVREAL
40549: ST_TO_ADDR
// if time < 0 then
40550: LD_VAR 0 8
40554: PUSH
40555: LD_INT 0
40557: LESS
40558: IFFALSE 40575
// time := time * - 1 ;
40560: LD_ADDR_VAR 0 8
40564: PUSH
40565: LD_VAR 0 8
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: MUL
40574: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40575: LD_VAR 0 8
40579: PUSH
40580: LD_INT 35
40582: PPUSH
40583: LD_INT 875
40585: PPUSH
40586: CALL_OW 12
40590: PLUS
40591: PPUSH
40592: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40596: LD_INT 1
40598: PPUSH
40599: LD_INT 5
40601: PPUSH
40602: CALL_OW 12
40606: PPUSH
40607: LD_VAR 0 1
40611: PPUSH
40612: LD_INT 1
40614: PPUSH
40615: CALL_OW 55
// end ;
40619: GO 40432
// end ;
40621: LD_VAR 0 5
40625: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40626: LD_INT 0
40628: PPUSH
40629: PPUSH
40630: PPUSH
40631: PPUSH
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
// if not turrets or not factories then
40636: LD_VAR 0 1
40640: NOT
40641: IFTRUE 40650
40643: PUSH
40644: LD_VAR 0 2
40648: NOT
40649: OR
40650: IFFALSE 40654
// exit ;
40652: GO 40961
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40654: LD_ADDR_VAR 0 10
40658: PUSH
40659: LD_INT 5
40661: PUSH
40662: LD_INT 6
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: LD_INT 4
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 3
40681: PUSH
40682: LD_INT 5
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 24
40696: PUSH
40697: LD_INT 25
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 23
40706: PUSH
40707: LD_INT 27
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 42
40720: PUSH
40721: LD_INT 43
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 44
40730: PUSH
40731: LD_INT 46
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 45
40740: PUSH
40741: LD_INT 47
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// result := [ ] ;
40758: LD_ADDR_VAR 0 3
40762: PUSH
40763: EMPTY
40764: ST_TO_ADDR
// for i in turrets do
40765: LD_ADDR_VAR 0 4
40769: PUSH
40770: LD_VAR 0 1
40774: PUSH
40775: FOR_IN
40776: IFFALSE 40959
// begin nat := GetNation ( i ) ;
40778: LD_ADDR_VAR 0 7
40782: PUSH
40783: LD_VAR 0 4
40787: PPUSH
40788: CALL_OW 248
40792: ST_TO_ADDR
// weapon := 0 ;
40793: LD_ADDR_VAR 0 8
40797: PUSH
40798: LD_INT 0
40800: ST_TO_ADDR
// if not nat then
40801: LD_VAR 0 7
40805: NOT
40806: IFFALSE 40810
// continue ;
40808: GO 40775
// for j in list [ nat ] do
40810: LD_ADDR_VAR 0 5
40814: PUSH
40815: LD_VAR 0 10
40819: PUSH
40820: LD_VAR 0 7
40824: ARRAY
40825: PUSH
40826: FOR_IN
40827: IFFALSE 40868
// if GetBWeapon ( i ) = j [ 1 ] then
40829: LD_VAR 0 4
40833: PPUSH
40834: CALL_OW 269
40838: PUSH
40839: LD_VAR 0 5
40843: PUSH
40844: LD_INT 1
40846: ARRAY
40847: EQUAL
40848: IFFALSE 40866
// begin weapon := j [ 2 ] ;
40850: LD_ADDR_VAR 0 8
40854: PUSH
40855: LD_VAR 0 5
40859: PUSH
40860: LD_INT 2
40862: ARRAY
40863: ST_TO_ADDR
// break ;
40864: GO 40868
// end ;
40866: GO 40826
40868: POP
40869: POP
// if not weapon then
40870: LD_VAR 0 8
40874: NOT
40875: IFFALSE 40879
// continue ;
40877: GO 40775
// for k in factories do
40879: LD_ADDR_VAR 0 6
40883: PUSH
40884: LD_VAR 0 2
40888: PUSH
40889: FOR_IN
40890: IFFALSE 40955
// begin weapons := AvailableWeaponList ( k ) ;
40892: LD_ADDR_VAR 0 9
40896: PUSH
40897: LD_VAR 0 6
40901: PPUSH
40902: CALL_OW 478
40906: ST_TO_ADDR
// if not weapons then
40907: LD_VAR 0 9
40911: NOT
40912: IFFALSE 40916
// continue ;
40914: GO 40889
// if weapon in weapons then
40916: LD_VAR 0 8
40920: PUSH
40921: LD_VAR 0 9
40925: IN
40926: IFFALSE 40953
// begin result := [ i , weapon ] ;
40928: LD_ADDR_VAR 0 3
40932: PUSH
40933: LD_VAR 0 4
40937: PUSH
40938: LD_VAR 0 8
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// exit ;
40947: POP
40948: POP
40949: POP
40950: POP
40951: GO 40961
// end ; end ;
40953: GO 40889
40955: POP
40956: POP
// end ;
40957: GO 40775
40959: POP
40960: POP
// end ;
40961: LD_VAR 0 3
40965: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40966: LD_INT 0
40968: PPUSH
// if not side or side > 8 then
40969: LD_VAR 0 3
40973: NOT
40974: IFTRUE 40986
40976: PUSH
40977: LD_VAR 0 3
40981: PUSH
40982: LD_INT 8
40984: GREATER
40985: OR
40986: IFFALSE 40990
// exit ;
40988: GO 41049
// if not range then
40990: LD_VAR 0 4
40994: NOT
40995: IFFALSE 41006
// range := - 12 ;
40997: LD_ADDR_VAR 0 4
41001: PUSH
41002: LD_INT 12
41004: NEG
41005: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41006: LD_VAR 0 1
41010: PPUSH
41011: LD_VAR 0 2
41015: PPUSH
41016: LD_VAR 0 3
41020: PPUSH
41021: LD_VAR 0 4
41025: PPUSH
41026: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41030: LD_VAR 0 1
41034: PPUSH
41035: LD_VAR 0 2
41039: PPUSH
41040: LD_VAR 0 3
41044: PPUSH
41045: CALL_OW 331
// end ;
41049: LD_VAR 0 5
41053: RET
// export function Video ( mode ) ; begin
41054: LD_INT 0
41056: PPUSH
// ingame_video = mode ;
41057: LD_ADDR_OWVAR 52
41061: PUSH
41062: LD_VAR 0 1
41066: ST_TO_ADDR
// interface_hidden = mode ;
41067: LD_ADDR_OWVAR 54
41071: PUSH
41072: LD_VAR 0 1
41076: ST_TO_ADDR
// end ;
41077: LD_VAR 0 2
41081: RET
// export function Join ( array , element ) ; begin
41082: LD_INT 0
41084: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41085: LD_ADDR_VAR 0 3
41089: PUSH
41090: LD_VAR 0 1
41094: PPUSH
41095: LD_VAR 0 1
41099: PUSH
41100: LD_INT 1
41102: PLUS
41103: PPUSH
41104: LD_VAR 0 2
41108: PPUSH
41109: CALL_OW 1
41113: ST_TO_ADDR
// end ;
41114: LD_VAR 0 3
41118: RET
// export function JoinUnion ( array , element ) ; begin
41119: LD_INT 0
41121: PPUSH
// result := array union element ;
41122: LD_ADDR_VAR 0 3
41126: PUSH
41127: LD_VAR 0 1
41131: PUSH
41132: LD_VAR 0 2
41136: UNION
41137: ST_TO_ADDR
// end ;
41138: LD_VAR 0 3
41142: RET
// export function GetBehemoths ( side ) ; begin
41143: LD_INT 0
41145: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41146: LD_ADDR_VAR 0 2
41150: PUSH
41151: LD_INT 22
41153: PUSH
41154: LD_VAR 0 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 31
41165: PUSH
41166: LD_INT 25
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PPUSH
41177: CALL_OW 69
41181: ST_TO_ADDR
// end ;
41182: LD_VAR 0 2
41186: RET
// export function Shuffle ( array ) ; var i , index ; begin
41187: LD_INT 0
41189: PPUSH
41190: PPUSH
41191: PPUSH
// result := [ ] ;
41192: LD_ADDR_VAR 0 2
41196: PUSH
41197: EMPTY
41198: ST_TO_ADDR
// if not array then
41199: LD_VAR 0 1
41203: NOT
41204: IFFALSE 41208
// exit ;
41206: GO 41307
// Randomize ;
41208: CALL_OW 10
// for i = array downto 1 do
41212: LD_ADDR_VAR 0 3
41216: PUSH
41217: DOUBLE
41218: LD_VAR 0 1
41222: INC
41223: ST_TO_ADDR
41224: LD_INT 1
41226: PUSH
41227: FOR_DOWNTO
41228: IFFALSE 41305
// begin index := rand ( 1 , array ) ;
41230: LD_ADDR_VAR 0 4
41234: PUSH
41235: LD_INT 1
41237: PPUSH
41238: LD_VAR 0 1
41242: PPUSH
41243: CALL_OW 12
41247: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41248: LD_ADDR_VAR 0 2
41252: PUSH
41253: LD_VAR 0 2
41257: PPUSH
41258: LD_VAR 0 2
41262: PUSH
41263: LD_INT 1
41265: PLUS
41266: PPUSH
41267: LD_VAR 0 1
41271: PUSH
41272: LD_VAR 0 4
41276: ARRAY
41277: PPUSH
41278: CALL_OW 2
41282: ST_TO_ADDR
// array := Delete ( array , index ) ;
41283: LD_ADDR_VAR 0 1
41287: PUSH
41288: LD_VAR 0 1
41292: PPUSH
41293: LD_VAR 0 4
41297: PPUSH
41298: CALL_OW 3
41302: ST_TO_ADDR
// end ;
41303: GO 41227
41305: POP
41306: POP
// end ;
41307: LD_VAR 0 2
41311: RET
// export function GetBaseMaterials ( base ) ; begin
41312: LD_INT 0
41314: PPUSH
// result := [ 0 , 0 , 0 ] ;
41315: LD_ADDR_VAR 0 2
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: LIST
41333: ST_TO_ADDR
// if not base then
41334: LD_VAR 0 1
41338: NOT
41339: IFFALSE 41343
// exit ;
41341: GO 41392
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41343: LD_ADDR_VAR 0 2
41347: PUSH
41348: LD_VAR 0 1
41352: PPUSH
41353: LD_INT 1
41355: PPUSH
41356: CALL_OW 275
41360: PUSH
41361: LD_VAR 0 1
41365: PPUSH
41366: LD_INT 2
41368: PPUSH
41369: CALL_OW 275
41373: PUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: LD_INT 3
41381: PPUSH
41382: CALL_OW 275
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: ST_TO_ADDR
// end ;
41392: LD_VAR 0 2
41396: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41397: LD_INT 0
41399: PPUSH
41400: PPUSH
// result := array ;
41401: LD_ADDR_VAR 0 3
41405: PUSH
41406: LD_VAR 0 1
41410: ST_TO_ADDR
// if size >= result then
41411: LD_VAR 0 2
41415: PUSH
41416: LD_VAR 0 3
41420: GREATEREQUAL
41421: IFFALSE 41425
// exit ;
41423: GO 41475
// if size then
41425: LD_VAR 0 2
41429: IFFALSE 41475
// for i := array downto size do
41431: LD_ADDR_VAR 0 4
41435: PUSH
41436: DOUBLE
41437: LD_VAR 0 1
41441: INC
41442: ST_TO_ADDR
41443: LD_VAR 0 2
41447: PUSH
41448: FOR_DOWNTO
41449: IFFALSE 41473
// result := Delete ( result , result ) ;
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_VAR 0 3
41460: PPUSH
41461: LD_VAR 0 3
41465: PPUSH
41466: CALL_OW 3
41470: ST_TO_ADDR
41471: GO 41448
41473: POP
41474: POP
// end ;
41475: LD_VAR 0 3
41479: RET
// export function ComExit ( unit ) ; var tmp ; begin
41480: LD_INT 0
41482: PPUSH
41483: PPUSH
// if not IsInUnit ( unit ) then
41484: LD_VAR 0 1
41488: PPUSH
41489: CALL_OW 310
41493: NOT
41494: IFFALSE 41498
// exit ;
41496: GO 41558
// tmp := IsInUnit ( unit ) ;
41498: LD_ADDR_VAR 0 3
41502: PUSH
41503: LD_VAR 0 1
41507: PPUSH
41508: CALL_OW 310
41512: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41513: LD_VAR 0 3
41517: PPUSH
41518: CALL_OW 247
41522: PUSH
41523: LD_INT 2
41525: EQUAL
41526: IFFALSE 41539
// ComExitVehicle ( unit ) else
41528: LD_VAR 0 1
41532: PPUSH
41533: CALL_OW 121
41537: GO 41548
// ComExitBuilding ( unit ) ;
41539: LD_VAR 0 1
41543: PPUSH
41544: CALL_OW 122
// result := tmp ;
41548: LD_ADDR_VAR 0 2
41552: PUSH
41553: LD_VAR 0 3
41557: ST_TO_ADDR
// end ;
41558: LD_VAR 0 2
41562: RET
// export function ComExitAll ( units ) ; var i ; begin
41563: LD_INT 0
41565: PPUSH
41566: PPUSH
// if not units then
41567: LD_VAR 0 1
41571: NOT
41572: IFFALSE 41576
// exit ;
41574: GO 41602
// for i in units do
41576: LD_ADDR_VAR 0 3
41580: PUSH
41581: LD_VAR 0 1
41585: PUSH
41586: FOR_IN
41587: IFFALSE 41600
// ComExit ( i ) ;
41589: LD_VAR 0 3
41593: PPUSH
41594: CALL 41480 0 1
41598: GO 41586
41600: POP
41601: POP
// end ;
41602: LD_VAR 0 2
41606: RET
// export function ResetHc ; begin
41607: LD_INT 0
41609: PPUSH
// InitHc ;
41610: CALL_OW 19
// hc_importance := 0 ;
41614: LD_ADDR_OWVAR 32
41618: PUSH
41619: LD_INT 0
41621: ST_TO_ADDR
// end ;
41622: LD_VAR 0 1
41626: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41627: LD_INT 0
41629: PPUSH
41630: PPUSH
41631: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41632: LD_ADDR_VAR 0 6
41636: PUSH
41637: LD_VAR 0 1
41641: PUSH
41642: LD_VAR 0 3
41646: PLUS
41647: PUSH
41648: LD_INT 2
41650: DIV
41651: ST_TO_ADDR
// if _x < 0 then
41652: LD_VAR 0 6
41656: PUSH
41657: LD_INT 0
41659: LESS
41660: IFFALSE 41677
// _x := _x * - 1 ;
41662: LD_ADDR_VAR 0 6
41666: PUSH
41667: LD_VAR 0 6
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: MUL
41676: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41677: LD_ADDR_VAR 0 7
41681: PUSH
41682: LD_VAR 0 2
41686: PUSH
41687: LD_VAR 0 4
41691: PLUS
41692: PUSH
41693: LD_INT 2
41695: DIV
41696: ST_TO_ADDR
// if _y < 0 then
41697: LD_VAR 0 7
41701: PUSH
41702: LD_INT 0
41704: LESS
41705: IFFALSE 41722
// _y := _y * - 1 ;
41707: LD_ADDR_VAR 0 7
41711: PUSH
41712: LD_VAR 0 7
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: MUL
41721: ST_TO_ADDR
// result := [ _x , _y ] ;
41722: LD_ADDR_VAR 0 5
41726: PUSH
41727: LD_VAR 0 6
41731: PUSH
41732: LD_VAR 0 7
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: ST_TO_ADDR
// end ;
41741: LD_VAR 0 5
41745: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41746: LD_INT 0
41748: PPUSH
41749: PPUSH
41750: PPUSH
41751: PPUSH
// task := GetTaskList ( unit ) ;
41752: LD_ADDR_VAR 0 7
41756: PUSH
41757: LD_VAR 0 1
41761: PPUSH
41762: CALL_OW 437
41766: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41767: LD_VAR 0 7
41771: NOT
41772: IFFALSE 41791
41774: PUSH
41775: LD_VAR 0 1
41779: PPUSH
41780: LD_VAR 0 2
41784: PPUSH
41785: CALL_OW 308
41789: NOT
41790: AND
41791: IFFALSE 41795
// exit ;
41793: GO 41913
// if IsInArea ( unit , area ) then
41795: LD_VAR 0 1
41799: PPUSH
41800: LD_VAR 0 2
41804: PPUSH
41805: CALL_OW 308
41809: IFFALSE 41827
// begin ComMoveToArea ( unit , goAway ) ;
41811: LD_VAR 0 1
41815: PPUSH
41816: LD_VAR 0 3
41820: PPUSH
41821: CALL_OW 113
// exit ;
41825: GO 41913
// end ; if task [ 1 ] [ 1 ] <> M then
41827: LD_VAR 0 7
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PUSH
41836: LD_INT 1
41838: ARRAY
41839: PUSH
41840: LD_STRING M
41842: NONEQUAL
41843: IFFALSE 41847
// exit ;
41845: GO 41913
// x := task [ 1 ] [ 2 ] ;
41847: LD_ADDR_VAR 0 5
41851: PUSH
41852: LD_VAR 0 7
41856: PUSH
41857: LD_INT 1
41859: ARRAY
41860: PUSH
41861: LD_INT 2
41863: ARRAY
41864: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41865: LD_ADDR_VAR 0 6
41869: PUSH
41870: LD_VAR 0 7
41874: PUSH
41875: LD_INT 1
41877: ARRAY
41878: PUSH
41879: LD_INT 3
41881: ARRAY
41882: ST_TO_ADDR
// if InArea ( x , y , area ) then
41883: LD_VAR 0 5
41887: PPUSH
41888: LD_VAR 0 6
41892: PPUSH
41893: LD_VAR 0 2
41897: PPUSH
41898: CALL_OW 309
41902: IFFALSE 41913
// ComStop ( unit ) ;
41904: LD_VAR 0 1
41908: PPUSH
41909: CALL_OW 141
// end ;
41913: LD_VAR 0 4
41917: RET
// export function Abs ( value ) ; begin
41918: LD_INT 0
41920: PPUSH
// result := value ;
41921: LD_ADDR_VAR 0 2
41925: PUSH
41926: LD_VAR 0 1
41930: ST_TO_ADDR
// if value < 0 then
41931: LD_VAR 0 1
41935: PUSH
41936: LD_INT 0
41938: LESS
41939: IFFALSE 41956
// result := value * - 1 ;
41941: LD_ADDR_VAR 0 2
41945: PUSH
41946: LD_VAR 0 1
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: MUL
41955: ST_TO_ADDR
// end ;
41956: LD_VAR 0 2
41960: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41961: LD_INT 0
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
41968: PPUSH
41969: PPUSH
41970: PPUSH
// if not unit or not building then
41971: LD_VAR 0 1
41975: NOT
41976: IFTRUE 41985
41978: PUSH
41979: LD_VAR 0 2
41983: NOT
41984: OR
41985: IFFALSE 41989
// exit ;
41987: GO 42217
// x := GetX ( building ) ;
41989: LD_ADDR_VAR 0 4
41993: PUSH
41994: LD_VAR 0 2
41998: PPUSH
41999: CALL_OW 250
42003: ST_TO_ADDR
// y := GetY ( building ) ;
42004: LD_ADDR_VAR 0 6
42008: PUSH
42009: LD_VAR 0 2
42013: PPUSH
42014: CALL_OW 251
42018: ST_TO_ADDR
// d := GetDir ( building ) ;
42019: LD_ADDR_VAR 0 8
42023: PUSH
42024: LD_VAR 0 2
42028: PPUSH
42029: CALL_OW 254
42033: ST_TO_ADDR
// r := 4 ;
42034: LD_ADDR_VAR 0 9
42038: PUSH
42039: LD_INT 4
42041: ST_TO_ADDR
// for i := 1 to 5 do
42042: LD_ADDR_VAR 0 10
42046: PUSH
42047: DOUBLE
42048: LD_INT 1
42050: DEC
42051: ST_TO_ADDR
42052: LD_INT 5
42054: PUSH
42055: FOR_TO
42056: IFFALSE 42215
// begin _x := ShiftX ( x , d , r + i ) ;
42058: LD_ADDR_VAR 0 5
42062: PUSH
42063: LD_VAR 0 4
42067: PPUSH
42068: LD_VAR 0 8
42072: PPUSH
42073: LD_VAR 0 9
42077: PUSH
42078: LD_VAR 0 10
42082: PLUS
42083: PPUSH
42084: CALL_OW 272
42088: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42089: LD_ADDR_VAR 0 7
42093: PUSH
42094: LD_VAR 0 6
42098: PPUSH
42099: LD_VAR 0 8
42103: PPUSH
42104: LD_VAR 0 9
42108: PUSH
42109: LD_VAR 0 10
42113: PLUS
42114: PPUSH
42115: CALL_OW 273
42119: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42120: LD_VAR 0 5
42124: PPUSH
42125: LD_VAR 0 7
42129: PPUSH
42130: CALL_OW 488
42134: IFFALSE 42169
42136: PUSH
42137: LD_VAR 0 5
42141: PPUSH
42142: LD_VAR 0 7
42146: PPUSH
42147: CALL_OW 428
42151: PPUSH
42152: CALL_OW 247
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: IN
42167: NOT
42168: AND
42169: IFFALSE 42213
// begin ComMoveXY ( unit , _x , _y ) ;
42171: LD_VAR 0 1
42175: PPUSH
42176: LD_VAR 0 5
42180: PPUSH
42181: LD_VAR 0 7
42185: PPUSH
42186: CALL_OW 111
// result := [ _x , _y ] ;
42190: LD_ADDR_VAR 0 3
42194: PUSH
42195: LD_VAR 0 5
42199: PUSH
42200: LD_VAR 0 7
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: ST_TO_ADDR
// exit ;
42209: POP
42210: POP
42211: GO 42217
// end ; end ;
42213: GO 42055
42215: POP
42216: POP
// end ;
42217: LD_VAR 0 3
42221: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42222: LD_INT 0
42224: PPUSH
42225: PPUSH
42226: PPUSH
// result := 0 ;
42227: LD_ADDR_VAR 0 3
42231: PUSH
42232: LD_INT 0
42234: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42235: LD_VAR 0 1
42239: PUSH
42240: LD_INT 0
42242: LESS
42243: IFTRUE 42255
42245: PUSH
42246: LD_VAR 0 1
42250: PUSH
42251: LD_INT 8
42253: GREATER
42254: OR
42255: IFTRUE 42267
42257: PUSH
42258: LD_VAR 0 2
42262: PUSH
42263: LD_INT 0
42265: LESS
42266: OR
42267: IFTRUE 42279
42269: PUSH
42270: LD_VAR 0 2
42274: PUSH
42275: LD_INT 8
42277: GREATER
42278: OR
42279: IFFALSE 42283
// exit ;
42281: GO 42358
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42283: LD_ADDR_VAR 0 4
42287: PUSH
42288: LD_INT 22
42290: PUSH
42291: LD_VAR 0 2
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PPUSH
42300: CALL_OW 69
42304: PUSH
42305: FOR_IN
42306: IFFALSE 42356
// begin un := UnitShoot ( i ) ;
42308: LD_ADDR_VAR 0 5
42312: PUSH
42313: LD_VAR 0 4
42317: PPUSH
42318: CALL_OW 504
42322: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42323: LD_VAR 0 5
42327: PPUSH
42328: CALL_OW 255
42332: PUSH
42333: LD_VAR 0 1
42337: EQUAL
42338: IFFALSE 42354
// begin result := un ;
42340: LD_ADDR_VAR 0 3
42344: PUSH
42345: LD_VAR 0 5
42349: ST_TO_ADDR
// exit ;
42350: POP
42351: POP
42352: GO 42358
// end ; end ;
42354: GO 42305
42356: POP
42357: POP
// end ;
42358: LD_VAR 0 3
42362: RET
// export function GetCargoBay ( units ) ; begin
42363: LD_INT 0
42365: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42366: LD_ADDR_VAR 0 2
42370: PUSH
42371: LD_VAR 0 1
42375: PPUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 34
42381: PUSH
42382: LD_INT 12
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 34
42391: PUSH
42392: LD_INT 51
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 34
42401: PUSH
42402: LD_INT 32
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 34
42411: PUSH
42412: LD_INT 89
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: PPUSH
42426: CALL_OW 72
42430: ST_TO_ADDR
// end ;
42431: LD_VAR 0 2
42435: RET
// export function Negate ( value ) ; begin
42436: LD_INT 0
42438: PPUSH
// result := not value ;
42439: LD_ADDR_VAR 0 2
42443: PUSH
42444: LD_VAR 0 1
42448: NOT
42449: ST_TO_ADDR
// end ;
42450: LD_VAR 0 2
42454: RET
// export function Inc ( value ) ; begin
42455: LD_INT 0
42457: PPUSH
// result := value + 1 ;
42458: LD_ADDR_VAR 0 2
42462: PUSH
42463: LD_VAR 0 1
42467: PUSH
42468: LD_INT 1
42470: PLUS
42471: ST_TO_ADDR
// end ;
42472: LD_VAR 0 2
42476: RET
// export function Dec ( value ) ; begin
42477: LD_INT 0
42479: PPUSH
// result := value - 1 ;
42480: LD_ADDR_VAR 0 2
42484: PUSH
42485: LD_VAR 0 1
42489: PUSH
42490: LD_INT 1
42492: MINUS
42493: ST_TO_ADDR
// end ;
42494: LD_VAR 0 2
42498: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42499: LD_INT 0
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
42505: PPUSH
42506: PPUSH
42507: PPUSH
42508: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42509: LD_VAR 0 1
42513: PPUSH
42514: LD_VAR 0 2
42518: PPUSH
42519: CALL_OW 488
42523: NOT
42524: IFTRUE 42543
42526: PUSH
42527: LD_VAR 0 3
42531: PPUSH
42532: LD_VAR 0 4
42536: PPUSH
42537: CALL_OW 488
42541: NOT
42542: OR
42543: IFFALSE 42556
// begin result := - 1 ;
42545: LD_ADDR_VAR 0 5
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: ST_TO_ADDR
// exit ;
42554: GO 42791
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42556: LD_ADDR_VAR 0 12
42560: PUSH
42561: LD_VAR 0 1
42565: PPUSH
42566: LD_VAR 0 2
42570: PPUSH
42571: LD_VAR 0 3
42575: PPUSH
42576: LD_VAR 0 4
42580: PPUSH
42581: CALL 41627 0 4
42585: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42586: LD_ADDR_VAR 0 11
42590: PUSH
42591: LD_VAR 0 1
42595: PPUSH
42596: LD_VAR 0 2
42600: PPUSH
42601: LD_VAR 0 12
42605: PUSH
42606: LD_INT 1
42608: ARRAY
42609: PPUSH
42610: LD_VAR 0 12
42614: PUSH
42615: LD_INT 2
42617: ARRAY
42618: PPUSH
42619: CALL_OW 298
42623: ST_TO_ADDR
// distance := 9999 ;
42624: LD_ADDR_VAR 0 10
42628: PUSH
42629: LD_INT 9999
42631: ST_TO_ADDR
// for i := 0 to 5 do
42632: LD_ADDR_VAR 0 6
42636: PUSH
42637: DOUBLE
42638: LD_INT 0
42640: DEC
42641: ST_TO_ADDR
42642: LD_INT 5
42644: PUSH
42645: FOR_TO
42646: IFFALSE 42789
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42648: LD_ADDR_VAR 0 7
42652: PUSH
42653: LD_VAR 0 1
42657: PPUSH
42658: LD_VAR 0 6
42662: PPUSH
42663: LD_VAR 0 11
42667: PPUSH
42668: CALL_OW 272
42672: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42673: LD_ADDR_VAR 0 8
42677: PUSH
42678: LD_VAR 0 2
42682: PPUSH
42683: LD_VAR 0 6
42687: PPUSH
42688: LD_VAR 0 11
42692: PPUSH
42693: CALL_OW 273
42697: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42698: LD_VAR 0 7
42702: PPUSH
42703: LD_VAR 0 8
42707: PPUSH
42708: CALL_OW 488
42712: NOT
42713: IFFALSE 42717
// continue ;
42715: GO 42645
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42717: LD_ADDR_VAR 0 9
42721: PUSH
42722: LD_VAR 0 12
42726: PUSH
42727: LD_INT 1
42729: ARRAY
42730: PPUSH
42731: LD_VAR 0 12
42735: PUSH
42736: LD_INT 2
42738: ARRAY
42739: PPUSH
42740: LD_VAR 0 7
42744: PPUSH
42745: LD_VAR 0 8
42749: PPUSH
42750: CALL_OW 298
42754: ST_TO_ADDR
// if tmp < distance then
42755: LD_VAR 0 9
42759: PUSH
42760: LD_VAR 0 10
42764: LESS
42765: IFFALSE 42787
// begin result := i ;
42767: LD_ADDR_VAR 0 5
42771: PUSH
42772: LD_VAR 0 6
42776: ST_TO_ADDR
// distance := tmp ;
42777: LD_ADDR_VAR 0 10
42781: PUSH
42782: LD_VAR 0 9
42786: ST_TO_ADDR
// end ; end ;
42787: GO 42645
42789: POP
42790: POP
// end ;
42791: LD_VAR 0 5
42795: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42796: LD_INT 0
42798: PPUSH
42799: PPUSH
// if not driver or not IsInUnit ( driver ) then
42800: LD_VAR 0 1
42804: NOT
42805: IFTRUE 42819
42807: PUSH
42808: LD_VAR 0 1
42812: PPUSH
42813: CALL_OW 310
42817: NOT
42818: OR
42819: IFFALSE 42823
// exit ;
42821: GO 42913
// vehicle := IsInUnit ( driver ) ;
42823: LD_ADDR_VAR 0 3
42827: PUSH
42828: LD_VAR 0 1
42832: PPUSH
42833: CALL_OW 310
42837: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42838: LD_VAR 0 1
42842: PPUSH
42843: LD_STRING \
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: PUSH
42873: LD_STRING E
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_VAR 0 3
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PPUSH
42909: CALL_OW 446
// end ;
42913: LD_VAR 0 2
42917: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42918: LD_INT 0
42920: PPUSH
42921: PPUSH
// if not driver or not IsInUnit ( driver ) then
42922: LD_VAR 0 1
42926: NOT
42927: IFTRUE 42941
42929: PUSH
42930: LD_VAR 0 1
42934: PPUSH
42935: CALL_OW 310
42939: NOT
42940: OR
42941: IFFALSE 42945
// exit ;
42943: GO 43035
// vehicle := IsInUnit ( driver ) ;
42945: LD_ADDR_VAR 0 3
42949: PUSH
42950: LD_VAR 0 1
42954: PPUSH
42955: CALL_OW 310
42959: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42960: LD_VAR 0 1
42964: PPUSH
42965: LD_STRING \
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: PUSH
42995: LD_STRING E
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_VAR 0 3
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PPUSH
43031: CALL_OW 447
// end ;
43035: LD_VAR 0 2
43039: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43040: LD_INT 0
43042: PPUSH
43043: PPUSH
43044: PPUSH
// tmp := [ ] ;
43045: LD_ADDR_VAR 0 5
43049: PUSH
43050: EMPTY
43051: ST_TO_ADDR
// for i in units do
43052: LD_ADDR_VAR 0 4
43056: PUSH
43057: LD_VAR 0 1
43061: PUSH
43062: FOR_IN
43063: IFFALSE 43101
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43065: LD_ADDR_VAR 0 5
43069: PUSH
43070: LD_VAR 0 5
43074: PPUSH
43075: LD_VAR 0 5
43079: PUSH
43080: LD_INT 1
43082: PLUS
43083: PPUSH
43084: LD_VAR 0 4
43088: PPUSH
43089: CALL_OW 256
43093: PPUSH
43094: CALL_OW 2
43098: ST_TO_ADDR
43099: GO 43062
43101: POP
43102: POP
// if not tmp then
43103: LD_VAR 0 5
43107: NOT
43108: IFFALSE 43112
// exit ;
43110: GO 43160
// if asc then
43112: LD_VAR 0 2
43116: IFFALSE 43140
// result := SortListByListAsc ( units , tmp ) else
43118: LD_ADDR_VAR 0 3
43122: PUSH
43123: LD_VAR 0 1
43127: PPUSH
43128: LD_VAR 0 5
43132: PPUSH
43133: CALL_OW 76
43137: ST_TO_ADDR
43138: GO 43160
// result := SortListByListDesc ( units , tmp ) ;
43140: LD_ADDR_VAR 0 3
43144: PUSH
43145: LD_VAR 0 1
43149: PPUSH
43150: LD_VAR 0 5
43154: PPUSH
43155: CALL_OW 77
43159: ST_TO_ADDR
// end ;
43160: LD_VAR 0 3
43164: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43165: LD_INT 0
43167: PPUSH
43168: PPUSH
// task := GetTaskList ( mech ) ;
43169: LD_ADDR_VAR 0 4
43173: PUSH
43174: LD_VAR 0 1
43178: PPUSH
43179: CALL_OW 437
43183: ST_TO_ADDR
// if not task then
43184: LD_VAR 0 4
43188: NOT
43189: IFFALSE 43193
// exit ;
43191: GO 43237
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43193: LD_ADDR_VAR 0 3
43197: PUSH
43198: LD_VAR 0 4
43202: PUSH
43203: LD_INT 1
43205: ARRAY
43206: PUSH
43207: LD_INT 1
43209: ARRAY
43210: PUSH
43211: LD_STRING r
43213: EQUAL
43214: IFFALSE 43236
43216: PUSH
43217: LD_VAR 0 4
43221: PUSH
43222: LD_INT 1
43224: ARRAY
43225: PUSH
43226: LD_INT 4
43228: ARRAY
43229: PUSH
43230: LD_VAR 0 2
43234: EQUAL
43235: AND
43236: ST_TO_ADDR
// end ;
43237: LD_VAR 0 3
43241: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43242: LD_INT 0
43244: PPUSH
// SetDir ( unit , d ) ;
43245: LD_VAR 0 1
43249: PPUSH
43250: LD_VAR 0 4
43254: PPUSH
43255: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43259: LD_ADDR_VAR 0 6
43263: PUSH
43264: LD_VAR 0 1
43268: PPUSH
43269: LD_VAR 0 2
43273: PPUSH
43274: LD_VAR 0 3
43278: PPUSH
43279: LD_VAR 0 5
43283: PPUSH
43284: CALL_OW 48
43288: ST_TO_ADDR
// end ;
43289: LD_VAR 0 6
43293: RET
// export function ToNaturalNumber ( number ) ; begin
43294: LD_INT 0
43296: PPUSH
// result := number div 1 ;
43297: LD_ADDR_VAR 0 2
43301: PUSH
43302: LD_VAR 0 1
43306: PUSH
43307: LD_INT 1
43309: DIV
43310: ST_TO_ADDR
// if number < 0 then
43311: LD_VAR 0 1
43315: PUSH
43316: LD_INT 0
43318: LESS
43319: IFFALSE 43329
// result := 0 ;
43321: LD_ADDR_VAR 0 2
43325: PUSH
43326: LD_INT 0
43328: ST_TO_ADDR
// end ;
43329: LD_VAR 0 2
43333: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43334: LD_INT 0
43336: PPUSH
43337: PPUSH
43338: PPUSH
// if not buildings then
43339: LD_VAR 0 1
43343: NOT
43344: IFFALSE 43348
// exit ;
43346: GO 43463
// tmp := [ ] ;
43348: LD_ADDR_VAR 0 5
43352: PUSH
43353: EMPTY
43354: ST_TO_ADDR
// for b in buildings do
43355: LD_ADDR_VAR 0 4
43359: PUSH
43360: LD_VAR 0 1
43364: PUSH
43365: FOR_IN
43366: IFFALSE 43404
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43368: LD_ADDR_VAR 0 5
43372: PUSH
43373: LD_VAR 0 5
43377: PPUSH
43378: LD_VAR 0 5
43382: PUSH
43383: LD_INT 1
43385: PLUS
43386: PPUSH
43387: LD_VAR 0 4
43391: PPUSH
43392: CALL_OW 266
43396: PPUSH
43397: CALL_OW 1
43401: ST_TO_ADDR
43402: GO 43365
43404: POP
43405: POP
// if not tmp then
43406: LD_VAR 0 5
43410: NOT
43411: IFFALSE 43415
// exit ;
43413: GO 43463
// if asc then
43415: LD_VAR 0 2
43419: IFFALSE 43443
// result := SortListByListAsc ( buildings , tmp ) else
43421: LD_ADDR_VAR 0 3
43425: PUSH
43426: LD_VAR 0 1
43430: PPUSH
43431: LD_VAR 0 5
43435: PPUSH
43436: CALL_OW 76
43440: ST_TO_ADDR
43441: GO 43463
// result := SortListByListDesc ( buildings , tmp ) ;
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_VAR 0 1
43452: PPUSH
43453: LD_VAR 0 5
43457: PPUSH
43458: CALL_OW 77
43462: ST_TO_ADDR
// end ;
43463: LD_VAR 0 3
43467: RET
// export function SortByClass ( units , class ) ; var un ; begin
43468: LD_INT 0
43470: PPUSH
43471: PPUSH
// if not units or not class then
43472: LD_VAR 0 1
43476: NOT
43477: IFTRUE 43486
43479: PUSH
43480: LD_VAR 0 2
43484: NOT
43485: OR
43486: IFFALSE 43490
// exit ;
43488: GO 43585
// result := [ ] ;
43490: LD_ADDR_VAR 0 3
43494: PUSH
43495: EMPTY
43496: ST_TO_ADDR
// for un in units do
43497: LD_ADDR_VAR 0 4
43501: PUSH
43502: LD_VAR 0 1
43506: PUSH
43507: FOR_IN
43508: IFFALSE 43583
// if GetClass ( un ) = class then
43510: LD_VAR 0 4
43514: PPUSH
43515: CALL_OW 257
43519: PUSH
43520: LD_VAR 0 2
43524: EQUAL
43525: IFFALSE 43552
// result := Insert ( result , 1 , un ) else
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: LD_VAR 0 3
43536: PPUSH
43537: LD_INT 1
43539: PPUSH
43540: LD_VAR 0 4
43544: PPUSH
43545: CALL_OW 2
43549: ST_TO_ADDR
43550: GO 43581
// result := Replace ( result , result + 1 , un ) ;
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: LD_VAR 0 3
43561: PPUSH
43562: LD_VAR 0 3
43566: PUSH
43567: LD_INT 1
43569: PLUS
43570: PPUSH
43571: LD_VAR 0 4
43575: PPUSH
43576: CALL_OW 1
43580: ST_TO_ADDR
43581: GO 43507
43583: POP
43584: POP
// end ;
43585: LD_VAR 0 3
43589: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43590: LD_INT 0
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
// result := [ ] ;
43599: LD_ADDR_VAR 0 4
43603: PUSH
43604: EMPTY
43605: ST_TO_ADDR
// if x - r < 0 then
43606: LD_VAR 0 1
43610: PUSH
43611: LD_VAR 0 3
43615: MINUS
43616: PUSH
43617: LD_INT 0
43619: LESS
43620: IFFALSE 43632
// min_x := 0 else
43622: LD_ADDR_VAR 0 8
43626: PUSH
43627: LD_INT 0
43629: ST_TO_ADDR
43630: GO 43648
// min_x := x - r ;
43632: LD_ADDR_VAR 0 8
43636: PUSH
43637: LD_VAR 0 1
43641: PUSH
43642: LD_VAR 0 3
43646: MINUS
43647: ST_TO_ADDR
// if y - r < 0 then
43648: LD_VAR 0 2
43652: PUSH
43653: LD_VAR 0 3
43657: MINUS
43658: PUSH
43659: LD_INT 0
43661: LESS
43662: IFFALSE 43674
// min_y := 0 else
43664: LD_ADDR_VAR 0 7
43668: PUSH
43669: LD_INT 0
43671: ST_TO_ADDR
43672: GO 43690
// min_y := y - r ;
43674: LD_ADDR_VAR 0 7
43678: PUSH
43679: LD_VAR 0 2
43683: PUSH
43684: LD_VAR 0 3
43688: MINUS
43689: ST_TO_ADDR
// max_x := x + r ;
43690: LD_ADDR_VAR 0 9
43694: PUSH
43695: LD_VAR 0 1
43699: PUSH
43700: LD_VAR 0 3
43704: PLUS
43705: ST_TO_ADDR
// max_y := y + r ;
43706: LD_ADDR_VAR 0 10
43710: PUSH
43711: LD_VAR 0 2
43715: PUSH
43716: LD_VAR 0 3
43720: PLUS
43721: ST_TO_ADDR
// for _x = min_x to max_x do
43722: LD_ADDR_VAR 0 5
43726: PUSH
43727: DOUBLE
43728: LD_VAR 0 8
43732: DEC
43733: ST_TO_ADDR
43734: LD_VAR 0 9
43738: PUSH
43739: FOR_TO
43740: IFFALSE 43841
// for _y = min_y to max_y do
43742: LD_ADDR_VAR 0 6
43746: PUSH
43747: DOUBLE
43748: LD_VAR 0 7
43752: DEC
43753: ST_TO_ADDR
43754: LD_VAR 0 10
43758: PUSH
43759: FOR_TO
43760: IFFALSE 43837
// begin if not ValidHex ( _x , _y ) then
43762: LD_VAR 0 5
43766: PPUSH
43767: LD_VAR 0 6
43771: PPUSH
43772: CALL_OW 488
43776: NOT
43777: IFFALSE 43781
// continue ;
43779: GO 43759
// if GetResourceTypeXY ( _x , _y ) then
43781: LD_VAR 0 5
43785: PPUSH
43786: LD_VAR 0 6
43790: PPUSH
43791: CALL_OW 283
43795: IFFALSE 43835
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43797: LD_ADDR_VAR 0 4
43801: PUSH
43802: LD_VAR 0 4
43806: PPUSH
43807: LD_VAR 0 4
43811: PUSH
43812: LD_INT 1
43814: PLUS
43815: PPUSH
43816: LD_VAR 0 5
43820: PUSH
43821: LD_VAR 0 6
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PPUSH
43830: CALL_OW 1
43834: ST_TO_ADDR
// end ;
43835: GO 43759
43837: POP
43838: POP
43839: GO 43739
43841: POP
43842: POP
// end ;
43843: LD_VAR 0 4
43847: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43848: LD_INT 0
43850: PPUSH
43851: PPUSH
43852: PPUSH
43853: PPUSH
43854: PPUSH
43855: PPUSH
43856: PPUSH
43857: PPUSH
// if not units then
43858: LD_VAR 0 1
43862: NOT
43863: IFFALSE 43867
// exit ;
43865: GO 44399
// result := UnitFilter ( units , [ f_ok ] ) ;
43867: LD_ADDR_VAR 0 3
43871: PUSH
43872: LD_VAR 0 1
43876: PPUSH
43877: LD_INT 50
43879: PUSH
43880: EMPTY
43881: LIST
43882: PPUSH
43883: CALL_OW 72
43887: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43888: LD_ADDR_VAR 0 8
43892: PUSH
43893: LD_VAR 0 1
43897: PUSH
43898: LD_INT 1
43900: ARRAY
43901: PPUSH
43902: CALL_OW 255
43906: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43907: LD_ADDR_VAR 0 10
43911: PUSH
43912: LD_INT 29
43914: PUSH
43915: LD_INT 91
43917: PUSH
43918: LD_INT 49
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: ST_TO_ADDR
// if not result then
43926: LD_VAR 0 3
43930: NOT
43931: IFFALSE 43935
// exit ;
43933: GO 44399
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43935: LD_ADDR_VAR 0 5
43939: PUSH
43940: LD_INT 81
43942: PUSH
43943: LD_VAR 0 8
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PPUSH
43952: CALL_OW 69
43956: ST_TO_ADDR
// for i in result do
43957: LD_ADDR_VAR 0 4
43961: PUSH
43962: LD_VAR 0 3
43966: PUSH
43967: FOR_IN
43968: IFFALSE 44397
// begin tag := GetTag ( i ) + 1 ;
43970: LD_ADDR_VAR 0 9
43974: PUSH
43975: LD_VAR 0 4
43979: PPUSH
43980: CALL_OW 110
43984: PUSH
43985: LD_INT 1
43987: PLUS
43988: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43989: LD_ADDR_VAR 0 7
43993: PUSH
43994: LD_VAR 0 4
43998: PPUSH
43999: CALL_OW 250
44003: PPUSH
44004: LD_VAR 0 4
44008: PPUSH
44009: CALL_OW 251
44013: PPUSH
44014: LD_INT 4
44016: PPUSH
44017: CALL 43590 0 3
44021: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44022: LD_VAR 0 4
44026: PPUSH
44027: CALL_OW 247
44031: PUSH
44032: LD_INT 2
44034: EQUAL
44035: IFFALSE 44047
44037: PUSH
44038: LD_VAR 0 7
44042: PUSH
44043: LD_INT 2
44045: GREATER
44046: AND
44047: IFFALSE 44067
44049: PUSH
44050: LD_VAR 0 4
44054: PPUSH
44055: CALL_OW 264
44059: PUSH
44060: LD_VAR 0 10
44064: IN
44065: NOT
44066: AND
44067: IFFALSE 44106
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44069: LD_VAR 0 4
44073: PPUSH
44074: LD_VAR 0 7
44078: PUSH
44079: LD_INT 1
44081: ARRAY
44082: PUSH
44083: LD_INT 1
44085: ARRAY
44086: PPUSH
44087: LD_VAR 0 7
44091: PUSH
44092: LD_INT 1
44094: ARRAY
44095: PUSH
44096: LD_INT 2
44098: ARRAY
44099: PPUSH
44100: CALL_OW 116
44104: GO 44395
// if path > tag then
44106: LD_VAR 0 2
44110: PUSH
44111: LD_VAR 0 9
44115: GREATER
44116: IFFALSE 44324
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44118: LD_ADDR_VAR 0 6
44122: PUSH
44123: LD_VAR 0 5
44127: PPUSH
44128: LD_INT 91
44130: PUSH
44131: LD_VAR 0 4
44135: PUSH
44136: LD_INT 8
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: PPUSH
44144: CALL_OW 72
44148: ST_TO_ADDR
// if nearEnemy then
44149: LD_VAR 0 6
44153: IFFALSE 44222
// begin if GetWeapon ( i ) = ru_time_lapser then
44155: LD_VAR 0 4
44159: PPUSH
44160: CALL_OW 264
44164: PUSH
44165: LD_INT 49
44167: EQUAL
44168: IFFALSE 44196
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44170: LD_VAR 0 4
44174: PPUSH
44175: LD_VAR 0 6
44179: PPUSH
44180: LD_VAR 0 4
44184: PPUSH
44185: CALL_OW 74
44189: PPUSH
44190: CALL_OW 112
44194: GO 44220
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44196: LD_VAR 0 4
44200: PPUSH
44201: LD_VAR 0 6
44205: PPUSH
44206: LD_VAR 0 4
44210: PPUSH
44211: CALL_OW 74
44215: PPUSH
44216: CALL 45480 0 2
// end else
44220: GO 44322
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44222: LD_VAR 0 4
44226: PPUSH
44227: LD_VAR 0 2
44231: PUSH
44232: LD_VAR 0 9
44236: ARRAY
44237: PUSH
44238: LD_INT 1
44240: ARRAY
44241: PPUSH
44242: LD_VAR 0 2
44246: PUSH
44247: LD_VAR 0 9
44251: ARRAY
44252: PUSH
44253: LD_INT 2
44255: ARRAY
44256: PPUSH
44257: CALL_OW 297
44261: PUSH
44262: LD_INT 6
44264: GREATER
44265: IFFALSE 44308
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44267: LD_VAR 0 4
44271: PPUSH
44272: LD_VAR 0 2
44276: PUSH
44277: LD_VAR 0 9
44281: ARRAY
44282: PUSH
44283: LD_INT 1
44285: ARRAY
44286: PPUSH
44287: LD_VAR 0 2
44291: PUSH
44292: LD_VAR 0 9
44296: ARRAY
44297: PUSH
44298: LD_INT 2
44300: ARRAY
44301: PPUSH
44302: CALL_OW 114
44306: GO 44322
// SetTag ( i , tag ) ;
44308: LD_VAR 0 4
44312: PPUSH
44313: LD_VAR 0 9
44317: PPUSH
44318: CALL_OW 109
// end else
44322: GO 44395
// if enemy then
44324: LD_VAR 0 5
44328: IFFALSE 44395
// begin if GetWeapon ( i ) = ru_time_lapser then
44330: LD_VAR 0 4
44334: PPUSH
44335: CALL_OW 264
44339: PUSH
44340: LD_INT 49
44342: EQUAL
44343: IFFALSE 44371
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44345: LD_VAR 0 4
44349: PPUSH
44350: LD_VAR 0 5
44354: PPUSH
44355: LD_VAR 0 4
44359: PPUSH
44360: CALL_OW 74
44364: PPUSH
44365: CALL_OW 112
44369: GO 44395
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44371: LD_VAR 0 4
44375: PPUSH
44376: LD_VAR 0 5
44380: PPUSH
44381: LD_VAR 0 4
44385: PPUSH
44386: CALL_OW 74
44390: PPUSH
44391: CALL 45480 0 2
// end ; end ;
44395: GO 43967
44397: POP
44398: POP
// end ;
44399: LD_VAR 0 3
44403: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44404: LD_INT 0
44406: PPUSH
44407: PPUSH
44408: PPUSH
// if not unit or IsInUnit ( unit ) then
44409: LD_VAR 0 1
44413: NOT
44414: IFTRUE 44427
44416: PUSH
44417: LD_VAR 0 1
44421: PPUSH
44422: CALL_OW 310
44426: OR
44427: IFFALSE 44431
// exit ;
44429: GO 44522
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44431: LD_ADDR_VAR 0 4
44435: PUSH
44436: LD_VAR 0 1
44440: PPUSH
44441: CALL_OW 250
44445: PPUSH
44446: LD_VAR 0 2
44450: PPUSH
44451: LD_INT 1
44453: PPUSH
44454: CALL_OW 272
44458: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44459: LD_ADDR_VAR 0 5
44463: PUSH
44464: LD_VAR 0 1
44468: PPUSH
44469: CALL_OW 251
44473: PPUSH
44474: LD_VAR 0 2
44478: PPUSH
44479: LD_INT 1
44481: PPUSH
44482: CALL_OW 273
44486: ST_TO_ADDR
// if ValidHex ( x , y ) then
44487: LD_VAR 0 4
44491: PPUSH
44492: LD_VAR 0 5
44496: PPUSH
44497: CALL_OW 488
44501: IFFALSE 44522
// ComTurnXY ( unit , x , y ) ;
44503: LD_VAR 0 1
44507: PPUSH
44508: LD_VAR 0 4
44512: PPUSH
44513: LD_VAR 0 5
44517: PPUSH
44518: CALL_OW 118
// end ;
44522: LD_VAR 0 3
44526: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44527: LD_INT 0
44529: PPUSH
44530: PPUSH
// result := false ;
44531: LD_ADDR_VAR 0 3
44535: PUSH
44536: LD_INT 0
44538: ST_TO_ADDR
// if not units then
44539: LD_VAR 0 2
44543: NOT
44544: IFFALSE 44548
// exit ;
44546: GO 44593
// for i in units do
44548: LD_ADDR_VAR 0 4
44552: PUSH
44553: LD_VAR 0 2
44557: PUSH
44558: FOR_IN
44559: IFFALSE 44591
// if See ( side , i ) then
44561: LD_VAR 0 1
44565: PPUSH
44566: LD_VAR 0 4
44570: PPUSH
44571: CALL_OW 292
44575: IFFALSE 44589
// begin result := true ;
44577: LD_ADDR_VAR 0 3
44581: PUSH
44582: LD_INT 1
44584: ST_TO_ADDR
// exit ;
44585: POP
44586: POP
44587: GO 44593
// end ;
44589: GO 44558
44591: POP
44592: POP
// end ;
44593: LD_VAR 0 3
44597: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44598: LD_INT 0
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
// if not unit or not points then
44604: LD_VAR 0 1
44608: NOT
44609: IFTRUE 44618
44611: PUSH
44612: LD_VAR 0 2
44616: NOT
44617: OR
44618: IFFALSE 44622
// exit ;
44620: GO 44712
// dist := 99999 ;
44622: LD_ADDR_VAR 0 5
44626: PUSH
44627: LD_INT 99999
44629: ST_TO_ADDR
// for i in points do
44630: LD_ADDR_VAR 0 4
44634: PUSH
44635: LD_VAR 0 2
44639: PUSH
44640: FOR_IN
44641: IFFALSE 44710
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44643: LD_ADDR_VAR 0 6
44647: PUSH
44648: LD_VAR 0 1
44652: PPUSH
44653: LD_VAR 0 4
44657: PUSH
44658: LD_INT 1
44660: ARRAY
44661: PPUSH
44662: LD_VAR 0 4
44666: PUSH
44667: LD_INT 2
44669: ARRAY
44670: PPUSH
44671: CALL_OW 297
44675: ST_TO_ADDR
// if tmpDist < dist then
44676: LD_VAR 0 6
44680: PUSH
44681: LD_VAR 0 5
44685: LESS
44686: IFFALSE 44708
// begin result := i ;
44688: LD_ADDR_VAR 0 3
44692: PUSH
44693: LD_VAR 0 4
44697: ST_TO_ADDR
// dist := tmpDist ;
44698: LD_ADDR_VAR 0 5
44702: PUSH
44703: LD_VAR 0 6
44707: ST_TO_ADDR
// end ; end ;
44708: GO 44640
44710: POP
44711: POP
// end ;
44712: LD_VAR 0 3
44716: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44717: LD_INT 0
44719: PPUSH
// uc_side := side ;
44720: LD_ADDR_OWVAR 20
44724: PUSH
44725: LD_VAR 0 1
44729: ST_TO_ADDR
// uc_nation := 3 ;
44730: LD_ADDR_OWVAR 21
44734: PUSH
44735: LD_INT 3
44737: ST_TO_ADDR
// vc_chassis := 25 ;
44738: LD_ADDR_OWVAR 37
44742: PUSH
44743: LD_INT 25
44745: ST_TO_ADDR
// vc_engine := engine_siberite ;
44746: LD_ADDR_OWVAR 39
44750: PUSH
44751: LD_INT 3
44753: ST_TO_ADDR
// vc_control := control_computer ;
44754: LD_ADDR_OWVAR 38
44758: PUSH
44759: LD_INT 3
44761: ST_TO_ADDR
// vc_weapon := 59 ;
44762: LD_ADDR_OWVAR 40
44766: PUSH
44767: LD_INT 59
44769: ST_TO_ADDR
// result := CreateVehicle ;
44770: LD_ADDR_VAR 0 5
44774: PUSH
44775: CALL_OW 45
44779: ST_TO_ADDR
// SetDir ( result , d ) ;
44780: LD_VAR 0 5
44784: PPUSH
44785: LD_VAR 0 4
44789: PPUSH
44790: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44794: LD_VAR 0 5
44798: PPUSH
44799: LD_VAR 0 2
44803: PPUSH
44804: LD_VAR 0 3
44808: PPUSH
44809: LD_INT 0
44811: PPUSH
44812: CALL_OW 48
// end ;
44816: LD_VAR 0 5
44820: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44821: LD_INT 0
44823: PPUSH
44824: PPUSH
44825: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44826: LD_ADDR_VAR 0 2
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44849: LD_VAR 0 1
44853: NOT
44854: IFTRUE 44887
44856: PUSH
44857: LD_VAR 0 1
44861: PPUSH
44862: CALL_OW 264
44866: PUSH
44867: LD_INT 12
44869: PUSH
44870: LD_INT 51
44872: PUSH
44873: LD_INT 32
44875: PUSH
44876: LD_INT 89
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: IN
44885: NOT
44886: OR
44887: IFFALSE 44891
// exit ;
44889: GO 44989
// for i := 1 to 3 do
44891: LD_ADDR_VAR 0 3
44895: PUSH
44896: DOUBLE
44897: LD_INT 1
44899: DEC
44900: ST_TO_ADDR
44901: LD_INT 3
44903: PUSH
44904: FOR_TO
44905: IFFALSE 44987
// begin tmp := GetCargo ( cargo , i ) ;
44907: LD_ADDR_VAR 0 4
44911: PUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: LD_VAR 0 3
44921: PPUSH
44922: CALL_OW 289
44926: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44927: LD_ADDR_VAR 0 2
44931: PUSH
44932: LD_VAR 0 2
44936: PPUSH
44937: LD_VAR 0 3
44941: PPUSH
44942: LD_VAR 0 4
44946: PPUSH
44947: CALL_OW 1
44951: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44952: LD_ADDR_VAR 0 2
44956: PUSH
44957: LD_VAR 0 2
44961: PPUSH
44962: LD_INT 4
44964: PPUSH
44965: LD_VAR 0 2
44969: PUSH
44970: LD_INT 4
44972: ARRAY
44973: PUSH
44974: LD_VAR 0 4
44978: PLUS
44979: PPUSH
44980: CALL_OW 1
44984: ST_TO_ADDR
// end ;
44985: GO 44904
44987: POP
44988: POP
// end ;
44989: LD_VAR 0 2
44993: RET
// export function Length ( array ) ; begin
44994: LD_INT 0
44996: PPUSH
// result := array + 0 ;
44997: LD_ADDR_VAR 0 2
45001: PUSH
45002: LD_VAR 0 1
45006: PUSH
45007: LD_INT 0
45009: PLUS
45010: ST_TO_ADDR
// end ;
45011: LD_VAR 0 2
45015: RET
// export function PrepareArray ( array ) ; begin
45016: LD_INT 0
45018: PPUSH
// result := array diff 0 ;
45019: LD_ADDR_VAR 0 2
45023: PUSH
45024: LD_VAR 0 1
45028: PUSH
45029: LD_INT 0
45031: DIFF
45032: ST_TO_ADDR
// if not result [ 1 ] then
45033: LD_VAR 0 2
45037: PUSH
45038: LD_INT 1
45040: ARRAY
45041: NOT
45042: IFFALSE 45062
// result := Delete ( result , 1 ) ;
45044: LD_ADDR_VAR 0 2
45048: PUSH
45049: LD_VAR 0 2
45053: PPUSH
45054: LD_INT 1
45056: PPUSH
45057: CALL_OW 3
45061: ST_TO_ADDR
// end ;
45062: LD_VAR 0 2
45066: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45067: LD_INT 0
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
// sibRocketRange := 25 ;
45073: LD_ADDR_VAR 0 6
45077: PUSH
45078: LD_INT 25
45080: ST_TO_ADDR
// result := false ;
45081: LD_ADDR_VAR 0 4
45085: PUSH
45086: LD_INT 0
45088: ST_TO_ADDR
// for i := 0 to 5 do
45089: LD_ADDR_VAR 0 5
45093: PUSH
45094: DOUBLE
45095: LD_INT 0
45097: DEC
45098: ST_TO_ADDR
45099: LD_INT 5
45101: PUSH
45102: FOR_TO
45103: IFFALSE 45170
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45105: LD_VAR 0 1
45109: PPUSH
45110: LD_VAR 0 5
45114: PPUSH
45115: LD_VAR 0 6
45119: PPUSH
45120: CALL_OW 272
45124: PPUSH
45125: LD_VAR 0 2
45129: PPUSH
45130: LD_VAR 0 5
45134: PPUSH
45135: LD_VAR 0 6
45139: PPUSH
45140: CALL_OW 273
45144: PPUSH
45145: LD_VAR 0 3
45149: PPUSH
45150: CALL_OW 309
45154: IFFALSE 45168
// begin result := true ;
45156: LD_ADDR_VAR 0 4
45160: PUSH
45161: LD_INT 1
45163: ST_TO_ADDR
// exit ;
45164: POP
45165: POP
45166: GO 45172
// end ;
45168: GO 45102
45170: POP
45171: POP
// end ;
45172: LD_VAR 0 4
45176: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45177: LD_INT 0
45179: PPUSH
45180: PPUSH
45181: PPUSH
// if btype = b_depot then
45182: LD_VAR 0 2
45186: PUSH
45187: LD_INT 0
45189: EQUAL
45190: IFFALSE 45202
// begin result := true ;
45192: LD_ADDR_VAR 0 3
45196: PUSH
45197: LD_INT 1
45199: ST_TO_ADDR
// exit ;
45200: GO 45322
// end ; pom := GetBase ( depot ) ;
45202: LD_ADDR_VAR 0 4
45206: PUSH
45207: LD_VAR 0 1
45211: PPUSH
45212: CALL_OW 274
45216: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45217: LD_ADDR_VAR 0 5
45221: PUSH
45222: LD_VAR 0 2
45226: PPUSH
45227: LD_VAR 0 1
45231: PPUSH
45232: CALL_OW 248
45236: PPUSH
45237: CALL_OW 450
45241: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45242: LD_ADDR_VAR 0 3
45246: PUSH
45247: LD_VAR 0 4
45251: PPUSH
45252: LD_INT 1
45254: PPUSH
45255: CALL_OW 275
45259: PUSH
45260: LD_VAR 0 5
45264: PUSH
45265: LD_INT 1
45267: ARRAY
45268: GREATEREQUAL
45269: IFFALSE 45295
45271: PUSH
45272: LD_VAR 0 4
45276: PPUSH
45277: LD_INT 2
45279: PPUSH
45280: CALL_OW 275
45284: PUSH
45285: LD_VAR 0 5
45289: PUSH
45290: LD_INT 2
45292: ARRAY
45293: GREATEREQUAL
45294: AND
45295: IFFALSE 45321
45297: PUSH
45298: LD_VAR 0 4
45302: PPUSH
45303: LD_INT 3
45305: PPUSH
45306: CALL_OW 275
45310: PUSH
45311: LD_VAR 0 5
45315: PUSH
45316: LD_INT 3
45318: ARRAY
45319: GREATEREQUAL
45320: AND
45321: ST_TO_ADDR
// end ;
45322: LD_VAR 0 3
45326: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45327: LD_INT 0
45329: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45330: LD_VAR 0 1
45334: PPUSH
45335: LD_VAR 0 2
45339: PPUSH
45340: LD_INT 0
45342: PPUSH
45343: LD_INT 0
45345: PPUSH
45346: LD_INT 1
45348: PPUSH
45349: LD_INT 0
45351: PPUSH
45352: CALL_OW 587
// end ;
45356: LD_VAR 0 3
45360: RET
// export function CenterOnNow ( unit ) ; begin
45361: LD_INT 0
45363: PPUSH
// result := IsInUnit ( unit ) ;
45364: LD_ADDR_VAR 0 2
45368: PUSH
45369: LD_VAR 0 1
45373: PPUSH
45374: CALL_OW 310
45378: ST_TO_ADDR
// if not result then
45379: LD_VAR 0 2
45383: NOT
45384: IFFALSE 45396
// result := unit ;
45386: LD_ADDR_VAR 0 2
45390: PUSH
45391: LD_VAR 0 1
45395: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45396: LD_VAR 0 1
45400: PPUSH
45401: CALL_OW 87
// end ;
45405: LD_VAR 0 2
45409: RET
// export function ComMoveHex ( unit , hex ) ; begin
45410: LD_INT 0
45412: PPUSH
// if not hex then
45413: LD_VAR 0 2
45417: NOT
45418: IFFALSE 45422
// exit ;
45420: GO 45475
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45422: LD_VAR 0 2
45426: PUSH
45427: LD_INT 1
45429: ARRAY
45430: PPUSH
45431: LD_VAR 0 2
45435: PUSH
45436: LD_INT 2
45438: ARRAY
45439: PPUSH
45440: CALL_OW 428
45444: IFFALSE 45448
// exit ;
45446: GO 45475
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45448: LD_VAR 0 1
45452: PPUSH
45453: LD_VAR 0 2
45457: PUSH
45458: LD_INT 1
45460: ARRAY
45461: PPUSH
45462: LD_VAR 0 2
45466: PUSH
45467: LD_INT 2
45469: ARRAY
45470: PPUSH
45471: CALL_OW 111
// end ;
45475: LD_VAR 0 3
45479: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45480: LD_INT 0
45482: PPUSH
45483: PPUSH
45484: PPUSH
// if not unit or not enemy then
45485: LD_VAR 0 1
45489: NOT
45490: IFTRUE 45499
45492: PUSH
45493: LD_VAR 0 2
45497: NOT
45498: OR
45499: IFFALSE 45503
// exit ;
45501: GO 45629
// x := GetX ( enemy ) ;
45503: LD_ADDR_VAR 0 4
45507: PUSH
45508: LD_VAR 0 2
45512: PPUSH
45513: CALL_OW 250
45517: ST_TO_ADDR
// y := GetY ( enemy ) ;
45518: LD_ADDR_VAR 0 5
45522: PUSH
45523: LD_VAR 0 2
45527: PPUSH
45528: CALL_OW 251
45532: ST_TO_ADDR
// if ValidHex ( x , y ) then
45533: LD_VAR 0 4
45537: PPUSH
45538: LD_VAR 0 5
45542: PPUSH
45543: CALL_OW 488
45547: IFFALSE 45629
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45549: LD_VAR 0 2
45553: PPUSH
45554: CALL_OW 247
45558: PUSH
45559: LD_INT 3
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: IN
45569: IFTRUE 45592
45571: PUSH
45572: LD_VAR 0 1
45576: PPUSH
45577: CALL_OW 255
45581: PPUSH
45582: LD_VAR 0 2
45586: PPUSH
45587: CALL_OW 292
45591: OR
45592: IFFALSE 45610
// ComAttackUnit ( unit , enemy ) else
45594: LD_VAR 0 1
45598: PPUSH
45599: LD_VAR 0 2
45603: PPUSH
45604: CALL_OW 115
45608: GO 45629
// ComAgressiveMove ( unit , x , y ) ;
45610: LD_VAR 0 1
45614: PPUSH
45615: LD_VAR 0 4
45619: PPUSH
45620: LD_VAR 0 5
45624: PPUSH
45625: CALL_OW 114
// end ;
45629: LD_VAR 0 3
45633: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45634: LD_INT 0
45636: PPUSH
45637: PPUSH
45638: PPUSH
// list := AreaToList ( area , 0 ) ;
45639: LD_ADDR_VAR 0 5
45643: PUSH
45644: LD_VAR 0 1
45648: PPUSH
45649: LD_INT 0
45651: PPUSH
45652: CALL_OW 517
45656: ST_TO_ADDR
// if not list then
45657: LD_VAR 0 5
45661: NOT
45662: IFFALSE 45666
// exit ;
45664: GO 45796
// if all then
45666: LD_VAR 0 2
45670: IFFALSE 45758
// begin for i := 1 to list [ 1 ] do
45672: LD_ADDR_VAR 0 4
45676: PUSH
45677: DOUBLE
45678: LD_INT 1
45680: DEC
45681: ST_TO_ADDR
45682: LD_VAR 0 5
45686: PUSH
45687: LD_INT 1
45689: ARRAY
45690: PUSH
45691: FOR_TO
45692: IFFALSE 45754
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45694: LD_ADDR_VAR 0 3
45698: PUSH
45699: LD_VAR 0 3
45703: PPUSH
45704: LD_VAR 0 3
45708: PUSH
45709: LD_INT 1
45711: PLUS
45712: PPUSH
45713: LD_VAR 0 5
45717: PUSH
45718: LD_INT 1
45720: ARRAY
45721: PUSH
45722: LD_VAR 0 4
45726: ARRAY
45727: PUSH
45728: LD_VAR 0 5
45732: PUSH
45733: LD_INT 2
45735: ARRAY
45736: PUSH
45737: LD_VAR 0 4
45741: ARRAY
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PPUSH
45747: CALL_OW 1
45751: ST_TO_ADDR
45752: GO 45691
45754: POP
45755: POP
// exit ;
45756: GO 45796
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45758: LD_ADDR_VAR 0 3
45762: PUSH
45763: LD_VAR 0 5
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: PUSH
45772: LD_INT 1
45774: ARRAY
45775: PUSH
45776: LD_VAR 0 5
45780: PUSH
45781: LD_INT 2
45783: ARRAY
45784: PUSH
45785: LD_INT 1
45787: ARRAY
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: EMPTY
45794: LIST
45795: ST_TO_ADDR
// end ;
45796: LD_VAR 0 3
45800: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45801: LD_INT 0
45803: PPUSH
45804: PPUSH
// list := AreaToList ( area , 0 ) ;
45805: LD_ADDR_VAR 0 4
45809: PUSH
45810: LD_VAR 0 1
45814: PPUSH
45815: LD_INT 0
45817: PPUSH
45818: CALL_OW 517
45822: ST_TO_ADDR
// if not list then
45823: LD_VAR 0 4
45827: NOT
45828: IFFALSE 45832
// exit ;
45830: GO 45873
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45832: LD_ADDR_VAR 0 3
45836: PUSH
45837: LD_VAR 0 4
45841: PUSH
45842: LD_INT 1
45844: ARRAY
45845: PUSH
45846: LD_INT 1
45848: ARRAY
45849: PUSH
45850: LD_VAR 0 4
45854: PUSH
45855: LD_INT 2
45857: ARRAY
45858: PUSH
45859: LD_INT 1
45861: ARRAY
45862: PUSH
45863: LD_VAR 0 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: ST_TO_ADDR
// end ;
45873: LD_VAR 0 3
45877: RET
// export function First ( array ) ; begin
45878: LD_INT 0
45880: PPUSH
// if not array then
45881: LD_VAR 0 1
45885: NOT
45886: IFFALSE 45890
// exit ;
45888: GO 45904
// result := array [ 1 ] ;
45890: LD_ADDR_VAR 0 2
45894: PUSH
45895: LD_VAR 0 1
45899: PUSH
45900: LD_INT 1
45902: ARRAY
45903: ST_TO_ADDR
// end ;
45904: LD_VAR 0 2
45908: RET
// export function Last ( array ) ; begin
45909: LD_INT 0
45911: PPUSH
// if not array then
45912: LD_VAR 0 1
45916: NOT
45917: IFFALSE 45921
// exit ;
45919: GO 45937
// result := array [ array ] ;
45921: LD_ADDR_VAR 0 2
45925: PUSH
45926: LD_VAR 0 1
45930: PUSH
45931: LD_VAR 0 1
45935: ARRAY
45936: ST_TO_ADDR
// end ;
45937: LD_VAR 0 2
45941: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45942: LD_INT 0
45944: PPUSH
45945: PPUSH
// result := [ ] ;
45946: LD_ADDR_VAR 0 5
45950: PUSH
45951: EMPTY
45952: ST_TO_ADDR
// if not array then
45953: LD_VAR 0 1
45957: NOT
45958: IFFALSE 45962
// exit ;
45960: GO 46074
// for i := 1 to array do
45962: LD_ADDR_VAR 0 6
45966: PUSH
45967: DOUBLE
45968: LD_INT 1
45970: DEC
45971: ST_TO_ADDR
45972: LD_VAR 0 1
45976: PUSH
45977: FOR_TO
45978: IFFALSE 46072
// if array [ i ] [ index ] = value then
45980: LD_VAR 0 1
45984: PUSH
45985: LD_VAR 0 6
45989: ARRAY
45990: PUSH
45991: LD_VAR 0 2
45995: ARRAY
45996: PUSH
45997: LD_VAR 0 3
46001: EQUAL
46002: IFFALSE 46070
// begin if indexColumn then
46004: LD_VAR 0 4
46008: IFFALSE 46044
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46010: LD_ADDR_VAR 0 5
46014: PUSH
46015: LD_VAR 0 5
46019: PPUSH
46020: LD_VAR 0 1
46024: PUSH
46025: LD_VAR 0 6
46029: ARRAY
46030: PUSH
46031: LD_VAR 0 4
46035: ARRAY
46036: PPUSH
46037: CALL 41082 0 2
46041: ST_TO_ADDR
46042: GO 46070
// result := Join ( result , array [ i ] ) ;
46044: LD_ADDR_VAR 0 5
46048: PUSH
46049: LD_VAR 0 5
46053: PPUSH
46054: LD_VAR 0 1
46058: PUSH
46059: LD_VAR 0 6
46063: ARRAY
46064: PPUSH
46065: CALL 41082 0 2
46069: ST_TO_ADDR
// end ;
46070: GO 45977
46072: POP
46073: POP
// end ;
46074: LD_VAR 0 5
46078: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46079: LD_INT 0
46081: PPUSH
// if not vehicles or not parkingPoint then
46082: LD_VAR 0 1
46086: NOT
46087: IFTRUE 46096
46089: PUSH
46090: LD_VAR 0 2
46094: NOT
46095: OR
46096: IFFALSE 46100
// exit ;
46098: GO 46198
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46100: LD_ADDR_VAR 0 1
46104: PUSH
46105: LD_VAR 0 1
46109: PPUSH
46110: LD_INT 50
46112: PUSH
46113: EMPTY
46114: LIST
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: LD_INT 92
46121: PUSH
46122: LD_VAR 0 2
46126: PUSH
46127: LD_INT 1
46129: ARRAY
46130: PUSH
46131: LD_VAR 0 2
46135: PUSH
46136: LD_INT 2
46138: ARRAY
46139: PUSH
46140: LD_INT 8
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PPUSH
46157: CALL_OW 72
46161: ST_TO_ADDR
// if not vehicles then
46162: LD_VAR 0 1
46166: NOT
46167: IFFALSE 46171
// exit ;
46169: GO 46198
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46171: LD_VAR 0 1
46175: PPUSH
46176: LD_VAR 0 2
46180: PUSH
46181: LD_INT 1
46183: ARRAY
46184: PPUSH
46185: LD_VAR 0 2
46189: PUSH
46190: LD_INT 2
46192: ARRAY
46193: PPUSH
46194: CALL_OW 111
// end ;
46198: LD_VAR 0 3
46202: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46203: LD_INT 0
46205: PPUSH
46206: PPUSH
46207: PPUSH
// if not side or not area then
46208: LD_VAR 0 1
46212: NOT
46213: IFTRUE 46222
46215: PUSH
46216: LD_VAR 0 2
46220: NOT
46221: OR
46222: IFFALSE 46226
// exit ;
46224: GO 46345
// tmp := AreaToList ( area , 0 ) ;
46226: LD_ADDR_VAR 0 5
46230: PUSH
46231: LD_VAR 0 2
46235: PPUSH
46236: LD_INT 0
46238: PPUSH
46239: CALL_OW 517
46243: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46244: LD_ADDR_VAR 0 4
46248: PUSH
46249: DOUBLE
46250: LD_INT 1
46252: DEC
46253: ST_TO_ADDR
46254: LD_VAR 0 5
46258: PUSH
46259: LD_INT 1
46261: ARRAY
46262: PUSH
46263: FOR_TO
46264: IFFALSE 46343
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46266: LD_VAR 0 5
46270: PUSH
46271: LD_INT 1
46273: ARRAY
46274: PUSH
46275: LD_VAR 0 4
46279: ARRAY
46280: PPUSH
46281: LD_VAR 0 5
46285: PUSH
46286: LD_INT 2
46288: ARRAY
46289: PUSH
46290: LD_VAR 0 4
46294: ARRAY
46295: PPUSH
46296: CALL_OW 351
46300: IFFALSE 46341
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46302: LD_VAR 0 5
46306: PUSH
46307: LD_INT 1
46309: ARRAY
46310: PUSH
46311: LD_VAR 0 4
46315: ARRAY
46316: PPUSH
46317: LD_VAR 0 5
46321: PUSH
46322: LD_INT 2
46324: ARRAY
46325: PUSH
46326: LD_VAR 0 4
46330: ARRAY
46331: PPUSH
46332: LD_VAR 0 1
46336: PPUSH
46337: CALL_OW 244
// end ;
46341: GO 46263
46343: POP
46344: POP
// end ;
46345: LD_VAR 0 3
46349: RET
// export function UniqueArray ( array ) ; var i ; begin
46350: LD_INT 0
46352: PPUSH
46353: PPUSH
// result := [ ] ;
46354: LD_ADDR_VAR 0 2
46358: PUSH
46359: EMPTY
46360: ST_TO_ADDR
// if not array then
46361: LD_VAR 0 1
46365: NOT
46366: IFFALSE 46370
// exit ;
46368: GO 46431
// for i := 1 to array do
46370: LD_ADDR_VAR 0 3
46374: PUSH
46375: DOUBLE
46376: LD_INT 1
46378: DEC
46379: ST_TO_ADDR
46380: LD_VAR 0 1
46384: PUSH
46385: FOR_TO
46386: IFFALSE 46429
// if not array [ i ] in result then
46388: LD_VAR 0 1
46392: PUSH
46393: LD_VAR 0 3
46397: ARRAY
46398: PUSH
46399: LD_VAR 0 2
46403: IN
46404: NOT
46405: IFFALSE 46427
// result := Join ( result , i ) ;
46407: LD_ADDR_VAR 0 2
46411: PUSH
46412: LD_VAR 0 2
46416: PPUSH
46417: LD_VAR 0 3
46421: PPUSH
46422: CALL 41082 0 2
46426: ST_TO_ADDR
46427: GO 46385
46429: POP
46430: POP
// end ; end_of_file
46431: LD_VAR 0 2
46435: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46436: LD_INT 0
46438: PPUSH
46439: PPUSH
// disable ( mpActive ) ;
46440: LD_INT 100
46442: DISABLE_MARKED
// disable ( mpWin ) ;
46443: LD_INT 101
46445: DISABLE_MARKED
// disable ( mpLose ) ;
46446: LD_INT 102
46448: DISABLE_MARKED
// mpGameType := 0 ;
46449: LD_ADDR_EXP 3
46453: PUSH
46454: LD_INT 0
46456: ST_TO_ADDR
// mpGameSettings := [ ] ;
46457: LD_ADDR_EXP 6
46461: PUSH
46462: EMPTY
46463: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46464: LD_ADDR_EXP 4
46468: PUSH
46469: EMPTY
46470: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46471: LD_ADDR_EXP 5
46475: PUSH
46476: EMPTY
46477: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46478: LD_ADDR_EXP 29
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46493: LD_ADDR_EXP 12
46497: PUSH
46498: EMPTY
46499: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46500: LD_ADDR_EXP 13
46504: PUSH
46505: EMPTY
46506: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46507: LD_ADDR_EXP 41
46511: PUSH
46512: EMPTY
46513: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46514: LD_ADDR_EXP 42
46518: PUSH
46519: EMPTY
46520: ST_TO_ADDR
// mpDepots := [ ] ;
46521: LD_ADDR_EXP 14
46525: PUSH
46526: EMPTY
46527: ST_TO_ADDR
// mpBuildings := [ ] ;
46528: LD_ADDR_EXP 17
46532: PUSH
46533: EMPTY
46534: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46535: LD_ADDR_EXP 18
46539: PUSH
46540: EMPTY
46541: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46542: LD_ADDR_EXP 19
46546: PUSH
46547: EMPTY
46548: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46549: LD_ADDR_EXP 20
46553: PUSH
46554: EMPTY
46555: ST_TO_ADDR
// mpStartingResources := [ ] ;
46556: LD_ADDR_EXP 15
46560: PUSH
46561: EMPTY
46562: ST_TO_ADDR
// mpStartPos := [ ] ;
46563: LD_ADDR_EXP 21
46567: PUSH
46568: EMPTY
46569: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46570: LD_ADDR_EXP 22
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46579: LD_ADDR_EXP 23
46583: PUSH
46584: EMPTY
46585: ST_TO_ADDR
// mpApemans := [ ] ;
46586: LD_ADDR_EXP 30
46590: PUSH
46591: EMPTY
46592: ST_TO_ADDR
// mpApemansArea := [ ] ;
46593: LD_ADDR_EXP 31
46597: PUSH
46598: EMPTY
46599: ST_TO_ADDR
// mpRespawn := [ ] ;
46600: LD_ADDR_EXP 33
46604: PUSH
46605: EMPTY
46606: ST_TO_ADDR
// mpKingArea := 0 ;
46607: LD_ADDR_EXP 34
46611: PUSH
46612: LD_INT 0
46614: ST_TO_ADDR
// mpPoints := [ ] ;
46615: LD_ADDR_EXP 35
46619: PUSH
46620: EMPTY
46621: ST_TO_ADDR
// mpVehicles := 0 ;
46622: LD_ADDR_EXP 36
46626: PUSH
46627: LD_INT 0
46629: ST_TO_ADDR
// mpShipments := 0 ;
46630: LD_ADDR_EXP 27
46634: PUSH
46635: LD_INT 0
46637: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46638: LD_ADDR_EXP 40
46642: PUSH
46643: EMPTY
46644: PUSH
46645: EMPTY
46646: PUSH
46647: EMPTY
46648: PUSH
46649: EMPTY
46650: PUSH
46651: EMPTY
46652: PUSH
46653: EMPTY
46654: PUSH
46655: EMPTY
46656: PUSH
46657: EMPTY
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46669: LD_ADDR_EXP 32
46673: PUSH
46674: EMPTY
46675: PUSH
46676: EMPTY
46677: PUSH
46678: EMPTY
46679: PUSH
46680: EMPTY
46681: PUSH
46682: EMPTY
46683: PUSH
46684: EMPTY
46685: PUSH
46686: EMPTY
46687: PUSH
46688: EMPTY
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
// mpEmissions := 0 ;
46700: LD_ADDR_EXP 37
46704: PUSH
46705: LD_INT 0
46707: ST_TO_ADDR
// mpTeleports := 0 ;
46708: LD_ADDR_EXP 43
46712: PUSH
46713: LD_INT 0
46715: ST_TO_ADDR
// mpArtifacts := 0 ;
46716: LD_ADDR_EXP 44
46720: PUSH
46721: LD_INT 0
46723: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46724: LD_ADDR_EXP 25
46728: PUSH
46729: LD_INT 3
46731: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46732: LD_ADDR_EXP 24
46736: PUSH
46737: LD_INT 15
46739: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46740: LD_ADDR_EXP 38
46744: PUSH
46745: LD_INT 0
46747: ST_TO_ADDR
// mpGameActive := false ;
46748: LD_ADDR_EXP 39
46752: PUSH
46753: LD_INT 0
46755: ST_TO_ADDR
// mpBlockRespThread := false ;
46756: LD_ADDR_EXP 45
46760: PUSH
46761: LD_INT 0
46763: ST_TO_ADDR
// for i := 1 to 32 do
46764: LD_ADDR_VAR 0 2
46768: PUSH
46769: DOUBLE
46770: LD_INT 1
46772: DEC
46773: ST_TO_ADDR
46774: LD_INT 32
46776: PUSH
46777: FOR_TO
46778: IFFALSE 46805
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46780: LD_ADDR_EXP 6
46784: PUSH
46785: LD_EXP 6
46789: PPUSH
46790: LD_VAR 0 2
46794: PPUSH
46795: LD_INT 0
46797: PPUSH
46798: CALL_OW 1
46802: ST_TO_ADDR
46803: GO 46777
46805: POP
46806: POP
// end ;
46807: LD_VAR 0 1
46811: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46812: LD_INT 0
46814: PPUSH
46815: PPUSH
46816: PPUSH
46817: PPUSH
46818: PPUSH
46819: PPUSH
46820: PPUSH
46821: PPUSH
46822: PPUSH
46823: PPUSH
46824: PPUSH
46825: PPUSH
46826: PPUSH
46827: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
46828: LD_ADDR_VAR 0 14
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 3
46841: PUSH
46842: LD_INT 5
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: ST_TO_ADDR
// for i in gameTypes do
46851: LD_ADDR_VAR 0 2
46855: PUSH
46856: LD_VAR 0 14
46860: PUSH
46861: FOR_IN
46862: IFFALSE 46871
// disable ( i ) ;
46864: LD_VAR 0 2
46868: DISABLE_MARKED
46869: GO 46861
46871: POP
46872: POP
// if Multiplayer then
46873: LD_OWVAR 4
46877: IFFALSE 47061
// begin mpGameType := mp_game_type ;
46879: LD_ADDR_EXP 3
46883: PUSH
46884: LD_OWVAR 6
46888: ST_TO_ADDR
// your_side := mp_player_side ;
46889: LD_ADDR_OWVAR 2
46893: PUSH
46894: LD_OWVAR 7
46898: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46899: LD_ADDR_EXP 7
46903: PUSH
46904: LD_OWVAR 17
46908: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46909: LD_ADDR_EXP 8
46913: PUSH
46914: LD_OWVAR 15
46918: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46919: LD_ADDR_EXP 9
46923: PUSH
46924: LD_OWVAR 16
46928: ST_TO_ADDR
// mpTeams := mp_teams ;
46929: LD_ADDR_EXP 10
46933: PUSH
46934: LD_OWVAR 12
46938: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46939: LD_ADDR_VAR 0 2
46943: PUSH
46944: DOUBLE
46945: LD_INT 1
46947: DEC
46948: ST_TO_ADDR
46949: LD_EXP 4
46953: PPUSH
46954: CALL 5150 0 1
46958: PUSH
46959: FOR_TO
46960: IFFALSE 47036
// begin setting := mpGameSettingsKeys [ i ] ;
46962: LD_ADDR_VAR 0 12
46966: PUSH
46967: LD_EXP 4
46971: PUSH
46972: LD_VAR 0 2
46976: ARRAY
46977: ST_TO_ADDR
// if setting then
46978: LD_VAR 0 12
46982: IFFALSE 47034
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46984: LD_ADDR_EXP 6
46988: PUSH
46989: LD_EXP 6
46993: PPUSH
46994: LD_VAR 0 2
46998: PPUSH
46999: LD_EXP 5
47003: PUSH
47004: LD_VAR 0 2
47008: ARRAY
47009: PUSH
47010: LD_VAR 0 2
47014: PUSH
47015: LD_INT 1
47017: MINUS
47018: PPUSH
47019: CALL_OW 426
47023: PUSH
47024: LD_INT 1
47026: PLUS
47027: ARRAY
47028: PPUSH
47029: CALL_OW 1
47033: ST_TO_ADDR
// end ;
47034: GO 46959
47036: POP
47037: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47038: LD_ADDR_EXP 11
47042: PUSH
47043: LD_EXP 8
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: DIFF
47054: PUSH
47055: LD_INT 1
47057: GREATER
47058: ST_TO_ADDR
// end else
47059: GO 47061
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47061: LD_EXP 3
47065: PPUSH
47066: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
47070: LD_EXP 18
47074: PPUSH
47075: CALL 5150 0 1
47079: IFFALSE 47110
// begin for i in mpMarkedAreas do
47081: LD_ADDR_VAR 0 2
47085: PUSH
47086: LD_EXP 18
47090: PUSH
47091: FOR_IN
47092: IFFALSE 47108
// SetAreaMapShow ( i , 0 ) ;
47094: LD_VAR 0 2
47098: PPUSH
47099: LD_INT 0
47101: PPUSH
47102: CALL_OW 424
47106: GO 47091
47108: POP
47109: POP
// end ; for i := 1 to 8 do
47110: LD_ADDR_VAR 0 2
47114: PUSH
47115: DOUBLE
47116: LD_INT 1
47118: DEC
47119: ST_TO_ADDR
47120: LD_INT 8
47122: PUSH
47123: FOR_TO
47124: IFFALSE 48460
// begin if not mpSidePositions [ i ] then
47126: LD_EXP 7
47130: PUSH
47131: LD_VAR 0 2
47135: ARRAY
47136: NOT
47137: IFFALSE 47141
// continue ;
47139: GO 47123
// side := i ;
47141: LD_ADDR_VAR 0 7
47145: PUSH
47146: LD_VAR 0 2
47150: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47151: LD_ADDR_VAR 0 9
47155: PUSH
47156: LD_EXP 9
47160: PUSH
47161: LD_VAR 0 2
47165: ARRAY
47166: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47167: LD_ADDR_VAR 0 8
47171: PUSH
47172: LD_EXP 7
47176: PUSH
47177: LD_VAR 0 2
47181: ARRAY
47182: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47183: LD_EXP 12
47187: PPUSH
47188: CALL 5150 0 1
47192: IFFALSE 47269
// begin for j in mpOilDeposits [ pos ] do
47194: LD_ADDR_VAR 0 3
47198: PUSH
47199: LD_EXP 12
47203: PUSH
47204: LD_VAR 0 8
47208: ARRAY
47209: PUSH
47210: FOR_IN
47211: IFFALSE 47267
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47213: LD_VAR 0 3
47217: PUSH
47218: LD_INT 1
47220: ARRAY
47221: PPUSH
47222: LD_VAR 0 3
47226: PUSH
47227: LD_INT 2
47229: ARRAY
47230: PPUSH
47231: LD_INT 2
47233: PPUSH
47234: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47238: LD_VAR 0 3
47242: PUSH
47243: LD_INT 1
47245: ARRAY
47246: PPUSH
47247: LD_VAR 0 3
47251: PUSH
47252: LD_INT 2
47254: ARRAY
47255: PPUSH
47256: LD_VAR 0 7
47260: PPUSH
47261: CALL_OW 441
// end ;
47265: GO 47210
47267: POP
47268: POP
// end ; if Count ( mpSibDeposits ) then
47269: LD_EXP 13
47273: PPUSH
47274: CALL 5150 0 1
47278: IFFALSE 47355
// begin for j in mpSibDeposits [ pos ] do
47280: LD_ADDR_VAR 0 3
47284: PUSH
47285: LD_EXP 13
47289: PUSH
47290: LD_VAR 0 8
47294: ARRAY
47295: PUSH
47296: FOR_IN
47297: IFFALSE 47353
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47299: LD_VAR 0 3
47303: PUSH
47304: LD_INT 1
47306: ARRAY
47307: PPUSH
47308: LD_VAR 0 3
47312: PUSH
47313: LD_INT 2
47315: ARRAY
47316: PPUSH
47317: LD_INT 3
47319: PPUSH
47320: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47324: LD_VAR 0 3
47328: PUSH
47329: LD_INT 1
47331: ARRAY
47332: PPUSH
47333: LD_VAR 0 3
47337: PUSH
47338: LD_INT 2
47340: ARRAY
47341: PPUSH
47342: LD_VAR 0 7
47346: PPUSH
47347: CALL_OW 441
// end ;
47351: GO 47296
47353: POP
47354: POP
// end ; InitBc ;
47355: CALL_OW 21
// InitUc ;
47359: CALL_OW 18
// uc_side := side ;
47363: LD_ADDR_OWVAR 20
47367: PUSH
47368: LD_VAR 0 7
47372: ST_TO_ADDR
// uc_nation := nation ;
47373: LD_ADDR_OWVAR 21
47377: PUSH
47378: LD_VAR 0 9
47382: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47383: LD_EXP 22
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: GREATER
47392: IFFALSE 47551
// begin x := mpStartPos [ pos ] [ 1 ] ;
47394: LD_ADDR_VAR 0 5
47398: PUSH
47399: LD_EXP 21
47403: PUSH
47404: LD_VAR 0 8
47408: ARRAY
47409: PUSH
47410: LD_INT 1
47412: ARRAY
47413: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47414: LD_ADDR_VAR 0 6
47418: PUSH
47419: LD_EXP 21
47423: PUSH
47424: LD_VAR 0 8
47428: ARRAY
47429: PUSH
47430: LD_INT 2
47432: ARRAY
47433: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47434: LD_VAR 0 5
47438: PPUSH
47439: LD_VAR 0 6
47443: PPUSH
47444: LD_INT 12
47446: PPUSH
47447: LD_INT 2
47449: PPUSH
47450: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47454: LD_ADDR_EXP 23
47458: PUSH
47459: LD_EXP 23
47463: PPUSH
47464: LD_VAR 0 7
47468: PPUSH
47469: LD_VAR 0 7
47473: PPUSH
47474: LD_VAR 0 5
47478: PPUSH
47479: LD_VAR 0 6
47483: PPUSH
47484: LD_INT 1
47486: PUSH
47487: LD_INT 100
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: LD_INT 70
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: LD_INT 40
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 10
47516: PUSH
47517: LD_INT 25
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 20
47526: PUSH
47527: LD_INT 100
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: PPUSH
47541: CALL_OW 418
47545: PPUSH
47546: CALL_OW 1
47550: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47551: LD_EXP 14
47555: PPUSH
47556: CALL 5150 0 1
47560: IFFALSE 47744
// begin if mpGameType = GameTypeSurvival then
47562: LD_EXP 3
47566: PUSH
47567: LD_INT 2
47569: EQUAL
47570: IFFALSE 47590
// begin bc_level := 10 ;
47572: LD_ADDR_OWVAR 43
47576: PUSH
47577: LD_INT 10
47579: ST_TO_ADDR
// bc_type := b_warehouse ;
47580: LD_ADDR_OWVAR 42
47584: PUSH
47585: LD_INT 1
47587: ST_TO_ADDR
// end else
47588: GO 47606
// begin bc_level := 0 ;
47590: LD_ADDR_OWVAR 43
47594: PUSH
47595: LD_INT 0
47597: ST_TO_ADDR
// bc_type := b_depot ;
47598: LD_ADDR_OWVAR 42
47602: PUSH
47603: LD_INT 0
47605: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47606: LD_ADDR_VAR 0 4
47610: PUSH
47611: LD_EXP 14
47615: PUSH
47616: LD_VAR 0 8
47620: ARRAY
47621: PUSH
47622: LD_INT 1
47624: ARRAY
47625: PPUSH
47626: LD_EXP 14
47630: PUSH
47631: LD_VAR 0 8
47635: ARRAY
47636: PUSH
47637: LD_INT 2
47639: ARRAY
47640: PPUSH
47641: LD_EXP 14
47645: PUSH
47646: LD_VAR 0 8
47650: ARRAY
47651: PUSH
47652: LD_INT 3
47654: ARRAY
47655: PPUSH
47656: CALL_OW 47
47660: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47661: LD_VAR 0 4
47665: PPUSH
47666: LD_STRING @
47668: PUSH
47669: LD_VAR 0 7
47673: STR
47674: PPUSH
47675: CALL_OW 500
// if Count ( mpStartingResources ) then
47679: LD_EXP 15
47683: PPUSH
47684: CALL 5150 0 1
47688: IFFALSE 47742
// begin for j := 1 to mpStartingResources do
47690: LD_ADDR_VAR 0 3
47694: PUSH
47695: DOUBLE
47696: LD_INT 1
47698: DEC
47699: ST_TO_ADDR
47700: LD_EXP 15
47704: PUSH
47705: FOR_TO
47706: IFFALSE 47740
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47708: LD_VAR 0 4
47712: PPUSH
47713: CALL_OW 274
47717: PPUSH
47718: LD_VAR 0 3
47722: PPUSH
47723: LD_EXP 15
47727: PUSH
47728: LD_VAR 0 3
47732: ARRAY
47733: PPUSH
47734: CALL_OW 277
47738: GO 47705
47740: POP
47741: POP
// end ; end else
47742: GO 47951
// if Count ( mpStartingResources ) then
47744: LD_EXP 15
47748: PPUSH
47749: CALL 5150 0 1
47753: IFFALSE 47951
// begin x := mpStartPos [ pos ] [ 1 ] ;
47755: LD_ADDR_VAR 0 5
47759: PUSH
47760: LD_EXP 21
47764: PUSH
47765: LD_VAR 0 8
47769: ARRAY
47770: PUSH
47771: LD_INT 1
47773: ARRAY
47774: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47775: LD_ADDR_VAR 0 6
47779: PUSH
47780: LD_EXP 21
47784: PUSH
47785: LD_VAR 0 8
47789: ARRAY
47790: PUSH
47791: LD_INT 2
47793: ARRAY
47794: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47795: LD_ADDR_VAR 0 3
47799: PUSH
47800: DOUBLE
47801: LD_INT 1
47803: DEC
47804: ST_TO_ADDR
47805: LD_EXP 15
47809: PUSH
47810: FOR_TO
47811: IFFALSE 47949
// begin resources := mpStartingResources [ j ] ;
47813: LD_ADDR_VAR 0 13
47817: PUSH
47818: LD_EXP 15
47822: PUSH
47823: LD_VAR 0 3
47827: ARRAY
47828: ST_TO_ADDR
// if resources = 0 then
47829: LD_VAR 0 13
47833: PUSH
47834: LD_INT 0
47836: EQUAL
47837: IFFALSE 47841
// continue ;
47839: GO 47810
// repeat if resources >= 50 then
47841: LD_VAR 0 13
47845: PUSH
47846: LD_INT 50
47848: GREATEREQUAL
47849: IFFALSE 47895
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47851: LD_VAR 0 3
47855: PPUSH
47856: LD_INT 5
47858: PPUSH
47859: LD_VAR 0 5
47863: PPUSH
47864: LD_VAR 0 6
47868: PPUSH
47869: LD_INT 6
47871: PPUSH
47872: LD_INT 0
47874: PPUSH
47875: CALL_OW 60
// resources := resources - 50 ;
47879: LD_ADDR_VAR 0 13
47883: PUSH
47884: LD_VAR 0 13
47888: PUSH
47889: LD_INT 50
47891: MINUS
47892: ST_TO_ADDR
// end else
47893: GO 47937
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47895: LD_VAR 0 3
47899: PPUSH
47900: LD_VAR 0 13
47904: PUSH
47905: LD_INT 10
47907: DIV
47908: PPUSH
47909: LD_VAR 0 5
47913: PPUSH
47914: LD_VAR 0 6
47918: PPUSH
47919: LD_INT 6
47921: PPUSH
47922: LD_INT 0
47924: PPUSH
47925: CALL_OW 60
// resources := 0 ;
47929: LD_ADDR_VAR 0 13
47933: PUSH
47934: LD_INT 0
47936: ST_TO_ADDR
// end ; until resources <= 0 ;
47937: LD_VAR 0 13
47941: PUSH
47942: LD_INT 0
47944: LESSEQUAL
47945: IFFALSE 47841
// end ;
47947: GO 47810
47949: POP
47950: POP
// end ; if Count ( mpBuildings ) then
47951: LD_EXP 17
47955: PPUSH
47956: CALL 5150 0 1
47960: IFFALSE 48038
// begin for j in mpBuildings [ pos ] do
47962: LD_ADDR_VAR 0 3
47966: PUSH
47967: LD_EXP 17
47971: PUSH
47972: LD_VAR 0 8
47976: ARRAY
47977: PUSH
47978: FOR_IN
47979: IFFALSE 48036
// begin bc_level := 0 ;
47981: LD_ADDR_OWVAR 43
47985: PUSH
47986: LD_INT 0
47988: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47989: LD_ADDR_OWVAR 42
47993: PUSH
47994: LD_VAR 0 3
47998: PUSH
47999: LD_INT 1
48001: ARRAY
48002: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48003: LD_VAR 0 3
48007: PUSH
48008: LD_INT 2
48010: ARRAY
48011: PPUSH
48012: LD_VAR 0 3
48016: PUSH
48017: LD_INT 3
48019: ARRAY
48020: PPUSH
48021: LD_VAR 0 3
48025: PUSH
48026: LD_INT 4
48028: ARRAY
48029: PPUSH
48030: CALL_OW 47
// end ;
48034: GO 47978
48036: POP
48037: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48038: LD_EXP 26
48042: IFFALSE 48062
48044: PUSH
48045: LD_INT 20
48047: PPUSH
48048: LD_VAR 0 7
48052: PPUSH
48053: CALL_OW 321
48057: PUSH
48058: LD_INT 1
48060: EQUAL
48061: AND
48062: IFFALSE 48079
// SetTech ( tech_SibDet , side , state_researched ) ;
48064: LD_INT 20
48066: PPUSH
48067: LD_VAR 0 7
48071: PPUSH
48072: LD_INT 2
48074: PPUSH
48075: CALL_OW 322
// if not mpArtifacts then
48079: LD_EXP 44
48083: NOT
48084: IFFALSE 48101
// SetTech ( tech_artifact , side , state_disabled ) ;
48086: LD_INT 24
48088: PPUSH
48089: LD_VAR 0 7
48093: PPUSH
48094: LD_INT 0
48096: PPUSH
48097: CALL_OW 322
// if mpSibBomb = 1 then
48101: LD_EXP 28
48105: PUSH
48106: LD_INT 1
48108: EQUAL
48109: IFFALSE 48128
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48111: LD_INT 25
48113: PPUSH
48114: LD_VAR 0 7
48118: PPUSH
48119: LD_INT 1
48121: PPUSH
48122: CALL_OW 322
// end else
48126: GO 48143
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48128: LD_INT 25
48130: PPUSH
48131: LD_VAR 0 7
48135: PPUSH
48136: LD_INT 0
48138: PPUSH
48139: CALL_OW 322
// end ; if mpVehicles then
48143: LD_EXP 36
48147: IFFALSE 48246
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48149: LD_ADDR_VAR 0 3
48153: PUSH
48154: LD_VAR 0 7
48158: PPUSH
48159: LD_VAR 0 9
48163: PPUSH
48164: LD_EXP 36
48168: PPUSH
48169: CALL 49370 0 3
48173: PUSH
48174: FOR_IN
48175: IFFALSE 48244
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48177: LD_VAR 0 3
48181: PPUSH
48182: LD_INT 0
48184: PPUSH
48185: LD_INT 5
48187: PPUSH
48188: CALL_OW 12
48192: PPUSH
48193: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48197: LD_VAR 0 3
48201: PPUSH
48202: LD_EXP 21
48206: PUSH
48207: LD_VAR 0 8
48211: ARRAY
48212: PUSH
48213: LD_INT 1
48215: ARRAY
48216: PPUSH
48217: LD_EXP 21
48221: PUSH
48222: LD_VAR 0 8
48226: ARRAY
48227: PUSH
48228: LD_INT 2
48230: ARRAY
48231: PPUSH
48232: LD_INT 12
48234: PPUSH
48235: LD_INT 0
48237: PPUSH
48238: CALL_OW 50
// end ;
48242: GO 48174
48244: POP
48245: POP
// end ; uc_nation := nation ;
48246: LD_ADDR_OWVAR 21
48250: PUSH
48251: LD_VAR 0 9
48255: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48256: LD_ADDR_VAR 0 11
48260: PUSH
48261: LD_VAR 0 7
48265: PPUSH
48266: LD_VAR 0 9
48270: PPUSH
48271: LD_EXP 24
48275: PPUSH
48276: LD_EXP 25
48280: PPUSH
48281: CALL 48872 0 4
48285: ST_TO_ADDR
// for j in team do
48286: LD_ADDR_VAR 0 3
48290: PUSH
48291: LD_VAR 0 11
48295: PUSH
48296: FOR_IN
48297: IFFALSE 48346
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48299: LD_VAR 0 3
48303: PPUSH
48304: LD_EXP 21
48308: PUSH
48309: LD_VAR 0 8
48313: ARRAY
48314: PUSH
48315: LD_INT 1
48317: ARRAY
48318: PPUSH
48319: LD_EXP 21
48323: PUSH
48324: LD_VAR 0 8
48328: ARRAY
48329: PUSH
48330: LD_INT 2
48332: ARRAY
48333: PPUSH
48334: LD_INT 12
48336: PPUSH
48337: LD_INT 0
48339: PPUSH
48340: CALL_OW 50
48344: GO 48296
48346: POP
48347: POP
// if mpApemans then
48348: LD_EXP 30
48352: IFFALSE 48458
// begin for j := 1 to mpApemans do
48354: LD_ADDR_VAR 0 3
48358: PUSH
48359: DOUBLE
48360: LD_INT 1
48362: DEC
48363: ST_TO_ADDR
48364: LD_EXP 30
48368: PUSH
48369: FOR_TO
48370: IFFALSE 48456
// begin PrepareApeman ( - 5 ) ;
48372: LD_INT 5
48374: NEG
48375: PPUSH
48376: CALL 37209 0 1
// ape := CreateHuman ;
48380: LD_ADDR_VAR 0 10
48384: PUSH
48385: CALL_OW 44
48389: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48390: LD_ADDR_EXP 32
48394: PUSH
48395: LD_EXP 32
48399: PPUSH
48400: LD_VAR 0 8
48404: PPUSH
48405: LD_EXP 32
48409: PUSH
48410: LD_VAR 0 8
48414: ARRAY
48415: PPUSH
48416: LD_VAR 0 10
48420: PPUSH
48421: CALL 41082 0 2
48425: PPUSH
48426: CALL_OW 1
48430: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48431: LD_VAR 0 10
48435: PPUSH
48436: LD_EXP 31
48440: PUSH
48441: LD_VAR 0 8
48445: ARRAY
48446: PPUSH
48447: LD_INT 0
48449: PPUSH
48450: CALL_OW 49
// end ;
48454: GO 48369
48456: POP
48457: POP
// end ; end ;
48458: GO 47123
48460: POP
48461: POP
// if not mpTeamGame then
48462: LD_EXP 11
48466: NOT
48467: IFFALSE 48565
// begin for i := 1 to 8 do
48469: LD_ADDR_VAR 0 2
48473: PUSH
48474: DOUBLE
48475: LD_INT 1
48477: DEC
48478: ST_TO_ADDR
48479: LD_INT 8
48481: PUSH
48482: FOR_TO
48483: IFFALSE 48561
// for j := 1 to 8 do
48485: LD_ADDR_VAR 0 3
48489: PUSH
48490: DOUBLE
48491: LD_INT 1
48493: DEC
48494: ST_TO_ADDR
48495: LD_INT 8
48497: PUSH
48498: FOR_TO
48499: IFFALSE 48557
// if i <> j then
48501: LD_VAR 0 2
48505: PUSH
48506: LD_VAR 0 3
48510: NONEQUAL
48511: IFFALSE 48535
// SetAttitude ( i , j , att_neutral , true ) else
48513: LD_VAR 0 2
48517: PPUSH
48518: LD_VAR 0 3
48522: PPUSH
48523: LD_INT 0
48525: PPUSH
48526: LD_INT 1
48528: PPUSH
48529: CALL_OW 80
48533: GO 48555
// SetAttitude ( i , j , att_friend , true ) ;
48535: LD_VAR 0 2
48539: PPUSH
48540: LD_VAR 0 3
48544: PPUSH
48545: LD_INT 1
48547: PPUSH
48548: LD_INT 1
48550: PPUSH
48551: CALL_OW 80
48555: GO 48498
48557: POP
48558: POP
48559: GO 48482
48561: POP
48562: POP
// end else
48563: GO 48740
// begin if mpSharedVision then
48565: LD_EXP 16
48569: IFFALSE 48634
// begin for i in mpTeams do
48571: LD_ADDR_VAR 0 2
48575: PUSH
48576: LD_EXP 10
48580: PUSH
48581: FOR_IN
48582: IFFALSE 48632
// for j := 2 to i do
48584: LD_ADDR_VAR 0 3
48588: PUSH
48589: DOUBLE
48590: LD_INT 2
48592: DEC
48593: ST_TO_ADDR
48594: LD_VAR 0 2
48598: PUSH
48599: FOR_TO
48600: IFFALSE 48628
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48602: LD_VAR 0 2
48606: PUSH
48607: LD_VAR 0 3
48611: ARRAY
48612: PPUSH
48613: LD_VAR 0 2
48617: PUSH
48618: LD_INT 1
48620: ARRAY
48621: PPUSH
48622: CALL_OW 343
48626: GO 48599
48628: POP
48629: POP
48630: GO 48581
48632: POP
48633: POP
// end ; for i := 1 to 8 do
48634: LD_ADDR_VAR 0 2
48638: PUSH
48639: DOUBLE
48640: LD_INT 1
48642: DEC
48643: ST_TO_ADDR
48644: LD_INT 8
48646: PUSH
48647: FOR_TO
48648: IFFALSE 48738
// for j := 1 to 8 do
48650: LD_ADDR_VAR 0 3
48654: PUSH
48655: DOUBLE
48656: LD_INT 1
48658: DEC
48659: ST_TO_ADDR
48660: LD_INT 8
48662: PUSH
48663: FOR_TO
48664: IFFALSE 48734
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48666: LD_EXP 8
48670: PUSH
48671: LD_VAR 0 2
48675: ARRAY
48676: PUSH
48677: LD_EXP 8
48681: PUSH
48682: LD_VAR 0 3
48686: ARRAY
48687: EQUAL
48688: IFFALSE 48712
// SetAttitude ( i , j , att_friend , true ) else
48690: LD_VAR 0 2
48694: PPUSH
48695: LD_VAR 0 3
48699: PPUSH
48700: LD_INT 1
48702: PPUSH
48703: LD_INT 1
48705: PPUSH
48706: CALL_OW 80
48710: GO 48732
// SetAttitude ( i , j , att_enemy , true ) ;
48712: LD_VAR 0 2
48716: PPUSH
48717: LD_VAR 0 3
48721: PPUSH
48722: LD_INT 2
48724: PPUSH
48725: LD_INT 1
48727: PPUSH
48728: CALL_OW 80
48732: GO 48663
48734: POP
48735: POP
48736: GO 48647
48738: POP
48739: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48740: LD_ADDR_OWVAR 71
48744: PUSH
48745: LD_EXP 9
48749: PUSH
48750: LD_OWVAR 2
48754: ARRAY
48755: ST_TO_ADDR
// if IAmSpec then
48756: CALL_OW 531
48760: IFFALSE 48801
// begin FogOff ( true ) ;
48762: LD_INT 1
48764: PPUSH
48765: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48769: LD_EXP 29
48773: PUSH
48774: LD_INT 1
48776: ARRAY
48777: PUSH
48778: LD_INT 2
48780: DIV
48781: PPUSH
48782: LD_EXP 29
48786: PUSH
48787: LD_INT 2
48789: ARRAY
48790: PUSH
48791: LD_INT 2
48793: DIV
48794: PPUSH
48795: CALL_OW 86
// end else
48799: GO 48847
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48801: LD_EXP 21
48805: PUSH
48806: LD_EXP 7
48810: PUSH
48811: LD_OWVAR 2
48815: ARRAY
48816: ARRAY
48817: PUSH
48818: LD_INT 1
48820: ARRAY
48821: PPUSH
48822: LD_EXP 21
48826: PUSH
48827: LD_EXP 7
48831: PUSH
48832: LD_OWVAR 2
48836: ARRAY
48837: ARRAY
48838: PUSH
48839: LD_INT 2
48841: ARRAY
48842: PPUSH
48843: CALL_OW 86
// end ; BeginBuildUp ;
48847: CALL 49903 0 0
// enable ( mpActive ) ;
48851: LD_INT 100
48853: ENABLE_MARKED
// enable ( mpGameType ) ;
48854: LD_EXP 3
48858: ENABLE_MARKED
// mpGameActive := true ;
48859: LD_ADDR_EXP 39
48863: PUSH
48864: LD_INT 1
48866: ST_TO_ADDR
// end ;
48867: LD_VAR 0 1
48871: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48872: LD_INT 0
48874: PPUSH
48875: PPUSH
48876: PPUSH
48877: PPUSH
// result := [ ] ;
48878: LD_ADDR_VAR 0 5
48882: PUSH
48883: EMPTY
48884: ST_TO_ADDR
// class := class_soldier ;
48885: LD_ADDR_VAR 0 8
48889: PUSH
48890: LD_INT 1
48892: ST_TO_ADDR
// uc_side := side ;
48893: LD_ADDR_OWVAR 20
48897: PUSH
48898: LD_VAR 0 1
48902: ST_TO_ADDR
// uc_nation := nation ;
48903: LD_ADDR_OWVAR 21
48907: PUSH
48908: LD_VAR 0 2
48912: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48913: LD_ADDR_OWVAR 26
48917: PUSH
48918: LD_OWVAR 19
48922: PUSH
48923: LD_VAR 0 1
48927: ARRAY
48928: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48929: LD_INT 1
48931: PPUSH
48932: LD_INT 2
48934: PPUSH
48935: CALL_OW 12
48939: PPUSH
48940: LD_VAR 0 8
48944: PPUSH
48945: LD_VAR 0 4
48949: PUSH
48950: LD_INT 2
48952: PLUS
48953: PPUSH
48954: CALL_OW 380
// hc_importance := 105 ;
48958: LD_ADDR_OWVAR 32
48962: PUSH
48963: LD_INT 105
48965: ST_TO_ADDR
// if Multiplayer then
48966: LD_OWVAR 4
48970: IFFALSE 49010
// begin hc_gallery := MULTIAVATARS ;
48972: LD_ADDR_OWVAR 33
48976: PUSH
48977: LD_STRING MULTIAVATARS
48979: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48980: LD_ADDR_OWVAR 34
48984: PUSH
48985: LD_VAR 0 1
48989: PPUSH
48990: CALL_OW 525
48994: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48995: LD_ADDR_OWVAR 27
48999: PUSH
49000: LD_VAR 0 1
49004: PPUSH
49005: CALL_OW 526
49009: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49010: LD_ADDR_VAR 0 5
49014: PUSH
49015: LD_VAR 0 5
49019: PPUSH
49020: CALL_OW 44
49024: PPUSH
49025: CALL 41082 0 2
49029: ST_TO_ADDR
// if mpTeamPreset then
49030: LD_LOC 1
49034: IFFALSE 49130
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49036: LD_LOC 1
49040: PUSH
49041: LD_INT 1
49043: ARRAY
49044: PPUSH
49045: LD_VAR 0 5
49049: PUSH
49050: LD_VAR 0 5
49054: ARRAY
49055: PPUSH
49056: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49060: LD_VAR 0 5
49064: PUSH
49065: LD_VAR 0 5
49069: ARRAY
49070: PPUSH
49071: LD_INT 1
49073: PPUSH
49074: LD_LOC 1
49078: PUSH
49079: LD_INT 1
49081: ARRAY
49082: PPUSH
49083: LD_INT 1
49085: PPUSH
49086: CALL_OW 260
49090: PPUSH
49091: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49095: LD_VAR 0 5
49099: PUSH
49100: LD_VAR 0 5
49104: ARRAY
49105: PPUSH
49106: LD_INT 2
49108: PPUSH
49109: LD_LOC 1
49113: PUSH
49114: LD_INT 1
49116: ARRAY
49117: PPUSH
49118: LD_INT 2
49120: PPUSH
49121: CALL_OW 260
49125: PPUSH
49126: CALL_OW 239
// end ; InitHc_All ( ) ;
49130: CALL_OW 584
// class := 2 ;
49134: LD_ADDR_VAR 0 8
49138: PUSH
49139: LD_INT 2
49141: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49142: LD_ADDR_VAR 0 6
49146: PUSH
49147: DOUBLE
49148: LD_INT 1
49150: DEC
49151: ST_TO_ADDR
49152: LD_VAR 0 3
49156: PUSH
49157: LD_INT 1
49159: MINUS
49160: PUSH
49161: FOR_TO
49162: IFFALSE 49346
// begin PrepareHuman ( false , class , skill ) ;
49164: LD_INT 0
49166: PPUSH
49167: LD_VAR 0 8
49171: PPUSH
49172: LD_VAR 0 4
49176: PPUSH
49177: CALL_OW 380
// un := CreateHuman ;
49181: LD_ADDR_VAR 0 7
49185: PUSH
49186: CALL_OW 44
49190: ST_TO_ADDR
// result := Join ( result , un ) ;
49191: LD_ADDR_VAR 0 5
49195: PUSH
49196: LD_VAR 0 5
49200: PPUSH
49201: LD_VAR 0 7
49205: PPUSH
49206: CALL 41082 0 2
49210: ST_TO_ADDR
// if mpTeamPreset then
49211: LD_LOC 1
49215: IFFALSE 49311
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49217: LD_LOC 1
49221: PUSH
49222: LD_VAR 0 6
49226: PUSH
49227: LD_INT 1
49229: PLUS
49230: ARRAY
49231: PPUSH
49232: LD_VAR 0 7
49236: PPUSH
49237: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49241: LD_VAR 0 7
49245: PPUSH
49246: LD_INT 1
49248: PPUSH
49249: LD_LOC 1
49253: PUSH
49254: LD_VAR 0 6
49258: PUSH
49259: LD_INT 1
49261: PLUS
49262: ARRAY
49263: PPUSH
49264: LD_INT 1
49266: PPUSH
49267: CALL_OW 260
49271: PPUSH
49272: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49276: LD_VAR 0 7
49280: PPUSH
49281: LD_INT 2
49283: PPUSH
49284: LD_LOC 1
49288: PUSH
49289: LD_VAR 0 6
49293: PUSH
49294: LD_INT 1
49296: PLUS
49297: ARRAY
49298: PPUSH
49299: LD_INT 2
49301: PPUSH
49302: CALL_OW 260
49306: PPUSH
49307: CALL_OW 239
// end ; class := Inc ( class ) ;
49311: LD_ADDR_VAR 0 8
49315: PUSH
49316: LD_VAR 0 8
49320: PPUSH
49321: CALL 42455 0 1
49325: ST_TO_ADDR
// if class = 5 then
49326: LD_VAR 0 8
49330: PUSH
49331: LD_INT 5
49333: EQUAL
49334: IFFALSE 49344
// class := 1 ;
49336: LD_ADDR_VAR 0 8
49340: PUSH
49341: LD_INT 1
49343: ST_TO_ADDR
// end ;
49344: GO 49161
49346: POP
49347: POP
// if not mpTeamPreset then
49348: LD_LOC 1
49352: NOT
49353: IFFALSE 49365
// mpTeamPreset := result ;
49355: LD_ADDR_LOC 1
49359: PUSH
49360: LD_VAR 0 5
49364: ST_TO_ADDR
// end ;
49365: LD_VAR 0 5
49369: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49370: LD_INT 0
49372: PPUSH
49373: PPUSH
// result := [ ] ;
49374: LD_ADDR_VAR 0 4
49378: PUSH
49379: EMPTY
49380: ST_TO_ADDR
// if not vehicles then
49381: LD_VAR 0 3
49385: NOT
49386: IFFALSE 49390
// exit ;
49388: GO 49604
// for i := 1 to vehicles [ nation ] do
49390: LD_ADDR_VAR 0 5
49394: PUSH
49395: DOUBLE
49396: LD_INT 1
49398: DEC
49399: ST_TO_ADDR
49400: LD_VAR 0 3
49404: PUSH
49405: LD_VAR 0 2
49409: ARRAY
49410: PUSH
49411: FOR_TO
49412: IFFALSE 49602
// begin uc_side := side ;
49414: LD_ADDR_OWVAR 20
49418: PUSH
49419: LD_VAR 0 1
49423: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49424: LD_VAR 0 3
49428: PUSH
49429: LD_VAR 0 2
49433: ARRAY
49434: PUSH
49435: LD_VAR 0 5
49439: ARRAY
49440: PPUSH
49441: CALL 5150 0 1
49445: PUSH
49446: LD_INT 4
49448: GREATER
49449: IFFALSE 49479
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49451: LD_ADDR_OWVAR 21
49455: PUSH
49456: LD_VAR 0 3
49460: PUSH
49461: LD_VAR 0 2
49465: ARRAY
49466: PUSH
49467: LD_VAR 0 5
49471: ARRAY
49472: PUSH
49473: LD_INT 5
49475: ARRAY
49476: ST_TO_ADDR
49477: GO 49489
// uc_nation := nation ;
49479: LD_ADDR_OWVAR 21
49483: PUSH
49484: LD_VAR 0 2
49488: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49489: LD_VAR 0 3
49493: PUSH
49494: LD_VAR 0 2
49498: ARRAY
49499: PUSH
49500: LD_VAR 0 5
49504: ARRAY
49505: PUSH
49506: LD_INT 1
49508: ARRAY
49509: PPUSH
49510: LD_VAR 0 3
49514: PUSH
49515: LD_VAR 0 2
49519: ARRAY
49520: PUSH
49521: LD_VAR 0 5
49525: ARRAY
49526: PUSH
49527: LD_INT 2
49529: ARRAY
49530: PPUSH
49531: LD_VAR 0 3
49535: PUSH
49536: LD_VAR 0 2
49540: ARRAY
49541: PUSH
49542: LD_VAR 0 5
49546: ARRAY
49547: PUSH
49548: LD_INT 3
49550: ARRAY
49551: PPUSH
49552: LD_VAR 0 3
49556: PUSH
49557: LD_VAR 0 2
49561: ARRAY
49562: PUSH
49563: LD_VAR 0 5
49567: ARRAY
49568: PUSH
49569: LD_INT 4
49571: ARRAY
49572: PPUSH
49573: LD_INT 80
49575: PPUSH
49576: CALL 7912 0 5
// result := Join ( result , CreateVehicle ) ;
49580: LD_ADDR_VAR 0 4
49584: PUSH
49585: LD_VAR 0 4
49589: PPUSH
49590: CALL_OW 45
49594: PPUSH
49595: CALL 41082 0 2
49599: ST_TO_ADDR
// end ;
49600: GO 49411
49602: POP
49603: POP
// end ;
49604: LD_VAR 0 4
49608: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49609: LD_INT 0
49611: PPUSH
49612: PPUSH
// for i in mpBattleFlags do
49613: LD_ADDR_VAR 0 3
49617: PUSH
49618: LD_EXP 23
49622: PUSH
49623: FOR_IN
49624: IFFALSE 49701
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49626: LD_VAR 0 3
49630: PPUSH
49631: LD_INT 1
49633: PUSH
49634: LD_VAR 0 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_VAR 0 1
49650: PUSH
49651: LD_REAL  7.00000000000000E-0001
49654: MUL
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: LD_VAR 0 1
49667: PUSH
49668: LD_REAL  4.00000000000000E-0001
49671: MUL
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 20
49679: PUSH
49680: LD_VAR 0 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: PPUSH
49695: CALL_OW 423
49699: GO 49623
49701: POP
49702: POP
// end ;
49703: LD_VAR 0 2
49707: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49708: LD_INT 100
49710: IFFALSE 49805
49712: GO 49714
49714: DISABLE
49715: LD_INT 0
49717: PPUSH
49718: PPUSH
// begin if mpBattleFlag <= 0 then
49719: LD_EXP 22
49723: PUSH
49724: LD_INT 0
49726: LESSEQUAL
49727: IFFALSE 49731
// exit ;
49729: GO 49805
// strength := 100 ;
49731: LD_ADDR_VAR 0 2
49735: PUSH
49736: LD_INT 100
49738: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49739: LD_EXP 22
49743: PPUSH
49744: CALL_OW 67
// strength := Dec ( strength ) ;
49748: LD_ADDR_VAR 0 2
49752: PUSH
49753: LD_VAR 0 2
49757: PPUSH
49758: CALL 42477 0 1
49762: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49763: LD_VAR 0 2
49767: PPUSH
49768: CALL 49609 0 1
// until not strength ;
49772: LD_VAR 0 2
49776: NOT
49777: IFFALSE 49739
// for i in mpBattleFlags do
49779: LD_ADDR_VAR 0 1
49783: PUSH
49784: LD_EXP 23
49788: PUSH
49789: FOR_IN
49790: IFFALSE 49803
// KillBattleFlag ( i ) ;
49792: LD_VAR 0 1
49796: PPUSH
49797: CALL_OW 419
49801: GO 49789
49803: POP
49804: POP
// end ;
49805: PPOPN 2
49807: END
// every 0 0$1 marked mpActive do var side , tmp ;
49808: GO 49810
49810: DISABLE
49811: LD_INT 0
49813: PPUSH
49814: PPUSH
// begin if mpSibBomb <= 1 then
49815: LD_EXP 28
49819: PUSH
49820: LD_INT 1
49822: LESSEQUAL
49823: IFFALSE 49827
// exit ;
49825: GO 49900
// tmp := mpSibBomb ;
49827: LD_ADDR_VAR 0 2
49831: PUSH
49832: LD_EXP 28
49836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49837: LD_INT 35
49839: PPUSH
49840: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49844: LD_ADDR_VAR 0 2
49848: PUSH
49849: LD_VAR 0 2
49853: PUSH
49854: LD_INT 35
49856: MINUS
49857: ST_TO_ADDR
// until not tmp ;
49858: LD_VAR 0 2
49862: NOT
49863: IFFALSE 49837
// for side := 1 to 8 do
49865: LD_ADDR_VAR 0 1
49869: PUSH
49870: DOUBLE
49871: LD_INT 1
49873: DEC
49874: ST_TO_ADDR
49875: LD_INT 8
49877: PUSH
49878: FOR_TO
49879: IFFALSE 49898
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49881: LD_INT 25
49883: PPUSH
49884: LD_VAR 0 1
49888: PPUSH
49889: LD_INT 1
49891: PPUSH
49892: CALL_OW 322
49896: GO 49878
49898: POP
49899: POP
// end ;
49900: PPOPN 2
49902: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49903: LD_INT 0
49905: PPUSH
49906: PPUSH
49907: PPUSH
// mpBuildUpTimeDelay := 0 ;
49908: LD_ADDR_EXP 46
49912: PUSH
49913: LD_INT 0
49915: ST_TO_ADDR
// if not mpBuildUpTime then
49916: LD_EXP 20
49920: NOT
49921: IFFALSE 49925
// exit ;
49923: GO 50114
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49925: LD_ADDR_EXP 46
49929: PUSH
49930: LD_INT 8400
49932: PUSH
49933: LD_INT 2100
49935: PUSH
49936: LD_EXP 20
49940: MUL
49941: PLUS
49942: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49943: LD_ADDR_EXP 47
49947: PUSH
49948: LD_INT 1
49950: ST_TO_ADDR
// for i := 1 to 8 do
49951: LD_ADDR_VAR 0 2
49955: PUSH
49956: DOUBLE
49957: LD_INT 1
49959: DEC
49960: ST_TO_ADDR
49961: LD_INT 8
49963: PUSH
49964: FOR_TO
49965: IFFALSE 50112
// if mpSidePositions [ i ] then
49967: LD_EXP 7
49971: PUSH
49972: LD_VAR 0 2
49976: ARRAY
49977: IFFALSE 50110
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49979: LD_EXP 19
49983: PUSH
49984: LD_EXP 7
49988: PUSH
49989: LD_VAR 0 2
49993: ARRAY
49994: ARRAY
49995: PPUSH
49996: LD_INT 5
49998: PPUSH
49999: CALL_OW 424
// for j := 1 to 8 do
50003: LD_ADDR_VAR 0 3
50007: PUSH
50008: DOUBLE
50009: LD_INT 1
50011: DEC
50012: ST_TO_ADDR
50013: LD_INT 8
50015: PUSH
50016: FOR_TO
50017: IFFALSE 50108
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50019: LD_EXP 7
50023: PUSH
50024: LD_VAR 0 3
50028: ARRAY
50029: IFFALSE 50078
50031: PUSH
50032: LD_EXP 8
50036: PUSH
50037: LD_VAR 0 2
50041: ARRAY
50042: PUSH
50043: LD_EXP 8
50047: PUSH
50048: LD_VAR 0 3
50052: ARRAY
50053: NONEQUAL
50054: IFTRUE 50077
50056: PUSH
50057: LD_EXP 11
50061: NOT
50062: IFFALSE 50076
50064: PUSH
50065: LD_VAR 0 2
50069: PUSH
50070: LD_VAR 0 3
50074: NONEQUAL
50075: AND
50076: OR
50077: AND
50078: IFFALSE 50106
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50080: LD_VAR 0 3
50084: PPUSH
50085: LD_EXP 19
50089: PUSH
50090: LD_EXP 7
50094: PUSH
50095: LD_VAR 0 2
50099: ARRAY
50100: ARRAY
50101: PPUSH
50102: CALL_OW 333
50106: GO 50016
50108: POP
50109: POP
// end ;
50110: GO 49964
50112: POP
50113: POP
// end ;
50114: LD_VAR 0 1
50118: RET
// function EndBuildUp ; var i , j ; begin
50119: LD_INT 0
50121: PPUSH
50122: PPUSH
50123: PPUSH
// mpBuildUpTimeActive := false ;
50124: LD_ADDR_EXP 47
50128: PUSH
50129: LD_INT 0
50131: ST_TO_ADDR
// for i := 1 to 8 do
50132: LD_ADDR_VAR 0 2
50136: PUSH
50137: DOUBLE
50138: LD_INT 1
50140: DEC
50141: ST_TO_ADDR
50142: LD_INT 8
50144: PUSH
50145: FOR_TO
50146: IFFALSE 50293
// if mpSidePositions [ i ] then
50148: LD_EXP 7
50152: PUSH
50153: LD_VAR 0 2
50157: ARRAY
50158: IFFALSE 50291
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50160: LD_EXP 19
50164: PUSH
50165: LD_EXP 7
50169: PUSH
50170: LD_VAR 0 2
50174: ARRAY
50175: ARRAY
50176: PPUSH
50177: LD_INT 0
50179: PPUSH
50180: CALL_OW 424
// for j := 1 to 8 do
50184: LD_ADDR_VAR 0 3
50188: PUSH
50189: DOUBLE
50190: LD_INT 1
50192: DEC
50193: ST_TO_ADDR
50194: LD_INT 8
50196: PUSH
50197: FOR_TO
50198: IFFALSE 50289
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50200: LD_EXP 7
50204: PUSH
50205: LD_VAR 0 3
50209: ARRAY
50210: IFFALSE 50259
50212: PUSH
50213: LD_EXP 8
50217: PUSH
50218: LD_VAR 0 2
50222: ARRAY
50223: PUSH
50224: LD_EXP 8
50228: PUSH
50229: LD_VAR 0 3
50233: ARRAY
50234: NONEQUAL
50235: IFTRUE 50258
50237: PUSH
50238: LD_EXP 11
50242: NOT
50243: IFFALSE 50257
50245: PUSH
50246: LD_VAR 0 2
50250: PUSH
50251: LD_VAR 0 3
50255: NONEQUAL
50256: AND
50257: OR
50258: AND
50259: IFFALSE 50287
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50261: LD_VAR 0 3
50265: PPUSH
50266: LD_EXP 19
50270: PUSH
50271: LD_EXP 7
50275: PUSH
50276: LD_VAR 0 2
50280: ARRAY
50281: ARRAY
50282: PPUSH
50283: CALL_OW 334
50287: GO 50197
50289: POP
50290: POP
// end ;
50291: GO 50145
50293: POP
50294: POP
// end ;
50295: LD_VAR 0 1
50299: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50300: LD_EXP 47
50304: IFFALSE 50483
50306: GO 50308
50308: DISABLE
50309: LD_INT 0
50311: PPUSH
50312: PPUSH
// begin for i := 1 to 8 do
50313: LD_ADDR_VAR 0 1
50317: PUSH
50318: DOUBLE
50319: LD_INT 1
50321: DEC
50322: ST_TO_ADDR
50323: LD_INT 8
50325: PUSH
50326: FOR_TO
50327: IFFALSE 50480
// if mpSidePositions [ i ] then
50329: LD_EXP 7
50333: PUSH
50334: LD_VAR 0 1
50338: ARRAY
50339: IFFALSE 50478
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50341: LD_ADDR_VAR 0 2
50345: PUSH
50346: LD_EXP 19
50350: PUSH
50351: LD_EXP 7
50355: PUSH
50356: LD_VAR 0 1
50360: ARRAY
50361: ARRAY
50362: PPUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 21
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 21
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 22
50393: PUSH
50394: LD_OWVAR 2
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PPUSH
50407: CALL_OW 70
50411: PUSH
50412: FOR_IN
50413: IFFALSE 50476
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50415: LD_EXP 8
50419: PUSH
50420: LD_VAR 0 1
50424: ARRAY
50425: PUSH
50426: LD_EXP 8
50430: PUSH
50431: LD_OWVAR 2
50435: ARRAY
50436: NONEQUAL
50437: IFTRUE 50460
50439: PUSH
50440: LD_EXP 11
50444: NOT
50445: IFFALSE 50459
50447: PUSH
50448: LD_VAR 0 1
50452: PUSH
50453: LD_OWVAR 2
50457: NONEQUAL
50458: AND
50459: OR
50460: IFFALSE 50474
// ComMoveToArea ( un , BuildUpEscape ) ;
50462: LD_VAR 0 2
50466: PPUSH
50467: LD_INT 72
50469: PPUSH
50470: CALL_OW 113
50474: GO 50412
50476: POP
50477: POP
50478: GO 50326
50480: POP
50481: POP
// enable ;
50482: ENABLE
// end ;
50483: PPOPN 2
50485: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50486: LD_EXP 20
50490: IFFALSE 50540
50492: GO 50494
50494: DISABLE
50495: LD_INT 0
50497: PPUSH
// begin tmp := mpBuildUpTime ;
50498: LD_ADDR_VAR 0 1
50502: PUSH
50503: LD_EXP 20
50507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50508: LD_INT 35
50510: PPUSH
50511: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50515: LD_ADDR_VAR 0 1
50519: PUSH
50520: LD_VAR 0 1
50524: PUSH
50525: LD_INT 35
50527: MINUS
50528: ST_TO_ADDR
// until not tmp ;
50529: LD_VAR 0 1
50533: NOT
50534: IFFALSE 50508
// EndBuildUp ;
50536: CALL 50119 0 0
// end ;
50540: PPOPN 1
50542: END
// every 0 0$1 trigger mpActive marked mpWin do
50543: LD_INT 100
50545: IFFALSE 50579
50547: GO 50549
50549: DISABLE
// begin if IAmServer then
50550: CALL_OW 518
50554: IFFALSE 50563
// wait ( 0 0$3 ) ;
50556: LD_INT 105
50558: PPUSH
50559: CALL_OW 67
// if Multiplayer then
50563: LD_OWVAR 4
50567: IFFALSE 50575
// YouWinInMultiplayer else
50569: CALL_OW 106
50573: GO 50579
// YouWin ;
50575: CALL_OW 103
// end ;
50579: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50580: LD_INT 0
50582: PPUSH
// result := false ;
50583: LD_ADDR_VAR 0 3
50587: PUSH
50588: LD_INT 0
50590: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
50591: LD_VAR 0 1
50595: PUSH
50596: LD_INT 1
50598: DOUBLE
50599: EQUAL
50600: IFTRUE 50610
50602: LD_INT 5
50604: DOUBLE
50605: EQUAL
50606: IFTRUE 50610
50608: GO 50683
50610: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50611: LD_ADDR_VAR 0 3
50615: PUSH
50616: LD_INT 22
50618: PUSH
50619: LD_VAR 0 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 21
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 33
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 33
50653: PUSH
50654: LD_INT 5
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PPUSH
50671: CALL_OW 69
50675: PPUSH
50676: CALL 5150 0 1
50680: ST_TO_ADDR
// end ; GameTypeSurvival :
50681: GO 50922
50683: LD_INT 2
50685: DOUBLE
50686: EQUAL
50687: IFTRUE 50691
50689: GO 50821
50691: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50692: LD_ADDR_VAR 0 3
50696: PUSH
50697: LD_INT 22
50699: PUSH
50700: LD_VAR 0 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 30
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 30
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PPUSH
50741: CALL_OW 69
50745: PPUSH
50746: CALL 5150 0 1
50750: IFFALSE 50818
50752: PUSH
50753: LD_INT 22
50755: PUSH
50756: LD_VAR 0 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 21
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 33
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 33
50790: PUSH
50791: LD_INT 5
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PPUSH
50808: CALL_OW 69
50812: PPUSH
50813: CALL 5150 0 1
50817: AND
50818: ST_TO_ADDR
// end ; GameTypeKing :
50819: GO 50922
50821: LD_INT 3
50823: DOUBLE
50824: EQUAL
50825: IFTRUE 50829
50827: GO 50921
50829: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50830: LD_ADDR_VAR 0 3
50834: PUSH
50835: LD_INT 22
50837: PUSH
50838: LD_VAR 0 2
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 21
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 33
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 33
50872: PUSH
50873: LD_INT 5
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PPUSH
50890: CALL_OW 69
50894: PPUSH
50895: CALL 5150 0 1
50899: IFFALSE 50918
50901: PUSH
50902: LD_VAR 0 2
50906: PPUSH
50907: CALL 54779 0 1
50911: PUSH
50912: LD_EXP 35
50916: LESS
50917: AND
50918: ST_TO_ADDR
// end ; end ;
50919: GO 50922
50921: POP
// end ;
50922: LD_VAR 0 3
50926: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50927: LD_INT 100
50929: IFFALSE 51159
50931: GO 50933
50933: DISABLE
50934: LD_INT 0
50936: PPUSH
50937: PPUSH
// begin if Multiplayer then
50938: LD_OWVAR 4
50942: IFFALSE 50950
// SetPlayerSpectator ( ) else
50944: CALL_OW 572
50948: GO 50959
// FogOff ( your_side ) ;
50950: LD_OWVAR 2
50954: PPUSH
50955: CALL_OW 344
// repeat gameIsOn := false ;
50959: LD_ADDR_VAR 0 1
50963: PUSH
50964: LD_INT 0
50966: ST_TO_ADDR
// for i := 1 to 8 do
50967: LD_ADDR_VAR 0 2
50971: PUSH
50972: DOUBLE
50973: LD_INT 1
50975: DEC
50976: ST_TO_ADDR
50977: LD_INT 8
50979: PUSH
50980: FOR_TO
50981: IFFALSE 51111
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50983: LD_EXP 7
50987: PUSH
50988: LD_VAR 0 2
50992: ARRAY
50993: IFFALSE 51006
50995: PUSH
50996: LD_VAR 0 2
51000: PPUSH
51001: CALL_OW 108
51005: AND
51006: IFFALSE 51020
51008: PUSH
51009: LD_VAR 0 2
51013: PUSH
51014: LD_OWVAR 2
51018: NONEQUAL
51019: AND
51020: IFFALSE 51109
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51022: LD_EXP 8
51026: PUSH
51027: LD_VAR 0 2
51031: ARRAY
51032: NOT
51033: IFTRUE 51081
51035: PUSH
51036: LD_EXP 8
51040: PUSH
51041: LD_VAR 0 2
51045: ARRAY
51046: PUSH
51047: LD_EXP 8
51051: PUSH
51052: LD_OWVAR 2
51056: ARRAY
51057: NONEQUAL
51058: IFFALSE 51080
51060: PUSH
51061: LD_OWVAR 2
51065: PPUSH
51066: LD_VAR 0 2
51070: PPUSH
51071: CALL_OW 81
51075: PUSH
51076: LD_INT 1
51078: NONEQUAL
51079: AND
51080: OR
51081: IFFALSE 51109
// if HasPowerByGameType ( mpGameType , i ) then
51083: LD_EXP 3
51087: PPUSH
51088: LD_VAR 0 2
51092: PPUSH
51093: CALL 50580 0 2
51097: IFFALSE 51109
// begin gameIsOn := true ;
51099: LD_ADDR_VAR 0 1
51103: PUSH
51104: LD_INT 1
51106: ST_TO_ADDR
// break ;
51107: GO 51111
// end ;
51109: GO 50980
51111: POP
51112: POP
// wait ( 100 ) ;
51113: LD_INT 100
51115: PPUSH
51116: CALL_OW 67
// until not gameIsOn ;
51120: LD_VAR 0 1
51124: NOT
51125: IFFALSE 50959
// if IAmServer then
51127: CALL_OW 518
51131: IFFALSE 51140
// wait ( 0 0$3 ) ;
51133: LD_INT 105
51135: PPUSH
51136: CALL_OW 67
// if Multiplayer then
51140: LD_OWVAR 4
51144: IFFALSE 51152
// YouLostInMultiplayer else
51146: CALL_OW 107
51150: GO 51159
// YouLost (  ) ;
51152: LD_STRING 
51154: PPUSH
51155: CALL_OW 104
// end ;
51159: PPOPN 2
51161: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51162: LD_EXP 33
51166: IFFALSE 51550
51168: GO 51170
51170: DISABLE
51171: LD_INT 0
51173: PPUSH
51174: PPUSH
51175: PPUSH
51176: PPUSH
51177: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51178: LD_ADDR_VAR 0 5
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: LD_INT 4
51194: PUSH
51195: LD_INT 5
51197: PUSH
51198: LD_INT 6
51200: PUSH
51201: LD_INT 7
51203: PUSH
51204: LD_INT 8
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51217: LD_INT 350
51219: PPUSH
51220: CALL_OW 67
// for i := 1 to 8 do
51224: LD_ADDR_VAR 0 1
51228: PUSH
51229: DOUBLE
51230: LD_INT 1
51232: DEC
51233: ST_TO_ADDR
51234: LD_INT 8
51236: PUSH
51237: FOR_TO
51238: IFFALSE 51520
// begin j := sides [ i ] ;
51240: LD_ADDR_VAR 0 2
51244: PUSH
51245: LD_VAR 0 5
51249: PUSH
51250: LD_VAR 0 1
51254: ARRAY
51255: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51256: LD_EXP 40
51260: PUSH
51261: LD_VAR 0 2
51265: ARRAY
51266: PPUSH
51267: CALL 5150 0 1
51271: IFFALSE 51284
51273: PUSH
51274: LD_VAR 0 2
51278: PPUSH
51279: CALL_OW 108
51283: AND
51284: IFFALSE 51302
51286: PUSH
51287: LD_EXP 3
51291: PPUSH
51292: LD_VAR 0 2
51296: PPUSH
51297: CALL 50580 0 2
51301: AND
51302: IFFALSE 51518
// begin wait ( mpRespawn div 2 ) ;
51304: LD_EXP 33
51308: PUSH
51309: LD_INT 2
51311: DIV
51312: PPUSH
51313: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51317: LD_ADDR_VAR 0 3
51321: PUSH
51322: LD_INT 22
51324: PUSH
51325: LD_VAR 0 2
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 50
51336: PUSH
51337: EMPTY
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 30
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 30
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: LIST
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: PPUSH
51373: CALL_OW 69
51377: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51378: LD_VAR 0 3
51382: NOT
51383: IFTRUE 51397
51385: PUSH
51386: LD_VAR 0 2
51390: PPUSH
51391: CALL_OW 108
51395: NOT
51396: OR
51397: IFTRUE 51416
51399: PUSH
51400: LD_EXP 3
51404: PPUSH
51405: LD_VAR 0 2
51409: PPUSH
51410: CALL 50580 0 2
51414: NOT
51415: OR
51416: IFFALSE 51420
// continue ;
51418: GO 51237
// spawn := tmp [ 1 ] ;
51420: LD_ADDR_VAR 0 4
51424: PUSH
51425: LD_VAR 0 3
51429: PUSH
51430: LD_INT 1
51432: ARRAY
51433: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51434: LD_EXP 40
51438: PUSH
51439: LD_VAR 0 2
51443: ARRAY
51444: PUSH
51445: LD_INT 1
51447: ARRAY
51448: PPUSH
51449: LD_VAR 0 4
51453: PPUSH
51454: CALL_OW 250
51458: PPUSH
51459: LD_VAR 0 4
51463: PPUSH
51464: CALL_OW 251
51468: PPUSH
51469: LD_INT 32
51471: PPUSH
51472: LD_INT 1
51474: PPUSH
51475: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51479: LD_ADDR_EXP 40
51483: PUSH
51484: LD_EXP 40
51488: PPUSH
51489: LD_VAR 0 2
51493: PPUSH
51494: LD_EXP 40
51498: PUSH
51499: LD_VAR 0 2
51503: ARRAY
51504: PPUSH
51505: LD_INT 1
51507: PPUSH
51508: CALL_OW 3
51512: PPUSH
51513: CALL_OW 1
51517: ST_TO_ADDR
// end ; end ;
51518: GO 51237
51520: POP
51521: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51522: LD_ADDR_VAR 0 5
51526: PUSH
51527: LD_VAR 0 5
51531: PPUSH
51532: LD_INT 1
51534: PPUSH
51535: LD_INT 8
51537: PPUSH
51538: LD_INT 1
51540: PPUSH
51541: CALL 7442 0 4
51545: ST_TO_ADDR
// until false ;
51546: LD_INT 0
51548: IFFALSE 51217
// end ;
51550: PPOPN 5
51552: END
// every 0 0$1 marked mpActive do
51553: GO 51555
51555: DISABLE
// begin enable ;
51556: ENABLE
// if not mpDisplayStrings then
51557: LD_EXP 38
51561: NOT
51562: IFFALSE 51573
// begin display_strings := [ ] ;
51564: LD_ADDR_OWVAR 47
51568: PUSH
51569: EMPTY
51570: ST_TO_ADDR
// exit ;
51571: GO 51583
// end ; display_strings := mpDisplayStrings ;
51573: LD_ADDR_OWVAR 47
51577: PUSH
51578: LD_EXP 38
51582: ST_TO_ADDR
// end ; end_of_file
51583: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51584: LD_INT 0
51586: PPUSH
51587: PPUSH
51588: PPUSH
51589: PPUSH
51590: PPUSH
51591: PPUSH
51592: PPUSH
51593: PPUSH
51594: PPUSH
// if GetType ( un ) = unit_vehicle then
51595: LD_VAR 0 1
51599: PPUSH
51600: CALL_OW 247
51604: PUSH
51605: LD_INT 2
51607: EQUAL
51608: IFFALSE 51612
// exit ;
51610: GO 52286
// side := GetSide ( un ) ;
51612: LD_ADDR_VAR 0 9
51616: PUSH
51617: LD_VAR 0 1
51621: PPUSH
51622: CALL_OW 255
51626: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51627: LD_EXP 3
51631: PUSH
51632: LD_INT 2
51634: EQUAL
51635: IFFALSE 51729
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51637: LD_VAR 0 1
51641: PPUSH
51642: CALL_OW 266
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: IN
51657: IFFALSE 51729
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51659: LD_ADDR_VAR 0 3
51663: PUSH
51664: LD_INT 22
51666: PUSH
51667: LD_VAR 0 9
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 21
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 33
51691: PUSH
51692: LD_INT 3
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PPUSH
51708: CALL_OW 69
51712: PUSH
51713: FOR_IN
51714: IFFALSE 51727
// KillUnit ( i ) ;
51716: LD_VAR 0 3
51720: PPUSH
51721: CALL_OW 66
51725: GO 51713
51727: POP
51728: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51729: LD_VAR 0 1
51733: PPUSH
51734: CALL_OW 257
51738: PUSH
51739: LD_INT 12
51741: PUSH
51742: LD_INT 17
51744: PUSH
51745: LD_INT 15
51747: PUSH
51748: LD_INT 16
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: IN
51757: IFTRUE 51774
51759: PUSH
51760: LD_VAR 0 1
51764: PPUSH
51765: CALL_OW 263
51769: PUSH
51770: LD_INT 5
51772: EQUAL
51773: OR
51774: IFFALSE 52011
// begin tag := 0 ;
51776: LD_ADDR_VAR 0 5
51780: PUSH
51781: LD_INT 0
51783: ST_TO_ADDR
// for i := 1 to 8 do
51784: LD_ADDR_VAR 0 3
51788: PUSH
51789: DOUBLE
51790: LD_INT 1
51792: DEC
51793: ST_TO_ADDR
51794: LD_INT 8
51796: PUSH
51797: FOR_TO
51798: IFFALSE 51832
// if un in mpApePosIndex [ i ] then
51800: LD_VAR 0 1
51804: PUSH
51805: LD_EXP 32
51809: PUSH
51810: LD_VAR 0 3
51814: ARRAY
51815: IN
51816: IFFALSE 51830
// begin tag := i ;
51818: LD_ADDR_VAR 0 5
51822: PUSH
51823: LD_VAR 0 3
51827: ST_TO_ADDR
// break ;
51828: GO 51832
// end ;
51830: GO 51797
51832: POP
51833: POP
// if not tag then
51834: LD_VAR 0 5
51838: NOT
51839: IFFALSE 51843
// exit ;
51841: GO 52286
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
51843: LD_ADDR_VAR 0 7
51847: PUSH
51848: LD_EXP 31
51852: PUSH
51853: LD_EXP 7
51857: PUSH
51858: LD_VAR 0 5
51862: ARRAY
51863: ARRAY
51864: ST_TO_ADDR
// if not area then
51865: LD_VAR 0 7
51869: NOT
51870: IFFALSE 51874
// exit ;
51872: GO 52286
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
51874: LD_INT 14700
51876: PUSH
51877: LD_VAR 0 1
51881: PUSH
51882: LD_INT 5
51884: MOD
51885: PUSH
51886: LD_INT 1
51888: PLUS
51889: PUSH
51890: LD_INT 700
51892: MUL
51893: PLUS
51894: PPUSH
51895: CALL_OW 67
// repeat wait ( 10 ) ;
51899: LD_INT 10
51901: PPUSH
51902: CALL_OW 67
// until not mpBlockRespThread ;
51906: LD_EXP 45
51910: NOT
51911: IFFALSE 51899
// mpBlockRespThread := true ;
51913: LD_ADDR_EXP 45
51917: PUSH
51918: LD_INT 1
51920: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51921: LD_INT 0
51923: PPUSH
51924: CALL 37209 0 1
// ape := CreateHuman ;
51928: LD_ADDR_VAR 0 4
51932: PUSH
51933: CALL_OW 44
51937: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51938: LD_ADDR_EXP 32
51942: PUSH
51943: LD_EXP 32
51947: PPUSH
51948: LD_VAR 0 5
51952: PPUSH
51953: LD_EXP 32
51957: PUSH
51958: LD_VAR 0 5
51962: ARRAY
51963: PPUSH
51964: LD_VAR 0 4
51968: PPUSH
51969: CALL 41082 0 2
51973: PPUSH
51974: CALL_OW 1
51978: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51979: LD_VAR 0 4
51983: PPUSH
51984: LD_VAR 0 7
51988: PPUSH
51989: LD_INT 0
51991: PPUSH
51992: CALL_OW 49
// wait ( 10 ) ;
51996: LD_INT 10
51998: PPUSH
51999: CALL_OW 67
// mpBlockRespThread := false ;
52003: LD_ADDR_EXP 45
52007: PUSH
52008: LD_INT 0
52010: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52011: LD_VAR 0 1
52015: PPUSH
52016: CALL_OW 247
52020: PUSH
52021: LD_INT 1
52023: EQUAL
52024: IFFALSE 52041
52026: PUSH
52027: LD_VAR 0 1
52031: PPUSH
52032: CALL_OW 248
52036: PUSH
52037: LD_INT 0
52039: GREATER
52040: AND
52041: IFFALSE 52286
// begin if not mpRespawn then
52043: LD_EXP 33
52047: NOT
52048: IFFALSE 52052
// exit ;
52050: GO 52286
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52052: LD_VAR 0 9
52056: PPUSH
52057: CALL_OW 108
52061: NOT
52062: IFFALSE 52081
52064: PUSH
52065: LD_EXP 3
52069: PPUSH
52070: LD_VAR 0 9
52074: PPUSH
52075: CALL 50580 0 2
52079: NOT
52080: AND
52081: IFFALSE 52085
// exit ;
52083: GO 52286
// side := GetSide ( un ) ;
52085: LD_ADDR_VAR 0 9
52089: PUSH
52090: LD_VAR 0 1
52094: PPUSH
52095: CALL_OW 255
52099: ST_TO_ADDR
// nation := GetNation ( un ) ;
52100: LD_ADDR_VAR 0 8
52104: PUSH
52105: LD_VAR 0 1
52109: PPUSH
52110: CALL_OW 248
52114: ST_TO_ADDR
// class := GetClass ( un ) ;
52115: LD_ADDR_VAR 0 6
52119: PUSH
52120: LD_VAR 0 1
52124: PPUSH
52125: CALL_OW 257
52129: ST_TO_ADDR
// if class > 4 then
52130: LD_VAR 0 6
52134: PUSH
52135: LD_INT 4
52137: GREATER
52138: IFFALSE 52148
// class := 1 ;
52140: LD_ADDR_VAR 0 6
52144: PUSH
52145: LD_INT 1
52147: ST_TO_ADDR
// repeat wait ( 10 ) ;
52148: LD_INT 10
52150: PPUSH
52151: CALL_OW 67
// until not mpBlockRespThread ;
52155: LD_EXP 45
52159: NOT
52160: IFFALSE 52148
// mpBlockRespThread := true ;
52162: LD_ADDR_EXP 45
52166: PUSH
52167: LD_INT 1
52169: ST_TO_ADDR
// uc_side := side ;
52170: LD_ADDR_OWVAR 20
52174: PUSH
52175: LD_VAR 0 9
52179: ST_TO_ADDR
// uc_nation := nation ;
52180: LD_ADDR_OWVAR 21
52184: PUSH
52185: LD_VAR 0 8
52189: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52190: LD_INT 0
52192: PPUSH
52193: LD_VAR 0 6
52197: PPUSH
52198: LD_INT 2
52200: PPUSH
52201: CALL_OW 380
// un := CreateHuman ;
52205: LD_ADDR_VAR 0 1
52209: PUSH
52210: CALL_OW 44
52214: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52215: LD_ADDR_EXP 40
52219: PUSH
52220: LD_EXP 40
52224: PPUSH
52225: LD_VAR 0 9
52229: PPUSH
52230: LD_EXP 40
52234: PUSH
52235: LD_VAR 0 9
52239: ARRAY
52240: PPUSH
52241: LD_EXP 40
52245: PUSH
52246: LD_VAR 0 9
52250: ARRAY
52251: PUSH
52252: LD_INT 1
52254: PLUS
52255: PPUSH
52256: LD_VAR 0 1
52260: PPUSH
52261: CALL_OW 1
52265: PPUSH
52266: CALL_OW 1
52270: ST_TO_ADDR
// wait ( 10 ) ;
52271: LD_INT 10
52273: PPUSH
52274: CALL_OW 67
// mpBlockRespThread := false ;
52278: LD_ADDR_EXP 45
52282: PUSH
52283: LD_INT 0
52285: ST_TO_ADDR
// end ; end ;
52286: LD_VAR 0 2
52290: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52291: LD_INT 0
52293: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52294: LD_VAR 0 1
52298: PPUSH
52299: CALL_OW 266
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: IN
52314: IFFALSE 52339
// SetBName ( building , @ & GetSide ( building ) ) ;
52316: LD_VAR 0 1
52320: PPUSH
52321: LD_STRING @
52323: PUSH
52324: LD_VAR 0 1
52328: PPUSH
52329: CALL_OW 255
52333: STR
52334: PPUSH
52335: CALL_OW 500
// end ;
52339: LD_VAR 0 2
52343: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52344: LD_INT 0
52346: PPUSH
52347: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52348: LD_EXP 3
52352: PUSH
52353: LD_INT 2
52355: EQUAL
52356: IFFALSE 52380
52358: PUSH
52359: LD_VAR 0 1
52363: PPUSH
52364: CALL_OW 266
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: IN
52379: AND
52380: IFFALSE 52459
// begin SetSide ( building , oldSide ) ;
52382: LD_VAR 0 1
52386: PPUSH
52387: LD_VAR 0 2
52391: PPUSH
52392: CALL_OW 235
// KillUnit ( building ) ;
52396: LD_VAR 0 1
52400: PPUSH
52401: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52405: LD_ADDR_VAR 0 5
52409: PUSH
52410: LD_INT 22
52412: PUSH
52413: LD_VAR 0 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 21
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PPUSH
52436: CALL_OW 69
52440: PUSH
52441: FOR_IN
52442: IFFALSE 52455
// KillUnit ( i ) ;
52444: LD_VAR 0 5
52448: PPUSH
52449: CALL_OW 66
52453: GO 52441
52455: POP
52456: POP
// exit ;
52457: GO 52504
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52459: LD_VAR 0 1
52463: PPUSH
52464: CALL_OW 266
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: IN
52479: IFFALSE 52504
// SetBName ( building , @ & GetSide ( building ) ) ;
52481: LD_VAR 0 1
52485: PPUSH
52486: LD_STRING @
52488: PUSH
52489: LD_VAR 0 1
52493: PPUSH
52494: CALL_OW 255
52498: STR
52499: PPUSH
52500: CALL_OW 500
// end ;
52504: LD_VAR 0 4
52508: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52509: LD_INT 0
52511: PPUSH
52512: PPUSH
52513: PPUSH
// if mpGameType <> GameTypeFamine then
52514: LD_EXP 3
52518: PUSH
52519: LD_INT 5
52521: NONEQUAL
52522: IFFALSE 52526
// exit ;
52524: GO 52740
// for i := 1 to mpGlobalOilDeposits do
52526: LD_ADDR_VAR 0 6
52530: PUSH
52531: DOUBLE
52532: LD_INT 1
52534: DEC
52535: ST_TO_ADDR
52536: LD_EXP 41
52540: PUSH
52541: FOR_TO
52542: IFFALSE 52738
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52544: LD_EXP 41
52548: PUSH
52549: LD_VAR 0 6
52553: ARRAY
52554: PUSH
52555: LD_INT 1
52557: ARRAY
52558: PPUSH
52559: LD_EXP 41
52563: PUSH
52564: LD_VAR 0 6
52568: ARRAY
52569: PUSH
52570: LD_INT 2
52572: ARRAY
52573: PPUSH
52574: CALL_OW 428
52578: PUSH
52579: LD_VAR 0 1
52583: EQUAL
52584: IFFALSE 52736
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52586: LD_ADDR_VAR 0 7
52590: PUSH
52591: LD_EXP 41
52595: PUSH
52596: LD_VAR 0 6
52600: ARRAY
52601: PUSH
52602: LD_INT 3
52604: ARRAY
52605: ST_TO_ADDR
// value := Dec ( value ) ;
52606: LD_ADDR_VAR 0 7
52610: PUSH
52611: LD_VAR 0 7
52615: PPUSH
52616: CALL 42477 0 1
52620: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52621: LD_ADDR_EXP 41
52625: PUSH
52626: LD_EXP 41
52630: PPUSH
52631: LD_VAR 0 6
52635: PPUSH
52636: LD_EXP 41
52640: PUSH
52641: LD_VAR 0 6
52645: ARRAY
52646: PPUSH
52647: LD_INT 3
52649: PPUSH
52650: LD_VAR 0 7
52654: PPUSH
52655: CALL_OW 1
52659: PPUSH
52660: CALL_OW 1
52664: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52665: LD_VAR 0 1
52669: PPUSH
52670: LD_VAR 0 7
52674: PPUSH
52675: CALL_OW 505
// if value = 0 then
52679: LD_VAR 0 7
52683: PUSH
52684: LD_INT 0
52686: EQUAL
52687: IFFALSE 52736
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52689: LD_EXP 41
52693: PUSH
52694: LD_VAR 0 6
52698: ARRAY
52699: PUSH
52700: LD_INT 1
52702: ARRAY
52703: PPUSH
52704: LD_EXP 41
52708: PUSH
52709: LD_VAR 0 6
52713: ARRAY
52714: PUSH
52715: LD_INT 2
52717: ARRAY
52718: PPUSH
52719: CALL_OW 63
// KillUnit ( building ) ;
52723: LD_VAR 0 1
52727: PPUSH
52728: CALL_OW 66
// exit ;
52732: POP
52733: POP
52734: GO 52740
// end ; end ; end ;
52736: GO 52541
52738: POP
52739: POP
// end ;
52740: LD_VAR 0 5
52744: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52745: LD_INT 0
52747: PPUSH
52748: PPUSH
52749: PPUSH
// if mpGameType <> GameTypeFamine then
52750: LD_EXP 3
52754: PUSH
52755: LD_INT 5
52757: NONEQUAL
52758: IFFALSE 52762
// exit ;
52760: GO 52976
// for i := 1 to mpGlobalSibDeposits do
52762: LD_ADDR_VAR 0 6
52766: PUSH
52767: DOUBLE
52768: LD_INT 1
52770: DEC
52771: ST_TO_ADDR
52772: LD_EXP 42
52776: PUSH
52777: FOR_TO
52778: IFFALSE 52974
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52780: LD_EXP 42
52784: PUSH
52785: LD_VAR 0 6
52789: ARRAY
52790: PUSH
52791: LD_INT 1
52793: ARRAY
52794: PPUSH
52795: LD_EXP 42
52799: PUSH
52800: LD_VAR 0 6
52804: ARRAY
52805: PUSH
52806: LD_INT 2
52808: ARRAY
52809: PPUSH
52810: CALL_OW 428
52814: PUSH
52815: LD_VAR 0 1
52819: EQUAL
52820: IFFALSE 52972
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
52822: LD_ADDR_VAR 0 7
52826: PUSH
52827: LD_EXP 42
52831: PUSH
52832: LD_VAR 0 6
52836: ARRAY
52837: PUSH
52838: LD_INT 3
52840: ARRAY
52841: ST_TO_ADDR
// value := Dec ( value ) ;
52842: LD_ADDR_VAR 0 7
52846: PUSH
52847: LD_VAR 0 7
52851: PPUSH
52852: CALL 42477 0 1
52856: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
52857: LD_ADDR_EXP 42
52861: PUSH
52862: LD_EXP 42
52866: PPUSH
52867: LD_VAR 0 6
52871: PPUSH
52872: LD_EXP 42
52876: PUSH
52877: LD_VAR 0 6
52881: ARRAY
52882: PPUSH
52883: LD_INT 3
52885: PPUSH
52886: LD_VAR 0 7
52890: PPUSH
52891: CALL_OW 1
52895: PPUSH
52896: CALL_OW 1
52900: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52901: LD_VAR 0 1
52905: PPUSH
52906: LD_VAR 0 7
52910: PPUSH
52911: CALL_OW 505
// if value = 0 then
52915: LD_VAR 0 7
52919: PUSH
52920: LD_INT 0
52922: EQUAL
52923: IFFALSE 52972
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
52925: LD_EXP 42
52929: PUSH
52930: LD_VAR 0 6
52934: ARRAY
52935: PUSH
52936: LD_INT 1
52938: ARRAY
52939: PPUSH
52940: LD_EXP 42
52944: PUSH
52945: LD_VAR 0 6
52949: ARRAY
52950: PUSH
52951: LD_INT 2
52953: ARRAY
52954: PPUSH
52955: CALL_OW 63
// KillUnit ( building ) ;
52959: LD_VAR 0 1
52963: PPUSH
52964: CALL_OW 66
// exit ;
52968: POP
52969: POP
52970: GO 52976
// end ; end ; end ;
52972: GO 52777
52974: POP
52975: POP
// end ; end_of_file
52976: LD_VAR 0 5
52980: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
52981: LD_EXP 39
52985: IFFALSE 52993
52987: PUSH
52988: CALL 53203 0 0
52992: AND
52993: IFFALSE 53001
52995: PUSH
52996: LD_OWVAR 4
53000: AND
53001: IFFALSE 53200
53003: GO 53005
53005: DISABLE
53006: LD_INT 0
53008: PPUSH
53009: PPUSH
// begin canWin := false ;
53010: LD_ADDR_VAR 0 2
53014: PUSH
53015: LD_INT 0
53017: ST_TO_ADDR
// if not HasPower ( your_side ) then
53018: LD_OWVAR 2
53022: PPUSH
53023: CALL 53245 0 1
53027: NOT
53028: IFFALSE 53039
// begin Multiplayer_Loose_Message ;
53030: CALL_OW 521
// enable ( mpLose ) ;
53034: LD_INT 102
53036: ENABLE_MARKED
// end else
53037: GO 53200
// begin canWin := true ;
53039: LD_ADDR_VAR 0 2
53043: PUSH
53044: LD_INT 1
53046: ST_TO_ADDR
// for i := 1 to 8 do
53047: LD_ADDR_VAR 0 1
53051: PUSH
53052: DOUBLE
53053: LD_INT 1
53055: DEC
53056: ST_TO_ADDR
53057: LD_INT 8
53059: PUSH
53060: FOR_TO
53061: IFFALSE 53186
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53063: LD_EXP 7
53067: PUSH
53068: LD_VAR 0 1
53072: ARRAY
53073: IFFALSE 53086
53075: PUSH
53076: LD_VAR 0 1
53080: PPUSH
53081: CALL_OW 108
53085: AND
53086: IFFALSE 53100
53088: PUSH
53089: LD_VAR 0 1
53093: PUSH
53094: LD_OWVAR 2
53098: NONEQUAL
53099: AND
53100: IFFALSE 53184
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53102: LD_EXP 8
53106: PUSH
53107: LD_VAR 0 1
53111: ARRAY
53112: NOT
53113: IFTRUE 53161
53115: PUSH
53116: LD_EXP 8
53120: PUSH
53121: LD_VAR 0 1
53125: ARRAY
53126: PUSH
53127: LD_EXP 8
53131: PUSH
53132: LD_OWVAR 2
53136: ARRAY
53137: NONEQUAL
53138: IFFALSE 53160
53140: PUSH
53141: LD_OWVAR 2
53145: PPUSH
53146: LD_VAR 0 1
53150: PPUSH
53151: CALL_OW 81
53155: PUSH
53156: LD_INT 1
53158: NONEQUAL
53159: AND
53160: OR
53161: IFFALSE 53184
// if HasPower ( i ) then
53163: LD_VAR 0 1
53167: PPUSH
53168: CALL 53245 0 1
53172: IFFALSE 53184
// begin canWin := false ;
53174: LD_ADDR_VAR 0 2
53178: PUSH
53179: LD_INT 0
53181: ST_TO_ADDR
// break ;
53182: GO 53186
// end ;
53184: GO 53060
53186: POP
53187: POP
// if canWin then
53188: LD_VAR 0 2
53192: IFFALSE 53199
// enable ( mpWin ) else
53194: LD_INT 101
53196: ENABLE_MARKED
53197: GO 53200
// enable ;
53199: ENABLE
// end ; end ;
53200: PPOPN 2
53202: END
// function CanWinLoose ; begin
53203: LD_INT 0
53205: PPUSH
// result := true ;
53206: LD_ADDR_VAR 0 1
53210: PUSH
53211: LD_INT 1
53213: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53214: CALL_OW 531
53218: IFFALSE 53230
53220: PUSH
53221: CALL_OW 519
53225: PUSH
53226: LD_INT 1
53228: GREATER
53229: AND
53230: IFFALSE 53240
// result := false ;
53232: LD_ADDR_VAR 0 1
53236: PUSH
53237: LD_INT 0
53239: ST_TO_ADDR
// end ;
53240: LD_VAR 0 1
53244: RET
// function HasPower ( i ) ; begin
53245: LD_INT 0
53247: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53248: LD_ADDR_VAR 0 2
53252: PUSH
53253: LD_INT 22
53255: PUSH
53256: LD_VAR 0 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: PUSH
53268: LD_INT 21
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 33
53280: PUSH
53281: LD_INT 3
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 33
53290: PUSH
53291: LD_INT 5
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PPUSH
53308: CALL_OW 69
53312: ST_TO_ADDR
// end ; end_of_file
53313: LD_VAR 0 2
53317: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53318: LD_EXP 39
53322: IFFALSE 53365
53324: GO 53326
53326: DISABLE
53327: LD_INT 0
53329: PPUSH
// begin for i := 1 to 8 do
53330: LD_ADDR_VAR 0 1
53334: PUSH
53335: DOUBLE
53336: LD_INT 1
53338: DEC
53339: ST_TO_ADDR
53340: LD_INT 8
53342: PUSH
53343: FOR_TO
53344: IFFALSE 53363
// SetRestrict ( b_depot , i , state_disabled ) ;
53346: LD_INT 0
53348: PPUSH
53349: LD_VAR 0 1
53353: PPUSH
53354: LD_INT 0
53356: PPUSH
53357: CALL_OW 324
53361: GO 53343
53363: POP
53364: POP
// end ;
53365: PPOPN 1
53367: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53368: LD_EXP 39
53372: IFFALSE 53380
53374: PUSH
53375: CALL 53590 0 0
53379: AND
53380: IFFALSE 53388
53382: PUSH
53383: LD_OWVAR 4
53387: AND
53388: IFFALSE 53587
53390: GO 53392
53392: DISABLE
53393: LD_INT 0
53395: PPUSH
53396: PPUSH
// begin canWin := false ;
53397: LD_ADDR_VAR 0 2
53401: PUSH
53402: LD_INT 0
53404: ST_TO_ADDR
// if not HasPower ( your_side ) then
53405: LD_OWVAR 2
53409: PPUSH
53410: CALL 53632 0 1
53414: NOT
53415: IFFALSE 53426
// begin Multiplayer_Loose_Message ;
53417: CALL_OW 521
// enable ( mpLose ) ;
53421: LD_INT 102
53423: ENABLE_MARKED
// end else
53424: GO 53587
// begin canWin := true ;
53426: LD_ADDR_VAR 0 2
53430: PUSH
53431: LD_INT 1
53433: ST_TO_ADDR
// for i := 1 to 8 do
53434: LD_ADDR_VAR 0 1
53438: PUSH
53439: DOUBLE
53440: LD_INT 1
53442: DEC
53443: ST_TO_ADDR
53444: LD_INT 8
53446: PUSH
53447: FOR_TO
53448: IFFALSE 53573
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53450: LD_EXP 7
53454: PUSH
53455: LD_VAR 0 1
53459: ARRAY
53460: IFFALSE 53473
53462: PUSH
53463: LD_VAR 0 1
53467: PPUSH
53468: CALL_OW 108
53472: AND
53473: IFFALSE 53487
53475: PUSH
53476: LD_VAR 0 1
53480: PUSH
53481: LD_OWVAR 2
53485: NONEQUAL
53486: AND
53487: IFFALSE 53571
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53489: LD_EXP 8
53493: PUSH
53494: LD_VAR 0 1
53498: ARRAY
53499: NOT
53500: IFTRUE 53548
53502: PUSH
53503: LD_EXP 8
53507: PUSH
53508: LD_VAR 0 1
53512: ARRAY
53513: PUSH
53514: LD_EXP 8
53518: PUSH
53519: LD_OWVAR 2
53523: ARRAY
53524: NONEQUAL
53525: IFFALSE 53547
53527: PUSH
53528: LD_OWVAR 2
53532: PPUSH
53533: LD_VAR 0 1
53537: PPUSH
53538: CALL_OW 81
53542: PUSH
53543: LD_INT 1
53545: NONEQUAL
53546: AND
53547: OR
53548: IFFALSE 53571
// if HasPower ( i ) then
53550: LD_VAR 0 1
53554: PPUSH
53555: CALL 53632 0 1
53559: IFFALSE 53571
// begin canWin := false ;
53561: LD_ADDR_VAR 0 2
53565: PUSH
53566: LD_INT 0
53568: ST_TO_ADDR
// break ;
53569: GO 53573
// end ;
53571: GO 53447
53573: POP
53574: POP
// if canWin then
53575: LD_VAR 0 2
53579: IFFALSE 53586
// enable ( mpWin ) else
53581: LD_INT 101
53583: ENABLE_MARKED
53584: GO 53587
// enable ;
53586: ENABLE
// end ; end ;
53587: PPOPN 2
53589: END
// function CanWinLoose ; begin
53590: LD_INT 0
53592: PPUSH
// result := true ;
53593: LD_ADDR_VAR 0 1
53597: PUSH
53598: LD_INT 1
53600: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53601: CALL_OW 531
53605: IFFALSE 53617
53607: PUSH
53608: CALL_OW 519
53612: PUSH
53613: LD_INT 1
53615: GREATER
53616: AND
53617: IFFALSE 53627
// result := false ;
53619: LD_ADDR_VAR 0 1
53623: PUSH
53624: LD_INT 0
53626: ST_TO_ADDR
// end ;
53627: LD_VAR 0 1
53631: RET
// function HasPower ( i ) ; begin
53632: LD_INT 0
53634: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
53635: LD_INT 22
53637: PUSH
53638: LD_VAR 0 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 30
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 30
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PPUSH
53679: CALL_OW 69
53683: NOT
53684: IFFALSE 53688
// exit ;
53686: GO 53753
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53688: LD_ADDR_VAR 0 2
53692: PUSH
53693: LD_INT 22
53695: PUSH
53696: LD_VAR 0 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 21
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 33
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 33
53730: PUSH
53731: LD_INT 5
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PPUSH
53748: CALL_OW 69
53752: ST_TO_ADDR
// end ; end_of_file
53753: LD_VAR 0 2
53757: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
53758: LD_EXP 39
53762: IFFALSE 54103
53764: GO 53766
53766: DISABLE
53767: LD_INT 0
53769: PPUSH
53770: PPUSH
53771: PPUSH
// begin mpKingPoints := [ ] ;
53772: LD_ADDR_EXP 48
53776: PUSH
53777: EMPTY
53778: ST_TO_ADDR
// if mpTeamGame then
53779: LD_EXP 11
53783: IFFALSE 53837
// begin for i := 1 to Count ( mpTeams ) do
53785: LD_ADDR_VAR 0 1
53789: PUSH
53790: DOUBLE
53791: LD_INT 1
53793: DEC
53794: ST_TO_ADDR
53795: LD_EXP 10
53799: PPUSH
53800: CALL 5150 0 1
53804: PUSH
53805: FOR_TO
53806: IFFALSE 53833
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53808: LD_ADDR_EXP 48
53812: PUSH
53813: LD_EXP 48
53817: PPUSH
53818: LD_VAR 0 1
53822: PPUSH
53823: LD_INT 0
53825: PPUSH
53826: CALL_OW 1
53830: ST_TO_ADDR
53831: GO 53805
53833: POP
53834: POP
// end else
53835: GO 53880
// begin for i := 1 to 8 do
53837: LD_ADDR_VAR 0 1
53841: PUSH
53842: DOUBLE
53843: LD_INT 1
53845: DEC
53846: ST_TO_ADDR
53847: LD_INT 8
53849: PUSH
53850: FOR_TO
53851: IFFALSE 53878
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53853: LD_ADDR_EXP 48
53857: PUSH
53858: LD_EXP 48
53862: PPUSH
53863: LD_VAR 0 1
53867: PPUSH
53868: LD_INT 0
53870: PPUSH
53871: CALL_OW 1
53875: ST_TO_ADDR
53876: GO 53850
53878: POP
53879: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
53880: LD_ADDR_VAR 0 3
53884: PUSH
53885: LD_EXP 2
53889: PPUSH
53890: LD_INT 0
53892: PPUSH
53893: CALL_OW 517
53897: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53898: LD_ADDR_VAR 0 1
53902: PUSH
53903: DOUBLE
53904: LD_INT 1
53906: DEC
53907: ST_TO_ADDR
53908: LD_VAR 0 3
53912: PUSH
53913: LD_INT 1
53915: ARRAY
53916: PUSH
53917: FOR_TO
53918: IFFALSE 53985
// for j := 1 to 8 do
53920: LD_ADDR_VAR 0 2
53924: PUSH
53925: DOUBLE
53926: LD_INT 1
53928: DEC
53929: ST_TO_ADDR
53930: LD_INT 8
53932: PUSH
53933: FOR_TO
53934: IFFALSE 53981
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
53936: LD_VAR 0 3
53940: PUSH
53941: LD_INT 1
53943: ARRAY
53944: PUSH
53945: LD_VAR 0 1
53949: ARRAY
53950: PPUSH
53951: LD_VAR 0 3
53955: PUSH
53956: LD_INT 2
53958: ARRAY
53959: PUSH
53960: LD_VAR 0 1
53964: ARRAY
53965: PPUSH
53966: LD_VAR 0 2
53970: PPUSH
53971: LD_INT 12
53973: NEG
53974: PPUSH
53975: CALL_OW 330
53979: GO 53933
53981: POP
53982: POP
53983: GO 53917
53985: POP
53986: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
53987: LD_EXP 34
53991: PPUSH
53992: LD_INT 1
53994: PPUSH
53995: CALL_OW 424
// UpdateCounter ;
53999: CALL 54609 0 0
// repeat wait ( 0 0$1 ) ;
54003: LD_INT 35
54005: PPUSH
54006: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54010: LD_ADDR_VAR 0 3
54014: PUSH
54015: LD_EXP 34
54019: PPUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 57
54025: PUSH
54026: EMPTY
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 50
54035: PUSH
54036: EMPTY
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 30
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 30
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: PPUSH
54072: CALL_OW 70
54076: ST_TO_ADDR
// if not tmp then
54077: LD_VAR 0 3
54081: NOT
54082: IFFALSE 54086
// continue ;
54084: GO 54003
// AddPoints ( tmp ) ;
54086: LD_VAR 0 3
54090: PPUSH
54091: CALL 54287 0 1
// UpdateCounter ;
54095: CALL 54609 0 0
// until false ;
54099: LD_INT 0
54101: IFFALSE 54003
// end ;
54103: PPOPN 3
54105: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54106: LD_EXP 39
54110: IFFALSE 54118
54112: PUSH
54113: LD_EXP 37
54117: AND
54118: IFFALSE 54284
54120: GO 54122
54122: DISABLE
54123: LD_INT 0
54125: PPUSH
54126: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54127: LD_ADDR_VAR 0 2
54131: PUSH
54132: LD_EXP 2
54136: PPUSH
54137: LD_INT 0
54139: PPUSH
54140: CALL_OW 517
54144: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54145: LD_ADDR_VAR 0 1
54149: PUSH
54150: DOUBLE
54151: LD_INT 1
54153: DEC
54154: ST_TO_ADDR
54155: LD_VAR 0 2
54159: PUSH
54160: LD_INT 1
54162: ARRAY
54163: PUSH
54164: FOR_TO
54165: IFFALSE 54206
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54167: LD_VAR 0 2
54171: PUSH
54172: LD_INT 1
54174: ARRAY
54175: PUSH
54176: LD_VAR 0 1
54180: ARRAY
54181: PPUSH
54182: LD_VAR 0 2
54186: PUSH
54187: LD_INT 2
54189: ARRAY
54190: PUSH
54191: LD_VAR 0 1
54195: ARRAY
54196: PPUSH
54197: LD_INT 125
54199: PPUSH
54200: CALL_OW 495
54204: GO 54164
54206: POP
54207: POP
// repeat wait ( mpEmissions ) ;
54208: LD_EXP 37
54212: PPUSH
54213: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54217: LD_ADDR_VAR 0 1
54221: PUSH
54222: DOUBLE
54223: LD_INT 1
54225: DEC
54226: ST_TO_ADDR
54227: LD_VAR 0 2
54231: PUSH
54232: LD_INT 1
54234: ARRAY
54235: PUSH
54236: FOR_TO
54237: IFFALSE 54278
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54239: LD_VAR 0 2
54243: PUSH
54244: LD_INT 1
54246: ARRAY
54247: PUSH
54248: LD_VAR 0 1
54252: ARRAY
54253: PPUSH
54254: LD_VAR 0 2
54258: PUSH
54259: LD_INT 2
54261: ARRAY
54262: PUSH
54263: LD_VAR 0 1
54267: ARRAY
54268: PPUSH
54269: LD_INT 15
54271: PPUSH
54272: CALL_OW 495
54276: GO 54236
54278: POP
54279: POP
// until false ;
54280: LD_INT 0
54282: IFFALSE 54208
// end ;
54284: PPOPN 2
54286: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54287: LD_INT 0
54289: PPUSH
54290: PPUSH
54291: PPUSH
54292: PPUSH
54293: PPUSH
// if mpTeamGame then
54294: LD_EXP 11
54298: IFFALSE 54495
// begin first := depots [ 1 ] ;
54300: LD_ADDR_VAR 0 4
54304: PUSH
54305: LD_VAR 0 1
54309: PUSH
54310: LD_INT 1
54312: ARRAY
54313: ST_TO_ADDR
// side := GetSide ( first ) ;
54314: LD_ADDR_VAR 0 6
54318: PUSH
54319: LD_VAR 0 4
54323: PPUSH
54324: CALL_OW 255
54328: ST_TO_ADDR
// for i := 1 to mpTeams do
54329: LD_ADDR_VAR 0 3
54333: PUSH
54334: DOUBLE
54335: LD_INT 1
54337: DEC
54338: ST_TO_ADDR
54339: LD_EXP 10
54343: PUSH
54344: FOR_TO
54345: IFFALSE 54379
// if side in mpTeams [ i ] then
54347: LD_VAR 0 6
54351: PUSH
54352: LD_EXP 10
54356: PUSH
54357: LD_VAR 0 3
54361: ARRAY
54362: IN
54363: IFFALSE 54377
// begin team := i ;
54365: LD_ADDR_VAR 0 5
54369: PUSH
54370: LD_VAR 0 3
54374: ST_TO_ADDR
// break ;
54375: GO 54379
// end ;
54377: GO 54344
54379: POP
54380: POP
// if not team then
54381: LD_VAR 0 5
54385: NOT
54386: IFFALSE 54390
// exit ;
54388: GO 54604
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54390: LD_EXP 34
54394: PPUSH
54395: LD_INT 81
54397: PUSH
54398: LD_VAR 0 6
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PPUSH
54407: CALL_OW 70
54411: IFFALSE 54415
// exit ;
54413: GO 54604
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54415: LD_ADDR_EXP 48
54419: PUSH
54420: LD_EXP 48
54424: PPUSH
54425: LD_VAR 0 5
54429: PPUSH
54430: LD_EXP 48
54434: PUSH
54435: LD_VAR 0 5
54439: ARRAY
54440: PUSH
54441: LD_INT 1
54443: PLUS
54444: PPUSH
54445: CALL_OW 1
54449: ST_TO_ADDR
// for i in mpTeams [ team ] do
54450: LD_ADDR_VAR 0 3
54454: PUSH
54455: LD_EXP 10
54459: PUSH
54460: LD_VAR 0 5
54464: ARRAY
54465: PUSH
54466: FOR_IN
54467: IFFALSE 54491
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
54469: LD_VAR 0 3
54473: PPUSH
54474: LD_EXP 48
54478: PUSH
54479: LD_VAR 0 5
54483: ARRAY
54484: PPUSH
54485: CALL_OW 506
54489: GO 54466
54491: POP
54492: POP
// end else
54493: GO 54604
// begin first := depots [ 1 ] ;
54495: LD_ADDR_VAR 0 4
54499: PUSH
54500: LD_VAR 0 1
54504: PUSH
54505: LD_INT 1
54507: ARRAY
54508: ST_TO_ADDR
// side := GetSide ( first ) ;
54509: LD_ADDR_VAR 0 6
54513: PUSH
54514: LD_VAR 0 4
54518: PPUSH
54519: CALL_OW 255
54523: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54524: LD_EXP 34
54528: PPUSH
54529: LD_INT 81
54531: PUSH
54532: LD_VAR 0 6
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PPUSH
54541: CALL_OW 70
54545: IFFALSE 54549
// exit ;
54547: GO 54604
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
54549: LD_ADDR_EXP 48
54553: PUSH
54554: LD_EXP 48
54558: PPUSH
54559: LD_VAR 0 6
54563: PPUSH
54564: LD_EXP 48
54568: PUSH
54569: LD_VAR 0 6
54573: ARRAY
54574: PUSH
54575: LD_INT 1
54577: PLUS
54578: PPUSH
54579: CALL_OW 1
54583: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
54584: LD_VAR 0 6
54588: PPUSH
54589: LD_EXP 48
54593: PUSH
54594: LD_VAR 0 6
54598: ARRAY
54599: PPUSH
54600: CALL_OW 506
// end ; end ;
54604: LD_VAR 0 2
54608: RET
// function UpdateCounter ; var i ; begin
54609: LD_INT 0
54611: PPUSH
54612: PPUSH
// result := [ ] ;
54613: LD_ADDR_VAR 0 1
54617: PUSH
54618: EMPTY
54619: ST_TO_ADDR
// if mpTeamGame then
54620: LD_EXP 11
54624: IFFALSE 54691
// begin for i := 1 to mpTeams do
54626: LD_ADDR_VAR 0 2
54630: PUSH
54631: DOUBLE
54632: LD_INT 1
54634: DEC
54635: ST_TO_ADDR
54636: LD_EXP 10
54640: PUSH
54641: FOR_TO
54642: IFFALSE 54687
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
54644: LD_ADDR_VAR 0 1
54648: PUSH
54649: LD_VAR 0 1
54653: PUSH
54654: LD_STRING #KingoftheHill-Team
54656: PUSH
54657: LD_VAR 0 2
54661: PUSH
54662: LD_EXP 48
54666: PUSH
54667: LD_VAR 0 2
54671: ARRAY
54672: PUSH
54673: LD_EXP 35
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: ADD
54684: ST_TO_ADDR
54685: GO 54641
54687: POP
54688: POP
// end else
54689: GO 54764
// begin for i := 1 to 8 do
54691: LD_ADDR_VAR 0 2
54695: PUSH
54696: DOUBLE
54697: LD_INT 1
54699: DEC
54700: ST_TO_ADDR
54701: LD_INT 8
54703: PUSH
54704: FOR_TO
54705: IFFALSE 54762
// if mpSidePositions [ i ] then
54707: LD_EXP 7
54711: PUSH
54712: LD_VAR 0 2
54716: ARRAY
54717: IFFALSE 54760
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
54719: LD_ADDR_VAR 0 1
54723: PUSH
54724: LD_VAR 0 1
54728: PUSH
54729: LD_STRING #KingoftheHill-Player
54731: PUSH
54732: LD_VAR 0 2
54736: PUSH
54737: LD_EXP 48
54741: PUSH
54742: LD_VAR 0 2
54746: ARRAY
54747: PUSH
54748: LD_EXP 35
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: ADD
54759: ST_TO_ADDR
54760: GO 54704
54762: POP
54763: POP
// end ; mpDisplayStrings := result ;
54764: LD_ADDR_EXP 38
54768: PUSH
54769: LD_VAR 0 1
54773: ST_TO_ADDR
// end ;
54774: LD_VAR 0 1
54778: RET
// export function HowMuchPointsKing ( side ) ; begin
54779: LD_INT 0
54781: PPUSH
// result := HowMuchPoints ( side ) ;
54782: LD_ADDR_VAR 0 2
54786: PUSH
54787: LD_VAR 0 1
54791: PPUSH
54792: CALL 54802 0 1
54796: ST_TO_ADDR
// end ;
54797: LD_VAR 0 2
54801: RET
// function HowMuchPoints ( side ) ; var i ; begin
54802: LD_INT 0
54804: PPUSH
54805: PPUSH
// if mpTeamGame then
54806: LD_EXP 11
54810: IFFALSE 54879
// begin for i := 1 to Count ( mpTeams ) do
54812: LD_ADDR_VAR 0 3
54816: PUSH
54817: DOUBLE
54818: LD_INT 1
54820: DEC
54821: ST_TO_ADDR
54822: LD_EXP 10
54826: PPUSH
54827: CALL 5150 0 1
54831: PUSH
54832: FOR_TO
54833: IFFALSE 54875
// begin if side in mpTeams [ i ] then
54835: LD_VAR 0 1
54839: PUSH
54840: LD_EXP 10
54844: PUSH
54845: LD_VAR 0 3
54849: ARRAY
54850: IN
54851: IFFALSE 54873
// begin result := mpKingPoints [ i ] ;
54853: LD_ADDR_VAR 0 2
54857: PUSH
54858: LD_EXP 48
54862: PUSH
54863: LD_VAR 0 3
54867: ARRAY
54868: ST_TO_ADDR
// exit ;
54869: POP
54870: POP
54871: GO 54895
// end ; end ;
54873: GO 54832
54875: POP
54876: POP
// end else
54877: GO 54895
// result := mpKingPoints [ side ] ;
54879: LD_ADDR_VAR 0 2
54883: PUSH
54884: LD_EXP 48
54888: PUSH
54889: LD_VAR 0 1
54893: ARRAY
54894: ST_TO_ADDR
// end ;
54895: LD_VAR 0 2
54899: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
54900: LD_EXP 39
54904: IFFALSE 54912
54906: PUSH
54907: CALL 55324 0 0
54911: AND
54912: IFFALSE 54920
54914: PUSH
54915: LD_OWVAR 4
54919: AND
54920: IFFALSE 55173
54922: GO 54924
54924: DISABLE
54925: LD_INT 0
54927: PPUSH
54928: PPUSH
// begin canWin := false ;
54929: LD_ADDR_VAR 0 2
54933: PUSH
54934: LD_INT 0
54936: ST_TO_ADDR
// if not HasPower ( your_side ) then
54937: LD_OWVAR 2
54941: PPUSH
54942: CALL 55366 0 1
54946: NOT
54947: IFFALSE 54958
// begin Multiplayer_Loose_Message ;
54949: CALL_OW 521
// enable ( mpLose ) ;
54953: LD_INT 102
54955: ENABLE_MARKED
// end else
54956: GO 55173
// begin if not EnemiesInGame then
54958: CALL 55176 0 0
54962: NOT
54963: IFFALSE 54970
// begin enable ( mpWin ) ;
54965: LD_INT 101
54967: ENABLE_MARKED
// exit ;
54968: GO 55173
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
54970: LD_ADDR_VAR 0 2
54974: PUSH
54975: LD_OWVAR 2
54979: PPUSH
54980: CALL 54802 0 1
54984: PUSH
54985: LD_EXP 35
54989: GREATEREQUAL
54990: IFFALSE 55003
54992: PUSH
54993: LD_OWVAR 2
54997: PPUSH
54998: CALL 55366 0 1
55002: AND
55003: ST_TO_ADDR
// for i := 1 to 8 do
55004: LD_ADDR_VAR 0 1
55008: PUSH
55009: DOUBLE
55010: LD_INT 1
55012: DEC
55013: ST_TO_ADDR
55014: LD_INT 8
55016: PUSH
55017: FOR_TO
55018: IFFALSE 55159
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55020: LD_EXP 7
55024: PUSH
55025: LD_VAR 0 1
55029: ARRAY
55030: IFFALSE 55043
55032: PUSH
55033: LD_VAR 0 1
55037: PPUSH
55038: CALL_OW 108
55042: AND
55043: IFFALSE 55057
55045: PUSH
55046: LD_VAR 0 1
55050: PUSH
55051: LD_OWVAR 2
55055: NONEQUAL
55056: AND
55057: IFFALSE 55157
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55059: LD_EXP 8
55063: PUSH
55064: LD_VAR 0 1
55068: ARRAY
55069: NOT
55070: IFTRUE 55118
55072: PUSH
55073: LD_EXP 8
55077: PUSH
55078: LD_VAR 0 1
55082: ARRAY
55083: PUSH
55084: LD_EXP 8
55088: PUSH
55089: LD_OWVAR 2
55093: ARRAY
55094: NONEQUAL
55095: IFFALSE 55117
55097: PUSH
55098: LD_OWVAR 2
55102: PPUSH
55103: LD_VAR 0 1
55107: PPUSH
55108: CALL_OW 81
55112: PUSH
55113: LD_INT 1
55115: NONEQUAL
55116: AND
55117: OR
55118: IFFALSE 55157
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55120: LD_VAR 0 1
55124: PPUSH
55125: CALL 54802 0 1
55129: PUSH
55130: LD_EXP 35
55134: GREATEREQUAL
55135: IFFALSE 55148
55137: PUSH
55138: LD_VAR 0 1
55142: PPUSH
55143: CALL 55366 0 1
55147: AND
55148: IFFALSE 55157
// begin enable ( mpLose ) ;
55150: LD_INT 102
55152: ENABLE_MARKED
// exit ;
55153: POP
55154: POP
55155: GO 55173
// end ;
55157: GO 55017
55159: POP
55160: POP
// if canWin then
55161: LD_VAR 0 2
55165: IFFALSE 55172
// enable ( mpWin ) else
55167: LD_INT 101
55169: ENABLE_MARKED
55170: GO 55173
// enable ;
55172: ENABLE
// end ; end ;
55173: PPOPN 2
55175: END
// function EnemiesInGame ; var i ; begin
55176: LD_INT 0
55178: PPUSH
55179: PPUSH
// result := false ;
55180: LD_ADDR_VAR 0 1
55184: PUSH
55185: LD_INT 0
55187: ST_TO_ADDR
// for i := 1 to 8 do
55188: LD_ADDR_VAR 0 2
55192: PUSH
55193: DOUBLE
55194: LD_INT 1
55196: DEC
55197: ST_TO_ADDR
55198: LD_INT 8
55200: PUSH
55201: FOR_TO
55202: IFFALSE 55317
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55204: LD_VAR 0 2
55208: PUSH
55209: LD_OWVAR 2
55213: NONEQUAL
55214: IFFALSE 55227
55216: PUSH
55217: LD_VAR 0 2
55221: PPUSH
55222: CALL 55366 0 1
55226: AND
55227: IFFALSE 55240
55229: PUSH
55230: LD_VAR 0 2
55234: PPUSH
55235: CALL_OW 108
55239: AND
55240: IFFALSE 55315
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55242: LD_EXP 8
55246: PUSH
55247: LD_VAR 0 2
55251: ARRAY
55252: NOT
55253: IFTRUE 55301
55255: PUSH
55256: LD_EXP 8
55260: PUSH
55261: LD_VAR 0 2
55265: ARRAY
55266: PUSH
55267: LD_EXP 8
55271: PUSH
55272: LD_OWVAR 2
55276: ARRAY
55277: NONEQUAL
55278: IFFALSE 55300
55280: PUSH
55281: LD_OWVAR 2
55285: PPUSH
55286: LD_VAR 0 2
55290: PPUSH
55291: CALL_OW 81
55295: PUSH
55296: LD_INT 1
55298: NONEQUAL
55299: AND
55300: OR
55301: IFFALSE 55315
// begin result := true ;
55303: LD_ADDR_VAR 0 1
55307: PUSH
55308: LD_INT 1
55310: ST_TO_ADDR
// exit ;
55311: POP
55312: POP
55313: GO 55319
// end ;
55315: GO 55201
55317: POP
55318: POP
// end ;
55319: LD_VAR 0 1
55323: RET
// function CanWinLoose ; begin
55324: LD_INT 0
55326: PPUSH
// result := true ;
55327: LD_ADDR_VAR 0 1
55331: PUSH
55332: LD_INT 1
55334: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55335: CALL_OW 531
55339: IFFALSE 55351
55341: PUSH
55342: CALL_OW 519
55346: PUSH
55347: LD_INT 1
55349: GREATER
55350: AND
55351: IFFALSE 55361
// result := false ;
55353: LD_ADDR_VAR 0 1
55357: PUSH
55358: LD_INT 0
55360: ST_TO_ADDR
// end ;
55361: LD_VAR 0 1
55365: RET
// function HasPower ( i ) ; begin
55366: LD_INT 0
55368: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55369: LD_ADDR_VAR 0 2
55373: PUSH
55374: LD_INT 22
55376: PUSH
55377: LD_VAR 0 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: LD_INT 21
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 33
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 33
55411: PUSH
55412: LD_INT 5
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PPUSH
55429: CALL_OW 69
55433: ST_TO_ADDR
// end ; end_of_file end_of_file
55434: LD_VAR 0 2
55438: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55439: LD_VAR 0 1
55443: PUSH
55444: LD_INT 200
55446: DOUBLE
55447: GREATEREQUAL
55448: IFFALSE 55456
55450: LD_INT 299
55452: DOUBLE
55453: LESSEQUAL
55454: IFTRUE 55458
55456: GO 55490
55458: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55459: LD_VAR 0 1
55463: PPUSH
55464: LD_VAR 0 2
55468: PPUSH
55469: LD_VAR 0 3
55473: PPUSH
55474: LD_VAR 0 4
55478: PPUSH
55479: LD_VAR 0 5
55483: PPUSH
55484: CALL 56271 0 5
55488: GO 55567
55490: LD_INT 300
55492: DOUBLE
55493: GREATEREQUAL
55494: IFFALSE 55502
55496: LD_INT 399
55498: DOUBLE
55499: LESSEQUAL
55500: IFTRUE 55504
55502: GO 55566
55504: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55505: LD_VAR 0 1
55509: PPUSH
55510: LD_VAR 0 2
55514: PPUSH
55515: LD_VAR 0 3
55519: PPUSH
55520: LD_VAR 0 4
55524: PPUSH
55525: LD_VAR 0 5
55529: PPUSH
55530: LD_VAR 0 6
55534: PPUSH
55535: LD_VAR 0 7
55539: PPUSH
55540: LD_VAR 0 8
55544: PPUSH
55545: LD_VAR 0 9
55549: PPUSH
55550: LD_VAR 0 10
55554: PPUSH
55555: LD_VAR 0 11
55559: PPUSH
55560: CALL 61676 0 11
55564: GO 55567
55566: POP
// end ;
55567: PPOPN 11
55569: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55570: LD_VAR 0 1
55574: PPUSH
55575: LD_VAR 0 2
55579: PPUSH
55580: LD_VAR 0 3
55584: PPUSH
55585: LD_VAR 0 4
55589: PPUSH
55590: LD_VAR 0 5
55594: PPUSH
55595: CALL 55652 0 5
// end ; end_of_file
55599: PPOPN 5
55601: END
// export function SOS_UnitDestroyed ( un ) ; begin
55602: LD_INT 0
55604: PPUSH
// ComRadiation ( un ) ;
55605: LD_VAR 0 1
55609: PPUSH
55610: CALL 56691 0 1
// end ;
55614: LD_VAR 0 2
55618: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55619: LD_INT 0
55621: PPUSH
// ComRadiation ( un ) ;
55622: LD_VAR 0 1
55626: PPUSH
55627: CALL 56691 0 1
// end ;
55631: LD_VAR 0 2
55635: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55636: LD_INT 0
55638: PPUSH
// end ;
55639: LD_VAR 0 4
55643: RET
// export function SOS_Command ( cmd ) ; begin
55644: LD_INT 0
55646: PPUSH
// end ;
55647: LD_VAR 0 2
55651: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55652: LD_INT 0
55654: PPUSH
// end ;
55655: LD_VAR 0 6
55659: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55660: LD_INT 0
55662: PPUSH
55663: PPUSH
55664: PPUSH
55665: PPUSH
// if not vehicle or not factory then
55666: LD_VAR 0 1
55670: NOT
55671: IFTRUE 55680
55673: PUSH
55674: LD_VAR 0 2
55678: NOT
55679: OR
55680: IFFALSE 55684
// exit ;
55682: GO 56266
// if not factoryWaypoints then
55684: LD_EXP 59
55688: NOT
55689: IFFALSE 55693
// exit ;
55691: GO 56266
// for i := 1 to Count ( factoryWaypoints ) do
55693: LD_ADDR_VAR 0 4
55697: PUSH
55698: DOUBLE
55699: LD_INT 1
55701: DEC
55702: ST_TO_ADDR
55703: LD_EXP 59
55707: PPUSH
55708: CALL 5150 0 1
55712: PUSH
55713: FOR_TO
55714: IFFALSE 56264
// if factoryWaypoints [ i ] [ 2 ] = factory then
55716: LD_EXP 59
55720: PUSH
55721: LD_VAR 0 4
55725: ARRAY
55726: PUSH
55727: LD_INT 2
55729: ARRAY
55730: PUSH
55731: LD_VAR 0 2
55735: EQUAL
55736: IFFALSE 56262
// begin if GetControl ( vehicle ) = control_manual then
55738: LD_VAR 0 1
55742: PPUSH
55743: CALL_OW 263
55747: PUSH
55748: LD_INT 1
55750: EQUAL
55751: IFFALSE 56115
// begin driver := IsDrivenBy ( vehicle ) ;
55753: LD_ADDR_VAR 0 5
55757: PUSH
55758: LD_VAR 0 1
55762: PPUSH
55763: CALL_OW 311
55767: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55768: LD_VAR 0 5
55772: PUSH
55773: LD_EXP 60
55777: IN
55778: IFTRUE 55792
55780: PUSH
55781: LD_VAR 0 1
55785: PUSH
55786: LD_EXP 60
55790: IN
55791: OR
55792: IFFALSE 55798
// exit ;
55794: POP
55795: POP
55796: GO 56266
// if not HasTask ( driver ) then
55798: LD_VAR 0 5
55802: PPUSH
55803: CALL_OW 314
55807: NOT
55808: IFFALSE 56113
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55810: LD_ADDR_EXP 60
55814: PUSH
55815: LD_EXP 60
55819: PPUSH
55820: LD_VAR 0 5
55824: PPUSH
55825: CALL 41082 0 2
55829: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55830: LD_ADDR_EXP 60
55834: PUSH
55835: LD_EXP 60
55839: PPUSH
55840: LD_VAR 0 1
55844: PPUSH
55845: CALL 41082 0 2
55849: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55850: LD_ADDR_VAR 0 6
55854: PUSH
55855: LD_EXP 59
55859: PUSH
55860: LD_VAR 0 4
55864: ARRAY
55865: PUSH
55866: LD_INT 3
55868: ARRAY
55869: PPUSH
55870: LD_EXP 59
55874: PUSH
55875: LD_VAR 0 4
55879: ARRAY
55880: PUSH
55881: LD_INT 4
55883: ARRAY
55884: PPUSH
55885: CALL_OW 428
55889: ST_TO_ADDR
// if hex then
55890: LD_VAR 0 6
55894: IFFALSE 55912
// ComMoveUnit ( driver , hex ) else
55896: LD_VAR 0 5
55900: PPUSH
55901: LD_VAR 0 6
55905: PPUSH
55906: CALL_OW 112
55910: GO 55996
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55912: LD_VAR 0 1
55916: PPUSH
55917: LD_EXP 59
55921: PUSH
55922: LD_VAR 0 4
55926: ARRAY
55927: PUSH
55928: LD_INT 3
55930: ARRAY
55931: PPUSH
55932: LD_EXP 59
55936: PUSH
55937: LD_VAR 0 4
55941: ARRAY
55942: PUSH
55943: LD_INT 4
55945: ARRAY
55946: PPUSH
55947: CALL_OW 297
55951: PUSH
55952: LD_INT 0
55954: GREATER
55955: IFFALSE 55996
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55957: LD_VAR 0 5
55961: PPUSH
55962: LD_EXP 59
55966: PUSH
55967: LD_VAR 0 4
55971: ARRAY
55972: PUSH
55973: LD_INT 3
55975: ARRAY
55976: PPUSH
55977: LD_EXP 59
55981: PUSH
55982: LD_VAR 0 4
55986: ARRAY
55987: PUSH
55988: LD_INT 4
55990: ARRAY
55991: PPUSH
55992: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55996: LD_VAR 0 5
56000: PPUSH
56001: CALL_OW 181
// if Multiplayer then
56005: LD_OWVAR 4
56009: IFFALSE 56058
// begin repeat wait ( 10 ) ;
56011: LD_INT 10
56013: PPUSH
56014: CALL_OW 67
// until not IsInUnit ( driver ) ;
56018: LD_VAR 0 5
56022: PPUSH
56023: CALL_OW 310
56027: NOT
56028: IFFALSE 56011
// if not HasTask ( driver ) then
56030: LD_VAR 0 5
56034: PPUSH
56035: CALL_OW 314
56039: NOT
56040: IFFALSE 56056
// ComEnterUnit ( driver , factory ) ;
56042: LD_VAR 0 5
56046: PPUSH
56047: LD_VAR 0 2
56051: PPUSH
56052: CALL_OW 120
// end else
56056: GO 56072
// AddComEnterUnit ( driver , factory ) ;
56058: LD_VAR 0 5
56062: PPUSH
56063: LD_VAR 0 2
56067: PPUSH
56068: CALL_OW 180
// wait ( 0 0$1 ) ;
56072: LD_INT 35
56074: PPUSH
56075: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56079: LD_ADDR_EXP 60
56083: PUSH
56084: LD_EXP 60
56088: PUSH
56089: LD_VAR 0 5
56093: DIFF
56094: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56095: LD_ADDR_EXP 60
56099: PUSH
56100: LD_EXP 60
56104: PUSH
56105: LD_VAR 0 1
56109: DIFF
56110: ST_TO_ADDR
// break ;
56111: GO 56264
// end ; end else
56113: GO 56262
// if GetControl ( vehicle ) = control_remote then
56115: LD_VAR 0 1
56119: PPUSH
56120: CALL_OW 263
56124: PUSH
56125: LD_INT 2
56127: EQUAL
56128: IFFALSE 56214
// begin wait ( 0 0$2 ) ;
56130: LD_INT 70
56132: PPUSH
56133: CALL_OW 67
// repeat wait ( 10 ) ;
56137: LD_INT 10
56139: PPUSH
56140: CALL_OW 67
// Connect ( vehicle ) ;
56144: LD_VAR 0 1
56148: PPUSH
56149: CALL 11394 0 1
// until IsControledBy ( vehicle ) ;
56153: LD_VAR 0 1
56157: PPUSH
56158: CALL_OW 312
56162: IFFALSE 56137
// wait ( 10 ) ;
56164: LD_INT 10
56166: PPUSH
56167: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56171: LD_VAR 0 1
56175: PPUSH
56176: LD_EXP 59
56180: PUSH
56181: LD_VAR 0 4
56185: ARRAY
56186: PUSH
56187: LD_INT 3
56189: ARRAY
56190: PPUSH
56191: LD_EXP 59
56195: PUSH
56196: LD_VAR 0 4
56200: ARRAY
56201: PUSH
56202: LD_INT 4
56204: ARRAY
56205: PPUSH
56206: CALL_OW 111
// break ;
56210: GO 56264
// end else
56212: GO 56262
// begin wait ( 0 0$3 ) ;
56214: LD_INT 105
56216: PPUSH
56217: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56221: LD_VAR 0 1
56225: PPUSH
56226: LD_EXP 59
56230: PUSH
56231: LD_VAR 0 4
56235: ARRAY
56236: PUSH
56237: LD_INT 3
56239: ARRAY
56240: PPUSH
56241: LD_EXP 59
56245: PUSH
56246: LD_VAR 0 4
56250: ARRAY
56251: PUSH
56252: LD_INT 4
56254: ARRAY
56255: PPUSH
56256: CALL_OW 111
// break ;
56260: GO 56264
// end ; end ;
56262: GO 55713
56264: POP
56265: POP
// end ;
56266: LD_VAR 0 3
56270: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56271: LD_INT 0
56273: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56274: LD_VAR 0 1
56278: PUSH
56279: LD_INT 250
56281: EQUAL
56282: IFFALSE 56299
56284: PUSH
56285: LD_VAR 0 2
56289: PPUSH
56290: CALL_OW 264
56294: PUSH
56295: LD_INT 81
56297: EQUAL
56298: AND
56299: IFFALSE 56320
// MinerPlaceMine ( unit , x , y ) ;
56301: LD_VAR 0 2
56305: PPUSH
56306: LD_VAR 0 4
56310: PPUSH
56311: LD_VAR 0 5
56315: PPUSH
56316: CALL 59452 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56320: LD_VAR 0 1
56324: PUSH
56325: LD_INT 251
56327: EQUAL
56328: IFFALSE 56345
56330: PUSH
56331: LD_VAR 0 2
56335: PPUSH
56336: CALL_OW 264
56340: PUSH
56341: LD_INT 81
56343: EQUAL
56344: AND
56345: IFFALSE 56366
// MinerDetonateMine ( unit , x , y ) ;
56347: LD_VAR 0 2
56351: PPUSH
56352: LD_VAR 0 4
56356: PPUSH
56357: LD_VAR 0 5
56361: PPUSH
56362: CALL 59731 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56366: LD_VAR 0 1
56370: PUSH
56371: LD_INT 252
56373: EQUAL
56374: IFFALSE 56391
56376: PUSH
56377: LD_VAR 0 2
56381: PPUSH
56382: CALL_OW 264
56386: PUSH
56387: LD_INT 81
56389: EQUAL
56390: AND
56391: IFFALSE 56412
// MinerCreateMinefield ( unit , x , y ) ;
56393: LD_VAR 0 2
56397: PPUSH
56398: LD_VAR 0 4
56402: PPUSH
56403: LD_VAR 0 5
56407: PPUSH
56408: CALL 60150 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56412: LD_VAR 0 1
56416: PUSH
56417: LD_INT 253
56419: EQUAL
56420: IFFALSE 56437
56422: PUSH
56423: LD_VAR 0 2
56427: PPUSH
56428: CALL_OW 257
56432: PUSH
56433: LD_INT 5
56435: EQUAL
56436: AND
56437: IFFALSE 56458
// ComBinocular ( unit , x , y ) ;
56439: LD_VAR 0 2
56443: PPUSH
56444: LD_VAR 0 4
56448: PPUSH
56449: LD_VAR 0 5
56453: PPUSH
56454: CALL 60525 0 3
// if selectedUnit then
56458: LD_VAR 0 3
56462: IFFALSE 56522
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56464: LD_VAR 0 1
56468: PUSH
56469: LD_INT 254
56471: EQUAL
56472: IFFALSE 56489
56474: PUSH
56475: LD_VAR 0 2
56479: PPUSH
56480: CALL_OW 264
56484: PUSH
56485: LD_INT 99
56487: EQUAL
56488: AND
56489: IFFALSE 56506
56491: PUSH
56492: LD_VAR 0 3
56496: PPUSH
56497: CALL_OW 263
56501: PUSH
56502: LD_INT 3
56504: EQUAL
56505: AND
56506: IFFALSE 56522
// HackDestroyVehicle ( unit , selectedUnit ) ;
56508: LD_VAR 0 2
56512: PPUSH
56513: LD_VAR 0 3
56517: PPUSH
56518: CALL 58812 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56522: LD_VAR 0 1
56526: PUSH
56527: LD_INT 255
56529: EQUAL
56530: IFFALSE 56554
56532: PUSH
56533: LD_VAR 0 2
56537: PPUSH
56538: CALL_OW 264
56542: PUSH
56543: LD_INT 14
56545: PUSH
56546: LD_INT 53
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: IN
56553: AND
56554: IFFALSE 56572
56556: PUSH
56557: LD_VAR 0 4
56561: PPUSH
56562: LD_VAR 0 5
56566: PPUSH
56567: CALL_OW 488
56571: AND
56572: IFFALSE 56596
// CutTreeXYR ( unit , x , y , 12 ) ;
56574: LD_VAR 0 2
56578: PPUSH
56579: LD_VAR 0 4
56583: PPUSH
56584: LD_VAR 0 5
56588: PPUSH
56589: LD_INT 12
56591: PPUSH
56592: CALL 56787 0 4
// if cmd = 256 then
56596: LD_VAR 0 1
56600: PUSH
56601: LD_INT 256
56603: EQUAL
56604: IFFALSE 56625
// SetFactoryWaypoint ( unit , x , y ) ;
56606: LD_VAR 0 2
56610: PPUSH
56611: LD_VAR 0 4
56615: PPUSH
56616: LD_VAR 0 5
56620: PPUSH
56621: CALL 61684 0 3
// if cmd = 257 then
56625: LD_VAR 0 1
56629: PUSH
56630: LD_INT 257
56632: EQUAL
56633: IFFALSE 56654
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56635: LD_VAR 0 2
56639: PPUSH
56640: LD_VAR 0 4
56644: PPUSH
56645: LD_VAR 0 5
56649: PPUSH
56650: CALL 62180 0 3
// if cmd = 258 then
56654: LD_VAR 0 1
56658: PUSH
56659: LD_INT 258
56661: EQUAL
56662: IFFALSE 56686
// BurnTreeXYR ( unit , x , y , 8 ) ;
56664: LD_VAR 0 2
56668: PPUSH
56669: LD_VAR 0 4
56673: PPUSH
56674: LD_VAR 0 5
56678: PPUSH
56679: LD_INT 8
56681: PPUSH
56682: CALL 57187 0 4
// end ;
56686: LD_VAR 0 6
56690: RET
// export function ComRadiation ( un ) ; var eff ; begin
56691: LD_INT 0
56693: PPUSH
56694: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56695: LD_VAR 0 1
56699: PPUSH
56700: CALL_OW 264
56704: PUSH
56705: LD_INT 91
56707: NONEQUAL
56708: IFFALSE 56712
// exit ;
56710: GO 56782
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56712: LD_INT 68
56714: PPUSH
56715: LD_VAR 0 1
56719: PPUSH
56720: CALL_OW 255
56724: PPUSH
56725: CALL_OW 321
56729: PUSH
56730: LD_INT 2
56732: EQUAL
56733: IFFALSE 56745
// eff := 50 else
56735: LD_ADDR_VAR 0 3
56739: PUSH
56740: LD_INT 50
56742: ST_TO_ADDR
56743: GO 56753
// eff := 25 ;
56745: LD_ADDR_VAR 0 3
56749: PUSH
56750: LD_INT 25
56752: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56753: LD_VAR 0 1
56757: PPUSH
56758: CALL_OW 250
56762: PPUSH
56763: LD_VAR 0 1
56767: PPUSH
56768: CALL_OW 251
56772: PPUSH
56773: LD_VAR 0 3
56777: PPUSH
56778: CALL_OW 495
// end ;
56782: LD_VAR 0 2
56786: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56787: LD_INT 0
56789: PPUSH
56790: PPUSH
56791: PPUSH
56792: PPUSH
56793: PPUSH
56794: PPUSH
56795: PPUSH
56796: PPUSH
56797: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56798: LD_VAR 0 1
56802: PPUSH
56803: CALL_OW 302
56807: NOT
56808: IFTRUE 56827
56810: PUSH
56811: LD_VAR 0 2
56815: PPUSH
56816: LD_VAR 0 3
56820: PPUSH
56821: CALL_OW 488
56825: NOT
56826: OR
56827: IFTRUE 56836
56829: PUSH
56830: LD_VAR 0 4
56834: NOT
56835: OR
56836: IFFALSE 56840
// exit ;
56838: GO 57182
// list := [ ] ;
56840: LD_ADDR_VAR 0 13
56844: PUSH
56845: EMPTY
56846: ST_TO_ADDR
// if x - r < 0 then
56847: LD_VAR 0 2
56851: PUSH
56852: LD_VAR 0 4
56856: MINUS
56857: PUSH
56858: LD_INT 0
56860: LESS
56861: IFFALSE 56873
// min_x := 0 else
56863: LD_ADDR_VAR 0 7
56867: PUSH
56868: LD_INT 0
56870: ST_TO_ADDR
56871: GO 56889
// min_x := x - r ;
56873: LD_ADDR_VAR 0 7
56877: PUSH
56878: LD_VAR 0 2
56882: PUSH
56883: LD_VAR 0 4
56887: MINUS
56888: ST_TO_ADDR
// if y - r < 0 then
56889: LD_VAR 0 3
56893: PUSH
56894: LD_VAR 0 4
56898: MINUS
56899: PUSH
56900: LD_INT 0
56902: LESS
56903: IFFALSE 56915
// min_y := 0 else
56905: LD_ADDR_VAR 0 8
56909: PUSH
56910: LD_INT 0
56912: ST_TO_ADDR
56913: GO 56931
// min_y := y - r ;
56915: LD_ADDR_VAR 0 8
56919: PUSH
56920: LD_VAR 0 3
56924: PUSH
56925: LD_VAR 0 4
56929: MINUS
56930: ST_TO_ADDR
// max_x := x + r ;
56931: LD_ADDR_VAR 0 9
56935: PUSH
56936: LD_VAR 0 2
56940: PUSH
56941: LD_VAR 0 4
56945: PLUS
56946: ST_TO_ADDR
// max_y := y + r ;
56947: LD_ADDR_VAR 0 10
56951: PUSH
56952: LD_VAR 0 3
56956: PUSH
56957: LD_VAR 0 4
56961: PLUS
56962: ST_TO_ADDR
// for _x = min_x to max_x do
56963: LD_ADDR_VAR 0 11
56967: PUSH
56968: DOUBLE
56969: LD_VAR 0 7
56973: DEC
56974: ST_TO_ADDR
56975: LD_VAR 0 9
56979: PUSH
56980: FOR_TO
56981: IFFALSE 57100
// for _y = min_y to max_y do
56983: LD_ADDR_VAR 0 12
56987: PUSH
56988: DOUBLE
56989: LD_VAR 0 8
56993: DEC
56994: ST_TO_ADDR
56995: LD_VAR 0 10
56999: PUSH
57000: FOR_TO
57001: IFFALSE 57096
// begin if not ValidHex ( _x , _y ) then
57003: LD_VAR 0 11
57007: PPUSH
57008: LD_VAR 0 12
57012: PPUSH
57013: CALL_OW 488
57017: NOT
57018: IFFALSE 57022
// continue ;
57020: GO 57000
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57022: LD_VAR 0 11
57026: PPUSH
57027: LD_VAR 0 12
57031: PPUSH
57032: CALL_OW 351
57036: IFFALSE 57054
57038: PUSH
57039: LD_VAR 0 11
57043: PPUSH
57044: LD_VAR 0 12
57048: PPUSH
57049: CALL_OW 554
57053: AND
57054: IFFALSE 57094
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57056: LD_ADDR_VAR 0 13
57060: PUSH
57061: LD_VAR 0 13
57065: PPUSH
57066: LD_VAR 0 13
57070: PUSH
57071: LD_INT 1
57073: PLUS
57074: PPUSH
57075: LD_VAR 0 11
57079: PUSH
57080: LD_VAR 0 12
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PPUSH
57089: CALL_OW 2
57093: ST_TO_ADDR
// end ;
57094: GO 57000
57096: POP
57097: POP
57098: GO 56980
57100: POP
57101: POP
// if not list then
57102: LD_VAR 0 13
57106: NOT
57107: IFFALSE 57111
// exit ;
57109: GO 57182
// for i in list do
57111: LD_ADDR_VAR 0 6
57115: PUSH
57116: LD_VAR 0 13
57120: PUSH
57121: FOR_IN
57122: IFFALSE 57180
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57124: LD_VAR 0 1
57128: PPUSH
57129: LD_STRING M
57131: PUSH
57132: LD_VAR 0 6
57136: PUSH
57137: LD_INT 1
57139: ARRAY
57140: PUSH
57141: LD_VAR 0 6
57145: PUSH
57146: LD_INT 2
57148: ARRAY
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: PPUSH
57174: CALL_OW 447
57178: GO 57121
57180: POP
57181: POP
// end ;
57182: LD_VAR 0 5
57186: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57187: LD_INT 0
57189: PPUSH
57190: PPUSH
57191: PPUSH
57192: PPUSH
57193: PPUSH
57194: PPUSH
57195: PPUSH
57196: PPUSH
57197: PPUSH
57198: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57199: LD_VAR 0 1
57203: PPUSH
57204: CALL_OW 302
57208: NOT
57209: IFTRUE 57228
57211: PUSH
57212: LD_VAR 0 2
57216: PPUSH
57217: LD_VAR 0 3
57221: PPUSH
57222: CALL_OW 488
57226: NOT
57227: OR
57228: IFTRUE 57237
57230: PUSH
57231: LD_VAR 0 4
57235: NOT
57236: OR
57237: IFFALSE 57241
// exit ;
57239: GO 57758
// list := [ ] ;
57241: LD_ADDR_VAR 0 13
57245: PUSH
57246: EMPTY
57247: ST_TO_ADDR
// if x - r < 0 then
57248: LD_VAR 0 2
57252: PUSH
57253: LD_VAR 0 4
57257: MINUS
57258: PUSH
57259: LD_INT 0
57261: LESS
57262: IFFALSE 57274
// min_x := 0 else
57264: LD_ADDR_VAR 0 7
57268: PUSH
57269: LD_INT 0
57271: ST_TO_ADDR
57272: GO 57290
// min_x := x - r ;
57274: LD_ADDR_VAR 0 7
57278: PUSH
57279: LD_VAR 0 2
57283: PUSH
57284: LD_VAR 0 4
57288: MINUS
57289: ST_TO_ADDR
// if y - r < 0 then
57290: LD_VAR 0 3
57294: PUSH
57295: LD_VAR 0 4
57299: MINUS
57300: PUSH
57301: LD_INT 0
57303: LESS
57304: IFFALSE 57316
// min_y := 0 else
57306: LD_ADDR_VAR 0 8
57310: PUSH
57311: LD_INT 0
57313: ST_TO_ADDR
57314: GO 57332
// min_y := y - r ;
57316: LD_ADDR_VAR 0 8
57320: PUSH
57321: LD_VAR 0 3
57325: PUSH
57326: LD_VAR 0 4
57330: MINUS
57331: ST_TO_ADDR
// max_x := x + r ;
57332: LD_ADDR_VAR 0 9
57336: PUSH
57337: LD_VAR 0 2
57341: PUSH
57342: LD_VAR 0 4
57346: PLUS
57347: ST_TO_ADDR
// max_y := y + r ;
57348: LD_ADDR_VAR 0 10
57352: PUSH
57353: LD_VAR 0 3
57357: PUSH
57358: LD_VAR 0 4
57362: PLUS
57363: ST_TO_ADDR
// for _x = min_x to max_x do
57364: LD_ADDR_VAR 0 11
57368: PUSH
57369: DOUBLE
57370: LD_VAR 0 7
57374: DEC
57375: ST_TO_ADDR
57376: LD_VAR 0 9
57380: PUSH
57381: FOR_TO
57382: IFFALSE 57501
// for _y = min_y to max_y do
57384: LD_ADDR_VAR 0 12
57388: PUSH
57389: DOUBLE
57390: LD_VAR 0 8
57394: DEC
57395: ST_TO_ADDR
57396: LD_VAR 0 10
57400: PUSH
57401: FOR_TO
57402: IFFALSE 57497
// begin if not ValidHex ( _x , _y ) then
57404: LD_VAR 0 11
57408: PPUSH
57409: LD_VAR 0 12
57413: PPUSH
57414: CALL_OW 488
57418: NOT
57419: IFFALSE 57423
// continue ;
57421: GO 57401
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57423: LD_VAR 0 11
57427: PPUSH
57428: LD_VAR 0 12
57432: PPUSH
57433: CALL_OW 351
57437: IFFALSE 57455
57439: PUSH
57440: LD_VAR 0 11
57444: PPUSH
57445: LD_VAR 0 12
57449: PPUSH
57450: CALL_OW 554
57454: AND
57455: IFFALSE 57495
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57457: LD_ADDR_VAR 0 13
57461: PUSH
57462: LD_VAR 0 13
57466: PPUSH
57467: LD_VAR 0 13
57471: PUSH
57472: LD_INT 1
57474: PLUS
57475: PPUSH
57476: LD_VAR 0 11
57480: PUSH
57481: LD_VAR 0 12
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PPUSH
57490: CALL_OW 2
57494: ST_TO_ADDR
// end ;
57495: GO 57401
57497: POP
57498: POP
57499: GO 57381
57501: POP
57502: POP
// if not list then
57503: LD_VAR 0 13
57507: NOT
57508: IFFALSE 57512
// exit ;
57510: GO 57758
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57512: LD_ADDR_VAR 0 13
57516: PUSH
57517: LD_VAR 0 1
57521: PPUSH
57522: LD_VAR 0 13
57526: PPUSH
57527: LD_INT 1
57529: PPUSH
57530: LD_INT 1
57532: PPUSH
57533: CALL 8522 0 4
57537: ST_TO_ADDR
// ComStop ( flame ) ;
57538: LD_VAR 0 1
57542: PPUSH
57543: CALL_OW 141
// for i in list do
57547: LD_ADDR_VAR 0 6
57551: PUSH
57552: LD_VAR 0 13
57556: PUSH
57557: FOR_IN
57558: IFFALSE 57589
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57560: LD_VAR 0 1
57564: PPUSH
57565: LD_VAR 0 6
57569: PUSH
57570: LD_INT 1
57572: ARRAY
57573: PPUSH
57574: LD_VAR 0 6
57578: PUSH
57579: LD_INT 2
57581: ARRAY
57582: PPUSH
57583: CALL_OW 176
57587: GO 57557
57589: POP
57590: POP
// repeat wait ( 0 0$1 ) ;
57591: LD_INT 35
57593: PPUSH
57594: CALL_OW 67
// task := GetTaskList ( flame ) ;
57598: LD_ADDR_VAR 0 14
57602: PUSH
57603: LD_VAR 0 1
57607: PPUSH
57608: CALL_OW 437
57612: ST_TO_ADDR
// if not task then
57613: LD_VAR 0 14
57617: NOT
57618: IFFALSE 57622
// exit ;
57620: GO 57758
// if task [ 1 ] [ 1 ] <> | then
57622: LD_VAR 0 14
57626: PUSH
57627: LD_INT 1
57629: ARRAY
57630: PUSH
57631: LD_INT 1
57633: ARRAY
57634: PUSH
57635: LD_STRING |
57637: NONEQUAL
57638: IFFALSE 57642
// exit ;
57640: GO 57758
// _x := task [ 1 ] [ 2 ] ;
57642: LD_ADDR_VAR 0 11
57646: PUSH
57647: LD_VAR 0 14
57651: PUSH
57652: LD_INT 1
57654: ARRAY
57655: PUSH
57656: LD_INT 2
57658: ARRAY
57659: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57660: LD_ADDR_VAR 0 12
57664: PUSH
57665: LD_VAR 0 14
57669: PUSH
57670: LD_INT 1
57672: ARRAY
57673: PUSH
57674: LD_INT 3
57676: ARRAY
57677: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57678: LD_VAR 0 11
57682: PPUSH
57683: LD_VAR 0 12
57687: PPUSH
57688: CALL_OW 351
57692: NOT
57693: IFTRUE 57712
57695: PUSH
57696: LD_VAR 0 11
57700: PPUSH
57701: LD_VAR 0 12
57705: PPUSH
57706: CALL_OW 554
57710: NOT
57711: OR
57712: IFFALSE 57746
// begin task := Delete ( task , 1 ) ;
57714: LD_ADDR_VAR 0 14
57718: PUSH
57719: LD_VAR 0 14
57723: PPUSH
57724: LD_INT 1
57726: PPUSH
57727: CALL_OW 3
57731: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57732: LD_VAR 0 1
57736: PPUSH
57737: LD_VAR 0 14
57741: PPUSH
57742: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57746: LD_VAR 0 1
57750: PPUSH
57751: CALL_OW 314
57755: NOT
57756: IFFALSE 57591
// end ;
57758: LD_VAR 0 5
57762: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57763: LD_EXP 49
57767: NOT
57768: IFFALSE 57818
57770: GO 57772
57772: DISABLE
// begin initHack := true ;
57773: LD_ADDR_EXP 49
57777: PUSH
57778: LD_INT 1
57780: ST_TO_ADDR
// hackTanks := [ ] ;
57781: LD_ADDR_EXP 50
57785: PUSH
57786: EMPTY
57787: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57788: LD_ADDR_EXP 51
57792: PUSH
57793: EMPTY
57794: ST_TO_ADDR
// hackLimit := 3 ;
57795: LD_ADDR_EXP 52
57799: PUSH
57800: LD_INT 3
57802: ST_TO_ADDR
// hackDist := 12 ;
57803: LD_ADDR_EXP 53
57807: PUSH
57808: LD_INT 12
57810: ST_TO_ADDR
// hackCounter := [ ] ;
57811: LD_ADDR_EXP 54
57815: PUSH
57816: EMPTY
57817: ST_TO_ADDR
// end ;
57818: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57819: LD_EXP 49
57823: IFFALSE 57841
57825: PUSH
57826: LD_INT 34
57828: PUSH
57829: LD_INT 99
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PPUSH
57836: CALL_OW 69
57840: AND
57841: IFFALSE 58094
57843: GO 57845
57845: DISABLE
57846: LD_INT 0
57848: PPUSH
57849: PPUSH
// begin enable ;
57850: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57851: LD_ADDR_VAR 0 1
57855: PUSH
57856: LD_INT 34
57858: PUSH
57859: LD_INT 99
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PPUSH
57866: CALL_OW 69
57870: PUSH
57871: FOR_IN
57872: IFFALSE 58092
// begin if not i in hackTanks then
57874: LD_VAR 0 1
57878: PUSH
57879: LD_EXP 50
57883: IN
57884: NOT
57885: IFFALSE 57968
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57887: LD_ADDR_EXP 50
57891: PUSH
57892: LD_EXP 50
57896: PPUSH
57897: LD_EXP 50
57901: PUSH
57902: LD_INT 1
57904: PLUS
57905: PPUSH
57906: LD_VAR 0 1
57910: PPUSH
57911: CALL_OW 1
57915: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57916: LD_ADDR_EXP 51
57920: PUSH
57921: LD_EXP 51
57925: PPUSH
57926: LD_EXP 51
57930: PUSH
57931: LD_INT 1
57933: PLUS
57934: PPUSH
57935: EMPTY
57936: PPUSH
57937: CALL_OW 1
57941: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57942: LD_ADDR_EXP 54
57946: PUSH
57947: LD_EXP 54
57951: PPUSH
57952: LD_EXP 54
57956: PUSH
57957: LD_INT 1
57959: PLUS
57960: PPUSH
57961: EMPTY
57962: PPUSH
57963: CALL_OW 1
57967: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57968: LD_VAR 0 1
57972: PPUSH
57973: CALL_OW 302
57977: NOT
57978: IFFALSE 57991
// begin HackUnlinkAll ( i ) ;
57980: LD_VAR 0 1
57984: PPUSH
57985: CALL 58097 0 1
// continue ;
57989: GO 57871
// end ; HackCheckCapturedStatus ( i ) ;
57991: LD_VAR 0 1
57995: PPUSH
57996: CALL 58542 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58000: LD_ADDR_VAR 0 2
58004: PUSH
58005: LD_INT 81
58007: PUSH
58008: LD_VAR 0 1
58012: PPUSH
58013: CALL_OW 255
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 33
58024: PUSH
58025: LD_INT 3
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 91
58034: PUSH
58035: LD_VAR 0 1
58039: PUSH
58040: LD_EXP 53
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 50
58052: PUSH
58053: EMPTY
58054: LIST
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: PPUSH
58062: CALL_OW 69
58066: ST_TO_ADDR
// if not tmp then
58067: LD_VAR 0 2
58071: NOT
58072: IFFALSE 58076
// continue ;
58074: GO 57871
// HackLink ( i , tmp ) ;
58076: LD_VAR 0 1
58080: PPUSH
58081: LD_VAR 0 2
58085: PPUSH
58086: CALL 58233 0 2
// end ;
58090: GO 57871
58092: POP
58093: POP
// end ;
58094: PPOPN 2
58096: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58097: LD_INT 0
58099: PPUSH
58100: PPUSH
58101: PPUSH
// if not hack in hackTanks then
58102: LD_VAR 0 1
58106: PUSH
58107: LD_EXP 50
58111: IN
58112: NOT
58113: IFFALSE 58117
// exit ;
58115: GO 58228
// index := GetElementIndex ( hackTanks , hack ) ;
58117: LD_ADDR_VAR 0 4
58121: PUSH
58122: LD_EXP 50
58126: PPUSH
58127: LD_VAR 0 1
58131: PPUSH
58132: CALL 7817 0 2
58136: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58137: LD_EXP 51
58141: PUSH
58142: LD_VAR 0 4
58146: ARRAY
58147: IFFALSE 58228
// begin for i in hackTanksCaptured [ index ] do
58149: LD_ADDR_VAR 0 3
58153: PUSH
58154: LD_EXP 51
58158: PUSH
58159: LD_VAR 0 4
58163: ARRAY
58164: PUSH
58165: FOR_IN
58166: IFFALSE 58192
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58168: LD_VAR 0 3
58172: PUSH
58173: LD_INT 1
58175: ARRAY
58176: PPUSH
58177: LD_VAR 0 3
58181: PUSH
58182: LD_INT 2
58184: ARRAY
58185: PPUSH
58186: CALL_OW 235
58190: GO 58165
58192: POP
58193: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58194: LD_ADDR_EXP 51
58198: PUSH
58199: LD_EXP 51
58203: PPUSH
58204: LD_VAR 0 4
58208: PPUSH
58209: EMPTY
58210: PPUSH
58211: CALL_OW 1
58215: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58216: LD_VAR 0 1
58220: PPUSH
58221: LD_INT 0
58223: PPUSH
58224: CALL_OW 505
// end ; end ;
58228: LD_VAR 0 2
58232: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58233: LD_INT 0
58235: PPUSH
58236: PPUSH
58237: PPUSH
// if not hack in hackTanks or not vehicles then
58238: LD_VAR 0 1
58242: PUSH
58243: LD_EXP 50
58247: IN
58248: NOT
58249: IFTRUE 58258
58251: PUSH
58252: LD_VAR 0 2
58256: NOT
58257: OR
58258: IFFALSE 58262
// exit ;
58260: GO 58537
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58262: LD_ADDR_VAR 0 2
58266: PUSH
58267: LD_VAR 0 1
58271: PPUSH
58272: LD_VAR 0 2
58276: PPUSH
58277: LD_INT 1
58279: PPUSH
58280: LD_INT 1
58282: PPUSH
58283: CALL 8469 0 4
58287: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58288: LD_ADDR_VAR 0 5
58292: PUSH
58293: LD_EXP 50
58297: PPUSH
58298: LD_VAR 0 1
58302: PPUSH
58303: CALL 7817 0 2
58307: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58308: LD_EXP 51
58312: PUSH
58313: LD_VAR 0 5
58317: ARRAY
58318: PUSH
58319: LD_EXP 52
58323: LESS
58324: IFFALSE 58513
// begin for i := 1 to vehicles do
58326: LD_ADDR_VAR 0 4
58330: PUSH
58331: DOUBLE
58332: LD_INT 1
58334: DEC
58335: ST_TO_ADDR
58336: LD_VAR 0 2
58340: PUSH
58341: FOR_TO
58342: IFFALSE 58511
// begin if hackTanksCaptured [ index ] = hackLimit then
58344: LD_EXP 51
58348: PUSH
58349: LD_VAR 0 5
58353: ARRAY
58354: PUSH
58355: LD_EXP 52
58359: EQUAL
58360: IFFALSE 58364
// break ;
58362: GO 58511
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58364: LD_ADDR_EXP 54
58368: PUSH
58369: LD_EXP 54
58373: PPUSH
58374: LD_VAR 0 5
58378: PPUSH
58379: LD_EXP 54
58383: PUSH
58384: LD_VAR 0 5
58388: ARRAY
58389: PUSH
58390: LD_INT 1
58392: PLUS
58393: PPUSH
58394: CALL_OW 1
58398: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58399: LD_ADDR_EXP 51
58403: PUSH
58404: LD_EXP 51
58408: PPUSH
58409: LD_VAR 0 5
58413: PUSH
58414: LD_EXP 51
58418: PUSH
58419: LD_VAR 0 5
58423: ARRAY
58424: PUSH
58425: LD_INT 1
58427: PLUS
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PPUSH
58433: LD_VAR 0 2
58437: PUSH
58438: LD_VAR 0 4
58442: ARRAY
58443: PUSH
58444: LD_VAR 0 2
58448: PUSH
58449: LD_VAR 0 4
58453: ARRAY
58454: PPUSH
58455: CALL_OW 255
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PPUSH
58464: CALL 8034 0 3
58468: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58469: LD_VAR 0 2
58473: PUSH
58474: LD_VAR 0 4
58478: ARRAY
58479: PPUSH
58480: LD_VAR 0 1
58484: PPUSH
58485: CALL_OW 255
58489: PPUSH
58490: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58494: LD_VAR 0 2
58498: PUSH
58499: LD_VAR 0 4
58503: ARRAY
58504: PPUSH
58505: CALL_OW 141
// end ;
58509: GO 58341
58511: POP
58512: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58513: LD_VAR 0 1
58517: PPUSH
58518: LD_EXP 51
58522: PUSH
58523: LD_VAR 0 5
58527: ARRAY
58528: PUSH
58529: LD_INT 0
58531: PLUS
58532: PPUSH
58533: CALL_OW 505
// end ;
58537: LD_VAR 0 3
58541: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58542: LD_INT 0
58544: PPUSH
58545: PPUSH
58546: PPUSH
58547: PPUSH
// if not hack in hackTanks then
58548: LD_VAR 0 1
58552: PUSH
58553: LD_EXP 50
58557: IN
58558: NOT
58559: IFFALSE 58563
// exit ;
58561: GO 58807
// index := GetElementIndex ( hackTanks , hack ) ;
58563: LD_ADDR_VAR 0 4
58567: PUSH
58568: LD_EXP 50
58572: PPUSH
58573: LD_VAR 0 1
58577: PPUSH
58578: CALL 7817 0 2
58582: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58583: LD_ADDR_VAR 0 3
58587: PUSH
58588: DOUBLE
58589: LD_EXP 51
58593: PUSH
58594: LD_VAR 0 4
58598: ARRAY
58599: INC
58600: ST_TO_ADDR
58601: LD_INT 1
58603: PUSH
58604: FOR_DOWNTO
58605: IFFALSE 58781
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58607: LD_ADDR_VAR 0 5
58611: PUSH
58612: LD_EXP 51
58616: PUSH
58617: LD_VAR 0 4
58621: ARRAY
58622: PUSH
58623: LD_VAR 0 3
58627: ARRAY
58628: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58629: LD_VAR 0 5
58633: PUSH
58634: LD_INT 1
58636: ARRAY
58637: PPUSH
58638: CALL_OW 302
58642: NOT
58643: IFTRUE 58671
58645: PUSH
58646: LD_VAR 0 5
58650: PUSH
58651: LD_INT 1
58653: ARRAY
58654: PPUSH
58655: CALL_OW 255
58659: PUSH
58660: LD_VAR 0 1
58664: PPUSH
58665: CALL_OW 255
58669: NONEQUAL
58670: OR
58671: IFFALSE 58779
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58673: LD_VAR 0 5
58677: PUSH
58678: LD_INT 1
58680: ARRAY
58681: PPUSH
58682: CALL_OW 305
58686: IFFALSE 58714
58688: PUSH
58689: LD_VAR 0 5
58693: PUSH
58694: LD_INT 1
58696: ARRAY
58697: PPUSH
58698: CALL_OW 255
58702: PUSH
58703: LD_VAR 0 1
58707: PPUSH
58708: CALL_OW 255
58712: EQUAL
58713: AND
58714: IFFALSE 58738
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58716: LD_VAR 0 5
58720: PUSH
58721: LD_INT 1
58723: ARRAY
58724: PPUSH
58725: LD_VAR 0 5
58729: PUSH
58730: LD_INT 2
58732: ARRAY
58733: PPUSH
58734: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58738: LD_ADDR_EXP 51
58742: PUSH
58743: LD_EXP 51
58747: PPUSH
58748: LD_VAR 0 4
58752: PPUSH
58753: LD_EXP 51
58757: PUSH
58758: LD_VAR 0 4
58762: ARRAY
58763: PPUSH
58764: LD_VAR 0 3
58768: PPUSH
58769: CALL_OW 3
58773: PPUSH
58774: CALL_OW 1
58778: ST_TO_ADDR
// end ; end ;
58779: GO 58604
58781: POP
58782: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58783: LD_VAR 0 1
58787: PPUSH
58788: LD_EXP 51
58792: PUSH
58793: LD_VAR 0 4
58797: ARRAY
58798: PUSH
58799: LD_INT 0
58801: PLUS
58802: PPUSH
58803: CALL_OW 505
// end ;
58807: LD_VAR 0 2
58811: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58812: LD_INT 0
58814: PPUSH
58815: PPUSH
58816: PPUSH
58817: PPUSH
// if not hack in hackTanks then
58818: LD_VAR 0 1
58822: PUSH
58823: LD_EXP 50
58827: IN
58828: NOT
58829: IFFALSE 58833
// exit ;
58831: GO 58918
// index := GetElementIndex ( hackTanks , hack ) ;
58833: LD_ADDR_VAR 0 5
58837: PUSH
58838: LD_EXP 50
58842: PPUSH
58843: LD_VAR 0 1
58847: PPUSH
58848: CALL 7817 0 2
58852: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58853: LD_ADDR_VAR 0 4
58857: PUSH
58858: DOUBLE
58859: LD_INT 1
58861: DEC
58862: ST_TO_ADDR
58863: LD_EXP 51
58867: PUSH
58868: LD_VAR 0 5
58872: ARRAY
58873: PUSH
58874: FOR_TO
58875: IFFALSE 58916
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58877: LD_EXP 51
58881: PUSH
58882: LD_VAR 0 5
58886: ARRAY
58887: PUSH
58888: LD_VAR 0 4
58892: ARRAY
58893: PUSH
58894: LD_INT 1
58896: ARRAY
58897: PUSH
58898: LD_VAR 0 2
58902: EQUAL
58903: IFFALSE 58914
// KillUnit ( vehicle ) ;
58905: LD_VAR 0 2
58909: PPUSH
58910: CALL_OW 66
58914: GO 58874
58916: POP
58917: POP
// end ;
58918: LD_VAR 0 3
58922: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58923: LD_EXP 55
58927: NOT
58928: IFFALSE 58963
58930: GO 58932
58932: DISABLE
// begin initMiner := true ;
58933: LD_ADDR_EXP 55
58937: PUSH
58938: LD_INT 1
58940: ST_TO_ADDR
// minersList := [ ] ;
58941: LD_ADDR_EXP 56
58945: PUSH
58946: EMPTY
58947: ST_TO_ADDR
// minerMinesList := [ ] ;
58948: LD_ADDR_EXP 57
58952: PUSH
58953: EMPTY
58954: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58955: LD_ADDR_EXP 58
58959: PUSH
58960: LD_INT 5
58962: ST_TO_ADDR
// end ;
58963: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58964: LD_EXP 55
58968: IFFALSE 58986
58970: PUSH
58971: LD_INT 34
58973: PUSH
58974: LD_INT 81
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PPUSH
58981: CALL_OW 69
58985: AND
58986: IFFALSE 59449
58988: GO 58990
58990: DISABLE
58991: LD_INT 0
58993: PPUSH
58994: PPUSH
58995: PPUSH
58996: PPUSH
// begin enable ;
58997: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58998: LD_ADDR_VAR 0 1
59002: PUSH
59003: LD_INT 34
59005: PUSH
59006: LD_INT 81
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PPUSH
59013: CALL_OW 69
59017: PUSH
59018: FOR_IN
59019: IFFALSE 59091
// begin if not i in minersList then
59021: LD_VAR 0 1
59025: PUSH
59026: LD_EXP 56
59030: IN
59031: NOT
59032: IFFALSE 59089
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59034: LD_ADDR_EXP 56
59038: PUSH
59039: LD_EXP 56
59043: PPUSH
59044: LD_EXP 56
59048: PUSH
59049: LD_INT 1
59051: PLUS
59052: PPUSH
59053: LD_VAR 0 1
59057: PPUSH
59058: CALL_OW 1
59062: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59063: LD_ADDR_EXP 57
59067: PUSH
59068: LD_EXP 57
59072: PPUSH
59073: LD_EXP 57
59077: PUSH
59078: LD_INT 1
59080: PLUS
59081: PPUSH
59082: EMPTY
59083: PPUSH
59084: CALL_OW 1
59088: ST_TO_ADDR
// end end ;
59089: GO 59018
59091: POP
59092: POP
// for i := minerMinesList downto 1 do
59093: LD_ADDR_VAR 0 1
59097: PUSH
59098: DOUBLE
59099: LD_EXP 57
59103: INC
59104: ST_TO_ADDR
59105: LD_INT 1
59107: PUSH
59108: FOR_DOWNTO
59109: IFFALSE 59447
// begin if IsLive ( minersList [ i ] ) then
59111: LD_EXP 56
59115: PUSH
59116: LD_VAR 0 1
59120: ARRAY
59121: PPUSH
59122: CALL_OW 300
59126: IFFALSE 59154
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59128: LD_EXP 56
59132: PUSH
59133: LD_VAR 0 1
59137: ARRAY
59138: PPUSH
59139: LD_EXP 57
59143: PUSH
59144: LD_VAR 0 1
59148: ARRAY
59149: PPUSH
59150: CALL_OW 505
// if not minerMinesList [ i ] then
59154: LD_EXP 57
59158: PUSH
59159: LD_VAR 0 1
59163: ARRAY
59164: NOT
59165: IFFALSE 59169
// continue ;
59167: GO 59108
// for j := minerMinesList [ i ] downto 1 do
59169: LD_ADDR_VAR 0 2
59173: PUSH
59174: DOUBLE
59175: LD_EXP 57
59179: PUSH
59180: LD_VAR 0 1
59184: ARRAY
59185: INC
59186: ST_TO_ADDR
59187: LD_INT 1
59189: PUSH
59190: FOR_DOWNTO
59191: IFFALSE 59443
// begin side := GetSide ( minersList [ i ] ) ;
59193: LD_ADDR_VAR 0 3
59197: PUSH
59198: LD_EXP 56
59202: PUSH
59203: LD_VAR 0 1
59207: ARRAY
59208: PPUSH
59209: CALL_OW 255
59213: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59214: LD_ADDR_VAR 0 4
59218: PUSH
59219: LD_EXP 57
59223: PUSH
59224: LD_VAR 0 1
59228: ARRAY
59229: PUSH
59230: LD_VAR 0 2
59234: ARRAY
59235: PUSH
59236: LD_INT 1
59238: ARRAY
59239: PPUSH
59240: LD_EXP 57
59244: PUSH
59245: LD_VAR 0 1
59249: ARRAY
59250: PUSH
59251: LD_VAR 0 2
59255: ARRAY
59256: PUSH
59257: LD_INT 2
59259: ARRAY
59260: PPUSH
59261: CALL_OW 428
59265: ST_TO_ADDR
// if not tmp then
59266: LD_VAR 0 4
59270: NOT
59271: IFFALSE 59275
// continue ;
59273: GO 59190
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59275: LD_VAR 0 4
59279: PUSH
59280: LD_INT 81
59282: PUSH
59283: LD_VAR 0 3
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PPUSH
59292: CALL_OW 69
59296: IN
59297: IFFALSE 59347
59299: PUSH
59300: LD_EXP 57
59304: PUSH
59305: LD_VAR 0 1
59309: ARRAY
59310: PUSH
59311: LD_VAR 0 2
59315: ARRAY
59316: PUSH
59317: LD_INT 1
59319: ARRAY
59320: PPUSH
59321: LD_EXP 57
59325: PUSH
59326: LD_VAR 0 1
59330: ARRAY
59331: PUSH
59332: LD_VAR 0 2
59336: ARRAY
59337: PUSH
59338: LD_INT 2
59340: ARRAY
59341: PPUSH
59342: CALL_OW 458
59346: AND
59347: IFFALSE 59441
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59349: LD_EXP 57
59353: PUSH
59354: LD_VAR 0 1
59358: ARRAY
59359: PUSH
59360: LD_VAR 0 2
59364: ARRAY
59365: PUSH
59366: LD_INT 1
59368: ARRAY
59369: PPUSH
59370: LD_EXP 57
59374: PUSH
59375: LD_VAR 0 1
59379: ARRAY
59380: PUSH
59381: LD_VAR 0 2
59385: ARRAY
59386: PUSH
59387: LD_INT 2
59389: ARRAY
59390: PPUSH
59391: LD_VAR 0 3
59395: PPUSH
59396: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59400: LD_ADDR_EXP 57
59404: PUSH
59405: LD_EXP 57
59409: PPUSH
59410: LD_VAR 0 1
59414: PPUSH
59415: LD_EXP 57
59419: PUSH
59420: LD_VAR 0 1
59424: ARRAY
59425: PPUSH
59426: LD_VAR 0 2
59430: PPUSH
59431: CALL_OW 3
59435: PPUSH
59436: CALL_OW 1
59440: ST_TO_ADDR
// end ; end ;
59441: GO 59190
59443: POP
59444: POP
// end ;
59445: GO 59108
59447: POP
59448: POP
// end ;
59449: PPOPN 4
59451: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59452: LD_INT 0
59454: PPUSH
59455: PPUSH
// result := false ;
59456: LD_ADDR_VAR 0 4
59460: PUSH
59461: LD_INT 0
59463: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59464: LD_VAR 0 1
59468: PPUSH
59469: CALL_OW 264
59473: PUSH
59474: LD_INT 81
59476: EQUAL
59477: NOT
59478: IFFALSE 59482
// exit ;
59480: GO 59726
// index := GetElementIndex ( minersList , unit ) ;
59482: LD_ADDR_VAR 0 5
59486: PUSH
59487: LD_EXP 56
59491: PPUSH
59492: LD_VAR 0 1
59496: PPUSH
59497: CALL 7817 0 2
59501: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59502: LD_EXP 57
59506: PUSH
59507: LD_VAR 0 5
59511: ARRAY
59512: PUSH
59513: LD_EXP 58
59517: GREATEREQUAL
59518: IFFALSE 59522
// exit ;
59520: GO 59726
// ComMoveXY ( unit , x , y ) ;
59522: LD_VAR 0 1
59526: PPUSH
59527: LD_VAR 0 2
59531: PPUSH
59532: LD_VAR 0 3
59536: PPUSH
59537: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59541: LD_INT 35
59543: PPUSH
59544: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59548: LD_VAR 0 1
59552: PPUSH
59553: LD_VAR 0 2
59557: PPUSH
59558: LD_VAR 0 3
59562: PPUSH
59563: CALL 39863 0 3
59567: NOT
59568: IFFALSE 59581
59570: PUSH
59571: LD_VAR 0 1
59575: PPUSH
59576: CALL_OW 314
59580: AND
59581: IFFALSE 59585
// exit ;
59583: GO 59726
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59585: LD_VAR 0 2
59589: PPUSH
59590: LD_VAR 0 3
59594: PPUSH
59595: CALL_OW 428
59599: PUSH
59600: LD_VAR 0 1
59604: EQUAL
59605: IFFALSE 59619
59607: PUSH
59608: LD_VAR 0 1
59612: PPUSH
59613: CALL_OW 314
59617: NOT
59618: AND
59619: IFFALSE 59541
// PlaySoundXY ( x , y , PlantMine ) ;
59621: LD_VAR 0 2
59625: PPUSH
59626: LD_VAR 0 3
59630: PPUSH
59631: LD_STRING PlantMine
59633: PPUSH
59634: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59638: LD_VAR 0 2
59642: PPUSH
59643: LD_VAR 0 3
59647: PPUSH
59648: LD_VAR 0 1
59652: PPUSH
59653: CALL_OW 255
59657: PPUSH
59658: LD_INT 0
59660: PPUSH
59661: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59665: LD_ADDR_EXP 57
59669: PUSH
59670: LD_EXP 57
59674: PPUSH
59675: LD_VAR 0 5
59679: PUSH
59680: LD_EXP 57
59684: PUSH
59685: LD_VAR 0 5
59689: ARRAY
59690: PUSH
59691: LD_INT 1
59693: PLUS
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PPUSH
59699: LD_VAR 0 2
59703: PUSH
59704: LD_VAR 0 3
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PPUSH
59713: CALL 8034 0 3
59717: ST_TO_ADDR
// result := true ;
59718: LD_ADDR_VAR 0 4
59722: PUSH
59723: LD_INT 1
59725: ST_TO_ADDR
// end ;
59726: LD_VAR 0 4
59730: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59731: LD_INT 0
59733: PPUSH
59734: PPUSH
59735: PPUSH
// if not unit in minersList then
59736: LD_VAR 0 1
59740: PUSH
59741: LD_EXP 56
59745: IN
59746: NOT
59747: IFFALSE 59751
// exit ;
59749: GO 60145
// index := GetElementIndex ( minersList , unit ) ;
59751: LD_ADDR_VAR 0 6
59755: PUSH
59756: LD_EXP 56
59760: PPUSH
59761: LD_VAR 0 1
59765: PPUSH
59766: CALL 7817 0 2
59770: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59771: LD_ADDR_VAR 0 5
59775: PUSH
59776: DOUBLE
59777: LD_EXP 57
59781: PUSH
59782: LD_VAR 0 6
59786: ARRAY
59787: INC
59788: ST_TO_ADDR
59789: LD_INT 1
59791: PUSH
59792: FOR_DOWNTO
59793: IFFALSE 59956
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59795: LD_EXP 57
59799: PUSH
59800: LD_VAR 0 6
59804: ARRAY
59805: PUSH
59806: LD_VAR 0 5
59810: ARRAY
59811: PUSH
59812: LD_INT 1
59814: ARRAY
59815: PUSH
59816: LD_VAR 0 2
59820: EQUAL
59821: IFFALSE 59851
59823: PUSH
59824: LD_EXP 57
59828: PUSH
59829: LD_VAR 0 6
59833: ARRAY
59834: PUSH
59835: LD_VAR 0 5
59839: ARRAY
59840: PUSH
59841: LD_INT 2
59843: ARRAY
59844: PUSH
59845: LD_VAR 0 3
59849: EQUAL
59850: AND
59851: IFFALSE 59954
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59853: LD_EXP 57
59857: PUSH
59858: LD_VAR 0 6
59862: ARRAY
59863: PUSH
59864: LD_VAR 0 5
59868: ARRAY
59869: PUSH
59870: LD_INT 1
59872: ARRAY
59873: PPUSH
59874: LD_EXP 57
59878: PUSH
59879: LD_VAR 0 6
59883: ARRAY
59884: PUSH
59885: LD_VAR 0 5
59889: ARRAY
59890: PUSH
59891: LD_INT 2
59893: ARRAY
59894: PPUSH
59895: LD_VAR 0 1
59899: PPUSH
59900: CALL_OW 255
59904: PPUSH
59905: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59909: LD_ADDR_EXP 57
59913: PUSH
59914: LD_EXP 57
59918: PPUSH
59919: LD_VAR 0 6
59923: PPUSH
59924: LD_EXP 57
59928: PUSH
59929: LD_VAR 0 6
59933: ARRAY
59934: PPUSH
59935: LD_VAR 0 5
59939: PPUSH
59940: CALL_OW 3
59944: PPUSH
59945: CALL_OW 1
59949: ST_TO_ADDR
// exit ;
59950: POP
59951: POP
59952: GO 60145
// end ; end ;
59954: GO 59792
59956: POP
59957: POP
// for i := minerMinesList [ index ] downto 1 do
59958: LD_ADDR_VAR 0 5
59962: PUSH
59963: DOUBLE
59964: LD_EXP 57
59968: PUSH
59969: LD_VAR 0 6
59973: ARRAY
59974: INC
59975: ST_TO_ADDR
59976: LD_INT 1
59978: PUSH
59979: FOR_DOWNTO
59980: IFFALSE 60143
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59982: LD_EXP 57
59986: PUSH
59987: LD_VAR 0 6
59991: ARRAY
59992: PUSH
59993: LD_VAR 0 5
59997: ARRAY
59998: PUSH
59999: LD_INT 1
60001: ARRAY
60002: PPUSH
60003: LD_EXP 57
60007: PUSH
60008: LD_VAR 0 6
60012: ARRAY
60013: PUSH
60014: LD_VAR 0 5
60018: ARRAY
60019: PUSH
60020: LD_INT 2
60022: ARRAY
60023: PPUSH
60024: LD_VAR 0 2
60028: PPUSH
60029: LD_VAR 0 3
60033: PPUSH
60034: CALL_OW 298
60038: PUSH
60039: LD_INT 6
60041: LESS
60042: IFFALSE 60141
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60044: LD_EXP 57
60048: PUSH
60049: LD_VAR 0 6
60053: ARRAY
60054: PUSH
60055: LD_VAR 0 5
60059: ARRAY
60060: PUSH
60061: LD_INT 1
60063: ARRAY
60064: PPUSH
60065: LD_EXP 57
60069: PUSH
60070: LD_VAR 0 6
60074: ARRAY
60075: PUSH
60076: LD_VAR 0 5
60080: ARRAY
60081: PUSH
60082: LD_INT 2
60084: ARRAY
60085: PPUSH
60086: LD_VAR 0 1
60090: PPUSH
60091: CALL_OW 255
60095: PPUSH
60096: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60100: LD_ADDR_EXP 57
60104: PUSH
60105: LD_EXP 57
60109: PPUSH
60110: LD_VAR 0 6
60114: PPUSH
60115: LD_EXP 57
60119: PUSH
60120: LD_VAR 0 6
60124: ARRAY
60125: PPUSH
60126: LD_VAR 0 5
60130: PPUSH
60131: CALL_OW 3
60135: PPUSH
60136: CALL_OW 1
60140: ST_TO_ADDR
// end ; end ;
60141: GO 59979
60143: POP
60144: POP
// end ;
60145: LD_VAR 0 4
60149: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60150: LD_INT 0
60152: PPUSH
60153: PPUSH
60154: PPUSH
60155: PPUSH
60156: PPUSH
60157: PPUSH
60158: PPUSH
60159: PPUSH
60160: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60161: LD_VAR 0 1
60165: PPUSH
60166: CALL_OW 264
60170: PUSH
60171: LD_INT 81
60173: EQUAL
60174: NOT
60175: IFTRUE 60190
60177: PUSH
60178: LD_VAR 0 1
60182: PUSH
60183: LD_EXP 56
60187: IN
60188: NOT
60189: OR
60190: IFFALSE 60194
// exit ;
60192: GO 60520
// index := GetElementIndex ( minersList , unit ) ;
60194: LD_ADDR_VAR 0 6
60198: PUSH
60199: LD_EXP 56
60203: PPUSH
60204: LD_VAR 0 1
60208: PPUSH
60209: CALL 7817 0 2
60213: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60214: LD_ADDR_VAR 0 8
60218: PUSH
60219: LD_EXP 58
60223: PUSH
60224: LD_EXP 57
60228: PUSH
60229: LD_VAR 0 6
60233: ARRAY
60234: MINUS
60235: ST_TO_ADDR
// if not minesFreeAmount then
60236: LD_VAR 0 8
60240: NOT
60241: IFFALSE 60245
// exit ;
60243: GO 60520
// tmp := [ ] ;
60245: LD_ADDR_VAR 0 7
60249: PUSH
60250: EMPTY
60251: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60252: LD_ADDR_VAR 0 5
60256: PUSH
60257: DOUBLE
60258: LD_INT 1
60260: DEC
60261: ST_TO_ADDR
60262: LD_VAR 0 8
60266: PUSH
60267: FOR_TO
60268: IFFALSE 60467
// begin _d := rand ( 0 , 5 ) ;
60270: LD_ADDR_VAR 0 11
60274: PUSH
60275: LD_INT 0
60277: PPUSH
60278: LD_INT 5
60280: PPUSH
60281: CALL_OW 12
60285: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60286: LD_ADDR_VAR 0 12
60290: PUSH
60291: LD_INT 2
60293: PPUSH
60294: LD_INT 6
60296: PPUSH
60297: CALL_OW 12
60301: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60302: LD_ADDR_VAR 0 9
60306: PUSH
60307: LD_VAR 0 2
60311: PPUSH
60312: LD_VAR 0 11
60316: PPUSH
60317: LD_VAR 0 12
60321: PPUSH
60322: CALL_OW 272
60326: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60327: LD_ADDR_VAR 0 10
60331: PUSH
60332: LD_VAR 0 3
60336: PPUSH
60337: LD_VAR 0 11
60341: PPUSH
60342: LD_VAR 0 12
60346: PPUSH
60347: CALL_OW 273
60351: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60352: LD_VAR 0 9
60356: PPUSH
60357: LD_VAR 0 10
60361: PPUSH
60362: CALL_OW 488
60366: IFFALSE 60390
60368: PUSH
60369: LD_VAR 0 9
60373: PUSH
60374: LD_VAR 0 10
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_VAR 0 7
60387: IN
60388: NOT
60389: AND
60390: IFFALSE 60409
60392: PUSH
60393: LD_VAR 0 9
60397: PPUSH
60398: LD_VAR 0 10
60402: PPUSH
60403: CALL_OW 458
60407: NOT
60408: AND
60409: IFFALSE 60451
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60411: LD_ADDR_VAR 0 7
60415: PUSH
60416: LD_VAR 0 7
60420: PPUSH
60421: LD_VAR 0 7
60425: PUSH
60426: LD_INT 1
60428: PLUS
60429: PPUSH
60430: LD_VAR 0 9
60434: PUSH
60435: LD_VAR 0 10
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PPUSH
60444: CALL_OW 1
60448: ST_TO_ADDR
60449: GO 60465
// i := i - 1 ;
60451: LD_ADDR_VAR 0 5
60455: PUSH
60456: LD_VAR 0 5
60460: PUSH
60461: LD_INT 1
60463: MINUS
60464: ST_TO_ADDR
// end ;
60465: GO 60267
60467: POP
60468: POP
// for i in tmp do
60469: LD_ADDR_VAR 0 5
60473: PUSH
60474: LD_VAR 0 7
60478: PUSH
60479: FOR_IN
60480: IFFALSE 60518
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60482: LD_VAR 0 1
60486: PPUSH
60487: LD_VAR 0 5
60491: PUSH
60492: LD_INT 1
60494: ARRAY
60495: PPUSH
60496: LD_VAR 0 5
60500: PUSH
60501: LD_INT 2
60503: ARRAY
60504: PPUSH
60505: CALL 59452 0 3
60509: NOT
60510: IFFALSE 60516
// exit ;
60512: POP
60513: POP
60514: GO 60520
60516: GO 60479
60518: POP
60519: POP
// end ;
60520: LD_VAR 0 4
60524: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60525: LD_INT 0
60527: PPUSH
60528: PPUSH
60529: PPUSH
60530: PPUSH
60531: PPUSH
60532: PPUSH
60533: PPUSH
60534: PPUSH
60535: PPUSH
// if GetClass ( unit ) <> class_sniper then
60536: LD_VAR 0 1
60540: PPUSH
60541: CALL_OW 257
60545: PUSH
60546: LD_INT 5
60548: NONEQUAL
60549: IFFALSE 60553
// exit ;
60551: GO 61023
// dist := 8 ;
60553: LD_ADDR_VAR 0 5
60557: PUSH
60558: LD_INT 8
60560: ST_TO_ADDR
// viewRange := 12 ;
60561: LD_ADDR_VAR 0 8
60565: PUSH
60566: LD_INT 12
60568: ST_TO_ADDR
// side := GetSide ( unit ) ;
60569: LD_ADDR_VAR 0 6
60573: PUSH
60574: LD_VAR 0 1
60578: PPUSH
60579: CALL_OW 255
60583: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60584: LD_INT 61
60586: PPUSH
60587: LD_VAR 0 6
60591: PPUSH
60592: CALL_OW 321
60596: PUSH
60597: LD_INT 2
60599: EQUAL
60600: IFFALSE 60610
// viewRange := 16 ;
60602: LD_ADDR_VAR 0 8
60606: PUSH
60607: LD_INT 16
60609: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60610: LD_VAR 0 1
60614: PPUSH
60615: LD_VAR 0 2
60619: PPUSH
60620: LD_VAR 0 3
60624: PPUSH
60625: CALL_OW 297
60629: PUSH
60630: LD_VAR 0 5
60634: GREATER
60635: IFFALSE 60714
// begin ComMoveXY ( unit , x , y ) ;
60637: LD_VAR 0 1
60641: PPUSH
60642: LD_VAR 0 2
60646: PPUSH
60647: LD_VAR 0 3
60651: PPUSH
60652: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60656: LD_INT 35
60658: PPUSH
60659: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60663: LD_VAR 0 1
60667: PPUSH
60668: LD_VAR 0 2
60672: PPUSH
60673: LD_VAR 0 3
60677: PPUSH
60678: CALL 39863 0 3
60682: NOT
60683: IFFALSE 60687
// exit ;
60685: GO 61023
// until GetDistUnitXY ( unit , x , y ) < dist ;
60687: LD_VAR 0 1
60691: PPUSH
60692: LD_VAR 0 2
60696: PPUSH
60697: LD_VAR 0 3
60701: PPUSH
60702: CALL_OW 297
60706: PUSH
60707: LD_VAR 0 5
60711: LESS
60712: IFFALSE 60656
// end ; ComTurnXY ( unit , x , y ) ;
60714: LD_VAR 0 1
60718: PPUSH
60719: LD_VAR 0 2
60723: PPUSH
60724: LD_VAR 0 3
60728: PPUSH
60729: CALL_OW 118
// repeat if Multiplayer then
60733: LD_OWVAR 4
60737: IFFALSE 60748
// wait ( 35 ) else
60739: LD_INT 35
60741: PPUSH
60742: CALL_OW 67
60746: GO 60755
// wait ( 5 ) ;
60748: LD_INT 5
60750: PPUSH
60751: CALL_OW 67
// _d := GetDir ( unit ) ;
60755: LD_ADDR_VAR 0 11
60759: PUSH
60760: LD_VAR 0 1
60764: PPUSH
60765: CALL_OW 254
60769: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60770: LD_ADDR_VAR 0 7
60774: PUSH
60775: LD_VAR 0 1
60779: PPUSH
60780: CALL_OW 250
60784: PPUSH
60785: LD_VAR 0 1
60789: PPUSH
60790: CALL_OW 251
60794: PPUSH
60795: LD_VAR 0 2
60799: PPUSH
60800: LD_VAR 0 3
60804: PPUSH
60805: CALL 42499 0 4
60809: ST_TO_ADDR
// until dir = _d ;
60810: LD_VAR 0 7
60814: PUSH
60815: LD_VAR 0 11
60819: EQUAL
60820: IFFALSE 60733
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60822: LD_ADDR_VAR 0 9
60826: PUSH
60827: LD_VAR 0 1
60831: PPUSH
60832: CALL_OW 250
60836: PPUSH
60837: LD_VAR 0 7
60841: PPUSH
60842: LD_VAR 0 5
60846: PPUSH
60847: CALL_OW 272
60851: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60852: LD_ADDR_VAR 0 10
60856: PUSH
60857: LD_VAR 0 1
60861: PPUSH
60862: CALL_OW 251
60866: PPUSH
60867: LD_VAR 0 7
60871: PPUSH
60872: LD_VAR 0 5
60876: PPUSH
60877: CALL_OW 273
60881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60882: LD_VAR 0 9
60886: PPUSH
60887: LD_VAR 0 10
60891: PPUSH
60892: CALL_OW 488
60896: NOT
60897: IFFALSE 60901
// exit ;
60899: GO 61023
// ComAnimCustom ( unit , 1 ) ;
60901: LD_VAR 0 1
60905: PPUSH
60906: LD_INT 1
60908: PPUSH
60909: CALL_OW 592
// p := 0 ;
60913: LD_ADDR_VAR 0 12
60917: PUSH
60918: LD_INT 0
60920: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60921: LD_VAR 0 9
60925: PPUSH
60926: LD_VAR 0 10
60930: PPUSH
60931: LD_VAR 0 6
60935: PPUSH
60936: LD_VAR 0 8
60940: PPUSH
60941: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60945: LD_INT 35
60947: PPUSH
60948: CALL_OW 67
// p := Inc ( p ) ;
60952: LD_ADDR_VAR 0 12
60956: PUSH
60957: LD_VAR 0 12
60961: PPUSH
60962: CALL 42455 0 1
60966: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60967: LD_VAR 0 12
60971: PUSH
60972: LD_INT 3
60974: EQUAL
60975: IFTRUE 60989
60977: PUSH
60978: LD_VAR 0 1
60982: PPUSH
60983: CALL_OW 302
60987: NOT
60988: OR
60989: IFTRUE 61002
60991: PUSH
60992: LD_VAR 0 1
60996: PPUSH
60997: CALL_OW 301
61001: OR
61002: IFFALSE 60945
// RemoveSeeing ( _x , _y , side ) ;
61004: LD_VAR 0 9
61008: PPUSH
61009: LD_VAR 0 10
61013: PPUSH
61014: LD_VAR 0 6
61018: PPUSH
61019: CALL_OW 331
// end ; end_of_file
61023: LD_VAR 0 4
61027: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
61028: PPOPN 6
61030: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
61031: LD_EXP 3
61035: PUSH
61036: LD_INT 4
61038: EQUAL
61039: IFFALSE 61075
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61041: LD_STRING setGameDifficulty(
61043: PUSH
61044: LD_OWVAR 67
61048: STR
61049: PUSH
61050: LD_STRING )
61052: STR
61053: PPUSH
61054: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61058: LD_STRING displayDifficulty(
61060: PUSH
61061: LD_OWVAR 67
61065: STR
61066: PUSH
61067: LD_STRING )
61069: STR
61070: PPUSH
61071: CALL_OW 559
// end ; SOS_MapStart ( ) ;
61075: CALL 61104 0 0
// end ; end_of_file
61079: PPOPN 1
61081: END
// every 0 0$1 do
61082: GO 61084
61084: DISABLE
// begin enable ;
61085: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61086: LD_STRING updateTimer(
61088: PUSH
61089: LD_OWVAR 1
61093: STR
61094: PUSH
61095: LD_STRING );
61097: STR
61098: PPUSH
61099: CALL_OW 559
// end ;
61103: END
// export function SOS_MapStart ( ) ; begin
61104: LD_INT 0
61106: PPUSH
// UpdateFactoryWaypoints ( ) ;
61107: CALL 62038 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61111: CALL 62290 0 0
// ParseMultiDataToLua ( ) ;
61115: CALL 62437 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61119: LD_STRING setSpecLogoNumber(
61121: PUSH
61122: LD_INT 2
61124: STR
61125: PUSH
61126: LD_STRING ,
61128: STR
61129: PUSH
61130: LD_INT 1
61132: STR
61133: PUSH
61134: LD_STRING )
61136: STR
61137: PPUSH
61138: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61142: LD_STRING setSpecLogoNumber(
61144: PUSH
61145: LD_INT 3
61147: STR
61148: PUSH
61149: LD_STRING ,
61151: STR
61152: PUSH
61153: LD_INT 2
61155: STR
61156: PUSH
61157: LD_STRING )
61159: STR
61160: PPUSH
61161: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61165: LD_STRING setSpecLogoNumber(
61167: PUSH
61168: LD_INT 4
61170: STR
61171: PUSH
61172: LD_STRING ,
61174: STR
61175: PUSH
61176: LD_INT 3
61178: STR
61179: PUSH
61180: LD_STRING )
61182: STR
61183: PPUSH
61184: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61188: LD_STRING setSpecLogoNumber(
61190: PUSH
61191: LD_INT 5
61193: STR
61194: PUSH
61195: LD_STRING ,
61197: STR
61198: PUSH
61199: LD_INT 4
61201: STR
61202: PUSH
61203: LD_STRING )
61205: STR
61206: PPUSH
61207: CALL_OW 559
// end ;
61211: LD_VAR 0 1
61215: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61216: LD_INT 0
61218: PPUSH
61219: PPUSH
61220: PPUSH
61221: PPUSH
61222: PPUSH
61223: PPUSH
61224: PPUSH
61225: PPUSH
61226: PPUSH
// for i := 1 to 8 do
61227: LD_ADDR_VAR 0 2
61231: PUSH
61232: DOUBLE
61233: LD_INT 1
61235: DEC
61236: ST_TO_ADDR
61237: LD_INT 8
61239: PUSH
61240: FOR_TO
61241: IFFALSE 61626
// begin if mpSidePositions [ i ] then
61243: LD_EXP 7
61247: PUSH
61248: LD_VAR 0 2
61252: ARRAY
61253: IFFALSE 61624
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61255: LD_ADDR_VAR 0 7
61259: PUSH
61260: LD_INT 22
61262: PUSH
61263: LD_VAR 0 2
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 21
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PPUSH
61286: CALL_OW 69
61290: PPUSH
61291: CALL 5150 0 1
61295: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61296: LD_ADDR_VAR 0 9
61300: PUSH
61301: LD_INT 22
61303: PUSH
61304: LD_VAR 0 2
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 30
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 30
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PPUSH
61345: CALL_OW 69
61349: ST_TO_ADDR
// crates := 0 ;
61350: LD_ADDR_VAR 0 4
61354: PUSH
61355: LD_INT 0
61357: ST_TO_ADDR
// oil := 0 ;
61358: LD_ADDR_VAR 0 5
61362: PUSH
61363: LD_INT 0
61365: ST_TO_ADDR
// sib := 0 ;
61366: LD_ADDR_VAR 0 6
61370: PUSH
61371: LD_INT 0
61373: ST_TO_ADDR
// if bases then
61374: LD_VAR 0 9
61378: IFFALSE 61484
// begin for j in bases do
61380: LD_ADDR_VAR 0 3
61384: PUSH
61385: LD_VAR 0 9
61389: PUSH
61390: FOR_IN
61391: IFFALSE 61482
// begin base := GetBase ( j ) ;
61393: LD_ADDR_VAR 0 8
61397: PUSH
61398: LD_VAR 0 3
61402: PPUSH
61403: CALL_OW 274
61407: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61408: LD_ADDR_VAR 0 4
61412: PUSH
61413: LD_VAR 0 4
61417: PUSH
61418: LD_VAR 0 8
61422: PPUSH
61423: LD_INT 1
61425: PPUSH
61426: CALL_OW 275
61430: PLUS
61431: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61432: LD_ADDR_VAR 0 5
61436: PUSH
61437: LD_VAR 0 5
61441: PUSH
61442: LD_VAR 0 8
61446: PPUSH
61447: LD_INT 2
61449: PPUSH
61450: CALL_OW 275
61454: PLUS
61455: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61456: LD_ADDR_VAR 0 6
61460: PUSH
61461: LD_VAR 0 6
61465: PUSH
61466: LD_VAR 0 8
61470: PPUSH
61471: LD_INT 3
61473: PPUSH
61474: CALL_OW 275
61478: PLUS
61479: ST_TO_ADDR
// end ;
61480: GO 61390
61482: POP
61483: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61484: LD_STRING setSpecText(
61486: PUSH
61487: LD_VAR 0 2
61491: STR
61492: PUSH
61493: LD_STRING ,
61495: STR
61496: PUSH
61497: LD_INT 2
61499: STR
61500: PUSH
61501: LD_STRING ,
61503: STR
61504: PUSH
61505: LD_VAR 0 4
61509: STR
61510: PUSH
61511: LD_STRING )
61513: STR
61514: PPUSH
61515: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61519: LD_STRING setSpecText(
61521: PUSH
61522: LD_VAR 0 2
61526: STR
61527: PUSH
61528: LD_STRING ,
61530: STR
61531: PUSH
61532: LD_INT 3
61534: STR
61535: PUSH
61536: LD_STRING ,
61538: STR
61539: PUSH
61540: LD_VAR 0 5
61544: STR
61545: PUSH
61546: LD_STRING )
61548: STR
61549: PPUSH
61550: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61554: LD_STRING setSpecText(
61556: PUSH
61557: LD_VAR 0 2
61561: STR
61562: PUSH
61563: LD_STRING ,
61565: STR
61566: PUSH
61567: LD_INT 4
61569: STR
61570: PUSH
61571: LD_STRING ,
61573: STR
61574: PUSH
61575: LD_VAR 0 6
61579: STR
61580: PUSH
61581: LD_STRING )
61583: STR
61584: PPUSH
61585: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61589: LD_STRING setSpecText(
61591: PUSH
61592: LD_VAR 0 2
61596: STR
61597: PUSH
61598: LD_STRING ,
61600: STR
61601: PUSH
61602: LD_INT 5
61604: STR
61605: PUSH
61606: LD_STRING ,
61608: STR
61609: PUSH
61610: LD_VAR 0 7
61614: STR
61615: PUSH
61616: LD_STRING )
61618: STR
61619: PPUSH
61620: CALL_OW 559
// end ; end ;
61624: GO 61240
61626: POP
61627: POP
// end ;
61628: LD_VAR 0 1
61632: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61633: LD_INT 2
61635: PUSH
61636: LD_INT 30
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 30
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: PPUSH
61661: CALL_OW 69
61665: IFFALSE 61675
61667: GO 61669
61669: DISABLE
// begin enable ;
61670: ENABLE
// UpdateSpectatorBar ;
61671: CALL 61216 0 0
// end ;
61675: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61676: LD_INT 0
61678: PPUSH
// end ;
61679: LD_VAR 0 12
61683: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61684: LD_INT 0
61686: PPUSH
61687: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61688: LD_VAR 0 1
61692: NOT
61693: IFTRUE 61712
61695: PUSH
61696: LD_VAR 0 2
61700: PPUSH
61701: LD_VAR 0 3
61705: PPUSH
61706: CALL_OW 488
61710: NOT
61711: OR
61712: IFTRUE 61747
61714: PUSH
61715: LD_VAR 0 1
61719: PPUSH
61720: CALL_OW 266
61724: PUSH
61725: LD_INT 3
61727: NONEQUAL
61728: IFFALSE 61746
61730: PUSH
61731: LD_VAR 0 1
61735: PPUSH
61736: CALL_OW 247
61740: PUSH
61741: LD_INT 1
61743: EQUAL
61744: NOT
61745: AND
61746: OR
61747: IFFALSE 61751
// exit ;
61749: GO 62033
// if GetType ( factory ) = unit_human then
61751: LD_VAR 0 1
61755: PPUSH
61756: CALL_OW 247
61760: PUSH
61761: LD_INT 1
61763: EQUAL
61764: IFFALSE 61781
// factory := IsInUnit ( factory ) ;
61766: LD_ADDR_VAR 0 1
61770: PUSH
61771: LD_VAR 0 1
61775: PPUSH
61776: CALL_OW 310
61780: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61781: LD_VAR 0 1
61785: PPUSH
61786: CALL_OW 266
61790: PUSH
61791: LD_INT 3
61793: NONEQUAL
61794: IFFALSE 61798
// exit ;
61796: GO 62033
// for i := 1 to Count ( factoryWaypoints ) do
61798: LD_ADDR_VAR 0 5
61802: PUSH
61803: DOUBLE
61804: LD_INT 1
61806: DEC
61807: ST_TO_ADDR
61808: LD_EXP 59
61812: PPUSH
61813: CALL 5150 0 1
61817: PUSH
61818: FOR_TO
61819: IFFALSE 61981
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61821: LD_VAR 0 2
61825: PPUSH
61826: LD_VAR 0 3
61830: PPUSH
61831: CALL_OW 428
61835: PUSH
61836: LD_EXP 59
61840: PUSH
61841: LD_VAR 0 5
61845: ARRAY
61846: PUSH
61847: LD_INT 2
61849: ARRAY
61850: EQUAL
61851: IFFALSE 61883
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61853: LD_ADDR_EXP 59
61857: PUSH
61858: LD_EXP 59
61862: PPUSH
61863: LD_VAR 0 5
61867: PPUSH
61868: CALL_OW 3
61872: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61873: CALL 62038 0 0
// exit ;
61877: POP
61878: POP
61879: GO 62033
// end else
61881: GO 61979
// if factory = factoryWaypoints [ i ] [ 2 ] then
61883: LD_VAR 0 1
61887: PUSH
61888: LD_EXP 59
61892: PUSH
61893: LD_VAR 0 5
61897: ARRAY
61898: PUSH
61899: LD_INT 2
61901: ARRAY
61902: EQUAL
61903: IFFALSE 61979
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61905: LD_ADDR_EXP 59
61909: PUSH
61910: LD_EXP 59
61914: PPUSH
61915: LD_VAR 0 5
61919: PPUSH
61920: CALL_OW 3
61924: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61925: LD_ADDR_EXP 59
61929: PUSH
61930: LD_EXP 59
61934: PPUSH
61935: LD_VAR 0 1
61939: PPUSH
61940: CALL_OW 255
61944: PUSH
61945: LD_VAR 0 1
61949: PUSH
61950: LD_VAR 0 2
61954: PUSH
61955: LD_VAR 0 3
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: PPUSH
61966: CALL 41082 0 2
61970: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61971: CALL 62038 0 0
// exit ;
61975: POP
61976: POP
61977: GO 62033
// end ; end ;
61979: GO 61818
61981: POP
61982: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61983: LD_ADDR_EXP 59
61987: PUSH
61988: LD_EXP 59
61992: PPUSH
61993: LD_VAR 0 1
61997: PPUSH
61998: CALL_OW 255
62002: PUSH
62003: LD_VAR 0 1
62007: PUSH
62008: LD_VAR 0 2
62012: PUSH
62013: LD_VAR 0 3
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: PPUSH
62024: CALL 41082 0 2
62028: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62029: CALL 62038 0 0
// end ;
62033: LD_VAR 0 4
62037: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62038: LD_INT 0
62040: PPUSH
62041: PPUSH
62042: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62043: LD_STRING resetFactoryWaypoint();
62045: PPUSH
62046: CALL_OW 559
// if factoryWaypoints then
62050: LD_EXP 59
62054: IFFALSE 62175
// begin list := factoryWaypoints ;
62056: LD_ADDR_VAR 0 3
62060: PUSH
62061: LD_EXP 59
62065: ST_TO_ADDR
// for i := 1 to list do
62066: LD_ADDR_VAR 0 2
62070: PUSH
62071: DOUBLE
62072: LD_INT 1
62074: DEC
62075: ST_TO_ADDR
62076: LD_VAR 0 3
62080: PUSH
62081: FOR_TO
62082: IFFALSE 62173
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62084: LD_STRING setFactoryWaypointXY(
62086: PUSH
62087: LD_VAR 0 3
62091: PUSH
62092: LD_VAR 0 2
62096: ARRAY
62097: PUSH
62098: LD_INT 1
62100: ARRAY
62101: STR
62102: PUSH
62103: LD_STRING ,
62105: STR
62106: PUSH
62107: LD_VAR 0 3
62111: PUSH
62112: LD_VAR 0 2
62116: ARRAY
62117: PUSH
62118: LD_INT 2
62120: ARRAY
62121: STR
62122: PUSH
62123: LD_STRING ,
62125: STR
62126: PUSH
62127: LD_VAR 0 3
62131: PUSH
62132: LD_VAR 0 2
62136: ARRAY
62137: PUSH
62138: LD_INT 3
62140: ARRAY
62141: STR
62142: PUSH
62143: LD_STRING ,
62145: STR
62146: PUSH
62147: LD_VAR 0 3
62151: PUSH
62152: LD_VAR 0 2
62156: ARRAY
62157: PUSH
62158: LD_INT 4
62160: ARRAY
62161: STR
62162: PUSH
62163: LD_STRING )
62165: STR
62166: PPUSH
62167: CALL_OW 559
62171: GO 62081
62173: POP
62174: POP
// end ; end ;
62175: LD_VAR 0 1
62179: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62180: LD_INT 0
62182: PPUSH
// if HexInfo ( x , y ) = warehouse then
62183: LD_VAR 0 2
62187: PPUSH
62188: LD_VAR 0 3
62192: PPUSH
62193: CALL_OW 428
62197: PUSH
62198: LD_VAR 0 1
62202: EQUAL
62203: IFFALSE 62230
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62205: LD_ADDR_EXP 61
62209: PUSH
62210: LD_EXP 61
62214: PPUSH
62215: LD_VAR 0 1
62219: PPUSH
62220: LD_INT 0
62222: PPUSH
62223: CALL_OW 1
62227: ST_TO_ADDR
62228: GO 62281
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62230: LD_ADDR_EXP 61
62234: PUSH
62235: LD_EXP 61
62239: PPUSH
62240: LD_VAR 0 1
62244: PPUSH
62245: LD_VAR 0 1
62249: PPUSH
62250: CALL_OW 255
62254: PUSH
62255: LD_VAR 0 1
62259: PUSH
62260: LD_VAR 0 2
62264: PUSH
62265: LD_VAR 0 3
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: PPUSH
62276: CALL_OW 1
62280: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62281: CALL 62290 0 0
// end ;
62285: LD_VAR 0 4
62289: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62290: LD_INT 0
62292: PPUSH
62293: PPUSH
62294: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62295: LD_STRING resetWarehouseGatheringPoints();
62297: PPUSH
62298: CALL_OW 559
// if warehouseGatheringPoints then
62302: LD_EXP 61
62306: IFFALSE 62432
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62308: LD_ADDR_VAR 0 3
62312: PUSH
62313: LD_EXP 61
62317: PPUSH
62318: CALL 45016 0 1
62322: ST_TO_ADDR
// for i := 1 to list do
62323: LD_ADDR_VAR 0 2
62327: PUSH
62328: DOUBLE
62329: LD_INT 1
62331: DEC
62332: ST_TO_ADDR
62333: LD_VAR 0 3
62337: PUSH
62338: FOR_TO
62339: IFFALSE 62430
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62341: LD_STRING setWarehouseGatheringPointXY(
62343: PUSH
62344: LD_VAR 0 3
62348: PUSH
62349: LD_VAR 0 2
62353: ARRAY
62354: PUSH
62355: LD_INT 1
62357: ARRAY
62358: STR
62359: PUSH
62360: LD_STRING ,
62362: STR
62363: PUSH
62364: LD_VAR 0 3
62368: PUSH
62369: LD_VAR 0 2
62373: ARRAY
62374: PUSH
62375: LD_INT 2
62377: ARRAY
62378: STR
62379: PUSH
62380: LD_STRING ,
62382: STR
62383: PUSH
62384: LD_VAR 0 3
62388: PUSH
62389: LD_VAR 0 2
62393: ARRAY
62394: PUSH
62395: LD_INT 3
62397: ARRAY
62398: STR
62399: PUSH
62400: LD_STRING ,
62402: STR
62403: PUSH
62404: LD_VAR 0 3
62408: PUSH
62409: LD_VAR 0 2
62413: ARRAY
62414: PUSH
62415: LD_INT 4
62417: ARRAY
62418: STR
62419: PUSH
62420: LD_STRING )
62422: STR
62423: PPUSH
62424: CALL_OW 559
62428: GO 62338
62430: POP
62431: POP
// end ; end ;
62432: LD_VAR 0 1
62436: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62437: LD_INT 0
62439: PPUSH
62440: PPUSH
// if not mpSidePositions then
62441: LD_EXP 7
62445: NOT
62446: IFFALSE 62450
// exit ;
62448: GO 62521
// result :=  ;
62450: LD_ADDR_VAR 0 1
62454: PUSH
62455: LD_STRING 
62457: ST_TO_ADDR
// for i := 1 to 8 do
62458: LD_ADDR_VAR 0 2
62462: PUSH
62463: DOUBLE
62464: LD_INT 1
62466: DEC
62467: ST_TO_ADDR
62468: LD_INT 8
62470: PUSH
62471: FOR_TO
62472: IFFALSE 62502
// begin result := result & mpSidePositions [ i ] & ; ;
62474: LD_ADDR_VAR 0 1
62478: PUSH
62479: LD_VAR 0 1
62483: PUSH
62484: LD_EXP 7
62488: PUSH
62489: LD_VAR 0 2
62493: ARRAY
62494: STR
62495: PUSH
62496: LD_STRING ;
62498: STR
62499: ST_TO_ADDR
// end ;
62500: GO 62471
62502: POP
62503: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62504: LD_STRING setMultiplayerRealPosition("
62506: PUSH
62507: LD_VAR 0 1
62511: STR
62512: PUSH
62513: LD_STRING ");
62515: STR
62516: PPUSH
62517: CALL_OW 559
// end ;
62521: LD_VAR 0 1
62525: RET
