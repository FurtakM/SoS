// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46553 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46937 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 230
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 8
 852: PUSH
 853: LD_INT 9
 855: PUSH
 856: LD_INT 10
 858: PUSH
 859: LD_INT 11
 861: PUSH
 862: LD_INT 12
 864: PUSH
 865: LD_INT 13
 867: PUSH
 868: LD_INT 14
 870: PUSH
 871: LD_INT 15
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 4
 891: PUSH
 892: LD_INT 5
 894: PUSH
 895: LD_INT 6
 897: PUSH
 898: LD_INT 7
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 2
 906: PUSH
 907: LD_INT 3
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 19
 923: UNION
 924: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 925: LD_VAR 0 1
 929: PUSH
 930: LD_INT 2
 932: EQUAL
 933: IFFALSE 945
// baseLevel := 1 else
 935: LD_ADDR_VAR 0 7
 939: PUSH
 940: LD_INT 1
 942: ST_TO_ADDR
 943: GO 959
// baseLevel := mpGameSettings [ 1 ] ;
 945: LD_ADDR_VAR 0 7
 949: PUSH
 950: LD_EXP 6
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 959: LD_ADDR_EXP 24
 963: PUSH
 964: LD_EXP 6
 968: PUSH
 969: LD_INT 2
 971: ARRAY
 972: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 973: LD_ADDR_EXP 25
 977: PUSH
 978: LD_EXP 6
 982: PUSH
 983: LD_INT 3
 985: ARRAY
 986: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 987: LD_ADDR_EXP 15
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 4
 999: ARRAY
1000: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1001: LD_ADDR_EXP 27
1005: PUSH
1006: LD_EXP 6
1010: PUSH
1011: LD_INT 5
1013: ARRAY
1014: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1015: LD_ADDR_VAR 0 5
1019: PUSH
1020: LD_EXP 6
1024: PUSH
1025: LD_INT 6
1027: ARRAY
1028: PUSH
1029: LD_INT 0
1031: GREATER
1032: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1033: LD_ADDR_VAR 0 6
1037: PUSH
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 7
1045: ARRAY
1046: PUSH
1047: LD_INT 0
1049: GREATER
1050: ST_TO_ADDR
// kingCamArea := 0 ;
1051: LD_ADDR_EXP 2
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// kingArea := 0 ;
1059: LD_ADDR_EXP 1
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// if gameType = GameTypeKing then
1067: LD_VAR 0 1
1071: PUSH
1072: LD_INT 3
1074: EQUAL
1075: IFFALSE 1115
// begin mpKingArea := 0 ;
1077: LD_ADDR_EXP 34
1081: PUSH
1082: LD_INT 0
1084: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1085: LD_ADDR_EXP 35
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_INT 8
1097: ARRAY
1098: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1099: LD_ADDR_EXP 37
1103: PUSH
1104: LD_EXP 6
1108: PUSH
1109: LD_INT 10
1111: ARRAY
1112: ST_TO_ADDR
// end else
1113: GO 1139
// begin mpKingArea := 0 ;
1115: LD_ADDR_EXP 34
1119: PUSH
1120: LD_INT 0
1122: ST_TO_ADDR
// mpPoints := 0 ;
1123: LD_ADDR_EXP 35
1127: PUSH
1128: LD_INT 0
1130: ST_TO_ADDR
// mpEmissions := 0 ;
1131: LD_ADDR_EXP 37
1135: PUSH
1136: LD_INT 0
1138: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1139: LD_EXP 6
1143: PUSH
1144: LD_INT 9
1146: ARRAY
1147: IFFALSE 1279
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1149: LD_ADDR_EXP 36
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 3
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 12
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 24
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 12
1214: PUSH
1215: LD_INT 1
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 23
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 21
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: LD_INT 42
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 21
1254: PUSH
1255: LD_INT 1
1257: PUSH
1258: LD_INT 1
1260: PUSH
1261: LD_INT 42
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: LIST
1278: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1279: LD_ADDR_EXP 16
1283: PUSH
1284: LD_EXP 6
1288: PUSH
1289: LD_INT 11
1291: ARRAY
1292: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1293: LD_ADDR_EXP 22
1297: PUSH
1298: LD_EXP 6
1302: PUSH
1303: LD_INT 12
1305: ARRAY
1306: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1307: LD_ADDR_EXP 26
1311: PUSH
1312: LD_EXP 6
1316: PUSH
1317: LD_INT 13
1319: ARRAY
1320: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1321: LD_ADDR_EXP 33
1325: PUSH
1326: LD_EXP 6
1330: PUSH
1331: LD_INT 14
1333: ARRAY
1334: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1335: LD_ADDR_EXP 30
1339: PUSH
1340: LD_EXP 6
1344: PUSH
1345: LD_INT 15
1347: ARRAY
1348: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1349: LD_ADDR_EXP 28
1353: PUSH
1354: LD_EXP 6
1358: PUSH
1359: LD_INT 18
1361: ARRAY
1362: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1363: LD_ADDR_EXP 20
1367: PUSH
1368: LD_EXP 6
1372: PUSH
1373: LD_INT 21
1375: ARRAY
1376: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1377: LD_ADDR_EXP 31
1381: PUSH
1382: LD_INT 16
1384: PUSH
1385: LD_INT 17
1387: PUSH
1388: LD_INT 18
1390: PUSH
1391: LD_INT 19
1393: PUSH
1394: LD_INT 20
1396: PUSH
1397: LD_INT 21
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_INT 23
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 3 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 0 ) ] ;
1416: LD_ADDR_VAR 0 8
1420: PUSH
1421: LD_INT 24
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: CALL 45918 0 2
1431: PUSH
1432: LD_INT 30
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: CALL 45918 0 2
1442: PUSH
1443: LD_INT 36
1445: PPUSH
1446: LD_INT 3
1448: PPUSH
1449: CALL 45918 0 2
1453: PUSH
1454: LD_INT 42
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL 45918 0 2
1464: PUSH
1465: LD_INT 48
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL 45918 0 2
1475: PUSH
1476: LD_INT 54
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL 45918 0 2
1486: PUSH
1487: LD_INT 60
1489: PPUSH
1490: LD_INT 5
1492: PPUSH
1493: CALL 45918 0 2
1497: PUSH
1498: LD_INT 66
1500: PPUSH
1501: LD_INT 0
1503: PPUSH
1504: CALL 45918 0 2
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1519: LD_ADDR_VAR 0 3
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_VAR 0 8
1533: PPUSH
1534: CALL 5233 0 1
1538: PUSH
1539: FOR_TO
1540: IFFALSE 1644
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1542: LD_ADDR_EXP 21
1546: PUSH
1547: LD_EXP 21
1551: PPUSH
1552: LD_VAR 0 3
1556: PPUSH
1557: LD_VAR 0 8
1561: PUSH
1562: LD_VAR 0 3
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: PPUSH
1572: LD_VAR 0 8
1576: PUSH
1577: LD_VAR 0 3
1581: ARRAY
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 10
1589: PPUSH
1590: CALL_OW 272
1594: PUSH
1595: LD_VAR 0 8
1599: PUSH
1600: LD_VAR 0 3
1604: ARRAY
1605: PUSH
1606: LD_INT 2
1608: ARRAY
1609: PPUSH
1610: LD_VAR 0 8
1614: PUSH
1615: LD_VAR 0 3
1619: ARRAY
1620: PUSH
1621: LD_INT 3
1623: ARRAY
1624: PPUSH
1625: LD_INT 10
1627: PPUSH
1628: CALL_OW 273
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PPUSH
1637: CALL_OW 1
1641: ST_TO_ADDR
1642: GO 1539
1644: POP
1645: POP
// if hasOil then
1646: LD_VAR 0 5
1650: IFFALSE 1789
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1652: LD_ADDR_VAR 0 4
1656: PUSH
1657: LD_EXP 6
1661: PUSH
1662: LD_INT 6
1664: ARRAY
1665: PUSH
1666: LD_INT 2
1668: EQUAL
1669: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1670: LD_ADDR_EXP 12
1674: PUSH
1675: LD_INT 25
1677: PPUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: CALL 45751 0 2
1687: PUSH
1688: LD_INT 31
1690: PPUSH
1691: LD_VAR 0 4
1695: PPUSH
1696: CALL 45751 0 2
1700: PUSH
1701: LD_INT 37
1703: PPUSH
1704: LD_VAR 0 4
1708: PPUSH
1709: CALL 45751 0 2
1713: PUSH
1714: LD_INT 43
1716: PPUSH
1717: LD_VAR 0 4
1721: PPUSH
1722: CALL 45751 0 2
1726: PUSH
1727: LD_INT 49
1729: PPUSH
1730: LD_VAR 0 4
1734: PPUSH
1735: CALL 45751 0 2
1739: PUSH
1740: LD_INT 55
1742: PPUSH
1743: LD_VAR 0 4
1747: PPUSH
1748: CALL 45751 0 2
1752: PUSH
1753: LD_INT 61
1755: PPUSH
1756: LD_VAR 0 4
1760: PPUSH
1761: CALL 45751 0 2
1765: PUSH
1766: LD_INT 67
1768: PPUSH
1769: LD_VAR 0 4
1773: PPUSH
1774: CALL 45751 0 2
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: ST_TO_ADDR
// end ; if hasSib then
1789: LD_VAR 0 6
1793: IFFALSE 1932
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1795: LD_ADDR_VAR 0 4
1799: PUSH
1800: LD_EXP 6
1804: PUSH
1805: LD_INT 7
1807: ARRAY
1808: PUSH
1809: LD_INT 2
1811: EQUAL
1812: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1813: LD_ADDR_EXP 13
1817: PUSH
1818: LD_INT 26
1820: PPUSH
1821: LD_VAR 0 4
1825: PPUSH
1826: CALL 45751 0 2
1830: PUSH
1831: LD_INT 32
1833: PPUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: CALL 45751 0 2
1843: PUSH
1844: LD_INT 38
1846: PPUSH
1847: LD_VAR 0 4
1851: PPUSH
1852: CALL 45751 0 2
1856: PUSH
1857: LD_INT 44
1859: PPUSH
1860: LD_VAR 0 4
1864: PPUSH
1865: CALL 45751 0 2
1869: PUSH
1870: LD_INT 50
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL 45751 0 2
1882: PUSH
1883: LD_INT 56
1885: PPUSH
1886: LD_VAR 0 4
1890: PPUSH
1891: CALL 45751 0 2
1895: PUSH
1896: LD_INT 62
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL 45751 0 2
1908: PUSH
1909: LD_INT 68
1911: PPUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 45751 0 2
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 1
1939: GREATEREQUAL
1940: IFFALSE 1952
// mpDepots := startPos ;
1942: LD_ADDR_EXP 14
1946: PUSH
1947: LD_VAR 0 8
1951: ST_TO_ADDR
// if baseLevel >= 2 then
1952: LD_VAR 0 7
1956: PUSH
1957: LD_INT 2
1959: GREATEREQUAL
1960: IFFALSE 2377
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 2 ) ] ] ;
1962: LD_ADDR_EXP 17
1966: PUSH
1967: LD_INT 31
1969: PUSH
1970: LD_INT 28
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL 45918 0 2
1980: ADD
1981: PUSH
1982: LD_INT 31
1984: PUSH
1985: LD_INT 29
1987: PPUSH
1988: LD_INT 5
1990: PPUSH
1991: CALL 45918 0 2
1995: ADD
1996: PUSH
1997: LD_INT 4
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 5
2005: PPUSH
2006: CALL 45918 0 2
2010: ADD
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 31
2019: PUSH
2020: LD_INT 34
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL 45918 0 2
2030: ADD
2031: PUSH
2032: LD_INT 31
2034: PUSH
2035: LD_INT 35
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL 45918 0 2
2045: ADD
2046: PUSH
2047: LD_INT 4
2049: PUSH
2050: LD_INT 33
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 45918 0 2
2060: ADD
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 31
2069: PUSH
2070: LD_INT 40
2072: PPUSH
2073: LD_INT 4
2075: PPUSH
2076: CALL 45918 0 2
2080: ADD
2081: PUSH
2082: LD_INT 31
2084: PUSH
2085: LD_INT 41
2087: PPUSH
2088: LD_INT 0
2090: PPUSH
2091: CALL 45918 0 2
2095: ADD
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: LD_INT 39
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL 45918 0 2
2110: ADD
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 31
2119: PUSH
2120: LD_INT 46
2122: PPUSH
2123: LD_INT 5
2125: PPUSH
2126: CALL 45918 0 2
2130: ADD
2131: PUSH
2132: LD_INT 31
2134: PUSH
2135: LD_INT 47
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 45918 0 2
2145: ADD
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: LD_INT 45
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL 45918 0 2
2160: ADD
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 31
2169: PUSH
2170: LD_INT 52
2172: PPUSH
2173: LD_INT 2
2175: PPUSH
2176: CALL 45918 0 2
2180: ADD
2181: PUSH
2182: LD_INT 31
2184: PUSH
2185: LD_INT 53
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: CALL 45918 0 2
2195: ADD
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: LD_INT 51
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: CALL 45918 0 2
2210: ADD
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 31
2219: PUSH
2220: LD_INT 58
2222: PPUSH
2223: LD_INT 2
2225: PPUSH
2226: CALL 45918 0 2
2230: ADD
2231: PUSH
2232: LD_INT 31
2234: PUSH
2235: LD_INT 59
2237: PPUSH
2238: LD_INT 3
2240: PPUSH
2241: CALL 45918 0 2
2245: ADD
2246: PUSH
2247: LD_INT 4
2249: PUSH
2250: LD_INT 57
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 45918 0 2
2260: ADD
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 31
2269: PUSH
2270: LD_INT 64
2272: PPUSH
2273: LD_INT 2
2275: PPUSH
2276: CALL 45918 0 2
2280: ADD
2281: PUSH
2282: LD_INT 31
2284: PUSH
2285: LD_INT 65
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: CALL 45918 0 2
2295: ADD
2296: PUSH
2297: LD_INT 4
2299: PUSH
2300: LD_INT 63
2302: PPUSH
2303: LD_INT 3
2305: PPUSH
2306: CALL 45918 0 2
2310: ADD
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 31
2319: PUSH
2320: LD_INT 70
2322: PPUSH
2323: LD_INT 3
2325: PPUSH
2326: CALL 45918 0 2
2330: ADD
2331: PUSH
2332: LD_INT 31
2334: PUSH
2335: LD_INT 71
2337: PPUSH
2338: LD_INT 2
2340: PPUSH
2341: CALL 45918 0 2
2345: ADD
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: LD_INT 69
2352: PPUSH
2353: LD_INT 2
2355: PPUSH
2356: CALL 45918 0 2
2360: ADD
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: ST_TO_ADDR
// end ; end ;
2377: LD_VAR 0 2
2381: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2382: GO 2384
2384: DISABLE
2385: LD_INT 0
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
// begin if not mpShipments then
2395: LD_EXP 27
2399: NOT
2400: IFFALSE 2404
// exit ;
2402: GO 2863
// case mpShipments of 1 :
2404: LD_EXP 27
2408: PUSH
2409: LD_INT 1
2411: DOUBLE
2412: EQUAL
2413: IFTRUE 2417
2415: GO 2452
2417: POP
// begin time := 0 0$30 ;
2418: LD_ADDR_VAR 0 5
2422: PUSH
2423: LD_INT 1050
2425: ST_TO_ADDR
// normalTime := 0 0$30 ;
2426: LD_ADDR_VAR 0 6
2430: PUSH
2431: LD_INT 1050
2433: ST_TO_ADDR
// maxTime := 1 1$20 ;
2434: LD_ADDR_VAR 0 8
2438: PUSH
2439: LD_INT 2800
2441: ST_TO_ADDR
// delayTime := 0 0$5 ;
2442: LD_ADDR_VAR 0 7
2446: PUSH
2447: LD_INT 175
2449: ST_TO_ADDR
// end ; 2 :
2450: GO 2582
2452: LD_INT 2
2454: DOUBLE
2455: EQUAL
2456: IFTRUE 2460
2458: GO 2495
2460: POP
// begin time := 0 0$25 ;
2461: LD_ADDR_VAR 0 5
2465: PUSH
2466: LD_INT 875
2468: ST_TO_ADDR
// normalTime := 0 0$25 ;
2469: LD_ADDR_VAR 0 6
2473: PUSH
2474: LD_INT 875
2476: ST_TO_ADDR
// maxTime := 1 1$10 ;
2477: LD_ADDR_VAR 0 8
2481: PUSH
2482: LD_INT 2450
2484: ST_TO_ADDR
// delayTime := 0 0$4 ;
2485: LD_ADDR_VAR 0 7
2489: PUSH
2490: LD_INT 140
2492: ST_TO_ADDR
// end ; 3 :
2493: GO 2582
2495: LD_INT 3
2497: DOUBLE
2498: EQUAL
2499: IFTRUE 2503
2501: GO 2538
2503: POP
// begin time := 0 0$20 ;
2504: LD_ADDR_VAR 0 5
2508: PUSH
2509: LD_INT 700
2511: ST_TO_ADDR
// normalTime := 0 0$20 ;
2512: LD_ADDR_VAR 0 6
2516: PUSH
2517: LD_INT 700
2519: ST_TO_ADDR
// maxTime := 1 1$00 ;
2520: LD_ADDR_VAR 0 8
2524: PUSH
2525: LD_INT 2100
2527: ST_TO_ADDR
// delayTime := 0 0$3 ;
2528: LD_ADDR_VAR 0 7
2532: PUSH
2533: LD_INT 105
2535: ST_TO_ADDR
// end ; 4 :
2536: GO 2582
2538: LD_INT 4
2540: DOUBLE
2541: EQUAL
2542: IFTRUE 2546
2544: GO 2581
2546: POP
// begin time := 0 0$15 ;
2547: LD_ADDR_VAR 0 5
2551: PUSH
2552: LD_INT 525
2554: ST_TO_ADDR
// normalTime := 0 0$15 ;
2555: LD_ADDR_VAR 0 6
2559: PUSH
2560: LD_INT 525
2562: ST_TO_ADDR
// maxTime := 0 0$55 ;
2563: LD_ADDR_VAR 0 8
2567: PUSH
2568: LD_INT 1925
2570: ST_TO_ADDR
// delayTime := 0 0$2 ;
2571: LD_ADDR_VAR 0 7
2575: PUSH
2576: LD_INT 70
2578: ST_TO_ADDR
// end ; end ;
2579: GO 2582
2581: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 , Center3 ] ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_INT 4
2589: PUSH
2590: LD_INT 5
2592: PUSH
2593: LD_INT 6
2595: PUSH
2596: LD_INT 7
2598: PUSH
2599: LD_INT 1
2601: PUSH
2602: LD_INT 2
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2617: LD_ADDR_VAR 0 3
2621: PUSH
2622: LD_INT 8
2624: PUSH
2625: LD_INT 9
2627: PUSH
2628: LD_INT 10
2630: PUSH
2631: LD_INT 11
2633: PUSH
2634: LD_INT 12
2636: PUSH
2637: LD_INT 13
2639: PUSH
2640: LD_INT 14
2642: PUSH
2643: LD_INT 15
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: ST_TO_ADDR
// for i := 1 to 8 do
2656: LD_ADDR_VAR 0 1
2660: PUSH
2661: DOUBLE
2662: LD_INT 1
2664: DEC
2665: ST_TO_ADDR
2666: LD_INT 8
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2717
// begin if not mpSidePositions [ i ] then
2672: LD_EXP 7
2676: PUSH
2677: LD_VAR 0 1
2681: ARRAY
2682: NOT
2683: IFFALSE 2687
// continue ;
2685: GO 2669
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2687: LD_ADDR_VAR 0 4
2691: PUSH
2692: LD_VAR 0 4
2696: PUSH
2697: LD_VAR 0 3
2701: PUSH
2702: LD_EXP 7
2706: PUSH
2707: LD_VAR 0 1
2711: ARRAY
2712: ARRAY
2713: ADD
2714: ST_TO_ADDR
// end ;
2715: GO 2669
2717: POP
2718: POP
// x := 1 ;
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// repeat wait ( time ) ;
2727: LD_VAR 0 5
2731: PPUSH
2732: CALL_OW 67
// x := Inc ( x ) ;
2736: LD_ADDR_VAR 0 2
2740: PUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL 42572 0 1
2750: ST_TO_ADDR
// if x > 5 then
2751: LD_VAR 0 2
2755: PUSH
2756: LD_INT 5
2758: GREATER
2759: IFFALSE 2769
// x := 1 ;
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// for i in areas do
2769: LD_ADDR_VAR 0 1
2773: PUSH
2774: LD_VAR 0 4
2778: PUSH
2779: FOR_IN
2780: IFFALSE 2819
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2782: LD_VAR 0 1
2786: PPUSH
2787: LD_INT 1
2789: PPUSH
2790: CALL_OW 287
2794: PUSH
2795: LD_INT 30
2797: LESS
2798: IFFALSE 2817
// begin CreateCratesArea ( x , i , true ) ;
2800: LD_VAR 0 2
2804: PPUSH
2805: LD_VAR 0 1
2809: PPUSH
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 55
// end ; end ;
2817: GO 2779
2819: POP
2820: POP
// time := time + delayTime ;
2821: LD_ADDR_VAR 0 5
2825: PUSH
2826: LD_VAR 0 5
2830: PUSH
2831: LD_VAR 0 7
2835: PLUS
2836: ST_TO_ADDR
// if time > maxTime then
2837: LD_VAR 0 5
2841: PUSH
2842: LD_VAR 0 8
2846: GREATER
2847: IFFALSE 2859
// time := normalTime ;
2849: LD_ADDR_VAR 0 5
2853: PUSH
2854: LD_VAR 0 6
2858: ST_TO_ADDR
// until false ;
2859: LD_INT 0
2861: IFFALSE 2727
// end ; end_of_file
2863: PPOPN 8
2865: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2866: LD_VAR 0 1
2870: PPUSH
2871: CALL 56282 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 51839 0 1
// end ;
2884: PPOPN 1
2886: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL 56299 0 1
// end ;
2896: PPOPN 1
2898: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2899: LD_VAR 0 1
2903: PPUSH
2904: CALL 52546 0 1
2908: PPOPN 1
2910: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2911: LD_VAR 0 1
2915: PPUSH
2916: LD_VAR 0 2
2920: PPUSH
2921: CALL 56340 0 2
2925: PPOPN 2
2927: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2928: LD_VAR 0 1
2932: PPUSH
2933: LD_VAR 0 2
2937: PPUSH
2938: LD_VAR 0 3
2942: PPUSH
2943: CALL 52599 0 3
2947: PPOPN 3
2949: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2950: LD_VAR 0 1
2954: PPUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: LD_VAR 0 4
2969: PPUSH
2970: LD_VAR 0 5
2974: PPUSH
2975: CALL 53238 0 5
2979: PPOPN 5
2981: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2982: LD_VAR 0 1
2986: PPUSH
2987: LD_VAR 0 2
2991: PPUSH
2992: LD_VAR 0 3
2996: PPUSH
2997: LD_VAR 0 4
3001: PPUSH
3002: CALL 53341 0 4
3006: PPOPN 4
3008: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3009: LD_INT 0
3011: PPUSH
3012: PPUSH
// if exist_mode then
3013: LD_VAR 0 2
3017: IFFALSE 3063
// begin unit := CreateCharacter ( prefix & ident ) ;
3019: LD_ADDR_VAR 0 5
3023: PUSH
3024: LD_VAR 0 3
3028: PUSH
3029: LD_VAR 0 1
3033: STR
3034: PPUSH
3035: CALL_OW 34
3039: ST_TO_ADDR
// if unit then
3040: LD_VAR 0 5
3044: IFFALSE 3061
// DeleteCharacters ( prefix & ident ) ;
3046: LD_VAR 0 3
3050: PUSH
3051: LD_VAR 0 1
3055: STR
3056: PPUSH
3057: CALL_OW 40
// end else
3061: GO 3078
// unit := NewCharacter ( ident ) ;
3063: LD_ADDR_VAR 0 5
3067: PUSH
3068: LD_VAR 0 1
3072: PPUSH
3073: CALL_OW 25
3077: ST_TO_ADDR
// result := unit ;
3078: LD_ADDR_VAR 0 4
3082: PUSH
3083: LD_VAR 0 5
3087: ST_TO_ADDR
// end ;
3088: LD_VAR 0 4
3092: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3093: LD_INT 0
3095: PPUSH
3096: PPUSH
// if exist_mode then
3097: LD_VAR 0 2
3101: IFFALSE 3126
// unit := CreateCharacter ( prefix & ident ) else
3103: LD_ADDR_VAR 0 5
3107: PUSH
3108: LD_VAR 0 3
3112: PUSH
3113: LD_VAR 0 1
3117: STR
3118: PPUSH
3119: CALL_OW 34
3123: ST_TO_ADDR
3124: GO 3141
// unit := NewCharacter ( ident ) ;
3126: LD_ADDR_VAR 0 5
3130: PUSH
3131: LD_VAR 0 1
3135: PPUSH
3136: CALL_OW 25
3140: ST_TO_ADDR
// result := unit ;
3141: LD_ADDR_VAR 0 4
3145: PUSH
3146: LD_VAR 0 5
3150: ST_TO_ADDR
// end ;
3151: LD_VAR 0 4
3155: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
// if not side or not nation then
3160: LD_VAR 0 1
3164: NOT
3165: IFTRUE 3174
3167: PUSH
3168: LD_VAR 0 2
3172: NOT
3173: OR
3174: IFFALSE 3178
// exit ;
3176: GO 3972
// case nation of nation_american :
3178: LD_VAR 0 2
3182: PUSH
3183: LD_INT 1
3185: DOUBLE
3186: EQUAL
3187: IFTRUE 3191
3189: GO 3413
3191: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3192: LD_ADDR_VAR 0 4
3196: PUSH
3197: LD_INT 35
3199: PUSH
3200: LD_INT 45
3202: PUSH
3203: LD_INT 46
3205: PUSH
3206: LD_INT 47
3208: PUSH
3209: LD_INT 82
3211: PUSH
3212: LD_INT 83
3214: PUSH
3215: LD_INT 84
3217: PUSH
3218: LD_INT 85
3220: PUSH
3221: LD_INT 86
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: LD_INT 2
3229: PUSH
3230: LD_INT 6
3232: PUSH
3233: LD_INT 15
3235: PUSH
3236: LD_INT 16
3238: PUSH
3239: LD_INT 7
3241: PUSH
3242: LD_INT 12
3244: PUSH
3245: LD_INT 13
3247: PUSH
3248: LD_INT 10
3250: PUSH
3251: LD_INT 14
3253: PUSH
3254: LD_INT 20
3256: PUSH
3257: LD_INT 21
3259: PUSH
3260: LD_INT 22
3262: PUSH
3263: LD_INT 25
3265: PUSH
3266: LD_INT 32
3268: PUSH
3269: LD_INT 27
3271: PUSH
3272: LD_INT 36
3274: PUSH
3275: LD_INT 69
3277: PUSH
3278: LD_INT 39
3280: PUSH
3281: LD_INT 34
3283: PUSH
3284: LD_INT 40
3286: PUSH
3287: LD_INT 48
3289: PUSH
3290: LD_INT 49
3292: PUSH
3293: LD_INT 50
3295: PUSH
3296: LD_INT 51
3298: PUSH
3299: LD_INT 52
3301: PUSH
3302: LD_INT 53
3304: PUSH
3305: LD_INT 54
3307: PUSH
3308: LD_INT 55
3310: PUSH
3311: LD_INT 56
3313: PUSH
3314: LD_INT 57
3316: PUSH
3317: LD_INT 58
3319: PUSH
3320: LD_INT 59
3322: PUSH
3323: LD_INT 60
3325: PUSH
3326: LD_INT 61
3328: PUSH
3329: LD_INT 62
3331: PUSH
3332: LD_INT 80
3334: PUSH
3335: LD_INT 82
3337: PUSH
3338: LD_INT 83
3340: PUSH
3341: LD_INT 84
3343: PUSH
3344: LD_INT 85
3346: PUSH
3347: LD_INT 86
3349: PUSH
3350: LD_INT 90
3352: PUSH
3353: LD_INT 93
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: ST_TO_ADDR
3411: GO 3894
3413: LD_INT 2
3415: DOUBLE
3416: EQUAL
3417: IFTRUE 3421
3419: GO 3655
3421: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3422: LD_ADDR_VAR 0 4
3426: PUSH
3427: LD_INT 35
3429: PUSH
3430: LD_INT 45
3432: PUSH
3433: LD_INT 46
3435: PUSH
3436: LD_INT 47
3438: PUSH
3439: LD_INT 82
3441: PUSH
3442: LD_INT 83
3444: PUSH
3445: LD_INT 84
3447: PUSH
3448: LD_INT 85
3450: PUSH
3451: LD_INT 87
3453: PUSH
3454: LD_INT 70
3456: PUSH
3457: LD_INT 1
3459: PUSH
3460: LD_INT 11
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: LD_INT 4
3468: PUSH
3469: LD_INT 5
3471: PUSH
3472: LD_INT 6
3474: PUSH
3475: LD_INT 15
3477: PUSH
3478: LD_INT 18
3480: PUSH
3481: LD_INT 7
3483: PUSH
3484: LD_INT 17
3486: PUSH
3487: LD_INT 8
3489: PUSH
3490: LD_INT 20
3492: PUSH
3493: LD_INT 21
3495: PUSH
3496: LD_INT 22
3498: PUSH
3499: LD_INT 72
3501: PUSH
3502: LD_INT 26
3504: PUSH
3505: LD_INT 69
3507: PUSH
3508: LD_INT 39
3510: PUSH
3511: LD_INT 40
3513: PUSH
3514: LD_INT 41
3516: PUSH
3517: LD_INT 42
3519: PUSH
3520: LD_INT 43
3522: PUSH
3523: LD_INT 48
3525: PUSH
3526: LD_INT 49
3528: PUSH
3529: LD_INT 50
3531: PUSH
3532: LD_INT 51
3534: PUSH
3535: LD_INT 52
3537: PUSH
3538: LD_INT 53
3540: PUSH
3541: LD_INT 54
3543: PUSH
3544: LD_INT 55
3546: PUSH
3547: LD_INT 56
3549: PUSH
3550: LD_INT 60
3552: PUSH
3553: LD_INT 61
3555: PUSH
3556: LD_INT 62
3558: PUSH
3559: LD_INT 66
3561: PUSH
3562: LD_INT 67
3564: PUSH
3565: LD_INT 68
3567: PUSH
3568: LD_INT 81
3570: PUSH
3571: LD_INT 82
3573: PUSH
3574: LD_INT 83
3576: PUSH
3577: LD_INT 84
3579: PUSH
3580: LD_INT 85
3582: PUSH
3583: LD_INT 87
3585: PUSH
3586: LD_INT 88
3588: PUSH
3589: LD_INT 92
3591: PUSH
3592: LD_INT 94
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: ST_TO_ADDR
3653: GO 3894
3655: LD_INT 3
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3893
3663: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: LD_INT 46
3671: PUSH
3672: LD_INT 47
3674: PUSH
3675: LD_INT 1
3677: PUSH
3678: LD_INT 2
3680: PUSH
3681: LD_INT 82
3683: PUSH
3684: LD_INT 83
3686: PUSH
3687: LD_INT 84
3689: PUSH
3690: LD_INT 85
3692: PUSH
3693: LD_INT 86
3695: PUSH
3696: LD_INT 11
3698: PUSH
3699: LD_INT 9
3701: PUSH
3702: LD_INT 20
3704: PUSH
3705: LD_INT 19
3707: PUSH
3708: LD_INT 21
3710: PUSH
3711: LD_INT 24
3713: PUSH
3714: LD_INT 22
3716: PUSH
3717: LD_INT 25
3719: PUSH
3720: LD_INT 28
3722: PUSH
3723: LD_INT 29
3725: PUSH
3726: LD_INT 30
3728: PUSH
3729: LD_INT 31
3731: PUSH
3732: LD_INT 37
3734: PUSH
3735: LD_INT 38
3737: PUSH
3738: LD_INT 32
3740: PUSH
3741: LD_INT 27
3743: PUSH
3744: LD_INT 33
3746: PUSH
3747: LD_INT 69
3749: PUSH
3750: LD_INT 39
3752: PUSH
3753: LD_INT 34
3755: PUSH
3756: LD_INT 40
3758: PUSH
3759: LD_INT 71
3761: PUSH
3762: LD_INT 23
3764: PUSH
3765: LD_INT 44
3767: PUSH
3768: LD_INT 48
3770: PUSH
3771: LD_INT 49
3773: PUSH
3774: LD_INT 50
3776: PUSH
3777: LD_INT 51
3779: PUSH
3780: LD_INT 52
3782: PUSH
3783: LD_INT 53
3785: PUSH
3786: LD_INT 54
3788: PUSH
3789: LD_INT 55
3791: PUSH
3792: LD_INT 56
3794: PUSH
3795: LD_INT 57
3797: PUSH
3798: LD_INT 58
3800: PUSH
3801: LD_INT 59
3803: PUSH
3804: LD_INT 63
3806: PUSH
3807: LD_INT 64
3809: PUSH
3810: LD_INT 65
3812: PUSH
3813: LD_INT 82
3815: PUSH
3816: LD_INT 83
3818: PUSH
3819: LD_INT 84
3821: PUSH
3822: LD_INT 85
3824: PUSH
3825: LD_INT 86
3827: PUSH
3828: LD_INT 89
3830: PUSH
3831: LD_INT 91
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: ST_TO_ADDR
3891: GO 3894
3893: POP
// if state > - 1 and state < 3 then
3894: LD_VAR 0 3
3898: PUSH
3899: LD_INT 1
3901: NEG
3902: GREATER
3903: IFFALSE 3915
3905: PUSH
3906: LD_VAR 0 3
3910: PUSH
3911: LD_INT 3
3913: LESS
3914: AND
3915: IFFALSE 3972
// for i in result do
3917: LD_ADDR_VAR 0 5
3921: PUSH
3922: LD_VAR 0 4
3926: PUSH
3927: FOR_IN
3928: IFFALSE 3970
// if GetTech ( i , side ) <> state then
3930: LD_VAR 0 5
3934: PPUSH
3935: LD_VAR 0 1
3939: PPUSH
3940: CALL_OW 321
3944: PUSH
3945: LD_VAR 0 3
3949: NONEQUAL
3950: IFFALSE 3968
// result := result diff i ;
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: LD_VAR 0 4
3961: PUSH
3962: LD_VAR 0 5
3966: DIFF
3967: ST_TO_ADDR
3968: GO 3927
3970: POP
3971: POP
// end ;
3972: LD_VAR 0 4
3976: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
3981: PPUSH
// result := true ;
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: LD_INT 1
3989: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3990: LD_ADDR_VAR 0 5
3994: PUSH
3995: LD_VAR 0 2
3999: PPUSH
4000: CALL_OW 480
4004: ST_TO_ADDR
// if not tmp then
4005: LD_VAR 0 5
4009: NOT
4010: IFFALSE 4014
// exit ;
4012: GO 4063
// for i in tmp do
4014: LD_ADDR_VAR 0 4
4018: PUSH
4019: LD_VAR 0 5
4023: PUSH
4024: FOR_IN
4025: IFFALSE 4061
// if GetTech ( i , side ) <> state_researched then
4027: LD_VAR 0 4
4031: PPUSH
4032: LD_VAR 0 1
4036: PPUSH
4037: CALL_OW 321
4041: PUSH
4042: LD_INT 2
4044: NONEQUAL
4045: IFFALSE 4059
// begin result := false ;
4047: LD_ADDR_VAR 0 3
4051: PUSH
4052: LD_INT 0
4054: ST_TO_ADDR
// exit ;
4055: POP
4056: POP
4057: GO 4063
// end ;
4059: GO 4024
4061: POP
4062: POP
// end ;
4063: LD_VAR 0 3
4067: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4068: LD_INT 0
4070: PPUSH
4071: PPUSH
4072: PPUSH
4073: PPUSH
4074: PPUSH
4075: PPUSH
4076: PPUSH
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4083: LD_VAR 0 1
4087: NOT
4088: IFTRUE 4105
4090: PUSH
4091: LD_VAR 0 1
4095: PPUSH
4096: CALL_OW 257
4100: PUSH
4101: LD_INT 9
4103: NONEQUAL
4104: OR
4105: IFFALSE 4109
// exit ;
4107: GO 4688
// side := GetSide ( unit ) ;
4109: LD_ADDR_VAR 0 9
4113: PUSH
4114: LD_VAR 0 1
4118: PPUSH
4119: CALL_OW 255
4123: ST_TO_ADDR
// tech_space := tech_spacanom ;
4124: LD_ADDR_VAR 0 12
4128: PUSH
4129: LD_INT 29
4131: ST_TO_ADDR
// tech_time := tech_taurad ;
4132: LD_ADDR_VAR 0 13
4136: PUSH
4137: LD_INT 28
4139: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4140: LD_ADDR_VAR 0 11
4144: PUSH
4145: LD_VAR 0 1
4149: PPUSH
4150: CALL_OW 310
4154: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4155: LD_VAR 0 11
4159: PPUSH
4160: CALL_OW 247
4164: PUSH
4165: LD_INT 2
4167: EQUAL
4168: IFFALSE 4172
// exit ;
4170: GO 4688
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4172: LD_ADDR_VAR 0 8
4176: PUSH
4177: LD_INT 81
4179: PUSH
4180: LD_VAR 0 9
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: LD_INT 21
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PPUSH
4210: CALL_OW 69
4214: ST_TO_ADDR
// if not tmp then
4215: LD_VAR 0 8
4219: NOT
4220: IFFALSE 4224
// exit ;
4222: GO 4688
// if in_unit then
4224: LD_VAR 0 11
4228: IFFALSE 4252
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4230: LD_ADDR_VAR 0 10
4234: PUSH
4235: LD_VAR 0 8
4239: PPUSH
4240: LD_VAR 0 11
4244: PPUSH
4245: CALL_OW 74
4249: ST_TO_ADDR
4250: GO 4272
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4252: LD_ADDR_VAR 0 10
4256: PUSH
4257: LD_VAR 0 8
4261: PPUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: CALL_OW 74
4271: ST_TO_ADDR
// if not enemy then
4272: LD_VAR 0 10
4276: NOT
4277: IFFALSE 4281
// exit ;
4279: GO 4688
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4281: LD_VAR 0 11
4285: IFFALSE 4307
4287: PUSH
4288: LD_VAR 0 11
4292: PPUSH
4293: LD_VAR 0 10
4297: PPUSH
4298: CALL_OW 296
4302: PUSH
4303: LD_INT 13
4305: GREATER
4306: AND
4307: IFTRUE 4329
4309: PUSH
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_VAR 0 10
4319: PPUSH
4320: CALL_OW 296
4324: PUSH
4325: LD_INT 12
4327: GREATER
4328: OR
4329: IFFALSE 4333
// exit ;
4331: GO 4688
// missile := [ 1 ] ;
4333: LD_ADDR_VAR 0 14
4337: PUSH
4338: LD_INT 1
4340: PUSH
4341: EMPTY
4342: LIST
4343: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4344: LD_VAR 0 9
4348: PPUSH
4349: LD_VAR 0 12
4353: PPUSH
4354: CALL_OW 325
4358: IFFALSE 4387
// missile := Replace ( missile , missile + 1 , 2 ) ;
4360: LD_ADDR_VAR 0 14
4364: PUSH
4365: LD_VAR 0 14
4369: PPUSH
4370: LD_VAR 0 14
4374: PUSH
4375: LD_INT 1
4377: PLUS
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: CALL_OW 1
4386: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4387: LD_VAR 0 9
4391: PPUSH
4392: LD_VAR 0 13
4396: PPUSH
4397: CALL_OW 325
4401: IFFALSE 4425
4403: PUSH
4404: LD_VAR 0 10
4408: PPUSH
4409: CALL_OW 255
4413: PPUSH
4414: LD_VAR 0 13
4418: PPUSH
4419: CALL_OW 325
4423: NOT
4424: AND
4425: IFFALSE 4454
// missile := Replace ( missile , missile + 1 , 3 ) ;
4427: LD_ADDR_VAR 0 14
4431: PUSH
4432: LD_VAR 0 14
4436: PPUSH
4437: LD_VAR 0 14
4441: PUSH
4442: LD_INT 1
4444: PLUS
4445: PPUSH
4446: LD_INT 3
4448: PPUSH
4449: CALL_OW 1
4453: ST_TO_ADDR
// if missile < 2 then
4454: LD_VAR 0 14
4458: PUSH
4459: LD_INT 2
4461: LESS
4462: IFFALSE 4466
// exit ;
4464: GO 4688
// x := GetX ( enemy ) ;
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: LD_VAR 0 10
4475: PPUSH
4476: CALL_OW 250
4480: ST_TO_ADDR
// y := GetY ( enemy ) ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: LD_VAR 0 10
4490: PPUSH
4491: CALL_OW 251
4495: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4496: LD_ADDR_VAR 0 6
4500: PUSH
4501: LD_VAR 0 4
4505: PUSH
4506: LD_INT 1
4508: NEG
4509: PPUSH
4510: LD_INT 1
4512: PPUSH
4513: CALL_OW 12
4517: PLUS
4518: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4519: LD_ADDR_VAR 0 7
4523: PUSH
4524: LD_VAR 0 5
4528: PUSH
4529: LD_INT 1
4531: NEG
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL_OW 12
4540: PLUS
4541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4542: LD_VAR 0 6
4546: PPUSH
4547: LD_VAR 0 7
4551: PPUSH
4552: CALL_OW 488
4556: NOT
4557: IFFALSE 4579
// begin _x := x ;
4559: LD_ADDR_VAR 0 6
4563: PUSH
4564: LD_VAR 0 4
4568: ST_TO_ADDR
// _y := y ;
4569: LD_ADDR_VAR 0 7
4573: PUSH
4574: LD_VAR 0 5
4578: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4579: LD_ADDR_VAR 0 3
4583: PUSH
4584: LD_INT 1
4586: PPUSH
4587: LD_VAR 0 14
4591: PPUSH
4592: CALL_OW 12
4596: ST_TO_ADDR
// case i of 1 :
4597: LD_VAR 0 3
4601: PUSH
4602: LD_INT 1
4604: DOUBLE
4605: EQUAL
4606: IFTRUE 4610
4608: GO 4627
4610: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4611: LD_VAR 0 1
4615: PPUSH
4616: LD_VAR 0 10
4620: PPUSH
4621: CALL_OW 115
4625: GO 4688
4627: LD_INT 2
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4635
4633: GO 4657
4635: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_VAR 0 6
4645: PPUSH
4646: LD_VAR 0 7
4650: PPUSH
4651: CALL_OW 153
4655: GO 4688
4657: LD_INT 3
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4665
4663: GO 4687
4665: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4666: LD_VAR 0 1
4670: PPUSH
4671: LD_VAR 0 6
4675: PPUSH
4676: LD_VAR 0 7
4680: PPUSH
4681: CALL_OW 154
4685: GO 4688
4687: POP
// end ;
4688: LD_VAR 0 2
4692: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4693: LD_INT 0
4695: PPUSH
4696: PPUSH
4697: PPUSH
4698: PPUSH
4699: PPUSH
4700: PPUSH
// if not unit or not building then
4701: LD_VAR 0 1
4705: NOT
4706: IFTRUE 4715
4708: PUSH
4709: LD_VAR 0 2
4713: NOT
4714: OR
4715: IFFALSE 4719
// exit ;
4717: GO 4877
// x := GetX ( building ) ;
4719: LD_ADDR_VAR 0 5
4723: PUSH
4724: LD_VAR 0 2
4728: PPUSH
4729: CALL_OW 250
4733: ST_TO_ADDR
// y := GetY ( building ) ;
4734: LD_ADDR_VAR 0 6
4738: PUSH
4739: LD_VAR 0 2
4743: PPUSH
4744: CALL_OW 251
4748: ST_TO_ADDR
// for i := 0 to 5 do
4749: LD_ADDR_VAR 0 4
4753: PUSH
4754: DOUBLE
4755: LD_INT 0
4757: DEC
4758: ST_TO_ADDR
4759: LD_INT 5
4761: PUSH
4762: FOR_TO
4763: IFFALSE 4875
// begin _x := ShiftX ( x , i , 3 ) ;
4765: LD_ADDR_VAR 0 7
4769: PUSH
4770: LD_VAR 0 5
4774: PPUSH
4775: LD_VAR 0 4
4779: PPUSH
4780: LD_INT 3
4782: PPUSH
4783: CALL_OW 272
4787: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4788: LD_ADDR_VAR 0 8
4792: PUSH
4793: LD_VAR 0 6
4797: PPUSH
4798: LD_VAR 0 4
4802: PPUSH
4803: LD_INT 3
4805: PPUSH
4806: CALL_OW 273
4810: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4811: LD_VAR 0 7
4815: PPUSH
4816: LD_VAR 0 8
4820: PPUSH
4821: CALL_OW 488
4825: NOT
4826: IFFALSE 4830
// continue ;
4828: GO 4762
// if HexInfo ( _x , _y ) = 0 then
4830: LD_VAR 0 7
4834: PPUSH
4835: LD_VAR 0 8
4839: PPUSH
4840: CALL_OW 428
4844: PUSH
4845: LD_INT 0
4847: EQUAL
4848: IFFALSE 4873
// begin ComMoveXY ( unit , _x , _y ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: LD_VAR 0 7
4859: PPUSH
4860: LD_VAR 0 8
4864: PPUSH
4865: CALL_OW 111
// exit ;
4869: POP
4870: POP
4871: GO 4877
// end ; end ;
4873: GO 4762
4875: POP
4876: POP
// end ;
4877: LD_VAR 0 3
4881: RET
// export function ScanBase ( side , base_area ) ; begin
4882: LD_INT 0
4884: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4885: LD_ADDR_VAR 0 3
4889: PUSH
4890: LD_VAR 0 2
4894: PPUSH
4895: LD_INT 81
4897: PUSH
4898: LD_VAR 0 1
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PPUSH
4907: CALL_OW 70
4911: ST_TO_ADDR
// end ;
4912: LD_VAR 0 3
4916: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4917: LD_INT 0
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
// result := false ;
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: LD_INT 0
4930: ST_TO_ADDR
// side := GetSide ( unit ) ;
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: LD_VAR 0 1
4940: PPUSH
4941: CALL_OW 255
4945: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4946: LD_ADDR_VAR 0 4
4950: PUSH
4951: LD_VAR 0 1
4955: PPUSH
4956: CALL_OW 248
4960: ST_TO_ADDR
// case nat of 1 :
4961: LD_VAR 0 4
4965: PUSH
4966: LD_INT 1
4968: DOUBLE
4969: EQUAL
4970: IFTRUE 4974
4972: GO 4985
4974: POP
// tech := tech_lassight ; 2 :
4975: LD_ADDR_VAR 0 5
4979: PUSH
4980: LD_INT 12
4982: ST_TO_ADDR
4983: GO 5024
4985: LD_INT 2
4987: DOUBLE
4988: EQUAL
4989: IFTRUE 4993
4991: GO 5004
4993: POP
// tech := tech_mortar ; 3 :
4994: LD_ADDR_VAR 0 5
4998: PUSH
4999: LD_INT 41
5001: ST_TO_ADDR
5002: GO 5024
5004: LD_INT 3
5006: DOUBLE
5007: EQUAL
5008: IFTRUE 5012
5010: GO 5023
5012: POP
// tech := tech_bazooka ; end ;
5013: LD_ADDR_VAR 0 5
5017: PUSH
5018: LD_INT 44
5020: ST_TO_ADDR
5021: GO 5024
5023: POP
// if Researched ( side , tech ) then
5024: LD_VAR 0 3
5028: PPUSH
5029: LD_VAR 0 5
5033: PPUSH
5034: CALL_OW 325
5038: IFFALSE 5065
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5040: LD_ADDR_VAR 0 2
5044: PUSH
5045: LD_INT 5
5047: PUSH
5048: LD_INT 8
5050: PUSH
5051: LD_INT 9
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: LIST
5058: PUSH
5059: LD_VAR 0 4
5063: ARRAY
5064: ST_TO_ADDR
// end ;
5065: LD_VAR 0 2
5069: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5070: LD_INT 0
5072: PPUSH
5073: PPUSH
5074: PPUSH
// if not mines then
5075: LD_VAR 0 2
5079: NOT
5080: IFFALSE 5084
// exit ;
5082: GO 5228
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5084: LD_ADDR_VAR 0 5
5088: PUSH
5089: LD_INT 81
5091: PUSH
5092: LD_VAR 0 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 3
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: ST_TO_ADDR
// for i in mines do
5127: LD_ADDR_VAR 0 4
5131: PUSH
5132: LD_VAR 0 2
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5226
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5140: LD_VAR 0 4
5144: PUSH
5145: LD_INT 1
5147: ARRAY
5148: PPUSH
5149: LD_VAR 0 4
5153: PUSH
5154: LD_INT 2
5156: ARRAY
5157: PPUSH
5158: CALL_OW 458
5162: NOT
5163: IFFALSE 5167
// continue ;
5165: GO 5137
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5167: LD_VAR 0 4
5171: PUSH
5172: LD_INT 1
5174: ARRAY
5175: PPUSH
5176: LD_VAR 0 4
5180: PUSH
5181: LD_INT 2
5183: ARRAY
5184: PPUSH
5185: CALL_OW 428
5189: PUSH
5190: LD_VAR 0 5
5194: IN
5195: IFFALSE 5224
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5197: LD_VAR 0 4
5201: PUSH
5202: LD_INT 1
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 4
5210: PUSH
5211: LD_INT 2
5213: ARRAY
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: CALL_OW 456
// end ;
5224: GO 5137
5226: POP
5227: POP
// end ;
5228: LD_VAR 0 3
5232: RET
// export function Count ( array ) ; begin
5233: LD_INT 0
5235: PPUSH
// result := array + 0 ;
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: LD_VAR 0 1
5245: PUSH
5246: LD_INT 0
5248: PLUS
5249: ST_TO_ADDR
// end ;
5250: LD_VAR 0 2
5254: RET
// export function IsEmpty ( building ) ; begin
5255: LD_INT 0
5257: PPUSH
// if not building then
5258: LD_VAR 0 1
5262: NOT
5263: IFFALSE 5267
// exit ;
5265: GO 5310
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5267: LD_ADDR_VAR 0 2
5271: PUSH
5272: LD_VAR 0 1
5276: PUSH
5277: LD_INT 22
5279: PUSH
5280: LD_VAR 0 1
5284: PPUSH
5285: CALL_OW 255
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 58
5296: PUSH
5297: EMPTY
5298: LIST
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PPUSH
5304: CALL_OW 69
5308: IN
5309: ST_TO_ADDR
// end ;
5310: LD_VAR 0 2
5314: RET
// export function IsNotFull ( building ) ; var places ; begin
5315: LD_INT 0
5317: PPUSH
5318: PPUSH
// if not building then
5319: LD_VAR 0 1
5323: NOT
5324: IFFALSE 5328
// exit ;
5326: GO 5356
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: LD_VAR 0 1
5337: PPUSH
5338: LD_INT 3
5340: PUSH
5341: LD_INT 62
5343: PUSH
5344: EMPTY
5345: LIST
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PPUSH
5351: CALL_OW 72
5355: ST_TO_ADDR
// end ;
5356: LD_VAR 0 2
5360: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5361: LD_INT 0
5363: PPUSH
5364: PPUSH
5365: PPUSH
5366: PPUSH
// tmp := [ ] ;
5367: LD_ADDR_VAR 0 3
5371: PUSH
5372: EMPTY
5373: ST_TO_ADDR
// list := [ ] ;
5374: LD_ADDR_VAR 0 5
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 16 to 25 do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 16
5389: DEC
5390: ST_TO_ADDR
5391: LD_INT 25
5393: PUSH
5394: FOR_TO
5395: IFFALSE 5468
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5397: LD_ADDR_VAR 0 3
5401: PUSH
5402: LD_VAR 0 3
5406: PUSH
5407: LD_INT 22
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 255
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 91
5426: PUSH
5427: LD_VAR 0 1
5431: PUSH
5432: LD_INT 6
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 30
5442: PUSH
5443: LD_VAR 0 4
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: PUSH
5457: EMPTY
5458: LIST
5459: PPUSH
5460: CALL_OW 69
5464: ADD
5465: ST_TO_ADDR
5466: GO 5394
5468: POP
5469: POP
// for i = 1 to tmp do
5470: LD_ADDR_VAR 0 4
5474: PUSH
5475: DOUBLE
5476: LD_INT 1
5478: DEC
5479: ST_TO_ADDR
5480: LD_VAR 0 3
5484: PUSH
5485: FOR_TO
5486: IFFALSE 5574
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5488: LD_ADDR_VAR 0 5
5492: PUSH
5493: LD_VAR 0 5
5497: PUSH
5498: LD_VAR 0 3
5502: PUSH
5503: LD_VAR 0 4
5507: ARRAY
5508: PPUSH
5509: CALL_OW 266
5513: PUSH
5514: LD_VAR 0 3
5518: PUSH
5519: LD_VAR 0 4
5523: ARRAY
5524: PPUSH
5525: CALL_OW 250
5529: PUSH
5530: LD_VAR 0 3
5534: PUSH
5535: LD_VAR 0 4
5539: ARRAY
5540: PPUSH
5541: CALL_OW 251
5545: PUSH
5546: LD_VAR 0 3
5550: PUSH
5551: LD_VAR 0 4
5555: ARRAY
5556: PPUSH
5557: CALL_OW 254
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: PUSH
5568: EMPTY
5569: LIST
5570: ADD
5571: ST_TO_ADDR
5572: GO 5485
5574: POP
5575: POP
// result := list ;
5576: LD_ADDR_VAR 0 2
5580: PUSH
5581: LD_VAR 0 5
5585: ST_TO_ADDR
// end ;
5586: LD_VAR 0 2
5590: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5591: LD_INT 0
5593: PPUSH
5594: PPUSH
5595: PPUSH
5596: PPUSH
5597: PPUSH
5598: PPUSH
5599: PPUSH
// if not factory then
5600: LD_VAR 0 1
5604: NOT
5605: IFFALSE 5609
// exit ;
5607: GO 6212
// if control = control_apeman then
5609: LD_VAR 0 4
5613: PUSH
5614: LD_INT 5
5616: EQUAL
5617: IFFALSE 5726
// begin tmp := UnitsInside ( factory ) ;
5619: LD_ADDR_VAR 0 8
5623: PUSH
5624: LD_VAR 0 1
5628: PPUSH
5629: CALL_OW 313
5633: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5634: LD_VAR 0 8
5638: PPUSH
5639: LD_INT 25
5641: PUSH
5642: LD_INT 12
5644: PUSH
5645: EMPTY
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 72
5653: NOT
5654: IFFALSE 5664
// control := control_manual ;
5656: LD_ADDR_VAR 0 4
5660: PUSH
5661: LD_INT 1
5663: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5664: LD_ADDR_VAR 0 8
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL 5361 0 1
5678: ST_TO_ADDR
// if tmp then
5679: LD_VAR 0 8
5683: IFFALSE 5726
// begin for i in tmp do
5685: LD_ADDR_VAR 0 7
5689: PUSH
5690: LD_VAR 0 8
5694: PUSH
5695: FOR_IN
5696: IFFALSE 5724
// if i [ 1 ] = b_ext_radio then
5698: LD_VAR 0 7
5702: PUSH
5703: LD_INT 1
5705: ARRAY
5706: PUSH
5707: LD_INT 22
5709: EQUAL
5710: IFFALSE 5722
// begin control := control_remote ;
5712: LD_ADDR_VAR 0 4
5716: PUSH
5717: LD_INT 2
5719: ST_TO_ADDR
// break ;
5720: GO 5724
// end ;
5722: GO 5695
5724: POP
5725: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_VAR 0 3
5740: PPUSH
5741: LD_VAR 0 4
5745: PPUSH
5746: LD_VAR 0 5
5750: PPUSH
5751: CALL_OW 448
5755: IFFALSE 5790
// begin result := [ chassis , engine , control , weapon ] ;
5757: LD_ADDR_VAR 0 6
5761: PUSH
5762: LD_VAR 0 2
5766: PUSH
5767: LD_VAR 0 3
5771: PUSH
5772: LD_VAR 0 4
5776: PUSH
5777: LD_VAR 0 5
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: ST_TO_ADDR
// exit ;
5788: GO 6212
// end ; _chassis := AvailableChassisList ( factory ) ;
5790: LD_ADDR_VAR 0 9
5794: PUSH
5795: LD_VAR 0 1
5799: PPUSH
5800: CALL_OW 475
5804: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5805: LD_ADDR_VAR 0 11
5809: PUSH
5810: LD_VAR 0 1
5814: PPUSH
5815: CALL_OW 476
5819: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5820: LD_ADDR_VAR 0 12
5824: PUSH
5825: LD_VAR 0 1
5829: PPUSH
5830: CALL_OW 477
5834: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5835: LD_ADDR_VAR 0 10
5839: PUSH
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 478
5849: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5850: LD_VAR 0 9
5854: NOT
5855: IFTRUE 5864
5857: PUSH
5858: LD_VAR 0 11
5862: NOT
5863: OR
5864: IFTRUE 5873
5866: PUSH
5867: LD_VAR 0 12
5871: NOT
5872: OR
5873: IFTRUE 5882
5875: PUSH
5876: LD_VAR 0 10
5880: NOT
5881: OR
5882: IFFALSE 5917
// begin result := [ chassis , engine , control , weapon ] ;
5884: LD_ADDR_VAR 0 6
5888: PUSH
5889: LD_VAR 0 2
5893: PUSH
5894: LD_VAR 0 3
5898: PUSH
5899: LD_VAR 0 4
5903: PUSH
5904: LD_VAR 0 5
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: ST_TO_ADDR
// exit ;
5915: GO 6212
// end ; if not chassis in _chassis then
5917: LD_VAR 0 2
5921: PUSH
5922: LD_VAR 0 9
5926: IN
5927: NOT
5928: IFFALSE 5954
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5930: LD_ADDR_VAR 0 2
5934: PUSH
5935: LD_VAR 0 9
5939: PUSH
5940: LD_INT 1
5942: PPUSH
5943: LD_VAR 0 9
5947: PPUSH
5948: CALL_OW 12
5952: ARRAY
5953: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5954: LD_VAR 0 2
5958: PPUSH
5959: LD_VAR 0 3
5963: PPUSH
5964: CALL 6217 0 2
5968: NOT
5969: IFFALSE 6030
// repeat engine := _engine [ 1 ] ;
5971: LD_ADDR_VAR 0 3
5975: PUSH
5976: LD_VAR 0 11
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5985: LD_ADDR_VAR 0 11
5989: PUSH
5990: LD_VAR 0 11
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: CALL_OW 3
6002: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_VAR 0 3
6012: PPUSH
6013: CALL 6217 0 2
6017: IFTRUE 6028
6019: PUSH
6020: LD_VAR 0 11
6024: PUSH
6025: EMPTY
6026: EQUAL
6027: OR
6028: IFFALSE 5971
// if not control in _control then
6030: LD_VAR 0 4
6034: PUSH
6035: LD_VAR 0 12
6039: IN
6040: NOT
6041: IFFALSE 6067
// control := _control [ rand ( 1 , _control ) ] ;
6043: LD_ADDR_VAR 0 4
6047: PUSH
6048: LD_VAR 0 12
6052: PUSH
6053: LD_INT 1
6055: PPUSH
6056: LD_VAR 0 12
6060: PPUSH
6061: CALL_OW 12
6065: ARRAY
6066: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 5
6076: PPUSH
6077: CALL 6439 0 2
6081: NOT
6082: IFFALSE 6143
// repeat weapon := _weapon [ 1 ] ;
6084: LD_ADDR_VAR 0 5
6088: PUSH
6089: LD_VAR 0 10
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6098: LD_ADDR_VAR 0 10
6102: PUSH
6103: LD_VAR 0 10
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: CALL_OW 3
6115: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_VAR 0 5
6125: PPUSH
6126: CALL 6439 0 2
6130: IFTRUE 6141
6132: PUSH
6133: LD_VAR 0 10
6137: PUSH
6138: EMPTY
6139: EQUAL
6140: OR
6141: IFFALSE 6084
// result := [ ] ;
6143: LD_ADDR_VAR 0 6
6147: PUSH
6148: EMPTY
6149: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6150: LD_VAR 0 1
6154: PPUSH
6155: LD_VAR 0 2
6159: PPUSH
6160: LD_VAR 0 3
6164: PPUSH
6165: LD_VAR 0 4
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL_OW 448
6179: IFFALSE 6212
// result := [ chassis , engine , control , weapon ] ;
6181: LD_ADDR_VAR 0 6
6185: PUSH
6186: LD_VAR 0 2
6190: PUSH
6191: LD_VAR 0 3
6195: PUSH
6196: LD_VAR 0 4
6200: PUSH
6201: LD_VAR 0 5
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: ST_TO_ADDR
// end ;
6212: LD_VAR 0 6
6216: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6217: LD_INT 0
6219: PPUSH
// if not chassis or not engine then
6220: LD_VAR 0 1
6224: NOT
6225: IFTRUE 6234
6227: PUSH
6228: LD_VAR 0 2
6232: NOT
6233: OR
6234: IFFALSE 6238
// exit ;
6236: GO 6434
// case engine of engine_solar :
6238: LD_VAR 0 2
6242: PUSH
6243: LD_INT 2
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6251
6249: GO 6289
6251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6252: LD_ADDR_VAR 0 3
6256: PUSH
6257: LD_INT 11
6259: PUSH
6260: LD_INT 12
6262: PUSH
6263: LD_INT 13
6265: PUSH
6266: LD_INT 14
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: LD_INT 2
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: ST_TO_ADDR
6287: GO 6418
6289: LD_INT 1
6291: DOUBLE
6292: EQUAL
6293: IFTRUE 6297
6295: GO 6359
6297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6298: LD_ADDR_VAR 0 3
6302: PUSH
6303: LD_INT 11
6305: PUSH
6306: LD_INT 12
6308: PUSH
6309: LD_INT 13
6311: PUSH
6312: LD_INT 14
6314: PUSH
6315: LD_INT 1
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: LD_INT 3
6323: PUSH
6324: LD_INT 4
6326: PUSH
6327: LD_INT 5
6329: PUSH
6330: LD_INT 21
6332: PUSH
6333: LD_INT 23
6335: PUSH
6336: LD_INT 22
6338: PUSH
6339: LD_INT 24
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
6357: GO 6418
6359: LD_INT 3
6361: DOUBLE
6362: EQUAL
6363: IFTRUE 6367
6365: GO 6417
6367: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6368: LD_ADDR_VAR 0 3
6372: PUSH
6373: LD_INT 13
6375: PUSH
6376: LD_INT 14
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 4
6387: PUSH
6388: LD_INT 5
6390: PUSH
6391: LD_INT 21
6393: PUSH
6394: LD_INT 22
6396: PUSH
6397: LD_INT 23
6399: PUSH
6400: LD_INT 24
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
6415: GO 6418
6417: POP
// result := ( chassis in result ) ;
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: LD_VAR 0 1
6427: PUSH
6428: LD_VAR 0 3
6432: IN
6433: ST_TO_ADDR
// end ;
6434: LD_VAR 0 3
6438: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6439: LD_INT 0
6441: PPUSH
// if not chassis or not weapon then
6442: LD_VAR 0 1
6446: NOT
6447: IFTRUE 6456
6449: PUSH
6450: LD_VAR 0 2
6454: NOT
6455: OR
6456: IFFALSE 6460
// exit ;
6458: GO 7554
// case weapon of us_machine_gun :
6460: LD_VAR 0 2
6464: PUSH
6465: LD_INT 2
6467: DOUBLE
6468: EQUAL
6469: IFTRUE 6473
6471: GO 6503
6473: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: LD_INT 1
6481: PUSH
6482: LD_INT 2
6484: PUSH
6485: LD_INT 3
6487: PUSH
6488: LD_INT 4
6490: PUSH
6491: LD_INT 5
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: ST_TO_ADDR
6501: GO 7538
6503: LD_INT 3
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6541
6511: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6512: LD_ADDR_VAR 0 3
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: LD_INT 2
6522: PUSH
6523: LD_INT 3
6525: PUSH
6526: LD_INT 4
6528: PUSH
6529: LD_INT 5
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: ST_TO_ADDR
6539: GO 7538
6541: LD_INT 11
6543: DOUBLE
6544: EQUAL
6545: IFTRUE 6549
6547: GO 6579
6549: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6550: LD_ADDR_VAR 0 3
6554: PUSH
6555: LD_INT 1
6557: PUSH
6558: LD_INT 2
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 5
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: ST_TO_ADDR
6577: GO 7538
6579: LD_INT 4
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6613
6587: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 2
6595: PUSH
6596: LD_INT 3
6598: PUSH
6599: LD_INT 4
6601: PUSH
6602: LD_INT 5
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: ST_TO_ADDR
6611: GO 7538
6613: LD_INT 5
6615: DOUBLE
6616: EQUAL
6617: IFTRUE 6621
6619: GO 6647
6621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6622: LD_ADDR_VAR 0 3
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: LD_INT 3
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 5
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: ST_TO_ADDR
6645: GO 7538
6647: LD_INT 9
6649: DOUBLE
6650: EQUAL
6651: IFTRUE 6655
6653: GO 6681
6655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6656: LD_ADDR_VAR 0 3
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 4
6669: PUSH
6670: LD_INT 5
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: ST_TO_ADDR
6679: GO 7538
6681: LD_INT 7
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6689
6687: GO 6715
6689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 4
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: ST_TO_ADDR
6713: GO 7538
6715: LD_INT 12
6717: DOUBLE
6718: EQUAL
6719: IFTRUE 6723
6721: GO 6749
6723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_INT 2
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 4
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: ST_TO_ADDR
6747: GO 7538
6749: LD_INT 13
6751: DOUBLE
6752: EQUAL
6753: IFTRUE 6757
6755: GO 6783
6757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6758: LD_ADDR_VAR 0 3
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: LD_INT 3
6768: PUSH
6769: LD_INT 4
6771: PUSH
6772: LD_INT 5
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 7538
6783: LD_INT 14
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6809
6791: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6792: LD_ADDR_VAR 0 3
6796: PUSH
6797: LD_INT 4
6799: PUSH
6800: LD_INT 5
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: ST_TO_ADDR
6807: GO 7538
6809: LD_INT 6
6811: DOUBLE
6812: EQUAL
6813: IFTRUE 6817
6815: GO 6835
6817: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: ST_TO_ADDR
6833: GO 7538
6835: LD_INT 10
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 6861
6843: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6844: LD_ADDR_VAR 0 3
6848: PUSH
6849: LD_INT 4
6851: PUSH
6852: LD_INT 5
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: ST_TO_ADDR
6859: GO 7538
6861: LD_INT 22
6863: DOUBLE
6864: EQUAL
6865: IFTRUE 6869
6867: GO 6895
6869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6870: LD_ADDR_VAR 0 3
6874: PUSH
6875: LD_INT 11
6877: PUSH
6878: LD_INT 12
6880: PUSH
6881: LD_INT 13
6883: PUSH
6884: LD_INT 14
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: ST_TO_ADDR
6893: GO 7538
6895: LD_INT 23
6897: DOUBLE
6898: EQUAL
6899: IFTRUE 6903
6901: GO 6929
6903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: LD_INT 11
6911: PUSH
6912: LD_INT 12
6914: PUSH
6915: LD_INT 13
6917: PUSH
6918: LD_INT 14
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: ST_TO_ADDR
6927: GO 7538
6929: LD_INT 24
6931: DOUBLE
6932: EQUAL
6933: IFTRUE 6937
6935: GO 6963
6937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 11
6945: PUSH
6946: LD_INT 12
6948: PUSH
6949: LD_INT 13
6951: PUSH
6952: LD_INT 14
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: ST_TO_ADDR
6961: GO 7538
6963: LD_INT 30
6965: DOUBLE
6966: EQUAL
6967: IFTRUE 6971
6969: GO 6997
6971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6972: LD_ADDR_VAR 0 3
6976: PUSH
6977: LD_INT 11
6979: PUSH
6980: LD_INT 12
6982: PUSH
6983: LD_INT 13
6985: PUSH
6986: LD_INT 14
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: ST_TO_ADDR
6995: GO 7538
6997: LD_INT 25
6999: DOUBLE
7000: EQUAL
7001: IFTRUE 7005
7003: GO 7023
7005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7006: LD_ADDR_VAR 0 3
7010: PUSH
7011: LD_INT 13
7013: PUSH
7014: LD_INT 14
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
7021: GO 7538
7023: LD_INT 27
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7049
7031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7032: LD_ADDR_VAR 0 3
7036: PUSH
7037: LD_INT 13
7039: PUSH
7040: LD_INT 14
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
7047: GO 7538
7049: LD_INT 92
7051: DOUBLE
7052: EQUAL
7053: IFTRUE 7057
7055: GO 7083
7057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_INT 11
7065: PUSH
7066: LD_INT 12
7068: PUSH
7069: LD_INT 13
7071: PUSH
7072: LD_INT 14
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: ST_TO_ADDR
7081: GO 7538
7083: LD_INT 28
7085: DOUBLE
7086: EQUAL
7087: IFTRUE 7091
7089: GO 7109
7091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: LD_INT 13
7099: PUSH
7100: LD_INT 14
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: ST_TO_ADDR
7107: GO 7538
7109: LD_INT 29
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7135
7117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_INT 13
7125: PUSH
7126: LD_INT 14
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: ST_TO_ADDR
7133: GO 7538
7135: LD_INT 31
7137: DOUBLE
7138: EQUAL
7139: IFTRUE 7143
7141: GO 7161
7143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7144: LD_ADDR_VAR 0 3
7148: PUSH
7149: LD_INT 13
7151: PUSH
7152: LD_INT 14
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: ST_TO_ADDR
7159: GO 7538
7161: LD_INT 26
7163: DOUBLE
7164: EQUAL
7165: IFTRUE 7169
7167: GO 7187
7169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: LD_INT 13
7177: PUSH
7178: LD_INT 14
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: ST_TO_ADDR
7185: GO 7538
7187: LD_INT 42
7189: DOUBLE
7190: EQUAL
7191: IFTRUE 7195
7193: GO 7221
7195: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7196: LD_ADDR_VAR 0 3
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 23
7209: PUSH
7210: LD_INT 24
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: ST_TO_ADDR
7219: GO 7538
7221: LD_INT 43
7223: DOUBLE
7224: EQUAL
7225: IFTRUE 7229
7227: GO 7255
7229: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7230: LD_ADDR_VAR 0 3
7234: PUSH
7235: LD_INT 21
7237: PUSH
7238: LD_INT 22
7240: PUSH
7241: LD_INT 23
7243: PUSH
7244: LD_INT 24
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: ST_TO_ADDR
7253: GO 7538
7255: LD_INT 44
7257: DOUBLE
7258: EQUAL
7259: IFTRUE 7263
7261: GO 7289
7263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_INT 21
7271: PUSH
7272: LD_INT 22
7274: PUSH
7275: LD_INT 23
7277: PUSH
7278: LD_INT 24
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: ST_TO_ADDR
7287: GO 7538
7289: LD_INT 45
7291: DOUBLE
7292: EQUAL
7293: IFTRUE 7297
7295: GO 7323
7297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_INT 21
7305: PUSH
7306: LD_INT 22
7308: PUSH
7309: LD_INT 23
7311: PUSH
7312: LD_INT 24
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: ST_TO_ADDR
7321: GO 7538
7323: LD_INT 49
7325: DOUBLE
7326: EQUAL
7327: IFTRUE 7331
7329: GO 7357
7331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_INT 21
7339: PUSH
7340: LD_INT 22
7342: PUSH
7343: LD_INT 23
7345: PUSH
7346: LD_INT 24
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: ST_TO_ADDR
7355: GO 7538
7357: LD_INT 51
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7391
7365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 21
7373: PUSH
7374: LD_INT 22
7376: PUSH
7377: LD_INT 23
7379: PUSH
7380: LD_INT 24
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: ST_TO_ADDR
7389: GO 7538
7391: LD_INT 52
7393: DOUBLE
7394: EQUAL
7395: IFTRUE 7399
7397: GO 7425
7399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 21
7407: PUSH
7408: LD_INT 22
7410: PUSH
7411: LD_INT 23
7413: PUSH
7414: LD_INT 24
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: ST_TO_ADDR
7423: GO 7538
7425: LD_INT 53
7427: DOUBLE
7428: EQUAL
7429: IFTRUE 7433
7431: GO 7451
7433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7434: LD_ADDR_VAR 0 3
7438: PUSH
7439: LD_INT 23
7441: PUSH
7442: LD_INT 24
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: ST_TO_ADDR
7449: GO 7538
7451: LD_INT 46
7453: DOUBLE
7454: EQUAL
7455: IFTRUE 7459
7457: GO 7477
7459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7460: LD_ADDR_VAR 0 3
7464: PUSH
7465: LD_INT 23
7467: PUSH
7468: LD_INT 24
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: ST_TO_ADDR
7475: GO 7538
7477: LD_INT 47
7479: DOUBLE
7480: EQUAL
7481: IFTRUE 7485
7483: GO 7503
7485: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7486: LD_ADDR_VAR 0 3
7490: PUSH
7491: LD_INT 23
7493: PUSH
7494: LD_INT 24
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: ST_TO_ADDR
7501: GO 7538
7503: LD_INT 98
7505: DOUBLE
7506: EQUAL
7507: IFTRUE 7511
7509: GO 7537
7511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7512: LD_ADDR_VAR 0 3
7516: PUSH
7517: LD_INT 21
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 23
7525: PUSH
7526: LD_INT 24
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: ST_TO_ADDR
7535: GO 7538
7537: POP
// result := ( chassis in result ) ;
7538: LD_ADDR_VAR 0 3
7542: PUSH
7543: LD_VAR 0 1
7547: PUSH
7548: LD_VAR 0 3
7552: IN
7553: ST_TO_ADDR
// end ;
7554: LD_VAR 0 3
7558: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
// result := array ;
7568: LD_ADDR_VAR 0 5
7572: PUSH
7573: LD_VAR 0 1
7577: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7578: LD_VAR 0 1
7582: NOT
7583: IFTRUE 7592
7585: PUSH
7586: LD_VAR 0 2
7590: NOT
7591: OR
7592: IFTRUE 7601
7594: PUSH
7595: LD_VAR 0 3
7599: NOT
7600: OR
7601: IFTRUE 7615
7603: PUSH
7604: LD_VAR 0 2
7608: PUSH
7609: LD_VAR 0 1
7613: GREATER
7614: OR
7615: IFTRUE 7629
7617: PUSH
7618: LD_VAR 0 3
7622: PUSH
7623: LD_VAR 0 1
7627: GREATER
7628: OR
7629: IFFALSE 7633
// exit ;
7631: GO 7929
// if direction then
7633: LD_VAR 0 4
7637: IFFALSE 7701
// begin d := 1 ;
7639: LD_ADDR_VAR 0 9
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if i_from > i_to then
7647: LD_VAR 0 2
7651: PUSH
7652: LD_VAR 0 3
7656: GREATER
7657: IFFALSE 7683
// length := ( array - i_from ) + i_to else
7659: LD_ADDR_VAR 0 11
7663: PUSH
7664: LD_VAR 0 1
7668: PUSH
7669: LD_VAR 0 2
7673: MINUS
7674: PUSH
7675: LD_VAR 0 3
7679: PLUS
7680: ST_TO_ADDR
7681: GO 7699
// length := i_to - i_from ;
7683: LD_ADDR_VAR 0 11
7687: PUSH
7688: LD_VAR 0 3
7692: PUSH
7693: LD_VAR 0 2
7697: MINUS
7698: ST_TO_ADDR
// end else
7699: GO 7762
// begin d := - 1 ;
7701: LD_ADDR_VAR 0 9
7705: PUSH
7706: LD_INT 1
7708: NEG
7709: ST_TO_ADDR
// if i_from > i_to then
7710: LD_VAR 0 2
7714: PUSH
7715: LD_VAR 0 3
7719: GREATER
7720: IFFALSE 7740
// length := i_from - i_to else
7722: LD_ADDR_VAR 0 11
7726: PUSH
7727: LD_VAR 0 2
7731: PUSH
7732: LD_VAR 0 3
7736: MINUS
7737: ST_TO_ADDR
7738: GO 7762
// length := ( array - i_to ) + i_from ;
7740: LD_ADDR_VAR 0 11
7744: PUSH
7745: LD_VAR 0 1
7749: PUSH
7750: LD_VAR 0 3
7754: MINUS
7755: PUSH
7756: LD_VAR 0 2
7760: PLUS
7761: ST_TO_ADDR
// end ; if not length then
7762: LD_VAR 0 11
7766: NOT
7767: IFFALSE 7771
// exit ;
7769: GO 7929
// tmp := array ;
7771: LD_ADDR_VAR 0 10
7775: PUSH
7776: LD_VAR 0 1
7780: ST_TO_ADDR
// for i = 1 to length do
7781: LD_ADDR_VAR 0 6
7785: PUSH
7786: DOUBLE
7787: LD_INT 1
7789: DEC
7790: ST_TO_ADDR
7791: LD_VAR 0 11
7795: PUSH
7796: FOR_TO
7797: IFFALSE 7917
// begin for j = 1 to array do
7799: LD_ADDR_VAR 0 7
7803: PUSH
7804: DOUBLE
7805: LD_INT 1
7807: DEC
7808: ST_TO_ADDR
7809: LD_VAR 0 1
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7903
// begin k := j + d ;
7817: LD_ADDR_VAR 0 8
7821: PUSH
7822: LD_VAR 0 7
7826: PUSH
7827: LD_VAR 0 9
7831: PLUS
7832: ST_TO_ADDR
// if k > array then
7833: LD_VAR 0 8
7837: PUSH
7838: LD_VAR 0 1
7842: GREATER
7843: IFFALSE 7853
// k := 1 ;
7845: LD_ADDR_VAR 0 8
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if not k then
7853: LD_VAR 0 8
7857: NOT
7858: IFFALSE 7870
// k := array ;
7860: LD_ADDR_VAR 0 8
7864: PUSH
7865: LD_VAR 0 1
7869: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7870: LD_ADDR_VAR 0 10
7874: PUSH
7875: LD_VAR 0 10
7879: PPUSH
7880: LD_VAR 0 8
7884: PPUSH
7885: LD_VAR 0 1
7889: PUSH
7890: LD_VAR 0 7
7894: ARRAY
7895: PPUSH
7896: CALL_OW 1
7900: ST_TO_ADDR
// end ;
7901: GO 7814
7903: POP
7904: POP
// array := tmp ;
7905: LD_ADDR_VAR 0 1
7909: PUSH
7910: LD_VAR 0 10
7914: ST_TO_ADDR
// end ;
7915: GO 7796
7917: POP
7918: POP
// result := array ;
7919: LD_ADDR_VAR 0 5
7923: PUSH
7924: LD_VAR 0 1
7928: ST_TO_ADDR
// end ;
7929: LD_VAR 0 5
7933: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7934: LD_INT 0
7936: PPUSH
7937: PPUSH
// result := 0 ;
7938: LD_ADDR_VAR 0 3
7942: PUSH
7943: LD_INT 0
7945: ST_TO_ADDR
// if not array or not value in array then
7946: LD_VAR 0 1
7950: NOT
7951: IFTRUE 7966
7953: PUSH
7954: LD_VAR 0 2
7958: PUSH
7959: LD_VAR 0 1
7963: IN
7964: NOT
7965: OR
7966: IFFALSE 7970
// exit ;
7968: GO 8024
// for i = 1 to array do
7970: LD_ADDR_VAR 0 4
7974: PUSH
7975: DOUBLE
7976: LD_INT 1
7978: DEC
7979: ST_TO_ADDR
7980: LD_VAR 0 1
7984: PUSH
7985: FOR_TO
7986: IFFALSE 8022
// if value = array [ i ] then
7988: LD_VAR 0 2
7992: PUSH
7993: LD_VAR 0 1
7997: PUSH
7998: LD_VAR 0 4
8002: ARRAY
8003: EQUAL
8004: IFFALSE 8020
// begin result := i ;
8006: LD_ADDR_VAR 0 3
8010: PUSH
8011: LD_VAR 0 4
8015: ST_TO_ADDR
// exit ;
8016: POP
8017: POP
8018: GO 8024
// end ;
8020: GO 7985
8022: POP
8023: POP
// end ;
8024: LD_VAR 0 3
8028: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8029: LD_INT 0
8031: PPUSH
// vc_chassis := chassis ;
8032: LD_ADDR_OWVAR 37
8036: PUSH
8037: LD_VAR 0 1
8041: ST_TO_ADDR
// vc_engine := engine ;
8042: LD_ADDR_OWVAR 39
8046: PUSH
8047: LD_VAR 0 2
8051: ST_TO_ADDR
// vc_control := control ;
8052: LD_ADDR_OWVAR 38
8056: PUSH
8057: LD_VAR 0 3
8061: ST_TO_ADDR
// vc_weapon := weapon ;
8062: LD_ADDR_OWVAR 40
8066: PUSH
8067: LD_VAR 0 4
8071: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8072: LD_ADDR_OWVAR 41
8076: PUSH
8077: LD_VAR 0 5
8081: ST_TO_ADDR
// end ;
8082: LD_VAR 0 6
8086: RET
// export function WantPlant ( unit ) ; var task ; begin
8087: LD_INT 0
8089: PPUSH
8090: PPUSH
// result := false ;
8091: LD_ADDR_VAR 0 2
8095: PUSH
8096: LD_INT 0
8098: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8099: LD_ADDR_VAR 0 3
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 437
8113: ST_TO_ADDR
// if task then
8114: LD_VAR 0 3
8118: IFFALSE 8146
// if task [ 1 ] [ 1 ] = p then
8120: LD_VAR 0 3
8124: PUSH
8125: LD_INT 1
8127: ARRAY
8128: PUSH
8129: LD_INT 1
8131: ARRAY
8132: PUSH
8133: LD_STRING p
8135: EQUAL
8136: IFFALSE 8146
// result := true ;
8138: LD_ADDR_VAR 0 2
8142: PUSH
8143: LD_INT 1
8145: ST_TO_ADDR
// end ;
8146: LD_VAR 0 2
8150: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8151: LD_INT 0
8153: PPUSH
8154: PPUSH
8155: PPUSH
8156: PPUSH
// if pos < 1 then
8157: LD_VAR 0 2
8161: PUSH
8162: LD_INT 1
8164: LESS
8165: IFFALSE 8169
// exit ;
8167: GO 8472
// if pos = 1 then
8169: LD_VAR 0 2
8173: PUSH
8174: LD_INT 1
8176: EQUAL
8177: IFFALSE 8210
// result := Replace ( arr , pos [ 1 ] , value ) else
8179: LD_ADDR_VAR 0 4
8183: PUSH
8184: LD_VAR 0 1
8188: PPUSH
8189: LD_VAR 0 2
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_VAR 0 3
8202: PPUSH
8203: CALL_OW 1
8207: ST_TO_ADDR
8208: GO 8472
// begin tmp := arr ;
8210: LD_ADDR_VAR 0 6
8214: PUSH
8215: LD_VAR 0 1
8219: ST_TO_ADDR
// s_arr := [ tmp ] ;
8220: LD_ADDR_VAR 0 7
8224: PUSH
8225: LD_VAR 0 6
8229: PUSH
8230: EMPTY
8231: LIST
8232: ST_TO_ADDR
// for i = 1 to pos - 1 do
8233: LD_ADDR_VAR 0 5
8237: PUSH
8238: DOUBLE
8239: LD_INT 1
8241: DEC
8242: ST_TO_ADDR
8243: LD_VAR 0 2
8247: PUSH
8248: LD_INT 1
8250: MINUS
8251: PUSH
8252: FOR_TO
8253: IFFALSE 8298
// begin tmp := tmp [ pos [ i ] ] ;
8255: LD_ADDR_VAR 0 6
8259: PUSH
8260: LD_VAR 0 6
8264: PUSH
8265: LD_VAR 0 2
8269: PUSH
8270: LD_VAR 0 5
8274: ARRAY
8275: ARRAY
8276: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8277: LD_ADDR_VAR 0 7
8281: PUSH
8282: LD_VAR 0 7
8286: PUSH
8287: LD_VAR 0 6
8291: PUSH
8292: EMPTY
8293: LIST
8294: ADD
8295: ST_TO_ADDR
// end ;
8296: GO 8252
8298: POP
8299: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8300: LD_ADDR_VAR 0 6
8304: PUSH
8305: LD_VAR 0 6
8309: PPUSH
8310: LD_VAR 0 2
8314: PUSH
8315: LD_VAR 0 2
8319: ARRAY
8320: PPUSH
8321: LD_VAR 0 3
8325: PPUSH
8326: CALL_OW 1
8330: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8331: LD_ADDR_VAR 0 7
8335: PUSH
8336: LD_VAR 0 7
8340: PPUSH
8341: LD_VAR 0 7
8345: PPUSH
8346: LD_VAR 0 6
8350: PPUSH
8351: CALL_OW 1
8355: ST_TO_ADDR
// for i = s_arr downto 2 do
8356: LD_ADDR_VAR 0 5
8360: PUSH
8361: DOUBLE
8362: LD_VAR 0 7
8366: INC
8367: ST_TO_ADDR
8368: LD_INT 2
8370: PUSH
8371: FOR_DOWNTO
8372: IFFALSE 8456
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8374: LD_ADDR_VAR 0 6
8378: PUSH
8379: LD_VAR 0 7
8383: PUSH
8384: LD_VAR 0 5
8388: PUSH
8389: LD_INT 1
8391: MINUS
8392: ARRAY
8393: PPUSH
8394: LD_VAR 0 2
8398: PUSH
8399: LD_VAR 0 5
8403: PUSH
8404: LD_INT 1
8406: MINUS
8407: ARRAY
8408: PPUSH
8409: LD_VAR 0 7
8413: PUSH
8414: LD_VAR 0 5
8418: ARRAY
8419: PPUSH
8420: CALL_OW 1
8424: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8425: LD_ADDR_VAR 0 7
8429: PUSH
8430: LD_VAR 0 7
8434: PPUSH
8435: LD_VAR 0 5
8439: PUSH
8440: LD_INT 1
8442: MINUS
8443: PPUSH
8444: LD_VAR 0 6
8448: PPUSH
8449: CALL_OW 1
8453: ST_TO_ADDR
// end ;
8454: GO 8371
8456: POP
8457: POP
// result := s_arr [ 1 ] ;
8458: LD_ADDR_VAR 0 4
8462: PUSH
8463: LD_VAR 0 7
8467: PUSH
8468: LD_INT 1
8470: ARRAY
8471: ST_TO_ADDR
// end ; end ;
8472: LD_VAR 0 4
8476: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8477: LD_INT 0
8479: PPUSH
8480: PPUSH
// if not list then
8481: LD_VAR 0 1
8485: NOT
8486: IFFALSE 8490
// exit ;
8488: GO 8581
// i := list [ pos1 ] ;
8490: LD_ADDR_VAR 0 5
8494: PUSH
8495: LD_VAR 0 1
8499: PUSH
8500: LD_VAR 0 2
8504: ARRAY
8505: ST_TO_ADDR
// if not i then
8506: LD_VAR 0 5
8510: NOT
8511: IFFALSE 8515
// exit ;
8513: GO 8581
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8515: LD_ADDR_VAR 0 1
8519: PUSH
8520: LD_VAR 0 1
8524: PPUSH
8525: LD_VAR 0 2
8529: PPUSH
8530: LD_VAR 0 1
8534: PUSH
8535: LD_VAR 0 3
8539: ARRAY
8540: PPUSH
8541: CALL_OW 1
8545: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8546: LD_ADDR_VAR 0 1
8550: PUSH
8551: LD_VAR 0 1
8555: PPUSH
8556: LD_VAR 0 3
8560: PPUSH
8561: LD_VAR 0 5
8565: PPUSH
8566: CALL_OW 1
8570: ST_TO_ADDR
// result := list ;
8571: LD_ADDR_VAR 0 4
8575: PUSH
8576: LD_VAR 0 1
8580: ST_TO_ADDR
// end ;
8581: LD_VAR 0 4
8585: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8586: LD_INT 0
8588: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8589: LD_ADDR_VAR 0 5
8593: PUSH
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 250
8603: PPUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 251
8613: PPUSH
8614: LD_VAR 0 2
8618: PPUSH
8619: LD_VAR 0 3
8623: PPUSH
8624: LD_VAR 0 4
8628: PPUSH
8629: CALL 9011 0 5
8633: ST_TO_ADDR
// end ;
8634: LD_VAR 0 5
8638: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8639: LD_INT 0
8641: PPUSH
8642: PPUSH
8643: PPUSH
8644: PPUSH
// if not list or not unit then
8645: LD_VAR 0 2
8649: NOT
8650: IFTRUE 8659
8652: PUSH
8653: LD_VAR 0 1
8657: NOT
8658: OR
8659: IFFALSE 8663
// exit ;
8661: GO 9006
// result := [ ] ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: EMPTY
8669: ST_TO_ADDR
// for i in list do
8670: LD_ADDR_VAR 0 6
8674: PUSH
8675: LD_VAR 0 2
8679: PUSH
8680: FOR_IN
8681: IFFALSE 8899
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8683: LD_ADDR_VAR 0 8
8687: PUSH
8688: LD_VAR 0 1
8692: PPUSH
8693: LD_VAR 0 6
8697: PUSH
8698: LD_INT 1
8700: ARRAY
8701: PPUSH
8702: LD_VAR 0 6
8706: PUSH
8707: LD_INT 2
8709: ARRAY
8710: PPUSH
8711: CALL_OW 297
8715: ST_TO_ADDR
// if not Count ( result ) then
8716: LD_VAR 0 5
8720: PPUSH
8721: CALL 5233 0 1
8725: NOT
8726: IFFALSE 8759
// begin result := Join ( result , [ i , tmp ] ) ;
8728: LD_ADDR_VAR 0 5
8732: PUSH
8733: LD_VAR 0 5
8737: PPUSH
8738: LD_VAR 0 6
8742: PUSH
8743: LD_VAR 0 8
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL 41199 0 2
8756: ST_TO_ADDR
// continue ;
8757: GO 8680
// end ; if result [ result ] [ 2 ] <= tmp then
8759: LD_VAR 0 5
8763: PUSH
8764: LD_VAR 0 5
8768: ARRAY
8769: PUSH
8770: LD_INT 2
8772: ARRAY
8773: PUSH
8774: LD_VAR 0 8
8778: LESSEQUAL
8779: IFFALSE 8812
// result := Join ( result , [ i , tmp ] ) else
8781: LD_ADDR_VAR 0 5
8785: PUSH
8786: LD_VAR 0 5
8790: PPUSH
8791: LD_VAR 0 6
8795: PUSH
8796: LD_VAR 0 8
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL 41199 0 2
8809: ST_TO_ADDR
8810: GO 8897
// begin for j := 1 to Count ( result ) do
8812: LD_ADDR_VAR 0 7
8816: PUSH
8817: DOUBLE
8818: LD_INT 1
8820: DEC
8821: ST_TO_ADDR
8822: LD_VAR 0 5
8826: PPUSH
8827: CALL 5233 0 1
8831: PUSH
8832: FOR_TO
8833: IFFALSE 8895
// begin if tmp < result [ j ] [ 2 ] then
8835: LD_VAR 0 8
8839: PUSH
8840: LD_VAR 0 5
8844: PUSH
8845: LD_VAR 0 7
8849: ARRAY
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: LESS
8855: IFFALSE 8893
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8857: LD_ADDR_VAR 0 5
8861: PUSH
8862: LD_VAR 0 5
8866: PPUSH
8867: LD_VAR 0 7
8871: PPUSH
8872: LD_VAR 0 6
8876: PUSH
8877: LD_VAR 0 8
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PPUSH
8886: CALL_OW 2
8890: ST_TO_ADDR
// break ;
8891: GO 8895
// end ; end ;
8893: GO 8832
8895: POP
8896: POP
// end ; end ;
8897: GO 8680
8899: POP
8900: POP
// if result and not asc then
8901: LD_VAR 0 5
8905: IFFALSE 8914
8907: PUSH
8908: LD_VAR 0 3
8912: NOT
8913: AND
8914: IFFALSE 8931
// result := ReverseArray ( result ) ;
8916: LD_ADDR_VAR 0 5
8920: PUSH
8921: LD_VAR 0 5
8925: PPUSH
8926: CALL 36289 0 1
8930: ST_TO_ADDR
// tmp := [ ] ;
8931: LD_ADDR_VAR 0 8
8935: PUSH
8936: EMPTY
8937: ST_TO_ADDR
// if mode then
8938: LD_VAR 0 4
8942: IFFALSE 9006
// begin for i := 1 to result do
8944: LD_ADDR_VAR 0 6
8948: PUSH
8949: DOUBLE
8950: LD_INT 1
8952: DEC
8953: ST_TO_ADDR
8954: LD_VAR 0 5
8958: PUSH
8959: FOR_TO
8960: IFFALSE 8994
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8962: LD_ADDR_VAR 0 8
8966: PUSH
8967: LD_VAR 0 8
8971: PPUSH
8972: LD_VAR 0 5
8976: PUSH
8977: LD_VAR 0 6
8981: ARRAY
8982: PUSH
8983: LD_INT 1
8985: ARRAY
8986: PPUSH
8987: CALL 41199 0 2
8991: ST_TO_ADDR
8992: GO 8959
8994: POP
8995: POP
// result := tmp ;
8996: LD_ADDR_VAR 0 5
9000: PUSH
9001: LD_VAR 0 8
9005: ST_TO_ADDR
// end ; end ;
9006: LD_VAR 0 5
9010: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
// if not list then
9017: LD_VAR 0 3
9021: NOT
9022: IFFALSE 9026
// exit ;
9024: GO 9416
// result := [ ] ;
9026: LD_ADDR_VAR 0 6
9030: PUSH
9031: EMPTY
9032: ST_TO_ADDR
// for i in list do
9033: LD_ADDR_VAR 0 7
9037: PUSH
9038: LD_VAR 0 3
9042: PUSH
9043: FOR_IN
9044: IFFALSE 9246
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9046: LD_ADDR_VAR 0 9
9050: PUSH
9051: LD_VAR 0 7
9055: PPUSH
9056: LD_VAR 0 1
9060: PPUSH
9061: LD_VAR 0 2
9065: PPUSH
9066: CALL_OW 297
9070: ST_TO_ADDR
// if not result then
9071: LD_VAR 0 6
9075: NOT
9076: IFFALSE 9102
// result := [ [ i , tmp ] ] else
9078: LD_ADDR_VAR 0 6
9082: PUSH
9083: LD_VAR 0 7
9087: PUSH
9088: LD_VAR 0 9
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: ST_TO_ADDR
9100: GO 9244
// begin if result [ result ] [ 2 ] <= tmp then
9102: LD_VAR 0 6
9106: PUSH
9107: LD_VAR 0 6
9111: ARRAY
9112: PUSH
9113: LD_INT 2
9115: ARRAY
9116: PUSH
9117: LD_VAR 0 9
9121: LESSEQUAL
9122: IFFALSE 9164
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9124: LD_ADDR_VAR 0 6
9128: PUSH
9129: LD_VAR 0 6
9133: PPUSH
9134: LD_VAR 0 6
9138: PUSH
9139: LD_INT 1
9141: PLUS
9142: PPUSH
9143: LD_VAR 0 7
9147: PUSH
9148: LD_VAR 0 9
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PPUSH
9157: CALL_OW 2
9161: ST_TO_ADDR
9162: GO 9244
// for j := 1 to result do
9164: LD_ADDR_VAR 0 8
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_VAR 0 6
9178: PUSH
9179: FOR_TO
9180: IFFALSE 9242
// begin if tmp < result [ j ] [ 2 ] then
9182: LD_VAR 0 9
9186: PUSH
9187: LD_VAR 0 6
9191: PUSH
9192: LD_VAR 0 8
9196: ARRAY
9197: PUSH
9198: LD_INT 2
9200: ARRAY
9201: LESS
9202: IFFALSE 9240
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9204: LD_ADDR_VAR 0 6
9208: PUSH
9209: LD_VAR 0 6
9213: PPUSH
9214: LD_VAR 0 8
9218: PPUSH
9219: LD_VAR 0 7
9223: PUSH
9224: LD_VAR 0 9
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PPUSH
9233: CALL_OW 2
9237: ST_TO_ADDR
// break ;
9238: GO 9242
// end ; end ;
9240: GO 9179
9242: POP
9243: POP
// end ; end ;
9244: GO 9043
9246: POP
9247: POP
// if result and not asc then
9248: LD_VAR 0 6
9252: IFFALSE 9261
9254: PUSH
9255: LD_VAR 0 4
9259: NOT
9260: AND
9261: IFFALSE 9336
// begin tmp := result ;
9263: LD_ADDR_VAR 0 9
9267: PUSH
9268: LD_VAR 0 6
9272: ST_TO_ADDR
// for i = tmp downto 1 do
9273: LD_ADDR_VAR 0 7
9277: PUSH
9278: DOUBLE
9279: LD_VAR 0 9
9283: INC
9284: ST_TO_ADDR
9285: LD_INT 1
9287: PUSH
9288: FOR_DOWNTO
9289: IFFALSE 9334
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9291: LD_ADDR_VAR 0 6
9295: PUSH
9296: LD_VAR 0 6
9300: PPUSH
9301: LD_VAR 0 9
9305: PUSH
9306: LD_VAR 0 7
9310: MINUS
9311: PUSH
9312: LD_INT 1
9314: PLUS
9315: PPUSH
9316: LD_VAR 0 9
9320: PUSH
9321: LD_VAR 0 7
9325: ARRAY
9326: PPUSH
9327: CALL_OW 1
9331: ST_TO_ADDR
9332: GO 9288
9334: POP
9335: POP
// end ; tmp := [ ] ;
9336: LD_ADDR_VAR 0 9
9340: PUSH
9341: EMPTY
9342: ST_TO_ADDR
// if mode then
9343: LD_VAR 0 5
9347: IFFALSE 9416
// begin for i = 1 to result do
9349: LD_ADDR_VAR 0 7
9353: PUSH
9354: DOUBLE
9355: LD_INT 1
9357: DEC
9358: ST_TO_ADDR
9359: LD_VAR 0 6
9363: PUSH
9364: FOR_TO
9365: IFFALSE 9404
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9367: LD_ADDR_VAR 0 9
9371: PUSH
9372: LD_VAR 0 9
9376: PPUSH
9377: LD_VAR 0 7
9381: PPUSH
9382: LD_VAR 0 6
9386: PUSH
9387: LD_VAR 0 7
9391: ARRAY
9392: PUSH
9393: LD_INT 1
9395: ARRAY
9396: PPUSH
9397: CALL_OW 1
9401: ST_TO_ADDR
9402: GO 9364
9404: POP
9405: POP
// result := tmp ;
9406: LD_ADDR_VAR 0 6
9410: PUSH
9411: LD_VAR 0 9
9415: ST_TO_ADDR
// end ; end ;
9416: LD_VAR 0 6
9420: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9421: LD_INT 0
9423: PPUSH
9424: PPUSH
9425: PPUSH
9426: PPUSH
9427: PPUSH
9428: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9429: LD_ADDR_VAR 0 5
9433: PUSH
9434: LD_INT 0
9436: PUSH
9437: LD_INT 0
9439: PUSH
9440: LD_INT 0
9442: PUSH
9443: EMPTY
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: ST_TO_ADDR
// if not x or not y then
9451: LD_VAR 0 2
9455: NOT
9456: IFTRUE 9465
9458: PUSH
9459: LD_VAR 0 3
9463: NOT
9464: OR
9465: IFFALSE 9469
// exit ;
9467: GO 11125
// if not range then
9469: LD_VAR 0 4
9473: NOT
9474: IFFALSE 9484
// range := 10 ;
9476: LD_ADDR_VAR 0 4
9480: PUSH
9481: LD_INT 10
9483: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9484: LD_ADDR_VAR 0 8
9488: PUSH
9489: LD_INT 81
9491: PUSH
9492: LD_VAR 0 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 92
9503: PUSH
9504: LD_VAR 0 2
9508: PUSH
9509: LD_VAR 0 3
9513: PUSH
9514: LD_VAR 0 4
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 21
9530: PUSH
9531: LD_INT 3
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: PPUSH
9547: CALL_OW 69
9551: ST_TO_ADDR
// if not tmp then
9552: LD_VAR 0 8
9556: NOT
9557: IFFALSE 9561
// exit ;
9559: GO 11125
// for i in tmp do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: LD_VAR 0 8
9570: PUSH
9571: FOR_IN
9572: IFFALSE 11100
// begin points := [ 0 , 0 , 0 ] ;
9574: LD_ADDR_VAR 0 9
9578: PUSH
9579: LD_INT 0
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: ST_TO_ADDR
// bpoints := 1 ;
9593: LD_ADDR_VAR 0 10
9597: PUSH
9598: LD_INT 1
9600: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9601: LD_VAR 0 6
9605: PPUSH
9606: CALL_OW 247
9610: PUSH
9611: LD_INT 1
9613: DOUBLE
9614: EQUAL
9615: IFTRUE 9619
9617: GO 10201
9619: POP
// begin if GetClass ( i ) = 1 then
9620: LD_VAR 0 6
9624: PPUSH
9625: CALL_OW 257
9629: PUSH
9630: LD_INT 1
9632: EQUAL
9633: IFFALSE 9654
// points := [ 10 , 5 , 3 ] ;
9635: LD_ADDR_VAR 0 9
9639: PUSH
9640: LD_INT 10
9642: PUSH
9643: LD_INT 5
9645: PUSH
9646: LD_INT 3
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9654: LD_VAR 0 6
9658: PPUSH
9659: CALL_OW 257
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: LD_INT 3
9669: PUSH
9670: LD_INT 4
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: IN
9678: IFFALSE 9699
// points := [ 3 , 2 , 1 ] ;
9680: LD_ADDR_VAR 0 9
9684: PUSH
9685: LD_INT 3
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: LD_INT 1
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: LIST
9698: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9699: LD_VAR 0 6
9703: PPUSH
9704: CALL_OW 257
9708: PUSH
9709: LD_INT 5
9711: EQUAL
9712: IFFALSE 9733
// points := [ 130 , 5 , 2 ] ;
9714: LD_ADDR_VAR 0 9
9718: PUSH
9719: LD_INT 130
9721: PUSH
9722: LD_INT 5
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 257
9742: PUSH
9743: LD_INT 8
9745: EQUAL
9746: IFFALSE 9767
// points := [ 35 , 35 , 30 ] ;
9748: LD_ADDR_VAR 0 9
9752: PUSH
9753: LD_INT 35
9755: PUSH
9756: LD_INT 35
9758: PUSH
9759: LD_INT 30
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9767: LD_VAR 0 6
9771: PPUSH
9772: CALL_OW 257
9776: PUSH
9777: LD_INT 9
9779: EQUAL
9780: IFFALSE 9801
// points := [ 20 , 55 , 40 ] ;
9782: LD_ADDR_VAR 0 9
9786: PUSH
9787: LD_INT 20
9789: PUSH
9790: LD_INT 55
9792: PUSH
9793: LD_INT 40
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9801: LD_VAR 0 6
9805: PPUSH
9806: CALL_OW 257
9810: PUSH
9811: LD_INT 12
9813: PUSH
9814: LD_INT 16
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: IN
9821: IFFALSE 9842
// points := [ 5 , 3 , 2 ] ;
9823: LD_ADDR_VAR 0 9
9827: PUSH
9828: LD_INT 5
9830: PUSH
9831: LD_INT 3
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 257
9851: PUSH
9852: LD_INT 17
9854: EQUAL
9855: IFFALSE 9876
// points := [ 100 , 50 , 75 ] ;
9857: LD_ADDR_VAR 0 9
9861: PUSH
9862: LD_INT 100
9864: PUSH
9865: LD_INT 50
9867: PUSH
9868: LD_INT 75
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9876: LD_VAR 0 6
9880: PPUSH
9881: CALL_OW 257
9885: PUSH
9886: LD_INT 15
9888: EQUAL
9889: IFFALSE 9910
// points := [ 10 , 5 , 3 ] ;
9891: LD_ADDR_VAR 0 9
9895: PUSH
9896: LD_INT 10
9898: PUSH
9899: LD_INT 5
9901: PUSH
9902: LD_INT 3
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9910: LD_VAR 0 6
9914: PPUSH
9915: CALL_OW 257
9919: PUSH
9920: LD_INT 14
9922: EQUAL
9923: IFFALSE 9944
// points := [ 10 , 0 , 0 ] ;
9925: LD_ADDR_VAR 0 9
9929: PUSH
9930: LD_INT 10
9932: PUSH
9933: LD_INT 0
9935: PUSH
9936: LD_INT 0
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9944: LD_VAR 0 6
9948: PPUSH
9949: CALL_OW 257
9953: PUSH
9954: LD_INT 11
9956: EQUAL
9957: IFFALSE 9978
// points := [ 30 , 10 , 5 ] ;
9959: LD_ADDR_VAR 0 9
9963: PUSH
9964: LD_INT 30
9966: PUSH
9967: LD_INT 10
9969: PUSH
9970: LD_INT 5
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9978: LD_VAR 0 1
9982: PPUSH
9983: LD_INT 5
9985: PPUSH
9986: CALL_OW 321
9990: PUSH
9991: LD_INT 2
9993: EQUAL
9994: IFFALSE 10011
// bpoints := bpoints * 1.8 ;
9996: LD_ADDR_VAR 0 10
10000: PUSH
10001: LD_VAR 0 10
10005: PUSH
10006: LD_REAL  1.80000000000000E+0000
10009: MUL
10010: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10011: LD_VAR 0 6
10015: PPUSH
10016: CALL_OW 257
10020: PUSH
10021: LD_INT 1
10023: PUSH
10024: LD_INT 2
10026: PUSH
10027: LD_INT 3
10029: PUSH
10030: LD_INT 4
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: IN
10039: IFFALSE 10059
10041: PUSH
10042: LD_VAR 0 1
10046: PPUSH
10047: LD_INT 51
10049: PPUSH
10050: CALL_OW 321
10054: PUSH
10055: LD_INT 2
10057: EQUAL
10058: AND
10059: IFFALSE 10076
// bpoints := bpoints * 1.2 ;
10061: LD_ADDR_VAR 0 10
10065: PUSH
10066: LD_VAR 0 10
10070: PUSH
10071: LD_REAL  1.20000000000000E+0000
10074: MUL
10075: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10076: LD_VAR 0 6
10080: PPUSH
10081: CALL_OW 257
10085: PUSH
10086: LD_INT 5
10088: PUSH
10089: LD_INT 7
10091: PUSH
10092: LD_INT 9
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: IN
10100: IFFALSE 10120
10102: PUSH
10103: LD_VAR 0 1
10107: PPUSH
10108: LD_INT 52
10110: PPUSH
10111: CALL_OW 321
10115: PUSH
10116: LD_INT 2
10118: EQUAL
10119: AND
10120: IFFALSE 10137
// bpoints := bpoints * 1.5 ;
10122: LD_ADDR_VAR 0 10
10126: PUSH
10127: LD_VAR 0 10
10131: PUSH
10132: LD_REAL  1.50000000000000E+0000
10135: MUL
10136: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10137: LD_VAR 0 1
10141: PPUSH
10142: LD_INT 66
10144: PPUSH
10145: CALL_OW 321
10149: PUSH
10150: LD_INT 2
10152: EQUAL
10153: IFFALSE 10170
// bpoints := bpoints * 1.1 ;
10155: LD_ADDR_VAR 0 10
10159: PUSH
10160: LD_VAR 0 10
10164: PUSH
10165: LD_REAL  1.10000000000000E+0000
10168: MUL
10169: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10170: LD_ADDR_VAR 0 10
10174: PUSH
10175: LD_VAR 0 10
10179: PUSH
10180: LD_VAR 0 6
10184: PPUSH
10185: LD_INT 1
10187: PPUSH
10188: CALL_OW 259
10192: PUSH
10193: LD_REAL  1.15000000000000E+0000
10196: MUL
10197: MUL
10198: ST_TO_ADDR
// end ; unit_vehicle :
10199: GO 11029
10201: LD_INT 2
10203: DOUBLE
10204: EQUAL
10205: IFTRUE 10209
10207: GO 11017
10209: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10210: LD_VAR 0 6
10214: PPUSH
10215: CALL_OW 264
10219: PUSH
10220: LD_INT 2
10222: PUSH
10223: LD_INT 42
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: IN
10234: IFFALSE 10255
// points := [ 25 , 5 , 3 ] ;
10236: LD_ADDR_VAR 0 9
10240: PUSH
10241: LD_INT 25
10243: PUSH
10244: LD_INT 5
10246: PUSH
10247: LD_INT 3
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10255: LD_VAR 0 6
10259: PPUSH
10260: CALL_OW 264
10264: PUSH
10265: LD_INT 4
10267: PUSH
10268: LD_INT 43
10270: PUSH
10271: LD_INT 25
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: IN
10279: IFFALSE 10300
// points := [ 40 , 15 , 5 ] ;
10281: LD_ADDR_VAR 0 9
10285: PUSH
10286: LD_INT 40
10288: PUSH
10289: LD_INT 15
10291: PUSH
10292: LD_INT 5
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10300: LD_VAR 0 6
10304: PPUSH
10305: CALL_OW 264
10309: PUSH
10310: LD_INT 3
10312: PUSH
10313: LD_INT 23
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: IN
10320: IFFALSE 10341
// points := [ 7 , 25 , 8 ] ;
10322: LD_ADDR_VAR 0 9
10326: PUSH
10327: LD_INT 7
10329: PUSH
10330: LD_INT 25
10332: PUSH
10333: LD_INT 8
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10341: LD_VAR 0 6
10345: PPUSH
10346: CALL_OW 264
10350: PUSH
10351: LD_INT 5
10353: PUSH
10354: LD_INT 27
10356: PUSH
10357: LD_INT 44
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: LIST
10364: IN
10365: IFFALSE 10386
// points := [ 14 , 50 , 16 ] ;
10367: LD_ADDR_VAR 0 9
10371: PUSH
10372: LD_INT 14
10374: PUSH
10375: LD_INT 50
10377: PUSH
10378: LD_INT 16
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10386: LD_VAR 0 6
10390: PPUSH
10391: CALL_OW 264
10395: PUSH
10396: LD_INT 6
10398: PUSH
10399: LD_INT 46
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: IN
10406: IFFALSE 10427
// points := [ 32 , 120 , 70 ] ;
10408: LD_ADDR_VAR 0 9
10412: PUSH
10413: LD_INT 32
10415: PUSH
10416: LD_INT 120
10418: PUSH
10419: LD_INT 70
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10427: LD_VAR 0 6
10431: PPUSH
10432: CALL_OW 264
10436: PUSH
10437: LD_INT 7
10439: PUSH
10440: LD_INT 28
10442: PUSH
10443: LD_INT 45
10445: PUSH
10446: LD_INT 92
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: IN
10455: IFFALSE 10476
// points := [ 35 , 20 , 45 ] ;
10457: LD_ADDR_VAR 0 9
10461: PUSH
10462: LD_INT 35
10464: PUSH
10465: LD_INT 20
10467: PUSH
10468: LD_INT 45
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10476: LD_VAR 0 6
10480: PPUSH
10481: CALL_OW 264
10485: PUSH
10486: LD_INT 47
10488: PUSH
10489: EMPTY
10490: LIST
10491: IN
10492: IFFALSE 10513
// points := [ 67 , 45 , 75 ] ;
10494: LD_ADDR_VAR 0 9
10498: PUSH
10499: LD_INT 67
10501: PUSH
10502: LD_INT 45
10504: PUSH
10505: LD_INT 75
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10513: LD_VAR 0 6
10517: PPUSH
10518: CALL_OW 264
10522: PUSH
10523: LD_INT 26
10525: PUSH
10526: EMPTY
10527: LIST
10528: IN
10529: IFFALSE 10550
// points := [ 120 , 30 , 80 ] ;
10531: LD_ADDR_VAR 0 9
10535: PUSH
10536: LD_INT 120
10538: PUSH
10539: LD_INT 30
10541: PUSH
10542: LD_INT 80
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: LIST
10549: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10550: LD_VAR 0 6
10554: PPUSH
10555: CALL_OW 264
10559: PUSH
10560: LD_INT 22
10562: PUSH
10563: EMPTY
10564: LIST
10565: IN
10566: IFFALSE 10587
// points := [ 40 , 1 , 1 ] ;
10568: LD_ADDR_VAR 0 9
10572: PUSH
10573: LD_INT 40
10575: PUSH
10576: LD_INT 1
10578: PUSH
10579: LD_INT 1
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10587: LD_VAR 0 6
10591: PPUSH
10592: CALL_OW 264
10596: PUSH
10597: LD_INT 29
10599: PUSH
10600: EMPTY
10601: LIST
10602: IN
10603: IFFALSE 10624
// points := [ 70 , 200 , 400 ] ;
10605: LD_ADDR_VAR 0 9
10609: PUSH
10610: LD_INT 70
10612: PUSH
10613: LD_INT 200
10615: PUSH
10616: LD_INT 400
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10624: LD_VAR 0 6
10628: PPUSH
10629: CALL_OW 264
10633: PUSH
10634: LD_INT 14
10636: PUSH
10637: LD_INT 53
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: IN
10644: IFFALSE 10665
// points := [ 40 , 10 , 20 ] ;
10646: LD_ADDR_VAR 0 9
10650: PUSH
10651: LD_INT 40
10653: PUSH
10654: LD_INT 10
10656: PUSH
10657: LD_INT 20
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10665: LD_VAR 0 6
10669: PPUSH
10670: CALL_OW 264
10674: PUSH
10675: LD_INT 9
10677: PUSH
10678: EMPTY
10679: LIST
10680: IN
10681: IFFALSE 10702
// points := [ 5 , 70 , 20 ] ;
10683: LD_ADDR_VAR 0 9
10687: PUSH
10688: LD_INT 5
10690: PUSH
10691: LD_INT 70
10693: PUSH
10694: LD_INT 20
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10702: LD_VAR 0 6
10706: PPUSH
10707: CALL_OW 264
10711: PUSH
10712: LD_INT 10
10714: PUSH
10715: EMPTY
10716: LIST
10717: IN
10718: IFFALSE 10739
// points := [ 35 , 110 , 70 ] ;
10720: LD_ADDR_VAR 0 9
10724: PUSH
10725: LD_INT 35
10727: PUSH
10728: LD_INT 110
10730: PUSH
10731: LD_INT 70
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10739: LD_VAR 0 6
10743: PPUSH
10744: CALL_OW 265
10748: PUSH
10749: LD_INT 25
10751: EQUAL
10752: IFFALSE 10773
// points := [ 80 , 65 , 100 ] ;
10754: LD_ADDR_VAR 0 9
10758: PUSH
10759: LD_INT 80
10761: PUSH
10762: LD_INT 65
10764: PUSH
10765: LD_INT 100
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: LIST
10772: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10773: LD_VAR 0 6
10777: PPUSH
10778: CALL_OW 263
10782: PUSH
10783: LD_INT 1
10785: EQUAL
10786: IFFALSE 10821
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10788: LD_ADDR_VAR 0 10
10792: PUSH
10793: LD_VAR 0 10
10797: PUSH
10798: LD_VAR 0 6
10802: PPUSH
10803: CALL_OW 311
10807: PPUSH
10808: LD_INT 3
10810: PPUSH
10811: CALL_OW 259
10815: PUSH
10816: LD_INT 4
10818: MUL
10819: MUL
10820: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10821: LD_VAR 0 6
10825: PPUSH
10826: CALL_OW 263
10830: PUSH
10831: LD_INT 2
10833: EQUAL
10834: IFFALSE 10885
// begin j := IsControledBy ( i ) ;
10836: LD_ADDR_VAR 0 7
10840: PUSH
10841: LD_VAR 0 6
10845: PPUSH
10846: CALL_OW 312
10850: ST_TO_ADDR
// if j then
10851: LD_VAR 0 7
10855: IFFALSE 10885
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10857: LD_ADDR_VAR 0 10
10861: PUSH
10862: LD_VAR 0 10
10866: PUSH
10867: LD_VAR 0 7
10871: PPUSH
10872: LD_INT 3
10874: PPUSH
10875: CALL_OW 259
10879: PUSH
10880: LD_INT 3
10882: MUL
10883: MUL
10884: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10885: LD_VAR 0 6
10889: PPUSH
10890: CALL_OW 264
10894: PUSH
10895: LD_INT 5
10897: PUSH
10898: LD_INT 6
10900: PUSH
10901: LD_INT 46
10903: PUSH
10904: LD_INT 44
10906: PUSH
10907: LD_INT 47
10909: PUSH
10910: LD_INT 45
10912: PUSH
10913: LD_INT 28
10915: PUSH
10916: LD_INT 7
10918: PUSH
10919: LD_INT 27
10921: PUSH
10922: LD_INT 29
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: IN
10937: IFFALSE 10957
10939: PUSH
10940: LD_VAR 0 1
10944: PPUSH
10945: LD_INT 52
10947: PPUSH
10948: CALL_OW 321
10952: PUSH
10953: LD_INT 2
10955: EQUAL
10956: AND
10957: IFFALSE 10974
// bpoints := bpoints * 1.2 ;
10959: LD_ADDR_VAR 0 10
10963: PUSH
10964: LD_VAR 0 10
10968: PUSH
10969: LD_REAL  1.20000000000000E+0000
10972: MUL
10973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10974: LD_VAR 0 6
10978: PPUSH
10979: CALL_OW 264
10983: PUSH
10984: LD_INT 6
10986: PUSH
10987: LD_INT 46
10989: PUSH
10990: LD_INT 47
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: IN
10998: IFFALSE 11015
// bpoints := bpoints * 1.2 ;
11000: LD_ADDR_VAR 0 10
11004: PUSH
11005: LD_VAR 0 10
11009: PUSH
11010: LD_REAL  1.20000000000000E+0000
11013: MUL
11014: ST_TO_ADDR
// end ; unit_building :
11015: GO 11029
11017: LD_INT 3
11019: DOUBLE
11020: EQUAL
11021: IFTRUE 11025
11023: GO 11028
11025: POP
// ; end ;
11026: GO 11029
11028: POP
// for j = 1 to 3 do
11029: LD_ADDR_VAR 0 7
11033: PUSH
11034: DOUBLE
11035: LD_INT 1
11037: DEC
11038: ST_TO_ADDR
11039: LD_INT 3
11041: PUSH
11042: FOR_TO
11043: IFFALSE 11096
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11045: LD_ADDR_VAR 0 5
11049: PUSH
11050: LD_VAR 0 5
11054: PPUSH
11055: LD_VAR 0 7
11059: PPUSH
11060: LD_VAR 0 5
11064: PUSH
11065: LD_VAR 0 7
11069: ARRAY
11070: PUSH
11071: LD_VAR 0 9
11075: PUSH
11076: LD_VAR 0 7
11080: ARRAY
11081: PUSH
11082: LD_VAR 0 10
11086: MUL
11087: PLUS
11088: PPUSH
11089: CALL_OW 1
11093: ST_TO_ADDR
11094: GO 11042
11096: POP
11097: POP
// end ;
11098: GO 9571
11100: POP
11101: POP
// result := Replace ( result , 4 , tmp ) ;
11102: LD_ADDR_VAR 0 5
11106: PUSH
11107: LD_VAR 0 5
11111: PPUSH
11112: LD_INT 4
11114: PPUSH
11115: LD_VAR 0 8
11119: PPUSH
11120: CALL_OW 1
11124: ST_TO_ADDR
// end ;
11125: LD_VAR 0 5
11129: RET
// export function DangerAtRange ( unit , range ) ; begin
11130: LD_INT 0
11132: PPUSH
// if not unit then
11133: LD_VAR 0 1
11137: NOT
11138: IFFALSE 11142
// exit ;
11140: GO 11187
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11142: LD_ADDR_VAR 0 3
11146: PUSH
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 255
11156: PPUSH
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 250
11166: PPUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL_OW 251
11176: PPUSH
11177: LD_VAR 0 2
11181: PPUSH
11182: CALL 9421 0 4
11186: ST_TO_ADDR
// end ;
11187: LD_VAR 0 3
11191: RET
// export function DangerInArea ( side , area ) ; begin
11192: LD_INT 0
11194: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11195: LD_ADDR_VAR 0 3
11199: PUSH
11200: LD_VAR 0 2
11204: PPUSH
11205: LD_INT 81
11207: PUSH
11208: LD_VAR 0 1
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PPUSH
11217: CALL_OW 70
11221: ST_TO_ADDR
// end ;
11222: LD_VAR 0 3
11226: RET
// export function IsExtension ( b ) ; begin
11227: LD_INT 0
11229: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11230: LD_ADDR_VAR 0 2
11234: PUSH
11235: LD_VAR 0 1
11239: PUSH
11240: LD_INT 23
11242: PUSH
11243: LD_INT 20
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_INT 17
11251: PUSH
11252: LD_INT 24
11254: PUSH
11255: LD_INT 21
11257: PUSH
11258: LD_INT 19
11260: PUSH
11261: LD_INT 16
11263: PUSH
11264: LD_INT 25
11266: PUSH
11267: LD_INT 18
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: IN
11282: ST_TO_ADDR
// end ;
11283: LD_VAR 0 2
11287: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11288: LD_INT 0
11290: PPUSH
11291: PPUSH
11292: PPUSH
// result := [ ] ;
11293: LD_ADDR_VAR 0 4
11297: PUSH
11298: EMPTY
11299: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11300: LD_ADDR_VAR 0 5
11304: PUSH
11305: LD_VAR 0 2
11309: PPUSH
11310: LD_INT 21
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 70
11324: ST_TO_ADDR
// if not tmp then
11325: LD_VAR 0 5
11329: NOT
11330: IFFALSE 11334
// exit ;
11332: GO 11398
// if checkLink then
11334: LD_VAR 0 3
11338: IFFALSE 11388
// begin for i in tmp do
11340: LD_ADDR_VAR 0 6
11344: PUSH
11345: LD_VAR 0 5
11349: PUSH
11350: FOR_IN
11351: IFFALSE 11386
// if GetBase ( i ) <> base then
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 274
11362: PUSH
11363: LD_VAR 0 1
11367: NONEQUAL
11368: IFFALSE 11384
// ComLinkToBase ( base , i ) ;
11370: LD_VAR 0 1
11374: PPUSH
11375: LD_VAR 0 6
11379: PPUSH
11380: CALL_OW 169
11384: GO 11350
11386: POP
11387: POP
// end ; result := tmp ;
11388: LD_ADDR_VAR 0 4
11392: PUSH
11393: LD_VAR 0 5
11397: ST_TO_ADDR
// end ;
11398: LD_VAR 0 4
11402: RET
// export function ComComplete ( units , b ) ; var i ; begin
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
// if not units then
11407: LD_VAR 0 1
11411: NOT
11412: IFFALSE 11416
// exit ;
11414: GO 11506
// for i in units do
11416: LD_ADDR_VAR 0 4
11420: PUSH
11421: LD_VAR 0 1
11425: PUSH
11426: FOR_IN
11427: IFFALSE 11504
// if BuildingStatus ( b ) = bs_build then
11429: LD_VAR 0 2
11433: PPUSH
11434: CALL_OW 461
11438: PUSH
11439: LD_INT 1
11441: EQUAL
11442: IFFALSE 11502
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11444: LD_VAR 0 4
11448: PPUSH
11449: LD_STRING h
11451: PUSH
11452: LD_VAR 0 2
11456: PPUSH
11457: CALL_OW 250
11461: PUSH
11462: LD_VAR 0 2
11466: PPUSH
11467: CALL_OW 251
11471: PUSH
11472: LD_VAR 0 2
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: LD_INT 0
11482: PUSH
11483: LD_INT 0
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: EMPTY
11496: LIST
11497: PPUSH
11498: CALL_OW 446
11502: GO 11426
11504: POP
11505: POP
// end ;
11506: LD_VAR 0 3
11510: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11511: LD_INT 0
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11519: LD_VAR 0 1
11523: NOT
11524: IFTRUE 11541
11526: PUSH
11527: LD_VAR 0 1
11531: PPUSH
11532: CALL_OW 263
11536: PUSH
11537: LD_INT 2
11539: NONEQUAL
11540: OR
11541: IFFALSE 11545
// exit ;
11543: GO 11861
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11545: LD_ADDR_VAR 0 6
11549: PUSH
11550: LD_INT 22
11552: PUSH
11553: LD_VAR 0 1
11557: PPUSH
11558: CALL_OW 255
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 2
11569: PUSH
11570: LD_INT 30
11572: PUSH
11573: LD_INT 36
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: LD_INT 34
11582: PUSH
11583: LD_INT 31
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: ST_TO_ADDR
// if not tmp then
11604: LD_VAR 0 6
11608: NOT
11609: IFFALSE 11613
// exit ;
11611: GO 11861
// result := [ ] ;
11613: LD_ADDR_VAR 0 2
11617: PUSH
11618: EMPTY
11619: ST_TO_ADDR
// for i in tmp do
11620: LD_ADDR_VAR 0 3
11624: PUSH
11625: LD_VAR 0 6
11629: PUSH
11630: FOR_IN
11631: IFFALSE 11702
// begin t := UnitsInside ( i ) ;
11633: LD_ADDR_VAR 0 4
11637: PUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: CALL_OW 313
11647: ST_TO_ADDR
// if t then
11648: LD_VAR 0 4
11652: IFFALSE 11700
// for j in t do
11654: LD_ADDR_VAR 0 7
11658: PUSH
11659: LD_VAR 0 4
11663: PUSH
11664: FOR_IN
11665: IFFALSE 11698
// result := Replace ( result , result + 1 , j ) ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: LD_VAR 0 2
11676: PPUSH
11677: LD_VAR 0 2
11681: PUSH
11682: LD_INT 1
11684: PLUS
11685: PPUSH
11686: LD_VAR 0 7
11690: PPUSH
11691: CALL_OW 1
11695: ST_TO_ADDR
11696: GO 11664
11698: POP
11699: POP
// end ;
11700: GO 11630
11702: POP
11703: POP
// if not result then
11704: LD_VAR 0 2
11708: NOT
11709: IFFALSE 11713
// exit ;
11711: GO 11861
// mech := result [ 1 ] ;
11713: LD_ADDR_VAR 0 5
11717: PUSH
11718: LD_VAR 0 2
11722: PUSH
11723: LD_INT 1
11725: ARRAY
11726: ST_TO_ADDR
// if result > 1 then
11727: LD_VAR 0 2
11731: PUSH
11732: LD_INT 1
11734: GREATER
11735: IFFALSE 11847
// begin for i = 2 to result do
11737: LD_ADDR_VAR 0 3
11741: PUSH
11742: DOUBLE
11743: LD_INT 2
11745: DEC
11746: ST_TO_ADDR
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_TO
11753: IFFALSE 11845
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11755: LD_ADDR_VAR 0 4
11759: PUSH
11760: LD_VAR 0 2
11764: PUSH
11765: LD_VAR 0 3
11769: ARRAY
11770: PPUSH
11771: LD_INT 3
11773: PPUSH
11774: CALL_OW 259
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: LD_VAR 0 3
11788: ARRAY
11789: PPUSH
11790: CALL_OW 432
11794: MINUS
11795: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11796: LD_VAR 0 4
11800: PUSH
11801: LD_VAR 0 5
11805: PPUSH
11806: LD_INT 3
11808: PPUSH
11809: CALL_OW 259
11813: PUSH
11814: LD_VAR 0 5
11818: PPUSH
11819: CALL_OW 432
11823: MINUS
11824: GREATEREQUAL
11825: IFFALSE 11843
// mech := result [ i ] ;
11827: LD_ADDR_VAR 0 5
11831: PUSH
11832: LD_VAR 0 2
11836: PUSH
11837: LD_VAR 0 3
11841: ARRAY
11842: ST_TO_ADDR
// end ;
11843: GO 11752
11845: POP
11846: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11847: LD_VAR 0 1
11851: PPUSH
11852: LD_VAR 0 5
11856: PPUSH
11857: CALL_OW 135
// end ;
11861: LD_VAR 0 2
11865: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11866: LD_INT 0
11868: PPUSH
11869: PPUSH
11870: PPUSH
11871: PPUSH
11872: PPUSH
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
// result := [ ] ;
11881: LD_ADDR_VAR 0 7
11885: PUSH
11886: EMPTY
11887: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11888: LD_VAR 0 1
11892: PPUSH
11893: CALL_OW 266
11897: PUSH
11898: LD_INT 0
11900: PUSH
11901: LD_INT 1
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: IN
11908: NOT
11909: IFFALSE 11913
// exit ;
11911: GO 13553
// if name then
11913: LD_VAR 0 3
11917: IFFALSE 11933
// SetBName ( base_dep , name ) ;
11919: LD_VAR 0 1
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: CALL_OW 500
// base := GetBase ( base_dep ) ;
11933: LD_ADDR_VAR 0 15
11937: PUSH
11938: LD_VAR 0 1
11942: PPUSH
11943: CALL_OW 274
11947: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11948: LD_ADDR_VAR 0 16
11952: PUSH
11953: LD_VAR 0 1
11957: PPUSH
11958: CALL_OW 255
11962: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11963: LD_ADDR_VAR 0 17
11967: PUSH
11968: LD_VAR 0 1
11972: PPUSH
11973: CALL_OW 248
11977: ST_TO_ADDR
// if sources then
11978: LD_VAR 0 5
11982: IFFALSE 12029
// for i = 1 to 3 do
11984: LD_ADDR_VAR 0 8
11988: PUSH
11989: DOUBLE
11990: LD_INT 1
11992: DEC
11993: ST_TO_ADDR
11994: LD_INT 3
11996: PUSH
11997: FOR_TO
11998: IFFALSE 12027
// AddResourceType ( base , i , sources [ i ] ) ;
12000: LD_VAR 0 15
12004: PPUSH
12005: LD_VAR 0 8
12009: PPUSH
12010: LD_VAR 0 5
12014: PUSH
12015: LD_VAR 0 8
12019: ARRAY
12020: PPUSH
12021: CALL_OW 276
12025: GO 11997
12027: POP
12028: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12029: LD_ADDR_VAR 0 18
12033: PUSH
12034: LD_VAR 0 15
12038: PPUSH
12039: LD_VAR 0 2
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL 11288 0 3
12051: ST_TO_ADDR
// InitHc ;
12052: CALL_OW 19
// InitUc ;
12056: CALL_OW 18
// uc_side := side ;
12060: LD_ADDR_OWVAR 20
12064: PUSH
12065: LD_VAR 0 16
12069: ST_TO_ADDR
// uc_nation := nation ;
12070: LD_ADDR_OWVAR 21
12074: PUSH
12075: LD_VAR 0 17
12079: ST_TO_ADDR
// if buildings then
12080: LD_VAR 0 18
12084: IFFALSE 13412
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12086: LD_ADDR_VAR 0 19
12090: PUSH
12091: LD_VAR 0 18
12095: PPUSH
12096: LD_INT 2
12098: PUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 29
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 30
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 72
12128: ST_TO_ADDR
// if tmp then
12129: LD_VAR 0 19
12133: IFFALSE 12181
// for i in tmp do
12135: LD_ADDR_VAR 0 8
12139: PUSH
12140: LD_VAR 0 19
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12179
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12148: LD_VAR 0 8
12152: PPUSH
12153: CALL_OW 250
12157: PPUSH
12158: LD_VAR 0 8
12162: PPUSH
12163: CALL_OW 251
12167: PPUSH
12168: LD_VAR 0 16
12172: PPUSH
12173: CALL_OW 441
12177: GO 12145
12179: POP
12180: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12181: LD_VAR 0 18
12185: PPUSH
12186: LD_INT 2
12188: PUSH
12189: LD_INT 30
12191: PUSH
12192: LD_INT 32
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 30
12201: PUSH
12202: LD_INT 33
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: IFFALSE 12306
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12220: LD_ADDR_VAR 0 8
12224: PUSH
12225: LD_VAR 0 18
12229: PPUSH
12230: LD_INT 2
12232: PUSH
12233: LD_INT 30
12235: PUSH
12236: LD_INT 32
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 30
12245: PUSH
12246: LD_INT 33
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: PPUSH
12258: CALL_OW 72
12262: PUSH
12263: FOR_IN
12264: IFFALSE 12304
// begin if not GetBWeapon ( i ) then
12266: LD_VAR 0 8
12270: PPUSH
12271: CALL_OW 269
12275: NOT
12276: IFFALSE 12302
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12278: LD_VAR 0 8
12282: PPUSH
12283: LD_VAR 0 8
12287: PPUSH
12288: LD_VAR 0 2
12292: PPUSH
12293: CALL 13558 0 2
12297: PPUSH
12298: CALL_OW 431
// end ;
12302: GO 12263
12304: POP
12305: POP
// end ; for i = 1 to personel do
12306: LD_ADDR_VAR 0 8
12310: PUSH
12311: DOUBLE
12312: LD_INT 1
12314: DEC
12315: ST_TO_ADDR
12316: LD_VAR 0 6
12320: PUSH
12321: FOR_TO
12322: IFFALSE 13392
// begin if i > 4 then
12324: LD_VAR 0 8
12328: PUSH
12329: LD_INT 4
12331: GREATER
12332: IFFALSE 12336
// break ;
12334: GO 13392
// case i of 1 :
12336: LD_VAR 0 8
12340: PUSH
12341: LD_INT 1
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12429
12349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12350: LD_ADDR_VAR 0 12
12354: PUSH
12355: LD_VAR 0 18
12359: PPUSH
12360: LD_INT 22
12362: PUSH
12363: LD_VAR 0 16
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 58
12374: PUSH
12375: EMPTY
12376: LIST
12377: PUSH
12378: LD_INT 2
12380: PUSH
12381: LD_INT 30
12383: PUSH
12384: LD_INT 32
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 30
12393: PUSH
12394: LD_INT 4
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 30
12403: PUSH
12404: LD_INT 5
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: PPUSH
12422: CALL_OW 72
12426: ST_TO_ADDR
12427: GO 12651
12429: LD_INT 2
12431: DOUBLE
12432: EQUAL
12433: IFTRUE 12437
12435: GO 12499
12437: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12438: LD_ADDR_VAR 0 12
12442: PUSH
12443: LD_VAR 0 18
12447: PPUSH
12448: LD_INT 22
12450: PUSH
12451: LD_VAR 0 16
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 2
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 0
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 30
12475: PUSH
12476: LD_INT 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: LIST
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PPUSH
12492: CALL_OW 72
12496: ST_TO_ADDR
12497: GO 12651
12499: LD_INT 3
12501: DOUBLE
12502: EQUAL
12503: IFTRUE 12507
12505: GO 12569
12507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12508: LD_ADDR_VAR 0 12
12512: PUSH
12513: LD_VAR 0 18
12517: PPUSH
12518: LD_INT 22
12520: PUSH
12521: LD_VAR 0 16
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 2
12532: PUSH
12533: LD_INT 30
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 30
12545: PUSH
12546: LD_INT 3
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PPUSH
12562: CALL_OW 72
12566: ST_TO_ADDR
12567: GO 12651
12569: LD_INT 4
12571: DOUBLE
12572: EQUAL
12573: IFTRUE 12577
12575: GO 12650
12577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12578: LD_ADDR_VAR 0 12
12582: PUSH
12583: LD_VAR 0 18
12587: PPUSH
12588: LD_INT 22
12590: PUSH
12591: LD_VAR 0 16
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: LD_INT 30
12605: PUSH
12606: LD_INT 6
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 30
12615: PUSH
12616: LD_INT 7
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 30
12625: PUSH
12626: LD_INT 8
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PPUSH
12643: CALL_OW 72
12647: ST_TO_ADDR
12648: GO 12651
12650: POP
// if i = 1 then
12651: LD_VAR 0 8
12655: PUSH
12656: LD_INT 1
12658: EQUAL
12659: IFFALSE 12770
// begin tmp := [ ] ;
12661: LD_ADDR_VAR 0 19
12665: PUSH
12666: EMPTY
12667: ST_TO_ADDR
// for j in f do
12668: LD_ADDR_VAR 0 9
12672: PUSH
12673: LD_VAR 0 12
12677: PUSH
12678: FOR_IN
12679: IFFALSE 12752
// if GetBType ( j ) = b_bunker then
12681: LD_VAR 0 9
12685: PPUSH
12686: CALL_OW 266
12690: PUSH
12691: LD_INT 32
12693: EQUAL
12694: IFFALSE 12721
// tmp := Insert ( tmp , 1 , j ) else
12696: LD_ADDR_VAR 0 19
12700: PUSH
12701: LD_VAR 0 19
12705: PPUSH
12706: LD_INT 1
12708: PPUSH
12709: LD_VAR 0 9
12713: PPUSH
12714: CALL_OW 2
12718: ST_TO_ADDR
12719: GO 12750
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12721: LD_ADDR_VAR 0 19
12725: PUSH
12726: LD_VAR 0 19
12730: PPUSH
12731: LD_VAR 0 19
12735: PUSH
12736: LD_INT 1
12738: PLUS
12739: PPUSH
12740: LD_VAR 0 9
12744: PPUSH
12745: CALL_OW 2
12749: ST_TO_ADDR
12750: GO 12678
12752: POP
12753: POP
// if tmp then
12754: LD_VAR 0 19
12758: IFFALSE 12770
// f := tmp ;
12760: LD_ADDR_VAR 0 12
12764: PUSH
12765: LD_VAR 0 19
12769: ST_TO_ADDR
// end ; x := personel [ i ] ;
12770: LD_ADDR_VAR 0 13
12774: PUSH
12775: LD_VAR 0 6
12779: PUSH
12780: LD_VAR 0 8
12784: ARRAY
12785: ST_TO_ADDR
// if x = - 1 then
12786: LD_VAR 0 13
12790: PUSH
12791: LD_INT 1
12793: NEG
12794: EQUAL
12795: IFFALSE 13006
// begin for j in f do
12797: LD_ADDR_VAR 0 9
12801: PUSH
12802: LD_VAR 0 12
12806: PUSH
12807: FOR_IN
12808: IFFALSE 13002
// repeat InitHc ;
12810: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12814: LD_VAR 0 9
12818: PPUSH
12819: CALL_OW 266
12823: PUSH
12824: LD_INT 5
12826: EQUAL
12827: IFFALSE 12897
// begin if UnitsInside ( j ) < 3 then
12829: LD_VAR 0 9
12833: PPUSH
12834: CALL_OW 313
12838: PUSH
12839: LD_INT 3
12841: LESS
12842: IFFALSE 12878
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12844: LD_INT 0
12846: PPUSH
12847: LD_INT 5
12849: PUSH
12850: LD_INT 8
12852: PUSH
12853: LD_INT 9
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: PUSH
12861: LD_VAR 0 17
12865: ARRAY
12866: PPUSH
12867: LD_VAR 0 4
12871: PPUSH
12872: CALL_OW 380
12876: GO 12895
// PrepareHuman ( false , i , skill ) ;
12878: LD_INT 0
12880: PPUSH
12881: LD_VAR 0 8
12885: PPUSH
12886: LD_VAR 0 4
12890: PPUSH
12891: CALL_OW 380
// end else
12895: GO 12914
// PrepareHuman ( false , i , skill ) ;
12897: LD_INT 0
12899: PPUSH
12900: LD_VAR 0 8
12904: PPUSH
12905: LD_VAR 0 4
12909: PPUSH
12910: CALL_OW 380
// un := CreateHuman ;
12914: LD_ADDR_VAR 0 14
12918: PUSH
12919: CALL_OW 44
12923: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12924: LD_ADDR_VAR 0 7
12928: PUSH
12929: LD_VAR 0 7
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: LD_VAR 0 14
12941: PPUSH
12942: CALL_OW 2
12946: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12947: LD_VAR 0 14
12951: PPUSH
12952: LD_VAR 0 9
12956: PPUSH
12957: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12961: LD_VAR 0 9
12965: PPUSH
12966: CALL_OW 313
12970: PUSH
12971: LD_INT 6
12973: EQUAL
12974: IFTRUE 12998
12976: PUSH
12977: LD_VAR 0 9
12981: PPUSH
12982: CALL_OW 266
12986: PUSH
12987: LD_INT 32
12989: PUSH
12990: LD_INT 31
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: IN
12997: OR
12998: IFFALSE 12810
13000: GO 12807
13002: POP
13003: POP
// end else
13004: GO 13390
// for j = 1 to x do
13006: LD_ADDR_VAR 0 9
13010: PUSH
13011: DOUBLE
13012: LD_INT 1
13014: DEC
13015: ST_TO_ADDR
13016: LD_VAR 0 13
13020: PUSH
13021: FOR_TO
13022: IFFALSE 13388
// begin InitHc ;
13024: CALL_OW 19
// if not f then
13028: LD_VAR 0 12
13032: NOT
13033: IFFALSE 13122
// begin PrepareHuman ( false , i , skill ) ;
13035: LD_INT 0
13037: PPUSH
13038: LD_VAR 0 8
13042: PPUSH
13043: LD_VAR 0 4
13047: PPUSH
13048: CALL_OW 380
// un := CreateHuman ;
13052: LD_ADDR_VAR 0 14
13056: PUSH
13057: CALL_OW 44
13061: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13062: LD_ADDR_VAR 0 7
13066: PUSH
13067: LD_VAR 0 7
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: LD_VAR 0 14
13079: PPUSH
13080: CALL_OW 2
13084: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13085: LD_VAR 0 14
13089: PPUSH
13090: LD_VAR 0 1
13094: PPUSH
13095: CALL_OW 250
13099: PPUSH
13100: LD_VAR 0 1
13104: PPUSH
13105: CALL_OW 251
13109: PPUSH
13110: LD_INT 10
13112: PPUSH
13113: LD_INT 0
13115: PPUSH
13116: CALL_OW 50
// continue ;
13120: GO 13021
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13122: LD_VAR 0 12
13126: PUSH
13127: LD_INT 1
13129: ARRAY
13130: PPUSH
13131: CALL_OW 313
13135: IFFALSE 13163
13137: PUSH
13138: LD_VAR 0 12
13142: PUSH
13143: LD_INT 1
13145: ARRAY
13146: PPUSH
13147: CALL_OW 266
13151: PUSH
13152: LD_INT 32
13154: PUSH
13155: LD_INT 31
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: IN
13162: AND
13163: IFTRUE 13184
13165: PUSH
13166: LD_VAR 0 12
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: CALL_OW 313
13179: PUSH
13180: LD_INT 6
13182: EQUAL
13183: OR
13184: IFFALSE 13204
// f := Delete ( f , 1 ) ;
13186: LD_ADDR_VAR 0 12
13190: PUSH
13191: LD_VAR 0 12
13195: PPUSH
13196: LD_INT 1
13198: PPUSH
13199: CALL_OW 3
13203: ST_TO_ADDR
// if not f then
13204: LD_VAR 0 12
13208: NOT
13209: IFFALSE 13227
// begin x := x + 2 ;
13211: LD_ADDR_VAR 0 13
13215: PUSH
13216: LD_VAR 0 13
13220: PUSH
13221: LD_INT 2
13223: PLUS
13224: ST_TO_ADDR
// continue ;
13225: GO 13021
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13227: LD_VAR 0 12
13231: PUSH
13232: LD_INT 1
13234: ARRAY
13235: PPUSH
13236: CALL_OW 266
13240: PUSH
13241: LD_INT 5
13243: EQUAL
13244: IFFALSE 13318
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13246: LD_VAR 0 12
13250: PUSH
13251: LD_INT 1
13253: ARRAY
13254: PPUSH
13255: CALL_OW 313
13259: PUSH
13260: LD_INT 3
13262: LESS
13263: IFFALSE 13299
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13265: LD_INT 0
13267: PPUSH
13268: LD_INT 5
13270: PUSH
13271: LD_INT 8
13273: PUSH
13274: LD_INT 9
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: PUSH
13282: LD_VAR 0 17
13286: ARRAY
13287: PPUSH
13288: LD_VAR 0 4
13292: PPUSH
13293: CALL_OW 380
13297: GO 13316
// PrepareHuman ( false , i , skill ) ;
13299: LD_INT 0
13301: PPUSH
13302: LD_VAR 0 8
13306: PPUSH
13307: LD_VAR 0 4
13311: PPUSH
13312: CALL_OW 380
// end else
13316: GO 13335
// PrepareHuman ( false , i , skill ) ;
13318: LD_INT 0
13320: PPUSH
13321: LD_VAR 0 8
13325: PPUSH
13326: LD_VAR 0 4
13330: PPUSH
13331: CALL_OW 380
// un := CreateHuman ;
13335: LD_ADDR_VAR 0 14
13339: PUSH
13340: CALL_OW 44
13344: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13345: LD_ADDR_VAR 0 7
13349: PUSH
13350: LD_VAR 0 7
13354: PPUSH
13355: LD_INT 1
13357: PPUSH
13358: LD_VAR 0 14
13362: PPUSH
13363: CALL_OW 2
13367: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13368: LD_VAR 0 14
13372: PPUSH
13373: LD_VAR 0 12
13377: PUSH
13378: LD_INT 1
13380: ARRAY
13381: PPUSH
13382: CALL_OW 52
// end ;
13386: GO 13021
13388: POP
13389: POP
// end ;
13390: GO 12321
13392: POP
13393: POP
// result := result ^ buildings ;
13394: LD_ADDR_VAR 0 7
13398: PUSH
13399: LD_VAR 0 7
13403: PUSH
13404: LD_VAR 0 18
13408: ADD
13409: ST_TO_ADDR
// end else
13410: GO 13553
// begin for i = 1 to personel do
13412: LD_ADDR_VAR 0 8
13416: PUSH
13417: DOUBLE
13418: LD_INT 1
13420: DEC
13421: ST_TO_ADDR
13422: LD_VAR 0 6
13426: PUSH
13427: FOR_TO
13428: IFFALSE 13551
// begin if i > 4 then
13430: LD_VAR 0 8
13434: PUSH
13435: LD_INT 4
13437: GREATER
13438: IFFALSE 13442
// break ;
13440: GO 13551
// x := personel [ i ] ;
13442: LD_ADDR_VAR 0 13
13446: PUSH
13447: LD_VAR 0 6
13451: PUSH
13452: LD_VAR 0 8
13456: ARRAY
13457: ST_TO_ADDR
// if x = - 1 then
13458: LD_VAR 0 13
13462: PUSH
13463: LD_INT 1
13465: NEG
13466: EQUAL
13467: IFFALSE 13471
// continue ;
13469: GO 13427
// PrepareHuman ( false , i , skill ) ;
13471: LD_INT 0
13473: PPUSH
13474: LD_VAR 0 8
13478: PPUSH
13479: LD_VAR 0 4
13483: PPUSH
13484: CALL_OW 380
// un := CreateHuman ;
13488: LD_ADDR_VAR 0 14
13492: PUSH
13493: CALL_OW 44
13497: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13498: LD_VAR 0 14
13502: PPUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 250
13512: PPUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 251
13522: PPUSH
13523: LD_INT 10
13525: PPUSH
13526: LD_INT 0
13528: PPUSH
13529: CALL_OW 50
// result := result ^ un ;
13533: LD_ADDR_VAR 0 7
13537: PUSH
13538: LD_VAR 0 7
13542: PUSH
13543: LD_VAR 0 14
13547: ADD
13548: ST_TO_ADDR
// end ;
13549: GO 13427
13551: POP
13552: POP
// end ; end ;
13553: LD_VAR 0 7
13557: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13558: LD_INT 0
13560: PPUSH
13561: PPUSH
13562: PPUSH
13563: PPUSH
13564: PPUSH
13565: PPUSH
13566: PPUSH
13567: PPUSH
13568: PPUSH
13569: PPUSH
13570: PPUSH
13571: PPUSH
13572: PPUSH
13573: PPUSH
13574: PPUSH
13575: PPUSH
// result := false ;
13576: LD_ADDR_VAR 0 3
13580: PUSH
13581: LD_INT 0
13583: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13584: LD_VAR 0 1
13588: NOT
13589: IFTRUE 13614
13591: PUSH
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 266
13601: PUSH
13602: LD_INT 32
13604: PUSH
13605: LD_INT 33
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: IN
13612: NOT
13613: OR
13614: IFFALSE 13618
// exit ;
13616: GO 14753
// nat := GetNation ( tower ) ;
13618: LD_ADDR_VAR 0 12
13622: PUSH
13623: LD_VAR 0 1
13627: PPUSH
13628: CALL_OW 248
13632: ST_TO_ADDR
// side := GetSide ( tower ) ;
13633: LD_ADDR_VAR 0 16
13637: PUSH
13638: LD_VAR 0 1
13642: PPUSH
13643: CALL_OW 255
13647: ST_TO_ADDR
// x := GetX ( tower ) ;
13648: LD_ADDR_VAR 0 10
13652: PUSH
13653: LD_VAR 0 1
13657: PPUSH
13658: CALL_OW 250
13662: ST_TO_ADDR
// y := GetY ( tower ) ;
13663: LD_ADDR_VAR 0 11
13667: PUSH
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 251
13677: ST_TO_ADDR
// if not x or not y then
13678: LD_VAR 0 10
13682: NOT
13683: IFTRUE 13692
13685: PUSH
13686: LD_VAR 0 11
13690: NOT
13691: OR
13692: IFFALSE 13696
// exit ;
13694: GO 14753
// weapon := 0 ;
13696: LD_ADDR_VAR 0 18
13700: PUSH
13701: LD_INT 0
13703: ST_TO_ADDR
// fac_list := [ ] ;
13704: LD_ADDR_VAR 0 17
13708: PUSH
13709: EMPTY
13710: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13711: LD_ADDR_VAR 0 6
13715: PUSH
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 274
13725: PPUSH
13726: LD_VAR 0 2
13730: PPUSH
13731: LD_INT 0
13733: PPUSH
13734: CALL 11288 0 3
13738: PPUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 3
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PPUSH
13749: CALL_OW 72
13753: ST_TO_ADDR
// if not factories then
13754: LD_VAR 0 6
13758: NOT
13759: IFFALSE 13763
// exit ;
13761: GO 14753
// for i in factories do
13763: LD_ADDR_VAR 0 8
13767: PUSH
13768: LD_VAR 0 6
13772: PUSH
13773: FOR_IN
13774: IFFALSE 13799
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13776: LD_ADDR_VAR 0 17
13780: PUSH
13781: LD_VAR 0 17
13785: PUSH
13786: LD_VAR 0 8
13790: PPUSH
13791: CALL_OW 478
13795: UNION
13796: ST_TO_ADDR
13797: GO 13773
13799: POP
13800: POP
// if not fac_list then
13801: LD_VAR 0 17
13805: NOT
13806: IFFALSE 13810
// exit ;
13808: GO 14753
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13810: LD_ADDR_VAR 0 5
13814: PUSH
13815: LD_INT 4
13817: PUSH
13818: LD_INT 5
13820: PUSH
13821: LD_INT 9
13823: PUSH
13824: LD_INT 10
13826: PUSH
13827: LD_INT 6
13829: PUSH
13830: LD_INT 7
13832: PUSH
13833: LD_INT 11
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 27
13847: PUSH
13848: LD_INT 28
13850: PUSH
13851: LD_INT 26
13853: PUSH
13854: LD_INT 30
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 43
13865: PUSH
13866: LD_INT 44
13868: PUSH
13869: LD_INT 46
13871: PUSH
13872: LD_INT 45
13874: PUSH
13875: LD_INT 47
13877: PUSH
13878: LD_INT 49
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: LD_VAR 0 12
13898: ARRAY
13899: ST_TO_ADDR
// list := list isect fac_list ;
13900: LD_ADDR_VAR 0 5
13904: PUSH
13905: LD_VAR 0 5
13909: PUSH
13910: LD_VAR 0 17
13914: ISECT
13915: ST_TO_ADDR
// if not list then
13916: LD_VAR 0 5
13920: NOT
13921: IFFALSE 13925
// exit ;
13923: GO 14753
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13925: LD_VAR 0 12
13929: PUSH
13930: LD_INT 3
13932: EQUAL
13933: IFFALSE 13945
13935: PUSH
13936: LD_INT 49
13938: PUSH
13939: LD_VAR 0 5
13943: IN
13944: AND
13945: IFFALSE 13965
13947: PUSH
13948: LD_INT 31
13950: PPUSH
13951: LD_VAR 0 16
13955: PPUSH
13956: CALL_OW 321
13960: PUSH
13961: LD_INT 2
13963: EQUAL
13964: AND
13965: IFFALSE 14025
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13967: LD_INT 22
13969: PUSH
13970: LD_VAR 0 16
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 35
13981: PUSH
13982: LD_INT 49
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 91
13991: PUSH
13992: LD_VAR 0 1
13996: PUSH
13997: LD_INT 10
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: NOT
14015: IFFALSE 14025
// weapon := ru_time_lapser ;
14017: LD_ADDR_VAR 0 18
14021: PUSH
14022: LD_INT 49
14024: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14025: LD_VAR 0 12
14029: PUSH
14030: LD_INT 1
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: IN
14040: IFFALSE 14064
14042: PUSH
14043: LD_INT 11
14045: PUSH
14046: LD_VAR 0 5
14050: IN
14051: IFTRUE 14063
14053: PUSH
14054: LD_INT 30
14056: PUSH
14057: LD_VAR 0 5
14061: IN
14062: OR
14063: AND
14064: IFFALSE 14084
14066: PUSH
14067: LD_INT 6
14069: PPUSH
14070: LD_VAR 0 16
14074: PPUSH
14075: CALL_OW 321
14079: PUSH
14080: LD_INT 2
14082: EQUAL
14083: AND
14084: IFFALSE 14251
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14086: LD_INT 22
14088: PUSH
14089: LD_VAR 0 16
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 2
14100: PUSH
14101: LD_INT 35
14103: PUSH
14104: LD_INT 11
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 35
14113: PUSH
14114: LD_INT 30
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 91
14128: PUSH
14129: LD_VAR 0 1
14133: PUSH
14134: LD_INT 18
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: NOT
14152: IFFALSE 14228
14154: PUSH
14155: LD_INT 22
14157: PUSH
14158: LD_VAR 0 16
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 2
14169: PUSH
14170: LD_INT 30
14172: PUSH
14173: LD_INT 32
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 30
14182: PUSH
14183: LD_INT 33
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 91
14197: PUSH
14198: LD_VAR 0 1
14202: PUSH
14203: LD_INT 12
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: PUSH
14216: EMPTY
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: PUSH
14224: LD_INT 2
14226: GREATER
14227: AND
14228: IFFALSE 14251
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14230: LD_ADDR_VAR 0 18
14234: PUSH
14235: LD_INT 11
14237: PUSH
14238: LD_INT 30
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_VAR 0 12
14249: ARRAY
14250: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14251: LD_VAR 0 18
14255: NOT
14256: IFFALSE 14276
14258: PUSH
14259: LD_INT 40
14261: PPUSH
14262: LD_VAR 0 16
14266: PPUSH
14267: CALL_OW 321
14271: PUSH
14272: LD_INT 2
14274: EQUAL
14275: AND
14276: IFFALSE 14312
14278: PUSH
14279: LD_INT 7
14281: PUSH
14282: LD_VAR 0 5
14286: IN
14287: IFTRUE 14299
14289: PUSH
14290: LD_INT 28
14292: PUSH
14293: LD_VAR 0 5
14297: IN
14298: OR
14299: IFTRUE 14311
14301: PUSH
14302: LD_INT 45
14304: PUSH
14305: LD_VAR 0 5
14309: IN
14310: OR
14311: AND
14312: IFFALSE 14566
// begin hex := GetHexInfo ( x , y ) ;
14314: LD_ADDR_VAR 0 4
14318: PUSH
14319: LD_VAR 0 10
14323: PPUSH
14324: LD_VAR 0 11
14328: PPUSH
14329: CALL_OW 546
14333: ST_TO_ADDR
// if hex [ 1 ] then
14334: LD_VAR 0 4
14338: PUSH
14339: LD_INT 1
14341: ARRAY
14342: IFFALSE 14346
// exit ;
14344: GO 14753
// height := hex [ 2 ] ;
14346: LD_ADDR_VAR 0 15
14350: PUSH
14351: LD_VAR 0 4
14355: PUSH
14356: LD_INT 2
14358: ARRAY
14359: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14360: LD_ADDR_VAR 0 14
14364: PUSH
14365: LD_INT 0
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: LD_INT 5
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: ST_TO_ADDR
// for i in tmp do
14383: LD_ADDR_VAR 0 8
14387: PUSH
14388: LD_VAR 0 14
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14564
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14396: LD_ADDR_VAR 0 9
14400: PUSH
14401: LD_VAR 0 10
14405: PPUSH
14406: LD_VAR 0 8
14410: PPUSH
14411: LD_INT 5
14413: PPUSH
14414: CALL_OW 272
14418: PUSH
14419: LD_VAR 0 11
14423: PPUSH
14424: LD_VAR 0 8
14428: PPUSH
14429: LD_INT 5
14431: PPUSH
14432: CALL_OW 273
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14441: LD_VAR 0 9
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: LD_VAR 0 9
14454: PUSH
14455: LD_INT 2
14457: ARRAY
14458: PPUSH
14459: CALL_OW 488
14463: IFFALSE 14562
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14465: LD_ADDR_VAR 0 4
14469: PUSH
14470: LD_VAR 0 9
14474: PUSH
14475: LD_INT 1
14477: ARRAY
14478: PPUSH
14479: LD_VAR 0 9
14483: PUSH
14484: LD_INT 2
14486: ARRAY
14487: PPUSH
14488: CALL_OW 546
14492: ST_TO_ADDR
// if hex [ 1 ] then
14493: LD_VAR 0 4
14497: PUSH
14498: LD_INT 1
14500: ARRAY
14501: IFFALSE 14505
// continue ;
14503: GO 14393
// h := hex [ 2 ] ;
14505: LD_ADDR_VAR 0 13
14509: PUSH
14510: LD_VAR 0 4
14514: PUSH
14515: LD_INT 2
14517: ARRAY
14518: ST_TO_ADDR
// if h + 7 < height then
14519: LD_VAR 0 13
14523: PUSH
14524: LD_INT 7
14526: PLUS
14527: PUSH
14528: LD_VAR 0 15
14532: LESS
14533: IFFALSE 14562
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14535: LD_ADDR_VAR 0 18
14539: PUSH
14540: LD_INT 7
14542: PUSH
14543: LD_INT 28
14545: PUSH
14546: LD_INT 45
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: PUSH
14554: LD_VAR 0 12
14558: ARRAY
14559: ST_TO_ADDR
// break ;
14560: GO 14564
// end ; end ; end ;
14562: GO 14393
14564: POP
14565: POP
// end ; if not weapon then
14566: LD_VAR 0 18
14570: NOT
14571: IFFALSE 14631
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14573: LD_ADDR_VAR 0 5
14577: PUSH
14578: LD_VAR 0 5
14582: PUSH
14583: LD_INT 11
14585: PUSH
14586: LD_INT 30
14588: PUSH
14589: LD_INT 49
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: DIFF
14597: ST_TO_ADDR
// if not list then
14598: LD_VAR 0 5
14602: NOT
14603: IFFALSE 14607
// exit ;
14605: GO 14753
// weapon := list [ rand ( 1 , list ) ] ;
14607: LD_ADDR_VAR 0 18
14611: PUSH
14612: LD_VAR 0 5
14616: PUSH
14617: LD_INT 1
14619: PPUSH
14620: LD_VAR 0 5
14624: PPUSH
14625: CALL_OW 12
14629: ARRAY
14630: ST_TO_ADDR
// end ; if weapon then
14631: LD_VAR 0 18
14635: IFFALSE 14753
// begin tmp := CostOfWeapon ( weapon ) ;
14637: LD_ADDR_VAR 0 14
14641: PUSH
14642: LD_VAR 0 18
14646: PPUSH
14647: CALL_OW 451
14651: ST_TO_ADDR
// j := GetBase ( tower ) ;
14652: LD_ADDR_VAR 0 9
14656: PUSH
14657: LD_VAR 0 1
14661: PPUSH
14662: CALL_OW 274
14666: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14667: LD_VAR 0 9
14671: PPUSH
14672: LD_INT 1
14674: PPUSH
14675: CALL_OW 275
14679: PUSH
14680: LD_VAR 0 14
14684: PUSH
14685: LD_INT 1
14687: ARRAY
14688: GREATEREQUAL
14689: IFFALSE 14715
14691: PUSH
14692: LD_VAR 0 9
14696: PPUSH
14697: LD_INT 2
14699: PPUSH
14700: CALL_OW 275
14704: PUSH
14705: LD_VAR 0 14
14709: PUSH
14710: LD_INT 2
14712: ARRAY
14713: GREATEREQUAL
14714: AND
14715: IFFALSE 14741
14717: PUSH
14718: LD_VAR 0 9
14722: PPUSH
14723: LD_INT 3
14725: PPUSH
14726: CALL_OW 275
14730: PUSH
14731: LD_VAR 0 14
14735: PUSH
14736: LD_INT 3
14738: ARRAY
14739: GREATEREQUAL
14740: AND
14741: IFFALSE 14753
// result := weapon ;
14743: LD_ADDR_VAR 0 3
14747: PUSH
14748: LD_VAR 0 18
14752: ST_TO_ADDR
// end ; end ;
14753: LD_VAR 0 3
14757: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14758: LD_INT 0
14760: PPUSH
14761: PPUSH
// result := true ;
14762: LD_ADDR_VAR 0 3
14766: PUSH
14767: LD_INT 1
14769: ST_TO_ADDR
// if array1 = array2 then
14770: LD_VAR 0 1
14774: PUSH
14775: LD_VAR 0 2
14779: EQUAL
14780: IFFALSE 14840
// begin for i = 1 to array1 do
14782: LD_ADDR_VAR 0 4
14786: PUSH
14787: DOUBLE
14788: LD_INT 1
14790: DEC
14791: ST_TO_ADDR
14792: LD_VAR 0 1
14796: PUSH
14797: FOR_TO
14798: IFFALSE 14836
// if array1 [ i ] <> array2 [ i ] then
14800: LD_VAR 0 1
14804: PUSH
14805: LD_VAR 0 4
14809: ARRAY
14810: PUSH
14811: LD_VAR 0 2
14815: PUSH
14816: LD_VAR 0 4
14820: ARRAY
14821: NONEQUAL
14822: IFFALSE 14834
// begin result := false ;
14824: LD_ADDR_VAR 0 3
14828: PUSH
14829: LD_INT 0
14831: ST_TO_ADDR
// break ;
14832: GO 14836
// end ;
14834: GO 14797
14836: POP
14837: POP
// end else
14838: GO 14848
// result := false ;
14840: LD_ADDR_VAR 0 3
14844: PUSH
14845: LD_INT 0
14847: ST_TO_ADDR
// end ;
14848: LD_VAR 0 3
14852: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14853: LD_INT 0
14855: PPUSH
14856: PPUSH
// if not array1 or not array2 then
14857: LD_VAR 0 1
14861: NOT
14862: IFTRUE 14871
14864: PUSH
14865: LD_VAR 0 2
14869: NOT
14870: OR
14871: IFFALSE 14875
// exit ;
14873: GO 14939
// result := true ;
14875: LD_ADDR_VAR 0 3
14879: PUSH
14880: LD_INT 1
14882: ST_TO_ADDR
// for i = 1 to array1 do
14883: LD_ADDR_VAR 0 4
14887: PUSH
14888: DOUBLE
14889: LD_INT 1
14891: DEC
14892: ST_TO_ADDR
14893: LD_VAR 0 1
14897: PUSH
14898: FOR_TO
14899: IFFALSE 14937
// if array1 [ i ] <> array2 [ i ] then
14901: LD_VAR 0 1
14905: PUSH
14906: LD_VAR 0 4
14910: ARRAY
14911: PUSH
14912: LD_VAR 0 2
14916: PUSH
14917: LD_VAR 0 4
14921: ARRAY
14922: NONEQUAL
14923: IFFALSE 14935
// begin result := false ;
14925: LD_ADDR_VAR 0 3
14929: PUSH
14930: LD_INT 0
14932: ST_TO_ADDR
// break ;
14933: GO 14937
// end ;
14935: GO 14898
14937: POP
14938: POP
// end ;
14939: LD_VAR 0 3
14943: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14944: LD_INT 0
14946: PPUSH
14947: PPUSH
14948: PPUSH
// pom := GetBase ( fac ) ;
14949: LD_ADDR_VAR 0 5
14953: PUSH
14954: LD_VAR 0 1
14958: PPUSH
14959: CALL_OW 274
14963: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14964: LD_ADDR_VAR 0 4
14968: PUSH
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: LD_VAR 0 2
14982: PUSH
14983: LD_INT 2
14985: ARRAY
14986: PPUSH
14987: LD_VAR 0 2
14991: PUSH
14992: LD_INT 3
14994: ARRAY
14995: PPUSH
14996: LD_VAR 0 2
15000: PUSH
15001: LD_INT 4
15003: ARRAY
15004: PPUSH
15005: CALL_OW 449
15009: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15010: LD_ADDR_VAR 0 3
15014: PUSH
15015: LD_VAR 0 5
15019: PPUSH
15020: LD_INT 1
15022: PPUSH
15023: CALL_OW 275
15027: PUSH
15028: LD_VAR 0 4
15032: PUSH
15033: LD_INT 1
15035: ARRAY
15036: GREATEREQUAL
15037: IFFALSE 15063
15039: PUSH
15040: LD_VAR 0 5
15044: PPUSH
15045: LD_INT 2
15047: PPUSH
15048: CALL_OW 275
15052: PUSH
15053: LD_VAR 0 4
15057: PUSH
15058: LD_INT 2
15060: ARRAY
15061: GREATEREQUAL
15062: AND
15063: IFFALSE 15089
15065: PUSH
15066: LD_VAR 0 5
15070: PPUSH
15071: LD_INT 3
15073: PPUSH
15074: CALL_OW 275
15078: PUSH
15079: LD_VAR 0 4
15083: PUSH
15084: LD_INT 3
15086: ARRAY
15087: GREATEREQUAL
15088: AND
15089: ST_TO_ADDR
// end ;
15090: LD_VAR 0 3
15094: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15095: LD_INT 0
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
// pom := GetBase ( building ) ;
15101: LD_ADDR_VAR 0 3
15105: PUSH
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 274
15115: ST_TO_ADDR
// if not pom then
15116: LD_VAR 0 3
15120: NOT
15121: IFFALSE 15125
// exit ;
15123: GO 15299
// btype := GetBType ( building ) ;
15125: LD_ADDR_VAR 0 5
15129: PUSH
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 266
15139: ST_TO_ADDR
// if btype = b_armoury then
15140: LD_VAR 0 5
15144: PUSH
15145: LD_INT 4
15147: EQUAL
15148: IFFALSE 15158
// btype := b_barracks ;
15150: LD_ADDR_VAR 0 5
15154: PUSH
15155: LD_INT 5
15157: ST_TO_ADDR
// if btype = b_depot then
15158: LD_VAR 0 5
15162: PUSH
15163: LD_INT 0
15165: EQUAL
15166: IFFALSE 15176
// btype := b_warehouse ;
15168: LD_ADDR_VAR 0 5
15172: PUSH
15173: LD_INT 1
15175: ST_TO_ADDR
// if btype = b_workshop then
15176: LD_VAR 0 5
15180: PUSH
15181: LD_INT 2
15183: EQUAL
15184: IFFALSE 15194
// btype := b_factory ;
15186: LD_ADDR_VAR 0 5
15190: PUSH
15191: LD_INT 3
15193: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15194: LD_ADDR_VAR 0 4
15198: PUSH
15199: LD_VAR 0 5
15203: PPUSH
15204: LD_VAR 0 1
15208: PPUSH
15209: CALL_OW 248
15213: PPUSH
15214: CALL_OW 450
15218: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15219: LD_ADDR_VAR 0 2
15223: PUSH
15224: LD_VAR 0 3
15228: PPUSH
15229: LD_INT 1
15231: PPUSH
15232: CALL_OW 275
15236: PUSH
15237: LD_VAR 0 4
15241: PUSH
15242: LD_INT 1
15244: ARRAY
15245: GREATEREQUAL
15246: IFFALSE 15272
15248: PUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: LD_INT 2
15256: PPUSH
15257: CALL_OW 275
15261: PUSH
15262: LD_VAR 0 4
15266: PUSH
15267: LD_INT 2
15269: ARRAY
15270: GREATEREQUAL
15271: AND
15272: IFFALSE 15298
15274: PUSH
15275: LD_VAR 0 3
15279: PPUSH
15280: LD_INT 3
15282: PPUSH
15283: CALL_OW 275
15287: PUSH
15288: LD_VAR 0 4
15292: PUSH
15293: LD_INT 3
15295: ARRAY
15296: GREATEREQUAL
15297: AND
15298: ST_TO_ADDR
// end ;
15299: LD_VAR 0 2
15303: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
15308: PPUSH
// pom := GetBase ( building ) ;
15309: LD_ADDR_VAR 0 4
15313: PUSH
15314: LD_VAR 0 1
15318: PPUSH
15319: CALL_OW 274
15323: ST_TO_ADDR
// if not pom then
15324: LD_VAR 0 4
15328: NOT
15329: IFFALSE 15333
// exit ;
15331: GO 15438
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15333: LD_ADDR_VAR 0 5
15337: PUSH
15338: LD_VAR 0 2
15342: PPUSH
15343: LD_VAR 0 1
15347: PPUSH
15348: CALL_OW 248
15352: PPUSH
15353: CALL_OW 450
15357: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15358: LD_ADDR_VAR 0 3
15362: PUSH
15363: LD_VAR 0 4
15367: PPUSH
15368: LD_INT 1
15370: PPUSH
15371: CALL_OW 275
15375: PUSH
15376: LD_VAR 0 5
15380: PUSH
15381: LD_INT 1
15383: ARRAY
15384: GREATEREQUAL
15385: IFFALSE 15411
15387: PUSH
15388: LD_VAR 0 4
15392: PPUSH
15393: LD_INT 2
15395: PPUSH
15396: CALL_OW 275
15400: PUSH
15401: LD_VAR 0 5
15405: PUSH
15406: LD_INT 2
15408: ARRAY
15409: GREATEREQUAL
15410: AND
15411: IFFALSE 15437
15413: PUSH
15414: LD_VAR 0 4
15418: PPUSH
15419: LD_INT 3
15421: PPUSH
15422: CALL_OW 275
15426: PUSH
15427: LD_VAR 0 5
15431: PUSH
15432: LD_INT 3
15434: ARRAY
15435: GREATEREQUAL
15436: AND
15437: ST_TO_ADDR
// end ;
15438: LD_VAR 0 3
15442: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15443: LD_INT 0
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
15454: PPUSH
15455: PPUSH
// result := false ;
15456: LD_ADDR_VAR 0 8
15460: PUSH
15461: LD_INT 0
15463: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15464: LD_VAR 0 5
15468: NOT
15469: IFTRUE 15478
15471: PUSH
15472: LD_VAR 0 1
15476: NOT
15477: OR
15478: IFTRUE 15487
15480: PUSH
15481: LD_VAR 0 2
15485: NOT
15486: OR
15487: IFTRUE 15496
15489: PUSH
15490: LD_VAR 0 3
15494: NOT
15495: OR
15496: IFFALSE 15500
// exit ;
15498: GO 16326
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15500: LD_ADDR_VAR 0 14
15504: PUSH
15505: LD_VAR 0 1
15509: PPUSH
15510: LD_VAR 0 2
15514: PPUSH
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_VAR 0 4
15524: PPUSH
15525: LD_VAR 0 5
15529: PUSH
15530: LD_INT 1
15532: ARRAY
15533: PPUSH
15534: CALL_OW 248
15538: PPUSH
15539: LD_INT 0
15541: PPUSH
15542: CALL 17607 0 6
15546: ST_TO_ADDR
// if not hexes then
15547: LD_VAR 0 14
15551: NOT
15552: IFFALSE 15556
// exit ;
15554: GO 16326
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15556: LD_ADDR_VAR 0 17
15560: PUSH
15561: LD_VAR 0 5
15565: PPUSH
15566: LD_INT 22
15568: PUSH
15569: LD_VAR 0 13
15573: PPUSH
15574: CALL_OW 255
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 2
15585: PUSH
15586: LD_INT 30
15588: PUSH
15589: LD_INT 0
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 30
15598: PUSH
15599: LD_INT 1
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 72
15619: ST_TO_ADDR
// for i = 1 to hexes do
15620: LD_ADDR_VAR 0 9
15624: PUSH
15625: DOUBLE
15626: LD_INT 1
15628: DEC
15629: ST_TO_ADDR
15630: LD_VAR 0 14
15634: PUSH
15635: FOR_TO
15636: IFFALSE 16324
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15638: LD_ADDR_VAR 0 13
15642: PUSH
15643: LD_VAR 0 14
15647: PUSH
15648: LD_VAR 0 9
15652: ARRAY
15653: PUSH
15654: LD_INT 1
15656: ARRAY
15657: PPUSH
15658: LD_VAR 0 14
15662: PUSH
15663: LD_VAR 0 9
15667: ARRAY
15668: PUSH
15669: LD_INT 2
15671: ARRAY
15672: PPUSH
15673: CALL_OW 428
15677: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15678: LD_VAR 0 14
15682: PUSH
15683: LD_VAR 0 9
15687: ARRAY
15688: PUSH
15689: LD_INT 1
15691: ARRAY
15692: PPUSH
15693: LD_VAR 0 14
15697: PUSH
15698: LD_VAR 0 9
15702: ARRAY
15703: PUSH
15704: LD_INT 2
15706: ARRAY
15707: PPUSH
15708: CALL_OW 351
15712: IFTRUE 15751
15714: PUSH
15715: LD_VAR 0 14
15719: PUSH
15720: LD_VAR 0 9
15724: ARRAY
15725: PUSH
15726: LD_INT 1
15728: ARRAY
15729: PPUSH
15730: LD_VAR 0 14
15734: PUSH
15735: LD_VAR 0 9
15739: ARRAY
15740: PUSH
15741: LD_INT 2
15743: ARRAY
15744: PPUSH
15745: CALL_OW 488
15749: NOT
15750: OR
15751: IFTRUE 15768
15753: PUSH
15754: LD_VAR 0 13
15758: PPUSH
15759: CALL_OW 247
15763: PUSH
15764: LD_INT 3
15766: EQUAL
15767: OR
15768: IFFALSE 15774
// exit ;
15770: POP
15771: POP
15772: GO 16326
// if not tmp then
15774: LD_VAR 0 13
15778: NOT
15779: IFFALSE 15783
// continue ;
15781: GO 15635
// result := true ;
15783: LD_ADDR_VAR 0 8
15787: PUSH
15788: LD_INT 1
15790: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15791: LD_VAR 0 6
15795: IFFALSE 15812
15797: PUSH
15798: LD_VAR 0 13
15802: PPUSH
15803: CALL_OW 247
15807: PUSH
15808: LD_INT 2
15810: EQUAL
15811: AND
15812: IFFALSE 15829
15814: PUSH
15815: LD_VAR 0 13
15819: PPUSH
15820: CALL_OW 263
15824: PUSH
15825: LD_INT 1
15827: EQUAL
15828: AND
15829: IFFALSE 15993
// begin if IsDrivenBy ( tmp ) then
15831: LD_VAR 0 13
15835: PPUSH
15836: CALL_OW 311
15840: IFFALSE 15844
// continue ;
15842: GO 15635
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15844: LD_VAR 0 6
15848: PPUSH
15849: LD_INT 3
15851: PUSH
15852: LD_INT 60
15854: PUSH
15855: EMPTY
15856: LIST
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 3
15864: PUSH
15865: LD_INT 55
15867: PUSH
15868: EMPTY
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PPUSH
15879: CALL_OW 72
15883: IFFALSE 15991
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15885: LD_ADDR_VAR 0 18
15889: PUSH
15890: LD_VAR 0 6
15894: PPUSH
15895: LD_INT 3
15897: PUSH
15898: LD_INT 60
15900: PUSH
15901: EMPTY
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: LD_INT 55
15913: PUSH
15914: EMPTY
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PPUSH
15925: CALL_OW 72
15929: PUSH
15930: LD_INT 1
15932: ARRAY
15933: ST_TO_ADDR
// if IsInUnit ( driver ) then
15934: LD_VAR 0 18
15938: PPUSH
15939: CALL_OW 310
15943: IFFALSE 15954
// ComExit ( driver ) ;
15945: LD_VAR 0 18
15949: PPUSH
15950: CALL 41597 0 1
// AddComEnterUnit ( driver , tmp ) ;
15954: LD_VAR 0 18
15958: PPUSH
15959: LD_VAR 0 13
15963: PPUSH
15964: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15968: LD_VAR 0 18
15972: PPUSH
15973: LD_VAR 0 7
15977: PPUSH
15978: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15982: LD_VAR 0 18
15986: PPUSH
15987: CALL_OW 181
// end ; continue ;
15991: GO 15635
// end ; if not cleaners or not tmp in cleaners then
15993: LD_VAR 0 6
15997: NOT
15998: IFTRUE 16013
16000: PUSH
16001: LD_VAR 0 13
16005: PUSH
16006: LD_VAR 0 6
16010: IN
16011: NOT
16012: OR
16013: IFFALSE 16322
// begin if dep then
16015: LD_VAR 0 17
16019: IFFALSE 16155
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16021: LD_ADDR_VAR 0 16
16025: PUSH
16026: LD_VAR 0 17
16030: PUSH
16031: LD_INT 1
16033: ARRAY
16034: PPUSH
16035: CALL_OW 250
16039: PPUSH
16040: LD_VAR 0 17
16044: PUSH
16045: LD_INT 1
16047: ARRAY
16048: PPUSH
16049: CALL_OW 254
16053: PPUSH
16054: LD_INT 5
16056: PPUSH
16057: CALL_OW 272
16061: PUSH
16062: LD_VAR 0 17
16066: PUSH
16067: LD_INT 1
16069: ARRAY
16070: PPUSH
16071: CALL_OW 251
16075: PPUSH
16076: LD_VAR 0 17
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: PPUSH
16085: CALL_OW 254
16089: PPUSH
16090: LD_INT 5
16092: PPUSH
16093: CALL_OW 273
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16102: LD_VAR 0 16
16106: PUSH
16107: LD_INT 1
16109: ARRAY
16110: PPUSH
16111: LD_VAR 0 16
16115: PUSH
16116: LD_INT 2
16118: ARRAY
16119: PPUSH
16120: CALL_OW 488
16124: IFFALSE 16155
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16126: LD_VAR 0 13
16130: PPUSH
16131: LD_VAR 0 16
16135: PUSH
16136: LD_INT 1
16138: ARRAY
16139: PPUSH
16140: LD_VAR 0 16
16144: PUSH
16145: LD_INT 2
16147: ARRAY
16148: PPUSH
16149: CALL_OW 111
// continue ;
16153: GO 15635
// end ; end ; r := GetDir ( tmp ) ;
16155: LD_ADDR_VAR 0 15
16159: PUSH
16160: LD_VAR 0 13
16164: PPUSH
16165: CALL_OW 254
16169: ST_TO_ADDR
// if r = 5 then
16170: LD_VAR 0 15
16174: PUSH
16175: LD_INT 5
16177: EQUAL
16178: IFFALSE 16188
// r := 0 ;
16180: LD_ADDR_VAR 0 15
16184: PUSH
16185: LD_INT 0
16187: ST_TO_ADDR
// for j = r to 5 do
16188: LD_ADDR_VAR 0 10
16192: PUSH
16193: DOUBLE
16194: LD_VAR 0 15
16198: DEC
16199: ST_TO_ADDR
16200: LD_INT 5
16202: PUSH
16203: FOR_TO
16204: IFFALSE 16320
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16206: LD_ADDR_VAR 0 11
16210: PUSH
16211: LD_VAR 0 13
16215: PPUSH
16216: CALL_OW 250
16220: PPUSH
16221: LD_VAR 0 10
16225: PPUSH
16226: LD_INT 2
16228: PPUSH
16229: CALL_OW 272
16233: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16234: LD_ADDR_VAR 0 12
16238: PUSH
16239: LD_VAR 0 13
16243: PPUSH
16244: CALL_OW 251
16248: PPUSH
16249: LD_VAR 0 10
16253: PPUSH
16254: LD_INT 2
16256: PPUSH
16257: CALL_OW 273
16261: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16262: LD_VAR 0 11
16266: PPUSH
16267: LD_VAR 0 12
16271: PPUSH
16272: CALL_OW 488
16276: IFFALSE 16295
16278: PUSH
16279: LD_VAR 0 11
16283: PPUSH
16284: LD_VAR 0 12
16288: PPUSH
16289: CALL_OW 428
16293: NOT
16294: AND
16295: IFFALSE 16318
// begin ComMoveXY ( tmp , _x , _y ) ;
16297: LD_VAR 0 13
16301: PPUSH
16302: LD_VAR 0 11
16306: PPUSH
16307: LD_VAR 0 12
16311: PPUSH
16312: CALL_OW 111
// break ;
16316: GO 16320
// end ; end ;
16318: GO 16203
16320: POP
16321: POP
// end ; end ;
16322: GO 15635
16324: POP
16325: POP
// end ;
16326: LD_VAR 0 8
16330: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16331: LD_INT 0
16333: PPUSH
// result := true ;
16334: LD_ADDR_VAR 0 3
16338: PUSH
16339: LD_INT 1
16341: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16342: LD_VAR 0 2
16346: PUSH
16347: LD_INT 24
16349: DOUBLE
16350: EQUAL
16351: IFTRUE 16361
16353: LD_INT 33
16355: DOUBLE
16356: EQUAL
16357: IFTRUE 16361
16359: GO 16386
16361: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16362: LD_ADDR_VAR 0 3
16366: PUSH
16367: LD_INT 32
16369: PPUSH
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 321
16379: PUSH
16380: LD_INT 2
16382: EQUAL
16383: ST_TO_ADDR
16384: GO 16702
16386: LD_INT 20
16388: DOUBLE
16389: EQUAL
16390: IFTRUE 16394
16392: GO 16419
16394: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: LD_INT 6
16402: PPUSH
16403: LD_VAR 0 1
16407: PPUSH
16408: CALL_OW 321
16412: PUSH
16413: LD_INT 2
16415: EQUAL
16416: ST_TO_ADDR
16417: GO 16702
16419: LD_INT 22
16421: DOUBLE
16422: EQUAL
16423: IFTRUE 16433
16425: LD_INT 36
16427: DOUBLE
16428: EQUAL
16429: IFTRUE 16433
16431: GO 16458
16433: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16434: LD_ADDR_VAR 0 3
16438: PUSH
16439: LD_INT 15
16441: PPUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: CALL_OW 321
16451: PUSH
16452: LD_INT 2
16454: EQUAL
16455: ST_TO_ADDR
16456: GO 16702
16458: LD_INT 30
16460: DOUBLE
16461: EQUAL
16462: IFTRUE 16466
16464: GO 16491
16466: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16467: LD_ADDR_VAR 0 3
16471: PUSH
16472: LD_INT 20
16474: PPUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 321
16484: PUSH
16485: LD_INT 2
16487: EQUAL
16488: ST_TO_ADDR
16489: GO 16702
16491: LD_INT 28
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16505
16497: LD_INT 21
16499: DOUBLE
16500: EQUAL
16501: IFTRUE 16505
16503: GO 16530
16505: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16506: LD_ADDR_VAR 0 3
16510: PUSH
16511: LD_INT 21
16513: PPUSH
16514: LD_VAR 0 1
16518: PPUSH
16519: CALL_OW 321
16523: PUSH
16524: LD_INT 2
16526: EQUAL
16527: ST_TO_ADDR
16528: GO 16702
16530: LD_INT 16
16532: DOUBLE
16533: EQUAL
16534: IFTRUE 16538
16536: GO 16563
16538: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16539: LD_ADDR_VAR 0 3
16543: PUSH
16544: LD_INT 84
16546: PPUSH
16547: LD_VAR 0 1
16551: PPUSH
16552: CALL_OW 321
16556: PUSH
16557: LD_INT 2
16559: EQUAL
16560: ST_TO_ADDR
16561: GO 16702
16563: LD_INT 19
16565: DOUBLE
16566: EQUAL
16567: IFTRUE 16577
16569: LD_INT 23
16571: DOUBLE
16572: EQUAL
16573: IFTRUE 16577
16575: GO 16602
16577: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16578: LD_ADDR_VAR 0 3
16582: PUSH
16583: LD_INT 83
16585: PPUSH
16586: LD_VAR 0 1
16590: PPUSH
16591: CALL_OW 321
16595: PUSH
16596: LD_INT 2
16598: EQUAL
16599: ST_TO_ADDR
16600: GO 16702
16602: LD_INT 17
16604: DOUBLE
16605: EQUAL
16606: IFTRUE 16610
16608: GO 16635
16610: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16611: LD_ADDR_VAR 0 3
16615: PUSH
16616: LD_INT 39
16618: PPUSH
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 321
16628: PUSH
16629: LD_INT 2
16631: EQUAL
16632: ST_TO_ADDR
16633: GO 16702
16635: LD_INT 18
16637: DOUBLE
16638: EQUAL
16639: IFTRUE 16643
16641: GO 16668
16643: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16644: LD_ADDR_VAR 0 3
16648: PUSH
16649: LD_INT 40
16651: PPUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 321
16661: PUSH
16662: LD_INT 2
16664: EQUAL
16665: ST_TO_ADDR
16666: GO 16702
16668: LD_INT 27
16670: DOUBLE
16671: EQUAL
16672: IFTRUE 16676
16674: GO 16701
16676: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16677: LD_ADDR_VAR 0 3
16681: PUSH
16682: LD_INT 35
16684: PPUSH
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 321
16694: PUSH
16695: LD_INT 2
16697: EQUAL
16698: ST_TO_ADDR
16699: GO 16702
16701: POP
// end ;
16702: LD_VAR 0 3
16706: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16707: LD_INT 0
16709: PPUSH
16710: PPUSH
16711: PPUSH
16712: PPUSH
16713: PPUSH
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// result := false ;
16720: LD_ADDR_VAR 0 6
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// if btype = b_depot then
16728: LD_VAR 0 2
16732: PUSH
16733: LD_INT 0
16735: EQUAL
16736: IFFALSE 16748
// begin result := true ;
16738: LD_ADDR_VAR 0 6
16742: PUSH
16743: LD_INT 1
16745: ST_TO_ADDR
// exit ;
16746: GO 17602
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16748: LD_VAR 0 1
16752: NOT
16753: IFTRUE 16778
16755: PUSH
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 266
16765: PUSH
16766: LD_INT 0
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: IN
16776: NOT
16777: OR
16778: IFTRUE 16787
16780: PUSH
16781: LD_VAR 0 2
16785: NOT
16786: OR
16787: IFTRUE 16823
16789: PUSH
16790: LD_VAR 0 5
16794: PUSH
16795: LD_INT 0
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: LD_INT 2
16803: PUSH
16804: LD_INT 3
16806: PUSH
16807: LD_INT 4
16809: PUSH
16810: LD_INT 5
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: IN
16821: NOT
16822: OR
16823: IFTRUE 16842
16825: PUSH
16826: LD_VAR 0 3
16830: PPUSH
16831: LD_VAR 0 4
16835: PPUSH
16836: CALL_OW 488
16840: NOT
16841: OR
16842: IFFALSE 16846
// exit ;
16844: GO 17602
// side := GetSide ( depot ) ;
16846: LD_ADDR_VAR 0 9
16850: PUSH
16851: LD_VAR 0 1
16855: PPUSH
16856: CALL_OW 255
16860: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16861: LD_VAR 0 9
16865: PPUSH
16866: LD_VAR 0 2
16870: PPUSH
16871: CALL 16331 0 2
16875: NOT
16876: IFFALSE 16880
// exit ;
16878: GO 17602
// pom := GetBase ( depot ) ;
16880: LD_ADDR_VAR 0 10
16884: PUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 274
16894: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16895: LD_ADDR_VAR 0 11
16899: PUSH
16900: LD_VAR 0 2
16904: PPUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 248
16914: PPUSH
16915: CALL_OW 450
16919: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16920: LD_VAR 0 10
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 275
16932: PUSH
16933: LD_VAR 0 11
16937: PUSH
16938: LD_INT 1
16940: ARRAY
16941: GREATEREQUAL
16942: IFFALSE 16968
16944: PUSH
16945: LD_VAR 0 10
16949: PPUSH
16950: LD_INT 2
16952: PPUSH
16953: CALL_OW 275
16957: PUSH
16958: LD_VAR 0 11
16962: PUSH
16963: LD_INT 2
16965: ARRAY
16966: GREATEREQUAL
16967: AND
16968: IFFALSE 16994
16970: PUSH
16971: LD_VAR 0 10
16975: PPUSH
16976: LD_INT 3
16978: PPUSH
16979: CALL_OW 275
16983: PUSH
16984: LD_VAR 0 11
16988: PUSH
16989: LD_INT 3
16991: ARRAY
16992: GREATEREQUAL
16993: AND
16994: NOT
16995: IFFALSE 16999
// exit ;
16997: GO 17602
// if GetBType ( depot ) = b_depot then
16999: LD_VAR 0 1
17003: PPUSH
17004: CALL_OW 266
17008: PUSH
17009: LD_INT 0
17011: EQUAL
17012: IFFALSE 17024
// dist := 28 else
17014: LD_ADDR_VAR 0 14
17018: PUSH
17019: LD_INT 28
17021: ST_TO_ADDR
17022: GO 17032
// dist := 36 ;
17024: LD_ADDR_VAR 0 14
17028: PUSH
17029: LD_INT 36
17031: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17032: LD_VAR 0 1
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: LD_VAR 0 4
17046: PPUSH
17047: CALL_OW 297
17051: PUSH
17052: LD_VAR 0 14
17056: GREATER
17057: IFFALSE 17061
// exit ;
17059: GO 17602
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17061: LD_ADDR_VAR 0 12
17065: PUSH
17066: LD_VAR 0 2
17070: PPUSH
17071: LD_VAR 0 3
17075: PPUSH
17076: LD_VAR 0 4
17080: PPUSH
17081: LD_VAR 0 5
17085: PPUSH
17086: LD_VAR 0 1
17090: PPUSH
17091: CALL_OW 248
17095: PPUSH
17096: LD_INT 0
17098: PPUSH
17099: CALL 17607 0 6
17103: ST_TO_ADDR
// if not hexes then
17104: LD_VAR 0 12
17108: NOT
17109: IFFALSE 17113
// exit ;
17111: GO 17602
// hex := GetHexInfo ( x , y ) ;
17113: LD_ADDR_VAR 0 15
17117: PUSH
17118: LD_VAR 0 3
17122: PPUSH
17123: LD_VAR 0 4
17127: PPUSH
17128: CALL_OW 546
17132: ST_TO_ADDR
// if hex [ 1 ] then
17133: LD_VAR 0 15
17137: PUSH
17138: LD_INT 1
17140: ARRAY
17141: IFFALSE 17145
// exit ;
17143: GO 17602
// height := hex [ 2 ] ;
17145: LD_ADDR_VAR 0 13
17149: PUSH
17150: LD_VAR 0 15
17154: PUSH
17155: LD_INT 2
17157: ARRAY
17158: ST_TO_ADDR
// for i = 1 to hexes do
17159: LD_ADDR_VAR 0 7
17163: PUSH
17164: DOUBLE
17165: LD_INT 1
17167: DEC
17168: ST_TO_ADDR
17169: LD_VAR 0 12
17173: PUSH
17174: FOR_TO
17175: IFFALSE 17519
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17177: LD_VAR 0 12
17181: PUSH
17182: LD_VAR 0 7
17186: ARRAY
17187: PUSH
17188: LD_INT 1
17190: ARRAY
17191: PPUSH
17192: LD_VAR 0 12
17196: PUSH
17197: LD_VAR 0 7
17201: ARRAY
17202: PUSH
17203: LD_INT 2
17205: ARRAY
17206: PPUSH
17207: CALL_OW 488
17211: NOT
17212: IFTRUE 17254
17214: PUSH
17215: LD_VAR 0 12
17219: PUSH
17220: LD_VAR 0 7
17224: ARRAY
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PPUSH
17230: LD_VAR 0 12
17234: PUSH
17235: LD_VAR 0 7
17239: ARRAY
17240: PUSH
17241: LD_INT 2
17243: ARRAY
17244: PPUSH
17245: CALL_OW 428
17249: PUSH
17250: LD_INT 0
17252: GREATER
17253: OR
17254: IFTRUE 17292
17256: PUSH
17257: LD_VAR 0 12
17261: PUSH
17262: LD_VAR 0 7
17266: ARRAY
17267: PUSH
17268: LD_INT 1
17270: ARRAY
17271: PPUSH
17272: LD_VAR 0 12
17276: PUSH
17277: LD_VAR 0 7
17281: ARRAY
17282: PUSH
17283: LD_INT 2
17285: ARRAY
17286: PPUSH
17287: CALL_OW 351
17291: OR
17292: IFFALSE 17298
// exit ;
17294: POP
17295: POP
17296: GO 17602
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17298: LD_ADDR_VAR 0 8
17302: PUSH
17303: LD_VAR 0 12
17307: PUSH
17308: LD_VAR 0 7
17312: ARRAY
17313: PUSH
17314: LD_INT 1
17316: ARRAY
17317: PPUSH
17318: LD_VAR 0 12
17322: PUSH
17323: LD_VAR 0 7
17327: ARRAY
17328: PUSH
17329: LD_INT 2
17331: ARRAY
17332: PPUSH
17333: CALL_OW 546
17337: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17338: LD_VAR 0 8
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: IFTRUE 17368
17348: PUSH
17349: LD_VAR 0 8
17353: PUSH
17354: LD_INT 2
17356: ARRAY
17357: PUSH
17358: LD_VAR 0 13
17362: PUSH
17363: LD_INT 2
17365: PLUS
17366: GREATER
17367: OR
17368: IFTRUE 17390
17370: PUSH
17371: LD_VAR 0 8
17375: PUSH
17376: LD_INT 2
17378: ARRAY
17379: PUSH
17380: LD_VAR 0 13
17384: PUSH
17385: LD_INT 2
17387: MINUS
17388: LESS
17389: OR
17390: IFTRUE 17458
17392: PUSH
17393: LD_VAR 0 8
17397: PUSH
17398: LD_INT 3
17400: ARRAY
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 8
17407: PUSH
17408: LD_INT 9
17410: PUSH
17411: LD_INT 10
17413: PUSH
17414: LD_INT 11
17416: PUSH
17417: LD_INT 12
17419: PUSH
17420: LD_INT 13
17422: PUSH
17423: LD_INT 16
17425: PUSH
17426: LD_INT 17
17428: PUSH
17429: LD_INT 18
17431: PUSH
17432: LD_INT 19
17434: PUSH
17435: LD_INT 20
17437: PUSH
17438: LD_INT 21
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: IN
17456: NOT
17457: OR
17458: IFTRUE 17471
17460: PUSH
17461: LD_VAR 0 8
17465: PUSH
17466: LD_INT 5
17468: ARRAY
17469: NOT
17470: OR
17471: IFTRUE 17511
17473: PUSH
17474: LD_VAR 0 8
17478: PUSH
17479: LD_INT 6
17481: ARRAY
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: LD_INT 2
17488: PUSH
17489: LD_INT 7
17491: PUSH
17492: LD_INT 9
17494: PUSH
17495: LD_INT 10
17497: PUSH
17498: LD_INT 11
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: IN
17509: NOT
17510: OR
17511: IFFALSE 17517
// exit ;
17513: POP
17514: POP
17515: GO 17602
// end ;
17517: GO 17174
17519: POP
17520: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17521: LD_VAR 0 9
17525: PPUSH
17526: LD_VAR 0 3
17530: PPUSH
17531: LD_VAR 0 4
17535: PPUSH
17536: LD_INT 20
17538: PPUSH
17539: CALL 9421 0 4
17543: PUSH
17544: LD_INT 4
17546: ARRAY
17547: IFFALSE 17551
// exit ;
17549: GO 17602
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17551: LD_VAR 0 2
17555: PUSH
17556: LD_INT 29
17558: PUSH
17559: LD_INT 30
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: IN
17566: IFFALSE 17590
17568: PUSH
17569: LD_VAR 0 3
17573: PPUSH
17574: LD_VAR 0 4
17578: PPUSH
17579: LD_VAR 0 9
17583: PPUSH
17584: CALL_OW 440
17588: NOT
17589: AND
17590: IFFALSE 17594
// exit ;
17592: GO 17602
// result := true ;
17594: LD_ADDR_VAR 0 6
17598: PUSH
17599: LD_INT 1
17601: ST_TO_ADDR
// end ;
17602: LD_VAR 0 6
17606: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
// result = [ ] ;
17667: LD_ADDR_VAR 0 7
17671: PUSH
17672: EMPTY
17673: ST_TO_ADDR
// temp_list = [ ] ;
17674: LD_ADDR_VAR 0 9
17678: PUSH
17679: EMPTY
17680: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17681: LD_VAR 0 4
17685: PUSH
17686: LD_INT 0
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: LD_INT 3
17697: PUSH
17698: LD_INT 4
17700: PUSH
17701: LD_INT 5
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: IN
17712: NOT
17713: IFTRUE 17756
17715: PUSH
17716: LD_VAR 0 1
17720: PUSH
17721: LD_INT 0
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: IN
17731: IFFALSE 17755
17733: PUSH
17734: LD_VAR 0 5
17738: PUSH
17739: LD_INT 1
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: IN
17753: NOT
17754: AND
17755: OR
17756: IFFALSE 17760
// exit ;
17758: GO 36159
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17760: LD_VAR 0 1
17764: PUSH
17765: LD_INT 6
17767: PUSH
17768: LD_INT 7
17770: PUSH
17771: LD_INT 8
17773: PUSH
17774: LD_INT 13
17776: PUSH
17777: LD_INT 12
17779: PUSH
17780: LD_INT 15
17782: PUSH
17783: LD_INT 11
17785: PUSH
17786: LD_INT 14
17788: PUSH
17789: LD_INT 10
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: IN
17803: IFFALSE 17813
// btype = b_lab ;
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: LD_INT 6
17812: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17813: LD_VAR 0 6
17817: PUSH
17818: LD_INT 0
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: LIST
17831: IN
17832: NOT
17833: IFTRUE 17901
17835: PUSH
17836: LD_VAR 0 1
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: LD_INT 3
17852: PUSH
17853: LD_INT 6
17855: PUSH
17856: LD_INT 36
17858: PUSH
17859: LD_INT 4
17861: PUSH
17862: LD_INT 5
17864: PUSH
17865: LD_INT 31
17867: PUSH
17868: LD_INT 32
17870: PUSH
17871: LD_INT 33
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: IN
17887: NOT
17888: IFFALSE 17900
17890: PUSH
17891: LD_VAR 0 6
17895: PUSH
17896: LD_INT 1
17898: EQUAL
17899: AND
17900: OR
17901: IFTRUE 17933
17903: PUSH
17904: LD_VAR 0 1
17908: PUSH
17909: LD_INT 2
17911: PUSH
17912: LD_INT 3
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: IN
17919: NOT
17920: IFFALSE 17932
17922: PUSH
17923: LD_VAR 0 6
17927: PUSH
17928: LD_INT 2
17930: EQUAL
17931: AND
17932: OR
17933: IFFALSE 17943
// mode = 0 ;
17935: LD_ADDR_VAR 0 6
17939: PUSH
17940: LD_INT 0
17942: ST_TO_ADDR
// case mode of 0 :
17943: LD_VAR 0 6
17947: PUSH
17948: LD_INT 0
17950: DOUBLE
17951: EQUAL
17952: IFTRUE 17956
17954: GO 29409
17956: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17957: LD_ADDR_VAR 0 11
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: LD_INT 0
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 0
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 1
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: LD_INT 1
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: LD_INT 0
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 1
18026: NEG
18027: PUSH
18028: LD_INT 1
18030: NEG
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 1
18038: NEG
18039: PUSH
18040: LD_INT 2
18042: NEG
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: LD_INT 2
18053: NEG
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 0
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: LD_INT 3
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: LD_INT 3
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18150: LD_ADDR_VAR 0 12
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: LD_INT 0
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 1
18219: NEG
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 2
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: NEG
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 3
18307: NEG
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 3
18318: NEG
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18346: LD_ADDR_VAR 0 13
18350: PUSH
18351: LD_INT 0
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 1
18366: NEG
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 1
18404: NEG
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 1
18415: NEG
18416: PUSH
18417: LD_INT 1
18419: NEG
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 1
18427: NEG
18428: PUSH
18429: LD_INT 2
18431: NEG
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: LD_INT 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 2
18469: NEG
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 2
18481: NEG
18482: PUSH
18483: LD_INT 2
18485: NEG
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 2
18493: NEG
18494: PUSH
18495: LD_INT 3
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 3
18505: NEG
18506: PUSH
18507: LD_INT 2
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 3
18517: NEG
18518: PUSH
18519: LD_INT 3
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18545: LD_ADDR_VAR 0 14
18549: PUSH
18550: LD_INT 0
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 0
18562: PUSH
18563: LD_INT 1
18565: NEG
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: LD_INT 0
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 0
18593: PUSH
18594: LD_INT 1
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 1
18603: NEG
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: LD_INT 1
18618: NEG
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 1
18626: NEG
18627: PUSH
18628: LD_INT 2
18630: NEG
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 0
18638: PUSH
18639: LD_INT 2
18641: NEG
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 0
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: NEG
18692: PUSH
18693: LD_INT 3
18695: NEG
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 0
18703: PUSH
18704: LD_INT 3
18706: NEG
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 1
18714: PUSH
18715: LD_INT 2
18717: NEG
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18741: LD_ADDR_VAR 0 15
18745: PUSH
18746: LD_INT 0
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: LD_INT 1
18761: NEG
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: LD_INT 1
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 1
18799: NEG
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: LD_INT 1
18814: NEG
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 1
18825: NEG
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 1
18853: NEG
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 2
18875: NEG
18876: PUSH
18877: LD_INT 1
18879: NEG
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 2
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 3
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 3
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18934: LD_ADDR_VAR 0 16
18938: PUSH
18939: LD_INT 0
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 1
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 1
19015: NEG
19016: PUSH
19017: LD_INT 2
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 2
19057: NEG
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: NEG
19070: PUSH
19071: LD_INT 2
19073: NEG
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 3
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 3
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: LD_INT 3
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19127: LD_ADDR_VAR 0 17
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: LD_INT 0
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: NEG
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: LD_INT 2
19212: NEG
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: LD_INT 2
19223: NEG
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 1
19292: NEG
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 2
19303: NEG
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: NEG
19315: PUSH
19316: LD_INT 1
19318: NEG
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 2
19326: NEG
19327: PUSH
19328: LD_INT 2
19330: NEG
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19357: LD_ADDR_VAR 0 18
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: LD_INT 1
19377: NEG
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 1
19430: NEG
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 2
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: NEG
19523: PUSH
19524: LD_INT 1
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 2
19533: NEG
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: LD_INT 1
19548: NEG
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: NEG
19557: PUSH
19558: LD_INT 2
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19587: LD_ADDR_VAR 0 19
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: NEG
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: NEG
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: LD_INT 2
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: LD_INT 2
19683: NEG
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 2
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: LD_INT 2
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: LD_INT 2
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 2
19763: NEG
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: NEG
19775: PUSH
19776: LD_INT 1
19778: NEG
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 2
19786: NEG
19787: PUSH
19788: LD_INT 2
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19817: LD_ADDR_VAR 0 20
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 1
19875: NEG
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: NEG
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: LD_INT 2
19902: NEG
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 1
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 0
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: NEG
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: NEG
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: NEG
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 2
20016: NEG
20017: PUSH
20018: LD_INT 2
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20047: LD_ADDR_VAR 0 21
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 0
20064: PUSH
20065: LD_INT 1
20067: NEG
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: PUSH
20086: LD_INT 1
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: NEG
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: LD_INT 2
20132: NEG
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 2
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: LD_INT 1
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: NEG
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 2
20246: NEG
20247: PUSH
20248: LD_INT 2
20250: NEG
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20277: LD_ADDR_VAR 0 22
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 1
20335: NEG
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 1
20346: NEG
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: LD_INT 2
20362: NEG
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: LD_INT 2
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 2
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 2
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 2
20453: NEG
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 2
20464: NEG
20465: PUSH
20466: LD_INT 1
20468: NEG
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 2
20476: NEG
20477: PUSH
20478: LD_INT 2
20480: NEG
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20507: LD_ADDR_VAR 0 23
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: NEG
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: LD_INT 2
20592: NEG
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: LD_INT 2
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 2
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 2
20642: PUSH
20643: LD_INT 2
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: LD_INT 2
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 2
20683: NEG
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: NEG
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 2
20706: NEG
20707: PUSH
20708: LD_INT 2
20710: NEG
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 2
20718: NEG
20719: PUSH
20720: LD_INT 3
20722: NEG
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: LD_INT 3
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: LD_INT 2
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: LD_INT 1
20756: NEG
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20787: LD_ADDR_VAR 0 24
20791: PUSH
20792: LD_INT 0
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 0
20804: PUSH
20805: LD_INT 1
20807: NEG
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: LD_INT 1
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: LD_INT 1
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: NEG
20857: PUSH
20858: LD_INT 1
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: NEG
20869: PUSH
20870: LD_INT 2
20872: NEG
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: LD_INT 2
20883: NEG
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 2
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: NEG
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: LD_INT 0
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: NEG
20975: PUSH
20976: LD_INT 1
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 2
20986: NEG
20987: PUSH
20988: LD_INT 2
20990: NEG
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: LD_INT 2
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 3
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 3
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21063: LD_ADDR_VAR 0 25
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: LD_INT 2
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 2
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: NEG
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 2
21250: NEG
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: NEG
21263: PUSH
21264: LD_INT 2
21266: NEG
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 3
21274: PUSH
21275: LD_INT 1
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 3
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 2
21294: PUSH
21295: LD_INT 3
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 3
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21337: LD_ADDR_VAR 0 26
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 0
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 1
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 1
21406: NEG
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: NEG
21419: PUSH
21420: LD_INT 2
21422: NEG
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: LD_INT 2
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: NEG
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 2
21513: NEG
21514: PUSH
21515: LD_INT 0
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 2
21524: NEG
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 2
21536: NEG
21537: PUSH
21538: LD_INT 2
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 3
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: NEG
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21613: LD_ADDR_VAR 0 27
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 0
21630: PUSH
21631: LD_INT 1
21633: NEG
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: LD_INT 2
21698: NEG
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: LD_INT 2
21709: NEG
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: NEG
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: NEG
21813: PUSH
21814: LD_INT 2
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: NEG
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 2
21835: NEG
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 3
21846: NEG
21847: PUSH
21848: LD_INT 1
21850: NEG
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 3
21858: NEG
21859: PUSH
21860: LD_INT 2
21862: NEG
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21893: LD_ADDR_VAR 0 28
21897: PUSH
21898: LD_INT 0
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 1
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 1
21962: NEG
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: LD_INT 2
21989: NEG
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 2
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: NEG
22081: PUSH
22082: LD_INT 1
22084: NEG
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 2
22092: NEG
22093: PUSH
22094: LD_INT 2
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: NEG
22105: PUSH
22106: LD_INT 3
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 3
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 3
22128: NEG
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 3
22140: NEG
22141: PUSH
22142: LD_INT 2
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22175: LD_ADDR_VAR 0 29
22179: PUSH
22180: LD_INT 0
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 0
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: NEG
22234: PUSH
22235: LD_INT 0
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 1
22244: NEG
22245: PUSH
22246: LD_INT 1
22248: NEG
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: LD_INT 2
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 0
22268: PUSH
22269: LD_INT 2
22271: NEG
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 2
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: NEG
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: NEG
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 2
22365: NEG
22366: PUSH
22367: LD_INT 3
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 1
22380: NEG
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 3
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 3
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 3
22419: NEG
22420: PUSH
22421: LD_INT 2
22423: NEG
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22454: LD_ADDR_VAR 0 30
22458: PUSH
22459: LD_INT 0
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: LD_INT 1
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 1
22512: NEG
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 2
22539: NEG
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: LD_INT 2
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 2
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: LD_INT 2
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 2
22620: NEG
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: LD_INT 3
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 3
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: LD_INT 3
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: NEG
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 3
22697: NEG
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22732: LD_ADDR_VAR 0 31
22736: PUSH
22737: LD_INT 0
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: LD_INT 2
22817: NEG
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: LD_INT 2
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: PUSH
22867: LD_INT 2
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: NEG
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 2
22909: NEG
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: LD_INT 3
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 2
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 3
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 1
22964: NEG
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 3
22975: NEG
22976: PUSH
22977: LD_INT 2
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23010: LD_ADDR_VAR 0 32
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 1
23079: NEG
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: LD_INT 2
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 2
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: LD_INT 2
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: NEG
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: NEG
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: LD_INT 3
23203: NEG
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 3
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: LD_INT 3
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 2
23242: NEG
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 3
23253: NEG
23254: PUSH
23255: LD_INT 1
23257: NEG
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23288: LD_ADDR_VAR 0 33
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: NEG
23358: PUSH
23359: LD_INT 1
23361: NEG
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: LD_INT 2
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: LD_INT 2
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: NEG
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: NEG
23467: PUSH
23468: LD_INT 2
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: LD_INT 3
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 3
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 3
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 1
23521: NEG
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 3
23532: NEG
23533: PUSH
23534: LD_INT 2
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23567: LD_ADDR_VAR 0 34
23571: PUSH
23572: LD_INT 0
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: LD_INT 1
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 1
23636: NEG
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: LD_INT 2
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: LD_INT 2
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 2
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 2
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: LD_INT 1
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 2
23723: NEG
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: NEG
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 2
23746: NEG
23747: PUSH
23748: LD_INT 2
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: LD_INT 3
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: LD_INT 2
23773: NEG
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 3
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 2
23791: PUSH
23792: LD_INT 3
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 2
23801: NEG
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 3
23812: NEG
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23847: LD_ADDR_VAR 0 35
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: LD_INT 0
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: LD_INT 1
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 1
23905: NEG
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: LD_INT 1
23920: NEG
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 2
23938: NEG
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23959: LD_ADDR_VAR 0 36
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: NEG
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 2
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24071: LD_ADDR_VAR 0 37
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: NEG
24141: PUSH
24142: LD_INT 1
24144: NEG
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24183: LD_ADDR_VAR 0 38
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: NEG
24242: PUSH
24243: LD_INT 0
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 1
24252: NEG
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24295: LD_ADDR_VAR 0 39
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: NEG
24365: PUSH
24366: LD_INT 1
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 1
24376: NEG
24377: PUSH
24378: LD_INT 2
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24407: LD_ADDR_VAR 0 40
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24519: LD_ADDR_VAR 0 41
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: LD_INT 1
24539: NEG
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: NEG
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: LD_INT 3
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 3
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 3
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 3
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 3
24762: PUSH
24763: LD_INT 3
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: LD_INT 3
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: NEG
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 3
24793: NEG
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 3
24804: NEG
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 3
24816: NEG
24817: PUSH
24818: LD_INT 2
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 3
24828: NEG
24829: PUSH
24830: LD_INT 3
24832: NEG
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24869: LD_ADDR_VAR 0 42
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 2
24965: NEG
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: LD_INT 2
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 2
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 2
25035: NEG
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 2
25047: NEG
25048: PUSH
25049: LD_INT 2
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 3
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: LD_INT 3
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 3
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: PUSH
25095: LD_INT 2
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: LD_INT 3
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 2
25125: PUSH
25126: LD_INT 3
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 3
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: LD_INT 3
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 3
25166: NEG
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 3
25178: NEG
25179: PUSH
25180: LD_INT 3
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25219: LD_ADDR_VAR 0 43
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: LD_INT 2
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 2
25396: NEG
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: LD_INT 3
25412: NEG
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 3
25423: NEG
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 3
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 3
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 3
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 3
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 2
25504: NEG
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 3
25515: NEG
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 3
25526: NEG
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25567: LD_ADDR_VAR 0 44
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: LD_INT 2
25652: NEG
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: NEG
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: NEG
25758: PUSH
25759: LD_INT 3
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: LD_INT 1
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 3
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 3
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 3
25810: PUSH
25811: LD_INT 3
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: LD_INT 3
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: NEG
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 3
25841: NEG
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 3
25852: NEG
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 3
25864: NEG
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 3
25876: NEG
25877: PUSH
25878: LD_INT 3
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25917: LD_ADDR_VAR 0 45
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: LD_INT 2
26013: NEG
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: LD_INT 2
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 1
26072: NEG
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: NEG
26108: PUSH
26109: LD_INT 3
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: LD_INT 3
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 3
26134: NEG
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 3
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 3
26163: PUSH
26164: LD_INT 3
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: LD_INT 3
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: LD_INT 3
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 3
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 1
26203: NEG
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 3
26214: NEG
26215: PUSH
26216: LD_INT 2
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 3
26226: NEG
26227: PUSH
26228: LD_INT 3
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26267: LD_ADDR_VAR 0 46
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: NEG
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 2
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 2
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: NEG
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 2
26444: NEG
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: LD_INT 3
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 3
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: LD_INT 1
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 3
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 3
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 1
26521: PUSH
26522: LD_INT 3
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 3
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 2
26552: NEG
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 3
26563: NEG
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 3
26574: NEG
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26615: LD_ADDR_VAR 0 47
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 2
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: NEG
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26766: LD_ADDR_VAR 0 48
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: NEG
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 2
26851: NEG
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: LD_INT 2
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26913: LD_ADDR_VAR 0 49
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 1
26982: NEG
26983: PUSH
26984: LD_INT 1
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 1
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 2
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27057: LD_ADDR_VAR 0 50
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: NEG
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27201: LD_ADDR_VAR 0 51
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: LD_INT 2
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: NEG
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27348: LD_ADDR_VAR 0 52
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: LD_INT 2
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 2
27452: NEG
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 2
27463: NEG
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: NEG
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27499: LD_ADDR_VAR 0 53
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: LD_INT 2
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: LD_INT 2
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: NEG
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 2
27698: NEG
27699: PUSH
27700: LD_INT 2
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27729: LD_ADDR_VAR 0 54
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: LD_INT 2
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 1
27894: NEG
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: NEG
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: NEG
27929: PUSH
27930: LD_INT 2
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27959: LD_ADDR_VAR 0 55
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 0
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: LD_INT 1
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: LD_INT 2
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 2
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 2
28094: PUSH
28095: LD_INT 2
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: NEG
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 2
28158: NEG
28159: PUSH
28160: LD_INT 2
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28189: LD_ADDR_VAR 0 56
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: LD_INT 2
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 2
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 2
28324: PUSH
28325: LD_INT 2
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: LD_INT 2
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: LD_INT 2
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 2
28388: NEG
28389: PUSH
28390: LD_INT 2
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28419: LD_ADDR_VAR 0 57
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: LD_INT 2
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 2
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 2
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 2
28554: PUSH
28555: LD_INT 2
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: LD_INT 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 2
28595: NEG
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: NEG
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: LD_INT 2
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28649: LD_ADDR_VAR 0 58
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 2
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 2
28848: NEG
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28879: LD_ADDR_VAR 0 59
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: LD_INT 1
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28967: LD_ADDR_VAR 0 60
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: LD_INT 1
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: LD_INT 1
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29055: LD_ADDR_VAR 0 61
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 1
29124: NEG
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29143: LD_ADDR_VAR 0 62
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 1
29212: NEG
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29231: LD_ADDR_VAR 0 63
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 1
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29319: LD_ADDR_VAR 0 64
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
// end ; 1 :
29407: GO 35304
29409: LD_INT 1
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 32040
29417: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29418: LD_ADDR_VAR 0 11
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 3
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 3
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 2
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29462: LD_ADDR_VAR 0 12
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 3
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 3
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29503: LD_ADDR_VAR 0 13
29507: PUSH
29508: LD_INT 3
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: LD_INT 3
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 3
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29543: LD_ADDR_VAR 0 14
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: LD_INT 3
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29584: LD_ADDR_VAR 0 15
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 3
29602: NEG
29603: PUSH
29604: LD_INT 0
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: NEG
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29628: LD_ADDR_VAR 0 16
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 3
29647: NEG
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: NEG
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29674: LD_ADDR_VAR 0 17
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: LD_INT 2
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: LIST
29717: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29718: LD_ADDR_VAR 0 18
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 3
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 3
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29759: LD_ADDR_VAR 0 19
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29799: LD_ADDR_VAR 0 20
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: LD_INT 3
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29840: LD_ADDR_VAR 0 21
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 3
29858: NEG
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 3
29869: NEG
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: LIST
29883: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29884: LD_ADDR_VAR 0 22
29888: PUSH
29889: LD_INT 2
29891: NEG
29892: PUSH
29893: LD_INT 3
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 3
29903: NEG
29904: PUSH
29905: LD_INT 2
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 3
29915: NEG
29916: PUSH
29917: LD_INT 3
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29930: LD_ADDR_VAR 0 23
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 3
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 4
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 3
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29974: LD_ADDR_VAR 0 24
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 4
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30015: LD_ADDR_VAR 0 25
30019: PUSH
30020: LD_INT 3
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 4
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: LD_INT 4
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30055: LD_ADDR_VAR 0 26
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 4
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30096: LD_ADDR_VAR 0 27
30100: PUSH
30101: LD_INT 3
30103: NEG
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 3
30114: NEG
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 4
30125: NEG
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30140: LD_ADDR_VAR 0 28
30144: PUSH
30145: LD_INT 3
30147: NEG
30148: PUSH
30149: LD_INT 3
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 3
30159: NEG
30160: PUSH
30161: LD_INT 4
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 4
30171: NEG
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30186: LD_ADDR_VAR 0 29
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: LD_INT 3
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: LD_INT 3
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 2
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 1
30227: NEG
30228: PUSH
30229: LD_INT 4
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 4
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 3
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 5
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 5
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: LD_INT 4
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: LD_INT 6
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 6
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: LD_INT 5
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30341: LD_ADDR_VAR 0 30
30345: PUSH
30346: LD_INT 2
30348: PUSH
30349: LD_INT 1
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 4
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 4
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 4
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 5
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 5
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 5
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 6
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 6
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30484: LD_ADDR_VAR 0 31
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: PUSH
30502: LD_INT 3
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 4
30521: PUSH
30522: LD_INT 3
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 4
30531: PUSH
30532: LD_INT 4
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: LD_INT 4
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 5
30551: PUSH
30552: LD_INT 4
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 5
30561: PUSH
30562: LD_INT 5
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 4
30571: PUSH
30572: LD_INT 5
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 6
30581: PUSH
30582: LD_INT 5
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 6
30591: PUSH
30592: LD_INT 6
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 5
30601: PUSH
30602: LD_INT 6
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30623: LD_ADDR_VAR 0 32
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: LD_INT 3
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: LD_INT 3
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 2
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: LD_INT 4
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 4
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 5
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 5
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: LD_INT 4
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: LD_INT 6
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: LD_INT 6
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 1
30743: NEG
30744: PUSH
30745: LD_INT 5
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30766: LD_ADDR_VAR 0 33
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: NEG
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 3
30807: NEG
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 4
30818: NEG
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 4
30829: NEG
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 4
30841: NEG
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 5
30852: NEG
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 5
30863: NEG
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 5
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 6
30886: NEG
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 6
30897: NEG
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30921: LD_ADDR_VAR 0 34
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 3
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: NEG
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 3
30952: NEG
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: LD_INT 4
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 4
30976: NEG
30977: PUSH
30978: LD_INT 3
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 4
30988: NEG
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 4
31000: NEG
31001: PUSH
31002: LD_INT 5
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 5
31012: NEG
31013: PUSH
31014: LD_INT 4
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 5
31024: NEG
31025: PUSH
31026: LD_INT 5
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 5
31036: NEG
31037: PUSH
31038: LD_INT 6
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 6
31048: NEG
31049: PUSH
31050: LD_INT 5
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 6
31060: NEG
31061: PUSH
31062: LD_INT 6
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31084: LD_ADDR_VAR 0 41
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: LD_INT 3
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: LD_INT 2
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31128: LD_ADDR_VAR 0 42
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31169: LD_ADDR_VAR 0 43
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 3
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31209: LD_ADDR_VAR 0 44
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31250: LD_ADDR_VAR 0 45
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 3
31279: NEG
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31294: LD_ADDR_VAR 0 46
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: LD_INT 2
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: LD_INT 3
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31340: LD_ADDR_VAR 0 47
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31373: LD_ADDR_VAR 0 48
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 2
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31404: LD_ADDR_VAR 0 49
31408: PUSH
31409: LD_INT 3
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 3
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31433: LD_ADDR_VAR 0 50
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: LD_INT 3
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31462: LD_ADDR_VAR 0 51
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 2
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31493: LD_ADDR_VAR 0 52
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: LD_INT 2
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31526: LD_ADDR_VAR 0 53
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 3
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 0
31545: PUSH
31546: LD_INT 3
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31570: LD_ADDR_VAR 0 54
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31611: LD_ADDR_VAR 0 55
31615: PUSH
31616: LD_INT 3
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 3
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: LD_INT 3
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31651: LD_ADDR_VAR 0 56
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 3
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31692: LD_ADDR_VAR 0 57
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 3
31710: NEG
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 3
31721: NEG
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31736: LD_ADDR_VAR 0 58
31740: PUSH
31741: LD_INT 2
31743: NEG
31744: PUSH
31745: LD_INT 3
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: NEG
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31782: LD_ADDR_VAR 0 59
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 2
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31826: LD_ADDR_VAR 0 60
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31867: LD_ADDR_VAR 0 61
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31907: LD_ADDR_VAR 0 62
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31948: LD_ADDR_VAR 0 63
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: NEG
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: LIST
31991: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31992: LD_ADDR_VAR 0 64
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: NEG
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
// end ; 2 :
32038: GO 35304
32040: LD_INT 2
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 35303
32048: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32049: LD_ADDR_VAR 0 29
32053: PUSH
32054: LD_INT 4
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 4
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 5
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 5
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 4
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 3
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: PUSH
32129: LD_INT 2
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 5
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 3
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 4
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 4
32179: PUSH
32180: LD_INT 4
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: LD_INT 4
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 3
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 4
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: LD_INT 4
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: LD_INT 3
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: LD_INT 4
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 5
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 5
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 4
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: LD_INT 3
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 5
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: LD_INT 3
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 3
32332: NEG
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 3
32343: NEG
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 4
32388: NEG
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 4
32399: NEG
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 4
32411: NEG
32412: PUSH
32413: LD_INT 2
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 4
32434: NEG
32435: PUSH
32436: LD_INT 4
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 4
32446: NEG
32447: PUSH
32448: LD_INT 5
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 3
32458: NEG
32459: PUSH
32460: LD_INT 4
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 3
32470: NEG
32471: PUSH
32472: LD_INT 3
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 4
32482: NEG
32483: PUSH
32484: LD_INT 3
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 5
32494: NEG
32495: PUSH
32496: LD_INT 4
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 5
32506: NEG
32507: PUSH
32508: LD_INT 5
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 3
32518: NEG
32519: PUSH
32520: LD_INT 5
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 5
32530: NEG
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32587: LD_ADDR_VAR 0 30
32591: PUSH
32592: LD_INT 4
32594: PUSH
32595: LD_INT 4
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 4
32604: PUSH
32605: LD_INT 3
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 5
32614: PUSH
32615: LD_INT 4
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 5
32624: PUSH
32625: LD_INT 5
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: LD_INT 5
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 3
32644: PUSH
32645: LD_INT 4
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: LD_INT 3
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 5
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 3
32674: PUSH
32675: LD_INT 5
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 3
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 3
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 4
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: LD_INT 4
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: LD_INT 4
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 4
32777: NEG
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 4
32788: NEG
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: NEG
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 4
32822: NEG
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 5
32833: NEG
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 5
32844: NEG
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 5
32856: NEG
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 3
32868: NEG
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 3
32879: NEG
32880: PUSH
32881: LD_INT 3
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 3
32891: NEG
32892: PUSH
32893: LD_INT 4
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 2
32903: NEG
32904: PUSH
32905: LD_INT 3
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 2
32915: NEG
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 3
32927: NEG
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 4
32939: NEG
32940: PUSH
32941: LD_INT 3
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 4
32951: NEG
32952: PUSH
32953: LD_INT 4
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: NEG
32964: PUSH
32965: LD_INT 4
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 4
32975: NEG
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: LD_INT 4
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 5
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 4
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: LD_INT 3
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: LD_INT 3
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 5
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 3
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: LD_INT 5
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33134: LD_ADDR_VAR 0 31
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 4
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 3
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: LD_INT 4
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: LD_INT 5
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: LD_INT 5
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: LD_INT 4
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 5
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: LD_INT 3
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 3
33234: NEG
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 3
33245: NEG
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: NEG
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 2
33268: NEG
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 4
33290: NEG
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 4
33301: NEG
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 4
33313: NEG
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 4
33336: NEG
33337: PUSH
33338: LD_INT 4
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 4
33348: NEG
33349: PUSH
33350: LD_INT 5
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 3
33360: NEG
33361: PUSH
33362: LD_INT 4
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 3
33372: NEG
33373: PUSH
33374: LD_INT 3
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 4
33384: NEG
33385: PUSH
33386: LD_INT 3
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 5
33396: NEG
33397: PUSH
33398: LD_INT 4
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 5
33408: NEG
33409: PUSH
33410: LD_INT 5
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 3
33420: NEG
33421: PUSH
33422: LD_INT 5
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 5
33432: NEG
33433: PUSH
33434: LD_INT 3
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 3
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 4
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: LD_INT 3
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: LD_INT 2
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 3
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: LD_INT 4
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 2
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: LD_INT 4
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 4
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 5
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 4
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 5
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33684: LD_ADDR_VAR 0 32
33688: PUSH
33689: LD_INT 4
33691: NEG
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 4
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 3
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 3
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 4
33736: NEG
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 5
33747: NEG
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 5
33758: NEG
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 5
33770: NEG
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: NEG
33783: PUSH
33784: LD_INT 2
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 3
33793: NEG
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 3
33805: NEG
33806: PUSH
33807: LD_INT 4
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: LD_INT 3
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 4
33853: NEG
33854: PUSH
33855: LD_INT 3
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 4
33865: NEG
33866: PUSH
33867: LD_INT 4
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 4
33889: NEG
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: LD_INT 4
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: LD_INT 5
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: LD_INT 4
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: LD_INT 3
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 3
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: LD_INT 4
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 5
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: LD_INT 3
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: LD_INT 5
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 4
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 4
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 2
34075: PUSH
34076: LD_INT 2
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 4
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 4
34096: PUSH
34097: LD_INT 4
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 4
34106: PUSH
34107: LD_INT 3
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 5
34116: PUSH
34117: LD_INT 4
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 5
34126: PUSH
34127: LD_INT 5
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 4
34136: PUSH
34137: LD_INT 5
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 3
34146: PUSH
34147: LD_INT 4
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 5
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: LD_INT 5
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34231: LD_ADDR_VAR 0 33
34235: PUSH
34236: LD_INT 4
34238: NEG
34239: PUSH
34240: LD_INT 4
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 4
34250: NEG
34251: PUSH
34252: LD_INT 5
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 3
34262: NEG
34263: PUSH
34264: LD_INT 4
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 3
34274: NEG
34275: PUSH
34276: LD_INT 3
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 4
34286: NEG
34287: PUSH
34288: LD_INT 3
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 5
34298: NEG
34299: PUSH
34300: LD_INT 4
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 5
34310: NEG
34311: PUSH
34312: LD_INT 5
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: LD_INT 5
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 5
34334: NEG
34335: PUSH
34336: LD_INT 3
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 3
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: LD_INT 4
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: LD_INT 3
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: LD_INT 3
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 4
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 4
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 4
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 4
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 5
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 5
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 4
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 3
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 3
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 5
34531: PUSH
34532: LD_INT 2
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 3
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: LD_INT 3
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 4
34571: PUSH
34572: LD_INT 4
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 3
34581: PUSH
34582: LD_INT 4
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 4
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: LD_INT 4
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: LD_INT 4
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 3
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: LD_INT 4
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 5
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 5
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 4
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: PUSH
34704: LD_INT 5
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: NEG
34714: PUSH
34715: LD_INT 3
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34769: LD_ADDR_VAR 0 34
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 4
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 5
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: LD_INT 4
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: LD_INT 3
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 3
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: LD_INT 4
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: LD_INT 5
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: LD_INT 3
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: NEG
34867: PUSH
34868: LD_INT 5
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 3
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 3
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 4
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 4
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 4
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 4
34971: PUSH
34972: LD_INT 4
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 4
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 5
35001: PUSH
35002: LD_INT 5
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: LD_INT 5
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 3
35021: PUSH
35022: LD_INT 4
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 3
35031: PUSH
35032: LD_INT 3
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 5
35041: PUSH
35042: LD_INT 3
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 3
35051: PUSH
35052: LD_INT 5
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 3
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: LD_INT 4
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 4
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: LD_INT 3
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 4
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: NEG
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 4
35154: NEG
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 4
35165: NEG
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 3
35177: NEG
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 3
35188: NEG
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 4
35199: NEG
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 5
35210: NEG
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 5
35221: NEG
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 5
35233: NEG
35234: PUSH
35235: LD_INT 2
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 3
35245: NEG
35246: PUSH
35247: LD_INT 2
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// end ; end ;
35301: GO 35304
35303: POP
// case btype of b_depot , b_warehouse :
35304: LD_VAR 0 1
35308: PUSH
35309: LD_INT 0
35311: DOUBLE
35312: EQUAL
35313: IFTRUE 35323
35315: LD_INT 1
35317: DOUBLE
35318: EQUAL
35319: IFTRUE 35323
35321: GO 35524
35323: POP
// case nation of nation_american :
35324: LD_VAR 0 5
35328: PUSH
35329: LD_INT 1
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35337
35335: GO 35393
35337: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35338: LD_ADDR_VAR 0 9
35342: PUSH
35343: LD_VAR 0 11
35347: PUSH
35348: LD_VAR 0 12
35352: PUSH
35353: LD_VAR 0 13
35357: PUSH
35358: LD_VAR 0 14
35362: PUSH
35363: LD_VAR 0 15
35367: PUSH
35368: LD_VAR 0 16
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: PUSH
35381: LD_VAR 0 4
35385: PUSH
35386: LD_INT 1
35388: PLUS
35389: ARRAY
35390: ST_TO_ADDR
35391: GO 35522
35393: LD_INT 2
35395: DOUBLE
35396: EQUAL
35397: IFTRUE 35401
35399: GO 35457
35401: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: LD_VAR 0 17
35411: PUSH
35412: LD_VAR 0 18
35416: PUSH
35417: LD_VAR 0 19
35421: PUSH
35422: LD_VAR 0 20
35426: PUSH
35427: LD_VAR 0 21
35431: PUSH
35432: LD_VAR 0 22
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: PUSH
35445: LD_VAR 0 4
35449: PUSH
35450: LD_INT 1
35452: PLUS
35453: ARRAY
35454: ST_TO_ADDR
35455: GO 35522
35457: LD_INT 3
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35465
35463: GO 35521
35465: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35466: LD_ADDR_VAR 0 9
35470: PUSH
35471: LD_VAR 0 23
35475: PUSH
35476: LD_VAR 0 24
35480: PUSH
35481: LD_VAR 0 25
35485: PUSH
35486: LD_VAR 0 26
35490: PUSH
35491: LD_VAR 0 27
35495: PUSH
35496: LD_VAR 0 28
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: PUSH
35509: LD_VAR 0 4
35513: PUSH
35514: LD_INT 1
35516: PLUS
35517: ARRAY
35518: ST_TO_ADDR
35519: GO 35522
35521: POP
35522: GO 36077
35524: LD_INT 2
35526: DOUBLE
35527: EQUAL
35528: IFTRUE 35538
35530: LD_INT 3
35532: DOUBLE
35533: EQUAL
35534: IFTRUE 35538
35536: GO 35594
35538: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_VAR 0 29
35548: PUSH
35549: LD_VAR 0 30
35553: PUSH
35554: LD_VAR 0 31
35558: PUSH
35559: LD_VAR 0 32
35563: PUSH
35564: LD_VAR 0 33
35568: PUSH
35569: LD_VAR 0 34
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: PUSH
35582: LD_VAR 0 4
35586: PUSH
35587: LD_INT 1
35589: PLUS
35590: ARRAY
35591: ST_TO_ADDR
35592: GO 36077
35594: LD_INT 16
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35656
35600: LD_INT 17
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35656
35606: LD_INT 18
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35656
35612: LD_INT 19
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35656
35618: LD_INT 22
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35656
35624: LD_INT 20
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35656
35630: LD_INT 21
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35656
35636: LD_INT 23
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35656
35642: LD_INT 24
35644: DOUBLE
35645: EQUAL
35646: IFTRUE 35656
35648: LD_INT 25
35650: DOUBLE
35651: EQUAL
35652: IFTRUE 35656
35654: GO 35712
35656: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35657: LD_ADDR_VAR 0 9
35661: PUSH
35662: LD_VAR 0 35
35666: PUSH
35667: LD_VAR 0 36
35671: PUSH
35672: LD_VAR 0 37
35676: PUSH
35677: LD_VAR 0 38
35681: PUSH
35682: LD_VAR 0 39
35686: PUSH
35687: LD_VAR 0 40
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: PUSH
35700: LD_VAR 0 4
35704: PUSH
35705: LD_INT 1
35707: PLUS
35708: ARRAY
35709: ST_TO_ADDR
35710: GO 36077
35712: LD_INT 6
35714: DOUBLE
35715: EQUAL
35716: IFTRUE 35768
35718: LD_INT 7
35720: DOUBLE
35721: EQUAL
35722: IFTRUE 35768
35724: LD_INT 8
35726: DOUBLE
35727: EQUAL
35728: IFTRUE 35768
35730: LD_INT 13
35732: DOUBLE
35733: EQUAL
35734: IFTRUE 35768
35736: LD_INT 12
35738: DOUBLE
35739: EQUAL
35740: IFTRUE 35768
35742: LD_INT 15
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35768
35748: LD_INT 11
35750: DOUBLE
35751: EQUAL
35752: IFTRUE 35768
35754: LD_INT 14
35756: DOUBLE
35757: EQUAL
35758: IFTRUE 35768
35760: LD_INT 10
35762: DOUBLE
35763: EQUAL
35764: IFTRUE 35768
35766: GO 35824
35768: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35769: LD_ADDR_VAR 0 9
35773: PUSH
35774: LD_VAR 0 41
35778: PUSH
35779: LD_VAR 0 42
35783: PUSH
35784: LD_VAR 0 43
35788: PUSH
35789: LD_VAR 0 44
35793: PUSH
35794: LD_VAR 0 45
35798: PUSH
35799: LD_VAR 0 46
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: PUSH
35812: LD_VAR 0 4
35816: PUSH
35817: LD_INT 1
35819: PLUS
35820: ARRAY
35821: ST_TO_ADDR
35822: GO 36077
35824: LD_INT 36
35826: DOUBLE
35827: EQUAL
35828: IFTRUE 35832
35830: GO 35888
35832: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35833: LD_ADDR_VAR 0 9
35837: PUSH
35838: LD_VAR 0 47
35842: PUSH
35843: LD_VAR 0 48
35847: PUSH
35848: LD_VAR 0 49
35852: PUSH
35853: LD_VAR 0 50
35857: PUSH
35858: LD_VAR 0 51
35862: PUSH
35863: LD_VAR 0 52
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: PUSH
35876: LD_VAR 0 4
35880: PUSH
35881: LD_INT 1
35883: PLUS
35884: ARRAY
35885: ST_TO_ADDR
35886: GO 36077
35888: LD_INT 4
35890: DOUBLE
35891: EQUAL
35892: IFTRUE 35914
35894: LD_INT 5
35896: DOUBLE
35897: EQUAL
35898: IFTRUE 35914
35900: LD_INT 34
35902: DOUBLE
35903: EQUAL
35904: IFTRUE 35914
35906: LD_INT 37
35908: DOUBLE
35909: EQUAL
35910: IFTRUE 35914
35912: GO 35970
35914: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35915: LD_ADDR_VAR 0 9
35919: PUSH
35920: LD_VAR 0 53
35924: PUSH
35925: LD_VAR 0 54
35929: PUSH
35930: LD_VAR 0 55
35934: PUSH
35935: LD_VAR 0 56
35939: PUSH
35940: LD_VAR 0 57
35944: PUSH
35945: LD_VAR 0 58
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: PUSH
35958: LD_VAR 0 4
35962: PUSH
35963: LD_INT 1
35965: PLUS
35966: ARRAY
35967: ST_TO_ADDR
35968: GO 36077
35970: LD_INT 31
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 36020
35976: LD_INT 32
35978: DOUBLE
35979: EQUAL
35980: IFTRUE 36020
35982: LD_INT 33
35984: DOUBLE
35985: EQUAL
35986: IFTRUE 36020
35988: LD_INT 27
35990: DOUBLE
35991: EQUAL
35992: IFTRUE 36020
35994: LD_INT 26
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36020
36000: LD_INT 28
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36020
36006: LD_INT 29
36008: DOUBLE
36009: EQUAL
36010: IFTRUE 36020
36012: LD_INT 30
36014: DOUBLE
36015: EQUAL
36016: IFTRUE 36020
36018: GO 36076
36020: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36021: LD_ADDR_VAR 0 9
36025: PUSH
36026: LD_VAR 0 59
36030: PUSH
36031: LD_VAR 0 60
36035: PUSH
36036: LD_VAR 0 61
36040: PUSH
36041: LD_VAR 0 62
36045: PUSH
36046: LD_VAR 0 63
36050: PUSH
36051: LD_VAR 0 64
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: PUSH
36064: LD_VAR 0 4
36068: PUSH
36069: LD_INT 1
36071: PLUS
36072: ARRAY
36073: ST_TO_ADDR
36074: GO 36077
36076: POP
// temp_list2 = [ ] ;
36077: LD_ADDR_VAR 0 10
36081: PUSH
36082: EMPTY
36083: ST_TO_ADDR
// for i in temp_list do
36084: LD_ADDR_VAR 0 8
36088: PUSH
36089: LD_VAR 0 9
36093: PUSH
36094: FOR_IN
36095: IFFALSE 36147
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36097: LD_ADDR_VAR 0 10
36101: PUSH
36102: LD_VAR 0 10
36106: PUSH
36107: LD_VAR 0 8
36111: PUSH
36112: LD_INT 1
36114: ARRAY
36115: PUSH
36116: LD_VAR 0 2
36120: PLUS
36121: PUSH
36122: LD_VAR 0 8
36126: PUSH
36127: LD_INT 2
36129: ARRAY
36130: PUSH
36131: LD_VAR 0 3
36135: PLUS
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: ADD
36144: ST_TO_ADDR
36145: GO 36094
36147: POP
36148: POP
// result = temp_list2 ;
36149: LD_ADDR_VAR 0 7
36153: PUSH
36154: LD_VAR 0 10
36158: ST_TO_ADDR
// end ;
36159: LD_VAR 0 7
36163: RET
// export function EnemyInRange ( unit , dist ) ; begin
36164: LD_INT 0
36166: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36167: LD_ADDR_VAR 0 3
36171: PUSH
36172: LD_VAR 0 1
36176: PPUSH
36177: CALL_OW 255
36181: PPUSH
36182: LD_VAR 0 1
36186: PPUSH
36187: CALL_OW 250
36191: PPUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL_OW 251
36201: PPUSH
36202: LD_VAR 0 2
36206: PPUSH
36207: CALL 9421 0 4
36211: PUSH
36212: LD_INT 4
36214: ARRAY
36215: ST_TO_ADDR
// end ;
36216: LD_VAR 0 3
36220: RET
// export function PlayerSeeMe ( unit ) ; begin
36221: LD_INT 0
36223: PPUSH
// result := See ( your_side , unit ) ;
36224: LD_ADDR_VAR 0 2
36228: PUSH
36229: LD_OWVAR 2
36233: PPUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 292
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 2
36248: RET
// export function ReverseDir ( unit ) ; begin
36249: LD_INT 0
36251: PPUSH
// if not unit then
36252: LD_VAR 0 1
36256: NOT
36257: IFFALSE 36261
// exit ;
36259: GO 36284
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36261: LD_ADDR_VAR 0 2
36265: PUSH
36266: LD_VAR 0 1
36270: PPUSH
36271: CALL_OW 254
36275: PUSH
36276: LD_INT 3
36278: PLUS
36279: PUSH
36280: LD_INT 6
36282: MOD
36283: ST_TO_ADDR
// end ;
36284: LD_VAR 0 2
36288: RET
// export function ReverseArray ( array ) ; var i ; begin
36289: LD_INT 0
36291: PPUSH
36292: PPUSH
// if not array then
36293: LD_VAR 0 1
36297: NOT
36298: IFFALSE 36302
// exit ;
36300: GO 36357
// result := [ ] ;
36302: LD_ADDR_VAR 0 2
36306: PUSH
36307: EMPTY
36308: ST_TO_ADDR
// for i := array downto 1 do
36309: LD_ADDR_VAR 0 3
36313: PUSH
36314: DOUBLE
36315: LD_VAR 0 1
36319: INC
36320: ST_TO_ADDR
36321: LD_INT 1
36323: PUSH
36324: FOR_DOWNTO
36325: IFFALSE 36355
// result := Join ( result , array [ i ] ) ;
36327: LD_ADDR_VAR 0 2
36331: PUSH
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_VAR 0 1
36341: PUSH
36342: LD_VAR 0 3
36346: ARRAY
36347: PPUSH
36348: CALL 41199 0 2
36352: ST_TO_ADDR
36353: GO 36324
36355: POP
36356: POP
// end ;
36357: LD_VAR 0 2
36361: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36362: LD_INT 0
36364: PPUSH
36365: PPUSH
36366: PPUSH
36367: PPUSH
36368: PPUSH
36369: PPUSH
// if not unit or not hexes then
36370: LD_VAR 0 1
36374: NOT
36375: IFTRUE 36384
36377: PUSH
36378: LD_VAR 0 2
36382: NOT
36383: OR
36384: IFFALSE 36388
// exit ;
36386: GO 36511
// dist := 9999 ;
36388: LD_ADDR_VAR 0 5
36392: PUSH
36393: LD_INT 9999
36395: ST_TO_ADDR
// for i = 1 to hexes do
36396: LD_ADDR_VAR 0 4
36400: PUSH
36401: DOUBLE
36402: LD_INT 1
36404: DEC
36405: ST_TO_ADDR
36406: LD_VAR 0 2
36410: PUSH
36411: FOR_TO
36412: IFFALSE 36499
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36414: LD_ADDR_VAR 0 6
36418: PUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: LD_VAR 0 2
36428: PUSH
36429: LD_VAR 0 4
36433: ARRAY
36434: PUSH
36435: LD_INT 1
36437: ARRAY
36438: PPUSH
36439: LD_VAR 0 2
36443: PUSH
36444: LD_VAR 0 4
36448: ARRAY
36449: PUSH
36450: LD_INT 2
36452: ARRAY
36453: PPUSH
36454: CALL_OW 297
36458: ST_TO_ADDR
// if tdist < dist then
36459: LD_VAR 0 6
36463: PUSH
36464: LD_VAR 0 5
36468: LESS
36469: IFFALSE 36497
// begin hex := hexes [ i ] ;
36471: LD_ADDR_VAR 0 8
36475: PUSH
36476: LD_VAR 0 2
36480: PUSH
36481: LD_VAR 0 4
36485: ARRAY
36486: ST_TO_ADDR
// dist := tdist ;
36487: LD_ADDR_VAR 0 5
36491: PUSH
36492: LD_VAR 0 6
36496: ST_TO_ADDR
// end ; end ;
36497: GO 36411
36499: POP
36500: POP
// result := hex ;
36501: LD_ADDR_VAR 0 3
36505: PUSH
36506: LD_VAR 0 8
36510: ST_TO_ADDR
// end ;
36511: LD_VAR 0 3
36515: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36516: LD_INT 0
36518: PPUSH
36519: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36520: LD_VAR 0 1
36524: NOT
36525: IFTRUE 36564
36527: PUSH
36528: LD_VAR 0 1
36532: PUSH
36533: LD_INT 21
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 23
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PPUSH
36557: CALL_OW 69
36561: IN
36562: NOT
36563: OR
36564: IFFALSE 36568
// exit ;
36566: GO 36615
// for i = 1 to 3 do
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: DOUBLE
36574: LD_INT 1
36576: DEC
36577: ST_TO_ADDR
36578: LD_INT 3
36580: PUSH
36581: FOR_TO
36582: IFFALSE 36613
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 250
36593: PPUSH
36594: LD_VAR 0 1
36598: PPUSH
36599: CALL_OW 251
36603: PPUSH
36604: LD_INT 1
36606: PPUSH
36607: CALL_OW 453
36611: GO 36581
36613: POP
36614: POP
// end ;
36615: LD_VAR 0 2
36619: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36620: LD_INT 0
36622: PPUSH
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
// if not unit or not enemy_unit then
36628: LD_VAR 0 1
36632: NOT
36633: IFTRUE 36642
36635: PUSH
36636: LD_VAR 0 2
36640: NOT
36641: OR
36642: IFFALSE 36646
// exit ;
36644: GO 37117
// if GetLives ( i ) < 250 then
36646: LD_VAR 0 4
36650: PPUSH
36651: CALL_OW 256
36655: PUSH
36656: LD_INT 250
36658: LESS
36659: IFFALSE 36672
// begin ComAutodestruct ( i ) ;
36661: LD_VAR 0 4
36665: PPUSH
36666: CALL 36516 0 1
// exit ;
36670: GO 37117
// end ; x := GetX ( enemy_unit ) ;
36672: LD_ADDR_VAR 0 7
36676: PUSH
36677: LD_VAR 0 2
36681: PPUSH
36682: CALL_OW 250
36686: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36687: LD_ADDR_VAR 0 8
36691: PUSH
36692: LD_VAR 0 2
36696: PPUSH
36697: CALL_OW 251
36701: ST_TO_ADDR
// if not x or not y then
36702: LD_VAR 0 7
36706: NOT
36707: IFTRUE 36716
36709: PUSH
36710: LD_VAR 0 8
36714: NOT
36715: OR
36716: IFFALSE 36720
// exit ;
36718: GO 37117
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36720: LD_ADDR_VAR 0 6
36724: PUSH
36725: LD_VAR 0 7
36729: PPUSH
36730: LD_INT 0
36732: PPUSH
36733: LD_INT 4
36735: PPUSH
36736: CALL_OW 272
36740: PUSH
36741: LD_VAR 0 8
36745: PPUSH
36746: LD_INT 0
36748: PPUSH
36749: LD_INT 4
36751: PPUSH
36752: CALL_OW 273
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_VAR 0 7
36765: PPUSH
36766: LD_INT 1
36768: PPUSH
36769: LD_INT 4
36771: PPUSH
36772: CALL_OW 272
36776: PUSH
36777: LD_VAR 0 8
36781: PPUSH
36782: LD_INT 1
36784: PPUSH
36785: LD_INT 4
36787: PPUSH
36788: CALL_OW 273
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_VAR 0 7
36801: PPUSH
36802: LD_INT 2
36804: PPUSH
36805: LD_INT 4
36807: PPUSH
36808: CALL_OW 272
36812: PUSH
36813: LD_VAR 0 8
36817: PPUSH
36818: LD_INT 2
36820: PPUSH
36821: LD_INT 4
36823: PPUSH
36824: CALL_OW 273
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_VAR 0 7
36837: PPUSH
36838: LD_INT 3
36840: PPUSH
36841: LD_INT 4
36843: PPUSH
36844: CALL_OW 272
36848: PUSH
36849: LD_VAR 0 8
36853: PPUSH
36854: LD_INT 3
36856: PPUSH
36857: LD_INT 4
36859: PPUSH
36860: CALL_OW 273
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_VAR 0 7
36873: PPUSH
36874: LD_INT 4
36876: PPUSH
36877: LD_INT 4
36879: PPUSH
36880: CALL_OW 272
36884: PUSH
36885: LD_VAR 0 8
36889: PPUSH
36890: LD_INT 4
36892: PPUSH
36893: LD_INT 4
36895: PPUSH
36896: CALL_OW 273
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_VAR 0 7
36909: PPUSH
36910: LD_INT 5
36912: PPUSH
36913: LD_INT 4
36915: PPUSH
36916: CALL_OW 272
36920: PUSH
36921: LD_VAR 0 8
36925: PPUSH
36926: LD_INT 5
36928: PPUSH
36929: LD_INT 4
36931: PPUSH
36932: CALL_OW 273
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: ST_TO_ADDR
// for i = tmp downto 1 do
36949: LD_ADDR_VAR 0 4
36953: PUSH
36954: DOUBLE
36955: LD_VAR 0 6
36959: INC
36960: ST_TO_ADDR
36961: LD_INT 1
36963: PUSH
36964: FOR_DOWNTO
36965: IFFALSE 37068
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36967: LD_VAR 0 6
36971: PUSH
36972: LD_VAR 0 4
36976: ARRAY
36977: PUSH
36978: LD_INT 1
36980: ARRAY
36981: PPUSH
36982: LD_VAR 0 6
36986: PUSH
36987: LD_VAR 0 4
36991: ARRAY
36992: PUSH
36993: LD_INT 2
36995: ARRAY
36996: PPUSH
36997: CALL_OW 488
37001: NOT
37002: IFTRUE 37044
37004: PUSH
37005: LD_VAR 0 6
37009: PUSH
37010: LD_VAR 0 4
37014: ARRAY
37015: PUSH
37016: LD_INT 1
37018: ARRAY
37019: PPUSH
37020: LD_VAR 0 6
37024: PUSH
37025: LD_VAR 0 4
37029: ARRAY
37030: PUSH
37031: LD_INT 2
37033: ARRAY
37034: PPUSH
37035: CALL_OW 428
37039: PUSH
37040: LD_INT 0
37042: NONEQUAL
37043: OR
37044: IFFALSE 37066
// tmp := Delete ( tmp , i ) ;
37046: LD_ADDR_VAR 0 6
37050: PUSH
37051: LD_VAR 0 6
37055: PPUSH
37056: LD_VAR 0 4
37060: PPUSH
37061: CALL_OW 3
37065: ST_TO_ADDR
37066: GO 36964
37068: POP
37069: POP
// j := GetClosestHex ( unit , tmp ) ;
37070: LD_ADDR_VAR 0 5
37074: PUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: LD_VAR 0 6
37084: PPUSH
37085: CALL 36362 0 2
37089: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37090: LD_VAR 0 1
37094: PPUSH
37095: LD_VAR 0 5
37099: PUSH
37100: LD_INT 1
37102: ARRAY
37103: PPUSH
37104: LD_VAR 0 5
37108: PUSH
37109: LD_INT 2
37111: ARRAY
37112: PPUSH
37113: CALL_OW 111
// end ;
37117: LD_VAR 0 3
37121: RET
// export function PrepareApemanSoldier ( ) ; begin
37122: LD_INT 0
37124: PPUSH
// uc_nation := 0 ;
37125: LD_ADDR_OWVAR 21
37129: PUSH
37130: LD_INT 0
37132: ST_TO_ADDR
// hc_sex := sex_male ;
37133: LD_ADDR_OWVAR 27
37137: PUSH
37138: LD_INT 1
37140: ST_TO_ADDR
// hc_name :=  ;
37141: LD_ADDR_OWVAR 26
37145: PUSH
37146: LD_STRING 
37148: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37149: LD_ADDR_OWVAR 28
37153: PUSH
37154: LD_INT 15
37156: ST_TO_ADDR
// hc_gallery :=  ;
37157: LD_ADDR_OWVAR 33
37161: PUSH
37162: LD_STRING 
37164: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37165: LD_ADDR_OWVAR 31
37169: PUSH
37170: LD_INT 0
37172: PPUSH
37173: LD_INT 3
37175: PPUSH
37176: CALL_OW 12
37180: PUSH
37181: LD_INT 0
37183: PPUSH
37184: LD_INT 3
37186: PPUSH
37187: CALL_OW 12
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37204: LD_ADDR_OWVAR 29
37208: PUSH
37209: LD_INT 12
37211: PUSH
37212: LD_INT 12
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: ST_TO_ADDR
// end ;
37219: LD_VAR 0 1
37223: RET
// export function PrepareApemanEngineer ( ) ; begin
37224: LD_INT 0
37226: PPUSH
// uc_nation := 0 ;
37227: LD_ADDR_OWVAR 21
37231: PUSH
37232: LD_INT 0
37234: ST_TO_ADDR
// hc_sex := sex_male ;
37235: LD_ADDR_OWVAR 27
37239: PUSH
37240: LD_INT 1
37242: ST_TO_ADDR
// hc_name :=  ;
37243: LD_ADDR_OWVAR 26
37247: PUSH
37248: LD_STRING 
37250: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37251: LD_ADDR_OWVAR 28
37255: PUSH
37256: LD_INT 16
37258: ST_TO_ADDR
// hc_gallery :=  ;
37259: LD_ADDR_OWVAR 33
37263: PUSH
37264: LD_STRING 
37266: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37267: LD_ADDR_OWVAR 31
37271: PUSH
37272: LD_INT 0
37274: PPUSH
37275: LD_INT 3
37277: PPUSH
37278: CALL_OW 12
37282: PUSH
37283: LD_INT 0
37285: PPUSH
37286: LD_INT 3
37288: PPUSH
37289: CALL_OW 12
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37306: LD_ADDR_OWVAR 29
37310: PUSH
37311: LD_INT 12
37313: PUSH
37314: LD_INT 12
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: ST_TO_ADDR
// end ;
37321: LD_VAR 0 1
37325: RET
// export function PrepareApeman ( agressivity ) ; begin
37326: LD_INT 0
37328: PPUSH
// uc_side := 0 ;
37329: LD_ADDR_OWVAR 20
37333: PUSH
37334: LD_INT 0
37336: ST_TO_ADDR
// uc_nation := 0 ;
37337: LD_ADDR_OWVAR 21
37341: PUSH
37342: LD_INT 0
37344: ST_TO_ADDR
// hc_sex := sex_male ;
37345: LD_ADDR_OWVAR 27
37349: PUSH
37350: LD_INT 1
37352: ST_TO_ADDR
// hc_class := class_apeman ;
37353: LD_ADDR_OWVAR 28
37357: PUSH
37358: LD_INT 12
37360: ST_TO_ADDR
// hc_gallery :=  ;
37361: LD_ADDR_OWVAR 33
37365: PUSH
37366: LD_STRING 
37368: ST_TO_ADDR
// hc_name :=  ;
37369: LD_ADDR_OWVAR 26
37373: PUSH
37374: LD_STRING 
37376: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37377: LD_ADDR_OWVAR 29
37381: PUSH
37382: LD_INT 12
37384: PUSH
37385: LD_INT 12
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: ST_TO_ADDR
// if agressivity = 0 then
37392: LD_VAR 0 1
37396: PUSH
37397: LD_INT 0
37399: EQUAL
37400: IFFALSE 37412
// hc_agressivity := 0 else
37402: LD_ADDR_OWVAR 35
37406: PUSH
37407: LD_INT 0
37409: ST_TO_ADDR
37410: GO 37433
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37412: LD_ADDR_OWVAR 35
37416: PUSH
37417: LD_VAR 0 1
37421: NEG
37422: PPUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: CALL_OW 12
37432: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37433: LD_ADDR_OWVAR 31
37437: PUSH
37438: LD_INT 0
37440: PPUSH
37441: LD_INT 3
37443: PPUSH
37444: CALL_OW 12
37448: PUSH
37449: LD_INT 0
37451: PPUSH
37452: LD_INT 3
37454: PPUSH
37455: CALL_OW 12
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
// end ;
37472: LD_VAR 0 2
37476: RET
// export function PrepareTiger ( agressivity ) ; begin
37477: LD_INT 0
37479: PPUSH
// uc_side := 0 ;
37480: LD_ADDR_OWVAR 20
37484: PUSH
37485: LD_INT 0
37487: ST_TO_ADDR
// uc_nation := 0 ;
37488: LD_ADDR_OWVAR 21
37492: PUSH
37493: LD_INT 0
37495: ST_TO_ADDR
// InitHc ;
37496: CALL_OW 19
// hc_class := class_tiger ;
37500: LD_ADDR_OWVAR 28
37504: PUSH
37505: LD_INT 14
37507: ST_TO_ADDR
// hc_gallery :=  ;
37508: LD_ADDR_OWVAR 33
37512: PUSH
37513: LD_STRING 
37515: ST_TO_ADDR
// hc_name :=  ;
37516: LD_ADDR_OWVAR 26
37520: PUSH
37521: LD_STRING 
37523: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37524: LD_ADDR_OWVAR 35
37528: PUSH
37529: LD_VAR 0 1
37533: NEG
37534: PPUSH
37535: LD_VAR 0 1
37539: PPUSH
37540: CALL_OW 12
37544: ST_TO_ADDR
// end ;
37545: LD_VAR 0 2
37549: RET
// export function PrepareEnchidna ( ) ; begin
37550: LD_INT 0
37552: PPUSH
// uc_side := 0 ;
37553: LD_ADDR_OWVAR 20
37557: PUSH
37558: LD_INT 0
37560: ST_TO_ADDR
// uc_nation := 0 ;
37561: LD_ADDR_OWVAR 21
37565: PUSH
37566: LD_INT 0
37568: ST_TO_ADDR
// InitHc ;
37569: CALL_OW 19
// hc_class := class_baggie ;
37573: LD_ADDR_OWVAR 28
37577: PUSH
37578: LD_INT 13
37580: ST_TO_ADDR
// hc_gallery :=  ;
37581: LD_ADDR_OWVAR 33
37585: PUSH
37586: LD_STRING 
37588: ST_TO_ADDR
// hc_name :=  ;
37589: LD_ADDR_OWVAR 26
37593: PUSH
37594: LD_STRING 
37596: ST_TO_ADDR
// end ;
37597: LD_VAR 0 1
37601: RET
// export function PrepareFrog ( ) ; begin
37602: LD_INT 0
37604: PPUSH
// uc_side := 0 ;
37605: LD_ADDR_OWVAR 20
37609: PUSH
37610: LD_INT 0
37612: ST_TO_ADDR
// uc_nation := 0 ;
37613: LD_ADDR_OWVAR 21
37617: PUSH
37618: LD_INT 0
37620: ST_TO_ADDR
// InitHc ;
37621: CALL_OW 19
// hc_class := class_frog ;
37625: LD_ADDR_OWVAR 28
37629: PUSH
37630: LD_INT 19
37632: ST_TO_ADDR
// hc_gallery :=  ;
37633: LD_ADDR_OWVAR 33
37637: PUSH
37638: LD_STRING 
37640: ST_TO_ADDR
// hc_name :=  ;
37641: LD_ADDR_OWVAR 26
37645: PUSH
37646: LD_STRING 
37648: ST_TO_ADDR
// end ;
37649: LD_VAR 0 1
37653: RET
// export function PrepareFish ( ) ; begin
37654: LD_INT 0
37656: PPUSH
// uc_side := 0 ;
37657: LD_ADDR_OWVAR 20
37661: PUSH
37662: LD_INT 0
37664: ST_TO_ADDR
// uc_nation := 0 ;
37665: LD_ADDR_OWVAR 21
37669: PUSH
37670: LD_INT 0
37672: ST_TO_ADDR
// InitHc ;
37673: CALL_OW 19
// hc_class := class_fish ;
37677: LD_ADDR_OWVAR 28
37681: PUSH
37682: LD_INT 20
37684: ST_TO_ADDR
// hc_gallery :=  ;
37685: LD_ADDR_OWVAR 33
37689: PUSH
37690: LD_STRING 
37692: ST_TO_ADDR
// hc_name :=  ;
37693: LD_ADDR_OWVAR 26
37697: PUSH
37698: LD_STRING 
37700: ST_TO_ADDR
// end ;
37701: LD_VAR 0 1
37705: RET
// export function PrepareBird ( ) ; begin
37706: LD_INT 0
37708: PPUSH
// uc_side := 0 ;
37709: LD_ADDR_OWVAR 20
37713: PUSH
37714: LD_INT 0
37716: ST_TO_ADDR
// uc_nation := 0 ;
37717: LD_ADDR_OWVAR 21
37721: PUSH
37722: LD_INT 0
37724: ST_TO_ADDR
// InitHc ;
37725: CALL_OW 19
// hc_class := class_phororhacos ;
37729: LD_ADDR_OWVAR 28
37733: PUSH
37734: LD_INT 18
37736: ST_TO_ADDR
// hc_gallery :=  ;
37737: LD_ADDR_OWVAR 33
37741: PUSH
37742: LD_STRING 
37744: ST_TO_ADDR
// hc_name :=  ;
37745: LD_ADDR_OWVAR 26
37749: PUSH
37750: LD_STRING 
37752: ST_TO_ADDR
// end ;
37753: LD_VAR 0 1
37757: RET
// export function PrepareHorse ( ) ; begin
37758: LD_INT 0
37760: PPUSH
// uc_side := 0 ;
37761: LD_ADDR_OWVAR 20
37765: PUSH
37766: LD_INT 0
37768: ST_TO_ADDR
// uc_nation := 0 ;
37769: LD_ADDR_OWVAR 21
37773: PUSH
37774: LD_INT 0
37776: ST_TO_ADDR
// InitHc ;
37777: CALL_OW 19
// hc_class := class_horse ;
37781: LD_ADDR_OWVAR 28
37785: PUSH
37786: LD_INT 21
37788: ST_TO_ADDR
// hc_gallery :=  ;
37789: LD_ADDR_OWVAR 33
37793: PUSH
37794: LD_STRING 
37796: ST_TO_ADDR
// hc_name :=  ;
37797: LD_ADDR_OWVAR 26
37801: PUSH
37802: LD_STRING 
37804: ST_TO_ADDR
// end ;
37805: LD_VAR 0 1
37809: RET
// export function PrepareMastodont ( ) ; begin
37810: LD_INT 0
37812: PPUSH
// uc_side := 0 ;
37813: LD_ADDR_OWVAR 20
37817: PUSH
37818: LD_INT 0
37820: ST_TO_ADDR
// uc_nation := 0 ;
37821: LD_ADDR_OWVAR 21
37825: PUSH
37826: LD_INT 0
37828: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37829: LD_ADDR_OWVAR 37
37833: PUSH
37834: LD_INT 31
37836: ST_TO_ADDR
// vc_control := control_rider ;
37837: LD_ADDR_OWVAR 38
37841: PUSH
37842: LD_INT 4
37844: ST_TO_ADDR
// end ;
37845: LD_VAR 0 1
37849: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37850: LD_INT 0
37852: PPUSH
37853: PPUSH
37854: PPUSH
// uc_side = 0 ;
37855: LD_ADDR_OWVAR 20
37859: PUSH
37860: LD_INT 0
37862: ST_TO_ADDR
// uc_nation = 0 ;
37863: LD_ADDR_OWVAR 21
37867: PUSH
37868: LD_INT 0
37870: ST_TO_ADDR
// InitHc_All ( ) ;
37871: CALL_OW 584
// InitVc ;
37875: CALL_OW 20
// if mastodonts then
37879: LD_VAR 0 6
37883: IFFALSE 37950
// for i = 1 to mastodonts do
37885: LD_ADDR_VAR 0 11
37889: PUSH
37890: DOUBLE
37891: LD_INT 1
37893: DEC
37894: ST_TO_ADDR
37895: LD_VAR 0 6
37899: PUSH
37900: FOR_TO
37901: IFFALSE 37948
// begin vc_chassis := 31 ;
37903: LD_ADDR_OWVAR 37
37907: PUSH
37908: LD_INT 31
37910: ST_TO_ADDR
// vc_control := control_rider ;
37911: LD_ADDR_OWVAR 38
37915: PUSH
37916: LD_INT 4
37918: ST_TO_ADDR
// animal := CreateVehicle ;
37919: LD_ADDR_VAR 0 12
37923: PUSH
37924: CALL_OW 45
37928: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37929: LD_VAR 0 12
37933: PPUSH
37934: LD_VAR 0 8
37938: PPUSH
37939: LD_INT 0
37941: PPUSH
37942: CALL 40092 0 3
// end ;
37946: GO 37900
37948: POP
37949: POP
// if horses then
37950: LD_VAR 0 5
37954: IFFALSE 38021
// for i = 1 to horses do
37956: LD_ADDR_VAR 0 11
37960: PUSH
37961: DOUBLE
37962: LD_INT 1
37964: DEC
37965: ST_TO_ADDR
37966: LD_VAR 0 5
37970: PUSH
37971: FOR_TO
37972: IFFALSE 38019
// begin hc_class := 21 ;
37974: LD_ADDR_OWVAR 28
37978: PUSH
37979: LD_INT 21
37981: ST_TO_ADDR
// hc_gallery :=  ;
37982: LD_ADDR_OWVAR 33
37986: PUSH
37987: LD_STRING 
37989: ST_TO_ADDR
// animal := CreateHuman ;
37990: LD_ADDR_VAR 0 12
37994: PUSH
37995: CALL_OW 44
37999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38000: LD_VAR 0 12
38004: PPUSH
38005: LD_VAR 0 8
38009: PPUSH
38010: LD_INT 0
38012: PPUSH
38013: CALL 40092 0 3
// end ;
38017: GO 37971
38019: POP
38020: POP
// if birds then
38021: LD_VAR 0 1
38025: IFFALSE 38092
// for i = 1 to birds do
38027: LD_ADDR_VAR 0 11
38031: PUSH
38032: DOUBLE
38033: LD_INT 1
38035: DEC
38036: ST_TO_ADDR
38037: LD_VAR 0 1
38041: PUSH
38042: FOR_TO
38043: IFFALSE 38090
// begin hc_class := 18 ;
38045: LD_ADDR_OWVAR 28
38049: PUSH
38050: LD_INT 18
38052: ST_TO_ADDR
// hc_gallery =  ;
38053: LD_ADDR_OWVAR 33
38057: PUSH
38058: LD_STRING 
38060: ST_TO_ADDR
// animal := CreateHuman ;
38061: LD_ADDR_VAR 0 12
38065: PUSH
38066: CALL_OW 44
38070: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38071: LD_VAR 0 12
38075: PPUSH
38076: LD_VAR 0 8
38080: PPUSH
38081: LD_INT 0
38083: PPUSH
38084: CALL 40092 0 3
// end ;
38088: GO 38042
38090: POP
38091: POP
// if tigers then
38092: LD_VAR 0 2
38096: IFFALSE 38180
// for i = 1 to tigers do
38098: LD_ADDR_VAR 0 11
38102: PUSH
38103: DOUBLE
38104: LD_INT 1
38106: DEC
38107: ST_TO_ADDR
38108: LD_VAR 0 2
38112: PUSH
38113: FOR_TO
38114: IFFALSE 38178
// begin hc_class = class_tiger ;
38116: LD_ADDR_OWVAR 28
38120: PUSH
38121: LD_INT 14
38123: ST_TO_ADDR
// hc_gallery =  ;
38124: LD_ADDR_OWVAR 33
38128: PUSH
38129: LD_STRING 
38131: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38132: LD_ADDR_OWVAR 35
38136: PUSH
38137: LD_INT 7
38139: NEG
38140: PPUSH
38141: LD_INT 7
38143: PPUSH
38144: CALL_OW 12
38148: ST_TO_ADDR
// animal := CreateHuman ;
38149: LD_ADDR_VAR 0 12
38153: PUSH
38154: CALL_OW 44
38158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38159: LD_VAR 0 12
38163: PPUSH
38164: LD_VAR 0 8
38168: PPUSH
38169: LD_INT 0
38171: PPUSH
38172: CALL 40092 0 3
// end ;
38176: GO 38113
38178: POP
38179: POP
// if apemans then
38180: LD_VAR 0 3
38184: IFFALSE 38307
// for i = 1 to apemans do
38186: LD_ADDR_VAR 0 11
38190: PUSH
38191: DOUBLE
38192: LD_INT 1
38194: DEC
38195: ST_TO_ADDR
38196: LD_VAR 0 3
38200: PUSH
38201: FOR_TO
38202: IFFALSE 38305
// begin hc_class = class_apeman ;
38204: LD_ADDR_OWVAR 28
38208: PUSH
38209: LD_INT 12
38211: ST_TO_ADDR
// hc_gallery =  ;
38212: LD_ADDR_OWVAR 33
38216: PUSH
38217: LD_STRING 
38219: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38220: LD_ADDR_OWVAR 35
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PPUSH
38229: LD_INT 2
38231: PPUSH
38232: CALL_OW 12
38236: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38237: LD_ADDR_OWVAR 31
38241: PUSH
38242: LD_INT 1
38244: PPUSH
38245: LD_INT 3
38247: PPUSH
38248: CALL_OW 12
38252: PUSH
38253: LD_INT 1
38255: PPUSH
38256: LD_INT 3
38258: PPUSH
38259: CALL_OW 12
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: ST_TO_ADDR
// animal := CreateHuman ;
38276: LD_ADDR_VAR 0 12
38280: PUSH
38281: CALL_OW 44
38285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38286: LD_VAR 0 12
38290: PPUSH
38291: LD_VAR 0 8
38295: PPUSH
38296: LD_INT 0
38298: PPUSH
38299: CALL 40092 0 3
// end ;
38303: GO 38201
38305: POP
38306: POP
// if enchidnas then
38307: LD_VAR 0 4
38311: IFFALSE 38378
// for i = 1 to enchidnas do
38313: LD_ADDR_VAR 0 11
38317: PUSH
38318: DOUBLE
38319: LD_INT 1
38321: DEC
38322: ST_TO_ADDR
38323: LD_VAR 0 4
38327: PUSH
38328: FOR_TO
38329: IFFALSE 38376
// begin hc_class = 13 ;
38331: LD_ADDR_OWVAR 28
38335: PUSH
38336: LD_INT 13
38338: ST_TO_ADDR
// hc_gallery =  ;
38339: LD_ADDR_OWVAR 33
38343: PUSH
38344: LD_STRING 
38346: ST_TO_ADDR
// animal := CreateHuman ;
38347: LD_ADDR_VAR 0 12
38351: PUSH
38352: CALL_OW 44
38356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38357: LD_VAR 0 12
38361: PPUSH
38362: LD_VAR 0 8
38366: PPUSH
38367: LD_INT 0
38369: PPUSH
38370: CALL 40092 0 3
// end ;
38374: GO 38328
38376: POP
38377: POP
// if fishes then
38378: LD_VAR 0 7
38382: IFFALSE 38449
// for i = 1 to fishes do
38384: LD_ADDR_VAR 0 11
38388: PUSH
38389: DOUBLE
38390: LD_INT 1
38392: DEC
38393: ST_TO_ADDR
38394: LD_VAR 0 7
38398: PUSH
38399: FOR_TO
38400: IFFALSE 38447
// begin hc_class = 20 ;
38402: LD_ADDR_OWVAR 28
38406: PUSH
38407: LD_INT 20
38409: ST_TO_ADDR
// hc_gallery =  ;
38410: LD_ADDR_OWVAR 33
38414: PUSH
38415: LD_STRING 
38417: ST_TO_ADDR
// animal := CreateHuman ;
38418: LD_ADDR_VAR 0 12
38422: PUSH
38423: CALL_OW 44
38427: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38428: LD_VAR 0 12
38432: PPUSH
38433: LD_VAR 0 9
38437: PPUSH
38438: LD_INT 0
38440: PPUSH
38441: CALL 40092 0 3
// end ;
38445: GO 38399
38447: POP
38448: POP
// end ;
38449: LD_VAR 0 10
38453: RET
// export function WantHeal ( sci , unit ) ; begin
38454: LD_INT 0
38456: PPUSH
// if GetTaskList ( sci ) > 0 then
38457: LD_VAR 0 1
38461: PPUSH
38462: CALL_OW 437
38466: PUSH
38467: LD_INT 0
38469: GREATER
38470: IFFALSE 38542
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 437
38481: PUSH
38482: LD_INT 1
38484: ARRAY
38485: PUSH
38486: LD_INT 1
38488: ARRAY
38489: PUSH
38490: LD_STRING l
38492: EQUAL
38493: IFFALSE 38520
38495: PUSH
38496: LD_VAR 0 1
38500: PPUSH
38501: CALL_OW 437
38505: PUSH
38506: LD_INT 1
38508: ARRAY
38509: PUSH
38510: LD_INT 4
38512: ARRAY
38513: PUSH
38514: LD_VAR 0 2
38518: EQUAL
38519: AND
38520: IFFALSE 38532
// result := true else
38522: LD_ADDR_VAR 0 3
38526: PUSH
38527: LD_INT 1
38529: ST_TO_ADDR
38530: GO 38540
// result := false ;
38532: LD_ADDR_VAR 0 3
38536: PUSH
38537: LD_INT 0
38539: ST_TO_ADDR
// end else
38540: GO 38550
// result := false ;
38542: LD_ADDR_VAR 0 3
38546: PUSH
38547: LD_INT 0
38549: ST_TO_ADDR
// end ;
38550: LD_VAR 0 3
38554: RET
// export function HealTarget ( sci ) ; begin
38555: LD_INT 0
38557: PPUSH
// if not sci then
38558: LD_VAR 0 1
38562: NOT
38563: IFFALSE 38567
// exit ;
38565: GO 38632
// result := 0 ;
38567: LD_ADDR_VAR 0 2
38571: PUSH
38572: LD_INT 0
38574: ST_TO_ADDR
// if GetTaskList ( sci ) then
38575: LD_VAR 0 1
38579: PPUSH
38580: CALL_OW 437
38584: IFFALSE 38632
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38586: LD_VAR 0 1
38590: PPUSH
38591: CALL_OW 437
38595: PUSH
38596: LD_INT 1
38598: ARRAY
38599: PUSH
38600: LD_INT 1
38602: ARRAY
38603: PUSH
38604: LD_STRING l
38606: EQUAL
38607: IFFALSE 38632
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38609: LD_ADDR_VAR 0 2
38613: PUSH
38614: LD_VAR 0 1
38618: PPUSH
38619: CALL_OW 437
38623: PUSH
38624: LD_INT 1
38626: ARRAY
38627: PUSH
38628: LD_INT 4
38630: ARRAY
38631: ST_TO_ADDR
// end ;
38632: LD_VAR 0 2
38636: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38637: LD_INT 0
38639: PPUSH
38640: PPUSH
38641: PPUSH
38642: PPUSH
// if not base_units then
38643: LD_VAR 0 1
38647: NOT
38648: IFFALSE 38652
// exit ;
38650: GO 38739
// result := false ;
38652: LD_ADDR_VAR 0 2
38656: PUSH
38657: LD_INT 0
38659: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38660: LD_ADDR_VAR 0 5
38664: PUSH
38665: LD_VAR 0 1
38669: PPUSH
38670: LD_INT 21
38672: PUSH
38673: LD_INT 3
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PPUSH
38680: CALL_OW 72
38684: ST_TO_ADDR
// if not tmp then
38685: LD_VAR 0 5
38689: NOT
38690: IFFALSE 38694
// exit ;
38692: GO 38739
// for i in tmp do
38694: LD_ADDR_VAR 0 3
38698: PUSH
38699: LD_VAR 0 5
38703: PUSH
38704: FOR_IN
38705: IFFALSE 38737
// begin result := EnemyInRange ( i , 22 ) ;
38707: LD_ADDR_VAR 0 2
38711: PUSH
38712: LD_VAR 0 3
38716: PPUSH
38717: LD_INT 22
38719: PPUSH
38720: CALL 36164 0 2
38724: ST_TO_ADDR
// if result then
38725: LD_VAR 0 2
38729: IFFALSE 38735
// exit ;
38731: POP
38732: POP
38733: GO 38739
// end ;
38735: GO 38704
38737: POP
38738: POP
// end ;
38739: LD_VAR 0 2
38743: RET
// export function FilterByTag ( units , tag ) ; begin
38744: LD_INT 0
38746: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38747: LD_ADDR_VAR 0 3
38751: PUSH
38752: LD_VAR 0 1
38756: PPUSH
38757: LD_INT 120
38759: PUSH
38760: LD_VAR 0 2
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PPUSH
38769: CALL_OW 72
38773: ST_TO_ADDR
// end ;
38774: LD_VAR 0 3
38778: RET
// export function IsDriver ( un ) ; begin
38779: LD_INT 0
38781: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38782: LD_ADDR_VAR 0 2
38786: PUSH
38787: LD_VAR 0 1
38791: PUSH
38792: LD_INT 55
38794: PUSH
38795: EMPTY
38796: LIST
38797: PPUSH
38798: CALL_OW 69
38802: IN
38803: ST_TO_ADDR
// end ;
38804: LD_VAR 0 2
38808: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38809: LD_INT 0
38811: PPUSH
38812: PPUSH
// list := [ ] ;
38813: LD_ADDR_VAR 0 5
38817: PUSH
38818: EMPTY
38819: ST_TO_ADDR
// case d of 0 :
38820: LD_VAR 0 3
38824: PUSH
38825: LD_INT 0
38827: DOUBLE
38828: EQUAL
38829: IFTRUE 38833
38831: GO 38966
38833: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38834: LD_ADDR_VAR 0 5
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: LD_INT 4
38846: MINUS
38847: PUSH
38848: LD_VAR 0 2
38852: PUSH
38853: LD_INT 4
38855: MINUS
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: PUSH
38865: LD_VAR 0 1
38869: PUSH
38870: LD_INT 3
38872: MINUS
38873: PUSH
38874: LD_VAR 0 2
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_INT 4
38894: PLUS
38895: PUSH
38896: LD_VAR 0 2
38900: PUSH
38901: LD_INT 4
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: PUSH
38909: LD_VAR 0 1
38913: PUSH
38914: LD_INT 3
38916: PLUS
38917: PUSH
38918: LD_VAR 0 2
38922: PUSH
38923: LD_INT 3
38925: PLUS
38926: PUSH
38927: LD_INT 5
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: PUSH
38935: LD_VAR 0 1
38939: PUSH
38940: LD_VAR 0 2
38944: PUSH
38945: LD_INT 4
38947: PLUS
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: LIST
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: ST_TO_ADDR
// end ; 1 :
38964: GO 39664
38966: LD_INT 1
38968: DOUBLE
38969: EQUAL
38970: IFTRUE 38974
38972: GO 39107
38974: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38975: LD_ADDR_VAR 0 5
38979: PUSH
38980: LD_VAR 0 1
38984: PUSH
38985: LD_VAR 0 2
38989: PUSH
38990: LD_INT 4
38992: MINUS
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: LD_INT 3
39009: MINUS
39010: PUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 3
39018: MINUS
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: LIST
39027: PUSH
39028: LD_VAR 0 1
39032: PUSH
39033: LD_INT 4
39035: MINUS
39036: PUSH
39037: LD_VAR 0 2
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: PUSH
39050: LD_VAR 0 1
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: LD_INT 3
39062: PLUS
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: LD_VAR 0 1
39076: PUSH
39077: LD_INT 4
39079: PLUS
39080: PUSH
39081: LD_VAR 0 2
39085: PUSH
39086: LD_INT 4
39088: PLUS
39089: PUSH
39090: LD_INT 5
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// end ; 2 :
39105: GO 39664
39107: LD_INT 2
39109: DOUBLE
39110: EQUAL
39111: IFTRUE 39115
39113: GO 39244
39115: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39116: LD_ADDR_VAR 0 5
39120: PUSH
39121: LD_VAR 0 1
39125: PUSH
39126: LD_VAR 0 2
39130: PUSH
39131: LD_INT 3
39133: MINUS
39134: PUSH
39135: LD_INT 3
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: LD_VAR 0 1
39147: PUSH
39148: LD_INT 4
39150: PLUS
39151: PUSH
39152: LD_VAR 0 2
39156: PUSH
39157: LD_INT 4
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: PUSH
39165: LD_VAR 0 1
39169: PUSH
39170: LD_VAR 0 2
39174: PUSH
39175: LD_INT 4
39177: PLUS
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: PUSH
39187: LD_VAR 0 1
39191: PUSH
39192: LD_INT 3
39194: MINUS
39195: PUSH
39196: LD_VAR 0 2
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: PUSH
39209: LD_VAR 0 1
39213: PUSH
39214: LD_INT 4
39216: MINUS
39217: PUSH
39218: LD_VAR 0 2
39222: PUSH
39223: LD_INT 4
39225: MINUS
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// end ; 3 :
39242: GO 39664
39244: LD_INT 3
39246: DOUBLE
39247: EQUAL
39248: IFTRUE 39252
39250: GO 39385
39252: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39253: LD_ADDR_VAR 0 5
39257: PUSH
39258: LD_VAR 0 1
39262: PUSH
39263: LD_INT 3
39265: PLUS
39266: PUSH
39267: LD_VAR 0 2
39271: PUSH
39272: LD_INT 4
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: PUSH
39280: LD_VAR 0 1
39284: PUSH
39285: LD_INT 4
39287: PLUS
39288: PUSH
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 4
39296: PLUS
39297: PUSH
39298: LD_INT 5
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: LD_VAR 0 1
39310: PUSH
39311: LD_INT 4
39313: MINUS
39314: PUSH
39315: LD_VAR 0 2
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: PUSH
39328: LD_VAR 0 1
39332: PUSH
39333: LD_VAR 0 2
39337: PUSH
39338: LD_INT 4
39340: MINUS
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: LD_VAR 0 1
39354: PUSH
39355: LD_INT 3
39357: MINUS
39358: PUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_INT 3
39366: MINUS
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: ST_TO_ADDR
// end ; 4 :
39383: GO 39664
39385: LD_INT 4
39387: DOUBLE
39388: EQUAL
39389: IFTRUE 39393
39391: GO 39526
39393: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39394: LD_ADDR_VAR 0 5
39398: PUSH
39399: LD_VAR 0 1
39403: PUSH
39404: LD_VAR 0 2
39408: PUSH
39409: LD_INT 4
39411: PLUS
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: PUSH
39421: LD_VAR 0 1
39425: PUSH
39426: LD_INT 3
39428: PLUS
39429: PUSH
39430: LD_VAR 0 2
39434: PUSH
39435: LD_INT 3
39437: PLUS
39438: PUSH
39439: LD_INT 5
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: PUSH
39447: LD_VAR 0 1
39451: PUSH
39452: LD_INT 4
39454: PLUS
39455: PUSH
39456: LD_VAR 0 2
39460: PUSH
39461: LD_INT 4
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: PUSH
39469: LD_VAR 0 1
39473: PUSH
39474: LD_VAR 0 2
39478: PUSH
39479: LD_INT 3
39481: MINUS
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: PUSH
39491: LD_VAR 0 1
39495: PUSH
39496: LD_INT 4
39498: MINUS
39499: PUSH
39500: LD_VAR 0 2
39504: PUSH
39505: LD_INT 4
39507: MINUS
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: LIST
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: ST_TO_ADDR
// end ; 5 :
39524: GO 39664
39526: LD_INT 5
39528: DOUBLE
39529: EQUAL
39530: IFTRUE 39534
39532: GO 39663
39534: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39535: LD_ADDR_VAR 0 5
39539: PUSH
39540: LD_VAR 0 1
39544: PUSH
39545: LD_INT 4
39547: MINUS
39548: PUSH
39549: LD_VAR 0 2
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: LIST
39561: PUSH
39562: LD_VAR 0 1
39566: PUSH
39567: LD_VAR 0 2
39571: PUSH
39572: LD_INT 4
39574: MINUS
39575: PUSH
39576: LD_INT 3
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: PUSH
39584: LD_VAR 0 1
39588: PUSH
39589: LD_INT 4
39591: PLUS
39592: PUSH
39593: LD_VAR 0 2
39597: PUSH
39598: LD_INT 4
39600: PLUS
39601: PUSH
39602: LD_INT 5
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: LIST
39609: PUSH
39610: LD_VAR 0 1
39614: PUSH
39615: LD_INT 3
39617: PLUS
39618: PUSH
39619: LD_VAR 0 2
39623: PUSH
39624: LD_INT 4
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: LIST
39631: PUSH
39632: LD_VAR 0 1
39636: PUSH
39637: LD_VAR 0 2
39641: PUSH
39642: LD_INT 3
39644: PLUS
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: ST_TO_ADDR
// end ; end ;
39661: GO 39664
39663: POP
// result := list ;
39664: LD_ADDR_VAR 0 4
39668: PUSH
39669: LD_VAR 0 5
39673: ST_TO_ADDR
// end ;
39674: LD_VAR 0 4
39678: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39679: LD_INT 0
39681: PPUSH
39682: PPUSH
39683: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39684: LD_VAR 0 1
39688: NOT
39689: IFTRUE 39717
39691: PUSH
39692: LD_VAR 0 2
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: LD_INT 4
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: IN
39715: NOT
39716: OR
39717: IFFALSE 39721
// exit ;
39719: GO 39804
// tmp := [ ] ;
39721: LD_ADDR_VAR 0 5
39725: PUSH
39726: EMPTY
39727: ST_TO_ADDR
// for i in units do
39728: LD_ADDR_VAR 0 4
39732: PUSH
39733: LD_VAR 0 1
39737: PUSH
39738: FOR_IN
39739: IFFALSE 39773
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39741: LD_ADDR_VAR 0 5
39745: PUSH
39746: LD_VAR 0 5
39750: PPUSH
39751: LD_VAR 0 4
39755: PPUSH
39756: LD_VAR 0 2
39760: PPUSH
39761: CALL_OW 259
39765: PPUSH
39766: CALL 41199 0 2
39770: ST_TO_ADDR
39771: GO 39738
39773: POP
39774: POP
// if not tmp then
39775: LD_VAR 0 5
39779: NOT
39780: IFFALSE 39784
// exit ;
39782: GO 39804
// result := SortListByListDesc ( units , tmp ) ;
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_VAR 0 1
39793: PPUSH
39794: LD_VAR 0 5
39798: PPUSH
39799: CALL_OW 77
39803: ST_TO_ADDR
// end ;
39804: LD_VAR 0 3
39808: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39809: LD_INT 0
39811: PPUSH
39812: PPUSH
39813: PPUSH
// result := false ;
39814: LD_ADDR_VAR 0 3
39818: PUSH
39819: LD_INT 0
39821: ST_TO_ADDR
// if not building then
39822: LD_VAR 0 2
39826: NOT
39827: IFFALSE 39831
// exit ;
39829: GO 39975
// x := GetX ( building ) ;
39831: LD_ADDR_VAR 0 4
39835: PUSH
39836: LD_VAR 0 2
39840: PPUSH
39841: CALL_OW 250
39845: ST_TO_ADDR
// y := GetY ( building ) ;
39846: LD_ADDR_VAR 0 5
39850: PUSH
39851: LD_VAR 0 2
39855: PPUSH
39856: CALL_OW 251
39860: ST_TO_ADDR
// if not x or not y then
39861: LD_VAR 0 4
39865: NOT
39866: IFTRUE 39875
39868: PUSH
39869: LD_VAR 0 5
39873: NOT
39874: OR
39875: IFFALSE 39879
// exit ;
39877: GO 39975
// if GetTaskList ( unit ) then
39879: LD_VAR 0 1
39883: PPUSH
39884: CALL_OW 437
39888: IFFALSE 39975
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39890: LD_STRING e
39892: PUSH
39893: LD_VAR 0 1
39897: PPUSH
39898: CALL_OW 437
39902: PUSH
39903: LD_INT 1
39905: ARRAY
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: EQUAL
39911: IFFALSE 39938
39913: PUSH
39914: LD_VAR 0 4
39918: PUSH
39919: LD_VAR 0 1
39923: PPUSH
39924: CALL_OW 437
39928: PUSH
39929: LD_INT 1
39931: ARRAY
39932: PUSH
39933: LD_INT 2
39935: ARRAY
39936: EQUAL
39937: AND
39938: IFFALSE 39965
39940: PUSH
39941: LD_VAR 0 5
39945: PUSH
39946: LD_VAR 0 1
39950: PPUSH
39951: CALL_OW 437
39955: PUSH
39956: LD_INT 1
39958: ARRAY
39959: PUSH
39960: LD_INT 3
39962: ARRAY
39963: EQUAL
39964: AND
39965: IFFALSE 39975
// result := true end ;
39967: LD_ADDR_VAR 0 3
39971: PUSH
39972: LD_INT 1
39974: ST_TO_ADDR
// end ;
39975: LD_VAR 0 3
39979: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39980: LD_INT 0
39982: PPUSH
// result := false ;
39983: LD_ADDR_VAR 0 4
39987: PUSH
39988: LD_INT 0
39990: ST_TO_ADDR
// if GetTaskList ( unit ) then
39991: LD_VAR 0 1
39995: PPUSH
39996: CALL_OW 437
40000: IFFALSE 40087
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40002: LD_STRING M
40004: PUSH
40005: LD_VAR 0 1
40009: PPUSH
40010: CALL_OW 437
40014: PUSH
40015: LD_INT 1
40017: ARRAY
40018: PUSH
40019: LD_INT 1
40021: ARRAY
40022: EQUAL
40023: IFFALSE 40050
40025: PUSH
40026: LD_VAR 0 2
40030: PUSH
40031: LD_VAR 0 1
40035: PPUSH
40036: CALL_OW 437
40040: PUSH
40041: LD_INT 1
40043: ARRAY
40044: PUSH
40045: LD_INT 2
40047: ARRAY
40048: EQUAL
40049: AND
40050: IFFALSE 40077
40052: PUSH
40053: LD_VAR 0 3
40057: PUSH
40058: LD_VAR 0 1
40062: PPUSH
40063: CALL_OW 437
40067: PUSH
40068: LD_INT 1
40070: ARRAY
40071: PUSH
40072: LD_INT 3
40074: ARRAY
40075: EQUAL
40076: AND
40077: IFFALSE 40087
// result := true ;
40079: LD_ADDR_VAR 0 4
40083: PUSH
40084: LD_INT 1
40086: ST_TO_ADDR
// end ; end ;
40087: LD_VAR 0 4
40091: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40092: LD_INT 0
40094: PPUSH
40095: PPUSH
40096: PPUSH
40097: PPUSH
// if not unit or not area then
40098: LD_VAR 0 1
40102: NOT
40103: IFTRUE 40112
40105: PUSH
40106: LD_VAR 0 2
40110: NOT
40111: OR
40112: IFFALSE 40116
// exit ;
40114: GO 40292
// tmp := AreaToList ( area , i ) ;
40116: LD_ADDR_VAR 0 6
40120: PUSH
40121: LD_VAR 0 2
40125: PPUSH
40126: LD_VAR 0 5
40130: PPUSH
40131: CALL_OW 517
40135: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40136: LD_ADDR_VAR 0 5
40140: PUSH
40141: DOUBLE
40142: LD_INT 1
40144: DEC
40145: ST_TO_ADDR
40146: LD_VAR 0 6
40150: PUSH
40151: LD_INT 1
40153: ARRAY
40154: PUSH
40155: FOR_TO
40156: IFFALSE 40290
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40158: LD_ADDR_VAR 0 7
40162: PUSH
40163: LD_VAR 0 6
40167: PUSH
40168: LD_INT 1
40170: ARRAY
40171: PUSH
40172: LD_VAR 0 5
40176: ARRAY
40177: PUSH
40178: LD_VAR 0 6
40182: PUSH
40183: LD_INT 2
40185: ARRAY
40186: PUSH
40187: LD_VAR 0 5
40191: ARRAY
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40197: LD_INT 92
40199: PUSH
40200: LD_VAR 0 7
40204: PUSH
40205: LD_INT 1
40207: ARRAY
40208: PUSH
40209: LD_VAR 0 7
40213: PUSH
40214: LD_INT 2
40216: ARRAY
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: PPUSH
40227: CALL_OW 69
40231: PUSH
40232: LD_INT 0
40234: EQUAL
40235: IFFALSE 40288
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40237: LD_VAR 0 1
40241: PPUSH
40242: LD_VAR 0 7
40246: PUSH
40247: LD_INT 1
40249: ARRAY
40250: PPUSH
40251: LD_VAR 0 7
40255: PUSH
40256: LD_INT 2
40258: ARRAY
40259: PPUSH
40260: LD_VAR 0 3
40264: PPUSH
40265: CALL_OW 48
// result := IsPlaced ( unit ) ;
40269: LD_ADDR_VAR 0 4
40273: PUSH
40274: LD_VAR 0 1
40278: PPUSH
40279: CALL_OW 305
40283: ST_TO_ADDR
// exit ;
40284: POP
40285: POP
40286: GO 40292
// end ; end ;
40288: GO 40155
40290: POP
40291: POP
// end ;
40292: LD_VAR 0 4
40296: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40297: LD_INT 0
40299: PPUSH
40300: PPUSH
40301: PPUSH
// if not side or side > 8 then
40302: LD_VAR 0 1
40306: NOT
40307: IFTRUE 40319
40309: PUSH
40310: LD_VAR 0 1
40314: PUSH
40315: LD_INT 8
40317: GREATER
40318: OR
40319: IFFALSE 40323
// exit ;
40321: GO 40510
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40323: LD_ADDR_VAR 0 4
40327: PUSH
40328: LD_INT 22
40330: PUSH
40331: LD_VAR 0 1
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 21
40342: PUSH
40343: LD_INT 3
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PPUSH
40354: CALL_OW 69
40358: ST_TO_ADDR
// if not tmp then
40359: LD_VAR 0 4
40363: NOT
40364: IFFALSE 40368
// exit ;
40366: GO 40510
// enable_addtolog := true ;
40368: LD_ADDR_OWVAR 81
40372: PUSH
40373: LD_INT 1
40375: ST_TO_ADDR
// AddToLog ( [ ) ;
40376: LD_STRING [
40378: PPUSH
40379: CALL_OW 561
// for i in tmp do
40383: LD_ADDR_VAR 0 3
40387: PUSH
40388: LD_VAR 0 4
40392: PUSH
40393: FOR_IN
40394: IFFALSE 40501
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40396: LD_STRING [
40398: PUSH
40399: LD_VAR 0 3
40403: PPUSH
40404: CALL_OW 266
40408: STR
40409: PUSH
40410: LD_STRING , 
40412: STR
40413: PUSH
40414: LD_VAR 0 3
40418: PPUSH
40419: CALL_OW 250
40423: STR
40424: PUSH
40425: LD_STRING , 
40427: STR
40428: PUSH
40429: LD_VAR 0 3
40433: PPUSH
40434: CALL_OW 251
40438: STR
40439: PUSH
40440: LD_STRING , 
40442: STR
40443: PUSH
40444: LD_VAR 0 3
40448: PPUSH
40449: CALL_OW 254
40453: STR
40454: PUSH
40455: LD_STRING , 
40457: STR
40458: PUSH
40459: LD_VAR 0 3
40463: PPUSH
40464: LD_INT 1
40466: PPUSH
40467: CALL_OW 268
40471: STR
40472: PUSH
40473: LD_STRING , 
40475: STR
40476: PUSH
40477: LD_VAR 0 3
40481: PPUSH
40482: LD_INT 2
40484: PPUSH
40485: CALL_OW 268
40489: STR
40490: PUSH
40491: LD_STRING ],
40493: STR
40494: PPUSH
40495: CALL_OW 561
// end ;
40499: GO 40393
40501: POP
40502: POP
// AddToLog ( ]; ) ;
40503: LD_STRING ];
40505: PPUSH
40506: CALL_OW 561
// end ;
40510: LD_VAR 0 2
40514: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40515: LD_INT 0
40517: PPUSH
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
// if not area or not rate or not max then
40522: LD_VAR 0 1
40526: NOT
40527: IFTRUE 40536
40529: PUSH
40530: LD_VAR 0 2
40534: NOT
40535: OR
40536: IFTRUE 40545
40538: PUSH
40539: LD_VAR 0 4
40543: NOT
40544: OR
40545: IFFALSE 40549
// exit ;
40547: GO 40738
// while 1 do
40549: LD_INT 1
40551: IFFALSE 40738
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40553: LD_ADDR_VAR 0 9
40557: PUSH
40558: LD_VAR 0 1
40562: PPUSH
40563: LD_INT 1
40565: PPUSH
40566: CALL_OW 287
40570: PUSH
40571: LD_INT 10
40573: MUL
40574: ST_TO_ADDR
// r := rate / 10 ;
40575: LD_ADDR_VAR 0 7
40579: PUSH
40580: LD_VAR 0 2
40584: PUSH
40585: LD_INT 10
40587: DIVREAL
40588: ST_TO_ADDR
// time := 1 1$00 ;
40589: LD_ADDR_VAR 0 8
40593: PUSH
40594: LD_INT 2100
40596: ST_TO_ADDR
// if amount < min then
40597: LD_VAR 0 9
40601: PUSH
40602: LD_VAR 0 3
40606: LESS
40607: IFFALSE 40625
// r := r * 2 else
40609: LD_ADDR_VAR 0 7
40613: PUSH
40614: LD_VAR 0 7
40618: PUSH
40619: LD_INT 2
40621: MUL
40622: ST_TO_ADDR
40623: GO 40651
// if amount > max then
40625: LD_VAR 0 9
40629: PUSH
40630: LD_VAR 0 4
40634: GREATER
40635: IFFALSE 40651
// r := r / 2 ;
40637: LD_ADDR_VAR 0 7
40641: PUSH
40642: LD_VAR 0 7
40646: PUSH
40647: LD_INT 2
40649: DIVREAL
40650: ST_TO_ADDR
// time := time / r ;
40651: LD_ADDR_VAR 0 8
40655: PUSH
40656: LD_VAR 0 8
40660: PUSH
40661: LD_VAR 0 7
40665: DIVREAL
40666: ST_TO_ADDR
// if time < 0 then
40667: LD_VAR 0 8
40671: PUSH
40672: LD_INT 0
40674: LESS
40675: IFFALSE 40692
// time := time * - 1 ;
40677: LD_ADDR_VAR 0 8
40681: PUSH
40682: LD_VAR 0 8
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: MUL
40691: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40692: LD_VAR 0 8
40696: PUSH
40697: LD_INT 35
40699: PPUSH
40700: LD_INT 875
40702: PPUSH
40703: CALL_OW 12
40707: PLUS
40708: PPUSH
40709: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40713: LD_INT 1
40715: PPUSH
40716: LD_INT 5
40718: PPUSH
40719: CALL_OW 12
40723: PPUSH
40724: LD_VAR 0 1
40728: PPUSH
40729: LD_INT 1
40731: PPUSH
40732: CALL_OW 55
// end ;
40736: GO 40549
// end ;
40738: LD_VAR 0 5
40742: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40743: LD_INT 0
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
// if not turrets or not factories then
40753: LD_VAR 0 1
40757: NOT
40758: IFTRUE 40767
40760: PUSH
40761: LD_VAR 0 2
40765: NOT
40766: OR
40767: IFFALSE 40771
// exit ;
40769: GO 41078
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40771: LD_ADDR_VAR 0 10
40775: PUSH
40776: LD_INT 5
40778: PUSH
40779: LD_INT 6
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: LD_INT 4
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: LD_INT 5
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 24
40813: PUSH
40814: LD_INT 25
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 23
40823: PUSH
40824: LD_INT 27
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 42
40837: PUSH
40838: LD_INT 43
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 44
40847: PUSH
40848: LD_INT 46
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 45
40857: PUSH
40858: LD_INT 47
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: LIST
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: LIST
40874: ST_TO_ADDR
// result := [ ] ;
40875: LD_ADDR_VAR 0 3
40879: PUSH
40880: EMPTY
40881: ST_TO_ADDR
// for i in turrets do
40882: LD_ADDR_VAR 0 4
40886: PUSH
40887: LD_VAR 0 1
40891: PUSH
40892: FOR_IN
40893: IFFALSE 41076
// begin nat := GetNation ( i ) ;
40895: LD_ADDR_VAR 0 7
40899: PUSH
40900: LD_VAR 0 4
40904: PPUSH
40905: CALL_OW 248
40909: ST_TO_ADDR
// weapon := 0 ;
40910: LD_ADDR_VAR 0 8
40914: PUSH
40915: LD_INT 0
40917: ST_TO_ADDR
// if not nat then
40918: LD_VAR 0 7
40922: NOT
40923: IFFALSE 40927
// continue ;
40925: GO 40892
// for j in list [ nat ] do
40927: LD_ADDR_VAR 0 5
40931: PUSH
40932: LD_VAR 0 10
40936: PUSH
40937: LD_VAR 0 7
40941: ARRAY
40942: PUSH
40943: FOR_IN
40944: IFFALSE 40985
// if GetBWeapon ( i ) = j [ 1 ] then
40946: LD_VAR 0 4
40950: PPUSH
40951: CALL_OW 269
40955: PUSH
40956: LD_VAR 0 5
40960: PUSH
40961: LD_INT 1
40963: ARRAY
40964: EQUAL
40965: IFFALSE 40983
// begin weapon := j [ 2 ] ;
40967: LD_ADDR_VAR 0 8
40971: PUSH
40972: LD_VAR 0 5
40976: PUSH
40977: LD_INT 2
40979: ARRAY
40980: ST_TO_ADDR
// break ;
40981: GO 40985
// end ;
40983: GO 40943
40985: POP
40986: POP
// if not weapon then
40987: LD_VAR 0 8
40991: NOT
40992: IFFALSE 40996
// continue ;
40994: GO 40892
// for k in factories do
40996: LD_ADDR_VAR 0 6
41000: PUSH
41001: LD_VAR 0 2
41005: PUSH
41006: FOR_IN
41007: IFFALSE 41072
// begin weapons := AvailableWeaponList ( k ) ;
41009: LD_ADDR_VAR 0 9
41013: PUSH
41014: LD_VAR 0 6
41018: PPUSH
41019: CALL_OW 478
41023: ST_TO_ADDR
// if not weapons then
41024: LD_VAR 0 9
41028: NOT
41029: IFFALSE 41033
// continue ;
41031: GO 41006
// if weapon in weapons then
41033: LD_VAR 0 8
41037: PUSH
41038: LD_VAR 0 9
41042: IN
41043: IFFALSE 41070
// begin result := [ i , weapon ] ;
41045: LD_ADDR_VAR 0 3
41049: PUSH
41050: LD_VAR 0 4
41054: PUSH
41055: LD_VAR 0 8
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: ST_TO_ADDR
// exit ;
41064: POP
41065: POP
41066: POP
41067: POP
41068: GO 41078
// end ; end ;
41070: GO 41006
41072: POP
41073: POP
// end ;
41074: GO 40892
41076: POP
41077: POP
// end ;
41078: LD_VAR 0 3
41082: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41083: LD_INT 0
41085: PPUSH
// if not side or side > 8 then
41086: LD_VAR 0 3
41090: NOT
41091: IFTRUE 41103
41093: PUSH
41094: LD_VAR 0 3
41098: PUSH
41099: LD_INT 8
41101: GREATER
41102: OR
41103: IFFALSE 41107
// exit ;
41105: GO 41166
// if not range then
41107: LD_VAR 0 4
41111: NOT
41112: IFFALSE 41123
// range := - 12 ;
41114: LD_ADDR_VAR 0 4
41118: PUSH
41119: LD_INT 12
41121: NEG
41122: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41123: LD_VAR 0 1
41127: PPUSH
41128: LD_VAR 0 2
41132: PPUSH
41133: LD_VAR 0 3
41137: PPUSH
41138: LD_VAR 0 4
41142: PPUSH
41143: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41147: LD_VAR 0 1
41151: PPUSH
41152: LD_VAR 0 2
41156: PPUSH
41157: LD_VAR 0 3
41161: PPUSH
41162: CALL_OW 331
// end ;
41166: LD_VAR 0 5
41170: RET
// export function Video ( mode ) ; begin
41171: LD_INT 0
41173: PPUSH
// ingame_video = mode ;
41174: LD_ADDR_OWVAR 52
41178: PUSH
41179: LD_VAR 0 1
41183: ST_TO_ADDR
// interface_hidden = mode ;
41184: LD_ADDR_OWVAR 54
41188: PUSH
41189: LD_VAR 0 1
41193: ST_TO_ADDR
// end ;
41194: LD_VAR 0 2
41198: RET
// export function Join ( array , element ) ; begin
41199: LD_INT 0
41201: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41202: LD_ADDR_VAR 0 3
41206: PUSH
41207: LD_VAR 0 1
41211: PPUSH
41212: LD_VAR 0 1
41216: PUSH
41217: LD_INT 1
41219: PLUS
41220: PPUSH
41221: LD_VAR 0 2
41225: PPUSH
41226: CALL_OW 1
41230: ST_TO_ADDR
// end ;
41231: LD_VAR 0 3
41235: RET
// export function JoinUnion ( array , element ) ; begin
41236: LD_INT 0
41238: PPUSH
// result := array union element ;
41239: LD_ADDR_VAR 0 3
41243: PUSH
41244: LD_VAR 0 1
41248: PUSH
41249: LD_VAR 0 2
41253: UNION
41254: ST_TO_ADDR
// end ;
41255: LD_VAR 0 3
41259: RET
// export function GetBehemoths ( side ) ; begin
41260: LD_INT 0
41262: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41263: LD_ADDR_VAR 0 2
41267: PUSH
41268: LD_INT 22
41270: PUSH
41271: LD_VAR 0 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 31
41282: PUSH
41283: LD_INT 25
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PPUSH
41294: CALL_OW 69
41298: ST_TO_ADDR
// end ;
41299: LD_VAR 0 2
41303: RET
// export function Shuffle ( array ) ; var i , index ; begin
41304: LD_INT 0
41306: PPUSH
41307: PPUSH
41308: PPUSH
// result := [ ] ;
41309: LD_ADDR_VAR 0 2
41313: PUSH
41314: EMPTY
41315: ST_TO_ADDR
// if not array then
41316: LD_VAR 0 1
41320: NOT
41321: IFFALSE 41325
// exit ;
41323: GO 41424
// Randomize ;
41325: CALL_OW 10
// for i = array downto 1 do
41329: LD_ADDR_VAR 0 3
41333: PUSH
41334: DOUBLE
41335: LD_VAR 0 1
41339: INC
41340: ST_TO_ADDR
41341: LD_INT 1
41343: PUSH
41344: FOR_DOWNTO
41345: IFFALSE 41422
// begin index := rand ( 1 , array ) ;
41347: LD_ADDR_VAR 0 4
41351: PUSH
41352: LD_INT 1
41354: PPUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: CALL_OW 12
41364: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41365: LD_ADDR_VAR 0 2
41369: PUSH
41370: LD_VAR 0 2
41374: PPUSH
41375: LD_VAR 0 2
41379: PUSH
41380: LD_INT 1
41382: PLUS
41383: PPUSH
41384: LD_VAR 0 1
41388: PUSH
41389: LD_VAR 0 4
41393: ARRAY
41394: PPUSH
41395: CALL_OW 2
41399: ST_TO_ADDR
// array := Delete ( array , index ) ;
41400: LD_ADDR_VAR 0 1
41404: PUSH
41405: LD_VAR 0 1
41409: PPUSH
41410: LD_VAR 0 4
41414: PPUSH
41415: CALL_OW 3
41419: ST_TO_ADDR
// end ;
41420: GO 41344
41422: POP
41423: POP
// end ;
41424: LD_VAR 0 2
41428: RET
// export function GetBaseMaterials ( base ) ; begin
41429: LD_INT 0
41431: PPUSH
// result := [ 0 , 0 , 0 ] ;
41432: LD_ADDR_VAR 0 2
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: ST_TO_ADDR
// if not base then
41451: LD_VAR 0 1
41455: NOT
41456: IFFALSE 41460
// exit ;
41458: GO 41509
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41460: LD_ADDR_VAR 0 2
41464: PUSH
41465: LD_VAR 0 1
41469: PPUSH
41470: LD_INT 1
41472: PPUSH
41473: CALL_OW 275
41477: PUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: LD_INT 2
41485: PPUSH
41486: CALL_OW 275
41490: PUSH
41491: LD_VAR 0 1
41495: PPUSH
41496: LD_INT 3
41498: PPUSH
41499: CALL_OW 275
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: ST_TO_ADDR
// end ;
41509: LD_VAR 0 2
41513: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41514: LD_INT 0
41516: PPUSH
41517: PPUSH
// result := array ;
41518: LD_ADDR_VAR 0 3
41522: PUSH
41523: LD_VAR 0 1
41527: ST_TO_ADDR
// if size >= result then
41528: LD_VAR 0 2
41532: PUSH
41533: LD_VAR 0 3
41537: GREATEREQUAL
41538: IFFALSE 41542
// exit ;
41540: GO 41592
// if size then
41542: LD_VAR 0 2
41546: IFFALSE 41592
// for i := array downto size do
41548: LD_ADDR_VAR 0 4
41552: PUSH
41553: DOUBLE
41554: LD_VAR 0 1
41558: INC
41559: ST_TO_ADDR
41560: LD_VAR 0 2
41564: PUSH
41565: FOR_DOWNTO
41566: IFFALSE 41590
// result := Delete ( result , result ) ;
41568: LD_ADDR_VAR 0 3
41572: PUSH
41573: LD_VAR 0 3
41577: PPUSH
41578: LD_VAR 0 3
41582: PPUSH
41583: CALL_OW 3
41587: ST_TO_ADDR
41588: GO 41565
41590: POP
41591: POP
// end ;
41592: LD_VAR 0 3
41596: RET
// export function ComExit ( unit ) ; var tmp ; begin
41597: LD_INT 0
41599: PPUSH
41600: PPUSH
// if not IsInUnit ( unit ) then
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 310
41610: NOT
41611: IFFALSE 41615
// exit ;
41613: GO 41675
// tmp := IsInUnit ( unit ) ;
41615: LD_ADDR_VAR 0 3
41619: PUSH
41620: LD_VAR 0 1
41624: PPUSH
41625: CALL_OW 310
41629: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41630: LD_VAR 0 3
41634: PPUSH
41635: CALL_OW 247
41639: PUSH
41640: LD_INT 2
41642: EQUAL
41643: IFFALSE 41656
// ComExitVehicle ( unit ) else
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 121
41654: GO 41665
// ComExitBuilding ( unit ) ;
41656: LD_VAR 0 1
41660: PPUSH
41661: CALL_OW 122
// result := tmp ;
41665: LD_ADDR_VAR 0 2
41669: PUSH
41670: LD_VAR 0 3
41674: ST_TO_ADDR
// end ;
41675: LD_VAR 0 2
41679: RET
// export function ComExitAll ( units ) ; var i ; begin
41680: LD_INT 0
41682: PPUSH
41683: PPUSH
// if not units then
41684: LD_VAR 0 1
41688: NOT
41689: IFFALSE 41693
// exit ;
41691: GO 41719
// for i in units do
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_VAR 0 1
41702: PUSH
41703: FOR_IN
41704: IFFALSE 41717
// ComExit ( i ) ;
41706: LD_VAR 0 3
41710: PPUSH
41711: CALL 41597 0 1
41715: GO 41703
41717: POP
41718: POP
// end ;
41719: LD_VAR 0 2
41723: RET
// export function ResetHc ; begin
41724: LD_INT 0
41726: PPUSH
// InitHc ;
41727: CALL_OW 19
// hc_importance := 0 ;
41731: LD_ADDR_OWVAR 32
41735: PUSH
41736: LD_INT 0
41738: ST_TO_ADDR
// end ;
41739: LD_VAR 0 1
41743: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41744: LD_INT 0
41746: PPUSH
41747: PPUSH
41748: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41749: LD_ADDR_VAR 0 6
41753: PUSH
41754: LD_VAR 0 1
41758: PUSH
41759: LD_VAR 0 3
41763: PLUS
41764: PUSH
41765: LD_INT 2
41767: DIV
41768: ST_TO_ADDR
// if _x < 0 then
41769: LD_VAR 0 6
41773: PUSH
41774: LD_INT 0
41776: LESS
41777: IFFALSE 41794
// _x := _x * - 1 ;
41779: LD_ADDR_VAR 0 6
41783: PUSH
41784: LD_VAR 0 6
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: MUL
41793: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41794: LD_ADDR_VAR 0 7
41798: PUSH
41799: LD_VAR 0 2
41803: PUSH
41804: LD_VAR 0 4
41808: PLUS
41809: PUSH
41810: LD_INT 2
41812: DIV
41813: ST_TO_ADDR
// if _y < 0 then
41814: LD_VAR 0 7
41818: PUSH
41819: LD_INT 0
41821: LESS
41822: IFFALSE 41839
// _y := _y * - 1 ;
41824: LD_ADDR_VAR 0 7
41828: PUSH
41829: LD_VAR 0 7
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: MUL
41838: ST_TO_ADDR
// result := [ _x , _y ] ;
41839: LD_ADDR_VAR 0 5
41843: PUSH
41844: LD_VAR 0 6
41848: PUSH
41849: LD_VAR 0 7
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: ST_TO_ADDR
// end ;
41858: LD_VAR 0 5
41862: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41863: LD_INT 0
41865: PPUSH
41866: PPUSH
41867: PPUSH
41868: PPUSH
// task := GetTaskList ( unit ) ;
41869: LD_ADDR_VAR 0 7
41873: PUSH
41874: LD_VAR 0 1
41878: PPUSH
41879: CALL_OW 437
41883: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41884: LD_VAR 0 7
41888: NOT
41889: IFFALSE 41908
41891: PUSH
41892: LD_VAR 0 1
41896: PPUSH
41897: LD_VAR 0 2
41901: PPUSH
41902: CALL_OW 308
41906: NOT
41907: AND
41908: IFFALSE 41912
// exit ;
41910: GO 42030
// if IsInArea ( unit , area ) then
41912: LD_VAR 0 1
41916: PPUSH
41917: LD_VAR 0 2
41921: PPUSH
41922: CALL_OW 308
41926: IFFALSE 41944
// begin ComMoveToArea ( unit , goAway ) ;
41928: LD_VAR 0 1
41932: PPUSH
41933: LD_VAR 0 3
41937: PPUSH
41938: CALL_OW 113
// exit ;
41942: GO 42030
// end ; if task [ 1 ] [ 1 ] <> M then
41944: LD_VAR 0 7
41948: PUSH
41949: LD_INT 1
41951: ARRAY
41952: PUSH
41953: LD_INT 1
41955: ARRAY
41956: PUSH
41957: LD_STRING M
41959: NONEQUAL
41960: IFFALSE 41964
// exit ;
41962: GO 42030
// x := task [ 1 ] [ 2 ] ;
41964: LD_ADDR_VAR 0 5
41968: PUSH
41969: LD_VAR 0 7
41973: PUSH
41974: LD_INT 1
41976: ARRAY
41977: PUSH
41978: LD_INT 2
41980: ARRAY
41981: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41982: LD_ADDR_VAR 0 6
41986: PUSH
41987: LD_VAR 0 7
41991: PUSH
41992: LD_INT 1
41994: ARRAY
41995: PUSH
41996: LD_INT 3
41998: ARRAY
41999: ST_TO_ADDR
// if InArea ( x , y , area ) then
42000: LD_VAR 0 5
42004: PPUSH
42005: LD_VAR 0 6
42009: PPUSH
42010: LD_VAR 0 2
42014: PPUSH
42015: CALL_OW 309
42019: IFFALSE 42030
// ComStop ( unit ) ;
42021: LD_VAR 0 1
42025: PPUSH
42026: CALL_OW 141
// end ;
42030: LD_VAR 0 4
42034: RET
// export function Abs ( value ) ; begin
42035: LD_INT 0
42037: PPUSH
// result := value ;
42038: LD_ADDR_VAR 0 2
42042: PUSH
42043: LD_VAR 0 1
42047: ST_TO_ADDR
// if value < 0 then
42048: LD_VAR 0 1
42052: PUSH
42053: LD_INT 0
42055: LESS
42056: IFFALSE 42073
// result := value * - 1 ;
42058: LD_ADDR_VAR 0 2
42062: PUSH
42063: LD_VAR 0 1
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: MUL
42072: ST_TO_ADDR
// end ;
42073: LD_VAR 0 2
42077: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42078: LD_INT 0
42080: PPUSH
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
// if not unit or not building then
42088: LD_VAR 0 1
42092: NOT
42093: IFTRUE 42102
42095: PUSH
42096: LD_VAR 0 2
42100: NOT
42101: OR
42102: IFFALSE 42106
// exit ;
42104: GO 42334
// x := GetX ( building ) ;
42106: LD_ADDR_VAR 0 4
42110: PUSH
42111: LD_VAR 0 2
42115: PPUSH
42116: CALL_OW 250
42120: ST_TO_ADDR
// y := GetY ( building ) ;
42121: LD_ADDR_VAR 0 6
42125: PUSH
42126: LD_VAR 0 2
42130: PPUSH
42131: CALL_OW 251
42135: ST_TO_ADDR
// d := GetDir ( building ) ;
42136: LD_ADDR_VAR 0 8
42140: PUSH
42141: LD_VAR 0 2
42145: PPUSH
42146: CALL_OW 254
42150: ST_TO_ADDR
// r := 4 ;
42151: LD_ADDR_VAR 0 9
42155: PUSH
42156: LD_INT 4
42158: ST_TO_ADDR
// for i := 1 to 5 do
42159: LD_ADDR_VAR 0 10
42163: PUSH
42164: DOUBLE
42165: LD_INT 1
42167: DEC
42168: ST_TO_ADDR
42169: LD_INT 5
42171: PUSH
42172: FOR_TO
42173: IFFALSE 42332
// begin _x := ShiftX ( x , d , r + i ) ;
42175: LD_ADDR_VAR 0 5
42179: PUSH
42180: LD_VAR 0 4
42184: PPUSH
42185: LD_VAR 0 8
42189: PPUSH
42190: LD_VAR 0 9
42194: PUSH
42195: LD_VAR 0 10
42199: PLUS
42200: PPUSH
42201: CALL_OW 272
42205: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42206: LD_ADDR_VAR 0 7
42210: PUSH
42211: LD_VAR 0 6
42215: PPUSH
42216: LD_VAR 0 8
42220: PPUSH
42221: LD_VAR 0 9
42225: PUSH
42226: LD_VAR 0 10
42230: PLUS
42231: PPUSH
42232: CALL_OW 273
42236: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42237: LD_VAR 0 5
42241: PPUSH
42242: LD_VAR 0 7
42246: PPUSH
42247: CALL_OW 488
42251: IFFALSE 42286
42253: PUSH
42254: LD_VAR 0 5
42258: PPUSH
42259: LD_VAR 0 7
42263: PPUSH
42264: CALL_OW 428
42268: PPUSH
42269: CALL_OW 247
42273: PUSH
42274: LD_INT 3
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: IN
42284: NOT
42285: AND
42286: IFFALSE 42330
// begin ComMoveXY ( unit , _x , _y ) ;
42288: LD_VAR 0 1
42292: PPUSH
42293: LD_VAR 0 5
42297: PPUSH
42298: LD_VAR 0 7
42302: PPUSH
42303: CALL_OW 111
// result := [ _x , _y ] ;
42307: LD_ADDR_VAR 0 3
42311: PUSH
42312: LD_VAR 0 5
42316: PUSH
42317: LD_VAR 0 7
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: ST_TO_ADDR
// exit ;
42326: POP
42327: POP
42328: GO 42334
// end ; end ;
42330: GO 42172
42332: POP
42333: POP
// end ;
42334: LD_VAR 0 3
42338: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42339: LD_INT 0
42341: PPUSH
42342: PPUSH
42343: PPUSH
// result := 0 ;
42344: LD_ADDR_VAR 0 3
42348: PUSH
42349: LD_INT 0
42351: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42352: LD_VAR 0 1
42356: PUSH
42357: LD_INT 0
42359: LESS
42360: IFTRUE 42372
42362: PUSH
42363: LD_VAR 0 1
42367: PUSH
42368: LD_INT 8
42370: GREATER
42371: OR
42372: IFTRUE 42384
42374: PUSH
42375: LD_VAR 0 2
42379: PUSH
42380: LD_INT 0
42382: LESS
42383: OR
42384: IFTRUE 42396
42386: PUSH
42387: LD_VAR 0 2
42391: PUSH
42392: LD_INT 8
42394: GREATER
42395: OR
42396: IFFALSE 42400
// exit ;
42398: GO 42475
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42400: LD_ADDR_VAR 0 4
42404: PUSH
42405: LD_INT 22
42407: PUSH
42408: LD_VAR 0 2
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PPUSH
42417: CALL_OW 69
42421: PUSH
42422: FOR_IN
42423: IFFALSE 42473
// begin un := UnitShoot ( i ) ;
42425: LD_ADDR_VAR 0 5
42429: PUSH
42430: LD_VAR 0 4
42434: PPUSH
42435: CALL_OW 504
42439: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42440: LD_VAR 0 5
42444: PPUSH
42445: CALL_OW 255
42449: PUSH
42450: LD_VAR 0 1
42454: EQUAL
42455: IFFALSE 42471
// begin result := un ;
42457: LD_ADDR_VAR 0 3
42461: PUSH
42462: LD_VAR 0 5
42466: ST_TO_ADDR
// exit ;
42467: POP
42468: POP
42469: GO 42475
// end ; end ;
42471: GO 42422
42473: POP
42474: POP
// end ;
42475: LD_VAR 0 3
42479: RET
// export function GetCargoBay ( units ) ; begin
42480: LD_INT 0
42482: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42483: LD_ADDR_VAR 0 2
42487: PUSH
42488: LD_VAR 0 1
42492: PPUSH
42493: LD_INT 2
42495: PUSH
42496: LD_INT 34
42498: PUSH
42499: LD_INT 12
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 34
42508: PUSH
42509: LD_INT 51
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 34
42518: PUSH
42519: LD_INT 32
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 34
42528: PUSH
42529: LD_INT 89
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: PPUSH
42543: CALL_OW 72
42547: ST_TO_ADDR
// end ;
42548: LD_VAR 0 2
42552: RET
// export function Negate ( value ) ; begin
42553: LD_INT 0
42555: PPUSH
// result := not value ;
42556: LD_ADDR_VAR 0 2
42560: PUSH
42561: LD_VAR 0 1
42565: NOT
42566: ST_TO_ADDR
// end ;
42567: LD_VAR 0 2
42571: RET
// export function Inc ( value ) ; begin
42572: LD_INT 0
42574: PPUSH
// result := value + 1 ;
42575: LD_ADDR_VAR 0 2
42579: PUSH
42580: LD_VAR 0 1
42584: PUSH
42585: LD_INT 1
42587: PLUS
42588: ST_TO_ADDR
// end ;
42589: LD_VAR 0 2
42593: RET
// export function Dec ( value ) ; begin
42594: LD_INT 0
42596: PPUSH
// result := value - 1 ;
42597: LD_ADDR_VAR 0 2
42601: PUSH
42602: LD_VAR 0 1
42606: PUSH
42607: LD_INT 1
42609: MINUS
42610: ST_TO_ADDR
// end ;
42611: LD_VAR 0 2
42615: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42616: LD_INT 0
42618: PPUSH
42619: PPUSH
42620: PPUSH
42621: PPUSH
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42626: LD_VAR 0 1
42630: PPUSH
42631: LD_VAR 0 2
42635: PPUSH
42636: CALL_OW 488
42640: NOT
42641: IFTRUE 42660
42643: PUSH
42644: LD_VAR 0 3
42648: PPUSH
42649: LD_VAR 0 4
42653: PPUSH
42654: CALL_OW 488
42658: NOT
42659: OR
42660: IFFALSE 42673
// begin result := - 1 ;
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: ST_TO_ADDR
// exit ;
42671: GO 42908
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42673: LD_ADDR_VAR 0 12
42677: PUSH
42678: LD_VAR 0 1
42682: PPUSH
42683: LD_VAR 0 2
42687: PPUSH
42688: LD_VAR 0 3
42692: PPUSH
42693: LD_VAR 0 4
42697: PPUSH
42698: CALL 41744 0 4
42702: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42703: LD_ADDR_VAR 0 11
42707: PUSH
42708: LD_VAR 0 1
42712: PPUSH
42713: LD_VAR 0 2
42717: PPUSH
42718: LD_VAR 0 12
42722: PUSH
42723: LD_INT 1
42725: ARRAY
42726: PPUSH
42727: LD_VAR 0 12
42731: PUSH
42732: LD_INT 2
42734: ARRAY
42735: PPUSH
42736: CALL_OW 298
42740: ST_TO_ADDR
// distance := 9999 ;
42741: LD_ADDR_VAR 0 10
42745: PUSH
42746: LD_INT 9999
42748: ST_TO_ADDR
// for i := 0 to 5 do
42749: LD_ADDR_VAR 0 6
42753: PUSH
42754: DOUBLE
42755: LD_INT 0
42757: DEC
42758: ST_TO_ADDR
42759: LD_INT 5
42761: PUSH
42762: FOR_TO
42763: IFFALSE 42906
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42765: LD_ADDR_VAR 0 7
42769: PUSH
42770: LD_VAR 0 1
42774: PPUSH
42775: LD_VAR 0 6
42779: PPUSH
42780: LD_VAR 0 11
42784: PPUSH
42785: CALL_OW 272
42789: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42790: LD_ADDR_VAR 0 8
42794: PUSH
42795: LD_VAR 0 2
42799: PPUSH
42800: LD_VAR 0 6
42804: PPUSH
42805: LD_VAR 0 11
42809: PPUSH
42810: CALL_OW 273
42814: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42815: LD_VAR 0 7
42819: PPUSH
42820: LD_VAR 0 8
42824: PPUSH
42825: CALL_OW 488
42829: NOT
42830: IFFALSE 42834
// continue ;
42832: GO 42762
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42834: LD_ADDR_VAR 0 9
42838: PUSH
42839: LD_VAR 0 12
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: PPUSH
42848: LD_VAR 0 12
42852: PUSH
42853: LD_INT 2
42855: ARRAY
42856: PPUSH
42857: LD_VAR 0 7
42861: PPUSH
42862: LD_VAR 0 8
42866: PPUSH
42867: CALL_OW 298
42871: ST_TO_ADDR
// if tmp < distance then
42872: LD_VAR 0 9
42876: PUSH
42877: LD_VAR 0 10
42881: LESS
42882: IFFALSE 42904
// begin result := i ;
42884: LD_ADDR_VAR 0 5
42888: PUSH
42889: LD_VAR 0 6
42893: ST_TO_ADDR
// distance := tmp ;
42894: LD_ADDR_VAR 0 10
42898: PUSH
42899: LD_VAR 0 9
42903: ST_TO_ADDR
// end ; end ;
42904: GO 42762
42906: POP
42907: POP
// end ;
42908: LD_VAR 0 5
42912: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42913: LD_INT 0
42915: PPUSH
42916: PPUSH
// if not driver or not IsInUnit ( driver ) then
42917: LD_VAR 0 1
42921: NOT
42922: IFTRUE 42936
42924: PUSH
42925: LD_VAR 0 1
42929: PPUSH
42930: CALL_OW 310
42934: NOT
42935: OR
42936: IFFALSE 42940
// exit ;
42938: GO 43030
// vehicle := IsInUnit ( driver ) ;
42940: LD_ADDR_VAR 0 3
42944: PUSH
42945: LD_VAR 0 1
42949: PPUSH
42950: CALL_OW 310
42954: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42955: LD_VAR 0 1
42959: PPUSH
42960: LD_STRING \
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: PUSH
42990: LD_STRING E
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_VAR 0 3
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PPUSH
43026: CALL_OW 446
// end ;
43030: LD_VAR 0 2
43034: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43035: LD_INT 0
43037: PPUSH
43038: PPUSH
// if not driver or not IsInUnit ( driver ) then
43039: LD_VAR 0 1
43043: NOT
43044: IFTRUE 43058
43046: PUSH
43047: LD_VAR 0 1
43051: PPUSH
43052: CALL_OW 310
43056: NOT
43057: OR
43058: IFFALSE 43062
// exit ;
43060: GO 43152
// vehicle := IsInUnit ( driver ) ;
43062: LD_ADDR_VAR 0 3
43066: PUSH
43067: LD_VAR 0 1
43071: PPUSH
43072: CALL_OW 310
43076: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43077: LD_VAR 0 1
43081: PPUSH
43082: LD_STRING \
43084: PUSH
43085: LD_INT 0
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: PUSH
43112: LD_STRING E
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_VAR 0 3
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PPUSH
43148: CALL_OW 447
// end ;
43152: LD_VAR 0 2
43156: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43157: LD_INT 0
43159: PPUSH
43160: PPUSH
43161: PPUSH
// tmp := [ ] ;
43162: LD_ADDR_VAR 0 5
43166: PUSH
43167: EMPTY
43168: ST_TO_ADDR
// for i in units do
43169: LD_ADDR_VAR 0 4
43173: PUSH
43174: LD_VAR 0 1
43178: PUSH
43179: FOR_IN
43180: IFFALSE 43218
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43182: LD_ADDR_VAR 0 5
43186: PUSH
43187: LD_VAR 0 5
43191: PPUSH
43192: LD_VAR 0 5
43196: PUSH
43197: LD_INT 1
43199: PLUS
43200: PPUSH
43201: LD_VAR 0 4
43205: PPUSH
43206: CALL_OW 256
43210: PPUSH
43211: CALL_OW 2
43215: ST_TO_ADDR
43216: GO 43179
43218: POP
43219: POP
// if not tmp then
43220: LD_VAR 0 5
43224: NOT
43225: IFFALSE 43229
// exit ;
43227: GO 43277
// if asc then
43229: LD_VAR 0 2
43233: IFFALSE 43257
// result := SortListByListAsc ( units , tmp ) else
43235: LD_ADDR_VAR 0 3
43239: PUSH
43240: LD_VAR 0 1
43244: PPUSH
43245: LD_VAR 0 5
43249: PPUSH
43250: CALL_OW 76
43254: ST_TO_ADDR
43255: GO 43277
// result := SortListByListDesc ( units , tmp ) ;
43257: LD_ADDR_VAR 0 3
43261: PUSH
43262: LD_VAR 0 1
43266: PPUSH
43267: LD_VAR 0 5
43271: PPUSH
43272: CALL_OW 77
43276: ST_TO_ADDR
// end ;
43277: LD_VAR 0 3
43281: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43282: LD_INT 0
43284: PPUSH
43285: PPUSH
// task := GetTaskList ( mech ) ;
43286: LD_ADDR_VAR 0 4
43290: PUSH
43291: LD_VAR 0 1
43295: PPUSH
43296: CALL_OW 437
43300: ST_TO_ADDR
// if not task then
43301: LD_VAR 0 4
43305: NOT
43306: IFFALSE 43310
// exit ;
43308: GO 43354
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43310: LD_ADDR_VAR 0 3
43314: PUSH
43315: LD_VAR 0 4
43319: PUSH
43320: LD_INT 1
43322: ARRAY
43323: PUSH
43324: LD_INT 1
43326: ARRAY
43327: PUSH
43328: LD_STRING r
43330: EQUAL
43331: IFFALSE 43353
43333: PUSH
43334: LD_VAR 0 4
43338: PUSH
43339: LD_INT 1
43341: ARRAY
43342: PUSH
43343: LD_INT 4
43345: ARRAY
43346: PUSH
43347: LD_VAR 0 2
43351: EQUAL
43352: AND
43353: ST_TO_ADDR
// end ;
43354: LD_VAR 0 3
43358: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43359: LD_INT 0
43361: PPUSH
// SetDir ( unit , d ) ;
43362: LD_VAR 0 1
43366: PPUSH
43367: LD_VAR 0 4
43371: PPUSH
43372: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43376: LD_ADDR_VAR 0 6
43380: PUSH
43381: LD_VAR 0 1
43385: PPUSH
43386: LD_VAR 0 2
43390: PPUSH
43391: LD_VAR 0 3
43395: PPUSH
43396: LD_VAR 0 5
43400: PPUSH
43401: CALL_OW 48
43405: ST_TO_ADDR
// end ;
43406: LD_VAR 0 6
43410: RET
// export function ToNaturalNumber ( number ) ; begin
43411: LD_INT 0
43413: PPUSH
// result := number div 1 ;
43414: LD_ADDR_VAR 0 2
43418: PUSH
43419: LD_VAR 0 1
43423: PUSH
43424: LD_INT 1
43426: DIV
43427: ST_TO_ADDR
// if number < 0 then
43428: LD_VAR 0 1
43432: PUSH
43433: LD_INT 0
43435: LESS
43436: IFFALSE 43446
// result := 0 ;
43438: LD_ADDR_VAR 0 2
43442: PUSH
43443: LD_INT 0
43445: ST_TO_ADDR
// end ;
43446: LD_VAR 0 2
43450: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43451: LD_INT 0
43453: PPUSH
43454: PPUSH
43455: PPUSH
// if not buildings then
43456: LD_VAR 0 1
43460: NOT
43461: IFFALSE 43465
// exit ;
43463: GO 43580
// tmp := [ ] ;
43465: LD_ADDR_VAR 0 5
43469: PUSH
43470: EMPTY
43471: ST_TO_ADDR
// for b in buildings do
43472: LD_ADDR_VAR 0 4
43476: PUSH
43477: LD_VAR 0 1
43481: PUSH
43482: FOR_IN
43483: IFFALSE 43521
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43485: LD_ADDR_VAR 0 5
43489: PUSH
43490: LD_VAR 0 5
43494: PPUSH
43495: LD_VAR 0 5
43499: PUSH
43500: LD_INT 1
43502: PLUS
43503: PPUSH
43504: LD_VAR 0 4
43508: PPUSH
43509: CALL_OW 266
43513: PPUSH
43514: CALL_OW 1
43518: ST_TO_ADDR
43519: GO 43482
43521: POP
43522: POP
// if not tmp then
43523: LD_VAR 0 5
43527: NOT
43528: IFFALSE 43532
// exit ;
43530: GO 43580
// if asc then
43532: LD_VAR 0 2
43536: IFFALSE 43560
// result := SortListByListAsc ( buildings , tmp ) else
43538: LD_ADDR_VAR 0 3
43542: PUSH
43543: LD_VAR 0 1
43547: PPUSH
43548: LD_VAR 0 5
43552: PPUSH
43553: CALL_OW 76
43557: ST_TO_ADDR
43558: GO 43580
// result := SortListByListDesc ( buildings , tmp ) ;
43560: LD_ADDR_VAR 0 3
43564: PUSH
43565: LD_VAR 0 1
43569: PPUSH
43570: LD_VAR 0 5
43574: PPUSH
43575: CALL_OW 77
43579: ST_TO_ADDR
// end ;
43580: LD_VAR 0 3
43584: RET
// export function SortByClass ( units , class ) ; var un ; begin
43585: LD_INT 0
43587: PPUSH
43588: PPUSH
// if not units or not class then
43589: LD_VAR 0 1
43593: NOT
43594: IFTRUE 43603
43596: PUSH
43597: LD_VAR 0 2
43601: NOT
43602: OR
43603: IFFALSE 43607
// exit ;
43605: GO 43702
// result := [ ] ;
43607: LD_ADDR_VAR 0 3
43611: PUSH
43612: EMPTY
43613: ST_TO_ADDR
// for un in units do
43614: LD_ADDR_VAR 0 4
43618: PUSH
43619: LD_VAR 0 1
43623: PUSH
43624: FOR_IN
43625: IFFALSE 43700
// if GetClass ( un ) = class then
43627: LD_VAR 0 4
43631: PPUSH
43632: CALL_OW 257
43636: PUSH
43637: LD_VAR 0 2
43641: EQUAL
43642: IFFALSE 43669
// result := Insert ( result , 1 , un ) else
43644: LD_ADDR_VAR 0 3
43648: PUSH
43649: LD_VAR 0 3
43653: PPUSH
43654: LD_INT 1
43656: PPUSH
43657: LD_VAR 0 4
43661: PPUSH
43662: CALL_OW 2
43666: ST_TO_ADDR
43667: GO 43698
// result := Replace ( result , result + 1 , un ) ;
43669: LD_ADDR_VAR 0 3
43673: PUSH
43674: LD_VAR 0 3
43678: PPUSH
43679: LD_VAR 0 3
43683: PUSH
43684: LD_INT 1
43686: PLUS
43687: PPUSH
43688: LD_VAR 0 4
43692: PPUSH
43693: CALL_OW 1
43697: ST_TO_ADDR
43698: GO 43624
43700: POP
43701: POP
// end ;
43702: LD_VAR 0 3
43706: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43707: LD_INT 0
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
43715: PPUSH
// result := [ ] ;
43716: LD_ADDR_VAR 0 4
43720: PUSH
43721: EMPTY
43722: ST_TO_ADDR
// if x - r < 0 then
43723: LD_VAR 0 1
43727: PUSH
43728: LD_VAR 0 3
43732: MINUS
43733: PUSH
43734: LD_INT 0
43736: LESS
43737: IFFALSE 43749
// min_x := 0 else
43739: LD_ADDR_VAR 0 8
43743: PUSH
43744: LD_INT 0
43746: ST_TO_ADDR
43747: GO 43765
// min_x := x - r ;
43749: LD_ADDR_VAR 0 8
43753: PUSH
43754: LD_VAR 0 1
43758: PUSH
43759: LD_VAR 0 3
43763: MINUS
43764: ST_TO_ADDR
// if y - r < 0 then
43765: LD_VAR 0 2
43769: PUSH
43770: LD_VAR 0 3
43774: MINUS
43775: PUSH
43776: LD_INT 0
43778: LESS
43779: IFFALSE 43791
// min_y := 0 else
43781: LD_ADDR_VAR 0 7
43785: PUSH
43786: LD_INT 0
43788: ST_TO_ADDR
43789: GO 43807
// min_y := y - r ;
43791: LD_ADDR_VAR 0 7
43795: PUSH
43796: LD_VAR 0 2
43800: PUSH
43801: LD_VAR 0 3
43805: MINUS
43806: ST_TO_ADDR
// max_x := x + r ;
43807: LD_ADDR_VAR 0 9
43811: PUSH
43812: LD_VAR 0 1
43816: PUSH
43817: LD_VAR 0 3
43821: PLUS
43822: ST_TO_ADDR
// max_y := y + r ;
43823: LD_ADDR_VAR 0 10
43827: PUSH
43828: LD_VAR 0 2
43832: PUSH
43833: LD_VAR 0 3
43837: PLUS
43838: ST_TO_ADDR
// for _x = min_x to max_x do
43839: LD_ADDR_VAR 0 5
43843: PUSH
43844: DOUBLE
43845: LD_VAR 0 8
43849: DEC
43850: ST_TO_ADDR
43851: LD_VAR 0 9
43855: PUSH
43856: FOR_TO
43857: IFFALSE 43958
// for _y = min_y to max_y do
43859: LD_ADDR_VAR 0 6
43863: PUSH
43864: DOUBLE
43865: LD_VAR 0 7
43869: DEC
43870: ST_TO_ADDR
43871: LD_VAR 0 10
43875: PUSH
43876: FOR_TO
43877: IFFALSE 43954
// begin if not ValidHex ( _x , _y ) then
43879: LD_VAR 0 5
43883: PPUSH
43884: LD_VAR 0 6
43888: PPUSH
43889: CALL_OW 488
43893: NOT
43894: IFFALSE 43898
// continue ;
43896: GO 43876
// if GetResourceTypeXY ( _x , _y ) then
43898: LD_VAR 0 5
43902: PPUSH
43903: LD_VAR 0 6
43907: PPUSH
43908: CALL_OW 283
43912: IFFALSE 43952
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43914: LD_ADDR_VAR 0 4
43918: PUSH
43919: LD_VAR 0 4
43923: PPUSH
43924: LD_VAR 0 4
43928: PUSH
43929: LD_INT 1
43931: PLUS
43932: PPUSH
43933: LD_VAR 0 5
43937: PUSH
43938: LD_VAR 0 6
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PPUSH
43947: CALL_OW 1
43951: ST_TO_ADDR
// end ;
43952: GO 43876
43954: POP
43955: POP
43956: GO 43856
43958: POP
43959: POP
// end ;
43960: LD_VAR 0 4
43964: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43965: LD_INT 0
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
// if not units then
43975: LD_VAR 0 1
43979: NOT
43980: IFFALSE 43984
// exit ;
43982: GO 44516
// result := UnitFilter ( units , [ f_ok ] ) ;
43984: LD_ADDR_VAR 0 3
43988: PUSH
43989: LD_VAR 0 1
43993: PPUSH
43994: LD_INT 50
43996: PUSH
43997: EMPTY
43998: LIST
43999: PPUSH
44000: CALL_OW 72
44004: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44005: LD_ADDR_VAR 0 8
44009: PUSH
44010: LD_VAR 0 1
44014: PUSH
44015: LD_INT 1
44017: ARRAY
44018: PPUSH
44019: CALL_OW 255
44023: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44024: LD_ADDR_VAR 0 10
44028: PUSH
44029: LD_INT 29
44031: PUSH
44032: LD_INT 91
44034: PUSH
44035: LD_INT 49
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: ST_TO_ADDR
// if not result then
44043: LD_VAR 0 3
44047: NOT
44048: IFFALSE 44052
// exit ;
44050: GO 44516
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44052: LD_ADDR_VAR 0 5
44056: PUSH
44057: LD_INT 81
44059: PUSH
44060: LD_VAR 0 8
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PPUSH
44069: CALL_OW 69
44073: ST_TO_ADDR
// for i in result do
44074: LD_ADDR_VAR 0 4
44078: PUSH
44079: LD_VAR 0 3
44083: PUSH
44084: FOR_IN
44085: IFFALSE 44514
// begin tag := GetTag ( i ) + 1 ;
44087: LD_ADDR_VAR 0 9
44091: PUSH
44092: LD_VAR 0 4
44096: PPUSH
44097: CALL_OW 110
44101: PUSH
44102: LD_INT 1
44104: PLUS
44105: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44106: LD_ADDR_VAR 0 7
44110: PUSH
44111: LD_VAR 0 4
44115: PPUSH
44116: CALL_OW 250
44120: PPUSH
44121: LD_VAR 0 4
44125: PPUSH
44126: CALL_OW 251
44130: PPUSH
44131: LD_INT 4
44133: PPUSH
44134: CALL 43707 0 3
44138: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44139: LD_VAR 0 4
44143: PPUSH
44144: CALL_OW 247
44148: PUSH
44149: LD_INT 2
44151: EQUAL
44152: IFFALSE 44164
44154: PUSH
44155: LD_VAR 0 7
44159: PUSH
44160: LD_INT 2
44162: GREATER
44163: AND
44164: IFFALSE 44184
44166: PUSH
44167: LD_VAR 0 4
44171: PPUSH
44172: CALL_OW 264
44176: PUSH
44177: LD_VAR 0 10
44181: IN
44182: NOT
44183: AND
44184: IFFALSE 44223
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44186: LD_VAR 0 4
44190: PPUSH
44191: LD_VAR 0 7
44195: PUSH
44196: LD_INT 1
44198: ARRAY
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: PPUSH
44204: LD_VAR 0 7
44208: PUSH
44209: LD_INT 1
44211: ARRAY
44212: PUSH
44213: LD_INT 2
44215: ARRAY
44216: PPUSH
44217: CALL_OW 116
44221: GO 44512
// if path > tag then
44223: LD_VAR 0 2
44227: PUSH
44228: LD_VAR 0 9
44232: GREATER
44233: IFFALSE 44441
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44235: LD_ADDR_VAR 0 6
44239: PUSH
44240: LD_VAR 0 5
44244: PPUSH
44245: LD_INT 91
44247: PUSH
44248: LD_VAR 0 4
44252: PUSH
44253: LD_INT 8
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: LIST
44260: PPUSH
44261: CALL_OW 72
44265: ST_TO_ADDR
// if nearEnemy then
44266: LD_VAR 0 6
44270: IFFALSE 44339
// begin if GetWeapon ( i ) = ru_time_lapser then
44272: LD_VAR 0 4
44276: PPUSH
44277: CALL_OW 264
44281: PUSH
44282: LD_INT 49
44284: EQUAL
44285: IFFALSE 44313
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44287: LD_VAR 0 4
44291: PPUSH
44292: LD_VAR 0 6
44296: PPUSH
44297: LD_VAR 0 4
44301: PPUSH
44302: CALL_OW 74
44306: PPUSH
44307: CALL_OW 112
44311: GO 44337
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44313: LD_VAR 0 4
44317: PPUSH
44318: LD_VAR 0 6
44322: PPUSH
44323: LD_VAR 0 4
44327: PPUSH
44328: CALL_OW 74
44332: PPUSH
44333: CALL 45597 0 2
// end else
44337: GO 44439
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44339: LD_VAR 0 4
44343: PPUSH
44344: LD_VAR 0 2
44348: PUSH
44349: LD_VAR 0 9
44353: ARRAY
44354: PUSH
44355: LD_INT 1
44357: ARRAY
44358: PPUSH
44359: LD_VAR 0 2
44363: PUSH
44364: LD_VAR 0 9
44368: ARRAY
44369: PUSH
44370: LD_INT 2
44372: ARRAY
44373: PPUSH
44374: CALL_OW 297
44378: PUSH
44379: LD_INT 6
44381: GREATER
44382: IFFALSE 44425
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44384: LD_VAR 0 4
44388: PPUSH
44389: LD_VAR 0 2
44393: PUSH
44394: LD_VAR 0 9
44398: ARRAY
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: PPUSH
44404: LD_VAR 0 2
44408: PUSH
44409: LD_VAR 0 9
44413: ARRAY
44414: PUSH
44415: LD_INT 2
44417: ARRAY
44418: PPUSH
44419: CALL_OW 114
44423: GO 44439
// SetTag ( i , tag ) ;
44425: LD_VAR 0 4
44429: PPUSH
44430: LD_VAR 0 9
44434: PPUSH
44435: CALL_OW 109
// end else
44439: GO 44512
// if enemy then
44441: LD_VAR 0 5
44445: IFFALSE 44512
// begin if GetWeapon ( i ) = ru_time_lapser then
44447: LD_VAR 0 4
44451: PPUSH
44452: CALL_OW 264
44456: PUSH
44457: LD_INT 49
44459: EQUAL
44460: IFFALSE 44488
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44462: LD_VAR 0 4
44466: PPUSH
44467: LD_VAR 0 5
44471: PPUSH
44472: LD_VAR 0 4
44476: PPUSH
44477: CALL_OW 74
44481: PPUSH
44482: CALL_OW 112
44486: GO 44512
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44488: LD_VAR 0 4
44492: PPUSH
44493: LD_VAR 0 5
44497: PPUSH
44498: LD_VAR 0 4
44502: PPUSH
44503: CALL_OW 74
44507: PPUSH
44508: CALL 45597 0 2
// end ; end ;
44512: GO 44084
44514: POP
44515: POP
// end ;
44516: LD_VAR 0 3
44520: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44521: LD_INT 0
44523: PPUSH
44524: PPUSH
44525: PPUSH
// if not unit or IsInUnit ( unit ) then
44526: LD_VAR 0 1
44530: NOT
44531: IFTRUE 44544
44533: PUSH
44534: LD_VAR 0 1
44538: PPUSH
44539: CALL_OW 310
44543: OR
44544: IFFALSE 44548
// exit ;
44546: GO 44639
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44548: LD_ADDR_VAR 0 4
44552: PUSH
44553: LD_VAR 0 1
44557: PPUSH
44558: CALL_OW 250
44562: PPUSH
44563: LD_VAR 0 2
44567: PPUSH
44568: LD_INT 1
44570: PPUSH
44571: CALL_OW 272
44575: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44576: LD_ADDR_VAR 0 5
44580: PUSH
44581: LD_VAR 0 1
44585: PPUSH
44586: CALL_OW 251
44590: PPUSH
44591: LD_VAR 0 2
44595: PPUSH
44596: LD_INT 1
44598: PPUSH
44599: CALL_OW 273
44603: ST_TO_ADDR
// if ValidHex ( x , y ) then
44604: LD_VAR 0 4
44608: PPUSH
44609: LD_VAR 0 5
44613: PPUSH
44614: CALL_OW 488
44618: IFFALSE 44639
// ComTurnXY ( unit , x , y ) ;
44620: LD_VAR 0 1
44624: PPUSH
44625: LD_VAR 0 4
44629: PPUSH
44630: LD_VAR 0 5
44634: PPUSH
44635: CALL_OW 118
// end ;
44639: LD_VAR 0 3
44643: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44644: LD_INT 0
44646: PPUSH
44647: PPUSH
// result := false ;
44648: LD_ADDR_VAR 0 3
44652: PUSH
44653: LD_INT 0
44655: ST_TO_ADDR
// if not units then
44656: LD_VAR 0 2
44660: NOT
44661: IFFALSE 44665
// exit ;
44663: GO 44710
// for i in units do
44665: LD_ADDR_VAR 0 4
44669: PUSH
44670: LD_VAR 0 2
44674: PUSH
44675: FOR_IN
44676: IFFALSE 44708
// if See ( side , i ) then
44678: LD_VAR 0 1
44682: PPUSH
44683: LD_VAR 0 4
44687: PPUSH
44688: CALL_OW 292
44692: IFFALSE 44706
// begin result := true ;
44694: LD_ADDR_VAR 0 3
44698: PUSH
44699: LD_INT 1
44701: ST_TO_ADDR
// exit ;
44702: POP
44703: POP
44704: GO 44710
// end ;
44706: GO 44675
44708: POP
44709: POP
// end ;
44710: LD_VAR 0 3
44714: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44715: LD_INT 0
44717: PPUSH
44718: PPUSH
44719: PPUSH
44720: PPUSH
// if not unit or not points then
44721: LD_VAR 0 1
44725: NOT
44726: IFTRUE 44735
44728: PUSH
44729: LD_VAR 0 2
44733: NOT
44734: OR
44735: IFFALSE 44739
// exit ;
44737: GO 44829
// dist := 99999 ;
44739: LD_ADDR_VAR 0 5
44743: PUSH
44744: LD_INT 99999
44746: ST_TO_ADDR
// for i in points do
44747: LD_ADDR_VAR 0 4
44751: PUSH
44752: LD_VAR 0 2
44756: PUSH
44757: FOR_IN
44758: IFFALSE 44827
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44760: LD_ADDR_VAR 0 6
44764: PUSH
44765: LD_VAR 0 1
44769: PPUSH
44770: LD_VAR 0 4
44774: PUSH
44775: LD_INT 1
44777: ARRAY
44778: PPUSH
44779: LD_VAR 0 4
44783: PUSH
44784: LD_INT 2
44786: ARRAY
44787: PPUSH
44788: CALL_OW 297
44792: ST_TO_ADDR
// if tmpDist < dist then
44793: LD_VAR 0 6
44797: PUSH
44798: LD_VAR 0 5
44802: LESS
44803: IFFALSE 44825
// begin result := i ;
44805: LD_ADDR_VAR 0 3
44809: PUSH
44810: LD_VAR 0 4
44814: ST_TO_ADDR
// dist := tmpDist ;
44815: LD_ADDR_VAR 0 5
44819: PUSH
44820: LD_VAR 0 6
44824: ST_TO_ADDR
// end ; end ;
44825: GO 44757
44827: POP
44828: POP
// end ;
44829: LD_VAR 0 3
44833: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44834: LD_INT 0
44836: PPUSH
// uc_side := side ;
44837: LD_ADDR_OWVAR 20
44841: PUSH
44842: LD_VAR 0 1
44846: ST_TO_ADDR
// uc_nation := 3 ;
44847: LD_ADDR_OWVAR 21
44851: PUSH
44852: LD_INT 3
44854: ST_TO_ADDR
// vc_chassis := 25 ;
44855: LD_ADDR_OWVAR 37
44859: PUSH
44860: LD_INT 25
44862: ST_TO_ADDR
// vc_engine := engine_siberite ;
44863: LD_ADDR_OWVAR 39
44867: PUSH
44868: LD_INT 3
44870: ST_TO_ADDR
// vc_control := control_computer ;
44871: LD_ADDR_OWVAR 38
44875: PUSH
44876: LD_INT 3
44878: ST_TO_ADDR
// vc_weapon := 59 ;
44879: LD_ADDR_OWVAR 40
44883: PUSH
44884: LD_INT 59
44886: ST_TO_ADDR
// result := CreateVehicle ;
44887: LD_ADDR_VAR 0 5
44891: PUSH
44892: CALL_OW 45
44896: ST_TO_ADDR
// SetDir ( result , d ) ;
44897: LD_VAR 0 5
44901: PPUSH
44902: LD_VAR 0 4
44906: PPUSH
44907: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44911: LD_VAR 0 5
44915: PPUSH
44916: LD_VAR 0 2
44920: PPUSH
44921: LD_VAR 0 3
44925: PPUSH
44926: LD_INT 0
44928: PPUSH
44929: CALL_OW 48
// end ;
44933: LD_VAR 0 5
44937: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44938: LD_INT 0
44940: PPUSH
44941: PPUSH
44942: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44943: LD_ADDR_VAR 0 2
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44966: LD_VAR 0 1
44970: NOT
44971: IFTRUE 45004
44973: PUSH
44974: LD_VAR 0 1
44978: PPUSH
44979: CALL_OW 264
44983: PUSH
44984: LD_INT 12
44986: PUSH
44987: LD_INT 51
44989: PUSH
44990: LD_INT 32
44992: PUSH
44993: LD_INT 89
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: IN
45002: NOT
45003: OR
45004: IFFALSE 45008
// exit ;
45006: GO 45106
// for i := 1 to 3 do
45008: LD_ADDR_VAR 0 3
45012: PUSH
45013: DOUBLE
45014: LD_INT 1
45016: DEC
45017: ST_TO_ADDR
45018: LD_INT 3
45020: PUSH
45021: FOR_TO
45022: IFFALSE 45104
// begin tmp := GetCargo ( cargo , i ) ;
45024: LD_ADDR_VAR 0 4
45028: PUSH
45029: LD_VAR 0 1
45033: PPUSH
45034: LD_VAR 0 3
45038: PPUSH
45039: CALL_OW 289
45043: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45044: LD_ADDR_VAR 0 2
45048: PUSH
45049: LD_VAR 0 2
45053: PPUSH
45054: LD_VAR 0 3
45058: PPUSH
45059: LD_VAR 0 4
45063: PPUSH
45064: CALL_OW 1
45068: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45069: LD_ADDR_VAR 0 2
45073: PUSH
45074: LD_VAR 0 2
45078: PPUSH
45079: LD_INT 4
45081: PPUSH
45082: LD_VAR 0 2
45086: PUSH
45087: LD_INT 4
45089: ARRAY
45090: PUSH
45091: LD_VAR 0 4
45095: PLUS
45096: PPUSH
45097: CALL_OW 1
45101: ST_TO_ADDR
// end ;
45102: GO 45021
45104: POP
45105: POP
// end ;
45106: LD_VAR 0 2
45110: RET
// export function Length ( array ) ; begin
45111: LD_INT 0
45113: PPUSH
// result := array + 0 ;
45114: LD_ADDR_VAR 0 2
45118: PUSH
45119: LD_VAR 0 1
45123: PUSH
45124: LD_INT 0
45126: PLUS
45127: ST_TO_ADDR
// end ;
45128: LD_VAR 0 2
45132: RET
// export function PrepareArray ( array ) ; begin
45133: LD_INT 0
45135: PPUSH
// result := array diff 0 ;
45136: LD_ADDR_VAR 0 2
45140: PUSH
45141: LD_VAR 0 1
45145: PUSH
45146: LD_INT 0
45148: DIFF
45149: ST_TO_ADDR
// if not result [ 1 ] then
45150: LD_VAR 0 2
45154: PUSH
45155: LD_INT 1
45157: ARRAY
45158: NOT
45159: IFFALSE 45179
// result := Delete ( result , 1 ) ;
45161: LD_ADDR_VAR 0 2
45165: PUSH
45166: LD_VAR 0 2
45170: PPUSH
45171: LD_INT 1
45173: PPUSH
45174: CALL_OW 3
45178: ST_TO_ADDR
// end ;
45179: LD_VAR 0 2
45183: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45184: LD_INT 0
45186: PPUSH
45187: PPUSH
45188: PPUSH
45189: PPUSH
// sibRocketRange := 25 ;
45190: LD_ADDR_VAR 0 6
45194: PUSH
45195: LD_INT 25
45197: ST_TO_ADDR
// result := false ;
45198: LD_ADDR_VAR 0 4
45202: PUSH
45203: LD_INT 0
45205: ST_TO_ADDR
// for i := 0 to 5 do
45206: LD_ADDR_VAR 0 5
45210: PUSH
45211: DOUBLE
45212: LD_INT 0
45214: DEC
45215: ST_TO_ADDR
45216: LD_INT 5
45218: PUSH
45219: FOR_TO
45220: IFFALSE 45287
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45222: LD_VAR 0 1
45226: PPUSH
45227: LD_VAR 0 5
45231: PPUSH
45232: LD_VAR 0 6
45236: PPUSH
45237: CALL_OW 272
45241: PPUSH
45242: LD_VAR 0 2
45246: PPUSH
45247: LD_VAR 0 5
45251: PPUSH
45252: LD_VAR 0 6
45256: PPUSH
45257: CALL_OW 273
45261: PPUSH
45262: LD_VAR 0 3
45266: PPUSH
45267: CALL_OW 309
45271: IFFALSE 45285
// begin result := true ;
45273: LD_ADDR_VAR 0 4
45277: PUSH
45278: LD_INT 1
45280: ST_TO_ADDR
// exit ;
45281: POP
45282: POP
45283: GO 45289
// end ;
45285: GO 45219
45287: POP
45288: POP
// end ;
45289: LD_VAR 0 4
45293: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45294: LD_INT 0
45296: PPUSH
45297: PPUSH
45298: PPUSH
// if btype = b_depot then
45299: LD_VAR 0 2
45303: PUSH
45304: LD_INT 0
45306: EQUAL
45307: IFFALSE 45319
// begin result := true ;
45309: LD_ADDR_VAR 0 3
45313: PUSH
45314: LD_INT 1
45316: ST_TO_ADDR
// exit ;
45317: GO 45439
// end ; pom := GetBase ( depot ) ;
45319: LD_ADDR_VAR 0 4
45323: PUSH
45324: LD_VAR 0 1
45328: PPUSH
45329: CALL_OW 274
45333: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45334: LD_ADDR_VAR 0 5
45338: PUSH
45339: LD_VAR 0 2
45343: PPUSH
45344: LD_VAR 0 1
45348: PPUSH
45349: CALL_OW 248
45353: PPUSH
45354: CALL_OW 450
45358: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45359: LD_ADDR_VAR 0 3
45363: PUSH
45364: LD_VAR 0 4
45368: PPUSH
45369: LD_INT 1
45371: PPUSH
45372: CALL_OW 275
45376: PUSH
45377: LD_VAR 0 5
45381: PUSH
45382: LD_INT 1
45384: ARRAY
45385: GREATEREQUAL
45386: IFFALSE 45412
45388: PUSH
45389: LD_VAR 0 4
45393: PPUSH
45394: LD_INT 2
45396: PPUSH
45397: CALL_OW 275
45401: PUSH
45402: LD_VAR 0 5
45406: PUSH
45407: LD_INT 2
45409: ARRAY
45410: GREATEREQUAL
45411: AND
45412: IFFALSE 45438
45414: PUSH
45415: LD_VAR 0 4
45419: PPUSH
45420: LD_INT 3
45422: PPUSH
45423: CALL_OW 275
45427: PUSH
45428: LD_VAR 0 5
45432: PUSH
45433: LD_INT 3
45435: ARRAY
45436: GREATEREQUAL
45437: AND
45438: ST_TO_ADDR
// end ;
45439: LD_VAR 0 3
45443: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45444: LD_INT 0
45446: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45447: LD_VAR 0 1
45451: PPUSH
45452: LD_VAR 0 2
45456: PPUSH
45457: LD_INT 0
45459: PPUSH
45460: LD_INT 0
45462: PPUSH
45463: LD_INT 1
45465: PPUSH
45466: LD_INT 0
45468: PPUSH
45469: CALL_OW 587
// end ;
45473: LD_VAR 0 3
45477: RET
// export function CenterOnNow ( unit ) ; begin
45478: LD_INT 0
45480: PPUSH
// result := IsInUnit ( unit ) ;
45481: LD_ADDR_VAR 0 2
45485: PUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: CALL_OW 310
45495: ST_TO_ADDR
// if not result then
45496: LD_VAR 0 2
45500: NOT
45501: IFFALSE 45513
// result := unit ;
45503: LD_ADDR_VAR 0 2
45507: PUSH
45508: LD_VAR 0 1
45512: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45513: LD_VAR 0 1
45517: PPUSH
45518: CALL_OW 87
// end ;
45522: LD_VAR 0 2
45526: RET
// export function ComMoveHex ( unit , hex ) ; begin
45527: LD_INT 0
45529: PPUSH
// if not hex then
45530: LD_VAR 0 2
45534: NOT
45535: IFFALSE 45539
// exit ;
45537: GO 45592
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45539: LD_VAR 0 2
45543: PUSH
45544: LD_INT 1
45546: ARRAY
45547: PPUSH
45548: LD_VAR 0 2
45552: PUSH
45553: LD_INT 2
45555: ARRAY
45556: PPUSH
45557: CALL_OW 428
45561: IFFALSE 45565
// exit ;
45563: GO 45592
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45565: LD_VAR 0 1
45569: PPUSH
45570: LD_VAR 0 2
45574: PUSH
45575: LD_INT 1
45577: ARRAY
45578: PPUSH
45579: LD_VAR 0 2
45583: PUSH
45584: LD_INT 2
45586: ARRAY
45587: PPUSH
45588: CALL_OW 111
// end ;
45592: LD_VAR 0 3
45596: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45597: LD_INT 0
45599: PPUSH
45600: PPUSH
45601: PPUSH
// if not unit or not enemy then
45602: LD_VAR 0 1
45606: NOT
45607: IFTRUE 45616
45609: PUSH
45610: LD_VAR 0 2
45614: NOT
45615: OR
45616: IFFALSE 45620
// exit ;
45618: GO 45746
// x := GetX ( enemy ) ;
45620: LD_ADDR_VAR 0 4
45624: PUSH
45625: LD_VAR 0 2
45629: PPUSH
45630: CALL_OW 250
45634: ST_TO_ADDR
// y := GetY ( enemy ) ;
45635: LD_ADDR_VAR 0 5
45639: PUSH
45640: LD_VAR 0 2
45644: PPUSH
45645: CALL_OW 251
45649: ST_TO_ADDR
// if ValidHex ( x , y ) then
45650: LD_VAR 0 4
45654: PPUSH
45655: LD_VAR 0 5
45659: PPUSH
45660: CALL_OW 488
45664: IFFALSE 45746
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45666: LD_VAR 0 2
45670: PPUSH
45671: CALL_OW 247
45675: PUSH
45676: LD_INT 3
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: IN
45686: IFTRUE 45709
45688: PUSH
45689: LD_VAR 0 1
45693: PPUSH
45694: CALL_OW 255
45698: PPUSH
45699: LD_VAR 0 2
45703: PPUSH
45704: CALL_OW 292
45708: OR
45709: IFFALSE 45727
// ComAttackUnit ( unit , enemy ) else
45711: LD_VAR 0 1
45715: PPUSH
45716: LD_VAR 0 2
45720: PPUSH
45721: CALL_OW 115
45725: GO 45746
// ComAgressiveMove ( unit , x , y ) ;
45727: LD_VAR 0 1
45731: PPUSH
45732: LD_VAR 0 4
45736: PPUSH
45737: LD_VAR 0 5
45741: PPUSH
45742: CALL_OW 114
// end ;
45746: LD_VAR 0 3
45750: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45751: LD_INT 0
45753: PPUSH
45754: PPUSH
45755: PPUSH
// list := AreaToList ( area , 0 ) ;
45756: LD_ADDR_VAR 0 5
45760: PUSH
45761: LD_VAR 0 1
45765: PPUSH
45766: LD_INT 0
45768: PPUSH
45769: CALL_OW 517
45773: ST_TO_ADDR
// if not list then
45774: LD_VAR 0 5
45778: NOT
45779: IFFALSE 45783
// exit ;
45781: GO 45913
// if all then
45783: LD_VAR 0 2
45787: IFFALSE 45875
// begin for i := 1 to list [ 1 ] do
45789: LD_ADDR_VAR 0 4
45793: PUSH
45794: DOUBLE
45795: LD_INT 1
45797: DEC
45798: ST_TO_ADDR
45799: LD_VAR 0 5
45803: PUSH
45804: LD_INT 1
45806: ARRAY
45807: PUSH
45808: FOR_TO
45809: IFFALSE 45871
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45811: LD_ADDR_VAR 0 3
45815: PUSH
45816: LD_VAR 0 3
45820: PPUSH
45821: LD_VAR 0 3
45825: PUSH
45826: LD_INT 1
45828: PLUS
45829: PPUSH
45830: LD_VAR 0 5
45834: PUSH
45835: LD_INT 1
45837: ARRAY
45838: PUSH
45839: LD_VAR 0 4
45843: ARRAY
45844: PUSH
45845: LD_VAR 0 5
45849: PUSH
45850: LD_INT 2
45852: ARRAY
45853: PUSH
45854: LD_VAR 0 4
45858: ARRAY
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PPUSH
45864: CALL_OW 1
45868: ST_TO_ADDR
45869: GO 45808
45871: POP
45872: POP
// exit ;
45873: GO 45913
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45875: LD_ADDR_VAR 0 3
45879: PUSH
45880: LD_VAR 0 5
45884: PUSH
45885: LD_INT 1
45887: ARRAY
45888: PUSH
45889: LD_INT 1
45891: ARRAY
45892: PUSH
45893: LD_VAR 0 5
45897: PUSH
45898: LD_INT 2
45900: ARRAY
45901: PUSH
45902: LD_INT 1
45904: ARRAY
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: EMPTY
45911: LIST
45912: ST_TO_ADDR
// end ;
45913: LD_VAR 0 3
45917: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45918: LD_INT 0
45920: PPUSH
45921: PPUSH
// list := AreaToList ( area , 0 ) ;
45922: LD_ADDR_VAR 0 4
45926: PUSH
45927: LD_VAR 0 1
45931: PPUSH
45932: LD_INT 0
45934: PPUSH
45935: CALL_OW 517
45939: ST_TO_ADDR
// if not list then
45940: LD_VAR 0 4
45944: NOT
45945: IFFALSE 45949
// exit ;
45947: GO 45990
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45949: LD_ADDR_VAR 0 3
45953: PUSH
45954: LD_VAR 0 4
45958: PUSH
45959: LD_INT 1
45961: ARRAY
45962: PUSH
45963: LD_INT 1
45965: ARRAY
45966: PUSH
45967: LD_VAR 0 4
45971: PUSH
45972: LD_INT 2
45974: ARRAY
45975: PUSH
45976: LD_INT 1
45978: ARRAY
45979: PUSH
45980: LD_VAR 0 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// end ;
45990: LD_VAR 0 3
45994: RET
// export function First ( array ) ; begin
45995: LD_INT 0
45997: PPUSH
// if not array then
45998: LD_VAR 0 1
46002: NOT
46003: IFFALSE 46007
// exit ;
46005: GO 46021
// result := array [ 1 ] ;
46007: LD_ADDR_VAR 0 2
46011: PUSH
46012: LD_VAR 0 1
46016: PUSH
46017: LD_INT 1
46019: ARRAY
46020: ST_TO_ADDR
// end ;
46021: LD_VAR 0 2
46025: RET
// export function Last ( array ) ; begin
46026: LD_INT 0
46028: PPUSH
// if not array then
46029: LD_VAR 0 1
46033: NOT
46034: IFFALSE 46038
// exit ;
46036: GO 46054
// result := array [ array ] ;
46038: LD_ADDR_VAR 0 2
46042: PUSH
46043: LD_VAR 0 1
46047: PUSH
46048: LD_VAR 0 1
46052: ARRAY
46053: ST_TO_ADDR
// end ;
46054: LD_VAR 0 2
46058: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46059: LD_INT 0
46061: PPUSH
46062: PPUSH
// result := [ ] ;
46063: LD_ADDR_VAR 0 5
46067: PUSH
46068: EMPTY
46069: ST_TO_ADDR
// if not array then
46070: LD_VAR 0 1
46074: NOT
46075: IFFALSE 46079
// exit ;
46077: GO 46191
// for i := 1 to array do
46079: LD_ADDR_VAR 0 6
46083: PUSH
46084: DOUBLE
46085: LD_INT 1
46087: DEC
46088: ST_TO_ADDR
46089: LD_VAR 0 1
46093: PUSH
46094: FOR_TO
46095: IFFALSE 46189
// if array [ i ] [ index ] = value then
46097: LD_VAR 0 1
46101: PUSH
46102: LD_VAR 0 6
46106: ARRAY
46107: PUSH
46108: LD_VAR 0 2
46112: ARRAY
46113: PUSH
46114: LD_VAR 0 3
46118: EQUAL
46119: IFFALSE 46187
// begin if indexColumn then
46121: LD_VAR 0 4
46125: IFFALSE 46161
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46127: LD_ADDR_VAR 0 5
46131: PUSH
46132: LD_VAR 0 5
46136: PPUSH
46137: LD_VAR 0 1
46141: PUSH
46142: LD_VAR 0 6
46146: ARRAY
46147: PUSH
46148: LD_VAR 0 4
46152: ARRAY
46153: PPUSH
46154: CALL 41199 0 2
46158: ST_TO_ADDR
46159: GO 46187
// result := Join ( result , array [ i ] ) ;
46161: LD_ADDR_VAR 0 5
46165: PUSH
46166: LD_VAR 0 5
46170: PPUSH
46171: LD_VAR 0 1
46175: PUSH
46176: LD_VAR 0 6
46180: ARRAY
46181: PPUSH
46182: CALL 41199 0 2
46186: ST_TO_ADDR
// end ;
46187: GO 46094
46189: POP
46190: POP
// end ;
46191: LD_VAR 0 5
46195: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46196: LD_INT 0
46198: PPUSH
// if not vehicles or not parkingPoint then
46199: LD_VAR 0 1
46203: NOT
46204: IFTRUE 46213
46206: PUSH
46207: LD_VAR 0 2
46211: NOT
46212: OR
46213: IFFALSE 46217
// exit ;
46215: GO 46315
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46217: LD_ADDR_VAR 0 1
46221: PUSH
46222: LD_VAR 0 1
46226: PPUSH
46227: LD_INT 50
46229: PUSH
46230: EMPTY
46231: LIST
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: LD_INT 92
46238: PUSH
46239: LD_VAR 0 2
46243: PUSH
46244: LD_INT 1
46246: ARRAY
46247: PUSH
46248: LD_VAR 0 2
46252: PUSH
46253: LD_INT 2
46255: ARRAY
46256: PUSH
46257: LD_INT 8
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PPUSH
46274: CALL_OW 72
46278: ST_TO_ADDR
// if not vehicles then
46279: LD_VAR 0 1
46283: NOT
46284: IFFALSE 46288
// exit ;
46286: GO 46315
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46288: LD_VAR 0 1
46292: PPUSH
46293: LD_VAR 0 2
46297: PUSH
46298: LD_INT 1
46300: ARRAY
46301: PPUSH
46302: LD_VAR 0 2
46306: PUSH
46307: LD_INT 2
46309: ARRAY
46310: PPUSH
46311: CALL_OW 111
// end ;
46315: LD_VAR 0 3
46319: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46320: LD_INT 0
46322: PPUSH
46323: PPUSH
46324: PPUSH
// if not side or not area then
46325: LD_VAR 0 1
46329: NOT
46330: IFTRUE 46339
46332: PUSH
46333: LD_VAR 0 2
46337: NOT
46338: OR
46339: IFFALSE 46343
// exit ;
46341: GO 46462
// tmp := AreaToList ( area , 0 ) ;
46343: LD_ADDR_VAR 0 5
46347: PUSH
46348: LD_VAR 0 2
46352: PPUSH
46353: LD_INT 0
46355: PPUSH
46356: CALL_OW 517
46360: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46361: LD_ADDR_VAR 0 4
46365: PUSH
46366: DOUBLE
46367: LD_INT 1
46369: DEC
46370: ST_TO_ADDR
46371: LD_VAR 0 5
46375: PUSH
46376: LD_INT 1
46378: ARRAY
46379: PUSH
46380: FOR_TO
46381: IFFALSE 46460
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46383: LD_VAR 0 5
46387: PUSH
46388: LD_INT 1
46390: ARRAY
46391: PUSH
46392: LD_VAR 0 4
46396: ARRAY
46397: PPUSH
46398: LD_VAR 0 5
46402: PUSH
46403: LD_INT 2
46405: ARRAY
46406: PUSH
46407: LD_VAR 0 4
46411: ARRAY
46412: PPUSH
46413: CALL_OW 351
46417: IFFALSE 46458
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46419: LD_VAR 0 5
46423: PUSH
46424: LD_INT 1
46426: ARRAY
46427: PUSH
46428: LD_VAR 0 4
46432: ARRAY
46433: PPUSH
46434: LD_VAR 0 5
46438: PUSH
46439: LD_INT 2
46441: ARRAY
46442: PUSH
46443: LD_VAR 0 4
46447: ARRAY
46448: PPUSH
46449: LD_VAR 0 1
46453: PPUSH
46454: CALL_OW 244
// end ;
46458: GO 46380
46460: POP
46461: POP
// end ;
46462: LD_VAR 0 3
46466: RET
// export function UniqueArray ( array ) ; var i ; begin
46467: LD_INT 0
46469: PPUSH
46470: PPUSH
// result := [ ] ;
46471: LD_ADDR_VAR 0 2
46475: PUSH
46476: EMPTY
46477: ST_TO_ADDR
// if not array then
46478: LD_VAR 0 1
46482: NOT
46483: IFFALSE 46487
// exit ;
46485: GO 46548
// for i := 1 to array do
46487: LD_ADDR_VAR 0 3
46491: PUSH
46492: DOUBLE
46493: LD_INT 1
46495: DEC
46496: ST_TO_ADDR
46497: LD_VAR 0 1
46501: PUSH
46502: FOR_TO
46503: IFFALSE 46546
// if not array [ i ] in result then
46505: LD_VAR 0 1
46509: PUSH
46510: LD_VAR 0 3
46514: ARRAY
46515: PUSH
46516: LD_VAR 0 2
46520: IN
46521: NOT
46522: IFFALSE 46544
// result := Join ( result , i ) ;
46524: LD_ADDR_VAR 0 2
46528: PUSH
46529: LD_VAR 0 2
46533: PPUSH
46534: LD_VAR 0 3
46538: PPUSH
46539: CALL 41199 0 2
46543: ST_TO_ADDR
46544: GO 46502
46546: POP
46547: POP
// end ; end_of_file
46548: LD_VAR 0 2
46552: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46553: LD_INT 0
46555: PPUSH
46556: PPUSH
// disable ( mpActive ) ;
46557: LD_INT 100
46559: DISABLE_MARKED
// disable ( mpWin ) ;
46560: LD_INT 101
46562: DISABLE_MARKED
// disable ( mpLose ) ;
46563: LD_INT 102
46565: DISABLE_MARKED
// mpGameType := 0 ;
46566: LD_ADDR_EXP 3
46570: PUSH
46571: LD_INT 0
46573: ST_TO_ADDR
// mpGameSettings := [ ] ;
46574: LD_ADDR_EXP 6
46578: PUSH
46579: EMPTY
46580: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46581: LD_ADDR_EXP 4
46585: PUSH
46586: EMPTY
46587: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46588: LD_ADDR_EXP 5
46592: PUSH
46593: EMPTY
46594: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46595: LD_ADDR_EXP 29
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46610: LD_ADDR_EXP 12
46614: PUSH
46615: EMPTY
46616: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46617: LD_ADDR_EXP 13
46621: PUSH
46622: EMPTY
46623: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46624: LD_ADDR_EXP 41
46628: PUSH
46629: EMPTY
46630: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46631: LD_ADDR_EXP 42
46635: PUSH
46636: EMPTY
46637: ST_TO_ADDR
// mpDepots := [ ] ;
46638: LD_ADDR_EXP 14
46642: PUSH
46643: EMPTY
46644: ST_TO_ADDR
// mpBuildings := [ ] ;
46645: LD_ADDR_EXP 17
46649: PUSH
46650: EMPTY
46651: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46652: LD_ADDR_EXP 18
46656: PUSH
46657: EMPTY
46658: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46659: LD_ADDR_EXP 19
46663: PUSH
46664: EMPTY
46665: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46666: LD_ADDR_EXP 20
46670: PUSH
46671: EMPTY
46672: ST_TO_ADDR
// mpStartingResources := [ ] ;
46673: LD_ADDR_EXP 15
46677: PUSH
46678: EMPTY
46679: ST_TO_ADDR
// mpStartPos := [ ] ;
46680: LD_ADDR_EXP 21
46684: PUSH
46685: EMPTY
46686: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46687: LD_ADDR_EXP 22
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46696: LD_ADDR_EXP 23
46700: PUSH
46701: EMPTY
46702: ST_TO_ADDR
// mpApemans := [ ] ;
46703: LD_ADDR_EXP 30
46707: PUSH
46708: EMPTY
46709: ST_TO_ADDR
// mpApemansArea := [ ] ;
46710: LD_ADDR_EXP 31
46714: PUSH
46715: EMPTY
46716: ST_TO_ADDR
// mpRespawn := [ ] ;
46717: LD_ADDR_EXP 33
46721: PUSH
46722: EMPTY
46723: ST_TO_ADDR
// mpKingArea := 0 ;
46724: LD_ADDR_EXP 34
46728: PUSH
46729: LD_INT 0
46731: ST_TO_ADDR
// mpPoints := [ ] ;
46732: LD_ADDR_EXP 35
46736: PUSH
46737: EMPTY
46738: ST_TO_ADDR
// mpVehicles := 0 ;
46739: LD_ADDR_EXP 36
46743: PUSH
46744: LD_INT 0
46746: ST_TO_ADDR
// mpShipments := 0 ;
46747: LD_ADDR_EXP 27
46751: PUSH
46752: LD_INT 0
46754: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46755: LD_ADDR_EXP 40
46759: PUSH
46760: EMPTY
46761: PUSH
46762: EMPTY
46763: PUSH
46764: EMPTY
46765: PUSH
46766: EMPTY
46767: PUSH
46768: EMPTY
46769: PUSH
46770: EMPTY
46771: PUSH
46772: EMPTY
46773: PUSH
46774: EMPTY
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46786: LD_ADDR_EXP 32
46790: PUSH
46791: EMPTY
46792: PUSH
46793: EMPTY
46794: PUSH
46795: EMPTY
46796: PUSH
46797: EMPTY
46798: PUSH
46799: EMPTY
46800: PUSH
46801: EMPTY
46802: PUSH
46803: EMPTY
46804: PUSH
46805: EMPTY
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: ST_TO_ADDR
// mpEmissions := 0 ;
46817: LD_ADDR_EXP 37
46821: PUSH
46822: LD_INT 0
46824: ST_TO_ADDR
// mpTeleports := 0 ;
46825: LD_ADDR_EXP 43
46829: PUSH
46830: LD_INT 0
46832: ST_TO_ADDR
// mpArtifacts := 0 ;
46833: LD_ADDR_EXP 44
46837: PUSH
46838: LD_INT 0
46840: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46841: LD_ADDR_EXP 45
46845: PUSH
46846: LD_INT 0
46848: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46849: LD_ADDR_EXP 25
46853: PUSH
46854: LD_INT 3
46856: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46857: LD_ADDR_EXP 24
46861: PUSH
46862: LD_INT 15
46864: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46865: LD_ADDR_EXP 38
46869: PUSH
46870: LD_INT 0
46872: ST_TO_ADDR
// mpGameActive := false ;
46873: LD_ADDR_EXP 39
46877: PUSH
46878: LD_INT 0
46880: ST_TO_ADDR
// mpBlockRespThread := false ;
46881: LD_ADDR_EXP 46
46885: PUSH
46886: LD_INT 0
46888: ST_TO_ADDR
// for i := 1 to 32 do
46889: LD_ADDR_VAR 0 2
46893: PUSH
46894: DOUBLE
46895: LD_INT 1
46897: DEC
46898: ST_TO_ADDR
46899: LD_INT 32
46901: PUSH
46902: FOR_TO
46903: IFFALSE 46930
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46905: LD_ADDR_EXP 6
46909: PUSH
46910: LD_EXP 6
46914: PPUSH
46915: LD_VAR 0 2
46919: PPUSH
46920: LD_INT 0
46922: PPUSH
46923: CALL_OW 1
46927: ST_TO_ADDR
46928: GO 46902
46930: POP
46931: POP
// end ;
46932: LD_VAR 0 1
46936: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46937: LD_INT 0
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
46952: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
46953: LD_ADDR_VAR 0 14
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 3
46966: PUSH
46967: LD_INT 5
46969: PUSH
46970: LD_INT 6
46972: PUSH
46973: LD_INT 7
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// for i in gameTypes do
46984: LD_ADDR_VAR 0 2
46988: PUSH
46989: LD_VAR 0 14
46993: PUSH
46994: FOR_IN
46995: IFFALSE 47004
// disable ( i ) ;
46997: LD_VAR 0 2
47001: DISABLE_MARKED
47002: GO 46994
47004: POP
47005: POP
// if Multiplayer then
47006: LD_OWVAR 4
47010: IFFALSE 47194
// begin mpGameType := mp_game_type ;
47012: LD_ADDR_EXP 3
47016: PUSH
47017: LD_OWVAR 6
47021: ST_TO_ADDR
// your_side := mp_player_side ;
47022: LD_ADDR_OWVAR 2
47026: PUSH
47027: LD_OWVAR 7
47031: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47032: LD_ADDR_EXP 7
47036: PUSH
47037: LD_OWVAR 17
47041: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47042: LD_ADDR_EXP 8
47046: PUSH
47047: LD_OWVAR 15
47051: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47052: LD_ADDR_EXP 9
47056: PUSH
47057: LD_OWVAR 16
47061: ST_TO_ADDR
// mpTeams := mp_teams ;
47062: LD_ADDR_EXP 10
47066: PUSH
47067: LD_OWVAR 12
47071: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47072: LD_ADDR_VAR 0 2
47076: PUSH
47077: DOUBLE
47078: LD_INT 1
47080: DEC
47081: ST_TO_ADDR
47082: LD_EXP 4
47086: PPUSH
47087: CALL 5233 0 1
47091: PUSH
47092: FOR_TO
47093: IFFALSE 47169
// begin setting := mpGameSettingsKeys [ i ] ;
47095: LD_ADDR_VAR 0 12
47099: PUSH
47100: LD_EXP 4
47104: PUSH
47105: LD_VAR 0 2
47109: ARRAY
47110: ST_TO_ADDR
// if setting then
47111: LD_VAR 0 12
47115: IFFALSE 47167
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47117: LD_ADDR_EXP 6
47121: PUSH
47122: LD_EXP 6
47126: PPUSH
47127: LD_VAR 0 2
47131: PPUSH
47132: LD_EXP 5
47136: PUSH
47137: LD_VAR 0 2
47141: ARRAY
47142: PUSH
47143: LD_VAR 0 2
47147: PUSH
47148: LD_INT 1
47150: MINUS
47151: PPUSH
47152: CALL_OW 426
47156: PUSH
47157: LD_INT 1
47159: PLUS
47160: ARRAY
47161: PPUSH
47162: CALL_OW 1
47166: ST_TO_ADDR
// end ;
47167: GO 47092
47169: POP
47170: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47171: LD_ADDR_EXP 11
47175: PUSH
47176: LD_EXP 8
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: DIFF
47187: PUSH
47188: LD_INT 1
47190: GREATER
47191: ST_TO_ADDR
// end else
47192: GO 47194
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47194: LD_EXP 3
47198: PPUSH
47199: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
47203: LD_EXP 18
47207: PPUSH
47208: CALL 5233 0 1
47212: IFFALSE 47243
// begin for i in mpMarkedAreas do
47214: LD_ADDR_VAR 0 2
47218: PUSH
47219: LD_EXP 18
47223: PUSH
47224: FOR_IN
47225: IFFALSE 47241
// SetAreaMapShow ( i , 0 ) ;
47227: LD_VAR 0 2
47231: PPUSH
47232: LD_INT 0
47234: PPUSH
47235: CALL_OW 424
47239: GO 47224
47241: POP
47242: POP
// end ; for i := 1 to 8 do
47243: LD_ADDR_VAR 0 2
47247: PUSH
47248: DOUBLE
47249: LD_INT 1
47251: DEC
47252: ST_TO_ADDR
47253: LD_INT 8
47255: PUSH
47256: FOR_TO
47257: IFFALSE 48692
// begin if not mpSidePositions [ i ] then
47259: LD_EXP 7
47263: PUSH
47264: LD_VAR 0 2
47268: ARRAY
47269: NOT
47270: IFFALSE 47274
// continue ;
47272: GO 47256
// side := i ;
47274: LD_ADDR_VAR 0 7
47278: PUSH
47279: LD_VAR 0 2
47283: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47284: LD_ADDR_VAR 0 9
47288: PUSH
47289: LD_EXP 9
47293: PUSH
47294: LD_VAR 0 2
47298: ARRAY
47299: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47300: LD_ADDR_VAR 0 8
47304: PUSH
47305: LD_EXP 7
47309: PUSH
47310: LD_VAR 0 2
47314: ARRAY
47315: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47316: LD_EXP 12
47320: PPUSH
47321: CALL 5233 0 1
47325: IFFALSE 47402
// begin for j in mpOilDeposits [ pos ] do
47327: LD_ADDR_VAR 0 3
47331: PUSH
47332: LD_EXP 12
47336: PUSH
47337: LD_VAR 0 8
47341: ARRAY
47342: PUSH
47343: FOR_IN
47344: IFFALSE 47400
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47346: LD_VAR 0 3
47350: PUSH
47351: LD_INT 1
47353: ARRAY
47354: PPUSH
47355: LD_VAR 0 3
47359: PUSH
47360: LD_INT 2
47362: ARRAY
47363: PPUSH
47364: LD_INT 2
47366: PPUSH
47367: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47371: LD_VAR 0 3
47375: PUSH
47376: LD_INT 1
47378: ARRAY
47379: PPUSH
47380: LD_VAR 0 3
47384: PUSH
47385: LD_INT 2
47387: ARRAY
47388: PPUSH
47389: LD_VAR 0 7
47393: PPUSH
47394: CALL_OW 441
// end ;
47398: GO 47343
47400: POP
47401: POP
// end ; if Count ( mpSibDeposits ) then
47402: LD_EXP 13
47406: PPUSH
47407: CALL 5233 0 1
47411: IFFALSE 47488
// begin for j in mpSibDeposits [ pos ] do
47413: LD_ADDR_VAR 0 3
47417: PUSH
47418: LD_EXP 13
47422: PUSH
47423: LD_VAR 0 8
47427: ARRAY
47428: PUSH
47429: FOR_IN
47430: IFFALSE 47486
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47432: LD_VAR 0 3
47436: PUSH
47437: LD_INT 1
47439: ARRAY
47440: PPUSH
47441: LD_VAR 0 3
47445: PUSH
47446: LD_INT 2
47448: ARRAY
47449: PPUSH
47450: LD_INT 3
47452: PPUSH
47453: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47457: LD_VAR 0 3
47461: PUSH
47462: LD_INT 1
47464: ARRAY
47465: PPUSH
47466: LD_VAR 0 3
47470: PUSH
47471: LD_INT 2
47473: ARRAY
47474: PPUSH
47475: LD_VAR 0 7
47479: PPUSH
47480: CALL_OW 441
// end ;
47484: GO 47429
47486: POP
47487: POP
// end ; InitBc ;
47488: CALL_OW 21
// InitUc ;
47492: CALL_OW 18
// uc_side := side ;
47496: LD_ADDR_OWVAR 20
47500: PUSH
47501: LD_VAR 0 7
47505: ST_TO_ADDR
// uc_nation := nation ;
47506: LD_ADDR_OWVAR 21
47510: PUSH
47511: LD_VAR 0 9
47515: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47516: LD_EXP 22
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: GREATER
47525: IFFALSE 47684
// begin x := mpStartPos [ pos ] [ 1 ] ;
47527: LD_ADDR_VAR 0 5
47531: PUSH
47532: LD_EXP 21
47536: PUSH
47537: LD_VAR 0 8
47541: ARRAY
47542: PUSH
47543: LD_INT 1
47545: ARRAY
47546: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47547: LD_ADDR_VAR 0 6
47551: PUSH
47552: LD_EXP 21
47556: PUSH
47557: LD_VAR 0 8
47561: ARRAY
47562: PUSH
47563: LD_INT 2
47565: ARRAY
47566: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47567: LD_VAR 0 5
47571: PPUSH
47572: LD_VAR 0 6
47576: PPUSH
47577: LD_INT 12
47579: PPUSH
47580: LD_INT 2
47582: PPUSH
47583: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47587: LD_ADDR_EXP 23
47591: PUSH
47592: LD_EXP 23
47596: PPUSH
47597: LD_VAR 0 7
47601: PPUSH
47602: LD_VAR 0 7
47606: PPUSH
47607: LD_VAR 0 5
47611: PPUSH
47612: LD_VAR 0 6
47616: PPUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 100
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 2
47629: PUSH
47630: LD_INT 70
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 3
47639: PUSH
47640: LD_INT 40
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 10
47649: PUSH
47650: LD_INT 25
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 20
47659: PUSH
47660: LD_INT 100
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: PPUSH
47674: CALL_OW 418
47678: PPUSH
47679: CALL_OW 1
47683: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47684: LD_EXP 14
47688: PPUSH
47689: CALL 5233 0 1
47693: IFFALSE 47888
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
47695: LD_EXP 3
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 6
47705: PUSH
47706: LD_INT 7
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: LIST
47713: IN
47714: IFFALSE 47734
// begin bc_level := 10 ;
47716: LD_ADDR_OWVAR 43
47720: PUSH
47721: LD_INT 10
47723: ST_TO_ADDR
// bc_type := b_warehouse ;
47724: LD_ADDR_OWVAR 42
47728: PUSH
47729: LD_INT 1
47731: ST_TO_ADDR
// end else
47732: GO 47750
// begin bc_level := 0 ;
47734: LD_ADDR_OWVAR 43
47738: PUSH
47739: LD_INT 0
47741: ST_TO_ADDR
// bc_type := b_depot ;
47742: LD_ADDR_OWVAR 42
47746: PUSH
47747: LD_INT 0
47749: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47750: LD_ADDR_VAR 0 4
47754: PUSH
47755: LD_EXP 14
47759: PUSH
47760: LD_VAR 0 8
47764: ARRAY
47765: PUSH
47766: LD_INT 1
47768: ARRAY
47769: PPUSH
47770: LD_EXP 14
47774: PUSH
47775: LD_VAR 0 8
47779: ARRAY
47780: PUSH
47781: LD_INT 2
47783: ARRAY
47784: PPUSH
47785: LD_EXP 14
47789: PUSH
47790: LD_VAR 0 8
47794: ARRAY
47795: PUSH
47796: LD_INT 3
47798: ARRAY
47799: PPUSH
47800: CALL_OW 47
47804: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47805: LD_VAR 0 4
47809: PPUSH
47810: LD_STRING @
47812: PUSH
47813: LD_VAR 0 7
47817: STR
47818: PPUSH
47819: CALL_OW 500
// if Count ( mpStartingResources ) then
47823: LD_EXP 15
47827: PPUSH
47828: CALL 5233 0 1
47832: IFFALSE 47886
// begin for j := 1 to mpStartingResources do
47834: LD_ADDR_VAR 0 3
47838: PUSH
47839: DOUBLE
47840: LD_INT 1
47842: DEC
47843: ST_TO_ADDR
47844: LD_EXP 15
47848: PUSH
47849: FOR_TO
47850: IFFALSE 47884
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47852: LD_VAR 0 4
47856: PPUSH
47857: CALL_OW 274
47861: PPUSH
47862: LD_VAR 0 3
47866: PPUSH
47867: LD_EXP 15
47871: PUSH
47872: LD_VAR 0 3
47876: ARRAY
47877: PPUSH
47878: CALL_OW 277
47882: GO 47849
47884: POP
47885: POP
// end ; end else
47886: GO 48095
// if Count ( mpStartingResources ) then
47888: LD_EXP 15
47892: PPUSH
47893: CALL 5233 0 1
47897: IFFALSE 48095
// begin x := mpStartPos [ pos ] [ 1 ] ;
47899: LD_ADDR_VAR 0 5
47903: PUSH
47904: LD_EXP 21
47908: PUSH
47909: LD_VAR 0 8
47913: ARRAY
47914: PUSH
47915: LD_INT 1
47917: ARRAY
47918: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47919: LD_ADDR_VAR 0 6
47923: PUSH
47924: LD_EXP 21
47928: PUSH
47929: LD_VAR 0 8
47933: ARRAY
47934: PUSH
47935: LD_INT 2
47937: ARRAY
47938: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47939: LD_ADDR_VAR 0 3
47943: PUSH
47944: DOUBLE
47945: LD_INT 1
47947: DEC
47948: ST_TO_ADDR
47949: LD_EXP 15
47953: PUSH
47954: FOR_TO
47955: IFFALSE 48093
// begin resources := mpStartingResources [ j ] ;
47957: LD_ADDR_VAR 0 13
47961: PUSH
47962: LD_EXP 15
47966: PUSH
47967: LD_VAR 0 3
47971: ARRAY
47972: ST_TO_ADDR
// if resources = 0 then
47973: LD_VAR 0 13
47977: PUSH
47978: LD_INT 0
47980: EQUAL
47981: IFFALSE 47985
// continue ;
47983: GO 47954
// repeat if resources >= 50 then
47985: LD_VAR 0 13
47989: PUSH
47990: LD_INT 50
47992: GREATEREQUAL
47993: IFFALSE 48039
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47995: LD_VAR 0 3
47999: PPUSH
48000: LD_INT 5
48002: PPUSH
48003: LD_VAR 0 5
48007: PPUSH
48008: LD_VAR 0 6
48012: PPUSH
48013: LD_INT 6
48015: PPUSH
48016: LD_INT 0
48018: PPUSH
48019: CALL_OW 60
// resources := resources - 50 ;
48023: LD_ADDR_VAR 0 13
48027: PUSH
48028: LD_VAR 0 13
48032: PUSH
48033: LD_INT 50
48035: MINUS
48036: ST_TO_ADDR
// end else
48037: GO 48081
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48039: LD_VAR 0 3
48043: PPUSH
48044: LD_VAR 0 13
48048: PUSH
48049: LD_INT 10
48051: DIV
48052: PPUSH
48053: LD_VAR 0 5
48057: PPUSH
48058: LD_VAR 0 6
48062: PPUSH
48063: LD_INT 6
48065: PPUSH
48066: LD_INT 0
48068: PPUSH
48069: CALL_OW 60
// resources := 0 ;
48073: LD_ADDR_VAR 0 13
48077: PUSH
48078: LD_INT 0
48080: ST_TO_ADDR
// end ; until resources <= 0 ;
48081: LD_VAR 0 13
48085: PUSH
48086: LD_INT 0
48088: LESSEQUAL
48089: IFFALSE 47985
// end ;
48091: GO 47954
48093: POP
48094: POP
// end ; if Count ( mpBuildings ) then
48095: LD_EXP 17
48099: PPUSH
48100: CALL 5233 0 1
48104: IFFALSE 48182
// begin for j in mpBuildings [ pos ] do
48106: LD_ADDR_VAR 0 3
48110: PUSH
48111: LD_EXP 17
48115: PUSH
48116: LD_VAR 0 8
48120: ARRAY
48121: PUSH
48122: FOR_IN
48123: IFFALSE 48180
// begin bc_level := 0 ;
48125: LD_ADDR_OWVAR 43
48129: PUSH
48130: LD_INT 0
48132: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48133: LD_ADDR_OWVAR 42
48137: PUSH
48138: LD_VAR 0 3
48142: PUSH
48143: LD_INT 1
48145: ARRAY
48146: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48147: LD_VAR 0 3
48151: PUSH
48152: LD_INT 2
48154: ARRAY
48155: PPUSH
48156: LD_VAR 0 3
48160: PUSH
48161: LD_INT 3
48163: ARRAY
48164: PPUSH
48165: LD_VAR 0 3
48169: PUSH
48170: LD_INT 4
48172: ARRAY
48173: PPUSH
48174: CALL_OW 47
// end ;
48178: GO 48122
48180: POP
48181: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48182: LD_EXP 26
48186: IFFALSE 48206
48188: PUSH
48189: LD_INT 20
48191: PPUSH
48192: LD_VAR 0 7
48196: PPUSH
48197: CALL_OW 321
48201: PUSH
48202: LD_INT 1
48204: EQUAL
48205: AND
48206: IFFALSE 48223
// SetTech ( tech_SibDet , side , state_researched ) ;
48208: LD_INT 20
48210: PPUSH
48211: LD_VAR 0 7
48215: PPUSH
48216: LD_INT 2
48218: PPUSH
48219: CALL_OW 322
// if not mpArtifacts then
48223: LD_EXP 44
48227: NOT
48228: IFFALSE 48245
// SetTech ( tech_artifact , side , state_disabled ) ;
48230: LD_INT 24
48232: PPUSH
48233: LD_VAR 0 7
48237: PPUSH
48238: LD_INT 0
48240: PPUSH
48241: CALL_OW 322
// if mpSibBomb = 1 then
48245: LD_EXP 28
48249: PUSH
48250: LD_INT 1
48252: EQUAL
48253: IFFALSE 48272
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48255: LD_INT 25
48257: PPUSH
48258: LD_VAR 0 7
48262: PPUSH
48263: LD_INT 1
48265: PPUSH
48266: CALL_OW 322
// end else
48270: GO 48287
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48272: LD_INT 25
48274: PPUSH
48275: LD_VAR 0 7
48279: PPUSH
48280: LD_INT 0
48282: PPUSH
48283: CALL_OW 322
// end ; if mpVehicles then
48287: LD_EXP 36
48291: IFFALSE 48390
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48293: LD_ADDR_VAR 0 3
48297: PUSH
48298: LD_VAR 0 7
48302: PPUSH
48303: LD_VAR 0 9
48307: PPUSH
48308: LD_EXP 36
48312: PPUSH
48313: CALL 49613 0 3
48317: PUSH
48318: FOR_IN
48319: IFFALSE 48388
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48321: LD_VAR 0 3
48325: PPUSH
48326: LD_INT 0
48328: PPUSH
48329: LD_INT 5
48331: PPUSH
48332: CALL_OW 12
48336: PPUSH
48337: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48341: LD_VAR 0 3
48345: PPUSH
48346: LD_EXP 21
48350: PUSH
48351: LD_VAR 0 8
48355: ARRAY
48356: PUSH
48357: LD_INT 1
48359: ARRAY
48360: PPUSH
48361: LD_EXP 21
48365: PUSH
48366: LD_VAR 0 8
48370: ARRAY
48371: PUSH
48372: LD_INT 2
48374: ARRAY
48375: PPUSH
48376: LD_INT 12
48378: PPUSH
48379: LD_INT 0
48381: PPUSH
48382: CALL_OW 50
// end ;
48386: GO 48318
48388: POP
48389: POP
// end ; uc_nation := nation ;
48390: LD_ADDR_OWVAR 21
48394: PUSH
48395: LD_VAR 0 9
48399: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48400: LD_EXP 3
48404: PUSH
48405: LD_INT 6
48407: PUSH
48408: LD_INT 7
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: IN
48415: IFFALSE 48440
48417: PUSH
48418: LD_EXP 7
48422: PUSH
48423: LD_VAR 0 2
48427: ARRAY
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: IN
48439: AND
48440: IFFALSE 48488
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48442: LD_ADDR_VAR 0 11
48446: PUSH
48447: LD_VAR 0 7
48451: PPUSH
48452: LD_VAR 0 9
48456: PPUSH
48457: LD_EXP 24
48461: PUSH
48462: LD_EXP 24
48466: PUSH
48467: LD_INT 2
48469: DIV
48470: PLUS
48471: PPUSH
48472: LD_EXP 25
48476: PUSH
48477: LD_INT 1
48479: PLUS
48480: PPUSH
48481: CALL 49104 0 4
48485: ST_TO_ADDR
48486: GO 48518
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48488: LD_ADDR_VAR 0 11
48492: PUSH
48493: LD_VAR 0 7
48497: PPUSH
48498: LD_VAR 0 9
48502: PPUSH
48503: LD_EXP 24
48507: PPUSH
48508: LD_EXP 25
48512: PPUSH
48513: CALL 49104 0 4
48517: ST_TO_ADDR
// for j in team do
48518: LD_ADDR_VAR 0 3
48522: PUSH
48523: LD_VAR 0 11
48527: PUSH
48528: FOR_IN
48529: IFFALSE 48578
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48531: LD_VAR 0 3
48535: PPUSH
48536: LD_EXP 21
48540: PUSH
48541: LD_VAR 0 8
48545: ARRAY
48546: PUSH
48547: LD_INT 1
48549: ARRAY
48550: PPUSH
48551: LD_EXP 21
48555: PUSH
48556: LD_VAR 0 8
48560: ARRAY
48561: PUSH
48562: LD_INT 2
48564: ARRAY
48565: PPUSH
48566: LD_INT 12
48568: PPUSH
48569: LD_INT 0
48571: PPUSH
48572: CALL_OW 50
48576: GO 48528
48578: POP
48579: POP
// if mpApemans then
48580: LD_EXP 30
48584: IFFALSE 48690
// begin for j := 1 to mpApemans do
48586: LD_ADDR_VAR 0 3
48590: PUSH
48591: DOUBLE
48592: LD_INT 1
48594: DEC
48595: ST_TO_ADDR
48596: LD_EXP 30
48600: PUSH
48601: FOR_TO
48602: IFFALSE 48688
// begin PrepareApeman ( - 5 ) ;
48604: LD_INT 5
48606: NEG
48607: PPUSH
48608: CALL 37326 0 1
// ape := CreateHuman ;
48612: LD_ADDR_VAR 0 10
48616: PUSH
48617: CALL_OW 44
48621: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48622: LD_ADDR_EXP 32
48626: PUSH
48627: LD_EXP 32
48631: PPUSH
48632: LD_VAR 0 8
48636: PPUSH
48637: LD_EXP 32
48641: PUSH
48642: LD_VAR 0 8
48646: ARRAY
48647: PPUSH
48648: LD_VAR 0 10
48652: PPUSH
48653: CALL 41199 0 2
48657: PPUSH
48658: CALL_OW 1
48662: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48663: LD_VAR 0 10
48667: PPUSH
48668: LD_EXP 31
48672: PUSH
48673: LD_VAR 0 8
48677: ARRAY
48678: PPUSH
48679: LD_INT 0
48681: PPUSH
48682: CALL_OW 49
// end ;
48686: GO 48601
48688: POP
48689: POP
// end ; end ;
48690: GO 47256
48692: POP
48693: POP
// if not mpTeamGame then
48694: LD_EXP 11
48698: NOT
48699: IFFALSE 48797
// begin for i := 1 to 8 do
48701: LD_ADDR_VAR 0 2
48705: PUSH
48706: DOUBLE
48707: LD_INT 1
48709: DEC
48710: ST_TO_ADDR
48711: LD_INT 8
48713: PUSH
48714: FOR_TO
48715: IFFALSE 48793
// for j := 1 to 8 do
48717: LD_ADDR_VAR 0 3
48721: PUSH
48722: DOUBLE
48723: LD_INT 1
48725: DEC
48726: ST_TO_ADDR
48727: LD_INT 8
48729: PUSH
48730: FOR_TO
48731: IFFALSE 48789
// if i <> j then
48733: LD_VAR 0 2
48737: PUSH
48738: LD_VAR 0 3
48742: NONEQUAL
48743: IFFALSE 48767
// SetAttitude ( i , j , att_neutral , true ) else
48745: LD_VAR 0 2
48749: PPUSH
48750: LD_VAR 0 3
48754: PPUSH
48755: LD_INT 0
48757: PPUSH
48758: LD_INT 1
48760: PPUSH
48761: CALL_OW 80
48765: GO 48787
// SetAttitude ( i , j , att_friend , true ) ;
48767: LD_VAR 0 2
48771: PPUSH
48772: LD_VAR 0 3
48776: PPUSH
48777: LD_INT 1
48779: PPUSH
48780: LD_INT 1
48782: PPUSH
48783: CALL_OW 80
48787: GO 48730
48789: POP
48790: POP
48791: GO 48714
48793: POP
48794: POP
// end else
48795: GO 48972
// begin if mpSharedVision then
48797: LD_EXP 16
48801: IFFALSE 48866
// begin for i in mpTeams do
48803: LD_ADDR_VAR 0 2
48807: PUSH
48808: LD_EXP 10
48812: PUSH
48813: FOR_IN
48814: IFFALSE 48864
// for j := 2 to i do
48816: LD_ADDR_VAR 0 3
48820: PUSH
48821: DOUBLE
48822: LD_INT 2
48824: DEC
48825: ST_TO_ADDR
48826: LD_VAR 0 2
48830: PUSH
48831: FOR_TO
48832: IFFALSE 48860
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48834: LD_VAR 0 2
48838: PUSH
48839: LD_VAR 0 3
48843: ARRAY
48844: PPUSH
48845: LD_VAR 0 2
48849: PUSH
48850: LD_INT 1
48852: ARRAY
48853: PPUSH
48854: CALL_OW 343
48858: GO 48831
48860: POP
48861: POP
48862: GO 48813
48864: POP
48865: POP
// end ; for i := 1 to 8 do
48866: LD_ADDR_VAR 0 2
48870: PUSH
48871: DOUBLE
48872: LD_INT 1
48874: DEC
48875: ST_TO_ADDR
48876: LD_INT 8
48878: PUSH
48879: FOR_TO
48880: IFFALSE 48970
// for j := 1 to 8 do
48882: LD_ADDR_VAR 0 3
48886: PUSH
48887: DOUBLE
48888: LD_INT 1
48890: DEC
48891: ST_TO_ADDR
48892: LD_INT 8
48894: PUSH
48895: FOR_TO
48896: IFFALSE 48966
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48898: LD_EXP 8
48902: PUSH
48903: LD_VAR 0 2
48907: ARRAY
48908: PUSH
48909: LD_EXP 8
48913: PUSH
48914: LD_VAR 0 3
48918: ARRAY
48919: EQUAL
48920: IFFALSE 48944
// SetAttitude ( i , j , att_friend , true ) else
48922: LD_VAR 0 2
48926: PPUSH
48927: LD_VAR 0 3
48931: PPUSH
48932: LD_INT 1
48934: PPUSH
48935: LD_INT 1
48937: PPUSH
48938: CALL_OW 80
48942: GO 48964
// SetAttitude ( i , j , att_enemy , true ) ;
48944: LD_VAR 0 2
48948: PPUSH
48949: LD_VAR 0 3
48953: PPUSH
48954: LD_INT 2
48956: PPUSH
48957: LD_INT 1
48959: PPUSH
48960: CALL_OW 80
48964: GO 48895
48966: POP
48967: POP
48968: GO 48879
48970: POP
48971: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48972: LD_ADDR_OWVAR 71
48976: PUSH
48977: LD_EXP 9
48981: PUSH
48982: LD_OWVAR 2
48986: ARRAY
48987: ST_TO_ADDR
// if IAmSpec then
48988: CALL_OW 531
48992: IFFALSE 49033
// begin FogOff ( true ) ;
48994: LD_INT 1
48996: PPUSH
48997: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49001: LD_EXP 29
49005: PUSH
49006: LD_INT 1
49008: ARRAY
49009: PUSH
49010: LD_INT 2
49012: DIV
49013: PPUSH
49014: LD_EXP 29
49018: PUSH
49019: LD_INT 2
49021: ARRAY
49022: PUSH
49023: LD_INT 2
49025: DIV
49026: PPUSH
49027: CALL_OW 86
// end else
49031: GO 49079
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49033: LD_EXP 21
49037: PUSH
49038: LD_EXP 7
49042: PUSH
49043: LD_OWVAR 2
49047: ARRAY
49048: ARRAY
49049: PUSH
49050: LD_INT 1
49052: ARRAY
49053: PPUSH
49054: LD_EXP 21
49058: PUSH
49059: LD_EXP 7
49063: PUSH
49064: LD_OWVAR 2
49068: ARRAY
49069: ARRAY
49070: PUSH
49071: LD_INT 2
49073: ARRAY
49074: PPUSH
49075: CALL_OW 86
// end ; BeginBuildUp ;
49079: CALL 50146 0 0
// enable ( mpActive ) ;
49083: LD_INT 100
49085: ENABLE_MARKED
// enable ( mpGameType ) ;
49086: LD_EXP 3
49090: ENABLE_MARKED
// mpGameActive := true ;
49091: LD_ADDR_EXP 39
49095: PUSH
49096: LD_INT 1
49098: ST_TO_ADDR
// end ;
49099: LD_VAR 0 1
49103: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
49104: LD_INT 0
49106: PPUSH
49107: PPUSH
49108: PPUSH
49109: PPUSH
// result := [ ] ;
49110: LD_ADDR_VAR 0 5
49114: PUSH
49115: EMPTY
49116: ST_TO_ADDR
// class := class_soldier ;
49117: LD_ADDR_VAR 0 8
49121: PUSH
49122: LD_INT 1
49124: ST_TO_ADDR
// uc_side := side ;
49125: LD_ADDR_OWVAR 20
49129: PUSH
49130: LD_VAR 0 1
49134: ST_TO_ADDR
// uc_nation := nation ;
49135: LD_ADDR_OWVAR 21
49139: PUSH
49140: LD_VAR 0 2
49144: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49145: LD_ADDR_OWVAR 26
49149: PUSH
49150: LD_OWVAR 19
49154: PUSH
49155: LD_VAR 0 1
49159: ARRAY
49160: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49161: LD_INT 1
49163: PPUSH
49164: LD_INT 2
49166: PPUSH
49167: CALL_OW 12
49171: PPUSH
49172: LD_VAR 0 8
49176: PPUSH
49177: LD_VAR 0 4
49181: PUSH
49182: LD_INT 2
49184: PLUS
49185: PPUSH
49186: CALL_OW 380
// hc_importance := 105 ;
49190: LD_ADDR_OWVAR 32
49194: PUSH
49195: LD_INT 105
49197: ST_TO_ADDR
// if Multiplayer then
49198: LD_OWVAR 4
49202: IFFALSE 49242
// begin hc_gallery := MULTIAVATARS ;
49204: LD_ADDR_OWVAR 33
49208: PUSH
49209: LD_STRING MULTIAVATARS
49211: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49212: LD_ADDR_OWVAR 34
49216: PUSH
49217: LD_VAR 0 1
49221: PPUSH
49222: CALL_OW 525
49226: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49227: LD_ADDR_OWVAR 27
49231: PUSH
49232: LD_VAR 0 1
49236: PPUSH
49237: CALL_OW 526
49241: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49242: LD_ADDR_VAR 0 5
49246: PUSH
49247: LD_VAR 0 5
49251: PPUSH
49252: CALL_OW 44
49256: PPUSH
49257: CALL 41199 0 2
49261: ST_TO_ADDR
// if mpTeamPreset then
49262: LD_LOC 1
49266: IFFALSE 49362
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49268: LD_LOC 1
49272: PUSH
49273: LD_INT 1
49275: ARRAY
49276: PPUSH
49277: LD_VAR 0 5
49281: PUSH
49282: LD_VAR 0 5
49286: ARRAY
49287: PPUSH
49288: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49292: LD_VAR 0 5
49296: PUSH
49297: LD_VAR 0 5
49301: ARRAY
49302: PPUSH
49303: LD_INT 1
49305: PPUSH
49306: LD_LOC 1
49310: PUSH
49311: LD_INT 1
49313: ARRAY
49314: PPUSH
49315: LD_INT 1
49317: PPUSH
49318: CALL_OW 260
49322: PPUSH
49323: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49327: LD_VAR 0 5
49331: PUSH
49332: LD_VAR 0 5
49336: ARRAY
49337: PPUSH
49338: LD_INT 2
49340: PPUSH
49341: LD_LOC 1
49345: PUSH
49346: LD_INT 1
49348: ARRAY
49349: PPUSH
49350: LD_INT 2
49352: PPUSH
49353: CALL_OW 260
49357: PPUSH
49358: CALL_OW 239
// end ; InitHc_All ( ) ;
49362: CALL_OW 584
// class := 2 ;
49366: LD_ADDR_VAR 0 8
49370: PUSH
49371: LD_INT 2
49373: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49374: LD_ADDR_VAR 0 6
49378: PUSH
49379: DOUBLE
49380: LD_INT 1
49382: DEC
49383: ST_TO_ADDR
49384: LD_VAR 0 3
49388: PUSH
49389: LD_INT 1
49391: MINUS
49392: PUSH
49393: FOR_TO
49394: IFFALSE 49589
// begin PrepareHuman ( false , class , skill ) ;
49396: LD_INT 0
49398: PPUSH
49399: LD_VAR 0 8
49403: PPUSH
49404: LD_VAR 0 4
49408: PPUSH
49409: CALL_OW 380
// un := CreateHuman ;
49413: LD_ADDR_VAR 0 7
49417: PUSH
49418: CALL_OW 44
49422: ST_TO_ADDR
// result := Join ( result , un ) ;
49423: LD_ADDR_VAR 0 5
49427: PUSH
49428: LD_VAR 0 5
49432: PPUSH
49433: LD_VAR 0 7
49437: PPUSH
49438: CALL 41199 0 2
49442: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49443: LD_LOC 1
49447: PPUSH
49448: CALL 5233 0 1
49452: PUSH
49453: LD_VAR 0 3
49457: GREATEREQUAL
49458: IFFALSE 49554
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49460: LD_LOC 1
49464: PUSH
49465: LD_VAR 0 6
49469: PUSH
49470: LD_INT 1
49472: PLUS
49473: ARRAY
49474: PPUSH
49475: LD_VAR 0 7
49479: PPUSH
49480: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49484: LD_VAR 0 7
49488: PPUSH
49489: LD_INT 1
49491: PPUSH
49492: LD_LOC 1
49496: PUSH
49497: LD_VAR 0 6
49501: PUSH
49502: LD_INT 1
49504: PLUS
49505: ARRAY
49506: PPUSH
49507: LD_INT 1
49509: PPUSH
49510: CALL_OW 260
49514: PPUSH
49515: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49519: LD_VAR 0 7
49523: PPUSH
49524: LD_INT 2
49526: PPUSH
49527: LD_LOC 1
49531: PUSH
49532: LD_VAR 0 6
49536: PUSH
49537: LD_INT 1
49539: PLUS
49540: ARRAY
49541: PPUSH
49542: LD_INT 2
49544: PPUSH
49545: CALL_OW 260
49549: PPUSH
49550: CALL_OW 239
// end ; class := Inc ( class ) ;
49554: LD_ADDR_VAR 0 8
49558: PUSH
49559: LD_VAR 0 8
49563: PPUSH
49564: CALL 42572 0 1
49568: ST_TO_ADDR
// if class = 5 then
49569: LD_VAR 0 8
49573: PUSH
49574: LD_INT 5
49576: EQUAL
49577: IFFALSE 49587
// class := 1 ;
49579: LD_ADDR_VAR 0 8
49583: PUSH
49584: LD_INT 1
49586: ST_TO_ADDR
// end ;
49587: GO 49393
49589: POP
49590: POP
// if not mpTeamPreset then
49591: LD_LOC 1
49595: NOT
49596: IFFALSE 49608
// mpTeamPreset := result ;
49598: LD_ADDR_LOC 1
49602: PUSH
49603: LD_VAR 0 5
49607: ST_TO_ADDR
// end ;
49608: LD_VAR 0 5
49612: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49613: LD_INT 0
49615: PPUSH
49616: PPUSH
// result := [ ] ;
49617: LD_ADDR_VAR 0 4
49621: PUSH
49622: EMPTY
49623: ST_TO_ADDR
// if not vehicles then
49624: LD_VAR 0 3
49628: NOT
49629: IFFALSE 49633
// exit ;
49631: GO 49847
// for i := 1 to vehicles [ nation ] do
49633: LD_ADDR_VAR 0 5
49637: PUSH
49638: DOUBLE
49639: LD_INT 1
49641: DEC
49642: ST_TO_ADDR
49643: LD_VAR 0 3
49647: PUSH
49648: LD_VAR 0 2
49652: ARRAY
49653: PUSH
49654: FOR_TO
49655: IFFALSE 49845
// begin uc_side := side ;
49657: LD_ADDR_OWVAR 20
49661: PUSH
49662: LD_VAR 0 1
49666: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49667: LD_VAR 0 3
49671: PUSH
49672: LD_VAR 0 2
49676: ARRAY
49677: PUSH
49678: LD_VAR 0 5
49682: ARRAY
49683: PPUSH
49684: CALL 5233 0 1
49688: PUSH
49689: LD_INT 4
49691: GREATER
49692: IFFALSE 49722
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49694: LD_ADDR_OWVAR 21
49698: PUSH
49699: LD_VAR 0 3
49703: PUSH
49704: LD_VAR 0 2
49708: ARRAY
49709: PUSH
49710: LD_VAR 0 5
49714: ARRAY
49715: PUSH
49716: LD_INT 5
49718: ARRAY
49719: ST_TO_ADDR
49720: GO 49732
// uc_nation := nation ;
49722: LD_ADDR_OWVAR 21
49726: PUSH
49727: LD_VAR 0 2
49731: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49732: LD_VAR 0 3
49736: PUSH
49737: LD_VAR 0 2
49741: ARRAY
49742: PUSH
49743: LD_VAR 0 5
49747: ARRAY
49748: PUSH
49749: LD_INT 1
49751: ARRAY
49752: PPUSH
49753: LD_VAR 0 3
49757: PUSH
49758: LD_VAR 0 2
49762: ARRAY
49763: PUSH
49764: LD_VAR 0 5
49768: ARRAY
49769: PUSH
49770: LD_INT 2
49772: ARRAY
49773: PPUSH
49774: LD_VAR 0 3
49778: PUSH
49779: LD_VAR 0 2
49783: ARRAY
49784: PUSH
49785: LD_VAR 0 5
49789: ARRAY
49790: PUSH
49791: LD_INT 3
49793: ARRAY
49794: PPUSH
49795: LD_VAR 0 3
49799: PUSH
49800: LD_VAR 0 2
49804: ARRAY
49805: PUSH
49806: LD_VAR 0 5
49810: ARRAY
49811: PUSH
49812: LD_INT 4
49814: ARRAY
49815: PPUSH
49816: LD_INT 80
49818: PPUSH
49819: CALL 8029 0 5
// result := Join ( result , CreateVehicle ) ;
49823: LD_ADDR_VAR 0 4
49827: PUSH
49828: LD_VAR 0 4
49832: PPUSH
49833: CALL_OW 45
49837: PPUSH
49838: CALL 41199 0 2
49842: ST_TO_ADDR
// end ;
49843: GO 49654
49845: POP
49846: POP
// end ;
49847: LD_VAR 0 4
49851: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49852: LD_INT 0
49854: PPUSH
49855: PPUSH
// for i in mpBattleFlags do
49856: LD_ADDR_VAR 0 3
49860: PUSH
49861: LD_EXP 23
49865: PUSH
49866: FOR_IN
49867: IFFALSE 49944
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49869: LD_VAR 0 3
49873: PPUSH
49874: LD_INT 1
49876: PUSH
49877: LD_VAR 0 1
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_VAR 0 1
49893: PUSH
49894: LD_REAL  7.00000000000000E-0001
49897: MUL
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: LD_VAR 0 1
49910: PUSH
49911: LD_REAL  4.00000000000000E-0001
49914: MUL
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 20
49922: PUSH
49923: LD_VAR 0 1
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: PPUSH
49938: CALL_OW 423
49942: GO 49866
49944: POP
49945: POP
// end ;
49946: LD_VAR 0 2
49950: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49951: LD_INT 100
49953: IFFALSE 50048
49955: GO 49957
49957: DISABLE
49958: LD_INT 0
49960: PPUSH
49961: PPUSH
// begin if mpBattleFlag <= 0 then
49962: LD_EXP 22
49966: PUSH
49967: LD_INT 0
49969: LESSEQUAL
49970: IFFALSE 49974
// exit ;
49972: GO 50048
// strength := 100 ;
49974: LD_ADDR_VAR 0 2
49978: PUSH
49979: LD_INT 100
49981: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49982: LD_EXP 22
49986: PPUSH
49987: CALL_OW 67
// strength := Dec ( strength ) ;
49991: LD_ADDR_VAR 0 2
49995: PUSH
49996: LD_VAR 0 2
50000: PPUSH
50001: CALL 42594 0 1
50005: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50006: LD_VAR 0 2
50010: PPUSH
50011: CALL 49852 0 1
// until not strength ;
50015: LD_VAR 0 2
50019: NOT
50020: IFFALSE 49982
// for i in mpBattleFlags do
50022: LD_ADDR_VAR 0 1
50026: PUSH
50027: LD_EXP 23
50031: PUSH
50032: FOR_IN
50033: IFFALSE 50046
// KillBattleFlag ( i ) ;
50035: LD_VAR 0 1
50039: PPUSH
50040: CALL_OW 419
50044: GO 50032
50046: POP
50047: POP
// end ;
50048: PPOPN 2
50050: END
// every 0 0$1 marked mpActive do var side , tmp ;
50051: GO 50053
50053: DISABLE
50054: LD_INT 0
50056: PPUSH
50057: PPUSH
// begin if mpSibBomb <= 1 then
50058: LD_EXP 28
50062: PUSH
50063: LD_INT 1
50065: LESSEQUAL
50066: IFFALSE 50070
// exit ;
50068: GO 50143
// tmp := mpSibBomb ;
50070: LD_ADDR_VAR 0 2
50074: PUSH
50075: LD_EXP 28
50079: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50080: LD_INT 35
50082: PPUSH
50083: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50087: LD_ADDR_VAR 0 2
50091: PUSH
50092: LD_VAR 0 2
50096: PUSH
50097: LD_INT 35
50099: MINUS
50100: ST_TO_ADDR
// until not tmp ;
50101: LD_VAR 0 2
50105: NOT
50106: IFFALSE 50080
// for side := 1 to 8 do
50108: LD_ADDR_VAR 0 1
50112: PUSH
50113: DOUBLE
50114: LD_INT 1
50116: DEC
50117: ST_TO_ADDR
50118: LD_INT 8
50120: PUSH
50121: FOR_TO
50122: IFFALSE 50141
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50124: LD_INT 25
50126: PPUSH
50127: LD_VAR 0 1
50131: PPUSH
50132: LD_INT 1
50134: PPUSH
50135: CALL_OW 322
50139: GO 50121
50141: POP
50142: POP
// end ;
50143: PPOPN 2
50145: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50146: LD_INT 0
50148: PPUSH
50149: PPUSH
50150: PPUSH
// mpBuildUpTimeDelay := 0 ;
50151: LD_ADDR_EXP 47
50155: PUSH
50156: LD_INT 0
50158: ST_TO_ADDR
// if not mpBuildUpTime then
50159: LD_EXP 20
50163: NOT
50164: IFFALSE 50168
// exit ;
50166: GO 50357
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50168: LD_ADDR_EXP 47
50172: PUSH
50173: LD_INT 8400
50175: PUSH
50176: LD_INT 2100
50178: PUSH
50179: LD_EXP 20
50183: MUL
50184: PLUS
50185: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50186: LD_ADDR_EXP 48
50190: PUSH
50191: LD_INT 1
50193: ST_TO_ADDR
// for i := 1 to 8 do
50194: LD_ADDR_VAR 0 2
50198: PUSH
50199: DOUBLE
50200: LD_INT 1
50202: DEC
50203: ST_TO_ADDR
50204: LD_INT 8
50206: PUSH
50207: FOR_TO
50208: IFFALSE 50355
// if mpSidePositions [ i ] then
50210: LD_EXP 7
50214: PUSH
50215: LD_VAR 0 2
50219: ARRAY
50220: IFFALSE 50353
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50222: LD_EXP 19
50226: PUSH
50227: LD_EXP 7
50231: PUSH
50232: LD_VAR 0 2
50236: ARRAY
50237: ARRAY
50238: PPUSH
50239: LD_INT 5
50241: PPUSH
50242: CALL_OW 424
// for j := 1 to 8 do
50246: LD_ADDR_VAR 0 3
50250: PUSH
50251: DOUBLE
50252: LD_INT 1
50254: DEC
50255: ST_TO_ADDR
50256: LD_INT 8
50258: PUSH
50259: FOR_TO
50260: IFFALSE 50351
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50262: LD_EXP 7
50266: PUSH
50267: LD_VAR 0 3
50271: ARRAY
50272: IFFALSE 50321
50274: PUSH
50275: LD_EXP 8
50279: PUSH
50280: LD_VAR 0 2
50284: ARRAY
50285: PUSH
50286: LD_EXP 8
50290: PUSH
50291: LD_VAR 0 3
50295: ARRAY
50296: NONEQUAL
50297: IFTRUE 50320
50299: PUSH
50300: LD_EXP 11
50304: NOT
50305: IFFALSE 50319
50307: PUSH
50308: LD_VAR 0 2
50312: PUSH
50313: LD_VAR 0 3
50317: NONEQUAL
50318: AND
50319: OR
50320: AND
50321: IFFALSE 50349
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50323: LD_VAR 0 3
50327: PPUSH
50328: LD_EXP 19
50332: PUSH
50333: LD_EXP 7
50337: PUSH
50338: LD_VAR 0 2
50342: ARRAY
50343: ARRAY
50344: PPUSH
50345: CALL_OW 333
50349: GO 50259
50351: POP
50352: POP
// end ;
50353: GO 50207
50355: POP
50356: POP
// end ;
50357: LD_VAR 0 1
50361: RET
// function EndBuildUp ; var i , j ; begin
50362: LD_INT 0
50364: PPUSH
50365: PPUSH
50366: PPUSH
// mpBuildUpTimeActive := false ;
50367: LD_ADDR_EXP 48
50371: PUSH
50372: LD_INT 0
50374: ST_TO_ADDR
// for i := 1 to 8 do
50375: LD_ADDR_VAR 0 2
50379: PUSH
50380: DOUBLE
50381: LD_INT 1
50383: DEC
50384: ST_TO_ADDR
50385: LD_INT 8
50387: PUSH
50388: FOR_TO
50389: IFFALSE 50536
// if mpSidePositions [ i ] then
50391: LD_EXP 7
50395: PUSH
50396: LD_VAR 0 2
50400: ARRAY
50401: IFFALSE 50534
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50403: LD_EXP 19
50407: PUSH
50408: LD_EXP 7
50412: PUSH
50413: LD_VAR 0 2
50417: ARRAY
50418: ARRAY
50419: PPUSH
50420: LD_INT 0
50422: PPUSH
50423: CALL_OW 424
// for j := 1 to 8 do
50427: LD_ADDR_VAR 0 3
50431: PUSH
50432: DOUBLE
50433: LD_INT 1
50435: DEC
50436: ST_TO_ADDR
50437: LD_INT 8
50439: PUSH
50440: FOR_TO
50441: IFFALSE 50532
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50443: LD_EXP 7
50447: PUSH
50448: LD_VAR 0 3
50452: ARRAY
50453: IFFALSE 50502
50455: PUSH
50456: LD_EXP 8
50460: PUSH
50461: LD_VAR 0 2
50465: ARRAY
50466: PUSH
50467: LD_EXP 8
50471: PUSH
50472: LD_VAR 0 3
50476: ARRAY
50477: NONEQUAL
50478: IFTRUE 50501
50480: PUSH
50481: LD_EXP 11
50485: NOT
50486: IFFALSE 50500
50488: PUSH
50489: LD_VAR 0 2
50493: PUSH
50494: LD_VAR 0 3
50498: NONEQUAL
50499: AND
50500: OR
50501: AND
50502: IFFALSE 50530
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50504: LD_VAR 0 3
50508: PPUSH
50509: LD_EXP 19
50513: PUSH
50514: LD_EXP 7
50518: PUSH
50519: LD_VAR 0 2
50523: ARRAY
50524: ARRAY
50525: PPUSH
50526: CALL_OW 334
50530: GO 50440
50532: POP
50533: POP
// end ;
50534: GO 50388
50536: POP
50537: POP
// end ;
50538: LD_VAR 0 1
50542: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50543: LD_EXP 48
50547: IFFALSE 50726
50549: GO 50551
50551: DISABLE
50552: LD_INT 0
50554: PPUSH
50555: PPUSH
// begin for i := 1 to 8 do
50556: LD_ADDR_VAR 0 1
50560: PUSH
50561: DOUBLE
50562: LD_INT 1
50564: DEC
50565: ST_TO_ADDR
50566: LD_INT 8
50568: PUSH
50569: FOR_TO
50570: IFFALSE 50723
// if mpSidePositions [ i ] then
50572: LD_EXP 7
50576: PUSH
50577: LD_VAR 0 1
50581: ARRAY
50582: IFFALSE 50721
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50584: LD_ADDR_VAR 0 2
50588: PUSH
50589: LD_EXP 19
50593: PUSH
50594: LD_EXP 7
50598: PUSH
50599: LD_VAR 0 1
50603: ARRAY
50604: ARRAY
50605: PPUSH
50606: LD_INT 2
50608: PUSH
50609: LD_INT 21
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 21
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 22
50636: PUSH
50637: LD_OWVAR 2
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PPUSH
50650: CALL_OW 70
50654: PUSH
50655: FOR_IN
50656: IFFALSE 50719
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50658: LD_EXP 8
50662: PUSH
50663: LD_VAR 0 1
50667: ARRAY
50668: PUSH
50669: LD_EXP 8
50673: PUSH
50674: LD_OWVAR 2
50678: ARRAY
50679: NONEQUAL
50680: IFTRUE 50703
50682: PUSH
50683: LD_EXP 11
50687: NOT
50688: IFFALSE 50702
50690: PUSH
50691: LD_VAR 0 1
50695: PUSH
50696: LD_OWVAR 2
50700: NONEQUAL
50701: AND
50702: OR
50703: IFFALSE 50717
// ComMoveToArea ( un , BuildUpEscape ) ;
50705: LD_VAR 0 2
50709: PPUSH
50710: LD_INT 72
50712: PPUSH
50713: CALL_OW 113
50717: GO 50655
50719: POP
50720: POP
50721: GO 50569
50723: POP
50724: POP
// enable ;
50725: ENABLE
// end ;
50726: PPOPN 2
50728: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50729: LD_EXP 20
50733: IFFALSE 50783
50735: GO 50737
50737: DISABLE
50738: LD_INT 0
50740: PPUSH
// begin tmp := mpBuildUpTime ;
50741: LD_ADDR_VAR 0 1
50745: PUSH
50746: LD_EXP 20
50750: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50751: LD_INT 35
50753: PPUSH
50754: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50758: LD_ADDR_VAR 0 1
50762: PUSH
50763: LD_VAR 0 1
50767: PUSH
50768: LD_INT 35
50770: MINUS
50771: ST_TO_ADDR
// until not tmp ;
50772: LD_VAR 0 1
50776: NOT
50777: IFFALSE 50751
// EndBuildUp ;
50779: CALL 50362 0 0
// end ;
50783: PPOPN 1
50785: END
// every 0 0$1 trigger mpActive marked mpWin do
50786: LD_INT 100
50788: IFFALSE 50822
50790: GO 50792
50792: DISABLE
// begin if IAmServer then
50793: CALL_OW 518
50797: IFFALSE 50806
// wait ( 0 0$3 ) ;
50799: LD_INT 105
50801: PPUSH
50802: CALL_OW 67
// if Multiplayer then
50806: LD_OWVAR 4
50810: IFFALSE 50818
// YouWinInMultiplayer else
50812: CALL_OW 106
50816: GO 50822
// YouWin ;
50818: CALL_OW 103
// end ;
50822: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50823: LD_INT 0
50825: PPUSH
// result := false ;
50826: LD_ADDR_VAR 0 3
50830: PUSH
50831: LD_INT 0
50833: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50834: LD_VAR 0 1
50838: PUSH
50839: LD_INT 1
50841: DOUBLE
50842: EQUAL
50843: IFTRUE 50865
50845: LD_INT 5
50847: DOUBLE
50848: EQUAL
50849: IFTRUE 50865
50851: LD_INT 6
50853: DOUBLE
50854: EQUAL
50855: IFTRUE 50865
50857: LD_INT 7
50859: DOUBLE
50860: EQUAL
50861: IFTRUE 50865
50863: GO 50938
50865: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50866: LD_ADDR_VAR 0 3
50870: PUSH
50871: LD_INT 22
50873: PUSH
50874: LD_VAR 0 2
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 21
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 33
50898: PUSH
50899: LD_INT 3
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 33
50908: PUSH
50909: LD_INT 5
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PPUSH
50926: CALL_OW 69
50930: PPUSH
50931: CALL 5233 0 1
50935: ST_TO_ADDR
// end ; GameTypeSurvival :
50936: GO 51177
50938: LD_INT 2
50940: DOUBLE
50941: EQUAL
50942: IFTRUE 50946
50944: GO 51076
50946: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50947: LD_ADDR_VAR 0 3
50951: PUSH
50952: LD_INT 22
50954: PUSH
50955: LD_VAR 0 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 30
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 30
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: LIST
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PPUSH
50996: CALL_OW 69
51000: PPUSH
51001: CALL 5233 0 1
51005: IFFALSE 51073
51007: PUSH
51008: LD_INT 22
51010: PUSH
51011: LD_VAR 0 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: LD_INT 21
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 33
51035: PUSH
51036: LD_INT 3
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 33
51045: PUSH
51046: LD_INT 5
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PPUSH
51063: CALL_OW 69
51067: PPUSH
51068: CALL 5233 0 1
51072: AND
51073: ST_TO_ADDR
// end ; GameTypeKing :
51074: GO 51177
51076: LD_INT 3
51078: DOUBLE
51079: EQUAL
51080: IFTRUE 51084
51082: GO 51176
51084: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51085: LD_ADDR_VAR 0 3
51089: PUSH
51090: LD_INT 22
51092: PUSH
51093: LD_VAR 0 2
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 21
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 33
51117: PUSH
51118: LD_INT 3
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 33
51127: PUSH
51128: LD_INT 5
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PPUSH
51145: CALL_OW 69
51149: PPUSH
51150: CALL 5233 0 1
51154: IFFALSE 51173
51156: PUSH
51157: LD_VAR 0 2
51161: PPUSH
51162: CALL 55459 0 1
51166: PUSH
51167: LD_EXP 35
51171: LESS
51172: AND
51173: ST_TO_ADDR
// end ; end ;
51174: GO 51177
51176: POP
// end ;
51177: LD_VAR 0 3
51181: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51182: LD_INT 100
51184: IFFALSE 51414
51186: GO 51188
51188: DISABLE
51189: LD_INT 0
51191: PPUSH
51192: PPUSH
// begin if Multiplayer then
51193: LD_OWVAR 4
51197: IFFALSE 51205
// SetPlayerSpectator ( ) else
51199: CALL_OW 572
51203: GO 51214
// FogOff ( your_side ) ;
51205: LD_OWVAR 2
51209: PPUSH
51210: CALL_OW 344
// repeat gameIsOn := false ;
51214: LD_ADDR_VAR 0 1
51218: PUSH
51219: LD_INT 0
51221: ST_TO_ADDR
// for i := 1 to 8 do
51222: LD_ADDR_VAR 0 2
51226: PUSH
51227: DOUBLE
51228: LD_INT 1
51230: DEC
51231: ST_TO_ADDR
51232: LD_INT 8
51234: PUSH
51235: FOR_TO
51236: IFFALSE 51366
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51238: LD_EXP 7
51242: PUSH
51243: LD_VAR 0 2
51247: ARRAY
51248: IFFALSE 51261
51250: PUSH
51251: LD_VAR 0 2
51255: PPUSH
51256: CALL_OW 108
51260: AND
51261: IFFALSE 51275
51263: PUSH
51264: LD_VAR 0 2
51268: PUSH
51269: LD_OWVAR 2
51273: NONEQUAL
51274: AND
51275: IFFALSE 51364
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51277: LD_EXP 8
51281: PUSH
51282: LD_VAR 0 2
51286: ARRAY
51287: NOT
51288: IFTRUE 51336
51290: PUSH
51291: LD_EXP 8
51295: PUSH
51296: LD_VAR 0 2
51300: ARRAY
51301: PUSH
51302: LD_EXP 8
51306: PUSH
51307: LD_OWVAR 2
51311: ARRAY
51312: NONEQUAL
51313: IFFALSE 51335
51315: PUSH
51316: LD_OWVAR 2
51320: PPUSH
51321: LD_VAR 0 2
51325: PPUSH
51326: CALL_OW 81
51330: PUSH
51331: LD_INT 1
51333: NONEQUAL
51334: AND
51335: OR
51336: IFFALSE 51364
// if HasPowerByGameType ( mpGameType , i ) then
51338: LD_EXP 3
51342: PPUSH
51343: LD_VAR 0 2
51347: PPUSH
51348: CALL 50823 0 2
51352: IFFALSE 51364
// begin gameIsOn := true ;
51354: LD_ADDR_VAR 0 1
51358: PUSH
51359: LD_INT 1
51361: ST_TO_ADDR
// break ;
51362: GO 51366
// end ;
51364: GO 51235
51366: POP
51367: POP
// wait ( 100 ) ;
51368: LD_INT 100
51370: PPUSH
51371: CALL_OW 67
// until not gameIsOn ;
51375: LD_VAR 0 1
51379: NOT
51380: IFFALSE 51214
// if IAmServer then
51382: CALL_OW 518
51386: IFFALSE 51395
// wait ( 0 0$3 ) ;
51388: LD_INT 105
51390: PPUSH
51391: CALL_OW 67
// if Multiplayer then
51395: LD_OWVAR 4
51399: IFFALSE 51407
// YouLostInMultiplayer else
51401: CALL_OW 107
51405: GO 51414
// YouLost (  ) ;
51407: LD_STRING 
51409: PPUSH
51410: CALL_OW 104
// end ;
51414: PPOPN 2
51416: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51417: LD_EXP 33
51421: IFFALSE 51805
51423: GO 51425
51425: DISABLE
51426: LD_INT 0
51428: PPUSH
51429: PPUSH
51430: PPUSH
51431: PPUSH
51432: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51433: LD_ADDR_VAR 0 5
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 2
51443: PUSH
51444: LD_INT 3
51446: PUSH
51447: LD_INT 4
51449: PUSH
51450: LD_INT 5
51452: PUSH
51453: LD_INT 6
51455: PUSH
51456: LD_INT 7
51458: PUSH
51459: LD_INT 8
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51472: LD_INT 350
51474: PPUSH
51475: CALL_OW 67
// for i := 1 to 8 do
51479: LD_ADDR_VAR 0 1
51483: PUSH
51484: DOUBLE
51485: LD_INT 1
51487: DEC
51488: ST_TO_ADDR
51489: LD_INT 8
51491: PUSH
51492: FOR_TO
51493: IFFALSE 51775
// begin j := sides [ i ] ;
51495: LD_ADDR_VAR 0 2
51499: PUSH
51500: LD_VAR 0 5
51504: PUSH
51505: LD_VAR 0 1
51509: ARRAY
51510: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51511: LD_EXP 40
51515: PUSH
51516: LD_VAR 0 2
51520: ARRAY
51521: PPUSH
51522: CALL 5233 0 1
51526: IFFALSE 51539
51528: PUSH
51529: LD_VAR 0 2
51533: PPUSH
51534: CALL_OW 108
51538: AND
51539: IFFALSE 51557
51541: PUSH
51542: LD_EXP 3
51546: PPUSH
51547: LD_VAR 0 2
51551: PPUSH
51552: CALL 50823 0 2
51556: AND
51557: IFFALSE 51773
// begin wait ( mpRespawn div 2 ) ;
51559: LD_EXP 33
51563: PUSH
51564: LD_INT 2
51566: DIV
51567: PPUSH
51568: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51572: LD_ADDR_VAR 0 3
51576: PUSH
51577: LD_INT 22
51579: PUSH
51580: LD_VAR 0 2
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 50
51591: PUSH
51592: EMPTY
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: LD_INT 30
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 30
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: PPUSH
51628: CALL_OW 69
51632: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51633: LD_VAR 0 3
51637: NOT
51638: IFTRUE 51652
51640: PUSH
51641: LD_VAR 0 2
51645: PPUSH
51646: CALL_OW 108
51650: NOT
51651: OR
51652: IFTRUE 51671
51654: PUSH
51655: LD_EXP 3
51659: PPUSH
51660: LD_VAR 0 2
51664: PPUSH
51665: CALL 50823 0 2
51669: NOT
51670: OR
51671: IFFALSE 51675
// continue ;
51673: GO 51492
// spawn := tmp [ 1 ] ;
51675: LD_ADDR_VAR 0 4
51679: PUSH
51680: LD_VAR 0 3
51684: PUSH
51685: LD_INT 1
51687: ARRAY
51688: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51689: LD_EXP 40
51693: PUSH
51694: LD_VAR 0 2
51698: ARRAY
51699: PUSH
51700: LD_INT 1
51702: ARRAY
51703: PPUSH
51704: LD_VAR 0 4
51708: PPUSH
51709: CALL_OW 250
51713: PPUSH
51714: LD_VAR 0 4
51718: PPUSH
51719: CALL_OW 251
51723: PPUSH
51724: LD_INT 32
51726: PPUSH
51727: LD_INT 1
51729: PPUSH
51730: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51734: LD_ADDR_EXP 40
51738: PUSH
51739: LD_EXP 40
51743: PPUSH
51744: LD_VAR 0 2
51748: PPUSH
51749: LD_EXP 40
51753: PUSH
51754: LD_VAR 0 2
51758: ARRAY
51759: PPUSH
51760: LD_INT 1
51762: PPUSH
51763: CALL_OW 3
51767: PPUSH
51768: CALL_OW 1
51772: ST_TO_ADDR
// end ; end ;
51773: GO 51492
51775: POP
51776: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51777: LD_ADDR_VAR 0 5
51781: PUSH
51782: LD_VAR 0 5
51786: PPUSH
51787: LD_INT 1
51789: PPUSH
51790: LD_INT 8
51792: PPUSH
51793: LD_INT 1
51795: PPUSH
51796: CALL 7559 0 4
51800: ST_TO_ADDR
// until false ;
51801: LD_INT 0
51803: IFFALSE 51472
// end ;
51805: PPOPN 5
51807: END
// every 0 0$1 marked mpActive do
51808: GO 51810
51810: DISABLE
// begin enable ;
51811: ENABLE
// if not mpDisplayStrings then
51812: LD_EXP 38
51816: NOT
51817: IFFALSE 51828
// begin display_strings := [ ] ;
51819: LD_ADDR_OWVAR 47
51823: PUSH
51824: EMPTY
51825: ST_TO_ADDR
// exit ;
51826: GO 51838
// end ; display_strings := mpDisplayStrings ;
51828: LD_ADDR_OWVAR 47
51832: PUSH
51833: LD_EXP 38
51837: ST_TO_ADDR
// end ; end_of_file
51838: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51839: LD_INT 0
51841: PPUSH
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
51848: PPUSH
51849: PPUSH
// if GetType ( un ) = unit_vehicle then
51850: LD_VAR 0 1
51854: PPUSH
51855: CALL_OW 247
51859: PUSH
51860: LD_INT 2
51862: EQUAL
51863: IFFALSE 51867
// exit ;
51865: GO 52541
// side := GetSide ( un ) ;
51867: LD_ADDR_VAR 0 9
51871: PUSH
51872: LD_VAR 0 1
51876: PPUSH
51877: CALL_OW 255
51881: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51882: LD_EXP 3
51886: PUSH
51887: LD_INT 2
51889: EQUAL
51890: IFFALSE 51984
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51892: LD_VAR 0 1
51896: PPUSH
51897: CALL_OW 266
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: IN
51912: IFFALSE 51984
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51914: LD_ADDR_VAR 0 3
51918: PUSH
51919: LD_INT 22
51921: PUSH
51922: LD_VAR 0 9
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 21
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 33
51946: PUSH
51947: LD_INT 3
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PPUSH
51963: CALL_OW 69
51967: PUSH
51968: FOR_IN
51969: IFFALSE 51982
// KillUnit ( i ) ;
51971: LD_VAR 0 3
51975: PPUSH
51976: CALL_OW 66
51980: GO 51968
51982: POP
51983: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51984: LD_VAR 0 1
51988: PPUSH
51989: CALL_OW 257
51993: PUSH
51994: LD_INT 12
51996: PUSH
51997: LD_INT 17
51999: PUSH
52000: LD_INT 15
52002: PUSH
52003: LD_INT 16
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: IN
52012: IFTRUE 52029
52014: PUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 263
52024: PUSH
52025: LD_INT 5
52027: EQUAL
52028: OR
52029: IFFALSE 52266
// begin tag := 0 ;
52031: LD_ADDR_VAR 0 5
52035: PUSH
52036: LD_INT 0
52038: ST_TO_ADDR
// for i := 1 to 8 do
52039: LD_ADDR_VAR 0 3
52043: PUSH
52044: DOUBLE
52045: LD_INT 1
52047: DEC
52048: ST_TO_ADDR
52049: LD_INT 8
52051: PUSH
52052: FOR_TO
52053: IFFALSE 52087
// if un in mpApePosIndex [ i ] then
52055: LD_VAR 0 1
52059: PUSH
52060: LD_EXP 32
52064: PUSH
52065: LD_VAR 0 3
52069: ARRAY
52070: IN
52071: IFFALSE 52085
// begin tag := i ;
52073: LD_ADDR_VAR 0 5
52077: PUSH
52078: LD_VAR 0 3
52082: ST_TO_ADDR
// break ;
52083: GO 52087
// end ;
52085: GO 52052
52087: POP
52088: POP
// if not tag then
52089: LD_VAR 0 5
52093: NOT
52094: IFFALSE 52098
// exit ;
52096: GO 52541
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52098: LD_ADDR_VAR 0 7
52102: PUSH
52103: LD_EXP 31
52107: PUSH
52108: LD_EXP 7
52112: PUSH
52113: LD_VAR 0 5
52117: ARRAY
52118: ARRAY
52119: ST_TO_ADDR
// if not area then
52120: LD_VAR 0 7
52124: NOT
52125: IFFALSE 52129
// exit ;
52127: GO 52541
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52129: LD_INT 14700
52131: PUSH
52132: LD_VAR 0 1
52136: PUSH
52137: LD_INT 5
52139: MOD
52140: PUSH
52141: LD_INT 1
52143: PLUS
52144: PUSH
52145: LD_INT 700
52147: MUL
52148: PLUS
52149: PPUSH
52150: CALL_OW 67
// repeat wait ( 10 ) ;
52154: LD_INT 10
52156: PPUSH
52157: CALL_OW 67
// until not mpBlockRespThread ;
52161: LD_EXP 46
52165: NOT
52166: IFFALSE 52154
// mpBlockRespThread := true ;
52168: LD_ADDR_EXP 46
52172: PUSH
52173: LD_INT 1
52175: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52176: LD_INT 0
52178: PPUSH
52179: CALL 37326 0 1
// ape := CreateHuman ;
52183: LD_ADDR_VAR 0 4
52187: PUSH
52188: CALL_OW 44
52192: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52193: LD_ADDR_EXP 32
52197: PUSH
52198: LD_EXP 32
52202: PPUSH
52203: LD_VAR 0 5
52207: PPUSH
52208: LD_EXP 32
52212: PUSH
52213: LD_VAR 0 5
52217: ARRAY
52218: PPUSH
52219: LD_VAR 0 4
52223: PPUSH
52224: CALL 41199 0 2
52228: PPUSH
52229: CALL_OW 1
52233: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52234: LD_VAR 0 4
52238: PPUSH
52239: LD_VAR 0 7
52243: PPUSH
52244: LD_INT 0
52246: PPUSH
52247: CALL_OW 49
// wait ( 10 ) ;
52251: LD_INT 10
52253: PPUSH
52254: CALL_OW 67
// mpBlockRespThread := false ;
52258: LD_ADDR_EXP 46
52262: PUSH
52263: LD_INT 0
52265: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52266: LD_VAR 0 1
52270: PPUSH
52271: CALL_OW 247
52275: PUSH
52276: LD_INT 1
52278: EQUAL
52279: IFFALSE 52296
52281: PUSH
52282: LD_VAR 0 1
52286: PPUSH
52287: CALL_OW 248
52291: PUSH
52292: LD_INT 0
52294: GREATER
52295: AND
52296: IFFALSE 52541
// begin if not mpRespawn then
52298: LD_EXP 33
52302: NOT
52303: IFFALSE 52307
// exit ;
52305: GO 52541
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52307: LD_VAR 0 9
52311: PPUSH
52312: CALL_OW 108
52316: NOT
52317: IFFALSE 52336
52319: PUSH
52320: LD_EXP 3
52324: PPUSH
52325: LD_VAR 0 9
52329: PPUSH
52330: CALL 50823 0 2
52334: NOT
52335: AND
52336: IFFALSE 52340
// exit ;
52338: GO 52541
// side := GetSide ( un ) ;
52340: LD_ADDR_VAR 0 9
52344: PUSH
52345: LD_VAR 0 1
52349: PPUSH
52350: CALL_OW 255
52354: ST_TO_ADDR
// nation := GetNation ( un ) ;
52355: LD_ADDR_VAR 0 8
52359: PUSH
52360: LD_VAR 0 1
52364: PPUSH
52365: CALL_OW 248
52369: ST_TO_ADDR
// class := GetClass ( un ) ;
52370: LD_ADDR_VAR 0 6
52374: PUSH
52375: LD_VAR 0 1
52379: PPUSH
52380: CALL_OW 257
52384: ST_TO_ADDR
// if class > 4 then
52385: LD_VAR 0 6
52389: PUSH
52390: LD_INT 4
52392: GREATER
52393: IFFALSE 52403
// class := 1 ;
52395: LD_ADDR_VAR 0 6
52399: PUSH
52400: LD_INT 1
52402: ST_TO_ADDR
// repeat wait ( 10 ) ;
52403: LD_INT 10
52405: PPUSH
52406: CALL_OW 67
// until not mpBlockRespThread ;
52410: LD_EXP 46
52414: NOT
52415: IFFALSE 52403
// mpBlockRespThread := true ;
52417: LD_ADDR_EXP 46
52421: PUSH
52422: LD_INT 1
52424: ST_TO_ADDR
// uc_side := side ;
52425: LD_ADDR_OWVAR 20
52429: PUSH
52430: LD_VAR 0 9
52434: ST_TO_ADDR
// uc_nation := nation ;
52435: LD_ADDR_OWVAR 21
52439: PUSH
52440: LD_VAR 0 8
52444: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52445: LD_INT 0
52447: PPUSH
52448: LD_VAR 0 6
52452: PPUSH
52453: LD_INT 2
52455: PPUSH
52456: CALL_OW 380
// un := CreateHuman ;
52460: LD_ADDR_VAR 0 1
52464: PUSH
52465: CALL_OW 44
52469: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52470: LD_ADDR_EXP 40
52474: PUSH
52475: LD_EXP 40
52479: PPUSH
52480: LD_VAR 0 9
52484: PPUSH
52485: LD_EXP 40
52489: PUSH
52490: LD_VAR 0 9
52494: ARRAY
52495: PPUSH
52496: LD_EXP 40
52500: PUSH
52501: LD_VAR 0 9
52505: ARRAY
52506: PUSH
52507: LD_INT 1
52509: PLUS
52510: PPUSH
52511: LD_VAR 0 1
52515: PPUSH
52516: CALL_OW 1
52520: PPUSH
52521: CALL_OW 1
52525: ST_TO_ADDR
// wait ( 10 ) ;
52526: LD_INT 10
52528: PPUSH
52529: CALL_OW 67
// mpBlockRespThread := false ;
52533: LD_ADDR_EXP 46
52537: PUSH
52538: LD_INT 0
52540: ST_TO_ADDR
// end ; end ;
52541: LD_VAR 0 2
52545: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52546: LD_INT 0
52548: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52549: LD_VAR 0 1
52553: PPUSH
52554: CALL_OW 266
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: IN
52569: IFFALSE 52594
// SetBName ( building , @ & GetSide ( building ) ) ;
52571: LD_VAR 0 1
52575: PPUSH
52576: LD_STRING @
52578: PUSH
52579: LD_VAR 0 1
52583: PPUSH
52584: CALL_OW 255
52588: STR
52589: PPUSH
52590: CALL_OW 500
// end ;
52594: LD_VAR 0 2
52598: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52599: LD_INT 0
52601: PPUSH
52602: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52603: LD_EXP 3
52607: PUSH
52608: LD_INT 2
52610: EQUAL
52611: IFFALSE 52635
52613: PUSH
52614: LD_VAR 0 1
52618: PPUSH
52619: CALL_OW 266
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: IN
52634: AND
52635: IFFALSE 52714
// begin SetSide ( building , oldSide ) ;
52637: LD_VAR 0 1
52641: PPUSH
52642: LD_VAR 0 2
52646: PPUSH
52647: CALL_OW 235
// KillUnit ( building ) ;
52651: LD_VAR 0 1
52655: PPUSH
52656: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52660: LD_ADDR_VAR 0 5
52664: PUSH
52665: LD_INT 22
52667: PUSH
52668: LD_VAR 0 2
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 21
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PPUSH
52691: CALL_OW 69
52695: PUSH
52696: FOR_IN
52697: IFFALSE 52710
// KillUnit ( i ) ;
52699: LD_VAR 0 5
52703: PPUSH
52704: CALL_OW 66
52708: GO 52696
52710: POP
52711: POP
// exit ;
52712: GO 52759
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52714: LD_VAR 0 1
52718: PPUSH
52719: CALL_OW 266
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: IN
52734: IFFALSE 52759
// SetBName ( building , @ & GetSide ( building ) ) ;
52736: LD_VAR 0 1
52740: PPUSH
52741: LD_STRING @
52743: PUSH
52744: LD_VAR 0 1
52748: PPUSH
52749: CALL_OW 255
52753: STR
52754: PPUSH
52755: CALL_OW 500
// end ;
52759: LD_VAR 0 4
52763: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52764: LD_INT 0
52766: PPUSH
52767: PPUSH
52768: PPUSH
// if mpGameType <> GameTypeFamine then
52769: LD_EXP 3
52773: PUSH
52774: LD_INT 5
52776: NONEQUAL
52777: IFFALSE 52781
// exit ;
52779: GO 52996
// for i := 1 to mpGlobalOilDeposits do
52781: LD_ADDR_VAR 0 6
52785: PUSH
52786: DOUBLE
52787: LD_INT 1
52789: DEC
52790: ST_TO_ADDR
52791: LD_EXP 41
52795: PUSH
52796: FOR_TO
52797: IFFALSE 52994
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52799: LD_EXP 41
52803: PUSH
52804: LD_VAR 0 6
52808: ARRAY
52809: PUSH
52810: LD_INT 1
52812: ARRAY
52813: PPUSH
52814: LD_EXP 41
52818: PUSH
52819: LD_VAR 0 6
52823: ARRAY
52824: PUSH
52825: LD_INT 2
52827: ARRAY
52828: PPUSH
52829: CALL_OW 428
52833: PUSH
52834: LD_VAR 0 1
52838: EQUAL
52839: IFFALSE 52992
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52841: LD_ADDR_VAR 0 7
52845: PUSH
52846: LD_EXP 41
52850: PUSH
52851: LD_VAR 0 6
52855: ARRAY
52856: PUSH
52857: LD_INT 3
52859: ARRAY
52860: ST_TO_ADDR
// value := value - amount ;
52861: LD_ADDR_VAR 0 7
52865: PUSH
52866: LD_VAR 0 7
52870: PUSH
52871: LD_VAR 0 4
52875: MINUS
52876: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52877: LD_ADDR_EXP 41
52881: PUSH
52882: LD_EXP 41
52886: PPUSH
52887: LD_VAR 0 6
52891: PPUSH
52892: LD_EXP 41
52896: PUSH
52897: LD_VAR 0 6
52901: ARRAY
52902: PPUSH
52903: LD_INT 3
52905: PPUSH
52906: LD_VAR 0 7
52910: PPUSH
52911: CALL_OW 1
52915: PPUSH
52916: CALL_OW 1
52920: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52921: LD_VAR 0 1
52925: PPUSH
52926: LD_VAR 0 7
52930: PPUSH
52931: CALL_OW 505
// if value <= 0 then
52935: LD_VAR 0 7
52939: PUSH
52940: LD_INT 0
52942: LESSEQUAL
52943: IFFALSE 52992
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52945: LD_EXP 41
52949: PUSH
52950: LD_VAR 0 6
52954: ARRAY
52955: PUSH
52956: LD_INT 1
52958: ARRAY
52959: PPUSH
52960: LD_EXP 41
52964: PUSH
52965: LD_VAR 0 6
52969: ARRAY
52970: PUSH
52971: LD_INT 2
52973: ARRAY
52974: PPUSH
52975: CALL_OW 63
// KillUnit ( building ) ;
52979: LD_VAR 0 1
52983: PPUSH
52984: CALL_OW 66
// exit ;
52988: POP
52989: POP
52990: GO 52996
// end ; end ; end ;
52992: GO 52796
52994: POP
52995: POP
// end ;
52996: LD_VAR 0 5
53000: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53001: LD_INT 0
53003: PPUSH
53004: PPUSH
53005: PPUSH
// if mpGameType <> GameTypeFamine then
53006: LD_EXP 3
53010: PUSH
53011: LD_INT 5
53013: NONEQUAL
53014: IFFALSE 53018
// exit ;
53016: GO 53233
// for i := 1 to mpGlobalSibDeposits do
53018: LD_ADDR_VAR 0 6
53022: PUSH
53023: DOUBLE
53024: LD_INT 1
53026: DEC
53027: ST_TO_ADDR
53028: LD_EXP 42
53032: PUSH
53033: FOR_TO
53034: IFFALSE 53231
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53036: LD_EXP 42
53040: PUSH
53041: LD_VAR 0 6
53045: ARRAY
53046: PUSH
53047: LD_INT 1
53049: ARRAY
53050: PPUSH
53051: LD_EXP 42
53055: PUSH
53056: LD_VAR 0 6
53060: ARRAY
53061: PUSH
53062: LD_INT 2
53064: ARRAY
53065: PPUSH
53066: CALL_OW 428
53070: PUSH
53071: LD_VAR 0 1
53075: EQUAL
53076: IFFALSE 53229
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53078: LD_ADDR_VAR 0 7
53082: PUSH
53083: LD_EXP 42
53087: PUSH
53088: LD_VAR 0 6
53092: ARRAY
53093: PUSH
53094: LD_INT 3
53096: ARRAY
53097: ST_TO_ADDR
// value := value - amount ;
53098: LD_ADDR_VAR 0 7
53102: PUSH
53103: LD_VAR 0 7
53107: PUSH
53108: LD_VAR 0 4
53112: MINUS
53113: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53114: LD_ADDR_EXP 42
53118: PUSH
53119: LD_EXP 42
53123: PPUSH
53124: LD_VAR 0 6
53128: PPUSH
53129: LD_EXP 42
53133: PUSH
53134: LD_VAR 0 6
53138: ARRAY
53139: PPUSH
53140: LD_INT 3
53142: PPUSH
53143: LD_VAR 0 7
53147: PPUSH
53148: CALL_OW 1
53152: PPUSH
53153: CALL_OW 1
53157: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53158: LD_VAR 0 1
53162: PPUSH
53163: LD_VAR 0 7
53167: PPUSH
53168: CALL_OW 505
// if value <= 0 then
53172: LD_VAR 0 7
53176: PUSH
53177: LD_INT 0
53179: LESSEQUAL
53180: IFFALSE 53229
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53182: LD_EXP 42
53186: PUSH
53187: LD_VAR 0 6
53191: ARRAY
53192: PUSH
53193: LD_INT 1
53195: ARRAY
53196: PPUSH
53197: LD_EXP 42
53201: PUSH
53202: LD_VAR 0 6
53206: ARRAY
53207: PUSH
53208: LD_INT 2
53210: ARRAY
53211: PPUSH
53212: CALL_OW 63
// KillUnit ( building ) ;
53216: LD_VAR 0 1
53220: PPUSH
53221: CALL_OW 66
// exit ;
53225: POP
53226: POP
53227: GO 53233
// end ; end ; end ;
53229: GO 53033
53231: POP
53232: POP
// end ;
53233: LD_VAR 0 5
53237: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53238: LD_INT 0
53240: PPUSH
53241: PPUSH
// side := GetSide ( factory ) ;
53242: LD_ADDR_VAR 0 7
53246: PUSH
53247: LD_VAR 0 1
53251: PPUSH
53252: CALL_OW 255
53256: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53257: LD_VAR 0 5
53261: PUSH
53262: LD_INT 81
53264: EQUAL
53265: IFFALSE 53303
53267: PUSH
53268: LD_INT 22
53270: PUSH
53271: LD_VAR 0 7
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 34
53282: PUSH
53283: LD_INT 81
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PPUSH
53294: CALL_OW 69
53298: PUSH
53299: LD_INT 0
53301: GREATER
53302: AND
53303: IFFALSE 53336
// begin ComCancel ( factory ) ;
53305: LD_VAR 0 1
53309: PPUSH
53310: CALL_OW 127
// if side = your_side then
53314: LD_VAR 0 7
53318: PUSH
53319: LD_OWVAR 2
53323: EQUAL
53324: IFFALSE 53336
// HintSpec ( VehLimit , 2 ) ;
53326: LD_STRING VehLimit
53328: PPUSH
53329: LD_INT 2
53331: PPUSH
53332: CALL_OW 338
// end ; end ;
53336: LD_VAR 0 6
53340: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53341: LD_INT 0
53343: PPUSH
53344: PPUSH
53345: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53346: LD_VAR 0 1
53350: PPUSH
53351: CALL_OW 264
53355: PUSH
53356: LD_INT 81
53358: EQUAL
53359: IFFALSE 53376
53361: PUSH
53362: LD_VAR 0 1
53366: PPUSH
53367: CALL_OW 263
53371: PUSH
53372: LD_INT 1
53374: EQUAL
53375: AND
53376: IFFALSE 53656
// begin for i := 1 to Count ( minersList ) do
53378: LD_ADDR_VAR 0 6
53382: PUSH
53383: DOUBLE
53384: LD_INT 1
53386: DEC
53387: ST_TO_ADDR
53388: LD_EXP 57
53392: PPUSH
53393: CALL 5233 0 1
53397: PUSH
53398: FOR_TO
53399: IFFALSE 53517
// begin if minersList [ i ] = oldId then
53401: LD_EXP 57
53405: PUSH
53406: LD_VAR 0 6
53410: ARRAY
53411: PUSH
53412: LD_VAR 0 2
53416: EQUAL
53417: IFFALSE 53515
// begin for j := 1 to minerMinesList [ i ] do
53419: LD_ADDR_VAR 0 7
53423: PUSH
53424: DOUBLE
53425: LD_INT 1
53427: DEC
53428: ST_TO_ADDR
53429: LD_EXP 58
53433: PUSH
53434: LD_VAR 0 6
53438: ARRAY
53439: PUSH
53440: FOR_TO
53441: IFFALSE 53491
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53443: LD_EXP 58
53447: PUSH
53448: LD_VAR 0 6
53452: ARRAY
53453: PUSH
53454: LD_VAR 0 7
53458: ARRAY
53459: PUSH
53460: LD_INT 1
53462: ARRAY
53463: PPUSH
53464: LD_EXP 58
53468: PUSH
53469: LD_VAR 0 6
53473: ARRAY
53474: PUSH
53475: LD_VAR 0 7
53479: ARRAY
53480: PUSH
53481: LD_INT 2
53483: ARRAY
53484: PPUSH
53485: CALL_OW 612
53489: GO 53440
53491: POP
53492: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
53493: LD_ADDR_EXP 58
53497: PUSH
53498: LD_EXP 58
53502: PPUSH
53503: LD_VAR 0 6
53507: PPUSH
53508: CALL_OW 3
53512: ST_TO_ADDR
// break ;
53513: GO 53517
// end ; end ;
53515: GO 53398
53517: POP
53518: POP
// minersList := minersList diff oldId ;
53519: LD_ADDR_EXP 57
53523: PUSH
53524: LD_EXP 57
53528: PUSH
53529: LD_VAR 0 2
53533: DIFF
53534: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
53535: LD_INT 22
53537: PUSH
53538: LD_VAR 0 4
53542: PPUSH
53543: CALL_OW 255
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 34
53554: PUSH
53555: LD_INT 81
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PPUSH
53566: CALL_OW 69
53570: PUSH
53571: LD_INT 1
53573: GREATER
53574: IFFALSE 53601
// begin ComExit ( unit ) ;
53576: LD_VAR 0 4
53580: PPUSH
53581: CALL 41597 0 1
// SetSide ( newId , oldSide ) ;
53585: LD_VAR 0 1
53589: PPUSH
53590: LD_VAR 0 3
53594: PPUSH
53595: CALL_OW 235
// exit ;
53599: GO 53656
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
53601: LD_ADDR_EXP 57
53605: PUSH
53606: LD_EXP 57
53610: PPUSH
53611: LD_EXP 57
53615: PUSH
53616: LD_INT 1
53618: PLUS
53619: PPUSH
53620: LD_VAR 0 1
53624: PPUSH
53625: CALL_OW 1
53629: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53630: LD_ADDR_EXP 58
53634: PUSH
53635: LD_EXP 58
53639: PPUSH
53640: LD_EXP 58
53644: PUSH
53645: LD_INT 1
53647: PLUS
53648: PPUSH
53649: EMPTY
53650: PPUSH
53651: CALL_OW 1
53655: ST_TO_ADDR
// end ; end ; end_of_file
53656: LD_VAR 0 5
53660: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
53661: LD_EXP 39
53665: IFFALSE 53673
53667: PUSH
53668: CALL 53883 0 0
53672: AND
53673: IFFALSE 53681
53675: PUSH
53676: LD_OWVAR 4
53680: AND
53681: IFFALSE 53880
53683: GO 53685
53685: DISABLE
53686: LD_INT 0
53688: PPUSH
53689: PPUSH
// begin canWin := false ;
53690: LD_ADDR_VAR 0 2
53694: PUSH
53695: LD_INT 0
53697: ST_TO_ADDR
// if not HasPower ( your_side ) then
53698: LD_OWVAR 2
53702: PPUSH
53703: CALL 53925 0 1
53707: NOT
53708: IFFALSE 53719
// begin Multiplayer_Loose_Message ;
53710: CALL_OW 521
// enable ( mpLose ) ;
53714: LD_INT 102
53716: ENABLE_MARKED
// end else
53717: GO 53880
// begin canWin := true ;
53719: LD_ADDR_VAR 0 2
53723: PUSH
53724: LD_INT 1
53726: ST_TO_ADDR
// for i := 1 to 8 do
53727: LD_ADDR_VAR 0 1
53731: PUSH
53732: DOUBLE
53733: LD_INT 1
53735: DEC
53736: ST_TO_ADDR
53737: LD_INT 8
53739: PUSH
53740: FOR_TO
53741: IFFALSE 53866
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53743: LD_EXP 7
53747: PUSH
53748: LD_VAR 0 1
53752: ARRAY
53753: IFFALSE 53766
53755: PUSH
53756: LD_VAR 0 1
53760: PPUSH
53761: CALL_OW 108
53765: AND
53766: IFFALSE 53780
53768: PUSH
53769: LD_VAR 0 1
53773: PUSH
53774: LD_OWVAR 2
53778: NONEQUAL
53779: AND
53780: IFFALSE 53864
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53782: LD_EXP 8
53786: PUSH
53787: LD_VAR 0 1
53791: ARRAY
53792: NOT
53793: IFTRUE 53841
53795: PUSH
53796: LD_EXP 8
53800: PUSH
53801: LD_VAR 0 1
53805: ARRAY
53806: PUSH
53807: LD_EXP 8
53811: PUSH
53812: LD_OWVAR 2
53816: ARRAY
53817: NONEQUAL
53818: IFFALSE 53840
53820: PUSH
53821: LD_OWVAR 2
53825: PPUSH
53826: LD_VAR 0 1
53830: PPUSH
53831: CALL_OW 81
53835: PUSH
53836: LD_INT 1
53838: NONEQUAL
53839: AND
53840: OR
53841: IFFALSE 53864
// if HasPower ( i ) then
53843: LD_VAR 0 1
53847: PPUSH
53848: CALL 53925 0 1
53852: IFFALSE 53864
// begin canWin := false ;
53854: LD_ADDR_VAR 0 2
53858: PUSH
53859: LD_INT 0
53861: ST_TO_ADDR
// break ;
53862: GO 53866
// end ;
53864: GO 53740
53866: POP
53867: POP
// if canWin then
53868: LD_VAR 0 2
53872: IFFALSE 53879
// enable ( mpWin ) else
53874: LD_INT 101
53876: ENABLE_MARKED
53877: GO 53880
// enable ;
53879: ENABLE
// end ; end ;
53880: PPOPN 2
53882: END
// function CanWinLoose ; begin
53883: LD_INT 0
53885: PPUSH
// result := true ;
53886: LD_ADDR_VAR 0 1
53890: PUSH
53891: LD_INT 1
53893: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53894: CALL_OW 531
53898: IFFALSE 53910
53900: PUSH
53901: CALL_OW 519
53905: PUSH
53906: LD_INT 1
53908: GREATER
53909: AND
53910: IFFALSE 53920
// result := false ;
53912: LD_ADDR_VAR 0 1
53916: PUSH
53917: LD_INT 0
53919: ST_TO_ADDR
// end ;
53920: LD_VAR 0 1
53924: RET
// function HasPower ( i ) ; begin
53925: LD_INT 0
53927: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53928: LD_ADDR_VAR 0 2
53932: PUSH
53933: LD_INT 22
53935: PUSH
53936: LD_VAR 0 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: LD_INT 21
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 33
53960: PUSH
53961: LD_INT 3
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 33
53970: PUSH
53971: LD_INT 5
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PPUSH
53988: CALL_OW 69
53992: ST_TO_ADDR
// end ; end_of_file
53993: LD_VAR 0 2
53997: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53998: LD_EXP 39
54002: IFFALSE 54045
54004: GO 54006
54006: DISABLE
54007: LD_INT 0
54009: PPUSH
// begin for i := 1 to 8 do
54010: LD_ADDR_VAR 0 1
54014: PUSH
54015: DOUBLE
54016: LD_INT 1
54018: DEC
54019: ST_TO_ADDR
54020: LD_INT 8
54022: PUSH
54023: FOR_TO
54024: IFFALSE 54043
// SetRestrict ( b_depot , i , state_disabled ) ;
54026: LD_INT 0
54028: PPUSH
54029: LD_VAR 0 1
54033: PPUSH
54034: LD_INT 0
54036: PPUSH
54037: CALL_OW 324
54041: GO 54023
54043: POP
54044: POP
// end ;
54045: PPOPN 1
54047: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54048: LD_EXP 39
54052: IFFALSE 54060
54054: PUSH
54055: CALL 54270 0 0
54059: AND
54060: IFFALSE 54068
54062: PUSH
54063: LD_OWVAR 4
54067: AND
54068: IFFALSE 54267
54070: GO 54072
54072: DISABLE
54073: LD_INT 0
54075: PPUSH
54076: PPUSH
// begin canWin := false ;
54077: LD_ADDR_VAR 0 2
54081: PUSH
54082: LD_INT 0
54084: ST_TO_ADDR
// if not HasPower ( your_side ) then
54085: LD_OWVAR 2
54089: PPUSH
54090: CALL 54312 0 1
54094: NOT
54095: IFFALSE 54106
// begin Multiplayer_Loose_Message ;
54097: CALL_OW 521
// enable ( mpLose ) ;
54101: LD_INT 102
54103: ENABLE_MARKED
// end else
54104: GO 54267
// begin canWin := true ;
54106: LD_ADDR_VAR 0 2
54110: PUSH
54111: LD_INT 1
54113: ST_TO_ADDR
// for i := 1 to 8 do
54114: LD_ADDR_VAR 0 1
54118: PUSH
54119: DOUBLE
54120: LD_INT 1
54122: DEC
54123: ST_TO_ADDR
54124: LD_INT 8
54126: PUSH
54127: FOR_TO
54128: IFFALSE 54253
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54130: LD_EXP 7
54134: PUSH
54135: LD_VAR 0 1
54139: ARRAY
54140: IFFALSE 54153
54142: PUSH
54143: LD_VAR 0 1
54147: PPUSH
54148: CALL_OW 108
54152: AND
54153: IFFALSE 54167
54155: PUSH
54156: LD_VAR 0 1
54160: PUSH
54161: LD_OWVAR 2
54165: NONEQUAL
54166: AND
54167: IFFALSE 54251
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54169: LD_EXP 8
54173: PUSH
54174: LD_VAR 0 1
54178: ARRAY
54179: NOT
54180: IFTRUE 54228
54182: PUSH
54183: LD_EXP 8
54187: PUSH
54188: LD_VAR 0 1
54192: ARRAY
54193: PUSH
54194: LD_EXP 8
54198: PUSH
54199: LD_OWVAR 2
54203: ARRAY
54204: NONEQUAL
54205: IFFALSE 54227
54207: PUSH
54208: LD_OWVAR 2
54212: PPUSH
54213: LD_VAR 0 1
54217: PPUSH
54218: CALL_OW 81
54222: PUSH
54223: LD_INT 1
54225: NONEQUAL
54226: AND
54227: OR
54228: IFFALSE 54251
// if HasPower ( i ) then
54230: LD_VAR 0 1
54234: PPUSH
54235: CALL 54312 0 1
54239: IFFALSE 54251
// begin canWin := false ;
54241: LD_ADDR_VAR 0 2
54245: PUSH
54246: LD_INT 0
54248: ST_TO_ADDR
// break ;
54249: GO 54253
// end ;
54251: GO 54127
54253: POP
54254: POP
// if canWin then
54255: LD_VAR 0 2
54259: IFFALSE 54266
// enable ( mpWin ) else
54261: LD_INT 101
54263: ENABLE_MARKED
54264: GO 54267
// enable ;
54266: ENABLE
// end ; end ;
54267: PPOPN 2
54269: END
// function CanWinLoose ; begin
54270: LD_INT 0
54272: PPUSH
// result := true ;
54273: LD_ADDR_VAR 0 1
54277: PUSH
54278: LD_INT 1
54280: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54281: CALL_OW 531
54285: IFFALSE 54297
54287: PUSH
54288: CALL_OW 519
54292: PUSH
54293: LD_INT 1
54295: GREATER
54296: AND
54297: IFFALSE 54307
// result := false ;
54299: LD_ADDR_VAR 0 1
54303: PUSH
54304: LD_INT 0
54306: ST_TO_ADDR
// end ;
54307: LD_VAR 0 1
54311: RET
// function HasPower ( i ) ; begin
54312: LD_INT 0
54314: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54315: LD_INT 22
54317: PUSH
54318: LD_VAR 0 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 30
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 30
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PPUSH
54359: CALL_OW 69
54363: NOT
54364: IFFALSE 54368
// exit ;
54366: GO 54433
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54368: LD_ADDR_VAR 0 2
54372: PUSH
54373: LD_INT 22
54375: PUSH
54376: LD_VAR 0 1
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 21
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 33
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 33
54410: PUSH
54411: LD_INT 5
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PPUSH
54428: CALL_OW 69
54432: ST_TO_ADDR
// end ; end_of_file
54433: LD_VAR 0 2
54437: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54438: LD_EXP 39
54442: IFFALSE 54783
54444: GO 54446
54446: DISABLE
54447: LD_INT 0
54449: PPUSH
54450: PPUSH
54451: PPUSH
// begin mpKingPoints := [ ] ;
54452: LD_ADDR_EXP 49
54456: PUSH
54457: EMPTY
54458: ST_TO_ADDR
// if mpTeamGame then
54459: LD_EXP 11
54463: IFFALSE 54517
// begin for i := 1 to Count ( mpTeams ) do
54465: LD_ADDR_VAR 0 1
54469: PUSH
54470: DOUBLE
54471: LD_INT 1
54473: DEC
54474: ST_TO_ADDR
54475: LD_EXP 10
54479: PPUSH
54480: CALL 5233 0 1
54484: PUSH
54485: FOR_TO
54486: IFFALSE 54513
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54488: LD_ADDR_EXP 49
54492: PUSH
54493: LD_EXP 49
54497: PPUSH
54498: LD_VAR 0 1
54502: PPUSH
54503: LD_INT 0
54505: PPUSH
54506: CALL_OW 1
54510: ST_TO_ADDR
54511: GO 54485
54513: POP
54514: POP
// end else
54515: GO 54560
// begin for i := 1 to 8 do
54517: LD_ADDR_VAR 0 1
54521: PUSH
54522: DOUBLE
54523: LD_INT 1
54525: DEC
54526: ST_TO_ADDR
54527: LD_INT 8
54529: PUSH
54530: FOR_TO
54531: IFFALSE 54558
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54533: LD_ADDR_EXP 49
54537: PUSH
54538: LD_EXP 49
54542: PPUSH
54543: LD_VAR 0 1
54547: PPUSH
54548: LD_INT 0
54550: PPUSH
54551: CALL_OW 1
54555: ST_TO_ADDR
54556: GO 54530
54558: POP
54559: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
54560: LD_ADDR_VAR 0 3
54564: PUSH
54565: LD_EXP 2
54569: PPUSH
54570: LD_INT 0
54572: PPUSH
54573: CALL_OW 517
54577: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54578: LD_ADDR_VAR 0 1
54582: PUSH
54583: DOUBLE
54584: LD_INT 1
54586: DEC
54587: ST_TO_ADDR
54588: LD_VAR 0 3
54592: PUSH
54593: LD_INT 1
54595: ARRAY
54596: PUSH
54597: FOR_TO
54598: IFFALSE 54665
// for j := 1 to 8 do
54600: LD_ADDR_VAR 0 2
54604: PUSH
54605: DOUBLE
54606: LD_INT 1
54608: DEC
54609: ST_TO_ADDR
54610: LD_INT 8
54612: PUSH
54613: FOR_TO
54614: IFFALSE 54661
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
54616: LD_VAR 0 3
54620: PUSH
54621: LD_INT 1
54623: ARRAY
54624: PUSH
54625: LD_VAR 0 1
54629: ARRAY
54630: PPUSH
54631: LD_VAR 0 3
54635: PUSH
54636: LD_INT 2
54638: ARRAY
54639: PUSH
54640: LD_VAR 0 1
54644: ARRAY
54645: PPUSH
54646: LD_VAR 0 2
54650: PPUSH
54651: LD_INT 12
54653: NEG
54654: PPUSH
54655: CALL_OW 330
54659: GO 54613
54661: POP
54662: POP
54663: GO 54597
54665: POP
54666: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
54667: LD_EXP 34
54671: PPUSH
54672: LD_INT 1
54674: PPUSH
54675: CALL_OW 424
// UpdateCounter ;
54679: CALL 55289 0 0
// repeat wait ( 0 0$1 ) ;
54683: LD_INT 35
54685: PPUSH
54686: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54690: LD_ADDR_VAR 0 3
54694: PUSH
54695: LD_EXP 34
54699: PPUSH
54700: LD_INT 3
54702: PUSH
54703: LD_INT 57
54705: PUSH
54706: EMPTY
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 50
54715: PUSH
54716: EMPTY
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: LD_INT 30
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 30
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: LIST
54751: PPUSH
54752: CALL_OW 70
54756: ST_TO_ADDR
// if not tmp then
54757: LD_VAR 0 3
54761: NOT
54762: IFFALSE 54766
// continue ;
54764: GO 54683
// AddPoints ( tmp ) ;
54766: LD_VAR 0 3
54770: PPUSH
54771: CALL 54967 0 1
// UpdateCounter ;
54775: CALL 55289 0 0
// until false ;
54779: LD_INT 0
54781: IFFALSE 54683
// end ;
54783: PPOPN 3
54785: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54786: LD_EXP 39
54790: IFFALSE 54798
54792: PUSH
54793: LD_EXP 37
54797: AND
54798: IFFALSE 54964
54800: GO 54802
54802: DISABLE
54803: LD_INT 0
54805: PPUSH
54806: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54807: LD_ADDR_VAR 0 2
54811: PUSH
54812: LD_EXP 2
54816: PPUSH
54817: LD_INT 0
54819: PPUSH
54820: CALL_OW 517
54824: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54825: LD_ADDR_VAR 0 1
54829: PUSH
54830: DOUBLE
54831: LD_INT 1
54833: DEC
54834: ST_TO_ADDR
54835: LD_VAR 0 2
54839: PUSH
54840: LD_INT 1
54842: ARRAY
54843: PUSH
54844: FOR_TO
54845: IFFALSE 54886
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54847: LD_VAR 0 2
54851: PUSH
54852: LD_INT 1
54854: ARRAY
54855: PUSH
54856: LD_VAR 0 1
54860: ARRAY
54861: PPUSH
54862: LD_VAR 0 2
54866: PUSH
54867: LD_INT 2
54869: ARRAY
54870: PUSH
54871: LD_VAR 0 1
54875: ARRAY
54876: PPUSH
54877: LD_INT 125
54879: PPUSH
54880: CALL_OW 495
54884: GO 54844
54886: POP
54887: POP
// repeat wait ( mpEmissions ) ;
54888: LD_EXP 37
54892: PPUSH
54893: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54897: LD_ADDR_VAR 0 1
54901: PUSH
54902: DOUBLE
54903: LD_INT 1
54905: DEC
54906: ST_TO_ADDR
54907: LD_VAR 0 2
54911: PUSH
54912: LD_INT 1
54914: ARRAY
54915: PUSH
54916: FOR_TO
54917: IFFALSE 54958
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54919: LD_VAR 0 2
54923: PUSH
54924: LD_INT 1
54926: ARRAY
54927: PUSH
54928: LD_VAR 0 1
54932: ARRAY
54933: PPUSH
54934: LD_VAR 0 2
54938: PUSH
54939: LD_INT 2
54941: ARRAY
54942: PUSH
54943: LD_VAR 0 1
54947: ARRAY
54948: PPUSH
54949: LD_INT 15
54951: PPUSH
54952: CALL_OW 495
54956: GO 54916
54958: POP
54959: POP
// until false ;
54960: LD_INT 0
54962: IFFALSE 54888
// end ;
54964: PPOPN 2
54966: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54967: LD_INT 0
54969: PPUSH
54970: PPUSH
54971: PPUSH
54972: PPUSH
54973: PPUSH
// if mpTeamGame then
54974: LD_EXP 11
54978: IFFALSE 55175
// begin first := depots [ 1 ] ;
54980: LD_ADDR_VAR 0 4
54984: PUSH
54985: LD_VAR 0 1
54989: PUSH
54990: LD_INT 1
54992: ARRAY
54993: ST_TO_ADDR
// side := GetSide ( first ) ;
54994: LD_ADDR_VAR 0 6
54998: PUSH
54999: LD_VAR 0 4
55003: PPUSH
55004: CALL_OW 255
55008: ST_TO_ADDR
// for i := 1 to mpTeams do
55009: LD_ADDR_VAR 0 3
55013: PUSH
55014: DOUBLE
55015: LD_INT 1
55017: DEC
55018: ST_TO_ADDR
55019: LD_EXP 10
55023: PUSH
55024: FOR_TO
55025: IFFALSE 55059
// if side in mpTeams [ i ] then
55027: LD_VAR 0 6
55031: PUSH
55032: LD_EXP 10
55036: PUSH
55037: LD_VAR 0 3
55041: ARRAY
55042: IN
55043: IFFALSE 55057
// begin team := i ;
55045: LD_ADDR_VAR 0 5
55049: PUSH
55050: LD_VAR 0 3
55054: ST_TO_ADDR
// break ;
55055: GO 55059
// end ;
55057: GO 55024
55059: POP
55060: POP
// if not team then
55061: LD_VAR 0 5
55065: NOT
55066: IFFALSE 55070
// exit ;
55068: GO 55284
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55070: LD_EXP 34
55074: PPUSH
55075: LD_INT 81
55077: PUSH
55078: LD_VAR 0 6
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PPUSH
55087: CALL_OW 70
55091: IFFALSE 55095
// exit ;
55093: GO 55284
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55095: LD_ADDR_EXP 49
55099: PUSH
55100: LD_EXP 49
55104: PPUSH
55105: LD_VAR 0 5
55109: PPUSH
55110: LD_EXP 49
55114: PUSH
55115: LD_VAR 0 5
55119: ARRAY
55120: PUSH
55121: LD_INT 1
55123: PLUS
55124: PPUSH
55125: CALL_OW 1
55129: ST_TO_ADDR
// for i in mpTeams [ team ] do
55130: LD_ADDR_VAR 0 3
55134: PUSH
55135: LD_EXP 10
55139: PUSH
55140: LD_VAR 0 5
55144: ARRAY
55145: PUSH
55146: FOR_IN
55147: IFFALSE 55171
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55149: LD_VAR 0 3
55153: PPUSH
55154: LD_EXP 49
55158: PUSH
55159: LD_VAR 0 5
55163: ARRAY
55164: PPUSH
55165: CALL_OW 506
55169: GO 55146
55171: POP
55172: POP
// end else
55173: GO 55284
// begin first := depots [ 1 ] ;
55175: LD_ADDR_VAR 0 4
55179: PUSH
55180: LD_VAR 0 1
55184: PUSH
55185: LD_INT 1
55187: ARRAY
55188: ST_TO_ADDR
// side := GetSide ( first ) ;
55189: LD_ADDR_VAR 0 6
55193: PUSH
55194: LD_VAR 0 4
55198: PPUSH
55199: CALL_OW 255
55203: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55204: LD_EXP 34
55208: PPUSH
55209: LD_INT 81
55211: PUSH
55212: LD_VAR 0 6
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PPUSH
55221: CALL_OW 70
55225: IFFALSE 55229
// exit ;
55227: GO 55284
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55229: LD_ADDR_EXP 49
55233: PUSH
55234: LD_EXP 49
55238: PPUSH
55239: LD_VAR 0 6
55243: PPUSH
55244: LD_EXP 49
55248: PUSH
55249: LD_VAR 0 6
55253: ARRAY
55254: PUSH
55255: LD_INT 1
55257: PLUS
55258: PPUSH
55259: CALL_OW 1
55263: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55264: LD_VAR 0 6
55268: PPUSH
55269: LD_EXP 49
55273: PUSH
55274: LD_VAR 0 6
55278: ARRAY
55279: PPUSH
55280: CALL_OW 506
// end ; end ;
55284: LD_VAR 0 2
55288: RET
// function UpdateCounter ; var i ; begin
55289: LD_INT 0
55291: PPUSH
55292: PPUSH
// result := [ ] ;
55293: LD_ADDR_VAR 0 1
55297: PUSH
55298: EMPTY
55299: ST_TO_ADDR
// if mpTeamGame then
55300: LD_EXP 11
55304: IFFALSE 55371
// begin for i := 1 to mpTeams do
55306: LD_ADDR_VAR 0 2
55310: PUSH
55311: DOUBLE
55312: LD_INT 1
55314: DEC
55315: ST_TO_ADDR
55316: LD_EXP 10
55320: PUSH
55321: FOR_TO
55322: IFFALSE 55367
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55324: LD_ADDR_VAR 0 1
55328: PUSH
55329: LD_VAR 0 1
55333: PUSH
55334: LD_STRING #KingoftheHill-Team
55336: PUSH
55337: LD_VAR 0 2
55341: PUSH
55342: LD_EXP 49
55346: PUSH
55347: LD_VAR 0 2
55351: ARRAY
55352: PUSH
55353: LD_EXP 35
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: ADD
55364: ST_TO_ADDR
55365: GO 55321
55367: POP
55368: POP
// end else
55369: GO 55444
// begin for i := 1 to 8 do
55371: LD_ADDR_VAR 0 2
55375: PUSH
55376: DOUBLE
55377: LD_INT 1
55379: DEC
55380: ST_TO_ADDR
55381: LD_INT 8
55383: PUSH
55384: FOR_TO
55385: IFFALSE 55442
// if mpSidePositions [ i ] then
55387: LD_EXP 7
55391: PUSH
55392: LD_VAR 0 2
55396: ARRAY
55397: IFFALSE 55440
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55399: LD_ADDR_VAR 0 1
55403: PUSH
55404: LD_VAR 0 1
55408: PUSH
55409: LD_STRING #KingoftheHill-Player
55411: PUSH
55412: LD_VAR 0 2
55416: PUSH
55417: LD_EXP 49
55421: PUSH
55422: LD_VAR 0 2
55426: ARRAY
55427: PUSH
55428: LD_EXP 35
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: ADD
55439: ST_TO_ADDR
55440: GO 55384
55442: POP
55443: POP
// end ; mpDisplayStrings := result ;
55444: LD_ADDR_EXP 38
55448: PUSH
55449: LD_VAR 0 1
55453: ST_TO_ADDR
// end ;
55454: LD_VAR 0 1
55458: RET
// export function HowMuchPointsKing ( side ) ; begin
55459: LD_INT 0
55461: PPUSH
// result := HowMuchPoints ( side ) ;
55462: LD_ADDR_VAR 0 2
55466: PUSH
55467: LD_VAR 0 1
55471: PPUSH
55472: CALL 55482 0 1
55476: ST_TO_ADDR
// end ;
55477: LD_VAR 0 2
55481: RET
// function HowMuchPoints ( side ) ; var i ; begin
55482: LD_INT 0
55484: PPUSH
55485: PPUSH
// if mpTeamGame then
55486: LD_EXP 11
55490: IFFALSE 55559
// begin for i := 1 to Count ( mpTeams ) do
55492: LD_ADDR_VAR 0 3
55496: PUSH
55497: DOUBLE
55498: LD_INT 1
55500: DEC
55501: ST_TO_ADDR
55502: LD_EXP 10
55506: PPUSH
55507: CALL 5233 0 1
55511: PUSH
55512: FOR_TO
55513: IFFALSE 55555
// begin if side in mpTeams [ i ] then
55515: LD_VAR 0 1
55519: PUSH
55520: LD_EXP 10
55524: PUSH
55525: LD_VAR 0 3
55529: ARRAY
55530: IN
55531: IFFALSE 55553
// begin result := mpKingPoints [ i ] ;
55533: LD_ADDR_VAR 0 2
55537: PUSH
55538: LD_EXP 49
55542: PUSH
55543: LD_VAR 0 3
55547: ARRAY
55548: ST_TO_ADDR
// exit ;
55549: POP
55550: POP
55551: GO 55575
// end ; end ;
55553: GO 55512
55555: POP
55556: POP
// end else
55557: GO 55575
// result := mpKingPoints [ side ] ;
55559: LD_ADDR_VAR 0 2
55563: PUSH
55564: LD_EXP 49
55568: PUSH
55569: LD_VAR 0 1
55573: ARRAY
55574: ST_TO_ADDR
// end ;
55575: LD_VAR 0 2
55579: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
55580: LD_EXP 39
55584: IFFALSE 55592
55586: PUSH
55587: CALL 56004 0 0
55591: AND
55592: IFFALSE 55600
55594: PUSH
55595: LD_OWVAR 4
55599: AND
55600: IFFALSE 55853
55602: GO 55604
55604: DISABLE
55605: LD_INT 0
55607: PPUSH
55608: PPUSH
// begin canWin := false ;
55609: LD_ADDR_VAR 0 2
55613: PUSH
55614: LD_INT 0
55616: ST_TO_ADDR
// if not HasPower ( your_side ) then
55617: LD_OWVAR 2
55621: PPUSH
55622: CALL 56046 0 1
55626: NOT
55627: IFFALSE 55638
// begin Multiplayer_Loose_Message ;
55629: CALL_OW 521
// enable ( mpLose ) ;
55633: LD_INT 102
55635: ENABLE_MARKED
// end else
55636: GO 55853
// begin if not EnemiesInGame then
55638: CALL 55856 0 0
55642: NOT
55643: IFFALSE 55650
// begin enable ( mpWin ) ;
55645: LD_INT 101
55647: ENABLE_MARKED
// exit ;
55648: GO 55853
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
55650: LD_ADDR_VAR 0 2
55654: PUSH
55655: LD_OWVAR 2
55659: PPUSH
55660: CALL 55482 0 1
55664: PUSH
55665: LD_EXP 35
55669: GREATEREQUAL
55670: IFFALSE 55683
55672: PUSH
55673: LD_OWVAR 2
55677: PPUSH
55678: CALL 56046 0 1
55682: AND
55683: ST_TO_ADDR
// for i := 1 to 8 do
55684: LD_ADDR_VAR 0 1
55688: PUSH
55689: DOUBLE
55690: LD_INT 1
55692: DEC
55693: ST_TO_ADDR
55694: LD_INT 8
55696: PUSH
55697: FOR_TO
55698: IFFALSE 55839
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55700: LD_EXP 7
55704: PUSH
55705: LD_VAR 0 1
55709: ARRAY
55710: IFFALSE 55723
55712: PUSH
55713: LD_VAR 0 1
55717: PPUSH
55718: CALL_OW 108
55722: AND
55723: IFFALSE 55737
55725: PUSH
55726: LD_VAR 0 1
55730: PUSH
55731: LD_OWVAR 2
55735: NONEQUAL
55736: AND
55737: IFFALSE 55837
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55739: LD_EXP 8
55743: PUSH
55744: LD_VAR 0 1
55748: ARRAY
55749: NOT
55750: IFTRUE 55798
55752: PUSH
55753: LD_EXP 8
55757: PUSH
55758: LD_VAR 0 1
55762: ARRAY
55763: PUSH
55764: LD_EXP 8
55768: PUSH
55769: LD_OWVAR 2
55773: ARRAY
55774: NONEQUAL
55775: IFFALSE 55797
55777: PUSH
55778: LD_OWVAR 2
55782: PPUSH
55783: LD_VAR 0 1
55787: PPUSH
55788: CALL_OW 81
55792: PUSH
55793: LD_INT 1
55795: NONEQUAL
55796: AND
55797: OR
55798: IFFALSE 55837
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55800: LD_VAR 0 1
55804: PPUSH
55805: CALL 55482 0 1
55809: PUSH
55810: LD_EXP 35
55814: GREATEREQUAL
55815: IFFALSE 55828
55817: PUSH
55818: LD_VAR 0 1
55822: PPUSH
55823: CALL 56046 0 1
55827: AND
55828: IFFALSE 55837
// begin enable ( mpLose ) ;
55830: LD_INT 102
55832: ENABLE_MARKED
// exit ;
55833: POP
55834: POP
55835: GO 55853
// end ;
55837: GO 55697
55839: POP
55840: POP
// if canWin then
55841: LD_VAR 0 2
55845: IFFALSE 55852
// enable ( mpWin ) else
55847: LD_INT 101
55849: ENABLE_MARKED
55850: GO 55853
// enable ;
55852: ENABLE
// end ; end ;
55853: PPOPN 2
55855: END
// function EnemiesInGame ; var i ; begin
55856: LD_INT 0
55858: PPUSH
55859: PPUSH
// result := false ;
55860: LD_ADDR_VAR 0 1
55864: PUSH
55865: LD_INT 0
55867: ST_TO_ADDR
// for i := 1 to 8 do
55868: LD_ADDR_VAR 0 2
55872: PUSH
55873: DOUBLE
55874: LD_INT 1
55876: DEC
55877: ST_TO_ADDR
55878: LD_INT 8
55880: PUSH
55881: FOR_TO
55882: IFFALSE 55997
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55884: LD_VAR 0 2
55888: PUSH
55889: LD_OWVAR 2
55893: NONEQUAL
55894: IFFALSE 55907
55896: PUSH
55897: LD_VAR 0 2
55901: PPUSH
55902: CALL 56046 0 1
55906: AND
55907: IFFALSE 55920
55909: PUSH
55910: LD_VAR 0 2
55914: PPUSH
55915: CALL_OW 108
55919: AND
55920: IFFALSE 55995
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55922: LD_EXP 8
55926: PUSH
55927: LD_VAR 0 2
55931: ARRAY
55932: NOT
55933: IFTRUE 55981
55935: PUSH
55936: LD_EXP 8
55940: PUSH
55941: LD_VAR 0 2
55945: ARRAY
55946: PUSH
55947: LD_EXP 8
55951: PUSH
55952: LD_OWVAR 2
55956: ARRAY
55957: NONEQUAL
55958: IFFALSE 55980
55960: PUSH
55961: LD_OWVAR 2
55965: PPUSH
55966: LD_VAR 0 2
55970: PPUSH
55971: CALL_OW 81
55975: PUSH
55976: LD_INT 1
55978: NONEQUAL
55979: AND
55980: OR
55981: IFFALSE 55995
// begin result := true ;
55983: LD_ADDR_VAR 0 1
55987: PUSH
55988: LD_INT 1
55990: ST_TO_ADDR
// exit ;
55991: POP
55992: POP
55993: GO 55999
// end ;
55995: GO 55881
55997: POP
55998: POP
// end ;
55999: LD_VAR 0 1
56003: RET
// function CanWinLoose ; begin
56004: LD_INT 0
56006: PPUSH
// result := true ;
56007: LD_ADDR_VAR 0 1
56011: PUSH
56012: LD_INT 1
56014: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56015: CALL_OW 531
56019: IFFALSE 56031
56021: PUSH
56022: CALL_OW 519
56026: PUSH
56027: LD_INT 1
56029: GREATER
56030: AND
56031: IFFALSE 56041
// result := false ;
56033: LD_ADDR_VAR 0 1
56037: PUSH
56038: LD_INT 0
56040: ST_TO_ADDR
// end ;
56041: LD_VAR 0 1
56045: RET
// function HasPower ( i ) ; begin
56046: LD_INT 0
56048: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56049: LD_ADDR_VAR 0 2
56053: PUSH
56054: LD_INT 22
56056: PUSH
56057: LD_VAR 0 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: LD_INT 21
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 33
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 33
56091: PUSH
56092: LD_INT 5
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PPUSH
56109: CALL_OW 69
56113: ST_TO_ADDR
// end ; end_of_file end_of_file
56114: LD_VAR 0 2
56118: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56119: LD_VAR 0 1
56123: PUSH
56124: LD_INT 200
56126: DOUBLE
56127: GREATEREQUAL
56128: IFFALSE 56136
56130: LD_INT 299
56132: DOUBLE
56133: LESSEQUAL
56134: IFTRUE 56138
56136: GO 56170
56138: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56139: LD_VAR 0 1
56143: PPUSH
56144: LD_VAR 0 2
56148: PPUSH
56149: LD_VAR 0 3
56153: PPUSH
56154: LD_VAR 0 4
56158: PPUSH
56159: LD_VAR 0 5
56163: PPUSH
56164: CALL 57032 0 5
56168: GO 56247
56170: LD_INT 300
56172: DOUBLE
56173: GREATEREQUAL
56174: IFFALSE 56182
56176: LD_INT 399
56178: DOUBLE
56179: LESSEQUAL
56180: IFTRUE 56184
56182: GO 56246
56184: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56185: LD_VAR 0 1
56189: PPUSH
56190: LD_VAR 0 2
56194: PPUSH
56195: LD_VAR 0 3
56199: PPUSH
56200: LD_VAR 0 4
56204: PPUSH
56205: LD_VAR 0 5
56209: PPUSH
56210: LD_VAR 0 6
56214: PPUSH
56215: LD_VAR 0 7
56219: PPUSH
56220: LD_VAR 0 8
56224: PPUSH
56225: LD_VAR 0 9
56229: PPUSH
56230: LD_VAR 0 10
56234: PPUSH
56235: LD_VAR 0 11
56239: PPUSH
56240: CALL 63353 0 11
56244: GO 56247
56246: POP
// end ;
56247: PPOPN 11
56249: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56250: LD_VAR 0 1
56254: PPUSH
56255: LD_VAR 0 2
56259: PPUSH
56260: LD_VAR 0 3
56264: PPUSH
56265: LD_VAR 0 4
56269: PPUSH
56270: LD_VAR 0 5
56274: PPUSH
56275: CALL 56332 0 5
// end ; end_of_file
56279: PPOPN 5
56281: END
// export function SOS_UnitDestroyed ( un ) ; begin
56282: LD_INT 0
56284: PPUSH
// ComRadiation ( un ) ;
56285: LD_VAR 0 1
56289: PPUSH
56290: CALL 57452 0 1
// end ;
56294: LD_VAR 0 2
56298: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56299: LD_INT 0
56301: PPUSH
// ComRadiation ( un ) ;
56302: LD_VAR 0 1
56306: PPUSH
56307: CALL 57452 0 1
// end ;
56311: LD_VAR 0 2
56315: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56316: LD_INT 0
56318: PPUSH
// end ;
56319: LD_VAR 0 4
56323: RET
// export function SOS_Command ( cmd ) ; begin
56324: LD_INT 0
56326: PPUSH
// end ;
56327: LD_VAR 0 2
56331: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56332: LD_INT 0
56334: PPUSH
// end ;
56335: LD_VAR 0 6
56339: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56340: LD_INT 0
56342: PPUSH
56343: PPUSH
56344: PPUSH
56345: PPUSH
56346: PPUSH
// if not vehicle or not factory then
56347: LD_VAR 0 1
56351: NOT
56352: IFTRUE 56361
56354: PUSH
56355: LD_VAR 0 2
56359: NOT
56360: OR
56361: IFFALSE 56365
// exit ;
56363: GO 57027
// weapon := GetWeapon ( vehicle ) ;
56365: LD_ADDR_VAR 0 7
56369: PUSH
56370: LD_VAR 0 1
56374: PPUSH
56375: CALL_OW 264
56379: ST_TO_ADDR
// if weapon = ar_miner then
56380: LD_VAR 0 7
56384: PUSH
56385: LD_INT 81
56387: EQUAL
56388: IFFALSE 56445
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56390: LD_ADDR_EXP 57
56394: PUSH
56395: LD_EXP 57
56399: PPUSH
56400: LD_EXP 57
56404: PUSH
56405: LD_INT 1
56407: PLUS
56408: PPUSH
56409: LD_VAR 0 1
56413: PPUSH
56414: CALL_OW 1
56418: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56419: LD_ADDR_EXP 58
56423: PUSH
56424: LD_EXP 58
56428: PPUSH
56429: LD_EXP 58
56433: PUSH
56434: LD_INT 1
56436: PLUS
56437: PPUSH
56438: EMPTY
56439: PPUSH
56440: CALL_OW 1
56444: ST_TO_ADDR
// end ; if not factoryWaypoints then
56445: LD_EXP 60
56449: NOT
56450: IFFALSE 56454
// exit ;
56452: GO 57027
// for i := 1 to Count ( factoryWaypoints ) do
56454: LD_ADDR_VAR 0 4
56458: PUSH
56459: DOUBLE
56460: LD_INT 1
56462: DEC
56463: ST_TO_ADDR
56464: LD_EXP 60
56468: PPUSH
56469: CALL 5233 0 1
56473: PUSH
56474: FOR_TO
56475: IFFALSE 57025
// if factoryWaypoints [ i ] [ 2 ] = factory then
56477: LD_EXP 60
56481: PUSH
56482: LD_VAR 0 4
56486: ARRAY
56487: PUSH
56488: LD_INT 2
56490: ARRAY
56491: PUSH
56492: LD_VAR 0 2
56496: EQUAL
56497: IFFALSE 57023
// begin if GetControl ( vehicle ) = control_manual then
56499: LD_VAR 0 1
56503: PPUSH
56504: CALL_OW 263
56508: PUSH
56509: LD_INT 1
56511: EQUAL
56512: IFFALSE 56876
// begin driver := IsDrivenBy ( vehicle ) ;
56514: LD_ADDR_VAR 0 5
56518: PUSH
56519: LD_VAR 0 1
56523: PPUSH
56524: CALL_OW 311
56528: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56529: LD_VAR 0 5
56533: PUSH
56534: LD_EXP 61
56538: IN
56539: IFTRUE 56553
56541: PUSH
56542: LD_VAR 0 1
56546: PUSH
56547: LD_EXP 61
56551: IN
56552: OR
56553: IFFALSE 56559
// exit ;
56555: POP
56556: POP
56557: GO 57027
// if not HasTask ( driver ) then
56559: LD_VAR 0 5
56563: PPUSH
56564: CALL_OW 314
56568: NOT
56569: IFFALSE 56874
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56571: LD_ADDR_EXP 61
56575: PUSH
56576: LD_EXP 61
56580: PPUSH
56581: LD_VAR 0 5
56585: PPUSH
56586: CALL 41199 0 2
56590: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56591: LD_ADDR_EXP 61
56595: PUSH
56596: LD_EXP 61
56600: PPUSH
56601: LD_VAR 0 1
56605: PPUSH
56606: CALL 41199 0 2
56610: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56611: LD_ADDR_VAR 0 6
56615: PUSH
56616: LD_EXP 60
56620: PUSH
56621: LD_VAR 0 4
56625: ARRAY
56626: PUSH
56627: LD_INT 3
56629: ARRAY
56630: PPUSH
56631: LD_EXP 60
56635: PUSH
56636: LD_VAR 0 4
56640: ARRAY
56641: PUSH
56642: LD_INT 4
56644: ARRAY
56645: PPUSH
56646: CALL_OW 428
56650: ST_TO_ADDR
// if hex then
56651: LD_VAR 0 6
56655: IFFALSE 56673
// ComMoveUnit ( driver , hex ) else
56657: LD_VAR 0 5
56661: PPUSH
56662: LD_VAR 0 6
56666: PPUSH
56667: CALL_OW 112
56671: GO 56757
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56673: LD_VAR 0 1
56677: PPUSH
56678: LD_EXP 60
56682: PUSH
56683: LD_VAR 0 4
56687: ARRAY
56688: PUSH
56689: LD_INT 3
56691: ARRAY
56692: PPUSH
56693: LD_EXP 60
56697: PUSH
56698: LD_VAR 0 4
56702: ARRAY
56703: PUSH
56704: LD_INT 4
56706: ARRAY
56707: PPUSH
56708: CALL_OW 297
56712: PUSH
56713: LD_INT 0
56715: GREATER
56716: IFFALSE 56757
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56718: LD_VAR 0 5
56722: PPUSH
56723: LD_EXP 60
56727: PUSH
56728: LD_VAR 0 4
56732: ARRAY
56733: PUSH
56734: LD_INT 3
56736: ARRAY
56737: PPUSH
56738: LD_EXP 60
56742: PUSH
56743: LD_VAR 0 4
56747: ARRAY
56748: PUSH
56749: LD_INT 4
56751: ARRAY
56752: PPUSH
56753: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56757: LD_VAR 0 5
56761: PPUSH
56762: CALL_OW 181
// if Multiplayer then
56766: LD_OWVAR 4
56770: IFFALSE 56819
// begin repeat wait ( 10 ) ;
56772: LD_INT 10
56774: PPUSH
56775: CALL_OW 67
// until not IsInUnit ( driver ) ;
56779: LD_VAR 0 5
56783: PPUSH
56784: CALL_OW 310
56788: NOT
56789: IFFALSE 56772
// if not HasTask ( driver ) then
56791: LD_VAR 0 5
56795: PPUSH
56796: CALL_OW 314
56800: NOT
56801: IFFALSE 56817
// ComEnterUnit ( driver , factory ) ;
56803: LD_VAR 0 5
56807: PPUSH
56808: LD_VAR 0 2
56812: PPUSH
56813: CALL_OW 120
// end else
56817: GO 56833
// AddComEnterUnit ( driver , factory ) ;
56819: LD_VAR 0 5
56823: PPUSH
56824: LD_VAR 0 2
56828: PPUSH
56829: CALL_OW 180
// wait ( 0 0$1 ) ;
56833: LD_INT 35
56835: PPUSH
56836: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56840: LD_ADDR_EXP 61
56844: PUSH
56845: LD_EXP 61
56849: PUSH
56850: LD_VAR 0 5
56854: DIFF
56855: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56856: LD_ADDR_EXP 61
56860: PUSH
56861: LD_EXP 61
56865: PUSH
56866: LD_VAR 0 1
56870: DIFF
56871: ST_TO_ADDR
// break ;
56872: GO 57025
// end ; end else
56874: GO 57023
// if GetControl ( vehicle ) = control_remote then
56876: LD_VAR 0 1
56880: PPUSH
56881: CALL_OW 263
56885: PUSH
56886: LD_INT 2
56888: EQUAL
56889: IFFALSE 56975
// begin wait ( 0 0$2 ) ;
56891: LD_INT 70
56893: PPUSH
56894: CALL_OW 67
// repeat wait ( 10 ) ;
56898: LD_INT 10
56900: PPUSH
56901: CALL_OW 67
// Connect ( vehicle ) ;
56905: LD_VAR 0 1
56909: PPUSH
56910: CALL 11511 0 1
// until IsControledBy ( vehicle ) ;
56914: LD_VAR 0 1
56918: PPUSH
56919: CALL_OW 312
56923: IFFALSE 56898
// wait ( 10 ) ;
56925: LD_INT 10
56927: PPUSH
56928: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56932: LD_VAR 0 1
56936: PPUSH
56937: LD_EXP 60
56941: PUSH
56942: LD_VAR 0 4
56946: ARRAY
56947: PUSH
56948: LD_INT 3
56950: ARRAY
56951: PPUSH
56952: LD_EXP 60
56956: PUSH
56957: LD_VAR 0 4
56961: ARRAY
56962: PUSH
56963: LD_INT 4
56965: ARRAY
56966: PPUSH
56967: CALL_OW 111
// break ;
56971: GO 57025
// end else
56973: GO 57023
// begin wait ( 0 0$3 ) ;
56975: LD_INT 105
56977: PPUSH
56978: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56982: LD_VAR 0 1
56986: PPUSH
56987: LD_EXP 60
56991: PUSH
56992: LD_VAR 0 4
56996: ARRAY
56997: PUSH
56998: LD_INT 3
57000: ARRAY
57001: PPUSH
57002: LD_EXP 60
57006: PUSH
57007: LD_VAR 0 4
57011: ARRAY
57012: PUSH
57013: LD_INT 4
57015: ARRAY
57016: PPUSH
57017: CALL_OW 111
// break ;
57021: GO 57025
// end ; end ;
57023: GO 56474
57025: POP
57026: POP
// end ;
57027: LD_VAR 0 3
57031: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57032: LD_INT 0
57034: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57035: LD_VAR 0 1
57039: PUSH
57040: LD_INT 250
57042: EQUAL
57043: IFFALSE 57060
57045: PUSH
57046: LD_VAR 0 2
57050: PPUSH
57051: CALL_OW 264
57055: PUSH
57056: LD_INT 81
57058: EQUAL
57059: AND
57060: IFFALSE 57081
// MinerPlaceMine ( unit , x , y ) ;
57062: LD_VAR 0 2
57066: PPUSH
57067: LD_VAR 0 4
57071: PPUSH
57072: LD_VAR 0 5
57076: PPUSH
57077: CALL 60362 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57081: LD_VAR 0 1
57085: PUSH
57086: LD_INT 251
57088: EQUAL
57089: IFFALSE 57106
57091: PUSH
57092: LD_VAR 0 2
57096: PPUSH
57097: CALL_OW 264
57101: PUSH
57102: LD_INT 81
57104: EQUAL
57105: AND
57106: IFFALSE 57127
// MinerDetonateMine ( unit , x , y ) ;
57108: LD_VAR 0 2
57112: PPUSH
57113: LD_VAR 0 4
57117: PPUSH
57118: LD_VAR 0 5
57122: PPUSH
57123: CALL 60769 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57127: LD_VAR 0 1
57131: PUSH
57132: LD_INT 252
57134: EQUAL
57135: IFFALSE 57152
57137: PUSH
57138: LD_VAR 0 2
57142: PPUSH
57143: CALL_OW 264
57147: PUSH
57148: LD_INT 81
57150: EQUAL
57151: AND
57152: IFFALSE 57173
// MinerCreateMinefield ( unit , x , y ) ;
57154: LD_VAR 0 2
57158: PPUSH
57159: LD_VAR 0 4
57163: PPUSH
57164: LD_VAR 0 5
57168: PPUSH
57169: CALL 61001 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57173: LD_VAR 0 1
57177: PUSH
57178: LD_INT 253
57180: EQUAL
57181: IFFALSE 57198
57183: PUSH
57184: LD_VAR 0 2
57188: PPUSH
57189: CALL_OW 257
57193: PUSH
57194: LD_INT 5
57196: EQUAL
57197: AND
57198: IFFALSE 57219
// ComBinocular ( unit , x , y ) ;
57200: LD_VAR 0 2
57204: PPUSH
57205: LD_VAR 0 4
57209: PPUSH
57210: LD_VAR 0 5
57214: PPUSH
57215: CALL 61376 0 3
// if selectedUnit then
57219: LD_VAR 0 3
57223: IFFALSE 57283
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57225: LD_VAR 0 1
57229: PUSH
57230: LD_INT 254
57232: EQUAL
57233: IFFALSE 57250
57235: PUSH
57236: LD_VAR 0 2
57240: PPUSH
57241: CALL_OW 264
57245: PUSH
57246: LD_INT 99
57248: EQUAL
57249: AND
57250: IFFALSE 57267
57252: PUSH
57253: LD_VAR 0 3
57257: PPUSH
57258: CALL_OW 263
57262: PUSH
57263: LD_INT 3
57265: EQUAL
57266: AND
57267: IFFALSE 57283
// HackDestroyVehicle ( unit , selectedUnit ) ;
57269: LD_VAR 0 2
57273: PPUSH
57274: LD_VAR 0 3
57278: PPUSH
57279: CALL 59573 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57283: LD_VAR 0 1
57287: PUSH
57288: LD_INT 255
57290: EQUAL
57291: IFFALSE 57315
57293: PUSH
57294: LD_VAR 0 2
57298: PPUSH
57299: CALL_OW 264
57303: PUSH
57304: LD_INT 14
57306: PUSH
57307: LD_INT 53
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: IN
57314: AND
57315: IFFALSE 57333
57317: PUSH
57318: LD_VAR 0 4
57322: PPUSH
57323: LD_VAR 0 5
57327: PPUSH
57328: CALL_OW 488
57332: AND
57333: IFFALSE 57357
// CutTreeXYR ( unit , x , y , 12 ) ;
57335: LD_VAR 0 2
57339: PPUSH
57340: LD_VAR 0 4
57344: PPUSH
57345: LD_VAR 0 5
57349: PPUSH
57350: LD_INT 12
57352: PPUSH
57353: CALL 57548 0 4
// if cmd = 256 then
57357: LD_VAR 0 1
57361: PUSH
57362: LD_INT 256
57364: EQUAL
57365: IFFALSE 57386
// SetFactoryWaypoint ( unit , x , y ) ;
57367: LD_VAR 0 2
57371: PPUSH
57372: LD_VAR 0 4
57376: PPUSH
57377: LD_VAR 0 5
57381: PPUSH
57382: CALL 63361 0 3
// if cmd = 257 then
57386: LD_VAR 0 1
57390: PUSH
57391: LD_INT 257
57393: EQUAL
57394: IFFALSE 57415
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57396: LD_VAR 0 2
57400: PPUSH
57401: LD_VAR 0 4
57405: PPUSH
57406: LD_VAR 0 5
57410: PPUSH
57411: CALL 63857 0 3
// if cmd = 258 then
57415: LD_VAR 0 1
57419: PUSH
57420: LD_INT 258
57422: EQUAL
57423: IFFALSE 57447
// BurnTreeXYR ( unit , x , y , 8 ) ;
57425: LD_VAR 0 2
57429: PPUSH
57430: LD_VAR 0 4
57434: PPUSH
57435: LD_VAR 0 5
57439: PPUSH
57440: LD_INT 8
57442: PPUSH
57443: CALL 57948 0 4
// end ;
57447: LD_VAR 0 6
57451: RET
// export function ComRadiation ( un ) ; var eff ; begin
57452: LD_INT 0
57454: PPUSH
57455: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57456: LD_VAR 0 1
57460: PPUSH
57461: CALL_OW 264
57465: PUSH
57466: LD_INT 91
57468: NONEQUAL
57469: IFFALSE 57473
// exit ;
57471: GO 57543
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57473: LD_INT 68
57475: PPUSH
57476: LD_VAR 0 1
57480: PPUSH
57481: CALL_OW 255
57485: PPUSH
57486: CALL_OW 321
57490: PUSH
57491: LD_INT 2
57493: EQUAL
57494: IFFALSE 57506
// eff := 50 else
57496: LD_ADDR_VAR 0 3
57500: PUSH
57501: LD_INT 50
57503: ST_TO_ADDR
57504: GO 57514
// eff := 25 ;
57506: LD_ADDR_VAR 0 3
57510: PUSH
57511: LD_INT 25
57513: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57514: LD_VAR 0 1
57518: PPUSH
57519: CALL_OW 250
57523: PPUSH
57524: LD_VAR 0 1
57528: PPUSH
57529: CALL_OW 251
57533: PPUSH
57534: LD_VAR 0 3
57538: PPUSH
57539: CALL_OW 495
// end ;
57543: LD_VAR 0 2
57547: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57548: LD_INT 0
57550: PPUSH
57551: PPUSH
57552: PPUSH
57553: PPUSH
57554: PPUSH
57555: PPUSH
57556: PPUSH
57557: PPUSH
57558: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57559: LD_VAR 0 1
57563: PPUSH
57564: CALL_OW 302
57568: NOT
57569: IFTRUE 57588
57571: PUSH
57572: LD_VAR 0 2
57576: PPUSH
57577: LD_VAR 0 3
57581: PPUSH
57582: CALL_OW 488
57586: NOT
57587: OR
57588: IFTRUE 57597
57590: PUSH
57591: LD_VAR 0 4
57595: NOT
57596: OR
57597: IFFALSE 57601
// exit ;
57599: GO 57943
// list := [ ] ;
57601: LD_ADDR_VAR 0 13
57605: PUSH
57606: EMPTY
57607: ST_TO_ADDR
// if x - r < 0 then
57608: LD_VAR 0 2
57612: PUSH
57613: LD_VAR 0 4
57617: MINUS
57618: PUSH
57619: LD_INT 0
57621: LESS
57622: IFFALSE 57634
// min_x := 0 else
57624: LD_ADDR_VAR 0 7
57628: PUSH
57629: LD_INT 0
57631: ST_TO_ADDR
57632: GO 57650
// min_x := x - r ;
57634: LD_ADDR_VAR 0 7
57638: PUSH
57639: LD_VAR 0 2
57643: PUSH
57644: LD_VAR 0 4
57648: MINUS
57649: ST_TO_ADDR
// if y - r < 0 then
57650: LD_VAR 0 3
57654: PUSH
57655: LD_VAR 0 4
57659: MINUS
57660: PUSH
57661: LD_INT 0
57663: LESS
57664: IFFALSE 57676
// min_y := 0 else
57666: LD_ADDR_VAR 0 8
57670: PUSH
57671: LD_INT 0
57673: ST_TO_ADDR
57674: GO 57692
// min_y := y - r ;
57676: LD_ADDR_VAR 0 8
57680: PUSH
57681: LD_VAR 0 3
57685: PUSH
57686: LD_VAR 0 4
57690: MINUS
57691: ST_TO_ADDR
// max_x := x + r ;
57692: LD_ADDR_VAR 0 9
57696: PUSH
57697: LD_VAR 0 2
57701: PUSH
57702: LD_VAR 0 4
57706: PLUS
57707: ST_TO_ADDR
// max_y := y + r ;
57708: LD_ADDR_VAR 0 10
57712: PUSH
57713: LD_VAR 0 3
57717: PUSH
57718: LD_VAR 0 4
57722: PLUS
57723: ST_TO_ADDR
// for _x = min_x to max_x do
57724: LD_ADDR_VAR 0 11
57728: PUSH
57729: DOUBLE
57730: LD_VAR 0 7
57734: DEC
57735: ST_TO_ADDR
57736: LD_VAR 0 9
57740: PUSH
57741: FOR_TO
57742: IFFALSE 57861
// for _y = min_y to max_y do
57744: LD_ADDR_VAR 0 12
57748: PUSH
57749: DOUBLE
57750: LD_VAR 0 8
57754: DEC
57755: ST_TO_ADDR
57756: LD_VAR 0 10
57760: PUSH
57761: FOR_TO
57762: IFFALSE 57857
// begin if not ValidHex ( _x , _y ) then
57764: LD_VAR 0 11
57768: PPUSH
57769: LD_VAR 0 12
57773: PPUSH
57774: CALL_OW 488
57778: NOT
57779: IFFALSE 57783
// continue ;
57781: GO 57761
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57783: LD_VAR 0 11
57787: PPUSH
57788: LD_VAR 0 12
57792: PPUSH
57793: CALL_OW 351
57797: IFFALSE 57815
57799: PUSH
57800: LD_VAR 0 11
57804: PPUSH
57805: LD_VAR 0 12
57809: PPUSH
57810: CALL_OW 554
57814: AND
57815: IFFALSE 57855
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57817: LD_ADDR_VAR 0 13
57821: PUSH
57822: LD_VAR 0 13
57826: PPUSH
57827: LD_VAR 0 13
57831: PUSH
57832: LD_INT 1
57834: PLUS
57835: PPUSH
57836: LD_VAR 0 11
57840: PUSH
57841: LD_VAR 0 12
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PPUSH
57850: CALL_OW 2
57854: ST_TO_ADDR
// end ;
57855: GO 57761
57857: POP
57858: POP
57859: GO 57741
57861: POP
57862: POP
// if not list then
57863: LD_VAR 0 13
57867: NOT
57868: IFFALSE 57872
// exit ;
57870: GO 57943
// for i in list do
57872: LD_ADDR_VAR 0 6
57876: PUSH
57877: LD_VAR 0 13
57881: PUSH
57882: FOR_IN
57883: IFFALSE 57941
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57885: LD_VAR 0 1
57889: PPUSH
57890: LD_STRING M
57892: PUSH
57893: LD_VAR 0 6
57897: PUSH
57898: LD_INT 1
57900: ARRAY
57901: PUSH
57902: LD_VAR 0 6
57906: PUSH
57907: LD_INT 2
57909: ARRAY
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: PPUSH
57935: CALL_OW 447
57939: GO 57882
57941: POP
57942: POP
// end ;
57943: LD_VAR 0 5
57947: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57948: LD_INT 0
57950: PPUSH
57951: PPUSH
57952: PPUSH
57953: PPUSH
57954: PPUSH
57955: PPUSH
57956: PPUSH
57957: PPUSH
57958: PPUSH
57959: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57960: LD_VAR 0 1
57964: PPUSH
57965: CALL_OW 302
57969: NOT
57970: IFTRUE 57989
57972: PUSH
57973: LD_VAR 0 2
57977: PPUSH
57978: LD_VAR 0 3
57982: PPUSH
57983: CALL_OW 488
57987: NOT
57988: OR
57989: IFTRUE 57998
57991: PUSH
57992: LD_VAR 0 4
57996: NOT
57997: OR
57998: IFFALSE 58002
// exit ;
58000: GO 58519
// list := [ ] ;
58002: LD_ADDR_VAR 0 13
58006: PUSH
58007: EMPTY
58008: ST_TO_ADDR
// if x - r < 0 then
58009: LD_VAR 0 2
58013: PUSH
58014: LD_VAR 0 4
58018: MINUS
58019: PUSH
58020: LD_INT 0
58022: LESS
58023: IFFALSE 58035
// min_x := 0 else
58025: LD_ADDR_VAR 0 7
58029: PUSH
58030: LD_INT 0
58032: ST_TO_ADDR
58033: GO 58051
// min_x := x - r ;
58035: LD_ADDR_VAR 0 7
58039: PUSH
58040: LD_VAR 0 2
58044: PUSH
58045: LD_VAR 0 4
58049: MINUS
58050: ST_TO_ADDR
// if y - r < 0 then
58051: LD_VAR 0 3
58055: PUSH
58056: LD_VAR 0 4
58060: MINUS
58061: PUSH
58062: LD_INT 0
58064: LESS
58065: IFFALSE 58077
// min_y := 0 else
58067: LD_ADDR_VAR 0 8
58071: PUSH
58072: LD_INT 0
58074: ST_TO_ADDR
58075: GO 58093
// min_y := y - r ;
58077: LD_ADDR_VAR 0 8
58081: PUSH
58082: LD_VAR 0 3
58086: PUSH
58087: LD_VAR 0 4
58091: MINUS
58092: ST_TO_ADDR
// max_x := x + r ;
58093: LD_ADDR_VAR 0 9
58097: PUSH
58098: LD_VAR 0 2
58102: PUSH
58103: LD_VAR 0 4
58107: PLUS
58108: ST_TO_ADDR
// max_y := y + r ;
58109: LD_ADDR_VAR 0 10
58113: PUSH
58114: LD_VAR 0 3
58118: PUSH
58119: LD_VAR 0 4
58123: PLUS
58124: ST_TO_ADDR
// for _x = min_x to max_x do
58125: LD_ADDR_VAR 0 11
58129: PUSH
58130: DOUBLE
58131: LD_VAR 0 7
58135: DEC
58136: ST_TO_ADDR
58137: LD_VAR 0 9
58141: PUSH
58142: FOR_TO
58143: IFFALSE 58262
// for _y = min_y to max_y do
58145: LD_ADDR_VAR 0 12
58149: PUSH
58150: DOUBLE
58151: LD_VAR 0 8
58155: DEC
58156: ST_TO_ADDR
58157: LD_VAR 0 10
58161: PUSH
58162: FOR_TO
58163: IFFALSE 58258
// begin if not ValidHex ( _x , _y ) then
58165: LD_VAR 0 11
58169: PPUSH
58170: LD_VAR 0 12
58174: PPUSH
58175: CALL_OW 488
58179: NOT
58180: IFFALSE 58184
// continue ;
58182: GO 58162
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58184: LD_VAR 0 11
58188: PPUSH
58189: LD_VAR 0 12
58193: PPUSH
58194: CALL_OW 351
58198: IFFALSE 58216
58200: PUSH
58201: LD_VAR 0 11
58205: PPUSH
58206: LD_VAR 0 12
58210: PPUSH
58211: CALL_OW 554
58215: AND
58216: IFFALSE 58256
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58218: LD_ADDR_VAR 0 13
58222: PUSH
58223: LD_VAR 0 13
58227: PPUSH
58228: LD_VAR 0 13
58232: PUSH
58233: LD_INT 1
58235: PLUS
58236: PPUSH
58237: LD_VAR 0 11
58241: PUSH
58242: LD_VAR 0 12
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PPUSH
58251: CALL_OW 2
58255: ST_TO_ADDR
// end ;
58256: GO 58162
58258: POP
58259: POP
58260: GO 58142
58262: POP
58263: POP
// if not list then
58264: LD_VAR 0 13
58268: NOT
58269: IFFALSE 58273
// exit ;
58271: GO 58519
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58273: LD_ADDR_VAR 0 13
58277: PUSH
58278: LD_VAR 0 1
58282: PPUSH
58283: LD_VAR 0 13
58287: PPUSH
58288: LD_INT 1
58290: PPUSH
58291: LD_INT 1
58293: PPUSH
58294: CALL 8639 0 4
58298: ST_TO_ADDR
// ComStop ( flame ) ;
58299: LD_VAR 0 1
58303: PPUSH
58304: CALL_OW 141
// for i in list do
58308: LD_ADDR_VAR 0 6
58312: PUSH
58313: LD_VAR 0 13
58317: PUSH
58318: FOR_IN
58319: IFFALSE 58350
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58321: LD_VAR 0 1
58325: PPUSH
58326: LD_VAR 0 6
58330: PUSH
58331: LD_INT 1
58333: ARRAY
58334: PPUSH
58335: LD_VAR 0 6
58339: PUSH
58340: LD_INT 2
58342: ARRAY
58343: PPUSH
58344: CALL_OW 176
58348: GO 58318
58350: POP
58351: POP
// repeat wait ( 0 0$1 ) ;
58352: LD_INT 35
58354: PPUSH
58355: CALL_OW 67
// task := GetTaskList ( flame ) ;
58359: LD_ADDR_VAR 0 14
58363: PUSH
58364: LD_VAR 0 1
58368: PPUSH
58369: CALL_OW 437
58373: ST_TO_ADDR
// if not task then
58374: LD_VAR 0 14
58378: NOT
58379: IFFALSE 58383
// exit ;
58381: GO 58519
// if task [ 1 ] [ 1 ] <> | then
58383: LD_VAR 0 14
58387: PUSH
58388: LD_INT 1
58390: ARRAY
58391: PUSH
58392: LD_INT 1
58394: ARRAY
58395: PUSH
58396: LD_STRING |
58398: NONEQUAL
58399: IFFALSE 58403
// exit ;
58401: GO 58519
// _x := task [ 1 ] [ 2 ] ;
58403: LD_ADDR_VAR 0 11
58407: PUSH
58408: LD_VAR 0 14
58412: PUSH
58413: LD_INT 1
58415: ARRAY
58416: PUSH
58417: LD_INT 2
58419: ARRAY
58420: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58421: LD_ADDR_VAR 0 12
58425: PUSH
58426: LD_VAR 0 14
58430: PUSH
58431: LD_INT 1
58433: ARRAY
58434: PUSH
58435: LD_INT 3
58437: ARRAY
58438: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58439: LD_VAR 0 11
58443: PPUSH
58444: LD_VAR 0 12
58448: PPUSH
58449: CALL_OW 351
58453: NOT
58454: IFTRUE 58473
58456: PUSH
58457: LD_VAR 0 11
58461: PPUSH
58462: LD_VAR 0 12
58466: PPUSH
58467: CALL_OW 554
58471: NOT
58472: OR
58473: IFFALSE 58507
// begin task := Delete ( task , 1 ) ;
58475: LD_ADDR_VAR 0 14
58479: PUSH
58480: LD_VAR 0 14
58484: PPUSH
58485: LD_INT 1
58487: PPUSH
58488: CALL_OW 3
58492: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58493: LD_VAR 0 1
58497: PPUSH
58498: LD_VAR 0 14
58502: PPUSH
58503: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58507: LD_VAR 0 1
58511: PPUSH
58512: CALL_OW 314
58516: NOT
58517: IFFALSE 58352
// end ;
58519: LD_VAR 0 5
58523: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58524: LD_EXP 50
58528: NOT
58529: IFFALSE 58579
58531: GO 58533
58533: DISABLE
// begin initHack := true ;
58534: LD_ADDR_EXP 50
58538: PUSH
58539: LD_INT 1
58541: ST_TO_ADDR
// hackTanks := [ ] ;
58542: LD_ADDR_EXP 51
58546: PUSH
58547: EMPTY
58548: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58549: LD_ADDR_EXP 52
58553: PUSH
58554: EMPTY
58555: ST_TO_ADDR
// hackLimit := 3 ;
58556: LD_ADDR_EXP 53
58560: PUSH
58561: LD_INT 3
58563: ST_TO_ADDR
// hackDist := 12 ;
58564: LD_ADDR_EXP 54
58568: PUSH
58569: LD_INT 12
58571: ST_TO_ADDR
// hackCounter := [ ] ;
58572: LD_ADDR_EXP 55
58576: PUSH
58577: EMPTY
58578: ST_TO_ADDR
// end ;
58579: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58580: LD_EXP 50
58584: IFFALSE 58602
58586: PUSH
58587: LD_INT 34
58589: PUSH
58590: LD_INT 99
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PPUSH
58597: CALL_OW 69
58601: AND
58602: IFFALSE 58855
58604: GO 58606
58606: DISABLE
58607: LD_INT 0
58609: PPUSH
58610: PPUSH
// begin enable ;
58611: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58612: LD_ADDR_VAR 0 1
58616: PUSH
58617: LD_INT 34
58619: PUSH
58620: LD_INT 99
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PPUSH
58627: CALL_OW 69
58631: PUSH
58632: FOR_IN
58633: IFFALSE 58853
// begin if not i in hackTanks then
58635: LD_VAR 0 1
58639: PUSH
58640: LD_EXP 51
58644: IN
58645: NOT
58646: IFFALSE 58729
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58648: LD_ADDR_EXP 51
58652: PUSH
58653: LD_EXP 51
58657: PPUSH
58658: LD_EXP 51
58662: PUSH
58663: LD_INT 1
58665: PLUS
58666: PPUSH
58667: LD_VAR 0 1
58671: PPUSH
58672: CALL_OW 1
58676: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58677: LD_ADDR_EXP 52
58681: PUSH
58682: LD_EXP 52
58686: PPUSH
58687: LD_EXP 52
58691: PUSH
58692: LD_INT 1
58694: PLUS
58695: PPUSH
58696: EMPTY
58697: PPUSH
58698: CALL_OW 1
58702: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58703: LD_ADDR_EXP 55
58707: PUSH
58708: LD_EXP 55
58712: PPUSH
58713: LD_EXP 55
58717: PUSH
58718: LD_INT 1
58720: PLUS
58721: PPUSH
58722: EMPTY
58723: PPUSH
58724: CALL_OW 1
58728: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58729: LD_VAR 0 1
58733: PPUSH
58734: CALL_OW 302
58738: NOT
58739: IFFALSE 58752
// begin HackUnlinkAll ( i ) ;
58741: LD_VAR 0 1
58745: PPUSH
58746: CALL 58858 0 1
// continue ;
58750: GO 58632
// end ; HackCheckCapturedStatus ( i ) ;
58752: LD_VAR 0 1
58756: PPUSH
58757: CALL 59303 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58761: LD_ADDR_VAR 0 2
58765: PUSH
58766: LD_INT 81
58768: PUSH
58769: LD_VAR 0 1
58773: PPUSH
58774: CALL_OW 255
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 33
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 91
58795: PUSH
58796: LD_VAR 0 1
58800: PUSH
58801: LD_EXP 54
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 50
58813: PUSH
58814: EMPTY
58815: LIST
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: PPUSH
58823: CALL_OW 69
58827: ST_TO_ADDR
// if not tmp then
58828: LD_VAR 0 2
58832: NOT
58833: IFFALSE 58837
// continue ;
58835: GO 58632
// HackLink ( i , tmp ) ;
58837: LD_VAR 0 1
58841: PPUSH
58842: LD_VAR 0 2
58846: PPUSH
58847: CALL 58994 0 2
// end ;
58851: GO 58632
58853: POP
58854: POP
// end ;
58855: PPOPN 2
58857: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58858: LD_INT 0
58860: PPUSH
58861: PPUSH
58862: PPUSH
// if not hack in hackTanks then
58863: LD_VAR 0 1
58867: PUSH
58868: LD_EXP 51
58872: IN
58873: NOT
58874: IFFALSE 58878
// exit ;
58876: GO 58989
// index := GetElementIndex ( hackTanks , hack ) ;
58878: LD_ADDR_VAR 0 4
58882: PUSH
58883: LD_EXP 51
58887: PPUSH
58888: LD_VAR 0 1
58892: PPUSH
58893: CALL 7934 0 2
58897: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58898: LD_EXP 52
58902: PUSH
58903: LD_VAR 0 4
58907: ARRAY
58908: IFFALSE 58989
// begin for i in hackTanksCaptured [ index ] do
58910: LD_ADDR_VAR 0 3
58914: PUSH
58915: LD_EXP 52
58919: PUSH
58920: LD_VAR 0 4
58924: ARRAY
58925: PUSH
58926: FOR_IN
58927: IFFALSE 58953
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58929: LD_VAR 0 3
58933: PUSH
58934: LD_INT 1
58936: ARRAY
58937: PPUSH
58938: LD_VAR 0 3
58942: PUSH
58943: LD_INT 2
58945: ARRAY
58946: PPUSH
58947: CALL_OW 235
58951: GO 58926
58953: POP
58954: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58955: LD_ADDR_EXP 52
58959: PUSH
58960: LD_EXP 52
58964: PPUSH
58965: LD_VAR 0 4
58969: PPUSH
58970: EMPTY
58971: PPUSH
58972: CALL_OW 1
58976: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58977: LD_VAR 0 1
58981: PPUSH
58982: LD_INT 0
58984: PPUSH
58985: CALL_OW 505
// end ; end ;
58989: LD_VAR 0 2
58993: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58994: LD_INT 0
58996: PPUSH
58997: PPUSH
58998: PPUSH
// if not hack in hackTanks or not vehicles then
58999: LD_VAR 0 1
59003: PUSH
59004: LD_EXP 51
59008: IN
59009: NOT
59010: IFTRUE 59019
59012: PUSH
59013: LD_VAR 0 2
59017: NOT
59018: OR
59019: IFFALSE 59023
// exit ;
59021: GO 59298
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59023: LD_ADDR_VAR 0 2
59027: PUSH
59028: LD_VAR 0 1
59032: PPUSH
59033: LD_VAR 0 2
59037: PPUSH
59038: LD_INT 1
59040: PPUSH
59041: LD_INT 1
59043: PPUSH
59044: CALL 8586 0 4
59048: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59049: LD_ADDR_VAR 0 5
59053: PUSH
59054: LD_EXP 51
59058: PPUSH
59059: LD_VAR 0 1
59063: PPUSH
59064: CALL 7934 0 2
59068: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59069: LD_EXP 52
59073: PUSH
59074: LD_VAR 0 5
59078: ARRAY
59079: PUSH
59080: LD_EXP 53
59084: LESS
59085: IFFALSE 59274
// begin for i := 1 to vehicles do
59087: LD_ADDR_VAR 0 4
59091: PUSH
59092: DOUBLE
59093: LD_INT 1
59095: DEC
59096: ST_TO_ADDR
59097: LD_VAR 0 2
59101: PUSH
59102: FOR_TO
59103: IFFALSE 59272
// begin if hackTanksCaptured [ index ] = hackLimit then
59105: LD_EXP 52
59109: PUSH
59110: LD_VAR 0 5
59114: ARRAY
59115: PUSH
59116: LD_EXP 53
59120: EQUAL
59121: IFFALSE 59125
// break ;
59123: GO 59272
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59125: LD_ADDR_EXP 55
59129: PUSH
59130: LD_EXP 55
59134: PPUSH
59135: LD_VAR 0 5
59139: PPUSH
59140: LD_EXP 55
59144: PUSH
59145: LD_VAR 0 5
59149: ARRAY
59150: PUSH
59151: LD_INT 1
59153: PLUS
59154: PPUSH
59155: CALL_OW 1
59159: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59160: LD_ADDR_EXP 52
59164: PUSH
59165: LD_EXP 52
59169: PPUSH
59170: LD_VAR 0 5
59174: PUSH
59175: LD_EXP 52
59179: PUSH
59180: LD_VAR 0 5
59184: ARRAY
59185: PUSH
59186: LD_INT 1
59188: PLUS
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PPUSH
59194: LD_VAR 0 2
59198: PUSH
59199: LD_VAR 0 4
59203: ARRAY
59204: PUSH
59205: LD_VAR 0 2
59209: PUSH
59210: LD_VAR 0 4
59214: ARRAY
59215: PPUSH
59216: CALL_OW 255
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PPUSH
59225: CALL 8151 0 3
59229: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59230: LD_VAR 0 2
59234: PUSH
59235: LD_VAR 0 4
59239: ARRAY
59240: PPUSH
59241: LD_VAR 0 1
59245: PPUSH
59246: CALL_OW 255
59250: PPUSH
59251: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59255: LD_VAR 0 2
59259: PUSH
59260: LD_VAR 0 4
59264: ARRAY
59265: PPUSH
59266: CALL_OW 141
// end ;
59270: GO 59102
59272: POP
59273: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59274: LD_VAR 0 1
59278: PPUSH
59279: LD_EXP 52
59283: PUSH
59284: LD_VAR 0 5
59288: ARRAY
59289: PUSH
59290: LD_INT 0
59292: PLUS
59293: PPUSH
59294: CALL_OW 505
// end ;
59298: LD_VAR 0 3
59302: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59303: LD_INT 0
59305: PPUSH
59306: PPUSH
59307: PPUSH
59308: PPUSH
// if not hack in hackTanks then
59309: LD_VAR 0 1
59313: PUSH
59314: LD_EXP 51
59318: IN
59319: NOT
59320: IFFALSE 59324
// exit ;
59322: GO 59568
// index := GetElementIndex ( hackTanks , hack ) ;
59324: LD_ADDR_VAR 0 4
59328: PUSH
59329: LD_EXP 51
59333: PPUSH
59334: LD_VAR 0 1
59338: PPUSH
59339: CALL 7934 0 2
59343: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59344: LD_ADDR_VAR 0 3
59348: PUSH
59349: DOUBLE
59350: LD_EXP 52
59354: PUSH
59355: LD_VAR 0 4
59359: ARRAY
59360: INC
59361: ST_TO_ADDR
59362: LD_INT 1
59364: PUSH
59365: FOR_DOWNTO
59366: IFFALSE 59542
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59368: LD_ADDR_VAR 0 5
59372: PUSH
59373: LD_EXP 52
59377: PUSH
59378: LD_VAR 0 4
59382: ARRAY
59383: PUSH
59384: LD_VAR 0 3
59388: ARRAY
59389: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59390: LD_VAR 0 5
59394: PUSH
59395: LD_INT 1
59397: ARRAY
59398: PPUSH
59399: CALL_OW 302
59403: NOT
59404: IFTRUE 59432
59406: PUSH
59407: LD_VAR 0 5
59411: PUSH
59412: LD_INT 1
59414: ARRAY
59415: PPUSH
59416: CALL_OW 255
59420: PUSH
59421: LD_VAR 0 1
59425: PPUSH
59426: CALL_OW 255
59430: NONEQUAL
59431: OR
59432: IFFALSE 59540
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59434: LD_VAR 0 5
59438: PUSH
59439: LD_INT 1
59441: ARRAY
59442: PPUSH
59443: CALL_OW 305
59447: IFFALSE 59475
59449: PUSH
59450: LD_VAR 0 5
59454: PUSH
59455: LD_INT 1
59457: ARRAY
59458: PPUSH
59459: CALL_OW 255
59463: PUSH
59464: LD_VAR 0 1
59468: PPUSH
59469: CALL_OW 255
59473: EQUAL
59474: AND
59475: IFFALSE 59499
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59477: LD_VAR 0 5
59481: PUSH
59482: LD_INT 1
59484: ARRAY
59485: PPUSH
59486: LD_VAR 0 5
59490: PUSH
59491: LD_INT 2
59493: ARRAY
59494: PPUSH
59495: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59499: LD_ADDR_EXP 52
59503: PUSH
59504: LD_EXP 52
59508: PPUSH
59509: LD_VAR 0 4
59513: PPUSH
59514: LD_EXP 52
59518: PUSH
59519: LD_VAR 0 4
59523: ARRAY
59524: PPUSH
59525: LD_VAR 0 3
59529: PPUSH
59530: CALL_OW 3
59534: PPUSH
59535: CALL_OW 1
59539: ST_TO_ADDR
// end ; end ;
59540: GO 59365
59542: POP
59543: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59544: LD_VAR 0 1
59548: PPUSH
59549: LD_EXP 52
59553: PUSH
59554: LD_VAR 0 4
59558: ARRAY
59559: PUSH
59560: LD_INT 0
59562: PLUS
59563: PPUSH
59564: CALL_OW 505
// end ;
59568: LD_VAR 0 2
59572: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59573: LD_INT 0
59575: PPUSH
59576: PPUSH
59577: PPUSH
59578: PPUSH
// if not hack in hackTanks then
59579: LD_VAR 0 1
59583: PUSH
59584: LD_EXP 51
59588: IN
59589: NOT
59590: IFFALSE 59594
// exit ;
59592: GO 59679
// index := GetElementIndex ( hackTanks , hack ) ;
59594: LD_ADDR_VAR 0 5
59598: PUSH
59599: LD_EXP 51
59603: PPUSH
59604: LD_VAR 0 1
59608: PPUSH
59609: CALL 7934 0 2
59613: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59614: LD_ADDR_VAR 0 4
59618: PUSH
59619: DOUBLE
59620: LD_INT 1
59622: DEC
59623: ST_TO_ADDR
59624: LD_EXP 52
59628: PUSH
59629: LD_VAR 0 5
59633: ARRAY
59634: PUSH
59635: FOR_TO
59636: IFFALSE 59677
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59638: LD_EXP 52
59642: PUSH
59643: LD_VAR 0 5
59647: ARRAY
59648: PUSH
59649: LD_VAR 0 4
59653: ARRAY
59654: PUSH
59655: LD_INT 1
59657: ARRAY
59658: PUSH
59659: LD_VAR 0 2
59663: EQUAL
59664: IFFALSE 59675
// KillUnit ( vehicle ) ;
59666: LD_VAR 0 2
59670: PPUSH
59671: CALL_OW 66
59675: GO 59635
59677: POP
59678: POP
// end ;
59679: LD_VAR 0 3
59683: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
59684: LD_EXP 56
59688: NOT
59689: IFFALSE 59822
59691: GO 59693
59693: DISABLE
59694: LD_INT 0
59696: PPUSH
// begin initMiner := true ;
59697: LD_ADDR_EXP 56
59701: PUSH
59702: LD_INT 1
59704: ST_TO_ADDR
// minersList := [ ] ;
59705: LD_ADDR_EXP 57
59709: PUSH
59710: EMPTY
59711: ST_TO_ADDR
// minerMinesList := [ ] ;
59712: LD_ADDR_EXP 58
59716: PUSH
59717: EMPTY
59718: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
59719: LD_ADDR_EXP 59
59723: PUSH
59724: LD_INT 6
59726: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59727: LD_ADDR_VAR 0 1
59731: PUSH
59732: LD_INT 34
59734: PUSH
59735: LD_INT 81
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PPUSH
59742: CALL_OW 69
59746: PUSH
59747: FOR_IN
59748: IFFALSE 59820
// begin if not i in minersList then
59750: LD_VAR 0 1
59754: PUSH
59755: LD_EXP 57
59759: IN
59760: NOT
59761: IFFALSE 59818
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59763: LD_ADDR_EXP 57
59767: PUSH
59768: LD_EXP 57
59772: PPUSH
59773: LD_EXP 57
59777: PUSH
59778: LD_INT 1
59780: PLUS
59781: PPUSH
59782: LD_VAR 0 1
59786: PPUSH
59787: CALL_OW 1
59791: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59792: LD_ADDR_EXP 58
59796: PUSH
59797: LD_EXP 58
59801: PPUSH
59802: LD_EXP 58
59806: PUSH
59807: LD_INT 1
59809: PLUS
59810: PPUSH
59811: EMPTY
59812: PPUSH
59813: CALL_OW 1
59817: ST_TO_ADDR
// end end ;
59818: GO 59747
59820: POP
59821: POP
// end ;
59822: PPOPN 1
59824: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
59825: LD_EXP 56
59829: IFFALSE 59860
59831: PUSH
59832: LD_EXP 58
59836: PPUSH
59837: CALL 5233 0 1
59841: IFTRUE 59859
59843: PUSH
59844: LD_INT 34
59846: PUSH
59847: LD_INT 81
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PPUSH
59854: CALL_OW 69
59858: OR
59859: AND
59860: IFFALSE 60359
59862: GO 59864
59864: DISABLE
59865: LD_INT 0
59867: PPUSH
59868: PPUSH
59869: PPUSH
59870: PPUSH
// begin enable ;
59871: ENABLE
// for i := minerMinesList downto 1 do
59872: LD_ADDR_VAR 0 1
59876: PUSH
59877: DOUBLE
59878: LD_EXP 58
59882: INC
59883: ST_TO_ADDR
59884: LD_INT 1
59886: PUSH
59887: FOR_DOWNTO
59888: IFFALSE 60357
// begin if IsLive ( minersList [ i ] ) then
59890: LD_EXP 57
59894: PUSH
59895: LD_VAR 0 1
59899: ARRAY
59900: PPUSH
59901: CALL_OW 300
59905: IFFALSE 59938
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
59907: LD_EXP 57
59911: PUSH
59912: LD_VAR 0 1
59916: ARRAY
59917: PPUSH
59918: LD_EXP 58
59922: PUSH
59923: LD_VAR 0 1
59927: ARRAY
59928: PPUSH
59929: CALL 5233 0 1
59933: PPUSH
59934: CALL_OW 505
// if not minerMinesList [ i ] then
59938: LD_EXP 58
59942: PUSH
59943: LD_VAR 0 1
59947: ARRAY
59948: NOT
59949: IFFALSE 59953
// continue ;
59951: GO 59887
// for j := minerMinesList [ i ] downto 1 do
59953: LD_ADDR_VAR 0 2
59957: PUSH
59958: DOUBLE
59959: LD_EXP 58
59963: PUSH
59964: LD_VAR 0 1
59968: ARRAY
59969: INC
59970: ST_TO_ADDR
59971: LD_INT 1
59973: PUSH
59974: FOR_DOWNTO
59975: IFFALSE 60353
// begin side := GetSide ( minersList [ i ] ) ;
59977: LD_ADDR_VAR 0 3
59981: PUSH
59982: LD_EXP 57
59986: PUSH
59987: LD_VAR 0 1
59991: ARRAY
59992: PPUSH
59993: CALL_OW 255
59997: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
59998: LD_EXP 57
60002: PUSH
60003: LD_VAR 0 1
60007: ARRAY
60008: PPUSH
60009: CALL_OW 301
60013: IFTRUE 60033
60015: PUSH
60016: LD_EXP 57
60020: PUSH
60021: LD_VAR 0 1
60025: ARRAY
60026: PPUSH
60027: CALL_OW 305
60031: NOT
60032: OR
60033: IFFALSE 60124
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60035: LD_EXP 58
60039: PUSH
60040: LD_VAR 0 1
60044: ARRAY
60045: PUSH
60046: LD_VAR 0 2
60050: ARRAY
60051: PUSH
60052: LD_INT 1
60054: ARRAY
60055: PPUSH
60056: LD_EXP 58
60060: PUSH
60061: LD_VAR 0 1
60065: ARRAY
60066: PUSH
60067: LD_VAR 0 2
60071: ARRAY
60072: PUSH
60073: LD_INT 2
60075: ARRAY
60076: PPUSH
60077: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60081: LD_ADDR_EXP 58
60085: PUSH
60086: LD_EXP 58
60090: PPUSH
60091: LD_VAR 0 1
60095: PPUSH
60096: LD_EXP 58
60100: PUSH
60101: LD_VAR 0 1
60105: ARRAY
60106: PPUSH
60107: LD_VAR 0 2
60111: PPUSH
60112: CALL_OW 3
60116: PPUSH
60117: CALL_OW 1
60121: ST_TO_ADDR
// continue ;
60122: GO 59974
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60124: LD_ADDR_VAR 0 4
60128: PUSH
60129: LD_EXP 58
60133: PUSH
60134: LD_VAR 0 1
60138: ARRAY
60139: PUSH
60140: LD_VAR 0 2
60144: ARRAY
60145: PUSH
60146: LD_INT 1
60148: ARRAY
60149: PPUSH
60150: LD_EXP 58
60154: PUSH
60155: LD_VAR 0 1
60159: ARRAY
60160: PUSH
60161: LD_VAR 0 2
60165: ARRAY
60166: PUSH
60167: LD_INT 2
60169: ARRAY
60170: PPUSH
60171: CALL_OW 428
60175: ST_TO_ADDR
// if not tmp then
60176: LD_VAR 0 4
60180: NOT
60181: IFFALSE 60185
// continue ;
60183: GO 59974
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60185: LD_VAR 0 4
60189: PUSH
60190: LD_INT 81
60192: PUSH
60193: LD_VAR 0 3
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PPUSH
60202: CALL_OW 69
60206: IN
60207: IFFALSE 60257
60209: PUSH
60210: LD_EXP 58
60214: PUSH
60215: LD_VAR 0 1
60219: ARRAY
60220: PUSH
60221: LD_VAR 0 2
60225: ARRAY
60226: PUSH
60227: LD_INT 1
60229: ARRAY
60230: PPUSH
60231: LD_EXP 58
60235: PUSH
60236: LD_VAR 0 1
60240: ARRAY
60241: PUSH
60242: LD_VAR 0 2
60246: ARRAY
60247: PUSH
60248: LD_INT 2
60250: ARRAY
60251: PPUSH
60252: CALL_OW 458
60256: AND
60257: IFFALSE 60351
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60259: LD_EXP 58
60263: PUSH
60264: LD_VAR 0 1
60268: ARRAY
60269: PUSH
60270: LD_VAR 0 2
60274: ARRAY
60275: PUSH
60276: LD_INT 1
60278: ARRAY
60279: PPUSH
60280: LD_EXP 58
60284: PUSH
60285: LD_VAR 0 1
60289: ARRAY
60290: PUSH
60291: LD_VAR 0 2
60295: ARRAY
60296: PUSH
60297: LD_INT 2
60299: ARRAY
60300: PPUSH
60301: LD_VAR 0 3
60305: PPUSH
60306: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60310: LD_ADDR_EXP 58
60314: PUSH
60315: LD_EXP 58
60319: PPUSH
60320: LD_VAR 0 1
60324: PPUSH
60325: LD_EXP 58
60329: PUSH
60330: LD_VAR 0 1
60334: ARRAY
60335: PPUSH
60336: LD_VAR 0 2
60340: PPUSH
60341: CALL_OW 3
60345: PPUSH
60346: CALL_OW 1
60350: ST_TO_ADDR
// end ; end ;
60351: GO 59974
60353: POP
60354: POP
// end ;
60355: GO 59887
60357: POP
60358: POP
// end ;
60359: PPOPN 4
60361: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60362: LD_INT 0
60364: PPUSH
60365: PPUSH
60366: PPUSH
60367: PPUSH
// result := false ;
60368: LD_ADDR_VAR 0 4
60372: PUSH
60373: LD_INT 0
60375: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60376: LD_VAR 0 1
60380: PPUSH
60381: CALL_OW 264
60385: PUSH
60386: LD_INT 81
60388: EQUAL
60389: NOT
60390: IFFALSE 60394
// exit ;
60392: GO 60764
// side := GetSide ( unit ) ;
60394: LD_ADDR_VAR 0 6
60398: PUSH
60399: LD_VAR 0 1
60403: PPUSH
60404: CALL_OW 255
60408: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60409: LD_ADDR_VAR 0 5
60413: PUSH
60414: LD_EXP 57
60418: PPUSH
60419: LD_VAR 0 1
60423: PPUSH
60424: CALL 7934 0 2
60428: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60429: LD_EXP 58
60433: PUSH
60434: LD_VAR 0 5
60438: ARRAY
60439: PUSH
60440: LD_EXP 59
60444: GREATEREQUAL
60445: IFFALSE 60449
// exit ;
60447: GO 60764
// ComMoveXY ( unit , x , y ) ;
60449: LD_VAR 0 1
60453: PPUSH
60454: LD_VAR 0 2
60458: PPUSH
60459: LD_VAR 0 3
60463: PPUSH
60464: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60468: LD_INT 35
60470: PPUSH
60471: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60475: LD_VAR 0 1
60479: PPUSH
60480: LD_VAR 0 2
60484: PPUSH
60485: LD_VAR 0 3
60489: PPUSH
60490: CALL 39980 0 3
60494: NOT
60495: IFFALSE 60508
60497: PUSH
60498: LD_VAR 0 1
60502: PPUSH
60503: CALL_OW 314
60507: AND
60508: IFFALSE 60512
// exit ;
60510: GO 60764
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60512: LD_VAR 0 2
60516: PPUSH
60517: LD_VAR 0 3
60521: PPUSH
60522: CALL_OW 428
60526: PUSH
60527: LD_VAR 0 1
60531: EQUAL
60532: IFFALSE 60546
60534: PUSH
60535: LD_VAR 0 1
60539: PPUSH
60540: CALL_OW 314
60544: NOT
60545: AND
60546: IFFALSE 60468
// if MineAtPos ( x , y ) then
60548: LD_VAR 0 2
60552: PPUSH
60553: LD_VAR 0 3
60557: PPUSH
60558: CALL_OW 458
60562: IFFALSE 60566
// exit ;
60564: GO 60764
// if your_side = side then
60566: LD_OWVAR 2
60570: PUSH
60571: LD_VAR 0 6
60575: EQUAL
60576: IFFALSE 60595
// PlaySoundXY ( x , y , PlantMine ) ;
60578: LD_VAR 0 2
60582: PPUSH
60583: LD_VAR 0 3
60587: PPUSH
60588: LD_STRING PlantMine
60590: PPUSH
60591: CALL_OW 366
// repeat wait ( 1 ) ;
60595: LD_INT 1
60597: PPUSH
60598: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
60602: LD_VAR 0 2
60606: PPUSH
60607: LD_VAR 0 3
60611: PPUSH
60612: LD_VAR 0 6
60616: PPUSH
60617: LD_INT 0
60619: PPUSH
60620: CALL_OW 454
60624: IFFALSE 60595
// if MineAtPos ( x , y ) then
60626: LD_VAR 0 2
60630: PPUSH
60631: LD_VAR 0 3
60635: PPUSH
60636: CALL_OW 458
60640: IFFALSE 60756
// begin for i in minerMinesList [ index ] do
60642: LD_ADDR_VAR 0 7
60646: PUSH
60647: LD_EXP 58
60651: PUSH
60652: LD_VAR 0 5
60656: ARRAY
60657: PUSH
60658: FOR_IN
60659: IFFALSE 60701
// if i [ 1 ] = x and i [ 2 ] = y then
60661: LD_VAR 0 7
60665: PUSH
60666: LD_INT 1
60668: ARRAY
60669: PUSH
60670: LD_VAR 0 2
60674: EQUAL
60675: IFFALSE 60693
60677: PUSH
60678: LD_VAR 0 7
60682: PUSH
60683: LD_INT 2
60685: ARRAY
60686: PUSH
60687: LD_VAR 0 3
60691: EQUAL
60692: AND
60693: IFFALSE 60699
// exit ;
60695: POP
60696: POP
60697: GO 60764
60699: GO 60658
60701: POP
60702: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60703: LD_ADDR_EXP 58
60707: PUSH
60708: LD_EXP 58
60712: PPUSH
60713: LD_VAR 0 5
60717: PUSH
60718: LD_EXP 58
60722: PUSH
60723: LD_VAR 0 5
60727: ARRAY
60728: PUSH
60729: LD_INT 1
60731: PLUS
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PPUSH
60737: LD_VAR 0 2
60741: PUSH
60742: LD_VAR 0 3
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PPUSH
60751: CALL 8151 0 3
60755: ST_TO_ADDR
// end ; result := true ;
60756: LD_ADDR_VAR 0 4
60760: PUSH
60761: LD_INT 1
60763: ST_TO_ADDR
// end ;
60764: LD_VAR 0 4
60768: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60769: LD_INT 0
60771: PPUSH
60772: PPUSH
60773: PPUSH
// if not unit in minersList then
60774: LD_VAR 0 1
60778: PUSH
60779: LD_EXP 57
60783: IN
60784: NOT
60785: IFFALSE 60789
// exit ;
60787: GO 60996
// index := GetElementIndex ( minersList , unit ) ;
60789: LD_ADDR_VAR 0 6
60793: PUSH
60794: LD_EXP 57
60798: PPUSH
60799: LD_VAR 0 1
60803: PPUSH
60804: CALL 7934 0 2
60808: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60809: LD_ADDR_VAR 0 5
60813: PUSH
60814: DOUBLE
60815: LD_EXP 58
60819: PUSH
60820: LD_VAR 0 6
60824: ARRAY
60825: INC
60826: ST_TO_ADDR
60827: LD_INT 1
60829: PUSH
60830: FOR_DOWNTO
60831: IFFALSE 60994
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60833: LD_EXP 58
60837: PUSH
60838: LD_VAR 0 6
60842: ARRAY
60843: PUSH
60844: LD_VAR 0 5
60848: ARRAY
60849: PUSH
60850: LD_INT 1
60852: ARRAY
60853: PPUSH
60854: LD_EXP 58
60858: PUSH
60859: LD_VAR 0 6
60863: ARRAY
60864: PUSH
60865: LD_VAR 0 5
60869: ARRAY
60870: PUSH
60871: LD_INT 2
60873: ARRAY
60874: PPUSH
60875: LD_VAR 0 2
60879: PPUSH
60880: LD_VAR 0 3
60884: PPUSH
60885: CALL_OW 298
60889: PUSH
60890: LD_INT 6
60892: LESS
60893: IFFALSE 60992
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60895: LD_EXP 58
60899: PUSH
60900: LD_VAR 0 6
60904: ARRAY
60905: PUSH
60906: LD_VAR 0 5
60910: ARRAY
60911: PUSH
60912: LD_INT 1
60914: ARRAY
60915: PPUSH
60916: LD_EXP 58
60920: PUSH
60921: LD_VAR 0 6
60925: ARRAY
60926: PUSH
60927: LD_VAR 0 5
60931: ARRAY
60932: PUSH
60933: LD_INT 2
60935: ARRAY
60936: PPUSH
60937: LD_VAR 0 1
60941: PPUSH
60942: CALL_OW 255
60946: PPUSH
60947: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60951: LD_ADDR_EXP 58
60955: PUSH
60956: LD_EXP 58
60960: PPUSH
60961: LD_VAR 0 6
60965: PPUSH
60966: LD_EXP 58
60970: PUSH
60971: LD_VAR 0 6
60975: ARRAY
60976: PPUSH
60977: LD_VAR 0 5
60981: PPUSH
60982: CALL_OW 3
60986: PPUSH
60987: CALL_OW 1
60991: ST_TO_ADDR
// end ; end ;
60992: GO 60830
60994: POP
60995: POP
// end ;
60996: LD_VAR 0 4
61000: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61001: LD_INT 0
61003: PPUSH
61004: PPUSH
61005: PPUSH
61006: PPUSH
61007: PPUSH
61008: PPUSH
61009: PPUSH
61010: PPUSH
61011: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61012: LD_VAR 0 1
61016: PPUSH
61017: CALL_OW 264
61021: PUSH
61022: LD_INT 81
61024: EQUAL
61025: NOT
61026: IFTRUE 61041
61028: PUSH
61029: LD_VAR 0 1
61033: PUSH
61034: LD_EXP 57
61038: IN
61039: NOT
61040: OR
61041: IFFALSE 61045
// exit ;
61043: GO 61371
// index := GetElementIndex ( minersList , unit ) ;
61045: LD_ADDR_VAR 0 6
61049: PUSH
61050: LD_EXP 57
61054: PPUSH
61055: LD_VAR 0 1
61059: PPUSH
61060: CALL 7934 0 2
61064: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61065: LD_ADDR_VAR 0 8
61069: PUSH
61070: LD_EXP 59
61074: PUSH
61075: LD_EXP 58
61079: PUSH
61080: LD_VAR 0 6
61084: ARRAY
61085: MINUS
61086: ST_TO_ADDR
// if not minesFreeAmount then
61087: LD_VAR 0 8
61091: NOT
61092: IFFALSE 61096
// exit ;
61094: GO 61371
// tmp := [ ] ;
61096: LD_ADDR_VAR 0 7
61100: PUSH
61101: EMPTY
61102: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61103: LD_ADDR_VAR 0 5
61107: PUSH
61108: DOUBLE
61109: LD_INT 1
61111: DEC
61112: ST_TO_ADDR
61113: LD_VAR 0 8
61117: PUSH
61118: FOR_TO
61119: IFFALSE 61318
// begin _d := rand ( 0 , 5 ) ;
61121: LD_ADDR_VAR 0 11
61125: PUSH
61126: LD_INT 0
61128: PPUSH
61129: LD_INT 5
61131: PPUSH
61132: CALL_OW 12
61136: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61137: LD_ADDR_VAR 0 12
61141: PUSH
61142: LD_INT 2
61144: PPUSH
61145: LD_INT 6
61147: PPUSH
61148: CALL_OW 12
61152: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61153: LD_ADDR_VAR 0 9
61157: PUSH
61158: LD_VAR 0 2
61162: PPUSH
61163: LD_VAR 0 11
61167: PPUSH
61168: LD_VAR 0 12
61172: PPUSH
61173: CALL_OW 272
61177: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61178: LD_ADDR_VAR 0 10
61182: PUSH
61183: LD_VAR 0 3
61187: PPUSH
61188: LD_VAR 0 11
61192: PPUSH
61193: LD_VAR 0 12
61197: PPUSH
61198: CALL_OW 273
61202: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61203: LD_VAR 0 9
61207: PPUSH
61208: LD_VAR 0 10
61212: PPUSH
61213: CALL_OW 488
61217: IFFALSE 61241
61219: PUSH
61220: LD_VAR 0 9
61224: PUSH
61225: LD_VAR 0 10
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_VAR 0 7
61238: IN
61239: NOT
61240: AND
61241: IFFALSE 61260
61243: PUSH
61244: LD_VAR 0 9
61248: PPUSH
61249: LD_VAR 0 10
61253: PPUSH
61254: CALL_OW 458
61258: NOT
61259: AND
61260: IFFALSE 61302
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61262: LD_ADDR_VAR 0 7
61266: PUSH
61267: LD_VAR 0 7
61271: PPUSH
61272: LD_VAR 0 7
61276: PUSH
61277: LD_INT 1
61279: PLUS
61280: PPUSH
61281: LD_VAR 0 9
61285: PUSH
61286: LD_VAR 0 10
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PPUSH
61295: CALL_OW 1
61299: ST_TO_ADDR
61300: GO 61316
// i := i - 1 ;
61302: LD_ADDR_VAR 0 5
61306: PUSH
61307: LD_VAR 0 5
61311: PUSH
61312: LD_INT 1
61314: MINUS
61315: ST_TO_ADDR
// end ;
61316: GO 61118
61318: POP
61319: POP
// for i in tmp do
61320: LD_ADDR_VAR 0 5
61324: PUSH
61325: LD_VAR 0 7
61329: PUSH
61330: FOR_IN
61331: IFFALSE 61369
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61333: LD_VAR 0 1
61337: PPUSH
61338: LD_VAR 0 5
61342: PUSH
61343: LD_INT 1
61345: ARRAY
61346: PPUSH
61347: LD_VAR 0 5
61351: PUSH
61352: LD_INT 2
61354: ARRAY
61355: PPUSH
61356: CALL 60362 0 3
61360: NOT
61361: IFFALSE 61367
// exit ;
61363: POP
61364: POP
61365: GO 61371
61367: GO 61330
61369: POP
61370: POP
// end ;
61371: LD_VAR 0 4
61375: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61376: LD_INT 0
61378: PPUSH
61379: PPUSH
61380: PPUSH
61381: PPUSH
61382: PPUSH
61383: PPUSH
61384: PPUSH
61385: PPUSH
61386: PPUSH
// if GetClass ( unit ) <> class_sniper then
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 257
61396: PUSH
61397: LD_INT 5
61399: NONEQUAL
61400: IFFALSE 61404
// exit ;
61402: GO 61874
// dist := 8 ;
61404: LD_ADDR_VAR 0 5
61408: PUSH
61409: LD_INT 8
61411: ST_TO_ADDR
// viewRange := 12 ;
61412: LD_ADDR_VAR 0 8
61416: PUSH
61417: LD_INT 12
61419: ST_TO_ADDR
// side := GetSide ( unit ) ;
61420: LD_ADDR_VAR 0 6
61424: PUSH
61425: LD_VAR 0 1
61429: PPUSH
61430: CALL_OW 255
61434: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61435: LD_INT 61
61437: PPUSH
61438: LD_VAR 0 6
61442: PPUSH
61443: CALL_OW 321
61447: PUSH
61448: LD_INT 2
61450: EQUAL
61451: IFFALSE 61461
// viewRange := 16 ;
61453: LD_ADDR_VAR 0 8
61457: PUSH
61458: LD_INT 16
61460: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61461: LD_VAR 0 1
61465: PPUSH
61466: LD_VAR 0 2
61470: PPUSH
61471: LD_VAR 0 3
61475: PPUSH
61476: CALL_OW 297
61480: PUSH
61481: LD_VAR 0 5
61485: GREATER
61486: IFFALSE 61565
// begin ComMoveXY ( unit , x , y ) ;
61488: LD_VAR 0 1
61492: PPUSH
61493: LD_VAR 0 2
61497: PPUSH
61498: LD_VAR 0 3
61502: PPUSH
61503: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61507: LD_INT 35
61509: PPUSH
61510: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61514: LD_VAR 0 1
61518: PPUSH
61519: LD_VAR 0 2
61523: PPUSH
61524: LD_VAR 0 3
61528: PPUSH
61529: CALL 39980 0 3
61533: NOT
61534: IFFALSE 61538
// exit ;
61536: GO 61874
// until GetDistUnitXY ( unit , x , y ) < dist ;
61538: LD_VAR 0 1
61542: PPUSH
61543: LD_VAR 0 2
61547: PPUSH
61548: LD_VAR 0 3
61552: PPUSH
61553: CALL_OW 297
61557: PUSH
61558: LD_VAR 0 5
61562: LESS
61563: IFFALSE 61507
// end ; ComTurnXY ( unit , x , y ) ;
61565: LD_VAR 0 1
61569: PPUSH
61570: LD_VAR 0 2
61574: PPUSH
61575: LD_VAR 0 3
61579: PPUSH
61580: CALL_OW 118
// repeat if Multiplayer then
61584: LD_OWVAR 4
61588: IFFALSE 61599
// wait ( 35 ) else
61590: LD_INT 35
61592: PPUSH
61593: CALL_OW 67
61597: GO 61606
// wait ( 5 ) ;
61599: LD_INT 5
61601: PPUSH
61602: CALL_OW 67
// _d := GetDir ( unit ) ;
61606: LD_ADDR_VAR 0 11
61610: PUSH
61611: LD_VAR 0 1
61615: PPUSH
61616: CALL_OW 254
61620: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61621: LD_ADDR_VAR 0 7
61625: PUSH
61626: LD_VAR 0 1
61630: PPUSH
61631: CALL_OW 250
61635: PPUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: CALL_OW 251
61645: PPUSH
61646: LD_VAR 0 2
61650: PPUSH
61651: LD_VAR 0 3
61655: PPUSH
61656: CALL 42616 0 4
61660: ST_TO_ADDR
// until dir = _d ;
61661: LD_VAR 0 7
61665: PUSH
61666: LD_VAR 0 11
61670: EQUAL
61671: IFFALSE 61584
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61673: LD_ADDR_VAR 0 9
61677: PUSH
61678: LD_VAR 0 1
61682: PPUSH
61683: CALL_OW 250
61687: PPUSH
61688: LD_VAR 0 7
61692: PPUSH
61693: LD_VAR 0 5
61697: PPUSH
61698: CALL_OW 272
61702: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61703: LD_ADDR_VAR 0 10
61707: PUSH
61708: LD_VAR 0 1
61712: PPUSH
61713: CALL_OW 251
61717: PPUSH
61718: LD_VAR 0 7
61722: PPUSH
61723: LD_VAR 0 5
61727: PPUSH
61728: CALL_OW 273
61732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61733: LD_VAR 0 9
61737: PPUSH
61738: LD_VAR 0 10
61742: PPUSH
61743: CALL_OW 488
61747: NOT
61748: IFFALSE 61752
// exit ;
61750: GO 61874
// ComAnimCustom ( unit , 1 ) ;
61752: LD_VAR 0 1
61756: PPUSH
61757: LD_INT 1
61759: PPUSH
61760: CALL_OW 592
// p := 0 ;
61764: LD_ADDR_VAR 0 12
61768: PUSH
61769: LD_INT 0
61771: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61772: LD_VAR 0 9
61776: PPUSH
61777: LD_VAR 0 10
61781: PPUSH
61782: LD_VAR 0 6
61786: PPUSH
61787: LD_VAR 0 8
61791: PPUSH
61792: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61796: LD_INT 35
61798: PPUSH
61799: CALL_OW 67
// p := Inc ( p ) ;
61803: LD_ADDR_VAR 0 12
61807: PUSH
61808: LD_VAR 0 12
61812: PPUSH
61813: CALL 42572 0 1
61817: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61818: LD_VAR 0 12
61822: PUSH
61823: LD_INT 3
61825: EQUAL
61826: IFTRUE 61840
61828: PUSH
61829: LD_VAR 0 1
61833: PPUSH
61834: CALL_OW 302
61838: NOT
61839: OR
61840: IFTRUE 61853
61842: PUSH
61843: LD_VAR 0 1
61847: PPUSH
61848: CALL_OW 301
61852: OR
61853: IFFALSE 61796
// RemoveSeeing ( _x , _y , side ) ;
61855: LD_VAR 0 9
61859: PPUSH
61860: LD_VAR 0 10
61864: PPUSH
61865: LD_VAR 0 6
61869: PPUSH
61870: CALL_OW 331
// end ;
61874: LD_VAR 0 4
61878: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
61879: LD_INT 0
61881: PPUSH
61882: PPUSH
61883: PPUSH
61884: PPUSH
61885: PPUSH
61886: PPUSH
61887: PPUSH
61888: PPUSH
61889: PPUSH
61890: PPUSH
61891: PPUSH
// if not unit then
61892: LD_VAR 0 1
61896: NOT
61897: IFFALSE 61901
// exit ;
61899: GO 62172
// side := GetSide ( unit ) ;
61901: LD_ADDR_VAR 0 3
61905: PUSH
61906: LD_VAR 0 1
61910: PPUSH
61911: CALL_OW 255
61915: ST_TO_ADDR
// x := GetX ( unit ) ;
61916: LD_ADDR_VAR 0 5
61920: PUSH
61921: LD_VAR 0 1
61925: PPUSH
61926: CALL_OW 250
61930: ST_TO_ADDR
// y := GetY ( unit ) ;
61931: LD_ADDR_VAR 0 6
61935: PUSH
61936: LD_VAR 0 1
61940: PPUSH
61941: CALL_OW 251
61945: ST_TO_ADDR
// r := 8 ;
61946: LD_ADDR_VAR 0 4
61950: PUSH
61951: LD_INT 8
61953: ST_TO_ADDR
// if x - r < 0 then
61954: LD_VAR 0 5
61958: PUSH
61959: LD_VAR 0 4
61963: MINUS
61964: PUSH
61965: LD_INT 0
61967: LESS
61968: IFFALSE 61980
// min_x := 0 else
61970: LD_ADDR_VAR 0 7
61974: PUSH
61975: LD_INT 0
61977: ST_TO_ADDR
61978: GO 61996
// min_x := x - r ;
61980: LD_ADDR_VAR 0 7
61984: PUSH
61985: LD_VAR 0 5
61989: PUSH
61990: LD_VAR 0 4
61994: MINUS
61995: ST_TO_ADDR
// if y - r < 0 then
61996: LD_VAR 0 6
62000: PUSH
62001: LD_VAR 0 4
62005: MINUS
62006: PUSH
62007: LD_INT 0
62009: LESS
62010: IFFALSE 62022
// min_y := 0 else
62012: LD_ADDR_VAR 0 8
62016: PUSH
62017: LD_INT 0
62019: ST_TO_ADDR
62020: GO 62038
// min_y := y - r ;
62022: LD_ADDR_VAR 0 8
62026: PUSH
62027: LD_VAR 0 6
62031: PUSH
62032: LD_VAR 0 4
62036: MINUS
62037: ST_TO_ADDR
// max_x := x + r ;
62038: LD_ADDR_VAR 0 9
62042: PUSH
62043: LD_VAR 0 5
62047: PUSH
62048: LD_VAR 0 4
62052: PLUS
62053: ST_TO_ADDR
// max_y := y + r ;
62054: LD_ADDR_VAR 0 10
62058: PUSH
62059: LD_VAR 0 6
62063: PUSH
62064: LD_VAR 0 4
62068: PLUS
62069: ST_TO_ADDR
// for _x = min_x to max_x do
62070: LD_ADDR_VAR 0 11
62074: PUSH
62075: DOUBLE
62076: LD_VAR 0 7
62080: DEC
62081: ST_TO_ADDR
62082: LD_VAR 0 9
62086: PUSH
62087: FOR_TO
62088: IFFALSE 62170
// for _y = min_y to max_y do
62090: LD_ADDR_VAR 0 12
62094: PUSH
62095: DOUBLE
62096: LD_VAR 0 8
62100: DEC
62101: ST_TO_ADDR
62102: LD_VAR 0 10
62106: PUSH
62107: FOR_TO
62108: IFFALSE 62166
// begin if not ValidHex ( _x , _y ) then
62110: LD_VAR 0 11
62114: PPUSH
62115: LD_VAR 0 12
62119: PPUSH
62120: CALL_OW 488
62124: NOT
62125: IFFALSE 62129
// continue ;
62127: GO 62107
// if MineAtPos ( _x , _y ) then
62129: LD_VAR 0 11
62133: PPUSH
62134: LD_VAR 0 12
62138: PPUSH
62139: CALL_OW 458
62143: IFFALSE 62164
// ViewMineAtPos ( _x , _y , side ) ;
62145: LD_VAR 0 11
62149: PPUSH
62150: LD_VAR 0 12
62154: PPUSH
62155: LD_VAR 0 3
62159: PPUSH
62160: CALL_OW 457
// end ;
62164: GO 62107
62166: POP
62167: POP
62168: GO 62087
62170: POP
62171: POP
// end ;
62172: LD_VAR 0 2
62176: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
62177: LD_INT 0
62179: PPUSH
62180: PPUSH
62181: PPUSH
62182: PPUSH
62183: PPUSH
62184: PPUSH
// if not units then
62185: LD_VAR 0 1
62189: NOT
62190: IFFALSE 62194
// exit ;
62192: GO 62624
// scaners := [ ] ;
62194: LD_ADDR_VAR 0 6
62198: PUSH
62199: EMPTY
62200: ST_TO_ADDR
// for i in units do
62201: LD_ADDR_VAR 0 3
62205: PUSH
62206: LD_VAR 0 1
62210: PUSH
62211: FOR_IN
62212: IFFALSE 62369
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62214: LD_VAR 0 3
62218: PPUSH
62219: CALL_OW 264
62223: PUSH
62224: LD_INT 11
62226: NONEQUAL
62227: IFTRUE 62241
62229: PUSH
62230: LD_VAR 0 3
62234: PPUSH
62235: CALL_OW 302
62239: NOT
62240: OR
62241: IFTRUE 62258
62243: PUSH
62244: LD_VAR 0 3
62248: PPUSH
62249: CALL_OW 110
62253: PUSH
62254: LD_INT 502
62256: EQUAL
62257: OR
62258: IFFALSE 62262
// continue ;
62260: GO 62211
// ComStop ( i ) ;
62262: LD_VAR 0 3
62266: PPUSH
62267: CALL_OW 141
// x := GetX ( i ) ;
62271: LD_ADDR_VAR 0 4
62275: PUSH
62276: LD_VAR 0 3
62280: PPUSH
62281: CALL_OW 250
62285: ST_TO_ADDR
// y := GetY ( i ) ;
62286: LD_ADDR_VAR 0 5
62290: PUSH
62291: LD_VAR 0 3
62295: PPUSH
62296: CALL_OW 251
62300: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62301: LD_VAR 0 3
62305: PPUSH
62306: CALL_OW 255
62310: PUSH
62311: LD_OWVAR 2
62315: EQUAL
62316: IFFALSE 62335
// PlaySoundXY ( x , y , mineDetector ) ;
62318: LD_VAR 0 4
62322: PPUSH
62323: LD_VAR 0 5
62327: PPUSH
62328: LD_STRING mineDetector
62330: PPUSH
62331: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62335: LD_ADDR_VAR 0 6
62339: PUSH
62340: LD_VAR 0 6
62344: PPUSH
62345: LD_VAR 0 3
62349: PPUSH
62350: CALL 41199 0 2
62354: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62355: LD_VAR 0 3
62359: PPUSH
62360: LD_INT 502
62362: PPUSH
62363: CALL_OW 109
// end ;
62367: GO 62211
62369: POP
62370: POP
// if not scaners then
62371: LD_VAR 0 6
62375: NOT
62376: IFFALSE 62380
// exit ;
62378: GO 62624
// wait ( 3 ) ;
62380: LD_INT 3
62382: PPUSH
62383: CALL_OW 67
// timer := 6 ;
62387: LD_ADDR_VAR 0 7
62391: PUSH
62392: LD_INT 6
62394: ST_TO_ADDR
// repeat for i in scaners do
62395: LD_ADDR_VAR 0 3
62399: PUSH
62400: LD_VAR 0 6
62404: PUSH
62405: FOR_IN
62406: IFFALSE 62522
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62408: LD_VAR 0 3
62412: PPUSH
62413: CALL_OW 302
62417: NOT
62418: IFTRUE 62431
62420: PUSH
62421: LD_VAR 0 3
62425: PPUSH
62426: CALL_OW 314
62430: OR
62431: IFTRUE 62462
62433: PUSH
62434: LD_VAR 0 3
62438: PPUSH
62439: CALL_OW 263
62443: PUSH
62444: LD_INT 1
62446: EQUAL
62447: IFFALSE 62461
62449: PUSH
62450: LD_VAR 0 3
62454: PPUSH
62455: CALL_OW 311
62459: NOT
62460: AND
62461: OR
62462: IFFALSE 62506
// begin SetUnitDisplayNumber ( i , 0 ) ;
62464: LD_VAR 0 3
62468: PPUSH
62469: LD_INT 0
62471: PPUSH
62472: CALL_OW 505
// SetTag ( i , 0 ) ;
62476: LD_VAR 0 3
62480: PPUSH
62481: LD_INT 0
62483: PPUSH
62484: CALL_OW 109
// scaners := scaners diff i ;
62488: LD_ADDR_VAR 0 6
62492: PUSH
62493: LD_VAR 0 6
62497: PUSH
62498: LD_VAR 0 3
62502: DIFF
62503: ST_TO_ADDR
// continue ;
62504: GO 62405
// end ; SetUnitDisplayNumber ( i , timer ) ;
62506: LD_VAR 0 3
62510: PPUSH
62511: LD_VAR 0 7
62515: PPUSH
62516: CALL_OW 505
// end ;
62520: GO 62405
62522: POP
62523: POP
// if not scaners then
62524: LD_VAR 0 6
62528: NOT
62529: IFFALSE 62533
// exit ;
62531: GO 62624
// timer := Dec ( timer ) ;
62533: LD_ADDR_VAR 0 7
62537: PUSH
62538: LD_VAR 0 7
62542: PPUSH
62543: CALL 42594 0 1
62547: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62548: LD_INT 35
62550: PPUSH
62551: CALL_OW 67
// until timer = 0 ;
62555: LD_VAR 0 7
62559: PUSH
62560: LD_INT 0
62562: EQUAL
62563: IFFALSE 62395
// if not scaners then
62565: LD_VAR 0 6
62569: NOT
62570: IFFALSE 62574
// exit ;
62572: GO 62624
// for i in scaners do
62574: LD_ADDR_VAR 0 3
62578: PUSH
62579: LD_VAR 0 6
62583: PUSH
62584: FOR_IN
62585: IFFALSE 62622
// begin SetUnitDisplayNumber ( i , 0 ) ;
62587: LD_VAR 0 3
62591: PPUSH
62592: LD_INT 0
62594: PPUSH
62595: CALL_OW 505
// SetTag ( i , 0 ) ;
62599: LD_VAR 0 3
62603: PPUSH
62604: LD_INT 0
62606: PPUSH
62607: CALL_OW 109
// RevealDetectorMine ( i ) ;
62611: LD_VAR 0 3
62615: PPUSH
62616: CALL 61879 0 1
// end ;
62620: GO 62584
62622: POP
62623: POP
// end ;
62624: LD_VAR 0 2
62628: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
62629: LD_INT 0
62631: PPUSH
// if p1 = mine_detector_mode then
62632: LD_VAR 0 2
62636: PUSH
62637: LD_INT 103
62639: EQUAL
62640: IFFALSE 62651
// DetectMine ( units ) ;
62642: LD_VAR 0 1
62646: PPUSH
62647: CALL 62177 0 1
// end ; end_of_file
62651: LD_VAR 0 7
62655: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62656: PPOPN 6
62658: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62659: LD_INT 0
62661: PPUSH
// begin if not units then
62662: LD_VAR 0 1
62666: NOT
62667: IFFALSE 62671
// exit ;
62669: GO 62705
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62671: LD_VAR 0 1
62675: PPUSH
62676: LD_VAR 0 2
62680: PPUSH
62681: LD_VAR 0 3
62685: PPUSH
62686: LD_VAR 0 4
62690: PPUSH
62691: LD_VAR 0 5
62695: PPUSH
62696: LD_VAR 0 6
62700: PPUSH
62701: CALL 62629 0 6
// end ;
62705: PPOPN 7
62707: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62708: LD_EXP 3
62712: PUSH
62713: LD_INT 4
62715: EQUAL
62716: IFFALSE 62752
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62718: LD_STRING setGameDifficulty(
62720: PUSH
62721: LD_OWVAR 67
62725: STR
62726: PUSH
62727: LD_STRING )
62729: STR
62730: PPUSH
62731: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62735: LD_STRING displayDifficulty(
62737: PUSH
62738: LD_OWVAR 67
62742: STR
62743: PUSH
62744: LD_STRING )
62746: STR
62747: PPUSH
62748: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62752: CALL 62781 0 0
// end ; end_of_file
62756: PPOPN 1
62758: END
// every 0 0$1 do
62759: GO 62761
62761: DISABLE
// begin enable ;
62762: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62763: LD_STRING updateTimer(
62765: PUSH
62766: LD_OWVAR 1
62770: STR
62771: PUSH
62772: LD_STRING );
62774: STR
62775: PPUSH
62776: CALL_OW 559
// end ;
62780: END
// export function SOS_MapStart ( ) ; begin
62781: LD_INT 0
62783: PPUSH
// UpdateFactoryWaypoints ( ) ;
62784: CALL 63715 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62788: CALL 63967 0 0
// ParseMultiDataToLua ( ) ;
62792: CALL 64114 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62796: LD_STRING setSpecLogoNumber(
62798: PUSH
62799: LD_INT 2
62801: STR
62802: PUSH
62803: LD_STRING ,
62805: STR
62806: PUSH
62807: LD_INT 1
62809: STR
62810: PUSH
62811: LD_STRING )
62813: STR
62814: PPUSH
62815: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62819: LD_STRING setSpecLogoNumber(
62821: PUSH
62822: LD_INT 3
62824: STR
62825: PUSH
62826: LD_STRING ,
62828: STR
62829: PUSH
62830: LD_INT 2
62832: STR
62833: PUSH
62834: LD_STRING )
62836: STR
62837: PPUSH
62838: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62842: LD_STRING setSpecLogoNumber(
62844: PUSH
62845: LD_INT 4
62847: STR
62848: PUSH
62849: LD_STRING ,
62851: STR
62852: PUSH
62853: LD_INT 3
62855: STR
62856: PUSH
62857: LD_STRING )
62859: STR
62860: PPUSH
62861: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62865: LD_STRING setSpecLogoNumber(
62867: PUSH
62868: LD_INT 5
62870: STR
62871: PUSH
62872: LD_STRING ,
62874: STR
62875: PUSH
62876: LD_INT 4
62878: STR
62879: PUSH
62880: LD_STRING )
62882: STR
62883: PPUSH
62884: CALL_OW 559
// end ;
62888: LD_VAR 0 1
62892: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62893: LD_INT 0
62895: PPUSH
62896: PPUSH
62897: PPUSH
62898: PPUSH
62899: PPUSH
62900: PPUSH
62901: PPUSH
62902: PPUSH
62903: PPUSH
// for i := 1 to 8 do
62904: LD_ADDR_VAR 0 2
62908: PUSH
62909: DOUBLE
62910: LD_INT 1
62912: DEC
62913: ST_TO_ADDR
62914: LD_INT 8
62916: PUSH
62917: FOR_TO
62918: IFFALSE 63303
// begin if mpSidePositions [ i ] then
62920: LD_EXP 7
62924: PUSH
62925: LD_VAR 0 2
62929: ARRAY
62930: IFFALSE 63301
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62932: LD_ADDR_VAR 0 7
62936: PUSH
62937: LD_INT 22
62939: PUSH
62940: LD_VAR 0 2
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 21
62951: PUSH
62952: LD_INT 1
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PPUSH
62963: CALL_OW 69
62967: PPUSH
62968: CALL 5233 0 1
62972: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62973: LD_ADDR_VAR 0 9
62977: PUSH
62978: LD_INT 22
62980: PUSH
62981: LD_VAR 0 2
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: LD_INT 30
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 30
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: LIST
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PPUSH
63022: CALL_OW 69
63026: ST_TO_ADDR
// crates := 0 ;
63027: LD_ADDR_VAR 0 4
63031: PUSH
63032: LD_INT 0
63034: ST_TO_ADDR
// oil := 0 ;
63035: LD_ADDR_VAR 0 5
63039: PUSH
63040: LD_INT 0
63042: ST_TO_ADDR
// sib := 0 ;
63043: LD_ADDR_VAR 0 6
63047: PUSH
63048: LD_INT 0
63050: ST_TO_ADDR
// if bases then
63051: LD_VAR 0 9
63055: IFFALSE 63161
// begin for j in bases do
63057: LD_ADDR_VAR 0 3
63061: PUSH
63062: LD_VAR 0 9
63066: PUSH
63067: FOR_IN
63068: IFFALSE 63159
// begin base := GetBase ( j ) ;
63070: LD_ADDR_VAR 0 8
63074: PUSH
63075: LD_VAR 0 3
63079: PPUSH
63080: CALL_OW 274
63084: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63085: LD_ADDR_VAR 0 4
63089: PUSH
63090: LD_VAR 0 4
63094: PUSH
63095: LD_VAR 0 8
63099: PPUSH
63100: LD_INT 1
63102: PPUSH
63103: CALL_OW 275
63107: PLUS
63108: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63109: LD_ADDR_VAR 0 5
63113: PUSH
63114: LD_VAR 0 5
63118: PUSH
63119: LD_VAR 0 8
63123: PPUSH
63124: LD_INT 2
63126: PPUSH
63127: CALL_OW 275
63131: PLUS
63132: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63133: LD_ADDR_VAR 0 6
63137: PUSH
63138: LD_VAR 0 6
63142: PUSH
63143: LD_VAR 0 8
63147: PPUSH
63148: LD_INT 3
63150: PPUSH
63151: CALL_OW 275
63155: PLUS
63156: ST_TO_ADDR
// end ;
63157: GO 63067
63159: POP
63160: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63161: LD_STRING setSpecText(
63163: PUSH
63164: LD_VAR 0 2
63168: STR
63169: PUSH
63170: LD_STRING ,
63172: STR
63173: PUSH
63174: LD_INT 2
63176: STR
63177: PUSH
63178: LD_STRING ,
63180: STR
63181: PUSH
63182: LD_VAR 0 4
63186: STR
63187: PUSH
63188: LD_STRING )
63190: STR
63191: PPUSH
63192: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63196: LD_STRING setSpecText(
63198: PUSH
63199: LD_VAR 0 2
63203: STR
63204: PUSH
63205: LD_STRING ,
63207: STR
63208: PUSH
63209: LD_INT 3
63211: STR
63212: PUSH
63213: LD_STRING ,
63215: STR
63216: PUSH
63217: LD_VAR 0 5
63221: STR
63222: PUSH
63223: LD_STRING )
63225: STR
63226: PPUSH
63227: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63231: LD_STRING setSpecText(
63233: PUSH
63234: LD_VAR 0 2
63238: STR
63239: PUSH
63240: LD_STRING ,
63242: STR
63243: PUSH
63244: LD_INT 4
63246: STR
63247: PUSH
63248: LD_STRING ,
63250: STR
63251: PUSH
63252: LD_VAR 0 6
63256: STR
63257: PUSH
63258: LD_STRING )
63260: STR
63261: PPUSH
63262: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63266: LD_STRING setSpecText(
63268: PUSH
63269: LD_VAR 0 2
63273: STR
63274: PUSH
63275: LD_STRING ,
63277: STR
63278: PUSH
63279: LD_INT 5
63281: STR
63282: PUSH
63283: LD_STRING ,
63285: STR
63286: PUSH
63287: LD_VAR 0 7
63291: STR
63292: PUSH
63293: LD_STRING )
63295: STR
63296: PPUSH
63297: CALL_OW 559
// end ; end ;
63301: GO 62917
63303: POP
63304: POP
// end ;
63305: LD_VAR 0 1
63309: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63310: LD_INT 2
63312: PUSH
63313: LD_INT 30
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 30
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: LIST
63337: PPUSH
63338: CALL_OW 69
63342: IFFALSE 63352
63344: GO 63346
63346: DISABLE
// begin enable ;
63347: ENABLE
// UpdateSpectatorBar ;
63348: CALL 62893 0 0
// end ;
63352: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63353: LD_INT 0
63355: PPUSH
// end ;
63356: LD_VAR 0 12
63360: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63361: LD_INT 0
63363: PPUSH
63364: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63365: LD_VAR 0 1
63369: NOT
63370: IFTRUE 63389
63372: PUSH
63373: LD_VAR 0 2
63377: PPUSH
63378: LD_VAR 0 3
63382: PPUSH
63383: CALL_OW 488
63387: NOT
63388: OR
63389: IFTRUE 63424
63391: PUSH
63392: LD_VAR 0 1
63396: PPUSH
63397: CALL_OW 266
63401: PUSH
63402: LD_INT 3
63404: NONEQUAL
63405: IFFALSE 63423
63407: PUSH
63408: LD_VAR 0 1
63412: PPUSH
63413: CALL_OW 247
63417: PUSH
63418: LD_INT 1
63420: EQUAL
63421: NOT
63422: AND
63423: OR
63424: IFFALSE 63428
// exit ;
63426: GO 63710
// if GetType ( factory ) = unit_human then
63428: LD_VAR 0 1
63432: PPUSH
63433: CALL_OW 247
63437: PUSH
63438: LD_INT 1
63440: EQUAL
63441: IFFALSE 63458
// factory := IsInUnit ( factory ) ;
63443: LD_ADDR_VAR 0 1
63447: PUSH
63448: LD_VAR 0 1
63452: PPUSH
63453: CALL_OW 310
63457: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63458: LD_VAR 0 1
63462: PPUSH
63463: CALL_OW 266
63467: PUSH
63468: LD_INT 3
63470: NONEQUAL
63471: IFFALSE 63475
// exit ;
63473: GO 63710
// for i := 1 to Count ( factoryWaypoints ) do
63475: LD_ADDR_VAR 0 5
63479: PUSH
63480: DOUBLE
63481: LD_INT 1
63483: DEC
63484: ST_TO_ADDR
63485: LD_EXP 60
63489: PPUSH
63490: CALL 5233 0 1
63494: PUSH
63495: FOR_TO
63496: IFFALSE 63658
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63498: LD_VAR 0 2
63502: PPUSH
63503: LD_VAR 0 3
63507: PPUSH
63508: CALL_OW 428
63512: PUSH
63513: LD_EXP 60
63517: PUSH
63518: LD_VAR 0 5
63522: ARRAY
63523: PUSH
63524: LD_INT 2
63526: ARRAY
63527: EQUAL
63528: IFFALSE 63560
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63530: LD_ADDR_EXP 60
63534: PUSH
63535: LD_EXP 60
63539: PPUSH
63540: LD_VAR 0 5
63544: PPUSH
63545: CALL_OW 3
63549: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63550: CALL 63715 0 0
// exit ;
63554: POP
63555: POP
63556: GO 63710
// end else
63558: GO 63656
// if factory = factoryWaypoints [ i ] [ 2 ] then
63560: LD_VAR 0 1
63564: PUSH
63565: LD_EXP 60
63569: PUSH
63570: LD_VAR 0 5
63574: ARRAY
63575: PUSH
63576: LD_INT 2
63578: ARRAY
63579: EQUAL
63580: IFFALSE 63656
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63582: LD_ADDR_EXP 60
63586: PUSH
63587: LD_EXP 60
63591: PPUSH
63592: LD_VAR 0 5
63596: PPUSH
63597: CALL_OW 3
63601: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63602: LD_ADDR_EXP 60
63606: PUSH
63607: LD_EXP 60
63611: PPUSH
63612: LD_VAR 0 1
63616: PPUSH
63617: CALL_OW 255
63621: PUSH
63622: LD_VAR 0 1
63626: PUSH
63627: LD_VAR 0 2
63631: PUSH
63632: LD_VAR 0 3
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: PPUSH
63643: CALL 41199 0 2
63647: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63648: CALL 63715 0 0
// exit ;
63652: POP
63653: POP
63654: GO 63710
// end ; end ;
63656: GO 63495
63658: POP
63659: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63660: LD_ADDR_EXP 60
63664: PUSH
63665: LD_EXP 60
63669: PPUSH
63670: LD_VAR 0 1
63674: PPUSH
63675: CALL_OW 255
63679: PUSH
63680: LD_VAR 0 1
63684: PUSH
63685: LD_VAR 0 2
63689: PUSH
63690: LD_VAR 0 3
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: PPUSH
63701: CALL 41199 0 2
63705: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63706: CALL 63715 0 0
// end ;
63710: LD_VAR 0 4
63714: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63715: LD_INT 0
63717: PPUSH
63718: PPUSH
63719: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63720: LD_STRING resetFactoryWaypoint();
63722: PPUSH
63723: CALL_OW 559
// if factoryWaypoints then
63727: LD_EXP 60
63731: IFFALSE 63852
// begin list := factoryWaypoints ;
63733: LD_ADDR_VAR 0 3
63737: PUSH
63738: LD_EXP 60
63742: ST_TO_ADDR
// for i := 1 to list do
63743: LD_ADDR_VAR 0 2
63747: PUSH
63748: DOUBLE
63749: LD_INT 1
63751: DEC
63752: ST_TO_ADDR
63753: LD_VAR 0 3
63757: PUSH
63758: FOR_TO
63759: IFFALSE 63850
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63761: LD_STRING setFactoryWaypointXY(
63763: PUSH
63764: LD_VAR 0 3
63768: PUSH
63769: LD_VAR 0 2
63773: ARRAY
63774: PUSH
63775: LD_INT 1
63777: ARRAY
63778: STR
63779: PUSH
63780: LD_STRING ,
63782: STR
63783: PUSH
63784: LD_VAR 0 3
63788: PUSH
63789: LD_VAR 0 2
63793: ARRAY
63794: PUSH
63795: LD_INT 2
63797: ARRAY
63798: STR
63799: PUSH
63800: LD_STRING ,
63802: STR
63803: PUSH
63804: LD_VAR 0 3
63808: PUSH
63809: LD_VAR 0 2
63813: ARRAY
63814: PUSH
63815: LD_INT 3
63817: ARRAY
63818: STR
63819: PUSH
63820: LD_STRING ,
63822: STR
63823: PUSH
63824: LD_VAR 0 3
63828: PUSH
63829: LD_VAR 0 2
63833: ARRAY
63834: PUSH
63835: LD_INT 4
63837: ARRAY
63838: STR
63839: PUSH
63840: LD_STRING )
63842: STR
63843: PPUSH
63844: CALL_OW 559
63848: GO 63758
63850: POP
63851: POP
// end ; end ;
63852: LD_VAR 0 1
63856: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63857: LD_INT 0
63859: PPUSH
// if HexInfo ( x , y ) = warehouse then
63860: LD_VAR 0 2
63864: PPUSH
63865: LD_VAR 0 3
63869: PPUSH
63870: CALL_OW 428
63874: PUSH
63875: LD_VAR 0 1
63879: EQUAL
63880: IFFALSE 63907
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63882: LD_ADDR_EXP 62
63886: PUSH
63887: LD_EXP 62
63891: PPUSH
63892: LD_VAR 0 1
63896: PPUSH
63897: LD_INT 0
63899: PPUSH
63900: CALL_OW 1
63904: ST_TO_ADDR
63905: GO 63958
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63907: LD_ADDR_EXP 62
63911: PUSH
63912: LD_EXP 62
63916: PPUSH
63917: LD_VAR 0 1
63921: PPUSH
63922: LD_VAR 0 1
63926: PPUSH
63927: CALL_OW 255
63931: PUSH
63932: LD_VAR 0 1
63936: PUSH
63937: LD_VAR 0 2
63941: PUSH
63942: LD_VAR 0 3
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: PPUSH
63953: CALL_OW 1
63957: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63958: CALL 63967 0 0
// end ;
63962: LD_VAR 0 4
63966: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63967: LD_INT 0
63969: PPUSH
63970: PPUSH
63971: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63972: LD_STRING resetWarehouseGatheringPoints();
63974: PPUSH
63975: CALL_OW 559
// if warehouseGatheringPoints then
63979: LD_EXP 62
63983: IFFALSE 64109
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63985: LD_ADDR_VAR 0 3
63989: PUSH
63990: LD_EXP 62
63994: PPUSH
63995: CALL 45133 0 1
63999: ST_TO_ADDR
// for i := 1 to list do
64000: LD_ADDR_VAR 0 2
64004: PUSH
64005: DOUBLE
64006: LD_INT 1
64008: DEC
64009: ST_TO_ADDR
64010: LD_VAR 0 3
64014: PUSH
64015: FOR_TO
64016: IFFALSE 64107
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64018: LD_STRING setWarehouseGatheringPointXY(
64020: PUSH
64021: LD_VAR 0 3
64025: PUSH
64026: LD_VAR 0 2
64030: ARRAY
64031: PUSH
64032: LD_INT 1
64034: ARRAY
64035: STR
64036: PUSH
64037: LD_STRING ,
64039: STR
64040: PUSH
64041: LD_VAR 0 3
64045: PUSH
64046: LD_VAR 0 2
64050: ARRAY
64051: PUSH
64052: LD_INT 2
64054: ARRAY
64055: STR
64056: PUSH
64057: LD_STRING ,
64059: STR
64060: PUSH
64061: LD_VAR 0 3
64065: PUSH
64066: LD_VAR 0 2
64070: ARRAY
64071: PUSH
64072: LD_INT 3
64074: ARRAY
64075: STR
64076: PUSH
64077: LD_STRING ,
64079: STR
64080: PUSH
64081: LD_VAR 0 3
64085: PUSH
64086: LD_VAR 0 2
64090: ARRAY
64091: PUSH
64092: LD_INT 4
64094: ARRAY
64095: STR
64096: PUSH
64097: LD_STRING )
64099: STR
64100: PPUSH
64101: CALL_OW 559
64105: GO 64015
64107: POP
64108: POP
// end ; end ;
64109: LD_VAR 0 1
64113: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64114: LD_INT 0
64116: PPUSH
64117: PPUSH
// if not mpSidePositions then
64118: LD_EXP 7
64122: NOT
64123: IFFALSE 64127
// exit ;
64125: GO 64198
// result :=  ;
64127: LD_ADDR_VAR 0 1
64131: PUSH
64132: LD_STRING 
64134: ST_TO_ADDR
// for i := 1 to 8 do
64135: LD_ADDR_VAR 0 2
64139: PUSH
64140: DOUBLE
64141: LD_INT 1
64143: DEC
64144: ST_TO_ADDR
64145: LD_INT 8
64147: PUSH
64148: FOR_TO
64149: IFFALSE 64179
// begin result := result & mpSidePositions [ i ] & ; ;
64151: LD_ADDR_VAR 0 1
64155: PUSH
64156: LD_VAR 0 1
64160: PUSH
64161: LD_EXP 7
64165: PUSH
64166: LD_VAR 0 2
64170: ARRAY
64171: STR
64172: PUSH
64173: LD_STRING ;
64175: STR
64176: ST_TO_ADDR
// end ;
64177: GO 64148
64179: POP
64180: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64181: LD_STRING setMultiplayerRealPosition("
64183: PUSH
64184: LD_VAR 0 1
64188: STR
64189: PUSH
64190: LD_STRING ");
64192: STR
64193: PPUSH
64194: CALL_OW 559
// end ;
64198: LD_VAR 0 1
64202: RET
