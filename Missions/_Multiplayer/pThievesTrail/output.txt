// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46580 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 47003 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 230
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 8
 852: PUSH
 853: LD_INT 9
 855: PUSH
 856: LD_INT 10
 858: PUSH
 859: LD_INT 11
 861: PUSH
 862: LD_INT 12
 864: PUSH
 865: LD_INT 13
 867: PUSH
 868: LD_INT 14
 870: PUSH
 871: LD_INT 15
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 , Center3 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 4
 891: PUSH
 892: LD_INT 5
 894: PUSH
 895: LD_INT 6
 897: PUSH
 898: LD_INT 7
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 2
 906: PUSH
 907: LD_INT 3
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 19
 923: UNION
 924: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 925: LD_VAR 0 1
 929: PUSH
 930: LD_INT 2
 932: EQUAL
 933: IFFALSE 945
// baseLevel := 1 else
 935: LD_ADDR_VAR 0 7
 939: PUSH
 940: LD_INT 1
 942: ST_TO_ADDR
 943: GO 959
// baseLevel := mpGameSettings [ 1 ] ;
 945: LD_ADDR_VAR 0 7
 949: PUSH
 950: LD_EXP 6
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 959: LD_ADDR_EXP 24
 963: PUSH
 964: LD_EXP 6
 968: PUSH
 969: LD_INT 2
 971: ARRAY
 972: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 973: LD_ADDR_EXP 25
 977: PUSH
 978: LD_EXP 6
 982: PUSH
 983: LD_INT 3
 985: ARRAY
 986: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 987: LD_ADDR_EXP 15
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 4
 999: ARRAY
1000: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1001: LD_ADDR_EXP 27
1005: PUSH
1006: LD_EXP 6
1010: PUSH
1011: LD_INT 5
1013: ARRAY
1014: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1015: LD_ADDR_VAR 0 5
1019: PUSH
1020: LD_EXP 6
1024: PUSH
1025: LD_INT 6
1027: ARRAY
1028: PUSH
1029: LD_INT 0
1031: GREATER
1032: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1033: LD_ADDR_VAR 0 6
1037: PUSH
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 7
1045: ARRAY
1046: PUSH
1047: LD_INT 0
1049: GREATER
1050: ST_TO_ADDR
// kingCamArea := 0 ;
1051: LD_ADDR_EXP 2
1055: PUSH
1056: LD_INT 0
1058: ST_TO_ADDR
// kingArea := 0 ;
1059: LD_ADDR_EXP 1
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// if gameType = GameTypeKing then
1067: LD_VAR 0 1
1071: PUSH
1072: LD_INT 3
1074: EQUAL
1075: IFFALSE 1115
// begin mpKingArea := 0 ;
1077: LD_ADDR_EXP 34
1081: PUSH
1082: LD_INT 0
1084: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1085: LD_ADDR_EXP 35
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_INT 8
1097: ARRAY
1098: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1099: LD_ADDR_EXP 37
1103: PUSH
1104: LD_EXP 6
1108: PUSH
1109: LD_INT 10
1111: ARRAY
1112: ST_TO_ADDR
// end else
1113: GO 1139
// begin mpKingArea := 0 ;
1115: LD_ADDR_EXP 34
1119: PUSH
1120: LD_INT 0
1122: ST_TO_ADDR
// mpPoints := 0 ;
1123: LD_ADDR_EXP 35
1127: PUSH
1128: LD_INT 0
1130: ST_TO_ADDR
// mpEmissions := 0 ;
1131: LD_ADDR_EXP 37
1135: PUSH
1136: LD_INT 0
1138: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1139: LD_EXP 6
1143: PUSH
1144: LD_INT 9
1146: ARRAY
1147: IFFALSE 1279
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1149: LD_ADDR_EXP 36
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 3
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 12
1196: PUSH
1197: LD_INT 1
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 24
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 12
1214: PUSH
1215: LD_INT 1
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 23
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 21
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 1
1242: PUSH
1243: LD_INT 42
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 21
1254: PUSH
1255: LD_INT 1
1257: PUSH
1258: LD_INT 1
1260: PUSH
1261: LD_INT 42
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: LIST
1278: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1279: LD_ADDR_EXP 16
1283: PUSH
1284: LD_EXP 6
1288: PUSH
1289: LD_INT 11
1291: ARRAY
1292: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1293: LD_ADDR_EXP 22
1297: PUSH
1298: LD_EXP 6
1302: PUSH
1303: LD_INT 12
1305: ARRAY
1306: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1307: LD_ADDR_EXP 26
1311: PUSH
1312: LD_EXP 6
1316: PUSH
1317: LD_INT 13
1319: ARRAY
1320: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1321: LD_ADDR_EXP 33
1325: PUSH
1326: LD_EXP 6
1330: PUSH
1331: LD_INT 14
1333: ARRAY
1334: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1335: LD_ADDR_EXP 30
1339: PUSH
1340: LD_EXP 6
1344: PUSH
1345: LD_INT 15
1347: ARRAY
1348: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1349: LD_ADDR_EXP 28
1353: PUSH
1354: LD_EXP 6
1358: PUSH
1359: LD_INT 18
1361: ARRAY
1362: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1363: LD_ADDR_EXP 20
1367: PUSH
1368: LD_EXP 6
1372: PUSH
1373: LD_INT 21
1375: ARRAY
1376: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1377: LD_ADDR_EXP 31
1381: PUSH
1382: LD_INT 16
1384: PUSH
1385: LD_INT 17
1387: PUSH
1388: LD_INT 18
1390: PUSH
1391: LD_INT 19
1393: PUSH
1394: LD_INT 20
1396: PUSH
1397: LD_INT 21
1399: PUSH
1400: LD_INT 22
1402: PUSH
1403: LD_INT 23
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 3 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 0 ) ] ;
1416: LD_ADDR_VAR 0 8
1420: PUSH
1421: LD_INT 24
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: CALL 45945 0 2
1431: PUSH
1432: LD_INT 30
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: CALL 45945 0 2
1442: PUSH
1443: LD_INT 36
1445: PPUSH
1446: LD_INT 3
1448: PPUSH
1449: CALL 45945 0 2
1453: PUSH
1454: LD_INT 42
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL 45945 0 2
1464: PUSH
1465: LD_INT 48
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL 45945 0 2
1475: PUSH
1476: LD_INT 54
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL 45945 0 2
1486: PUSH
1487: LD_INT 60
1489: PPUSH
1490: LD_INT 5
1492: PPUSH
1493: CALL 45945 0 2
1497: PUSH
1498: LD_INT 66
1500: PPUSH
1501: LD_INT 0
1503: PPUSH
1504: CALL 45945 0 2
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1519: LD_ADDR_VAR 0 3
1523: PUSH
1524: DOUBLE
1525: LD_INT 1
1527: DEC
1528: ST_TO_ADDR
1529: LD_VAR 0 8
1533: PPUSH
1534: CALL 5250 0 1
1538: PUSH
1539: FOR_TO
1540: IFFALSE 1644
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1542: LD_ADDR_EXP 21
1546: PUSH
1547: LD_EXP 21
1551: PPUSH
1552: LD_VAR 0 3
1556: PPUSH
1557: LD_VAR 0 8
1561: PUSH
1562: LD_VAR 0 3
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: PPUSH
1572: LD_VAR 0 8
1576: PUSH
1577: LD_VAR 0 3
1581: ARRAY
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 10
1589: PPUSH
1590: CALL_OW 272
1594: PUSH
1595: LD_VAR 0 8
1599: PUSH
1600: LD_VAR 0 3
1604: ARRAY
1605: PUSH
1606: LD_INT 2
1608: ARRAY
1609: PPUSH
1610: LD_VAR 0 8
1614: PUSH
1615: LD_VAR 0 3
1619: ARRAY
1620: PUSH
1621: LD_INT 3
1623: ARRAY
1624: PPUSH
1625: LD_INT 10
1627: PPUSH
1628: CALL_OW 273
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PPUSH
1637: CALL_OW 1
1641: ST_TO_ADDR
1642: GO 1539
1644: POP
1645: POP
// if hasOil then
1646: LD_VAR 0 5
1650: IFFALSE 1789
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1652: LD_ADDR_VAR 0 4
1656: PUSH
1657: LD_EXP 6
1661: PUSH
1662: LD_INT 6
1664: ARRAY
1665: PUSH
1666: LD_INT 2
1668: EQUAL
1669: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1670: LD_ADDR_EXP 12
1674: PUSH
1675: LD_INT 25
1677: PPUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: CALL 45778 0 2
1687: PUSH
1688: LD_INT 31
1690: PPUSH
1691: LD_VAR 0 4
1695: PPUSH
1696: CALL 45778 0 2
1700: PUSH
1701: LD_INT 37
1703: PPUSH
1704: LD_VAR 0 4
1708: PPUSH
1709: CALL 45778 0 2
1713: PUSH
1714: LD_INT 43
1716: PPUSH
1717: LD_VAR 0 4
1721: PPUSH
1722: CALL 45778 0 2
1726: PUSH
1727: LD_INT 49
1729: PPUSH
1730: LD_VAR 0 4
1734: PPUSH
1735: CALL 45778 0 2
1739: PUSH
1740: LD_INT 55
1742: PPUSH
1743: LD_VAR 0 4
1747: PPUSH
1748: CALL 45778 0 2
1752: PUSH
1753: LD_INT 61
1755: PPUSH
1756: LD_VAR 0 4
1760: PPUSH
1761: CALL 45778 0 2
1765: PUSH
1766: LD_INT 67
1768: PPUSH
1769: LD_VAR 0 4
1773: PPUSH
1774: CALL 45778 0 2
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: ST_TO_ADDR
// end ; if hasSib then
1789: LD_VAR 0 6
1793: IFFALSE 1932
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1795: LD_ADDR_VAR 0 4
1799: PUSH
1800: LD_EXP 6
1804: PUSH
1805: LD_INT 7
1807: ARRAY
1808: PUSH
1809: LD_INT 2
1811: EQUAL
1812: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1813: LD_ADDR_EXP 13
1817: PUSH
1818: LD_INT 26
1820: PPUSH
1821: LD_VAR 0 4
1825: PPUSH
1826: CALL 45778 0 2
1830: PUSH
1831: LD_INT 32
1833: PPUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: CALL 45778 0 2
1843: PUSH
1844: LD_INT 38
1846: PPUSH
1847: LD_VAR 0 4
1851: PPUSH
1852: CALL 45778 0 2
1856: PUSH
1857: LD_INT 44
1859: PPUSH
1860: LD_VAR 0 4
1864: PPUSH
1865: CALL 45778 0 2
1869: PUSH
1870: LD_INT 50
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL 45778 0 2
1882: PUSH
1883: LD_INT 56
1885: PPUSH
1886: LD_VAR 0 4
1890: PPUSH
1891: CALL 45778 0 2
1895: PUSH
1896: LD_INT 62
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL 45778 0 2
1908: PUSH
1909: LD_INT 68
1911: PPUSH
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 45778 0 2
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 1
1939: GREATEREQUAL
1940: IFFALSE 1952
// mpDepots := startPos ;
1942: LD_ADDR_EXP 14
1946: PUSH
1947: LD_VAR 0 8
1951: ST_TO_ADDR
// if baseLevel >= 2 then
1952: LD_VAR 0 7
1956: PUSH
1957: LD_INT 2
1959: GREATEREQUAL
1960: IFFALSE 2377
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 2 ) ] ] ;
1962: LD_ADDR_EXP 17
1966: PUSH
1967: LD_INT 31
1969: PUSH
1970: LD_INT 28
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL 45945 0 2
1980: ADD
1981: PUSH
1982: LD_INT 31
1984: PUSH
1985: LD_INT 29
1987: PPUSH
1988: LD_INT 5
1990: PPUSH
1991: CALL 45945 0 2
1995: ADD
1996: PUSH
1997: LD_INT 4
1999: PUSH
2000: LD_INT 27
2002: PPUSH
2003: LD_INT 5
2005: PPUSH
2006: CALL 45945 0 2
2010: ADD
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 31
2019: PUSH
2020: LD_INT 34
2022: PPUSH
2023: LD_INT 5
2025: PPUSH
2026: CALL 45945 0 2
2030: ADD
2031: PUSH
2032: LD_INT 31
2034: PUSH
2035: LD_INT 35
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL 45945 0 2
2045: ADD
2046: PUSH
2047: LD_INT 4
2049: PUSH
2050: LD_INT 33
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 45945 0 2
2060: ADD
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 31
2069: PUSH
2070: LD_INT 40
2072: PPUSH
2073: LD_INT 4
2075: PPUSH
2076: CALL 45945 0 2
2080: ADD
2081: PUSH
2082: LD_INT 31
2084: PUSH
2085: LD_INT 41
2087: PPUSH
2088: LD_INT 0
2090: PPUSH
2091: CALL 45945 0 2
2095: ADD
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: LD_INT 39
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL 45945 0 2
2110: ADD
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 31
2119: PUSH
2120: LD_INT 46
2122: PPUSH
2123: LD_INT 5
2125: PPUSH
2126: CALL 45945 0 2
2130: ADD
2131: PUSH
2132: LD_INT 31
2134: PUSH
2135: LD_INT 47
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 45945 0 2
2145: ADD
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: LD_INT 45
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL 45945 0 2
2160: ADD
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 31
2169: PUSH
2170: LD_INT 52
2172: PPUSH
2173: LD_INT 2
2175: PPUSH
2176: CALL 45945 0 2
2180: ADD
2181: PUSH
2182: LD_INT 31
2184: PUSH
2185: LD_INT 53
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: CALL 45945 0 2
2195: ADD
2196: PUSH
2197: LD_INT 4
2199: PUSH
2200: LD_INT 51
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: CALL 45945 0 2
2210: ADD
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 31
2219: PUSH
2220: LD_INT 58
2222: PPUSH
2223: LD_INT 2
2225: PPUSH
2226: CALL 45945 0 2
2230: ADD
2231: PUSH
2232: LD_INT 31
2234: PUSH
2235: LD_INT 59
2237: PPUSH
2238: LD_INT 3
2240: PPUSH
2241: CALL 45945 0 2
2245: ADD
2246: PUSH
2247: LD_INT 4
2249: PUSH
2250: LD_INT 57
2252: PPUSH
2253: LD_INT 3
2255: PPUSH
2256: CALL 45945 0 2
2260: ADD
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 31
2269: PUSH
2270: LD_INT 64
2272: PPUSH
2273: LD_INT 2
2275: PPUSH
2276: CALL 45945 0 2
2280: ADD
2281: PUSH
2282: LD_INT 31
2284: PUSH
2285: LD_INT 65
2287: PPUSH
2288: LD_INT 3
2290: PPUSH
2291: CALL 45945 0 2
2295: ADD
2296: PUSH
2297: LD_INT 4
2299: PUSH
2300: LD_INT 63
2302: PPUSH
2303: LD_INT 3
2305: PPUSH
2306: CALL 45945 0 2
2310: ADD
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 31
2319: PUSH
2320: LD_INT 70
2322: PPUSH
2323: LD_INT 3
2325: PPUSH
2326: CALL 45945 0 2
2330: ADD
2331: PUSH
2332: LD_INT 31
2334: PUSH
2335: LD_INT 71
2337: PPUSH
2338: LD_INT 2
2340: PPUSH
2341: CALL 45945 0 2
2345: ADD
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: LD_INT 69
2352: PPUSH
2353: LD_INT 2
2355: PPUSH
2356: CALL 45945 0 2
2360: ADD
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: ST_TO_ADDR
// end ; end ;
2377: LD_VAR 0 2
2381: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2382: GO 2384
2384: DISABLE
2385: LD_INT 0
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
// begin if not mpShipments then
2395: LD_EXP 27
2399: NOT
2400: IFFALSE 2404
// exit ;
2402: GO 2863
// case mpShipments of 1 :
2404: LD_EXP 27
2408: PUSH
2409: LD_INT 1
2411: DOUBLE
2412: EQUAL
2413: IFTRUE 2417
2415: GO 2452
2417: POP
// begin time := 0 0$30 ;
2418: LD_ADDR_VAR 0 5
2422: PUSH
2423: LD_INT 1050
2425: ST_TO_ADDR
// normalTime := 0 0$30 ;
2426: LD_ADDR_VAR 0 6
2430: PUSH
2431: LD_INT 1050
2433: ST_TO_ADDR
// maxTime := 1 1$20 ;
2434: LD_ADDR_VAR 0 8
2438: PUSH
2439: LD_INT 2800
2441: ST_TO_ADDR
// delayTime := 0 0$5 ;
2442: LD_ADDR_VAR 0 7
2446: PUSH
2447: LD_INT 175
2449: ST_TO_ADDR
// end ; 2 :
2450: GO 2582
2452: LD_INT 2
2454: DOUBLE
2455: EQUAL
2456: IFTRUE 2460
2458: GO 2495
2460: POP
// begin time := 0 0$25 ;
2461: LD_ADDR_VAR 0 5
2465: PUSH
2466: LD_INT 875
2468: ST_TO_ADDR
// normalTime := 0 0$25 ;
2469: LD_ADDR_VAR 0 6
2473: PUSH
2474: LD_INT 875
2476: ST_TO_ADDR
// maxTime := 1 1$10 ;
2477: LD_ADDR_VAR 0 8
2481: PUSH
2482: LD_INT 2450
2484: ST_TO_ADDR
// delayTime := 0 0$4 ;
2485: LD_ADDR_VAR 0 7
2489: PUSH
2490: LD_INT 140
2492: ST_TO_ADDR
// end ; 3 :
2493: GO 2582
2495: LD_INT 3
2497: DOUBLE
2498: EQUAL
2499: IFTRUE 2503
2501: GO 2538
2503: POP
// begin time := 0 0$20 ;
2504: LD_ADDR_VAR 0 5
2508: PUSH
2509: LD_INT 700
2511: ST_TO_ADDR
// normalTime := 0 0$20 ;
2512: LD_ADDR_VAR 0 6
2516: PUSH
2517: LD_INT 700
2519: ST_TO_ADDR
// maxTime := 1 1$00 ;
2520: LD_ADDR_VAR 0 8
2524: PUSH
2525: LD_INT 2100
2527: ST_TO_ADDR
// delayTime := 0 0$3 ;
2528: LD_ADDR_VAR 0 7
2532: PUSH
2533: LD_INT 105
2535: ST_TO_ADDR
// end ; 4 :
2536: GO 2582
2538: LD_INT 4
2540: DOUBLE
2541: EQUAL
2542: IFTRUE 2546
2544: GO 2581
2546: POP
// begin time := 0 0$15 ;
2547: LD_ADDR_VAR 0 5
2551: PUSH
2552: LD_INT 525
2554: ST_TO_ADDR
// normalTime := 0 0$15 ;
2555: LD_ADDR_VAR 0 6
2559: PUSH
2560: LD_INT 525
2562: ST_TO_ADDR
// maxTime := 0 0$55 ;
2563: LD_ADDR_VAR 0 8
2567: PUSH
2568: LD_INT 1925
2570: ST_TO_ADDR
// delayTime := 0 0$2 ;
2571: LD_ADDR_VAR 0 7
2575: PUSH
2576: LD_INT 70
2578: ST_TO_ADDR
// end ; end ;
2579: GO 2582
2581: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 , Center3 ] ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_INT 4
2589: PUSH
2590: LD_INT 5
2592: PUSH
2593: LD_INT 6
2595: PUSH
2596: LD_INT 7
2598: PUSH
2599: LD_INT 1
2601: PUSH
2602: LD_INT 2
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2617: LD_ADDR_VAR 0 3
2621: PUSH
2622: LD_INT 8
2624: PUSH
2625: LD_INT 9
2627: PUSH
2628: LD_INT 10
2630: PUSH
2631: LD_INT 11
2633: PUSH
2634: LD_INT 12
2636: PUSH
2637: LD_INT 13
2639: PUSH
2640: LD_INT 14
2642: PUSH
2643: LD_INT 15
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: ST_TO_ADDR
// for i := 1 to 8 do
2656: LD_ADDR_VAR 0 1
2660: PUSH
2661: DOUBLE
2662: LD_INT 1
2664: DEC
2665: ST_TO_ADDR
2666: LD_INT 8
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2717
// begin if not mpSidePositions [ i ] then
2672: LD_EXP 7
2676: PUSH
2677: LD_VAR 0 1
2681: ARRAY
2682: NOT
2683: IFFALSE 2687
// continue ;
2685: GO 2669
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2687: LD_ADDR_VAR 0 4
2691: PUSH
2692: LD_VAR 0 4
2696: PUSH
2697: LD_VAR 0 3
2701: PUSH
2702: LD_EXP 7
2706: PUSH
2707: LD_VAR 0 1
2711: ARRAY
2712: ARRAY
2713: ADD
2714: ST_TO_ADDR
// end ;
2715: GO 2669
2717: POP
2718: POP
// x := 1 ;
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// repeat wait ( time ) ;
2727: LD_VAR 0 5
2731: PPUSH
2732: CALL_OW 67
// x := Inc ( x ) ;
2736: LD_ADDR_VAR 0 2
2740: PUSH
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL 42599 0 1
2750: ST_TO_ADDR
// if x > 5 then
2751: LD_VAR 0 2
2755: PUSH
2756: LD_INT 5
2758: GREATER
2759: IFFALSE 2769
// x := 1 ;
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: LD_INT 1
2768: ST_TO_ADDR
// for i in areas do
2769: LD_ADDR_VAR 0 1
2773: PUSH
2774: LD_VAR 0 4
2778: PUSH
2779: FOR_IN
2780: IFFALSE 2819
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2782: LD_VAR 0 1
2786: PPUSH
2787: LD_INT 1
2789: PPUSH
2790: CALL_OW 287
2794: PUSH
2795: LD_INT 30
2797: LESS
2798: IFFALSE 2817
// begin CreateCratesArea ( x , i , true ) ;
2800: LD_VAR 0 2
2804: PPUSH
2805: LD_VAR 0 1
2809: PPUSH
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 55
// end ; end ;
2817: GO 2779
2819: POP
2820: POP
// time := time + delayTime ;
2821: LD_ADDR_VAR 0 5
2825: PUSH
2826: LD_VAR 0 5
2830: PUSH
2831: LD_VAR 0 7
2835: PLUS
2836: ST_TO_ADDR
// if time > maxTime then
2837: LD_VAR 0 5
2841: PUSH
2842: LD_VAR 0 8
2846: GREATER
2847: IFFALSE 2859
// time := normalTime ;
2849: LD_ADDR_VAR 0 5
2853: PUSH
2854: LD_VAR 0 6
2858: ST_TO_ADDR
// until false ;
2859: LD_INT 0
2861: IFFALSE 2727
// end ; end_of_file
2863: PPOPN 8
2865: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2866: LD_VAR 0 1
2870: PPUSH
2871: CALL 56960 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 52126 0 1
// end ;
2884: PPOPN 1
2886: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: CALL 56977 0 1
// end ;
2896: PPOPN 1
2898: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2899: LD_VAR 0 1
2903: PPUSH
2904: CALL 53179 0 1
2908: PPOPN 1
2910: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2911: LD_VAR 0 1
2915: PPUSH
2916: LD_VAR 0 2
2920: PPUSH
2921: CALL 57018 0 2
2925: PPOPN 2
2927: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2928: LD_VAR 0 1
2932: PPUSH
2933: LD_VAR 0 2
2937: PPUSH
2938: CALL 52932 0 2
2942: PPOPN 2
2944: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2945: LD_VAR 0 1
2949: PPUSH
2950: LD_VAR 0 2
2954: PPUSH
2955: LD_VAR 0 3
2959: PPUSH
2960: CALL 53232 0 3
2964: PPOPN 3
2966: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2967: LD_VAR 0 1
2971: PPUSH
2972: LD_VAR 0 2
2976: PPUSH
2977: LD_VAR 0 3
2981: PPUSH
2982: LD_VAR 0 4
2986: PPUSH
2987: LD_VAR 0 5
2991: PPUSH
2992: CALL 53916 0 5
2996: PPOPN 5
2998: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2999: LD_VAR 0 1
3003: PPUSH
3004: LD_VAR 0 2
3008: PPUSH
3009: LD_VAR 0 3
3013: PPUSH
3014: LD_VAR 0 4
3018: PPUSH
3019: CALL 54019 0 4
3023: PPOPN 4
3025: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3026: LD_INT 0
3028: PPUSH
3029: PPUSH
// if exist_mode then
3030: LD_VAR 0 2
3034: IFFALSE 3080
// begin unit := CreateCharacter ( prefix & ident ) ;
3036: LD_ADDR_VAR 0 5
3040: PUSH
3041: LD_VAR 0 3
3045: PUSH
3046: LD_VAR 0 1
3050: STR
3051: PPUSH
3052: CALL_OW 34
3056: ST_TO_ADDR
// if unit then
3057: LD_VAR 0 5
3061: IFFALSE 3078
// DeleteCharacters ( prefix & ident ) ;
3063: LD_VAR 0 3
3067: PUSH
3068: LD_VAR 0 1
3072: STR
3073: PPUSH
3074: CALL_OW 40
// end else
3078: GO 3095
// unit := NewCharacter ( ident ) ;
3080: LD_ADDR_VAR 0 5
3084: PUSH
3085: LD_VAR 0 1
3089: PPUSH
3090: CALL_OW 25
3094: ST_TO_ADDR
// result := unit ;
3095: LD_ADDR_VAR 0 4
3099: PUSH
3100: LD_VAR 0 5
3104: ST_TO_ADDR
// end ;
3105: LD_VAR 0 4
3109: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3110: LD_INT 0
3112: PPUSH
3113: PPUSH
// if exist_mode then
3114: LD_VAR 0 2
3118: IFFALSE 3143
// unit := CreateCharacter ( prefix & ident ) else
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_VAR 0 3
3129: PUSH
3130: LD_VAR 0 1
3134: STR
3135: PPUSH
3136: CALL_OW 34
3140: ST_TO_ADDR
3141: GO 3158
// unit := NewCharacter ( ident ) ;
3143: LD_ADDR_VAR 0 5
3147: PUSH
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 25
3157: ST_TO_ADDR
// result := unit ;
3158: LD_ADDR_VAR 0 4
3162: PUSH
3163: LD_VAR 0 5
3167: ST_TO_ADDR
// end ;
3168: LD_VAR 0 4
3172: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3173: LD_INT 0
3175: PPUSH
3176: PPUSH
// if not side or not nation then
3177: LD_VAR 0 1
3181: NOT
3182: IFTRUE 3191
3184: PUSH
3185: LD_VAR 0 2
3189: NOT
3190: OR
3191: IFFALSE 3195
// exit ;
3193: GO 3989
// case nation of nation_american :
3195: LD_VAR 0 2
3199: PUSH
3200: LD_INT 1
3202: DOUBLE
3203: EQUAL
3204: IFTRUE 3208
3206: GO 3430
3208: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3209: LD_ADDR_VAR 0 4
3213: PUSH
3214: LD_INT 35
3216: PUSH
3217: LD_INT 45
3219: PUSH
3220: LD_INT 46
3222: PUSH
3223: LD_INT 47
3225: PUSH
3226: LD_INT 82
3228: PUSH
3229: LD_INT 83
3231: PUSH
3232: LD_INT 84
3234: PUSH
3235: LD_INT 85
3237: PUSH
3238: LD_INT 86
3240: PUSH
3241: LD_INT 1
3243: PUSH
3244: LD_INT 2
3246: PUSH
3247: LD_INT 6
3249: PUSH
3250: LD_INT 15
3252: PUSH
3253: LD_INT 16
3255: PUSH
3256: LD_INT 7
3258: PUSH
3259: LD_INT 12
3261: PUSH
3262: LD_INT 13
3264: PUSH
3265: LD_INT 10
3267: PUSH
3268: LD_INT 14
3270: PUSH
3271: LD_INT 20
3273: PUSH
3274: LD_INT 21
3276: PUSH
3277: LD_INT 22
3279: PUSH
3280: LD_INT 25
3282: PUSH
3283: LD_INT 32
3285: PUSH
3286: LD_INT 27
3288: PUSH
3289: LD_INT 36
3291: PUSH
3292: LD_INT 69
3294: PUSH
3295: LD_INT 39
3297: PUSH
3298: LD_INT 34
3300: PUSH
3301: LD_INT 40
3303: PUSH
3304: LD_INT 48
3306: PUSH
3307: LD_INT 49
3309: PUSH
3310: LD_INT 50
3312: PUSH
3313: LD_INT 51
3315: PUSH
3316: LD_INT 52
3318: PUSH
3319: LD_INT 53
3321: PUSH
3322: LD_INT 54
3324: PUSH
3325: LD_INT 55
3327: PUSH
3328: LD_INT 56
3330: PUSH
3331: LD_INT 57
3333: PUSH
3334: LD_INT 58
3336: PUSH
3337: LD_INT 59
3339: PUSH
3340: LD_INT 60
3342: PUSH
3343: LD_INT 61
3345: PUSH
3346: LD_INT 62
3348: PUSH
3349: LD_INT 80
3351: PUSH
3352: LD_INT 82
3354: PUSH
3355: LD_INT 83
3357: PUSH
3358: LD_INT 84
3360: PUSH
3361: LD_INT 85
3363: PUSH
3364: LD_INT 86
3366: PUSH
3367: LD_INT 90
3369: PUSH
3370: LD_INT 93
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: ST_TO_ADDR
3428: GO 3911
3430: LD_INT 2
3432: DOUBLE
3433: EQUAL
3434: IFTRUE 3438
3436: GO 3672
3438: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3439: LD_ADDR_VAR 0 4
3443: PUSH
3444: LD_INT 35
3446: PUSH
3447: LD_INT 45
3449: PUSH
3450: LD_INT 46
3452: PUSH
3453: LD_INT 47
3455: PUSH
3456: LD_INT 82
3458: PUSH
3459: LD_INT 83
3461: PUSH
3462: LD_INT 84
3464: PUSH
3465: LD_INT 85
3467: PUSH
3468: LD_INT 87
3470: PUSH
3471: LD_INT 70
3473: PUSH
3474: LD_INT 1
3476: PUSH
3477: LD_INT 11
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: LD_INT 4
3485: PUSH
3486: LD_INT 5
3488: PUSH
3489: LD_INT 6
3491: PUSH
3492: LD_INT 15
3494: PUSH
3495: LD_INT 18
3497: PUSH
3498: LD_INT 7
3500: PUSH
3501: LD_INT 17
3503: PUSH
3504: LD_INT 8
3506: PUSH
3507: LD_INT 20
3509: PUSH
3510: LD_INT 21
3512: PUSH
3513: LD_INT 22
3515: PUSH
3516: LD_INT 72
3518: PUSH
3519: LD_INT 26
3521: PUSH
3522: LD_INT 69
3524: PUSH
3525: LD_INT 39
3527: PUSH
3528: LD_INT 40
3530: PUSH
3531: LD_INT 41
3533: PUSH
3534: LD_INT 42
3536: PUSH
3537: LD_INT 43
3539: PUSH
3540: LD_INT 48
3542: PUSH
3543: LD_INT 49
3545: PUSH
3546: LD_INT 50
3548: PUSH
3549: LD_INT 51
3551: PUSH
3552: LD_INT 52
3554: PUSH
3555: LD_INT 53
3557: PUSH
3558: LD_INT 54
3560: PUSH
3561: LD_INT 55
3563: PUSH
3564: LD_INT 56
3566: PUSH
3567: LD_INT 60
3569: PUSH
3570: LD_INT 61
3572: PUSH
3573: LD_INT 62
3575: PUSH
3576: LD_INT 66
3578: PUSH
3579: LD_INT 67
3581: PUSH
3582: LD_INT 68
3584: PUSH
3585: LD_INT 81
3587: PUSH
3588: LD_INT 82
3590: PUSH
3591: LD_INT 83
3593: PUSH
3594: LD_INT 84
3596: PUSH
3597: LD_INT 85
3599: PUSH
3600: LD_INT 87
3602: PUSH
3603: LD_INT 88
3605: PUSH
3606: LD_INT 92
3608: PUSH
3609: LD_INT 94
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: ST_TO_ADDR
3670: GO 3911
3672: LD_INT 3
3674: DOUBLE
3675: EQUAL
3676: IFTRUE 3680
3678: GO 3910
3680: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3681: LD_ADDR_VAR 0 4
3685: PUSH
3686: LD_INT 46
3688: PUSH
3689: LD_INT 47
3691: PUSH
3692: LD_INT 1
3694: PUSH
3695: LD_INT 2
3697: PUSH
3698: LD_INT 82
3700: PUSH
3701: LD_INT 83
3703: PUSH
3704: LD_INT 84
3706: PUSH
3707: LD_INT 85
3709: PUSH
3710: LD_INT 86
3712: PUSH
3713: LD_INT 11
3715: PUSH
3716: LD_INT 9
3718: PUSH
3719: LD_INT 20
3721: PUSH
3722: LD_INT 19
3724: PUSH
3725: LD_INT 21
3727: PUSH
3728: LD_INT 24
3730: PUSH
3731: LD_INT 22
3733: PUSH
3734: LD_INT 25
3736: PUSH
3737: LD_INT 28
3739: PUSH
3740: LD_INT 29
3742: PUSH
3743: LD_INT 30
3745: PUSH
3746: LD_INT 31
3748: PUSH
3749: LD_INT 37
3751: PUSH
3752: LD_INT 38
3754: PUSH
3755: LD_INT 32
3757: PUSH
3758: LD_INT 27
3760: PUSH
3761: LD_INT 33
3763: PUSH
3764: LD_INT 69
3766: PUSH
3767: LD_INT 39
3769: PUSH
3770: LD_INT 34
3772: PUSH
3773: LD_INT 40
3775: PUSH
3776: LD_INT 71
3778: PUSH
3779: LD_INT 23
3781: PUSH
3782: LD_INT 44
3784: PUSH
3785: LD_INT 48
3787: PUSH
3788: LD_INT 49
3790: PUSH
3791: LD_INT 50
3793: PUSH
3794: LD_INT 51
3796: PUSH
3797: LD_INT 52
3799: PUSH
3800: LD_INT 53
3802: PUSH
3803: LD_INT 54
3805: PUSH
3806: LD_INT 55
3808: PUSH
3809: LD_INT 56
3811: PUSH
3812: LD_INT 57
3814: PUSH
3815: LD_INT 58
3817: PUSH
3818: LD_INT 59
3820: PUSH
3821: LD_INT 63
3823: PUSH
3824: LD_INT 64
3826: PUSH
3827: LD_INT 65
3829: PUSH
3830: LD_INT 82
3832: PUSH
3833: LD_INT 83
3835: PUSH
3836: LD_INT 84
3838: PUSH
3839: LD_INT 85
3841: PUSH
3842: LD_INT 86
3844: PUSH
3845: LD_INT 89
3847: PUSH
3848: LD_INT 91
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: ST_TO_ADDR
3908: GO 3911
3910: POP
// if state > - 1 and state < 3 then
3911: LD_VAR 0 3
3915: PUSH
3916: LD_INT 1
3918: NEG
3919: GREATER
3920: IFFALSE 3932
3922: PUSH
3923: LD_VAR 0 3
3927: PUSH
3928: LD_INT 3
3930: LESS
3931: AND
3932: IFFALSE 3989
// for i in result do
3934: LD_ADDR_VAR 0 5
3938: PUSH
3939: LD_VAR 0 4
3943: PUSH
3944: FOR_IN
3945: IFFALSE 3987
// if GetTech ( i , side ) <> state then
3947: LD_VAR 0 5
3951: PPUSH
3952: LD_VAR 0 1
3956: PPUSH
3957: CALL_OW 321
3961: PUSH
3962: LD_VAR 0 3
3966: NONEQUAL
3967: IFFALSE 3985
// result := result diff i ;
3969: LD_ADDR_VAR 0 4
3973: PUSH
3974: LD_VAR 0 4
3978: PUSH
3979: LD_VAR 0 5
3983: DIFF
3984: ST_TO_ADDR
3985: GO 3944
3987: POP
3988: POP
// end ;
3989: LD_VAR 0 4
3993: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3994: LD_INT 0
3996: PPUSH
3997: PPUSH
3998: PPUSH
// result := true ;
3999: LD_ADDR_VAR 0 3
4003: PUSH
4004: LD_INT 1
4006: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4007: LD_ADDR_VAR 0 5
4011: PUSH
4012: LD_VAR 0 2
4016: PPUSH
4017: CALL_OW 480
4021: ST_TO_ADDR
// if not tmp then
4022: LD_VAR 0 5
4026: NOT
4027: IFFALSE 4031
// exit ;
4029: GO 4080
// for i in tmp do
4031: LD_ADDR_VAR 0 4
4035: PUSH
4036: LD_VAR 0 5
4040: PUSH
4041: FOR_IN
4042: IFFALSE 4078
// if GetTech ( i , side ) <> state_researched then
4044: LD_VAR 0 4
4048: PPUSH
4049: LD_VAR 0 1
4053: PPUSH
4054: CALL_OW 321
4058: PUSH
4059: LD_INT 2
4061: NONEQUAL
4062: IFFALSE 4076
// begin result := false ;
4064: LD_ADDR_VAR 0 3
4068: PUSH
4069: LD_INT 0
4071: ST_TO_ADDR
// exit ;
4072: POP
4073: POP
4074: GO 4080
// end ;
4076: GO 4041
4078: POP
4079: POP
// end ;
4080: LD_VAR 0 3
4084: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4085: LD_INT 0
4087: PPUSH
4088: PPUSH
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
4093: PPUSH
4094: PPUSH
4095: PPUSH
4096: PPUSH
4097: PPUSH
4098: PPUSH
4099: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4100: LD_VAR 0 1
4104: NOT
4105: IFTRUE 4122
4107: PUSH
4108: LD_VAR 0 1
4112: PPUSH
4113: CALL_OW 257
4117: PUSH
4118: LD_INT 9
4120: NONEQUAL
4121: OR
4122: IFFALSE 4126
// exit ;
4124: GO 4705
// side := GetSide ( unit ) ;
4126: LD_ADDR_VAR 0 9
4130: PUSH
4131: LD_VAR 0 1
4135: PPUSH
4136: CALL_OW 255
4140: ST_TO_ADDR
// tech_space := tech_spacanom ;
4141: LD_ADDR_VAR 0 12
4145: PUSH
4146: LD_INT 29
4148: ST_TO_ADDR
// tech_time := tech_taurad ;
4149: LD_ADDR_VAR 0 13
4153: PUSH
4154: LD_INT 28
4156: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4157: LD_ADDR_VAR 0 11
4161: PUSH
4162: LD_VAR 0 1
4166: PPUSH
4167: CALL_OW 310
4171: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4172: LD_VAR 0 11
4176: PPUSH
4177: CALL_OW 247
4181: PUSH
4182: LD_INT 2
4184: EQUAL
4185: IFFALSE 4189
// exit ;
4187: GO 4705
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4189: LD_ADDR_VAR 0 8
4193: PUSH
4194: LD_INT 81
4196: PUSH
4197: LD_VAR 0 9
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 3
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 3
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PPUSH
4227: CALL_OW 69
4231: ST_TO_ADDR
// if not tmp then
4232: LD_VAR 0 8
4236: NOT
4237: IFFALSE 4241
// exit ;
4239: GO 4705
// if in_unit then
4241: LD_VAR 0 11
4245: IFFALSE 4269
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4247: LD_ADDR_VAR 0 10
4251: PUSH
4252: LD_VAR 0 8
4256: PPUSH
4257: LD_VAR 0 11
4261: PPUSH
4262: CALL_OW 74
4266: ST_TO_ADDR
4267: GO 4289
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4269: LD_ADDR_VAR 0 10
4273: PUSH
4274: LD_VAR 0 8
4278: PPUSH
4279: LD_VAR 0 1
4283: PPUSH
4284: CALL_OW 74
4288: ST_TO_ADDR
// if not enemy then
4289: LD_VAR 0 10
4293: NOT
4294: IFFALSE 4298
// exit ;
4296: GO 4705
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4298: LD_VAR 0 11
4302: IFFALSE 4324
4304: PUSH
4305: LD_VAR 0 11
4309: PPUSH
4310: LD_VAR 0 10
4314: PPUSH
4315: CALL_OW 296
4319: PUSH
4320: LD_INT 13
4322: GREATER
4323: AND
4324: IFTRUE 4346
4326: PUSH
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_VAR 0 10
4336: PPUSH
4337: CALL_OW 296
4341: PUSH
4342: LD_INT 12
4344: GREATER
4345: OR
4346: IFFALSE 4350
// exit ;
4348: GO 4705
// missile := [ 1 ] ;
4350: LD_ADDR_VAR 0 14
4354: PUSH
4355: LD_INT 1
4357: PUSH
4358: EMPTY
4359: LIST
4360: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4361: LD_VAR 0 9
4365: PPUSH
4366: LD_VAR 0 12
4370: PPUSH
4371: CALL_OW 325
4375: IFFALSE 4404
// missile := Replace ( missile , missile + 1 , 2 ) ;
4377: LD_ADDR_VAR 0 14
4381: PUSH
4382: LD_VAR 0 14
4386: PPUSH
4387: LD_VAR 0 14
4391: PUSH
4392: LD_INT 1
4394: PLUS
4395: PPUSH
4396: LD_INT 2
4398: PPUSH
4399: CALL_OW 1
4403: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4404: LD_VAR 0 9
4408: PPUSH
4409: LD_VAR 0 13
4413: PPUSH
4414: CALL_OW 325
4418: IFFALSE 4442
4420: PUSH
4421: LD_VAR 0 10
4425: PPUSH
4426: CALL_OW 255
4430: PPUSH
4431: LD_VAR 0 13
4435: PPUSH
4436: CALL_OW 325
4440: NOT
4441: AND
4442: IFFALSE 4471
// missile := Replace ( missile , missile + 1 , 3 ) ;
4444: LD_ADDR_VAR 0 14
4448: PUSH
4449: LD_VAR 0 14
4453: PPUSH
4454: LD_VAR 0 14
4458: PUSH
4459: LD_INT 1
4461: PLUS
4462: PPUSH
4463: LD_INT 3
4465: PPUSH
4466: CALL_OW 1
4470: ST_TO_ADDR
// if missile < 2 then
4471: LD_VAR 0 14
4475: PUSH
4476: LD_INT 2
4478: LESS
4479: IFFALSE 4483
// exit ;
4481: GO 4705
// x := GetX ( enemy ) ;
4483: LD_ADDR_VAR 0 4
4487: PUSH
4488: LD_VAR 0 10
4492: PPUSH
4493: CALL_OW 250
4497: ST_TO_ADDR
// y := GetY ( enemy ) ;
4498: LD_ADDR_VAR 0 5
4502: PUSH
4503: LD_VAR 0 10
4507: PPUSH
4508: CALL_OW 251
4512: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4513: LD_ADDR_VAR 0 6
4517: PUSH
4518: LD_VAR 0 4
4522: PUSH
4523: LD_INT 1
4525: NEG
4526: PPUSH
4527: LD_INT 1
4529: PPUSH
4530: CALL_OW 12
4534: PLUS
4535: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4536: LD_ADDR_VAR 0 7
4540: PUSH
4541: LD_VAR 0 5
4545: PUSH
4546: LD_INT 1
4548: NEG
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: CALL_OW 12
4557: PLUS
4558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4559: LD_VAR 0 6
4563: PPUSH
4564: LD_VAR 0 7
4568: PPUSH
4569: CALL_OW 488
4573: NOT
4574: IFFALSE 4596
// begin _x := x ;
4576: LD_ADDR_VAR 0 6
4580: PUSH
4581: LD_VAR 0 4
4585: ST_TO_ADDR
// _y := y ;
4586: LD_ADDR_VAR 0 7
4590: PUSH
4591: LD_VAR 0 5
4595: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4596: LD_ADDR_VAR 0 3
4600: PUSH
4601: LD_INT 1
4603: PPUSH
4604: LD_VAR 0 14
4608: PPUSH
4609: CALL_OW 12
4613: ST_TO_ADDR
// case i of 1 :
4614: LD_VAR 0 3
4618: PUSH
4619: LD_INT 1
4621: DOUBLE
4622: EQUAL
4623: IFTRUE 4627
4625: GO 4644
4627: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4628: LD_VAR 0 1
4632: PPUSH
4633: LD_VAR 0 10
4637: PPUSH
4638: CALL_OW 115
4642: GO 4705
4644: LD_INT 2
4646: DOUBLE
4647: EQUAL
4648: IFTRUE 4652
4650: GO 4674
4652: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4653: LD_VAR 0 1
4657: PPUSH
4658: LD_VAR 0 6
4662: PPUSH
4663: LD_VAR 0 7
4667: PPUSH
4668: CALL_OW 153
4672: GO 4705
4674: LD_INT 3
4676: DOUBLE
4677: EQUAL
4678: IFTRUE 4682
4680: GO 4704
4682: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_VAR 0 6
4692: PPUSH
4693: LD_VAR 0 7
4697: PPUSH
4698: CALL_OW 154
4702: GO 4705
4704: POP
// end ;
4705: LD_VAR 0 2
4709: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4710: LD_INT 0
4712: PPUSH
4713: PPUSH
4714: PPUSH
4715: PPUSH
4716: PPUSH
4717: PPUSH
// if not unit or not building then
4718: LD_VAR 0 1
4722: NOT
4723: IFTRUE 4732
4725: PUSH
4726: LD_VAR 0 2
4730: NOT
4731: OR
4732: IFFALSE 4736
// exit ;
4734: GO 4894
// x := GetX ( building ) ;
4736: LD_ADDR_VAR 0 5
4740: PUSH
4741: LD_VAR 0 2
4745: PPUSH
4746: CALL_OW 250
4750: ST_TO_ADDR
// y := GetY ( building ) ;
4751: LD_ADDR_VAR 0 6
4755: PUSH
4756: LD_VAR 0 2
4760: PPUSH
4761: CALL_OW 251
4765: ST_TO_ADDR
// for i := 0 to 5 do
4766: LD_ADDR_VAR 0 4
4770: PUSH
4771: DOUBLE
4772: LD_INT 0
4774: DEC
4775: ST_TO_ADDR
4776: LD_INT 5
4778: PUSH
4779: FOR_TO
4780: IFFALSE 4892
// begin _x := ShiftX ( x , i , 3 ) ;
4782: LD_ADDR_VAR 0 7
4786: PUSH
4787: LD_VAR 0 5
4791: PPUSH
4792: LD_VAR 0 4
4796: PPUSH
4797: LD_INT 3
4799: PPUSH
4800: CALL_OW 272
4804: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4805: LD_ADDR_VAR 0 8
4809: PUSH
4810: LD_VAR 0 6
4814: PPUSH
4815: LD_VAR 0 4
4819: PPUSH
4820: LD_INT 3
4822: PPUSH
4823: CALL_OW 273
4827: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4828: LD_VAR 0 7
4832: PPUSH
4833: LD_VAR 0 8
4837: PPUSH
4838: CALL_OW 488
4842: NOT
4843: IFFALSE 4847
// continue ;
4845: GO 4779
// if HexInfo ( _x , _y ) = 0 then
4847: LD_VAR 0 7
4851: PPUSH
4852: LD_VAR 0 8
4856: PPUSH
4857: CALL_OW 428
4861: PUSH
4862: LD_INT 0
4864: EQUAL
4865: IFFALSE 4890
// begin ComMoveXY ( unit , _x , _y ) ;
4867: LD_VAR 0 1
4871: PPUSH
4872: LD_VAR 0 7
4876: PPUSH
4877: LD_VAR 0 8
4881: PPUSH
4882: CALL_OW 111
// exit ;
4886: POP
4887: POP
4888: GO 4894
// end ; end ;
4890: GO 4779
4892: POP
4893: POP
// end ;
4894: LD_VAR 0 3
4898: RET
// export function ScanBase ( side , base_area ) ; begin
4899: LD_INT 0
4901: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4902: LD_ADDR_VAR 0 3
4906: PUSH
4907: LD_VAR 0 2
4911: PPUSH
4912: LD_INT 81
4914: PUSH
4915: LD_VAR 0 1
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 70
4928: ST_TO_ADDR
// end ;
4929: LD_VAR 0 3
4933: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
4939: PPUSH
// result := false ;
4940: LD_ADDR_VAR 0 2
4944: PUSH
4945: LD_INT 0
4947: ST_TO_ADDR
// side := GetSide ( unit ) ;
4948: LD_ADDR_VAR 0 3
4952: PUSH
4953: LD_VAR 0 1
4957: PPUSH
4958: CALL_OW 255
4962: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4963: LD_ADDR_VAR 0 4
4967: PUSH
4968: LD_VAR 0 1
4972: PPUSH
4973: CALL_OW 248
4977: ST_TO_ADDR
// case nat of 1 :
4978: LD_VAR 0 4
4982: PUSH
4983: LD_INT 1
4985: DOUBLE
4986: EQUAL
4987: IFTRUE 4991
4989: GO 5002
4991: POP
// tech := tech_lassight ; 2 :
4992: LD_ADDR_VAR 0 5
4996: PUSH
4997: LD_INT 12
4999: ST_TO_ADDR
5000: GO 5041
5002: LD_INT 2
5004: DOUBLE
5005: EQUAL
5006: IFTRUE 5010
5008: GO 5021
5010: POP
// tech := tech_mortar ; 3 :
5011: LD_ADDR_VAR 0 5
5015: PUSH
5016: LD_INT 41
5018: ST_TO_ADDR
5019: GO 5041
5021: LD_INT 3
5023: DOUBLE
5024: EQUAL
5025: IFTRUE 5029
5027: GO 5040
5029: POP
// tech := tech_bazooka ; end ;
5030: LD_ADDR_VAR 0 5
5034: PUSH
5035: LD_INT 44
5037: ST_TO_ADDR
5038: GO 5041
5040: POP
// if Researched ( side , tech ) then
5041: LD_VAR 0 3
5045: PPUSH
5046: LD_VAR 0 5
5050: PPUSH
5051: CALL_OW 325
5055: IFFALSE 5082
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5057: LD_ADDR_VAR 0 2
5061: PUSH
5062: LD_INT 5
5064: PUSH
5065: LD_INT 8
5067: PUSH
5068: LD_INT 9
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: PUSH
5076: LD_VAR 0 4
5080: ARRAY
5081: ST_TO_ADDR
// end ;
5082: LD_VAR 0 2
5086: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5087: LD_INT 0
5089: PPUSH
5090: PPUSH
5091: PPUSH
// if not mines then
5092: LD_VAR 0 2
5096: NOT
5097: IFFALSE 5101
// exit ;
5099: GO 5245
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5101: LD_ADDR_VAR 0 5
5105: PUSH
5106: LD_INT 81
5108: PUSH
5109: LD_VAR 0 1
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 3
5120: PUSH
5121: LD_INT 21
5123: PUSH
5124: LD_INT 3
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PPUSH
5139: CALL_OW 69
5143: ST_TO_ADDR
// for i in mines do
5144: LD_ADDR_VAR 0 4
5148: PUSH
5149: LD_VAR 0 2
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5243
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5157: LD_VAR 0 4
5161: PUSH
5162: LD_INT 1
5164: ARRAY
5165: PPUSH
5166: LD_VAR 0 4
5170: PUSH
5171: LD_INT 2
5173: ARRAY
5174: PPUSH
5175: CALL_OW 458
5179: NOT
5180: IFFALSE 5184
// continue ;
5182: GO 5154
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5184: LD_VAR 0 4
5188: PUSH
5189: LD_INT 1
5191: ARRAY
5192: PPUSH
5193: LD_VAR 0 4
5197: PUSH
5198: LD_INT 2
5200: ARRAY
5201: PPUSH
5202: CALL_OW 428
5206: PUSH
5207: LD_VAR 0 5
5211: IN
5212: IFFALSE 5241
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5214: LD_VAR 0 4
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PPUSH
5223: LD_VAR 0 4
5227: PUSH
5228: LD_INT 2
5230: ARRAY
5231: PPUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 456
// end ;
5241: GO 5154
5243: POP
5244: POP
// end ;
5245: LD_VAR 0 3
5249: RET
// export function Count ( array ) ; begin
5250: LD_INT 0
5252: PPUSH
// result := array + 0 ;
5253: LD_ADDR_VAR 0 2
5257: PUSH
5258: LD_VAR 0 1
5262: PUSH
5263: LD_INT 0
5265: PLUS
5266: ST_TO_ADDR
// end ;
5267: LD_VAR 0 2
5271: RET
// export function IsEmpty ( building ) ; begin
5272: LD_INT 0
5274: PPUSH
// if not building then
5275: LD_VAR 0 1
5279: NOT
5280: IFFALSE 5284
// exit ;
5282: GO 5327
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5284: LD_ADDR_VAR 0 2
5288: PUSH
5289: LD_VAR 0 1
5293: PUSH
5294: LD_INT 22
5296: PUSH
5297: LD_VAR 0 1
5301: PPUSH
5302: CALL_OW 255
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PUSH
5311: LD_INT 58
5313: PUSH
5314: EMPTY
5315: LIST
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 69
5325: IN
5326: ST_TO_ADDR
// end ;
5327: LD_VAR 0 2
5331: RET
// export function IsNotFull ( building ) ; var places ; begin
5332: LD_INT 0
5334: PPUSH
5335: PPUSH
// if not building then
5336: LD_VAR 0 1
5340: NOT
5341: IFFALSE 5345
// exit ;
5343: GO 5373
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_VAR 0 1
5354: PPUSH
5355: LD_INT 3
5357: PUSH
5358: LD_INT 62
5360: PUSH
5361: EMPTY
5362: LIST
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PPUSH
5368: CALL_OW 72
5372: ST_TO_ADDR
// end ;
5373: LD_VAR 0 2
5377: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5378: LD_INT 0
5380: PPUSH
5381: PPUSH
5382: PPUSH
5383: PPUSH
// tmp := [ ] ;
5384: LD_ADDR_VAR 0 3
5388: PUSH
5389: EMPTY
5390: ST_TO_ADDR
// list := [ ] ;
5391: LD_ADDR_VAR 0 5
5395: PUSH
5396: EMPTY
5397: ST_TO_ADDR
// for i = 16 to 25 do
5398: LD_ADDR_VAR 0 4
5402: PUSH
5403: DOUBLE
5404: LD_INT 16
5406: DEC
5407: ST_TO_ADDR
5408: LD_INT 25
5410: PUSH
5411: FOR_TO
5412: IFFALSE 5485
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5414: LD_ADDR_VAR 0 3
5418: PUSH
5419: LD_VAR 0 3
5423: PUSH
5424: LD_INT 22
5426: PUSH
5427: LD_VAR 0 1
5431: PPUSH
5432: CALL_OW 255
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PUSH
5441: LD_INT 91
5443: PUSH
5444: LD_VAR 0 1
5448: PUSH
5449: LD_INT 6
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: PUSH
5457: LD_INT 30
5459: PUSH
5460: LD_VAR 0 4
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: LIST
5473: PUSH
5474: EMPTY
5475: LIST
5476: PPUSH
5477: CALL_OW 69
5481: ADD
5482: ST_TO_ADDR
5483: GO 5411
5485: POP
5486: POP
// for i = 1 to tmp do
5487: LD_ADDR_VAR 0 4
5491: PUSH
5492: DOUBLE
5493: LD_INT 1
5495: DEC
5496: ST_TO_ADDR
5497: LD_VAR 0 3
5501: PUSH
5502: FOR_TO
5503: IFFALSE 5591
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5505: LD_ADDR_VAR 0 5
5509: PUSH
5510: LD_VAR 0 5
5514: PUSH
5515: LD_VAR 0 3
5519: PUSH
5520: LD_VAR 0 4
5524: ARRAY
5525: PPUSH
5526: CALL_OW 266
5530: PUSH
5531: LD_VAR 0 3
5535: PUSH
5536: LD_VAR 0 4
5540: ARRAY
5541: PPUSH
5542: CALL_OW 250
5546: PUSH
5547: LD_VAR 0 3
5551: PUSH
5552: LD_VAR 0 4
5556: ARRAY
5557: PPUSH
5558: CALL_OW 251
5562: PUSH
5563: LD_VAR 0 3
5567: PUSH
5568: LD_VAR 0 4
5572: ARRAY
5573: PPUSH
5574: CALL_OW 254
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: ADD
5588: ST_TO_ADDR
5589: GO 5502
5591: POP
5592: POP
// result := list ;
5593: LD_ADDR_VAR 0 2
5597: PUSH
5598: LD_VAR 0 5
5602: ST_TO_ADDR
// end ;
5603: LD_VAR 0 2
5607: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5608: LD_INT 0
5610: PPUSH
5611: PPUSH
5612: PPUSH
5613: PPUSH
5614: PPUSH
5615: PPUSH
5616: PPUSH
// if not factory then
5617: LD_VAR 0 1
5621: NOT
5622: IFFALSE 5626
// exit ;
5624: GO 6229
// if control = control_apeman then
5626: LD_VAR 0 4
5630: PUSH
5631: LD_INT 5
5633: EQUAL
5634: IFFALSE 5743
// begin tmp := UnitsInside ( factory ) ;
5636: LD_ADDR_VAR 0 8
5640: PUSH
5641: LD_VAR 0 1
5645: PPUSH
5646: CALL_OW 313
5650: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5651: LD_VAR 0 8
5655: PPUSH
5656: LD_INT 25
5658: PUSH
5659: LD_INT 12
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: PPUSH
5666: CALL_OW 72
5670: NOT
5671: IFFALSE 5681
// control := control_manual ;
5673: LD_ADDR_VAR 0 4
5677: PUSH
5678: LD_INT 1
5680: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5681: LD_ADDR_VAR 0 8
5685: PUSH
5686: LD_VAR 0 1
5690: PPUSH
5691: CALL 5378 0 1
5695: ST_TO_ADDR
// if tmp then
5696: LD_VAR 0 8
5700: IFFALSE 5743
// begin for i in tmp do
5702: LD_ADDR_VAR 0 7
5706: PUSH
5707: LD_VAR 0 8
5711: PUSH
5712: FOR_IN
5713: IFFALSE 5741
// if i [ 1 ] = b_ext_radio then
5715: LD_VAR 0 7
5719: PUSH
5720: LD_INT 1
5722: ARRAY
5723: PUSH
5724: LD_INT 22
5726: EQUAL
5727: IFFALSE 5739
// begin control := control_remote ;
5729: LD_ADDR_VAR 0 4
5733: PUSH
5734: LD_INT 2
5736: ST_TO_ADDR
// break ;
5737: GO 5741
// end ;
5739: GO 5712
5741: POP
5742: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5743: LD_VAR 0 1
5747: PPUSH
5748: LD_VAR 0 2
5752: PPUSH
5753: LD_VAR 0 3
5757: PPUSH
5758: LD_VAR 0 4
5762: PPUSH
5763: LD_VAR 0 5
5767: PPUSH
5768: CALL_OW 448
5772: IFFALSE 5807
// begin result := [ chassis , engine , control , weapon ] ;
5774: LD_ADDR_VAR 0 6
5778: PUSH
5779: LD_VAR 0 2
5783: PUSH
5784: LD_VAR 0 3
5788: PUSH
5789: LD_VAR 0 4
5793: PUSH
5794: LD_VAR 0 5
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: ST_TO_ADDR
// exit ;
5805: GO 6229
// end ; _chassis := AvailableChassisList ( factory ) ;
5807: LD_ADDR_VAR 0 9
5811: PUSH
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 475
5821: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5822: LD_ADDR_VAR 0 11
5826: PUSH
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 476
5836: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5837: LD_ADDR_VAR 0 12
5841: PUSH
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL_OW 477
5851: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5852: LD_ADDR_VAR 0 10
5856: PUSH
5857: LD_VAR 0 1
5861: PPUSH
5862: CALL_OW 478
5866: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5867: LD_VAR 0 9
5871: NOT
5872: IFTRUE 5881
5874: PUSH
5875: LD_VAR 0 11
5879: NOT
5880: OR
5881: IFTRUE 5890
5883: PUSH
5884: LD_VAR 0 12
5888: NOT
5889: OR
5890: IFTRUE 5899
5892: PUSH
5893: LD_VAR 0 10
5897: NOT
5898: OR
5899: IFFALSE 5934
// begin result := [ chassis , engine , control , weapon ] ;
5901: LD_ADDR_VAR 0 6
5905: PUSH
5906: LD_VAR 0 2
5910: PUSH
5911: LD_VAR 0 3
5915: PUSH
5916: LD_VAR 0 4
5920: PUSH
5921: LD_VAR 0 5
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: ST_TO_ADDR
// exit ;
5932: GO 6229
// end ; if not chassis in _chassis then
5934: LD_VAR 0 2
5938: PUSH
5939: LD_VAR 0 9
5943: IN
5944: NOT
5945: IFFALSE 5971
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5947: LD_ADDR_VAR 0 2
5951: PUSH
5952: LD_VAR 0 9
5956: PUSH
5957: LD_INT 1
5959: PPUSH
5960: LD_VAR 0 9
5964: PPUSH
5965: CALL_OW 12
5969: ARRAY
5970: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_VAR 0 3
5980: PPUSH
5981: CALL 6234 0 2
5985: NOT
5986: IFFALSE 6047
// repeat engine := _engine [ 1 ] ;
5988: LD_ADDR_VAR 0 3
5992: PUSH
5993: LD_VAR 0 11
5997: PUSH
5998: LD_INT 1
6000: ARRAY
6001: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6002: LD_ADDR_VAR 0 11
6006: PUSH
6007: LD_VAR 0 11
6011: PPUSH
6012: LD_INT 1
6014: PPUSH
6015: CALL_OW 3
6019: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6020: LD_VAR 0 2
6024: PPUSH
6025: LD_VAR 0 3
6029: PPUSH
6030: CALL 6234 0 2
6034: IFTRUE 6045
6036: PUSH
6037: LD_VAR 0 11
6041: PUSH
6042: EMPTY
6043: EQUAL
6044: OR
6045: IFFALSE 5988
// if not control in _control then
6047: LD_VAR 0 4
6051: PUSH
6052: LD_VAR 0 12
6056: IN
6057: NOT
6058: IFFALSE 6084
// control := _control [ rand ( 1 , _control ) ] ;
6060: LD_ADDR_VAR 0 4
6064: PUSH
6065: LD_VAR 0 12
6069: PUSH
6070: LD_INT 1
6072: PPUSH
6073: LD_VAR 0 12
6077: PPUSH
6078: CALL_OW 12
6082: ARRAY
6083: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6084: LD_VAR 0 2
6088: PPUSH
6089: LD_VAR 0 5
6093: PPUSH
6094: CALL 6456 0 2
6098: NOT
6099: IFFALSE 6160
// repeat weapon := _weapon [ 1 ] ;
6101: LD_ADDR_VAR 0 5
6105: PUSH
6106: LD_VAR 0 10
6110: PUSH
6111: LD_INT 1
6113: ARRAY
6114: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6115: LD_ADDR_VAR 0 10
6119: PUSH
6120: LD_VAR 0 10
6124: PPUSH
6125: LD_INT 1
6127: PPUSH
6128: CALL_OW 3
6132: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6133: LD_VAR 0 2
6137: PPUSH
6138: LD_VAR 0 5
6142: PPUSH
6143: CALL 6456 0 2
6147: IFTRUE 6158
6149: PUSH
6150: LD_VAR 0 10
6154: PUSH
6155: EMPTY
6156: EQUAL
6157: OR
6158: IFFALSE 6101
// result := [ ] ;
6160: LD_ADDR_VAR 0 6
6164: PUSH
6165: EMPTY
6166: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6167: LD_VAR 0 1
6171: PPUSH
6172: LD_VAR 0 2
6176: PPUSH
6177: LD_VAR 0 3
6181: PPUSH
6182: LD_VAR 0 4
6186: PPUSH
6187: LD_VAR 0 5
6191: PPUSH
6192: CALL_OW 448
6196: IFFALSE 6229
// result := [ chassis , engine , control , weapon ] ;
6198: LD_ADDR_VAR 0 6
6202: PUSH
6203: LD_VAR 0 2
6207: PUSH
6208: LD_VAR 0 3
6212: PUSH
6213: LD_VAR 0 4
6217: PUSH
6218: LD_VAR 0 5
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: ST_TO_ADDR
// end ;
6229: LD_VAR 0 6
6233: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6234: LD_INT 0
6236: PPUSH
// if not chassis or not engine then
6237: LD_VAR 0 1
6241: NOT
6242: IFTRUE 6251
6244: PUSH
6245: LD_VAR 0 2
6249: NOT
6250: OR
6251: IFFALSE 6255
// exit ;
6253: GO 6451
// case engine of engine_solar :
6255: LD_VAR 0 2
6259: PUSH
6260: LD_INT 2
6262: DOUBLE
6263: EQUAL
6264: IFTRUE 6268
6266: GO 6306
6268: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6269: LD_ADDR_VAR 0 3
6273: PUSH
6274: LD_INT 11
6276: PUSH
6277: LD_INT 12
6279: PUSH
6280: LD_INT 13
6282: PUSH
6283: LD_INT 14
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: LD_INT 2
6291: PUSH
6292: LD_INT 3
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: ST_TO_ADDR
6304: GO 6435
6306: LD_INT 1
6308: DOUBLE
6309: EQUAL
6310: IFTRUE 6314
6312: GO 6376
6314: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6315: LD_ADDR_VAR 0 3
6319: PUSH
6320: LD_INT 11
6322: PUSH
6323: LD_INT 12
6325: PUSH
6326: LD_INT 13
6328: PUSH
6329: LD_INT 14
6331: PUSH
6332: LD_INT 1
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: LD_INT 3
6340: PUSH
6341: LD_INT 4
6343: PUSH
6344: LD_INT 5
6346: PUSH
6347: LD_INT 21
6349: PUSH
6350: LD_INT 23
6352: PUSH
6353: LD_INT 22
6355: PUSH
6356: LD_INT 24
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: ST_TO_ADDR
6374: GO 6435
6376: LD_INT 3
6378: DOUBLE
6379: EQUAL
6380: IFTRUE 6384
6382: GO 6434
6384: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6385: LD_ADDR_VAR 0 3
6389: PUSH
6390: LD_INT 13
6392: PUSH
6393: LD_INT 14
6395: PUSH
6396: LD_INT 2
6398: PUSH
6399: LD_INT 3
6401: PUSH
6402: LD_INT 4
6404: PUSH
6405: LD_INT 5
6407: PUSH
6408: LD_INT 21
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 23
6416: PUSH
6417: LD_INT 24
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 6435
6434: POP
// result := ( chassis in result ) ;
6435: LD_ADDR_VAR 0 3
6439: PUSH
6440: LD_VAR 0 1
6444: PUSH
6445: LD_VAR 0 3
6449: IN
6450: ST_TO_ADDR
// end ;
6451: LD_VAR 0 3
6455: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6456: LD_INT 0
6458: PPUSH
// if not chassis or not weapon then
6459: LD_VAR 0 1
6463: NOT
6464: IFTRUE 6473
6466: PUSH
6467: LD_VAR 0 2
6471: NOT
6472: OR
6473: IFFALSE 6477
// exit ;
6475: GO 7571
// case weapon of us_machine_gun :
6477: LD_VAR 0 2
6481: PUSH
6482: LD_INT 2
6484: DOUBLE
6485: EQUAL
6486: IFTRUE 6490
6488: GO 6520
6490: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6491: LD_ADDR_VAR 0 3
6495: PUSH
6496: LD_INT 1
6498: PUSH
6499: LD_INT 2
6501: PUSH
6502: LD_INT 3
6504: PUSH
6505: LD_INT 4
6507: PUSH
6508: LD_INT 5
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: ST_TO_ADDR
6518: GO 7555
6520: LD_INT 3
6522: DOUBLE
6523: EQUAL
6524: IFTRUE 6528
6526: GO 6558
6528: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_INT 1
6536: PUSH
6537: LD_INT 2
6539: PUSH
6540: LD_INT 3
6542: PUSH
6543: LD_INT 4
6545: PUSH
6546: LD_INT 5
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: ST_TO_ADDR
6556: GO 7555
6558: LD_INT 11
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6566
6564: GO 6596
6566: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_INT 1
6574: PUSH
6575: LD_INT 2
6577: PUSH
6578: LD_INT 3
6580: PUSH
6581: LD_INT 4
6583: PUSH
6584: LD_INT 5
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: ST_TO_ADDR
6594: GO 7555
6596: LD_INT 4
6598: DOUBLE
6599: EQUAL
6600: IFTRUE 6604
6602: GO 6630
6604: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6605: LD_ADDR_VAR 0 3
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 3
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: ST_TO_ADDR
6628: GO 7555
6630: LD_INT 5
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6664
6638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: LD_INT 4
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: ST_TO_ADDR
6662: GO 7555
6664: LD_INT 9
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6698
6672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6673: LD_ADDR_VAR 0 3
6677: PUSH
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: LD_INT 5
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: ST_TO_ADDR
6696: GO 7555
6698: LD_INT 7
6700: DOUBLE
6701: EQUAL
6702: IFTRUE 6706
6704: GO 6732
6706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6707: LD_ADDR_VAR 0 3
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 3
6717: PUSH
6718: LD_INT 4
6720: PUSH
6721: LD_INT 5
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: ST_TO_ADDR
6730: GO 7555
6732: LD_INT 12
6734: DOUBLE
6735: EQUAL
6736: IFTRUE 6740
6738: GO 6766
6740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: LD_INT 2
6748: PUSH
6749: LD_INT 3
6751: PUSH
6752: LD_INT 4
6754: PUSH
6755: LD_INT 5
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: ST_TO_ADDR
6764: GO 7555
6766: LD_INT 13
6768: DOUBLE
6769: EQUAL
6770: IFTRUE 6774
6772: GO 6800
6774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6775: LD_ADDR_VAR 0 3
6779: PUSH
6780: LD_INT 2
6782: PUSH
6783: LD_INT 3
6785: PUSH
6786: LD_INT 4
6788: PUSH
6789: LD_INT 5
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: ST_TO_ADDR
6798: GO 7555
6800: LD_INT 14
6802: DOUBLE
6803: EQUAL
6804: IFTRUE 6808
6806: GO 6826
6808: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6809: LD_ADDR_VAR 0 3
6813: PUSH
6814: LD_INT 4
6816: PUSH
6817: LD_INT 5
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: ST_TO_ADDR
6824: GO 7555
6826: LD_INT 6
6828: DOUBLE
6829: EQUAL
6830: IFTRUE 6834
6832: GO 6852
6834: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6835: LD_ADDR_VAR 0 3
6839: PUSH
6840: LD_INT 4
6842: PUSH
6843: LD_INT 5
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: ST_TO_ADDR
6850: GO 7555
6852: LD_INT 10
6854: DOUBLE
6855: EQUAL
6856: IFTRUE 6860
6858: GO 6878
6860: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6861: LD_ADDR_VAR 0 3
6865: PUSH
6866: LD_INT 4
6868: PUSH
6869: LD_INT 5
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: ST_TO_ADDR
6876: GO 7555
6878: LD_INT 22
6880: DOUBLE
6881: EQUAL
6882: IFTRUE 6886
6884: GO 6912
6886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6887: LD_ADDR_VAR 0 3
6891: PUSH
6892: LD_INT 11
6894: PUSH
6895: LD_INT 12
6897: PUSH
6898: LD_INT 13
6900: PUSH
6901: LD_INT 14
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: ST_TO_ADDR
6910: GO 7555
6912: LD_INT 23
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6946
6920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6921: LD_ADDR_VAR 0 3
6925: PUSH
6926: LD_INT 11
6928: PUSH
6929: LD_INT 12
6931: PUSH
6932: LD_INT 13
6934: PUSH
6935: LD_INT 14
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: ST_TO_ADDR
6944: GO 7555
6946: LD_INT 24
6948: DOUBLE
6949: EQUAL
6950: IFTRUE 6954
6952: GO 6980
6954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6955: LD_ADDR_VAR 0 3
6959: PUSH
6960: LD_INT 11
6962: PUSH
6963: LD_INT 12
6965: PUSH
6966: LD_INT 13
6968: PUSH
6969: LD_INT 14
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: ST_TO_ADDR
6978: GO 7555
6980: LD_INT 30
6982: DOUBLE
6983: EQUAL
6984: IFTRUE 6988
6986: GO 7014
6988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6989: LD_ADDR_VAR 0 3
6993: PUSH
6994: LD_INT 11
6996: PUSH
6997: LD_INT 12
6999: PUSH
7000: LD_INT 13
7002: PUSH
7003: LD_INT 14
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: ST_TO_ADDR
7012: GO 7555
7014: LD_INT 25
7016: DOUBLE
7017: EQUAL
7018: IFTRUE 7022
7020: GO 7040
7022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7023: LD_ADDR_VAR 0 3
7027: PUSH
7028: LD_INT 13
7030: PUSH
7031: LD_INT 14
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: ST_TO_ADDR
7038: GO 7555
7040: LD_INT 27
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7048
7046: GO 7066
7048: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7049: LD_ADDR_VAR 0 3
7053: PUSH
7054: LD_INT 13
7056: PUSH
7057: LD_INT 14
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 7555
7066: LD_INT 92
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7100
7074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7075: LD_ADDR_VAR 0 3
7079: PUSH
7080: LD_INT 11
7082: PUSH
7083: LD_INT 12
7085: PUSH
7086: LD_INT 13
7088: PUSH
7089: LD_INT 14
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: ST_TO_ADDR
7098: GO 7555
7100: LD_INT 28
7102: DOUBLE
7103: EQUAL
7104: IFTRUE 7108
7106: GO 7126
7108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7109: LD_ADDR_VAR 0 3
7113: PUSH
7114: LD_INT 13
7116: PUSH
7117: LD_INT 14
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: ST_TO_ADDR
7124: GO 7555
7126: LD_INT 29
7128: DOUBLE
7129: EQUAL
7130: IFTRUE 7134
7132: GO 7152
7134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7135: LD_ADDR_VAR 0 3
7139: PUSH
7140: LD_INT 13
7142: PUSH
7143: LD_INT 14
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: ST_TO_ADDR
7150: GO 7555
7152: LD_INT 31
7154: DOUBLE
7155: EQUAL
7156: IFTRUE 7160
7158: GO 7178
7160: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 13
7168: PUSH
7169: LD_INT 14
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: ST_TO_ADDR
7176: GO 7555
7178: LD_INT 26
7180: DOUBLE
7181: EQUAL
7182: IFTRUE 7186
7184: GO 7204
7186: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7187: LD_ADDR_VAR 0 3
7191: PUSH
7192: LD_INT 13
7194: PUSH
7195: LD_INT 14
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: ST_TO_ADDR
7202: GO 7555
7204: LD_INT 42
7206: DOUBLE
7207: EQUAL
7208: IFTRUE 7212
7210: GO 7238
7212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7213: LD_ADDR_VAR 0 3
7217: PUSH
7218: LD_INT 21
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 23
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: ST_TO_ADDR
7236: GO 7555
7238: LD_INT 43
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7272
7246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 21
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_INT 23
7260: PUSH
7261: LD_INT 24
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: ST_TO_ADDR
7270: GO 7555
7272: LD_INT 44
7274: DOUBLE
7275: EQUAL
7276: IFTRUE 7280
7278: GO 7306
7280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: ST_TO_ADDR
7304: GO 7555
7306: LD_INT 45
7308: DOUBLE
7309: EQUAL
7310: IFTRUE 7314
7312: GO 7340
7314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7315: LD_ADDR_VAR 0 3
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 22
7325: PUSH
7326: LD_INT 23
7328: PUSH
7329: LD_INT 24
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: ST_TO_ADDR
7338: GO 7555
7340: LD_INT 49
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7374
7348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 21
7356: PUSH
7357: LD_INT 22
7359: PUSH
7360: LD_INT 23
7362: PUSH
7363: LD_INT 24
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: ST_TO_ADDR
7372: GO 7555
7374: LD_INT 51
7376: DOUBLE
7377: EQUAL
7378: IFTRUE 7382
7380: GO 7408
7382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7383: LD_ADDR_VAR 0 3
7387: PUSH
7388: LD_INT 21
7390: PUSH
7391: LD_INT 22
7393: PUSH
7394: LD_INT 23
7396: PUSH
7397: LD_INT 24
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: ST_TO_ADDR
7406: GO 7555
7408: LD_INT 52
7410: DOUBLE
7411: EQUAL
7412: IFTRUE 7416
7414: GO 7442
7416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7417: LD_ADDR_VAR 0 3
7421: PUSH
7422: LD_INT 21
7424: PUSH
7425: LD_INT 22
7427: PUSH
7428: LD_INT 23
7430: PUSH
7431: LD_INT 24
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: ST_TO_ADDR
7440: GO 7555
7442: LD_INT 53
7444: DOUBLE
7445: EQUAL
7446: IFTRUE 7450
7448: GO 7468
7450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7451: LD_ADDR_VAR 0 3
7455: PUSH
7456: LD_INT 23
7458: PUSH
7459: LD_INT 24
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: ST_TO_ADDR
7466: GO 7555
7468: LD_INT 46
7470: DOUBLE
7471: EQUAL
7472: IFTRUE 7476
7474: GO 7494
7476: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: LD_INT 23
7484: PUSH
7485: LD_INT 24
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: ST_TO_ADDR
7492: GO 7555
7494: LD_INT 47
7496: DOUBLE
7497: EQUAL
7498: IFTRUE 7502
7500: GO 7520
7502: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7503: LD_ADDR_VAR 0 3
7507: PUSH
7508: LD_INT 23
7510: PUSH
7511: LD_INT 24
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: ST_TO_ADDR
7518: GO 7555
7520: LD_INT 98
7522: DOUBLE
7523: EQUAL
7524: IFTRUE 7528
7526: GO 7554
7528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7529: LD_ADDR_VAR 0 3
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 23
7542: PUSH
7543: LD_INT 24
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: ST_TO_ADDR
7552: GO 7555
7554: POP
// result := ( chassis in result ) ;
7555: LD_ADDR_VAR 0 3
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: LD_VAR 0 3
7569: IN
7570: ST_TO_ADDR
// end ;
7571: LD_VAR 0 3
7575: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7576: LD_INT 0
7578: PPUSH
7579: PPUSH
7580: PPUSH
7581: PPUSH
7582: PPUSH
7583: PPUSH
7584: PPUSH
// result := array ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_VAR 0 1
7594: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7595: LD_VAR 0 1
7599: NOT
7600: IFTRUE 7609
7602: PUSH
7603: LD_VAR 0 2
7607: NOT
7608: OR
7609: IFTRUE 7618
7611: PUSH
7612: LD_VAR 0 3
7616: NOT
7617: OR
7618: IFTRUE 7632
7620: PUSH
7621: LD_VAR 0 2
7625: PUSH
7626: LD_VAR 0 1
7630: GREATER
7631: OR
7632: IFTRUE 7646
7634: PUSH
7635: LD_VAR 0 3
7639: PUSH
7640: LD_VAR 0 1
7644: GREATER
7645: OR
7646: IFFALSE 7650
// exit ;
7648: GO 7946
// if direction then
7650: LD_VAR 0 4
7654: IFFALSE 7718
// begin d := 1 ;
7656: LD_ADDR_VAR 0 9
7660: PUSH
7661: LD_INT 1
7663: ST_TO_ADDR
// if i_from > i_to then
7664: LD_VAR 0 2
7668: PUSH
7669: LD_VAR 0 3
7673: GREATER
7674: IFFALSE 7700
// length := ( array - i_from ) + i_to else
7676: LD_ADDR_VAR 0 11
7680: PUSH
7681: LD_VAR 0 1
7685: PUSH
7686: LD_VAR 0 2
7690: MINUS
7691: PUSH
7692: LD_VAR 0 3
7696: PLUS
7697: ST_TO_ADDR
7698: GO 7716
// length := i_to - i_from ;
7700: LD_ADDR_VAR 0 11
7704: PUSH
7705: LD_VAR 0 3
7709: PUSH
7710: LD_VAR 0 2
7714: MINUS
7715: ST_TO_ADDR
// end else
7716: GO 7779
// begin d := - 1 ;
7718: LD_ADDR_VAR 0 9
7722: PUSH
7723: LD_INT 1
7725: NEG
7726: ST_TO_ADDR
// if i_from > i_to then
7727: LD_VAR 0 2
7731: PUSH
7732: LD_VAR 0 3
7736: GREATER
7737: IFFALSE 7757
// length := i_from - i_to else
7739: LD_ADDR_VAR 0 11
7743: PUSH
7744: LD_VAR 0 2
7748: PUSH
7749: LD_VAR 0 3
7753: MINUS
7754: ST_TO_ADDR
7755: GO 7779
// length := ( array - i_to ) + i_from ;
7757: LD_ADDR_VAR 0 11
7761: PUSH
7762: LD_VAR 0 1
7766: PUSH
7767: LD_VAR 0 3
7771: MINUS
7772: PUSH
7773: LD_VAR 0 2
7777: PLUS
7778: ST_TO_ADDR
// end ; if not length then
7779: LD_VAR 0 11
7783: NOT
7784: IFFALSE 7788
// exit ;
7786: GO 7946
// tmp := array ;
7788: LD_ADDR_VAR 0 10
7792: PUSH
7793: LD_VAR 0 1
7797: ST_TO_ADDR
// for i = 1 to length do
7798: LD_ADDR_VAR 0 6
7802: PUSH
7803: DOUBLE
7804: LD_INT 1
7806: DEC
7807: ST_TO_ADDR
7808: LD_VAR 0 11
7812: PUSH
7813: FOR_TO
7814: IFFALSE 7934
// begin for j = 1 to array do
7816: LD_ADDR_VAR 0 7
7820: PUSH
7821: DOUBLE
7822: LD_INT 1
7824: DEC
7825: ST_TO_ADDR
7826: LD_VAR 0 1
7830: PUSH
7831: FOR_TO
7832: IFFALSE 7920
// begin k := j + d ;
7834: LD_ADDR_VAR 0 8
7838: PUSH
7839: LD_VAR 0 7
7843: PUSH
7844: LD_VAR 0 9
7848: PLUS
7849: ST_TO_ADDR
// if k > array then
7850: LD_VAR 0 8
7854: PUSH
7855: LD_VAR 0 1
7859: GREATER
7860: IFFALSE 7870
// k := 1 ;
7862: LD_ADDR_VAR 0 8
7866: PUSH
7867: LD_INT 1
7869: ST_TO_ADDR
// if not k then
7870: LD_VAR 0 8
7874: NOT
7875: IFFALSE 7887
// k := array ;
7877: LD_ADDR_VAR 0 8
7881: PUSH
7882: LD_VAR 0 1
7886: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7887: LD_ADDR_VAR 0 10
7891: PUSH
7892: LD_VAR 0 10
7896: PPUSH
7897: LD_VAR 0 8
7901: PPUSH
7902: LD_VAR 0 1
7906: PUSH
7907: LD_VAR 0 7
7911: ARRAY
7912: PPUSH
7913: CALL_OW 1
7917: ST_TO_ADDR
// end ;
7918: GO 7831
7920: POP
7921: POP
// array := tmp ;
7922: LD_ADDR_VAR 0 1
7926: PUSH
7927: LD_VAR 0 10
7931: ST_TO_ADDR
// end ;
7932: GO 7813
7934: POP
7935: POP
// result := array ;
7936: LD_ADDR_VAR 0 5
7940: PUSH
7941: LD_VAR 0 1
7945: ST_TO_ADDR
// end ;
7946: LD_VAR 0 5
7950: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7951: LD_INT 0
7953: PPUSH
7954: PPUSH
// result := 0 ;
7955: LD_ADDR_VAR 0 3
7959: PUSH
7960: LD_INT 0
7962: ST_TO_ADDR
// if not array or not value in array then
7963: LD_VAR 0 1
7967: NOT
7968: IFTRUE 7983
7970: PUSH
7971: LD_VAR 0 2
7975: PUSH
7976: LD_VAR 0 1
7980: IN
7981: NOT
7982: OR
7983: IFFALSE 7987
// exit ;
7985: GO 8041
// for i = 1 to array do
7987: LD_ADDR_VAR 0 4
7991: PUSH
7992: DOUBLE
7993: LD_INT 1
7995: DEC
7996: ST_TO_ADDR
7997: LD_VAR 0 1
8001: PUSH
8002: FOR_TO
8003: IFFALSE 8039
// if value = array [ i ] then
8005: LD_VAR 0 2
8009: PUSH
8010: LD_VAR 0 1
8014: PUSH
8015: LD_VAR 0 4
8019: ARRAY
8020: EQUAL
8021: IFFALSE 8037
// begin result := i ;
8023: LD_ADDR_VAR 0 3
8027: PUSH
8028: LD_VAR 0 4
8032: ST_TO_ADDR
// exit ;
8033: POP
8034: POP
8035: GO 8041
// end ;
8037: GO 8002
8039: POP
8040: POP
// end ;
8041: LD_VAR 0 3
8045: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8046: LD_INT 0
8048: PPUSH
// vc_chassis := chassis ;
8049: LD_ADDR_OWVAR 37
8053: PUSH
8054: LD_VAR 0 1
8058: ST_TO_ADDR
// vc_engine := engine ;
8059: LD_ADDR_OWVAR 39
8063: PUSH
8064: LD_VAR 0 2
8068: ST_TO_ADDR
// vc_control := control ;
8069: LD_ADDR_OWVAR 38
8073: PUSH
8074: LD_VAR 0 3
8078: ST_TO_ADDR
// vc_weapon := weapon ;
8079: LD_ADDR_OWVAR 40
8083: PUSH
8084: LD_VAR 0 4
8088: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8089: LD_ADDR_OWVAR 41
8093: PUSH
8094: LD_VAR 0 5
8098: ST_TO_ADDR
// end ;
8099: LD_VAR 0 6
8103: RET
// export function WantPlant ( unit ) ; var task ; begin
8104: LD_INT 0
8106: PPUSH
8107: PPUSH
// result := false ;
8108: LD_ADDR_VAR 0 2
8112: PUSH
8113: LD_INT 0
8115: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8116: LD_ADDR_VAR 0 3
8120: PUSH
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 437
8130: ST_TO_ADDR
// if task then
8131: LD_VAR 0 3
8135: IFFALSE 8163
// if task [ 1 ] [ 1 ] = p then
8137: LD_VAR 0 3
8141: PUSH
8142: LD_INT 1
8144: ARRAY
8145: PUSH
8146: LD_INT 1
8148: ARRAY
8149: PUSH
8150: LD_STRING p
8152: EQUAL
8153: IFFALSE 8163
// result := true ;
8155: LD_ADDR_VAR 0 2
8159: PUSH
8160: LD_INT 1
8162: ST_TO_ADDR
// end ;
8163: LD_VAR 0 2
8167: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8168: LD_INT 0
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
// if pos < 1 then
8174: LD_VAR 0 2
8178: PUSH
8179: LD_INT 1
8181: LESS
8182: IFFALSE 8186
// exit ;
8184: GO 8489
// if pos = 1 then
8186: LD_VAR 0 2
8190: PUSH
8191: LD_INT 1
8193: EQUAL
8194: IFFALSE 8227
// result := Replace ( arr , pos [ 1 ] , value ) else
8196: LD_ADDR_VAR 0 4
8200: PUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: LD_VAR 0 2
8210: PUSH
8211: LD_INT 1
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 3
8219: PPUSH
8220: CALL_OW 1
8224: ST_TO_ADDR
8225: GO 8489
// begin tmp := arr ;
8227: LD_ADDR_VAR 0 6
8231: PUSH
8232: LD_VAR 0 1
8236: ST_TO_ADDR
// s_arr := [ tmp ] ;
8237: LD_ADDR_VAR 0 7
8241: PUSH
8242: LD_VAR 0 6
8246: PUSH
8247: EMPTY
8248: LIST
8249: ST_TO_ADDR
// for i = 1 to pos - 1 do
8250: LD_ADDR_VAR 0 5
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_VAR 0 2
8264: PUSH
8265: LD_INT 1
8267: MINUS
8268: PUSH
8269: FOR_TO
8270: IFFALSE 8315
// begin tmp := tmp [ pos [ i ] ] ;
8272: LD_ADDR_VAR 0 6
8276: PUSH
8277: LD_VAR 0 6
8281: PUSH
8282: LD_VAR 0 2
8286: PUSH
8287: LD_VAR 0 5
8291: ARRAY
8292: ARRAY
8293: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8294: LD_ADDR_VAR 0 7
8298: PUSH
8299: LD_VAR 0 7
8303: PUSH
8304: LD_VAR 0 6
8308: PUSH
8309: EMPTY
8310: LIST
8311: ADD
8312: ST_TO_ADDR
// end ;
8313: GO 8269
8315: POP
8316: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8317: LD_ADDR_VAR 0 6
8321: PUSH
8322: LD_VAR 0 6
8326: PPUSH
8327: LD_VAR 0 2
8331: PUSH
8332: LD_VAR 0 2
8336: ARRAY
8337: PPUSH
8338: LD_VAR 0 3
8342: PPUSH
8343: CALL_OW 1
8347: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8348: LD_ADDR_VAR 0 7
8352: PUSH
8353: LD_VAR 0 7
8357: PPUSH
8358: LD_VAR 0 7
8362: PPUSH
8363: LD_VAR 0 6
8367: PPUSH
8368: CALL_OW 1
8372: ST_TO_ADDR
// for i = s_arr downto 2 do
8373: LD_ADDR_VAR 0 5
8377: PUSH
8378: DOUBLE
8379: LD_VAR 0 7
8383: INC
8384: ST_TO_ADDR
8385: LD_INT 2
8387: PUSH
8388: FOR_DOWNTO
8389: IFFALSE 8473
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8391: LD_ADDR_VAR 0 6
8395: PUSH
8396: LD_VAR 0 7
8400: PUSH
8401: LD_VAR 0 5
8405: PUSH
8406: LD_INT 1
8408: MINUS
8409: ARRAY
8410: PPUSH
8411: LD_VAR 0 2
8415: PUSH
8416: LD_VAR 0 5
8420: PUSH
8421: LD_INT 1
8423: MINUS
8424: ARRAY
8425: PPUSH
8426: LD_VAR 0 7
8430: PUSH
8431: LD_VAR 0 5
8435: ARRAY
8436: PPUSH
8437: CALL_OW 1
8441: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8442: LD_ADDR_VAR 0 7
8446: PUSH
8447: LD_VAR 0 7
8451: PPUSH
8452: LD_VAR 0 5
8456: PUSH
8457: LD_INT 1
8459: MINUS
8460: PPUSH
8461: LD_VAR 0 6
8465: PPUSH
8466: CALL_OW 1
8470: ST_TO_ADDR
// end ;
8471: GO 8388
8473: POP
8474: POP
// result := s_arr [ 1 ] ;
8475: LD_ADDR_VAR 0 4
8479: PUSH
8480: LD_VAR 0 7
8484: PUSH
8485: LD_INT 1
8487: ARRAY
8488: ST_TO_ADDR
// end ; end ;
8489: LD_VAR 0 4
8493: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8494: LD_INT 0
8496: PPUSH
8497: PPUSH
// if not list then
8498: LD_VAR 0 1
8502: NOT
8503: IFFALSE 8507
// exit ;
8505: GO 8598
// i := list [ pos1 ] ;
8507: LD_ADDR_VAR 0 5
8511: PUSH
8512: LD_VAR 0 1
8516: PUSH
8517: LD_VAR 0 2
8521: ARRAY
8522: ST_TO_ADDR
// if not i then
8523: LD_VAR 0 5
8527: NOT
8528: IFFALSE 8532
// exit ;
8530: GO 8598
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8532: LD_ADDR_VAR 0 1
8536: PUSH
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_VAR 0 2
8546: PPUSH
8547: LD_VAR 0 1
8551: PUSH
8552: LD_VAR 0 3
8556: ARRAY
8557: PPUSH
8558: CALL_OW 1
8562: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8563: LD_ADDR_VAR 0 1
8567: PUSH
8568: LD_VAR 0 1
8572: PPUSH
8573: LD_VAR 0 3
8577: PPUSH
8578: LD_VAR 0 5
8582: PPUSH
8583: CALL_OW 1
8587: ST_TO_ADDR
// result := list ;
8588: LD_ADDR_VAR 0 4
8592: PUSH
8593: LD_VAR 0 1
8597: ST_TO_ADDR
// end ;
8598: LD_VAR 0 4
8602: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8603: LD_INT 0
8605: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8606: LD_ADDR_VAR 0 5
8610: PUSH
8611: LD_VAR 0 1
8615: PPUSH
8616: CALL_OW 250
8620: PPUSH
8621: LD_VAR 0 1
8625: PPUSH
8626: CALL_OW 251
8630: PPUSH
8631: LD_VAR 0 2
8635: PPUSH
8636: LD_VAR 0 3
8640: PPUSH
8641: LD_VAR 0 4
8645: PPUSH
8646: CALL 9028 0 5
8650: ST_TO_ADDR
// end ;
8651: LD_VAR 0 5
8655: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8656: LD_INT 0
8658: PPUSH
8659: PPUSH
8660: PPUSH
8661: PPUSH
// if not list or not unit then
8662: LD_VAR 0 2
8666: NOT
8667: IFTRUE 8676
8669: PUSH
8670: LD_VAR 0 1
8674: NOT
8675: OR
8676: IFFALSE 8680
// exit ;
8678: GO 9023
// result := [ ] ;
8680: LD_ADDR_VAR 0 5
8684: PUSH
8685: EMPTY
8686: ST_TO_ADDR
// for i in list do
8687: LD_ADDR_VAR 0 6
8691: PUSH
8692: LD_VAR 0 2
8696: PUSH
8697: FOR_IN
8698: IFFALSE 8916
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8700: LD_ADDR_VAR 0 8
8704: PUSH
8705: LD_VAR 0 1
8709: PPUSH
8710: LD_VAR 0 6
8714: PUSH
8715: LD_INT 1
8717: ARRAY
8718: PPUSH
8719: LD_VAR 0 6
8723: PUSH
8724: LD_INT 2
8726: ARRAY
8727: PPUSH
8728: CALL_OW 297
8732: ST_TO_ADDR
// if not Count ( result ) then
8733: LD_VAR 0 5
8737: PPUSH
8738: CALL 5250 0 1
8742: NOT
8743: IFFALSE 8776
// begin result := Join ( result , [ i , tmp ] ) ;
8745: LD_ADDR_VAR 0 5
8749: PUSH
8750: LD_VAR 0 5
8754: PPUSH
8755: LD_VAR 0 6
8759: PUSH
8760: LD_VAR 0 8
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PPUSH
8769: CALL 41226 0 2
8773: ST_TO_ADDR
// continue ;
8774: GO 8697
// end ; if result [ result ] [ 2 ] <= tmp then
8776: LD_VAR 0 5
8780: PUSH
8781: LD_VAR 0 5
8785: ARRAY
8786: PUSH
8787: LD_INT 2
8789: ARRAY
8790: PUSH
8791: LD_VAR 0 8
8795: LESSEQUAL
8796: IFFALSE 8829
// result := Join ( result , [ i , tmp ] ) else
8798: LD_ADDR_VAR 0 5
8802: PUSH
8803: LD_VAR 0 5
8807: PPUSH
8808: LD_VAR 0 6
8812: PUSH
8813: LD_VAR 0 8
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PPUSH
8822: CALL 41226 0 2
8826: ST_TO_ADDR
8827: GO 8914
// begin for j := 1 to Count ( result ) do
8829: LD_ADDR_VAR 0 7
8833: PUSH
8834: DOUBLE
8835: LD_INT 1
8837: DEC
8838: ST_TO_ADDR
8839: LD_VAR 0 5
8843: PPUSH
8844: CALL 5250 0 1
8848: PUSH
8849: FOR_TO
8850: IFFALSE 8912
// begin if tmp < result [ j ] [ 2 ] then
8852: LD_VAR 0 8
8856: PUSH
8857: LD_VAR 0 5
8861: PUSH
8862: LD_VAR 0 7
8866: ARRAY
8867: PUSH
8868: LD_INT 2
8870: ARRAY
8871: LESS
8872: IFFALSE 8910
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8874: LD_ADDR_VAR 0 5
8878: PUSH
8879: LD_VAR 0 5
8883: PPUSH
8884: LD_VAR 0 7
8888: PPUSH
8889: LD_VAR 0 6
8893: PUSH
8894: LD_VAR 0 8
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PPUSH
8903: CALL_OW 2
8907: ST_TO_ADDR
// break ;
8908: GO 8912
// end ; end ;
8910: GO 8849
8912: POP
8913: POP
// end ; end ;
8914: GO 8697
8916: POP
8917: POP
// if result and not asc then
8918: LD_VAR 0 5
8922: IFFALSE 8931
8924: PUSH
8925: LD_VAR 0 3
8929: NOT
8930: AND
8931: IFFALSE 8948
// result := ReverseArray ( result ) ;
8933: LD_ADDR_VAR 0 5
8937: PUSH
8938: LD_VAR 0 5
8942: PPUSH
8943: CALL 36306 0 1
8947: ST_TO_ADDR
// tmp := [ ] ;
8948: LD_ADDR_VAR 0 8
8952: PUSH
8953: EMPTY
8954: ST_TO_ADDR
// if mode then
8955: LD_VAR 0 4
8959: IFFALSE 9023
// begin for i := 1 to result do
8961: LD_ADDR_VAR 0 6
8965: PUSH
8966: DOUBLE
8967: LD_INT 1
8969: DEC
8970: ST_TO_ADDR
8971: LD_VAR 0 5
8975: PUSH
8976: FOR_TO
8977: IFFALSE 9011
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8979: LD_ADDR_VAR 0 8
8983: PUSH
8984: LD_VAR 0 8
8988: PPUSH
8989: LD_VAR 0 5
8993: PUSH
8994: LD_VAR 0 6
8998: ARRAY
8999: PUSH
9000: LD_INT 1
9002: ARRAY
9003: PPUSH
9004: CALL 41226 0 2
9008: ST_TO_ADDR
9009: GO 8976
9011: POP
9012: POP
// result := tmp ;
9013: LD_ADDR_VAR 0 5
9017: PUSH
9018: LD_VAR 0 8
9022: ST_TO_ADDR
// end ; end ;
9023: LD_VAR 0 5
9027: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9028: LD_INT 0
9030: PPUSH
9031: PPUSH
9032: PPUSH
9033: PPUSH
// if not list then
9034: LD_VAR 0 3
9038: NOT
9039: IFFALSE 9043
// exit ;
9041: GO 9433
// result := [ ] ;
9043: LD_ADDR_VAR 0 6
9047: PUSH
9048: EMPTY
9049: ST_TO_ADDR
// for i in list do
9050: LD_ADDR_VAR 0 7
9054: PUSH
9055: LD_VAR 0 3
9059: PUSH
9060: FOR_IN
9061: IFFALSE 9263
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9063: LD_ADDR_VAR 0 9
9067: PUSH
9068: LD_VAR 0 7
9072: PPUSH
9073: LD_VAR 0 1
9077: PPUSH
9078: LD_VAR 0 2
9082: PPUSH
9083: CALL_OW 297
9087: ST_TO_ADDR
// if not result then
9088: LD_VAR 0 6
9092: NOT
9093: IFFALSE 9119
// result := [ [ i , tmp ] ] else
9095: LD_ADDR_VAR 0 6
9099: PUSH
9100: LD_VAR 0 7
9104: PUSH
9105: LD_VAR 0 9
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: EMPTY
9115: LIST
9116: ST_TO_ADDR
9117: GO 9261
// begin if result [ result ] [ 2 ] <= tmp then
9119: LD_VAR 0 6
9123: PUSH
9124: LD_VAR 0 6
9128: ARRAY
9129: PUSH
9130: LD_INT 2
9132: ARRAY
9133: PUSH
9134: LD_VAR 0 9
9138: LESSEQUAL
9139: IFFALSE 9181
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9141: LD_ADDR_VAR 0 6
9145: PUSH
9146: LD_VAR 0 6
9150: PPUSH
9151: LD_VAR 0 6
9155: PUSH
9156: LD_INT 1
9158: PLUS
9159: PPUSH
9160: LD_VAR 0 7
9164: PUSH
9165: LD_VAR 0 9
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PPUSH
9174: CALL_OW 2
9178: ST_TO_ADDR
9179: GO 9261
// for j := 1 to result do
9181: LD_ADDR_VAR 0 8
9185: PUSH
9186: DOUBLE
9187: LD_INT 1
9189: DEC
9190: ST_TO_ADDR
9191: LD_VAR 0 6
9195: PUSH
9196: FOR_TO
9197: IFFALSE 9259
// begin if tmp < result [ j ] [ 2 ] then
9199: LD_VAR 0 9
9203: PUSH
9204: LD_VAR 0 6
9208: PUSH
9209: LD_VAR 0 8
9213: ARRAY
9214: PUSH
9215: LD_INT 2
9217: ARRAY
9218: LESS
9219: IFFALSE 9257
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9221: LD_ADDR_VAR 0 6
9225: PUSH
9226: LD_VAR 0 6
9230: PPUSH
9231: LD_VAR 0 8
9235: PPUSH
9236: LD_VAR 0 7
9240: PUSH
9241: LD_VAR 0 9
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 2
9254: ST_TO_ADDR
// break ;
9255: GO 9259
// end ; end ;
9257: GO 9196
9259: POP
9260: POP
// end ; end ;
9261: GO 9060
9263: POP
9264: POP
// if result and not asc then
9265: LD_VAR 0 6
9269: IFFALSE 9278
9271: PUSH
9272: LD_VAR 0 4
9276: NOT
9277: AND
9278: IFFALSE 9353
// begin tmp := result ;
9280: LD_ADDR_VAR 0 9
9284: PUSH
9285: LD_VAR 0 6
9289: ST_TO_ADDR
// for i = tmp downto 1 do
9290: LD_ADDR_VAR 0 7
9294: PUSH
9295: DOUBLE
9296: LD_VAR 0 9
9300: INC
9301: ST_TO_ADDR
9302: LD_INT 1
9304: PUSH
9305: FOR_DOWNTO
9306: IFFALSE 9351
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9308: LD_ADDR_VAR 0 6
9312: PUSH
9313: LD_VAR 0 6
9317: PPUSH
9318: LD_VAR 0 9
9322: PUSH
9323: LD_VAR 0 7
9327: MINUS
9328: PUSH
9329: LD_INT 1
9331: PLUS
9332: PPUSH
9333: LD_VAR 0 9
9337: PUSH
9338: LD_VAR 0 7
9342: ARRAY
9343: PPUSH
9344: CALL_OW 1
9348: ST_TO_ADDR
9349: GO 9305
9351: POP
9352: POP
// end ; tmp := [ ] ;
9353: LD_ADDR_VAR 0 9
9357: PUSH
9358: EMPTY
9359: ST_TO_ADDR
// if mode then
9360: LD_VAR 0 5
9364: IFFALSE 9433
// begin for i = 1 to result do
9366: LD_ADDR_VAR 0 7
9370: PUSH
9371: DOUBLE
9372: LD_INT 1
9374: DEC
9375: ST_TO_ADDR
9376: LD_VAR 0 6
9380: PUSH
9381: FOR_TO
9382: IFFALSE 9421
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9384: LD_ADDR_VAR 0 9
9388: PUSH
9389: LD_VAR 0 9
9393: PPUSH
9394: LD_VAR 0 7
9398: PPUSH
9399: LD_VAR 0 6
9403: PUSH
9404: LD_VAR 0 7
9408: ARRAY
9409: PUSH
9410: LD_INT 1
9412: ARRAY
9413: PPUSH
9414: CALL_OW 1
9418: ST_TO_ADDR
9419: GO 9381
9421: POP
9422: POP
// result := tmp ;
9423: LD_ADDR_VAR 0 6
9427: PUSH
9428: LD_VAR 0 9
9432: ST_TO_ADDR
// end ; end ;
9433: LD_VAR 0 6
9437: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9438: LD_INT 0
9440: PPUSH
9441: PPUSH
9442: PPUSH
9443: PPUSH
9444: PPUSH
9445: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9446: LD_ADDR_VAR 0 5
9450: PUSH
9451: LD_INT 0
9453: PUSH
9454: LD_INT 0
9456: PUSH
9457: LD_INT 0
9459: PUSH
9460: EMPTY
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: ST_TO_ADDR
// if not x or not y then
9468: LD_VAR 0 2
9472: NOT
9473: IFTRUE 9482
9475: PUSH
9476: LD_VAR 0 3
9480: NOT
9481: OR
9482: IFFALSE 9486
// exit ;
9484: GO 11142
// if not range then
9486: LD_VAR 0 4
9490: NOT
9491: IFFALSE 9501
// range := 10 ;
9493: LD_ADDR_VAR 0 4
9497: PUSH
9498: LD_INT 10
9500: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9501: LD_ADDR_VAR 0 8
9505: PUSH
9506: LD_INT 81
9508: PUSH
9509: LD_VAR 0 1
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 92
9520: PUSH
9521: LD_VAR 0 2
9525: PUSH
9526: LD_VAR 0 3
9530: PUSH
9531: LD_VAR 0 4
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 3
9544: PUSH
9545: LD_INT 21
9547: PUSH
9548: LD_INT 3
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: PPUSH
9564: CALL_OW 69
9568: ST_TO_ADDR
// if not tmp then
9569: LD_VAR 0 8
9573: NOT
9574: IFFALSE 9578
// exit ;
9576: GO 11142
// for i in tmp do
9578: LD_ADDR_VAR 0 6
9582: PUSH
9583: LD_VAR 0 8
9587: PUSH
9588: FOR_IN
9589: IFFALSE 11117
// begin points := [ 0 , 0 , 0 ] ;
9591: LD_ADDR_VAR 0 9
9595: PUSH
9596: LD_INT 0
9598: PUSH
9599: LD_INT 0
9601: PUSH
9602: LD_INT 0
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: ST_TO_ADDR
// bpoints := 1 ;
9610: LD_ADDR_VAR 0 10
9614: PUSH
9615: LD_INT 1
9617: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9618: LD_VAR 0 6
9622: PPUSH
9623: CALL_OW 247
9627: PUSH
9628: LD_INT 1
9630: DOUBLE
9631: EQUAL
9632: IFTRUE 9636
9634: GO 10218
9636: POP
// begin if GetClass ( i ) = 1 then
9637: LD_VAR 0 6
9641: PPUSH
9642: CALL_OW 257
9646: PUSH
9647: LD_INT 1
9649: EQUAL
9650: IFFALSE 9671
// points := [ 10 , 5 , 3 ] ;
9652: LD_ADDR_VAR 0 9
9656: PUSH
9657: LD_INT 10
9659: PUSH
9660: LD_INT 5
9662: PUSH
9663: LD_INT 3
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9671: LD_VAR 0 6
9675: PPUSH
9676: CALL_OW 257
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: LD_INT 3
9686: PUSH
9687: LD_INT 4
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: IN
9695: IFFALSE 9716
// points := [ 3 , 2 , 1 ] ;
9697: LD_ADDR_VAR 0 9
9701: PUSH
9702: LD_INT 3
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9716: LD_VAR 0 6
9720: PPUSH
9721: CALL_OW 257
9725: PUSH
9726: LD_INT 5
9728: EQUAL
9729: IFFALSE 9750
// points := [ 130 , 5 , 2 ] ;
9731: LD_ADDR_VAR 0 9
9735: PUSH
9736: LD_INT 130
9738: PUSH
9739: LD_INT 5
9741: PUSH
9742: LD_INT 2
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9750: LD_VAR 0 6
9754: PPUSH
9755: CALL_OW 257
9759: PUSH
9760: LD_INT 8
9762: EQUAL
9763: IFFALSE 9784
// points := [ 35 , 35 , 30 ] ;
9765: LD_ADDR_VAR 0 9
9769: PUSH
9770: LD_INT 35
9772: PUSH
9773: LD_INT 35
9775: PUSH
9776: LD_INT 30
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9784: LD_VAR 0 6
9788: PPUSH
9789: CALL_OW 257
9793: PUSH
9794: LD_INT 9
9796: EQUAL
9797: IFFALSE 9818
// points := [ 20 , 55 , 40 ] ;
9799: LD_ADDR_VAR 0 9
9803: PUSH
9804: LD_INT 20
9806: PUSH
9807: LD_INT 55
9809: PUSH
9810: LD_INT 40
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9818: LD_VAR 0 6
9822: PPUSH
9823: CALL_OW 257
9827: PUSH
9828: LD_INT 12
9830: PUSH
9831: LD_INT 16
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: IN
9838: IFFALSE 9859
// points := [ 5 , 3 , 2 ] ;
9840: LD_ADDR_VAR 0 9
9844: PUSH
9845: LD_INT 5
9847: PUSH
9848: LD_INT 3
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9859: LD_VAR 0 6
9863: PPUSH
9864: CALL_OW 257
9868: PUSH
9869: LD_INT 17
9871: EQUAL
9872: IFFALSE 9893
// points := [ 100 , 50 , 75 ] ;
9874: LD_ADDR_VAR 0 9
9878: PUSH
9879: LD_INT 100
9881: PUSH
9882: LD_INT 50
9884: PUSH
9885: LD_INT 75
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9893: LD_VAR 0 6
9897: PPUSH
9898: CALL_OW 257
9902: PUSH
9903: LD_INT 15
9905: EQUAL
9906: IFFALSE 9927
// points := [ 10 , 5 , 3 ] ;
9908: LD_ADDR_VAR 0 9
9912: PUSH
9913: LD_INT 10
9915: PUSH
9916: LD_INT 5
9918: PUSH
9919: LD_INT 3
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9927: LD_VAR 0 6
9931: PPUSH
9932: CALL_OW 257
9936: PUSH
9937: LD_INT 14
9939: EQUAL
9940: IFFALSE 9961
// points := [ 10 , 0 , 0 ] ;
9942: LD_ADDR_VAR 0 9
9946: PUSH
9947: LD_INT 10
9949: PUSH
9950: LD_INT 0
9952: PUSH
9953: LD_INT 0
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9961: LD_VAR 0 6
9965: PPUSH
9966: CALL_OW 257
9970: PUSH
9971: LD_INT 11
9973: EQUAL
9974: IFFALSE 9995
// points := [ 30 , 10 , 5 ] ;
9976: LD_ADDR_VAR 0 9
9980: PUSH
9981: LD_INT 30
9983: PUSH
9984: LD_INT 10
9986: PUSH
9987: LD_INT 5
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9995: LD_VAR 0 1
9999: PPUSH
10000: LD_INT 5
10002: PPUSH
10003: CALL_OW 321
10007: PUSH
10008: LD_INT 2
10010: EQUAL
10011: IFFALSE 10028
// bpoints := bpoints * 1.8 ;
10013: LD_ADDR_VAR 0 10
10017: PUSH
10018: LD_VAR 0 10
10022: PUSH
10023: LD_REAL  1.80000000000000E+0000
10026: MUL
10027: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10028: LD_VAR 0 6
10032: PPUSH
10033: CALL_OW 257
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: LD_INT 3
10046: PUSH
10047: LD_INT 4
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: IN
10056: IFFALSE 10076
10058: PUSH
10059: LD_VAR 0 1
10063: PPUSH
10064: LD_INT 51
10066: PPUSH
10067: CALL_OW 321
10071: PUSH
10072: LD_INT 2
10074: EQUAL
10075: AND
10076: IFFALSE 10093
// bpoints := bpoints * 1.2 ;
10078: LD_ADDR_VAR 0 10
10082: PUSH
10083: LD_VAR 0 10
10087: PUSH
10088: LD_REAL  1.20000000000000E+0000
10091: MUL
10092: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10093: LD_VAR 0 6
10097: PPUSH
10098: CALL_OW 257
10102: PUSH
10103: LD_INT 5
10105: PUSH
10106: LD_INT 7
10108: PUSH
10109: LD_INT 9
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: IN
10117: IFFALSE 10137
10119: PUSH
10120: LD_VAR 0 1
10124: PPUSH
10125: LD_INT 52
10127: PPUSH
10128: CALL_OW 321
10132: PUSH
10133: LD_INT 2
10135: EQUAL
10136: AND
10137: IFFALSE 10154
// bpoints := bpoints * 1.5 ;
10139: LD_ADDR_VAR 0 10
10143: PUSH
10144: LD_VAR 0 10
10148: PUSH
10149: LD_REAL  1.50000000000000E+0000
10152: MUL
10153: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10154: LD_VAR 0 1
10158: PPUSH
10159: LD_INT 66
10161: PPUSH
10162: CALL_OW 321
10166: PUSH
10167: LD_INT 2
10169: EQUAL
10170: IFFALSE 10187
// bpoints := bpoints * 1.1 ;
10172: LD_ADDR_VAR 0 10
10176: PUSH
10177: LD_VAR 0 10
10181: PUSH
10182: LD_REAL  1.10000000000000E+0000
10185: MUL
10186: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10187: LD_ADDR_VAR 0 10
10191: PUSH
10192: LD_VAR 0 10
10196: PUSH
10197: LD_VAR 0 6
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: CALL_OW 259
10209: PUSH
10210: LD_REAL  1.15000000000000E+0000
10213: MUL
10214: MUL
10215: ST_TO_ADDR
// end ; unit_vehicle :
10216: GO 11046
10218: LD_INT 2
10220: DOUBLE
10221: EQUAL
10222: IFTRUE 10226
10224: GO 11034
10226: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10227: LD_VAR 0 6
10231: PPUSH
10232: CALL_OW 264
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: LD_INT 42
10242: PUSH
10243: LD_INT 24
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: IN
10251: IFFALSE 10272
// points := [ 25 , 5 , 3 ] ;
10253: LD_ADDR_VAR 0 9
10257: PUSH
10258: LD_INT 25
10260: PUSH
10261: LD_INT 5
10263: PUSH
10264: LD_INT 3
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10272: LD_VAR 0 6
10276: PPUSH
10277: CALL_OW 264
10281: PUSH
10282: LD_INT 4
10284: PUSH
10285: LD_INT 43
10287: PUSH
10288: LD_INT 25
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: IN
10296: IFFALSE 10317
// points := [ 40 , 15 , 5 ] ;
10298: LD_ADDR_VAR 0 9
10302: PUSH
10303: LD_INT 40
10305: PUSH
10306: LD_INT 15
10308: PUSH
10309: LD_INT 5
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10317: LD_VAR 0 6
10321: PPUSH
10322: CALL_OW 264
10326: PUSH
10327: LD_INT 3
10329: PUSH
10330: LD_INT 23
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: IN
10337: IFFALSE 10358
// points := [ 7 , 25 , 8 ] ;
10339: LD_ADDR_VAR 0 9
10343: PUSH
10344: LD_INT 7
10346: PUSH
10347: LD_INT 25
10349: PUSH
10350: LD_INT 8
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: LIST
10357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10358: LD_VAR 0 6
10362: PPUSH
10363: CALL_OW 264
10367: PUSH
10368: LD_INT 5
10370: PUSH
10371: LD_INT 27
10373: PUSH
10374: LD_INT 44
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: IN
10382: IFFALSE 10403
// points := [ 14 , 50 , 16 ] ;
10384: LD_ADDR_VAR 0 9
10388: PUSH
10389: LD_INT 14
10391: PUSH
10392: LD_INT 50
10394: PUSH
10395: LD_INT 16
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10403: LD_VAR 0 6
10407: PPUSH
10408: CALL_OW 264
10412: PUSH
10413: LD_INT 6
10415: PUSH
10416: LD_INT 46
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: IN
10423: IFFALSE 10444
// points := [ 32 , 120 , 70 ] ;
10425: LD_ADDR_VAR 0 9
10429: PUSH
10430: LD_INT 32
10432: PUSH
10433: LD_INT 120
10435: PUSH
10436: LD_INT 70
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: LIST
10443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10444: LD_VAR 0 6
10448: PPUSH
10449: CALL_OW 264
10453: PUSH
10454: LD_INT 7
10456: PUSH
10457: LD_INT 28
10459: PUSH
10460: LD_INT 45
10462: PUSH
10463: LD_INT 92
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: IN
10472: IFFALSE 10493
// points := [ 35 , 20 , 45 ] ;
10474: LD_ADDR_VAR 0 9
10478: PUSH
10479: LD_INT 35
10481: PUSH
10482: LD_INT 20
10484: PUSH
10485: LD_INT 45
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: LIST
10492: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10493: LD_VAR 0 6
10497: PPUSH
10498: CALL_OW 264
10502: PUSH
10503: LD_INT 47
10505: PUSH
10506: EMPTY
10507: LIST
10508: IN
10509: IFFALSE 10530
// points := [ 67 , 45 , 75 ] ;
10511: LD_ADDR_VAR 0 9
10515: PUSH
10516: LD_INT 67
10518: PUSH
10519: LD_INT 45
10521: PUSH
10522: LD_INT 75
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10530: LD_VAR 0 6
10534: PPUSH
10535: CALL_OW 264
10539: PUSH
10540: LD_INT 26
10542: PUSH
10543: EMPTY
10544: LIST
10545: IN
10546: IFFALSE 10567
// points := [ 120 , 30 , 80 ] ;
10548: LD_ADDR_VAR 0 9
10552: PUSH
10553: LD_INT 120
10555: PUSH
10556: LD_INT 30
10558: PUSH
10559: LD_INT 80
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10567: LD_VAR 0 6
10571: PPUSH
10572: CALL_OW 264
10576: PUSH
10577: LD_INT 22
10579: PUSH
10580: EMPTY
10581: LIST
10582: IN
10583: IFFALSE 10604
// points := [ 40 , 1 , 1 ] ;
10585: LD_ADDR_VAR 0 9
10589: PUSH
10590: LD_INT 40
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: LD_INT 1
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10604: LD_VAR 0 6
10608: PPUSH
10609: CALL_OW 264
10613: PUSH
10614: LD_INT 29
10616: PUSH
10617: EMPTY
10618: LIST
10619: IN
10620: IFFALSE 10641
// points := [ 70 , 200 , 400 ] ;
10622: LD_ADDR_VAR 0 9
10626: PUSH
10627: LD_INT 70
10629: PUSH
10630: LD_INT 200
10632: PUSH
10633: LD_INT 400
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: LIST
10640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10641: LD_VAR 0 6
10645: PPUSH
10646: CALL_OW 264
10650: PUSH
10651: LD_INT 14
10653: PUSH
10654: LD_INT 53
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: IN
10661: IFFALSE 10682
// points := [ 40 , 10 , 20 ] ;
10663: LD_ADDR_VAR 0 9
10667: PUSH
10668: LD_INT 40
10670: PUSH
10671: LD_INT 10
10673: PUSH
10674: LD_INT 20
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10682: LD_VAR 0 6
10686: PPUSH
10687: CALL_OW 264
10691: PUSH
10692: LD_INT 9
10694: PUSH
10695: EMPTY
10696: LIST
10697: IN
10698: IFFALSE 10719
// points := [ 5 , 70 , 20 ] ;
10700: LD_ADDR_VAR 0 9
10704: PUSH
10705: LD_INT 5
10707: PUSH
10708: LD_INT 70
10710: PUSH
10711: LD_INT 20
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10719: LD_VAR 0 6
10723: PPUSH
10724: CALL_OW 264
10728: PUSH
10729: LD_INT 10
10731: PUSH
10732: EMPTY
10733: LIST
10734: IN
10735: IFFALSE 10756
// points := [ 35 , 110 , 70 ] ;
10737: LD_ADDR_VAR 0 9
10741: PUSH
10742: LD_INT 35
10744: PUSH
10745: LD_INT 110
10747: PUSH
10748: LD_INT 70
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10756: LD_VAR 0 6
10760: PPUSH
10761: CALL_OW 265
10765: PUSH
10766: LD_INT 25
10768: EQUAL
10769: IFFALSE 10790
// points := [ 80 , 65 , 100 ] ;
10771: LD_ADDR_VAR 0 9
10775: PUSH
10776: LD_INT 80
10778: PUSH
10779: LD_INT 65
10781: PUSH
10782: LD_INT 100
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10790: LD_VAR 0 6
10794: PPUSH
10795: CALL_OW 263
10799: PUSH
10800: LD_INT 1
10802: EQUAL
10803: IFFALSE 10838
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10805: LD_ADDR_VAR 0 10
10809: PUSH
10810: LD_VAR 0 10
10814: PUSH
10815: LD_VAR 0 6
10819: PPUSH
10820: CALL_OW 311
10824: PPUSH
10825: LD_INT 3
10827: PPUSH
10828: CALL_OW 259
10832: PUSH
10833: LD_INT 4
10835: MUL
10836: MUL
10837: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10838: LD_VAR 0 6
10842: PPUSH
10843: CALL_OW 263
10847: PUSH
10848: LD_INT 2
10850: EQUAL
10851: IFFALSE 10902
// begin j := IsControledBy ( i ) ;
10853: LD_ADDR_VAR 0 7
10857: PUSH
10858: LD_VAR 0 6
10862: PPUSH
10863: CALL_OW 312
10867: ST_TO_ADDR
// if j then
10868: LD_VAR 0 7
10872: IFFALSE 10902
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10874: LD_ADDR_VAR 0 10
10878: PUSH
10879: LD_VAR 0 10
10883: PUSH
10884: LD_VAR 0 7
10888: PPUSH
10889: LD_INT 3
10891: PPUSH
10892: CALL_OW 259
10896: PUSH
10897: LD_INT 3
10899: MUL
10900: MUL
10901: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10902: LD_VAR 0 6
10906: PPUSH
10907: CALL_OW 264
10911: PUSH
10912: LD_INT 5
10914: PUSH
10915: LD_INT 6
10917: PUSH
10918: LD_INT 46
10920: PUSH
10921: LD_INT 44
10923: PUSH
10924: LD_INT 47
10926: PUSH
10927: LD_INT 45
10929: PUSH
10930: LD_INT 28
10932: PUSH
10933: LD_INT 7
10935: PUSH
10936: LD_INT 27
10938: PUSH
10939: LD_INT 29
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: IN
10954: IFFALSE 10974
10956: PUSH
10957: LD_VAR 0 1
10961: PPUSH
10962: LD_INT 52
10964: PPUSH
10965: CALL_OW 321
10969: PUSH
10970: LD_INT 2
10972: EQUAL
10973: AND
10974: IFFALSE 10991
// bpoints := bpoints * 1.2 ;
10976: LD_ADDR_VAR 0 10
10980: PUSH
10981: LD_VAR 0 10
10985: PUSH
10986: LD_REAL  1.20000000000000E+0000
10989: MUL
10990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10991: LD_VAR 0 6
10995: PPUSH
10996: CALL_OW 264
11000: PUSH
11001: LD_INT 6
11003: PUSH
11004: LD_INT 46
11006: PUSH
11007: LD_INT 47
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: IN
11015: IFFALSE 11032
// bpoints := bpoints * 1.2 ;
11017: LD_ADDR_VAR 0 10
11021: PUSH
11022: LD_VAR 0 10
11026: PUSH
11027: LD_REAL  1.20000000000000E+0000
11030: MUL
11031: ST_TO_ADDR
// end ; unit_building :
11032: GO 11046
11034: LD_INT 3
11036: DOUBLE
11037: EQUAL
11038: IFTRUE 11042
11040: GO 11045
11042: POP
// ; end ;
11043: GO 11046
11045: POP
// for j = 1 to 3 do
11046: LD_ADDR_VAR 0 7
11050: PUSH
11051: DOUBLE
11052: LD_INT 1
11054: DEC
11055: ST_TO_ADDR
11056: LD_INT 3
11058: PUSH
11059: FOR_TO
11060: IFFALSE 11113
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11062: LD_ADDR_VAR 0 5
11066: PUSH
11067: LD_VAR 0 5
11071: PPUSH
11072: LD_VAR 0 7
11076: PPUSH
11077: LD_VAR 0 5
11081: PUSH
11082: LD_VAR 0 7
11086: ARRAY
11087: PUSH
11088: LD_VAR 0 9
11092: PUSH
11093: LD_VAR 0 7
11097: ARRAY
11098: PUSH
11099: LD_VAR 0 10
11103: MUL
11104: PLUS
11105: PPUSH
11106: CALL_OW 1
11110: ST_TO_ADDR
11111: GO 11059
11113: POP
11114: POP
// end ;
11115: GO 9588
11117: POP
11118: POP
// result := Replace ( result , 4 , tmp ) ;
11119: LD_ADDR_VAR 0 5
11123: PUSH
11124: LD_VAR 0 5
11128: PPUSH
11129: LD_INT 4
11131: PPUSH
11132: LD_VAR 0 8
11136: PPUSH
11137: CALL_OW 1
11141: ST_TO_ADDR
// end ;
11142: LD_VAR 0 5
11146: RET
// export function DangerAtRange ( unit , range ) ; begin
11147: LD_INT 0
11149: PPUSH
// if not unit then
11150: LD_VAR 0 1
11154: NOT
11155: IFFALSE 11159
// exit ;
11157: GO 11204
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11159: LD_ADDR_VAR 0 3
11163: PUSH
11164: LD_VAR 0 1
11168: PPUSH
11169: CALL_OW 255
11173: PPUSH
11174: LD_VAR 0 1
11178: PPUSH
11179: CALL_OW 250
11183: PPUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 251
11193: PPUSH
11194: LD_VAR 0 2
11198: PPUSH
11199: CALL 9438 0 4
11203: ST_TO_ADDR
// end ;
11204: LD_VAR 0 3
11208: RET
// export function DangerInArea ( side , area ) ; begin
11209: LD_INT 0
11211: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11212: LD_ADDR_VAR 0 3
11216: PUSH
11217: LD_VAR 0 2
11221: PPUSH
11222: LD_INT 81
11224: PUSH
11225: LD_VAR 0 1
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PPUSH
11234: CALL_OW 70
11238: ST_TO_ADDR
// end ;
11239: LD_VAR 0 3
11243: RET
// export function IsExtension ( b ) ; begin
11244: LD_INT 0
11246: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11247: LD_ADDR_VAR 0 2
11251: PUSH
11252: LD_VAR 0 1
11256: PUSH
11257: LD_INT 23
11259: PUSH
11260: LD_INT 20
11262: PUSH
11263: LD_INT 22
11265: PUSH
11266: LD_INT 17
11268: PUSH
11269: LD_INT 24
11271: PUSH
11272: LD_INT 21
11274: PUSH
11275: LD_INT 19
11277: PUSH
11278: LD_INT 16
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 18
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: IN
11299: ST_TO_ADDR
// end ;
11300: LD_VAR 0 2
11304: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11305: LD_INT 0
11307: PPUSH
11308: PPUSH
11309: PPUSH
// result := [ ] ;
11310: LD_ADDR_VAR 0 4
11314: PUSH
11315: EMPTY
11316: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11317: LD_ADDR_VAR 0 5
11321: PUSH
11322: LD_VAR 0 2
11326: PPUSH
11327: LD_INT 21
11329: PUSH
11330: LD_INT 3
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 70
11341: ST_TO_ADDR
// if not tmp then
11342: LD_VAR 0 5
11346: NOT
11347: IFFALSE 11351
// exit ;
11349: GO 11415
// if checkLink then
11351: LD_VAR 0 3
11355: IFFALSE 11405
// begin for i in tmp do
11357: LD_ADDR_VAR 0 6
11361: PUSH
11362: LD_VAR 0 5
11366: PUSH
11367: FOR_IN
11368: IFFALSE 11403
// if GetBase ( i ) <> base then
11370: LD_VAR 0 6
11374: PPUSH
11375: CALL_OW 274
11379: PUSH
11380: LD_VAR 0 1
11384: NONEQUAL
11385: IFFALSE 11401
// ComLinkToBase ( base , i ) ;
11387: LD_VAR 0 1
11391: PPUSH
11392: LD_VAR 0 6
11396: PPUSH
11397: CALL_OW 169
11401: GO 11367
11403: POP
11404: POP
// end ; result := tmp ;
11405: LD_ADDR_VAR 0 4
11409: PUSH
11410: LD_VAR 0 5
11414: ST_TO_ADDR
// end ;
11415: LD_VAR 0 4
11419: RET
// export function ComComplete ( units , b ) ; var i ; begin
11420: LD_INT 0
11422: PPUSH
11423: PPUSH
// if not units then
11424: LD_VAR 0 1
11428: NOT
11429: IFFALSE 11433
// exit ;
11431: GO 11523
// for i in units do
11433: LD_ADDR_VAR 0 4
11437: PUSH
11438: LD_VAR 0 1
11442: PUSH
11443: FOR_IN
11444: IFFALSE 11521
// if BuildingStatus ( b ) = bs_build then
11446: LD_VAR 0 2
11450: PPUSH
11451: CALL_OW 461
11455: PUSH
11456: LD_INT 1
11458: EQUAL
11459: IFFALSE 11519
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11461: LD_VAR 0 4
11465: PPUSH
11466: LD_STRING h
11468: PUSH
11469: LD_VAR 0 2
11473: PPUSH
11474: CALL_OW 250
11478: PUSH
11479: LD_VAR 0 2
11483: PPUSH
11484: CALL_OW 251
11488: PUSH
11489: LD_VAR 0 2
11493: PUSH
11494: LD_INT 0
11496: PUSH
11497: LD_INT 0
11499: PUSH
11500: LD_INT 0
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: PPUSH
11515: CALL_OW 446
11519: GO 11443
11521: POP
11522: POP
// end ;
11523: LD_VAR 0 3
11527: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11528: LD_INT 0
11530: PPUSH
11531: PPUSH
11532: PPUSH
11533: PPUSH
11534: PPUSH
11535: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11536: LD_VAR 0 1
11540: NOT
11541: IFTRUE 11558
11543: PUSH
11544: LD_VAR 0 1
11548: PPUSH
11549: CALL_OW 263
11553: PUSH
11554: LD_INT 2
11556: NONEQUAL
11557: OR
11558: IFFALSE 11562
// exit ;
11560: GO 11878
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11562: LD_ADDR_VAR 0 6
11566: PUSH
11567: LD_INT 22
11569: PUSH
11570: LD_VAR 0 1
11574: PPUSH
11575: CALL_OW 255
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: LD_INT 2
11586: PUSH
11587: LD_INT 30
11589: PUSH
11590: LD_INT 36
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 34
11599: PUSH
11600: LD_INT 31
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PPUSH
11616: CALL_OW 69
11620: ST_TO_ADDR
// if not tmp then
11621: LD_VAR 0 6
11625: NOT
11626: IFFALSE 11630
// exit ;
11628: GO 11878
// result := [ ] ;
11630: LD_ADDR_VAR 0 2
11634: PUSH
11635: EMPTY
11636: ST_TO_ADDR
// for i in tmp do
11637: LD_ADDR_VAR 0 3
11641: PUSH
11642: LD_VAR 0 6
11646: PUSH
11647: FOR_IN
11648: IFFALSE 11719
// begin t := UnitsInside ( i ) ;
11650: LD_ADDR_VAR 0 4
11654: PUSH
11655: LD_VAR 0 3
11659: PPUSH
11660: CALL_OW 313
11664: ST_TO_ADDR
// if t then
11665: LD_VAR 0 4
11669: IFFALSE 11717
// for j in t do
11671: LD_ADDR_VAR 0 7
11675: PUSH
11676: LD_VAR 0 4
11680: PUSH
11681: FOR_IN
11682: IFFALSE 11715
// result := Replace ( result , result + 1 , j ) ;
11684: LD_ADDR_VAR 0 2
11688: PUSH
11689: LD_VAR 0 2
11693: PPUSH
11694: LD_VAR 0 2
11698: PUSH
11699: LD_INT 1
11701: PLUS
11702: PPUSH
11703: LD_VAR 0 7
11707: PPUSH
11708: CALL_OW 1
11712: ST_TO_ADDR
11713: GO 11681
11715: POP
11716: POP
// end ;
11717: GO 11647
11719: POP
11720: POP
// if not result then
11721: LD_VAR 0 2
11725: NOT
11726: IFFALSE 11730
// exit ;
11728: GO 11878
// mech := result [ 1 ] ;
11730: LD_ADDR_VAR 0 5
11734: PUSH
11735: LD_VAR 0 2
11739: PUSH
11740: LD_INT 1
11742: ARRAY
11743: ST_TO_ADDR
// if result > 1 then
11744: LD_VAR 0 2
11748: PUSH
11749: LD_INT 1
11751: GREATER
11752: IFFALSE 11864
// begin for i = 2 to result do
11754: LD_ADDR_VAR 0 3
11758: PUSH
11759: DOUBLE
11760: LD_INT 2
11762: DEC
11763: ST_TO_ADDR
11764: LD_VAR 0 2
11768: PUSH
11769: FOR_TO
11770: IFFALSE 11862
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11772: LD_ADDR_VAR 0 4
11776: PUSH
11777: LD_VAR 0 2
11781: PUSH
11782: LD_VAR 0 3
11786: ARRAY
11787: PPUSH
11788: LD_INT 3
11790: PPUSH
11791: CALL_OW 259
11795: PUSH
11796: LD_VAR 0 2
11800: PUSH
11801: LD_VAR 0 3
11805: ARRAY
11806: PPUSH
11807: CALL_OW 432
11811: MINUS
11812: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11813: LD_VAR 0 4
11817: PUSH
11818: LD_VAR 0 5
11822: PPUSH
11823: LD_INT 3
11825: PPUSH
11826: CALL_OW 259
11830: PUSH
11831: LD_VAR 0 5
11835: PPUSH
11836: CALL_OW 432
11840: MINUS
11841: GREATEREQUAL
11842: IFFALSE 11860
// mech := result [ i ] ;
11844: LD_ADDR_VAR 0 5
11848: PUSH
11849: LD_VAR 0 2
11853: PUSH
11854: LD_VAR 0 3
11858: ARRAY
11859: ST_TO_ADDR
// end ;
11860: GO 11769
11862: POP
11863: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11864: LD_VAR 0 1
11868: PPUSH
11869: LD_VAR 0 5
11873: PPUSH
11874: CALL_OW 135
// end ;
11878: LD_VAR 0 2
11882: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11883: LD_INT 0
11885: PPUSH
11886: PPUSH
11887: PPUSH
11888: PPUSH
11889: PPUSH
11890: PPUSH
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
11896: PPUSH
11897: PPUSH
// result := [ ] ;
11898: LD_ADDR_VAR 0 7
11902: PUSH
11903: EMPTY
11904: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11905: LD_VAR 0 1
11909: PPUSH
11910: CALL_OW 266
11914: PUSH
11915: LD_INT 0
11917: PUSH
11918: LD_INT 1
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: IN
11925: NOT
11926: IFFALSE 11930
// exit ;
11928: GO 13570
// if name then
11930: LD_VAR 0 3
11934: IFFALSE 11950
// SetBName ( base_dep , name ) ;
11936: LD_VAR 0 1
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: CALL_OW 500
// base := GetBase ( base_dep ) ;
11950: LD_ADDR_VAR 0 15
11954: PUSH
11955: LD_VAR 0 1
11959: PPUSH
11960: CALL_OW 274
11964: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11965: LD_ADDR_VAR 0 16
11969: PUSH
11970: LD_VAR 0 1
11974: PPUSH
11975: CALL_OW 255
11979: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11980: LD_ADDR_VAR 0 17
11984: PUSH
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 248
11994: ST_TO_ADDR
// if sources then
11995: LD_VAR 0 5
11999: IFFALSE 12046
// for i = 1 to 3 do
12001: LD_ADDR_VAR 0 8
12005: PUSH
12006: DOUBLE
12007: LD_INT 1
12009: DEC
12010: ST_TO_ADDR
12011: LD_INT 3
12013: PUSH
12014: FOR_TO
12015: IFFALSE 12044
// AddResourceType ( base , i , sources [ i ] ) ;
12017: LD_VAR 0 15
12021: PPUSH
12022: LD_VAR 0 8
12026: PPUSH
12027: LD_VAR 0 5
12031: PUSH
12032: LD_VAR 0 8
12036: ARRAY
12037: PPUSH
12038: CALL_OW 276
12042: GO 12014
12044: POP
12045: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12046: LD_ADDR_VAR 0 18
12050: PUSH
12051: LD_VAR 0 15
12055: PPUSH
12056: LD_VAR 0 2
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL 11305 0 3
12068: ST_TO_ADDR
// InitHc ;
12069: CALL_OW 19
// InitUc ;
12073: CALL_OW 18
// uc_side := side ;
12077: LD_ADDR_OWVAR 20
12081: PUSH
12082: LD_VAR 0 16
12086: ST_TO_ADDR
// uc_nation := nation ;
12087: LD_ADDR_OWVAR 21
12091: PUSH
12092: LD_VAR 0 17
12096: ST_TO_ADDR
// if buildings then
12097: LD_VAR 0 18
12101: IFFALSE 13429
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12103: LD_ADDR_VAR 0 19
12107: PUSH
12108: LD_VAR 0 18
12112: PPUSH
12113: LD_INT 2
12115: PUSH
12116: LD_INT 30
12118: PUSH
12119: LD_INT 29
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 30
12128: PUSH
12129: LD_INT 30
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 72
12145: ST_TO_ADDR
// if tmp then
12146: LD_VAR 0 19
12150: IFFALSE 12198
// for i in tmp do
12152: LD_ADDR_VAR 0 8
12156: PUSH
12157: LD_VAR 0 19
12161: PUSH
12162: FOR_IN
12163: IFFALSE 12196
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12165: LD_VAR 0 8
12169: PPUSH
12170: CALL_OW 250
12174: PPUSH
12175: LD_VAR 0 8
12179: PPUSH
12180: CALL_OW 251
12184: PPUSH
12185: LD_VAR 0 16
12189: PPUSH
12190: CALL_OW 441
12194: GO 12162
12196: POP
12197: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12198: LD_VAR 0 18
12202: PPUSH
12203: LD_INT 2
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 32
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 30
12218: PUSH
12219: LD_INT 33
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: PPUSH
12231: CALL_OW 72
12235: IFFALSE 12323
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12237: LD_ADDR_VAR 0 8
12241: PUSH
12242: LD_VAR 0 18
12246: PPUSH
12247: LD_INT 2
12249: PUSH
12250: LD_INT 30
12252: PUSH
12253: LD_INT 32
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 30
12262: PUSH
12263: LD_INT 33
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 72
12279: PUSH
12280: FOR_IN
12281: IFFALSE 12321
// begin if not GetBWeapon ( i ) then
12283: LD_VAR 0 8
12287: PPUSH
12288: CALL_OW 269
12292: NOT
12293: IFFALSE 12319
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12295: LD_VAR 0 8
12299: PPUSH
12300: LD_VAR 0 8
12304: PPUSH
12305: LD_VAR 0 2
12309: PPUSH
12310: CALL 13575 0 2
12314: PPUSH
12315: CALL_OW 431
// end ;
12319: GO 12280
12321: POP
12322: POP
// end ; for i = 1 to personel do
12323: LD_ADDR_VAR 0 8
12327: PUSH
12328: DOUBLE
12329: LD_INT 1
12331: DEC
12332: ST_TO_ADDR
12333: LD_VAR 0 6
12337: PUSH
12338: FOR_TO
12339: IFFALSE 13409
// begin if i > 4 then
12341: LD_VAR 0 8
12345: PUSH
12346: LD_INT 4
12348: GREATER
12349: IFFALSE 12353
// break ;
12351: GO 13409
// case i of 1 :
12353: LD_VAR 0 8
12357: PUSH
12358: LD_INT 1
12360: DOUBLE
12361: EQUAL
12362: IFTRUE 12366
12364: GO 12446
12366: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12367: LD_ADDR_VAR 0 12
12371: PUSH
12372: LD_VAR 0 18
12376: PPUSH
12377: LD_INT 22
12379: PUSH
12380: LD_VAR 0 16
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_INT 58
12391: PUSH
12392: EMPTY
12393: LIST
12394: PUSH
12395: LD_INT 2
12397: PUSH
12398: LD_INT 30
12400: PUSH
12401: LD_INT 32
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 30
12410: PUSH
12411: LD_INT 4
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 5
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: PPUSH
12439: CALL_OW 72
12443: ST_TO_ADDR
12444: GO 12668
12446: LD_INT 2
12448: DOUBLE
12449: EQUAL
12450: IFTRUE 12454
12452: GO 12516
12454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12455: LD_ADDR_VAR 0 12
12459: PUSH
12460: LD_VAR 0 18
12464: PPUSH
12465: LD_INT 22
12467: PUSH
12468: LD_VAR 0 16
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 2
12479: PUSH
12480: LD_INT 30
12482: PUSH
12483: LD_INT 0
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 30
12492: PUSH
12493: LD_INT 1
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PPUSH
12509: CALL_OW 72
12513: ST_TO_ADDR
12514: GO 12668
12516: LD_INT 3
12518: DOUBLE
12519: EQUAL
12520: IFTRUE 12524
12522: GO 12586
12524: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12525: LD_ADDR_VAR 0 12
12529: PUSH
12530: LD_VAR 0 18
12534: PPUSH
12535: LD_INT 22
12537: PUSH
12538: LD_VAR 0 16
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 2
12549: PUSH
12550: LD_INT 30
12552: PUSH
12553: LD_INT 2
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 30
12562: PUSH
12563: LD_INT 3
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PPUSH
12579: CALL_OW 72
12583: ST_TO_ADDR
12584: GO 12668
12586: LD_INT 4
12588: DOUBLE
12589: EQUAL
12590: IFTRUE 12594
12592: GO 12667
12594: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12595: LD_ADDR_VAR 0 12
12599: PUSH
12600: LD_VAR 0 18
12604: PPUSH
12605: LD_INT 22
12607: PUSH
12608: LD_VAR 0 16
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 2
12619: PUSH
12620: LD_INT 30
12622: PUSH
12623: LD_INT 6
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: LD_INT 30
12632: PUSH
12633: LD_INT 7
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 30
12642: PUSH
12643: LD_INT 8
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 72
12664: ST_TO_ADDR
12665: GO 12668
12667: POP
// if i = 1 then
12668: LD_VAR 0 8
12672: PUSH
12673: LD_INT 1
12675: EQUAL
12676: IFFALSE 12787
// begin tmp := [ ] ;
12678: LD_ADDR_VAR 0 19
12682: PUSH
12683: EMPTY
12684: ST_TO_ADDR
// for j in f do
12685: LD_ADDR_VAR 0 9
12689: PUSH
12690: LD_VAR 0 12
12694: PUSH
12695: FOR_IN
12696: IFFALSE 12769
// if GetBType ( j ) = b_bunker then
12698: LD_VAR 0 9
12702: PPUSH
12703: CALL_OW 266
12707: PUSH
12708: LD_INT 32
12710: EQUAL
12711: IFFALSE 12738
// tmp := Insert ( tmp , 1 , j ) else
12713: LD_ADDR_VAR 0 19
12717: PUSH
12718: LD_VAR 0 19
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_VAR 0 9
12730: PPUSH
12731: CALL_OW 2
12735: ST_TO_ADDR
12736: GO 12767
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12738: LD_ADDR_VAR 0 19
12742: PUSH
12743: LD_VAR 0 19
12747: PPUSH
12748: LD_VAR 0 19
12752: PUSH
12753: LD_INT 1
12755: PLUS
12756: PPUSH
12757: LD_VAR 0 9
12761: PPUSH
12762: CALL_OW 2
12766: ST_TO_ADDR
12767: GO 12695
12769: POP
12770: POP
// if tmp then
12771: LD_VAR 0 19
12775: IFFALSE 12787
// f := tmp ;
12777: LD_ADDR_VAR 0 12
12781: PUSH
12782: LD_VAR 0 19
12786: ST_TO_ADDR
// end ; x := personel [ i ] ;
12787: LD_ADDR_VAR 0 13
12791: PUSH
12792: LD_VAR 0 6
12796: PUSH
12797: LD_VAR 0 8
12801: ARRAY
12802: ST_TO_ADDR
// if x = - 1 then
12803: LD_VAR 0 13
12807: PUSH
12808: LD_INT 1
12810: NEG
12811: EQUAL
12812: IFFALSE 13023
// begin for j in f do
12814: LD_ADDR_VAR 0 9
12818: PUSH
12819: LD_VAR 0 12
12823: PUSH
12824: FOR_IN
12825: IFFALSE 13019
// repeat InitHc ;
12827: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12831: LD_VAR 0 9
12835: PPUSH
12836: CALL_OW 266
12840: PUSH
12841: LD_INT 5
12843: EQUAL
12844: IFFALSE 12914
// begin if UnitsInside ( j ) < 3 then
12846: LD_VAR 0 9
12850: PPUSH
12851: CALL_OW 313
12855: PUSH
12856: LD_INT 3
12858: LESS
12859: IFFALSE 12895
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12861: LD_INT 0
12863: PPUSH
12864: LD_INT 5
12866: PUSH
12867: LD_INT 8
12869: PUSH
12870: LD_INT 9
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: LD_VAR 0 17
12882: ARRAY
12883: PPUSH
12884: LD_VAR 0 4
12888: PPUSH
12889: CALL_OW 380
12893: GO 12912
// PrepareHuman ( false , i , skill ) ;
12895: LD_INT 0
12897: PPUSH
12898: LD_VAR 0 8
12902: PPUSH
12903: LD_VAR 0 4
12907: PPUSH
12908: CALL_OW 380
// end else
12912: GO 12931
// PrepareHuman ( false , i , skill ) ;
12914: LD_INT 0
12916: PPUSH
12917: LD_VAR 0 8
12921: PPUSH
12922: LD_VAR 0 4
12926: PPUSH
12927: CALL_OW 380
// un := CreateHuman ;
12931: LD_ADDR_VAR 0 14
12935: PUSH
12936: CALL_OW 44
12940: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12941: LD_ADDR_VAR 0 7
12945: PUSH
12946: LD_VAR 0 7
12950: PPUSH
12951: LD_INT 1
12953: PPUSH
12954: LD_VAR 0 14
12958: PPUSH
12959: CALL_OW 2
12963: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12964: LD_VAR 0 14
12968: PPUSH
12969: LD_VAR 0 9
12973: PPUSH
12974: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12978: LD_VAR 0 9
12982: PPUSH
12983: CALL_OW 313
12987: PUSH
12988: LD_INT 6
12990: EQUAL
12991: IFTRUE 13015
12993: PUSH
12994: LD_VAR 0 9
12998: PPUSH
12999: CALL_OW 266
13003: PUSH
13004: LD_INT 32
13006: PUSH
13007: LD_INT 31
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: IN
13014: OR
13015: IFFALSE 12827
13017: GO 12824
13019: POP
13020: POP
// end else
13021: GO 13407
// for j = 1 to x do
13023: LD_ADDR_VAR 0 9
13027: PUSH
13028: DOUBLE
13029: LD_INT 1
13031: DEC
13032: ST_TO_ADDR
13033: LD_VAR 0 13
13037: PUSH
13038: FOR_TO
13039: IFFALSE 13405
// begin InitHc ;
13041: CALL_OW 19
// if not f then
13045: LD_VAR 0 12
13049: NOT
13050: IFFALSE 13139
// begin PrepareHuman ( false , i , skill ) ;
13052: LD_INT 0
13054: PPUSH
13055: LD_VAR 0 8
13059: PPUSH
13060: LD_VAR 0 4
13064: PPUSH
13065: CALL_OW 380
// un := CreateHuman ;
13069: LD_ADDR_VAR 0 14
13073: PUSH
13074: CALL_OW 44
13078: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13079: LD_ADDR_VAR 0 7
13083: PUSH
13084: LD_VAR 0 7
13088: PPUSH
13089: LD_INT 1
13091: PPUSH
13092: LD_VAR 0 14
13096: PPUSH
13097: CALL_OW 2
13101: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13102: LD_VAR 0 14
13106: PPUSH
13107: LD_VAR 0 1
13111: PPUSH
13112: CALL_OW 250
13116: PPUSH
13117: LD_VAR 0 1
13121: PPUSH
13122: CALL_OW 251
13126: PPUSH
13127: LD_INT 10
13129: PPUSH
13130: LD_INT 0
13132: PPUSH
13133: CALL_OW 50
// continue ;
13137: GO 13038
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13139: LD_VAR 0 12
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PPUSH
13148: CALL_OW 313
13152: IFFALSE 13180
13154: PUSH
13155: LD_VAR 0 12
13159: PUSH
13160: LD_INT 1
13162: ARRAY
13163: PPUSH
13164: CALL_OW 266
13168: PUSH
13169: LD_INT 32
13171: PUSH
13172: LD_INT 31
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: IN
13179: AND
13180: IFTRUE 13201
13182: PUSH
13183: LD_VAR 0 12
13187: PUSH
13188: LD_INT 1
13190: ARRAY
13191: PPUSH
13192: CALL_OW 313
13196: PUSH
13197: LD_INT 6
13199: EQUAL
13200: OR
13201: IFFALSE 13221
// f := Delete ( f , 1 ) ;
13203: LD_ADDR_VAR 0 12
13207: PUSH
13208: LD_VAR 0 12
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: CALL_OW 3
13220: ST_TO_ADDR
// if not f then
13221: LD_VAR 0 12
13225: NOT
13226: IFFALSE 13244
// begin x := x + 2 ;
13228: LD_ADDR_VAR 0 13
13232: PUSH
13233: LD_VAR 0 13
13237: PUSH
13238: LD_INT 2
13240: PLUS
13241: ST_TO_ADDR
// continue ;
13242: GO 13038
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13244: LD_VAR 0 12
13248: PUSH
13249: LD_INT 1
13251: ARRAY
13252: PPUSH
13253: CALL_OW 266
13257: PUSH
13258: LD_INT 5
13260: EQUAL
13261: IFFALSE 13335
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13263: LD_VAR 0 12
13267: PUSH
13268: LD_INT 1
13270: ARRAY
13271: PPUSH
13272: CALL_OW 313
13276: PUSH
13277: LD_INT 3
13279: LESS
13280: IFFALSE 13316
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13282: LD_INT 0
13284: PPUSH
13285: LD_INT 5
13287: PUSH
13288: LD_INT 8
13290: PUSH
13291: LD_INT 9
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: PUSH
13299: LD_VAR 0 17
13303: ARRAY
13304: PPUSH
13305: LD_VAR 0 4
13309: PPUSH
13310: CALL_OW 380
13314: GO 13333
// PrepareHuman ( false , i , skill ) ;
13316: LD_INT 0
13318: PPUSH
13319: LD_VAR 0 8
13323: PPUSH
13324: LD_VAR 0 4
13328: PPUSH
13329: CALL_OW 380
// end else
13333: GO 13352
// PrepareHuman ( false , i , skill ) ;
13335: LD_INT 0
13337: PPUSH
13338: LD_VAR 0 8
13342: PPUSH
13343: LD_VAR 0 4
13347: PPUSH
13348: CALL_OW 380
// un := CreateHuman ;
13352: LD_ADDR_VAR 0 14
13356: PUSH
13357: CALL_OW 44
13361: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13362: LD_ADDR_VAR 0 7
13366: PUSH
13367: LD_VAR 0 7
13371: PPUSH
13372: LD_INT 1
13374: PPUSH
13375: LD_VAR 0 14
13379: PPUSH
13380: CALL_OW 2
13384: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13385: LD_VAR 0 14
13389: PPUSH
13390: LD_VAR 0 12
13394: PUSH
13395: LD_INT 1
13397: ARRAY
13398: PPUSH
13399: CALL_OW 52
// end ;
13403: GO 13038
13405: POP
13406: POP
// end ;
13407: GO 12338
13409: POP
13410: POP
// result := result ^ buildings ;
13411: LD_ADDR_VAR 0 7
13415: PUSH
13416: LD_VAR 0 7
13420: PUSH
13421: LD_VAR 0 18
13425: ADD
13426: ST_TO_ADDR
// end else
13427: GO 13570
// begin for i = 1 to personel do
13429: LD_ADDR_VAR 0 8
13433: PUSH
13434: DOUBLE
13435: LD_INT 1
13437: DEC
13438: ST_TO_ADDR
13439: LD_VAR 0 6
13443: PUSH
13444: FOR_TO
13445: IFFALSE 13568
// begin if i > 4 then
13447: LD_VAR 0 8
13451: PUSH
13452: LD_INT 4
13454: GREATER
13455: IFFALSE 13459
// break ;
13457: GO 13568
// x := personel [ i ] ;
13459: LD_ADDR_VAR 0 13
13463: PUSH
13464: LD_VAR 0 6
13468: PUSH
13469: LD_VAR 0 8
13473: ARRAY
13474: ST_TO_ADDR
// if x = - 1 then
13475: LD_VAR 0 13
13479: PUSH
13480: LD_INT 1
13482: NEG
13483: EQUAL
13484: IFFALSE 13488
// continue ;
13486: GO 13444
// PrepareHuman ( false , i , skill ) ;
13488: LD_INT 0
13490: PPUSH
13491: LD_VAR 0 8
13495: PPUSH
13496: LD_VAR 0 4
13500: PPUSH
13501: CALL_OW 380
// un := CreateHuman ;
13505: LD_ADDR_VAR 0 14
13509: PUSH
13510: CALL_OW 44
13514: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13515: LD_VAR 0 14
13519: PPUSH
13520: LD_VAR 0 1
13524: PPUSH
13525: CALL_OW 250
13529: PPUSH
13530: LD_VAR 0 1
13534: PPUSH
13535: CALL_OW 251
13539: PPUSH
13540: LD_INT 10
13542: PPUSH
13543: LD_INT 0
13545: PPUSH
13546: CALL_OW 50
// result := result ^ un ;
13550: LD_ADDR_VAR 0 7
13554: PUSH
13555: LD_VAR 0 7
13559: PUSH
13560: LD_VAR 0 14
13564: ADD
13565: ST_TO_ADDR
// end ;
13566: GO 13444
13568: POP
13569: POP
// end ; end ;
13570: LD_VAR 0 7
13574: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13575: LD_INT 0
13577: PPUSH
13578: PPUSH
13579: PPUSH
13580: PPUSH
13581: PPUSH
13582: PPUSH
13583: PPUSH
13584: PPUSH
13585: PPUSH
13586: PPUSH
13587: PPUSH
13588: PPUSH
13589: PPUSH
13590: PPUSH
13591: PPUSH
13592: PPUSH
// result := false ;
13593: LD_ADDR_VAR 0 3
13597: PUSH
13598: LD_INT 0
13600: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13601: LD_VAR 0 1
13605: NOT
13606: IFTRUE 13631
13608: PUSH
13609: LD_VAR 0 1
13613: PPUSH
13614: CALL_OW 266
13618: PUSH
13619: LD_INT 32
13621: PUSH
13622: LD_INT 33
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: IN
13629: NOT
13630: OR
13631: IFFALSE 13635
// exit ;
13633: GO 14770
// nat := GetNation ( tower ) ;
13635: LD_ADDR_VAR 0 12
13639: PUSH
13640: LD_VAR 0 1
13644: PPUSH
13645: CALL_OW 248
13649: ST_TO_ADDR
// side := GetSide ( tower ) ;
13650: LD_ADDR_VAR 0 16
13654: PUSH
13655: LD_VAR 0 1
13659: PPUSH
13660: CALL_OW 255
13664: ST_TO_ADDR
// x := GetX ( tower ) ;
13665: LD_ADDR_VAR 0 10
13669: PUSH
13670: LD_VAR 0 1
13674: PPUSH
13675: CALL_OW 250
13679: ST_TO_ADDR
// y := GetY ( tower ) ;
13680: LD_ADDR_VAR 0 11
13684: PUSH
13685: LD_VAR 0 1
13689: PPUSH
13690: CALL_OW 251
13694: ST_TO_ADDR
// if not x or not y then
13695: LD_VAR 0 10
13699: NOT
13700: IFTRUE 13709
13702: PUSH
13703: LD_VAR 0 11
13707: NOT
13708: OR
13709: IFFALSE 13713
// exit ;
13711: GO 14770
// weapon := 0 ;
13713: LD_ADDR_VAR 0 18
13717: PUSH
13718: LD_INT 0
13720: ST_TO_ADDR
// fac_list := [ ] ;
13721: LD_ADDR_VAR 0 17
13725: PUSH
13726: EMPTY
13727: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13728: LD_ADDR_VAR 0 6
13732: PUSH
13733: LD_VAR 0 1
13737: PPUSH
13738: CALL_OW 274
13742: PPUSH
13743: LD_VAR 0 2
13747: PPUSH
13748: LD_INT 0
13750: PPUSH
13751: CALL 11305 0 3
13755: PPUSH
13756: LD_INT 30
13758: PUSH
13759: LD_INT 3
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 72
13770: ST_TO_ADDR
// if not factories then
13771: LD_VAR 0 6
13775: NOT
13776: IFFALSE 13780
// exit ;
13778: GO 14770
// for i in factories do
13780: LD_ADDR_VAR 0 8
13784: PUSH
13785: LD_VAR 0 6
13789: PUSH
13790: FOR_IN
13791: IFFALSE 13816
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13793: LD_ADDR_VAR 0 17
13797: PUSH
13798: LD_VAR 0 17
13802: PUSH
13803: LD_VAR 0 8
13807: PPUSH
13808: CALL_OW 478
13812: UNION
13813: ST_TO_ADDR
13814: GO 13790
13816: POP
13817: POP
// if not fac_list then
13818: LD_VAR 0 17
13822: NOT
13823: IFFALSE 13827
// exit ;
13825: GO 14770
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13827: LD_ADDR_VAR 0 5
13831: PUSH
13832: LD_INT 4
13834: PUSH
13835: LD_INT 5
13837: PUSH
13838: LD_INT 9
13840: PUSH
13841: LD_INT 10
13843: PUSH
13844: LD_INT 6
13846: PUSH
13847: LD_INT 7
13849: PUSH
13850: LD_INT 11
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 27
13864: PUSH
13865: LD_INT 28
13867: PUSH
13868: LD_INT 26
13870: PUSH
13871: LD_INT 30
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 43
13882: PUSH
13883: LD_INT 44
13885: PUSH
13886: LD_INT 46
13888: PUSH
13889: LD_INT 45
13891: PUSH
13892: LD_INT 47
13894: PUSH
13895: LD_INT 49
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: LD_VAR 0 12
13915: ARRAY
13916: ST_TO_ADDR
// list := list isect fac_list ;
13917: LD_ADDR_VAR 0 5
13921: PUSH
13922: LD_VAR 0 5
13926: PUSH
13927: LD_VAR 0 17
13931: ISECT
13932: ST_TO_ADDR
// if not list then
13933: LD_VAR 0 5
13937: NOT
13938: IFFALSE 13942
// exit ;
13940: GO 14770
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13942: LD_VAR 0 12
13946: PUSH
13947: LD_INT 3
13949: EQUAL
13950: IFFALSE 13962
13952: PUSH
13953: LD_INT 49
13955: PUSH
13956: LD_VAR 0 5
13960: IN
13961: AND
13962: IFFALSE 13982
13964: PUSH
13965: LD_INT 31
13967: PPUSH
13968: LD_VAR 0 16
13972: PPUSH
13973: CALL_OW 321
13977: PUSH
13978: LD_INT 2
13980: EQUAL
13981: AND
13982: IFFALSE 14042
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13984: LD_INT 22
13986: PUSH
13987: LD_VAR 0 16
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 35
13998: PUSH
13999: LD_INT 49
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: LD_INT 91
14008: PUSH
14009: LD_VAR 0 1
14013: PUSH
14014: LD_INT 10
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: PPUSH
14027: CALL_OW 69
14031: NOT
14032: IFFALSE 14042
// weapon := ru_time_lapser ;
14034: LD_ADDR_VAR 0 18
14038: PUSH
14039: LD_INT 49
14041: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14042: LD_VAR 0 12
14046: PUSH
14047: LD_INT 1
14049: PUSH
14050: LD_INT 2
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: IN
14057: IFFALSE 14081
14059: PUSH
14060: LD_INT 11
14062: PUSH
14063: LD_VAR 0 5
14067: IN
14068: IFTRUE 14080
14070: PUSH
14071: LD_INT 30
14073: PUSH
14074: LD_VAR 0 5
14078: IN
14079: OR
14080: AND
14081: IFFALSE 14101
14083: PUSH
14084: LD_INT 6
14086: PPUSH
14087: LD_VAR 0 16
14091: PPUSH
14092: CALL_OW 321
14096: PUSH
14097: LD_INT 2
14099: EQUAL
14100: AND
14101: IFFALSE 14268
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14103: LD_INT 22
14105: PUSH
14106: LD_VAR 0 16
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 2
14117: PUSH
14118: LD_INT 35
14120: PUSH
14121: LD_INT 11
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 35
14130: PUSH
14131: LD_INT 30
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 91
14145: PUSH
14146: LD_VAR 0 1
14150: PUSH
14151: LD_INT 18
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: NOT
14169: IFFALSE 14245
14171: PUSH
14172: LD_INT 22
14174: PUSH
14175: LD_VAR 0 16
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 2
14186: PUSH
14187: LD_INT 30
14189: PUSH
14190: LD_INT 32
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 30
14199: PUSH
14200: LD_INT 33
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: PUSH
14212: LD_INT 91
14214: PUSH
14215: LD_VAR 0 1
14219: PUSH
14220: LD_INT 12
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: LIST
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: EMPTY
14234: LIST
14235: PPUSH
14236: CALL_OW 69
14240: PUSH
14241: LD_INT 2
14243: GREATER
14244: AND
14245: IFFALSE 14268
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14247: LD_ADDR_VAR 0 18
14251: PUSH
14252: LD_INT 11
14254: PUSH
14255: LD_INT 30
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_VAR 0 12
14266: ARRAY
14267: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14268: LD_VAR 0 18
14272: NOT
14273: IFFALSE 14293
14275: PUSH
14276: LD_INT 40
14278: PPUSH
14279: LD_VAR 0 16
14283: PPUSH
14284: CALL_OW 321
14288: PUSH
14289: LD_INT 2
14291: EQUAL
14292: AND
14293: IFFALSE 14329
14295: PUSH
14296: LD_INT 7
14298: PUSH
14299: LD_VAR 0 5
14303: IN
14304: IFTRUE 14316
14306: PUSH
14307: LD_INT 28
14309: PUSH
14310: LD_VAR 0 5
14314: IN
14315: OR
14316: IFTRUE 14328
14318: PUSH
14319: LD_INT 45
14321: PUSH
14322: LD_VAR 0 5
14326: IN
14327: OR
14328: AND
14329: IFFALSE 14583
// begin hex := GetHexInfo ( x , y ) ;
14331: LD_ADDR_VAR 0 4
14335: PUSH
14336: LD_VAR 0 10
14340: PPUSH
14341: LD_VAR 0 11
14345: PPUSH
14346: CALL_OW 546
14350: ST_TO_ADDR
// if hex [ 1 ] then
14351: LD_VAR 0 4
14355: PUSH
14356: LD_INT 1
14358: ARRAY
14359: IFFALSE 14363
// exit ;
14361: GO 14770
// height := hex [ 2 ] ;
14363: LD_ADDR_VAR 0 15
14367: PUSH
14368: LD_VAR 0 4
14372: PUSH
14373: LD_INT 2
14375: ARRAY
14376: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14377: LD_ADDR_VAR 0 14
14381: PUSH
14382: LD_INT 0
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: LD_INT 5
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: ST_TO_ADDR
// for i in tmp do
14400: LD_ADDR_VAR 0 8
14404: PUSH
14405: LD_VAR 0 14
14409: PUSH
14410: FOR_IN
14411: IFFALSE 14581
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14413: LD_ADDR_VAR 0 9
14417: PUSH
14418: LD_VAR 0 10
14422: PPUSH
14423: LD_VAR 0 8
14427: PPUSH
14428: LD_INT 5
14430: PPUSH
14431: CALL_OW 272
14435: PUSH
14436: LD_VAR 0 11
14440: PPUSH
14441: LD_VAR 0 8
14445: PPUSH
14446: LD_INT 5
14448: PPUSH
14449: CALL_OW 273
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14458: LD_VAR 0 9
14462: PUSH
14463: LD_INT 1
14465: ARRAY
14466: PPUSH
14467: LD_VAR 0 9
14471: PUSH
14472: LD_INT 2
14474: ARRAY
14475: PPUSH
14476: CALL_OW 488
14480: IFFALSE 14579
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14482: LD_ADDR_VAR 0 4
14486: PUSH
14487: LD_VAR 0 9
14491: PUSH
14492: LD_INT 1
14494: ARRAY
14495: PPUSH
14496: LD_VAR 0 9
14500: PUSH
14501: LD_INT 2
14503: ARRAY
14504: PPUSH
14505: CALL_OW 546
14509: ST_TO_ADDR
// if hex [ 1 ] then
14510: LD_VAR 0 4
14514: PUSH
14515: LD_INT 1
14517: ARRAY
14518: IFFALSE 14522
// continue ;
14520: GO 14410
// h := hex [ 2 ] ;
14522: LD_ADDR_VAR 0 13
14526: PUSH
14527: LD_VAR 0 4
14531: PUSH
14532: LD_INT 2
14534: ARRAY
14535: ST_TO_ADDR
// if h + 7 < height then
14536: LD_VAR 0 13
14540: PUSH
14541: LD_INT 7
14543: PLUS
14544: PUSH
14545: LD_VAR 0 15
14549: LESS
14550: IFFALSE 14579
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14552: LD_ADDR_VAR 0 18
14556: PUSH
14557: LD_INT 7
14559: PUSH
14560: LD_INT 28
14562: PUSH
14563: LD_INT 45
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: PUSH
14571: LD_VAR 0 12
14575: ARRAY
14576: ST_TO_ADDR
// break ;
14577: GO 14581
// end ; end ; end ;
14579: GO 14410
14581: POP
14582: POP
// end ; if not weapon then
14583: LD_VAR 0 18
14587: NOT
14588: IFFALSE 14648
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14590: LD_ADDR_VAR 0 5
14594: PUSH
14595: LD_VAR 0 5
14599: PUSH
14600: LD_INT 11
14602: PUSH
14603: LD_INT 30
14605: PUSH
14606: LD_INT 49
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: DIFF
14614: ST_TO_ADDR
// if not list then
14615: LD_VAR 0 5
14619: NOT
14620: IFFALSE 14624
// exit ;
14622: GO 14770
// weapon := list [ rand ( 1 , list ) ] ;
14624: LD_ADDR_VAR 0 18
14628: PUSH
14629: LD_VAR 0 5
14633: PUSH
14634: LD_INT 1
14636: PPUSH
14637: LD_VAR 0 5
14641: PPUSH
14642: CALL_OW 12
14646: ARRAY
14647: ST_TO_ADDR
// end ; if weapon then
14648: LD_VAR 0 18
14652: IFFALSE 14770
// begin tmp := CostOfWeapon ( weapon ) ;
14654: LD_ADDR_VAR 0 14
14658: PUSH
14659: LD_VAR 0 18
14663: PPUSH
14664: CALL_OW 451
14668: ST_TO_ADDR
// j := GetBase ( tower ) ;
14669: LD_ADDR_VAR 0 9
14673: PUSH
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 274
14683: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14684: LD_VAR 0 9
14688: PPUSH
14689: LD_INT 1
14691: PPUSH
14692: CALL_OW 275
14696: PUSH
14697: LD_VAR 0 14
14701: PUSH
14702: LD_INT 1
14704: ARRAY
14705: GREATEREQUAL
14706: IFFALSE 14732
14708: PUSH
14709: LD_VAR 0 9
14713: PPUSH
14714: LD_INT 2
14716: PPUSH
14717: CALL_OW 275
14721: PUSH
14722: LD_VAR 0 14
14726: PUSH
14727: LD_INT 2
14729: ARRAY
14730: GREATEREQUAL
14731: AND
14732: IFFALSE 14758
14734: PUSH
14735: LD_VAR 0 9
14739: PPUSH
14740: LD_INT 3
14742: PPUSH
14743: CALL_OW 275
14747: PUSH
14748: LD_VAR 0 14
14752: PUSH
14753: LD_INT 3
14755: ARRAY
14756: GREATEREQUAL
14757: AND
14758: IFFALSE 14770
// result := weapon ;
14760: LD_ADDR_VAR 0 3
14764: PUSH
14765: LD_VAR 0 18
14769: ST_TO_ADDR
// end ; end ;
14770: LD_VAR 0 3
14774: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14775: LD_INT 0
14777: PPUSH
14778: PPUSH
// result := true ;
14779: LD_ADDR_VAR 0 3
14783: PUSH
14784: LD_INT 1
14786: ST_TO_ADDR
// if array1 = array2 then
14787: LD_VAR 0 1
14791: PUSH
14792: LD_VAR 0 2
14796: EQUAL
14797: IFFALSE 14857
// begin for i = 1 to array1 do
14799: LD_ADDR_VAR 0 4
14803: PUSH
14804: DOUBLE
14805: LD_INT 1
14807: DEC
14808: ST_TO_ADDR
14809: LD_VAR 0 1
14813: PUSH
14814: FOR_TO
14815: IFFALSE 14853
// if array1 [ i ] <> array2 [ i ] then
14817: LD_VAR 0 1
14821: PUSH
14822: LD_VAR 0 4
14826: ARRAY
14827: PUSH
14828: LD_VAR 0 2
14832: PUSH
14833: LD_VAR 0 4
14837: ARRAY
14838: NONEQUAL
14839: IFFALSE 14851
// begin result := false ;
14841: LD_ADDR_VAR 0 3
14845: PUSH
14846: LD_INT 0
14848: ST_TO_ADDR
// break ;
14849: GO 14853
// end ;
14851: GO 14814
14853: POP
14854: POP
// end else
14855: GO 14865
// result := false ;
14857: LD_ADDR_VAR 0 3
14861: PUSH
14862: LD_INT 0
14864: ST_TO_ADDR
// end ;
14865: LD_VAR 0 3
14869: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14870: LD_INT 0
14872: PPUSH
14873: PPUSH
// if not array1 or not array2 then
14874: LD_VAR 0 1
14878: NOT
14879: IFTRUE 14888
14881: PUSH
14882: LD_VAR 0 2
14886: NOT
14887: OR
14888: IFFALSE 14892
// exit ;
14890: GO 14956
// result := true ;
14892: LD_ADDR_VAR 0 3
14896: PUSH
14897: LD_INT 1
14899: ST_TO_ADDR
// for i = 1 to array1 do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 1
14914: PUSH
14915: FOR_TO
14916: IFFALSE 14954
// if array1 [ i ] <> array2 [ i ] then
14918: LD_VAR 0 1
14922: PUSH
14923: LD_VAR 0 4
14927: ARRAY
14928: PUSH
14929: LD_VAR 0 2
14933: PUSH
14934: LD_VAR 0 4
14938: ARRAY
14939: NONEQUAL
14940: IFFALSE 14952
// begin result := false ;
14942: LD_ADDR_VAR 0 3
14946: PUSH
14947: LD_INT 0
14949: ST_TO_ADDR
// break ;
14950: GO 14954
// end ;
14952: GO 14915
14954: POP
14955: POP
// end ;
14956: LD_VAR 0 3
14960: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14961: LD_INT 0
14963: PPUSH
14964: PPUSH
14965: PPUSH
// pom := GetBase ( fac ) ;
14966: LD_ADDR_VAR 0 5
14970: PUSH
14971: LD_VAR 0 1
14975: PPUSH
14976: CALL_OW 274
14980: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14981: LD_ADDR_VAR 0 4
14985: PUSH
14986: LD_VAR 0 2
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: LD_VAR 0 2
14999: PUSH
15000: LD_INT 2
15002: ARRAY
15003: PPUSH
15004: LD_VAR 0 2
15008: PUSH
15009: LD_INT 3
15011: ARRAY
15012: PPUSH
15013: LD_VAR 0 2
15017: PUSH
15018: LD_INT 4
15020: ARRAY
15021: PPUSH
15022: CALL_OW 449
15026: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_VAR 0 5
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 275
15044: PUSH
15045: LD_VAR 0 4
15049: PUSH
15050: LD_INT 1
15052: ARRAY
15053: GREATEREQUAL
15054: IFFALSE 15080
15056: PUSH
15057: LD_VAR 0 5
15061: PPUSH
15062: LD_INT 2
15064: PPUSH
15065: CALL_OW 275
15069: PUSH
15070: LD_VAR 0 4
15074: PUSH
15075: LD_INT 2
15077: ARRAY
15078: GREATEREQUAL
15079: AND
15080: IFFALSE 15106
15082: PUSH
15083: LD_VAR 0 5
15087: PPUSH
15088: LD_INT 3
15090: PPUSH
15091: CALL_OW 275
15095: PUSH
15096: LD_VAR 0 4
15100: PUSH
15101: LD_INT 3
15103: ARRAY
15104: GREATEREQUAL
15105: AND
15106: ST_TO_ADDR
// end ;
15107: LD_VAR 0 3
15111: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15112: LD_INT 0
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
// pom := GetBase ( building ) ;
15118: LD_ADDR_VAR 0 3
15122: PUSH
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL_OW 274
15132: ST_TO_ADDR
// if not pom then
15133: LD_VAR 0 3
15137: NOT
15138: IFFALSE 15142
// exit ;
15140: GO 15316
// btype := GetBType ( building ) ;
15142: LD_ADDR_VAR 0 5
15146: PUSH
15147: LD_VAR 0 1
15151: PPUSH
15152: CALL_OW 266
15156: ST_TO_ADDR
// if btype = b_armoury then
15157: LD_VAR 0 5
15161: PUSH
15162: LD_INT 4
15164: EQUAL
15165: IFFALSE 15175
// btype := b_barracks ;
15167: LD_ADDR_VAR 0 5
15171: PUSH
15172: LD_INT 5
15174: ST_TO_ADDR
// if btype = b_depot then
15175: LD_VAR 0 5
15179: PUSH
15180: LD_INT 0
15182: EQUAL
15183: IFFALSE 15193
// btype := b_warehouse ;
15185: LD_ADDR_VAR 0 5
15189: PUSH
15190: LD_INT 1
15192: ST_TO_ADDR
// if btype = b_workshop then
15193: LD_VAR 0 5
15197: PUSH
15198: LD_INT 2
15200: EQUAL
15201: IFFALSE 15211
// btype := b_factory ;
15203: LD_ADDR_VAR 0 5
15207: PUSH
15208: LD_INT 3
15210: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15211: LD_ADDR_VAR 0 4
15215: PUSH
15216: LD_VAR 0 5
15220: PPUSH
15221: LD_VAR 0 1
15225: PPUSH
15226: CALL_OW 248
15230: PPUSH
15231: CALL_OW 450
15235: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15236: LD_ADDR_VAR 0 2
15240: PUSH
15241: LD_VAR 0 3
15245: PPUSH
15246: LD_INT 1
15248: PPUSH
15249: CALL_OW 275
15253: PUSH
15254: LD_VAR 0 4
15258: PUSH
15259: LD_INT 1
15261: ARRAY
15262: GREATEREQUAL
15263: IFFALSE 15289
15265: PUSH
15266: LD_VAR 0 3
15270: PPUSH
15271: LD_INT 2
15273: PPUSH
15274: CALL_OW 275
15278: PUSH
15279: LD_VAR 0 4
15283: PUSH
15284: LD_INT 2
15286: ARRAY
15287: GREATEREQUAL
15288: AND
15289: IFFALSE 15315
15291: PUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: LD_INT 3
15299: PPUSH
15300: CALL_OW 275
15304: PUSH
15305: LD_VAR 0 4
15309: PUSH
15310: LD_INT 3
15312: ARRAY
15313: GREATEREQUAL
15314: AND
15315: ST_TO_ADDR
// end ;
15316: LD_VAR 0 2
15320: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15321: LD_INT 0
15323: PPUSH
15324: PPUSH
15325: PPUSH
// pom := GetBase ( building ) ;
15326: LD_ADDR_VAR 0 4
15330: PUSH
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 274
15340: ST_TO_ADDR
// if not pom then
15341: LD_VAR 0 4
15345: NOT
15346: IFFALSE 15350
// exit ;
15348: GO 15455
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15350: LD_ADDR_VAR 0 5
15354: PUSH
15355: LD_VAR 0 2
15359: PPUSH
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 248
15369: PPUSH
15370: CALL_OW 450
15374: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15375: LD_ADDR_VAR 0 3
15379: PUSH
15380: LD_VAR 0 4
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: CALL_OW 275
15392: PUSH
15393: LD_VAR 0 5
15397: PUSH
15398: LD_INT 1
15400: ARRAY
15401: GREATEREQUAL
15402: IFFALSE 15428
15404: PUSH
15405: LD_VAR 0 4
15409: PPUSH
15410: LD_INT 2
15412: PPUSH
15413: CALL_OW 275
15417: PUSH
15418: LD_VAR 0 5
15422: PUSH
15423: LD_INT 2
15425: ARRAY
15426: GREATEREQUAL
15427: AND
15428: IFFALSE 15454
15430: PUSH
15431: LD_VAR 0 4
15435: PPUSH
15436: LD_INT 3
15438: PPUSH
15439: CALL_OW 275
15443: PUSH
15444: LD_VAR 0 5
15448: PUSH
15449: LD_INT 3
15451: ARRAY
15452: GREATEREQUAL
15453: AND
15454: ST_TO_ADDR
// end ;
15455: LD_VAR 0 3
15459: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15460: LD_INT 0
15462: PPUSH
15463: PPUSH
15464: PPUSH
15465: PPUSH
15466: PPUSH
15467: PPUSH
15468: PPUSH
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
// result := false ;
15473: LD_ADDR_VAR 0 8
15477: PUSH
15478: LD_INT 0
15480: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15481: LD_VAR 0 5
15485: NOT
15486: IFTRUE 15495
15488: PUSH
15489: LD_VAR 0 1
15493: NOT
15494: OR
15495: IFTRUE 15504
15497: PUSH
15498: LD_VAR 0 2
15502: NOT
15503: OR
15504: IFTRUE 15513
15506: PUSH
15507: LD_VAR 0 3
15511: NOT
15512: OR
15513: IFFALSE 15517
// exit ;
15515: GO 16343
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15517: LD_ADDR_VAR 0 14
15521: PUSH
15522: LD_VAR 0 1
15526: PPUSH
15527: LD_VAR 0 2
15531: PPUSH
15532: LD_VAR 0 3
15536: PPUSH
15537: LD_VAR 0 4
15541: PPUSH
15542: LD_VAR 0 5
15546: PUSH
15547: LD_INT 1
15549: ARRAY
15550: PPUSH
15551: CALL_OW 248
15555: PPUSH
15556: LD_INT 0
15558: PPUSH
15559: CALL 17624 0 6
15563: ST_TO_ADDR
// if not hexes then
15564: LD_VAR 0 14
15568: NOT
15569: IFFALSE 15573
// exit ;
15571: GO 16343
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15573: LD_ADDR_VAR 0 17
15577: PUSH
15578: LD_VAR 0 5
15582: PPUSH
15583: LD_INT 22
15585: PUSH
15586: LD_VAR 0 13
15590: PPUSH
15591: CALL_OW 255
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 2
15602: PUSH
15603: LD_INT 30
15605: PUSH
15606: LD_INT 0
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 30
15615: PUSH
15616: LD_INT 1
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PPUSH
15632: CALL_OW 72
15636: ST_TO_ADDR
// for i = 1 to hexes do
15637: LD_ADDR_VAR 0 9
15641: PUSH
15642: DOUBLE
15643: LD_INT 1
15645: DEC
15646: ST_TO_ADDR
15647: LD_VAR 0 14
15651: PUSH
15652: FOR_TO
15653: IFFALSE 16341
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15655: LD_ADDR_VAR 0 13
15659: PUSH
15660: LD_VAR 0 14
15664: PUSH
15665: LD_VAR 0 9
15669: ARRAY
15670: PUSH
15671: LD_INT 1
15673: ARRAY
15674: PPUSH
15675: LD_VAR 0 14
15679: PUSH
15680: LD_VAR 0 9
15684: ARRAY
15685: PUSH
15686: LD_INT 2
15688: ARRAY
15689: PPUSH
15690: CALL_OW 428
15694: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15695: LD_VAR 0 14
15699: PUSH
15700: LD_VAR 0 9
15704: ARRAY
15705: PUSH
15706: LD_INT 1
15708: ARRAY
15709: PPUSH
15710: LD_VAR 0 14
15714: PUSH
15715: LD_VAR 0 9
15719: ARRAY
15720: PUSH
15721: LD_INT 2
15723: ARRAY
15724: PPUSH
15725: CALL_OW 351
15729: IFTRUE 15768
15731: PUSH
15732: LD_VAR 0 14
15736: PUSH
15737: LD_VAR 0 9
15741: ARRAY
15742: PUSH
15743: LD_INT 1
15745: ARRAY
15746: PPUSH
15747: LD_VAR 0 14
15751: PUSH
15752: LD_VAR 0 9
15756: ARRAY
15757: PUSH
15758: LD_INT 2
15760: ARRAY
15761: PPUSH
15762: CALL_OW 488
15766: NOT
15767: OR
15768: IFTRUE 15785
15770: PUSH
15771: LD_VAR 0 13
15775: PPUSH
15776: CALL_OW 247
15780: PUSH
15781: LD_INT 3
15783: EQUAL
15784: OR
15785: IFFALSE 15791
// exit ;
15787: POP
15788: POP
15789: GO 16343
// if not tmp then
15791: LD_VAR 0 13
15795: NOT
15796: IFFALSE 15800
// continue ;
15798: GO 15652
// result := true ;
15800: LD_ADDR_VAR 0 8
15804: PUSH
15805: LD_INT 1
15807: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15808: LD_VAR 0 6
15812: IFFALSE 15829
15814: PUSH
15815: LD_VAR 0 13
15819: PPUSH
15820: CALL_OW 247
15824: PUSH
15825: LD_INT 2
15827: EQUAL
15828: AND
15829: IFFALSE 15846
15831: PUSH
15832: LD_VAR 0 13
15836: PPUSH
15837: CALL_OW 263
15841: PUSH
15842: LD_INT 1
15844: EQUAL
15845: AND
15846: IFFALSE 16010
// begin if IsDrivenBy ( tmp ) then
15848: LD_VAR 0 13
15852: PPUSH
15853: CALL_OW 311
15857: IFFALSE 15861
// continue ;
15859: GO 15652
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15861: LD_VAR 0 6
15865: PPUSH
15866: LD_INT 3
15868: PUSH
15869: LD_INT 60
15871: PUSH
15872: EMPTY
15873: LIST
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: LD_INT 55
15884: PUSH
15885: EMPTY
15886: LIST
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PPUSH
15896: CALL_OW 72
15900: IFFALSE 16008
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15902: LD_ADDR_VAR 0 18
15906: PUSH
15907: LD_VAR 0 6
15911: PPUSH
15912: LD_INT 3
15914: PUSH
15915: LD_INT 60
15917: PUSH
15918: EMPTY
15919: LIST
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PUSH
15925: LD_INT 3
15927: PUSH
15928: LD_INT 55
15930: PUSH
15931: EMPTY
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 72
15946: PUSH
15947: LD_INT 1
15949: ARRAY
15950: ST_TO_ADDR
// if IsInUnit ( driver ) then
15951: LD_VAR 0 18
15955: PPUSH
15956: CALL_OW 310
15960: IFFALSE 15971
// ComExit ( driver ) ;
15962: LD_VAR 0 18
15966: PPUSH
15967: CALL 41624 0 1
// AddComEnterUnit ( driver , tmp ) ;
15971: LD_VAR 0 18
15975: PPUSH
15976: LD_VAR 0 13
15980: PPUSH
15981: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15985: LD_VAR 0 18
15989: PPUSH
15990: LD_VAR 0 7
15994: PPUSH
15995: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15999: LD_VAR 0 18
16003: PPUSH
16004: CALL_OW 181
// end ; continue ;
16008: GO 15652
// end ; if not cleaners or not tmp in cleaners then
16010: LD_VAR 0 6
16014: NOT
16015: IFTRUE 16030
16017: PUSH
16018: LD_VAR 0 13
16022: PUSH
16023: LD_VAR 0 6
16027: IN
16028: NOT
16029: OR
16030: IFFALSE 16339
// begin if dep then
16032: LD_VAR 0 17
16036: IFFALSE 16172
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16038: LD_ADDR_VAR 0 16
16042: PUSH
16043: LD_VAR 0 17
16047: PUSH
16048: LD_INT 1
16050: ARRAY
16051: PPUSH
16052: CALL_OW 250
16056: PPUSH
16057: LD_VAR 0 17
16061: PUSH
16062: LD_INT 1
16064: ARRAY
16065: PPUSH
16066: CALL_OW 254
16070: PPUSH
16071: LD_INT 5
16073: PPUSH
16074: CALL_OW 272
16078: PUSH
16079: LD_VAR 0 17
16083: PUSH
16084: LD_INT 1
16086: ARRAY
16087: PPUSH
16088: CALL_OW 251
16092: PPUSH
16093: LD_VAR 0 17
16097: PUSH
16098: LD_INT 1
16100: ARRAY
16101: PPUSH
16102: CALL_OW 254
16106: PPUSH
16107: LD_INT 5
16109: PPUSH
16110: CALL_OW 273
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16119: LD_VAR 0 16
16123: PUSH
16124: LD_INT 1
16126: ARRAY
16127: PPUSH
16128: LD_VAR 0 16
16132: PUSH
16133: LD_INT 2
16135: ARRAY
16136: PPUSH
16137: CALL_OW 488
16141: IFFALSE 16172
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16143: LD_VAR 0 13
16147: PPUSH
16148: LD_VAR 0 16
16152: PUSH
16153: LD_INT 1
16155: ARRAY
16156: PPUSH
16157: LD_VAR 0 16
16161: PUSH
16162: LD_INT 2
16164: ARRAY
16165: PPUSH
16166: CALL_OW 111
// continue ;
16170: GO 15652
// end ; end ; r := GetDir ( tmp ) ;
16172: LD_ADDR_VAR 0 15
16176: PUSH
16177: LD_VAR 0 13
16181: PPUSH
16182: CALL_OW 254
16186: ST_TO_ADDR
// if r = 5 then
16187: LD_VAR 0 15
16191: PUSH
16192: LD_INT 5
16194: EQUAL
16195: IFFALSE 16205
// r := 0 ;
16197: LD_ADDR_VAR 0 15
16201: PUSH
16202: LD_INT 0
16204: ST_TO_ADDR
// for j = r to 5 do
16205: LD_ADDR_VAR 0 10
16209: PUSH
16210: DOUBLE
16211: LD_VAR 0 15
16215: DEC
16216: ST_TO_ADDR
16217: LD_INT 5
16219: PUSH
16220: FOR_TO
16221: IFFALSE 16337
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16223: LD_ADDR_VAR 0 11
16227: PUSH
16228: LD_VAR 0 13
16232: PPUSH
16233: CALL_OW 250
16237: PPUSH
16238: LD_VAR 0 10
16242: PPUSH
16243: LD_INT 2
16245: PPUSH
16246: CALL_OW 272
16250: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16251: LD_ADDR_VAR 0 12
16255: PUSH
16256: LD_VAR 0 13
16260: PPUSH
16261: CALL_OW 251
16265: PPUSH
16266: LD_VAR 0 10
16270: PPUSH
16271: LD_INT 2
16273: PPUSH
16274: CALL_OW 273
16278: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16279: LD_VAR 0 11
16283: PPUSH
16284: LD_VAR 0 12
16288: PPUSH
16289: CALL_OW 488
16293: IFFALSE 16312
16295: PUSH
16296: LD_VAR 0 11
16300: PPUSH
16301: LD_VAR 0 12
16305: PPUSH
16306: CALL_OW 428
16310: NOT
16311: AND
16312: IFFALSE 16335
// begin ComMoveXY ( tmp , _x , _y ) ;
16314: LD_VAR 0 13
16318: PPUSH
16319: LD_VAR 0 11
16323: PPUSH
16324: LD_VAR 0 12
16328: PPUSH
16329: CALL_OW 111
// break ;
16333: GO 16337
// end ; end ;
16335: GO 16220
16337: POP
16338: POP
// end ; end ;
16339: GO 15652
16341: POP
16342: POP
// end ;
16343: LD_VAR 0 8
16347: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16348: LD_INT 0
16350: PPUSH
// result := true ;
16351: LD_ADDR_VAR 0 3
16355: PUSH
16356: LD_INT 1
16358: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16359: LD_VAR 0 2
16363: PUSH
16364: LD_INT 24
16366: DOUBLE
16367: EQUAL
16368: IFTRUE 16378
16370: LD_INT 33
16372: DOUBLE
16373: EQUAL
16374: IFTRUE 16378
16376: GO 16403
16378: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16379: LD_ADDR_VAR 0 3
16383: PUSH
16384: LD_INT 32
16386: PPUSH
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 321
16396: PUSH
16397: LD_INT 2
16399: EQUAL
16400: ST_TO_ADDR
16401: GO 16719
16403: LD_INT 20
16405: DOUBLE
16406: EQUAL
16407: IFTRUE 16411
16409: GO 16436
16411: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16412: LD_ADDR_VAR 0 3
16416: PUSH
16417: LD_INT 6
16419: PPUSH
16420: LD_VAR 0 1
16424: PPUSH
16425: CALL_OW 321
16429: PUSH
16430: LD_INT 2
16432: EQUAL
16433: ST_TO_ADDR
16434: GO 16719
16436: LD_INT 22
16438: DOUBLE
16439: EQUAL
16440: IFTRUE 16450
16442: LD_INT 36
16444: DOUBLE
16445: EQUAL
16446: IFTRUE 16450
16448: GO 16475
16450: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16451: LD_ADDR_VAR 0 3
16455: PUSH
16456: LD_INT 15
16458: PPUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 321
16468: PUSH
16469: LD_INT 2
16471: EQUAL
16472: ST_TO_ADDR
16473: GO 16719
16475: LD_INT 30
16477: DOUBLE
16478: EQUAL
16479: IFTRUE 16483
16481: GO 16508
16483: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16484: LD_ADDR_VAR 0 3
16488: PUSH
16489: LD_INT 20
16491: PPUSH
16492: LD_VAR 0 1
16496: PPUSH
16497: CALL_OW 321
16501: PUSH
16502: LD_INT 2
16504: EQUAL
16505: ST_TO_ADDR
16506: GO 16719
16508: LD_INT 28
16510: DOUBLE
16511: EQUAL
16512: IFTRUE 16522
16514: LD_INT 21
16516: DOUBLE
16517: EQUAL
16518: IFTRUE 16522
16520: GO 16547
16522: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16523: LD_ADDR_VAR 0 3
16527: PUSH
16528: LD_INT 21
16530: PPUSH
16531: LD_VAR 0 1
16535: PPUSH
16536: CALL_OW 321
16540: PUSH
16541: LD_INT 2
16543: EQUAL
16544: ST_TO_ADDR
16545: GO 16719
16547: LD_INT 16
16549: DOUBLE
16550: EQUAL
16551: IFTRUE 16555
16553: GO 16580
16555: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16556: LD_ADDR_VAR 0 3
16560: PUSH
16561: LD_INT 84
16563: PPUSH
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 321
16573: PUSH
16574: LD_INT 2
16576: EQUAL
16577: ST_TO_ADDR
16578: GO 16719
16580: LD_INT 19
16582: DOUBLE
16583: EQUAL
16584: IFTRUE 16594
16586: LD_INT 23
16588: DOUBLE
16589: EQUAL
16590: IFTRUE 16594
16592: GO 16619
16594: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16595: LD_ADDR_VAR 0 3
16599: PUSH
16600: LD_INT 83
16602: PPUSH
16603: LD_VAR 0 1
16607: PPUSH
16608: CALL_OW 321
16612: PUSH
16613: LD_INT 2
16615: EQUAL
16616: ST_TO_ADDR
16617: GO 16719
16619: LD_INT 17
16621: DOUBLE
16622: EQUAL
16623: IFTRUE 16627
16625: GO 16652
16627: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16628: LD_ADDR_VAR 0 3
16632: PUSH
16633: LD_INT 39
16635: PPUSH
16636: LD_VAR 0 1
16640: PPUSH
16641: CALL_OW 321
16645: PUSH
16646: LD_INT 2
16648: EQUAL
16649: ST_TO_ADDR
16650: GO 16719
16652: LD_INT 18
16654: DOUBLE
16655: EQUAL
16656: IFTRUE 16660
16658: GO 16685
16660: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16661: LD_ADDR_VAR 0 3
16665: PUSH
16666: LD_INT 40
16668: PPUSH
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 321
16678: PUSH
16679: LD_INT 2
16681: EQUAL
16682: ST_TO_ADDR
16683: GO 16719
16685: LD_INT 27
16687: DOUBLE
16688: EQUAL
16689: IFTRUE 16693
16691: GO 16718
16693: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16694: LD_ADDR_VAR 0 3
16698: PUSH
16699: LD_INT 35
16701: PPUSH
16702: LD_VAR 0 1
16706: PPUSH
16707: CALL_OW 321
16711: PUSH
16712: LD_INT 2
16714: EQUAL
16715: ST_TO_ADDR
16716: GO 16719
16718: POP
// end ;
16719: LD_VAR 0 3
16723: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16724: LD_INT 0
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
16730: PPUSH
16731: PPUSH
16732: PPUSH
16733: PPUSH
16734: PPUSH
16735: PPUSH
16736: PPUSH
// result := false ;
16737: LD_ADDR_VAR 0 6
16741: PUSH
16742: LD_INT 0
16744: ST_TO_ADDR
// if btype = b_depot then
16745: LD_VAR 0 2
16749: PUSH
16750: LD_INT 0
16752: EQUAL
16753: IFFALSE 16765
// begin result := true ;
16755: LD_ADDR_VAR 0 6
16759: PUSH
16760: LD_INT 1
16762: ST_TO_ADDR
// exit ;
16763: GO 17619
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16765: LD_VAR 0 1
16769: NOT
16770: IFTRUE 16795
16772: PUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: CALL_OW 266
16782: PUSH
16783: LD_INT 0
16785: PUSH
16786: LD_INT 1
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: IN
16793: NOT
16794: OR
16795: IFTRUE 16804
16797: PUSH
16798: LD_VAR 0 2
16802: NOT
16803: OR
16804: IFTRUE 16840
16806: PUSH
16807: LD_VAR 0 5
16811: PUSH
16812: LD_INT 0
16814: PUSH
16815: LD_INT 1
16817: PUSH
16818: LD_INT 2
16820: PUSH
16821: LD_INT 3
16823: PUSH
16824: LD_INT 4
16826: PUSH
16827: LD_INT 5
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: LIST
16837: IN
16838: NOT
16839: OR
16840: IFTRUE 16859
16842: PUSH
16843: LD_VAR 0 3
16847: PPUSH
16848: LD_VAR 0 4
16852: PPUSH
16853: CALL_OW 488
16857: NOT
16858: OR
16859: IFFALSE 16863
// exit ;
16861: GO 17619
// side := GetSide ( depot ) ;
16863: LD_ADDR_VAR 0 9
16867: PUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 255
16877: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16878: LD_VAR 0 9
16882: PPUSH
16883: LD_VAR 0 2
16887: PPUSH
16888: CALL 16348 0 2
16892: NOT
16893: IFFALSE 16897
// exit ;
16895: GO 17619
// pom := GetBase ( depot ) ;
16897: LD_ADDR_VAR 0 10
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 274
16911: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16912: LD_ADDR_VAR 0 11
16916: PUSH
16917: LD_VAR 0 2
16921: PPUSH
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 248
16931: PPUSH
16932: CALL_OW 450
16936: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16937: LD_VAR 0 10
16941: PPUSH
16942: LD_INT 1
16944: PPUSH
16945: CALL_OW 275
16949: PUSH
16950: LD_VAR 0 11
16954: PUSH
16955: LD_INT 1
16957: ARRAY
16958: GREATEREQUAL
16959: IFFALSE 16985
16961: PUSH
16962: LD_VAR 0 10
16966: PPUSH
16967: LD_INT 2
16969: PPUSH
16970: CALL_OW 275
16974: PUSH
16975: LD_VAR 0 11
16979: PUSH
16980: LD_INT 2
16982: ARRAY
16983: GREATEREQUAL
16984: AND
16985: IFFALSE 17011
16987: PUSH
16988: LD_VAR 0 10
16992: PPUSH
16993: LD_INT 3
16995: PPUSH
16996: CALL_OW 275
17000: PUSH
17001: LD_VAR 0 11
17005: PUSH
17006: LD_INT 3
17008: ARRAY
17009: GREATEREQUAL
17010: AND
17011: NOT
17012: IFFALSE 17016
// exit ;
17014: GO 17619
// if GetBType ( depot ) = b_depot then
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 266
17025: PUSH
17026: LD_INT 0
17028: EQUAL
17029: IFFALSE 17041
// dist := 28 else
17031: LD_ADDR_VAR 0 14
17035: PUSH
17036: LD_INT 28
17038: ST_TO_ADDR
17039: GO 17049
// dist := 36 ;
17041: LD_ADDR_VAR 0 14
17045: PUSH
17046: LD_INT 36
17048: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17049: LD_VAR 0 1
17053: PPUSH
17054: LD_VAR 0 3
17058: PPUSH
17059: LD_VAR 0 4
17063: PPUSH
17064: CALL_OW 297
17068: PUSH
17069: LD_VAR 0 14
17073: GREATER
17074: IFFALSE 17078
// exit ;
17076: GO 17619
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17078: LD_ADDR_VAR 0 12
17082: PUSH
17083: LD_VAR 0 2
17087: PPUSH
17088: LD_VAR 0 3
17092: PPUSH
17093: LD_VAR 0 4
17097: PPUSH
17098: LD_VAR 0 5
17102: PPUSH
17103: LD_VAR 0 1
17107: PPUSH
17108: CALL_OW 248
17112: PPUSH
17113: LD_INT 0
17115: PPUSH
17116: CALL 17624 0 6
17120: ST_TO_ADDR
// if not hexes then
17121: LD_VAR 0 12
17125: NOT
17126: IFFALSE 17130
// exit ;
17128: GO 17619
// hex := GetHexInfo ( x , y ) ;
17130: LD_ADDR_VAR 0 15
17134: PUSH
17135: LD_VAR 0 3
17139: PPUSH
17140: LD_VAR 0 4
17144: PPUSH
17145: CALL_OW 546
17149: ST_TO_ADDR
// if hex [ 1 ] then
17150: LD_VAR 0 15
17154: PUSH
17155: LD_INT 1
17157: ARRAY
17158: IFFALSE 17162
// exit ;
17160: GO 17619
// height := hex [ 2 ] ;
17162: LD_ADDR_VAR 0 13
17166: PUSH
17167: LD_VAR 0 15
17171: PUSH
17172: LD_INT 2
17174: ARRAY
17175: ST_TO_ADDR
// for i = 1 to hexes do
17176: LD_ADDR_VAR 0 7
17180: PUSH
17181: DOUBLE
17182: LD_INT 1
17184: DEC
17185: ST_TO_ADDR
17186: LD_VAR 0 12
17190: PUSH
17191: FOR_TO
17192: IFFALSE 17536
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17194: LD_VAR 0 12
17198: PUSH
17199: LD_VAR 0 7
17203: ARRAY
17204: PUSH
17205: LD_INT 1
17207: ARRAY
17208: PPUSH
17209: LD_VAR 0 12
17213: PUSH
17214: LD_VAR 0 7
17218: ARRAY
17219: PUSH
17220: LD_INT 2
17222: ARRAY
17223: PPUSH
17224: CALL_OW 488
17228: NOT
17229: IFTRUE 17271
17231: PUSH
17232: LD_VAR 0 12
17236: PUSH
17237: LD_VAR 0 7
17241: ARRAY
17242: PUSH
17243: LD_INT 1
17245: ARRAY
17246: PPUSH
17247: LD_VAR 0 12
17251: PUSH
17252: LD_VAR 0 7
17256: ARRAY
17257: PUSH
17258: LD_INT 2
17260: ARRAY
17261: PPUSH
17262: CALL_OW 428
17266: PUSH
17267: LD_INT 0
17269: GREATER
17270: OR
17271: IFTRUE 17309
17273: PUSH
17274: LD_VAR 0 12
17278: PUSH
17279: LD_VAR 0 7
17283: ARRAY
17284: PUSH
17285: LD_INT 1
17287: ARRAY
17288: PPUSH
17289: LD_VAR 0 12
17293: PUSH
17294: LD_VAR 0 7
17298: ARRAY
17299: PUSH
17300: LD_INT 2
17302: ARRAY
17303: PPUSH
17304: CALL_OW 351
17308: OR
17309: IFFALSE 17315
// exit ;
17311: POP
17312: POP
17313: GO 17619
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17315: LD_ADDR_VAR 0 8
17319: PUSH
17320: LD_VAR 0 12
17324: PUSH
17325: LD_VAR 0 7
17329: ARRAY
17330: PUSH
17331: LD_INT 1
17333: ARRAY
17334: PPUSH
17335: LD_VAR 0 12
17339: PUSH
17340: LD_VAR 0 7
17344: ARRAY
17345: PUSH
17346: LD_INT 2
17348: ARRAY
17349: PPUSH
17350: CALL_OW 546
17354: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17355: LD_VAR 0 8
17359: PUSH
17360: LD_INT 1
17362: ARRAY
17363: IFTRUE 17385
17365: PUSH
17366: LD_VAR 0 8
17370: PUSH
17371: LD_INT 2
17373: ARRAY
17374: PUSH
17375: LD_VAR 0 13
17379: PUSH
17380: LD_INT 2
17382: PLUS
17383: GREATER
17384: OR
17385: IFTRUE 17407
17387: PUSH
17388: LD_VAR 0 8
17392: PUSH
17393: LD_INT 2
17395: ARRAY
17396: PUSH
17397: LD_VAR 0 13
17401: PUSH
17402: LD_INT 2
17404: MINUS
17405: LESS
17406: OR
17407: IFTRUE 17475
17409: PUSH
17410: LD_VAR 0 8
17414: PUSH
17415: LD_INT 3
17417: ARRAY
17418: PUSH
17419: LD_INT 0
17421: PUSH
17422: LD_INT 8
17424: PUSH
17425: LD_INT 9
17427: PUSH
17428: LD_INT 10
17430: PUSH
17431: LD_INT 11
17433: PUSH
17434: LD_INT 12
17436: PUSH
17437: LD_INT 13
17439: PUSH
17440: LD_INT 16
17442: PUSH
17443: LD_INT 17
17445: PUSH
17446: LD_INT 18
17448: PUSH
17449: LD_INT 19
17451: PUSH
17452: LD_INT 20
17454: PUSH
17455: LD_INT 21
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: IN
17473: NOT
17474: OR
17475: IFTRUE 17488
17477: PUSH
17478: LD_VAR 0 8
17482: PUSH
17483: LD_INT 5
17485: ARRAY
17486: NOT
17487: OR
17488: IFTRUE 17528
17490: PUSH
17491: LD_VAR 0 8
17495: PUSH
17496: LD_INT 6
17498: ARRAY
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 7
17508: PUSH
17509: LD_INT 9
17511: PUSH
17512: LD_INT 10
17514: PUSH
17515: LD_INT 11
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: IN
17526: NOT
17527: OR
17528: IFFALSE 17534
// exit ;
17530: POP
17531: POP
17532: GO 17619
// end ;
17534: GO 17191
17536: POP
17537: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17538: LD_VAR 0 9
17542: PPUSH
17543: LD_VAR 0 3
17547: PPUSH
17548: LD_VAR 0 4
17552: PPUSH
17553: LD_INT 20
17555: PPUSH
17556: CALL 9438 0 4
17560: PUSH
17561: LD_INT 4
17563: ARRAY
17564: IFFALSE 17568
// exit ;
17566: GO 17619
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17568: LD_VAR 0 2
17572: PUSH
17573: LD_INT 29
17575: PUSH
17576: LD_INT 30
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: IN
17583: IFFALSE 17607
17585: PUSH
17586: LD_VAR 0 3
17590: PPUSH
17591: LD_VAR 0 4
17595: PPUSH
17596: LD_VAR 0 9
17600: PPUSH
17601: CALL_OW 440
17605: NOT
17606: AND
17607: IFFALSE 17611
// exit ;
17609: GO 17619
// result := true ;
17611: LD_ADDR_VAR 0 6
17615: PUSH
17616: LD_INT 1
17618: ST_TO_ADDR
// end ;
17619: LD_VAR 0 6
17623: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17624: LD_INT 0
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
// result = [ ] ;
17684: LD_ADDR_VAR 0 7
17688: PUSH
17689: EMPTY
17690: ST_TO_ADDR
// temp_list = [ ] ;
17691: LD_ADDR_VAR 0 9
17695: PUSH
17696: EMPTY
17697: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17698: LD_VAR 0 4
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: LD_INT 2
17711: PUSH
17712: LD_INT 3
17714: PUSH
17715: LD_INT 4
17717: PUSH
17718: LD_INT 5
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: IN
17729: NOT
17730: IFTRUE 17773
17732: PUSH
17733: LD_VAR 0 1
17737: PUSH
17738: LD_INT 0
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: IN
17748: IFFALSE 17772
17750: PUSH
17751: LD_VAR 0 5
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: LD_INT 2
17761: PUSH
17762: LD_INT 3
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: LIST
17769: IN
17770: NOT
17771: AND
17772: OR
17773: IFFALSE 17777
// exit ;
17775: GO 36176
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17777: LD_VAR 0 1
17781: PUSH
17782: LD_INT 6
17784: PUSH
17785: LD_INT 7
17787: PUSH
17788: LD_INT 8
17790: PUSH
17791: LD_INT 13
17793: PUSH
17794: LD_INT 12
17796: PUSH
17797: LD_INT 15
17799: PUSH
17800: LD_INT 11
17802: PUSH
17803: LD_INT 14
17805: PUSH
17806: LD_INT 10
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: IN
17820: IFFALSE 17830
// btype = b_lab ;
17822: LD_ADDR_VAR 0 1
17826: PUSH
17827: LD_INT 6
17829: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17830: LD_VAR 0 6
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: LD_INT 1
17840: PUSH
17841: LD_INT 2
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: LIST
17848: IN
17849: NOT
17850: IFTRUE 17918
17852: PUSH
17853: LD_VAR 0 1
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: LD_INT 1
17863: PUSH
17864: LD_INT 2
17866: PUSH
17867: LD_INT 3
17869: PUSH
17870: LD_INT 6
17872: PUSH
17873: LD_INT 36
17875: PUSH
17876: LD_INT 4
17878: PUSH
17879: LD_INT 5
17881: PUSH
17882: LD_INT 31
17884: PUSH
17885: LD_INT 32
17887: PUSH
17888: LD_INT 33
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: IN
17904: NOT
17905: IFFALSE 17917
17907: PUSH
17908: LD_VAR 0 6
17912: PUSH
17913: LD_INT 1
17915: EQUAL
17916: AND
17917: OR
17918: IFTRUE 17950
17920: PUSH
17921: LD_VAR 0 1
17925: PUSH
17926: LD_INT 2
17928: PUSH
17929: LD_INT 3
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: IN
17936: NOT
17937: IFFALSE 17949
17939: PUSH
17940: LD_VAR 0 6
17944: PUSH
17945: LD_INT 2
17947: EQUAL
17948: AND
17949: OR
17950: IFFALSE 17960
// mode = 0 ;
17952: LD_ADDR_VAR 0 6
17956: PUSH
17957: LD_INT 0
17959: ST_TO_ADDR
// case mode of 0 :
17960: LD_VAR 0 6
17964: PUSH
17965: LD_INT 0
17967: DOUBLE
17968: EQUAL
17969: IFTRUE 17973
17971: GO 29426
17973: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17974: LD_ADDR_VAR 0 11
17978: PUSH
17979: LD_INT 0
17981: PUSH
17982: LD_INT 0
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: LD_INT 1
17994: NEG
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 0
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 1
18032: NEG
18033: PUSH
18034: LD_INT 0
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 1
18043: NEG
18044: PUSH
18045: LD_INT 1
18047: NEG
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: LD_INT 2
18059: NEG
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: LD_INT 2
18070: NEG
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: LD_INT 1
18081: NEG
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: LD_INT 2
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: LD_INT 2
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 1
18109: NEG
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 1
18120: PUSH
18121: LD_INT 3
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 0
18130: PUSH
18131: LD_INT 3
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 1
18140: NEG
18141: PUSH
18142: LD_INT 2
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18167: LD_ADDR_VAR 0 12
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: LD_INT 1
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 1
18236: NEG
18237: PUSH
18238: LD_INT 1
18240: NEG
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 2
18290: NEG
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 2
18301: NEG
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 2
18313: NEG
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 3
18324: NEG
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 3
18335: NEG
18336: PUSH
18337: LD_INT 1
18339: NEG
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18363: LD_ADDR_VAR 0 13
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 0
18380: PUSH
18381: LD_INT 1
18383: NEG
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: LD_INT 1
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: NEG
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: NEG
18433: PUSH
18434: LD_INT 1
18436: NEG
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 1
18444: NEG
18445: PUSH
18446: LD_INT 2
18448: NEG
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 2
18466: PUSH
18467: LD_INT 2
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: NEG
18487: PUSH
18488: LD_INT 1
18490: NEG
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 2
18498: NEG
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 2
18510: NEG
18511: PUSH
18512: LD_INT 3
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 3
18522: NEG
18523: PUSH
18524: LD_INT 2
18526: NEG
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 3
18534: NEG
18535: PUSH
18536: LD_INT 3
18538: NEG
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18562: LD_ADDR_VAR 0 14
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 0
18579: PUSH
18580: LD_INT 1
18582: NEG
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: LD_INT 0
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: LD_INT 1
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: NEG
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 1
18631: NEG
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: NEG
18644: PUSH
18645: LD_INT 2
18647: NEG
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: LD_INT 2
18658: NEG
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: LD_INT 1
18669: NEG
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: LD_INT 2
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: LD_INT 2
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 1
18708: NEG
18709: PUSH
18710: LD_INT 3
18712: NEG
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 0
18720: PUSH
18721: LD_INT 3
18723: NEG
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: LD_INT 2
18734: NEG
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18758: LD_ADDR_VAR 0 15
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 0
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 1
18816: NEG
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: NEG
18828: PUSH
18829: LD_INT 1
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: LD_INT 1
18842: NEG
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 2
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: LD_INT 1
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: NEG
18871: PUSH
18872: LD_INT 1
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 2
18881: NEG
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 2
18892: NEG
18893: PUSH
18894: LD_INT 1
18896: NEG
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: LD_INT 1
18907: NEG
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 3
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 3
18925: PUSH
18926: LD_INT 1
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18951: LD_ADDR_VAR 0 16
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: LD_INT 1
18971: NEG
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 0
18999: PUSH
19000: LD_INT 1
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: LD_INT 1
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: LD_INT 2
19036: NEG
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 2
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: PUSH
19055: LD_INT 2
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: LD_INT 2
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: NEG
19075: PUSH
19076: LD_INT 1
19078: NEG
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 2
19086: NEG
19087: PUSH
19088: LD_INT 2
19090: NEG
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 3
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 3
19108: PUSH
19109: LD_INT 3
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: LD_INT 3
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19144: LD_ADDR_VAR 0 17
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: LD_INT 0
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: LD_INT 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 0
19192: PUSH
19193: LD_INT 1
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: NEG
19203: PUSH
19204: LD_INT 0
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 1
19213: NEG
19214: PUSH
19215: LD_INT 1
19217: NEG
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: LD_INT 2
19229: NEG
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 0
19237: PUSH
19238: LD_INT 2
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: LD_INT 1
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 2
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 2
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: LD_INT 2
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: NEG
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 2
19331: NEG
19332: PUSH
19333: LD_INT 1
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: NEG
19344: PUSH
19345: LD_INT 2
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19374: LD_ADDR_VAR 0 18
19378: PUSH
19379: LD_INT 0
19381: PUSH
19382: LD_INT 0
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: LD_INT 1
19394: NEG
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 0
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 1
19432: NEG
19433: PUSH
19434: LD_INT 0
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: NEG
19444: PUSH
19445: LD_INT 1
19447: NEG
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 1
19455: NEG
19456: PUSH
19457: LD_INT 2
19459: NEG
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 0
19467: PUSH
19468: LD_INT 2
19470: NEG
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 1
19478: PUSH
19479: LD_INT 1
19481: NEG
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 2
19509: PUSH
19510: LD_INT 2
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: LD_INT 2
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 0
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 2
19550: NEG
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 2
19561: NEG
19562: PUSH
19563: LD_INT 1
19565: NEG
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: NEG
19574: PUSH
19575: LD_INT 2
19577: NEG
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19604: LD_ADDR_VAR 0 19
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: LD_INT 1
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 1
19642: PUSH
19643: LD_INT 1
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 0
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 1
19662: NEG
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 1
19673: NEG
19674: PUSH
19675: LD_INT 1
19677: NEG
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: LD_INT 2
19689: NEG
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 0
19697: PUSH
19698: LD_INT 2
19700: NEG
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: LD_INT 0
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 2
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: LD_INT 2
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: LD_INT 2
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 2
19780: NEG
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 2
19791: NEG
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: NEG
19804: PUSH
19805: LD_INT 2
19807: NEG
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19834: LD_ADDR_VAR 0 20
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: LD_INT 1
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: LD_INT 1
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 1
19892: NEG
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 1
19903: NEG
19904: PUSH
19905: LD_INT 1
19907: NEG
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: LD_INT 2
19919: NEG
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: LD_INT 2
19930: NEG
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 2
19949: PUSH
19950: LD_INT 0
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 2
19959: PUSH
19960: LD_INT 1
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 2
19969: PUSH
19970: LD_INT 2
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: LD_INT 2
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: LD_INT 1
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 2
20010: NEG
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 2
20021: NEG
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 2
20033: NEG
20034: PUSH
20035: LD_INT 2
20037: NEG
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20064: LD_ADDR_VAR 0 21
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: LD_INT 0
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: LD_INT 1
20084: NEG
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: LD_INT 1
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 0
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 1
20122: NEG
20123: PUSH
20124: LD_INT 0
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 1
20133: NEG
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: NEG
20146: PUSH
20147: LD_INT 2
20149: NEG
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 0
20157: PUSH
20158: LD_INT 2
20160: NEG
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: LD_INT 0
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 2
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: LD_INT 2
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: LD_INT 2
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 0
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: LD_INT 1
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 2
20240: NEG
20241: PUSH
20242: LD_INT 0
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 2
20251: NEG
20252: PUSH
20253: LD_INT 1
20255: NEG
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 2
20263: NEG
20264: PUSH
20265: LD_INT 2
20267: NEG
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20294: LD_ADDR_VAR 0 22
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: LD_INT 0
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: LD_INT 1
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: LD_INT 1
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: LD_INT 0
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 1
20363: NEG
20364: PUSH
20365: LD_INT 1
20367: NEG
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 1
20375: NEG
20376: PUSH
20377: LD_INT 2
20379: NEG
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: LD_INT 2
20390: NEG
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 1
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 2
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 2
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: LD_INT 2
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: LD_INT 2
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: LD_INT 2
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 1
20459: NEG
20460: PUSH
20461: LD_INT 1
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 2
20470: NEG
20471: PUSH
20472: LD_INT 0
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 2
20481: NEG
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: NEG
20494: PUSH
20495: LD_INT 2
20497: NEG
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20524: LD_ADDR_VAR 0 23
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: LD_INT 0
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 1
20544: NEG
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: LD_INT 1
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: LD_INT 2
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: LD_INT 2
20620: NEG
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 2
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: LD_INT 2
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: LD_INT 2
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 1
20689: NEG
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 2
20700: NEG
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: NEG
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 2
20723: NEG
20724: PUSH
20725: LD_INT 2
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 2
20735: NEG
20736: PUSH
20737: LD_INT 3
20739: NEG
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: LD_INT 3
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 1
20759: PUSH
20760: LD_INT 2
20762: NEG
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20804: LD_ADDR_VAR 0 24
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: LD_INT 1
20824: NEG
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: LD_INT 1
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: LD_INT 1
20862: NEG
20863: PUSH
20864: LD_INT 0
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 1
20873: NEG
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: LD_INT 2
20889: NEG
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 0
20897: PUSH
20898: LD_INT 2
20900: NEG
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: LD_INT 1
20911: NEG
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 2
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: PUSH
20940: LD_INT 2
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: NEG
20970: PUSH
20971: LD_INT 1
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: NEG
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 2
20991: NEG
20992: PUSH
20993: LD_INT 1
20995: NEG
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 2
21003: NEG
21004: PUSH
21005: LD_INT 2
21007: NEG
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: LD_INT 2
21018: NEG
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 2
21026: PUSH
21027: LD_INT 1
21029: NEG
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 3
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 3
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21080: LD_ADDR_VAR 0 25
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: LD_INT 1
21100: NEG
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 1
21161: NEG
21162: PUSH
21163: LD_INT 2
21165: NEG
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 0
21173: PUSH
21174: LD_INT 2
21176: NEG
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: LD_INT 1
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 2
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 0
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: NEG
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 2
21256: NEG
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 2
21267: NEG
21268: PUSH
21269: LD_INT 1
21271: NEG
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 2
21279: NEG
21280: PUSH
21281: LD_INT 2
21283: NEG
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 3
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 3
21301: PUSH
21302: LD_INT 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 2
21311: PUSH
21312: LD_INT 3
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: PUSH
21322: LD_INT 3
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21354: LD_ADDR_VAR 0 26
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: LD_INT 0
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: LD_INT 1
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 1
21392: PUSH
21393: LD_INT 1
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: LD_INT 1
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 1
21412: NEG
21413: PUSH
21414: LD_INT 0
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 0
21447: PUSH
21448: LD_INT 2
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 2
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 2
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: NEG
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 2
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: NEG
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: LD_INT 3
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: LD_INT 3
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 1
21585: NEG
21586: PUSH
21587: LD_INT 2
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 2
21596: NEG
21597: PUSH
21598: LD_INT 1
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21630: LD_ADDR_VAR 0 27
21634: PUSH
21635: LD_INT 0
21637: PUSH
21638: LD_INT 0
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: LD_INT 1
21650: NEG
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: PUSH
21669: LD_INT 1
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 0
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 1
21688: NEG
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: LD_INT 2
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 0
21723: PUSH
21724: LD_INT 2
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: LD_INT 1
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: LD_INT 0
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 2
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: NEG
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 2
21806: NEG
21807: PUSH
21808: LD_INT 0
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 2
21817: NEG
21818: PUSH
21819: LD_INT 1
21821: NEG
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 2
21829: NEG
21830: PUSH
21831: LD_INT 2
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 3
21863: NEG
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 3
21875: NEG
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21910: LD_ADDR_VAR 0 28
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: LD_INT 0
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: LD_INT 1
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: NEG
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 2
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: LD_INT 2
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 1
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 2
22025: PUSH
22026: LD_INT 0
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 2
22086: NEG
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: NEG
22098: PUSH
22099: LD_INT 1
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: NEG
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 2
22121: NEG
22122: PUSH
22123: LD_INT 3
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: LD_INT 3
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 3
22145: NEG
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 3
22157: NEG
22158: PUSH
22159: LD_INT 2
22161: NEG
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22192: LD_ADDR_VAR 0 29
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: LD_INT 1
22212: NEG
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: LD_INT 2
22277: NEG
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: LD_INT 2
22288: NEG
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: LD_INT 1
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: LD_INT 0
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: LD_INT 1
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: LD_INT 2
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: LD_INT 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 1
22347: NEG
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 2
22358: NEG
22359: PUSH
22360: LD_INT 1
22362: NEG
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 2
22370: NEG
22371: PUSH
22372: LD_INT 2
22374: NEG
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: NEG
22383: PUSH
22384: LD_INT 3
22386: NEG
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: LD_INT 1
22397: NEG
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 3
22405: PUSH
22406: LD_INT 1
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: LD_INT 3
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: NEG
22426: PUSH
22427: LD_INT 2
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 3
22436: NEG
22437: PUSH
22438: LD_INT 2
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22471: LD_ADDR_VAR 0 30
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 1
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 2
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 2
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 2
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 2
22637: NEG
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: NEG
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: NEG
22661: PUSH
22662: LD_INT 3
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: LD_INT 2
22675: NEG
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 3
22683: PUSH
22684: LD_INT 2
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 2
22693: PUSH
22694: LD_INT 3
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 3
22714: NEG
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22749: LD_ADDR_VAR 0 31
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: LD_INT 0
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 0
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: LD_INT 1
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: NEG
22808: PUSH
22809: LD_INT 0
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: NEG
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 2
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: LD_INT 1
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 2
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 0
22893: PUSH
22894: LD_INT 2
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 1
22903: NEG
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 2
22926: NEG
22927: PUSH
22928: LD_INT 2
22930: NEG
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: NEG
22939: PUSH
22940: LD_INT 3
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 3
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 3
22992: NEG
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23027: LD_ADDR_VAR 0 32
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 1
23108: NEG
23109: PUSH
23110: LD_INT 2
23112: NEG
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: LD_INT 2
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: LD_INT 1
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: LD_INT 2
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 0
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: NEG
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 2
23204: NEG
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: LD_INT 3
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: LD_INT 2
23231: NEG
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 3
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 2
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 2
23259: NEG
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 3
23270: NEG
23271: PUSH
23272: LD_INT 1
23274: NEG
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23305: LD_ADDR_VAR 0 33
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: LD_INT 1
23325: NEG
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 1
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 0
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 1
23363: NEG
23364: PUSH
23365: LD_INT 0
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 1
23374: NEG
23375: PUSH
23376: LD_INT 1
23378: NEG
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: NEG
23387: PUSH
23388: LD_INT 2
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 1
23401: NEG
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 2
23409: PUSH
23410: LD_INT 0
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 2
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: LD_INT 2
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 2
23460: NEG
23461: PUSH
23462: LD_INT 0
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: NEG
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: NEG
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: NEG
23496: PUSH
23497: LD_INT 3
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 2
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 3
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: LD_INT 3
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 1
23538: NEG
23539: PUSH
23540: LD_INT 2
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 3
23549: NEG
23550: PUSH
23551: LD_INT 2
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23584: LD_ADDR_VAR 0 34
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: LD_INT 0
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 1
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: NEG
23643: PUSH
23644: LD_INT 0
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 1
23665: NEG
23666: PUSH
23667: LD_INT 2
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 0
23677: PUSH
23678: LD_INT 2
23680: NEG
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 2
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 2
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 2
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 2
23740: NEG
23741: PUSH
23742: LD_INT 0
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 2
23751: NEG
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 2
23763: NEG
23764: PUSH
23765: LD_INT 2
23767: NEG
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: LD_INT 3
23779: NEG
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: LD_INT 2
23790: NEG
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: LD_INT 2
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: LD_INT 3
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: NEG
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 3
23829: NEG
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23864: LD_ADDR_VAR 0 35
23868: PUSH
23869: LD_INT 0
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: LD_INT 1
23884: NEG
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 1
23922: NEG
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 1
23933: NEG
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 2
23955: NEG
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23976: LD_ADDR_VAR 0 36
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: PUSH
24012: LD_INT 1
24014: PUSH
24015: LD_INT 1
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: LD_INT 1
24049: NEG
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: LD_INT 2
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24088: LD_ADDR_VAR 0 37
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: LD_INT 1
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: LD_INT 1
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: LD_INT 1
24161: NEG
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: LD_INT 1
24172: NEG
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24200: LD_ADDR_VAR 0 38
24204: PUSH
24205: LD_INT 0
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: LD_INT 1
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 1
24269: NEG
24270: PUSH
24271: LD_INT 1
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: NEG
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24312: LD_ADDR_VAR 0 39
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: LD_INT 1
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 1
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24424: LD_ADDR_VAR 0 40
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: LD_INT 0
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: LD_INT 1
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 1
24462: PUSH
24463: LD_INT 1
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: NEG
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 1
24508: NEG
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24536: LD_ADDR_VAR 0 41
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: LD_INT 1
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 1
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 1
24594: NEG
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: LD_INT 2
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: LD_INT 1
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 2
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 1
24680: NEG
24681: PUSH
24682: LD_INT 1
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 2
24702: NEG
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 2
24714: NEG
24715: PUSH
24716: LD_INT 2
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 2
24726: NEG
24727: PUSH
24728: LD_INT 3
24730: NEG
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 1
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 3
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 3
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 3
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 3
24779: PUSH
24780: LD_INT 3
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 2
24789: PUSH
24790: LD_INT 3
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 2
24799: NEG
24800: PUSH
24801: LD_INT 1
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 3
24810: NEG
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 3
24821: NEG
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 3
24833: NEG
24834: PUSH
24835: LD_INT 2
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 3
24845: NEG
24846: PUSH
24847: LD_INT 3
24849: NEG
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24886: LD_ADDR_VAR 0 42
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 0
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: NEG
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 1
24967: NEG
24968: PUSH
24969: LD_INT 2
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 2
25052: NEG
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 2
25064: NEG
25065: PUSH
25066: LD_INT 2
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: NEG
25077: PUSH
25078: LD_INT 3
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 3
25092: NEG
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 3
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: LD_INT 2
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 3
25122: PUSH
25123: LD_INT 2
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 3
25132: PUSH
25133: LD_INT 3
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: LD_INT 3
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 3
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: LD_INT 2
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 3
25183: NEG
25184: PUSH
25185: LD_INT 2
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 3
25195: NEG
25196: PUSH
25197: LD_INT 3
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25236: LD_ADDR_VAR 0 43
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 0
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: NEG
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: LD_INT 2
25321: NEG
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: LD_INT 2
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 2
25402: NEG
25403: PUSH
25404: LD_INT 0
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 2
25413: NEG
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: LD_INT 3
25429: NEG
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 3
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 2
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 2
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 3
25470: PUSH
25471: LD_INT 0
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 3
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: LD_INT 3
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: LD_INT 3
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: NEG
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: NEG
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 3
25532: NEG
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 3
25543: NEG
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25584: LD_ADDR_VAR 0 44
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 1
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 2
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 2
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 2
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 2
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: NEG
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 2
25750: NEG
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: NEG
25763: PUSH
25764: LD_INT 2
25766: NEG
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 2
25774: NEG
25775: PUSH
25776: LD_INT 3
25778: NEG
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: LD_INT 1
25789: NEG
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 3
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 3
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 3
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 3
25827: PUSH
25828: LD_INT 3
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 3
25858: NEG
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 3
25869: NEG
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 3
25881: NEG
25882: PUSH
25883: LD_INT 2
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 3
25893: NEG
25894: PUSH
25895: LD_INT 3
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25934: LD_ADDR_VAR 0 45
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: NEG
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 2
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 2
26030: NEG
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 2
26100: NEG
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 2
26112: NEG
26113: PUSH
26114: LD_INT 2
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 2
26124: NEG
26125: PUSH
26126: LD_INT 3
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: NEG
26137: PUSH
26138: LD_INT 3
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: LD_INT 3
26151: NEG
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: LD_INT 2
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 3
26180: PUSH
26181: LD_INT 3
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 3
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: LD_INT 2
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 3
26231: NEG
26232: PUSH
26233: LD_INT 2
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 3
26243: NEG
26244: PUSH
26245: LD_INT 3
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26284: LD_ADDR_VAR 0 46
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 1
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: LD_INT 2
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 2
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 2
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: NEG
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 2
26461: NEG
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: LD_INT 3
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 3
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: LD_INT 2
26499: NEG
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 3
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 3
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: LD_INT 3
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: LD_INT 3
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 1
26558: NEG
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 3
26580: NEG
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 3
26591: NEG
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26632: LD_ADDR_VAR 0 47
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: LD_INT 2
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 2
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 2
26747: NEG
26748: PUSH
26749: LD_INT 1
26751: NEG
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 2
26759: NEG
26760: PUSH
26761: LD_INT 2
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26783: LD_ADDR_VAR 0 48
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: NEG
26865: PUSH
26866: LD_INT 2
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: LD_INT 2
26879: NEG
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 2
26908: PUSH
26909: LD_INT 1
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26930: LD_ADDR_VAR 0 49
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 2
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 2
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 2
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: LD_INT 2
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27074: LD_ADDR_VAR 0 50
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 2
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: LD_INT 2
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: LD_INT 2
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27218: LD_ADDR_VAR 0 51
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: LD_INT 2
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 2
27330: NEG
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: NEG
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27365: LD_ADDR_VAR 0 52
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 1
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: LD_INT 2
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: LD_INT 1
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 2
27469: NEG
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 2
27480: NEG
27481: PUSH
27482: LD_INT 1
27484: NEG
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 2
27492: NEG
27493: PUSH
27494: LD_INT 2
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27516: LD_ADDR_VAR 0 53
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: NEG
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: LD_INT 2
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 2
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 2
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 2
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 2
27692: NEG
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 2
27703: NEG
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: LD_INT 2
27719: NEG
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27746: LD_ADDR_VAR 0 54
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: LD_INT 1
27766: NEG
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: LD_INT 1
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 1
27804: NEG
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: LD_INT 2
27831: NEG
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: LD_INT 2
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 2
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 2
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: LD_INT 2
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 2
27922: NEG
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 2
27933: NEG
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 2
27945: NEG
27946: PUSH
27947: LD_INT 2
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27976: LD_ADDR_VAR 0 55
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: LD_INT 0
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 0
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: NEG
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: LD_INT 1
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: LD_INT 2
28072: NEG
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 2
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 2
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 2
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 2
28152: NEG
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: NEG
28164: PUSH
28165: LD_INT 1
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: NEG
28176: PUSH
28177: LD_INT 2
28179: NEG
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28206: LD_ADDR_VAR 0 56
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: NEG
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 1
28287: NEG
28288: PUSH
28289: LD_INT 2
28291: NEG
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 2
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 2
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: LD_INT 2
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: LD_INT 2
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 2
28382: NEG
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 2
28393: NEG
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 2
28405: NEG
28406: PUSH
28407: LD_INT 2
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28436: LD_ADDR_VAR 0 57
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 1
28494: NEG
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 2
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 2
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 2
28612: NEG
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 2
28623: NEG
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: NEG
28636: PUSH
28637: LD_INT 2
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28666: LD_ADDR_VAR 0 58
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: NEG
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: NEG
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 2
28865: NEG
28866: PUSH
28867: LD_INT 2
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28896: LD_ADDR_VAR 0 59
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28984: LD_ADDR_VAR 0 60
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 1
29042: NEG
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 1
29053: NEG
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29072: LD_ADDR_VAR 0 61
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: NEG
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29160: LD_ADDR_VAR 0 62
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: LD_INT 1
29180: NEG
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 0
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 1
29218: NEG
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29248: LD_ADDR_VAR 0 63
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 1
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 1
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29336: LD_ADDR_VAR 0 64
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: LD_INT 0
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: LD_INT 1
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: NEG
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: ST_TO_ADDR
// end ; 1 :
29424: GO 35321
29426: LD_INT 1
29428: DOUBLE
29429: EQUAL
29430: IFTRUE 29434
29432: GO 32057
29434: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29435: LD_ADDR_VAR 0 11
29439: PUSH
29440: LD_INT 1
29442: NEG
29443: PUSH
29444: LD_INT 3
29446: NEG
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: LD_INT 3
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: LD_INT 2
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29479: LD_ADDR_VAR 0 12
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 3
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 3
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29520: LD_ADDR_VAR 0 13
29524: PUSH
29525: LD_INT 3
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 3
29537: PUSH
29538: LD_INT 3
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29560: LD_ADDR_VAR 0 14
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: LD_INT 3
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: LD_INT 3
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: LD_INT 2
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29601: LD_ADDR_VAR 0 15
29605: PUSH
29606: LD_INT 2
29608: NEG
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 3
29619: NEG
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 3
29630: NEG
29631: PUSH
29632: LD_INT 1
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29645: LD_ADDR_VAR 0 16
29649: PUSH
29650: LD_INT 2
29652: NEG
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 3
29664: NEG
29665: PUSH
29666: LD_INT 2
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 3
29676: NEG
29677: PUSH
29678: LD_INT 3
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29691: LD_ADDR_VAR 0 17
29695: PUSH
29696: LD_INT 1
29698: NEG
29699: PUSH
29700: LD_INT 3
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: LD_INT 3
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29735: LD_ADDR_VAR 0 18
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 3
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 3
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29776: LD_ADDR_VAR 0 19
29780: PUSH
29781: LD_INT 3
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 3
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29816: LD_ADDR_VAR 0 20
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 3
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 3
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: LIST
29856: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29857: LD_ADDR_VAR 0 21
29861: PUSH
29862: LD_INT 2
29864: NEG
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 3
29875: NEG
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 3
29886: NEG
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29901: LD_ADDR_VAR 0 22
29905: PUSH
29906: LD_INT 2
29908: NEG
29909: PUSH
29910: LD_INT 3
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 3
29920: NEG
29921: PUSH
29922: LD_INT 2
29924: NEG
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 3
29932: NEG
29933: PUSH
29934: LD_INT 3
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: LIST
29946: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29947: LD_ADDR_VAR 0 23
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: LD_INT 3
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: LD_INT 4
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 3
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29991: LD_ADDR_VAR 0 24
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 4
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30032: LD_ADDR_VAR 0 25
30036: PUSH
30037: LD_INT 3
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 4
30049: PUSH
30050: LD_INT 3
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: LD_INT 4
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30072: LD_ADDR_VAR 0 26
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 4
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: LIST
30112: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30113: LD_ADDR_VAR 0 27
30117: PUSH
30118: LD_INT 3
30120: NEG
30121: PUSH
30122: LD_INT 0
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 3
30131: NEG
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 4
30142: NEG
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30157: LD_ADDR_VAR 0 28
30161: PUSH
30162: LD_INT 3
30164: NEG
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 3
30176: NEG
30177: PUSH
30178: LD_INT 4
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 4
30188: NEG
30189: PUSH
30190: LD_INT 3
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30203: LD_ADDR_VAR 0 29
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: LD_INT 3
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 3
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: LD_INT 4
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: LD_INT 4
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 3
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 5
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 5
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: LD_INT 4
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 6
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 6
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 5
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30358: LD_ADDR_VAR 0 30
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: LD_INT 1
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 3
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 3
30396: PUSH
30397: LD_INT 1
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 4
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 4
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 4
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 5
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 5
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 5
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 6
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 6
30479: PUSH
30480: LD_INT 1
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30501: LD_ADDR_VAR 0 31
30505: PUSH
30506: LD_INT 3
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 3
30518: PUSH
30519: LD_INT 3
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: LD_INT 3
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 4
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 4
30548: PUSH
30549: LD_INT 4
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 3
30558: PUSH
30559: LD_INT 4
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 5
30568: PUSH
30569: LD_INT 4
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 5
30578: PUSH
30579: LD_INT 5
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: LD_INT 5
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 6
30598: PUSH
30599: LD_INT 5
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 6
30608: PUSH
30609: LD_INT 6
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 5
30618: PUSH
30619: LD_INT 6
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30640: LD_ADDR_VAR 0 32
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 0
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: LD_INT 4
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: LD_INT 4
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: LD_INT 3
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: LD_INT 5
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 0
30719: PUSH
30720: LD_INT 5
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: LD_INT 4
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: LD_INT 6
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 6
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: LD_INT 5
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30783: LD_ADDR_VAR 0 33
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: NEG
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 3
30812: NEG
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 3
30824: NEG
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 4
30835: NEG
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 4
30846: NEG
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 4
30858: NEG
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 5
30869: NEG
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 5
30880: NEG
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 5
30892: NEG
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 6
30903: NEG
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 6
30914: NEG
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30938: LD_ADDR_VAR 0 34
30942: PUSH
30943: LD_INT 2
30945: NEG
30946: PUSH
30947: LD_INT 3
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: LD_INT 2
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 3
30969: NEG
30970: PUSH
30971: LD_INT 3
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: LD_INT 4
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 4
30993: NEG
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 4
31005: NEG
31006: PUSH
31007: LD_INT 4
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 4
31017: NEG
31018: PUSH
31019: LD_INT 5
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 5
31029: NEG
31030: PUSH
31031: LD_INT 4
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 5
31041: NEG
31042: PUSH
31043: LD_INT 5
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 5
31053: NEG
31054: PUSH
31055: LD_INT 6
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 6
31065: NEG
31066: PUSH
31067: LD_INT 5
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 6
31077: NEG
31078: PUSH
31079: LD_INT 6
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31101: LD_ADDR_VAR 0 41
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: LD_INT 2
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31145: LD_ADDR_VAR 0 42
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 3
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31186: LD_ADDR_VAR 0 43
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: LD_INT 3
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31226: LD_ADDR_VAR 0 44
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: LIST
31266: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31267: LD_ADDR_VAR 0 45
31271: PUSH
31272: LD_INT 2
31274: NEG
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 3
31296: NEG
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: LIST
31310: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31311: LD_ADDR_VAR 0 46
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: LD_INT 2
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 3
31342: NEG
31343: PUSH
31344: LD_INT 2
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: LIST
31356: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31357: LD_ADDR_VAR 0 47
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: LD_INT 3
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: LD_INT 3
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31390: LD_ADDR_VAR 0 48
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31421: LD_ADDR_VAR 0 49
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 3
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31450: LD_ADDR_VAR 0 50
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: LD_INT 3
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: LD_INT 3
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31479: LD_ADDR_VAR 0 51
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: NEG
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31510: LD_ADDR_VAR 0 52
31514: PUSH
31515: LD_INT 3
31517: NEG
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 3
31529: NEG
31530: PUSH
31531: LD_INT 2
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31543: LD_ADDR_VAR 0 53
31547: PUSH
31548: LD_INT 1
31550: NEG
31551: PUSH
31552: LD_INT 3
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: LIST
31586: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31587: LD_ADDR_VAR 0 54
31591: PUSH
31592: LD_INT 2
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 3
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 3
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31628: LD_ADDR_VAR 0 55
31632: PUSH
31633: LD_INT 3
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31668: LD_ADDR_VAR 0 56
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: LD_INT 3
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: LD_INT 2
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31709: LD_ADDR_VAR 0 57
31713: PUSH
31714: LD_INT 2
31716: NEG
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 3
31727: NEG
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31753: LD_ADDR_VAR 0 58
31757: PUSH
31758: LD_INT 2
31760: NEG
31761: PUSH
31762: LD_INT 3
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 3
31772: NEG
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 3
31784: NEG
31785: PUSH
31786: LD_INT 3
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31799: LD_ADDR_VAR 0 59
31803: PUSH
31804: LD_INT 1
31806: NEG
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31843: LD_ADDR_VAR 0 60
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31884: LD_ADDR_VAR 0 61
31888: PUSH
31889: LD_INT 2
31891: PUSH
31892: LD_INT 1
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: LD_INT 2
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31924: LD_ADDR_VAR 0 62
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 2
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31965: LD_ADDR_VAR 0 63
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: NEG
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32009: LD_ADDR_VAR 0 64
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 2
32028: NEG
32029: PUSH
32030: LD_INT 1
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: LD_INT 2
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: ST_TO_ADDR
// end ; 2 :
32055: GO 35321
32057: LD_INT 2
32059: DOUBLE
32060: EQUAL
32061: IFTRUE 32065
32063: GO 35320
32065: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32066: LD_ADDR_VAR 0 29
32070: PUSH
32071: LD_INT 4
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 4
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 5
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 5
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 4
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 3
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 5
32156: PUSH
32157: LD_INT 2
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: LD_INT 3
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 3
32176: PUSH
32177: LD_INT 2
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 4
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 4
32196: PUSH
32197: LD_INT 4
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 3
32206: PUSH
32207: LD_INT 4
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: LD_INT 3
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 4
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: LD_INT 4
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: LD_INT 4
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 4
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 5
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: LD_INT 5
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: LD_INT 4
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: NEG
32318: PUSH
32319: LD_INT 3
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 2
32328: PUSH
32329: LD_INT 5
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 3
32360: NEG
32361: PUSH
32362: LD_INT 1
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 3
32394: NEG
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 4
32405: NEG
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 4
32416: NEG
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 4
32428: NEG
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 2
32440: NEG
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 4
32451: NEG
32452: PUSH
32453: LD_INT 4
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 4
32463: NEG
32464: PUSH
32465: LD_INT 5
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 3
32475: NEG
32476: PUSH
32477: LD_INT 4
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 3
32487: NEG
32488: PUSH
32489: LD_INT 3
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 4
32499: NEG
32500: PUSH
32501: LD_INT 3
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 5
32511: NEG
32512: PUSH
32513: LD_INT 4
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 5
32523: NEG
32524: PUSH
32525: LD_INT 5
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 3
32535: NEG
32536: PUSH
32537: LD_INT 5
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 5
32547: NEG
32548: PUSH
32549: LD_INT 3
32551: NEG
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32604: LD_ADDR_VAR 0 30
32608: PUSH
32609: LD_INT 4
32611: PUSH
32612: LD_INT 4
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 4
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 5
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 5
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 4
32651: PUSH
32652: LD_INT 5
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 3
32661: PUSH
32662: LD_INT 4
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 3
32671: PUSH
32672: LD_INT 3
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 5
32681: PUSH
32682: LD_INT 3
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 3
32691: PUSH
32692: LD_INT 5
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: LD_INT 3
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: LD_INT 2
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 4
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 4
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 3
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: LD_INT 4
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 4
32794: NEG
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 4
32805: NEG
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 3
32817: NEG
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 3
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 4
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 5
32850: NEG
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 5
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 5
32873: NEG
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: LD_INT 2
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 3
32896: NEG
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 3
32908: NEG
32909: PUSH
32910: LD_INT 4
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: NEG
32921: PUSH
32922: LD_INT 3
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: LD_INT 2
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 3
32944: NEG
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: NEG
32957: PUSH
32958: LD_INT 3
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 4
32968: NEG
32969: PUSH
32970: LD_INT 4
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: NEG
32981: PUSH
32982: LD_INT 4
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 4
32992: NEG
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 4
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 5
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: LD_INT 4
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: LD_INT 3
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 3
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: LD_INT 4
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: LD_INT 5
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: LD_INT 3
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 2
33094: NEG
33095: PUSH
33096: LD_INT 5
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33151: LD_ADDR_VAR 0 31
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 4
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: LD_INT 4
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 5
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: LD_INT 5
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: LD_INT 4
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: LD_INT 3
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 2
33230: PUSH
33231: LD_INT 5
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 2
33240: NEG
33241: PUSH
33242: LD_INT 3
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 3
33251: NEG
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 3
33262: NEG
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 3
33296: NEG
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 4
33307: NEG
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 4
33318: NEG
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 4
33330: NEG
33331: PUSH
33332: LD_INT 2
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 4
33353: NEG
33354: PUSH
33355: LD_INT 4
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 4
33365: NEG
33366: PUSH
33367: LD_INT 5
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 3
33377: NEG
33378: PUSH
33379: LD_INT 4
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 3
33389: NEG
33390: PUSH
33391: LD_INT 3
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 4
33401: NEG
33402: PUSH
33403: LD_INT 3
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 5
33413: NEG
33414: PUSH
33415: LD_INT 4
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 5
33425: NEG
33426: PUSH
33427: LD_INT 5
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 3
33437: NEG
33438: PUSH
33439: LD_INT 5
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 5
33449: NEG
33450: PUSH
33451: LD_INT 3
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 3
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 4
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: LD_INT 3
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: LD_INT 3
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: LD_INT 4
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: LD_INT 2
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: LD_INT 4
33555: NEG
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 4
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 4
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 5
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 5
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 4
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 3
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: LD_INT 1
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 3
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 5
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33701: LD_ADDR_VAR 0 32
33705: PUSH
33706: LD_INT 4
33708: NEG
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 4
33719: NEG
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 3
33731: NEG
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 3
33742: NEG
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 4
33753: NEG
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 5
33764: NEG
33765: PUSH
33766: LD_INT 0
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 5
33775: NEG
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 5
33787: NEG
33788: PUSH
33789: LD_INT 2
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: NEG
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 3
33810: NEG
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 3
33822: NEG
33823: PUSH
33824: LD_INT 4
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 2
33834: NEG
33835: PUSH
33836: LD_INT 3
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: LD_INT 2
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 3
33858: NEG
33859: PUSH
33860: LD_INT 2
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 4
33870: NEG
33871: PUSH
33872: LD_INT 3
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 4
33882: NEG
33883: PUSH
33884: LD_INT 4
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 4
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 4
33906: NEG
33907: PUSH
33908: LD_INT 2
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 4
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: LD_INT 5
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 1
33940: PUSH
33941: LD_INT 4
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 3
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: LD_INT 3
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: LD_INT 4
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 5
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: LD_INT 3
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: LD_INT 5
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 3
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 4
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 4
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 2
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 2
34092: PUSH
34093: LD_INT 2
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 4
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 4
34113: PUSH
34114: LD_INT 4
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 4
34123: PUSH
34124: LD_INT 3
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 5
34133: PUSH
34134: LD_INT 4
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 5
34143: PUSH
34144: LD_INT 5
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 4
34153: PUSH
34154: LD_INT 5
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 3
34163: PUSH
34164: LD_INT 4
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 5
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: LD_INT 5
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34248: LD_ADDR_VAR 0 33
34252: PUSH
34253: LD_INT 4
34255: NEG
34256: PUSH
34257: LD_INT 4
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 4
34267: NEG
34268: PUSH
34269: LD_INT 5
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 3
34279: NEG
34280: PUSH
34281: LD_INT 4
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 3
34291: NEG
34292: PUSH
34293: LD_INT 3
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 4
34303: NEG
34304: PUSH
34305: LD_INT 3
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 5
34315: NEG
34316: PUSH
34317: LD_INT 4
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 5
34327: NEG
34328: PUSH
34329: LD_INT 5
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 3
34339: NEG
34340: PUSH
34341: LD_INT 5
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 5
34351: NEG
34352: PUSH
34353: LD_INT 3
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: LD_INT 3
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 4
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 3
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: LD_INT 2
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: LD_INT 3
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 4
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: LD_INT 2
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: LD_INT 4
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 4
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 4
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 5
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 5
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 4
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: LD_INT 2
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 5
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 3
34558: PUSH
34559: LD_INT 3
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 3
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 4
34578: PUSH
34579: LD_INT 3
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 4
34588: PUSH
34589: LD_INT 4
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 3
34598: PUSH
34599: LD_INT 4
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: LD_INT 3
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 4
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: LD_INT 4
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: LD_INT 4
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: LD_INT 3
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: LD_INT 4
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: LD_INT 5
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 5
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 1
34698: NEG
34699: PUSH
34700: LD_INT 4
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: LD_INT 3
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: LD_INT 5
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: LD_INT 3
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34786: LD_ADDR_VAR 0 34
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: LD_INT 4
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: LD_INT 5
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: LD_INT 4
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 3
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: LD_INT 3
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: LD_INT 4
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: LD_INT 5
34864: NEG
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 2
34872: PUSH
34873: LD_INT 3
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: LD_INT 5
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 3
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 3
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 4
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 4
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 2
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 2
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 4
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 4
34988: PUSH
34989: LD_INT 4
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 4
34998: PUSH
34999: LD_INT 3
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 5
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 5
35018: PUSH
35019: LD_INT 5
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 4
35028: PUSH
35029: LD_INT 5
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 3
35038: PUSH
35039: LD_INT 4
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 3
35048: PUSH
35049: LD_INT 3
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 5
35058: PUSH
35059: LD_INT 3
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 3
35068: PUSH
35069: LD_INT 5
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: LD_INT 3
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: LD_INT 3
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: LD_INT 4
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: LD_INT 4
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: LD_INT 3
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 4
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: LD_INT 2
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 4
35171: NEG
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 4
35182: NEG
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 3
35194: NEG
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 3
35205: NEG
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 4
35216: NEG
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 5
35227: NEG
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 5
35238: NEG
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 5
35250: NEG
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: LD_INT 2
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: ST_TO_ADDR
// end ; end ;
35318: GO 35321
35320: POP
// case btype of b_depot , b_warehouse :
35321: LD_VAR 0 1
35325: PUSH
35326: LD_INT 0
35328: DOUBLE
35329: EQUAL
35330: IFTRUE 35340
35332: LD_INT 1
35334: DOUBLE
35335: EQUAL
35336: IFTRUE 35340
35338: GO 35541
35340: POP
// case nation of nation_american :
35341: LD_VAR 0 5
35345: PUSH
35346: LD_INT 1
35348: DOUBLE
35349: EQUAL
35350: IFTRUE 35354
35352: GO 35410
35354: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35355: LD_ADDR_VAR 0 9
35359: PUSH
35360: LD_VAR 0 11
35364: PUSH
35365: LD_VAR 0 12
35369: PUSH
35370: LD_VAR 0 13
35374: PUSH
35375: LD_VAR 0 14
35379: PUSH
35380: LD_VAR 0 15
35384: PUSH
35385: LD_VAR 0 16
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: PUSH
35398: LD_VAR 0 4
35402: PUSH
35403: LD_INT 1
35405: PLUS
35406: ARRAY
35407: ST_TO_ADDR
35408: GO 35539
35410: LD_INT 2
35412: DOUBLE
35413: EQUAL
35414: IFTRUE 35418
35416: GO 35474
35418: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35419: LD_ADDR_VAR 0 9
35423: PUSH
35424: LD_VAR 0 17
35428: PUSH
35429: LD_VAR 0 18
35433: PUSH
35434: LD_VAR 0 19
35438: PUSH
35439: LD_VAR 0 20
35443: PUSH
35444: LD_VAR 0 21
35448: PUSH
35449: LD_VAR 0 22
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: PUSH
35462: LD_VAR 0 4
35466: PUSH
35467: LD_INT 1
35469: PLUS
35470: ARRAY
35471: ST_TO_ADDR
35472: GO 35539
35474: LD_INT 3
35476: DOUBLE
35477: EQUAL
35478: IFTRUE 35482
35480: GO 35538
35482: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35483: LD_ADDR_VAR 0 9
35487: PUSH
35488: LD_VAR 0 23
35492: PUSH
35493: LD_VAR 0 24
35497: PUSH
35498: LD_VAR 0 25
35502: PUSH
35503: LD_VAR 0 26
35507: PUSH
35508: LD_VAR 0 27
35512: PUSH
35513: LD_VAR 0 28
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: PUSH
35526: LD_VAR 0 4
35530: PUSH
35531: LD_INT 1
35533: PLUS
35534: ARRAY
35535: ST_TO_ADDR
35536: GO 35539
35538: POP
35539: GO 36094
35541: LD_INT 2
35543: DOUBLE
35544: EQUAL
35545: IFTRUE 35555
35547: LD_INT 3
35549: DOUBLE
35550: EQUAL
35551: IFTRUE 35555
35553: GO 35611
35555: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35556: LD_ADDR_VAR 0 9
35560: PUSH
35561: LD_VAR 0 29
35565: PUSH
35566: LD_VAR 0 30
35570: PUSH
35571: LD_VAR 0 31
35575: PUSH
35576: LD_VAR 0 32
35580: PUSH
35581: LD_VAR 0 33
35585: PUSH
35586: LD_VAR 0 34
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: LD_VAR 0 4
35603: PUSH
35604: LD_INT 1
35606: PLUS
35607: ARRAY
35608: ST_TO_ADDR
35609: GO 36094
35611: LD_INT 16
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35673
35617: LD_INT 17
35619: DOUBLE
35620: EQUAL
35621: IFTRUE 35673
35623: LD_INT 18
35625: DOUBLE
35626: EQUAL
35627: IFTRUE 35673
35629: LD_INT 19
35631: DOUBLE
35632: EQUAL
35633: IFTRUE 35673
35635: LD_INT 22
35637: DOUBLE
35638: EQUAL
35639: IFTRUE 35673
35641: LD_INT 20
35643: DOUBLE
35644: EQUAL
35645: IFTRUE 35673
35647: LD_INT 21
35649: DOUBLE
35650: EQUAL
35651: IFTRUE 35673
35653: LD_INT 23
35655: DOUBLE
35656: EQUAL
35657: IFTRUE 35673
35659: LD_INT 24
35661: DOUBLE
35662: EQUAL
35663: IFTRUE 35673
35665: LD_INT 25
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35729
35673: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35674: LD_ADDR_VAR 0 9
35678: PUSH
35679: LD_VAR 0 35
35683: PUSH
35684: LD_VAR 0 36
35688: PUSH
35689: LD_VAR 0 37
35693: PUSH
35694: LD_VAR 0 38
35698: PUSH
35699: LD_VAR 0 39
35703: PUSH
35704: LD_VAR 0 40
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: PUSH
35717: LD_VAR 0 4
35721: PUSH
35722: LD_INT 1
35724: PLUS
35725: ARRAY
35726: ST_TO_ADDR
35727: GO 36094
35729: LD_INT 6
35731: DOUBLE
35732: EQUAL
35733: IFTRUE 35785
35735: LD_INT 7
35737: DOUBLE
35738: EQUAL
35739: IFTRUE 35785
35741: LD_INT 8
35743: DOUBLE
35744: EQUAL
35745: IFTRUE 35785
35747: LD_INT 13
35749: DOUBLE
35750: EQUAL
35751: IFTRUE 35785
35753: LD_INT 12
35755: DOUBLE
35756: EQUAL
35757: IFTRUE 35785
35759: LD_INT 15
35761: DOUBLE
35762: EQUAL
35763: IFTRUE 35785
35765: LD_INT 11
35767: DOUBLE
35768: EQUAL
35769: IFTRUE 35785
35771: LD_INT 14
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35785
35777: LD_INT 10
35779: DOUBLE
35780: EQUAL
35781: IFTRUE 35785
35783: GO 35841
35785: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35786: LD_ADDR_VAR 0 9
35790: PUSH
35791: LD_VAR 0 41
35795: PUSH
35796: LD_VAR 0 42
35800: PUSH
35801: LD_VAR 0 43
35805: PUSH
35806: LD_VAR 0 44
35810: PUSH
35811: LD_VAR 0 45
35815: PUSH
35816: LD_VAR 0 46
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: PUSH
35829: LD_VAR 0 4
35833: PUSH
35834: LD_INT 1
35836: PLUS
35837: ARRAY
35838: ST_TO_ADDR
35839: GO 36094
35841: LD_INT 36
35843: DOUBLE
35844: EQUAL
35845: IFTRUE 35849
35847: GO 35905
35849: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35850: LD_ADDR_VAR 0 9
35854: PUSH
35855: LD_VAR 0 47
35859: PUSH
35860: LD_VAR 0 48
35864: PUSH
35865: LD_VAR 0 49
35869: PUSH
35870: LD_VAR 0 50
35874: PUSH
35875: LD_VAR 0 51
35879: PUSH
35880: LD_VAR 0 52
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: PUSH
35893: LD_VAR 0 4
35897: PUSH
35898: LD_INT 1
35900: PLUS
35901: ARRAY
35902: ST_TO_ADDR
35903: GO 36094
35905: LD_INT 4
35907: DOUBLE
35908: EQUAL
35909: IFTRUE 35931
35911: LD_INT 5
35913: DOUBLE
35914: EQUAL
35915: IFTRUE 35931
35917: LD_INT 34
35919: DOUBLE
35920: EQUAL
35921: IFTRUE 35931
35923: LD_INT 37
35925: DOUBLE
35926: EQUAL
35927: IFTRUE 35931
35929: GO 35987
35931: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35932: LD_ADDR_VAR 0 9
35936: PUSH
35937: LD_VAR 0 53
35941: PUSH
35942: LD_VAR 0 54
35946: PUSH
35947: LD_VAR 0 55
35951: PUSH
35952: LD_VAR 0 56
35956: PUSH
35957: LD_VAR 0 57
35961: PUSH
35962: LD_VAR 0 58
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: PUSH
35975: LD_VAR 0 4
35979: PUSH
35980: LD_INT 1
35982: PLUS
35983: ARRAY
35984: ST_TO_ADDR
35985: GO 36094
35987: LD_INT 31
35989: DOUBLE
35990: EQUAL
35991: IFTRUE 36037
35993: LD_INT 32
35995: DOUBLE
35996: EQUAL
35997: IFTRUE 36037
35999: LD_INT 33
36001: DOUBLE
36002: EQUAL
36003: IFTRUE 36037
36005: LD_INT 27
36007: DOUBLE
36008: EQUAL
36009: IFTRUE 36037
36011: LD_INT 26
36013: DOUBLE
36014: EQUAL
36015: IFTRUE 36037
36017: LD_INT 28
36019: DOUBLE
36020: EQUAL
36021: IFTRUE 36037
36023: LD_INT 29
36025: DOUBLE
36026: EQUAL
36027: IFTRUE 36037
36029: LD_INT 30
36031: DOUBLE
36032: EQUAL
36033: IFTRUE 36037
36035: GO 36093
36037: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36038: LD_ADDR_VAR 0 9
36042: PUSH
36043: LD_VAR 0 59
36047: PUSH
36048: LD_VAR 0 60
36052: PUSH
36053: LD_VAR 0 61
36057: PUSH
36058: LD_VAR 0 62
36062: PUSH
36063: LD_VAR 0 63
36067: PUSH
36068: LD_VAR 0 64
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: PUSH
36081: LD_VAR 0 4
36085: PUSH
36086: LD_INT 1
36088: PLUS
36089: ARRAY
36090: ST_TO_ADDR
36091: GO 36094
36093: POP
// temp_list2 = [ ] ;
36094: LD_ADDR_VAR 0 10
36098: PUSH
36099: EMPTY
36100: ST_TO_ADDR
// for i in temp_list do
36101: LD_ADDR_VAR 0 8
36105: PUSH
36106: LD_VAR 0 9
36110: PUSH
36111: FOR_IN
36112: IFFALSE 36164
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36114: LD_ADDR_VAR 0 10
36118: PUSH
36119: LD_VAR 0 10
36123: PUSH
36124: LD_VAR 0 8
36128: PUSH
36129: LD_INT 1
36131: ARRAY
36132: PUSH
36133: LD_VAR 0 2
36137: PLUS
36138: PUSH
36139: LD_VAR 0 8
36143: PUSH
36144: LD_INT 2
36146: ARRAY
36147: PUSH
36148: LD_VAR 0 3
36152: PLUS
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: EMPTY
36159: LIST
36160: ADD
36161: ST_TO_ADDR
36162: GO 36111
36164: POP
36165: POP
// result = temp_list2 ;
36166: LD_ADDR_VAR 0 7
36170: PUSH
36171: LD_VAR 0 10
36175: ST_TO_ADDR
// end ;
36176: LD_VAR 0 7
36180: RET
// export function EnemyInRange ( unit , dist ) ; begin
36181: LD_INT 0
36183: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: LD_VAR 0 1
36193: PPUSH
36194: CALL_OW 255
36198: PPUSH
36199: LD_VAR 0 1
36203: PPUSH
36204: CALL_OW 250
36208: PPUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL_OW 251
36218: PPUSH
36219: LD_VAR 0 2
36223: PPUSH
36224: CALL 9438 0 4
36228: PUSH
36229: LD_INT 4
36231: ARRAY
36232: ST_TO_ADDR
// end ;
36233: LD_VAR 0 3
36237: RET
// export function PlayerSeeMe ( unit ) ; begin
36238: LD_INT 0
36240: PPUSH
// result := See ( your_side , unit ) ;
36241: LD_ADDR_VAR 0 2
36245: PUSH
36246: LD_OWVAR 2
36250: PPUSH
36251: LD_VAR 0 1
36255: PPUSH
36256: CALL_OW 292
36260: ST_TO_ADDR
// end ;
36261: LD_VAR 0 2
36265: RET
// export function ReverseDir ( unit ) ; begin
36266: LD_INT 0
36268: PPUSH
// if not unit then
36269: LD_VAR 0 1
36273: NOT
36274: IFFALSE 36278
// exit ;
36276: GO 36301
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36278: LD_ADDR_VAR 0 2
36282: PUSH
36283: LD_VAR 0 1
36287: PPUSH
36288: CALL_OW 254
36292: PUSH
36293: LD_INT 3
36295: PLUS
36296: PUSH
36297: LD_INT 6
36299: MOD
36300: ST_TO_ADDR
// end ;
36301: LD_VAR 0 2
36305: RET
// export function ReverseArray ( array ) ; var i ; begin
36306: LD_INT 0
36308: PPUSH
36309: PPUSH
// if not array then
36310: LD_VAR 0 1
36314: NOT
36315: IFFALSE 36319
// exit ;
36317: GO 36374
// result := [ ] ;
36319: LD_ADDR_VAR 0 2
36323: PUSH
36324: EMPTY
36325: ST_TO_ADDR
// for i := array downto 1 do
36326: LD_ADDR_VAR 0 3
36330: PUSH
36331: DOUBLE
36332: LD_VAR 0 1
36336: INC
36337: ST_TO_ADDR
36338: LD_INT 1
36340: PUSH
36341: FOR_DOWNTO
36342: IFFALSE 36372
// result := Join ( result , array [ i ] ) ;
36344: LD_ADDR_VAR 0 2
36348: PUSH
36349: LD_VAR 0 2
36353: PPUSH
36354: LD_VAR 0 1
36358: PUSH
36359: LD_VAR 0 3
36363: ARRAY
36364: PPUSH
36365: CALL 41226 0 2
36369: ST_TO_ADDR
36370: GO 36341
36372: POP
36373: POP
// end ;
36374: LD_VAR 0 2
36378: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36379: LD_INT 0
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
36385: PPUSH
36386: PPUSH
// if not unit or not hexes then
36387: LD_VAR 0 1
36391: NOT
36392: IFTRUE 36401
36394: PUSH
36395: LD_VAR 0 2
36399: NOT
36400: OR
36401: IFFALSE 36405
// exit ;
36403: GO 36528
// dist := 9999 ;
36405: LD_ADDR_VAR 0 5
36409: PUSH
36410: LD_INT 9999
36412: ST_TO_ADDR
// for i = 1 to hexes do
36413: LD_ADDR_VAR 0 4
36417: PUSH
36418: DOUBLE
36419: LD_INT 1
36421: DEC
36422: ST_TO_ADDR
36423: LD_VAR 0 2
36427: PUSH
36428: FOR_TO
36429: IFFALSE 36516
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36431: LD_ADDR_VAR 0 6
36435: PUSH
36436: LD_VAR 0 1
36440: PPUSH
36441: LD_VAR 0 2
36445: PUSH
36446: LD_VAR 0 4
36450: ARRAY
36451: PUSH
36452: LD_INT 1
36454: ARRAY
36455: PPUSH
36456: LD_VAR 0 2
36460: PUSH
36461: LD_VAR 0 4
36465: ARRAY
36466: PUSH
36467: LD_INT 2
36469: ARRAY
36470: PPUSH
36471: CALL_OW 297
36475: ST_TO_ADDR
// if tdist < dist then
36476: LD_VAR 0 6
36480: PUSH
36481: LD_VAR 0 5
36485: LESS
36486: IFFALSE 36514
// begin hex := hexes [ i ] ;
36488: LD_ADDR_VAR 0 8
36492: PUSH
36493: LD_VAR 0 2
36497: PUSH
36498: LD_VAR 0 4
36502: ARRAY
36503: ST_TO_ADDR
// dist := tdist ;
36504: LD_ADDR_VAR 0 5
36508: PUSH
36509: LD_VAR 0 6
36513: ST_TO_ADDR
// end ; end ;
36514: GO 36428
36516: POP
36517: POP
// result := hex ;
36518: LD_ADDR_VAR 0 3
36522: PUSH
36523: LD_VAR 0 8
36527: ST_TO_ADDR
// end ;
36528: LD_VAR 0 3
36532: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36533: LD_INT 0
36535: PPUSH
36536: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36537: LD_VAR 0 1
36541: NOT
36542: IFTRUE 36581
36544: PUSH
36545: LD_VAR 0 1
36549: PUSH
36550: LD_INT 21
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 23
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PPUSH
36574: CALL_OW 69
36578: IN
36579: NOT
36580: OR
36581: IFFALSE 36585
// exit ;
36583: GO 36632
// for i = 1 to 3 do
36585: LD_ADDR_VAR 0 3
36589: PUSH
36590: DOUBLE
36591: LD_INT 1
36593: DEC
36594: ST_TO_ADDR
36595: LD_INT 3
36597: PUSH
36598: FOR_TO
36599: IFFALSE 36630
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36601: LD_VAR 0 1
36605: PPUSH
36606: CALL_OW 250
36610: PPUSH
36611: LD_VAR 0 1
36615: PPUSH
36616: CALL_OW 251
36620: PPUSH
36621: LD_INT 1
36623: PPUSH
36624: CALL_OW 453
36628: GO 36598
36630: POP
36631: POP
// end ;
36632: LD_VAR 0 2
36636: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36637: LD_INT 0
36639: PPUSH
36640: PPUSH
36641: PPUSH
36642: PPUSH
36643: PPUSH
36644: PPUSH
// if not unit or not enemy_unit then
36645: LD_VAR 0 1
36649: NOT
36650: IFTRUE 36659
36652: PUSH
36653: LD_VAR 0 2
36657: NOT
36658: OR
36659: IFFALSE 36663
// exit ;
36661: GO 37144
// if GetLives ( i ) < 250 then
36663: LD_VAR 0 4
36667: PPUSH
36668: CALL_OW 256
36672: PUSH
36673: LD_INT 250
36675: LESS
36676: IFFALSE 36689
// begin ComAutodestruct ( i ) ;
36678: LD_VAR 0 4
36682: PPUSH
36683: CALL 36533 0 1
// exit ;
36687: GO 37144
// end ; x := GetX ( enemy_unit ) ;
36689: LD_ADDR_VAR 0 7
36693: PUSH
36694: LD_VAR 0 2
36698: PPUSH
36699: CALL_OW 250
36703: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36704: LD_ADDR_VAR 0 8
36708: PUSH
36709: LD_VAR 0 2
36713: PPUSH
36714: CALL_OW 251
36718: ST_TO_ADDR
// if not x or not y then
36719: LD_VAR 0 7
36723: NOT
36724: IFTRUE 36733
36726: PUSH
36727: LD_VAR 0 8
36731: NOT
36732: OR
36733: IFFALSE 36737
// exit ;
36735: GO 37144
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36737: LD_ADDR_VAR 0 6
36741: PUSH
36742: LD_VAR 0 7
36746: PPUSH
36747: LD_INT 0
36749: PPUSH
36750: LD_INT 4
36752: PPUSH
36753: CALL_OW 272
36757: PUSH
36758: LD_VAR 0 8
36762: PPUSH
36763: LD_INT 0
36765: PPUSH
36766: LD_INT 4
36768: PPUSH
36769: CALL_OW 273
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_VAR 0 7
36782: PPUSH
36783: LD_INT 1
36785: PPUSH
36786: LD_INT 4
36788: PPUSH
36789: CALL_OW 272
36793: PUSH
36794: LD_VAR 0 8
36798: PPUSH
36799: LD_INT 1
36801: PPUSH
36802: LD_INT 4
36804: PPUSH
36805: CALL_OW 273
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_VAR 0 7
36818: PPUSH
36819: LD_INT 2
36821: PPUSH
36822: LD_INT 4
36824: PPUSH
36825: CALL_OW 272
36829: PUSH
36830: LD_VAR 0 8
36834: PPUSH
36835: LD_INT 2
36837: PPUSH
36838: LD_INT 4
36840: PPUSH
36841: CALL_OW 273
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_VAR 0 7
36854: PPUSH
36855: LD_INT 3
36857: PPUSH
36858: LD_INT 4
36860: PPUSH
36861: CALL_OW 272
36865: PUSH
36866: LD_VAR 0 8
36870: PPUSH
36871: LD_INT 3
36873: PPUSH
36874: LD_INT 4
36876: PPUSH
36877: CALL_OW 273
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_VAR 0 7
36890: PPUSH
36891: LD_INT 4
36893: PPUSH
36894: LD_INT 4
36896: PPUSH
36897: CALL_OW 272
36901: PUSH
36902: LD_VAR 0 8
36906: PPUSH
36907: LD_INT 4
36909: PPUSH
36910: LD_INT 4
36912: PPUSH
36913: CALL_OW 273
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_VAR 0 7
36926: PPUSH
36927: LD_INT 5
36929: PPUSH
36930: LD_INT 4
36932: PPUSH
36933: CALL_OW 272
36937: PUSH
36938: LD_VAR 0 8
36942: PPUSH
36943: LD_INT 5
36945: PPUSH
36946: LD_INT 4
36948: PPUSH
36949: CALL_OW 273
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: ST_TO_ADDR
// for i = tmp downto 1 do
36966: LD_ADDR_VAR 0 4
36970: PUSH
36971: DOUBLE
36972: LD_VAR 0 6
36976: INC
36977: ST_TO_ADDR
36978: LD_INT 1
36980: PUSH
36981: FOR_DOWNTO
36982: IFFALSE 37085
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36984: LD_VAR 0 6
36988: PUSH
36989: LD_VAR 0 4
36993: ARRAY
36994: PUSH
36995: LD_INT 1
36997: ARRAY
36998: PPUSH
36999: LD_VAR 0 6
37003: PUSH
37004: LD_VAR 0 4
37008: ARRAY
37009: PUSH
37010: LD_INT 2
37012: ARRAY
37013: PPUSH
37014: CALL_OW 488
37018: NOT
37019: IFTRUE 37061
37021: PUSH
37022: LD_VAR 0 6
37026: PUSH
37027: LD_VAR 0 4
37031: ARRAY
37032: PUSH
37033: LD_INT 1
37035: ARRAY
37036: PPUSH
37037: LD_VAR 0 6
37041: PUSH
37042: LD_VAR 0 4
37046: ARRAY
37047: PUSH
37048: LD_INT 2
37050: ARRAY
37051: PPUSH
37052: CALL_OW 428
37056: PUSH
37057: LD_INT 0
37059: NONEQUAL
37060: OR
37061: IFFALSE 37083
// tmp := Delete ( tmp , i ) ;
37063: LD_ADDR_VAR 0 6
37067: PUSH
37068: LD_VAR 0 6
37072: PPUSH
37073: LD_VAR 0 4
37077: PPUSH
37078: CALL_OW 3
37082: ST_TO_ADDR
37083: GO 36981
37085: POP
37086: POP
// j := GetClosestHex ( unit , tmp ) ;
37087: LD_ADDR_VAR 0 5
37091: PUSH
37092: LD_VAR 0 1
37096: PPUSH
37097: LD_VAR 0 6
37101: PPUSH
37102: CALL 36379 0 2
37106: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37107: LD_VAR 0 1
37111: PPUSH
37112: LD_VAR 0 5
37116: PUSH
37117: LD_INT 1
37119: ARRAY
37120: PPUSH
37121: LD_VAR 0 5
37125: PUSH
37126: LD_INT 2
37128: ARRAY
37129: PPUSH
37130: CALL_OW 111
// result := j ;
37134: LD_ADDR_VAR 0 3
37138: PUSH
37139: LD_VAR 0 5
37143: ST_TO_ADDR
// end ;
37144: LD_VAR 0 3
37148: RET
// export function PrepareApemanSoldier ( ) ; begin
37149: LD_INT 0
37151: PPUSH
// uc_nation := 0 ;
37152: LD_ADDR_OWVAR 21
37156: PUSH
37157: LD_INT 0
37159: ST_TO_ADDR
// hc_sex := sex_male ;
37160: LD_ADDR_OWVAR 27
37164: PUSH
37165: LD_INT 1
37167: ST_TO_ADDR
// hc_name :=  ;
37168: LD_ADDR_OWVAR 26
37172: PUSH
37173: LD_STRING 
37175: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37176: LD_ADDR_OWVAR 28
37180: PUSH
37181: LD_INT 15
37183: ST_TO_ADDR
// hc_gallery :=  ;
37184: LD_ADDR_OWVAR 33
37188: PUSH
37189: LD_STRING 
37191: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37192: LD_ADDR_OWVAR 31
37196: PUSH
37197: LD_INT 0
37199: PPUSH
37200: LD_INT 3
37202: PPUSH
37203: CALL_OW 12
37207: PUSH
37208: LD_INT 0
37210: PPUSH
37211: LD_INT 3
37213: PPUSH
37214: CALL_OW 12
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37231: LD_ADDR_OWVAR 29
37235: PUSH
37236: LD_INT 10
37238: PUSH
37239: LD_INT 12
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: ST_TO_ADDR
// end ;
37246: LD_VAR 0 1
37250: RET
// export function PrepareApemanEngineer ( ) ; begin
37251: LD_INT 0
37253: PPUSH
// uc_nation := 0 ;
37254: LD_ADDR_OWVAR 21
37258: PUSH
37259: LD_INT 0
37261: ST_TO_ADDR
// hc_sex := sex_male ;
37262: LD_ADDR_OWVAR 27
37266: PUSH
37267: LD_INT 1
37269: ST_TO_ADDR
// hc_name :=  ;
37270: LD_ADDR_OWVAR 26
37274: PUSH
37275: LD_STRING 
37277: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37278: LD_ADDR_OWVAR 28
37282: PUSH
37283: LD_INT 16
37285: ST_TO_ADDR
// hc_gallery :=  ;
37286: LD_ADDR_OWVAR 33
37290: PUSH
37291: LD_STRING 
37293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37294: LD_ADDR_OWVAR 31
37298: PUSH
37299: LD_INT 0
37301: PPUSH
37302: LD_INT 3
37304: PPUSH
37305: CALL_OW 12
37309: PUSH
37310: LD_INT 0
37312: PPUSH
37313: LD_INT 3
37315: PPUSH
37316: CALL_OW 12
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37333: LD_ADDR_OWVAR 29
37337: PUSH
37338: LD_INT 10
37340: PUSH
37341: LD_INT 12
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: ST_TO_ADDR
// end ;
37348: LD_VAR 0 1
37352: RET
// export function PrepareApeman ( agressivity ) ; begin
37353: LD_INT 0
37355: PPUSH
// uc_side := 0 ;
37356: LD_ADDR_OWVAR 20
37360: PUSH
37361: LD_INT 0
37363: ST_TO_ADDR
// uc_nation := 0 ;
37364: LD_ADDR_OWVAR 21
37368: PUSH
37369: LD_INT 0
37371: ST_TO_ADDR
// hc_sex := sex_male ;
37372: LD_ADDR_OWVAR 27
37376: PUSH
37377: LD_INT 1
37379: ST_TO_ADDR
// hc_class := class_apeman ;
37380: LD_ADDR_OWVAR 28
37384: PUSH
37385: LD_INT 12
37387: ST_TO_ADDR
// hc_gallery :=  ;
37388: LD_ADDR_OWVAR 33
37392: PUSH
37393: LD_STRING 
37395: ST_TO_ADDR
// hc_name :=  ;
37396: LD_ADDR_OWVAR 26
37400: PUSH
37401: LD_STRING 
37403: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37404: LD_ADDR_OWVAR 29
37408: PUSH
37409: LD_INT 10
37411: PUSH
37412: LD_INT 12
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: ST_TO_ADDR
// if agressivity = 0 then
37419: LD_VAR 0 1
37423: PUSH
37424: LD_INT 0
37426: EQUAL
37427: IFFALSE 37439
// hc_agressivity := 0 else
37429: LD_ADDR_OWVAR 35
37433: PUSH
37434: LD_INT 0
37436: ST_TO_ADDR
37437: GO 37460
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37439: LD_ADDR_OWVAR 35
37443: PUSH
37444: LD_VAR 0 1
37448: NEG
37449: PPUSH
37450: LD_VAR 0 1
37454: PPUSH
37455: CALL_OW 12
37459: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37460: LD_ADDR_OWVAR 31
37464: PUSH
37465: LD_INT 0
37467: PPUSH
37468: LD_INT 3
37470: PPUSH
37471: CALL_OW 12
37475: PUSH
37476: LD_INT 0
37478: PPUSH
37479: LD_INT 3
37481: PPUSH
37482: CALL_OW 12
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: ST_TO_ADDR
// end ;
37499: LD_VAR 0 2
37503: RET
// export function PrepareTiger ( agressivity ) ; begin
37504: LD_INT 0
37506: PPUSH
// uc_side := 0 ;
37507: LD_ADDR_OWVAR 20
37511: PUSH
37512: LD_INT 0
37514: ST_TO_ADDR
// uc_nation := 0 ;
37515: LD_ADDR_OWVAR 21
37519: PUSH
37520: LD_INT 0
37522: ST_TO_ADDR
// InitHc ;
37523: CALL_OW 19
// hc_class := class_tiger ;
37527: LD_ADDR_OWVAR 28
37531: PUSH
37532: LD_INT 14
37534: ST_TO_ADDR
// hc_gallery :=  ;
37535: LD_ADDR_OWVAR 33
37539: PUSH
37540: LD_STRING 
37542: ST_TO_ADDR
// hc_name :=  ;
37543: LD_ADDR_OWVAR 26
37547: PUSH
37548: LD_STRING 
37550: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37551: LD_ADDR_OWVAR 35
37555: PUSH
37556: LD_VAR 0 1
37560: NEG
37561: PPUSH
37562: LD_VAR 0 1
37566: PPUSH
37567: CALL_OW 12
37571: ST_TO_ADDR
// end ;
37572: LD_VAR 0 2
37576: RET
// export function PrepareEnchidna ( ) ; begin
37577: LD_INT 0
37579: PPUSH
// uc_side := 0 ;
37580: LD_ADDR_OWVAR 20
37584: PUSH
37585: LD_INT 0
37587: ST_TO_ADDR
// uc_nation := 0 ;
37588: LD_ADDR_OWVAR 21
37592: PUSH
37593: LD_INT 0
37595: ST_TO_ADDR
// InitHc ;
37596: CALL_OW 19
// hc_class := class_baggie ;
37600: LD_ADDR_OWVAR 28
37604: PUSH
37605: LD_INT 13
37607: ST_TO_ADDR
// hc_gallery :=  ;
37608: LD_ADDR_OWVAR 33
37612: PUSH
37613: LD_STRING 
37615: ST_TO_ADDR
// hc_name :=  ;
37616: LD_ADDR_OWVAR 26
37620: PUSH
37621: LD_STRING 
37623: ST_TO_ADDR
// end ;
37624: LD_VAR 0 1
37628: RET
// export function PrepareFrog ( ) ; begin
37629: LD_INT 0
37631: PPUSH
// uc_side := 0 ;
37632: LD_ADDR_OWVAR 20
37636: PUSH
37637: LD_INT 0
37639: ST_TO_ADDR
// uc_nation := 0 ;
37640: LD_ADDR_OWVAR 21
37644: PUSH
37645: LD_INT 0
37647: ST_TO_ADDR
// InitHc ;
37648: CALL_OW 19
// hc_class := class_frog ;
37652: LD_ADDR_OWVAR 28
37656: PUSH
37657: LD_INT 19
37659: ST_TO_ADDR
// hc_gallery :=  ;
37660: LD_ADDR_OWVAR 33
37664: PUSH
37665: LD_STRING 
37667: ST_TO_ADDR
// hc_name :=  ;
37668: LD_ADDR_OWVAR 26
37672: PUSH
37673: LD_STRING 
37675: ST_TO_ADDR
// end ;
37676: LD_VAR 0 1
37680: RET
// export function PrepareFish ( ) ; begin
37681: LD_INT 0
37683: PPUSH
// uc_side := 0 ;
37684: LD_ADDR_OWVAR 20
37688: PUSH
37689: LD_INT 0
37691: ST_TO_ADDR
// uc_nation := 0 ;
37692: LD_ADDR_OWVAR 21
37696: PUSH
37697: LD_INT 0
37699: ST_TO_ADDR
// InitHc ;
37700: CALL_OW 19
// hc_class := class_fish ;
37704: LD_ADDR_OWVAR 28
37708: PUSH
37709: LD_INT 20
37711: ST_TO_ADDR
// hc_gallery :=  ;
37712: LD_ADDR_OWVAR 33
37716: PUSH
37717: LD_STRING 
37719: ST_TO_ADDR
// hc_name :=  ;
37720: LD_ADDR_OWVAR 26
37724: PUSH
37725: LD_STRING 
37727: ST_TO_ADDR
// end ;
37728: LD_VAR 0 1
37732: RET
// export function PrepareBird ( ) ; begin
37733: LD_INT 0
37735: PPUSH
// uc_side := 0 ;
37736: LD_ADDR_OWVAR 20
37740: PUSH
37741: LD_INT 0
37743: ST_TO_ADDR
// uc_nation := 0 ;
37744: LD_ADDR_OWVAR 21
37748: PUSH
37749: LD_INT 0
37751: ST_TO_ADDR
// InitHc ;
37752: CALL_OW 19
// hc_class := class_phororhacos ;
37756: LD_ADDR_OWVAR 28
37760: PUSH
37761: LD_INT 18
37763: ST_TO_ADDR
// hc_gallery :=  ;
37764: LD_ADDR_OWVAR 33
37768: PUSH
37769: LD_STRING 
37771: ST_TO_ADDR
// hc_name :=  ;
37772: LD_ADDR_OWVAR 26
37776: PUSH
37777: LD_STRING 
37779: ST_TO_ADDR
// end ;
37780: LD_VAR 0 1
37784: RET
// export function PrepareHorse ( ) ; begin
37785: LD_INT 0
37787: PPUSH
// uc_side := 0 ;
37788: LD_ADDR_OWVAR 20
37792: PUSH
37793: LD_INT 0
37795: ST_TO_ADDR
// uc_nation := 0 ;
37796: LD_ADDR_OWVAR 21
37800: PUSH
37801: LD_INT 0
37803: ST_TO_ADDR
// InitHc ;
37804: CALL_OW 19
// hc_class := class_horse ;
37808: LD_ADDR_OWVAR 28
37812: PUSH
37813: LD_INT 21
37815: ST_TO_ADDR
// hc_gallery :=  ;
37816: LD_ADDR_OWVAR 33
37820: PUSH
37821: LD_STRING 
37823: ST_TO_ADDR
// hc_name :=  ;
37824: LD_ADDR_OWVAR 26
37828: PUSH
37829: LD_STRING 
37831: ST_TO_ADDR
// end ;
37832: LD_VAR 0 1
37836: RET
// export function PrepareMastodont ( ) ; begin
37837: LD_INT 0
37839: PPUSH
// uc_side := 0 ;
37840: LD_ADDR_OWVAR 20
37844: PUSH
37845: LD_INT 0
37847: ST_TO_ADDR
// uc_nation := 0 ;
37848: LD_ADDR_OWVAR 21
37852: PUSH
37853: LD_INT 0
37855: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37856: LD_ADDR_OWVAR 37
37860: PUSH
37861: LD_INT 31
37863: ST_TO_ADDR
// vc_control := control_rider ;
37864: LD_ADDR_OWVAR 38
37868: PUSH
37869: LD_INT 4
37871: ST_TO_ADDR
// end ;
37872: LD_VAR 0 1
37876: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37877: LD_INT 0
37879: PPUSH
37880: PPUSH
37881: PPUSH
// uc_side = 0 ;
37882: LD_ADDR_OWVAR 20
37886: PUSH
37887: LD_INT 0
37889: ST_TO_ADDR
// uc_nation = 0 ;
37890: LD_ADDR_OWVAR 21
37894: PUSH
37895: LD_INT 0
37897: ST_TO_ADDR
// InitHc_All ( ) ;
37898: CALL_OW 584
// InitVc ;
37902: CALL_OW 20
// if mastodonts then
37906: LD_VAR 0 6
37910: IFFALSE 37977
// for i = 1 to mastodonts do
37912: LD_ADDR_VAR 0 11
37916: PUSH
37917: DOUBLE
37918: LD_INT 1
37920: DEC
37921: ST_TO_ADDR
37922: LD_VAR 0 6
37926: PUSH
37927: FOR_TO
37928: IFFALSE 37975
// begin vc_chassis := 31 ;
37930: LD_ADDR_OWVAR 37
37934: PUSH
37935: LD_INT 31
37937: ST_TO_ADDR
// vc_control := control_rider ;
37938: LD_ADDR_OWVAR 38
37942: PUSH
37943: LD_INT 4
37945: ST_TO_ADDR
// animal := CreateVehicle ;
37946: LD_ADDR_VAR 0 12
37950: PUSH
37951: CALL_OW 45
37955: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37956: LD_VAR 0 12
37960: PPUSH
37961: LD_VAR 0 8
37965: PPUSH
37966: LD_INT 0
37968: PPUSH
37969: CALL 40119 0 3
// end ;
37973: GO 37927
37975: POP
37976: POP
// if horses then
37977: LD_VAR 0 5
37981: IFFALSE 38048
// for i = 1 to horses do
37983: LD_ADDR_VAR 0 11
37987: PUSH
37988: DOUBLE
37989: LD_INT 1
37991: DEC
37992: ST_TO_ADDR
37993: LD_VAR 0 5
37997: PUSH
37998: FOR_TO
37999: IFFALSE 38046
// begin hc_class := 21 ;
38001: LD_ADDR_OWVAR 28
38005: PUSH
38006: LD_INT 21
38008: ST_TO_ADDR
// hc_gallery :=  ;
38009: LD_ADDR_OWVAR 33
38013: PUSH
38014: LD_STRING 
38016: ST_TO_ADDR
// animal := CreateHuman ;
38017: LD_ADDR_VAR 0 12
38021: PUSH
38022: CALL_OW 44
38026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38027: LD_VAR 0 12
38031: PPUSH
38032: LD_VAR 0 8
38036: PPUSH
38037: LD_INT 0
38039: PPUSH
38040: CALL 40119 0 3
// end ;
38044: GO 37998
38046: POP
38047: POP
// if birds then
38048: LD_VAR 0 1
38052: IFFALSE 38119
// for i = 1 to birds do
38054: LD_ADDR_VAR 0 11
38058: PUSH
38059: DOUBLE
38060: LD_INT 1
38062: DEC
38063: ST_TO_ADDR
38064: LD_VAR 0 1
38068: PUSH
38069: FOR_TO
38070: IFFALSE 38117
// begin hc_class := 18 ;
38072: LD_ADDR_OWVAR 28
38076: PUSH
38077: LD_INT 18
38079: ST_TO_ADDR
// hc_gallery =  ;
38080: LD_ADDR_OWVAR 33
38084: PUSH
38085: LD_STRING 
38087: ST_TO_ADDR
// animal := CreateHuman ;
38088: LD_ADDR_VAR 0 12
38092: PUSH
38093: CALL_OW 44
38097: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38098: LD_VAR 0 12
38102: PPUSH
38103: LD_VAR 0 8
38107: PPUSH
38108: LD_INT 0
38110: PPUSH
38111: CALL 40119 0 3
// end ;
38115: GO 38069
38117: POP
38118: POP
// if tigers then
38119: LD_VAR 0 2
38123: IFFALSE 38207
// for i = 1 to tigers do
38125: LD_ADDR_VAR 0 11
38129: PUSH
38130: DOUBLE
38131: LD_INT 1
38133: DEC
38134: ST_TO_ADDR
38135: LD_VAR 0 2
38139: PUSH
38140: FOR_TO
38141: IFFALSE 38205
// begin hc_class = class_tiger ;
38143: LD_ADDR_OWVAR 28
38147: PUSH
38148: LD_INT 14
38150: ST_TO_ADDR
// hc_gallery =  ;
38151: LD_ADDR_OWVAR 33
38155: PUSH
38156: LD_STRING 
38158: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38159: LD_ADDR_OWVAR 35
38163: PUSH
38164: LD_INT 7
38166: NEG
38167: PPUSH
38168: LD_INT 7
38170: PPUSH
38171: CALL_OW 12
38175: ST_TO_ADDR
// animal := CreateHuman ;
38176: LD_ADDR_VAR 0 12
38180: PUSH
38181: CALL_OW 44
38185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38186: LD_VAR 0 12
38190: PPUSH
38191: LD_VAR 0 8
38195: PPUSH
38196: LD_INT 0
38198: PPUSH
38199: CALL 40119 0 3
// end ;
38203: GO 38140
38205: POP
38206: POP
// if apemans then
38207: LD_VAR 0 3
38211: IFFALSE 38334
// for i = 1 to apemans do
38213: LD_ADDR_VAR 0 11
38217: PUSH
38218: DOUBLE
38219: LD_INT 1
38221: DEC
38222: ST_TO_ADDR
38223: LD_VAR 0 3
38227: PUSH
38228: FOR_TO
38229: IFFALSE 38332
// begin hc_class = class_apeman ;
38231: LD_ADDR_OWVAR 28
38235: PUSH
38236: LD_INT 12
38238: ST_TO_ADDR
// hc_gallery =  ;
38239: LD_ADDR_OWVAR 33
38243: PUSH
38244: LD_STRING 
38246: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38247: LD_ADDR_OWVAR 35
38251: PUSH
38252: LD_INT 2
38254: NEG
38255: PPUSH
38256: LD_INT 2
38258: PPUSH
38259: CALL_OW 12
38263: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38264: LD_ADDR_OWVAR 31
38268: PUSH
38269: LD_INT 1
38271: PPUSH
38272: LD_INT 3
38274: PPUSH
38275: CALL_OW 12
38279: PUSH
38280: LD_INT 1
38282: PPUSH
38283: LD_INT 3
38285: PPUSH
38286: CALL_OW 12
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: ST_TO_ADDR
// animal := CreateHuman ;
38303: LD_ADDR_VAR 0 12
38307: PUSH
38308: CALL_OW 44
38312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38313: LD_VAR 0 12
38317: PPUSH
38318: LD_VAR 0 8
38322: PPUSH
38323: LD_INT 0
38325: PPUSH
38326: CALL 40119 0 3
// end ;
38330: GO 38228
38332: POP
38333: POP
// if enchidnas then
38334: LD_VAR 0 4
38338: IFFALSE 38405
// for i = 1 to enchidnas do
38340: LD_ADDR_VAR 0 11
38344: PUSH
38345: DOUBLE
38346: LD_INT 1
38348: DEC
38349: ST_TO_ADDR
38350: LD_VAR 0 4
38354: PUSH
38355: FOR_TO
38356: IFFALSE 38403
// begin hc_class = 13 ;
38358: LD_ADDR_OWVAR 28
38362: PUSH
38363: LD_INT 13
38365: ST_TO_ADDR
// hc_gallery =  ;
38366: LD_ADDR_OWVAR 33
38370: PUSH
38371: LD_STRING 
38373: ST_TO_ADDR
// animal := CreateHuman ;
38374: LD_ADDR_VAR 0 12
38378: PUSH
38379: CALL_OW 44
38383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38384: LD_VAR 0 12
38388: PPUSH
38389: LD_VAR 0 8
38393: PPUSH
38394: LD_INT 0
38396: PPUSH
38397: CALL 40119 0 3
// end ;
38401: GO 38355
38403: POP
38404: POP
// if fishes then
38405: LD_VAR 0 7
38409: IFFALSE 38476
// for i = 1 to fishes do
38411: LD_ADDR_VAR 0 11
38415: PUSH
38416: DOUBLE
38417: LD_INT 1
38419: DEC
38420: ST_TO_ADDR
38421: LD_VAR 0 7
38425: PUSH
38426: FOR_TO
38427: IFFALSE 38474
// begin hc_class = 20 ;
38429: LD_ADDR_OWVAR 28
38433: PUSH
38434: LD_INT 20
38436: ST_TO_ADDR
// hc_gallery =  ;
38437: LD_ADDR_OWVAR 33
38441: PUSH
38442: LD_STRING 
38444: ST_TO_ADDR
// animal := CreateHuman ;
38445: LD_ADDR_VAR 0 12
38449: PUSH
38450: CALL_OW 44
38454: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38455: LD_VAR 0 12
38459: PPUSH
38460: LD_VAR 0 9
38464: PPUSH
38465: LD_INT 0
38467: PPUSH
38468: CALL 40119 0 3
// end ;
38472: GO 38426
38474: POP
38475: POP
// end ;
38476: LD_VAR 0 10
38480: RET
// export function WantHeal ( sci , unit ) ; begin
38481: LD_INT 0
38483: PPUSH
// if GetTaskList ( sci ) > 0 then
38484: LD_VAR 0 1
38488: PPUSH
38489: CALL_OW 437
38493: PUSH
38494: LD_INT 0
38496: GREATER
38497: IFFALSE 38569
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38499: LD_VAR 0 1
38503: PPUSH
38504: CALL_OW 437
38508: PUSH
38509: LD_INT 1
38511: ARRAY
38512: PUSH
38513: LD_INT 1
38515: ARRAY
38516: PUSH
38517: LD_STRING l
38519: EQUAL
38520: IFFALSE 38547
38522: PUSH
38523: LD_VAR 0 1
38527: PPUSH
38528: CALL_OW 437
38532: PUSH
38533: LD_INT 1
38535: ARRAY
38536: PUSH
38537: LD_INT 4
38539: ARRAY
38540: PUSH
38541: LD_VAR 0 2
38545: EQUAL
38546: AND
38547: IFFALSE 38559
// result := true else
38549: LD_ADDR_VAR 0 3
38553: PUSH
38554: LD_INT 1
38556: ST_TO_ADDR
38557: GO 38567
// result := false ;
38559: LD_ADDR_VAR 0 3
38563: PUSH
38564: LD_INT 0
38566: ST_TO_ADDR
// end else
38567: GO 38577
// result := false ;
38569: LD_ADDR_VAR 0 3
38573: PUSH
38574: LD_INT 0
38576: ST_TO_ADDR
// end ;
38577: LD_VAR 0 3
38581: RET
// export function HealTarget ( sci ) ; begin
38582: LD_INT 0
38584: PPUSH
// if not sci then
38585: LD_VAR 0 1
38589: NOT
38590: IFFALSE 38594
// exit ;
38592: GO 38659
// result := 0 ;
38594: LD_ADDR_VAR 0 2
38598: PUSH
38599: LD_INT 0
38601: ST_TO_ADDR
// if GetTaskList ( sci ) then
38602: LD_VAR 0 1
38606: PPUSH
38607: CALL_OW 437
38611: IFFALSE 38659
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 437
38622: PUSH
38623: LD_INT 1
38625: ARRAY
38626: PUSH
38627: LD_INT 1
38629: ARRAY
38630: PUSH
38631: LD_STRING l
38633: EQUAL
38634: IFFALSE 38659
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38636: LD_ADDR_VAR 0 2
38640: PUSH
38641: LD_VAR 0 1
38645: PPUSH
38646: CALL_OW 437
38650: PUSH
38651: LD_INT 1
38653: ARRAY
38654: PUSH
38655: LD_INT 4
38657: ARRAY
38658: ST_TO_ADDR
// end ;
38659: LD_VAR 0 2
38663: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38664: LD_INT 0
38666: PPUSH
38667: PPUSH
38668: PPUSH
38669: PPUSH
// if not base_units then
38670: LD_VAR 0 1
38674: NOT
38675: IFFALSE 38679
// exit ;
38677: GO 38766
// result := false ;
38679: LD_ADDR_VAR 0 2
38683: PUSH
38684: LD_INT 0
38686: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38687: LD_ADDR_VAR 0 5
38691: PUSH
38692: LD_VAR 0 1
38696: PPUSH
38697: LD_INT 21
38699: PUSH
38700: LD_INT 3
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PPUSH
38707: CALL_OW 72
38711: ST_TO_ADDR
// if not tmp then
38712: LD_VAR 0 5
38716: NOT
38717: IFFALSE 38721
// exit ;
38719: GO 38766
// for i in tmp do
38721: LD_ADDR_VAR 0 3
38725: PUSH
38726: LD_VAR 0 5
38730: PUSH
38731: FOR_IN
38732: IFFALSE 38764
// begin result := EnemyInRange ( i , 22 ) ;
38734: LD_ADDR_VAR 0 2
38738: PUSH
38739: LD_VAR 0 3
38743: PPUSH
38744: LD_INT 22
38746: PPUSH
38747: CALL 36181 0 2
38751: ST_TO_ADDR
// if result then
38752: LD_VAR 0 2
38756: IFFALSE 38762
// exit ;
38758: POP
38759: POP
38760: GO 38766
// end ;
38762: GO 38731
38764: POP
38765: POP
// end ;
38766: LD_VAR 0 2
38770: RET
// export function FilterByTag ( units , tag ) ; begin
38771: LD_INT 0
38773: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38774: LD_ADDR_VAR 0 3
38778: PUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: LD_INT 120
38786: PUSH
38787: LD_VAR 0 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PPUSH
38796: CALL_OW 72
38800: ST_TO_ADDR
// end ;
38801: LD_VAR 0 3
38805: RET
// export function IsDriver ( un ) ; begin
38806: LD_INT 0
38808: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38809: LD_ADDR_VAR 0 2
38813: PUSH
38814: LD_VAR 0 1
38818: PUSH
38819: LD_INT 55
38821: PUSH
38822: EMPTY
38823: LIST
38824: PPUSH
38825: CALL_OW 69
38829: IN
38830: ST_TO_ADDR
// end ;
38831: LD_VAR 0 2
38835: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38836: LD_INT 0
38838: PPUSH
38839: PPUSH
// list := [ ] ;
38840: LD_ADDR_VAR 0 5
38844: PUSH
38845: EMPTY
38846: ST_TO_ADDR
// case d of 0 :
38847: LD_VAR 0 3
38851: PUSH
38852: LD_INT 0
38854: DOUBLE
38855: EQUAL
38856: IFTRUE 38860
38858: GO 38993
38860: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38861: LD_ADDR_VAR 0 5
38865: PUSH
38866: LD_VAR 0 1
38870: PUSH
38871: LD_INT 4
38873: MINUS
38874: PUSH
38875: LD_VAR 0 2
38879: PUSH
38880: LD_INT 4
38882: MINUS
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: PUSH
38892: LD_VAR 0 1
38896: PUSH
38897: LD_INT 3
38899: MINUS
38900: PUSH
38901: LD_VAR 0 2
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: PUSH
38914: LD_VAR 0 1
38918: PUSH
38919: LD_INT 4
38921: PLUS
38922: PUSH
38923: LD_VAR 0 2
38927: PUSH
38928: LD_INT 4
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: LIST
38935: PUSH
38936: LD_VAR 0 1
38940: PUSH
38941: LD_INT 3
38943: PLUS
38944: PUSH
38945: LD_VAR 0 2
38949: PUSH
38950: LD_INT 3
38952: PLUS
38953: PUSH
38954: LD_INT 5
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: PUSH
38962: LD_VAR 0 1
38966: PUSH
38967: LD_VAR 0 2
38971: PUSH
38972: LD_INT 4
38974: PLUS
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// end ; 1 :
38991: GO 39691
38993: LD_INT 1
38995: DOUBLE
38996: EQUAL
38997: IFTRUE 39001
38999: GO 39134
39001: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39002: LD_ADDR_VAR 0 5
39006: PUSH
39007: LD_VAR 0 1
39011: PUSH
39012: LD_VAR 0 2
39016: PUSH
39017: LD_INT 4
39019: MINUS
39020: PUSH
39021: LD_INT 3
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: PUSH
39029: LD_VAR 0 1
39033: PUSH
39034: LD_INT 3
39036: MINUS
39037: PUSH
39038: LD_VAR 0 2
39042: PUSH
39043: LD_INT 3
39045: MINUS
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: PUSH
39055: LD_VAR 0 1
39059: PUSH
39060: LD_INT 4
39062: MINUS
39063: PUSH
39064: LD_VAR 0 2
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: PUSH
39077: LD_VAR 0 1
39081: PUSH
39082: LD_VAR 0 2
39086: PUSH
39087: LD_INT 3
39089: PLUS
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: PUSH
39099: LD_VAR 0 1
39103: PUSH
39104: LD_INT 4
39106: PLUS
39107: PUSH
39108: LD_VAR 0 2
39112: PUSH
39113: LD_INT 4
39115: PLUS
39116: PUSH
39117: LD_INT 5
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: ST_TO_ADDR
// end ; 2 :
39132: GO 39691
39134: LD_INT 2
39136: DOUBLE
39137: EQUAL
39138: IFTRUE 39142
39140: GO 39271
39142: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39143: LD_ADDR_VAR 0 5
39147: PUSH
39148: LD_VAR 0 1
39152: PUSH
39153: LD_VAR 0 2
39157: PUSH
39158: LD_INT 3
39160: MINUS
39161: PUSH
39162: LD_INT 3
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: PUSH
39170: LD_VAR 0 1
39174: PUSH
39175: LD_INT 4
39177: PLUS
39178: PUSH
39179: LD_VAR 0 2
39183: PUSH
39184: LD_INT 4
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: PUSH
39192: LD_VAR 0 1
39196: PUSH
39197: LD_VAR 0 2
39201: PUSH
39202: LD_INT 4
39204: PLUS
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: PUSH
39214: LD_VAR 0 1
39218: PUSH
39219: LD_INT 3
39221: MINUS
39222: PUSH
39223: LD_VAR 0 2
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: PUSH
39236: LD_VAR 0 1
39240: PUSH
39241: LD_INT 4
39243: MINUS
39244: PUSH
39245: LD_VAR 0 2
39249: PUSH
39250: LD_INT 4
39252: MINUS
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: ST_TO_ADDR
// end ; 3 :
39269: GO 39691
39271: LD_INT 3
39273: DOUBLE
39274: EQUAL
39275: IFTRUE 39279
39277: GO 39412
39279: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39280: LD_ADDR_VAR 0 5
39284: PUSH
39285: LD_VAR 0 1
39289: PUSH
39290: LD_INT 3
39292: PLUS
39293: PUSH
39294: LD_VAR 0 2
39298: PUSH
39299: LD_INT 4
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: PUSH
39307: LD_VAR 0 1
39311: PUSH
39312: LD_INT 4
39314: PLUS
39315: PUSH
39316: LD_VAR 0 2
39320: PUSH
39321: LD_INT 4
39323: PLUS
39324: PUSH
39325: LD_INT 5
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: PUSH
39333: LD_VAR 0 1
39337: PUSH
39338: LD_INT 4
39340: MINUS
39341: PUSH
39342: LD_VAR 0 2
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: PUSH
39355: LD_VAR 0 1
39359: PUSH
39360: LD_VAR 0 2
39364: PUSH
39365: LD_INT 4
39367: MINUS
39368: PUSH
39369: LD_INT 3
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: PUSH
39377: LD_VAR 0 1
39381: PUSH
39382: LD_INT 3
39384: MINUS
39385: PUSH
39386: LD_VAR 0 2
39390: PUSH
39391: LD_INT 3
39393: MINUS
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: LIST
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: ST_TO_ADDR
// end ; 4 :
39410: GO 39691
39412: LD_INT 4
39414: DOUBLE
39415: EQUAL
39416: IFTRUE 39420
39418: GO 39553
39420: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39421: LD_ADDR_VAR 0 5
39425: PUSH
39426: LD_VAR 0 1
39430: PUSH
39431: LD_VAR 0 2
39435: PUSH
39436: LD_INT 4
39438: PLUS
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: PUSH
39448: LD_VAR 0 1
39452: PUSH
39453: LD_INT 3
39455: PLUS
39456: PUSH
39457: LD_VAR 0 2
39461: PUSH
39462: LD_INT 3
39464: PLUS
39465: PUSH
39466: LD_INT 5
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: PUSH
39474: LD_VAR 0 1
39478: PUSH
39479: LD_INT 4
39481: PLUS
39482: PUSH
39483: LD_VAR 0 2
39487: PUSH
39488: LD_INT 4
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: PUSH
39496: LD_VAR 0 1
39500: PUSH
39501: LD_VAR 0 2
39505: PUSH
39506: LD_INT 3
39508: MINUS
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: PUSH
39518: LD_VAR 0 1
39522: PUSH
39523: LD_INT 4
39525: MINUS
39526: PUSH
39527: LD_VAR 0 2
39531: PUSH
39532: LD_INT 4
39534: MINUS
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: LIST
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: ST_TO_ADDR
// end ; 5 :
39551: GO 39691
39553: LD_INT 5
39555: DOUBLE
39556: EQUAL
39557: IFTRUE 39561
39559: GO 39690
39561: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39562: LD_ADDR_VAR 0 5
39566: PUSH
39567: LD_VAR 0 1
39571: PUSH
39572: LD_INT 4
39574: MINUS
39575: PUSH
39576: LD_VAR 0 2
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: LIST
39588: PUSH
39589: LD_VAR 0 1
39593: PUSH
39594: LD_VAR 0 2
39598: PUSH
39599: LD_INT 4
39601: MINUS
39602: PUSH
39603: LD_INT 3
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: PUSH
39611: LD_VAR 0 1
39615: PUSH
39616: LD_INT 4
39618: PLUS
39619: PUSH
39620: LD_VAR 0 2
39624: PUSH
39625: LD_INT 4
39627: PLUS
39628: PUSH
39629: LD_INT 5
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: PUSH
39637: LD_VAR 0 1
39641: PUSH
39642: LD_INT 3
39644: PLUS
39645: PUSH
39646: LD_VAR 0 2
39650: PUSH
39651: LD_INT 4
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: PUSH
39659: LD_VAR 0 1
39663: PUSH
39664: LD_VAR 0 2
39668: PUSH
39669: LD_INT 3
39671: PLUS
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: ST_TO_ADDR
// end ; end ;
39688: GO 39691
39690: POP
// result := list ;
39691: LD_ADDR_VAR 0 4
39695: PUSH
39696: LD_VAR 0 5
39700: ST_TO_ADDR
// end ;
39701: LD_VAR 0 4
39705: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39706: LD_INT 0
39708: PPUSH
39709: PPUSH
39710: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39711: LD_VAR 0 1
39715: NOT
39716: IFTRUE 39744
39718: PUSH
39719: LD_VAR 0 2
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 2
39729: PUSH
39730: LD_INT 3
39732: PUSH
39733: LD_INT 4
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: IN
39742: NOT
39743: OR
39744: IFFALSE 39748
// exit ;
39746: GO 39831
// tmp := [ ] ;
39748: LD_ADDR_VAR 0 5
39752: PUSH
39753: EMPTY
39754: ST_TO_ADDR
// for i in units do
39755: LD_ADDR_VAR 0 4
39759: PUSH
39760: LD_VAR 0 1
39764: PUSH
39765: FOR_IN
39766: IFFALSE 39800
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39768: LD_ADDR_VAR 0 5
39772: PUSH
39773: LD_VAR 0 5
39777: PPUSH
39778: LD_VAR 0 4
39782: PPUSH
39783: LD_VAR 0 2
39787: PPUSH
39788: CALL_OW 259
39792: PPUSH
39793: CALL 41226 0 2
39797: ST_TO_ADDR
39798: GO 39765
39800: POP
39801: POP
// if not tmp then
39802: LD_VAR 0 5
39806: NOT
39807: IFFALSE 39811
// exit ;
39809: GO 39831
// result := SortListByListDesc ( units , tmp ) ;
39811: LD_ADDR_VAR 0 3
39815: PUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: LD_VAR 0 5
39825: PPUSH
39826: CALL_OW 77
39830: ST_TO_ADDR
// end ;
39831: LD_VAR 0 3
39835: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39836: LD_INT 0
39838: PPUSH
39839: PPUSH
39840: PPUSH
// result := false ;
39841: LD_ADDR_VAR 0 3
39845: PUSH
39846: LD_INT 0
39848: ST_TO_ADDR
// if not building then
39849: LD_VAR 0 2
39853: NOT
39854: IFFALSE 39858
// exit ;
39856: GO 40002
// x := GetX ( building ) ;
39858: LD_ADDR_VAR 0 4
39862: PUSH
39863: LD_VAR 0 2
39867: PPUSH
39868: CALL_OW 250
39872: ST_TO_ADDR
// y := GetY ( building ) ;
39873: LD_ADDR_VAR 0 5
39877: PUSH
39878: LD_VAR 0 2
39882: PPUSH
39883: CALL_OW 251
39887: ST_TO_ADDR
// if not x or not y then
39888: LD_VAR 0 4
39892: NOT
39893: IFTRUE 39902
39895: PUSH
39896: LD_VAR 0 5
39900: NOT
39901: OR
39902: IFFALSE 39906
// exit ;
39904: GO 40002
// if GetTaskList ( unit ) then
39906: LD_VAR 0 1
39910: PPUSH
39911: CALL_OW 437
39915: IFFALSE 40002
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39917: LD_STRING e
39919: PUSH
39920: LD_VAR 0 1
39924: PPUSH
39925: CALL_OW 437
39929: PUSH
39930: LD_INT 1
39932: ARRAY
39933: PUSH
39934: LD_INT 1
39936: ARRAY
39937: EQUAL
39938: IFFALSE 39965
39940: PUSH
39941: LD_VAR 0 4
39945: PUSH
39946: LD_VAR 0 1
39950: PPUSH
39951: CALL_OW 437
39955: PUSH
39956: LD_INT 1
39958: ARRAY
39959: PUSH
39960: LD_INT 2
39962: ARRAY
39963: EQUAL
39964: AND
39965: IFFALSE 39992
39967: PUSH
39968: LD_VAR 0 5
39972: PUSH
39973: LD_VAR 0 1
39977: PPUSH
39978: CALL_OW 437
39982: PUSH
39983: LD_INT 1
39985: ARRAY
39986: PUSH
39987: LD_INT 3
39989: ARRAY
39990: EQUAL
39991: AND
39992: IFFALSE 40002
// result := true end ;
39994: LD_ADDR_VAR 0 3
39998: PUSH
39999: LD_INT 1
40001: ST_TO_ADDR
// end ;
40002: LD_VAR 0 3
40006: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40007: LD_INT 0
40009: PPUSH
// result := false ;
40010: LD_ADDR_VAR 0 4
40014: PUSH
40015: LD_INT 0
40017: ST_TO_ADDR
// if GetTaskList ( unit ) then
40018: LD_VAR 0 1
40022: PPUSH
40023: CALL_OW 437
40027: IFFALSE 40114
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40029: LD_STRING M
40031: PUSH
40032: LD_VAR 0 1
40036: PPUSH
40037: CALL_OW 437
40041: PUSH
40042: LD_INT 1
40044: ARRAY
40045: PUSH
40046: LD_INT 1
40048: ARRAY
40049: EQUAL
40050: IFFALSE 40077
40052: PUSH
40053: LD_VAR 0 2
40057: PUSH
40058: LD_VAR 0 1
40062: PPUSH
40063: CALL_OW 437
40067: PUSH
40068: LD_INT 1
40070: ARRAY
40071: PUSH
40072: LD_INT 2
40074: ARRAY
40075: EQUAL
40076: AND
40077: IFFALSE 40104
40079: PUSH
40080: LD_VAR 0 3
40084: PUSH
40085: LD_VAR 0 1
40089: PPUSH
40090: CALL_OW 437
40094: PUSH
40095: LD_INT 1
40097: ARRAY
40098: PUSH
40099: LD_INT 3
40101: ARRAY
40102: EQUAL
40103: AND
40104: IFFALSE 40114
// result := true ;
40106: LD_ADDR_VAR 0 4
40110: PUSH
40111: LD_INT 1
40113: ST_TO_ADDR
// end ; end ;
40114: LD_VAR 0 4
40118: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40119: LD_INT 0
40121: PPUSH
40122: PPUSH
40123: PPUSH
40124: PPUSH
// if not unit or not area then
40125: LD_VAR 0 1
40129: NOT
40130: IFTRUE 40139
40132: PUSH
40133: LD_VAR 0 2
40137: NOT
40138: OR
40139: IFFALSE 40143
// exit ;
40141: GO 40319
// tmp := AreaToList ( area , i ) ;
40143: LD_ADDR_VAR 0 6
40147: PUSH
40148: LD_VAR 0 2
40152: PPUSH
40153: LD_VAR 0 5
40157: PPUSH
40158: CALL_OW 517
40162: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40163: LD_ADDR_VAR 0 5
40167: PUSH
40168: DOUBLE
40169: LD_INT 1
40171: DEC
40172: ST_TO_ADDR
40173: LD_VAR 0 6
40177: PUSH
40178: LD_INT 1
40180: ARRAY
40181: PUSH
40182: FOR_TO
40183: IFFALSE 40317
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40185: LD_ADDR_VAR 0 7
40189: PUSH
40190: LD_VAR 0 6
40194: PUSH
40195: LD_INT 1
40197: ARRAY
40198: PUSH
40199: LD_VAR 0 5
40203: ARRAY
40204: PUSH
40205: LD_VAR 0 6
40209: PUSH
40210: LD_INT 2
40212: ARRAY
40213: PUSH
40214: LD_VAR 0 5
40218: ARRAY
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40224: LD_INT 92
40226: PUSH
40227: LD_VAR 0 7
40231: PUSH
40232: LD_INT 1
40234: ARRAY
40235: PUSH
40236: LD_VAR 0 7
40240: PUSH
40241: LD_INT 2
40243: ARRAY
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: PPUSH
40254: CALL_OW 69
40258: PUSH
40259: LD_INT 0
40261: EQUAL
40262: IFFALSE 40315
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40264: LD_VAR 0 1
40268: PPUSH
40269: LD_VAR 0 7
40273: PUSH
40274: LD_INT 1
40276: ARRAY
40277: PPUSH
40278: LD_VAR 0 7
40282: PUSH
40283: LD_INT 2
40285: ARRAY
40286: PPUSH
40287: LD_VAR 0 3
40291: PPUSH
40292: CALL_OW 48
// result := IsPlaced ( unit ) ;
40296: LD_ADDR_VAR 0 4
40300: PUSH
40301: LD_VAR 0 1
40305: PPUSH
40306: CALL_OW 305
40310: ST_TO_ADDR
// exit ;
40311: POP
40312: POP
40313: GO 40319
// end ; end ;
40315: GO 40182
40317: POP
40318: POP
// end ;
40319: LD_VAR 0 4
40323: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40324: LD_INT 0
40326: PPUSH
40327: PPUSH
40328: PPUSH
// if not side or side > 8 then
40329: LD_VAR 0 1
40333: NOT
40334: IFTRUE 40346
40336: PUSH
40337: LD_VAR 0 1
40341: PUSH
40342: LD_INT 8
40344: GREATER
40345: OR
40346: IFFALSE 40350
// exit ;
40348: GO 40537
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40350: LD_ADDR_VAR 0 4
40354: PUSH
40355: LD_INT 22
40357: PUSH
40358: LD_VAR 0 1
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 21
40369: PUSH
40370: LD_INT 3
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PPUSH
40381: CALL_OW 69
40385: ST_TO_ADDR
// if not tmp then
40386: LD_VAR 0 4
40390: NOT
40391: IFFALSE 40395
// exit ;
40393: GO 40537
// enable_addtolog := true ;
40395: LD_ADDR_OWVAR 81
40399: PUSH
40400: LD_INT 1
40402: ST_TO_ADDR
// AddToLog ( [ ) ;
40403: LD_STRING [
40405: PPUSH
40406: CALL_OW 561
// for i in tmp do
40410: LD_ADDR_VAR 0 3
40414: PUSH
40415: LD_VAR 0 4
40419: PUSH
40420: FOR_IN
40421: IFFALSE 40528
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40423: LD_STRING [
40425: PUSH
40426: LD_VAR 0 3
40430: PPUSH
40431: CALL_OW 266
40435: STR
40436: PUSH
40437: LD_STRING , 
40439: STR
40440: PUSH
40441: LD_VAR 0 3
40445: PPUSH
40446: CALL_OW 250
40450: STR
40451: PUSH
40452: LD_STRING , 
40454: STR
40455: PUSH
40456: LD_VAR 0 3
40460: PPUSH
40461: CALL_OW 251
40465: STR
40466: PUSH
40467: LD_STRING , 
40469: STR
40470: PUSH
40471: LD_VAR 0 3
40475: PPUSH
40476: CALL_OW 254
40480: STR
40481: PUSH
40482: LD_STRING , 
40484: STR
40485: PUSH
40486: LD_VAR 0 3
40490: PPUSH
40491: LD_INT 1
40493: PPUSH
40494: CALL_OW 268
40498: STR
40499: PUSH
40500: LD_STRING , 
40502: STR
40503: PUSH
40504: LD_VAR 0 3
40508: PPUSH
40509: LD_INT 2
40511: PPUSH
40512: CALL_OW 268
40516: STR
40517: PUSH
40518: LD_STRING ],
40520: STR
40521: PPUSH
40522: CALL_OW 561
// end ;
40526: GO 40420
40528: POP
40529: POP
// AddToLog ( ]; ) ;
40530: LD_STRING ];
40532: PPUSH
40533: CALL_OW 561
// end ;
40537: LD_VAR 0 2
40541: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40542: LD_INT 0
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
// if not area or not rate or not max then
40549: LD_VAR 0 1
40553: NOT
40554: IFTRUE 40563
40556: PUSH
40557: LD_VAR 0 2
40561: NOT
40562: OR
40563: IFTRUE 40572
40565: PUSH
40566: LD_VAR 0 4
40570: NOT
40571: OR
40572: IFFALSE 40576
// exit ;
40574: GO 40765
// while 1 do
40576: LD_INT 1
40578: IFFALSE 40765
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40580: LD_ADDR_VAR 0 9
40584: PUSH
40585: LD_VAR 0 1
40589: PPUSH
40590: LD_INT 1
40592: PPUSH
40593: CALL_OW 287
40597: PUSH
40598: LD_INT 10
40600: MUL
40601: ST_TO_ADDR
// r := rate / 10 ;
40602: LD_ADDR_VAR 0 7
40606: PUSH
40607: LD_VAR 0 2
40611: PUSH
40612: LD_INT 10
40614: DIVREAL
40615: ST_TO_ADDR
// time := 1 1$00 ;
40616: LD_ADDR_VAR 0 8
40620: PUSH
40621: LD_INT 2100
40623: ST_TO_ADDR
// if amount < min then
40624: LD_VAR 0 9
40628: PUSH
40629: LD_VAR 0 3
40633: LESS
40634: IFFALSE 40652
// r := r * 2 else
40636: LD_ADDR_VAR 0 7
40640: PUSH
40641: LD_VAR 0 7
40645: PUSH
40646: LD_INT 2
40648: MUL
40649: ST_TO_ADDR
40650: GO 40678
// if amount > max then
40652: LD_VAR 0 9
40656: PUSH
40657: LD_VAR 0 4
40661: GREATER
40662: IFFALSE 40678
// r := r / 2 ;
40664: LD_ADDR_VAR 0 7
40668: PUSH
40669: LD_VAR 0 7
40673: PUSH
40674: LD_INT 2
40676: DIVREAL
40677: ST_TO_ADDR
// time := time / r ;
40678: LD_ADDR_VAR 0 8
40682: PUSH
40683: LD_VAR 0 8
40687: PUSH
40688: LD_VAR 0 7
40692: DIVREAL
40693: ST_TO_ADDR
// if time < 0 then
40694: LD_VAR 0 8
40698: PUSH
40699: LD_INT 0
40701: LESS
40702: IFFALSE 40719
// time := time * - 1 ;
40704: LD_ADDR_VAR 0 8
40708: PUSH
40709: LD_VAR 0 8
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: MUL
40718: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40719: LD_VAR 0 8
40723: PUSH
40724: LD_INT 35
40726: PPUSH
40727: LD_INT 875
40729: PPUSH
40730: CALL_OW 12
40734: PLUS
40735: PPUSH
40736: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40740: LD_INT 1
40742: PPUSH
40743: LD_INT 5
40745: PPUSH
40746: CALL_OW 12
40750: PPUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: LD_INT 1
40758: PPUSH
40759: CALL_OW 55
// end ;
40763: GO 40576
// end ;
40765: LD_VAR 0 5
40769: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40770: LD_INT 0
40772: PPUSH
40773: PPUSH
40774: PPUSH
40775: PPUSH
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
// if not turrets or not factories then
40780: LD_VAR 0 1
40784: NOT
40785: IFTRUE 40794
40787: PUSH
40788: LD_VAR 0 2
40792: NOT
40793: OR
40794: IFFALSE 40798
// exit ;
40796: GO 41105
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40798: LD_ADDR_VAR 0 10
40802: PUSH
40803: LD_INT 5
40805: PUSH
40806: LD_INT 6
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: LD_INT 4
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 3
40825: PUSH
40826: LD_INT 5
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 24
40840: PUSH
40841: LD_INT 25
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 23
40850: PUSH
40851: LD_INT 27
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 42
40864: PUSH
40865: LD_INT 43
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 44
40874: PUSH
40875: LD_INT 46
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 45
40884: PUSH
40885: LD_INT 47
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: LIST
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// result := [ ] ;
40902: LD_ADDR_VAR 0 3
40906: PUSH
40907: EMPTY
40908: ST_TO_ADDR
// for i in turrets do
40909: LD_ADDR_VAR 0 4
40913: PUSH
40914: LD_VAR 0 1
40918: PUSH
40919: FOR_IN
40920: IFFALSE 41103
// begin nat := GetNation ( i ) ;
40922: LD_ADDR_VAR 0 7
40926: PUSH
40927: LD_VAR 0 4
40931: PPUSH
40932: CALL_OW 248
40936: ST_TO_ADDR
// weapon := 0 ;
40937: LD_ADDR_VAR 0 8
40941: PUSH
40942: LD_INT 0
40944: ST_TO_ADDR
// if not nat then
40945: LD_VAR 0 7
40949: NOT
40950: IFFALSE 40954
// continue ;
40952: GO 40919
// for j in list [ nat ] do
40954: LD_ADDR_VAR 0 5
40958: PUSH
40959: LD_VAR 0 10
40963: PUSH
40964: LD_VAR 0 7
40968: ARRAY
40969: PUSH
40970: FOR_IN
40971: IFFALSE 41012
// if GetBWeapon ( i ) = j [ 1 ] then
40973: LD_VAR 0 4
40977: PPUSH
40978: CALL_OW 269
40982: PUSH
40983: LD_VAR 0 5
40987: PUSH
40988: LD_INT 1
40990: ARRAY
40991: EQUAL
40992: IFFALSE 41010
// begin weapon := j [ 2 ] ;
40994: LD_ADDR_VAR 0 8
40998: PUSH
40999: LD_VAR 0 5
41003: PUSH
41004: LD_INT 2
41006: ARRAY
41007: ST_TO_ADDR
// break ;
41008: GO 41012
// end ;
41010: GO 40970
41012: POP
41013: POP
// if not weapon then
41014: LD_VAR 0 8
41018: NOT
41019: IFFALSE 41023
// continue ;
41021: GO 40919
// for k in factories do
41023: LD_ADDR_VAR 0 6
41027: PUSH
41028: LD_VAR 0 2
41032: PUSH
41033: FOR_IN
41034: IFFALSE 41099
// begin weapons := AvailableWeaponList ( k ) ;
41036: LD_ADDR_VAR 0 9
41040: PUSH
41041: LD_VAR 0 6
41045: PPUSH
41046: CALL_OW 478
41050: ST_TO_ADDR
// if not weapons then
41051: LD_VAR 0 9
41055: NOT
41056: IFFALSE 41060
// continue ;
41058: GO 41033
// if weapon in weapons then
41060: LD_VAR 0 8
41064: PUSH
41065: LD_VAR 0 9
41069: IN
41070: IFFALSE 41097
// begin result := [ i , weapon ] ;
41072: LD_ADDR_VAR 0 3
41076: PUSH
41077: LD_VAR 0 4
41081: PUSH
41082: LD_VAR 0 8
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: ST_TO_ADDR
// exit ;
41091: POP
41092: POP
41093: POP
41094: POP
41095: GO 41105
// end ; end ;
41097: GO 41033
41099: POP
41100: POP
// end ;
41101: GO 40919
41103: POP
41104: POP
// end ;
41105: LD_VAR 0 3
41109: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41110: LD_INT 0
41112: PPUSH
// if not side or side > 8 then
41113: LD_VAR 0 3
41117: NOT
41118: IFTRUE 41130
41120: PUSH
41121: LD_VAR 0 3
41125: PUSH
41126: LD_INT 8
41128: GREATER
41129: OR
41130: IFFALSE 41134
// exit ;
41132: GO 41193
// if not range then
41134: LD_VAR 0 4
41138: NOT
41139: IFFALSE 41150
// range := - 12 ;
41141: LD_ADDR_VAR 0 4
41145: PUSH
41146: LD_INT 12
41148: NEG
41149: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41150: LD_VAR 0 1
41154: PPUSH
41155: LD_VAR 0 2
41159: PPUSH
41160: LD_VAR 0 3
41164: PPUSH
41165: LD_VAR 0 4
41169: PPUSH
41170: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41174: LD_VAR 0 1
41178: PPUSH
41179: LD_VAR 0 2
41183: PPUSH
41184: LD_VAR 0 3
41188: PPUSH
41189: CALL_OW 331
// end ;
41193: LD_VAR 0 5
41197: RET
// export function Video ( mode ) ; begin
41198: LD_INT 0
41200: PPUSH
// ingame_video = mode ;
41201: LD_ADDR_OWVAR 52
41205: PUSH
41206: LD_VAR 0 1
41210: ST_TO_ADDR
// interface_hidden = mode ;
41211: LD_ADDR_OWVAR 54
41215: PUSH
41216: LD_VAR 0 1
41220: ST_TO_ADDR
// end ;
41221: LD_VAR 0 2
41225: RET
// export function Join ( array , element ) ; begin
41226: LD_INT 0
41228: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41229: LD_ADDR_VAR 0 3
41233: PUSH
41234: LD_VAR 0 1
41238: PPUSH
41239: LD_VAR 0 1
41243: PUSH
41244: LD_INT 1
41246: PLUS
41247: PPUSH
41248: LD_VAR 0 2
41252: PPUSH
41253: CALL_OW 1
41257: ST_TO_ADDR
// end ;
41258: LD_VAR 0 3
41262: RET
// export function JoinUnion ( array , element ) ; begin
41263: LD_INT 0
41265: PPUSH
// result := array union element ;
41266: LD_ADDR_VAR 0 3
41270: PUSH
41271: LD_VAR 0 1
41275: PUSH
41276: LD_VAR 0 2
41280: UNION
41281: ST_TO_ADDR
// end ;
41282: LD_VAR 0 3
41286: RET
// export function GetBehemoths ( side ) ; begin
41287: LD_INT 0
41289: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41290: LD_ADDR_VAR 0 2
41294: PUSH
41295: LD_INT 22
41297: PUSH
41298: LD_VAR 0 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 31
41309: PUSH
41310: LD_INT 25
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PPUSH
41321: CALL_OW 69
41325: ST_TO_ADDR
// end ;
41326: LD_VAR 0 2
41330: RET
// export function Shuffle ( array ) ; var i , index ; begin
41331: LD_INT 0
41333: PPUSH
41334: PPUSH
41335: PPUSH
// result := [ ] ;
41336: LD_ADDR_VAR 0 2
41340: PUSH
41341: EMPTY
41342: ST_TO_ADDR
// if not array then
41343: LD_VAR 0 1
41347: NOT
41348: IFFALSE 41352
// exit ;
41350: GO 41451
// Randomize ;
41352: CALL_OW 10
// for i = array downto 1 do
41356: LD_ADDR_VAR 0 3
41360: PUSH
41361: DOUBLE
41362: LD_VAR 0 1
41366: INC
41367: ST_TO_ADDR
41368: LD_INT 1
41370: PUSH
41371: FOR_DOWNTO
41372: IFFALSE 41449
// begin index := rand ( 1 , array ) ;
41374: LD_ADDR_VAR 0 4
41378: PUSH
41379: LD_INT 1
41381: PPUSH
41382: LD_VAR 0 1
41386: PPUSH
41387: CALL_OW 12
41391: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41392: LD_ADDR_VAR 0 2
41396: PUSH
41397: LD_VAR 0 2
41401: PPUSH
41402: LD_VAR 0 2
41406: PUSH
41407: LD_INT 1
41409: PLUS
41410: PPUSH
41411: LD_VAR 0 1
41415: PUSH
41416: LD_VAR 0 4
41420: ARRAY
41421: PPUSH
41422: CALL_OW 2
41426: ST_TO_ADDR
// array := Delete ( array , index ) ;
41427: LD_ADDR_VAR 0 1
41431: PUSH
41432: LD_VAR 0 1
41436: PPUSH
41437: LD_VAR 0 4
41441: PPUSH
41442: CALL_OW 3
41446: ST_TO_ADDR
// end ;
41447: GO 41371
41449: POP
41450: POP
// end ;
41451: LD_VAR 0 2
41455: RET
// export function GetBaseMaterials ( base ) ; begin
41456: LD_INT 0
41458: PPUSH
// result := [ 0 , 0 , 0 ] ;
41459: LD_ADDR_VAR 0 2
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: LIST
41477: ST_TO_ADDR
// if not base then
41478: LD_VAR 0 1
41482: NOT
41483: IFFALSE 41487
// exit ;
41485: GO 41536
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41487: LD_ADDR_VAR 0 2
41491: PUSH
41492: LD_VAR 0 1
41496: PPUSH
41497: LD_INT 1
41499: PPUSH
41500: CALL_OW 275
41504: PUSH
41505: LD_VAR 0 1
41509: PPUSH
41510: LD_INT 2
41512: PPUSH
41513: CALL_OW 275
41517: PUSH
41518: LD_VAR 0 1
41522: PPUSH
41523: LD_INT 3
41525: PPUSH
41526: CALL_OW 275
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: ST_TO_ADDR
// end ;
41536: LD_VAR 0 2
41540: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41541: LD_INT 0
41543: PPUSH
41544: PPUSH
// result := array ;
41545: LD_ADDR_VAR 0 3
41549: PUSH
41550: LD_VAR 0 1
41554: ST_TO_ADDR
// if size >= result then
41555: LD_VAR 0 2
41559: PUSH
41560: LD_VAR 0 3
41564: GREATEREQUAL
41565: IFFALSE 41569
// exit ;
41567: GO 41619
// if size then
41569: LD_VAR 0 2
41573: IFFALSE 41619
// for i := array downto size do
41575: LD_ADDR_VAR 0 4
41579: PUSH
41580: DOUBLE
41581: LD_VAR 0 1
41585: INC
41586: ST_TO_ADDR
41587: LD_VAR 0 2
41591: PUSH
41592: FOR_DOWNTO
41593: IFFALSE 41617
// result := Delete ( result , result ) ;
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_VAR 0 3
41604: PPUSH
41605: LD_VAR 0 3
41609: PPUSH
41610: CALL_OW 3
41614: ST_TO_ADDR
41615: GO 41592
41617: POP
41618: POP
// end ;
41619: LD_VAR 0 3
41623: RET
// export function ComExit ( unit ) ; var tmp ; begin
41624: LD_INT 0
41626: PPUSH
41627: PPUSH
// if not IsInUnit ( unit ) then
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL_OW 310
41637: NOT
41638: IFFALSE 41642
// exit ;
41640: GO 41702
// tmp := IsInUnit ( unit ) ;
41642: LD_ADDR_VAR 0 3
41646: PUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: CALL_OW 310
41656: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41657: LD_VAR 0 3
41661: PPUSH
41662: CALL_OW 247
41666: PUSH
41667: LD_INT 2
41669: EQUAL
41670: IFFALSE 41683
// ComExitVehicle ( unit ) else
41672: LD_VAR 0 1
41676: PPUSH
41677: CALL_OW 121
41681: GO 41692
// ComExitBuilding ( unit ) ;
41683: LD_VAR 0 1
41687: PPUSH
41688: CALL_OW 122
// result := tmp ;
41692: LD_ADDR_VAR 0 2
41696: PUSH
41697: LD_VAR 0 3
41701: ST_TO_ADDR
// end ;
41702: LD_VAR 0 2
41706: RET
// export function ComExitAll ( units ) ; var i ; begin
41707: LD_INT 0
41709: PPUSH
41710: PPUSH
// if not units then
41711: LD_VAR 0 1
41715: NOT
41716: IFFALSE 41720
// exit ;
41718: GO 41746
// for i in units do
41720: LD_ADDR_VAR 0 3
41724: PUSH
41725: LD_VAR 0 1
41729: PUSH
41730: FOR_IN
41731: IFFALSE 41744
// ComExit ( i ) ;
41733: LD_VAR 0 3
41737: PPUSH
41738: CALL 41624 0 1
41742: GO 41730
41744: POP
41745: POP
// end ;
41746: LD_VAR 0 2
41750: RET
// export function ResetHc ; begin
41751: LD_INT 0
41753: PPUSH
// InitHc ;
41754: CALL_OW 19
// hc_importance := 0 ;
41758: LD_ADDR_OWVAR 32
41762: PUSH
41763: LD_INT 0
41765: ST_TO_ADDR
// end ;
41766: LD_VAR 0 1
41770: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
41775: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41776: LD_ADDR_VAR 0 6
41780: PUSH
41781: LD_VAR 0 1
41785: PUSH
41786: LD_VAR 0 3
41790: PLUS
41791: PUSH
41792: LD_INT 2
41794: DIV
41795: ST_TO_ADDR
// if _x < 0 then
41796: LD_VAR 0 6
41800: PUSH
41801: LD_INT 0
41803: LESS
41804: IFFALSE 41821
// _x := _x * - 1 ;
41806: LD_ADDR_VAR 0 6
41810: PUSH
41811: LD_VAR 0 6
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: MUL
41820: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41821: LD_ADDR_VAR 0 7
41825: PUSH
41826: LD_VAR 0 2
41830: PUSH
41831: LD_VAR 0 4
41835: PLUS
41836: PUSH
41837: LD_INT 2
41839: DIV
41840: ST_TO_ADDR
// if _y < 0 then
41841: LD_VAR 0 7
41845: PUSH
41846: LD_INT 0
41848: LESS
41849: IFFALSE 41866
// _y := _y * - 1 ;
41851: LD_ADDR_VAR 0 7
41855: PUSH
41856: LD_VAR 0 7
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: MUL
41865: ST_TO_ADDR
// result := [ _x , _y ] ;
41866: LD_ADDR_VAR 0 5
41870: PUSH
41871: LD_VAR 0 6
41875: PUSH
41876: LD_VAR 0 7
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// end ;
41885: LD_VAR 0 5
41889: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41890: LD_INT 0
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
// task := GetTaskList ( unit ) ;
41896: LD_ADDR_VAR 0 7
41900: PUSH
41901: LD_VAR 0 1
41905: PPUSH
41906: CALL_OW 437
41910: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41911: LD_VAR 0 7
41915: NOT
41916: IFFALSE 41935
41918: PUSH
41919: LD_VAR 0 1
41923: PPUSH
41924: LD_VAR 0 2
41928: PPUSH
41929: CALL_OW 308
41933: NOT
41934: AND
41935: IFFALSE 41939
// exit ;
41937: GO 42057
// if IsInArea ( unit , area ) then
41939: LD_VAR 0 1
41943: PPUSH
41944: LD_VAR 0 2
41948: PPUSH
41949: CALL_OW 308
41953: IFFALSE 41971
// begin ComMoveToArea ( unit , goAway ) ;
41955: LD_VAR 0 1
41959: PPUSH
41960: LD_VAR 0 3
41964: PPUSH
41965: CALL_OW 113
// exit ;
41969: GO 42057
// end ; if task [ 1 ] [ 1 ] <> M then
41971: LD_VAR 0 7
41975: PUSH
41976: LD_INT 1
41978: ARRAY
41979: PUSH
41980: LD_INT 1
41982: ARRAY
41983: PUSH
41984: LD_STRING M
41986: NONEQUAL
41987: IFFALSE 41991
// exit ;
41989: GO 42057
// x := task [ 1 ] [ 2 ] ;
41991: LD_ADDR_VAR 0 5
41995: PUSH
41996: LD_VAR 0 7
42000: PUSH
42001: LD_INT 1
42003: ARRAY
42004: PUSH
42005: LD_INT 2
42007: ARRAY
42008: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42009: LD_ADDR_VAR 0 6
42013: PUSH
42014: LD_VAR 0 7
42018: PUSH
42019: LD_INT 1
42021: ARRAY
42022: PUSH
42023: LD_INT 3
42025: ARRAY
42026: ST_TO_ADDR
// if InArea ( x , y , area ) then
42027: LD_VAR 0 5
42031: PPUSH
42032: LD_VAR 0 6
42036: PPUSH
42037: LD_VAR 0 2
42041: PPUSH
42042: CALL_OW 309
42046: IFFALSE 42057
// ComStop ( unit ) ;
42048: LD_VAR 0 1
42052: PPUSH
42053: CALL_OW 141
// end ;
42057: LD_VAR 0 4
42061: RET
// export function Abs ( value ) ; begin
42062: LD_INT 0
42064: PPUSH
// result := value ;
42065: LD_ADDR_VAR 0 2
42069: PUSH
42070: LD_VAR 0 1
42074: ST_TO_ADDR
// if value < 0 then
42075: LD_VAR 0 1
42079: PUSH
42080: LD_INT 0
42082: LESS
42083: IFFALSE 42100
// result := value * - 1 ;
42085: LD_ADDR_VAR 0 2
42089: PUSH
42090: LD_VAR 0 1
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: MUL
42099: ST_TO_ADDR
// end ;
42100: LD_VAR 0 2
42104: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42105: LD_INT 0
42107: PPUSH
42108: PPUSH
42109: PPUSH
42110: PPUSH
42111: PPUSH
42112: PPUSH
42113: PPUSH
42114: PPUSH
// if not unit or not building then
42115: LD_VAR 0 1
42119: NOT
42120: IFTRUE 42129
42122: PUSH
42123: LD_VAR 0 2
42127: NOT
42128: OR
42129: IFFALSE 42133
// exit ;
42131: GO 42361
// x := GetX ( building ) ;
42133: LD_ADDR_VAR 0 4
42137: PUSH
42138: LD_VAR 0 2
42142: PPUSH
42143: CALL_OW 250
42147: ST_TO_ADDR
// y := GetY ( building ) ;
42148: LD_ADDR_VAR 0 6
42152: PUSH
42153: LD_VAR 0 2
42157: PPUSH
42158: CALL_OW 251
42162: ST_TO_ADDR
// d := GetDir ( building ) ;
42163: LD_ADDR_VAR 0 8
42167: PUSH
42168: LD_VAR 0 2
42172: PPUSH
42173: CALL_OW 254
42177: ST_TO_ADDR
// r := 4 ;
42178: LD_ADDR_VAR 0 9
42182: PUSH
42183: LD_INT 4
42185: ST_TO_ADDR
// for i := 1 to 5 do
42186: LD_ADDR_VAR 0 10
42190: PUSH
42191: DOUBLE
42192: LD_INT 1
42194: DEC
42195: ST_TO_ADDR
42196: LD_INT 5
42198: PUSH
42199: FOR_TO
42200: IFFALSE 42359
// begin _x := ShiftX ( x , d , r + i ) ;
42202: LD_ADDR_VAR 0 5
42206: PUSH
42207: LD_VAR 0 4
42211: PPUSH
42212: LD_VAR 0 8
42216: PPUSH
42217: LD_VAR 0 9
42221: PUSH
42222: LD_VAR 0 10
42226: PLUS
42227: PPUSH
42228: CALL_OW 272
42232: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42233: LD_ADDR_VAR 0 7
42237: PUSH
42238: LD_VAR 0 6
42242: PPUSH
42243: LD_VAR 0 8
42247: PPUSH
42248: LD_VAR 0 9
42252: PUSH
42253: LD_VAR 0 10
42257: PLUS
42258: PPUSH
42259: CALL_OW 273
42263: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42264: LD_VAR 0 5
42268: PPUSH
42269: LD_VAR 0 7
42273: PPUSH
42274: CALL_OW 488
42278: IFFALSE 42313
42280: PUSH
42281: LD_VAR 0 5
42285: PPUSH
42286: LD_VAR 0 7
42290: PPUSH
42291: CALL_OW 428
42295: PPUSH
42296: CALL_OW 247
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: IN
42311: NOT
42312: AND
42313: IFFALSE 42357
// begin ComMoveXY ( unit , _x , _y ) ;
42315: LD_VAR 0 1
42319: PPUSH
42320: LD_VAR 0 5
42324: PPUSH
42325: LD_VAR 0 7
42329: PPUSH
42330: CALL_OW 111
// result := [ _x , _y ] ;
42334: LD_ADDR_VAR 0 3
42338: PUSH
42339: LD_VAR 0 5
42343: PUSH
42344: LD_VAR 0 7
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: ST_TO_ADDR
// exit ;
42353: POP
42354: POP
42355: GO 42361
// end ; end ;
42357: GO 42199
42359: POP
42360: POP
// end ;
42361: LD_VAR 0 3
42365: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42366: LD_INT 0
42368: PPUSH
42369: PPUSH
42370: PPUSH
// result := 0 ;
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_INT 0
42378: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42379: LD_VAR 0 1
42383: PUSH
42384: LD_INT 0
42386: LESS
42387: IFTRUE 42399
42389: PUSH
42390: LD_VAR 0 1
42394: PUSH
42395: LD_INT 8
42397: GREATER
42398: OR
42399: IFTRUE 42411
42401: PUSH
42402: LD_VAR 0 2
42406: PUSH
42407: LD_INT 0
42409: LESS
42410: OR
42411: IFTRUE 42423
42413: PUSH
42414: LD_VAR 0 2
42418: PUSH
42419: LD_INT 8
42421: GREATER
42422: OR
42423: IFFALSE 42427
// exit ;
42425: GO 42502
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42427: LD_ADDR_VAR 0 4
42431: PUSH
42432: LD_INT 22
42434: PUSH
42435: LD_VAR 0 2
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PPUSH
42444: CALL_OW 69
42448: PUSH
42449: FOR_IN
42450: IFFALSE 42500
// begin un := UnitShoot ( i ) ;
42452: LD_ADDR_VAR 0 5
42456: PUSH
42457: LD_VAR 0 4
42461: PPUSH
42462: CALL_OW 504
42466: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42467: LD_VAR 0 5
42471: PPUSH
42472: CALL_OW 255
42476: PUSH
42477: LD_VAR 0 1
42481: EQUAL
42482: IFFALSE 42498
// begin result := un ;
42484: LD_ADDR_VAR 0 3
42488: PUSH
42489: LD_VAR 0 5
42493: ST_TO_ADDR
// exit ;
42494: POP
42495: POP
42496: GO 42502
// end ; end ;
42498: GO 42449
42500: POP
42501: POP
// end ;
42502: LD_VAR 0 3
42506: RET
// export function GetCargoBay ( units ) ; begin
42507: LD_INT 0
42509: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42510: LD_ADDR_VAR 0 2
42514: PUSH
42515: LD_VAR 0 1
42519: PPUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 34
42525: PUSH
42526: LD_INT 12
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 34
42535: PUSH
42536: LD_INT 51
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 34
42545: PUSH
42546: LD_INT 32
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 34
42555: PUSH
42556: LD_INT 89
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: PPUSH
42570: CALL_OW 72
42574: ST_TO_ADDR
// end ;
42575: LD_VAR 0 2
42579: RET
// export function Negate ( value ) ; begin
42580: LD_INT 0
42582: PPUSH
// result := not value ;
42583: LD_ADDR_VAR 0 2
42587: PUSH
42588: LD_VAR 0 1
42592: NOT
42593: ST_TO_ADDR
// end ;
42594: LD_VAR 0 2
42598: RET
// export function Inc ( value ) ; begin
42599: LD_INT 0
42601: PPUSH
// result := value + 1 ;
42602: LD_ADDR_VAR 0 2
42606: PUSH
42607: LD_VAR 0 1
42611: PUSH
42612: LD_INT 1
42614: PLUS
42615: ST_TO_ADDR
// end ;
42616: LD_VAR 0 2
42620: RET
// export function Dec ( value ) ; begin
42621: LD_INT 0
42623: PPUSH
// result := value - 1 ;
42624: LD_ADDR_VAR 0 2
42628: PUSH
42629: LD_VAR 0 1
42633: PUSH
42634: LD_INT 1
42636: MINUS
42637: ST_TO_ADDR
// end ;
42638: LD_VAR 0 2
42642: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42643: LD_INT 0
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
42650: PPUSH
42651: PPUSH
42652: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42653: LD_VAR 0 1
42657: PPUSH
42658: LD_VAR 0 2
42662: PPUSH
42663: CALL_OW 488
42667: NOT
42668: IFTRUE 42687
42670: PUSH
42671: LD_VAR 0 3
42675: PPUSH
42676: LD_VAR 0 4
42680: PPUSH
42681: CALL_OW 488
42685: NOT
42686: OR
42687: IFFALSE 42700
// begin result := - 1 ;
42689: LD_ADDR_VAR 0 5
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: ST_TO_ADDR
// exit ;
42698: GO 42935
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42700: LD_ADDR_VAR 0 12
42704: PUSH
42705: LD_VAR 0 1
42709: PPUSH
42710: LD_VAR 0 2
42714: PPUSH
42715: LD_VAR 0 3
42719: PPUSH
42720: LD_VAR 0 4
42724: PPUSH
42725: CALL 41771 0 4
42729: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42730: LD_ADDR_VAR 0 11
42734: PUSH
42735: LD_VAR 0 1
42739: PPUSH
42740: LD_VAR 0 2
42744: PPUSH
42745: LD_VAR 0 12
42749: PUSH
42750: LD_INT 1
42752: ARRAY
42753: PPUSH
42754: LD_VAR 0 12
42758: PUSH
42759: LD_INT 2
42761: ARRAY
42762: PPUSH
42763: CALL_OW 298
42767: ST_TO_ADDR
// distance := 9999 ;
42768: LD_ADDR_VAR 0 10
42772: PUSH
42773: LD_INT 9999
42775: ST_TO_ADDR
// for i := 0 to 5 do
42776: LD_ADDR_VAR 0 6
42780: PUSH
42781: DOUBLE
42782: LD_INT 0
42784: DEC
42785: ST_TO_ADDR
42786: LD_INT 5
42788: PUSH
42789: FOR_TO
42790: IFFALSE 42933
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42792: LD_ADDR_VAR 0 7
42796: PUSH
42797: LD_VAR 0 1
42801: PPUSH
42802: LD_VAR 0 6
42806: PPUSH
42807: LD_VAR 0 11
42811: PPUSH
42812: CALL_OW 272
42816: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42817: LD_ADDR_VAR 0 8
42821: PUSH
42822: LD_VAR 0 2
42826: PPUSH
42827: LD_VAR 0 6
42831: PPUSH
42832: LD_VAR 0 11
42836: PPUSH
42837: CALL_OW 273
42841: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42842: LD_VAR 0 7
42846: PPUSH
42847: LD_VAR 0 8
42851: PPUSH
42852: CALL_OW 488
42856: NOT
42857: IFFALSE 42861
// continue ;
42859: GO 42789
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42861: LD_ADDR_VAR 0 9
42865: PUSH
42866: LD_VAR 0 12
42870: PUSH
42871: LD_INT 1
42873: ARRAY
42874: PPUSH
42875: LD_VAR 0 12
42879: PUSH
42880: LD_INT 2
42882: ARRAY
42883: PPUSH
42884: LD_VAR 0 7
42888: PPUSH
42889: LD_VAR 0 8
42893: PPUSH
42894: CALL_OW 298
42898: ST_TO_ADDR
// if tmp < distance then
42899: LD_VAR 0 9
42903: PUSH
42904: LD_VAR 0 10
42908: LESS
42909: IFFALSE 42931
// begin result := i ;
42911: LD_ADDR_VAR 0 5
42915: PUSH
42916: LD_VAR 0 6
42920: ST_TO_ADDR
// distance := tmp ;
42921: LD_ADDR_VAR 0 10
42925: PUSH
42926: LD_VAR 0 9
42930: ST_TO_ADDR
// end ; end ;
42931: GO 42789
42933: POP
42934: POP
// end ;
42935: LD_VAR 0 5
42939: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42940: LD_INT 0
42942: PPUSH
42943: PPUSH
// if not driver or not IsInUnit ( driver ) then
42944: LD_VAR 0 1
42948: NOT
42949: IFTRUE 42963
42951: PUSH
42952: LD_VAR 0 1
42956: PPUSH
42957: CALL_OW 310
42961: NOT
42962: OR
42963: IFFALSE 42967
// exit ;
42965: GO 43057
// vehicle := IsInUnit ( driver ) ;
42967: LD_ADDR_VAR 0 3
42971: PUSH
42972: LD_VAR 0 1
42976: PPUSH
42977: CALL_OW 310
42981: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42982: LD_VAR 0 1
42986: PPUSH
42987: LD_STRING \
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: PUSH
43017: LD_STRING E
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_VAR 0 3
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PPUSH
43053: CALL_OW 446
// end ;
43057: LD_VAR 0 2
43061: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43062: LD_INT 0
43064: PPUSH
43065: PPUSH
// if not driver or not IsInUnit ( driver ) then
43066: LD_VAR 0 1
43070: NOT
43071: IFTRUE 43085
43073: PUSH
43074: LD_VAR 0 1
43078: PPUSH
43079: CALL_OW 310
43083: NOT
43084: OR
43085: IFFALSE 43089
// exit ;
43087: GO 43179
// vehicle := IsInUnit ( driver ) ;
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_VAR 0 1
43098: PPUSH
43099: CALL_OW 310
43103: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43104: LD_VAR 0 1
43108: PPUSH
43109: LD_STRING \
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: PUSH
43139: LD_STRING E
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_VAR 0 3
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PPUSH
43175: CALL_OW 447
// end ;
43179: LD_VAR 0 2
43183: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43184: LD_INT 0
43186: PPUSH
43187: PPUSH
43188: PPUSH
// tmp := [ ] ;
43189: LD_ADDR_VAR 0 5
43193: PUSH
43194: EMPTY
43195: ST_TO_ADDR
// for i in units do
43196: LD_ADDR_VAR 0 4
43200: PUSH
43201: LD_VAR 0 1
43205: PUSH
43206: FOR_IN
43207: IFFALSE 43245
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43209: LD_ADDR_VAR 0 5
43213: PUSH
43214: LD_VAR 0 5
43218: PPUSH
43219: LD_VAR 0 5
43223: PUSH
43224: LD_INT 1
43226: PLUS
43227: PPUSH
43228: LD_VAR 0 4
43232: PPUSH
43233: CALL_OW 256
43237: PPUSH
43238: CALL_OW 2
43242: ST_TO_ADDR
43243: GO 43206
43245: POP
43246: POP
// if not tmp then
43247: LD_VAR 0 5
43251: NOT
43252: IFFALSE 43256
// exit ;
43254: GO 43304
// if asc then
43256: LD_VAR 0 2
43260: IFFALSE 43284
// result := SortListByListAsc ( units , tmp ) else
43262: LD_ADDR_VAR 0 3
43266: PUSH
43267: LD_VAR 0 1
43271: PPUSH
43272: LD_VAR 0 5
43276: PPUSH
43277: CALL_OW 76
43281: ST_TO_ADDR
43282: GO 43304
// result := SortListByListDesc ( units , tmp ) ;
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: LD_VAR 0 1
43293: PPUSH
43294: LD_VAR 0 5
43298: PPUSH
43299: CALL_OW 77
43303: ST_TO_ADDR
// end ;
43304: LD_VAR 0 3
43308: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43309: LD_INT 0
43311: PPUSH
43312: PPUSH
// task := GetTaskList ( mech ) ;
43313: LD_ADDR_VAR 0 4
43317: PUSH
43318: LD_VAR 0 1
43322: PPUSH
43323: CALL_OW 437
43327: ST_TO_ADDR
// if not task then
43328: LD_VAR 0 4
43332: NOT
43333: IFFALSE 43337
// exit ;
43335: GO 43381
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43337: LD_ADDR_VAR 0 3
43341: PUSH
43342: LD_VAR 0 4
43346: PUSH
43347: LD_INT 1
43349: ARRAY
43350: PUSH
43351: LD_INT 1
43353: ARRAY
43354: PUSH
43355: LD_STRING r
43357: EQUAL
43358: IFFALSE 43380
43360: PUSH
43361: LD_VAR 0 4
43365: PUSH
43366: LD_INT 1
43368: ARRAY
43369: PUSH
43370: LD_INT 4
43372: ARRAY
43373: PUSH
43374: LD_VAR 0 2
43378: EQUAL
43379: AND
43380: ST_TO_ADDR
// end ;
43381: LD_VAR 0 3
43385: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43386: LD_INT 0
43388: PPUSH
// SetDir ( unit , d ) ;
43389: LD_VAR 0 1
43393: PPUSH
43394: LD_VAR 0 4
43398: PPUSH
43399: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43403: LD_ADDR_VAR 0 6
43407: PUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: LD_VAR 0 2
43417: PPUSH
43418: LD_VAR 0 3
43422: PPUSH
43423: LD_VAR 0 5
43427: PPUSH
43428: CALL_OW 48
43432: ST_TO_ADDR
// end ;
43433: LD_VAR 0 6
43437: RET
// export function ToNaturalNumber ( number ) ; begin
43438: LD_INT 0
43440: PPUSH
// result := number div 1 ;
43441: LD_ADDR_VAR 0 2
43445: PUSH
43446: LD_VAR 0 1
43450: PUSH
43451: LD_INT 1
43453: DIV
43454: ST_TO_ADDR
// if number < 0 then
43455: LD_VAR 0 1
43459: PUSH
43460: LD_INT 0
43462: LESS
43463: IFFALSE 43473
// result := 0 ;
43465: LD_ADDR_VAR 0 2
43469: PUSH
43470: LD_INT 0
43472: ST_TO_ADDR
// end ;
43473: LD_VAR 0 2
43477: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43478: LD_INT 0
43480: PPUSH
43481: PPUSH
43482: PPUSH
// if not buildings then
43483: LD_VAR 0 1
43487: NOT
43488: IFFALSE 43492
// exit ;
43490: GO 43607
// tmp := [ ] ;
43492: LD_ADDR_VAR 0 5
43496: PUSH
43497: EMPTY
43498: ST_TO_ADDR
// for b in buildings do
43499: LD_ADDR_VAR 0 4
43503: PUSH
43504: LD_VAR 0 1
43508: PUSH
43509: FOR_IN
43510: IFFALSE 43548
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43512: LD_ADDR_VAR 0 5
43516: PUSH
43517: LD_VAR 0 5
43521: PPUSH
43522: LD_VAR 0 5
43526: PUSH
43527: LD_INT 1
43529: PLUS
43530: PPUSH
43531: LD_VAR 0 4
43535: PPUSH
43536: CALL_OW 266
43540: PPUSH
43541: CALL_OW 1
43545: ST_TO_ADDR
43546: GO 43509
43548: POP
43549: POP
// if not tmp then
43550: LD_VAR 0 5
43554: NOT
43555: IFFALSE 43559
// exit ;
43557: GO 43607
// if asc then
43559: LD_VAR 0 2
43563: IFFALSE 43587
// result := SortListByListAsc ( buildings , tmp ) else
43565: LD_ADDR_VAR 0 3
43569: PUSH
43570: LD_VAR 0 1
43574: PPUSH
43575: LD_VAR 0 5
43579: PPUSH
43580: CALL_OW 76
43584: ST_TO_ADDR
43585: GO 43607
// result := SortListByListDesc ( buildings , tmp ) ;
43587: LD_ADDR_VAR 0 3
43591: PUSH
43592: LD_VAR 0 1
43596: PPUSH
43597: LD_VAR 0 5
43601: PPUSH
43602: CALL_OW 77
43606: ST_TO_ADDR
// end ;
43607: LD_VAR 0 3
43611: RET
// export function SortByClass ( units , class ) ; var un ; begin
43612: LD_INT 0
43614: PPUSH
43615: PPUSH
// if not units or not class then
43616: LD_VAR 0 1
43620: NOT
43621: IFTRUE 43630
43623: PUSH
43624: LD_VAR 0 2
43628: NOT
43629: OR
43630: IFFALSE 43634
// exit ;
43632: GO 43729
// result := [ ] ;
43634: LD_ADDR_VAR 0 3
43638: PUSH
43639: EMPTY
43640: ST_TO_ADDR
// for un in units do
43641: LD_ADDR_VAR 0 4
43645: PUSH
43646: LD_VAR 0 1
43650: PUSH
43651: FOR_IN
43652: IFFALSE 43727
// if GetClass ( un ) = class then
43654: LD_VAR 0 4
43658: PPUSH
43659: CALL_OW 257
43663: PUSH
43664: LD_VAR 0 2
43668: EQUAL
43669: IFFALSE 43696
// result := Insert ( result , 1 , un ) else
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_VAR 0 3
43680: PPUSH
43681: LD_INT 1
43683: PPUSH
43684: LD_VAR 0 4
43688: PPUSH
43689: CALL_OW 2
43693: ST_TO_ADDR
43694: GO 43725
// result := Replace ( result , result + 1 , un ) ;
43696: LD_ADDR_VAR 0 3
43700: PUSH
43701: LD_VAR 0 3
43705: PPUSH
43706: LD_VAR 0 3
43710: PUSH
43711: LD_INT 1
43713: PLUS
43714: PPUSH
43715: LD_VAR 0 4
43719: PPUSH
43720: CALL_OW 1
43724: ST_TO_ADDR
43725: GO 43651
43727: POP
43728: POP
// end ;
43729: LD_VAR 0 3
43733: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43734: LD_INT 0
43736: PPUSH
43737: PPUSH
43738: PPUSH
43739: PPUSH
43740: PPUSH
43741: PPUSH
43742: PPUSH
// result := [ ] ;
43743: LD_ADDR_VAR 0 4
43747: PUSH
43748: EMPTY
43749: ST_TO_ADDR
// if x - r < 0 then
43750: LD_VAR 0 1
43754: PUSH
43755: LD_VAR 0 3
43759: MINUS
43760: PUSH
43761: LD_INT 0
43763: LESS
43764: IFFALSE 43776
// min_x := 0 else
43766: LD_ADDR_VAR 0 8
43770: PUSH
43771: LD_INT 0
43773: ST_TO_ADDR
43774: GO 43792
// min_x := x - r ;
43776: LD_ADDR_VAR 0 8
43780: PUSH
43781: LD_VAR 0 1
43785: PUSH
43786: LD_VAR 0 3
43790: MINUS
43791: ST_TO_ADDR
// if y - r < 0 then
43792: LD_VAR 0 2
43796: PUSH
43797: LD_VAR 0 3
43801: MINUS
43802: PUSH
43803: LD_INT 0
43805: LESS
43806: IFFALSE 43818
// min_y := 0 else
43808: LD_ADDR_VAR 0 7
43812: PUSH
43813: LD_INT 0
43815: ST_TO_ADDR
43816: GO 43834
// min_y := y - r ;
43818: LD_ADDR_VAR 0 7
43822: PUSH
43823: LD_VAR 0 2
43827: PUSH
43828: LD_VAR 0 3
43832: MINUS
43833: ST_TO_ADDR
// max_x := x + r ;
43834: LD_ADDR_VAR 0 9
43838: PUSH
43839: LD_VAR 0 1
43843: PUSH
43844: LD_VAR 0 3
43848: PLUS
43849: ST_TO_ADDR
// max_y := y + r ;
43850: LD_ADDR_VAR 0 10
43854: PUSH
43855: LD_VAR 0 2
43859: PUSH
43860: LD_VAR 0 3
43864: PLUS
43865: ST_TO_ADDR
// for _x = min_x to max_x do
43866: LD_ADDR_VAR 0 5
43870: PUSH
43871: DOUBLE
43872: LD_VAR 0 8
43876: DEC
43877: ST_TO_ADDR
43878: LD_VAR 0 9
43882: PUSH
43883: FOR_TO
43884: IFFALSE 43985
// for _y = min_y to max_y do
43886: LD_ADDR_VAR 0 6
43890: PUSH
43891: DOUBLE
43892: LD_VAR 0 7
43896: DEC
43897: ST_TO_ADDR
43898: LD_VAR 0 10
43902: PUSH
43903: FOR_TO
43904: IFFALSE 43981
// begin if not ValidHex ( _x , _y ) then
43906: LD_VAR 0 5
43910: PPUSH
43911: LD_VAR 0 6
43915: PPUSH
43916: CALL_OW 488
43920: NOT
43921: IFFALSE 43925
// continue ;
43923: GO 43903
// if GetResourceTypeXY ( _x , _y ) then
43925: LD_VAR 0 5
43929: PPUSH
43930: LD_VAR 0 6
43934: PPUSH
43935: CALL_OW 283
43939: IFFALSE 43979
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43941: LD_ADDR_VAR 0 4
43945: PUSH
43946: LD_VAR 0 4
43950: PPUSH
43951: LD_VAR 0 4
43955: PUSH
43956: LD_INT 1
43958: PLUS
43959: PPUSH
43960: LD_VAR 0 5
43964: PUSH
43965: LD_VAR 0 6
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PPUSH
43974: CALL_OW 1
43978: ST_TO_ADDR
// end ;
43979: GO 43903
43981: POP
43982: POP
43983: GO 43883
43985: POP
43986: POP
// end ;
43987: LD_VAR 0 4
43991: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43992: LD_INT 0
43994: PPUSH
43995: PPUSH
43996: PPUSH
43997: PPUSH
43998: PPUSH
43999: PPUSH
44000: PPUSH
44001: PPUSH
// if not units then
44002: LD_VAR 0 1
44006: NOT
44007: IFFALSE 44011
// exit ;
44009: GO 44543
// result := UnitFilter ( units , [ f_ok ] ) ;
44011: LD_ADDR_VAR 0 3
44015: PUSH
44016: LD_VAR 0 1
44020: PPUSH
44021: LD_INT 50
44023: PUSH
44024: EMPTY
44025: LIST
44026: PPUSH
44027: CALL_OW 72
44031: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44032: LD_ADDR_VAR 0 8
44036: PUSH
44037: LD_VAR 0 1
44041: PUSH
44042: LD_INT 1
44044: ARRAY
44045: PPUSH
44046: CALL_OW 255
44050: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44051: LD_ADDR_VAR 0 10
44055: PUSH
44056: LD_INT 29
44058: PUSH
44059: LD_INT 91
44061: PUSH
44062: LD_INT 49
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: ST_TO_ADDR
// if not result then
44070: LD_VAR 0 3
44074: NOT
44075: IFFALSE 44079
// exit ;
44077: GO 44543
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44079: LD_ADDR_VAR 0 5
44083: PUSH
44084: LD_INT 81
44086: PUSH
44087: LD_VAR 0 8
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PPUSH
44096: CALL_OW 69
44100: ST_TO_ADDR
// for i in result do
44101: LD_ADDR_VAR 0 4
44105: PUSH
44106: LD_VAR 0 3
44110: PUSH
44111: FOR_IN
44112: IFFALSE 44541
// begin tag := GetTag ( i ) + 1 ;
44114: LD_ADDR_VAR 0 9
44118: PUSH
44119: LD_VAR 0 4
44123: PPUSH
44124: CALL_OW 110
44128: PUSH
44129: LD_INT 1
44131: PLUS
44132: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44133: LD_ADDR_VAR 0 7
44137: PUSH
44138: LD_VAR 0 4
44142: PPUSH
44143: CALL_OW 250
44147: PPUSH
44148: LD_VAR 0 4
44152: PPUSH
44153: CALL_OW 251
44157: PPUSH
44158: LD_INT 4
44160: PPUSH
44161: CALL 43734 0 3
44165: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44166: LD_VAR 0 4
44170: PPUSH
44171: CALL_OW 247
44175: PUSH
44176: LD_INT 2
44178: EQUAL
44179: IFFALSE 44191
44181: PUSH
44182: LD_VAR 0 7
44186: PUSH
44187: LD_INT 2
44189: GREATER
44190: AND
44191: IFFALSE 44211
44193: PUSH
44194: LD_VAR 0 4
44198: PPUSH
44199: CALL_OW 264
44203: PUSH
44204: LD_VAR 0 10
44208: IN
44209: NOT
44210: AND
44211: IFFALSE 44250
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44213: LD_VAR 0 4
44217: PPUSH
44218: LD_VAR 0 7
44222: PUSH
44223: LD_INT 1
44225: ARRAY
44226: PUSH
44227: LD_INT 1
44229: ARRAY
44230: PPUSH
44231: LD_VAR 0 7
44235: PUSH
44236: LD_INT 1
44238: ARRAY
44239: PUSH
44240: LD_INT 2
44242: ARRAY
44243: PPUSH
44244: CALL_OW 116
44248: GO 44539
// if path > tag then
44250: LD_VAR 0 2
44254: PUSH
44255: LD_VAR 0 9
44259: GREATER
44260: IFFALSE 44468
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44262: LD_ADDR_VAR 0 6
44266: PUSH
44267: LD_VAR 0 5
44271: PPUSH
44272: LD_INT 91
44274: PUSH
44275: LD_VAR 0 4
44279: PUSH
44280: LD_INT 8
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: PPUSH
44288: CALL_OW 72
44292: ST_TO_ADDR
// if nearEnemy then
44293: LD_VAR 0 6
44297: IFFALSE 44366
// begin if GetWeapon ( i ) = ru_time_lapser then
44299: LD_VAR 0 4
44303: PPUSH
44304: CALL_OW 264
44308: PUSH
44309: LD_INT 49
44311: EQUAL
44312: IFFALSE 44340
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44314: LD_VAR 0 4
44318: PPUSH
44319: LD_VAR 0 6
44323: PPUSH
44324: LD_VAR 0 4
44328: PPUSH
44329: CALL_OW 74
44333: PPUSH
44334: CALL_OW 112
44338: GO 44364
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44340: LD_VAR 0 4
44344: PPUSH
44345: LD_VAR 0 6
44349: PPUSH
44350: LD_VAR 0 4
44354: PPUSH
44355: CALL_OW 74
44359: PPUSH
44360: CALL 45624 0 2
// end else
44364: GO 44466
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44366: LD_VAR 0 4
44370: PPUSH
44371: LD_VAR 0 2
44375: PUSH
44376: LD_VAR 0 9
44380: ARRAY
44381: PUSH
44382: LD_INT 1
44384: ARRAY
44385: PPUSH
44386: LD_VAR 0 2
44390: PUSH
44391: LD_VAR 0 9
44395: ARRAY
44396: PUSH
44397: LD_INT 2
44399: ARRAY
44400: PPUSH
44401: CALL_OW 297
44405: PUSH
44406: LD_INT 6
44408: GREATER
44409: IFFALSE 44452
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44411: LD_VAR 0 4
44415: PPUSH
44416: LD_VAR 0 2
44420: PUSH
44421: LD_VAR 0 9
44425: ARRAY
44426: PUSH
44427: LD_INT 1
44429: ARRAY
44430: PPUSH
44431: LD_VAR 0 2
44435: PUSH
44436: LD_VAR 0 9
44440: ARRAY
44441: PUSH
44442: LD_INT 2
44444: ARRAY
44445: PPUSH
44446: CALL_OW 114
44450: GO 44466
// SetTag ( i , tag ) ;
44452: LD_VAR 0 4
44456: PPUSH
44457: LD_VAR 0 9
44461: PPUSH
44462: CALL_OW 109
// end else
44466: GO 44539
// if enemy then
44468: LD_VAR 0 5
44472: IFFALSE 44539
// begin if GetWeapon ( i ) = ru_time_lapser then
44474: LD_VAR 0 4
44478: PPUSH
44479: CALL_OW 264
44483: PUSH
44484: LD_INT 49
44486: EQUAL
44487: IFFALSE 44515
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44489: LD_VAR 0 4
44493: PPUSH
44494: LD_VAR 0 5
44498: PPUSH
44499: LD_VAR 0 4
44503: PPUSH
44504: CALL_OW 74
44508: PPUSH
44509: CALL_OW 112
44513: GO 44539
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44515: LD_VAR 0 4
44519: PPUSH
44520: LD_VAR 0 5
44524: PPUSH
44525: LD_VAR 0 4
44529: PPUSH
44530: CALL_OW 74
44534: PPUSH
44535: CALL 45624 0 2
// end ; end ;
44539: GO 44111
44541: POP
44542: POP
// end ;
44543: LD_VAR 0 3
44547: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44548: LD_INT 0
44550: PPUSH
44551: PPUSH
44552: PPUSH
// if not unit or IsInUnit ( unit ) then
44553: LD_VAR 0 1
44557: NOT
44558: IFTRUE 44571
44560: PUSH
44561: LD_VAR 0 1
44565: PPUSH
44566: CALL_OW 310
44570: OR
44571: IFFALSE 44575
// exit ;
44573: GO 44666
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44575: LD_ADDR_VAR 0 4
44579: PUSH
44580: LD_VAR 0 1
44584: PPUSH
44585: CALL_OW 250
44589: PPUSH
44590: LD_VAR 0 2
44594: PPUSH
44595: LD_INT 1
44597: PPUSH
44598: CALL_OW 272
44602: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44603: LD_ADDR_VAR 0 5
44607: PUSH
44608: LD_VAR 0 1
44612: PPUSH
44613: CALL_OW 251
44617: PPUSH
44618: LD_VAR 0 2
44622: PPUSH
44623: LD_INT 1
44625: PPUSH
44626: CALL_OW 273
44630: ST_TO_ADDR
// if ValidHex ( x , y ) then
44631: LD_VAR 0 4
44635: PPUSH
44636: LD_VAR 0 5
44640: PPUSH
44641: CALL_OW 488
44645: IFFALSE 44666
// ComTurnXY ( unit , x , y ) ;
44647: LD_VAR 0 1
44651: PPUSH
44652: LD_VAR 0 4
44656: PPUSH
44657: LD_VAR 0 5
44661: PPUSH
44662: CALL_OW 118
// end ;
44666: LD_VAR 0 3
44670: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44671: LD_INT 0
44673: PPUSH
44674: PPUSH
// result := false ;
44675: LD_ADDR_VAR 0 3
44679: PUSH
44680: LD_INT 0
44682: ST_TO_ADDR
// if not units then
44683: LD_VAR 0 2
44687: NOT
44688: IFFALSE 44692
// exit ;
44690: GO 44737
// for i in units do
44692: LD_ADDR_VAR 0 4
44696: PUSH
44697: LD_VAR 0 2
44701: PUSH
44702: FOR_IN
44703: IFFALSE 44735
// if See ( side , i ) then
44705: LD_VAR 0 1
44709: PPUSH
44710: LD_VAR 0 4
44714: PPUSH
44715: CALL_OW 292
44719: IFFALSE 44733
// begin result := true ;
44721: LD_ADDR_VAR 0 3
44725: PUSH
44726: LD_INT 1
44728: ST_TO_ADDR
// exit ;
44729: POP
44730: POP
44731: GO 44737
// end ;
44733: GO 44702
44735: POP
44736: POP
// end ;
44737: LD_VAR 0 3
44741: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44742: LD_INT 0
44744: PPUSH
44745: PPUSH
44746: PPUSH
44747: PPUSH
// if not unit or not points then
44748: LD_VAR 0 1
44752: NOT
44753: IFTRUE 44762
44755: PUSH
44756: LD_VAR 0 2
44760: NOT
44761: OR
44762: IFFALSE 44766
// exit ;
44764: GO 44856
// dist := 99999 ;
44766: LD_ADDR_VAR 0 5
44770: PUSH
44771: LD_INT 99999
44773: ST_TO_ADDR
// for i in points do
44774: LD_ADDR_VAR 0 4
44778: PUSH
44779: LD_VAR 0 2
44783: PUSH
44784: FOR_IN
44785: IFFALSE 44854
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44787: LD_ADDR_VAR 0 6
44791: PUSH
44792: LD_VAR 0 1
44796: PPUSH
44797: LD_VAR 0 4
44801: PUSH
44802: LD_INT 1
44804: ARRAY
44805: PPUSH
44806: LD_VAR 0 4
44810: PUSH
44811: LD_INT 2
44813: ARRAY
44814: PPUSH
44815: CALL_OW 297
44819: ST_TO_ADDR
// if tmpDist < dist then
44820: LD_VAR 0 6
44824: PUSH
44825: LD_VAR 0 5
44829: LESS
44830: IFFALSE 44852
// begin result := i ;
44832: LD_ADDR_VAR 0 3
44836: PUSH
44837: LD_VAR 0 4
44841: ST_TO_ADDR
// dist := tmpDist ;
44842: LD_ADDR_VAR 0 5
44846: PUSH
44847: LD_VAR 0 6
44851: ST_TO_ADDR
// end ; end ;
44852: GO 44784
44854: POP
44855: POP
// end ;
44856: LD_VAR 0 3
44860: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44861: LD_INT 0
44863: PPUSH
// uc_side := side ;
44864: LD_ADDR_OWVAR 20
44868: PUSH
44869: LD_VAR 0 1
44873: ST_TO_ADDR
// uc_nation := 3 ;
44874: LD_ADDR_OWVAR 21
44878: PUSH
44879: LD_INT 3
44881: ST_TO_ADDR
// vc_chassis := 25 ;
44882: LD_ADDR_OWVAR 37
44886: PUSH
44887: LD_INT 25
44889: ST_TO_ADDR
// vc_engine := engine_siberite ;
44890: LD_ADDR_OWVAR 39
44894: PUSH
44895: LD_INT 3
44897: ST_TO_ADDR
// vc_control := control_computer ;
44898: LD_ADDR_OWVAR 38
44902: PUSH
44903: LD_INT 3
44905: ST_TO_ADDR
// vc_weapon := 59 ;
44906: LD_ADDR_OWVAR 40
44910: PUSH
44911: LD_INT 59
44913: ST_TO_ADDR
// result := CreateVehicle ;
44914: LD_ADDR_VAR 0 5
44918: PUSH
44919: CALL_OW 45
44923: ST_TO_ADDR
// SetDir ( result , d ) ;
44924: LD_VAR 0 5
44928: PPUSH
44929: LD_VAR 0 4
44933: PPUSH
44934: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44938: LD_VAR 0 5
44942: PPUSH
44943: LD_VAR 0 2
44947: PPUSH
44948: LD_VAR 0 3
44952: PPUSH
44953: LD_INT 0
44955: PPUSH
44956: CALL_OW 48
// end ;
44960: LD_VAR 0 5
44964: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44965: LD_INT 0
44967: PPUSH
44968: PPUSH
44969: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44970: LD_ADDR_VAR 0 2
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44993: LD_VAR 0 1
44997: NOT
44998: IFTRUE 45031
45000: PUSH
45001: LD_VAR 0 1
45005: PPUSH
45006: CALL_OW 264
45010: PUSH
45011: LD_INT 12
45013: PUSH
45014: LD_INT 51
45016: PUSH
45017: LD_INT 32
45019: PUSH
45020: LD_INT 89
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: IN
45029: NOT
45030: OR
45031: IFFALSE 45035
// exit ;
45033: GO 45133
// for i := 1 to 3 do
45035: LD_ADDR_VAR 0 3
45039: PUSH
45040: DOUBLE
45041: LD_INT 1
45043: DEC
45044: ST_TO_ADDR
45045: LD_INT 3
45047: PUSH
45048: FOR_TO
45049: IFFALSE 45131
// begin tmp := GetCargo ( cargo , i ) ;
45051: LD_ADDR_VAR 0 4
45055: PUSH
45056: LD_VAR 0 1
45060: PPUSH
45061: LD_VAR 0 3
45065: PPUSH
45066: CALL_OW 289
45070: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45071: LD_ADDR_VAR 0 2
45075: PUSH
45076: LD_VAR 0 2
45080: PPUSH
45081: LD_VAR 0 3
45085: PPUSH
45086: LD_VAR 0 4
45090: PPUSH
45091: CALL_OW 1
45095: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45096: LD_ADDR_VAR 0 2
45100: PUSH
45101: LD_VAR 0 2
45105: PPUSH
45106: LD_INT 4
45108: PPUSH
45109: LD_VAR 0 2
45113: PUSH
45114: LD_INT 4
45116: ARRAY
45117: PUSH
45118: LD_VAR 0 4
45122: PLUS
45123: PPUSH
45124: CALL_OW 1
45128: ST_TO_ADDR
// end ;
45129: GO 45048
45131: POP
45132: POP
// end ;
45133: LD_VAR 0 2
45137: RET
// export function Length ( array ) ; begin
45138: LD_INT 0
45140: PPUSH
// result := array + 0 ;
45141: LD_ADDR_VAR 0 2
45145: PUSH
45146: LD_VAR 0 1
45150: PUSH
45151: LD_INT 0
45153: PLUS
45154: ST_TO_ADDR
// end ;
45155: LD_VAR 0 2
45159: RET
// export function PrepareArray ( array ) ; begin
45160: LD_INT 0
45162: PPUSH
// result := array diff 0 ;
45163: LD_ADDR_VAR 0 2
45167: PUSH
45168: LD_VAR 0 1
45172: PUSH
45173: LD_INT 0
45175: DIFF
45176: ST_TO_ADDR
// if not result [ 1 ] then
45177: LD_VAR 0 2
45181: PUSH
45182: LD_INT 1
45184: ARRAY
45185: NOT
45186: IFFALSE 45206
// result := Delete ( result , 1 ) ;
45188: LD_ADDR_VAR 0 2
45192: PUSH
45193: LD_VAR 0 2
45197: PPUSH
45198: LD_INT 1
45200: PPUSH
45201: CALL_OW 3
45205: ST_TO_ADDR
// end ;
45206: LD_VAR 0 2
45210: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45211: LD_INT 0
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
// sibRocketRange := 25 ;
45217: LD_ADDR_VAR 0 6
45221: PUSH
45222: LD_INT 25
45224: ST_TO_ADDR
// result := false ;
45225: LD_ADDR_VAR 0 4
45229: PUSH
45230: LD_INT 0
45232: ST_TO_ADDR
// for i := 0 to 5 do
45233: LD_ADDR_VAR 0 5
45237: PUSH
45238: DOUBLE
45239: LD_INT 0
45241: DEC
45242: ST_TO_ADDR
45243: LD_INT 5
45245: PUSH
45246: FOR_TO
45247: IFFALSE 45314
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45249: LD_VAR 0 1
45253: PPUSH
45254: LD_VAR 0 5
45258: PPUSH
45259: LD_VAR 0 6
45263: PPUSH
45264: CALL_OW 272
45268: PPUSH
45269: LD_VAR 0 2
45273: PPUSH
45274: LD_VAR 0 5
45278: PPUSH
45279: LD_VAR 0 6
45283: PPUSH
45284: CALL_OW 273
45288: PPUSH
45289: LD_VAR 0 3
45293: PPUSH
45294: CALL_OW 309
45298: IFFALSE 45312
// begin result := true ;
45300: LD_ADDR_VAR 0 4
45304: PUSH
45305: LD_INT 1
45307: ST_TO_ADDR
// exit ;
45308: POP
45309: POP
45310: GO 45316
// end ;
45312: GO 45246
45314: POP
45315: POP
// end ;
45316: LD_VAR 0 4
45320: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45321: LD_INT 0
45323: PPUSH
45324: PPUSH
45325: PPUSH
// if btype = b_depot then
45326: LD_VAR 0 2
45330: PUSH
45331: LD_INT 0
45333: EQUAL
45334: IFFALSE 45346
// begin result := true ;
45336: LD_ADDR_VAR 0 3
45340: PUSH
45341: LD_INT 1
45343: ST_TO_ADDR
// exit ;
45344: GO 45466
// end ; pom := GetBase ( depot ) ;
45346: LD_ADDR_VAR 0 4
45350: PUSH
45351: LD_VAR 0 1
45355: PPUSH
45356: CALL_OW 274
45360: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45361: LD_ADDR_VAR 0 5
45365: PUSH
45366: LD_VAR 0 2
45370: PPUSH
45371: LD_VAR 0 1
45375: PPUSH
45376: CALL_OW 248
45380: PPUSH
45381: CALL_OW 450
45385: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45386: LD_ADDR_VAR 0 3
45390: PUSH
45391: LD_VAR 0 4
45395: PPUSH
45396: LD_INT 1
45398: PPUSH
45399: CALL_OW 275
45403: PUSH
45404: LD_VAR 0 5
45408: PUSH
45409: LD_INT 1
45411: ARRAY
45412: GREATEREQUAL
45413: IFFALSE 45439
45415: PUSH
45416: LD_VAR 0 4
45420: PPUSH
45421: LD_INT 2
45423: PPUSH
45424: CALL_OW 275
45428: PUSH
45429: LD_VAR 0 5
45433: PUSH
45434: LD_INT 2
45436: ARRAY
45437: GREATEREQUAL
45438: AND
45439: IFFALSE 45465
45441: PUSH
45442: LD_VAR 0 4
45446: PPUSH
45447: LD_INT 3
45449: PPUSH
45450: CALL_OW 275
45454: PUSH
45455: LD_VAR 0 5
45459: PUSH
45460: LD_INT 3
45462: ARRAY
45463: GREATEREQUAL
45464: AND
45465: ST_TO_ADDR
// end ;
45466: LD_VAR 0 3
45470: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45471: LD_INT 0
45473: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45474: LD_VAR 0 1
45478: PPUSH
45479: LD_VAR 0 2
45483: PPUSH
45484: LD_INT 0
45486: PPUSH
45487: LD_INT 0
45489: PPUSH
45490: LD_INT 1
45492: PPUSH
45493: LD_INT 0
45495: PPUSH
45496: CALL_OW 587
// end ;
45500: LD_VAR 0 3
45504: RET
// export function CenterOnNow ( unit ) ; begin
45505: LD_INT 0
45507: PPUSH
// result := IsInUnit ( unit ) ;
45508: LD_ADDR_VAR 0 2
45512: PUSH
45513: LD_VAR 0 1
45517: PPUSH
45518: CALL_OW 310
45522: ST_TO_ADDR
// if not result then
45523: LD_VAR 0 2
45527: NOT
45528: IFFALSE 45540
// result := unit ;
45530: LD_ADDR_VAR 0 2
45534: PUSH
45535: LD_VAR 0 1
45539: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45540: LD_VAR 0 1
45544: PPUSH
45545: CALL_OW 87
// end ;
45549: LD_VAR 0 2
45553: RET
// export function ComMoveHex ( unit , hex ) ; begin
45554: LD_INT 0
45556: PPUSH
// if not hex then
45557: LD_VAR 0 2
45561: NOT
45562: IFFALSE 45566
// exit ;
45564: GO 45619
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45566: LD_VAR 0 2
45570: PUSH
45571: LD_INT 1
45573: ARRAY
45574: PPUSH
45575: LD_VAR 0 2
45579: PUSH
45580: LD_INT 2
45582: ARRAY
45583: PPUSH
45584: CALL_OW 428
45588: IFFALSE 45592
// exit ;
45590: GO 45619
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45592: LD_VAR 0 1
45596: PPUSH
45597: LD_VAR 0 2
45601: PUSH
45602: LD_INT 1
45604: ARRAY
45605: PPUSH
45606: LD_VAR 0 2
45610: PUSH
45611: LD_INT 2
45613: ARRAY
45614: PPUSH
45615: CALL_OW 111
// end ;
45619: LD_VAR 0 3
45623: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45624: LD_INT 0
45626: PPUSH
45627: PPUSH
45628: PPUSH
// if not unit or not enemy then
45629: LD_VAR 0 1
45633: NOT
45634: IFTRUE 45643
45636: PUSH
45637: LD_VAR 0 2
45641: NOT
45642: OR
45643: IFFALSE 45647
// exit ;
45645: GO 45773
// x := GetX ( enemy ) ;
45647: LD_ADDR_VAR 0 4
45651: PUSH
45652: LD_VAR 0 2
45656: PPUSH
45657: CALL_OW 250
45661: ST_TO_ADDR
// y := GetY ( enemy ) ;
45662: LD_ADDR_VAR 0 5
45666: PUSH
45667: LD_VAR 0 2
45671: PPUSH
45672: CALL_OW 251
45676: ST_TO_ADDR
// if ValidHex ( x , y ) then
45677: LD_VAR 0 4
45681: PPUSH
45682: LD_VAR 0 5
45686: PPUSH
45687: CALL_OW 488
45691: IFFALSE 45773
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45693: LD_VAR 0 2
45697: PPUSH
45698: CALL_OW 247
45702: PUSH
45703: LD_INT 3
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: IN
45713: IFTRUE 45736
45715: PUSH
45716: LD_VAR 0 1
45720: PPUSH
45721: CALL_OW 255
45725: PPUSH
45726: LD_VAR 0 2
45730: PPUSH
45731: CALL_OW 292
45735: OR
45736: IFFALSE 45754
// ComAttackUnit ( unit , enemy ) else
45738: LD_VAR 0 1
45742: PPUSH
45743: LD_VAR 0 2
45747: PPUSH
45748: CALL_OW 115
45752: GO 45773
// ComAgressiveMove ( unit , x , y ) ;
45754: LD_VAR 0 1
45758: PPUSH
45759: LD_VAR 0 4
45763: PPUSH
45764: LD_VAR 0 5
45768: PPUSH
45769: CALL_OW 114
// end ;
45773: LD_VAR 0 3
45777: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45778: LD_INT 0
45780: PPUSH
45781: PPUSH
45782: PPUSH
// list := AreaToList ( area , 0 ) ;
45783: LD_ADDR_VAR 0 5
45787: PUSH
45788: LD_VAR 0 1
45792: PPUSH
45793: LD_INT 0
45795: PPUSH
45796: CALL_OW 517
45800: ST_TO_ADDR
// if not list then
45801: LD_VAR 0 5
45805: NOT
45806: IFFALSE 45810
// exit ;
45808: GO 45940
// if all then
45810: LD_VAR 0 2
45814: IFFALSE 45902
// begin for i := 1 to list [ 1 ] do
45816: LD_ADDR_VAR 0 4
45820: PUSH
45821: DOUBLE
45822: LD_INT 1
45824: DEC
45825: ST_TO_ADDR
45826: LD_VAR 0 5
45830: PUSH
45831: LD_INT 1
45833: ARRAY
45834: PUSH
45835: FOR_TO
45836: IFFALSE 45898
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45838: LD_ADDR_VAR 0 3
45842: PUSH
45843: LD_VAR 0 3
45847: PPUSH
45848: LD_VAR 0 3
45852: PUSH
45853: LD_INT 1
45855: PLUS
45856: PPUSH
45857: LD_VAR 0 5
45861: PUSH
45862: LD_INT 1
45864: ARRAY
45865: PUSH
45866: LD_VAR 0 4
45870: ARRAY
45871: PUSH
45872: LD_VAR 0 5
45876: PUSH
45877: LD_INT 2
45879: ARRAY
45880: PUSH
45881: LD_VAR 0 4
45885: ARRAY
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PPUSH
45891: CALL_OW 1
45895: ST_TO_ADDR
45896: GO 45835
45898: POP
45899: POP
// exit ;
45900: GO 45940
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45902: LD_ADDR_VAR 0 3
45906: PUSH
45907: LD_VAR 0 5
45911: PUSH
45912: LD_INT 1
45914: ARRAY
45915: PUSH
45916: LD_INT 1
45918: ARRAY
45919: PUSH
45920: LD_VAR 0 5
45924: PUSH
45925: LD_INT 2
45927: ARRAY
45928: PUSH
45929: LD_INT 1
45931: ARRAY
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: EMPTY
45938: LIST
45939: ST_TO_ADDR
// end ;
45940: LD_VAR 0 3
45944: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45945: LD_INT 0
45947: PPUSH
45948: PPUSH
// list := AreaToList ( area , 0 ) ;
45949: LD_ADDR_VAR 0 4
45953: PUSH
45954: LD_VAR 0 1
45958: PPUSH
45959: LD_INT 0
45961: PPUSH
45962: CALL_OW 517
45966: ST_TO_ADDR
// if not list then
45967: LD_VAR 0 4
45971: NOT
45972: IFFALSE 45976
// exit ;
45974: GO 46017
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45976: LD_ADDR_VAR 0 3
45980: PUSH
45981: LD_VAR 0 4
45985: PUSH
45986: LD_INT 1
45988: ARRAY
45989: PUSH
45990: LD_INT 1
45992: ARRAY
45993: PUSH
45994: LD_VAR 0 4
45998: PUSH
45999: LD_INT 2
46001: ARRAY
46002: PUSH
46003: LD_INT 1
46005: ARRAY
46006: PUSH
46007: LD_VAR 0 2
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// end ;
46017: LD_VAR 0 3
46021: RET
// export function First ( array ) ; begin
46022: LD_INT 0
46024: PPUSH
// if not array then
46025: LD_VAR 0 1
46029: NOT
46030: IFFALSE 46034
// exit ;
46032: GO 46048
// result := array [ 1 ] ;
46034: LD_ADDR_VAR 0 2
46038: PUSH
46039: LD_VAR 0 1
46043: PUSH
46044: LD_INT 1
46046: ARRAY
46047: ST_TO_ADDR
// end ;
46048: LD_VAR 0 2
46052: RET
// export function Last ( array ) ; begin
46053: LD_INT 0
46055: PPUSH
// if not array then
46056: LD_VAR 0 1
46060: NOT
46061: IFFALSE 46065
// exit ;
46063: GO 46081
// result := array [ array ] ;
46065: LD_ADDR_VAR 0 2
46069: PUSH
46070: LD_VAR 0 1
46074: PUSH
46075: LD_VAR 0 1
46079: ARRAY
46080: ST_TO_ADDR
// end ;
46081: LD_VAR 0 2
46085: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46086: LD_INT 0
46088: PPUSH
46089: PPUSH
// result := [ ] ;
46090: LD_ADDR_VAR 0 5
46094: PUSH
46095: EMPTY
46096: ST_TO_ADDR
// if not array then
46097: LD_VAR 0 1
46101: NOT
46102: IFFALSE 46106
// exit ;
46104: GO 46218
// for i := 1 to array do
46106: LD_ADDR_VAR 0 6
46110: PUSH
46111: DOUBLE
46112: LD_INT 1
46114: DEC
46115: ST_TO_ADDR
46116: LD_VAR 0 1
46120: PUSH
46121: FOR_TO
46122: IFFALSE 46216
// if array [ i ] [ index ] = value then
46124: LD_VAR 0 1
46128: PUSH
46129: LD_VAR 0 6
46133: ARRAY
46134: PUSH
46135: LD_VAR 0 2
46139: ARRAY
46140: PUSH
46141: LD_VAR 0 3
46145: EQUAL
46146: IFFALSE 46214
// begin if indexColumn then
46148: LD_VAR 0 4
46152: IFFALSE 46188
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46154: LD_ADDR_VAR 0 5
46158: PUSH
46159: LD_VAR 0 5
46163: PPUSH
46164: LD_VAR 0 1
46168: PUSH
46169: LD_VAR 0 6
46173: ARRAY
46174: PUSH
46175: LD_VAR 0 4
46179: ARRAY
46180: PPUSH
46181: CALL 41226 0 2
46185: ST_TO_ADDR
46186: GO 46214
// result := Join ( result , array [ i ] ) ;
46188: LD_ADDR_VAR 0 5
46192: PUSH
46193: LD_VAR 0 5
46197: PPUSH
46198: LD_VAR 0 1
46202: PUSH
46203: LD_VAR 0 6
46207: ARRAY
46208: PPUSH
46209: CALL 41226 0 2
46213: ST_TO_ADDR
// end ;
46214: GO 46121
46216: POP
46217: POP
// end ;
46218: LD_VAR 0 5
46222: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46223: LD_INT 0
46225: PPUSH
// if not vehicles or not parkingPoint then
46226: LD_VAR 0 1
46230: NOT
46231: IFTRUE 46240
46233: PUSH
46234: LD_VAR 0 2
46238: NOT
46239: OR
46240: IFFALSE 46244
// exit ;
46242: GO 46342
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46244: LD_ADDR_VAR 0 1
46248: PUSH
46249: LD_VAR 0 1
46253: PPUSH
46254: LD_INT 50
46256: PUSH
46257: EMPTY
46258: LIST
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: LD_INT 92
46265: PUSH
46266: LD_VAR 0 2
46270: PUSH
46271: LD_INT 1
46273: ARRAY
46274: PUSH
46275: LD_VAR 0 2
46279: PUSH
46280: LD_INT 2
46282: ARRAY
46283: PUSH
46284: LD_INT 8
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PPUSH
46301: CALL_OW 72
46305: ST_TO_ADDR
// if not vehicles then
46306: LD_VAR 0 1
46310: NOT
46311: IFFALSE 46315
// exit ;
46313: GO 46342
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46315: LD_VAR 0 1
46319: PPUSH
46320: LD_VAR 0 2
46324: PUSH
46325: LD_INT 1
46327: ARRAY
46328: PPUSH
46329: LD_VAR 0 2
46333: PUSH
46334: LD_INT 2
46336: ARRAY
46337: PPUSH
46338: CALL_OW 111
// end ;
46342: LD_VAR 0 3
46346: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46347: LD_INT 0
46349: PPUSH
46350: PPUSH
46351: PPUSH
// if not side or not area then
46352: LD_VAR 0 1
46356: NOT
46357: IFTRUE 46366
46359: PUSH
46360: LD_VAR 0 2
46364: NOT
46365: OR
46366: IFFALSE 46370
// exit ;
46368: GO 46489
// tmp := AreaToList ( area , 0 ) ;
46370: LD_ADDR_VAR 0 5
46374: PUSH
46375: LD_VAR 0 2
46379: PPUSH
46380: LD_INT 0
46382: PPUSH
46383: CALL_OW 517
46387: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46388: LD_ADDR_VAR 0 4
46392: PUSH
46393: DOUBLE
46394: LD_INT 1
46396: DEC
46397: ST_TO_ADDR
46398: LD_VAR 0 5
46402: PUSH
46403: LD_INT 1
46405: ARRAY
46406: PUSH
46407: FOR_TO
46408: IFFALSE 46487
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46410: LD_VAR 0 5
46414: PUSH
46415: LD_INT 1
46417: ARRAY
46418: PUSH
46419: LD_VAR 0 4
46423: ARRAY
46424: PPUSH
46425: LD_VAR 0 5
46429: PUSH
46430: LD_INT 2
46432: ARRAY
46433: PUSH
46434: LD_VAR 0 4
46438: ARRAY
46439: PPUSH
46440: CALL_OW 351
46444: IFFALSE 46485
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46446: LD_VAR 0 5
46450: PUSH
46451: LD_INT 1
46453: ARRAY
46454: PUSH
46455: LD_VAR 0 4
46459: ARRAY
46460: PPUSH
46461: LD_VAR 0 5
46465: PUSH
46466: LD_INT 2
46468: ARRAY
46469: PUSH
46470: LD_VAR 0 4
46474: ARRAY
46475: PPUSH
46476: LD_VAR 0 1
46480: PPUSH
46481: CALL_OW 244
// end ;
46485: GO 46407
46487: POP
46488: POP
// end ;
46489: LD_VAR 0 3
46493: RET
// export function UniqueArray ( array ) ; var i ; begin
46494: LD_INT 0
46496: PPUSH
46497: PPUSH
// result := [ ] ;
46498: LD_ADDR_VAR 0 2
46502: PUSH
46503: EMPTY
46504: ST_TO_ADDR
// if not array then
46505: LD_VAR 0 1
46509: NOT
46510: IFFALSE 46514
// exit ;
46512: GO 46575
// for i := 1 to array do
46514: LD_ADDR_VAR 0 3
46518: PUSH
46519: DOUBLE
46520: LD_INT 1
46522: DEC
46523: ST_TO_ADDR
46524: LD_VAR 0 1
46528: PUSH
46529: FOR_TO
46530: IFFALSE 46573
// if not array [ i ] in result then
46532: LD_VAR 0 1
46536: PUSH
46537: LD_VAR 0 3
46541: ARRAY
46542: PUSH
46543: LD_VAR 0 2
46547: IN
46548: NOT
46549: IFFALSE 46571
// result := Join ( result , i ) ;
46551: LD_ADDR_VAR 0 2
46555: PUSH
46556: LD_VAR 0 2
46560: PPUSH
46561: LD_VAR 0 3
46565: PPUSH
46566: CALL 41226 0 2
46570: ST_TO_ADDR
46571: GO 46529
46573: POP
46574: POP
// end ; end_of_file
46575: LD_VAR 0 2
46579: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46580: LD_INT 0
46582: PPUSH
46583: PPUSH
// disable ( mpActive ) ;
46584: LD_INT 100
46586: DISABLE_MARKED
// disable ( mpWin ) ;
46587: LD_INT 101
46589: DISABLE_MARKED
// disable ( mpLose ) ;
46590: LD_INT 102
46592: DISABLE_MARKED
// mpGameType := 0 ;
46593: LD_ADDR_EXP 3
46597: PUSH
46598: LD_INT 0
46600: ST_TO_ADDR
// mpGameSettings := [ ] ;
46601: LD_ADDR_EXP 6
46605: PUSH
46606: EMPTY
46607: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46608: LD_ADDR_EXP 4
46612: PUSH
46613: EMPTY
46614: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46615: LD_ADDR_EXP 5
46619: PUSH
46620: EMPTY
46621: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46622: LD_ADDR_EXP 29
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46637: LD_ADDR_EXP 12
46641: PUSH
46642: EMPTY
46643: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46644: LD_ADDR_EXP 13
46648: PUSH
46649: EMPTY
46650: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46651: LD_ADDR_EXP 42
46655: PUSH
46656: EMPTY
46657: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46658: LD_ADDR_EXP 43
46662: PUSH
46663: EMPTY
46664: ST_TO_ADDR
// mpDepots := [ ] ;
46665: LD_ADDR_EXP 14
46669: PUSH
46670: EMPTY
46671: ST_TO_ADDR
// mpBuildings := [ ] ;
46672: LD_ADDR_EXP 17
46676: PUSH
46677: EMPTY
46678: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46679: LD_ADDR_EXP 18
46683: PUSH
46684: EMPTY
46685: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46686: LD_ADDR_EXP 19
46690: PUSH
46691: EMPTY
46692: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46693: LD_ADDR_EXP 20
46697: PUSH
46698: EMPTY
46699: ST_TO_ADDR
// mpStartingResources := [ ] ;
46700: LD_ADDR_EXP 15
46704: PUSH
46705: EMPTY
46706: ST_TO_ADDR
// mpStartPos := [ ] ;
46707: LD_ADDR_EXP 21
46711: PUSH
46712: EMPTY
46713: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46714: LD_ADDR_EXP 22
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46723: LD_ADDR_EXP 23
46727: PUSH
46728: EMPTY
46729: ST_TO_ADDR
// mpApemans := [ ] ;
46730: LD_ADDR_EXP 30
46734: PUSH
46735: EMPTY
46736: ST_TO_ADDR
// mpApemansArea := [ ] ;
46737: LD_ADDR_EXP 31
46741: PUSH
46742: EMPTY
46743: ST_TO_ADDR
// mpRespawn := [ ] ;
46744: LD_ADDR_EXP 33
46748: PUSH
46749: EMPTY
46750: ST_TO_ADDR
// mpKingArea := 0 ;
46751: LD_ADDR_EXP 34
46755: PUSH
46756: LD_INT 0
46758: ST_TO_ADDR
// mpPoints := [ ] ;
46759: LD_ADDR_EXP 35
46763: PUSH
46764: EMPTY
46765: ST_TO_ADDR
// mpVehicles := 0 ;
46766: LD_ADDR_EXP 36
46770: PUSH
46771: LD_INT 0
46773: ST_TO_ADDR
// mpShipments := 0 ;
46774: LD_ADDR_EXP 27
46778: PUSH
46779: LD_INT 0
46781: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46782: LD_ADDR_EXP 40
46786: PUSH
46787: EMPTY
46788: PUSH
46789: EMPTY
46790: PUSH
46791: EMPTY
46792: PUSH
46793: EMPTY
46794: PUSH
46795: EMPTY
46796: PUSH
46797: EMPTY
46798: PUSH
46799: EMPTY
46800: PUSH
46801: EMPTY
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46813: LD_ADDR_EXP 32
46817: PUSH
46818: EMPTY
46819: PUSH
46820: EMPTY
46821: PUSH
46822: EMPTY
46823: PUSH
46824: EMPTY
46825: PUSH
46826: EMPTY
46827: PUSH
46828: EMPTY
46829: PUSH
46830: EMPTY
46831: PUSH
46832: EMPTY
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
46844: LD_ADDR_EXP 41
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: ST_TO_ADDR
// mpEmissions := 0 ;
46883: LD_ADDR_EXP 37
46887: PUSH
46888: LD_INT 0
46890: ST_TO_ADDR
// mpTeleports := 0 ;
46891: LD_ADDR_EXP 44
46895: PUSH
46896: LD_INT 0
46898: ST_TO_ADDR
// mpArtifacts := 0 ;
46899: LD_ADDR_EXP 45
46903: PUSH
46904: LD_INT 0
46906: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46907: LD_ADDR_EXP 46
46911: PUSH
46912: LD_INT 0
46914: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46915: LD_ADDR_EXP 25
46919: PUSH
46920: LD_INT 3
46922: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46923: LD_ADDR_EXP 24
46927: PUSH
46928: LD_INT 15
46930: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46931: LD_ADDR_EXP 38
46935: PUSH
46936: LD_INT 0
46938: ST_TO_ADDR
// mpGameActive := false ;
46939: LD_ADDR_EXP 39
46943: PUSH
46944: LD_INT 0
46946: ST_TO_ADDR
// mpBlockRespThread := false ;
46947: LD_ADDR_EXP 47
46951: PUSH
46952: LD_INT 0
46954: ST_TO_ADDR
// for i := 1 to 32 do
46955: LD_ADDR_VAR 0 2
46959: PUSH
46960: DOUBLE
46961: LD_INT 1
46963: DEC
46964: ST_TO_ADDR
46965: LD_INT 32
46967: PUSH
46968: FOR_TO
46969: IFFALSE 46996
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46971: LD_ADDR_EXP 6
46975: PUSH
46976: LD_EXP 6
46980: PPUSH
46981: LD_VAR 0 2
46985: PPUSH
46986: LD_INT 0
46988: PPUSH
46989: CALL_OW 1
46993: ST_TO_ADDR
46994: GO 46968
46996: POP
46997: POP
// end ;
46998: LD_VAR 0 1
47002: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
47003: LD_INT 0
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
47009: PPUSH
47010: PPUSH
47011: PPUSH
47012: PPUSH
47013: PPUSH
47014: PPUSH
47015: PPUSH
47016: PPUSH
47017: PPUSH
47018: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
47019: LD_ADDR_VAR 0 14
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: LD_INT 5
47035: PUSH
47036: LD_INT 6
47038: PUSH
47039: LD_INT 7
47041: PUSH
47042: LD_INT 8
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: ST_TO_ADDR
// for i in gameTypes do
47054: LD_ADDR_VAR 0 2
47058: PUSH
47059: LD_VAR 0 14
47063: PUSH
47064: FOR_IN
47065: IFFALSE 47074
// disable ( i ) ;
47067: LD_VAR 0 2
47071: DISABLE_MARKED
47072: GO 47064
47074: POP
47075: POP
// if Multiplayer then
47076: LD_OWVAR 4
47080: IFFALSE 47264
// begin mpGameType := mp_game_type ;
47082: LD_ADDR_EXP 3
47086: PUSH
47087: LD_OWVAR 6
47091: ST_TO_ADDR
// your_side := mp_player_side ;
47092: LD_ADDR_OWVAR 2
47096: PUSH
47097: LD_OWVAR 7
47101: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47102: LD_ADDR_EXP 7
47106: PUSH
47107: LD_OWVAR 17
47111: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47112: LD_ADDR_EXP 8
47116: PUSH
47117: LD_OWVAR 15
47121: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47122: LD_ADDR_EXP 9
47126: PUSH
47127: LD_OWVAR 16
47131: ST_TO_ADDR
// mpTeams := mp_teams ;
47132: LD_ADDR_EXP 10
47136: PUSH
47137: LD_OWVAR 12
47141: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47142: LD_ADDR_VAR 0 2
47146: PUSH
47147: DOUBLE
47148: LD_INT 1
47150: DEC
47151: ST_TO_ADDR
47152: LD_EXP 4
47156: PPUSH
47157: CALL 5250 0 1
47161: PUSH
47162: FOR_TO
47163: IFFALSE 47239
// begin setting := mpGameSettingsKeys [ i ] ;
47165: LD_ADDR_VAR 0 12
47169: PUSH
47170: LD_EXP 4
47174: PUSH
47175: LD_VAR 0 2
47179: ARRAY
47180: ST_TO_ADDR
// if setting then
47181: LD_VAR 0 12
47185: IFFALSE 47237
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47187: LD_ADDR_EXP 6
47191: PUSH
47192: LD_EXP 6
47196: PPUSH
47197: LD_VAR 0 2
47201: PPUSH
47202: LD_EXP 5
47206: PUSH
47207: LD_VAR 0 2
47211: ARRAY
47212: PUSH
47213: LD_VAR 0 2
47217: PUSH
47218: LD_INT 1
47220: MINUS
47221: PPUSH
47222: CALL_OW 426
47226: PUSH
47227: LD_INT 1
47229: PLUS
47230: ARRAY
47231: PPUSH
47232: CALL_OW 1
47236: ST_TO_ADDR
// end ;
47237: GO 47162
47239: POP
47240: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47241: LD_ADDR_EXP 11
47245: PUSH
47246: LD_EXP 8
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: DIFF
47257: PUSH
47258: LD_INT 1
47260: GREATER
47261: ST_TO_ADDR
// end else
47262: GO 47264
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47264: LD_EXP 3
47268: PPUSH
47269: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
47273: LD_EXP 18
47277: PPUSH
47278: CALL 5250 0 1
47282: IFFALSE 47313
// begin for i in mpMarkedAreas do
47284: LD_ADDR_VAR 0 2
47288: PUSH
47289: LD_EXP 18
47293: PUSH
47294: FOR_IN
47295: IFFALSE 47311
// SetAreaMapShow ( i , 0 ) ;
47297: LD_VAR 0 2
47301: PPUSH
47302: LD_INT 0
47304: PPUSH
47305: CALL_OW 424
47309: GO 47294
47311: POP
47312: POP
// end ; for i := 1 to 8 do
47313: LD_ADDR_VAR 0 2
47317: PUSH
47318: DOUBLE
47319: LD_INT 1
47321: DEC
47322: ST_TO_ADDR
47323: LD_INT 8
47325: PUSH
47326: FOR_TO
47327: IFFALSE 48786
// begin if not mpSidePositions [ i ] then
47329: LD_EXP 7
47333: PUSH
47334: LD_VAR 0 2
47338: ARRAY
47339: NOT
47340: IFFALSE 47344
// continue ;
47342: GO 47326
// side := i ;
47344: LD_ADDR_VAR 0 7
47348: PUSH
47349: LD_VAR 0 2
47353: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47354: LD_ADDR_VAR 0 9
47358: PUSH
47359: LD_EXP 9
47363: PUSH
47364: LD_VAR 0 2
47368: ARRAY
47369: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47370: LD_ADDR_VAR 0 8
47374: PUSH
47375: LD_EXP 7
47379: PUSH
47380: LD_VAR 0 2
47384: ARRAY
47385: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47386: LD_EXP 12
47390: PPUSH
47391: CALL 5250 0 1
47395: IFFALSE 47472
// begin for j in mpOilDeposits [ pos ] do
47397: LD_ADDR_VAR 0 3
47401: PUSH
47402: LD_EXP 12
47406: PUSH
47407: LD_VAR 0 8
47411: ARRAY
47412: PUSH
47413: FOR_IN
47414: IFFALSE 47470
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47416: LD_VAR 0 3
47420: PUSH
47421: LD_INT 1
47423: ARRAY
47424: PPUSH
47425: LD_VAR 0 3
47429: PUSH
47430: LD_INT 2
47432: ARRAY
47433: PPUSH
47434: LD_INT 2
47436: PPUSH
47437: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47441: LD_VAR 0 3
47445: PUSH
47446: LD_INT 1
47448: ARRAY
47449: PPUSH
47450: LD_VAR 0 3
47454: PUSH
47455: LD_INT 2
47457: ARRAY
47458: PPUSH
47459: LD_VAR 0 7
47463: PPUSH
47464: CALL_OW 441
// end ;
47468: GO 47413
47470: POP
47471: POP
// end ; if Count ( mpSibDeposits ) then
47472: LD_EXP 13
47476: PPUSH
47477: CALL 5250 0 1
47481: IFFALSE 47558
// begin for j in mpSibDeposits [ pos ] do
47483: LD_ADDR_VAR 0 3
47487: PUSH
47488: LD_EXP 13
47492: PUSH
47493: LD_VAR 0 8
47497: ARRAY
47498: PUSH
47499: FOR_IN
47500: IFFALSE 47556
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47502: LD_VAR 0 3
47506: PUSH
47507: LD_INT 1
47509: ARRAY
47510: PPUSH
47511: LD_VAR 0 3
47515: PUSH
47516: LD_INT 2
47518: ARRAY
47519: PPUSH
47520: LD_INT 3
47522: PPUSH
47523: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47527: LD_VAR 0 3
47531: PUSH
47532: LD_INT 1
47534: ARRAY
47535: PPUSH
47536: LD_VAR 0 3
47540: PUSH
47541: LD_INT 2
47543: ARRAY
47544: PPUSH
47545: LD_VAR 0 7
47549: PPUSH
47550: CALL_OW 441
// end ;
47554: GO 47499
47556: POP
47557: POP
// end ; InitBc ;
47558: CALL_OW 21
// InitUc ;
47562: CALL_OW 18
// uc_side := side ;
47566: LD_ADDR_OWVAR 20
47570: PUSH
47571: LD_VAR 0 7
47575: ST_TO_ADDR
// uc_nation := nation ;
47576: LD_ADDR_OWVAR 21
47580: PUSH
47581: LD_VAR 0 9
47585: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47586: LD_EXP 22
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: GREATER
47595: IFFALSE 47754
// begin x := mpStartPos [ pos ] [ 1 ] ;
47597: LD_ADDR_VAR 0 5
47601: PUSH
47602: LD_EXP 21
47606: PUSH
47607: LD_VAR 0 8
47611: ARRAY
47612: PUSH
47613: LD_INT 1
47615: ARRAY
47616: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47617: LD_ADDR_VAR 0 6
47621: PUSH
47622: LD_EXP 21
47626: PUSH
47627: LD_VAR 0 8
47631: ARRAY
47632: PUSH
47633: LD_INT 2
47635: ARRAY
47636: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47637: LD_VAR 0 5
47641: PPUSH
47642: LD_VAR 0 6
47646: PPUSH
47647: LD_INT 12
47649: PPUSH
47650: LD_INT 2
47652: PPUSH
47653: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47657: LD_ADDR_EXP 23
47661: PUSH
47662: LD_EXP 23
47666: PPUSH
47667: LD_VAR 0 7
47671: PPUSH
47672: LD_VAR 0 7
47676: PPUSH
47677: LD_VAR 0 5
47681: PPUSH
47682: LD_VAR 0 6
47686: PPUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 100
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: LD_INT 70
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: LD_INT 40
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 10
47719: PUSH
47720: LD_INT 25
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 20
47729: PUSH
47730: LD_INT 100
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: PPUSH
47744: CALL_OW 418
47748: PPUSH
47749: CALL_OW 1
47753: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47754: LD_EXP 14
47758: PPUSH
47759: CALL 5250 0 1
47763: IFFALSE 47962
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
47765: LD_EXP 3
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: LD_INT 8
47775: PUSH
47776: LD_INT 6
47778: PUSH
47779: LD_INT 7
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: IN
47788: IFFALSE 47808
// begin bc_level := 10 ;
47790: LD_ADDR_OWVAR 43
47794: PUSH
47795: LD_INT 10
47797: ST_TO_ADDR
// bc_type := b_warehouse ;
47798: LD_ADDR_OWVAR 42
47802: PUSH
47803: LD_INT 1
47805: ST_TO_ADDR
// end else
47806: GO 47824
// begin bc_level := 0 ;
47808: LD_ADDR_OWVAR 43
47812: PUSH
47813: LD_INT 0
47815: ST_TO_ADDR
// bc_type := b_depot ;
47816: LD_ADDR_OWVAR 42
47820: PUSH
47821: LD_INT 0
47823: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47824: LD_ADDR_VAR 0 4
47828: PUSH
47829: LD_EXP 14
47833: PUSH
47834: LD_VAR 0 8
47838: ARRAY
47839: PUSH
47840: LD_INT 1
47842: ARRAY
47843: PPUSH
47844: LD_EXP 14
47848: PUSH
47849: LD_VAR 0 8
47853: ARRAY
47854: PUSH
47855: LD_INT 2
47857: ARRAY
47858: PPUSH
47859: LD_EXP 14
47863: PUSH
47864: LD_VAR 0 8
47868: ARRAY
47869: PUSH
47870: LD_INT 3
47872: ARRAY
47873: PPUSH
47874: CALL_OW 47
47878: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47879: LD_VAR 0 4
47883: PPUSH
47884: LD_STRING @
47886: PUSH
47887: LD_VAR 0 7
47891: STR
47892: PPUSH
47893: CALL_OW 500
// if Count ( mpStartingResources ) then
47897: LD_EXP 15
47901: PPUSH
47902: CALL 5250 0 1
47906: IFFALSE 47960
// begin for j := 1 to mpStartingResources do
47908: LD_ADDR_VAR 0 3
47912: PUSH
47913: DOUBLE
47914: LD_INT 1
47916: DEC
47917: ST_TO_ADDR
47918: LD_EXP 15
47922: PUSH
47923: FOR_TO
47924: IFFALSE 47958
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47926: LD_VAR 0 4
47930: PPUSH
47931: CALL_OW 274
47935: PPUSH
47936: LD_VAR 0 3
47940: PPUSH
47941: LD_EXP 15
47945: PUSH
47946: LD_VAR 0 3
47950: ARRAY
47951: PPUSH
47952: CALL_OW 277
47956: GO 47923
47958: POP
47959: POP
// end ; end else
47960: GO 48169
// if Count ( mpStartingResources ) then
47962: LD_EXP 15
47966: PPUSH
47967: CALL 5250 0 1
47971: IFFALSE 48169
// begin x := mpStartPos [ pos ] [ 1 ] ;
47973: LD_ADDR_VAR 0 5
47977: PUSH
47978: LD_EXP 21
47982: PUSH
47983: LD_VAR 0 8
47987: ARRAY
47988: PUSH
47989: LD_INT 1
47991: ARRAY
47992: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47993: LD_ADDR_VAR 0 6
47997: PUSH
47998: LD_EXP 21
48002: PUSH
48003: LD_VAR 0 8
48007: ARRAY
48008: PUSH
48009: LD_INT 2
48011: ARRAY
48012: ST_TO_ADDR
// for j := 1 to mpStartingResources do
48013: LD_ADDR_VAR 0 3
48017: PUSH
48018: DOUBLE
48019: LD_INT 1
48021: DEC
48022: ST_TO_ADDR
48023: LD_EXP 15
48027: PUSH
48028: FOR_TO
48029: IFFALSE 48167
// begin resources := mpStartingResources [ j ] ;
48031: LD_ADDR_VAR 0 13
48035: PUSH
48036: LD_EXP 15
48040: PUSH
48041: LD_VAR 0 3
48045: ARRAY
48046: ST_TO_ADDR
// if resources = 0 then
48047: LD_VAR 0 13
48051: PUSH
48052: LD_INT 0
48054: EQUAL
48055: IFFALSE 48059
// continue ;
48057: GO 48028
// repeat if resources >= 50 then
48059: LD_VAR 0 13
48063: PUSH
48064: LD_INT 50
48066: GREATEREQUAL
48067: IFFALSE 48113
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48069: LD_VAR 0 3
48073: PPUSH
48074: LD_INT 5
48076: PPUSH
48077: LD_VAR 0 5
48081: PPUSH
48082: LD_VAR 0 6
48086: PPUSH
48087: LD_INT 6
48089: PPUSH
48090: LD_INT 0
48092: PPUSH
48093: CALL_OW 60
// resources := resources - 50 ;
48097: LD_ADDR_VAR 0 13
48101: PUSH
48102: LD_VAR 0 13
48106: PUSH
48107: LD_INT 50
48109: MINUS
48110: ST_TO_ADDR
// end else
48111: GO 48155
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48113: LD_VAR 0 3
48117: PPUSH
48118: LD_VAR 0 13
48122: PUSH
48123: LD_INT 10
48125: DIV
48126: PPUSH
48127: LD_VAR 0 5
48131: PPUSH
48132: LD_VAR 0 6
48136: PPUSH
48137: LD_INT 6
48139: PPUSH
48140: LD_INT 0
48142: PPUSH
48143: CALL_OW 60
// resources := 0 ;
48147: LD_ADDR_VAR 0 13
48151: PUSH
48152: LD_INT 0
48154: ST_TO_ADDR
// end ; until resources <= 0 ;
48155: LD_VAR 0 13
48159: PUSH
48160: LD_INT 0
48162: LESSEQUAL
48163: IFFALSE 48059
// end ;
48165: GO 48028
48167: POP
48168: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
48169: LD_EXP 17
48173: PPUSH
48174: CALL 5250 0 1
48178: IFFALSE 48198
48180: PUSH
48181: LD_EXP 3
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 8
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: IN
48196: NOT
48197: AND
48198: IFFALSE 48276
// begin for j in mpBuildings [ pos ] do
48200: LD_ADDR_VAR 0 3
48204: PUSH
48205: LD_EXP 17
48209: PUSH
48210: LD_VAR 0 8
48214: ARRAY
48215: PUSH
48216: FOR_IN
48217: IFFALSE 48274
// begin bc_level := 0 ;
48219: LD_ADDR_OWVAR 43
48223: PUSH
48224: LD_INT 0
48226: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48227: LD_ADDR_OWVAR 42
48231: PUSH
48232: LD_VAR 0 3
48236: PUSH
48237: LD_INT 1
48239: ARRAY
48240: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48241: LD_VAR 0 3
48245: PUSH
48246: LD_INT 2
48248: ARRAY
48249: PPUSH
48250: LD_VAR 0 3
48254: PUSH
48255: LD_INT 3
48257: ARRAY
48258: PPUSH
48259: LD_VAR 0 3
48263: PUSH
48264: LD_INT 4
48266: ARRAY
48267: PPUSH
48268: CALL_OW 47
// end ;
48272: GO 48216
48274: POP
48275: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48276: LD_EXP 26
48280: IFFALSE 48300
48282: PUSH
48283: LD_INT 20
48285: PPUSH
48286: LD_VAR 0 7
48290: PPUSH
48291: CALL_OW 321
48295: PUSH
48296: LD_INT 1
48298: EQUAL
48299: AND
48300: IFFALSE 48317
// SetTech ( tech_SibDet , side , state_researched ) ;
48302: LD_INT 20
48304: PPUSH
48305: LD_VAR 0 7
48309: PPUSH
48310: LD_INT 2
48312: PPUSH
48313: CALL_OW 322
// if not mpArtifacts then
48317: LD_EXP 45
48321: NOT
48322: IFFALSE 48339
// SetTech ( tech_artifact , side , state_disabled ) ;
48324: LD_INT 24
48326: PPUSH
48327: LD_VAR 0 7
48331: PPUSH
48332: LD_INT 0
48334: PPUSH
48335: CALL_OW 322
// if mpSibBomb = 1 then
48339: LD_EXP 28
48343: PUSH
48344: LD_INT 1
48346: EQUAL
48347: IFFALSE 48366
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48349: LD_INT 25
48351: PPUSH
48352: LD_VAR 0 7
48356: PPUSH
48357: LD_INT 1
48359: PPUSH
48360: CALL_OW 322
// end else
48364: GO 48381
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48366: LD_INT 25
48368: PPUSH
48369: LD_VAR 0 7
48373: PPUSH
48374: LD_INT 0
48376: PPUSH
48377: CALL_OW 322
// end ; if mpVehicles then
48381: LD_EXP 36
48385: IFFALSE 48484
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48387: LD_ADDR_VAR 0 3
48391: PUSH
48392: LD_VAR 0 7
48396: PPUSH
48397: LD_VAR 0 9
48401: PPUSH
48402: LD_EXP 36
48406: PPUSH
48407: CALL 49743 0 3
48411: PUSH
48412: FOR_IN
48413: IFFALSE 48482
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48415: LD_VAR 0 3
48419: PPUSH
48420: LD_INT 0
48422: PPUSH
48423: LD_INT 5
48425: PPUSH
48426: CALL_OW 12
48430: PPUSH
48431: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48435: LD_VAR 0 3
48439: PPUSH
48440: LD_EXP 21
48444: PUSH
48445: LD_VAR 0 8
48449: ARRAY
48450: PUSH
48451: LD_INT 1
48453: ARRAY
48454: PPUSH
48455: LD_EXP 21
48459: PUSH
48460: LD_VAR 0 8
48464: ARRAY
48465: PUSH
48466: LD_INT 2
48468: ARRAY
48469: PPUSH
48470: LD_INT 12
48472: PPUSH
48473: LD_INT 0
48475: PPUSH
48476: CALL_OW 50
// end ;
48480: GO 48412
48482: POP
48483: POP
// end ; uc_nation := nation ;
48484: LD_ADDR_OWVAR 21
48488: PUSH
48489: LD_VAR 0 9
48493: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48494: LD_EXP 3
48498: PUSH
48499: LD_INT 6
48501: PUSH
48502: LD_INT 7
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: IN
48509: IFFALSE 48534
48511: PUSH
48512: LD_EXP 7
48516: PUSH
48517: LD_VAR 0 2
48521: ARRAY
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: IN
48533: AND
48534: IFFALSE 48582
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48536: LD_ADDR_VAR 0 11
48540: PUSH
48541: LD_VAR 0 7
48545: PPUSH
48546: LD_VAR 0 9
48550: PPUSH
48551: LD_EXP 24
48555: PUSH
48556: LD_EXP 24
48560: PUSH
48561: LD_INT 2
48563: DIV
48564: PLUS
48565: PPUSH
48566: LD_EXP 25
48570: PUSH
48571: LD_INT 1
48573: PLUS
48574: PPUSH
48575: CALL 49198 0 4
48579: ST_TO_ADDR
48580: GO 48612
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48582: LD_ADDR_VAR 0 11
48586: PUSH
48587: LD_VAR 0 7
48591: PPUSH
48592: LD_VAR 0 9
48596: PPUSH
48597: LD_EXP 24
48601: PPUSH
48602: LD_EXP 25
48606: PPUSH
48607: CALL 49198 0 4
48611: ST_TO_ADDR
// for j in team do
48612: LD_ADDR_VAR 0 3
48616: PUSH
48617: LD_VAR 0 11
48621: PUSH
48622: FOR_IN
48623: IFFALSE 48672
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48625: LD_VAR 0 3
48629: PPUSH
48630: LD_EXP 21
48634: PUSH
48635: LD_VAR 0 8
48639: ARRAY
48640: PUSH
48641: LD_INT 1
48643: ARRAY
48644: PPUSH
48645: LD_EXP 21
48649: PUSH
48650: LD_VAR 0 8
48654: ARRAY
48655: PUSH
48656: LD_INT 2
48658: ARRAY
48659: PPUSH
48660: LD_INT 12
48662: PPUSH
48663: LD_INT 0
48665: PPUSH
48666: CALL_OW 50
48670: GO 48622
48672: POP
48673: POP
// if mpApemans then
48674: LD_EXP 30
48678: IFFALSE 48784
// begin for j := 1 to mpApemans do
48680: LD_ADDR_VAR 0 3
48684: PUSH
48685: DOUBLE
48686: LD_INT 1
48688: DEC
48689: ST_TO_ADDR
48690: LD_EXP 30
48694: PUSH
48695: FOR_TO
48696: IFFALSE 48782
// begin PrepareApeman ( - 5 ) ;
48698: LD_INT 5
48700: NEG
48701: PPUSH
48702: CALL 37353 0 1
// ape := CreateHuman ;
48706: LD_ADDR_VAR 0 10
48710: PUSH
48711: CALL_OW 44
48715: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48716: LD_ADDR_EXP 32
48720: PUSH
48721: LD_EXP 32
48725: PPUSH
48726: LD_VAR 0 8
48730: PPUSH
48731: LD_EXP 32
48735: PUSH
48736: LD_VAR 0 8
48740: ARRAY
48741: PPUSH
48742: LD_VAR 0 10
48746: PPUSH
48747: CALL 41226 0 2
48751: PPUSH
48752: CALL_OW 1
48756: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48757: LD_VAR 0 10
48761: PPUSH
48762: LD_EXP 31
48766: PUSH
48767: LD_VAR 0 8
48771: ARRAY
48772: PPUSH
48773: LD_INT 0
48775: PPUSH
48776: CALL_OW 49
// end ;
48780: GO 48695
48782: POP
48783: POP
// end ; end ;
48784: GO 47326
48786: POP
48787: POP
// if not mpTeamGame then
48788: LD_EXP 11
48792: NOT
48793: IFFALSE 48891
// begin for i := 1 to 8 do
48795: LD_ADDR_VAR 0 2
48799: PUSH
48800: DOUBLE
48801: LD_INT 1
48803: DEC
48804: ST_TO_ADDR
48805: LD_INT 8
48807: PUSH
48808: FOR_TO
48809: IFFALSE 48887
// for j := 1 to 8 do
48811: LD_ADDR_VAR 0 3
48815: PUSH
48816: DOUBLE
48817: LD_INT 1
48819: DEC
48820: ST_TO_ADDR
48821: LD_INT 8
48823: PUSH
48824: FOR_TO
48825: IFFALSE 48883
// if i <> j then
48827: LD_VAR 0 2
48831: PUSH
48832: LD_VAR 0 3
48836: NONEQUAL
48837: IFFALSE 48861
// SetAttitude ( i , j , att_neutral , true ) else
48839: LD_VAR 0 2
48843: PPUSH
48844: LD_VAR 0 3
48848: PPUSH
48849: LD_INT 0
48851: PPUSH
48852: LD_INT 1
48854: PPUSH
48855: CALL_OW 80
48859: GO 48881
// SetAttitude ( i , j , att_friend , true ) ;
48861: LD_VAR 0 2
48865: PPUSH
48866: LD_VAR 0 3
48870: PPUSH
48871: LD_INT 1
48873: PPUSH
48874: LD_INT 1
48876: PPUSH
48877: CALL_OW 80
48881: GO 48824
48883: POP
48884: POP
48885: GO 48808
48887: POP
48888: POP
// end else
48889: GO 49066
// begin if mpSharedVision then
48891: LD_EXP 16
48895: IFFALSE 48960
// begin for i in mpTeams do
48897: LD_ADDR_VAR 0 2
48901: PUSH
48902: LD_EXP 10
48906: PUSH
48907: FOR_IN
48908: IFFALSE 48958
// for j := 2 to i do
48910: LD_ADDR_VAR 0 3
48914: PUSH
48915: DOUBLE
48916: LD_INT 2
48918: DEC
48919: ST_TO_ADDR
48920: LD_VAR 0 2
48924: PUSH
48925: FOR_TO
48926: IFFALSE 48954
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48928: LD_VAR 0 2
48932: PUSH
48933: LD_VAR 0 3
48937: ARRAY
48938: PPUSH
48939: LD_VAR 0 2
48943: PUSH
48944: LD_INT 1
48946: ARRAY
48947: PPUSH
48948: CALL_OW 343
48952: GO 48925
48954: POP
48955: POP
48956: GO 48907
48958: POP
48959: POP
// end ; for i := 1 to 8 do
48960: LD_ADDR_VAR 0 2
48964: PUSH
48965: DOUBLE
48966: LD_INT 1
48968: DEC
48969: ST_TO_ADDR
48970: LD_INT 8
48972: PUSH
48973: FOR_TO
48974: IFFALSE 49064
// for j := 1 to 8 do
48976: LD_ADDR_VAR 0 3
48980: PUSH
48981: DOUBLE
48982: LD_INT 1
48984: DEC
48985: ST_TO_ADDR
48986: LD_INT 8
48988: PUSH
48989: FOR_TO
48990: IFFALSE 49060
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48992: LD_EXP 8
48996: PUSH
48997: LD_VAR 0 2
49001: ARRAY
49002: PUSH
49003: LD_EXP 8
49007: PUSH
49008: LD_VAR 0 3
49012: ARRAY
49013: EQUAL
49014: IFFALSE 49038
// SetAttitude ( i , j , att_friend , true ) else
49016: LD_VAR 0 2
49020: PPUSH
49021: LD_VAR 0 3
49025: PPUSH
49026: LD_INT 1
49028: PPUSH
49029: LD_INT 1
49031: PPUSH
49032: CALL_OW 80
49036: GO 49058
// SetAttitude ( i , j , att_enemy , true ) ;
49038: LD_VAR 0 2
49042: PPUSH
49043: LD_VAR 0 3
49047: PPUSH
49048: LD_INT 2
49050: PPUSH
49051: LD_INT 1
49053: PPUSH
49054: CALL_OW 80
49058: GO 48989
49060: POP
49061: POP
49062: GO 48973
49064: POP
49065: POP
// end ; music_nat := mpSideNations [ your_side ] ;
49066: LD_ADDR_OWVAR 71
49070: PUSH
49071: LD_EXP 9
49075: PUSH
49076: LD_OWVAR 2
49080: ARRAY
49081: ST_TO_ADDR
// if IAmSpec then
49082: CALL_OW 531
49086: IFFALSE 49127
// begin FogOff ( true ) ;
49088: LD_INT 1
49090: PPUSH
49091: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49095: LD_EXP 29
49099: PUSH
49100: LD_INT 1
49102: ARRAY
49103: PUSH
49104: LD_INT 2
49106: DIV
49107: PPUSH
49108: LD_EXP 29
49112: PUSH
49113: LD_INT 2
49115: ARRAY
49116: PUSH
49117: LD_INT 2
49119: DIV
49120: PPUSH
49121: CALL_OW 86
// end else
49125: GO 49173
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49127: LD_EXP 21
49131: PUSH
49132: LD_EXP 7
49136: PUSH
49137: LD_OWVAR 2
49141: ARRAY
49142: ARRAY
49143: PUSH
49144: LD_INT 1
49146: ARRAY
49147: PPUSH
49148: LD_EXP 21
49152: PUSH
49153: LD_EXP 7
49157: PUSH
49158: LD_OWVAR 2
49162: ARRAY
49163: ARRAY
49164: PUSH
49165: LD_INT 2
49167: ARRAY
49168: PPUSH
49169: CALL_OW 86
// end ; BeginBuildUp ;
49173: CALL 50276 0 0
// enable ( mpActive ) ;
49177: LD_INT 100
49179: ENABLE_MARKED
// enable ( mpGameType ) ;
49180: LD_EXP 3
49184: ENABLE_MARKED
// mpGameActive := true ;
49185: LD_ADDR_EXP 39
49189: PUSH
49190: LD_INT 1
49192: ST_TO_ADDR
// end ;
49193: LD_VAR 0 1
49197: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
49198: LD_INT 0
49200: PPUSH
49201: PPUSH
49202: PPUSH
49203: PPUSH
49204: PPUSH
// result := [ ] ;
49205: LD_ADDR_VAR 0 5
49209: PUSH
49210: EMPTY
49211: ST_TO_ADDR
// class := class_soldier ;
49212: LD_ADDR_VAR 0 8
49216: PUSH
49217: LD_INT 1
49219: ST_TO_ADDR
// uc_side := side ;
49220: LD_ADDR_OWVAR 20
49224: PUSH
49225: LD_VAR 0 1
49229: ST_TO_ADDR
// uc_nation := nation ;
49230: LD_ADDR_OWVAR 21
49234: PUSH
49235: LD_VAR 0 2
49239: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49240: LD_ADDR_OWVAR 26
49244: PUSH
49245: LD_OWVAR 19
49249: PUSH
49250: LD_VAR 0 1
49254: ARRAY
49255: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49256: LD_INT 1
49258: PPUSH
49259: LD_INT 2
49261: PPUSH
49262: CALL_OW 12
49266: PPUSH
49267: LD_VAR 0 8
49271: PPUSH
49272: LD_VAR 0 4
49276: PUSH
49277: LD_INT 2
49279: PLUS
49280: PPUSH
49281: CALL_OW 380
// hc_importance := 105 ;
49285: LD_ADDR_OWVAR 32
49289: PUSH
49290: LD_INT 105
49292: ST_TO_ADDR
// if Multiplayer then
49293: LD_OWVAR 4
49297: IFFALSE 49337
// begin hc_gallery := MULTIAVATARS ;
49299: LD_ADDR_OWVAR 33
49303: PUSH
49304: LD_STRING MULTIAVATARS
49306: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49307: LD_ADDR_OWVAR 34
49311: PUSH
49312: LD_VAR 0 1
49316: PPUSH
49317: CALL_OW 525
49321: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49322: LD_ADDR_OWVAR 27
49326: PUSH
49327: LD_VAR 0 1
49331: PPUSH
49332: CALL_OW 526
49336: ST_TO_ADDR
// end ; commander := CreateHuman ;
49337: LD_ADDR_VAR 0 9
49341: PUSH
49342: CALL_OW 44
49346: ST_TO_ADDR
// result := Join ( result , commander ) ;
49347: LD_ADDR_VAR 0 5
49351: PUSH
49352: LD_VAR 0 5
49356: PPUSH
49357: LD_VAR 0 9
49361: PPUSH
49362: CALL 41226 0 2
49366: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
49367: LD_ADDR_EXP 41
49371: PUSH
49372: LD_EXP 41
49376: PPUSH
49377: LD_VAR 0 1
49381: PPUSH
49382: LD_VAR 0 9
49386: PPUSH
49387: CALL_OW 1
49391: ST_TO_ADDR
// if mpTeamPreset then
49392: LD_LOC 1
49396: IFFALSE 49492
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49398: LD_LOC 1
49402: PUSH
49403: LD_INT 1
49405: ARRAY
49406: PPUSH
49407: LD_VAR 0 5
49411: PUSH
49412: LD_VAR 0 5
49416: ARRAY
49417: PPUSH
49418: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49422: LD_VAR 0 5
49426: PUSH
49427: LD_VAR 0 5
49431: ARRAY
49432: PPUSH
49433: LD_INT 1
49435: PPUSH
49436: LD_LOC 1
49440: PUSH
49441: LD_INT 1
49443: ARRAY
49444: PPUSH
49445: LD_INT 1
49447: PPUSH
49448: CALL_OW 260
49452: PPUSH
49453: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49457: LD_VAR 0 5
49461: PUSH
49462: LD_VAR 0 5
49466: ARRAY
49467: PPUSH
49468: LD_INT 2
49470: PPUSH
49471: LD_LOC 1
49475: PUSH
49476: LD_INT 1
49478: ARRAY
49479: PPUSH
49480: LD_INT 2
49482: PPUSH
49483: CALL_OW 260
49487: PPUSH
49488: CALL_OW 239
// end ; InitHc_All ( ) ;
49492: CALL_OW 584
// class := 2 ;
49496: LD_ADDR_VAR 0 8
49500: PUSH
49501: LD_INT 2
49503: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49504: LD_ADDR_VAR 0 6
49508: PUSH
49509: DOUBLE
49510: LD_INT 1
49512: DEC
49513: ST_TO_ADDR
49514: LD_VAR 0 3
49518: PUSH
49519: LD_INT 1
49521: MINUS
49522: PUSH
49523: FOR_TO
49524: IFFALSE 49719
// begin PrepareHuman ( false , class , skill ) ;
49526: LD_INT 0
49528: PPUSH
49529: LD_VAR 0 8
49533: PPUSH
49534: LD_VAR 0 4
49538: PPUSH
49539: CALL_OW 380
// un := CreateHuman ;
49543: LD_ADDR_VAR 0 7
49547: PUSH
49548: CALL_OW 44
49552: ST_TO_ADDR
// result := Join ( result , un ) ;
49553: LD_ADDR_VAR 0 5
49557: PUSH
49558: LD_VAR 0 5
49562: PPUSH
49563: LD_VAR 0 7
49567: PPUSH
49568: CALL 41226 0 2
49572: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49573: LD_LOC 1
49577: PPUSH
49578: CALL 5250 0 1
49582: PUSH
49583: LD_VAR 0 3
49587: GREATEREQUAL
49588: IFFALSE 49684
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49590: LD_LOC 1
49594: PUSH
49595: LD_VAR 0 6
49599: PUSH
49600: LD_INT 1
49602: PLUS
49603: ARRAY
49604: PPUSH
49605: LD_VAR 0 7
49609: PPUSH
49610: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49614: LD_VAR 0 7
49618: PPUSH
49619: LD_INT 1
49621: PPUSH
49622: LD_LOC 1
49626: PUSH
49627: LD_VAR 0 6
49631: PUSH
49632: LD_INT 1
49634: PLUS
49635: ARRAY
49636: PPUSH
49637: LD_INT 1
49639: PPUSH
49640: CALL_OW 260
49644: PPUSH
49645: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49649: LD_VAR 0 7
49653: PPUSH
49654: LD_INT 2
49656: PPUSH
49657: LD_LOC 1
49661: PUSH
49662: LD_VAR 0 6
49666: PUSH
49667: LD_INT 1
49669: PLUS
49670: ARRAY
49671: PPUSH
49672: LD_INT 2
49674: PPUSH
49675: CALL_OW 260
49679: PPUSH
49680: CALL_OW 239
// end ; class := Inc ( class ) ;
49684: LD_ADDR_VAR 0 8
49688: PUSH
49689: LD_VAR 0 8
49693: PPUSH
49694: CALL 42599 0 1
49698: ST_TO_ADDR
// if class = 5 then
49699: LD_VAR 0 8
49703: PUSH
49704: LD_INT 5
49706: EQUAL
49707: IFFALSE 49717
// class := 1 ;
49709: LD_ADDR_VAR 0 8
49713: PUSH
49714: LD_INT 1
49716: ST_TO_ADDR
// end ;
49717: GO 49523
49719: POP
49720: POP
// if not mpTeamPreset then
49721: LD_LOC 1
49725: NOT
49726: IFFALSE 49738
// mpTeamPreset := result ;
49728: LD_ADDR_LOC 1
49732: PUSH
49733: LD_VAR 0 5
49737: ST_TO_ADDR
// end ;
49738: LD_VAR 0 5
49742: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49743: LD_INT 0
49745: PPUSH
49746: PPUSH
// result := [ ] ;
49747: LD_ADDR_VAR 0 4
49751: PUSH
49752: EMPTY
49753: ST_TO_ADDR
// if not vehicles then
49754: LD_VAR 0 3
49758: NOT
49759: IFFALSE 49763
// exit ;
49761: GO 49977
// for i := 1 to vehicles [ nation ] do
49763: LD_ADDR_VAR 0 5
49767: PUSH
49768: DOUBLE
49769: LD_INT 1
49771: DEC
49772: ST_TO_ADDR
49773: LD_VAR 0 3
49777: PUSH
49778: LD_VAR 0 2
49782: ARRAY
49783: PUSH
49784: FOR_TO
49785: IFFALSE 49975
// begin uc_side := side ;
49787: LD_ADDR_OWVAR 20
49791: PUSH
49792: LD_VAR 0 1
49796: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49797: LD_VAR 0 3
49801: PUSH
49802: LD_VAR 0 2
49806: ARRAY
49807: PUSH
49808: LD_VAR 0 5
49812: ARRAY
49813: PPUSH
49814: CALL 5250 0 1
49818: PUSH
49819: LD_INT 4
49821: GREATER
49822: IFFALSE 49852
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49824: LD_ADDR_OWVAR 21
49828: PUSH
49829: LD_VAR 0 3
49833: PUSH
49834: LD_VAR 0 2
49838: ARRAY
49839: PUSH
49840: LD_VAR 0 5
49844: ARRAY
49845: PUSH
49846: LD_INT 5
49848: ARRAY
49849: ST_TO_ADDR
49850: GO 49862
// uc_nation := nation ;
49852: LD_ADDR_OWVAR 21
49856: PUSH
49857: LD_VAR 0 2
49861: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49862: LD_VAR 0 3
49866: PUSH
49867: LD_VAR 0 2
49871: ARRAY
49872: PUSH
49873: LD_VAR 0 5
49877: ARRAY
49878: PUSH
49879: LD_INT 1
49881: ARRAY
49882: PPUSH
49883: LD_VAR 0 3
49887: PUSH
49888: LD_VAR 0 2
49892: ARRAY
49893: PUSH
49894: LD_VAR 0 5
49898: ARRAY
49899: PUSH
49900: LD_INT 2
49902: ARRAY
49903: PPUSH
49904: LD_VAR 0 3
49908: PUSH
49909: LD_VAR 0 2
49913: ARRAY
49914: PUSH
49915: LD_VAR 0 5
49919: ARRAY
49920: PUSH
49921: LD_INT 3
49923: ARRAY
49924: PPUSH
49925: LD_VAR 0 3
49929: PUSH
49930: LD_VAR 0 2
49934: ARRAY
49935: PUSH
49936: LD_VAR 0 5
49940: ARRAY
49941: PUSH
49942: LD_INT 4
49944: ARRAY
49945: PPUSH
49946: LD_INT 80
49948: PPUSH
49949: CALL 8046 0 5
// result := Join ( result , CreateVehicle ) ;
49953: LD_ADDR_VAR 0 4
49957: PUSH
49958: LD_VAR 0 4
49962: PPUSH
49963: CALL_OW 45
49967: PPUSH
49968: CALL 41226 0 2
49972: ST_TO_ADDR
// end ;
49973: GO 49784
49975: POP
49976: POP
// end ;
49977: LD_VAR 0 4
49981: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49982: LD_INT 0
49984: PPUSH
49985: PPUSH
// for i in mpBattleFlags do
49986: LD_ADDR_VAR 0 3
49990: PUSH
49991: LD_EXP 23
49995: PUSH
49996: FOR_IN
49997: IFFALSE 50074
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49999: LD_VAR 0 3
50003: PPUSH
50004: LD_INT 1
50006: PUSH
50007: LD_VAR 0 1
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_VAR 0 1
50023: PUSH
50024: LD_REAL  7.00000000000000E-0001
50027: MUL
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: PUSH
50036: LD_VAR 0 1
50040: PUSH
50041: LD_REAL  4.00000000000000E-0001
50044: MUL
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 20
50052: PUSH
50053: LD_VAR 0 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: PPUSH
50068: CALL_OW 423
50072: GO 49996
50074: POP
50075: POP
// end ;
50076: LD_VAR 0 2
50080: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50081: LD_INT 100
50083: IFFALSE 50178
50085: GO 50087
50087: DISABLE
50088: LD_INT 0
50090: PPUSH
50091: PPUSH
// begin if mpBattleFlag <= 0 then
50092: LD_EXP 22
50096: PUSH
50097: LD_INT 0
50099: LESSEQUAL
50100: IFFALSE 50104
// exit ;
50102: GO 50178
// strength := 100 ;
50104: LD_ADDR_VAR 0 2
50108: PUSH
50109: LD_INT 100
50111: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50112: LD_EXP 22
50116: PPUSH
50117: CALL_OW 67
// strength := Dec ( strength ) ;
50121: LD_ADDR_VAR 0 2
50125: PUSH
50126: LD_VAR 0 2
50130: PPUSH
50131: CALL 42621 0 1
50135: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50136: LD_VAR 0 2
50140: PPUSH
50141: CALL 49982 0 1
// until not strength ;
50145: LD_VAR 0 2
50149: NOT
50150: IFFALSE 50112
// for i in mpBattleFlags do
50152: LD_ADDR_VAR 0 1
50156: PUSH
50157: LD_EXP 23
50161: PUSH
50162: FOR_IN
50163: IFFALSE 50176
// KillBattleFlag ( i ) ;
50165: LD_VAR 0 1
50169: PPUSH
50170: CALL_OW 419
50174: GO 50162
50176: POP
50177: POP
// end ;
50178: PPOPN 2
50180: END
// every 0 0$1 marked mpActive do var side , tmp ;
50181: GO 50183
50183: DISABLE
50184: LD_INT 0
50186: PPUSH
50187: PPUSH
// begin if mpSibBomb <= 1 then
50188: LD_EXP 28
50192: PUSH
50193: LD_INT 1
50195: LESSEQUAL
50196: IFFALSE 50200
// exit ;
50198: GO 50273
// tmp := mpSibBomb ;
50200: LD_ADDR_VAR 0 2
50204: PUSH
50205: LD_EXP 28
50209: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50210: LD_INT 35
50212: PPUSH
50213: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50217: LD_ADDR_VAR 0 2
50221: PUSH
50222: LD_VAR 0 2
50226: PUSH
50227: LD_INT 35
50229: MINUS
50230: ST_TO_ADDR
// until not tmp ;
50231: LD_VAR 0 2
50235: NOT
50236: IFFALSE 50210
// for side := 1 to 8 do
50238: LD_ADDR_VAR 0 1
50242: PUSH
50243: DOUBLE
50244: LD_INT 1
50246: DEC
50247: ST_TO_ADDR
50248: LD_INT 8
50250: PUSH
50251: FOR_TO
50252: IFFALSE 50271
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50254: LD_INT 25
50256: PPUSH
50257: LD_VAR 0 1
50261: PPUSH
50262: LD_INT 1
50264: PPUSH
50265: CALL_OW 322
50269: GO 50251
50271: POP
50272: POP
// end ;
50273: PPOPN 2
50275: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50276: LD_INT 0
50278: PPUSH
50279: PPUSH
50280: PPUSH
// mpBuildUpTimeDelay := 0 ;
50281: LD_ADDR_EXP 48
50285: PUSH
50286: LD_INT 0
50288: ST_TO_ADDR
// if not mpBuildUpTime then
50289: LD_EXP 20
50293: NOT
50294: IFFALSE 50298
// exit ;
50296: GO 50487
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50298: LD_ADDR_EXP 48
50302: PUSH
50303: LD_INT 8400
50305: PUSH
50306: LD_INT 2100
50308: PUSH
50309: LD_EXP 20
50313: MUL
50314: PLUS
50315: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50316: LD_ADDR_EXP 49
50320: PUSH
50321: LD_INT 1
50323: ST_TO_ADDR
// for i := 1 to 8 do
50324: LD_ADDR_VAR 0 2
50328: PUSH
50329: DOUBLE
50330: LD_INT 1
50332: DEC
50333: ST_TO_ADDR
50334: LD_INT 8
50336: PUSH
50337: FOR_TO
50338: IFFALSE 50485
// if mpSidePositions [ i ] then
50340: LD_EXP 7
50344: PUSH
50345: LD_VAR 0 2
50349: ARRAY
50350: IFFALSE 50483
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50352: LD_EXP 19
50356: PUSH
50357: LD_EXP 7
50361: PUSH
50362: LD_VAR 0 2
50366: ARRAY
50367: ARRAY
50368: PPUSH
50369: LD_INT 5
50371: PPUSH
50372: CALL_OW 424
// for j := 1 to 8 do
50376: LD_ADDR_VAR 0 3
50380: PUSH
50381: DOUBLE
50382: LD_INT 1
50384: DEC
50385: ST_TO_ADDR
50386: LD_INT 8
50388: PUSH
50389: FOR_TO
50390: IFFALSE 50481
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50392: LD_EXP 7
50396: PUSH
50397: LD_VAR 0 3
50401: ARRAY
50402: IFFALSE 50451
50404: PUSH
50405: LD_EXP 8
50409: PUSH
50410: LD_VAR 0 2
50414: ARRAY
50415: PUSH
50416: LD_EXP 8
50420: PUSH
50421: LD_VAR 0 3
50425: ARRAY
50426: NONEQUAL
50427: IFTRUE 50450
50429: PUSH
50430: LD_EXP 11
50434: NOT
50435: IFFALSE 50449
50437: PUSH
50438: LD_VAR 0 2
50442: PUSH
50443: LD_VAR 0 3
50447: NONEQUAL
50448: AND
50449: OR
50450: AND
50451: IFFALSE 50479
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50453: LD_VAR 0 3
50457: PPUSH
50458: LD_EXP 19
50462: PUSH
50463: LD_EXP 7
50467: PUSH
50468: LD_VAR 0 2
50472: ARRAY
50473: ARRAY
50474: PPUSH
50475: CALL_OW 333
50479: GO 50389
50481: POP
50482: POP
// end ;
50483: GO 50337
50485: POP
50486: POP
// end ;
50487: LD_VAR 0 1
50491: RET
// function EndBuildUp ; var i , j ; begin
50492: LD_INT 0
50494: PPUSH
50495: PPUSH
50496: PPUSH
// mpBuildUpTimeActive := false ;
50497: LD_ADDR_EXP 49
50501: PUSH
50502: LD_INT 0
50504: ST_TO_ADDR
// for i := 1 to 8 do
50505: LD_ADDR_VAR 0 2
50509: PUSH
50510: DOUBLE
50511: LD_INT 1
50513: DEC
50514: ST_TO_ADDR
50515: LD_INT 8
50517: PUSH
50518: FOR_TO
50519: IFFALSE 50666
// if mpSidePositions [ i ] then
50521: LD_EXP 7
50525: PUSH
50526: LD_VAR 0 2
50530: ARRAY
50531: IFFALSE 50664
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50533: LD_EXP 19
50537: PUSH
50538: LD_EXP 7
50542: PUSH
50543: LD_VAR 0 2
50547: ARRAY
50548: ARRAY
50549: PPUSH
50550: LD_INT 0
50552: PPUSH
50553: CALL_OW 424
// for j := 1 to 8 do
50557: LD_ADDR_VAR 0 3
50561: PUSH
50562: DOUBLE
50563: LD_INT 1
50565: DEC
50566: ST_TO_ADDR
50567: LD_INT 8
50569: PUSH
50570: FOR_TO
50571: IFFALSE 50662
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50573: LD_EXP 7
50577: PUSH
50578: LD_VAR 0 3
50582: ARRAY
50583: IFFALSE 50632
50585: PUSH
50586: LD_EXP 8
50590: PUSH
50591: LD_VAR 0 2
50595: ARRAY
50596: PUSH
50597: LD_EXP 8
50601: PUSH
50602: LD_VAR 0 3
50606: ARRAY
50607: NONEQUAL
50608: IFTRUE 50631
50610: PUSH
50611: LD_EXP 11
50615: NOT
50616: IFFALSE 50630
50618: PUSH
50619: LD_VAR 0 2
50623: PUSH
50624: LD_VAR 0 3
50628: NONEQUAL
50629: AND
50630: OR
50631: AND
50632: IFFALSE 50660
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50634: LD_VAR 0 3
50638: PPUSH
50639: LD_EXP 19
50643: PUSH
50644: LD_EXP 7
50648: PUSH
50649: LD_VAR 0 2
50653: ARRAY
50654: ARRAY
50655: PPUSH
50656: CALL_OW 334
50660: GO 50570
50662: POP
50663: POP
// end ;
50664: GO 50518
50666: POP
50667: POP
// end ;
50668: LD_VAR 0 1
50672: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50673: LD_EXP 49
50677: IFFALSE 50856
50679: GO 50681
50681: DISABLE
50682: LD_INT 0
50684: PPUSH
50685: PPUSH
// begin for i := 1 to 8 do
50686: LD_ADDR_VAR 0 1
50690: PUSH
50691: DOUBLE
50692: LD_INT 1
50694: DEC
50695: ST_TO_ADDR
50696: LD_INT 8
50698: PUSH
50699: FOR_TO
50700: IFFALSE 50853
// if mpSidePositions [ i ] then
50702: LD_EXP 7
50706: PUSH
50707: LD_VAR 0 1
50711: ARRAY
50712: IFFALSE 50851
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50714: LD_ADDR_VAR 0 2
50718: PUSH
50719: LD_EXP 19
50723: PUSH
50724: LD_EXP 7
50728: PUSH
50729: LD_VAR 0 1
50733: ARRAY
50734: ARRAY
50735: PPUSH
50736: LD_INT 2
50738: PUSH
50739: LD_INT 21
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 21
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 22
50766: PUSH
50767: LD_OWVAR 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PPUSH
50780: CALL_OW 70
50784: PUSH
50785: FOR_IN
50786: IFFALSE 50849
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50788: LD_EXP 8
50792: PUSH
50793: LD_VAR 0 1
50797: ARRAY
50798: PUSH
50799: LD_EXP 8
50803: PUSH
50804: LD_OWVAR 2
50808: ARRAY
50809: NONEQUAL
50810: IFTRUE 50833
50812: PUSH
50813: LD_EXP 11
50817: NOT
50818: IFFALSE 50832
50820: PUSH
50821: LD_VAR 0 1
50825: PUSH
50826: LD_OWVAR 2
50830: NONEQUAL
50831: AND
50832: OR
50833: IFFALSE 50847
// ComMoveToArea ( un , BuildUpEscape ) ;
50835: LD_VAR 0 2
50839: PPUSH
50840: LD_INT 72
50842: PPUSH
50843: CALL_OW 113
50847: GO 50785
50849: POP
50850: POP
50851: GO 50699
50853: POP
50854: POP
// enable ;
50855: ENABLE
// end ;
50856: PPOPN 2
50858: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50859: LD_EXP 20
50863: IFFALSE 50913
50865: GO 50867
50867: DISABLE
50868: LD_INT 0
50870: PPUSH
// begin tmp := mpBuildUpTime ;
50871: LD_ADDR_VAR 0 1
50875: PUSH
50876: LD_EXP 20
50880: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50881: LD_INT 35
50883: PPUSH
50884: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50888: LD_ADDR_VAR 0 1
50892: PUSH
50893: LD_VAR 0 1
50897: PUSH
50898: LD_INT 35
50900: MINUS
50901: ST_TO_ADDR
// until not tmp ;
50902: LD_VAR 0 1
50906: NOT
50907: IFFALSE 50881
// EndBuildUp ;
50909: CALL 50492 0 0
// end ;
50913: PPOPN 1
50915: END
// every 0 0$1 trigger mpActive marked mpWin do
50916: LD_INT 100
50918: IFFALSE 50952
50920: GO 50922
50922: DISABLE
// begin if IAmServer then
50923: CALL_OW 518
50927: IFFALSE 50936
// wait ( 0 0$3 ) ;
50929: LD_INT 105
50931: PPUSH
50932: CALL_OW 67
// if Multiplayer then
50936: LD_OWVAR 4
50940: IFFALSE 50948
// YouWinInMultiplayer else
50942: CALL_OW 106
50946: GO 50952
// YouWin ;
50948: CALL_OW 103
// end ;
50952: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50953: LD_INT 0
50955: PPUSH
// result := false ;
50956: LD_ADDR_VAR 0 3
50960: PUSH
50961: LD_INT 0
50963: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50964: LD_VAR 0 1
50968: PUSH
50969: LD_INT 1
50971: DOUBLE
50972: EQUAL
50973: IFTRUE 50995
50975: LD_INT 5
50977: DOUBLE
50978: EQUAL
50979: IFTRUE 50995
50981: LD_INT 6
50983: DOUBLE
50984: EQUAL
50985: IFTRUE 50995
50987: LD_INT 7
50989: DOUBLE
50990: EQUAL
50991: IFTRUE 50995
50993: GO 51068
50995: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50996: LD_ADDR_VAR 0 3
51000: PUSH
51001: LD_INT 22
51003: PUSH
51004: LD_VAR 0 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 21
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 33
51028: PUSH
51029: LD_INT 3
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 33
51038: PUSH
51039: LD_INT 5
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PPUSH
51056: CALL_OW 69
51060: PPUSH
51061: CALL 5250 0 1
51065: ST_TO_ADDR
// end ; GameTypeSurvival :
51066: GO 51464
51068: LD_INT 2
51070: DOUBLE
51071: EQUAL
51072: IFTRUE 51076
51074: GO 51206
51076: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51077: LD_ADDR_VAR 0 3
51081: PUSH
51082: LD_INT 22
51084: PUSH
51085: LD_VAR 0 2
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: LD_INT 30
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 30
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PPUSH
51126: CALL_OW 69
51130: PPUSH
51131: CALL 5250 0 1
51135: IFFALSE 51203
51137: PUSH
51138: LD_INT 22
51140: PUSH
51141: LD_VAR 0 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 21
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 33
51165: PUSH
51166: LD_INT 3
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 33
51175: PUSH
51176: LD_INT 5
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PPUSH
51193: CALL_OW 69
51197: PPUSH
51198: CALL 5250 0 1
51202: AND
51203: ST_TO_ADDR
// end ; GameTypeSurvivalH :
51204: GO 51464
51206: LD_INT 8
51208: DOUBLE
51209: EQUAL
51210: IFTRUE 51214
51212: GO 51363
51214: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51215: LD_ADDR_VAR 0 3
51219: PUSH
51220: LD_EXP 41
51224: PUSH
51225: LD_VAR 0 2
51229: ARRAY
51230: PPUSH
51231: CALL_OW 300
51235: IFFALSE 51292
51237: PUSH
51238: LD_INT 22
51240: PUSH
51241: LD_VAR 0 2
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: LD_INT 30
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 30
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PPUSH
51282: CALL_OW 69
51286: PPUSH
51287: CALL 5250 0 1
51291: AND
51292: IFFALSE 51360
51294: PUSH
51295: LD_INT 22
51297: PUSH
51298: LD_VAR 0 2
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: LD_INT 21
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 33
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 33
51332: PUSH
51333: LD_INT 5
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PPUSH
51350: CALL_OW 69
51354: PPUSH
51355: CALL 5250 0 1
51359: AND
51360: ST_TO_ADDR
// end ; GameTypeKing :
51361: GO 51464
51363: LD_INT 3
51365: DOUBLE
51366: EQUAL
51367: IFTRUE 51371
51369: GO 51463
51371: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51372: LD_ADDR_VAR 0 3
51376: PUSH
51377: LD_INT 22
51379: PUSH
51380: LD_VAR 0 2
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: LD_INT 21
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 33
51404: PUSH
51405: LD_INT 3
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 33
51414: PUSH
51415: LD_INT 5
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PPUSH
51432: CALL_OW 69
51436: PPUSH
51437: CALL 5250 0 1
51441: IFFALSE 51460
51443: PUSH
51444: LD_VAR 0 2
51448: PPUSH
51449: CALL 56137 0 1
51453: PUSH
51454: LD_EXP 35
51458: LESS
51459: AND
51460: ST_TO_ADDR
// end ; end ;
51461: GO 51464
51463: POP
// end ;
51464: LD_VAR 0 3
51468: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51469: LD_INT 100
51471: IFFALSE 51701
51473: GO 51475
51475: DISABLE
51476: LD_INT 0
51478: PPUSH
51479: PPUSH
// begin if Multiplayer then
51480: LD_OWVAR 4
51484: IFFALSE 51492
// SetPlayerSpectator ( ) else
51486: CALL_OW 572
51490: GO 51501
// FogOff ( your_side ) ;
51492: LD_OWVAR 2
51496: PPUSH
51497: CALL_OW 344
// repeat gameIsOn := false ;
51501: LD_ADDR_VAR 0 1
51505: PUSH
51506: LD_INT 0
51508: ST_TO_ADDR
// for i := 1 to 8 do
51509: LD_ADDR_VAR 0 2
51513: PUSH
51514: DOUBLE
51515: LD_INT 1
51517: DEC
51518: ST_TO_ADDR
51519: LD_INT 8
51521: PUSH
51522: FOR_TO
51523: IFFALSE 51653
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51525: LD_EXP 7
51529: PUSH
51530: LD_VAR 0 2
51534: ARRAY
51535: IFFALSE 51548
51537: PUSH
51538: LD_VAR 0 2
51542: PPUSH
51543: CALL_OW 108
51547: AND
51548: IFFALSE 51562
51550: PUSH
51551: LD_VAR 0 2
51555: PUSH
51556: LD_OWVAR 2
51560: NONEQUAL
51561: AND
51562: IFFALSE 51651
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51564: LD_EXP 8
51568: PUSH
51569: LD_VAR 0 2
51573: ARRAY
51574: NOT
51575: IFTRUE 51623
51577: PUSH
51578: LD_EXP 8
51582: PUSH
51583: LD_VAR 0 2
51587: ARRAY
51588: PUSH
51589: LD_EXP 8
51593: PUSH
51594: LD_OWVAR 2
51598: ARRAY
51599: NONEQUAL
51600: IFFALSE 51622
51602: PUSH
51603: LD_OWVAR 2
51607: PPUSH
51608: LD_VAR 0 2
51612: PPUSH
51613: CALL_OW 81
51617: PUSH
51618: LD_INT 1
51620: NONEQUAL
51621: AND
51622: OR
51623: IFFALSE 51651
// if HasPowerByGameType ( mpGameType , i ) then
51625: LD_EXP 3
51629: PPUSH
51630: LD_VAR 0 2
51634: PPUSH
51635: CALL 50953 0 2
51639: IFFALSE 51651
// begin gameIsOn := true ;
51641: LD_ADDR_VAR 0 1
51645: PUSH
51646: LD_INT 1
51648: ST_TO_ADDR
// break ;
51649: GO 51653
// end ;
51651: GO 51522
51653: POP
51654: POP
// wait ( 100 ) ;
51655: LD_INT 100
51657: PPUSH
51658: CALL_OW 67
// until not gameIsOn ;
51662: LD_VAR 0 1
51666: NOT
51667: IFFALSE 51501
// if IAmServer then
51669: CALL_OW 518
51673: IFFALSE 51682
// wait ( 0 0$3 ) ;
51675: LD_INT 105
51677: PPUSH
51678: CALL_OW 67
// if Multiplayer then
51682: LD_OWVAR 4
51686: IFFALSE 51694
// YouLostInMultiplayer else
51688: CALL_OW 107
51692: GO 51701
// YouLost (  ) ;
51694: LD_STRING 
51696: PPUSH
51697: CALL_OW 104
// end ;
51701: PPOPN 2
51703: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51704: LD_EXP 33
51708: IFFALSE 52092
51710: GO 51712
51712: DISABLE
51713: LD_INT 0
51715: PPUSH
51716: PPUSH
51717: PPUSH
51718: PPUSH
51719: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51720: LD_ADDR_VAR 0 5
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 4
51736: PUSH
51737: LD_INT 5
51739: PUSH
51740: LD_INT 6
51742: PUSH
51743: LD_INT 7
51745: PUSH
51746: LD_INT 8
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51759: LD_INT 350
51761: PPUSH
51762: CALL_OW 67
// for i := 1 to 8 do
51766: LD_ADDR_VAR 0 1
51770: PUSH
51771: DOUBLE
51772: LD_INT 1
51774: DEC
51775: ST_TO_ADDR
51776: LD_INT 8
51778: PUSH
51779: FOR_TO
51780: IFFALSE 52062
// begin j := sides [ i ] ;
51782: LD_ADDR_VAR 0 2
51786: PUSH
51787: LD_VAR 0 5
51791: PUSH
51792: LD_VAR 0 1
51796: ARRAY
51797: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51798: LD_EXP 40
51802: PUSH
51803: LD_VAR 0 2
51807: ARRAY
51808: PPUSH
51809: CALL 5250 0 1
51813: IFFALSE 51826
51815: PUSH
51816: LD_VAR 0 2
51820: PPUSH
51821: CALL_OW 108
51825: AND
51826: IFFALSE 51844
51828: PUSH
51829: LD_EXP 3
51833: PPUSH
51834: LD_VAR 0 2
51838: PPUSH
51839: CALL 50953 0 2
51843: AND
51844: IFFALSE 52060
// begin wait ( mpRespawn div 2 ) ;
51846: LD_EXP 33
51850: PUSH
51851: LD_INT 2
51853: DIV
51854: PPUSH
51855: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51859: LD_ADDR_VAR 0 3
51863: PUSH
51864: LD_INT 22
51866: PUSH
51867: LD_VAR 0 2
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 50
51878: PUSH
51879: EMPTY
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 30
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 30
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: LIST
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: LIST
51914: PPUSH
51915: CALL_OW 69
51919: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51920: LD_VAR 0 3
51924: NOT
51925: IFTRUE 51939
51927: PUSH
51928: LD_VAR 0 2
51932: PPUSH
51933: CALL_OW 108
51937: NOT
51938: OR
51939: IFTRUE 51958
51941: PUSH
51942: LD_EXP 3
51946: PPUSH
51947: LD_VAR 0 2
51951: PPUSH
51952: CALL 50953 0 2
51956: NOT
51957: OR
51958: IFFALSE 51962
// continue ;
51960: GO 51779
// spawn := tmp [ 1 ] ;
51962: LD_ADDR_VAR 0 4
51966: PUSH
51967: LD_VAR 0 3
51971: PUSH
51972: LD_INT 1
51974: ARRAY
51975: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51976: LD_EXP 40
51980: PUSH
51981: LD_VAR 0 2
51985: ARRAY
51986: PUSH
51987: LD_INT 1
51989: ARRAY
51990: PPUSH
51991: LD_VAR 0 4
51995: PPUSH
51996: CALL_OW 250
52000: PPUSH
52001: LD_VAR 0 4
52005: PPUSH
52006: CALL_OW 251
52010: PPUSH
52011: LD_INT 32
52013: PPUSH
52014: LD_INT 1
52016: PPUSH
52017: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
52021: LD_ADDR_EXP 40
52025: PUSH
52026: LD_EXP 40
52030: PPUSH
52031: LD_VAR 0 2
52035: PPUSH
52036: LD_EXP 40
52040: PUSH
52041: LD_VAR 0 2
52045: ARRAY
52046: PPUSH
52047: LD_INT 1
52049: PPUSH
52050: CALL_OW 3
52054: PPUSH
52055: CALL_OW 1
52059: ST_TO_ADDR
// end ; end ;
52060: GO 51779
52062: POP
52063: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
52064: LD_ADDR_VAR 0 5
52068: PUSH
52069: LD_VAR 0 5
52073: PPUSH
52074: LD_INT 1
52076: PPUSH
52077: LD_INT 8
52079: PPUSH
52080: LD_INT 1
52082: PPUSH
52083: CALL 7576 0 4
52087: ST_TO_ADDR
// until false ;
52088: LD_INT 0
52090: IFFALSE 51759
// end ;
52092: PPOPN 5
52094: END
// every 0 0$1 marked mpActive do
52095: GO 52097
52097: DISABLE
// begin enable ;
52098: ENABLE
// if not mpDisplayStrings then
52099: LD_EXP 38
52103: NOT
52104: IFFALSE 52115
// begin display_strings := [ ] ;
52106: LD_ADDR_OWVAR 47
52110: PUSH
52111: EMPTY
52112: ST_TO_ADDR
// exit ;
52113: GO 52125
// end ; display_strings := mpDisplayStrings ;
52115: LD_ADDR_OWVAR 47
52119: PUSH
52120: LD_EXP 38
52124: ST_TO_ADDR
// end ; end_of_file
52125: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
52126: LD_INT 0
52128: PPUSH
52129: PPUSH
52130: PPUSH
52131: PPUSH
52132: PPUSH
52133: PPUSH
52134: PPUSH
52135: PPUSH
52136: PPUSH
// if GetType ( un ) = unit_vehicle then
52137: LD_VAR 0 1
52141: PPUSH
52142: CALL_OW 247
52146: PUSH
52147: LD_INT 2
52149: EQUAL
52150: IFFALSE 52154
// exit ;
52152: GO 52927
// side := GetSide ( un ) ;
52154: LD_ADDR_VAR 0 9
52158: PUSH
52159: LD_VAR 0 1
52163: PPUSH
52164: CALL_OW 255
52168: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
52169: LD_EXP 3
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 8
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: IN
52184: IFFALSE 52278
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52186: LD_VAR 0 1
52190: PPUSH
52191: CALL_OW 266
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: IN
52206: IFFALSE 52278
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52208: LD_ADDR_VAR 0 3
52212: PUSH
52213: LD_INT 22
52215: PUSH
52216: LD_VAR 0 9
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: LD_INT 21
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 33
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PPUSH
52257: CALL_OW 69
52261: PUSH
52262: FOR_IN
52263: IFFALSE 52276
// KillUnit ( i ) ;
52265: LD_VAR 0 3
52269: PPUSH
52270: CALL_OW 66
52274: GO 52262
52276: POP
52277: POP
// end ; if mpGameType = GameTypeSurvivalH then
52278: LD_EXP 3
52282: PUSH
52283: LD_INT 8
52285: EQUAL
52286: IFFALSE 52370
// if un in mpCommanders then
52288: LD_VAR 0 1
52292: PUSH
52293: LD_EXP 41
52297: IN
52298: IFFALSE 52370
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52300: LD_ADDR_VAR 0 3
52304: PUSH
52305: LD_INT 22
52307: PUSH
52308: LD_VAR 0 9
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 21
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 33
52332: PUSH
52333: LD_INT 3
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PPUSH
52349: CALL_OW 69
52353: PUSH
52354: FOR_IN
52355: IFFALSE 52368
// KillUnit ( i ) ;
52357: LD_VAR 0 3
52361: PPUSH
52362: CALL_OW 66
52366: GO 52354
52368: POP
52369: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52370: LD_VAR 0 1
52374: PPUSH
52375: CALL_OW 257
52379: PUSH
52380: LD_INT 12
52382: PUSH
52383: LD_INT 17
52385: PUSH
52386: LD_INT 15
52388: PUSH
52389: LD_INT 16
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: IN
52398: IFTRUE 52415
52400: PUSH
52401: LD_VAR 0 1
52405: PPUSH
52406: CALL_OW 263
52410: PUSH
52411: LD_INT 5
52413: EQUAL
52414: OR
52415: IFFALSE 52652
// begin tag := 0 ;
52417: LD_ADDR_VAR 0 5
52421: PUSH
52422: LD_INT 0
52424: ST_TO_ADDR
// for i := 1 to 8 do
52425: LD_ADDR_VAR 0 3
52429: PUSH
52430: DOUBLE
52431: LD_INT 1
52433: DEC
52434: ST_TO_ADDR
52435: LD_INT 8
52437: PUSH
52438: FOR_TO
52439: IFFALSE 52473
// if un in mpApePosIndex [ i ] then
52441: LD_VAR 0 1
52445: PUSH
52446: LD_EXP 32
52450: PUSH
52451: LD_VAR 0 3
52455: ARRAY
52456: IN
52457: IFFALSE 52471
// begin tag := i ;
52459: LD_ADDR_VAR 0 5
52463: PUSH
52464: LD_VAR 0 3
52468: ST_TO_ADDR
// break ;
52469: GO 52473
// end ;
52471: GO 52438
52473: POP
52474: POP
// if not tag then
52475: LD_VAR 0 5
52479: NOT
52480: IFFALSE 52484
// exit ;
52482: GO 52927
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52484: LD_ADDR_VAR 0 7
52488: PUSH
52489: LD_EXP 31
52493: PUSH
52494: LD_EXP 7
52498: PUSH
52499: LD_VAR 0 5
52503: ARRAY
52504: ARRAY
52505: ST_TO_ADDR
// if not area then
52506: LD_VAR 0 7
52510: NOT
52511: IFFALSE 52515
// exit ;
52513: GO 52927
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52515: LD_INT 14700
52517: PUSH
52518: LD_VAR 0 1
52522: PUSH
52523: LD_INT 5
52525: MOD
52526: PUSH
52527: LD_INT 1
52529: PLUS
52530: PUSH
52531: LD_INT 700
52533: MUL
52534: PLUS
52535: PPUSH
52536: CALL_OW 67
// repeat wait ( 10 ) ;
52540: LD_INT 10
52542: PPUSH
52543: CALL_OW 67
// until not mpBlockRespThread ;
52547: LD_EXP 47
52551: NOT
52552: IFFALSE 52540
// mpBlockRespThread := true ;
52554: LD_ADDR_EXP 47
52558: PUSH
52559: LD_INT 1
52561: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52562: LD_INT 0
52564: PPUSH
52565: CALL 37353 0 1
// ape := CreateHuman ;
52569: LD_ADDR_VAR 0 4
52573: PUSH
52574: CALL_OW 44
52578: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52579: LD_ADDR_EXP 32
52583: PUSH
52584: LD_EXP 32
52588: PPUSH
52589: LD_VAR 0 5
52593: PPUSH
52594: LD_EXP 32
52598: PUSH
52599: LD_VAR 0 5
52603: ARRAY
52604: PPUSH
52605: LD_VAR 0 4
52609: PPUSH
52610: CALL 41226 0 2
52614: PPUSH
52615: CALL_OW 1
52619: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52620: LD_VAR 0 4
52624: PPUSH
52625: LD_VAR 0 7
52629: PPUSH
52630: LD_INT 0
52632: PPUSH
52633: CALL_OW 49
// wait ( 10 ) ;
52637: LD_INT 10
52639: PPUSH
52640: CALL_OW 67
// mpBlockRespThread := false ;
52644: LD_ADDR_EXP 47
52648: PUSH
52649: LD_INT 0
52651: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52652: LD_VAR 0 1
52656: PPUSH
52657: CALL_OW 247
52661: PUSH
52662: LD_INT 1
52664: EQUAL
52665: IFFALSE 52682
52667: PUSH
52668: LD_VAR 0 1
52672: PPUSH
52673: CALL_OW 248
52677: PUSH
52678: LD_INT 0
52680: GREATER
52681: AND
52682: IFFALSE 52927
// begin if not mpRespawn then
52684: LD_EXP 33
52688: NOT
52689: IFFALSE 52693
// exit ;
52691: GO 52927
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52693: LD_VAR 0 9
52697: PPUSH
52698: CALL_OW 108
52702: NOT
52703: IFFALSE 52722
52705: PUSH
52706: LD_EXP 3
52710: PPUSH
52711: LD_VAR 0 9
52715: PPUSH
52716: CALL 50953 0 2
52720: NOT
52721: AND
52722: IFFALSE 52726
// exit ;
52724: GO 52927
// side := GetSide ( un ) ;
52726: LD_ADDR_VAR 0 9
52730: PUSH
52731: LD_VAR 0 1
52735: PPUSH
52736: CALL_OW 255
52740: ST_TO_ADDR
// nation := GetNation ( un ) ;
52741: LD_ADDR_VAR 0 8
52745: PUSH
52746: LD_VAR 0 1
52750: PPUSH
52751: CALL_OW 248
52755: ST_TO_ADDR
// class := GetClass ( un ) ;
52756: LD_ADDR_VAR 0 6
52760: PUSH
52761: LD_VAR 0 1
52765: PPUSH
52766: CALL_OW 257
52770: ST_TO_ADDR
// if class > 4 then
52771: LD_VAR 0 6
52775: PUSH
52776: LD_INT 4
52778: GREATER
52779: IFFALSE 52789
// class := 1 ;
52781: LD_ADDR_VAR 0 6
52785: PUSH
52786: LD_INT 1
52788: ST_TO_ADDR
// repeat wait ( 10 ) ;
52789: LD_INT 10
52791: PPUSH
52792: CALL_OW 67
// until not mpBlockRespThread ;
52796: LD_EXP 47
52800: NOT
52801: IFFALSE 52789
// mpBlockRespThread := true ;
52803: LD_ADDR_EXP 47
52807: PUSH
52808: LD_INT 1
52810: ST_TO_ADDR
// uc_side := side ;
52811: LD_ADDR_OWVAR 20
52815: PUSH
52816: LD_VAR 0 9
52820: ST_TO_ADDR
// uc_nation := nation ;
52821: LD_ADDR_OWVAR 21
52825: PUSH
52826: LD_VAR 0 8
52830: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52831: LD_INT 0
52833: PPUSH
52834: LD_VAR 0 6
52838: PPUSH
52839: LD_INT 2
52841: PPUSH
52842: CALL_OW 380
// un := CreateHuman ;
52846: LD_ADDR_VAR 0 1
52850: PUSH
52851: CALL_OW 44
52855: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52856: LD_ADDR_EXP 40
52860: PUSH
52861: LD_EXP 40
52865: PPUSH
52866: LD_VAR 0 9
52870: PPUSH
52871: LD_EXP 40
52875: PUSH
52876: LD_VAR 0 9
52880: ARRAY
52881: PPUSH
52882: LD_EXP 40
52886: PUSH
52887: LD_VAR 0 9
52891: ARRAY
52892: PUSH
52893: LD_INT 1
52895: PLUS
52896: PPUSH
52897: LD_VAR 0 1
52901: PPUSH
52902: CALL_OW 1
52906: PPUSH
52907: CALL_OW 1
52911: ST_TO_ADDR
// wait ( 10 ) ;
52912: LD_INT 10
52914: PPUSH
52915: CALL_OW 67
// mpBlockRespThread := false ;
52919: LD_ADDR_EXP 47
52923: PUSH
52924: LD_INT 0
52926: ST_TO_ADDR
// end ; end ;
52927: LD_VAR 0 2
52931: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
52932: LD_INT 0
52934: PPUSH
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
// tag := 0 ;
52939: LD_ADDR_VAR 0 5
52943: PUSH
52944: LD_INT 0
52946: ST_TO_ADDR
// for i := 1 to 8 do
52947: LD_ADDR_VAR 0 4
52951: PUSH
52952: DOUBLE
52953: LD_INT 1
52955: DEC
52956: ST_TO_ADDR
52957: LD_INT 8
52959: PUSH
52960: FOR_TO
52961: IFFALSE 52995
// if un in mpApePosIndex [ i ] then
52963: LD_VAR 0 2
52967: PUSH
52968: LD_EXP 32
52972: PUSH
52973: LD_VAR 0 4
52977: ARRAY
52978: IN
52979: IFFALSE 52993
// begin tag := i ;
52981: LD_ADDR_VAR 0 5
52985: PUSH
52986: LD_VAR 0 4
52990: ST_TO_ADDR
// break ;
52991: GO 52995
// end ;
52993: GO 52960
52995: POP
52996: POP
// if not tag then
52997: LD_VAR 0 5
53001: NOT
53002: IFFALSE 53006
// exit ;
53004: GO 53174
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
53006: LD_ADDR_VAR 0 6
53010: PUSH
53011: LD_EXP 31
53015: PUSH
53016: LD_EXP 7
53020: PUSH
53021: LD_VAR 0 5
53025: ARRAY
53026: ARRAY
53027: ST_TO_ADDR
// if not area then
53028: LD_VAR 0 6
53032: NOT
53033: IFFALSE 53037
// exit ;
53035: GO 53174
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
53037: LD_INT 14700
53039: PUSH
53040: LD_VAR 0 2
53044: PUSH
53045: LD_INT 5
53047: MOD
53048: PUSH
53049: LD_INT 1
53051: PLUS
53052: PUSH
53053: LD_INT 700
53055: MUL
53056: PLUS
53057: PPUSH
53058: CALL_OW 67
// repeat wait ( 10 ) ;
53062: LD_INT 10
53064: PPUSH
53065: CALL_OW 67
// until not mpBlockRespThread ;
53069: LD_EXP 47
53073: NOT
53074: IFFALSE 53062
// mpBlockRespThread := true ;
53076: LD_ADDR_EXP 47
53080: PUSH
53081: LD_INT 1
53083: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
53084: LD_INT 0
53086: PPUSH
53087: CALL 37353 0 1
// ape := CreateHuman ;
53091: LD_ADDR_VAR 0 7
53095: PUSH
53096: CALL_OW 44
53100: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
53101: LD_ADDR_EXP 32
53105: PUSH
53106: LD_EXP 32
53110: PPUSH
53111: LD_VAR 0 5
53115: PPUSH
53116: LD_EXP 32
53120: PUSH
53121: LD_VAR 0 5
53125: ARRAY
53126: PPUSH
53127: LD_VAR 0 7
53131: PPUSH
53132: CALL 41226 0 2
53136: PPUSH
53137: CALL_OW 1
53141: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53142: LD_VAR 0 7
53146: PPUSH
53147: LD_VAR 0 6
53151: PPUSH
53152: LD_INT 0
53154: PPUSH
53155: CALL_OW 49
// wait ( 10 ) ;
53159: LD_INT 10
53161: PPUSH
53162: CALL_OW 67
// mpBlockRespThread := false ;
53166: LD_ADDR_EXP 47
53170: PUSH
53171: LD_INT 0
53173: ST_TO_ADDR
// end ;
53174: LD_VAR 0 3
53178: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
53179: LD_INT 0
53181: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
53182: LD_VAR 0 1
53186: PPUSH
53187: CALL_OW 266
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: IN
53202: IFFALSE 53227
// SetBName ( building , @ & GetSide ( building ) ) ;
53204: LD_VAR 0 1
53208: PPUSH
53209: LD_STRING @
53211: PUSH
53212: LD_VAR 0 1
53216: PPUSH
53217: CALL_OW 255
53221: STR
53222: PPUSH
53223: CALL_OW 500
// end ;
53227: LD_VAR 0 2
53231: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53232: LD_INT 0
53234: PPUSH
53235: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
53236: LD_EXP 3
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 8
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: IN
53251: IFFALSE 53275
53253: PUSH
53254: LD_VAR 0 1
53258: PPUSH
53259: CALL_OW 266
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: IN
53274: AND
53275: IFFALSE 53354
// begin SetSide ( building , oldSide ) ;
53277: LD_VAR 0 1
53281: PPUSH
53282: LD_VAR 0 2
53286: PPUSH
53287: CALL_OW 235
// KillUnit ( building ) ;
53291: LD_VAR 0 1
53295: PPUSH
53296: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
53300: LD_ADDR_VAR 0 5
53304: PUSH
53305: LD_INT 22
53307: PUSH
53308: LD_VAR 0 2
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 21
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PPUSH
53331: CALL_OW 69
53335: PUSH
53336: FOR_IN
53337: IFFALSE 53350
// KillUnit ( i ) ;
53339: LD_VAR 0 5
53343: PPUSH
53344: CALL_OW 66
53348: GO 53336
53350: POP
53351: POP
// exit ;
53352: GO 53399
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53354: LD_VAR 0 1
53358: PPUSH
53359: CALL_OW 266
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: IN
53374: IFFALSE 53399
// SetBName ( building , @ & GetSide ( building ) ) ;
53376: LD_VAR 0 1
53380: PPUSH
53381: LD_STRING @
53383: PUSH
53384: LD_VAR 0 1
53388: PPUSH
53389: CALL_OW 255
53393: STR
53394: PPUSH
53395: CALL_OW 500
// end ;
53399: LD_VAR 0 4
53403: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53404: LD_INT 0
53406: PPUSH
53407: PPUSH
53408: PPUSH
// if mpGameType <> GameTypeFamine then
53409: LD_EXP 3
53413: PUSH
53414: LD_INT 5
53416: NONEQUAL
53417: IFFALSE 53421
// exit ;
53419: GO 53655
// for i := 1 to mpGlobalOilDeposits do
53421: LD_ADDR_VAR 0 6
53425: PUSH
53426: DOUBLE
53427: LD_INT 1
53429: DEC
53430: ST_TO_ADDR
53431: LD_EXP 42
53435: PUSH
53436: FOR_TO
53437: IFFALSE 53653
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
53439: LD_EXP 42
53443: PUSH
53444: LD_VAR 0 6
53448: ARRAY
53449: PUSH
53450: LD_INT 1
53452: ARRAY
53453: PPUSH
53454: LD_EXP 42
53458: PUSH
53459: LD_VAR 0 6
53463: ARRAY
53464: PUSH
53465: LD_INT 2
53467: ARRAY
53468: PPUSH
53469: CALL_OW 428
53473: PUSH
53474: LD_VAR 0 1
53478: EQUAL
53479: IFFALSE 53651
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
53481: LD_ADDR_VAR 0 7
53485: PUSH
53486: LD_EXP 42
53490: PUSH
53491: LD_VAR 0 6
53495: ARRAY
53496: PUSH
53497: LD_INT 3
53499: ARRAY
53500: ST_TO_ADDR
// value := value - amount ;
53501: LD_ADDR_VAR 0 7
53505: PUSH
53506: LD_VAR 0 7
53510: PUSH
53511: LD_VAR 0 4
53515: MINUS
53516: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
53517: LD_ADDR_EXP 42
53521: PUSH
53522: LD_EXP 42
53526: PPUSH
53527: LD_VAR 0 6
53531: PPUSH
53532: LD_EXP 42
53536: PUSH
53537: LD_VAR 0 6
53541: ARRAY
53542: PPUSH
53543: LD_INT 3
53545: PPUSH
53546: LD_VAR 0 7
53550: PPUSH
53551: CALL_OW 1
53555: PPUSH
53556: CALL_OW 1
53560: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53561: LD_VAR 0 2
53565: PUSH
53566: LD_OWVAR 2
53570: PUSH
53571: LD_INT 9
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: IN
53578: IFFALSE 53594
// SetUnitDisplayNumber ( building , value ) ;
53580: LD_VAR 0 1
53584: PPUSH
53585: LD_VAR 0 7
53589: PPUSH
53590: CALL_OW 505
// if value <= 0 then
53594: LD_VAR 0 7
53598: PUSH
53599: LD_INT 0
53601: LESSEQUAL
53602: IFFALSE 53651
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
53604: LD_EXP 42
53608: PUSH
53609: LD_VAR 0 6
53613: ARRAY
53614: PUSH
53615: LD_INT 1
53617: ARRAY
53618: PPUSH
53619: LD_EXP 42
53623: PUSH
53624: LD_VAR 0 6
53628: ARRAY
53629: PUSH
53630: LD_INT 2
53632: ARRAY
53633: PPUSH
53634: CALL_OW 63
// KillUnit ( building ) ;
53638: LD_VAR 0 1
53642: PPUSH
53643: CALL_OW 66
// exit ;
53647: POP
53648: POP
53649: GO 53655
// end ; end ; end ;
53651: GO 53436
53653: POP
53654: POP
// end ;
53655: LD_VAR 0 5
53659: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53660: LD_INT 0
53662: PPUSH
53663: PPUSH
53664: PPUSH
// if mpGameType <> GameTypeFamine then
53665: LD_EXP 3
53669: PUSH
53670: LD_INT 5
53672: NONEQUAL
53673: IFFALSE 53677
// exit ;
53675: GO 53911
// for i := 1 to mpGlobalSibDeposits do
53677: LD_ADDR_VAR 0 6
53681: PUSH
53682: DOUBLE
53683: LD_INT 1
53685: DEC
53686: ST_TO_ADDR
53687: LD_EXP 43
53691: PUSH
53692: FOR_TO
53693: IFFALSE 53909
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53695: LD_EXP 43
53699: PUSH
53700: LD_VAR 0 6
53704: ARRAY
53705: PUSH
53706: LD_INT 1
53708: ARRAY
53709: PPUSH
53710: LD_EXP 43
53714: PUSH
53715: LD_VAR 0 6
53719: ARRAY
53720: PUSH
53721: LD_INT 2
53723: ARRAY
53724: PPUSH
53725: CALL_OW 428
53729: PUSH
53730: LD_VAR 0 1
53734: EQUAL
53735: IFFALSE 53907
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53737: LD_ADDR_VAR 0 7
53741: PUSH
53742: LD_EXP 43
53746: PUSH
53747: LD_VAR 0 6
53751: ARRAY
53752: PUSH
53753: LD_INT 3
53755: ARRAY
53756: ST_TO_ADDR
// value := value - amount ;
53757: LD_ADDR_VAR 0 7
53761: PUSH
53762: LD_VAR 0 7
53766: PUSH
53767: LD_VAR 0 4
53771: MINUS
53772: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53773: LD_ADDR_EXP 43
53777: PUSH
53778: LD_EXP 43
53782: PPUSH
53783: LD_VAR 0 6
53787: PPUSH
53788: LD_EXP 43
53792: PUSH
53793: LD_VAR 0 6
53797: ARRAY
53798: PPUSH
53799: LD_INT 3
53801: PPUSH
53802: LD_VAR 0 7
53806: PPUSH
53807: CALL_OW 1
53811: PPUSH
53812: CALL_OW 1
53816: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53817: LD_VAR 0 2
53821: PUSH
53822: LD_OWVAR 2
53826: PUSH
53827: LD_INT 9
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: IN
53834: IFFALSE 53850
// SetUnitDisplayNumber ( building , value ) ;
53836: LD_VAR 0 1
53840: PPUSH
53841: LD_VAR 0 7
53845: PPUSH
53846: CALL_OW 505
// if value <= 0 then
53850: LD_VAR 0 7
53854: PUSH
53855: LD_INT 0
53857: LESSEQUAL
53858: IFFALSE 53907
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53860: LD_EXP 43
53864: PUSH
53865: LD_VAR 0 6
53869: ARRAY
53870: PUSH
53871: LD_INT 1
53873: ARRAY
53874: PPUSH
53875: LD_EXP 43
53879: PUSH
53880: LD_VAR 0 6
53884: ARRAY
53885: PUSH
53886: LD_INT 2
53888: ARRAY
53889: PPUSH
53890: CALL_OW 63
// KillUnit ( building ) ;
53894: LD_VAR 0 1
53898: PPUSH
53899: CALL_OW 66
// exit ;
53903: POP
53904: POP
53905: GO 53911
// end ; end ; end ;
53907: GO 53692
53909: POP
53910: POP
// end ;
53911: LD_VAR 0 5
53915: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53916: LD_INT 0
53918: PPUSH
53919: PPUSH
// side := GetSide ( factory ) ;
53920: LD_ADDR_VAR 0 7
53924: PUSH
53925: LD_VAR 0 1
53929: PPUSH
53930: CALL_OW 255
53934: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53935: LD_VAR 0 5
53939: PUSH
53940: LD_INT 81
53942: EQUAL
53943: IFFALSE 53981
53945: PUSH
53946: LD_INT 22
53948: PUSH
53949: LD_VAR 0 7
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 34
53960: PUSH
53961: LD_INT 81
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PPUSH
53972: CALL_OW 69
53976: PUSH
53977: LD_INT 0
53979: GREATER
53980: AND
53981: IFFALSE 54014
// begin ComCancel ( factory ) ;
53983: LD_VAR 0 1
53987: PPUSH
53988: CALL_OW 127
// if side = your_side then
53992: LD_VAR 0 7
53996: PUSH
53997: LD_OWVAR 2
54001: EQUAL
54002: IFFALSE 54014
// HintSpec ( VehLimit , 2 ) ;
54004: LD_STRING VehLimit
54006: PPUSH
54007: LD_INT 2
54009: PPUSH
54010: CALL_OW 338
// end ; end ;
54014: LD_VAR 0 6
54018: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
54019: LD_INT 0
54021: PPUSH
54022: PPUSH
54023: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
54024: LD_VAR 0 1
54028: PPUSH
54029: CALL_OW 264
54033: PUSH
54034: LD_INT 81
54036: EQUAL
54037: IFFALSE 54054
54039: PUSH
54040: LD_VAR 0 1
54044: PPUSH
54045: CALL_OW 263
54049: PUSH
54050: LD_INT 1
54052: EQUAL
54053: AND
54054: IFFALSE 54334
// begin for i := 1 to Count ( minersList ) do
54056: LD_ADDR_VAR 0 6
54060: PUSH
54061: DOUBLE
54062: LD_INT 1
54064: DEC
54065: ST_TO_ADDR
54066: LD_EXP 58
54070: PPUSH
54071: CALL 5250 0 1
54075: PUSH
54076: FOR_TO
54077: IFFALSE 54195
// begin if minersList [ i ] = oldId then
54079: LD_EXP 58
54083: PUSH
54084: LD_VAR 0 6
54088: ARRAY
54089: PUSH
54090: LD_VAR 0 2
54094: EQUAL
54095: IFFALSE 54193
// begin for j := 1 to minerMinesList [ i ] do
54097: LD_ADDR_VAR 0 7
54101: PUSH
54102: DOUBLE
54103: LD_INT 1
54105: DEC
54106: ST_TO_ADDR
54107: LD_EXP 59
54111: PUSH
54112: LD_VAR 0 6
54116: ARRAY
54117: PUSH
54118: FOR_TO
54119: IFFALSE 54169
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54121: LD_EXP 59
54125: PUSH
54126: LD_VAR 0 6
54130: ARRAY
54131: PUSH
54132: LD_VAR 0 7
54136: ARRAY
54137: PUSH
54138: LD_INT 1
54140: ARRAY
54141: PPUSH
54142: LD_EXP 59
54146: PUSH
54147: LD_VAR 0 6
54151: ARRAY
54152: PUSH
54153: LD_VAR 0 7
54157: ARRAY
54158: PUSH
54159: LD_INT 2
54161: ARRAY
54162: PPUSH
54163: CALL_OW 612
54167: GO 54118
54169: POP
54170: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
54171: LD_ADDR_EXP 59
54175: PUSH
54176: LD_EXP 59
54180: PPUSH
54181: LD_VAR 0 6
54185: PPUSH
54186: CALL_OW 3
54190: ST_TO_ADDR
// break ;
54191: GO 54195
// end ; end ;
54193: GO 54076
54195: POP
54196: POP
// minersList := minersList diff oldId ;
54197: LD_ADDR_EXP 58
54201: PUSH
54202: LD_EXP 58
54206: PUSH
54207: LD_VAR 0 2
54211: DIFF
54212: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54213: LD_INT 22
54215: PUSH
54216: LD_VAR 0 4
54220: PPUSH
54221: CALL_OW 255
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 34
54232: PUSH
54233: LD_INT 81
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PPUSH
54244: CALL_OW 69
54248: PUSH
54249: LD_INT 1
54251: GREATER
54252: IFFALSE 54279
// begin ComExit ( unit ) ;
54254: LD_VAR 0 4
54258: PPUSH
54259: CALL 41624 0 1
// SetSide ( newId , oldSide ) ;
54263: LD_VAR 0 1
54267: PPUSH
54268: LD_VAR 0 3
54272: PPUSH
54273: CALL_OW 235
// exit ;
54277: GO 54334
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54279: LD_ADDR_EXP 58
54283: PUSH
54284: LD_EXP 58
54288: PPUSH
54289: LD_EXP 58
54293: PUSH
54294: LD_INT 1
54296: PLUS
54297: PPUSH
54298: LD_VAR 0 1
54302: PPUSH
54303: CALL_OW 1
54307: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54308: LD_ADDR_EXP 59
54312: PUSH
54313: LD_EXP 59
54317: PPUSH
54318: LD_EXP 59
54322: PUSH
54323: LD_INT 1
54325: PLUS
54326: PPUSH
54327: EMPTY
54328: PPUSH
54329: CALL_OW 1
54333: ST_TO_ADDR
// end ; end ; end_of_file
54334: LD_VAR 0 5
54338: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
54339: LD_EXP 39
54343: IFFALSE 54351
54345: PUSH
54346: CALL 54561 0 0
54350: AND
54351: IFFALSE 54359
54353: PUSH
54354: LD_OWVAR 4
54358: AND
54359: IFFALSE 54558
54361: GO 54363
54363: DISABLE
54364: LD_INT 0
54366: PPUSH
54367: PPUSH
// begin canWin := false ;
54368: LD_ADDR_VAR 0 2
54372: PUSH
54373: LD_INT 0
54375: ST_TO_ADDR
// if not HasPower ( your_side ) then
54376: LD_OWVAR 2
54380: PPUSH
54381: CALL 54603 0 1
54385: NOT
54386: IFFALSE 54397
// begin Multiplayer_Loose_Message ;
54388: CALL_OW 521
// enable ( mpLose ) ;
54392: LD_INT 102
54394: ENABLE_MARKED
// end else
54395: GO 54558
// begin canWin := true ;
54397: LD_ADDR_VAR 0 2
54401: PUSH
54402: LD_INT 1
54404: ST_TO_ADDR
// for i := 1 to 8 do
54405: LD_ADDR_VAR 0 1
54409: PUSH
54410: DOUBLE
54411: LD_INT 1
54413: DEC
54414: ST_TO_ADDR
54415: LD_INT 8
54417: PUSH
54418: FOR_TO
54419: IFFALSE 54544
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54421: LD_EXP 7
54425: PUSH
54426: LD_VAR 0 1
54430: ARRAY
54431: IFFALSE 54444
54433: PUSH
54434: LD_VAR 0 1
54438: PPUSH
54439: CALL_OW 108
54443: AND
54444: IFFALSE 54458
54446: PUSH
54447: LD_VAR 0 1
54451: PUSH
54452: LD_OWVAR 2
54456: NONEQUAL
54457: AND
54458: IFFALSE 54542
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54460: LD_EXP 8
54464: PUSH
54465: LD_VAR 0 1
54469: ARRAY
54470: NOT
54471: IFTRUE 54519
54473: PUSH
54474: LD_EXP 8
54478: PUSH
54479: LD_VAR 0 1
54483: ARRAY
54484: PUSH
54485: LD_EXP 8
54489: PUSH
54490: LD_OWVAR 2
54494: ARRAY
54495: NONEQUAL
54496: IFFALSE 54518
54498: PUSH
54499: LD_OWVAR 2
54503: PPUSH
54504: LD_VAR 0 1
54508: PPUSH
54509: CALL_OW 81
54513: PUSH
54514: LD_INT 1
54516: NONEQUAL
54517: AND
54518: OR
54519: IFFALSE 54542
// if HasPower ( i ) then
54521: LD_VAR 0 1
54525: PPUSH
54526: CALL 54603 0 1
54530: IFFALSE 54542
// begin canWin := false ;
54532: LD_ADDR_VAR 0 2
54536: PUSH
54537: LD_INT 0
54539: ST_TO_ADDR
// break ;
54540: GO 54544
// end ;
54542: GO 54418
54544: POP
54545: POP
// if canWin then
54546: LD_VAR 0 2
54550: IFFALSE 54557
// enable ( mpWin ) else
54552: LD_INT 101
54554: ENABLE_MARKED
54555: GO 54558
// enable ;
54557: ENABLE
// end ; end ;
54558: PPOPN 2
54560: END
// function CanWinLoose ; begin
54561: LD_INT 0
54563: PPUSH
// result := true ;
54564: LD_ADDR_VAR 0 1
54568: PUSH
54569: LD_INT 1
54571: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54572: CALL_OW 531
54576: IFFALSE 54588
54578: PUSH
54579: CALL_OW 519
54583: PUSH
54584: LD_INT 1
54586: GREATER
54587: AND
54588: IFFALSE 54598
// result := false ;
54590: LD_ADDR_VAR 0 1
54594: PUSH
54595: LD_INT 0
54597: ST_TO_ADDR
// end ;
54598: LD_VAR 0 1
54602: RET
// function HasPower ( i ) ; begin
54603: LD_INT 0
54605: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54606: LD_ADDR_VAR 0 2
54610: PUSH
54611: LD_INT 22
54613: PUSH
54614: LD_VAR 0 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: LD_INT 21
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 33
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 33
54648: PUSH
54649: LD_INT 5
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PPUSH
54666: CALL_OW 69
54670: ST_TO_ADDR
// end ; end_of_file
54671: LD_VAR 0 2
54675: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
54676: LD_EXP 39
54680: IFFALSE 54723
54682: GO 54684
54684: DISABLE
54685: LD_INT 0
54687: PPUSH
// begin for i := 1 to 8 do
54688: LD_ADDR_VAR 0 1
54692: PUSH
54693: DOUBLE
54694: LD_INT 1
54696: DEC
54697: ST_TO_ADDR
54698: LD_INT 8
54700: PUSH
54701: FOR_TO
54702: IFFALSE 54721
// SetRestrict ( b_depot , i , state_disabled ) ;
54704: LD_INT 0
54706: PPUSH
54707: LD_VAR 0 1
54711: PPUSH
54712: LD_INT 0
54714: PPUSH
54715: CALL_OW 324
54719: GO 54701
54721: POP
54722: POP
// end ;
54723: PPOPN 1
54725: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54726: LD_EXP 39
54730: IFFALSE 54738
54732: PUSH
54733: CALL 54948 0 0
54737: AND
54738: IFFALSE 54746
54740: PUSH
54741: LD_OWVAR 4
54745: AND
54746: IFFALSE 54945
54748: GO 54750
54750: DISABLE
54751: LD_INT 0
54753: PPUSH
54754: PPUSH
// begin canWin := false ;
54755: LD_ADDR_VAR 0 2
54759: PUSH
54760: LD_INT 0
54762: ST_TO_ADDR
// if not HasPower ( your_side ) then
54763: LD_OWVAR 2
54767: PPUSH
54768: CALL 54990 0 1
54772: NOT
54773: IFFALSE 54784
// begin Multiplayer_Loose_Message ;
54775: CALL_OW 521
// enable ( mpLose ) ;
54779: LD_INT 102
54781: ENABLE_MARKED
// end else
54782: GO 54945
// begin canWin := true ;
54784: LD_ADDR_VAR 0 2
54788: PUSH
54789: LD_INT 1
54791: ST_TO_ADDR
// for i := 1 to 8 do
54792: LD_ADDR_VAR 0 1
54796: PUSH
54797: DOUBLE
54798: LD_INT 1
54800: DEC
54801: ST_TO_ADDR
54802: LD_INT 8
54804: PUSH
54805: FOR_TO
54806: IFFALSE 54931
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54808: LD_EXP 7
54812: PUSH
54813: LD_VAR 0 1
54817: ARRAY
54818: IFFALSE 54831
54820: PUSH
54821: LD_VAR 0 1
54825: PPUSH
54826: CALL_OW 108
54830: AND
54831: IFFALSE 54845
54833: PUSH
54834: LD_VAR 0 1
54838: PUSH
54839: LD_OWVAR 2
54843: NONEQUAL
54844: AND
54845: IFFALSE 54929
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54847: LD_EXP 8
54851: PUSH
54852: LD_VAR 0 1
54856: ARRAY
54857: NOT
54858: IFTRUE 54906
54860: PUSH
54861: LD_EXP 8
54865: PUSH
54866: LD_VAR 0 1
54870: ARRAY
54871: PUSH
54872: LD_EXP 8
54876: PUSH
54877: LD_OWVAR 2
54881: ARRAY
54882: NONEQUAL
54883: IFFALSE 54905
54885: PUSH
54886: LD_OWVAR 2
54890: PPUSH
54891: LD_VAR 0 1
54895: PPUSH
54896: CALL_OW 81
54900: PUSH
54901: LD_INT 1
54903: NONEQUAL
54904: AND
54905: OR
54906: IFFALSE 54929
// if HasPower ( i ) then
54908: LD_VAR 0 1
54912: PPUSH
54913: CALL 54990 0 1
54917: IFFALSE 54929
// begin canWin := false ;
54919: LD_ADDR_VAR 0 2
54923: PUSH
54924: LD_INT 0
54926: ST_TO_ADDR
// break ;
54927: GO 54931
// end ;
54929: GO 54805
54931: POP
54932: POP
// if canWin then
54933: LD_VAR 0 2
54937: IFFALSE 54944
// enable ( mpWin ) else
54939: LD_INT 101
54941: ENABLE_MARKED
54942: GO 54945
// enable ;
54944: ENABLE
// end ; end ;
54945: PPOPN 2
54947: END
// function CanWinLoose ; begin
54948: LD_INT 0
54950: PPUSH
// result := true ;
54951: LD_ADDR_VAR 0 1
54955: PUSH
54956: LD_INT 1
54958: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54959: CALL_OW 531
54963: IFFALSE 54975
54965: PUSH
54966: CALL_OW 519
54970: PUSH
54971: LD_INT 1
54973: GREATER
54974: AND
54975: IFFALSE 54985
// result := false ;
54977: LD_ADDR_VAR 0 1
54981: PUSH
54982: LD_INT 0
54984: ST_TO_ADDR
// end ;
54985: LD_VAR 0 1
54989: RET
// function HasPower ( i ) ; begin
54990: LD_INT 0
54992: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54993: LD_INT 22
54995: PUSH
54996: LD_VAR 0 1
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 30
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 30
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PPUSH
55037: CALL_OW 69
55041: NOT
55042: IFFALSE 55046
// exit ;
55044: GO 55111
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55046: LD_ADDR_VAR 0 2
55050: PUSH
55051: LD_INT 22
55053: PUSH
55054: LD_VAR 0 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: PUSH
55066: LD_INT 21
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 33
55078: PUSH
55079: LD_INT 3
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 33
55088: PUSH
55089: LD_INT 5
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PPUSH
55106: CALL_OW 69
55110: ST_TO_ADDR
// end ; end_of_file
55111: LD_VAR 0 2
55115: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
55116: LD_EXP 39
55120: IFFALSE 55461
55122: GO 55124
55124: DISABLE
55125: LD_INT 0
55127: PPUSH
55128: PPUSH
55129: PPUSH
// begin mpKingPoints := [ ] ;
55130: LD_ADDR_EXP 50
55134: PUSH
55135: EMPTY
55136: ST_TO_ADDR
// if mpTeamGame then
55137: LD_EXP 11
55141: IFFALSE 55195
// begin for i := 1 to Count ( mpTeams ) do
55143: LD_ADDR_VAR 0 1
55147: PUSH
55148: DOUBLE
55149: LD_INT 1
55151: DEC
55152: ST_TO_ADDR
55153: LD_EXP 10
55157: PPUSH
55158: CALL 5250 0 1
55162: PUSH
55163: FOR_TO
55164: IFFALSE 55191
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55166: LD_ADDR_EXP 50
55170: PUSH
55171: LD_EXP 50
55175: PPUSH
55176: LD_VAR 0 1
55180: PPUSH
55181: LD_INT 0
55183: PPUSH
55184: CALL_OW 1
55188: ST_TO_ADDR
55189: GO 55163
55191: POP
55192: POP
// end else
55193: GO 55238
// begin for i := 1 to 8 do
55195: LD_ADDR_VAR 0 1
55199: PUSH
55200: DOUBLE
55201: LD_INT 1
55203: DEC
55204: ST_TO_ADDR
55205: LD_INT 8
55207: PUSH
55208: FOR_TO
55209: IFFALSE 55236
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55211: LD_ADDR_EXP 50
55215: PUSH
55216: LD_EXP 50
55220: PPUSH
55221: LD_VAR 0 1
55225: PPUSH
55226: LD_INT 0
55228: PPUSH
55229: CALL_OW 1
55233: ST_TO_ADDR
55234: GO 55208
55236: POP
55237: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55238: LD_ADDR_VAR 0 3
55242: PUSH
55243: LD_EXP 2
55247: PPUSH
55248: LD_INT 0
55250: PPUSH
55251: CALL_OW 517
55255: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55256: LD_ADDR_VAR 0 1
55260: PUSH
55261: DOUBLE
55262: LD_INT 1
55264: DEC
55265: ST_TO_ADDR
55266: LD_VAR 0 3
55270: PUSH
55271: LD_INT 1
55273: ARRAY
55274: PUSH
55275: FOR_TO
55276: IFFALSE 55343
// for j := 1 to 8 do
55278: LD_ADDR_VAR 0 2
55282: PUSH
55283: DOUBLE
55284: LD_INT 1
55286: DEC
55287: ST_TO_ADDR
55288: LD_INT 8
55290: PUSH
55291: FOR_TO
55292: IFFALSE 55339
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
55294: LD_VAR 0 3
55298: PUSH
55299: LD_INT 1
55301: ARRAY
55302: PUSH
55303: LD_VAR 0 1
55307: ARRAY
55308: PPUSH
55309: LD_VAR 0 3
55313: PUSH
55314: LD_INT 2
55316: ARRAY
55317: PUSH
55318: LD_VAR 0 1
55322: ARRAY
55323: PPUSH
55324: LD_VAR 0 2
55328: PPUSH
55329: LD_INT 12
55331: NEG
55332: PPUSH
55333: CALL_OW 330
55337: GO 55291
55339: POP
55340: POP
55341: GO 55275
55343: POP
55344: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
55345: LD_EXP 34
55349: PPUSH
55350: LD_INT 1
55352: PPUSH
55353: CALL_OW 424
// UpdateCounter ;
55357: CALL 55967 0 0
// repeat wait ( 0 0$1 ) ;
55361: LD_INT 35
55363: PPUSH
55364: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55368: LD_ADDR_VAR 0 3
55372: PUSH
55373: LD_EXP 34
55377: PPUSH
55378: LD_INT 3
55380: PUSH
55381: LD_INT 57
55383: PUSH
55384: EMPTY
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 50
55393: PUSH
55394: EMPTY
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 30
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 30
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: PPUSH
55430: CALL_OW 70
55434: ST_TO_ADDR
// if not tmp then
55435: LD_VAR 0 3
55439: NOT
55440: IFFALSE 55444
// continue ;
55442: GO 55361
// AddPoints ( tmp ) ;
55444: LD_VAR 0 3
55448: PPUSH
55449: CALL 55645 0 1
// UpdateCounter ;
55453: CALL 55967 0 0
// until false ;
55457: LD_INT 0
55459: IFFALSE 55361
// end ;
55461: PPOPN 3
55463: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
55464: LD_EXP 39
55468: IFFALSE 55476
55470: PUSH
55471: LD_EXP 37
55475: AND
55476: IFFALSE 55642
55478: GO 55480
55480: DISABLE
55481: LD_INT 0
55483: PPUSH
55484: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
55485: LD_ADDR_VAR 0 2
55489: PUSH
55490: LD_EXP 2
55494: PPUSH
55495: LD_INT 0
55497: PPUSH
55498: CALL_OW 517
55502: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55503: LD_ADDR_VAR 0 1
55507: PUSH
55508: DOUBLE
55509: LD_INT 1
55511: DEC
55512: ST_TO_ADDR
55513: LD_VAR 0 2
55517: PUSH
55518: LD_INT 1
55520: ARRAY
55521: PUSH
55522: FOR_TO
55523: IFFALSE 55564
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
55525: LD_VAR 0 2
55529: PUSH
55530: LD_INT 1
55532: ARRAY
55533: PUSH
55534: LD_VAR 0 1
55538: ARRAY
55539: PPUSH
55540: LD_VAR 0 2
55544: PUSH
55545: LD_INT 2
55547: ARRAY
55548: PUSH
55549: LD_VAR 0 1
55553: ARRAY
55554: PPUSH
55555: LD_INT 125
55557: PPUSH
55558: CALL_OW 495
55562: GO 55522
55564: POP
55565: POP
// repeat wait ( mpEmissions ) ;
55566: LD_EXP 37
55570: PPUSH
55571: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
55575: LD_ADDR_VAR 0 1
55579: PUSH
55580: DOUBLE
55581: LD_INT 1
55583: DEC
55584: ST_TO_ADDR
55585: LD_VAR 0 2
55589: PUSH
55590: LD_INT 1
55592: ARRAY
55593: PUSH
55594: FOR_TO
55595: IFFALSE 55636
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
55597: LD_VAR 0 2
55601: PUSH
55602: LD_INT 1
55604: ARRAY
55605: PUSH
55606: LD_VAR 0 1
55610: ARRAY
55611: PPUSH
55612: LD_VAR 0 2
55616: PUSH
55617: LD_INT 2
55619: ARRAY
55620: PUSH
55621: LD_VAR 0 1
55625: ARRAY
55626: PPUSH
55627: LD_INT 15
55629: PPUSH
55630: CALL_OW 495
55634: GO 55594
55636: POP
55637: POP
// until false ;
55638: LD_INT 0
55640: IFFALSE 55566
// end ;
55642: PPOPN 2
55644: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
55645: LD_INT 0
55647: PPUSH
55648: PPUSH
55649: PPUSH
55650: PPUSH
55651: PPUSH
// if mpTeamGame then
55652: LD_EXP 11
55656: IFFALSE 55853
// begin first := depots [ 1 ] ;
55658: LD_ADDR_VAR 0 4
55662: PUSH
55663: LD_VAR 0 1
55667: PUSH
55668: LD_INT 1
55670: ARRAY
55671: ST_TO_ADDR
// side := GetSide ( first ) ;
55672: LD_ADDR_VAR 0 6
55676: PUSH
55677: LD_VAR 0 4
55681: PPUSH
55682: CALL_OW 255
55686: ST_TO_ADDR
// for i := 1 to mpTeams do
55687: LD_ADDR_VAR 0 3
55691: PUSH
55692: DOUBLE
55693: LD_INT 1
55695: DEC
55696: ST_TO_ADDR
55697: LD_EXP 10
55701: PUSH
55702: FOR_TO
55703: IFFALSE 55737
// if side in mpTeams [ i ] then
55705: LD_VAR 0 6
55709: PUSH
55710: LD_EXP 10
55714: PUSH
55715: LD_VAR 0 3
55719: ARRAY
55720: IN
55721: IFFALSE 55735
// begin team := i ;
55723: LD_ADDR_VAR 0 5
55727: PUSH
55728: LD_VAR 0 3
55732: ST_TO_ADDR
// break ;
55733: GO 55737
// end ;
55735: GO 55702
55737: POP
55738: POP
// if not team then
55739: LD_VAR 0 5
55743: NOT
55744: IFFALSE 55748
// exit ;
55746: GO 55962
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55748: LD_EXP 34
55752: PPUSH
55753: LD_INT 81
55755: PUSH
55756: LD_VAR 0 6
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PPUSH
55765: CALL_OW 70
55769: IFFALSE 55773
// exit ;
55771: GO 55962
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55773: LD_ADDR_EXP 50
55777: PUSH
55778: LD_EXP 50
55782: PPUSH
55783: LD_VAR 0 5
55787: PPUSH
55788: LD_EXP 50
55792: PUSH
55793: LD_VAR 0 5
55797: ARRAY
55798: PUSH
55799: LD_INT 1
55801: PLUS
55802: PPUSH
55803: CALL_OW 1
55807: ST_TO_ADDR
// for i in mpTeams [ team ] do
55808: LD_ADDR_VAR 0 3
55812: PUSH
55813: LD_EXP 10
55817: PUSH
55818: LD_VAR 0 5
55822: ARRAY
55823: PUSH
55824: FOR_IN
55825: IFFALSE 55849
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55827: LD_VAR 0 3
55831: PPUSH
55832: LD_EXP 50
55836: PUSH
55837: LD_VAR 0 5
55841: ARRAY
55842: PPUSH
55843: CALL_OW 506
55847: GO 55824
55849: POP
55850: POP
// end else
55851: GO 55962
// begin first := depots [ 1 ] ;
55853: LD_ADDR_VAR 0 4
55857: PUSH
55858: LD_VAR 0 1
55862: PUSH
55863: LD_INT 1
55865: ARRAY
55866: ST_TO_ADDR
// side := GetSide ( first ) ;
55867: LD_ADDR_VAR 0 6
55871: PUSH
55872: LD_VAR 0 4
55876: PPUSH
55877: CALL_OW 255
55881: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55882: LD_EXP 34
55886: PPUSH
55887: LD_INT 81
55889: PUSH
55890: LD_VAR 0 6
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PPUSH
55899: CALL_OW 70
55903: IFFALSE 55907
// exit ;
55905: GO 55962
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55907: LD_ADDR_EXP 50
55911: PUSH
55912: LD_EXP 50
55916: PPUSH
55917: LD_VAR 0 6
55921: PPUSH
55922: LD_EXP 50
55926: PUSH
55927: LD_VAR 0 6
55931: ARRAY
55932: PUSH
55933: LD_INT 1
55935: PLUS
55936: PPUSH
55937: CALL_OW 1
55941: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55942: LD_VAR 0 6
55946: PPUSH
55947: LD_EXP 50
55951: PUSH
55952: LD_VAR 0 6
55956: ARRAY
55957: PPUSH
55958: CALL_OW 506
// end ; end ;
55962: LD_VAR 0 2
55966: RET
// function UpdateCounter ; var i ; begin
55967: LD_INT 0
55969: PPUSH
55970: PPUSH
// result := [ ] ;
55971: LD_ADDR_VAR 0 1
55975: PUSH
55976: EMPTY
55977: ST_TO_ADDR
// if mpTeamGame then
55978: LD_EXP 11
55982: IFFALSE 56049
// begin for i := 1 to mpTeams do
55984: LD_ADDR_VAR 0 2
55988: PUSH
55989: DOUBLE
55990: LD_INT 1
55992: DEC
55993: ST_TO_ADDR
55994: LD_EXP 10
55998: PUSH
55999: FOR_TO
56000: IFFALSE 56045
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
56002: LD_ADDR_VAR 0 1
56006: PUSH
56007: LD_VAR 0 1
56011: PUSH
56012: LD_STRING #KingoftheHill-Team
56014: PUSH
56015: LD_VAR 0 2
56019: PUSH
56020: LD_EXP 50
56024: PUSH
56025: LD_VAR 0 2
56029: ARRAY
56030: PUSH
56031: LD_EXP 35
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: ADD
56042: ST_TO_ADDR
56043: GO 55999
56045: POP
56046: POP
// end else
56047: GO 56122
// begin for i := 1 to 8 do
56049: LD_ADDR_VAR 0 2
56053: PUSH
56054: DOUBLE
56055: LD_INT 1
56057: DEC
56058: ST_TO_ADDR
56059: LD_INT 8
56061: PUSH
56062: FOR_TO
56063: IFFALSE 56120
// if mpSidePositions [ i ] then
56065: LD_EXP 7
56069: PUSH
56070: LD_VAR 0 2
56074: ARRAY
56075: IFFALSE 56118
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
56077: LD_ADDR_VAR 0 1
56081: PUSH
56082: LD_VAR 0 1
56086: PUSH
56087: LD_STRING #KingoftheHill-Player
56089: PUSH
56090: LD_VAR 0 2
56094: PUSH
56095: LD_EXP 50
56099: PUSH
56100: LD_VAR 0 2
56104: ARRAY
56105: PUSH
56106: LD_EXP 35
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: ADD
56117: ST_TO_ADDR
56118: GO 56062
56120: POP
56121: POP
// end ; mpDisplayStrings := result ;
56122: LD_ADDR_EXP 38
56126: PUSH
56127: LD_VAR 0 1
56131: ST_TO_ADDR
// end ;
56132: LD_VAR 0 1
56136: RET
// export function HowMuchPointsKing ( side ) ; begin
56137: LD_INT 0
56139: PPUSH
// result := HowMuchPoints ( side ) ;
56140: LD_ADDR_VAR 0 2
56144: PUSH
56145: LD_VAR 0 1
56149: PPUSH
56150: CALL 56160 0 1
56154: ST_TO_ADDR
// end ;
56155: LD_VAR 0 2
56159: RET
// function HowMuchPoints ( side ) ; var i ; begin
56160: LD_INT 0
56162: PPUSH
56163: PPUSH
// if mpTeamGame then
56164: LD_EXP 11
56168: IFFALSE 56237
// begin for i := 1 to Count ( mpTeams ) do
56170: LD_ADDR_VAR 0 3
56174: PUSH
56175: DOUBLE
56176: LD_INT 1
56178: DEC
56179: ST_TO_ADDR
56180: LD_EXP 10
56184: PPUSH
56185: CALL 5250 0 1
56189: PUSH
56190: FOR_TO
56191: IFFALSE 56233
// begin if side in mpTeams [ i ] then
56193: LD_VAR 0 1
56197: PUSH
56198: LD_EXP 10
56202: PUSH
56203: LD_VAR 0 3
56207: ARRAY
56208: IN
56209: IFFALSE 56231
// begin result := mpKingPoints [ i ] ;
56211: LD_ADDR_VAR 0 2
56215: PUSH
56216: LD_EXP 50
56220: PUSH
56221: LD_VAR 0 3
56225: ARRAY
56226: ST_TO_ADDR
// exit ;
56227: POP
56228: POP
56229: GO 56253
// end ; end ;
56231: GO 56190
56233: POP
56234: POP
// end else
56235: GO 56253
// result := mpKingPoints [ side ] ;
56237: LD_ADDR_VAR 0 2
56241: PUSH
56242: LD_EXP 50
56246: PUSH
56247: LD_VAR 0 1
56251: ARRAY
56252: ST_TO_ADDR
// end ;
56253: LD_VAR 0 2
56257: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56258: LD_EXP 39
56262: IFFALSE 56270
56264: PUSH
56265: CALL 56682 0 0
56269: AND
56270: IFFALSE 56278
56272: PUSH
56273: LD_OWVAR 4
56277: AND
56278: IFFALSE 56531
56280: GO 56282
56282: DISABLE
56283: LD_INT 0
56285: PPUSH
56286: PPUSH
// begin canWin := false ;
56287: LD_ADDR_VAR 0 2
56291: PUSH
56292: LD_INT 0
56294: ST_TO_ADDR
// if not HasPower ( your_side ) then
56295: LD_OWVAR 2
56299: PPUSH
56300: CALL 56724 0 1
56304: NOT
56305: IFFALSE 56316
// begin Multiplayer_Loose_Message ;
56307: CALL_OW 521
// enable ( mpLose ) ;
56311: LD_INT 102
56313: ENABLE_MARKED
// end else
56314: GO 56531
// begin if not EnemiesInGame then
56316: CALL 56534 0 0
56320: NOT
56321: IFFALSE 56328
// begin enable ( mpWin ) ;
56323: LD_INT 101
56325: ENABLE_MARKED
// exit ;
56326: GO 56531
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
56328: LD_ADDR_VAR 0 2
56332: PUSH
56333: LD_OWVAR 2
56337: PPUSH
56338: CALL 56160 0 1
56342: PUSH
56343: LD_EXP 35
56347: GREATEREQUAL
56348: IFFALSE 56361
56350: PUSH
56351: LD_OWVAR 2
56355: PPUSH
56356: CALL 56724 0 1
56360: AND
56361: ST_TO_ADDR
// for i := 1 to 8 do
56362: LD_ADDR_VAR 0 1
56366: PUSH
56367: DOUBLE
56368: LD_INT 1
56370: DEC
56371: ST_TO_ADDR
56372: LD_INT 8
56374: PUSH
56375: FOR_TO
56376: IFFALSE 56517
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
56378: LD_EXP 7
56382: PUSH
56383: LD_VAR 0 1
56387: ARRAY
56388: IFFALSE 56401
56390: PUSH
56391: LD_VAR 0 1
56395: PPUSH
56396: CALL_OW 108
56400: AND
56401: IFFALSE 56415
56403: PUSH
56404: LD_VAR 0 1
56408: PUSH
56409: LD_OWVAR 2
56413: NONEQUAL
56414: AND
56415: IFFALSE 56515
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56417: LD_EXP 8
56421: PUSH
56422: LD_VAR 0 1
56426: ARRAY
56427: NOT
56428: IFTRUE 56476
56430: PUSH
56431: LD_EXP 8
56435: PUSH
56436: LD_VAR 0 1
56440: ARRAY
56441: PUSH
56442: LD_EXP 8
56446: PUSH
56447: LD_OWVAR 2
56451: ARRAY
56452: NONEQUAL
56453: IFFALSE 56475
56455: PUSH
56456: LD_OWVAR 2
56460: PPUSH
56461: LD_VAR 0 1
56465: PPUSH
56466: CALL_OW 81
56470: PUSH
56471: LD_INT 1
56473: NONEQUAL
56474: AND
56475: OR
56476: IFFALSE 56515
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
56478: LD_VAR 0 1
56482: PPUSH
56483: CALL 56160 0 1
56487: PUSH
56488: LD_EXP 35
56492: GREATEREQUAL
56493: IFFALSE 56506
56495: PUSH
56496: LD_VAR 0 1
56500: PPUSH
56501: CALL 56724 0 1
56505: AND
56506: IFFALSE 56515
// begin enable ( mpLose ) ;
56508: LD_INT 102
56510: ENABLE_MARKED
// exit ;
56511: POP
56512: POP
56513: GO 56531
// end ;
56515: GO 56375
56517: POP
56518: POP
// if canWin then
56519: LD_VAR 0 2
56523: IFFALSE 56530
// enable ( mpWin ) else
56525: LD_INT 101
56527: ENABLE_MARKED
56528: GO 56531
// enable ;
56530: ENABLE
// end ; end ;
56531: PPOPN 2
56533: END
// function EnemiesInGame ; var i ; begin
56534: LD_INT 0
56536: PPUSH
56537: PPUSH
// result := false ;
56538: LD_ADDR_VAR 0 1
56542: PUSH
56543: LD_INT 0
56545: ST_TO_ADDR
// for i := 1 to 8 do
56546: LD_ADDR_VAR 0 2
56550: PUSH
56551: DOUBLE
56552: LD_INT 1
56554: DEC
56555: ST_TO_ADDR
56556: LD_INT 8
56558: PUSH
56559: FOR_TO
56560: IFFALSE 56675
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
56562: LD_VAR 0 2
56566: PUSH
56567: LD_OWVAR 2
56571: NONEQUAL
56572: IFFALSE 56585
56574: PUSH
56575: LD_VAR 0 2
56579: PPUSH
56580: CALL 56724 0 1
56584: AND
56585: IFFALSE 56598
56587: PUSH
56588: LD_VAR 0 2
56592: PPUSH
56593: CALL_OW 108
56597: AND
56598: IFFALSE 56673
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56600: LD_EXP 8
56604: PUSH
56605: LD_VAR 0 2
56609: ARRAY
56610: NOT
56611: IFTRUE 56659
56613: PUSH
56614: LD_EXP 8
56618: PUSH
56619: LD_VAR 0 2
56623: ARRAY
56624: PUSH
56625: LD_EXP 8
56629: PUSH
56630: LD_OWVAR 2
56634: ARRAY
56635: NONEQUAL
56636: IFFALSE 56658
56638: PUSH
56639: LD_OWVAR 2
56643: PPUSH
56644: LD_VAR 0 2
56648: PPUSH
56649: CALL_OW 81
56653: PUSH
56654: LD_INT 1
56656: NONEQUAL
56657: AND
56658: OR
56659: IFFALSE 56673
// begin result := true ;
56661: LD_ADDR_VAR 0 1
56665: PUSH
56666: LD_INT 1
56668: ST_TO_ADDR
// exit ;
56669: POP
56670: POP
56671: GO 56677
// end ;
56673: GO 56559
56675: POP
56676: POP
// end ;
56677: LD_VAR 0 1
56681: RET
// function CanWinLoose ; begin
56682: LD_INT 0
56684: PPUSH
// result := true ;
56685: LD_ADDR_VAR 0 1
56689: PUSH
56690: LD_INT 1
56692: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56693: CALL_OW 531
56697: IFFALSE 56709
56699: PUSH
56700: CALL_OW 519
56704: PUSH
56705: LD_INT 1
56707: GREATER
56708: AND
56709: IFFALSE 56719
// result := false ;
56711: LD_ADDR_VAR 0 1
56715: PUSH
56716: LD_INT 0
56718: ST_TO_ADDR
// end ;
56719: LD_VAR 0 1
56723: RET
// function HasPower ( i ) ; begin
56724: LD_INT 0
56726: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56727: LD_ADDR_VAR 0 2
56731: PUSH
56732: LD_INT 22
56734: PUSH
56735: LD_VAR 0 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: LD_INT 21
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 33
56759: PUSH
56760: LD_INT 3
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 33
56769: PUSH
56770: LD_INT 5
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PPUSH
56787: CALL_OW 69
56791: ST_TO_ADDR
// end ; end_of_file end_of_file
56792: LD_VAR 0 2
56796: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56797: LD_VAR 0 1
56801: PUSH
56802: LD_INT 200
56804: DOUBLE
56805: GREATEREQUAL
56806: IFFALSE 56814
56808: LD_INT 299
56810: DOUBLE
56811: LESSEQUAL
56812: IFTRUE 56816
56814: GO 56848
56816: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56817: LD_VAR 0 1
56821: PPUSH
56822: LD_VAR 0 2
56826: PPUSH
56827: LD_VAR 0 3
56831: PPUSH
56832: LD_VAR 0 4
56836: PPUSH
56837: LD_VAR 0 5
56841: PPUSH
56842: CALL 57710 0 5
56846: GO 56925
56848: LD_INT 300
56850: DOUBLE
56851: GREATEREQUAL
56852: IFFALSE 56860
56854: LD_INT 399
56856: DOUBLE
56857: LESSEQUAL
56858: IFTRUE 56862
56860: GO 56924
56862: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56863: LD_VAR 0 1
56867: PPUSH
56868: LD_VAR 0 2
56872: PPUSH
56873: LD_VAR 0 3
56877: PPUSH
56878: LD_VAR 0 4
56882: PPUSH
56883: LD_VAR 0 5
56887: PPUSH
56888: LD_VAR 0 6
56892: PPUSH
56893: LD_VAR 0 7
56897: PPUSH
56898: LD_VAR 0 8
56902: PPUSH
56903: LD_VAR 0 9
56907: PPUSH
56908: LD_VAR 0 10
56912: PPUSH
56913: LD_VAR 0 11
56917: PPUSH
56918: CALL 64131 0 11
56922: GO 56925
56924: POP
// end ;
56925: PPOPN 11
56927: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56928: LD_VAR 0 1
56932: PPUSH
56933: LD_VAR 0 2
56937: PPUSH
56938: LD_VAR 0 3
56942: PPUSH
56943: LD_VAR 0 4
56947: PPUSH
56948: LD_VAR 0 5
56952: PPUSH
56953: CALL 57010 0 5
// end ; end_of_file
56957: PPOPN 5
56959: END
// export function SOS_UnitDestroyed ( un ) ; begin
56960: LD_INT 0
56962: PPUSH
// ComRadiation ( un ) ;
56963: LD_VAR 0 1
56967: PPUSH
56968: CALL 58130 0 1
// end ;
56972: LD_VAR 0 2
56976: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56977: LD_INT 0
56979: PPUSH
// ComRadiation ( un ) ;
56980: LD_VAR 0 1
56984: PPUSH
56985: CALL 58130 0 1
// end ;
56989: LD_VAR 0 2
56993: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56994: LD_INT 0
56996: PPUSH
// end ;
56997: LD_VAR 0 4
57001: RET
// export function SOS_Command ( cmd ) ; begin
57002: LD_INT 0
57004: PPUSH
// end ;
57005: LD_VAR 0 2
57009: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57010: LD_INT 0
57012: PPUSH
// end ;
57013: LD_VAR 0 6
57017: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
57018: LD_INT 0
57020: PPUSH
57021: PPUSH
57022: PPUSH
57023: PPUSH
57024: PPUSH
// if not vehicle or not factory then
57025: LD_VAR 0 1
57029: NOT
57030: IFTRUE 57039
57032: PUSH
57033: LD_VAR 0 2
57037: NOT
57038: OR
57039: IFFALSE 57043
// exit ;
57041: GO 57705
// weapon := GetWeapon ( vehicle ) ;
57043: LD_ADDR_VAR 0 7
57047: PUSH
57048: LD_VAR 0 1
57052: PPUSH
57053: CALL_OW 264
57057: ST_TO_ADDR
// if weapon = ar_miner then
57058: LD_VAR 0 7
57062: PUSH
57063: LD_INT 81
57065: EQUAL
57066: IFFALSE 57123
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
57068: LD_ADDR_EXP 58
57072: PUSH
57073: LD_EXP 58
57077: PPUSH
57078: LD_EXP 58
57082: PUSH
57083: LD_INT 1
57085: PLUS
57086: PPUSH
57087: LD_VAR 0 1
57091: PPUSH
57092: CALL_OW 1
57096: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57097: LD_ADDR_EXP 59
57101: PUSH
57102: LD_EXP 59
57106: PPUSH
57107: LD_EXP 59
57111: PUSH
57112: LD_INT 1
57114: PLUS
57115: PPUSH
57116: EMPTY
57117: PPUSH
57118: CALL_OW 1
57122: ST_TO_ADDR
// end ; if not factoryWaypoints then
57123: LD_EXP 61
57127: NOT
57128: IFFALSE 57132
// exit ;
57130: GO 57705
// for i := 1 to Count ( factoryWaypoints ) do
57132: LD_ADDR_VAR 0 4
57136: PUSH
57137: DOUBLE
57138: LD_INT 1
57140: DEC
57141: ST_TO_ADDR
57142: LD_EXP 61
57146: PPUSH
57147: CALL 5250 0 1
57151: PUSH
57152: FOR_TO
57153: IFFALSE 57703
// if factoryWaypoints [ i ] [ 2 ] = factory then
57155: LD_EXP 61
57159: PUSH
57160: LD_VAR 0 4
57164: ARRAY
57165: PUSH
57166: LD_INT 2
57168: ARRAY
57169: PUSH
57170: LD_VAR 0 2
57174: EQUAL
57175: IFFALSE 57701
// begin if GetControl ( vehicle ) = control_manual then
57177: LD_VAR 0 1
57181: PPUSH
57182: CALL_OW 263
57186: PUSH
57187: LD_INT 1
57189: EQUAL
57190: IFFALSE 57554
// begin driver := IsDrivenBy ( vehicle ) ;
57192: LD_ADDR_VAR 0 5
57196: PUSH
57197: LD_VAR 0 1
57201: PPUSH
57202: CALL_OW 311
57206: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57207: LD_VAR 0 5
57211: PUSH
57212: LD_EXP 62
57216: IN
57217: IFTRUE 57231
57219: PUSH
57220: LD_VAR 0 1
57224: PUSH
57225: LD_EXP 62
57229: IN
57230: OR
57231: IFFALSE 57237
// exit ;
57233: POP
57234: POP
57235: GO 57705
// if not HasTask ( driver ) then
57237: LD_VAR 0 5
57241: PPUSH
57242: CALL_OW 314
57246: NOT
57247: IFFALSE 57552
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57249: LD_ADDR_EXP 62
57253: PUSH
57254: LD_EXP 62
57258: PPUSH
57259: LD_VAR 0 5
57263: PPUSH
57264: CALL 41226 0 2
57268: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57269: LD_ADDR_EXP 62
57273: PUSH
57274: LD_EXP 62
57278: PPUSH
57279: LD_VAR 0 1
57283: PPUSH
57284: CALL 41226 0 2
57288: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57289: LD_ADDR_VAR 0 6
57293: PUSH
57294: LD_EXP 61
57298: PUSH
57299: LD_VAR 0 4
57303: ARRAY
57304: PUSH
57305: LD_INT 3
57307: ARRAY
57308: PPUSH
57309: LD_EXP 61
57313: PUSH
57314: LD_VAR 0 4
57318: ARRAY
57319: PUSH
57320: LD_INT 4
57322: ARRAY
57323: PPUSH
57324: CALL_OW 428
57328: ST_TO_ADDR
// if hex then
57329: LD_VAR 0 6
57333: IFFALSE 57351
// ComMoveUnit ( driver , hex ) else
57335: LD_VAR 0 5
57339: PPUSH
57340: LD_VAR 0 6
57344: PPUSH
57345: CALL_OW 112
57349: GO 57435
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57351: LD_VAR 0 1
57355: PPUSH
57356: LD_EXP 61
57360: PUSH
57361: LD_VAR 0 4
57365: ARRAY
57366: PUSH
57367: LD_INT 3
57369: ARRAY
57370: PPUSH
57371: LD_EXP 61
57375: PUSH
57376: LD_VAR 0 4
57380: ARRAY
57381: PUSH
57382: LD_INT 4
57384: ARRAY
57385: PPUSH
57386: CALL_OW 297
57390: PUSH
57391: LD_INT 0
57393: GREATER
57394: IFFALSE 57435
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57396: LD_VAR 0 5
57400: PPUSH
57401: LD_EXP 61
57405: PUSH
57406: LD_VAR 0 4
57410: ARRAY
57411: PUSH
57412: LD_INT 3
57414: ARRAY
57415: PPUSH
57416: LD_EXP 61
57420: PUSH
57421: LD_VAR 0 4
57425: ARRAY
57426: PUSH
57427: LD_INT 4
57429: ARRAY
57430: PPUSH
57431: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57435: LD_VAR 0 5
57439: PPUSH
57440: CALL_OW 181
// if Multiplayer then
57444: LD_OWVAR 4
57448: IFFALSE 57497
// begin repeat wait ( 10 ) ;
57450: LD_INT 10
57452: PPUSH
57453: CALL_OW 67
// until not IsInUnit ( driver ) ;
57457: LD_VAR 0 5
57461: PPUSH
57462: CALL_OW 310
57466: NOT
57467: IFFALSE 57450
// if not HasTask ( driver ) then
57469: LD_VAR 0 5
57473: PPUSH
57474: CALL_OW 314
57478: NOT
57479: IFFALSE 57495
// ComEnterUnit ( driver , factory ) ;
57481: LD_VAR 0 5
57485: PPUSH
57486: LD_VAR 0 2
57490: PPUSH
57491: CALL_OW 120
// end else
57495: GO 57511
// AddComEnterUnit ( driver , factory ) ;
57497: LD_VAR 0 5
57501: PPUSH
57502: LD_VAR 0 2
57506: PPUSH
57507: CALL_OW 180
// wait ( 0 0$1 ) ;
57511: LD_INT 35
57513: PPUSH
57514: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57518: LD_ADDR_EXP 62
57522: PUSH
57523: LD_EXP 62
57527: PUSH
57528: LD_VAR 0 5
57532: DIFF
57533: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57534: LD_ADDR_EXP 62
57538: PUSH
57539: LD_EXP 62
57543: PUSH
57544: LD_VAR 0 1
57548: DIFF
57549: ST_TO_ADDR
// break ;
57550: GO 57703
// end ; end else
57552: GO 57701
// if GetControl ( vehicle ) = control_remote then
57554: LD_VAR 0 1
57558: PPUSH
57559: CALL_OW 263
57563: PUSH
57564: LD_INT 2
57566: EQUAL
57567: IFFALSE 57653
// begin wait ( 0 0$2 ) ;
57569: LD_INT 70
57571: PPUSH
57572: CALL_OW 67
// repeat wait ( 10 ) ;
57576: LD_INT 10
57578: PPUSH
57579: CALL_OW 67
// Connect ( vehicle ) ;
57583: LD_VAR 0 1
57587: PPUSH
57588: CALL 11528 0 1
// until IsControledBy ( vehicle ) ;
57592: LD_VAR 0 1
57596: PPUSH
57597: CALL_OW 312
57601: IFFALSE 57576
// wait ( 10 ) ;
57603: LD_INT 10
57605: PPUSH
57606: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57610: LD_VAR 0 1
57614: PPUSH
57615: LD_EXP 61
57619: PUSH
57620: LD_VAR 0 4
57624: ARRAY
57625: PUSH
57626: LD_INT 3
57628: ARRAY
57629: PPUSH
57630: LD_EXP 61
57634: PUSH
57635: LD_VAR 0 4
57639: ARRAY
57640: PUSH
57641: LD_INT 4
57643: ARRAY
57644: PPUSH
57645: CALL_OW 111
// break ;
57649: GO 57703
// end else
57651: GO 57701
// begin wait ( 0 0$3 ) ;
57653: LD_INT 105
57655: PPUSH
57656: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57660: LD_VAR 0 1
57664: PPUSH
57665: LD_EXP 61
57669: PUSH
57670: LD_VAR 0 4
57674: ARRAY
57675: PUSH
57676: LD_INT 3
57678: ARRAY
57679: PPUSH
57680: LD_EXP 61
57684: PUSH
57685: LD_VAR 0 4
57689: ARRAY
57690: PUSH
57691: LD_INT 4
57693: ARRAY
57694: PPUSH
57695: CALL_OW 111
// break ;
57699: GO 57703
// end ; end ;
57701: GO 57152
57703: POP
57704: POP
// end ;
57705: LD_VAR 0 3
57709: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57710: LD_INT 0
57712: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57713: LD_VAR 0 1
57717: PUSH
57718: LD_INT 250
57720: EQUAL
57721: IFFALSE 57738
57723: PUSH
57724: LD_VAR 0 2
57728: PPUSH
57729: CALL_OW 264
57733: PUSH
57734: LD_INT 81
57736: EQUAL
57737: AND
57738: IFFALSE 57759
// MinerPlaceMine ( unit , x , y ) ;
57740: LD_VAR 0 2
57744: PPUSH
57745: LD_VAR 0 4
57749: PPUSH
57750: LD_VAR 0 5
57754: PPUSH
57755: CALL 61105 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57759: LD_VAR 0 1
57763: PUSH
57764: LD_INT 251
57766: EQUAL
57767: IFFALSE 57784
57769: PUSH
57770: LD_VAR 0 2
57774: PPUSH
57775: CALL_OW 264
57779: PUSH
57780: LD_INT 81
57782: EQUAL
57783: AND
57784: IFFALSE 57805
// MinerDetonateMine ( unit , x , y ) ;
57786: LD_VAR 0 2
57790: PPUSH
57791: LD_VAR 0 4
57795: PPUSH
57796: LD_VAR 0 5
57800: PPUSH
57801: CALL 61512 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57805: LD_VAR 0 1
57809: PUSH
57810: LD_INT 252
57812: EQUAL
57813: IFFALSE 57830
57815: PUSH
57816: LD_VAR 0 2
57820: PPUSH
57821: CALL_OW 264
57825: PUSH
57826: LD_INT 81
57828: EQUAL
57829: AND
57830: IFFALSE 57851
// MinerCreateMinefield ( unit , x , y ) ;
57832: LD_VAR 0 2
57836: PPUSH
57837: LD_VAR 0 4
57841: PPUSH
57842: LD_VAR 0 5
57846: PPUSH
57847: CALL 61744 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57851: LD_VAR 0 1
57855: PUSH
57856: LD_INT 253
57858: EQUAL
57859: IFFALSE 57876
57861: PUSH
57862: LD_VAR 0 2
57866: PPUSH
57867: CALL_OW 257
57871: PUSH
57872: LD_INT 5
57874: EQUAL
57875: AND
57876: IFFALSE 57897
// ComBinocular ( unit , x , y ) ;
57878: LD_VAR 0 2
57882: PPUSH
57883: LD_VAR 0 4
57887: PPUSH
57888: LD_VAR 0 5
57892: PPUSH
57893: CALL 62119 0 3
// if selectedUnit then
57897: LD_VAR 0 3
57901: IFFALSE 57961
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57903: LD_VAR 0 1
57907: PUSH
57908: LD_INT 254
57910: EQUAL
57911: IFFALSE 57928
57913: PUSH
57914: LD_VAR 0 2
57918: PPUSH
57919: CALL_OW 264
57923: PUSH
57924: LD_INT 99
57926: EQUAL
57927: AND
57928: IFFALSE 57945
57930: PUSH
57931: LD_VAR 0 3
57935: PPUSH
57936: CALL_OW 263
57940: PUSH
57941: LD_INT 3
57943: EQUAL
57944: AND
57945: IFFALSE 57961
// HackDestroyVehicle ( unit , selectedUnit ) ;
57947: LD_VAR 0 2
57951: PPUSH
57952: LD_VAR 0 3
57956: PPUSH
57957: CALL 60295 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57961: LD_VAR 0 1
57965: PUSH
57966: LD_INT 255
57968: EQUAL
57969: IFFALSE 57993
57971: PUSH
57972: LD_VAR 0 2
57976: PPUSH
57977: CALL_OW 264
57981: PUSH
57982: LD_INT 14
57984: PUSH
57985: LD_INT 53
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: IN
57992: AND
57993: IFFALSE 58011
57995: PUSH
57996: LD_VAR 0 4
58000: PPUSH
58001: LD_VAR 0 5
58005: PPUSH
58006: CALL_OW 488
58010: AND
58011: IFFALSE 58035
// CutTreeXYR ( unit , x , y , 12 ) ;
58013: LD_VAR 0 2
58017: PPUSH
58018: LD_VAR 0 4
58022: PPUSH
58023: LD_VAR 0 5
58027: PPUSH
58028: LD_INT 12
58030: PPUSH
58031: CALL 58226 0 4
// if cmd = 256 then
58035: LD_VAR 0 1
58039: PUSH
58040: LD_INT 256
58042: EQUAL
58043: IFFALSE 58064
// SetFactoryWaypoint ( unit , x , y ) ;
58045: LD_VAR 0 2
58049: PPUSH
58050: LD_VAR 0 4
58054: PPUSH
58055: LD_VAR 0 5
58059: PPUSH
58060: CALL 64139 0 3
// if cmd = 257 then
58064: LD_VAR 0 1
58068: PUSH
58069: LD_INT 257
58071: EQUAL
58072: IFFALSE 58093
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58074: LD_VAR 0 2
58078: PPUSH
58079: LD_VAR 0 4
58083: PPUSH
58084: LD_VAR 0 5
58088: PPUSH
58089: CALL 64635 0 3
// if cmd = 258 then
58093: LD_VAR 0 1
58097: PUSH
58098: LD_INT 258
58100: EQUAL
58101: IFFALSE 58125
// BurnTreeXYR ( unit , x , y , 8 ) ;
58103: LD_VAR 0 2
58107: PPUSH
58108: LD_VAR 0 4
58112: PPUSH
58113: LD_VAR 0 5
58117: PPUSH
58118: LD_INT 8
58120: PPUSH
58121: CALL 58648 0 4
// end ;
58125: LD_VAR 0 6
58129: RET
// export function ComRadiation ( un ) ; var eff ; begin
58130: LD_INT 0
58132: PPUSH
58133: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58134: LD_VAR 0 1
58138: PPUSH
58139: CALL_OW 264
58143: PUSH
58144: LD_INT 91
58146: NONEQUAL
58147: IFFALSE 58151
// exit ;
58149: GO 58221
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58151: LD_INT 68
58153: PPUSH
58154: LD_VAR 0 1
58158: PPUSH
58159: CALL_OW 255
58163: PPUSH
58164: CALL_OW 321
58168: PUSH
58169: LD_INT 2
58171: EQUAL
58172: IFFALSE 58184
// eff := 50 else
58174: LD_ADDR_VAR 0 3
58178: PUSH
58179: LD_INT 50
58181: ST_TO_ADDR
58182: GO 58192
// eff := 25 ;
58184: LD_ADDR_VAR 0 3
58188: PUSH
58189: LD_INT 25
58191: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58192: LD_VAR 0 1
58196: PPUSH
58197: CALL_OW 250
58201: PPUSH
58202: LD_VAR 0 1
58206: PPUSH
58207: CALL_OW 251
58211: PPUSH
58212: LD_VAR 0 3
58216: PPUSH
58217: CALL_OW 495
// end ;
58221: LD_VAR 0 2
58225: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58226: LD_INT 0
58228: PPUSH
58229: PPUSH
58230: PPUSH
58231: PPUSH
58232: PPUSH
58233: PPUSH
58234: PPUSH
58235: PPUSH
58236: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58237: LD_VAR 0 1
58241: PPUSH
58242: CALL_OW 302
58246: NOT
58247: IFTRUE 58266
58249: PUSH
58250: LD_VAR 0 2
58254: PPUSH
58255: LD_VAR 0 3
58259: PPUSH
58260: CALL_OW 488
58264: NOT
58265: OR
58266: IFTRUE 58275
58268: PUSH
58269: LD_VAR 0 4
58273: NOT
58274: OR
58275: IFFALSE 58279
// exit ;
58277: GO 58643
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58279: LD_VAR 0 1
58283: PPUSH
58284: CALL_OW 437
58288: PPUSH
58289: CALL 5250 0 1
58293: PUSH
58294: LD_INT 10
58296: GREATER
58297: IFFALSE 58301
// exit ;
58299: GO 58643
// list := [ ] ;
58301: LD_ADDR_VAR 0 13
58305: PUSH
58306: EMPTY
58307: ST_TO_ADDR
// if x - r < 0 then
58308: LD_VAR 0 2
58312: PUSH
58313: LD_VAR 0 4
58317: MINUS
58318: PUSH
58319: LD_INT 0
58321: LESS
58322: IFFALSE 58334
// min_x := 0 else
58324: LD_ADDR_VAR 0 7
58328: PUSH
58329: LD_INT 0
58331: ST_TO_ADDR
58332: GO 58350
// min_x := x - r ;
58334: LD_ADDR_VAR 0 7
58338: PUSH
58339: LD_VAR 0 2
58343: PUSH
58344: LD_VAR 0 4
58348: MINUS
58349: ST_TO_ADDR
// if y - r < 0 then
58350: LD_VAR 0 3
58354: PUSH
58355: LD_VAR 0 4
58359: MINUS
58360: PUSH
58361: LD_INT 0
58363: LESS
58364: IFFALSE 58376
// min_y := 0 else
58366: LD_ADDR_VAR 0 8
58370: PUSH
58371: LD_INT 0
58373: ST_TO_ADDR
58374: GO 58392
// min_y := y - r ;
58376: LD_ADDR_VAR 0 8
58380: PUSH
58381: LD_VAR 0 3
58385: PUSH
58386: LD_VAR 0 4
58390: MINUS
58391: ST_TO_ADDR
// max_x := x + r ;
58392: LD_ADDR_VAR 0 9
58396: PUSH
58397: LD_VAR 0 2
58401: PUSH
58402: LD_VAR 0 4
58406: PLUS
58407: ST_TO_ADDR
// max_y := y + r ;
58408: LD_ADDR_VAR 0 10
58412: PUSH
58413: LD_VAR 0 3
58417: PUSH
58418: LD_VAR 0 4
58422: PLUS
58423: ST_TO_ADDR
// for _x = min_x to max_x do
58424: LD_ADDR_VAR 0 11
58428: PUSH
58429: DOUBLE
58430: LD_VAR 0 7
58434: DEC
58435: ST_TO_ADDR
58436: LD_VAR 0 9
58440: PUSH
58441: FOR_TO
58442: IFFALSE 58561
// for _y = min_y to max_y do
58444: LD_ADDR_VAR 0 12
58448: PUSH
58449: DOUBLE
58450: LD_VAR 0 8
58454: DEC
58455: ST_TO_ADDR
58456: LD_VAR 0 10
58460: PUSH
58461: FOR_TO
58462: IFFALSE 58557
// begin if not ValidHex ( _x , _y ) then
58464: LD_VAR 0 11
58468: PPUSH
58469: LD_VAR 0 12
58473: PPUSH
58474: CALL_OW 488
58478: NOT
58479: IFFALSE 58483
// continue ;
58481: GO 58461
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58483: LD_VAR 0 11
58487: PPUSH
58488: LD_VAR 0 12
58492: PPUSH
58493: CALL_OW 351
58497: IFFALSE 58515
58499: PUSH
58500: LD_VAR 0 11
58504: PPUSH
58505: LD_VAR 0 12
58509: PPUSH
58510: CALL_OW 554
58514: AND
58515: IFFALSE 58555
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58517: LD_ADDR_VAR 0 13
58521: PUSH
58522: LD_VAR 0 13
58526: PPUSH
58527: LD_VAR 0 13
58531: PUSH
58532: LD_INT 1
58534: PLUS
58535: PPUSH
58536: LD_VAR 0 11
58540: PUSH
58541: LD_VAR 0 12
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PPUSH
58550: CALL_OW 2
58554: ST_TO_ADDR
// end ;
58555: GO 58461
58557: POP
58558: POP
58559: GO 58441
58561: POP
58562: POP
// if not list then
58563: LD_VAR 0 13
58567: NOT
58568: IFFALSE 58572
// exit ;
58570: GO 58643
// for i in list do
58572: LD_ADDR_VAR 0 6
58576: PUSH
58577: LD_VAR 0 13
58581: PUSH
58582: FOR_IN
58583: IFFALSE 58641
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58585: LD_VAR 0 1
58589: PPUSH
58590: LD_STRING M
58592: PUSH
58593: LD_VAR 0 6
58597: PUSH
58598: LD_INT 1
58600: ARRAY
58601: PUSH
58602: LD_VAR 0 6
58606: PUSH
58607: LD_INT 2
58609: ARRAY
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: PPUSH
58635: CALL_OW 447
58639: GO 58582
58641: POP
58642: POP
// end ;
58643: LD_VAR 0 5
58647: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58648: LD_INT 0
58650: PPUSH
58651: PPUSH
58652: PPUSH
58653: PPUSH
58654: PPUSH
58655: PPUSH
58656: PPUSH
58657: PPUSH
58658: PPUSH
58659: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58660: LD_VAR 0 1
58664: PPUSH
58665: CALL_OW 302
58669: NOT
58670: IFTRUE 58689
58672: PUSH
58673: LD_VAR 0 2
58677: PPUSH
58678: LD_VAR 0 3
58682: PPUSH
58683: CALL_OW 488
58687: NOT
58688: OR
58689: IFTRUE 58698
58691: PUSH
58692: LD_VAR 0 4
58696: NOT
58697: OR
58698: IFFALSE 58702
// exit ;
58700: GO 59241
// if Count ( GetTaskList ( flame ) ) > 10 then
58702: LD_VAR 0 1
58706: PPUSH
58707: CALL_OW 437
58711: PPUSH
58712: CALL 5250 0 1
58716: PUSH
58717: LD_INT 10
58719: GREATER
58720: IFFALSE 58724
// exit ;
58722: GO 59241
// list := [ ] ;
58724: LD_ADDR_VAR 0 13
58728: PUSH
58729: EMPTY
58730: ST_TO_ADDR
// if x - r < 0 then
58731: LD_VAR 0 2
58735: PUSH
58736: LD_VAR 0 4
58740: MINUS
58741: PUSH
58742: LD_INT 0
58744: LESS
58745: IFFALSE 58757
// min_x := 0 else
58747: LD_ADDR_VAR 0 7
58751: PUSH
58752: LD_INT 0
58754: ST_TO_ADDR
58755: GO 58773
// min_x := x - r ;
58757: LD_ADDR_VAR 0 7
58761: PUSH
58762: LD_VAR 0 2
58766: PUSH
58767: LD_VAR 0 4
58771: MINUS
58772: ST_TO_ADDR
// if y - r < 0 then
58773: LD_VAR 0 3
58777: PUSH
58778: LD_VAR 0 4
58782: MINUS
58783: PUSH
58784: LD_INT 0
58786: LESS
58787: IFFALSE 58799
// min_y := 0 else
58789: LD_ADDR_VAR 0 8
58793: PUSH
58794: LD_INT 0
58796: ST_TO_ADDR
58797: GO 58815
// min_y := y - r ;
58799: LD_ADDR_VAR 0 8
58803: PUSH
58804: LD_VAR 0 3
58808: PUSH
58809: LD_VAR 0 4
58813: MINUS
58814: ST_TO_ADDR
// max_x := x + r ;
58815: LD_ADDR_VAR 0 9
58819: PUSH
58820: LD_VAR 0 2
58824: PUSH
58825: LD_VAR 0 4
58829: PLUS
58830: ST_TO_ADDR
// max_y := y + r ;
58831: LD_ADDR_VAR 0 10
58835: PUSH
58836: LD_VAR 0 3
58840: PUSH
58841: LD_VAR 0 4
58845: PLUS
58846: ST_TO_ADDR
// for _x = min_x to max_x do
58847: LD_ADDR_VAR 0 11
58851: PUSH
58852: DOUBLE
58853: LD_VAR 0 7
58857: DEC
58858: ST_TO_ADDR
58859: LD_VAR 0 9
58863: PUSH
58864: FOR_TO
58865: IFFALSE 58984
// for _y = min_y to max_y do
58867: LD_ADDR_VAR 0 12
58871: PUSH
58872: DOUBLE
58873: LD_VAR 0 8
58877: DEC
58878: ST_TO_ADDR
58879: LD_VAR 0 10
58883: PUSH
58884: FOR_TO
58885: IFFALSE 58980
// begin if not ValidHex ( _x , _y ) then
58887: LD_VAR 0 11
58891: PPUSH
58892: LD_VAR 0 12
58896: PPUSH
58897: CALL_OW 488
58901: NOT
58902: IFFALSE 58906
// continue ;
58904: GO 58884
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58906: LD_VAR 0 11
58910: PPUSH
58911: LD_VAR 0 12
58915: PPUSH
58916: CALL_OW 351
58920: IFFALSE 58938
58922: PUSH
58923: LD_VAR 0 11
58927: PPUSH
58928: LD_VAR 0 12
58932: PPUSH
58933: CALL_OW 554
58937: AND
58938: IFFALSE 58978
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58940: LD_ADDR_VAR 0 13
58944: PUSH
58945: LD_VAR 0 13
58949: PPUSH
58950: LD_VAR 0 13
58954: PUSH
58955: LD_INT 1
58957: PLUS
58958: PPUSH
58959: LD_VAR 0 11
58963: PUSH
58964: LD_VAR 0 12
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PPUSH
58973: CALL_OW 2
58977: ST_TO_ADDR
// end ;
58978: GO 58884
58980: POP
58981: POP
58982: GO 58864
58984: POP
58985: POP
// if not list then
58986: LD_VAR 0 13
58990: NOT
58991: IFFALSE 58995
// exit ;
58993: GO 59241
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58995: LD_ADDR_VAR 0 13
58999: PUSH
59000: LD_VAR 0 1
59004: PPUSH
59005: LD_VAR 0 13
59009: PPUSH
59010: LD_INT 1
59012: PPUSH
59013: LD_INT 1
59015: PPUSH
59016: CALL 8656 0 4
59020: ST_TO_ADDR
// ComStop ( flame ) ;
59021: LD_VAR 0 1
59025: PPUSH
59026: CALL_OW 141
// for i in list do
59030: LD_ADDR_VAR 0 6
59034: PUSH
59035: LD_VAR 0 13
59039: PUSH
59040: FOR_IN
59041: IFFALSE 59072
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59043: LD_VAR 0 1
59047: PPUSH
59048: LD_VAR 0 6
59052: PUSH
59053: LD_INT 1
59055: ARRAY
59056: PPUSH
59057: LD_VAR 0 6
59061: PUSH
59062: LD_INT 2
59064: ARRAY
59065: PPUSH
59066: CALL_OW 176
59070: GO 59040
59072: POP
59073: POP
// repeat wait ( 0 0$1 ) ;
59074: LD_INT 35
59076: PPUSH
59077: CALL_OW 67
// task := GetTaskList ( flame ) ;
59081: LD_ADDR_VAR 0 14
59085: PUSH
59086: LD_VAR 0 1
59090: PPUSH
59091: CALL_OW 437
59095: ST_TO_ADDR
// if not task then
59096: LD_VAR 0 14
59100: NOT
59101: IFFALSE 59105
// exit ;
59103: GO 59241
// if task [ 1 ] [ 1 ] <> | then
59105: LD_VAR 0 14
59109: PUSH
59110: LD_INT 1
59112: ARRAY
59113: PUSH
59114: LD_INT 1
59116: ARRAY
59117: PUSH
59118: LD_STRING |
59120: NONEQUAL
59121: IFFALSE 59125
// exit ;
59123: GO 59241
// _x := task [ 1 ] [ 2 ] ;
59125: LD_ADDR_VAR 0 11
59129: PUSH
59130: LD_VAR 0 14
59134: PUSH
59135: LD_INT 1
59137: ARRAY
59138: PUSH
59139: LD_INT 2
59141: ARRAY
59142: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59143: LD_ADDR_VAR 0 12
59147: PUSH
59148: LD_VAR 0 14
59152: PUSH
59153: LD_INT 1
59155: ARRAY
59156: PUSH
59157: LD_INT 3
59159: ARRAY
59160: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59161: LD_VAR 0 11
59165: PPUSH
59166: LD_VAR 0 12
59170: PPUSH
59171: CALL_OW 351
59175: NOT
59176: IFTRUE 59195
59178: PUSH
59179: LD_VAR 0 11
59183: PPUSH
59184: LD_VAR 0 12
59188: PPUSH
59189: CALL_OW 554
59193: NOT
59194: OR
59195: IFFALSE 59229
// begin task := Delete ( task , 1 ) ;
59197: LD_ADDR_VAR 0 14
59201: PUSH
59202: LD_VAR 0 14
59206: PPUSH
59207: LD_INT 1
59209: PPUSH
59210: CALL_OW 3
59214: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59215: LD_VAR 0 1
59219: PPUSH
59220: LD_VAR 0 14
59224: PPUSH
59225: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59229: LD_VAR 0 1
59233: PPUSH
59234: CALL_OW 314
59238: NOT
59239: IFFALSE 59074
// end ;
59241: LD_VAR 0 5
59245: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59246: LD_EXP 51
59250: NOT
59251: IFFALSE 59301
59253: GO 59255
59255: DISABLE
// begin initHack := true ;
59256: LD_ADDR_EXP 51
59260: PUSH
59261: LD_INT 1
59263: ST_TO_ADDR
// hackTanks := [ ] ;
59264: LD_ADDR_EXP 52
59268: PUSH
59269: EMPTY
59270: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59271: LD_ADDR_EXP 53
59275: PUSH
59276: EMPTY
59277: ST_TO_ADDR
// hackLimit := 3 ;
59278: LD_ADDR_EXP 54
59282: PUSH
59283: LD_INT 3
59285: ST_TO_ADDR
// hackDist := 12 ;
59286: LD_ADDR_EXP 55
59290: PUSH
59291: LD_INT 12
59293: ST_TO_ADDR
// hackCounter := [ ] ;
59294: LD_ADDR_EXP 56
59298: PUSH
59299: EMPTY
59300: ST_TO_ADDR
// end ;
59301: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59302: LD_EXP 51
59306: IFFALSE 59324
59308: PUSH
59309: LD_INT 34
59311: PUSH
59312: LD_INT 99
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PPUSH
59319: CALL_OW 69
59323: AND
59324: IFFALSE 59577
59326: GO 59328
59328: DISABLE
59329: LD_INT 0
59331: PPUSH
59332: PPUSH
// begin enable ;
59333: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59334: LD_ADDR_VAR 0 1
59338: PUSH
59339: LD_INT 34
59341: PUSH
59342: LD_INT 99
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PPUSH
59349: CALL_OW 69
59353: PUSH
59354: FOR_IN
59355: IFFALSE 59575
// begin if not i in hackTanks then
59357: LD_VAR 0 1
59361: PUSH
59362: LD_EXP 52
59366: IN
59367: NOT
59368: IFFALSE 59451
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59370: LD_ADDR_EXP 52
59374: PUSH
59375: LD_EXP 52
59379: PPUSH
59380: LD_EXP 52
59384: PUSH
59385: LD_INT 1
59387: PLUS
59388: PPUSH
59389: LD_VAR 0 1
59393: PPUSH
59394: CALL_OW 1
59398: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59399: LD_ADDR_EXP 53
59403: PUSH
59404: LD_EXP 53
59408: PPUSH
59409: LD_EXP 53
59413: PUSH
59414: LD_INT 1
59416: PLUS
59417: PPUSH
59418: EMPTY
59419: PPUSH
59420: CALL_OW 1
59424: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59425: LD_ADDR_EXP 56
59429: PUSH
59430: LD_EXP 56
59434: PPUSH
59435: LD_EXP 56
59439: PUSH
59440: LD_INT 1
59442: PLUS
59443: PPUSH
59444: EMPTY
59445: PPUSH
59446: CALL_OW 1
59450: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59451: LD_VAR 0 1
59455: PPUSH
59456: CALL_OW 302
59460: NOT
59461: IFFALSE 59474
// begin HackUnlinkAll ( i ) ;
59463: LD_VAR 0 1
59467: PPUSH
59468: CALL 59580 0 1
// continue ;
59472: GO 59354
// end ; HackCheckCapturedStatus ( i ) ;
59474: LD_VAR 0 1
59478: PPUSH
59479: CALL 60025 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59483: LD_ADDR_VAR 0 2
59487: PUSH
59488: LD_INT 81
59490: PUSH
59491: LD_VAR 0 1
59495: PPUSH
59496: CALL_OW 255
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 33
59507: PUSH
59508: LD_INT 3
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 91
59517: PUSH
59518: LD_VAR 0 1
59522: PUSH
59523: LD_EXP 55
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 50
59535: PUSH
59536: EMPTY
59537: LIST
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: PPUSH
59545: CALL_OW 69
59549: ST_TO_ADDR
// if not tmp then
59550: LD_VAR 0 2
59554: NOT
59555: IFFALSE 59559
// continue ;
59557: GO 59354
// HackLink ( i , tmp ) ;
59559: LD_VAR 0 1
59563: PPUSH
59564: LD_VAR 0 2
59568: PPUSH
59569: CALL 59716 0 2
// end ;
59573: GO 59354
59575: POP
59576: POP
// end ;
59577: PPOPN 2
59579: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59580: LD_INT 0
59582: PPUSH
59583: PPUSH
59584: PPUSH
// if not hack in hackTanks then
59585: LD_VAR 0 1
59589: PUSH
59590: LD_EXP 52
59594: IN
59595: NOT
59596: IFFALSE 59600
// exit ;
59598: GO 59711
// index := GetElementIndex ( hackTanks , hack ) ;
59600: LD_ADDR_VAR 0 4
59604: PUSH
59605: LD_EXP 52
59609: PPUSH
59610: LD_VAR 0 1
59614: PPUSH
59615: CALL 7951 0 2
59619: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59620: LD_EXP 53
59624: PUSH
59625: LD_VAR 0 4
59629: ARRAY
59630: IFFALSE 59711
// begin for i in hackTanksCaptured [ index ] do
59632: LD_ADDR_VAR 0 3
59636: PUSH
59637: LD_EXP 53
59641: PUSH
59642: LD_VAR 0 4
59646: ARRAY
59647: PUSH
59648: FOR_IN
59649: IFFALSE 59675
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59651: LD_VAR 0 3
59655: PUSH
59656: LD_INT 1
59658: ARRAY
59659: PPUSH
59660: LD_VAR 0 3
59664: PUSH
59665: LD_INT 2
59667: ARRAY
59668: PPUSH
59669: CALL_OW 235
59673: GO 59648
59675: POP
59676: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59677: LD_ADDR_EXP 53
59681: PUSH
59682: LD_EXP 53
59686: PPUSH
59687: LD_VAR 0 4
59691: PPUSH
59692: EMPTY
59693: PPUSH
59694: CALL_OW 1
59698: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59699: LD_VAR 0 1
59703: PPUSH
59704: LD_INT 0
59706: PPUSH
59707: CALL_OW 505
// end ; end ;
59711: LD_VAR 0 2
59715: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59716: LD_INT 0
59718: PPUSH
59719: PPUSH
59720: PPUSH
// if not hack in hackTanks or not vehicles then
59721: LD_VAR 0 1
59725: PUSH
59726: LD_EXP 52
59730: IN
59731: NOT
59732: IFTRUE 59741
59734: PUSH
59735: LD_VAR 0 2
59739: NOT
59740: OR
59741: IFFALSE 59745
// exit ;
59743: GO 60020
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59745: LD_ADDR_VAR 0 2
59749: PUSH
59750: LD_VAR 0 1
59754: PPUSH
59755: LD_VAR 0 2
59759: PPUSH
59760: LD_INT 1
59762: PPUSH
59763: LD_INT 1
59765: PPUSH
59766: CALL 8603 0 4
59770: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59771: LD_ADDR_VAR 0 5
59775: PUSH
59776: LD_EXP 52
59780: PPUSH
59781: LD_VAR 0 1
59785: PPUSH
59786: CALL 7951 0 2
59790: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59791: LD_EXP 53
59795: PUSH
59796: LD_VAR 0 5
59800: ARRAY
59801: PUSH
59802: LD_EXP 54
59806: LESS
59807: IFFALSE 59996
// begin for i := 1 to vehicles do
59809: LD_ADDR_VAR 0 4
59813: PUSH
59814: DOUBLE
59815: LD_INT 1
59817: DEC
59818: ST_TO_ADDR
59819: LD_VAR 0 2
59823: PUSH
59824: FOR_TO
59825: IFFALSE 59994
// begin if hackTanksCaptured [ index ] = hackLimit then
59827: LD_EXP 53
59831: PUSH
59832: LD_VAR 0 5
59836: ARRAY
59837: PUSH
59838: LD_EXP 54
59842: EQUAL
59843: IFFALSE 59847
// break ;
59845: GO 59994
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59847: LD_ADDR_EXP 56
59851: PUSH
59852: LD_EXP 56
59856: PPUSH
59857: LD_VAR 0 5
59861: PPUSH
59862: LD_EXP 56
59866: PUSH
59867: LD_VAR 0 5
59871: ARRAY
59872: PUSH
59873: LD_INT 1
59875: PLUS
59876: PPUSH
59877: CALL_OW 1
59881: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59882: LD_ADDR_EXP 53
59886: PUSH
59887: LD_EXP 53
59891: PPUSH
59892: LD_VAR 0 5
59896: PUSH
59897: LD_EXP 53
59901: PUSH
59902: LD_VAR 0 5
59906: ARRAY
59907: PUSH
59908: LD_INT 1
59910: PLUS
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PPUSH
59916: LD_VAR 0 2
59920: PUSH
59921: LD_VAR 0 4
59925: ARRAY
59926: PUSH
59927: LD_VAR 0 2
59931: PUSH
59932: LD_VAR 0 4
59936: ARRAY
59937: PPUSH
59938: CALL_OW 255
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PPUSH
59947: CALL 8168 0 3
59951: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59952: LD_VAR 0 2
59956: PUSH
59957: LD_VAR 0 4
59961: ARRAY
59962: PPUSH
59963: LD_VAR 0 1
59967: PPUSH
59968: CALL_OW 255
59972: PPUSH
59973: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59977: LD_VAR 0 2
59981: PUSH
59982: LD_VAR 0 4
59986: ARRAY
59987: PPUSH
59988: CALL_OW 141
// end ;
59992: GO 59824
59994: POP
59995: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59996: LD_VAR 0 1
60000: PPUSH
60001: LD_EXP 53
60005: PUSH
60006: LD_VAR 0 5
60010: ARRAY
60011: PUSH
60012: LD_INT 0
60014: PLUS
60015: PPUSH
60016: CALL_OW 505
// end ;
60020: LD_VAR 0 3
60024: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60025: LD_INT 0
60027: PPUSH
60028: PPUSH
60029: PPUSH
60030: PPUSH
// if not hack in hackTanks then
60031: LD_VAR 0 1
60035: PUSH
60036: LD_EXP 52
60040: IN
60041: NOT
60042: IFFALSE 60046
// exit ;
60044: GO 60290
// index := GetElementIndex ( hackTanks , hack ) ;
60046: LD_ADDR_VAR 0 4
60050: PUSH
60051: LD_EXP 52
60055: PPUSH
60056: LD_VAR 0 1
60060: PPUSH
60061: CALL 7951 0 2
60065: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60066: LD_ADDR_VAR 0 3
60070: PUSH
60071: DOUBLE
60072: LD_EXP 53
60076: PUSH
60077: LD_VAR 0 4
60081: ARRAY
60082: INC
60083: ST_TO_ADDR
60084: LD_INT 1
60086: PUSH
60087: FOR_DOWNTO
60088: IFFALSE 60264
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60090: LD_ADDR_VAR 0 5
60094: PUSH
60095: LD_EXP 53
60099: PUSH
60100: LD_VAR 0 4
60104: ARRAY
60105: PUSH
60106: LD_VAR 0 3
60110: ARRAY
60111: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60112: LD_VAR 0 5
60116: PUSH
60117: LD_INT 1
60119: ARRAY
60120: PPUSH
60121: CALL_OW 302
60125: NOT
60126: IFTRUE 60154
60128: PUSH
60129: LD_VAR 0 5
60133: PUSH
60134: LD_INT 1
60136: ARRAY
60137: PPUSH
60138: CALL_OW 255
60142: PUSH
60143: LD_VAR 0 1
60147: PPUSH
60148: CALL_OW 255
60152: NONEQUAL
60153: OR
60154: IFFALSE 60262
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60156: LD_VAR 0 5
60160: PUSH
60161: LD_INT 1
60163: ARRAY
60164: PPUSH
60165: CALL_OW 305
60169: IFFALSE 60197
60171: PUSH
60172: LD_VAR 0 5
60176: PUSH
60177: LD_INT 1
60179: ARRAY
60180: PPUSH
60181: CALL_OW 255
60185: PUSH
60186: LD_VAR 0 1
60190: PPUSH
60191: CALL_OW 255
60195: EQUAL
60196: AND
60197: IFFALSE 60221
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60199: LD_VAR 0 5
60203: PUSH
60204: LD_INT 1
60206: ARRAY
60207: PPUSH
60208: LD_VAR 0 5
60212: PUSH
60213: LD_INT 2
60215: ARRAY
60216: PPUSH
60217: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60221: LD_ADDR_EXP 53
60225: PUSH
60226: LD_EXP 53
60230: PPUSH
60231: LD_VAR 0 4
60235: PPUSH
60236: LD_EXP 53
60240: PUSH
60241: LD_VAR 0 4
60245: ARRAY
60246: PPUSH
60247: LD_VAR 0 3
60251: PPUSH
60252: CALL_OW 3
60256: PPUSH
60257: CALL_OW 1
60261: ST_TO_ADDR
// end ; end ;
60262: GO 60087
60264: POP
60265: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60266: LD_VAR 0 1
60270: PPUSH
60271: LD_EXP 53
60275: PUSH
60276: LD_VAR 0 4
60280: ARRAY
60281: PUSH
60282: LD_INT 0
60284: PLUS
60285: PPUSH
60286: CALL_OW 505
// end ;
60290: LD_VAR 0 2
60294: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60295: LD_INT 0
60297: PPUSH
60298: PPUSH
60299: PPUSH
60300: PPUSH
// if not hack in hackTanks then
60301: LD_VAR 0 1
60305: PUSH
60306: LD_EXP 52
60310: IN
60311: NOT
60312: IFFALSE 60316
// exit ;
60314: GO 60401
// index := GetElementIndex ( hackTanks , hack ) ;
60316: LD_ADDR_VAR 0 5
60320: PUSH
60321: LD_EXP 52
60325: PPUSH
60326: LD_VAR 0 1
60330: PPUSH
60331: CALL 7951 0 2
60335: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60336: LD_ADDR_VAR 0 4
60340: PUSH
60341: DOUBLE
60342: LD_INT 1
60344: DEC
60345: ST_TO_ADDR
60346: LD_EXP 53
60350: PUSH
60351: LD_VAR 0 5
60355: ARRAY
60356: PUSH
60357: FOR_TO
60358: IFFALSE 60399
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60360: LD_EXP 53
60364: PUSH
60365: LD_VAR 0 5
60369: ARRAY
60370: PUSH
60371: LD_VAR 0 4
60375: ARRAY
60376: PUSH
60377: LD_INT 1
60379: ARRAY
60380: PUSH
60381: LD_VAR 0 2
60385: EQUAL
60386: IFFALSE 60397
// KillUnit ( vehicle ) ;
60388: LD_VAR 0 2
60392: PPUSH
60393: CALL_OW 66
60397: GO 60357
60399: POP
60400: POP
// end ;
60401: LD_VAR 0 3
60405: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60406: LD_EXP 57
60410: NOT
60411: IFFALSE 60544
60413: GO 60415
60415: DISABLE
60416: LD_INT 0
60418: PPUSH
// begin initMiner := true ;
60419: LD_ADDR_EXP 57
60423: PUSH
60424: LD_INT 1
60426: ST_TO_ADDR
// minersList := [ ] ;
60427: LD_ADDR_EXP 58
60431: PUSH
60432: EMPTY
60433: ST_TO_ADDR
// minerMinesList := [ ] ;
60434: LD_ADDR_EXP 59
60438: PUSH
60439: EMPTY
60440: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
60441: LD_ADDR_EXP 60
60445: PUSH
60446: LD_INT 10
60448: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60449: LD_ADDR_VAR 0 1
60453: PUSH
60454: LD_INT 34
60456: PUSH
60457: LD_INT 81
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PPUSH
60464: CALL_OW 69
60468: PUSH
60469: FOR_IN
60470: IFFALSE 60542
// begin if not i in minersList then
60472: LD_VAR 0 1
60476: PUSH
60477: LD_EXP 58
60481: IN
60482: NOT
60483: IFFALSE 60540
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60485: LD_ADDR_EXP 58
60489: PUSH
60490: LD_EXP 58
60494: PPUSH
60495: LD_EXP 58
60499: PUSH
60500: LD_INT 1
60502: PLUS
60503: PPUSH
60504: LD_VAR 0 1
60508: PPUSH
60509: CALL_OW 1
60513: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60514: LD_ADDR_EXP 59
60518: PUSH
60519: LD_EXP 59
60523: PPUSH
60524: LD_EXP 59
60528: PUSH
60529: LD_INT 1
60531: PLUS
60532: PPUSH
60533: EMPTY
60534: PPUSH
60535: CALL_OW 1
60539: ST_TO_ADDR
// end end ;
60540: GO 60469
60542: POP
60543: POP
// end ;
60544: PPOPN 1
60546: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60547: LD_EXP 57
60551: IFFALSE 60582
60553: PUSH
60554: LD_EXP 59
60558: PPUSH
60559: CALL 5250 0 1
60563: IFTRUE 60581
60565: PUSH
60566: LD_INT 34
60568: PUSH
60569: LD_INT 81
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PPUSH
60576: CALL_OW 69
60580: OR
60581: AND
60582: IFFALSE 61102
60584: GO 60586
60586: DISABLE
60587: LD_INT 0
60589: PPUSH
60590: PPUSH
60591: PPUSH
60592: PPUSH
// begin enable ;
60593: ENABLE
// for i := minerMinesList downto 1 do
60594: LD_ADDR_VAR 0 1
60598: PUSH
60599: DOUBLE
60600: LD_EXP 59
60604: INC
60605: ST_TO_ADDR
60606: LD_INT 1
60608: PUSH
60609: FOR_DOWNTO
60610: IFFALSE 61100
// begin side := GetSide ( minersList [ i ] ) ;
60612: LD_ADDR_VAR 0 3
60616: PUSH
60617: LD_EXP 58
60621: PUSH
60622: LD_VAR 0 1
60626: ARRAY
60627: PPUSH
60628: CALL_OW 255
60632: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
60633: LD_EXP 58
60637: PUSH
60638: LD_VAR 0 1
60642: ARRAY
60643: PPUSH
60644: CALL_OW 300
60648: IFFALSE 60669
60650: PUSH
60651: LD_VAR 0 3
60655: PUSH
60656: LD_OWVAR 2
60660: PUSH
60661: LD_INT 9
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: IN
60668: AND
60669: IFFALSE 60702
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60671: LD_EXP 58
60675: PUSH
60676: LD_VAR 0 1
60680: ARRAY
60681: PPUSH
60682: LD_EXP 59
60686: PUSH
60687: LD_VAR 0 1
60691: ARRAY
60692: PPUSH
60693: CALL 5250 0 1
60697: PPUSH
60698: CALL_OW 505
// if not minerMinesList [ i ] then
60702: LD_EXP 59
60706: PUSH
60707: LD_VAR 0 1
60711: ARRAY
60712: NOT
60713: IFFALSE 60717
// continue ;
60715: GO 60609
// for j := minerMinesList [ i ] downto 1 do
60717: LD_ADDR_VAR 0 2
60721: PUSH
60722: DOUBLE
60723: LD_EXP 59
60727: PUSH
60728: LD_VAR 0 1
60732: ARRAY
60733: INC
60734: ST_TO_ADDR
60735: LD_INT 1
60737: PUSH
60738: FOR_DOWNTO
60739: IFFALSE 61096
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60741: LD_EXP 58
60745: PUSH
60746: LD_VAR 0 1
60750: ARRAY
60751: PPUSH
60752: CALL_OW 301
60756: IFTRUE 60776
60758: PUSH
60759: LD_EXP 58
60763: PUSH
60764: LD_VAR 0 1
60768: ARRAY
60769: PPUSH
60770: CALL_OW 305
60774: NOT
60775: OR
60776: IFFALSE 60867
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60778: LD_EXP 59
60782: PUSH
60783: LD_VAR 0 1
60787: ARRAY
60788: PUSH
60789: LD_VAR 0 2
60793: ARRAY
60794: PUSH
60795: LD_INT 1
60797: ARRAY
60798: PPUSH
60799: LD_EXP 59
60803: PUSH
60804: LD_VAR 0 1
60808: ARRAY
60809: PUSH
60810: LD_VAR 0 2
60814: ARRAY
60815: PUSH
60816: LD_INT 2
60818: ARRAY
60819: PPUSH
60820: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60824: LD_ADDR_EXP 59
60828: PUSH
60829: LD_EXP 59
60833: PPUSH
60834: LD_VAR 0 1
60838: PPUSH
60839: LD_EXP 59
60843: PUSH
60844: LD_VAR 0 1
60848: ARRAY
60849: PPUSH
60850: LD_VAR 0 2
60854: PPUSH
60855: CALL_OW 3
60859: PPUSH
60860: CALL_OW 1
60864: ST_TO_ADDR
// continue ;
60865: GO 60738
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60867: LD_ADDR_VAR 0 4
60871: PUSH
60872: LD_EXP 59
60876: PUSH
60877: LD_VAR 0 1
60881: ARRAY
60882: PUSH
60883: LD_VAR 0 2
60887: ARRAY
60888: PUSH
60889: LD_INT 1
60891: ARRAY
60892: PPUSH
60893: LD_EXP 59
60897: PUSH
60898: LD_VAR 0 1
60902: ARRAY
60903: PUSH
60904: LD_VAR 0 2
60908: ARRAY
60909: PUSH
60910: LD_INT 2
60912: ARRAY
60913: PPUSH
60914: CALL_OW 428
60918: ST_TO_ADDR
// if not tmp then
60919: LD_VAR 0 4
60923: NOT
60924: IFFALSE 60928
// continue ;
60926: GO 60738
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60928: LD_VAR 0 4
60932: PUSH
60933: LD_INT 81
60935: PUSH
60936: LD_VAR 0 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PPUSH
60945: CALL_OW 69
60949: IN
60950: IFFALSE 61000
60952: PUSH
60953: LD_EXP 59
60957: PUSH
60958: LD_VAR 0 1
60962: ARRAY
60963: PUSH
60964: LD_VAR 0 2
60968: ARRAY
60969: PUSH
60970: LD_INT 1
60972: ARRAY
60973: PPUSH
60974: LD_EXP 59
60978: PUSH
60979: LD_VAR 0 1
60983: ARRAY
60984: PUSH
60985: LD_VAR 0 2
60989: ARRAY
60990: PUSH
60991: LD_INT 2
60993: ARRAY
60994: PPUSH
60995: CALL_OW 458
60999: AND
61000: IFFALSE 61094
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61002: LD_EXP 59
61006: PUSH
61007: LD_VAR 0 1
61011: ARRAY
61012: PUSH
61013: LD_VAR 0 2
61017: ARRAY
61018: PUSH
61019: LD_INT 1
61021: ARRAY
61022: PPUSH
61023: LD_EXP 59
61027: PUSH
61028: LD_VAR 0 1
61032: ARRAY
61033: PUSH
61034: LD_VAR 0 2
61038: ARRAY
61039: PUSH
61040: LD_INT 2
61042: ARRAY
61043: PPUSH
61044: LD_VAR 0 3
61048: PPUSH
61049: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61053: LD_ADDR_EXP 59
61057: PUSH
61058: LD_EXP 59
61062: PPUSH
61063: LD_VAR 0 1
61067: PPUSH
61068: LD_EXP 59
61072: PUSH
61073: LD_VAR 0 1
61077: ARRAY
61078: PPUSH
61079: LD_VAR 0 2
61083: PPUSH
61084: CALL_OW 3
61088: PPUSH
61089: CALL_OW 1
61093: ST_TO_ADDR
// end ; end ;
61094: GO 60738
61096: POP
61097: POP
// end ;
61098: GO 60609
61100: POP
61101: POP
// end ;
61102: PPOPN 4
61104: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
61105: LD_INT 0
61107: PPUSH
61108: PPUSH
61109: PPUSH
61110: PPUSH
// result := false ;
61111: LD_ADDR_VAR 0 4
61115: PUSH
61116: LD_INT 0
61118: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61119: LD_VAR 0 1
61123: PPUSH
61124: CALL_OW 264
61128: PUSH
61129: LD_INT 81
61131: EQUAL
61132: NOT
61133: IFFALSE 61137
// exit ;
61135: GO 61507
// side := GetSide ( unit ) ;
61137: LD_ADDR_VAR 0 6
61141: PUSH
61142: LD_VAR 0 1
61146: PPUSH
61147: CALL_OW 255
61151: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61152: LD_ADDR_VAR 0 5
61156: PUSH
61157: LD_EXP 58
61161: PPUSH
61162: LD_VAR 0 1
61166: PPUSH
61167: CALL 7951 0 2
61171: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61172: LD_EXP 59
61176: PUSH
61177: LD_VAR 0 5
61181: ARRAY
61182: PUSH
61183: LD_EXP 60
61187: GREATEREQUAL
61188: IFFALSE 61192
// exit ;
61190: GO 61507
// ComMoveXY ( unit , x , y ) ;
61192: LD_VAR 0 1
61196: PPUSH
61197: LD_VAR 0 2
61201: PPUSH
61202: LD_VAR 0 3
61206: PPUSH
61207: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61211: LD_INT 35
61213: PPUSH
61214: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61218: LD_VAR 0 1
61222: PPUSH
61223: LD_VAR 0 2
61227: PPUSH
61228: LD_VAR 0 3
61232: PPUSH
61233: CALL 40007 0 3
61237: NOT
61238: IFFALSE 61251
61240: PUSH
61241: LD_VAR 0 1
61245: PPUSH
61246: CALL_OW 314
61250: AND
61251: IFFALSE 61255
// exit ;
61253: GO 61507
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61255: LD_VAR 0 2
61259: PPUSH
61260: LD_VAR 0 3
61264: PPUSH
61265: CALL_OW 428
61269: PUSH
61270: LD_VAR 0 1
61274: EQUAL
61275: IFFALSE 61289
61277: PUSH
61278: LD_VAR 0 1
61282: PPUSH
61283: CALL_OW 314
61287: NOT
61288: AND
61289: IFFALSE 61211
// if MineAtPos ( x , y ) then
61291: LD_VAR 0 2
61295: PPUSH
61296: LD_VAR 0 3
61300: PPUSH
61301: CALL_OW 458
61305: IFFALSE 61309
// exit ;
61307: GO 61507
// if your_side = side then
61309: LD_OWVAR 2
61313: PUSH
61314: LD_VAR 0 6
61318: EQUAL
61319: IFFALSE 61338
// PlaySoundXY ( x , y , PlantMine ) ;
61321: LD_VAR 0 2
61325: PPUSH
61326: LD_VAR 0 3
61330: PPUSH
61331: LD_STRING PlantMine
61333: PPUSH
61334: CALL_OW 366
// repeat wait ( 1 ) ;
61338: LD_INT 1
61340: PPUSH
61341: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61345: LD_VAR 0 2
61349: PPUSH
61350: LD_VAR 0 3
61354: PPUSH
61355: LD_VAR 0 6
61359: PPUSH
61360: LD_INT 0
61362: PPUSH
61363: CALL_OW 454
61367: IFFALSE 61338
// if MineAtPos ( x , y ) then
61369: LD_VAR 0 2
61373: PPUSH
61374: LD_VAR 0 3
61378: PPUSH
61379: CALL_OW 458
61383: IFFALSE 61499
// begin for i in minerMinesList [ index ] do
61385: LD_ADDR_VAR 0 7
61389: PUSH
61390: LD_EXP 59
61394: PUSH
61395: LD_VAR 0 5
61399: ARRAY
61400: PUSH
61401: FOR_IN
61402: IFFALSE 61444
// if i [ 1 ] = x and i [ 2 ] = y then
61404: LD_VAR 0 7
61408: PUSH
61409: LD_INT 1
61411: ARRAY
61412: PUSH
61413: LD_VAR 0 2
61417: EQUAL
61418: IFFALSE 61436
61420: PUSH
61421: LD_VAR 0 7
61425: PUSH
61426: LD_INT 2
61428: ARRAY
61429: PUSH
61430: LD_VAR 0 3
61434: EQUAL
61435: AND
61436: IFFALSE 61442
// exit ;
61438: POP
61439: POP
61440: GO 61507
61442: GO 61401
61444: POP
61445: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61446: LD_ADDR_EXP 59
61450: PUSH
61451: LD_EXP 59
61455: PPUSH
61456: LD_VAR 0 5
61460: PUSH
61461: LD_EXP 59
61465: PUSH
61466: LD_VAR 0 5
61470: ARRAY
61471: PUSH
61472: LD_INT 1
61474: PLUS
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PPUSH
61480: LD_VAR 0 2
61484: PUSH
61485: LD_VAR 0 3
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PPUSH
61494: CALL 8168 0 3
61498: ST_TO_ADDR
// end ; result := true ;
61499: LD_ADDR_VAR 0 4
61503: PUSH
61504: LD_INT 1
61506: ST_TO_ADDR
// end ;
61507: LD_VAR 0 4
61511: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61512: LD_INT 0
61514: PPUSH
61515: PPUSH
61516: PPUSH
// if not unit in minersList then
61517: LD_VAR 0 1
61521: PUSH
61522: LD_EXP 58
61526: IN
61527: NOT
61528: IFFALSE 61532
// exit ;
61530: GO 61739
// index := GetElementIndex ( minersList , unit ) ;
61532: LD_ADDR_VAR 0 6
61536: PUSH
61537: LD_EXP 58
61541: PPUSH
61542: LD_VAR 0 1
61546: PPUSH
61547: CALL 7951 0 2
61551: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61552: LD_ADDR_VAR 0 5
61556: PUSH
61557: DOUBLE
61558: LD_EXP 59
61562: PUSH
61563: LD_VAR 0 6
61567: ARRAY
61568: INC
61569: ST_TO_ADDR
61570: LD_INT 1
61572: PUSH
61573: FOR_DOWNTO
61574: IFFALSE 61737
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61576: LD_EXP 59
61580: PUSH
61581: LD_VAR 0 6
61585: ARRAY
61586: PUSH
61587: LD_VAR 0 5
61591: ARRAY
61592: PUSH
61593: LD_INT 1
61595: ARRAY
61596: PPUSH
61597: LD_EXP 59
61601: PUSH
61602: LD_VAR 0 6
61606: ARRAY
61607: PUSH
61608: LD_VAR 0 5
61612: ARRAY
61613: PUSH
61614: LD_INT 2
61616: ARRAY
61617: PPUSH
61618: LD_VAR 0 2
61622: PPUSH
61623: LD_VAR 0 3
61627: PPUSH
61628: CALL_OW 298
61632: PUSH
61633: LD_INT 6
61635: LESS
61636: IFFALSE 61735
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61638: LD_EXP 59
61642: PUSH
61643: LD_VAR 0 6
61647: ARRAY
61648: PUSH
61649: LD_VAR 0 5
61653: ARRAY
61654: PUSH
61655: LD_INT 1
61657: ARRAY
61658: PPUSH
61659: LD_EXP 59
61663: PUSH
61664: LD_VAR 0 6
61668: ARRAY
61669: PUSH
61670: LD_VAR 0 5
61674: ARRAY
61675: PUSH
61676: LD_INT 2
61678: ARRAY
61679: PPUSH
61680: LD_VAR 0 1
61684: PPUSH
61685: CALL_OW 255
61689: PPUSH
61690: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61694: LD_ADDR_EXP 59
61698: PUSH
61699: LD_EXP 59
61703: PPUSH
61704: LD_VAR 0 6
61708: PPUSH
61709: LD_EXP 59
61713: PUSH
61714: LD_VAR 0 6
61718: ARRAY
61719: PPUSH
61720: LD_VAR 0 5
61724: PPUSH
61725: CALL_OW 3
61729: PPUSH
61730: CALL_OW 1
61734: ST_TO_ADDR
// end ; end ;
61735: GO 61573
61737: POP
61738: POP
// end ;
61739: LD_VAR 0 4
61743: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61744: LD_INT 0
61746: PPUSH
61747: PPUSH
61748: PPUSH
61749: PPUSH
61750: PPUSH
61751: PPUSH
61752: PPUSH
61753: PPUSH
61754: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61755: LD_VAR 0 1
61759: PPUSH
61760: CALL_OW 264
61764: PUSH
61765: LD_INT 81
61767: EQUAL
61768: NOT
61769: IFTRUE 61784
61771: PUSH
61772: LD_VAR 0 1
61776: PUSH
61777: LD_EXP 58
61781: IN
61782: NOT
61783: OR
61784: IFFALSE 61788
// exit ;
61786: GO 62114
// index := GetElementIndex ( minersList , unit ) ;
61788: LD_ADDR_VAR 0 6
61792: PUSH
61793: LD_EXP 58
61797: PPUSH
61798: LD_VAR 0 1
61802: PPUSH
61803: CALL 7951 0 2
61807: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61808: LD_ADDR_VAR 0 8
61812: PUSH
61813: LD_EXP 60
61817: PUSH
61818: LD_EXP 59
61822: PUSH
61823: LD_VAR 0 6
61827: ARRAY
61828: MINUS
61829: ST_TO_ADDR
// if not minesFreeAmount then
61830: LD_VAR 0 8
61834: NOT
61835: IFFALSE 61839
// exit ;
61837: GO 62114
// tmp := [ ] ;
61839: LD_ADDR_VAR 0 7
61843: PUSH
61844: EMPTY
61845: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61846: LD_ADDR_VAR 0 5
61850: PUSH
61851: DOUBLE
61852: LD_INT 1
61854: DEC
61855: ST_TO_ADDR
61856: LD_VAR 0 8
61860: PUSH
61861: FOR_TO
61862: IFFALSE 62061
// begin _d := rand ( 0 , 5 ) ;
61864: LD_ADDR_VAR 0 11
61868: PUSH
61869: LD_INT 0
61871: PPUSH
61872: LD_INT 5
61874: PPUSH
61875: CALL_OW 12
61879: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61880: LD_ADDR_VAR 0 12
61884: PUSH
61885: LD_INT 2
61887: PPUSH
61888: LD_INT 6
61890: PPUSH
61891: CALL_OW 12
61895: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61896: LD_ADDR_VAR 0 9
61900: PUSH
61901: LD_VAR 0 2
61905: PPUSH
61906: LD_VAR 0 11
61910: PPUSH
61911: LD_VAR 0 12
61915: PPUSH
61916: CALL_OW 272
61920: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61921: LD_ADDR_VAR 0 10
61925: PUSH
61926: LD_VAR 0 3
61930: PPUSH
61931: LD_VAR 0 11
61935: PPUSH
61936: LD_VAR 0 12
61940: PPUSH
61941: CALL_OW 273
61945: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61946: LD_VAR 0 9
61950: PPUSH
61951: LD_VAR 0 10
61955: PPUSH
61956: CALL_OW 488
61960: IFFALSE 61984
61962: PUSH
61963: LD_VAR 0 9
61967: PUSH
61968: LD_VAR 0 10
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_VAR 0 7
61981: IN
61982: NOT
61983: AND
61984: IFFALSE 62003
61986: PUSH
61987: LD_VAR 0 9
61991: PPUSH
61992: LD_VAR 0 10
61996: PPUSH
61997: CALL_OW 458
62001: NOT
62002: AND
62003: IFFALSE 62045
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62005: LD_ADDR_VAR 0 7
62009: PUSH
62010: LD_VAR 0 7
62014: PPUSH
62015: LD_VAR 0 7
62019: PUSH
62020: LD_INT 1
62022: PLUS
62023: PPUSH
62024: LD_VAR 0 9
62028: PUSH
62029: LD_VAR 0 10
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PPUSH
62038: CALL_OW 1
62042: ST_TO_ADDR
62043: GO 62059
// i := i - 1 ;
62045: LD_ADDR_VAR 0 5
62049: PUSH
62050: LD_VAR 0 5
62054: PUSH
62055: LD_INT 1
62057: MINUS
62058: ST_TO_ADDR
// end ;
62059: GO 61861
62061: POP
62062: POP
// for i in tmp do
62063: LD_ADDR_VAR 0 5
62067: PUSH
62068: LD_VAR 0 7
62072: PUSH
62073: FOR_IN
62074: IFFALSE 62112
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62076: LD_VAR 0 1
62080: PPUSH
62081: LD_VAR 0 5
62085: PUSH
62086: LD_INT 1
62088: ARRAY
62089: PPUSH
62090: LD_VAR 0 5
62094: PUSH
62095: LD_INT 2
62097: ARRAY
62098: PPUSH
62099: CALL 61105 0 3
62103: NOT
62104: IFFALSE 62110
// exit ;
62106: POP
62107: POP
62108: GO 62114
62110: GO 62073
62112: POP
62113: POP
// end ;
62114: LD_VAR 0 4
62118: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62119: LD_INT 0
62121: PPUSH
62122: PPUSH
62123: PPUSH
62124: PPUSH
62125: PPUSH
62126: PPUSH
62127: PPUSH
62128: PPUSH
62129: PPUSH
// if GetClass ( unit ) <> class_sniper then
62130: LD_VAR 0 1
62134: PPUSH
62135: CALL_OW 257
62139: PUSH
62140: LD_INT 5
62142: NONEQUAL
62143: IFFALSE 62147
// exit ;
62145: GO 62617
// dist := 8 ;
62147: LD_ADDR_VAR 0 5
62151: PUSH
62152: LD_INT 8
62154: ST_TO_ADDR
// viewRange := 12 ;
62155: LD_ADDR_VAR 0 8
62159: PUSH
62160: LD_INT 12
62162: ST_TO_ADDR
// side := GetSide ( unit ) ;
62163: LD_ADDR_VAR 0 6
62167: PUSH
62168: LD_VAR 0 1
62172: PPUSH
62173: CALL_OW 255
62177: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62178: LD_INT 61
62180: PPUSH
62181: LD_VAR 0 6
62185: PPUSH
62186: CALL_OW 321
62190: PUSH
62191: LD_INT 2
62193: EQUAL
62194: IFFALSE 62204
// viewRange := 16 ;
62196: LD_ADDR_VAR 0 8
62200: PUSH
62201: LD_INT 16
62203: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62204: LD_VAR 0 1
62208: PPUSH
62209: LD_VAR 0 2
62213: PPUSH
62214: LD_VAR 0 3
62218: PPUSH
62219: CALL_OW 297
62223: PUSH
62224: LD_VAR 0 5
62228: GREATER
62229: IFFALSE 62308
// begin ComMoveXY ( unit , x , y ) ;
62231: LD_VAR 0 1
62235: PPUSH
62236: LD_VAR 0 2
62240: PPUSH
62241: LD_VAR 0 3
62245: PPUSH
62246: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62250: LD_INT 35
62252: PPUSH
62253: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62257: LD_VAR 0 1
62261: PPUSH
62262: LD_VAR 0 2
62266: PPUSH
62267: LD_VAR 0 3
62271: PPUSH
62272: CALL 40007 0 3
62276: NOT
62277: IFFALSE 62281
// exit ;
62279: GO 62617
// until GetDistUnitXY ( unit , x , y ) < dist ;
62281: LD_VAR 0 1
62285: PPUSH
62286: LD_VAR 0 2
62290: PPUSH
62291: LD_VAR 0 3
62295: PPUSH
62296: CALL_OW 297
62300: PUSH
62301: LD_VAR 0 5
62305: LESS
62306: IFFALSE 62250
// end ; ComTurnXY ( unit , x , y ) ;
62308: LD_VAR 0 1
62312: PPUSH
62313: LD_VAR 0 2
62317: PPUSH
62318: LD_VAR 0 3
62322: PPUSH
62323: CALL_OW 118
// repeat if Multiplayer then
62327: LD_OWVAR 4
62331: IFFALSE 62342
// wait ( 35 ) else
62333: LD_INT 35
62335: PPUSH
62336: CALL_OW 67
62340: GO 62349
// wait ( 5 ) ;
62342: LD_INT 5
62344: PPUSH
62345: CALL_OW 67
// _d := GetDir ( unit ) ;
62349: LD_ADDR_VAR 0 11
62353: PUSH
62354: LD_VAR 0 1
62358: PPUSH
62359: CALL_OW 254
62363: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62364: LD_ADDR_VAR 0 7
62368: PUSH
62369: LD_VAR 0 1
62373: PPUSH
62374: CALL_OW 250
62378: PPUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: CALL_OW 251
62388: PPUSH
62389: LD_VAR 0 2
62393: PPUSH
62394: LD_VAR 0 3
62398: PPUSH
62399: CALL 42643 0 4
62403: ST_TO_ADDR
// until dir = _d ;
62404: LD_VAR 0 7
62408: PUSH
62409: LD_VAR 0 11
62413: EQUAL
62414: IFFALSE 62327
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62416: LD_ADDR_VAR 0 9
62420: PUSH
62421: LD_VAR 0 1
62425: PPUSH
62426: CALL_OW 250
62430: PPUSH
62431: LD_VAR 0 7
62435: PPUSH
62436: LD_VAR 0 5
62440: PPUSH
62441: CALL_OW 272
62445: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62446: LD_ADDR_VAR 0 10
62450: PUSH
62451: LD_VAR 0 1
62455: PPUSH
62456: CALL_OW 251
62460: PPUSH
62461: LD_VAR 0 7
62465: PPUSH
62466: LD_VAR 0 5
62470: PPUSH
62471: CALL_OW 273
62475: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62476: LD_VAR 0 9
62480: PPUSH
62481: LD_VAR 0 10
62485: PPUSH
62486: CALL_OW 488
62490: NOT
62491: IFFALSE 62495
// exit ;
62493: GO 62617
// ComAnimCustom ( unit , 1 ) ;
62495: LD_VAR 0 1
62499: PPUSH
62500: LD_INT 1
62502: PPUSH
62503: CALL_OW 592
// p := 0 ;
62507: LD_ADDR_VAR 0 12
62511: PUSH
62512: LD_INT 0
62514: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62515: LD_VAR 0 9
62519: PPUSH
62520: LD_VAR 0 10
62524: PPUSH
62525: LD_VAR 0 6
62529: PPUSH
62530: LD_VAR 0 8
62534: PPUSH
62535: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62539: LD_INT 35
62541: PPUSH
62542: CALL_OW 67
// p := Inc ( p ) ;
62546: LD_ADDR_VAR 0 12
62550: PUSH
62551: LD_VAR 0 12
62555: PPUSH
62556: CALL 42599 0 1
62560: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62561: LD_VAR 0 12
62565: PUSH
62566: LD_INT 3
62568: EQUAL
62569: IFTRUE 62583
62571: PUSH
62572: LD_VAR 0 1
62576: PPUSH
62577: CALL_OW 302
62581: NOT
62582: OR
62583: IFTRUE 62596
62585: PUSH
62586: LD_VAR 0 1
62590: PPUSH
62591: CALL_OW 301
62595: OR
62596: IFFALSE 62539
// RemoveSeeing ( _x , _y , side ) ;
62598: LD_VAR 0 9
62602: PPUSH
62603: LD_VAR 0 10
62607: PPUSH
62608: LD_VAR 0 6
62612: PPUSH
62613: CALL_OW 331
// end ;
62617: LD_VAR 0 4
62621: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62622: LD_INT 0
62624: PPUSH
62625: PPUSH
62626: PPUSH
62627: PPUSH
62628: PPUSH
62629: PPUSH
62630: PPUSH
62631: PPUSH
62632: PPUSH
62633: PPUSH
62634: PPUSH
// if not unit then
62635: LD_VAR 0 1
62639: NOT
62640: IFFALSE 62644
// exit ;
62642: GO 62915
// side := GetSide ( unit ) ;
62644: LD_ADDR_VAR 0 3
62648: PUSH
62649: LD_VAR 0 1
62653: PPUSH
62654: CALL_OW 255
62658: ST_TO_ADDR
// x := GetX ( unit ) ;
62659: LD_ADDR_VAR 0 5
62663: PUSH
62664: LD_VAR 0 1
62668: PPUSH
62669: CALL_OW 250
62673: ST_TO_ADDR
// y := GetY ( unit ) ;
62674: LD_ADDR_VAR 0 6
62678: PUSH
62679: LD_VAR 0 1
62683: PPUSH
62684: CALL_OW 251
62688: ST_TO_ADDR
// r := 8 ;
62689: LD_ADDR_VAR 0 4
62693: PUSH
62694: LD_INT 8
62696: ST_TO_ADDR
// if x - r < 0 then
62697: LD_VAR 0 5
62701: PUSH
62702: LD_VAR 0 4
62706: MINUS
62707: PUSH
62708: LD_INT 0
62710: LESS
62711: IFFALSE 62723
// min_x := 0 else
62713: LD_ADDR_VAR 0 7
62717: PUSH
62718: LD_INT 0
62720: ST_TO_ADDR
62721: GO 62739
// min_x := x - r ;
62723: LD_ADDR_VAR 0 7
62727: PUSH
62728: LD_VAR 0 5
62732: PUSH
62733: LD_VAR 0 4
62737: MINUS
62738: ST_TO_ADDR
// if y - r < 0 then
62739: LD_VAR 0 6
62743: PUSH
62744: LD_VAR 0 4
62748: MINUS
62749: PUSH
62750: LD_INT 0
62752: LESS
62753: IFFALSE 62765
// min_y := 0 else
62755: LD_ADDR_VAR 0 8
62759: PUSH
62760: LD_INT 0
62762: ST_TO_ADDR
62763: GO 62781
// min_y := y - r ;
62765: LD_ADDR_VAR 0 8
62769: PUSH
62770: LD_VAR 0 6
62774: PUSH
62775: LD_VAR 0 4
62779: MINUS
62780: ST_TO_ADDR
// max_x := x + r ;
62781: LD_ADDR_VAR 0 9
62785: PUSH
62786: LD_VAR 0 5
62790: PUSH
62791: LD_VAR 0 4
62795: PLUS
62796: ST_TO_ADDR
// max_y := y + r ;
62797: LD_ADDR_VAR 0 10
62801: PUSH
62802: LD_VAR 0 6
62806: PUSH
62807: LD_VAR 0 4
62811: PLUS
62812: ST_TO_ADDR
// for _x = min_x to max_x do
62813: LD_ADDR_VAR 0 11
62817: PUSH
62818: DOUBLE
62819: LD_VAR 0 7
62823: DEC
62824: ST_TO_ADDR
62825: LD_VAR 0 9
62829: PUSH
62830: FOR_TO
62831: IFFALSE 62913
// for _y = min_y to max_y do
62833: LD_ADDR_VAR 0 12
62837: PUSH
62838: DOUBLE
62839: LD_VAR 0 8
62843: DEC
62844: ST_TO_ADDR
62845: LD_VAR 0 10
62849: PUSH
62850: FOR_TO
62851: IFFALSE 62909
// begin if not ValidHex ( _x , _y ) then
62853: LD_VAR 0 11
62857: PPUSH
62858: LD_VAR 0 12
62862: PPUSH
62863: CALL_OW 488
62867: NOT
62868: IFFALSE 62872
// continue ;
62870: GO 62850
// if MineAtPos ( _x , _y ) then
62872: LD_VAR 0 11
62876: PPUSH
62877: LD_VAR 0 12
62881: PPUSH
62882: CALL_OW 458
62886: IFFALSE 62907
// ViewMineAtPos ( _x , _y , side ) ;
62888: LD_VAR 0 11
62892: PPUSH
62893: LD_VAR 0 12
62897: PPUSH
62898: LD_VAR 0 3
62902: PPUSH
62903: CALL_OW 457
// end ;
62907: GO 62850
62909: POP
62910: POP
62911: GO 62830
62913: POP
62914: POP
// end ;
62915: LD_VAR 0 2
62919: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
62920: LD_INT 0
62922: PPUSH
62923: PPUSH
62924: PPUSH
62925: PPUSH
62926: PPUSH
62927: PPUSH
62928: PPUSH
// if not units then
62929: LD_VAR 0 1
62933: NOT
62934: IFFALSE 62938
// exit ;
62936: GO 63402
// scaners := [ ] ;
62938: LD_ADDR_VAR 0 6
62942: PUSH
62943: EMPTY
62944: ST_TO_ADDR
// for i in units do
62945: LD_ADDR_VAR 0 3
62949: PUSH
62950: LD_VAR 0 1
62954: PUSH
62955: FOR_IN
62956: IFFALSE 63113
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62958: LD_VAR 0 3
62962: PPUSH
62963: CALL_OW 264
62967: PUSH
62968: LD_INT 11
62970: NONEQUAL
62971: IFTRUE 62985
62973: PUSH
62974: LD_VAR 0 3
62978: PPUSH
62979: CALL_OW 302
62983: NOT
62984: OR
62985: IFTRUE 63002
62987: PUSH
62988: LD_VAR 0 3
62992: PPUSH
62993: CALL_OW 110
62997: PUSH
62998: LD_INT 502
63000: EQUAL
63001: OR
63002: IFFALSE 63006
// continue ;
63004: GO 62955
// ComStop ( i ) ;
63006: LD_VAR 0 3
63010: PPUSH
63011: CALL_OW 141
// x := GetX ( i ) ;
63015: LD_ADDR_VAR 0 4
63019: PUSH
63020: LD_VAR 0 3
63024: PPUSH
63025: CALL_OW 250
63029: ST_TO_ADDR
// y := GetY ( i ) ;
63030: LD_ADDR_VAR 0 5
63034: PUSH
63035: LD_VAR 0 3
63039: PPUSH
63040: CALL_OW 251
63044: ST_TO_ADDR
// if GetSide ( i ) = your_side then
63045: LD_VAR 0 3
63049: PPUSH
63050: CALL_OW 255
63054: PUSH
63055: LD_OWVAR 2
63059: EQUAL
63060: IFFALSE 63079
// PlaySoundXY ( x , y , mineDetector ) ;
63062: LD_VAR 0 4
63066: PPUSH
63067: LD_VAR 0 5
63071: PPUSH
63072: LD_STRING mineDetector
63074: PPUSH
63075: CALL_OW 366
// scaners := Join ( scaners , i ) ;
63079: LD_ADDR_VAR 0 6
63083: PUSH
63084: LD_VAR 0 6
63088: PPUSH
63089: LD_VAR 0 3
63093: PPUSH
63094: CALL 41226 0 2
63098: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
63099: LD_VAR 0 3
63103: PPUSH
63104: LD_INT 502
63106: PPUSH
63107: CALL_OW 109
// end ;
63111: GO 62955
63113: POP
63114: POP
// if not scaners then
63115: LD_VAR 0 6
63119: NOT
63120: IFFALSE 63124
// exit ;
63122: GO 63402
// wait ( 3 ) ;
63124: LD_INT 3
63126: PPUSH
63127: CALL_OW 67
// timer := 6 ;
63131: LD_ADDR_VAR 0 7
63135: PUSH
63136: LD_INT 6
63138: ST_TO_ADDR
// repeat for i in scaners do
63139: LD_ADDR_VAR 0 3
63143: PUSH
63144: LD_VAR 0 6
63148: PUSH
63149: FOR_IN
63150: IFFALSE 63300
// begin side := GetSide ( i ) ;
63152: LD_ADDR_VAR 0 8
63156: PUSH
63157: LD_VAR 0 3
63161: PPUSH
63162: CALL_OW 255
63166: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63167: LD_VAR 0 3
63171: PPUSH
63172: CALL_OW 302
63176: NOT
63177: IFTRUE 63190
63179: PUSH
63180: LD_VAR 0 3
63184: PPUSH
63185: CALL_OW 314
63189: OR
63190: IFTRUE 63221
63192: PUSH
63193: LD_VAR 0 3
63197: PPUSH
63198: CALL_OW 263
63202: PUSH
63203: LD_INT 1
63205: EQUAL
63206: IFFALSE 63220
63208: PUSH
63209: LD_VAR 0 3
63213: PPUSH
63214: CALL_OW 311
63218: NOT
63219: AND
63220: OR
63221: IFFALSE 63265
// begin SetUnitDisplayNumber ( i , 0 ) ;
63223: LD_VAR 0 3
63227: PPUSH
63228: LD_INT 0
63230: PPUSH
63231: CALL_OW 505
// SetTag ( i , 0 ) ;
63235: LD_VAR 0 3
63239: PPUSH
63240: LD_INT 0
63242: PPUSH
63243: CALL_OW 109
// scaners := scaners diff i ;
63247: LD_ADDR_VAR 0 6
63251: PUSH
63252: LD_VAR 0 6
63256: PUSH
63257: LD_VAR 0 3
63261: DIFF
63262: ST_TO_ADDR
// continue ;
63263: GO 63149
// end ; if side in [ your_side , 9 ] then
63265: LD_VAR 0 8
63269: PUSH
63270: LD_OWVAR 2
63274: PUSH
63275: LD_INT 9
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: IN
63282: IFFALSE 63298
// SetUnitDisplayNumber ( i , timer ) ;
63284: LD_VAR 0 3
63288: PPUSH
63289: LD_VAR 0 7
63293: PPUSH
63294: CALL_OW 505
// end ;
63298: GO 63149
63300: POP
63301: POP
// if not scaners then
63302: LD_VAR 0 6
63306: NOT
63307: IFFALSE 63311
// exit ;
63309: GO 63402
// timer := Dec ( timer ) ;
63311: LD_ADDR_VAR 0 7
63315: PUSH
63316: LD_VAR 0 7
63320: PPUSH
63321: CALL 42621 0 1
63325: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63326: LD_INT 35
63328: PPUSH
63329: CALL_OW 67
// until timer = 0 ;
63333: LD_VAR 0 7
63337: PUSH
63338: LD_INT 0
63340: EQUAL
63341: IFFALSE 63139
// if not scaners then
63343: LD_VAR 0 6
63347: NOT
63348: IFFALSE 63352
// exit ;
63350: GO 63402
// for i in scaners do
63352: LD_ADDR_VAR 0 3
63356: PUSH
63357: LD_VAR 0 6
63361: PUSH
63362: FOR_IN
63363: IFFALSE 63400
// begin SetUnitDisplayNumber ( i , 0 ) ;
63365: LD_VAR 0 3
63369: PPUSH
63370: LD_INT 0
63372: PPUSH
63373: CALL_OW 505
// SetTag ( i , 0 ) ;
63377: LD_VAR 0 3
63381: PPUSH
63382: LD_INT 0
63384: PPUSH
63385: CALL_OW 109
// RevealDetectorMine ( i ) ;
63389: LD_VAR 0 3
63393: PPUSH
63394: CALL 62622 0 1
// end ;
63398: GO 63362
63400: POP
63401: POP
// end ;
63402: LD_VAR 0 2
63406: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63407: LD_INT 0
63409: PPUSH
// if p1 = mine_detector_mode then
63410: LD_VAR 0 2
63414: PUSH
63415: LD_INT 103
63417: EQUAL
63418: IFFALSE 63429
// DetectMine ( units ) ;
63420: LD_VAR 0 1
63424: PPUSH
63425: CALL 62920 0 1
// end ; end_of_file
63429: LD_VAR 0 7
63433: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63434: PPOPN 6
63436: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63437: LD_INT 0
63439: PPUSH
// begin if not units then
63440: LD_VAR 0 1
63444: NOT
63445: IFFALSE 63449
// exit ;
63447: GO 63483
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63449: LD_VAR 0 1
63453: PPUSH
63454: LD_VAR 0 2
63458: PPUSH
63459: LD_VAR 0 3
63463: PPUSH
63464: LD_VAR 0 4
63468: PPUSH
63469: LD_VAR 0 5
63473: PPUSH
63474: LD_VAR 0 6
63478: PPUSH
63479: CALL 63407 0 6
// end ;
63483: PPOPN 7
63485: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63486: LD_EXP 3
63490: PUSH
63491: LD_INT 4
63493: EQUAL
63494: IFFALSE 63530
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63496: LD_STRING setGameDifficulty(
63498: PUSH
63499: LD_OWVAR 67
63503: STR
63504: PUSH
63505: LD_STRING )
63507: STR
63508: PPUSH
63509: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63513: LD_STRING displayDifficulty(
63515: PUSH
63516: LD_OWVAR 67
63520: STR
63521: PUSH
63522: LD_STRING )
63524: STR
63525: PPUSH
63526: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63530: CALL 63559 0 0
// end ; end_of_file
63534: PPOPN 1
63536: END
// every 0 0$1 do
63537: GO 63539
63539: DISABLE
// begin enable ;
63540: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63541: LD_STRING updateTimer(
63543: PUSH
63544: LD_OWVAR 1
63548: STR
63549: PUSH
63550: LD_STRING );
63552: STR
63553: PPUSH
63554: CALL_OW 559
// end ;
63558: END
// export function SOS_MapStart ( ) ; begin
63559: LD_INT 0
63561: PPUSH
// UpdateFactoryWaypoints ( ) ;
63562: CALL 64493 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63566: CALL 64745 0 0
// ParseMultiDataToLua ( ) ;
63570: CALL 64892 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63574: LD_STRING setSpecLogoNumber(
63576: PUSH
63577: LD_INT 2
63579: STR
63580: PUSH
63581: LD_STRING ,
63583: STR
63584: PUSH
63585: LD_INT 1
63587: STR
63588: PUSH
63589: LD_STRING )
63591: STR
63592: PPUSH
63593: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63597: LD_STRING setSpecLogoNumber(
63599: PUSH
63600: LD_INT 3
63602: STR
63603: PUSH
63604: LD_STRING ,
63606: STR
63607: PUSH
63608: LD_INT 2
63610: STR
63611: PUSH
63612: LD_STRING )
63614: STR
63615: PPUSH
63616: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63620: LD_STRING setSpecLogoNumber(
63622: PUSH
63623: LD_INT 4
63625: STR
63626: PUSH
63627: LD_STRING ,
63629: STR
63630: PUSH
63631: LD_INT 3
63633: STR
63634: PUSH
63635: LD_STRING )
63637: STR
63638: PPUSH
63639: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63643: LD_STRING setSpecLogoNumber(
63645: PUSH
63646: LD_INT 5
63648: STR
63649: PUSH
63650: LD_STRING ,
63652: STR
63653: PUSH
63654: LD_INT 4
63656: STR
63657: PUSH
63658: LD_STRING )
63660: STR
63661: PPUSH
63662: CALL_OW 559
// end ;
63666: LD_VAR 0 1
63670: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63671: LD_INT 0
63673: PPUSH
63674: PPUSH
63675: PPUSH
63676: PPUSH
63677: PPUSH
63678: PPUSH
63679: PPUSH
63680: PPUSH
63681: PPUSH
// for i := 1 to 8 do
63682: LD_ADDR_VAR 0 2
63686: PUSH
63687: DOUBLE
63688: LD_INT 1
63690: DEC
63691: ST_TO_ADDR
63692: LD_INT 8
63694: PUSH
63695: FOR_TO
63696: IFFALSE 64081
// begin if mpSidePositions [ i ] then
63698: LD_EXP 7
63702: PUSH
63703: LD_VAR 0 2
63707: ARRAY
63708: IFFALSE 64079
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63710: LD_ADDR_VAR 0 7
63714: PUSH
63715: LD_INT 22
63717: PUSH
63718: LD_VAR 0 2
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 21
63729: PUSH
63730: LD_INT 1
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PPUSH
63741: CALL_OW 69
63745: PPUSH
63746: CALL 5250 0 1
63750: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63751: LD_ADDR_VAR 0 9
63755: PUSH
63756: LD_INT 22
63758: PUSH
63759: LD_VAR 0 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 2
63770: PUSH
63771: LD_INT 30
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 30
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: LIST
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PPUSH
63800: CALL_OW 69
63804: ST_TO_ADDR
// crates := 0 ;
63805: LD_ADDR_VAR 0 4
63809: PUSH
63810: LD_INT 0
63812: ST_TO_ADDR
// oil := 0 ;
63813: LD_ADDR_VAR 0 5
63817: PUSH
63818: LD_INT 0
63820: ST_TO_ADDR
// sib := 0 ;
63821: LD_ADDR_VAR 0 6
63825: PUSH
63826: LD_INT 0
63828: ST_TO_ADDR
// if bases then
63829: LD_VAR 0 9
63833: IFFALSE 63939
// begin for j in bases do
63835: LD_ADDR_VAR 0 3
63839: PUSH
63840: LD_VAR 0 9
63844: PUSH
63845: FOR_IN
63846: IFFALSE 63937
// begin base := GetBase ( j ) ;
63848: LD_ADDR_VAR 0 8
63852: PUSH
63853: LD_VAR 0 3
63857: PPUSH
63858: CALL_OW 274
63862: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63863: LD_ADDR_VAR 0 4
63867: PUSH
63868: LD_VAR 0 4
63872: PUSH
63873: LD_VAR 0 8
63877: PPUSH
63878: LD_INT 1
63880: PPUSH
63881: CALL_OW 275
63885: PLUS
63886: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63887: LD_ADDR_VAR 0 5
63891: PUSH
63892: LD_VAR 0 5
63896: PUSH
63897: LD_VAR 0 8
63901: PPUSH
63902: LD_INT 2
63904: PPUSH
63905: CALL_OW 275
63909: PLUS
63910: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63911: LD_ADDR_VAR 0 6
63915: PUSH
63916: LD_VAR 0 6
63920: PUSH
63921: LD_VAR 0 8
63925: PPUSH
63926: LD_INT 3
63928: PPUSH
63929: CALL_OW 275
63933: PLUS
63934: ST_TO_ADDR
// end ;
63935: GO 63845
63937: POP
63938: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63939: LD_STRING setSpecText(
63941: PUSH
63942: LD_VAR 0 2
63946: STR
63947: PUSH
63948: LD_STRING ,
63950: STR
63951: PUSH
63952: LD_INT 2
63954: STR
63955: PUSH
63956: LD_STRING ,
63958: STR
63959: PUSH
63960: LD_VAR 0 4
63964: STR
63965: PUSH
63966: LD_STRING )
63968: STR
63969: PPUSH
63970: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63974: LD_STRING setSpecText(
63976: PUSH
63977: LD_VAR 0 2
63981: STR
63982: PUSH
63983: LD_STRING ,
63985: STR
63986: PUSH
63987: LD_INT 3
63989: STR
63990: PUSH
63991: LD_STRING ,
63993: STR
63994: PUSH
63995: LD_VAR 0 5
63999: STR
64000: PUSH
64001: LD_STRING )
64003: STR
64004: PPUSH
64005: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64009: LD_STRING setSpecText(
64011: PUSH
64012: LD_VAR 0 2
64016: STR
64017: PUSH
64018: LD_STRING ,
64020: STR
64021: PUSH
64022: LD_INT 4
64024: STR
64025: PUSH
64026: LD_STRING ,
64028: STR
64029: PUSH
64030: LD_VAR 0 6
64034: STR
64035: PUSH
64036: LD_STRING )
64038: STR
64039: PPUSH
64040: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64044: LD_STRING setSpecText(
64046: PUSH
64047: LD_VAR 0 2
64051: STR
64052: PUSH
64053: LD_STRING ,
64055: STR
64056: PUSH
64057: LD_INT 5
64059: STR
64060: PUSH
64061: LD_STRING ,
64063: STR
64064: PUSH
64065: LD_VAR 0 7
64069: STR
64070: PUSH
64071: LD_STRING )
64073: STR
64074: PPUSH
64075: CALL_OW 559
// end ; end ;
64079: GO 63695
64081: POP
64082: POP
// end ;
64083: LD_VAR 0 1
64087: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64088: LD_INT 2
64090: PUSH
64091: LD_INT 30
64093: PUSH
64094: LD_INT 0
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 30
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: PPUSH
64116: CALL_OW 69
64120: IFFALSE 64130
64122: GO 64124
64124: DISABLE
// begin enable ;
64125: ENABLE
// UpdateSpectatorBar ;
64126: CALL 63671 0 0
// end ;
64130: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64131: LD_INT 0
64133: PPUSH
// end ;
64134: LD_VAR 0 12
64138: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64139: LD_INT 0
64141: PPUSH
64142: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64143: LD_VAR 0 1
64147: NOT
64148: IFTRUE 64167
64150: PUSH
64151: LD_VAR 0 2
64155: PPUSH
64156: LD_VAR 0 3
64160: PPUSH
64161: CALL_OW 488
64165: NOT
64166: OR
64167: IFTRUE 64202
64169: PUSH
64170: LD_VAR 0 1
64174: PPUSH
64175: CALL_OW 266
64179: PUSH
64180: LD_INT 3
64182: NONEQUAL
64183: IFFALSE 64201
64185: PUSH
64186: LD_VAR 0 1
64190: PPUSH
64191: CALL_OW 247
64195: PUSH
64196: LD_INT 1
64198: EQUAL
64199: NOT
64200: AND
64201: OR
64202: IFFALSE 64206
// exit ;
64204: GO 64488
// if GetType ( factory ) = unit_human then
64206: LD_VAR 0 1
64210: PPUSH
64211: CALL_OW 247
64215: PUSH
64216: LD_INT 1
64218: EQUAL
64219: IFFALSE 64236
// factory := IsInUnit ( factory ) ;
64221: LD_ADDR_VAR 0 1
64225: PUSH
64226: LD_VAR 0 1
64230: PPUSH
64231: CALL_OW 310
64235: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64236: LD_VAR 0 1
64240: PPUSH
64241: CALL_OW 266
64245: PUSH
64246: LD_INT 3
64248: NONEQUAL
64249: IFFALSE 64253
// exit ;
64251: GO 64488
// for i := 1 to Count ( factoryWaypoints ) do
64253: LD_ADDR_VAR 0 5
64257: PUSH
64258: DOUBLE
64259: LD_INT 1
64261: DEC
64262: ST_TO_ADDR
64263: LD_EXP 61
64267: PPUSH
64268: CALL 5250 0 1
64272: PUSH
64273: FOR_TO
64274: IFFALSE 64436
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64276: LD_VAR 0 2
64280: PPUSH
64281: LD_VAR 0 3
64285: PPUSH
64286: CALL_OW 428
64290: PUSH
64291: LD_EXP 61
64295: PUSH
64296: LD_VAR 0 5
64300: ARRAY
64301: PUSH
64302: LD_INT 2
64304: ARRAY
64305: EQUAL
64306: IFFALSE 64338
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64308: LD_ADDR_EXP 61
64312: PUSH
64313: LD_EXP 61
64317: PPUSH
64318: LD_VAR 0 5
64322: PPUSH
64323: CALL_OW 3
64327: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64328: CALL 64493 0 0
// exit ;
64332: POP
64333: POP
64334: GO 64488
// end else
64336: GO 64434
// if factory = factoryWaypoints [ i ] [ 2 ] then
64338: LD_VAR 0 1
64342: PUSH
64343: LD_EXP 61
64347: PUSH
64348: LD_VAR 0 5
64352: ARRAY
64353: PUSH
64354: LD_INT 2
64356: ARRAY
64357: EQUAL
64358: IFFALSE 64434
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64360: LD_ADDR_EXP 61
64364: PUSH
64365: LD_EXP 61
64369: PPUSH
64370: LD_VAR 0 5
64374: PPUSH
64375: CALL_OW 3
64379: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64380: LD_ADDR_EXP 61
64384: PUSH
64385: LD_EXP 61
64389: PPUSH
64390: LD_VAR 0 1
64394: PPUSH
64395: CALL_OW 255
64399: PUSH
64400: LD_VAR 0 1
64404: PUSH
64405: LD_VAR 0 2
64409: PUSH
64410: LD_VAR 0 3
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: PPUSH
64421: CALL 41226 0 2
64425: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64426: CALL 64493 0 0
// exit ;
64430: POP
64431: POP
64432: GO 64488
// end ; end ;
64434: GO 64273
64436: POP
64437: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64438: LD_ADDR_EXP 61
64442: PUSH
64443: LD_EXP 61
64447: PPUSH
64448: LD_VAR 0 1
64452: PPUSH
64453: CALL_OW 255
64457: PUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_VAR 0 2
64467: PUSH
64468: LD_VAR 0 3
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: PPUSH
64479: CALL 41226 0 2
64483: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64484: CALL 64493 0 0
// end ;
64488: LD_VAR 0 4
64492: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64493: LD_INT 0
64495: PPUSH
64496: PPUSH
64497: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64498: LD_STRING resetFactoryWaypoint();
64500: PPUSH
64501: CALL_OW 559
// if factoryWaypoints then
64505: LD_EXP 61
64509: IFFALSE 64630
// begin list := factoryWaypoints ;
64511: LD_ADDR_VAR 0 3
64515: PUSH
64516: LD_EXP 61
64520: ST_TO_ADDR
// for i := 1 to list do
64521: LD_ADDR_VAR 0 2
64525: PUSH
64526: DOUBLE
64527: LD_INT 1
64529: DEC
64530: ST_TO_ADDR
64531: LD_VAR 0 3
64535: PUSH
64536: FOR_TO
64537: IFFALSE 64628
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64539: LD_STRING setFactoryWaypointXY(
64541: PUSH
64542: LD_VAR 0 3
64546: PUSH
64547: LD_VAR 0 2
64551: ARRAY
64552: PUSH
64553: LD_INT 1
64555: ARRAY
64556: STR
64557: PUSH
64558: LD_STRING ,
64560: STR
64561: PUSH
64562: LD_VAR 0 3
64566: PUSH
64567: LD_VAR 0 2
64571: ARRAY
64572: PUSH
64573: LD_INT 2
64575: ARRAY
64576: STR
64577: PUSH
64578: LD_STRING ,
64580: STR
64581: PUSH
64582: LD_VAR 0 3
64586: PUSH
64587: LD_VAR 0 2
64591: ARRAY
64592: PUSH
64593: LD_INT 3
64595: ARRAY
64596: STR
64597: PUSH
64598: LD_STRING ,
64600: STR
64601: PUSH
64602: LD_VAR 0 3
64606: PUSH
64607: LD_VAR 0 2
64611: ARRAY
64612: PUSH
64613: LD_INT 4
64615: ARRAY
64616: STR
64617: PUSH
64618: LD_STRING )
64620: STR
64621: PPUSH
64622: CALL_OW 559
64626: GO 64536
64628: POP
64629: POP
// end ; end ;
64630: LD_VAR 0 1
64634: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64635: LD_INT 0
64637: PPUSH
// if HexInfo ( x , y ) = warehouse then
64638: LD_VAR 0 2
64642: PPUSH
64643: LD_VAR 0 3
64647: PPUSH
64648: CALL_OW 428
64652: PUSH
64653: LD_VAR 0 1
64657: EQUAL
64658: IFFALSE 64685
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64660: LD_ADDR_EXP 63
64664: PUSH
64665: LD_EXP 63
64669: PPUSH
64670: LD_VAR 0 1
64674: PPUSH
64675: LD_INT 0
64677: PPUSH
64678: CALL_OW 1
64682: ST_TO_ADDR
64683: GO 64736
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64685: LD_ADDR_EXP 63
64689: PUSH
64690: LD_EXP 63
64694: PPUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: LD_VAR 0 1
64704: PPUSH
64705: CALL_OW 255
64709: PUSH
64710: LD_VAR 0 1
64714: PUSH
64715: LD_VAR 0 2
64719: PUSH
64720: LD_VAR 0 3
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: PPUSH
64731: CALL_OW 1
64735: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64736: CALL 64745 0 0
// end ;
64740: LD_VAR 0 4
64744: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64745: LD_INT 0
64747: PPUSH
64748: PPUSH
64749: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64750: LD_STRING resetWarehouseGatheringPoints();
64752: PPUSH
64753: CALL_OW 559
// if warehouseGatheringPoints then
64757: LD_EXP 63
64761: IFFALSE 64887
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64763: LD_ADDR_VAR 0 3
64767: PUSH
64768: LD_EXP 63
64772: PPUSH
64773: CALL 45160 0 1
64777: ST_TO_ADDR
// for i := 1 to list do
64778: LD_ADDR_VAR 0 2
64782: PUSH
64783: DOUBLE
64784: LD_INT 1
64786: DEC
64787: ST_TO_ADDR
64788: LD_VAR 0 3
64792: PUSH
64793: FOR_TO
64794: IFFALSE 64885
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64796: LD_STRING setWarehouseGatheringPointXY(
64798: PUSH
64799: LD_VAR 0 3
64803: PUSH
64804: LD_VAR 0 2
64808: ARRAY
64809: PUSH
64810: LD_INT 1
64812: ARRAY
64813: STR
64814: PUSH
64815: LD_STRING ,
64817: STR
64818: PUSH
64819: LD_VAR 0 3
64823: PUSH
64824: LD_VAR 0 2
64828: ARRAY
64829: PUSH
64830: LD_INT 2
64832: ARRAY
64833: STR
64834: PUSH
64835: LD_STRING ,
64837: STR
64838: PUSH
64839: LD_VAR 0 3
64843: PUSH
64844: LD_VAR 0 2
64848: ARRAY
64849: PUSH
64850: LD_INT 3
64852: ARRAY
64853: STR
64854: PUSH
64855: LD_STRING ,
64857: STR
64858: PUSH
64859: LD_VAR 0 3
64863: PUSH
64864: LD_VAR 0 2
64868: ARRAY
64869: PUSH
64870: LD_INT 4
64872: ARRAY
64873: STR
64874: PUSH
64875: LD_STRING )
64877: STR
64878: PPUSH
64879: CALL_OW 559
64883: GO 64793
64885: POP
64886: POP
// end ; end ;
64887: LD_VAR 0 1
64891: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64892: LD_INT 0
64894: PPUSH
64895: PPUSH
// if not mpSidePositions then
64896: LD_EXP 7
64900: NOT
64901: IFFALSE 64905
// exit ;
64903: GO 64976
// result :=  ;
64905: LD_ADDR_VAR 0 1
64909: PUSH
64910: LD_STRING 
64912: ST_TO_ADDR
// for i := 1 to 8 do
64913: LD_ADDR_VAR 0 2
64917: PUSH
64918: DOUBLE
64919: LD_INT 1
64921: DEC
64922: ST_TO_ADDR
64923: LD_INT 8
64925: PUSH
64926: FOR_TO
64927: IFFALSE 64957
// begin result := result & mpSidePositions [ i ] & ; ;
64929: LD_ADDR_VAR 0 1
64933: PUSH
64934: LD_VAR 0 1
64938: PUSH
64939: LD_EXP 7
64943: PUSH
64944: LD_VAR 0 2
64948: ARRAY
64949: STR
64950: PUSH
64951: LD_STRING ;
64953: STR
64954: ST_TO_ADDR
// end ;
64955: GO 64926
64957: POP
64958: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64959: LD_STRING setMultiplayerRealPosition("
64961: PUSH
64962: LD_VAR 0 1
64966: STR
64967: PUSH
64968: LD_STRING ");
64970: STR
64971: PPUSH
64972: CALL_OW 559
// end ;
64976: LD_VAR 0 1
64980: RET
