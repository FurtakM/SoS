// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2728 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3074 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 34
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 35
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 37
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 36
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 33
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 51622 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 51622 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 51622 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 51622 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 51622 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 51622 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 11468 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 51455 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 51455 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 51455 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 51455 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 51455 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 51455 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 51455 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 51455 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 51455 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 51455 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 51455 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 51455 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 51622 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 51622 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 51622 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 51622 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 51622 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 51622 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 51622 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 51622 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 51622 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 51622 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 51622 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 51622 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 51622 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 51622 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 51622 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 51622 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 51622 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 51622 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 48438 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 52330 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 7666 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 52347 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 8331 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 52388 0 2
2703: PPOPN 2
2705: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_VAR 0 3
2720: PPUSH
2721: CALL 8384 0 3
2725: PPOPN 3
2727: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
// disable ( mpActive ) ;
2732: LD_INT 100
2734: DISABLE_MARKED
// disable ( mpWin ) ;
2735: LD_INT 101
2737: DISABLE_MARKED
// disable ( mpLose ) ;
2738: LD_INT 102
2740: DISABLE_MARKED
// mpGameType := 0 ;
2741: LD_ADDR_EXP 3
2745: PUSH
2746: LD_INT 0
2748: ST_TO_ADDR
// mpGameSettings := [ ] ;
2749: LD_ADDR_EXP 6
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: EMPTY
2762: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2763: LD_ADDR_EXP 5
2767: PUSH
2768: EMPTY
2769: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2770: LD_ADDR_EXP 29
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2785: LD_ADDR_EXP 12
2789: PUSH
2790: EMPTY
2791: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2792: LD_ADDR_EXP 13
2796: PUSH
2797: EMPTY
2798: ST_TO_ADDR
// mpDepots := [ ] ;
2799: LD_ADDR_EXP 14
2803: PUSH
2804: EMPTY
2805: ST_TO_ADDR
// mpBuildings := [ ] ;
2806: LD_ADDR_EXP 17
2810: PUSH
2811: EMPTY
2812: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2813: LD_ADDR_EXP 18
2817: PUSH
2818: EMPTY
2819: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2820: LD_ADDR_EXP 19
2824: PUSH
2825: EMPTY
2826: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2827: LD_ADDR_EXP 20
2831: PUSH
2832: EMPTY
2833: ST_TO_ADDR
// mpStartingResources := [ ] ;
2834: LD_ADDR_EXP 15
2838: PUSH
2839: EMPTY
2840: ST_TO_ADDR
// mpStartPos := [ ] ;
2841: LD_ADDR_EXP 21
2845: PUSH
2846: EMPTY
2847: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2848: LD_ADDR_EXP 22
2852: PUSH
2853: LD_INT 1
2855: NEG
2856: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2857: LD_ADDR_EXP 23
2861: PUSH
2862: EMPTY
2863: ST_TO_ADDR
// mpApemans := [ ] ;
2864: LD_ADDR_EXP 30
2868: PUSH
2869: EMPTY
2870: ST_TO_ADDR
// mpApemansArea := [ ] ;
2871: LD_ADDR_EXP 31
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpRespawn := [ ] ;
2878: LD_ADDR_EXP 33
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpKingArea := 0 ;
2885: LD_ADDR_EXP 34
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// mpPoints := [ ] ;
2893: LD_ADDR_EXP 35
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// mpVehicles := 0 ;
2900: LD_ADDR_EXP 36
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// mpShipments := 0 ;
2908: LD_ADDR_EXP 27
2912: PUSH
2913: LD_INT 0
2915: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2916: LD_ADDR_EXP 40
2920: PUSH
2921: EMPTY
2922: PUSH
2923: EMPTY
2924: PUSH
2925: EMPTY
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2947: LD_ADDR_EXP 32
2951: PUSH
2952: EMPTY
2953: PUSH
2954: EMPTY
2955: PUSH
2956: EMPTY
2957: PUSH
2958: EMPTY
2959: PUSH
2960: EMPTY
2961: PUSH
2962: EMPTY
2963: PUSH
2964: EMPTY
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: ST_TO_ADDR
// mpEmissions := 0 ;
2978: LD_ADDR_EXP 37
2982: PUSH
2983: LD_INT 0
2985: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2986: LD_ADDR_EXP 25
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2994: LD_ADDR_EXP 24
2998: PUSH
2999: LD_INT 15
3001: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3002: LD_ADDR_EXP 38
3006: PUSH
3007: LD_INT 0
3009: ST_TO_ADDR
// mpGameActive := false ;
3010: LD_ADDR_EXP 39
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// mpBlockRespThread := false ;
3018: LD_ADDR_EXP 41
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// for i := 1 to 32 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 32
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3067
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3042: LD_ADDR_EXP 6
3046: PUSH
3047: LD_EXP 6
3051: PPUSH
3052: LD_VAR 0 2
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 1
3064: ST_TO_ADDR
3065: GO 3039
3067: POP
3068: POP
// end ;
3069: LD_VAR 0 1
3073: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3074: LD_INT 0
3076: PPUSH
3077: PPUSH
3078: PPUSH
3079: PPUSH
3080: PPUSH
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3090: LD_ADDR_VAR 0 14
3094: PUSH
3095: LD_INT 1
3097: PUSH
3098: LD_INT 2
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: ST_TO_ADDR
// for i in gameTypes do
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_VAR 0 14
3118: PUSH
3119: FOR_IN
3120: IFFALSE 3129
// disable ( i ) ;
3122: LD_VAR 0 2
3126: DISABLE_MARKED
3127: GO 3119
3129: POP
3130: POP
// if Multiplayer then
3131: LD_OWVAR 4
3135: IFFALSE 3319
// begin mpGameType := mp_game_type ;
3137: LD_ADDR_EXP 3
3141: PUSH
3142: LD_OWVAR 6
3146: ST_TO_ADDR
// your_side := mp_player_side ;
3147: LD_ADDR_OWVAR 2
3151: PUSH
3152: LD_OWVAR 7
3156: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3157: LD_ADDR_EXP 7
3161: PUSH
3162: LD_OWVAR 17
3166: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3167: LD_ADDR_EXP 8
3171: PUSH
3172: LD_OWVAR 15
3176: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3177: LD_ADDR_EXP 9
3181: PUSH
3182: LD_OWVAR 16
3186: ST_TO_ADDR
// mpTeams := mp_teams ;
3187: LD_ADDR_EXP 10
3191: PUSH
3192: LD_OWVAR 12
3196: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3197: LD_ADDR_VAR 0 2
3201: PUSH
3202: DOUBLE
3203: LD_INT 1
3205: DEC
3206: ST_TO_ADDR
3207: LD_EXP 4
3211: PPUSH
3212: CALL 11468 0 1
3216: PUSH
3217: FOR_TO
3218: IFFALSE 3294
// begin setting := mpGameSettingsKeys [ i ] ;
3220: LD_ADDR_VAR 0 12
3224: PUSH
3225: LD_EXP 4
3229: PUSH
3230: LD_VAR 0 2
3234: ARRAY
3235: ST_TO_ADDR
// if setting then
3236: LD_VAR 0 12
3240: IFFALSE 3292
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3242: LD_ADDR_EXP 6
3246: PUSH
3247: LD_EXP 6
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: LD_EXP 5
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 2
3272: PUSH
3273: LD_INT 1
3275: MINUS
3276: PPUSH
3277: CALL_OW 426
3281: PUSH
3282: LD_INT 1
3284: PLUS
3285: ARRAY
3286: PPUSH
3287: CALL_OW 1
3291: ST_TO_ADDR
// end ;
3292: GO 3217
3294: POP
3295: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3296: LD_ADDR_EXP 11
3300: PUSH
3301: LD_EXP 8
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: EMPTY
3310: LIST
3311: DIFF
3312: PUSH
3313: LD_INT 1
3315: GREATER
3316: ST_TO_ADDR
// end else
3317: GO 3319
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3319: LD_EXP 3
3323: PPUSH
3324: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3328: LD_EXP 18
3332: PPUSH
3333: CALL 11468 0 1
3337: IFFALSE 3368
// begin for i in mpMarkedAreas do
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: LD_EXP 18
3348: PUSH
3349: FOR_IN
3350: IFFALSE 3366
// SetAreaMapShow ( i , 0 ) ;
3352: LD_VAR 0 2
3356: PPUSH
3357: LD_INT 0
3359: PPUSH
3360: CALL_OW 424
3364: GO 3349
3366: POP
3367: POP
// end ; for i := 1 to 8 do
3368: LD_ADDR_VAR 0 2
3372: PUSH
3373: DOUBLE
3374: LD_INT 1
3376: DEC
3377: ST_TO_ADDR
3378: LD_INT 8
3380: PUSH
3381: FOR_TO
3382: IFFALSE 4639
// begin if not mpSidePositions [ i ] then
3384: LD_EXP 7
3388: PUSH
3389: LD_VAR 0 2
3393: ARRAY
3394: NOT
3395: IFFALSE 3399
// continue ;
3397: GO 3381
// side := i ;
3399: LD_ADDR_VAR 0 7
3403: PUSH
3404: LD_VAR 0 2
3408: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3409: LD_ADDR_VAR 0 9
3413: PUSH
3414: LD_EXP 9
3418: PUSH
3419: LD_VAR 0 2
3423: ARRAY
3424: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3425: LD_ADDR_VAR 0 8
3429: PUSH
3430: LD_EXP 7
3434: PUSH
3435: LD_VAR 0 2
3439: ARRAY
3440: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3441: LD_EXP 12
3445: PPUSH
3446: CALL 11468 0 1
3450: IFFALSE 3527
// begin for j in mpOilDeposits [ pos ] do
3452: LD_ADDR_VAR 0 3
3456: PUSH
3457: LD_EXP 12
3461: PUSH
3462: LD_VAR 0 8
3466: ARRAY
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3525
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3471: LD_VAR 0 3
3475: PUSH
3476: LD_INT 1
3478: ARRAY
3479: PPUSH
3480: LD_VAR 0 3
3484: PUSH
3485: LD_INT 2
3487: ARRAY
3488: PPUSH
3489: LD_INT 2
3491: PPUSH
3492: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3496: LD_VAR 0 3
3500: PUSH
3501: LD_INT 1
3503: ARRAY
3504: PPUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_INT 2
3512: ARRAY
3513: PPUSH
3514: LD_VAR 0 7
3518: PPUSH
3519: CALL_OW 441
// end ;
3523: GO 3468
3525: POP
3526: POP
// end ; if Count ( mpSibDeposits ) then
3527: LD_EXP 13
3531: PPUSH
3532: CALL 11468 0 1
3536: IFFALSE 3613
// begin for j in mpSibDeposits [ pos ] do
3538: LD_ADDR_VAR 0 3
3542: PUSH
3543: LD_EXP 13
3547: PUSH
3548: LD_VAR 0 8
3552: ARRAY
3553: PUSH
3554: FOR_IN
3555: IFFALSE 3611
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: LD_VAR 0 3
3570: PUSH
3571: LD_INT 2
3573: ARRAY
3574: PPUSH
3575: LD_INT 3
3577: PPUSH
3578: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3582: LD_VAR 0 3
3586: PUSH
3587: LD_INT 1
3589: ARRAY
3590: PPUSH
3591: LD_VAR 0 3
3595: PUSH
3596: LD_INT 2
3598: ARRAY
3599: PPUSH
3600: LD_VAR 0 7
3604: PPUSH
3605: CALL_OW 441
// end ;
3609: GO 3554
3611: POP
3612: POP
// end ; InitBc ;
3613: CALL_OW 21
// InitUc ;
3617: CALL_OW 18
// uc_side := side ;
3621: LD_ADDR_OWVAR 20
3625: PUSH
3626: LD_VAR 0 7
3630: ST_TO_ADDR
// uc_nation := nation ;
3631: LD_ADDR_OWVAR 21
3635: PUSH
3636: LD_VAR 0 9
3640: ST_TO_ADDR
// if Count ( mpDepots ) then
3641: LD_EXP 14
3645: PPUSH
3646: CALL 11468 0 1
3650: IFFALSE 3834
// begin if mpGameType = GameTypeSurvival then
3652: LD_EXP 3
3656: PUSH
3657: LD_INT 2
3659: EQUAL
3660: IFFALSE 3680
// begin bc_level := 10 ;
3662: LD_ADDR_OWVAR 43
3666: PUSH
3667: LD_INT 10
3669: ST_TO_ADDR
// bc_type := b_warehouse ;
3670: LD_ADDR_OWVAR 42
3674: PUSH
3675: LD_INT 1
3677: ST_TO_ADDR
// end else
3678: GO 3696
// begin bc_level := 0 ;
3680: LD_ADDR_OWVAR 43
3684: PUSH
3685: LD_INT 0
3687: ST_TO_ADDR
// bc_type := b_depot ;
3688: LD_ADDR_OWVAR 42
3692: PUSH
3693: LD_INT 0
3695: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3696: LD_ADDR_VAR 0 4
3700: PUSH
3701: LD_EXP 14
3705: PUSH
3706: LD_VAR 0 8
3710: ARRAY
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: PPUSH
3716: LD_EXP 14
3720: PUSH
3721: LD_VAR 0 8
3725: ARRAY
3726: PUSH
3727: LD_INT 2
3729: ARRAY
3730: PPUSH
3731: LD_EXP 14
3735: PUSH
3736: LD_VAR 0 8
3740: ARRAY
3741: PUSH
3742: LD_INT 3
3744: ARRAY
3745: PPUSH
3746: CALL_OW 47
3750: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3751: LD_VAR 0 4
3755: PPUSH
3756: LD_STRING @
3758: PUSH
3759: LD_VAR 0 7
3763: STR
3764: PPUSH
3765: CALL_OW 500
// if Count ( mpStartingResources ) then
3769: LD_EXP 15
3773: PPUSH
3774: CALL 11468 0 1
3778: IFFALSE 3832
// begin for j := 1 to mpStartingResources do
3780: LD_ADDR_VAR 0 3
3784: PUSH
3785: DOUBLE
3786: LD_INT 1
3788: DEC
3789: ST_TO_ADDR
3790: LD_EXP 15
3794: PUSH
3795: FOR_TO
3796: IFFALSE 3830
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3798: LD_VAR 0 4
3802: PPUSH
3803: CALL_OW 274
3807: PPUSH
3808: LD_VAR 0 3
3812: PPUSH
3813: LD_EXP 15
3817: PUSH
3818: LD_VAR 0 3
3822: ARRAY
3823: PPUSH
3824: CALL_OW 277
3828: GO 3795
3830: POP
3831: POP
// end ; end else
3832: GO 3981
// if Count ( mpStartingResources ) then
3834: LD_EXP 15
3838: PPUSH
3839: CALL 11468 0 1
3843: IFFALSE 3981
// begin for j := 1 to mpStartingResources do
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: DOUBLE
3851: LD_INT 1
3853: DEC
3854: ST_TO_ADDR
3855: LD_EXP 15
3859: PUSH
3860: FOR_TO
3861: IFFALSE 3979
// begin resources := mpStartingResources [ j ] ;
3863: LD_ADDR_VAR 0 13
3867: PUSH
3868: LD_EXP 15
3872: PUSH
3873: LD_VAR 0 3
3877: ARRAY
3878: ST_TO_ADDR
// repeat if resources >= 50 then
3879: LD_VAR 0 13
3883: PUSH
3884: LD_INT 50
3886: GREATEREQUAL
3887: IFFALSE 3933
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_INT 5
3896: PPUSH
3897: LD_VAR 0 5
3901: PPUSH
3902: LD_VAR 0 6
3906: PPUSH
3907: LD_INT 4
3909: PPUSH
3910: LD_INT 0
3912: PPUSH
3913: CALL_OW 60
// resources := resources - 50 ;
3917: LD_ADDR_VAR 0 13
3921: PUSH
3922: LD_VAR 0 13
3926: PUSH
3927: LD_INT 50
3929: MINUS
3930: ST_TO_ADDR
// end else
3931: GO 3967
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: LD_VAR 0 13
3942: PUSH
3943: LD_INT 10
3945: DIV
3946: PPUSH
3947: LD_VAR 0 5
3951: PPUSH
3952: LD_VAR 0 6
3956: PPUSH
3957: LD_INT 4
3959: PPUSH
3960: LD_INT 0
3962: PPUSH
3963: CALL_OW 60
// until resources <= 0 ;
3967: LD_VAR 0 13
3971: PUSH
3972: LD_INT 0
3974: LESSEQUAL
3975: IFFALSE 3879
// end ;
3977: GO 3860
3979: POP
3980: POP
// end ; if Count ( mpBuildings ) then
3981: LD_EXP 17
3985: PPUSH
3986: CALL 11468 0 1
3990: IFFALSE 4068
// begin for j in mpBuildings [ pos ] do
3992: LD_ADDR_VAR 0 3
3996: PUSH
3997: LD_EXP 17
4001: PUSH
4002: LD_VAR 0 8
4006: ARRAY
4007: PUSH
4008: FOR_IN
4009: IFFALSE 4066
// begin bc_level := 0 ;
4011: LD_ADDR_OWVAR 43
4015: PUSH
4016: LD_INT 0
4018: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4019: LD_ADDR_OWVAR 42
4023: PUSH
4024: LD_VAR 0 3
4028: PUSH
4029: LD_INT 1
4031: ARRAY
4032: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4033: LD_VAR 0 3
4037: PUSH
4038: LD_INT 2
4040: ARRAY
4041: PPUSH
4042: LD_VAR 0 3
4046: PUSH
4047: LD_INT 3
4049: ARRAY
4050: PPUSH
4051: LD_VAR 0 3
4055: PUSH
4056: LD_INT 4
4058: ARRAY
4059: PPUSH
4060: CALL_OW 47
// end ;
4064: GO 4008
4066: POP
4067: POP
// end ; if mpBattleFlag > - 1 then
4068: LD_EXP 22
4072: PUSH
4073: LD_INT 1
4075: NEG
4076: GREATER
4077: IFFALSE 4236
// begin x := mpStartPos [ pos ] [ 1 ] ;
4079: LD_ADDR_VAR 0 5
4083: PUSH
4084: LD_EXP 21
4088: PUSH
4089: LD_VAR 0 8
4093: ARRAY
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4099: LD_ADDR_VAR 0 6
4103: PUSH
4104: LD_EXP 21
4108: PUSH
4109: LD_VAR 0 8
4113: ARRAY
4114: PUSH
4115: LD_INT 2
4117: ARRAY
4118: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4119: LD_VAR 0 5
4123: PPUSH
4124: LD_VAR 0 6
4128: PPUSH
4129: LD_INT 12
4131: PPUSH
4132: LD_INT 2
4134: PPUSH
4135: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4139: LD_ADDR_EXP 23
4143: PUSH
4144: LD_EXP 23
4148: PPUSH
4149: LD_VAR 0 7
4153: PPUSH
4154: LD_VAR 0 7
4158: PPUSH
4159: LD_VAR 0 5
4163: PPUSH
4164: LD_VAR 0 6
4168: PPUSH
4169: LD_INT 1
4171: PUSH
4172: LD_INT 100
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: LD_INT 70
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: LD_INT 40
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PUSH
4199: LD_INT 10
4201: PUSH
4202: LD_INT 25
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 20
4211: PUSH
4212: LD_INT 100
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: PPUSH
4226: CALL_OW 418
4230: PPUSH
4231: CALL_OW 1
4235: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4236: LD_EXP 26
4240: PUSH
4241: LD_INT 20
4243: PPUSH
4244: LD_VAR 0 7
4248: PPUSH
4249: CALL_OW 321
4253: PUSH
4254: LD_INT 1
4256: EQUAL
4257: AND
4258: IFFALSE 4275
// SetTech ( tech_SibDet , side , state_researched ) ;
4260: LD_INT 20
4262: PPUSH
4263: LD_VAR 0 7
4267: PPUSH
4268: LD_INT 2
4270: PPUSH
4271: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4275: LD_INT 24
4277: PPUSH
4278: LD_VAR 0 7
4282: PPUSH
4283: LD_INT 0
4285: PPUSH
4286: CALL_OW 322
// if mpSibBomb = 1 then
4290: LD_EXP 28
4294: PUSH
4295: LD_INT 1
4297: EQUAL
4298: IFFALSE 4317
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4300: LD_INT 25
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: LD_INT 1
4310: PPUSH
4311: CALL_OW 322
// end else
4315: GO 4332
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4317: LD_INT 25
4319: PPUSH
4320: LD_VAR 0 7
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 322
// end ; if mpVehicles then
4332: LD_EXP 36
4336: IFFALSE 4435
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: LD_VAR 0 7
4347: PPUSH
4348: LD_VAR 0 9
4352: PPUSH
4353: LD_EXP 36
4357: PPUSH
4358: CALL 5549 0 3
4362: PUSH
4363: FOR_IN
4364: IFFALSE 4433
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4366: LD_VAR 0 3
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: LD_INT 5
4376: PPUSH
4377: CALL_OW 12
4381: PPUSH
4382: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4386: LD_VAR 0 3
4390: PPUSH
4391: LD_EXP 21
4395: PUSH
4396: LD_VAR 0 8
4400: ARRAY
4401: PUSH
4402: LD_INT 1
4404: ARRAY
4405: PPUSH
4406: LD_EXP 21
4410: PUSH
4411: LD_VAR 0 8
4415: ARRAY
4416: PUSH
4417: LD_INT 2
4419: ARRAY
4420: PPUSH
4421: LD_INT 12
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 50
// end ;
4431: GO 4363
4433: POP
4434: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4435: LD_ADDR_VAR 0 11
4439: PUSH
4440: LD_VAR 0 7
4444: PPUSH
4445: LD_VAR 0 9
4449: PPUSH
4450: LD_EXP 24
4454: PPUSH
4455: LD_EXP 25
4459: PPUSH
4460: CALL 5051 0 4
4464: ST_TO_ADDR
// for j in team do
4465: LD_ADDR_VAR 0 3
4469: PUSH
4470: LD_VAR 0 11
4474: PUSH
4475: FOR_IN
4476: IFFALSE 4525
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4478: LD_VAR 0 3
4482: PPUSH
4483: LD_EXP 21
4487: PUSH
4488: LD_VAR 0 8
4492: ARRAY
4493: PUSH
4494: LD_INT 1
4496: ARRAY
4497: PPUSH
4498: LD_EXP 21
4502: PUSH
4503: LD_VAR 0 8
4507: ARRAY
4508: PUSH
4509: LD_INT 2
4511: ARRAY
4512: PPUSH
4513: LD_INT 12
4515: PPUSH
4516: LD_INT 0
4518: PPUSH
4519: CALL_OW 50
4523: GO 4475
4525: POP
4526: POP
// if mpApemans then
4527: LD_EXP 30
4531: IFFALSE 4637
// begin for j := 1 to mpApemans do
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: DOUBLE
4539: LD_INT 1
4541: DEC
4542: ST_TO_ADDR
4543: LD_EXP 30
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4635
// begin PrepareApeman ( - 5 ) ;
4551: LD_INT 5
4553: NEG
4554: PPUSH
4555: CALL 43325 0 1
// ape := CreateHuman ;
4559: LD_ADDR_VAR 0 10
4563: PUSH
4564: CALL_OW 44
4568: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4569: LD_ADDR_EXP 32
4573: PUSH
4574: LD_EXP 32
4578: PPUSH
4579: LD_VAR 0 8
4583: PPUSH
4584: LD_EXP 32
4588: PUSH
4589: LD_VAR 0 8
4593: ARRAY
4594: PPUSH
4595: LD_VAR 0 10
4599: PPUSH
4600: CALL 47077 0 2
4604: PPUSH
4605: CALL_OW 1
4609: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4610: LD_VAR 0 10
4614: PPUSH
4615: LD_EXP 31
4619: PUSH
4620: LD_VAR 0 8
4624: ARRAY
4625: PPUSH
4626: LD_INT 0
4628: PPUSH
4629: CALL_OW 49
// end ;
4633: GO 4548
4635: POP
4636: POP
// end ; end ;
4637: GO 3381
4639: POP
4640: POP
// if not mpTeamGame then
4641: LD_EXP 11
4645: NOT
4646: IFFALSE 4744
// begin for i := 1 to 8 do
4648: LD_ADDR_VAR 0 2
4652: PUSH
4653: DOUBLE
4654: LD_INT 1
4656: DEC
4657: ST_TO_ADDR
4658: LD_INT 8
4660: PUSH
4661: FOR_TO
4662: IFFALSE 4740
// for j := 1 to 8 do
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_INT 8
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4736
// if i <> j then
4680: LD_VAR 0 2
4684: PUSH
4685: LD_VAR 0 3
4689: NONEQUAL
4690: IFFALSE 4714
// SetAttitude ( i , j , att_neutral , true ) else
4692: LD_VAR 0 2
4696: PPUSH
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 0
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 80
4712: GO 4734
// SetAttitude ( i , j , att_friend , true ) ;
4714: LD_VAR 0 2
4718: PPUSH
4719: LD_VAR 0 3
4723: PPUSH
4724: LD_INT 1
4726: PPUSH
4727: LD_INT 1
4729: PPUSH
4730: CALL_OW 80
4734: GO 4677
4736: POP
4737: POP
4738: GO 4661
4740: POP
4741: POP
// end else
4742: GO 4919
// begin if mpSharedVision then
4744: LD_EXP 16
4748: IFFALSE 4813
// begin for i in mpTeams do
4750: LD_ADDR_VAR 0 2
4754: PUSH
4755: LD_EXP 10
4759: PUSH
4760: FOR_IN
4761: IFFALSE 4811
// for j := 2 to i do
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: DOUBLE
4769: LD_INT 2
4771: DEC
4772: ST_TO_ADDR
4773: LD_VAR 0 2
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4807
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4781: LD_VAR 0 2
4785: PUSH
4786: LD_VAR 0 3
4790: ARRAY
4791: PPUSH
4792: LD_VAR 0 2
4796: PUSH
4797: LD_INT 1
4799: ARRAY
4800: PPUSH
4801: CALL_OW 343
4805: GO 4778
4807: POP
4808: POP
4809: GO 4760
4811: POP
4812: POP
// end ; for i := 1 to 8 do
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: DOUBLE
4819: LD_INT 1
4821: DEC
4822: ST_TO_ADDR
4823: LD_INT 8
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4917
// for j := 1 to 8 do
4829: LD_ADDR_VAR 0 3
4833: PUSH
4834: DOUBLE
4835: LD_INT 1
4837: DEC
4838: ST_TO_ADDR
4839: LD_INT 8
4841: PUSH
4842: FOR_TO
4843: IFFALSE 4913
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4845: LD_EXP 8
4849: PUSH
4850: LD_VAR 0 2
4854: ARRAY
4855: PUSH
4856: LD_EXP 8
4860: PUSH
4861: LD_VAR 0 3
4865: ARRAY
4866: EQUAL
4867: IFFALSE 4891
// SetAttitude ( i , j , att_friend , true ) else
4869: LD_VAR 0 2
4873: PPUSH
4874: LD_VAR 0 3
4878: PPUSH
4879: LD_INT 1
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: CALL_OW 80
4889: GO 4911
// SetAttitude ( i , j , att_enemy , true ) ;
4891: LD_VAR 0 2
4895: PPUSH
4896: LD_VAR 0 3
4900: PPUSH
4901: LD_INT 2
4903: PPUSH
4904: LD_INT 1
4906: PPUSH
4907: CALL_OW 80
4911: GO 4842
4913: POP
4914: POP
4915: GO 4826
4917: POP
4918: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4919: LD_ADDR_OWVAR 71
4923: PUSH
4924: LD_EXP 9
4928: PUSH
4929: LD_OWVAR 2
4933: ARRAY
4934: ST_TO_ADDR
// if IAmSpec then
4935: CALL_OW 531
4939: IFFALSE 4980
// begin FogOff ( true ) ;
4941: LD_INT 1
4943: PPUSH
4944: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4948: LD_EXP 29
4952: PUSH
4953: LD_INT 1
4955: ARRAY
4956: PUSH
4957: LD_INT 2
4959: DIV
4960: PPUSH
4961: LD_EXP 29
4965: PUSH
4966: LD_INT 2
4968: ARRAY
4969: PUSH
4970: LD_INT 2
4972: DIV
4973: PPUSH
4974: CALL_OW 86
// end else
4978: GO 5026
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4980: LD_EXP 21
4984: PUSH
4985: LD_EXP 7
4989: PUSH
4990: LD_OWVAR 2
4994: ARRAY
4995: ARRAY
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: LD_EXP 21
5005: PUSH
5006: LD_EXP 7
5010: PUSH
5011: LD_OWVAR 2
5015: ARRAY
5016: ARRAY
5017: PUSH
5018: LD_INT 2
5020: ARRAY
5021: PPUSH
5022: CALL_OW 86
// end ; BeginBuildUp ;
5026: CALL 6027 0 0
// enable ( mpActive ) ;
5030: LD_INT 100
5032: ENABLE_MARKED
// enable ( mpGameType ) ;
5033: LD_EXP 3
5037: ENABLE_MARKED
// mpGameActive := true ;
5038: LD_ADDR_EXP 39
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// end ;
5046: LD_VAR 0 1
5050: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5051: LD_INT 0
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
// result := [ ] ;
5057: LD_ADDR_VAR 0 5
5061: PUSH
5062: EMPTY
5063: ST_TO_ADDR
// class := class_soldier ;
5064: LD_ADDR_VAR 0 8
5068: PUSH
5069: LD_INT 1
5071: ST_TO_ADDR
// uc_side := side ;
5072: LD_ADDR_OWVAR 20
5076: PUSH
5077: LD_VAR 0 1
5081: ST_TO_ADDR
// uc_nation := nation ;
5082: LD_ADDR_OWVAR 21
5086: PUSH
5087: LD_VAR 0 2
5091: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5092: LD_ADDR_OWVAR 26
5096: PUSH
5097: LD_OWVAR 19
5101: PUSH
5102: LD_VAR 0 1
5106: ARRAY
5107: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5108: LD_INT 1
5110: PPUSH
5111: LD_INT 2
5113: PPUSH
5114: CALL_OW 12
5118: PPUSH
5119: LD_VAR 0 8
5123: PPUSH
5124: LD_VAR 0 4
5128: PUSH
5129: LD_INT 2
5131: PLUS
5132: PPUSH
5133: CALL_OW 380
// hc_importance := 105 ;
5137: LD_ADDR_OWVAR 32
5141: PUSH
5142: LD_INT 105
5144: ST_TO_ADDR
// if Multiplayer then
5145: LD_OWVAR 4
5149: IFFALSE 5189
// begin hc_gallery := MULTIAVATARS ;
5151: LD_ADDR_OWVAR 33
5155: PUSH
5156: LD_STRING MULTIAVATARS
5158: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5159: LD_ADDR_OWVAR 34
5163: PUSH
5164: LD_VAR 0 1
5168: PPUSH
5169: CALL_OW 525
5173: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5174: LD_ADDR_OWVAR 27
5178: PUSH
5179: LD_VAR 0 1
5183: PPUSH
5184: CALL_OW 526
5188: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5189: LD_ADDR_VAR 0 5
5193: PUSH
5194: LD_VAR 0 5
5198: PPUSH
5199: CALL_OW 44
5203: PPUSH
5204: CALL 47077 0 2
5208: ST_TO_ADDR
// if mpTeamPreset then
5209: LD_LOC 1
5213: IFFALSE 5309
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5215: LD_LOC 1
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: PPUSH
5224: LD_VAR 0 5
5228: PUSH
5229: LD_VAR 0 5
5233: ARRAY
5234: PPUSH
5235: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5239: LD_VAR 0 5
5243: PUSH
5244: LD_VAR 0 5
5248: ARRAY
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: LD_LOC 1
5257: PUSH
5258: LD_INT 1
5260: ARRAY
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 260
5269: PPUSH
5270: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5274: LD_VAR 0 5
5278: PUSH
5279: LD_VAR 0 5
5283: ARRAY
5284: PPUSH
5285: LD_INT 2
5287: PPUSH
5288: LD_LOC 1
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: PPUSH
5297: LD_INT 2
5299: PPUSH
5300: CALL_OW 260
5304: PPUSH
5305: CALL_OW 239
// end ; InitHc_All ( ) ;
5309: CALL_OW 584
// class := 2 ;
5313: LD_ADDR_VAR 0 8
5317: PUSH
5318: LD_INT 2
5320: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5321: LD_ADDR_VAR 0 6
5325: PUSH
5326: DOUBLE
5327: LD_INT 1
5329: DEC
5330: ST_TO_ADDR
5331: LD_VAR 0 3
5335: PUSH
5336: LD_INT 1
5338: MINUS
5339: PUSH
5340: FOR_TO
5341: IFFALSE 5525
// begin PrepareHuman ( false , class , skill ) ;
5343: LD_INT 0
5345: PPUSH
5346: LD_VAR 0 8
5350: PPUSH
5351: LD_VAR 0 4
5355: PPUSH
5356: CALL_OW 380
// un := CreateHuman ;
5360: LD_ADDR_VAR 0 7
5364: PUSH
5365: CALL_OW 44
5369: ST_TO_ADDR
// result := Join ( result , un ) ;
5370: LD_ADDR_VAR 0 5
5374: PUSH
5375: LD_VAR 0 5
5379: PPUSH
5380: LD_VAR 0 7
5384: PPUSH
5385: CALL 47077 0 2
5389: ST_TO_ADDR
// if mpTeamPreset then
5390: LD_LOC 1
5394: IFFALSE 5490
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5396: LD_LOC 1
5400: PUSH
5401: LD_VAR 0 6
5405: PUSH
5406: LD_INT 1
5408: PLUS
5409: ARRAY
5410: PPUSH
5411: LD_VAR 0 7
5415: PPUSH
5416: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5420: LD_VAR 0 7
5424: PPUSH
5425: LD_INT 1
5427: PPUSH
5428: LD_LOC 1
5432: PUSH
5433: LD_VAR 0 6
5437: PUSH
5438: LD_INT 1
5440: PLUS
5441: ARRAY
5442: PPUSH
5443: LD_INT 1
5445: PPUSH
5446: CALL_OW 260
5450: PPUSH
5451: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5455: LD_VAR 0 7
5459: PPUSH
5460: LD_INT 2
5462: PPUSH
5463: LD_LOC 1
5467: PUSH
5468: LD_VAR 0 6
5472: PUSH
5473: LD_INT 1
5475: PLUS
5476: ARRAY
5477: PPUSH
5478: LD_INT 2
5480: PPUSH
5481: CALL_OW 260
5485: PPUSH
5486: CALL_OW 239
// end ; class := Inc ( class ) ;
5490: LD_ADDR_VAR 0 8
5494: PUSH
5495: LD_VAR 0 8
5499: PPUSH
5500: CALL 48438 0 1
5504: ST_TO_ADDR
// if class = 5 then
5505: LD_VAR 0 8
5509: PUSH
5510: LD_INT 5
5512: EQUAL
5513: IFFALSE 5523
// class := 1 ;
5515: LD_ADDR_VAR 0 8
5519: PUSH
5520: LD_INT 1
5522: ST_TO_ADDR
// end ;
5523: GO 5340
5525: POP
5526: POP
// if not mpTeamPreset then
5527: LD_LOC 1
5531: NOT
5532: IFFALSE 5544
// mpTeamPreset := result ;
5534: LD_ADDR_LOC 1
5538: PUSH
5539: LD_VAR 0 5
5543: ST_TO_ADDR
// end ;
5544: LD_VAR 0 5
5548: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5549: LD_INT 0
5551: PPUSH
5552: PPUSH
// result := [ ] ;
5553: LD_ADDR_VAR 0 4
5557: PUSH
5558: EMPTY
5559: ST_TO_ADDR
// if not vehicles then
5560: LD_VAR 0 3
5564: NOT
5565: IFFALSE 5569
// exit ;
5567: GO 5728
// for i := 1 to vehicles [ nation ] do
5569: LD_ADDR_VAR 0 5
5573: PUSH
5574: DOUBLE
5575: LD_INT 1
5577: DEC
5578: ST_TO_ADDR
5579: LD_VAR 0 3
5583: PUSH
5584: LD_VAR 0 2
5588: ARRAY
5589: PUSH
5590: FOR_TO
5591: IFFALSE 5726
// begin uc_side := side ;
5593: LD_ADDR_OWVAR 20
5597: PUSH
5598: LD_VAR 0 1
5602: ST_TO_ADDR
// uc_nation := nation ;
5603: LD_ADDR_OWVAR 21
5607: PUSH
5608: LD_VAR 0 2
5612: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5613: LD_VAR 0 3
5617: PUSH
5618: LD_VAR 0 2
5622: ARRAY
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PUSH
5630: LD_INT 1
5632: ARRAY
5633: PPUSH
5634: LD_VAR 0 3
5638: PUSH
5639: LD_VAR 0 2
5643: ARRAY
5644: PUSH
5645: LD_VAR 0 5
5649: ARRAY
5650: PUSH
5651: LD_INT 2
5653: ARRAY
5654: PPUSH
5655: LD_VAR 0 3
5659: PUSH
5660: LD_VAR 0 2
5664: ARRAY
5665: PUSH
5666: LD_VAR 0 5
5670: ARRAY
5671: PUSH
5672: LD_INT 3
5674: ARRAY
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_VAR 0 2
5685: ARRAY
5686: PUSH
5687: LD_VAR 0 5
5691: ARRAY
5692: PUSH
5693: LD_INT 4
5695: ARRAY
5696: PPUSH
5697: LD_INT 80
5699: PPUSH
5700: CALL 14206 0 5
// result := Join ( result , CreateVehicle ) ;
5704: LD_ADDR_VAR 0 4
5708: PUSH
5709: LD_VAR 0 4
5713: PPUSH
5714: CALL_OW 45
5718: PPUSH
5719: CALL 47077 0 2
5723: ST_TO_ADDR
// end ;
5724: GO 5590
5726: POP
5727: POP
// end ;
5728: LD_VAR 0 4
5732: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5733: LD_INT 0
5735: PPUSH
5736: PPUSH
// for i in mpBattleFlags do
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: LD_EXP 23
5746: PUSH
5747: FOR_IN
5748: IFFALSE 5825
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5750: LD_VAR 0 3
5754: PPUSH
5755: LD_INT 1
5757: PUSH
5758: LD_VAR 0 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 2
5769: PUSH
5770: LD_VAR 0 1
5774: PUSH
5775: LD_REAL  7.00000000000000E-0001
5778: MUL
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: LD_INT 3
5786: PUSH
5787: LD_VAR 0 1
5791: PUSH
5792: LD_REAL  4.00000000000000E-0001
5795: MUL
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_INT 20
5803: PUSH
5804: LD_VAR 0 1
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: PPUSH
5819: CALL_OW 423
5823: GO 5747
5825: POP
5826: POP
// end ;
5827: LD_VAR 0 2
5831: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5832: LD_INT 100
5834: IFFALSE 5929
5836: GO 5838
5838: DISABLE
5839: LD_INT 0
5841: PPUSH
5842: PPUSH
// begin if mpBattleFlag <= 0 then
5843: LD_EXP 22
5847: PUSH
5848: LD_INT 0
5850: LESSEQUAL
5851: IFFALSE 5855
// exit ;
5853: GO 5929
// strength := 100 ;
5855: LD_ADDR_VAR 0 2
5859: PUSH
5860: LD_INT 100
5862: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5863: LD_EXP 22
5867: PPUSH
5868: CALL_OW 67
// strength := Dec ( strength ) ;
5872: LD_ADDR_VAR 0 2
5876: PUSH
5877: LD_VAR 0 2
5881: PPUSH
5882: CALL 48460 0 1
5886: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL 5733 0 1
// until not strength ;
5896: LD_VAR 0 2
5900: NOT
5901: IFFALSE 5863
// for i in mpBattleFlags do
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_EXP 23
5912: PUSH
5913: FOR_IN
5914: IFFALSE 5927
// KillBattleFlag ( i ) ;
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 419
5925: GO 5913
5927: POP
5928: POP
// end ;
5929: PPOPN 2
5931: END
// every 0 0$1 marked mpActive do var side , tmp ;
5932: GO 5934
5934: DISABLE
5935: LD_INT 0
5937: PPUSH
5938: PPUSH
// begin if mpSibBomb <= 1 then
5939: LD_EXP 28
5943: PUSH
5944: LD_INT 1
5946: LESSEQUAL
5947: IFFALSE 5951
// exit ;
5949: GO 6024
// tmp := mpSibBomb ;
5951: LD_ADDR_VAR 0 2
5955: PUSH
5956: LD_EXP 28
5960: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5961: LD_INT 35
5963: PPUSH
5964: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5968: LD_ADDR_VAR 0 2
5972: PUSH
5973: LD_VAR 0 2
5977: PUSH
5978: LD_INT 35
5980: MINUS
5981: ST_TO_ADDR
// until not tmp ;
5982: LD_VAR 0 2
5986: NOT
5987: IFFALSE 5961
// for side := 1 to 8 do
5989: LD_ADDR_VAR 0 1
5993: PUSH
5994: DOUBLE
5995: LD_INT 1
5997: DEC
5998: ST_TO_ADDR
5999: LD_INT 8
6001: PUSH
6002: FOR_TO
6003: IFFALSE 6022
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6005: LD_INT 25
6007: PPUSH
6008: LD_VAR 0 1
6012: PPUSH
6013: LD_INT 1
6015: PPUSH
6016: CALL_OW 322
6020: GO 6002
6022: POP
6023: POP
// end ;
6024: PPOPN 2
6026: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6027: LD_INT 0
6029: PPUSH
6030: PPUSH
6031: PPUSH
// mpBuildUpTimeDelay := 0 ;
6032: LD_ADDR_EXP 42
6036: PUSH
6037: LD_INT 0
6039: ST_TO_ADDR
// if not mpBuildUpTime then
6040: LD_EXP 20
6044: NOT
6045: IFFALSE 6049
// exit ;
6047: GO 6232
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6049: LD_ADDR_EXP 42
6053: PUSH
6054: LD_INT 8400
6056: PUSH
6057: LD_INT 2100
6059: PUSH
6060: LD_EXP 20
6064: MUL
6065: PLUS
6066: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6067: LD_ADDR_EXP 43
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// for i := 1 to 8 do
6075: LD_ADDR_VAR 0 2
6079: PUSH
6080: DOUBLE
6081: LD_INT 1
6083: DEC
6084: ST_TO_ADDR
6085: LD_INT 8
6087: PUSH
6088: FOR_TO
6089: IFFALSE 6230
// if mpSidePositions [ i ] then
6091: LD_EXP 7
6095: PUSH
6096: LD_VAR 0 2
6100: ARRAY
6101: IFFALSE 6228
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6103: LD_EXP 19
6107: PUSH
6108: LD_EXP 7
6112: PUSH
6113: LD_VAR 0 2
6117: ARRAY
6118: ARRAY
6119: PPUSH
6120: LD_INT 5
6122: PPUSH
6123: CALL_OW 424
// for j := 1 to 8 do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: DOUBLE
6133: LD_INT 1
6135: DEC
6136: ST_TO_ADDR
6137: LD_INT 8
6139: PUSH
6140: FOR_TO
6141: IFFALSE 6226
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6143: LD_EXP 7
6147: PUSH
6148: LD_VAR 0 3
6152: ARRAY
6153: PUSH
6154: LD_EXP 8
6158: PUSH
6159: LD_VAR 0 2
6163: ARRAY
6164: PUSH
6165: LD_EXP 8
6169: PUSH
6170: LD_VAR 0 3
6174: ARRAY
6175: NONEQUAL
6176: PUSH
6177: LD_EXP 11
6181: NOT
6182: PUSH
6183: LD_VAR 0 2
6187: PUSH
6188: LD_VAR 0 3
6192: NONEQUAL
6193: AND
6194: OR
6195: AND
6196: IFFALSE 6224
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_EXP 19
6207: PUSH
6208: LD_EXP 7
6212: PUSH
6213: LD_VAR 0 2
6217: ARRAY
6218: ARRAY
6219: PPUSH
6220: CALL_OW 333
6224: GO 6140
6226: POP
6227: POP
// end ;
6228: GO 6088
6230: POP
6231: POP
// end ;
6232: LD_VAR 0 1
6236: RET
// function EndBuildUp ; var i , j ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// mpBuildUpTimeActive := false ;
6242: LD_ADDR_EXP 43
6246: PUSH
6247: LD_INT 0
6249: ST_TO_ADDR
// for i := 1 to 8 do
6250: LD_ADDR_VAR 0 2
6254: PUSH
6255: DOUBLE
6256: LD_INT 1
6258: DEC
6259: ST_TO_ADDR
6260: LD_INT 8
6262: PUSH
6263: FOR_TO
6264: IFFALSE 6405
// if mpSidePositions [ i ] then
6266: LD_EXP 7
6270: PUSH
6271: LD_VAR 0 2
6275: ARRAY
6276: IFFALSE 6403
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6278: LD_EXP 19
6282: PUSH
6283: LD_EXP 7
6287: PUSH
6288: LD_VAR 0 2
6292: ARRAY
6293: ARRAY
6294: PPUSH
6295: LD_INT 0
6297: PPUSH
6298: CALL_OW 424
// for j := 1 to 8 do
6302: LD_ADDR_VAR 0 3
6306: PUSH
6307: DOUBLE
6308: LD_INT 1
6310: DEC
6311: ST_TO_ADDR
6312: LD_INT 8
6314: PUSH
6315: FOR_TO
6316: IFFALSE 6401
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6318: LD_EXP 7
6322: PUSH
6323: LD_VAR 0 3
6327: ARRAY
6328: PUSH
6329: LD_EXP 8
6333: PUSH
6334: LD_VAR 0 2
6338: ARRAY
6339: PUSH
6340: LD_EXP 8
6344: PUSH
6345: LD_VAR 0 3
6349: ARRAY
6350: NONEQUAL
6351: PUSH
6352: LD_EXP 11
6356: NOT
6357: PUSH
6358: LD_VAR 0 2
6362: PUSH
6363: LD_VAR 0 3
6367: NONEQUAL
6368: AND
6369: OR
6370: AND
6371: IFFALSE 6399
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6373: LD_VAR 0 3
6377: PPUSH
6378: LD_EXP 19
6382: PUSH
6383: LD_EXP 7
6387: PUSH
6388: LD_VAR 0 2
6392: ARRAY
6393: ARRAY
6394: PPUSH
6395: CALL_OW 334
6399: GO 6315
6401: POP
6402: POP
// end ;
6403: GO 6263
6405: POP
6406: POP
// end ;
6407: LD_VAR 0 1
6411: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6412: LD_EXP 43
6416: IFFALSE 6591
6418: GO 6420
6420: DISABLE
6421: LD_INT 0
6423: PPUSH
6424: PPUSH
// begin for i := 1 to 8 do
6425: LD_ADDR_VAR 0 1
6429: PUSH
6430: DOUBLE
6431: LD_INT 1
6433: DEC
6434: ST_TO_ADDR
6435: LD_INT 8
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6588
// if mpSidePositions [ i ] then
6441: LD_EXP 7
6445: PUSH
6446: LD_VAR 0 1
6450: ARRAY
6451: IFFALSE 6586
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6453: LD_ADDR_VAR 0 2
6457: PUSH
6458: LD_EXP 19
6462: PUSH
6463: LD_EXP 7
6467: PUSH
6468: LD_VAR 0 1
6472: ARRAY
6473: ARRAY
6474: PPUSH
6475: LD_INT 2
6477: PUSH
6478: LD_INT 21
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 22
6505: PUSH
6506: LD_OWVAR 2
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PPUSH
6519: CALL_OW 70
6523: PUSH
6524: FOR_IN
6525: IFFALSE 6584
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6527: LD_EXP 8
6531: PUSH
6532: LD_VAR 0 1
6536: ARRAY
6537: PUSH
6538: LD_EXP 8
6542: PUSH
6543: LD_OWVAR 2
6547: ARRAY
6548: NONEQUAL
6549: PUSH
6550: LD_EXP 11
6554: NOT
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: LD_OWVAR 2
6565: NONEQUAL
6566: AND
6567: OR
6568: IFFALSE 6582
// ComMoveToArea ( un , BuildUpEscape ) ;
6570: LD_VAR 0 2
6574: PPUSH
6575: LD_INT 13
6577: PPUSH
6578: CALL_OW 113
6582: GO 6524
6584: POP
6585: POP
6586: GO 6438
6588: POP
6589: POP
// enable ;
6590: ENABLE
// end ;
6591: PPOPN 2
6593: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6594: LD_EXP 20
6598: IFFALSE 6648
6600: GO 6602
6602: DISABLE
6603: LD_INT 0
6605: PPUSH
// begin tmp := mpBuildUpTime ;
6606: LD_ADDR_VAR 0 1
6610: PUSH
6611: LD_EXP 20
6615: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6616: LD_INT 35
6618: PPUSH
6619: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6623: LD_ADDR_VAR 0 1
6627: PUSH
6628: LD_VAR 0 1
6632: PUSH
6633: LD_INT 35
6635: MINUS
6636: ST_TO_ADDR
// until not tmp ;
6637: LD_VAR 0 1
6641: NOT
6642: IFFALSE 6616
// EndBuildUp ;
6644: CALL 6237 0 0
// end ;
6648: PPOPN 1
6650: END
// every 0 0$1 trigger mpActive marked mpWin do
6651: LD_INT 100
6653: IFFALSE 6687
6655: GO 6657
6657: DISABLE
// begin if IAmServer then
6658: CALL_OW 518
6662: IFFALSE 6671
// wait ( 0 0$3 ) ;
6664: LD_INT 105
6666: PPUSH
6667: CALL_OW 67
// if Multiplayer then
6671: LD_OWVAR 4
6675: IFFALSE 6683
// YouWinInMultiplayer else
6677: CALL_OW 106
6681: GO 6687
// YouWin ;
6683: CALL_OW 103
// end ;
6687: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6688: LD_INT 0
6690: PPUSH
// result := false ;
6691: LD_ADDR_VAR 0 3
6695: PUSH
6696: LD_INT 0
6698: ST_TO_ADDR
// case gameType of GameTypeNormal :
6699: LD_VAR 0 1
6703: PUSH
6704: LD_INT 1
6706: DOUBLE
6707: EQUAL
6708: IFTRUE 6712
6710: GO 6785
6712: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6713: LD_ADDR_VAR 0 3
6717: PUSH
6718: LD_INT 22
6720: PUSH
6721: LD_VAR 0 2
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 2
6732: PUSH
6733: LD_INT 21
6735: PUSH
6736: LD_INT 1
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PUSH
6743: LD_INT 33
6745: PUSH
6746: LD_INT 3
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: LD_INT 33
6755: PUSH
6756: LD_INT 5
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: PPUSH
6778: CALL 11468 0 1
6782: ST_TO_ADDR
// end ; GameTypeSurvival :
6783: GO 7020
6785: LD_INT 2
6787: DOUBLE
6788: EQUAL
6789: IFTRUE 6793
6791: GO 6921
6793: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6794: LD_ADDR_VAR 0 3
6798: PUSH
6799: LD_INT 22
6801: PUSH
6802: LD_VAR 0 2
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: LD_INT 2
6813: PUSH
6814: LD_INT 30
6816: PUSH
6817: LD_INT 0
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: LD_INT 30
6826: PUSH
6827: LD_INT 1
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 69
6847: PPUSH
6848: CALL 11468 0 1
6852: PUSH
6853: LD_INT 22
6855: PUSH
6856: LD_VAR 0 2
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 2
6867: PUSH
6868: LD_INT 21
6870: PUSH
6871: LD_INT 1
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PUSH
6878: LD_INT 33
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 33
6890: PUSH
6891: LD_INT 5
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PPUSH
6908: CALL_OW 69
6912: PPUSH
6913: CALL 11468 0 1
6917: AND
6918: ST_TO_ADDR
// end ; GameTypeKing :
6919: GO 7020
6921: LD_INT 3
6923: DOUBLE
6924: EQUAL
6925: IFTRUE 6929
6927: GO 7019
6929: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: LD_INT 22
6937: PUSH
6938: LD_VAR 0 2
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 2
6949: PUSH
6950: LD_INT 21
6952: PUSH
6953: LD_INT 1
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 33
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 33
6972: PUSH
6973: LD_INT 5
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PPUSH
6990: CALL_OW 69
6994: PPUSH
6995: CALL 11468 0 1
6999: PUSH
7000: LD_VAR 0 2
7004: PPUSH
7005: CALL 58713 0 1
7009: PUSH
7010: LD_EXP 35
7014: LESS
7015: AND
7016: ST_TO_ADDR
// end ; end ;
7017: GO 7020
7019: POP
// end ;
7020: LD_VAR 0 3
7024: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7025: LD_INT 100
7027: IFFALSE 7249
7029: GO 7031
7031: DISABLE
7032: LD_INT 0
7034: PPUSH
7035: PPUSH
// begin if Multiplayer then
7036: LD_OWVAR 4
7040: IFFALSE 7048
// SetPlayerSpectator ( ) else
7042: CALL_OW 572
7046: GO 7057
// FogOff ( your_side ) ;
7048: LD_OWVAR 2
7052: PPUSH
7053: CALL_OW 344
// repeat gameIsOn := false ;
7057: LD_ADDR_VAR 0 1
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// for i := 1 to 8 do
7065: LD_ADDR_VAR 0 2
7069: PUSH
7070: DOUBLE
7071: LD_INT 1
7073: DEC
7074: ST_TO_ADDR
7075: LD_INT 8
7077: PUSH
7078: FOR_TO
7079: IFFALSE 7201
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7081: LD_EXP 7
7085: PUSH
7086: LD_VAR 0 2
7090: ARRAY
7091: PUSH
7092: LD_VAR 0 2
7096: PPUSH
7097: CALL_OW 108
7101: AND
7102: PUSH
7103: LD_VAR 0 2
7107: PUSH
7108: LD_OWVAR 2
7112: NONEQUAL
7113: AND
7114: IFFALSE 7199
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7116: LD_EXP 8
7120: PUSH
7121: LD_VAR 0 2
7125: ARRAY
7126: NOT
7127: PUSH
7128: LD_EXP 8
7132: PUSH
7133: LD_VAR 0 2
7137: ARRAY
7138: PUSH
7139: LD_EXP 8
7143: PUSH
7144: LD_OWVAR 2
7148: ARRAY
7149: NONEQUAL
7150: PUSH
7151: LD_OWVAR 2
7155: PPUSH
7156: LD_VAR 0 2
7160: PPUSH
7161: CALL_OW 81
7165: PUSH
7166: LD_INT 1
7168: NONEQUAL
7169: AND
7170: OR
7171: IFFALSE 7199
// if HasPowerByGameType ( mpGameType , i ) then
7173: LD_EXP 3
7177: PPUSH
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL 6688 0 2
7187: IFFALSE 7199
// begin gameIsOn := true ;
7189: LD_ADDR_VAR 0 1
7193: PUSH
7194: LD_INT 1
7196: ST_TO_ADDR
// break ;
7197: GO 7201
// end ;
7199: GO 7078
7201: POP
7202: POP
// wait ( 100 ) ;
7203: LD_INT 100
7205: PPUSH
7206: CALL_OW 67
// until not gameIsOn ;
7210: LD_VAR 0 1
7214: NOT
7215: IFFALSE 7057
// if IAmServer then
7217: CALL_OW 518
7221: IFFALSE 7230
// wait ( 0 0$3 ) ;
7223: LD_INT 105
7225: PPUSH
7226: CALL_OW 67
// if Multiplayer then
7230: LD_OWVAR 4
7234: IFFALSE 7242
// YouLostInMultiplayer else
7236: CALL_OW 107
7240: GO 7249
// YouLost (  ) ;
7242: LD_STRING 
7244: PPUSH
7245: CALL_OW 104
// end ;
7249: PPOPN 2
7251: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7252: LD_EXP 33
7256: IFFALSE 7632
7258: GO 7260
7260: DISABLE
7261: LD_INT 0
7263: PPUSH
7264: PPUSH
7265: PPUSH
7266: PPUSH
7267: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7268: LD_ADDR_VAR 0 5
7272: PUSH
7273: LD_INT 1
7275: PUSH
7276: LD_INT 2
7278: PUSH
7279: LD_INT 3
7281: PUSH
7282: LD_INT 4
7284: PUSH
7285: LD_INT 5
7287: PUSH
7288: LD_INT 6
7290: PUSH
7291: LD_INT 7
7293: PUSH
7294: LD_INT 8
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7307: LD_INT 350
7309: PPUSH
7310: CALL_OW 67
// for i := 1 to 8 do
7314: LD_ADDR_VAR 0 1
7318: PUSH
7319: DOUBLE
7320: LD_INT 1
7322: DEC
7323: ST_TO_ADDR
7324: LD_INT 8
7326: PUSH
7327: FOR_TO
7328: IFFALSE 7602
// begin j := sides [ i ] ;
7330: LD_ADDR_VAR 0 2
7334: PUSH
7335: LD_VAR 0 5
7339: PUSH
7340: LD_VAR 0 1
7344: ARRAY
7345: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7346: LD_EXP 40
7350: PUSH
7351: LD_VAR 0 2
7355: ARRAY
7356: PPUSH
7357: CALL 11468 0 1
7361: PUSH
7362: LD_VAR 0 2
7366: PPUSH
7367: CALL_OW 108
7371: AND
7372: PUSH
7373: LD_EXP 3
7377: PPUSH
7378: LD_VAR 0 2
7382: PPUSH
7383: CALL 6688 0 2
7387: AND
7388: IFFALSE 7600
// begin wait ( mpRespawn div 3 ) ;
7390: LD_EXP 33
7394: PUSH
7395: LD_INT 3
7397: DIV
7398: PPUSH
7399: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7403: LD_ADDR_VAR 0 3
7407: PUSH
7408: LD_INT 22
7410: PUSH
7411: LD_VAR 0 2
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PUSH
7420: LD_INT 50
7422: PUSH
7423: EMPTY
7424: LIST
7425: PUSH
7426: LD_INT 2
7428: PUSH
7429: LD_INT 30
7431: PUSH
7432: LD_INT 0
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 30
7441: PUSH
7442: LD_INT 1
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 69
7463: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7464: LD_VAR 0 3
7468: NOT
7469: PUSH
7470: LD_VAR 0 2
7474: PPUSH
7475: CALL_OW 108
7479: NOT
7480: OR
7481: PUSH
7482: LD_EXP 3
7486: PPUSH
7487: LD_VAR 0 2
7491: PPUSH
7492: CALL 6688 0 2
7496: NOT
7497: OR
7498: IFFALSE 7502
// continue ;
7500: GO 7327
// spawn := tmp [ 1 ] ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_VAR 0 3
7511: PUSH
7512: LD_INT 1
7514: ARRAY
7515: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7516: LD_EXP 40
7520: PUSH
7521: LD_VAR 0 2
7525: ARRAY
7526: PUSH
7527: LD_INT 1
7529: ARRAY
7530: PPUSH
7531: LD_VAR 0 4
7535: PPUSH
7536: CALL_OW 250
7540: PPUSH
7541: LD_VAR 0 4
7545: PPUSH
7546: CALL_OW 251
7550: PPUSH
7551: LD_INT 32
7553: PPUSH
7554: LD_INT 1
7556: PPUSH
7557: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7561: LD_ADDR_EXP 40
7565: PUSH
7566: LD_EXP 40
7570: PPUSH
7571: LD_VAR 0 2
7575: PPUSH
7576: LD_EXP 40
7580: PUSH
7581: LD_VAR 0 2
7585: ARRAY
7586: PPUSH
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 3
7594: PPUSH
7595: CALL_OW 1
7599: ST_TO_ADDR
// end ; end ;
7600: GO 7327
7602: POP
7603: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7604: LD_ADDR_VAR 0 5
7608: PUSH
7609: LD_VAR 0 5
7613: PPUSH
7614: LD_INT 1
7616: PPUSH
7617: LD_INT 8
7619: PPUSH
7620: LD_INT 1
7622: PPUSH
7623: CALL 13746 0 4
7627: ST_TO_ADDR
// until false ;
7628: LD_INT 0
7630: IFFALSE 7307
// end ;
7632: PPOPN 5
7634: END
// every 0 0$1 marked mpActive do
7635: GO 7637
7637: DISABLE
// begin enable ;
7638: ENABLE
// if not mpDisplayStrings then
7639: LD_EXP 38
7643: NOT
7644: IFFALSE 7655
// begin display_strings := [ ] ;
7646: LD_ADDR_OWVAR 47
7650: PUSH
7651: EMPTY
7652: ST_TO_ADDR
// exit ;
7653: GO 7665
// end ; display_strings := mpDisplayStrings ;
7655: LD_ADDR_OWVAR 47
7659: PUSH
7660: LD_EXP 38
7664: ST_TO_ADDR
// end ; end_of_file
7665: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7666: LD_INT 0
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
7672: PPUSH
7673: PPUSH
7674: PPUSH
7675: PPUSH
7676: PPUSH
// if GetType ( un ) = unit_vehicle then
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 247
7686: PUSH
7687: LD_INT 2
7689: EQUAL
7690: IFFALSE 7694
// exit ;
7692: GO 8326
// side := GetSide ( un ) ;
7694: LD_ADDR_VAR 0 9
7698: PUSH
7699: LD_VAR 0 1
7703: PPUSH
7704: CALL_OW 255
7708: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7709: LD_EXP 3
7713: PUSH
7714: LD_INT 2
7716: EQUAL
7717: IFFALSE 7793
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7719: LD_VAR 0 1
7723: PPUSH
7724: CALL_OW 266
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 1
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: IN
7739: IFFALSE 7793
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7741: LD_ADDR_VAR 0 3
7745: PUSH
7746: LD_INT 22
7748: PUSH
7749: LD_VAR 0 9
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 1
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 69
7776: PUSH
7777: FOR_IN
7778: IFFALSE 7791
// KillUnit ( i ) ;
7780: LD_VAR 0 3
7784: PPUSH
7785: CALL_OW 66
7789: GO 7777
7791: POP
7792: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7793: LD_VAR 0 1
7797: PPUSH
7798: CALL_OW 257
7802: PUSH
7803: LD_INT 12
7805: PUSH
7806: LD_INT 17
7808: PUSH
7809: LD_INT 15
7811: PUSH
7812: LD_INT 16
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: IN
7821: PUSH
7822: LD_VAR 0 1
7826: PPUSH
7827: CALL_OW 263
7831: PUSH
7832: LD_INT 5
7834: EQUAL
7835: OR
7836: IFFALSE 8055
// begin tag := 0 ;
7838: LD_ADDR_VAR 0 5
7842: PUSH
7843: LD_INT 0
7845: ST_TO_ADDR
// for i := 1 to 8 do
7846: LD_ADDR_VAR 0 3
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_INT 8
7858: PUSH
7859: FOR_TO
7860: IFFALSE 7894
// if un in mpApePosIndex [ i ] then
7862: LD_VAR 0 1
7866: PUSH
7867: LD_EXP 32
7871: PUSH
7872: LD_VAR 0 3
7876: ARRAY
7877: IN
7878: IFFALSE 7892
// begin tag := i ;
7880: LD_ADDR_VAR 0 5
7884: PUSH
7885: LD_VAR 0 3
7889: ST_TO_ADDR
// break ;
7890: GO 7894
// end ;
7892: GO 7859
7894: POP
7895: POP
// if not tag then
7896: LD_VAR 0 5
7900: NOT
7901: IFFALSE 7905
// exit ;
7903: GO 8326
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7905: LD_ADDR_VAR 0 7
7909: PUSH
7910: LD_EXP 31
7914: PUSH
7915: LD_EXP 7
7919: PUSH
7920: LD_VAR 0 5
7924: ARRAY
7925: ARRAY
7926: ST_TO_ADDR
// if not area then
7927: LD_VAR 0 7
7931: NOT
7932: IFFALSE 7936
// exit ;
7934: GO 8326
// wait ( 4 4$00 ) ;
7936: LD_INT 8400
7938: PPUSH
7939: CALL_OW 67
// repeat wait ( 10 ) ;
7943: LD_INT 10
7945: PPUSH
7946: CALL_OW 67
// until not mpBlockRespThread ;
7950: LD_EXP 41
7954: NOT
7955: IFFALSE 7943
// mpBlockRespThread := true ;
7957: LD_ADDR_EXP 41
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7965: LD_INT 0
7967: PPUSH
7968: CALL 43325 0 1
// ape := CreateHuman ;
7972: LD_ADDR_VAR 0 4
7976: PUSH
7977: CALL_OW 44
7981: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
7982: LD_ADDR_EXP 32
7986: PUSH
7987: LD_EXP 32
7991: PPUSH
7992: LD_VAR 0 5
7996: PPUSH
7997: LD_EXP 32
8001: PUSH
8002: LD_VAR 0 5
8006: ARRAY
8007: PPUSH
8008: LD_VAR 0 4
8012: PPUSH
8013: CALL 47077 0 2
8017: PPUSH
8018: CALL_OW 1
8022: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8023: LD_VAR 0 4
8027: PPUSH
8028: LD_VAR 0 7
8032: PPUSH
8033: LD_INT 0
8035: PPUSH
8036: CALL_OW 49
// wait ( 10 ) ;
8040: LD_INT 10
8042: PPUSH
8043: CALL_OW 67
// mpBlockRespThread := false ;
8047: LD_ADDR_EXP 41
8051: PUSH
8052: LD_INT 0
8054: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 247
8064: PUSH
8065: LD_INT 1
8067: EQUAL
8068: PUSH
8069: LD_VAR 0 1
8073: PPUSH
8074: CALL_OW 248
8078: PUSH
8079: LD_INT 0
8081: GREATER
8082: AND
8083: IFFALSE 8326
// begin if not mpRespawn then
8085: LD_EXP 33
8089: NOT
8090: IFFALSE 8094
// exit ;
8092: GO 8326
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8094: LD_VAR 0 9
8098: PPUSH
8099: CALL_OW 108
8103: NOT
8104: PUSH
8105: LD_EXP 3
8109: PPUSH
8110: LD_VAR 0 9
8114: PPUSH
8115: CALL 6688 0 2
8119: NOT
8120: AND
8121: IFFALSE 8125
// exit ;
8123: GO 8326
// side := GetSide ( un ) ;
8125: LD_ADDR_VAR 0 9
8129: PUSH
8130: LD_VAR 0 1
8134: PPUSH
8135: CALL_OW 255
8139: ST_TO_ADDR
// nation := GetNation ( un ) ;
8140: LD_ADDR_VAR 0 8
8144: PUSH
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 248
8154: ST_TO_ADDR
// class := GetClass ( un ) ;
8155: LD_ADDR_VAR 0 6
8159: PUSH
8160: LD_VAR 0 1
8164: PPUSH
8165: CALL_OW 257
8169: ST_TO_ADDR
// if class > 4 then
8170: LD_VAR 0 6
8174: PUSH
8175: LD_INT 4
8177: GREATER
8178: IFFALSE 8188
// class := 1 ;
8180: LD_ADDR_VAR 0 6
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// repeat wait ( 10 ) ;
8188: LD_INT 10
8190: PPUSH
8191: CALL_OW 67
// until not mpBlockRespThread ;
8195: LD_EXP 41
8199: NOT
8200: IFFALSE 8188
// mpBlockRespThread := true ;
8202: LD_ADDR_EXP 41
8206: PUSH
8207: LD_INT 1
8209: ST_TO_ADDR
// uc_side := side ;
8210: LD_ADDR_OWVAR 20
8214: PUSH
8215: LD_VAR 0 9
8219: ST_TO_ADDR
// uc_nation := nation ;
8220: LD_ADDR_OWVAR 21
8224: PUSH
8225: LD_VAR 0 8
8229: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8230: LD_INT 0
8232: PPUSH
8233: LD_VAR 0 6
8237: PPUSH
8238: LD_INT 2
8240: PPUSH
8241: CALL_OW 380
// un := CreateHuman ;
8245: LD_ADDR_VAR 0 1
8249: PUSH
8250: CALL_OW 44
8254: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8255: LD_ADDR_EXP 40
8259: PUSH
8260: LD_EXP 40
8264: PPUSH
8265: LD_VAR 0 9
8269: PPUSH
8270: LD_EXP 40
8274: PUSH
8275: LD_VAR 0 9
8279: ARRAY
8280: PPUSH
8281: LD_EXP 40
8285: PUSH
8286: LD_VAR 0 9
8290: ARRAY
8291: PUSH
8292: LD_INT 1
8294: PLUS
8295: PPUSH
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 1
8305: PPUSH
8306: CALL_OW 1
8310: ST_TO_ADDR
// wait ( 10 ) ;
8311: LD_INT 10
8313: PPUSH
8314: CALL_OW 67
// mpBlockRespThread := false ;
8318: LD_ADDR_EXP 41
8322: PUSH
8323: LD_INT 0
8325: ST_TO_ADDR
// end ; end ;
8326: LD_VAR 0 2
8330: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8331: LD_INT 0
8333: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8334: LD_VAR 0 1
8338: PPUSH
8339: CALL_OW 266
8343: PUSH
8344: LD_INT 0
8346: PUSH
8347: LD_INT 1
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: IN
8354: IFFALSE 8379
// SetBName ( building , @ & GetSide ( building ) ) ;
8356: LD_VAR 0 1
8360: PPUSH
8361: LD_STRING @
8363: PUSH
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 255
8373: STR
8374: PPUSH
8375: CALL_OW 500
// end ;
8379: LD_VAR 0 2
8383: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8384: LD_INT 0
8386: PPUSH
8387: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8388: LD_EXP 3
8392: PUSH
8393: LD_INT 2
8395: EQUAL
8396: PUSH
8397: LD_VAR 0 1
8401: PPUSH
8402: CALL_OW 266
8406: PUSH
8407: LD_INT 0
8409: PUSH
8410: LD_INT 1
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: IN
8417: AND
8418: IFFALSE 8483
// begin KillUnit ( building ) ;
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8429: LD_ADDR_VAR 0 5
8433: PUSH
8434: LD_INT 22
8436: PUSH
8437: LD_VAR 0 2
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 21
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PPUSH
8460: CALL_OW 69
8464: PUSH
8465: FOR_IN
8466: IFFALSE 8479
// KillUnit ( i ) ;
8468: LD_VAR 0 5
8472: PPUSH
8473: CALL_OW 66
8477: GO 8465
8479: POP
8480: POP
// exit ;
8481: GO 8528
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8483: LD_VAR 0 1
8487: PPUSH
8488: CALL_OW 266
8492: PUSH
8493: LD_INT 0
8495: PUSH
8496: LD_INT 1
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: IN
8503: IFFALSE 8528
// SetBName ( building , @ & GetSide ( building ) ) ;
8505: LD_VAR 0 1
8509: PPUSH
8510: LD_STRING @
8512: PUSH
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 255
8522: STR
8523: PPUSH
8524: CALL_OW 500
// end ; end_of_file
8528: LD_VAR 0 4
8532: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8533: LD_EXP 39
8537: PUSH
8538: CALL 8743 0 0
8542: AND
8543: PUSH
8544: LD_OWVAR 4
8548: AND
8549: IFFALSE 8740
8551: GO 8553
8553: DISABLE
8554: LD_INT 0
8556: PPUSH
8557: PPUSH
// begin canWin := false ;
8558: LD_ADDR_VAR 0 2
8562: PUSH
8563: LD_INT 0
8565: ST_TO_ADDR
// if not HasPower ( your_side ) then
8566: LD_OWVAR 2
8570: PPUSH
8571: CALL 8783 0 1
8575: NOT
8576: IFFALSE 8587
// begin Multiplayer_Loose_Message ;
8578: CALL_OW 521
// enable ( mpLose ) ;
8582: LD_INT 102
8584: ENABLE_MARKED
// end else
8585: GO 8740
// begin canWin := true ;
8587: LD_ADDR_VAR 0 2
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// for i := 1 to 8 do
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 8
8607: PUSH
8608: FOR_TO
8609: IFFALSE 8726
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8611: LD_EXP 7
8615: PUSH
8616: LD_VAR 0 1
8620: ARRAY
8621: PUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 108
8631: AND
8632: PUSH
8633: LD_VAR 0 1
8637: PUSH
8638: LD_OWVAR 2
8642: NONEQUAL
8643: AND
8644: IFFALSE 8724
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8646: LD_EXP 8
8650: PUSH
8651: LD_VAR 0 1
8655: ARRAY
8656: NOT
8657: PUSH
8658: LD_EXP 8
8662: PUSH
8663: LD_VAR 0 1
8667: ARRAY
8668: PUSH
8669: LD_EXP 8
8673: PUSH
8674: LD_OWVAR 2
8678: ARRAY
8679: NONEQUAL
8680: PUSH
8681: LD_OWVAR 2
8685: PPUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 81
8695: PUSH
8696: LD_INT 1
8698: NONEQUAL
8699: AND
8700: OR
8701: IFFALSE 8724
// if HasPower ( i ) then
8703: LD_VAR 0 1
8707: PPUSH
8708: CALL 8783 0 1
8712: IFFALSE 8724
// begin canWin := false ;
8714: LD_ADDR_VAR 0 2
8718: PUSH
8719: LD_INT 0
8721: ST_TO_ADDR
// break ;
8722: GO 8726
// end ;
8724: GO 8608
8726: POP
8727: POP
// if canWin then
8728: LD_VAR 0 2
8732: IFFALSE 8739
// enable ( mpWin ) else
8734: LD_INT 101
8736: ENABLE_MARKED
8737: GO 8740
// enable ;
8739: ENABLE
// end ; end ;
8740: PPOPN 2
8742: END
// function CanWinLoose ; begin
8743: LD_INT 0
8745: PPUSH
// result := true ;
8746: LD_ADDR_VAR 0 1
8750: PUSH
8751: LD_INT 1
8753: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8754: CALL_OW 531
8758: PUSH
8759: CALL_OW 519
8763: PUSH
8764: LD_INT 1
8766: GREATER
8767: AND
8768: IFFALSE 8778
// result := false ;
8770: LD_ADDR_VAR 0 1
8774: PUSH
8775: LD_INT 0
8777: ST_TO_ADDR
// end ;
8778: LD_VAR 0 1
8782: RET
// function HasPower ( i ) ; begin
8783: LD_INT 0
8785: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8786: LD_ADDR_VAR 0 2
8790: PUSH
8791: LD_INT 22
8793: PUSH
8794: LD_VAR 0 1
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 2
8805: PUSH
8806: LD_INT 21
8808: PUSH
8809: LD_INT 1
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 33
8818: PUSH
8819: LD_INT 3
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PUSH
8826: LD_INT 33
8828: PUSH
8829: LD_INT 5
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: ST_TO_ADDR
// end ; end_of_file
8851: LD_VAR 0 2
8855: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8856: LD_EXP 39
8860: IFFALSE 8903
8862: GO 8864
8864: DISABLE
8865: LD_INT 0
8867: PPUSH
// begin for i := 1 to 8 do
8868: LD_ADDR_VAR 0 1
8872: PUSH
8873: DOUBLE
8874: LD_INT 1
8876: DEC
8877: ST_TO_ADDR
8878: LD_INT 8
8880: PUSH
8881: FOR_TO
8882: IFFALSE 8901
// SetRestrict ( b_depot , i , state_disabled ) ;
8884: LD_INT 0
8886: PPUSH
8887: LD_VAR 0 1
8891: PPUSH
8892: LD_INT 0
8894: PPUSH
8895: CALL_OW 324
8899: GO 8881
8901: POP
8902: POP
// end ;
8903: PPOPN 1
8905: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8906: LD_EXP 39
8910: PUSH
8911: CALL 9116 0 0
8915: AND
8916: PUSH
8917: LD_OWVAR 4
8921: AND
8922: IFFALSE 9113
8924: GO 8926
8926: DISABLE
8927: LD_INT 0
8929: PPUSH
8930: PPUSH
// begin canWin := false ;
8931: LD_ADDR_VAR 0 2
8935: PUSH
8936: LD_INT 0
8938: ST_TO_ADDR
// if not HasPower ( your_side ) then
8939: LD_OWVAR 2
8943: PPUSH
8944: CALL 9156 0 1
8948: NOT
8949: IFFALSE 8960
// begin Multiplayer_Loose_Message ;
8951: CALL_OW 521
// enable ( mpLose ) ;
8955: LD_INT 102
8957: ENABLE_MARKED
// end else
8958: GO 9113
// begin canWin := true ;
8960: LD_ADDR_VAR 0 2
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// for i := 1 to 8 do
8968: LD_ADDR_VAR 0 1
8972: PUSH
8973: DOUBLE
8974: LD_INT 1
8976: DEC
8977: ST_TO_ADDR
8978: LD_INT 8
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9099
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8984: LD_EXP 7
8988: PUSH
8989: LD_VAR 0 1
8993: ARRAY
8994: PUSH
8995: LD_VAR 0 1
8999: PPUSH
9000: CALL_OW 108
9004: AND
9005: PUSH
9006: LD_VAR 0 1
9010: PUSH
9011: LD_OWVAR 2
9015: NONEQUAL
9016: AND
9017: IFFALSE 9097
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9019: LD_EXP 8
9023: PUSH
9024: LD_VAR 0 1
9028: ARRAY
9029: NOT
9030: PUSH
9031: LD_EXP 8
9035: PUSH
9036: LD_VAR 0 1
9040: ARRAY
9041: PUSH
9042: LD_EXP 8
9046: PUSH
9047: LD_OWVAR 2
9051: ARRAY
9052: NONEQUAL
9053: PUSH
9054: LD_OWVAR 2
9058: PPUSH
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 81
9068: PUSH
9069: LD_INT 1
9071: NONEQUAL
9072: AND
9073: OR
9074: IFFALSE 9097
// if HasPower ( i ) then
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL 9156 0 1
9085: IFFALSE 9097
// begin canWin := false ;
9087: LD_ADDR_VAR 0 2
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// break ;
9095: GO 9099
// end ;
9097: GO 8981
9099: POP
9100: POP
// if canWin then
9101: LD_VAR 0 2
9105: IFFALSE 9112
// enable ( mpWin ) else
9107: LD_INT 101
9109: ENABLE_MARKED
9110: GO 9113
// enable ;
9112: ENABLE
// end ; end ;
9113: PPOPN 2
9115: END
// function CanWinLoose ; begin
9116: LD_INT 0
9118: PPUSH
// result := true ;
9119: LD_ADDR_VAR 0 1
9123: PUSH
9124: LD_INT 1
9126: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9127: CALL_OW 531
9131: PUSH
9132: CALL_OW 519
9136: PUSH
9137: LD_INT 1
9139: GREATER
9140: AND
9141: IFFALSE 9151
// result := false ;
9143: LD_ADDR_VAR 0 1
9147: PUSH
9148: LD_INT 0
9150: ST_TO_ADDR
// end ;
9151: LD_VAR 0 1
9155: RET
// function HasPower ( i ) ; begin
9156: LD_INT 0
9158: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9159: LD_INT 22
9161: PUSH
9162: LD_VAR 0 1
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 2
9173: PUSH
9174: LD_INT 30
9176: PUSH
9177: LD_INT 0
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: LD_INT 30
9186: PUSH
9187: LD_INT 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: NOT
9208: IFFALSE 9212
// exit ;
9210: GO 9277
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9212: LD_ADDR_VAR 0 2
9216: PUSH
9217: LD_INT 22
9219: PUSH
9220: LD_VAR 0 1
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 1
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 33
9244: PUSH
9245: LD_INT 3
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 33
9254: PUSH
9255: LD_INT 5
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PPUSH
9272: CALL_OW 69
9276: ST_TO_ADDR
// end ; end_of_file
9277: LD_VAR 0 2
9281: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9282: LD_INT 0
9284: PPUSH
9285: PPUSH
// if exist_mode then
9286: LD_VAR 0 2
9290: IFFALSE 9336
// begin unit := CreateCharacter ( prefix & ident ) ;
9292: LD_ADDR_VAR 0 5
9296: PUSH
9297: LD_VAR 0 3
9301: PUSH
9302: LD_VAR 0 1
9306: STR
9307: PPUSH
9308: CALL_OW 34
9312: ST_TO_ADDR
// if unit then
9313: LD_VAR 0 5
9317: IFFALSE 9334
// DeleteCharacters ( prefix & ident ) ;
9319: LD_VAR 0 3
9323: PUSH
9324: LD_VAR 0 1
9328: STR
9329: PPUSH
9330: CALL_OW 40
// end else
9334: GO 9351
// unit := NewCharacter ( ident ) ;
9336: LD_ADDR_VAR 0 5
9340: PUSH
9341: LD_VAR 0 1
9345: PPUSH
9346: CALL_OW 25
9350: ST_TO_ADDR
// result := unit ;
9351: LD_ADDR_VAR 0 4
9355: PUSH
9356: LD_VAR 0 5
9360: ST_TO_ADDR
// end ;
9361: LD_VAR 0 4
9365: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9366: LD_INT 0
9368: PPUSH
9369: PPUSH
// if exist_mode then
9370: LD_VAR 0 2
9374: IFFALSE 9399
// unit := CreateCharacter ( prefix & ident ) else
9376: LD_ADDR_VAR 0 5
9380: PUSH
9381: LD_VAR 0 3
9385: PUSH
9386: LD_VAR 0 1
9390: STR
9391: PPUSH
9392: CALL_OW 34
9396: ST_TO_ADDR
9397: GO 9414
// unit := NewCharacter ( ident ) ;
9399: LD_ADDR_VAR 0 5
9403: PUSH
9404: LD_VAR 0 1
9408: PPUSH
9409: CALL_OW 25
9413: ST_TO_ADDR
// result := unit ;
9414: LD_ADDR_VAR 0 4
9418: PUSH
9419: LD_VAR 0 5
9423: ST_TO_ADDR
// end ;
9424: LD_VAR 0 4
9428: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9429: LD_INT 0
9431: PPUSH
9432: PPUSH
// if not side or not nation then
9433: LD_VAR 0 1
9437: NOT
9438: PUSH
9439: LD_VAR 0 2
9443: NOT
9444: OR
9445: IFFALSE 9449
// exit ;
9447: GO 10217
// case nation of nation_american :
9449: LD_VAR 0 2
9453: PUSH
9454: LD_INT 1
9456: DOUBLE
9457: EQUAL
9458: IFTRUE 9462
9460: GO 9676
9462: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9463: LD_ADDR_VAR 0 4
9467: PUSH
9468: LD_INT 35
9470: PUSH
9471: LD_INT 45
9473: PUSH
9474: LD_INT 46
9476: PUSH
9477: LD_INT 47
9479: PUSH
9480: LD_INT 82
9482: PUSH
9483: LD_INT 83
9485: PUSH
9486: LD_INT 84
9488: PUSH
9489: LD_INT 85
9491: PUSH
9492: LD_INT 86
9494: PUSH
9495: LD_INT 1
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 6
9503: PUSH
9504: LD_INT 15
9506: PUSH
9507: LD_INT 16
9509: PUSH
9510: LD_INT 7
9512: PUSH
9513: LD_INT 12
9515: PUSH
9516: LD_INT 13
9518: PUSH
9519: LD_INT 10
9521: PUSH
9522: LD_INT 14
9524: PUSH
9525: LD_INT 20
9527: PUSH
9528: LD_INT 21
9530: PUSH
9531: LD_INT 22
9533: PUSH
9534: LD_INT 25
9536: PUSH
9537: LD_INT 32
9539: PUSH
9540: LD_INT 27
9542: PUSH
9543: LD_INT 36
9545: PUSH
9546: LD_INT 69
9548: PUSH
9549: LD_INT 39
9551: PUSH
9552: LD_INT 34
9554: PUSH
9555: LD_INT 40
9557: PUSH
9558: LD_INT 48
9560: PUSH
9561: LD_INT 49
9563: PUSH
9564: LD_INT 50
9566: PUSH
9567: LD_INT 51
9569: PUSH
9570: LD_INT 52
9572: PUSH
9573: LD_INT 53
9575: PUSH
9576: LD_INT 54
9578: PUSH
9579: LD_INT 55
9581: PUSH
9582: LD_INT 56
9584: PUSH
9585: LD_INT 57
9587: PUSH
9588: LD_INT 58
9590: PUSH
9591: LD_INT 59
9593: PUSH
9594: LD_INT 60
9596: PUSH
9597: LD_INT 61
9599: PUSH
9600: LD_INT 62
9602: PUSH
9603: LD_INT 80
9605: PUSH
9606: LD_INT 82
9608: PUSH
9609: LD_INT 83
9611: PUSH
9612: LD_INT 84
9614: PUSH
9615: LD_INT 85
9617: PUSH
9618: LD_INT 86
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: ST_TO_ADDR
9674: GO 10141
9676: LD_INT 2
9678: DOUBLE
9679: EQUAL
9680: IFTRUE 9684
9682: GO 9910
9684: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9685: LD_ADDR_VAR 0 4
9689: PUSH
9690: LD_INT 35
9692: PUSH
9693: LD_INT 45
9695: PUSH
9696: LD_INT 46
9698: PUSH
9699: LD_INT 47
9701: PUSH
9702: LD_INT 82
9704: PUSH
9705: LD_INT 83
9707: PUSH
9708: LD_INT 84
9710: PUSH
9711: LD_INT 85
9713: PUSH
9714: LD_INT 87
9716: PUSH
9717: LD_INT 70
9719: PUSH
9720: LD_INT 1
9722: PUSH
9723: LD_INT 11
9725: PUSH
9726: LD_INT 3
9728: PUSH
9729: LD_INT 4
9731: PUSH
9732: LD_INT 5
9734: PUSH
9735: LD_INT 6
9737: PUSH
9738: LD_INT 15
9740: PUSH
9741: LD_INT 18
9743: PUSH
9744: LD_INT 7
9746: PUSH
9747: LD_INT 17
9749: PUSH
9750: LD_INT 8
9752: PUSH
9753: LD_INT 20
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 22
9761: PUSH
9762: LD_INT 72
9764: PUSH
9765: LD_INT 26
9767: PUSH
9768: LD_INT 69
9770: PUSH
9771: LD_INT 39
9773: PUSH
9774: LD_INT 40
9776: PUSH
9777: LD_INT 41
9779: PUSH
9780: LD_INT 42
9782: PUSH
9783: LD_INT 43
9785: PUSH
9786: LD_INT 48
9788: PUSH
9789: LD_INT 49
9791: PUSH
9792: LD_INT 50
9794: PUSH
9795: LD_INT 51
9797: PUSH
9798: LD_INT 52
9800: PUSH
9801: LD_INT 53
9803: PUSH
9804: LD_INT 54
9806: PUSH
9807: LD_INT 55
9809: PUSH
9810: LD_INT 56
9812: PUSH
9813: LD_INT 60
9815: PUSH
9816: LD_INT 61
9818: PUSH
9819: LD_INT 62
9821: PUSH
9822: LD_INT 66
9824: PUSH
9825: LD_INT 67
9827: PUSH
9828: LD_INT 68
9830: PUSH
9831: LD_INT 81
9833: PUSH
9834: LD_INT 82
9836: PUSH
9837: LD_INT 83
9839: PUSH
9840: LD_INT 84
9842: PUSH
9843: LD_INT 85
9845: PUSH
9846: LD_INT 87
9848: PUSH
9849: LD_INT 88
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: ST_TO_ADDR
9908: GO 10141
9910: LD_INT 3
9912: DOUBLE
9913: EQUAL
9914: IFTRUE 9918
9916: GO 10140
9918: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9919: LD_ADDR_VAR 0 4
9923: PUSH
9924: LD_INT 46
9926: PUSH
9927: LD_INT 47
9929: PUSH
9930: LD_INT 1
9932: PUSH
9933: LD_INT 2
9935: PUSH
9936: LD_INT 82
9938: PUSH
9939: LD_INT 83
9941: PUSH
9942: LD_INT 84
9944: PUSH
9945: LD_INT 85
9947: PUSH
9948: LD_INT 86
9950: PUSH
9951: LD_INT 11
9953: PUSH
9954: LD_INT 9
9956: PUSH
9957: LD_INT 20
9959: PUSH
9960: LD_INT 19
9962: PUSH
9963: LD_INT 21
9965: PUSH
9966: LD_INT 24
9968: PUSH
9969: LD_INT 22
9971: PUSH
9972: LD_INT 25
9974: PUSH
9975: LD_INT 28
9977: PUSH
9978: LD_INT 29
9980: PUSH
9981: LD_INT 30
9983: PUSH
9984: LD_INT 31
9986: PUSH
9987: LD_INT 37
9989: PUSH
9990: LD_INT 38
9992: PUSH
9993: LD_INT 32
9995: PUSH
9996: LD_INT 27
9998: PUSH
9999: LD_INT 33
10001: PUSH
10002: LD_INT 69
10004: PUSH
10005: LD_INT 39
10007: PUSH
10008: LD_INT 34
10010: PUSH
10011: LD_INT 40
10013: PUSH
10014: LD_INT 71
10016: PUSH
10017: LD_INT 23
10019: PUSH
10020: LD_INT 44
10022: PUSH
10023: LD_INT 48
10025: PUSH
10026: LD_INT 49
10028: PUSH
10029: LD_INT 50
10031: PUSH
10032: LD_INT 51
10034: PUSH
10035: LD_INT 52
10037: PUSH
10038: LD_INT 53
10040: PUSH
10041: LD_INT 54
10043: PUSH
10044: LD_INT 55
10046: PUSH
10047: LD_INT 56
10049: PUSH
10050: LD_INT 57
10052: PUSH
10053: LD_INT 58
10055: PUSH
10056: LD_INT 59
10058: PUSH
10059: LD_INT 63
10061: PUSH
10062: LD_INT 64
10064: PUSH
10065: LD_INT 65
10067: PUSH
10068: LD_INT 82
10070: PUSH
10071: LD_INT 83
10073: PUSH
10074: LD_INT 84
10076: PUSH
10077: LD_INT 85
10079: PUSH
10080: LD_INT 86
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: ST_TO_ADDR
10138: GO 10141
10140: POP
// if state > - 1 and state < 3 then
10141: LD_VAR 0 3
10145: PUSH
10146: LD_INT 1
10148: NEG
10149: GREATER
10150: PUSH
10151: LD_VAR 0 3
10155: PUSH
10156: LD_INT 3
10158: LESS
10159: AND
10160: IFFALSE 10217
// for i in result do
10162: LD_ADDR_VAR 0 5
10166: PUSH
10167: LD_VAR 0 4
10171: PUSH
10172: FOR_IN
10173: IFFALSE 10215
// if GetTech ( i , side ) <> state then
10175: LD_VAR 0 5
10179: PPUSH
10180: LD_VAR 0 1
10184: PPUSH
10185: CALL_OW 321
10189: PUSH
10190: LD_VAR 0 3
10194: NONEQUAL
10195: IFFALSE 10213
// result := result diff i ;
10197: LD_ADDR_VAR 0 4
10201: PUSH
10202: LD_VAR 0 4
10206: PUSH
10207: LD_VAR 0 5
10211: DIFF
10212: ST_TO_ADDR
10213: GO 10172
10215: POP
10216: POP
// end ;
10217: LD_VAR 0 4
10221: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10222: LD_INT 0
10224: PPUSH
10225: PPUSH
10226: PPUSH
// result := true ;
10227: LD_ADDR_VAR 0 3
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10235: LD_ADDR_VAR 0 5
10239: PUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: CALL_OW 480
10249: ST_TO_ADDR
// if not tmp then
10250: LD_VAR 0 5
10254: NOT
10255: IFFALSE 10259
// exit ;
10257: GO 10308
// for i in tmp do
10259: LD_ADDR_VAR 0 4
10263: PUSH
10264: LD_VAR 0 5
10268: PUSH
10269: FOR_IN
10270: IFFALSE 10306
// if GetTech ( i , side ) <> state_researched then
10272: LD_VAR 0 4
10276: PPUSH
10277: LD_VAR 0 1
10281: PPUSH
10282: CALL_OW 321
10286: PUSH
10287: LD_INT 2
10289: NONEQUAL
10290: IFFALSE 10304
// begin result := false ;
10292: LD_ADDR_VAR 0 3
10296: PUSH
10297: LD_INT 0
10299: ST_TO_ADDR
// exit ;
10300: POP
10301: POP
10302: GO 10308
// end ;
10304: GO 10269
10306: POP
10307: POP
// end ;
10308: LD_VAR 0 3
10312: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10313: LD_INT 0
10315: PPUSH
10316: PPUSH
10317: PPUSH
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
10325: PPUSH
10326: PPUSH
10327: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10328: LD_VAR 0 1
10332: NOT
10333: PUSH
10334: LD_VAR 0 1
10338: PPUSH
10339: CALL_OW 257
10343: PUSH
10344: LD_INT 9
10346: NONEQUAL
10347: OR
10348: IFFALSE 10352
// exit ;
10350: GO 10925
// side := GetSide ( unit ) ;
10352: LD_ADDR_VAR 0 9
10356: PUSH
10357: LD_VAR 0 1
10361: PPUSH
10362: CALL_OW 255
10366: ST_TO_ADDR
// tech_space := tech_spacanom ;
10367: LD_ADDR_VAR 0 12
10371: PUSH
10372: LD_INT 29
10374: ST_TO_ADDR
// tech_time := tech_taurad ;
10375: LD_ADDR_VAR 0 13
10379: PUSH
10380: LD_INT 28
10382: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10383: LD_ADDR_VAR 0 11
10387: PUSH
10388: LD_VAR 0 1
10392: PPUSH
10393: CALL_OW 310
10397: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10398: LD_VAR 0 11
10402: PPUSH
10403: CALL_OW 247
10407: PUSH
10408: LD_INT 2
10410: EQUAL
10411: IFFALSE 10415
// exit ;
10413: GO 10925
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10415: LD_ADDR_VAR 0 8
10419: PUSH
10420: LD_INT 81
10422: PUSH
10423: LD_VAR 0 9
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 3
10434: PUSH
10435: LD_INT 21
10437: PUSH
10438: LD_INT 3
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PPUSH
10453: CALL_OW 69
10457: ST_TO_ADDR
// if not tmp then
10458: LD_VAR 0 8
10462: NOT
10463: IFFALSE 10467
// exit ;
10465: GO 10925
// if in_unit then
10467: LD_VAR 0 11
10471: IFFALSE 10495
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10473: LD_ADDR_VAR 0 10
10477: PUSH
10478: LD_VAR 0 8
10482: PPUSH
10483: LD_VAR 0 11
10487: PPUSH
10488: CALL_OW 74
10492: ST_TO_ADDR
10493: GO 10515
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10495: LD_ADDR_VAR 0 10
10499: PUSH
10500: LD_VAR 0 8
10504: PPUSH
10505: LD_VAR 0 1
10509: PPUSH
10510: CALL_OW 74
10514: ST_TO_ADDR
// if not enemy then
10515: LD_VAR 0 10
10519: NOT
10520: IFFALSE 10524
// exit ;
10522: GO 10925
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10524: LD_VAR 0 11
10528: PUSH
10529: LD_VAR 0 11
10533: PPUSH
10534: LD_VAR 0 10
10538: PPUSH
10539: CALL_OW 296
10543: PUSH
10544: LD_INT 13
10546: GREATER
10547: AND
10548: PUSH
10549: LD_VAR 0 1
10553: PPUSH
10554: LD_VAR 0 10
10558: PPUSH
10559: CALL_OW 296
10563: PUSH
10564: LD_INT 12
10566: GREATER
10567: OR
10568: IFFALSE 10572
// exit ;
10570: GO 10925
// missile := [ 1 ] ;
10572: LD_ADDR_VAR 0 14
10576: PUSH
10577: LD_INT 1
10579: PUSH
10580: EMPTY
10581: LIST
10582: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10583: LD_VAR 0 9
10587: PPUSH
10588: LD_VAR 0 12
10592: PPUSH
10593: CALL_OW 325
10597: IFFALSE 10626
// missile := Replace ( missile , missile + 1 , 2 ) ;
10599: LD_ADDR_VAR 0 14
10603: PUSH
10604: LD_VAR 0 14
10608: PPUSH
10609: LD_VAR 0 14
10613: PUSH
10614: LD_INT 1
10616: PLUS
10617: PPUSH
10618: LD_INT 2
10620: PPUSH
10621: CALL_OW 1
10625: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10626: LD_VAR 0 9
10630: PPUSH
10631: LD_VAR 0 13
10635: PPUSH
10636: CALL_OW 325
10640: PUSH
10641: LD_VAR 0 10
10645: PPUSH
10646: CALL_OW 255
10650: PPUSH
10651: LD_VAR 0 13
10655: PPUSH
10656: CALL_OW 325
10660: NOT
10661: AND
10662: IFFALSE 10691
// missile := Replace ( missile , missile + 1 , 3 ) ;
10664: LD_ADDR_VAR 0 14
10668: PUSH
10669: LD_VAR 0 14
10673: PPUSH
10674: LD_VAR 0 14
10678: PUSH
10679: LD_INT 1
10681: PLUS
10682: PPUSH
10683: LD_INT 3
10685: PPUSH
10686: CALL_OW 1
10690: ST_TO_ADDR
// if missile < 2 then
10691: LD_VAR 0 14
10695: PUSH
10696: LD_INT 2
10698: LESS
10699: IFFALSE 10703
// exit ;
10701: GO 10925
// x := GetX ( enemy ) ;
10703: LD_ADDR_VAR 0 4
10707: PUSH
10708: LD_VAR 0 10
10712: PPUSH
10713: CALL_OW 250
10717: ST_TO_ADDR
// y := GetY ( enemy ) ;
10718: LD_ADDR_VAR 0 5
10722: PUSH
10723: LD_VAR 0 10
10727: PPUSH
10728: CALL_OW 251
10732: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10733: LD_ADDR_VAR 0 6
10737: PUSH
10738: LD_VAR 0 4
10742: PUSH
10743: LD_INT 1
10745: NEG
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 12
10754: PLUS
10755: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10756: LD_ADDR_VAR 0 7
10760: PUSH
10761: LD_VAR 0 5
10765: PUSH
10766: LD_INT 1
10768: NEG
10769: PPUSH
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 12
10777: PLUS
10778: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10779: LD_VAR 0 6
10783: PPUSH
10784: LD_VAR 0 7
10788: PPUSH
10789: CALL_OW 488
10793: NOT
10794: IFFALSE 10816
// begin _x := x ;
10796: LD_ADDR_VAR 0 6
10800: PUSH
10801: LD_VAR 0 4
10805: ST_TO_ADDR
// _y := y ;
10806: LD_ADDR_VAR 0 7
10810: PUSH
10811: LD_VAR 0 5
10815: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10816: LD_ADDR_VAR 0 3
10820: PUSH
10821: LD_INT 1
10823: PPUSH
10824: LD_VAR 0 14
10828: PPUSH
10829: CALL_OW 12
10833: ST_TO_ADDR
// case i of 1 :
10834: LD_VAR 0 3
10838: PUSH
10839: LD_INT 1
10841: DOUBLE
10842: EQUAL
10843: IFTRUE 10847
10845: GO 10864
10847: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10848: LD_VAR 0 1
10852: PPUSH
10853: LD_VAR 0 10
10857: PPUSH
10858: CALL_OW 115
10862: GO 10925
10864: LD_INT 2
10866: DOUBLE
10867: EQUAL
10868: IFTRUE 10872
10870: GO 10894
10872: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10873: LD_VAR 0 1
10877: PPUSH
10878: LD_VAR 0 6
10882: PPUSH
10883: LD_VAR 0 7
10887: PPUSH
10888: CALL_OW 153
10892: GO 10925
10894: LD_INT 3
10896: DOUBLE
10897: EQUAL
10898: IFTRUE 10902
10900: GO 10924
10902: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10903: LD_VAR 0 1
10907: PPUSH
10908: LD_VAR 0 6
10912: PPUSH
10913: LD_VAR 0 7
10917: PPUSH
10918: CALL_OW 154
10922: GO 10925
10924: POP
// end ;
10925: LD_VAR 0 2
10929: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10930: LD_INT 0
10932: PPUSH
10933: PPUSH
10934: PPUSH
10935: PPUSH
10936: PPUSH
10937: PPUSH
// if not unit or not building then
10938: LD_VAR 0 1
10942: NOT
10943: PUSH
10944: LD_VAR 0 2
10948: NOT
10949: OR
10950: IFFALSE 10954
// exit ;
10952: GO 11112
// x := GetX ( building ) ;
10954: LD_ADDR_VAR 0 5
10958: PUSH
10959: LD_VAR 0 2
10963: PPUSH
10964: CALL_OW 250
10968: ST_TO_ADDR
// y := GetY ( building ) ;
10969: LD_ADDR_VAR 0 6
10973: PUSH
10974: LD_VAR 0 2
10978: PPUSH
10979: CALL_OW 251
10983: ST_TO_ADDR
// for i = 0 to 5 do
10984: LD_ADDR_VAR 0 4
10988: PUSH
10989: DOUBLE
10990: LD_INT 0
10992: DEC
10993: ST_TO_ADDR
10994: LD_INT 5
10996: PUSH
10997: FOR_TO
10998: IFFALSE 11110
// begin _x := ShiftX ( x , i , 3 ) ;
11000: LD_ADDR_VAR 0 7
11004: PUSH
11005: LD_VAR 0 5
11009: PPUSH
11010: LD_VAR 0 4
11014: PPUSH
11015: LD_INT 3
11017: PPUSH
11018: CALL_OW 272
11022: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11023: LD_ADDR_VAR 0 8
11027: PUSH
11028: LD_VAR 0 6
11032: PPUSH
11033: LD_VAR 0 4
11037: PPUSH
11038: LD_INT 3
11040: PPUSH
11041: CALL_OW 273
11045: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11046: LD_VAR 0 7
11050: PPUSH
11051: LD_VAR 0 8
11055: PPUSH
11056: CALL_OW 488
11060: NOT
11061: IFFALSE 11065
// continue ;
11063: GO 10997
// if HexInfo ( _x , _y ) = 0 then
11065: LD_VAR 0 7
11069: PPUSH
11070: LD_VAR 0 8
11074: PPUSH
11075: CALL_OW 428
11079: PUSH
11080: LD_INT 0
11082: EQUAL
11083: IFFALSE 11108
// begin ComMoveXY ( unit , _x , _y ) ;
11085: LD_VAR 0 1
11089: PPUSH
11090: LD_VAR 0 7
11094: PPUSH
11095: LD_VAR 0 8
11099: PPUSH
11100: CALL_OW 111
// exit ;
11104: POP
11105: POP
11106: GO 11112
// end ; end ;
11108: GO 10997
11110: POP
11111: POP
// end ;
11112: LD_VAR 0 3
11116: RET
// export function ScanBase ( side , base_area ) ; begin
11117: LD_INT 0
11119: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11120: LD_ADDR_VAR 0 3
11124: PUSH
11125: LD_VAR 0 2
11129: PPUSH
11130: LD_INT 81
11132: PUSH
11133: LD_VAR 0 1
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 70
11146: ST_TO_ADDR
// end ;
11147: LD_VAR 0 3
11151: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11152: LD_INT 0
11154: PPUSH
11155: PPUSH
11156: PPUSH
11157: PPUSH
// result := false ;
11158: LD_ADDR_VAR 0 2
11162: PUSH
11163: LD_INT 0
11165: ST_TO_ADDR
// side := GetSide ( unit ) ;
11166: LD_ADDR_VAR 0 3
11170: PUSH
11171: LD_VAR 0 1
11175: PPUSH
11176: CALL_OW 255
11180: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11181: LD_ADDR_VAR 0 4
11185: PUSH
11186: LD_VAR 0 1
11190: PPUSH
11191: CALL_OW 248
11195: ST_TO_ADDR
// case nat of 1 :
11196: LD_VAR 0 4
11200: PUSH
11201: LD_INT 1
11203: DOUBLE
11204: EQUAL
11205: IFTRUE 11209
11207: GO 11220
11209: POP
// tech := tech_lassight ; 2 :
11210: LD_ADDR_VAR 0 5
11214: PUSH
11215: LD_INT 12
11217: ST_TO_ADDR
11218: GO 11259
11220: LD_INT 2
11222: DOUBLE
11223: EQUAL
11224: IFTRUE 11228
11226: GO 11239
11228: POP
// tech := tech_mortar ; 3 :
11229: LD_ADDR_VAR 0 5
11233: PUSH
11234: LD_INT 41
11236: ST_TO_ADDR
11237: GO 11259
11239: LD_INT 3
11241: DOUBLE
11242: EQUAL
11243: IFTRUE 11247
11245: GO 11258
11247: POP
// tech := tech_bazooka ; end ;
11248: LD_ADDR_VAR 0 5
11252: PUSH
11253: LD_INT 44
11255: ST_TO_ADDR
11256: GO 11259
11258: POP
// if Researched ( side , tech ) then
11259: LD_VAR 0 3
11263: PPUSH
11264: LD_VAR 0 5
11268: PPUSH
11269: CALL_OW 325
11273: IFFALSE 11300
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11275: LD_ADDR_VAR 0 2
11279: PUSH
11280: LD_INT 5
11282: PUSH
11283: LD_INT 8
11285: PUSH
11286: LD_INT 9
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: LD_VAR 0 4
11298: ARRAY
11299: ST_TO_ADDR
// end ;
11300: LD_VAR 0 2
11304: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11305: LD_INT 0
11307: PPUSH
11308: PPUSH
11309: PPUSH
// if not mines then
11310: LD_VAR 0 2
11314: NOT
11315: IFFALSE 11319
// exit ;
11317: GO 11463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11319: LD_ADDR_VAR 0 5
11323: PUSH
11324: LD_INT 81
11326: PUSH
11327: LD_VAR 0 1
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: LD_INT 21
11341: PUSH
11342: LD_INT 3
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PPUSH
11357: CALL_OW 69
11361: ST_TO_ADDR
// for i in mines do
11362: LD_ADDR_VAR 0 4
11366: PUSH
11367: LD_VAR 0 2
11371: PUSH
11372: FOR_IN
11373: IFFALSE 11461
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11375: LD_VAR 0 4
11379: PUSH
11380: LD_INT 1
11382: ARRAY
11383: PPUSH
11384: LD_VAR 0 4
11388: PUSH
11389: LD_INT 2
11391: ARRAY
11392: PPUSH
11393: CALL_OW 458
11397: NOT
11398: IFFALSE 11402
// continue ;
11400: GO 11372
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11402: LD_VAR 0 4
11406: PUSH
11407: LD_INT 1
11409: ARRAY
11410: PPUSH
11411: LD_VAR 0 4
11415: PUSH
11416: LD_INT 2
11418: ARRAY
11419: PPUSH
11420: CALL_OW 428
11424: PUSH
11425: LD_VAR 0 5
11429: IN
11430: IFFALSE 11459
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11432: LD_VAR 0 4
11436: PUSH
11437: LD_INT 1
11439: ARRAY
11440: PPUSH
11441: LD_VAR 0 4
11445: PUSH
11446: LD_INT 2
11448: ARRAY
11449: PPUSH
11450: LD_VAR 0 1
11454: PPUSH
11455: CALL_OW 456
// end ;
11459: GO 11372
11461: POP
11462: POP
// end ;
11463: LD_VAR 0 3
11467: RET
// export function Count ( array ) ; begin
11468: LD_INT 0
11470: PPUSH
// result := array + 0 ;
11471: LD_ADDR_VAR 0 2
11475: PUSH
11476: LD_VAR 0 1
11480: PUSH
11481: LD_INT 0
11483: PLUS
11484: ST_TO_ADDR
// end ;
11485: LD_VAR 0 2
11489: RET
// export function IsEmpty ( building ) ; begin
11490: LD_INT 0
11492: PPUSH
// if not building then
11493: LD_VAR 0 1
11497: NOT
11498: IFFALSE 11502
// exit ;
11500: GO 11545
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11502: LD_ADDR_VAR 0 2
11506: PUSH
11507: LD_VAR 0 1
11511: PUSH
11512: LD_INT 22
11514: PUSH
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL_OW 255
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 58
11531: PUSH
11532: EMPTY
11533: LIST
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PPUSH
11539: CALL_OW 69
11543: IN
11544: ST_TO_ADDR
// end ;
11545: LD_VAR 0 2
11549: RET
// export function IsNotFull ( building ) ; var places ; begin
11550: LD_INT 0
11552: PPUSH
11553: PPUSH
// if not building then
11554: LD_VAR 0 1
11558: NOT
11559: IFFALSE 11563
// exit ;
11561: GO 11591
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11563: LD_ADDR_VAR 0 2
11567: PUSH
11568: LD_VAR 0 1
11572: PPUSH
11573: LD_INT 3
11575: PUSH
11576: LD_INT 62
11578: PUSH
11579: EMPTY
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 72
11590: ST_TO_ADDR
// end ;
11591: LD_VAR 0 2
11595: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11596: LD_INT 0
11598: PPUSH
11599: PPUSH
11600: PPUSH
11601: PPUSH
// tmp := [ ] ;
11602: LD_ADDR_VAR 0 3
11606: PUSH
11607: EMPTY
11608: ST_TO_ADDR
// list := [ ] ;
11609: LD_ADDR_VAR 0 5
11613: PUSH
11614: EMPTY
11615: ST_TO_ADDR
// for i = 16 to 25 do
11616: LD_ADDR_VAR 0 4
11620: PUSH
11621: DOUBLE
11622: LD_INT 16
11624: DEC
11625: ST_TO_ADDR
11626: LD_INT 25
11628: PUSH
11629: FOR_TO
11630: IFFALSE 11703
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11632: LD_ADDR_VAR 0 3
11636: PUSH
11637: LD_VAR 0 3
11641: PUSH
11642: LD_INT 22
11644: PUSH
11645: LD_VAR 0 1
11649: PPUSH
11650: CALL_OW 255
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 91
11661: PUSH
11662: LD_VAR 0 1
11666: PUSH
11667: LD_INT 6
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 30
11677: PUSH
11678: LD_VAR 0 4
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: PPUSH
11695: CALL_OW 69
11699: ADD
11700: ST_TO_ADDR
11701: GO 11629
11703: POP
11704: POP
// for i = 1 to tmp do
11705: LD_ADDR_VAR 0 4
11709: PUSH
11710: DOUBLE
11711: LD_INT 1
11713: DEC
11714: ST_TO_ADDR
11715: LD_VAR 0 3
11719: PUSH
11720: FOR_TO
11721: IFFALSE 11809
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11723: LD_ADDR_VAR 0 5
11727: PUSH
11728: LD_VAR 0 5
11732: PUSH
11733: LD_VAR 0 3
11737: PUSH
11738: LD_VAR 0 4
11742: ARRAY
11743: PPUSH
11744: CALL_OW 266
11748: PUSH
11749: LD_VAR 0 3
11753: PUSH
11754: LD_VAR 0 4
11758: ARRAY
11759: PPUSH
11760: CALL_OW 250
11764: PUSH
11765: LD_VAR 0 3
11769: PUSH
11770: LD_VAR 0 4
11774: ARRAY
11775: PPUSH
11776: CALL_OW 251
11780: PUSH
11781: LD_VAR 0 3
11785: PUSH
11786: LD_VAR 0 4
11790: ARRAY
11791: PPUSH
11792: CALL_OW 254
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: PUSH
11803: EMPTY
11804: LIST
11805: ADD
11806: ST_TO_ADDR
11807: GO 11720
11809: POP
11810: POP
// result := list ;
11811: LD_ADDR_VAR 0 2
11815: PUSH
11816: LD_VAR 0 5
11820: ST_TO_ADDR
// end ;
11821: LD_VAR 0 2
11825: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
11831: PPUSH
11832: PPUSH
11833: PPUSH
11834: PPUSH
// if not factory then
11835: LD_VAR 0 1
11839: NOT
11840: IFFALSE 11844
// exit ;
11842: GO 12437
// if control = control_apeman then
11844: LD_VAR 0 4
11848: PUSH
11849: LD_INT 5
11851: EQUAL
11852: IFFALSE 11961
// begin tmp := UnitsInside ( factory ) ;
11854: LD_ADDR_VAR 0 8
11858: PUSH
11859: LD_VAR 0 1
11863: PPUSH
11864: CALL_OW 313
11868: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11869: LD_VAR 0 8
11873: PPUSH
11874: LD_INT 25
11876: PUSH
11877: LD_INT 12
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PPUSH
11884: CALL_OW 72
11888: NOT
11889: IFFALSE 11899
// control := control_manual ;
11891: LD_ADDR_VAR 0 4
11895: PUSH
11896: LD_INT 1
11898: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11899: LD_ADDR_VAR 0 8
11903: PUSH
11904: LD_VAR 0 1
11908: PPUSH
11909: CALL 11596 0 1
11913: ST_TO_ADDR
// if tmp then
11914: LD_VAR 0 8
11918: IFFALSE 11961
// begin for i in tmp do
11920: LD_ADDR_VAR 0 7
11924: PUSH
11925: LD_VAR 0 8
11929: PUSH
11930: FOR_IN
11931: IFFALSE 11959
// if i [ 1 ] = b_ext_radio then
11933: LD_VAR 0 7
11937: PUSH
11938: LD_INT 1
11940: ARRAY
11941: PUSH
11942: LD_INT 22
11944: EQUAL
11945: IFFALSE 11957
// begin control := control_remote ;
11947: LD_ADDR_VAR 0 4
11951: PUSH
11952: LD_INT 2
11954: ST_TO_ADDR
// break ;
11955: GO 11959
// end ;
11957: GO 11930
11959: POP
11960: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11961: LD_VAR 0 1
11965: PPUSH
11966: LD_VAR 0 2
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 4
11980: PPUSH
11981: LD_VAR 0 5
11985: PPUSH
11986: CALL_OW 448
11990: IFFALSE 12025
// begin result := [ chassis , engine , control , weapon ] ;
11992: LD_ADDR_VAR 0 6
11996: PUSH
11997: LD_VAR 0 2
12001: PUSH
12002: LD_VAR 0 3
12006: PUSH
12007: LD_VAR 0 4
12011: PUSH
12012: LD_VAR 0 5
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: ST_TO_ADDR
// exit ;
12023: GO 12437
// end ; _chassis := AvailableChassisList ( factory ) ;
12025: LD_ADDR_VAR 0 9
12029: PUSH
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 475
12039: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12040: LD_ADDR_VAR 0 11
12044: PUSH
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 476
12054: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12055: LD_ADDR_VAR 0 12
12059: PUSH
12060: LD_VAR 0 1
12064: PPUSH
12065: CALL_OW 477
12069: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12070: LD_ADDR_VAR 0 10
12074: PUSH
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 478
12084: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12085: LD_VAR 0 9
12089: NOT
12090: PUSH
12091: LD_VAR 0 11
12095: NOT
12096: OR
12097: PUSH
12098: LD_VAR 0 12
12102: NOT
12103: OR
12104: PUSH
12105: LD_VAR 0 10
12109: NOT
12110: OR
12111: IFFALSE 12146
// begin result := [ chassis , engine , control , weapon ] ;
12113: LD_ADDR_VAR 0 6
12117: PUSH
12118: LD_VAR 0 2
12122: PUSH
12123: LD_VAR 0 3
12127: PUSH
12128: LD_VAR 0 4
12132: PUSH
12133: LD_VAR 0 5
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: ST_TO_ADDR
// exit ;
12144: GO 12437
// end ; if not chassis in _chassis then
12146: LD_VAR 0 2
12150: PUSH
12151: LD_VAR 0 9
12155: IN
12156: NOT
12157: IFFALSE 12183
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12159: LD_ADDR_VAR 0 2
12163: PUSH
12164: LD_VAR 0 9
12168: PUSH
12169: LD_INT 1
12171: PPUSH
12172: LD_VAR 0 9
12176: PPUSH
12177: CALL_OW 12
12181: ARRAY
12182: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_VAR 0 3
12192: PPUSH
12193: CALL 12442 0 2
12197: NOT
12198: IFFALSE 12257
// repeat engine := _engine [ 1 ] ;
12200: LD_ADDR_VAR 0 3
12204: PUSH
12205: LD_VAR 0 11
12209: PUSH
12210: LD_INT 1
12212: ARRAY
12213: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12214: LD_ADDR_VAR 0 11
12218: PUSH
12219: LD_VAR 0 11
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 3
12231: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12232: LD_VAR 0 2
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: CALL 12442 0 2
12246: PUSH
12247: LD_VAR 0 11
12251: PUSH
12252: EMPTY
12253: EQUAL
12254: OR
12255: IFFALSE 12200
// if not control in _control then
12257: LD_VAR 0 4
12261: PUSH
12262: LD_VAR 0 12
12266: IN
12267: NOT
12268: IFFALSE 12294
// control := _control [ rand ( 1 , _control ) ] ;
12270: LD_ADDR_VAR 0 4
12274: PUSH
12275: LD_VAR 0 12
12279: PUSH
12280: LD_INT 1
12282: PPUSH
12283: LD_VAR 0 12
12287: PPUSH
12288: CALL_OW 12
12292: ARRAY
12293: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12294: LD_VAR 0 2
12298: PPUSH
12299: LD_VAR 0 5
12303: PPUSH
12304: CALL 12662 0 2
12308: NOT
12309: IFFALSE 12368
// repeat weapon := _weapon [ 1 ] ;
12311: LD_ADDR_VAR 0 5
12315: PUSH
12316: LD_VAR 0 10
12320: PUSH
12321: LD_INT 1
12323: ARRAY
12324: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12325: LD_ADDR_VAR 0 10
12329: PUSH
12330: LD_VAR 0 10
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: CALL_OW 3
12342: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12343: LD_VAR 0 2
12347: PPUSH
12348: LD_VAR 0 5
12352: PPUSH
12353: CALL 12662 0 2
12357: PUSH
12358: LD_VAR 0 10
12362: PUSH
12363: EMPTY
12364: EQUAL
12365: OR
12366: IFFALSE 12311
// result := [ ] ;
12368: LD_ADDR_VAR 0 6
12372: PUSH
12373: EMPTY
12374: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12375: LD_VAR 0 1
12379: PPUSH
12380: LD_VAR 0 2
12384: PPUSH
12385: LD_VAR 0 3
12389: PPUSH
12390: LD_VAR 0 4
12394: PPUSH
12395: LD_VAR 0 5
12399: PPUSH
12400: CALL_OW 448
12404: IFFALSE 12437
// result := [ chassis , engine , control , weapon ] ;
12406: LD_ADDR_VAR 0 6
12410: PUSH
12411: LD_VAR 0 2
12415: PUSH
12416: LD_VAR 0 3
12420: PUSH
12421: LD_VAR 0 4
12425: PUSH
12426: LD_VAR 0 5
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: ST_TO_ADDR
// end ;
12437: LD_VAR 0 6
12441: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12442: LD_INT 0
12444: PPUSH
// if not chassis or not engine then
12445: LD_VAR 0 1
12449: NOT
12450: PUSH
12451: LD_VAR 0 2
12455: NOT
12456: OR
12457: IFFALSE 12461
// exit ;
12459: GO 12657
// case engine of engine_solar :
12461: LD_VAR 0 2
12465: PUSH
12466: LD_INT 2
12468: DOUBLE
12469: EQUAL
12470: IFTRUE 12474
12472: GO 12512
12474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12475: LD_ADDR_VAR 0 3
12479: PUSH
12480: LD_INT 11
12482: PUSH
12483: LD_INT 12
12485: PUSH
12486: LD_INT 13
12488: PUSH
12489: LD_INT 14
12491: PUSH
12492: LD_INT 1
12494: PUSH
12495: LD_INT 2
12497: PUSH
12498: LD_INT 3
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: ST_TO_ADDR
12510: GO 12641
12512: LD_INT 1
12514: DOUBLE
12515: EQUAL
12516: IFTRUE 12520
12518: GO 12582
12520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12521: LD_ADDR_VAR 0 3
12525: PUSH
12526: LD_INT 11
12528: PUSH
12529: LD_INT 12
12531: PUSH
12532: LD_INT 13
12534: PUSH
12535: LD_INT 14
12537: PUSH
12538: LD_INT 1
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 3
12546: PUSH
12547: LD_INT 4
12549: PUSH
12550: LD_INT 5
12552: PUSH
12553: LD_INT 21
12555: PUSH
12556: LD_INT 23
12558: PUSH
12559: LD_INT 22
12561: PUSH
12562: LD_INT 24
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: ST_TO_ADDR
12580: GO 12641
12582: LD_INT 3
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 12640
12590: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12591: LD_ADDR_VAR 0 3
12595: PUSH
12596: LD_INT 13
12598: PUSH
12599: LD_INT 14
12601: PUSH
12602: LD_INT 2
12604: PUSH
12605: LD_INT 3
12607: PUSH
12608: LD_INT 4
12610: PUSH
12611: LD_INT 5
12613: PUSH
12614: LD_INT 21
12616: PUSH
12617: LD_INT 22
12619: PUSH
12620: LD_INT 23
12622: PUSH
12623: LD_INT 24
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: ST_TO_ADDR
12638: GO 12641
12640: POP
// result := ( chassis in result ) ;
12641: LD_ADDR_VAR 0 3
12645: PUSH
12646: LD_VAR 0 1
12650: PUSH
12651: LD_VAR 0 3
12655: IN
12656: ST_TO_ADDR
// end ;
12657: LD_VAR 0 3
12661: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12662: LD_INT 0
12664: PPUSH
// if not chassis or not weapon then
12665: LD_VAR 0 1
12669: NOT
12670: PUSH
12671: LD_VAR 0 2
12675: NOT
12676: OR
12677: IFFALSE 12681
// exit ;
12679: GO 13741
// case weapon of us_machine_gun :
12681: LD_VAR 0 2
12685: PUSH
12686: LD_INT 2
12688: DOUBLE
12689: EQUAL
12690: IFTRUE 12694
12692: GO 12724
12694: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12695: LD_ADDR_VAR 0 3
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: LD_INT 2
12705: PUSH
12706: LD_INT 3
12708: PUSH
12709: LD_INT 4
12711: PUSH
12712: LD_INT 5
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: ST_TO_ADDR
12722: GO 13725
12724: LD_INT 3
12726: DOUBLE
12727: EQUAL
12728: IFTRUE 12732
12730: GO 12762
12732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12733: LD_ADDR_VAR 0 3
12737: PUSH
12738: LD_INT 1
12740: PUSH
12741: LD_INT 2
12743: PUSH
12744: LD_INT 3
12746: PUSH
12747: LD_INT 4
12749: PUSH
12750: LD_INT 5
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: ST_TO_ADDR
12760: GO 13725
12762: LD_INT 11
12764: DOUBLE
12765: EQUAL
12766: IFTRUE 12770
12768: GO 12800
12770: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12771: LD_ADDR_VAR 0 3
12775: PUSH
12776: LD_INT 1
12778: PUSH
12779: LD_INT 2
12781: PUSH
12782: LD_INT 3
12784: PUSH
12785: LD_INT 4
12787: PUSH
12788: LD_INT 5
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: ST_TO_ADDR
12798: GO 13725
12800: LD_INT 4
12802: DOUBLE
12803: EQUAL
12804: IFTRUE 12808
12806: GO 12834
12808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12809: LD_ADDR_VAR 0 3
12813: PUSH
12814: LD_INT 2
12816: PUSH
12817: LD_INT 3
12819: PUSH
12820: LD_INT 4
12822: PUSH
12823: LD_INT 5
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: ST_TO_ADDR
12832: GO 13725
12834: LD_INT 5
12836: DOUBLE
12837: EQUAL
12838: IFTRUE 12842
12840: GO 12868
12842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12843: LD_ADDR_VAR 0 3
12847: PUSH
12848: LD_INT 2
12850: PUSH
12851: LD_INT 3
12853: PUSH
12854: LD_INT 4
12856: PUSH
12857: LD_INT 5
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: ST_TO_ADDR
12866: GO 13725
12868: LD_INT 9
12870: DOUBLE
12871: EQUAL
12872: IFTRUE 12876
12874: GO 12902
12876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12877: LD_ADDR_VAR 0 3
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: LD_INT 3
12887: PUSH
12888: LD_INT 4
12890: PUSH
12891: LD_INT 5
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: ST_TO_ADDR
12900: GO 13725
12902: LD_INT 7
12904: DOUBLE
12905: EQUAL
12906: IFTRUE 12910
12908: GO 12936
12910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12911: LD_ADDR_VAR 0 3
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: LD_INT 3
12921: PUSH
12922: LD_INT 4
12924: PUSH
12925: LD_INT 5
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: ST_TO_ADDR
12934: GO 13725
12936: LD_INT 12
12938: DOUBLE
12939: EQUAL
12940: IFTRUE 12944
12942: GO 12970
12944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12945: LD_ADDR_VAR 0 3
12949: PUSH
12950: LD_INT 2
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: LD_INT 4
12958: PUSH
12959: LD_INT 5
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: ST_TO_ADDR
12968: GO 13725
12970: LD_INT 13
12972: DOUBLE
12973: EQUAL
12974: IFTRUE 12978
12976: GO 13004
12978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12979: LD_ADDR_VAR 0 3
12983: PUSH
12984: LD_INT 2
12986: PUSH
12987: LD_INT 3
12989: PUSH
12990: LD_INT 4
12992: PUSH
12993: LD_INT 5
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: ST_TO_ADDR
13002: GO 13725
13004: LD_INT 14
13006: DOUBLE
13007: EQUAL
13008: IFTRUE 13012
13010: GO 13030
13012: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13013: LD_ADDR_VAR 0 3
13017: PUSH
13018: LD_INT 4
13020: PUSH
13021: LD_INT 5
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: ST_TO_ADDR
13028: GO 13725
13030: LD_INT 6
13032: DOUBLE
13033: EQUAL
13034: IFTRUE 13038
13036: GO 13056
13038: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13039: LD_ADDR_VAR 0 3
13043: PUSH
13044: LD_INT 4
13046: PUSH
13047: LD_INT 5
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: ST_TO_ADDR
13054: GO 13725
13056: LD_INT 10
13058: DOUBLE
13059: EQUAL
13060: IFTRUE 13064
13062: GO 13082
13064: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13065: LD_ADDR_VAR 0 3
13069: PUSH
13070: LD_INT 4
13072: PUSH
13073: LD_INT 5
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: ST_TO_ADDR
13080: GO 13725
13082: LD_INT 22
13084: DOUBLE
13085: EQUAL
13086: IFTRUE 13090
13088: GO 13116
13090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13091: LD_ADDR_VAR 0 3
13095: PUSH
13096: LD_INT 11
13098: PUSH
13099: LD_INT 12
13101: PUSH
13102: LD_INT 13
13104: PUSH
13105: LD_INT 14
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: ST_TO_ADDR
13114: GO 13725
13116: LD_INT 23
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 13150
13124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13125: LD_ADDR_VAR 0 3
13129: PUSH
13130: LD_INT 11
13132: PUSH
13133: LD_INT 12
13135: PUSH
13136: LD_INT 13
13138: PUSH
13139: LD_INT 14
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: ST_TO_ADDR
13148: GO 13725
13150: LD_INT 24
13152: DOUBLE
13153: EQUAL
13154: IFTRUE 13158
13156: GO 13184
13158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13159: LD_ADDR_VAR 0 3
13163: PUSH
13164: LD_INT 11
13166: PUSH
13167: LD_INT 12
13169: PUSH
13170: LD_INT 13
13172: PUSH
13173: LD_INT 14
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: ST_TO_ADDR
13182: GO 13725
13184: LD_INT 30
13186: DOUBLE
13187: EQUAL
13188: IFTRUE 13192
13190: GO 13218
13192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13193: LD_ADDR_VAR 0 3
13197: PUSH
13198: LD_INT 11
13200: PUSH
13201: LD_INT 12
13203: PUSH
13204: LD_INT 13
13206: PUSH
13207: LD_INT 14
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: ST_TO_ADDR
13216: GO 13725
13218: LD_INT 25
13220: DOUBLE
13221: EQUAL
13222: IFTRUE 13226
13224: GO 13244
13226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13227: LD_ADDR_VAR 0 3
13231: PUSH
13232: LD_INT 13
13234: PUSH
13235: LD_INT 14
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: ST_TO_ADDR
13242: GO 13725
13244: LD_INT 27
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13270
13252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13253: LD_ADDR_VAR 0 3
13257: PUSH
13258: LD_INT 13
13260: PUSH
13261: LD_INT 14
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: ST_TO_ADDR
13268: GO 13725
13270: LD_INT 92
13272: DOUBLE
13273: EQUAL
13274: IFTRUE 13278
13276: GO 13304
13278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13279: LD_ADDR_VAR 0 3
13283: PUSH
13284: LD_INT 11
13286: PUSH
13287: LD_INT 12
13289: PUSH
13290: LD_INT 13
13292: PUSH
13293: LD_INT 14
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: ST_TO_ADDR
13302: GO 13725
13304: LD_INT 28
13306: DOUBLE
13307: EQUAL
13308: IFTRUE 13312
13310: GO 13330
13312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13313: LD_ADDR_VAR 0 3
13317: PUSH
13318: LD_INT 13
13320: PUSH
13321: LD_INT 14
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: ST_TO_ADDR
13328: GO 13725
13330: LD_INT 29
13332: DOUBLE
13333: EQUAL
13334: IFTRUE 13338
13336: GO 13356
13338: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13339: LD_ADDR_VAR 0 3
13343: PUSH
13344: LD_INT 13
13346: PUSH
13347: LD_INT 14
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: ST_TO_ADDR
13354: GO 13725
13356: LD_INT 31
13358: DOUBLE
13359: EQUAL
13360: IFTRUE 13364
13362: GO 13382
13364: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13365: LD_ADDR_VAR 0 3
13369: PUSH
13370: LD_INT 13
13372: PUSH
13373: LD_INT 14
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: ST_TO_ADDR
13380: GO 13725
13382: LD_INT 26
13384: DOUBLE
13385: EQUAL
13386: IFTRUE 13390
13388: GO 13408
13390: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13391: LD_ADDR_VAR 0 3
13395: PUSH
13396: LD_INT 13
13398: PUSH
13399: LD_INT 14
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: ST_TO_ADDR
13406: GO 13725
13408: LD_INT 42
13410: DOUBLE
13411: EQUAL
13412: IFTRUE 13416
13414: GO 13442
13416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13417: LD_ADDR_VAR 0 3
13421: PUSH
13422: LD_INT 21
13424: PUSH
13425: LD_INT 22
13427: PUSH
13428: LD_INT 23
13430: PUSH
13431: LD_INT 24
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: ST_TO_ADDR
13440: GO 13725
13442: LD_INT 43
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13476
13450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13451: LD_ADDR_VAR 0 3
13455: PUSH
13456: LD_INT 21
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_INT 23
13464: PUSH
13465: LD_INT 24
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: ST_TO_ADDR
13474: GO 13725
13476: LD_INT 44
13478: DOUBLE
13479: EQUAL
13480: IFTRUE 13484
13482: GO 13510
13484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13485: LD_ADDR_VAR 0 3
13489: PUSH
13490: LD_INT 21
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_INT 23
13498: PUSH
13499: LD_INT 24
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: ST_TO_ADDR
13508: GO 13725
13510: LD_INT 45
13512: DOUBLE
13513: EQUAL
13514: IFTRUE 13518
13516: GO 13544
13518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13519: LD_ADDR_VAR 0 3
13523: PUSH
13524: LD_INT 21
13526: PUSH
13527: LD_INT 22
13529: PUSH
13530: LD_INT 23
13532: PUSH
13533: LD_INT 24
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: ST_TO_ADDR
13542: GO 13725
13544: LD_INT 49
13546: DOUBLE
13547: EQUAL
13548: IFTRUE 13552
13550: GO 13578
13552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13553: LD_ADDR_VAR 0 3
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: LD_INT 23
13566: PUSH
13567: LD_INT 24
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: ST_TO_ADDR
13576: GO 13725
13578: LD_INT 51
13580: DOUBLE
13581: EQUAL
13582: IFTRUE 13586
13584: GO 13612
13586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13587: LD_ADDR_VAR 0 3
13591: PUSH
13592: LD_INT 21
13594: PUSH
13595: LD_INT 22
13597: PUSH
13598: LD_INT 23
13600: PUSH
13601: LD_INT 24
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: ST_TO_ADDR
13610: GO 13725
13612: LD_INT 52
13614: DOUBLE
13615: EQUAL
13616: IFTRUE 13620
13618: GO 13646
13620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13621: LD_ADDR_VAR 0 3
13625: PUSH
13626: LD_INT 21
13628: PUSH
13629: LD_INT 22
13631: PUSH
13632: LD_INT 23
13634: PUSH
13635: LD_INT 24
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: ST_TO_ADDR
13644: GO 13725
13646: LD_INT 53
13648: DOUBLE
13649: EQUAL
13650: IFTRUE 13654
13652: GO 13672
13654: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13655: LD_ADDR_VAR 0 3
13659: PUSH
13660: LD_INT 23
13662: PUSH
13663: LD_INT 24
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: ST_TO_ADDR
13670: GO 13725
13672: LD_INT 46
13674: DOUBLE
13675: EQUAL
13676: IFTRUE 13680
13678: GO 13698
13680: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13681: LD_ADDR_VAR 0 3
13685: PUSH
13686: LD_INT 23
13688: PUSH
13689: LD_INT 24
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 13725
13698: LD_INT 47
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13724
13706: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_INT 23
13714: PUSH
13715: LD_INT 24
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: ST_TO_ADDR
13722: GO 13725
13724: POP
// result := ( chassis in result ) ;
13725: LD_ADDR_VAR 0 3
13729: PUSH
13730: LD_VAR 0 1
13734: PUSH
13735: LD_VAR 0 3
13739: IN
13740: ST_TO_ADDR
// end ;
13741: LD_VAR 0 3
13745: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13746: LD_INT 0
13748: PPUSH
13749: PPUSH
13750: PPUSH
13751: PPUSH
13752: PPUSH
13753: PPUSH
13754: PPUSH
// result := array ;
13755: LD_ADDR_VAR 0 5
13759: PUSH
13760: LD_VAR 0 1
13764: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13765: LD_VAR 0 1
13769: NOT
13770: PUSH
13771: LD_VAR 0 2
13775: NOT
13776: OR
13777: PUSH
13778: LD_VAR 0 3
13782: NOT
13783: OR
13784: PUSH
13785: LD_VAR 0 2
13789: PUSH
13790: LD_VAR 0 1
13794: GREATER
13795: OR
13796: PUSH
13797: LD_VAR 0 3
13801: PUSH
13802: LD_VAR 0 1
13806: GREATER
13807: OR
13808: IFFALSE 13812
// exit ;
13810: GO 14108
// if direction then
13812: LD_VAR 0 4
13816: IFFALSE 13880
// begin d := 1 ;
13818: LD_ADDR_VAR 0 9
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// if i_from > i_to then
13826: LD_VAR 0 2
13830: PUSH
13831: LD_VAR 0 3
13835: GREATER
13836: IFFALSE 13862
// length := ( array - i_from ) + i_to else
13838: LD_ADDR_VAR 0 11
13842: PUSH
13843: LD_VAR 0 1
13847: PUSH
13848: LD_VAR 0 2
13852: MINUS
13853: PUSH
13854: LD_VAR 0 3
13858: PLUS
13859: ST_TO_ADDR
13860: GO 13878
// length := i_to - i_from ;
13862: LD_ADDR_VAR 0 11
13866: PUSH
13867: LD_VAR 0 3
13871: PUSH
13872: LD_VAR 0 2
13876: MINUS
13877: ST_TO_ADDR
// end else
13878: GO 13941
// begin d := - 1 ;
13880: LD_ADDR_VAR 0 9
13884: PUSH
13885: LD_INT 1
13887: NEG
13888: ST_TO_ADDR
// if i_from > i_to then
13889: LD_VAR 0 2
13893: PUSH
13894: LD_VAR 0 3
13898: GREATER
13899: IFFALSE 13919
// length := i_from - i_to else
13901: LD_ADDR_VAR 0 11
13905: PUSH
13906: LD_VAR 0 2
13910: PUSH
13911: LD_VAR 0 3
13915: MINUS
13916: ST_TO_ADDR
13917: GO 13941
// length := ( array - i_to ) + i_from ;
13919: LD_ADDR_VAR 0 11
13923: PUSH
13924: LD_VAR 0 1
13928: PUSH
13929: LD_VAR 0 3
13933: MINUS
13934: PUSH
13935: LD_VAR 0 2
13939: PLUS
13940: ST_TO_ADDR
// end ; if not length then
13941: LD_VAR 0 11
13945: NOT
13946: IFFALSE 13950
// exit ;
13948: GO 14108
// tmp := array ;
13950: LD_ADDR_VAR 0 10
13954: PUSH
13955: LD_VAR 0 1
13959: ST_TO_ADDR
// for i = 1 to length do
13960: LD_ADDR_VAR 0 6
13964: PUSH
13965: DOUBLE
13966: LD_INT 1
13968: DEC
13969: ST_TO_ADDR
13970: LD_VAR 0 11
13974: PUSH
13975: FOR_TO
13976: IFFALSE 14096
// begin for j = 1 to array do
13978: LD_ADDR_VAR 0 7
13982: PUSH
13983: DOUBLE
13984: LD_INT 1
13986: DEC
13987: ST_TO_ADDR
13988: LD_VAR 0 1
13992: PUSH
13993: FOR_TO
13994: IFFALSE 14082
// begin k := j + d ;
13996: LD_ADDR_VAR 0 8
14000: PUSH
14001: LD_VAR 0 7
14005: PUSH
14006: LD_VAR 0 9
14010: PLUS
14011: ST_TO_ADDR
// if k > array then
14012: LD_VAR 0 8
14016: PUSH
14017: LD_VAR 0 1
14021: GREATER
14022: IFFALSE 14032
// k := 1 ;
14024: LD_ADDR_VAR 0 8
14028: PUSH
14029: LD_INT 1
14031: ST_TO_ADDR
// if not k then
14032: LD_VAR 0 8
14036: NOT
14037: IFFALSE 14049
// k := array ;
14039: LD_ADDR_VAR 0 8
14043: PUSH
14044: LD_VAR 0 1
14048: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14049: LD_ADDR_VAR 0 10
14053: PUSH
14054: LD_VAR 0 10
14058: PPUSH
14059: LD_VAR 0 8
14063: PPUSH
14064: LD_VAR 0 1
14068: PUSH
14069: LD_VAR 0 7
14073: ARRAY
14074: PPUSH
14075: CALL_OW 1
14079: ST_TO_ADDR
// end ;
14080: GO 13993
14082: POP
14083: POP
// array := tmp ;
14084: LD_ADDR_VAR 0 1
14088: PUSH
14089: LD_VAR 0 10
14093: ST_TO_ADDR
// end ;
14094: GO 13975
14096: POP
14097: POP
// result := array ;
14098: LD_ADDR_VAR 0 5
14102: PUSH
14103: LD_VAR 0 1
14107: ST_TO_ADDR
// end ;
14108: LD_VAR 0 5
14112: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14113: LD_INT 0
14115: PPUSH
14116: PPUSH
// result := 0 ;
14117: LD_ADDR_VAR 0 3
14121: PUSH
14122: LD_INT 0
14124: ST_TO_ADDR
// if not array or not value in array then
14125: LD_VAR 0 1
14129: NOT
14130: PUSH
14131: LD_VAR 0 2
14135: PUSH
14136: LD_VAR 0 1
14140: IN
14141: NOT
14142: OR
14143: IFFALSE 14147
// exit ;
14145: GO 14201
// for i = 1 to array do
14147: LD_ADDR_VAR 0 4
14151: PUSH
14152: DOUBLE
14153: LD_INT 1
14155: DEC
14156: ST_TO_ADDR
14157: LD_VAR 0 1
14161: PUSH
14162: FOR_TO
14163: IFFALSE 14199
// if value = array [ i ] then
14165: LD_VAR 0 2
14169: PUSH
14170: LD_VAR 0 1
14174: PUSH
14175: LD_VAR 0 4
14179: ARRAY
14180: EQUAL
14181: IFFALSE 14197
// begin result := i ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: LD_VAR 0 4
14192: ST_TO_ADDR
// exit ;
14193: POP
14194: POP
14195: GO 14201
// end ;
14197: GO 14162
14199: POP
14200: POP
// end ;
14201: LD_VAR 0 3
14205: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14206: LD_INT 0
14208: PPUSH
// vc_chassis := chassis ;
14209: LD_ADDR_OWVAR 37
14213: PUSH
14214: LD_VAR 0 1
14218: ST_TO_ADDR
// vc_engine := engine ;
14219: LD_ADDR_OWVAR 39
14223: PUSH
14224: LD_VAR 0 2
14228: ST_TO_ADDR
// vc_control := control ;
14229: LD_ADDR_OWVAR 38
14233: PUSH
14234: LD_VAR 0 3
14238: ST_TO_ADDR
// vc_weapon := weapon ;
14239: LD_ADDR_OWVAR 40
14243: PUSH
14244: LD_VAR 0 4
14248: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14249: LD_ADDR_OWVAR 41
14253: PUSH
14254: LD_VAR 0 5
14258: ST_TO_ADDR
// end ;
14259: LD_VAR 0 6
14263: RET
// export function WantPlant ( unit ) ; var task ; begin
14264: LD_INT 0
14266: PPUSH
14267: PPUSH
// result := false ;
14268: LD_ADDR_VAR 0 2
14272: PUSH
14273: LD_INT 0
14275: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14276: LD_ADDR_VAR 0 3
14280: PUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 437
14290: ST_TO_ADDR
// if task then
14291: LD_VAR 0 3
14295: IFFALSE 14323
// if task [ 1 ] [ 1 ] = p then
14297: LD_VAR 0 3
14301: PUSH
14302: LD_INT 1
14304: ARRAY
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PUSH
14310: LD_STRING p
14312: EQUAL
14313: IFFALSE 14323
// result := true ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_INT 1
14322: ST_TO_ADDR
// end ;
14323: LD_VAR 0 2
14327: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14328: LD_INT 0
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
// if pos < 1 then
14334: LD_VAR 0 2
14338: PUSH
14339: LD_INT 1
14341: LESS
14342: IFFALSE 14346
// exit ;
14344: GO 14649
// if pos = 1 then
14346: LD_VAR 0 2
14350: PUSH
14351: LD_INT 1
14353: EQUAL
14354: IFFALSE 14387
// result := Replace ( arr , pos [ 1 ] , value ) else
14356: LD_ADDR_VAR 0 4
14360: PUSH
14361: LD_VAR 0 1
14365: PPUSH
14366: LD_VAR 0 2
14370: PUSH
14371: LD_INT 1
14373: ARRAY
14374: PPUSH
14375: LD_VAR 0 3
14379: PPUSH
14380: CALL_OW 1
14384: ST_TO_ADDR
14385: GO 14649
// begin tmp := arr ;
14387: LD_ADDR_VAR 0 6
14391: PUSH
14392: LD_VAR 0 1
14396: ST_TO_ADDR
// s_arr := [ tmp ] ;
14397: LD_ADDR_VAR 0 7
14401: PUSH
14402: LD_VAR 0 6
14406: PUSH
14407: EMPTY
14408: LIST
14409: ST_TO_ADDR
// for i = 1 to pos - 1 do
14410: LD_ADDR_VAR 0 5
14414: PUSH
14415: DOUBLE
14416: LD_INT 1
14418: DEC
14419: ST_TO_ADDR
14420: LD_VAR 0 2
14424: PUSH
14425: LD_INT 1
14427: MINUS
14428: PUSH
14429: FOR_TO
14430: IFFALSE 14475
// begin tmp := tmp [ pos [ i ] ] ;
14432: LD_ADDR_VAR 0 6
14436: PUSH
14437: LD_VAR 0 6
14441: PUSH
14442: LD_VAR 0 2
14446: PUSH
14447: LD_VAR 0 5
14451: ARRAY
14452: ARRAY
14453: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14454: LD_ADDR_VAR 0 7
14458: PUSH
14459: LD_VAR 0 7
14463: PUSH
14464: LD_VAR 0 6
14468: PUSH
14469: EMPTY
14470: LIST
14471: ADD
14472: ST_TO_ADDR
// end ;
14473: GO 14429
14475: POP
14476: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14477: LD_ADDR_VAR 0 6
14481: PUSH
14482: LD_VAR 0 6
14486: PPUSH
14487: LD_VAR 0 2
14491: PUSH
14492: LD_VAR 0 2
14496: ARRAY
14497: PPUSH
14498: LD_VAR 0 3
14502: PPUSH
14503: CALL_OW 1
14507: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14508: LD_ADDR_VAR 0 7
14512: PUSH
14513: LD_VAR 0 7
14517: PPUSH
14518: LD_VAR 0 7
14522: PPUSH
14523: LD_VAR 0 6
14527: PPUSH
14528: CALL_OW 1
14532: ST_TO_ADDR
// for i = s_arr downto 2 do
14533: LD_ADDR_VAR 0 5
14537: PUSH
14538: DOUBLE
14539: LD_VAR 0 7
14543: INC
14544: ST_TO_ADDR
14545: LD_INT 2
14547: PUSH
14548: FOR_DOWNTO
14549: IFFALSE 14633
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14551: LD_ADDR_VAR 0 6
14555: PUSH
14556: LD_VAR 0 7
14560: PUSH
14561: LD_VAR 0 5
14565: PUSH
14566: LD_INT 1
14568: MINUS
14569: ARRAY
14570: PPUSH
14571: LD_VAR 0 2
14575: PUSH
14576: LD_VAR 0 5
14580: PUSH
14581: LD_INT 1
14583: MINUS
14584: ARRAY
14585: PPUSH
14586: LD_VAR 0 7
14590: PUSH
14591: LD_VAR 0 5
14595: ARRAY
14596: PPUSH
14597: CALL_OW 1
14601: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14602: LD_ADDR_VAR 0 7
14606: PUSH
14607: LD_VAR 0 7
14611: PPUSH
14612: LD_VAR 0 5
14616: PUSH
14617: LD_INT 1
14619: MINUS
14620: PPUSH
14621: LD_VAR 0 6
14625: PPUSH
14626: CALL_OW 1
14630: ST_TO_ADDR
// end ;
14631: GO 14548
14633: POP
14634: POP
// result := s_arr [ 1 ] ;
14635: LD_ADDR_VAR 0 4
14639: PUSH
14640: LD_VAR 0 7
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: ST_TO_ADDR
// end ; end ;
14649: LD_VAR 0 4
14653: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14654: LD_INT 0
14656: PPUSH
14657: PPUSH
// if not list then
14658: LD_VAR 0 1
14662: NOT
14663: IFFALSE 14667
// exit ;
14665: GO 14758
// i := list [ pos1 ] ;
14667: LD_ADDR_VAR 0 5
14671: PUSH
14672: LD_VAR 0 1
14676: PUSH
14677: LD_VAR 0 2
14681: ARRAY
14682: ST_TO_ADDR
// if not i then
14683: LD_VAR 0 5
14687: NOT
14688: IFFALSE 14692
// exit ;
14690: GO 14758
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14692: LD_ADDR_VAR 0 1
14696: PUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_VAR 0 2
14706: PPUSH
14707: LD_VAR 0 1
14711: PUSH
14712: LD_VAR 0 3
14716: ARRAY
14717: PPUSH
14718: CALL_OW 1
14722: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14723: LD_ADDR_VAR 0 1
14727: PUSH
14728: LD_VAR 0 1
14732: PPUSH
14733: LD_VAR 0 3
14737: PPUSH
14738: LD_VAR 0 5
14742: PPUSH
14743: CALL_OW 1
14747: ST_TO_ADDR
// result := list ;
14748: LD_ADDR_VAR 0 4
14752: PUSH
14753: LD_VAR 0 1
14757: ST_TO_ADDR
// end ;
14758: LD_VAR 0 4
14762: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14763: LD_INT 0
14765: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14766: LD_ADDR_VAR 0 5
14770: PUSH
14771: LD_VAR 0 1
14775: PPUSH
14776: CALL_OW 250
14780: PPUSH
14781: LD_VAR 0 1
14785: PPUSH
14786: CALL_OW 251
14790: PPUSH
14791: LD_VAR 0 2
14795: PPUSH
14796: LD_VAR 0 3
14800: PPUSH
14801: LD_VAR 0 4
14805: PPUSH
14806: CALL 15184 0 5
14810: ST_TO_ADDR
// end ;
14811: LD_VAR 0 5
14815: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14816: LD_INT 0
14818: PPUSH
14819: PPUSH
14820: PPUSH
14821: PPUSH
// if not list or not unit then
14822: LD_VAR 0 2
14826: NOT
14827: PUSH
14828: LD_VAR 0 1
14832: NOT
14833: OR
14834: IFFALSE 14838
// exit ;
14836: GO 15179
// result := [ ] ;
14838: LD_ADDR_VAR 0 5
14842: PUSH
14843: EMPTY
14844: ST_TO_ADDR
// for i in list do
14845: LD_ADDR_VAR 0 6
14849: PUSH
14850: LD_VAR 0 2
14854: PUSH
14855: FOR_IN
14856: IFFALSE 15074
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14858: LD_ADDR_VAR 0 8
14862: PUSH
14863: LD_VAR 0 1
14867: PPUSH
14868: LD_VAR 0 6
14872: PUSH
14873: LD_INT 1
14875: ARRAY
14876: PPUSH
14877: LD_VAR 0 6
14881: PUSH
14882: LD_INT 2
14884: ARRAY
14885: PPUSH
14886: CALL_OW 297
14890: ST_TO_ADDR
// if not Count ( result ) then
14891: LD_VAR 0 5
14895: PPUSH
14896: CALL 11468 0 1
14900: NOT
14901: IFFALSE 14934
// begin result := Join ( result , [ i , tmp ] ) ;
14903: LD_ADDR_VAR 0 5
14907: PUSH
14908: LD_VAR 0 5
14912: PPUSH
14913: LD_VAR 0 6
14917: PUSH
14918: LD_VAR 0 8
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PPUSH
14927: CALL 47077 0 2
14931: ST_TO_ADDR
// continue ;
14932: GO 14855
// end ; if result [ result ] [ 2 ] <= tmp then
14934: LD_VAR 0 5
14938: PUSH
14939: LD_VAR 0 5
14943: ARRAY
14944: PUSH
14945: LD_INT 2
14947: ARRAY
14948: PUSH
14949: LD_VAR 0 8
14953: LESSEQUAL
14954: IFFALSE 14987
// result := Join ( result , [ i , tmp ] ) else
14956: LD_ADDR_VAR 0 5
14960: PUSH
14961: LD_VAR 0 5
14965: PPUSH
14966: LD_VAR 0 6
14970: PUSH
14971: LD_VAR 0 8
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PPUSH
14980: CALL 47077 0 2
14984: ST_TO_ADDR
14985: GO 15072
// begin for j := 1 to Count ( result ) do
14987: LD_ADDR_VAR 0 7
14991: PUSH
14992: DOUBLE
14993: LD_INT 1
14995: DEC
14996: ST_TO_ADDR
14997: LD_VAR 0 5
15001: PPUSH
15002: CALL 11468 0 1
15006: PUSH
15007: FOR_TO
15008: IFFALSE 15070
// begin if tmp < result [ j ] [ 2 ] then
15010: LD_VAR 0 8
15014: PUSH
15015: LD_VAR 0 5
15019: PUSH
15020: LD_VAR 0 7
15024: ARRAY
15025: PUSH
15026: LD_INT 2
15028: ARRAY
15029: LESS
15030: IFFALSE 15068
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15032: LD_ADDR_VAR 0 5
15036: PUSH
15037: LD_VAR 0 5
15041: PPUSH
15042: LD_VAR 0 7
15046: PPUSH
15047: LD_VAR 0 6
15051: PUSH
15052: LD_VAR 0 8
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PPUSH
15061: CALL_OW 2
15065: ST_TO_ADDR
// break ;
15066: GO 15070
// end ; end ;
15068: GO 15007
15070: POP
15071: POP
// end ; end ;
15072: GO 14855
15074: POP
15075: POP
// if result and not asc then
15076: LD_VAR 0 5
15080: PUSH
15081: LD_VAR 0 3
15085: NOT
15086: AND
15087: IFFALSE 15104
// result := ReverseArray ( result ) ;
15089: LD_ADDR_VAR 0 5
15093: PUSH
15094: LD_VAR 0 5
15098: PPUSH
15099: CALL 42344 0 1
15103: ST_TO_ADDR
// tmp := [ ] ;
15104: LD_ADDR_VAR 0 8
15108: PUSH
15109: EMPTY
15110: ST_TO_ADDR
// if mode then
15111: LD_VAR 0 4
15115: IFFALSE 15179
// begin for i := 1 to result do
15117: LD_ADDR_VAR 0 6
15121: PUSH
15122: DOUBLE
15123: LD_INT 1
15125: DEC
15126: ST_TO_ADDR
15127: LD_VAR 0 5
15131: PUSH
15132: FOR_TO
15133: IFFALSE 15167
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15135: LD_ADDR_VAR 0 8
15139: PUSH
15140: LD_VAR 0 8
15144: PPUSH
15145: LD_VAR 0 5
15149: PUSH
15150: LD_VAR 0 6
15154: ARRAY
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: PPUSH
15160: CALL 47077 0 2
15164: ST_TO_ADDR
15165: GO 15132
15167: POP
15168: POP
// result := tmp ;
15169: LD_ADDR_VAR 0 5
15173: PUSH
15174: LD_VAR 0 8
15178: ST_TO_ADDR
// end ; end ;
15179: LD_VAR 0 5
15183: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15184: LD_INT 0
15186: PPUSH
15187: PPUSH
15188: PPUSH
15189: PPUSH
// if not list then
15190: LD_VAR 0 3
15194: NOT
15195: IFFALSE 15199
// exit ;
15197: GO 15587
// result := [ ] ;
15199: LD_ADDR_VAR 0 6
15203: PUSH
15204: EMPTY
15205: ST_TO_ADDR
// for i in list do
15206: LD_ADDR_VAR 0 7
15210: PUSH
15211: LD_VAR 0 3
15215: PUSH
15216: FOR_IN
15217: IFFALSE 15419
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15219: LD_ADDR_VAR 0 9
15223: PUSH
15224: LD_VAR 0 7
15228: PPUSH
15229: LD_VAR 0 1
15233: PPUSH
15234: LD_VAR 0 2
15238: PPUSH
15239: CALL_OW 297
15243: ST_TO_ADDR
// if not result then
15244: LD_VAR 0 6
15248: NOT
15249: IFFALSE 15275
// result := [ [ i , tmp ] ] else
15251: LD_ADDR_VAR 0 6
15255: PUSH
15256: LD_VAR 0 7
15260: PUSH
15261: LD_VAR 0 9
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: EMPTY
15271: LIST
15272: ST_TO_ADDR
15273: GO 15417
// begin if result [ result ] [ 2 ] <= tmp then
15275: LD_VAR 0 6
15279: PUSH
15280: LD_VAR 0 6
15284: ARRAY
15285: PUSH
15286: LD_INT 2
15288: ARRAY
15289: PUSH
15290: LD_VAR 0 9
15294: LESSEQUAL
15295: IFFALSE 15337
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15297: LD_ADDR_VAR 0 6
15301: PUSH
15302: LD_VAR 0 6
15306: PPUSH
15307: LD_VAR 0 6
15311: PUSH
15312: LD_INT 1
15314: PLUS
15315: PPUSH
15316: LD_VAR 0 7
15320: PUSH
15321: LD_VAR 0 9
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PPUSH
15330: CALL_OW 2
15334: ST_TO_ADDR
15335: GO 15417
// for j := 1 to result do
15337: LD_ADDR_VAR 0 8
15341: PUSH
15342: DOUBLE
15343: LD_INT 1
15345: DEC
15346: ST_TO_ADDR
15347: LD_VAR 0 6
15351: PUSH
15352: FOR_TO
15353: IFFALSE 15415
// begin if tmp < result [ j ] [ 2 ] then
15355: LD_VAR 0 9
15359: PUSH
15360: LD_VAR 0 6
15364: PUSH
15365: LD_VAR 0 8
15369: ARRAY
15370: PUSH
15371: LD_INT 2
15373: ARRAY
15374: LESS
15375: IFFALSE 15413
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15377: LD_ADDR_VAR 0 6
15381: PUSH
15382: LD_VAR 0 6
15386: PPUSH
15387: LD_VAR 0 8
15391: PPUSH
15392: LD_VAR 0 7
15396: PUSH
15397: LD_VAR 0 9
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PPUSH
15406: CALL_OW 2
15410: ST_TO_ADDR
// break ;
15411: GO 15415
// end ; end ;
15413: GO 15352
15415: POP
15416: POP
// end ; end ;
15417: GO 15216
15419: POP
15420: POP
// if result and not asc then
15421: LD_VAR 0 6
15425: PUSH
15426: LD_VAR 0 4
15430: NOT
15431: AND
15432: IFFALSE 15507
// begin tmp := result ;
15434: LD_ADDR_VAR 0 9
15438: PUSH
15439: LD_VAR 0 6
15443: ST_TO_ADDR
// for i = tmp downto 1 do
15444: LD_ADDR_VAR 0 7
15448: PUSH
15449: DOUBLE
15450: LD_VAR 0 9
15454: INC
15455: ST_TO_ADDR
15456: LD_INT 1
15458: PUSH
15459: FOR_DOWNTO
15460: IFFALSE 15505
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15462: LD_ADDR_VAR 0 6
15466: PUSH
15467: LD_VAR 0 6
15471: PPUSH
15472: LD_VAR 0 9
15476: PUSH
15477: LD_VAR 0 7
15481: MINUS
15482: PUSH
15483: LD_INT 1
15485: PLUS
15486: PPUSH
15487: LD_VAR 0 9
15491: PUSH
15492: LD_VAR 0 7
15496: ARRAY
15497: PPUSH
15498: CALL_OW 1
15502: ST_TO_ADDR
15503: GO 15459
15505: POP
15506: POP
// end ; tmp := [ ] ;
15507: LD_ADDR_VAR 0 9
15511: PUSH
15512: EMPTY
15513: ST_TO_ADDR
// if mode then
15514: LD_VAR 0 5
15518: IFFALSE 15587
// begin for i = 1 to result do
15520: LD_ADDR_VAR 0 7
15524: PUSH
15525: DOUBLE
15526: LD_INT 1
15528: DEC
15529: ST_TO_ADDR
15530: LD_VAR 0 6
15534: PUSH
15535: FOR_TO
15536: IFFALSE 15575
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15538: LD_ADDR_VAR 0 9
15542: PUSH
15543: LD_VAR 0 9
15547: PPUSH
15548: LD_VAR 0 7
15552: PPUSH
15553: LD_VAR 0 6
15557: PUSH
15558: LD_VAR 0 7
15562: ARRAY
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: PPUSH
15568: CALL_OW 1
15572: ST_TO_ADDR
15573: GO 15535
15575: POP
15576: POP
// result := tmp ;
15577: LD_ADDR_VAR 0 6
15581: PUSH
15582: LD_VAR 0 9
15586: ST_TO_ADDR
// end ; end ;
15587: LD_VAR 0 6
15591: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15592: LD_INT 0
15594: PPUSH
15595: PPUSH
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15600: LD_ADDR_VAR 0 5
15604: PUSH
15605: LD_INT 0
15607: PUSH
15608: LD_INT 0
15610: PUSH
15611: LD_INT 0
15613: PUSH
15614: EMPTY
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: ST_TO_ADDR
// if not x or not y then
15622: LD_VAR 0 2
15626: NOT
15627: PUSH
15628: LD_VAR 0 3
15632: NOT
15633: OR
15634: IFFALSE 15638
// exit ;
15636: GO 17288
// if not range then
15638: LD_VAR 0 4
15642: NOT
15643: IFFALSE 15653
// range := 10 ;
15645: LD_ADDR_VAR 0 4
15649: PUSH
15650: LD_INT 10
15652: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15653: LD_ADDR_VAR 0 8
15657: PUSH
15658: LD_INT 81
15660: PUSH
15661: LD_VAR 0 1
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 92
15672: PUSH
15673: LD_VAR 0 2
15677: PUSH
15678: LD_VAR 0 3
15682: PUSH
15683: LD_VAR 0 4
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 3
15696: PUSH
15697: LD_INT 21
15699: PUSH
15700: LD_INT 3
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: ST_TO_ADDR
// if not tmp then
15721: LD_VAR 0 8
15725: NOT
15726: IFFALSE 15730
// exit ;
15728: GO 17288
// for i in tmp do
15730: LD_ADDR_VAR 0 6
15734: PUSH
15735: LD_VAR 0 8
15739: PUSH
15740: FOR_IN
15741: IFFALSE 17263
// begin points := [ 0 , 0 , 0 ] ;
15743: LD_ADDR_VAR 0 9
15747: PUSH
15748: LD_INT 0
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: LD_INT 0
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: ST_TO_ADDR
// bpoints := 1 ;
15762: LD_ADDR_VAR 0 10
15766: PUSH
15767: LD_INT 1
15769: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15770: LD_VAR 0 6
15774: PPUSH
15775: CALL_OW 247
15779: PUSH
15780: LD_INT 1
15782: DOUBLE
15783: EQUAL
15784: IFTRUE 15788
15786: GO 16366
15788: POP
// begin if GetClass ( i ) = 1 then
15789: LD_VAR 0 6
15793: PPUSH
15794: CALL_OW 257
15798: PUSH
15799: LD_INT 1
15801: EQUAL
15802: IFFALSE 15823
// points := [ 10 , 5 , 3 ] ;
15804: LD_ADDR_VAR 0 9
15808: PUSH
15809: LD_INT 10
15811: PUSH
15812: LD_INT 5
15814: PUSH
15815: LD_INT 3
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: LIST
15822: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15823: LD_VAR 0 6
15827: PPUSH
15828: CALL_OW 257
15832: PUSH
15833: LD_INT 2
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: LD_INT 4
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: IN
15847: IFFALSE 15868
// points := [ 3 , 2 , 1 ] ;
15849: LD_ADDR_VAR 0 9
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: LD_INT 2
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: LIST
15867: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15868: LD_VAR 0 6
15872: PPUSH
15873: CALL_OW 257
15877: PUSH
15878: LD_INT 5
15880: EQUAL
15881: IFFALSE 15902
// points := [ 130 , 5 , 2 ] ;
15883: LD_ADDR_VAR 0 9
15887: PUSH
15888: LD_INT 130
15890: PUSH
15891: LD_INT 5
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: LIST
15901: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15902: LD_VAR 0 6
15906: PPUSH
15907: CALL_OW 257
15911: PUSH
15912: LD_INT 8
15914: EQUAL
15915: IFFALSE 15936
// points := [ 35 , 35 , 30 ] ;
15917: LD_ADDR_VAR 0 9
15921: PUSH
15922: LD_INT 35
15924: PUSH
15925: LD_INT 35
15927: PUSH
15928: LD_INT 30
15930: PUSH
15931: EMPTY
15932: LIST
15933: LIST
15934: LIST
15935: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15936: LD_VAR 0 6
15940: PPUSH
15941: CALL_OW 257
15945: PUSH
15946: LD_INT 9
15948: EQUAL
15949: IFFALSE 15970
// points := [ 20 , 55 , 40 ] ;
15951: LD_ADDR_VAR 0 9
15955: PUSH
15956: LD_INT 20
15958: PUSH
15959: LD_INT 55
15961: PUSH
15962: LD_INT 40
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: LIST
15969: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15970: LD_VAR 0 6
15974: PPUSH
15975: CALL_OW 257
15979: PUSH
15980: LD_INT 12
15982: PUSH
15983: LD_INT 16
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: IN
15990: IFFALSE 16011
// points := [ 5 , 3 , 2 ] ;
15992: LD_ADDR_VAR 0 9
15996: PUSH
15997: LD_INT 5
15999: PUSH
16000: LD_INT 3
16002: PUSH
16003: LD_INT 2
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: LIST
16010: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16011: LD_VAR 0 6
16015: PPUSH
16016: CALL_OW 257
16020: PUSH
16021: LD_INT 17
16023: EQUAL
16024: IFFALSE 16045
// points := [ 100 , 50 , 75 ] ;
16026: LD_ADDR_VAR 0 9
16030: PUSH
16031: LD_INT 100
16033: PUSH
16034: LD_INT 50
16036: PUSH
16037: LD_INT 75
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16045: LD_VAR 0 6
16049: PPUSH
16050: CALL_OW 257
16054: PUSH
16055: LD_INT 15
16057: EQUAL
16058: IFFALSE 16079
// points := [ 10 , 5 , 3 ] ;
16060: LD_ADDR_VAR 0 9
16064: PUSH
16065: LD_INT 10
16067: PUSH
16068: LD_INT 5
16070: PUSH
16071: LD_INT 3
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: LIST
16078: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16079: LD_VAR 0 6
16083: PPUSH
16084: CALL_OW 257
16088: PUSH
16089: LD_INT 14
16091: EQUAL
16092: IFFALSE 16113
// points := [ 10 , 0 , 0 ] ;
16094: LD_ADDR_VAR 0 9
16098: PUSH
16099: LD_INT 10
16101: PUSH
16102: LD_INT 0
16104: PUSH
16105: LD_INT 0
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: LIST
16112: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16113: LD_VAR 0 6
16117: PPUSH
16118: CALL_OW 257
16122: PUSH
16123: LD_INT 11
16125: EQUAL
16126: IFFALSE 16147
// points := [ 30 , 10 , 5 ] ;
16128: LD_ADDR_VAR 0 9
16132: PUSH
16133: LD_INT 30
16135: PUSH
16136: LD_INT 10
16138: PUSH
16139: LD_INT 5
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16147: LD_VAR 0 1
16151: PPUSH
16152: LD_INT 5
16154: PPUSH
16155: CALL_OW 321
16159: PUSH
16160: LD_INT 2
16162: EQUAL
16163: IFFALSE 16180
// bpoints := bpoints * 1.8 ;
16165: LD_ADDR_VAR 0 10
16169: PUSH
16170: LD_VAR 0 10
16174: PUSH
16175: LD_REAL  1.80000000000000E+0000
16178: MUL
16179: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16180: LD_VAR 0 6
16184: PPUSH
16185: CALL_OW 257
16189: PUSH
16190: LD_INT 1
16192: PUSH
16193: LD_INT 2
16195: PUSH
16196: LD_INT 3
16198: PUSH
16199: LD_INT 4
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: IN
16208: PUSH
16209: LD_VAR 0 1
16213: PPUSH
16214: LD_INT 51
16216: PPUSH
16217: CALL_OW 321
16221: PUSH
16222: LD_INT 2
16224: EQUAL
16225: AND
16226: IFFALSE 16243
// bpoints := bpoints * 1.2 ;
16228: LD_ADDR_VAR 0 10
16232: PUSH
16233: LD_VAR 0 10
16237: PUSH
16238: LD_REAL  1.20000000000000E+0000
16241: MUL
16242: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16243: LD_VAR 0 6
16247: PPUSH
16248: CALL_OW 257
16252: PUSH
16253: LD_INT 5
16255: PUSH
16256: LD_INT 7
16258: PUSH
16259: LD_INT 9
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: IN
16267: PUSH
16268: LD_VAR 0 1
16272: PPUSH
16273: LD_INT 52
16275: PPUSH
16276: CALL_OW 321
16280: PUSH
16281: LD_INT 2
16283: EQUAL
16284: AND
16285: IFFALSE 16302
// bpoints := bpoints * 1.5 ;
16287: LD_ADDR_VAR 0 10
16291: PUSH
16292: LD_VAR 0 10
16296: PUSH
16297: LD_REAL  1.50000000000000E+0000
16300: MUL
16301: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16302: LD_VAR 0 1
16306: PPUSH
16307: LD_INT 66
16309: PPUSH
16310: CALL_OW 321
16314: PUSH
16315: LD_INT 2
16317: EQUAL
16318: IFFALSE 16335
// bpoints := bpoints * 1.1 ;
16320: LD_ADDR_VAR 0 10
16324: PUSH
16325: LD_VAR 0 10
16329: PUSH
16330: LD_REAL  1.10000000000000E+0000
16333: MUL
16334: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16335: LD_ADDR_VAR 0 10
16339: PUSH
16340: LD_VAR 0 10
16344: PUSH
16345: LD_VAR 0 6
16349: PPUSH
16350: LD_INT 1
16352: PPUSH
16353: CALL_OW 259
16357: PUSH
16358: LD_REAL  1.15000000000000E+0000
16361: MUL
16362: MUL
16363: ST_TO_ADDR
// end ; unit_vehicle :
16364: GO 17192
16366: LD_INT 2
16368: DOUBLE
16369: EQUAL
16370: IFTRUE 16374
16372: GO 17180
16374: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16375: LD_VAR 0 6
16379: PPUSH
16380: CALL_OW 264
16384: PUSH
16385: LD_INT 2
16387: PUSH
16388: LD_INT 42
16390: PUSH
16391: LD_INT 24
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: IN
16399: IFFALSE 16420
// points := [ 25 , 5 , 3 ] ;
16401: LD_ADDR_VAR 0 9
16405: PUSH
16406: LD_INT 25
16408: PUSH
16409: LD_INT 5
16411: PUSH
16412: LD_INT 3
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16420: LD_VAR 0 6
16424: PPUSH
16425: CALL_OW 264
16429: PUSH
16430: LD_INT 4
16432: PUSH
16433: LD_INT 43
16435: PUSH
16436: LD_INT 25
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: IN
16444: IFFALSE 16465
// points := [ 40 , 15 , 5 ] ;
16446: LD_ADDR_VAR 0 9
16450: PUSH
16451: LD_INT 40
16453: PUSH
16454: LD_INT 15
16456: PUSH
16457: LD_INT 5
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16465: LD_VAR 0 6
16469: PPUSH
16470: CALL_OW 264
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: LD_INT 23
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: IN
16485: IFFALSE 16506
// points := [ 7 , 25 , 8 ] ;
16487: LD_ADDR_VAR 0 9
16491: PUSH
16492: LD_INT 7
16494: PUSH
16495: LD_INT 25
16497: PUSH
16498: LD_INT 8
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: LIST
16505: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16506: LD_VAR 0 6
16510: PPUSH
16511: CALL_OW 264
16515: PUSH
16516: LD_INT 5
16518: PUSH
16519: LD_INT 27
16521: PUSH
16522: LD_INT 44
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: IN
16530: IFFALSE 16551
// points := [ 14 , 50 , 16 ] ;
16532: LD_ADDR_VAR 0 9
16536: PUSH
16537: LD_INT 14
16539: PUSH
16540: LD_INT 50
16542: PUSH
16543: LD_INT 16
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16551: LD_VAR 0 6
16555: PPUSH
16556: CALL_OW 264
16560: PUSH
16561: LD_INT 6
16563: PUSH
16564: LD_INT 46
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: IN
16571: IFFALSE 16592
// points := [ 32 , 120 , 70 ] ;
16573: LD_ADDR_VAR 0 9
16577: PUSH
16578: LD_INT 32
16580: PUSH
16581: LD_INT 120
16583: PUSH
16584: LD_INT 70
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16592: LD_VAR 0 6
16596: PPUSH
16597: CALL_OW 264
16601: PUSH
16602: LD_INT 7
16604: PUSH
16605: LD_INT 28
16607: PUSH
16608: LD_INT 45
16610: PUSH
16611: LD_INT 92
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: IN
16620: IFFALSE 16641
// points := [ 35 , 20 , 45 ] ;
16622: LD_ADDR_VAR 0 9
16626: PUSH
16627: LD_INT 35
16629: PUSH
16630: LD_INT 20
16632: PUSH
16633: LD_INT 45
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16641: LD_VAR 0 6
16645: PPUSH
16646: CALL_OW 264
16650: PUSH
16651: LD_INT 47
16653: PUSH
16654: EMPTY
16655: LIST
16656: IN
16657: IFFALSE 16678
// points := [ 67 , 45 , 75 ] ;
16659: LD_ADDR_VAR 0 9
16663: PUSH
16664: LD_INT 67
16666: PUSH
16667: LD_INT 45
16669: PUSH
16670: LD_INT 75
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16678: LD_VAR 0 6
16682: PPUSH
16683: CALL_OW 264
16687: PUSH
16688: LD_INT 26
16690: PUSH
16691: EMPTY
16692: LIST
16693: IN
16694: IFFALSE 16715
// points := [ 120 , 30 , 80 ] ;
16696: LD_ADDR_VAR 0 9
16700: PUSH
16701: LD_INT 120
16703: PUSH
16704: LD_INT 30
16706: PUSH
16707: LD_INT 80
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16715: LD_VAR 0 6
16719: PPUSH
16720: CALL_OW 264
16724: PUSH
16725: LD_INT 22
16727: PUSH
16728: EMPTY
16729: LIST
16730: IN
16731: IFFALSE 16752
// points := [ 40 , 1 , 1 ] ;
16733: LD_ADDR_VAR 0 9
16737: PUSH
16738: LD_INT 40
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: LD_INT 1
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: LIST
16751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16752: LD_VAR 0 6
16756: PPUSH
16757: CALL_OW 264
16761: PUSH
16762: LD_INT 29
16764: PUSH
16765: EMPTY
16766: LIST
16767: IN
16768: IFFALSE 16789
// points := [ 70 , 200 , 400 ] ;
16770: LD_ADDR_VAR 0 9
16774: PUSH
16775: LD_INT 70
16777: PUSH
16778: LD_INT 200
16780: PUSH
16781: LD_INT 400
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16789: LD_VAR 0 6
16793: PPUSH
16794: CALL_OW 264
16798: PUSH
16799: LD_INT 14
16801: PUSH
16802: LD_INT 53
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: IN
16809: IFFALSE 16830
// points := [ 40 , 10 , 20 ] ;
16811: LD_ADDR_VAR 0 9
16815: PUSH
16816: LD_INT 40
16818: PUSH
16819: LD_INT 10
16821: PUSH
16822: LD_INT 20
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16830: LD_VAR 0 6
16834: PPUSH
16835: CALL_OW 264
16839: PUSH
16840: LD_INT 9
16842: PUSH
16843: EMPTY
16844: LIST
16845: IN
16846: IFFALSE 16867
// points := [ 5 , 70 , 20 ] ;
16848: LD_ADDR_VAR 0 9
16852: PUSH
16853: LD_INT 5
16855: PUSH
16856: LD_INT 70
16858: PUSH
16859: LD_INT 20
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: LIST
16866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16867: LD_VAR 0 6
16871: PPUSH
16872: CALL_OW 264
16876: PUSH
16877: LD_INT 10
16879: PUSH
16880: EMPTY
16881: LIST
16882: IN
16883: IFFALSE 16904
// points := [ 35 , 110 , 70 ] ;
16885: LD_ADDR_VAR 0 9
16889: PUSH
16890: LD_INT 35
16892: PUSH
16893: LD_INT 110
16895: PUSH
16896: LD_INT 70
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16904: LD_VAR 0 6
16908: PPUSH
16909: CALL_OW 265
16913: PUSH
16914: LD_INT 25
16916: EQUAL
16917: IFFALSE 16938
// points := [ 80 , 65 , 100 ] ;
16919: LD_ADDR_VAR 0 9
16923: PUSH
16924: LD_INT 80
16926: PUSH
16927: LD_INT 65
16929: PUSH
16930: LD_INT 100
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16938: LD_VAR 0 6
16942: PPUSH
16943: CALL_OW 263
16947: PUSH
16948: LD_INT 1
16950: EQUAL
16951: IFFALSE 16986
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16953: LD_ADDR_VAR 0 10
16957: PUSH
16958: LD_VAR 0 10
16962: PUSH
16963: LD_VAR 0 6
16967: PPUSH
16968: CALL_OW 311
16972: PPUSH
16973: LD_INT 3
16975: PPUSH
16976: CALL_OW 259
16980: PUSH
16981: LD_INT 4
16983: MUL
16984: MUL
16985: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16986: LD_VAR 0 6
16990: PPUSH
16991: CALL_OW 263
16995: PUSH
16996: LD_INT 2
16998: EQUAL
16999: IFFALSE 17050
// begin j := IsControledBy ( i ) ;
17001: LD_ADDR_VAR 0 7
17005: PUSH
17006: LD_VAR 0 6
17010: PPUSH
17011: CALL_OW 312
17015: ST_TO_ADDR
// if j then
17016: LD_VAR 0 7
17020: IFFALSE 17050
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17022: LD_ADDR_VAR 0 10
17026: PUSH
17027: LD_VAR 0 10
17031: PUSH
17032: LD_VAR 0 7
17036: PPUSH
17037: LD_INT 3
17039: PPUSH
17040: CALL_OW 259
17044: PUSH
17045: LD_INT 3
17047: MUL
17048: MUL
17049: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17050: LD_VAR 0 6
17054: PPUSH
17055: CALL_OW 264
17059: PUSH
17060: LD_INT 5
17062: PUSH
17063: LD_INT 6
17065: PUSH
17066: LD_INT 46
17068: PUSH
17069: LD_INT 44
17071: PUSH
17072: LD_INT 47
17074: PUSH
17075: LD_INT 45
17077: PUSH
17078: LD_INT 28
17080: PUSH
17081: LD_INT 7
17083: PUSH
17084: LD_INT 27
17086: PUSH
17087: LD_INT 29
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: IN
17102: PUSH
17103: LD_VAR 0 1
17107: PPUSH
17108: LD_INT 52
17110: PPUSH
17111: CALL_OW 321
17115: PUSH
17116: LD_INT 2
17118: EQUAL
17119: AND
17120: IFFALSE 17137
// bpoints := bpoints * 1.2 ;
17122: LD_ADDR_VAR 0 10
17126: PUSH
17127: LD_VAR 0 10
17131: PUSH
17132: LD_REAL  1.20000000000000E+0000
17135: MUL
17136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17137: LD_VAR 0 6
17141: PPUSH
17142: CALL_OW 264
17146: PUSH
17147: LD_INT 6
17149: PUSH
17150: LD_INT 46
17152: PUSH
17153: LD_INT 47
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: LIST
17160: IN
17161: IFFALSE 17178
// bpoints := bpoints * 1.2 ;
17163: LD_ADDR_VAR 0 10
17167: PUSH
17168: LD_VAR 0 10
17172: PUSH
17173: LD_REAL  1.20000000000000E+0000
17176: MUL
17177: ST_TO_ADDR
// end ; unit_building :
17178: GO 17192
17180: LD_INT 3
17182: DOUBLE
17183: EQUAL
17184: IFTRUE 17188
17186: GO 17191
17188: POP
// ; end ;
17189: GO 17192
17191: POP
// for j = 1 to 3 do
17192: LD_ADDR_VAR 0 7
17196: PUSH
17197: DOUBLE
17198: LD_INT 1
17200: DEC
17201: ST_TO_ADDR
17202: LD_INT 3
17204: PUSH
17205: FOR_TO
17206: IFFALSE 17259
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17208: LD_ADDR_VAR 0 5
17212: PUSH
17213: LD_VAR 0 5
17217: PPUSH
17218: LD_VAR 0 7
17222: PPUSH
17223: LD_VAR 0 5
17227: PUSH
17228: LD_VAR 0 7
17232: ARRAY
17233: PUSH
17234: LD_VAR 0 9
17238: PUSH
17239: LD_VAR 0 7
17243: ARRAY
17244: PUSH
17245: LD_VAR 0 10
17249: MUL
17250: PLUS
17251: PPUSH
17252: CALL_OW 1
17256: ST_TO_ADDR
17257: GO 17205
17259: POP
17260: POP
// end ;
17261: GO 15740
17263: POP
17264: POP
// result := Replace ( result , 4 , tmp ) ;
17265: LD_ADDR_VAR 0 5
17269: PUSH
17270: LD_VAR 0 5
17274: PPUSH
17275: LD_INT 4
17277: PPUSH
17278: LD_VAR 0 8
17282: PPUSH
17283: CALL_OW 1
17287: ST_TO_ADDR
// end ;
17288: LD_VAR 0 5
17292: RET
// export function DangerAtRange ( unit , range ) ; begin
17293: LD_INT 0
17295: PPUSH
// if not unit then
17296: LD_VAR 0 1
17300: NOT
17301: IFFALSE 17305
// exit ;
17303: GO 17350
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17305: LD_ADDR_VAR 0 3
17309: PUSH
17310: LD_VAR 0 1
17314: PPUSH
17315: CALL_OW 255
17319: PPUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: CALL_OW 250
17329: PPUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 251
17339: PPUSH
17340: LD_VAR 0 2
17344: PPUSH
17345: CALL 15592 0 4
17349: ST_TO_ADDR
// end ;
17350: LD_VAR 0 3
17354: RET
// export function DangerInArea ( side , area ) ; begin
17355: LD_INT 0
17357: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17358: LD_ADDR_VAR 0 3
17362: PUSH
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_INT 81
17370: PUSH
17371: LD_VAR 0 1
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PPUSH
17380: CALL_OW 70
17384: ST_TO_ADDR
// end ;
17385: LD_VAR 0 3
17389: RET
// export function IsExtension ( b ) ; begin
17390: LD_INT 0
17392: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17393: LD_ADDR_VAR 0 2
17397: PUSH
17398: LD_VAR 0 1
17402: PUSH
17403: LD_INT 23
17405: PUSH
17406: LD_INT 20
17408: PUSH
17409: LD_INT 22
17411: PUSH
17412: LD_INT 17
17414: PUSH
17415: LD_INT 24
17417: PUSH
17418: LD_INT 21
17420: PUSH
17421: LD_INT 19
17423: PUSH
17424: LD_INT 16
17426: PUSH
17427: LD_INT 25
17429: PUSH
17430: LD_INT 18
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: IN
17445: ST_TO_ADDR
// end ;
17446: LD_VAR 0 2
17450: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17451: LD_INT 0
17453: PPUSH
17454: PPUSH
17455: PPUSH
// result := [ ] ;
17456: LD_ADDR_VAR 0 4
17460: PUSH
17461: EMPTY
17462: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17463: LD_ADDR_VAR 0 5
17467: PUSH
17468: LD_VAR 0 2
17472: PPUSH
17473: LD_INT 21
17475: PUSH
17476: LD_INT 3
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PPUSH
17483: CALL_OW 70
17487: ST_TO_ADDR
// if not tmp then
17488: LD_VAR 0 5
17492: NOT
17493: IFFALSE 17497
// exit ;
17495: GO 17561
// if checkLink then
17497: LD_VAR 0 3
17501: IFFALSE 17551
// begin for i in tmp do
17503: LD_ADDR_VAR 0 6
17507: PUSH
17508: LD_VAR 0 5
17512: PUSH
17513: FOR_IN
17514: IFFALSE 17549
// if GetBase ( i ) <> base then
17516: LD_VAR 0 6
17520: PPUSH
17521: CALL_OW 274
17525: PUSH
17526: LD_VAR 0 1
17530: NONEQUAL
17531: IFFALSE 17547
// ComLinkToBase ( base , i ) ;
17533: LD_VAR 0 1
17537: PPUSH
17538: LD_VAR 0 6
17542: PPUSH
17543: CALL_OW 169
17547: GO 17513
17549: POP
17550: POP
// end ; result := tmp ;
17551: LD_ADDR_VAR 0 4
17555: PUSH
17556: LD_VAR 0 5
17560: ST_TO_ADDR
// end ;
17561: LD_VAR 0 4
17565: RET
// export function ComComplete ( units , b ) ; var i ; begin
17566: LD_INT 0
17568: PPUSH
17569: PPUSH
// if not units then
17570: LD_VAR 0 1
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 17669
// for i in units do
17579: LD_ADDR_VAR 0 4
17583: PUSH
17584: LD_VAR 0 1
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17667
// if BuildingStatus ( b ) = bs_build then
17592: LD_VAR 0 2
17596: PPUSH
17597: CALL_OW 461
17601: PUSH
17602: LD_INT 1
17604: EQUAL
17605: IFFALSE 17665
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17607: LD_VAR 0 4
17611: PPUSH
17612: LD_STRING h
17614: PUSH
17615: LD_VAR 0 2
17619: PPUSH
17620: CALL_OW 250
17624: PUSH
17625: LD_VAR 0 2
17629: PPUSH
17630: CALL_OW 251
17634: PUSH
17635: LD_VAR 0 2
17639: PUSH
17640: LD_INT 0
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: LD_INT 0
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: PUSH
17658: EMPTY
17659: LIST
17660: PPUSH
17661: CALL_OW 446
17665: GO 17589
17667: POP
17668: POP
// end ;
17669: LD_VAR 0 3
17673: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17674: LD_INT 0
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17682: LD_VAR 0 1
17686: NOT
17687: PUSH
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 263
17697: PUSH
17698: LD_INT 2
17700: NONEQUAL
17701: OR
17702: IFFALSE 17706
// exit ;
17704: GO 18022
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17706: LD_ADDR_VAR 0 6
17710: PUSH
17711: LD_INT 22
17713: PUSH
17714: LD_VAR 0 1
17718: PPUSH
17719: CALL_OW 255
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 2
17730: PUSH
17731: LD_INT 30
17733: PUSH
17734: LD_INT 36
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 34
17743: PUSH
17744: LD_INT 31
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: LIST
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PPUSH
17760: CALL_OW 69
17764: ST_TO_ADDR
// if not tmp then
17765: LD_VAR 0 6
17769: NOT
17770: IFFALSE 17774
// exit ;
17772: GO 18022
// result := [ ] ;
17774: LD_ADDR_VAR 0 2
17778: PUSH
17779: EMPTY
17780: ST_TO_ADDR
// for i in tmp do
17781: LD_ADDR_VAR 0 3
17785: PUSH
17786: LD_VAR 0 6
17790: PUSH
17791: FOR_IN
17792: IFFALSE 17863
// begin t := UnitsInside ( i ) ;
17794: LD_ADDR_VAR 0 4
17798: PUSH
17799: LD_VAR 0 3
17803: PPUSH
17804: CALL_OW 313
17808: ST_TO_ADDR
// if t then
17809: LD_VAR 0 4
17813: IFFALSE 17861
// for j in t do
17815: LD_ADDR_VAR 0 7
17819: PUSH
17820: LD_VAR 0 4
17824: PUSH
17825: FOR_IN
17826: IFFALSE 17859
// result := Replace ( result , result + 1 , j ) ;
17828: LD_ADDR_VAR 0 2
17832: PUSH
17833: LD_VAR 0 2
17837: PPUSH
17838: LD_VAR 0 2
17842: PUSH
17843: LD_INT 1
17845: PLUS
17846: PPUSH
17847: LD_VAR 0 7
17851: PPUSH
17852: CALL_OW 1
17856: ST_TO_ADDR
17857: GO 17825
17859: POP
17860: POP
// end ;
17861: GO 17791
17863: POP
17864: POP
// if not result then
17865: LD_VAR 0 2
17869: NOT
17870: IFFALSE 17874
// exit ;
17872: GO 18022
// mech := result [ 1 ] ;
17874: LD_ADDR_VAR 0 5
17878: PUSH
17879: LD_VAR 0 2
17883: PUSH
17884: LD_INT 1
17886: ARRAY
17887: ST_TO_ADDR
// if result > 1 then
17888: LD_VAR 0 2
17892: PUSH
17893: LD_INT 1
17895: GREATER
17896: IFFALSE 18008
// begin for i = 2 to result do
17898: LD_ADDR_VAR 0 3
17902: PUSH
17903: DOUBLE
17904: LD_INT 2
17906: DEC
17907: ST_TO_ADDR
17908: LD_VAR 0 2
17912: PUSH
17913: FOR_TO
17914: IFFALSE 18006
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17916: LD_ADDR_VAR 0 4
17920: PUSH
17921: LD_VAR 0 2
17925: PUSH
17926: LD_VAR 0 3
17930: ARRAY
17931: PPUSH
17932: LD_INT 3
17934: PPUSH
17935: CALL_OW 259
17939: PUSH
17940: LD_VAR 0 2
17944: PUSH
17945: LD_VAR 0 3
17949: ARRAY
17950: PPUSH
17951: CALL_OW 432
17955: MINUS
17956: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17957: LD_VAR 0 4
17961: PUSH
17962: LD_VAR 0 5
17966: PPUSH
17967: LD_INT 3
17969: PPUSH
17970: CALL_OW 259
17974: PUSH
17975: LD_VAR 0 5
17979: PPUSH
17980: CALL_OW 432
17984: MINUS
17985: GREATEREQUAL
17986: IFFALSE 18004
// mech := result [ i ] ;
17988: LD_ADDR_VAR 0 5
17992: PUSH
17993: LD_VAR 0 2
17997: PUSH
17998: LD_VAR 0 3
18002: ARRAY
18003: ST_TO_ADDR
// end ;
18004: GO 17913
18006: POP
18007: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18008: LD_VAR 0 1
18012: PPUSH
18013: LD_VAR 0 5
18017: PPUSH
18018: CALL_OW 135
// end ;
18022: LD_VAR 0 2
18026: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18027: LD_INT 0
18029: PPUSH
18030: PPUSH
18031: PPUSH
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
18039: PPUSH
18040: PPUSH
18041: PPUSH
// result := [ ] ;
18042: LD_ADDR_VAR 0 7
18046: PUSH
18047: EMPTY
18048: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 266
18058: PUSH
18059: LD_INT 0
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: IN
18069: NOT
18070: IFFALSE 18074
// exit ;
18072: GO 19708
// if name then
18074: LD_VAR 0 3
18078: IFFALSE 18094
// SetBName ( base_dep , name ) ;
18080: LD_VAR 0 1
18084: PPUSH
18085: LD_VAR 0 3
18089: PPUSH
18090: CALL_OW 500
// base := GetBase ( base_dep ) ;
18094: LD_ADDR_VAR 0 15
18098: PUSH
18099: LD_VAR 0 1
18103: PPUSH
18104: CALL_OW 274
18108: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18109: LD_ADDR_VAR 0 16
18113: PUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 255
18123: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18124: LD_ADDR_VAR 0 17
18128: PUSH
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 248
18138: ST_TO_ADDR
// if sources then
18139: LD_VAR 0 5
18143: IFFALSE 18190
// for i = 1 to 3 do
18145: LD_ADDR_VAR 0 8
18149: PUSH
18150: DOUBLE
18151: LD_INT 1
18153: DEC
18154: ST_TO_ADDR
18155: LD_INT 3
18157: PUSH
18158: FOR_TO
18159: IFFALSE 18188
// AddResourceType ( base , i , sources [ i ] ) ;
18161: LD_VAR 0 15
18165: PPUSH
18166: LD_VAR 0 8
18170: PPUSH
18171: LD_VAR 0 5
18175: PUSH
18176: LD_VAR 0 8
18180: ARRAY
18181: PPUSH
18182: CALL_OW 276
18186: GO 18158
18188: POP
18189: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18190: LD_ADDR_VAR 0 18
18194: PUSH
18195: LD_VAR 0 15
18199: PPUSH
18200: LD_VAR 0 2
18204: PPUSH
18205: LD_INT 1
18207: PPUSH
18208: CALL 17451 0 3
18212: ST_TO_ADDR
// InitHc ;
18213: CALL_OW 19
// InitUc ;
18217: CALL_OW 18
// uc_side := side ;
18221: LD_ADDR_OWVAR 20
18225: PUSH
18226: LD_VAR 0 16
18230: ST_TO_ADDR
// uc_nation := nation ;
18231: LD_ADDR_OWVAR 21
18235: PUSH
18236: LD_VAR 0 17
18240: ST_TO_ADDR
// if buildings then
18241: LD_VAR 0 18
18245: IFFALSE 19567
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18247: LD_ADDR_VAR 0 19
18251: PUSH
18252: LD_VAR 0 18
18256: PPUSH
18257: LD_INT 2
18259: PUSH
18260: LD_INT 30
18262: PUSH
18263: LD_INT 29
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 30
18272: PUSH
18273: LD_INT 30
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: PPUSH
18285: CALL_OW 72
18289: ST_TO_ADDR
// if tmp then
18290: LD_VAR 0 19
18294: IFFALSE 18342
// for i in tmp do
18296: LD_ADDR_VAR 0 8
18300: PUSH
18301: LD_VAR 0 19
18305: PUSH
18306: FOR_IN
18307: IFFALSE 18340
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18309: LD_VAR 0 8
18313: PPUSH
18314: CALL_OW 250
18318: PPUSH
18319: LD_VAR 0 8
18323: PPUSH
18324: CALL_OW 251
18328: PPUSH
18329: LD_VAR 0 16
18333: PPUSH
18334: CALL_OW 441
18338: GO 18306
18340: POP
18341: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18342: LD_VAR 0 18
18346: PPUSH
18347: LD_INT 2
18349: PUSH
18350: LD_INT 30
18352: PUSH
18353: LD_INT 32
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 30
18362: PUSH
18363: LD_INT 33
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: PPUSH
18375: CALL_OW 72
18379: IFFALSE 18467
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18381: LD_ADDR_VAR 0 8
18385: PUSH
18386: LD_VAR 0 18
18390: PPUSH
18391: LD_INT 2
18393: PUSH
18394: LD_INT 30
18396: PUSH
18397: LD_INT 32
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 30
18406: PUSH
18407: LD_INT 33
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: LIST
18418: PPUSH
18419: CALL_OW 72
18423: PUSH
18424: FOR_IN
18425: IFFALSE 18465
// begin if not GetBWeapon ( i ) then
18427: LD_VAR 0 8
18431: PPUSH
18432: CALL_OW 269
18436: NOT
18437: IFFALSE 18463
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18439: LD_VAR 0 8
18443: PPUSH
18444: LD_VAR 0 8
18448: PPUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: CALL 19713 0 2
18458: PPUSH
18459: CALL_OW 431
// end ;
18463: GO 18424
18465: POP
18466: POP
// end ; for i = 1 to personel do
18467: LD_ADDR_VAR 0 8
18471: PUSH
18472: DOUBLE
18473: LD_INT 1
18475: DEC
18476: ST_TO_ADDR
18477: LD_VAR 0 6
18481: PUSH
18482: FOR_TO
18483: IFFALSE 19547
// begin if i > 4 then
18485: LD_VAR 0 8
18489: PUSH
18490: LD_INT 4
18492: GREATER
18493: IFFALSE 18497
// break ;
18495: GO 19547
// case i of 1 :
18497: LD_VAR 0 8
18501: PUSH
18502: LD_INT 1
18504: DOUBLE
18505: EQUAL
18506: IFTRUE 18510
18508: GO 18590
18510: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18511: LD_ADDR_VAR 0 12
18515: PUSH
18516: LD_VAR 0 18
18520: PPUSH
18521: LD_INT 22
18523: PUSH
18524: LD_VAR 0 16
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 58
18535: PUSH
18536: EMPTY
18537: LIST
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: LD_INT 30
18544: PUSH
18545: LD_INT 32
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 30
18554: PUSH
18555: LD_INT 4
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 5
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: PPUSH
18583: CALL_OW 72
18587: ST_TO_ADDR
18588: GO 18812
18590: LD_INT 2
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18660
18598: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18599: LD_ADDR_VAR 0 12
18603: PUSH
18604: LD_VAR 0 18
18608: PPUSH
18609: LD_INT 22
18611: PUSH
18612: LD_VAR 0 16
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 2
18623: PUSH
18624: LD_INT 30
18626: PUSH
18627: LD_INT 0
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 30
18636: PUSH
18637: LD_INT 1
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PPUSH
18653: CALL_OW 72
18657: ST_TO_ADDR
18658: GO 18812
18660: LD_INT 3
18662: DOUBLE
18663: EQUAL
18664: IFTRUE 18668
18666: GO 18730
18668: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18669: LD_ADDR_VAR 0 12
18673: PUSH
18674: LD_VAR 0 18
18678: PPUSH
18679: LD_INT 22
18681: PUSH
18682: LD_VAR 0 16
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: LD_INT 30
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 30
18706: PUSH
18707: LD_INT 3
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PPUSH
18723: CALL_OW 72
18727: ST_TO_ADDR
18728: GO 18812
18730: LD_INT 4
18732: DOUBLE
18733: EQUAL
18734: IFTRUE 18738
18736: GO 18811
18738: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18739: LD_ADDR_VAR 0 12
18743: PUSH
18744: LD_VAR 0 18
18748: PPUSH
18749: LD_INT 22
18751: PUSH
18752: LD_VAR 0 16
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 2
18763: PUSH
18764: LD_INT 30
18766: PUSH
18767: LD_INT 6
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 30
18776: PUSH
18777: LD_INT 7
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 30
18786: PUSH
18787: LD_INT 8
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PPUSH
18804: CALL_OW 72
18808: ST_TO_ADDR
18809: GO 18812
18811: POP
// if i = 1 then
18812: LD_VAR 0 8
18816: PUSH
18817: LD_INT 1
18819: EQUAL
18820: IFFALSE 18931
// begin tmp := [ ] ;
18822: LD_ADDR_VAR 0 19
18826: PUSH
18827: EMPTY
18828: ST_TO_ADDR
// for j in f do
18829: LD_ADDR_VAR 0 9
18833: PUSH
18834: LD_VAR 0 12
18838: PUSH
18839: FOR_IN
18840: IFFALSE 18913
// if GetBType ( j ) = b_bunker then
18842: LD_VAR 0 9
18846: PPUSH
18847: CALL_OW 266
18851: PUSH
18852: LD_INT 32
18854: EQUAL
18855: IFFALSE 18882
// tmp := Insert ( tmp , 1 , j ) else
18857: LD_ADDR_VAR 0 19
18861: PUSH
18862: LD_VAR 0 19
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: LD_VAR 0 9
18874: PPUSH
18875: CALL_OW 2
18879: ST_TO_ADDR
18880: GO 18911
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18882: LD_ADDR_VAR 0 19
18886: PUSH
18887: LD_VAR 0 19
18891: PPUSH
18892: LD_VAR 0 19
18896: PUSH
18897: LD_INT 1
18899: PLUS
18900: PPUSH
18901: LD_VAR 0 9
18905: PPUSH
18906: CALL_OW 2
18910: ST_TO_ADDR
18911: GO 18839
18913: POP
18914: POP
// if tmp then
18915: LD_VAR 0 19
18919: IFFALSE 18931
// f := tmp ;
18921: LD_ADDR_VAR 0 12
18925: PUSH
18926: LD_VAR 0 19
18930: ST_TO_ADDR
// end ; x := personel [ i ] ;
18931: LD_ADDR_VAR 0 13
18935: PUSH
18936: LD_VAR 0 6
18940: PUSH
18941: LD_VAR 0 8
18945: ARRAY
18946: ST_TO_ADDR
// if x = - 1 then
18947: LD_VAR 0 13
18951: PUSH
18952: LD_INT 1
18954: NEG
18955: EQUAL
18956: IFFALSE 19165
// begin for j in f do
18958: LD_ADDR_VAR 0 9
18962: PUSH
18963: LD_VAR 0 12
18967: PUSH
18968: FOR_IN
18969: IFFALSE 19161
// repeat InitHc ;
18971: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18975: LD_VAR 0 9
18979: PPUSH
18980: CALL_OW 266
18984: PUSH
18985: LD_INT 5
18987: EQUAL
18988: IFFALSE 19058
// begin if UnitsInside ( j ) < 3 then
18990: LD_VAR 0 9
18994: PPUSH
18995: CALL_OW 313
18999: PUSH
19000: LD_INT 3
19002: LESS
19003: IFFALSE 19039
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19005: LD_INT 0
19007: PPUSH
19008: LD_INT 5
19010: PUSH
19011: LD_INT 8
19013: PUSH
19014: LD_INT 9
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: LD_VAR 0 17
19026: ARRAY
19027: PPUSH
19028: LD_VAR 0 4
19032: PPUSH
19033: CALL_OW 380
19037: GO 19056
// PrepareHuman ( false , i , skill ) ;
19039: LD_INT 0
19041: PPUSH
19042: LD_VAR 0 8
19046: PPUSH
19047: LD_VAR 0 4
19051: PPUSH
19052: CALL_OW 380
// end else
19056: GO 19075
// PrepareHuman ( false , i , skill ) ;
19058: LD_INT 0
19060: PPUSH
19061: LD_VAR 0 8
19065: PPUSH
19066: LD_VAR 0 4
19070: PPUSH
19071: CALL_OW 380
// un := CreateHuman ;
19075: LD_ADDR_VAR 0 14
19079: PUSH
19080: CALL_OW 44
19084: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19085: LD_ADDR_VAR 0 7
19089: PUSH
19090: LD_VAR 0 7
19094: PPUSH
19095: LD_INT 1
19097: PPUSH
19098: LD_VAR 0 14
19102: PPUSH
19103: CALL_OW 2
19107: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19108: LD_VAR 0 14
19112: PPUSH
19113: LD_VAR 0 9
19117: PPUSH
19118: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19122: LD_VAR 0 9
19126: PPUSH
19127: CALL_OW 313
19131: PUSH
19132: LD_INT 6
19134: EQUAL
19135: PUSH
19136: LD_VAR 0 9
19140: PPUSH
19141: CALL_OW 266
19145: PUSH
19146: LD_INT 32
19148: PUSH
19149: LD_INT 31
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: IN
19156: OR
19157: IFFALSE 18971
19159: GO 18968
19161: POP
19162: POP
// end else
19163: GO 19545
// for j = 1 to x do
19165: LD_ADDR_VAR 0 9
19169: PUSH
19170: DOUBLE
19171: LD_INT 1
19173: DEC
19174: ST_TO_ADDR
19175: LD_VAR 0 13
19179: PUSH
19180: FOR_TO
19181: IFFALSE 19543
// begin InitHc ;
19183: CALL_OW 19
// if not f then
19187: LD_VAR 0 12
19191: NOT
19192: IFFALSE 19281
// begin PrepareHuman ( false , i , skill ) ;
19194: LD_INT 0
19196: PPUSH
19197: LD_VAR 0 8
19201: PPUSH
19202: LD_VAR 0 4
19206: PPUSH
19207: CALL_OW 380
// un := CreateHuman ;
19211: LD_ADDR_VAR 0 14
19215: PUSH
19216: CALL_OW 44
19220: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19221: LD_ADDR_VAR 0 7
19225: PUSH
19226: LD_VAR 0 7
19230: PPUSH
19231: LD_INT 1
19233: PPUSH
19234: LD_VAR 0 14
19238: PPUSH
19239: CALL_OW 2
19243: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19244: LD_VAR 0 14
19248: PPUSH
19249: LD_VAR 0 1
19253: PPUSH
19254: CALL_OW 250
19258: PPUSH
19259: LD_VAR 0 1
19263: PPUSH
19264: CALL_OW 251
19268: PPUSH
19269: LD_INT 10
19271: PPUSH
19272: LD_INT 0
19274: PPUSH
19275: CALL_OW 50
// continue ;
19279: GO 19180
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19281: LD_VAR 0 12
19285: PUSH
19286: LD_INT 1
19288: ARRAY
19289: PPUSH
19290: CALL_OW 313
19294: PUSH
19295: LD_VAR 0 12
19299: PUSH
19300: LD_INT 1
19302: ARRAY
19303: PPUSH
19304: CALL_OW 266
19308: PUSH
19309: LD_INT 32
19311: PUSH
19312: LD_INT 31
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: IN
19319: AND
19320: PUSH
19321: LD_VAR 0 12
19325: PUSH
19326: LD_INT 1
19328: ARRAY
19329: PPUSH
19330: CALL_OW 313
19334: PUSH
19335: LD_INT 6
19337: EQUAL
19338: OR
19339: IFFALSE 19359
// f := Delete ( f , 1 ) ;
19341: LD_ADDR_VAR 0 12
19345: PUSH
19346: LD_VAR 0 12
19350: PPUSH
19351: LD_INT 1
19353: PPUSH
19354: CALL_OW 3
19358: ST_TO_ADDR
// if not f then
19359: LD_VAR 0 12
19363: NOT
19364: IFFALSE 19382
// begin x := x + 2 ;
19366: LD_ADDR_VAR 0 13
19370: PUSH
19371: LD_VAR 0 13
19375: PUSH
19376: LD_INT 2
19378: PLUS
19379: ST_TO_ADDR
// continue ;
19380: GO 19180
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19382: LD_VAR 0 12
19386: PUSH
19387: LD_INT 1
19389: ARRAY
19390: PPUSH
19391: CALL_OW 266
19395: PUSH
19396: LD_INT 5
19398: EQUAL
19399: IFFALSE 19473
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19401: LD_VAR 0 12
19405: PUSH
19406: LD_INT 1
19408: ARRAY
19409: PPUSH
19410: CALL_OW 313
19414: PUSH
19415: LD_INT 3
19417: LESS
19418: IFFALSE 19454
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19420: LD_INT 0
19422: PPUSH
19423: LD_INT 5
19425: PUSH
19426: LD_INT 8
19428: PUSH
19429: LD_INT 9
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: PUSH
19437: LD_VAR 0 17
19441: ARRAY
19442: PPUSH
19443: LD_VAR 0 4
19447: PPUSH
19448: CALL_OW 380
19452: GO 19471
// PrepareHuman ( false , i , skill ) ;
19454: LD_INT 0
19456: PPUSH
19457: LD_VAR 0 8
19461: PPUSH
19462: LD_VAR 0 4
19466: PPUSH
19467: CALL_OW 380
// end else
19471: GO 19490
// PrepareHuman ( false , i , skill ) ;
19473: LD_INT 0
19475: PPUSH
19476: LD_VAR 0 8
19480: PPUSH
19481: LD_VAR 0 4
19485: PPUSH
19486: CALL_OW 380
// un := CreateHuman ;
19490: LD_ADDR_VAR 0 14
19494: PUSH
19495: CALL_OW 44
19499: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19500: LD_ADDR_VAR 0 7
19504: PUSH
19505: LD_VAR 0 7
19509: PPUSH
19510: LD_INT 1
19512: PPUSH
19513: LD_VAR 0 14
19517: PPUSH
19518: CALL_OW 2
19522: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19523: LD_VAR 0 14
19527: PPUSH
19528: LD_VAR 0 12
19532: PUSH
19533: LD_INT 1
19535: ARRAY
19536: PPUSH
19537: CALL_OW 52
// end ;
19541: GO 19180
19543: POP
19544: POP
// end ;
19545: GO 18482
19547: POP
19548: POP
// result := result ^ buildings ;
19549: LD_ADDR_VAR 0 7
19553: PUSH
19554: LD_VAR 0 7
19558: PUSH
19559: LD_VAR 0 18
19563: ADD
19564: ST_TO_ADDR
// end else
19565: GO 19708
// begin for i = 1 to personel do
19567: LD_ADDR_VAR 0 8
19571: PUSH
19572: DOUBLE
19573: LD_INT 1
19575: DEC
19576: ST_TO_ADDR
19577: LD_VAR 0 6
19581: PUSH
19582: FOR_TO
19583: IFFALSE 19706
// begin if i > 4 then
19585: LD_VAR 0 8
19589: PUSH
19590: LD_INT 4
19592: GREATER
19593: IFFALSE 19597
// break ;
19595: GO 19706
// x := personel [ i ] ;
19597: LD_ADDR_VAR 0 13
19601: PUSH
19602: LD_VAR 0 6
19606: PUSH
19607: LD_VAR 0 8
19611: ARRAY
19612: ST_TO_ADDR
// if x = - 1 then
19613: LD_VAR 0 13
19617: PUSH
19618: LD_INT 1
19620: NEG
19621: EQUAL
19622: IFFALSE 19626
// continue ;
19624: GO 19582
// PrepareHuman ( false , i , skill ) ;
19626: LD_INT 0
19628: PPUSH
19629: LD_VAR 0 8
19633: PPUSH
19634: LD_VAR 0 4
19638: PPUSH
19639: CALL_OW 380
// un := CreateHuman ;
19643: LD_ADDR_VAR 0 14
19647: PUSH
19648: CALL_OW 44
19652: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19653: LD_VAR 0 14
19657: PPUSH
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 250
19667: PPUSH
19668: LD_VAR 0 1
19672: PPUSH
19673: CALL_OW 251
19677: PPUSH
19678: LD_INT 10
19680: PPUSH
19681: LD_INT 0
19683: PPUSH
19684: CALL_OW 50
// result := result ^ un ;
19688: LD_ADDR_VAR 0 7
19692: PUSH
19693: LD_VAR 0 7
19697: PUSH
19698: LD_VAR 0 14
19702: ADD
19703: ST_TO_ADDR
// end ;
19704: GO 19582
19706: POP
19707: POP
// end ; end ;
19708: LD_VAR 0 7
19712: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19713: LD_INT 0
19715: PPUSH
19716: PPUSH
19717: PPUSH
19718: PPUSH
19719: PPUSH
19720: PPUSH
19721: PPUSH
19722: PPUSH
19723: PPUSH
19724: PPUSH
19725: PPUSH
19726: PPUSH
19727: PPUSH
19728: PPUSH
19729: PPUSH
19730: PPUSH
// result := false ;
19731: LD_ADDR_VAR 0 3
19735: PUSH
19736: LD_INT 0
19738: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19739: LD_VAR 0 1
19743: NOT
19744: PUSH
19745: LD_VAR 0 1
19749: PPUSH
19750: CALL_OW 266
19754: PUSH
19755: LD_INT 32
19757: PUSH
19758: LD_INT 33
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: IN
19765: NOT
19766: OR
19767: IFFALSE 19771
// exit ;
19769: GO 20880
// nat := GetNation ( tower ) ;
19771: LD_ADDR_VAR 0 12
19775: PUSH
19776: LD_VAR 0 1
19780: PPUSH
19781: CALL_OW 248
19785: ST_TO_ADDR
// side := GetSide ( tower ) ;
19786: LD_ADDR_VAR 0 16
19790: PUSH
19791: LD_VAR 0 1
19795: PPUSH
19796: CALL_OW 255
19800: ST_TO_ADDR
// x := GetX ( tower ) ;
19801: LD_ADDR_VAR 0 10
19805: PUSH
19806: LD_VAR 0 1
19810: PPUSH
19811: CALL_OW 250
19815: ST_TO_ADDR
// y := GetY ( tower ) ;
19816: LD_ADDR_VAR 0 11
19820: PUSH
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 251
19830: ST_TO_ADDR
// if not x or not y then
19831: LD_VAR 0 10
19835: NOT
19836: PUSH
19837: LD_VAR 0 11
19841: NOT
19842: OR
19843: IFFALSE 19847
// exit ;
19845: GO 20880
// weapon := 0 ;
19847: LD_ADDR_VAR 0 18
19851: PUSH
19852: LD_INT 0
19854: ST_TO_ADDR
// fac_list := [ ] ;
19855: LD_ADDR_VAR 0 17
19859: PUSH
19860: EMPTY
19861: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19862: LD_ADDR_VAR 0 6
19866: PUSH
19867: LD_VAR 0 1
19871: PPUSH
19872: CALL_OW 274
19876: PPUSH
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_INT 0
19884: PPUSH
19885: CALL 17451 0 3
19889: PPUSH
19890: LD_INT 30
19892: PUSH
19893: LD_INT 3
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PPUSH
19900: CALL_OW 72
19904: ST_TO_ADDR
// if not factories then
19905: LD_VAR 0 6
19909: NOT
19910: IFFALSE 19914
// exit ;
19912: GO 20880
// for i in factories do
19914: LD_ADDR_VAR 0 8
19918: PUSH
19919: LD_VAR 0 6
19923: PUSH
19924: FOR_IN
19925: IFFALSE 19950
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19927: LD_ADDR_VAR 0 17
19931: PUSH
19932: LD_VAR 0 17
19936: PUSH
19937: LD_VAR 0 8
19941: PPUSH
19942: CALL_OW 478
19946: UNION
19947: ST_TO_ADDR
19948: GO 19924
19950: POP
19951: POP
// if not fac_list then
19952: LD_VAR 0 17
19956: NOT
19957: IFFALSE 19961
// exit ;
19959: GO 20880
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19961: LD_ADDR_VAR 0 5
19965: PUSH
19966: LD_INT 4
19968: PUSH
19969: LD_INT 5
19971: PUSH
19972: LD_INT 9
19974: PUSH
19975: LD_INT 10
19977: PUSH
19978: LD_INT 6
19980: PUSH
19981: LD_INT 7
19983: PUSH
19984: LD_INT 11
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: PUSH
19996: LD_INT 27
19998: PUSH
19999: LD_INT 28
20001: PUSH
20002: LD_INT 26
20004: PUSH
20005: LD_INT 30
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 43
20016: PUSH
20017: LD_INT 44
20019: PUSH
20020: LD_INT 46
20022: PUSH
20023: LD_INT 45
20025: PUSH
20026: LD_INT 47
20028: PUSH
20029: LD_INT 49
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: PUSH
20045: LD_VAR 0 12
20049: ARRAY
20050: ST_TO_ADDR
// list := list isect fac_list ;
20051: LD_ADDR_VAR 0 5
20055: PUSH
20056: LD_VAR 0 5
20060: PUSH
20061: LD_VAR 0 17
20065: ISECT
20066: ST_TO_ADDR
// if not list then
20067: LD_VAR 0 5
20071: NOT
20072: IFFALSE 20076
// exit ;
20074: GO 20880
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20076: LD_VAR 0 12
20080: PUSH
20081: LD_INT 3
20083: EQUAL
20084: PUSH
20085: LD_INT 49
20087: PUSH
20088: LD_VAR 0 5
20092: IN
20093: AND
20094: PUSH
20095: LD_INT 31
20097: PPUSH
20098: LD_VAR 0 16
20102: PPUSH
20103: CALL_OW 321
20107: PUSH
20108: LD_INT 2
20110: EQUAL
20111: AND
20112: IFFALSE 20172
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20114: LD_INT 22
20116: PUSH
20117: LD_VAR 0 16
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 35
20128: PUSH
20129: LD_INT 49
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 91
20138: PUSH
20139: LD_VAR 0 1
20143: PUSH
20144: LD_INT 10
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: LIST
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: PPUSH
20157: CALL_OW 69
20161: NOT
20162: IFFALSE 20172
// weapon := ru_time_lapser ;
20164: LD_ADDR_VAR 0 18
20168: PUSH
20169: LD_INT 49
20171: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20172: LD_VAR 0 12
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: IN
20187: PUSH
20188: LD_INT 11
20190: PUSH
20191: LD_VAR 0 5
20195: IN
20196: PUSH
20197: LD_INT 30
20199: PUSH
20200: LD_VAR 0 5
20204: IN
20205: OR
20206: AND
20207: PUSH
20208: LD_INT 6
20210: PPUSH
20211: LD_VAR 0 16
20215: PPUSH
20216: CALL_OW 321
20220: PUSH
20221: LD_INT 2
20223: EQUAL
20224: AND
20225: IFFALSE 20390
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20227: LD_INT 22
20229: PUSH
20230: LD_VAR 0 16
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: LD_INT 35
20244: PUSH
20245: LD_INT 11
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 35
20254: PUSH
20255: LD_INT 30
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 91
20269: PUSH
20270: LD_VAR 0 1
20274: PUSH
20275: LD_INT 18
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: LIST
20287: PPUSH
20288: CALL_OW 69
20292: NOT
20293: PUSH
20294: LD_INT 22
20296: PUSH
20297: LD_VAR 0 16
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 30
20311: PUSH
20312: LD_INT 32
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 30
20321: PUSH
20322: LD_INT 33
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 91
20336: PUSH
20337: LD_VAR 0 1
20341: PUSH
20342: LD_INT 12
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: PPUSH
20358: CALL_OW 69
20362: PUSH
20363: LD_INT 2
20365: GREATER
20366: AND
20367: IFFALSE 20390
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20369: LD_ADDR_VAR 0 18
20373: PUSH
20374: LD_INT 11
20376: PUSH
20377: LD_INT 30
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_VAR 0 12
20388: ARRAY
20389: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20390: LD_VAR 0 18
20394: NOT
20395: PUSH
20396: LD_INT 40
20398: PPUSH
20399: LD_VAR 0 16
20403: PPUSH
20404: CALL_OW 321
20408: PUSH
20409: LD_INT 2
20411: EQUAL
20412: AND
20413: PUSH
20414: LD_INT 7
20416: PUSH
20417: LD_VAR 0 5
20421: IN
20422: PUSH
20423: LD_INT 28
20425: PUSH
20426: LD_VAR 0 5
20430: IN
20431: OR
20432: PUSH
20433: LD_INT 45
20435: PUSH
20436: LD_VAR 0 5
20440: IN
20441: OR
20442: AND
20443: IFFALSE 20697
// begin hex := GetHexInfo ( x , y ) ;
20445: LD_ADDR_VAR 0 4
20449: PUSH
20450: LD_VAR 0 10
20454: PPUSH
20455: LD_VAR 0 11
20459: PPUSH
20460: CALL_OW 546
20464: ST_TO_ADDR
// if hex [ 1 ] then
20465: LD_VAR 0 4
20469: PUSH
20470: LD_INT 1
20472: ARRAY
20473: IFFALSE 20477
// exit ;
20475: GO 20880
// height := hex [ 2 ] ;
20477: LD_ADDR_VAR 0 15
20481: PUSH
20482: LD_VAR 0 4
20486: PUSH
20487: LD_INT 2
20489: ARRAY
20490: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20491: LD_ADDR_VAR 0 14
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 3
20504: PUSH
20505: LD_INT 5
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: ST_TO_ADDR
// for i in tmp do
20514: LD_ADDR_VAR 0 8
20518: PUSH
20519: LD_VAR 0 14
20523: PUSH
20524: FOR_IN
20525: IFFALSE 20695
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20527: LD_ADDR_VAR 0 9
20531: PUSH
20532: LD_VAR 0 10
20536: PPUSH
20537: LD_VAR 0 8
20541: PPUSH
20542: LD_INT 5
20544: PPUSH
20545: CALL_OW 272
20549: PUSH
20550: LD_VAR 0 11
20554: PPUSH
20555: LD_VAR 0 8
20559: PPUSH
20560: LD_INT 5
20562: PPUSH
20563: CALL_OW 273
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20572: LD_VAR 0 9
20576: PUSH
20577: LD_INT 1
20579: ARRAY
20580: PPUSH
20581: LD_VAR 0 9
20585: PUSH
20586: LD_INT 2
20588: ARRAY
20589: PPUSH
20590: CALL_OW 488
20594: IFFALSE 20693
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20596: LD_ADDR_VAR 0 4
20600: PUSH
20601: LD_VAR 0 9
20605: PUSH
20606: LD_INT 1
20608: ARRAY
20609: PPUSH
20610: LD_VAR 0 9
20614: PUSH
20615: LD_INT 2
20617: ARRAY
20618: PPUSH
20619: CALL_OW 546
20623: ST_TO_ADDR
// if hex [ 1 ] then
20624: LD_VAR 0 4
20628: PUSH
20629: LD_INT 1
20631: ARRAY
20632: IFFALSE 20636
// continue ;
20634: GO 20524
// h := hex [ 2 ] ;
20636: LD_ADDR_VAR 0 13
20640: PUSH
20641: LD_VAR 0 4
20645: PUSH
20646: LD_INT 2
20648: ARRAY
20649: ST_TO_ADDR
// if h + 7 < height then
20650: LD_VAR 0 13
20654: PUSH
20655: LD_INT 7
20657: PLUS
20658: PUSH
20659: LD_VAR 0 15
20663: LESS
20664: IFFALSE 20693
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20666: LD_ADDR_VAR 0 18
20670: PUSH
20671: LD_INT 7
20673: PUSH
20674: LD_INT 28
20676: PUSH
20677: LD_INT 45
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: LD_VAR 0 12
20689: ARRAY
20690: ST_TO_ADDR
// break ;
20691: GO 20695
// end ; end ; end ;
20693: GO 20524
20695: POP
20696: POP
// end ; if not weapon then
20697: LD_VAR 0 18
20701: NOT
20702: IFFALSE 20762
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20704: LD_ADDR_VAR 0 5
20708: PUSH
20709: LD_VAR 0 5
20713: PUSH
20714: LD_INT 11
20716: PUSH
20717: LD_INT 30
20719: PUSH
20720: LD_INT 49
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: DIFF
20728: ST_TO_ADDR
// if not list then
20729: LD_VAR 0 5
20733: NOT
20734: IFFALSE 20738
// exit ;
20736: GO 20880
// weapon := list [ rand ( 1 , list ) ] ;
20738: LD_ADDR_VAR 0 18
20742: PUSH
20743: LD_VAR 0 5
20747: PUSH
20748: LD_INT 1
20750: PPUSH
20751: LD_VAR 0 5
20755: PPUSH
20756: CALL_OW 12
20760: ARRAY
20761: ST_TO_ADDR
// end ; if weapon then
20762: LD_VAR 0 18
20766: IFFALSE 20880
// begin tmp := CostOfWeapon ( weapon ) ;
20768: LD_ADDR_VAR 0 14
20772: PUSH
20773: LD_VAR 0 18
20777: PPUSH
20778: CALL_OW 451
20782: ST_TO_ADDR
// j := GetBase ( tower ) ;
20783: LD_ADDR_VAR 0 9
20787: PUSH
20788: LD_VAR 0 1
20792: PPUSH
20793: CALL_OW 274
20797: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20798: LD_VAR 0 9
20802: PPUSH
20803: LD_INT 1
20805: PPUSH
20806: CALL_OW 275
20810: PUSH
20811: LD_VAR 0 14
20815: PUSH
20816: LD_INT 1
20818: ARRAY
20819: GREATEREQUAL
20820: PUSH
20821: LD_VAR 0 9
20825: PPUSH
20826: LD_INT 2
20828: PPUSH
20829: CALL_OW 275
20833: PUSH
20834: LD_VAR 0 14
20838: PUSH
20839: LD_INT 2
20841: ARRAY
20842: GREATEREQUAL
20843: AND
20844: PUSH
20845: LD_VAR 0 9
20849: PPUSH
20850: LD_INT 3
20852: PPUSH
20853: CALL_OW 275
20857: PUSH
20858: LD_VAR 0 14
20862: PUSH
20863: LD_INT 3
20865: ARRAY
20866: GREATEREQUAL
20867: AND
20868: IFFALSE 20880
// result := weapon ;
20870: LD_ADDR_VAR 0 3
20874: PUSH
20875: LD_VAR 0 18
20879: ST_TO_ADDR
// end ; end ;
20880: LD_VAR 0 3
20884: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20885: LD_INT 0
20887: PPUSH
20888: PPUSH
// result := true ;
20889: LD_ADDR_VAR 0 3
20893: PUSH
20894: LD_INT 1
20896: ST_TO_ADDR
// if array1 = array2 then
20897: LD_VAR 0 1
20901: PUSH
20902: LD_VAR 0 2
20906: EQUAL
20907: IFFALSE 20967
// begin for i = 1 to array1 do
20909: LD_ADDR_VAR 0 4
20913: PUSH
20914: DOUBLE
20915: LD_INT 1
20917: DEC
20918: ST_TO_ADDR
20919: LD_VAR 0 1
20923: PUSH
20924: FOR_TO
20925: IFFALSE 20963
// if array1 [ i ] <> array2 [ i ] then
20927: LD_VAR 0 1
20931: PUSH
20932: LD_VAR 0 4
20936: ARRAY
20937: PUSH
20938: LD_VAR 0 2
20942: PUSH
20943: LD_VAR 0 4
20947: ARRAY
20948: NONEQUAL
20949: IFFALSE 20961
// begin result := false ;
20951: LD_ADDR_VAR 0 3
20955: PUSH
20956: LD_INT 0
20958: ST_TO_ADDR
// break ;
20959: GO 20963
// end ;
20961: GO 20924
20963: POP
20964: POP
// end else
20965: GO 20975
// result := false ;
20967: LD_ADDR_VAR 0 3
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
// end ;
20975: LD_VAR 0 3
20979: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20980: LD_INT 0
20982: PPUSH
20983: PPUSH
// if not array1 or not array2 then
20984: LD_VAR 0 1
20988: NOT
20989: PUSH
20990: LD_VAR 0 2
20994: NOT
20995: OR
20996: IFFALSE 21000
// exit ;
20998: GO 21064
// result := true ;
21000: LD_ADDR_VAR 0 3
21004: PUSH
21005: LD_INT 1
21007: ST_TO_ADDR
// for i = 1 to array1 do
21008: LD_ADDR_VAR 0 4
21012: PUSH
21013: DOUBLE
21014: LD_INT 1
21016: DEC
21017: ST_TO_ADDR
21018: LD_VAR 0 1
21022: PUSH
21023: FOR_TO
21024: IFFALSE 21062
// if array1 [ i ] <> array2 [ i ] then
21026: LD_VAR 0 1
21030: PUSH
21031: LD_VAR 0 4
21035: ARRAY
21036: PUSH
21037: LD_VAR 0 2
21041: PUSH
21042: LD_VAR 0 4
21046: ARRAY
21047: NONEQUAL
21048: IFFALSE 21060
// begin result := false ;
21050: LD_ADDR_VAR 0 3
21054: PUSH
21055: LD_INT 0
21057: ST_TO_ADDR
// break ;
21058: GO 21062
// end ;
21060: GO 21023
21062: POP
21063: POP
// end ;
21064: LD_VAR 0 3
21068: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21069: LD_INT 0
21071: PPUSH
21072: PPUSH
21073: PPUSH
// pom := GetBase ( fac ) ;
21074: LD_ADDR_VAR 0 5
21078: PUSH
21079: LD_VAR 0 1
21083: PPUSH
21084: CALL_OW 274
21088: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21089: LD_ADDR_VAR 0 4
21093: PUSH
21094: LD_VAR 0 2
21098: PUSH
21099: LD_INT 1
21101: ARRAY
21102: PPUSH
21103: LD_VAR 0 2
21107: PUSH
21108: LD_INT 2
21110: ARRAY
21111: PPUSH
21112: LD_VAR 0 2
21116: PUSH
21117: LD_INT 3
21119: ARRAY
21120: PPUSH
21121: LD_VAR 0 2
21125: PUSH
21126: LD_INT 4
21128: ARRAY
21129: PPUSH
21130: CALL_OW 449
21134: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21135: LD_ADDR_VAR 0 3
21139: PUSH
21140: LD_VAR 0 5
21144: PPUSH
21145: LD_INT 1
21147: PPUSH
21148: CALL_OW 275
21152: PUSH
21153: LD_VAR 0 4
21157: PUSH
21158: LD_INT 1
21160: ARRAY
21161: GREATEREQUAL
21162: PUSH
21163: LD_VAR 0 5
21167: PPUSH
21168: LD_INT 2
21170: PPUSH
21171: CALL_OW 275
21175: PUSH
21176: LD_VAR 0 4
21180: PUSH
21181: LD_INT 2
21183: ARRAY
21184: GREATEREQUAL
21185: AND
21186: PUSH
21187: LD_VAR 0 5
21191: PPUSH
21192: LD_INT 3
21194: PPUSH
21195: CALL_OW 275
21199: PUSH
21200: LD_VAR 0 4
21204: PUSH
21205: LD_INT 3
21207: ARRAY
21208: GREATEREQUAL
21209: AND
21210: ST_TO_ADDR
// end ;
21211: LD_VAR 0 3
21215: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21216: LD_INT 0
21218: PPUSH
21219: PPUSH
21220: PPUSH
21221: PPUSH
// pom := GetBase ( building ) ;
21222: LD_ADDR_VAR 0 3
21226: PUSH
21227: LD_VAR 0 1
21231: PPUSH
21232: CALL_OW 274
21236: ST_TO_ADDR
// if not pom then
21237: LD_VAR 0 3
21241: NOT
21242: IFFALSE 21246
// exit ;
21244: GO 21416
// btype := GetBType ( building ) ;
21246: LD_ADDR_VAR 0 5
21250: PUSH
21251: LD_VAR 0 1
21255: PPUSH
21256: CALL_OW 266
21260: ST_TO_ADDR
// if btype = b_armoury then
21261: LD_VAR 0 5
21265: PUSH
21266: LD_INT 4
21268: EQUAL
21269: IFFALSE 21279
// btype := b_barracks ;
21271: LD_ADDR_VAR 0 5
21275: PUSH
21276: LD_INT 5
21278: ST_TO_ADDR
// if btype = b_depot then
21279: LD_VAR 0 5
21283: PUSH
21284: LD_INT 0
21286: EQUAL
21287: IFFALSE 21297
// btype := b_warehouse ;
21289: LD_ADDR_VAR 0 5
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// if btype = b_workshop then
21297: LD_VAR 0 5
21301: PUSH
21302: LD_INT 2
21304: EQUAL
21305: IFFALSE 21315
// btype := b_factory ;
21307: LD_ADDR_VAR 0 5
21311: PUSH
21312: LD_INT 3
21314: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21315: LD_ADDR_VAR 0 4
21319: PUSH
21320: LD_VAR 0 5
21324: PPUSH
21325: LD_VAR 0 1
21329: PPUSH
21330: CALL_OW 248
21334: PPUSH
21335: CALL_OW 450
21339: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21340: LD_ADDR_VAR 0 2
21344: PUSH
21345: LD_VAR 0 3
21349: PPUSH
21350: LD_INT 1
21352: PPUSH
21353: CALL_OW 275
21357: PUSH
21358: LD_VAR 0 4
21362: PUSH
21363: LD_INT 1
21365: ARRAY
21366: GREATEREQUAL
21367: PUSH
21368: LD_VAR 0 3
21372: PPUSH
21373: LD_INT 2
21375: PPUSH
21376: CALL_OW 275
21380: PUSH
21381: LD_VAR 0 4
21385: PUSH
21386: LD_INT 2
21388: ARRAY
21389: GREATEREQUAL
21390: AND
21391: PUSH
21392: LD_VAR 0 3
21396: PPUSH
21397: LD_INT 3
21399: PPUSH
21400: CALL_OW 275
21404: PUSH
21405: LD_VAR 0 4
21409: PUSH
21410: LD_INT 3
21412: ARRAY
21413: GREATEREQUAL
21414: AND
21415: ST_TO_ADDR
// end ;
21416: LD_VAR 0 2
21420: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21421: LD_INT 0
21423: PPUSH
21424: PPUSH
21425: PPUSH
// pom := GetBase ( building ) ;
21426: LD_ADDR_VAR 0 4
21430: PUSH
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 274
21440: ST_TO_ADDR
// if not pom then
21441: LD_VAR 0 4
21445: NOT
21446: IFFALSE 21450
// exit ;
21448: GO 21551
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21450: LD_ADDR_VAR 0 5
21454: PUSH
21455: LD_VAR 0 2
21459: PPUSH
21460: LD_VAR 0 1
21464: PPUSH
21465: CALL_OW 248
21469: PPUSH
21470: CALL_OW 450
21474: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21475: LD_ADDR_VAR 0 3
21479: PUSH
21480: LD_VAR 0 4
21484: PPUSH
21485: LD_INT 1
21487: PPUSH
21488: CALL_OW 275
21492: PUSH
21493: LD_VAR 0 5
21497: PUSH
21498: LD_INT 1
21500: ARRAY
21501: GREATEREQUAL
21502: PUSH
21503: LD_VAR 0 4
21507: PPUSH
21508: LD_INT 2
21510: PPUSH
21511: CALL_OW 275
21515: PUSH
21516: LD_VAR 0 5
21520: PUSH
21521: LD_INT 2
21523: ARRAY
21524: GREATEREQUAL
21525: AND
21526: PUSH
21527: LD_VAR 0 4
21531: PPUSH
21532: LD_INT 3
21534: PPUSH
21535: CALL_OW 275
21539: PUSH
21540: LD_VAR 0 5
21544: PUSH
21545: LD_INT 3
21547: ARRAY
21548: GREATEREQUAL
21549: AND
21550: ST_TO_ADDR
// end ;
21551: LD_VAR 0 3
21555: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21556: LD_INT 0
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
21567: PPUSH
21568: PPUSH
// result := false ;
21569: LD_ADDR_VAR 0 8
21573: PUSH
21574: LD_INT 0
21576: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21577: LD_VAR 0 5
21581: NOT
21582: PUSH
21583: LD_VAR 0 1
21587: NOT
21588: OR
21589: PUSH
21590: LD_VAR 0 2
21594: NOT
21595: OR
21596: PUSH
21597: LD_VAR 0 3
21601: NOT
21602: OR
21603: IFFALSE 21607
// exit ;
21605: GO 22421
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21607: LD_ADDR_VAR 0 14
21611: PUSH
21612: LD_VAR 0 1
21616: PPUSH
21617: LD_VAR 0 2
21621: PPUSH
21622: LD_VAR 0 3
21626: PPUSH
21627: LD_VAR 0 4
21631: PPUSH
21632: LD_VAR 0 5
21636: PUSH
21637: LD_INT 1
21639: ARRAY
21640: PPUSH
21641: CALL_OW 248
21645: PPUSH
21646: LD_INT 0
21648: PPUSH
21649: CALL 23674 0 6
21653: ST_TO_ADDR
// if not hexes then
21654: LD_VAR 0 14
21658: NOT
21659: IFFALSE 21663
// exit ;
21661: GO 22421
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21663: LD_ADDR_VAR 0 17
21667: PUSH
21668: LD_VAR 0 5
21672: PPUSH
21673: LD_INT 22
21675: PUSH
21676: LD_VAR 0 13
21680: PPUSH
21681: CALL_OW 255
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 2
21692: PUSH
21693: LD_INT 30
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 30
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PPUSH
21722: CALL_OW 72
21726: ST_TO_ADDR
// for i = 1 to hexes do
21727: LD_ADDR_VAR 0 9
21731: PUSH
21732: DOUBLE
21733: LD_INT 1
21735: DEC
21736: ST_TO_ADDR
21737: LD_VAR 0 14
21741: PUSH
21742: FOR_TO
21743: IFFALSE 22419
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21745: LD_ADDR_VAR 0 13
21749: PUSH
21750: LD_VAR 0 14
21754: PUSH
21755: LD_VAR 0 9
21759: ARRAY
21760: PUSH
21761: LD_INT 1
21763: ARRAY
21764: PPUSH
21765: LD_VAR 0 14
21769: PUSH
21770: LD_VAR 0 9
21774: ARRAY
21775: PUSH
21776: LD_INT 2
21778: ARRAY
21779: PPUSH
21780: CALL_OW 428
21784: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21785: LD_VAR 0 14
21789: PUSH
21790: LD_VAR 0 9
21794: ARRAY
21795: PUSH
21796: LD_INT 1
21798: ARRAY
21799: PPUSH
21800: LD_VAR 0 14
21804: PUSH
21805: LD_VAR 0 9
21809: ARRAY
21810: PUSH
21811: LD_INT 2
21813: ARRAY
21814: PPUSH
21815: CALL_OW 351
21819: PUSH
21820: LD_VAR 0 14
21824: PUSH
21825: LD_VAR 0 9
21829: ARRAY
21830: PUSH
21831: LD_INT 1
21833: ARRAY
21834: PPUSH
21835: LD_VAR 0 14
21839: PUSH
21840: LD_VAR 0 9
21844: ARRAY
21845: PUSH
21846: LD_INT 2
21848: ARRAY
21849: PPUSH
21850: CALL_OW 488
21854: NOT
21855: OR
21856: PUSH
21857: LD_VAR 0 13
21861: PPUSH
21862: CALL_OW 247
21866: PUSH
21867: LD_INT 3
21869: EQUAL
21870: OR
21871: IFFALSE 21877
// exit ;
21873: POP
21874: POP
21875: GO 22421
// if not tmp then
21877: LD_VAR 0 13
21881: NOT
21882: IFFALSE 21886
// continue ;
21884: GO 21742
// result := true ;
21886: LD_ADDR_VAR 0 8
21890: PUSH
21891: LD_INT 1
21893: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21894: LD_VAR 0 6
21898: PUSH
21899: LD_VAR 0 13
21903: PPUSH
21904: CALL_OW 247
21908: PUSH
21909: LD_INT 2
21911: EQUAL
21912: AND
21913: PUSH
21914: LD_VAR 0 13
21918: PPUSH
21919: CALL_OW 263
21923: PUSH
21924: LD_INT 1
21926: EQUAL
21927: AND
21928: IFFALSE 22092
// begin if IsDrivenBy ( tmp ) then
21930: LD_VAR 0 13
21934: PPUSH
21935: CALL_OW 311
21939: IFFALSE 21943
// continue ;
21941: GO 21742
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21943: LD_VAR 0 6
21947: PPUSH
21948: LD_INT 3
21950: PUSH
21951: LD_INT 60
21953: PUSH
21954: EMPTY
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 3
21963: PUSH
21964: LD_INT 55
21966: PUSH
21967: EMPTY
21968: LIST
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PPUSH
21978: CALL_OW 72
21982: IFFALSE 22090
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21984: LD_ADDR_VAR 0 18
21988: PUSH
21989: LD_VAR 0 6
21993: PPUSH
21994: LD_INT 3
21996: PUSH
21997: LD_INT 60
21999: PUSH
22000: EMPTY
22001: LIST
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 3
22009: PUSH
22010: LD_INT 55
22012: PUSH
22013: EMPTY
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PPUSH
22024: CALL_OW 72
22028: PUSH
22029: LD_INT 1
22031: ARRAY
22032: ST_TO_ADDR
// if IsInUnit ( driver ) then
22033: LD_VAR 0 18
22037: PPUSH
22038: CALL_OW 310
22042: IFFALSE 22053
// ComExit ( driver ) ;
22044: LD_VAR 0 18
22048: PPUSH
22049: CALL 47475 0 1
// AddComEnterUnit ( driver , tmp ) ;
22053: LD_VAR 0 18
22057: PPUSH
22058: LD_VAR 0 13
22062: PPUSH
22063: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22067: LD_VAR 0 18
22071: PPUSH
22072: LD_VAR 0 7
22076: PPUSH
22077: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22081: LD_VAR 0 18
22085: PPUSH
22086: CALL_OW 181
// end ; continue ;
22090: GO 21742
// end ; if not cleaners or not tmp in cleaners then
22092: LD_VAR 0 6
22096: NOT
22097: PUSH
22098: LD_VAR 0 13
22102: PUSH
22103: LD_VAR 0 6
22107: IN
22108: NOT
22109: OR
22110: IFFALSE 22417
// begin if dep then
22112: LD_VAR 0 17
22116: IFFALSE 22252
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22118: LD_ADDR_VAR 0 16
22122: PUSH
22123: LD_VAR 0 17
22127: PUSH
22128: LD_INT 1
22130: ARRAY
22131: PPUSH
22132: CALL_OW 250
22136: PPUSH
22137: LD_VAR 0 17
22141: PUSH
22142: LD_INT 1
22144: ARRAY
22145: PPUSH
22146: CALL_OW 254
22150: PPUSH
22151: LD_INT 5
22153: PPUSH
22154: CALL_OW 272
22158: PUSH
22159: LD_VAR 0 17
22163: PUSH
22164: LD_INT 1
22166: ARRAY
22167: PPUSH
22168: CALL_OW 251
22172: PPUSH
22173: LD_VAR 0 17
22177: PUSH
22178: LD_INT 1
22180: ARRAY
22181: PPUSH
22182: CALL_OW 254
22186: PPUSH
22187: LD_INT 5
22189: PPUSH
22190: CALL_OW 273
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22199: LD_VAR 0 16
22203: PUSH
22204: LD_INT 1
22206: ARRAY
22207: PPUSH
22208: LD_VAR 0 16
22212: PUSH
22213: LD_INT 2
22215: ARRAY
22216: PPUSH
22217: CALL_OW 488
22221: IFFALSE 22252
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22223: LD_VAR 0 13
22227: PPUSH
22228: LD_VAR 0 16
22232: PUSH
22233: LD_INT 1
22235: ARRAY
22236: PPUSH
22237: LD_VAR 0 16
22241: PUSH
22242: LD_INT 2
22244: ARRAY
22245: PPUSH
22246: CALL_OW 111
// continue ;
22250: GO 21742
// end ; end ; r := GetDir ( tmp ) ;
22252: LD_ADDR_VAR 0 15
22256: PUSH
22257: LD_VAR 0 13
22261: PPUSH
22262: CALL_OW 254
22266: ST_TO_ADDR
// if r = 5 then
22267: LD_VAR 0 15
22271: PUSH
22272: LD_INT 5
22274: EQUAL
22275: IFFALSE 22285
// r := 0 ;
22277: LD_ADDR_VAR 0 15
22281: PUSH
22282: LD_INT 0
22284: ST_TO_ADDR
// for j = r to 5 do
22285: LD_ADDR_VAR 0 10
22289: PUSH
22290: DOUBLE
22291: LD_VAR 0 15
22295: DEC
22296: ST_TO_ADDR
22297: LD_INT 5
22299: PUSH
22300: FOR_TO
22301: IFFALSE 22415
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22303: LD_ADDR_VAR 0 11
22307: PUSH
22308: LD_VAR 0 13
22312: PPUSH
22313: CALL_OW 250
22317: PPUSH
22318: LD_VAR 0 10
22322: PPUSH
22323: LD_INT 2
22325: PPUSH
22326: CALL_OW 272
22330: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22331: LD_ADDR_VAR 0 12
22335: PUSH
22336: LD_VAR 0 13
22340: PPUSH
22341: CALL_OW 251
22345: PPUSH
22346: LD_VAR 0 10
22350: PPUSH
22351: LD_INT 2
22353: PPUSH
22354: CALL_OW 273
22358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22359: LD_VAR 0 11
22363: PPUSH
22364: LD_VAR 0 12
22368: PPUSH
22369: CALL_OW 488
22373: PUSH
22374: LD_VAR 0 11
22378: PPUSH
22379: LD_VAR 0 12
22383: PPUSH
22384: CALL_OW 428
22388: NOT
22389: AND
22390: IFFALSE 22413
// begin ComMoveXY ( tmp , _x , _y ) ;
22392: LD_VAR 0 13
22396: PPUSH
22397: LD_VAR 0 11
22401: PPUSH
22402: LD_VAR 0 12
22406: PPUSH
22407: CALL_OW 111
// break ;
22411: GO 22415
// end ; end ;
22413: GO 22300
22415: POP
22416: POP
// end ; end ;
22417: GO 21742
22419: POP
22420: POP
// end ;
22421: LD_VAR 0 8
22425: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22426: LD_INT 0
22428: PPUSH
// result := true ;
22429: LD_ADDR_VAR 0 3
22433: PUSH
22434: LD_INT 1
22436: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22437: LD_VAR 0 2
22441: PUSH
22442: LD_INT 24
22444: DOUBLE
22445: EQUAL
22446: IFTRUE 22456
22448: LD_INT 33
22450: DOUBLE
22451: EQUAL
22452: IFTRUE 22456
22454: GO 22481
22456: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22457: LD_ADDR_VAR 0 3
22461: PUSH
22462: LD_INT 32
22464: PPUSH
22465: LD_VAR 0 1
22469: PPUSH
22470: CALL_OW 321
22474: PUSH
22475: LD_INT 2
22477: EQUAL
22478: ST_TO_ADDR
22479: GO 22797
22481: LD_INT 20
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22514
22489: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22490: LD_ADDR_VAR 0 3
22494: PUSH
22495: LD_INT 6
22497: PPUSH
22498: LD_VAR 0 1
22502: PPUSH
22503: CALL_OW 321
22507: PUSH
22508: LD_INT 2
22510: EQUAL
22511: ST_TO_ADDR
22512: GO 22797
22514: LD_INT 22
22516: DOUBLE
22517: EQUAL
22518: IFTRUE 22528
22520: LD_INT 36
22522: DOUBLE
22523: EQUAL
22524: IFTRUE 22528
22526: GO 22553
22528: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22529: LD_ADDR_VAR 0 3
22533: PUSH
22534: LD_INT 15
22536: PPUSH
22537: LD_VAR 0 1
22541: PPUSH
22542: CALL_OW 321
22546: PUSH
22547: LD_INT 2
22549: EQUAL
22550: ST_TO_ADDR
22551: GO 22797
22553: LD_INT 30
22555: DOUBLE
22556: EQUAL
22557: IFTRUE 22561
22559: GO 22586
22561: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22562: LD_ADDR_VAR 0 3
22566: PUSH
22567: LD_INT 20
22569: PPUSH
22570: LD_VAR 0 1
22574: PPUSH
22575: CALL_OW 321
22579: PUSH
22580: LD_INT 2
22582: EQUAL
22583: ST_TO_ADDR
22584: GO 22797
22586: LD_INT 28
22588: DOUBLE
22589: EQUAL
22590: IFTRUE 22600
22592: LD_INT 21
22594: DOUBLE
22595: EQUAL
22596: IFTRUE 22600
22598: GO 22625
22600: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22601: LD_ADDR_VAR 0 3
22605: PUSH
22606: LD_INT 21
22608: PPUSH
22609: LD_VAR 0 1
22613: PPUSH
22614: CALL_OW 321
22618: PUSH
22619: LD_INT 2
22621: EQUAL
22622: ST_TO_ADDR
22623: GO 22797
22625: LD_INT 16
22627: DOUBLE
22628: EQUAL
22629: IFTRUE 22633
22631: GO 22658
22633: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22634: LD_ADDR_VAR 0 3
22638: PUSH
22639: LD_INT 84
22641: PPUSH
22642: LD_VAR 0 1
22646: PPUSH
22647: CALL_OW 321
22651: PUSH
22652: LD_INT 2
22654: EQUAL
22655: ST_TO_ADDR
22656: GO 22797
22658: LD_INT 19
22660: DOUBLE
22661: EQUAL
22662: IFTRUE 22672
22664: LD_INT 23
22666: DOUBLE
22667: EQUAL
22668: IFTRUE 22672
22670: GO 22697
22672: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22673: LD_ADDR_VAR 0 3
22677: PUSH
22678: LD_INT 83
22680: PPUSH
22681: LD_VAR 0 1
22685: PPUSH
22686: CALL_OW 321
22690: PUSH
22691: LD_INT 2
22693: EQUAL
22694: ST_TO_ADDR
22695: GO 22797
22697: LD_INT 17
22699: DOUBLE
22700: EQUAL
22701: IFTRUE 22705
22703: GO 22730
22705: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22706: LD_ADDR_VAR 0 3
22710: PUSH
22711: LD_INT 39
22713: PPUSH
22714: LD_VAR 0 1
22718: PPUSH
22719: CALL_OW 321
22723: PUSH
22724: LD_INT 2
22726: EQUAL
22727: ST_TO_ADDR
22728: GO 22797
22730: LD_INT 18
22732: DOUBLE
22733: EQUAL
22734: IFTRUE 22738
22736: GO 22763
22738: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22739: LD_ADDR_VAR 0 3
22743: PUSH
22744: LD_INT 40
22746: PPUSH
22747: LD_VAR 0 1
22751: PPUSH
22752: CALL_OW 321
22756: PUSH
22757: LD_INT 2
22759: EQUAL
22760: ST_TO_ADDR
22761: GO 22797
22763: LD_INT 27
22765: DOUBLE
22766: EQUAL
22767: IFTRUE 22771
22769: GO 22796
22771: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22772: LD_ADDR_VAR 0 3
22776: PUSH
22777: LD_INT 35
22779: PPUSH
22780: LD_VAR 0 1
22784: PPUSH
22785: CALL_OW 321
22789: PUSH
22790: LD_INT 2
22792: EQUAL
22793: ST_TO_ADDR
22794: GO 22797
22796: POP
// end ;
22797: LD_VAR 0 3
22801: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22802: LD_INT 0
22804: PPUSH
22805: PPUSH
22806: PPUSH
22807: PPUSH
22808: PPUSH
22809: PPUSH
22810: PPUSH
22811: PPUSH
22812: PPUSH
22813: PPUSH
22814: PPUSH
// result := false ;
22815: LD_ADDR_VAR 0 6
22819: PUSH
22820: LD_INT 0
22822: ST_TO_ADDR
// if btype = b_depot then
22823: LD_VAR 0 2
22827: PUSH
22828: LD_INT 0
22830: EQUAL
22831: IFFALSE 22843
// begin result := true ;
22833: LD_ADDR_VAR 0 6
22837: PUSH
22838: LD_INT 1
22840: ST_TO_ADDR
// exit ;
22841: GO 23669
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22843: LD_VAR 0 1
22847: NOT
22848: PUSH
22849: LD_VAR 0 1
22853: PPUSH
22854: CALL_OW 266
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: IN
22869: NOT
22870: OR
22871: PUSH
22872: LD_VAR 0 2
22876: NOT
22877: OR
22878: PUSH
22879: LD_VAR 0 5
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: LD_INT 2
22892: PUSH
22893: LD_INT 3
22895: PUSH
22896: LD_INT 4
22898: PUSH
22899: LD_INT 5
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: IN
22910: NOT
22911: OR
22912: PUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: LD_VAR 0 4
22922: PPUSH
22923: CALL_OW 488
22927: NOT
22928: OR
22929: IFFALSE 22933
// exit ;
22931: GO 23669
// side := GetSide ( depot ) ;
22933: LD_ADDR_VAR 0 9
22937: PUSH
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 255
22947: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22948: LD_VAR 0 9
22952: PPUSH
22953: LD_VAR 0 2
22957: PPUSH
22958: CALL 22426 0 2
22962: NOT
22963: IFFALSE 22967
// exit ;
22965: GO 23669
// pom := GetBase ( depot ) ;
22967: LD_ADDR_VAR 0 10
22971: PUSH
22972: LD_VAR 0 1
22976: PPUSH
22977: CALL_OW 274
22981: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22982: LD_ADDR_VAR 0 11
22986: PUSH
22987: LD_VAR 0 2
22991: PPUSH
22992: LD_VAR 0 1
22996: PPUSH
22997: CALL_OW 248
23001: PPUSH
23002: CALL_OW 450
23006: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23007: LD_VAR 0 10
23011: PPUSH
23012: LD_INT 1
23014: PPUSH
23015: CALL_OW 275
23019: PUSH
23020: LD_VAR 0 11
23024: PUSH
23025: LD_INT 1
23027: ARRAY
23028: GREATEREQUAL
23029: PUSH
23030: LD_VAR 0 10
23034: PPUSH
23035: LD_INT 2
23037: PPUSH
23038: CALL_OW 275
23042: PUSH
23043: LD_VAR 0 11
23047: PUSH
23048: LD_INT 2
23050: ARRAY
23051: GREATEREQUAL
23052: AND
23053: PUSH
23054: LD_VAR 0 10
23058: PPUSH
23059: LD_INT 3
23061: PPUSH
23062: CALL_OW 275
23066: PUSH
23067: LD_VAR 0 11
23071: PUSH
23072: LD_INT 3
23074: ARRAY
23075: GREATEREQUAL
23076: AND
23077: NOT
23078: IFFALSE 23082
// exit ;
23080: GO 23669
// if GetBType ( depot ) = b_depot then
23082: LD_VAR 0 1
23086: PPUSH
23087: CALL_OW 266
23091: PUSH
23092: LD_INT 0
23094: EQUAL
23095: IFFALSE 23107
// dist := 28 else
23097: LD_ADDR_VAR 0 14
23101: PUSH
23102: LD_INT 28
23104: ST_TO_ADDR
23105: GO 23115
// dist := 36 ;
23107: LD_ADDR_VAR 0 14
23111: PUSH
23112: LD_INT 36
23114: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23115: LD_VAR 0 1
23119: PPUSH
23120: LD_VAR 0 3
23124: PPUSH
23125: LD_VAR 0 4
23129: PPUSH
23130: CALL_OW 297
23134: PUSH
23135: LD_VAR 0 14
23139: GREATER
23140: IFFALSE 23144
// exit ;
23142: GO 23669
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23144: LD_ADDR_VAR 0 12
23148: PUSH
23149: LD_VAR 0 2
23153: PPUSH
23154: LD_VAR 0 3
23158: PPUSH
23159: LD_VAR 0 4
23163: PPUSH
23164: LD_VAR 0 5
23168: PPUSH
23169: LD_VAR 0 1
23173: PPUSH
23174: CALL_OW 248
23178: PPUSH
23179: LD_INT 0
23181: PPUSH
23182: CALL 23674 0 6
23186: ST_TO_ADDR
// if not hexes then
23187: LD_VAR 0 12
23191: NOT
23192: IFFALSE 23196
// exit ;
23194: GO 23669
// hex := GetHexInfo ( x , y ) ;
23196: LD_ADDR_VAR 0 15
23200: PUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: LD_VAR 0 4
23210: PPUSH
23211: CALL_OW 546
23215: ST_TO_ADDR
// if hex [ 1 ] then
23216: LD_VAR 0 15
23220: PUSH
23221: LD_INT 1
23223: ARRAY
23224: IFFALSE 23228
// exit ;
23226: GO 23669
// height := hex [ 2 ] ;
23228: LD_ADDR_VAR 0 13
23232: PUSH
23233: LD_VAR 0 15
23237: PUSH
23238: LD_INT 2
23240: ARRAY
23241: ST_TO_ADDR
// for i = 1 to hexes do
23242: LD_ADDR_VAR 0 7
23246: PUSH
23247: DOUBLE
23248: LD_INT 1
23250: DEC
23251: ST_TO_ADDR
23252: LD_VAR 0 12
23256: PUSH
23257: FOR_TO
23258: IFFALSE 23588
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23260: LD_VAR 0 12
23264: PUSH
23265: LD_VAR 0 7
23269: ARRAY
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 12
23279: PUSH
23280: LD_VAR 0 7
23284: ARRAY
23285: PUSH
23286: LD_INT 2
23288: ARRAY
23289: PPUSH
23290: CALL_OW 488
23294: NOT
23295: PUSH
23296: LD_VAR 0 12
23300: PUSH
23301: LD_VAR 0 7
23305: ARRAY
23306: PUSH
23307: LD_INT 1
23309: ARRAY
23310: PPUSH
23311: LD_VAR 0 12
23315: PUSH
23316: LD_VAR 0 7
23320: ARRAY
23321: PUSH
23322: LD_INT 2
23324: ARRAY
23325: PPUSH
23326: CALL_OW 428
23330: PUSH
23331: LD_INT 0
23333: GREATER
23334: OR
23335: PUSH
23336: LD_VAR 0 12
23340: PUSH
23341: LD_VAR 0 7
23345: ARRAY
23346: PUSH
23347: LD_INT 1
23349: ARRAY
23350: PPUSH
23351: LD_VAR 0 12
23355: PUSH
23356: LD_VAR 0 7
23360: ARRAY
23361: PUSH
23362: LD_INT 2
23364: ARRAY
23365: PPUSH
23366: CALL_OW 351
23370: OR
23371: IFFALSE 23377
// exit ;
23373: POP
23374: POP
23375: GO 23669
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23377: LD_ADDR_VAR 0 8
23381: PUSH
23382: LD_VAR 0 12
23386: PUSH
23387: LD_VAR 0 7
23391: ARRAY
23392: PUSH
23393: LD_INT 1
23395: ARRAY
23396: PPUSH
23397: LD_VAR 0 12
23401: PUSH
23402: LD_VAR 0 7
23406: ARRAY
23407: PUSH
23408: LD_INT 2
23410: ARRAY
23411: PPUSH
23412: CALL_OW 546
23416: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23417: LD_VAR 0 8
23421: PUSH
23422: LD_INT 1
23424: ARRAY
23425: PUSH
23426: LD_VAR 0 8
23430: PUSH
23431: LD_INT 2
23433: ARRAY
23434: PUSH
23435: LD_VAR 0 13
23439: PUSH
23440: LD_INT 2
23442: PLUS
23443: GREATER
23444: OR
23445: PUSH
23446: LD_VAR 0 8
23450: PUSH
23451: LD_INT 2
23453: ARRAY
23454: PUSH
23455: LD_VAR 0 13
23459: PUSH
23460: LD_INT 2
23462: MINUS
23463: LESS
23464: OR
23465: PUSH
23466: LD_VAR 0 8
23470: PUSH
23471: LD_INT 3
23473: ARRAY
23474: PUSH
23475: LD_INT 0
23477: PUSH
23478: LD_INT 8
23480: PUSH
23481: LD_INT 9
23483: PUSH
23484: LD_INT 10
23486: PUSH
23487: LD_INT 11
23489: PUSH
23490: LD_INT 12
23492: PUSH
23493: LD_INT 13
23495: PUSH
23496: LD_INT 16
23498: PUSH
23499: LD_INT 17
23501: PUSH
23502: LD_INT 18
23504: PUSH
23505: LD_INT 19
23507: PUSH
23508: LD_INT 20
23510: PUSH
23511: LD_INT 21
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: IN
23529: NOT
23530: OR
23531: PUSH
23532: LD_VAR 0 8
23536: PUSH
23537: LD_INT 5
23539: ARRAY
23540: NOT
23541: OR
23542: PUSH
23543: LD_VAR 0 8
23547: PUSH
23548: LD_INT 6
23550: ARRAY
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: LD_INT 2
23557: PUSH
23558: LD_INT 7
23560: PUSH
23561: LD_INT 9
23563: PUSH
23564: LD_INT 10
23566: PUSH
23567: LD_INT 11
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: IN
23578: NOT
23579: OR
23580: IFFALSE 23586
// exit ;
23582: POP
23583: POP
23584: GO 23669
// end ;
23586: GO 23257
23588: POP
23589: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23590: LD_VAR 0 9
23594: PPUSH
23595: LD_VAR 0 3
23599: PPUSH
23600: LD_VAR 0 4
23604: PPUSH
23605: LD_INT 20
23607: PPUSH
23608: CALL 15592 0 4
23612: PUSH
23613: LD_INT 4
23615: ARRAY
23616: IFFALSE 23620
// exit ;
23618: GO 23669
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23620: LD_VAR 0 2
23624: PUSH
23625: LD_INT 29
23627: PUSH
23628: LD_INT 30
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: IN
23635: PUSH
23636: LD_VAR 0 3
23640: PPUSH
23641: LD_VAR 0 4
23645: PPUSH
23646: LD_VAR 0 9
23650: PPUSH
23651: CALL_OW 440
23655: NOT
23656: AND
23657: IFFALSE 23661
// exit ;
23659: GO 23669
// result := true ;
23661: LD_ADDR_VAR 0 6
23665: PUSH
23666: LD_INT 1
23668: ST_TO_ADDR
// end ;
23669: LD_VAR 0 6
23673: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23674: LD_INT 0
23676: PPUSH
23677: PPUSH
23678: PPUSH
23679: PPUSH
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
23690: PPUSH
23691: PPUSH
23692: PPUSH
23693: PPUSH
23694: PPUSH
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
23728: PPUSH
23729: PPUSH
23730: PPUSH
23731: PPUSH
23732: PPUSH
23733: PPUSH
// result = [ ] ;
23734: LD_ADDR_VAR 0 7
23738: PUSH
23739: EMPTY
23740: ST_TO_ADDR
// temp_list = [ ] ;
23741: LD_ADDR_VAR 0 9
23745: PUSH
23746: EMPTY
23747: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23748: LD_VAR 0 4
23752: PUSH
23753: LD_INT 0
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 3
23764: PUSH
23765: LD_INT 4
23767: PUSH
23768: LD_INT 5
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: IN
23779: NOT
23780: PUSH
23781: LD_VAR 0 1
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: IN
23796: PUSH
23797: LD_VAR 0 5
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 2
23807: PUSH
23808: LD_INT 3
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: IN
23816: NOT
23817: AND
23818: OR
23819: IFFALSE 23823
// exit ;
23821: GO 42214
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23823: LD_VAR 0 1
23827: PUSH
23828: LD_INT 6
23830: PUSH
23831: LD_INT 7
23833: PUSH
23834: LD_INT 8
23836: PUSH
23837: LD_INT 13
23839: PUSH
23840: LD_INT 12
23842: PUSH
23843: LD_INT 15
23845: PUSH
23846: LD_INT 11
23848: PUSH
23849: LD_INT 14
23851: PUSH
23852: LD_INT 10
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: IN
23866: IFFALSE 23876
// btype = b_lab ;
23868: LD_ADDR_VAR 0 1
23872: PUSH
23873: LD_INT 6
23875: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23876: LD_VAR 0 6
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 1
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: LIST
23894: IN
23895: NOT
23896: PUSH
23897: LD_VAR 0 1
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: LD_INT 3
23913: PUSH
23914: LD_INT 6
23916: PUSH
23917: LD_INT 36
23919: PUSH
23920: LD_INT 4
23922: PUSH
23923: LD_INT 5
23925: PUSH
23926: LD_INT 31
23928: PUSH
23929: LD_INT 32
23931: PUSH
23932: LD_INT 33
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: IN
23948: NOT
23949: PUSH
23950: LD_VAR 0 6
23954: PUSH
23955: LD_INT 1
23957: EQUAL
23958: AND
23959: OR
23960: PUSH
23961: LD_VAR 0 1
23965: PUSH
23966: LD_INT 2
23968: PUSH
23969: LD_INT 3
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: IN
23976: NOT
23977: PUSH
23978: LD_VAR 0 6
23982: PUSH
23983: LD_INT 2
23985: EQUAL
23986: AND
23987: OR
23988: IFFALSE 23998
// mode = 0 ;
23990: LD_ADDR_VAR 0 6
23994: PUSH
23995: LD_INT 0
23997: ST_TO_ADDR
// case mode of 0 :
23998: LD_VAR 0 6
24002: PUSH
24003: LD_INT 0
24005: DOUBLE
24006: EQUAL
24007: IFTRUE 24011
24009: GO 35464
24011: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24012: LD_ADDR_VAR 0 11
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 0
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 1
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: NEG
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: LD_INT 2
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: LD_INT 3
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: LD_INT 3
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: LD_INT 2
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24205: LD_ADDR_VAR 0 12
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 0
24222: PUSH
24223: LD_INT 1
24225: NEG
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: LD_INT 1
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: NEG
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 1
24274: NEG
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: LD_INT 1
24289: NEG
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 2
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 2
24328: NEG
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 2
24339: NEG
24340: PUSH
24341: LD_INT 1
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: NEG
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 3
24362: NEG
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 3
24373: NEG
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24401: LD_ADDR_VAR 0 13
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 0
24418: PUSH
24419: LD_INT 1
24421: NEG
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: NEG
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: NEG
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 2
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: LD_INT 2
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 2
24548: NEG
24549: PUSH
24550: LD_INT 3
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 3
24560: NEG
24561: PUSH
24562: LD_INT 2
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 3
24572: NEG
24573: PUSH
24574: LD_INT 3
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24600: LD_ADDR_VAR 0 14
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: LD_INT 1
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 0
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: LD_INT 1
24673: NEG
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 1
24681: NEG
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: LD_INT 2
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 0
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: NEG
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: NEG
24747: PUSH
24748: LD_INT 3
24750: NEG
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: LD_INT 3
24761: NEG
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: LD_INT 2
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24796: LD_ADDR_VAR 0 15
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: LD_INT 1
24816: NEG
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: LD_INT 0
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: LD_INT 1
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 2
24919: NEG
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 3
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 3
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24989: LD_ADDR_VAR 0 16
24993: PUSH
24994: LD_INT 0
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: NEG
25071: PUSH
25072: LD_INT 2
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 2
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 2
25124: NEG
25125: PUSH
25126: LD_INT 2
25128: NEG
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 3
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 3
25146: PUSH
25147: LD_INT 3
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 2
25156: PUSH
25157: LD_INT 3
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25182: LD_ADDR_VAR 0 17
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: LD_INT 2
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: LD_INT 1
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 2
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: NEG
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 2
25369: NEG
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: NEG
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25412: LD_ADDR_VAR 0 18
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 1
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: LD_INT 1
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: NEG
25482: PUSH
25483: LD_INT 1
25485: NEG
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 2
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 2
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 2
25527: PUSH
25528: LD_INT 0
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 2
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: LD_INT 2
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 2
25588: NEG
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: LD_INT 1
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: NEG
25612: PUSH
25613: LD_INT 2
25615: NEG
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25642: LD_ADDR_VAR 0 19
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 0
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 0
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PUSH
25713: LD_INT 1
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 2
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: LD_INT 2
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: LD_INT 0
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 2
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 0
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 2
25818: NEG
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 2
25841: NEG
25842: PUSH
25843: LD_INT 2
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25872: LD_ADDR_VAR 0 20
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 2
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26102: LD_ADDR_VAR 0 21
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 1
26160: NEG
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: NEG
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: LD_INT 2
26187: NEG
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: LD_INT 2
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 2
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 2
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 2
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 2
26278: NEG
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: NEG
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26332: LD_ADDR_VAR 0 22
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 1
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: NEG
26414: PUSH
26415: LD_INT 2
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: LD_INT 2
26428: NEG
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 2
26508: NEG
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: NEG
26532: PUSH
26533: LD_INT 2
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26562: LD_ADDR_VAR 0 23
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 1
26620: NEG
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 2
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: LD_INT 2
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 1
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 2
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 2
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 2
26738: NEG
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: NEG
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 2
26761: NEG
26762: PUSH
26763: LD_INT 2
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: NEG
26774: PUSH
26775: LD_INT 3
26777: NEG
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 1
26785: NEG
26786: PUSH
26787: LD_INT 3
26789: NEG
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 2
26808: PUSH
26809: LD_INT 1
26811: NEG
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26842: LD_ADDR_VAR 0 24
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 0
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 0
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: NEG
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 1
26915: NEG
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: LD_INT 2
26927: NEG
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 0
26935: PUSH
26936: LD_INT 2
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: LD_INT 1
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: LD_INT 0
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: NEG
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: NEG
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 2
27041: NEG
27042: PUSH
27043: LD_INT 2
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: LD_INT 2
27056: NEG
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 2
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 3
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 3
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27118: LD_ADDR_VAR 0 25
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: LD_INT 2
27214: NEG
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: NEG
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 3
27329: PUSH
27330: LD_INT 1
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 3
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: LD_INT 3
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27392: LD_ADDR_VAR 0 26
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 0
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: LD_INT 1
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: NEG
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: LD_INT 2
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: LD_INT 2
27488: NEG
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 1
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 2
27507: PUSH
27508: LD_INT 0
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 2
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 2
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 2
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 1
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 2
27568: NEG
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 2
27579: NEG
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: NEG
27592: PUSH
27593: LD_INT 2
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: LD_INT 3
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: LD_INT 3
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27668: LD_ADDR_VAR 0 27
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: LD_INT 2
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: LD_INT 2
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: LD_INT 1
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: LD_INT 2
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 2
27844: NEG
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: NEG
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: NEG
27868: PUSH
27869: LD_INT 2
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 2
27890: NEG
27891: PUSH
27892: LD_INT 1
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 3
27901: NEG
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 3
27913: NEG
27914: PUSH
27915: LD_INT 2
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27948: LD_ADDR_VAR 0 28
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 2
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: LD_INT 2
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: NEG
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: NEG
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: NEG
28160: PUSH
28161: LD_INT 3
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: LD_INT 3
28175: NEG
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 3
28183: NEG
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 3
28195: NEG
28196: PUSH
28197: LD_INT 2
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28230: LD_ADDR_VAR 0 29
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: NEG
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: NEG
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: LD_INT 2
28315: NEG
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: LD_INT 2
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 2
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: NEG
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 2
28396: NEG
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 2
28408: NEG
28409: PUSH
28410: LD_INT 2
28412: NEG
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: NEG
28421: PUSH
28422: LD_INT 3
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 3
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: LD_INT 3
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 3
28474: NEG
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28509: LD_ADDR_VAR 0 30
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: LD_INT 1
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: LD_INT 1
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: LD_INT 2
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 0
28602: PUSH
28603: LD_INT 2
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 2
28624: PUSH
28625: LD_INT 0
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 2
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: LD_INT 2
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: NEG
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 2
28675: NEG
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 2
28686: NEG
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 3
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 2
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 3
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 3
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: NEG
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 3
28752: NEG
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28787: LD_ADDR_VAR 0 31
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: LD_INT 2
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: LD_INT 2
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 2
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 2
28952: NEG
28953: PUSH
28954: LD_INT 1
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: NEG
28977: PUSH
28978: LD_INT 3
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 3
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 3
29030: NEG
29031: PUSH
29032: LD_INT 2
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29065: LD_ADDR_VAR 0 32
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 1
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: LD_INT 2
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 2
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: LD_INT 2
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: LD_INT 2
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: LD_INT 2
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 2
29231: NEG
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: NEG
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: LD_INT 3
29258: NEG
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: LD_INT 2
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 3
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 2
29297: NEG
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 3
29308: NEG
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29343: LD_ADDR_VAR 0 33
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: LD_INT 1
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 2
29521: NEG
29522: PUSH
29523: LD_INT 2
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 2
29533: NEG
29534: PUSH
29535: LD_INT 3
29537: NEG
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 2
29545: PUSH
29546: LD_INT 1
29548: NEG
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 3
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: PUSH
29567: LD_INT 3
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: LD_INT 2
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 3
29587: NEG
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29622: LD_ADDR_VAR 0 34
29626: PUSH
29627: LD_INT 0
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 1
29680: NEG
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: LD_INT 1
29695: NEG
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: LD_INT 2
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: LD_INT 2
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: LD_INT 1
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: LD_INT 1
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 2
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 2
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 2
29778: NEG
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 2
29789: NEG
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: NEG
29802: PUSH
29803: LD_INT 2
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: LD_INT 3
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: LD_INT 2
29828: NEG
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 3
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 2
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 3
29867: NEG
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29902: LD_ADDR_VAR 0 35
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: LD_INT 0
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: LD_INT 1
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 2
29993: NEG
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30014: LD_ADDR_VAR 0 36
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: NEG
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: NEG
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: LD_INT 2
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30126: LD_ADDR_VAR 0 37
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 0
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 1
30195: NEG
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30238: LD_ADDR_VAR 0 38
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: LD_INT 1
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 1
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 2
30329: NEG
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30350: LD_ADDR_VAR 0 39
30354: PUSH
30355: LD_INT 0
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: LD_INT 1
30370: NEG
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 1
30419: NEG
30420: PUSH
30421: LD_INT 1
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30462: LD_ADDR_VAR 0 40
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30574: LD_ADDR_VAR 0 41
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: LD_INT 1
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: LD_INT 0
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: LD_INT 2
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: PUSH
30668: LD_INT 1
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 2
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: LD_INT 2
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 2
30729: NEG
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 2
30740: NEG
30741: PUSH
30742: LD_INT 1
30744: NEG
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 2
30752: NEG
30753: PUSH
30754: LD_INT 2
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 2
30764: NEG
30765: PUSH
30766: LD_INT 3
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 3
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 3
30817: PUSH
30818: LD_INT 3
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 3
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 3
30848: NEG
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 3
30859: NEG
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 3
30883: NEG
30884: PUSH
30885: LD_INT 3
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30924: LD_ADDR_VAR 0 42
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 0
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: NEG
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: LD_INT 2
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: LD_INT 1
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 2
31049: PUSH
31050: LD_INT 2
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: LD_INT 2
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 0
31069: PUSH
31070: LD_INT 2
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 2
31102: NEG
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: LD_INT 3
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: LD_INT 3
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: LD_INT 3
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 3
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 3
31170: PUSH
31171: LD_INT 3
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 2
31180: PUSH
31181: LD_INT 3
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: LD_INT 3
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 3
31221: NEG
31222: PUSH
31223: LD_INT 2
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 3
31233: NEG
31234: PUSH
31235: LD_INT 3
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31274: LD_ADDR_VAR 0 43
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: LD_INT 1
31294: NEG
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: NEG
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: LD_INT 2
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: LD_INT 2
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: LD_INT 1
31381: NEG
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 2
31451: NEG
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: LD_INT 3
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 0
31475: PUSH
31476: LD_INT 3
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 2
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 2
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 3
31570: NEG
31571: PUSH
31572: LD_INT 0
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 3
31581: NEG
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31622: LD_ADDR_VAR 0 44
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: LD_INT 1
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: NEG
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 2
31746: PUSH
31747: LD_INT 2
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 2
31777: NEG
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 2
31788: NEG
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: NEG
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 2
31812: NEG
31813: PUSH
31814: LD_INT 3
31816: NEG
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 3
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 3
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 3
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 3
31865: PUSH
31866: LD_INT 3
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 2
31875: PUSH
31876: LD_INT 3
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 3
31896: NEG
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: NEG
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 3
31919: NEG
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: NEG
31932: PUSH
31933: LD_INT 3
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31972: LD_ADDR_VAR 0 45
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: NEG
32054: PUSH
32055: LD_INT 2
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: LD_INT 2
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 1
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: NEG
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: LD_INT 2
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 2
32162: NEG
32163: PUSH
32164: LD_INT 3
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: LD_INT 3
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 3
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 3
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 3
32218: PUSH
32219: LD_INT 3
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: PUSH
32229: LD_INT 3
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 3
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: LD_INT 2
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 3
32269: NEG
32270: PUSH
32271: LD_INT 2
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 3
32281: NEG
32282: PUSH
32283: LD_INT 3
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32322: LD_ADDR_VAR 0 46
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 1
32380: NEG
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: LD_INT 1
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: LD_INT 1
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 2
32499: NEG
32500: PUSH
32501: LD_INT 1
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: LD_INT 3
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: LD_INT 3
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: LD_INT 2
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 3
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 3
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: LD_INT 2
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 2
32607: NEG
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 3
32618: NEG
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 3
32629: NEG
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32670: LD_ADDR_VAR 0 47
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 2
32755: NEG
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32821: LD_ADDR_VAR 0 48
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: LD_INT 0
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 0
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: NEG
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: LD_INT 2
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 2
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 1
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 2
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32968: LD_ADDR_VAR 0 49
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: LD_INT 1
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33112: LD_ADDR_VAR 0 50
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: LD_INT 1
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33256: LD_ADDR_VAR 0 51
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: NEG
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 2
33379: NEG
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33403: LD_ADDR_VAR 0 52
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: NEG
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: LD_INT 2
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 2
33518: NEG
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33554: LD_ADDR_VAR 0 53
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 0
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 1
33612: NEG
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 1
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 2
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 2
33650: NEG
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 2
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 1
33699: PUSH
33700: LD_INT 2
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 2
33730: NEG
33731: PUSH
33732: LD_INT 0
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33784: LD_ADDR_VAR 0 54
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: NEG
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: LD_INT 1
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 2
33960: NEG
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: LD_INT 2
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34014: LD_ADDR_VAR 0 55
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 0
34107: PUSH
34108: LD_INT 2
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 2
34190: NEG
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 2
34201: NEG
34202: PUSH
34203: LD_INT 1
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: LD_INT 2
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34244: LD_ADDR_VAR 0 56
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: LD_INT 2
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34474: LD_ADDR_VAR 0 57
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 1
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: LD_INT 2
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: LD_INT 2
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 2
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: LD_INT 2
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: NEG
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: NEG
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 2
34673: NEG
34674: PUSH
34675: LD_INT 2
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34704: LD_ADDR_VAR 0 58
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: LD_INT 2
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: NEG
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 2
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34934: LD_ADDR_VAR 0 59
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35022: LD_ADDR_VAR 0 60
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35110: LD_ADDR_VAR 0 61
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: LD_INT 1
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35198: LD_ADDR_VAR 0 62
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: LD_INT 1
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35286: LD_ADDR_VAR 0 63
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35374: LD_ADDR_VAR 0 64
35378: PUSH
35379: LD_INT 0
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: ST_TO_ADDR
// end ; 1 :
35462: GO 41359
35464: LD_INT 1
35466: DOUBLE
35467: EQUAL
35468: IFTRUE 35472
35470: GO 38095
35472: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35473: LD_ADDR_VAR 0 11
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: LD_INT 3
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: LD_INT 3
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 2
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35517: LD_ADDR_VAR 0 12
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 3
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 3
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35558: LD_ADDR_VAR 0 13
35562: PUSH
35563: LD_INT 3
35565: PUSH
35566: LD_INT 2
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 3
35575: PUSH
35576: LD_INT 3
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: LD_INT 3
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35598: LD_ADDR_VAR 0 14
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 3
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: LD_INT 3
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: LIST
35638: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35639: LD_ADDR_VAR 0 15
35643: PUSH
35644: LD_INT 2
35646: NEG
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 3
35657: NEG
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 3
35668: NEG
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35683: LD_ADDR_VAR 0 16
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: LD_INT 3
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 3
35702: NEG
35703: PUSH
35704: LD_INT 2
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 3
35714: NEG
35715: PUSH
35716: LD_INT 3
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35729: LD_ADDR_VAR 0 17
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 3
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 3
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 2
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35773: LD_ADDR_VAR 0 18
35777: PUSH
35778: LD_INT 2
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 3
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35814: LD_ADDR_VAR 0 19
35818: PUSH
35819: LD_INT 3
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 3
35831: PUSH
35832: LD_INT 3
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: LD_INT 3
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35854: LD_ADDR_VAR 0 20
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 3
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: LD_INT 3
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35895: LD_ADDR_VAR 0 21
35899: PUSH
35900: LD_INT 2
35902: NEG
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 3
35913: NEG
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 3
35924: NEG
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35939: LD_ADDR_VAR 0 22
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: LD_INT 3
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 3
35958: NEG
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 3
35970: NEG
35971: PUSH
35972: LD_INT 3
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: LIST
35984: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35985: LD_ADDR_VAR 0 23
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 3
35995: NEG
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: LD_INT 4
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 3
36018: NEG
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36029: LD_ADDR_VAR 0 24
36033: PUSH
36034: LD_INT 3
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 4
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36070: LD_ADDR_VAR 0 25
36074: PUSH
36075: LD_INT 3
36077: PUSH
36078: LD_INT 3
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 4
36087: PUSH
36088: LD_INT 3
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 3
36097: PUSH
36098: LD_INT 4
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: LIST
36109: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36110: LD_ADDR_VAR 0 26
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 4
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: NEG
36138: PUSH
36139: LD_INT 3
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: LIST
36150: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36151: LD_ADDR_VAR 0 27
36155: PUSH
36156: LD_INT 3
36158: NEG
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 3
36169: NEG
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 4
36180: NEG
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36195: LD_ADDR_VAR 0 28
36199: PUSH
36200: LD_INT 3
36202: NEG
36203: PUSH
36204: LD_INT 3
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 3
36214: NEG
36215: PUSH
36216: LD_INT 4
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 4
36226: NEG
36227: PUSH
36228: LD_INT 3
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36241: LD_ADDR_VAR 0 29
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 3
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 3
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: LD_INT 2
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: LD_INT 4
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: LD_INT 4
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: LD_INT 3
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 5
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: LD_INT 5
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: LD_INT 4
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: LD_INT 6
36354: NEG
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 6
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: LD_INT 5
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36396: LD_ADDR_VAR 0 30
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 3
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 3
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 4
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 4
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 4
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 5
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 5
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 5
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 6
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 6
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36539: LD_ADDR_VAR 0 31
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 3
36556: PUSH
36557: LD_INT 3
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 3
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 4
36576: PUSH
36577: LD_INT 3
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 4
36586: PUSH
36587: LD_INT 4
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 3
36596: PUSH
36597: LD_INT 4
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 5
36606: PUSH
36607: LD_INT 4
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 5
36616: PUSH
36617: LD_INT 5
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 4
36626: PUSH
36627: LD_INT 5
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 6
36636: PUSH
36637: LD_INT 5
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 6
36646: PUSH
36647: LD_INT 6
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 5
36656: PUSH
36657: LD_INT 6
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36678: LD_ADDR_VAR 0 32
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 3
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: LD_INT 3
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: NEG
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 4
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 4
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: LD_INT 3
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 5
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 5
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 4
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: PUSH
36779: LD_INT 6
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: LD_INT 6
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: LD_INT 5
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36821: LD_ADDR_VAR 0 33
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 3
36839: NEG
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 3
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 3
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 4
36873: NEG
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 4
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 4
36896: NEG
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 5
36907: NEG
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 5
36918: NEG
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 5
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 6
36941: NEG
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 6
36952: NEG
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36976: LD_ADDR_VAR 0 34
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: LD_INT 3
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 3
36995: NEG
36996: PUSH
36997: LD_INT 2
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 3
37007: NEG
37008: PUSH
37009: LD_INT 3
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 3
37019: NEG
37020: PUSH
37021: LD_INT 4
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 4
37031: NEG
37032: PUSH
37033: LD_INT 3
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 4
37043: NEG
37044: PUSH
37045: LD_INT 4
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 4
37055: NEG
37056: PUSH
37057: LD_INT 5
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 5
37067: NEG
37068: PUSH
37069: LD_INT 4
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 5
37079: NEG
37080: PUSH
37081: LD_INT 5
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 5
37091: NEG
37092: PUSH
37093: LD_INT 6
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 6
37103: NEG
37104: PUSH
37105: LD_INT 5
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 6
37115: NEG
37116: PUSH
37117: LD_INT 6
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37139: LD_ADDR_VAR 0 41
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 1
37157: NEG
37158: PUSH
37159: LD_INT 3
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: LD_INT 2
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: LIST
37182: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37183: LD_ADDR_VAR 0 42
37187: PUSH
37188: LD_INT 2
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 2
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 3
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37224: LD_ADDR_VAR 0 43
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: LD_INT 2
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 3
37241: PUSH
37242: LD_INT 2
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 2
37251: PUSH
37252: LD_INT 3
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37264: LD_ADDR_VAR 0 44
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 2
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: LD_INT 3
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: LIST
37304: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37305: LD_ADDR_VAR 0 45
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 3
37334: NEG
37335: PUSH
37336: LD_INT 1
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37349: LD_ADDR_VAR 0 46
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 2
37368: NEG
37369: PUSH
37370: LD_INT 3
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 3
37380: NEG
37381: PUSH
37382: LD_INT 2
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37395: LD_ADDR_VAR 0 47
37399: PUSH
37400: LD_INT 2
37402: NEG
37403: PUSH
37404: LD_INT 3
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: LD_INT 3
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37428: LD_ADDR_VAR 0 48
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37459: LD_ADDR_VAR 0 49
37463: PUSH
37464: LD_INT 3
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 3
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37488: LD_ADDR_VAR 0 50
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 3
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 3
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37517: LD_ADDR_VAR 0 51
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 2
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37548: LD_ADDR_VAR 0 52
37552: PUSH
37553: LD_INT 3
37555: NEG
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 3
37567: NEG
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37581: LD_ADDR_VAR 0 53
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: LD_INT 3
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 3
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 2
37614: NEG
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37625: LD_ADDR_VAR 0 54
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 3
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 3
37653: PUSH
37654: LD_INT 1
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37666: LD_ADDR_VAR 0 55
37670: PUSH
37671: LD_INT 3
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 3
37683: PUSH
37684: LD_INT 3
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: LD_INT 3
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37706: LD_ADDR_VAR 0 56
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37747: LD_ADDR_VAR 0 57
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 3
37765: NEG
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 3
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37791: LD_ADDR_VAR 0 58
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: LD_INT 3
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 3
37822: NEG
37823: PUSH
37824: LD_INT 3
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37837: LD_ADDR_VAR 0 59
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: LD_INT 2
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: LD_INT 2
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: LD_INT 1
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37881: LD_ADDR_VAR 0 60
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37922: LD_ADDR_VAR 0 61
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 2
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37962: LD_ADDR_VAR 0 62
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: LIST
38002: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38003: LD_ADDR_VAR 0 63
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: NEG
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38047: LD_ADDR_VAR 0 64
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: ST_TO_ADDR
// end ; 2 :
38093: GO 41359
38095: LD_INT 2
38097: DOUBLE
38098: EQUAL
38099: IFTRUE 38103
38101: GO 41358
38103: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38104: LD_ADDR_VAR 0 29
38108: PUSH
38109: LD_INT 4
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 4
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 5
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 5
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 4
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 3
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 3
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 5
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 3
38204: PUSH
38205: LD_INT 3
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 3
38214: PUSH
38215: LD_INT 2
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 4
38224: PUSH
38225: LD_INT 3
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 4
38234: PUSH
38235: LD_INT 4
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 3
38244: PUSH
38245: LD_INT 4
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 2
38254: PUSH
38255: LD_INT 3
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: LD_INT 2
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 4
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: LD_INT 4
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: LD_INT 4
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 4
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 5
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 5
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 4
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 3
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 2
38366: PUSH
38367: LD_INT 5
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: LD_INT 3
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 3
38387: NEG
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 3
38398: NEG
38399: PUSH
38400: LD_INT 1
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 3
38432: NEG
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 4
38443: NEG
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 4
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 4
38466: NEG
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 2
38478: NEG
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 4
38489: NEG
38490: PUSH
38491: LD_INT 4
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 4
38501: NEG
38502: PUSH
38503: LD_INT 5
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 3
38513: NEG
38514: PUSH
38515: LD_INT 4
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 3
38525: NEG
38526: PUSH
38527: LD_INT 3
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 4
38537: NEG
38538: PUSH
38539: LD_INT 3
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 5
38549: NEG
38550: PUSH
38551: LD_INT 4
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 5
38561: NEG
38562: PUSH
38563: LD_INT 5
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 3
38573: NEG
38574: PUSH
38575: LD_INT 5
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 5
38585: NEG
38586: PUSH
38587: LD_INT 3
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38642: LD_ADDR_VAR 0 30
38646: PUSH
38647: LD_INT 4
38649: PUSH
38650: LD_INT 4
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 4
38659: PUSH
38660: LD_INT 3
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 5
38669: PUSH
38670: LD_INT 4
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 5
38679: PUSH
38680: LD_INT 5
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 4
38689: PUSH
38690: LD_INT 5
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: LD_INT 4
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: LD_INT 3
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 5
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 3
38729: PUSH
38730: LD_INT 5
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: LD_INT 3
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 3
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 4
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: LD_INT 4
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: LD_INT 3
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 4
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 2
38821: NEG
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 4
38832: NEG
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 4
38843: NEG
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 3
38855: NEG
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 3
38866: NEG
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 4
38877: NEG
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 5
38888: NEG
38889: PUSH
38890: LD_INT 0
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 5
38899: NEG
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 5
38911: NEG
38912: PUSH
38913: LD_INT 2
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 3
38923: NEG
38924: PUSH
38925: LD_INT 2
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 3
38934: NEG
38935: PUSH
38936: LD_INT 3
38938: NEG
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 3
38946: NEG
38947: PUSH
38948: LD_INT 4
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: LD_INT 3
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 3
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 4
38994: NEG
38995: PUSH
38996: LD_INT 3
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 4
39006: NEG
39007: PUSH
39008: LD_INT 4
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: LD_INT 4
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 4
39030: NEG
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 4
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: LD_INT 5
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: LD_INT 4
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: LD_INT 3
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 3
39089: NEG
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: LD_INT 4
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: LD_INT 5
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: LD_INT 3
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: LD_INT 5
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39189: LD_ADDR_VAR 0 31
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 4
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 3
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 4
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 5
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 5
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: LD_INT 4
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 3
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 5
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: LD_INT 3
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 3
39289: NEG
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 3
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 3
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 4
39345: NEG
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 4
39356: NEG
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 4
39368: NEG
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 4
39391: NEG
39392: PUSH
39393: LD_INT 4
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 4
39403: NEG
39404: PUSH
39405: LD_INT 5
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 3
39415: NEG
39416: PUSH
39417: LD_INT 4
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: NEG
39428: PUSH
39429: LD_INT 3
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 4
39439: NEG
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 5
39451: NEG
39452: PUSH
39453: LD_INT 4
39455: NEG
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 5
39463: NEG
39464: PUSH
39465: LD_INT 5
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: LD_INT 5
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 5
39487: NEG
39488: PUSH
39489: LD_INT 3
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: LD_INT 3
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 4
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 3
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 2
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 2
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 3
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: LD_INT 4
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: LD_INT 4
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 4
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 4
39611: PUSH
39612: LD_INT 1
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 5
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 5
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 4
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 3
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 3
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 3
39673: PUSH
39674: LD_INT 2
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 5
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39739: LD_ADDR_VAR 0 32
39743: PUSH
39744: LD_INT 4
39746: NEG
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 4
39757: NEG
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 3
39769: NEG
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 3
39780: NEG
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 4
39791: NEG
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 5
39802: NEG
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 5
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 5
39825: NEG
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 3
39837: NEG
39838: PUSH
39839: LD_INT 2
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 3
39848: NEG
39849: PUSH
39850: LD_INT 3
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 3
39860: NEG
39861: PUSH
39862: LD_INT 4
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: NEG
39873: PUSH
39874: LD_INT 3
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 4
39908: NEG
39909: PUSH
39910: LD_INT 3
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 4
39920: NEG
39921: PUSH
39922: LD_INT 4
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: NEG
39933: PUSH
39934: LD_INT 4
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 4
39944: NEG
39945: PUSH
39946: LD_INT 2
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 4
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 5
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 4
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 3
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 4
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: LD_INT 5
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 3
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: LD_INT 5
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 3
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 3
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 4
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 4
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 3
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 4
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 4
40151: PUSH
40152: LD_INT 4
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 4
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 5
40171: PUSH
40172: LD_INT 4
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 5
40181: PUSH
40182: LD_INT 5
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 4
40191: PUSH
40192: LD_INT 5
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 3
40201: PUSH
40202: LD_INT 4
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: LD_INT 3
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 5
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 3
40231: PUSH
40232: LD_INT 5
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40286: LD_ADDR_VAR 0 33
40290: PUSH
40291: LD_INT 4
40293: NEG
40294: PUSH
40295: LD_INT 4
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 4
40305: NEG
40306: PUSH
40307: LD_INT 5
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 3
40317: NEG
40318: PUSH
40319: LD_INT 4
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 3
40329: NEG
40330: PUSH
40331: LD_INT 3
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 4
40341: NEG
40342: PUSH
40343: LD_INT 3
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 5
40353: NEG
40354: PUSH
40355: LD_INT 4
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 5
40365: NEG
40366: PUSH
40367: LD_INT 5
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 3
40377: NEG
40378: PUSH
40379: LD_INT 5
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 5
40389: NEG
40390: PUSH
40391: LD_INT 3
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: LD_INT 3
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 4
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 3
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 3
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 4
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: LD_INT 4
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 4
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 4
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 5
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 5
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 4
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 3
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 3
40575: PUSH
40576: LD_INT 2
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 5
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 3
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 3
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 4
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 4
40626: PUSH
40627: LD_INT 4
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 3
40636: PUSH
40637: LD_INT 4
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 3
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 4
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: LD_INT 4
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 4
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 3
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 4
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 5
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 5
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 4
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 3
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: PUSH
40759: LD_INT 5
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: LD_INT 3
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40824: LD_ADDR_VAR 0 34
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 4
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 5
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 4
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 3
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 3
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: LD_INT 4
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 5
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: LD_INT 3
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: LD_INT 5
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 3
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 4
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 4
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 3
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 4
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 4
41026: PUSH
41027: LD_INT 4
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 4
41036: PUSH
41037: LD_INT 3
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 5
41046: PUSH
41047: LD_INT 4
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 5
41056: PUSH
41057: LD_INT 5
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 4
41066: PUSH
41067: LD_INT 5
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 3
41076: PUSH
41077: LD_INT 4
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 3
41086: PUSH
41087: LD_INT 3
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 5
41096: PUSH
41097: LD_INT 3
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 3
41106: PUSH
41107: LD_INT 5
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 3
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 4
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: LD_INT 4
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 3
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 4
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 4
41209: NEG
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 4
41220: NEG
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 3
41232: NEG
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 4
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 5
41265: NEG
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 5
41276: NEG
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 5
41288: NEG
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 3
41300: NEG
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: ST_TO_ADDR
// end ; end ;
41356: GO 41359
41358: POP
// case btype of b_depot , b_warehouse :
41359: LD_VAR 0 1
41363: PUSH
41364: LD_INT 0
41366: DOUBLE
41367: EQUAL
41368: IFTRUE 41378
41370: LD_INT 1
41372: DOUBLE
41373: EQUAL
41374: IFTRUE 41378
41376: GO 41579
41378: POP
// case nation of nation_american :
41379: LD_VAR 0 5
41383: PUSH
41384: LD_INT 1
41386: DOUBLE
41387: EQUAL
41388: IFTRUE 41392
41390: GO 41448
41392: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41393: LD_ADDR_VAR 0 9
41397: PUSH
41398: LD_VAR 0 11
41402: PUSH
41403: LD_VAR 0 12
41407: PUSH
41408: LD_VAR 0 13
41412: PUSH
41413: LD_VAR 0 14
41417: PUSH
41418: LD_VAR 0 15
41422: PUSH
41423: LD_VAR 0 16
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: PUSH
41436: LD_VAR 0 4
41440: PUSH
41441: LD_INT 1
41443: PLUS
41444: ARRAY
41445: ST_TO_ADDR
41446: GO 41577
41448: LD_INT 2
41450: DOUBLE
41451: EQUAL
41452: IFTRUE 41456
41454: GO 41512
41456: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41457: LD_ADDR_VAR 0 9
41461: PUSH
41462: LD_VAR 0 17
41466: PUSH
41467: LD_VAR 0 18
41471: PUSH
41472: LD_VAR 0 19
41476: PUSH
41477: LD_VAR 0 20
41481: PUSH
41482: LD_VAR 0 21
41486: PUSH
41487: LD_VAR 0 22
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: PUSH
41500: LD_VAR 0 4
41504: PUSH
41505: LD_INT 1
41507: PLUS
41508: ARRAY
41509: ST_TO_ADDR
41510: GO 41577
41512: LD_INT 3
41514: DOUBLE
41515: EQUAL
41516: IFTRUE 41520
41518: GO 41576
41520: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41521: LD_ADDR_VAR 0 9
41525: PUSH
41526: LD_VAR 0 23
41530: PUSH
41531: LD_VAR 0 24
41535: PUSH
41536: LD_VAR 0 25
41540: PUSH
41541: LD_VAR 0 26
41545: PUSH
41546: LD_VAR 0 27
41550: PUSH
41551: LD_VAR 0 28
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: PUSH
41564: LD_VAR 0 4
41568: PUSH
41569: LD_INT 1
41571: PLUS
41572: ARRAY
41573: ST_TO_ADDR
41574: GO 41577
41576: POP
41577: GO 42132
41579: LD_INT 2
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41593
41585: LD_INT 3
41587: DOUBLE
41588: EQUAL
41589: IFTRUE 41593
41591: GO 41649
41593: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41594: LD_ADDR_VAR 0 9
41598: PUSH
41599: LD_VAR 0 29
41603: PUSH
41604: LD_VAR 0 30
41608: PUSH
41609: LD_VAR 0 31
41613: PUSH
41614: LD_VAR 0 32
41618: PUSH
41619: LD_VAR 0 33
41623: PUSH
41624: LD_VAR 0 34
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: PUSH
41637: LD_VAR 0 4
41641: PUSH
41642: LD_INT 1
41644: PLUS
41645: ARRAY
41646: ST_TO_ADDR
41647: GO 42132
41649: LD_INT 16
41651: DOUBLE
41652: EQUAL
41653: IFTRUE 41711
41655: LD_INT 17
41657: DOUBLE
41658: EQUAL
41659: IFTRUE 41711
41661: LD_INT 18
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41711
41667: LD_INT 19
41669: DOUBLE
41670: EQUAL
41671: IFTRUE 41711
41673: LD_INT 22
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41711
41679: LD_INT 20
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41711
41685: LD_INT 21
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41711
41691: LD_INT 23
41693: DOUBLE
41694: EQUAL
41695: IFTRUE 41711
41697: LD_INT 24
41699: DOUBLE
41700: EQUAL
41701: IFTRUE 41711
41703: LD_INT 25
41705: DOUBLE
41706: EQUAL
41707: IFTRUE 41711
41709: GO 41767
41711: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41712: LD_ADDR_VAR 0 9
41716: PUSH
41717: LD_VAR 0 35
41721: PUSH
41722: LD_VAR 0 36
41726: PUSH
41727: LD_VAR 0 37
41731: PUSH
41732: LD_VAR 0 38
41736: PUSH
41737: LD_VAR 0 39
41741: PUSH
41742: LD_VAR 0 40
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: PUSH
41755: LD_VAR 0 4
41759: PUSH
41760: LD_INT 1
41762: PLUS
41763: ARRAY
41764: ST_TO_ADDR
41765: GO 42132
41767: LD_INT 6
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41823
41773: LD_INT 7
41775: DOUBLE
41776: EQUAL
41777: IFTRUE 41823
41779: LD_INT 8
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41823
41785: LD_INT 13
41787: DOUBLE
41788: EQUAL
41789: IFTRUE 41823
41791: LD_INT 12
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41823
41797: LD_INT 15
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41823
41803: LD_INT 11
41805: DOUBLE
41806: EQUAL
41807: IFTRUE 41823
41809: LD_INT 14
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41823
41815: LD_INT 10
41817: DOUBLE
41818: EQUAL
41819: IFTRUE 41823
41821: GO 41879
41823: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41824: LD_ADDR_VAR 0 9
41828: PUSH
41829: LD_VAR 0 41
41833: PUSH
41834: LD_VAR 0 42
41838: PUSH
41839: LD_VAR 0 43
41843: PUSH
41844: LD_VAR 0 44
41848: PUSH
41849: LD_VAR 0 45
41853: PUSH
41854: LD_VAR 0 46
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: PUSH
41867: LD_VAR 0 4
41871: PUSH
41872: LD_INT 1
41874: PLUS
41875: ARRAY
41876: ST_TO_ADDR
41877: GO 42132
41879: LD_INT 36
41881: DOUBLE
41882: EQUAL
41883: IFTRUE 41887
41885: GO 41943
41887: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41888: LD_ADDR_VAR 0 9
41892: PUSH
41893: LD_VAR 0 47
41897: PUSH
41898: LD_VAR 0 48
41902: PUSH
41903: LD_VAR 0 49
41907: PUSH
41908: LD_VAR 0 50
41912: PUSH
41913: LD_VAR 0 51
41917: PUSH
41918: LD_VAR 0 52
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: PUSH
41931: LD_VAR 0 4
41935: PUSH
41936: LD_INT 1
41938: PLUS
41939: ARRAY
41940: ST_TO_ADDR
41941: GO 42132
41943: LD_INT 4
41945: DOUBLE
41946: EQUAL
41947: IFTRUE 41969
41949: LD_INT 5
41951: DOUBLE
41952: EQUAL
41953: IFTRUE 41969
41955: LD_INT 34
41957: DOUBLE
41958: EQUAL
41959: IFTRUE 41969
41961: LD_INT 37
41963: DOUBLE
41964: EQUAL
41965: IFTRUE 41969
41967: GO 42025
41969: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41970: LD_ADDR_VAR 0 9
41974: PUSH
41975: LD_VAR 0 53
41979: PUSH
41980: LD_VAR 0 54
41984: PUSH
41985: LD_VAR 0 55
41989: PUSH
41990: LD_VAR 0 56
41994: PUSH
41995: LD_VAR 0 57
41999: PUSH
42000: LD_VAR 0 58
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: PUSH
42013: LD_VAR 0 4
42017: PUSH
42018: LD_INT 1
42020: PLUS
42021: ARRAY
42022: ST_TO_ADDR
42023: GO 42132
42025: LD_INT 31
42027: DOUBLE
42028: EQUAL
42029: IFTRUE 42075
42031: LD_INT 32
42033: DOUBLE
42034: EQUAL
42035: IFTRUE 42075
42037: LD_INT 33
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42075
42043: LD_INT 27
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42075
42049: LD_INT 26
42051: DOUBLE
42052: EQUAL
42053: IFTRUE 42075
42055: LD_INT 28
42057: DOUBLE
42058: EQUAL
42059: IFTRUE 42075
42061: LD_INT 29
42063: DOUBLE
42064: EQUAL
42065: IFTRUE 42075
42067: LD_INT 30
42069: DOUBLE
42070: EQUAL
42071: IFTRUE 42075
42073: GO 42131
42075: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42076: LD_ADDR_VAR 0 9
42080: PUSH
42081: LD_VAR 0 59
42085: PUSH
42086: LD_VAR 0 60
42090: PUSH
42091: LD_VAR 0 61
42095: PUSH
42096: LD_VAR 0 62
42100: PUSH
42101: LD_VAR 0 63
42105: PUSH
42106: LD_VAR 0 64
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: PUSH
42119: LD_VAR 0 4
42123: PUSH
42124: LD_INT 1
42126: PLUS
42127: ARRAY
42128: ST_TO_ADDR
42129: GO 42132
42131: POP
// temp_list2 = [ ] ;
42132: LD_ADDR_VAR 0 10
42136: PUSH
42137: EMPTY
42138: ST_TO_ADDR
// for i in temp_list do
42139: LD_ADDR_VAR 0 8
42143: PUSH
42144: LD_VAR 0 9
42148: PUSH
42149: FOR_IN
42150: IFFALSE 42202
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42152: LD_ADDR_VAR 0 10
42156: PUSH
42157: LD_VAR 0 10
42161: PUSH
42162: LD_VAR 0 8
42166: PUSH
42167: LD_INT 1
42169: ARRAY
42170: PUSH
42171: LD_VAR 0 2
42175: PLUS
42176: PUSH
42177: LD_VAR 0 8
42181: PUSH
42182: LD_INT 2
42184: ARRAY
42185: PUSH
42186: LD_VAR 0 3
42190: PLUS
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: EMPTY
42197: LIST
42198: ADD
42199: ST_TO_ADDR
42200: GO 42149
42202: POP
42203: POP
// result = temp_list2 ;
42204: LD_ADDR_VAR 0 7
42208: PUSH
42209: LD_VAR 0 10
42213: ST_TO_ADDR
// end ;
42214: LD_VAR 0 7
42218: RET
// export function EnemyInRange ( unit , dist ) ; begin
42219: LD_INT 0
42221: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42222: LD_ADDR_VAR 0 3
42226: PUSH
42227: LD_VAR 0 1
42231: PPUSH
42232: CALL_OW 255
42236: PPUSH
42237: LD_VAR 0 1
42241: PPUSH
42242: CALL_OW 250
42246: PPUSH
42247: LD_VAR 0 1
42251: PPUSH
42252: CALL_OW 251
42256: PPUSH
42257: LD_VAR 0 2
42261: PPUSH
42262: CALL 15592 0 4
42266: PUSH
42267: LD_INT 4
42269: ARRAY
42270: ST_TO_ADDR
// end ;
42271: LD_VAR 0 3
42275: RET
// export function PlayerSeeMe ( unit ) ; begin
42276: LD_INT 0
42278: PPUSH
// result := See ( your_side , unit ) ;
42279: LD_ADDR_VAR 0 2
42283: PUSH
42284: LD_OWVAR 2
42288: PPUSH
42289: LD_VAR 0 1
42293: PPUSH
42294: CALL_OW 292
42298: ST_TO_ADDR
// end ;
42299: LD_VAR 0 2
42303: RET
// export function ReverseDir ( unit ) ; begin
42304: LD_INT 0
42306: PPUSH
// if not unit then
42307: LD_VAR 0 1
42311: NOT
42312: IFFALSE 42316
// exit ;
42314: GO 42339
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42316: LD_ADDR_VAR 0 2
42320: PUSH
42321: LD_VAR 0 1
42325: PPUSH
42326: CALL_OW 254
42330: PUSH
42331: LD_INT 3
42333: PLUS
42334: PUSH
42335: LD_INT 6
42337: MOD
42338: ST_TO_ADDR
// end ;
42339: LD_VAR 0 2
42343: RET
// export function ReverseArray ( array ) ; var i ; begin
42344: LD_INT 0
42346: PPUSH
42347: PPUSH
// if not array then
42348: LD_VAR 0 1
42352: NOT
42353: IFFALSE 42357
// exit ;
42355: GO 42412
// result := [ ] ;
42357: LD_ADDR_VAR 0 2
42361: PUSH
42362: EMPTY
42363: ST_TO_ADDR
// for i := array downto 1 do
42364: LD_ADDR_VAR 0 3
42368: PUSH
42369: DOUBLE
42370: LD_VAR 0 1
42374: INC
42375: ST_TO_ADDR
42376: LD_INT 1
42378: PUSH
42379: FOR_DOWNTO
42380: IFFALSE 42410
// result := Join ( result , array [ i ] ) ;
42382: LD_ADDR_VAR 0 2
42386: PUSH
42387: LD_VAR 0 2
42391: PPUSH
42392: LD_VAR 0 1
42396: PUSH
42397: LD_VAR 0 3
42401: ARRAY
42402: PPUSH
42403: CALL 47077 0 2
42407: ST_TO_ADDR
42408: GO 42379
42410: POP
42411: POP
// end ;
42412: LD_VAR 0 2
42416: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42417: LD_INT 0
42419: PPUSH
42420: PPUSH
42421: PPUSH
42422: PPUSH
42423: PPUSH
42424: PPUSH
// if not unit or not hexes then
42425: LD_VAR 0 1
42429: NOT
42430: PUSH
42431: LD_VAR 0 2
42435: NOT
42436: OR
42437: IFFALSE 42441
// exit ;
42439: GO 42564
// dist := 9999 ;
42441: LD_ADDR_VAR 0 5
42445: PUSH
42446: LD_INT 9999
42448: ST_TO_ADDR
// for i = 1 to hexes do
42449: LD_ADDR_VAR 0 4
42453: PUSH
42454: DOUBLE
42455: LD_INT 1
42457: DEC
42458: ST_TO_ADDR
42459: LD_VAR 0 2
42463: PUSH
42464: FOR_TO
42465: IFFALSE 42552
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42467: LD_ADDR_VAR 0 6
42471: PUSH
42472: LD_VAR 0 1
42476: PPUSH
42477: LD_VAR 0 2
42481: PUSH
42482: LD_VAR 0 4
42486: ARRAY
42487: PUSH
42488: LD_INT 1
42490: ARRAY
42491: PPUSH
42492: LD_VAR 0 2
42496: PUSH
42497: LD_VAR 0 4
42501: ARRAY
42502: PUSH
42503: LD_INT 2
42505: ARRAY
42506: PPUSH
42507: CALL_OW 297
42511: ST_TO_ADDR
// if tdist < dist then
42512: LD_VAR 0 6
42516: PUSH
42517: LD_VAR 0 5
42521: LESS
42522: IFFALSE 42550
// begin hex := hexes [ i ] ;
42524: LD_ADDR_VAR 0 8
42528: PUSH
42529: LD_VAR 0 2
42533: PUSH
42534: LD_VAR 0 4
42538: ARRAY
42539: ST_TO_ADDR
// dist := tdist ;
42540: LD_ADDR_VAR 0 5
42544: PUSH
42545: LD_VAR 0 6
42549: ST_TO_ADDR
// end ; end ;
42550: GO 42464
42552: POP
42553: POP
// result := hex ;
42554: LD_ADDR_VAR 0 3
42558: PUSH
42559: LD_VAR 0 8
42563: ST_TO_ADDR
// end ;
42564: LD_VAR 0 3
42568: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42569: LD_INT 0
42571: PPUSH
42572: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42573: LD_VAR 0 1
42577: NOT
42578: PUSH
42579: LD_VAR 0 1
42583: PUSH
42584: LD_INT 21
42586: PUSH
42587: LD_INT 2
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 23
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PPUSH
42608: CALL_OW 69
42612: IN
42613: NOT
42614: OR
42615: IFFALSE 42619
// exit ;
42617: GO 42666
// for i = 1 to 3 do
42619: LD_ADDR_VAR 0 3
42623: PUSH
42624: DOUBLE
42625: LD_INT 1
42627: DEC
42628: ST_TO_ADDR
42629: LD_INT 3
42631: PUSH
42632: FOR_TO
42633: IFFALSE 42664
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42635: LD_VAR 0 1
42639: PPUSH
42640: CALL_OW 250
42644: PPUSH
42645: LD_VAR 0 1
42649: PPUSH
42650: CALL_OW 251
42654: PPUSH
42655: LD_INT 1
42657: PPUSH
42658: CALL_OW 453
42662: GO 42632
42664: POP
42665: POP
// end ;
42666: LD_VAR 0 2
42670: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42671: LD_INT 0
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
42678: PPUSH
// if not unit or not enemy_unit then
42679: LD_VAR 0 1
42683: NOT
42684: PUSH
42685: LD_VAR 0 2
42689: NOT
42690: OR
42691: IFFALSE 42695
// exit ;
42693: GO 43162
// if GetLives ( i ) < 250 then
42695: LD_VAR 0 4
42699: PPUSH
42700: CALL_OW 256
42704: PUSH
42705: LD_INT 250
42707: LESS
42708: IFFALSE 42721
// begin ComAutodestruct ( i ) ;
42710: LD_VAR 0 4
42714: PPUSH
42715: CALL 42569 0 1
// exit ;
42719: GO 43162
// end ; x := GetX ( enemy_unit ) ;
42721: LD_ADDR_VAR 0 7
42725: PUSH
42726: LD_VAR 0 2
42730: PPUSH
42731: CALL_OW 250
42735: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42736: LD_ADDR_VAR 0 8
42740: PUSH
42741: LD_VAR 0 2
42745: PPUSH
42746: CALL_OW 251
42750: ST_TO_ADDR
// if not x or not y then
42751: LD_VAR 0 7
42755: NOT
42756: PUSH
42757: LD_VAR 0 8
42761: NOT
42762: OR
42763: IFFALSE 42767
// exit ;
42765: GO 43162
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42767: LD_ADDR_VAR 0 6
42771: PUSH
42772: LD_VAR 0 7
42776: PPUSH
42777: LD_INT 0
42779: PPUSH
42780: LD_INT 4
42782: PPUSH
42783: CALL_OW 272
42787: PUSH
42788: LD_VAR 0 8
42792: PPUSH
42793: LD_INT 0
42795: PPUSH
42796: LD_INT 4
42798: PPUSH
42799: CALL_OW 273
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_VAR 0 7
42812: PPUSH
42813: LD_INT 1
42815: PPUSH
42816: LD_INT 4
42818: PPUSH
42819: CALL_OW 272
42823: PUSH
42824: LD_VAR 0 8
42828: PPUSH
42829: LD_INT 1
42831: PPUSH
42832: LD_INT 4
42834: PPUSH
42835: CALL_OW 273
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_VAR 0 7
42848: PPUSH
42849: LD_INT 2
42851: PPUSH
42852: LD_INT 4
42854: PPUSH
42855: CALL_OW 272
42859: PUSH
42860: LD_VAR 0 8
42864: PPUSH
42865: LD_INT 2
42867: PPUSH
42868: LD_INT 4
42870: PPUSH
42871: CALL_OW 273
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_VAR 0 7
42884: PPUSH
42885: LD_INT 3
42887: PPUSH
42888: LD_INT 4
42890: PPUSH
42891: CALL_OW 272
42895: PUSH
42896: LD_VAR 0 8
42900: PPUSH
42901: LD_INT 3
42903: PPUSH
42904: LD_INT 4
42906: PPUSH
42907: CALL_OW 273
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_VAR 0 7
42920: PPUSH
42921: LD_INT 4
42923: PPUSH
42924: LD_INT 4
42926: PPUSH
42927: CALL_OW 272
42931: PUSH
42932: LD_VAR 0 8
42936: PPUSH
42937: LD_INT 4
42939: PPUSH
42940: LD_INT 4
42942: PPUSH
42943: CALL_OW 273
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_VAR 0 7
42956: PPUSH
42957: LD_INT 5
42959: PPUSH
42960: LD_INT 4
42962: PPUSH
42963: CALL_OW 272
42967: PUSH
42968: LD_VAR 0 8
42972: PPUSH
42973: LD_INT 5
42975: PPUSH
42976: LD_INT 4
42978: PPUSH
42979: CALL_OW 273
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: ST_TO_ADDR
// for i = tmp downto 1 do
42996: LD_ADDR_VAR 0 4
43000: PUSH
43001: DOUBLE
43002: LD_VAR 0 6
43006: INC
43007: ST_TO_ADDR
43008: LD_INT 1
43010: PUSH
43011: FOR_DOWNTO
43012: IFFALSE 43113
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43014: LD_VAR 0 6
43018: PUSH
43019: LD_VAR 0 4
43023: ARRAY
43024: PUSH
43025: LD_INT 1
43027: ARRAY
43028: PPUSH
43029: LD_VAR 0 6
43033: PUSH
43034: LD_VAR 0 4
43038: ARRAY
43039: PUSH
43040: LD_INT 2
43042: ARRAY
43043: PPUSH
43044: CALL_OW 488
43048: NOT
43049: PUSH
43050: LD_VAR 0 6
43054: PUSH
43055: LD_VAR 0 4
43059: ARRAY
43060: PUSH
43061: LD_INT 1
43063: ARRAY
43064: PPUSH
43065: LD_VAR 0 6
43069: PUSH
43070: LD_VAR 0 4
43074: ARRAY
43075: PUSH
43076: LD_INT 2
43078: ARRAY
43079: PPUSH
43080: CALL_OW 428
43084: PUSH
43085: LD_INT 0
43087: NONEQUAL
43088: OR
43089: IFFALSE 43111
// tmp := Delete ( tmp , i ) ;
43091: LD_ADDR_VAR 0 6
43095: PUSH
43096: LD_VAR 0 6
43100: PPUSH
43101: LD_VAR 0 4
43105: PPUSH
43106: CALL_OW 3
43110: ST_TO_ADDR
43111: GO 43011
43113: POP
43114: POP
// j := GetClosestHex ( unit , tmp ) ;
43115: LD_ADDR_VAR 0 5
43119: PUSH
43120: LD_VAR 0 1
43124: PPUSH
43125: LD_VAR 0 6
43129: PPUSH
43130: CALL 42417 0 2
43134: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43135: LD_VAR 0 1
43139: PPUSH
43140: LD_VAR 0 5
43144: PUSH
43145: LD_INT 1
43147: ARRAY
43148: PPUSH
43149: LD_VAR 0 5
43153: PUSH
43154: LD_INT 2
43156: ARRAY
43157: PPUSH
43158: CALL_OW 111
// end ;
43162: LD_VAR 0 3
43166: RET
// export function PrepareApemanSoldier ( ) ; begin
43167: LD_INT 0
43169: PPUSH
// uc_nation := 0 ;
43170: LD_ADDR_OWVAR 21
43174: PUSH
43175: LD_INT 0
43177: ST_TO_ADDR
// hc_sex := sex_male ;
43178: LD_ADDR_OWVAR 27
43182: PUSH
43183: LD_INT 1
43185: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43186: LD_ADDR_OWVAR 28
43190: PUSH
43191: LD_INT 15
43193: ST_TO_ADDR
// hc_gallery :=  ;
43194: LD_ADDR_OWVAR 33
43198: PUSH
43199: LD_STRING 
43201: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43202: LD_ADDR_OWVAR 31
43206: PUSH
43207: LD_INT 0
43209: PPUSH
43210: LD_INT 3
43212: PPUSH
43213: CALL_OW 12
43217: PUSH
43218: LD_INT 0
43220: PPUSH
43221: LD_INT 3
43223: PPUSH
43224: CALL_OW 12
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: ST_TO_ADDR
// end ;
43241: LD_VAR 0 1
43245: RET
// export function PrepareApemanEngineer ( ) ; begin
43246: LD_INT 0
43248: PPUSH
// uc_nation := 0 ;
43249: LD_ADDR_OWVAR 21
43253: PUSH
43254: LD_INT 0
43256: ST_TO_ADDR
// hc_sex := sex_male ;
43257: LD_ADDR_OWVAR 27
43261: PUSH
43262: LD_INT 1
43264: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43265: LD_ADDR_OWVAR 28
43269: PUSH
43270: LD_INT 16
43272: ST_TO_ADDR
// hc_gallery :=  ;
43273: LD_ADDR_OWVAR 33
43277: PUSH
43278: LD_STRING 
43280: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43281: LD_ADDR_OWVAR 31
43285: PUSH
43286: LD_INT 0
43288: PPUSH
43289: LD_INT 3
43291: PPUSH
43292: CALL_OW 12
43296: PUSH
43297: LD_INT 0
43299: PPUSH
43300: LD_INT 3
43302: PPUSH
43303: CALL_OW 12
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// end ;
43320: LD_VAR 0 1
43324: RET
// export function PrepareApeman ( agressivity ) ; begin
43325: LD_INT 0
43327: PPUSH
// uc_side := 0 ;
43328: LD_ADDR_OWVAR 20
43332: PUSH
43333: LD_INT 0
43335: ST_TO_ADDR
// uc_nation := 0 ;
43336: LD_ADDR_OWVAR 21
43340: PUSH
43341: LD_INT 0
43343: ST_TO_ADDR
// hc_sex := sex_male ;
43344: LD_ADDR_OWVAR 27
43348: PUSH
43349: LD_INT 1
43351: ST_TO_ADDR
// hc_class := class_apeman ;
43352: LD_ADDR_OWVAR 28
43356: PUSH
43357: LD_INT 12
43359: ST_TO_ADDR
// hc_gallery :=  ;
43360: LD_ADDR_OWVAR 33
43364: PUSH
43365: LD_STRING 
43367: ST_TO_ADDR
// if agressivity = 0 then
43368: LD_VAR 0 1
43372: PUSH
43373: LD_INT 0
43375: EQUAL
43376: IFFALSE 43388
// hc_agressivity := 0 else
43378: LD_ADDR_OWVAR 35
43382: PUSH
43383: LD_INT 0
43385: ST_TO_ADDR
43386: GO 43409
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43388: LD_ADDR_OWVAR 35
43392: PUSH
43393: LD_VAR 0 1
43397: NEG
43398: PPUSH
43399: LD_VAR 0 1
43403: PPUSH
43404: CALL_OW 12
43408: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43409: LD_ADDR_OWVAR 31
43413: PUSH
43414: LD_INT 0
43416: PPUSH
43417: LD_INT 3
43419: PPUSH
43420: CALL_OW 12
43424: PUSH
43425: LD_INT 0
43427: PPUSH
43428: LD_INT 3
43430: PPUSH
43431: CALL_OW 12
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: ST_TO_ADDR
// end ;
43448: LD_VAR 0 2
43452: RET
// export function PrepareTiger ( agressivity ) ; begin
43453: LD_INT 0
43455: PPUSH
// uc_side := 0 ;
43456: LD_ADDR_OWVAR 20
43460: PUSH
43461: LD_INT 0
43463: ST_TO_ADDR
// uc_nation := 0 ;
43464: LD_ADDR_OWVAR 21
43468: PUSH
43469: LD_INT 0
43471: ST_TO_ADDR
// hc_class := class_tiger ;
43472: LD_ADDR_OWVAR 28
43476: PUSH
43477: LD_INT 14
43479: ST_TO_ADDR
// hc_gallery :=  ;
43480: LD_ADDR_OWVAR 33
43484: PUSH
43485: LD_STRING 
43487: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43488: LD_ADDR_OWVAR 35
43492: PUSH
43493: LD_VAR 0 1
43497: NEG
43498: PPUSH
43499: LD_VAR 0 1
43503: PPUSH
43504: CALL_OW 12
43508: ST_TO_ADDR
// end ;
43509: LD_VAR 0 2
43513: RET
// export function PrepareEnchidna ( ) ; begin
43514: LD_INT 0
43516: PPUSH
// uc_side := 0 ;
43517: LD_ADDR_OWVAR 20
43521: PUSH
43522: LD_INT 0
43524: ST_TO_ADDR
// uc_nation := 0 ;
43525: LD_ADDR_OWVAR 21
43529: PUSH
43530: LD_INT 0
43532: ST_TO_ADDR
// hc_class := class_baggie ;
43533: LD_ADDR_OWVAR 28
43537: PUSH
43538: LD_INT 13
43540: ST_TO_ADDR
// hc_gallery :=  ;
43541: LD_ADDR_OWVAR 33
43545: PUSH
43546: LD_STRING 
43548: ST_TO_ADDR
// end ;
43549: LD_VAR 0 1
43553: RET
// export function PrepareFrog ( ) ; begin
43554: LD_INT 0
43556: PPUSH
// uc_side := 0 ;
43557: LD_ADDR_OWVAR 20
43561: PUSH
43562: LD_INT 0
43564: ST_TO_ADDR
// uc_nation := 0 ;
43565: LD_ADDR_OWVAR 21
43569: PUSH
43570: LD_INT 0
43572: ST_TO_ADDR
// hc_class := class_frog ;
43573: LD_ADDR_OWVAR 28
43577: PUSH
43578: LD_INT 19
43580: ST_TO_ADDR
// hc_gallery :=  ;
43581: LD_ADDR_OWVAR 33
43585: PUSH
43586: LD_STRING 
43588: ST_TO_ADDR
// end ;
43589: LD_VAR 0 1
43593: RET
// export function PrepareFish ( ) ; begin
43594: LD_INT 0
43596: PPUSH
// uc_side := 0 ;
43597: LD_ADDR_OWVAR 20
43601: PUSH
43602: LD_INT 0
43604: ST_TO_ADDR
// uc_nation := 0 ;
43605: LD_ADDR_OWVAR 21
43609: PUSH
43610: LD_INT 0
43612: ST_TO_ADDR
// hc_class := class_fish ;
43613: LD_ADDR_OWVAR 28
43617: PUSH
43618: LD_INT 20
43620: ST_TO_ADDR
// hc_gallery :=  ;
43621: LD_ADDR_OWVAR 33
43625: PUSH
43626: LD_STRING 
43628: ST_TO_ADDR
// end ;
43629: LD_VAR 0 1
43633: RET
// export function PrepareBird ( ) ; begin
43634: LD_INT 0
43636: PPUSH
// uc_side := 0 ;
43637: LD_ADDR_OWVAR 20
43641: PUSH
43642: LD_INT 0
43644: ST_TO_ADDR
// uc_nation := 0 ;
43645: LD_ADDR_OWVAR 21
43649: PUSH
43650: LD_INT 0
43652: ST_TO_ADDR
// hc_class := class_phororhacos ;
43653: LD_ADDR_OWVAR 28
43657: PUSH
43658: LD_INT 18
43660: ST_TO_ADDR
// hc_gallery :=  ;
43661: LD_ADDR_OWVAR 33
43665: PUSH
43666: LD_STRING 
43668: ST_TO_ADDR
// end ;
43669: LD_VAR 0 1
43673: RET
// export function PrepareHorse ( ) ; begin
43674: LD_INT 0
43676: PPUSH
// uc_side := 0 ;
43677: LD_ADDR_OWVAR 20
43681: PUSH
43682: LD_INT 0
43684: ST_TO_ADDR
// uc_nation := 0 ;
43685: LD_ADDR_OWVAR 21
43689: PUSH
43690: LD_INT 0
43692: ST_TO_ADDR
// hc_class := class_horse ;
43693: LD_ADDR_OWVAR 28
43697: PUSH
43698: LD_INT 21
43700: ST_TO_ADDR
// hc_gallery :=  ;
43701: LD_ADDR_OWVAR 33
43705: PUSH
43706: LD_STRING 
43708: ST_TO_ADDR
// end ;
43709: LD_VAR 0 1
43713: RET
// export function PrepareMastodont ( ) ; begin
43714: LD_INT 0
43716: PPUSH
// uc_side := 0 ;
43717: LD_ADDR_OWVAR 20
43721: PUSH
43722: LD_INT 0
43724: ST_TO_ADDR
// uc_nation := 0 ;
43725: LD_ADDR_OWVAR 21
43729: PUSH
43730: LD_INT 0
43732: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43733: LD_ADDR_OWVAR 37
43737: PUSH
43738: LD_INT 31
43740: ST_TO_ADDR
// vc_control := control_rider ;
43741: LD_ADDR_OWVAR 38
43745: PUSH
43746: LD_INT 4
43748: ST_TO_ADDR
// end ;
43749: LD_VAR 0 1
43753: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43754: LD_INT 0
43756: PPUSH
43757: PPUSH
43758: PPUSH
// uc_side = 0 ;
43759: LD_ADDR_OWVAR 20
43763: PUSH
43764: LD_INT 0
43766: ST_TO_ADDR
// uc_nation = 0 ;
43767: LD_ADDR_OWVAR 21
43771: PUSH
43772: LD_INT 0
43774: ST_TO_ADDR
// InitHc_All ( ) ;
43775: CALL_OW 584
// InitVc ;
43779: CALL_OW 20
// if mastodonts then
43783: LD_VAR 0 6
43787: IFFALSE 43854
// for i = 1 to mastodonts do
43789: LD_ADDR_VAR 0 11
43793: PUSH
43794: DOUBLE
43795: LD_INT 1
43797: DEC
43798: ST_TO_ADDR
43799: LD_VAR 0 6
43803: PUSH
43804: FOR_TO
43805: IFFALSE 43852
// begin vc_chassis := 31 ;
43807: LD_ADDR_OWVAR 37
43811: PUSH
43812: LD_INT 31
43814: ST_TO_ADDR
// vc_control := control_rider ;
43815: LD_ADDR_OWVAR 38
43819: PUSH
43820: LD_INT 4
43822: ST_TO_ADDR
// animal := CreateVehicle ;
43823: LD_ADDR_VAR 0 12
43827: PUSH
43828: CALL_OW 45
43832: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43833: LD_VAR 0 12
43837: PPUSH
43838: LD_VAR 0 8
43842: PPUSH
43843: LD_INT 0
43845: PPUSH
43846: CALL 45982 0 3
// end ;
43850: GO 43804
43852: POP
43853: POP
// if horses then
43854: LD_VAR 0 5
43858: IFFALSE 43925
// for i = 1 to horses do
43860: LD_ADDR_VAR 0 11
43864: PUSH
43865: DOUBLE
43866: LD_INT 1
43868: DEC
43869: ST_TO_ADDR
43870: LD_VAR 0 5
43874: PUSH
43875: FOR_TO
43876: IFFALSE 43923
// begin hc_class := 21 ;
43878: LD_ADDR_OWVAR 28
43882: PUSH
43883: LD_INT 21
43885: ST_TO_ADDR
// hc_gallery :=  ;
43886: LD_ADDR_OWVAR 33
43890: PUSH
43891: LD_STRING 
43893: ST_TO_ADDR
// animal := CreateHuman ;
43894: LD_ADDR_VAR 0 12
43898: PUSH
43899: CALL_OW 44
43903: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43904: LD_VAR 0 12
43908: PPUSH
43909: LD_VAR 0 8
43913: PPUSH
43914: LD_INT 0
43916: PPUSH
43917: CALL 45982 0 3
// end ;
43921: GO 43875
43923: POP
43924: POP
// if birds then
43925: LD_VAR 0 1
43929: IFFALSE 43996
// for i = 1 to birds do
43931: LD_ADDR_VAR 0 11
43935: PUSH
43936: DOUBLE
43937: LD_INT 1
43939: DEC
43940: ST_TO_ADDR
43941: LD_VAR 0 1
43945: PUSH
43946: FOR_TO
43947: IFFALSE 43994
// begin hc_class := 18 ;
43949: LD_ADDR_OWVAR 28
43953: PUSH
43954: LD_INT 18
43956: ST_TO_ADDR
// hc_gallery =  ;
43957: LD_ADDR_OWVAR 33
43961: PUSH
43962: LD_STRING 
43964: ST_TO_ADDR
// animal := CreateHuman ;
43965: LD_ADDR_VAR 0 12
43969: PUSH
43970: CALL_OW 44
43974: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43975: LD_VAR 0 12
43979: PPUSH
43980: LD_VAR 0 8
43984: PPUSH
43985: LD_INT 0
43987: PPUSH
43988: CALL 45982 0 3
// end ;
43992: GO 43946
43994: POP
43995: POP
// if tigers then
43996: LD_VAR 0 2
44000: IFFALSE 44084
// for i = 1 to tigers do
44002: LD_ADDR_VAR 0 11
44006: PUSH
44007: DOUBLE
44008: LD_INT 1
44010: DEC
44011: ST_TO_ADDR
44012: LD_VAR 0 2
44016: PUSH
44017: FOR_TO
44018: IFFALSE 44082
// begin hc_class = class_tiger ;
44020: LD_ADDR_OWVAR 28
44024: PUSH
44025: LD_INT 14
44027: ST_TO_ADDR
// hc_gallery =  ;
44028: LD_ADDR_OWVAR 33
44032: PUSH
44033: LD_STRING 
44035: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44036: LD_ADDR_OWVAR 35
44040: PUSH
44041: LD_INT 7
44043: NEG
44044: PPUSH
44045: LD_INT 7
44047: PPUSH
44048: CALL_OW 12
44052: ST_TO_ADDR
// animal := CreateHuman ;
44053: LD_ADDR_VAR 0 12
44057: PUSH
44058: CALL_OW 44
44062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44063: LD_VAR 0 12
44067: PPUSH
44068: LD_VAR 0 8
44072: PPUSH
44073: LD_INT 0
44075: PPUSH
44076: CALL 45982 0 3
// end ;
44080: GO 44017
44082: POP
44083: POP
// if apemans then
44084: LD_VAR 0 3
44088: IFFALSE 44211
// for i = 1 to apemans do
44090: LD_ADDR_VAR 0 11
44094: PUSH
44095: DOUBLE
44096: LD_INT 1
44098: DEC
44099: ST_TO_ADDR
44100: LD_VAR 0 3
44104: PUSH
44105: FOR_TO
44106: IFFALSE 44209
// begin hc_class = class_apeman ;
44108: LD_ADDR_OWVAR 28
44112: PUSH
44113: LD_INT 12
44115: ST_TO_ADDR
// hc_gallery =  ;
44116: LD_ADDR_OWVAR 33
44120: PUSH
44121: LD_STRING 
44123: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44124: LD_ADDR_OWVAR 35
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PPUSH
44133: LD_INT 2
44135: PPUSH
44136: CALL_OW 12
44140: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44141: LD_ADDR_OWVAR 31
44145: PUSH
44146: LD_INT 1
44148: PPUSH
44149: LD_INT 3
44151: PPUSH
44152: CALL_OW 12
44156: PUSH
44157: LD_INT 1
44159: PPUSH
44160: LD_INT 3
44162: PPUSH
44163: CALL_OW 12
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: ST_TO_ADDR
// animal := CreateHuman ;
44180: LD_ADDR_VAR 0 12
44184: PUSH
44185: CALL_OW 44
44189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44190: LD_VAR 0 12
44194: PPUSH
44195: LD_VAR 0 8
44199: PPUSH
44200: LD_INT 0
44202: PPUSH
44203: CALL 45982 0 3
// end ;
44207: GO 44105
44209: POP
44210: POP
// if enchidnas then
44211: LD_VAR 0 4
44215: IFFALSE 44282
// for i = 1 to enchidnas do
44217: LD_ADDR_VAR 0 11
44221: PUSH
44222: DOUBLE
44223: LD_INT 1
44225: DEC
44226: ST_TO_ADDR
44227: LD_VAR 0 4
44231: PUSH
44232: FOR_TO
44233: IFFALSE 44280
// begin hc_class = 13 ;
44235: LD_ADDR_OWVAR 28
44239: PUSH
44240: LD_INT 13
44242: ST_TO_ADDR
// hc_gallery =  ;
44243: LD_ADDR_OWVAR 33
44247: PUSH
44248: LD_STRING 
44250: ST_TO_ADDR
// animal := CreateHuman ;
44251: LD_ADDR_VAR 0 12
44255: PUSH
44256: CALL_OW 44
44260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44261: LD_VAR 0 12
44265: PPUSH
44266: LD_VAR 0 8
44270: PPUSH
44271: LD_INT 0
44273: PPUSH
44274: CALL 45982 0 3
// end ;
44278: GO 44232
44280: POP
44281: POP
// if fishes then
44282: LD_VAR 0 7
44286: IFFALSE 44353
// for i = 1 to fishes do
44288: LD_ADDR_VAR 0 11
44292: PUSH
44293: DOUBLE
44294: LD_INT 1
44296: DEC
44297: ST_TO_ADDR
44298: LD_VAR 0 7
44302: PUSH
44303: FOR_TO
44304: IFFALSE 44351
// begin hc_class = 20 ;
44306: LD_ADDR_OWVAR 28
44310: PUSH
44311: LD_INT 20
44313: ST_TO_ADDR
// hc_gallery =  ;
44314: LD_ADDR_OWVAR 33
44318: PUSH
44319: LD_STRING 
44321: ST_TO_ADDR
// animal := CreateHuman ;
44322: LD_ADDR_VAR 0 12
44326: PUSH
44327: CALL_OW 44
44331: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44332: LD_VAR 0 12
44336: PPUSH
44337: LD_VAR 0 9
44341: PPUSH
44342: LD_INT 0
44344: PPUSH
44345: CALL 45982 0 3
// end ;
44349: GO 44303
44351: POP
44352: POP
// end ;
44353: LD_VAR 0 10
44357: RET
// export function WantHeal ( sci , unit ) ; begin
44358: LD_INT 0
44360: PPUSH
// if GetTaskList ( sci ) > 0 then
44361: LD_VAR 0 1
44365: PPUSH
44366: CALL_OW 437
44370: PUSH
44371: LD_INT 0
44373: GREATER
44374: IFFALSE 44444
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44376: LD_VAR 0 1
44380: PPUSH
44381: CALL_OW 437
44385: PUSH
44386: LD_INT 1
44388: ARRAY
44389: PUSH
44390: LD_INT 1
44392: ARRAY
44393: PUSH
44394: LD_STRING l
44396: EQUAL
44397: PUSH
44398: LD_VAR 0 1
44402: PPUSH
44403: CALL_OW 437
44407: PUSH
44408: LD_INT 1
44410: ARRAY
44411: PUSH
44412: LD_INT 4
44414: ARRAY
44415: PUSH
44416: LD_VAR 0 2
44420: EQUAL
44421: AND
44422: IFFALSE 44434
// result := true else
44424: LD_ADDR_VAR 0 3
44428: PUSH
44429: LD_INT 1
44431: ST_TO_ADDR
44432: GO 44442
// result := false ;
44434: LD_ADDR_VAR 0 3
44438: PUSH
44439: LD_INT 0
44441: ST_TO_ADDR
// end else
44442: GO 44452
// result := false ;
44444: LD_ADDR_VAR 0 3
44448: PUSH
44449: LD_INT 0
44451: ST_TO_ADDR
// end ;
44452: LD_VAR 0 3
44456: RET
// export function HealTarget ( sci ) ; begin
44457: LD_INT 0
44459: PPUSH
// if not sci then
44460: LD_VAR 0 1
44464: NOT
44465: IFFALSE 44469
// exit ;
44467: GO 44534
// result := 0 ;
44469: LD_ADDR_VAR 0 2
44473: PUSH
44474: LD_INT 0
44476: ST_TO_ADDR
// if GetTaskList ( sci ) then
44477: LD_VAR 0 1
44481: PPUSH
44482: CALL_OW 437
44486: IFFALSE 44534
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44488: LD_VAR 0 1
44492: PPUSH
44493: CALL_OW 437
44497: PUSH
44498: LD_INT 1
44500: ARRAY
44501: PUSH
44502: LD_INT 1
44504: ARRAY
44505: PUSH
44506: LD_STRING l
44508: EQUAL
44509: IFFALSE 44534
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44511: LD_ADDR_VAR 0 2
44515: PUSH
44516: LD_VAR 0 1
44520: PPUSH
44521: CALL_OW 437
44525: PUSH
44526: LD_INT 1
44528: ARRAY
44529: PUSH
44530: LD_INT 4
44532: ARRAY
44533: ST_TO_ADDR
// end ;
44534: LD_VAR 0 2
44538: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44539: LD_INT 0
44541: PPUSH
44542: PPUSH
44543: PPUSH
44544: PPUSH
// if not base_units then
44545: LD_VAR 0 1
44549: NOT
44550: IFFALSE 44554
// exit ;
44552: GO 44641
// result := false ;
44554: LD_ADDR_VAR 0 2
44558: PUSH
44559: LD_INT 0
44561: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44562: LD_ADDR_VAR 0 5
44566: PUSH
44567: LD_VAR 0 1
44571: PPUSH
44572: LD_INT 21
44574: PUSH
44575: LD_INT 3
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PPUSH
44582: CALL_OW 72
44586: ST_TO_ADDR
// if not tmp then
44587: LD_VAR 0 5
44591: NOT
44592: IFFALSE 44596
// exit ;
44594: GO 44641
// for i in tmp do
44596: LD_ADDR_VAR 0 3
44600: PUSH
44601: LD_VAR 0 5
44605: PUSH
44606: FOR_IN
44607: IFFALSE 44639
// begin result := EnemyInRange ( i , 22 ) ;
44609: LD_ADDR_VAR 0 2
44613: PUSH
44614: LD_VAR 0 3
44618: PPUSH
44619: LD_INT 22
44621: PPUSH
44622: CALL 42219 0 2
44626: ST_TO_ADDR
// if result then
44627: LD_VAR 0 2
44631: IFFALSE 44637
// exit ;
44633: POP
44634: POP
44635: GO 44641
// end ;
44637: GO 44606
44639: POP
44640: POP
// end ;
44641: LD_VAR 0 2
44645: RET
// export function FilterByTag ( units , tag ) ; begin
44646: LD_INT 0
44648: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44649: LD_ADDR_VAR 0 3
44653: PUSH
44654: LD_VAR 0 1
44658: PPUSH
44659: LD_INT 120
44661: PUSH
44662: LD_VAR 0 2
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PPUSH
44671: CALL_OW 72
44675: ST_TO_ADDR
// end ;
44676: LD_VAR 0 3
44680: RET
// export function IsDriver ( un ) ; begin
44681: LD_INT 0
44683: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44684: LD_ADDR_VAR 0 2
44688: PUSH
44689: LD_VAR 0 1
44693: PUSH
44694: LD_INT 55
44696: PUSH
44697: EMPTY
44698: LIST
44699: PPUSH
44700: CALL_OW 69
44704: IN
44705: ST_TO_ADDR
// end ;
44706: LD_VAR 0 2
44710: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44711: LD_INT 0
44713: PPUSH
44714: PPUSH
// list := [ ] ;
44715: LD_ADDR_VAR 0 5
44719: PUSH
44720: EMPTY
44721: ST_TO_ADDR
// case d of 0 :
44722: LD_VAR 0 3
44726: PUSH
44727: LD_INT 0
44729: DOUBLE
44730: EQUAL
44731: IFTRUE 44735
44733: GO 44868
44735: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44736: LD_ADDR_VAR 0 5
44740: PUSH
44741: LD_VAR 0 1
44745: PUSH
44746: LD_INT 4
44748: MINUS
44749: PUSH
44750: LD_VAR 0 2
44754: PUSH
44755: LD_INT 4
44757: MINUS
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: PUSH
44767: LD_VAR 0 1
44771: PUSH
44772: LD_INT 3
44774: MINUS
44775: PUSH
44776: LD_VAR 0 2
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: PUSH
44789: LD_VAR 0 1
44793: PUSH
44794: LD_INT 4
44796: PLUS
44797: PUSH
44798: LD_VAR 0 2
44802: PUSH
44803: LD_INT 4
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: PUSH
44811: LD_VAR 0 1
44815: PUSH
44816: LD_INT 3
44818: PLUS
44819: PUSH
44820: LD_VAR 0 2
44824: PUSH
44825: LD_INT 3
44827: PLUS
44828: PUSH
44829: LD_INT 5
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: PUSH
44837: LD_VAR 0 1
44841: PUSH
44842: LD_VAR 0 2
44846: PUSH
44847: LD_INT 4
44849: PLUS
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// end ; 1 :
44866: GO 45566
44868: LD_INT 1
44870: DOUBLE
44871: EQUAL
44872: IFTRUE 44876
44874: GO 45009
44876: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44877: LD_ADDR_VAR 0 5
44881: PUSH
44882: LD_VAR 0 1
44886: PUSH
44887: LD_VAR 0 2
44891: PUSH
44892: LD_INT 4
44894: MINUS
44895: PUSH
44896: LD_INT 3
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: PUSH
44904: LD_VAR 0 1
44908: PUSH
44909: LD_INT 3
44911: MINUS
44912: PUSH
44913: LD_VAR 0 2
44917: PUSH
44918: LD_INT 3
44920: MINUS
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: LIST
44929: PUSH
44930: LD_VAR 0 1
44934: PUSH
44935: LD_INT 4
44937: MINUS
44938: PUSH
44939: LD_VAR 0 2
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: LIST
44951: PUSH
44952: LD_VAR 0 1
44956: PUSH
44957: LD_VAR 0 2
44961: PUSH
44962: LD_INT 3
44964: PLUS
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: LIST
44973: PUSH
44974: LD_VAR 0 1
44978: PUSH
44979: LD_INT 4
44981: PLUS
44982: PUSH
44983: LD_VAR 0 2
44987: PUSH
44988: LD_INT 4
44990: PLUS
44991: PUSH
44992: LD_INT 5
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: ST_TO_ADDR
// end ; 2 :
45007: GO 45566
45009: LD_INT 2
45011: DOUBLE
45012: EQUAL
45013: IFTRUE 45017
45015: GO 45146
45017: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45018: LD_ADDR_VAR 0 5
45022: PUSH
45023: LD_VAR 0 1
45027: PUSH
45028: LD_VAR 0 2
45032: PUSH
45033: LD_INT 3
45035: MINUS
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: PUSH
45045: LD_VAR 0 1
45049: PUSH
45050: LD_INT 4
45052: PLUS
45053: PUSH
45054: LD_VAR 0 2
45058: PUSH
45059: LD_INT 4
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: LIST
45066: PUSH
45067: LD_VAR 0 1
45071: PUSH
45072: LD_VAR 0 2
45076: PUSH
45077: LD_INT 4
45079: PLUS
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: LIST
45088: PUSH
45089: LD_VAR 0 1
45093: PUSH
45094: LD_INT 3
45096: MINUS
45097: PUSH
45098: LD_VAR 0 2
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: PUSH
45111: LD_VAR 0 1
45115: PUSH
45116: LD_INT 4
45118: MINUS
45119: PUSH
45120: LD_VAR 0 2
45124: PUSH
45125: LD_INT 4
45127: MINUS
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: LIST
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// end ; 3 :
45144: GO 45566
45146: LD_INT 3
45148: DOUBLE
45149: EQUAL
45150: IFTRUE 45154
45152: GO 45287
45154: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45155: LD_ADDR_VAR 0 5
45159: PUSH
45160: LD_VAR 0 1
45164: PUSH
45165: LD_INT 3
45167: PLUS
45168: PUSH
45169: LD_VAR 0 2
45173: PUSH
45174: LD_INT 4
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: LIST
45181: PUSH
45182: LD_VAR 0 1
45186: PUSH
45187: LD_INT 4
45189: PLUS
45190: PUSH
45191: LD_VAR 0 2
45195: PUSH
45196: LD_INT 4
45198: PLUS
45199: PUSH
45200: LD_INT 5
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: LIST
45207: PUSH
45208: LD_VAR 0 1
45212: PUSH
45213: LD_INT 4
45215: MINUS
45216: PUSH
45217: LD_VAR 0 2
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: PUSH
45230: LD_VAR 0 1
45234: PUSH
45235: LD_VAR 0 2
45239: PUSH
45240: LD_INT 4
45242: MINUS
45243: PUSH
45244: LD_INT 3
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: PUSH
45252: LD_VAR 0 1
45256: PUSH
45257: LD_INT 3
45259: MINUS
45260: PUSH
45261: LD_VAR 0 2
45265: PUSH
45266: LD_INT 3
45268: MINUS
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: ST_TO_ADDR
// end ; 4 :
45285: GO 45566
45287: LD_INT 4
45289: DOUBLE
45290: EQUAL
45291: IFTRUE 45295
45293: GO 45428
45295: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45296: LD_ADDR_VAR 0 5
45300: PUSH
45301: LD_VAR 0 1
45305: PUSH
45306: LD_VAR 0 2
45310: PUSH
45311: LD_INT 4
45313: PLUS
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: PUSH
45323: LD_VAR 0 1
45327: PUSH
45328: LD_INT 3
45330: PLUS
45331: PUSH
45332: LD_VAR 0 2
45336: PUSH
45337: LD_INT 3
45339: PLUS
45340: PUSH
45341: LD_INT 5
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: LIST
45348: PUSH
45349: LD_VAR 0 1
45353: PUSH
45354: LD_INT 4
45356: PLUS
45357: PUSH
45358: LD_VAR 0 2
45362: PUSH
45363: LD_INT 4
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: PUSH
45371: LD_VAR 0 1
45375: PUSH
45376: LD_VAR 0 2
45380: PUSH
45381: LD_INT 3
45383: MINUS
45384: PUSH
45385: LD_INT 3
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: LIST
45392: PUSH
45393: LD_VAR 0 1
45397: PUSH
45398: LD_INT 4
45400: MINUS
45401: PUSH
45402: LD_VAR 0 2
45406: PUSH
45407: LD_INT 4
45409: MINUS
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: ST_TO_ADDR
// end ; 5 :
45426: GO 45566
45428: LD_INT 5
45430: DOUBLE
45431: EQUAL
45432: IFTRUE 45436
45434: GO 45565
45436: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45437: LD_ADDR_VAR 0 5
45441: PUSH
45442: LD_VAR 0 1
45446: PUSH
45447: LD_INT 4
45449: MINUS
45450: PUSH
45451: LD_VAR 0 2
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: LIST
45463: PUSH
45464: LD_VAR 0 1
45468: PUSH
45469: LD_VAR 0 2
45473: PUSH
45474: LD_INT 4
45476: MINUS
45477: PUSH
45478: LD_INT 3
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: PUSH
45486: LD_VAR 0 1
45490: PUSH
45491: LD_INT 4
45493: PLUS
45494: PUSH
45495: LD_VAR 0 2
45499: PUSH
45500: LD_INT 4
45502: PLUS
45503: PUSH
45504: LD_INT 5
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: PUSH
45512: LD_VAR 0 1
45516: PUSH
45517: LD_INT 3
45519: PLUS
45520: PUSH
45521: LD_VAR 0 2
45525: PUSH
45526: LD_INT 4
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: LIST
45533: PUSH
45534: LD_VAR 0 1
45538: PUSH
45539: LD_VAR 0 2
45543: PUSH
45544: LD_INT 3
45546: PLUS
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
// end ; end ;
45563: GO 45566
45565: POP
// result := list ;
45566: LD_ADDR_VAR 0 4
45570: PUSH
45571: LD_VAR 0 5
45575: ST_TO_ADDR
// end ;
45576: LD_VAR 0 4
45580: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45581: LD_INT 0
45583: PPUSH
45584: PPUSH
45585: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45586: LD_VAR 0 1
45590: NOT
45591: PUSH
45592: LD_VAR 0 2
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: LD_INT 3
45605: PUSH
45606: LD_INT 4
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: IN
45615: NOT
45616: OR
45617: IFFALSE 45621
// exit ;
45619: GO 45704
// tmp := [ ] ;
45621: LD_ADDR_VAR 0 5
45625: PUSH
45626: EMPTY
45627: ST_TO_ADDR
// for i in units do
45628: LD_ADDR_VAR 0 4
45632: PUSH
45633: LD_VAR 0 1
45637: PUSH
45638: FOR_IN
45639: IFFALSE 45673
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45641: LD_ADDR_VAR 0 5
45645: PUSH
45646: LD_VAR 0 5
45650: PPUSH
45651: LD_VAR 0 4
45655: PPUSH
45656: LD_VAR 0 2
45660: PPUSH
45661: CALL_OW 259
45665: PPUSH
45666: CALL 47077 0 2
45670: ST_TO_ADDR
45671: GO 45638
45673: POP
45674: POP
// if not tmp then
45675: LD_VAR 0 5
45679: NOT
45680: IFFALSE 45684
// exit ;
45682: GO 45704
// result := SortListByListDesc ( units , tmp ) ;
45684: LD_ADDR_VAR 0 3
45688: PUSH
45689: LD_VAR 0 1
45693: PPUSH
45694: LD_VAR 0 5
45698: PPUSH
45699: CALL_OW 77
45703: ST_TO_ADDR
// end ;
45704: LD_VAR 0 3
45708: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45709: LD_INT 0
45711: PPUSH
45712: PPUSH
45713: PPUSH
// result := false ;
45714: LD_ADDR_VAR 0 3
45718: PUSH
45719: LD_INT 0
45721: ST_TO_ADDR
// if not building then
45722: LD_VAR 0 2
45726: NOT
45727: IFFALSE 45731
// exit ;
45729: GO 45869
// x := GetX ( building ) ;
45731: LD_ADDR_VAR 0 4
45735: PUSH
45736: LD_VAR 0 2
45740: PPUSH
45741: CALL_OW 250
45745: ST_TO_ADDR
// y := GetY ( building ) ;
45746: LD_ADDR_VAR 0 5
45750: PUSH
45751: LD_VAR 0 2
45755: PPUSH
45756: CALL_OW 251
45760: ST_TO_ADDR
// if not x or not y then
45761: LD_VAR 0 4
45765: NOT
45766: PUSH
45767: LD_VAR 0 5
45771: NOT
45772: OR
45773: IFFALSE 45777
// exit ;
45775: GO 45869
// if GetTaskList ( unit ) then
45777: LD_VAR 0 1
45781: PPUSH
45782: CALL_OW 437
45786: IFFALSE 45869
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45788: LD_STRING e
45790: PUSH
45791: LD_VAR 0 1
45795: PPUSH
45796: CALL_OW 437
45800: PUSH
45801: LD_INT 1
45803: ARRAY
45804: PUSH
45805: LD_INT 1
45807: ARRAY
45808: EQUAL
45809: PUSH
45810: LD_VAR 0 4
45814: PUSH
45815: LD_VAR 0 1
45819: PPUSH
45820: CALL_OW 437
45824: PUSH
45825: LD_INT 1
45827: ARRAY
45828: PUSH
45829: LD_INT 2
45831: ARRAY
45832: EQUAL
45833: AND
45834: PUSH
45835: LD_VAR 0 5
45839: PUSH
45840: LD_VAR 0 1
45844: PPUSH
45845: CALL_OW 437
45849: PUSH
45850: LD_INT 1
45852: ARRAY
45853: PUSH
45854: LD_INT 3
45856: ARRAY
45857: EQUAL
45858: AND
45859: IFFALSE 45869
// result := true end ;
45861: LD_ADDR_VAR 0 3
45865: PUSH
45866: LD_INT 1
45868: ST_TO_ADDR
// end ;
45869: LD_VAR 0 3
45873: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45874: LD_INT 0
45876: PPUSH
// result := false ;
45877: LD_ADDR_VAR 0 4
45881: PUSH
45882: LD_INT 0
45884: ST_TO_ADDR
// if GetTaskList ( unit ) then
45885: LD_VAR 0 1
45889: PPUSH
45890: CALL_OW 437
45894: IFFALSE 45977
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45896: LD_STRING M
45898: PUSH
45899: LD_VAR 0 1
45903: PPUSH
45904: CALL_OW 437
45908: PUSH
45909: LD_INT 1
45911: ARRAY
45912: PUSH
45913: LD_INT 1
45915: ARRAY
45916: EQUAL
45917: PUSH
45918: LD_VAR 0 2
45922: PUSH
45923: LD_VAR 0 1
45927: PPUSH
45928: CALL_OW 437
45932: PUSH
45933: LD_INT 1
45935: ARRAY
45936: PUSH
45937: LD_INT 2
45939: ARRAY
45940: EQUAL
45941: AND
45942: PUSH
45943: LD_VAR 0 3
45947: PUSH
45948: LD_VAR 0 1
45952: PPUSH
45953: CALL_OW 437
45957: PUSH
45958: LD_INT 1
45960: ARRAY
45961: PUSH
45962: LD_INT 3
45964: ARRAY
45965: EQUAL
45966: AND
45967: IFFALSE 45977
// result := true ;
45969: LD_ADDR_VAR 0 4
45973: PUSH
45974: LD_INT 1
45976: ST_TO_ADDR
// end ; end ;
45977: LD_VAR 0 4
45981: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45982: LD_INT 0
45984: PPUSH
45985: PPUSH
45986: PPUSH
45987: PPUSH
// if not unit or not area then
45988: LD_VAR 0 1
45992: NOT
45993: PUSH
45994: LD_VAR 0 2
45998: NOT
45999: OR
46000: IFFALSE 46004
// exit ;
46002: GO 46180
// tmp := AreaToList ( area , i ) ;
46004: LD_ADDR_VAR 0 6
46008: PUSH
46009: LD_VAR 0 2
46013: PPUSH
46014: LD_VAR 0 5
46018: PPUSH
46019: CALL_OW 517
46023: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46024: LD_ADDR_VAR 0 5
46028: PUSH
46029: DOUBLE
46030: LD_INT 1
46032: DEC
46033: ST_TO_ADDR
46034: LD_VAR 0 6
46038: PUSH
46039: LD_INT 1
46041: ARRAY
46042: PUSH
46043: FOR_TO
46044: IFFALSE 46178
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46046: LD_ADDR_VAR 0 7
46050: PUSH
46051: LD_VAR 0 6
46055: PUSH
46056: LD_INT 1
46058: ARRAY
46059: PUSH
46060: LD_VAR 0 5
46064: ARRAY
46065: PUSH
46066: LD_VAR 0 6
46070: PUSH
46071: LD_INT 2
46073: ARRAY
46074: PUSH
46075: LD_VAR 0 5
46079: ARRAY
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46085: LD_INT 92
46087: PUSH
46088: LD_VAR 0 7
46092: PUSH
46093: LD_INT 1
46095: ARRAY
46096: PUSH
46097: LD_VAR 0 7
46101: PUSH
46102: LD_INT 2
46104: ARRAY
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: PPUSH
46115: CALL_OW 69
46119: PUSH
46120: LD_INT 0
46122: EQUAL
46123: IFFALSE 46176
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46125: LD_VAR 0 1
46129: PPUSH
46130: LD_VAR 0 7
46134: PUSH
46135: LD_INT 1
46137: ARRAY
46138: PPUSH
46139: LD_VAR 0 7
46143: PUSH
46144: LD_INT 2
46146: ARRAY
46147: PPUSH
46148: LD_VAR 0 3
46152: PPUSH
46153: CALL_OW 48
// result := IsPlaced ( unit ) ;
46157: LD_ADDR_VAR 0 4
46161: PUSH
46162: LD_VAR 0 1
46166: PPUSH
46167: CALL_OW 305
46171: ST_TO_ADDR
// exit ;
46172: POP
46173: POP
46174: GO 46180
// end ; end ;
46176: GO 46043
46178: POP
46179: POP
// end ;
46180: LD_VAR 0 4
46184: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46185: LD_INT 0
46187: PPUSH
46188: PPUSH
46189: PPUSH
// if not side or side > 8 then
46190: LD_VAR 0 1
46194: NOT
46195: PUSH
46196: LD_VAR 0 1
46200: PUSH
46201: LD_INT 8
46203: GREATER
46204: OR
46205: IFFALSE 46209
// exit ;
46207: GO 46396
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46209: LD_ADDR_VAR 0 4
46213: PUSH
46214: LD_INT 22
46216: PUSH
46217: LD_VAR 0 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 21
46228: PUSH
46229: LD_INT 3
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PPUSH
46240: CALL_OW 69
46244: ST_TO_ADDR
// if not tmp then
46245: LD_VAR 0 4
46249: NOT
46250: IFFALSE 46254
// exit ;
46252: GO 46396
// enable_addtolog := true ;
46254: LD_ADDR_OWVAR 81
46258: PUSH
46259: LD_INT 1
46261: ST_TO_ADDR
// AddToLog ( [ ) ;
46262: LD_STRING [
46264: PPUSH
46265: CALL_OW 561
// for i in tmp do
46269: LD_ADDR_VAR 0 3
46273: PUSH
46274: LD_VAR 0 4
46278: PUSH
46279: FOR_IN
46280: IFFALSE 46387
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46282: LD_STRING [
46284: PUSH
46285: LD_VAR 0 3
46289: PPUSH
46290: CALL_OW 266
46294: STR
46295: PUSH
46296: LD_STRING , 
46298: STR
46299: PUSH
46300: LD_VAR 0 3
46304: PPUSH
46305: CALL_OW 250
46309: STR
46310: PUSH
46311: LD_STRING , 
46313: STR
46314: PUSH
46315: LD_VAR 0 3
46319: PPUSH
46320: CALL_OW 251
46324: STR
46325: PUSH
46326: LD_STRING , 
46328: STR
46329: PUSH
46330: LD_VAR 0 3
46334: PPUSH
46335: CALL_OW 254
46339: STR
46340: PUSH
46341: LD_STRING , 
46343: STR
46344: PUSH
46345: LD_VAR 0 3
46349: PPUSH
46350: LD_INT 1
46352: PPUSH
46353: CALL_OW 268
46357: STR
46358: PUSH
46359: LD_STRING , 
46361: STR
46362: PUSH
46363: LD_VAR 0 3
46367: PPUSH
46368: LD_INT 2
46370: PPUSH
46371: CALL_OW 268
46375: STR
46376: PUSH
46377: LD_STRING ],
46379: STR
46380: PPUSH
46381: CALL_OW 561
// end ;
46385: GO 46279
46387: POP
46388: POP
// AddToLog ( ]; ) ;
46389: LD_STRING ];
46391: PPUSH
46392: CALL_OW 561
// end ;
46396: LD_VAR 0 2
46400: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46401: LD_INT 0
46403: PPUSH
46404: PPUSH
46405: PPUSH
46406: PPUSH
46407: PPUSH
// if not area or not rate or not max then
46408: LD_VAR 0 1
46412: NOT
46413: PUSH
46414: LD_VAR 0 2
46418: NOT
46419: OR
46420: PUSH
46421: LD_VAR 0 4
46425: NOT
46426: OR
46427: IFFALSE 46431
// exit ;
46429: GO 46620
// while 1 do
46431: LD_INT 1
46433: IFFALSE 46620
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46435: LD_ADDR_VAR 0 9
46439: PUSH
46440: LD_VAR 0 1
46444: PPUSH
46445: LD_INT 1
46447: PPUSH
46448: CALL_OW 287
46452: PUSH
46453: LD_INT 10
46455: MUL
46456: ST_TO_ADDR
// r := rate / 10 ;
46457: LD_ADDR_VAR 0 7
46461: PUSH
46462: LD_VAR 0 2
46466: PUSH
46467: LD_INT 10
46469: DIVREAL
46470: ST_TO_ADDR
// time := 1 1$00 ;
46471: LD_ADDR_VAR 0 8
46475: PUSH
46476: LD_INT 2100
46478: ST_TO_ADDR
// if amount < min then
46479: LD_VAR 0 9
46483: PUSH
46484: LD_VAR 0 3
46488: LESS
46489: IFFALSE 46507
// r := r * 2 else
46491: LD_ADDR_VAR 0 7
46495: PUSH
46496: LD_VAR 0 7
46500: PUSH
46501: LD_INT 2
46503: MUL
46504: ST_TO_ADDR
46505: GO 46533
// if amount > max then
46507: LD_VAR 0 9
46511: PUSH
46512: LD_VAR 0 4
46516: GREATER
46517: IFFALSE 46533
// r := r / 2 ;
46519: LD_ADDR_VAR 0 7
46523: PUSH
46524: LD_VAR 0 7
46528: PUSH
46529: LD_INT 2
46531: DIVREAL
46532: ST_TO_ADDR
// time := time / r ;
46533: LD_ADDR_VAR 0 8
46537: PUSH
46538: LD_VAR 0 8
46542: PUSH
46543: LD_VAR 0 7
46547: DIVREAL
46548: ST_TO_ADDR
// if time < 0 then
46549: LD_VAR 0 8
46553: PUSH
46554: LD_INT 0
46556: LESS
46557: IFFALSE 46574
// time := time * - 1 ;
46559: LD_ADDR_VAR 0 8
46563: PUSH
46564: LD_VAR 0 8
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: MUL
46573: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46574: LD_VAR 0 8
46578: PUSH
46579: LD_INT 35
46581: PPUSH
46582: LD_INT 875
46584: PPUSH
46585: CALL_OW 12
46589: PLUS
46590: PPUSH
46591: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46595: LD_INT 1
46597: PPUSH
46598: LD_INT 5
46600: PPUSH
46601: CALL_OW 12
46605: PPUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: LD_INT 1
46613: PPUSH
46614: CALL_OW 55
// end ;
46618: GO 46431
// end ;
46620: LD_VAR 0 5
46624: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46625: LD_INT 0
46627: PPUSH
46628: PPUSH
46629: PPUSH
46630: PPUSH
46631: PPUSH
46632: PPUSH
46633: PPUSH
46634: PPUSH
// if not turrets or not factories then
46635: LD_VAR 0 1
46639: NOT
46640: PUSH
46641: LD_VAR 0 2
46645: NOT
46646: OR
46647: IFFALSE 46651
// exit ;
46649: GO 46958
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46651: LD_ADDR_VAR 0 10
46655: PUSH
46656: LD_INT 5
46658: PUSH
46659: LD_INT 6
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 4
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: LD_INT 5
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 24
46693: PUSH
46694: LD_INT 25
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 23
46703: PUSH
46704: LD_INT 27
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 42
46717: PUSH
46718: LD_INT 43
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 44
46727: PUSH
46728: LD_INT 46
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 45
46737: PUSH
46738: LD_INT 47
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// result := [ ] ;
46755: LD_ADDR_VAR 0 3
46759: PUSH
46760: EMPTY
46761: ST_TO_ADDR
// for i in turrets do
46762: LD_ADDR_VAR 0 4
46766: PUSH
46767: LD_VAR 0 1
46771: PUSH
46772: FOR_IN
46773: IFFALSE 46956
// begin nat := GetNation ( i ) ;
46775: LD_ADDR_VAR 0 7
46779: PUSH
46780: LD_VAR 0 4
46784: PPUSH
46785: CALL_OW 248
46789: ST_TO_ADDR
// weapon := 0 ;
46790: LD_ADDR_VAR 0 8
46794: PUSH
46795: LD_INT 0
46797: ST_TO_ADDR
// if not nat then
46798: LD_VAR 0 7
46802: NOT
46803: IFFALSE 46807
// continue ;
46805: GO 46772
// for j in list [ nat ] do
46807: LD_ADDR_VAR 0 5
46811: PUSH
46812: LD_VAR 0 10
46816: PUSH
46817: LD_VAR 0 7
46821: ARRAY
46822: PUSH
46823: FOR_IN
46824: IFFALSE 46865
// if GetBWeapon ( i ) = j [ 1 ] then
46826: LD_VAR 0 4
46830: PPUSH
46831: CALL_OW 269
46835: PUSH
46836: LD_VAR 0 5
46840: PUSH
46841: LD_INT 1
46843: ARRAY
46844: EQUAL
46845: IFFALSE 46863
// begin weapon := j [ 2 ] ;
46847: LD_ADDR_VAR 0 8
46851: PUSH
46852: LD_VAR 0 5
46856: PUSH
46857: LD_INT 2
46859: ARRAY
46860: ST_TO_ADDR
// break ;
46861: GO 46865
// end ;
46863: GO 46823
46865: POP
46866: POP
// if not weapon then
46867: LD_VAR 0 8
46871: NOT
46872: IFFALSE 46876
// continue ;
46874: GO 46772
// for k in factories do
46876: LD_ADDR_VAR 0 6
46880: PUSH
46881: LD_VAR 0 2
46885: PUSH
46886: FOR_IN
46887: IFFALSE 46952
// begin weapons := AvailableWeaponList ( k ) ;
46889: LD_ADDR_VAR 0 9
46893: PUSH
46894: LD_VAR 0 6
46898: PPUSH
46899: CALL_OW 478
46903: ST_TO_ADDR
// if not weapons then
46904: LD_VAR 0 9
46908: NOT
46909: IFFALSE 46913
// continue ;
46911: GO 46886
// if weapon in weapons then
46913: LD_VAR 0 8
46917: PUSH
46918: LD_VAR 0 9
46922: IN
46923: IFFALSE 46950
// begin result := [ i , weapon ] ;
46925: LD_ADDR_VAR 0 3
46929: PUSH
46930: LD_VAR 0 4
46934: PUSH
46935: LD_VAR 0 8
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: ST_TO_ADDR
// exit ;
46944: POP
46945: POP
46946: POP
46947: POP
46948: GO 46958
// end ; end ;
46950: GO 46886
46952: POP
46953: POP
// end ;
46954: GO 46772
46956: POP
46957: POP
// end ;
46958: LD_VAR 0 3
46962: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46963: LD_INT 0
46965: PPUSH
// if not side or side > 8 then
46966: LD_VAR 0 3
46970: NOT
46971: PUSH
46972: LD_VAR 0 3
46976: PUSH
46977: LD_INT 8
46979: GREATER
46980: OR
46981: IFFALSE 46985
// exit ;
46983: GO 47044
// if not range then
46985: LD_VAR 0 4
46989: NOT
46990: IFFALSE 47001
// range := - 12 ;
46992: LD_ADDR_VAR 0 4
46996: PUSH
46997: LD_INT 12
46999: NEG
47000: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47001: LD_VAR 0 1
47005: PPUSH
47006: LD_VAR 0 2
47010: PPUSH
47011: LD_VAR 0 3
47015: PPUSH
47016: LD_VAR 0 4
47020: PPUSH
47021: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47025: LD_VAR 0 1
47029: PPUSH
47030: LD_VAR 0 2
47034: PPUSH
47035: LD_VAR 0 3
47039: PPUSH
47040: CALL_OW 331
// end ;
47044: LD_VAR 0 5
47048: RET
// export function Video ( mode ) ; begin
47049: LD_INT 0
47051: PPUSH
// ingame_video = mode ;
47052: LD_ADDR_OWVAR 52
47056: PUSH
47057: LD_VAR 0 1
47061: ST_TO_ADDR
// interface_hidden = mode ;
47062: LD_ADDR_OWVAR 54
47066: PUSH
47067: LD_VAR 0 1
47071: ST_TO_ADDR
// end ;
47072: LD_VAR 0 2
47076: RET
// export function Join ( array , element ) ; begin
47077: LD_INT 0
47079: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47080: LD_ADDR_VAR 0 3
47084: PUSH
47085: LD_VAR 0 1
47089: PPUSH
47090: LD_VAR 0 1
47094: PUSH
47095: LD_INT 1
47097: PLUS
47098: PPUSH
47099: LD_VAR 0 2
47103: PPUSH
47104: CALL_OW 1
47108: ST_TO_ADDR
// end ;
47109: LD_VAR 0 3
47113: RET
// export function JoinUnion ( array , element ) ; begin
47114: LD_INT 0
47116: PPUSH
// result := array union element ;
47117: LD_ADDR_VAR 0 3
47121: PUSH
47122: LD_VAR 0 1
47126: PUSH
47127: LD_VAR 0 2
47131: UNION
47132: ST_TO_ADDR
// end ;
47133: LD_VAR 0 3
47137: RET
// export function GetBehemoths ( side ) ; begin
47138: LD_INT 0
47140: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47141: LD_ADDR_VAR 0 2
47145: PUSH
47146: LD_INT 22
47148: PUSH
47149: LD_VAR 0 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 31
47160: PUSH
47161: LD_INT 25
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PPUSH
47172: CALL_OW 69
47176: ST_TO_ADDR
// end ;
47177: LD_VAR 0 2
47181: RET
// export function Shuffle ( array ) ; var i , index ; begin
47182: LD_INT 0
47184: PPUSH
47185: PPUSH
47186: PPUSH
// result := [ ] ;
47187: LD_ADDR_VAR 0 2
47191: PUSH
47192: EMPTY
47193: ST_TO_ADDR
// if not array then
47194: LD_VAR 0 1
47198: NOT
47199: IFFALSE 47203
// exit ;
47201: GO 47302
// Randomize ;
47203: CALL_OW 10
// for i = array downto 1 do
47207: LD_ADDR_VAR 0 3
47211: PUSH
47212: DOUBLE
47213: LD_VAR 0 1
47217: INC
47218: ST_TO_ADDR
47219: LD_INT 1
47221: PUSH
47222: FOR_DOWNTO
47223: IFFALSE 47300
// begin index := rand ( 1 , array ) ;
47225: LD_ADDR_VAR 0 4
47229: PUSH
47230: LD_INT 1
47232: PPUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 12
47242: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47243: LD_ADDR_VAR 0 2
47247: PUSH
47248: LD_VAR 0 2
47252: PPUSH
47253: LD_VAR 0 2
47257: PUSH
47258: LD_INT 1
47260: PLUS
47261: PPUSH
47262: LD_VAR 0 1
47266: PUSH
47267: LD_VAR 0 4
47271: ARRAY
47272: PPUSH
47273: CALL_OW 2
47277: ST_TO_ADDR
// array := Delete ( array , index ) ;
47278: LD_ADDR_VAR 0 1
47282: PUSH
47283: LD_VAR 0 1
47287: PPUSH
47288: LD_VAR 0 4
47292: PPUSH
47293: CALL_OW 3
47297: ST_TO_ADDR
// end ;
47298: GO 47222
47300: POP
47301: POP
// end ;
47302: LD_VAR 0 2
47306: RET
// export function GetBaseMaterials ( base ) ; begin
47307: LD_INT 0
47309: PPUSH
// result := [ 0 , 0 , 0 ] ;
47310: LD_ADDR_VAR 0 2
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: ST_TO_ADDR
// if not base then
47329: LD_VAR 0 1
47333: NOT
47334: IFFALSE 47338
// exit ;
47336: GO 47387
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47338: LD_ADDR_VAR 0 2
47342: PUSH
47343: LD_VAR 0 1
47347: PPUSH
47348: LD_INT 1
47350: PPUSH
47351: CALL_OW 275
47355: PUSH
47356: LD_VAR 0 1
47360: PPUSH
47361: LD_INT 2
47363: PPUSH
47364: CALL_OW 275
47368: PUSH
47369: LD_VAR 0 1
47373: PPUSH
47374: LD_INT 3
47376: PPUSH
47377: CALL_OW 275
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// end ;
47387: LD_VAR 0 2
47391: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47392: LD_INT 0
47394: PPUSH
47395: PPUSH
// result := array ;
47396: LD_ADDR_VAR 0 3
47400: PUSH
47401: LD_VAR 0 1
47405: ST_TO_ADDR
// if size >= result then
47406: LD_VAR 0 2
47410: PUSH
47411: LD_VAR 0 3
47415: GREATEREQUAL
47416: IFFALSE 47420
// exit ;
47418: GO 47470
// if size then
47420: LD_VAR 0 2
47424: IFFALSE 47470
// for i := array downto size do
47426: LD_ADDR_VAR 0 4
47430: PUSH
47431: DOUBLE
47432: LD_VAR 0 1
47436: INC
47437: ST_TO_ADDR
47438: LD_VAR 0 2
47442: PUSH
47443: FOR_DOWNTO
47444: IFFALSE 47468
// result := Delete ( result , result ) ;
47446: LD_ADDR_VAR 0 3
47450: PUSH
47451: LD_VAR 0 3
47455: PPUSH
47456: LD_VAR 0 3
47460: PPUSH
47461: CALL_OW 3
47465: ST_TO_ADDR
47466: GO 47443
47468: POP
47469: POP
// end ;
47470: LD_VAR 0 3
47474: RET
// export function ComExit ( unit ) ; var tmp ; begin
47475: LD_INT 0
47477: PPUSH
47478: PPUSH
// if not IsInUnit ( unit ) then
47479: LD_VAR 0 1
47483: PPUSH
47484: CALL_OW 310
47488: NOT
47489: IFFALSE 47493
// exit ;
47491: GO 47553
// tmp := IsInUnit ( unit ) ;
47493: LD_ADDR_VAR 0 3
47497: PUSH
47498: LD_VAR 0 1
47502: PPUSH
47503: CALL_OW 310
47507: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47508: LD_VAR 0 3
47512: PPUSH
47513: CALL_OW 247
47517: PUSH
47518: LD_INT 2
47520: EQUAL
47521: IFFALSE 47534
// ComExitVehicle ( unit ) else
47523: LD_VAR 0 1
47527: PPUSH
47528: CALL_OW 121
47532: GO 47543
// ComExitBuilding ( unit ) ;
47534: LD_VAR 0 1
47538: PPUSH
47539: CALL_OW 122
// result := tmp ;
47543: LD_ADDR_VAR 0 2
47547: PUSH
47548: LD_VAR 0 3
47552: ST_TO_ADDR
// end ;
47553: LD_VAR 0 2
47557: RET
// export function ComExitAll ( units ) ; var i ; begin
47558: LD_INT 0
47560: PPUSH
47561: PPUSH
// if not units then
47562: LD_VAR 0 1
47566: NOT
47567: IFFALSE 47571
// exit ;
47569: GO 47597
// for i in units do
47571: LD_ADDR_VAR 0 3
47575: PUSH
47576: LD_VAR 0 1
47580: PUSH
47581: FOR_IN
47582: IFFALSE 47595
// ComExit ( i ) ;
47584: LD_VAR 0 3
47588: PPUSH
47589: CALL 47475 0 1
47593: GO 47581
47595: POP
47596: POP
// end ;
47597: LD_VAR 0 2
47601: RET
// export function ResetHc ; begin
47602: LD_INT 0
47604: PPUSH
// InitHc ;
47605: CALL_OW 19
// hc_importance := 0 ;
47609: LD_ADDR_OWVAR 32
47613: PUSH
47614: LD_INT 0
47616: ST_TO_ADDR
// end ;
47617: LD_VAR 0 1
47621: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47622: LD_INT 0
47624: PPUSH
47625: PPUSH
47626: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47627: LD_ADDR_VAR 0 6
47631: PUSH
47632: LD_VAR 0 1
47636: PUSH
47637: LD_VAR 0 3
47641: PLUS
47642: PUSH
47643: LD_INT 2
47645: DIV
47646: ST_TO_ADDR
// if _x < 0 then
47647: LD_VAR 0 6
47651: PUSH
47652: LD_INT 0
47654: LESS
47655: IFFALSE 47672
// _x := _x * - 1 ;
47657: LD_ADDR_VAR 0 6
47661: PUSH
47662: LD_VAR 0 6
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: MUL
47671: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47672: LD_ADDR_VAR 0 7
47676: PUSH
47677: LD_VAR 0 2
47681: PUSH
47682: LD_VAR 0 4
47686: PLUS
47687: PUSH
47688: LD_INT 2
47690: DIV
47691: ST_TO_ADDR
// if _y < 0 then
47692: LD_VAR 0 7
47696: PUSH
47697: LD_INT 0
47699: LESS
47700: IFFALSE 47717
// _y := _y * - 1 ;
47702: LD_ADDR_VAR 0 7
47706: PUSH
47707: LD_VAR 0 7
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: MUL
47716: ST_TO_ADDR
// result := [ _x , _y ] ;
47717: LD_ADDR_VAR 0 5
47721: PUSH
47722: LD_VAR 0 6
47726: PUSH
47727: LD_VAR 0 7
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: ST_TO_ADDR
// end ;
47736: LD_VAR 0 5
47740: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47741: LD_INT 0
47743: PPUSH
47744: PPUSH
47745: PPUSH
47746: PPUSH
// task := GetTaskList ( unit ) ;
47747: LD_ADDR_VAR 0 7
47751: PUSH
47752: LD_VAR 0 1
47756: PPUSH
47757: CALL_OW 437
47761: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47762: LD_VAR 0 7
47766: NOT
47767: PUSH
47768: LD_VAR 0 1
47772: PPUSH
47773: LD_VAR 0 2
47777: PPUSH
47778: CALL_OW 308
47782: NOT
47783: AND
47784: IFFALSE 47788
// exit ;
47786: GO 47906
// if IsInArea ( unit , area ) then
47788: LD_VAR 0 1
47792: PPUSH
47793: LD_VAR 0 2
47797: PPUSH
47798: CALL_OW 308
47802: IFFALSE 47820
// begin ComMoveToArea ( unit , goAway ) ;
47804: LD_VAR 0 1
47808: PPUSH
47809: LD_VAR 0 3
47813: PPUSH
47814: CALL_OW 113
// exit ;
47818: GO 47906
// end ; if task [ 1 ] [ 1 ] <> M then
47820: LD_VAR 0 7
47824: PUSH
47825: LD_INT 1
47827: ARRAY
47828: PUSH
47829: LD_INT 1
47831: ARRAY
47832: PUSH
47833: LD_STRING M
47835: NONEQUAL
47836: IFFALSE 47840
// exit ;
47838: GO 47906
// x := task [ 1 ] [ 2 ] ;
47840: LD_ADDR_VAR 0 5
47844: PUSH
47845: LD_VAR 0 7
47849: PUSH
47850: LD_INT 1
47852: ARRAY
47853: PUSH
47854: LD_INT 2
47856: ARRAY
47857: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47858: LD_ADDR_VAR 0 6
47862: PUSH
47863: LD_VAR 0 7
47867: PUSH
47868: LD_INT 1
47870: ARRAY
47871: PUSH
47872: LD_INT 3
47874: ARRAY
47875: ST_TO_ADDR
// if InArea ( x , y , area ) then
47876: LD_VAR 0 5
47880: PPUSH
47881: LD_VAR 0 6
47885: PPUSH
47886: LD_VAR 0 2
47890: PPUSH
47891: CALL_OW 309
47895: IFFALSE 47906
// ComStop ( unit ) ;
47897: LD_VAR 0 1
47901: PPUSH
47902: CALL_OW 141
// end ;
47906: LD_VAR 0 4
47910: RET
// export function Abs ( value ) ; begin
47911: LD_INT 0
47913: PPUSH
// result := value ;
47914: LD_ADDR_VAR 0 2
47918: PUSH
47919: LD_VAR 0 1
47923: ST_TO_ADDR
// if value < 0 then
47924: LD_VAR 0 1
47928: PUSH
47929: LD_INT 0
47931: LESS
47932: IFFALSE 47949
// result := value * - 1 ;
47934: LD_ADDR_VAR 0 2
47938: PUSH
47939: LD_VAR 0 1
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: MUL
47948: ST_TO_ADDR
// end ;
47949: LD_VAR 0 2
47953: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47954: LD_INT 0
47956: PPUSH
47957: PPUSH
47958: PPUSH
47959: PPUSH
47960: PPUSH
47961: PPUSH
47962: PPUSH
47963: PPUSH
// if not unit or not building then
47964: LD_VAR 0 1
47968: NOT
47969: PUSH
47970: LD_VAR 0 2
47974: NOT
47975: OR
47976: IFFALSE 47980
// exit ;
47978: GO 48206
// x := GetX ( building ) ;
47980: LD_ADDR_VAR 0 4
47984: PUSH
47985: LD_VAR 0 2
47989: PPUSH
47990: CALL_OW 250
47994: ST_TO_ADDR
// y := GetY ( building ) ;
47995: LD_ADDR_VAR 0 6
47999: PUSH
48000: LD_VAR 0 2
48004: PPUSH
48005: CALL_OW 251
48009: ST_TO_ADDR
// d := GetDir ( building ) ;
48010: LD_ADDR_VAR 0 8
48014: PUSH
48015: LD_VAR 0 2
48019: PPUSH
48020: CALL_OW 254
48024: ST_TO_ADDR
// r := 4 ;
48025: LD_ADDR_VAR 0 9
48029: PUSH
48030: LD_INT 4
48032: ST_TO_ADDR
// for i := 1 to 5 do
48033: LD_ADDR_VAR 0 10
48037: PUSH
48038: DOUBLE
48039: LD_INT 1
48041: DEC
48042: ST_TO_ADDR
48043: LD_INT 5
48045: PUSH
48046: FOR_TO
48047: IFFALSE 48204
// begin _x := ShiftX ( x , d , r + i ) ;
48049: LD_ADDR_VAR 0 5
48053: PUSH
48054: LD_VAR 0 4
48058: PPUSH
48059: LD_VAR 0 8
48063: PPUSH
48064: LD_VAR 0 9
48068: PUSH
48069: LD_VAR 0 10
48073: PLUS
48074: PPUSH
48075: CALL_OW 272
48079: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48080: LD_ADDR_VAR 0 7
48084: PUSH
48085: LD_VAR 0 6
48089: PPUSH
48090: LD_VAR 0 8
48094: PPUSH
48095: LD_VAR 0 9
48099: PUSH
48100: LD_VAR 0 10
48104: PLUS
48105: PPUSH
48106: CALL_OW 273
48110: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48111: LD_VAR 0 5
48115: PPUSH
48116: LD_VAR 0 7
48120: PPUSH
48121: CALL_OW 488
48125: PUSH
48126: LD_VAR 0 5
48130: PPUSH
48131: LD_VAR 0 7
48135: PPUSH
48136: CALL_OW 428
48140: PPUSH
48141: CALL_OW 247
48145: PUSH
48146: LD_INT 3
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: IN
48156: NOT
48157: AND
48158: IFFALSE 48202
// begin ComMoveXY ( unit , _x , _y ) ;
48160: LD_VAR 0 1
48164: PPUSH
48165: LD_VAR 0 5
48169: PPUSH
48170: LD_VAR 0 7
48174: PPUSH
48175: CALL_OW 111
// result := [ _x , _y ] ;
48179: LD_ADDR_VAR 0 3
48183: PUSH
48184: LD_VAR 0 5
48188: PUSH
48189: LD_VAR 0 7
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// exit ;
48198: POP
48199: POP
48200: GO 48206
// end ; end ;
48202: GO 48046
48204: POP
48205: POP
// end ;
48206: LD_VAR 0 3
48210: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48211: LD_INT 0
48213: PPUSH
48214: PPUSH
48215: PPUSH
// result := 0 ;
48216: LD_ADDR_VAR 0 3
48220: PUSH
48221: LD_INT 0
48223: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48224: LD_VAR 0 1
48228: PUSH
48229: LD_INT 0
48231: LESS
48232: PUSH
48233: LD_VAR 0 1
48237: PUSH
48238: LD_INT 8
48240: GREATER
48241: OR
48242: PUSH
48243: LD_VAR 0 2
48247: PUSH
48248: LD_INT 0
48250: LESS
48251: OR
48252: PUSH
48253: LD_VAR 0 2
48257: PUSH
48258: LD_INT 8
48260: GREATER
48261: OR
48262: IFFALSE 48266
// exit ;
48264: GO 48341
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48266: LD_ADDR_VAR 0 4
48270: PUSH
48271: LD_INT 22
48273: PUSH
48274: LD_VAR 0 2
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PPUSH
48283: CALL_OW 69
48287: PUSH
48288: FOR_IN
48289: IFFALSE 48339
// begin un := UnitShoot ( i ) ;
48291: LD_ADDR_VAR 0 5
48295: PUSH
48296: LD_VAR 0 4
48300: PPUSH
48301: CALL_OW 504
48305: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48306: LD_VAR 0 5
48310: PPUSH
48311: CALL_OW 255
48315: PUSH
48316: LD_VAR 0 1
48320: EQUAL
48321: IFFALSE 48337
// begin result := un ;
48323: LD_ADDR_VAR 0 3
48327: PUSH
48328: LD_VAR 0 5
48332: ST_TO_ADDR
// exit ;
48333: POP
48334: POP
48335: GO 48341
// end ; end ;
48337: GO 48288
48339: POP
48340: POP
// end ;
48341: LD_VAR 0 3
48345: RET
// export function GetCargoBay ( units ) ; begin
48346: LD_INT 0
48348: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48349: LD_ADDR_VAR 0 2
48353: PUSH
48354: LD_VAR 0 1
48358: PPUSH
48359: LD_INT 2
48361: PUSH
48362: LD_INT 34
48364: PUSH
48365: LD_INT 12
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 34
48374: PUSH
48375: LD_INT 51
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 34
48384: PUSH
48385: LD_INT 32
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 34
48394: PUSH
48395: LD_INT 89
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: PPUSH
48409: CALL_OW 72
48413: ST_TO_ADDR
// end ;
48414: LD_VAR 0 2
48418: RET
// export function Negate ( value ) ; begin
48419: LD_INT 0
48421: PPUSH
// result := not value ;
48422: LD_ADDR_VAR 0 2
48426: PUSH
48427: LD_VAR 0 1
48431: NOT
48432: ST_TO_ADDR
// end ;
48433: LD_VAR 0 2
48437: RET
// export function Inc ( value ) ; begin
48438: LD_INT 0
48440: PPUSH
// result := value + 1 ;
48441: LD_ADDR_VAR 0 2
48445: PUSH
48446: LD_VAR 0 1
48450: PUSH
48451: LD_INT 1
48453: PLUS
48454: ST_TO_ADDR
// end ;
48455: LD_VAR 0 2
48459: RET
// export function Dec ( value ) ; begin
48460: LD_INT 0
48462: PPUSH
// result := value - 1 ;
48463: LD_ADDR_VAR 0 2
48467: PUSH
48468: LD_VAR 0 1
48472: PUSH
48473: LD_INT 1
48475: MINUS
48476: ST_TO_ADDR
// end ;
48477: LD_VAR 0 2
48481: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48482: LD_INT 0
48484: PPUSH
48485: PPUSH
48486: PPUSH
48487: PPUSH
48488: PPUSH
48489: PPUSH
48490: PPUSH
48491: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48492: LD_VAR 0 1
48496: PPUSH
48497: LD_VAR 0 2
48501: PPUSH
48502: CALL_OW 488
48506: NOT
48507: PUSH
48508: LD_VAR 0 3
48512: PPUSH
48513: LD_VAR 0 4
48517: PPUSH
48518: CALL_OW 488
48522: NOT
48523: OR
48524: IFFALSE 48537
// begin result := - 1 ;
48526: LD_ADDR_VAR 0 5
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: ST_TO_ADDR
// exit ;
48535: GO 48772
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48537: LD_ADDR_VAR 0 12
48541: PUSH
48542: LD_VAR 0 1
48546: PPUSH
48547: LD_VAR 0 2
48551: PPUSH
48552: LD_VAR 0 3
48556: PPUSH
48557: LD_VAR 0 4
48561: PPUSH
48562: CALL 47622 0 4
48566: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48567: LD_ADDR_VAR 0 11
48571: PUSH
48572: LD_VAR 0 1
48576: PPUSH
48577: LD_VAR 0 2
48581: PPUSH
48582: LD_VAR 0 12
48586: PUSH
48587: LD_INT 1
48589: ARRAY
48590: PPUSH
48591: LD_VAR 0 12
48595: PUSH
48596: LD_INT 2
48598: ARRAY
48599: PPUSH
48600: CALL_OW 298
48604: ST_TO_ADDR
// distance := 9999 ;
48605: LD_ADDR_VAR 0 10
48609: PUSH
48610: LD_INT 9999
48612: ST_TO_ADDR
// for i := 0 to 5 do
48613: LD_ADDR_VAR 0 6
48617: PUSH
48618: DOUBLE
48619: LD_INT 0
48621: DEC
48622: ST_TO_ADDR
48623: LD_INT 5
48625: PUSH
48626: FOR_TO
48627: IFFALSE 48770
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48629: LD_ADDR_VAR 0 7
48633: PUSH
48634: LD_VAR 0 1
48638: PPUSH
48639: LD_VAR 0 6
48643: PPUSH
48644: LD_VAR 0 11
48648: PPUSH
48649: CALL_OW 272
48653: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48654: LD_ADDR_VAR 0 8
48658: PUSH
48659: LD_VAR 0 2
48663: PPUSH
48664: LD_VAR 0 6
48668: PPUSH
48669: LD_VAR 0 11
48673: PPUSH
48674: CALL_OW 273
48678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48679: LD_VAR 0 7
48683: PPUSH
48684: LD_VAR 0 8
48688: PPUSH
48689: CALL_OW 488
48693: NOT
48694: IFFALSE 48698
// continue ;
48696: GO 48626
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48698: LD_ADDR_VAR 0 9
48702: PUSH
48703: LD_VAR 0 12
48707: PUSH
48708: LD_INT 1
48710: ARRAY
48711: PPUSH
48712: LD_VAR 0 12
48716: PUSH
48717: LD_INT 2
48719: ARRAY
48720: PPUSH
48721: LD_VAR 0 7
48725: PPUSH
48726: LD_VAR 0 8
48730: PPUSH
48731: CALL_OW 298
48735: ST_TO_ADDR
// if tmp < distance then
48736: LD_VAR 0 9
48740: PUSH
48741: LD_VAR 0 10
48745: LESS
48746: IFFALSE 48768
// begin result := i ;
48748: LD_ADDR_VAR 0 5
48752: PUSH
48753: LD_VAR 0 6
48757: ST_TO_ADDR
// distance := tmp ;
48758: LD_ADDR_VAR 0 10
48762: PUSH
48763: LD_VAR 0 9
48767: ST_TO_ADDR
// end ; end ;
48768: GO 48626
48770: POP
48771: POP
// end ;
48772: LD_VAR 0 5
48776: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48777: LD_INT 0
48779: PPUSH
48780: PPUSH
// if not driver or not IsInUnit ( driver ) then
48781: LD_VAR 0 1
48785: NOT
48786: PUSH
48787: LD_VAR 0 1
48791: PPUSH
48792: CALL_OW 310
48796: NOT
48797: OR
48798: IFFALSE 48802
// exit ;
48800: GO 48892
// vehicle := IsInUnit ( driver ) ;
48802: LD_ADDR_VAR 0 3
48806: PUSH
48807: LD_VAR 0 1
48811: PPUSH
48812: CALL_OW 310
48816: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48817: LD_VAR 0 1
48821: PPUSH
48822: LD_STRING \
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: PUSH
48852: LD_STRING E
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_VAR 0 3
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PPUSH
48888: CALL_OW 446
// end ;
48892: LD_VAR 0 2
48896: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48897: LD_INT 0
48899: PPUSH
48900: PPUSH
// if not driver or not IsInUnit ( driver ) then
48901: LD_VAR 0 1
48905: NOT
48906: PUSH
48907: LD_VAR 0 1
48911: PPUSH
48912: CALL_OW 310
48916: NOT
48917: OR
48918: IFFALSE 48922
// exit ;
48920: GO 49012
// vehicle := IsInUnit ( driver ) ;
48922: LD_ADDR_VAR 0 3
48926: PUSH
48927: LD_VAR 0 1
48931: PPUSH
48932: CALL_OW 310
48936: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48937: LD_VAR 0 1
48941: PPUSH
48942: LD_STRING \
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: PUSH
48972: LD_STRING E
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_VAR 0 3
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PPUSH
49008: CALL_OW 447
// end ;
49012: LD_VAR 0 2
49016: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49017: LD_INT 0
49019: PPUSH
49020: PPUSH
49021: PPUSH
// tmp := [ ] ;
49022: LD_ADDR_VAR 0 5
49026: PUSH
49027: EMPTY
49028: ST_TO_ADDR
// for i in units do
49029: LD_ADDR_VAR 0 4
49033: PUSH
49034: LD_VAR 0 1
49038: PUSH
49039: FOR_IN
49040: IFFALSE 49078
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49042: LD_ADDR_VAR 0 5
49046: PUSH
49047: LD_VAR 0 5
49051: PPUSH
49052: LD_VAR 0 5
49056: PUSH
49057: LD_INT 1
49059: PLUS
49060: PPUSH
49061: LD_VAR 0 4
49065: PPUSH
49066: CALL_OW 256
49070: PPUSH
49071: CALL_OW 2
49075: ST_TO_ADDR
49076: GO 49039
49078: POP
49079: POP
// if not tmp then
49080: LD_VAR 0 5
49084: NOT
49085: IFFALSE 49089
// exit ;
49087: GO 49137
// if asc then
49089: LD_VAR 0 2
49093: IFFALSE 49117
// result := SortListByListAsc ( units , tmp ) else
49095: LD_ADDR_VAR 0 3
49099: PUSH
49100: LD_VAR 0 1
49104: PPUSH
49105: LD_VAR 0 5
49109: PPUSH
49110: CALL_OW 76
49114: ST_TO_ADDR
49115: GO 49137
// result := SortListByListDesc ( units , tmp ) ;
49117: LD_ADDR_VAR 0 3
49121: PUSH
49122: LD_VAR 0 1
49126: PPUSH
49127: LD_VAR 0 5
49131: PPUSH
49132: CALL_OW 77
49136: ST_TO_ADDR
// end ;
49137: LD_VAR 0 3
49141: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49142: LD_INT 0
49144: PPUSH
49145: PPUSH
// task := GetTaskList ( mech ) ;
49146: LD_ADDR_VAR 0 4
49150: PUSH
49151: LD_VAR 0 1
49155: PPUSH
49156: CALL_OW 437
49160: ST_TO_ADDR
// if not task then
49161: LD_VAR 0 4
49165: NOT
49166: IFFALSE 49170
// exit ;
49168: GO 49212
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49170: LD_ADDR_VAR 0 3
49174: PUSH
49175: LD_VAR 0 4
49179: PUSH
49180: LD_INT 1
49182: ARRAY
49183: PUSH
49184: LD_INT 1
49186: ARRAY
49187: PUSH
49188: LD_STRING r
49190: EQUAL
49191: PUSH
49192: LD_VAR 0 4
49196: PUSH
49197: LD_INT 1
49199: ARRAY
49200: PUSH
49201: LD_INT 4
49203: ARRAY
49204: PUSH
49205: LD_VAR 0 2
49209: EQUAL
49210: AND
49211: ST_TO_ADDR
// end ;
49212: LD_VAR 0 3
49216: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49217: LD_INT 0
49219: PPUSH
// SetDir ( unit , d ) ;
49220: LD_VAR 0 1
49224: PPUSH
49225: LD_VAR 0 4
49229: PPUSH
49230: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49234: LD_ADDR_VAR 0 6
49238: PUSH
49239: LD_VAR 0 1
49243: PPUSH
49244: LD_VAR 0 2
49248: PPUSH
49249: LD_VAR 0 3
49253: PPUSH
49254: LD_VAR 0 5
49258: PPUSH
49259: CALL_OW 48
49263: ST_TO_ADDR
// end ;
49264: LD_VAR 0 6
49268: RET
// export function ToNaturalNumber ( number ) ; begin
49269: LD_INT 0
49271: PPUSH
// result := number div 1 ;
49272: LD_ADDR_VAR 0 2
49276: PUSH
49277: LD_VAR 0 1
49281: PUSH
49282: LD_INT 1
49284: DIV
49285: ST_TO_ADDR
// if number < 0 then
49286: LD_VAR 0 1
49290: PUSH
49291: LD_INT 0
49293: LESS
49294: IFFALSE 49304
// result := 0 ;
49296: LD_ADDR_VAR 0 2
49300: PUSH
49301: LD_INT 0
49303: ST_TO_ADDR
// end ;
49304: LD_VAR 0 2
49308: RET
// export function SortByClass ( units , class ) ; var un ; begin
49309: LD_INT 0
49311: PPUSH
49312: PPUSH
// if not units or not class then
49313: LD_VAR 0 1
49317: NOT
49318: PUSH
49319: LD_VAR 0 2
49323: NOT
49324: OR
49325: IFFALSE 49329
// exit ;
49327: GO 49424
// result := [ ] ;
49329: LD_ADDR_VAR 0 3
49333: PUSH
49334: EMPTY
49335: ST_TO_ADDR
// for un in units do
49336: LD_ADDR_VAR 0 4
49340: PUSH
49341: LD_VAR 0 1
49345: PUSH
49346: FOR_IN
49347: IFFALSE 49422
// if GetClass ( un ) = class then
49349: LD_VAR 0 4
49353: PPUSH
49354: CALL_OW 257
49358: PUSH
49359: LD_VAR 0 2
49363: EQUAL
49364: IFFALSE 49391
// result := Insert ( result , 1 , un ) else
49366: LD_ADDR_VAR 0 3
49370: PUSH
49371: LD_VAR 0 3
49375: PPUSH
49376: LD_INT 1
49378: PPUSH
49379: LD_VAR 0 4
49383: PPUSH
49384: CALL_OW 2
49388: ST_TO_ADDR
49389: GO 49420
// result := Replace ( result , result + 1 , un ) ;
49391: LD_ADDR_VAR 0 3
49395: PUSH
49396: LD_VAR 0 3
49400: PPUSH
49401: LD_VAR 0 3
49405: PUSH
49406: LD_INT 1
49408: PLUS
49409: PPUSH
49410: LD_VAR 0 4
49414: PPUSH
49415: CALL_OW 1
49419: ST_TO_ADDR
49420: GO 49346
49422: POP
49423: POP
// end ;
49424: LD_VAR 0 3
49428: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49429: LD_INT 0
49431: PPUSH
49432: PPUSH
49433: PPUSH
49434: PPUSH
49435: PPUSH
49436: PPUSH
49437: PPUSH
// result := [ ] ;
49438: LD_ADDR_VAR 0 4
49442: PUSH
49443: EMPTY
49444: ST_TO_ADDR
// if x - r < 0 then
49445: LD_VAR 0 1
49449: PUSH
49450: LD_VAR 0 3
49454: MINUS
49455: PUSH
49456: LD_INT 0
49458: LESS
49459: IFFALSE 49471
// min_x := 0 else
49461: LD_ADDR_VAR 0 8
49465: PUSH
49466: LD_INT 0
49468: ST_TO_ADDR
49469: GO 49487
// min_x := x - r ;
49471: LD_ADDR_VAR 0 8
49475: PUSH
49476: LD_VAR 0 1
49480: PUSH
49481: LD_VAR 0 3
49485: MINUS
49486: ST_TO_ADDR
// if y - r < 0 then
49487: LD_VAR 0 2
49491: PUSH
49492: LD_VAR 0 3
49496: MINUS
49497: PUSH
49498: LD_INT 0
49500: LESS
49501: IFFALSE 49513
// min_y := 0 else
49503: LD_ADDR_VAR 0 7
49507: PUSH
49508: LD_INT 0
49510: ST_TO_ADDR
49511: GO 49529
// min_y := y - r ;
49513: LD_ADDR_VAR 0 7
49517: PUSH
49518: LD_VAR 0 2
49522: PUSH
49523: LD_VAR 0 3
49527: MINUS
49528: ST_TO_ADDR
// max_x := x + r ;
49529: LD_ADDR_VAR 0 9
49533: PUSH
49534: LD_VAR 0 1
49538: PUSH
49539: LD_VAR 0 3
49543: PLUS
49544: ST_TO_ADDR
// max_y := y + r ;
49545: LD_ADDR_VAR 0 10
49549: PUSH
49550: LD_VAR 0 2
49554: PUSH
49555: LD_VAR 0 3
49559: PLUS
49560: ST_TO_ADDR
// for _x = min_x to max_x do
49561: LD_ADDR_VAR 0 5
49565: PUSH
49566: DOUBLE
49567: LD_VAR 0 8
49571: DEC
49572: ST_TO_ADDR
49573: LD_VAR 0 9
49577: PUSH
49578: FOR_TO
49579: IFFALSE 49680
// for _y = min_y to max_y do
49581: LD_ADDR_VAR 0 6
49585: PUSH
49586: DOUBLE
49587: LD_VAR 0 7
49591: DEC
49592: ST_TO_ADDR
49593: LD_VAR 0 10
49597: PUSH
49598: FOR_TO
49599: IFFALSE 49676
// begin if not ValidHex ( _x , _y ) then
49601: LD_VAR 0 5
49605: PPUSH
49606: LD_VAR 0 6
49610: PPUSH
49611: CALL_OW 488
49615: NOT
49616: IFFALSE 49620
// continue ;
49618: GO 49598
// if GetResourceTypeXY ( _x , _y ) then
49620: LD_VAR 0 5
49624: PPUSH
49625: LD_VAR 0 6
49629: PPUSH
49630: CALL_OW 283
49634: IFFALSE 49674
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49636: LD_ADDR_VAR 0 4
49640: PUSH
49641: LD_VAR 0 4
49645: PPUSH
49646: LD_VAR 0 4
49650: PUSH
49651: LD_INT 1
49653: PLUS
49654: PPUSH
49655: LD_VAR 0 5
49659: PUSH
49660: LD_VAR 0 6
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PPUSH
49669: CALL_OW 1
49673: ST_TO_ADDR
// end ;
49674: GO 49598
49676: POP
49677: POP
49678: GO 49578
49680: POP
49681: POP
// end ;
49682: LD_VAR 0 4
49686: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49687: LD_INT 0
49689: PPUSH
49690: PPUSH
49691: PPUSH
49692: PPUSH
49693: PPUSH
49694: PPUSH
49695: PPUSH
49696: PPUSH
// if not units then
49697: LD_VAR 0 1
49701: NOT
49702: IFFALSE 49706
// exit ;
49704: GO 50234
// result := UnitFilter ( units , [ f_ok ] ) ;
49706: LD_ADDR_VAR 0 3
49710: PUSH
49711: LD_VAR 0 1
49715: PPUSH
49716: LD_INT 50
49718: PUSH
49719: EMPTY
49720: LIST
49721: PPUSH
49722: CALL_OW 72
49726: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49727: LD_ADDR_VAR 0 8
49731: PUSH
49732: LD_VAR 0 1
49736: PUSH
49737: LD_INT 1
49739: ARRAY
49740: PPUSH
49741: CALL_OW 255
49745: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49746: LD_ADDR_VAR 0 10
49750: PUSH
49751: LD_INT 29
49753: PUSH
49754: LD_INT 91
49756: PUSH
49757: LD_INT 49
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: ST_TO_ADDR
// if not result then
49765: LD_VAR 0 3
49769: NOT
49770: IFFALSE 49774
// exit ;
49772: GO 50234
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49774: LD_ADDR_VAR 0 5
49778: PUSH
49779: LD_INT 81
49781: PUSH
49782: LD_VAR 0 8
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PPUSH
49791: CALL_OW 69
49795: ST_TO_ADDR
// for i in result do
49796: LD_ADDR_VAR 0 4
49800: PUSH
49801: LD_VAR 0 3
49805: PUSH
49806: FOR_IN
49807: IFFALSE 50232
// begin tag := GetTag ( i ) + 1 ;
49809: LD_ADDR_VAR 0 9
49813: PUSH
49814: LD_VAR 0 4
49818: PPUSH
49819: CALL_OW 110
49823: PUSH
49824: LD_INT 1
49826: PLUS
49827: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49828: LD_ADDR_VAR 0 7
49832: PUSH
49833: LD_VAR 0 4
49837: PPUSH
49838: CALL_OW 250
49842: PPUSH
49843: LD_VAR 0 4
49847: PPUSH
49848: CALL_OW 251
49852: PPUSH
49853: LD_INT 4
49855: PPUSH
49856: CALL 49429 0 3
49860: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49861: LD_VAR 0 4
49865: PPUSH
49866: CALL_OW 247
49870: PUSH
49871: LD_INT 2
49873: EQUAL
49874: PUSH
49875: LD_VAR 0 7
49879: PUSH
49880: LD_INT 2
49882: GREATER
49883: AND
49884: PUSH
49885: LD_VAR 0 4
49889: PPUSH
49890: CALL_OW 264
49894: PUSH
49895: LD_VAR 0 10
49899: IN
49900: NOT
49901: AND
49902: IFFALSE 49941
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49904: LD_VAR 0 4
49908: PPUSH
49909: LD_VAR 0 7
49913: PUSH
49914: LD_INT 1
49916: ARRAY
49917: PUSH
49918: LD_INT 1
49920: ARRAY
49921: PPUSH
49922: LD_VAR 0 7
49926: PUSH
49927: LD_INT 1
49929: ARRAY
49930: PUSH
49931: LD_INT 2
49933: ARRAY
49934: PPUSH
49935: CALL_OW 116
49939: GO 50230
// if path > tag then
49941: LD_VAR 0 2
49945: PUSH
49946: LD_VAR 0 9
49950: GREATER
49951: IFFALSE 50159
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49953: LD_ADDR_VAR 0 6
49957: PUSH
49958: LD_VAR 0 5
49962: PPUSH
49963: LD_INT 91
49965: PUSH
49966: LD_VAR 0 4
49970: PUSH
49971: LD_INT 8
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: LIST
49978: PPUSH
49979: CALL_OW 72
49983: ST_TO_ADDR
// if nearEnemy then
49984: LD_VAR 0 6
49988: IFFALSE 50057
// begin if GetWeapon ( i ) = ru_time_lapser then
49990: LD_VAR 0 4
49994: PPUSH
49995: CALL_OW 264
49999: PUSH
50000: LD_INT 49
50002: EQUAL
50003: IFFALSE 50031
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50005: LD_VAR 0 4
50009: PPUSH
50010: LD_VAR 0 6
50014: PPUSH
50015: LD_VAR 0 4
50019: PPUSH
50020: CALL_OW 74
50024: PPUSH
50025: CALL_OW 112
50029: GO 50055
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50031: LD_VAR 0 4
50035: PPUSH
50036: LD_VAR 0 6
50040: PPUSH
50041: LD_VAR 0 4
50045: PPUSH
50046: CALL_OW 74
50050: PPUSH
50051: CALL 51305 0 2
// end else
50055: GO 50157
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50057: LD_VAR 0 4
50061: PPUSH
50062: LD_VAR 0 2
50066: PUSH
50067: LD_VAR 0 9
50071: ARRAY
50072: PUSH
50073: LD_INT 1
50075: ARRAY
50076: PPUSH
50077: LD_VAR 0 2
50081: PUSH
50082: LD_VAR 0 9
50086: ARRAY
50087: PUSH
50088: LD_INT 2
50090: ARRAY
50091: PPUSH
50092: CALL_OW 297
50096: PUSH
50097: LD_INT 6
50099: GREATER
50100: IFFALSE 50143
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50102: LD_VAR 0 4
50106: PPUSH
50107: LD_VAR 0 2
50111: PUSH
50112: LD_VAR 0 9
50116: ARRAY
50117: PUSH
50118: LD_INT 1
50120: ARRAY
50121: PPUSH
50122: LD_VAR 0 2
50126: PUSH
50127: LD_VAR 0 9
50131: ARRAY
50132: PUSH
50133: LD_INT 2
50135: ARRAY
50136: PPUSH
50137: CALL_OW 114
50141: GO 50157
// SetTag ( i , tag ) ;
50143: LD_VAR 0 4
50147: PPUSH
50148: LD_VAR 0 9
50152: PPUSH
50153: CALL_OW 109
// end else
50157: GO 50230
// if enemy then
50159: LD_VAR 0 5
50163: IFFALSE 50230
// begin if GetWeapon ( i ) = ru_time_lapser then
50165: LD_VAR 0 4
50169: PPUSH
50170: CALL_OW 264
50174: PUSH
50175: LD_INT 49
50177: EQUAL
50178: IFFALSE 50206
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50180: LD_VAR 0 4
50184: PPUSH
50185: LD_VAR 0 5
50189: PPUSH
50190: LD_VAR 0 4
50194: PPUSH
50195: CALL_OW 74
50199: PPUSH
50200: CALL_OW 112
50204: GO 50230
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50206: LD_VAR 0 4
50210: PPUSH
50211: LD_VAR 0 5
50215: PPUSH
50216: LD_VAR 0 4
50220: PPUSH
50221: CALL_OW 74
50225: PPUSH
50226: CALL 51305 0 2
// end ; end ;
50230: GO 49806
50232: POP
50233: POP
// end ;
50234: LD_VAR 0 3
50238: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50239: LD_INT 0
50241: PPUSH
50242: PPUSH
50243: PPUSH
// if not unit or IsInUnit ( unit ) then
50244: LD_VAR 0 1
50248: NOT
50249: PUSH
50250: LD_VAR 0 1
50254: PPUSH
50255: CALL_OW 310
50259: OR
50260: IFFALSE 50264
// exit ;
50262: GO 50355
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50264: LD_ADDR_VAR 0 4
50268: PUSH
50269: LD_VAR 0 1
50273: PPUSH
50274: CALL_OW 250
50278: PPUSH
50279: LD_VAR 0 2
50283: PPUSH
50284: LD_INT 1
50286: PPUSH
50287: CALL_OW 272
50291: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50292: LD_ADDR_VAR 0 5
50296: PUSH
50297: LD_VAR 0 1
50301: PPUSH
50302: CALL_OW 251
50306: PPUSH
50307: LD_VAR 0 2
50311: PPUSH
50312: LD_INT 1
50314: PPUSH
50315: CALL_OW 273
50319: ST_TO_ADDR
// if ValidHex ( x , y ) then
50320: LD_VAR 0 4
50324: PPUSH
50325: LD_VAR 0 5
50329: PPUSH
50330: CALL_OW 488
50334: IFFALSE 50355
// ComTurnXY ( unit , x , y ) ;
50336: LD_VAR 0 1
50340: PPUSH
50341: LD_VAR 0 4
50345: PPUSH
50346: LD_VAR 0 5
50350: PPUSH
50351: CALL_OW 118
// end ;
50355: LD_VAR 0 3
50359: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50360: LD_INT 0
50362: PPUSH
50363: PPUSH
// result := false ;
50364: LD_ADDR_VAR 0 3
50368: PUSH
50369: LD_INT 0
50371: ST_TO_ADDR
// if not units then
50372: LD_VAR 0 2
50376: NOT
50377: IFFALSE 50381
// exit ;
50379: GO 50426
// for i in units do
50381: LD_ADDR_VAR 0 4
50385: PUSH
50386: LD_VAR 0 2
50390: PUSH
50391: FOR_IN
50392: IFFALSE 50424
// if See ( side , i ) then
50394: LD_VAR 0 1
50398: PPUSH
50399: LD_VAR 0 4
50403: PPUSH
50404: CALL_OW 292
50408: IFFALSE 50422
// begin result := true ;
50410: LD_ADDR_VAR 0 3
50414: PUSH
50415: LD_INT 1
50417: ST_TO_ADDR
// exit ;
50418: POP
50419: POP
50420: GO 50426
// end ;
50422: GO 50391
50424: POP
50425: POP
// end ;
50426: LD_VAR 0 3
50430: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50431: LD_INT 0
50433: PPUSH
50434: PPUSH
50435: PPUSH
50436: PPUSH
// if not unit or not points then
50437: LD_VAR 0 1
50441: NOT
50442: PUSH
50443: LD_VAR 0 2
50447: NOT
50448: OR
50449: IFFALSE 50453
// exit ;
50451: GO 50543
// dist := 99999 ;
50453: LD_ADDR_VAR 0 5
50457: PUSH
50458: LD_INT 99999
50460: ST_TO_ADDR
// for i in points do
50461: LD_ADDR_VAR 0 4
50465: PUSH
50466: LD_VAR 0 2
50470: PUSH
50471: FOR_IN
50472: IFFALSE 50541
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50474: LD_ADDR_VAR 0 6
50478: PUSH
50479: LD_VAR 0 1
50483: PPUSH
50484: LD_VAR 0 4
50488: PUSH
50489: LD_INT 1
50491: ARRAY
50492: PPUSH
50493: LD_VAR 0 4
50497: PUSH
50498: LD_INT 2
50500: ARRAY
50501: PPUSH
50502: CALL_OW 297
50506: ST_TO_ADDR
// if tmpDist < dist then
50507: LD_VAR 0 6
50511: PUSH
50512: LD_VAR 0 5
50516: LESS
50517: IFFALSE 50539
// begin result := i ;
50519: LD_ADDR_VAR 0 3
50523: PUSH
50524: LD_VAR 0 4
50528: ST_TO_ADDR
// dist := tmpDist ;
50529: LD_ADDR_VAR 0 5
50533: PUSH
50534: LD_VAR 0 6
50538: ST_TO_ADDR
// end ; end ;
50539: GO 50471
50541: POP
50542: POP
// end ;
50543: LD_VAR 0 3
50547: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50548: LD_INT 0
50550: PPUSH
// uc_side := side ;
50551: LD_ADDR_OWVAR 20
50555: PUSH
50556: LD_VAR 0 1
50560: ST_TO_ADDR
// uc_nation := 3 ;
50561: LD_ADDR_OWVAR 21
50565: PUSH
50566: LD_INT 3
50568: ST_TO_ADDR
// vc_chassis := 25 ;
50569: LD_ADDR_OWVAR 37
50573: PUSH
50574: LD_INT 25
50576: ST_TO_ADDR
// vc_engine := engine_siberite ;
50577: LD_ADDR_OWVAR 39
50581: PUSH
50582: LD_INT 3
50584: ST_TO_ADDR
// vc_control := control_computer ;
50585: LD_ADDR_OWVAR 38
50589: PUSH
50590: LD_INT 3
50592: ST_TO_ADDR
// vc_weapon := 59 ;
50593: LD_ADDR_OWVAR 40
50597: PUSH
50598: LD_INT 59
50600: ST_TO_ADDR
// result := CreateVehicle ;
50601: LD_ADDR_VAR 0 5
50605: PUSH
50606: CALL_OW 45
50610: ST_TO_ADDR
// SetDir ( result , d ) ;
50611: LD_VAR 0 5
50615: PPUSH
50616: LD_VAR 0 4
50620: PPUSH
50621: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50625: LD_VAR 0 5
50629: PPUSH
50630: LD_VAR 0 2
50634: PPUSH
50635: LD_VAR 0 3
50639: PPUSH
50640: LD_INT 0
50642: PPUSH
50643: CALL_OW 48
// end ;
50647: LD_VAR 0 5
50651: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50652: LD_INT 0
50654: PPUSH
50655: PPUSH
50656: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50657: LD_ADDR_VAR 0 2
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50680: LD_VAR 0 1
50684: NOT
50685: PUSH
50686: LD_VAR 0 1
50690: PPUSH
50691: CALL_OW 264
50695: PUSH
50696: LD_INT 12
50698: PUSH
50699: LD_INT 51
50701: PUSH
50702: LD_INT 32
50704: PUSH
50705: LD_INT 89
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: IN
50714: NOT
50715: OR
50716: IFFALSE 50720
// exit ;
50718: GO 50818
// for i := 1 to 3 do
50720: LD_ADDR_VAR 0 3
50724: PUSH
50725: DOUBLE
50726: LD_INT 1
50728: DEC
50729: ST_TO_ADDR
50730: LD_INT 3
50732: PUSH
50733: FOR_TO
50734: IFFALSE 50816
// begin tmp := GetCargo ( cargo , i ) ;
50736: LD_ADDR_VAR 0 4
50740: PUSH
50741: LD_VAR 0 1
50745: PPUSH
50746: LD_VAR 0 3
50750: PPUSH
50751: CALL_OW 289
50755: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50756: LD_ADDR_VAR 0 2
50760: PUSH
50761: LD_VAR 0 2
50765: PPUSH
50766: LD_VAR 0 3
50770: PPUSH
50771: LD_VAR 0 4
50775: PPUSH
50776: CALL_OW 1
50780: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50781: LD_ADDR_VAR 0 2
50785: PUSH
50786: LD_VAR 0 2
50790: PPUSH
50791: LD_INT 4
50793: PPUSH
50794: LD_VAR 0 2
50798: PUSH
50799: LD_INT 4
50801: ARRAY
50802: PUSH
50803: LD_VAR 0 4
50807: PLUS
50808: PPUSH
50809: CALL_OW 1
50813: ST_TO_ADDR
// end ;
50814: GO 50733
50816: POP
50817: POP
// end ;
50818: LD_VAR 0 2
50822: RET
// export function Length ( array ) ; begin
50823: LD_INT 0
50825: PPUSH
// result := array + 0 ;
50826: LD_ADDR_VAR 0 2
50830: PUSH
50831: LD_VAR 0 1
50835: PUSH
50836: LD_INT 0
50838: PLUS
50839: ST_TO_ADDR
// end ;
50840: LD_VAR 0 2
50844: RET
// export function PrepareArray ( array ) ; begin
50845: LD_INT 0
50847: PPUSH
// result := array diff 0 ;
50848: LD_ADDR_VAR 0 2
50852: PUSH
50853: LD_VAR 0 1
50857: PUSH
50858: LD_INT 0
50860: DIFF
50861: ST_TO_ADDR
// if not result [ 1 ] then
50862: LD_VAR 0 2
50866: PUSH
50867: LD_INT 1
50869: ARRAY
50870: NOT
50871: IFFALSE 50891
// result := Delete ( result , 1 ) ;
50873: LD_ADDR_VAR 0 2
50877: PUSH
50878: LD_VAR 0 2
50882: PPUSH
50883: LD_INT 1
50885: PPUSH
50886: CALL_OW 3
50890: ST_TO_ADDR
// end ;
50891: LD_VAR 0 2
50895: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50896: LD_INT 0
50898: PPUSH
50899: PPUSH
50900: PPUSH
50901: PPUSH
// sibRocketRange := 25 ;
50902: LD_ADDR_VAR 0 6
50906: PUSH
50907: LD_INT 25
50909: ST_TO_ADDR
// result := false ;
50910: LD_ADDR_VAR 0 4
50914: PUSH
50915: LD_INT 0
50917: ST_TO_ADDR
// for i := 0 to 5 do
50918: LD_ADDR_VAR 0 5
50922: PUSH
50923: DOUBLE
50924: LD_INT 0
50926: DEC
50927: ST_TO_ADDR
50928: LD_INT 5
50930: PUSH
50931: FOR_TO
50932: IFFALSE 50999
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50934: LD_VAR 0 1
50938: PPUSH
50939: LD_VAR 0 5
50943: PPUSH
50944: LD_VAR 0 6
50948: PPUSH
50949: CALL_OW 272
50953: PPUSH
50954: LD_VAR 0 2
50958: PPUSH
50959: LD_VAR 0 5
50963: PPUSH
50964: LD_VAR 0 6
50968: PPUSH
50969: CALL_OW 273
50973: PPUSH
50974: LD_VAR 0 3
50978: PPUSH
50979: CALL_OW 309
50983: IFFALSE 50997
// begin result := true ;
50985: LD_ADDR_VAR 0 4
50989: PUSH
50990: LD_INT 1
50992: ST_TO_ADDR
// exit ;
50993: POP
50994: POP
50995: GO 51001
// end ;
50997: GO 50931
50999: POP
51000: POP
// end ;
51001: LD_VAR 0 4
51005: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51006: LD_INT 0
51008: PPUSH
51009: PPUSH
51010: PPUSH
// if btype = b_depot then
51011: LD_VAR 0 2
51015: PUSH
51016: LD_INT 0
51018: EQUAL
51019: IFFALSE 51031
// begin result := true ;
51021: LD_ADDR_VAR 0 3
51025: PUSH
51026: LD_INT 1
51028: ST_TO_ADDR
// exit ;
51029: GO 51147
// end ; pom := GetBase ( depot ) ;
51031: LD_ADDR_VAR 0 4
51035: PUSH
51036: LD_VAR 0 1
51040: PPUSH
51041: CALL_OW 274
51045: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51046: LD_ADDR_VAR 0 5
51050: PUSH
51051: LD_VAR 0 2
51055: PPUSH
51056: LD_VAR 0 1
51060: PPUSH
51061: CALL_OW 248
51065: PPUSH
51066: CALL_OW 450
51070: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51071: LD_ADDR_VAR 0 3
51075: PUSH
51076: LD_VAR 0 4
51080: PPUSH
51081: LD_INT 1
51083: PPUSH
51084: CALL_OW 275
51088: PUSH
51089: LD_VAR 0 5
51093: PUSH
51094: LD_INT 1
51096: ARRAY
51097: GREATEREQUAL
51098: PUSH
51099: LD_VAR 0 4
51103: PPUSH
51104: LD_INT 2
51106: PPUSH
51107: CALL_OW 275
51111: PUSH
51112: LD_VAR 0 5
51116: PUSH
51117: LD_INT 2
51119: ARRAY
51120: GREATEREQUAL
51121: AND
51122: PUSH
51123: LD_VAR 0 4
51127: PPUSH
51128: LD_INT 3
51130: PPUSH
51131: CALL_OW 275
51135: PUSH
51136: LD_VAR 0 5
51140: PUSH
51141: LD_INT 3
51143: ARRAY
51144: GREATEREQUAL
51145: AND
51146: ST_TO_ADDR
// end ;
51147: LD_VAR 0 3
51151: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51152: LD_INT 0
51154: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51155: LD_VAR 0 1
51159: PPUSH
51160: LD_VAR 0 2
51164: PPUSH
51165: LD_INT 0
51167: PPUSH
51168: LD_INT 0
51170: PPUSH
51171: LD_INT 1
51173: PPUSH
51174: LD_INT 0
51176: PPUSH
51177: CALL_OW 587
// end ;
51181: LD_VAR 0 3
51185: RET
// export function CenterOnNow ( unit ) ; begin
51186: LD_INT 0
51188: PPUSH
// result := IsInUnit ( unit ) ;
51189: LD_ADDR_VAR 0 2
51193: PUSH
51194: LD_VAR 0 1
51198: PPUSH
51199: CALL_OW 310
51203: ST_TO_ADDR
// if not result then
51204: LD_VAR 0 2
51208: NOT
51209: IFFALSE 51221
// result := unit ;
51211: LD_ADDR_VAR 0 2
51215: PUSH
51216: LD_VAR 0 1
51220: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51221: LD_VAR 0 1
51225: PPUSH
51226: CALL_OW 87
// end ;
51230: LD_VAR 0 2
51234: RET
// export function ComMoveHex ( unit , hex ) ; begin
51235: LD_INT 0
51237: PPUSH
// if not hex then
51238: LD_VAR 0 2
51242: NOT
51243: IFFALSE 51247
// exit ;
51245: GO 51300
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51247: LD_VAR 0 2
51251: PUSH
51252: LD_INT 1
51254: ARRAY
51255: PPUSH
51256: LD_VAR 0 2
51260: PUSH
51261: LD_INT 2
51263: ARRAY
51264: PPUSH
51265: CALL_OW 428
51269: IFFALSE 51273
// exit ;
51271: GO 51300
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51273: LD_VAR 0 1
51277: PPUSH
51278: LD_VAR 0 2
51282: PUSH
51283: LD_INT 1
51285: ARRAY
51286: PPUSH
51287: LD_VAR 0 2
51291: PUSH
51292: LD_INT 2
51294: ARRAY
51295: PPUSH
51296: CALL_OW 111
// end ;
51300: LD_VAR 0 3
51304: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51305: LD_INT 0
51307: PPUSH
51308: PPUSH
51309: PPUSH
// if not unit or not enemy then
51310: LD_VAR 0 1
51314: NOT
51315: PUSH
51316: LD_VAR 0 2
51320: NOT
51321: OR
51322: IFFALSE 51326
// exit ;
51324: GO 51450
// x := GetX ( enemy ) ;
51326: LD_ADDR_VAR 0 4
51330: PUSH
51331: LD_VAR 0 2
51335: PPUSH
51336: CALL_OW 250
51340: ST_TO_ADDR
// y := GetY ( enemy ) ;
51341: LD_ADDR_VAR 0 5
51345: PUSH
51346: LD_VAR 0 2
51350: PPUSH
51351: CALL_OW 251
51355: ST_TO_ADDR
// if ValidHex ( x , y ) then
51356: LD_VAR 0 4
51360: PPUSH
51361: LD_VAR 0 5
51365: PPUSH
51366: CALL_OW 488
51370: IFFALSE 51450
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51372: LD_VAR 0 2
51376: PPUSH
51377: CALL_OW 247
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: IN
51392: PUSH
51393: LD_VAR 0 1
51397: PPUSH
51398: CALL_OW 255
51402: PPUSH
51403: LD_VAR 0 2
51407: PPUSH
51408: CALL_OW 292
51412: OR
51413: IFFALSE 51431
// ComAttackUnit ( unit , enemy ) else
51415: LD_VAR 0 1
51419: PPUSH
51420: LD_VAR 0 2
51424: PPUSH
51425: CALL_OW 115
51429: GO 51450
// ComAgressiveMove ( unit , x , y ) ;
51431: LD_VAR 0 1
51435: PPUSH
51436: LD_VAR 0 4
51440: PPUSH
51441: LD_VAR 0 5
51445: PPUSH
51446: CALL_OW 114
// end ;
51450: LD_VAR 0 3
51454: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51455: LD_INT 0
51457: PPUSH
51458: PPUSH
51459: PPUSH
// list := AreaToList ( area , 0 ) ;
51460: LD_ADDR_VAR 0 5
51464: PUSH
51465: LD_VAR 0 1
51469: PPUSH
51470: LD_INT 0
51472: PPUSH
51473: CALL_OW 517
51477: ST_TO_ADDR
// if not list then
51478: LD_VAR 0 5
51482: NOT
51483: IFFALSE 51487
// exit ;
51485: GO 51617
// if all then
51487: LD_VAR 0 2
51491: IFFALSE 51579
// begin for i := 1 to list [ 1 ] do
51493: LD_ADDR_VAR 0 4
51497: PUSH
51498: DOUBLE
51499: LD_INT 1
51501: DEC
51502: ST_TO_ADDR
51503: LD_VAR 0 5
51507: PUSH
51508: LD_INT 1
51510: ARRAY
51511: PUSH
51512: FOR_TO
51513: IFFALSE 51575
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51515: LD_ADDR_VAR 0 3
51519: PUSH
51520: LD_VAR 0 3
51524: PPUSH
51525: LD_VAR 0 3
51529: PUSH
51530: LD_INT 1
51532: PLUS
51533: PPUSH
51534: LD_VAR 0 5
51538: PUSH
51539: LD_INT 1
51541: ARRAY
51542: PUSH
51543: LD_VAR 0 4
51547: ARRAY
51548: PUSH
51549: LD_VAR 0 5
51553: PUSH
51554: LD_INT 2
51556: ARRAY
51557: PUSH
51558: LD_VAR 0 4
51562: ARRAY
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PPUSH
51568: CALL_OW 1
51572: ST_TO_ADDR
51573: GO 51512
51575: POP
51576: POP
// exit ;
51577: GO 51617
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51579: LD_ADDR_VAR 0 3
51583: PUSH
51584: LD_VAR 0 5
51588: PUSH
51589: LD_INT 1
51591: ARRAY
51592: PUSH
51593: LD_INT 1
51595: ARRAY
51596: PUSH
51597: LD_VAR 0 5
51601: PUSH
51602: LD_INT 2
51604: ARRAY
51605: PUSH
51606: LD_INT 1
51608: ARRAY
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: ST_TO_ADDR
// end ;
51617: LD_VAR 0 3
51621: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51622: LD_INT 0
51624: PPUSH
51625: PPUSH
// list := AreaToList ( area , 0 ) ;
51626: LD_ADDR_VAR 0 4
51630: PUSH
51631: LD_VAR 0 1
51635: PPUSH
51636: LD_INT 0
51638: PPUSH
51639: CALL_OW 517
51643: ST_TO_ADDR
// if not list then
51644: LD_VAR 0 4
51648: NOT
51649: IFFALSE 51653
// exit ;
51651: GO 51694
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51653: LD_ADDR_VAR 0 3
51657: PUSH
51658: LD_VAR 0 4
51662: PUSH
51663: LD_INT 1
51665: ARRAY
51666: PUSH
51667: LD_INT 1
51669: ARRAY
51670: PUSH
51671: LD_VAR 0 4
51675: PUSH
51676: LD_INT 2
51678: ARRAY
51679: PUSH
51680: LD_INT 1
51682: ARRAY
51683: PUSH
51684: LD_VAR 0 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: ST_TO_ADDR
// end ;
51694: LD_VAR 0 3
51698: RET
// export function First ( array ) ; begin
51699: LD_INT 0
51701: PPUSH
// if not array then
51702: LD_VAR 0 1
51706: NOT
51707: IFFALSE 51711
// exit ;
51709: GO 51725
// result := array [ 1 ] ;
51711: LD_ADDR_VAR 0 2
51715: PUSH
51716: LD_VAR 0 1
51720: PUSH
51721: LD_INT 1
51723: ARRAY
51724: ST_TO_ADDR
// end ;
51725: LD_VAR 0 2
51729: RET
// export function Last ( array ) ; begin
51730: LD_INT 0
51732: PPUSH
// if not array then
51733: LD_VAR 0 1
51737: NOT
51738: IFFALSE 51742
// exit ;
51740: GO 51758
// result := array [ array ] ;
51742: LD_ADDR_VAR 0 2
51746: PUSH
51747: LD_VAR 0 1
51751: PUSH
51752: LD_VAR 0 1
51756: ARRAY
51757: ST_TO_ADDR
// end ;
51758: LD_VAR 0 2
51762: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51763: LD_INT 0
51765: PPUSH
51766: PPUSH
// result := [ ] ;
51767: LD_ADDR_VAR 0 5
51771: PUSH
51772: EMPTY
51773: ST_TO_ADDR
// if not array then
51774: LD_VAR 0 1
51778: NOT
51779: IFFALSE 51783
// exit ;
51781: GO 51895
// for i := 1 to array do
51783: LD_ADDR_VAR 0 6
51787: PUSH
51788: DOUBLE
51789: LD_INT 1
51791: DEC
51792: ST_TO_ADDR
51793: LD_VAR 0 1
51797: PUSH
51798: FOR_TO
51799: IFFALSE 51893
// if array [ i ] [ index ] = value then
51801: LD_VAR 0 1
51805: PUSH
51806: LD_VAR 0 6
51810: ARRAY
51811: PUSH
51812: LD_VAR 0 2
51816: ARRAY
51817: PUSH
51818: LD_VAR 0 3
51822: EQUAL
51823: IFFALSE 51891
// begin if indexColumn then
51825: LD_VAR 0 4
51829: IFFALSE 51865
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51831: LD_ADDR_VAR 0 5
51835: PUSH
51836: LD_VAR 0 5
51840: PPUSH
51841: LD_VAR 0 1
51845: PUSH
51846: LD_VAR 0 6
51850: ARRAY
51851: PUSH
51852: LD_VAR 0 4
51856: ARRAY
51857: PPUSH
51858: CALL 47077 0 2
51862: ST_TO_ADDR
51863: GO 51891
// result := Join ( result , array [ i ] ) ;
51865: LD_ADDR_VAR 0 5
51869: PUSH
51870: LD_VAR 0 5
51874: PPUSH
51875: LD_VAR 0 1
51879: PUSH
51880: LD_VAR 0 6
51884: ARRAY
51885: PPUSH
51886: CALL 47077 0 2
51890: ST_TO_ADDR
// end ;
51891: GO 51798
51893: POP
51894: POP
// end ;
51895: LD_VAR 0 5
51899: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51900: LD_INT 0
51902: PPUSH
// if not vehicles or not parkingPoint then
51903: LD_VAR 0 1
51907: NOT
51908: PUSH
51909: LD_VAR 0 2
51913: NOT
51914: OR
51915: IFFALSE 51919
// exit ;
51917: GO 52017
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51919: LD_ADDR_VAR 0 1
51923: PUSH
51924: LD_VAR 0 1
51928: PPUSH
51929: LD_INT 50
51931: PUSH
51932: EMPTY
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: PUSH
51938: LD_INT 92
51940: PUSH
51941: LD_VAR 0 2
51945: PUSH
51946: LD_INT 1
51948: ARRAY
51949: PUSH
51950: LD_VAR 0 2
51954: PUSH
51955: LD_INT 2
51957: ARRAY
51958: PUSH
51959: LD_INT 8
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PPUSH
51976: CALL_OW 72
51980: ST_TO_ADDR
// if not vehicles then
51981: LD_VAR 0 1
51985: NOT
51986: IFFALSE 51990
// exit ;
51988: GO 52017
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51990: LD_VAR 0 1
51994: PPUSH
51995: LD_VAR 0 2
51999: PUSH
52000: LD_INT 1
52002: ARRAY
52003: PPUSH
52004: LD_VAR 0 2
52008: PUSH
52009: LD_INT 2
52011: ARRAY
52012: PPUSH
52013: CALL_OW 111
// end ;
52017: LD_VAR 0 3
52021: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52022: LD_INT 0
52024: PPUSH
52025: PPUSH
52026: PPUSH
// if not side or not area then
52027: LD_VAR 0 1
52031: NOT
52032: PUSH
52033: LD_VAR 0 2
52037: NOT
52038: OR
52039: IFFALSE 52043
// exit ;
52041: GO 52162
// tmp := AreaToList ( area , 0 ) ;
52043: LD_ADDR_VAR 0 5
52047: PUSH
52048: LD_VAR 0 2
52052: PPUSH
52053: LD_INT 0
52055: PPUSH
52056: CALL_OW 517
52060: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52061: LD_ADDR_VAR 0 4
52065: PUSH
52066: DOUBLE
52067: LD_INT 1
52069: DEC
52070: ST_TO_ADDR
52071: LD_VAR 0 5
52075: PUSH
52076: LD_INT 1
52078: ARRAY
52079: PUSH
52080: FOR_TO
52081: IFFALSE 52160
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52083: LD_VAR 0 5
52087: PUSH
52088: LD_INT 1
52090: ARRAY
52091: PUSH
52092: LD_VAR 0 4
52096: ARRAY
52097: PPUSH
52098: LD_VAR 0 5
52102: PUSH
52103: LD_INT 2
52105: ARRAY
52106: PUSH
52107: LD_VAR 0 4
52111: ARRAY
52112: PPUSH
52113: CALL_OW 351
52117: IFFALSE 52158
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52119: LD_VAR 0 5
52123: PUSH
52124: LD_INT 1
52126: ARRAY
52127: PUSH
52128: LD_VAR 0 4
52132: ARRAY
52133: PPUSH
52134: LD_VAR 0 5
52138: PUSH
52139: LD_INT 2
52141: ARRAY
52142: PUSH
52143: LD_VAR 0 4
52147: ARRAY
52148: PPUSH
52149: LD_VAR 0 1
52153: PPUSH
52154: CALL_OW 244
// end ;
52158: GO 52080
52160: POP
52161: POP
// end ; end_of_file
52162: LD_VAR 0 3
52166: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52167: LD_VAR 0 1
52171: PUSH
52172: LD_INT 200
52174: DOUBLE
52175: GREATEREQUAL
52176: IFFALSE 52184
52178: LD_INT 299
52180: DOUBLE
52181: LESSEQUAL
52182: IFTRUE 52186
52184: GO 52218
52186: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52187: LD_VAR 0 1
52191: PPUSH
52192: LD_VAR 0 2
52196: PPUSH
52197: LD_VAR 0 3
52201: PPUSH
52202: LD_VAR 0 4
52206: PPUSH
52207: LD_VAR 0 5
52211: PPUSH
52212: CALL 52995 0 5
52216: GO 52295
52218: LD_INT 300
52220: DOUBLE
52221: GREATEREQUAL
52222: IFFALSE 52230
52224: LD_INT 399
52226: DOUBLE
52227: LESSEQUAL
52228: IFTRUE 52232
52230: GO 52294
52232: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52233: LD_VAR 0 1
52237: PPUSH
52238: LD_VAR 0 2
52242: PPUSH
52243: LD_VAR 0 3
52247: PPUSH
52248: LD_VAR 0 4
52252: PPUSH
52253: LD_VAR 0 5
52257: PPUSH
52258: LD_VAR 0 6
52262: PPUSH
52263: LD_VAR 0 7
52267: PPUSH
52268: LD_VAR 0 8
52272: PPUSH
52273: LD_VAR 0 9
52277: PPUSH
52278: LD_VAR 0 10
52282: PPUSH
52283: LD_VAR 0 11
52287: PPUSH
52288: CALL 59922 0 11
52292: GO 52295
52294: POP
// end ;
52295: PPOPN 11
52297: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52298: LD_VAR 0 1
52302: PPUSH
52303: LD_VAR 0 2
52307: PPUSH
52308: LD_VAR 0 3
52312: PPUSH
52313: LD_VAR 0 4
52317: PPUSH
52318: LD_VAR 0 5
52322: PPUSH
52323: CALL 52380 0 5
// end ; end_of_file
52327: PPOPN 5
52329: END
// export function SOS_UnitDestroyed ( un ) ; begin
52330: LD_INT 0
52332: PPUSH
// ComRadiation ( un ) ;
52333: LD_VAR 0 1
52337: PPUSH
52338: CALL 53399 0 1
// end ;
52342: LD_VAR 0 2
52346: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52347: LD_INT 0
52349: PPUSH
// ComRadiation ( un ) ;
52350: LD_VAR 0 1
52354: PPUSH
52355: CALL 53399 0 1
// end ;
52359: LD_VAR 0 2
52363: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52364: LD_INT 0
52366: PPUSH
// end ;
52367: LD_VAR 0 4
52371: RET
// export function SOS_Command ( cmd ) ; begin
52372: LD_INT 0
52374: PPUSH
// end ;
52375: LD_VAR 0 2
52379: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52380: LD_INT 0
52382: PPUSH
// end ;
52383: LD_VAR 0 6
52387: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
52388: LD_INT 0
52390: PPUSH
52391: PPUSH
52392: PPUSH
52393: PPUSH
// if not vehicle or not factory then
52394: LD_VAR 0 1
52398: NOT
52399: PUSH
52400: LD_VAR 0 2
52404: NOT
52405: OR
52406: IFFALSE 52410
// exit ;
52408: GO 52990
// if not factoryWaypoints then
52410: LD_EXP 55
52414: NOT
52415: IFFALSE 52419
// exit ;
52417: GO 52990
// for i := 1 to Count ( factoryWaypoints ) do
52419: LD_ADDR_VAR 0 4
52423: PUSH
52424: DOUBLE
52425: LD_INT 1
52427: DEC
52428: ST_TO_ADDR
52429: LD_EXP 55
52433: PPUSH
52434: CALL 11468 0 1
52438: PUSH
52439: FOR_TO
52440: IFFALSE 52988
// if factoryWaypoints [ i ] [ 2 ] = factory then
52442: LD_EXP 55
52446: PUSH
52447: LD_VAR 0 4
52451: ARRAY
52452: PUSH
52453: LD_INT 2
52455: ARRAY
52456: PUSH
52457: LD_VAR 0 2
52461: EQUAL
52462: IFFALSE 52986
// begin if GetControl ( vehicle ) = control_manual then
52464: LD_VAR 0 1
52468: PPUSH
52469: CALL_OW 263
52473: PUSH
52474: LD_INT 1
52476: EQUAL
52477: IFFALSE 52839
// begin driver := IsDrivenBy ( vehicle ) ;
52479: LD_ADDR_VAR 0 5
52483: PUSH
52484: LD_VAR 0 1
52488: PPUSH
52489: CALL_OW 311
52493: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
52494: LD_VAR 0 5
52498: PUSH
52499: LD_EXP 56
52503: IN
52504: PUSH
52505: LD_VAR 0 1
52509: PUSH
52510: LD_EXP 56
52514: IN
52515: OR
52516: IFFALSE 52522
// exit ;
52518: POP
52519: POP
52520: GO 52990
// if not HasTask ( driver ) then
52522: LD_VAR 0 5
52526: PPUSH
52527: CALL_OW 314
52531: NOT
52532: IFFALSE 52837
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
52534: LD_ADDR_EXP 56
52538: PUSH
52539: LD_EXP 56
52543: PPUSH
52544: LD_VAR 0 5
52548: PPUSH
52549: CALL 47077 0 2
52553: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
52554: LD_ADDR_EXP 56
52558: PUSH
52559: LD_EXP 56
52563: PPUSH
52564: LD_VAR 0 1
52568: PPUSH
52569: CALL 47077 0 2
52573: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52574: LD_ADDR_VAR 0 6
52578: PUSH
52579: LD_EXP 55
52583: PUSH
52584: LD_VAR 0 4
52588: ARRAY
52589: PUSH
52590: LD_INT 3
52592: ARRAY
52593: PPUSH
52594: LD_EXP 55
52598: PUSH
52599: LD_VAR 0 4
52603: ARRAY
52604: PUSH
52605: LD_INT 4
52607: ARRAY
52608: PPUSH
52609: CALL_OW 428
52613: ST_TO_ADDR
// if hex then
52614: LD_VAR 0 6
52618: IFFALSE 52636
// ComMoveUnit ( driver , hex ) else
52620: LD_VAR 0 5
52624: PPUSH
52625: LD_VAR 0 6
52629: PPUSH
52630: CALL_OW 112
52634: GO 52720
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
52636: LD_VAR 0 1
52640: PPUSH
52641: LD_EXP 55
52645: PUSH
52646: LD_VAR 0 4
52650: ARRAY
52651: PUSH
52652: LD_INT 3
52654: ARRAY
52655: PPUSH
52656: LD_EXP 55
52660: PUSH
52661: LD_VAR 0 4
52665: ARRAY
52666: PUSH
52667: LD_INT 4
52669: ARRAY
52670: PPUSH
52671: CALL_OW 297
52675: PUSH
52676: LD_INT 0
52678: GREATER
52679: IFFALSE 52720
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52681: LD_VAR 0 5
52685: PPUSH
52686: LD_EXP 55
52690: PUSH
52691: LD_VAR 0 4
52695: ARRAY
52696: PUSH
52697: LD_INT 3
52699: ARRAY
52700: PPUSH
52701: LD_EXP 55
52705: PUSH
52706: LD_VAR 0 4
52710: ARRAY
52711: PUSH
52712: LD_INT 4
52714: ARRAY
52715: PPUSH
52716: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52720: LD_VAR 0 5
52724: PPUSH
52725: CALL_OW 181
// if Multiplayer then
52729: LD_OWVAR 4
52733: IFFALSE 52782
// begin repeat wait ( 10 ) ;
52735: LD_INT 10
52737: PPUSH
52738: CALL_OW 67
// until not IsInUnit ( driver ) ;
52742: LD_VAR 0 5
52746: PPUSH
52747: CALL_OW 310
52751: NOT
52752: IFFALSE 52735
// if not HasTask ( driver ) then
52754: LD_VAR 0 5
52758: PPUSH
52759: CALL_OW 314
52763: NOT
52764: IFFALSE 52780
// ComEnterUnit ( driver , factory ) ;
52766: LD_VAR 0 5
52770: PPUSH
52771: LD_VAR 0 2
52775: PPUSH
52776: CALL_OW 120
// end else
52780: GO 52796
// AddComEnterUnit ( driver , factory ) ;
52782: LD_VAR 0 5
52786: PPUSH
52787: LD_VAR 0 2
52791: PPUSH
52792: CALL_OW 180
// wait ( 0 0$1 ) ;
52796: LD_INT 35
52798: PPUSH
52799: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
52803: LD_ADDR_EXP 56
52807: PUSH
52808: LD_EXP 56
52812: PUSH
52813: LD_VAR 0 5
52817: DIFF
52818: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
52819: LD_ADDR_EXP 56
52823: PUSH
52824: LD_EXP 56
52828: PUSH
52829: LD_VAR 0 1
52833: DIFF
52834: ST_TO_ADDR
// break ;
52835: GO 52988
// end ; end else
52837: GO 52986
// if GetControl ( vehicle ) = control_remote then
52839: LD_VAR 0 1
52843: PPUSH
52844: CALL_OW 263
52848: PUSH
52849: LD_INT 2
52851: EQUAL
52852: IFFALSE 52938
// begin wait ( 0 0$2 ) ;
52854: LD_INT 70
52856: PPUSH
52857: CALL_OW 67
// repeat wait ( 10 ) ;
52861: LD_INT 10
52863: PPUSH
52864: CALL_OW 67
// Connect ( vehicle ) ;
52868: LD_VAR 0 1
52872: PPUSH
52873: CALL 17674 0 1
// until IsControledBy ( vehicle ) ;
52877: LD_VAR 0 1
52881: PPUSH
52882: CALL_OW 312
52886: IFFALSE 52861
// wait ( 10 ) ;
52888: LD_INT 10
52890: PPUSH
52891: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52895: LD_VAR 0 1
52899: PPUSH
52900: LD_EXP 55
52904: PUSH
52905: LD_VAR 0 4
52909: ARRAY
52910: PUSH
52911: LD_INT 3
52913: ARRAY
52914: PPUSH
52915: LD_EXP 55
52919: PUSH
52920: LD_VAR 0 4
52924: ARRAY
52925: PUSH
52926: LD_INT 4
52928: ARRAY
52929: PPUSH
52930: CALL_OW 111
// break ;
52934: GO 52988
// end else
52936: GO 52986
// begin wait ( 0 0$3 ) ;
52938: LD_INT 105
52940: PPUSH
52941: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52945: LD_VAR 0 1
52949: PPUSH
52950: LD_EXP 55
52954: PUSH
52955: LD_VAR 0 4
52959: ARRAY
52960: PUSH
52961: LD_INT 3
52963: ARRAY
52964: PPUSH
52965: LD_EXP 55
52969: PUSH
52970: LD_VAR 0 4
52974: ARRAY
52975: PUSH
52976: LD_INT 4
52978: ARRAY
52979: PPUSH
52980: CALL_OW 111
// break ;
52984: GO 52988
// end ; end ;
52986: GO 52439
52988: POP
52989: POP
// end ;
52990: LD_VAR 0 3
52994: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52995: LD_INT 0
52997: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52998: LD_VAR 0 1
53002: PUSH
53003: LD_INT 250
53005: EQUAL
53006: PUSH
53007: LD_VAR 0 2
53011: PPUSH
53012: CALL_OW 264
53016: PUSH
53017: LD_INT 81
53019: EQUAL
53020: AND
53021: IFFALSE 53042
// MinerPlaceMine ( unit , x , y ) ;
53023: LD_VAR 0 2
53027: PPUSH
53028: LD_VAR 0 4
53032: PPUSH
53033: LD_VAR 0 5
53037: PPUSH
53038: CALL 56134 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53042: LD_VAR 0 1
53046: PUSH
53047: LD_INT 251
53049: EQUAL
53050: PUSH
53051: LD_VAR 0 2
53055: PPUSH
53056: CALL_OW 264
53060: PUSH
53061: LD_INT 81
53063: EQUAL
53064: AND
53065: IFFALSE 53086
// MinerDetonateMine ( unit , x , y ) ;
53067: LD_VAR 0 2
53071: PPUSH
53072: LD_VAR 0 4
53076: PPUSH
53077: LD_VAR 0 5
53081: PPUSH
53082: CALL 56409 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53086: LD_VAR 0 1
53090: PUSH
53091: LD_INT 252
53093: EQUAL
53094: PUSH
53095: LD_VAR 0 2
53099: PPUSH
53100: CALL_OW 264
53104: PUSH
53105: LD_INT 81
53107: EQUAL
53108: AND
53109: IFFALSE 53130
// MinerCreateMinefield ( unit , x , y ) ;
53111: LD_VAR 0 2
53115: PPUSH
53116: LD_VAR 0 4
53120: PPUSH
53121: LD_VAR 0 5
53125: PPUSH
53126: CALL 56826 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53130: LD_VAR 0 1
53134: PUSH
53135: LD_INT 253
53137: EQUAL
53138: PUSH
53139: LD_VAR 0 2
53143: PPUSH
53144: CALL_OW 257
53148: PUSH
53149: LD_INT 5
53151: EQUAL
53152: AND
53153: IFFALSE 53174
// ComBinocular ( unit , x , y ) ;
53155: LD_VAR 0 2
53159: PPUSH
53160: LD_VAR 0 4
53164: PPUSH
53165: LD_VAR 0 5
53169: PPUSH
53170: CALL 57195 0 3
// if selectedUnit then
53174: LD_VAR 0 3
53178: IFFALSE 53234
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53180: LD_VAR 0 1
53184: PUSH
53185: LD_INT 254
53187: EQUAL
53188: PUSH
53189: LD_VAR 0 2
53193: PPUSH
53194: CALL_OW 264
53198: PUSH
53199: LD_INT 99
53201: EQUAL
53202: AND
53203: PUSH
53204: LD_VAR 0 3
53208: PPUSH
53209: CALL_OW 263
53213: PUSH
53214: LD_INT 3
53216: EQUAL
53217: AND
53218: IFFALSE 53234
// HackDestroyVehicle ( unit , selectedUnit ) ;
53220: LD_VAR 0 2
53224: PPUSH
53225: LD_VAR 0 3
53229: PPUSH
53230: CALL 55498 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53234: LD_VAR 0 1
53238: PUSH
53239: LD_INT 255
53241: EQUAL
53242: PUSH
53243: LD_VAR 0 2
53247: PPUSH
53248: CALL_OW 264
53252: PUSH
53253: LD_INT 14
53255: PUSH
53256: LD_INT 53
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: IN
53263: AND
53264: PUSH
53265: LD_VAR 0 4
53269: PPUSH
53270: LD_VAR 0 5
53274: PPUSH
53275: CALL_OW 488
53279: AND
53280: IFFALSE 53304
// CutTreeXYR ( unit , x , y , 12 ) ;
53282: LD_VAR 0 2
53286: PPUSH
53287: LD_VAR 0 4
53291: PPUSH
53292: LD_VAR 0 5
53296: PPUSH
53297: LD_INT 12
53299: PPUSH
53300: CALL 53495 0 4
// if cmd = 256 then
53304: LD_VAR 0 1
53308: PUSH
53309: LD_INT 256
53311: EQUAL
53312: IFFALSE 53333
// SetFactoryWaypoint ( unit , x , y ) ;
53314: LD_VAR 0 2
53318: PPUSH
53319: LD_VAR 0 4
53323: PPUSH
53324: LD_VAR 0 5
53328: PPUSH
53329: CALL 59930 0 3
// if cmd = 257 then
53333: LD_VAR 0 1
53337: PUSH
53338: LD_INT 257
53340: EQUAL
53341: IFFALSE 53362
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53343: LD_VAR 0 2
53347: PPUSH
53348: LD_VAR 0 4
53352: PPUSH
53353: LD_VAR 0 5
53357: PPUSH
53358: CALL 60420 0 3
// if cmd = 258 then
53362: LD_VAR 0 1
53366: PUSH
53367: LD_INT 258
53369: EQUAL
53370: IFFALSE 53394
// BurnTreeXYR ( unit , x , y , 8 ) ;
53372: LD_VAR 0 2
53376: PPUSH
53377: LD_VAR 0 4
53381: PPUSH
53382: LD_VAR 0 5
53386: PPUSH
53387: LD_INT 8
53389: PPUSH
53390: CALL 53889 0 4
// end ;
53394: LD_VAR 0 6
53398: RET
// export function ComRadiation ( un ) ; var eff ; begin
53399: LD_INT 0
53401: PPUSH
53402: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53403: LD_VAR 0 1
53407: PPUSH
53408: CALL_OW 264
53412: PUSH
53413: LD_INT 91
53415: NONEQUAL
53416: IFFALSE 53420
// exit ;
53418: GO 53490
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53420: LD_INT 68
53422: PPUSH
53423: LD_VAR 0 1
53427: PPUSH
53428: CALL_OW 255
53432: PPUSH
53433: CALL_OW 321
53437: PUSH
53438: LD_INT 2
53440: EQUAL
53441: IFFALSE 53453
// eff := 50 else
53443: LD_ADDR_VAR 0 3
53447: PUSH
53448: LD_INT 50
53450: ST_TO_ADDR
53451: GO 53461
// eff := 25 ;
53453: LD_ADDR_VAR 0 3
53457: PUSH
53458: LD_INT 25
53460: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53461: LD_VAR 0 1
53465: PPUSH
53466: CALL_OW 250
53470: PPUSH
53471: LD_VAR 0 1
53475: PPUSH
53476: CALL_OW 251
53480: PPUSH
53481: LD_VAR 0 3
53485: PPUSH
53486: CALL_OW 495
// end ;
53490: LD_VAR 0 2
53494: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53495: LD_INT 0
53497: PPUSH
53498: PPUSH
53499: PPUSH
53500: PPUSH
53501: PPUSH
53502: PPUSH
53503: PPUSH
53504: PPUSH
53505: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL_OW 302
53515: NOT
53516: PUSH
53517: LD_VAR 0 2
53521: PPUSH
53522: LD_VAR 0 3
53526: PPUSH
53527: CALL_OW 488
53531: NOT
53532: OR
53533: PUSH
53534: LD_VAR 0 4
53538: NOT
53539: OR
53540: IFFALSE 53544
// exit ;
53542: GO 53884
// list := [ ] ;
53544: LD_ADDR_VAR 0 13
53548: PUSH
53549: EMPTY
53550: ST_TO_ADDR
// if x - r < 0 then
53551: LD_VAR 0 2
53555: PUSH
53556: LD_VAR 0 4
53560: MINUS
53561: PUSH
53562: LD_INT 0
53564: LESS
53565: IFFALSE 53577
// min_x := 0 else
53567: LD_ADDR_VAR 0 7
53571: PUSH
53572: LD_INT 0
53574: ST_TO_ADDR
53575: GO 53593
// min_x := x - r ;
53577: LD_ADDR_VAR 0 7
53581: PUSH
53582: LD_VAR 0 2
53586: PUSH
53587: LD_VAR 0 4
53591: MINUS
53592: ST_TO_ADDR
// if y - r < 0 then
53593: LD_VAR 0 3
53597: PUSH
53598: LD_VAR 0 4
53602: MINUS
53603: PUSH
53604: LD_INT 0
53606: LESS
53607: IFFALSE 53619
// min_y := 0 else
53609: LD_ADDR_VAR 0 8
53613: PUSH
53614: LD_INT 0
53616: ST_TO_ADDR
53617: GO 53635
// min_y := y - r ;
53619: LD_ADDR_VAR 0 8
53623: PUSH
53624: LD_VAR 0 3
53628: PUSH
53629: LD_VAR 0 4
53633: MINUS
53634: ST_TO_ADDR
// max_x := x + r ;
53635: LD_ADDR_VAR 0 9
53639: PUSH
53640: LD_VAR 0 2
53644: PUSH
53645: LD_VAR 0 4
53649: PLUS
53650: ST_TO_ADDR
// max_y := y + r ;
53651: LD_ADDR_VAR 0 10
53655: PUSH
53656: LD_VAR 0 3
53660: PUSH
53661: LD_VAR 0 4
53665: PLUS
53666: ST_TO_ADDR
// for _x = min_x to max_x do
53667: LD_ADDR_VAR 0 11
53671: PUSH
53672: DOUBLE
53673: LD_VAR 0 7
53677: DEC
53678: ST_TO_ADDR
53679: LD_VAR 0 9
53683: PUSH
53684: FOR_TO
53685: IFFALSE 53802
// for _y = min_y to max_y do
53687: LD_ADDR_VAR 0 12
53691: PUSH
53692: DOUBLE
53693: LD_VAR 0 8
53697: DEC
53698: ST_TO_ADDR
53699: LD_VAR 0 10
53703: PUSH
53704: FOR_TO
53705: IFFALSE 53798
// begin if not ValidHex ( _x , _y ) then
53707: LD_VAR 0 11
53711: PPUSH
53712: LD_VAR 0 12
53716: PPUSH
53717: CALL_OW 488
53721: NOT
53722: IFFALSE 53726
// continue ;
53724: GO 53704
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53726: LD_VAR 0 11
53730: PPUSH
53731: LD_VAR 0 12
53735: PPUSH
53736: CALL_OW 351
53740: PUSH
53741: LD_VAR 0 11
53745: PPUSH
53746: LD_VAR 0 12
53750: PPUSH
53751: CALL_OW 554
53755: AND
53756: IFFALSE 53796
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53758: LD_ADDR_VAR 0 13
53762: PUSH
53763: LD_VAR 0 13
53767: PPUSH
53768: LD_VAR 0 13
53772: PUSH
53773: LD_INT 1
53775: PLUS
53776: PPUSH
53777: LD_VAR 0 11
53781: PUSH
53782: LD_VAR 0 12
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PPUSH
53791: CALL_OW 2
53795: ST_TO_ADDR
// end ;
53796: GO 53704
53798: POP
53799: POP
53800: GO 53684
53802: POP
53803: POP
// if not list then
53804: LD_VAR 0 13
53808: NOT
53809: IFFALSE 53813
// exit ;
53811: GO 53884
// for i in list do
53813: LD_ADDR_VAR 0 6
53817: PUSH
53818: LD_VAR 0 13
53822: PUSH
53823: FOR_IN
53824: IFFALSE 53882
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53826: LD_VAR 0 1
53830: PPUSH
53831: LD_STRING M
53833: PUSH
53834: LD_VAR 0 6
53838: PUSH
53839: LD_INT 1
53841: ARRAY
53842: PUSH
53843: LD_VAR 0 6
53847: PUSH
53848: LD_INT 2
53850: ARRAY
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: PPUSH
53876: CALL_OW 447
53880: GO 53823
53882: POP
53883: POP
// end ;
53884: LD_VAR 0 5
53888: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53889: LD_INT 0
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
53896: PPUSH
53897: PPUSH
53898: PPUSH
53899: PPUSH
53900: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53901: LD_VAR 0 1
53905: PPUSH
53906: CALL_OW 302
53910: NOT
53911: PUSH
53912: LD_VAR 0 2
53916: PPUSH
53917: LD_VAR 0 3
53921: PPUSH
53922: CALL_OW 488
53926: NOT
53927: OR
53928: PUSH
53929: LD_VAR 0 4
53933: NOT
53934: OR
53935: IFFALSE 53939
// exit ;
53937: GO 54452
// list := [ ] ;
53939: LD_ADDR_VAR 0 13
53943: PUSH
53944: EMPTY
53945: ST_TO_ADDR
// if x - r < 0 then
53946: LD_VAR 0 2
53950: PUSH
53951: LD_VAR 0 4
53955: MINUS
53956: PUSH
53957: LD_INT 0
53959: LESS
53960: IFFALSE 53972
// min_x := 0 else
53962: LD_ADDR_VAR 0 7
53966: PUSH
53967: LD_INT 0
53969: ST_TO_ADDR
53970: GO 53988
// min_x := x - r ;
53972: LD_ADDR_VAR 0 7
53976: PUSH
53977: LD_VAR 0 2
53981: PUSH
53982: LD_VAR 0 4
53986: MINUS
53987: ST_TO_ADDR
// if y - r < 0 then
53988: LD_VAR 0 3
53992: PUSH
53993: LD_VAR 0 4
53997: MINUS
53998: PUSH
53999: LD_INT 0
54001: LESS
54002: IFFALSE 54014
// min_y := 0 else
54004: LD_ADDR_VAR 0 8
54008: PUSH
54009: LD_INT 0
54011: ST_TO_ADDR
54012: GO 54030
// min_y := y - r ;
54014: LD_ADDR_VAR 0 8
54018: PUSH
54019: LD_VAR 0 3
54023: PUSH
54024: LD_VAR 0 4
54028: MINUS
54029: ST_TO_ADDR
// max_x := x + r ;
54030: LD_ADDR_VAR 0 9
54034: PUSH
54035: LD_VAR 0 2
54039: PUSH
54040: LD_VAR 0 4
54044: PLUS
54045: ST_TO_ADDR
// max_y := y + r ;
54046: LD_ADDR_VAR 0 10
54050: PUSH
54051: LD_VAR 0 3
54055: PUSH
54056: LD_VAR 0 4
54060: PLUS
54061: ST_TO_ADDR
// for _x = min_x to max_x do
54062: LD_ADDR_VAR 0 11
54066: PUSH
54067: DOUBLE
54068: LD_VAR 0 7
54072: DEC
54073: ST_TO_ADDR
54074: LD_VAR 0 9
54078: PUSH
54079: FOR_TO
54080: IFFALSE 54197
// for _y = min_y to max_y do
54082: LD_ADDR_VAR 0 12
54086: PUSH
54087: DOUBLE
54088: LD_VAR 0 8
54092: DEC
54093: ST_TO_ADDR
54094: LD_VAR 0 10
54098: PUSH
54099: FOR_TO
54100: IFFALSE 54193
// begin if not ValidHex ( _x , _y ) then
54102: LD_VAR 0 11
54106: PPUSH
54107: LD_VAR 0 12
54111: PPUSH
54112: CALL_OW 488
54116: NOT
54117: IFFALSE 54121
// continue ;
54119: GO 54099
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54121: LD_VAR 0 11
54125: PPUSH
54126: LD_VAR 0 12
54130: PPUSH
54131: CALL_OW 351
54135: PUSH
54136: LD_VAR 0 11
54140: PPUSH
54141: LD_VAR 0 12
54145: PPUSH
54146: CALL_OW 554
54150: AND
54151: IFFALSE 54191
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54153: LD_ADDR_VAR 0 13
54157: PUSH
54158: LD_VAR 0 13
54162: PPUSH
54163: LD_VAR 0 13
54167: PUSH
54168: LD_INT 1
54170: PLUS
54171: PPUSH
54172: LD_VAR 0 11
54176: PUSH
54177: LD_VAR 0 12
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PPUSH
54186: CALL_OW 2
54190: ST_TO_ADDR
// end ;
54191: GO 54099
54193: POP
54194: POP
54195: GO 54079
54197: POP
54198: POP
// if not list then
54199: LD_VAR 0 13
54203: NOT
54204: IFFALSE 54208
// exit ;
54206: GO 54452
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
54208: LD_ADDR_VAR 0 13
54212: PUSH
54213: LD_VAR 0 1
54217: PPUSH
54218: LD_VAR 0 13
54222: PPUSH
54223: LD_INT 1
54225: PPUSH
54226: LD_INT 1
54228: PPUSH
54229: CALL 14816 0 4
54233: ST_TO_ADDR
// ComStop ( flame ) ;
54234: LD_VAR 0 1
54238: PPUSH
54239: CALL_OW 141
// for i in list do
54243: LD_ADDR_VAR 0 6
54247: PUSH
54248: LD_VAR 0 13
54252: PUSH
54253: FOR_IN
54254: IFFALSE 54285
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
54256: LD_VAR 0 1
54260: PPUSH
54261: LD_VAR 0 6
54265: PUSH
54266: LD_INT 1
54268: ARRAY
54269: PPUSH
54270: LD_VAR 0 6
54274: PUSH
54275: LD_INT 2
54277: ARRAY
54278: PPUSH
54279: CALL_OW 176
54283: GO 54253
54285: POP
54286: POP
// repeat wait ( 0 0$1 ) ;
54287: LD_INT 35
54289: PPUSH
54290: CALL_OW 67
// task := GetTaskList ( flame ) ;
54294: LD_ADDR_VAR 0 14
54298: PUSH
54299: LD_VAR 0 1
54303: PPUSH
54304: CALL_OW 437
54308: ST_TO_ADDR
// if not task then
54309: LD_VAR 0 14
54313: NOT
54314: IFFALSE 54318
// exit ;
54316: GO 54452
// if task [ 1 ] [ 1 ] <> | then
54318: LD_VAR 0 14
54322: PUSH
54323: LD_INT 1
54325: ARRAY
54326: PUSH
54327: LD_INT 1
54329: ARRAY
54330: PUSH
54331: LD_STRING |
54333: NONEQUAL
54334: IFFALSE 54338
// exit ;
54336: GO 54452
// _x := task [ 1 ] [ 2 ] ;
54338: LD_ADDR_VAR 0 11
54342: PUSH
54343: LD_VAR 0 14
54347: PUSH
54348: LD_INT 1
54350: ARRAY
54351: PUSH
54352: LD_INT 2
54354: ARRAY
54355: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54356: LD_ADDR_VAR 0 12
54360: PUSH
54361: LD_VAR 0 14
54365: PUSH
54366: LD_INT 1
54368: ARRAY
54369: PUSH
54370: LD_INT 3
54372: ARRAY
54373: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54374: LD_VAR 0 11
54378: PPUSH
54379: LD_VAR 0 12
54383: PPUSH
54384: CALL_OW 351
54388: NOT
54389: PUSH
54390: LD_VAR 0 11
54394: PPUSH
54395: LD_VAR 0 12
54399: PPUSH
54400: CALL_OW 554
54404: NOT
54405: OR
54406: IFFALSE 54440
// begin task := Delete ( task , 1 ) ;
54408: LD_ADDR_VAR 0 14
54412: PUSH
54413: LD_VAR 0 14
54417: PPUSH
54418: LD_INT 1
54420: PPUSH
54421: CALL_OW 3
54425: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54426: LD_VAR 0 1
54430: PPUSH
54431: LD_VAR 0 14
54435: PPUSH
54436: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54440: LD_VAR 0 1
54444: PPUSH
54445: CALL_OW 314
54449: NOT
54450: IFFALSE 54287
// end ;
54452: LD_VAR 0 5
54456: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54457: LD_EXP 44
54461: NOT
54462: IFFALSE 54512
54464: GO 54466
54466: DISABLE
// begin initHack := true ;
54467: LD_ADDR_EXP 44
54471: PUSH
54472: LD_INT 1
54474: ST_TO_ADDR
// hackTanks := [ ] ;
54475: LD_ADDR_EXP 45
54479: PUSH
54480: EMPTY
54481: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54482: LD_ADDR_EXP 46
54486: PUSH
54487: EMPTY
54488: ST_TO_ADDR
// hackLimit := 3 ;
54489: LD_ADDR_EXP 47
54493: PUSH
54494: LD_INT 3
54496: ST_TO_ADDR
// hackDist := 12 ;
54497: LD_ADDR_EXP 48
54501: PUSH
54502: LD_INT 12
54504: ST_TO_ADDR
// hackCounter := [ ] ;
54505: LD_ADDR_EXP 49
54509: PUSH
54510: EMPTY
54511: ST_TO_ADDR
// end ;
54512: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54513: LD_EXP 44
54517: PUSH
54518: LD_INT 34
54520: PUSH
54521: LD_INT 99
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PPUSH
54528: CALL_OW 69
54532: AND
54533: IFFALSE 54786
54535: GO 54537
54537: DISABLE
54538: LD_INT 0
54540: PPUSH
54541: PPUSH
// begin enable ;
54542: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54543: LD_ADDR_VAR 0 1
54547: PUSH
54548: LD_INT 34
54550: PUSH
54551: LD_INT 99
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PPUSH
54558: CALL_OW 69
54562: PUSH
54563: FOR_IN
54564: IFFALSE 54784
// begin if not i in hackTanks then
54566: LD_VAR 0 1
54570: PUSH
54571: LD_EXP 45
54575: IN
54576: NOT
54577: IFFALSE 54660
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54579: LD_ADDR_EXP 45
54583: PUSH
54584: LD_EXP 45
54588: PPUSH
54589: LD_EXP 45
54593: PUSH
54594: LD_INT 1
54596: PLUS
54597: PPUSH
54598: LD_VAR 0 1
54602: PPUSH
54603: CALL_OW 1
54607: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54608: LD_ADDR_EXP 46
54612: PUSH
54613: LD_EXP 46
54617: PPUSH
54618: LD_EXP 46
54622: PUSH
54623: LD_INT 1
54625: PLUS
54626: PPUSH
54627: EMPTY
54628: PPUSH
54629: CALL_OW 1
54633: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54634: LD_ADDR_EXP 49
54638: PUSH
54639: LD_EXP 49
54643: PPUSH
54644: LD_EXP 49
54648: PUSH
54649: LD_INT 1
54651: PLUS
54652: PPUSH
54653: EMPTY
54654: PPUSH
54655: CALL_OW 1
54659: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54660: LD_VAR 0 1
54664: PPUSH
54665: CALL_OW 302
54669: NOT
54670: IFFALSE 54683
// begin HackUnlinkAll ( i ) ;
54672: LD_VAR 0 1
54676: PPUSH
54677: CALL 54789 0 1
// continue ;
54681: GO 54563
// end ; HackCheckCapturedStatus ( i ) ;
54683: LD_VAR 0 1
54687: PPUSH
54688: CALL 55232 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54692: LD_ADDR_VAR 0 2
54696: PUSH
54697: LD_INT 81
54699: PUSH
54700: LD_VAR 0 1
54704: PPUSH
54705: CALL_OW 255
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 33
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 91
54726: PUSH
54727: LD_VAR 0 1
54731: PUSH
54732: LD_EXP 48
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 50
54744: PUSH
54745: EMPTY
54746: LIST
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: PPUSH
54754: CALL_OW 69
54758: ST_TO_ADDR
// if not tmp then
54759: LD_VAR 0 2
54763: NOT
54764: IFFALSE 54768
// continue ;
54766: GO 54563
// HackLink ( i , tmp ) ;
54768: LD_VAR 0 1
54772: PPUSH
54773: LD_VAR 0 2
54777: PPUSH
54778: CALL 54925 0 2
// end ;
54782: GO 54563
54784: POP
54785: POP
// end ;
54786: PPOPN 2
54788: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54789: LD_INT 0
54791: PPUSH
54792: PPUSH
54793: PPUSH
// if not hack in hackTanks then
54794: LD_VAR 0 1
54798: PUSH
54799: LD_EXP 45
54803: IN
54804: NOT
54805: IFFALSE 54809
// exit ;
54807: GO 54920
// index := GetElementIndex ( hackTanks , hack ) ;
54809: LD_ADDR_VAR 0 4
54813: PUSH
54814: LD_EXP 45
54818: PPUSH
54819: LD_VAR 0 1
54823: PPUSH
54824: CALL 14113 0 2
54828: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54829: LD_EXP 46
54833: PUSH
54834: LD_VAR 0 4
54838: ARRAY
54839: IFFALSE 54920
// begin for i in hackTanksCaptured [ index ] do
54841: LD_ADDR_VAR 0 3
54845: PUSH
54846: LD_EXP 46
54850: PUSH
54851: LD_VAR 0 4
54855: ARRAY
54856: PUSH
54857: FOR_IN
54858: IFFALSE 54884
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54860: LD_VAR 0 3
54864: PUSH
54865: LD_INT 1
54867: ARRAY
54868: PPUSH
54869: LD_VAR 0 3
54873: PUSH
54874: LD_INT 2
54876: ARRAY
54877: PPUSH
54878: CALL_OW 235
54882: GO 54857
54884: POP
54885: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54886: LD_ADDR_EXP 46
54890: PUSH
54891: LD_EXP 46
54895: PPUSH
54896: LD_VAR 0 4
54900: PPUSH
54901: EMPTY
54902: PPUSH
54903: CALL_OW 1
54907: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54908: LD_VAR 0 1
54912: PPUSH
54913: LD_INT 0
54915: PPUSH
54916: CALL_OW 505
// end ; end ;
54920: LD_VAR 0 2
54924: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54925: LD_INT 0
54927: PPUSH
54928: PPUSH
54929: PPUSH
// if not hack in hackTanks or not vehicles then
54930: LD_VAR 0 1
54934: PUSH
54935: LD_EXP 45
54939: IN
54940: NOT
54941: PUSH
54942: LD_VAR 0 2
54946: NOT
54947: OR
54948: IFFALSE 54952
// exit ;
54950: GO 55227
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54952: LD_ADDR_VAR 0 2
54956: PUSH
54957: LD_VAR 0 1
54961: PPUSH
54962: LD_VAR 0 2
54966: PPUSH
54967: LD_INT 1
54969: PPUSH
54970: LD_INT 1
54972: PPUSH
54973: CALL 14763 0 4
54977: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54978: LD_ADDR_VAR 0 5
54982: PUSH
54983: LD_EXP 45
54987: PPUSH
54988: LD_VAR 0 1
54992: PPUSH
54993: CALL 14113 0 2
54997: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54998: LD_EXP 46
55002: PUSH
55003: LD_VAR 0 5
55007: ARRAY
55008: PUSH
55009: LD_EXP 47
55013: LESS
55014: IFFALSE 55203
// begin for i := 1 to vehicles do
55016: LD_ADDR_VAR 0 4
55020: PUSH
55021: DOUBLE
55022: LD_INT 1
55024: DEC
55025: ST_TO_ADDR
55026: LD_VAR 0 2
55030: PUSH
55031: FOR_TO
55032: IFFALSE 55201
// begin if hackTanksCaptured [ index ] = hackLimit then
55034: LD_EXP 46
55038: PUSH
55039: LD_VAR 0 5
55043: ARRAY
55044: PUSH
55045: LD_EXP 47
55049: EQUAL
55050: IFFALSE 55054
// break ;
55052: GO 55201
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55054: LD_ADDR_EXP 49
55058: PUSH
55059: LD_EXP 49
55063: PPUSH
55064: LD_VAR 0 5
55068: PPUSH
55069: LD_EXP 49
55073: PUSH
55074: LD_VAR 0 5
55078: ARRAY
55079: PUSH
55080: LD_INT 1
55082: PLUS
55083: PPUSH
55084: CALL_OW 1
55088: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55089: LD_ADDR_EXP 46
55093: PUSH
55094: LD_EXP 46
55098: PPUSH
55099: LD_VAR 0 5
55103: PUSH
55104: LD_EXP 46
55108: PUSH
55109: LD_VAR 0 5
55113: ARRAY
55114: PUSH
55115: LD_INT 1
55117: PLUS
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PPUSH
55123: LD_VAR 0 2
55127: PUSH
55128: LD_VAR 0 4
55132: ARRAY
55133: PUSH
55134: LD_VAR 0 2
55138: PUSH
55139: LD_VAR 0 4
55143: ARRAY
55144: PPUSH
55145: CALL_OW 255
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PPUSH
55154: CALL 14328 0 3
55158: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55159: LD_VAR 0 2
55163: PUSH
55164: LD_VAR 0 4
55168: ARRAY
55169: PPUSH
55170: LD_VAR 0 1
55174: PPUSH
55175: CALL_OW 255
55179: PPUSH
55180: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55184: LD_VAR 0 2
55188: PUSH
55189: LD_VAR 0 4
55193: ARRAY
55194: PPUSH
55195: CALL_OW 141
// end ;
55199: GO 55031
55201: POP
55202: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55203: LD_VAR 0 1
55207: PPUSH
55208: LD_EXP 46
55212: PUSH
55213: LD_VAR 0 5
55217: ARRAY
55218: PUSH
55219: LD_INT 0
55221: PLUS
55222: PPUSH
55223: CALL_OW 505
// end ;
55227: LD_VAR 0 3
55231: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55232: LD_INT 0
55234: PPUSH
55235: PPUSH
55236: PPUSH
55237: PPUSH
// if not hack in hackTanks then
55238: LD_VAR 0 1
55242: PUSH
55243: LD_EXP 45
55247: IN
55248: NOT
55249: IFFALSE 55253
// exit ;
55251: GO 55493
// index := GetElementIndex ( hackTanks , hack ) ;
55253: LD_ADDR_VAR 0 4
55257: PUSH
55258: LD_EXP 45
55262: PPUSH
55263: LD_VAR 0 1
55267: PPUSH
55268: CALL 14113 0 2
55272: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55273: LD_ADDR_VAR 0 3
55277: PUSH
55278: DOUBLE
55279: LD_EXP 46
55283: PUSH
55284: LD_VAR 0 4
55288: ARRAY
55289: INC
55290: ST_TO_ADDR
55291: LD_INT 1
55293: PUSH
55294: FOR_DOWNTO
55295: IFFALSE 55467
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55297: LD_ADDR_VAR 0 5
55301: PUSH
55302: LD_EXP 46
55306: PUSH
55307: LD_VAR 0 4
55311: ARRAY
55312: PUSH
55313: LD_VAR 0 3
55317: ARRAY
55318: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55319: LD_VAR 0 5
55323: PUSH
55324: LD_INT 1
55326: ARRAY
55327: PPUSH
55328: CALL_OW 302
55332: NOT
55333: PUSH
55334: LD_VAR 0 5
55338: PUSH
55339: LD_INT 1
55341: ARRAY
55342: PPUSH
55343: CALL_OW 255
55347: PUSH
55348: LD_VAR 0 1
55352: PPUSH
55353: CALL_OW 255
55357: NONEQUAL
55358: OR
55359: IFFALSE 55465
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55361: LD_VAR 0 5
55365: PUSH
55366: LD_INT 1
55368: ARRAY
55369: PPUSH
55370: CALL_OW 305
55374: PUSH
55375: LD_VAR 0 5
55379: PUSH
55380: LD_INT 1
55382: ARRAY
55383: PPUSH
55384: CALL_OW 255
55388: PUSH
55389: LD_VAR 0 1
55393: PPUSH
55394: CALL_OW 255
55398: EQUAL
55399: AND
55400: IFFALSE 55424
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55402: LD_VAR 0 5
55406: PUSH
55407: LD_INT 1
55409: ARRAY
55410: PPUSH
55411: LD_VAR 0 5
55415: PUSH
55416: LD_INT 2
55418: ARRAY
55419: PPUSH
55420: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55424: LD_ADDR_EXP 46
55428: PUSH
55429: LD_EXP 46
55433: PPUSH
55434: LD_VAR 0 4
55438: PPUSH
55439: LD_EXP 46
55443: PUSH
55444: LD_VAR 0 4
55448: ARRAY
55449: PPUSH
55450: LD_VAR 0 3
55454: PPUSH
55455: CALL_OW 3
55459: PPUSH
55460: CALL_OW 1
55464: ST_TO_ADDR
// end ; end ;
55465: GO 55294
55467: POP
55468: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55469: LD_VAR 0 1
55473: PPUSH
55474: LD_EXP 46
55478: PUSH
55479: LD_VAR 0 4
55483: ARRAY
55484: PUSH
55485: LD_INT 0
55487: PLUS
55488: PPUSH
55489: CALL_OW 505
// end ;
55493: LD_VAR 0 2
55497: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55498: LD_INT 0
55500: PPUSH
55501: PPUSH
55502: PPUSH
55503: PPUSH
// if not hack in hackTanks then
55504: LD_VAR 0 1
55508: PUSH
55509: LD_EXP 45
55513: IN
55514: NOT
55515: IFFALSE 55519
// exit ;
55517: GO 55604
// index := GetElementIndex ( hackTanks , hack ) ;
55519: LD_ADDR_VAR 0 5
55523: PUSH
55524: LD_EXP 45
55528: PPUSH
55529: LD_VAR 0 1
55533: PPUSH
55534: CALL 14113 0 2
55538: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55539: LD_ADDR_VAR 0 4
55543: PUSH
55544: DOUBLE
55545: LD_INT 1
55547: DEC
55548: ST_TO_ADDR
55549: LD_EXP 46
55553: PUSH
55554: LD_VAR 0 5
55558: ARRAY
55559: PUSH
55560: FOR_TO
55561: IFFALSE 55602
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55563: LD_EXP 46
55567: PUSH
55568: LD_VAR 0 5
55572: ARRAY
55573: PUSH
55574: LD_VAR 0 4
55578: ARRAY
55579: PUSH
55580: LD_INT 1
55582: ARRAY
55583: PUSH
55584: LD_VAR 0 2
55588: EQUAL
55589: IFFALSE 55600
// KillUnit ( vehicle ) ;
55591: LD_VAR 0 2
55595: PPUSH
55596: CALL_OW 66
55600: GO 55560
55602: POP
55603: POP
// end ;
55604: LD_VAR 0 3
55608: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55609: LD_EXP 50
55613: NOT
55614: IFFALSE 55649
55616: GO 55618
55618: DISABLE
// begin initMiner := true ;
55619: LD_ADDR_EXP 50
55623: PUSH
55624: LD_INT 1
55626: ST_TO_ADDR
// minersList := [ ] ;
55627: LD_ADDR_EXP 51
55631: PUSH
55632: EMPTY
55633: ST_TO_ADDR
// minerMinesList := [ ] ;
55634: LD_ADDR_EXP 52
55638: PUSH
55639: EMPTY
55640: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55641: LD_ADDR_EXP 53
55645: PUSH
55646: LD_INT 5
55648: ST_TO_ADDR
// end ;
55649: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55650: LD_EXP 50
55654: PUSH
55655: LD_INT 34
55657: PUSH
55658: LD_INT 81
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PPUSH
55665: CALL_OW 69
55669: AND
55670: IFFALSE 56131
55672: GO 55674
55674: DISABLE
55675: LD_INT 0
55677: PPUSH
55678: PPUSH
55679: PPUSH
55680: PPUSH
// begin enable ;
55681: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55682: LD_ADDR_VAR 0 1
55686: PUSH
55687: LD_INT 34
55689: PUSH
55690: LD_INT 81
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PPUSH
55697: CALL_OW 69
55701: PUSH
55702: FOR_IN
55703: IFFALSE 55775
// begin if not i in minersList then
55705: LD_VAR 0 1
55709: PUSH
55710: LD_EXP 51
55714: IN
55715: NOT
55716: IFFALSE 55773
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55718: LD_ADDR_EXP 51
55722: PUSH
55723: LD_EXP 51
55727: PPUSH
55728: LD_EXP 51
55732: PUSH
55733: LD_INT 1
55735: PLUS
55736: PPUSH
55737: LD_VAR 0 1
55741: PPUSH
55742: CALL_OW 1
55746: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55747: LD_ADDR_EXP 52
55751: PUSH
55752: LD_EXP 52
55756: PPUSH
55757: LD_EXP 52
55761: PUSH
55762: LD_INT 1
55764: PLUS
55765: PPUSH
55766: EMPTY
55767: PPUSH
55768: CALL_OW 1
55772: ST_TO_ADDR
// end end ;
55773: GO 55702
55775: POP
55776: POP
// for i := minerMinesList downto 1 do
55777: LD_ADDR_VAR 0 1
55781: PUSH
55782: DOUBLE
55783: LD_EXP 52
55787: INC
55788: ST_TO_ADDR
55789: LD_INT 1
55791: PUSH
55792: FOR_DOWNTO
55793: IFFALSE 56129
// begin if IsLive ( minersList [ i ] ) then
55795: LD_EXP 51
55799: PUSH
55800: LD_VAR 0 1
55804: ARRAY
55805: PPUSH
55806: CALL_OW 300
55810: IFFALSE 55838
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55812: LD_EXP 51
55816: PUSH
55817: LD_VAR 0 1
55821: ARRAY
55822: PPUSH
55823: LD_EXP 52
55827: PUSH
55828: LD_VAR 0 1
55832: ARRAY
55833: PPUSH
55834: CALL_OW 505
// if not minerMinesList [ i ] then
55838: LD_EXP 52
55842: PUSH
55843: LD_VAR 0 1
55847: ARRAY
55848: NOT
55849: IFFALSE 55853
// continue ;
55851: GO 55792
// for j := minerMinesList [ i ] downto 1 do
55853: LD_ADDR_VAR 0 2
55857: PUSH
55858: DOUBLE
55859: LD_EXP 52
55863: PUSH
55864: LD_VAR 0 1
55868: ARRAY
55869: INC
55870: ST_TO_ADDR
55871: LD_INT 1
55873: PUSH
55874: FOR_DOWNTO
55875: IFFALSE 56125
// begin side := GetSide ( minersList [ i ] ) ;
55877: LD_ADDR_VAR 0 3
55881: PUSH
55882: LD_EXP 51
55886: PUSH
55887: LD_VAR 0 1
55891: ARRAY
55892: PPUSH
55893: CALL_OW 255
55897: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55898: LD_ADDR_VAR 0 4
55902: PUSH
55903: LD_EXP 52
55907: PUSH
55908: LD_VAR 0 1
55912: ARRAY
55913: PUSH
55914: LD_VAR 0 2
55918: ARRAY
55919: PUSH
55920: LD_INT 1
55922: ARRAY
55923: PPUSH
55924: LD_EXP 52
55928: PUSH
55929: LD_VAR 0 1
55933: ARRAY
55934: PUSH
55935: LD_VAR 0 2
55939: ARRAY
55940: PUSH
55941: LD_INT 2
55943: ARRAY
55944: PPUSH
55945: CALL_OW 428
55949: ST_TO_ADDR
// if not tmp then
55950: LD_VAR 0 4
55954: NOT
55955: IFFALSE 55959
// continue ;
55957: GO 55874
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55959: LD_VAR 0 4
55963: PUSH
55964: LD_INT 81
55966: PUSH
55967: LD_VAR 0 3
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PPUSH
55976: CALL_OW 69
55980: IN
55981: PUSH
55982: LD_EXP 52
55986: PUSH
55987: LD_VAR 0 1
55991: ARRAY
55992: PUSH
55993: LD_VAR 0 2
55997: ARRAY
55998: PUSH
55999: LD_INT 1
56001: ARRAY
56002: PPUSH
56003: LD_EXP 52
56007: PUSH
56008: LD_VAR 0 1
56012: ARRAY
56013: PUSH
56014: LD_VAR 0 2
56018: ARRAY
56019: PUSH
56020: LD_INT 2
56022: ARRAY
56023: PPUSH
56024: CALL_OW 458
56028: AND
56029: IFFALSE 56123
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
56031: LD_EXP 52
56035: PUSH
56036: LD_VAR 0 1
56040: ARRAY
56041: PUSH
56042: LD_VAR 0 2
56046: ARRAY
56047: PUSH
56048: LD_INT 1
56050: ARRAY
56051: PPUSH
56052: LD_EXP 52
56056: PUSH
56057: LD_VAR 0 1
56061: ARRAY
56062: PUSH
56063: LD_VAR 0 2
56067: ARRAY
56068: PUSH
56069: LD_INT 2
56071: ARRAY
56072: PPUSH
56073: LD_VAR 0 3
56077: PPUSH
56078: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56082: LD_ADDR_EXP 52
56086: PUSH
56087: LD_EXP 52
56091: PPUSH
56092: LD_VAR 0 1
56096: PPUSH
56097: LD_EXP 52
56101: PUSH
56102: LD_VAR 0 1
56106: ARRAY
56107: PPUSH
56108: LD_VAR 0 2
56112: PPUSH
56113: CALL_OW 3
56117: PPUSH
56118: CALL_OW 1
56122: ST_TO_ADDR
// end ; end ;
56123: GO 55874
56125: POP
56126: POP
// end ;
56127: GO 55792
56129: POP
56130: POP
// end ;
56131: PPOPN 4
56133: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56134: LD_INT 0
56136: PPUSH
56137: PPUSH
// result := false ;
56138: LD_ADDR_VAR 0 4
56142: PUSH
56143: LD_INT 0
56145: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56146: LD_VAR 0 1
56150: PPUSH
56151: CALL_OW 264
56155: PUSH
56156: LD_INT 81
56158: EQUAL
56159: NOT
56160: IFFALSE 56164
// exit ;
56162: GO 56404
// index := GetElementIndex ( minersList , unit ) ;
56164: LD_ADDR_VAR 0 5
56168: PUSH
56169: LD_EXP 51
56173: PPUSH
56174: LD_VAR 0 1
56178: PPUSH
56179: CALL 14113 0 2
56183: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56184: LD_EXP 52
56188: PUSH
56189: LD_VAR 0 5
56193: ARRAY
56194: PUSH
56195: LD_EXP 53
56199: GREATEREQUAL
56200: IFFALSE 56204
// exit ;
56202: GO 56404
// ComMoveXY ( unit , x , y ) ;
56204: LD_VAR 0 1
56208: PPUSH
56209: LD_VAR 0 2
56213: PPUSH
56214: LD_VAR 0 3
56218: PPUSH
56219: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56223: LD_INT 35
56225: PPUSH
56226: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56230: LD_VAR 0 1
56234: PPUSH
56235: LD_VAR 0 2
56239: PPUSH
56240: LD_VAR 0 3
56244: PPUSH
56245: CALL 45874 0 3
56249: NOT
56250: PUSH
56251: LD_VAR 0 1
56255: PPUSH
56256: CALL_OW 314
56260: AND
56261: IFFALSE 56265
// exit ;
56263: GO 56404
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56265: LD_VAR 0 2
56269: PPUSH
56270: LD_VAR 0 3
56274: PPUSH
56275: CALL_OW 428
56279: PUSH
56280: LD_VAR 0 1
56284: EQUAL
56285: PUSH
56286: LD_VAR 0 1
56290: PPUSH
56291: CALL_OW 314
56295: NOT
56296: AND
56297: IFFALSE 56223
// PlaySoundXY ( x , y , PlantMine ) ;
56299: LD_VAR 0 2
56303: PPUSH
56304: LD_VAR 0 3
56308: PPUSH
56309: LD_STRING PlantMine
56311: PPUSH
56312: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56316: LD_VAR 0 2
56320: PPUSH
56321: LD_VAR 0 3
56325: PPUSH
56326: LD_VAR 0 1
56330: PPUSH
56331: CALL_OW 255
56335: PPUSH
56336: LD_INT 0
56338: PPUSH
56339: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56343: LD_ADDR_EXP 52
56347: PUSH
56348: LD_EXP 52
56352: PPUSH
56353: LD_VAR 0 5
56357: PUSH
56358: LD_EXP 52
56362: PUSH
56363: LD_VAR 0 5
56367: ARRAY
56368: PUSH
56369: LD_INT 1
56371: PLUS
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PPUSH
56377: LD_VAR 0 2
56381: PUSH
56382: LD_VAR 0 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PPUSH
56391: CALL 14328 0 3
56395: ST_TO_ADDR
// result := true ;
56396: LD_ADDR_VAR 0 4
56400: PUSH
56401: LD_INT 1
56403: ST_TO_ADDR
// end ;
56404: LD_VAR 0 4
56408: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56409: LD_INT 0
56411: PPUSH
56412: PPUSH
56413: PPUSH
// if not unit in minersList then
56414: LD_VAR 0 1
56418: PUSH
56419: LD_EXP 51
56423: IN
56424: NOT
56425: IFFALSE 56429
// exit ;
56427: GO 56821
// index := GetElementIndex ( minersList , unit ) ;
56429: LD_ADDR_VAR 0 6
56433: PUSH
56434: LD_EXP 51
56438: PPUSH
56439: LD_VAR 0 1
56443: PPUSH
56444: CALL 14113 0 2
56448: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56449: LD_ADDR_VAR 0 5
56453: PUSH
56454: DOUBLE
56455: LD_EXP 52
56459: PUSH
56460: LD_VAR 0 6
56464: ARRAY
56465: INC
56466: ST_TO_ADDR
56467: LD_INT 1
56469: PUSH
56470: FOR_DOWNTO
56471: IFFALSE 56632
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56473: LD_EXP 52
56477: PUSH
56478: LD_VAR 0 6
56482: ARRAY
56483: PUSH
56484: LD_VAR 0 5
56488: ARRAY
56489: PUSH
56490: LD_INT 1
56492: ARRAY
56493: PUSH
56494: LD_VAR 0 2
56498: EQUAL
56499: PUSH
56500: LD_EXP 52
56504: PUSH
56505: LD_VAR 0 6
56509: ARRAY
56510: PUSH
56511: LD_VAR 0 5
56515: ARRAY
56516: PUSH
56517: LD_INT 2
56519: ARRAY
56520: PUSH
56521: LD_VAR 0 3
56525: EQUAL
56526: AND
56527: IFFALSE 56630
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56529: LD_EXP 52
56533: PUSH
56534: LD_VAR 0 6
56538: ARRAY
56539: PUSH
56540: LD_VAR 0 5
56544: ARRAY
56545: PUSH
56546: LD_INT 1
56548: ARRAY
56549: PPUSH
56550: LD_EXP 52
56554: PUSH
56555: LD_VAR 0 6
56559: ARRAY
56560: PUSH
56561: LD_VAR 0 5
56565: ARRAY
56566: PUSH
56567: LD_INT 2
56569: ARRAY
56570: PPUSH
56571: LD_VAR 0 1
56575: PPUSH
56576: CALL_OW 255
56580: PPUSH
56581: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56585: LD_ADDR_EXP 52
56589: PUSH
56590: LD_EXP 52
56594: PPUSH
56595: LD_VAR 0 6
56599: PPUSH
56600: LD_EXP 52
56604: PUSH
56605: LD_VAR 0 6
56609: ARRAY
56610: PPUSH
56611: LD_VAR 0 5
56615: PPUSH
56616: CALL_OW 3
56620: PPUSH
56621: CALL_OW 1
56625: ST_TO_ADDR
// exit ;
56626: POP
56627: POP
56628: GO 56821
// end ; end ;
56630: GO 56470
56632: POP
56633: POP
// for i := minerMinesList [ index ] downto 1 do
56634: LD_ADDR_VAR 0 5
56638: PUSH
56639: DOUBLE
56640: LD_EXP 52
56644: PUSH
56645: LD_VAR 0 6
56649: ARRAY
56650: INC
56651: ST_TO_ADDR
56652: LD_INT 1
56654: PUSH
56655: FOR_DOWNTO
56656: IFFALSE 56819
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56658: LD_EXP 52
56662: PUSH
56663: LD_VAR 0 6
56667: ARRAY
56668: PUSH
56669: LD_VAR 0 5
56673: ARRAY
56674: PUSH
56675: LD_INT 1
56677: ARRAY
56678: PPUSH
56679: LD_EXP 52
56683: PUSH
56684: LD_VAR 0 6
56688: ARRAY
56689: PUSH
56690: LD_VAR 0 5
56694: ARRAY
56695: PUSH
56696: LD_INT 2
56698: ARRAY
56699: PPUSH
56700: LD_VAR 0 2
56704: PPUSH
56705: LD_VAR 0 3
56709: PPUSH
56710: CALL_OW 298
56714: PUSH
56715: LD_INT 6
56717: LESS
56718: IFFALSE 56817
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56720: LD_EXP 52
56724: PUSH
56725: LD_VAR 0 6
56729: ARRAY
56730: PUSH
56731: LD_VAR 0 5
56735: ARRAY
56736: PUSH
56737: LD_INT 1
56739: ARRAY
56740: PPUSH
56741: LD_EXP 52
56745: PUSH
56746: LD_VAR 0 6
56750: ARRAY
56751: PUSH
56752: LD_VAR 0 5
56756: ARRAY
56757: PUSH
56758: LD_INT 2
56760: ARRAY
56761: PPUSH
56762: LD_VAR 0 1
56766: PPUSH
56767: CALL_OW 255
56771: PPUSH
56772: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56776: LD_ADDR_EXP 52
56780: PUSH
56781: LD_EXP 52
56785: PPUSH
56786: LD_VAR 0 6
56790: PPUSH
56791: LD_EXP 52
56795: PUSH
56796: LD_VAR 0 6
56800: ARRAY
56801: PPUSH
56802: LD_VAR 0 5
56806: PPUSH
56807: CALL_OW 3
56811: PPUSH
56812: CALL_OW 1
56816: ST_TO_ADDR
// end ; end ;
56817: GO 56655
56819: POP
56820: POP
// end ;
56821: LD_VAR 0 4
56825: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56826: LD_INT 0
56828: PPUSH
56829: PPUSH
56830: PPUSH
56831: PPUSH
56832: PPUSH
56833: PPUSH
56834: PPUSH
56835: PPUSH
56836: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56837: LD_VAR 0 1
56841: PPUSH
56842: CALL_OW 264
56846: PUSH
56847: LD_INT 81
56849: EQUAL
56850: NOT
56851: PUSH
56852: LD_VAR 0 1
56856: PUSH
56857: LD_EXP 51
56861: IN
56862: NOT
56863: OR
56864: IFFALSE 56868
// exit ;
56866: GO 57190
// index := GetElementIndex ( minersList , unit ) ;
56868: LD_ADDR_VAR 0 6
56872: PUSH
56873: LD_EXP 51
56877: PPUSH
56878: LD_VAR 0 1
56882: PPUSH
56883: CALL 14113 0 2
56887: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56888: LD_ADDR_VAR 0 8
56892: PUSH
56893: LD_EXP 53
56897: PUSH
56898: LD_EXP 52
56902: PUSH
56903: LD_VAR 0 6
56907: ARRAY
56908: MINUS
56909: ST_TO_ADDR
// if not minesFreeAmount then
56910: LD_VAR 0 8
56914: NOT
56915: IFFALSE 56919
// exit ;
56917: GO 57190
// tmp := [ ] ;
56919: LD_ADDR_VAR 0 7
56923: PUSH
56924: EMPTY
56925: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56926: LD_ADDR_VAR 0 5
56930: PUSH
56931: DOUBLE
56932: LD_INT 1
56934: DEC
56935: ST_TO_ADDR
56936: LD_VAR 0 8
56940: PUSH
56941: FOR_TO
56942: IFFALSE 57137
// begin _d := rand ( 0 , 5 ) ;
56944: LD_ADDR_VAR 0 11
56948: PUSH
56949: LD_INT 0
56951: PPUSH
56952: LD_INT 5
56954: PPUSH
56955: CALL_OW 12
56959: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56960: LD_ADDR_VAR 0 12
56964: PUSH
56965: LD_INT 2
56967: PPUSH
56968: LD_INT 6
56970: PPUSH
56971: CALL_OW 12
56975: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56976: LD_ADDR_VAR 0 9
56980: PUSH
56981: LD_VAR 0 2
56985: PPUSH
56986: LD_VAR 0 11
56990: PPUSH
56991: LD_VAR 0 12
56995: PPUSH
56996: CALL_OW 272
57000: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
57001: LD_ADDR_VAR 0 10
57005: PUSH
57006: LD_VAR 0 3
57010: PPUSH
57011: LD_VAR 0 11
57015: PPUSH
57016: LD_VAR 0 12
57020: PPUSH
57021: CALL_OW 273
57025: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
57026: LD_VAR 0 9
57030: PPUSH
57031: LD_VAR 0 10
57035: PPUSH
57036: CALL_OW 488
57040: PUSH
57041: LD_VAR 0 9
57045: PUSH
57046: LD_VAR 0 10
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_VAR 0 7
57059: IN
57060: NOT
57061: AND
57062: PUSH
57063: LD_VAR 0 9
57067: PPUSH
57068: LD_VAR 0 10
57072: PPUSH
57073: CALL_OW 458
57077: NOT
57078: AND
57079: IFFALSE 57121
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57081: LD_ADDR_VAR 0 7
57085: PUSH
57086: LD_VAR 0 7
57090: PPUSH
57091: LD_VAR 0 7
57095: PUSH
57096: LD_INT 1
57098: PLUS
57099: PPUSH
57100: LD_VAR 0 9
57104: PUSH
57105: LD_VAR 0 10
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PPUSH
57114: CALL_OW 1
57118: ST_TO_ADDR
57119: GO 57135
// i := i - 1 ;
57121: LD_ADDR_VAR 0 5
57125: PUSH
57126: LD_VAR 0 5
57130: PUSH
57131: LD_INT 1
57133: MINUS
57134: ST_TO_ADDR
// end ;
57135: GO 56941
57137: POP
57138: POP
// for i in tmp do
57139: LD_ADDR_VAR 0 5
57143: PUSH
57144: LD_VAR 0 7
57148: PUSH
57149: FOR_IN
57150: IFFALSE 57188
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57152: LD_VAR 0 1
57156: PPUSH
57157: LD_VAR 0 5
57161: PUSH
57162: LD_INT 1
57164: ARRAY
57165: PPUSH
57166: LD_VAR 0 5
57170: PUSH
57171: LD_INT 2
57173: ARRAY
57174: PPUSH
57175: CALL 56134 0 3
57179: NOT
57180: IFFALSE 57186
// exit ;
57182: POP
57183: POP
57184: GO 57190
57186: GO 57149
57188: POP
57189: POP
// end ;
57190: LD_VAR 0 4
57194: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
57195: LD_INT 0
57197: PPUSH
57198: PPUSH
57199: PPUSH
57200: PPUSH
57201: PPUSH
57202: PPUSH
57203: PPUSH
57204: PPUSH
57205: PPUSH
// if GetClass ( unit ) <> class_sniper then
57206: LD_VAR 0 1
57210: PPUSH
57211: CALL_OW 257
57215: PUSH
57216: LD_INT 5
57218: NONEQUAL
57219: IFFALSE 57223
// exit ;
57221: GO 57689
// dist := 8 ;
57223: LD_ADDR_VAR 0 5
57227: PUSH
57228: LD_INT 8
57230: ST_TO_ADDR
// viewRange := 12 ;
57231: LD_ADDR_VAR 0 8
57235: PUSH
57236: LD_INT 12
57238: ST_TO_ADDR
// side := GetSide ( unit ) ;
57239: LD_ADDR_VAR 0 6
57243: PUSH
57244: LD_VAR 0 1
57248: PPUSH
57249: CALL_OW 255
57253: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57254: LD_INT 61
57256: PPUSH
57257: LD_VAR 0 6
57261: PPUSH
57262: CALL_OW 321
57266: PUSH
57267: LD_INT 2
57269: EQUAL
57270: IFFALSE 57280
// viewRange := 16 ;
57272: LD_ADDR_VAR 0 8
57276: PUSH
57277: LD_INT 16
57279: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57280: LD_VAR 0 1
57284: PPUSH
57285: LD_VAR 0 2
57289: PPUSH
57290: LD_VAR 0 3
57294: PPUSH
57295: CALL_OW 297
57299: PUSH
57300: LD_VAR 0 5
57304: GREATER
57305: IFFALSE 57384
// begin ComMoveXY ( unit , x , y ) ;
57307: LD_VAR 0 1
57311: PPUSH
57312: LD_VAR 0 2
57316: PPUSH
57317: LD_VAR 0 3
57321: PPUSH
57322: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57326: LD_INT 35
57328: PPUSH
57329: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57333: LD_VAR 0 1
57337: PPUSH
57338: LD_VAR 0 2
57342: PPUSH
57343: LD_VAR 0 3
57347: PPUSH
57348: CALL 45874 0 3
57352: NOT
57353: IFFALSE 57357
// exit ;
57355: GO 57689
// until GetDistUnitXY ( unit , x , y ) < dist ;
57357: LD_VAR 0 1
57361: PPUSH
57362: LD_VAR 0 2
57366: PPUSH
57367: LD_VAR 0 3
57371: PPUSH
57372: CALL_OW 297
57376: PUSH
57377: LD_VAR 0 5
57381: LESS
57382: IFFALSE 57326
// end ; ComTurnXY ( unit , x , y ) ;
57384: LD_VAR 0 1
57388: PPUSH
57389: LD_VAR 0 2
57393: PPUSH
57394: LD_VAR 0 3
57398: PPUSH
57399: CALL_OW 118
// repeat if Multiplayer then
57403: LD_OWVAR 4
57407: IFFALSE 57418
// wait ( 35 ) else
57409: LD_INT 35
57411: PPUSH
57412: CALL_OW 67
57416: GO 57425
// wait ( 5 ) ;
57418: LD_INT 5
57420: PPUSH
57421: CALL_OW 67
// _d := GetDir ( unit ) ;
57425: LD_ADDR_VAR 0 11
57429: PUSH
57430: LD_VAR 0 1
57434: PPUSH
57435: CALL_OW 254
57439: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57440: LD_ADDR_VAR 0 7
57444: PUSH
57445: LD_VAR 0 1
57449: PPUSH
57450: CALL_OW 250
57454: PPUSH
57455: LD_VAR 0 1
57459: PPUSH
57460: CALL_OW 251
57464: PPUSH
57465: LD_VAR 0 2
57469: PPUSH
57470: LD_VAR 0 3
57474: PPUSH
57475: CALL 48482 0 4
57479: ST_TO_ADDR
// until dir = _d ;
57480: LD_VAR 0 7
57484: PUSH
57485: LD_VAR 0 11
57489: EQUAL
57490: IFFALSE 57403
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57492: LD_ADDR_VAR 0 9
57496: PUSH
57497: LD_VAR 0 1
57501: PPUSH
57502: CALL_OW 250
57506: PPUSH
57507: LD_VAR 0 7
57511: PPUSH
57512: LD_VAR 0 5
57516: PPUSH
57517: CALL_OW 272
57521: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57522: LD_ADDR_VAR 0 10
57526: PUSH
57527: LD_VAR 0 1
57531: PPUSH
57532: CALL_OW 251
57536: PPUSH
57537: LD_VAR 0 7
57541: PPUSH
57542: LD_VAR 0 5
57546: PPUSH
57547: CALL_OW 273
57551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57552: LD_VAR 0 9
57556: PPUSH
57557: LD_VAR 0 10
57561: PPUSH
57562: CALL_OW 488
57566: NOT
57567: IFFALSE 57571
// exit ;
57569: GO 57689
// ComAnimCustom ( unit , 1 ) ;
57571: LD_VAR 0 1
57575: PPUSH
57576: LD_INT 1
57578: PPUSH
57579: CALL_OW 592
// p := 0 ;
57583: LD_ADDR_VAR 0 12
57587: PUSH
57588: LD_INT 0
57590: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57591: LD_VAR 0 9
57595: PPUSH
57596: LD_VAR 0 10
57600: PPUSH
57601: LD_VAR 0 6
57605: PPUSH
57606: LD_VAR 0 8
57610: PPUSH
57611: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57615: LD_INT 35
57617: PPUSH
57618: CALL_OW 67
// p := Inc ( p ) ;
57622: LD_ADDR_VAR 0 12
57626: PUSH
57627: LD_VAR 0 12
57631: PPUSH
57632: CALL 48438 0 1
57636: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57637: LD_VAR 0 12
57641: PUSH
57642: LD_INT 3
57644: EQUAL
57645: PUSH
57646: LD_VAR 0 1
57650: PPUSH
57651: CALL_OW 302
57655: NOT
57656: OR
57657: PUSH
57658: LD_VAR 0 1
57662: PPUSH
57663: CALL_OW 301
57667: OR
57668: IFFALSE 57615
// RemoveSeeing ( _x , _y , side ) ;
57670: LD_VAR 0 9
57674: PPUSH
57675: LD_VAR 0 10
57679: PPUSH
57680: LD_VAR 0 6
57684: PPUSH
57685: CALL_OW 331
// end ; end_of_file
57689: LD_VAR 0 4
57693: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57694: LD_EXP 39
57698: IFFALSE 58039
57700: GO 57702
57702: DISABLE
57703: LD_INT 0
57705: PPUSH
57706: PPUSH
57707: PPUSH
// begin mpKingPoints := [ ] ;
57708: LD_ADDR_EXP 54
57712: PUSH
57713: EMPTY
57714: ST_TO_ADDR
// if mpTeamGame then
57715: LD_EXP 11
57719: IFFALSE 57773
// begin for i := 1 to Count ( mpTeams ) do
57721: LD_ADDR_VAR 0 1
57725: PUSH
57726: DOUBLE
57727: LD_INT 1
57729: DEC
57730: ST_TO_ADDR
57731: LD_EXP 10
57735: PPUSH
57736: CALL 11468 0 1
57740: PUSH
57741: FOR_TO
57742: IFFALSE 57769
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57744: LD_ADDR_EXP 54
57748: PUSH
57749: LD_EXP 54
57753: PPUSH
57754: LD_VAR 0 1
57758: PPUSH
57759: LD_INT 0
57761: PPUSH
57762: CALL_OW 1
57766: ST_TO_ADDR
57767: GO 57741
57769: POP
57770: POP
// end else
57771: GO 57816
// begin for i := 1 to 8 do
57773: LD_ADDR_VAR 0 1
57777: PUSH
57778: DOUBLE
57779: LD_INT 1
57781: DEC
57782: ST_TO_ADDR
57783: LD_INT 8
57785: PUSH
57786: FOR_TO
57787: IFFALSE 57814
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57789: LD_ADDR_EXP 54
57793: PUSH
57794: LD_EXP 54
57798: PPUSH
57799: LD_VAR 0 1
57803: PPUSH
57804: LD_INT 0
57806: PPUSH
57807: CALL_OW 1
57811: ST_TO_ADDR
57812: GO 57786
57814: POP
57815: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57816: LD_ADDR_VAR 0 3
57820: PUSH
57821: LD_EXP 2
57825: PPUSH
57826: LD_INT 0
57828: PPUSH
57829: CALL_OW 517
57833: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57834: LD_ADDR_VAR 0 1
57838: PUSH
57839: DOUBLE
57840: LD_INT 1
57842: DEC
57843: ST_TO_ADDR
57844: LD_VAR 0 3
57848: PUSH
57849: LD_INT 1
57851: ARRAY
57852: PUSH
57853: FOR_TO
57854: IFFALSE 57921
// for j := 1 to 8 do
57856: LD_ADDR_VAR 0 2
57860: PUSH
57861: DOUBLE
57862: LD_INT 1
57864: DEC
57865: ST_TO_ADDR
57866: LD_INT 8
57868: PUSH
57869: FOR_TO
57870: IFFALSE 57917
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57872: LD_VAR 0 3
57876: PUSH
57877: LD_INT 1
57879: ARRAY
57880: PUSH
57881: LD_VAR 0 1
57885: ARRAY
57886: PPUSH
57887: LD_VAR 0 3
57891: PUSH
57892: LD_INT 2
57894: ARRAY
57895: PUSH
57896: LD_VAR 0 1
57900: ARRAY
57901: PPUSH
57902: LD_VAR 0 2
57906: PPUSH
57907: LD_INT 12
57909: NEG
57910: PPUSH
57911: CALL_OW 330
57915: GO 57869
57917: POP
57918: POP
57919: GO 57853
57921: POP
57922: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57923: LD_EXP 34
57927: PPUSH
57928: LD_INT 1
57930: PPUSH
57931: CALL_OW 424
// UpdateCounter ;
57935: CALL 58543 0 0
// repeat wait ( 0 0$1 ) ;
57939: LD_INT 35
57941: PPUSH
57942: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57946: LD_ADDR_VAR 0 3
57950: PUSH
57951: LD_EXP 34
57955: PPUSH
57956: LD_INT 3
57958: PUSH
57959: LD_INT 57
57961: PUSH
57962: EMPTY
57963: LIST
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 50
57971: PUSH
57972: EMPTY
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: LD_INT 30
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 30
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: LIST
58007: PPUSH
58008: CALL_OW 70
58012: ST_TO_ADDR
// if not tmp then
58013: LD_VAR 0 3
58017: NOT
58018: IFFALSE 58022
// continue ;
58020: GO 57939
// AddPoints ( tmp ) ;
58022: LD_VAR 0 3
58026: PPUSH
58027: CALL 58221 0 1
// UpdateCounter ;
58031: CALL 58543 0 0
// until false ;
58035: LD_INT 0
58037: IFFALSE 57939
// end ;
58039: PPOPN 3
58041: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
58042: LD_EXP 39
58046: PUSH
58047: LD_EXP 37
58051: AND
58052: IFFALSE 58218
58054: GO 58056
58056: DISABLE
58057: LD_INT 0
58059: PPUSH
58060: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
58061: LD_ADDR_VAR 0 2
58065: PUSH
58066: LD_EXP 2
58070: PPUSH
58071: LD_INT 0
58073: PPUSH
58074: CALL_OW 517
58078: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58079: LD_ADDR_VAR 0 1
58083: PUSH
58084: DOUBLE
58085: LD_INT 1
58087: DEC
58088: ST_TO_ADDR
58089: LD_VAR 0 2
58093: PUSH
58094: LD_INT 1
58096: ARRAY
58097: PUSH
58098: FOR_TO
58099: IFFALSE 58140
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
58101: LD_VAR 0 2
58105: PUSH
58106: LD_INT 1
58108: ARRAY
58109: PUSH
58110: LD_VAR 0 1
58114: ARRAY
58115: PPUSH
58116: LD_VAR 0 2
58120: PUSH
58121: LD_INT 2
58123: ARRAY
58124: PUSH
58125: LD_VAR 0 1
58129: ARRAY
58130: PPUSH
58131: LD_INT 125
58133: PPUSH
58134: CALL_OW 495
58138: GO 58098
58140: POP
58141: POP
// repeat wait ( mpEmissions ) ;
58142: LD_EXP 37
58146: PPUSH
58147: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
58151: LD_ADDR_VAR 0 1
58155: PUSH
58156: DOUBLE
58157: LD_INT 1
58159: DEC
58160: ST_TO_ADDR
58161: LD_VAR 0 2
58165: PUSH
58166: LD_INT 1
58168: ARRAY
58169: PUSH
58170: FOR_TO
58171: IFFALSE 58212
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
58173: LD_VAR 0 2
58177: PUSH
58178: LD_INT 1
58180: ARRAY
58181: PUSH
58182: LD_VAR 0 1
58186: ARRAY
58187: PPUSH
58188: LD_VAR 0 2
58192: PUSH
58193: LD_INT 2
58195: ARRAY
58196: PUSH
58197: LD_VAR 0 1
58201: ARRAY
58202: PPUSH
58203: LD_INT 15
58205: PPUSH
58206: CALL_OW 495
58210: GO 58170
58212: POP
58213: POP
// until false ;
58214: LD_INT 0
58216: IFFALSE 58142
// end ;
58218: PPOPN 2
58220: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
58221: LD_INT 0
58223: PPUSH
58224: PPUSH
58225: PPUSH
58226: PPUSH
58227: PPUSH
// if mpTeamGame then
58228: LD_EXP 11
58232: IFFALSE 58429
// begin first := depots [ 1 ] ;
58234: LD_ADDR_VAR 0 4
58238: PUSH
58239: LD_VAR 0 1
58243: PUSH
58244: LD_INT 1
58246: ARRAY
58247: ST_TO_ADDR
// side := GetSide ( first ) ;
58248: LD_ADDR_VAR 0 6
58252: PUSH
58253: LD_VAR 0 4
58257: PPUSH
58258: CALL_OW 255
58262: ST_TO_ADDR
// for i := 1 to mpTeams do
58263: LD_ADDR_VAR 0 3
58267: PUSH
58268: DOUBLE
58269: LD_INT 1
58271: DEC
58272: ST_TO_ADDR
58273: LD_EXP 10
58277: PUSH
58278: FOR_TO
58279: IFFALSE 58313
// if side in mpTeams [ i ] then
58281: LD_VAR 0 6
58285: PUSH
58286: LD_EXP 10
58290: PUSH
58291: LD_VAR 0 3
58295: ARRAY
58296: IN
58297: IFFALSE 58311
// begin team := i ;
58299: LD_ADDR_VAR 0 5
58303: PUSH
58304: LD_VAR 0 3
58308: ST_TO_ADDR
// break ;
58309: GO 58313
// end ;
58311: GO 58278
58313: POP
58314: POP
// if not team then
58315: LD_VAR 0 5
58319: NOT
58320: IFFALSE 58324
// exit ;
58322: GO 58538
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58324: LD_EXP 34
58328: PPUSH
58329: LD_INT 81
58331: PUSH
58332: LD_VAR 0 6
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PPUSH
58341: CALL_OW 70
58345: IFFALSE 58349
// exit ;
58347: GO 58538
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58349: LD_ADDR_EXP 54
58353: PUSH
58354: LD_EXP 54
58358: PPUSH
58359: LD_VAR 0 5
58363: PPUSH
58364: LD_EXP 54
58368: PUSH
58369: LD_VAR 0 5
58373: ARRAY
58374: PUSH
58375: LD_INT 1
58377: PLUS
58378: PPUSH
58379: CALL_OW 1
58383: ST_TO_ADDR
// for i in mpTeams [ team ] do
58384: LD_ADDR_VAR 0 3
58388: PUSH
58389: LD_EXP 10
58393: PUSH
58394: LD_VAR 0 5
58398: ARRAY
58399: PUSH
58400: FOR_IN
58401: IFFALSE 58425
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58403: LD_VAR 0 3
58407: PPUSH
58408: LD_EXP 54
58412: PUSH
58413: LD_VAR 0 5
58417: ARRAY
58418: PPUSH
58419: CALL_OW 506
58423: GO 58400
58425: POP
58426: POP
// end else
58427: GO 58538
// begin first := depots [ 1 ] ;
58429: LD_ADDR_VAR 0 4
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: LD_INT 1
58441: ARRAY
58442: ST_TO_ADDR
// side := GetSide ( first ) ;
58443: LD_ADDR_VAR 0 6
58447: PUSH
58448: LD_VAR 0 4
58452: PPUSH
58453: CALL_OW 255
58457: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58458: LD_EXP 34
58462: PPUSH
58463: LD_INT 81
58465: PUSH
58466: LD_VAR 0 6
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PPUSH
58475: CALL_OW 70
58479: IFFALSE 58483
// exit ;
58481: GO 58538
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58483: LD_ADDR_EXP 54
58487: PUSH
58488: LD_EXP 54
58492: PPUSH
58493: LD_VAR 0 6
58497: PPUSH
58498: LD_EXP 54
58502: PUSH
58503: LD_VAR 0 6
58507: ARRAY
58508: PUSH
58509: LD_INT 1
58511: PLUS
58512: PPUSH
58513: CALL_OW 1
58517: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58518: LD_VAR 0 6
58522: PPUSH
58523: LD_EXP 54
58527: PUSH
58528: LD_VAR 0 6
58532: ARRAY
58533: PPUSH
58534: CALL_OW 506
// end ; end ;
58538: LD_VAR 0 2
58542: RET
// function UpdateCounter ; var i ; begin
58543: LD_INT 0
58545: PPUSH
58546: PPUSH
// result := [ ] ;
58547: LD_ADDR_VAR 0 1
58551: PUSH
58552: EMPTY
58553: ST_TO_ADDR
// if mpTeamGame then
58554: LD_EXP 11
58558: IFFALSE 58625
// begin for i := 1 to mpTeams do
58560: LD_ADDR_VAR 0 2
58564: PUSH
58565: DOUBLE
58566: LD_INT 1
58568: DEC
58569: ST_TO_ADDR
58570: LD_EXP 10
58574: PUSH
58575: FOR_TO
58576: IFFALSE 58621
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58578: LD_ADDR_VAR 0 1
58582: PUSH
58583: LD_VAR 0 1
58587: PUSH
58588: LD_STRING #KingoftheHill-Team
58590: PUSH
58591: LD_VAR 0 2
58595: PUSH
58596: LD_EXP 54
58600: PUSH
58601: LD_VAR 0 2
58605: ARRAY
58606: PUSH
58607: LD_EXP 35
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: ADD
58618: ST_TO_ADDR
58619: GO 58575
58621: POP
58622: POP
// end else
58623: GO 58698
// begin for i := 1 to 8 do
58625: LD_ADDR_VAR 0 2
58629: PUSH
58630: DOUBLE
58631: LD_INT 1
58633: DEC
58634: ST_TO_ADDR
58635: LD_INT 8
58637: PUSH
58638: FOR_TO
58639: IFFALSE 58696
// if mpSidePositions [ i ] then
58641: LD_EXP 7
58645: PUSH
58646: LD_VAR 0 2
58650: ARRAY
58651: IFFALSE 58694
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58653: LD_ADDR_VAR 0 1
58657: PUSH
58658: LD_VAR 0 1
58662: PUSH
58663: LD_STRING #KingoftheHill-Player
58665: PUSH
58666: LD_VAR 0 2
58670: PUSH
58671: LD_EXP 54
58675: PUSH
58676: LD_VAR 0 2
58680: ARRAY
58681: PUSH
58682: LD_EXP 35
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: ADD
58693: ST_TO_ADDR
58694: GO 58638
58696: POP
58697: POP
// end ; mpDisplayStrings := result ;
58698: LD_ADDR_EXP 38
58702: PUSH
58703: LD_VAR 0 1
58707: ST_TO_ADDR
// end ;
58708: LD_VAR 0 1
58712: RET
// export function HowMuchPointsKing ( side ) ; begin
58713: LD_INT 0
58715: PPUSH
// result := HowMuchPoints ( side ) ;
58716: LD_ADDR_VAR 0 2
58720: PUSH
58721: LD_VAR 0 1
58725: PPUSH
58726: CALL 58736 0 1
58730: ST_TO_ADDR
// end ;
58731: LD_VAR 0 2
58735: RET
// function HowMuchPoints ( side ) ; var i ; begin
58736: LD_INT 0
58738: PPUSH
58739: PPUSH
// if mpTeamGame then
58740: LD_EXP 11
58744: IFFALSE 58813
// begin for i := 1 to Count ( mpTeams ) do
58746: LD_ADDR_VAR 0 3
58750: PUSH
58751: DOUBLE
58752: LD_INT 1
58754: DEC
58755: ST_TO_ADDR
58756: LD_EXP 10
58760: PPUSH
58761: CALL 11468 0 1
58765: PUSH
58766: FOR_TO
58767: IFFALSE 58809
// begin if side in mpTeams [ i ] then
58769: LD_VAR 0 1
58773: PUSH
58774: LD_EXP 10
58778: PUSH
58779: LD_VAR 0 3
58783: ARRAY
58784: IN
58785: IFFALSE 58807
// begin result := mpKingPoints [ i ] ;
58787: LD_ADDR_VAR 0 2
58791: PUSH
58792: LD_EXP 54
58796: PUSH
58797: LD_VAR 0 3
58801: ARRAY
58802: ST_TO_ADDR
// exit ;
58803: POP
58804: POP
58805: GO 58829
// end ; end ;
58807: GO 58766
58809: POP
58810: POP
// end else
58811: GO 58829
// result := mpKingPoints [ side ] ;
58813: LD_ADDR_VAR 0 2
58817: PUSH
58818: LD_EXP 54
58822: PUSH
58823: LD_VAR 0 1
58827: ARRAY
58828: ST_TO_ADDR
// end ;
58829: LD_VAR 0 2
58833: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58834: LD_EXP 39
58838: PUSH
58839: CALL 59161 0 0
58843: AND
58844: PUSH
58845: LD_OWVAR 4
58849: AND
58850: IFFALSE 59086
58852: GO 58854
58854: DISABLE
58855: LD_INT 0
58857: PPUSH
58858: PPUSH
// begin canWin := false ;
58859: LD_ADDR_VAR 0 2
58863: PUSH
58864: LD_INT 0
58866: ST_TO_ADDR
// if not HasPower ( your_side ) then
58867: LD_OWVAR 2
58871: PPUSH
58872: CALL 59201 0 1
58876: NOT
58877: IFFALSE 58888
// begin Multiplayer_Loose_Message ;
58879: CALL_OW 521
// enable ( mpLose ) ;
58883: LD_INT 102
58885: ENABLE_MARKED
// end else
58886: GO 59086
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58888: LD_ADDR_VAR 0 2
58892: PUSH
58893: LD_OWVAR 2
58897: PPUSH
58898: CALL 58736 0 1
58902: PUSH
58903: LD_EXP 35
58907: GREATEREQUAL
58908: PUSH
58909: LD_OWVAR 2
58913: PPUSH
58914: CALL 59201 0 1
58918: AND
58919: PUSH
58920: CALL 59089 0 0
58924: NOT
58925: OR
58926: ST_TO_ADDR
// for i := 1 to 8 do
58927: LD_ADDR_VAR 0 1
58931: PUSH
58932: DOUBLE
58933: LD_INT 1
58935: DEC
58936: ST_TO_ADDR
58937: LD_INT 8
58939: PUSH
58940: FOR_TO
58941: IFFALSE 59072
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58943: LD_EXP 7
58947: PUSH
58948: LD_VAR 0 1
58952: ARRAY
58953: PUSH
58954: LD_VAR 0 1
58958: PPUSH
58959: CALL_OW 108
58963: AND
58964: PUSH
58965: LD_VAR 0 1
58969: PUSH
58970: LD_OWVAR 2
58974: NONEQUAL
58975: AND
58976: IFFALSE 59070
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58978: LD_EXP 8
58982: PUSH
58983: LD_VAR 0 1
58987: ARRAY
58988: NOT
58989: PUSH
58990: LD_EXP 8
58994: PUSH
58995: LD_VAR 0 1
58999: ARRAY
59000: PUSH
59001: LD_EXP 8
59005: PUSH
59006: LD_OWVAR 2
59010: ARRAY
59011: NONEQUAL
59012: PUSH
59013: LD_OWVAR 2
59017: PPUSH
59018: LD_VAR 0 1
59022: PPUSH
59023: CALL_OW 81
59027: PUSH
59028: LD_INT 1
59030: NONEQUAL
59031: AND
59032: OR
59033: IFFALSE 59070
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
59035: LD_VAR 0 1
59039: PPUSH
59040: CALL 58736 0 1
59044: PUSH
59045: LD_EXP 35
59049: GREATEREQUAL
59050: PUSH
59051: LD_VAR 0 1
59055: PPUSH
59056: CALL 59201 0 1
59060: AND
59061: IFFALSE 59070
// begin enable ( mpLose ) ;
59063: LD_INT 102
59065: ENABLE_MARKED
// exit ;
59066: POP
59067: POP
59068: GO 59086
// end ;
59070: GO 58940
59072: POP
59073: POP
// if canWin then
59074: LD_VAR 0 2
59078: IFFALSE 59085
// enable ( mpWin ) else
59080: LD_INT 101
59082: ENABLE_MARKED
59083: GO 59086
// enable ;
59085: ENABLE
// end ; end ;
59086: PPOPN 2
59088: END
// function EnemiesInGame ; var i ; begin
59089: LD_INT 0
59091: PPUSH
59092: PPUSH
// result := false ;
59093: LD_ADDR_VAR 0 1
59097: PUSH
59098: LD_INT 0
59100: ST_TO_ADDR
// for i := 1 to 8 do
59101: LD_ADDR_VAR 0 2
59105: PUSH
59106: DOUBLE
59107: LD_INT 1
59109: DEC
59110: ST_TO_ADDR
59111: LD_INT 8
59113: PUSH
59114: FOR_TO
59115: IFFALSE 59154
// if i <> your_side and HasPower ( i ) then
59117: LD_VAR 0 2
59121: PUSH
59122: LD_OWVAR 2
59126: NONEQUAL
59127: PUSH
59128: LD_VAR 0 2
59132: PPUSH
59133: CALL 59201 0 1
59137: AND
59138: IFFALSE 59152
// begin result := true ;
59140: LD_ADDR_VAR 0 1
59144: PUSH
59145: LD_INT 1
59147: ST_TO_ADDR
// exit ;
59148: POP
59149: POP
59150: GO 59156
// end ;
59152: GO 59114
59154: POP
59155: POP
// end ;
59156: LD_VAR 0 1
59160: RET
// function CanWinLoose ; begin
59161: LD_INT 0
59163: PPUSH
// result := true ;
59164: LD_ADDR_VAR 0 1
59168: PUSH
59169: LD_INT 1
59171: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
59172: CALL_OW 531
59176: PUSH
59177: CALL_OW 519
59181: PUSH
59182: LD_INT 1
59184: GREATER
59185: AND
59186: IFFALSE 59196
// result := false ;
59188: LD_ADDR_VAR 0 1
59192: PUSH
59193: LD_INT 0
59195: ST_TO_ADDR
// end ;
59196: LD_VAR 0 1
59200: RET
// function HasPower ( i ) ; begin
59201: LD_INT 0
59203: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
59204: LD_ADDR_VAR 0 2
59208: PUSH
59209: LD_INT 22
59211: PUSH
59212: LD_VAR 0 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: LD_INT 21
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 33
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 33
59246: PUSH
59247: LD_INT 5
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PPUSH
59264: CALL_OW 69
59268: ST_TO_ADDR
// end ; end_of_file
59269: LD_VAR 0 2
59273: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59274: PPOPN 6
59276: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59277: LD_EXP 3
59281: PUSH
59282: LD_INT 4
59284: EQUAL
59285: IFFALSE 59321
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59287: LD_STRING setGameDifficulty(
59289: PUSH
59290: LD_OWVAR 67
59294: STR
59295: PUSH
59296: LD_STRING )
59298: STR
59299: PPUSH
59300: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59304: LD_STRING displayDifficulty(
59306: PUSH
59307: LD_OWVAR 67
59311: STR
59312: PUSH
59313: LD_STRING )
59315: STR
59316: PPUSH
59317: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59321: CALL 59350 0 0
// end ; end_of_file
59325: PPOPN 1
59327: END
// every 0 0$1 do
59328: GO 59330
59330: DISABLE
// begin enable ;
59331: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59332: LD_STRING updateTimer(
59334: PUSH
59335: LD_OWVAR 1
59339: STR
59340: PUSH
59341: LD_STRING );
59343: STR
59344: PPUSH
59345: CALL_OW 559
// end ;
59349: END
// export function SOS_MapStart ( ) ; begin
59350: LD_INT 0
59352: PPUSH
// UpdateFactoryWaypoints ( ) ;
59353: CALL 60278 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59357: CALL 60530 0 0
// ParseMultiDataToLua ( ) ;
59361: CALL 60677 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59365: LD_STRING setSpecLogoNumber(
59367: PUSH
59368: LD_INT 2
59370: STR
59371: PUSH
59372: LD_STRING ,
59374: STR
59375: PUSH
59376: LD_INT 1
59378: STR
59379: PUSH
59380: LD_STRING )
59382: STR
59383: PPUSH
59384: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
59388: LD_STRING setSpecLogoNumber(
59390: PUSH
59391: LD_INT 3
59393: STR
59394: PUSH
59395: LD_STRING ,
59397: STR
59398: PUSH
59399: LD_INT 2
59401: STR
59402: PUSH
59403: LD_STRING )
59405: STR
59406: PPUSH
59407: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
59411: LD_STRING setSpecLogoNumber(
59413: PUSH
59414: LD_INT 4
59416: STR
59417: PUSH
59418: LD_STRING ,
59420: STR
59421: PUSH
59422: LD_INT 3
59424: STR
59425: PUSH
59426: LD_STRING )
59428: STR
59429: PPUSH
59430: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
59434: LD_STRING setSpecLogoNumber(
59436: PUSH
59437: LD_INT 5
59439: STR
59440: PUSH
59441: LD_STRING ,
59443: STR
59444: PUSH
59445: LD_INT 4
59447: STR
59448: PUSH
59449: LD_STRING )
59451: STR
59452: PPUSH
59453: CALL_OW 559
// end ;
59457: LD_VAR 0 1
59461: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
59462: LD_INT 0
59464: PPUSH
59465: PPUSH
59466: PPUSH
59467: PPUSH
59468: PPUSH
59469: PPUSH
59470: PPUSH
59471: PPUSH
59472: PPUSH
// for i := 1 to 8 do
59473: LD_ADDR_VAR 0 2
59477: PUSH
59478: DOUBLE
59479: LD_INT 1
59481: DEC
59482: ST_TO_ADDR
59483: LD_INT 8
59485: PUSH
59486: FOR_TO
59487: IFFALSE 59872
// begin if mpSidePositions [ i ] then
59489: LD_EXP 7
59493: PUSH
59494: LD_VAR 0 2
59498: ARRAY
59499: IFFALSE 59870
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
59501: LD_ADDR_VAR 0 7
59505: PUSH
59506: LD_INT 22
59508: PUSH
59509: LD_VAR 0 2
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 21
59520: PUSH
59521: LD_INT 1
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PPUSH
59532: CALL_OW 69
59536: PPUSH
59537: CALL 11468 0 1
59541: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59542: LD_ADDR_VAR 0 9
59546: PUSH
59547: LD_INT 22
59549: PUSH
59550: LD_VAR 0 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: LD_INT 30
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 30
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PPUSH
59591: CALL_OW 69
59595: ST_TO_ADDR
// crates := 0 ;
59596: LD_ADDR_VAR 0 4
59600: PUSH
59601: LD_INT 0
59603: ST_TO_ADDR
// oil := 0 ;
59604: LD_ADDR_VAR 0 5
59608: PUSH
59609: LD_INT 0
59611: ST_TO_ADDR
// sib := 0 ;
59612: LD_ADDR_VAR 0 6
59616: PUSH
59617: LD_INT 0
59619: ST_TO_ADDR
// if bases then
59620: LD_VAR 0 9
59624: IFFALSE 59730
// begin for j in bases do
59626: LD_ADDR_VAR 0 3
59630: PUSH
59631: LD_VAR 0 9
59635: PUSH
59636: FOR_IN
59637: IFFALSE 59728
// begin base := GetBase ( j ) ;
59639: LD_ADDR_VAR 0 8
59643: PUSH
59644: LD_VAR 0 3
59648: PPUSH
59649: CALL_OW 274
59653: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
59654: LD_ADDR_VAR 0 4
59658: PUSH
59659: LD_VAR 0 4
59663: PUSH
59664: LD_VAR 0 8
59668: PPUSH
59669: LD_INT 1
59671: PPUSH
59672: CALL_OW 275
59676: PLUS
59677: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
59678: LD_ADDR_VAR 0 5
59682: PUSH
59683: LD_VAR 0 5
59687: PUSH
59688: LD_VAR 0 8
59692: PPUSH
59693: LD_INT 2
59695: PPUSH
59696: CALL_OW 275
59700: PLUS
59701: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
59702: LD_ADDR_VAR 0 6
59706: PUSH
59707: LD_VAR 0 6
59711: PUSH
59712: LD_VAR 0 8
59716: PPUSH
59717: LD_INT 3
59719: PPUSH
59720: CALL_OW 275
59724: PLUS
59725: ST_TO_ADDR
// end ;
59726: GO 59636
59728: POP
59729: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
59730: LD_STRING setSpecText(
59732: PUSH
59733: LD_VAR 0 2
59737: STR
59738: PUSH
59739: LD_STRING ,
59741: STR
59742: PUSH
59743: LD_INT 2
59745: STR
59746: PUSH
59747: LD_STRING ,
59749: STR
59750: PUSH
59751: LD_VAR 0 4
59755: STR
59756: PUSH
59757: LD_STRING )
59759: STR
59760: PPUSH
59761: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
59765: LD_STRING setSpecText(
59767: PUSH
59768: LD_VAR 0 2
59772: STR
59773: PUSH
59774: LD_STRING ,
59776: STR
59777: PUSH
59778: LD_INT 3
59780: STR
59781: PUSH
59782: LD_STRING ,
59784: STR
59785: PUSH
59786: LD_VAR 0 5
59790: STR
59791: PUSH
59792: LD_STRING )
59794: STR
59795: PPUSH
59796: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
59800: LD_STRING setSpecText(
59802: PUSH
59803: LD_VAR 0 2
59807: STR
59808: PUSH
59809: LD_STRING ,
59811: STR
59812: PUSH
59813: LD_INT 4
59815: STR
59816: PUSH
59817: LD_STRING ,
59819: STR
59820: PUSH
59821: LD_VAR 0 6
59825: STR
59826: PUSH
59827: LD_STRING )
59829: STR
59830: PPUSH
59831: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
59835: LD_STRING setSpecText(
59837: PUSH
59838: LD_VAR 0 2
59842: STR
59843: PUSH
59844: LD_STRING ,
59846: STR
59847: PUSH
59848: LD_INT 5
59850: STR
59851: PUSH
59852: LD_STRING ,
59854: STR
59855: PUSH
59856: LD_VAR 0 7
59860: STR
59861: PUSH
59862: LD_STRING )
59864: STR
59865: PPUSH
59866: CALL_OW 559
// end ; end ;
59870: GO 59486
59872: POP
59873: POP
// end ;
59874: LD_VAR 0 1
59878: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
59879: LD_INT 2
59881: PUSH
59882: LD_INT 30
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 30
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: PPUSH
59907: CALL_OW 69
59911: IFFALSE 59921
59913: GO 59915
59915: DISABLE
// begin enable ;
59916: ENABLE
// UpdateSpectatorBar ;
59917: CALL 59462 0 0
// end ;
59921: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59922: LD_INT 0
59924: PPUSH
// end ;
59925: LD_VAR 0 12
59929: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59930: LD_INT 0
59932: PPUSH
59933: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59934: LD_VAR 0 1
59938: NOT
59939: PUSH
59940: LD_VAR 0 2
59944: PPUSH
59945: LD_VAR 0 3
59949: PPUSH
59950: CALL_OW 488
59954: NOT
59955: OR
59956: PUSH
59957: LD_VAR 0 1
59961: PPUSH
59962: CALL_OW 266
59966: PUSH
59967: LD_INT 3
59969: NONEQUAL
59970: PUSH
59971: LD_VAR 0 1
59975: PPUSH
59976: CALL_OW 247
59980: PUSH
59981: LD_INT 1
59983: EQUAL
59984: NOT
59985: AND
59986: OR
59987: IFFALSE 59991
// exit ;
59989: GO 60273
// if GetType ( factory ) = unit_human then
59991: LD_VAR 0 1
59995: PPUSH
59996: CALL_OW 247
60000: PUSH
60001: LD_INT 1
60003: EQUAL
60004: IFFALSE 60021
// factory := IsInUnit ( factory ) ;
60006: LD_ADDR_VAR 0 1
60010: PUSH
60011: LD_VAR 0 1
60015: PPUSH
60016: CALL_OW 310
60020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60021: LD_VAR 0 1
60025: PPUSH
60026: CALL_OW 266
60030: PUSH
60031: LD_INT 3
60033: NONEQUAL
60034: IFFALSE 60038
// exit ;
60036: GO 60273
// for i := 1 to Count ( factoryWaypoints ) do
60038: LD_ADDR_VAR 0 5
60042: PUSH
60043: DOUBLE
60044: LD_INT 1
60046: DEC
60047: ST_TO_ADDR
60048: LD_EXP 55
60052: PPUSH
60053: CALL 11468 0 1
60057: PUSH
60058: FOR_TO
60059: IFFALSE 60221
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60061: LD_VAR 0 2
60065: PPUSH
60066: LD_VAR 0 3
60070: PPUSH
60071: CALL_OW 428
60075: PUSH
60076: LD_EXP 55
60080: PUSH
60081: LD_VAR 0 5
60085: ARRAY
60086: PUSH
60087: LD_INT 2
60089: ARRAY
60090: EQUAL
60091: IFFALSE 60123
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60093: LD_ADDR_EXP 55
60097: PUSH
60098: LD_EXP 55
60102: PPUSH
60103: LD_VAR 0 5
60107: PPUSH
60108: CALL_OW 3
60112: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60113: CALL 60278 0 0
// exit ;
60117: POP
60118: POP
60119: GO 60273
// end else
60121: GO 60219
// if factory = factoryWaypoints [ i ] [ 2 ] then
60123: LD_VAR 0 1
60127: PUSH
60128: LD_EXP 55
60132: PUSH
60133: LD_VAR 0 5
60137: ARRAY
60138: PUSH
60139: LD_INT 2
60141: ARRAY
60142: EQUAL
60143: IFFALSE 60219
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60145: LD_ADDR_EXP 55
60149: PUSH
60150: LD_EXP 55
60154: PPUSH
60155: LD_VAR 0 5
60159: PPUSH
60160: CALL_OW 3
60164: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60165: LD_ADDR_EXP 55
60169: PUSH
60170: LD_EXP 55
60174: PPUSH
60175: LD_VAR 0 1
60179: PPUSH
60180: CALL_OW 255
60184: PUSH
60185: LD_VAR 0 1
60189: PUSH
60190: LD_VAR 0 2
60194: PUSH
60195: LD_VAR 0 3
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: PPUSH
60206: CALL 47077 0 2
60210: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60211: CALL 60278 0 0
// exit ;
60215: POP
60216: POP
60217: GO 60273
// end ; end ;
60219: GO 60058
60221: POP
60222: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60223: LD_ADDR_EXP 55
60227: PUSH
60228: LD_EXP 55
60232: PPUSH
60233: LD_VAR 0 1
60237: PPUSH
60238: CALL_OW 255
60242: PUSH
60243: LD_VAR 0 1
60247: PUSH
60248: LD_VAR 0 2
60252: PUSH
60253: LD_VAR 0 3
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: PPUSH
60264: CALL 47077 0 2
60268: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60269: CALL 60278 0 0
// end ;
60273: LD_VAR 0 4
60277: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60278: LD_INT 0
60280: PPUSH
60281: PPUSH
60282: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60283: LD_STRING resetFactoryWaypoint();
60285: PPUSH
60286: CALL_OW 559
// if factoryWaypoints then
60290: LD_EXP 55
60294: IFFALSE 60415
// begin list := factoryWaypoints ;
60296: LD_ADDR_VAR 0 3
60300: PUSH
60301: LD_EXP 55
60305: ST_TO_ADDR
// for i := 1 to list do
60306: LD_ADDR_VAR 0 2
60310: PUSH
60311: DOUBLE
60312: LD_INT 1
60314: DEC
60315: ST_TO_ADDR
60316: LD_VAR 0 3
60320: PUSH
60321: FOR_TO
60322: IFFALSE 60413
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60324: LD_STRING setFactoryWaypointXY(
60326: PUSH
60327: LD_VAR 0 3
60331: PUSH
60332: LD_VAR 0 2
60336: ARRAY
60337: PUSH
60338: LD_INT 1
60340: ARRAY
60341: STR
60342: PUSH
60343: LD_STRING ,
60345: STR
60346: PUSH
60347: LD_VAR 0 3
60351: PUSH
60352: LD_VAR 0 2
60356: ARRAY
60357: PUSH
60358: LD_INT 2
60360: ARRAY
60361: STR
60362: PUSH
60363: LD_STRING ,
60365: STR
60366: PUSH
60367: LD_VAR 0 3
60371: PUSH
60372: LD_VAR 0 2
60376: ARRAY
60377: PUSH
60378: LD_INT 3
60380: ARRAY
60381: STR
60382: PUSH
60383: LD_STRING ,
60385: STR
60386: PUSH
60387: LD_VAR 0 3
60391: PUSH
60392: LD_VAR 0 2
60396: ARRAY
60397: PUSH
60398: LD_INT 4
60400: ARRAY
60401: STR
60402: PUSH
60403: LD_STRING )
60405: STR
60406: PPUSH
60407: CALL_OW 559
60411: GO 60321
60413: POP
60414: POP
// end ; end ;
60415: LD_VAR 0 1
60419: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60420: LD_INT 0
60422: PPUSH
// if HexInfo ( x , y ) = warehouse then
60423: LD_VAR 0 2
60427: PPUSH
60428: LD_VAR 0 3
60432: PPUSH
60433: CALL_OW 428
60437: PUSH
60438: LD_VAR 0 1
60442: EQUAL
60443: IFFALSE 60470
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60445: LD_ADDR_EXP 57
60449: PUSH
60450: LD_EXP 57
60454: PPUSH
60455: LD_VAR 0 1
60459: PPUSH
60460: LD_INT 0
60462: PPUSH
60463: CALL_OW 1
60467: ST_TO_ADDR
60468: GO 60521
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60470: LD_ADDR_EXP 57
60474: PUSH
60475: LD_EXP 57
60479: PPUSH
60480: LD_VAR 0 1
60484: PPUSH
60485: LD_VAR 0 1
60489: PPUSH
60490: CALL_OW 255
60494: PUSH
60495: LD_VAR 0 1
60499: PUSH
60500: LD_VAR 0 2
60504: PUSH
60505: LD_VAR 0 3
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: PPUSH
60516: CALL_OW 1
60520: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60521: CALL 60530 0 0
// end ;
60525: LD_VAR 0 4
60529: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60530: LD_INT 0
60532: PPUSH
60533: PPUSH
60534: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60535: LD_STRING resetWarehouseGatheringPoints();
60537: PPUSH
60538: CALL_OW 559
// if warehouseGatheringPoints then
60542: LD_EXP 57
60546: IFFALSE 60672
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60548: LD_ADDR_VAR 0 3
60552: PUSH
60553: LD_EXP 57
60557: PPUSH
60558: CALL 50845 0 1
60562: ST_TO_ADDR
// for i := 1 to list do
60563: LD_ADDR_VAR 0 2
60567: PUSH
60568: DOUBLE
60569: LD_INT 1
60571: DEC
60572: ST_TO_ADDR
60573: LD_VAR 0 3
60577: PUSH
60578: FOR_TO
60579: IFFALSE 60670
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60581: LD_STRING setWarehouseGatheringPointXY(
60583: PUSH
60584: LD_VAR 0 3
60588: PUSH
60589: LD_VAR 0 2
60593: ARRAY
60594: PUSH
60595: LD_INT 1
60597: ARRAY
60598: STR
60599: PUSH
60600: LD_STRING ,
60602: STR
60603: PUSH
60604: LD_VAR 0 3
60608: PUSH
60609: LD_VAR 0 2
60613: ARRAY
60614: PUSH
60615: LD_INT 2
60617: ARRAY
60618: STR
60619: PUSH
60620: LD_STRING ,
60622: STR
60623: PUSH
60624: LD_VAR 0 3
60628: PUSH
60629: LD_VAR 0 2
60633: ARRAY
60634: PUSH
60635: LD_INT 3
60637: ARRAY
60638: STR
60639: PUSH
60640: LD_STRING ,
60642: STR
60643: PUSH
60644: LD_VAR 0 3
60648: PUSH
60649: LD_VAR 0 2
60653: ARRAY
60654: PUSH
60655: LD_INT 4
60657: ARRAY
60658: STR
60659: PUSH
60660: LD_STRING )
60662: STR
60663: PPUSH
60664: CALL_OW 559
60668: GO 60578
60670: POP
60671: POP
// end ; end ;
60672: LD_VAR 0 1
60676: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60677: LD_INT 0
60679: PPUSH
60680: PPUSH
// if not mpSidePositions then
60681: LD_EXP 7
60685: NOT
60686: IFFALSE 60690
// exit ;
60688: GO 60761
// result :=  ;
60690: LD_ADDR_VAR 0 1
60694: PUSH
60695: LD_STRING 
60697: ST_TO_ADDR
// for i := 1 to 8 do
60698: LD_ADDR_VAR 0 2
60702: PUSH
60703: DOUBLE
60704: LD_INT 1
60706: DEC
60707: ST_TO_ADDR
60708: LD_INT 8
60710: PUSH
60711: FOR_TO
60712: IFFALSE 60742
// begin result := result & mpSidePositions [ i ] & ; ;
60714: LD_ADDR_VAR 0 1
60718: PUSH
60719: LD_VAR 0 1
60723: PUSH
60724: LD_EXP 7
60728: PUSH
60729: LD_VAR 0 2
60733: ARRAY
60734: STR
60735: PUSH
60736: LD_STRING ;
60738: STR
60739: ST_TO_ADDR
// end ;
60740: GO 60711
60742: POP
60743: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60744: LD_STRING setMultiplayerRealPosition("
60746: PUSH
60747: LD_VAR 0 1
60751: STR
60752: PUSH
60753: LD_STRING ");
60755: STR
60756: PPUSH
60757: CALL_OW 559
// end ;
60761: LD_VAR 0 1
60765: RET
