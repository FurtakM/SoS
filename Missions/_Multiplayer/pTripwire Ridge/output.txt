// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2728 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3074 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 100
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 34
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 35
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 37
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 36
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 33
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 51628 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 51628 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 51628 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 51628 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 51628 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 51628 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 11474 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 51461 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 51461 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 51461 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 51461 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 51461 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 51461 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 51461 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 51461 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 51461 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 51461 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 51461 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 51461 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 51628 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 51628 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 51628 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 51628 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 51628 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 51628 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 51628 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 51628 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 51628 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 51628 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 51628 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 51628 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 51628 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 51628 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 51628 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 51628 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 51628 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 51628 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 48444 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 52336 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 7672 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 52353 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 8337 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 52394 0 2
2703: PPOPN 2
2705: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_VAR 0 3
2720: PPUSH
2721: CALL 8390 0 3
2725: PPOPN 3
2727: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
// disable ( mpActive ) ;
2732: LD_INT 100
2734: DISABLE_MARKED
// disable ( mpWin ) ;
2735: LD_INT 101
2737: DISABLE_MARKED
// disable ( mpLose ) ;
2738: LD_INT 102
2740: DISABLE_MARKED
// mpGameType := 0 ;
2741: LD_ADDR_EXP 3
2745: PUSH
2746: LD_INT 0
2748: ST_TO_ADDR
// mpGameSettings := [ ] ;
2749: LD_ADDR_EXP 6
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: EMPTY
2762: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2763: LD_ADDR_EXP 5
2767: PUSH
2768: EMPTY
2769: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2770: LD_ADDR_EXP 29
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2785: LD_ADDR_EXP 12
2789: PUSH
2790: EMPTY
2791: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2792: LD_ADDR_EXP 13
2796: PUSH
2797: EMPTY
2798: ST_TO_ADDR
// mpDepots := [ ] ;
2799: LD_ADDR_EXP 14
2803: PUSH
2804: EMPTY
2805: ST_TO_ADDR
// mpBuildings := [ ] ;
2806: LD_ADDR_EXP 17
2810: PUSH
2811: EMPTY
2812: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2813: LD_ADDR_EXP 18
2817: PUSH
2818: EMPTY
2819: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2820: LD_ADDR_EXP 19
2824: PUSH
2825: EMPTY
2826: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2827: LD_ADDR_EXP 20
2831: PUSH
2832: EMPTY
2833: ST_TO_ADDR
// mpStartingResources := [ ] ;
2834: LD_ADDR_EXP 15
2838: PUSH
2839: EMPTY
2840: ST_TO_ADDR
// mpStartPos := [ ] ;
2841: LD_ADDR_EXP 21
2845: PUSH
2846: EMPTY
2847: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2848: LD_ADDR_EXP 22
2852: PUSH
2853: LD_INT 1
2855: NEG
2856: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2857: LD_ADDR_EXP 23
2861: PUSH
2862: EMPTY
2863: ST_TO_ADDR
// mpApemans := [ ] ;
2864: LD_ADDR_EXP 30
2868: PUSH
2869: EMPTY
2870: ST_TO_ADDR
// mpApemansArea := [ ] ;
2871: LD_ADDR_EXP 31
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpRespawn := [ ] ;
2878: LD_ADDR_EXP 33
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpKingArea := 0 ;
2885: LD_ADDR_EXP 34
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// mpPoints := [ ] ;
2893: LD_ADDR_EXP 35
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// mpVehicles := 0 ;
2900: LD_ADDR_EXP 36
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// mpShipments := 0 ;
2908: LD_ADDR_EXP 27
2912: PUSH
2913: LD_INT 0
2915: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2916: LD_ADDR_EXP 40
2920: PUSH
2921: EMPTY
2922: PUSH
2923: EMPTY
2924: PUSH
2925: EMPTY
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2947: LD_ADDR_EXP 32
2951: PUSH
2952: EMPTY
2953: PUSH
2954: EMPTY
2955: PUSH
2956: EMPTY
2957: PUSH
2958: EMPTY
2959: PUSH
2960: EMPTY
2961: PUSH
2962: EMPTY
2963: PUSH
2964: EMPTY
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: ST_TO_ADDR
// mpEmissions := 0 ;
2978: LD_ADDR_EXP 37
2982: PUSH
2983: LD_INT 0
2985: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2986: LD_ADDR_EXP 25
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2994: LD_ADDR_EXP 24
2998: PUSH
2999: LD_INT 15
3001: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3002: LD_ADDR_EXP 38
3006: PUSH
3007: LD_INT 0
3009: ST_TO_ADDR
// mpGameActive := false ;
3010: LD_ADDR_EXP 39
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// mpBlockRespThread := false ;
3018: LD_ADDR_EXP 41
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// for i := 1 to 32 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 32
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3067
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3042: LD_ADDR_EXP 6
3046: PUSH
3047: LD_EXP 6
3051: PPUSH
3052: LD_VAR 0 2
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 1
3064: ST_TO_ADDR
3065: GO 3039
3067: POP
3068: POP
// end ;
3069: LD_VAR 0 1
3073: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3074: LD_INT 0
3076: PPUSH
3077: PPUSH
3078: PPUSH
3079: PPUSH
3080: PPUSH
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3090: LD_ADDR_VAR 0 14
3094: PUSH
3095: LD_INT 1
3097: PUSH
3098: LD_INT 2
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: ST_TO_ADDR
// for i in gameTypes do
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_VAR 0 14
3118: PUSH
3119: FOR_IN
3120: IFFALSE 3129
// disable ( i ) ;
3122: LD_VAR 0 2
3126: DISABLE_MARKED
3127: GO 3119
3129: POP
3130: POP
// if Multiplayer then
3131: LD_OWVAR 4
3135: IFFALSE 3319
// begin mpGameType := mp_game_type ;
3137: LD_ADDR_EXP 3
3141: PUSH
3142: LD_OWVAR 6
3146: ST_TO_ADDR
// your_side := mp_player_side ;
3147: LD_ADDR_OWVAR 2
3151: PUSH
3152: LD_OWVAR 7
3156: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3157: LD_ADDR_EXP 7
3161: PUSH
3162: LD_OWVAR 17
3166: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3167: LD_ADDR_EXP 8
3171: PUSH
3172: LD_OWVAR 15
3176: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3177: LD_ADDR_EXP 9
3181: PUSH
3182: LD_OWVAR 16
3186: ST_TO_ADDR
// mpTeams := mp_teams ;
3187: LD_ADDR_EXP 10
3191: PUSH
3192: LD_OWVAR 12
3196: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3197: LD_ADDR_VAR 0 2
3201: PUSH
3202: DOUBLE
3203: LD_INT 1
3205: DEC
3206: ST_TO_ADDR
3207: LD_EXP 4
3211: PPUSH
3212: CALL 11474 0 1
3216: PUSH
3217: FOR_TO
3218: IFFALSE 3294
// begin setting := mpGameSettingsKeys [ i ] ;
3220: LD_ADDR_VAR 0 12
3224: PUSH
3225: LD_EXP 4
3229: PUSH
3230: LD_VAR 0 2
3234: ARRAY
3235: ST_TO_ADDR
// if setting then
3236: LD_VAR 0 12
3240: IFFALSE 3292
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3242: LD_ADDR_EXP 6
3246: PUSH
3247: LD_EXP 6
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: LD_EXP 5
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 2
3272: PUSH
3273: LD_INT 1
3275: MINUS
3276: PPUSH
3277: CALL_OW 426
3281: PUSH
3282: LD_INT 1
3284: PLUS
3285: ARRAY
3286: PPUSH
3287: CALL_OW 1
3291: ST_TO_ADDR
// end ;
3292: GO 3217
3294: POP
3295: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3296: LD_ADDR_EXP 11
3300: PUSH
3301: LD_EXP 8
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: EMPTY
3310: LIST
3311: DIFF
3312: PUSH
3313: LD_INT 1
3315: GREATER
3316: ST_TO_ADDR
// end else
3317: GO 3319
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3319: LD_EXP 3
3323: PPUSH
3324: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3328: LD_EXP 18
3332: PPUSH
3333: CALL 11474 0 1
3337: IFFALSE 3368
// begin for i in mpMarkedAreas do
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: LD_EXP 18
3348: PUSH
3349: FOR_IN
3350: IFFALSE 3366
// SetAreaMapShow ( i , 0 ) ;
3352: LD_VAR 0 2
3356: PPUSH
3357: LD_INT 0
3359: PPUSH
3360: CALL_OW 424
3364: GO 3349
3366: POP
3367: POP
// end ; for i := 1 to 8 do
3368: LD_ADDR_VAR 0 2
3372: PUSH
3373: DOUBLE
3374: LD_INT 1
3376: DEC
3377: ST_TO_ADDR
3378: LD_INT 8
3380: PUSH
3381: FOR_TO
3382: IFFALSE 4639
// begin if not mpSidePositions [ i ] then
3384: LD_EXP 7
3388: PUSH
3389: LD_VAR 0 2
3393: ARRAY
3394: NOT
3395: IFFALSE 3399
// continue ;
3397: GO 3381
// side := i ;
3399: LD_ADDR_VAR 0 7
3403: PUSH
3404: LD_VAR 0 2
3408: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3409: LD_ADDR_VAR 0 9
3413: PUSH
3414: LD_EXP 9
3418: PUSH
3419: LD_VAR 0 2
3423: ARRAY
3424: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3425: LD_ADDR_VAR 0 8
3429: PUSH
3430: LD_EXP 7
3434: PUSH
3435: LD_VAR 0 2
3439: ARRAY
3440: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3441: LD_EXP 12
3445: PPUSH
3446: CALL 11474 0 1
3450: IFFALSE 3527
// begin for j in mpOilDeposits [ pos ] do
3452: LD_ADDR_VAR 0 3
3456: PUSH
3457: LD_EXP 12
3461: PUSH
3462: LD_VAR 0 8
3466: ARRAY
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3525
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3471: LD_VAR 0 3
3475: PUSH
3476: LD_INT 1
3478: ARRAY
3479: PPUSH
3480: LD_VAR 0 3
3484: PUSH
3485: LD_INT 2
3487: ARRAY
3488: PPUSH
3489: LD_INT 2
3491: PPUSH
3492: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3496: LD_VAR 0 3
3500: PUSH
3501: LD_INT 1
3503: ARRAY
3504: PPUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_INT 2
3512: ARRAY
3513: PPUSH
3514: LD_VAR 0 7
3518: PPUSH
3519: CALL_OW 441
// end ;
3523: GO 3468
3525: POP
3526: POP
// end ; if Count ( mpSibDeposits ) then
3527: LD_EXP 13
3531: PPUSH
3532: CALL 11474 0 1
3536: IFFALSE 3613
// begin for j in mpSibDeposits [ pos ] do
3538: LD_ADDR_VAR 0 3
3542: PUSH
3543: LD_EXP 13
3547: PUSH
3548: LD_VAR 0 8
3552: ARRAY
3553: PUSH
3554: FOR_IN
3555: IFFALSE 3611
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: LD_VAR 0 3
3570: PUSH
3571: LD_INT 2
3573: ARRAY
3574: PPUSH
3575: LD_INT 3
3577: PPUSH
3578: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3582: LD_VAR 0 3
3586: PUSH
3587: LD_INT 1
3589: ARRAY
3590: PPUSH
3591: LD_VAR 0 3
3595: PUSH
3596: LD_INT 2
3598: ARRAY
3599: PPUSH
3600: LD_VAR 0 7
3604: PPUSH
3605: CALL_OW 441
// end ;
3609: GO 3554
3611: POP
3612: POP
// end ; InitBc ;
3613: CALL_OW 21
// InitUc ;
3617: CALL_OW 18
// uc_side := side ;
3621: LD_ADDR_OWVAR 20
3625: PUSH
3626: LD_VAR 0 7
3630: ST_TO_ADDR
// uc_nation := nation ;
3631: LD_ADDR_OWVAR 21
3635: PUSH
3636: LD_VAR 0 9
3640: ST_TO_ADDR
// if Count ( mpDepots ) then
3641: LD_EXP 14
3645: PPUSH
3646: CALL 11474 0 1
3650: IFFALSE 3834
// begin if mpGameType = GameTypeSurvival then
3652: LD_EXP 3
3656: PUSH
3657: LD_INT 2
3659: EQUAL
3660: IFFALSE 3680
// begin bc_level := 10 ;
3662: LD_ADDR_OWVAR 43
3666: PUSH
3667: LD_INT 10
3669: ST_TO_ADDR
// bc_type := b_warehouse ;
3670: LD_ADDR_OWVAR 42
3674: PUSH
3675: LD_INT 1
3677: ST_TO_ADDR
// end else
3678: GO 3696
// begin bc_level := 0 ;
3680: LD_ADDR_OWVAR 43
3684: PUSH
3685: LD_INT 0
3687: ST_TO_ADDR
// bc_type := b_depot ;
3688: LD_ADDR_OWVAR 42
3692: PUSH
3693: LD_INT 0
3695: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3696: LD_ADDR_VAR 0 4
3700: PUSH
3701: LD_EXP 14
3705: PUSH
3706: LD_VAR 0 8
3710: ARRAY
3711: PUSH
3712: LD_INT 1
3714: ARRAY
3715: PPUSH
3716: LD_EXP 14
3720: PUSH
3721: LD_VAR 0 8
3725: ARRAY
3726: PUSH
3727: LD_INT 2
3729: ARRAY
3730: PPUSH
3731: LD_EXP 14
3735: PUSH
3736: LD_VAR 0 8
3740: ARRAY
3741: PUSH
3742: LD_INT 3
3744: ARRAY
3745: PPUSH
3746: CALL_OW 47
3750: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3751: LD_VAR 0 4
3755: PPUSH
3756: LD_STRING @
3758: PUSH
3759: LD_VAR 0 7
3763: STR
3764: PPUSH
3765: CALL_OW 500
// if Count ( mpStartingResources ) then
3769: LD_EXP 15
3773: PPUSH
3774: CALL 11474 0 1
3778: IFFALSE 3832
// begin for j := 1 to mpStartingResources do
3780: LD_ADDR_VAR 0 3
3784: PUSH
3785: DOUBLE
3786: LD_INT 1
3788: DEC
3789: ST_TO_ADDR
3790: LD_EXP 15
3794: PUSH
3795: FOR_TO
3796: IFFALSE 3830
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3798: LD_VAR 0 4
3802: PPUSH
3803: CALL_OW 274
3807: PPUSH
3808: LD_VAR 0 3
3812: PPUSH
3813: LD_EXP 15
3817: PUSH
3818: LD_VAR 0 3
3822: ARRAY
3823: PPUSH
3824: CALL_OW 277
3828: GO 3795
3830: POP
3831: POP
// end ; end else
3832: GO 3981
// if Count ( mpStartingResources ) then
3834: LD_EXP 15
3838: PPUSH
3839: CALL 11474 0 1
3843: IFFALSE 3981
// begin for j := 1 to mpStartingResources do
3845: LD_ADDR_VAR 0 3
3849: PUSH
3850: DOUBLE
3851: LD_INT 1
3853: DEC
3854: ST_TO_ADDR
3855: LD_EXP 15
3859: PUSH
3860: FOR_TO
3861: IFFALSE 3979
// begin resources := mpStartingResources [ j ] ;
3863: LD_ADDR_VAR 0 13
3867: PUSH
3868: LD_EXP 15
3872: PUSH
3873: LD_VAR 0 3
3877: ARRAY
3878: ST_TO_ADDR
// repeat if resources >= 50 then
3879: LD_VAR 0 13
3883: PUSH
3884: LD_INT 50
3886: GREATEREQUAL
3887: IFFALSE 3933
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_INT 5
3896: PPUSH
3897: LD_VAR 0 5
3901: PPUSH
3902: LD_VAR 0 6
3906: PPUSH
3907: LD_INT 4
3909: PPUSH
3910: LD_INT 0
3912: PPUSH
3913: CALL_OW 60
// resources := resources - 50 ;
3917: LD_ADDR_VAR 0 13
3921: PUSH
3922: LD_VAR 0 13
3926: PUSH
3927: LD_INT 50
3929: MINUS
3930: ST_TO_ADDR
// end else
3931: GO 3967
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: LD_VAR 0 13
3942: PUSH
3943: LD_INT 10
3945: DIV
3946: PPUSH
3947: LD_VAR 0 5
3951: PPUSH
3952: LD_VAR 0 6
3956: PPUSH
3957: LD_INT 4
3959: PPUSH
3960: LD_INT 0
3962: PPUSH
3963: CALL_OW 60
// until resources <= 0 ;
3967: LD_VAR 0 13
3971: PUSH
3972: LD_INT 0
3974: LESSEQUAL
3975: IFFALSE 3879
// end ;
3977: GO 3860
3979: POP
3980: POP
// end ; if Count ( mpBuildings ) then
3981: LD_EXP 17
3985: PPUSH
3986: CALL 11474 0 1
3990: IFFALSE 4068
// begin for j in mpBuildings [ pos ] do
3992: LD_ADDR_VAR 0 3
3996: PUSH
3997: LD_EXP 17
4001: PUSH
4002: LD_VAR 0 8
4006: ARRAY
4007: PUSH
4008: FOR_IN
4009: IFFALSE 4066
// begin bc_level := 0 ;
4011: LD_ADDR_OWVAR 43
4015: PUSH
4016: LD_INT 0
4018: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4019: LD_ADDR_OWVAR 42
4023: PUSH
4024: LD_VAR 0 3
4028: PUSH
4029: LD_INT 1
4031: ARRAY
4032: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4033: LD_VAR 0 3
4037: PUSH
4038: LD_INT 2
4040: ARRAY
4041: PPUSH
4042: LD_VAR 0 3
4046: PUSH
4047: LD_INT 3
4049: ARRAY
4050: PPUSH
4051: LD_VAR 0 3
4055: PUSH
4056: LD_INT 4
4058: ARRAY
4059: PPUSH
4060: CALL_OW 47
// end ;
4064: GO 4008
4066: POP
4067: POP
// end ; if mpBattleFlag > - 1 then
4068: LD_EXP 22
4072: PUSH
4073: LD_INT 1
4075: NEG
4076: GREATER
4077: IFFALSE 4236
// begin x := mpStartPos [ pos ] [ 1 ] ;
4079: LD_ADDR_VAR 0 5
4083: PUSH
4084: LD_EXP 21
4088: PUSH
4089: LD_VAR 0 8
4093: ARRAY
4094: PUSH
4095: LD_INT 1
4097: ARRAY
4098: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4099: LD_ADDR_VAR 0 6
4103: PUSH
4104: LD_EXP 21
4108: PUSH
4109: LD_VAR 0 8
4113: ARRAY
4114: PUSH
4115: LD_INT 2
4117: ARRAY
4118: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4119: LD_VAR 0 5
4123: PPUSH
4124: LD_VAR 0 6
4128: PPUSH
4129: LD_INT 12
4131: PPUSH
4132: LD_INT 2
4134: PPUSH
4135: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4139: LD_ADDR_EXP 23
4143: PUSH
4144: LD_EXP 23
4148: PPUSH
4149: LD_VAR 0 7
4153: PPUSH
4154: LD_VAR 0 7
4158: PPUSH
4159: LD_VAR 0 5
4163: PPUSH
4164: LD_VAR 0 6
4168: PPUSH
4169: LD_INT 1
4171: PUSH
4172: LD_INT 100
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: LD_INT 70
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: LD_INT 40
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PUSH
4199: LD_INT 10
4201: PUSH
4202: LD_INT 25
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 20
4211: PUSH
4212: LD_INT 100
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: PPUSH
4226: CALL_OW 418
4230: PPUSH
4231: CALL_OW 1
4235: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4236: LD_EXP 26
4240: PUSH
4241: LD_INT 20
4243: PPUSH
4244: LD_VAR 0 7
4248: PPUSH
4249: CALL_OW 321
4253: PUSH
4254: LD_INT 1
4256: EQUAL
4257: AND
4258: IFFALSE 4275
// SetTech ( tech_SibDet , side , state_researched ) ;
4260: LD_INT 20
4262: PPUSH
4263: LD_VAR 0 7
4267: PPUSH
4268: LD_INT 2
4270: PPUSH
4271: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4275: LD_INT 24
4277: PPUSH
4278: LD_VAR 0 7
4282: PPUSH
4283: LD_INT 0
4285: PPUSH
4286: CALL_OW 322
// if mpSibBomb = 1 then
4290: LD_EXP 28
4294: PUSH
4295: LD_INT 1
4297: EQUAL
4298: IFFALSE 4317
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4300: LD_INT 25
4302: PPUSH
4303: LD_VAR 0 7
4307: PPUSH
4308: LD_INT 1
4310: PPUSH
4311: CALL_OW 322
// end else
4315: GO 4332
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4317: LD_INT 25
4319: PPUSH
4320: LD_VAR 0 7
4324: PPUSH
4325: LD_INT 0
4327: PPUSH
4328: CALL_OW 322
// end ; if mpVehicles then
4332: LD_EXP 36
4336: IFFALSE 4435
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4338: LD_ADDR_VAR 0 3
4342: PUSH
4343: LD_VAR 0 7
4347: PPUSH
4348: LD_VAR 0 9
4352: PPUSH
4353: LD_EXP 36
4357: PPUSH
4358: CALL 5549 0 3
4362: PUSH
4363: FOR_IN
4364: IFFALSE 4433
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4366: LD_VAR 0 3
4370: PPUSH
4371: LD_INT 0
4373: PPUSH
4374: LD_INT 5
4376: PPUSH
4377: CALL_OW 12
4381: PPUSH
4382: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4386: LD_VAR 0 3
4390: PPUSH
4391: LD_EXP 21
4395: PUSH
4396: LD_VAR 0 8
4400: ARRAY
4401: PUSH
4402: LD_INT 1
4404: ARRAY
4405: PPUSH
4406: LD_EXP 21
4410: PUSH
4411: LD_VAR 0 8
4415: ARRAY
4416: PUSH
4417: LD_INT 2
4419: ARRAY
4420: PPUSH
4421: LD_INT 12
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 50
// end ;
4431: GO 4363
4433: POP
4434: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4435: LD_ADDR_VAR 0 11
4439: PUSH
4440: LD_VAR 0 7
4444: PPUSH
4445: LD_VAR 0 9
4449: PPUSH
4450: LD_EXP 24
4454: PPUSH
4455: LD_EXP 25
4459: PPUSH
4460: CALL 5051 0 4
4464: ST_TO_ADDR
// for j in team do
4465: LD_ADDR_VAR 0 3
4469: PUSH
4470: LD_VAR 0 11
4474: PUSH
4475: FOR_IN
4476: IFFALSE 4525
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4478: LD_VAR 0 3
4482: PPUSH
4483: LD_EXP 21
4487: PUSH
4488: LD_VAR 0 8
4492: ARRAY
4493: PUSH
4494: LD_INT 1
4496: ARRAY
4497: PPUSH
4498: LD_EXP 21
4502: PUSH
4503: LD_VAR 0 8
4507: ARRAY
4508: PUSH
4509: LD_INT 2
4511: ARRAY
4512: PPUSH
4513: LD_INT 12
4515: PPUSH
4516: LD_INT 0
4518: PPUSH
4519: CALL_OW 50
4523: GO 4475
4525: POP
4526: POP
// if mpApemans then
4527: LD_EXP 30
4531: IFFALSE 4637
// begin for j := 1 to mpApemans do
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: DOUBLE
4539: LD_INT 1
4541: DEC
4542: ST_TO_ADDR
4543: LD_EXP 30
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4635
// begin PrepareApeman ( - 5 ) ;
4551: LD_INT 5
4553: NEG
4554: PPUSH
4555: CALL 43331 0 1
// ape := CreateHuman ;
4559: LD_ADDR_VAR 0 10
4563: PUSH
4564: CALL_OW 44
4568: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4569: LD_ADDR_EXP 32
4573: PUSH
4574: LD_EXP 32
4578: PPUSH
4579: LD_VAR 0 8
4583: PPUSH
4584: LD_EXP 32
4588: PUSH
4589: LD_VAR 0 8
4593: ARRAY
4594: PPUSH
4595: LD_VAR 0 10
4599: PPUSH
4600: CALL 47083 0 2
4604: PPUSH
4605: CALL_OW 1
4609: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4610: LD_VAR 0 10
4614: PPUSH
4615: LD_EXP 31
4619: PUSH
4620: LD_VAR 0 8
4624: ARRAY
4625: PPUSH
4626: LD_INT 0
4628: PPUSH
4629: CALL_OW 49
// end ;
4633: GO 4548
4635: POP
4636: POP
// end ; end ;
4637: GO 3381
4639: POP
4640: POP
// if not mpTeamGame then
4641: LD_EXP 11
4645: NOT
4646: IFFALSE 4744
// begin for i := 1 to 8 do
4648: LD_ADDR_VAR 0 2
4652: PUSH
4653: DOUBLE
4654: LD_INT 1
4656: DEC
4657: ST_TO_ADDR
4658: LD_INT 8
4660: PUSH
4661: FOR_TO
4662: IFFALSE 4740
// for j := 1 to 8 do
4664: LD_ADDR_VAR 0 3
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_INT 8
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4736
// if i <> j then
4680: LD_VAR 0 2
4684: PUSH
4685: LD_VAR 0 3
4689: NONEQUAL
4690: IFFALSE 4714
// SetAttitude ( i , j , att_neutral , true ) else
4692: LD_VAR 0 2
4696: PPUSH
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 0
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 80
4712: GO 4734
// SetAttitude ( i , j , att_friend , true ) ;
4714: LD_VAR 0 2
4718: PPUSH
4719: LD_VAR 0 3
4723: PPUSH
4724: LD_INT 1
4726: PPUSH
4727: LD_INT 1
4729: PPUSH
4730: CALL_OW 80
4734: GO 4677
4736: POP
4737: POP
4738: GO 4661
4740: POP
4741: POP
// end else
4742: GO 4919
// begin if mpSharedVision then
4744: LD_EXP 16
4748: IFFALSE 4813
// begin for i in mpTeams do
4750: LD_ADDR_VAR 0 2
4754: PUSH
4755: LD_EXP 10
4759: PUSH
4760: FOR_IN
4761: IFFALSE 4811
// for j := 2 to i do
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: DOUBLE
4769: LD_INT 2
4771: DEC
4772: ST_TO_ADDR
4773: LD_VAR 0 2
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4807
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4781: LD_VAR 0 2
4785: PUSH
4786: LD_VAR 0 3
4790: ARRAY
4791: PPUSH
4792: LD_VAR 0 2
4796: PUSH
4797: LD_INT 1
4799: ARRAY
4800: PPUSH
4801: CALL_OW 343
4805: GO 4778
4807: POP
4808: POP
4809: GO 4760
4811: POP
4812: POP
// end ; for i := 1 to 8 do
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: DOUBLE
4819: LD_INT 1
4821: DEC
4822: ST_TO_ADDR
4823: LD_INT 8
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4917
// for j := 1 to 8 do
4829: LD_ADDR_VAR 0 3
4833: PUSH
4834: DOUBLE
4835: LD_INT 1
4837: DEC
4838: ST_TO_ADDR
4839: LD_INT 8
4841: PUSH
4842: FOR_TO
4843: IFFALSE 4913
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4845: LD_EXP 8
4849: PUSH
4850: LD_VAR 0 2
4854: ARRAY
4855: PUSH
4856: LD_EXP 8
4860: PUSH
4861: LD_VAR 0 3
4865: ARRAY
4866: EQUAL
4867: IFFALSE 4891
// SetAttitude ( i , j , att_friend , true ) else
4869: LD_VAR 0 2
4873: PPUSH
4874: LD_VAR 0 3
4878: PPUSH
4879: LD_INT 1
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: CALL_OW 80
4889: GO 4911
// SetAttitude ( i , j , att_enemy , true ) ;
4891: LD_VAR 0 2
4895: PPUSH
4896: LD_VAR 0 3
4900: PPUSH
4901: LD_INT 2
4903: PPUSH
4904: LD_INT 1
4906: PPUSH
4907: CALL_OW 80
4911: GO 4842
4913: POP
4914: POP
4915: GO 4826
4917: POP
4918: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4919: LD_ADDR_OWVAR 71
4923: PUSH
4924: LD_EXP 9
4928: PUSH
4929: LD_OWVAR 2
4933: ARRAY
4934: ST_TO_ADDR
// if IAmSpec then
4935: CALL_OW 531
4939: IFFALSE 4980
// begin FogOff ( true ) ;
4941: LD_INT 1
4943: PPUSH
4944: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4948: LD_EXP 29
4952: PUSH
4953: LD_INT 1
4955: ARRAY
4956: PUSH
4957: LD_INT 2
4959: DIV
4960: PPUSH
4961: LD_EXP 29
4965: PUSH
4966: LD_INT 2
4968: ARRAY
4969: PUSH
4970: LD_INT 2
4972: DIV
4973: PPUSH
4974: CALL_OW 86
// end else
4978: GO 5026
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4980: LD_EXP 21
4984: PUSH
4985: LD_EXP 7
4989: PUSH
4990: LD_OWVAR 2
4994: ARRAY
4995: ARRAY
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: LD_EXP 21
5005: PUSH
5006: LD_EXP 7
5010: PUSH
5011: LD_OWVAR 2
5015: ARRAY
5016: ARRAY
5017: PUSH
5018: LD_INT 2
5020: ARRAY
5021: PPUSH
5022: CALL_OW 86
// end ; BeginBuildUp ;
5026: CALL 6027 0 0
// enable ( mpActive ) ;
5030: LD_INT 100
5032: ENABLE_MARKED
// enable ( mpGameType ) ;
5033: LD_EXP 3
5037: ENABLE_MARKED
// mpGameActive := true ;
5038: LD_ADDR_EXP 39
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// end ;
5046: LD_VAR 0 1
5050: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5051: LD_INT 0
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
// result := [ ] ;
5057: LD_ADDR_VAR 0 5
5061: PUSH
5062: EMPTY
5063: ST_TO_ADDR
// class := class_soldier ;
5064: LD_ADDR_VAR 0 8
5068: PUSH
5069: LD_INT 1
5071: ST_TO_ADDR
// uc_side := side ;
5072: LD_ADDR_OWVAR 20
5076: PUSH
5077: LD_VAR 0 1
5081: ST_TO_ADDR
// uc_nation := nation ;
5082: LD_ADDR_OWVAR 21
5086: PUSH
5087: LD_VAR 0 2
5091: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5092: LD_ADDR_OWVAR 26
5096: PUSH
5097: LD_OWVAR 19
5101: PUSH
5102: LD_VAR 0 1
5106: ARRAY
5107: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5108: LD_INT 1
5110: PPUSH
5111: LD_INT 2
5113: PPUSH
5114: CALL_OW 12
5118: PPUSH
5119: LD_VAR 0 8
5123: PPUSH
5124: LD_VAR 0 4
5128: PUSH
5129: LD_INT 2
5131: PLUS
5132: PPUSH
5133: CALL_OW 380
// hc_importance := 105 ;
5137: LD_ADDR_OWVAR 32
5141: PUSH
5142: LD_INT 105
5144: ST_TO_ADDR
// if Multiplayer then
5145: LD_OWVAR 4
5149: IFFALSE 5189
// begin hc_gallery := MULTIAVATARS ;
5151: LD_ADDR_OWVAR 33
5155: PUSH
5156: LD_STRING MULTIAVATARS
5158: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5159: LD_ADDR_OWVAR 34
5163: PUSH
5164: LD_VAR 0 1
5168: PPUSH
5169: CALL_OW 525
5173: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5174: LD_ADDR_OWVAR 27
5178: PUSH
5179: LD_VAR 0 1
5183: PPUSH
5184: CALL_OW 526
5188: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5189: LD_ADDR_VAR 0 5
5193: PUSH
5194: LD_VAR 0 5
5198: PPUSH
5199: CALL_OW 44
5203: PPUSH
5204: CALL 47083 0 2
5208: ST_TO_ADDR
// if mpTeamPreset then
5209: LD_LOC 1
5213: IFFALSE 5309
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5215: LD_LOC 1
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: PPUSH
5224: LD_VAR 0 5
5228: PUSH
5229: LD_VAR 0 5
5233: ARRAY
5234: PPUSH
5235: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5239: LD_VAR 0 5
5243: PUSH
5244: LD_VAR 0 5
5248: ARRAY
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: LD_LOC 1
5257: PUSH
5258: LD_INT 1
5260: ARRAY
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 260
5269: PPUSH
5270: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5274: LD_VAR 0 5
5278: PUSH
5279: LD_VAR 0 5
5283: ARRAY
5284: PPUSH
5285: LD_INT 2
5287: PPUSH
5288: LD_LOC 1
5292: PUSH
5293: LD_INT 1
5295: ARRAY
5296: PPUSH
5297: LD_INT 2
5299: PPUSH
5300: CALL_OW 260
5304: PPUSH
5305: CALL_OW 239
// end ; InitHc_All ( ) ;
5309: CALL_OW 584
// class := 2 ;
5313: LD_ADDR_VAR 0 8
5317: PUSH
5318: LD_INT 2
5320: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5321: LD_ADDR_VAR 0 6
5325: PUSH
5326: DOUBLE
5327: LD_INT 1
5329: DEC
5330: ST_TO_ADDR
5331: LD_VAR 0 3
5335: PUSH
5336: LD_INT 1
5338: MINUS
5339: PUSH
5340: FOR_TO
5341: IFFALSE 5525
// begin PrepareHuman ( false , class , skill ) ;
5343: LD_INT 0
5345: PPUSH
5346: LD_VAR 0 8
5350: PPUSH
5351: LD_VAR 0 4
5355: PPUSH
5356: CALL_OW 380
// un := CreateHuman ;
5360: LD_ADDR_VAR 0 7
5364: PUSH
5365: CALL_OW 44
5369: ST_TO_ADDR
// result := Join ( result , un ) ;
5370: LD_ADDR_VAR 0 5
5374: PUSH
5375: LD_VAR 0 5
5379: PPUSH
5380: LD_VAR 0 7
5384: PPUSH
5385: CALL 47083 0 2
5389: ST_TO_ADDR
// if mpTeamPreset then
5390: LD_LOC 1
5394: IFFALSE 5490
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5396: LD_LOC 1
5400: PUSH
5401: LD_VAR 0 6
5405: PUSH
5406: LD_INT 1
5408: PLUS
5409: ARRAY
5410: PPUSH
5411: LD_VAR 0 7
5415: PPUSH
5416: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5420: LD_VAR 0 7
5424: PPUSH
5425: LD_INT 1
5427: PPUSH
5428: LD_LOC 1
5432: PUSH
5433: LD_VAR 0 6
5437: PUSH
5438: LD_INT 1
5440: PLUS
5441: ARRAY
5442: PPUSH
5443: LD_INT 1
5445: PPUSH
5446: CALL_OW 260
5450: PPUSH
5451: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5455: LD_VAR 0 7
5459: PPUSH
5460: LD_INT 2
5462: PPUSH
5463: LD_LOC 1
5467: PUSH
5468: LD_VAR 0 6
5472: PUSH
5473: LD_INT 1
5475: PLUS
5476: ARRAY
5477: PPUSH
5478: LD_INT 2
5480: PPUSH
5481: CALL_OW 260
5485: PPUSH
5486: CALL_OW 239
// end ; class := Inc ( class ) ;
5490: LD_ADDR_VAR 0 8
5494: PUSH
5495: LD_VAR 0 8
5499: PPUSH
5500: CALL 48444 0 1
5504: ST_TO_ADDR
// if class = 5 then
5505: LD_VAR 0 8
5509: PUSH
5510: LD_INT 5
5512: EQUAL
5513: IFFALSE 5523
// class := 1 ;
5515: LD_ADDR_VAR 0 8
5519: PUSH
5520: LD_INT 1
5522: ST_TO_ADDR
// end ;
5523: GO 5340
5525: POP
5526: POP
// if not mpTeamPreset then
5527: LD_LOC 1
5531: NOT
5532: IFFALSE 5544
// mpTeamPreset := result ;
5534: LD_ADDR_LOC 1
5538: PUSH
5539: LD_VAR 0 5
5543: ST_TO_ADDR
// end ;
5544: LD_VAR 0 5
5548: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5549: LD_INT 0
5551: PPUSH
5552: PPUSH
// result := [ ] ;
5553: LD_ADDR_VAR 0 4
5557: PUSH
5558: EMPTY
5559: ST_TO_ADDR
// if not vehicles then
5560: LD_VAR 0 3
5564: NOT
5565: IFFALSE 5569
// exit ;
5567: GO 5728
// for i := 1 to vehicles [ nation ] do
5569: LD_ADDR_VAR 0 5
5573: PUSH
5574: DOUBLE
5575: LD_INT 1
5577: DEC
5578: ST_TO_ADDR
5579: LD_VAR 0 3
5583: PUSH
5584: LD_VAR 0 2
5588: ARRAY
5589: PUSH
5590: FOR_TO
5591: IFFALSE 5726
// begin uc_side := side ;
5593: LD_ADDR_OWVAR 20
5597: PUSH
5598: LD_VAR 0 1
5602: ST_TO_ADDR
// uc_nation := nation ;
5603: LD_ADDR_OWVAR 21
5607: PUSH
5608: LD_VAR 0 2
5612: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5613: LD_VAR 0 3
5617: PUSH
5618: LD_VAR 0 2
5622: ARRAY
5623: PUSH
5624: LD_VAR 0 5
5628: ARRAY
5629: PUSH
5630: LD_INT 1
5632: ARRAY
5633: PPUSH
5634: LD_VAR 0 3
5638: PUSH
5639: LD_VAR 0 2
5643: ARRAY
5644: PUSH
5645: LD_VAR 0 5
5649: ARRAY
5650: PUSH
5651: LD_INT 2
5653: ARRAY
5654: PPUSH
5655: LD_VAR 0 3
5659: PUSH
5660: LD_VAR 0 2
5664: ARRAY
5665: PUSH
5666: LD_VAR 0 5
5670: ARRAY
5671: PUSH
5672: LD_INT 3
5674: ARRAY
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_VAR 0 2
5685: ARRAY
5686: PUSH
5687: LD_VAR 0 5
5691: ARRAY
5692: PUSH
5693: LD_INT 4
5695: ARRAY
5696: PPUSH
5697: LD_INT 80
5699: PPUSH
5700: CALL 14212 0 5
// result := Join ( result , CreateVehicle ) ;
5704: LD_ADDR_VAR 0 4
5708: PUSH
5709: LD_VAR 0 4
5713: PPUSH
5714: CALL_OW 45
5718: PPUSH
5719: CALL 47083 0 2
5723: ST_TO_ADDR
// end ;
5724: GO 5590
5726: POP
5727: POP
// end ;
5728: LD_VAR 0 4
5732: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5733: LD_INT 0
5735: PPUSH
5736: PPUSH
// for i in mpBattleFlags do
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: LD_EXP 23
5746: PUSH
5747: FOR_IN
5748: IFFALSE 5825
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5750: LD_VAR 0 3
5754: PPUSH
5755: LD_INT 1
5757: PUSH
5758: LD_VAR 0 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 2
5769: PUSH
5770: LD_VAR 0 1
5774: PUSH
5775: LD_REAL  7.00000000000000E-0001
5778: MUL
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: LD_INT 3
5786: PUSH
5787: LD_VAR 0 1
5791: PUSH
5792: LD_REAL  4.00000000000000E-0001
5795: MUL
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_INT 20
5803: PUSH
5804: LD_VAR 0 1
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: PPUSH
5819: CALL_OW 423
5823: GO 5747
5825: POP
5826: POP
// end ;
5827: LD_VAR 0 2
5831: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5832: LD_INT 100
5834: IFFALSE 5929
5836: GO 5838
5838: DISABLE
5839: LD_INT 0
5841: PPUSH
5842: PPUSH
// begin if mpBattleFlag <= 0 then
5843: LD_EXP 22
5847: PUSH
5848: LD_INT 0
5850: LESSEQUAL
5851: IFFALSE 5855
// exit ;
5853: GO 5929
// strength := 100 ;
5855: LD_ADDR_VAR 0 2
5859: PUSH
5860: LD_INT 100
5862: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5863: LD_EXP 22
5867: PPUSH
5868: CALL_OW 67
// strength := Dec ( strength ) ;
5872: LD_ADDR_VAR 0 2
5876: PUSH
5877: LD_VAR 0 2
5881: PPUSH
5882: CALL 48466 0 1
5886: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL 5733 0 1
// until not strength ;
5896: LD_VAR 0 2
5900: NOT
5901: IFFALSE 5863
// for i in mpBattleFlags do
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_EXP 23
5912: PUSH
5913: FOR_IN
5914: IFFALSE 5927
// KillBattleFlag ( i ) ;
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 419
5925: GO 5913
5927: POP
5928: POP
// end ;
5929: PPOPN 2
5931: END
// every 0 0$1 marked mpActive do var side , tmp ;
5932: GO 5934
5934: DISABLE
5935: LD_INT 0
5937: PPUSH
5938: PPUSH
// begin if mpSibBomb <= 1 then
5939: LD_EXP 28
5943: PUSH
5944: LD_INT 1
5946: LESSEQUAL
5947: IFFALSE 5951
// exit ;
5949: GO 6024
// tmp := mpSibBomb ;
5951: LD_ADDR_VAR 0 2
5955: PUSH
5956: LD_EXP 28
5960: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5961: LD_INT 35
5963: PPUSH
5964: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5968: LD_ADDR_VAR 0 2
5972: PUSH
5973: LD_VAR 0 2
5977: PUSH
5978: LD_INT 35
5980: MINUS
5981: ST_TO_ADDR
// until not tmp ;
5982: LD_VAR 0 2
5986: NOT
5987: IFFALSE 5961
// for side := 1 to 8 do
5989: LD_ADDR_VAR 0 1
5993: PUSH
5994: DOUBLE
5995: LD_INT 1
5997: DEC
5998: ST_TO_ADDR
5999: LD_INT 8
6001: PUSH
6002: FOR_TO
6003: IFFALSE 6022
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6005: LD_INT 25
6007: PPUSH
6008: LD_VAR 0 1
6012: PPUSH
6013: LD_INT 1
6015: PPUSH
6016: CALL_OW 322
6020: GO 6002
6022: POP
6023: POP
// end ;
6024: PPOPN 2
6026: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6027: LD_INT 0
6029: PPUSH
6030: PPUSH
6031: PPUSH
// mpBuildUpTimeDelay := 0 ;
6032: LD_ADDR_EXP 42
6036: PUSH
6037: LD_INT 0
6039: ST_TO_ADDR
// if not mpBuildUpTime then
6040: LD_EXP 20
6044: NOT
6045: IFFALSE 6049
// exit ;
6047: GO 6232
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6049: LD_ADDR_EXP 42
6053: PUSH
6054: LD_INT 8400
6056: PUSH
6057: LD_INT 2100
6059: PUSH
6060: LD_EXP 20
6064: MUL
6065: PLUS
6066: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6067: LD_ADDR_EXP 43
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// for i := 1 to 8 do
6075: LD_ADDR_VAR 0 2
6079: PUSH
6080: DOUBLE
6081: LD_INT 1
6083: DEC
6084: ST_TO_ADDR
6085: LD_INT 8
6087: PUSH
6088: FOR_TO
6089: IFFALSE 6230
// if mpSidePositions [ i ] then
6091: LD_EXP 7
6095: PUSH
6096: LD_VAR 0 2
6100: ARRAY
6101: IFFALSE 6228
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6103: LD_EXP 19
6107: PUSH
6108: LD_EXP 7
6112: PUSH
6113: LD_VAR 0 2
6117: ARRAY
6118: ARRAY
6119: PPUSH
6120: LD_INT 5
6122: PPUSH
6123: CALL_OW 424
// for j := 1 to 8 do
6127: LD_ADDR_VAR 0 3
6131: PUSH
6132: DOUBLE
6133: LD_INT 1
6135: DEC
6136: ST_TO_ADDR
6137: LD_INT 8
6139: PUSH
6140: FOR_TO
6141: IFFALSE 6226
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6143: LD_EXP 7
6147: PUSH
6148: LD_VAR 0 3
6152: ARRAY
6153: PUSH
6154: LD_EXP 8
6158: PUSH
6159: LD_VAR 0 2
6163: ARRAY
6164: PUSH
6165: LD_EXP 8
6169: PUSH
6170: LD_VAR 0 3
6174: ARRAY
6175: NONEQUAL
6176: PUSH
6177: LD_EXP 11
6181: NOT
6182: PUSH
6183: LD_VAR 0 2
6187: PUSH
6188: LD_VAR 0 3
6192: NONEQUAL
6193: AND
6194: OR
6195: AND
6196: IFFALSE 6224
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_EXP 19
6207: PUSH
6208: LD_EXP 7
6212: PUSH
6213: LD_VAR 0 2
6217: ARRAY
6218: ARRAY
6219: PPUSH
6220: CALL_OW 333
6224: GO 6140
6226: POP
6227: POP
// end ;
6228: GO 6088
6230: POP
6231: POP
// end ;
6232: LD_VAR 0 1
6236: RET
// function EndBuildUp ; var i , j ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// mpBuildUpTimeActive := false ;
6242: LD_ADDR_EXP 43
6246: PUSH
6247: LD_INT 0
6249: ST_TO_ADDR
// for i := 1 to 8 do
6250: LD_ADDR_VAR 0 2
6254: PUSH
6255: DOUBLE
6256: LD_INT 1
6258: DEC
6259: ST_TO_ADDR
6260: LD_INT 8
6262: PUSH
6263: FOR_TO
6264: IFFALSE 6405
// if mpSidePositions [ i ] then
6266: LD_EXP 7
6270: PUSH
6271: LD_VAR 0 2
6275: ARRAY
6276: IFFALSE 6403
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6278: LD_EXP 19
6282: PUSH
6283: LD_EXP 7
6287: PUSH
6288: LD_VAR 0 2
6292: ARRAY
6293: ARRAY
6294: PPUSH
6295: LD_INT 0
6297: PPUSH
6298: CALL_OW 424
// for j := 1 to 8 do
6302: LD_ADDR_VAR 0 3
6306: PUSH
6307: DOUBLE
6308: LD_INT 1
6310: DEC
6311: ST_TO_ADDR
6312: LD_INT 8
6314: PUSH
6315: FOR_TO
6316: IFFALSE 6401
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6318: LD_EXP 7
6322: PUSH
6323: LD_VAR 0 3
6327: ARRAY
6328: PUSH
6329: LD_EXP 8
6333: PUSH
6334: LD_VAR 0 2
6338: ARRAY
6339: PUSH
6340: LD_EXP 8
6344: PUSH
6345: LD_VAR 0 3
6349: ARRAY
6350: NONEQUAL
6351: PUSH
6352: LD_EXP 11
6356: NOT
6357: PUSH
6358: LD_VAR 0 2
6362: PUSH
6363: LD_VAR 0 3
6367: NONEQUAL
6368: AND
6369: OR
6370: AND
6371: IFFALSE 6399
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6373: LD_VAR 0 3
6377: PPUSH
6378: LD_EXP 19
6382: PUSH
6383: LD_EXP 7
6387: PUSH
6388: LD_VAR 0 2
6392: ARRAY
6393: ARRAY
6394: PPUSH
6395: CALL_OW 334
6399: GO 6315
6401: POP
6402: POP
// end ;
6403: GO 6263
6405: POP
6406: POP
// end ;
6407: LD_VAR 0 1
6411: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6412: LD_EXP 43
6416: IFFALSE 6591
6418: GO 6420
6420: DISABLE
6421: LD_INT 0
6423: PPUSH
6424: PPUSH
// begin for i := 1 to 8 do
6425: LD_ADDR_VAR 0 1
6429: PUSH
6430: DOUBLE
6431: LD_INT 1
6433: DEC
6434: ST_TO_ADDR
6435: LD_INT 8
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6588
// if mpSidePositions [ i ] then
6441: LD_EXP 7
6445: PUSH
6446: LD_VAR 0 1
6450: ARRAY
6451: IFFALSE 6586
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6453: LD_ADDR_VAR 0 2
6457: PUSH
6458: LD_EXP 19
6462: PUSH
6463: LD_EXP 7
6467: PUSH
6468: LD_VAR 0 1
6472: ARRAY
6473: ARRAY
6474: PPUSH
6475: LD_INT 2
6477: PUSH
6478: LD_INT 21
6480: PUSH
6481: LD_INT 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 22
6505: PUSH
6506: LD_OWVAR 2
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PPUSH
6519: CALL_OW 70
6523: PUSH
6524: FOR_IN
6525: IFFALSE 6584
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6527: LD_EXP 8
6531: PUSH
6532: LD_VAR 0 1
6536: ARRAY
6537: PUSH
6538: LD_EXP 8
6542: PUSH
6543: LD_OWVAR 2
6547: ARRAY
6548: NONEQUAL
6549: PUSH
6550: LD_EXP 11
6554: NOT
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: LD_OWVAR 2
6565: NONEQUAL
6566: AND
6567: OR
6568: IFFALSE 6582
// ComMoveToArea ( un , BuildUpEscape ) ;
6570: LD_VAR 0 2
6574: PPUSH
6575: LD_INT 13
6577: PPUSH
6578: CALL_OW 113
6582: GO 6524
6584: POP
6585: POP
6586: GO 6438
6588: POP
6589: POP
// enable ;
6590: ENABLE
// end ;
6591: PPOPN 2
6593: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6594: LD_EXP 20
6598: IFFALSE 6648
6600: GO 6602
6602: DISABLE
6603: LD_INT 0
6605: PPUSH
// begin tmp := mpBuildUpTime ;
6606: LD_ADDR_VAR 0 1
6610: PUSH
6611: LD_EXP 20
6615: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6616: LD_INT 35
6618: PPUSH
6619: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6623: LD_ADDR_VAR 0 1
6627: PUSH
6628: LD_VAR 0 1
6632: PUSH
6633: LD_INT 35
6635: MINUS
6636: ST_TO_ADDR
// until not tmp ;
6637: LD_VAR 0 1
6641: NOT
6642: IFFALSE 6616
// EndBuildUp ;
6644: CALL 6237 0 0
// end ;
6648: PPOPN 1
6650: END
// every 0 0$1 trigger mpActive marked mpWin do
6651: LD_INT 100
6653: IFFALSE 6687
6655: GO 6657
6657: DISABLE
// begin if IAmServer then
6658: CALL_OW 518
6662: IFFALSE 6671
// wait ( 0 0$3 ) ;
6664: LD_INT 105
6666: PPUSH
6667: CALL_OW 67
// if Multiplayer then
6671: LD_OWVAR 4
6675: IFFALSE 6683
// YouWinInMultiplayer else
6677: CALL_OW 106
6681: GO 6687
// YouWin ;
6683: CALL_OW 103
// end ;
6687: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6688: LD_INT 0
6690: PPUSH
// result := false ;
6691: LD_ADDR_VAR 0 3
6695: PUSH
6696: LD_INT 0
6698: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6699: LD_VAR 0 1
6703: PUSH
6704: LD_INT 1
6706: DOUBLE
6707: EQUAL
6708: IFTRUE 6718
6710: LD_INT 5
6712: DOUBLE
6713: EQUAL
6714: IFTRUE 6718
6716: GO 6791
6718: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_INT 22
6726: PUSH
6727: LD_VAR 0 2
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 2
6738: PUSH
6739: LD_INT 21
6741: PUSH
6742: LD_INT 1
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 33
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 33
6761: PUSH
6762: LD_INT 5
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PPUSH
6779: CALL_OW 69
6783: PPUSH
6784: CALL 11474 0 1
6788: ST_TO_ADDR
// end ; GameTypeSurvival :
6789: GO 7026
6791: LD_INT 2
6793: DOUBLE
6794: EQUAL
6795: IFTRUE 6799
6797: GO 6927
6799: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6800: LD_ADDR_VAR 0 3
6804: PUSH
6805: LD_INT 22
6807: PUSH
6808: LD_VAR 0 2
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 2
6819: PUSH
6820: LD_INT 30
6822: PUSH
6823: LD_INT 0
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 30
6832: PUSH
6833: LD_INT 1
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL_OW 69
6853: PPUSH
6854: CALL 11474 0 1
6858: PUSH
6859: LD_INT 22
6861: PUSH
6862: LD_VAR 0 2
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 2
6873: PUSH
6874: LD_INT 21
6876: PUSH
6877: LD_INT 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 33
6886: PUSH
6887: LD_INT 3
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 33
6896: PUSH
6897: LD_INT 5
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PPUSH
6914: CALL_OW 69
6918: PPUSH
6919: CALL 11474 0 1
6923: AND
6924: ST_TO_ADDR
// end ; GameTypeKing :
6925: GO 7026
6927: LD_INT 3
6929: DOUBLE
6930: EQUAL
6931: IFTRUE 6935
6933: GO 7025
6935: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6936: LD_ADDR_VAR 0 3
6940: PUSH
6941: LD_INT 22
6943: PUSH
6944: LD_VAR 0 2
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 2
6955: PUSH
6956: LD_INT 21
6958: PUSH
6959: LD_INT 1
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 33
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 33
6978: PUSH
6979: LD_INT 5
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PPUSH
6996: CALL_OW 69
7000: PPUSH
7001: CALL 11474 0 1
7005: PUSH
7006: LD_VAR 0 2
7010: PPUSH
7011: CALL 58719 0 1
7015: PUSH
7016: LD_EXP 35
7020: LESS
7021: AND
7022: ST_TO_ADDR
// end ; end ;
7023: GO 7026
7025: POP
// end ;
7026: LD_VAR 0 3
7030: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7031: LD_INT 100
7033: IFFALSE 7255
7035: GO 7037
7037: DISABLE
7038: LD_INT 0
7040: PPUSH
7041: PPUSH
// begin if Multiplayer then
7042: LD_OWVAR 4
7046: IFFALSE 7054
// SetPlayerSpectator ( ) else
7048: CALL_OW 572
7052: GO 7063
// FogOff ( your_side ) ;
7054: LD_OWVAR 2
7058: PPUSH
7059: CALL_OW 344
// repeat gameIsOn := false ;
7063: LD_ADDR_VAR 0 1
7067: PUSH
7068: LD_INT 0
7070: ST_TO_ADDR
// for i := 1 to 8 do
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: DOUBLE
7077: LD_INT 1
7079: DEC
7080: ST_TO_ADDR
7081: LD_INT 8
7083: PUSH
7084: FOR_TO
7085: IFFALSE 7207
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7087: LD_EXP 7
7091: PUSH
7092: LD_VAR 0 2
7096: ARRAY
7097: PUSH
7098: LD_VAR 0 2
7102: PPUSH
7103: CALL_OW 108
7107: AND
7108: PUSH
7109: LD_VAR 0 2
7113: PUSH
7114: LD_OWVAR 2
7118: NONEQUAL
7119: AND
7120: IFFALSE 7205
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7122: LD_EXP 8
7126: PUSH
7127: LD_VAR 0 2
7131: ARRAY
7132: NOT
7133: PUSH
7134: LD_EXP 8
7138: PUSH
7139: LD_VAR 0 2
7143: ARRAY
7144: PUSH
7145: LD_EXP 8
7149: PUSH
7150: LD_OWVAR 2
7154: ARRAY
7155: NONEQUAL
7156: PUSH
7157: LD_OWVAR 2
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: CALL_OW 81
7171: PUSH
7172: LD_INT 1
7174: NONEQUAL
7175: AND
7176: OR
7177: IFFALSE 7205
// if HasPowerByGameType ( mpGameType , i ) then
7179: LD_EXP 3
7183: PPUSH
7184: LD_VAR 0 2
7188: PPUSH
7189: CALL 6688 0 2
7193: IFFALSE 7205
// begin gameIsOn := true ;
7195: LD_ADDR_VAR 0 1
7199: PUSH
7200: LD_INT 1
7202: ST_TO_ADDR
// break ;
7203: GO 7207
// end ;
7205: GO 7084
7207: POP
7208: POP
// wait ( 100 ) ;
7209: LD_INT 100
7211: PPUSH
7212: CALL_OW 67
// until not gameIsOn ;
7216: LD_VAR 0 1
7220: NOT
7221: IFFALSE 7063
// if IAmServer then
7223: CALL_OW 518
7227: IFFALSE 7236
// wait ( 0 0$3 ) ;
7229: LD_INT 105
7231: PPUSH
7232: CALL_OW 67
// if Multiplayer then
7236: LD_OWVAR 4
7240: IFFALSE 7248
// YouLostInMultiplayer else
7242: CALL_OW 107
7246: GO 7255
// YouLost (  ) ;
7248: LD_STRING 
7250: PPUSH
7251: CALL_OW 104
// end ;
7255: PPOPN 2
7257: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7258: LD_EXP 33
7262: IFFALSE 7638
7264: GO 7266
7266: DISABLE
7267: LD_INT 0
7269: PPUSH
7270: PPUSH
7271: PPUSH
7272: PPUSH
7273: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7274: LD_ADDR_VAR 0 5
7278: PUSH
7279: LD_INT 1
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: LD_INT 3
7287: PUSH
7288: LD_INT 4
7290: PUSH
7291: LD_INT 5
7293: PUSH
7294: LD_INT 6
7296: PUSH
7297: LD_INT 7
7299: PUSH
7300: LD_INT 8
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7313: LD_INT 350
7315: PPUSH
7316: CALL_OW 67
// for i := 1 to 8 do
7320: LD_ADDR_VAR 0 1
7324: PUSH
7325: DOUBLE
7326: LD_INT 1
7328: DEC
7329: ST_TO_ADDR
7330: LD_INT 8
7332: PUSH
7333: FOR_TO
7334: IFFALSE 7608
// begin j := sides [ i ] ;
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_VAR 0 5
7345: PUSH
7346: LD_VAR 0 1
7350: ARRAY
7351: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7352: LD_EXP 40
7356: PUSH
7357: LD_VAR 0 2
7361: ARRAY
7362: PPUSH
7363: CALL 11474 0 1
7367: PUSH
7368: LD_VAR 0 2
7372: PPUSH
7373: CALL_OW 108
7377: AND
7378: PUSH
7379: LD_EXP 3
7383: PPUSH
7384: LD_VAR 0 2
7388: PPUSH
7389: CALL 6688 0 2
7393: AND
7394: IFFALSE 7606
// begin wait ( mpRespawn div 3 ) ;
7396: LD_EXP 33
7400: PUSH
7401: LD_INT 3
7403: DIV
7404: PPUSH
7405: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_VAR 0 2
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 50
7428: PUSH
7429: EMPTY
7430: LIST
7431: PUSH
7432: LD_INT 2
7434: PUSH
7435: LD_INT 30
7437: PUSH
7438: LD_INT 0
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 30
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: PPUSH
7465: CALL_OW 69
7469: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7470: LD_VAR 0 3
7474: NOT
7475: PUSH
7476: LD_VAR 0 2
7480: PPUSH
7481: CALL_OW 108
7485: NOT
7486: OR
7487: PUSH
7488: LD_EXP 3
7492: PPUSH
7493: LD_VAR 0 2
7497: PPUSH
7498: CALL 6688 0 2
7502: NOT
7503: OR
7504: IFFALSE 7508
// continue ;
7506: GO 7333
// spawn := tmp [ 1 ] ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_VAR 0 3
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7522: LD_EXP 40
7526: PUSH
7527: LD_VAR 0 2
7531: ARRAY
7532: PUSH
7533: LD_INT 1
7535: ARRAY
7536: PPUSH
7537: LD_VAR 0 4
7541: PPUSH
7542: CALL_OW 250
7546: PPUSH
7547: LD_VAR 0 4
7551: PPUSH
7552: CALL_OW 251
7556: PPUSH
7557: LD_INT 32
7559: PPUSH
7560: LD_INT 1
7562: PPUSH
7563: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7567: LD_ADDR_EXP 40
7571: PUSH
7572: LD_EXP 40
7576: PPUSH
7577: LD_VAR 0 2
7581: PPUSH
7582: LD_EXP 40
7586: PUSH
7587: LD_VAR 0 2
7591: ARRAY
7592: PPUSH
7593: LD_INT 1
7595: PPUSH
7596: CALL_OW 3
7600: PPUSH
7601: CALL_OW 1
7605: ST_TO_ADDR
// end ; end ;
7606: GO 7333
7608: POP
7609: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7610: LD_ADDR_VAR 0 5
7614: PUSH
7615: LD_VAR 0 5
7619: PPUSH
7620: LD_INT 1
7622: PPUSH
7623: LD_INT 8
7625: PPUSH
7626: LD_INT 1
7628: PPUSH
7629: CALL 13752 0 4
7633: ST_TO_ADDR
// until false ;
7634: LD_INT 0
7636: IFFALSE 7313
// end ;
7638: PPOPN 5
7640: END
// every 0 0$1 marked mpActive do
7641: GO 7643
7643: DISABLE
// begin enable ;
7644: ENABLE
// if not mpDisplayStrings then
7645: LD_EXP 38
7649: NOT
7650: IFFALSE 7661
// begin display_strings := [ ] ;
7652: LD_ADDR_OWVAR 47
7656: PUSH
7657: EMPTY
7658: ST_TO_ADDR
// exit ;
7659: GO 7671
// end ; display_strings := mpDisplayStrings ;
7661: LD_ADDR_OWVAR 47
7665: PUSH
7666: LD_EXP 38
7670: ST_TO_ADDR
// end ; end_of_file
7671: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7672: LD_INT 0
7674: PPUSH
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
7680: PPUSH
7681: PPUSH
7682: PPUSH
// if GetType ( un ) = unit_vehicle then
7683: LD_VAR 0 1
7687: PPUSH
7688: CALL_OW 247
7692: PUSH
7693: LD_INT 2
7695: EQUAL
7696: IFFALSE 7700
// exit ;
7698: GO 8332
// side := GetSide ( un ) ;
7700: LD_ADDR_VAR 0 9
7704: PUSH
7705: LD_VAR 0 1
7709: PPUSH
7710: CALL_OW 255
7714: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7715: LD_EXP 3
7719: PUSH
7720: LD_INT 2
7722: EQUAL
7723: IFFALSE 7799
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7725: LD_VAR 0 1
7729: PPUSH
7730: CALL_OW 266
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: LD_INT 1
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: IN
7745: IFFALSE 7799
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7747: LD_ADDR_VAR 0 3
7751: PUSH
7752: LD_INT 22
7754: PUSH
7755: LD_VAR 0 9
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PUSH
7783: FOR_IN
7784: IFFALSE 7797
// KillUnit ( i ) ;
7786: LD_VAR 0 3
7790: PPUSH
7791: CALL_OW 66
7795: GO 7783
7797: POP
7798: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7799: LD_VAR 0 1
7803: PPUSH
7804: CALL_OW 257
7808: PUSH
7809: LD_INT 12
7811: PUSH
7812: LD_INT 17
7814: PUSH
7815: LD_INT 15
7817: PUSH
7818: LD_INT 16
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: IN
7827: PUSH
7828: LD_VAR 0 1
7832: PPUSH
7833: CALL_OW 263
7837: PUSH
7838: LD_INT 5
7840: EQUAL
7841: OR
7842: IFFALSE 8061
// begin tag := 0 ;
7844: LD_ADDR_VAR 0 5
7848: PUSH
7849: LD_INT 0
7851: ST_TO_ADDR
// for i := 1 to 8 do
7852: LD_ADDR_VAR 0 3
7856: PUSH
7857: DOUBLE
7858: LD_INT 1
7860: DEC
7861: ST_TO_ADDR
7862: LD_INT 8
7864: PUSH
7865: FOR_TO
7866: IFFALSE 7900
// if un in mpApePosIndex [ i ] then
7868: LD_VAR 0 1
7872: PUSH
7873: LD_EXP 32
7877: PUSH
7878: LD_VAR 0 3
7882: ARRAY
7883: IN
7884: IFFALSE 7898
// begin tag := i ;
7886: LD_ADDR_VAR 0 5
7890: PUSH
7891: LD_VAR 0 3
7895: ST_TO_ADDR
// break ;
7896: GO 7900
// end ;
7898: GO 7865
7900: POP
7901: POP
// if not tag then
7902: LD_VAR 0 5
7906: NOT
7907: IFFALSE 7911
// exit ;
7909: GO 8332
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7911: LD_ADDR_VAR 0 7
7915: PUSH
7916: LD_EXP 31
7920: PUSH
7921: LD_EXP 7
7925: PUSH
7926: LD_VAR 0 5
7930: ARRAY
7931: ARRAY
7932: ST_TO_ADDR
// if not area then
7933: LD_VAR 0 7
7937: NOT
7938: IFFALSE 7942
// exit ;
7940: GO 8332
// wait ( 4 4$00 ) ;
7942: LD_INT 8400
7944: PPUSH
7945: CALL_OW 67
// repeat wait ( 10 ) ;
7949: LD_INT 10
7951: PPUSH
7952: CALL_OW 67
// until not mpBlockRespThread ;
7956: LD_EXP 41
7960: NOT
7961: IFFALSE 7949
// mpBlockRespThread := true ;
7963: LD_ADDR_EXP 41
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7971: LD_INT 0
7973: PPUSH
7974: CALL 43331 0 1
// ape := CreateHuman ;
7978: LD_ADDR_VAR 0 4
7982: PUSH
7983: CALL_OW 44
7987: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
7988: LD_ADDR_EXP 32
7992: PUSH
7993: LD_EXP 32
7997: PPUSH
7998: LD_VAR 0 5
8002: PPUSH
8003: LD_EXP 32
8007: PUSH
8008: LD_VAR 0 5
8012: ARRAY
8013: PPUSH
8014: LD_VAR 0 4
8018: PPUSH
8019: CALL 47083 0 2
8023: PPUSH
8024: CALL_OW 1
8028: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8029: LD_VAR 0 4
8033: PPUSH
8034: LD_VAR 0 7
8038: PPUSH
8039: LD_INT 0
8041: PPUSH
8042: CALL_OW 49
// wait ( 10 ) ;
8046: LD_INT 10
8048: PPUSH
8049: CALL_OW 67
// mpBlockRespThread := false ;
8053: LD_ADDR_EXP 41
8057: PUSH
8058: LD_INT 0
8060: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8061: LD_VAR 0 1
8065: PPUSH
8066: CALL_OW 247
8070: PUSH
8071: LD_INT 1
8073: EQUAL
8074: PUSH
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 248
8084: PUSH
8085: LD_INT 0
8087: GREATER
8088: AND
8089: IFFALSE 8332
// begin if not mpRespawn then
8091: LD_EXP 33
8095: NOT
8096: IFFALSE 8100
// exit ;
8098: GO 8332
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8100: LD_VAR 0 9
8104: PPUSH
8105: CALL_OW 108
8109: NOT
8110: PUSH
8111: LD_EXP 3
8115: PPUSH
8116: LD_VAR 0 9
8120: PPUSH
8121: CALL 6688 0 2
8125: NOT
8126: AND
8127: IFFALSE 8131
// exit ;
8129: GO 8332
// side := GetSide ( un ) ;
8131: LD_ADDR_VAR 0 9
8135: PUSH
8136: LD_VAR 0 1
8140: PPUSH
8141: CALL_OW 255
8145: ST_TO_ADDR
// nation := GetNation ( un ) ;
8146: LD_ADDR_VAR 0 8
8150: PUSH
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 248
8160: ST_TO_ADDR
// class := GetClass ( un ) ;
8161: LD_ADDR_VAR 0 6
8165: PUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 257
8175: ST_TO_ADDR
// if class > 4 then
8176: LD_VAR 0 6
8180: PUSH
8181: LD_INT 4
8183: GREATER
8184: IFFALSE 8194
// class := 1 ;
8186: LD_ADDR_VAR 0 6
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// repeat wait ( 10 ) ;
8194: LD_INT 10
8196: PPUSH
8197: CALL_OW 67
// until not mpBlockRespThread ;
8201: LD_EXP 41
8205: NOT
8206: IFFALSE 8194
// mpBlockRespThread := true ;
8208: LD_ADDR_EXP 41
8212: PUSH
8213: LD_INT 1
8215: ST_TO_ADDR
// uc_side := side ;
8216: LD_ADDR_OWVAR 20
8220: PUSH
8221: LD_VAR 0 9
8225: ST_TO_ADDR
// uc_nation := nation ;
8226: LD_ADDR_OWVAR 21
8230: PUSH
8231: LD_VAR 0 8
8235: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8236: LD_INT 0
8238: PPUSH
8239: LD_VAR 0 6
8243: PPUSH
8244: LD_INT 2
8246: PPUSH
8247: CALL_OW 380
// un := CreateHuman ;
8251: LD_ADDR_VAR 0 1
8255: PUSH
8256: CALL_OW 44
8260: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8261: LD_ADDR_EXP 40
8265: PUSH
8266: LD_EXP 40
8270: PPUSH
8271: LD_VAR 0 9
8275: PPUSH
8276: LD_EXP 40
8280: PUSH
8281: LD_VAR 0 9
8285: ARRAY
8286: PPUSH
8287: LD_EXP 40
8291: PUSH
8292: LD_VAR 0 9
8296: ARRAY
8297: PUSH
8298: LD_INT 1
8300: PLUS
8301: PPUSH
8302: LD_VAR 0 1
8306: PPUSH
8307: CALL_OW 1
8311: PPUSH
8312: CALL_OW 1
8316: ST_TO_ADDR
// wait ( 10 ) ;
8317: LD_INT 10
8319: PPUSH
8320: CALL_OW 67
// mpBlockRespThread := false ;
8324: LD_ADDR_EXP 41
8328: PUSH
8329: LD_INT 0
8331: ST_TO_ADDR
// end ; end ;
8332: LD_VAR 0 2
8336: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8337: LD_INT 0
8339: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 266
8349: PUSH
8350: LD_INT 0
8352: PUSH
8353: LD_INT 1
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: IN
8360: IFFALSE 8385
// SetBName ( building , @ & GetSide ( building ) ) ;
8362: LD_VAR 0 1
8366: PPUSH
8367: LD_STRING @
8369: PUSH
8370: LD_VAR 0 1
8374: PPUSH
8375: CALL_OW 255
8379: STR
8380: PPUSH
8381: CALL_OW 500
// end ;
8385: LD_VAR 0 2
8389: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8390: LD_INT 0
8392: PPUSH
8393: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8394: LD_EXP 3
8398: PUSH
8399: LD_INT 2
8401: EQUAL
8402: PUSH
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 266
8412: PUSH
8413: LD_INT 0
8415: PUSH
8416: LD_INT 1
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: IN
8423: AND
8424: IFFALSE 8489
// begin KillUnit ( building ) ;
8426: LD_VAR 0 1
8430: PPUSH
8431: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8435: LD_ADDR_VAR 0 5
8439: PUSH
8440: LD_INT 22
8442: PUSH
8443: LD_VAR 0 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PPUSH
8466: CALL_OW 69
8470: PUSH
8471: FOR_IN
8472: IFFALSE 8485
// KillUnit ( i ) ;
8474: LD_VAR 0 5
8478: PPUSH
8479: CALL_OW 66
8483: GO 8471
8485: POP
8486: POP
// exit ;
8487: GO 8534
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL_OW 266
8498: PUSH
8499: LD_INT 0
8501: PUSH
8502: LD_INT 1
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: IN
8509: IFFALSE 8534
// SetBName ( building , @ & GetSide ( building ) ) ;
8511: LD_VAR 0 1
8515: PPUSH
8516: LD_STRING @
8518: PUSH
8519: LD_VAR 0 1
8523: PPUSH
8524: CALL_OW 255
8528: STR
8529: PPUSH
8530: CALL_OW 500
// end ; end_of_file
8534: LD_VAR 0 4
8538: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8539: LD_EXP 39
8543: PUSH
8544: CALL 8749 0 0
8548: AND
8549: PUSH
8550: LD_OWVAR 4
8554: AND
8555: IFFALSE 8746
8557: GO 8559
8559: DISABLE
8560: LD_INT 0
8562: PPUSH
8563: PPUSH
// begin canWin := false ;
8564: LD_ADDR_VAR 0 2
8568: PUSH
8569: LD_INT 0
8571: ST_TO_ADDR
// if not HasPower ( your_side ) then
8572: LD_OWVAR 2
8576: PPUSH
8577: CALL 8789 0 1
8581: NOT
8582: IFFALSE 8593
// begin Multiplayer_Loose_Message ;
8584: CALL_OW 521
// enable ( mpLose ) ;
8588: LD_INT 102
8590: ENABLE_MARKED
// end else
8591: GO 8746
// begin canWin := true ;
8593: LD_ADDR_VAR 0 2
8597: PUSH
8598: LD_INT 1
8600: ST_TO_ADDR
// for i := 1 to 8 do
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: DOUBLE
8607: LD_INT 1
8609: DEC
8610: ST_TO_ADDR
8611: LD_INT 8
8613: PUSH
8614: FOR_TO
8615: IFFALSE 8732
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8617: LD_EXP 7
8621: PUSH
8622: LD_VAR 0 1
8626: ARRAY
8627: PUSH
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 108
8637: AND
8638: PUSH
8639: LD_VAR 0 1
8643: PUSH
8644: LD_OWVAR 2
8648: NONEQUAL
8649: AND
8650: IFFALSE 8730
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8652: LD_EXP 8
8656: PUSH
8657: LD_VAR 0 1
8661: ARRAY
8662: NOT
8663: PUSH
8664: LD_EXP 8
8668: PUSH
8669: LD_VAR 0 1
8673: ARRAY
8674: PUSH
8675: LD_EXP 8
8679: PUSH
8680: LD_OWVAR 2
8684: ARRAY
8685: NONEQUAL
8686: PUSH
8687: LD_OWVAR 2
8691: PPUSH
8692: LD_VAR 0 1
8696: PPUSH
8697: CALL_OW 81
8701: PUSH
8702: LD_INT 1
8704: NONEQUAL
8705: AND
8706: OR
8707: IFFALSE 8730
// if HasPower ( i ) then
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL 8789 0 1
8718: IFFALSE 8730
// begin canWin := false ;
8720: LD_ADDR_VAR 0 2
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// break ;
8728: GO 8732
// end ;
8730: GO 8614
8732: POP
8733: POP
// if canWin then
8734: LD_VAR 0 2
8738: IFFALSE 8745
// enable ( mpWin ) else
8740: LD_INT 101
8742: ENABLE_MARKED
8743: GO 8746
// enable ;
8745: ENABLE
// end ; end ;
8746: PPOPN 2
8748: END
// function CanWinLoose ; begin
8749: LD_INT 0
8751: PPUSH
// result := true ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_INT 1
8759: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8760: CALL_OW 531
8764: PUSH
8765: CALL_OW 519
8769: PUSH
8770: LD_INT 1
8772: GREATER
8773: AND
8774: IFFALSE 8784
// result := false ;
8776: LD_ADDR_VAR 0 1
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// end ;
8784: LD_VAR 0 1
8788: RET
// function HasPower ( i ) ; begin
8789: LD_INT 0
8791: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8792: LD_ADDR_VAR 0 2
8796: PUSH
8797: LD_INT 22
8799: PUSH
8800: LD_VAR 0 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 2
8811: PUSH
8812: LD_INT 21
8814: PUSH
8815: LD_INT 1
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 33
8824: PUSH
8825: LD_INT 3
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 33
8834: PUSH
8835: LD_INT 5
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PPUSH
8852: CALL_OW 69
8856: ST_TO_ADDR
// end ; end_of_file
8857: LD_VAR 0 2
8861: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8862: LD_EXP 39
8866: IFFALSE 8909
8868: GO 8870
8870: DISABLE
8871: LD_INT 0
8873: PPUSH
// begin for i := 1 to 8 do
8874: LD_ADDR_VAR 0 1
8878: PUSH
8879: DOUBLE
8880: LD_INT 1
8882: DEC
8883: ST_TO_ADDR
8884: LD_INT 8
8886: PUSH
8887: FOR_TO
8888: IFFALSE 8907
// SetRestrict ( b_depot , i , state_disabled ) ;
8890: LD_INT 0
8892: PPUSH
8893: LD_VAR 0 1
8897: PPUSH
8898: LD_INT 0
8900: PPUSH
8901: CALL_OW 324
8905: GO 8887
8907: POP
8908: POP
// end ;
8909: PPOPN 1
8911: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8912: LD_EXP 39
8916: PUSH
8917: CALL 9122 0 0
8921: AND
8922: PUSH
8923: LD_OWVAR 4
8927: AND
8928: IFFALSE 9119
8930: GO 8932
8932: DISABLE
8933: LD_INT 0
8935: PPUSH
8936: PPUSH
// begin canWin := false ;
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 0
8944: ST_TO_ADDR
// if not HasPower ( your_side ) then
8945: LD_OWVAR 2
8949: PPUSH
8950: CALL 9162 0 1
8954: NOT
8955: IFFALSE 8966
// begin Multiplayer_Loose_Message ;
8957: CALL_OW 521
// enable ( mpLose ) ;
8961: LD_INT 102
8963: ENABLE_MARKED
// end else
8964: GO 9119
// begin canWin := true ;
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: LD_INT 1
8973: ST_TO_ADDR
// for i := 1 to 8 do
8974: LD_ADDR_VAR 0 1
8978: PUSH
8979: DOUBLE
8980: LD_INT 1
8982: DEC
8983: ST_TO_ADDR
8984: LD_INT 8
8986: PUSH
8987: FOR_TO
8988: IFFALSE 9105
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8990: LD_EXP 7
8994: PUSH
8995: LD_VAR 0 1
8999: ARRAY
9000: PUSH
9001: LD_VAR 0 1
9005: PPUSH
9006: CALL_OW 108
9010: AND
9011: PUSH
9012: LD_VAR 0 1
9016: PUSH
9017: LD_OWVAR 2
9021: NONEQUAL
9022: AND
9023: IFFALSE 9103
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9025: LD_EXP 8
9029: PUSH
9030: LD_VAR 0 1
9034: ARRAY
9035: NOT
9036: PUSH
9037: LD_EXP 8
9041: PUSH
9042: LD_VAR 0 1
9046: ARRAY
9047: PUSH
9048: LD_EXP 8
9052: PUSH
9053: LD_OWVAR 2
9057: ARRAY
9058: NONEQUAL
9059: PUSH
9060: LD_OWVAR 2
9064: PPUSH
9065: LD_VAR 0 1
9069: PPUSH
9070: CALL_OW 81
9074: PUSH
9075: LD_INT 1
9077: NONEQUAL
9078: AND
9079: OR
9080: IFFALSE 9103
// if HasPower ( i ) then
9082: LD_VAR 0 1
9086: PPUSH
9087: CALL 9162 0 1
9091: IFFALSE 9103
// begin canWin := false ;
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: LD_INT 0
9100: ST_TO_ADDR
// break ;
9101: GO 9105
// end ;
9103: GO 8987
9105: POP
9106: POP
// if canWin then
9107: LD_VAR 0 2
9111: IFFALSE 9118
// enable ( mpWin ) else
9113: LD_INT 101
9115: ENABLE_MARKED
9116: GO 9119
// enable ;
9118: ENABLE
// end ; end ;
9119: PPOPN 2
9121: END
// function CanWinLoose ; begin
9122: LD_INT 0
9124: PPUSH
// result := true ;
9125: LD_ADDR_VAR 0 1
9129: PUSH
9130: LD_INT 1
9132: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9133: CALL_OW 531
9137: PUSH
9138: CALL_OW 519
9142: PUSH
9143: LD_INT 1
9145: GREATER
9146: AND
9147: IFFALSE 9157
// result := false ;
9149: LD_ADDR_VAR 0 1
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// end ;
9157: LD_VAR 0 1
9161: RET
// function HasPower ( i ) ; begin
9162: LD_INT 0
9164: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9165: LD_INT 22
9167: PUSH
9168: LD_VAR 0 1
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 2
9179: PUSH
9180: LD_INT 30
9182: PUSH
9183: LD_INT 0
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: LD_INT 30
9192: PUSH
9193: LD_INT 1
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PPUSH
9209: CALL_OW 69
9213: NOT
9214: IFFALSE 9218
// exit ;
9216: GO 9283
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9218: LD_ADDR_VAR 0 2
9222: PUSH
9223: LD_INT 22
9225: PUSH
9226: LD_VAR 0 1
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: LD_INT 21
9240: PUSH
9241: LD_INT 1
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: LD_INT 33
9250: PUSH
9251: LD_INT 3
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 33
9260: PUSH
9261: LD_INT 5
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: ST_TO_ADDR
// end ; end_of_file
9283: LD_VAR 0 2
9287: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9288: LD_INT 0
9290: PPUSH
9291: PPUSH
// if exist_mode then
9292: LD_VAR 0 2
9296: IFFALSE 9342
// begin unit := CreateCharacter ( prefix & ident ) ;
9298: LD_ADDR_VAR 0 5
9302: PUSH
9303: LD_VAR 0 3
9307: PUSH
9308: LD_VAR 0 1
9312: STR
9313: PPUSH
9314: CALL_OW 34
9318: ST_TO_ADDR
// if unit then
9319: LD_VAR 0 5
9323: IFFALSE 9340
// DeleteCharacters ( prefix & ident ) ;
9325: LD_VAR 0 3
9329: PUSH
9330: LD_VAR 0 1
9334: STR
9335: PPUSH
9336: CALL_OW 40
// end else
9340: GO 9357
// unit := NewCharacter ( ident ) ;
9342: LD_ADDR_VAR 0 5
9346: PUSH
9347: LD_VAR 0 1
9351: PPUSH
9352: CALL_OW 25
9356: ST_TO_ADDR
// result := unit ;
9357: LD_ADDR_VAR 0 4
9361: PUSH
9362: LD_VAR 0 5
9366: ST_TO_ADDR
// end ;
9367: LD_VAR 0 4
9371: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9372: LD_INT 0
9374: PPUSH
9375: PPUSH
// if exist_mode then
9376: LD_VAR 0 2
9380: IFFALSE 9405
// unit := CreateCharacter ( prefix & ident ) else
9382: LD_ADDR_VAR 0 5
9386: PUSH
9387: LD_VAR 0 3
9391: PUSH
9392: LD_VAR 0 1
9396: STR
9397: PPUSH
9398: CALL_OW 34
9402: ST_TO_ADDR
9403: GO 9420
// unit := NewCharacter ( ident ) ;
9405: LD_ADDR_VAR 0 5
9409: PUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 25
9419: ST_TO_ADDR
// result := unit ;
9420: LD_ADDR_VAR 0 4
9424: PUSH
9425: LD_VAR 0 5
9429: ST_TO_ADDR
// end ;
9430: LD_VAR 0 4
9434: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9435: LD_INT 0
9437: PPUSH
9438: PPUSH
// if not side or not nation then
9439: LD_VAR 0 1
9443: NOT
9444: PUSH
9445: LD_VAR 0 2
9449: NOT
9450: OR
9451: IFFALSE 9455
// exit ;
9453: GO 10223
// case nation of nation_american :
9455: LD_VAR 0 2
9459: PUSH
9460: LD_INT 1
9462: DOUBLE
9463: EQUAL
9464: IFTRUE 9468
9466: GO 9682
9468: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9469: LD_ADDR_VAR 0 4
9473: PUSH
9474: LD_INT 35
9476: PUSH
9477: LD_INT 45
9479: PUSH
9480: LD_INT 46
9482: PUSH
9483: LD_INT 47
9485: PUSH
9486: LD_INT 82
9488: PUSH
9489: LD_INT 83
9491: PUSH
9492: LD_INT 84
9494: PUSH
9495: LD_INT 85
9497: PUSH
9498: LD_INT 86
9500: PUSH
9501: LD_INT 1
9503: PUSH
9504: LD_INT 2
9506: PUSH
9507: LD_INT 6
9509: PUSH
9510: LD_INT 15
9512: PUSH
9513: LD_INT 16
9515: PUSH
9516: LD_INT 7
9518: PUSH
9519: LD_INT 12
9521: PUSH
9522: LD_INT 13
9524: PUSH
9525: LD_INT 10
9527: PUSH
9528: LD_INT 14
9530: PUSH
9531: LD_INT 20
9533: PUSH
9534: LD_INT 21
9536: PUSH
9537: LD_INT 22
9539: PUSH
9540: LD_INT 25
9542: PUSH
9543: LD_INT 32
9545: PUSH
9546: LD_INT 27
9548: PUSH
9549: LD_INT 36
9551: PUSH
9552: LD_INT 69
9554: PUSH
9555: LD_INT 39
9557: PUSH
9558: LD_INT 34
9560: PUSH
9561: LD_INT 40
9563: PUSH
9564: LD_INT 48
9566: PUSH
9567: LD_INT 49
9569: PUSH
9570: LD_INT 50
9572: PUSH
9573: LD_INT 51
9575: PUSH
9576: LD_INT 52
9578: PUSH
9579: LD_INT 53
9581: PUSH
9582: LD_INT 54
9584: PUSH
9585: LD_INT 55
9587: PUSH
9588: LD_INT 56
9590: PUSH
9591: LD_INT 57
9593: PUSH
9594: LD_INT 58
9596: PUSH
9597: LD_INT 59
9599: PUSH
9600: LD_INT 60
9602: PUSH
9603: LD_INT 61
9605: PUSH
9606: LD_INT 62
9608: PUSH
9609: LD_INT 80
9611: PUSH
9612: LD_INT 82
9614: PUSH
9615: LD_INT 83
9617: PUSH
9618: LD_INT 84
9620: PUSH
9621: LD_INT 85
9623: PUSH
9624: LD_INT 86
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: ST_TO_ADDR
9680: GO 10147
9682: LD_INT 2
9684: DOUBLE
9685: EQUAL
9686: IFTRUE 9690
9688: GO 9916
9690: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9691: LD_ADDR_VAR 0 4
9695: PUSH
9696: LD_INT 35
9698: PUSH
9699: LD_INT 45
9701: PUSH
9702: LD_INT 46
9704: PUSH
9705: LD_INT 47
9707: PUSH
9708: LD_INT 82
9710: PUSH
9711: LD_INT 83
9713: PUSH
9714: LD_INT 84
9716: PUSH
9717: LD_INT 85
9719: PUSH
9720: LD_INT 87
9722: PUSH
9723: LD_INT 70
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: LD_INT 11
9731: PUSH
9732: LD_INT 3
9734: PUSH
9735: LD_INT 4
9737: PUSH
9738: LD_INT 5
9740: PUSH
9741: LD_INT 6
9743: PUSH
9744: LD_INT 15
9746: PUSH
9747: LD_INT 18
9749: PUSH
9750: LD_INT 7
9752: PUSH
9753: LD_INT 17
9755: PUSH
9756: LD_INT 8
9758: PUSH
9759: LD_INT 20
9761: PUSH
9762: LD_INT 21
9764: PUSH
9765: LD_INT 22
9767: PUSH
9768: LD_INT 72
9770: PUSH
9771: LD_INT 26
9773: PUSH
9774: LD_INT 69
9776: PUSH
9777: LD_INT 39
9779: PUSH
9780: LD_INT 40
9782: PUSH
9783: LD_INT 41
9785: PUSH
9786: LD_INT 42
9788: PUSH
9789: LD_INT 43
9791: PUSH
9792: LD_INT 48
9794: PUSH
9795: LD_INT 49
9797: PUSH
9798: LD_INT 50
9800: PUSH
9801: LD_INT 51
9803: PUSH
9804: LD_INT 52
9806: PUSH
9807: LD_INT 53
9809: PUSH
9810: LD_INT 54
9812: PUSH
9813: LD_INT 55
9815: PUSH
9816: LD_INT 56
9818: PUSH
9819: LD_INT 60
9821: PUSH
9822: LD_INT 61
9824: PUSH
9825: LD_INT 62
9827: PUSH
9828: LD_INT 66
9830: PUSH
9831: LD_INT 67
9833: PUSH
9834: LD_INT 68
9836: PUSH
9837: LD_INT 81
9839: PUSH
9840: LD_INT 82
9842: PUSH
9843: LD_INT 83
9845: PUSH
9846: LD_INT 84
9848: PUSH
9849: LD_INT 85
9851: PUSH
9852: LD_INT 87
9854: PUSH
9855: LD_INT 88
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: ST_TO_ADDR
9914: GO 10147
9916: LD_INT 3
9918: DOUBLE
9919: EQUAL
9920: IFTRUE 9924
9922: GO 10146
9924: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9925: LD_ADDR_VAR 0 4
9929: PUSH
9930: LD_INT 46
9932: PUSH
9933: LD_INT 47
9935: PUSH
9936: LD_INT 1
9938: PUSH
9939: LD_INT 2
9941: PUSH
9942: LD_INT 82
9944: PUSH
9945: LD_INT 83
9947: PUSH
9948: LD_INT 84
9950: PUSH
9951: LD_INT 85
9953: PUSH
9954: LD_INT 86
9956: PUSH
9957: LD_INT 11
9959: PUSH
9960: LD_INT 9
9962: PUSH
9963: LD_INT 20
9965: PUSH
9966: LD_INT 19
9968: PUSH
9969: LD_INT 21
9971: PUSH
9972: LD_INT 24
9974: PUSH
9975: LD_INT 22
9977: PUSH
9978: LD_INT 25
9980: PUSH
9981: LD_INT 28
9983: PUSH
9984: LD_INT 29
9986: PUSH
9987: LD_INT 30
9989: PUSH
9990: LD_INT 31
9992: PUSH
9993: LD_INT 37
9995: PUSH
9996: LD_INT 38
9998: PUSH
9999: LD_INT 32
10001: PUSH
10002: LD_INT 27
10004: PUSH
10005: LD_INT 33
10007: PUSH
10008: LD_INT 69
10010: PUSH
10011: LD_INT 39
10013: PUSH
10014: LD_INT 34
10016: PUSH
10017: LD_INT 40
10019: PUSH
10020: LD_INT 71
10022: PUSH
10023: LD_INT 23
10025: PUSH
10026: LD_INT 44
10028: PUSH
10029: LD_INT 48
10031: PUSH
10032: LD_INT 49
10034: PUSH
10035: LD_INT 50
10037: PUSH
10038: LD_INT 51
10040: PUSH
10041: LD_INT 52
10043: PUSH
10044: LD_INT 53
10046: PUSH
10047: LD_INT 54
10049: PUSH
10050: LD_INT 55
10052: PUSH
10053: LD_INT 56
10055: PUSH
10056: LD_INT 57
10058: PUSH
10059: LD_INT 58
10061: PUSH
10062: LD_INT 59
10064: PUSH
10065: LD_INT 63
10067: PUSH
10068: LD_INT 64
10070: PUSH
10071: LD_INT 65
10073: PUSH
10074: LD_INT 82
10076: PUSH
10077: LD_INT 83
10079: PUSH
10080: LD_INT 84
10082: PUSH
10083: LD_INT 85
10085: PUSH
10086: LD_INT 86
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: ST_TO_ADDR
10144: GO 10147
10146: POP
// if state > - 1 and state < 3 then
10147: LD_VAR 0 3
10151: PUSH
10152: LD_INT 1
10154: NEG
10155: GREATER
10156: PUSH
10157: LD_VAR 0 3
10161: PUSH
10162: LD_INT 3
10164: LESS
10165: AND
10166: IFFALSE 10223
// for i in result do
10168: LD_ADDR_VAR 0 5
10172: PUSH
10173: LD_VAR 0 4
10177: PUSH
10178: FOR_IN
10179: IFFALSE 10221
// if GetTech ( i , side ) <> state then
10181: LD_VAR 0 5
10185: PPUSH
10186: LD_VAR 0 1
10190: PPUSH
10191: CALL_OW 321
10195: PUSH
10196: LD_VAR 0 3
10200: NONEQUAL
10201: IFFALSE 10219
// result := result diff i ;
10203: LD_ADDR_VAR 0 4
10207: PUSH
10208: LD_VAR 0 4
10212: PUSH
10213: LD_VAR 0 5
10217: DIFF
10218: ST_TO_ADDR
10219: GO 10178
10221: POP
10222: POP
// end ;
10223: LD_VAR 0 4
10227: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10228: LD_INT 0
10230: PPUSH
10231: PPUSH
10232: PPUSH
// result := true ;
10233: LD_ADDR_VAR 0 3
10237: PUSH
10238: LD_INT 1
10240: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10241: LD_ADDR_VAR 0 5
10245: PUSH
10246: LD_VAR 0 2
10250: PPUSH
10251: CALL_OW 480
10255: ST_TO_ADDR
// if not tmp then
10256: LD_VAR 0 5
10260: NOT
10261: IFFALSE 10265
// exit ;
10263: GO 10314
// for i in tmp do
10265: LD_ADDR_VAR 0 4
10269: PUSH
10270: LD_VAR 0 5
10274: PUSH
10275: FOR_IN
10276: IFFALSE 10312
// if GetTech ( i , side ) <> state_researched then
10278: LD_VAR 0 4
10282: PPUSH
10283: LD_VAR 0 1
10287: PPUSH
10288: CALL_OW 321
10292: PUSH
10293: LD_INT 2
10295: NONEQUAL
10296: IFFALSE 10310
// begin result := false ;
10298: LD_ADDR_VAR 0 3
10302: PUSH
10303: LD_INT 0
10305: ST_TO_ADDR
// exit ;
10306: POP
10307: POP
10308: GO 10314
// end ;
10310: GO 10275
10312: POP
10313: POP
// end ;
10314: LD_VAR 0 3
10318: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10319: LD_INT 0
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
10325: PPUSH
10326: PPUSH
10327: PPUSH
10328: PPUSH
10329: PPUSH
10330: PPUSH
10331: PPUSH
10332: PPUSH
10333: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10334: LD_VAR 0 1
10338: NOT
10339: PUSH
10340: LD_VAR 0 1
10344: PPUSH
10345: CALL_OW 257
10349: PUSH
10350: LD_INT 9
10352: NONEQUAL
10353: OR
10354: IFFALSE 10358
// exit ;
10356: GO 10931
// side := GetSide ( unit ) ;
10358: LD_ADDR_VAR 0 9
10362: PUSH
10363: LD_VAR 0 1
10367: PPUSH
10368: CALL_OW 255
10372: ST_TO_ADDR
// tech_space := tech_spacanom ;
10373: LD_ADDR_VAR 0 12
10377: PUSH
10378: LD_INT 29
10380: ST_TO_ADDR
// tech_time := tech_taurad ;
10381: LD_ADDR_VAR 0 13
10385: PUSH
10386: LD_INT 28
10388: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10389: LD_ADDR_VAR 0 11
10393: PUSH
10394: LD_VAR 0 1
10398: PPUSH
10399: CALL_OW 310
10403: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10404: LD_VAR 0 11
10408: PPUSH
10409: CALL_OW 247
10413: PUSH
10414: LD_INT 2
10416: EQUAL
10417: IFFALSE 10421
// exit ;
10419: GO 10931
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10421: LD_ADDR_VAR 0 8
10425: PUSH
10426: LD_INT 81
10428: PUSH
10429: LD_VAR 0 9
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 3
10440: PUSH
10441: LD_INT 21
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 69
10463: ST_TO_ADDR
// if not tmp then
10464: LD_VAR 0 8
10468: NOT
10469: IFFALSE 10473
// exit ;
10471: GO 10931
// if in_unit then
10473: LD_VAR 0 11
10477: IFFALSE 10501
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10479: LD_ADDR_VAR 0 10
10483: PUSH
10484: LD_VAR 0 8
10488: PPUSH
10489: LD_VAR 0 11
10493: PPUSH
10494: CALL_OW 74
10498: ST_TO_ADDR
10499: GO 10521
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10501: LD_ADDR_VAR 0 10
10505: PUSH
10506: LD_VAR 0 8
10510: PPUSH
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 74
10520: ST_TO_ADDR
// if not enemy then
10521: LD_VAR 0 10
10525: NOT
10526: IFFALSE 10530
// exit ;
10528: GO 10931
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10530: LD_VAR 0 11
10534: PUSH
10535: LD_VAR 0 11
10539: PPUSH
10540: LD_VAR 0 10
10544: PPUSH
10545: CALL_OW 296
10549: PUSH
10550: LD_INT 13
10552: GREATER
10553: AND
10554: PUSH
10555: LD_VAR 0 1
10559: PPUSH
10560: LD_VAR 0 10
10564: PPUSH
10565: CALL_OW 296
10569: PUSH
10570: LD_INT 12
10572: GREATER
10573: OR
10574: IFFALSE 10578
// exit ;
10576: GO 10931
// missile := [ 1 ] ;
10578: LD_ADDR_VAR 0 14
10582: PUSH
10583: LD_INT 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10589: LD_VAR 0 9
10593: PPUSH
10594: LD_VAR 0 12
10598: PPUSH
10599: CALL_OW 325
10603: IFFALSE 10632
// missile := Replace ( missile , missile + 1 , 2 ) ;
10605: LD_ADDR_VAR 0 14
10609: PUSH
10610: LD_VAR 0 14
10614: PPUSH
10615: LD_VAR 0 14
10619: PUSH
10620: LD_INT 1
10622: PLUS
10623: PPUSH
10624: LD_INT 2
10626: PPUSH
10627: CALL_OW 1
10631: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10632: LD_VAR 0 9
10636: PPUSH
10637: LD_VAR 0 13
10641: PPUSH
10642: CALL_OW 325
10646: PUSH
10647: LD_VAR 0 10
10651: PPUSH
10652: CALL_OW 255
10656: PPUSH
10657: LD_VAR 0 13
10661: PPUSH
10662: CALL_OW 325
10666: NOT
10667: AND
10668: IFFALSE 10697
// missile := Replace ( missile , missile + 1 , 3 ) ;
10670: LD_ADDR_VAR 0 14
10674: PUSH
10675: LD_VAR 0 14
10679: PPUSH
10680: LD_VAR 0 14
10684: PUSH
10685: LD_INT 1
10687: PLUS
10688: PPUSH
10689: LD_INT 3
10691: PPUSH
10692: CALL_OW 1
10696: ST_TO_ADDR
// if missile < 2 then
10697: LD_VAR 0 14
10701: PUSH
10702: LD_INT 2
10704: LESS
10705: IFFALSE 10709
// exit ;
10707: GO 10931
// x := GetX ( enemy ) ;
10709: LD_ADDR_VAR 0 4
10713: PUSH
10714: LD_VAR 0 10
10718: PPUSH
10719: CALL_OW 250
10723: ST_TO_ADDR
// y := GetY ( enemy ) ;
10724: LD_ADDR_VAR 0 5
10728: PUSH
10729: LD_VAR 0 10
10733: PPUSH
10734: CALL_OW 251
10738: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10739: LD_ADDR_VAR 0 6
10743: PUSH
10744: LD_VAR 0 4
10748: PUSH
10749: LD_INT 1
10751: NEG
10752: PPUSH
10753: LD_INT 1
10755: PPUSH
10756: CALL_OW 12
10760: PLUS
10761: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10762: LD_ADDR_VAR 0 7
10766: PUSH
10767: LD_VAR 0 5
10771: PUSH
10772: LD_INT 1
10774: NEG
10775: PPUSH
10776: LD_INT 1
10778: PPUSH
10779: CALL_OW 12
10783: PLUS
10784: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10785: LD_VAR 0 6
10789: PPUSH
10790: LD_VAR 0 7
10794: PPUSH
10795: CALL_OW 488
10799: NOT
10800: IFFALSE 10822
// begin _x := x ;
10802: LD_ADDR_VAR 0 6
10806: PUSH
10807: LD_VAR 0 4
10811: ST_TO_ADDR
// _y := y ;
10812: LD_ADDR_VAR 0 7
10816: PUSH
10817: LD_VAR 0 5
10821: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10822: LD_ADDR_VAR 0 3
10826: PUSH
10827: LD_INT 1
10829: PPUSH
10830: LD_VAR 0 14
10834: PPUSH
10835: CALL_OW 12
10839: ST_TO_ADDR
// case i of 1 :
10840: LD_VAR 0 3
10844: PUSH
10845: LD_INT 1
10847: DOUBLE
10848: EQUAL
10849: IFTRUE 10853
10851: GO 10870
10853: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10854: LD_VAR 0 1
10858: PPUSH
10859: LD_VAR 0 10
10863: PPUSH
10864: CALL_OW 115
10868: GO 10931
10870: LD_INT 2
10872: DOUBLE
10873: EQUAL
10874: IFTRUE 10878
10876: GO 10900
10878: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10879: LD_VAR 0 1
10883: PPUSH
10884: LD_VAR 0 6
10888: PPUSH
10889: LD_VAR 0 7
10893: PPUSH
10894: CALL_OW 153
10898: GO 10931
10900: LD_INT 3
10902: DOUBLE
10903: EQUAL
10904: IFTRUE 10908
10906: GO 10930
10908: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10909: LD_VAR 0 1
10913: PPUSH
10914: LD_VAR 0 6
10918: PPUSH
10919: LD_VAR 0 7
10923: PPUSH
10924: CALL_OW 154
10928: GO 10931
10930: POP
// end ;
10931: LD_VAR 0 2
10935: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10936: LD_INT 0
10938: PPUSH
10939: PPUSH
10940: PPUSH
10941: PPUSH
10942: PPUSH
10943: PPUSH
// if not unit or not building then
10944: LD_VAR 0 1
10948: NOT
10949: PUSH
10950: LD_VAR 0 2
10954: NOT
10955: OR
10956: IFFALSE 10960
// exit ;
10958: GO 11118
// x := GetX ( building ) ;
10960: LD_ADDR_VAR 0 5
10964: PUSH
10965: LD_VAR 0 2
10969: PPUSH
10970: CALL_OW 250
10974: ST_TO_ADDR
// y := GetY ( building ) ;
10975: LD_ADDR_VAR 0 6
10979: PUSH
10980: LD_VAR 0 2
10984: PPUSH
10985: CALL_OW 251
10989: ST_TO_ADDR
// for i = 0 to 5 do
10990: LD_ADDR_VAR 0 4
10994: PUSH
10995: DOUBLE
10996: LD_INT 0
10998: DEC
10999: ST_TO_ADDR
11000: LD_INT 5
11002: PUSH
11003: FOR_TO
11004: IFFALSE 11116
// begin _x := ShiftX ( x , i , 3 ) ;
11006: LD_ADDR_VAR 0 7
11010: PUSH
11011: LD_VAR 0 5
11015: PPUSH
11016: LD_VAR 0 4
11020: PPUSH
11021: LD_INT 3
11023: PPUSH
11024: CALL_OW 272
11028: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11029: LD_ADDR_VAR 0 8
11033: PUSH
11034: LD_VAR 0 6
11038: PPUSH
11039: LD_VAR 0 4
11043: PPUSH
11044: LD_INT 3
11046: PPUSH
11047: CALL_OW 273
11051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11052: LD_VAR 0 7
11056: PPUSH
11057: LD_VAR 0 8
11061: PPUSH
11062: CALL_OW 488
11066: NOT
11067: IFFALSE 11071
// continue ;
11069: GO 11003
// if HexInfo ( _x , _y ) = 0 then
11071: LD_VAR 0 7
11075: PPUSH
11076: LD_VAR 0 8
11080: PPUSH
11081: CALL_OW 428
11085: PUSH
11086: LD_INT 0
11088: EQUAL
11089: IFFALSE 11114
// begin ComMoveXY ( unit , _x , _y ) ;
11091: LD_VAR 0 1
11095: PPUSH
11096: LD_VAR 0 7
11100: PPUSH
11101: LD_VAR 0 8
11105: PPUSH
11106: CALL_OW 111
// exit ;
11110: POP
11111: POP
11112: GO 11118
// end ; end ;
11114: GO 11003
11116: POP
11117: POP
// end ;
11118: LD_VAR 0 3
11122: RET
// export function ScanBase ( side , base_area ) ; begin
11123: LD_INT 0
11125: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11126: LD_ADDR_VAR 0 3
11130: PUSH
11131: LD_VAR 0 2
11135: PPUSH
11136: LD_INT 81
11138: PUSH
11139: LD_VAR 0 1
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 70
11152: ST_TO_ADDR
// end ;
11153: LD_VAR 0 3
11157: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11158: LD_INT 0
11160: PPUSH
11161: PPUSH
11162: PPUSH
11163: PPUSH
// result := false ;
11164: LD_ADDR_VAR 0 2
11168: PUSH
11169: LD_INT 0
11171: ST_TO_ADDR
// side := GetSide ( unit ) ;
11172: LD_ADDR_VAR 0 3
11176: PUSH
11177: LD_VAR 0 1
11181: PPUSH
11182: CALL_OW 255
11186: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11187: LD_ADDR_VAR 0 4
11191: PUSH
11192: LD_VAR 0 1
11196: PPUSH
11197: CALL_OW 248
11201: ST_TO_ADDR
// case nat of 1 :
11202: LD_VAR 0 4
11206: PUSH
11207: LD_INT 1
11209: DOUBLE
11210: EQUAL
11211: IFTRUE 11215
11213: GO 11226
11215: POP
// tech := tech_lassight ; 2 :
11216: LD_ADDR_VAR 0 5
11220: PUSH
11221: LD_INT 12
11223: ST_TO_ADDR
11224: GO 11265
11226: LD_INT 2
11228: DOUBLE
11229: EQUAL
11230: IFTRUE 11234
11232: GO 11245
11234: POP
// tech := tech_mortar ; 3 :
11235: LD_ADDR_VAR 0 5
11239: PUSH
11240: LD_INT 41
11242: ST_TO_ADDR
11243: GO 11265
11245: LD_INT 3
11247: DOUBLE
11248: EQUAL
11249: IFTRUE 11253
11251: GO 11264
11253: POP
// tech := tech_bazooka ; end ;
11254: LD_ADDR_VAR 0 5
11258: PUSH
11259: LD_INT 44
11261: ST_TO_ADDR
11262: GO 11265
11264: POP
// if Researched ( side , tech ) then
11265: LD_VAR 0 3
11269: PPUSH
11270: LD_VAR 0 5
11274: PPUSH
11275: CALL_OW 325
11279: IFFALSE 11306
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11281: LD_ADDR_VAR 0 2
11285: PUSH
11286: LD_INT 5
11288: PUSH
11289: LD_INT 8
11291: PUSH
11292: LD_INT 9
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: PUSH
11300: LD_VAR 0 4
11304: ARRAY
11305: ST_TO_ADDR
// end ;
11306: LD_VAR 0 2
11310: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11311: LD_INT 0
11313: PPUSH
11314: PPUSH
11315: PPUSH
// if not mines then
11316: LD_VAR 0 2
11320: NOT
11321: IFFALSE 11325
// exit ;
11323: GO 11469
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11325: LD_ADDR_VAR 0 5
11329: PUSH
11330: LD_INT 81
11332: PUSH
11333: LD_VAR 0 1
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 3
11344: PUSH
11345: LD_INT 21
11347: PUSH
11348: LD_INT 3
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 69
11367: ST_TO_ADDR
// for i in mines do
11368: LD_ADDR_VAR 0 4
11372: PUSH
11373: LD_VAR 0 2
11377: PUSH
11378: FOR_IN
11379: IFFALSE 11467
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11381: LD_VAR 0 4
11385: PUSH
11386: LD_INT 1
11388: ARRAY
11389: PPUSH
11390: LD_VAR 0 4
11394: PUSH
11395: LD_INT 2
11397: ARRAY
11398: PPUSH
11399: CALL_OW 458
11403: NOT
11404: IFFALSE 11408
// continue ;
11406: GO 11378
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11408: LD_VAR 0 4
11412: PUSH
11413: LD_INT 1
11415: ARRAY
11416: PPUSH
11417: LD_VAR 0 4
11421: PUSH
11422: LD_INT 2
11424: ARRAY
11425: PPUSH
11426: CALL_OW 428
11430: PUSH
11431: LD_VAR 0 5
11435: IN
11436: IFFALSE 11465
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11438: LD_VAR 0 4
11442: PUSH
11443: LD_INT 1
11445: ARRAY
11446: PPUSH
11447: LD_VAR 0 4
11451: PUSH
11452: LD_INT 2
11454: ARRAY
11455: PPUSH
11456: LD_VAR 0 1
11460: PPUSH
11461: CALL_OW 456
// end ;
11465: GO 11378
11467: POP
11468: POP
// end ;
11469: LD_VAR 0 3
11473: RET
// export function Count ( array ) ; begin
11474: LD_INT 0
11476: PPUSH
// result := array + 0 ;
11477: LD_ADDR_VAR 0 2
11481: PUSH
11482: LD_VAR 0 1
11486: PUSH
11487: LD_INT 0
11489: PLUS
11490: ST_TO_ADDR
// end ;
11491: LD_VAR 0 2
11495: RET
// export function IsEmpty ( building ) ; begin
11496: LD_INT 0
11498: PPUSH
// if not building then
11499: LD_VAR 0 1
11503: NOT
11504: IFFALSE 11508
// exit ;
11506: GO 11551
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11508: LD_ADDR_VAR 0 2
11512: PUSH
11513: LD_VAR 0 1
11517: PUSH
11518: LD_INT 22
11520: PUSH
11521: LD_VAR 0 1
11525: PPUSH
11526: CALL_OW 255
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 58
11537: PUSH
11538: EMPTY
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PPUSH
11545: CALL_OW 69
11549: IN
11550: ST_TO_ADDR
// end ;
11551: LD_VAR 0 2
11555: RET
// export function IsNotFull ( building ) ; var places ; begin
11556: LD_INT 0
11558: PPUSH
11559: PPUSH
// if not building then
11560: LD_VAR 0 1
11564: NOT
11565: IFFALSE 11569
// exit ;
11567: GO 11597
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_VAR 0 1
11578: PPUSH
11579: LD_INT 3
11581: PUSH
11582: LD_INT 62
11584: PUSH
11585: EMPTY
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PPUSH
11592: CALL_OW 72
11596: ST_TO_ADDR
// end ;
11597: LD_VAR 0 2
11601: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11602: LD_INT 0
11604: PPUSH
11605: PPUSH
11606: PPUSH
11607: PPUSH
// tmp := [ ] ;
11608: LD_ADDR_VAR 0 3
11612: PUSH
11613: EMPTY
11614: ST_TO_ADDR
// list := [ ] ;
11615: LD_ADDR_VAR 0 5
11619: PUSH
11620: EMPTY
11621: ST_TO_ADDR
// for i = 16 to 25 do
11622: LD_ADDR_VAR 0 4
11626: PUSH
11627: DOUBLE
11628: LD_INT 16
11630: DEC
11631: ST_TO_ADDR
11632: LD_INT 25
11634: PUSH
11635: FOR_TO
11636: IFFALSE 11709
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11638: LD_ADDR_VAR 0 3
11642: PUSH
11643: LD_VAR 0 3
11647: PUSH
11648: LD_INT 22
11650: PUSH
11651: LD_VAR 0 1
11655: PPUSH
11656: CALL_OW 255
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 91
11667: PUSH
11668: LD_VAR 0 1
11672: PUSH
11673: LD_INT 6
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: PUSH
11681: LD_INT 30
11683: PUSH
11684: LD_VAR 0 4
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: LIST
11697: PUSH
11698: EMPTY
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: ADD
11706: ST_TO_ADDR
11707: GO 11635
11709: POP
11710: POP
// for i = 1 to tmp do
11711: LD_ADDR_VAR 0 4
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 3
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11815
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11729: LD_ADDR_VAR 0 5
11733: PUSH
11734: LD_VAR 0 5
11738: PUSH
11739: LD_VAR 0 3
11743: PUSH
11744: LD_VAR 0 4
11748: ARRAY
11749: PPUSH
11750: CALL_OW 266
11754: PUSH
11755: LD_VAR 0 3
11759: PUSH
11760: LD_VAR 0 4
11764: ARRAY
11765: PPUSH
11766: CALL_OW 250
11770: PUSH
11771: LD_VAR 0 3
11775: PUSH
11776: LD_VAR 0 4
11780: ARRAY
11781: PPUSH
11782: CALL_OW 251
11786: PUSH
11787: LD_VAR 0 3
11791: PUSH
11792: LD_VAR 0 4
11796: ARRAY
11797: PPUSH
11798: CALL_OW 254
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: ADD
11812: ST_TO_ADDR
11813: GO 11726
11815: POP
11816: POP
// result := list ;
11817: LD_ADDR_VAR 0 2
11821: PUSH
11822: LD_VAR 0 5
11826: ST_TO_ADDR
// end ;
11827: LD_VAR 0 2
11831: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11832: LD_INT 0
11834: PPUSH
11835: PPUSH
11836: PPUSH
11837: PPUSH
11838: PPUSH
11839: PPUSH
11840: PPUSH
// if not factory then
11841: LD_VAR 0 1
11845: NOT
11846: IFFALSE 11850
// exit ;
11848: GO 12443
// if control = control_apeman then
11850: LD_VAR 0 4
11854: PUSH
11855: LD_INT 5
11857: EQUAL
11858: IFFALSE 11967
// begin tmp := UnitsInside ( factory ) ;
11860: LD_ADDR_VAR 0 8
11864: PUSH
11865: LD_VAR 0 1
11869: PPUSH
11870: CALL_OW 313
11874: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11875: LD_VAR 0 8
11879: PPUSH
11880: LD_INT 25
11882: PUSH
11883: LD_INT 12
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 72
11894: NOT
11895: IFFALSE 11905
// control := control_manual ;
11897: LD_ADDR_VAR 0 4
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11905: LD_ADDR_VAR 0 8
11909: PUSH
11910: LD_VAR 0 1
11914: PPUSH
11915: CALL 11602 0 1
11919: ST_TO_ADDR
// if tmp then
11920: LD_VAR 0 8
11924: IFFALSE 11967
// begin for i in tmp do
11926: LD_ADDR_VAR 0 7
11930: PUSH
11931: LD_VAR 0 8
11935: PUSH
11936: FOR_IN
11937: IFFALSE 11965
// if i [ 1 ] = b_ext_radio then
11939: LD_VAR 0 7
11943: PUSH
11944: LD_INT 1
11946: ARRAY
11947: PUSH
11948: LD_INT 22
11950: EQUAL
11951: IFFALSE 11963
// begin control := control_remote ;
11953: LD_ADDR_VAR 0 4
11957: PUSH
11958: LD_INT 2
11960: ST_TO_ADDR
// break ;
11961: GO 11965
// end ;
11963: GO 11936
11965: POP
11966: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11967: LD_VAR 0 1
11971: PPUSH
11972: LD_VAR 0 2
11976: PPUSH
11977: LD_VAR 0 3
11981: PPUSH
11982: LD_VAR 0 4
11986: PPUSH
11987: LD_VAR 0 5
11991: PPUSH
11992: CALL_OW 448
11996: IFFALSE 12031
// begin result := [ chassis , engine , control , weapon ] ;
11998: LD_ADDR_VAR 0 6
12002: PUSH
12003: LD_VAR 0 2
12007: PUSH
12008: LD_VAR 0 3
12012: PUSH
12013: LD_VAR 0 4
12017: PUSH
12018: LD_VAR 0 5
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: ST_TO_ADDR
// exit ;
12029: GO 12443
// end ; _chassis := AvailableChassisList ( factory ) ;
12031: LD_ADDR_VAR 0 9
12035: PUSH
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 475
12045: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12046: LD_ADDR_VAR 0 11
12050: PUSH
12051: LD_VAR 0 1
12055: PPUSH
12056: CALL_OW 476
12060: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12061: LD_ADDR_VAR 0 12
12065: PUSH
12066: LD_VAR 0 1
12070: PPUSH
12071: CALL_OW 477
12075: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12076: LD_ADDR_VAR 0 10
12080: PUSH
12081: LD_VAR 0 1
12085: PPUSH
12086: CALL_OW 478
12090: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12091: LD_VAR 0 9
12095: NOT
12096: PUSH
12097: LD_VAR 0 11
12101: NOT
12102: OR
12103: PUSH
12104: LD_VAR 0 12
12108: NOT
12109: OR
12110: PUSH
12111: LD_VAR 0 10
12115: NOT
12116: OR
12117: IFFALSE 12152
// begin result := [ chassis , engine , control , weapon ] ;
12119: LD_ADDR_VAR 0 6
12123: PUSH
12124: LD_VAR 0 2
12128: PUSH
12129: LD_VAR 0 3
12133: PUSH
12134: LD_VAR 0 4
12138: PUSH
12139: LD_VAR 0 5
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: ST_TO_ADDR
// exit ;
12150: GO 12443
// end ; if not chassis in _chassis then
12152: LD_VAR 0 2
12156: PUSH
12157: LD_VAR 0 9
12161: IN
12162: NOT
12163: IFFALSE 12189
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12165: LD_ADDR_VAR 0 2
12169: PUSH
12170: LD_VAR 0 9
12174: PUSH
12175: LD_INT 1
12177: PPUSH
12178: LD_VAR 0 9
12182: PPUSH
12183: CALL_OW 12
12187: ARRAY
12188: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12189: LD_VAR 0 2
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: CALL 12448 0 2
12203: NOT
12204: IFFALSE 12263
// repeat engine := _engine [ 1 ] ;
12206: LD_ADDR_VAR 0 3
12210: PUSH
12211: LD_VAR 0 11
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12220: LD_ADDR_VAR 0 11
12224: PUSH
12225: LD_VAR 0 11
12229: PPUSH
12230: LD_INT 1
12232: PPUSH
12233: CALL_OW 3
12237: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12238: LD_VAR 0 2
12242: PPUSH
12243: LD_VAR 0 3
12247: PPUSH
12248: CALL 12448 0 2
12252: PUSH
12253: LD_VAR 0 11
12257: PUSH
12258: EMPTY
12259: EQUAL
12260: OR
12261: IFFALSE 12206
// if not control in _control then
12263: LD_VAR 0 4
12267: PUSH
12268: LD_VAR 0 12
12272: IN
12273: NOT
12274: IFFALSE 12300
// control := _control [ rand ( 1 , _control ) ] ;
12276: LD_ADDR_VAR 0 4
12280: PUSH
12281: LD_VAR 0 12
12285: PUSH
12286: LD_INT 1
12288: PPUSH
12289: LD_VAR 0 12
12293: PPUSH
12294: CALL_OW 12
12298: ARRAY
12299: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12300: LD_VAR 0 2
12304: PPUSH
12305: LD_VAR 0 5
12309: PPUSH
12310: CALL 12668 0 2
12314: NOT
12315: IFFALSE 12374
// repeat weapon := _weapon [ 1 ] ;
12317: LD_ADDR_VAR 0 5
12321: PUSH
12322: LD_VAR 0 10
12326: PUSH
12327: LD_INT 1
12329: ARRAY
12330: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12331: LD_ADDR_VAR 0 10
12335: PUSH
12336: LD_VAR 0 10
12340: PPUSH
12341: LD_INT 1
12343: PPUSH
12344: CALL_OW 3
12348: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12349: LD_VAR 0 2
12353: PPUSH
12354: LD_VAR 0 5
12358: PPUSH
12359: CALL 12668 0 2
12363: PUSH
12364: LD_VAR 0 10
12368: PUSH
12369: EMPTY
12370: EQUAL
12371: OR
12372: IFFALSE 12317
// result := [ ] ;
12374: LD_ADDR_VAR 0 6
12378: PUSH
12379: EMPTY
12380: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12381: LD_VAR 0 1
12385: PPUSH
12386: LD_VAR 0 2
12390: PPUSH
12391: LD_VAR 0 3
12395: PPUSH
12396: LD_VAR 0 4
12400: PPUSH
12401: LD_VAR 0 5
12405: PPUSH
12406: CALL_OW 448
12410: IFFALSE 12443
// result := [ chassis , engine , control , weapon ] ;
12412: LD_ADDR_VAR 0 6
12416: PUSH
12417: LD_VAR 0 2
12421: PUSH
12422: LD_VAR 0 3
12426: PUSH
12427: LD_VAR 0 4
12431: PUSH
12432: LD_VAR 0 5
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: ST_TO_ADDR
// end ;
12443: LD_VAR 0 6
12447: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12448: LD_INT 0
12450: PPUSH
// if not chassis or not engine then
12451: LD_VAR 0 1
12455: NOT
12456: PUSH
12457: LD_VAR 0 2
12461: NOT
12462: OR
12463: IFFALSE 12467
// exit ;
12465: GO 12663
// case engine of engine_solar :
12467: LD_VAR 0 2
12471: PUSH
12472: LD_INT 2
12474: DOUBLE
12475: EQUAL
12476: IFTRUE 12480
12478: GO 12518
12480: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12481: LD_ADDR_VAR 0 3
12485: PUSH
12486: LD_INT 11
12488: PUSH
12489: LD_INT 12
12491: PUSH
12492: LD_INT 13
12494: PUSH
12495: LD_INT 14
12497: PUSH
12498: LD_INT 1
12500: PUSH
12501: LD_INT 2
12503: PUSH
12504: LD_INT 3
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: ST_TO_ADDR
12516: GO 12647
12518: LD_INT 1
12520: DOUBLE
12521: EQUAL
12522: IFTRUE 12526
12524: GO 12588
12526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12527: LD_ADDR_VAR 0 3
12531: PUSH
12532: LD_INT 11
12534: PUSH
12535: LD_INT 12
12537: PUSH
12538: LD_INT 13
12540: PUSH
12541: LD_INT 14
12543: PUSH
12544: LD_INT 1
12546: PUSH
12547: LD_INT 2
12549: PUSH
12550: LD_INT 3
12552: PUSH
12553: LD_INT 4
12555: PUSH
12556: LD_INT 5
12558: PUSH
12559: LD_INT 21
12561: PUSH
12562: LD_INT 23
12564: PUSH
12565: LD_INT 22
12567: PUSH
12568: LD_INT 24
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: ST_TO_ADDR
12586: GO 12647
12588: LD_INT 3
12590: DOUBLE
12591: EQUAL
12592: IFTRUE 12596
12594: GO 12646
12596: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12597: LD_ADDR_VAR 0 3
12601: PUSH
12602: LD_INT 13
12604: PUSH
12605: LD_INT 14
12607: PUSH
12608: LD_INT 2
12610: PUSH
12611: LD_INT 3
12613: PUSH
12614: LD_INT 4
12616: PUSH
12617: LD_INT 5
12619: PUSH
12620: LD_INT 21
12622: PUSH
12623: LD_INT 22
12625: PUSH
12626: LD_INT 23
12628: PUSH
12629: LD_INT 24
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: ST_TO_ADDR
12644: GO 12647
12646: POP
// result := ( chassis in result ) ;
12647: LD_ADDR_VAR 0 3
12651: PUSH
12652: LD_VAR 0 1
12656: PUSH
12657: LD_VAR 0 3
12661: IN
12662: ST_TO_ADDR
// end ;
12663: LD_VAR 0 3
12667: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12668: LD_INT 0
12670: PPUSH
// if not chassis or not weapon then
12671: LD_VAR 0 1
12675: NOT
12676: PUSH
12677: LD_VAR 0 2
12681: NOT
12682: OR
12683: IFFALSE 12687
// exit ;
12685: GO 13747
// case weapon of us_machine_gun :
12687: LD_VAR 0 2
12691: PUSH
12692: LD_INT 2
12694: DOUBLE
12695: EQUAL
12696: IFTRUE 12700
12698: GO 12730
12700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12701: LD_ADDR_VAR 0 3
12705: PUSH
12706: LD_INT 1
12708: PUSH
12709: LD_INT 2
12711: PUSH
12712: LD_INT 3
12714: PUSH
12715: LD_INT 4
12717: PUSH
12718: LD_INT 5
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: ST_TO_ADDR
12728: GO 13731
12730: LD_INT 3
12732: DOUBLE
12733: EQUAL
12734: IFTRUE 12738
12736: GO 12768
12738: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12739: LD_ADDR_VAR 0 3
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: LD_INT 3
12752: PUSH
12753: LD_INT 4
12755: PUSH
12756: LD_INT 5
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: ST_TO_ADDR
12766: GO 13731
12768: LD_INT 11
12770: DOUBLE
12771: EQUAL
12772: IFTRUE 12776
12774: GO 12806
12776: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12777: LD_ADDR_VAR 0 3
12781: PUSH
12782: LD_INT 1
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 3
12790: PUSH
12791: LD_INT 4
12793: PUSH
12794: LD_INT 5
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: ST_TO_ADDR
12804: GO 13731
12806: LD_INT 4
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 12840
12814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12815: LD_ADDR_VAR 0 3
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: LD_INT 3
12825: PUSH
12826: LD_INT 4
12828: PUSH
12829: LD_INT 5
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: ST_TO_ADDR
12838: GO 13731
12840: LD_INT 5
12842: DOUBLE
12843: EQUAL
12844: IFTRUE 12848
12846: GO 12874
12848: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_INT 2
12856: PUSH
12857: LD_INT 3
12859: PUSH
12860: LD_INT 4
12862: PUSH
12863: LD_INT 5
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: ST_TO_ADDR
12872: GO 13731
12874: LD_INT 9
12876: DOUBLE
12877: EQUAL
12878: IFTRUE 12882
12880: GO 12908
12882: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12883: LD_ADDR_VAR 0 3
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: LD_INT 3
12893: PUSH
12894: LD_INT 4
12896: PUSH
12897: LD_INT 5
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: ST_TO_ADDR
12906: GO 13731
12908: LD_INT 7
12910: DOUBLE
12911: EQUAL
12912: IFTRUE 12916
12914: GO 12942
12916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12917: LD_ADDR_VAR 0 3
12921: PUSH
12922: LD_INT 2
12924: PUSH
12925: LD_INT 3
12927: PUSH
12928: LD_INT 4
12930: PUSH
12931: LD_INT 5
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: ST_TO_ADDR
12940: GO 13731
12942: LD_INT 12
12944: DOUBLE
12945: EQUAL
12946: IFTRUE 12950
12948: GO 12976
12950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12951: LD_ADDR_VAR 0 3
12955: PUSH
12956: LD_INT 2
12958: PUSH
12959: LD_INT 3
12961: PUSH
12962: LD_INT 4
12964: PUSH
12965: LD_INT 5
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: ST_TO_ADDR
12974: GO 13731
12976: LD_INT 13
12978: DOUBLE
12979: EQUAL
12980: IFTRUE 12984
12982: GO 13010
12984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12985: LD_ADDR_VAR 0 3
12989: PUSH
12990: LD_INT 2
12992: PUSH
12993: LD_INT 3
12995: PUSH
12996: LD_INT 4
12998: PUSH
12999: LD_INT 5
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: ST_TO_ADDR
13008: GO 13731
13010: LD_INT 14
13012: DOUBLE
13013: EQUAL
13014: IFTRUE 13018
13016: GO 13036
13018: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13019: LD_ADDR_VAR 0 3
13023: PUSH
13024: LD_INT 4
13026: PUSH
13027: LD_INT 5
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: ST_TO_ADDR
13034: GO 13731
13036: LD_INT 6
13038: DOUBLE
13039: EQUAL
13040: IFTRUE 13044
13042: GO 13062
13044: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13045: LD_ADDR_VAR 0 3
13049: PUSH
13050: LD_INT 4
13052: PUSH
13053: LD_INT 5
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: ST_TO_ADDR
13060: GO 13731
13062: LD_INT 10
13064: DOUBLE
13065: EQUAL
13066: IFTRUE 13070
13068: GO 13088
13070: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13071: LD_ADDR_VAR 0 3
13075: PUSH
13076: LD_INT 4
13078: PUSH
13079: LD_INT 5
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: ST_TO_ADDR
13086: GO 13731
13088: LD_INT 22
13090: DOUBLE
13091: EQUAL
13092: IFTRUE 13096
13094: GO 13122
13096: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13097: LD_ADDR_VAR 0 3
13101: PUSH
13102: LD_INT 11
13104: PUSH
13105: LD_INT 12
13107: PUSH
13108: LD_INT 13
13110: PUSH
13111: LD_INT 14
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: ST_TO_ADDR
13120: GO 13731
13122: LD_INT 23
13124: DOUBLE
13125: EQUAL
13126: IFTRUE 13130
13128: GO 13156
13130: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13131: LD_ADDR_VAR 0 3
13135: PUSH
13136: LD_INT 11
13138: PUSH
13139: LD_INT 12
13141: PUSH
13142: LD_INT 13
13144: PUSH
13145: LD_INT 14
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: ST_TO_ADDR
13154: GO 13731
13156: LD_INT 24
13158: DOUBLE
13159: EQUAL
13160: IFTRUE 13164
13162: GO 13190
13164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: LD_INT 11
13172: PUSH
13173: LD_INT 12
13175: PUSH
13176: LD_INT 13
13178: PUSH
13179: LD_INT 14
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: ST_TO_ADDR
13188: GO 13731
13190: LD_INT 30
13192: DOUBLE
13193: EQUAL
13194: IFTRUE 13198
13196: GO 13224
13198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13199: LD_ADDR_VAR 0 3
13203: PUSH
13204: LD_INT 11
13206: PUSH
13207: LD_INT 12
13209: PUSH
13210: LD_INT 13
13212: PUSH
13213: LD_INT 14
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: ST_TO_ADDR
13222: GO 13731
13224: LD_INT 25
13226: DOUBLE
13227: EQUAL
13228: IFTRUE 13232
13230: GO 13250
13232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13233: LD_ADDR_VAR 0 3
13237: PUSH
13238: LD_INT 13
13240: PUSH
13241: LD_INT 14
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: ST_TO_ADDR
13248: GO 13731
13250: LD_INT 27
13252: DOUBLE
13253: EQUAL
13254: IFTRUE 13258
13256: GO 13276
13258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13259: LD_ADDR_VAR 0 3
13263: PUSH
13264: LD_INT 13
13266: PUSH
13267: LD_INT 14
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: ST_TO_ADDR
13274: GO 13731
13276: LD_INT 92
13278: DOUBLE
13279: EQUAL
13280: IFTRUE 13284
13282: GO 13310
13284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13285: LD_ADDR_VAR 0 3
13289: PUSH
13290: LD_INT 11
13292: PUSH
13293: LD_INT 12
13295: PUSH
13296: LD_INT 13
13298: PUSH
13299: LD_INT 14
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: ST_TO_ADDR
13308: GO 13731
13310: LD_INT 28
13312: DOUBLE
13313: EQUAL
13314: IFTRUE 13318
13316: GO 13336
13318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13319: LD_ADDR_VAR 0 3
13323: PUSH
13324: LD_INT 13
13326: PUSH
13327: LD_INT 14
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: ST_TO_ADDR
13334: GO 13731
13336: LD_INT 29
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13362
13344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13345: LD_ADDR_VAR 0 3
13349: PUSH
13350: LD_INT 13
13352: PUSH
13353: LD_INT 14
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: ST_TO_ADDR
13360: GO 13731
13362: LD_INT 31
13364: DOUBLE
13365: EQUAL
13366: IFTRUE 13370
13368: GO 13388
13370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13371: LD_ADDR_VAR 0 3
13375: PUSH
13376: LD_INT 13
13378: PUSH
13379: LD_INT 14
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: ST_TO_ADDR
13386: GO 13731
13388: LD_INT 26
13390: DOUBLE
13391: EQUAL
13392: IFTRUE 13396
13394: GO 13414
13396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13397: LD_ADDR_VAR 0 3
13401: PUSH
13402: LD_INT 13
13404: PUSH
13405: LD_INT 14
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: ST_TO_ADDR
13412: GO 13731
13414: LD_INT 42
13416: DOUBLE
13417: EQUAL
13418: IFTRUE 13422
13420: GO 13448
13422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13423: LD_ADDR_VAR 0 3
13427: PUSH
13428: LD_INT 21
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_INT 23
13436: PUSH
13437: LD_INT 24
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: ST_TO_ADDR
13446: GO 13731
13448: LD_INT 43
13450: DOUBLE
13451: EQUAL
13452: IFTRUE 13456
13454: GO 13482
13456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13457: LD_ADDR_VAR 0 3
13461: PUSH
13462: LD_INT 21
13464: PUSH
13465: LD_INT 22
13467: PUSH
13468: LD_INT 23
13470: PUSH
13471: LD_INT 24
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: ST_TO_ADDR
13480: GO 13731
13482: LD_INT 44
13484: DOUBLE
13485: EQUAL
13486: IFTRUE 13490
13488: GO 13516
13490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13491: LD_ADDR_VAR 0 3
13495: PUSH
13496: LD_INT 21
13498: PUSH
13499: LD_INT 22
13501: PUSH
13502: LD_INT 23
13504: PUSH
13505: LD_INT 24
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: ST_TO_ADDR
13514: GO 13731
13516: LD_INT 45
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13550
13524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 22
13535: PUSH
13536: LD_INT 23
13538: PUSH
13539: LD_INT 24
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: ST_TO_ADDR
13548: GO 13731
13550: LD_INT 49
13552: DOUBLE
13553: EQUAL
13554: IFTRUE 13558
13556: GO 13584
13558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13559: LD_ADDR_VAR 0 3
13563: PUSH
13564: LD_INT 21
13566: PUSH
13567: LD_INT 22
13569: PUSH
13570: LD_INT 23
13572: PUSH
13573: LD_INT 24
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: ST_TO_ADDR
13582: GO 13731
13584: LD_INT 51
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 13618
13592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13593: LD_ADDR_VAR 0 3
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 22
13603: PUSH
13604: LD_INT 23
13606: PUSH
13607: LD_INT 24
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: ST_TO_ADDR
13616: GO 13731
13618: LD_INT 52
13620: DOUBLE
13621: EQUAL
13622: IFTRUE 13626
13624: GO 13652
13626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13627: LD_ADDR_VAR 0 3
13631: PUSH
13632: LD_INT 21
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_INT 23
13640: PUSH
13641: LD_INT 24
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: ST_TO_ADDR
13650: GO 13731
13652: LD_INT 53
13654: DOUBLE
13655: EQUAL
13656: IFTRUE 13660
13658: GO 13678
13660: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13661: LD_ADDR_VAR 0 3
13665: PUSH
13666: LD_INT 23
13668: PUSH
13669: LD_INT 24
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: ST_TO_ADDR
13676: GO 13731
13678: LD_INT 46
13680: DOUBLE
13681: EQUAL
13682: IFTRUE 13686
13684: GO 13704
13686: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13687: LD_ADDR_VAR 0 3
13691: PUSH
13692: LD_INT 23
13694: PUSH
13695: LD_INT 24
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: ST_TO_ADDR
13702: GO 13731
13704: LD_INT 47
13706: DOUBLE
13707: EQUAL
13708: IFTRUE 13712
13710: GO 13730
13712: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_INT 23
13720: PUSH
13721: LD_INT 24
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: ST_TO_ADDR
13728: GO 13731
13730: POP
// result := ( chassis in result ) ;
13731: LD_ADDR_VAR 0 3
13735: PUSH
13736: LD_VAR 0 1
13740: PUSH
13741: LD_VAR 0 3
13745: IN
13746: ST_TO_ADDR
// end ;
13747: LD_VAR 0 3
13751: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13752: LD_INT 0
13754: PPUSH
13755: PPUSH
13756: PPUSH
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
// result := array ;
13761: LD_ADDR_VAR 0 5
13765: PUSH
13766: LD_VAR 0 1
13770: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13771: LD_VAR 0 1
13775: NOT
13776: PUSH
13777: LD_VAR 0 2
13781: NOT
13782: OR
13783: PUSH
13784: LD_VAR 0 3
13788: NOT
13789: OR
13790: PUSH
13791: LD_VAR 0 2
13795: PUSH
13796: LD_VAR 0 1
13800: GREATER
13801: OR
13802: PUSH
13803: LD_VAR 0 3
13807: PUSH
13808: LD_VAR 0 1
13812: GREATER
13813: OR
13814: IFFALSE 13818
// exit ;
13816: GO 14114
// if direction then
13818: LD_VAR 0 4
13822: IFFALSE 13886
// begin d := 1 ;
13824: LD_ADDR_VAR 0 9
13828: PUSH
13829: LD_INT 1
13831: ST_TO_ADDR
// if i_from > i_to then
13832: LD_VAR 0 2
13836: PUSH
13837: LD_VAR 0 3
13841: GREATER
13842: IFFALSE 13868
// length := ( array - i_from ) + i_to else
13844: LD_ADDR_VAR 0 11
13848: PUSH
13849: LD_VAR 0 1
13853: PUSH
13854: LD_VAR 0 2
13858: MINUS
13859: PUSH
13860: LD_VAR 0 3
13864: PLUS
13865: ST_TO_ADDR
13866: GO 13884
// length := i_to - i_from ;
13868: LD_ADDR_VAR 0 11
13872: PUSH
13873: LD_VAR 0 3
13877: PUSH
13878: LD_VAR 0 2
13882: MINUS
13883: ST_TO_ADDR
// end else
13884: GO 13947
// begin d := - 1 ;
13886: LD_ADDR_VAR 0 9
13890: PUSH
13891: LD_INT 1
13893: NEG
13894: ST_TO_ADDR
// if i_from > i_to then
13895: LD_VAR 0 2
13899: PUSH
13900: LD_VAR 0 3
13904: GREATER
13905: IFFALSE 13925
// length := i_from - i_to else
13907: LD_ADDR_VAR 0 11
13911: PUSH
13912: LD_VAR 0 2
13916: PUSH
13917: LD_VAR 0 3
13921: MINUS
13922: ST_TO_ADDR
13923: GO 13947
// length := ( array - i_to ) + i_from ;
13925: LD_ADDR_VAR 0 11
13929: PUSH
13930: LD_VAR 0 1
13934: PUSH
13935: LD_VAR 0 3
13939: MINUS
13940: PUSH
13941: LD_VAR 0 2
13945: PLUS
13946: ST_TO_ADDR
// end ; if not length then
13947: LD_VAR 0 11
13951: NOT
13952: IFFALSE 13956
// exit ;
13954: GO 14114
// tmp := array ;
13956: LD_ADDR_VAR 0 10
13960: PUSH
13961: LD_VAR 0 1
13965: ST_TO_ADDR
// for i = 1 to length do
13966: LD_ADDR_VAR 0 6
13970: PUSH
13971: DOUBLE
13972: LD_INT 1
13974: DEC
13975: ST_TO_ADDR
13976: LD_VAR 0 11
13980: PUSH
13981: FOR_TO
13982: IFFALSE 14102
// begin for j = 1 to array do
13984: LD_ADDR_VAR 0 7
13988: PUSH
13989: DOUBLE
13990: LD_INT 1
13992: DEC
13993: ST_TO_ADDR
13994: LD_VAR 0 1
13998: PUSH
13999: FOR_TO
14000: IFFALSE 14088
// begin k := j + d ;
14002: LD_ADDR_VAR 0 8
14006: PUSH
14007: LD_VAR 0 7
14011: PUSH
14012: LD_VAR 0 9
14016: PLUS
14017: ST_TO_ADDR
// if k > array then
14018: LD_VAR 0 8
14022: PUSH
14023: LD_VAR 0 1
14027: GREATER
14028: IFFALSE 14038
// k := 1 ;
14030: LD_ADDR_VAR 0 8
14034: PUSH
14035: LD_INT 1
14037: ST_TO_ADDR
// if not k then
14038: LD_VAR 0 8
14042: NOT
14043: IFFALSE 14055
// k := array ;
14045: LD_ADDR_VAR 0 8
14049: PUSH
14050: LD_VAR 0 1
14054: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14055: LD_ADDR_VAR 0 10
14059: PUSH
14060: LD_VAR 0 10
14064: PPUSH
14065: LD_VAR 0 8
14069: PPUSH
14070: LD_VAR 0 1
14074: PUSH
14075: LD_VAR 0 7
14079: ARRAY
14080: PPUSH
14081: CALL_OW 1
14085: ST_TO_ADDR
// end ;
14086: GO 13999
14088: POP
14089: POP
// array := tmp ;
14090: LD_ADDR_VAR 0 1
14094: PUSH
14095: LD_VAR 0 10
14099: ST_TO_ADDR
// end ;
14100: GO 13981
14102: POP
14103: POP
// result := array ;
14104: LD_ADDR_VAR 0 5
14108: PUSH
14109: LD_VAR 0 1
14113: ST_TO_ADDR
// end ;
14114: LD_VAR 0 5
14118: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14119: LD_INT 0
14121: PPUSH
14122: PPUSH
// result := 0 ;
14123: LD_ADDR_VAR 0 3
14127: PUSH
14128: LD_INT 0
14130: ST_TO_ADDR
// if not array or not value in array then
14131: LD_VAR 0 1
14135: NOT
14136: PUSH
14137: LD_VAR 0 2
14141: PUSH
14142: LD_VAR 0 1
14146: IN
14147: NOT
14148: OR
14149: IFFALSE 14153
// exit ;
14151: GO 14207
// for i = 1 to array do
14153: LD_ADDR_VAR 0 4
14157: PUSH
14158: DOUBLE
14159: LD_INT 1
14161: DEC
14162: ST_TO_ADDR
14163: LD_VAR 0 1
14167: PUSH
14168: FOR_TO
14169: IFFALSE 14205
// if value = array [ i ] then
14171: LD_VAR 0 2
14175: PUSH
14176: LD_VAR 0 1
14180: PUSH
14181: LD_VAR 0 4
14185: ARRAY
14186: EQUAL
14187: IFFALSE 14203
// begin result := i ;
14189: LD_ADDR_VAR 0 3
14193: PUSH
14194: LD_VAR 0 4
14198: ST_TO_ADDR
// exit ;
14199: POP
14200: POP
14201: GO 14207
// end ;
14203: GO 14168
14205: POP
14206: POP
// end ;
14207: LD_VAR 0 3
14211: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14212: LD_INT 0
14214: PPUSH
// vc_chassis := chassis ;
14215: LD_ADDR_OWVAR 37
14219: PUSH
14220: LD_VAR 0 1
14224: ST_TO_ADDR
// vc_engine := engine ;
14225: LD_ADDR_OWVAR 39
14229: PUSH
14230: LD_VAR 0 2
14234: ST_TO_ADDR
// vc_control := control ;
14235: LD_ADDR_OWVAR 38
14239: PUSH
14240: LD_VAR 0 3
14244: ST_TO_ADDR
// vc_weapon := weapon ;
14245: LD_ADDR_OWVAR 40
14249: PUSH
14250: LD_VAR 0 4
14254: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14255: LD_ADDR_OWVAR 41
14259: PUSH
14260: LD_VAR 0 5
14264: ST_TO_ADDR
// end ;
14265: LD_VAR 0 6
14269: RET
// export function WantPlant ( unit ) ; var task ; begin
14270: LD_INT 0
14272: PPUSH
14273: PPUSH
// result := false ;
14274: LD_ADDR_VAR 0 2
14278: PUSH
14279: LD_INT 0
14281: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14282: LD_ADDR_VAR 0 3
14286: PUSH
14287: LD_VAR 0 1
14291: PPUSH
14292: CALL_OW 437
14296: ST_TO_ADDR
// if task then
14297: LD_VAR 0 3
14301: IFFALSE 14329
// if task [ 1 ] [ 1 ] = p then
14303: LD_VAR 0 3
14307: PUSH
14308: LD_INT 1
14310: ARRAY
14311: PUSH
14312: LD_INT 1
14314: ARRAY
14315: PUSH
14316: LD_STRING p
14318: EQUAL
14319: IFFALSE 14329
// result := true ;
14321: LD_ADDR_VAR 0 2
14325: PUSH
14326: LD_INT 1
14328: ST_TO_ADDR
// end ;
14329: LD_VAR 0 2
14333: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14334: LD_INT 0
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
// if pos < 1 then
14340: LD_VAR 0 2
14344: PUSH
14345: LD_INT 1
14347: LESS
14348: IFFALSE 14352
// exit ;
14350: GO 14655
// if pos = 1 then
14352: LD_VAR 0 2
14356: PUSH
14357: LD_INT 1
14359: EQUAL
14360: IFFALSE 14393
// result := Replace ( arr , pos [ 1 ] , value ) else
14362: LD_ADDR_VAR 0 4
14366: PUSH
14367: LD_VAR 0 1
14371: PPUSH
14372: LD_VAR 0 2
14376: PUSH
14377: LD_INT 1
14379: ARRAY
14380: PPUSH
14381: LD_VAR 0 3
14385: PPUSH
14386: CALL_OW 1
14390: ST_TO_ADDR
14391: GO 14655
// begin tmp := arr ;
14393: LD_ADDR_VAR 0 6
14397: PUSH
14398: LD_VAR 0 1
14402: ST_TO_ADDR
// s_arr := [ tmp ] ;
14403: LD_ADDR_VAR 0 7
14407: PUSH
14408: LD_VAR 0 6
14412: PUSH
14413: EMPTY
14414: LIST
14415: ST_TO_ADDR
// for i = 1 to pos - 1 do
14416: LD_ADDR_VAR 0 5
14420: PUSH
14421: DOUBLE
14422: LD_INT 1
14424: DEC
14425: ST_TO_ADDR
14426: LD_VAR 0 2
14430: PUSH
14431: LD_INT 1
14433: MINUS
14434: PUSH
14435: FOR_TO
14436: IFFALSE 14481
// begin tmp := tmp [ pos [ i ] ] ;
14438: LD_ADDR_VAR 0 6
14442: PUSH
14443: LD_VAR 0 6
14447: PUSH
14448: LD_VAR 0 2
14452: PUSH
14453: LD_VAR 0 5
14457: ARRAY
14458: ARRAY
14459: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14460: LD_ADDR_VAR 0 7
14464: PUSH
14465: LD_VAR 0 7
14469: PUSH
14470: LD_VAR 0 6
14474: PUSH
14475: EMPTY
14476: LIST
14477: ADD
14478: ST_TO_ADDR
// end ;
14479: GO 14435
14481: POP
14482: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14483: LD_ADDR_VAR 0 6
14487: PUSH
14488: LD_VAR 0 6
14492: PPUSH
14493: LD_VAR 0 2
14497: PUSH
14498: LD_VAR 0 2
14502: ARRAY
14503: PPUSH
14504: LD_VAR 0 3
14508: PPUSH
14509: CALL_OW 1
14513: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14514: LD_ADDR_VAR 0 7
14518: PUSH
14519: LD_VAR 0 7
14523: PPUSH
14524: LD_VAR 0 7
14528: PPUSH
14529: LD_VAR 0 6
14533: PPUSH
14534: CALL_OW 1
14538: ST_TO_ADDR
// for i = s_arr downto 2 do
14539: LD_ADDR_VAR 0 5
14543: PUSH
14544: DOUBLE
14545: LD_VAR 0 7
14549: INC
14550: ST_TO_ADDR
14551: LD_INT 2
14553: PUSH
14554: FOR_DOWNTO
14555: IFFALSE 14639
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14557: LD_ADDR_VAR 0 6
14561: PUSH
14562: LD_VAR 0 7
14566: PUSH
14567: LD_VAR 0 5
14571: PUSH
14572: LD_INT 1
14574: MINUS
14575: ARRAY
14576: PPUSH
14577: LD_VAR 0 2
14581: PUSH
14582: LD_VAR 0 5
14586: PUSH
14587: LD_INT 1
14589: MINUS
14590: ARRAY
14591: PPUSH
14592: LD_VAR 0 7
14596: PUSH
14597: LD_VAR 0 5
14601: ARRAY
14602: PPUSH
14603: CALL_OW 1
14607: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14608: LD_ADDR_VAR 0 7
14612: PUSH
14613: LD_VAR 0 7
14617: PPUSH
14618: LD_VAR 0 5
14622: PUSH
14623: LD_INT 1
14625: MINUS
14626: PPUSH
14627: LD_VAR 0 6
14631: PPUSH
14632: CALL_OW 1
14636: ST_TO_ADDR
// end ;
14637: GO 14554
14639: POP
14640: POP
// result := s_arr [ 1 ] ;
14641: LD_ADDR_VAR 0 4
14645: PUSH
14646: LD_VAR 0 7
14650: PUSH
14651: LD_INT 1
14653: ARRAY
14654: ST_TO_ADDR
// end ; end ;
14655: LD_VAR 0 4
14659: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14660: LD_INT 0
14662: PPUSH
14663: PPUSH
// if not list then
14664: LD_VAR 0 1
14668: NOT
14669: IFFALSE 14673
// exit ;
14671: GO 14764
// i := list [ pos1 ] ;
14673: LD_ADDR_VAR 0 5
14677: PUSH
14678: LD_VAR 0 1
14682: PUSH
14683: LD_VAR 0 2
14687: ARRAY
14688: ST_TO_ADDR
// if not i then
14689: LD_VAR 0 5
14693: NOT
14694: IFFALSE 14698
// exit ;
14696: GO 14764
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14698: LD_ADDR_VAR 0 1
14702: PUSH
14703: LD_VAR 0 1
14707: PPUSH
14708: LD_VAR 0 2
14712: PPUSH
14713: LD_VAR 0 1
14717: PUSH
14718: LD_VAR 0 3
14722: ARRAY
14723: PPUSH
14724: CALL_OW 1
14728: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14729: LD_ADDR_VAR 0 1
14733: PUSH
14734: LD_VAR 0 1
14738: PPUSH
14739: LD_VAR 0 3
14743: PPUSH
14744: LD_VAR 0 5
14748: PPUSH
14749: CALL_OW 1
14753: ST_TO_ADDR
// result := list ;
14754: LD_ADDR_VAR 0 4
14758: PUSH
14759: LD_VAR 0 1
14763: ST_TO_ADDR
// end ;
14764: LD_VAR 0 4
14768: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14769: LD_INT 0
14771: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14772: LD_ADDR_VAR 0 5
14776: PUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 250
14786: PPUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 251
14796: PPUSH
14797: LD_VAR 0 2
14801: PPUSH
14802: LD_VAR 0 3
14806: PPUSH
14807: LD_VAR 0 4
14811: PPUSH
14812: CALL 15190 0 5
14816: ST_TO_ADDR
// end ;
14817: LD_VAR 0 5
14821: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14822: LD_INT 0
14824: PPUSH
14825: PPUSH
14826: PPUSH
14827: PPUSH
// if not list or not unit then
14828: LD_VAR 0 2
14832: NOT
14833: PUSH
14834: LD_VAR 0 1
14838: NOT
14839: OR
14840: IFFALSE 14844
// exit ;
14842: GO 15185
// result := [ ] ;
14844: LD_ADDR_VAR 0 5
14848: PUSH
14849: EMPTY
14850: ST_TO_ADDR
// for i in list do
14851: LD_ADDR_VAR 0 6
14855: PUSH
14856: LD_VAR 0 2
14860: PUSH
14861: FOR_IN
14862: IFFALSE 15080
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14864: LD_ADDR_VAR 0 8
14868: PUSH
14869: LD_VAR 0 1
14873: PPUSH
14874: LD_VAR 0 6
14878: PUSH
14879: LD_INT 1
14881: ARRAY
14882: PPUSH
14883: LD_VAR 0 6
14887: PUSH
14888: LD_INT 2
14890: ARRAY
14891: PPUSH
14892: CALL_OW 297
14896: ST_TO_ADDR
// if not Count ( result ) then
14897: LD_VAR 0 5
14901: PPUSH
14902: CALL 11474 0 1
14906: NOT
14907: IFFALSE 14940
// begin result := Join ( result , [ i , tmp ] ) ;
14909: LD_ADDR_VAR 0 5
14913: PUSH
14914: LD_VAR 0 5
14918: PPUSH
14919: LD_VAR 0 6
14923: PUSH
14924: LD_VAR 0 8
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PPUSH
14933: CALL 47083 0 2
14937: ST_TO_ADDR
// continue ;
14938: GO 14861
// end ; if result [ result ] [ 2 ] <= tmp then
14940: LD_VAR 0 5
14944: PUSH
14945: LD_VAR 0 5
14949: ARRAY
14950: PUSH
14951: LD_INT 2
14953: ARRAY
14954: PUSH
14955: LD_VAR 0 8
14959: LESSEQUAL
14960: IFFALSE 14993
// result := Join ( result , [ i , tmp ] ) else
14962: LD_ADDR_VAR 0 5
14966: PUSH
14967: LD_VAR 0 5
14971: PPUSH
14972: LD_VAR 0 6
14976: PUSH
14977: LD_VAR 0 8
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PPUSH
14986: CALL 47083 0 2
14990: ST_TO_ADDR
14991: GO 15078
// begin for j := 1 to Count ( result ) do
14993: LD_ADDR_VAR 0 7
14997: PUSH
14998: DOUBLE
14999: LD_INT 1
15001: DEC
15002: ST_TO_ADDR
15003: LD_VAR 0 5
15007: PPUSH
15008: CALL 11474 0 1
15012: PUSH
15013: FOR_TO
15014: IFFALSE 15076
// begin if tmp < result [ j ] [ 2 ] then
15016: LD_VAR 0 8
15020: PUSH
15021: LD_VAR 0 5
15025: PUSH
15026: LD_VAR 0 7
15030: ARRAY
15031: PUSH
15032: LD_INT 2
15034: ARRAY
15035: LESS
15036: IFFALSE 15074
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15038: LD_ADDR_VAR 0 5
15042: PUSH
15043: LD_VAR 0 5
15047: PPUSH
15048: LD_VAR 0 7
15052: PPUSH
15053: LD_VAR 0 6
15057: PUSH
15058: LD_VAR 0 8
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PPUSH
15067: CALL_OW 2
15071: ST_TO_ADDR
// break ;
15072: GO 15076
// end ; end ;
15074: GO 15013
15076: POP
15077: POP
// end ; end ;
15078: GO 14861
15080: POP
15081: POP
// if result and not asc then
15082: LD_VAR 0 5
15086: PUSH
15087: LD_VAR 0 3
15091: NOT
15092: AND
15093: IFFALSE 15110
// result := ReverseArray ( result ) ;
15095: LD_ADDR_VAR 0 5
15099: PUSH
15100: LD_VAR 0 5
15104: PPUSH
15105: CALL 42350 0 1
15109: ST_TO_ADDR
// tmp := [ ] ;
15110: LD_ADDR_VAR 0 8
15114: PUSH
15115: EMPTY
15116: ST_TO_ADDR
// if mode then
15117: LD_VAR 0 4
15121: IFFALSE 15185
// begin for i := 1 to result do
15123: LD_ADDR_VAR 0 6
15127: PUSH
15128: DOUBLE
15129: LD_INT 1
15131: DEC
15132: ST_TO_ADDR
15133: LD_VAR 0 5
15137: PUSH
15138: FOR_TO
15139: IFFALSE 15173
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15141: LD_ADDR_VAR 0 8
15145: PUSH
15146: LD_VAR 0 8
15150: PPUSH
15151: LD_VAR 0 5
15155: PUSH
15156: LD_VAR 0 6
15160: ARRAY
15161: PUSH
15162: LD_INT 1
15164: ARRAY
15165: PPUSH
15166: CALL 47083 0 2
15170: ST_TO_ADDR
15171: GO 15138
15173: POP
15174: POP
// result := tmp ;
15175: LD_ADDR_VAR 0 5
15179: PUSH
15180: LD_VAR 0 8
15184: ST_TO_ADDR
// end ; end ;
15185: LD_VAR 0 5
15189: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15190: LD_INT 0
15192: PPUSH
15193: PPUSH
15194: PPUSH
15195: PPUSH
// if not list then
15196: LD_VAR 0 3
15200: NOT
15201: IFFALSE 15205
// exit ;
15203: GO 15593
// result := [ ] ;
15205: LD_ADDR_VAR 0 6
15209: PUSH
15210: EMPTY
15211: ST_TO_ADDR
// for i in list do
15212: LD_ADDR_VAR 0 7
15216: PUSH
15217: LD_VAR 0 3
15221: PUSH
15222: FOR_IN
15223: IFFALSE 15425
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15225: LD_ADDR_VAR 0 9
15229: PUSH
15230: LD_VAR 0 7
15234: PPUSH
15235: LD_VAR 0 1
15239: PPUSH
15240: LD_VAR 0 2
15244: PPUSH
15245: CALL_OW 297
15249: ST_TO_ADDR
// if not result then
15250: LD_VAR 0 6
15254: NOT
15255: IFFALSE 15281
// result := [ [ i , tmp ] ] else
15257: LD_ADDR_VAR 0 6
15261: PUSH
15262: LD_VAR 0 7
15266: PUSH
15267: LD_VAR 0 9
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: EMPTY
15277: LIST
15278: ST_TO_ADDR
15279: GO 15423
// begin if result [ result ] [ 2 ] <= tmp then
15281: LD_VAR 0 6
15285: PUSH
15286: LD_VAR 0 6
15290: ARRAY
15291: PUSH
15292: LD_INT 2
15294: ARRAY
15295: PUSH
15296: LD_VAR 0 9
15300: LESSEQUAL
15301: IFFALSE 15343
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15303: LD_ADDR_VAR 0 6
15307: PUSH
15308: LD_VAR 0 6
15312: PPUSH
15313: LD_VAR 0 6
15317: PUSH
15318: LD_INT 1
15320: PLUS
15321: PPUSH
15322: LD_VAR 0 7
15326: PUSH
15327: LD_VAR 0 9
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PPUSH
15336: CALL_OW 2
15340: ST_TO_ADDR
15341: GO 15423
// for j := 1 to result do
15343: LD_ADDR_VAR 0 8
15347: PUSH
15348: DOUBLE
15349: LD_INT 1
15351: DEC
15352: ST_TO_ADDR
15353: LD_VAR 0 6
15357: PUSH
15358: FOR_TO
15359: IFFALSE 15421
// begin if tmp < result [ j ] [ 2 ] then
15361: LD_VAR 0 9
15365: PUSH
15366: LD_VAR 0 6
15370: PUSH
15371: LD_VAR 0 8
15375: ARRAY
15376: PUSH
15377: LD_INT 2
15379: ARRAY
15380: LESS
15381: IFFALSE 15419
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15383: LD_ADDR_VAR 0 6
15387: PUSH
15388: LD_VAR 0 6
15392: PPUSH
15393: LD_VAR 0 8
15397: PPUSH
15398: LD_VAR 0 7
15402: PUSH
15403: LD_VAR 0 9
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PPUSH
15412: CALL_OW 2
15416: ST_TO_ADDR
// break ;
15417: GO 15421
// end ; end ;
15419: GO 15358
15421: POP
15422: POP
// end ; end ;
15423: GO 15222
15425: POP
15426: POP
// if result and not asc then
15427: LD_VAR 0 6
15431: PUSH
15432: LD_VAR 0 4
15436: NOT
15437: AND
15438: IFFALSE 15513
// begin tmp := result ;
15440: LD_ADDR_VAR 0 9
15444: PUSH
15445: LD_VAR 0 6
15449: ST_TO_ADDR
// for i = tmp downto 1 do
15450: LD_ADDR_VAR 0 7
15454: PUSH
15455: DOUBLE
15456: LD_VAR 0 9
15460: INC
15461: ST_TO_ADDR
15462: LD_INT 1
15464: PUSH
15465: FOR_DOWNTO
15466: IFFALSE 15511
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15468: LD_ADDR_VAR 0 6
15472: PUSH
15473: LD_VAR 0 6
15477: PPUSH
15478: LD_VAR 0 9
15482: PUSH
15483: LD_VAR 0 7
15487: MINUS
15488: PUSH
15489: LD_INT 1
15491: PLUS
15492: PPUSH
15493: LD_VAR 0 9
15497: PUSH
15498: LD_VAR 0 7
15502: ARRAY
15503: PPUSH
15504: CALL_OW 1
15508: ST_TO_ADDR
15509: GO 15465
15511: POP
15512: POP
// end ; tmp := [ ] ;
15513: LD_ADDR_VAR 0 9
15517: PUSH
15518: EMPTY
15519: ST_TO_ADDR
// if mode then
15520: LD_VAR 0 5
15524: IFFALSE 15593
// begin for i = 1 to result do
15526: LD_ADDR_VAR 0 7
15530: PUSH
15531: DOUBLE
15532: LD_INT 1
15534: DEC
15535: ST_TO_ADDR
15536: LD_VAR 0 6
15540: PUSH
15541: FOR_TO
15542: IFFALSE 15581
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15544: LD_ADDR_VAR 0 9
15548: PUSH
15549: LD_VAR 0 9
15553: PPUSH
15554: LD_VAR 0 7
15558: PPUSH
15559: LD_VAR 0 6
15563: PUSH
15564: LD_VAR 0 7
15568: ARRAY
15569: PUSH
15570: LD_INT 1
15572: ARRAY
15573: PPUSH
15574: CALL_OW 1
15578: ST_TO_ADDR
15579: GO 15541
15581: POP
15582: POP
// result := tmp ;
15583: LD_ADDR_VAR 0 6
15587: PUSH
15588: LD_VAR 0 9
15592: ST_TO_ADDR
// end ; end ;
15593: LD_VAR 0 6
15597: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15598: LD_INT 0
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
15604: PPUSH
15605: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15606: LD_ADDR_VAR 0 5
15610: PUSH
15611: LD_INT 0
15613: PUSH
15614: LD_INT 0
15616: PUSH
15617: LD_INT 0
15619: PUSH
15620: EMPTY
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: ST_TO_ADDR
// if not x or not y then
15628: LD_VAR 0 2
15632: NOT
15633: PUSH
15634: LD_VAR 0 3
15638: NOT
15639: OR
15640: IFFALSE 15644
// exit ;
15642: GO 17294
// if not range then
15644: LD_VAR 0 4
15648: NOT
15649: IFFALSE 15659
// range := 10 ;
15651: LD_ADDR_VAR 0 4
15655: PUSH
15656: LD_INT 10
15658: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15659: LD_ADDR_VAR 0 8
15663: PUSH
15664: LD_INT 81
15666: PUSH
15667: LD_VAR 0 1
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 92
15678: PUSH
15679: LD_VAR 0 2
15683: PUSH
15684: LD_VAR 0 3
15688: PUSH
15689: LD_VAR 0 4
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 3
15702: PUSH
15703: LD_INT 21
15705: PUSH
15706: LD_INT 3
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: PPUSH
15722: CALL_OW 69
15726: ST_TO_ADDR
// if not tmp then
15727: LD_VAR 0 8
15731: NOT
15732: IFFALSE 15736
// exit ;
15734: GO 17294
// for i in tmp do
15736: LD_ADDR_VAR 0 6
15740: PUSH
15741: LD_VAR 0 8
15745: PUSH
15746: FOR_IN
15747: IFFALSE 17269
// begin points := [ 0 , 0 , 0 ] ;
15749: LD_ADDR_VAR 0 9
15753: PUSH
15754: LD_INT 0
15756: PUSH
15757: LD_INT 0
15759: PUSH
15760: LD_INT 0
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: LIST
15767: ST_TO_ADDR
// bpoints := 1 ;
15768: LD_ADDR_VAR 0 10
15772: PUSH
15773: LD_INT 1
15775: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15776: LD_VAR 0 6
15780: PPUSH
15781: CALL_OW 247
15785: PUSH
15786: LD_INT 1
15788: DOUBLE
15789: EQUAL
15790: IFTRUE 15794
15792: GO 16372
15794: POP
// begin if GetClass ( i ) = 1 then
15795: LD_VAR 0 6
15799: PPUSH
15800: CALL_OW 257
15804: PUSH
15805: LD_INT 1
15807: EQUAL
15808: IFFALSE 15829
// points := [ 10 , 5 , 3 ] ;
15810: LD_ADDR_VAR 0 9
15814: PUSH
15815: LD_INT 10
15817: PUSH
15818: LD_INT 5
15820: PUSH
15821: LD_INT 3
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: LIST
15828: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15829: LD_VAR 0 6
15833: PPUSH
15834: CALL_OW 257
15838: PUSH
15839: LD_INT 2
15841: PUSH
15842: LD_INT 3
15844: PUSH
15845: LD_INT 4
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: IN
15853: IFFALSE 15874
// points := [ 3 , 2 , 1 ] ;
15855: LD_ADDR_VAR 0 9
15859: PUSH
15860: LD_INT 3
15862: PUSH
15863: LD_INT 2
15865: PUSH
15866: LD_INT 1
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: LIST
15873: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15874: LD_VAR 0 6
15878: PPUSH
15879: CALL_OW 257
15883: PUSH
15884: LD_INT 5
15886: EQUAL
15887: IFFALSE 15908
// points := [ 130 , 5 , 2 ] ;
15889: LD_ADDR_VAR 0 9
15893: PUSH
15894: LD_INT 130
15896: PUSH
15897: LD_INT 5
15899: PUSH
15900: LD_INT 2
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15908: LD_VAR 0 6
15912: PPUSH
15913: CALL_OW 257
15917: PUSH
15918: LD_INT 8
15920: EQUAL
15921: IFFALSE 15942
// points := [ 35 , 35 , 30 ] ;
15923: LD_ADDR_VAR 0 9
15927: PUSH
15928: LD_INT 35
15930: PUSH
15931: LD_INT 35
15933: PUSH
15934: LD_INT 30
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15942: LD_VAR 0 6
15946: PPUSH
15947: CALL_OW 257
15951: PUSH
15952: LD_INT 9
15954: EQUAL
15955: IFFALSE 15976
// points := [ 20 , 55 , 40 ] ;
15957: LD_ADDR_VAR 0 9
15961: PUSH
15962: LD_INT 20
15964: PUSH
15965: LD_INT 55
15967: PUSH
15968: LD_INT 40
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: LIST
15975: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15976: LD_VAR 0 6
15980: PPUSH
15981: CALL_OW 257
15985: PUSH
15986: LD_INT 12
15988: PUSH
15989: LD_INT 16
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: IN
15996: IFFALSE 16017
// points := [ 5 , 3 , 2 ] ;
15998: LD_ADDR_VAR 0 9
16002: PUSH
16003: LD_INT 5
16005: PUSH
16006: LD_INT 3
16008: PUSH
16009: LD_INT 2
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: LIST
16016: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16017: LD_VAR 0 6
16021: PPUSH
16022: CALL_OW 257
16026: PUSH
16027: LD_INT 17
16029: EQUAL
16030: IFFALSE 16051
// points := [ 100 , 50 , 75 ] ;
16032: LD_ADDR_VAR 0 9
16036: PUSH
16037: LD_INT 100
16039: PUSH
16040: LD_INT 50
16042: PUSH
16043: LD_INT 75
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16051: LD_VAR 0 6
16055: PPUSH
16056: CALL_OW 257
16060: PUSH
16061: LD_INT 15
16063: EQUAL
16064: IFFALSE 16085
// points := [ 10 , 5 , 3 ] ;
16066: LD_ADDR_VAR 0 9
16070: PUSH
16071: LD_INT 10
16073: PUSH
16074: LD_INT 5
16076: PUSH
16077: LD_INT 3
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: LIST
16084: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16085: LD_VAR 0 6
16089: PPUSH
16090: CALL_OW 257
16094: PUSH
16095: LD_INT 14
16097: EQUAL
16098: IFFALSE 16119
// points := [ 10 , 0 , 0 ] ;
16100: LD_ADDR_VAR 0 9
16104: PUSH
16105: LD_INT 10
16107: PUSH
16108: LD_INT 0
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: LIST
16118: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16119: LD_VAR 0 6
16123: PPUSH
16124: CALL_OW 257
16128: PUSH
16129: LD_INT 11
16131: EQUAL
16132: IFFALSE 16153
// points := [ 30 , 10 , 5 ] ;
16134: LD_ADDR_VAR 0 9
16138: PUSH
16139: LD_INT 30
16141: PUSH
16142: LD_INT 10
16144: PUSH
16145: LD_INT 5
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: LIST
16152: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16153: LD_VAR 0 1
16157: PPUSH
16158: LD_INT 5
16160: PPUSH
16161: CALL_OW 321
16165: PUSH
16166: LD_INT 2
16168: EQUAL
16169: IFFALSE 16186
// bpoints := bpoints * 1.8 ;
16171: LD_ADDR_VAR 0 10
16175: PUSH
16176: LD_VAR 0 10
16180: PUSH
16181: LD_REAL  1.80000000000000E+0000
16184: MUL
16185: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16186: LD_VAR 0 6
16190: PPUSH
16191: CALL_OW 257
16195: PUSH
16196: LD_INT 1
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: LD_INT 3
16204: PUSH
16205: LD_INT 4
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: IN
16214: PUSH
16215: LD_VAR 0 1
16219: PPUSH
16220: LD_INT 51
16222: PPUSH
16223: CALL_OW 321
16227: PUSH
16228: LD_INT 2
16230: EQUAL
16231: AND
16232: IFFALSE 16249
// bpoints := bpoints * 1.2 ;
16234: LD_ADDR_VAR 0 10
16238: PUSH
16239: LD_VAR 0 10
16243: PUSH
16244: LD_REAL  1.20000000000000E+0000
16247: MUL
16248: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16249: LD_VAR 0 6
16253: PPUSH
16254: CALL_OW 257
16258: PUSH
16259: LD_INT 5
16261: PUSH
16262: LD_INT 7
16264: PUSH
16265: LD_INT 9
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: LIST
16272: IN
16273: PUSH
16274: LD_VAR 0 1
16278: PPUSH
16279: LD_INT 52
16281: PPUSH
16282: CALL_OW 321
16286: PUSH
16287: LD_INT 2
16289: EQUAL
16290: AND
16291: IFFALSE 16308
// bpoints := bpoints * 1.5 ;
16293: LD_ADDR_VAR 0 10
16297: PUSH
16298: LD_VAR 0 10
16302: PUSH
16303: LD_REAL  1.50000000000000E+0000
16306: MUL
16307: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16308: LD_VAR 0 1
16312: PPUSH
16313: LD_INT 66
16315: PPUSH
16316: CALL_OW 321
16320: PUSH
16321: LD_INT 2
16323: EQUAL
16324: IFFALSE 16341
// bpoints := bpoints * 1.1 ;
16326: LD_ADDR_VAR 0 10
16330: PUSH
16331: LD_VAR 0 10
16335: PUSH
16336: LD_REAL  1.10000000000000E+0000
16339: MUL
16340: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16341: LD_ADDR_VAR 0 10
16345: PUSH
16346: LD_VAR 0 10
16350: PUSH
16351: LD_VAR 0 6
16355: PPUSH
16356: LD_INT 1
16358: PPUSH
16359: CALL_OW 259
16363: PUSH
16364: LD_REAL  1.15000000000000E+0000
16367: MUL
16368: MUL
16369: ST_TO_ADDR
// end ; unit_vehicle :
16370: GO 17198
16372: LD_INT 2
16374: DOUBLE
16375: EQUAL
16376: IFTRUE 16380
16378: GO 17186
16380: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16381: LD_VAR 0 6
16385: PPUSH
16386: CALL_OW 264
16390: PUSH
16391: LD_INT 2
16393: PUSH
16394: LD_INT 42
16396: PUSH
16397: LD_INT 24
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: IN
16405: IFFALSE 16426
// points := [ 25 , 5 , 3 ] ;
16407: LD_ADDR_VAR 0 9
16411: PUSH
16412: LD_INT 25
16414: PUSH
16415: LD_INT 5
16417: PUSH
16418: LD_INT 3
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16426: LD_VAR 0 6
16430: PPUSH
16431: CALL_OW 264
16435: PUSH
16436: LD_INT 4
16438: PUSH
16439: LD_INT 43
16441: PUSH
16442: LD_INT 25
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: LIST
16449: IN
16450: IFFALSE 16471
// points := [ 40 , 15 , 5 ] ;
16452: LD_ADDR_VAR 0 9
16456: PUSH
16457: LD_INT 40
16459: PUSH
16460: LD_INT 15
16462: PUSH
16463: LD_INT 5
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: LIST
16470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16471: LD_VAR 0 6
16475: PPUSH
16476: CALL_OW 264
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: LD_INT 23
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: IN
16491: IFFALSE 16512
// points := [ 7 , 25 , 8 ] ;
16493: LD_ADDR_VAR 0 9
16497: PUSH
16498: LD_INT 7
16500: PUSH
16501: LD_INT 25
16503: PUSH
16504: LD_INT 8
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16512: LD_VAR 0 6
16516: PPUSH
16517: CALL_OW 264
16521: PUSH
16522: LD_INT 5
16524: PUSH
16525: LD_INT 27
16527: PUSH
16528: LD_INT 44
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: IN
16536: IFFALSE 16557
// points := [ 14 , 50 , 16 ] ;
16538: LD_ADDR_VAR 0 9
16542: PUSH
16543: LD_INT 14
16545: PUSH
16546: LD_INT 50
16548: PUSH
16549: LD_INT 16
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16557: LD_VAR 0 6
16561: PPUSH
16562: CALL_OW 264
16566: PUSH
16567: LD_INT 6
16569: PUSH
16570: LD_INT 46
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: IN
16577: IFFALSE 16598
// points := [ 32 , 120 , 70 ] ;
16579: LD_ADDR_VAR 0 9
16583: PUSH
16584: LD_INT 32
16586: PUSH
16587: LD_INT 120
16589: PUSH
16590: LD_INT 70
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: LIST
16597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16598: LD_VAR 0 6
16602: PPUSH
16603: CALL_OW 264
16607: PUSH
16608: LD_INT 7
16610: PUSH
16611: LD_INT 28
16613: PUSH
16614: LD_INT 45
16616: PUSH
16617: LD_INT 92
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: IN
16626: IFFALSE 16647
// points := [ 35 , 20 , 45 ] ;
16628: LD_ADDR_VAR 0 9
16632: PUSH
16633: LD_INT 35
16635: PUSH
16636: LD_INT 20
16638: PUSH
16639: LD_INT 45
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: LIST
16646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16647: LD_VAR 0 6
16651: PPUSH
16652: CALL_OW 264
16656: PUSH
16657: LD_INT 47
16659: PUSH
16660: EMPTY
16661: LIST
16662: IN
16663: IFFALSE 16684
// points := [ 67 , 45 , 75 ] ;
16665: LD_ADDR_VAR 0 9
16669: PUSH
16670: LD_INT 67
16672: PUSH
16673: LD_INT 45
16675: PUSH
16676: LD_INT 75
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16684: LD_VAR 0 6
16688: PPUSH
16689: CALL_OW 264
16693: PUSH
16694: LD_INT 26
16696: PUSH
16697: EMPTY
16698: LIST
16699: IN
16700: IFFALSE 16721
// points := [ 120 , 30 , 80 ] ;
16702: LD_ADDR_VAR 0 9
16706: PUSH
16707: LD_INT 120
16709: PUSH
16710: LD_INT 30
16712: PUSH
16713: LD_INT 80
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16721: LD_VAR 0 6
16725: PPUSH
16726: CALL_OW 264
16730: PUSH
16731: LD_INT 22
16733: PUSH
16734: EMPTY
16735: LIST
16736: IN
16737: IFFALSE 16758
// points := [ 40 , 1 , 1 ] ;
16739: LD_ADDR_VAR 0 9
16743: PUSH
16744: LD_INT 40
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: LIST
16757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16758: LD_VAR 0 6
16762: PPUSH
16763: CALL_OW 264
16767: PUSH
16768: LD_INT 29
16770: PUSH
16771: EMPTY
16772: LIST
16773: IN
16774: IFFALSE 16795
// points := [ 70 , 200 , 400 ] ;
16776: LD_ADDR_VAR 0 9
16780: PUSH
16781: LD_INT 70
16783: PUSH
16784: LD_INT 200
16786: PUSH
16787: LD_INT 400
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: LIST
16794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16795: LD_VAR 0 6
16799: PPUSH
16800: CALL_OW 264
16804: PUSH
16805: LD_INT 14
16807: PUSH
16808: LD_INT 53
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: IN
16815: IFFALSE 16836
// points := [ 40 , 10 , 20 ] ;
16817: LD_ADDR_VAR 0 9
16821: PUSH
16822: LD_INT 40
16824: PUSH
16825: LD_INT 10
16827: PUSH
16828: LD_INT 20
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: LIST
16835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16836: LD_VAR 0 6
16840: PPUSH
16841: CALL_OW 264
16845: PUSH
16846: LD_INT 9
16848: PUSH
16849: EMPTY
16850: LIST
16851: IN
16852: IFFALSE 16873
// points := [ 5 , 70 , 20 ] ;
16854: LD_ADDR_VAR 0 9
16858: PUSH
16859: LD_INT 5
16861: PUSH
16862: LD_INT 70
16864: PUSH
16865: LD_INT 20
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: LIST
16872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16873: LD_VAR 0 6
16877: PPUSH
16878: CALL_OW 264
16882: PUSH
16883: LD_INT 10
16885: PUSH
16886: EMPTY
16887: LIST
16888: IN
16889: IFFALSE 16910
// points := [ 35 , 110 , 70 ] ;
16891: LD_ADDR_VAR 0 9
16895: PUSH
16896: LD_INT 35
16898: PUSH
16899: LD_INT 110
16901: PUSH
16902: LD_INT 70
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: LIST
16909: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16910: LD_VAR 0 6
16914: PPUSH
16915: CALL_OW 265
16919: PUSH
16920: LD_INT 25
16922: EQUAL
16923: IFFALSE 16944
// points := [ 80 , 65 , 100 ] ;
16925: LD_ADDR_VAR 0 9
16929: PUSH
16930: LD_INT 80
16932: PUSH
16933: LD_INT 65
16935: PUSH
16936: LD_INT 100
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: LIST
16943: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16944: LD_VAR 0 6
16948: PPUSH
16949: CALL_OW 263
16953: PUSH
16954: LD_INT 1
16956: EQUAL
16957: IFFALSE 16992
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16959: LD_ADDR_VAR 0 10
16963: PUSH
16964: LD_VAR 0 10
16968: PUSH
16969: LD_VAR 0 6
16973: PPUSH
16974: CALL_OW 311
16978: PPUSH
16979: LD_INT 3
16981: PPUSH
16982: CALL_OW 259
16986: PUSH
16987: LD_INT 4
16989: MUL
16990: MUL
16991: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16992: LD_VAR 0 6
16996: PPUSH
16997: CALL_OW 263
17001: PUSH
17002: LD_INT 2
17004: EQUAL
17005: IFFALSE 17056
// begin j := IsControledBy ( i ) ;
17007: LD_ADDR_VAR 0 7
17011: PUSH
17012: LD_VAR 0 6
17016: PPUSH
17017: CALL_OW 312
17021: ST_TO_ADDR
// if j then
17022: LD_VAR 0 7
17026: IFFALSE 17056
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17028: LD_ADDR_VAR 0 10
17032: PUSH
17033: LD_VAR 0 10
17037: PUSH
17038: LD_VAR 0 7
17042: PPUSH
17043: LD_INT 3
17045: PPUSH
17046: CALL_OW 259
17050: PUSH
17051: LD_INT 3
17053: MUL
17054: MUL
17055: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17056: LD_VAR 0 6
17060: PPUSH
17061: CALL_OW 264
17065: PUSH
17066: LD_INT 5
17068: PUSH
17069: LD_INT 6
17071: PUSH
17072: LD_INT 46
17074: PUSH
17075: LD_INT 44
17077: PUSH
17078: LD_INT 47
17080: PUSH
17081: LD_INT 45
17083: PUSH
17084: LD_INT 28
17086: PUSH
17087: LD_INT 7
17089: PUSH
17090: LD_INT 27
17092: PUSH
17093: LD_INT 29
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: IN
17108: PUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: LD_INT 52
17116: PPUSH
17117: CALL_OW 321
17121: PUSH
17122: LD_INT 2
17124: EQUAL
17125: AND
17126: IFFALSE 17143
// bpoints := bpoints * 1.2 ;
17128: LD_ADDR_VAR 0 10
17132: PUSH
17133: LD_VAR 0 10
17137: PUSH
17138: LD_REAL  1.20000000000000E+0000
17141: MUL
17142: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17143: LD_VAR 0 6
17147: PPUSH
17148: CALL_OW 264
17152: PUSH
17153: LD_INT 6
17155: PUSH
17156: LD_INT 46
17158: PUSH
17159: LD_INT 47
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: IN
17167: IFFALSE 17184
// bpoints := bpoints * 1.2 ;
17169: LD_ADDR_VAR 0 10
17173: PUSH
17174: LD_VAR 0 10
17178: PUSH
17179: LD_REAL  1.20000000000000E+0000
17182: MUL
17183: ST_TO_ADDR
// end ; unit_building :
17184: GO 17198
17186: LD_INT 3
17188: DOUBLE
17189: EQUAL
17190: IFTRUE 17194
17192: GO 17197
17194: POP
// ; end ;
17195: GO 17198
17197: POP
// for j = 1 to 3 do
17198: LD_ADDR_VAR 0 7
17202: PUSH
17203: DOUBLE
17204: LD_INT 1
17206: DEC
17207: ST_TO_ADDR
17208: LD_INT 3
17210: PUSH
17211: FOR_TO
17212: IFFALSE 17265
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17214: LD_ADDR_VAR 0 5
17218: PUSH
17219: LD_VAR 0 5
17223: PPUSH
17224: LD_VAR 0 7
17228: PPUSH
17229: LD_VAR 0 5
17233: PUSH
17234: LD_VAR 0 7
17238: ARRAY
17239: PUSH
17240: LD_VAR 0 9
17244: PUSH
17245: LD_VAR 0 7
17249: ARRAY
17250: PUSH
17251: LD_VAR 0 10
17255: MUL
17256: PLUS
17257: PPUSH
17258: CALL_OW 1
17262: ST_TO_ADDR
17263: GO 17211
17265: POP
17266: POP
// end ;
17267: GO 15746
17269: POP
17270: POP
// result := Replace ( result , 4 , tmp ) ;
17271: LD_ADDR_VAR 0 5
17275: PUSH
17276: LD_VAR 0 5
17280: PPUSH
17281: LD_INT 4
17283: PPUSH
17284: LD_VAR 0 8
17288: PPUSH
17289: CALL_OW 1
17293: ST_TO_ADDR
// end ;
17294: LD_VAR 0 5
17298: RET
// export function DangerAtRange ( unit , range ) ; begin
17299: LD_INT 0
17301: PPUSH
// if not unit then
17302: LD_VAR 0 1
17306: NOT
17307: IFFALSE 17311
// exit ;
17309: GO 17356
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_VAR 0 1
17320: PPUSH
17321: CALL_OW 255
17325: PPUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 250
17335: PPUSH
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 251
17345: PPUSH
17346: LD_VAR 0 2
17350: PPUSH
17351: CALL 15598 0 4
17355: ST_TO_ADDR
// end ;
17356: LD_VAR 0 3
17360: RET
// export function DangerInArea ( side , area ) ; begin
17361: LD_INT 0
17363: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17364: LD_ADDR_VAR 0 3
17368: PUSH
17369: LD_VAR 0 2
17373: PPUSH
17374: LD_INT 81
17376: PUSH
17377: LD_VAR 0 1
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PPUSH
17386: CALL_OW 70
17390: ST_TO_ADDR
// end ;
17391: LD_VAR 0 3
17395: RET
// export function IsExtension ( b ) ; begin
17396: LD_INT 0
17398: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17399: LD_ADDR_VAR 0 2
17403: PUSH
17404: LD_VAR 0 1
17408: PUSH
17409: LD_INT 23
17411: PUSH
17412: LD_INT 20
17414: PUSH
17415: LD_INT 22
17417: PUSH
17418: LD_INT 17
17420: PUSH
17421: LD_INT 24
17423: PUSH
17424: LD_INT 21
17426: PUSH
17427: LD_INT 19
17429: PUSH
17430: LD_INT 16
17432: PUSH
17433: LD_INT 25
17435: PUSH
17436: LD_INT 18
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: IN
17451: ST_TO_ADDR
// end ;
17452: LD_VAR 0 2
17456: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17457: LD_INT 0
17459: PPUSH
17460: PPUSH
17461: PPUSH
// result := [ ] ;
17462: LD_ADDR_VAR 0 4
17466: PUSH
17467: EMPTY
17468: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17469: LD_ADDR_VAR 0 5
17473: PUSH
17474: LD_VAR 0 2
17478: PPUSH
17479: LD_INT 21
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PPUSH
17489: CALL_OW 70
17493: ST_TO_ADDR
// if not tmp then
17494: LD_VAR 0 5
17498: NOT
17499: IFFALSE 17503
// exit ;
17501: GO 17567
// if checkLink then
17503: LD_VAR 0 3
17507: IFFALSE 17557
// begin for i in tmp do
17509: LD_ADDR_VAR 0 6
17513: PUSH
17514: LD_VAR 0 5
17518: PUSH
17519: FOR_IN
17520: IFFALSE 17555
// if GetBase ( i ) <> base then
17522: LD_VAR 0 6
17526: PPUSH
17527: CALL_OW 274
17531: PUSH
17532: LD_VAR 0 1
17536: NONEQUAL
17537: IFFALSE 17553
// ComLinkToBase ( base , i ) ;
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_VAR 0 6
17548: PPUSH
17549: CALL_OW 169
17553: GO 17519
17555: POP
17556: POP
// end ; result := tmp ;
17557: LD_ADDR_VAR 0 4
17561: PUSH
17562: LD_VAR 0 5
17566: ST_TO_ADDR
// end ;
17567: LD_VAR 0 4
17571: RET
// export function ComComplete ( units , b ) ; var i ; begin
17572: LD_INT 0
17574: PPUSH
17575: PPUSH
// if not units then
17576: LD_VAR 0 1
17580: NOT
17581: IFFALSE 17585
// exit ;
17583: GO 17675
// for i in units do
17585: LD_ADDR_VAR 0 4
17589: PUSH
17590: LD_VAR 0 1
17594: PUSH
17595: FOR_IN
17596: IFFALSE 17673
// if BuildingStatus ( b ) = bs_build then
17598: LD_VAR 0 2
17602: PPUSH
17603: CALL_OW 461
17607: PUSH
17608: LD_INT 1
17610: EQUAL
17611: IFFALSE 17671
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17613: LD_VAR 0 4
17617: PPUSH
17618: LD_STRING h
17620: PUSH
17621: LD_VAR 0 2
17625: PPUSH
17626: CALL_OW 250
17630: PUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: CALL_OW 251
17640: PUSH
17641: LD_VAR 0 2
17645: PUSH
17646: LD_INT 0
17648: PUSH
17649: LD_INT 0
17651: PUSH
17652: LD_INT 0
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: PPUSH
17667: CALL_OW 446
17671: GO 17595
17673: POP
17674: POP
// end ;
17675: LD_VAR 0 3
17679: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17680: LD_INT 0
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17688: LD_VAR 0 1
17692: NOT
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 263
17703: PUSH
17704: LD_INT 2
17706: NONEQUAL
17707: OR
17708: IFFALSE 17712
// exit ;
17710: GO 18028
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17712: LD_ADDR_VAR 0 6
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_VAR 0 1
17724: PPUSH
17725: CALL_OW 255
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 2
17736: PUSH
17737: LD_INT 30
17739: PUSH
17740: LD_INT 36
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 34
17749: PUSH
17750: LD_INT 31
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PPUSH
17766: CALL_OW 69
17770: ST_TO_ADDR
// if not tmp then
17771: LD_VAR 0 6
17775: NOT
17776: IFFALSE 17780
// exit ;
17778: GO 18028
// result := [ ] ;
17780: LD_ADDR_VAR 0 2
17784: PUSH
17785: EMPTY
17786: ST_TO_ADDR
// for i in tmp do
17787: LD_ADDR_VAR 0 3
17791: PUSH
17792: LD_VAR 0 6
17796: PUSH
17797: FOR_IN
17798: IFFALSE 17869
// begin t := UnitsInside ( i ) ;
17800: LD_ADDR_VAR 0 4
17804: PUSH
17805: LD_VAR 0 3
17809: PPUSH
17810: CALL_OW 313
17814: ST_TO_ADDR
// if t then
17815: LD_VAR 0 4
17819: IFFALSE 17867
// for j in t do
17821: LD_ADDR_VAR 0 7
17825: PUSH
17826: LD_VAR 0 4
17830: PUSH
17831: FOR_IN
17832: IFFALSE 17865
// result := Replace ( result , result + 1 , j ) ;
17834: LD_ADDR_VAR 0 2
17838: PUSH
17839: LD_VAR 0 2
17843: PPUSH
17844: LD_VAR 0 2
17848: PUSH
17849: LD_INT 1
17851: PLUS
17852: PPUSH
17853: LD_VAR 0 7
17857: PPUSH
17858: CALL_OW 1
17862: ST_TO_ADDR
17863: GO 17831
17865: POP
17866: POP
// end ;
17867: GO 17797
17869: POP
17870: POP
// if not result then
17871: LD_VAR 0 2
17875: NOT
17876: IFFALSE 17880
// exit ;
17878: GO 18028
// mech := result [ 1 ] ;
17880: LD_ADDR_VAR 0 5
17884: PUSH
17885: LD_VAR 0 2
17889: PUSH
17890: LD_INT 1
17892: ARRAY
17893: ST_TO_ADDR
// if result > 1 then
17894: LD_VAR 0 2
17898: PUSH
17899: LD_INT 1
17901: GREATER
17902: IFFALSE 18014
// begin for i = 2 to result do
17904: LD_ADDR_VAR 0 3
17908: PUSH
17909: DOUBLE
17910: LD_INT 2
17912: DEC
17913: ST_TO_ADDR
17914: LD_VAR 0 2
17918: PUSH
17919: FOR_TO
17920: IFFALSE 18012
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17922: LD_ADDR_VAR 0 4
17926: PUSH
17927: LD_VAR 0 2
17931: PUSH
17932: LD_VAR 0 3
17936: ARRAY
17937: PPUSH
17938: LD_INT 3
17940: PPUSH
17941: CALL_OW 259
17945: PUSH
17946: LD_VAR 0 2
17950: PUSH
17951: LD_VAR 0 3
17955: ARRAY
17956: PPUSH
17957: CALL_OW 432
17961: MINUS
17962: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17963: LD_VAR 0 4
17967: PUSH
17968: LD_VAR 0 5
17972: PPUSH
17973: LD_INT 3
17975: PPUSH
17976: CALL_OW 259
17980: PUSH
17981: LD_VAR 0 5
17985: PPUSH
17986: CALL_OW 432
17990: MINUS
17991: GREATEREQUAL
17992: IFFALSE 18010
// mech := result [ i ] ;
17994: LD_ADDR_VAR 0 5
17998: PUSH
17999: LD_VAR 0 2
18003: PUSH
18004: LD_VAR 0 3
18008: ARRAY
18009: ST_TO_ADDR
// end ;
18010: GO 17919
18012: POP
18013: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18014: LD_VAR 0 1
18018: PPUSH
18019: LD_VAR 0 5
18023: PPUSH
18024: CALL_OW 135
// end ;
18028: LD_VAR 0 2
18032: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18033: LD_INT 0
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
18039: PPUSH
18040: PPUSH
18041: PPUSH
18042: PPUSH
18043: PPUSH
18044: PPUSH
18045: PPUSH
18046: PPUSH
18047: PPUSH
// result := [ ] ;
18048: LD_ADDR_VAR 0 7
18052: PUSH
18053: EMPTY
18054: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18055: LD_VAR 0 1
18059: PPUSH
18060: CALL_OW 266
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: IN
18075: NOT
18076: IFFALSE 18080
// exit ;
18078: GO 19714
// if name then
18080: LD_VAR 0 3
18084: IFFALSE 18100
// SetBName ( base_dep , name ) ;
18086: LD_VAR 0 1
18090: PPUSH
18091: LD_VAR 0 3
18095: PPUSH
18096: CALL_OW 500
// base := GetBase ( base_dep ) ;
18100: LD_ADDR_VAR 0 15
18104: PUSH
18105: LD_VAR 0 1
18109: PPUSH
18110: CALL_OW 274
18114: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18115: LD_ADDR_VAR 0 16
18119: PUSH
18120: LD_VAR 0 1
18124: PPUSH
18125: CALL_OW 255
18129: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18130: LD_ADDR_VAR 0 17
18134: PUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 248
18144: ST_TO_ADDR
// if sources then
18145: LD_VAR 0 5
18149: IFFALSE 18196
// for i = 1 to 3 do
18151: LD_ADDR_VAR 0 8
18155: PUSH
18156: DOUBLE
18157: LD_INT 1
18159: DEC
18160: ST_TO_ADDR
18161: LD_INT 3
18163: PUSH
18164: FOR_TO
18165: IFFALSE 18194
// AddResourceType ( base , i , sources [ i ] ) ;
18167: LD_VAR 0 15
18171: PPUSH
18172: LD_VAR 0 8
18176: PPUSH
18177: LD_VAR 0 5
18181: PUSH
18182: LD_VAR 0 8
18186: ARRAY
18187: PPUSH
18188: CALL_OW 276
18192: GO 18164
18194: POP
18195: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18196: LD_ADDR_VAR 0 18
18200: PUSH
18201: LD_VAR 0 15
18205: PPUSH
18206: LD_VAR 0 2
18210: PPUSH
18211: LD_INT 1
18213: PPUSH
18214: CALL 17457 0 3
18218: ST_TO_ADDR
// InitHc ;
18219: CALL_OW 19
// InitUc ;
18223: CALL_OW 18
// uc_side := side ;
18227: LD_ADDR_OWVAR 20
18231: PUSH
18232: LD_VAR 0 16
18236: ST_TO_ADDR
// uc_nation := nation ;
18237: LD_ADDR_OWVAR 21
18241: PUSH
18242: LD_VAR 0 17
18246: ST_TO_ADDR
// if buildings then
18247: LD_VAR 0 18
18251: IFFALSE 19573
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18253: LD_ADDR_VAR 0 19
18257: PUSH
18258: LD_VAR 0 18
18262: PPUSH
18263: LD_INT 2
18265: PUSH
18266: LD_INT 30
18268: PUSH
18269: LD_INT 29
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 30
18278: PUSH
18279: LD_INT 30
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 72
18295: ST_TO_ADDR
// if tmp then
18296: LD_VAR 0 19
18300: IFFALSE 18348
// for i in tmp do
18302: LD_ADDR_VAR 0 8
18306: PUSH
18307: LD_VAR 0 19
18311: PUSH
18312: FOR_IN
18313: IFFALSE 18346
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18315: LD_VAR 0 8
18319: PPUSH
18320: CALL_OW 250
18324: PPUSH
18325: LD_VAR 0 8
18329: PPUSH
18330: CALL_OW 251
18334: PPUSH
18335: LD_VAR 0 16
18339: PPUSH
18340: CALL_OW 441
18344: GO 18312
18346: POP
18347: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18348: LD_VAR 0 18
18352: PPUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 30
18358: PUSH
18359: LD_INT 32
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 30
18368: PUSH
18369: LD_INT 33
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PPUSH
18381: CALL_OW 72
18385: IFFALSE 18473
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18387: LD_ADDR_VAR 0 8
18391: PUSH
18392: LD_VAR 0 18
18396: PPUSH
18397: LD_INT 2
18399: PUSH
18400: LD_INT 30
18402: PUSH
18403: LD_INT 32
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 30
18412: PUSH
18413: LD_INT 33
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: PPUSH
18425: CALL_OW 72
18429: PUSH
18430: FOR_IN
18431: IFFALSE 18471
// begin if not GetBWeapon ( i ) then
18433: LD_VAR 0 8
18437: PPUSH
18438: CALL_OW 269
18442: NOT
18443: IFFALSE 18469
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18445: LD_VAR 0 8
18449: PPUSH
18450: LD_VAR 0 8
18454: PPUSH
18455: LD_VAR 0 2
18459: PPUSH
18460: CALL 19719 0 2
18464: PPUSH
18465: CALL_OW 431
// end ;
18469: GO 18430
18471: POP
18472: POP
// end ; for i = 1 to personel do
18473: LD_ADDR_VAR 0 8
18477: PUSH
18478: DOUBLE
18479: LD_INT 1
18481: DEC
18482: ST_TO_ADDR
18483: LD_VAR 0 6
18487: PUSH
18488: FOR_TO
18489: IFFALSE 19553
// begin if i > 4 then
18491: LD_VAR 0 8
18495: PUSH
18496: LD_INT 4
18498: GREATER
18499: IFFALSE 18503
// break ;
18501: GO 19553
// case i of 1 :
18503: LD_VAR 0 8
18507: PUSH
18508: LD_INT 1
18510: DOUBLE
18511: EQUAL
18512: IFTRUE 18516
18514: GO 18596
18516: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18517: LD_ADDR_VAR 0 12
18521: PUSH
18522: LD_VAR 0 18
18526: PPUSH
18527: LD_INT 22
18529: PUSH
18530: LD_VAR 0 16
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 58
18541: PUSH
18542: EMPTY
18543: LIST
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: LD_INT 30
18550: PUSH
18551: LD_INT 32
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 30
18560: PUSH
18561: LD_INT 4
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 30
18570: PUSH
18571: LD_INT 5
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: PPUSH
18589: CALL_OW 72
18593: ST_TO_ADDR
18594: GO 18818
18596: LD_INT 2
18598: DOUBLE
18599: EQUAL
18600: IFTRUE 18604
18602: GO 18666
18604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18605: LD_ADDR_VAR 0 12
18609: PUSH
18610: LD_VAR 0 18
18614: PPUSH
18615: LD_INT 22
18617: PUSH
18618: LD_VAR 0 16
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 2
18629: PUSH
18630: LD_INT 30
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 30
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PPUSH
18659: CALL_OW 72
18663: ST_TO_ADDR
18664: GO 18818
18666: LD_INT 3
18668: DOUBLE
18669: EQUAL
18670: IFTRUE 18674
18672: GO 18736
18674: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18675: LD_ADDR_VAR 0 12
18679: PUSH
18680: LD_VAR 0 18
18684: PPUSH
18685: LD_INT 22
18687: PUSH
18688: LD_VAR 0 16
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: LD_INT 30
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 30
18712: PUSH
18713: LD_INT 3
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PPUSH
18729: CALL_OW 72
18733: ST_TO_ADDR
18734: GO 18818
18736: LD_INT 4
18738: DOUBLE
18739: EQUAL
18740: IFTRUE 18744
18742: GO 18817
18744: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18745: LD_ADDR_VAR 0 12
18749: PUSH
18750: LD_VAR 0 18
18754: PPUSH
18755: LD_INT 22
18757: PUSH
18758: LD_VAR 0 16
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 2
18769: PUSH
18770: LD_INT 30
18772: PUSH
18773: LD_INT 6
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 30
18782: PUSH
18783: LD_INT 7
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 30
18792: PUSH
18793: LD_INT 8
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PPUSH
18810: CALL_OW 72
18814: ST_TO_ADDR
18815: GO 18818
18817: POP
// if i = 1 then
18818: LD_VAR 0 8
18822: PUSH
18823: LD_INT 1
18825: EQUAL
18826: IFFALSE 18937
// begin tmp := [ ] ;
18828: LD_ADDR_VAR 0 19
18832: PUSH
18833: EMPTY
18834: ST_TO_ADDR
// for j in f do
18835: LD_ADDR_VAR 0 9
18839: PUSH
18840: LD_VAR 0 12
18844: PUSH
18845: FOR_IN
18846: IFFALSE 18919
// if GetBType ( j ) = b_bunker then
18848: LD_VAR 0 9
18852: PPUSH
18853: CALL_OW 266
18857: PUSH
18858: LD_INT 32
18860: EQUAL
18861: IFFALSE 18888
// tmp := Insert ( tmp , 1 , j ) else
18863: LD_ADDR_VAR 0 19
18867: PUSH
18868: LD_VAR 0 19
18872: PPUSH
18873: LD_INT 1
18875: PPUSH
18876: LD_VAR 0 9
18880: PPUSH
18881: CALL_OW 2
18885: ST_TO_ADDR
18886: GO 18917
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18888: LD_ADDR_VAR 0 19
18892: PUSH
18893: LD_VAR 0 19
18897: PPUSH
18898: LD_VAR 0 19
18902: PUSH
18903: LD_INT 1
18905: PLUS
18906: PPUSH
18907: LD_VAR 0 9
18911: PPUSH
18912: CALL_OW 2
18916: ST_TO_ADDR
18917: GO 18845
18919: POP
18920: POP
// if tmp then
18921: LD_VAR 0 19
18925: IFFALSE 18937
// f := tmp ;
18927: LD_ADDR_VAR 0 12
18931: PUSH
18932: LD_VAR 0 19
18936: ST_TO_ADDR
// end ; x := personel [ i ] ;
18937: LD_ADDR_VAR 0 13
18941: PUSH
18942: LD_VAR 0 6
18946: PUSH
18947: LD_VAR 0 8
18951: ARRAY
18952: ST_TO_ADDR
// if x = - 1 then
18953: LD_VAR 0 13
18957: PUSH
18958: LD_INT 1
18960: NEG
18961: EQUAL
18962: IFFALSE 19171
// begin for j in f do
18964: LD_ADDR_VAR 0 9
18968: PUSH
18969: LD_VAR 0 12
18973: PUSH
18974: FOR_IN
18975: IFFALSE 19167
// repeat InitHc ;
18977: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18981: LD_VAR 0 9
18985: PPUSH
18986: CALL_OW 266
18990: PUSH
18991: LD_INT 5
18993: EQUAL
18994: IFFALSE 19064
// begin if UnitsInside ( j ) < 3 then
18996: LD_VAR 0 9
19000: PPUSH
19001: CALL_OW 313
19005: PUSH
19006: LD_INT 3
19008: LESS
19009: IFFALSE 19045
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19011: LD_INT 0
19013: PPUSH
19014: LD_INT 5
19016: PUSH
19017: LD_INT 8
19019: PUSH
19020: LD_INT 9
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: PUSH
19028: LD_VAR 0 17
19032: ARRAY
19033: PPUSH
19034: LD_VAR 0 4
19038: PPUSH
19039: CALL_OW 380
19043: GO 19062
// PrepareHuman ( false , i , skill ) ;
19045: LD_INT 0
19047: PPUSH
19048: LD_VAR 0 8
19052: PPUSH
19053: LD_VAR 0 4
19057: PPUSH
19058: CALL_OW 380
// end else
19062: GO 19081
// PrepareHuman ( false , i , skill ) ;
19064: LD_INT 0
19066: PPUSH
19067: LD_VAR 0 8
19071: PPUSH
19072: LD_VAR 0 4
19076: PPUSH
19077: CALL_OW 380
// un := CreateHuman ;
19081: LD_ADDR_VAR 0 14
19085: PUSH
19086: CALL_OW 44
19090: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19091: LD_ADDR_VAR 0 7
19095: PUSH
19096: LD_VAR 0 7
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: LD_VAR 0 14
19108: PPUSH
19109: CALL_OW 2
19113: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19114: LD_VAR 0 14
19118: PPUSH
19119: LD_VAR 0 9
19123: PPUSH
19124: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19128: LD_VAR 0 9
19132: PPUSH
19133: CALL_OW 313
19137: PUSH
19138: LD_INT 6
19140: EQUAL
19141: PUSH
19142: LD_VAR 0 9
19146: PPUSH
19147: CALL_OW 266
19151: PUSH
19152: LD_INT 32
19154: PUSH
19155: LD_INT 31
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: IN
19162: OR
19163: IFFALSE 18977
19165: GO 18974
19167: POP
19168: POP
// end else
19169: GO 19551
// for j = 1 to x do
19171: LD_ADDR_VAR 0 9
19175: PUSH
19176: DOUBLE
19177: LD_INT 1
19179: DEC
19180: ST_TO_ADDR
19181: LD_VAR 0 13
19185: PUSH
19186: FOR_TO
19187: IFFALSE 19549
// begin InitHc ;
19189: CALL_OW 19
// if not f then
19193: LD_VAR 0 12
19197: NOT
19198: IFFALSE 19287
// begin PrepareHuman ( false , i , skill ) ;
19200: LD_INT 0
19202: PPUSH
19203: LD_VAR 0 8
19207: PPUSH
19208: LD_VAR 0 4
19212: PPUSH
19213: CALL_OW 380
// un := CreateHuman ;
19217: LD_ADDR_VAR 0 14
19221: PUSH
19222: CALL_OW 44
19226: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19227: LD_ADDR_VAR 0 7
19231: PUSH
19232: LD_VAR 0 7
19236: PPUSH
19237: LD_INT 1
19239: PPUSH
19240: LD_VAR 0 14
19244: PPUSH
19245: CALL_OW 2
19249: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19250: LD_VAR 0 14
19254: PPUSH
19255: LD_VAR 0 1
19259: PPUSH
19260: CALL_OW 250
19264: PPUSH
19265: LD_VAR 0 1
19269: PPUSH
19270: CALL_OW 251
19274: PPUSH
19275: LD_INT 10
19277: PPUSH
19278: LD_INT 0
19280: PPUSH
19281: CALL_OW 50
// continue ;
19285: GO 19186
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19287: LD_VAR 0 12
19291: PUSH
19292: LD_INT 1
19294: ARRAY
19295: PPUSH
19296: CALL_OW 313
19300: PUSH
19301: LD_VAR 0 12
19305: PUSH
19306: LD_INT 1
19308: ARRAY
19309: PPUSH
19310: CALL_OW 266
19314: PUSH
19315: LD_INT 32
19317: PUSH
19318: LD_INT 31
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: IN
19325: AND
19326: PUSH
19327: LD_VAR 0 12
19331: PUSH
19332: LD_INT 1
19334: ARRAY
19335: PPUSH
19336: CALL_OW 313
19340: PUSH
19341: LD_INT 6
19343: EQUAL
19344: OR
19345: IFFALSE 19365
// f := Delete ( f , 1 ) ;
19347: LD_ADDR_VAR 0 12
19351: PUSH
19352: LD_VAR 0 12
19356: PPUSH
19357: LD_INT 1
19359: PPUSH
19360: CALL_OW 3
19364: ST_TO_ADDR
// if not f then
19365: LD_VAR 0 12
19369: NOT
19370: IFFALSE 19388
// begin x := x + 2 ;
19372: LD_ADDR_VAR 0 13
19376: PUSH
19377: LD_VAR 0 13
19381: PUSH
19382: LD_INT 2
19384: PLUS
19385: ST_TO_ADDR
// continue ;
19386: GO 19186
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19388: LD_VAR 0 12
19392: PUSH
19393: LD_INT 1
19395: ARRAY
19396: PPUSH
19397: CALL_OW 266
19401: PUSH
19402: LD_INT 5
19404: EQUAL
19405: IFFALSE 19479
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19407: LD_VAR 0 12
19411: PUSH
19412: LD_INT 1
19414: ARRAY
19415: PPUSH
19416: CALL_OW 313
19420: PUSH
19421: LD_INT 3
19423: LESS
19424: IFFALSE 19460
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19426: LD_INT 0
19428: PPUSH
19429: LD_INT 5
19431: PUSH
19432: LD_INT 8
19434: PUSH
19435: LD_INT 9
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: PUSH
19443: LD_VAR 0 17
19447: ARRAY
19448: PPUSH
19449: LD_VAR 0 4
19453: PPUSH
19454: CALL_OW 380
19458: GO 19477
// PrepareHuman ( false , i , skill ) ;
19460: LD_INT 0
19462: PPUSH
19463: LD_VAR 0 8
19467: PPUSH
19468: LD_VAR 0 4
19472: PPUSH
19473: CALL_OW 380
// end else
19477: GO 19496
// PrepareHuman ( false , i , skill ) ;
19479: LD_INT 0
19481: PPUSH
19482: LD_VAR 0 8
19486: PPUSH
19487: LD_VAR 0 4
19491: PPUSH
19492: CALL_OW 380
// un := CreateHuman ;
19496: LD_ADDR_VAR 0 14
19500: PUSH
19501: CALL_OW 44
19505: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19506: LD_ADDR_VAR 0 7
19510: PUSH
19511: LD_VAR 0 7
19515: PPUSH
19516: LD_INT 1
19518: PPUSH
19519: LD_VAR 0 14
19523: PPUSH
19524: CALL_OW 2
19528: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19529: LD_VAR 0 14
19533: PPUSH
19534: LD_VAR 0 12
19538: PUSH
19539: LD_INT 1
19541: ARRAY
19542: PPUSH
19543: CALL_OW 52
// end ;
19547: GO 19186
19549: POP
19550: POP
// end ;
19551: GO 18488
19553: POP
19554: POP
// result := result ^ buildings ;
19555: LD_ADDR_VAR 0 7
19559: PUSH
19560: LD_VAR 0 7
19564: PUSH
19565: LD_VAR 0 18
19569: ADD
19570: ST_TO_ADDR
// end else
19571: GO 19714
// begin for i = 1 to personel do
19573: LD_ADDR_VAR 0 8
19577: PUSH
19578: DOUBLE
19579: LD_INT 1
19581: DEC
19582: ST_TO_ADDR
19583: LD_VAR 0 6
19587: PUSH
19588: FOR_TO
19589: IFFALSE 19712
// begin if i > 4 then
19591: LD_VAR 0 8
19595: PUSH
19596: LD_INT 4
19598: GREATER
19599: IFFALSE 19603
// break ;
19601: GO 19712
// x := personel [ i ] ;
19603: LD_ADDR_VAR 0 13
19607: PUSH
19608: LD_VAR 0 6
19612: PUSH
19613: LD_VAR 0 8
19617: ARRAY
19618: ST_TO_ADDR
// if x = - 1 then
19619: LD_VAR 0 13
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: EQUAL
19628: IFFALSE 19632
// continue ;
19630: GO 19588
// PrepareHuman ( false , i , skill ) ;
19632: LD_INT 0
19634: PPUSH
19635: LD_VAR 0 8
19639: PPUSH
19640: LD_VAR 0 4
19644: PPUSH
19645: CALL_OW 380
// un := CreateHuman ;
19649: LD_ADDR_VAR 0 14
19653: PUSH
19654: CALL_OW 44
19658: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19659: LD_VAR 0 14
19663: PPUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 250
19673: PPUSH
19674: LD_VAR 0 1
19678: PPUSH
19679: CALL_OW 251
19683: PPUSH
19684: LD_INT 10
19686: PPUSH
19687: LD_INT 0
19689: PPUSH
19690: CALL_OW 50
// result := result ^ un ;
19694: LD_ADDR_VAR 0 7
19698: PUSH
19699: LD_VAR 0 7
19703: PUSH
19704: LD_VAR 0 14
19708: ADD
19709: ST_TO_ADDR
// end ;
19710: GO 19588
19712: POP
19713: POP
// end ; end ;
19714: LD_VAR 0 7
19718: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19719: LD_INT 0
19721: PPUSH
19722: PPUSH
19723: PPUSH
19724: PPUSH
19725: PPUSH
19726: PPUSH
19727: PPUSH
19728: PPUSH
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
19735: PPUSH
19736: PPUSH
// result := false ;
19737: LD_ADDR_VAR 0 3
19741: PUSH
19742: LD_INT 0
19744: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19745: LD_VAR 0 1
19749: NOT
19750: PUSH
19751: LD_VAR 0 1
19755: PPUSH
19756: CALL_OW 266
19760: PUSH
19761: LD_INT 32
19763: PUSH
19764: LD_INT 33
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: IN
19771: NOT
19772: OR
19773: IFFALSE 19777
// exit ;
19775: GO 20886
// nat := GetNation ( tower ) ;
19777: LD_ADDR_VAR 0 12
19781: PUSH
19782: LD_VAR 0 1
19786: PPUSH
19787: CALL_OW 248
19791: ST_TO_ADDR
// side := GetSide ( tower ) ;
19792: LD_ADDR_VAR 0 16
19796: PUSH
19797: LD_VAR 0 1
19801: PPUSH
19802: CALL_OW 255
19806: ST_TO_ADDR
// x := GetX ( tower ) ;
19807: LD_ADDR_VAR 0 10
19811: PUSH
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 250
19821: ST_TO_ADDR
// y := GetY ( tower ) ;
19822: LD_ADDR_VAR 0 11
19826: PUSH
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL_OW 251
19836: ST_TO_ADDR
// if not x or not y then
19837: LD_VAR 0 10
19841: NOT
19842: PUSH
19843: LD_VAR 0 11
19847: NOT
19848: OR
19849: IFFALSE 19853
// exit ;
19851: GO 20886
// weapon := 0 ;
19853: LD_ADDR_VAR 0 18
19857: PUSH
19858: LD_INT 0
19860: ST_TO_ADDR
// fac_list := [ ] ;
19861: LD_ADDR_VAR 0 17
19865: PUSH
19866: EMPTY
19867: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19868: LD_ADDR_VAR 0 6
19872: PUSH
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 274
19882: PPUSH
19883: LD_VAR 0 2
19887: PPUSH
19888: LD_INT 0
19890: PPUSH
19891: CALL 17457 0 3
19895: PPUSH
19896: LD_INT 30
19898: PUSH
19899: LD_INT 3
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PPUSH
19906: CALL_OW 72
19910: ST_TO_ADDR
// if not factories then
19911: LD_VAR 0 6
19915: NOT
19916: IFFALSE 19920
// exit ;
19918: GO 20886
// for i in factories do
19920: LD_ADDR_VAR 0 8
19924: PUSH
19925: LD_VAR 0 6
19929: PUSH
19930: FOR_IN
19931: IFFALSE 19956
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19933: LD_ADDR_VAR 0 17
19937: PUSH
19938: LD_VAR 0 17
19942: PUSH
19943: LD_VAR 0 8
19947: PPUSH
19948: CALL_OW 478
19952: UNION
19953: ST_TO_ADDR
19954: GO 19930
19956: POP
19957: POP
// if not fac_list then
19958: LD_VAR 0 17
19962: NOT
19963: IFFALSE 19967
// exit ;
19965: GO 20886
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19967: LD_ADDR_VAR 0 5
19971: PUSH
19972: LD_INT 4
19974: PUSH
19975: LD_INT 5
19977: PUSH
19978: LD_INT 9
19980: PUSH
19981: LD_INT 10
19983: PUSH
19984: LD_INT 6
19986: PUSH
19987: LD_INT 7
19989: PUSH
19990: LD_INT 11
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 27
20004: PUSH
20005: LD_INT 28
20007: PUSH
20008: LD_INT 26
20010: PUSH
20011: LD_INT 30
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 43
20022: PUSH
20023: LD_INT 44
20025: PUSH
20026: LD_INT 46
20028: PUSH
20029: LD_INT 45
20031: PUSH
20032: LD_INT 47
20034: PUSH
20035: LD_INT 49
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: LIST
20050: PUSH
20051: LD_VAR 0 12
20055: ARRAY
20056: ST_TO_ADDR
// list := list isect fac_list ;
20057: LD_ADDR_VAR 0 5
20061: PUSH
20062: LD_VAR 0 5
20066: PUSH
20067: LD_VAR 0 17
20071: ISECT
20072: ST_TO_ADDR
// if not list then
20073: LD_VAR 0 5
20077: NOT
20078: IFFALSE 20082
// exit ;
20080: GO 20886
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20082: LD_VAR 0 12
20086: PUSH
20087: LD_INT 3
20089: EQUAL
20090: PUSH
20091: LD_INT 49
20093: PUSH
20094: LD_VAR 0 5
20098: IN
20099: AND
20100: PUSH
20101: LD_INT 31
20103: PPUSH
20104: LD_VAR 0 16
20108: PPUSH
20109: CALL_OW 321
20113: PUSH
20114: LD_INT 2
20116: EQUAL
20117: AND
20118: IFFALSE 20178
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20120: LD_INT 22
20122: PUSH
20123: LD_VAR 0 16
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 35
20134: PUSH
20135: LD_INT 49
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 91
20144: PUSH
20145: LD_VAR 0 1
20149: PUSH
20150: LD_INT 10
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: LIST
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: LIST
20162: PPUSH
20163: CALL_OW 69
20167: NOT
20168: IFFALSE 20178
// weapon := ru_time_lapser ;
20170: LD_ADDR_VAR 0 18
20174: PUSH
20175: LD_INT 49
20177: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20178: LD_VAR 0 12
20182: PUSH
20183: LD_INT 1
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: IN
20193: PUSH
20194: LD_INT 11
20196: PUSH
20197: LD_VAR 0 5
20201: IN
20202: PUSH
20203: LD_INT 30
20205: PUSH
20206: LD_VAR 0 5
20210: IN
20211: OR
20212: AND
20213: PUSH
20214: LD_INT 6
20216: PPUSH
20217: LD_VAR 0 16
20221: PPUSH
20222: CALL_OW 321
20226: PUSH
20227: LD_INT 2
20229: EQUAL
20230: AND
20231: IFFALSE 20396
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20233: LD_INT 22
20235: PUSH
20236: LD_VAR 0 16
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 35
20250: PUSH
20251: LD_INT 11
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 35
20260: PUSH
20261: LD_INT 30
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 91
20275: PUSH
20276: LD_VAR 0 1
20280: PUSH
20281: LD_INT 18
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: LIST
20293: PPUSH
20294: CALL_OW 69
20298: NOT
20299: PUSH
20300: LD_INT 22
20302: PUSH
20303: LD_VAR 0 16
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: LD_INT 30
20317: PUSH
20318: LD_INT 32
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 30
20327: PUSH
20328: LD_INT 33
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 91
20342: PUSH
20343: LD_VAR 0 1
20347: PUSH
20348: LD_INT 12
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: PPUSH
20364: CALL_OW 69
20368: PUSH
20369: LD_INT 2
20371: GREATER
20372: AND
20373: IFFALSE 20396
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20375: LD_ADDR_VAR 0 18
20379: PUSH
20380: LD_INT 11
20382: PUSH
20383: LD_INT 30
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_VAR 0 12
20394: ARRAY
20395: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20396: LD_VAR 0 18
20400: NOT
20401: PUSH
20402: LD_INT 40
20404: PPUSH
20405: LD_VAR 0 16
20409: PPUSH
20410: CALL_OW 321
20414: PUSH
20415: LD_INT 2
20417: EQUAL
20418: AND
20419: PUSH
20420: LD_INT 7
20422: PUSH
20423: LD_VAR 0 5
20427: IN
20428: PUSH
20429: LD_INT 28
20431: PUSH
20432: LD_VAR 0 5
20436: IN
20437: OR
20438: PUSH
20439: LD_INT 45
20441: PUSH
20442: LD_VAR 0 5
20446: IN
20447: OR
20448: AND
20449: IFFALSE 20703
// begin hex := GetHexInfo ( x , y ) ;
20451: LD_ADDR_VAR 0 4
20455: PUSH
20456: LD_VAR 0 10
20460: PPUSH
20461: LD_VAR 0 11
20465: PPUSH
20466: CALL_OW 546
20470: ST_TO_ADDR
// if hex [ 1 ] then
20471: LD_VAR 0 4
20475: PUSH
20476: LD_INT 1
20478: ARRAY
20479: IFFALSE 20483
// exit ;
20481: GO 20886
// height := hex [ 2 ] ;
20483: LD_ADDR_VAR 0 15
20487: PUSH
20488: LD_VAR 0 4
20492: PUSH
20493: LD_INT 2
20495: ARRAY
20496: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20497: LD_ADDR_VAR 0 14
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 3
20510: PUSH
20511: LD_INT 5
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: ST_TO_ADDR
// for i in tmp do
20520: LD_ADDR_VAR 0 8
20524: PUSH
20525: LD_VAR 0 14
20529: PUSH
20530: FOR_IN
20531: IFFALSE 20701
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20533: LD_ADDR_VAR 0 9
20537: PUSH
20538: LD_VAR 0 10
20542: PPUSH
20543: LD_VAR 0 8
20547: PPUSH
20548: LD_INT 5
20550: PPUSH
20551: CALL_OW 272
20555: PUSH
20556: LD_VAR 0 11
20560: PPUSH
20561: LD_VAR 0 8
20565: PPUSH
20566: LD_INT 5
20568: PPUSH
20569: CALL_OW 273
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20578: LD_VAR 0 9
20582: PUSH
20583: LD_INT 1
20585: ARRAY
20586: PPUSH
20587: LD_VAR 0 9
20591: PUSH
20592: LD_INT 2
20594: ARRAY
20595: PPUSH
20596: CALL_OW 488
20600: IFFALSE 20699
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20602: LD_ADDR_VAR 0 4
20606: PUSH
20607: LD_VAR 0 9
20611: PUSH
20612: LD_INT 1
20614: ARRAY
20615: PPUSH
20616: LD_VAR 0 9
20620: PUSH
20621: LD_INT 2
20623: ARRAY
20624: PPUSH
20625: CALL_OW 546
20629: ST_TO_ADDR
// if hex [ 1 ] then
20630: LD_VAR 0 4
20634: PUSH
20635: LD_INT 1
20637: ARRAY
20638: IFFALSE 20642
// continue ;
20640: GO 20530
// h := hex [ 2 ] ;
20642: LD_ADDR_VAR 0 13
20646: PUSH
20647: LD_VAR 0 4
20651: PUSH
20652: LD_INT 2
20654: ARRAY
20655: ST_TO_ADDR
// if h + 7 < height then
20656: LD_VAR 0 13
20660: PUSH
20661: LD_INT 7
20663: PLUS
20664: PUSH
20665: LD_VAR 0 15
20669: LESS
20670: IFFALSE 20699
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20672: LD_ADDR_VAR 0 18
20676: PUSH
20677: LD_INT 7
20679: PUSH
20680: LD_INT 28
20682: PUSH
20683: LD_INT 45
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: LIST
20690: PUSH
20691: LD_VAR 0 12
20695: ARRAY
20696: ST_TO_ADDR
// break ;
20697: GO 20701
// end ; end ; end ;
20699: GO 20530
20701: POP
20702: POP
// end ; if not weapon then
20703: LD_VAR 0 18
20707: NOT
20708: IFFALSE 20768
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20710: LD_ADDR_VAR 0 5
20714: PUSH
20715: LD_VAR 0 5
20719: PUSH
20720: LD_INT 11
20722: PUSH
20723: LD_INT 30
20725: PUSH
20726: LD_INT 49
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: LIST
20733: DIFF
20734: ST_TO_ADDR
// if not list then
20735: LD_VAR 0 5
20739: NOT
20740: IFFALSE 20744
// exit ;
20742: GO 20886
// weapon := list [ rand ( 1 , list ) ] ;
20744: LD_ADDR_VAR 0 18
20748: PUSH
20749: LD_VAR 0 5
20753: PUSH
20754: LD_INT 1
20756: PPUSH
20757: LD_VAR 0 5
20761: PPUSH
20762: CALL_OW 12
20766: ARRAY
20767: ST_TO_ADDR
// end ; if weapon then
20768: LD_VAR 0 18
20772: IFFALSE 20886
// begin tmp := CostOfWeapon ( weapon ) ;
20774: LD_ADDR_VAR 0 14
20778: PUSH
20779: LD_VAR 0 18
20783: PPUSH
20784: CALL_OW 451
20788: ST_TO_ADDR
// j := GetBase ( tower ) ;
20789: LD_ADDR_VAR 0 9
20793: PUSH
20794: LD_VAR 0 1
20798: PPUSH
20799: CALL_OW 274
20803: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20804: LD_VAR 0 9
20808: PPUSH
20809: LD_INT 1
20811: PPUSH
20812: CALL_OW 275
20816: PUSH
20817: LD_VAR 0 14
20821: PUSH
20822: LD_INT 1
20824: ARRAY
20825: GREATEREQUAL
20826: PUSH
20827: LD_VAR 0 9
20831: PPUSH
20832: LD_INT 2
20834: PPUSH
20835: CALL_OW 275
20839: PUSH
20840: LD_VAR 0 14
20844: PUSH
20845: LD_INT 2
20847: ARRAY
20848: GREATEREQUAL
20849: AND
20850: PUSH
20851: LD_VAR 0 9
20855: PPUSH
20856: LD_INT 3
20858: PPUSH
20859: CALL_OW 275
20863: PUSH
20864: LD_VAR 0 14
20868: PUSH
20869: LD_INT 3
20871: ARRAY
20872: GREATEREQUAL
20873: AND
20874: IFFALSE 20886
// result := weapon ;
20876: LD_ADDR_VAR 0 3
20880: PUSH
20881: LD_VAR 0 18
20885: ST_TO_ADDR
// end ; end ;
20886: LD_VAR 0 3
20890: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20891: LD_INT 0
20893: PPUSH
20894: PPUSH
// result := true ;
20895: LD_ADDR_VAR 0 3
20899: PUSH
20900: LD_INT 1
20902: ST_TO_ADDR
// if array1 = array2 then
20903: LD_VAR 0 1
20907: PUSH
20908: LD_VAR 0 2
20912: EQUAL
20913: IFFALSE 20973
// begin for i = 1 to array1 do
20915: LD_ADDR_VAR 0 4
20919: PUSH
20920: DOUBLE
20921: LD_INT 1
20923: DEC
20924: ST_TO_ADDR
20925: LD_VAR 0 1
20929: PUSH
20930: FOR_TO
20931: IFFALSE 20969
// if array1 [ i ] <> array2 [ i ] then
20933: LD_VAR 0 1
20937: PUSH
20938: LD_VAR 0 4
20942: ARRAY
20943: PUSH
20944: LD_VAR 0 2
20948: PUSH
20949: LD_VAR 0 4
20953: ARRAY
20954: NONEQUAL
20955: IFFALSE 20967
// begin result := false ;
20957: LD_ADDR_VAR 0 3
20961: PUSH
20962: LD_INT 0
20964: ST_TO_ADDR
// break ;
20965: GO 20969
// end ;
20967: GO 20930
20969: POP
20970: POP
// end else
20971: GO 20981
// result := false ;
20973: LD_ADDR_VAR 0 3
20977: PUSH
20978: LD_INT 0
20980: ST_TO_ADDR
// end ;
20981: LD_VAR 0 3
20985: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20986: LD_INT 0
20988: PPUSH
20989: PPUSH
// if not array1 or not array2 then
20990: LD_VAR 0 1
20994: NOT
20995: PUSH
20996: LD_VAR 0 2
21000: NOT
21001: OR
21002: IFFALSE 21006
// exit ;
21004: GO 21070
// result := true ;
21006: LD_ADDR_VAR 0 3
21010: PUSH
21011: LD_INT 1
21013: ST_TO_ADDR
// for i = 1 to array1 do
21014: LD_ADDR_VAR 0 4
21018: PUSH
21019: DOUBLE
21020: LD_INT 1
21022: DEC
21023: ST_TO_ADDR
21024: LD_VAR 0 1
21028: PUSH
21029: FOR_TO
21030: IFFALSE 21068
// if array1 [ i ] <> array2 [ i ] then
21032: LD_VAR 0 1
21036: PUSH
21037: LD_VAR 0 4
21041: ARRAY
21042: PUSH
21043: LD_VAR 0 2
21047: PUSH
21048: LD_VAR 0 4
21052: ARRAY
21053: NONEQUAL
21054: IFFALSE 21066
// begin result := false ;
21056: LD_ADDR_VAR 0 3
21060: PUSH
21061: LD_INT 0
21063: ST_TO_ADDR
// break ;
21064: GO 21068
// end ;
21066: GO 21029
21068: POP
21069: POP
// end ;
21070: LD_VAR 0 3
21074: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21075: LD_INT 0
21077: PPUSH
21078: PPUSH
21079: PPUSH
// pom := GetBase ( fac ) ;
21080: LD_ADDR_VAR 0 5
21084: PUSH
21085: LD_VAR 0 1
21089: PPUSH
21090: CALL_OW 274
21094: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21095: LD_ADDR_VAR 0 4
21099: PUSH
21100: LD_VAR 0 2
21104: PUSH
21105: LD_INT 1
21107: ARRAY
21108: PPUSH
21109: LD_VAR 0 2
21113: PUSH
21114: LD_INT 2
21116: ARRAY
21117: PPUSH
21118: LD_VAR 0 2
21122: PUSH
21123: LD_INT 3
21125: ARRAY
21126: PPUSH
21127: LD_VAR 0 2
21131: PUSH
21132: LD_INT 4
21134: ARRAY
21135: PPUSH
21136: CALL_OW 449
21140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21141: LD_ADDR_VAR 0 3
21145: PUSH
21146: LD_VAR 0 5
21150: PPUSH
21151: LD_INT 1
21153: PPUSH
21154: CALL_OW 275
21158: PUSH
21159: LD_VAR 0 4
21163: PUSH
21164: LD_INT 1
21166: ARRAY
21167: GREATEREQUAL
21168: PUSH
21169: LD_VAR 0 5
21173: PPUSH
21174: LD_INT 2
21176: PPUSH
21177: CALL_OW 275
21181: PUSH
21182: LD_VAR 0 4
21186: PUSH
21187: LD_INT 2
21189: ARRAY
21190: GREATEREQUAL
21191: AND
21192: PUSH
21193: LD_VAR 0 5
21197: PPUSH
21198: LD_INT 3
21200: PPUSH
21201: CALL_OW 275
21205: PUSH
21206: LD_VAR 0 4
21210: PUSH
21211: LD_INT 3
21213: ARRAY
21214: GREATEREQUAL
21215: AND
21216: ST_TO_ADDR
// end ;
21217: LD_VAR 0 3
21221: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21222: LD_INT 0
21224: PPUSH
21225: PPUSH
21226: PPUSH
21227: PPUSH
// pom := GetBase ( building ) ;
21228: LD_ADDR_VAR 0 3
21232: PUSH
21233: LD_VAR 0 1
21237: PPUSH
21238: CALL_OW 274
21242: ST_TO_ADDR
// if not pom then
21243: LD_VAR 0 3
21247: NOT
21248: IFFALSE 21252
// exit ;
21250: GO 21422
// btype := GetBType ( building ) ;
21252: LD_ADDR_VAR 0 5
21256: PUSH
21257: LD_VAR 0 1
21261: PPUSH
21262: CALL_OW 266
21266: ST_TO_ADDR
// if btype = b_armoury then
21267: LD_VAR 0 5
21271: PUSH
21272: LD_INT 4
21274: EQUAL
21275: IFFALSE 21285
// btype := b_barracks ;
21277: LD_ADDR_VAR 0 5
21281: PUSH
21282: LD_INT 5
21284: ST_TO_ADDR
// if btype = b_depot then
21285: LD_VAR 0 5
21289: PUSH
21290: LD_INT 0
21292: EQUAL
21293: IFFALSE 21303
// btype := b_warehouse ;
21295: LD_ADDR_VAR 0 5
21299: PUSH
21300: LD_INT 1
21302: ST_TO_ADDR
// if btype = b_workshop then
21303: LD_VAR 0 5
21307: PUSH
21308: LD_INT 2
21310: EQUAL
21311: IFFALSE 21321
// btype := b_factory ;
21313: LD_ADDR_VAR 0 5
21317: PUSH
21318: LD_INT 3
21320: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21321: LD_ADDR_VAR 0 4
21325: PUSH
21326: LD_VAR 0 5
21330: PPUSH
21331: LD_VAR 0 1
21335: PPUSH
21336: CALL_OW 248
21340: PPUSH
21341: CALL_OW 450
21345: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21346: LD_ADDR_VAR 0 2
21350: PUSH
21351: LD_VAR 0 3
21355: PPUSH
21356: LD_INT 1
21358: PPUSH
21359: CALL_OW 275
21363: PUSH
21364: LD_VAR 0 4
21368: PUSH
21369: LD_INT 1
21371: ARRAY
21372: GREATEREQUAL
21373: PUSH
21374: LD_VAR 0 3
21378: PPUSH
21379: LD_INT 2
21381: PPUSH
21382: CALL_OW 275
21386: PUSH
21387: LD_VAR 0 4
21391: PUSH
21392: LD_INT 2
21394: ARRAY
21395: GREATEREQUAL
21396: AND
21397: PUSH
21398: LD_VAR 0 3
21402: PPUSH
21403: LD_INT 3
21405: PPUSH
21406: CALL_OW 275
21410: PUSH
21411: LD_VAR 0 4
21415: PUSH
21416: LD_INT 3
21418: ARRAY
21419: GREATEREQUAL
21420: AND
21421: ST_TO_ADDR
// end ;
21422: LD_VAR 0 2
21426: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21427: LD_INT 0
21429: PPUSH
21430: PPUSH
21431: PPUSH
// pom := GetBase ( building ) ;
21432: LD_ADDR_VAR 0 4
21436: PUSH
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 274
21446: ST_TO_ADDR
// if not pom then
21447: LD_VAR 0 4
21451: NOT
21452: IFFALSE 21456
// exit ;
21454: GO 21557
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21456: LD_ADDR_VAR 0 5
21460: PUSH
21461: LD_VAR 0 2
21465: PPUSH
21466: LD_VAR 0 1
21470: PPUSH
21471: CALL_OW 248
21475: PPUSH
21476: CALL_OW 450
21480: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21481: LD_ADDR_VAR 0 3
21485: PUSH
21486: LD_VAR 0 4
21490: PPUSH
21491: LD_INT 1
21493: PPUSH
21494: CALL_OW 275
21498: PUSH
21499: LD_VAR 0 5
21503: PUSH
21504: LD_INT 1
21506: ARRAY
21507: GREATEREQUAL
21508: PUSH
21509: LD_VAR 0 4
21513: PPUSH
21514: LD_INT 2
21516: PPUSH
21517: CALL_OW 275
21521: PUSH
21522: LD_VAR 0 5
21526: PUSH
21527: LD_INT 2
21529: ARRAY
21530: GREATEREQUAL
21531: AND
21532: PUSH
21533: LD_VAR 0 4
21537: PPUSH
21538: LD_INT 3
21540: PPUSH
21541: CALL_OW 275
21545: PUSH
21546: LD_VAR 0 5
21550: PUSH
21551: LD_INT 3
21553: ARRAY
21554: GREATEREQUAL
21555: AND
21556: ST_TO_ADDR
// end ;
21557: LD_VAR 0 3
21561: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21562: LD_INT 0
21564: PPUSH
21565: PPUSH
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
21570: PPUSH
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
// result := false ;
21575: LD_ADDR_VAR 0 8
21579: PUSH
21580: LD_INT 0
21582: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21583: LD_VAR 0 5
21587: NOT
21588: PUSH
21589: LD_VAR 0 1
21593: NOT
21594: OR
21595: PUSH
21596: LD_VAR 0 2
21600: NOT
21601: OR
21602: PUSH
21603: LD_VAR 0 3
21607: NOT
21608: OR
21609: IFFALSE 21613
// exit ;
21611: GO 22427
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21613: LD_ADDR_VAR 0 14
21617: PUSH
21618: LD_VAR 0 1
21622: PPUSH
21623: LD_VAR 0 2
21627: PPUSH
21628: LD_VAR 0 3
21632: PPUSH
21633: LD_VAR 0 4
21637: PPUSH
21638: LD_VAR 0 5
21642: PUSH
21643: LD_INT 1
21645: ARRAY
21646: PPUSH
21647: CALL_OW 248
21651: PPUSH
21652: LD_INT 0
21654: PPUSH
21655: CALL 23680 0 6
21659: ST_TO_ADDR
// if not hexes then
21660: LD_VAR 0 14
21664: NOT
21665: IFFALSE 21669
// exit ;
21667: GO 22427
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21669: LD_ADDR_VAR 0 17
21673: PUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: LD_INT 22
21681: PUSH
21682: LD_VAR 0 13
21686: PPUSH
21687: CALL_OW 255
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 2
21698: PUSH
21699: LD_INT 30
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 30
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PPUSH
21728: CALL_OW 72
21732: ST_TO_ADDR
// for i = 1 to hexes do
21733: LD_ADDR_VAR 0 9
21737: PUSH
21738: DOUBLE
21739: LD_INT 1
21741: DEC
21742: ST_TO_ADDR
21743: LD_VAR 0 14
21747: PUSH
21748: FOR_TO
21749: IFFALSE 22425
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21751: LD_ADDR_VAR 0 13
21755: PUSH
21756: LD_VAR 0 14
21760: PUSH
21761: LD_VAR 0 9
21765: ARRAY
21766: PUSH
21767: LD_INT 1
21769: ARRAY
21770: PPUSH
21771: LD_VAR 0 14
21775: PUSH
21776: LD_VAR 0 9
21780: ARRAY
21781: PUSH
21782: LD_INT 2
21784: ARRAY
21785: PPUSH
21786: CALL_OW 428
21790: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21791: LD_VAR 0 14
21795: PUSH
21796: LD_VAR 0 9
21800: ARRAY
21801: PUSH
21802: LD_INT 1
21804: ARRAY
21805: PPUSH
21806: LD_VAR 0 14
21810: PUSH
21811: LD_VAR 0 9
21815: ARRAY
21816: PUSH
21817: LD_INT 2
21819: ARRAY
21820: PPUSH
21821: CALL_OW 351
21825: PUSH
21826: LD_VAR 0 14
21830: PUSH
21831: LD_VAR 0 9
21835: ARRAY
21836: PUSH
21837: LD_INT 1
21839: ARRAY
21840: PPUSH
21841: LD_VAR 0 14
21845: PUSH
21846: LD_VAR 0 9
21850: ARRAY
21851: PUSH
21852: LD_INT 2
21854: ARRAY
21855: PPUSH
21856: CALL_OW 488
21860: NOT
21861: OR
21862: PUSH
21863: LD_VAR 0 13
21867: PPUSH
21868: CALL_OW 247
21872: PUSH
21873: LD_INT 3
21875: EQUAL
21876: OR
21877: IFFALSE 21883
// exit ;
21879: POP
21880: POP
21881: GO 22427
// if not tmp then
21883: LD_VAR 0 13
21887: NOT
21888: IFFALSE 21892
// continue ;
21890: GO 21748
// result := true ;
21892: LD_ADDR_VAR 0 8
21896: PUSH
21897: LD_INT 1
21899: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21900: LD_VAR 0 6
21904: PUSH
21905: LD_VAR 0 13
21909: PPUSH
21910: CALL_OW 247
21914: PUSH
21915: LD_INT 2
21917: EQUAL
21918: AND
21919: PUSH
21920: LD_VAR 0 13
21924: PPUSH
21925: CALL_OW 263
21929: PUSH
21930: LD_INT 1
21932: EQUAL
21933: AND
21934: IFFALSE 22098
// begin if IsDrivenBy ( tmp ) then
21936: LD_VAR 0 13
21940: PPUSH
21941: CALL_OW 311
21945: IFFALSE 21949
// continue ;
21947: GO 21748
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21949: LD_VAR 0 6
21953: PPUSH
21954: LD_INT 3
21956: PUSH
21957: LD_INT 60
21959: PUSH
21960: EMPTY
21961: LIST
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 3
21969: PUSH
21970: LD_INT 55
21972: PUSH
21973: EMPTY
21974: LIST
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PPUSH
21984: CALL_OW 72
21988: IFFALSE 22096
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21990: LD_ADDR_VAR 0 18
21994: PUSH
21995: LD_VAR 0 6
21999: PPUSH
22000: LD_INT 3
22002: PUSH
22003: LD_INT 60
22005: PUSH
22006: EMPTY
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 3
22015: PUSH
22016: LD_INT 55
22018: PUSH
22019: EMPTY
22020: LIST
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 72
22034: PUSH
22035: LD_INT 1
22037: ARRAY
22038: ST_TO_ADDR
// if IsInUnit ( driver ) then
22039: LD_VAR 0 18
22043: PPUSH
22044: CALL_OW 310
22048: IFFALSE 22059
// ComExit ( driver ) ;
22050: LD_VAR 0 18
22054: PPUSH
22055: CALL 47481 0 1
// AddComEnterUnit ( driver , tmp ) ;
22059: LD_VAR 0 18
22063: PPUSH
22064: LD_VAR 0 13
22068: PPUSH
22069: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22073: LD_VAR 0 18
22077: PPUSH
22078: LD_VAR 0 7
22082: PPUSH
22083: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22087: LD_VAR 0 18
22091: PPUSH
22092: CALL_OW 181
// end ; continue ;
22096: GO 21748
// end ; if not cleaners or not tmp in cleaners then
22098: LD_VAR 0 6
22102: NOT
22103: PUSH
22104: LD_VAR 0 13
22108: PUSH
22109: LD_VAR 0 6
22113: IN
22114: NOT
22115: OR
22116: IFFALSE 22423
// begin if dep then
22118: LD_VAR 0 17
22122: IFFALSE 22258
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22124: LD_ADDR_VAR 0 16
22128: PUSH
22129: LD_VAR 0 17
22133: PUSH
22134: LD_INT 1
22136: ARRAY
22137: PPUSH
22138: CALL_OW 250
22142: PPUSH
22143: LD_VAR 0 17
22147: PUSH
22148: LD_INT 1
22150: ARRAY
22151: PPUSH
22152: CALL_OW 254
22156: PPUSH
22157: LD_INT 5
22159: PPUSH
22160: CALL_OW 272
22164: PUSH
22165: LD_VAR 0 17
22169: PUSH
22170: LD_INT 1
22172: ARRAY
22173: PPUSH
22174: CALL_OW 251
22178: PPUSH
22179: LD_VAR 0 17
22183: PUSH
22184: LD_INT 1
22186: ARRAY
22187: PPUSH
22188: CALL_OW 254
22192: PPUSH
22193: LD_INT 5
22195: PPUSH
22196: CALL_OW 273
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22205: LD_VAR 0 16
22209: PUSH
22210: LD_INT 1
22212: ARRAY
22213: PPUSH
22214: LD_VAR 0 16
22218: PUSH
22219: LD_INT 2
22221: ARRAY
22222: PPUSH
22223: CALL_OW 488
22227: IFFALSE 22258
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22229: LD_VAR 0 13
22233: PPUSH
22234: LD_VAR 0 16
22238: PUSH
22239: LD_INT 1
22241: ARRAY
22242: PPUSH
22243: LD_VAR 0 16
22247: PUSH
22248: LD_INT 2
22250: ARRAY
22251: PPUSH
22252: CALL_OW 111
// continue ;
22256: GO 21748
// end ; end ; r := GetDir ( tmp ) ;
22258: LD_ADDR_VAR 0 15
22262: PUSH
22263: LD_VAR 0 13
22267: PPUSH
22268: CALL_OW 254
22272: ST_TO_ADDR
// if r = 5 then
22273: LD_VAR 0 15
22277: PUSH
22278: LD_INT 5
22280: EQUAL
22281: IFFALSE 22291
// r := 0 ;
22283: LD_ADDR_VAR 0 15
22287: PUSH
22288: LD_INT 0
22290: ST_TO_ADDR
// for j = r to 5 do
22291: LD_ADDR_VAR 0 10
22295: PUSH
22296: DOUBLE
22297: LD_VAR 0 15
22301: DEC
22302: ST_TO_ADDR
22303: LD_INT 5
22305: PUSH
22306: FOR_TO
22307: IFFALSE 22421
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22309: LD_ADDR_VAR 0 11
22313: PUSH
22314: LD_VAR 0 13
22318: PPUSH
22319: CALL_OW 250
22323: PPUSH
22324: LD_VAR 0 10
22328: PPUSH
22329: LD_INT 2
22331: PPUSH
22332: CALL_OW 272
22336: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22337: LD_ADDR_VAR 0 12
22341: PUSH
22342: LD_VAR 0 13
22346: PPUSH
22347: CALL_OW 251
22351: PPUSH
22352: LD_VAR 0 10
22356: PPUSH
22357: LD_INT 2
22359: PPUSH
22360: CALL_OW 273
22364: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22365: LD_VAR 0 11
22369: PPUSH
22370: LD_VAR 0 12
22374: PPUSH
22375: CALL_OW 488
22379: PUSH
22380: LD_VAR 0 11
22384: PPUSH
22385: LD_VAR 0 12
22389: PPUSH
22390: CALL_OW 428
22394: NOT
22395: AND
22396: IFFALSE 22419
// begin ComMoveXY ( tmp , _x , _y ) ;
22398: LD_VAR 0 13
22402: PPUSH
22403: LD_VAR 0 11
22407: PPUSH
22408: LD_VAR 0 12
22412: PPUSH
22413: CALL_OW 111
// break ;
22417: GO 22421
// end ; end ;
22419: GO 22306
22421: POP
22422: POP
// end ; end ;
22423: GO 21748
22425: POP
22426: POP
// end ;
22427: LD_VAR 0 8
22431: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22432: LD_INT 0
22434: PPUSH
// result := true ;
22435: LD_ADDR_VAR 0 3
22439: PUSH
22440: LD_INT 1
22442: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22443: LD_VAR 0 2
22447: PUSH
22448: LD_INT 24
22450: DOUBLE
22451: EQUAL
22452: IFTRUE 22462
22454: LD_INT 33
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22487
22462: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22463: LD_ADDR_VAR 0 3
22467: PUSH
22468: LD_INT 32
22470: PPUSH
22471: LD_VAR 0 1
22475: PPUSH
22476: CALL_OW 321
22480: PUSH
22481: LD_INT 2
22483: EQUAL
22484: ST_TO_ADDR
22485: GO 22803
22487: LD_INT 20
22489: DOUBLE
22490: EQUAL
22491: IFTRUE 22495
22493: GO 22520
22495: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_INT 6
22503: PPUSH
22504: LD_VAR 0 1
22508: PPUSH
22509: CALL_OW 321
22513: PUSH
22514: LD_INT 2
22516: EQUAL
22517: ST_TO_ADDR
22518: GO 22803
22520: LD_INT 22
22522: DOUBLE
22523: EQUAL
22524: IFTRUE 22534
22526: LD_INT 36
22528: DOUBLE
22529: EQUAL
22530: IFTRUE 22534
22532: GO 22559
22534: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22535: LD_ADDR_VAR 0 3
22539: PUSH
22540: LD_INT 15
22542: PPUSH
22543: LD_VAR 0 1
22547: PPUSH
22548: CALL_OW 321
22552: PUSH
22553: LD_INT 2
22555: EQUAL
22556: ST_TO_ADDR
22557: GO 22803
22559: LD_INT 30
22561: DOUBLE
22562: EQUAL
22563: IFTRUE 22567
22565: GO 22592
22567: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22568: LD_ADDR_VAR 0 3
22572: PUSH
22573: LD_INT 20
22575: PPUSH
22576: LD_VAR 0 1
22580: PPUSH
22581: CALL_OW 321
22585: PUSH
22586: LD_INT 2
22588: EQUAL
22589: ST_TO_ADDR
22590: GO 22803
22592: LD_INT 28
22594: DOUBLE
22595: EQUAL
22596: IFTRUE 22606
22598: LD_INT 21
22600: DOUBLE
22601: EQUAL
22602: IFTRUE 22606
22604: GO 22631
22606: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22607: LD_ADDR_VAR 0 3
22611: PUSH
22612: LD_INT 21
22614: PPUSH
22615: LD_VAR 0 1
22619: PPUSH
22620: CALL_OW 321
22624: PUSH
22625: LD_INT 2
22627: EQUAL
22628: ST_TO_ADDR
22629: GO 22803
22631: LD_INT 16
22633: DOUBLE
22634: EQUAL
22635: IFTRUE 22639
22637: GO 22664
22639: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22640: LD_ADDR_VAR 0 3
22644: PUSH
22645: LD_INT 84
22647: PPUSH
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 321
22657: PUSH
22658: LD_INT 2
22660: EQUAL
22661: ST_TO_ADDR
22662: GO 22803
22664: LD_INT 19
22666: DOUBLE
22667: EQUAL
22668: IFTRUE 22678
22670: LD_INT 23
22672: DOUBLE
22673: EQUAL
22674: IFTRUE 22678
22676: GO 22703
22678: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22679: LD_ADDR_VAR 0 3
22683: PUSH
22684: LD_INT 83
22686: PPUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL_OW 321
22696: PUSH
22697: LD_INT 2
22699: EQUAL
22700: ST_TO_ADDR
22701: GO 22803
22703: LD_INT 17
22705: DOUBLE
22706: EQUAL
22707: IFTRUE 22711
22709: GO 22736
22711: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22712: LD_ADDR_VAR 0 3
22716: PUSH
22717: LD_INT 39
22719: PPUSH
22720: LD_VAR 0 1
22724: PPUSH
22725: CALL_OW 321
22729: PUSH
22730: LD_INT 2
22732: EQUAL
22733: ST_TO_ADDR
22734: GO 22803
22736: LD_INT 18
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22769
22744: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22745: LD_ADDR_VAR 0 3
22749: PUSH
22750: LD_INT 40
22752: PPUSH
22753: LD_VAR 0 1
22757: PPUSH
22758: CALL_OW 321
22762: PUSH
22763: LD_INT 2
22765: EQUAL
22766: ST_TO_ADDR
22767: GO 22803
22769: LD_INT 27
22771: DOUBLE
22772: EQUAL
22773: IFTRUE 22777
22775: GO 22802
22777: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22778: LD_ADDR_VAR 0 3
22782: PUSH
22783: LD_INT 35
22785: PPUSH
22786: LD_VAR 0 1
22790: PPUSH
22791: CALL_OW 321
22795: PUSH
22796: LD_INT 2
22798: EQUAL
22799: ST_TO_ADDR
22800: GO 22803
22802: POP
// end ;
22803: LD_VAR 0 3
22807: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22808: LD_INT 0
22810: PPUSH
22811: PPUSH
22812: PPUSH
22813: PPUSH
22814: PPUSH
22815: PPUSH
22816: PPUSH
22817: PPUSH
22818: PPUSH
22819: PPUSH
22820: PPUSH
// result := false ;
22821: LD_ADDR_VAR 0 6
22825: PUSH
22826: LD_INT 0
22828: ST_TO_ADDR
// if btype = b_depot then
22829: LD_VAR 0 2
22833: PUSH
22834: LD_INT 0
22836: EQUAL
22837: IFFALSE 22849
// begin result := true ;
22839: LD_ADDR_VAR 0 6
22843: PUSH
22844: LD_INT 1
22846: ST_TO_ADDR
// exit ;
22847: GO 23675
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22849: LD_VAR 0 1
22853: NOT
22854: PUSH
22855: LD_VAR 0 1
22859: PPUSH
22860: CALL_OW 266
22864: PUSH
22865: LD_INT 0
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: IN
22875: NOT
22876: OR
22877: PUSH
22878: LD_VAR 0 2
22882: NOT
22883: OR
22884: PUSH
22885: LD_VAR 0 5
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 1
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: LD_INT 3
22901: PUSH
22902: LD_INT 4
22904: PUSH
22905: LD_INT 5
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: IN
22916: NOT
22917: OR
22918: PUSH
22919: LD_VAR 0 3
22923: PPUSH
22924: LD_VAR 0 4
22928: PPUSH
22929: CALL_OW 488
22933: NOT
22934: OR
22935: IFFALSE 22939
// exit ;
22937: GO 23675
// side := GetSide ( depot ) ;
22939: LD_ADDR_VAR 0 9
22943: PUSH
22944: LD_VAR 0 1
22948: PPUSH
22949: CALL_OW 255
22953: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22954: LD_VAR 0 9
22958: PPUSH
22959: LD_VAR 0 2
22963: PPUSH
22964: CALL 22432 0 2
22968: NOT
22969: IFFALSE 22973
// exit ;
22971: GO 23675
// pom := GetBase ( depot ) ;
22973: LD_ADDR_VAR 0 10
22977: PUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL_OW 274
22987: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22988: LD_ADDR_VAR 0 11
22992: PUSH
22993: LD_VAR 0 2
22997: PPUSH
22998: LD_VAR 0 1
23002: PPUSH
23003: CALL_OW 248
23007: PPUSH
23008: CALL_OW 450
23012: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23013: LD_VAR 0 10
23017: PPUSH
23018: LD_INT 1
23020: PPUSH
23021: CALL_OW 275
23025: PUSH
23026: LD_VAR 0 11
23030: PUSH
23031: LD_INT 1
23033: ARRAY
23034: GREATEREQUAL
23035: PUSH
23036: LD_VAR 0 10
23040: PPUSH
23041: LD_INT 2
23043: PPUSH
23044: CALL_OW 275
23048: PUSH
23049: LD_VAR 0 11
23053: PUSH
23054: LD_INT 2
23056: ARRAY
23057: GREATEREQUAL
23058: AND
23059: PUSH
23060: LD_VAR 0 10
23064: PPUSH
23065: LD_INT 3
23067: PPUSH
23068: CALL_OW 275
23072: PUSH
23073: LD_VAR 0 11
23077: PUSH
23078: LD_INT 3
23080: ARRAY
23081: GREATEREQUAL
23082: AND
23083: NOT
23084: IFFALSE 23088
// exit ;
23086: GO 23675
// if GetBType ( depot ) = b_depot then
23088: LD_VAR 0 1
23092: PPUSH
23093: CALL_OW 266
23097: PUSH
23098: LD_INT 0
23100: EQUAL
23101: IFFALSE 23113
// dist := 28 else
23103: LD_ADDR_VAR 0 14
23107: PUSH
23108: LD_INT 28
23110: ST_TO_ADDR
23111: GO 23121
// dist := 36 ;
23113: LD_ADDR_VAR 0 14
23117: PUSH
23118: LD_INT 36
23120: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23121: LD_VAR 0 1
23125: PPUSH
23126: LD_VAR 0 3
23130: PPUSH
23131: LD_VAR 0 4
23135: PPUSH
23136: CALL_OW 297
23140: PUSH
23141: LD_VAR 0 14
23145: GREATER
23146: IFFALSE 23150
// exit ;
23148: GO 23675
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23150: LD_ADDR_VAR 0 12
23154: PUSH
23155: LD_VAR 0 2
23159: PPUSH
23160: LD_VAR 0 3
23164: PPUSH
23165: LD_VAR 0 4
23169: PPUSH
23170: LD_VAR 0 5
23174: PPUSH
23175: LD_VAR 0 1
23179: PPUSH
23180: CALL_OW 248
23184: PPUSH
23185: LD_INT 0
23187: PPUSH
23188: CALL 23680 0 6
23192: ST_TO_ADDR
// if not hexes then
23193: LD_VAR 0 12
23197: NOT
23198: IFFALSE 23202
// exit ;
23200: GO 23675
// hex := GetHexInfo ( x , y ) ;
23202: LD_ADDR_VAR 0 15
23206: PUSH
23207: LD_VAR 0 3
23211: PPUSH
23212: LD_VAR 0 4
23216: PPUSH
23217: CALL_OW 546
23221: ST_TO_ADDR
// if hex [ 1 ] then
23222: LD_VAR 0 15
23226: PUSH
23227: LD_INT 1
23229: ARRAY
23230: IFFALSE 23234
// exit ;
23232: GO 23675
// height := hex [ 2 ] ;
23234: LD_ADDR_VAR 0 13
23238: PUSH
23239: LD_VAR 0 15
23243: PUSH
23244: LD_INT 2
23246: ARRAY
23247: ST_TO_ADDR
// for i = 1 to hexes do
23248: LD_ADDR_VAR 0 7
23252: PUSH
23253: DOUBLE
23254: LD_INT 1
23256: DEC
23257: ST_TO_ADDR
23258: LD_VAR 0 12
23262: PUSH
23263: FOR_TO
23264: IFFALSE 23594
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23266: LD_VAR 0 12
23270: PUSH
23271: LD_VAR 0 7
23275: ARRAY
23276: PUSH
23277: LD_INT 1
23279: ARRAY
23280: PPUSH
23281: LD_VAR 0 12
23285: PUSH
23286: LD_VAR 0 7
23290: ARRAY
23291: PUSH
23292: LD_INT 2
23294: ARRAY
23295: PPUSH
23296: CALL_OW 488
23300: NOT
23301: PUSH
23302: LD_VAR 0 12
23306: PUSH
23307: LD_VAR 0 7
23311: ARRAY
23312: PUSH
23313: LD_INT 1
23315: ARRAY
23316: PPUSH
23317: LD_VAR 0 12
23321: PUSH
23322: LD_VAR 0 7
23326: ARRAY
23327: PUSH
23328: LD_INT 2
23330: ARRAY
23331: PPUSH
23332: CALL_OW 428
23336: PUSH
23337: LD_INT 0
23339: GREATER
23340: OR
23341: PUSH
23342: LD_VAR 0 12
23346: PUSH
23347: LD_VAR 0 7
23351: ARRAY
23352: PUSH
23353: LD_INT 1
23355: ARRAY
23356: PPUSH
23357: LD_VAR 0 12
23361: PUSH
23362: LD_VAR 0 7
23366: ARRAY
23367: PUSH
23368: LD_INT 2
23370: ARRAY
23371: PPUSH
23372: CALL_OW 351
23376: OR
23377: IFFALSE 23383
// exit ;
23379: POP
23380: POP
23381: GO 23675
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23383: LD_ADDR_VAR 0 8
23387: PUSH
23388: LD_VAR 0 12
23392: PUSH
23393: LD_VAR 0 7
23397: ARRAY
23398: PUSH
23399: LD_INT 1
23401: ARRAY
23402: PPUSH
23403: LD_VAR 0 12
23407: PUSH
23408: LD_VAR 0 7
23412: ARRAY
23413: PUSH
23414: LD_INT 2
23416: ARRAY
23417: PPUSH
23418: CALL_OW 546
23422: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23423: LD_VAR 0 8
23427: PUSH
23428: LD_INT 1
23430: ARRAY
23431: PUSH
23432: LD_VAR 0 8
23436: PUSH
23437: LD_INT 2
23439: ARRAY
23440: PUSH
23441: LD_VAR 0 13
23445: PUSH
23446: LD_INT 2
23448: PLUS
23449: GREATER
23450: OR
23451: PUSH
23452: LD_VAR 0 8
23456: PUSH
23457: LD_INT 2
23459: ARRAY
23460: PUSH
23461: LD_VAR 0 13
23465: PUSH
23466: LD_INT 2
23468: MINUS
23469: LESS
23470: OR
23471: PUSH
23472: LD_VAR 0 8
23476: PUSH
23477: LD_INT 3
23479: ARRAY
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: LD_INT 8
23486: PUSH
23487: LD_INT 9
23489: PUSH
23490: LD_INT 10
23492: PUSH
23493: LD_INT 11
23495: PUSH
23496: LD_INT 12
23498: PUSH
23499: LD_INT 13
23501: PUSH
23502: LD_INT 16
23504: PUSH
23505: LD_INT 17
23507: PUSH
23508: LD_INT 18
23510: PUSH
23511: LD_INT 19
23513: PUSH
23514: LD_INT 20
23516: PUSH
23517: LD_INT 21
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: IN
23535: NOT
23536: OR
23537: PUSH
23538: LD_VAR 0 8
23542: PUSH
23543: LD_INT 5
23545: ARRAY
23546: NOT
23547: OR
23548: PUSH
23549: LD_VAR 0 8
23553: PUSH
23554: LD_INT 6
23556: ARRAY
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 7
23566: PUSH
23567: LD_INT 9
23569: PUSH
23570: LD_INT 10
23572: PUSH
23573: LD_INT 11
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: IN
23584: NOT
23585: OR
23586: IFFALSE 23592
// exit ;
23588: POP
23589: POP
23590: GO 23675
// end ;
23592: GO 23263
23594: POP
23595: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23596: LD_VAR 0 9
23600: PPUSH
23601: LD_VAR 0 3
23605: PPUSH
23606: LD_VAR 0 4
23610: PPUSH
23611: LD_INT 20
23613: PPUSH
23614: CALL 15598 0 4
23618: PUSH
23619: LD_INT 4
23621: ARRAY
23622: IFFALSE 23626
// exit ;
23624: GO 23675
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23626: LD_VAR 0 2
23630: PUSH
23631: LD_INT 29
23633: PUSH
23634: LD_INT 30
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: IN
23641: PUSH
23642: LD_VAR 0 3
23646: PPUSH
23647: LD_VAR 0 4
23651: PPUSH
23652: LD_VAR 0 9
23656: PPUSH
23657: CALL_OW 440
23661: NOT
23662: AND
23663: IFFALSE 23667
// exit ;
23665: GO 23675
// result := true ;
23667: LD_ADDR_VAR 0 6
23671: PUSH
23672: LD_INT 1
23674: ST_TO_ADDR
// end ;
23675: LD_VAR 0 6
23679: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23680: LD_INT 0
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
23690: PPUSH
23691: PPUSH
23692: PPUSH
23693: PPUSH
23694: PPUSH
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
23728: PPUSH
23729: PPUSH
23730: PPUSH
23731: PPUSH
23732: PPUSH
23733: PPUSH
23734: PPUSH
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
// result = [ ] ;
23740: LD_ADDR_VAR 0 7
23744: PUSH
23745: EMPTY
23746: ST_TO_ADDR
// temp_list = [ ] ;
23747: LD_ADDR_VAR 0 9
23751: PUSH
23752: EMPTY
23753: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23754: LD_VAR 0 4
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 3
23770: PUSH
23771: LD_INT 4
23773: PUSH
23774: LD_INT 5
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: IN
23785: NOT
23786: PUSH
23787: LD_VAR 0 1
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: IN
23802: PUSH
23803: LD_VAR 0 5
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: LD_INT 3
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: LIST
23821: IN
23822: NOT
23823: AND
23824: OR
23825: IFFALSE 23829
// exit ;
23827: GO 42220
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23829: LD_VAR 0 1
23833: PUSH
23834: LD_INT 6
23836: PUSH
23837: LD_INT 7
23839: PUSH
23840: LD_INT 8
23842: PUSH
23843: LD_INT 13
23845: PUSH
23846: LD_INT 12
23848: PUSH
23849: LD_INT 15
23851: PUSH
23852: LD_INT 11
23854: PUSH
23855: LD_INT 14
23857: PUSH
23858: LD_INT 10
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: IN
23872: IFFALSE 23882
// btype = b_lab ;
23874: LD_ADDR_VAR 0 1
23878: PUSH
23879: LD_INT 6
23881: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23882: LD_VAR 0 6
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: LIST
23900: IN
23901: NOT
23902: PUSH
23903: LD_VAR 0 1
23907: PUSH
23908: LD_INT 0
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 3
23919: PUSH
23920: LD_INT 6
23922: PUSH
23923: LD_INT 36
23925: PUSH
23926: LD_INT 4
23928: PUSH
23929: LD_INT 5
23931: PUSH
23932: LD_INT 31
23934: PUSH
23935: LD_INT 32
23937: PUSH
23938: LD_INT 33
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: IN
23954: NOT
23955: PUSH
23956: LD_VAR 0 6
23960: PUSH
23961: LD_INT 1
23963: EQUAL
23964: AND
23965: OR
23966: PUSH
23967: LD_VAR 0 1
23971: PUSH
23972: LD_INT 2
23974: PUSH
23975: LD_INT 3
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: IN
23982: NOT
23983: PUSH
23984: LD_VAR 0 6
23988: PUSH
23989: LD_INT 2
23991: EQUAL
23992: AND
23993: OR
23994: IFFALSE 24004
// mode = 0 ;
23996: LD_ADDR_VAR 0 6
24000: PUSH
24001: LD_INT 0
24003: ST_TO_ADDR
// case mode of 0 :
24004: LD_VAR 0 6
24008: PUSH
24009: LD_INT 0
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 35470
24017: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24018: LD_ADDR_VAR 0 11
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: NEG
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: NEG
24100: PUSH
24101: LD_INT 2
24103: NEG
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: LD_INT 2
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 2
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: LD_INT 2
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: LD_INT 3
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: LD_INT 3
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24211: LD_ADDR_VAR 0 12
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: LD_INT 0
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 1
24249: PUSH
24250: LD_INT 1
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: LD_INT 1
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 1
24269: NEG
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: LD_INT 1
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: LD_INT 0
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 2
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: NEG
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 2
24334: NEG
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 2
24345: NEG
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 2
24357: NEG
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 3
24368: NEG
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 3
24379: NEG
24380: PUSH
24381: LD_INT 1
24383: NEG
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24407: LD_ADDR_VAR 0 13
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: LD_INT 2
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 2
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: LD_INT 2
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 2
24530: NEG
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 2
24542: NEG
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: LD_INT 3
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 3
24566: NEG
24567: PUSH
24568: LD_INT 2
24570: NEG
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 3
24578: NEG
24579: PUSH
24580: LD_INT 3
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24606: LD_ADDR_VAR 0 14
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: LD_INT 2
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: LD_INT 1
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: LD_INT 2
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 1
24741: NEG
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: LD_INT 3
24756: NEG
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 3
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: LD_INT 2
24778: NEG
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24802: LD_ADDR_VAR 0 15
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 1
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: LD_INT 0
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: NEG
24937: PUSH
24938: LD_INT 1
24940: NEG
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 2
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 3
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 3
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24995: LD_ADDR_VAR 0 16
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 0
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 2
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 2
25088: PUSH
25089: LD_INT 1
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 2
25118: NEG
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: NEG
25131: PUSH
25132: LD_INT 2
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: LD_INT 2
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 3
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25188: LD_ADDR_VAR 0 17
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 1
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: LD_INT 2
25273: NEG
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: LD_INT 2
25284: NEG
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: LD_INT 1
25295: NEG
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 2
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 2
25364: NEG
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 2
25375: NEG
25376: PUSH
25377: LD_INT 1
25379: NEG
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 2
25387: NEG
25388: PUSH
25389: LD_INT 2
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25418: LD_ADDR_VAR 0 18
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: LD_INT 0
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: NEG
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: NEG
25500: PUSH
25501: LD_INT 2
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: LD_INT 2
25514: NEG
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 1
25525: NEG
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: LD_INT 1
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: LD_INT 2
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 0
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: NEG
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25648: LD_ADDR_VAR 0 19
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: LD_INT 0
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: NEG
25730: PUSH
25731: LD_INT 2
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 2
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: LD_INT 1
25755: NEG
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 2
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 1
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 2
25835: NEG
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25878: LD_ADDR_VAR 0 20
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 1
25959: NEG
25960: PUSH
25961: LD_INT 2
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: LD_INT 2
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 2
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 2
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: LD_INT 0
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 2
26065: NEG
26066: PUSH
26067: LD_INT 1
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 2
26077: NEG
26078: PUSH
26079: LD_INT 2
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26108: LD_ADDR_VAR 0 21
26112: PUSH
26113: LD_INT 0
26115: PUSH
26116: LD_INT 0
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: LD_INT 1
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 0
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: LD_INT 2
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: LD_INT 2
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: LD_INT 1
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: LD_INT 2
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: LD_INT 2
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 1
26273: NEG
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26338: LD_ADDR_VAR 0 22
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: LD_INT 2
26434: NEG
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: LD_INT 2
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: LD_INT 2
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 2
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26568: LD_ADDR_VAR 0 23
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: LD_INT 0
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: LD_INT 2
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 2
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 2
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: LD_INT 3
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: LD_INT 3
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: LD_INT 2
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26848: LD_ADDR_VAR 0 24
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 2
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: LD_INT 1
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 2
27047: NEG
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: LD_INT 2
27062: NEG
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 3
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27124: LD_ADDR_VAR 0 25
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: LD_INT 0
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 1
27144: NEG
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: LD_INT 0
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: LD_INT 2
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: LD_INT 1
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 2
27259: PUSH
27260: LD_INT 2
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: LD_INT 2
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: NEG
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 2
27323: NEG
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 3
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 3
27345: PUSH
27346: LD_INT 2
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: PUSH
27356: LD_INT 3
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: LD_INT 3
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27398: LD_ADDR_VAR 0 26
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 2
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 2
27609: PUSH
27610: LD_INT 3
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: LD_INT 3
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27674: LD_ADDR_VAR 0 27
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: LD_INT 2
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 2
27850: NEG
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: LD_INT 2
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 2
27896: NEG
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 3
27907: NEG
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 3
27919: NEG
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27954: LD_ADDR_VAR 0 28
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: LD_INT 0
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: LD_INT 2
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: LD_INT 2
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: LD_INT 1
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 2
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: LD_INT 2
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 2
28130: NEG
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: NEG
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 2
28153: NEG
28154: PUSH
28155: LD_INT 2
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 2
28165: NEG
28166: PUSH
28167: LD_INT 3
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: NEG
28178: PUSH
28179: LD_INT 3
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 3
28189: NEG
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 3
28201: NEG
28202: PUSH
28203: LD_INT 2
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28236: LD_ADDR_VAR 0 29
28240: PUSH
28241: LD_INT 0
28243: PUSH
28244: LD_INT 0
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: LD_INT 1
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: LD_INT 2
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: LD_INT 2
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 2
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: LD_INT 2
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: LD_INT 3
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 3
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: LD_INT 3
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 3
28480: NEG
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28515: LD_ADDR_VAR 0 30
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: NEG
28682: PUSH
28683: LD_INT 0
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 2
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 3
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: LD_INT 2
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 3
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: NEG
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 3
28758: NEG
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28793: LD_ADDR_VAR 0 31
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: PUSH
28832: LD_INT 1
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: LD_INT 0
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: NEG
28875: PUSH
28876: LD_INT 2
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 2
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: PUSH
28928: LD_INT 2
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 2
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: NEG
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 2
28958: NEG
28959: PUSH
28960: LD_INT 1
28962: NEG
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: LD_INT 2
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: LD_INT 3
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 3
29005: PUSH
29006: LD_INT 1
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: LD_INT 3
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 3
29036: NEG
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29071: LD_ADDR_VAR 0 32
29075: PUSH
29076: LD_INT 0
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: LD_INT 1
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: LD_INT 1
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: NEG
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: LD_INT 2
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 2
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 2
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 2
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: LD_INT 2
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 2
29237: NEG
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: LD_INT 3
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: LD_INT 2
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 3
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 2
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: NEG
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 3
29314: NEG
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29349: LD_ADDR_VAR 0 33
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 0
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: LD_INT 2
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 1
29445: NEG
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 2
29453: PUSH
29454: LD_INT 0
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 1
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 2
29515: NEG
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: NEG
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: NEG
29540: PUSH
29541: LD_INT 3
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 3
29593: NEG
29594: PUSH
29595: LD_INT 2
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29628: LD_ADDR_VAR 0 34
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: LD_INT 2
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: NEG
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: LD_INT 0
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: NEG
29796: PUSH
29797: LD_INT 1
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: NEG
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: PUSH
29821: LD_INT 3
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 3
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 3
29873: NEG
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29908: LD_ADDR_VAR 0 35
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 1
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 2
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 2
29999: NEG
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30020: LD_ADDR_VAR 0 36
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: LD_INT 1
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: LD_INT 0
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: NEG
30102: PUSH
30103: LD_INT 2
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30132: LD_ADDR_VAR 0 37
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: NEG
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30244: LD_ADDR_VAR 0 38
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 0
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: NEG
30314: PUSH
30315: LD_INT 1
30317: NEG
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 2
30335: NEG
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30356: LD_ADDR_VAR 0 39
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30468: LD_ADDR_VAR 0 40
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: LD_INT 1
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 1
30537: NEG
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: LD_INT 1
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30580: LD_ADDR_VAR 0 41
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: LD_INT 0
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: LD_INT 1
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 2
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: LD_INT 0
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: LD_INT 2
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 2
30735: NEG
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 2
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: LD_INT 2
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: NEG
30771: PUSH
30772: LD_INT 3
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: LD_INT 1
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 3
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 3
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 3
30823: PUSH
30824: LD_INT 3
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 2
30833: PUSH
30834: LD_INT 3
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: NEG
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 3
30854: NEG
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 3
30865: NEG
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 3
30877: NEG
30878: PUSH
30879: LD_INT 2
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: LD_INT 3
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30930: LD_ADDR_VAR 0 42
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: LD_INT 2
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 2
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: LD_INT 2
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: LD_INT 2
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: NEG
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: LD_INT 3
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: LD_INT 3
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 3
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 3
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: LD_INT 3
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 3
31227: NEG
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 3
31239: NEG
31240: PUSH
31241: LD_INT 3
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31280: LD_ADDR_VAR 0 43
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 1
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 1
31349: NEG
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: LD_INT 2
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: LD_INT 2
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 2
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: LD_INT 2
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 3
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: LD_INT 3
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 2
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 2
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 3
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 3
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: LD_INT 3
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: NEG
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 3
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31628: LD_ADDR_VAR 0 44
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 2
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 3
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 3
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 3
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 3
31902: NEG
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 3
31925: NEG
31926: PUSH
31927: LD_INT 2
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 3
31937: NEG
31938: PUSH
31939: LD_INT 3
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31978: LD_ADDR_VAR 0 45
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 2
32144: NEG
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 2
32156: NEG
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: NEG
32169: PUSH
32170: LD_INT 3
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: LD_INT 3
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: LD_INT 3
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 3
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: LD_INT 3
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: LD_INT 3
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: NEG
32276: PUSH
32277: LD_INT 2
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 3
32287: NEG
32288: PUSH
32289: LD_INT 3
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32328: LD_ADDR_VAR 0 46
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: LD_INT 1
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 3
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: LD_INT 2
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: LD_INT 1
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: LD_INT 3
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 3
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 2
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 3
32624: NEG
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 3
32635: NEG
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32676: LD_ADDR_VAR 0 47
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 2
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: NEG
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: LD_INT 2
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32827: LD_ADDR_VAR 0 48
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 0
32920: PUSH
32921: LD_INT 2
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32974: LD_ADDR_VAR 0 49
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 0
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 2
33076: PUSH
33077: LD_INT 1
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33118: LD_ADDR_VAR 0 50
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 2
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: PUSH
33220: LD_INT 2
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: NEG
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33262: LD_ADDR_VAR 0 51
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: LD_INT 1
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 2
33385: NEG
33386: PUSH
33387: LD_INT 1
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33409: LD_ADDR_VAR 0 52
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: LD_INT 2
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 2
33536: NEG
33537: PUSH
33538: LD_INT 2
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33560: LD_ADDR_VAR 0 53
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 1
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 2
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: NEG
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: NEG
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33790: LD_ADDR_VAR 0 54
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: LD_INT 1
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 2
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: NEG
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 2
33977: NEG
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34020: LD_ADDR_VAR 0 55
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 2
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: LD_INT 2
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 2
34196: NEG
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 2
34207: NEG
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34250: LD_ADDR_VAR 0 56
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: LD_INT 1
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: LD_INT 2
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 2
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 2
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: LD_INT 2
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 2
34437: NEG
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: NEG
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34480: LD_ADDR_VAR 0 57
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: LD_INT 2
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 2
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 2
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: LD_INT 2
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: PUSH
34647: LD_INT 1
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: NEG
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34710: LD_ADDR_VAR 0 58
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: LD_INT 2
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 2
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 2
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 2
34897: NEG
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: LD_INT 2
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34940: LD_ADDR_VAR 0 59
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35028: LD_ADDR_VAR 0 60
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35116: LD_ADDR_VAR 0 61
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35204: LD_ADDR_VAR 0 62
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35292: LD_ADDR_VAR 0 63
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35380: LD_ADDR_VAR 0 64
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: ST_TO_ADDR
// end ; 1 :
35468: GO 41365
35470: LD_INT 1
35472: DOUBLE
35473: EQUAL
35474: IFTRUE 35478
35476: GO 38101
35478: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35479: LD_ADDR_VAR 0 11
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: LD_INT 3
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: LD_INT 3
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: LD_INT 2
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35523: LD_ADDR_VAR 0 12
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 3
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 3
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35564: LD_ADDR_VAR 0 13
35568: PUSH
35569: LD_INT 3
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 3
35581: PUSH
35582: LD_INT 3
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: LD_INT 3
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35604: LD_ADDR_VAR 0 14
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: LD_INT 3
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 1
35631: NEG
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35645: LD_ADDR_VAR 0 15
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 3
35674: NEG
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35689: LD_ADDR_VAR 0 16
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: LD_INT 3
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 3
35708: NEG
35709: PUSH
35710: LD_INT 2
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 3
35720: NEG
35721: PUSH
35722: LD_INT 3
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: LIST
35734: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35735: LD_ADDR_VAR 0 17
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: LD_INT 3
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: LD_INT 3
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35779: LD_ADDR_VAR 0 18
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 3
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 3
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35820: LD_ADDR_VAR 0 19
35824: PUSH
35825: LD_INT 3
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 3
35837: PUSH
35838: LD_INT 3
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35860: LD_ADDR_VAR 0 20
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: LD_INT 3
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 3
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35901: LD_ADDR_VAR 0 21
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 3
35919: NEG
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 3
35930: NEG
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35945: LD_ADDR_VAR 0 22
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: LD_INT 3
35956: NEG
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 3
35964: NEG
35965: PUSH
35966: LD_INT 2
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 3
35976: NEG
35977: PUSH
35978: LD_INT 3
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35991: LD_ADDR_VAR 0 23
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: LD_INT 3
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: LD_INT 4
36013: NEG
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: LD_INT 3
36024: NEG
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: LIST
36034: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36035: LD_ADDR_VAR 0 24
36039: PUSH
36040: LD_INT 3
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 3
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 4
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: LIST
36075: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36076: LD_ADDR_VAR 0 25
36080: PUSH
36081: LD_INT 3
36083: PUSH
36084: LD_INT 3
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 4
36093: PUSH
36094: LD_INT 3
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: LD_INT 4
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: LIST
36115: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36116: LD_ADDR_VAR 0 26
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: LD_INT 4
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: LD_INT 3
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36157: LD_ADDR_VAR 0 27
36161: PUSH
36162: LD_INT 3
36164: NEG
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 3
36175: NEG
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 4
36186: NEG
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: LIST
36200: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36201: LD_ADDR_VAR 0 28
36205: PUSH
36206: LD_INT 3
36208: NEG
36209: PUSH
36210: LD_INT 3
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 3
36220: NEG
36221: PUSH
36222: LD_INT 4
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 4
36232: NEG
36233: PUSH
36234: LD_INT 3
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36247: LD_ADDR_VAR 0 29
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: LD_INT 3
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 3
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: LD_INT 2
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 4
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: LD_INT 4
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 3
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: LD_INT 5
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: LD_INT 5
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: PUSH
36346: LD_INT 4
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 6
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: LD_INT 6
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 5
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36402: LD_ADDR_VAR 0 30
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: LD_INT 1
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 3
36420: PUSH
36421: LD_INT 0
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 3
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 3
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 4
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 4
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 4
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 5
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 5
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 5
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 6
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 6
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36545: LD_ADDR_VAR 0 31
36549: PUSH
36550: LD_INT 3
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: LD_INT 3
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: LD_INT 3
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 4
36582: PUSH
36583: LD_INT 3
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 4
36592: PUSH
36593: LD_INT 4
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 3
36602: PUSH
36603: LD_INT 4
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 5
36612: PUSH
36613: LD_INT 4
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 5
36622: PUSH
36623: LD_INT 5
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 4
36632: PUSH
36633: LD_INT 5
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 6
36642: PUSH
36643: LD_INT 5
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 6
36652: PUSH
36653: LD_INT 6
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 5
36662: PUSH
36663: LD_INT 6
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36684: LD_ADDR_VAR 0 32
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: LD_INT 3
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: LD_INT 3
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: LD_INT 2
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 4
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 4
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: LD_INT 3
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 5
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 5
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 4
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 6
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 6
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: LD_INT 5
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36827: LD_ADDR_VAR 0 33
36831: PUSH
36832: LD_INT 2
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 3
36845: NEG
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 3
36856: NEG
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: NEG
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 4
36879: NEG
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 4
36890: NEG
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 4
36902: NEG
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 5
36913: NEG
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 5
36924: NEG
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 5
36936: NEG
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 6
36947: NEG
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 6
36958: NEG
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36982: LD_ADDR_VAR 0 34
36986: PUSH
36987: LD_INT 2
36989: NEG
36990: PUSH
36991: LD_INT 3
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 3
37001: NEG
37002: PUSH
37003: LD_INT 2
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 3
37013: NEG
37014: PUSH
37015: LD_INT 3
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 3
37025: NEG
37026: PUSH
37027: LD_INT 4
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 4
37037: NEG
37038: PUSH
37039: LD_INT 3
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 4
37049: NEG
37050: PUSH
37051: LD_INT 4
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 4
37061: NEG
37062: PUSH
37063: LD_INT 5
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 5
37073: NEG
37074: PUSH
37075: LD_INT 4
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 5
37085: NEG
37086: PUSH
37087: LD_INT 5
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 5
37097: NEG
37098: PUSH
37099: LD_INT 6
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 6
37109: NEG
37110: PUSH
37111: LD_INT 5
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 6
37121: NEG
37122: PUSH
37123: LD_INT 6
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37145: LD_ADDR_VAR 0 41
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: NEG
37164: PUSH
37165: LD_INT 3
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37189: LD_ADDR_VAR 0 42
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 2
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 3
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37230: LD_ADDR_VAR 0 43
37234: PUSH
37235: LD_INT 2
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37270: LD_ADDR_VAR 0 44
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 2
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37311: LD_ADDR_VAR 0 45
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 3
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37355: LD_ADDR_VAR 0 46
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: LD_INT 2
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: LD_INT 3
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 3
37386: NEG
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37401: LD_ADDR_VAR 0 47
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: LD_INT 3
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: LD_INT 3
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37434: LD_ADDR_VAR 0 48
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37465: LD_ADDR_VAR 0 49
37469: PUSH
37470: LD_INT 3
37472: PUSH
37473: LD_INT 1
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37494: LD_ADDR_VAR 0 50
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 3
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37523: LD_ADDR_VAR 0 51
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 2
37541: NEG
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37554: LD_ADDR_VAR 0 52
37558: PUSH
37559: LD_INT 3
37561: NEG
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 3
37573: NEG
37574: PUSH
37575: LD_INT 2
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37587: LD_ADDR_VAR 0 53
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: LD_INT 3
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 3
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37631: LD_ADDR_VAR 0 54
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 3
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: LIST
37671: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37672: LD_ADDR_VAR 0 55
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 3
37689: PUSH
37690: LD_INT 3
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 3
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37712: LD_ADDR_VAR 0 56
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: LD_INT 3
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 3
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37753: LD_ADDR_VAR 0 57
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 3
37771: NEG
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: LIST
37796: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37797: LD_ADDR_VAR 0 58
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 3
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 3
37828: NEG
37829: PUSH
37830: LD_INT 3
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37843: LD_ADDR_VAR 0 59
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 0
37862: PUSH
37863: LD_INT 2
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37887: LD_ADDR_VAR 0 60
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37928: LD_ADDR_VAR 0 61
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: LIST
37967: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37968: LD_ADDR_VAR 0 62
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: LIST
38008: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38009: LD_ADDR_VAR 0 63
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: LIST
38052: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38053: LD_ADDR_VAR 0 64
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: ST_TO_ADDR
// end ; 2 :
38099: GO 41365
38101: LD_INT 2
38103: DOUBLE
38104: EQUAL
38105: IFTRUE 38109
38107: GO 41364
38109: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38110: LD_ADDR_VAR 0 29
38114: PUSH
38115: LD_INT 4
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 4
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 5
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 5
38148: PUSH
38149: LD_INT 1
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 4
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 3
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 3
38189: PUSH
38190: LD_INT 2
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 5
38200: PUSH
38201: LD_INT 2
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 3
38210: PUSH
38211: LD_INT 3
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 3
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 4
38230: PUSH
38231: LD_INT 3
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 4
38240: PUSH
38241: LD_INT 4
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: LD_INT 4
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: PUSH
38261: LD_INT 3
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 4
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: PUSH
38291: LD_INT 4
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 0
38300: PUSH
38301: LD_INT 4
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: LD_INT 3
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: LD_INT 4
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: LD_INT 5
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: LD_INT 5
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: LD_INT 4
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 3
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: PUSH
38373: LD_INT 5
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: NEG
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 3
38404: NEG
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: NEG
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 3
38438: NEG
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 4
38449: NEG
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 4
38460: NEG
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 4
38472: NEG
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 4
38495: NEG
38496: PUSH
38497: LD_INT 4
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 4
38507: NEG
38508: PUSH
38509: LD_INT 5
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 3
38519: NEG
38520: PUSH
38521: LD_INT 4
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 3
38531: NEG
38532: PUSH
38533: LD_INT 3
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 4
38543: NEG
38544: PUSH
38545: LD_INT 3
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 5
38555: NEG
38556: PUSH
38557: LD_INT 4
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 5
38567: NEG
38568: PUSH
38569: LD_INT 5
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 3
38579: NEG
38580: PUSH
38581: LD_INT 5
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 5
38591: NEG
38592: PUSH
38593: LD_INT 3
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38648: LD_ADDR_VAR 0 30
38652: PUSH
38653: LD_INT 4
38655: PUSH
38656: LD_INT 4
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 4
38665: PUSH
38666: LD_INT 3
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 5
38675: PUSH
38676: LD_INT 4
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 5
38685: PUSH
38686: LD_INT 5
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 4
38695: PUSH
38696: LD_INT 5
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 3
38705: PUSH
38706: LD_INT 4
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 3
38715: PUSH
38716: LD_INT 3
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 5
38725: PUSH
38726: LD_INT 3
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 3
38735: PUSH
38736: LD_INT 5
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 3
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 3
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: LD_INT 4
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 4
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: NEG
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: LD_INT 4
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 4
38838: NEG
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 4
38849: NEG
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 3
38861: NEG
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 3
38872: NEG
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 4
38883: NEG
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 5
38894: NEG
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 5
38905: NEG
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 5
38917: NEG
38918: PUSH
38919: LD_INT 2
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 3
38929: NEG
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 3
38940: NEG
38941: PUSH
38942: LD_INT 3
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 3
38952: NEG
38953: PUSH
38954: LD_INT 4
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: LD_INT 3
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 3
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 4
39000: NEG
39001: PUSH
39002: LD_INT 3
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 4
39012: NEG
39013: PUSH
39014: LD_INT 4
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: LD_INT 4
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 4
39036: NEG
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 4
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 5
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 4
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 3
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 3
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 4
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: LD_INT 5
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: LD_INT 3
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: LD_INT 5
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39195: LD_ADDR_VAR 0 31
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: LD_INT 4
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 3
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: LD_INT 4
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: LD_INT 5
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 5
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: LD_INT 4
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: LD_INT 3
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: LD_INT 5
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 2
39284: NEG
39285: PUSH
39286: LD_INT 3
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 3
39295: NEG
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 3
39306: NEG
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 3
39340: NEG
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 4
39351: NEG
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 4
39362: NEG
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 4
39374: NEG
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 4
39397: NEG
39398: PUSH
39399: LD_INT 4
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 4
39409: NEG
39410: PUSH
39411: LD_INT 5
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: NEG
39422: PUSH
39423: LD_INT 4
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: LD_INT 3
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 4
39445: NEG
39446: PUSH
39447: LD_INT 3
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 5
39457: NEG
39458: PUSH
39459: LD_INT 4
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 5
39469: NEG
39470: PUSH
39471: LD_INT 5
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 3
39481: NEG
39482: PUSH
39483: LD_INT 5
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 5
39493: NEG
39494: PUSH
39495: LD_INT 3
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 3
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 4
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 3
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 0
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: LD_INT 3
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 4
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: LD_INT 2
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 2
39595: NEG
39596: PUSH
39597: LD_INT 4
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 4
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 4
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 5
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 5
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 4
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 3
39679: PUSH
39680: LD_INT 2
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 5
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39745: LD_ADDR_VAR 0 32
39749: PUSH
39750: LD_INT 4
39752: NEG
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 4
39763: NEG
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 3
39775: NEG
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 3
39786: NEG
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 4
39797: NEG
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 5
39808: NEG
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 5
39819: NEG
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 5
39831: NEG
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: NEG
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 3
39854: NEG
39855: PUSH
39856: LD_INT 3
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: LD_INT 4
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: LD_INT 3
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 3
39902: NEG
39903: PUSH
39904: LD_INT 2
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 4
39914: NEG
39915: PUSH
39916: LD_INT 3
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 4
39926: NEG
39927: PUSH
39928: LD_INT 4
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: LD_INT 4
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 4
39950: NEG
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 4
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: LD_INT 5
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 4
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 3
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 3
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: LD_INT 4
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 5
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: LD_INT 3
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: LD_INT 5
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 3
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 3
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 4
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 4
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 3
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 4
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 4
40157: PUSH
40158: LD_INT 4
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 4
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 5
40177: PUSH
40178: LD_INT 4
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 5
40187: PUSH
40188: LD_INT 5
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 4
40197: PUSH
40198: LD_INT 5
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 3
40207: PUSH
40208: LD_INT 4
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 3
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 5
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: LD_INT 5
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40292: LD_ADDR_VAR 0 33
40296: PUSH
40297: LD_INT 4
40299: NEG
40300: PUSH
40301: LD_INT 4
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 4
40311: NEG
40312: PUSH
40313: LD_INT 5
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 3
40323: NEG
40324: PUSH
40325: LD_INT 4
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 3
40335: NEG
40336: PUSH
40337: LD_INT 3
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 4
40347: NEG
40348: PUSH
40349: LD_INT 3
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 5
40359: NEG
40360: PUSH
40361: LD_INT 4
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 5
40371: NEG
40372: PUSH
40373: LD_INT 5
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 3
40383: NEG
40384: PUSH
40385: LD_INT 5
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 5
40395: NEG
40396: PUSH
40397: LD_INT 3
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 3
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: LD_INT 4
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: LD_INT 3
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: PUSH
40441: LD_INT 2
40443: NEG
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: LD_INT 2
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 3
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 4
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 4
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 4
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 4
40519: PUSH
40520: LD_INT 1
40522: NEG
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 5
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 5
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 4
40550: PUSH
40551: LD_INT 1
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 3
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 3
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 3
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 5
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 3
40602: PUSH
40603: LD_INT 3
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 4
40622: PUSH
40623: LD_INT 3
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 4
40632: PUSH
40633: LD_INT 4
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 3
40642: PUSH
40643: LD_INT 4
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 2
40652: PUSH
40653: LD_INT 3
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 4
40672: PUSH
40673: LD_INT 2
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: LD_INT 4
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 4
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 3
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: LD_INT 4
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 5
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 5
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 4
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: LD_INT 3
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: LD_INT 5
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: LD_INT 3
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40830: LD_ADDR_VAR 0 34
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: LD_INT 4
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 5
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: LD_INT 4
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 3
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 3
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: LD_INT 4
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 5
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: LD_INT 3
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: LD_INT 5
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 3
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 3
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 4
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 4
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 4
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 4
41032: PUSH
41033: LD_INT 4
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 4
41042: PUSH
41043: LD_INT 3
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 5
41052: PUSH
41053: LD_INT 4
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 5
41062: PUSH
41063: LD_INT 5
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 4
41072: PUSH
41073: LD_INT 5
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 3
41082: PUSH
41083: LD_INT 4
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 3
41092: PUSH
41093: LD_INT 3
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 5
41102: PUSH
41103: LD_INT 3
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 3
41112: PUSH
41113: LD_INT 5
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 3
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 3
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: LD_INT 4
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 4
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 3
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: LD_INT 4
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 2
41204: NEG
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 4
41215: NEG
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 4
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 3
41238: NEG
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 3
41249: NEG
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 4
41260: NEG
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 5
41271: NEG
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 5
41282: NEG
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 5
41294: NEG
41295: PUSH
41296: LD_INT 2
41298: NEG
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 3
41306: NEG
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: ST_TO_ADDR
// end ; end ;
41362: GO 41365
41364: POP
// case btype of b_depot , b_warehouse :
41365: LD_VAR 0 1
41369: PUSH
41370: LD_INT 0
41372: DOUBLE
41373: EQUAL
41374: IFTRUE 41384
41376: LD_INT 1
41378: DOUBLE
41379: EQUAL
41380: IFTRUE 41384
41382: GO 41585
41384: POP
// case nation of nation_american :
41385: LD_VAR 0 5
41389: PUSH
41390: LD_INT 1
41392: DOUBLE
41393: EQUAL
41394: IFTRUE 41398
41396: GO 41454
41398: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41399: LD_ADDR_VAR 0 9
41403: PUSH
41404: LD_VAR 0 11
41408: PUSH
41409: LD_VAR 0 12
41413: PUSH
41414: LD_VAR 0 13
41418: PUSH
41419: LD_VAR 0 14
41423: PUSH
41424: LD_VAR 0 15
41428: PUSH
41429: LD_VAR 0 16
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: PUSH
41442: LD_VAR 0 4
41446: PUSH
41447: LD_INT 1
41449: PLUS
41450: ARRAY
41451: ST_TO_ADDR
41452: GO 41583
41454: LD_INT 2
41456: DOUBLE
41457: EQUAL
41458: IFTRUE 41462
41460: GO 41518
41462: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41463: LD_ADDR_VAR 0 9
41467: PUSH
41468: LD_VAR 0 17
41472: PUSH
41473: LD_VAR 0 18
41477: PUSH
41478: LD_VAR 0 19
41482: PUSH
41483: LD_VAR 0 20
41487: PUSH
41488: LD_VAR 0 21
41492: PUSH
41493: LD_VAR 0 22
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: PUSH
41506: LD_VAR 0 4
41510: PUSH
41511: LD_INT 1
41513: PLUS
41514: ARRAY
41515: ST_TO_ADDR
41516: GO 41583
41518: LD_INT 3
41520: DOUBLE
41521: EQUAL
41522: IFTRUE 41526
41524: GO 41582
41526: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41527: LD_ADDR_VAR 0 9
41531: PUSH
41532: LD_VAR 0 23
41536: PUSH
41537: LD_VAR 0 24
41541: PUSH
41542: LD_VAR 0 25
41546: PUSH
41547: LD_VAR 0 26
41551: PUSH
41552: LD_VAR 0 27
41556: PUSH
41557: LD_VAR 0 28
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: PUSH
41570: LD_VAR 0 4
41574: PUSH
41575: LD_INT 1
41577: PLUS
41578: ARRAY
41579: ST_TO_ADDR
41580: GO 41583
41582: POP
41583: GO 42138
41585: LD_INT 2
41587: DOUBLE
41588: EQUAL
41589: IFTRUE 41599
41591: LD_INT 3
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41599
41597: GO 41655
41599: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41600: LD_ADDR_VAR 0 9
41604: PUSH
41605: LD_VAR 0 29
41609: PUSH
41610: LD_VAR 0 30
41614: PUSH
41615: LD_VAR 0 31
41619: PUSH
41620: LD_VAR 0 32
41624: PUSH
41625: LD_VAR 0 33
41629: PUSH
41630: LD_VAR 0 34
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: PUSH
41643: LD_VAR 0 4
41647: PUSH
41648: LD_INT 1
41650: PLUS
41651: ARRAY
41652: ST_TO_ADDR
41653: GO 42138
41655: LD_INT 16
41657: DOUBLE
41658: EQUAL
41659: IFTRUE 41717
41661: LD_INT 17
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41717
41667: LD_INT 18
41669: DOUBLE
41670: EQUAL
41671: IFTRUE 41717
41673: LD_INT 19
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41717
41679: LD_INT 22
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41717
41685: LD_INT 20
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41717
41691: LD_INT 21
41693: DOUBLE
41694: EQUAL
41695: IFTRUE 41717
41697: LD_INT 23
41699: DOUBLE
41700: EQUAL
41701: IFTRUE 41717
41703: LD_INT 24
41705: DOUBLE
41706: EQUAL
41707: IFTRUE 41717
41709: LD_INT 25
41711: DOUBLE
41712: EQUAL
41713: IFTRUE 41717
41715: GO 41773
41717: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41718: LD_ADDR_VAR 0 9
41722: PUSH
41723: LD_VAR 0 35
41727: PUSH
41728: LD_VAR 0 36
41732: PUSH
41733: LD_VAR 0 37
41737: PUSH
41738: LD_VAR 0 38
41742: PUSH
41743: LD_VAR 0 39
41747: PUSH
41748: LD_VAR 0 40
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: PUSH
41761: LD_VAR 0 4
41765: PUSH
41766: LD_INT 1
41768: PLUS
41769: ARRAY
41770: ST_TO_ADDR
41771: GO 42138
41773: LD_INT 6
41775: DOUBLE
41776: EQUAL
41777: IFTRUE 41829
41779: LD_INT 7
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41829
41785: LD_INT 8
41787: DOUBLE
41788: EQUAL
41789: IFTRUE 41829
41791: LD_INT 13
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41829
41797: LD_INT 12
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41829
41803: LD_INT 15
41805: DOUBLE
41806: EQUAL
41807: IFTRUE 41829
41809: LD_INT 11
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41829
41815: LD_INT 14
41817: DOUBLE
41818: EQUAL
41819: IFTRUE 41829
41821: LD_INT 10
41823: DOUBLE
41824: EQUAL
41825: IFTRUE 41829
41827: GO 41885
41829: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41830: LD_ADDR_VAR 0 9
41834: PUSH
41835: LD_VAR 0 41
41839: PUSH
41840: LD_VAR 0 42
41844: PUSH
41845: LD_VAR 0 43
41849: PUSH
41850: LD_VAR 0 44
41854: PUSH
41855: LD_VAR 0 45
41859: PUSH
41860: LD_VAR 0 46
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: PUSH
41873: LD_VAR 0 4
41877: PUSH
41878: LD_INT 1
41880: PLUS
41881: ARRAY
41882: ST_TO_ADDR
41883: GO 42138
41885: LD_INT 36
41887: DOUBLE
41888: EQUAL
41889: IFTRUE 41893
41891: GO 41949
41893: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41894: LD_ADDR_VAR 0 9
41898: PUSH
41899: LD_VAR 0 47
41903: PUSH
41904: LD_VAR 0 48
41908: PUSH
41909: LD_VAR 0 49
41913: PUSH
41914: LD_VAR 0 50
41918: PUSH
41919: LD_VAR 0 51
41923: PUSH
41924: LD_VAR 0 52
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: PUSH
41937: LD_VAR 0 4
41941: PUSH
41942: LD_INT 1
41944: PLUS
41945: ARRAY
41946: ST_TO_ADDR
41947: GO 42138
41949: LD_INT 4
41951: DOUBLE
41952: EQUAL
41953: IFTRUE 41975
41955: LD_INT 5
41957: DOUBLE
41958: EQUAL
41959: IFTRUE 41975
41961: LD_INT 34
41963: DOUBLE
41964: EQUAL
41965: IFTRUE 41975
41967: LD_INT 37
41969: DOUBLE
41970: EQUAL
41971: IFTRUE 41975
41973: GO 42031
41975: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41976: LD_ADDR_VAR 0 9
41980: PUSH
41981: LD_VAR 0 53
41985: PUSH
41986: LD_VAR 0 54
41990: PUSH
41991: LD_VAR 0 55
41995: PUSH
41996: LD_VAR 0 56
42000: PUSH
42001: LD_VAR 0 57
42005: PUSH
42006: LD_VAR 0 58
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: PUSH
42019: LD_VAR 0 4
42023: PUSH
42024: LD_INT 1
42026: PLUS
42027: ARRAY
42028: ST_TO_ADDR
42029: GO 42138
42031: LD_INT 31
42033: DOUBLE
42034: EQUAL
42035: IFTRUE 42081
42037: LD_INT 32
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42081
42043: LD_INT 33
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42081
42049: LD_INT 27
42051: DOUBLE
42052: EQUAL
42053: IFTRUE 42081
42055: LD_INT 26
42057: DOUBLE
42058: EQUAL
42059: IFTRUE 42081
42061: LD_INT 28
42063: DOUBLE
42064: EQUAL
42065: IFTRUE 42081
42067: LD_INT 29
42069: DOUBLE
42070: EQUAL
42071: IFTRUE 42081
42073: LD_INT 30
42075: DOUBLE
42076: EQUAL
42077: IFTRUE 42081
42079: GO 42137
42081: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42082: LD_ADDR_VAR 0 9
42086: PUSH
42087: LD_VAR 0 59
42091: PUSH
42092: LD_VAR 0 60
42096: PUSH
42097: LD_VAR 0 61
42101: PUSH
42102: LD_VAR 0 62
42106: PUSH
42107: LD_VAR 0 63
42111: PUSH
42112: LD_VAR 0 64
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: PUSH
42125: LD_VAR 0 4
42129: PUSH
42130: LD_INT 1
42132: PLUS
42133: ARRAY
42134: ST_TO_ADDR
42135: GO 42138
42137: POP
// temp_list2 = [ ] ;
42138: LD_ADDR_VAR 0 10
42142: PUSH
42143: EMPTY
42144: ST_TO_ADDR
// for i in temp_list do
42145: LD_ADDR_VAR 0 8
42149: PUSH
42150: LD_VAR 0 9
42154: PUSH
42155: FOR_IN
42156: IFFALSE 42208
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42158: LD_ADDR_VAR 0 10
42162: PUSH
42163: LD_VAR 0 10
42167: PUSH
42168: LD_VAR 0 8
42172: PUSH
42173: LD_INT 1
42175: ARRAY
42176: PUSH
42177: LD_VAR 0 2
42181: PLUS
42182: PUSH
42183: LD_VAR 0 8
42187: PUSH
42188: LD_INT 2
42190: ARRAY
42191: PUSH
42192: LD_VAR 0 3
42196: PLUS
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: EMPTY
42203: LIST
42204: ADD
42205: ST_TO_ADDR
42206: GO 42155
42208: POP
42209: POP
// result = temp_list2 ;
42210: LD_ADDR_VAR 0 7
42214: PUSH
42215: LD_VAR 0 10
42219: ST_TO_ADDR
// end ;
42220: LD_VAR 0 7
42224: RET
// export function EnemyInRange ( unit , dist ) ; begin
42225: LD_INT 0
42227: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_VAR 0 1
42237: PPUSH
42238: CALL_OW 255
42242: PPUSH
42243: LD_VAR 0 1
42247: PPUSH
42248: CALL_OW 250
42252: PPUSH
42253: LD_VAR 0 1
42257: PPUSH
42258: CALL_OW 251
42262: PPUSH
42263: LD_VAR 0 2
42267: PPUSH
42268: CALL 15598 0 4
42272: PUSH
42273: LD_INT 4
42275: ARRAY
42276: ST_TO_ADDR
// end ;
42277: LD_VAR 0 3
42281: RET
// export function PlayerSeeMe ( unit ) ; begin
42282: LD_INT 0
42284: PPUSH
// result := See ( your_side , unit ) ;
42285: LD_ADDR_VAR 0 2
42289: PUSH
42290: LD_OWVAR 2
42294: PPUSH
42295: LD_VAR 0 1
42299: PPUSH
42300: CALL_OW 292
42304: ST_TO_ADDR
// end ;
42305: LD_VAR 0 2
42309: RET
// export function ReverseDir ( unit ) ; begin
42310: LD_INT 0
42312: PPUSH
// if not unit then
42313: LD_VAR 0 1
42317: NOT
42318: IFFALSE 42322
// exit ;
42320: GO 42345
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42322: LD_ADDR_VAR 0 2
42326: PUSH
42327: LD_VAR 0 1
42331: PPUSH
42332: CALL_OW 254
42336: PUSH
42337: LD_INT 3
42339: PLUS
42340: PUSH
42341: LD_INT 6
42343: MOD
42344: ST_TO_ADDR
// end ;
42345: LD_VAR 0 2
42349: RET
// export function ReverseArray ( array ) ; var i ; begin
42350: LD_INT 0
42352: PPUSH
42353: PPUSH
// if not array then
42354: LD_VAR 0 1
42358: NOT
42359: IFFALSE 42363
// exit ;
42361: GO 42418
// result := [ ] ;
42363: LD_ADDR_VAR 0 2
42367: PUSH
42368: EMPTY
42369: ST_TO_ADDR
// for i := array downto 1 do
42370: LD_ADDR_VAR 0 3
42374: PUSH
42375: DOUBLE
42376: LD_VAR 0 1
42380: INC
42381: ST_TO_ADDR
42382: LD_INT 1
42384: PUSH
42385: FOR_DOWNTO
42386: IFFALSE 42416
// result := Join ( result , array [ i ] ) ;
42388: LD_ADDR_VAR 0 2
42392: PUSH
42393: LD_VAR 0 2
42397: PPUSH
42398: LD_VAR 0 1
42402: PUSH
42403: LD_VAR 0 3
42407: ARRAY
42408: PPUSH
42409: CALL 47083 0 2
42413: ST_TO_ADDR
42414: GO 42385
42416: POP
42417: POP
// end ;
42418: LD_VAR 0 2
42422: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42423: LD_INT 0
42425: PPUSH
42426: PPUSH
42427: PPUSH
42428: PPUSH
42429: PPUSH
42430: PPUSH
// if not unit or not hexes then
42431: LD_VAR 0 1
42435: NOT
42436: PUSH
42437: LD_VAR 0 2
42441: NOT
42442: OR
42443: IFFALSE 42447
// exit ;
42445: GO 42570
// dist := 9999 ;
42447: LD_ADDR_VAR 0 5
42451: PUSH
42452: LD_INT 9999
42454: ST_TO_ADDR
// for i = 1 to hexes do
42455: LD_ADDR_VAR 0 4
42459: PUSH
42460: DOUBLE
42461: LD_INT 1
42463: DEC
42464: ST_TO_ADDR
42465: LD_VAR 0 2
42469: PUSH
42470: FOR_TO
42471: IFFALSE 42558
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42473: LD_ADDR_VAR 0 6
42477: PUSH
42478: LD_VAR 0 1
42482: PPUSH
42483: LD_VAR 0 2
42487: PUSH
42488: LD_VAR 0 4
42492: ARRAY
42493: PUSH
42494: LD_INT 1
42496: ARRAY
42497: PPUSH
42498: LD_VAR 0 2
42502: PUSH
42503: LD_VAR 0 4
42507: ARRAY
42508: PUSH
42509: LD_INT 2
42511: ARRAY
42512: PPUSH
42513: CALL_OW 297
42517: ST_TO_ADDR
// if tdist < dist then
42518: LD_VAR 0 6
42522: PUSH
42523: LD_VAR 0 5
42527: LESS
42528: IFFALSE 42556
// begin hex := hexes [ i ] ;
42530: LD_ADDR_VAR 0 8
42534: PUSH
42535: LD_VAR 0 2
42539: PUSH
42540: LD_VAR 0 4
42544: ARRAY
42545: ST_TO_ADDR
// dist := tdist ;
42546: LD_ADDR_VAR 0 5
42550: PUSH
42551: LD_VAR 0 6
42555: ST_TO_ADDR
// end ; end ;
42556: GO 42470
42558: POP
42559: POP
// result := hex ;
42560: LD_ADDR_VAR 0 3
42564: PUSH
42565: LD_VAR 0 8
42569: ST_TO_ADDR
// end ;
42570: LD_VAR 0 3
42574: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42575: LD_INT 0
42577: PPUSH
42578: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42579: LD_VAR 0 1
42583: NOT
42584: PUSH
42585: LD_VAR 0 1
42589: PUSH
42590: LD_INT 21
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 23
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PPUSH
42614: CALL_OW 69
42618: IN
42619: NOT
42620: OR
42621: IFFALSE 42625
// exit ;
42623: GO 42672
// for i = 1 to 3 do
42625: LD_ADDR_VAR 0 3
42629: PUSH
42630: DOUBLE
42631: LD_INT 1
42633: DEC
42634: ST_TO_ADDR
42635: LD_INT 3
42637: PUSH
42638: FOR_TO
42639: IFFALSE 42670
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42641: LD_VAR 0 1
42645: PPUSH
42646: CALL_OW 250
42650: PPUSH
42651: LD_VAR 0 1
42655: PPUSH
42656: CALL_OW 251
42660: PPUSH
42661: LD_INT 1
42663: PPUSH
42664: CALL_OW 453
42668: GO 42638
42670: POP
42671: POP
// end ;
42672: LD_VAR 0 2
42676: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42677: LD_INT 0
42679: PPUSH
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
// if not unit or not enemy_unit then
42685: LD_VAR 0 1
42689: NOT
42690: PUSH
42691: LD_VAR 0 2
42695: NOT
42696: OR
42697: IFFALSE 42701
// exit ;
42699: GO 43168
// if GetLives ( i ) < 250 then
42701: LD_VAR 0 4
42705: PPUSH
42706: CALL_OW 256
42710: PUSH
42711: LD_INT 250
42713: LESS
42714: IFFALSE 42727
// begin ComAutodestruct ( i ) ;
42716: LD_VAR 0 4
42720: PPUSH
42721: CALL 42575 0 1
// exit ;
42725: GO 43168
// end ; x := GetX ( enemy_unit ) ;
42727: LD_ADDR_VAR 0 7
42731: PUSH
42732: LD_VAR 0 2
42736: PPUSH
42737: CALL_OW 250
42741: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42742: LD_ADDR_VAR 0 8
42746: PUSH
42747: LD_VAR 0 2
42751: PPUSH
42752: CALL_OW 251
42756: ST_TO_ADDR
// if not x or not y then
42757: LD_VAR 0 7
42761: NOT
42762: PUSH
42763: LD_VAR 0 8
42767: NOT
42768: OR
42769: IFFALSE 42773
// exit ;
42771: GO 43168
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42773: LD_ADDR_VAR 0 6
42777: PUSH
42778: LD_VAR 0 7
42782: PPUSH
42783: LD_INT 0
42785: PPUSH
42786: LD_INT 4
42788: PPUSH
42789: CALL_OW 272
42793: PUSH
42794: LD_VAR 0 8
42798: PPUSH
42799: LD_INT 0
42801: PPUSH
42802: LD_INT 4
42804: PPUSH
42805: CALL_OW 273
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_VAR 0 7
42818: PPUSH
42819: LD_INT 1
42821: PPUSH
42822: LD_INT 4
42824: PPUSH
42825: CALL_OW 272
42829: PUSH
42830: LD_VAR 0 8
42834: PPUSH
42835: LD_INT 1
42837: PPUSH
42838: LD_INT 4
42840: PPUSH
42841: CALL_OW 273
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_VAR 0 7
42854: PPUSH
42855: LD_INT 2
42857: PPUSH
42858: LD_INT 4
42860: PPUSH
42861: CALL_OW 272
42865: PUSH
42866: LD_VAR 0 8
42870: PPUSH
42871: LD_INT 2
42873: PPUSH
42874: LD_INT 4
42876: PPUSH
42877: CALL_OW 273
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_VAR 0 7
42890: PPUSH
42891: LD_INT 3
42893: PPUSH
42894: LD_INT 4
42896: PPUSH
42897: CALL_OW 272
42901: PUSH
42902: LD_VAR 0 8
42906: PPUSH
42907: LD_INT 3
42909: PPUSH
42910: LD_INT 4
42912: PPUSH
42913: CALL_OW 273
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_VAR 0 7
42926: PPUSH
42927: LD_INT 4
42929: PPUSH
42930: LD_INT 4
42932: PPUSH
42933: CALL_OW 272
42937: PUSH
42938: LD_VAR 0 8
42942: PPUSH
42943: LD_INT 4
42945: PPUSH
42946: LD_INT 4
42948: PPUSH
42949: CALL_OW 273
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_VAR 0 7
42962: PPUSH
42963: LD_INT 5
42965: PPUSH
42966: LD_INT 4
42968: PPUSH
42969: CALL_OW 272
42973: PUSH
42974: LD_VAR 0 8
42978: PPUSH
42979: LD_INT 5
42981: PPUSH
42982: LD_INT 4
42984: PPUSH
42985: CALL_OW 273
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: ST_TO_ADDR
// for i = tmp downto 1 do
43002: LD_ADDR_VAR 0 4
43006: PUSH
43007: DOUBLE
43008: LD_VAR 0 6
43012: INC
43013: ST_TO_ADDR
43014: LD_INT 1
43016: PUSH
43017: FOR_DOWNTO
43018: IFFALSE 43119
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43020: LD_VAR 0 6
43024: PUSH
43025: LD_VAR 0 4
43029: ARRAY
43030: PUSH
43031: LD_INT 1
43033: ARRAY
43034: PPUSH
43035: LD_VAR 0 6
43039: PUSH
43040: LD_VAR 0 4
43044: ARRAY
43045: PUSH
43046: LD_INT 2
43048: ARRAY
43049: PPUSH
43050: CALL_OW 488
43054: NOT
43055: PUSH
43056: LD_VAR 0 6
43060: PUSH
43061: LD_VAR 0 4
43065: ARRAY
43066: PUSH
43067: LD_INT 1
43069: ARRAY
43070: PPUSH
43071: LD_VAR 0 6
43075: PUSH
43076: LD_VAR 0 4
43080: ARRAY
43081: PUSH
43082: LD_INT 2
43084: ARRAY
43085: PPUSH
43086: CALL_OW 428
43090: PUSH
43091: LD_INT 0
43093: NONEQUAL
43094: OR
43095: IFFALSE 43117
// tmp := Delete ( tmp , i ) ;
43097: LD_ADDR_VAR 0 6
43101: PUSH
43102: LD_VAR 0 6
43106: PPUSH
43107: LD_VAR 0 4
43111: PPUSH
43112: CALL_OW 3
43116: ST_TO_ADDR
43117: GO 43017
43119: POP
43120: POP
// j := GetClosestHex ( unit , tmp ) ;
43121: LD_ADDR_VAR 0 5
43125: PUSH
43126: LD_VAR 0 1
43130: PPUSH
43131: LD_VAR 0 6
43135: PPUSH
43136: CALL 42423 0 2
43140: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43141: LD_VAR 0 1
43145: PPUSH
43146: LD_VAR 0 5
43150: PUSH
43151: LD_INT 1
43153: ARRAY
43154: PPUSH
43155: LD_VAR 0 5
43159: PUSH
43160: LD_INT 2
43162: ARRAY
43163: PPUSH
43164: CALL_OW 111
// end ;
43168: LD_VAR 0 3
43172: RET
// export function PrepareApemanSoldier ( ) ; begin
43173: LD_INT 0
43175: PPUSH
// uc_nation := 0 ;
43176: LD_ADDR_OWVAR 21
43180: PUSH
43181: LD_INT 0
43183: ST_TO_ADDR
// hc_sex := sex_male ;
43184: LD_ADDR_OWVAR 27
43188: PUSH
43189: LD_INT 1
43191: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43192: LD_ADDR_OWVAR 28
43196: PUSH
43197: LD_INT 15
43199: ST_TO_ADDR
// hc_gallery :=  ;
43200: LD_ADDR_OWVAR 33
43204: PUSH
43205: LD_STRING 
43207: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43208: LD_ADDR_OWVAR 31
43212: PUSH
43213: LD_INT 0
43215: PPUSH
43216: LD_INT 3
43218: PPUSH
43219: CALL_OW 12
43223: PUSH
43224: LD_INT 0
43226: PPUSH
43227: LD_INT 3
43229: PPUSH
43230: CALL_OW 12
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: ST_TO_ADDR
// end ;
43247: LD_VAR 0 1
43251: RET
// export function PrepareApemanEngineer ( ) ; begin
43252: LD_INT 0
43254: PPUSH
// uc_nation := 0 ;
43255: LD_ADDR_OWVAR 21
43259: PUSH
43260: LD_INT 0
43262: ST_TO_ADDR
// hc_sex := sex_male ;
43263: LD_ADDR_OWVAR 27
43267: PUSH
43268: LD_INT 1
43270: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43271: LD_ADDR_OWVAR 28
43275: PUSH
43276: LD_INT 16
43278: ST_TO_ADDR
// hc_gallery :=  ;
43279: LD_ADDR_OWVAR 33
43283: PUSH
43284: LD_STRING 
43286: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43287: LD_ADDR_OWVAR 31
43291: PUSH
43292: LD_INT 0
43294: PPUSH
43295: LD_INT 3
43297: PPUSH
43298: CALL_OW 12
43302: PUSH
43303: LD_INT 0
43305: PPUSH
43306: LD_INT 3
43308: PPUSH
43309: CALL_OW 12
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: ST_TO_ADDR
// end ;
43326: LD_VAR 0 1
43330: RET
// export function PrepareApeman ( agressivity ) ; begin
43331: LD_INT 0
43333: PPUSH
// uc_side := 0 ;
43334: LD_ADDR_OWVAR 20
43338: PUSH
43339: LD_INT 0
43341: ST_TO_ADDR
// uc_nation := 0 ;
43342: LD_ADDR_OWVAR 21
43346: PUSH
43347: LD_INT 0
43349: ST_TO_ADDR
// hc_sex := sex_male ;
43350: LD_ADDR_OWVAR 27
43354: PUSH
43355: LD_INT 1
43357: ST_TO_ADDR
// hc_class := class_apeman ;
43358: LD_ADDR_OWVAR 28
43362: PUSH
43363: LD_INT 12
43365: ST_TO_ADDR
// hc_gallery :=  ;
43366: LD_ADDR_OWVAR 33
43370: PUSH
43371: LD_STRING 
43373: ST_TO_ADDR
// if agressivity = 0 then
43374: LD_VAR 0 1
43378: PUSH
43379: LD_INT 0
43381: EQUAL
43382: IFFALSE 43394
// hc_agressivity := 0 else
43384: LD_ADDR_OWVAR 35
43388: PUSH
43389: LD_INT 0
43391: ST_TO_ADDR
43392: GO 43415
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43394: LD_ADDR_OWVAR 35
43398: PUSH
43399: LD_VAR 0 1
43403: NEG
43404: PPUSH
43405: LD_VAR 0 1
43409: PPUSH
43410: CALL_OW 12
43414: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43415: LD_ADDR_OWVAR 31
43419: PUSH
43420: LD_INT 0
43422: PPUSH
43423: LD_INT 3
43425: PPUSH
43426: CALL_OW 12
43430: PUSH
43431: LD_INT 0
43433: PPUSH
43434: LD_INT 3
43436: PPUSH
43437: CALL_OW 12
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
// end ;
43454: LD_VAR 0 2
43458: RET
// export function PrepareTiger ( agressivity ) ; begin
43459: LD_INT 0
43461: PPUSH
// uc_side := 0 ;
43462: LD_ADDR_OWVAR 20
43466: PUSH
43467: LD_INT 0
43469: ST_TO_ADDR
// uc_nation := 0 ;
43470: LD_ADDR_OWVAR 21
43474: PUSH
43475: LD_INT 0
43477: ST_TO_ADDR
// hc_class := class_tiger ;
43478: LD_ADDR_OWVAR 28
43482: PUSH
43483: LD_INT 14
43485: ST_TO_ADDR
// hc_gallery :=  ;
43486: LD_ADDR_OWVAR 33
43490: PUSH
43491: LD_STRING 
43493: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43494: LD_ADDR_OWVAR 35
43498: PUSH
43499: LD_VAR 0 1
43503: NEG
43504: PPUSH
43505: LD_VAR 0 1
43509: PPUSH
43510: CALL_OW 12
43514: ST_TO_ADDR
// end ;
43515: LD_VAR 0 2
43519: RET
// export function PrepareEnchidna ( ) ; begin
43520: LD_INT 0
43522: PPUSH
// uc_side := 0 ;
43523: LD_ADDR_OWVAR 20
43527: PUSH
43528: LD_INT 0
43530: ST_TO_ADDR
// uc_nation := 0 ;
43531: LD_ADDR_OWVAR 21
43535: PUSH
43536: LD_INT 0
43538: ST_TO_ADDR
// hc_class := class_baggie ;
43539: LD_ADDR_OWVAR 28
43543: PUSH
43544: LD_INT 13
43546: ST_TO_ADDR
// hc_gallery :=  ;
43547: LD_ADDR_OWVAR 33
43551: PUSH
43552: LD_STRING 
43554: ST_TO_ADDR
// end ;
43555: LD_VAR 0 1
43559: RET
// export function PrepareFrog ( ) ; begin
43560: LD_INT 0
43562: PPUSH
// uc_side := 0 ;
43563: LD_ADDR_OWVAR 20
43567: PUSH
43568: LD_INT 0
43570: ST_TO_ADDR
// uc_nation := 0 ;
43571: LD_ADDR_OWVAR 21
43575: PUSH
43576: LD_INT 0
43578: ST_TO_ADDR
// hc_class := class_frog ;
43579: LD_ADDR_OWVAR 28
43583: PUSH
43584: LD_INT 19
43586: ST_TO_ADDR
// hc_gallery :=  ;
43587: LD_ADDR_OWVAR 33
43591: PUSH
43592: LD_STRING 
43594: ST_TO_ADDR
// end ;
43595: LD_VAR 0 1
43599: RET
// export function PrepareFish ( ) ; begin
43600: LD_INT 0
43602: PPUSH
// uc_side := 0 ;
43603: LD_ADDR_OWVAR 20
43607: PUSH
43608: LD_INT 0
43610: ST_TO_ADDR
// uc_nation := 0 ;
43611: LD_ADDR_OWVAR 21
43615: PUSH
43616: LD_INT 0
43618: ST_TO_ADDR
// hc_class := class_fish ;
43619: LD_ADDR_OWVAR 28
43623: PUSH
43624: LD_INT 20
43626: ST_TO_ADDR
// hc_gallery :=  ;
43627: LD_ADDR_OWVAR 33
43631: PUSH
43632: LD_STRING 
43634: ST_TO_ADDR
// end ;
43635: LD_VAR 0 1
43639: RET
// export function PrepareBird ( ) ; begin
43640: LD_INT 0
43642: PPUSH
// uc_side := 0 ;
43643: LD_ADDR_OWVAR 20
43647: PUSH
43648: LD_INT 0
43650: ST_TO_ADDR
// uc_nation := 0 ;
43651: LD_ADDR_OWVAR 21
43655: PUSH
43656: LD_INT 0
43658: ST_TO_ADDR
// hc_class := class_phororhacos ;
43659: LD_ADDR_OWVAR 28
43663: PUSH
43664: LD_INT 18
43666: ST_TO_ADDR
// hc_gallery :=  ;
43667: LD_ADDR_OWVAR 33
43671: PUSH
43672: LD_STRING 
43674: ST_TO_ADDR
// end ;
43675: LD_VAR 0 1
43679: RET
// export function PrepareHorse ( ) ; begin
43680: LD_INT 0
43682: PPUSH
// uc_side := 0 ;
43683: LD_ADDR_OWVAR 20
43687: PUSH
43688: LD_INT 0
43690: ST_TO_ADDR
// uc_nation := 0 ;
43691: LD_ADDR_OWVAR 21
43695: PUSH
43696: LD_INT 0
43698: ST_TO_ADDR
// hc_class := class_horse ;
43699: LD_ADDR_OWVAR 28
43703: PUSH
43704: LD_INT 21
43706: ST_TO_ADDR
// hc_gallery :=  ;
43707: LD_ADDR_OWVAR 33
43711: PUSH
43712: LD_STRING 
43714: ST_TO_ADDR
// end ;
43715: LD_VAR 0 1
43719: RET
// export function PrepareMastodont ( ) ; begin
43720: LD_INT 0
43722: PPUSH
// uc_side := 0 ;
43723: LD_ADDR_OWVAR 20
43727: PUSH
43728: LD_INT 0
43730: ST_TO_ADDR
// uc_nation := 0 ;
43731: LD_ADDR_OWVAR 21
43735: PUSH
43736: LD_INT 0
43738: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43739: LD_ADDR_OWVAR 37
43743: PUSH
43744: LD_INT 31
43746: ST_TO_ADDR
// vc_control := control_rider ;
43747: LD_ADDR_OWVAR 38
43751: PUSH
43752: LD_INT 4
43754: ST_TO_ADDR
// end ;
43755: LD_VAR 0 1
43759: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43760: LD_INT 0
43762: PPUSH
43763: PPUSH
43764: PPUSH
// uc_side = 0 ;
43765: LD_ADDR_OWVAR 20
43769: PUSH
43770: LD_INT 0
43772: ST_TO_ADDR
// uc_nation = 0 ;
43773: LD_ADDR_OWVAR 21
43777: PUSH
43778: LD_INT 0
43780: ST_TO_ADDR
// InitHc_All ( ) ;
43781: CALL_OW 584
// InitVc ;
43785: CALL_OW 20
// if mastodonts then
43789: LD_VAR 0 6
43793: IFFALSE 43860
// for i = 1 to mastodonts do
43795: LD_ADDR_VAR 0 11
43799: PUSH
43800: DOUBLE
43801: LD_INT 1
43803: DEC
43804: ST_TO_ADDR
43805: LD_VAR 0 6
43809: PUSH
43810: FOR_TO
43811: IFFALSE 43858
// begin vc_chassis := 31 ;
43813: LD_ADDR_OWVAR 37
43817: PUSH
43818: LD_INT 31
43820: ST_TO_ADDR
// vc_control := control_rider ;
43821: LD_ADDR_OWVAR 38
43825: PUSH
43826: LD_INT 4
43828: ST_TO_ADDR
// animal := CreateVehicle ;
43829: LD_ADDR_VAR 0 12
43833: PUSH
43834: CALL_OW 45
43838: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43839: LD_VAR 0 12
43843: PPUSH
43844: LD_VAR 0 8
43848: PPUSH
43849: LD_INT 0
43851: PPUSH
43852: CALL 45988 0 3
// end ;
43856: GO 43810
43858: POP
43859: POP
// if horses then
43860: LD_VAR 0 5
43864: IFFALSE 43931
// for i = 1 to horses do
43866: LD_ADDR_VAR 0 11
43870: PUSH
43871: DOUBLE
43872: LD_INT 1
43874: DEC
43875: ST_TO_ADDR
43876: LD_VAR 0 5
43880: PUSH
43881: FOR_TO
43882: IFFALSE 43929
// begin hc_class := 21 ;
43884: LD_ADDR_OWVAR 28
43888: PUSH
43889: LD_INT 21
43891: ST_TO_ADDR
// hc_gallery :=  ;
43892: LD_ADDR_OWVAR 33
43896: PUSH
43897: LD_STRING 
43899: ST_TO_ADDR
// animal := CreateHuman ;
43900: LD_ADDR_VAR 0 12
43904: PUSH
43905: CALL_OW 44
43909: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43910: LD_VAR 0 12
43914: PPUSH
43915: LD_VAR 0 8
43919: PPUSH
43920: LD_INT 0
43922: PPUSH
43923: CALL 45988 0 3
// end ;
43927: GO 43881
43929: POP
43930: POP
// if birds then
43931: LD_VAR 0 1
43935: IFFALSE 44002
// for i = 1 to birds do
43937: LD_ADDR_VAR 0 11
43941: PUSH
43942: DOUBLE
43943: LD_INT 1
43945: DEC
43946: ST_TO_ADDR
43947: LD_VAR 0 1
43951: PUSH
43952: FOR_TO
43953: IFFALSE 44000
// begin hc_class := 18 ;
43955: LD_ADDR_OWVAR 28
43959: PUSH
43960: LD_INT 18
43962: ST_TO_ADDR
// hc_gallery =  ;
43963: LD_ADDR_OWVAR 33
43967: PUSH
43968: LD_STRING 
43970: ST_TO_ADDR
// animal := CreateHuman ;
43971: LD_ADDR_VAR 0 12
43975: PUSH
43976: CALL_OW 44
43980: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43981: LD_VAR 0 12
43985: PPUSH
43986: LD_VAR 0 8
43990: PPUSH
43991: LD_INT 0
43993: PPUSH
43994: CALL 45988 0 3
// end ;
43998: GO 43952
44000: POP
44001: POP
// if tigers then
44002: LD_VAR 0 2
44006: IFFALSE 44090
// for i = 1 to tigers do
44008: LD_ADDR_VAR 0 11
44012: PUSH
44013: DOUBLE
44014: LD_INT 1
44016: DEC
44017: ST_TO_ADDR
44018: LD_VAR 0 2
44022: PUSH
44023: FOR_TO
44024: IFFALSE 44088
// begin hc_class = class_tiger ;
44026: LD_ADDR_OWVAR 28
44030: PUSH
44031: LD_INT 14
44033: ST_TO_ADDR
// hc_gallery =  ;
44034: LD_ADDR_OWVAR 33
44038: PUSH
44039: LD_STRING 
44041: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44042: LD_ADDR_OWVAR 35
44046: PUSH
44047: LD_INT 7
44049: NEG
44050: PPUSH
44051: LD_INT 7
44053: PPUSH
44054: CALL_OW 12
44058: ST_TO_ADDR
// animal := CreateHuman ;
44059: LD_ADDR_VAR 0 12
44063: PUSH
44064: CALL_OW 44
44068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44069: LD_VAR 0 12
44073: PPUSH
44074: LD_VAR 0 8
44078: PPUSH
44079: LD_INT 0
44081: PPUSH
44082: CALL 45988 0 3
// end ;
44086: GO 44023
44088: POP
44089: POP
// if apemans then
44090: LD_VAR 0 3
44094: IFFALSE 44217
// for i = 1 to apemans do
44096: LD_ADDR_VAR 0 11
44100: PUSH
44101: DOUBLE
44102: LD_INT 1
44104: DEC
44105: ST_TO_ADDR
44106: LD_VAR 0 3
44110: PUSH
44111: FOR_TO
44112: IFFALSE 44215
// begin hc_class = class_apeman ;
44114: LD_ADDR_OWVAR 28
44118: PUSH
44119: LD_INT 12
44121: ST_TO_ADDR
// hc_gallery =  ;
44122: LD_ADDR_OWVAR 33
44126: PUSH
44127: LD_STRING 
44129: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44130: LD_ADDR_OWVAR 35
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PPUSH
44139: LD_INT 2
44141: PPUSH
44142: CALL_OW 12
44146: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44147: LD_ADDR_OWVAR 31
44151: PUSH
44152: LD_INT 1
44154: PPUSH
44155: LD_INT 3
44157: PPUSH
44158: CALL_OW 12
44162: PUSH
44163: LD_INT 1
44165: PPUSH
44166: LD_INT 3
44168: PPUSH
44169: CALL_OW 12
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: ST_TO_ADDR
// animal := CreateHuman ;
44186: LD_ADDR_VAR 0 12
44190: PUSH
44191: CALL_OW 44
44195: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44196: LD_VAR 0 12
44200: PPUSH
44201: LD_VAR 0 8
44205: PPUSH
44206: LD_INT 0
44208: PPUSH
44209: CALL 45988 0 3
// end ;
44213: GO 44111
44215: POP
44216: POP
// if enchidnas then
44217: LD_VAR 0 4
44221: IFFALSE 44288
// for i = 1 to enchidnas do
44223: LD_ADDR_VAR 0 11
44227: PUSH
44228: DOUBLE
44229: LD_INT 1
44231: DEC
44232: ST_TO_ADDR
44233: LD_VAR 0 4
44237: PUSH
44238: FOR_TO
44239: IFFALSE 44286
// begin hc_class = 13 ;
44241: LD_ADDR_OWVAR 28
44245: PUSH
44246: LD_INT 13
44248: ST_TO_ADDR
// hc_gallery =  ;
44249: LD_ADDR_OWVAR 33
44253: PUSH
44254: LD_STRING 
44256: ST_TO_ADDR
// animal := CreateHuman ;
44257: LD_ADDR_VAR 0 12
44261: PUSH
44262: CALL_OW 44
44266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44267: LD_VAR 0 12
44271: PPUSH
44272: LD_VAR 0 8
44276: PPUSH
44277: LD_INT 0
44279: PPUSH
44280: CALL 45988 0 3
// end ;
44284: GO 44238
44286: POP
44287: POP
// if fishes then
44288: LD_VAR 0 7
44292: IFFALSE 44359
// for i = 1 to fishes do
44294: LD_ADDR_VAR 0 11
44298: PUSH
44299: DOUBLE
44300: LD_INT 1
44302: DEC
44303: ST_TO_ADDR
44304: LD_VAR 0 7
44308: PUSH
44309: FOR_TO
44310: IFFALSE 44357
// begin hc_class = 20 ;
44312: LD_ADDR_OWVAR 28
44316: PUSH
44317: LD_INT 20
44319: ST_TO_ADDR
// hc_gallery =  ;
44320: LD_ADDR_OWVAR 33
44324: PUSH
44325: LD_STRING 
44327: ST_TO_ADDR
// animal := CreateHuman ;
44328: LD_ADDR_VAR 0 12
44332: PUSH
44333: CALL_OW 44
44337: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44338: LD_VAR 0 12
44342: PPUSH
44343: LD_VAR 0 9
44347: PPUSH
44348: LD_INT 0
44350: PPUSH
44351: CALL 45988 0 3
// end ;
44355: GO 44309
44357: POP
44358: POP
// end ;
44359: LD_VAR 0 10
44363: RET
// export function WantHeal ( sci , unit ) ; begin
44364: LD_INT 0
44366: PPUSH
// if GetTaskList ( sci ) > 0 then
44367: LD_VAR 0 1
44371: PPUSH
44372: CALL_OW 437
44376: PUSH
44377: LD_INT 0
44379: GREATER
44380: IFFALSE 44450
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44382: LD_VAR 0 1
44386: PPUSH
44387: CALL_OW 437
44391: PUSH
44392: LD_INT 1
44394: ARRAY
44395: PUSH
44396: LD_INT 1
44398: ARRAY
44399: PUSH
44400: LD_STRING l
44402: EQUAL
44403: PUSH
44404: LD_VAR 0 1
44408: PPUSH
44409: CALL_OW 437
44413: PUSH
44414: LD_INT 1
44416: ARRAY
44417: PUSH
44418: LD_INT 4
44420: ARRAY
44421: PUSH
44422: LD_VAR 0 2
44426: EQUAL
44427: AND
44428: IFFALSE 44440
// result := true else
44430: LD_ADDR_VAR 0 3
44434: PUSH
44435: LD_INT 1
44437: ST_TO_ADDR
44438: GO 44448
// result := false ;
44440: LD_ADDR_VAR 0 3
44444: PUSH
44445: LD_INT 0
44447: ST_TO_ADDR
// end else
44448: GO 44458
// result := false ;
44450: LD_ADDR_VAR 0 3
44454: PUSH
44455: LD_INT 0
44457: ST_TO_ADDR
// end ;
44458: LD_VAR 0 3
44462: RET
// export function HealTarget ( sci ) ; begin
44463: LD_INT 0
44465: PPUSH
// if not sci then
44466: LD_VAR 0 1
44470: NOT
44471: IFFALSE 44475
// exit ;
44473: GO 44540
// result := 0 ;
44475: LD_ADDR_VAR 0 2
44479: PUSH
44480: LD_INT 0
44482: ST_TO_ADDR
// if GetTaskList ( sci ) then
44483: LD_VAR 0 1
44487: PPUSH
44488: CALL_OW 437
44492: IFFALSE 44540
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44494: LD_VAR 0 1
44498: PPUSH
44499: CALL_OW 437
44503: PUSH
44504: LD_INT 1
44506: ARRAY
44507: PUSH
44508: LD_INT 1
44510: ARRAY
44511: PUSH
44512: LD_STRING l
44514: EQUAL
44515: IFFALSE 44540
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44517: LD_ADDR_VAR 0 2
44521: PUSH
44522: LD_VAR 0 1
44526: PPUSH
44527: CALL_OW 437
44531: PUSH
44532: LD_INT 1
44534: ARRAY
44535: PUSH
44536: LD_INT 4
44538: ARRAY
44539: ST_TO_ADDR
// end ;
44540: LD_VAR 0 2
44544: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44545: LD_INT 0
44547: PPUSH
44548: PPUSH
44549: PPUSH
44550: PPUSH
// if not base_units then
44551: LD_VAR 0 1
44555: NOT
44556: IFFALSE 44560
// exit ;
44558: GO 44647
// result := false ;
44560: LD_ADDR_VAR 0 2
44564: PUSH
44565: LD_INT 0
44567: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44568: LD_ADDR_VAR 0 5
44572: PUSH
44573: LD_VAR 0 1
44577: PPUSH
44578: LD_INT 21
44580: PUSH
44581: LD_INT 3
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PPUSH
44588: CALL_OW 72
44592: ST_TO_ADDR
// if not tmp then
44593: LD_VAR 0 5
44597: NOT
44598: IFFALSE 44602
// exit ;
44600: GO 44647
// for i in tmp do
44602: LD_ADDR_VAR 0 3
44606: PUSH
44607: LD_VAR 0 5
44611: PUSH
44612: FOR_IN
44613: IFFALSE 44645
// begin result := EnemyInRange ( i , 22 ) ;
44615: LD_ADDR_VAR 0 2
44619: PUSH
44620: LD_VAR 0 3
44624: PPUSH
44625: LD_INT 22
44627: PPUSH
44628: CALL 42225 0 2
44632: ST_TO_ADDR
// if result then
44633: LD_VAR 0 2
44637: IFFALSE 44643
// exit ;
44639: POP
44640: POP
44641: GO 44647
// end ;
44643: GO 44612
44645: POP
44646: POP
// end ;
44647: LD_VAR 0 2
44651: RET
// export function FilterByTag ( units , tag ) ; begin
44652: LD_INT 0
44654: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44655: LD_ADDR_VAR 0 3
44659: PUSH
44660: LD_VAR 0 1
44664: PPUSH
44665: LD_INT 120
44667: PUSH
44668: LD_VAR 0 2
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PPUSH
44677: CALL_OW 72
44681: ST_TO_ADDR
// end ;
44682: LD_VAR 0 3
44686: RET
// export function IsDriver ( un ) ; begin
44687: LD_INT 0
44689: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44690: LD_ADDR_VAR 0 2
44694: PUSH
44695: LD_VAR 0 1
44699: PUSH
44700: LD_INT 55
44702: PUSH
44703: EMPTY
44704: LIST
44705: PPUSH
44706: CALL_OW 69
44710: IN
44711: ST_TO_ADDR
// end ;
44712: LD_VAR 0 2
44716: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44717: LD_INT 0
44719: PPUSH
44720: PPUSH
// list := [ ] ;
44721: LD_ADDR_VAR 0 5
44725: PUSH
44726: EMPTY
44727: ST_TO_ADDR
// case d of 0 :
44728: LD_VAR 0 3
44732: PUSH
44733: LD_INT 0
44735: DOUBLE
44736: EQUAL
44737: IFTRUE 44741
44739: GO 44874
44741: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44742: LD_ADDR_VAR 0 5
44746: PUSH
44747: LD_VAR 0 1
44751: PUSH
44752: LD_INT 4
44754: MINUS
44755: PUSH
44756: LD_VAR 0 2
44760: PUSH
44761: LD_INT 4
44763: MINUS
44764: PUSH
44765: LD_INT 2
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: LIST
44772: PUSH
44773: LD_VAR 0 1
44777: PUSH
44778: LD_INT 3
44780: MINUS
44781: PUSH
44782: LD_VAR 0 2
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: LIST
44794: PUSH
44795: LD_VAR 0 1
44799: PUSH
44800: LD_INT 4
44802: PLUS
44803: PUSH
44804: LD_VAR 0 2
44808: PUSH
44809: LD_INT 4
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: PUSH
44817: LD_VAR 0 1
44821: PUSH
44822: LD_INT 3
44824: PLUS
44825: PUSH
44826: LD_VAR 0 2
44830: PUSH
44831: LD_INT 3
44833: PLUS
44834: PUSH
44835: LD_INT 5
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: LIST
44842: PUSH
44843: LD_VAR 0 1
44847: PUSH
44848: LD_VAR 0 2
44852: PUSH
44853: LD_INT 4
44855: PLUS
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: ST_TO_ADDR
// end ; 1 :
44872: GO 45572
44874: LD_INT 1
44876: DOUBLE
44877: EQUAL
44878: IFTRUE 44882
44880: GO 45015
44882: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44883: LD_ADDR_VAR 0 5
44887: PUSH
44888: LD_VAR 0 1
44892: PUSH
44893: LD_VAR 0 2
44897: PUSH
44898: LD_INT 4
44900: MINUS
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: PUSH
44910: LD_VAR 0 1
44914: PUSH
44915: LD_INT 3
44917: MINUS
44918: PUSH
44919: LD_VAR 0 2
44923: PUSH
44924: LD_INT 3
44926: MINUS
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: LIST
44935: PUSH
44936: LD_VAR 0 1
44940: PUSH
44941: LD_INT 4
44943: MINUS
44944: PUSH
44945: LD_VAR 0 2
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: PUSH
44958: LD_VAR 0 1
44962: PUSH
44963: LD_VAR 0 2
44967: PUSH
44968: LD_INT 3
44970: PLUS
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: PUSH
44980: LD_VAR 0 1
44984: PUSH
44985: LD_INT 4
44987: PLUS
44988: PUSH
44989: LD_VAR 0 2
44993: PUSH
44994: LD_INT 4
44996: PLUS
44997: PUSH
44998: LD_INT 5
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: ST_TO_ADDR
// end ; 2 :
45013: GO 45572
45015: LD_INT 2
45017: DOUBLE
45018: EQUAL
45019: IFTRUE 45023
45021: GO 45152
45023: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45024: LD_ADDR_VAR 0 5
45028: PUSH
45029: LD_VAR 0 1
45033: PUSH
45034: LD_VAR 0 2
45038: PUSH
45039: LD_INT 3
45041: MINUS
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: LIST
45050: PUSH
45051: LD_VAR 0 1
45055: PUSH
45056: LD_INT 4
45058: PLUS
45059: PUSH
45060: LD_VAR 0 2
45064: PUSH
45065: LD_INT 4
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: LIST
45072: PUSH
45073: LD_VAR 0 1
45077: PUSH
45078: LD_VAR 0 2
45082: PUSH
45083: LD_INT 4
45085: PLUS
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: LIST
45094: PUSH
45095: LD_VAR 0 1
45099: PUSH
45100: LD_INT 3
45102: MINUS
45103: PUSH
45104: LD_VAR 0 2
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: LIST
45116: PUSH
45117: LD_VAR 0 1
45121: PUSH
45122: LD_INT 4
45124: MINUS
45125: PUSH
45126: LD_VAR 0 2
45130: PUSH
45131: LD_INT 4
45133: MINUS
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// end ; 3 :
45150: GO 45572
45152: LD_INT 3
45154: DOUBLE
45155: EQUAL
45156: IFTRUE 45160
45158: GO 45293
45160: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45161: LD_ADDR_VAR 0 5
45165: PUSH
45166: LD_VAR 0 1
45170: PUSH
45171: LD_INT 3
45173: PLUS
45174: PUSH
45175: LD_VAR 0 2
45179: PUSH
45180: LD_INT 4
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: PUSH
45188: LD_VAR 0 1
45192: PUSH
45193: LD_INT 4
45195: PLUS
45196: PUSH
45197: LD_VAR 0 2
45201: PUSH
45202: LD_INT 4
45204: PLUS
45205: PUSH
45206: LD_INT 5
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: LIST
45213: PUSH
45214: LD_VAR 0 1
45218: PUSH
45219: LD_INT 4
45221: MINUS
45222: PUSH
45223: LD_VAR 0 2
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: PUSH
45236: LD_VAR 0 1
45240: PUSH
45241: LD_VAR 0 2
45245: PUSH
45246: LD_INT 4
45248: MINUS
45249: PUSH
45250: LD_INT 3
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: PUSH
45258: LD_VAR 0 1
45262: PUSH
45263: LD_INT 3
45265: MINUS
45266: PUSH
45267: LD_VAR 0 2
45271: PUSH
45272: LD_INT 3
45274: MINUS
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: LIST
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: ST_TO_ADDR
// end ; 4 :
45291: GO 45572
45293: LD_INT 4
45295: DOUBLE
45296: EQUAL
45297: IFTRUE 45301
45299: GO 45434
45301: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45302: LD_ADDR_VAR 0 5
45306: PUSH
45307: LD_VAR 0 1
45311: PUSH
45312: LD_VAR 0 2
45316: PUSH
45317: LD_INT 4
45319: PLUS
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: LIST
45328: PUSH
45329: LD_VAR 0 1
45333: PUSH
45334: LD_INT 3
45336: PLUS
45337: PUSH
45338: LD_VAR 0 2
45342: PUSH
45343: LD_INT 3
45345: PLUS
45346: PUSH
45347: LD_INT 5
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: PUSH
45355: LD_VAR 0 1
45359: PUSH
45360: LD_INT 4
45362: PLUS
45363: PUSH
45364: LD_VAR 0 2
45368: PUSH
45369: LD_INT 4
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: PUSH
45377: LD_VAR 0 1
45381: PUSH
45382: LD_VAR 0 2
45386: PUSH
45387: LD_INT 3
45389: MINUS
45390: PUSH
45391: LD_INT 3
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: PUSH
45399: LD_VAR 0 1
45403: PUSH
45404: LD_INT 4
45406: MINUS
45407: PUSH
45408: LD_VAR 0 2
45412: PUSH
45413: LD_INT 4
45415: MINUS
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: ST_TO_ADDR
// end ; 5 :
45432: GO 45572
45434: LD_INT 5
45436: DOUBLE
45437: EQUAL
45438: IFTRUE 45442
45440: GO 45571
45442: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45443: LD_ADDR_VAR 0 5
45447: PUSH
45448: LD_VAR 0 1
45452: PUSH
45453: LD_INT 4
45455: MINUS
45456: PUSH
45457: LD_VAR 0 2
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: PUSH
45470: LD_VAR 0 1
45474: PUSH
45475: LD_VAR 0 2
45479: PUSH
45480: LD_INT 4
45482: MINUS
45483: PUSH
45484: LD_INT 3
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: LIST
45491: PUSH
45492: LD_VAR 0 1
45496: PUSH
45497: LD_INT 4
45499: PLUS
45500: PUSH
45501: LD_VAR 0 2
45505: PUSH
45506: LD_INT 4
45508: PLUS
45509: PUSH
45510: LD_INT 5
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: PUSH
45518: LD_VAR 0 1
45522: PUSH
45523: LD_INT 3
45525: PLUS
45526: PUSH
45527: LD_VAR 0 2
45531: PUSH
45532: LD_INT 4
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: LIST
45539: PUSH
45540: LD_VAR 0 1
45544: PUSH
45545: LD_VAR 0 2
45549: PUSH
45550: LD_INT 3
45552: PLUS
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: ST_TO_ADDR
// end ; end ;
45569: GO 45572
45571: POP
// result := list ;
45572: LD_ADDR_VAR 0 4
45576: PUSH
45577: LD_VAR 0 5
45581: ST_TO_ADDR
// end ;
45582: LD_VAR 0 4
45586: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45587: LD_INT 0
45589: PPUSH
45590: PPUSH
45591: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45592: LD_VAR 0 1
45596: NOT
45597: PUSH
45598: LD_VAR 0 2
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 3
45611: PUSH
45612: LD_INT 4
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: IN
45621: NOT
45622: OR
45623: IFFALSE 45627
// exit ;
45625: GO 45710
// tmp := [ ] ;
45627: LD_ADDR_VAR 0 5
45631: PUSH
45632: EMPTY
45633: ST_TO_ADDR
// for i in units do
45634: LD_ADDR_VAR 0 4
45638: PUSH
45639: LD_VAR 0 1
45643: PUSH
45644: FOR_IN
45645: IFFALSE 45679
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45647: LD_ADDR_VAR 0 5
45651: PUSH
45652: LD_VAR 0 5
45656: PPUSH
45657: LD_VAR 0 4
45661: PPUSH
45662: LD_VAR 0 2
45666: PPUSH
45667: CALL_OW 259
45671: PPUSH
45672: CALL 47083 0 2
45676: ST_TO_ADDR
45677: GO 45644
45679: POP
45680: POP
// if not tmp then
45681: LD_VAR 0 5
45685: NOT
45686: IFFALSE 45690
// exit ;
45688: GO 45710
// result := SortListByListDesc ( units , tmp ) ;
45690: LD_ADDR_VAR 0 3
45694: PUSH
45695: LD_VAR 0 1
45699: PPUSH
45700: LD_VAR 0 5
45704: PPUSH
45705: CALL_OW 77
45709: ST_TO_ADDR
// end ;
45710: LD_VAR 0 3
45714: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45715: LD_INT 0
45717: PPUSH
45718: PPUSH
45719: PPUSH
// result := false ;
45720: LD_ADDR_VAR 0 3
45724: PUSH
45725: LD_INT 0
45727: ST_TO_ADDR
// if not building then
45728: LD_VAR 0 2
45732: NOT
45733: IFFALSE 45737
// exit ;
45735: GO 45875
// x := GetX ( building ) ;
45737: LD_ADDR_VAR 0 4
45741: PUSH
45742: LD_VAR 0 2
45746: PPUSH
45747: CALL_OW 250
45751: ST_TO_ADDR
// y := GetY ( building ) ;
45752: LD_ADDR_VAR 0 5
45756: PUSH
45757: LD_VAR 0 2
45761: PPUSH
45762: CALL_OW 251
45766: ST_TO_ADDR
// if not x or not y then
45767: LD_VAR 0 4
45771: NOT
45772: PUSH
45773: LD_VAR 0 5
45777: NOT
45778: OR
45779: IFFALSE 45783
// exit ;
45781: GO 45875
// if GetTaskList ( unit ) then
45783: LD_VAR 0 1
45787: PPUSH
45788: CALL_OW 437
45792: IFFALSE 45875
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45794: LD_STRING e
45796: PUSH
45797: LD_VAR 0 1
45801: PPUSH
45802: CALL_OW 437
45806: PUSH
45807: LD_INT 1
45809: ARRAY
45810: PUSH
45811: LD_INT 1
45813: ARRAY
45814: EQUAL
45815: PUSH
45816: LD_VAR 0 4
45820: PUSH
45821: LD_VAR 0 1
45825: PPUSH
45826: CALL_OW 437
45830: PUSH
45831: LD_INT 1
45833: ARRAY
45834: PUSH
45835: LD_INT 2
45837: ARRAY
45838: EQUAL
45839: AND
45840: PUSH
45841: LD_VAR 0 5
45845: PUSH
45846: LD_VAR 0 1
45850: PPUSH
45851: CALL_OW 437
45855: PUSH
45856: LD_INT 1
45858: ARRAY
45859: PUSH
45860: LD_INT 3
45862: ARRAY
45863: EQUAL
45864: AND
45865: IFFALSE 45875
// result := true end ;
45867: LD_ADDR_VAR 0 3
45871: PUSH
45872: LD_INT 1
45874: ST_TO_ADDR
// end ;
45875: LD_VAR 0 3
45879: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45880: LD_INT 0
45882: PPUSH
// result := false ;
45883: LD_ADDR_VAR 0 4
45887: PUSH
45888: LD_INT 0
45890: ST_TO_ADDR
// if GetTaskList ( unit ) then
45891: LD_VAR 0 1
45895: PPUSH
45896: CALL_OW 437
45900: IFFALSE 45983
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45902: LD_STRING M
45904: PUSH
45905: LD_VAR 0 1
45909: PPUSH
45910: CALL_OW 437
45914: PUSH
45915: LD_INT 1
45917: ARRAY
45918: PUSH
45919: LD_INT 1
45921: ARRAY
45922: EQUAL
45923: PUSH
45924: LD_VAR 0 2
45928: PUSH
45929: LD_VAR 0 1
45933: PPUSH
45934: CALL_OW 437
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: PUSH
45943: LD_INT 2
45945: ARRAY
45946: EQUAL
45947: AND
45948: PUSH
45949: LD_VAR 0 3
45953: PUSH
45954: LD_VAR 0 1
45958: PPUSH
45959: CALL_OW 437
45963: PUSH
45964: LD_INT 1
45966: ARRAY
45967: PUSH
45968: LD_INT 3
45970: ARRAY
45971: EQUAL
45972: AND
45973: IFFALSE 45983
// result := true ;
45975: LD_ADDR_VAR 0 4
45979: PUSH
45980: LD_INT 1
45982: ST_TO_ADDR
// end ; end ;
45983: LD_VAR 0 4
45987: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45988: LD_INT 0
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
// if not unit or not area then
45994: LD_VAR 0 1
45998: NOT
45999: PUSH
46000: LD_VAR 0 2
46004: NOT
46005: OR
46006: IFFALSE 46010
// exit ;
46008: GO 46186
// tmp := AreaToList ( area , i ) ;
46010: LD_ADDR_VAR 0 6
46014: PUSH
46015: LD_VAR 0 2
46019: PPUSH
46020: LD_VAR 0 5
46024: PPUSH
46025: CALL_OW 517
46029: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46030: LD_ADDR_VAR 0 5
46034: PUSH
46035: DOUBLE
46036: LD_INT 1
46038: DEC
46039: ST_TO_ADDR
46040: LD_VAR 0 6
46044: PUSH
46045: LD_INT 1
46047: ARRAY
46048: PUSH
46049: FOR_TO
46050: IFFALSE 46184
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46052: LD_ADDR_VAR 0 7
46056: PUSH
46057: LD_VAR 0 6
46061: PUSH
46062: LD_INT 1
46064: ARRAY
46065: PUSH
46066: LD_VAR 0 5
46070: ARRAY
46071: PUSH
46072: LD_VAR 0 6
46076: PUSH
46077: LD_INT 2
46079: ARRAY
46080: PUSH
46081: LD_VAR 0 5
46085: ARRAY
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46091: LD_INT 92
46093: PUSH
46094: LD_VAR 0 7
46098: PUSH
46099: LD_INT 1
46101: ARRAY
46102: PUSH
46103: LD_VAR 0 7
46107: PUSH
46108: LD_INT 2
46110: ARRAY
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: PPUSH
46121: CALL_OW 69
46125: PUSH
46126: LD_INT 0
46128: EQUAL
46129: IFFALSE 46182
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46131: LD_VAR 0 1
46135: PPUSH
46136: LD_VAR 0 7
46140: PUSH
46141: LD_INT 1
46143: ARRAY
46144: PPUSH
46145: LD_VAR 0 7
46149: PUSH
46150: LD_INT 2
46152: ARRAY
46153: PPUSH
46154: LD_VAR 0 3
46158: PPUSH
46159: CALL_OW 48
// result := IsPlaced ( unit ) ;
46163: LD_ADDR_VAR 0 4
46167: PUSH
46168: LD_VAR 0 1
46172: PPUSH
46173: CALL_OW 305
46177: ST_TO_ADDR
// exit ;
46178: POP
46179: POP
46180: GO 46186
// end ; end ;
46182: GO 46049
46184: POP
46185: POP
// end ;
46186: LD_VAR 0 4
46190: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46191: LD_INT 0
46193: PPUSH
46194: PPUSH
46195: PPUSH
// if not side or side > 8 then
46196: LD_VAR 0 1
46200: NOT
46201: PUSH
46202: LD_VAR 0 1
46206: PUSH
46207: LD_INT 8
46209: GREATER
46210: OR
46211: IFFALSE 46215
// exit ;
46213: GO 46402
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46215: LD_ADDR_VAR 0 4
46219: PUSH
46220: LD_INT 22
46222: PUSH
46223: LD_VAR 0 1
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 21
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PPUSH
46246: CALL_OW 69
46250: ST_TO_ADDR
// if not tmp then
46251: LD_VAR 0 4
46255: NOT
46256: IFFALSE 46260
// exit ;
46258: GO 46402
// enable_addtolog := true ;
46260: LD_ADDR_OWVAR 81
46264: PUSH
46265: LD_INT 1
46267: ST_TO_ADDR
// AddToLog ( [ ) ;
46268: LD_STRING [
46270: PPUSH
46271: CALL_OW 561
// for i in tmp do
46275: LD_ADDR_VAR 0 3
46279: PUSH
46280: LD_VAR 0 4
46284: PUSH
46285: FOR_IN
46286: IFFALSE 46393
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46288: LD_STRING [
46290: PUSH
46291: LD_VAR 0 3
46295: PPUSH
46296: CALL_OW 266
46300: STR
46301: PUSH
46302: LD_STRING , 
46304: STR
46305: PUSH
46306: LD_VAR 0 3
46310: PPUSH
46311: CALL_OW 250
46315: STR
46316: PUSH
46317: LD_STRING , 
46319: STR
46320: PUSH
46321: LD_VAR 0 3
46325: PPUSH
46326: CALL_OW 251
46330: STR
46331: PUSH
46332: LD_STRING , 
46334: STR
46335: PUSH
46336: LD_VAR 0 3
46340: PPUSH
46341: CALL_OW 254
46345: STR
46346: PUSH
46347: LD_STRING , 
46349: STR
46350: PUSH
46351: LD_VAR 0 3
46355: PPUSH
46356: LD_INT 1
46358: PPUSH
46359: CALL_OW 268
46363: STR
46364: PUSH
46365: LD_STRING , 
46367: STR
46368: PUSH
46369: LD_VAR 0 3
46373: PPUSH
46374: LD_INT 2
46376: PPUSH
46377: CALL_OW 268
46381: STR
46382: PUSH
46383: LD_STRING ],
46385: STR
46386: PPUSH
46387: CALL_OW 561
// end ;
46391: GO 46285
46393: POP
46394: POP
// AddToLog ( ]; ) ;
46395: LD_STRING ];
46397: PPUSH
46398: CALL_OW 561
// end ;
46402: LD_VAR 0 2
46406: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46407: LD_INT 0
46409: PPUSH
46410: PPUSH
46411: PPUSH
46412: PPUSH
46413: PPUSH
// if not area or not rate or not max then
46414: LD_VAR 0 1
46418: NOT
46419: PUSH
46420: LD_VAR 0 2
46424: NOT
46425: OR
46426: PUSH
46427: LD_VAR 0 4
46431: NOT
46432: OR
46433: IFFALSE 46437
// exit ;
46435: GO 46626
// while 1 do
46437: LD_INT 1
46439: IFFALSE 46626
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46441: LD_ADDR_VAR 0 9
46445: PUSH
46446: LD_VAR 0 1
46450: PPUSH
46451: LD_INT 1
46453: PPUSH
46454: CALL_OW 287
46458: PUSH
46459: LD_INT 10
46461: MUL
46462: ST_TO_ADDR
// r := rate / 10 ;
46463: LD_ADDR_VAR 0 7
46467: PUSH
46468: LD_VAR 0 2
46472: PUSH
46473: LD_INT 10
46475: DIVREAL
46476: ST_TO_ADDR
// time := 1 1$00 ;
46477: LD_ADDR_VAR 0 8
46481: PUSH
46482: LD_INT 2100
46484: ST_TO_ADDR
// if amount < min then
46485: LD_VAR 0 9
46489: PUSH
46490: LD_VAR 0 3
46494: LESS
46495: IFFALSE 46513
// r := r * 2 else
46497: LD_ADDR_VAR 0 7
46501: PUSH
46502: LD_VAR 0 7
46506: PUSH
46507: LD_INT 2
46509: MUL
46510: ST_TO_ADDR
46511: GO 46539
// if amount > max then
46513: LD_VAR 0 9
46517: PUSH
46518: LD_VAR 0 4
46522: GREATER
46523: IFFALSE 46539
// r := r / 2 ;
46525: LD_ADDR_VAR 0 7
46529: PUSH
46530: LD_VAR 0 7
46534: PUSH
46535: LD_INT 2
46537: DIVREAL
46538: ST_TO_ADDR
// time := time / r ;
46539: LD_ADDR_VAR 0 8
46543: PUSH
46544: LD_VAR 0 8
46548: PUSH
46549: LD_VAR 0 7
46553: DIVREAL
46554: ST_TO_ADDR
// if time < 0 then
46555: LD_VAR 0 8
46559: PUSH
46560: LD_INT 0
46562: LESS
46563: IFFALSE 46580
// time := time * - 1 ;
46565: LD_ADDR_VAR 0 8
46569: PUSH
46570: LD_VAR 0 8
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: MUL
46579: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46580: LD_VAR 0 8
46584: PUSH
46585: LD_INT 35
46587: PPUSH
46588: LD_INT 875
46590: PPUSH
46591: CALL_OW 12
46595: PLUS
46596: PPUSH
46597: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46601: LD_INT 1
46603: PPUSH
46604: LD_INT 5
46606: PPUSH
46607: CALL_OW 12
46611: PPUSH
46612: LD_VAR 0 1
46616: PPUSH
46617: LD_INT 1
46619: PPUSH
46620: CALL_OW 55
// end ;
46624: GO 46437
// end ;
46626: LD_VAR 0 5
46630: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46631: LD_INT 0
46633: PPUSH
46634: PPUSH
46635: PPUSH
46636: PPUSH
46637: PPUSH
46638: PPUSH
46639: PPUSH
46640: PPUSH
// if not turrets or not factories then
46641: LD_VAR 0 1
46645: NOT
46646: PUSH
46647: LD_VAR 0 2
46651: NOT
46652: OR
46653: IFFALSE 46657
// exit ;
46655: GO 46964
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46657: LD_ADDR_VAR 0 10
46661: PUSH
46662: LD_INT 5
46664: PUSH
46665: LD_INT 6
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: PUSH
46675: LD_INT 4
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: PUSH
46685: LD_INT 5
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 24
46699: PUSH
46700: LD_INT 25
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 23
46709: PUSH
46710: LD_INT 27
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 42
46723: PUSH
46724: LD_INT 43
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 44
46733: PUSH
46734: LD_INT 46
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 45
46743: PUSH
46744: LD_INT 47
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: LIST
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: ST_TO_ADDR
// result := [ ] ;
46761: LD_ADDR_VAR 0 3
46765: PUSH
46766: EMPTY
46767: ST_TO_ADDR
// for i in turrets do
46768: LD_ADDR_VAR 0 4
46772: PUSH
46773: LD_VAR 0 1
46777: PUSH
46778: FOR_IN
46779: IFFALSE 46962
// begin nat := GetNation ( i ) ;
46781: LD_ADDR_VAR 0 7
46785: PUSH
46786: LD_VAR 0 4
46790: PPUSH
46791: CALL_OW 248
46795: ST_TO_ADDR
// weapon := 0 ;
46796: LD_ADDR_VAR 0 8
46800: PUSH
46801: LD_INT 0
46803: ST_TO_ADDR
// if not nat then
46804: LD_VAR 0 7
46808: NOT
46809: IFFALSE 46813
// continue ;
46811: GO 46778
// for j in list [ nat ] do
46813: LD_ADDR_VAR 0 5
46817: PUSH
46818: LD_VAR 0 10
46822: PUSH
46823: LD_VAR 0 7
46827: ARRAY
46828: PUSH
46829: FOR_IN
46830: IFFALSE 46871
// if GetBWeapon ( i ) = j [ 1 ] then
46832: LD_VAR 0 4
46836: PPUSH
46837: CALL_OW 269
46841: PUSH
46842: LD_VAR 0 5
46846: PUSH
46847: LD_INT 1
46849: ARRAY
46850: EQUAL
46851: IFFALSE 46869
// begin weapon := j [ 2 ] ;
46853: LD_ADDR_VAR 0 8
46857: PUSH
46858: LD_VAR 0 5
46862: PUSH
46863: LD_INT 2
46865: ARRAY
46866: ST_TO_ADDR
// break ;
46867: GO 46871
// end ;
46869: GO 46829
46871: POP
46872: POP
// if not weapon then
46873: LD_VAR 0 8
46877: NOT
46878: IFFALSE 46882
// continue ;
46880: GO 46778
// for k in factories do
46882: LD_ADDR_VAR 0 6
46886: PUSH
46887: LD_VAR 0 2
46891: PUSH
46892: FOR_IN
46893: IFFALSE 46958
// begin weapons := AvailableWeaponList ( k ) ;
46895: LD_ADDR_VAR 0 9
46899: PUSH
46900: LD_VAR 0 6
46904: PPUSH
46905: CALL_OW 478
46909: ST_TO_ADDR
// if not weapons then
46910: LD_VAR 0 9
46914: NOT
46915: IFFALSE 46919
// continue ;
46917: GO 46892
// if weapon in weapons then
46919: LD_VAR 0 8
46923: PUSH
46924: LD_VAR 0 9
46928: IN
46929: IFFALSE 46956
// begin result := [ i , weapon ] ;
46931: LD_ADDR_VAR 0 3
46935: PUSH
46936: LD_VAR 0 4
46940: PUSH
46941: LD_VAR 0 8
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: ST_TO_ADDR
// exit ;
46950: POP
46951: POP
46952: POP
46953: POP
46954: GO 46964
// end ; end ;
46956: GO 46892
46958: POP
46959: POP
// end ;
46960: GO 46778
46962: POP
46963: POP
// end ;
46964: LD_VAR 0 3
46968: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46969: LD_INT 0
46971: PPUSH
// if not side or side > 8 then
46972: LD_VAR 0 3
46976: NOT
46977: PUSH
46978: LD_VAR 0 3
46982: PUSH
46983: LD_INT 8
46985: GREATER
46986: OR
46987: IFFALSE 46991
// exit ;
46989: GO 47050
// if not range then
46991: LD_VAR 0 4
46995: NOT
46996: IFFALSE 47007
// range := - 12 ;
46998: LD_ADDR_VAR 0 4
47002: PUSH
47003: LD_INT 12
47005: NEG
47006: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47007: LD_VAR 0 1
47011: PPUSH
47012: LD_VAR 0 2
47016: PPUSH
47017: LD_VAR 0 3
47021: PPUSH
47022: LD_VAR 0 4
47026: PPUSH
47027: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47031: LD_VAR 0 1
47035: PPUSH
47036: LD_VAR 0 2
47040: PPUSH
47041: LD_VAR 0 3
47045: PPUSH
47046: CALL_OW 331
// end ;
47050: LD_VAR 0 5
47054: RET
// export function Video ( mode ) ; begin
47055: LD_INT 0
47057: PPUSH
// ingame_video = mode ;
47058: LD_ADDR_OWVAR 52
47062: PUSH
47063: LD_VAR 0 1
47067: ST_TO_ADDR
// interface_hidden = mode ;
47068: LD_ADDR_OWVAR 54
47072: PUSH
47073: LD_VAR 0 1
47077: ST_TO_ADDR
// end ;
47078: LD_VAR 0 2
47082: RET
// export function Join ( array , element ) ; begin
47083: LD_INT 0
47085: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47086: LD_ADDR_VAR 0 3
47090: PUSH
47091: LD_VAR 0 1
47095: PPUSH
47096: LD_VAR 0 1
47100: PUSH
47101: LD_INT 1
47103: PLUS
47104: PPUSH
47105: LD_VAR 0 2
47109: PPUSH
47110: CALL_OW 1
47114: ST_TO_ADDR
// end ;
47115: LD_VAR 0 3
47119: RET
// export function JoinUnion ( array , element ) ; begin
47120: LD_INT 0
47122: PPUSH
// result := array union element ;
47123: LD_ADDR_VAR 0 3
47127: PUSH
47128: LD_VAR 0 1
47132: PUSH
47133: LD_VAR 0 2
47137: UNION
47138: ST_TO_ADDR
// end ;
47139: LD_VAR 0 3
47143: RET
// export function GetBehemoths ( side ) ; begin
47144: LD_INT 0
47146: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47147: LD_ADDR_VAR 0 2
47151: PUSH
47152: LD_INT 22
47154: PUSH
47155: LD_VAR 0 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 31
47166: PUSH
47167: LD_INT 25
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PPUSH
47178: CALL_OW 69
47182: ST_TO_ADDR
// end ;
47183: LD_VAR 0 2
47187: RET
// export function Shuffle ( array ) ; var i , index ; begin
47188: LD_INT 0
47190: PPUSH
47191: PPUSH
47192: PPUSH
// result := [ ] ;
47193: LD_ADDR_VAR 0 2
47197: PUSH
47198: EMPTY
47199: ST_TO_ADDR
// if not array then
47200: LD_VAR 0 1
47204: NOT
47205: IFFALSE 47209
// exit ;
47207: GO 47308
// Randomize ;
47209: CALL_OW 10
// for i = array downto 1 do
47213: LD_ADDR_VAR 0 3
47217: PUSH
47218: DOUBLE
47219: LD_VAR 0 1
47223: INC
47224: ST_TO_ADDR
47225: LD_INT 1
47227: PUSH
47228: FOR_DOWNTO
47229: IFFALSE 47306
// begin index := rand ( 1 , array ) ;
47231: LD_ADDR_VAR 0 4
47235: PUSH
47236: LD_INT 1
47238: PPUSH
47239: LD_VAR 0 1
47243: PPUSH
47244: CALL_OW 12
47248: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47249: LD_ADDR_VAR 0 2
47253: PUSH
47254: LD_VAR 0 2
47258: PPUSH
47259: LD_VAR 0 2
47263: PUSH
47264: LD_INT 1
47266: PLUS
47267: PPUSH
47268: LD_VAR 0 1
47272: PUSH
47273: LD_VAR 0 4
47277: ARRAY
47278: PPUSH
47279: CALL_OW 2
47283: ST_TO_ADDR
// array := Delete ( array , index ) ;
47284: LD_ADDR_VAR 0 1
47288: PUSH
47289: LD_VAR 0 1
47293: PPUSH
47294: LD_VAR 0 4
47298: PPUSH
47299: CALL_OW 3
47303: ST_TO_ADDR
// end ;
47304: GO 47228
47306: POP
47307: POP
// end ;
47308: LD_VAR 0 2
47312: RET
// export function GetBaseMaterials ( base ) ; begin
47313: LD_INT 0
47315: PPUSH
// result := [ 0 , 0 , 0 ] ;
47316: LD_ADDR_VAR 0 2
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// if not base then
47335: LD_VAR 0 1
47339: NOT
47340: IFFALSE 47344
// exit ;
47342: GO 47393
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47344: LD_ADDR_VAR 0 2
47348: PUSH
47349: LD_VAR 0 1
47353: PPUSH
47354: LD_INT 1
47356: PPUSH
47357: CALL_OW 275
47361: PUSH
47362: LD_VAR 0 1
47366: PPUSH
47367: LD_INT 2
47369: PPUSH
47370: CALL_OW 275
47374: PUSH
47375: LD_VAR 0 1
47379: PPUSH
47380: LD_INT 3
47382: PPUSH
47383: CALL_OW 275
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: ST_TO_ADDR
// end ;
47393: LD_VAR 0 2
47397: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47398: LD_INT 0
47400: PPUSH
47401: PPUSH
// result := array ;
47402: LD_ADDR_VAR 0 3
47406: PUSH
47407: LD_VAR 0 1
47411: ST_TO_ADDR
// if size >= result then
47412: LD_VAR 0 2
47416: PUSH
47417: LD_VAR 0 3
47421: GREATEREQUAL
47422: IFFALSE 47426
// exit ;
47424: GO 47476
// if size then
47426: LD_VAR 0 2
47430: IFFALSE 47476
// for i := array downto size do
47432: LD_ADDR_VAR 0 4
47436: PUSH
47437: DOUBLE
47438: LD_VAR 0 1
47442: INC
47443: ST_TO_ADDR
47444: LD_VAR 0 2
47448: PUSH
47449: FOR_DOWNTO
47450: IFFALSE 47474
// result := Delete ( result , result ) ;
47452: LD_ADDR_VAR 0 3
47456: PUSH
47457: LD_VAR 0 3
47461: PPUSH
47462: LD_VAR 0 3
47466: PPUSH
47467: CALL_OW 3
47471: ST_TO_ADDR
47472: GO 47449
47474: POP
47475: POP
// end ;
47476: LD_VAR 0 3
47480: RET
// export function ComExit ( unit ) ; var tmp ; begin
47481: LD_INT 0
47483: PPUSH
47484: PPUSH
// if not IsInUnit ( unit ) then
47485: LD_VAR 0 1
47489: PPUSH
47490: CALL_OW 310
47494: NOT
47495: IFFALSE 47499
// exit ;
47497: GO 47559
// tmp := IsInUnit ( unit ) ;
47499: LD_ADDR_VAR 0 3
47503: PUSH
47504: LD_VAR 0 1
47508: PPUSH
47509: CALL_OW 310
47513: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47514: LD_VAR 0 3
47518: PPUSH
47519: CALL_OW 247
47523: PUSH
47524: LD_INT 2
47526: EQUAL
47527: IFFALSE 47540
// ComExitVehicle ( unit ) else
47529: LD_VAR 0 1
47533: PPUSH
47534: CALL_OW 121
47538: GO 47549
// ComExitBuilding ( unit ) ;
47540: LD_VAR 0 1
47544: PPUSH
47545: CALL_OW 122
// result := tmp ;
47549: LD_ADDR_VAR 0 2
47553: PUSH
47554: LD_VAR 0 3
47558: ST_TO_ADDR
// end ;
47559: LD_VAR 0 2
47563: RET
// export function ComExitAll ( units ) ; var i ; begin
47564: LD_INT 0
47566: PPUSH
47567: PPUSH
// if not units then
47568: LD_VAR 0 1
47572: NOT
47573: IFFALSE 47577
// exit ;
47575: GO 47603
// for i in units do
47577: LD_ADDR_VAR 0 3
47581: PUSH
47582: LD_VAR 0 1
47586: PUSH
47587: FOR_IN
47588: IFFALSE 47601
// ComExit ( i ) ;
47590: LD_VAR 0 3
47594: PPUSH
47595: CALL 47481 0 1
47599: GO 47587
47601: POP
47602: POP
// end ;
47603: LD_VAR 0 2
47607: RET
// export function ResetHc ; begin
47608: LD_INT 0
47610: PPUSH
// InitHc ;
47611: CALL_OW 19
// hc_importance := 0 ;
47615: LD_ADDR_OWVAR 32
47619: PUSH
47620: LD_INT 0
47622: ST_TO_ADDR
// end ;
47623: LD_VAR 0 1
47627: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47628: LD_INT 0
47630: PPUSH
47631: PPUSH
47632: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47633: LD_ADDR_VAR 0 6
47637: PUSH
47638: LD_VAR 0 1
47642: PUSH
47643: LD_VAR 0 3
47647: PLUS
47648: PUSH
47649: LD_INT 2
47651: DIV
47652: ST_TO_ADDR
// if _x < 0 then
47653: LD_VAR 0 6
47657: PUSH
47658: LD_INT 0
47660: LESS
47661: IFFALSE 47678
// _x := _x * - 1 ;
47663: LD_ADDR_VAR 0 6
47667: PUSH
47668: LD_VAR 0 6
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: MUL
47677: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47678: LD_ADDR_VAR 0 7
47682: PUSH
47683: LD_VAR 0 2
47687: PUSH
47688: LD_VAR 0 4
47692: PLUS
47693: PUSH
47694: LD_INT 2
47696: DIV
47697: ST_TO_ADDR
// if _y < 0 then
47698: LD_VAR 0 7
47702: PUSH
47703: LD_INT 0
47705: LESS
47706: IFFALSE 47723
// _y := _y * - 1 ;
47708: LD_ADDR_VAR 0 7
47712: PUSH
47713: LD_VAR 0 7
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: MUL
47722: ST_TO_ADDR
// result := [ _x , _y ] ;
47723: LD_ADDR_VAR 0 5
47727: PUSH
47728: LD_VAR 0 6
47732: PUSH
47733: LD_VAR 0 7
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: ST_TO_ADDR
// end ;
47742: LD_VAR 0 5
47746: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47747: LD_INT 0
47749: PPUSH
47750: PPUSH
47751: PPUSH
47752: PPUSH
// task := GetTaskList ( unit ) ;
47753: LD_ADDR_VAR 0 7
47757: PUSH
47758: LD_VAR 0 1
47762: PPUSH
47763: CALL_OW 437
47767: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47768: LD_VAR 0 7
47772: NOT
47773: PUSH
47774: LD_VAR 0 1
47778: PPUSH
47779: LD_VAR 0 2
47783: PPUSH
47784: CALL_OW 308
47788: NOT
47789: AND
47790: IFFALSE 47794
// exit ;
47792: GO 47912
// if IsInArea ( unit , area ) then
47794: LD_VAR 0 1
47798: PPUSH
47799: LD_VAR 0 2
47803: PPUSH
47804: CALL_OW 308
47808: IFFALSE 47826
// begin ComMoveToArea ( unit , goAway ) ;
47810: LD_VAR 0 1
47814: PPUSH
47815: LD_VAR 0 3
47819: PPUSH
47820: CALL_OW 113
// exit ;
47824: GO 47912
// end ; if task [ 1 ] [ 1 ] <> M then
47826: LD_VAR 0 7
47830: PUSH
47831: LD_INT 1
47833: ARRAY
47834: PUSH
47835: LD_INT 1
47837: ARRAY
47838: PUSH
47839: LD_STRING M
47841: NONEQUAL
47842: IFFALSE 47846
// exit ;
47844: GO 47912
// x := task [ 1 ] [ 2 ] ;
47846: LD_ADDR_VAR 0 5
47850: PUSH
47851: LD_VAR 0 7
47855: PUSH
47856: LD_INT 1
47858: ARRAY
47859: PUSH
47860: LD_INT 2
47862: ARRAY
47863: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47864: LD_ADDR_VAR 0 6
47868: PUSH
47869: LD_VAR 0 7
47873: PUSH
47874: LD_INT 1
47876: ARRAY
47877: PUSH
47878: LD_INT 3
47880: ARRAY
47881: ST_TO_ADDR
// if InArea ( x , y , area ) then
47882: LD_VAR 0 5
47886: PPUSH
47887: LD_VAR 0 6
47891: PPUSH
47892: LD_VAR 0 2
47896: PPUSH
47897: CALL_OW 309
47901: IFFALSE 47912
// ComStop ( unit ) ;
47903: LD_VAR 0 1
47907: PPUSH
47908: CALL_OW 141
// end ;
47912: LD_VAR 0 4
47916: RET
// export function Abs ( value ) ; begin
47917: LD_INT 0
47919: PPUSH
// result := value ;
47920: LD_ADDR_VAR 0 2
47924: PUSH
47925: LD_VAR 0 1
47929: ST_TO_ADDR
// if value < 0 then
47930: LD_VAR 0 1
47934: PUSH
47935: LD_INT 0
47937: LESS
47938: IFFALSE 47955
// result := value * - 1 ;
47940: LD_ADDR_VAR 0 2
47944: PUSH
47945: LD_VAR 0 1
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: MUL
47954: ST_TO_ADDR
// end ;
47955: LD_VAR 0 2
47959: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47960: LD_INT 0
47962: PPUSH
47963: PPUSH
47964: PPUSH
47965: PPUSH
47966: PPUSH
47967: PPUSH
47968: PPUSH
47969: PPUSH
// if not unit or not building then
47970: LD_VAR 0 1
47974: NOT
47975: PUSH
47976: LD_VAR 0 2
47980: NOT
47981: OR
47982: IFFALSE 47986
// exit ;
47984: GO 48212
// x := GetX ( building ) ;
47986: LD_ADDR_VAR 0 4
47990: PUSH
47991: LD_VAR 0 2
47995: PPUSH
47996: CALL_OW 250
48000: ST_TO_ADDR
// y := GetY ( building ) ;
48001: LD_ADDR_VAR 0 6
48005: PUSH
48006: LD_VAR 0 2
48010: PPUSH
48011: CALL_OW 251
48015: ST_TO_ADDR
// d := GetDir ( building ) ;
48016: LD_ADDR_VAR 0 8
48020: PUSH
48021: LD_VAR 0 2
48025: PPUSH
48026: CALL_OW 254
48030: ST_TO_ADDR
// r := 4 ;
48031: LD_ADDR_VAR 0 9
48035: PUSH
48036: LD_INT 4
48038: ST_TO_ADDR
// for i := 1 to 5 do
48039: LD_ADDR_VAR 0 10
48043: PUSH
48044: DOUBLE
48045: LD_INT 1
48047: DEC
48048: ST_TO_ADDR
48049: LD_INT 5
48051: PUSH
48052: FOR_TO
48053: IFFALSE 48210
// begin _x := ShiftX ( x , d , r + i ) ;
48055: LD_ADDR_VAR 0 5
48059: PUSH
48060: LD_VAR 0 4
48064: PPUSH
48065: LD_VAR 0 8
48069: PPUSH
48070: LD_VAR 0 9
48074: PUSH
48075: LD_VAR 0 10
48079: PLUS
48080: PPUSH
48081: CALL_OW 272
48085: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48086: LD_ADDR_VAR 0 7
48090: PUSH
48091: LD_VAR 0 6
48095: PPUSH
48096: LD_VAR 0 8
48100: PPUSH
48101: LD_VAR 0 9
48105: PUSH
48106: LD_VAR 0 10
48110: PLUS
48111: PPUSH
48112: CALL_OW 273
48116: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48117: LD_VAR 0 5
48121: PPUSH
48122: LD_VAR 0 7
48126: PPUSH
48127: CALL_OW 488
48131: PUSH
48132: LD_VAR 0 5
48136: PPUSH
48137: LD_VAR 0 7
48141: PPUSH
48142: CALL_OW 428
48146: PPUSH
48147: CALL_OW 247
48151: PUSH
48152: LD_INT 3
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: IN
48162: NOT
48163: AND
48164: IFFALSE 48208
// begin ComMoveXY ( unit , _x , _y ) ;
48166: LD_VAR 0 1
48170: PPUSH
48171: LD_VAR 0 5
48175: PPUSH
48176: LD_VAR 0 7
48180: PPUSH
48181: CALL_OW 111
// result := [ _x , _y ] ;
48185: LD_ADDR_VAR 0 3
48189: PUSH
48190: LD_VAR 0 5
48194: PUSH
48195: LD_VAR 0 7
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: ST_TO_ADDR
// exit ;
48204: POP
48205: POP
48206: GO 48212
// end ; end ;
48208: GO 48052
48210: POP
48211: POP
// end ;
48212: LD_VAR 0 3
48216: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48217: LD_INT 0
48219: PPUSH
48220: PPUSH
48221: PPUSH
// result := 0 ;
48222: LD_ADDR_VAR 0 3
48226: PUSH
48227: LD_INT 0
48229: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48230: LD_VAR 0 1
48234: PUSH
48235: LD_INT 0
48237: LESS
48238: PUSH
48239: LD_VAR 0 1
48243: PUSH
48244: LD_INT 8
48246: GREATER
48247: OR
48248: PUSH
48249: LD_VAR 0 2
48253: PUSH
48254: LD_INT 0
48256: LESS
48257: OR
48258: PUSH
48259: LD_VAR 0 2
48263: PUSH
48264: LD_INT 8
48266: GREATER
48267: OR
48268: IFFALSE 48272
// exit ;
48270: GO 48347
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48272: LD_ADDR_VAR 0 4
48276: PUSH
48277: LD_INT 22
48279: PUSH
48280: LD_VAR 0 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PPUSH
48289: CALL_OW 69
48293: PUSH
48294: FOR_IN
48295: IFFALSE 48345
// begin un := UnitShoot ( i ) ;
48297: LD_ADDR_VAR 0 5
48301: PUSH
48302: LD_VAR 0 4
48306: PPUSH
48307: CALL_OW 504
48311: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48312: LD_VAR 0 5
48316: PPUSH
48317: CALL_OW 255
48321: PUSH
48322: LD_VAR 0 1
48326: EQUAL
48327: IFFALSE 48343
// begin result := un ;
48329: LD_ADDR_VAR 0 3
48333: PUSH
48334: LD_VAR 0 5
48338: ST_TO_ADDR
// exit ;
48339: POP
48340: POP
48341: GO 48347
// end ; end ;
48343: GO 48294
48345: POP
48346: POP
// end ;
48347: LD_VAR 0 3
48351: RET
// export function GetCargoBay ( units ) ; begin
48352: LD_INT 0
48354: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48355: LD_ADDR_VAR 0 2
48359: PUSH
48360: LD_VAR 0 1
48364: PPUSH
48365: LD_INT 2
48367: PUSH
48368: LD_INT 34
48370: PUSH
48371: LD_INT 12
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 34
48380: PUSH
48381: LD_INT 51
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 34
48390: PUSH
48391: LD_INT 32
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 34
48400: PUSH
48401: LD_INT 89
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: PPUSH
48415: CALL_OW 72
48419: ST_TO_ADDR
// end ;
48420: LD_VAR 0 2
48424: RET
// export function Negate ( value ) ; begin
48425: LD_INT 0
48427: PPUSH
// result := not value ;
48428: LD_ADDR_VAR 0 2
48432: PUSH
48433: LD_VAR 0 1
48437: NOT
48438: ST_TO_ADDR
// end ;
48439: LD_VAR 0 2
48443: RET
// export function Inc ( value ) ; begin
48444: LD_INT 0
48446: PPUSH
// result := value + 1 ;
48447: LD_ADDR_VAR 0 2
48451: PUSH
48452: LD_VAR 0 1
48456: PUSH
48457: LD_INT 1
48459: PLUS
48460: ST_TO_ADDR
// end ;
48461: LD_VAR 0 2
48465: RET
// export function Dec ( value ) ; begin
48466: LD_INT 0
48468: PPUSH
// result := value - 1 ;
48469: LD_ADDR_VAR 0 2
48473: PUSH
48474: LD_VAR 0 1
48478: PUSH
48479: LD_INT 1
48481: MINUS
48482: ST_TO_ADDR
// end ;
48483: LD_VAR 0 2
48487: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48488: LD_INT 0
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
48495: PPUSH
48496: PPUSH
48497: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48498: LD_VAR 0 1
48502: PPUSH
48503: LD_VAR 0 2
48507: PPUSH
48508: CALL_OW 488
48512: NOT
48513: PUSH
48514: LD_VAR 0 3
48518: PPUSH
48519: LD_VAR 0 4
48523: PPUSH
48524: CALL_OW 488
48528: NOT
48529: OR
48530: IFFALSE 48543
// begin result := - 1 ;
48532: LD_ADDR_VAR 0 5
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: ST_TO_ADDR
// exit ;
48541: GO 48778
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48543: LD_ADDR_VAR 0 12
48547: PUSH
48548: LD_VAR 0 1
48552: PPUSH
48553: LD_VAR 0 2
48557: PPUSH
48558: LD_VAR 0 3
48562: PPUSH
48563: LD_VAR 0 4
48567: PPUSH
48568: CALL 47628 0 4
48572: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48573: LD_ADDR_VAR 0 11
48577: PUSH
48578: LD_VAR 0 1
48582: PPUSH
48583: LD_VAR 0 2
48587: PPUSH
48588: LD_VAR 0 12
48592: PUSH
48593: LD_INT 1
48595: ARRAY
48596: PPUSH
48597: LD_VAR 0 12
48601: PUSH
48602: LD_INT 2
48604: ARRAY
48605: PPUSH
48606: CALL_OW 298
48610: ST_TO_ADDR
// distance := 9999 ;
48611: LD_ADDR_VAR 0 10
48615: PUSH
48616: LD_INT 9999
48618: ST_TO_ADDR
// for i := 0 to 5 do
48619: LD_ADDR_VAR 0 6
48623: PUSH
48624: DOUBLE
48625: LD_INT 0
48627: DEC
48628: ST_TO_ADDR
48629: LD_INT 5
48631: PUSH
48632: FOR_TO
48633: IFFALSE 48776
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48635: LD_ADDR_VAR 0 7
48639: PUSH
48640: LD_VAR 0 1
48644: PPUSH
48645: LD_VAR 0 6
48649: PPUSH
48650: LD_VAR 0 11
48654: PPUSH
48655: CALL_OW 272
48659: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48660: LD_ADDR_VAR 0 8
48664: PUSH
48665: LD_VAR 0 2
48669: PPUSH
48670: LD_VAR 0 6
48674: PPUSH
48675: LD_VAR 0 11
48679: PPUSH
48680: CALL_OW 273
48684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48685: LD_VAR 0 7
48689: PPUSH
48690: LD_VAR 0 8
48694: PPUSH
48695: CALL_OW 488
48699: NOT
48700: IFFALSE 48704
// continue ;
48702: GO 48632
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48704: LD_ADDR_VAR 0 9
48708: PUSH
48709: LD_VAR 0 12
48713: PUSH
48714: LD_INT 1
48716: ARRAY
48717: PPUSH
48718: LD_VAR 0 12
48722: PUSH
48723: LD_INT 2
48725: ARRAY
48726: PPUSH
48727: LD_VAR 0 7
48731: PPUSH
48732: LD_VAR 0 8
48736: PPUSH
48737: CALL_OW 298
48741: ST_TO_ADDR
// if tmp < distance then
48742: LD_VAR 0 9
48746: PUSH
48747: LD_VAR 0 10
48751: LESS
48752: IFFALSE 48774
// begin result := i ;
48754: LD_ADDR_VAR 0 5
48758: PUSH
48759: LD_VAR 0 6
48763: ST_TO_ADDR
// distance := tmp ;
48764: LD_ADDR_VAR 0 10
48768: PUSH
48769: LD_VAR 0 9
48773: ST_TO_ADDR
// end ; end ;
48774: GO 48632
48776: POP
48777: POP
// end ;
48778: LD_VAR 0 5
48782: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48783: LD_INT 0
48785: PPUSH
48786: PPUSH
// if not driver or not IsInUnit ( driver ) then
48787: LD_VAR 0 1
48791: NOT
48792: PUSH
48793: LD_VAR 0 1
48797: PPUSH
48798: CALL_OW 310
48802: NOT
48803: OR
48804: IFFALSE 48808
// exit ;
48806: GO 48898
// vehicle := IsInUnit ( driver ) ;
48808: LD_ADDR_VAR 0 3
48812: PUSH
48813: LD_VAR 0 1
48817: PPUSH
48818: CALL_OW 310
48822: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48823: LD_VAR 0 1
48827: PPUSH
48828: LD_STRING \
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: PUSH
48858: LD_STRING E
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_VAR 0 3
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PPUSH
48894: CALL_OW 446
// end ;
48898: LD_VAR 0 2
48902: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48903: LD_INT 0
48905: PPUSH
48906: PPUSH
// if not driver or not IsInUnit ( driver ) then
48907: LD_VAR 0 1
48911: NOT
48912: PUSH
48913: LD_VAR 0 1
48917: PPUSH
48918: CALL_OW 310
48922: NOT
48923: OR
48924: IFFALSE 48928
// exit ;
48926: GO 49018
// vehicle := IsInUnit ( driver ) ;
48928: LD_ADDR_VAR 0 3
48932: PUSH
48933: LD_VAR 0 1
48937: PPUSH
48938: CALL_OW 310
48942: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48943: LD_VAR 0 1
48947: PPUSH
48948: LD_STRING \
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: PUSH
48978: LD_STRING E
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_VAR 0 3
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PPUSH
49014: CALL_OW 447
// end ;
49018: LD_VAR 0 2
49022: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49023: LD_INT 0
49025: PPUSH
49026: PPUSH
49027: PPUSH
// tmp := [ ] ;
49028: LD_ADDR_VAR 0 5
49032: PUSH
49033: EMPTY
49034: ST_TO_ADDR
// for i in units do
49035: LD_ADDR_VAR 0 4
49039: PUSH
49040: LD_VAR 0 1
49044: PUSH
49045: FOR_IN
49046: IFFALSE 49084
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49048: LD_ADDR_VAR 0 5
49052: PUSH
49053: LD_VAR 0 5
49057: PPUSH
49058: LD_VAR 0 5
49062: PUSH
49063: LD_INT 1
49065: PLUS
49066: PPUSH
49067: LD_VAR 0 4
49071: PPUSH
49072: CALL_OW 256
49076: PPUSH
49077: CALL_OW 2
49081: ST_TO_ADDR
49082: GO 49045
49084: POP
49085: POP
// if not tmp then
49086: LD_VAR 0 5
49090: NOT
49091: IFFALSE 49095
// exit ;
49093: GO 49143
// if asc then
49095: LD_VAR 0 2
49099: IFFALSE 49123
// result := SortListByListAsc ( units , tmp ) else
49101: LD_ADDR_VAR 0 3
49105: PUSH
49106: LD_VAR 0 1
49110: PPUSH
49111: LD_VAR 0 5
49115: PPUSH
49116: CALL_OW 76
49120: ST_TO_ADDR
49121: GO 49143
// result := SortListByListDesc ( units , tmp ) ;
49123: LD_ADDR_VAR 0 3
49127: PUSH
49128: LD_VAR 0 1
49132: PPUSH
49133: LD_VAR 0 5
49137: PPUSH
49138: CALL_OW 77
49142: ST_TO_ADDR
// end ;
49143: LD_VAR 0 3
49147: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49148: LD_INT 0
49150: PPUSH
49151: PPUSH
// task := GetTaskList ( mech ) ;
49152: LD_ADDR_VAR 0 4
49156: PUSH
49157: LD_VAR 0 1
49161: PPUSH
49162: CALL_OW 437
49166: ST_TO_ADDR
// if not task then
49167: LD_VAR 0 4
49171: NOT
49172: IFFALSE 49176
// exit ;
49174: GO 49218
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49176: LD_ADDR_VAR 0 3
49180: PUSH
49181: LD_VAR 0 4
49185: PUSH
49186: LD_INT 1
49188: ARRAY
49189: PUSH
49190: LD_INT 1
49192: ARRAY
49193: PUSH
49194: LD_STRING r
49196: EQUAL
49197: PUSH
49198: LD_VAR 0 4
49202: PUSH
49203: LD_INT 1
49205: ARRAY
49206: PUSH
49207: LD_INT 4
49209: ARRAY
49210: PUSH
49211: LD_VAR 0 2
49215: EQUAL
49216: AND
49217: ST_TO_ADDR
// end ;
49218: LD_VAR 0 3
49222: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49223: LD_INT 0
49225: PPUSH
// SetDir ( unit , d ) ;
49226: LD_VAR 0 1
49230: PPUSH
49231: LD_VAR 0 4
49235: PPUSH
49236: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49240: LD_ADDR_VAR 0 6
49244: PUSH
49245: LD_VAR 0 1
49249: PPUSH
49250: LD_VAR 0 2
49254: PPUSH
49255: LD_VAR 0 3
49259: PPUSH
49260: LD_VAR 0 5
49264: PPUSH
49265: CALL_OW 48
49269: ST_TO_ADDR
// end ;
49270: LD_VAR 0 6
49274: RET
// export function ToNaturalNumber ( number ) ; begin
49275: LD_INT 0
49277: PPUSH
// result := number div 1 ;
49278: LD_ADDR_VAR 0 2
49282: PUSH
49283: LD_VAR 0 1
49287: PUSH
49288: LD_INT 1
49290: DIV
49291: ST_TO_ADDR
// if number < 0 then
49292: LD_VAR 0 1
49296: PUSH
49297: LD_INT 0
49299: LESS
49300: IFFALSE 49310
// result := 0 ;
49302: LD_ADDR_VAR 0 2
49306: PUSH
49307: LD_INT 0
49309: ST_TO_ADDR
// end ;
49310: LD_VAR 0 2
49314: RET
// export function SortByClass ( units , class ) ; var un ; begin
49315: LD_INT 0
49317: PPUSH
49318: PPUSH
// if not units or not class then
49319: LD_VAR 0 1
49323: NOT
49324: PUSH
49325: LD_VAR 0 2
49329: NOT
49330: OR
49331: IFFALSE 49335
// exit ;
49333: GO 49430
// result := [ ] ;
49335: LD_ADDR_VAR 0 3
49339: PUSH
49340: EMPTY
49341: ST_TO_ADDR
// for un in units do
49342: LD_ADDR_VAR 0 4
49346: PUSH
49347: LD_VAR 0 1
49351: PUSH
49352: FOR_IN
49353: IFFALSE 49428
// if GetClass ( un ) = class then
49355: LD_VAR 0 4
49359: PPUSH
49360: CALL_OW 257
49364: PUSH
49365: LD_VAR 0 2
49369: EQUAL
49370: IFFALSE 49397
// result := Insert ( result , 1 , un ) else
49372: LD_ADDR_VAR 0 3
49376: PUSH
49377: LD_VAR 0 3
49381: PPUSH
49382: LD_INT 1
49384: PPUSH
49385: LD_VAR 0 4
49389: PPUSH
49390: CALL_OW 2
49394: ST_TO_ADDR
49395: GO 49426
// result := Replace ( result , result + 1 , un ) ;
49397: LD_ADDR_VAR 0 3
49401: PUSH
49402: LD_VAR 0 3
49406: PPUSH
49407: LD_VAR 0 3
49411: PUSH
49412: LD_INT 1
49414: PLUS
49415: PPUSH
49416: LD_VAR 0 4
49420: PPUSH
49421: CALL_OW 1
49425: ST_TO_ADDR
49426: GO 49352
49428: POP
49429: POP
// end ;
49430: LD_VAR 0 3
49434: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49435: LD_INT 0
49437: PPUSH
49438: PPUSH
49439: PPUSH
49440: PPUSH
49441: PPUSH
49442: PPUSH
49443: PPUSH
// result := [ ] ;
49444: LD_ADDR_VAR 0 4
49448: PUSH
49449: EMPTY
49450: ST_TO_ADDR
// if x - r < 0 then
49451: LD_VAR 0 1
49455: PUSH
49456: LD_VAR 0 3
49460: MINUS
49461: PUSH
49462: LD_INT 0
49464: LESS
49465: IFFALSE 49477
// min_x := 0 else
49467: LD_ADDR_VAR 0 8
49471: PUSH
49472: LD_INT 0
49474: ST_TO_ADDR
49475: GO 49493
// min_x := x - r ;
49477: LD_ADDR_VAR 0 8
49481: PUSH
49482: LD_VAR 0 1
49486: PUSH
49487: LD_VAR 0 3
49491: MINUS
49492: ST_TO_ADDR
// if y - r < 0 then
49493: LD_VAR 0 2
49497: PUSH
49498: LD_VAR 0 3
49502: MINUS
49503: PUSH
49504: LD_INT 0
49506: LESS
49507: IFFALSE 49519
// min_y := 0 else
49509: LD_ADDR_VAR 0 7
49513: PUSH
49514: LD_INT 0
49516: ST_TO_ADDR
49517: GO 49535
// min_y := y - r ;
49519: LD_ADDR_VAR 0 7
49523: PUSH
49524: LD_VAR 0 2
49528: PUSH
49529: LD_VAR 0 3
49533: MINUS
49534: ST_TO_ADDR
// max_x := x + r ;
49535: LD_ADDR_VAR 0 9
49539: PUSH
49540: LD_VAR 0 1
49544: PUSH
49545: LD_VAR 0 3
49549: PLUS
49550: ST_TO_ADDR
// max_y := y + r ;
49551: LD_ADDR_VAR 0 10
49555: PUSH
49556: LD_VAR 0 2
49560: PUSH
49561: LD_VAR 0 3
49565: PLUS
49566: ST_TO_ADDR
// for _x = min_x to max_x do
49567: LD_ADDR_VAR 0 5
49571: PUSH
49572: DOUBLE
49573: LD_VAR 0 8
49577: DEC
49578: ST_TO_ADDR
49579: LD_VAR 0 9
49583: PUSH
49584: FOR_TO
49585: IFFALSE 49686
// for _y = min_y to max_y do
49587: LD_ADDR_VAR 0 6
49591: PUSH
49592: DOUBLE
49593: LD_VAR 0 7
49597: DEC
49598: ST_TO_ADDR
49599: LD_VAR 0 10
49603: PUSH
49604: FOR_TO
49605: IFFALSE 49682
// begin if not ValidHex ( _x , _y ) then
49607: LD_VAR 0 5
49611: PPUSH
49612: LD_VAR 0 6
49616: PPUSH
49617: CALL_OW 488
49621: NOT
49622: IFFALSE 49626
// continue ;
49624: GO 49604
// if GetResourceTypeXY ( _x , _y ) then
49626: LD_VAR 0 5
49630: PPUSH
49631: LD_VAR 0 6
49635: PPUSH
49636: CALL_OW 283
49640: IFFALSE 49680
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49642: LD_ADDR_VAR 0 4
49646: PUSH
49647: LD_VAR 0 4
49651: PPUSH
49652: LD_VAR 0 4
49656: PUSH
49657: LD_INT 1
49659: PLUS
49660: PPUSH
49661: LD_VAR 0 5
49665: PUSH
49666: LD_VAR 0 6
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PPUSH
49675: CALL_OW 1
49679: ST_TO_ADDR
// end ;
49680: GO 49604
49682: POP
49683: POP
49684: GO 49584
49686: POP
49687: POP
// end ;
49688: LD_VAR 0 4
49692: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49693: LD_INT 0
49695: PPUSH
49696: PPUSH
49697: PPUSH
49698: PPUSH
49699: PPUSH
49700: PPUSH
49701: PPUSH
49702: PPUSH
// if not units then
49703: LD_VAR 0 1
49707: NOT
49708: IFFALSE 49712
// exit ;
49710: GO 50240
// result := UnitFilter ( units , [ f_ok ] ) ;
49712: LD_ADDR_VAR 0 3
49716: PUSH
49717: LD_VAR 0 1
49721: PPUSH
49722: LD_INT 50
49724: PUSH
49725: EMPTY
49726: LIST
49727: PPUSH
49728: CALL_OW 72
49732: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49733: LD_ADDR_VAR 0 8
49737: PUSH
49738: LD_VAR 0 1
49742: PUSH
49743: LD_INT 1
49745: ARRAY
49746: PPUSH
49747: CALL_OW 255
49751: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49752: LD_ADDR_VAR 0 10
49756: PUSH
49757: LD_INT 29
49759: PUSH
49760: LD_INT 91
49762: PUSH
49763: LD_INT 49
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: ST_TO_ADDR
// if not result then
49771: LD_VAR 0 3
49775: NOT
49776: IFFALSE 49780
// exit ;
49778: GO 50240
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49780: LD_ADDR_VAR 0 5
49784: PUSH
49785: LD_INT 81
49787: PUSH
49788: LD_VAR 0 8
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PPUSH
49797: CALL_OW 69
49801: ST_TO_ADDR
// for i in result do
49802: LD_ADDR_VAR 0 4
49806: PUSH
49807: LD_VAR 0 3
49811: PUSH
49812: FOR_IN
49813: IFFALSE 50238
// begin tag := GetTag ( i ) + 1 ;
49815: LD_ADDR_VAR 0 9
49819: PUSH
49820: LD_VAR 0 4
49824: PPUSH
49825: CALL_OW 110
49829: PUSH
49830: LD_INT 1
49832: PLUS
49833: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49834: LD_ADDR_VAR 0 7
49838: PUSH
49839: LD_VAR 0 4
49843: PPUSH
49844: CALL_OW 250
49848: PPUSH
49849: LD_VAR 0 4
49853: PPUSH
49854: CALL_OW 251
49858: PPUSH
49859: LD_INT 4
49861: PPUSH
49862: CALL 49435 0 3
49866: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49867: LD_VAR 0 4
49871: PPUSH
49872: CALL_OW 247
49876: PUSH
49877: LD_INT 2
49879: EQUAL
49880: PUSH
49881: LD_VAR 0 7
49885: PUSH
49886: LD_INT 2
49888: GREATER
49889: AND
49890: PUSH
49891: LD_VAR 0 4
49895: PPUSH
49896: CALL_OW 264
49900: PUSH
49901: LD_VAR 0 10
49905: IN
49906: NOT
49907: AND
49908: IFFALSE 49947
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49910: LD_VAR 0 4
49914: PPUSH
49915: LD_VAR 0 7
49919: PUSH
49920: LD_INT 1
49922: ARRAY
49923: PUSH
49924: LD_INT 1
49926: ARRAY
49927: PPUSH
49928: LD_VAR 0 7
49932: PUSH
49933: LD_INT 1
49935: ARRAY
49936: PUSH
49937: LD_INT 2
49939: ARRAY
49940: PPUSH
49941: CALL_OW 116
49945: GO 50236
// if path > tag then
49947: LD_VAR 0 2
49951: PUSH
49952: LD_VAR 0 9
49956: GREATER
49957: IFFALSE 50165
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49959: LD_ADDR_VAR 0 6
49963: PUSH
49964: LD_VAR 0 5
49968: PPUSH
49969: LD_INT 91
49971: PUSH
49972: LD_VAR 0 4
49976: PUSH
49977: LD_INT 8
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: PPUSH
49985: CALL_OW 72
49989: ST_TO_ADDR
// if nearEnemy then
49990: LD_VAR 0 6
49994: IFFALSE 50063
// begin if GetWeapon ( i ) = ru_time_lapser then
49996: LD_VAR 0 4
50000: PPUSH
50001: CALL_OW 264
50005: PUSH
50006: LD_INT 49
50008: EQUAL
50009: IFFALSE 50037
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50011: LD_VAR 0 4
50015: PPUSH
50016: LD_VAR 0 6
50020: PPUSH
50021: LD_VAR 0 4
50025: PPUSH
50026: CALL_OW 74
50030: PPUSH
50031: CALL_OW 112
50035: GO 50061
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50037: LD_VAR 0 4
50041: PPUSH
50042: LD_VAR 0 6
50046: PPUSH
50047: LD_VAR 0 4
50051: PPUSH
50052: CALL_OW 74
50056: PPUSH
50057: CALL 51311 0 2
// end else
50061: GO 50163
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50063: LD_VAR 0 4
50067: PPUSH
50068: LD_VAR 0 2
50072: PUSH
50073: LD_VAR 0 9
50077: ARRAY
50078: PUSH
50079: LD_INT 1
50081: ARRAY
50082: PPUSH
50083: LD_VAR 0 2
50087: PUSH
50088: LD_VAR 0 9
50092: ARRAY
50093: PUSH
50094: LD_INT 2
50096: ARRAY
50097: PPUSH
50098: CALL_OW 297
50102: PUSH
50103: LD_INT 6
50105: GREATER
50106: IFFALSE 50149
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50108: LD_VAR 0 4
50112: PPUSH
50113: LD_VAR 0 2
50117: PUSH
50118: LD_VAR 0 9
50122: ARRAY
50123: PUSH
50124: LD_INT 1
50126: ARRAY
50127: PPUSH
50128: LD_VAR 0 2
50132: PUSH
50133: LD_VAR 0 9
50137: ARRAY
50138: PUSH
50139: LD_INT 2
50141: ARRAY
50142: PPUSH
50143: CALL_OW 114
50147: GO 50163
// SetTag ( i , tag ) ;
50149: LD_VAR 0 4
50153: PPUSH
50154: LD_VAR 0 9
50158: PPUSH
50159: CALL_OW 109
// end else
50163: GO 50236
// if enemy then
50165: LD_VAR 0 5
50169: IFFALSE 50236
// begin if GetWeapon ( i ) = ru_time_lapser then
50171: LD_VAR 0 4
50175: PPUSH
50176: CALL_OW 264
50180: PUSH
50181: LD_INT 49
50183: EQUAL
50184: IFFALSE 50212
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50186: LD_VAR 0 4
50190: PPUSH
50191: LD_VAR 0 5
50195: PPUSH
50196: LD_VAR 0 4
50200: PPUSH
50201: CALL_OW 74
50205: PPUSH
50206: CALL_OW 112
50210: GO 50236
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50212: LD_VAR 0 4
50216: PPUSH
50217: LD_VAR 0 5
50221: PPUSH
50222: LD_VAR 0 4
50226: PPUSH
50227: CALL_OW 74
50231: PPUSH
50232: CALL 51311 0 2
// end ; end ;
50236: GO 49812
50238: POP
50239: POP
// end ;
50240: LD_VAR 0 3
50244: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50245: LD_INT 0
50247: PPUSH
50248: PPUSH
50249: PPUSH
// if not unit or IsInUnit ( unit ) then
50250: LD_VAR 0 1
50254: NOT
50255: PUSH
50256: LD_VAR 0 1
50260: PPUSH
50261: CALL_OW 310
50265: OR
50266: IFFALSE 50270
// exit ;
50268: GO 50361
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50270: LD_ADDR_VAR 0 4
50274: PUSH
50275: LD_VAR 0 1
50279: PPUSH
50280: CALL_OW 250
50284: PPUSH
50285: LD_VAR 0 2
50289: PPUSH
50290: LD_INT 1
50292: PPUSH
50293: CALL_OW 272
50297: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50298: LD_ADDR_VAR 0 5
50302: PUSH
50303: LD_VAR 0 1
50307: PPUSH
50308: CALL_OW 251
50312: PPUSH
50313: LD_VAR 0 2
50317: PPUSH
50318: LD_INT 1
50320: PPUSH
50321: CALL_OW 273
50325: ST_TO_ADDR
// if ValidHex ( x , y ) then
50326: LD_VAR 0 4
50330: PPUSH
50331: LD_VAR 0 5
50335: PPUSH
50336: CALL_OW 488
50340: IFFALSE 50361
// ComTurnXY ( unit , x , y ) ;
50342: LD_VAR 0 1
50346: PPUSH
50347: LD_VAR 0 4
50351: PPUSH
50352: LD_VAR 0 5
50356: PPUSH
50357: CALL_OW 118
// end ;
50361: LD_VAR 0 3
50365: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50366: LD_INT 0
50368: PPUSH
50369: PPUSH
// result := false ;
50370: LD_ADDR_VAR 0 3
50374: PUSH
50375: LD_INT 0
50377: ST_TO_ADDR
// if not units then
50378: LD_VAR 0 2
50382: NOT
50383: IFFALSE 50387
// exit ;
50385: GO 50432
// for i in units do
50387: LD_ADDR_VAR 0 4
50391: PUSH
50392: LD_VAR 0 2
50396: PUSH
50397: FOR_IN
50398: IFFALSE 50430
// if See ( side , i ) then
50400: LD_VAR 0 1
50404: PPUSH
50405: LD_VAR 0 4
50409: PPUSH
50410: CALL_OW 292
50414: IFFALSE 50428
// begin result := true ;
50416: LD_ADDR_VAR 0 3
50420: PUSH
50421: LD_INT 1
50423: ST_TO_ADDR
// exit ;
50424: POP
50425: POP
50426: GO 50432
// end ;
50428: GO 50397
50430: POP
50431: POP
// end ;
50432: LD_VAR 0 3
50436: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50437: LD_INT 0
50439: PPUSH
50440: PPUSH
50441: PPUSH
50442: PPUSH
// if not unit or not points then
50443: LD_VAR 0 1
50447: NOT
50448: PUSH
50449: LD_VAR 0 2
50453: NOT
50454: OR
50455: IFFALSE 50459
// exit ;
50457: GO 50549
// dist := 99999 ;
50459: LD_ADDR_VAR 0 5
50463: PUSH
50464: LD_INT 99999
50466: ST_TO_ADDR
// for i in points do
50467: LD_ADDR_VAR 0 4
50471: PUSH
50472: LD_VAR 0 2
50476: PUSH
50477: FOR_IN
50478: IFFALSE 50547
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50480: LD_ADDR_VAR 0 6
50484: PUSH
50485: LD_VAR 0 1
50489: PPUSH
50490: LD_VAR 0 4
50494: PUSH
50495: LD_INT 1
50497: ARRAY
50498: PPUSH
50499: LD_VAR 0 4
50503: PUSH
50504: LD_INT 2
50506: ARRAY
50507: PPUSH
50508: CALL_OW 297
50512: ST_TO_ADDR
// if tmpDist < dist then
50513: LD_VAR 0 6
50517: PUSH
50518: LD_VAR 0 5
50522: LESS
50523: IFFALSE 50545
// begin result := i ;
50525: LD_ADDR_VAR 0 3
50529: PUSH
50530: LD_VAR 0 4
50534: ST_TO_ADDR
// dist := tmpDist ;
50535: LD_ADDR_VAR 0 5
50539: PUSH
50540: LD_VAR 0 6
50544: ST_TO_ADDR
// end ; end ;
50545: GO 50477
50547: POP
50548: POP
// end ;
50549: LD_VAR 0 3
50553: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50554: LD_INT 0
50556: PPUSH
// uc_side := side ;
50557: LD_ADDR_OWVAR 20
50561: PUSH
50562: LD_VAR 0 1
50566: ST_TO_ADDR
// uc_nation := 3 ;
50567: LD_ADDR_OWVAR 21
50571: PUSH
50572: LD_INT 3
50574: ST_TO_ADDR
// vc_chassis := 25 ;
50575: LD_ADDR_OWVAR 37
50579: PUSH
50580: LD_INT 25
50582: ST_TO_ADDR
// vc_engine := engine_siberite ;
50583: LD_ADDR_OWVAR 39
50587: PUSH
50588: LD_INT 3
50590: ST_TO_ADDR
// vc_control := control_computer ;
50591: LD_ADDR_OWVAR 38
50595: PUSH
50596: LD_INT 3
50598: ST_TO_ADDR
// vc_weapon := 59 ;
50599: LD_ADDR_OWVAR 40
50603: PUSH
50604: LD_INT 59
50606: ST_TO_ADDR
// result := CreateVehicle ;
50607: LD_ADDR_VAR 0 5
50611: PUSH
50612: CALL_OW 45
50616: ST_TO_ADDR
// SetDir ( result , d ) ;
50617: LD_VAR 0 5
50621: PPUSH
50622: LD_VAR 0 4
50626: PPUSH
50627: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50631: LD_VAR 0 5
50635: PPUSH
50636: LD_VAR 0 2
50640: PPUSH
50641: LD_VAR 0 3
50645: PPUSH
50646: LD_INT 0
50648: PPUSH
50649: CALL_OW 48
// end ;
50653: LD_VAR 0 5
50657: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50658: LD_INT 0
50660: PPUSH
50661: PPUSH
50662: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50663: LD_ADDR_VAR 0 2
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50686: LD_VAR 0 1
50690: NOT
50691: PUSH
50692: LD_VAR 0 1
50696: PPUSH
50697: CALL_OW 264
50701: PUSH
50702: LD_INT 12
50704: PUSH
50705: LD_INT 51
50707: PUSH
50708: LD_INT 32
50710: PUSH
50711: LD_INT 89
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: IN
50720: NOT
50721: OR
50722: IFFALSE 50726
// exit ;
50724: GO 50824
// for i := 1 to 3 do
50726: LD_ADDR_VAR 0 3
50730: PUSH
50731: DOUBLE
50732: LD_INT 1
50734: DEC
50735: ST_TO_ADDR
50736: LD_INT 3
50738: PUSH
50739: FOR_TO
50740: IFFALSE 50822
// begin tmp := GetCargo ( cargo , i ) ;
50742: LD_ADDR_VAR 0 4
50746: PUSH
50747: LD_VAR 0 1
50751: PPUSH
50752: LD_VAR 0 3
50756: PPUSH
50757: CALL_OW 289
50761: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50762: LD_ADDR_VAR 0 2
50766: PUSH
50767: LD_VAR 0 2
50771: PPUSH
50772: LD_VAR 0 3
50776: PPUSH
50777: LD_VAR 0 4
50781: PPUSH
50782: CALL_OW 1
50786: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50787: LD_ADDR_VAR 0 2
50791: PUSH
50792: LD_VAR 0 2
50796: PPUSH
50797: LD_INT 4
50799: PPUSH
50800: LD_VAR 0 2
50804: PUSH
50805: LD_INT 4
50807: ARRAY
50808: PUSH
50809: LD_VAR 0 4
50813: PLUS
50814: PPUSH
50815: CALL_OW 1
50819: ST_TO_ADDR
// end ;
50820: GO 50739
50822: POP
50823: POP
// end ;
50824: LD_VAR 0 2
50828: RET
// export function Length ( array ) ; begin
50829: LD_INT 0
50831: PPUSH
// result := array + 0 ;
50832: LD_ADDR_VAR 0 2
50836: PUSH
50837: LD_VAR 0 1
50841: PUSH
50842: LD_INT 0
50844: PLUS
50845: ST_TO_ADDR
// end ;
50846: LD_VAR 0 2
50850: RET
// export function PrepareArray ( array ) ; begin
50851: LD_INT 0
50853: PPUSH
// result := array diff 0 ;
50854: LD_ADDR_VAR 0 2
50858: PUSH
50859: LD_VAR 0 1
50863: PUSH
50864: LD_INT 0
50866: DIFF
50867: ST_TO_ADDR
// if not result [ 1 ] then
50868: LD_VAR 0 2
50872: PUSH
50873: LD_INT 1
50875: ARRAY
50876: NOT
50877: IFFALSE 50897
// result := Delete ( result , 1 ) ;
50879: LD_ADDR_VAR 0 2
50883: PUSH
50884: LD_VAR 0 2
50888: PPUSH
50889: LD_INT 1
50891: PPUSH
50892: CALL_OW 3
50896: ST_TO_ADDR
// end ;
50897: LD_VAR 0 2
50901: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50902: LD_INT 0
50904: PPUSH
50905: PPUSH
50906: PPUSH
50907: PPUSH
// sibRocketRange := 25 ;
50908: LD_ADDR_VAR 0 6
50912: PUSH
50913: LD_INT 25
50915: ST_TO_ADDR
// result := false ;
50916: LD_ADDR_VAR 0 4
50920: PUSH
50921: LD_INT 0
50923: ST_TO_ADDR
// for i := 0 to 5 do
50924: LD_ADDR_VAR 0 5
50928: PUSH
50929: DOUBLE
50930: LD_INT 0
50932: DEC
50933: ST_TO_ADDR
50934: LD_INT 5
50936: PUSH
50937: FOR_TO
50938: IFFALSE 51005
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50940: LD_VAR 0 1
50944: PPUSH
50945: LD_VAR 0 5
50949: PPUSH
50950: LD_VAR 0 6
50954: PPUSH
50955: CALL_OW 272
50959: PPUSH
50960: LD_VAR 0 2
50964: PPUSH
50965: LD_VAR 0 5
50969: PPUSH
50970: LD_VAR 0 6
50974: PPUSH
50975: CALL_OW 273
50979: PPUSH
50980: LD_VAR 0 3
50984: PPUSH
50985: CALL_OW 309
50989: IFFALSE 51003
// begin result := true ;
50991: LD_ADDR_VAR 0 4
50995: PUSH
50996: LD_INT 1
50998: ST_TO_ADDR
// exit ;
50999: POP
51000: POP
51001: GO 51007
// end ;
51003: GO 50937
51005: POP
51006: POP
// end ;
51007: LD_VAR 0 4
51011: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51012: LD_INT 0
51014: PPUSH
51015: PPUSH
51016: PPUSH
// if btype = b_depot then
51017: LD_VAR 0 2
51021: PUSH
51022: LD_INT 0
51024: EQUAL
51025: IFFALSE 51037
// begin result := true ;
51027: LD_ADDR_VAR 0 3
51031: PUSH
51032: LD_INT 1
51034: ST_TO_ADDR
// exit ;
51035: GO 51153
// end ; pom := GetBase ( depot ) ;
51037: LD_ADDR_VAR 0 4
51041: PUSH
51042: LD_VAR 0 1
51046: PPUSH
51047: CALL_OW 274
51051: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51052: LD_ADDR_VAR 0 5
51056: PUSH
51057: LD_VAR 0 2
51061: PPUSH
51062: LD_VAR 0 1
51066: PPUSH
51067: CALL_OW 248
51071: PPUSH
51072: CALL_OW 450
51076: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51077: LD_ADDR_VAR 0 3
51081: PUSH
51082: LD_VAR 0 4
51086: PPUSH
51087: LD_INT 1
51089: PPUSH
51090: CALL_OW 275
51094: PUSH
51095: LD_VAR 0 5
51099: PUSH
51100: LD_INT 1
51102: ARRAY
51103: GREATEREQUAL
51104: PUSH
51105: LD_VAR 0 4
51109: PPUSH
51110: LD_INT 2
51112: PPUSH
51113: CALL_OW 275
51117: PUSH
51118: LD_VAR 0 5
51122: PUSH
51123: LD_INT 2
51125: ARRAY
51126: GREATEREQUAL
51127: AND
51128: PUSH
51129: LD_VAR 0 4
51133: PPUSH
51134: LD_INT 3
51136: PPUSH
51137: CALL_OW 275
51141: PUSH
51142: LD_VAR 0 5
51146: PUSH
51147: LD_INT 3
51149: ARRAY
51150: GREATEREQUAL
51151: AND
51152: ST_TO_ADDR
// end ;
51153: LD_VAR 0 3
51157: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51158: LD_INT 0
51160: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51161: LD_VAR 0 1
51165: PPUSH
51166: LD_VAR 0 2
51170: PPUSH
51171: LD_INT 0
51173: PPUSH
51174: LD_INT 0
51176: PPUSH
51177: LD_INT 1
51179: PPUSH
51180: LD_INT 0
51182: PPUSH
51183: CALL_OW 587
// end ;
51187: LD_VAR 0 3
51191: RET
// export function CenterOnNow ( unit ) ; begin
51192: LD_INT 0
51194: PPUSH
// result := IsInUnit ( unit ) ;
51195: LD_ADDR_VAR 0 2
51199: PUSH
51200: LD_VAR 0 1
51204: PPUSH
51205: CALL_OW 310
51209: ST_TO_ADDR
// if not result then
51210: LD_VAR 0 2
51214: NOT
51215: IFFALSE 51227
// result := unit ;
51217: LD_ADDR_VAR 0 2
51221: PUSH
51222: LD_VAR 0 1
51226: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51227: LD_VAR 0 1
51231: PPUSH
51232: CALL_OW 87
// end ;
51236: LD_VAR 0 2
51240: RET
// export function ComMoveHex ( unit , hex ) ; begin
51241: LD_INT 0
51243: PPUSH
// if not hex then
51244: LD_VAR 0 2
51248: NOT
51249: IFFALSE 51253
// exit ;
51251: GO 51306
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51253: LD_VAR 0 2
51257: PUSH
51258: LD_INT 1
51260: ARRAY
51261: PPUSH
51262: LD_VAR 0 2
51266: PUSH
51267: LD_INT 2
51269: ARRAY
51270: PPUSH
51271: CALL_OW 428
51275: IFFALSE 51279
// exit ;
51277: GO 51306
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51279: LD_VAR 0 1
51283: PPUSH
51284: LD_VAR 0 2
51288: PUSH
51289: LD_INT 1
51291: ARRAY
51292: PPUSH
51293: LD_VAR 0 2
51297: PUSH
51298: LD_INT 2
51300: ARRAY
51301: PPUSH
51302: CALL_OW 111
// end ;
51306: LD_VAR 0 3
51310: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51311: LD_INT 0
51313: PPUSH
51314: PPUSH
51315: PPUSH
// if not unit or not enemy then
51316: LD_VAR 0 1
51320: NOT
51321: PUSH
51322: LD_VAR 0 2
51326: NOT
51327: OR
51328: IFFALSE 51332
// exit ;
51330: GO 51456
// x := GetX ( enemy ) ;
51332: LD_ADDR_VAR 0 4
51336: PUSH
51337: LD_VAR 0 2
51341: PPUSH
51342: CALL_OW 250
51346: ST_TO_ADDR
// y := GetY ( enemy ) ;
51347: LD_ADDR_VAR 0 5
51351: PUSH
51352: LD_VAR 0 2
51356: PPUSH
51357: CALL_OW 251
51361: ST_TO_ADDR
// if ValidHex ( x , y ) then
51362: LD_VAR 0 4
51366: PPUSH
51367: LD_VAR 0 5
51371: PPUSH
51372: CALL_OW 488
51376: IFFALSE 51456
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51378: LD_VAR 0 2
51382: PPUSH
51383: CALL_OW 247
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: IN
51398: PUSH
51399: LD_VAR 0 1
51403: PPUSH
51404: CALL_OW 255
51408: PPUSH
51409: LD_VAR 0 2
51413: PPUSH
51414: CALL_OW 292
51418: OR
51419: IFFALSE 51437
// ComAttackUnit ( unit , enemy ) else
51421: LD_VAR 0 1
51425: PPUSH
51426: LD_VAR 0 2
51430: PPUSH
51431: CALL_OW 115
51435: GO 51456
// ComAgressiveMove ( unit , x , y ) ;
51437: LD_VAR 0 1
51441: PPUSH
51442: LD_VAR 0 4
51446: PPUSH
51447: LD_VAR 0 5
51451: PPUSH
51452: CALL_OW 114
// end ;
51456: LD_VAR 0 3
51460: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51461: LD_INT 0
51463: PPUSH
51464: PPUSH
51465: PPUSH
// list := AreaToList ( area , 0 ) ;
51466: LD_ADDR_VAR 0 5
51470: PUSH
51471: LD_VAR 0 1
51475: PPUSH
51476: LD_INT 0
51478: PPUSH
51479: CALL_OW 517
51483: ST_TO_ADDR
// if not list then
51484: LD_VAR 0 5
51488: NOT
51489: IFFALSE 51493
// exit ;
51491: GO 51623
// if all then
51493: LD_VAR 0 2
51497: IFFALSE 51585
// begin for i := 1 to list [ 1 ] do
51499: LD_ADDR_VAR 0 4
51503: PUSH
51504: DOUBLE
51505: LD_INT 1
51507: DEC
51508: ST_TO_ADDR
51509: LD_VAR 0 5
51513: PUSH
51514: LD_INT 1
51516: ARRAY
51517: PUSH
51518: FOR_TO
51519: IFFALSE 51581
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51521: LD_ADDR_VAR 0 3
51525: PUSH
51526: LD_VAR 0 3
51530: PPUSH
51531: LD_VAR 0 3
51535: PUSH
51536: LD_INT 1
51538: PLUS
51539: PPUSH
51540: LD_VAR 0 5
51544: PUSH
51545: LD_INT 1
51547: ARRAY
51548: PUSH
51549: LD_VAR 0 4
51553: ARRAY
51554: PUSH
51555: LD_VAR 0 5
51559: PUSH
51560: LD_INT 2
51562: ARRAY
51563: PUSH
51564: LD_VAR 0 4
51568: ARRAY
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PPUSH
51574: CALL_OW 1
51578: ST_TO_ADDR
51579: GO 51518
51581: POP
51582: POP
// exit ;
51583: GO 51623
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51585: LD_ADDR_VAR 0 3
51589: PUSH
51590: LD_VAR 0 5
51594: PUSH
51595: LD_INT 1
51597: ARRAY
51598: PUSH
51599: LD_INT 1
51601: ARRAY
51602: PUSH
51603: LD_VAR 0 5
51607: PUSH
51608: LD_INT 2
51610: ARRAY
51611: PUSH
51612: LD_INT 1
51614: ARRAY
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: EMPTY
51621: LIST
51622: ST_TO_ADDR
// end ;
51623: LD_VAR 0 3
51627: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51628: LD_INT 0
51630: PPUSH
51631: PPUSH
// list := AreaToList ( area , 0 ) ;
51632: LD_ADDR_VAR 0 4
51636: PUSH
51637: LD_VAR 0 1
51641: PPUSH
51642: LD_INT 0
51644: PPUSH
51645: CALL_OW 517
51649: ST_TO_ADDR
// if not list then
51650: LD_VAR 0 4
51654: NOT
51655: IFFALSE 51659
// exit ;
51657: GO 51700
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51659: LD_ADDR_VAR 0 3
51663: PUSH
51664: LD_VAR 0 4
51668: PUSH
51669: LD_INT 1
51671: ARRAY
51672: PUSH
51673: LD_INT 1
51675: ARRAY
51676: PUSH
51677: LD_VAR 0 4
51681: PUSH
51682: LD_INT 2
51684: ARRAY
51685: PUSH
51686: LD_INT 1
51688: ARRAY
51689: PUSH
51690: LD_VAR 0 2
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: LIST
51699: ST_TO_ADDR
// end ;
51700: LD_VAR 0 3
51704: RET
// export function First ( array ) ; begin
51705: LD_INT 0
51707: PPUSH
// if not array then
51708: LD_VAR 0 1
51712: NOT
51713: IFFALSE 51717
// exit ;
51715: GO 51731
// result := array [ 1 ] ;
51717: LD_ADDR_VAR 0 2
51721: PUSH
51722: LD_VAR 0 1
51726: PUSH
51727: LD_INT 1
51729: ARRAY
51730: ST_TO_ADDR
// end ;
51731: LD_VAR 0 2
51735: RET
// export function Last ( array ) ; begin
51736: LD_INT 0
51738: PPUSH
// if not array then
51739: LD_VAR 0 1
51743: NOT
51744: IFFALSE 51748
// exit ;
51746: GO 51764
// result := array [ array ] ;
51748: LD_ADDR_VAR 0 2
51752: PUSH
51753: LD_VAR 0 1
51757: PUSH
51758: LD_VAR 0 1
51762: ARRAY
51763: ST_TO_ADDR
// end ;
51764: LD_VAR 0 2
51768: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51769: LD_INT 0
51771: PPUSH
51772: PPUSH
// result := [ ] ;
51773: LD_ADDR_VAR 0 5
51777: PUSH
51778: EMPTY
51779: ST_TO_ADDR
// if not array then
51780: LD_VAR 0 1
51784: NOT
51785: IFFALSE 51789
// exit ;
51787: GO 51901
// for i := 1 to array do
51789: LD_ADDR_VAR 0 6
51793: PUSH
51794: DOUBLE
51795: LD_INT 1
51797: DEC
51798: ST_TO_ADDR
51799: LD_VAR 0 1
51803: PUSH
51804: FOR_TO
51805: IFFALSE 51899
// if array [ i ] [ index ] = value then
51807: LD_VAR 0 1
51811: PUSH
51812: LD_VAR 0 6
51816: ARRAY
51817: PUSH
51818: LD_VAR 0 2
51822: ARRAY
51823: PUSH
51824: LD_VAR 0 3
51828: EQUAL
51829: IFFALSE 51897
// begin if indexColumn then
51831: LD_VAR 0 4
51835: IFFALSE 51871
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51837: LD_ADDR_VAR 0 5
51841: PUSH
51842: LD_VAR 0 5
51846: PPUSH
51847: LD_VAR 0 1
51851: PUSH
51852: LD_VAR 0 6
51856: ARRAY
51857: PUSH
51858: LD_VAR 0 4
51862: ARRAY
51863: PPUSH
51864: CALL 47083 0 2
51868: ST_TO_ADDR
51869: GO 51897
// result := Join ( result , array [ i ] ) ;
51871: LD_ADDR_VAR 0 5
51875: PUSH
51876: LD_VAR 0 5
51880: PPUSH
51881: LD_VAR 0 1
51885: PUSH
51886: LD_VAR 0 6
51890: ARRAY
51891: PPUSH
51892: CALL 47083 0 2
51896: ST_TO_ADDR
// end ;
51897: GO 51804
51899: POP
51900: POP
// end ;
51901: LD_VAR 0 5
51905: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51906: LD_INT 0
51908: PPUSH
// if not vehicles or not parkingPoint then
51909: LD_VAR 0 1
51913: NOT
51914: PUSH
51915: LD_VAR 0 2
51919: NOT
51920: OR
51921: IFFALSE 51925
// exit ;
51923: GO 52023
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51925: LD_ADDR_VAR 0 1
51929: PUSH
51930: LD_VAR 0 1
51934: PPUSH
51935: LD_INT 50
51937: PUSH
51938: EMPTY
51939: LIST
51940: PUSH
51941: LD_INT 3
51943: PUSH
51944: LD_INT 92
51946: PUSH
51947: LD_VAR 0 2
51951: PUSH
51952: LD_INT 1
51954: ARRAY
51955: PUSH
51956: LD_VAR 0 2
51960: PUSH
51961: LD_INT 2
51963: ARRAY
51964: PUSH
51965: LD_INT 8
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PPUSH
51982: CALL_OW 72
51986: ST_TO_ADDR
// if not vehicles then
51987: LD_VAR 0 1
51991: NOT
51992: IFFALSE 51996
// exit ;
51994: GO 52023
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51996: LD_VAR 0 1
52000: PPUSH
52001: LD_VAR 0 2
52005: PUSH
52006: LD_INT 1
52008: ARRAY
52009: PPUSH
52010: LD_VAR 0 2
52014: PUSH
52015: LD_INT 2
52017: ARRAY
52018: PPUSH
52019: CALL_OW 111
// end ;
52023: LD_VAR 0 3
52027: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52028: LD_INT 0
52030: PPUSH
52031: PPUSH
52032: PPUSH
// if not side or not area then
52033: LD_VAR 0 1
52037: NOT
52038: PUSH
52039: LD_VAR 0 2
52043: NOT
52044: OR
52045: IFFALSE 52049
// exit ;
52047: GO 52168
// tmp := AreaToList ( area , 0 ) ;
52049: LD_ADDR_VAR 0 5
52053: PUSH
52054: LD_VAR 0 2
52058: PPUSH
52059: LD_INT 0
52061: PPUSH
52062: CALL_OW 517
52066: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52067: LD_ADDR_VAR 0 4
52071: PUSH
52072: DOUBLE
52073: LD_INT 1
52075: DEC
52076: ST_TO_ADDR
52077: LD_VAR 0 5
52081: PUSH
52082: LD_INT 1
52084: ARRAY
52085: PUSH
52086: FOR_TO
52087: IFFALSE 52166
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52089: LD_VAR 0 5
52093: PUSH
52094: LD_INT 1
52096: ARRAY
52097: PUSH
52098: LD_VAR 0 4
52102: ARRAY
52103: PPUSH
52104: LD_VAR 0 5
52108: PUSH
52109: LD_INT 2
52111: ARRAY
52112: PUSH
52113: LD_VAR 0 4
52117: ARRAY
52118: PPUSH
52119: CALL_OW 351
52123: IFFALSE 52164
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52125: LD_VAR 0 5
52129: PUSH
52130: LD_INT 1
52132: ARRAY
52133: PUSH
52134: LD_VAR 0 4
52138: ARRAY
52139: PPUSH
52140: LD_VAR 0 5
52144: PUSH
52145: LD_INT 2
52147: ARRAY
52148: PUSH
52149: LD_VAR 0 4
52153: ARRAY
52154: PPUSH
52155: LD_VAR 0 1
52159: PPUSH
52160: CALL_OW 244
// end ;
52164: GO 52086
52166: POP
52167: POP
// end ; end_of_file
52168: LD_VAR 0 3
52172: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52173: LD_VAR 0 1
52177: PUSH
52178: LD_INT 200
52180: DOUBLE
52181: GREATEREQUAL
52182: IFFALSE 52190
52184: LD_INT 299
52186: DOUBLE
52187: LESSEQUAL
52188: IFTRUE 52192
52190: GO 52224
52192: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52193: LD_VAR 0 1
52197: PPUSH
52198: LD_VAR 0 2
52202: PPUSH
52203: LD_VAR 0 3
52207: PPUSH
52208: LD_VAR 0 4
52212: PPUSH
52213: LD_VAR 0 5
52217: PPUSH
52218: CALL 53001 0 5
52222: GO 52301
52224: LD_INT 300
52226: DOUBLE
52227: GREATEREQUAL
52228: IFFALSE 52236
52230: LD_INT 399
52232: DOUBLE
52233: LESSEQUAL
52234: IFTRUE 52238
52236: GO 52300
52238: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52239: LD_VAR 0 1
52243: PPUSH
52244: LD_VAR 0 2
52248: PPUSH
52249: LD_VAR 0 3
52253: PPUSH
52254: LD_VAR 0 4
52258: PPUSH
52259: LD_VAR 0 5
52263: PPUSH
52264: LD_VAR 0 6
52268: PPUSH
52269: LD_VAR 0 7
52273: PPUSH
52274: LD_VAR 0 8
52278: PPUSH
52279: LD_VAR 0 9
52283: PPUSH
52284: LD_VAR 0 10
52288: PPUSH
52289: LD_VAR 0 11
52293: PPUSH
52294: CALL 59928 0 11
52298: GO 52301
52300: POP
// end ;
52301: PPOPN 11
52303: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52304: LD_VAR 0 1
52308: PPUSH
52309: LD_VAR 0 2
52313: PPUSH
52314: LD_VAR 0 3
52318: PPUSH
52319: LD_VAR 0 4
52323: PPUSH
52324: LD_VAR 0 5
52328: PPUSH
52329: CALL 52386 0 5
// end ; end_of_file
52333: PPOPN 5
52335: END
// export function SOS_UnitDestroyed ( un ) ; begin
52336: LD_INT 0
52338: PPUSH
// ComRadiation ( un ) ;
52339: LD_VAR 0 1
52343: PPUSH
52344: CALL 53405 0 1
// end ;
52348: LD_VAR 0 2
52352: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52353: LD_INT 0
52355: PPUSH
// ComRadiation ( un ) ;
52356: LD_VAR 0 1
52360: PPUSH
52361: CALL 53405 0 1
// end ;
52365: LD_VAR 0 2
52369: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52370: LD_INT 0
52372: PPUSH
// end ;
52373: LD_VAR 0 4
52377: RET
// export function SOS_Command ( cmd ) ; begin
52378: LD_INT 0
52380: PPUSH
// end ;
52381: LD_VAR 0 2
52385: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52386: LD_INT 0
52388: PPUSH
// end ;
52389: LD_VAR 0 6
52393: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
52394: LD_INT 0
52396: PPUSH
52397: PPUSH
52398: PPUSH
52399: PPUSH
// if not vehicle or not factory then
52400: LD_VAR 0 1
52404: NOT
52405: PUSH
52406: LD_VAR 0 2
52410: NOT
52411: OR
52412: IFFALSE 52416
// exit ;
52414: GO 52996
// if not factoryWaypoints then
52416: LD_EXP 55
52420: NOT
52421: IFFALSE 52425
// exit ;
52423: GO 52996
// for i := 1 to Count ( factoryWaypoints ) do
52425: LD_ADDR_VAR 0 4
52429: PUSH
52430: DOUBLE
52431: LD_INT 1
52433: DEC
52434: ST_TO_ADDR
52435: LD_EXP 55
52439: PPUSH
52440: CALL 11474 0 1
52444: PUSH
52445: FOR_TO
52446: IFFALSE 52994
// if factoryWaypoints [ i ] [ 2 ] = factory then
52448: LD_EXP 55
52452: PUSH
52453: LD_VAR 0 4
52457: ARRAY
52458: PUSH
52459: LD_INT 2
52461: ARRAY
52462: PUSH
52463: LD_VAR 0 2
52467: EQUAL
52468: IFFALSE 52992
// begin if GetControl ( vehicle ) = control_manual then
52470: LD_VAR 0 1
52474: PPUSH
52475: CALL_OW 263
52479: PUSH
52480: LD_INT 1
52482: EQUAL
52483: IFFALSE 52845
// begin driver := IsDrivenBy ( vehicle ) ;
52485: LD_ADDR_VAR 0 5
52489: PUSH
52490: LD_VAR 0 1
52494: PPUSH
52495: CALL_OW 311
52499: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
52500: LD_VAR 0 5
52504: PUSH
52505: LD_EXP 56
52509: IN
52510: PUSH
52511: LD_VAR 0 1
52515: PUSH
52516: LD_EXP 56
52520: IN
52521: OR
52522: IFFALSE 52528
// exit ;
52524: POP
52525: POP
52526: GO 52996
// if not HasTask ( driver ) then
52528: LD_VAR 0 5
52532: PPUSH
52533: CALL_OW 314
52537: NOT
52538: IFFALSE 52843
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
52540: LD_ADDR_EXP 56
52544: PUSH
52545: LD_EXP 56
52549: PPUSH
52550: LD_VAR 0 5
52554: PPUSH
52555: CALL 47083 0 2
52559: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
52560: LD_ADDR_EXP 56
52564: PUSH
52565: LD_EXP 56
52569: PPUSH
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL 47083 0 2
52579: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52580: LD_ADDR_VAR 0 6
52584: PUSH
52585: LD_EXP 55
52589: PUSH
52590: LD_VAR 0 4
52594: ARRAY
52595: PUSH
52596: LD_INT 3
52598: ARRAY
52599: PPUSH
52600: LD_EXP 55
52604: PUSH
52605: LD_VAR 0 4
52609: ARRAY
52610: PUSH
52611: LD_INT 4
52613: ARRAY
52614: PPUSH
52615: CALL_OW 428
52619: ST_TO_ADDR
// if hex then
52620: LD_VAR 0 6
52624: IFFALSE 52642
// ComMoveUnit ( driver , hex ) else
52626: LD_VAR 0 5
52630: PPUSH
52631: LD_VAR 0 6
52635: PPUSH
52636: CALL_OW 112
52640: GO 52726
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
52642: LD_VAR 0 1
52646: PPUSH
52647: LD_EXP 55
52651: PUSH
52652: LD_VAR 0 4
52656: ARRAY
52657: PUSH
52658: LD_INT 3
52660: ARRAY
52661: PPUSH
52662: LD_EXP 55
52666: PUSH
52667: LD_VAR 0 4
52671: ARRAY
52672: PUSH
52673: LD_INT 4
52675: ARRAY
52676: PPUSH
52677: CALL_OW 297
52681: PUSH
52682: LD_INT 0
52684: GREATER
52685: IFFALSE 52726
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52687: LD_VAR 0 5
52691: PPUSH
52692: LD_EXP 55
52696: PUSH
52697: LD_VAR 0 4
52701: ARRAY
52702: PUSH
52703: LD_INT 3
52705: ARRAY
52706: PPUSH
52707: LD_EXP 55
52711: PUSH
52712: LD_VAR 0 4
52716: ARRAY
52717: PUSH
52718: LD_INT 4
52720: ARRAY
52721: PPUSH
52722: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52726: LD_VAR 0 5
52730: PPUSH
52731: CALL_OW 181
// if Multiplayer then
52735: LD_OWVAR 4
52739: IFFALSE 52788
// begin repeat wait ( 10 ) ;
52741: LD_INT 10
52743: PPUSH
52744: CALL_OW 67
// until not IsInUnit ( driver ) ;
52748: LD_VAR 0 5
52752: PPUSH
52753: CALL_OW 310
52757: NOT
52758: IFFALSE 52741
// if not HasTask ( driver ) then
52760: LD_VAR 0 5
52764: PPUSH
52765: CALL_OW 314
52769: NOT
52770: IFFALSE 52786
// ComEnterUnit ( driver , factory ) ;
52772: LD_VAR 0 5
52776: PPUSH
52777: LD_VAR 0 2
52781: PPUSH
52782: CALL_OW 120
// end else
52786: GO 52802
// AddComEnterUnit ( driver , factory ) ;
52788: LD_VAR 0 5
52792: PPUSH
52793: LD_VAR 0 2
52797: PPUSH
52798: CALL_OW 180
// wait ( 0 0$1 ) ;
52802: LD_INT 35
52804: PPUSH
52805: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
52809: LD_ADDR_EXP 56
52813: PUSH
52814: LD_EXP 56
52818: PUSH
52819: LD_VAR 0 5
52823: DIFF
52824: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
52825: LD_ADDR_EXP 56
52829: PUSH
52830: LD_EXP 56
52834: PUSH
52835: LD_VAR 0 1
52839: DIFF
52840: ST_TO_ADDR
// break ;
52841: GO 52994
// end ; end else
52843: GO 52992
// if GetControl ( vehicle ) = control_remote then
52845: LD_VAR 0 1
52849: PPUSH
52850: CALL_OW 263
52854: PUSH
52855: LD_INT 2
52857: EQUAL
52858: IFFALSE 52944
// begin wait ( 0 0$2 ) ;
52860: LD_INT 70
52862: PPUSH
52863: CALL_OW 67
// repeat wait ( 10 ) ;
52867: LD_INT 10
52869: PPUSH
52870: CALL_OW 67
// Connect ( vehicle ) ;
52874: LD_VAR 0 1
52878: PPUSH
52879: CALL 17680 0 1
// until IsControledBy ( vehicle ) ;
52883: LD_VAR 0 1
52887: PPUSH
52888: CALL_OW 312
52892: IFFALSE 52867
// wait ( 10 ) ;
52894: LD_INT 10
52896: PPUSH
52897: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52901: LD_VAR 0 1
52905: PPUSH
52906: LD_EXP 55
52910: PUSH
52911: LD_VAR 0 4
52915: ARRAY
52916: PUSH
52917: LD_INT 3
52919: ARRAY
52920: PPUSH
52921: LD_EXP 55
52925: PUSH
52926: LD_VAR 0 4
52930: ARRAY
52931: PUSH
52932: LD_INT 4
52934: ARRAY
52935: PPUSH
52936: CALL_OW 111
// break ;
52940: GO 52994
// end else
52942: GO 52992
// begin wait ( 0 0$3 ) ;
52944: LD_INT 105
52946: PPUSH
52947: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52951: LD_VAR 0 1
52955: PPUSH
52956: LD_EXP 55
52960: PUSH
52961: LD_VAR 0 4
52965: ARRAY
52966: PUSH
52967: LD_INT 3
52969: ARRAY
52970: PPUSH
52971: LD_EXP 55
52975: PUSH
52976: LD_VAR 0 4
52980: ARRAY
52981: PUSH
52982: LD_INT 4
52984: ARRAY
52985: PPUSH
52986: CALL_OW 111
// break ;
52990: GO 52994
// end ; end ;
52992: GO 52445
52994: POP
52995: POP
// end ;
52996: LD_VAR 0 3
53000: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
53001: LD_INT 0
53003: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
53004: LD_VAR 0 1
53008: PUSH
53009: LD_INT 250
53011: EQUAL
53012: PUSH
53013: LD_VAR 0 2
53017: PPUSH
53018: CALL_OW 264
53022: PUSH
53023: LD_INT 81
53025: EQUAL
53026: AND
53027: IFFALSE 53048
// MinerPlaceMine ( unit , x , y ) ;
53029: LD_VAR 0 2
53033: PPUSH
53034: LD_VAR 0 4
53038: PPUSH
53039: LD_VAR 0 5
53043: PPUSH
53044: CALL 56140 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53048: LD_VAR 0 1
53052: PUSH
53053: LD_INT 251
53055: EQUAL
53056: PUSH
53057: LD_VAR 0 2
53061: PPUSH
53062: CALL_OW 264
53066: PUSH
53067: LD_INT 81
53069: EQUAL
53070: AND
53071: IFFALSE 53092
// MinerDetonateMine ( unit , x , y ) ;
53073: LD_VAR 0 2
53077: PPUSH
53078: LD_VAR 0 4
53082: PPUSH
53083: LD_VAR 0 5
53087: PPUSH
53088: CALL 56415 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53092: LD_VAR 0 1
53096: PUSH
53097: LD_INT 252
53099: EQUAL
53100: PUSH
53101: LD_VAR 0 2
53105: PPUSH
53106: CALL_OW 264
53110: PUSH
53111: LD_INT 81
53113: EQUAL
53114: AND
53115: IFFALSE 53136
// MinerCreateMinefield ( unit , x , y ) ;
53117: LD_VAR 0 2
53121: PPUSH
53122: LD_VAR 0 4
53126: PPUSH
53127: LD_VAR 0 5
53131: PPUSH
53132: CALL 56832 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53136: LD_VAR 0 1
53140: PUSH
53141: LD_INT 253
53143: EQUAL
53144: PUSH
53145: LD_VAR 0 2
53149: PPUSH
53150: CALL_OW 257
53154: PUSH
53155: LD_INT 5
53157: EQUAL
53158: AND
53159: IFFALSE 53180
// ComBinocular ( unit , x , y ) ;
53161: LD_VAR 0 2
53165: PPUSH
53166: LD_VAR 0 4
53170: PPUSH
53171: LD_VAR 0 5
53175: PPUSH
53176: CALL 57201 0 3
// if selectedUnit then
53180: LD_VAR 0 3
53184: IFFALSE 53240
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53186: LD_VAR 0 1
53190: PUSH
53191: LD_INT 254
53193: EQUAL
53194: PUSH
53195: LD_VAR 0 2
53199: PPUSH
53200: CALL_OW 264
53204: PUSH
53205: LD_INT 99
53207: EQUAL
53208: AND
53209: PUSH
53210: LD_VAR 0 3
53214: PPUSH
53215: CALL_OW 263
53219: PUSH
53220: LD_INT 3
53222: EQUAL
53223: AND
53224: IFFALSE 53240
// HackDestroyVehicle ( unit , selectedUnit ) ;
53226: LD_VAR 0 2
53230: PPUSH
53231: LD_VAR 0 3
53235: PPUSH
53236: CALL 55504 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53240: LD_VAR 0 1
53244: PUSH
53245: LD_INT 255
53247: EQUAL
53248: PUSH
53249: LD_VAR 0 2
53253: PPUSH
53254: CALL_OW 264
53258: PUSH
53259: LD_INT 14
53261: PUSH
53262: LD_INT 53
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: IN
53269: AND
53270: PUSH
53271: LD_VAR 0 4
53275: PPUSH
53276: LD_VAR 0 5
53280: PPUSH
53281: CALL_OW 488
53285: AND
53286: IFFALSE 53310
// CutTreeXYR ( unit , x , y , 12 ) ;
53288: LD_VAR 0 2
53292: PPUSH
53293: LD_VAR 0 4
53297: PPUSH
53298: LD_VAR 0 5
53302: PPUSH
53303: LD_INT 12
53305: PPUSH
53306: CALL 53501 0 4
// if cmd = 256 then
53310: LD_VAR 0 1
53314: PUSH
53315: LD_INT 256
53317: EQUAL
53318: IFFALSE 53339
// SetFactoryWaypoint ( unit , x , y ) ;
53320: LD_VAR 0 2
53324: PPUSH
53325: LD_VAR 0 4
53329: PPUSH
53330: LD_VAR 0 5
53334: PPUSH
53335: CALL 59936 0 3
// if cmd = 257 then
53339: LD_VAR 0 1
53343: PUSH
53344: LD_INT 257
53346: EQUAL
53347: IFFALSE 53368
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53349: LD_VAR 0 2
53353: PPUSH
53354: LD_VAR 0 4
53358: PPUSH
53359: LD_VAR 0 5
53363: PPUSH
53364: CALL 60426 0 3
// if cmd = 258 then
53368: LD_VAR 0 1
53372: PUSH
53373: LD_INT 258
53375: EQUAL
53376: IFFALSE 53400
// BurnTreeXYR ( unit , x , y , 8 ) ;
53378: LD_VAR 0 2
53382: PPUSH
53383: LD_VAR 0 4
53387: PPUSH
53388: LD_VAR 0 5
53392: PPUSH
53393: LD_INT 8
53395: PPUSH
53396: CALL 53895 0 4
// end ;
53400: LD_VAR 0 6
53404: RET
// export function ComRadiation ( un ) ; var eff ; begin
53405: LD_INT 0
53407: PPUSH
53408: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53409: LD_VAR 0 1
53413: PPUSH
53414: CALL_OW 264
53418: PUSH
53419: LD_INT 91
53421: NONEQUAL
53422: IFFALSE 53426
// exit ;
53424: GO 53496
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53426: LD_INT 68
53428: PPUSH
53429: LD_VAR 0 1
53433: PPUSH
53434: CALL_OW 255
53438: PPUSH
53439: CALL_OW 321
53443: PUSH
53444: LD_INT 2
53446: EQUAL
53447: IFFALSE 53459
// eff := 50 else
53449: LD_ADDR_VAR 0 3
53453: PUSH
53454: LD_INT 50
53456: ST_TO_ADDR
53457: GO 53467
// eff := 25 ;
53459: LD_ADDR_VAR 0 3
53463: PUSH
53464: LD_INT 25
53466: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53467: LD_VAR 0 1
53471: PPUSH
53472: CALL_OW 250
53476: PPUSH
53477: LD_VAR 0 1
53481: PPUSH
53482: CALL_OW 251
53486: PPUSH
53487: LD_VAR 0 3
53491: PPUSH
53492: CALL_OW 495
// end ;
53496: LD_VAR 0 2
53500: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53501: LD_INT 0
53503: PPUSH
53504: PPUSH
53505: PPUSH
53506: PPUSH
53507: PPUSH
53508: PPUSH
53509: PPUSH
53510: PPUSH
53511: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53512: LD_VAR 0 1
53516: PPUSH
53517: CALL_OW 302
53521: NOT
53522: PUSH
53523: LD_VAR 0 2
53527: PPUSH
53528: LD_VAR 0 3
53532: PPUSH
53533: CALL_OW 488
53537: NOT
53538: OR
53539: PUSH
53540: LD_VAR 0 4
53544: NOT
53545: OR
53546: IFFALSE 53550
// exit ;
53548: GO 53890
// list := [ ] ;
53550: LD_ADDR_VAR 0 13
53554: PUSH
53555: EMPTY
53556: ST_TO_ADDR
// if x - r < 0 then
53557: LD_VAR 0 2
53561: PUSH
53562: LD_VAR 0 4
53566: MINUS
53567: PUSH
53568: LD_INT 0
53570: LESS
53571: IFFALSE 53583
// min_x := 0 else
53573: LD_ADDR_VAR 0 7
53577: PUSH
53578: LD_INT 0
53580: ST_TO_ADDR
53581: GO 53599
// min_x := x - r ;
53583: LD_ADDR_VAR 0 7
53587: PUSH
53588: LD_VAR 0 2
53592: PUSH
53593: LD_VAR 0 4
53597: MINUS
53598: ST_TO_ADDR
// if y - r < 0 then
53599: LD_VAR 0 3
53603: PUSH
53604: LD_VAR 0 4
53608: MINUS
53609: PUSH
53610: LD_INT 0
53612: LESS
53613: IFFALSE 53625
// min_y := 0 else
53615: LD_ADDR_VAR 0 8
53619: PUSH
53620: LD_INT 0
53622: ST_TO_ADDR
53623: GO 53641
// min_y := y - r ;
53625: LD_ADDR_VAR 0 8
53629: PUSH
53630: LD_VAR 0 3
53634: PUSH
53635: LD_VAR 0 4
53639: MINUS
53640: ST_TO_ADDR
// max_x := x + r ;
53641: LD_ADDR_VAR 0 9
53645: PUSH
53646: LD_VAR 0 2
53650: PUSH
53651: LD_VAR 0 4
53655: PLUS
53656: ST_TO_ADDR
// max_y := y + r ;
53657: LD_ADDR_VAR 0 10
53661: PUSH
53662: LD_VAR 0 3
53666: PUSH
53667: LD_VAR 0 4
53671: PLUS
53672: ST_TO_ADDR
// for _x = min_x to max_x do
53673: LD_ADDR_VAR 0 11
53677: PUSH
53678: DOUBLE
53679: LD_VAR 0 7
53683: DEC
53684: ST_TO_ADDR
53685: LD_VAR 0 9
53689: PUSH
53690: FOR_TO
53691: IFFALSE 53808
// for _y = min_y to max_y do
53693: LD_ADDR_VAR 0 12
53697: PUSH
53698: DOUBLE
53699: LD_VAR 0 8
53703: DEC
53704: ST_TO_ADDR
53705: LD_VAR 0 10
53709: PUSH
53710: FOR_TO
53711: IFFALSE 53804
// begin if not ValidHex ( _x , _y ) then
53713: LD_VAR 0 11
53717: PPUSH
53718: LD_VAR 0 12
53722: PPUSH
53723: CALL_OW 488
53727: NOT
53728: IFFALSE 53732
// continue ;
53730: GO 53710
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53732: LD_VAR 0 11
53736: PPUSH
53737: LD_VAR 0 12
53741: PPUSH
53742: CALL_OW 351
53746: PUSH
53747: LD_VAR 0 11
53751: PPUSH
53752: LD_VAR 0 12
53756: PPUSH
53757: CALL_OW 554
53761: AND
53762: IFFALSE 53802
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53764: LD_ADDR_VAR 0 13
53768: PUSH
53769: LD_VAR 0 13
53773: PPUSH
53774: LD_VAR 0 13
53778: PUSH
53779: LD_INT 1
53781: PLUS
53782: PPUSH
53783: LD_VAR 0 11
53787: PUSH
53788: LD_VAR 0 12
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PPUSH
53797: CALL_OW 2
53801: ST_TO_ADDR
// end ;
53802: GO 53710
53804: POP
53805: POP
53806: GO 53690
53808: POP
53809: POP
// if not list then
53810: LD_VAR 0 13
53814: NOT
53815: IFFALSE 53819
// exit ;
53817: GO 53890
// for i in list do
53819: LD_ADDR_VAR 0 6
53823: PUSH
53824: LD_VAR 0 13
53828: PUSH
53829: FOR_IN
53830: IFFALSE 53888
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53832: LD_VAR 0 1
53836: PPUSH
53837: LD_STRING M
53839: PUSH
53840: LD_VAR 0 6
53844: PUSH
53845: LD_INT 1
53847: ARRAY
53848: PUSH
53849: LD_VAR 0 6
53853: PUSH
53854: LD_INT 2
53856: ARRAY
53857: PUSH
53858: LD_INT 0
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: PPUSH
53882: CALL_OW 447
53886: GO 53829
53888: POP
53889: POP
// end ;
53890: LD_VAR 0 5
53894: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53895: LD_INT 0
53897: PPUSH
53898: PPUSH
53899: PPUSH
53900: PPUSH
53901: PPUSH
53902: PPUSH
53903: PPUSH
53904: PPUSH
53905: PPUSH
53906: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53907: LD_VAR 0 1
53911: PPUSH
53912: CALL_OW 302
53916: NOT
53917: PUSH
53918: LD_VAR 0 2
53922: PPUSH
53923: LD_VAR 0 3
53927: PPUSH
53928: CALL_OW 488
53932: NOT
53933: OR
53934: PUSH
53935: LD_VAR 0 4
53939: NOT
53940: OR
53941: IFFALSE 53945
// exit ;
53943: GO 54458
// list := [ ] ;
53945: LD_ADDR_VAR 0 13
53949: PUSH
53950: EMPTY
53951: ST_TO_ADDR
// if x - r < 0 then
53952: LD_VAR 0 2
53956: PUSH
53957: LD_VAR 0 4
53961: MINUS
53962: PUSH
53963: LD_INT 0
53965: LESS
53966: IFFALSE 53978
// min_x := 0 else
53968: LD_ADDR_VAR 0 7
53972: PUSH
53973: LD_INT 0
53975: ST_TO_ADDR
53976: GO 53994
// min_x := x - r ;
53978: LD_ADDR_VAR 0 7
53982: PUSH
53983: LD_VAR 0 2
53987: PUSH
53988: LD_VAR 0 4
53992: MINUS
53993: ST_TO_ADDR
// if y - r < 0 then
53994: LD_VAR 0 3
53998: PUSH
53999: LD_VAR 0 4
54003: MINUS
54004: PUSH
54005: LD_INT 0
54007: LESS
54008: IFFALSE 54020
// min_y := 0 else
54010: LD_ADDR_VAR 0 8
54014: PUSH
54015: LD_INT 0
54017: ST_TO_ADDR
54018: GO 54036
// min_y := y - r ;
54020: LD_ADDR_VAR 0 8
54024: PUSH
54025: LD_VAR 0 3
54029: PUSH
54030: LD_VAR 0 4
54034: MINUS
54035: ST_TO_ADDR
// max_x := x + r ;
54036: LD_ADDR_VAR 0 9
54040: PUSH
54041: LD_VAR 0 2
54045: PUSH
54046: LD_VAR 0 4
54050: PLUS
54051: ST_TO_ADDR
// max_y := y + r ;
54052: LD_ADDR_VAR 0 10
54056: PUSH
54057: LD_VAR 0 3
54061: PUSH
54062: LD_VAR 0 4
54066: PLUS
54067: ST_TO_ADDR
// for _x = min_x to max_x do
54068: LD_ADDR_VAR 0 11
54072: PUSH
54073: DOUBLE
54074: LD_VAR 0 7
54078: DEC
54079: ST_TO_ADDR
54080: LD_VAR 0 9
54084: PUSH
54085: FOR_TO
54086: IFFALSE 54203
// for _y = min_y to max_y do
54088: LD_ADDR_VAR 0 12
54092: PUSH
54093: DOUBLE
54094: LD_VAR 0 8
54098: DEC
54099: ST_TO_ADDR
54100: LD_VAR 0 10
54104: PUSH
54105: FOR_TO
54106: IFFALSE 54199
// begin if not ValidHex ( _x , _y ) then
54108: LD_VAR 0 11
54112: PPUSH
54113: LD_VAR 0 12
54117: PPUSH
54118: CALL_OW 488
54122: NOT
54123: IFFALSE 54127
// continue ;
54125: GO 54105
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54127: LD_VAR 0 11
54131: PPUSH
54132: LD_VAR 0 12
54136: PPUSH
54137: CALL_OW 351
54141: PUSH
54142: LD_VAR 0 11
54146: PPUSH
54147: LD_VAR 0 12
54151: PPUSH
54152: CALL_OW 554
54156: AND
54157: IFFALSE 54197
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54159: LD_ADDR_VAR 0 13
54163: PUSH
54164: LD_VAR 0 13
54168: PPUSH
54169: LD_VAR 0 13
54173: PUSH
54174: LD_INT 1
54176: PLUS
54177: PPUSH
54178: LD_VAR 0 11
54182: PUSH
54183: LD_VAR 0 12
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PPUSH
54192: CALL_OW 2
54196: ST_TO_ADDR
// end ;
54197: GO 54105
54199: POP
54200: POP
54201: GO 54085
54203: POP
54204: POP
// if not list then
54205: LD_VAR 0 13
54209: NOT
54210: IFFALSE 54214
// exit ;
54212: GO 54458
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
54214: LD_ADDR_VAR 0 13
54218: PUSH
54219: LD_VAR 0 1
54223: PPUSH
54224: LD_VAR 0 13
54228: PPUSH
54229: LD_INT 1
54231: PPUSH
54232: LD_INT 1
54234: PPUSH
54235: CALL 14822 0 4
54239: ST_TO_ADDR
// ComStop ( flame ) ;
54240: LD_VAR 0 1
54244: PPUSH
54245: CALL_OW 141
// for i in list do
54249: LD_ADDR_VAR 0 6
54253: PUSH
54254: LD_VAR 0 13
54258: PUSH
54259: FOR_IN
54260: IFFALSE 54291
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
54262: LD_VAR 0 1
54266: PPUSH
54267: LD_VAR 0 6
54271: PUSH
54272: LD_INT 1
54274: ARRAY
54275: PPUSH
54276: LD_VAR 0 6
54280: PUSH
54281: LD_INT 2
54283: ARRAY
54284: PPUSH
54285: CALL_OW 176
54289: GO 54259
54291: POP
54292: POP
// repeat wait ( 0 0$1 ) ;
54293: LD_INT 35
54295: PPUSH
54296: CALL_OW 67
// task := GetTaskList ( flame ) ;
54300: LD_ADDR_VAR 0 14
54304: PUSH
54305: LD_VAR 0 1
54309: PPUSH
54310: CALL_OW 437
54314: ST_TO_ADDR
// if not task then
54315: LD_VAR 0 14
54319: NOT
54320: IFFALSE 54324
// exit ;
54322: GO 54458
// if task [ 1 ] [ 1 ] <> | then
54324: LD_VAR 0 14
54328: PUSH
54329: LD_INT 1
54331: ARRAY
54332: PUSH
54333: LD_INT 1
54335: ARRAY
54336: PUSH
54337: LD_STRING |
54339: NONEQUAL
54340: IFFALSE 54344
// exit ;
54342: GO 54458
// _x := task [ 1 ] [ 2 ] ;
54344: LD_ADDR_VAR 0 11
54348: PUSH
54349: LD_VAR 0 14
54353: PUSH
54354: LD_INT 1
54356: ARRAY
54357: PUSH
54358: LD_INT 2
54360: ARRAY
54361: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54362: LD_ADDR_VAR 0 12
54366: PUSH
54367: LD_VAR 0 14
54371: PUSH
54372: LD_INT 1
54374: ARRAY
54375: PUSH
54376: LD_INT 3
54378: ARRAY
54379: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54380: LD_VAR 0 11
54384: PPUSH
54385: LD_VAR 0 12
54389: PPUSH
54390: CALL_OW 351
54394: NOT
54395: PUSH
54396: LD_VAR 0 11
54400: PPUSH
54401: LD_VAR 0 12
54405: PPUSH
54406: CALL_OW 554
54410: NOT
54411: OR
54412: IFFALSE 54446
// begin task := Delete ( task , 1 ) ;
54414: LD_ADDR_VAR 0 14
54418: PUSH
54419: LD_VAR 0 14
54423: PPUSH
54424: LD_INT 1
54426: PPUSH
54427: CALL_OW 3
54431: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54432: LD_VAR 0 1
54436: PPUSH
54437: LD_VAR 0 14
54441: PPUSH
54442: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54446: LD_VAR 0 1
54450: PPUSH
54451: CALL_OW 314
54455: NOT
54456: IFFALSE 54293
// end ;
54458: LD_VAR 0 5
54462: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54463: LD_EXP 44
54467: NOT
54468: IFFALSE 54518
54470: GO 54472
54472: DISABLE
// begin initHack := true ;
54473: LD_ADDR_EXP 44
54477: PUSH
54478: LD_INT 1
54480: ST_TO_ADDR
// hackTanks := [ ] ;
54481: LD_ADDR_EXP 45
54485: PUSH
54486: EMPTY
54487: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54488: LD_ADDR_EXP 46
54492: PUSH
54493: EMPTY
54494: ST_TO_ADDR
// hackLimit := 3 ;
54495: LD_ADDR_EXP 47
54499: PUSH
54500: LD_INT 3
54502: ST_TO_ADDR
// hackDist := 12 ;
54503: LD_ADDR_EXP 48
54507: PUSH
54508: LD_INT 12
54510: ST_TO_ADDR
// hackCounter := [ ] ;
54511: LD_ADDR_EXP 49
54515: PUSH
54516: EMPTY
54517: ST_TO_ADDR
// end ;
54518: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54519: LD_EXP 44
54523: PUSH
54524: LD_INT 34
54526: PUSH
54527: LD_INT 99
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PPUSH
54534: CALL_OW 69
54538: AND
54539: IFFALSE 54792
54541: GO 54543
54543: DISABLE
54544: LD_INT 0
54546: PPUSH
54547: PPUSH
// begin enable ;
54548: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54549: LD_ADDR_VAR 0 1
54553: PUSH
54554: LD_INT 34
54556: PUSH
54557: LD_INT 99
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PPUSH
54564: CALL_OW 69
54568: PUSH
54569: FOR_IN
54570: IFFALSE 54790
// begin if not i in hackTanks then
54572: LD_VAR 0 1
54576: PUSH
54577: LD_EXP 45
54581: IN
54582: NOT
54583: IFFALSE 54666
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54585: LD_ADDR_EXP 45
54589: PUSH
54590: LD_EXP 45
54594: PPUSH
54595: LD_EXP 45
54599: PUSH
54600: LD_INT 1
54602: PLUS
54603: PPUSH
54604: LD_VAR 0 1
54608: PPUSH
54609: CALL_OW 1
54613: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54614: LD_ADDR_EXP 46
54618: PUSH
54619: LD_EXP 46
54623: PPUSH
54624: LD_EXP 46
54628: PUSH
54629: LD_INT 1
54631: PLUS
54632: PPUSH
54633: EMPTY
54634: PPUSH
54635: CALL_OW 1
54639: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54640: LD_ADDR_EXP 49
54644: PUSH
54645: LD_EXP 49
54649: PPUSH
54650: LD_EXP 49
54654: PUSH
54655: LD_INT 1
54657: PLUS
54658: PPUSH
54659: EMPTY
54660: PPUSH
54661: CALL_OW 1
54665: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54666: LD_VAR 0 1
54670: PPUSH
54671: CALL_OW 302
54675: NOT
54676: IFFALSE 54689
// begin HackUnlinkAll ( i ) ;
54678: LD_VAR 0 1
54682: PPUSH
54683: CALL 54795 0 1
// continue ;
54687: GO 54569
// end ; HackCheckCapturedStatus ( i ) ;
54689: LD_VAR 0 1
54693: PPUSH
54694: CALL 55238 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54698: LD_ADDR_VAR 0 2
54702: PUSH
54703: LD_INT 81
54705: PUSH
54706: LD_VAR 0 1
54710: PPUSH
54711: CALL_OW 255
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 33
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 91
54732: PUSH
54733: LD_VAR 0 1
54737: PUSH
54738: LD_EXP 48
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 50
54750: PUSH
54751: EMPTY
54752: LIST
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: PPUSH
54760: CALL_OW 69
54764: ST_TO_ADDR
// if not tmp then
54765: LD_VAR 0 2
54769: NOT
54770: IFFALSE 54774
// continue ;
54772: GO 54569
// HackLink ( i , tmp ) ;
54774: LD_VAR 0 1
54778: PPUSH
54779: LD_VAR 0 2
54783: PPUSH
54784: CALL 54931 0 2
// end ;
54788: GO 54569
54790: POP
54791: POP
// end ;
54792: PPOPN 2
54794: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54795: LD_INT 0
54797: PPUSH
54798: PPUSH
54799: PPUSH
// if not hack in hackTanks then
54800: LD_VAR 0 1
54804: PUSH
54805: LD_EXP 45
54809: IN
54810: NOT
54811: IFFALSE 54815
// exit ;
54813: GO 54926
// index := GetElementIndex ( hackTanks , hack ) ;
54815: LD_ADDR_VAR 0 4
54819: PUSH
54820: LD_EXP 45
54824: PPUSH
54825: LD_VAR 0 1
54829: PPUSH
54830: CALL 14119 0 2
54834: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54835: LD_EXP 46
54839: PUSH
54840: LD_VAR 0 4
54844: ARRAY
54845: IFFALSE 54926
// begin for i in hackTanksCaptured [ index ] do
54847: LD_ADDR_VAR 0 3
54851: PUSH
54852: LD_EXP 46
54856: PUSH
54857: LD_VAR 0 4
54861: ARRAY
54862: PUSH
54863: FOR_IN
54864: IFFALSE 54890
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54866: LD_VAR 0 3
54870: PUSH
54871: LD_INT 1
54873: ARRAY
54874: PPUSH
54875: LD_VAR 0 3
54879: PUSH
54880: LD_INT 2
54882: ARRAY
54883: PPUSH
54884: CALL_OW 235
54888: GO 54863
54890: POP
54891: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54892: LD_ADDR_EXP 46
54896: PUSH
54897: LD_EXP 46
54901: PPUSH
54902: LD_VAR 0 4
54906: PPUSH
54907: EMPTY
54908: PPUSH
54909: CALL_OW 1
54913: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54914: LD_VAR 0 1
54918: PPUSH
54919: LD_INT 0
54921: PPUSH
54922: CALL_OW 505
// end ; end ;
54926: LD_VAR 0 2
54930: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54931: LD_INT 0
54933: PPUSH
54934: PPUSH
54935: PPUSH
// if not hack in hackTanks or not vehicles then
54936: LD_VAR 0 1
54940: PUSH
54941: LD_EXP 45
54945: IN
54946: NOT
54947: PUSH
54948: LD_VAR 0 2
54952: NOT
54953: OR
54954: IFFALSE 54958
// exit ;
54956: GO 55233
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54958: LD_ADDR_VAR 0 2
54962: PUSH
54963: LD_VAR 0 1
54967: PPUSH
54968: LD_VAR 0 2
54972: PPUSH
54973: LD_INT 1
54975: PPUSH
54976: LD_INT 1
54978: PPUSH
54979: CALL 14769 0 4
54983: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54984: LD_ADDR_VAR 0 5
54988: PUSH
54989: LD_EXP 45
54993: PPUSH
54994: LD_VAR 0 1
54998: PPUSH
54999: CALL 14119 0 2
55003: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
55004: LD_EXP 46
55008: PUSH
55009: LD_VAR 0 5
55013: ARRAY
55014: PUSH
55015: LD_EXP 47
55019: LESS
55020: IFFALSE 55209
// begin for i := 1 to vehicles do
55022: LD_ADDR_VAR 0 4
55026: PUSH
55027: DOUBLE
55028: LD_INT 1
55030: DEC
55031: ST_TO_ADDR
55032: LD_VAR 0 2
55036: PUSH
55037: FOR_TO
55038: IFFALSE 55207
// begin if hackTanksCaptured [ index ] = hackLimit then
55040: LD_EXP 46
55044: PUSH
55045: LD_VAR 0 5
55049: ARRAY
55050: PUSH
55051: LD_EXP 47
55055: EQUAL
55056: IFFALSE 55060
// break ;
55058: GO 55207
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55060: LD_ADDR_EXP 49
55064: PUSH
55065: LD_EXP 49
55069: PPUSH
55070: LD_VAR 0 5
55074: PPUSH
55075: LD_EXP 49
55079: PUSH
55080: LD_VAR 0 5
55084: ARRAY
55085: PUSH
55086: LD_INT 1
55088: PLUS
55089: PPUSH
55090: CALL_OW 1
55094: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55095: LD_ADDR_EXP 46
55099: PUSH
55100: LD_EXP 46
55104: PPUSH
55105: LD_VAR 0 5
55109: PUSH
55110: LD_EXP 46
55114: PUSH
55115: LD_VAR 0 5
55119: ARRAY
55120: PUSH
55121: LD_INT 1
55123: PLUS
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PPUSH
55129: LD_VAR 0 2
55133: PUSH
55134: LD_VAR 0 4
55138: ARRAY
55139: PUSH
55140: LD_VAR 0 2
55144: PUSH
55145: LD_VAR 0 4
55149: ARRAY
55150: PPUSH
55151: CALL_OW 255
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PPUSH
55160: CALL 14334 0 3
55164: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55165: LD_VAR 0 2
55169: PUSH
55170: LD_VAR 0 4
55174: ARRAY
55175: PPUSH
55176: LD_VAR 0 1
55180: PPUSH
55181: CALL_OW 255
55185: PPUSH
55186: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55190: LD_VAR 0 2
55194: PUSH
55195: LD_VAR 0 4
55199: ARRAY
55200: PPUSH
55201: CALL_OW 141
// end ;
55205: GO 55037
55207: POP
55208: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55209: LD_VAR 0 1
55213: PPUSH
55214: LD_EXP 46
55218: PUSH
55219: LD_VAR 0 5
55223: ARRAY
55224: PUSH
55225: LD_INT 0
55227: PLUS
55228: PPUSH
55229: CALL_OW 505
// end ;
55233: LD_VAR 0 3
55237: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55238: LD_INT 0
55240: PPUSH
55241: PPUSH
55242: PPUSH
55243: PPUSH
// if not hack in hackTanks then
55244: LD_VAR 0 1
55248: PUSH
55249: LD_EXP 45
55253: IN
55254: NOT
55255: IFFALSE 55259
// exit ;
55257: GO 55499
// index := GetElementIndex ( hackTanks , hack ) ;
55259: LD_ADDR_VAR 0 4
55263: PUSH
55264: LD_EXP 45
55268: PPUSH
55269: LD_VAR 0 1
55273: PPUSH
55274: CALL 14119 0 2
55278: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55279: LD_ADDR_VAR 0 3
55283: PUSH
55284: DOUBLE
55285: LD_EXP 46
55289: PUSH
55290: LD_VAR 0 4
55294: ARRAY
55295: INC
55296: ST_TO_ADDR
55297: LD_INT 1
55299: PUSH
55300: FOR_DOWNTO
55301: IFFALSE 55473
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55303: LD_ADDR_VAR 0 5
55307: PUSH
55308: LD_EXP 46
55312: PUSH
55313: LD_VAR 0 4
55317: ARRAY
55318: PUSH
55319: LD_VAR 0 3
55323: ARRAY
55324: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55325: LD_VAR 0 5
55329: PUSH
55330: LD_INT 1
55332: ARRAY
55333: PPUSH
55334: CALL_OW 302
55338: NOT
55339: PUSH
55340: LD_VAR 0 5
55344: PUSH
55345: LD_INT 1
55347: ARRAY
55348: PPUSH
55349: CALL_OW 255
55353: PUSH
55354: LD_VAR 0 1
55358: PPUSH
55359: CALL_OW 255
55363: NONEQUAL
55364: OR
55365: IFFALSE 55471
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55367: LD_VAR 0 5
55371: PUSH
55372: LD_INT 1
55374: ARRAY
55375: PPUSH
55376: CALL_OW 305
55380: PUSH
55381: LD_VAR 0 5
55385: PUSH
55386: LD_INT 1
55388: ARRAY
55389: PPUSH
55390: CALL_OW 255
55394: PUSH
55395: LD_VAR 0 1
55399: PPUSH
55400: CALL_OW 255
55404: EQUAL
55405: AND
55406: IFFALSE 55430
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55408: LD_VAR 0 5
55412: PUSH
55413: LD_INT 1
55415: ARRAY
55416: PPUSH
55417: LD_VAR 0 5
55421: PUSH
55422: LD_INT 2
55424: ARRAY
55425: PPUSH
55426: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55430: LD_ADDR_EXP 46
55434: PUSH
55435: LD_EXP 46
55439: PPUSH
55440: LD_VAR 0 4
55444: PPUSH
55445: LD_EXP 46
55449: PUSH
55450: LD_VAR 0 4
55454: ARRAY
55455: PPUSH
55456: LD_VAR 0 3
55460: PPUSH
55461: CALL_OW 3
55465: PPUSH
55466: CALL_OW 1
55470: ST_TO_ADDR
// end ; end ;
55471: GO 55300
55473: POP
55474: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55475: LD_VAR 0 1
55479: PPUSH
55480: LD_EXP 46
55484: PUSH
55485: LD_VAR 0 4
55489: ARRAY
55490: PUSH
55491: LD_INT 0
55493: PLUS
55494: PPUSH
55495: CALL_OW 505
// end ;
55499: LD_VAR 0 2
55503: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55504: LD_INT 0
55506: PPUSH
55507: PPUSH
55508: PPUSH
55509: PPUSH
// if not hack in hackTanks then
55510: LD_VAR 0 1
55514: PUSH
55515: LD_EXP 45
55519: IN
55520: NOT
55521: IFFALSE 55525
// exit ;
55523: GO 55610
// index := GetElementIndex ( hackTanks , hack ) ;
55525: LD_ADDR_VAR 0 5
55529: PUSH
55530: LD_EXP 45
55534: PPUSH
55535: LD_VAR 0 1
55539: PPUSH
55540: CALL 14119 0 2
55544: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55545: LD_ADDR_VAR 0 4
55549: PUSH
55550: DOUBLE
55551: LD_INT 1
55553: DEC
55554: ST_TO_ADDR
55555: LD_EXP 46
55559: PUSH
55560: LD_VAR 0 5
55564: ARRAY
55565: PUSH
55566: FOR_TO
55567: IFFALSE 55608
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55569: LD_EXP 46
55573: PUSH
55574: LD_VAR 0 5
55578: ARRAY
55579: PUSH
55580: LD_VAR 0 4
55584: ARRAY
55585: PUSH
55586: LD_INT 1
55588: ARRAY
55589: PUSH
55590: LD_VAR 0 2
55594: EQUAL
55595: IFFALSE 55606
// KillUnit ( vehicle ) ;
55597: LD_VAR 0 2
55601: PPUSH
55602: CALL_OW 66
55606: GO 55566
55608: POP
55609: POP
// end ;
55610: LD_VAR 0 3
55614: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55615: LD_EXP 50
55619: NOT
55620: IFFALSE 55655
55622: GO 55624
55624: DISABLE
// begin initMiner := true ;
55625: LD_ADDR_EXP 50
55629: PUSH
55630: LD_INT 1
55632: ST_TO_ADDR
// minersList := [ ] ;
55633: LD_ADDR_EXP 51
55637: PUSH
55638: EMPTY
55639: ST_TO_ADDR
// minerMinesList := [ ] ;
55640: LD_ADDR_EXP 52
55644: PUSH
55645: EMPTY
55646: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55647: LD_ADDR_EXP 53
55651: PUSH
55652: LD_INT 5
55654: ST_TO_ADDR
// end ;
55655: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55656: LD_EXP 50
55660: PUSH
55661: LD_INT 34
55663: PUSH
55664: LD_INT 81
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PPUSH
55671: CALL_OW 69
55675: AND
55676: IFFALSE 56137
55678: GO 55680
55680: DISABLE
55681: LD_INT 0
55683: PPUSH
55684: PPUSH
55685: PPUSH
55686: PPUSH
// begin enable ;
55687: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55688: LD_ADDR_VAR 0 1
55692: PUSH
55693: LD_INT 34
55695: PUSH
55696: LD_INT 81
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PPUSH
55703: CALL_OW 69
55707: PUSH
55708: FOR_IN
55709: IFFALSE 55781
// begin if not i in minersList then
55711: LD_VAR 0 1
55715: PUSH
55716: LD_EXP 51
55720: IN
55721: NOT
55722: IFFALSE 55779
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55724: LD_ADDR_EXP 51
55728: PUSH
55729: LD_EXP 51
55733: PPUSH
55734: LD_EXP 51
55738: PUSH
55739: LD_INT 1
55741: PLUS
55742: PPUSH
55743: LD_VAR 0 1
55747: PPUSH
55748: CALL_OW 1
55752: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55753: LD_ADDR_EXP 52
55757: PUSH
55758: LD_EXP 52
55762: PPUSH
55763: LD_EXP 52
55767: PUSH
55768: LD_INT 1
55770: PLUS
55771: PPUSH
55772: EMPTY
55773: PPUSH
55774: CALL_OW 1
55778: ST_TO_ADDR
// end end ;
55779: GO 55708
55781: POP
55782: POP
// for i := minerMinesList downto 1 do
55783: LD_ADDR_VAR 0 1
55787: PUSH
55788: DOUBLE
55789: LD_EXP 52
55793: INC
55794: ST_TO_ADDR
55795: LD_INT 1
55797: PUSH
55798: FOR_DOWNTO
55799: IFFALSE 56135
// begin if IsLive ( minersList [ i ] ) then
55801: LD_EXP 51
55805: PUSH
55806: LD_VAR 0 1
55810: ARRAY
55811: PPUSH
55812: CALL_OW 300
55816: IFFALSE 55844
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55818: LD_EXP 51
55822: PUSH
55823: LD_VAR 0 1
55827: ARRAY
55828: PPUSH
55829: LD_EXP 52
55833: PUSH
55834: LD_VAR 0 1
55838: ARRAY
55839: PPUSH
55840: CALL_OW 505
// if not minerMinesList [ i ] then
55844: LD_EXP 52
55848: PUSH
55849: LD_VAR 0 1
55853: ARRAY
55854: NOT
55855: IFFALSE 55859
// continue ;
55857: GO 55798
// for j := minerMinesList [ i ] downto 1 do
55859: LD_ADDR_VAR 0 2
55863: PUSH
55864: DOUBLE
55865: LD_EXP 52
55869: PUSH
55870: LD_VAR 0 1
55874: ARRAY
55875: INC
55876: ST_TO_ADDR
55877: LD_INT 1
55879: PUSH
55880: FOR_DOWNTO
55881: IFFALSE 56131
// begin side := GetSide ( minersList [ i ] ) ;
55883: LD_ADDR_VAR 0 3
55887: PUSH
55888: LD_EXP 51
55892: PUSH
55893: LD_VAR 0 1
55897: ARRAY
55898: PPUSH
55899: CALL_OW 255
55903: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55904: LD_ADDR_VAR 0 4
55908: PUSH
55909: LD_EXP 52
55913: PUSH
55914: LD_VAR 0 1
55918: ARRAY
55919: PUSH
55920: LD_VAR 0 2
55924: ARRAY
55925: PUSH
55926: LD_INT 1
55928: ARRAY
55929: PPUSH
55930: LD_EXP 52
55934: PUSH
55935: LD_VAR 0 1
55939: ARRAY
55940: PUSH
55941: LD_VAR 0 2
55945: ARRAY
55946: PUSH
55947: LD_INT 2
55949: ARRAY
55950: PPUSH
55951: CALL_OW 428
55955: ST_TO_ADDR
// if not tmp then
55956: LD_VAR 0 4
55960: NOT
55961: IFFALSE 55965
// continue ;
55963: GO 55880
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55965: LD_VAR 0 4
55969: PUSH
55970: LD_INT 81
55972: PUSH
55973: LD_VAR 0 3
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PPUSH
55982: CALL_OW 69
55986: IN
55987: PUSH
55988: LD_EXP 52
55992: PUSH
55993: LD_VAR 0 1
55997: ARRAY
55998: PUSH
55999: LD_VAR 0 2
56003: ARRAY
56004: PUSH
56005: LD_INT 1
56007: ARRAY
56008: PPUSH
56009: LD_EXP 52
56013: PUSH
56014: LD_VAR 0 1
56018: ARRAY
56019: PUSH
56020: LD_VAR 0 2
56024: ARRAY
56025: PUSH
56026: LD_INT 2
56028: ARRAY
56029: PPUSH
56030: CALL_OW 458
56034: AND
56035: IFFALSE 56129
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
56037: LD_EXP 52
56041: PUSH
56042: LD_VAR 0 1
56046: ARRAY
56047: PUSH
56048: LD_VAR 0 2
56052: ARRAY
56053: PUSH
56054: LD_INT 1
56056: ARRAY
56057: PPUSH
56058: LD_EXP 52
56062: PUSH
56063: LD_VAR 0 1
56067: ARRAY
56068: PUSH
56069: LD_VAR 0 2
56073: ARRAY
56074: PUSH
56075: LD_INT 2
56077: ARRAY
56078: PPUSH
56079: LD_VAR 0 3
56083: PPUSH
56084: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56088: LD_ADDR_EXP 52
56092: PUSH
56093: LD_EXP 52
56097: PPUSH
56098: LD_VAR 0 1
56102: PPUSH
56103: LD_EXP 52
56107: PUSH
56108: LD_VAR 0 1
56112: ARRAY
56113: PPUSH
56114: LD_VAR 0 2
56118: PPUSH
56119: CALL_OW 3
56123: PPUSH
56124: CALL_OW 1
56128: ST_TO_ADDR
// end ; end ;
56129: GO 55880
56131: POP
56132: POP
// end ;
56133: GO 55798
56135: POP
56136: POP
// end ;
56137: PPOPN 4
56139: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56140: LD_INT 0
56142: PPUSH
56143: PPUSH
// result := false ;
56144: LD_ADDR_VAR 0 4
56148: PUSH
56149: LD_INT 0
56151: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56152: LD_VAR 0 1
56156: PPUSH
56157: CALL_OW 264
56161: PUSH
56162: LD_INT 81
56164: EQUAL
56165: NOT
56166: IFFALSE 56170
// exit ;
56168: GO 56410
// index := GetElementIndex ( minersList , unit ) ;
56170: LD_ADDR_VAR 0 5
56174: PUSH
56175: LD_EXP 51
56179: PPUSH
56180: LD_VAR 0 1
56184: PPUSH
56185: CALL 14119 0 2
56189: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56190: LD_EXP 52
56194: PUSH
56195: LD_VAR 0 5
56199: ARRAY
56200: PUSH
56201: LD_EXP 53
56205: GREATEREQUAL
56206: IFFALSE 56210
// exit ;
56208: GO 56410
// ComMoveXY ( unit , x , y ) ;
56210: LD_VAR 0 1
56214: PPUSH
56215: LD_VAR 0 2
56219: PPUSH
56220: LD_VAR 0 3
56224: PPUSH
56225: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56229: LD_INT 35
56231: PPUSH
56232: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56236: LD_VAR 0 1
56240: PPUSH
56241: LD_VAR 0 2
56245: PPUSH
56246: LD_VAR 0 3
56250: PPUSH
56251: CALL 45880 0 3
56255: NOT
56256: PUSH
56257: LD_VAR 0 1
56261: PPUSH
56262: CALL_OW 314
56266: AND
56267: IFFALSE 56271
// exit ;
56269: GO 56410
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56271: LD_VAR 0 2
56275: PPUSH
56276: LD_VAR 0 3
56280: PPUSH
56281: CALL_OW 428
56285: PUSH
56286: LD_VAR 0 1
56290: EQUAL
56291: PUSH
56292: LD_VAR 0 1
56296: PPUSH
56297: CALL_OW 314
56301: NOT
56302: AND
56303: IFFALSE 56229
// PlaySoundXY ( x , y , PlantMine ) ;
56305: LD_VAR 0 2
56309: PPUSH
56310: LD_VAR 0 3
56314: PPUSH
56315: LD_STRING PlantMine
56317: PPUSH
56318: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56322: LD_VAR 0 2
56326: PPUSH
56327: LD_VAR 0 3
56331: PPUSH
56332: LD_VAR 0 1
56336: PPUSH
56337: CALL_OW 255
56341: PPUSH
56342: LD_INT 0
56344: PPUSH
56345: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56349: LD_ADDR_EXP 52
56353: PUSH
56354: LD_EXP 52
56358: PPUSH
56359: LD_VAR 0 5
56363: PUSH
56364: LD_EXP 52
56368: PUSH
56369: LD_VAR 0 5
56373: ARRAY
56374: PUSH
56375: LD_INT 1
56377: PLUS
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PPUSH
56383: LD_VAR 0 2
56387: PUSH
56388: LD_VAR 0 3
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PPUSH
56397: CALL 14334 0 3
56401: ST_TO_ADDR
// result := true ;
56402: LD_ADDR_VAR 0 4
56406: PUSH
56407: LD_INT 1
56409: ST_TO_ADDR
// end ;
56410: LD_VAR 0 4
56414: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56415: LD_INT 0
56417: PPUSH
56418: PPUSH
56419: PPUSH
// if not unit in minersList then
56420: LD_VAR 0 1
56424: PUSH
56425: LD_EXP 51
56429: IN
56430: NOT
56431: IFFALSE 56435
// exit ;
56433: GO 56827
// index := GetElementIndex ( minersList , unit ) ;
56435: LD_ADDR_VAR 0 6
56439: PUSH
56440: LD_EXP 51
56444: PPUSH
56445: LD_VAR 0 1
56449: PPUSH
56450: CALL 14119 0 2
56454: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56455: LD_ADDR_VAR 0 5
56459: PUSH
56460: DOUBLE
56461: LD_EXP 52
56465: PUSH
56466: LD_VAR 0 6
56470: ARRAY
56471: INC
56472: ST_TO_ADDR
56473: LD_INT 1
56475: PUSH
56476: FOR_DOWNTO
56477: IFFALSE 56638
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56479: LD_EXP 52
56483: PUSH
56484: LD_VAR 0 6
56488: ARRAY
56489: PUSH
56490: LD_VAR 0 5
56494: ARRAY
56495: PUSH
56496: LD_INT 1
56498: ARRAY
56499: PUSH
56500: LD_VAR 0 2
56504: EQUAL
56505: PUSH
56506: LD_EXP 52
56510: PUSH
56511: LD_VAR 0 6
56515: ARRAY
56516: PUSH
56517: LD_VAR 0 5
56521: ARRAY
56522: PUSH
56523: LD_INT 2
56525: ARRAY
56526: PUSH
56527: LD_VAR 0 3
56531: EQUAL
56532: AND
56533: IFFALSE 56636
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56535: LD_EXP 52
56539: PUSH
56540: LD_VAR 0 6
56544: ARRAY
56545: PUSH
56546: LD_VAR 0 5
56550: ARRAY
56551: PUSH
56552: LD_INT 1
56554: ARRAY
56555: PPUSH
56556: LD_EXP 52
56560: PUSH
56561: LD_VAR 0 6
56565: ARRAY
56566: PUSH
56567: LD_VAR 0 5
56571: ARRAY
56572: PUSH
56573: LD_INT 2
56575: ARRAY
56576: PPUSH
56577: LD_VAR 0 1
56581: PPUSH
56582: CALL_OW 255
56586: PPUSH
56587: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56591: LD_ADDR_EXP 52
56595: PUSH
56596: LD_EXP 52
56600: PPUSH
56601: LD_VAR 0 6
56605: PPUSH
56606: LD_EXP 52
56610: PUSH
56611: LD_VAR 0 6
56615: ARRAY
56616: PPUSH
56617: LD_VAR 0 5
56621: PPUSH
56622: CALL_OW 3
56626: PPUSH
56627: CALL_OW 1
56631: ST_TO_ADDR
// exit ;
56632: POP
56633: POP
56634: GO 56827
// end ; end ;
56636: GO 56476
56638: POP
56639: POP
// for i := minerMinesList [ index ] downto 1 do
56640: LD_ADDR_VAR 0 5
56644: PUSH
56645: DOUBLE
56646: LD_EXP 52
56650: PUSH
56651: LD_VAR 0 6
56655: ARRAY
56656: INC
56657: ST_TO_ADDR
56658: LD_INT 1
56660: PUSH
56661: FOR_DOWNTO
56662: IFFALSE 56825
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56664: LD_EXP 52
56668: PUSH
56669: LD_VAR 0 6
56673: ARRAY
56674: PUSH
56675: LD_VAR 0 5
56679: ARRAY
56680: PUSH
56681: LD_INT 1
56683: ARRAY
56684: PPUSH
56685: LD_EXP 52
56689: PUSH
56690: LD_VAR 0 6
56694: ARRAY
56695: PUSH
56696: LD_VAR 0 5
56700: ARRAY
56701: PUSH
56702: LD_INT 2
56704: ARRAY
56705: PPUSH
56706: LD_VAR 0 2
56710: PPUSH
56711: LD_VAR 0 3
56715: PPUSH
56716: CALL_OW 298
56720: PUSH
56721: LD_INT 6
56723: LESS
56724: IFFALSE 56823
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56726: LD_EXP 52
56730: PUSH
56731: LD_VAR 0 6
56735: ARRAY
56736: PUSH
56737: LD_VAR 0 5
56741: ARRAY
56742: PUSH
56743: LD_INT 1
56745: ARRAY
56746: PPUSH
56747: LD_EXP 52
56751: PUSH
56752: LD_VAR 0 6
56756: ARRAY
56757: PUSH
56758: LD_VAR 0 5
56762: ARRAY
56763: PUSH
56764: LD_INT 2
56766: ARRAY
56767: PPUSH
56768: LD_VAR 0 1
56772: PPUSH
56773: CALL_OW 255
56777: PPUSH
56778: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56782: LD_ADDR_EXP 52
56786: PUSH
56787: LD_EXP 52
56791: PPUSH
56792: LD_VAR 0 6
56796: PPUSH
56797: LD_EXP 52
56801: PUSH
56802: LD_VAR 0 6
56806: ARRAY
56807: PPUSH
56808: LD_VAR 0 5
56812: PPUSH
56813: CALL_OW 3
56817: PPUSH
56818: CALL_OW 1
56822: ST_TO_ADDR
// end ; end ;
56823: GO 56661
56825: POP
56826: POP
// end ;
56827: LD_VAR 0 4
56831: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56832: LD_INT 0
56834: PPUSH
56835: PPUSH
56836: PPUSH
56837: PPUSH
56838: PPUSH
56839: PPUSH
56840: PPUSH
56841: PPUSH
56842: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56843: LD_VAR 0 1
56847: PPUSH
56848: CALL_OW 264
56852: PUSH
56853: LD_INT 81
56855: EQUAL
56856: NOT
56857: PUSH
56858: LD_VAR 0 1
56862: PUSH
56863: LD_EXP 51
56867: IN
56868: NOT
56869: OR
56870: IFFALSE 56874
// exit ;
56872: GO 57196
// index := GetElementIndex ( minersList , unit ) ;
56874: LD_ADDR_VAR 0 6
56878: PUSH
56879: LD_EXP 51
56883: PPUSH
56884: LD_VAR 0 1
56888: PPUSH
56889: CALL 14119 0 2
56893: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56894: LD_ADDR_VAR 0 8
56898: PUSH
56899: LD_EXP 53
56903: PUSH
56904: LD_EXP 52
56908: PUSH
56909: LD_VAR 0 6
56913: ARRAY
56914: MINUS
56915: ST_TO_ADDR
// if not minesFreeAmount then
56916: LD_VAR 0 8
56920: NOT
56921: IFFALSE 56925
// exit ;
56923: GO 57196
// tmp := [ ] ;
56925: LD_ADDR_VAR 0 7
56929: PUSH
56930: EMPTY
56931: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56932: LD_ADDR_VAR 0 5
56936: PUSH
56937: DOUBLE
56938: LD_INT 1
56940: DEC
56941: ST_TO_ADDR
56942: LD_VAR 0 8
56946: PUSH
56947: FOR_TO
56948: IFFALSE 57143
// begin _d := rand ( 0 , 5 ) ;
56950: LD_ADDR_VAR 0 11
56954: PUSH
56955: LD_INT 0
56957: PPUSH
56958: LD_INT 5
56960: PPUSH
56961: CALL_OW 12
56965: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56966: LD_ADDR_VAR 0 12
56970: PUSH
56971: LD_INT 2
56973: PPUSH
56974: LD_INT 6
56976: PPUSH
56977: CALL_OW 12
56981: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56982: LD_ADDR_VAR 0 9
56986: PUSH
56987: LD_VAR 0 2
56991: PPUSH
56992: LD_VAR 0 11
56996: PPUSH
56997: LD_VAR 0 12
57001: PPUSH
57002: CALL_OW 272
57006: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
57007: LD_ADDR_VAR 0 10
57011: PUSH
57012: LD_VAR 0 3
57016: PPUSH
57017: LD_VAR 0 11
57021: PPUSH
57022: LD_VAR 0 12
57026: PPUSH
57027: CALL_OW 273
57031: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
57032: LD_VAR 0 9
57036: PPUSH
57037: LD_VAR 0 10
57041: PPUSH
57042: CALL_OW 488
57046: PUSH
57047: LD_VAR 0 9
57051: PUSH
57052: LD_VAR 0 10
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_VAR 0 7
57065: IN
57066: NOT
57067: AND
57068: PUSH
57069: LD_VAR 0 9
57073: PPUSH
57074: LD_VAR 0 10
57078: PPUSH
57079: CALL_OW 458
57083: NOT
57084: AND
57085: IFFALSE 57127
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57087: LD_ADDR_VAR 0 7
57091: PUSH
57092: LD_VAR 0 7
57096: PPUSH
57097: LD_VAR 0 7
57101: PUSH
57102: LD_INT 1
57104: PLUS
57105: PPUSH
57106: LD_VAR 0 9
57110: PUSH
57111: LD_VAR 0 10
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PPUSH
57120: CALL_OW 1
57124: ST_TO_ADDR
57125: GO 57141
// i := i - 1 ;
57127: LD_ADDR_VAR 0 5
57131: PUSH
57132: LD_VAR 0 5
57136: PUSH
57137: LD_INT 1
57139: MINUS
57140: ST_TO_ADDR
// end ;
57141: GO 56947
57143: POP
57144: POP
// for i in tmp do
57145: LD_ADDR_VAR 0 5
57149: PUSH
57150: LD_VAR 0 7
57154: PUSH
57155: FOR_IN
57156: IFFALSE 57194
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57158: LD_VAR 0 1
57162: PPUSH
57163: LD_VAR 0 5
57167: PUSH
57168: LD_INT 1
57170: ARRAY
57171: PPUSH
57172: LD_VAR 0 5
57176: PUSH
57177: LD_INT 2
57179: ARRAY
57180: PPUSH
57181: CALL 56140 0 3
57185: NOT
57186: IFFALSE 57192
// exit ;
57188: POP
57189: POP
57190: GO 57196
57192: GO 57155
57194: POP
57195: POP
// end ;
57196: LD_VAR 0 4
57200: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
57201: LD_INT 0
57203: PPUSH
57204: PPUSH
57205: PPUSH
57206: PPUSH
57207: PPUSH
57208: PPUSH
57209: PPUSH
57210: PPUSH
57211: PPUSH
// if GetClass ( unit ) <> class_sniper then
57212: LD_VAR 0 1
57216: PPUSH
57217: CALL_OW 257
57221: PUSH
57222: LD_INT 5
57224: NONEQUAL
57225: IFFALSE 57229
// exit ;
57227: GO 57695
// dist := 8 ;
57229: LD_ADDR_VAR 0 5
57233: PUSH
57234: LD_INT 8
57236: ST_TO_ADDR
// viewRange := 12 ;
57237: LD_ADDR_VAR 0 8
57241: PUSH
57242: LD_INT 12
57244: ST_TO_ADDR
// side := GetSide ( unit ) ;
57245: LD_ADDR_VAR 0 6
57249: PUSH
57250: LD_VAR 0 1
57254: PPUSH
57255: CALL_OW 255
57259: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57260: LD_INT 61
57262: PPUSH
57263: LD_VAR 0 6
57267: PPUSH
57268: CALL_OW 321
57272: PUSH
57273: LD_INT 2
57275: EQUAL
57276: IFFALSE 57286
// viewRange := 16 ;
57278: LD_ADDR_VAR 0 8
57282: PUSH
57283: LD_INT 16
57285: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57286: LD_VAR 0 1
57290: PPUSH
57291: LD_VAR 0 2
57295: PPUSH
57296: LD_VAR 0 3
57300: PPUSH
57301: CALL_OW 297
57305: PUSH
57306: LD_VAR 0 5
57310: GREATER
57311: IFFALSE 57390
// begin ComMoveXY ( unit , x , y ) ;
57313: LD_VAR 0 1
57317: PPUSH
57318: LD_VAR 0 2
57322: PPUSH
57323: LD_VAR 0 3
57327: PPUSH
57328: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57332: LD_INT 35
57334: PPUSH
57335: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57339: LD_VAR 0 1
57343: PPUSH
57344: LD_VAR 0 2
57348: PPUSH
57349: LD_VAR 0 3
57353: PPUSH
57354: CALL 45880 0 3
57358: NOT
57359: IFFALSE 57363
// exit ;
57361: GO 57695
// until GetDistUnitXY ( unit , x , y ) < dist ;
57363: LD_VAR 0 1
57367: PPUSH
57368: LD_VAR 0 2
57372: PPUSH
57373: LD_VAR 0 3
57377: PPUSH
57378: CALL_OW 297
57382: PUSH
57383: LD_VAR 0 5
57387: LESS
57388: IFFALSE 57332
// end ; ComTurnXY ( unit , x , y ) ;
57390: LD_VAR 0 1
57394: PPUSH
57395: LD_VAR 0 2
57399: PPUSH
57400: LD_VAR 0 3
57404: PPUSH
57405: CALL_OW 118
// repeat if Multiplayer then
57409: LD_OWVAR 4
57413: IFFALSE 57424
// wait ( 35 ) else
57415: LD_INT 35
57417: PPUSH
57418: CALL_OW 67
57422: GO 57431
// wait ( 5 ) ;
57424: LD_INT 5
57426: PPUSH
57427: CALL_OW 67
// _d := GetDir ( unit ) ;
57431: LD_ADDR_VAR 0 11
57435: PUSH
57436: LD_VAR 0 1
57440: PPUSH
57441: CALL_OW 254
57445: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57446: LD_ADDR_VAR 0 7
57450: PUSH
57451: LD_VAR 0 1
57455: PPUSH
57456: CALL_OW 250
57460: PPUSH
57461: LD_VAR 0 1
57465: PPUSH
57466: CALL_OW 251
57470: PPUSH
57471: LD_VAR 0 2
57475: PPUSH
57476: LD_VAR 0 3
57480: PPUSH
57481: CALL 48488 0 4
57485: ST_TO_ADDR
// until dir = _d ;
57486: LD_VAR 0 7
57490: PUSH
57491: LD_VAR 0 11
57495: EQUAL
57496: IFFALSE 57409
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57498: LD_ADDR_VAR 0 9
57502: PUSH
57503: LD_VAR 0 1
57507: PPUSH
57508: CALL_OW 250
57512: PPUSH
57513: LD_VAR 0 7
57517: PPUSH
57518: LD_VAR 0 5
57522: PPUSH
57523: CALL_OW 272
57527: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57528: LD_ADDR_VAR 0 10
57532: PUSH
57533: LD_VAR 0 1
57537: PPUSH
57538: CALL_OW 251
57542: PPUSH
57543: LD_VAR 0 7
57547: PPUSH
57548: LD_VAR 0 5
57552: PPUSH
57553: CALL_OW 273
57557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57558: LD_VAR 0 9
57562: PPUSH
57563: LD_VAR 0 10
57567: PPUSH
57568: CALL_OW 488
57572: NOT
57573: IFFALSE 57577
// exit ;
57575: GO 57695
// ComAnimCustom ( unit , 1 ) ;
57577: LD_VAR 0 1
57581: PPUSH
57582: LD_INT 1
57584: PPUSH
57585: CALL_OW 592
// p := 0 ;
57589: LD_ADDR_VAR 0 12
57593: PUSH
57594: LD_INT 0
57596: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57597: LD_VAR 0 9
57601: PPUSH
57602: LD_VAR 0 10
57606: PPUSH
57607: LD_VAR 0 6
57611: PPUSH
57612: LD_VAR 0 8
57616: PPUSH
57617: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57621: LD_INT 35
57623: PPUSH
57624: CALL_OW 67
// p := Inc ( p ) ;
57628: LD_ADDR_VAR 0 12
57632: PUSH
57633: LD_VAR 0 12
57637: PPUSH
57638: CALL 48444 0 1
57642: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57643: LD_VAR 0 12
57647: PUSH
57648: LD_INT 3
57650: EQUAL
57651: PUSH
57652: LD_VAR 0 1
57656: PPUSH
57657: CALL_OW 302
57661: NOT
57662: OR
57663: PUSH
57664: LD_VAR 0 1
57668: PPUSH
57669: CALL_OW 301
57673: OR
57674: IFFALSE 57621
// RemoveSeeing ( _x , _y , side ) ;
57676: LD_VAR 0 9
57680: PPUSH
57681: LD_VAR 0 10
57685: PPUSH
57686: LD_VAR 0 6
57690: PPUSH
57691: CALL_OW 331
// end ; end_of_file
57695: LD_VAR 0 4
57699: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57700: LD_EXP 39
57704: IFFALSE 58045
57706: GO 57708
57708: DISABLE
57709: LD_INT 0
57711: PPUSH
57712: PPUSH
57713: PPUSH
// begin mpKingPoints := [ ] ;
57714: LD_ADDR_EXP 54
57718: PUSH
57719: EMPTY
57720: ST_TO_ADDR
// if mpTeamGame then
57721: LD_EXP 11
57725: IFFALSE 57779
// begin for i := 1 to Count ( mpTeams ) do
57727: LD_ADDR_VAR 0 1
57731: PUSH
57732: DOUBLE
57733: LD_INT 1
57735: DEC
57736: ST_TO_ADDR
57737: LD_EXP 10
57741: PPUSH
57742: CALL 11474 0 1
57746: PUSH
57747: FOR_TO
57748: IFFALSE 57775
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57750: LD_ADDR_EXP 54
57754: PUSH
57755: LD_EXP 54
57759: PPUSH
57760: LD_VAR 0 1
57764: PPUSH
57765: LD_INT 0
57767: PPUSH
57768: CALL_OW 1
57772: ST_TO_ADDR
57773: GO 57747
57775: POP
57776: POP
// end else
57777: GO 57822
// begin for i := 1 to 8 do
57779: LD_ADDR_VAR 0 1
57783: PUSH
57784: DOUBLE
57785: LD_INT 1
57787: DEC
57788: ST_TO_ADDR
57789: LD_INT 8
57791: PUSH
57792: FOR_TO
57793: IFFALSE 57820
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57795: LD_ADDR_EXP 54
57799: PUSH
57800: LD_EXP 54
57804: PPUSH
57805: LD_VAR 0 1
57809: PPUSH
57810: LD_INT 0
57812: PPUSH
57813: CALL_OW 1
57817: ST_TO_ADDR
57818: GO 57792
57820: POP
57821: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57822: LD_ADDR_VAR 0 3
57826: PUSH
57827: LD_EXP 2
57831: PPUSH
57832: LD_INT 0
57834: PPUSH
57835: CALL_OW 517
57839: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57840: LD_ADDR_VAR 0 1
57844: PUSH
57845: DOUBLE
57846: LD_INT 1
57848: DEC
57849: ST_TO_ADDR
57850: LD_VAR 0 3
57854: PUSH
57855: LD_INT 1
57857: ARRAY
57858: PUSH
57859: FOR_TO
57860: IFFALSE 57927
// for j := 1 to 8 do
57862: LD_ADDR_VAR 0 2
57866: PUSH
57867: DOUBLE
57868: LD_INT 1
57870: DEC
57871: ST_TO_ADDR
57872: LD_INT 8
57874: PUSH
57875: FOR_TO
57876: IFFALSE 57923
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57878: LD_VAR 0 3
57882: PUSH
57883: LD_INT 1
57885: ARRAY
57886: PUSH
57887: LD_VAR 0 1
57891: ARRAY
57892: PPUSH
57893: LD_VAR 0 3
57897: PUSH
57898: LD_INT 2
57900: ARRAY
57901: PUSH
57902: LD_VAR 0 1
57906: ARRAY
57907: PPUSH
57908: LD_VAR 0 2
57912: PPUSH
57913: LD_INT 12
57915: NEG
57916: PPUSH
57917: CALL_OW 330
57921: GO 57875
57923: POP
57924: POP
57925: GO 57859
57927: POP
57928: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57929: LD_EXP 34
57933: PPUSH
57934: LD_INT 1
57936: PPUSH
57937: CALL_OW 424
// UpdateCounter ;
57941: CALL 58549 0 0
// repeat wait ( 0 0$1 ) ;
57945: LD_INT 35
57947: PPUSH
57948: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57952: LD_ADDR_VAR 0 3
57956: PUSH
57957: LD_EXP 34
57961: PPUSH
57962: LD_INT 3
57964: PUSH
57965: LD_INT 57
57967: PUSH
57968: EMPTY
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 50
57977: PUSH
57978: EMPTY
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: LD_INT 30
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 30
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: PPUSH
58014: CALL_OW 70
58018: ST_TO_ADDR
// if not tmp then
58019: LD_VAR 0 3
58023: NOT
58024: IFFALSE 58028
// continue ;
58026: GO 57945
// AddPoints ( tmp ) ;
58028: LD_VAR 0 3
58032: PPUSH
58033: CALL 58227 0 1
// UpdateCounter ;
58037: CALL 58549 0 0
// until false ;
58041: LD_INT 0
58043: IFFALSE 57945
// end ;
58045: PPOPN 3
58047: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
58048: LD_EXP 39
58052: PUSH
58053: LD_EXP 37
58057: AND
58058: IFFALSE 58224
58060: GO 58062
58062: DISABLE
58063: LD_INT 0
58065: PPUSH
58066: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
58067: LD_ADDR_VAR 0 2
58071: PUSH
58072: LD_EXP 2
58076: PPUSH
58077: LD_INT 0
58079: PPUSH
58080: CALL_OW 517
58084: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58085: LD_ADDR_VAR 0 1
58089: PUSH
58090: DOUBLE
58091: LD_INT 1
58093: DEC
58094: ST_TO_ADDR
58095: LD_VAR 0 2
58099: PUSH
58100: LD_INT 1
58102: ARRAY
58103: PUSH
58104: FOR_TO
58105: IFFALSE 58146
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
58107: LD_VAR 0 2
58111: PUSH
58112: LD_INT 1
58114: ARRAY
58115: PUSH
58116: LD_VAR 0 1
58120: ARRAY
58121: PPUSH
58122: LD_VAR 0 2
58126: PUSH
58127: LD_INT 2
58129: ARRAY
58130: PUSH
58131: LD_VAR 0 1
58135: ARRAY
58136: PPUSH
58137: LD_INT 125
58139: PPUSH
58140: CALL_OW 495
58144: GO 58104
58146: POP
58147: POP
// repeat wait ( mpEmissions ) ;
58148: LD_EXP 37
58152: PPUSH
58153: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
58157: LD_ADDR_VAR 0 1
58161: PUSH
58162: DOUBLE
58163: LD_INT 1
58165: DEC
58166: ST_TO_ADDR
58167: LD_VAR 0 2
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PUSH
58176: FOR_TO
58177: IFFALSE 58218
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
58179: LD_VAR 0 2
58183: PUSH
58184: LD_INT 1
58186: ARRAY
58187: PUSH
58188: LD_VAR 0 1
58192: ARRAY
58193: PPUSH
58194: LD_VAR 0 2
58198: PUSH
58199: LD_INT 2
58201: ARRAY
58202: PUSH
58203: LD_VAR 0 1
58207: ARRAY
58208: PPUSH
58209: LD_INT 15
58211: PPUSH
58212: CALL_OW 495
58216: GO 58176
58218: POP
58219: POP
// until false ;
58220: LD_INT 0
58222: IFFALSE 58148
// end ;
58224: PPOPN 2
58226: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
58227: LD_INT 0
58229: PPUSH
58230: PPUSH
58231: PPUSH
58232: PPUSH
58233: PPUSH
// if mpTeamGame then
58234: LD_EXP 11
58238: IFFALSE 58435
// begin first := depots [ 1 ] ;
58240: LD_ADDR_VAR 0 4
58244: PUSH
58245: LD_VAR 0 1
58249: PUSH
58250: LD_INT 1
58252: ARRAY
58253: ST_TO_ADDR
// side := GetSide ( first ) ;
58254: LD_ADDR_VAR 0 6
58258: PUSH
58259: LD_VAR 0 4
58263: PPUSH
58264: CALL_OW 255
58268: ST_TO_ADDR
// for i := 1 to mpTeams do
58269: LD_ADDR_VAR 0 3
58273: PUSH
58274: DOUBLE
58275: LD_INT 1
58277: DEC
58278: ST_TO_ADDR
58279: LD_EXP 10
58283: PUSH
58284: FOR_TO
58285: IFFALSE 58319
// if side in mpTeams [ i ] then
58287: LD_VAR 0 6
58291: PUSH
58292: LD_EXP 10
58296: PUSH
58297: LD_VAR 0 3
58301: ARRAY
58302: IN
58303: IFFALSE 58317
// begin team := i ;
58305: LD_ADDR_VAR 0 5
58309: PUSH
58310: LD_VAR 0 3
58314: ST_TO_ADDR
// break ;
58315: GO 58319
// end ;
58317: GO 58284
58319: POP
58320: POP
// if not team then
58321: LD_VAR 0 5
58325: NOT
58326: IFFALSE 58330
// exit ;
58328: GO 58544
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58330: LD_EXP 34
58334: PPUSH
58335: LD_INT 81
58337: PUSH
58338: LD_VAR 0 6
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PPUSH
58347: CALL_OW 70
58351: IFFALSE 58355
// exit ;
58353: GO 58544
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58355: LD_ADDR_EXP 54
58359: PUSH
58360: LD_EXP 54
58364: PPUSH
58365: LD_VAR 0 5
58369: PPUSH
58370: LD_EXP 54
58374: PUSH
58375: LD_VAR 0 5
58379: ARRAY
58380: PUSH
58381: LD_INT 1
58383: PLUS
58384: PPUSH
58385: CALL_OW 1
58389: ST_TO_ADDR
// for i in mpTeams [ team ] do
58390: LD_ADDR_VAR 0 3
58394: PUSH
58395: LD_EXP 10
58399: PUSH
58400: LD_VAR 0 5
58404: ARRAY
58405: PUSH
58406: FOR_IN
58407: IFFALSE 58431
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58409: LD_VAR 0 3
58413: PPUSH
58414: LD_EXP 54
58418: PUSH
58419: LD_VAR 0 5
58423: ARRAY
58424: PPUSH
58425: CALL_OW 506
58429: GO 58406
58431: POP
58432: POP
// end else
58433: GO 58544
// begin first := depots [ 1 ] ;
58435: LD_ADDR_VAR 0 4
58439: PUSH
58440: LD_VAR 0 1
58444: PUSH
58445: LD_INT 1
58447: ARRAY
58448: ST_TO_ADDR
// side := GetSide ( first ) ;
58449: LD_ADDR_VAR 0 6
58453: PUSH
58454: LD_VAR 0 4
58458: PPUSH
58459: CALL_OW 255
58463: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58464: LD_EXP 34
58468: PPUSH
58469: LD_INT 81
58471: PUSH
58472: LD_VAR 0 6
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PPUSH
58481: CALL_OW 70
58485: IFFALSE 58489
// exit ;
58487: GO 58544
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58489: LD_ADDR_EXP 54
58493: PUSH
58494: LD_EXP 54
58498: PPUSH
58499: LD_VAR 0 6
58503: PPUSH
58504: LD_EXP 54
58508: PUSH
58509: LD_VAR 0 6
58513: ARRAY
58514: PUSH
58515: LD_INT 1
58517: PLUS
58518: PPUSH
58519: CALL_OW 1
58523: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58524: LD_VAR 0 6
58528: PPUSH
58529: LD_EXP 54
58533: PUSH
58534: LD_VAR 0 6
58538: ARRAY
58539: PPUSH
58540: CALL_OW 506
// end ; end ;
58544: LD_VAR 0 2
58548: RET
// function UpdateCounter ; var i ; begin
58549: LD_INT 0
58551: PPUSH
58552: PPUSH
// result := [ ] ;
58553: LD_ADDR_VAR 0 1
58557: PUSH
58558: EMPTY
58559: ST_TO_ADDR
// if mpTeamGame then
58560: LD_EXP 11
58564: IFFALSE 58631
// begin for i := 1 to mpTeams do
58566: LD_ADDR_VAR 0 2
58570: PUSH
58571: DOUBLE
58572: LD_INT 1
58574: DEC
58575: ST_TO_ADDR
58576: LD_EXP 10
58580: PUSH
58581: FOR_TO
58582: IFFALSE 58627
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58584: LD_ADDR_VAR 0 1
58588: PUSH
58589: LD_VAR 0 1
58593: PUSH
58594: LD_STRING #KingoftheHill-Team
58596: PUSH
58597: LD_VAR 0 2
58601: PUSH
58602: LD_EXP 54
58606: PUSH
58607: LD_VAR 0 2
58611: ARRAY
58612: PUSH
58613: LD_EXP 35
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: ADD
58624: ST_TO_ADDR
58625: GO 58581
58627: POP
58628: POP
// end else
58629: GO 58704
// begin for i := 1 to 8 do
58631: LD_ADDR_VAR 0 2
58635: PUSH
58636: DOUBLE
58637: LD_INT 1
58639: DEC
58640: ST_TO_ADDR
58641: LD_INT 8
58643: PUSH
58644: FOR_TO
58645: IFFALSE 58702
// if mpSidePositions [ i ] then
58647: LD_EXP 7
58651: PUSH
58652: LD_VAR 0 2
58656: ARRAY
58657: IFFALSE 58700
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58659: LD_ADDR_VAR 0 1
58663: PUSH
58664: LD_VAR 0 1
58668: PUSH
58669: LD_STRING #KingoftheHill-Player
58671: PUSH
58672: LD_VAR 0 2
58676: PUSH
58677: LD_EXP 54
58681: PUSH
58682: LD_VAR 0 2
58686: ARRAY
58687: PUSH
58688: LD_EXP 35
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: ADD
58699: ST_TO_ADDR
58700: GO 58644
58702: POP
58703: POP
// end ; mpDisplayStrings := result ;
58704: LD_ADDR_EXP 38
58708: PUSH
58709: LD_VAR 0 1
58713: ST_TO_ADDR
// end ;
58714: LD_VAR 0 1
58718: RET
// export function HowMuchPointsKing ( side ) ; begin
58719: LD_INT 0
58721: PPUSH
// result := HowMuchPoints ( side ) ;
58722: LD_ADDR_VAR 0 2
58726: PUSH
58727: LD_VAR 0 1
58731: PPUSH
58732: CALL 58742 0 1
58736: ST_TO_ADDR
// end ;
58737: LD_VAR 0 2
58741: RET
// function HowMuchPoints ( side ) ; var i ; begin
58742: LD_INT 0
58744: PPUSH
58745: PPUSH
// if mpTeamGame then
58746: LD_EXP 11
58750: IFFALSE 58819
// begin for i := 1 to Count ( mpTeams ) do
58752: LD_ADDR_VAR 0 3
58756: PUSH
58757: DOUBLE
58758: LD_INT 1
58760: DEC
58761: ST_TO_ADDR
58762: LD_EXP 10
58766: PPUSH
58767: CALL 11474 0 1
58771: PUSH
58772: FOR_TO
58773: IFFALSE 58815
// begin if side in mpTeams [ i ] then
58775: LD_VAR 0 1
58779: PUSH
58780: LD_EXP 10
58784: PUSH
58785: LD_VAR 0 3
58789: ARRAY
58790: IN
58791: IFFALSE 58813
// begin result := mpKingPoints [ i ] ;
58793: LD_ADDR_VAR 0 2
58797: PUSH
58798: LD_EXP 54
58802: PUSH
58803: LD_VAR 0 3
58807: ARRAY
58808: ST_TO_ADDR
// exit ;
58809: POP
58810: POP
58811: GO 58835
// end ; end ;
58813: GO 58772
58815: POP
58816: POP
// end else
58817: GO 58835
// result := mpKingPoints [ side ] ;
58819: LD_ADDR_VAR 0 2
58823: PUSH
58824: LD_EXP 54
58828: PUSH
58829: LD_VAR 0 1
58833: ARRAY
58834: ST_TO_ADDR
// end ;
58835: LD_VAR 0 2
58839: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58840: LD_EXP 39
58844: PUSH
58845: CALL 59167 0 0
58849: AND
58850: PUSH
58851: LD_OWVAR 4
58855: AND
58856: IFFALSE 59092
58858: GO 58860
58860: DISABLE
58861: LD_INT 0
58863: PPUSH
58864: PPUSH
// begin canWin := false ;
58865: LD_ADDR_VAR 0 2
58869: PUSH
58870: LD_INT 0
58872: ST_TO_ADDR
// if not HasPower ( your_side ) then
58873: LD_OWVAR 2
58877: PPUSH
58878: CALL 59207 0 1
58882: NOT
58883: IFFALSE 58894
// begin Multiplayer_Loose_Message ;
58885: CALL_OW 521
// enable ( mpLose ) ;
58889: LD_INT 102
58891: ENABLE_MARKED
// end else
58892: GO 59092
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58894: LD_ADDR_VAR 0 2
58898: PUSH
58899: LD_OWVAR 2
58903: PPUSH
58904: CALL 58742 0 1
58908: PUSH
58909: LD_EXP 35
58913: GREATEREQUAL
58914: PUSH
58915: LD_OWVAR 2
58919: PPUSH
58920: CALL 59207 0 1
58924: AND
58925: PUSH
58926: CALL 59095 0 0
58930: NOT
58931: OR
58932: ST_TO_ADDR
// for i := 1 to 8 do
58933: LD_ADDR_VAR 0 1
58937: PUSH
58938: DOUBLE
58939: LD_INT 1
58941: DEC
58942: ST_TO_ADDR
58943: LD_INT 8
58945: PUSH
58946: FOR_TO
58947: IFFALSE 59078
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58949: LD_EXP 7
58953: PUSH
58954: LD_VAR 0 1
58958: ARRAY
58959: PUSH
58960: LD_VAR 0 1
58964: PPUSH
58965: CALL_OW 108
58969: AND
58970: PUSH
58971: LD_VAR 0 1
58975: PUSH
58976: LD_OWVAR 2
58980: NONEQUAL
58981: AND
58982: IFFALSE 59076
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58984: LD_EXP 8
58988: PUSH
58989: LD_VAR 0 1
58993: ARRAY
58994: NOT
58995: PUSH
58996: LD_EXP 8
59000: PUSH
59001: LD_VAR 0 1
59005: ARRAY
59006: PUSH
59007: LD_EXP 8
59011: PUSH
59012: LD_OWVAR 2
59016: ARRAY
59017: NONEQUAL
59018: PUSH
59019: LD_OWVAR 2
59023: PPUSH
59024: LD_VAR 0 1
59028: PPUSH
59029: CALL_OW 81
59033: PUSH
59034: LD_INT 1
59036: NONEQUAL
59037: AND
59038: OR
59039: IFFALSE 59076
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
59041: LD_VAR 0 1
59045: PPUSH
59046: CALL 58742 0 1
59050: PUSH
59051: LD_EXP 35
59055: GREATEREQUAL
59056: PUSH
59057: LD_VAR 0 1
59061: PPUSH
59062: CALL 59207 0 1
59066: AND
59067: IFFALSE 59076
// begin enable ( mpLose ) ;
59069: LD_INT 102
59071: ENABLE_MARKED
// exit ;
59072: POP
59073: POP
59074: GO 59092
// end ;
59076: GO 58946
59078: POP
59079: POP
// if canWin then
59080: LD_VAR 0 2
59084: IFFALSE 59091
// enable ( mpWin ) else
59086: LD_INT 101
59088: ENABLE_MARKED
59089: GO 59092
// enable ;
59091: ENABLE
// end ; end ;
59092: PPOPN 2
59094: END
// function EnemiesInGame ; var i ; begin
59095: LD_INT 0
59097: PPUSH
59098: PPUSH
// result := false ;
59099: LD_ADDR_VAR 0 1
59103: PUSH
59104: LD_INT 0
59106: ST_TO_ADDR
// for i := 1 to 8 do
59107: LD_ADDR_VAR 0 2
59111: PUSH
59112: DOUBLE
59113: LD_INT 1
59115: DEC
59116: ST_TO_ADDR
59117: LD_INT 8
59119: PUSH
59120: FOR_TO
59121: IFFALSE 59160
// if i <> your_side and HasPower ( i ) then
59123: LD_VAR 0 2
59127: PUSH
59128: LD_OWVAR 2
59132: NONEQUAL
59133: PUSH
59134: LD_VAR 0 2
59138: PPUSH
59139: CALL 59207 0 1
59143: AND
59144: IFFALSE 59158
// begin result := true ;
59146: LD_ADDR_VAR 0 1
59150: PUSH
59151: LD_INT 1
59153: ST_TO_ADDR
// exit ;
59154: POP
59155: POP
59156: GO 59162
// end ;
59158: GO 59120
59160: POP
59161: POP
// end ;
59162: LD_VAR 0 1
59166: RET
// function CanWinLoose ; begin
59167: LD_INT 0
59169: PPUSH
// result := true ;
59170: LD_ADDR_VAR 0 1
59174: PUSH
59175: LD_INT 1
59177: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
59178: CALL_OW 531
59182: PUSH
59183: CALL_OW 519
59187: PUSH
59188: LD_INT 1
59190: GREATER
59191: AND
59192: IFFALSE 59202
// result := false ;
59194: LD_ADDR_VAR 0 1
59198: PUSH
59199: LD_INT 0
59201: ST_TO_ADDR
// end ;
59202: LD_VAR 0 1
59206: RET
// function HasPower ( i ) ; begin
59207: LD_INT 0
59209: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
59210: LD_ADDR_VAR 0 2
59214: PUSH
59215: LD_INT 22
59217: PUSH
59218: LD_VAR 0 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: LD_INT 21
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 33
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 33
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PPUSH
59270: CALL_OW 69
59274: ST_TO_ADDR
// end ; end_of_file
59275: LD_VAR 0 2
59279: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59280: PPOPN 6
59282: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59283: LD_EXP 3
59287: PUSH
59288: LD_INT 4
59290: EQUAL
59291: IFFALSE 59327
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59293: LD_STRING setGameDifficulty(
59295: PUSH
59296: LD_OWVAR 67
59300: STR
59301: PUSH
59302: LD_STRING )
59304: STR
59305: PPUSH
59306: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59310: LD_STRING displayDifficulty(
59312: PUSH
59313: LD_OWVAR 67
59317: STR
59318: PUSH
59319: LD_STRING )
59321: STR
59322: PPUSH
59323: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59327: CALL 59356 0 0
// end ; end_of_file
59331: PPOPN 1
59333: END
// every 0 0$1 do
59334: GO 59336
59336: DISABLE
// begin enable ;
59337: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59338: LD_STRING updateTimer(
59340: PUSH
59341: LD_OWVAR 1
59345: STR
59346: PUSH
59347: LD_STRING );
59349: STR
59350: PPUSH
59351: CALL_OW 559
// end ;
59355: END
// export function SOS_MapStart ( ) ; begin
59356: LD_INT 0
59358: PPUSH
// UpdateFactoryWaypoints ( ) ;
59359: CALL 60284 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59363: CALL 60536 0 0
// ParseMultiDataToLua ( ) ;
59367: CALL 60683 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59371: LD_STRING setSpecLogoNumber(
59373: PUSH
59374: LD_INT 2
59376: STR
59377: PUSH
59378: LD_STRING ,
59380: STR
59381: PUSH
59382: LD_INT 1
59384: STR
59385: PUSH
59386: LD_STRING )
59388: STR
59389: PPUSH
59390: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
59394: LD_STRING setSpecLogoNumber(
59396: PUSH
59397: LD_INT 3
59399: STR
59400: PUSH
59401: LD_STRING ,
59403: STR
59404: PUSH
59405: LD_INT 2
59407: STR
59408: PUSH
59409: LD_STRING )
59411: STR
59412: PPUSH
59413: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
59417: LD_STRING setSpecLogoNumber(
59419: PUSH
59420: LD_INT 4
59422: STR
59423: PUSH
59424: LD_STRING ,
59426: STR
59427: PUSH
59428: LD_INT 3
59430: STR
59431: PUSH
59432: LD_STRING )
59434: STR
59435: PPUSH
59436: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
59440: LD_STRING setSpecLogoNumber(
59442: PUSH
59443: LD_INT 5
59445: STR
59446: PUSH
59447: LD_STRING ,
59449: STR
59450: PUSH
59451: LD_INT 4
59453: STR
59454: PUSH
59455: LD_STRING )
59457: STR
59458: PPUSH
59459: CALL_OW 559
// end ;
59463: LD_VAR 0 1
59467: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
59468: LD_INT 0
59470: PPUSH
59471: PPUSH
59472: PPUSH
59473: PPUSH
59474: PPUSH
59475: PPUSH
59476: PPUSH
59477: PPUSH
59478: PPUSH
// for i := 1 to 8 do
59479: LD_ADDR_VAR 0 2
59483: PUSH
59484: DOUBLE
59485: LD_INT 1
59487: DEC
59488: ST_TO_ADDR
59489: LD_INT 8
59491: PUSH
59492: FOR_TO
59493: IFFALSE 59878
// begin if mpSidePositions [ i ] then
59495: LD_EXP 7
59499: PUSH
59500: LD_VAR 0 2
59504: ARRAY
59505: IFFALSE 59876
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
59507: LD_ADDR_VAR 0 7
59511: PUSH
59512: LD_INT 22
59514: PUSH
59515: LD_VAR 0 2
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 21
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PPUSH
59538: CALL_OW 69
59542: PPUSH
59543: CALL 11474 0 1
59547: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59548: LD_ADDR_VAR 0 9
59552: PUSH
59553: LD_INT 22
59555: PUSH
59556: LD_VAR 0 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 30
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 30
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: LIST
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PPUSH
59597: CALL_OW 69
59601: ST_TO_ADDR
// crates := 0 ;
59602: LD_ADDR_VAR 0 4
59606: PUSH
59607: LD_INT 0
59609: ST_TO_ADDR
// oil := 0 ;
59610: LD_ADDR_VAR 0 5
59614: PUSH
59615: LD_INT 0
59617: ST_TO_ADDR
// sib := 0 ;
59618: LD_ADDR_VAR 0 6
59622: PUSH
59623: LD_INT 0
59625: ST_TO_ADDR
// if bases then
59626: LD_VAR 0 9
59630: IFFALSE 59736
// begin for j in bases do
59632: LD_ADDR_VAR 0 3
59636: PUSH
59637: LD_VAR 0 9
59641: PUSH
59642: FOR_IN
59643: IFFALSE 59734
// begin base := GetBase ( j ) ;
59645: LD_ADDR_VAR 0 8
59649: PUSH
59650: LD_VAR 0 3
59654: PPUSH
59655: CALL_OW 274
59659: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
59660: LD_ADDR_VAR 0 4
59664: PUSH
59665: LD_VAR 0 4
59669: PUSH
59670: LD_VAR 0 8
59674: PPUSH
59675: LD_INT 1
59677: PPUSH
59678: CALL_OW 275
59682: PLUS
59683: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
59684: LD_ADDR_VAR 0 5
59688: PUSH
59689: LD_VAR 0 5
59693: PUSH
59694: LD_VAR 0 8
59698: PPUSH
59699: LD_INT 2
59701: PPUSH
59702: CALL_OW 275
59706: PLUS
59707: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
59708: LD_ADDR_VAR 0 6
59712: PUSH
59713: LD_VAR 0 6
59717: PUSH
59718: LD_VAR 0 8
59722: PPUSH
59723: LD_INT 3
59725: PPUSH
59726: CALL_OW 275
59730: PLUS
59731: ST_TO_ADDR
// end ;
59732: GO 59642
59734: POP
59735: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
59736: LD_STRING setSpecText(
59738: PUSH
59739: LD_VAR 0 2
59743: STR
59744: PUSH
59745: LD_STRING ,
59747: STR
59748: PUSH
59749: LD_INT 2
59751: STR
59752: PUSH
59753: LD_STRING ,
59755: STR
59756: PUSH
59757: LD_VAR 0 4
59761: STR
59762: PUSH
59763: LD_STRING )
59765: STR
59766: PPUSH
59767: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
59771: LD_STRING setSpecText(
59773: PUSH
59774: LD_VAR 0 2
59778: STR
59779: PUSH
59780: LD_STRING ,
59782: STR
59783: PUSH
59784: LD_INT 3
59786: STR
59787: PUSH
59788: LD_STRING ,
59790: STR
59791: PUSH
59792: LD_VAR 0 5
59796: STR
59797: PUSH
59798: LD_STRING )
59800: STR
59801: PPUSH
59802: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
59806: LD_STRING setSpecText(
59808: PUSH
59809: LD_VAR 0 2
59813: STR
59814: PUSH
59815: LD_STRING ,
59817: STR
59818: PUSH
59819: LD_INT 4
59821: STR
59822: PUSH
59823: LD_STRING ,
59825: STR
59826: PUSH
59827: LD_VAR 0 6
59831: STR
59832: PUSH
59833: LD_STRING )
59835: STR
59836: PPUSH
59837: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
59841: LD_STRING setSpecText(
59843: PUSH
59844: LD_VAR 0 2
59848: STR
59849: PUSH
59850: LD_STRING ,
59852: STR
59853: PUSH
59854: LD_INT 5
59856: STR
59857: PUSH
59858: LD_STRING ,
59860: STR
59861: PUSH
59862: LD_VAR 0 7
59866: STR
59867: PUSH
59868: LD_STRING )
59870: STR
59871: PPUSH
59872: CALL_OW 559
// end ; end ;
59876: GO 59492
59878: POP
59879: POP
// end ;
59880: LD_VAR 0 1
59884: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
59885: LD_INT 2
59887: PUSH
59888: LD_INT 30
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 30
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: LIST
59912: PPUSH
59913: CALL_OW 69
59917: IFFALSE 59927
59919: GO 59921
59921: DISABLE
// begin enable ;
59922: ENABLE
// UpdateSpectatorBar ;
59923: CALL 59468 0 0
// end ;
59927: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59928: LD_INT 0
59930: PPUSH
// end ;
59931: LD_VAR 0 12
59935: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59936: LD_INT 0
59938: PPUSH
59939: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59940: LD_VAR 0 1
59944: NOT
59945: PUSH
59946: LD_VAR 0 2
59950: PPUSH
59951: LD_VAR 0 3
59955: PPUSH
59956: CALL_OW 488
59960: NOT
59961: OR
59962: PUSH
59963: LD_VAR 0 1
59967: PPUSH
59968: CALL_OW 266
59972: PUSH
59973: LD_INT 3
59975: NONEQUAL
59976: PUSH
59977: LD_VAR 0 1
59981: PPUSH
59982: CALL_OW 247
59986: PUSH
59987: LD_INT 1
59989: EQUAL
59990: NOT
59991: AND
59992: OR
59993: IFFALSE 59997
// exit ;
59995: GO 60279
// if GetType ( factory ) = unit_human then
59997: LD_VAR 0 1
60001: PPUSH
60002: CALL_OW 247
60006: PUSH
60007: LD_INT 1
60009: EQUAL
60010: IFFALSE 60027
// factory := IsInUnit ( factory ) ;
60012: LD_ADDR_VAR 0 1
60016: PUSH
60017: LD_VAR 0 1
60021: PPUSH
60022: CALL_OW 310
60026: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60027: LD_VAR 0 1
60031: PPUSH
60032: CALL_OW 266
60036: PUSH
60037: LD_INT 3
60039: NONEQUAL
60040: IFFALSE 60044
// exit ;
60042: GO 60279
// for i := 1 to Count ( factoryWaypoints ) do
60044: LD_ADDR_VAR 0 5
60048: PUSH
60049: DOUBLE
60050: LD_INT 1
60052: DEC
60053: ST_TO_ADDR
60054: LD_EXP 55
60058: PPUSH
60059: CALL 11474 0 1
60063: PUSH
60064: FOR_TO
60065: IFFALSE 60227
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60067: LD_VAR 0 2
60071: PPUSH
60072: LD_VAR 0 3
60076: PPUSH
60077: CALL_OW 428
60081: PUSH
60082: LD_EXP 55
60086: PUSH
60087: LD_VAR 0 5
60091: ARRAY
60092: PUSH
60093: LD_INT 2
60095: ARRAY
60096: EQUAL
60097: IFFALSE 60129
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60099: LD_ADDR_EXP 55
60103: PUSH
60104: LD_EXP 55
60108: PPUSH
60109: LD_VAR 0 5
60113: PPUSH
60114: CALL_OW 3
60118: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60119: CALL 60284 0 0
// exit ;
60123: POP
60124: POP
60125: GO 60279
// end else
60127: GO 60225
// if factory = factoryWaypoints [ i ] [ 2 ] then
60129: LD_VAR 0 1
60133: PUSH
60134: LD_EXP 55
60138: PUSH
60139: LD_VAR 0 5
60143: ARRAY
60144: PUSH
60145: LD_INT 2
60147: ARRAY
60148: EQUAL
60149: IFFALSE 60225
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60151: LD_ADDR_EXP 55
60155: PUSH
60156: LD_EXP 55
60160: PPUSH
60161: LD_VAR 0 5
60165: PPUSH
60166: CALL_OW 3
60170: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60171: LD_ADDR_EXP 55
60175: PUSH
60176: LD_EXP 55
60180: PPUSH
60181: LD_VAR 0 1
60185: PPUSH
60186: CALL_OW 255
60190: PUSH
60191: LD_VAR 0 1
60195: PUSH
60196: LD_VAR 0 2
60200: PUSH
60201: LD_VAR 0 3
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: PPUSH
60212: CALL 47083 0 2
60216: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60217: CALL 60284 0 0
// exit ;
60221: POP
60222: POP
60223: GO 60279
// end ; end ;
60225: GO 60064
60227: POP
60228: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60229: LD_ADDR_EXP 55
60233: PUSH
60234: LD_EXP 55
60238: PPUSH
60239: LD_VAR 0 1
60243: PPUSH
60244: CALL_OW 255
60248: PUSH
60249: LD_VAR 0 1
60253: PUSH
60254: LD_VAR 0 2
60258: PUSH
60259: LD_VAR 0 3
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: PPUSH
60270: CALL 47083 0 2
60274: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60275: CALL 60284 0 0
// end ;
60279: LD_VAR 0 4
60283: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60284: LD_INT 0
60286: PPUSH
60287: PPUSH
60288: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60289: LD_STRING resetFactoryWaypoint();
60291: PPUSH
60292: CALL_OW 559
// if factoryWaypoints then
60296: LD_EXP 55
60300: IFFALSE 60421
// begin list := factoryWaypoints ;
60302: LD_ADDR_VAR 0 3
60306: PUSH
60307: LD_EXP 55
60311: ST_TO_ADDR
// for i := 1 to list do
60312: LD_ADDR_VAR 0 2
60316: PUSH
60317: DOUBLE
60318: LD_INT 1
60320: DEC
60321: ST_TO_ADDR
60322: LD_VAR 0 3
60326: PUSH
60327: FOR_TO
60328: IFFALSE 60419
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60330: LD_STRING setFactoryWaypointXY(
60332: PUSH
60333: LD_VAR 0 3
60337: PUSH
60338: LD_VAR 0 2
60342: ARRAY
60343: PUSH
60344: LD_INT 1
60346: ARRAY
60347: STR
60348: PUSH
60349: LD_STRING ,
60351: STR
60352: PUSH
60353: LD_VAR 0 3
60357: PUSH
60358: LD_VAR 0 2
60362: ARRAY
60363: PUSH
60364: LD_INT 2
60366: ARRAY
60367: STR
60368: PUSH
60369: LD_STRING ,
60371: STR
60372: PUSH
60373: LD_VAR 0 3
60377: PUSH
60378: LD_VAR 0 2
60382: ARRAY
60383: PUSH
60384: LD_INT 3
60386: ARRAY
60387: STR
60388: PUSH
60389: LD_STRING ,
60391: STR
60392: PUSH
60393: LD_VAR 0 3
60397: PUSH
60398: LD_VAR 0 2
60402: ARRAY
60403: PUSH
60404: LD_INT 4
60406: ARRAY
60407: STR
60408: PUSH
60409: LD_STRING )
60411: STR
60412: PPUSH
60413: CALL_OW 559
60417: GO 60327
60419: POP
60420: POP
// end ; end ;
60421: LD_VAR 0 1
60425: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
60426: LD_INT 0
60428: PPUSH
// if HexInfo ( x , y ) = warehouse then
60429: LD_VAR 0 2
60433: PPUSH
60434: LD_VAR 0 3
60438: PPUSH
60439: CALL_OW 428
60443: PUSH
60444: LD_VAR 0 1
60448: EQUAL
60449: IFFALSE 60476
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60451: LD_ADDR_EXP 57
60455: PUSH
60456: LD_EXP 57
60460: PPUSH
60461: LD_VAR 0 1
60465: PPUSH
60466: LD_INT 0
60468: PPUSH
60469: CALL_OW 1
60473: ST_TO_ADDR
60474: GO 60527
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60476: LD_ADDR_EXP 57
60480: PUSH
60481: LD_EXP 57
60485: PPUSH
60486: LD_VAR 0 1
60490: PPUSH
60491: LD_VAR 0 1
60495: PPUSH
60496: CALL_OW 255
60500: PUSH
60501: LD_VAR 0 1
60505: PUSH
60506: LD_VAR 0 2
60510: PUSH
60511: LD_VAR 0 3
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: PPUSH
60522: CALL_OW 1
60526: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
60527: CALL 60536 0 0
// end ;
60531: LD_VAR 0 4
60535: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
60536: LD_INT 0
60538: PPUSH
60539: PPUSH
60540: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60541: LD_STRING resetWarehouseGatheringPoints();
60543: PPUSH
60544: CALL_OW 559
// if warehouseGatheringPoints then
60548: LD_EXP 57
60552: IFFALSE 60678
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
60554: LD_ADDR_VAR 0 3
60558: PUSH
60559: LD_EXP 57
60563: PPUSH
60564: CALL 50851 0 1
60568: ST_TO_ADDR
// for i := 1 to list do
60569: LD_ADDR_VAR 0 2
60573: PUSH
60574: DOUBLE
60575: LD_INT 1
60577: DEC
60578: ST_TO_ADDR
60579: LD_VAR 0 3
60583: PUSH
60584: FOR_TO
60585: IFFALSE 60676
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60587: LD_STRING setWarehouseGatheringPointXY(
60589: PUSH
60590: LD_VAR 0 3
60594: PUSH
60595: LD_VAR 0 2
60599: ARRAY
60600: PUSH
60601: LD_INT 1
60603: ARRAY
60604: STR
60605: PUSH
60606: LD_STRING ,
60608: STR
60609: PUSH
60610: LD_VAR 0 3
60614: PUSH
60615: LD_VAR 0 2
60619: ARRAY
60620: PUSH
60621: LD_INT 2
60623: ARRAY
60624: STR
60625: PUSH
60626: LD_STRING ,
60628: STR
60629: PUSH
60630: LD_VAR 0 3
60634: PUSH
60635: LD_VAR 0 2
60639: ARRAY
60640: PUSH
60641: LD_INT 3
60643: ARRAY
60644: STR
60645: PUSH
60646: LD_STRING ,
60648: STR
60649: PUSH
60650: LD_VAR 0 3
60654: PUSH
60655: LD_VAR 0 2
60659: ARRAY
60660: PUSH
60661: LD_INT 4
60663: ARRAY
60664: STR
60665: PUSH
60666: LD_STRING )
60668: STR
60669: PPUSH
60670: CALL_OW 559
60674: GO 60584
60676: POP
60677: POP
// end ; end ;
60678: LD_VAR 0 1
60682: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60683: LD_INT 0
60685: PPUSH
60686: PPUSH
// if not mpSidePositions then
60687: LD_EXP 7
60691: NOT
60692: IFFALSE 60696
// exit ;
60694: GO 60767
// result :=  ;
60696: LD_ADDR_VAR 0 1
60700: PUSH
60701: LD_STRING 
60703: ST_TO_ADDR
// for i := 1 to 8 do
60704: LD_ADDR_VAR 0 2
60708: PUSH
60709: DOUBLE
60710: LD_INT 1
60712: DEC
60713: ST_TO_ADDR
60714: LD_INT 8
60716: PUSH
60717: FOR_TO
60718: IFFALSE 60748
// begin result := result & mpSidePositions [ i ] & ; ;
60720: LD_ADDR_VAR 0 1
60724: PUSH
60725: LD_VAR 0 1
60729: PUSH
60730: LD_EXP 7
60734: PUSH
60735: LD_VAR 0 2
60739: ARRAY
60740: STR
60741: PUSH
60742: LD_STRING ;
60744: STR
60745: ST_TO_ADDR
// end ;
60746: GO 60717
60748: POP
60749: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60750: LD_STRING setMultiplayerRealPosition("
60752: PUSH
60753: LD_VAR 0 1
60757: STR
60758: PUSH
60759: LD_STRING ");
60761: STR
60762: PPUSH
60763: CALL_OW 559
// end ;
60767: LD_VAR 0 1
60771: RET
