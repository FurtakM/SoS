// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2728 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3104 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 100
 809: PUSH
 810: LD_INT 120
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 34
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 35
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 37
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 36
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 33
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 52865 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 52865 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 52865 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 52865 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 52865 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 52865 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 12214 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 52698 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 52698 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 52698 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 52698 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 52698 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 52698 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 52698 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 52698 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 52698 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 52698 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 52698 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 52698 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 52865 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 52865 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 52865 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 52865 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 52865 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 52865 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 52865 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 52865 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 52865 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 52865 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 52865 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 52865 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 52865 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 52865 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 52865 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 52865 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 52865 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 52865 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 49519 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 53663 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 7876 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 53680 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 8547 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 53721 0 2
2703: PPOPN 2
2705: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_VAR 0 3
2720: PPUSH
2721: CALL 8600 0 3
2725: PPOPN 3
2727: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
// disable ( mpActive ) ;
2732: LD_INT 100
2734: DISABLE_MARKED
// disable ( mpWin ) ;
2735: LD_INT 101
2737: DISABLE_MARKED
// disable ( mpLose ) ;
2738: LD_INT 102
2740: DISABLE_MARKED
// mpGameType := 0 ;
2741: LD_ADDR_EXP 3
2745: PUSH
2746: LD_INT 0
2748: ST_TO_ADDR
// mpGameSettings := [ ] ;
2749: LD_ADDR_EXP 6
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: EMPTY
2762: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2763: LD_ADDR_EXP 5
2767: PUSH
2768: EMPTY
2769: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2770: LD_ADDR_EXP 29
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2785: LD_ADDR_EXP 12
2789: PUSH
2790: EMPTY
2791: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2792: LD_ADDR_EXP 13
2796: PUSH
2797: EMPTY
2798: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2799: LD_ADDR_EXP 41
2803: PUSH
2804: EMPTY
2805: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2806: LD_ADDR_EXP 42
2810: PUSH
2811: EMPTY
2812: ST_TO_ADDR
// mpDepots := [ ] ;
2813: LD_ADDR_EXP 14
2817: PUSH
2818: EMPTY
2819: ST_TO_ADDR
// mpBuildings := [ ] ;
2820: LD_ADDR_EXP 17
2824: PUSH
2825: EMPTY
2826: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2827: LD_ADDR_EXP 18
2831: PUSH
2832: EMPTY
2833: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2834: LD_ADDR_EXP 19
2838: PUSH
2839: EMPTY
2840: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2841: LD_ADDR_EXP 20
2845: PUSH
2846: EMPTY
2847: ST_TO_ADDR
// mpStartingResources := [ ] ;
2848: LD_ADDR_EXP 15
2852: PUSH
2853: EMPTY
2854: ST_TO_ADDR
// mpStartPos := [ ] ;
2855: LD_ADDR_EXP 21
2859: PUSH
2860: EMPTY
2861: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2862: LD_ADDR_EXP 22
2866: PUSH
2867: LD_INT 1
2869: NEG
2870: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2871: LD_ADDR_EXP 23
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpApemans := [ ] ;
2878: LD_ADDR_EXP 30
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpApemansArea := [ ] ;
2885: LD_ADDR_EXP 31
2889: PUSH
2890: EMPTY
2891: ST_TO_ADDR
// mpRespawn := [ ] ;
2892: LD_ADDR_EXP 33
2896: PUSH
2897: EMPTY
2898: ST_TO_ADDR
// mpKingArea := 0 ;
2899: LD_ADDR_EXP 34
2903: PUSH
2904: LD_INT 0
2906: ST_TO_ADDR
// mpPoints := [ ] ;
2907: LD_ADDR_EXP 35
2911: PUSH
2912: EMPTY
2913: ST_TO_ADDR
// mpVehicles := 0 ;
2914: LD_ADDR_EXP 36
2918: PUSH
2919: LD_INT 0
2921: ST_TO_ADDR
// mpShipments := 0 ;
2922: LD_ADDR_EXP 27
2926: PUSH
2927: LD_INT 0
2929: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2930: LD_ADDR_EXP 40
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: PUSH
2939: EMPTY
2940: PUSH
2941: EMPTY
2942: PUSH
2943: EMPTY
2944: PUSH
2945: EMPTY
2946: PUSH
2947: EMPTY
2948: PUSH
2949: EMPTY
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2961: LD_ADDR_EXP 32
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: PUSH
2976: EMPTY
2977: PUSH
2978: EMPTY
2979: PUSH
2980: EMPTY
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: ST_TO_ADDR
// mpEmissions := 0 ;
2992: LD_ADDR_EXP 37
2996: PUSH
2997: LD_INT 0
2999: ST_TO_ADDR
// mpTeleports := 0 ;
3000: LD_ADDR_EXP 43
3004: PUSH
3005: LD_INT 0
3007: ST_TO_ADDR
// mpArtifacts := 0 ;
3008: LD_ADDR_EXP 44
3012: PUSH
3013: LD_INT 0
3015: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3016: LD_ADDR_EXP 25
3020: PUSH
3021: LD_INT 3
3023: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3024: LD_ADDR_EXP 24
3028: PUSH
3029: LD_INT 15
3031: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3032: LD_ADDR_EXP 38
3036: PUSH
3037: LD_INT 0
3039: ST_TO_ADDR
// mpGameActive := false ;
3040: LD_ADDR_EXP 39
3044: PUSH
3045: LD_INT 0
3047: ST_TO_ADDR
// mpBlockRespThread := false ;
3048: LD_ADDR_EXP 45
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// for i := 1 to 32 do
3056: LD_ADDR_VAR 0 2
3060: PUSH
3061: DOUBLE
3062: LD_INT 1
3064: DEC
3065: ST_TO_ADDR
3066: LD_INT 32
3068: PUSH
3069: FOR_TO
3070: IFFALSE 3097
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3072: LD_ADDR_EXP 6
3076: PUSH
3077: LD_EXP 6
3081: PPUSH
3082: LD_VAR 0 2
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 1
3094: ST_TO_ADDR
3095: GO 3069
3097: POP
3098: POP
// end ;
3099: LD_VAR 0 1
3103: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3104: LD_INT 0
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3120: LD_ADDR_VAR 0 14
3124: PUSH
3125: LD_INT 1
3127: PUSH
3128: LD_INT 2
3130: PUSH
3131: LD_INT 3
3133: PUSH
3134: LD_INT 5
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: ST_TO_ADDR
// for i in gameTypes do
3143: LD_ADDR_VAR 0 2
3147: PUSH
3148: LD_VAR 0 14
3152: PUSH
3153: FOR_IN
3154: IFFALSE 3163
// disable ( i ) ;
3156: LD_VAR 0 2
3160: DISABLE_MARKED
3161: GO 3153
3163: POP
3164: POP
// if Multiplayer then
3165: LD_OWVAR 4
3169: IFFALSE 3353
// begin mpGameType := mp_game_type ;
3171: LD_ADDR_EXP 3
3175: PUSH
3176: LD_OWVAR 6
3180: ST_TO_ADDR
// your_side := mp_player_side ;
3181: LD_ADDR_OWVAR 2
3185: PUSH
3186: LD_OWVAR 7
3190: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3191: LD_ADDR_EXP 7
3195: PUSH
3196: LD_OWVAR 17
3200: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3201: LD_ADDR_EXP 8
3205: PUSH
3206: LD_OWVAR 15
3210: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3211: LD_ADDR_EXP 9
3215: PUSH
3216: LD_OWVAR 16
3220: ST_TO_ADDR
// mpTeams := mp_teams ;
3221: LD_ADDR_EXP 10
3225: PUSH
3226: LD_OWVAR 12
3230: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3231: LD_ADDR_VAR 0 2
3235: PUSH
3236: DOUBLE
3237: LD_INT 1
3239: DEC
3240: ST_TO_ADDR
3241: LD_EXP 4
3245: PPUSH
3246: CALL 12214 0 1
3250: PUSH
3251: FOR_TO
3252: IFFALSE 3328
// begin setting := mpGameSettingsKeys [ i ] ;
3254: LD_ADDR_VAR 0 12
3258: PUSH
3259: LD_EXP 4
3263: PUSH
3264: LD_VAR 0 2
3268: ARRAY
3269: ST_TO_ADDR
// if setting then
3270: LD_VAR 0 12
3274: IFFALSE 3326
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3276: LD_ADDR_EXP 6
3280: PUSH
3281: LD_EXP 6
3285: PPUSH
3286: LD_VAR 0 2
3290: PPUSH
3291: LD_EXP 5
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_VAR 0 2
3306: PUSH
3307: LD_INT 1
3309: MINUS
3310: PPUSH
3311: CALL_OW 426
3315: PUSH
3316: LD_INT 1
3318: PLUS
3319: ARRAY
3320: PPUSH
3321: CALL_OW 1
3325: ST_TO_ADDR
// end ;
3326: GO 3251
3328: POP
3329: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3330: LD_ADDR_EXP 11
3334: PUSH
3335: LD_EXP 8
3339: PUSH
3340: LD_INT 0
3342: PUSH
3343: EMPTY
3344: LIST
3345: DIFF
3346: PUSH
3347: LD_INT 1
3349: GREATER
3350: ST_TO_ADDR
// end else
3351: GO 3353
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3353: LD_EXP 3
3357: PPUSH
3358: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3362: LD_EXP 18
3366: PPUSH
3367: CALL 12214 0 1
3371: IFFALSE 3402
// begin for i in mpMarkedAreas do
3373: LD_ADDR_VAR 0 2
3377: PUSH
3378: LD_EXP 18
3382: PUSH
3383: FOR_IN
3384: IFFALSE 3400
// SetAreaMapShow ( i , 0 ) ;
3386: LD_VAR 0 2
3390: PPUSH
3391: LD_INT 0
3393: PPUSH
3394: CALL_OW 424
3398: GO 3383
3400: POP
3401: POP
// end ; for i := 1 to 8 do
3402: LD_ADDR_VAR 0 2
3406: PUSH
3407: DOUBLE
3408: LD_INT 1
3410: DEC
3411: ST_TO_ADDR
3412: LD_INT 8
3414: PUSH
3415: FOR_TO
3416: IFFALSE 4752
// begin if not mpSidePositions [ i ] then
3418: LD_EXP 7
3422: PUSH
3423: LD_VAR 0 2
3427: ARRAY
3428: NOT
3429: IFFALSE 3433
// continue ;
3431: GO 3415
// side := i ;
3433: LD_ADDR_VAR 0 7
3437: PUSH
3438: LD_VAR 0 2
3442: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3443: LD_ADDR_VAR 0 9
3447: PUSH
3448: LD_EXP 9
3452: PUSH
3453: LD_VAR 0 2
3457: ARRAY
3458: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3459: LD_ADDR_VAR 0 8
3463: PUSH
3464: LD_EXP 7
3468: PUSH
3469: LD_VAR 0 2
3473: ARRAY
3474: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3475: LD_EXP 12
3479: PPUSH
3480: CALL 12214 0 1
3484: IFFALSE 3561
// begin for j in mpOilDeposits [ pos ] do
3486: LD_ADDR_VAR 0 3
3490: PUSH
3491: LD_EXP 12
3495: PUSH
3496: LD_VAR 0 8
3500: ARRAY
3501: PUSH
3502: FOR_IN
3503: IFFALSE 3559
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3505: LD_VAR 0 3
3509: PUSH
3510: LD_INT 1
3512: ARRAY
3513: PPUSH
3514: LD_VAR 0 3
3518: PUSH
3519: LD_INT 2
3521: ARRAY
3522: PPUSH
3523: LD_INT 2
3525: PPUSH
3526: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3530: LD_VAR 0 3
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: PPUSH
3539: LD_VAR 0 3
3543: PUSH
3544: LD_INT 2
3546: ARRAY
3547: PPUSH
3548: LD_VAR 0 7
3552: PPUSH
3553: CALL_OW 441
// end ;
3557: GO 3502
3559: POP
3560: POP
// end ; if Count ( mpSibDeposits ) then
3561: LD_EXP 13
3565: PPUSH
3566: CALL 12214 0 1
3570: IFFALSE 3647
// begin for j in mpSibDeposits [ pos ] do
3572: LD_ADDR_VAR 0 3
3576: PUSH
3577: LD_EXP 13
3581: PUSH
3582: LD_VAR 0 8
3586: ARRAY
3587: PUSH
3588: FOR_IN
3589: IFFALSE 3645
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3591: LD_VAR 0 3
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: LD_VAR 0 3
3604: PUSH
3605: LD_INT 2
3607: ARRAY
3608: PPUSH
3609: LD_INT 3
3611: PPUSH
3612: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3616: LD_VAR 0 3
3620: PUSH
3621: LD_INT 1
3623: ARRAY
3624: PPUSH
3625: LD_VAR 0 3
3629: PUSH
3630: LD_INT 2
3632: ARRAY
3633: PPUSH
3634: LD_VAR 0 7
3638: PPUSH
3639: CALL_OW 441
// end ;
3643: GO 3588
3645: POP
3646: POP
// end ; InitBc ;
3647: CALL_OW 21
// InitUc ;
3651: CALL_OW 18
// uc_side := side ;
3655: LD_ADDR_OWVAR 20
3659: PUSH
3660: LD_VAR 0 7
3664: ST_TO_ADDR
// uc_nation := nation ;
3665: LD_ADDR_OWVAR 21
3669: PUSH
3670: LD_VAR 0 9
3674: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3675: LD_EXP 22
3679: PUSH
3680: LD_INT 1
3682: NEG
3683: GREATER
3684: IFFALSE 3843
// begin x := mpStartPos [ pos ] [ 1 ] ;
3686: LD_ADDR_VAR 0 5
3690: PUSH
3691: LD_EXP 21
3695: PUSH
3696: LD_VAR 0 8
3700: ARRAY
3701: PUSH
3702: LD_INT 1
3704: ARRAY
3705: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3706: LD_ADDR_VAR 0 6
3710: PUSH
3711: LD_EXP 21
3715: PUSH
3716: LD_VAR 0 8
3720: ARRAY
3721: PUSH
3722: LD_INT 2
3724: ARRAY
3725: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3726: LD_VAR 0 5
3730: PPUSH
3731: LD_VAR 0 6
3735: PPUSH
3736: LD_INT 12
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3746: LD_ADDR_EXP 23
3750: PUSH
3751: LD_EXP 23
3755: PPUSH
3756: LD_VAR 0 7
3760: PPUSH
3761: LD_VAR 0 7
3765: PPUSH
3766: LD_VAR 0 5
3770: PPUSH
3771: LD_VAR 0 6
3775: PPUSH
3776: LD_INT 1
3778: PUSH
3779: LD_INT 100
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PUSH
3786: LD_INT 2
3788: PUSH
3789: LD_INT 70
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: LD_INT 3
3798: PUSH
3799: LD_INT 40
3801: PUSH
3802: EMPTY
3803: LIST
3804: LIST
3805: PUSH
3806: LD_INT 10
3808: PUSH
3809: LD_INT 25
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 20
3818: PUSH
3819: LD_INT 100
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: PPUSH
3833: CALL_OW 418
3837: PPUSH
3838: CALL_OW 1
3842: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3843: LD_EXP 14
3847: PPUSH
3848: CALL 12214 0 1
3852: IFFALSE 4036
// begin if mpGameType = GameTypeSurvival then
3854: LD_EXP 3
3858: PUSH
3859: LD_INT 2
3861: EQUAL
3862: IFFALSE 3882
// begin bc_level := 10 ;
3864: LD_ADDR_OWVAR 43
3868: PUSH
3869: LD_INT 10
3871: ST_TO_ADDR
// bc_type := b_warehouse ;
3872: LD_ADDR_OWVAR 42
3876: PUSH
3877: LD_INT 1
3879: ST_TO_ADDR
// end else
3880: GO 3898
// begin bc_level := 0 ;
3882: LD_ADDR_OWVAR 43
3886: PUSH
3887: LD_INT 0
3889: ST_TO_ADDR
// bc_type := b_depot ;
3890: LD_ADDR_OWVAR 42
3894: PUSH
3895: LD_INT 0
3897: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3898: LD_ADDR_VAR 0 4
3902: PUSH
3903: LD_EXP 14
3907: PUSH
3908: LD_VAR 0 8
3912: ARRAY
3913: PUSH
3914: LD_INT 1
3916: ARRAY
3917: PPUSH
3918: LD_EXP 14
3922: PUSH
3923: LD_VAR 0 8
3927: ARRAY
3928: PUSH
3929: LD_INT 2
3931: ARRAY
3932: PPUSH
3933: LD_EXP 14
3937: PUSH
3938: LD_VAR 0 8
3942: ARRAY
3943: PUSH
3944: LD_INT 3
3946: ARRAY
3947: PPUSH
3948: CALL_OW 47
3952: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3953: LD_VAR 0 4
3957: PPUSH
3958: LD_STRING @
3960: PUSH
3961: LD_VAR 0 7
3965: STR
3966: PPUSH
3967: CALL_OW 500
// if Count ( mpStartingResources ) then
3971: LD_EXP 15
3975: PPUSH
3976: CALL 12214 0 1
3980: IFFALSE 4034
// begin for j := 1 to mpStartingResources do
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_EXP 15
3996: PUSH
3997: FOR_TO
3998: IFFALSE 4032
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4000: LD_VAR 0 4
4004: PPUSH
4005: CALL_OW 274
4009: PPUSH
4010: LD_VAR 0 3
4014: PPUSH
4015: LD_EXP 15
4019: PUSH
4020: LD_VAR 0 3
4024: ARRAY
4025: PPUSH
4026: CALL_OW 277
4030: GO 3997
4032: POP
4033: POP
// end ; end else
4034: GO 4243
// if Count ( mpStartingResources ) then
4036: LD_EXP 15
4040: PPUSH
4041: CALL 12214 0 1
4045: IFFALSE 4243
// begin x := mpStartPos [ pos ] [ 1 ] ;
4047: LD_ADDR_VAR 0 5
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 8
4061: ARRAY
4062: PUSH
4063: LD_INT 1
4065: ARRAY
4066: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4067: LD_ADDR_VAR 0 6
4071: PUSH
4072: LD_EXP 21
4076: PUSH
4077: LD_VAR 0 8
4081: ARRAY
4082: PUSH
4083: LD_INT 2
4085: ARRAY
4086: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: DOUBLE
4093: LD_INT 1
4095: DEC
4096: ST_TO_ADDR
4097: LD_EXP 15
4101: PUSH
4102: FOR_TO
4103: IFFALSE 4241
// begin resources := mpStartingResources [ j ] ;
4105: LD_ADDR_VAR 0 13
4109: PUSH
4110: LD_EXP 15
4114: PUSH
4115: LD_VAR 0 3
4119: ARRAY
4120: ST_TO_ADDR
// if resources = 0 then
4121: LD_VAR 0 13
4125: PUSH
4126: LD_INT 0
4128: EQUAL
4129: IFFALSE 4133
// continue ;
4131: GO 4102
// repeat if resources >= 50 then
4133: LD_VAR 0 13
4137: PUSH
4138: LD_INT 50
4140: GREATEREQUAL
4141: IFFALSE 4187
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4143: LD_VAR 0 3
4147: PPUSH
4148: LD_INT 5
4150: PPUSH
4151: LD_VAR 0 5
4155: PPUSH
4156: LD_VAR 0 6
4160: PPUSH
4161: LD_INT 6
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 60
// resources := resources - 50 ;
4171: LD_ADDR_VAR 0 13
4175: PUSH
4176: LD_VAR 0 13
4180: PUSH
4181: LD_INT 50
4183: MINUS
4184: ST_TO_ADDR
// end else
4185: GO 4229
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4187: LD_VAR 0 3
4191: PPUSH
4192: LD_VAR 0 13
4196: PUSH
4197: LD_INT 10
4199: DIV
4200: PPUSH
4201: LD_VAR 0 5
4205: PPUSH
4206: LD_VAR 0 6
4210: PPUSH
4211: LD_INT 6
4213: PPUSH
4214: LD_INT 0
4216: PPUSH
4217: CALL_OW 60
// resources := 0 ;
4221: LD_ADDR_VAR 0 13
4225: PUSH
4226: LD_INT 0
4228: ST_TO_ADDR
// end ; until resources <= 0 ;
4229: LD_VAR 0 13
4233: PUSH
4234: LD_INT 0
4236: LESSEQUAL
4237: IFFALSE 4133
// end ;
4239: GO 4102
4241: POP
4242: POP
// end ; if Count ( mpBuildings ) then
4243: LD_EXP 17
4247: PPUSH
4248: CALL 12214 0 1
4252: IFFALSE 4330
// begin for j in mpBuildings [ pos ] do
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: LD_EXP 17
4263: PUSH
4264: LD_VAR 0 8
4268: ARRAY
4269: PUSH
4270: FOR_IN
4271: IFFALSE 4328
// begin bc_level := 0 ;
4273: LD_ADDR_OWVAR 43
4277: PUSH
4278: LD_INT 0
4280: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4281: LD_ADDR_OWVAR 42
4285: PUSH
4286: LD_VAR 0 3
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4295: LD_VAR 0 3
4299: PUSH
4300: LD_INT 2
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 3
4308: PUSH
4309: LD_INT 3
4311: ARRAY
4312: PPUSH
4313: LD_VAR 0 3
4317: PUSH
4318: LD_INT 4
4320: ARRAY
4321: PPUSH
4322: CALL_OW 47
// end ;
4326: GO 4270
4328: POP
4329: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4330: LD_EXP 26
4334: IFFALSE 4354
4336: PUSH
4337: LD_INT 20
4339: PPUSH
4340: LD_VAR 0 7
4344: PPUSH
4345: CALL_OW 321
4349: PUSH
4350: LD_INT 1
4352: EQUAL
4353: AND
4354: IFFALSE 4371
// SetTech ( tech_SibDet , side , state_researched ) ;
4356: LD_INT 20
4358: PPUSH
4359: LD_VAR 0 7
4363: PPUSH
4364: LD_INT 2
4366: PPUSH
4367: CALL_OW 322
// if not mpArtifacts then
4371: LD_EXP 44
4375: NOT
4376: IFFALSE 4393
// SetTech ( tech_artifact , side , state_disabled ) ;
4378: LD_INT 24
4380: PPUSH
4381: LD_VAR 0 7
4385: PPUSH
4386: LD_INT 0
4388: PPUSH
4389: CALL_OW 322
// if mpSibBomb = 1 then
4393: LD_EXP 28
4397: PUSH
4398: LD_INT 1
4400: EQUAL
4401: IFFALSE 4420
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4403: LD_INT 25
4405: PPUSH
4406: LD_VAR 0 7
4410: PPUSH
4411: LD_INT 1
4413: PPUSH
4414: CALL_OW 322
// end else
4418: GO 4435
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4420: LD_INT 25
4422: PPUSH
4423: LD_VAR 0 7
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: CALL_OW 322
// end ; if mpVehicles then
4435: LD_EXP 36
4439: IFFALSE 4538
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4441: LD_ADDR_VAR 0 3
4445: PUSH
4446: LD_VAR 0 7
4450: PPUSH
4451: LD_VAR 0 9
4455: PPUSH
4456: LD_EXP 36
4460: PPUSH
4461: CALL 5662 0 3
4465: PUSH
4466: FOR_IN
4467: IFFALSE 4536
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4469: LD_VAR 0 3
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL_OW 12
4484: PPUSH
4485: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4489: LD_VAR 0 3
4493: PPUSH
4494: LD_EXP 21
4498: PUSH
4499: LD_VAR 0 8
4503: ARRAY
4504: PUSH
4505: LD_INT 1
4507: ARRAY
4508: PPUSH
4509: LD_EXP 21
4513: PUSH
4514: LD_VAR 0 8
4518: ARRAY
4519: PUSH
4520: LD_INT 2
4522: ARRAY
4523: PPUSH
4524: LD_INT 12
4526: PPUSH
4527: LD_INT 0
4529: PPUSH
4530: CALL_OW 50
// end ;
4534: GO 4466
4536: POP
4537: POP
// end ; uc_nation := nation ;
4538: LD_ADDR_OWVAR 21
4542: PUSH
4543: LD_VAR 0 9
4547: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4548: LD_ADDR_VAR 0 11
4552: PUSH
4553: LD_VAR 0 7
4557: PPUSH
4558: LD_VAR 0 9
4562: PPUSH
4563: LD_EXP 24
4567: PPUSH
4568: LD_EXP 25
4572: PPUSH
4573: CALL 5164 0 4
4577: ST_TO_ADDR
// for j in team do
4578: LD_ADDR_VAR 0 3
4582: PUSH
4583: LD_VAR 0 11
4587: PUSH
4588: FOR_IN
4589: IFFALSE 4638
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4591: LD_VAR 0 3
4595: PPUSH
4596: LD_EXP 21
4600: PUSH
4601: LD_VAR 0 8
4605: ARRAY
4606: PUSH
4607: LD_INT 1
4609: ARRAY
4610: PPUSH
4611: LD_EXP 21
4615: PUSH
4616: LD_VAR 0 8
4620: ARRAY
4621: PUSH
4622: LD_INT 2
4624: ARRAY
4625: PPUSH
4626: LD_INT 12
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 50
4636: GO 4588
4638: POP
4639: POP
// if mpApemans then
4640: LD_EXP 30
4644: IFFALSE 4750
// begin for j := 1 to mpApemans do
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: DOUBLE
4652: LD_INT 1
4654: DEC
4655: ST_TO_ADDR
4656: LD_EXP 30
4660: PUSH
4661: FOR_TO
4662: IFFALSE 4748
// begin PrepareApeman ( - 5 ) ;
4664: LD_INT 5
4666: NEG
4667: PPUSH
4668: CALL 44273 0 1
// ape := CreateHuman ;
4672: LD_ADDR_VAR 0 10
4676: PUSH
4677: CALL_OW 44
4681: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4682: LD_ADDR_EXP 32
4686: PUSH
4687: LD_EXP 32
4691: PPUSH
4692: LD_VAR 0 8
4696: PPUSH
4697: LD_EXP 32
4701: PUSH
4702: LD_VAR 0 8
4706: ARRAY
4707: PPUSH
4708: LD_VAR 0 10
4712: PPUSH
4713: CALL 48146 0 2
4717: PPUSH
4718: CALL_OW 1
4722: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4723: LD_VAR 0 10
4727: PPUSH
4728: LD_EXP 31
4732: PUSH
4733: LD_VAR 0 8
4737: ARRAY
4738: PPUSH
4739: LD_INT 0
4741: PPUSH
4742: CALL_OW 49
// end ;
4746: GO 4661
4748: POP
4749: POP
// end ; end ;
4750: GO 3415
4752: POP
4753: POP
// if not mpTeamGame then
4754: LD_EXP 11
4758: NOT
4759: IFFALSE 4857
// begin for i := 1 to 8 do
4761: LD_ADDR_VAR 0 2
4765: PUSH
4766: DOUBLE
4767: LD_INT 1
4769: DEC
4770: ST_TO_ADDR
4771: LD_INT 8
4773: PUSH
4774: FOR_TO
4775: IFFALSE 4853
// for j := 1 to 8 do
4777: LD_ADDR_VAR 0 3
4781: PUSH
4782: DOUBLE
4783: LD_INT 1
4785: DEC
4786: ST_TO_ADDR
4787: LD_INT 8
4789: PUSH
4790: FOR_TO
4791: IFFALSE 4849
// if i <> j then
4793: LD_VAR 0 2
4797: PUSH
4798: LD_VAR 0 3
4802: NONEQUAL
4803: IFFALSE 4827
// SetAttitude ( i , j , att_neutral , true ) else
4805: LD_VAR 0 2
4809: PPUSH
4810: LD_VAR 0 3
4814: PPUSH
4815: LD_INT 0
4817: PPUSH
4818: LD_INT 1
4820: PPUSH
4821: CALL_OW 80
4825: GO 4847
// SetAttitude ( i , j , att_friend , true ) ;
4827: LD_VAR 0 2
4831: PPUSH
4832: LD_VAR 0 3
4836: PPUSH
4837: LD_INT 1
4839: PPUSH
4840: LD_INT 1
4842: PPUSH
4843: CALL_OW 80
4847: GO 4790
4849: POP
4850: POP
4851: GO 4774
4853: POP
4854: POP
// end else
4855: GO 5032
// begin if mpSharedVision then
4857: LD_EXP 16
4861: IFFALSE 4926
// begin for i in mpTeams do
4863: LD_ADDR_VAR 0 2
4867: PUSH
4868: LD_EXP 10
4872: PUSH
4873: FOR_IN
4874: IFFALSE 4924
// for j := 2 to i do
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: DOUBLE
4882: LD_INT 2
4884: DEC
4885: ST_TO_ADDR
4886: LD_VAR 0 2
4890: PUSH
4891: FOR_TO
4892: IFFALSE 4920
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4894: LD_VAR 0 2
4898: PUSH
4899: LD_VAR 0 3
4903: ARRAY
4904: PPUSH
4905: LD_VAR 0 2
4909: PUSH
4910: LD_INT 1
4912: ARRAY
4913: PPUSH
4914: CALL_OW 343
4918: GO 4891
4920: POP
4921: POP
4922: GO 4873
4924: POP
4925: POP
// end ; for i := 1 to 8 do
4926: LD_ADDR_VAR 0 2
4930: PUSH
4931: DOUBLE
4932: LD_INT 1
4934: DEC
4935: ST_TO_ADDR
4936: LD_INT 8
4938: PUSH
4939: FOR_TO
4940: IFFALSE 5030
// for j := 1 to 8 do
4942: LD_ADDR_VAR 0 3
4946: PUSH
4947: DOUBLE
4948: LD_INT 1
4950: DEC
4951: ST_TO_ADDR
4952: LD_INT 8
4954: PUSH
4955: FOR_TO
4956: IFFALSE 5026
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4958: LD_EXP 8
4962: PUSH
4963: LD_VAR 0 2
4967: ARRAY
4968: PUSH
4969: LD_EXP 8
4973: PUSH
4974: LD_VAR 0 3
4978: ARRAY
4979: EQUAL
4980: IFFALSE 5004
// SetAttitude ( i , j , att_friend , true ) else
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 3
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: CALL_OW 80
5002: GO 5024
// SetAttitude ( i , j , att_enemy , true ) ;
5004: LD_VAR 0 2
5008: PPUSH
5009: LD_VAR 0 3
5013: PPUSH
5014: LD_INT 2
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 80
5024: GO 4955
5026: POP
5027: POP
5028: GO 4939
5030: POP
5031: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5032: LD_ADDR_OWVAR 71
5036: PUSH
5037: LD_EXP 9
5041: PUSH
5042: LD_OWVAR 2
5046: ARRAY
5047: ST_TO_ADDR
// if IAmSpec then
5048: CALL_OW 531
5052: IFFALSE 5093
// begin FogOff ( true ) ;
5054: LD_INT 1
5056: PPUSH
5057: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5061: LD_EXP 29
5065: PUSH
5066: LD_INT 1
5068: ARRAY
5069: PUSH
5070: LD_INT 2
5072: DIV
5073: PPUSH
5074: LD_EXP 29
5078: PUSH
5079: LD_INT 2
5081: ARRAY
5082: PUSH
5083: LD_INT 2
5085: DIV
5086: PPUSH
5087: CALL_OW 86
// end else
5091: GO 5139
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5093: LD_EXP 21
5097: PUSH
5098: LD_EXP 7
5102: PUSH
5103: LD_OWVAR 2
5107: ARRAY
5108: ARRAY
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PPUSH
5114: LD_EXP 21
5118: PUSH
5119: LD_EXP 7
5123: PUSH
5124: LD_OWVAR 2
5128: ARRAY
5129: ARRAY
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PPUSH
5135: CALL_OW 86
// end ; BeginBuildUp ;
5139: CALL 6195 0 0
// enable ( mpActive ) ;
5143: LD_INT 100
5145: ENABLE_MARKED
// enable ( mpGameType ) ;
5146: LD_EXP 3
5150: ENABLE_MARKED
// mpGameActive := true ;
5151: LD_ADDR_EXP 39
5155: PUSH
5156: LD_INT 1
5158: ST_TO_ADDR
// end ;
5159: LD_VAR 0 1
5163: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5164: LD_INT 0
5166: PPUSH
5167: PPUSH
5168: PPUSH
5169: PPUSH
// result := [ ] ;
5170: LD_ADDR_VAR 0 5
5174: PUSH
5175: EMPTY
5176: ST_TO_ADDR
// class := class_soldier ;
5177: LD_ADDR_VAR 0 8
5181: PUSH
5182: LD_INT 1
5184: ST_TO_ADDR
// uc_side := side ;
5185: LD_ADDR_OWVAR 20
5189: PUSH
5190: LD_VAR 0 1
5194: ST_TO_ADDR
// uc_nation := nation ;
5195: LD_ADDR_OWVAR 21
5199: PUSH
5200: LD_VAR 0 2
5204: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5205: LD_ADDR_OWVAR 26
5209: PUSH
5210: LD_OWVAR 19
5214: PUSH
5215: LD_VAR 0 1
5219: ARRAY
5220: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5221: LD_INT 1
5223: PPUSH
5224: LD_INT 2
5226: PPUSH
5227: CALL_OW 12
5231: PPUSH
5232: LD_VAR 0 8
5236: PPUSH
5237: LD_VAR 0 4
5241: PUSH
5242: LD_INT 2
5244: PLUS
5245: PPUSH
5246: CALL_OW 380
// hc_importance := 105 ;
5250: LD_ADDR_OWVAR 32
5254: PUSH
5255: LD_INT 105
5257: ST_TO_ADDR
// if Multiplayer then
5258: LD_OWVAR 4
5262: IFFALSE 5302
// begin hc_gallery := MULTIAVATARS ;
5264: LD_ADDR_OWVAR 33
5268: PUSH
5269: LD_STRING MULTIAVATARS
5271: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5272: LD_ADDR_OWVAR 34
5276: PUSH
5277: LD_VAR 0 1
5281: PPUSH
5282: CALL_OW 525
5286: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5287: LD_ADDR_OWVAR 27
5291: PUSH
5292: LD_VAR 0 1
5296: PPUSH
5297: CALL_OW 526
5301: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5302: LD_ADDR_VAR 0 5
5306: PUSH
5307: LD_VAR 0 5
5311: PPUSH
5312: CALL_OW 44
5316: PPUSH
5317: CALL 48146 0 2
5321: ST_TO_ADDR
// if mpTeamPreset then
5322: LD_LOC 1
5326: IFFALSE 5422
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5328: LD_LOC 1
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: PPUSH
5337: LD_VAR 0 5
5341: PUSH
5342: LD_VAR 0 5
5346: ARRAY
5347: PPUSH
5348: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5352: LD_VAR 0 5
5356: PUSH
5357: LD_VAR 0 5
5361: ARRAY
5362: PPUSH
5363: LD_INT 1
5365: PPUSH
5366: LD_LOC 1
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: CALL_OW 260
5382: PPUSH
5383: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5387: LD_VAR 0 5
5391: PUSH
5392: LD_VAR 0 5
5396: ARRAY
5397: PPUSH
5398: LD_INT 2
5400: PPUSH
5401: LD_LOC 1
5405: PUSH
5406: LD_INT 1
5408: ARRAY
5409: PPUSH
5410: LD_INT 2
5412: PPUSH
5413: CALL_OW 260
5417: PPUSH
5418: CALL_OW 239
// end ; InitHc_All ( ) ;
5422: CALL_OW 584
// class := 2 ;
5426: LD_ADDR_VAR 0 8
5430: PUSH
5431: LD_INT 2
5433: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5434: LD_ADDR_VAR 0 6
5438: PUSH
5439: DOUBLE
5440: LD_INT 1
5442: DEC
5443: ST_TO_ADDR
5444: LD_VAR 0 3
5448: PUSH
5449: LD_INT 1
5451: MINUS
5452: PUSH
5453: FOR_TO
5454: IFFALSE 5638
// begin PrepareHuman ( false , class , skill ) ;
5456: LD_INT 0
5458: PPUSH
5459: LD_VAR 0 8
5463: PPUSH
5464: LD_VAR 0 4
5468: PPUSH
5469: CALL_OW 380
// un := CreateHuman ;
5473: LD_ADDR_VAR 0 7
5477: PUSH
5478: CALL_OW 44
5482: ST_TO_ADDR
// result := Join ( result , un ) ;
5483: LD_ADDR_VAR 0 5
5487: PUSH
5488: LD_VAR 0 5
5492: PPUSH
5493: LD_VAR 0 7
5497: PPUSH
5498: CALL 48146 0 2
5502: ST_TO_ADDR
// if mpTeamPreset then
5503: LD_LOC 1
5507: IFFALSE 5603
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5509: LD_LOC 1
5513: PUSH
5514: LD_VAR 0 6
5518: PUSH
5519: LD_INT 1
5521: PLUS
5522: ARRAY
5523: PPUSH
5524: LD_VAR 0 7
5528: PPUSH
5529: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5533: LD_VAR 0 7
5537: PPUSH
5538: LD_INT 1
5540: PPUSH
5541: LD_LOC 1
5545: PUSH
5546: LD_VAR 0 6
5550: PUSH
5551: LD_INT 1
5553: PLUS
5554: ARRAY
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 260
5563: PPUSH
5564: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5568: LD_VAR 0 7
5572: PPUSH
5573: LD_INT 2
5575: PPUSH
5576: LD_LOC 1
5580: PUSH
5581: LD_VAR 0 6
5585: PUSH
5586: LD_INT 1
5588: PLUS
5589: ARRAY
5590: PPUSH
5591: LD_INT 2
5593: PPUSH
5594: CALL_OW 260
5598: PPUSH
5599: CALL_OW 239
// end ; class := Inc ( class ) ;
5603: LD_ADDR_VAR 0 8
5607: PUSH
5608: LD_VAR 0 8
5612: PPUSH
5613: CALL 49519 0 1
5617: ST_TO_ADDR
// if class = 5 then
5618: LD_VAR 0 8
5622: PUSH
5623: LD_INT 5
5625: EQUAL
5626: IFFALSE 5636
// class := 1 ;
5628: LD_ADDR_VAR 0 8
5632: PUSH
5633: LD_INT 1
5635: ST_TO_ADDR
// end ;
5636: GO 5453
5638: POP
5639: POP
// if not mpTeamPreset then
5640: LD_LOC 1
5644: NOT
5645: IFFALSE 5657
// mpTeamPreset := result ;
5647: LD_ADDR_LOC 1
5651: PUSH
5652: LD_VAR 0 5
5656: ST_TO_ADDR
// end ;
5657: LD_VAR 0 5
5661: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5662: LD_INT 0
5664: PPUSH
5665: PPUSH
// result := [ ] ;
5666: LD_ADDR_VAR 0 4
5670: PUSH
5671: EMPTY
5672: ST_TO_ADDR
// if not vehicles then
5673: LD_VAR 0 3
5677: NOT
5678: IFFALSE 5682
// exit ;
5680: GO 5896
// for i := 1 to vehicles [ nation ] do
5682: LD_ADDR_VAR 0 5
5686: PUSH
5687: DOUBLE
5688: LD_INT 1
5690: DEC
5691: ST_TO_ADDR
5692: LD_VAR 0 3
5696: PUSH
5697: LD_VAR 0 2
5701: ARRAY
5702: PUSH
5703: FOR_TO
5704: IFFALSE 5894
// begin uc_side := side ;
5706: LD_ADDR_OWVAR 20
5710: PUSH
5711: LD_VAR 0 1
5715: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5716: LD_VAR 0 3
5720: PUSH
5721: LD_VAR 0 2
5725: ARRAY
5726: PUSH
5727: LD_VAR 0 5
5731: ARRAY
5732: PPUSH
5733: CALL 12214 0 1
5737: PUSH
5738: LD_INT 4
5740: GREATER
5741: IFFALSE 5771
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5743: LD_ADDR_OWVAR 21
5747: PUSH
5748: LD_VAR 0 3
5752: PUSH
5753: LD_VAR 0 2
5757: ARRAY
5758: PUSH
5759: LD_VAR 0 5
5763: ARRAY
5764: PUSH
5765: LD_INT 5
5767: ARRAY
5768: ST_TO_ADDR
5769: GO 5781
// uc_nation := nation ;
5771: LD_ADDR_OWVAR 21
5775: PUSH
5776: LD_VAR 0 2
5780: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5781: LD_VAR 0 3
5785: PUSH
5786: LD_VAR 0 2
5790: ARRAY
5791: PUSH
5792: LD_VAR 0 5
5796: ARRAY
5797: PUSH
5798: LD_INT 1
5800: ARRAY
5801: PPUSH
5802: LD_VAR 0 3
5806: PUSH
5807: LD_VAR 0 2
5811: ARRAY
5812: PUSH
5813: LD_VAR 0 5
5817: ARRAY
5818: PUSH
5819: LD_INT 2
5821: ARRAY
5822: PPUSH
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 2
5832: ARRAY
5833: PUSH
5834: LD_VAR 0 5
5838: ARRAY
5839: PUSH
5840: LD_INT 3
5842: ARRAY
5843: PPUSH
5844: LD_VAR 0 3
5848: PUSH
5849: LD_VAR 0 2
5853: ARRAY
5854: PUSH
5855: LD_VAR 0 5
5859: ARRAY
5860: PUSH
5861: LD_INT 4
5863: ARRAY
5864: PPUSH
5865: LD_INT 80
5867: PPUSH
5868: CALL 14976 0 5
// result := Join ( result , CreateVehicle ) ;
5872: LD_ADDR_VAR 0 4
5876: PUSH
5877: LD_VAR 0 4
5881: PPUSH
5882: CALL_OW 45
5886: PPUSH
5887: CALL 48146 0 2
5891: ST_TO_ADDR
// end ;
5892: GO 5703
5894: POP
5895: POP
// end ;
5896: LD_VAR 0 4
5900: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5901: LD_INT 0
5903: PPUSH
5904: PPUSH
// for i in mpBattleFlags do
5905: LD_ADDR_VAR 0 3
5909: PUSH
5910: LD_EXP 23
5914: PUSH
5915: FOR_IN
5916: IFFALSE 5993
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5918: LD_VAR 0 3
5922: PPUSH
5923: LD_INT 1
5925: PUSH
5926: LD_VAR 0 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 2
5937: PUSH
5938: LD_VAR 0 1
5942: PUSH
5943: LD_REAL  7.00000000000000E-0001
5946: MUL
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 3
5954: PUSH
5955: LD_VAR 0 1
5959: PUSH
5960: LD_REAL  4.00000000000000E-0001
5963: MUL
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 20
5971: PUSH
5972: LD_VAR 0 1
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: PPUSH
5987: CALL_OW 423
5991: GO 5915
5993: POP
5994: POP
// end ;
5995: LD_VAR 0 2
5999: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6000: LD_INT 100
6002: IFFALSE 6097
6004: GO 6006
6006: DISABLE
6007: LD_INT 0
6009: PPUSH
6010: PPUSH
// begin if mpBattleFlag <= 0 then
6011: LD_EXP 22
6015: PUSH
6016: LD_INT 0
6018: LESSEQUAL
6019: IFFALSE 6023
// exit ;
6021: GO 6097
// strength := 100 ;
6023: LD_ADDR_VAR 0 2
6027: PUSH
6028: LD_INT 100
6030: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6031: LD_EXP 22
6035: PPUSH
6036: CALL_OW 67
// strength := Dec ( strength ) ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_VAR 0 2
6049: PPUSH
6050: CALL 49541 0 1
6054: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6055: LD_VAR 0 2
6059: PPUSH
6060: CALL 5901 0 1
// until not strength ;
6064: LD_VAR 0 2
6068: NOT
6069: IFFALSE 6031
// for i in mpBattleFlags do
6071: LD_ADDR_VAR 0 1
6075: PUSH
6076: LD_EXP 23
6080: PUSH
6081: FOR_IN
6082: IFFALSE 6095
// KillBattleFlag ( i ) ;
6084: LD_VAR 0 1
6088: PPUSH
6089: CALL_OW 419
6093: GO 6081
6095: POP
6096: POP
// end ;
6097: PPOPN 2
6099: END
// every 0 0$1 marked mpActive do var side , tmp ;
6100: GO 6102
6102: DISABLE
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
// begin if mpSibBomb <= 1 then
6107: LD_EXP 28
6111: PUSH
6112: LD_INT 1
6114: LESSEQUAL
6115: IFFALSE 6119
// exit ;
6117: GO 6192
// tmp := mpSibBomb ;
6119: LD_ADDR_VAR 0 2
6123: PUSH
6124: LD_EXP 28
6128: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6129: LD_INT 35
6131: PPUSH
6132: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6136: LD_ADDR_VAR 0 2
6140: PUSH
6141: LD_VAR 0 2
6145: PUSH
6146: LD_INT 35
6148: MINUS
6149: ST_TO_ADDR
// until not tmp ;
6150: LD_VAR 0 2
6154: NOT
6155: IFFALSE 6129
// for side := 1 to 8 do
6157: LD_ADDR_VAR 0 1
6161: PUSH
6162: DOUBLE
6163: LD_INT 1
6165: DEC
6166: ST_TO_ADDR
6167: LD_INT 8
6169: PUSH
6170: FOR_TO
6171: IFFALSE 6190
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6173: LD_INT 25
6175: PPUSH
6176: LD_VAR 0 1
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 322
6188: GO 6170
6190: POP
6191: POP
// end ;
6192: PPOPN 2
6194: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6195: LD_INT 0
6197: PPUSH
6198: PPUSH
6199: PPUSH
// mpBuildUpTimeDelay := 0 ;
6200: LD_ADDR_EXP 46
6204: PUSH
6205: LD_INT 0
6207: ST_TO_ADDR
// if not mpBuildUpTime then
6208: LD_EXP 20
6212: NOT
6213: IFFALSE 6217
// exit ;
6215: GO 6406
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6217: LD_ADDR_EXP 46
6221: PUSH
6222: LD_INT 8400
6224: PUSH
6225: LD_INT 2100
6227: PUSH
6228: LD_EXP 20
6232: MUL
6233: PLUS
6234: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6235: LD_ADDR_EXP 47
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// for i := 1 to 8 do
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: DOUBLE
6249: LD_INT 1
6251: DEC
6252: ST_TO_ADDR
6253: LD_INT 8
6255: PUSH
6256: FOR_TO
6257: IFFALSE 6404
// if mpSidePositions [ i ] then
6259: LD_EXP 7
6263: PUSH
6264: LD_VAR 0 2
6268: ARRAY
6269: IFFALSE 6402
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6271: LD_EXP 19
6275: PUSH
6276: LD_EXP 7
6280: PUSH
6281: LD_VAR 0 2
6285: ARRAY
6286: ARRAY
6287: PPUSH
6288: LD_INT 5
6290: PPUSH
6291: CALL_OW 424
// for j := 1 to 8 do
6295: LD_ADDR_VAR 0 3
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_INT 8
6307: PUSH
6308: FOR_TO
6309: IFFALSE 6400
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6311: LD_EXP 7
6315: PUSH
6316: LD_VAR 0 3
6320: ARRAY
6321: IFFALSE 6370
6323: PUSH
6324: LD_EXP 8
6328: PUSH
6329: LD_VAR 0 2
6333: ARRAY
6334: PUSH
6335: LD_EXP 8
6339: PUSH
6340: LD_VAR 0 3
6344: ARRAY
6345: NONEQUAL
6346: IFTRUE 6369
6348: PUSH
6349: LD_EXP 11
6353: NOT
6354: IFFALSE 6368
6356: PUSH
6357: LD_VAR 0 2
6361: PUSH
6362: LD_VAR 0 3
6366: NONEQUAL
6367: AND
6368: OR
6369: AND
6370: IFFALSE 6398
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6372: LD_VAR 0 3
6376: PPUSH
6377: LD_EXP 19
6381: PUSH
6382: LD_EXP 7
6386: PUSH
6387: LD_VAR 0 2
6391: ARRAY
6392: ARRAY
6393: PPUSH
6394: CALL_OW 333
6398: GO 6308
6400: POP
6401: POP
// end ;
6402: GO 6256
6404: POP
6405: POP
// end ;
6406: LD_VAR 0 1
6410: RET
// function EndBuildUp ; var i , j ; begin
6411: LD_INT 0
6413: PPUSH
6414: PPUSH
6415: PPUSH
// mpBuildUpTimeActive := false ;
6416: LD_ADDR_EXP 47
6420: PUSH
6421: LD_INT 0
6423: ST_TO_ADDR
// for i := 1 to 8 do
6424: LD_ADDR_VAR 0 2
6428: PUSH
6429: DOUBLE
6430: LD_INT 1
6432: DEC
6433: ST_TO_ADDR
6434: LD_INT 8
6436: PUSH
6437: FOR_TO
6438: IFFALSE 6585
// if mpSidePositions [ i ] then
6440: LD_EXP 7
6444: PUSH
6445: LD_VAR 0 2
6449: ARRAY
6450: IFFALSE 6583
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6452: LD_EXP 19
6456: PUSH
6457: LD_EXP 7
6461: PUSH
6462: LD_VAR 0 2
6466: ARRAY
6467: ARRAY
6468: PPUSH
6469: LD_INT 0
6471: PPUSH
6472: CALL_OW 424
// for j := 1 to 8 do
6476: LD_ADDR_VAR 0 3
6480: PUSH
6481: DOUBLE
6482: LD_INT 1
6484: DEC
6485: ST_TO_ADDR
6486: LD_INT 8
6488: PUSH
6489: FOR_TO
6490: IFFALSE 6581
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6492: LD_EXP 7
6496: PUSH
6497: LD_VAR 0 3
6501: ARRAY
6502: IFFALSE 6551
6504: PUSH
6505: LD_EXP 8
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PUSH
6516: LD_EXP 8
6520: PUSH
6521: LD_VAR 0 3
6525: ARRAY
6526: NONEQUAL
6527: IFTRUE 6550
6529: PUSH
6530: LD_EXP 11
6534: NOT
6535: IFFALSE 6549
6537: PUSH
6538: LD_VAR 0 2
6542: PUSH
6543: LD_VAR 0 3
6547: NONEQUAL
6548: AND
6549: OR
6550: AND
6551: IFFALSE 6579
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6553: LD_VAR 0 3
6557: PPUSH
6558: LD_EXP 19
6562: PUSH
6563: LD_EXP 7
6567: PUSH
6568: LD_VAR 0 2
6572: ARRAY
6573: ARRAY
6574: PPUSH
6575: CALL_OW 334
6579: GO 6489
6581: POP
6582: POP
// end ;
6583: GO 6437
6585: POP
6586: POP
// end ;
6587: LD_VAR 0 1
6591: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6592: LD_EXP 47
6596: IFFALSE 6775
6598: GO 6600
6600: DISABLE
6601: LD_INT 0
6603: PPUSH
6604: PPUSH
// begin for i := 1 to 8 do
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: DOUBLE
6611: LD_INT 1
6613: DEC
6614: ST_TO_ADDR
6615: LD_INT 8
6617: PUSH
6618: FOR_TO
6619: IFFALSE 6772
// if mpSidePositions [ i ] then
6621: LD_EXP 7
6625: PUSH
6626: LD_VAR 0 1
6630: ARRAY
6631: IFFALSE 6770
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6633: LD_ADDR_VAR 0 2
6637: PUSH
6638: LD_EXP 19
6642: PUSH
6643: LD_EXP 7
6647: PUSH
6648: LD_VAR 0 1
6652: ARRAY
6653: ARRAY
6654: PPUSH
6655: LD_INT 2
6657: PUSH
6658: LD_INT 21
6660: PUSH
6661: LD_INT 1
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 21
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 22
6685: PUSH
6686: LD_OWVAR 2
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 70
6703: PUSH
6704: FOR_IN
6705: IFFALSE 6768
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6707: LD_EXP 8
6711: PUSH
6712: LD_VAR 0 1
6716: ARRAY
6717: PUSH
6718: LD_EXP 8
6722: PUSH
6723: LD_OWVAR 2
6727: ARRAY
6728: NONEQUAL
6729: IFTRUE 6752
6731: PUSH
6732: LD_EXP 11
6736: NOT
6737: IFFALSE 6751
6739: PUSH
6740: LD_VAR 0 1
6744: PUSH
6745: LD_OWVAR 2
6749: NONEQUAL
6750: AND
6751: OR
6752: IFFALSE 6766
// ComMoveToArea ( un , BuildUpEscape ) ;
6754: LD_VAR 0 2
6758: PPUSH
6759: LD_INT 13
6761: PPUSH
6762: CALL_OW 113
6766: GO 6704
6768: POP
6769: POP
6770: GO 6618
6772: POP
6773: POP
// enable ;
6774: ENABLE
// end ;
6775: PPOPN 2
6777: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6778: LD_EXP 20
6782: IFFALSE 6832
6784: GO 6786
6786: DISABLE
6787: LD_INT 0
6789: PPUSH
// begin tmp := mpBuildUpTime ;
6790: LD_ADDR_VAR 0 1
6794: PUSH
6795: LD_EXP 20
6799: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6800: LD_INT 35
6802: PPUSH
6803: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6807: LD_ADDR_VAR 0 1
6811: PUSH
6812: LD_VAR 0 1
6816: PUSH
6817: LD_INT 35
6819: MINUS
6820: ST_TO_ADDR
// until not tmp ;
6821: LD_VAR 0 1
6825: NOT
6826: IFFALSE 6800
// EndBuildUp ;
6828: CALL 6411 0 0
// end ;
6832: PPOPN 1
6834: END
// every 0 0$1 trigger mpActive marked mpWin do
6835: LD_INT 100
6837: IFFALSE 6871
6839: GO 6841
6841: DISABLE
// begin if IAmServer then
6842: CALL_OW 518
6846: IFFALSE 6855
// wait ( 0 0$3 ) ;
6848: LD_INT 105
6850: PPUSH
6851: CALL_OW 67
// if Multiplayer then
6855: LD_OWVAR 4
6859: IFFALSE 6867
// YouWinInMultiplayer else
6861: CALL_OW 106
6865: GO 6871
// YouWin ;
6867: CALL_OW 103
// end ;
6871: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6872: LD_INT 0
6874: PPUSH
// result := false ;
6875: LD_ADDR_VAR 0 3
6879: PUSH
6880: LD_INT 0
6882: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6883: LD_VAR 0 1
6887: PUSH
6888: LD_INT 1
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6902
6894: LD_INT 5
6896: DOUBLE
6897: EQUAL
6898: IFTRUE 6902
6900: GO 6975
6902: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6903: LD_ADDR_VAR 0 3
6907: PUSH
6908: LD_INT 22
6910: PUSH
6911: LD_VAR 0 2
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 2
6922: PUSH
6923: LD_INT 21
6925: PUSH
6926: LD_INT 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 33
6935: PUSH
6936: LD_INT 3
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 33
6945: PUSH
6946: LD_INT 5
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 69
6967: PPUSH
6968: CALL 12214 0 1
6972: ST_TO_ADDR
// end ; GameTypeSurvival :
6973: GO 7214
6975: LD_INT 2
6977: DOUBLE
6978: EQUAL
6979: IFTRUE 6983
6981: GO 7113
6983: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6984: LD_ADDR_VAR 0 3
6988: PUSH
6989: LD_INT 22
6991: PUSH
6992: LD_VAR 0 2
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 2
7003: PUSH
7004: LD_INT 30
7006: PUSH
7007: LD_INT 0
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PPUSH
7033: CALL_OW 69
7037: PPUSH
7038: CALL 12214 0 1
7042: IFFALSE 7110
7044: PUSH
7045: LD_INT 22
7047: PUSH
7048: LD_VAR 0 2
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: LD_INT 21
7062: PUSH
7063: LD_INT 1
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 33
7072: PUSH
7073: LD_INT 3
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 33
7082: PUSH
7083: LD_INT 5
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 69
7104: PPUSH
7105: CALL 12214 0 1
7109: AND
7110: ST_TO_ADDR
// end ; GameTypeKing :
7111: GO 7214
7113: LD_INT 3
7115: DOUBLE
7116: EQUAL
7117: IFTRUE 7121
7119: GO 7213
7121: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7122: LD_ADDR_VAR 0 3
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_VAR 0 2
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 2
7141: PUSH
7142: LD_INT 21
7144: PUSH
7145: LD_INT 1
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 33
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 33
7164: PUSH
7165: LD_INT 5
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PPUSH
7182: CALL_OW 69
7186: PPUSH
7187: CALL 12214 0 1
7191: IFFALSE 7210
7193: PUSH
7194: LD_VAR 0 2
7198: PPUSH
7199: CALL 60110 0 1
7203: PUSH
7204: LD_EXP 35
7208: LESS
7209: AND
7210: ST_TO_ADDR
// end ; end ;
7211: GO 7214
7213: POP
// end ;
7214: LD_VAR 0 3
7218: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7219: LD_INT 100
7221: IFFALSE 7451
7223: GO 7225
7225: DISABLE
7226: LD_INT 0
7228: PPUSH
7229: PPUSH
// begin if Multiplayer then
7230: LD_OWVAR 4
7234: IFFALSE 7242
// SetPlayerSpectator ( ) else
7236: CALL_OW 572
7240: GO 7251
// FogOff ( your_side ) ;
7242: LD_OWVAR 2
7246: PPUSH
7247: CALL_OW 344
// repeat gameIsOn := false ;
7251: LD_ADDR_VAR 0 1
7255: PUSH
7256: LD_INT 0
7258: ST_TO_ADDR
// for i := 1 to 8 do
7259: LD_ADDR_VAR 0 2
7263: PUSH
7264: DOUBLE
7265: LD_INT 1
7267: DEC
7268: ST_TO_ADDR
7269: LD_INT 8
7271: PUSH
7272: FOR_TO
7273: IFFALSE 7403
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7275: LD_EXP 7
7279: PUSH
7280: LD_VAR 0 2
7284: ARRAY
7285: IFFALSE 7298
7287: PUSH
7288: LD_VAR 0 2
7292: PPUSH
7293: CALL_OW 108
7297: AND
7298: IFFALSE 7312
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_OWVAR 2
7310: NONEQUAL
7311: AND
7312: IFFALSE 7401
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7314: LD_EXP 8
7318: PUSH
7319: LD_VAR 0 2
7323: ARRAY
7324: NOT
7325: IFTRUE 7373
7327: PUSH
7328: LD_EXP 8
7332: PUSH
7333: LD_VAR 0 2
7337: ARRAY
7338: PUSH
7339: LD_EXP 8
7343: PUSH
7344: LD_OWVAR 2
7348: ARRAY
7349: NONEQUAL
7350: IFFALSE 7372
7352: PUSH
7353: LD_OWVAR 2
7357: PPUSH
7358: LD_VAR 0 2
7362: PPUSH
7363: CALL_OW 81
7367: PUSH
7368: LD_INT 1
7370: NONEQUAL
7371: AND
7372: OR
7373: IFFALSE 7401
// if HasPowerByGameType ( mpGameType , i ) then
7375: LD_EXP 3
7379: PPUSH
7380: LD_VAR 0 2
7384: PPUSH
7385: CALL 6872 0 2
7389: IFFALSE 7401
// begin gameIsOn := true ;
7391: LD_ADDR_VAR 0 1
7395: PUSH
7396: LD_INT 1
7398: ST_TO_ADDR
// break ;
7399: GO 7403
// end ;
7401: GO 7272
7403: POP
7404: POP
// wait ( 100 ) ;
7405: LD_INT 100
7407: PPUSH
7408: CALL_OW 67
// until not gameIsOn ;
7412: LD_VAR 0 1
7416: NOT
7417: IFFALSE 7251
// if IAmServer then
7419: CALL_OW 518
7423: IFFALSE 7432
// wait ( 0 0$3 ) ;
7425: LD_INT 105
7427: PPUSH
7428: CALL_OW 67
// if Multiplayer then
7432: LD_OWVAR 4
7436: IFFALSE 7444
// YouLostInMultiplayer else
7438: CALL_OW 107
7442: GO 7451
// YouLost (  ) ;
7444: LD_STRING 
7446: PPUSH
7447: CALL_OW 104
// end ;
7451: PPOPN 2
7453: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7454: LD_EXP 33
7458: IFFALSE 7842
7460: GO 7462
7462: DISABLE
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
7469: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7470: LD_ADDR_VAR 0 5
7474: PUSH
7475: LD_INT 1
7477: PUSH
7478: LD_INT 2
7480: PUSH
7481: LD_INT 3
7483: PUSH
7484: LD_INT 4
7486: PUSH
7487: LD_INT 5
7489: PUSH
7490: LD_INT 6
7492: PUSH
7493: LD_INT 7
7495: PUSH
7496: LD_INT 8
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7509: LD_INT 350
7511: PPUSH
7512: CALL_OW 67
// for i := 1 to 8 do
7516: LD_ADDR_VAR 0 1
7520: PUSH
7521: DOUBLE
7522: LD_INT 1
7524: DEC
7525: ST_TO_ADDR
7526: LD_INT 8
7528: PUSH
7529: FOR_TO
7530: IFFALSE 7812
// begin j := sides [ i ] ;
7532: LD_ADDR_VAR 0 2
7536: PUSH
7537: LD_VAR 0 5
7541: PUSH
7542: LD_VAR 0 1
7546: ARRAY
7547: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7548: LD_EXP 40
7552: PUSH
7553: LD_VAR 0 2
7557: ARRAY
7558: PPUSH
7559: CALL 12214 0 1
7563: IFFALSE 7576
7565: PUSH
7566: LD_VAR 0 2
7570: PPUSH
7571: CALL_OW 108
7575: AND
7576: IFFALSE 7594
7578: PUSH
7579: LD_EXP 3
7583: PPUSH
7584: LD_VAR 0 2
7588: PPUSH
7589: CALL 6872 0 2
7593: AND
7594: IFFALSE 7810
// begin wait ( mpRespawn div 3 ) ;
7596: LD_EXP 33
7600: PUSH
7601: LD_INT 3
7603: DIV
7604: PPUSH
7605: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7609: LD_ADDR_VAR 0 3
7613: PUSH
7614: LD_INT 22
7616: PUSH
7617: LD_VAR 0 2
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 50
7628: PUSH
7629: EMPTY
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 30
7637: PUSH
7638: LD_INT 0
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 30
7647: PUSH
7648: LD_INT 1
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: PPUSH
7665: CALL_OW 69
7669: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7670: LD_VAR 0 3
7674: NOT
7675: IFTRUE 7689
7677: PUSH
7678: LD_VAR 0 2
7682: PPUSH
7683: CALL_OW 108
7687: NOT
7688: OR
7689: IFTRUE 7708
7691: PUSH
7692: LD_EXP 3
7696: PPUSH
7697: LD_VAR 0 2
7701: PPUSH
7702: CALL 6872 0 2
7706: NOT
7707: OR
7708: IFFALSE 7712
// continue ;
7710: GO 7529
// spawn := tmp [ 1 ] ;
7712: LD_ADDR_VAR 0 4
7716: PUSH
7717: LD_VAR 0 3
7721: PUSH
7722: LD_INT 1
7724: ARRAY
7725: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7726: LD_EXP 40
7730: PUSH
7731: LD_VAR 0 2
7735: ARRAY
7736: PUSH
7737: LD_INT 1
7739: ARRAY
7740: PPUSH
7741: LD_VAR 0 4
7745: PPUSH
7746: CALL_OW 250
7750: PPUSH
7751: LD_VAR 0 4
7755: PPUSH
7756: CALL_OW 251
7760: PPUSH
7761: LD_INT 32
7763: PPUSH
7764: LD_INT 1
7766: PPUSH
7767: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7771: LD_ADDR_EXP 40
7775: PUSH
7776: LD_EXP 40
7780: PPUSH
7781: LD_VAR 0 2
7785: PPUSH
7786: LD_EXP 40
7790: PUSH
7791: LD_VAR 0 2
7795: ARRAY
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: CALL_OW 3
7804: PPUSH
7805: CALL_OW 1
7809: ST_TO_ADDR
// end ; end ;
7810: GO 7529
7812: POP
7813: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7814: LD_ADDR_VAR 0 5
7818: PUSH
7819: LD_VAR 0 5
7823: PPUSH
7824: LD_INT 1
7826: PPUSH
7827: LD_INT 8
7829: PPUSH
7830: LD_INT 1
7832: PPUSH
7833: CALL 14506 0 4
7837: ST_TO_ADDR
// until false ;
7838: LD_INT 0
7840: IFFALSE 7509
// end ;
7842: PPOPN 5
7844: END
// every 0 0$1 marked mpActive do
7845: GO 7847
7847: DISABLE
// begin enable ;
7848: ENABLE
// if not mpDisplayStrings then
7849: LD_EXP 38
7853: NOT
7854: IFFALSE 7865
// begin display_strings := [ ] ;
7856: LD_ADDR_OWVAR 47
7860: PUSH
7861: EMPTY
7862: ST_TO_ADDR
// exit ;
7863: GO 7875
// end ; display_strings := mpDisplayStrings ;
7865: LD_ADDR_OWVAR 47
7869: PUSH
7870: LD_EXP 38
7874: ST_TO_ADDR
// end ; end_of_file
7875: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7876: LD_INT 0
7878: PPUSH
7879: PPUSH
7880: PPUSH
7881: PPUSH
7882: PPUSH
7883: PPUSH
7884: PPUSH
7885: PPUSH
7886: PPUSH
// if GetType ( un ) = unit_vehicle then
7887: LD_VAR 0 1
7891: PPUSH
7892: CALL_OW 247
7896: PUSH
7897: LD_INT 2
7899: EQUAL
7900: IFFALSE 7904
// exit ;
7902: GO 8542
// side := GetSide ( un ) ;
7904: LD_ADDR_VAR 0 9
7908: PUSH
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 255
7918: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7919: LD_EXP 3
7923: PUSH
7924: LD_INT 2
7926: EQUAL
7927: IFFALSE 8003
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7929: LD_VAR 0 1
7933: PPUSH
7934: CALL_OW 266
7938: PUSH
7939: LD_INT 0
7941: PUSH
7942: LD_INT 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: IN
7949: IFFALSE 8003
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7951: LD_ADDR_VAR 0 3
7955: PUSH
7956: LD_INT 22
7958: PUSH
7959: LD_VAR 0 9
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 21
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PPUSH
7982: CALL_OW 69
7986: PUSH
7987: FOR_IN
7988: IFFALSE 8001
// KillUnit ( i ) ;
7990: LD_VAR 0 3
7994: PPUSH
7995: CALL_OW 66
7999: GO 7987
8001: POP
8002: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 257
8012: PUSH
8013: LD_INT 12
8015: PUSH
8016: LD_INT 17
8018: PUSH
8019: LD_INT 15
8021: PUSH
8022: LD_INT 16
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: IN
8031: IFTRUE 8048
8033: PUSH
8034: LD_VAR 0 1
8038: PPUSH
8039: CALL_OW 263
8043: PUSH
8044: LD_INT 5
8046: EQUAL
8047: OR
8048: IFFALSE 8267
// begin tag := 0 ;
8050: LD_ADDR_VAR 0 5
8054: PUSH
8055: LD_INT 0
8057: ST_TO_ADDR
// for i := 1 to 8 do
8058: LD_ADDR_VAR 0 3
8062: PUSH
8063: DOUBLE
8064: LD_INT 1
8066: DEC
8067: ST_TO_ADDR
8068: LD_INT 8
8070: PUSH
8071: FOR_TO
8072: IFFALSE 8106
// if un in mpApePosIndex [ i ] then
8074: LD_VAR 0 1
8078: PUSH
8079: LD_EXP 32
8083: PUSH
8084: LD_VAR 0 3
8088: ARRAY
8089: IN
8090: IFFALSE 8104
// begin tag := i ;
8092: LD_ADDR_VAR 0 5
8096: PUSH
8097: LD_VAR 0 3
8101: ST_TO_ADDR
// break ;
8102: GO 8106
// end ;
8104: GO 8071
8106: POP
8107: POP
// if not tag then
8108: LD_VAR 0 5
8112: NOT
8113: IFFALSE 8117
// exit ;
8115: GO 8542
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8117: LD_ADDR_VAR 0 7
8121: PUSH
8122: LD_EXP 31
8126: PUSH
8127: LD_EXP 7
8131: PUSH
8132: LD_VAR 0 5
8136: ARRAY
8137: ARRAY
8138: ST_TO_ADDR
// if not area then
8139: LD_VAR 0 7
8143: NOT
8144: IFFALSE 8148
// exit ;
8146: GO 8542
// wait ( 4 4$00 ) ;
8148: LD_INT 8400
8150: PPUSH
8151: CALL_OW 67
// repeat wait ( 10 ) ;
8155: LD_INT 10
8157: PPUSH
8158: CALL_OW 67
// until not mpBlockRespThread ;
8162: LD_EXP 45
8166: NOT
8167: IFFALSE 8155
// mpBlockRespThread := true ;
8169: LD_ADDR_EXP 45
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8177: LD_INT 0
8179: PPUSH
8180: CALL 44273 0 1
// ape := CreateHuman ;
8184: LD_ADDR_VAR 0 4
8188: PUSH
8189: CALL_OW 44
8193: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8194: LD_ADDR_EXP 32
8198: PUSH
8199: LD_EXP 32
8203: PPUSH
8204: LD_VAR 0 5
8208: PPUSH
8209: LD_EXP 32
8213: PUSH
8214: LD_VAR 0 5
8218: ARRAY
8219: PPUSH
8220: LD_VAR 0 4
8224: PPUSH
8225: CALL 48146 0 2
8229: PPUSH
8230: CALL_OW 1
8234: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8235: LD_VAR 0 4
8239: PPUSH
8240: LD_VAR 0 7
8244: PPUSH
8245: LD_INT 0
8247: PPUSH
8248: CALL_OW 49
// wait ( 10 ) ;
8252: LD_INT 10
8254: PPUSH
8255: CALL_OW 67
// mpBlockRespThread := false ;
8259: LD_ADDR_EXP 45
8263: PUSH
8264: LD_INT 0
8266: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8267: LD_VAR 0 1
8271: PPUSH
8272: CALL_OW 247
8276: PUSH
8277: LD_INT 1
8279: EQUAL
8280: IFFALSE 8297
8282: PUSH
8283: LD_VAR 0 1
8287: PPUSH
8288: CALL_OW 248
8292: PUSH
8293: LD_INT 0
8295: GREATER
8296: AND
8297: IFFALSE 8542
// begin if not mpRespawn then
8299: LD_EXP 33
8303: NOT
8304: IFFALSE 8308
// exit ;
8306: GO 8542
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8308: LD_VAR 0 9
8312: PPUSH
8313: CALL_OW 108
8317: NOT
8318: IFFALSE 8337
8320: PUSH
8321: LD_EXP 3
8325: PPUSH
8326: LD_VAR 0 9
8330: PPUSH
8331: CALL 6872 0 2
8335: NOT
8336: AND
8337: IFFALSE 8341
// exit ;
8339: GO 8542
// side := GetSide ( un ) ;
8341: LD_ADDR_VAR 0 9
8345: PUSH
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL_OW 255
8355: ST_TO_ADDR
// nation := GetNation ( un ) ;
8356: LD_ADDR_VAR 0 8
8360: PUSH
8361: LD_VAR 0 1
8365: PPUSH
8366: CALL_OW 248
8370: ST_TO_ADDR
// class := GetClass ( un ) ;
8371: LD_ADDR_VAR 0 6
8375: PUSH
8376: LD_VAR 0 1
8380: PPUSH
8381: CALL_OW 257
8385: ST_TO_ADDR
// if class > 4 then
8386: LD_VAR 0 6
8390: PUSH
8391: LD_INT 4
8393: GREATER
8394: IFFALSE 8404
// class := 1 ;
8396: LD_ADDR_VAR 0 6
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// repeat wait ( 10 ) ;
8404: LD_INT 10
8406: PPUSH
8407: CALL_OW 67
// until not mpBlockRespThread ;
8411: LD_EXP 45
8415: NOT
8416: IFFALSE 8404
// mpBlockRespThread := true ;
8418: LD_ADDR_EXP 45
8422: PUSH
8423: LD_INT 1
8425: ST_TO_ADDR
// uc_side := side ;
8426: LD_ADDR_OWVAR 20
8430: PUSH
8431: LD_VAR 0 9
8435: ST_TO_ADDR
// uc_nation := nation ;
8436: LD_ADDR_OWVAR 21
8440: PUSH
8441: LD_VAR 0 8
8445: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8446: LD_INT 0
8448: PPUSH
8449: LD_VAR 0 6
8453: PPUSH
8454: LD_INT 2
8456: PPUSH
8457: CALL_OW 380
// un := CreateHuman ;
8461: LD_ADDR_VAR 0 1
8465: PUSH
8466: CALL_OW 44
8470: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8471: LD_ADDR_EXP 40
8475: PUSH
8476: LD_EXP 40
8480: PPUSH
8481: LD_VAR 0 9
8485: PPUSH
8486: LD_EXP 40
8490: PUSH
8491: LD_VAR 0 9
8495: ARRAY
8496: PPUSH
8497: LD_EXP 40
8501: PUSH
8502: LD_VAR 0 9
8506: ARRAY
8507: PUSH
8508: LD_INT 1
8510: PLUS
8511: PPUSH
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 1
8521: PPUSH
8522: CALL_OW 1
8526: ST_TO_ADDR
// wait ( 10 ) ;
8527: LD_INT 10
8529: PPUSH
8530: CALL_OW 67
// mpBlockRespThread := false ;
8534: LD_ADDR_EXP 45
8538: PUSH
8539: LD_INT 0
8541: ST_TO_ADDR
// end ; end ;
8542: LD_VAR 0 2
8546: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8547: LD_INT 0
8549: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8550: LD_VAR 0 1
8554: PPUSH
8555: CALL_OW 266
8559: PUSH
8560: LD_INT 0
8562: PUSH
8563: LD_INT 1
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: IN
8570: IFFALSE 8595
// SetBName ( building , @ & GetSide ( building ) ) ;
8572: LD_VAR 0 1
8576: PPUSH
8577: LD_STRING @
8579: PUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 255
8589: STR
8590: PPUSH
8591: CALL_OW 500
// end ;
8595: LD_VAR 0 2
8599: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8600: LD_INT 0
8602: PPUSH
8603: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8604: LD_EXP 3
8608: PUSH
8609: LD_INT 2
8611: EQUAL
8612: IFFALSE 8636
8614: PUSH
8615: LD_VAR 0 1
8619: PPUSH
8620: CALL_OW 266
8624: PUSH
8625: LD_INT 0
8627: PUSH
8628: LD_INT 1
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: IN
8635: AND
8636: IFFALSE 8715
// begin SetSide ( building , oldSide ) ;
8638: LD_VAR 0 1
8642: PPUSH
8643: LD_VAR 0 2
8647: PPUSH
8648: CALL_OW 235
// KillUnit ( building ) ;
8652: LD_VAR 0 1
8656: PPUSH
8657: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8661: LD_ADDR_VAR 0 5
8665: PUSH
8666: LD_INT 22
8668: PUSH
8669: LD_VAR 0 2
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 21
8680: PUSH
8681: LD_INT 1
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PPUSH
8692: CALL_OW 69
8696: PUSH
8697: FOR_IN
8698: IFFALSE 8711
// KillUnit ( i ) ;
8700: LD_VAR 0 5
8704: PPUSH
8705: CALL_OW 66
8709: GO 8697
8711: POP
8712: POP
// exit ;
8713: GO 8760
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8715: LD_VAR 0 1
8719: PPUSH
8720: CALL_OW 266
8724: PUSH
8725: LD_INT 0
8727: PUSH
8728: LD_INT 1
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: IN
8735: IFFALSE 8760
// SetBName ( building , @ & GetSide ( building ) ) ;
8737: LD_VAR 0 1
8741: PPUSH
8742: LD_STRING @
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 255
8754: STR
8755: PPUSH
8756: CALL_OW 500
// end ;
8760: LD_VAR 0 4
8764: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8765: LD_INT 0
8767: PPUSH
8768: PPUSH
8769: PPUSH
// if mpGameType <> GameTypeFamine then
8770: LD_EXP 3
8774: PUSH
8775: LD_INT 5
8777: NONEQUAL
8778: IFFALSE 8782
// exit ;
8780: GO 8996
// for i := 1 to mpGlobalOilDeposits do
8782: LD_ADDR_VAR 0 6
8786: PUSH
8787: DOUBLE
8788: LD_INT 1
8790: DEC
8791: ST_TO_ADDR
8792: LD_EXP 41
8796: PUSH
8797: FOR_TO
8798: IFFALSE 8994
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8800: LD_EXP 41
8804: PUSH
8805: LD_VAR 0 6
8809: ARRAY
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PPUSH
8815: LD_EXP 41
8819: PUSH
8820: LD_VAR 0 6
8824: ARRAY
8825: PUSH
8826: LD_INT 2
8828: ARRAY
8829: PPUSH
8830: CALL_OW 428
8834: PUSH
8835: LD_VAR 0 1
8839: EQUAL
8840: IFFALSE 8992
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8842: LD_ADDR_VAR 0 7
8846: PUSH
8847: LD_EXP 41
8851: PUSH
8852: LD_VAR 0 6
8856: ARRAY
8857: PUSH
8858: LD_INT 3
8860: ARRAY
8861: ST_TO_ADDR
// value := Dec ( value ) ;
8862: LD_ADDR_VAR 0 7
8866: PUSH
8867: LD_VAR 0 7
8871: PPUSH
8872: CALL 49541 0 1
8876: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8877: LD_ADDR_EXP 41
8881: PUSH
8882: LD_EXP 41
8886: PPUSH
8887: LD_VAR 0 6
8891: PPUSH
8892: LD_EXP 41
8896: PUSH
8897: LD_VAR 0 6
8901: ARRAY
8902: PPUSH
8903: LD_INT 3
8905: PPUSH
8906: LD_VAR 0 7
8910: PPUSH
8911: CALL_OW 1
8915: PPUSH
8916: CALL_OW 1
8920: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8921: LD_VAR 0 1
8925: PPUSH
8926: LD_VAR 0 7
8930: PPUSH
8931: CALL_OW 505
// if value = 0 then
8935: LD_VAR 0 7
8939: PUSH
8940: LD_INT 0
8942: EQUAL
8943: IFFALSE 8992
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8945: LD_EXP 41
8949: PUSH
8950: LD_VAR 0 6
8954: ARRAY
8955: PUSH
8956: LD_INT 1
8958: ARRAY
8959: PPUSH
8960: LD_EXP 41
8964: PUSH
8965: LD_VAR 0 6
8969: ARRAY
8970: PUSH
8971: LD_INT 2
8973: ARRAY
8974: PPUSH
8975: CALL_OW 63
// KillUnit ( building ) ;
8979: LD_VAR 0 1
8983: PPUSH
8984: CALL_OW 66
// exit ;
8988: POP
8989: POP
8990: GO 8996
// end ; end ; end ;
8992: GO 8797
8994: POP
8995: POP
// end ;
8996: LD_VAR 0 5
9000: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9001: LD_INT 0
9003: PPUSH
9004: PPUSH
9005: PPUSH
// if mpGameType <> GameTypeFamine then
9006: LD_EXP 3
9010: PUSH
9011: LD_INT 5
9013: NONEQUAL
9014: IFFALSE 9018
// exit ;
9016: GO 9232
// for i := 1 to mpGlobalSibDeposits do
9018: LD_ADDR_VAR 0 6
9022: PUSH
9023: DOUBLE
9024: LD_INT 1
9026: DEC
9027: ST_TO_ADDR
9028: LD_EXP 42
9032: PUSH
9033: FOR_TO
9034: IFFALSE 9230
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9036: LD_EXP 42
9040: PUSH
9041: LD_VAR 0 6
9045: ARRAY
9046: PUSH
9047: LD_INT 1
9049: ARRAY
9050: PPUSH
9051: LD_EXP 42
9055: PUSH
9056: LD_VAR 0 6
9060: ARRAY
9061: PUSH
9062: LD_INT 2
9064: ARRAY
9065: PPUSH
9066: CALL_OW 428
9070: PUSH
9071: LD_VAR 0 1
9075: EQUAL
9076: IFFALSE 9228
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9078: LD_ADDR_VAR 0 7
9082: PUSH
9083: LD_EXP 42
9087: PUSH
9088: LD_VAR 0 6
9092: ARRAY
9093: PUSH
9094: LD_INT 3
9096: ARRAY
9097: ST_TO_ADDR
// value := Dec ( value ) ;
9098: LD_ADDR_VAR 0 7
9102: PUSH
9103: LD_VAR 0 7
9107: PPUSH
9108: CALL 49541 0 1
9112: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9113: LD_ADDR_EXP 42
9117: PUSH
9118: LD_EXP 42
9122: PPUSH
9123: LD_VAR 0 6
9127: PPUSH
9128: LD_EXP 42
9132: PUSH
9133: LD_VAR 0 6
9137: ARRAY
9138: PPUSH
9139: LD_INT 3
9141: PPUSH
9142: LD_VAR 0 7
9146: PPUSH
9147: CALL_OW 1
9151: PPUSH
9152: CALL_OW 1
9156: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9157: LD_VAR 0 1
9161: PPUSH
9162: LD_VAR 0 7
9166: PPUSH
9167: CALL_OW 505
// if value = 0 then
9171: LD_VAR 0 7
9175: PUSH
9176: LD_INT 0
9178: EQUAL
9179: IFFALSE 9228
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9181: LD_EXP 42
9185: PUSH
9186: LD_VAR 0 6
9190: ARRAY
9191: PUSH
9192: LD_INT 1
9194: ARRAY
9195: PPUSH
9196: LD_EXP 42
9200: PUSH
9201: LD_VAR 0 6
9205: ARRAY
9206: PUSH
9207: LD_INT 2
9209: ARRAY
9210: PPUSH
9211: CALL_OW 63
// KillUnit ( building ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: CALL_OW 66
// exit ;
9224: POP
9225: POP
9226: GO 9232
// end ; end ; end ;
9228: GO 9033
9230: POP
9231: POP
// end ; end_of_file
9232: LD_VAR 0 5
9236: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9237: LD_EXP 39
9241: IFFALSE 9249
9243: PUSH
9244: CALL 9459 0 0
9248: AND
9249: IFFALSE 9257
9251: PUSH
9252: LD_OWVAR 4
9256: AND
9257: IFFALSE 9456
9259: GO 9261
9261: DISABLE
9262: LD_INT 0
9264: PPUSH
9265: PPUSH
// begin canWin := false ;
9266: LD_ADDR_VAR 0 2
9270: PUSH
9271: LD_INT 0
9273: ST_TO_ADDR
// if not HasPower ( your_side ) then
9274: LD_OWVAR 2
9278: PPUSH
9279: CALL 9501 0 1
9283: NOT
9284: IFFALSE 9295
// begin Multiplayer_Loose_Message ;
9286: CALL_OW 521
// enable ( mpLose ) ;
9290: LD_INT 102
9292: ENABLE_MARKED
// end else
9293: GO 9456
// begin canWin := true ;
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_INT 1
9302: ST_TO_ADDR
// for i := 1 to 8 do
9303: LD_ADDR_VAR 0 1
9307: PUSH
9308: DOUBLE
9309: LD_INT 1
9311: DEC
9312: ST_TO_ADDR
9313: LD_INT 8
9315: PUSH
9316: FOR_TO
9317: IFFALSE 9442
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9319: LD_EXP 7
9323: PUSH
9324: LD_VAR 0 1
9328: ARRAY
9329: IFFALSE 9342
9331: PUSH
9332: LD_VAR 0 1
9336: PPUSH
9337: CALL_OW 108
9341: AND
9342: IFFALSE 9356
9344: PUSH
9345: LD_VAR 0 1
9349: PUSH
9350: LD_OWVAR 2
9354: NONEQUAL
9355: AND
9356: IFFALSE 9440
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9358: LD_EXP 8
9362: PUSH
9363: LD_VAR 0 1
9367: ARRAY
9368: NOT
9369: IFTRUE 9417
9371: PUSH
9372: LD_EXP 8
9376: PUSH
9377: LD_VAR 0 1
9381: ARRAY
9382: PUSH
9383: LD_EXP 8
9387: PUSH
9388: LD_OWVAR 2
9392: ARRAY
9393: NONEQUAL
9394: IFFALSE 9416
9396: PUSH
9397: LD_OWVAR 2
9401: PPUSH
9402: LD_VAR 0 1
9406: PPUSH
9407: CALL_OW 81
9411: PUSH
9412: LD_INT 1
9414: NONEQUAL
9415: AND
9416: OR
9417: IFFALSE 9440
// if HasPower ( i ) then
9419: LD_VAR 0 1
9423: PPUSH
9424: CALL 9501 0 1
9428: IFFALSE 9440
// begin canWin := false ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 0
9437: ST_TO_ADDR
// break ;
9438: GO 9442
// end ;
9440: GO 9316
9442: POP
9443: POP
// if canWin then
9444: LD_VAR 0 2
9448: IFFALSE 9455
// enable ( mpWin ) else
9450: LD_INT 101
9452: ENABLE_MARKED
9453: GO 9456
// enable ;
9455: ENABLE
// end ; end ;
9456: PPOPN 2
9458: END
// function CanWinLoose ; begin
9459: LD_INT 0
9461: PPUSH
// result := true ;
9462: LD_ADDR_VAR 0 1
9466: PUSH
9467: LD_INT 1
9469: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9470: CALL_OW 531
9474: IFFALSE 9486
9476: PUSH
9477: CALL_OW 519
9481: PUSH
9482: LD_INT 1
9484: GREATER
9485: AND
9486: IFFALSE 9496
// result := false ;
9488: LD_ADDR_VAR 0 1
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// end ;
9496: LD_VAR 0 1
9500: RET
// function HasPower ( i ) ; begin
9501: LD_INT 0
9503: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9504: LD_ADDR_VAR 0 2
9508: PUSH
9509: LD_INT 22
9511: PUSH
9512: LD_VAR 0 1
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 2
9523: PUSH
9524: LD_INT 21
9526: PUSH
9527: LD_INT 1
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: LD_INT 33
9536: PUSH
9537: LD_INT 3
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: LD_INT 33
9546: PUSH
9547: LD_INT 5
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PPUSH
9564: CALL_OW 69
9568: ST_TO_ADDR
// end ; end_of_file
9569: LD_VAR 0 2
9573: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9574: LD_EXP 39
9578: IFFALSE 9621
9580: GO 9582
9582: DISABLE
9583: LD_INT 0
9585: PPUSH
// begin for i := 1 to 8 do
9586: LD_ADDR_VAR 0 1
9590: PUSH
9591: DOUBLE
9592: LD_INT 1
9594: DEC
9595: ST_TO_ADDR
9596: LD_INT 8
9598: PUSH
9599: FOR_TO
9600: IFFALSE 9619
// SetRestrict ( b_depot , i , state_disabled ) ;
9602: LD_INT 0
9604: PPUSH
9605: LD_VAR 0 1
9609: PPUSH
9610: LD_INT 0
9612: PPUSH
9613: CALL_OW 324
9617: GO 9599
9619: POP
9620: POP
// end ;
9621: PPOPN 1
9623: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9624: LD_EXP 39
9628: IFFALSE 9636
9630: PUSH
9631: CALL 9846 0 0
9635: AND
9636: IFFALSE 9644
9638: PUSH
9639: LD_OWVAR 4
9643: AND
9644: IFFALSE 9843
9646: GO 9648
9648: DISABLE
9649: LD_INT 0
9651: PPUSH
9652: PPUSH
// begin canWin := false ;
9653: LD_ADDR_VAR 0 2
9657: PUSH
9658: LD_INT 0
9660: ST_TO_ADDR
// if not HasPower ( your_side ) then
9661: LD_OWVAR 2
9665: PPUSH
9666: CALL 9888 0 1
9670: NOT
9671: IFFALSE 9682
// begin Multiplayer_Loose_Message ;
9673: CALL_OW 521
// enable ( mpLose ) ;
9677: LD_INT 102
9679: ENABLE_MARKED
// end else
9680: GO 9843
// begin canWin := true ;
9682: LD_ADDR_VAR 0 2
9686: PUSH
9687: LD_INT 1
9689: ST_TO_ADDR
// for i := 1 to 8 do
9690: LD_ADDR_VAR 0 1
9694: PUSH
9695: DOUBLE
9696: LD_INT 1
9698: DEC
9699: ST_TO_ADDR
9700: LD_INT 8
9702: PUSH
9703: FOR_TO
9704: IFFALSE 9829
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9706: LD_EXP 7
9710: PUSH
9711: LD_VAR 0 1
9715: ARRAY
9716: IFFALSE 9729
9718: PUSH
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 108
9728: AND
9729: IFFALSE 9743
9731: PUSH
9732: LD_VAR 0 1
9736: PUSH
9737: LD_OWVAR 2
9741: NONEQUAL
9742: AND
9743: IFFALSE 9827
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9745: LD_EXP 8
9749: PUSH
9750: LD_VAR 0 1
9754: ARRAY
9755: NOT
9756: IFTRUE 9804
9758: PUSH
9759: LD_EXP 8
9763: PUSH
9764: LD_VAR 0 1
9768: ARRAY
9769: PUSH
9770: LD_EXP 8
9774: PUSH
9775: LD_OWVAR 2
9779: ARRAY
9780: NONEQUAL
9781: IFFALSE 9803
9783: PUSH
9784: LD_OWVAR 2
9788: PPUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: CALL_OW 81
9798: PUSH
9799: LD_INT 1
9801: NONEQUAL
9802: AND
9803: OR
9804: IFFALSE 9827
// if HasPower ( i ) then
9806: LD_VAR 0 1
9810: PPUSH
9811: CALL 9888 0 1
9815: IFFALSE 9827
// begin canWin := false ;
9817: LD_ADDR_VAR 0 2
9821: PUSH
9822: LD_INT 0
9824: ST_TO_ADDR
// break ;
9825: GO 9829
// end ;
9827: GO 9703
9829: POP
9830: POP
// if canWin then
9831: LD_VAR 0 2
9835: IFFALSE 9842
// enable ( mpWin ) else
9837: LD_INT 101
9839: ENABLE_MARKED
9840: GO 9843
// enable ;
9842: ENABLE
// end ; end ;
9843: PPOPN 2
9845: END
// function CanWinLoose ; begin
9846: LD_INT 0
9848: PPUSH
// result := true ;
9849: LD_ADDR_VAR 0 1
9853: PUSH
9854: LD_INT 1
9856: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9857: CALL_OW 531
9861: IFFALSE 9873
9863: PUSH
9864: CALL_OW 519
9868: PUSH
9869: LD_INT 1
9871: GREATER
9872: AND
9873: IFFALSE 9883
// result := false ;
9875: LD_ADDR_VAR 0 1
9879: PUSH
9880: LD_INT 0
9882: ST_TO_ADDR
// end ;
9883: LD_VAR 0 1
9887: RET
// function HasPower ( i ) ; begin
9888: LD_INT 0
9890: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9891: LD_INT 22
9893: PUSH
9894: LD_VAR 0 1
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 2
9905: PUSH
9906: LD_INT 30
9908: PUSH
9909: LD_INT 0
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 30
9918: PUSH
9919: LD_INT 1
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PPUSH
9935: CALL_OW 69
9939: NOT
9940: IFFALSE 9944
// exit ;
9942: GO 10009
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9944: LD_ADDR_VAR 0 2
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_VAR 0 1
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: LD_INT 21
9966: PUSH
9967: LD_INT 1
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 33
9976: PUSH
9977: LD_INT 3
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 33
9986: PUSH
9987: LD_INT 5
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PPUSH
10004: CALL_OW 69
10008: ST_TO_ADDR
// end ; end_of_file
10009: LD_VAR 0 2
10013: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10014: LD_INT 0
10016: PPUSH
10017: PPUSH
// if exist_mode then
10018: LD_VAR 0 2
10022: IFFALSE 10068
// begin unit := CreateCharacter ( prefix & ident ) ;
10024: LD_ADDR_VAR 0 5
10028: PUSH
10029: LD_VAR 0 3
10033: PUSH
10034: LD_VAR 0 1
10038: STR
10039: PPUSH
10040: CALL_OW 34
10044: ST_TO_ADDR
// if unit then
10045: LD_VAR 0 5
10049: IFFALSE 10066
// DeleteCharacters ( prefix & ident ) ;
10051: LD_VAR 0 3
10055: PUSH
10056: LD_VAR 0 1
10060: STR
10061: PPUSH
10062: CALL_OW 40
// end else
10066: GO 10083
// unit := NewCharacter ( ident ) ;
10068: LD_ADDR_VAR 0 5
10072: PUSH
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL_OW 25
10082: ST_TO_ADDR
// result := unit ;
10083: LD_ADDR_VAR 0 4
10087: PUSH
10088: LD_VAR 0 5
10092: ST_TO_ADDR
// end ;
10093: LD_VAR 0 4
10097: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10098: LD_INT 0
10100: PPUSH
10101: PPUSH
// if exist_mode then
10102: LD_VAR 0 2
10106: IFFALSE 10131
// unit := CreateCharacter ( prefix & ident ) else
10108: LD_ADDR_VAR 0 5
10112: PUSH
10113: LD_VAR 0 3
10117: PUSH
10118: LD_VAR 0 1
10122: STR
10123: PPUSH
10124: CALL_OW 34
10128: ST_TO_ADDR
10129: GO 10146
// unit := NewCharacter ( ident ) ;
10131: LD_ADDR_VAR 0 5
10135: PUSH
10136: LD_VAR 0 1
10140: PPUSH
10141: CALL_OW 25
10145: ST_TO_ADDR
// result := unit ;
10146: LD_ADDR_VAR 0 4
10150: PUSH
10151: LD_VAR 0 5
10155: ST_TO_ADDR
// end ;
10156: LD_VAR 0 4
10160: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10161: LD_INT 0
10163: PPUSH
10164: PPUSH
// if not side or not nation then
10165: LD_VAR 0 1
10169: NOT
10170: IFTRUE 10179
10172: PUSH
10173: LD_VAR 0 2
10177: NOT
10178: OR
10179: IFFALSE 10183
// exit ;
10181: GO 10953
// case nation of nation_american :
10183: LD_VAR 0 2
10187: PUSH
10188: LD_INT 1
10190: DOUBLE
10191: EQUAL
10192: IFTRUE 10196
10194: GO 10410
10196: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10197: LD_ADDR_VAR 0 4
10201: PUSH
10202: LD_INT 35
10204: PUSH
10205: LD_INT 45
10207: PUSH
10208: LD_INT 46
10210: PUSH
10211: LD_INT 47
10213: PUSH
10214: LD_INT 82
10216: PUSH
10217: LD_INT 83
10219: PUSH
10220: LD_INT 84
10222: PUSH
10223: LD_INT 85
10225: PUSH
10226: LD_INT 86
10228: PUSH
10229: LD_INT 1
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: LD_INT 6
10237: PUSH
10238: LD_INT 15
10240: PUSH
10241: LD_INT 16
10243: PUSH
10244: LD_INT 7
10246: PUSH
10247: LD_INT 12
10249: PUSH
10250: LD_INT 13
10252: PUSH
10253: LD_INT 10
10255: PUSH
10256: LD_INT 14
10258: PUSH
10259: LD_INT 20
10261: PUSH
10262: LD_INT 21
10264: PUSH
10265: LD_INT 22
10267: PUSH
10268: LD_INT 25
10270: PUSH
10271: LD_INT 32
10273: PUSH
10274: LD_INT 27
10276: PUSH
10277: LD_INT 36
10279: PUSH
10280: LD_INT 69
10282: PUSH
10283: LD_INT 39
10285: PUSH
10286: LD_INT 34
10288: PUSH
10289: LD_INT 40
10291: PUSH
10292: LD_INT 48
10294: PUSH
10295: LD_INT 49
10297: PUSH
10298: LD_INT 50
10300: PUSH
10301: LD_INT 51
10303: PUSH
10304: LD_INT 52
10306: PUSH
10307: LD_INT 53
10309: PUSH
10310: LD_INT 54
10312: PUSH
10313: LD_INT 55
10315: PUSH
10316: LD_INT 56
10318: PUSH
10319: LD_INT 57
10321: PUSH
10322: LD_INT 58
10324: PUSH
10325: LD_INT 59
10327: PUSH
10328: LD_INT 60
10330: PUSH
10331: LD_INT 61
10333: PUSH
10334: LD_INT 62
10336: PUSH
10337: LD_INT 80
10339: PUSH
10340: LD_INT 82
10342: PUSH
10343: LD_INT 83
10345: PUSH
10346: LD_INT 84
10348: PUSH
10349: LD_INT 85
10351: PUSH
10352: LD_INT 86
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
10408: GO 10875
10410: LD_INT 2
10412: DOUBLE
10413: EQUAL
10414: IFTRUE 10418
10416: GO 10644
10418: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10419: LD_ADDR_VAR 0 4
10423: PUSH
10424: LD_INT 35
10426: PUSH
10427: LD_INT 45
10429: PUSH
10430: LD_INT 46
10432: PUSH
10433: LD_INT 47
10435: PUSH
10436: LD_INT 82
10438: PUSH
10439: LD_INT 83
10441: PUSH
10442: LD_INT 84
10444: PUSH
10445: LD_INT 85
10447: PUSH
10448: LD_INT 87
10450: PUSH
10451: LD_INT 70
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: LD_INT 11
10459: PUSH
10460: LD_INT 3
10462: PUSH
10463: LD_INT 4
10465: PUSH
10466: LD_INT 5
10468: PUSH
10469: LD_INT 6
10471: PUSH
10472: LD_INT 15
10474: PUSH
10475: LD_INT 18
10477: PUSH
10478: LD_INT 7
10480: PUSH
10481: LD_INT 17
10483: PUSH
10484: LD_INT 8
10486: PUSH
10487: LD_INT 20
10489: PUSH
10490: LD_INT 21
10492: PUSH
10493: LD_INT 22
10495: PUSH
10496: LD_INT 72
10498: PUSH
10499: LD_INT 26
10501: PUSH
10502: LD_INT 69
10504: PUSH
10505: LD_INT 39
10507: PUSH
10508: LD_INT 40
10510: PUSH
10511: LD_INT 41
10513: PUSH
10514: LD_INT 42
10516: PUSH
10517: LD_INT 43
10519: PUSH
10520: LD_INT 48
10522: PUSH
10523: LD_INT 49
10525: PUSH
10526: LD_INT 50
10528: PUSH
10529: LD_INT 51
10531: PUSH
10532: LD_INT 52
10534: PUSH
10535: LD_INT 53
10537: PUSH
10538: LD_INT 54
10540: PUSH
10541: LD_INT 55
10543: PUSH
10544: LD_INT 56
10546: PUSH
10547: LD_INT 60
10549: PUSH
10550: LD_INT 61
10552: PUSH
10553: LD_INT 62
10555: PUSH
10556: LD_INT 66
10558: PUSH
10559: LD_INT 67
10561: PUSH
10562: LD_INT 68
10564: PUSH
10565: LD_INT 81
10567: PUSH
10568: LD_INT 82
10570: PUSH
10571: LD_INT 83
10573: PUSH
10574: LD_INT 84
10576: PUSH
10577: LD_INT 85
10579: PUSH
10580: LD_INT 87
10582: PUSH
10583: LD_INT 88
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: ST_TO_ADDR
10642: GO 10875
10644: LD_INT 3
10646: DOUBLE
10647: EQUAL
10648: IFTRUE 10652
10650: GO 10874
10652: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10653: LD_ADDR_VAR 0 4
10657: PUSH
10658: LD_INT 46
10660: PUSH
10661: LD_INT 47
10663: PUSH
10664: LD_INT 1
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: LD_INT 82
10672: PUSH
10673: LD_INT 83
10675: PUSH
10676: LD_INT 84
10678: PUSH
10679: LD_INT 85
10681: PUSH
10682: LD_INT 86
10684: PUSH
10685: LD_INT 11
10687: PUSH
10688: LD_INT 9
10690: PUSH
10691: LD_INT 20
10693: PUSH
10694: LD_INT 19
10696: PUSH
10697: LD_INT 21
10699: PUSH
10700: LD_INT 24
10702: PUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 25
10708: PUSH
10709: LD_INT 28
10711: PUSH
10712: LD_INT 29
10714: PUSH
10715: LD_INT 30
10717: PUSH
10718: LD_INT 31
10720: PUSH
10721: LD_INT 37
10723: PUSH
10724: LD_INT 38
10726: PUSH
10727: LD_INT 32
10729: PUSH
10730: LD_INT 27
10732: PUSH
10733: LD_INT 33
10735: PUSH
10736: LD_INT 69
10738: PUSH
10739: LD_INT 39
10741: PUSH
10742: LD_INT 34
10744: PUSH
10745: LD_INT 40
10747: PUSH
10748: LD_INT 71
10750: PUSH
10751: LD_INT 23
10753: PUSH
10754: LD_INT 44
10756: PUSH
10757: LD_INT 48
10759: PUSH
10760: LD_INT 49
10762: PUSH
10763: LD_INT 50
10765: PUSH
10766: LD_INT 51
10768: PUSH
10769: LD_INT 52
10771: PUSH
10772: LD_INT 53
10774: PUSH
10775: LD_INT 54
10777: PUSH
10778: LD_INT 55
10780: PUSH
10781: LD_INT 56
10783: PUSH
10784: LD_INT 57
10786: PUSH
10787: LD_INT 58
10789: PUSH
10790: LD_INT 59
10792: PUSH
10793: LD_INT 63
10795: PUSH
10796: LD_INT 64
10798: PUSH
10799: LD_INT 65
10801: PUSH
10802: LD_INT 82
10804: PUSH
10805: LD_INT 83
10807: PUSH
10808: LD_INT 84
10810: PUSH
10811: LD_INT 85
10813: PUSH
10814: LD_INT 86
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: ST_TO_ADDR
10872: GO 10875
10874: POP
// if state > - 1 and state < 3 then
10875: LD_VAR 0 3
10879: PUSH
10880: LD_INT 1
10882: NEG
10883: GREATER
10884: IFFALSE 10896
10886: PUSH
10887: LD_VAR 0 3
10891: PUSH
10892: LD_INT 3
10894: LESS
10895: AND
10896: IFFALSE 10953
// for i in result do
10898: LD_ADDR_VAR 0 5
10902: PUSH
10903: LD_VAR 0 4
10907: PUSH
10908: FOR_IN
10909: IFFALSE 10951
// if GetTech ( i , side ) <> state then
10911: LD_VAR 0 5
10915: PPUSH
10916: LD_VAR 0 1
10920: PPUSH
10921: CALL_OW 321
10925: PUSH
10926: LD_VAR 0 3
10930: NONEQUAL
10931: IFFALSE 10949
// result := result diff i ;
10933: LD_ADDR_VAR 0 4
10937: PUSH
10938: LD_VAR 0 4
10942: PUSH
10943: LD_VAR 0 5
10947: DIFF
10948: ST_TO_ADDR
10949: GO 10908
10951: POP
10952: POP
// end ;
10953: LD_VAR 0 4
10957: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10958: LD_INT 0
10960: PPUSH
10961: PPUSH
10962: PPUSH
// result := true ;
10963: LD_ADDR_VAR 0 3
10967: PUSH
10968: LD_INT 1
10970: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10971: LD_ADDR_VAR 0 5
10975: PUSH
10976: LD_VAR 0 2
10980: PPUSH
10981: CALL_OW 480
10985: ST_TO_ADDR
// if not tmp then
10986: LD_VAR 0 5
10990: NOT
10991: IFFALSE 10995
// exit ;
10993: GO 11044
// for i in tmp do
10995: LD_ADDR_VAR 0 4
10999: PUSH
11000: LD_VAR 0 5
11004: PUSH
11005: FOR_IN
11006: IFFALSE 11042
// if GetTech ( i , side ) <> state_researched then
11008: LD_VAR 0 4
11012: PPUSH
11013: LD_VAR 0 1
11017: PPUSH
11018: CALL_OW 321
11022: PUSH
11023: LD_INT 2
11025: NONEQUAL
11026: IFFALSE 11040
// begin result := false ;
11028: LD_ADDR_VAR 0 3
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// exit ;
11036: POP
11037: POP
11038: GO 11044
// end ;
11040: GO 11005
11042: POP
11043: POP
// end ;
11044: LD_VAR 0 3
11048: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
11053: PPUSH
11054: PPUSH
11055: PPUSH
11056: PPUSH
11057: PPUSH
11058: PPUSH
11059: PPUSH
11060: PPUSH
11061: PPUSH
11062: PPUSH
11063: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11064: LD_VAR 0 1
11068: NOT
11069: IFTRUE 11086
11071: PUSH
11072: LD_VAR 0 1
11076: PPUSH
11077: CALL_OW 257
11081: PUSH
11082: LD_INT 9
11084: NONEQUAL
11085: OR
11086: IFFALSE 11090
// exit ;
11088: GO 11669
// side := GetSide ( unit ) ;
11090: LD_ADDR_VAR 0 9
11094: PUSH
11095: LD_VAR 0 1
11099: PPUSH
11100: CALL_OW 255
11104: ST_TO_ADDR
// tech_space := tech_spacanom ;
11105: LD_ADDR_VAR 0 12
11109: PUSH
11110: LD_INT 29
11112: ST_TO_ADDR
// tech_time := tech_taurad ;
11113: LD_ADDR_VAR 0 13
11117: PUSH
11118: LD_INT 28
11120: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11121: LD_ADDR_VAR 0 11
11125: PUSH
11126: LD_VAR 0 1
11130: PPUSH
11131: CALL_OW 310
11135: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11136: LD_VAR 0 11
11140: PPUSH
11141: CALL_OW 247
11145: PUSH
11146: LD_INT 2
11148: EQUAL
11149: IFFALSE 11153
// exit ;
11151: GO 11669
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11153: LD_ADDR_VAR 0 8
11157: PUSH
11158: LD_INT 81
11160: PUSH
11161: LD_VAR 0 9
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 3
11172: PUSH
11173: LD_INT 21
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PPUSH
11191: CALL_OW 69
11195: ST_TO_ADDR
// if not tmp then
11196: LD_VAR 0 8
11200: NOT
11201: IFFALSE 11205
// exit ;
11203: GO 11669
// if in_unit then
11205: LD_VAR 0 11
11209: IFFALSE 11233
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11211: LD_ADDR_VAR 0 10
11215: PUSH
11216: LD_VAR 0 8
11220: PPUSH
11221: LD_VAR 0 11
11225: PPUSH
11226: CALL_OW 74
11230: ST_TO_ADDR
11231: GO 11253
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11233: LD_ADDR_VAR 0 10
11237: PUSH
11238: LD_VAR 0 8
11242: PPUSH
11243: LD_VAR 0 1
11247: PPUSH
11248: CALL_OW 74
11252: ST_TO_ADDR
// if not enemy then
11253: LD_VAR 0 10
11257: NOT
11258: IFFALSE 11262
// exit ;
11260: GO 11669
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11262: LD_VAR 0 11
11266: IFFALSE 11288
11268: PUSH
11269: LD_VAR 0 11
11273: PPUSH
11274: LD_VAR 0 10
11278: PPUSH
11279: CALL_OW 296
11283: PUSH
11284: LD_INT 13
11286: GREATER
11287: AND
11288: IFTRUE 11310
11290: PUSH
11291: LD_VAR 0 1
11295: PPUSH
11296: LD_VAR 0 10
11300: PPUSH
11301: CALL_OW 296
11305: PUSH
11306: LD_INT 12
11308: GREATER
11309: OR
11310: IFFALSE 11314
// exit ;
11312: GO 11669
// missile := [ 1 ] ;
11314: LD_ADDR_VAR 0 14
11318: PUSH
11319: LD_INT 1
11321: PUSH
11322: EMPTY
11323: LIST
11324: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11325: LD_VAR 0 9
11329: PPUSH
11330: LD_VAR 0 12
11334: PPUSH
11335: CALL_OW 325
11339: IFFALSE 11368
// missile := Replace ( missile , missile + 1 , 2 ) ;
11341: LD_ADDR_VAR 0 14
11345: PUSH
11346: LD_VAR 0 14
11350: PPUSH
11351: LD_VAR 0 14
11355: PUSH
11356: LD_INT 1
11358: PLUS
11359: PPUSH
11360: LD_INT 2
11362: PPUSH
11363: CALL_OW 1
11367: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11368: LD_VAR 0 9
11372: PPUSH
11373: LD_VAR 0 13
11377: PPUSH
11378: CALL_OW 325
11382: IFFALSE 11406
11384: PUSH
11385: LD_VAR 0 10
11389: PPUSH
11390: CALL_OW 255
11394: PPUSH
11395: LD_VAR 0 13
11399: PPUSH
11400: CALL_OW 325
11404: NOT
11405: AND
11406: IFFALSE 11435
// missile := Replace ( missile , missile + 1 , 3 ) ;
11408: LD_ADDR_VAR 0 14
11412: PUSH
11413: LD_VAR 0 14
11417: PPUSH
11418: LD_VAR 0 14
11422: PUSH
11423: LD_INT 1
11425: PLUS
11426: PPUSH
11427: LD_INT 3
11429: PPUSH
11430: CALL_OW 1
11434: ST_TO_ADDR
// if missile < 2 then
11435: LD_VAR 0 14
11439: PUSH
11440: LD_INT 2
11442: LESS
11443: IFFALSE 11447
// exit ;
11445: GO 11669
// x := GetX ( enemy ) ;
11447: LD_ADDR_VAR 0 4
11451: PUSH
11452: LD_VAR 0 10
11456: PPUSH
11457: CALL_OW 250
11461: ST_TO_ADDR
// y := GetY ( enemy ) ;
11462: LD_ADDR_VAR 0 5
11466: PUSH
11467: LD_VAR 0 10
11471: PPUSH
11472: CALL_OW 251
11476: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11477: LD_ADDR_VAR 0 6
11481: PUSH
11482: LD_VAR 0 4
11486: PUSH
11487: LD_INT 1
11489: NEG
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: CALL_OW 12
11498: PLUS
11499: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11500: LD_ADDR_VAR 0 7
11504: PUSH
11505: LD_VAR 0 5
11509: PUSH
11510: LD_INT 1
11512: NEG
11513: PPUSH
11514: LD_INT 1
11516: PPUSH
11517: CALL_OW 12
11521: PLUS
11522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11523: LD_VAR 0 6
11527: PPUSH
11528: LD_VAR 0 7
11532: PPUSH
11533: CALL_OW 488
11537: NOT
11538: IFFALSE 11560
// begin _x := x ;
11540: LD_ADDR_VAR 0 6
11544: PUSH
11545: LD_VAR 0 4
11549: ST_TO_ADDR
// _y := y ;
11550: LD_ADDR_VAR 0 7
11554: PUSH
11555: LD_VAR 0 5
11559: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11560: LD_ADDR_VAR 0 3
11564: PUSH
11565: LD_INT 1
11567: PPUSH
11568: LD_VAR 0 14
11572: PPUSH
11573: CALL_OW 12
11577: ST_TO_ADDR
// case i of 1 :
11578: LD_VAR 0 3
11582: PUSH
11583: LD_INT 1
11585: DOUBLE
11586: EQUAL
11587: IFTRUE 11591
11589: GO 11608
11591: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11592: LD_VAR 0 1
11596: PPUSH
11597: LD_VAR 0 10
11601: PPUSH
11602: CALL_OW 115
11606: GO 11669
11608: LD_INT 2
11610: DOUBLE
11611: EQUAL
11612: IFTRUE 11616
11614: GO 11638
11616: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11617: LD_VAR 0 1
11621: PPUSH
11622: LD_VAR 0 6
11626: PPUSH
11627: LD_VAR 0 7
11631: PPUSH
11632: CALL_OW 153
11636: GO 11669
11638: LD_INT 3
11640: DOUBLE
11641: EQUAL
11642: IFTRUE 11646
11644: GO 11668
11646: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11647: LD_VAR 0 1
11651: PPUSH
11652: LD_VAR 0 6
11656: PPUSH
11657: LD_VAR 0 7
11661: PPUSH
11662: CALL_OW 154
11666: GO 11669
11668: POP
// end ;
11669: LD_VAR 0 2
11673: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11674: LD_INT 0
11676: PPUSH
11677: PPUSH
11678: PPUSH
11679: PPUSH
11680: PPUSH
11681: PPUSH
// if not unit or not building then
11682: LD_VAR 0 1
11686: NOT
11687: IFTRUE 11696
11689: PUSH
11690: LD_VAR 0 2
11694: NOT
11695: OR
11696: IFFALSE 11700
// exit ;
11698: GO 11858
// x := GetX ( building ) ;
11700: LD_ADDR_VAR 0 5
11704: PUSH
11705: LD_VAR 0 2
11709: PPUSH
11710: CALL_OW 250
11714: ST_TO_ADDR
// y := GetY ( building ) ;
11715: LD_ADDR_VAR 0 6
11719: PUSH
11720: LD_VAR 0 2
11724: PPUSH
11725: CALL_OW 251
11729: ST_TO_ADDR
// for i := 0 to 5 do
11730: LD_ADDR_VAR 0 4
11734: PUSH
11735: DOUBLE
11736: LD_INT 0
11738: DEC
11739: ST_TO_ADDR
11740: LD_INT 5
11742: PUSH
11743: FOR_TO
11744: IFFALSE 11856
// begin _x := ShiftX ( x , i , 3 ) ;
11746: LD_ADDR_VAR 0 7
11750: PUSH
11751: LD_VAR 0 5
11755: PPUSH
11756: LD_VAR 0 4
11760: PPUSH
11761: LD_INT 3
11763: PPUSH
11764: CALL_OW 272
11768: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11769: LD_ADDR_VAR 0 8
11773: PUSH
11774: LD_VAR 0 6
11778: PPUSH
11779: LD_VAR 0 4
11783: PPUSH
11784: LD_INT 3
11786: PPUSH
11787: CALL_OW 273
11791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11792: LD_VAR 0 7
11796: PPUSH
11797: LD_VAR 0 8
11801: PPUSH
11802: CALL_OW 488
11806: NOT
11807: IFFALSE 11811
// continue ;
11809: GO 11743
// if HexInfo ( _x , _y ) = 0 then
11811: LD_VAR 0 7
11815: PPUSH
11816: LD_VAR 0 8
11820: PPUSH
11821: CALL_OW 428
11825: PUSH
11826: LD_INT 0
11828: EQUAL
11829: IFFALSE 11854
// begin ComMoveXY ( unit , _x , _y ) ;
11831: LD_VAR 0 1
11835: PPUSH
11836: LD_VAR 0 7
11840: PPUSH
11841: LD_VAR 0 8
11845: PPUSH
11846: CALL_OW 111
// exit ;
11850: POP
11851: POP
11852: GO 11858
// end ; end ;
11854: GO 11743
11856: POP
11857: POP
// end ;
11858: LD_VAR 0 3
11862: RET
// export function ScanBase ( side , base_area ) ; begin
11863: LD_INT 0
11865: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11866: LD_ADDR_VAR 0 3
11870: PUSH
11871: LD_VAR 0 2
11875: PPUSH
11876: LD_INT 81
11878: PUSH
11879: LD_VAR 0 1
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PPUSH
11888: CALL_OW 70
11892: ST_TO_ADDR
// end ;
11893: LD_VAR 0 3
11897: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11898: LD_INT 0
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
// result := false ;
11904: LD_ADDR_VAR 0 2
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// side := GetSide ( unit ) ;
11912: LD_ADDR_VAR 0 3
11916: PUSH
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 255
11926: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11927: LD_ADDR_VAR 0 4
11931: PUSH
11932: LD_VAR 0 1
11936: PPUSH
11937: CALL_OW 248
11941: ST_TO_ADDR
// case nat of 1 :
11942: LD_VAR 0 4
11946: PUSH
11947: LD_INT 1
11949: DOUBLE
11950: EQUAL
11951: IFTRUE 11955
11953: GO 11966
11955: POP
// tech := tech_lassight ; 2 :
11956: LD_ADDR_VAR 0 5
11960: PUSH
11961: LD_INT 12
11963: ST_TO_ADDR
11964: GO 12005
11966: LD_INT 2
11968: DOUBLE
11969: EQUAL
11970: IFTRUE 11974
11972: GO 11985
11974: POP
// tech := tech_mortar ; 3 :
11975: LD_ADDR_VAR 0 5
11979: PUSH
11980: LD_INT 41
11982: ST_TO_ADDR
11983: GO 12005
11985: LD_INT 3
11987: DOUBLE
11988: EQUAL
11989: IFTRUE 11993
11991: GO 12004
11993: POP
// tech := tech_bazooka ; end ;
11994: LD_ADDR_VAR 0 5
11998: PUSH
11999: LD_INT 44
12001: ST_TO_ADDR
12002: GO 12005
12004: POP
// if Researched ( side , tech ) then
12005: LD_VAR 0 3
12009: PPUSH
12010: LD_VAR 0 5
12014: PPUSH
12015: CALL_OW 325
12019: IFFALSE 12046
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12021: LD_ADDR_VAR 0 2
12025: PUSH
12026: LD_INT 5
12028: PUSH
12029: LD_INT 8
12031: PUSH
12032: LD_INT 9
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: LD_VAR 0 4
12044: ARRAY
12045: ST_TO_ADDR
// end ;
12046: LD_VAR 0 2
12050: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12051: LD_INT 0
12053: PPUSH
12054: PPUSH
12055: PPUSH
// if not mines then
12056: LD_VAR 0 2
12060: NOT
12061: IFFALSE 12065
// exit ;
12063: GO 12209
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12065: LD_ADDR_VAR 0 5
12069: PUSH
12070: LD_INT 81
12072: PUSH
12073: LD_VAR 0 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 3
12084: PUSH
12085: LD_INT 21
12087: PUSH
12088: LD_INT 3
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 69
12107: ST_TO_ADDR
// for i in mines do
12108: LD_ADDR_VAR 0 4
12112: PUSH
12113: LD_VAR 0 2
12117: PUSH
12118: FOR_IN
12119: IFFALSE 12207
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12121: LD_VAR 0 4
12125: PUSH
12126: LD_INT 1
12128: ARRAY
12129: PPUSH
12130: LD_VAR 0 4
12134: PUSH
12135: LD_INT 2
12137: ARRAY
12138: PPUSH
12139: CALL_OW 458
12143: NOT
12144: IFFALSE 12148
// continue ;
12146: GO 12118
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12148: LD_VAR 0 4
12152: PUSH
12153: LD_INT 1
12155: ARRAY
12156: PPUSH
12157: LD_VAR 0 4
12161: PUSH
12162: LD_INT 2
12164: ARRAY
12165: PPUSH
12166: CALL_OW 428
12170: PUSH
12171: LD_VAR 0 5
12175: IN
12176: IFFALSE 12205
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12178: LD_VAR 0 4
12182: PUSH
12183: LD_INT 1
12185: ARRAY
12186: PPUSH
12187: LD_VAR 0 4
12191: PUSH
12192: LD_INT 2
12194: ARRAY
12195: PPUSH
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL_OW 456
// end ;
12205: GO 12118
12207: POP
12208: POP
// end ;
12209: LD_VAR 0 3
12213: RET
// export function Count ( array ) ; begin
12214: LD_INT 0
12216: PPUSH
// result := array + 0 ;
12217: LD_ADDR_VAR 0 2
12221: PUSH
12222: LD_VAR 0 1
12226: PUSH
12227: LD_INT 0
12229: PLUS
12230: ST_TO_ADDR
// end ;
12231: LD_VAR 0 2
12235: RET
// export function IsEmpty ( building ) ; begin
12236: LD_INT 0
12238: PPUSH
// if not building then
12239: LD_VAR 0 1
12243: NOT
12244: IFFALSE 12248
// exit ;
12246: GO 12291
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12248: LD_ADDR_VAR 0 2
12252: PUSH
12253: LD_VAR 0 1
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_VAR 0 1
12265: PPUSH
12266: CALL_OW 255
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 58
12277: PUSH
12278: EMPTY
12279: LIST
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PPUSH
12285: CALL_OW 69
12289: IN
12290: ST_TO_ADDR
// end ;
12291: LD_VAR 0 2
12295: RET
// export function IsNotFull ( building ) ; var places ; begin
12296: LD_INT 0
12298: PPUSH
12299: PPUSH
// if not building then
12300: LD_VAR 0 1
12304: NOT
12305: IFFALSE 12309
// exit ;
12307: GO 12337
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12309: LD_ADDR_VAR 0 2
12313: PUSH
12314: LD_VAR 0 1
12318: PPUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 62
12324: PUSH
12325: EMPTY
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 72
12336: ST_TO_ADDR
// end ;
12337: LD_VAR 0 2
12341: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12342: LD_INT 0
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
// tmp := [ ] ;
12348: LD_ADDR_VAR 0 3
12352: PUSH
12353: EMPTY
12354: ST_TO_ADDR
// list := [ ] ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: EMPTY
12361: ST_TO_ADDR
// for i = 16 to 25 do
12362: LD_ADDR_VAR 0 4
12366: PUSH
12367: DOUBLE
12368: LD_INT 16
12370: DEC
12371: ST_TO_ADDR
12372: LD_INT 25
12374: PUSH
12375: FOR_TO
12376: IFFALSE 12449
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12378: LD_ADDR_VAR 0 3
12382: PUSH
12383: LD_VAR 0 3
12387: PUSH
12388: LD_INT 22
12390: PUSH
12391: LD_VAR 0 1
12395: PPUSH
12396: CALL_OW 255
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 91
12407: PUSH
12408: LD_VAR 0 1
12412: PUSH
12413: LD_INT 6
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 30
12423: PUSH
12424: LD_VAR 0 4
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: PPUSH
12441: CALL_OW 69
12445: ADD
12446: ST_TO_ADDR
12447: GO 12375
12449: POP
12450: POP
// for i = 1 to tmp do
12451: LD_ADDR_VAR 0 4
12455: PUSH
12456: DOUBLE
12457: LD_INT 1
12459: DEC
12460: ST_TO_ADDR
12461: LD_VAR 0 3
12465: PUSH
12466: FOR_TO
12467: IFFALSE 12555
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12469: LD_ADDR_VAR 0 5
12473: PUSH
12474: LD_VAR 0 5
12478: PUSH
12479: LD_VAR 0 3
12483: PUSH
12484: LD_VAR 0 4
12488: ARRAY
12489: PPUSH
12490: CALL_OW 266
12494: PUSH
12495: LD_VAR 0 3
12499: PUSH
12500: LD_VAR 0 4
12504: ARRAY
12505: PPUSH
12506: CALL_OW 250
12510: PUSH
12511: LD_VAR 0 3
12515: PUSH
12516: LD_VAR 0 4
12520: ARRAY
12521: PPUSH
12522: CALL_OW 251
12526: PUSH
12527: LD_VAR 0 3
12531: PUSH
12532: LD_VAR 0 4
12536: ARRAY
12537: PPUSH
12538: CALL_OW 254
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: PUSH
12549: EMPTY
12550: LIST
12551: ADD
12552: ST_TO_ADDR
12553: GO 12466
12555: POP
12556: POP
// result := list ;
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_VAR 0 5
12566: ST_TO_ADDR
// end ;
12567: LD_VAR 0 2
12571: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12572: LD_INT 0
12574: PPUSH
12575: PPUSH
12576: PPUSH
12577: PPUSH
12578: PPUSH
12579: PPUSH
12580: PPUSH
// if not factory then
12581: LD_VAR 0 1
12585: NOT
12586: IFFALSE 12590
// exit ;
12588: GO 13193
// if control = control_apeman then
12590: LD_VAR 0 4
12594: PUSH
12595: LD_INT 5
12597: EQUAL
12598: IFFALSE 12707
// begin tmp := UnitsInside ( factory ) ;
12600: LD_ADDR_VAR 0 8
12604: PUSH
12605: LD_VAR 0 1
12609: PPUSH
12610: CALL_OW 313
12614: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12615: LD_VAR 0 8
12619: PPUSH
12620: LD_INT 25
12622: PUSH
12623: LD_INT 12
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 72
12634: NOT
12635: IFFALSE 12645
// control := control_manual ;
12637: LD_ADDR_VAR 0 4
12641: PUSH
12642: LD_INT 1
12644: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12645: LD_ADDR_VAR 0 8
12649: PUSH
12650: LD_VAR 0 1
12654: PPUSH
12655: CALL 12342 0 1
12659: ST_TO_ADDR
// if tmp then
12660: LD_VAR 0 8
12664: IFFALSE 12707
// begin for i in tmp do
12666: LD_ADDR_VAR 0 7
12670: PUSH
12671: LD_VAR 0 8
12675: PUSH
12676: FOR_IN
12677: IFFALSE 12705
// if i [ 1 ] = b_ext_radio then
12679: LD_VAR 0 7
12683: PUSH
12684: LD_INT 1
12686: ARRAY
12687: PUSH
12688: LD_INT 22
12690: EQUAL
12691: IFFALSE 12703
// begin control := control_remote ;
12693: LD_ADDR_VAR 0 4
12697: PUSH
12698: LD_INT 2
12700: ST_TO_ADDR
// break ;
12701: GO 12705
// end ;
12703: GO 12676
12705: POP
12706: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12707: LD_VAR 0 1
12711: PPUSH
12712: LD_VAR 0 2
12716: PPUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: LD_VAR 0 4
12726: PPUSH
12727: LD_VAR 0 5
12731: PPUSH
12732: CALL_OW 448
12736: IFFALSE 12771
// begin result := [ chassis , engine , control , weapon ] ;
12738: LD_ADDR_VAR 0 6
12742: PUSH
12743: LD_VAR 0 2
12747: PUSH
12748: LD_VAR 0 3
12752: PUSH
12753: LD_VAR 0 4
12757: PUSH
12758: LD_VAR 0 5
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: ST_TO_ADDR
// exit ;
12769: GO 13193
// end ; _chassis := AvailableChassisList ( factory ) ;
12771: LD_ADDR_VAR 0 9
12775: PUSH
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 475
12785: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12786: LD_ADDR_VAR 0 11
12790: PUSH
12791: LD_VAR 0 1
12795: PPUSH
12796: CALL_OW 476
12800: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12801: LD_ADDR_VAR 0 12
12805: PUSH
12806: LD_VAR 0 1
12810: PPUSH
12811: CALL_OW 477
12815: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12816: LD_ADDR_VAR 0 10
12820: PUSH
12821: LD_VAR 0 1
12825: PPUSH
12826: CALL_OW 478
12830: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12831: LD_VAR 0 9
12835: NOT
12836: IFTRUE 12845
12838: PUSH
12839: LD_VAR 0 11
12843: NOT
12844: OR
12845: IFTRUE 12854
12847: PUSH
12848: LD_VAR 0 12
12852: NOT
12853: OR
12854: IFTRUE 12863
12856: PUSH
12857: LD_VAR 0 10
12861: NOT
12862: OR
12863: IFFALSE 12898
// begin result := [ chassis , engine , control , weapon ] ;
12865: LD_ADDR_VAR 0 6
12869: PUSH
12870: LD_VAR 0 2
12874: PUSH
12875: LD_VAR 0 3
12879: PUSH
12880: LD_VAR 0 4
12884: PUSH
12885: LD_VAR 0 5
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: ST_TO_ADDR
// exit ;
12896: GO 13193
// end ; if not chassis in _chassis then
12898: LD_VAR 0 2
12902: PUSH
12903: LD_VAR 0 9
12907: IN
12908: NOT
12909: IFFALSE 12935
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12911: LD_ADDR_VAR 0 2
12915: PUSH
12916: LD_VAR 0 9
12920: PUSH
12921: LD_INT 1
12923: PPUSH
12924: LD_VAR 0 9
12928: PPUSH
12929: CALL_OW 12
12933: ARRAY
12934: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12935: LD_VAR 0 2
12939: PPUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: CALL 13198 0 2
12949: NOT
12950: IFFALSE 13011
// repeat engine := _engine [ 1 ] ;
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: LD_VAR 0 11
12961: PUSH
12962: LD_INT 1
12964: ARRAY
12965: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12966: LD_ADDR_VAR 0 11
12970: PUSH
12971: LD_VAR 0 11
12975: PPUSH
12976: LD_INT 1
12978: PPUSH
12979: CALL_OW 3
12983: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12984: LD_VAR 0 2
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: CALL 13198 0 2
12998: IFTRUE 13009
13000: PUSH
13001: LD_VAR 0 11
13005: PUSH
13006: EMPTY
13007: EQUAL
13008: OR
13009: IFFALSE 12952
// if not control in _control then
13011: LD_VAR 0 4
13015: PUSH
13016: LD_VAR 0 12
13020: IN
13021: NOT
13022: IFFALSE 13048
// control := _control [ rand ( 1 , _control ) ] ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_VAR 0 12
13033: PUSH
13034: LD_INT 1
13036: PPUSH
13037: LD_VAR 0 12
13041: PPUSH
13042: CALL_OW 12
13046: ARRAY
13047: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13048: LD_VAR 0 2
13052: PPUSH
13053: LD_VAR 0 5
13057: PPUSH
13058: CALL 13420 0 2
13062: NOT
13063: IFFALSE 13124
// repeat weapon := _weapon [ 1 ] ;
13065: LD_ADDR_VAR 0 5
13069: PUSH
13070: LD_VAR 0 10
13074: PUSH
13075: LD_INT 1
13077: ARRAY
13078: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13079: LD_ADDR_VAR 0 10
13083: PUSH
13084: LD_VAR 0 10
13088: PPUSH
13089: LD_INT 1
13091: PPUSH
13092: CALL_OW 3
13096: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13097: LD_VAR 0 2
13101: PPUSH
13102: LD_VAR 0 5
13106: PPUSH
13107: CALL 13420 0 2
13111: IFTRUE 13122
13113: PUSH
13114: LD_VAR 0 10
13118: PUSH
13119: EMPTY
13120: EQUAL
13121: OR
13122: IFFALSE 13065
// result := [ ] ;
13124: LD_ADDR_VAR 0 6
13128: PUSH
13129: EMPTY
13130: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13131: LD_VAR 0 1
13135: PPUSH
13136: LD_VAR 0 2
13140: PPUSH
13141: LD_VAR 0 3
13145: PPUSH
13146: LD_VAR 0 4
13150: PPUSH
13151: LD_VAR 0 5
13155: PPUSH
13156: CALL_OW 448
13160: IFFALSE 13193
// result := [ chassis , engine , control , weapon ] ;
13162: LD_ADDR_VAR 0 6
13166: PUSH
13167: LD_VAR 0 2
13171: PUSH
13172: LD_VAR 0 3
13176: PUSH
13177: LD_VAR 0 4
13181: PUSH
13182: LD_VAR 0 5
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: ST_TO_ADDR
// end ;
13193: LD_VAR 0 6
13197: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13198: LD_INT 0
13200: PPUSH
// if not chassis or not engine then
13201: LD_VAR 0 1
13205: NOT
13206: IFTRUE 13215
13208: PUSH
13209: LD_VAR 0 2
13213: NOT
13214: OR
13215: IFFALSE 13219
// exit ;
13217: GO 13415
// case engine of engine_solar :
13219: LD_VAR 0 2
13223: PUSH
13224: LD_INT 2
13226: DOUBLE
13227: EQUAL
13228: IFTRUE 13232
13230: GO 13270
13232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13233: LD_ADDR_VAR 0 3
13237: PUSH
13238: LD_INT 11
13240: PUSH
13241: LD_INT 12
13243: PUSH
13244: LD_INT 13
13246: PUSH
13247: LD_INT 14
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: LD_INT 2
13255: PUSH
13256: LD_INT 3
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: ST_TO_ADDR
13268: GO 13399
13270: LD_INT 1
13272: DOUBLE
13273: EQUAL
13274: IFTRUE 13278
13276: GO 13340
13278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13279: LD_ADDR_VAR 0 3
13283: PUSH
13284: LD_INT 11
13286: PUSH
13287: LD_INT 12
13289: PUSH
13290: LD_INT 13
13292: PUSH
13293: LD_INT 14
13295: PUSH
13296: LD_INT 1
13298: PUSH
13299: LD_INT 2
13301: PUSH
13302: LD_INT 3
13304: PUSH
13305: LD_INT 4
13307: PUSH
13308: LD_INT 5
13310: PUSH
13311: LD_INT 21
13313: PUSH
13314: LD_INT 23
13316: PUSH
13317: LD_INT 22
13319: PUSH
13320: LD_INT 24
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 13399
13340: LD_INT 3
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13398
13348: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13349: LD_ADDR_VAR 0 3
13353: PUSH
13354: LD_INT 13
13356: PUSH
13357: LD_INT 14
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: LD_INT 3
13365: PUSH
13366: LD_INT 4
13368: PUSH
13369: LD_INT 5
13371: PUSH
13372: LD_INT 21
13374: PUSH
13375: LD_INT 22
13377: PUSH
13378: LD_INT 23
13380: PUSH
13381: LD_INT 24
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: ST_TO_ADDR
13396: GO 13399
13398: POP
// result := ( chassis in result ) ;
13399: LD_ADDR_VAR 0 3
13403: PUSH
13404: LD_VAR 0 1
13408: PUSH
13409: LD_VAR 0 3
13413: IN
13414: ST_TO_ADDR
// end ;
13415: LD_VAR 0 3
13419: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13420: LD_INT 0
13422: PPUSH
// if not chassis or not weapon then
13423: LD_VAR 0 1
13427: NOT
13428: IFTRUE 13437
13430: PUSH
13431: LD_VAR 0 2
13435: NOT
13436: OR
13437: IFFALSE 13441
// exit ;
13439: GO 14501
// case weapon of us_machine_gun :
13441: LD_VAR 0 2
13445: PUSH
13446: LD_INT 2
13448: DOUBLE
13449: EQUAL
13450: IFTRUE 13454
13452: GO 13484
13454: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13455: LD_ADDR_VAR 0 3
13459: PUSH
13460: LD_INT 1
13462: PUSH
13463: LD_INT 2
13465: PUSH
13466: LD_INT 3
13468: PUSH
13469: LD_INT 4
13471: PUSH
13472: LD_INT 5
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: ST_TO_ADDR
13482: GO 14485
13484: LD_INT 3
13486: DOUBLE
13487: EQUAL
13488: IFTRUE 13492
13490: GO 13522
13492: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13493: LD_ADDR_VAR 0 3
13497: PUSH
13498: LD_INT 1
13500: PUSH
13501: LD_INT 2
13503: PUSH
13504: LD_INT 3
13506: PUSH
13507: LD_INT 4
13509: PUSH
13510: LD_INT 5
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: ST_TO_ADDR
13520: GO 14485
13522: LD_INT 11
13524: DOUBLE
13525: EQUAL
13526: IFTRUE 13530
13528: GO 13560
13530: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13531: LD_ADDR_VAR 0 3
13535: PUSH
13536: LD_INT 1
13538: PUSH
13539: LD_INT 2
13541: PUSH
13542: LD_INT 3
13544: PUSH
13545: LD_INT 4
13547: PUSH
13548: LD_INT 5
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: ST_TO_ADDR
13558: GO 14485
13560: LD_INT 4
13562: DOUBLE
13563: EQUAL
13564: IFTRUE 13568
13566: GO 13594
13568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13569: LD_ADDR_VAR 0 3
13573: PUSH
13574: LD_INT 2
13576: PUSH
13577: LD_INT 3
13579: PUSH
13580: LD_INT 4
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: ST_TO_ADDR
13592: GO 14485
13594: LD_INT 5
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13628
13602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13603: LD_ADDR_VAR 0 3
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 3
13613: PUSH
13614: LD_INT 4
13616: PUSH
13617: LD_INT 5
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: ST_TO_ADDR
13626: GO 14485
13628: LD_INT 9
13630: DOUBLE
13631: EQUAL
13632: IFTRUE 13636
13634: GO 13662
13636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13637: LD_ADDR_VAR 0 3
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: LD_INT 3
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: LD_INT 5
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: ST_TO_ADDR
13660: GO 14485
13662: LD_INT 7
13664: DOUBLE
13665: EQUAL
13666: IFTRUE 13670
13668: GO 13696
13670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13671: LD_ADDR_VAR 0 3
13675: PUSH
13676: LD_INT 2
13678: PUSH
13679: LD_INT 3
13681: PUSH
13682: LD_INT 4
13684: PUSH
13685: LD_INT 5
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: ST_TO_ADDR
13694: GO 14485
13696: LD_INT 12
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 13730
13704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13705: LD_ADDR_VAR 0 3
13709: PUSH
13710: LD_INT 2
13712: PUSH
13713: LD_INT 3
13715: PUSH
13716: LD_INT 4
13718: PUSH
13719: LD_INT 5
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: ST_TO_ADDR
13728: GO 14485
13730: LD_INT 13
13732: DOUBLE
13733: EQUAL
13734: IFTRUE 13738
13736: GO 13764
13738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13739: LD_ADDR_VAR 0 3
13743: PUSH
13744: LD_INT 2
13746: PUSH
13747: LD_INT 3
13749: PUSH
13750: LD_INT 4
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: ST_TO_ADDR
13762: GO 14485
13764: LD_INT 14
13766: DOUBLE
13767: EQUAL
13768: IFTRUE 13772
13770: GO 13790
13772: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13773: LD_ADDR_VAR 0 3
13777: PUSH
13778: LD_INT 4
13780: PUSH
13781: LD_INT 5
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: ST_TO_ADDR
13788: GO 14485
13790: LD_INT 6
13792: DOUBLE
13793: EQUAL
13794: IFTRUE 13798
13796: GO 13816
13798: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13799: LD_ADDR_VAR 0 3
13803: PUSH
13804: LD_INT 4
13806: PUSH
13807: LD_INT 5
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: ST_TO_ADDR
13814: GO 14485
13816: LD_INT 10
13818: DOUBLE
13819: EQUAL
13820: IFTRUE 13824
13822: GO 13842
13824: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13825: LD_ADDR_VAR 0 3
13829: PUSH
13830: LD_INT 4
13832: PUSH
13833: LD_INT 5
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: ST_TO_ADDR
13840: GO 14485
13842: LD_INT 22
13844: DOUBLE
13845: EQUAL
13846: IFTRUE 13850
13848: GO 13876
13850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13851: LD_ADDR_VAR 0 3
13855: PUSH
13856: LD_INT 11
13858: PUSH
13859: LD_INT 12
13861: PUSH
13862: LD_INT 13
13864: PUSH
13865: LD_INT 14
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: ST_TO_ADDR
13874: GO 14485
13876: LD_INT 23
13878: DOUBLE
13879: EQUAL
13880: IFTRUE 13884
13882: GO 13910
13884: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13885: LD_ADDR_VAR 0 3
13889: PUSH
13890: LD_INT 11
13892: PUSH
13893: LD_INT 12
13895: PUSH
13896: LD_INT 13
13898: PUSH
13899: LD_INT 14
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: ST_TO_ADDR
13908: GO 14485
13910: LD_INT 24
13912: DOUBLE
13913: EQUAL
13914: IFTRUE 13918
13916: GO 13944
13918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13919: LD_ADDR_VAR 0 3
13923: PUSH
13924: LD_INT 11
13926: PUSH
13927: LD_INT 12
13929: PUSH
13930: LD_INT 13
13932: PUSH
13933: LD_INT 14
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: ST_TO_ADDR
13942: GO 14485
13944: LD_INT 30
13946: DOUBLE
13947: EQUAL
13948: IFTRUE 13952
13950: GO 13978
13952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13953: LD_ADDR_VAR 0 3
13957: PUSH
13958: LD_INT 11
13960: PUSH
13961: LD_INT 12
13963: PUSH
13964: LD_INT 13
13966: PUSH
13967: LD_INT 14
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: ST_TO_ADDR
13976: GO 14485
13978: LD_INT 25
13980: DOUBLE
13981: EQUAL
13982: IFTRUE 13986
13984: GO 14004
13986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_INT 13
13994: PUSH
13995: LD_INT 14
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: ST_TO_ADDR
14002: GO 14485
14004: LD_INT 27
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14030
14012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14013: LD_ADDR_VAR 0 3
14017: PUSH
14018: LD_INT 13
14020: PUSH
14021: LD_INT 14
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: ST_TO_ADDR
14028: GO 14485
14030: LD_INT 92
14032: DOUBLE
14033: EQUAL
14034: IFTRUE 14038
14036: GO 14064
14038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14039: LD_ADDR_VAR 0 3
14043: PUSH
14044: LD_INT 11
14046: PUSH
14047: LD_INT 12
14049: PUSH
14050: LD_INT 13
14052: PUSH
14053: LD_INT 14
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: ST_TO_ADDR
14062: GO 14485
14064: LD_INT 28
14066: DOUBLE
14067: EQUAL
14068: IFTRUE 14072
14070: GO 14090
14072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14073: LD_ADDR_VAR 0 3
14077: PUSH
14078: LD_INT 13
14080: PUSH
14081: LD_INT 14
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: ST_TO_ADDR
14088: GO 14485
14090: LD_INT 29
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14116
14098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14099: LD_ADDR_VAR 0 3
14103: PUSH
14104: LD_INT 13
14106: PUSH
14107: LD_INT 14
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: ST_TO_ADDR
14114: GO 14485
14116: LD_INT 31
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14142
14124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14125: LD_ADDR_VAR 0 3
14129: PUSH
14130: LD_INT 13
14132: PUSH
14133: LD_INT 14
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: ST_TO_ADDR
14140: GO 14485
14142: LD_INT 26
14144: DOUBLE
14145: EQUAL
14146: IFTRUE 14150
14148: GO 14168
14150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14151: LD_ADDR_VAR 0 3
14155: PUSH
14156: LD_INT 13
14158: PUSH
14159: LD_INT 14
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: ST_TO_ADDR
14166: GO 14485
14168: LD_INT 42
14170: DOUBLE
14171: EQUAL
14172: IFTRUE 14176
14174: GO 14202
14176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14177: LD_ADDR_VAR 0 3
14181: PUSH
14182: LD_INT 21
14184: PUSH
14185: LD_INT 22
14187: PUSH
14188: LD_INT 23
14190: PUSH
14191: LD_INT 24
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: ST_TO_ADDR
14200: GO 14485
14202: LD_INT 43
14204: DOUBLE
14205: EQUAL
14206: IFTRUE 14210
14208: GO 14236
14210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14211: LD_ADDR_VAR 0 3
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 22
14221: PUSH
14222: LD_INT 23
14224: PUSH
14225: LD_INT 24
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 14485
14236: LD_INT 44
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14270
14244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14245: LD_ADDR_VAR 0 3
14249: PUSH
14250: LD_INT 21
14252: PUSH
14253: LD_INT 22
14255: PUSH
14256: LD_INT 23
14258: PUSH
14259: LD_INT 24
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: ST_TO_ADDR
14268: GO 14485
14270: LD_INT 45
14272: DOUBLE
14273: EQUAL
14274: IFTRUE 14278
14276: GO 14304
14278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14279: LD_ADDR_VAR 0 3
14283: PUSH
14284: LD_INT 21
14286: PUSH
14287: LD_INT 22
14289: PUSH
14290: LD_INT 23
14292: PUSH
14293: LD_INT 24
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: ST_TO_ADDR
14302: GO 14485
14304: LD_INT 49
14306: DOUBLE
14307: EQUAL
14308: IFTRUE 14312
14310: GO 14338
14312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14313: LD_ADDR_VAR 0 3
14317: PUSH
14318: LD_INT 21
14320: PUSH
14321: LD_INT 22
14323: PUSH
14324: LD_INT 23
14326: PUSH
14327: LD_INT 24
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: ST_TO_ADDR
14336: GO 14485
14338: LD_INT 51
14340: DOUBLE
14341: EQUAL
14342: IFTRUE 14346
14344: GO 14372
14346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14347: LD_ADDR_VAR 0 3
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 22
14357: PUSH
14358: LD_INT 23
14360: PUSH
14361: LD_INT 24
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: ST_TO_ADDR
14370: GO 14485
14372: LD_INT 52
14374: DOUBLE
14375: EQUAL
14376: IFTRUE 14380
14378: GO 14406
14380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14381: LD_ADDR_VAR 0 3
14385: PUSH
14386: LD_INT 21
14388: PUSH
14389: LD_INT 22
14391: PUSH
14392: LD_INT 23
14394: PUSH
14395: LD_INT 24
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: ST_TO_ADDR
14404: GO 14485
14406: LD_INT 53
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14432
14414: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14415: LD_ADDR_VAR 0 3
14419: PUSH
14420: LD_INT 23
14422: PUSH
14423: LD_INT 24
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: ST_TO_ADDR
14430: GO 14485
14432: LD_INT 46
14434: DOUBLE
14435: EQUAL
14436: IFTRUE 14440
14438: GO 14458
14440: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14441: LD_ADDR_VAR 0 3
14445: PUSH
14446: LD_INT 23
14448: PUSH
14449: LD_INT 24
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: ST_TO_ADDR
14456: GO 14485
14458: LD_INT 47
14460: DOUBLE
14461: EQUAL
14462: IFTRUE 14466
14464: GO 14484
14466: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14467: LD_ADDR_VAR 0 3
14471: PUSH
14472: LD_INT 23
14474: PUSH
14475: LD_INT 24
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: ST_TO_ADDR
14482: GO 14485
14484: POP
// result := ( chassis in result ) ;
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_VAR 0 1
14494: PUSH
14495: LD_VAR 0 3
14499: IN
14500: ST_TO_ADDR
// end ;
14501: LD_VAR 0 3
14505: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14506: LD_INT 0
14508: PPUSH
14509: PPUSH
14510: PPUSH
14511: PPUSH
14512: PPUSH
14513: PPUSH
14514: PPUSH
// result := array ;
14515: LD_ADDR_VAR 0 5
14519: PUSH
14520: LD_VAR 0 1
14524: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14525: LD_VAR 0 1
14529: NOT
14530: IFTRUE 14539
14532: PUSH
14533: LD_VAR 0 2
14537: NOT
14538: OR
14539: IFTRUE 14548
14541: PUSH
14542: LD_VAR 0 3
14546: NOT
14547: OR
14548: IFTRUE 14562
14550: PUSH
14551: LD_VAR 0 2
14555: PUSH
14556: LD_VAR 0 1
14560: GREATER
14561: OR
14562: IFTRUE 14576
14564: PUSH
14565: LD_VAR 0 3
14569: PUSH
14570: LD_VAR 0 1
14574: GREATER
14575: OR
14576: IFFALSE 14580
// exit ;
14578: GO 14876
// if direction then
14580: LD_VAR 0 4
14584: IFFALSE 14648
// begin d := 1 ;
14586: LD_ADDR_VAR 0 9
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// if i_from > i_to then
14594: LD_VAR 0 2
14598: PUSH
14599: LD_VAR 0 3
14603: GREATER
14604: IFFALSE 14630
// length := ( array - i_from ) + i_to else
14606: LD_ADDR_VAR 0 11
14610: PUSH
14611: LD_VAR 0 1
14615: PUSH
14616: LD_VAR 0 2
14620: MINUS
14621: PUSH
14622: LD_VAR 0 3
14626: PLUS
14627: ST_TO_ADDR
14628: GO 14646
// length := i_to - i_from ;
14630: LD_ADDR_VAR 0 11
14634: PUSH
14635: LD_VAR 0 3
14639: PUSH
14640: LD_VAR 0 2
14644: MINUS
14645: ST_TO_ADDR
// end else
14646: GO 14709
// begin d := - 1 ;
14648: LD_ADDR_VAR 0 9
14652: PUSH
14653: LD_INT 1
14655: NEG
14656: ST_TO_ADDR
// if i_from > i_to then
14657: LD_VAR 0 2
14661: PUSH
14662: LD_VAR 0 3
14666: GREATER
14667: IFFALSE 14687
// length := i_from - i_to else
14669: LD_ADDR_VAR 0 11
14673: PUSH
14674: LD_VAR 0 2
14678: PUSH
14679: LD_VAR 0 3
14683: MINUS
14684: ST_TO_ADDR
14685: GO 14709
// length := ( array - i_to ) + i_from ;
14687: LD_ADDR_VAR 0 11
14691: PUSH
14692: LD_VAR 0 1
14696: PUSH
14697: LD_VAR 0 3
14701: MINUS
14702: PUSH
14703: LD_VAR 0 2
14707: PLUS
14708: ST_TO_ADDR
// end ; if not length then
14709: LD_VAR 0 11
14713: NOT
14714: IFFALSE 14718
// exit ;
14716: GO 14876
// tmp := array ;
14718: LD_ADDR_VAR 0 10
14722: PUSH
14723: LD_VAR 0 1
14727: ST_TO_ADDR
// for i = 1 to length do
14728: LD_ADDR_VAR 0 6
14732: PUSH
14733: DOUBLE
14734: LD_INT 1
14736: DEC
14737: ST_TO_ADDR
14738: LD_VAR 0 11
14742: PUSH
14743: FOR_TO
14744: IFFALSE 14864
// begin for j = 1 to array do
14746: LD_ADDR_VAR 0 7
14750: PUSH
14751: DOUBLE
14752: LD_INT 1
14754: DEC
14755: ST_TO_ADDR
14756: LD_VAR 0 1
14760: PUSH
14761: FOR_TO
14762: IFFALSE 14850
// begin k := j + d ;
14764: LD_ADDR_VAR 0 8
14768: PUSH
14769: LD_VAR 0 7
14773: PUSH
14774: LD_VAR 0 9
14778: PLUS
14779: ST_TO_ADDR
// if k > array then
14780: LD_VAR 0 8
14784: PUSH
14785: LD_VAR 0 1
14789: GREATER
14790: IFFALSE 14800
// k := 1 ;
14792: LD_ADDR_VAR 0 8
14796: PUSH
14797: LD_INT 1
14799: ST_TO_ADDR
// if not k then
14800: LD_VAR 0 8
14804: NOT
14805: IFFALSE 14817
// k := array ;
14807: LD_ADDR_VAR 0 8
14811: PUSH
14812: LD_VAR 0 1
14816: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14817: LD_ADDR_VAR 0 10
14821: PUSH
14822: LD_VAR 0 10
14826: PPUSH
14827: LD_VAR 0 8
14831: PPUSH
14832: LD_VAR 0 1
14836: PUSH
14837: LD_VAR 0 7
14841: ARRAY
14842: PPUSH
14843: CALL_OW 1
14847: ST_TO_ADDR
// end ;
14848: GO 14761
14850: POP
14851: POP
// array := tmp ;
14852: LD_ADDR_VAR 0 1
14856: PUSH
14857: LD_VAR 0 10
14861: ST_TO_ADDR
// end ;
14862: GO 14743
14864: POP
14865: POP
// result := array ;
14866: LD_ADDR_VAR 0 5
14870: PUSH
14871: LD_VAR 0 1
14875: ST_TO_ADDR
// end ;
14876: LD_VAR 0 5
14880: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14881: LD_INT 0
14883: PPUSH
14884: PPUSH
// result := 0 ;
14885: LD_ADDR_VAR 0 3
14889: PUSH
14890: LD_INT 0
14892: ST_TO_ADDR
// if not array or not value in array then
14893: LD_VAR 0 1
14897: NOT
14898: IFTRUE 14913
14900: PUSH
14901: LD_VAR 0 2
14905: PUSH
14906: LD_VAR 0 1
14910: IN
14911: NOT
14912: OR
14913: IFFALSE 14917
// exit ;
14915: GO 14971
// for i = 1 to array do
14917: LD_ADDR_VAR 0 4
14921: PUSH
14922: DOUBLE
14923: LD_INT 1
14925: DEC
14926: ST_TO_ADDR
14927: LD_VAR 0 1
14931: PUSH
14932: FOR_TO
14933: IFFALSE 14969
// if value = array [ i ] then
14935: LD_VAR 0 2
14939: PUSH
14940: LD_VAR 0 1
14944: PUSH
14945: LD_VAR 0 4
14949: ARRAY
14950: EQUAL
14951: IFFALSE 14967
// begin result := i ;
14953: LD_ADDR_VAR 0 3
14957: PUSH
14958: LD_VAR 0 4
14962: ST_TO_ADDR
// exit ;
14963: POP
14964: POP
14965: GO 14971
// end ;
14967: GO 14932
14969: POP
14970: POP
// end ;
14971: LD_VAR 0 3
14975: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14976: LD_INT 0
14978: PPUSH
// vc_chassis := chassis ;
14979: LD_ADDR_OWVAR 37
14983: PUSH
14984: LD_VAR 0 1
14988: ST_TO_ADDR
// vc_engine := engine ;
14989: LD_ADDR_OWVAR 39
14993: PUSH
14994: LD_VAR 0 2
14998: ST_TO_ADDR
// vc_control := control ;
14999: LD_ADDR_OWVAR 38
15003: PUSH
15004: LD_VAR 0 3
15008: ST_TO_ADDR
// vc_weapon := weapon ;
15009: LD_ADDR_OWVAR 40
15013: PUSH
15014: LD_VAR 0 4
15018: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15019: LD_ADDR_OWVAR 41
15023: PUSH
15024: LD_VAR 0 5
15028: ST_TO_ADDR
// end ;
15029: LD_VAR 0 6
15033: RET
// export function WantPlant ( unit ) ; var task ; begin
15034: LD_INT 0
15036: PPUSH
15037: PPUSH
// result := false ;
15038: LD_ADDR_VAR 0 2
15042: PUSH
15043: LD_INT 0
15045: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15046: LD_ADDR_VAR 0 3
15050: PUSH
15051: LD_VAR 0 1
15055: PPUSH
15056: CALL_OW 437
15060: ST_TO_ADDR
// if task then
15061: LD_VAR 0 3
15065: IFFALSE 15093
// if task [ 1 ] [ 1 ] = p then
15067: LD_VAR 0 3
15071: PUSH
15072: LD_INT 1
15074: ARRAY
15075: PUSH
15076: LD_INT 1
15078: ARRAY
15079: PUSH
15080: LD_STRING p
15082: EQUAL
15083: IFFALSE 15093
// result := true ;
15085: LD_ADDR_VAR 0 2
15089: PUSH
15090: LD_INT 1
15092: ST_TO_ADDR
// end ;
15093: LD_VAR 0 2
15097: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15098: LD_INT 0
15100: PPUSH
15101: PPUSH
15102: PPUSH
15103: PPUSH
// if pos < 1 then
15104: LD_VAR 0 2
15108: PUSH
15109: LD_INT 1
15111: LESS
15112: IFFALSE 15116
// exit ;
15114: GO 15419
// if pos = 1 then
15116: LD_VAR 0 2
15120: PUSH
15121: LD_INT 1
15123: EQUAL
15124: IFFALSE 15157
// result := Replace ( arr , pos [ 1 ] , value ) else
15126: LD_ADDR_VAR 0 4
15130: PUSH
15131: LD_VAR 0 1
15135: PPUSH
15136: LD_VAR 0 2
15140: PUSH
15141: LD_INT 1
15143: ARRAY
15144: PPUSH
15145: LD_VAR 0 3
15149: PPUSH
15150: CALL_OW 1
15154: ST_TO_ADDR
15155: GO 15419
// begin tmp := arr ;
15157: LD_ADDR_VAR 0 6
15161: PUSH
15162: LD_VAR 0 1
15166: ST_TO_ADDR
// s_arr := [ tmp ] ;
15167: LD_ADDR_VAR 0 7
15171: PUSH
15172: LD_VAR 0 6
15176: PUSH
15177: EMPTY
15178: LIST
15179: ST_TO_ADDR
// for i = 1 to pos - 1 do
15180: LD_ADDR_VAR 0 5
15184: PUSH
15185: DOUBLE
15186: LD_INT 1
15188: DEC
15189: ST_TO_ADDR
15190: LD_VAR 0 2
15194: PUSH
15195: LD_INT 1
15197: MINUS
15198: PUSH
15199: FOR_TO
15200: IFFALSE 15245
// begin tmp := tmp [ pos [ i ] ] ;
15202: LD_ADDR_VAR 0 6
15206: PUSH
15207: LD_VAR 0 6
15211: PUSH
15212: LD_VAR 0 2
15216: PUSH
15217: LD_VAR 0 5
15221: ARRAY
15222: ARRAY
15223: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15224: LD_ADDR_VAR 0 7
15228: PUSH
15229: LD_VAR 0 7
15233: PUSH
15234: LD_VAR 0 6
15238: PUSH
15239: EMPTY
15240: LIST
15241: ADD
15242: ST_TO_ADDR
// end ;
15243: GO 15199
15245: POP
15246: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15247: LD_ADDR_VAR 0 6
15251: PUSH
15252: LD_VAR 0 6
15256: PPUSH
15257: LD_VAR 0 2
15261: PUSH
15262: LD_VAR 0 2
15266: ARRAY
15267: PPUSH
15268: LD_VAR 0 3
15272: PPUSH
15273: CALL_OW 1
15277: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15278: LD_ADDR_VAR 0 7
15282: PUSH
15283: LD_VAR 0 7
15287: PPUSH
15288: LD_VAR 0 7
15292: PPUSH
15293: LD_VAR 0 6
15297: PPUSH
15298: CALL_OW 1
15302: ST_TO_ADDR
// for i = s_arr downto 2 do
15303: LD_ADDR_VAR 0 5
15307: PUSH
15308: DOUBLE
15309: LD_VAR 0 7
15313: INC
15314: ST_TO_ADDR
15315: LD_INT 2
15317: PUSH
15318: FOR_DOWNTO
15319: IFFALSE 15403
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15321: LD_ADDR_VAR 0 6
15325: PUSH
15326: LD_VAR 0 7
15330: PUSH
15331: LD_VAR 0 5
15335: PUSH
15336: LD_INT 1
15338: MINUS
15339: ARRAY
15340: PPUSH
15341: LD_VAR 0 2
15345: PUSH
15346: LD_VAR 0 5
15350: PUSH
15351: LD_INT 1
15353: MINUS
15354: ARRAY
15355: PPUSH
15356: LD_VAR 0 7
15360: PUSH
15361: LD_VAR 0 5
15365: ARRAY
15366: PPUSH
15367: CALL_OW 1
15371: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15372: LD_ADDR_VAR 0 7
15376: PUSH
15377: LD_VAR 0 7
15381: PPUSH
15382: LD_VAR 0 5
15386: PUSH
15387: LD_INT 1
15389: MINUS
15390: PPUSH
15391: LD_VAR 0 6
15395: PPUSH
15396: CALL_OW 1
15400: ST_TO_ADDR
// end ;
15401: GO 15318
15403: POP
15404: POP
// result := s_arr [ 1 ] ;
15405: LD_ADDR_VAR 0 4
15409: PUSH
15410: LD_VAR 0 7
15414: PUSH
15415: LD_INT 1
15417: ARRAY
15418: ST_TO_ADDR
// end ; end ;
15419: LD_VAR 0 4
15423: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15424: LD_INT 0
15426: PPUSH
15427: PPUSH
// if not list then
15428: LD_VAR 0 1
15432: NOT
15433: IFFALSE 15437
// exit ;
15435: GO 15528
// i := list [ pos1 ] ;
15437: LD_ADDR_VAR 0 5
15441: PUSH
15442: LD_VAR 0 1
15446: PUSH
15447: LD_VAR 0 2
15451: ARRAY
15452: ST_TO_ADDR
// if not i then
15453: LD_VAR 0 5
15457: NOT
15458: IFFALSE 15462
// exit ;
15460: GO 15528
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15462: LD_ADDR_VAR 0 1
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_VAR 0 2
15476: PPUSH
15477: LD_VAR 0 1
15481: PUSH
15482: LD_VAR 0 3
15486: ARRAY
15487: PPUSH
15488: CALL_OW 1
15492: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15493: LD_ADDR_VAR 0 1
15497: PUSH
15498: LD_VAR 0 1
15502: PPUSH
15503: LD_VAR 0 3
15507: PPUSH
15508: LD_VAR 0 5
15512: PPUSH
15513: CALL_OW 1
15517: ST_TO_ADDR
// result := list ;
15518: LD_ADDR_VAR 0 4
15522: PUSH
15523: LD_VAR 0 1
15527: ST_TO_ADDR
// end ;
15528: LD_VAR 0 4
15532: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15533: LD_INT 0
15535: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15536: LD_ADDR_VAR 0 5
15540: PUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 250
15550: PPUSH
15551: LD_VAR 0 1
15555: PPUSH
15556: CALL_OW 251
15560: PPUSH
15561: LD_VAR 0 2
15565: PPUSH
15566: LD_VAR 0 3
15570: PPUSH
15571: LD_VAR 0 4
15575: PPUSH
15576: CALL 15958 0 5
15580: ST_TO_ADDR
// end ;
15581: LD_VAR 0 5
15585: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15586: LD_INT 0
15588: PPUSH
15589: PPUSH
15590: PPUSH
15591: PPUSH
// if not list or not unit then
15592: LD_VAR 0 2
15596: NOT
15597: IFTRUE 15606
15599: PUSH
15600: LD_VAR 0 1
15604: NOT
15605: OR
15606: IFFALSE 15610
// exit ;
15608: GO 15953
// result := [ ] ;
15610: LD_ADDR_VAR 0 5
15614: PUSH
15615: EMPTY
15616: ST_TO_ADDR
// for i in list do
15617: LD_ADDR_VAR 0 6
15621: PUSH
15622: LD_VAR 0 2
15626: PUSH
15627: FOR_IN
15628: IFFALSE 15846
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15630: LD_ADDR_VAR 0 8
15634: PUSH
15635: LD_VAR 0 1
15639: PPUSH
15640: LD_VAR 0 6
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: PPUSH
15649: LD_VAR 0 6
15653: PUSH
15654: LD_INT 2
15656: ARRAY
15657: PPUSH
15658: CALL_OW 297
15662: ST_TO_ADDR
// if not Count ( result ) then
15663: LD_VAR 0 5
15667: PPUSH
15668: CALL 12214 0 1
15672: NOT
15673: IFFALSE 15706
// begin result := Join ( result , [ i , tmp ] ) ;
15675: LD_ADDR_VAR 0 5
15679: PUSH
15680: LD_VAR 0 5
15684: PPUSH
15685: LD_VAR 0 6
15689: PUSH
15690: LD_VAR 0 8
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL 48146 0 2
15703: ST_TO_ADDR
// continue ;
15704: GO 15627
// end ; if result [ result ] [ 2 ] <= tmp then
15706: LD_VAR 0 5
15710: PUSH
15711: LD_VAR 0 5
15715: ARRAY
15716: PUSH
15717: LD_INT 2
15719: ARRAY
15720: PUSH
15721: LD_VAR 0 8
15725: LESSEQUAL
15726: IFFALSE 15759
// result := Join ( result , [ i , tmp ] ) else
15728: LD_ADDR_VAR 0 5
15732: PUSH
15733: LD_VAR 0 5
15737: PPUSH
15738: LD_VAR 0 6
15742: PUSH
15743: LD_VAR 0 8
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PPUSH
15752: CALL 48146 0 2
15756: ST_TO_ADDR
15757: GO 15844
// begin for j := 1 to Count ( result ) do
15759: LD_ADDR_VAR 0 7
15763: PUSH
15764: DOUBLE
15765: LD_INT 1
15767: DEC
15768: ST_TO_ADDR
15769: LD_VAR 0 5
15773: PPUSH
15774: CALL 12214 0 1
15778: PUSH
15779: FOR_TO
15780: IFFALSE 15842
// begin if tmp < result [ j ] [ 2 ] then
15782: LD_VAR 0 8
15786: PUSH
15787: LD_VAR 0 5
15791: PUSH
15792: LD_VAR 0 7
15796: ARRAY
15797: PUSH
15798: LD_INT 2
15800: ARRAY
15801: LESS
15802: IFFALSE 15840
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15804: LD_ADDR_VAR 0 5
15808: PUSH
15809: LD_VAR 0 5
15813: PPUSH
15814: LD_VAR 0 7
15818: PPUSH
15819: LD_VAR 0 6
15823: PUSH
15824: LD_VAR 0 8
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PPUSH
15833: CALL_OW 2
15837: ST_TO_ADDR
// break ;
15838: GO 15842
// end ; end ;
15840: GO 15779
15842: POP
15843: POP
// end ; end ;
15844: GO 15627
15846: POP
15847: POP
// if result and not asc then
15848: LD_VAR 0 5
15852: IFFALSE 15861
15854: PUSH
15855: LD_VAR 0 3
15859: NOT
15860: AND
15861: IFFALSE 15878
// result := ReverseArray ( result ) ;
15863: LD_ADDR_VAR 0 5
15867: PUSH
15868: LD_VAR 0 5
15872: PPUSH
15873: CALL 43236 0 1
15877: ST_TO_ADDR
// tmp := [ ] ;
15878: LD_ADDR_VAR 0 8
15882: PUSH
15883: EMPTY
15884: ST_TO_ADDR
// if mode then
15885: LD_VAR 0 4
15889: IFFALSE 15953
// begin for i := 1 to result do
15891: LD_ADDR_VAR 0 6
15895: PUSH
15896: DOUBLE
15897: LD_INT 1
15899: DEC
15900: ST_TO_ADDR
15901: LD_VAR 0 5
15905: PUSH
15906: FOR_TO
15907: IFFALSE 15941
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15909: LD_ADDR_VAR 0 8
15913: PUSH
15914: LD_VAR 0 8
15918: PPUSH
15919: LD_VAR 0 5
15923: PUSH
15924: LD_VAR 0 6
15928: ARRAY
15929: PUSH
15930: LD_INT 1
15932: ARRAY
15933: PPUSH
15934: CALL 48146 0 2
15938: ST_TO_ADDR
15939: GO 15906
15941: POP
15942: POP
// result := tmp ;
15943: LD_ADDR_VAR 0 5
15947: PUSH
15948: LD_VAR 0 8
15952: ST_TO_ADDR
// end ; end ;
15953: LD_VAR 0 5
15957: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15958: LD_INT 0
15960: PPUSH
15961: PPUSH
15962: PPUSH
15963: PPUSH
// if not list then
15964: LD_VAR 0 3
15968: NOT
15969: IFFALSE 15973
// exit ;
15971: GO 16363
// result := [ ] ;
15973: LD_ADDR_VAR 0 6
15977: PUSH
15978: EMPTY
15979: ST_TO_ADDR
// for i in list do
15980: LD_ADDR_VAR 0 7
15984: PUSH
15985: LD_VAR 0 3
15989: PUSH
15990: FOR_IN
15991: IFFALSE 16193
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15993: LD_ADDR_VAR 0 9
15997: PUSH
15998: LD_VAR 0 7
16002: PPUSH
16003: LD_VAR 0 1
16007: PPUSH
16008: LD_VAR 0 2
16012: PPUSH
16013: CALL_OW 297
16017: ST_TO_ADDR
// if not result then
16018: LD_VAR 0 6
16022: NOT
16023: IFFALSE 16049
// result := [ [ i , tmp ] ] else
16025: LD_ADDR_VAR 0 6
16029: PUSH
16030: LD_VAR 0 7
16034: PUSH
16035: LD_VAR 0 9
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: ST_TO_ADDR
16047: GO 16191
// begin if result [ result ] [ 2 ] <= tmp then
16049: LD_VAR 0 6
16053: PUSH
16054: LD_VAR 0 6
16058: ARRAY
16059: PUSH
16060: LD_INT 2
16062: ARRAY
16063: PUSH
16064: LD_VAR 0 9
16068: LESSEQUAL
16069: IFFALSE 16111
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16071: LD_ADDR_VAR 0 6
16075: PUSH
16076: LD_VAR 0 6
16080: PPUSH
16081: LD_VAR 0 6
16085: PUSH
16086: LD_INT 1
16088: PLUS
16089: PPUSH
16090: LD_VAR 0 7
16094: PUSH
16095: LD_VAR 0 9
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 2
16108: ST_TO_ADDR
16109: GO 16191
// for j := 1 to result do
16111: LD_ADDR_VAR 0 8
16115: PUSH
16116: DOUBLE
16117: LD_INT 1
16119: DEC
16120: ST_TO_ADDR
16121: LD_VAR 0 6
16125: PUSH
16126: FOR_TO
16127: IFFALSE 16189
// begin if tmp < result [ j ] [ 2 ] then
16129: LD_VAR 0 9
16133: PUSH
16134: LD_VAR 0 6
16138: PUSH
16139: LD_VAR 0 8
16143: ARRAY
16144: PUSH
16145: LD_INT 2
16147: ARRAY
16148: LESS
16149: IFFALSE 16187
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16151: LD_ADDR_VAR 0 6
16155: PUSH
16156: LD_VAR 0 6
16160: PPUSH
16161: LD_VAR 0 8
16165: PPUSH
16166: LD_VAR 0 7
16170: PUSH
16171: LD_VAR 0 9
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PPUSH
16180: CALL_OW 2
16184: ST_TO_ADDR
// break ;
16185: GO 16189
// end ; end ;
16187: GO 16126
16189: POP
16190: POP
// end ; end ;
16191: GO 15990
16193: POP
16194: POP
// if result and not asc then
16195: LD_VAR 0 6
16199: IFFALSE 16208
16201: PUSH
16202: LD_VAR 0 4
16206: NOT
16207: AND
16208: IFFALSE 16283
// begin tmp := result ;
16210: LD_ADDR_VAR 0 9
16214: PUSH
16215: LD_VAR 0 6
16219: ST_TO_ADDR
// for i = tmp downto 1 do
16220: LD_ADDR_VAR 0 7
16224: PUSH
16225: DOUBLE
16226: LD_VAR 0 9
16230: INC
16231: ST_TO_ADDR
16232: LD_INT 1
16234: PUSH
16235: FOR_DOWNTO
16236: IFFALSE 16281
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16238: LD_ADDR_VAR 0 6
16242: PUSH
16243: LD_VAR 0 6
16247: PPUSH
16248: LD_VAR 0 9
16252: PUSH
16253: LD_VAR 0 7
16257: MINUS
16258: PUSH
16259: LD_INT 1
16261: PLUS
16262: PPUSH
16263: LD_VAR 0 9
16267: PUSH
16268: LD_VAR 0 7
16272: ARRAY
16273: PPUSH
16274: CALL_OW 1
16278: ST_TO_ADDR
16279: GO 16235
16281: POP
16282: POP
// end ; tmp := [ ] ;
16283: LD_ADDR_VAR 0 9
16287: PUSH
16288: EMPTY
16289: ST_TO_ADDR
// if mode then
16290: LD_VAR 0 5
16294: IFFALSE 16363
// begin for i = 1 to result do
16296: LD_ADDR_VAR 0 7
16300: PUSH
16301: DOUBLE
16302: LD_INT 1
16304: DEC
16305: ST_TO_ADDR
16306: LD_VAR 0 6
16310: PUSH
16311: FOR_TO
16312: IFFALSE 16351
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16314: LD_ADDR_VAR 0 9
16318: PUSH
16319: LD_VAR 0 9
16323: PPUSH
16324: LD_VAR 0 7
16328: PPUSH
16329: LD_VAR 0 6
16333: PUSH
16334: LD_VAR 0 7
16338: ARRAY
16339: PUSH
16340: LD_INT 1
16342: ARRAY
16343: PPUSH
16344: CALL_OW 1
16348: ST_TO_ADDR
16349: GO 16311
16351: POP
16352: POP
// result := tmp ;
16353: LD_ADDR_VAR 0 6
16357: PUSH
16358: LD_VAR 0 9
16362: ST_TO_ADDR
// end ; end ;
16363: LD_VAR 0 6
16367: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16368: LD_INT 0
16370: PPUSH
16371: PPUSH
16372: PPUSH
16373: PPUSH
16374: PPUSH
16375: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16376: LD_ADDR_VAR 0 5
16380: PUSH
16381: LD_INT 0
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: LD_INT 0
16389: PUSH
16390: EMPTY
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: ST_TO_ADDR
// if not x or not y then
16398: LD_VAR 0 2
16402: NOT
16403: IFTRUE 16412
16405: PUSH
16406: LD_VAR 0 3
16410: NOT
16411: OR
16412: IFFALSE 16416
// exit ;
16414: GO 18072
// if not range then
16416: LD_VAR 0 4
16420: NOT
16421: IFFALSE 16431
// range := 10 ;
16423: LD_ADDR_VAR 0 4
16427: PUSH
16428: LD_INT 10
16430: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16431: LD_ADDR_VAR 0 8
16435: PUSH
16436: LD_INT 81
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 92
16450: PUSH
16451: LD_VAR 0 2
16455: PUSH
16456: LD_VAR 0 3
16460: PUSH
16461: LD_VAR 0 4
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 3
16474: PUSH
16475: LD_INT 21
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 69
16498: ST_TO_ADDR
// if not tmp then
16499: LD_VAR 0 8
16503: NOT
16504: IFFALSE 16508
// exit ;
16506: GO 18072
// for i in tmp do
16508: LD_ADDR_VAR 0 6
16512: PUSH
16513: LD_VAR 0 8
16517: PUSH
16518: FOR_IN
16519: IFFALSE 18047
// begin points := [ 0 , 0 , 0 ] ;
16521: LD_ADDR_VAR 0 9
16525: PUSH
16526: LD_INT 0
16528: PUSH
16529: LD_INT 0
16531: PUSH
16532: LD_INT 0
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: LIST
16539: ST_TO_ADDR
// bpoints := 1 ;
16540: LD_ADDR_VAR 0 10
16544: PUSH
16545: LD_INT 1
16547: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16548: LD_VAR 0 6
16552: PPUSH
16553: CALL_OW 247
16557: PUSH
16558: LD_INT 1
16560: DOUBLE
16561: EQUAL
16562: IFTRUE 16566
16564: GO 17148
16566: POP
// begin if GetClass ( i ) = 1 then
16567: LD_VAR 0 6
16571: PPUSH
16572: CALL_OW 257
16576: PUSH
16577: LD_INT 1
16579: EQUAL
16580: IFFALSE 16601
// points := [ 10 , 5 , 3 ] ;
16582: LD_ADDR_VAR 0 9
16586: PUSH
16587: LD_INT 10
16589: PUSH
16590: LD_INT 5
16592: PUSH
16593: LD_INT 3
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16601: LD_VAR 0 6
16605: PPUSH
16606: CALL_OW 257
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: LD_INT 3
16616: PUSH
16617: LD_INT 4
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: LIST
16624: IN
16625: IFFALSE 16646
// points := [ 3 , 2 , 1 ] ;
16627: LD_ADDR_VAR 0 9
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: LD_INT 2
16637: PUSH
16638: LD_INT 1
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16646: LD_VAR 0 6
16650: PPUSH
16651: CALL_OW 257
16655: PUSH
16656: LD_INT 5
16658: EQUAL
16659: IFFALSE 16680
// points := [ 130 , 5 , 2 ] ;
16661: LD_ADDR_VAR 0 9
16665: PUSH
16666: LD_INT 130
16668: PUSH
16669: LD_INT 5
16671: PUSH
16672: LD_INT 2
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: LIST
16679: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16680: LD_VAR 0 6
16684: PPUSH
16685: CALL_OW 257
16689: PUSH
16690: LD_INT 8
16692: EQUAL
16693: IFFALSE 16714
// points := [ 35 , 35 , 30 ] ;
16695: LD_ADDR_VAR 0 9
16699: PUSH
16700: LD_INT 35
16702: PUSH
16703: LD_INT 35
16705: PUSH
16706: LD_INT 30
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16714: LD_VAR 0 6
16718: PPUSH
16719: CALL_OW 257
16723: PUSH
16724: LD_INT 9
16726: EQUAL
16727: IFFALSE 16748
// points := [ 20 , 55 , 40 ] ;
16729: LD_ADDR_VAR 0 9
16733: PUSH
16734: LD_INT 20
16736: PUSH
16737: LD_INT 55
16739: PUSH
16740: LD_INT 40
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16748: LD_VAR 0 6
16752: PPUSH
16753: CALL_OW 257
16757: PUSH
16758: LD_INT 12
16760: PUSH
16761: LD_INT 16
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: IN
16768: IFFALSE 16789
// points := [ 5 , 3 , 2 ] ;
16770: LD_ADDR_VAR 0 9
16774: PUSH
16775: LD_INT 5
16777: PUSH
16778: LD_INT 3
16780: PUSH
16781: LD_INT 2
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16789: LD_VAR 0 6
16793: PPUSH
16794: CALL_OW 257
16798: PUSH
16799: LD_INT 17
16801: EQUAL
16802: IFFALSE 16823
// points := [ 100 , 50 , 75 ] ;
16804: LD_ADDR_VAR 0 9
16808: PUSH
16809: LD_INT 100
16811: PUSH
16812: LD_INT 50
16814: PUSH
16815: LD_INT 75
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: LIST
16822: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16823: LD_VAR 0 6
16827: PPUSH
16828: CALL_OW 257
16832: PUSH
16833: LD_INT 15
16835: EQUAL
16836: IFFALSE 16857
// points := [ 10 , 5 , 3 ] ;
16838: LD_ADDR_VAR 0 9
16842: PUSH
16843: LD_INT 10
16845: PUSH
16846: LD_INT 5
16848: PUSH
16849: LD_INT 3
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: LIST
16856: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16857: LD_VAR 0 6
16861: PPUSH
16862: CALL_OW 257
16866: PUSH
16867: LD_INT 14
16869: EQUAL
16870: IFFALSE 16891
// points := [ 10 , 0 , 0 ] ;
16872: LD_ADDR_VAR 0 9
16876: PUSH
16877: LD_INT 10
16879: PUSH
16880: LD_INT 0
16882: PUSH
16883: LD_INT 0
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: LIST
16890: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16891: LD_VAR 0 6
16895: PPUSH
16896: CALL_OW 257
16900: PUSH
16901: LD_INT 11
16903: EQUAL
16904: IFFALSE 16925
// points := [ 30 , 10 , 5 ] ;
16906: LD_ADDR_VAR 0 9
16910: PUSH
16911: LD_INT 30
16913: PUSH
16914: LD_INT 10
16916: PUSH
16917: LD_INT 5
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16925: LD_VAR 0 1
16929: PPUSH
16930: LD_INT 5
16932: PPUSH
16933: CALL_OW 321
16937: PUSH
16938: LD_INT 2
16940: EQUAL
16941: IFFALSE 16958
// bpoints := bpoints * 1.8 ;
16943: LD_ADDR_VAR 0 10
16947: PUSH
16948: LD_VAR 0 10
16952: PUSH
16953: LD_REAL  1.80000000000000E+0000
16956: MUL
16957: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16958: LD_VAR 0 6
16962: PPUSH
16963: CALL_OW 257
16967: PUSH
16968: LD_INT 1
16970: PUSH
16971: LD_INT 2
16973: PUSH
16974: LD_INT 3
16976: PUSH
16977: LD_INT 4
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: IN
16986: IFFALSE 17006
16988: PUSH
16989: LD_VAR 0 1
16993: PPUSH
16994: LD_INT 51
16996: PPUSH
16997: CALL_OW 321
17001: PUSH
17002: LD_INT 2
17004: EQUAL
17005: AND
17006: IFFALSE 17023
// bpoints := bpoints * 1.2 ;
17008: LD_ADDR_VAR 0 10
17012: PUSH
17013: LD_VAR 0 10
17017: PUSH
17018: LD_REAL  1.20000000000000E+0000
17021: MUL
17022: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17023: LD_VAR 0 6
17027: PPUSH
17028: CALL_OW 257
17032: PUSH
17033: LD_INT 5
17035: PUSH
17036: LD_INT 7
17038: PUSH
17039: LD_INT 9
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: IN
17047: IFFALSE 17067
17049: PUSH
17050: LD_VAR 0 1
17054: PPUSH
17055: LD_INT 52
17057: PPUSH
17058: CALL_OW 321
17062: PUSH
17063: LD_INT 2
17065: EQUAL
17066: AND
17067: IFFALSE 17084
// bpoints := bpoints * 1.5 ;
17069: LD_ADDR_VAR 0 10
17073: PUSH
17074: LD_VAR 0 10
17078: PUSH
17079: LD_REAL  1.50000000000000E+0000
17082: MUL
17083: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17084: LD_VAR 0 1
17088: PPUSH
17089: LD_INT 66
17091: PPUSH
17092: CALL_OW 321
17096: PUSH
17097: LD_INT 2
17099: EQUAL
17100: IFFALSE 17117
// bpoints := bpoints * 1.1 ;
17102: LD_ADDR_VAR 0 10
17106: PUSH
17107: LD_VAR 0 10
17111: PUSH
17112: LD_REAL  1.10000000000000E+0000
17115: MUL
17116: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17117: LD_ADDR_VAR 0 10
17121: PUSH
17122: LD_VAR 0 10
17126: PUSH
17127: LD_VAR 0 6
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: CALL_OW 259
17139: PUSH
17140: LD_REAL  1.15000000000000E+0000
17143: MUL
17144: MUL
17145: ST_TO_ADDR
// end ; unit_vehicle :
17146: GO 17976
17148: LD_INT 2
17150: DOUBLE
17151: EQUAL
17152: IFTRUE 17156
17154: GO 17964
17156: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17157: LD_VAR 0 6
17161: PPUSH
17162: CALL_OW 264
17166: PUSH
17167: LD_INT 2
17169: PUSH
17170: LD_INT 42
17172: PUSH
17173: LD_INT 24
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: IN
17181: IFFALSE 17202
// points := [ 25 , 5 , 3 ] ;
17183: LD_ADDR_VAR 0 9
17187: PUSH
17188: LD_INT 25
17190: PUSH
17191: LD_INT 5
17193: PUSH
17194: LD_INT 3
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17202: LD_VAR 0 6
17206: PPUSH
17207: CALL_OW 264
17211: PUSH
17212: LD_INT 4
17214: PUSH
17215: LD_INT 43
17217: PUSH
17218: LD_INT 25
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: LIST
17225: IN
17226: IFFALSE 17247
// points := [ 40 , 15 , 5 ] ;
17228: LD_ADDR_VAR 0 9
17232: PUSH
17233: LD_INT 40
17235: PUSH
17236: LD_INT 15
17238: PUSH
17239: LD_INT 5
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17247: LD_VAR 0 6
17251: PPUSH
17252: CALL_OW 264
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: LD_INT 23
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: IN
17267: IFFALSE 17288
// points := [ 7 , 25 , 8 ] ;
17269: LD_ADDR_VAR 0 9
17273: PUSH
17274: LD_INT 7
17276: PUSH
17277: LD_INT 25
17279: PUSH
17280: LD_INT 8
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: LIST
17287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17288: LD_VAR 0 6
17292: PPUSH
17293: CALL_OW 264
17297: PUSH
17298: LD_INT 5
17300: PUSH
17301: LD_INT 27
17303: PUSH
17304: LD_INT 44
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: IN
17312: IFFALSE 17333
// points := [ 14 , 50 , 16 ] ;
17314: LD_ADDR_VAR 0 9
17318: PUSH
17319: LD_INT 14
17321: PUSH
17322: LD_INT 50
17324: PUSH
17325: LD_INT 16
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17333: LD_VAR 0 6
17337: PPUSH
17338: CALL_OW 264
17342: PUSH
17343: LD_INT 6
17345: PUSH
17346: LD_INT 46
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: IN
17353: IFFALSE 17374
// points := [ 32 , 120 , 70 ] ;
17355: LD_ADDR_VAR 0 9
17359: PUSH
17360: LD_INT 32
17362: PUSH
17363: LD_INT 120
17365: PUSH
17366: LD_INT 70
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17374: LD_VAR 0 6
17378: PPUSH
17379: CALL_OW 264
17383: PUSH
17384: LD_INT 7
17386: PUSH
17387: LD_INT 28
17389: PUSH
17390: LD_INT 45
17392: PUSH
17393: LD_INT 92
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: IN
17402: IFFALSE 17423
// points := [ 35 , 20 , 45 ] ;
17404: LD_ADDR_VAR 0 9
17408: PUSH
17409: LD_INT 35
17411: PUSH
17412: LD_INT 20
17414: PUSH
17415: LD_INT 45
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17423: LD_VAR 0 6
17427: PPUSH
17428: CALL_OW 264
17432: PUSH
17433: LD_INT 47
17435: PUSH
17436: EMPTY
17437: LIST
17438: IN
17439: IFFALSE 17460
// points := [ 67 , 45 , 75 ] ;
17441: LD_ADDR_VAR 0 9
17445: PUSH
17446: LD_INT 67
17448: PUSH
17449: LD_INT 45
17451: PUSH
17452: LD_INT 75
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17460: LD_VAR 0 6
17464: PPUSH
17465: CALL_OW 264
17469: PUSH
17470: LD_INT 26
17472: PUSH
17473: EMPTY
17474: LIST
17475: IN
17476: IFFALSE 17497
// points := [ 120 , 30 , 80 ] ;
17478: LD_ADDR_VAR 0 9
17482: PUSH
17483: LD_INT 120
17485: PUSH
17486: LD_INT 30
17488: PUSH
17489: LD_INT 80
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17497: LD_VAR 0 6
17501: PPUSH
17502: CALL_OW 264
17506: PUSH
17507: LD_INT 22
17509: PUSH
17510: EMPTY
17511: LIST
17512: IN
17513: IFFALSE 17534
// points := [ 40 , 1 , 1 ] ;
17515: LD_ADDR_VAR 0 9
17519: PUSH
17520: LD_INT 40
17522: PUSH
17523: LD_INT 1
17525: PUSH
17526: LD_INT 1
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: LIST
17533: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17534: LD_VAR 0 6
17538: PPUSH
17539: CALL_OW 264
17543: PUSH
17544: LD_INT 29
17546: PUSH
17547: EMPTY
17548: LIST
17549: IN
17550: IFFALSE 17571
// points := [ 70 , 200 , 400 ] ;
17552: LD_ADDR_VAR 0 9
17556: PUSH
17557: LD_INT 70
17559: PUSH
17560: LD_INT 200
17562: PUSH
17563: LD_INT 400
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17571: LD_VAR 0 6
17575: PPUSH
17576: CALL_OW 264
17580: PUSH
17581: LD_INT 14
17583: PUSH
17584: LD_INT 53
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: IN
17591: IFFALSE 17612
// points := [ 40 , 10 , 20 ] ;
17593: LD_ADDR_VAR 0 9
17597: PUSH
17598: LD_INT 40
17600: PUSH
17601: LD_INT 10
17603: PUSH
17604: LD_INT 20
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17612: LD_VAR 0 6
17616: PPUSH
17617: CALL_OW 264
17621: PUSH
17622: LD_INT 9
17624: PUSH
17625: EMPTY
17626: LIST
17627: IN
17628: IFFALSE 17649
// points := [ 5 , 70 , 20 ] ;
17630: LD_ADDR_VAR 0 9
17634: PUSH
17635: LD_INT 5
17637: PUSH
17638: LD_INT 70
17640: PUSH
17641: LD_INT 20
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17649: LD_VAR 0 6
17653: PPUSH
17654: CALL_OW 264
17658: PUSH
17659: LD_INT 10
17661: PUSH
17662: EMPTY
17663: LIST
17664: IN
17665: IFFALSE 17686
// points := [ 35 , 110 , 70 ] ;
17667: LD_ADDR_VAR 0 9
17671: PUSH
17672: LD_INT 35
17674: PUSH
17675: LD_INT 110
17677: PUSH
17678: LD_INT 70
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: LIST
17685: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17686: LD_VAR 0 6
17690: PPUSH
17691: CALL_OW 265
17695: PUSH
17696: LD_INT 25
17698: EQUAL
17699: IFFALSE 17720
// points := [ 80 , 65 , 100 ] ;
17701: LD_ADDR_VAR 0 9
17705: PUSH
17706: LD_INT 80
17708: PUSH
17709: LD_INT 65
17711: PUSH
17712: LD_INT 100
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: LIST
17719: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17720: LD_VAR 0 6
17724: PPUSH
17725: CALL_OW 263
17729: PUSH
17730: LD_INT 1
17732: EQUAL
17733: IFFALSE 17768
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17735: LD_ADDR_VAR 0 10
17739: PUSH
17740: LD_VAR 0 10
17744: PUSH
17745: LD_VAR 0 6
17749: PPUSH
17750: CALL_OW 311
17754: PPUSH
17755: LD_INT 3
17757: PPUSH
17758: CALL_OW 259
17762: PUSH
17763: LD_INT 4
17765: MUL
17766: MUL
17767: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17768: LD_VAR 0 6
17772: PPUSH
17773: CALL_OW 263
17777: PUSH
17778: LD_INT 2
17780: EQUAL
17781: IFFALSE 17832
// begin j := IsControledBy ( i ) ;
17783: LD_ADDR_VAR 0 7
17787: PUSH
17788: LD_VAR 0 6
17792: PPUSH
17793: CALL_OW 312
17797: ST_TO_ADDR
// if j then
17798: LD_VAR 0 7
17802: IFFALSE 17832
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17804: LD_ADDR_VAR 0 10
17808: PUSH
17809: LD_VAR 0 10
17813: PUSH
17814: LD_VAR 0 7
17818: PPUSH
17819: LD_INT 3
17821: PPUSH
17822: CALL_OW 259
17826: PUSH
17827: LD_INT 3
17829: MUL
17830: MUL
17831: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17832: LD_VAR 0 6
17836: PPUSH
17837: CALL_OW 264
17841: PUSH
17842: LD_INT 5
17844: PUSH
17845: LD_INT 6
17847: PUSH
17848: LD_INT 46
17850: PUSH
17851: LD_INT 44
17853: PUSH
17854: LD_INT 47
17856: PUSH
17857: LD_INT 45
17859: PUSH
17860: LD_INT 28
17862: PUSH
17863: LD_INT 7
17865: PUSH
17866: LD_INT 27
17868: PUSH
17869: LD_INT 29
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: IN
17884: IFFALSE 17904
17886: PUSH
17887: LD_VAR 0 1
17891: PPUSH
17892: LD_INT 52
17894: PPUSH
17895: CALL_OW 321
17899: PUSH
17900: LD_INT 2
17902: EQUAL
17903: AND
17904: IFFALSE 17921
// bpoints := bpoints * 1.2 ;
17906: LD_ADDR_VAR 0 10
17910: PUSH
17911: LD_VAR 0 10
17915: PUSH
17916: LD_REAL  1.20000000000000E+0000
17919: MUL
17920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17921: LD_VAR 0 6
17925: PPUSH
17926: CALL_OW 264
17930: PUSH
17931: LD_INT 6
17933: PUSH
17934: LD_INT 46
17936: PUSH
17937: LD_INT 47
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: LIST
17944: IN
17945: IFFALSE 17962
// bpoints := bpoints * 1.2 ;
17947: LD_ADDR_VAR 0 10
17951: PUSH
17952: LD_VAR 0 10
17956: PUSH
17957: LD_REAL  1.20000000000000E+0000
17960: MUL
17961: ST_TO_ADDR
// end ; unit_building :
17962: GO 17976
17964: LD_INT 3
17966: DOUBLE
17967: EQUAL
17968: IFTRUE 17972
17970: GO 17975
17972: POP
// ; end ;
17973: GO 17976
17975: POP
// for j = 1 to 3 do
17976: LD_ADDR_VAR 0 7
17980: PUSH
17981: DOUBLE
17982: LD_INT 1
17984: DEC
17985: ST_TO_ADDR
17986: LD_INT 3
17988: PUSH
17989: FOR_TO
17990: IFFALSE 18043
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17992: LD_ADDR_VAR 0 5
17996: PUSH
17997: LD_VAR 0 5
18001: PPUSH
18002: LD_VAR 0 7
18006: PPUSH
18007: LD_VAR 0 5
18011: PUSH
18012: LD_VAR 0 7
18016: ARRAY
18017: PUSH
18018: LD_VAR 0 9
18022: PUSH
18023: LD_VAR 0 7
18027: ARRAY
18028: PUSH
18029: LD_VAR 0 10
18033: MUL
18034: PLUS
18035: PPUSH
18036: CALL_OW 1
18040: ST_TO_ADDR
18041: GO 17989
18043: POP
18044: POP
// end ;
18045: GO 16518
18047: POP
18048: POP
// result := Replace ( result , 4 , tmp ) ;
18049: LD_ADDR_VAR 0 5
18053: PUSH
18054: LD_VAR 0 5
18058: PPUSH
18059: LD_INT 4
18061: PPUSH
18062: LD_VAR 0 8
18066: PPUSH
18067: CALL_OW 1
18071: ST_TO_ADDR
// end ;
18072: LD_VAR 0 5
18076: RET
// export function DangerAtRange ( unit , range ) ; begin
18077: LD_INT 0
18079: PPUSH
// if not unit then
18080: LD_VAR 0 1
18084: NOT
18085: IFFALSE 18089
// exit ;
18087: GO 18134
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18089: LD_ADDR_VAR 0 3
18093: PUSH
18094: LD_VAR 0 1
18098: PPUSH
18099: CALL_OW 255
18103: PPUSH
18104: LD_VAR 0 1
18108: PPUSH
18109: CALL_OW 250
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 251
18123: PPUSH
18124: LD_VAR 0 2
18128: PPUSH
18129: CALL 16368 0 4
18133: ST_TO_ADDR
// end ;
18134: LD_VAR 0 3
18138: RET
// export function DangerInArea ( side , area ) ; begin
18139: LD_INT 0
18141: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18142: LD_ADDR_VAR 0 3
18146: PUSH
18147: LD_VAR 0 2
18151: PPUSH
18152: LD_INT 81
18154: PUSH
18155: LD_VAR 0 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PPUSH
18164: CALL_OW 70
18168: ST_TO_ADDR
// end ;
18169: LD_VAR 0 3
18173: RET
// export function IsExtension ( b ) ; begin
18174: LD_INT 0
18176: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18177: LD_ADDR_VAR 0 2
18181: PUSH
18182: LD_VAR 0 1
18186: PUSH
18187: LD_INT 23
18189: PUSH
18190: LD_INT 20
18192: PUSH
18193: LD_INT 22
18195: PUSH
18196: LD_INT 17
18198: PUSH
18199: LD_INT 24
18201: PUSH
18202: LD_INT 21
18204: PUSH
18205: LD_INT 19
18207: PUSH
18208: LD_INT 16
18210: PUSH
18211: LD_INT 25
18213: PUSH
18214: LD_INT 18
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: IN
18229: ST_TO_ADDR
// end ;
18230: LD_VAR 0 2
18234: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18235: LD_INT 0
18237: PPUSH
18238: PPUSH
18239: PPUSH
// result := [ ] ;
18240: LD_ADDR_VAR 0 4
18244: PUSH
18245: EMPTY
18246: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18247: LD_ADDR_VAR 0 5
18251: PUSH
18252: LD_VAR 0 2
18256: PPUSH
18257: LD_INT 21
18259: PUSH
18260: LD_INT 3
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PPUSH
18267: CALL_OW 70
18271: ST_TO_ADDR
// if not tmp then
18272: LD_VAR 0 5
18276: NOT
18277: IFFALSE 18281
// exit ;
18279: GO 18345
// if checkLink then
18281: LD_VAR 0 3
18285: IFFALSE 18335
// begin for i in tmp do
18287: LD_ADDR_VAR 0 6
18291: PUSH
18292: LD_VAR 0 5
18296: PUSH
18297: FOR_IN
18298: IFFALSE 18333
// if GetBase ( i ) <> base then
18300: LD_VAR 0 6
18304: PPUSH
18305: CALL_OW 274
18309: PUSH
18310: LD_VAR 0 1
18314: NONEQUAL
18315: IFFALSE 18331
// ComLinkToBase ( base , i ) ;
18317: LD_VAR 0 1
18321: PPUSH
18322: LD_VAR 0 6
18326: PPUSH
18327: CALL_OW 169
18331: GO 18297
18333: POP
18334: POP
// end ; result := tmp ;
18335: LD_ADDR_VAR 0 4
18339: PUSH
18340: LD_VAR 0 5
18344: ST_TO_ADDR
// end ;
18345: LD_VAR 0 4
18349: RET
// export function ComComplete ( units , b ) ; var i ; begin
18350: LD_INT 0
18352: PPUSH
18353: PPUSH
// if not units then
18354: LD_VAR 0 1
18358: NOT
18359: IFFALSE 18363
// exit ;
18361: GO 18453
// for i in units do
18363: LD_ADDR_VAR 0 4
18367: PUSH
18368: LD_VAR 0 1
18372: PUSH
18373: FOR_IN
18374: IFFALSE 18451
// if BuildingStatus ( b ) = bs_build then
18376: LD_VAR 0 2
18380: PPUSH
18381: CALL_OW 461
18385: PUSH
18386: LD_INT 1
18388: EQUAL
18389: IFFALSE 18449
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18391: LD_VAR 0 4
18395: PPUSH
18396: LD_STRING h
18398: PUSH
18399: LD_VAR 0 2
18403: PPUSH
18404: CALL_OW 250
18408: PUSH
18409: LD_VAR 0 2
18413: PPUSH
18414: CALL_OW 251
18418: PUSH
18419: LD_VAR 0 2
18423: PUSH
18424: LD_INT 0
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: LD_INT 0
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: PPUSH
18445: CALL_OW 446
18449: GO 18373
18451: POP
18452: POP
// end ;
18453: LD_VAR 0 3
18457: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18458: LD_INT 0
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
18464: PPUSH
18465: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18466: LD_VAR 0 1
18470: NOT
18471: IFTRUE 18488
18473: PUSH
18474: LD_VAR 0 1
18478: PPUSH
18479: CALL_OW 263
18483: PUSH
18484: LD_INT 2
18486: NONEQUAL
18487: OR
18488: IFFALSE 18492
// exit ;
18490: GO 18808
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18492: LD_ADDR_VAR 0 6
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 255
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: LD_INT 30
18519: PUSH
18520: LD_INT 36
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 34
18529: PUSH
18530: LD_INT 31
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: ST_TO_ADDR
// if not tmp then
18551: LD_VAR 0 6
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18808
// result := [ ] ;
18560: LD_ADDR_VAR 0 2
18564: PUSH
18565: EMPTY
18566: ST_TO_ADDR
// for i in tmp do
18567: LD_ADDR_VAR 0 3
18571: PUSH
18572: LD_VAR 0 6
18576: PUSH
18577: FOR_IN
18578: IFFALSE 18649
// begin t := UnitsInside ( i ) ;
18580: LD_ADDR_VAR 0 4
18584: PUSH
18585: LD_VAR 0 3
18589: PPUSH
18590: CALL_OW 313
18594: ST_TO_ADDR
// if t then
18595: LD_VAR 0 4
18599: IFFALSE 18647
// for j in t do
18601: LD_ADDR_VAR 0 7
18605: PUSH
18606: LD_VAR 0 4
18610: PUSH
18611: FOR_IN
18612: IFFALSE 18645
// result := Replace ( result , result + 1 , j ) ;
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_VAR 0 2
18623: PPUSH
18624: LD_VAR 0 2
18628: PUSH
18629: LD_INT 1
18631: PLUS
18632: PPUSH
18633: LD_VAR 0 7
18637: PPUSH
18638: CALL_OW 1
18642: ST_TO_ADDR
18643: GO 18611
18645: POP
18646: POP
// end ;
18647: GO 18577
18649: POP
18650: POP
// if not result then
18651: LD_VAR 0 2
18655: NOT
18656: IFFALSE 18660
// exit ;
18658: GO 18808
// mech := result [ 1 ] ;
18660: LD_ADDR_VAR 0 5
18664: PUSH
18665: LD_VAR 0 2
18669: PUSH
18670: LD_INT 1
18672: ARRAY
18673: ST_TO_ADDR
// if result > 1 then
18674: LD_VAR 0 2
18678: PUSH
18679: LD_INT 1
18681: GREATER
18682: IFFALSE 18794
// begin for i = 2 to result do
18684: LD_ADDR_VAR 0 3
18688: PUSH
18689: DOUBLE
18690: LD_INT 2
18692: DEC
18693: ST_TO_ADDR
18694: LD_VAR 0 2
18698: PUSH
18699: FOR_TO
18700: IFFALSE 18792
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18702: LD_ADDR_VAR 0 4
18706: PUSH
18707: LD_VAR 0 2
18711: PUSH
18712: LD_VAR 0 3
18716: ARRAY
18717: PPUSH
18718: LD_INT 3
18720: PPUSH
18721: CALL_OW 259
18725: PUSH
18726: LD_VAR 0 2
18730: PUSH
18731: LD_VAR 0 3
18735: ARRAY
18736: PPUSH
18737: CALL_OW 432
18741: MINUS
18742: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18743: LD_VAR 0 4
18747: PUSH
18748: LD_VAR 0 5
18752: PPUSH
18753: LD_INT 3
18755: PPUSH
18756: CALL_OW 259
18760: PUSH
18761: LD_VAR 0 5
18765: PPUSH
18766: CALL_OW 432
18770: MINUS
18771: GREATEREQUAL
18772: IFFALSE 18790
// mech := result [ i ] ;
18774: LD_ADDR_VAR 0 5
18778: PUSH
18779: LD_VAR 0 2
18783: PUSH
18784: LD_VAR 0 3
18788: ARRAY
18789: ST_TO_ADDR
// end ;
18790: GO 18699
18792: POP
18793: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18794: LD_VAR 0 1
18798: PPUSH
18799: LD_VAR 0 5
18803: PPUSH
18804: CALL_OW 135
// end ;
18808: LD_VAR 0 2
18812: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18813: LD_INT 0
18815: PPUSH
18816: PPUSH
18817: PPUSH
18818: PPUSH
18819: PPUSH
18820: PPUSH
18821: PPUSH
18822: PPUSH
18823: PPUSH
18824: PPUSH
18825: PPUSH
18826: PPUSH
18827: PPUSH
// result := [ ] ;
18828: LD_ADDR_VAR 0 7
18832: PUSH
18833: EMPTY
18834: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18835: LD_VAR 0 1
18839: PPUSH
18840: CALL_OW 266
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: IN
18855: NOT
18856: IFFALSE 18860
// exit ;
18858: GO 20500
// if name then
18860: LD_VAR 0 3
18864: IFFALSE 18880
// SetBName ( base_dep , name ) ;
18866: LD_VAR 0 1
18870: PPUSH
18871: LD_VAR 0 3
18875: PPUSH
18876: CALL_OW 500
// base := GetBase ( base_dep ) ;
18880: LD_ADDR_VAR 0 15
18884: PUSH
18885: LD_VAR 0 1
18889: PPUSH
18890: CALL_OW 274
18894: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18895: LD_ADDR_VAR 0 16
18899: PUSH
18900: LD_VAR 0 1
18904: PPUSH
18905: CALL_OW 255
18909: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18910: LD_ADDR_VAR 0 17
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 248
18924: ST_TO_ADDR
// if sources then
18925: LD_VAR 0 5
18929: IFFALSE 18976
// for i = 1 to 3 do
18931: LD_ADDR_VAR 0 8
18935: PUSH
18936: DOUBLE
18937: LD_INT 1
18939: DEC
18940: ST_TO_ADDR
18941: LD_INT 3
18943: PUSH
18944: FOR_TO
18945: IFFALSE 18974
// AddResourceType ( base , i , sources [ i ] ) ;
18947: LD_VAR 0 15
18951: PPUSH
18952: LD_VAR 0 8
18956: PPUSH
18957: LD_VAR 0 5
18961: PUSH
18962: LD_VAR 0 8
18966: ARRAY
18967: PPUSH
18968: CALL_OW 276
18972: GO 18944
18974: POP
18975: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18976: LD_ADDR_VAR 0 18
18980: PUSH
18981: LD_VAR 0 15
18985: PPUSH
18986: LD_VAR 0 2
18990: PPUSH
18991: LD_INT 1
18993: PPUSH
18994: CALL 18235 0 3
18998: ST_TO_ADDR
// InitHc ;
18999: CALL_OW 19
// InitUc ;
19003: CALL_OW 18
// uc_side := side ;
19007: LD_ADDR_OWVAR 20
19011: PUSH
19012: LD_VAR 0 16
19016: ST_TO_ADDR
// uc_nation := nation ;
19017: LD_ADDR_OWVAR 21
19021: PUSH
19022: LD_VAR 0 17
19026: ST_TO_ADDR
// if buildings then
19027: LD_VAR 0 18
19031: IFFALSE 20359
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19033: LD_ADDR_VAR 0 19
19037: PUSH
19038: LD_VAR 0 18
19042: PPUSH
19043: LD_INT 2
19045: PUSH
19046: LD_INT 30
19048: PUSH
19049: LD_INT 29
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 30
19058: PUSH
19059: LD_INT 30
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: PPUSH
19071: CALL_OW 72
19075: ST_TO_ADDR
// if tmp then
19076: LD_VAR 0 19
19080: IFFALSE 19128
// for i in tmp do
19082: LD_ADDR_VAR 0 8
19086: PUSH
19087: LD_VAR 0 19
19091: PUSH
19092: FOR_IN
19093: IFFALSE 19126
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19095: LD_VAR 0 8
19099: PPUSH
19100: CALL_OW 250
19104: PPUSH
19105: LD_VAR 0 8
19109: PPUSH
19110: CALL_OW 251
19114: PPUSH
19115: LD_VAR 0 16
19119: PPUSH
19120: CALL_OW 441
19124: GO 19092
19126: POP
19127: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19128: LD_VAR 0 18
19132: PPUSH
19133: LD_INT 2
19135: PUSH
19136: LD_INT 30
19138: PUSH
19139: LD_INT 32
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 30
19148: PUSH
19149: LD_INT 33
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: LIST
19160: PPUSH
19161: CALL_OW 72
19165: IFFALSE 19253
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19167: LD_ADDR_VAR 0 8
19171: PUSH
19172: LD_VAR 0 18
19176: PPUSH
19177: LD_INT 2
19179: PUSH
19180: LD_INT 30
19182: PUSH
19183: LD_INT 32
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 30
19192: PUSH
19193: LD_INT 33
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: PPUSH
19205: CALL_OW 72
19209: PUSH
19210: FOR_IN
19211: IFFALSE 19251
// begin if not GetBWeapon ( i ) then
19213: LD_VAR 0 8
19217: PPUSH
19218: CALL_OW 269
19222: NOT
19223: IFFALSE 19249
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19225: LD_VAR 0 8
19229: PPUSH
19230: LD_VAR 0 8
19234: PPUSH
19235: LD_VAR 0 2
19239: PPUSH
19240: CALL 20505 0 2
19244: PPUSH
19245: CALL_OW 431
// end ;
19249: GO 19210
19251: POP
19252: POP
// end ; for i = 1 to personel do
19253: LD_ADDR_VAR 0 8
19257: PUSH
19258: DOUBLE
19259: LD_INT 1
19261: DEC
19262: ST_TO_ADDR
19263: LD_VAR 0 6
19267: PUSH
19268: FOR_TO
19269: IFFALSE 20339
// begin if i > 4 then
19271: LD_VAR 0 8
19275: PUSH
19276: LD_INT 4
19278: GREATER
19279: IFFALSE 19283
// break ;
19281: GO 20339
// case i of 1 :
19283: LD_VAR 0 8
19287: PUSH
19288: LD_INT 1
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19376
19296: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19297: LD_ADDR_VAR 0 12
19301: PUSH
19302: LD_VAR 0 18
19306: PPUSH
19307: LD_INT 22
19309: PUSH
19310: LD_VAR 0 16
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 58
19321: PUSH
19322: EMPTY
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: LD_INT 30
19330: PUSH
19331: LD_INT 32
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 30
19340: PUSH
19341: LD_INT 4
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 30
19350: PUSH
19351: LD_INT 5
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: PPUSH
19369: CALL_OW 72
19373: ST_TO_ADDR
19374: GO 19598
19376: LD_INT 2
19378: DOUBLE
19379: EQUAL
19380: IFTRUE 19384
19382: GO 19446
19384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19385: LD_ADDR_VAR 0 12
19389: PUSH
19390: LD_VAR 0 18
19394: PPUSH
19395: LD_INT 22
19397: PUSH
19398: LD_VAR 0 16
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 30
19412: PUSH
19413: LD_INT 0
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 30
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PPUSH
19439: CALL_OW 72
19443: ST_TO_ADDR
19444: GO 19598
19446: LD_INT 3
19448: DOUBLE
19449: EQUAL
19450: IFTRUE 19454
19452: GO 19516
19454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19455: LD_ADDR_VAR 0 12
19459: PUSH
19460: LD_VAR 0 18
19464: PPUSH
19465: LD_INT 22
19467: PUSH
19468: LD_VAR 0 16
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: LD_INT 30
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 30
19492: PUSH
19493: LD_INT 3
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PPUSH
19509: CALL_OW 72
19513: ST_TO_ADDR
19514: GO 19598
19516: LD_INT 4
19518: DOUBLE
19519: EQUAL
19520: IFTRUE 19524
19522: GO 19597
19524: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19525: LD_ADDR_VAR 0 12
19529: PUSH
19530: LD_VAR 0 18
19534: PPUSH
19535: LD_INT 22
19537: PUSH
19538: LD_VAR 0 16
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: LD_INT 30
19552: PUSH
19553: LD_INT 6
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 30
19562: PUSH
19563: LD_INT 7
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 30
19572: PUSH
19573: LD_INT 8
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PPUSH
19590: CALL_OW 72
19594: ST_TO_ADDR
19595: GO 19598
19597: POP
// if i = 1 then
19598: LD_VAR 0 8
19602: PUSH
19603: LD_INT 1
19605: EQUAL
19606: IFFALSE 19717
// begin tmp := [ ] ;
19608: LD_ADDR_VAR 0 19
19612: PUSH
19613: EMPTY
19614: ST_TO_ADDR
// for j in f do
19615: LD_ADDR_VAR 0 9
19619: PUSH
19620: LD_VAR 0 12
19624: PUSH
19625: FOR_IN
19626: IFFALSE 19699
// if GetBType ( j ) = b_bunker then
19628: LD_VAR 0 9
19632: PPUSH
19633: CALL_OW 266
19637: PUSH
19638: LD_INT 32
19640: EQUAL
19641: IFFALSE 19668
// tmp := Insert ( tmp , 1 , j ) else
19643: LD_ADDR_VAR 0 19
19647: PUSH
19648: LD_VAR 0 19
19652: PPUSH
19653: LD_INT 1
19655: PPUSH
19656: LD_VAR 0 9
19660: PPUSH
19661: CALL_OW 2
19665: ST_TO_ADDR
19666: GO 19697
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19668: LD_ADDR_VAR 0 19
19672: PUSH
19673: LD_VAR 0 19
19677: PPUSH
19678: LD_VAR 0 19
19682: PUSH
19683: LD_INT 1
19685: PLUS
19686: PPUSH
19687: LD_VAR 0 9
19691: PPUSH
19692: CALL_OW 2
19696: ST_TO_ADDR
19697: GO 19625
19699: POP
19700: POP
// if tmp then
19701: LD_VAR 0 19
19705: IFFALSE 19717
// f := tmp ;
19707: LD_ADDR_VAR 0 12
19711: PUSH
19712: LD_VAR 0 19
19716: ST_TO_ADDR
// end ; x := personel [ i ] ;
19717: LD_ADDR_VAR 0 13
19721: PUSH
19722: LD_VAR 0 6
19726: PUSH
19727: LD_VAR 0 8
19731: ARRAY
19732: ST_TO_ADDR
// if x = - 1 then
19733: LD_VAR 0 13
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: EQUAL
19742: IFFALSE 19953
// begin for j in f do
19744: LD_ADDR_VAR 0 9
19748: PUSH
19749: LD_VAR 0 12
19753: PUSH
19754: FOR_IN
19755: IFFALSE 19949
// repeat InitHc ;
19757: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19761: LD_VAR 0 9
19765: PPUSH
19766: CALL_OW 266
19770: PUSH
19771: LD_INT 5
19773: EQUAL
19774: IFFALSE 19844
// begin if UnitsInside ( j ) < 3 then
19776: LD_VAR 0 9
19780: PPUSH
19781: CALL_OW 313
19785: PUSH
19786: LD_INT 3
19788: LESS
19789: IFFALSE 19825
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19791: LD_INT 0
19793: PPUSH
19794: LD_INT 5
19796: PUSH
19797: LD_INT 8
19799: PUSH
19800: LD_INT 9
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: PUSH
19808: LD_VAR 0 17
19812: ARRAY
19813: PPUSH
19814: LD_VAR 0 4
19818: PPUSH
19819: CALL_OW 380
19823: GO 19842
// PrepareHuman ( false , i , skill ) ;
19825: LD_INT 0
19827: PPUSH
19828: LD_VAR 0 8
19832: PPUSH
19833: LD_VAR 0 4
19837: PPUSH
19838: CALL_OW 380
// end else
19842: GO 19861
// PrepareHuman ( false , i , skill ) ;
19844: LD_INT 0
19846: PPUSH
19847: LD_VAR 0 8
19851: PPUSH
19852: LD_VAR 0 4
19856: PPUSH
19857: CALL_OW 380
// un := CreateHuman ;
19861: LD_ADDR_VAR 0 14
19865: PUSH
19866: CALL_OW 44
19870: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19871: LD_ADDR_VAR 0 7
19875: PUSH
19876: LD_VAR 0 7
19880: PPUSH
19881: LD_INT 1
19883: PPUSH
19884: LD_VAR 0 14
19888: PPUSH
19889: CALL_OW 2
19893: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19894: LD_VAR 0 14
19898: PPUSH
19899: LD_VAR 0 9
19903: PPUSH
19904: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19908: LD_VAR 0 9
19912: PPUSH
19913: CALL_OW 313
19917: PUSH
19918: LD_INT 6
19920: EQUAL
19921: IFTRUE 19945
19923: PUSH
19924: LD_VAR 0 9
19928: PPUSH
19929: CALL_OW 266
19933: PUSH
19934: LD_INT 32
19936: PUSH
19937: LD_INT 31
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: IN
19944: OR
19945: IFFALSE 19757
19947: GO 19754
19949: POP
19950: POP
// end else
19951: GO 20337
// for j = 1 to x do
19953: LD_ADDR_VAR 0 9
19957: PUSH
19958: DOUBLE
19959: LD_INT 1
19961: DEC
19962: ST_TO_ADDR
19963: LD_VAR 0 13
19967: PUSH
19968: FOR_TO
19969: IFFALSE 20335
// begin InitHc ;
19971: CALL_OW 19
// if not f then
19975: LD_VAR 0 12
19979: NOT
19980: IFFALSE 20069
// begin PrepareHuman ( false , i , skill ) ;
19982: LD_INT 0
19984: PPUSH
19985: LD_VAR 0 8
19989: PPUSH
19990: LD_VAR 0 4
19994: PPUSH
19995: CALL_OW 380
// un := CreateHuman ;
19999: LD_ADDR_VAR 0 14
20003: PUSH
20004: CALL_OW 44
20008: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20009: LD_ADDR_VAR 0 7
20013: PUSH
20014: LD_VAR 0 7
20018: PPUSH
20019: LD_INT 1
20021: PPUSH
20022: LD_VAR 0 14
20026: PPUSH
20027: CALL_OW 2
20031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20032: LD_VAR 0 14
20036: PPUSH
20037: LD_VAR 0 1
20041: PPUSH
20042: CALL_OW 250
20046: PPUSH
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 251
20056: PPUSH
20057: LD_INT 10
20059: PPUSH
20060: LD_INT 0
20062: PPUSH
20063: CALL_OW 50
// continue ;
20067: GO 19968
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20069: LD_VAR 0 12
20073: PUSH
20074: LD_INT 1
20076: ARRAY
20077: PPUSH
20078: CALL_OW 313
20082: IFFALSE 20110
20084: PUSH
20085: LD_VAR 0 12
20089: PUSH
20090: LD_INT 1
20092: ARRAY
20093: PPUSH
20094: CALL_OW 266
20098: PUSH
20099: LD_INT 32
20101: PUSH
20102: LD_INT 31
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: IN
20109: AND
20110: IFTRUE 20131
20112: PUSH
20113: LD_VAR 0 12
20117: PUSH
20118: LD_INT 1
20120: ARRAY
20121: PPUSH
20122: CALL_OW 313
20126: PUSH
20127: LD_INT 6
20129: EQUAL
20130: OR
20131: IFFALSE 20151
// f := Delete ( f , 1 ) ;
20133: LD_ADDR_VAR 0 12
20137: PUSH
20138: LD_VAR 0 12
20142: PPUSH
20143: LD_INT 1
20145: PPUSH
20146: CALL_OW 3
20150: ST_TO_ADDR
// if not f then
20151: LD_VAR 0 12
20155: NOT
20156: IFFALSE 20174
// begin x := x + 2 ;
20158: LD_ADDR_VAR 0 13
20162: PUSH
20163: LD_VAR 0 13
20167: PUSH
20168: LD_INT 2
20170: PLUS
20171: ST_TO_ADDR
// continue ;
20172: GO 19968
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20174: LD_VAR 0 12
20178: PUSH
20179: LD_INT 1
20181: ARRAY
20182: PPUSH
20183: CALL_OW 266
20187: PUSH
20188: LD_INT 5
20190: EQUAL
20191: IFFALSE 20265
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20193: LD_VAR 0 12
20197: PUSH
20198: LD_INT 1
20200: ARRAY
20201: PPUSH
20202: CALL_OW 313
20206: PUSH
20207: LD_INT 3
20209: LESS
20210: IFFALSE 20246
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20212: LD_INT 0
20214: PPUSH
20215: LD_INT 5
20217: PUSH
20218: LD_INT 8
20220: PUSH
20221: LD_INT 9
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: LIST
20228: PUSH
20229: LD_VAR 0 17
20233: ARRAY
20234: PPUSH
20235: LD_VAR 0 4
20239: PPUSH
20240: CALL_OW 380
20244: GO 20263
// PrepareHuman ( false , i , skill ) ;
20246: LD_INT 0
20248: PPUSH
20249: LD_VAR 0 8
20253: PPUSH
20254: LD_VAR 0 4
20258: PPUSH
20259: CALL_OW 380
// end else
20263: GO 20282
// PrepareHuman ( false , i , skill ) ;
20265: LD_INT 0
20267: PPUSH
20268: LD_VAR 0 8
20272: PPUSH
20273: LD_VAR 0 4
20277: PPUSH
20278: CALL_OW 380
// un := CreateHuman ;
20282: LD_ADDR_VAR 0 14
20286: PUSH
20287: CALL_OW 44
20291: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20292: LD_ADDR_VAR 0 7
20296: PUSH
20297: LD_VAR 0 7
20301: PPUSH
20302: LD_INT 1
20304: PPUSH
20305: LD_VAR 0 14
20309: PPUSH
20310: CALL_OW 2
20314: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20315: LD_VAR 0 14
20319: PPUSH
20320: LD_VAR 0 12
20324: PUSH
20325: LD_INT 1
20327: ARRAY
20328: PPUSH
20329: CALL_OW 52
// end ;
20333: GO 19968
20335: POP
20336: POP
// end ;
20337: GO 19268
20339: POP
20340: POP
// result := result ^ buildings ;
20341: LD_ADDR_VAR 0 7
20345: PUSH
20346: LD_VAR 0 7
20350: PUSH
20351: LD_VAR 0 18
20355: ADD
20356: ST_TO_ADDR
// end else
20357: GO 20500
// begin for i = 1 to personel do
20359: LD_ADDR_VAR 0 8
20363: PUSH
20364: DOUBLE
20365: LD_INT 1
20367: DEC
20368: ST_TO_ADDR
20369: LD_VAR 0 6
20373: PUSH
20374: FOR_TO
20375: IFFALSE 20498
// begin if i > 4 then
20377: LD_VAR 0 8
20381: PUSH
20382: LD_INT 4
20384: GREATER
20385: IFFALSE 20389
// break ;
20387: GO 20498
// x := personel [ i ] ;
20389: LD_ADDR_VAR 0 13
20393: PUSH
20394: LD_VAR 0 6
20398: PUSH
20399: LD_VAR 0 8
20403: ARRAY
20404: ST_TO_ADDR
// if x = - 1 then
20405: LD_VAR 0 13
20409: PUSH
20410: LD_INT 1
20412: NEG
20413: EQUAL
20414: IFFALSE 20418
// continue ;
20416: GO 20374
// PrepareHuman ( false , i , skill ) ;
20418: LD_INT 0
20420: PPUSH
20421: LD_VAR 0 8
20425: PPUSH
20426: LD_VAR 0 4
20430: PPUSH
20431: CALL_OW 380
// un := CreateHuman ;
20435: LD_ADDR_VAR 0 14
20439: PUSH
20440: CALL_OW 44
20444: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20445: LD_VAR 0 14
20449: PPUSH
20450: LD_VAR 0 1
20454: PPUSH
20455: CALL_OW 250
20459: PPUSH
20460: LD_VAR 0 1
20464: PPUSH
20465: CALL_OW 251
20469: PPUSH
20470: LD_INT 10
20472: PPUSH
20473: LD_INT 0
20475: PPUSH
20476: CALL_OW 50
// result := result ^ un ;
20480: LD_ADDR_VAR 0 7
20484: PUSH
20485: LD_VAR 0 7
20489: PUSH
20490: LD_VAR 0 14
20494: ADD
20495: ST_TO_ADDR
// end ;
20496: GO 20374
20498: POP
20499: POP
// end ; end ;
20500: LD_VAR 0 7
20504: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20505: LD_INT 0
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
// result := false ;
20523: LD_ADDR_VAR 0 3
20527: PUSH
20528: LD_INT 0
20530: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20531: LD_VAR 0 1
20535: NOT
20536: IFTRUE 20561
20538: PUSH
20539: LD_VAR 0 1
20543: PPUSH
20544: CALL_OW 266
20548: PUSH
20549: LD_INT 32
20551: PUSH
20552: LD_INT 33
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: IN
20559: NOT
20560: OR
20561: IFFALSE 20565
// exit ;
20563: GO 21700
// nat := GetNation ( tower ) ;
20565: LD_ADDR_VAR 0 12
20569: PUSH
20570: LD_VAR 0 1
20574: PPUSH
20575: CALL_OW 248
20579: ST_TO_ADDR
// side := GetSide ( tower ) ;
20580: LD_ADDR_VAR 0 16
20584: PUSH
20585: LD_VAR 0 1
20589: PPUSH
20590: CALL_OW 255
20594: ST_TO_ADDR
// x := GetX ( tower ) ;
20595: LD_ADDR_VAR 0 10
20599: PUSH
20600: LD_VAR 0 1
20604: PPUSH
20605: CALL_OW 250
20609: ST_TO_ADDR
// y := GetY ( tower ) ;
20610: LD_ADDR_VAR 0 11
20614: PUSH
20615: LD_VAR 0 1
20619: PPUSH
20620: CALL_OW 251
20624: ST_TO_ADDR
// if not x or not y then
20625: LD_VAR 0 10
20629: NOT
20630: IFTRUE 20639
20632: PUSH
20633: LD_VAR 0 11
20637: NOT
20638: OR
20639: IFFALSE 20643
// exit ;
20641: GO 21700
// weapon := 0 ;
20643: LD_ADDR_VAR 0 18
20647: PUSH
20648: LD_INT 0
20650: ST_TO_ADDR
// fac_list := [ ] ;
20651: LD_ADDR_VAR 0 17
20655: PUSH
20656: EMPTY
20657: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20658: LD_ADDR_VAR 0 6
20662: PUSH
20663: LD_VAR 0 1
20667: PPUSH
20668: CALL_OW 274
20672: PPUSH
20673: LD_VAR 0 2
20677: PPUSH
20678: LD_INT 0
20680: PPUSH
20681: CALL 18235 0 3
20685: PPUSH
20686: LD_INT 30
20688: PUSH
20689: LD_INT 3
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PPUSH
20696: CALL_OW 72
20700: ST_TO_ADDR
// if not factories then
20701: LD_VAR 0 6
20705: NOT
20706: IFFALSE 20710
// exit ;
20708: GO 21700
// for i in factories do
20710: LD_ADDR_VAR 0 8
20714: PUSH
20715: LD_VAR 0 6
20719: PUSH
20720: FOR_IN
20721: IFFALSE 20746
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20723: LD_ADDR_VAR 0 17
20727: PUSH
20728: LD_VAR 0 17
20732: PUSH
20733: LD_VAR 0 8
20737: PPUSH
20738: CALL_OW 478
20742: UNION
20743: ST_TO_ADDR
20744: GO 20720
20746: POP
20747: POP
// if not fac_list then
20748: LD_VAR 0 17
20752: NOT
20753: IFFALSE 20757
// exit ;
20755: GO 21700
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20757: LD_ADDR_VAR 0 5
20761: PUSH
20762: LD_INT 4
20764: PUSH
20765: LD_INT 5
20767: PUSH
20768: LD_INT 9
20770: PUSH
20771: LD_INT 10
20773: PUSH
20774: LD_INT 6
20776: PUSH
20777: LD_INT 7
20779: PUSH
20780: LD_INT 11
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 27
20794: PUSH
20795: LD_INT 28
20797: PUSH
20798: LD_INT 26
20800: PUSH
20801: LD_INT 30
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 43
20812: PUSH
20813: LD_INT 44
20815: PUSH
20816: LD_INT 46
20818: PUSH
20819: LD_INT 45
20821: PUSH
20822: LD_INT 47
20824: PUSH
20825: LD_INT 49
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: PUSH
20841: LD_VAR 0 12
20845: ARRAY
20846: ST_TO_ADDR
// list := list isect fac_list ;
20847: LD_ADDR_VAR 0 5
20851: PUSH
20852: LD_VAR 0 5
20856: PUSH
20857: LD_VAR 0 17
20861: ISECT
20862: ST_TO_ADDR
// if not list then
20863: LD_VAR 0 5
20867: NOT
20868: IFFALSE 20872
// exit ;
20870: GO 21700
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20872: LD_VAR 0 12
20876: PUSH
20877: LD_INT 3
20879: EQUAL
20880: IFFALSE 20892
20882: PUSH
20883: LD_INT 49
20885: PUSH
20886: LD_VAR 0 5
20890: IN
20891: AND
20892: IFFALSE 20912
20894: PUSH
20895: LD_INT 31
20897: PPUSH
20898: LD_VAR 0 16
20902: PPUSH
20903: CALL_OW 321
20907: PUSH
20908: LD_INT 2
20910: EQUAL
20911: AND
20912: IFFALSE 20972
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20914: LD_INT 22
20916: PUSH
20917: LD_VAR 0 16
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 35
20928: PUSH
20929: LD_INT 49
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 91
20938: PUSH
20939: LD_VAR 0 1
20943: PUSH
20944: LD_INT 10
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: PPUSH
20957: CALL_OW 69
20961: NOT
20962: IFFALSE 20972
// weapon := ru_time_lapser ;
20964: LD_ADDR_VAR 0 18
20968: PUSH
20969: LD_INT 49
20971: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20972: LD_VAR 0 12
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: LD_INT 2
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: IN
20987: IFFALSE 21011
20989: PUSH
20990: LD_INT 11
20992: PUSH
20993: LD_VAR 0 5
20997: IN
20998: IFTRUE 21010
21000: PUSH
21001: LD_INT 30
21003: PUSH
21004: LD_VAR 0 5
21008: IN
21009: OR
21010: AND
21011: IFFALSE 21031
21013: PUSH
21014: LD_INT 6
21016: PPUSH
21017: LD_VAR 0 16
21021: PPUSH
21022: CALL_OW 321
21026: PUSH
21027: LD_INT 2
21029: EQUAL
21030: AND
21031: IFFALSE 21198
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21033: LD_INT 22
21035: PUSH
21036: LD_VAR 0 16
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: LD_INT 35
21050: PUSH
21051: LD_INT 11
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 35
21060: PUSH
21061: LD_INT 30
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 91
21075: PUSH
21076: LD_VAR 0 1
21080: PUSH
21081: LD_INT 18
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: LIST
21093: PPUSH
21094: CALL_OW 69
21098: NOT
21099: IFFALSE 21175
21101: PUSH
21102: LD_INT 22
21104: PUSH
21105: LD_VAR 0 16
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 30
21119: PUSH
21120: LD_INT 32
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 30
21129: PUSH
21130: LD_INT 33
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 91
21144: PUSH
21145: LD_VAR 0 1
21149: PUSH
21150: LD_INT 12
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: PUSH
21163: EMPTY
21164: LIST
21165: PPUSH
21166: CALL_OW 69
21170: PUSH
21171: LD_INT 2
21173: GREATER
21174: AND
21175: IFFALSE 21198
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21177: LD_ADDR_VAR 0 18
21181: PUSH
21182: LD_INT 11
21184: PUSH
21185: LD_INT 30
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_VAR 0 12
21196: ARRAY
21197: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21198: LD_VAR 0 18
21202: NOT
21203: IFFALSE 21223
21205: PUSH
21206: LD_INT 40
21208: PPUSH
21209: LD_VAR 0 16
21213: PPUSH
21214: CALL_OW 321
21218: PUSH
21219: LD_INT 2
21221: EQUAL
21222: AND
21223: IFFALSE 21259
21225: PUSH
21226: LD_INT 7
21228: PUSH
21229: LD_VAR 0 5
21233: IN
21234: IFTRUE 21246
21236: PUSH
21237: LD_INT 28
21239: PUSH
21240: LD_VAR 0 5
21244: IN
21245: OR
21246: IFTRUE 21258
21248: PUSH
21249: LD_INT 45
21251: PUSH
21252: LD_VAR 0 5
21256: IN
21257: OR
21258: AND
21259: IFFALSE 21513
// begin hex := GetHexInfo ( x , y ) ;
21261: LD_ADDR_VAR 0 4
21265: PUSH
21266: LD_VAR 0 10
21270: PPUSH
21271: LD_VAR 0 11
21275: PPUSH
21276: CALL_OW 546
21280: ST_TO_ADDR
// if hex [ 1 ] then
21281: LD_VAR 0 4
21285: PUSH
21286: LD_INT 1
21288: ARRAY
21289: IFFALSE 21293
// exit ;
21291: GO 21700
// height := hex [ 2 ] ;
21293: LD_ADDR_VAR 0 15
21297: PUSH
21298: LD_VAR 0 4
21302: PUSH
21303: LD_INT 2
21305: ARRAY
21306: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21307: LD_ADDR_VAR 0 14
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: LD_INT 3
21320: PUSH
21321: LD_INT 5
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: ST_TO_ADDR
// for i in tmp do
21330: LD_ADDR_VAR 0 8
21334: PUSH
21335: LD_VAR 0 14
21339: PUSH
21340: FOR_IN
21341: IFFALSE 21511
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21343: LD_ADDR_VAR 0 9
21347: PUSH
21348: LD_VAR 0 10
21352: PPUSH
21353: LD_VAR 0 8
21357: PPUSH
21358: LD_INT 5
21360: PPUSH
21361: CALL_OW 272
21365: PUSH
21366: LD_VAR 0 11
21370: PPUSH
21371: LD_VAR 0 8
21375: PPUSH
21376: LD_INT 5
21378: PPUSH
21379: CALL_OW 273
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21388: LD_VAR 0 9
21392: PUSH
21393: LD_INT 1
21395: ARRAY
21396: PPUSH
21397: LD_VAR 0 9
21401: PUSH
21402: LD_INT 2
21404: ARRAY
21405: PPUSH
21406: CALL_OW 488
21410: IFFALSE 21509
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21412: LD_ADDR_VAR 0 4
21416: PUSH
21417: LD_VAR 0 9
21421: PUSH
21422: LD_INT 1
21424: ARRAY
21425: PPUSH
21426: LD_VAR 0 9
21430: PUSH
21431: LD_INT 2
21433: ARRAY
21434: PPUSH
21435: CALL_OW 546
21439: ST_TO_ADDR
// if hex [ 1 ] then
21440: LD_VAR 0 4
21444: PUSH
21445: LD_INT 1
21447: ARRAY
21448: IFFALSE 21452
// continue ;
21450: GO 21340
// h := hex [ 2 ] ;
21452: LD_ADDR_VAR 0 13
21456: PUSH
21457: LD_VAR 0 4
21461: PUSH
21462: LD_INT 2
21464: ARRAY
21465: ST_TO_ADDR
// if h + 7 < height then
21466: LD_VAR 0 13
21470: PUSH
21471: LD_INT 7
21473: PLUS
21474: PUSH
21475: LD_VAR 0 15
21479: LESS
21480: IFFALSE 21509
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21482: LD_ADDR_VAR 0 18
21486: PUSH
21487: LD_INT 7
21489: PUSH
21490: LD_INT 28
21492: PUSH
21493: LD_INT 45
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: LIST
21500: PUSH
21501: LD_VAR 0 12
21505: ARRAY
21506: ST_TO_ADDR
// break ;
21507: GO 21511
// end ; end ; end ;
21509: GO 21340
21511: POP
21512: POP
// end ; if not weapon then
21513: LD_VAR 0 18
21517: NOT
21518: IFFALSE 21578
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21520: LD_ADDR_VAR 0 5
21524: PUSH
21525: LD_VAR 0 5
21529: PUSH
21530: LD_INT 11
21532: PUSH
21533: LD_INT 30
21535: PUSH
21536: LD_INT 49
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: DIFF
21544: ST_TO_ADDR
// if not list then
21545: LD_VAR 0 5
21549: NOT
21550: IFFALSE 21554
// exit ;
21552: GO 21700
// weapon := list [ rand ( 1 , list ) ] ;
21554: LD_ADDR_VAR 0 18
21558: PUSH
21559: LD_VAR 0 5
21563: PUSH
21564: LD_INT 1
21566: PPUSH
21567: LD_VAR 0 5
21571: PPUSH
21572: CALL_OW 12
21576: ARRAY
21577: ST_TO_ADDR
// end ; if weapon then
21578: LD_VAR 0 18
21582: IFFALSE 21700
// begin tmp := CostOfWeapon ( weapon ) ;
21584: LD_ADDR_VAR 0 14
21588: PUSH
21589: LD_VAR 0 18
21593: PPUSH
21594: CALL_OW 451
21598: ST_TO_ADDR
// j := GetBase ( tower ) ;
21599: LD_ADDR_VAR 0 9
21603: PUSH
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 274
21613: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21614: LD_VAR 0 9
21618: PPUSH
21619: LD_INT 1
21621: PPUSH
21622: CALL_OW 275
21626: PUSH
21627: LD_VAR 0 14
21631: PUSH
21632: LD_INT 1
21634: ARRAY
21635: GREATEREQUAL
21636: IFFALSE 21662
21638: PUSH
21639: LD_VAR 0 9
21643: PPUSH
21644: LD_INT 2
21646: PPUSH
21647: CALL_OW 275
21651: PUSH
21652: LD_VAR 0 14
21656: PUSH
21657: LD_INT 2
21659: ARRAY
21660: GREATEREQUAL
21661: AND
21662: IFFALSE 21688
21664: PUSH
21665: LD_VAR 0 9
21669: PPUSH
21670: LD_INT 3
21672: PPUSH
21673: CALL_OW 275
21677: PUSH
21678: LD_VAR 0 14
21682: PUSH
21683: LD_INT 3
21685: ARRAY
21686: GREATEREQUAL
21687: AND
21688: IFFALSE 21700
// result := weapon ;
21690: LD_ADDR_VAR 0 3
21694: PUSH
21695: LD_VAR 0 18
21699: ST_TO_ADDR
// end ; end ;
21700: LD_VAR 0 3
21704: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21705: LD_INT 0
21707: PPUSH
21708: PPUSH
// result := true ;
21709: LD_ADDR_VAR 0 3
21713: PUSH
21714: LD_INT 1
21716: ST_TO_ADDR
// if array1 = array2 then
21717: LD_VAR 0 1
21721: PUSH
21722: LD_VAR 0 2
21726: EQUAL
21727: IFFALSE 21787
// begin for i = 1 to array1 do
21729: LD_ADDR_VAR 0 4
21733: PUSH
21734: DOUBLE
21735: LD_INT 1
21737: DEC
21738: ST_TO_ADDR
21739: LD_VAR 0 1
21743: PUSH
21744: FOR_TO
21745: IFFALSE 21783
// if array1 [ i ] <> array2 [ i ] then
21747: LD_VAR 0 1
21751: PUSH
21752: LD_VAR 0 4
21756: ARRAY
21757: PUSH
21758: LD_VAR 0 2
21762: PUSH
21763: LD_VAR 0 4
21767: ARRAY
21768: NONEQUAL
21769: IFFALSE 21781
// begin result := false ;
21771: LD_ADDR_VAR 0 3
21775: PUSH
21776: LD_INT 0
21778: ST_TO_ADDR
// break ;
21779: GO 21783
// end ;
21781: GO 21744
21783: POP
21784: POP
// end else
21785: GO 21795
// result := false ;
21787: LD_ADDR_VAR 0 3
21791: PUSH
21792: LD_INT 0
21794: ST_TO_ADDR
// end ;
21795: LD_VAR 0 3
21799: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21800: LD_INT 0
21802: PPUSH
21803: PPUSH
// if not array1 or not array2 then
21804: LD_VAR 0 1
21808: NOT
21809: IFTRUE 21818
21811: PUSH
21812: LD_VAR 0 2
21816: NOT
21817: OR
21818: IFFALSE 21822
// exit ;
21820: GO 21886
// result := true ;
21822: LD_ADDR_VAR 0 3
21826: PUSH
21827: LD_INT 1
21829: ST_TO_ADDR
// for i = 1 to array1 do
21830: LD_ADDR_VAR 0 4
21834: PUSH
21835: DOUBLE
21836: LD_INT 1
21838: DEC
21839: ST_TO_ADDR
21840: LD_VAR 0 1
21844: PUSH
21845: FOR_TO
21846: IFFALSE 21884
// if array1 [ i ] <> array2 [ i ] then
21848: LD_VAR 0 1
21852: PUSH
21853: LD_VAR 0 4
21857: ARRAY
21858: PUSH
21859: LD_VAR 0 2
21863: PUSH
21864: LD_VAR 0 4
21868: ARRAY
21869: NONEQUAL
21870: IFFALSE 21882
// begin result := false ;
21872: LD_ADDR_VAR 0 3
21876: PUSH
21877: LD_INT 0
21879: ST_TO_ADDR
// break ;
21880: GO 21884
// end ;
21882: GO 21845
21884: POP
21885: POP
// end ;
21886: LD_VAR 0 3
21890: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21891: LD_INT 0
21893: PPUSH
21894: PPUSH
21895: PPUSH
// pom := GetBase ( fac ) ;
21896: LD_ADDR_VAR 0 5
21900: PUSH
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL_OW 274
21910: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21911: LD_ADDR_VAR 0 4
21915: PUSH
21916: LD_VAR 0 2
21920: PUSH
21921: LD_INT 1
21923: ARRAY
21924: PPUSH
21925: LD_VAR 0 2
21929: PUSH
21930: LD_INT 2
21932: ARRAY
21933: PPUSH
21934: LD_VAR 0 2
21938: PUSH
21939: LD_INT 3
21941: ARRAY
21942: PPUSH
21943: LD_VAR 0 2
21947: PUSH
21948: LD_INT 4
21950: ARRAY
21951: PPUSH
21952: CALL_OW 449
21956: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21957: LD_ADDR_VAR 0 3
21961: PUSH
21962: LD_VAR 0 5
21966: PPUSH
21967: LD_INT 1
21969: PPUSH
21970: CALL_OW 275
21974: PUSH
21975: LD_VAR 0 4
21979: PUSH
21980: LD_INT 1
21982: ARRAY
21983: GREATEREQUAL
21984: IFFALSE 22010
21986: PUSH
21987: LD_VAR 0 5
21991: PPUSH
21992: LD_INT 2
21994: PPUSH
21995: CALL_OW 275
21999: PUSH
22000: LD_VAR 0 4
22004: PUSH
22005: LD_INT 2
22007: ARRAY
22008: GREATEREQUAL
22009: AND
22010: IFFALSE 22036
22012: PUSH
22013: LD_VAR 0 5
22017: PPUSH
22018: LD_INT 3
22020: PPUSH
22021: CALL_OW 275
22025: PUSH
22026: LD_VAR 0 4
22030: PUSH
22031: LD_INT 3
22033: ARRAY
22034: GREATEREQUAL
22035: AND
22036: ST_TO_ADDR
// end ;
22037: LD_VAR 0 3
22041: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22042: LD_INT 0
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
// pom := GetBase ( building ) ;
22048: LD_ADDR_VAR 0 3
22052: PUSH
22053: LD_VAR 0 1
22057: PPUSH
22058: CALL_OW 274
22062: ST_TO_ADDR
// if not pom then
22063: LD_VAR 0 3
22067: NOT
22068: IFFALSE 22072
// exit ;
22070: GO 22246
// btype := GetBType ( building ) ;
22072: LD_ADDR_VAR 0 5
22076: PUSH
22077: LD_VAR 0 1
22081: PPUSH
22082: CALL_OW 266
22086: ST_TO_ADDR
// if btype = b_armoury then
22087: LD_VAR 0 5
22091: PUSH
22092: LD_INT 4
22094: EQUAL
22095: IFFALSE 22105
// btype := b_barracks ;
22097: LD_ADDR_VAR 0 5
22101: PUSH
22102: LD_INT 5
22104: ST_TO_ADDR
// if btype = b_depot then
22105: LD_VAR 0 5
22109: PUSH
22110: LD_INT 0
22112: EQUAL
22113: IFFALSE 22123
// btype := b_warehouse ;
22115: LD_ADDR_VAR 0 5
22119: PUSH
22120: LD_INT 1
22122: ST_TO_ADDR
// if btype = b_workshop then
22123: LD_VAR 0 5
22127: PUSH
22128: LD_INT 2
22130: EQUAL
22131: IFFALSE 22141
// btype := b_factory ;
22133: LD_ADDR_VAR 0 5
22137: PUSH
22138: LD_INT 3
22140: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22141: LD_ADDR_VAR 0 4
22145: PUSH
22146: LD_VAR 0 5
22150: PPUSH
22151: LD_VAR 0 1
22155: PPUSH
22156: CALL_OW 248
22160: PPUSH
22161: CALL_OW 450
22165: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_VAR 0 3
22175: PPUSH
22176: LD_INT 1
22178: PPUSH
22179: CALL_OW 275
22183: PUSH
22184: LD_VAR 0 4
22188: PUSH
22189: LD_INT 1
22191: ARRAY
22192: GREATEREQUAL
22193: IFFALSE 22219
22195: PUSH
22196: LD_VAR 0 3
22200: PPUSH
22201: LD_INT 2
22203: PPUSH
22204: CALL_OW 275
22208: PUSH
22209: LD_VAR 0 4
22213: PUSH
22214: LD_INT 2
22216: ARRAY
22217: GREATEREQUAL
22218: AND
22219: IFFALSE 22245
22221: PUSH
22222: LD_VAR 0 3
22226: PPUSH
22227: LD_INT 3
22229: PPUSH
22230: CALL_OW 275
22234: PUSH
22235: LD_VAR 0 4
22239: PUSH
22240: LD_INT 3
22242: ARRAY
22243: GREATEREQUAL
22244: AND
22245: ST_TO_ADDR
// end ;
22246: LD_VAR 0 2
22250: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22251: LD_INT 0
22253: PPUSH
22254: PPUSH
22255: PPUSH
// pom := GetBase ( building ) ;
22256: LD_ADDR_VAR 0 4
22260: PUSH
22261: LD_VAR 0 1
22265: PPUSH
22266: CALL_OW 274
22270: ST_TO_ADDR
// if not pom then
22271: LD_VAR 0 4
22275: NOT
22276: IFFALSE 22280
// exit ;
22278: GO 22385
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22280: LD_ADDR_VAR 0 5
22284: PUSH
22285: LD_VAR 0 2
22289: PPUSH
22290: LD_VAR 0 1
22294: PPUSH
22295: CALL_OW 248
22299: PPUSH
22300: CALL_OW 450
22304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22305: LD_ADDR_VAR 0 3
22309: PUSH
22310: LD_VAR 0 4
22314: PPUSH
22315: LD_INT 1
22317: PPUSH
22318: CALL_OW 275
22322: PUSH
22323: LD_VAR 0 5
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: GREATEREQUAL
22332: IFFALSE 22358
22334: PUSH
22335: LD_VAR 0 4
22339: PPUSH
22340: LD_INT 2
22342: PPUSH
22343: CALL_OW 275
22347: PUSH
22348: LD_VAR 0 5
22352: PUSH
22353: LD_INT 2
22355: ARRAY
22356: GREATEREQUAL
22357: AND
22358: IFFALSE 22384
22360: PUSH
22361: LD_VAR 0 4
22365: PPUSH
22366: LD_INT 3
22368: PPUSH
22369: CALL_OW 275
22373: PUSH
22374: LD_VAR 0 5
22378: PUSH
22379: LD_INT 3
22381: ARRAY
22382: GREATEREQUAL
22383: AND
22384: ST_TO_ADDR
// end ;
22385: LD_VAR 0 3
22389: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22390: LD_INT 0
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
22398: PPUSH
22399: PPUSH
22400: PPUSH
22401: PPUSH
22402: PPUSH
// result := false ;
22403: LD_ADDR_VAR 0 8
22407: PUSH
22408: LD_INT 0
22410: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22411: LD_VAR 0 5
22415: NOT
22416: IFTRUE 22425
22418: PUSH
22419: LD_VAR 0 1
22423: NOT
22424: OR
22425: IFTRUE 22434
22427: PUSH
22428: LD_VAR 0 2
22432: NOT
22433: OR
22434: IFTRUE 22443
22436: PUSH
22437: LD_VAR 0 3
22441: NOT
22442: OR
22443: IFFALSE 22447
// exit ;
22445: GO 23273
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22447: LD_ADDR_VAR 0 14
22451: PUSH
22452: LD_VAR 0 1
22456: PPUSH
22457: LD_VAR 0 2
22461: PPUSH
22462: LD_VAR 0 3
22466: PPUSH
22467: LD_VAR 0 4
22471: PPUSH
22472: LD_VAR 0 5
22476: PUSH
22477: LD_INT 1
22479: ARRAY
22480: PPUSH
22481: CALL_OW 248
22485: PPUSH
22486: LD_INT 0
22488: PPUSH
22489: CALL 24554 0 6
22493: ST_TO_ADDR
// if not hexes then
22494: LD_VAR 0 14
22498: NOT
22499: IFFALSE 22503
// exit ;
22501: GO 23273
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22503: LD_ADDR_VAR 0 17
22507: PUSH
22508: LD_VAR 0 5
22512: PPUSH
22513: LD_INT 22
22515: PUSH
22516: LD_VAR 0 13
22520: PPUSH
22521: CALL_OW 255
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 2
22532: PUSH
22533: LD_INT 30
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 30
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: LIST
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PPUSH
22562: CALL_OW 72
22566: ST_TO_ADDR
// for i = 1 to hexes do
22567: LD_ADDR_VAR 0 9
22571: PUSH
22572: DOUBLE
22573: LD_INT 1
22575: DEC
22576: ST_TO_ADDR
22577: LD_VAR 0 14
22581: PUSH
22582: FOR_TO
22583: IFFALSE 23271
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22585: LD_ADDR_VAR 0 13
22589: PUSH
22590: LD_VAR 0 14
22594: PUSH
22595: LD_VAR 0 9
22599: ARRAY
22600: PUSH
22601: LD_INT 1
22603: ARRAY
22604: PPUSH
22605: LD_VAR 0 14
22609: PUSH
22610: LD_VAR 0 9
22614: ARRAY
22615: PUSH
22616: LD_INT 2
22618: ARRAY
22619: PPUSH
22620: CALL_OW 428
22624: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22625: LD_VAR 0 14
22629: PUSH
22630: LD_VAR 0 9
22634: ARRAY
22635: PUSH
22636: LD_INT 1
22638: ARRAY
22639: PPUSH
22640: LD_VAR 0 14
22644: PUSH
22645: LD_VAR 0 9
22649: ARRAY
22650: PUSH
22651: LD_INT 2
22653: ARRAY
22654: PPUSH
22655: CALL_OW 351
22659: IFTRUE 22698
22661: PUSH
22662: LD_VAR 0 14
22666: PUSH
22667: LD_VAR 0 9
22671: ARRAY
22672: PUSH
22673: LD_INT 1
22675: ARRAY
22676: PPUSH
22677: LD_VAR 0 14
22681: PUSH
22682: LD_VAR 0 9
22686: ARRAY
22687: PUSH
22688: LD_INT 2
22690: ARRAY
22691: PPUSH
22692: CALL_OW 488
22696: NOT
22697: OR
22698: IFTRUE 22715
22700: PUSH
22701: LD_VAR 0 13
22705: PPUSH
22706: CALL_OW 247
22710: PUSH
22711: LD_INT 3
22713: EQUAL
22714: OR
22715: IFFALSE 22721
// exit ;
22717: POP
22718: POP
22719: GO 23273
// if not tmp then
22721: LD_VAR 0 13
22725: NOT
22726: IFFALSE 22730
// continue ;
22728: GO 22582
// result := true ;
22730: LD_ADDR_VAR 0 8
22734: PUSH
22735: LD_INT 1
22737: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22738: LD_VAR 0 6
22742: IFFALSE 22759
22744: PUSH
22745: LD_VAR 0 13
22749: PPUSH
22750: CALL_OW 247
22754: PUSH
22755: LD_INT 2
22757: EQUAL
22758: AND
22759: IFFALSE 22776
22761: PUSH
22762: LD_VAR 0 13
22766: PPUSH
22767: CALL_OW 263
22771: PUSH
22772: LD_INT 1
22774: EQUAL
22775: AND
22776: IFFALSE 22940
// begin if IsDrivenBy ( tmp ) then
22778: LD_VAR 0 13
22782: PPUSH
22783: CALL_OW 311
22787: IFFALSE 22791
// continue ;
22789: GO 22582
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22791: LD_VAR 0 6
22795: PPUSH
22796: LD_INT 3
22798: PUSH
22799: LD_INT 60
22801: PUSH
22802: EMPTY
22803: LIST
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 3
22811: PUSH
22812: LD_INT 55
22814: PUSH
22815: EMPTY
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PPUSH
22826: CALL_OW 72
22830: IFFALSE 22938
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22832: LD_ADDR_VAR 0 18
22836: PUSH
22837: LD_VAR 0 6
22841: PPUSH
22842: LD_INT 3
22844: PUSH
22845: LD_INT 60
22847: PUSH
22848: EMPTY
22849: LIST
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 3
22857: PUSH
22858: LD_INT 55
22860: PUSH
22861: EMPTY
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PPUSH
22872: CALL_OW 72
22876: PUSH
22877: LD_INT 1
22879: ARRAY
22880: ST_TO_ADDR
// if IsInUnit ( driver ) then
22881: LD_VAR 0 18
22885: PPUSH
22886: CALL_OW 310
22890: IFFALSE 22901
// ComExit ( driver ) ;
22892: LD_VAR 0 18
22896: PPUSH
22897: CALL 48544 0 1
// AddComEnterUnit ( driver , tmp ) ;
22901: LD_VAR 0 18
22905: PPUSH
22906: LD_VAR 0 13
22910: PPUSH
22911: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22915: LD_VAR 0 18
22919: PPUSH
22920: LD_VAR 0 7
22924: PPUSH
22925: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22929: LD_VAR 0 18
22933: PPUSH
22934: CALL_OW 181
// end ; continue ;
22938: GO 22582
// end ; if not cleaners or not tmp in cleaners then
22940: LD_VAR 0 6
22944: NOT
22945: IFTRUE 22960
22947: PUSH
22948: LD_VAR 0 13
22952: PUSH
22953: LD_VAR 0 6
22957: IN
22958: NOT
22959: OR
22960: IFFALSE 23269
// begin if dep then
22962: LD_VAR 0 17
22966: IFFALSE 23102
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22968: LD_ADDR_VAR 0 16
22972: PUSH
22973: LD_VAR 0 17
22977: PUSH
22978: LD_INT 1
22980: ARRAY
22981: PPUSH
22982: CALL_OW 250
22986: PPUSH
22987: LD_VAR 0 17
22991: PUSH
22992: LD_INT 1
22994: ARRAY
22995: PPUSH
22996: CALL_OW 254
23000: PPUSH
23001: LD_INT 5
23003: PPUSH
23004: CALL_OW 272
23008: PUSH
23009: LD_VAR 0 17
23013: PUSH
23014: LD_INT 1
23016: ARRAY
23017: PPUSH
23018: CALL_OW 251
23022: PPUSH
23023: LD_VAR 0 17
23027: PUSH
23028: LD_INT 1
23030: ARRAY
23031: PPUSH
23032: CALL_OW 254
23036: PPUSH
23037: LD_INT 5
23039: PPUSH
23040: CALL_OW 273
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23049: LD_VAR 0 16
23053: PUSH
23054: LD_INT 1
23056: ARRAY
23057: PPUSH
23058: LD_VAR 0 16
23062: PUSH
23063: LD_INT 2
23065: ARRAY
23066: PPUSH
23067: CALL_OW 488
23071: IFFALSE 23102
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23073: LD_VAR 0 13
23077: PPUSH
23078: LD_VAR 0 16
23082: PUSH
23083: LD_INT 1
23085: ARRAY
23086: PPUSH
23087: LD_VAR 0 16
23091: PUSH
23092: LD_INT 2
23094: ARRAY
23095: PPUSH
23096: CALL_OW 111
// continue ;
23100: GO 22582
// end ; end ; r := GetDir ( tmp ) ;
23102: LD_ADDR_VAR 0 15
23106: PUSH
23107: LD_VAR 0 13
23111: PPUSH
23112: CALL_OW 254
23116: ST_TO_ADDR
// if r = 5 then
23117: LD_VAR 0 15
23121: PUSH
23122: LD_INT 5
23124: EQUAL
23125: IFFALSE 23135
// r := 0 ;
23127: LD_ADDR_VAR 0 15
23131: PUSH
23132: LD_INT 0
23134: ST_TO_ADDR
// for j = r to 5 do
23135: LD_ADDR_VAR 0 10
23139: PUSH
23140: DOUBLE
23141: LD_VAR 0 15
23145: DEC
23146: ST_TO_ADDR
23147: LD_INT 5
23149: PUSH
23150: FOR_TO
23151: IFFALSE 23267
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23153: LD_ADDR_VAR 0 11
23157: PUSH
23158: LD_VAR 0 13
23162: PPUSH
23163: CALL_OW 250
23167: PPUSH
23168: LD_VAR 0 10
23172: PPUSH
23173: LD_INT 2
23175: PPUSH
23176: CALL_OW 272
23180: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23181: LD_ADDR_VAR 0 12
23185: PUSH
23186: LD_VAR 0 13
23190: PPUSH
23191: CALL_OW 251
23195: PPUSH
23196: LD_VAR 0 10
23200: PPUSH
23201: LD_INT 2
23203: PPUSH
23204: CALL_OW 273
23208: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23209: LD_VAR 0 11
23213: PPUSH
23214: LD_VAR 0 12
23218: PPUSH
23219: CALL_OW 488
23223: IFFALSE 23242
23225: PUSH
23226: LD_VAR 0 11
23230: PPUSH
23231: LD_VAR 0 12
23235: PPUSH
23236: CALL_OW 428
23240: NOT
23241: AND
23242: IFFALSE 23265
// begin ComMoveXY ( tmp , _x , _y ) ;
23244: LD_VAR 0 13
23248: PPUSH
23249: LD_VAR 0 11
23253: PPUSH
23254: LD_VAR 0 12
23258: PPUSH
23259: CALL_OW 111
// break ;
23263: GO 23267
// end ; end ;
23265: GO 23150
23267: POP
23268: POP
// end ; end ;
23269: GO 22582
23271: POP
23272: POP
// end ;
23273: LD_VAR 0 8
23277: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23278: LD_INT 0
23280: PPUSH
// result := true ;
23281: LD_ADDR_VAR 0 3
23285: PUSH
23286: LD_INT 1
23288: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23289: LD_VAR 0 2
23293: PUSH
23294: LD_INT 24
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23308
23300: LD_INT 33
23302: DOUBLE
23303: EQUAL
23304: IFTRUE 23308
23306: GO 23333
23308: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23309: LD_ADDR_VAR 0 3
23313: PUSH
23314: LD_INT 32
23316: PPUSH
23317: LD_VAR 0 1
23321: PPUSH
23322: CALL_OW 321
23326: PUSH
23327: LD_INT 2
23329: EQUAL
23330: ST_TO_ADDR
23331: GO 23649
23333: LD_INT 20
23335: DOUBLE
23336: EQUAL
23337: IFTRUE 23341
23339: GO 23366
23341: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23342: LD_ADDR_VAR 0 3
23346: PUSH
23347: LD_INT 6
23349: PPUSH
23350: LD_VAR 0 1
23354: PPUSH
23355: CALL_OW 321
23359: PUSH
23360: LD_INT 2
23362: EQUAL
23363: ST_TO_ADDR
23364: GO 23649
23366: LD_INT 22
23368: DOUBLE
23369: EQUAL
23370: IFTRUE 23380
23372: LD_INT 36
23374: DOUBLE
23375: EQUAL
23376: IFTRUE 23380
23378: GO 23405
23380: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23381: LD_ADDR_VAR 0 3
23385: PUSH
23386: LD_INT 15
23388: PPUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 321
23398: PUSH
23399: LD_INT 2
23401: EQUAL
23402: ST_TO_ADDR
23403: GO 23649
23405: LD_INT 30
23407: DOUBLE
23408: EQUAL
23409: IFTRUE 23413
23411: GO 23438
23413: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23414: LD_ADDR_VAR 0 3
23418: PUSH
23419: LD_INT 20
23421: PPUSH
23422: LD_VAR 0 1
23426: PPUSH
23427: CALL_OW 321
23431: PUSH
23432: LD_INT 2
23434: EQUAL
23435: ST_TO_ADDR
23436: GO 23649
23438: LD_INT 28
23440: DOUBLE
23441: EQUAL
23442: IFTRUE 23452
23444: LD_INT 21
23446: DOUBLE
23447: EQUAL
23448: IFTRUE 23452
23450: GO 23477
23452: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23453: LD_ADDR_VAR 0 3
23457: PUSH
23458: LD_INT 21
23460: PPUSH
23461: LD_VAR 0 1
23465: PPUSH
23466: CALL_OW 321
23470: PUSH
23471: LD_INT 2
23473: EQUAL
23474: ST_TO_ADDR
23475: GO 23649
23477: LD_INT 16
23479: DOUBLE
23480: EQUAL
23481: IFTRUE 23485
23483: GO 23510
23485: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23486: LD_ADDR_VAR 0 3
23490: PUSH
23491: LD_INT 84
23493: PPUSH
23494: LD_VAR 0 1
23498: PPUSH
23499: CALL_OW 321
23503: PUSH
23504: LD_INT 2
23506: EQUAL
23507: ST_TO_ADDR
23508: GO 23649
23510: LD_INT 19
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23524
23516: LD_INT 23
23518: DOUBLE
23519: EQUAL
23520: IFTRUE 23524
23522: GO 23549
23524: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23525: LD_ADDR_VAR 0 3
23529: PUSH
23530: LD_INT 83
23532: PPUSH
23533: LD_VAR 0 1
23537: PPUSH
23538: CALL_OW 321
23542: PUSH
23543: LD_INT 2
23545: EQUAL
23546: ST_TO_ADDR
23547: GO 23649
23549: LD_INT 17
23551: DOUBLE
23552: EQUAL
23553: IFTRUE 23557
23555: GO 23582
23557: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23558: LD_ADDR_VAR 0 3
23562: PUSH
23563: LD_INT 39
23565: PPUSH
23566: LD_VAR 0 1
23570: PPUSH
23571: CALL_OW 321
23575: PUSH
23576: LD_INT 2
23578: EQUAL
23579: ST_TO_ADDR
23580: GO 23649
23582: LD_INT 18
23584: DOUBLE
23585: EQUAL
23586: IFTRUE 23590
23588: GO 23615
23590: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23591: LD_ADDR_VAR 0 3
23595: PUSH
23596: LD_INT 40
23598: PPUSH
23599: LD_VAR 0 1
23603: PPUSH
23604: CALL_OW 321
23608: PUSH
23609: LD_INT 2
23611: EQUAL
23612: ST_TO_ADDR
23613: GO 23649
23615: LD_INT 27
23617: DOUBLE
23618: EQUAL
23619: IFTRUE 23623
23621: GO 23648
23623: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23624: LD_ADDR_VAR 0 3
23628: PUSH
23629: LD_INT 35
23631: PPUSH
23632: LD_VAR 0 1
23636: PPUSH
23637: CALL_OW 321
23641: PUSH
23642: LD_INT 2
23644: EQUAL
23645: ST_TO_ADDR
23646: GO 23649
23648: POP
// end ;
23649: LD_VAR 0 3
23653: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23654: LD_INT 0
23656: PPUSH
23657: PPUSH
23658: PPUSH
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
23663: PPUSH
23664: PPUSH
23665: PPUSH
23666: PPUSH
// result := false ;
23667: LD_ADDR_VAR 0 6
23671: PUSH
23672: LD_INT 0
23674: ST_TO_ADDR
// if btype = b_depot then
23675: LD_VAR 0 2
23679: PUSH
23680: LD_INT 0
23682: EQUAL
23683: IFFALSE 23695
// begin result := true ;
23685: LD_ADDR_VAR 0 6
23689: PUSH
23690: LD_INT 1
23692: ST_TO_ADDR
// exit ;
23693: GO 24549
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23695: LD_VAR 0 1
23699: NOT
23700: IFTRUE 23725
23702: PUSH
23703: LD_VAR 0 1
23707: PPUSH
23708: CALL_OW 266
23712: PUSH
23713: LD_INT 0
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: IN
23723: NOT
23724: OR
23725: IFTRUE 23734
23727: PUSH
23728: LD_VAR 0 2
23732: NOT
23733: OR
23734: IFTRUE 23770
23736: PUSH
23737: LD_VAR 0 5
23741: PUSH
23742: LD_INT 0
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: LD_INT 3
23753: PUSH
23754: LD_INT 4
23756: PUSH
23757: LD_INT 5
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: IN
23768: NOT
23769: OR
23770: IFTRUE 23789
23772: PUSH
23773: LD_VAR 0 3
23777: PPUSH
23778: LD_VAR 0 4
23782: PPUSH
23783: CALL_OW 488
23787: NOT
23788: OR
23789: IFFALSE 23793
// exit ;
23791: GO 24549
// side := GetSide ( depot ) ;
23793: LD_ADDR_VAR 0 9
23797: PUSH
23798: LD_VAR 0 1
23802: PPUSH
23803: CALL_OW 255
23807: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23808: LD_VAR 0 9
23812: PPUSH
23813: LD_VAR 0 2
23817: PPUSH
23818: CALL 23278 0 2
23822: NOT
23823: IFFALSE 23827
// exit ;
23825: GO 24549
// pom := GetBase ( depot ) ;
23827: LD_ADDR_VAR 0 10
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 274
23841: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23842: LD_ADDR_VAR 0 11
23846: PUSH
23847: LD_VAR 0 2
23851: PPUSH
23852: LD_VAR 0 1
23856: PPUSH
23857: CALL_OW 248
23861: PPUSH
23862: CALL_OW 450
23866: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23867: LD_VAR 0 10
23871: PPUSH
23872: LD_INT 1
23874: PPUSH
23875: CALL_OW 275
23879: PUSH
23880: LD_VAR 0 11
23884: PUSH
23885: LD_INT 1
23887: ARRAY
23888: GREATEREQUAL
23889: IFFALSE 23915
23891: PUSH
23892: LD_VAR 0 10
23896: PPUSH
23897: LD_INT 2
23899: PPUSH
23900: CALL_OW 275
23904: PUSH
23905: LD_VAR 0 11
23909: PUSH
23910: LD_INT 2
23912: ARRAY
23913: GREATEREQUAL
23914: AND
23915: IFFALSE 23941
23917: PUSH
23918: LD_VAR 0 10
23922: PPUSH
23923: LD_INT 3
23925: PPUSH
23926: CALL_OW 275
23930: PUSH
23931: LD_VAR 0 11
23935: PUSH
23936: LD_INT 3
23938: ARRAY
23939: GREATEREQUAL
23940: AND
23941: NOT
23942: IFFALSE 23946
// exit ;
23944: GO 24549
// if GetBType ( depot ) = b_depot then
23946: LD_VAR 0 1
23950: PPUSH
23951: CALL_OW 266
23955: PUSH
23956: LD_INT 0
23958: EQUAL
23959: IFFALSE 23971
// dist := 28 else
23961: LD_ADDR_VAR 0 14
23965: PUSH
23966: LD_INT 28
23968: ST_TO_ADDR
23969: GO 23979
// dist := 36 ;
23971: LD_ADDR_VAR 0 14
23975: PUSH
23976: LD_INT 36
23978: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23979: LD_VAR 0 1
23983: PPUSH
23984: LD_VAR 0 3
23988: PPUSH
23989: LD_VAR 0 4
23993: PPUSH
23994: CALL_OW 297
23998: PUSH
23999: LD_VAR 0 14
24003: GREATER
24004: IFFALSE 24008
// exit ;
24006: GO 24549
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24008: LD_ADDR_VAR 0 12
24012: PUSH
24013: LD_VAR 0 2
24017: PPUSH
24018: LD_VAR 0 3
24022: PPUSH
24023: LD_VAR 0 4
24027: PPUSH
24028: LD_VAR 0 5
24032: PPUSH
24033: LD_VAR 0 1
24037: PPUSH
24038: CALL_OW 248
24042: PPUSH
24043: LD_INT 0
24045: PPUSH
24046: CALL 24554 0 6
24050: ST_TO_ADDR
// if not hexes then
24051: LD_VAR 0 12
24055: NOT
24056: IFFALSE 24060
// exit ;
24058: GO 24549
// hex := GetHexInfo ( x , y ) ;
24060: LD_ADDR_VAR 0 15
24064: PUSH
24065: LD_VAR 0 3
24069: PPUSH
24070: LD_VAR 0 4
24074: PPUSH
24075: CALL_OW 546
24079: ST_TO_ADDR
// if hex [ 1 ] then
24080: LD_VAR 0 15
24084: PUSH
24085: LD_INT 1
24087: ARRAY
24088: IFFALSE 24092
// exit ;
24090: GO 24549
// height := hex [ 2 ] ;
24092: LD_ADDR_VAR 0 13
24096: PUSH
24097: LD_VAR 0 15
24101: PUSH
24102: LD_INT 2
24104: ARRAY
24105: ST_TO_ADDR
// for i = 1 to hexes do
24106: LD_ADDR_VAR 0 7
24110: PUSH
24111: DOUBLE
24112: LD_INT 1
24114: DEC
24115: ST_TO_ADDR
24116: LD_VAR 0 12
24120: PUSH
24121: FOR_TO
24122: IFFALSE 24466
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24124: LD_VAR 0 12
24128: PUSH
24129: LD_VAR 0 7
24133: ARRAY
24134: PUSH
24135: LD_INT 1
24137: ARRAY
24138: PPUSH
24139: LD_VAR 0 12
24143: PUSH
24144: LD_VAR 0 7
24148: ARRAY
24149: PUSH
24150: LD_INT 2
24152: ARRAY
24153: PPUSH
24154: CALL_OW 488
24158: NOT
24159: IFTRUE 24201
24161: PUSH
24162: LD_VAR 0 12
24166: PUSH
24167: LD_VAR 0 7
24171: ARRAY
24172: PUSH
24173: LD_INT 1
24175: ARRAY
24176: PPUSH
24177: LD_VAR 0 12
24181: PUSH
24182: LD_VAR 0 7
24186: ARRAY
24187: PUSH
24188: LD_INT 2
24190: ARRAY
24191: PPUSH
24192: CALL_OW 428
24196: PUSH
24197: LD_INT 0
24199: GREATER
24200: OR
24201: IFTRUE 24239
24203: PUSH
24204: LD_VAR 0 12
24208: PUSH
24209: LD_VAR 0 7
24213: ARRAY
24214: PUSH
24215: LD_INT 1
24217: ARRAY
24218: PPUSH
24219: LD_VAR 0 12
24223: PUSH
24224: LD_VAR 0 7
24228: ARRAY
24229: PUSH
24230: LD_INT 2
24232: ARRAY
24233: PPUSH
24234: CALL_OW 351
24238: OR
24239: IFFALSE 24245
// exit ;
24241: POP
24242: POP
24243: GO 24549
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24245: LD_ADDR_VAR 0 8
24249: PUSH
24250: LD_VAR 0 12
24254: PUSH
24255: LD_VAR 0 7
24259: ARRAY
24260: PUSH
24261: LD_INT 1
24263: ARRAY
24264: PPUSH
24265: LD_VAR 0 12
24269: PUSH
24270: LD_VAR 0 7
24274: ARRAY
24275: PUSH
24276: LD_INT 2
24278: ARRAY
24279: PPUSH
24280: CALL_OW 546
24284: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24285: LD_VAR 0 8
24289: PUSH
24290: LD_INT 1
24292: ARRAY
24293: IFTRUE 24315
24295: PUSH
24296: LD_VAR 0 8
24300: PUSH
24301: LD_INT 2
24303: ARRAY
24304: PUSH
24305: LD_VAR 0 13
24309: PUSH
24310: LD_INT 2
24312: PLUS
24313: GREATER
24314: OR
24315: IFTRUE 24337
24317: PUSH
24318: LD_VAR 0 8
24322: PUSH
24323: LD_INT 2
24325: ARRAY
24326: PUSH
24327: LD_VAR 0 13
24331: PUSH
24332: LD_INT 2
24334: MINUS
24335: LESS
24336: OR
24337: IFTRUE 24405
24339: PUSH
24340: LD_VAR 0 8
24344: PUSH
24345: LD_INT 3
24347: ARRAY
24348: PUSH
24349: LD_INT 0
24351: PUSH
24352: LD_INT 8
24354: PUSH
24355: LD_INT 9
24357: PUSH
24358: LD_INT 10
24360: PUSH
24361: LD_INT 11
24363: PUSH
24364: LD_INT 12
24366: PUSH
24367: LD_INT 13
24369: PUSH
24370: LD_INT 16
24372: PUSH
24373: LD_INT 17
24375: PUSH
24376: LD_INT 18
24378: PUSH
24379: LD_INT 19
24381: PUSH
24382: LD_INT 20
24384: PUSH
24385: LD_INT 21
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: IN
24403: NOT
24404: OR
24405: IFTRUE 24418
24407: PUSH
24408: LD_VAR 0 8
24412: PUSH
24413: LD_INT 5
24415: ARRAY
24416: NOT
24417: OR
24418: IFTRUE 24458
24420: PUSH
24421: LD_VAR 0 8
24425: PUSH
24426: LD_INT 6
24428: ARRAY
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 2
24435: PUSH
24436: LD_INT 7
24438: PUSH
24439: LD_INT 9
24441: PUSH
24442: LD_INT 10
24444: PUSH
24445: LD_INT 11
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: IN
24456: NOT
24457: OR
24458: IFFALSE 24464
// exit ;
24460: POP
24461: POP
24462: GO 24549
// end ;
24464: GO 24121
24466: POP
24467: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24468: LD_VAR 0 9
24472: PPUSH
24473: LD_VAR 0 3
24477: PPUSH
24478: LD_VAR 0 4
24482: PPUSH
24483: LD_INT 20
24485: PPUSH
24486: CALL 16368 0 4
24490: PUSH
24491: LD_INT 4
24493: ARRAY
24494: IFFALSE 24498
// exit ;
24496: GO 24549
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24498: LD_VAR 0 2
24502: PUSH
24503: LD_INT 29
24505: PUSH
24506: LD_INT 30
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: IN
24513: IFFALSE 24537
24515: PUSH
24516: LD_VAR 0 3
24520: PPUSH
24521: LD_VAR 0 4
24525: PPUSH
24526: LD_VAR 0 9
24530: PPUSH
24531: CALL_OW 440
24535: NOT
24536: AND
24537: IFFALSE 24541
// exit ;
24539: GO 24549
// result := true ;
24541: LD_ADDR_VAR 0 6
24545: PUSH
24546: LD_INT 1
24548: ST_TO_ADDR
// end ;
24549: LD_VAR 0 6
24553: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24554: LD_INT 0
24556: PPUSH
24557: PPUSH
24558: PPUSH
24559: PPUSH
24560: PPUSH
24561: PPUSH
24562: PPUSH
24563: PPUSH
24564: PPUSH
24565: PPUSH
24566: PPUSH
24567: PPUSH
24568: PPUSH
24569: PPUSH
24570: PPUSH
24571: PPUSH
24572: PPUSH
24573: PPUSH
24574: PPUSH
24575: PPUSH
24576: PPUSH
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
24592: PPUSH
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
24609: PPUSH
24610: PPUSH
24611: PPUSH
24612: PPUSH
24613: PPUSH
// result = [ ] ;
24614: LD_ADDR_VAR 0 7
24618: PUSH
24619: EMPTY
24620: ST_TO_ADDR
// temp_list = [ ] ;
24621: LD_ADDR_VAR 0 9
24625: PUSH
24626: EMPTY
24627: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24628: LD_VAR 0 4
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: LD_INT 3
24644: PUSH
24645: LD_INT 4
24647: PUSH
24648: LD_INT 5
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: IN
24659: NOT
24660: IFTRUE 24703
24662: PUSH
24663: LD_VAR 0 1
24667: PUSH
24668: LD_INT 0
24670: PUSH
24671: LD_INT 1
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: IN
24678: IFFALSE 24702
24680: PUSH
24681: LD_VAR 0 5
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: LD_INT 2
24691: PUSH
24692: LD_INT 3
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: LIST
24699: IN
24700: NOT
24701: AND
24702: OR
24703: IFFALSE 24707
// exit ;
24705: GO 43106
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24707: LD_VAR 0 1
24711: PUSH
24712: LD_INT 6
24714: PUSH
24715: LD_INT 7
24717: PUSH
24718: LD_INT 8
24720: PUSH
24721: LD_INT 13
24723: PUSH
24724: LD_INT 12
24726: PUSH
24727: LD_INT 15
24729: PUSH
24730: LD_INT 11
24732: PUSH
24733: LD_INT 14
24735: PUSH
24736: LD_INT 10
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: IN
24750: IFFALSE 24760
// btype = b_lab ;
24752: LD_ADDR_VAR 0 1
24756: PUSH
24757: LD_INT 6
24759: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24760: LD_VAR 0 6
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: LIST
24778: IN
24779: NOT
24780: IFTRUE 24848
24782: PUSH
24783: LD_VAR 0 1
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: LD_INT 2
24796: PUSH
24797: LD_INT 3
24799: PUSH
24800: LD_INT 6
24802: PUSH
24803: LD_INT 36
24805: PUSH
24806: LD_INT 4
24808: PUSH
24809: LD_INT 5
24811: PUSH
24812: LD_INT 31
24814: PUSH
24815: LD_INT 32
24817: PUSH
24818: LD_INT 33
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: IN
24834: NOT
24835: IFFALSE 24847
24837: PUSH
24838: LD_VAR 0 6
24842: PUSH
24843: LD_INT 1
24845: EQUAL
24846: AND
24847: OR
24848: IFTRUE 24880
24850: PUSH
24851: LD_VAR 0 1
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: LD_INT 3
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: IN
24866: NOT
24867: IFFALSE 24879
24869: PUSH
24870: LD_VAR 0 6
24874: PUSH
24875: LD_INT 2
24877: EQUAL
24878: AND
24879: OR
24880: IFFALSE 24890
// mode = 0 ;
24882: LD_ADDR_VAR 0 6
24886: PUSH
24887: LD_INT 0
24889: ST_TO_ADDR
// case mode of 0 :
24890: LD_VAR 0 6
24894: PUSH
24895: LD_INT 0
24897: DOUBLE
24898: EQUAL
24899: IFTRUE 24903
24901: GO 36356
24903: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24904: LD_ADDR_VAR 0 11
24908: PUSH
24909: LD_INT 0
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 0
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 1
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: LD_INT 1
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: NEG
24974: PUSH
24975: LD_INT 1
24977: NEG
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: LD_INT 2
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: LD_INT 2
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: PUSH
25020: LD_INT 2
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 0
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: LD_INT 3
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: LD_INT 3
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: NEG
25071: PUSH
25072: LD_INT 2
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25097: LD_ADDR_VAR 0 12
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: LD_INT 0
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 2
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 2
25220: NEG
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 2
25231: NEG
25232: PUSH
25233: LD_INT 1
25235: NEG
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 2
25243: NEG
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 3
25254: NEG
25255: PUSH
25256: LD_INT 0
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 3
25265: NEG
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25293: LD_ADDR_VAR 0 13
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: NEG
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: LD_INT 2
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 1
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 2
25396: PUSH
25397: LD_INT 2
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: LD_INT 2
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 2
25416: NEG
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 2
25428: NEG
25429: PUSH
25430: LD_INT 2
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 2
25440: NEG
25441: PUSH
25442: LD_INT 3
25444: NEG
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 3
25452: NEG
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 3
25464: NEG
25465: PUSH
25466: LD_INT 3
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25492: LD_ADDR_VAR 0 14
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 1
25550: NEG
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: LD_INT 2
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 2
25588: NEG
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: LD_INT 2
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: LD_INT 3
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: LD_INT 3
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25688: LD_ADDR_VAR 0 15
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 0
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 1
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 1
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: NEG
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: NEG
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: LD_INT 1
25826: NEG
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 3
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 3
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25881: LD_ADDR_VAR 0 16
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 1
25901: NEG
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: LD_INT 1
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: LD_INT 1
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 2
26016: NEG
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 3
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 3
26038: PUSH
26039: LD_INT 3
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: LD_INT 3
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26074: LD_ADDR_VAR 0 17
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 1
26155: NEG
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 0
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 2
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 2
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 1
26239: NEG
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 2
26250: NEG
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 2
26261: NEG
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: LD_INT 2
26277: NEG
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26304: LD_ADDR_VAR 0 18
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: NEG
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: LD_INT 2
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: LD_INT 2
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 2
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: LD_INT 2
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: LD_INT 2
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: LD_INT 1
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 2
26480: NEG
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: NEG
26504: PUSH
26505: LD_INT 2
26507: NEG
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26534: LD_ADDR_VAR 0 19
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 2
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: LD_INT 2
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 2
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: LD_INT 2
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 2
26710: NEG
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: NEG
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26764: LD_ADDR_VAR 0 20
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 2
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: LD_INT 2
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 2
26940: NEG
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 2
26951: NEG
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: NEG
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26994: LD_ADDR_VAR 0 21
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: LD_INT 1
27067: NEG
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 2
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: LD_INT 2
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: LD_INT 2
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: LD_INT 2
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 2
27170: NEG
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 2
27181: NEG
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: NEG
27194: PUSH
27195: LD_INT 2
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27224: LD_ADDR_VAR 0 22
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 1
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: LD_INT 2
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: LD_INT 2
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 2
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: LD_INT 2
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 2
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 2
27400: NEG
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 2
27411: NEG
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27454: LD_ADDR_VAR 0 23
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: LD_INT 1
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: LD_INT 2
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 2
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 2
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 2
27589: PUSH
27590: LD_INT 2
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 2
27630: NEG
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 2
27641: NEG
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 2
27653: NEG
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 2
27665: NEG
27666: PUSH
27667: LD_INT 3
27669: NEG
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: LD_INT 3
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 2
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 2
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27734: LD_ADDR_VAR 0 24
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: LD_INT 1
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: NEG
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: PUSH
27817: LD_INT 2
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: LD_INT 2
27830: NEG
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: LD_INT 2
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: LD_INT 2
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 2
27910: NEG
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 2
27933: NEG
27934: PUSH
27935: LD_INT 2
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: LD_INT 2
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 3
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 3
27977: PUSH
27978: LD_INT 2
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28010: LD_ADDR_VAR 0 25
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 1
28079: NEG
28080: PUSH
28081: LD_INT 1
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 2
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 2
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 2
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 2
28186: NEG
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 2
28197: NEG
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 2
28209: NEG
28210: PUSH
28211: LD_INT 2
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 3
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 3
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 3
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28284: LD_ADDR_VAR 0 26
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: LD_INT 3
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 2
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 2
28526: NEG
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28560: LD_ADDR_VAR 0 27
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 1
28629: NEG
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: LD_INT 2
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: LD_INT 2
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: LD_INT 0
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: LD_INT 1
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 2
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: LD_INT 2
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 1
28725: NEG
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: LD_INT 0
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: NEG
28748: PUSH
28749: LD_INT 1
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 2
28759: NEG
28760: PUSH
28761: LD_INT 2
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 2
28782: NEG
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 3
28793: NEG
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 3
28805: NEG
28806: PUSH
28807: LD_INT 2
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28840: LD_ADDR_VAR 0 28
28844: PUSH
28845: LD_INT 0
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: LD_INT 0
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: LD_INT 0
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: LD_INT 2
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 0
28933: PUSH
28934: LD_INT 2
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: LD_INT 1
28947: NEG
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 2
29027: NEG
29028: PUSH
29029: LD_INT 1
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 2
29039: NEG
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: NEG
29052: PUSH
29053: LD_INT 3
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: LD_INT 3
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 3
29075: NEG
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 3
29087: NEG
29088: PUSH
29089: LD_INT 2
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29122: LD_ADDR_VAR 0 29
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 1
29142: NEG
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 1
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: NEG
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: NEG
29204: PUSH
29205: LD_INT 2
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 0
29215: PUSH
29216: LD_INT 2
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 2
29237: PUSH
29238: LD_INT 0
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 2
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: LD_INT 2
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 1
29277: NEG
29278: PUSH
29279: LD_INT 1
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 2
29288: NEG
29289: PUSH
29290: LD_INT 1
29292: NEG
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: NEG
29301: PUSH
29302: LD_INT 2
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 2
29312: NEG
29313: PUSH
29314: LD_INT 3
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: LD_INT 3
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 3
29366: NEG
29367: PUSH
29368: LD_INT 2
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29401: LD_ADDR_VAR 0 30
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 2
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 2
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: NEG
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: LD_INT 3
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: LD_INT 2
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: LD_INT 3
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 2
29633: NEG
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 3
29644: NEG
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29679: LD_ADDR_VAR 0 31
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: LD_INT 2
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 1
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 2
29844: NEG
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: LD_INT 2
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: LD_INT 3
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 3
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 3
29922: NEG
29923: PUSH
29924: LD_INT 2
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29957: LD_ADDR_VAR 0 32
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 1
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 0
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: NEG
30039: PUSH
30040: LD_INT 2
30042: NEG
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 0
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: LD_INT 2
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 0
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 2
30123: NEG
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 2
30134: NEG
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 2
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 2
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 2
30189: NEG
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 3
30200: NEG
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30235: LD_ADDR_VAR 0 33
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 1
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: NEG
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 2
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 2
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: NEG
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: NEG
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 2
30413: NEG
30414: PUSH
30415: LD_INT 2
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 2
30437: PUSH
30438: LD_INT 1
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 3
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: LD_INT 3
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 3
30479: NEG
30480: PUSH
30481: LD_INT 2
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30514: LD_ADDR_VAR 0 34
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: LD_INT 2
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: LD_INT 2
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: NEG
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: NEG
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 2
30681: NEG
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: NEG
30694: PUSH
30695: LD_INT 2
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: LD_INT 3
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 2
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 3
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: LD_INT 3
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 2
30748: NEG
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 3
30759: NEG
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30794: LD_ADDR_VAR 0 35
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 2
30885: NEG
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30906: LD_ADDR_VAR 0 36
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31018: LD_ADDR_VAR 0 37
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31130: LD_ADDR_VAR 0 38
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31242: LD_ADDR_VAR 0 39
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: LD_INT 1
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: LD_INT 2
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31354: LD_ADDR_VAR 0 40
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 0
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 1
31412: NEG
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: LD_INT 1
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31466: LD_ADDR_VAR 0 41
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: LD_INT 1
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: LD_INT 2
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: LD_INT 1
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 2
31632: NEG
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 2
31644: NEG
31645: PUSH
31646: LD_INT 2
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: NEG
31657: PUSH
31658: LD_INT 3
31660: NEG
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 3
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 3
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: PUSH
31710: LD_INT 3
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 2
31729: NEG
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 3
31740: NEG
31741: PUSH
31742: LD_INT 0
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 3
31751: NEG
31752: PUSH
31753: LD_INT 1
31755: NEG
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 3
31763: NEG
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 3
31775: NEG
31776: PUSH
31777: LD_INT 3
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31816: LD_ADDR_VAR 0 42
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: LD_INT 2
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: LD_INT 1
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: LD_INT 2
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 2
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: LD_INT 3
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: LD_INT 3
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 3
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: LD_INT 2
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 3
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 3
32062: PUSH
32063: LD_INT 3
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: LD_INT 3
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: LD_INT 3
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 3
32113: NEG
32114: PUSH
32115: LD_INT 2
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 3
32125: NEG
32126: PUSH
32127: LD_INT 3
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32166: LD_ADDR_VAR 0 43
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: NEG
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 2
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 2
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: NEG
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: LD_INT 3
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 3
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 3
32473: NEG
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32514: LD_ADDR_VAR 0 44
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 2
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 2
32669: NEG
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: LD_INT 3
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 3
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: PUSH
32738: LD_INT 1
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 3
32747: PUSH
32748: LD_INT 2
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 3
32757: PUSH
32758: LD_INT 3
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: LD_INT 3
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 3
32788: NEG
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 3
32799: NEG
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: NEG
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 3
32823: NEG
32824: PUSH
32825: LD_INT 3
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32864: LD_ADDR_VAR 0 45
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: LD_INT 1
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: LD_INT 2
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 2
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 2
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 2
33030: NEG
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: LD_INT 2
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: NEG
33055: PUSH
33056: LD_INT 3
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 3
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 3
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 3
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: LD_INT 3
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: LD_INT 3
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: LD_INT 3
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 3
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 3
33161: NEG
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 3
33173: NEG
33174: PUSH
33175: LD_INT 3
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33214: LD_ADDR_VAR 0 46
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: NEG
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: LD_INT 3
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: LD_INT 3
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 3
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 3
33510: NEG
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33562: LD_ADDR_VAR 0 47
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: LD_INT 2
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: LD_INT 2
33658: NEG
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 2
33677: NEG
33678: PUSH
33679: LD_INT 1
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 2
33689: NEG
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33713: LD_ADDR_VAR 0 48
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: LD_INT 2
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33860: LD_ADDR_VAR 0 49
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 2
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: LD_INT 2
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34004: LD_ADDR_VAR 0 50
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 2
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34148: LD_ADDR_VAR 0 51
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: LD_INT 2
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 2
34260: NEG
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 2
34271: NEG
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34295: LD_ADDR_VAR 0 52
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 2
34410: NEG
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: LD_INT 2
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34446: LD_ADDR_VAR 0 53
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: LD_INT 1
34519: NEG
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 2
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 1
34611: NEG
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: NEG
34646: PUSH
34647: LD_INT 2
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34676: LD_ADDR_VAR 0 54
34680: PUSH
34681: LD_INT 0
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: NEG
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: LD_INT 2
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 2
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 2
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 2
34852: NEG
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 2
34863: NEG
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: NEG
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34906: LD_ADDR_VAR 0 55
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: LD_INT 0
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 1
34975: NEG
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: LD_INT 2
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 0
34999: PUSH
35000: LD_INT 2
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 2
35031: PUSH
35032: LD_INT 1
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 2
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: LD_INT 2
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 1
35071: NEG
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 2
35082: NEG
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: NEG
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 2
35105: NEG
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35136: LD_ADDR_VAR 0 56
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 2
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 2
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 1
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 2
35312: NEG
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: NEG
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: LD_INT 2
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35366: LD_ADDR_VAR 0 57
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 2
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: NEG
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 2
35542: NEG
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 2
35565: NEG
35566: PUSH
35567: LD_INT 2
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35596: LD_ADDR_VAR 0 58
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: LD_INT 2
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 2
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 2
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 2
35772: NEG
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 2
35783: NEG
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 2
35795: NEG
35796: PUSH
35797: LD_INT 2
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35826: LD_ADDR_VAR 0 59
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: NEG
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35914: LD_ADDR_VAR 0 60
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: LD_INT 1
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36002: LD_ADDR_VAR 0 61
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36090: LD_ADDR_VAR 0 62
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36178: LD_ADDR_VAR 0 63
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 1
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36266: LD_ADDR_VAR 0 64
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: ST_TO_ADDR
// end ; 1 :
36354: GO 42251
36356: LD_INT 1
36358: DOUBLE
36359: EQUAL
36360: IFTRUE 36364
36362: GO 38987
36364: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36365: LD_ADDR_VAR 0 11
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: LD_INT 3
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: LD_INT 3
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: LD_INT 2
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: LIST
36408: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36409: LD_ADDR_VAR 0 12
36413: PUSH
36414: LD_INT 2
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 3
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: LIST
36449: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36450: LD_ADDR_VAR 0 13
36454: PUSH
36455: LD_INT 3
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36490: LD_ADDR_VAR 0 14
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: LD_INT 3
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: LD_INT 3
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36531: LD_ADDR_VAR 0 15
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 3
36549: NEG
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 3
36560: NEG
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: LIST
36574: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36575: LD_ADDR_VAR 0 16
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: LD_INT 3
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 3
36594: NEG
36595: PUSH
36596: LD_INT 2
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 3
36606: NEG
36607: PUSH
36608: LD_INT 3
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: LIST
36620: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36621: LD_ADDR_VAR 0 17
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: LD_INT 3
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 3
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: LIST
36664: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36665: LD_ADDR_VAR 0 18
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 3
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 3
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36706: LD_ADDR_VAR 0 19
36710: PUSH
36711: LD_INT 3
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 3
36723: PUSH
36724: LD_INT 3
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 2
36733: PUSH
36734: LD_INT 3
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36746: LD_ADDR_VAR 0 20
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 3
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 3
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 2
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: LIST
36786: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36787: LD_ADDR_VAR 0 21
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 3
36805: NEG
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 3
36816: NEG
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36831: LD_ADDR_VAR 0 22
36835: PUSH
36836: LD_INT 2
36838: NEG
36839: PUSH
36840: LD_INT 3
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 3
36850: NEG
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 3
36862: NEG
36863: PUSH
36864: LD_INT 3
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: LIST
36876: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36877: LD_ADDR_VAR 0 23
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 3
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: LD_INT 4
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 3
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: LIST
36920: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36921: LD_ADDR_VAR 0 24
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 3
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 4
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36962: LD_ADDR_VAR 0 25
36966: PUSH
36967: LD_INT 3
36969: PUSH
36970: LD_INT 3
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 4
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 3
36989: PUSH
36990: LD_INT 4
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37002: LD_ADDR_VAR 0 26
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 3
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 4
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 3
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37043: LD_ADDR_VAR 0 27
37047: PUSH
37048: LD_INT 3
37050: NEG
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 3
37061: NEG
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 4
37072: NEG
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37087: LD_ADDR_VAR 0 28
37091: PUSH
37092: LD_INT 3
37094: NEG
37095: PUSH
37096: LD_INT 3
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 3
37106: NEG
37107: PUSH
37108: LD_INT 4
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 4
37118: NEG
37119: PUSH
37120: LD_INT 3
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37133: LD_ADDR_VAR 0 29
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 3
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 3
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 4
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 4
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: LD_INT 3
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 5
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 5
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 4
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 6
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: LD_INT 6
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: LD_INT 5
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37288: LD_ADDR_VAR 0 30
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 3
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 3
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 4
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 4
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 4
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 5
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 5
37378: PUSH
37379: LD_INT 1
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 5
37388: PUSH
37389: LD_INT 1
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 6
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 6
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37431: LD_ADDR_VAR 0 31
37435: PUSH
37436: LD_INT 3
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 3
37448: PUSH
37449: LD_INT 3
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: LD_INT 3
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 4
37468: PUSH
37469: LD_INT 3
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 4
37478: PUSH
37479: LD_INT 4
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: LD_INT 4
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 5
37498: PUSH
37499: LD_INT 4
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 5
37508: PUSH
37509: LD_INT 5
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 4
37518: PUSH
37519: LD_INT 5
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 6
37528: PUSH
37529: LD_INT 5
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 6
37538: PUSH
37539: LD_INT 6
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 5
37548: PUSH
37549: LD_INT 6
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37570: LD_ADDR_VAR 0 32
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 3
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 3
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 4
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 4
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: LD_INT 3
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 5
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 5
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 4
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: LD_INT 6
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 6
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: LD_INT 5
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37713: LD_ADDR_VAR 0 33
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: LD_INT 1
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 3
37731: NEG
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 3
37742: NEG
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 3
37754: NEG
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 4
37765: NEG
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 4
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 4
37788: NEG
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 5
37799: NEG
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 5
37810: NEG
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 5
37822: NEG
37823: PUSH
37824: LD_INT 1
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 6
37833: NEG
37834: PUSH
37835: LD_INT 0
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 6
37844: NEG
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37868: LD_ADDR_VAR 0 34
37872: PUSH
37873: LD_INT 2
37875: NEG
37876: PUSH
37877: LD_INT 3
37879: NEG
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 3
37887: NEG
37888: PUSH
37889: LD_INT 2
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: LD_INT 3
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 3
37911: NEG
37912: PUSH
37913: LD_INT 4
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 4
37923: NEG
37924: PUSH
37925: LD_INT 3
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 4
37935: NEG
37936: PUSH
37937: LD_INT 4
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 4
37947: NEG
37948: PUSH
37949: LD_INT 5
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 5
37959: NEG
37960: PUSH
37961: LD_INT 4
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 5
37971: NEG
37972: PUSH
37973: LD_INT 5
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 5
37983: NEG
37984: PUSH
37985: LD_INT 6
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 6
37995: NEG
37996: PUSH
37997: LD_INT 5
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 6
38007: NEG
38008: PUSH
38009: LD_INT 6
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38031: LD_ADDR_VAR 0 41
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: NEG
38050: PUSH
38051: LD_INT 3
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: LIST
38074: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38075: LD_ADDR_VAR 0 42
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 3
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: LIST
38115: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38116: LD_ADDR_VAR 0 43
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 2
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 3
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: PUSH
38144: LD_INT 3
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: LIST
38155: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38156: LD_ADDR_VAR 0 44
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: LD_INT 3
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: LIST
38196: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38197: LD_ADDR_VAR 0 45
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 3
38226: NEG
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38241: LD_ADDR_VAR 0 46
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: LD_INT 3
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 3
38272: NEG
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38287: LD_ADDR_VAR 0 47
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 3
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: LD_INT 3
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38320: LD_ADDR_VAR 0 48
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38351: LD_ADDR_VAR 0 49
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: LD_INT 2
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38380: LD_ADDR_VAR 0 50
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: LD_INT 3
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38409: LD_ADDR_VAR 0 51
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: LD_INT 2
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: NEG
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38440: LD_ADDR_VAR 0 52
38444: PUSH
38445: LD_INT 3
38447: NEG
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 3
38459: NEG
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38473: LD_ADDR_VAR 0 53
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: LD_INT 3
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 3
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: LD_INT 2
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38517: LD_ADDR_VAR 0 54
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 3
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38558: LD_ADDR_VAR 0 55
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: LD_INT 3
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: LD_INT 3
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38598: LD_ADDR_VAR 0 56
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 3
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: LD_INT 3
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38639: LD_ADDR_VAR 0 57
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 3
38657: NEG
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 3
38668: NEG
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38683: LD_ADDR_VAR 0 58
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: LD_INT 3
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 3
38702: NEG
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: LD_INT 3
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38729: LD_ADDR_VAR 0 59
38733: PUSH
38734: LD_INT 1
38736: NEG
38737: PUSH
38738: LD_INT 2
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: LIST
38772: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38773: LD_ADDR_VAR 0 60
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: LIST
38813: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38814: LD_ADDR_VAR 0 61
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 2
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: LD_INT 2
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38854: LD_ADDR_VAR 0 62
38858: PUSH
38859: LD_INT 1
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: LIST
38894: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38895: LD_ADDR_VAR 0 63
38899: PUSH
38900: LD_INT 1
38902: NEG
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: NEG
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38939: LD_ADDR_VAR 0 64
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 2
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: ST_TO_ADDR
// end ; 2 :
38985: GO 42251
38987: LD_INT 2
38989: DOUBLE
38990: EQUAL
38991: IFTRUE 38995
38993: GO 42250
38995: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38996: LD_ADDR_VAR 0 29
39000: PUSH
39001: LD_INT 4
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 4
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 5
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 5
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 4
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 3
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 3
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 5
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 3
39096: PUSH
39097: LD_INT 3
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 4
39116: PUSH
39117: LD_INT 3
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 4
39126: PUSH
39127: LD_INT 4
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 3
39136: PUSH
39137: LD_INT 4
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 4
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 4
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 4
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 3
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 4
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 5
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 5
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 4
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: LD_INT 3
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: LD_INT 5
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: NEG
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 3
39279: NEG
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 3
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 4
39335: NEG
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 4
39346: NEG
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 4
39358: NEG
39359: PUSH
39360: LD_INT 2
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 4
39381: NEG
39382: PUSH
39383: LD_INT 4
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 4
39393: NEG
39394: PUSH
39395: LD_INT 5
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 3
39405: NEG
39406: PUSH
39407: LD_INT 4
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 3
39417: NEG
39418: PUSH
39419: LD_INT 3
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 4
39429: NEG
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 5
39441: NEG
39442: PUSH
39443: LD_INT 4
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 5
39453: NEG
39454: PUSH
39455: LD_INT 5
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 3
39465: NEG
39466: PUSH
39467: LD_INT 5
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 5
39477: NEG
39478: PUSH
39479: LD_INT 3
39481: NEG
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39534: LD_ADDR_VAR 0 30
39538: PUSH
39539: LD_INT 4
39541: PUSH
39542: LD_INT 4
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 4
39551: PUSH
39552: LD_INT 3
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 5
39561: PUSH
39562: LD_INT 4
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 5
39571: PUSH
39572: LD_INT 5
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 4
39581: PUSH
39582: LD_INT 5
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 3
39591: PUSH
39592: LD_INT 4
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: LD_INT 3
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 5
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 3
39621: PUSH
39622: LD_INT 5
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 3
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 4
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 4
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 3
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 4
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 2
39713: NEG
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 4
39724: NEG
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 4
39735: NEG
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 3
39747: NEG
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 3
39758: NEG
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 4
39769: NEG
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 5
39780: NEG
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 5
39791: NEG
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 5
39803: NEG
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 3
39815: NEG
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 3
39826: NEG
39827: PUSH
39828: LD_INT 3
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: NEG
39839: PUSH
39840: LD_INT 4
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 2
39850: NEG
39851: PUSH
39852: LD_INT 3
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: NEG
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 3
39874: NEG
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 4
39886: NEG
39887: PUSH
39888: LD_INT 3
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 4
39898: NEG
39899: PUSH
39900: LD_INT 4
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: LD_INT 4
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 4
39922: NEG
39923: PUSH
39924: LD_INT 2
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 4
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 0
39945: PUSH
39946: LD_INT 5
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: LD_INT 4
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 3
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 3
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: LD_INT 4
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 5
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 3
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 5
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40081: LD_ADDR_VAR 0 31
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 4
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 4
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 5
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 5
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 4
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 3
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: LD_INT 5
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: LD_INT 3
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 3
40181: NEG
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 3
40192: NEG
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 3
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 4
40237: NEG
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 4
40248: NEG
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 4
40260: NEG
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: NEG
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 4
40283: NEG
40284: PUSH
40285: LD_INT 4
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 4
40295: NEG
40296: PUSH
40297: LD_INT 5
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 3
40307: NEG
40308: PUSH
40309: LD_INT 4
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 3
40319: NEG
40320: PUSH
40321: LD_INT 3
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 4
40331: NEG
40332: PUSH
40333: LD_INT 3
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 5
40343: NEG
40344: PUSH
40345: LD_INT 4
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 5
40355: NEG
40356: PUSH
40357: LD_INT 5
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 3
40367: NEG
40368: PUSH
40369: LD_INT 5
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 5
40379: NEG
40380: PUSH
40381: LD_INT 3
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 3
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 4
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 3
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: LD_INT 2
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 2
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 3
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 4
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: LD_INT 4
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 4
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 4
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 5
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 5
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 4
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 3
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 3
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 3
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 5
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40631: LD_ADDR_VAR 0 32
40635: PUSH
40636: LD_INT 4
40638: NEG
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 4
40649: NEG
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 3
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 3
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 4
40683: NEG
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 5
40694: NEG
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 5
40705: NEG
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 5
40717: NEG
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 3
40729: NEG
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 3
40740: NEG
40741: PUSH
40742: LD_INT 3
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 3
40752: NEG
40753: PUSH
40754: LD_INT 4
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: LD_INT 3
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 3
40788: NEG
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 4
40800: NEG
40801: PUSH
40802: LD_INT 3
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 4
40812: NEG
40813: PUSH
40814: LD_INT 4
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: LD_INT 4
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 4
40836: NEG
40837: PUSH
40838: LD_INT 2
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 0
40848: PUSH
40849: LD_INT 4
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 5
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 4
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 3
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: LD_INT 3
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 4
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 5
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: LD_INT 3
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: LD_INT 5
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 3
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 3
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 4
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 4
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 3
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 2
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 4
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 4
41043: PUSH
41044: LD_INT 4
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 4
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 5
41063: PUSH
41064: LD_INT 4
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 5
41073: PUSH
41074: LD_INT 5
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 4
41083: PUSH
41084: LD_INT 5
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: LD_INT 4
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 3
41103: PUSH
41104: LD_INT 3
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 5
41113: PUSH
41114: LD_INT 3
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 3
41123: PUSH
41124: LD_INT 5
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41178: LD_ADDR_VAR 0 33
41182: PUSH
41183: LD_INT 4
41185: NEG
41186: PUSH
41187: LD_INT 4
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 4
41197: NEG
41198: PUSH
41199: LD_INT 5
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 3
41209: NEG
41210: PUSH
41211: LD_INT 4
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 3
41221: NEG
41222: PUSH
41223: LD_INT 3
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 4
41233: NEG
41234: PUSH
41235: LD_INT 3
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 5
41245: NEG
41246: PUSH
41247: LD_INT 4
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 5
41257: NEG
41258: PUSH
41259: LD_INT 5
41261: NEG
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 3
41269: NEG
41270: PUSH
41271: LD_INT 5
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 5
41281: NEG
41282: PUSH
41283: LD_INT 3
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 3
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 4
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: LD_INT 3
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: LD_INT 2
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: LD_INT 3
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 4
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: LD_INT 4
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 4
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 4
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 5
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 5
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 4
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 3
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 3
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 5
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: PUSH
41489: LD_INT 3
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 4
41508: PUSH
41509: LD_INT 3
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 4
41518: PUSH
41519: LD_INT 4
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 3
41528: PUSH
41529: LD_INT 4
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: LD_INT 3
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 4
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 4
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 4
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: LD_INT 3
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 4
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 5
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 5
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 4
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 3
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: LD_INT 5
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: LD_INT 3
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41716: LD_ADDR_VAR 0 34
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 4
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: LD_INT 5
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 4
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 3
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 3
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: LD_INT 4
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 5
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: LD_INT 3
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: LD_INT 5
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 3
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 3
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 4
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 4
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 3
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 4
41908: PUSH
41909: LD_INT 2
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 4
41918: PUSH
41919: LD_INT 4
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 4
41928: PUSH
41929: LD_INT 3
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 5
41938: PUSH
41939: LD_INT 4
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 5
41948: PUSH
41949: LD_INT 5
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 4
41958: PUSH
41959: LD_INT 5
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 3
41968: PUSH
41969: LD_INT 4
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: LD_INT 3
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 5
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: LD_INT 5
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 3
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 3
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 4
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 4
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: LD_INT 3
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 4
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 4
42101: NEG
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 4
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 3
42124: NEG
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 3
42135: NEG
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 4
42146: NEG
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 5
42157: NEG
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 5
42168: NEG
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 5
42180: NEG
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 3
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: ST_TO_ADDR
// end ; end ;
42248: GO 42251
42250: POP
// case btype of b_depot , b_warehouse :
42251: LD_VAR 0 1
42255: PUSH
42256: LD_INT 0
42258: DOUBLE
42259: EQUAL
42260: IFTRUE 42270
42262: LD_INT 1
42264: DOUBLE
42265: EQUAL
42266: IFTRUE 42270
42268: GO 42471
42270: POP
// case nation of nation_american :
42271: LD_VAR 0 5
42275: PUSH
42276: LD_INT 1
42278: DOUBLE
42279: EQUAL
42280: IFTRUE 42284
42282: GO 42340
42284: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42285: LD_ADDR_VAR 0 9
42289: PUSH
42290: LD_VAR 0 11
42294: PUSH
42295: LD_VAR 0 12
42299: PUSH
42300: LD_VAR 0 13
42304: PUSH
42305: LD_VAR 0 14
42309: PUSH
42310: LD_VAR 0 15
42314: PUSH
42315: LD_VAR 0 16
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: PUSH
42328: LD_VAR 0 4
42332: PUSH
42333: LD_INT 1
42335: PLUS
42336: ARRAY
42337: ST_TO_ADDR
42338: GO 42469
42340: LD_INT 2
42342: DOUBLE
42343: EQUAL
42344: IFTRUE 42348
42346: GO 42404
42348: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42349: LD_ADDR_VAR 0 9
42353: PUSH
42354: LD_VAR 0 17
42358: PUSH
42359: LD_VAR 0 18
42363: PUSH
42364: LD_VAR 0 19
42368: PUSH
42369: LD_VAR 0 20
42373: PUSH
42374: LD_VAR 0 21
42378: PUSH
42379: LD_VAR 0 22
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: PUSH
42392: LD_VAR 0 4
42396: PUSH
42397: LD_INT 1
42399: PLUS
42400: ARRAY
42401: ST_TO_ADDR
42402: GO 42469
42404: LD_INT 3
42406: DOUBLE
42407: EQUAL
42408: IFTRUE 42412
42410: GO 42468
42412: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42413: LD_ADDR_VAR 0 9
42417: PUSH
42418: LD_VAR 0 23
42422: PUSH
42423: LD_VAR 0 24
42427: PUSH
42428: LD_VAR 0 25
42432: PUSH
42433: LD_VAR 0 26
42437: PUSH
42438: LD_VAR 0 27
42442: PUSH
42443: LD_VAR 0 28
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: PUSH
42456: LD_VAR 0 4
42460: PUSH
42461: LD_INT 1
42463: PLUS
42464: ARRAY
42465: ST_TO_ADDR
42466: GO 42469
42468: POP
42469: GO 43024
42471: LD_INT 2
42473: DOUBLE
42474: EQUAL
42475: IFTRUE 42485
42477: LD_INT 3
42479: DOUBLE
42480: EQUAL
42481: IFTRUE 42485
42483: GO 42541
42485: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42486: LD_ADDR_VAR 0 9
42490: PUSH
42491: LD_VAR 0 29
42495: PUSH
42496: LD_VAR 0 30
42500: PUSH
42501: LD_VAR 0 31
42505: PUSH
42506: LD_VAR 0 32
42510: PUSH
42511: LD_VAR 0 33
42515: PUSH
42516: LD_VAR 0 34
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: PUSH
42529: LD_VAR 0 4
42533: PUSH
42534: LD_INT 1
42536: PLUS
42537: ARRAY
42538: ST_TO_ADDR
42539: GO 43024
42541: LD_INT 16
42543: DOUBLE
42544: EQUAL
42545: IFTRUE 42603
42547: LD_INT 17
42549: DOUBLE
42550: EQUAL
42551: IFTRUE 42603
42553: LD_INT 18
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42603
42559: LD_INT 19
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42603
42565: LD_INT 22
42567: DOUBLE
42568: EQUAL
42569: IFTRUE 42603
42571: LD_INT 20
42573: DOUBLE
42574: EQUAL
42575: IFTRUE 42603
42577: LD_INT 21
42579: DOUBLE
42580: EQUAL
42581: IFTRUE 42603
42583: LD_INT 23
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42603
42589: LD_INT 24
42591: DOUBLE
42592: EQUAL
42593: IFTRUE 42603
42595: LD_INT 25
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42603
42601: GO 42659
42603: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42604: LD_ADDR_VAR 0 9
42608: PUSH
42609: LD_VAR 0 35
42613: PUSH
42614: LD_VAR 0 36
42618: PUSH
42619: LD_VAR 0 37
42623: PUSH
42624: LD_VAR 0 38
42628: PUSH
42629: LD_VAR 0 39
42633: PUSH
42634: LD_VAR 0 40
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: PUSH
42647: LD_VAR 0 4
42651: PUSH
42652: LD_INT 1
42654: PLUS
42655: ARRAY
42656: ST_TO_ADDR
42657: GO 43024
42659: LD_INT 6
42661: DOUBLE
42662: EQUAL
42663: IFTRUE 42715
42665: LD_INT 7
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42715
42671: LD_INT 8
42673: DOUBLE
42674: EQUAL
42675: IFTRUE 42715
42677: LD_INT 13
42679: DOUBLE
42680: EQUAL
42681: IFTRUE 42715
42683: LD_INT 12
42685: DOUBLE
42686: EQUAL
42687: IFTRUE 42715
42689: LD_INT 15
42691: DOUBLE
42692: EQUAL
42693: IFTRUE 42715
42695: LD_INT 11
42697: DOUBLE
42698: EQUAL
42699: IFTRUE 42715
42701: LD_INT 14
42703: DOUBLE
42704: EQUAL
42705: IFTRUE 42715
42707: LD_INT 10
42709: DOUBLE
42710: EQUAL
42711: IFTRUE 42715
42713: GO 42771
42715: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42716: LD_ADDR_VAR 0 9
42720: PUSH
42721: LD_VAR 0 41
42725: PUSH
42726: LD_VAR 0 42
42730: PUSH
42731: LD_VAR 0 43
42735: PUSH
42736: LD_VAR 0 44
42740: PUSH
42741: LD_VAR 0 45
42745: PUSH
42746: LD_VAR 0 46
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: PUSH
42759: LD_VAR 0 4
42763: PUSH
42764: LD_INT 1
42766: PLUS
42767: ARRAY
42768: ST_TO_ADDR
42769: GO 43024
42771: LD_INT 36
42773: DOUBLE
42774: EQUAL
42775: IFTRUE 42779
42777: GO 42835
42779: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42780: LD_ADDR_VAR 0 9
42784: PUSH
42785: LD_VAR 0 47
42789: PUSH
42790: LD_VAR 0 48
42794: PUSH
42795: LD_VAR 0 49
42799: PUSH
42800: LD_VAR 0 50
42804: PUSH
42805: LD_VAR 0 51
42809: PUSH
42810: LD_VAR 0 52
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: PUSH
42823: LD_VAR 0 4
42827: PUSH
42828: LD_INT 1
42830: PLUS
42831: ARRAY
42832: ST_TO_ADDR
42833: GO 43024
42835: LD_INT 4
42837: DOUBLE
42838: EQUAL
42839: IFTRUE 42861
42841: LD_INT 5
42843: DOUBLE
42844: EQUAL
42845: IFTRUE 42861
42847: LD_INT 34
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42861
42853: LD_INT 37
42855: DOUBLE
42856: EQUAL
42857: IFTRUE 42861
42859: GO 42917
42861: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42862: LD_ADDR_VAR 0 9
42866: PUSH
42867: LD_VAR 0 53
42871: PUSH
42872: LD_VAR 0 54
42876: PUSH
42877: LD_VAR 0 55
42881: PUSH
42882: LD_VAR 0 56
42886: PUSH
42887: LD_VAR 0 57
42891: PUSH
42892: LD_VAR 0 58
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: PUSH
42905: LD_VAR 0 4
42909: PUSH
42910: LD_INT 1
42912: PLUS
42913: ARRAY
42914: ST_TO_ADDR
42915: GO 43024
42917: LD_INT 31
42919: DOUBLE
42920: EQUAL
42921: IFTRUE 42967
42923: LD_INT 32
42925: DOUBLE
42926: EQUAL
42927: IFTRUE 42967
42929: LD_INT 33
42931: DOUBLE
42932: EQUAL
42933: IFTRUE 42967
42935: LD_INT 27
42937: DOUBLE
42938: EQUAL
42939: IFTRUE 42967
42941: LD_INT 26
42943: DOUBLE
42944: EQUAL
42945: IFTRUE 42967
42947: LD_INT 28
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42967
42953: LD_INT 29
42955: DOUBLE
42956: EQUAL
42957: IFTRUE 42967
42959: LD_INT 30
42961: DOUBLE
42962: EQUAL
42963: IFTRUE 42967
42965: GO 43023
42967: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42968: LD_ADDR_VAR 0 9
42972: PUSH
42973: LD_VAR 0 59
42977: PUSH
42978: LD_VAR 0 60
42982: PUSH
42983: LD_VAR 0 61
42987: PUSH
42988: LD_VAR 0 62
42992: PUSH
42993: LD_VAR 0 63
42997: PUSH
42998: LD_VAR 0 64
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: PUSH
43011: LD_VAR 0 4
43015: PUSH
43016: LD_INT 1
43018: PLUS
43019: ARRAY
43020: ST_TO_ADDR
43021: GO 43024
43023: POP
// temp_list2 = [ ] ;
43024: LD_ADDR_VAR 0 10
43028: PUSH
43029: EMPTY
43030: ST_TO_ADDR
// for i in temp_list do
43031: LD_ADDR_VAR 0 8
43035: PUSH
43036: LD_VAR 0 9
43040: PUSH
43041: FOR_IN
43042: IFFALSE 43094
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43044: LD_ADDR_VAR 0 10
43048: PUSH
43049: LD_VAR 0 10
43053: PUSH
43054: LD_VAR 0 8
43058: PUSH
43059: LD_INT 1
43061: ARRAY
43062: PUSH
43063: LD_VAR 0 2
43067: PLUS
43068: PUSH
43069: LD_VAR 0 8
43073: PUSH
43074: LD_INT 2
43076: ARRAY
43077: PUSH
43078: LD_VAR 0 3
43082: PLUS
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: EMPTY
43089: LIST
43090: ADD
43091: ST_TO_ADDR
43092: GO 43041
43094: POP
43095: POP
// result = temp_list2 ;
43096: LD_ADDR_VAR 0 7
43100: PUSH
43101: LD_VAR 0 10
43105: ST_TO_ADDR
// end ;
43106: LD_VAR 0 7
43110: RET
// export function EnemyInRange ( unit , dist ) ; begin
43111: LD_INT 0
43113: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43114: LD_ADDR_VAR 0 3
43118: PUSH
43119: LD_VAR 0 1
43123: PPUSH
43124: CALL_OW 255
43128: PPUSH
43129: LD_VAR 0 1
43133: PPUSH
43134: CALL_OW 250
43138: PPUSH
43139: LD_VAR 0 1
43143: PPUSH
43144: CALL_OW 251
43148: PPUSH
43149: LD_VAR 0 2
43153: PPUSH
43154: CALL 16368 0 4
43158: PUSH
43159: LD_INT 4
43161: ARRAY
43162: ST_TO_ADDR
// end ;
43163: LD_VAR 0 3
43167: RET
// export function PlayerSeeMe ( unit ) ; begin
43168: LD_INT 0
43170: PPUSH
// result := See ( your_side , unit ) ;
43171: LD_ADDR_VAR 0 2
43175: PUSH
43176: LD_OWVAR 2
43180: PPUSH
43181: LD_VAR 0 1
43185: PPUSH
43186: CALL_OW 292
43190: ST_TO_ADDR
// end ;
43191: LD_VAR 0 2
43195: RET
// export function ReverseDir ( unit ) ; begin
43196: LD_INT 0
43198: PPUSH
// if not unit then
43199: LD_VAR 0 1
43203: NOT
43204: IFFALSE 43208
// exit ;
43206: GO 43231
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43208: LD_ADDR_VAR 0 2
43212: PUSH
43213: LD_VAR 0 1
43217: PPUSH
43218: CALL_OW 254
43222: PUSH
43223: LD_INT 3
43225: PLUS
43226: PUSH
43227: LD_INT 6
43229: MOD
43230: ST_TO_ADDR
// end ;
43231: LD_VAR 0 2
43235: RET
// export function ReverseArray ( array ) ; var i ; begin
43236: LD_INT 0
43238: PPUSH
43239: PPUSH
// if not array then
43240: LD_VAR 0 1
43244: NOT
43245: IFFALSE 43249
// exit ;
43247: GO 43304
// result := [ ] ;
43249: LD_ADDR_VAR 0 2
43253: PUSH
43254: EMPTY
43255: ST_TO_ADDR
// for i := array downto 1 do
43256: LD_ADDR_VAR 0 3
43260: PUSH
43261: DOUBLE
43262: LD_VAR 0 1
43266: INC
43267: ST_TO_ADDR
43268: LD_INT 1
43270: PUSH
43271: FOR_DOWNTO
43272: IFFALSE 43302
// result := Join ( result , array [ i ] ) ;
43274: LD_ADDR_VAR 0 2
43278: PUSH
43279: LD_VAR 0 2
43283: PPUSH
43284: LD_VAR 0 1
43288: PUSH
43289: LD_VAR 0 3
43293: ARRAY
43294: PPUSH
43295: CALL 48146 0 2
43299: ST_TO_ADDR
43300: GO 43271
43302: POP
43303: POP
// end ;
43304: LD_VAR 0 2
43308: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43309: LD_INT 0
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
43315: PPUSH
43316: PPUSH
// if not unit or not hexes then
43317: LD_VAR 0 1
43321: NOT
43322: IFTRUE 43331
43324: PUSH
43325: LD_VAR 0 2
43329: NOT
43330: OR
43331: IFFALSE 43335
// exit ;
43333: GO 43458
// dist := 9999 ;
43335: LD_ADDR_VAR 0 5
43339: PUSH
43340: LD_INT 9999
43342: ST_TO_ADDR
// for i = 1 to hexes do
43343: LD_ADDR_VAR 0 4
43347: PUSH
43348: DOUBLE
43349: LD_INT 1
43351: DEC
43352: ST_TO_ADDR
43353: LD_VAR 0 2
43357: PUSH
43358: FOR_TO
43359: IFFALSE 43446
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43361: LD_ADDR_VAR 0 6
43365: PUSH
43366: LD_VAR 0 1
43370: PPUSH
43371: LD_VAR 0 2
43375: PUSH
43376: LD_VAR 0 4
43380: ARRAY
43381: PUSH
43382: LD_INT 1
43384: ARRAY
43385: PPUSH
43386: LD_VAR 0 2
43390: PUSH
43391: LD_VAR 0 4
43395: ARRAY
43396: PUSH
43397: LD_INT 2
43399: ARRAY
43400: PPUSH
43401: CALL_OW 297
43405: ST_TO_ADDR
// if tdist < dist then
43406: LD_VAR 0 6
43410: PUSH
43411: LD_VAR 0 5
43415: LESS
43416: IFFALSE 43444
// begin hex := hexes [ i ] ;
43418: LD_ADDR_VAR 0 8
43422: PUSH
43423: LD_VAR 0 2
43427: PUSH
43428: LD_VAR 0 4
43432: ARRAY
43433: ST_TO_ADDR
// dist := tdist ;
43434: LD_ADDR_VAR 0 5
43438: PUSH
43439: LD_VAR 0 6
43443: ST_TO_ADDR
// end ; end ;
43444: GO 43358
43446: POP
43447: POP
// result := hex ;
43448: LD_ADDR_VAR 0 3
43452: PUSH
43453: LD_VAR 0 8
43457: ST_TO_ADDR
// end ;
43458: LD_VAR 0 3
43462: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43463: LD_INT 0
43465: PPUSH
43466: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43467: LD_VAR 0 1
43471: NOT
43472: IFTRUE 43511
43474: PUSH
43475: LD_VAR 0 1
43479: PUSH
43480: LD_INT 21
43482: PUSH
43483: LD_INT 2
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 23
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PPUSH
43504: CALL_OW 69
43508: IN
43509: NOT
43510: OR
43511: IFFALSE 43515
// exit ;
43513: GO 43562
// for i = 1 to 3 do
43515: LD_ADDR_VAR 0 3
43519: PUSH
43520: DOUBLE
43521: LD_INT 1
43523: DEC
43524: ST_TO_ADDR
43525: LD_INT 3
43527: PUSH
43528: FOR_TO
43529: IFFALSE 43560
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43531: LD_VAR 0 1
43535: PPUSH
43536: CALL_OW 250
43540: PPUSH
43541: LD_VAR 0 1
43545: PPUSH
43546: CALL_OW 251
43550: PPUSH
43551: LD_INT 1
43553: PPUSH
43554: CALL_OW 453
43558: GO 43528
43560: POP
43561: POP
// end ;
43562: LD_VAR 0 2
43566: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43567: LD_INT 0
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
// if not unit or not enemy_unit then
43575: LD_VAR 0 1
43579: NOT
43580: IFTRUE 43589
43582: PUSH
43583: LD_VAR 0 2
43587: NOT
43588: OR
43589: IFFALSE 43593
// exit ;
43591: GO 44064
// if GetLives ( i ) < 250 then
43593: LD_VAR 0 4
43597: PPUSH
43598: CALL_OW 256
43602: PUSH
43603: LD_INT 250
43605: LESS
43606: IFFALSE 43619
// begin ComAutodestruct ( i ) ;
43608: LD_VAR 0 4
43612: PPUSH
43613: CALL 43463 0 1
// exit ;
43617: GO 44064
// end ; x := GetX ( enemy_unit ) ;
43619: LD_ADDR_VAR 0 7
43623: PUSH
43624: LD_VAR 0 2
43628: PPUSH
43629: CALL_OW 250
43633: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43634: LD_ADDR_VAR 0 8
43638: PUSH
43639: LD_VAR 0 2
43643: PPUSH
43644: CALL_OW 251
43648: ST_TO_ADDR
// if not x or not y then
43649: LD_VAR 0 7
43653: NOT
43654: IFTRUE 43663
43656: PUSH
43657: LD_VAR 0 8
43661: NOT
43662: OR
43663: IFFALSE 43667
// exit ;
43665: GO 44064
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43667: LD_ADDR_VAR 0 6
43671: PUSH
43672: LD_VAR 0 7
43676: PPUSH
43677: LD_INT 0
43679: PPUSH
43680: LD_INT 4
43682: PPUSH
43683: CALL_OW 272
43687: PUSH
43688: LD_VAR 0 8
43692: PPUSH
43693: LD_INT 0
43695: PPUSH
43696: LD_INT 4
43698: PPUSH
43699: CALL_OW 273
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_VAR 0 7
43712: PPUSH
43713: LD_INT 1
43715: PPUSH
43716: LD_INT 4
43718: PPUSH
43719: CALL_OW 272
43723: PUSH
43724: LD_VAR 0 8
43728: PPUSH
43729: LD_INT 1
43731: PPUSH
43732: LD_INT 4
43734: PPUSH
43735: CALL_OW 273
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_VAR 0 7
43748: PPUSH
43749: LD_INT 2
43751: PPUSH
43752: LD_INT 4
43754: PPUSH
43755: CALL_OW 272
43759: PUSH
43760: LD_VAR 0 8
43764: PPUSH
43765: LD_INT 2
43767: PPUSH
43768: LD_INT 4
43770: PPUSH
43771: CALL_OW 273
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_VAR 0 7
43784: PPUSH
43785: LD_INT 3
43787: PPUSH
43788: LD_INT 4
43790: PPUSH
43791: CALL_OW 272
43795: PUSH
43796: LD_VAR 0 8
43800: PPUSH
43801: LD_INT 3
43803: PPUSH
43804: LD_INT 4
43806: PPUSH
43807: CALL_OW 273
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_VAR 0 7
43820: PPUSH
43821: LD_INT 4
43823: PPUSH
43824: LD_INT 4
43826: PPUSH
43827: CALL_OW 272
43831: PUSH
43832: LD_VAR 0 8
43836: PPUSH
43837: LD_INT 4
43839: PPUSH
43840: LD_INT 4
43842: PPUSH
43843: CALL_OW 273
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_VAR 0 7
43856: PPUSH
43857: LD_INT 5
43859: PPUSH
43860: LD_INT 4
43862: PPUSH
43863: CALL_OW 272
43867: PUSH
43868: LD_VAR 0 8
43872: PPUSH
43873: LD_INT 5
43875: PPUSH
43876: LD_INT 4
43878: PPUSH
43879: CALL_OW 273
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
// for i = tmp downto 1 do
43896: LD_ADDR_VAR 0 4
43900: PUSH
43901: DOUBLE
43902: LD_VAR 0 6
43906: INC
43907: ST_TO_ADDR
43908: LD_INT 1
43910: PUSH
43911: FOR_DOWNTO
43912: IFFALSE 44015
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43914: LD_VAR 0 6
43918: PUSH
43919: LD_VAR 0 4
43923: ARRAY
43924: PUSH
43925: LD_INT 1
43927: ARRAY
43928: PPUSH
43929: LD_VAR 0 6
43933: PUSH
43934: LD_VAR 0 4
43938: ARRAY
43939: PUSH
43940: LD_INT 2
43942: ARRAY
43943: PPUSH
43944: CALL_OW 488
43948: NOT
43949: IFTRUE 43991
43951: PUSH
43952: LD_VAR 0 6
43956: PUSH
43957: LD_VAR 0 4
43961: ARRAY
43962: PUSH
43963: LD_INT 1
43965: ARRAY
43966: PPUSH
43967: LD_VAR 0 6
43971: PUSH
43972: LD_VAR 0 4
43976: ARRAY
43977: PUSH
43978: LD_INT 2
43980: ARRAY
43981: PPUSH
43982: CALL_OW 428
43986: PUSH
43987: LD_INT 0
43989: NONEQUAL
43990: OR
43991: IFFALSE 44013
// tmp := Delete ( tmp , i ) ;
43993: LD_ADDR_VAR 0 6
43997: PUSH
43998: LD_VAR 0 6
44002: PPUSH
44003: LD_VAR 0 4
44007: PPUSH
44008: CALL_OW 3
44012: ST_TO_ADDR
44013: GO 43911
44015: POP
44016: POP
// j := GetClosestHex ( unit , tmp ) ;
44017: LD_ADDR_VAR 0 5
44021: PUSH
44022: LD_VAR 0 1
44026: PPUSH
44027: LD_VAR 0 6
44031: PPUSH
44032: CALL 43309 0 2
44036: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44037: LD_VAR 0 1
44041: PPUSH
44042: LD_VAR 0 5
44046: PUSH
44047: LD_INT 1
44049: ARRAY
44050: PPUSH
44051: LD_VAR 0 5
44055: PUSH
44056: LD_INT 2
44058: ARRAY
44059: PPUSH
44060: CALL_OW 111
// end ;
44064: LD_VAR 0 3
44068: RET
// export function PrepareApemanSoldier ( ) ; begin
44069: LD_INT 0
44071: PPUSH
// uc_nation := 0 ;
44072: LD_ADDR_OWVAR 21
44076: PUSH
44077: LD_INT 0
44079: ST_TO_ADDR
// hc_sex := sex_male ;
44080: LD_ADDR_OWVAR 27
44084: PUSH
44085: LD_INT 1
44087: ST_TO_ADDR
// hc_name :=  ;
44088: LD_ADDR_OWVAR 26
44092: PUSH
44093: LD_STRING 
44095: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44096: LD_ADDR_OWVAR 28
44100: PUSH
44101: LD_INT 15
44103: ST_TO_ADDR
// hc_gallery :=  ;
44104: LD_ADDR_OWVAR 33
44108: PUSH
44109: LD_STRING 
44111: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44112: LD_ADDR_OWVAR 31
44116: PUSH
44117: LD_INT 0
44119: PPUSH
44120: LD_INT 3
44122: PPUSH
44123: CALL_OW 12
44127: PUSH
44128: LD_INT 0
44130: PPUSH
44131: LD_INT 3
44133: PPUSH
44134: CALL_OW 12
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44151: LD_ADDR_OWVAR 29
44155: PUSH
44156: LD_INT 12
44158: PUSH
44159: LD_INT 12
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: ST_TO_ADDR
// end ;
44166: LD_VAR 0 1
44170: RET
// export function PrepareApemanEngineer ( ) ; begin
44171: LD_INT 0
44173: PPUSH
// uc_nation := 0 ;
44174: LD_ADDR_OWVAR 21
44178: PUSH
44179: LD_INT 0
44181: ST_TO_ADDR
// hc_sex := sex_male ;
44182: LD_ADDR_OWVAR 27
44186: PUSH
44187: LD_INT 1
44189: ST_TO_ADDR
// hc_name :=  ;
44190: LD_ADDR_OWVAR 26
44194: PUSH
44195: LD_STRING 
44197: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44198: LD_ADDR_OWVAR 28
44202: PUSH
44203: LD_INT 16
44205: ST_TO_ADDR
// hc_gallery :=  ;
44206: LD_ADDR_OWVAR 33
44210: PUSH
44211: LD_STRING 
44213: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44214: LD_ADDR_OWVAR 31
44218: PUSH
44219: LD_INT 0
44221: PPUSH
44222: LD_INT 3
44224: PPUSH
44225: CALL_OW 12
44229: PUSH
44230: LD_INT 0
44232: PPUSH
44233: LD_INT 3
44235: PPUSH
44236: CALL_OW 12
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44253: LD_ADDR_OWVAR 29
44257: PUSH
44258: LD_INT 12
44260: PUSH
44261: LD_INT 12
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: ST_TO_ADDR
// end ;
44268: LD_VAR 0 1
44272: RET
// export function PrepareApeman ( agressivity ) ; begin
44273: LD_INT 0
44275: PPUSH
// uc_side := 0 ;
44276: LD_ADDR_OWVAR 20
44280: PUSH
44281: LD_INT 0
44283: ST_TO_ADDR
// uc_nation := 0 ;
44284: LD_ADDR_OWVAR 21
44288: PUSH
44289: LD_INT 0
44291: ST_TO_ADDR
// hc_sex := sex_male ;
44292: LD_ADDR_OWVAR 27
44296: PUSH
44297: LD_INT 1
44299: ST_TO_ADDR
// hc_class := class_apeman ;
44300: LD_ADDR_OWVAR 28
44304: PUSH
44305: LD_INT 12
44307: ST_TO_ADDR
// hc_gallery :=  ;
44308: LD_ADDR_OWVAR 33
44312: PUSH
44313: LD_STRING 
44315: ST_TO_ADDR
// hc_name :=  ;
44316: LD_ADDR_OWVAR 26
44320: PUSH
44321: LD_STRING 
44323: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44324: LD_ADDR_OWVAR 29
44328: PUSH
44329: LD_INT 12
44331: PUSH
44332: LD_INT 12
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: ST_TO_ADDR
// if agressivity = 0 then
44339: LD_VAR 0 1
44343: PUSH
44344: LD_INT 0
44346: EQUAL
44347: IFFALSE 44359
// hc_agressivity := 0 else
44349: LD_ADDR_OWVAR 35
44353: PUSH
44354: LD_INT 0
44356: ST_TO_ADDR
44357: GO 44380
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44359: LD_ADDR_OWVAR 35
44363: PUSH
44364: LD_VAR 0 1
44368: NEG
44369: PPUSH
44370: LD_VAR 0 1
44374: PPUSH
44375: CALL_OW 12
44379: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44380: LD_ADDR_OWVAR 31
44384: PUSH
44385: LD_INT 0
44387: PPUSH
44388: LD_INT 3
44390: PPUSH
44391: CALL_OW 12
44395: PUSH
44396: LD_INT 0
44398: PPUSH
44399: LD_INT 3
44401: PPUSH
44402: CALL_OW 12
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
// end ;
44419: LD_VAR 0 2
44423: RET
// export function PrepareTiger ( agressivity ) ; begin
44424: LD_INT 0
44426: PPUSH
// uc_side := 0 ;
44427: LD_ADDR_OWVAR 20
44431: PUSH
44432: LD_INT 0
44434: ST_TO_ADDR
// uc_nation := 0 ;
44435: LD_ADDR_OWVAR 21
44439: PUSH
44440: LD_INT 0
44442: ST_TO_ADDR
// InitHc ;
44443: CALL_OW 19
// hc_class := class_tiger ;
44447: LD_ADDR_OWVAR 28
44451: PUSH
44452: LD_INT 14
44454: ST_TO_ADDR
// hc_gallery :=  ;
44455: LD_ADDR_OWVAR 33
44459: PUSH
44460: LD_STRING 
44462: ST_TO_ADDR
// hc_name :=  ;
44463: LD_ADDR_OWVAR 26
44467: PUSH
44468: LD_STRING 
44470: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44471: LD_ADDR_OWVAR 35
44475: PUSH
44476: LD_VAR 0 1
44480: NEG
44481: PPUSH
44482: LD_VAR 0 1
44486: PPUSH
44487: CALL_OW 12
44491: ST_TO_ADDR
// end ;
44492: LD_VAR 0 2
44496: RET
// export function PrepareEnchidna ( ) ; begin
44497: LD_INT 0
44499: PPUSH
// uc_side := 0 ;
44500: LD_ADDR_OWVAR 20
44504: PUSH
44505: LD_INT 0
44507: ST_TO_ADDR
// uc_nation := 0 ;
44508: LD_ADDR_OWVAR 21
44512: PUSH
44513: LD_INT 0
44515: ST_TO_ADDR
// InitHc ;
44516: CALL_OW 19
// hc_class := class_baggie ;
44520: LD_ADDR_OWVAR 28
44524: PUSH
44525: LD_INT 13
44527: ST_TO_ADDR
// hc_gallery :=  ;
44528: LD_ADDR_OWVAR 33
44532: PUSH
44533: LD_STRING 
44535: ST_TO_ADDR
// hc_name :=  ;
44536: LD_ADDR_OWVAR 26
44540: PUSH
44541: LD_STRING 
44543: ST_TO_ADDR
// end ;
44544: LD_VAR 0 1
44548: RET
// export function PrepareFrog ( ) ; begin
44549: LD_INT 0
44551: PPUSH
// uc_side := 0 ;
44552: LD_ADDR_OWVAR 20
44556: PUSH
44557: LD_INT 0
44559: ST_TO_ADDR
// uc_nation := 0 ;
44560: LD_ADDR_OWVAR 21
44564: PUSH
44565: LD_INT 0
44567: ST_TO_ADDR
// InitHc ;
44568: CALL_OW 19
// hc_class := class_frog ;
44572: LD_ADDR_OWVAR 28
44576: PUSH
44577: LD_INT 19
44579: ST_TO_ADDR
// hc_gallery :=  ;
44580: LD_ADDR_OWVAR 33
44584: PUSH
44585: LD_STRING 
44587: ST_TO_ADDR
// hc_name :=  ;
44588: LD_ADDR_OWVAR 26
44592: PUSH
44593: LD_STRING 
44595: ST_TO_ADDR
// end ;
44596: LD_VAR 0 1
44600: RET
// export function PrepareFish ( ) ; begin
44601: LD_INT 0
44603: PPUSH
// uc_side := 0 ;
44604: LD_ADDR_OWVAR 20
44608: PUSH
44609: LD_INT 0
44611: ST_TO_ADDR
// uc_nation := 0 ;
44612: LD_ADDR_OWVAR 21
44616: PUSH
44617: LD_INT 0
44619: ST_TO_ADDR
// InitHc ;
44620: CALL_OW 19
// hc_class := class_fish ;
44624: LD_ADDR_OWVAR 28
44628: PUSH
44629: LD_INT 20
44631: ST_TO_ADDR
// hc_gallery :=  ;
44632: LD_ADDR_OWVAR 33
44636: PUSH
44637: LD_STRING 
44639: ST_TO_ADDR
// hc_name :=  ;
44640: LD_ADDR_OWVAR 26
44644: PUSH
44645: LD_STRING 
44647: ST_TO_ADDR
// end ;
44648: LD_VAR 0 1
44652: RET
// export function PrepareBird ( ) ; begin
44653: LD_INT 0
44655: PPUSH
// uc_side := 0 ;
44656: LD_ADDR_OWVAR 20
44660: PUSH
44661: LD_INT 0
44663: ST_TO_ADDR
// uc_nation := 0 ;
44664: LD_ADDR_OWVAR 21
44668: PUSH
44669: LD_INT 0
44671: ST_TO_ADDR
// InitHc ;
44672: CALL_OW 19
// hc_class := class_phororhacos ;
44676: LD_ADDR_OWVAR 28
44680: PUSH
44681: LD_INT 18
44683: ST_TO_ADDR
// hc_gallery :=  ;
44684: LD_ADDR_OWVAR 33
44688: PUSH
44689: LD_STRING 
44691: ST_TO_ADDR
// hc_name :=  ;
44692: LD_ADDR_OWVAR 26
44696: PUSH
44697: LD_STRING 
44699: ST_TO_ADDR
// end ;
44700: LD_VAR 0 1
44704: RET
// export function PrepareHorse ( ) ; begin
44705: LD_INT 0
44707: PPUSH
// uc_side := 0 ;
44708: LD_ADDR_OWVAR 20
44712: PUSH
44713: LD_INT 0
44715: ST_TO_ADDR
// uc_nation := 0 ;
44716: LD_ADDR_OWVAR 21
44720: PUSH
44721: LD_INT 0
44723: ST_TO_ADDR
// InitHc ;
44724: CALL_OW 19
// hc_class := class_horse ;
44728: LD_ADDR_OWVAR 28
44732: PUSH
44733: LD_INT 21
44735: ST_TO_ADDR
// hc_gallery :=  ;
44736: LD_ADDR_OWVAR 33
44740: PUSH
44741: LD_STRING 
44743: ST_TO_ADDR
// hc_name :=  ;
44744: LD_ADDR_OWVAR 26
44748: PUSH
44749: LD_STRING 
44751: ST_TO_ADDR
// end ;
44752: LD_VAR 0 1
44756: RET
// export function PrepareMastodont ( ) ; begin
44757: LD_INT 0
44759: PPUSH
// uc_side := 0 ;
44760: LD_ADDR_OWVAR 20
44764: PUSH
44765: LD_INT 0
44767: ST_TO_ADDR
// uc_nation := 0 ;
44768: LD_ADDR_OWVAR 21
44772: PUSH
44773: LD_INT 0
44775: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44776: LD_ADDR_OWVAR 37
44780: PUSH
44781: LD_INT 31
44783: ST_TO_ADDR
// vc_control := control_rider ;
44784: LD_ADDR_OWVAR 38
44788: PUSH
44789: LD_INT 4
44791: ST_TO_ADDR
// end ;
44792: LD_VAR 0 1
44796: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44797: LD_INT 0
44799: PPUSH
44800: PPUSH
44801: PPUSH
// uc_side = 0 ;
44802: LD_ADDR_OWVAR 20
44806: PUSH
44807: LD_INT 0
44809: ST_TO_ADDR
// uc_nation = 0 ;
44810: LD_ADDR_OWVAR 21
44814: PUSH
44815: LD_INT 0
44817: ST_TO_ADDR
// InitHc_All ( ) ;
44818: CALL_OW 584
// InitVc ;
44822: CALL_OW 20
// if mastodonts then
44826: LD_VAR 0 6
44830: IFFALSE 44897
// for i = 1 to mastodonts do
44832: LD_ADDR_VAR 0 11
44836: PUSH
44837: DOUBLE
44838: LD_INT 1
44840: DEC
44841: ST_TO_ADDR
44842: LD_VAR 0 6
44846: PUSH
44847: FOR_TO
44848: IFFALSE 44895
// begin vc_chassis := 31 ;
44850: LD_ADDR_OWVAR 37
44854: PUSH
44855: LD_INT 31
44857: ST_TO_ADDR
// vc_control := control_rider ;
44858: LD_ADDR_OWVAR 38
44862: PUSH
44863: LD_INT 4
44865: ST_TO_ADDR
// animal := CreateVehicle ;
44866: LD_ADDR_VAR 0 12
44870: PUSH
44871: CALL_OW 45
44875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44876: LD_VAR 0 12
44880: PPUSH
44881: LD_VAR 0 8
44885: PPUSH
44886: LD_INT 0
44888: PPUSH
44889: CALL 47039 0 3
// end ;
44893: GO 44847
44895: POP
44896: POP
// if horses then
44897: LD_VAR 0 5
44901: IFFALSE 44968
// for i = 1 to horses do
44903: LD_ADDR_VAR 0 11
44907: PUSH
44908: DOUBLE
44909: LD_INT 1
44911: DEC
44912: ST_TO_ADDR
44913: LD_VAR 0 5
44917: PUSH
44918: FOR_TO
44919: IFFALSE 44966
// begin hc_class := 21 ;
44921: LD_ADDR_OWVAR 28
44925: PUSH
44926: LD_INT 21
44928: ST_TO_ADDR
// hc_gallery :=  ;
44929: LD_ADDR_OWVAR 33
44933: PUSH
44934: LD_STRING 
44936: ST_TO_ADDR
// animal := CreateHuman ;
44937: LD_ADDR_VAR 0 12
44941: PUSH
44942: CALL_OW 44
44946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44947: LD_VAR 0 12
44951: PPUSH
44952: LD_VAR 0 8
44956: PPUSH
44957: LD_INT 0
44959: PPUSH
44960: CALL 47039 0 3
// end ;
44964: GO 44918
44966: POP
44967: POP
// if birds then
44968: LD_VAR 0 1
44972: IFFALSE 45039
// for i = 1 to birds do
44974: LD_ADDR_VAR 0 11
44978: PUSH
44979: DOUBLE
44980: LD_INT 1
44982: DEC
44983: ST_TO_ADDR
44984: LD_VAR 0 1
44988: PUSH
44989: FOR_TO
44990: IFFALSE 45037
// begin hc_class := 18 ;
44992: LD_ADDR_OWVAR 28
44996: PUSH
44997: LD_INT 18
44999: ST_TO_ADDR
// hc_gallery =  ;
45000: LD_ADDR_OWVAR 33
45004: PUSH
45005: LD_STRING 
45007: ST_TO_ADDR
// animal := CreateHuman ;
45008: LD_ADDR_VAR 0 12
45012: PUSH
45013: CALL_OW 44
45017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45018: LD_VAR 0 12
45022: PPUSH
45023: LD_VAR 0 8
45027: PPUSH
45028: LD_INT 0
45030: PPUSH
45031: CALL 47039 0 3
// end ;
45035: GO 44989
45037: POP
45038: POP
// if tigers then
45039: LD_VAR 0 2
45043: IFFALSE 45127
// for i = 1 to tigers do
45045: LD_ADDR_VAR 0 11
45049: PUSH
45050: DOUBLE
45051: LD_INT 1
45053: DEC
45054: ST_TO_ADDR
45055: LD_VAR 0 2
45059: PUSH
45060: FOR_TO
45061: IFFALSE 45125
// begin hc_class = class_tiger ;
45063: LD_ADDR_OWVAR 28
45067: PUSH
45068: LD_INT 14
45070: ST_TO_ADDR
// hc_gallery =  ;
45071: LD_ADDR_OWVAR 33
45075: PUSH
45076: LD_STRING 
45078: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45079: LD_ADDR_OWVAR 35
45083: PUSH
45084: LD_INT 7
45086: NEG
45087: PPUSH
45088: LD_INT 7
45090: PPUSH
45091: CALL_OW 12
45095: ST_TO_ADDR
// animal := CreateHuman ;
45096: LD_ADDR_VAR 0 12
45100: PUSH
45101: CALL_OW 44
45105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45106: LD_VAR 0 12
45110: PPUSH
45111: LD_VAR 0 8
45115: PPUSH
45116: LD_INT 0
45118: PPUSH
45119: CALL 47039 0 3
// end ;
45123: GO 45060
45125: POP
45126: POP
// if apemans then
45127: LD_VAR 0 3
45131: IFFALSE 45254
// for i = 1 to apemans do
45133: LD_ADDR_VAR 0 11
45137: PUSH
45138: DOUBLE
45139: LD_INT 1
45141: DEC
45142: ST_TO_ADDR
45143: LD_VAR 0 3
45147: PUSH
45148: FOR_TO
45149: IFFALSE 45252
// begin hc_class = class_apeman ;
45151: LD_ADDR_OWVAR 28
45155: PUSH
45156: LD_INT 12
45158: ST_TO_ADDR
// hc_gallery =  ;
45159: LD_ADDR_OWVAR 33
45163: PUSH
45164: LD_STRING 
45166: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45167: LD_ADDR_OWVAR 35
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PPUSH
45176: LD_INT 2
45178: PPUSH
45179: CALL_OW 12
45183: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45184: LD_ADDR_OWVAR 31
45188: PUSH
45189: LD_INT 1
45191: PPUSH
45192: LD_INT 3
45194: PPUSH
45195: CALL_OW 12
45199: PUSH
45200: LD_INT 1
45202: PPUSH
45203: LD_INT 3
45205: PPUSH
45206: CALL_OW 12
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: ST_TO_ADDR
// animal := CreateHuman ;
45223: LD_ADDR_VAR 0 12
45227: PUSH
45228: CALL_OW 44
45232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45233: LD_VAR 0 12
45237: PPUSH
45238: LD_VAR 0 8
45242: PPUSH
45243: LD_INT 0
45245: PPUSH
45246: CALL 47039 0 3
// end ;
45250: GO 45148
45252: POP
45253: POP
// if enchidnas then
45254: LD_VAR 0 4
45258: IFFALSE 45325
// for i = 1 to enchidnas do
45260: LD_ADDR_VAR 0 11
45264: PUSH
45265: DOUBLE
45266: LD_INT 1
45268: DEC
45269: ST_TO_ADDR
45270: LD_VAR 0 4
45274: PUSH
45275: FOR_TO
45276: IFFALSE 45323
// begin hc_class = 13 ;
45278: LD_ADDR_OWVAR 28
45282: PUSH
45283: LD_INT 13
45285: ST_TO_ADDR
// hc_gallery =  ;
45286: LD_ADDR_OWVAR 33
45290: PUSH
45291: LD_STRING 
45293: ST_TO_ADDR
// animal := CreateHuman ;
45294: LD_ADDR_VAR 0 12
45298: PUSH
45299: CALL_OW 44
45303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45304: LD_VAR 0 12
45308: PPUSH
45309: LD_VAR 0 8
45313: PPUSH
45314: LD_INT 0
45316: PPUSH
45317: CALL 47039 0 3
// end ;
45321: GO 45275
45323: POP
45324: POP
// if fishes then
45325: LD_VAR 0 7
45329: IFFALSE 45396
// for i = 1 to fishes do
45331: LD_ADDR_VAR 0 11
45335: PUSH
45336: DOUBLE
45337: LD_INT 1
45339: DEC
45340: ST_TO_ADDR
45341: LD_VAR 0 7
45345: PUSH
45346: FOR_TO
45347: IFFALSE 45394
// begin hc_class = 20 ;
45349: LD_ADDR_OWVAR 28
45353: PUSH
45354: LD_INT 20
45356: ST_TO_ADDR
// hc_gallery =  ;
45357: LD_ADDR_OWVAR 33
45361: PUSH
45362: LD_STRING 
45364: ST_TO_ADDR
// animal := CreateHuman ;
45365: LD_ADDR_VAR 0 12
45369: PUSH
45370: CALL_OW 44
45374: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45375: LD_VAR 0 12
45379: PPUSH
45380: LD_VAR 0 9
45384: PPUSH
45385: LD_INT 0
45387: PPUSH
45388: CALL 47039 0 3
// end ;
45392: GO 45346
45394: POP
45395: POP
// end ;
45396: LD_VAR 0 10
45400: RET
// export function WantHeal ( sci , unit ) ; begin
45401: LD_INT 0
45403: PPUSH
// if GetTaskList ( sci ) > 0 then
45404: LD_VAR 0 1
45408: PPUSH
45409: CALL_OW 437
45413: PUSH
45414: LD_INT 0
45416: GREATER
45417: IFFALSE 45489
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45419: LD_VAR 0 1
45423: PPUSH
45424: CALL_OW 437
45428: PUSH
45429: LD_INT 1
45431: ARRAY
45432: PUSH
45433: LD_INT 1
45435: ARRAY
45436: PUSH
45437: LD_STRING l
45439: EQUAL
45440: IFFALSE 45467
45442: PUSH
45443: LD_VAR 0 1
45447: PPUSH
45448: CALL_OW 437
45452: PUSH
45453: LD_INT 1
45455: ARRAY
45456: PUSH
45457: LD_INT 4
45459: ARRAY
45460: PUSH
45461: LD_VAR 0 2
45465: EQUAL
45466: AND
45467: IFFALSE 45479
// result := true else
45469: LD_ADDR_VAR 0 3
45473: PUSH
45474: LD_INT 1
45476: ST_TO_ADDR
45477: GO 45487
// result := false ;
45479: LD_ADDR_VAR 0 3
45483: PUSH
45484: LD_INT 0
45486: ST_TO_ADDR
// end else
45487: GO 45497
// result := false ;
45489: LD_ADDR_VAR 0 3
45493: PUSH
45494: LD_INT 0
45496: ST_TO_ADDR
// end ;
45497: LD_VAR 0 3
45501: RET
// export function HealTarget ( sci ) ; begin
45502: LD_INT 0
45504: PPUSH
// if not sci then
45505: LD_VAR 0 1
45509: NOT
45510: IFFALSE 45514
// exit ;
45512: GO 45579
// result := 0 ;
45514: LD_ADDR_VAR 0 2
45518: PUSH
45519: LD_INT 0
45521: ST_TO_ADDR
// if GetTaskList ( sci ) then
45522: LD_VAR 0 1
45526: PPUSH
45527: CALL_OW 437
45531: IFFALSE 45579
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45533: LD_VAR 0 1
45537: PPUSH
45538: CALL_OW 437
45542: PUSH
45543: LD_INT 1
45545: ARRAY
45546: PUSH
45547: LD_INT 1
45549: ARRAY
45550: PUSH
45551: LD_STRING l
45553: EQUAL
45554: IFFALSE 45579
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45556: LD_ADDR_VAR 0 2
45560: PUSH
45561: LD_VAR 0 1
45565: PPUSH
45566: CALL_OW 437
45570: PUSH
45571: LD_INT 1
45573: ARRAY
45574: PUSH
45575: LD_INT 4
45577: ARRAY
45578: ST_TO_ADDR
// end ;
45579: LD_VAR 0 2
45583: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45584: LD_INT 0
45586: PPUSH
45587: PPUSH
45588: PPUSH
45589: PPUSH
// if not base_units then
45590: LD_VAR 0 1
45594: NOT
45595: IFFALSE 45599
// exit ;
45597: GO 45686
// result := false ;
45599: LD_ADDR_VAR 0 2
45603: PUSH
45604: LD_INT 0
45606: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45607: LD_ADDR_VAR 0 5
45611: PUSH
45612: LD_VAR 0 1
45616: PPUSH
45617: LD_INT 21
45619: PUSH
45620: LD_INT 3
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PPUSH
45627: CALL_OW 72
45631: ST_TO_ADDR
// if not tmp then
45632: LD_VAR 0 5
45636: NOT
45637: IFFALSE 45641
// exit ;
45639: GO 45686
// for i in tmp do
45641: LD_ADDR_VAR 0 3
45645: PUSH
45646: LD_VAR 0 5
45650: PUSH
45651: FOR_IN
45652: IFFALSE 45684
// begin result := EnemyInRange ( i , 22 ) ;
45654: LD_ADDR_VAR 0 2
45658: PUSH
45659: LD_VAR 0 3
45663: PPUSH
45664: LD_INT 22
45666: PPUSH
45667: CALL 43111 0 2
45671: ST_TO_ADDR
// if result then
45672: LD_VAR 0 2
45676: IFFALSE 45682
// exit ;
45678: POP
45679: POP
45680: GO 45686
// end ;
45682: GO 45651
45684: POP
45685: POP
// end ;
45686: LD_VAR 0 2
45690: RET
// export function FilterByTag ( units , tag ) ; begin
45691: LD_INT 0
45693: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45694: LD_ADDR_VAR 0 3
45698: PUSH
45699: LD_VAR 0 1
45703: PPUSH
45704: LD_INT 120
45706: PUSH
45707: LD_VAR 0 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PPUSH
45716: CALL_OW 72
45720: ST_TO_ADDR
// end ;
45721: LD_VAR 0 3
45725: RET
// export function IsDriver ( un ) ; begin
45726: LD_INT 0
45728: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45729: LD_ADDR_VAR 0 2
45733: PUSH
45734: LD_VAR 0 1
45738: PUSH
45739: LD_INT 55
45741: PUSH
45742: EMPTY
45743: LIST
45744: PPUSH
45745: CALL_OW 69
45749: IN
45750: ST_TO_ADDR
// end ;
45751: LD_VAR 0 2
45755: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45756: LD_INT 0
45758: PPUSH
45759: PPUSH
// list := [ ] ;
45760: LD_ADDR_VAR 0 5
45764: PUSH
45765: EMPTY
45766: ST_TO_ADDR
// case d of 0 :
45767: LD_VAR 0 3
45771: PUSH
45772: LD_INT 0
45774: DOUBLE
45775: EQUAL
45776: IFTRUE 45780
45778: GO 45913
45780: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45781: LD_ADDR_VAR 0 5
45785: PUSH
45786: LD_VAR 0 1
45790: PUSH
45791: LD_INT 4
45793: MINUS
45794: PUSH
45795: LD_VAR 0 2
45799: PUSH
45800: LD_INT 4
45802: MINUS
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: PUSH
45812: LD_VAR 0 1
45816: PUSH
45817: LD_INT 3
45819: MINUS
45820: PUSH
45821: LD_VAR 0 2
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: PUSH
45834: LD_VAR 0 1
45838: PUSH
45839: LD_INT 4
45841: PLUS
45842: PUSH
45843: LD_VAR 0 2
45847: PUSH
45848: LD_INT 4
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: LIST
45855: PUSH
45856: LD_VAR 0 1
45860: PUSH
45861: LD_INT 3
45863: PLUS
45864: PUSH
45865: LD_VAR 0 2
45869: PUSH
45870: LD_INT 3
45872: PLUS
45873: PUSH
45874: LD_INT 5
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: PUSH
45882: LD_VAR 0 1
45886: PUSH
45887: LD_VAR 0 2
45891: PUSH
45892: LD_INT 4
45894: PLUS
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: LIST
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: ST_TO_ADDR
// end ; 1 :
45911: GO 46611
45913: LD_INT 1
45915: DOUBLE
45916: EQUAL
45917: IFTRUE 45921
45919: GO 46054
45921: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45922: LD_ADDR_VAR 0 5
45926: PUSH
45927: LD_VAR 0 1
45931: PUSH
45932: LD_VAR 0 2
45936: PUSH
45937: LD_INT 4
45939: MINUS
45940: PUSH
45941: LD_INT 3
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: LIST
45948: PUSH
45949: LD_VAR 0 1
45953: PUSH
45954: LD_INT 3
45956: MINUS
45957: PUSH
45958: LD_VAR 0 2
45962: PUSH
45963: LD_INT 3
45965: MINUS
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: LIST
45974: PUSH
45975: LD_VAR 0 1
45979: PUSH
45980: LD_INT 4
45982: MINUS
45983: PUSH
45984: LD_VAR 0 2
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: PUSH
45997: LD_VAR 0 1
46001: PUSH
46002: LD_VAR 0 2
46006: PUSH
46007: LD_INT 3
46009: PLUS
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: LIST
46018: PUSH
46019: LD_VAR 0 1
46023: PUSH
46024: LD_INT 4
46026: PLUS
46027: PUSH
46028: LD_VAR 0 2
46032: PUSH
46033: LD_INT 4
46035: PLUS
46036: PUSH
46037: LD_INT 5
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: ST_TO_ADDR
// end ; 2 :
46052: GO 46611
46054: LD_INT 2
46056: DOUBLE
46057: EQUAL
46058: IFTRUE 46062
46060: GO 46191
46062: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46063: LD_ADDR_VAR 0 5
46067: PUSH
46068: LD_VAR 0 1
46072: PUSH
46073: LD_VAR 0 2
46077: PUSH
46078: LD_INT 3
46080: MINUS
46081: PUSH
46082: LD_INT 3
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: LIST
46089: PUSH
46090: LD_VAR 0 1
46094: PUSH
46095: LD_INT 4
46097: PLUS
46098: PUSH
46099: LD_VAR 0 2
46103: PUSH
46104: LD_INT 4
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: LIST
46111: PUSH
46112: LD_VAR 0 1
46116: PUSH
46117: LD_VAR 0 2
46121: PUSH
46122: LD_INT 4
46124: PLUS
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: LIST
46133: PUSH
46134: LD_VAR 0 1
46138: PUSH
46139: LD_INT 3
46141: MINUS
46142: PUSH
46143: LD_VAR 0 2
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: PUSH
46156: LD_VAR 0 1
46160: PUSH
46161: LD_INT 4
46163: MINUS
46164: PUSH
46165: LD_VAR 0 2
46169: PUSH
46170: LD_INT 4
46172: MINUS
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// end ; 3 :
46189: GO 46611
46191: LD_INT 3
46193: DOUBLE
46194: EQUAL
46195: IFTRUE 46199
46197: GO 46332
46199: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46200: LD_ADDR_VAR 0 5
46204: PUSH
46205: LD_VAR 0 1
46209: PUSH
46210: LD_INT 3
46212: PLUS
46213: PUSH
46214: LD_VAR 0 2
46218: PUSH
46219: LD_INT 4
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: PUSH
46227: LD_VAR 0 1
46231: PUSH
46232: LD_INT 4
46234: PLUS
46235: PUSH
46236: LD_VAR 0 2
46240: PUSH
46241: LD_INT 4
46243: PLUS
46244: PUSH
46245: LD_INT 5
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: PUSH
46253: LD_VAR 0 1
46257: PUSH
46258: LD_INT 4
46260: MINUS
46261: PUSH
46262: LD_VAR 0 2
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: PUSH
46275: LD_VAR 0 1
46279: PUSH
46280: LD_VAR 0 2
46284: PUSH
46285: LD_INT 4
46287: MINUS
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: PUSH
46297: LD_VAR 0 1
46301: PUSH
46302: LD_INT 3
46304: MINUS
46305: PUSH
46306: LD_VAR 0 2
46310: PUSH
46311: LD_INT 3
46313: MINUS
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: ST_TO_ADDR
// end ; 4 :
46330: GO 46611
46332: LD_INT 4
46334: DOUBLE
46335: EQUAL
46336: IFTRUE 46340
46338: GO 46473
46340: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46341: LD_ADDR_VAR 0 5
46345: PUSH
46346: LD_VAR 0 1
46350: PUSH
46351: LD_VAR 0 2
46355: PUSH
46356: LD_INT 4
46358: PLUS
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: PUSH
46368: LD_VAR 0 1
46372: PUSH
46373: LD_INT 3
46375: PLUS
46376: PUSH
46377: LD_VAR 0 2
46381: PUSH
46382: LD_INT 3
46384: PLUS
46385: PUSH
46386: LD_INT 5
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: PUSH
46394: LD_VAR 0 1
46398: PUSH
46399: LD_INT 4
46401: PLUS
46402: PUSH
46403: LD_VAR 0 2
46407: PUSH
46408: LD_INT 4
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: LIST
46415: PUSH
46416: LD_VAR 0 1
46420: PUSH
46421: LD_VAR 0 2
46425: PUSH
46426: LD_INT 3
46428: MINUS
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: PUSH
46438: LD_VAR 0 1
46442: PUSH
46443: LD_INT 4
46445: MINUS
46446: PUSH
46447: LD_VAR 0 2
46451: PUSH
46452: LD_INT 4
46454: MINUS
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: ST_TO_ADDR
// end ; 5 :
46471: GO 46611
46473: LD_INT 5
46475: DOUBLE
46476: EQUAL
46477: IFTRUE 46481
46479: GO 46610
46481: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46482: LD_ADDR_VAR 0 5
46486: PUSH
46487: LD_VAR 0 1
46491: PUSH
46492: LD_INT 4
46494: MINUS
46495: PUSH
46496: LD_VAR 0 2
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: PUSH
46509: LD_VAR 0 1
46513: PUSH
46514: LD_VAR 0 2
46518: PUSH
46519: LD_INT 4
46521: MINUS
46522: PUSH
46523: LD_INT 3
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: PUSH
46531: LD_VAR 0 1
46535: PUSH
46536: LD_INT 4
46538: PLUS
46539: PUSH
46540: LD_VAR 0 2
46544: PUSH
46545: LD_INT 4
46547: PLUS
46548: PUSH
46549: LD_INT 5
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: PUSH
46557: LD_VAR 0 1
46561: PUSH
46562: LD_INT 3
46564: PLUS
46565: PUSH
46566: LD_VAR 0 2
46570: PUSH
46571: LD_INT 4
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: LIST
46578: PUSH
46579: LD_VAR 0 1
46583: PUSH
46584: LD_VAR 0 2
46588: PUSH
46589: LD_INT 3
46591: PLUS
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: LIST
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: ST_TO_ADDR
// end ; end ;
46608: GO 46611
46610: POP
// result := list ;
46611: LD_ADDR_VAR 0 4
46615: PUSH
46616: LD_VAR 0 5
46620: ST_TO_ADDR
// end ;
46621: LD_VAR 0 4
46625: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46626: LD_INT 0
46628: PPUSH
46629: PPUSH
46630: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46631: LD_VAR 0 1
46635: NOT
46636: IFTRUE 46664
46638: PUSH
46639: LD_VAR 0 2
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 3
46652: PUSH
46653: LD_INT 4
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: IN
46662: NOT
46663: OR
46664: IFFALSE 46668
// exit ;
46666: GO 46751
// tmp := [ ] ;
46668: LD_ADDR_VAR 0 5
46672: PUSH
46673: EMPTY
46674: ST_TO_ADDR
// for i in units do
46675: LD_ADDR_VAR 0 4
46679: PUSH
46680: LD_VAR 0 1
46684: PUSH
46685: FOR_IN
46686: IFFALSE 46720
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46688: LD_ADDR_VAR 0 5
46692: PUSH
46693: LD_VAR 0 5
46697: PPUSH
46698: LD_VAR 0 4
46702: PPUSH
46703: LD_VAR 0 2
46707: PPUSH
46708: CALL_OW 259
46712: PPUSH
46713: CALL 48146 0 2
46717: ST_TO_ADDR
46718: GO 46685
46720: POP
46721: POP
// if not tmp then
46722: LD_VAR 0 5
46726: NOT
46727: IFFALSE 46731
// exit ;
46729: GO 46751
// result := SortListByListDesc ( units , tmp ) ;
46731: LD_ADDR_VAR 0 3
46735: PUSH
46736: LD_VAR 0 1
46740: PPUSH
46741: LD_VAR 0 5
46745: PPUSH
46746: CALL_OW 77
46750: ST_TO_ADDR
// end ;
46751: LD_VAR 0 3
46755: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46756: LD_INT 0
46758: PPUSH
46759: PPUSH
46760: PPUSH
// result := false ;
46761: LD_ADDR_VAR 0 3
46765: PUSH
46766: LD_INT 0
46768: ST_TO_ADDR
// if not building then
46769: LD_VAR 0 2
46773: NOT
46774: IFFALSE 46778
// exit ;
46776: GO 46922
// x := GetX ( building ) ;
46778: LD_ADDR_VAR 0 4
46782: PUSH
46783: LD_VAR 0 2
46787: PPUSH
46788: CALL_OW 250
46792: ST_TO_ADDR
// y := GetY ( building ) ;
46793: LD_ADDR_VAR 0 5
46797: PUSH
46798: LD_VAR 0 2
46802: PPUSH
46803: CALL_OW 251
46807: ST_TO_ADDR
// if not x or not y then
46808: LD_VAR 0 4
46812: NOT
46813: IFTRUE 46822
46815: PUSH
46816: LD_VAR 0 5
46820: NOT
46821: OR
46822: IFFALSE 46826
// exit ;
46824: GO 46922
// if GetTaskList ( unit ) then
46826: LD_VAR 0 1
46830: PPUSH
46831: CALL_OW 437
46835: IFFALSE 46922
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46837: LD_STRING e
46839: PUSH
46840: LD_VAR 0 1
46844: PPUSH
46845: CALL_OW 437
46849: PUSH
46850: LD_INT 1
46852: ARRAY
46853: PUSH
46854: LD_INT 1
46856: ARRAY
46857: EQUAL
46858: IFFALSE 46885
46860: PUSH
46861: LD_VAR 0 4
46865: PUSH
46866: LD_VAR 0 1
46870: PPUSH
46871: CALL_OW 437
46875: PUSH
46876: LD_INT 1
46878: ARRAY
46879: PUSH
46880: LD_INT 2
46882: ARRAY
46883: EQUAL
46884: AND
46885: IFFALSE 46912
46887: PUSH
46888: LD_VAR 0 5
46892: PUSH
46893: LD_VAR 0 1
46897: PPUSH
46898: CALL_OW 437
46902: PUSH
46903: LD_INT 1
46905: ARRAY
46906: PUSH
46907: LD_INT 3
46909: ARRAY
46910: EQUAL
46911: AND
46912: IFFALSE 46922
// result := true end ;
46914: LD_ADDR_VAR 0 3
46918: PUSH
46919: LD_INT 1
46921: ST_TO_ADDR
// end ;
46922: LD_VAR 0 3
46926: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46927: LD_INT 0
46929: PPUSH
// result := false ;
46930: LD_ADDR_VAR 0 4
46934: PUSH
46935: LD_INT 0
46937: ST_TO_ADDR
// if GetTaskList ( unit ) then
46938: LD_VAR 0 1
46942: PPUSH
46943: CALL_OW 437
46947: IFFALSE 47034
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46949: LD_STRING M
46951: PUSH
46952: LD_VAR 0 1
46956: PPUSH
46957: CALL_OW 437
46961: PUSH
46962: LD_INT 1
46964: ARRAY
46965: PUSH
46966: LD_INT 1
46968: ARRAY
46969: EQUAL
46970: IFFALSE 46997
46972: PUSH
46973: LD_VAR 0 2
46977: PUSH
46978: LD_VAR 0 1
46982: PPUSH
46983: CALL_OW 437
46987: PUSH
46988: LD_INT 1
46990: ARRAY
46991: PUSH
46992: LD_INT 2
46994: ARRAY
46995: EQUAL
46996: AND
46997: IFFALSE 47024
46999: PUSH
47000: LD_VAR 0 3
47004: PUSH
47005: LD_VAR 0 1
47009: PPUSH
47010: CALL_OW 437
47014: PUSH
47015: LD_INT 1
47017: ARRAY
47018: PUSH
47019: LD_INT 3
47021: ARRAY
47022: EQUAL
47023: AND
47024: IFFALSE 47034
// result := true ;
47026: LD_ADDR_VAR 0 4
47030: PUSH
47031: LD_INT 1
47033: ST_TO_ADDR
// end ; end ;
47034: LD_VAR 0 4
47038: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47039: LD_INT 0
47041: PPUSH
47042: PPUSH
47043: PPUSH
47044: PPUSH
// if not unit or not area then
47045: LD_VAR 0 1
47049: NOT
47050: IFTRUE 47059
47052: PUSH
47053: LD_VAR 0 2
47057: NOT
47058: OR
47059: IFFALSE 47063
// exit ;
47061: GO 47239
// tmp := AreaToList ( area , i ) ;
47063: LD_ADDR_VAR 0 6
47067: PUSH
47068: LD_VAR 0 2
47072: PPUSH
47073: LD_VAR 0 5
47077: PPUSH
47078: CALL_OW 517
47082: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47083: LD_ADDR_VAR 0 5
47087: PUSH
47088: DOUBLE
47089: LD_INT 1
47091: DEC
47092: ST_TO_ADDR
47093: LD_VAR 0 6
47097: PUSH
47098: LD_INT 1
47100: ARRAY
47101: PUSH
47102: FOR_TO
47103: IFFALSE 47237
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47105: LD_ADDR_VAR 0 7
47109: PUSH
47110: LD_VAR 0 6
47114: PUSH
47115: LD_INT 1
47117: ARRAY
47118: PUSH
47119: LD_VAR 0 5
47123: ARRAY
47124: PUSH
47125: LD_VAR 0 6
47129: PUSH
47130: LD_INT 2
47132: ARRAY
47133: PUSH
47134: LD_VAR 0 5
47138: ARRAY
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47144: LD_INT 92
47146: PUSH
47147: LD_VAR 0 7
47151: PUSH
47152: LD_INT 1
47154: ARRAY
47155: PUSH
47156: LD_VAR 0 7
47160: PUSH
47161: LD_INT 2
47163: ARRAY
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: PPUSH
47174: CALL_OW 69
47178: PUSH
47179: LD_INT 0
47181: EQUAL
47182: IFFALSE 47235
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47184: LD_VAR 0 1
47188: PPUSH
47189: LD_VAR 0 7
47193: PUSH
47194: LD_INT 1
47196: ARRAY
47197: PPUSH
47198: LD_VAR 0 7
47202: PUSH
47203: LD_INT 2
47205: ARRAY
47206: PPUSH
47207: LD_VAR 0 3
47211: PPUSH
47212: CALL_OW 48
// result := IsPlaced ( unit ) ;
47216: LD_ADDR_VAR 0 4
47220: PUSH
47221: LD_VAR 0 1
47225: PPUSH
47226: CALL_OW 305
47230: ST_TO_ADDR
// exit ;
47231: POP
47232: POP
47233: GO 47239
// end ; end ;
47235: GO 47102
47237: POP
47238: POP
// end ;
47239: LD_VAR 0 4
47243: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47244: LD_INT 0
47246: PPUSH
47247: PPUSH
47248: PPUSH
// if not side or side > 8 then
47249: LD_VAR 0 1
47253: NOT
47254: IFTRUE 47266
47256: PUSH
47257: LD_VAR 0 1
47261: PUSH
47262: LD_INT 8
47264: GREATER
47265: OR
47266: IFFALSE 47270
// exit ;
47268: GO 47457
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47270: LD_ADDR_VAR 0 4
47274: PUSH
47275: LD_INT 22
47277: PUSH
47278: LD_VAR 0 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 21
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PPUSH
47301: CALL_OW 69
47305: ST_TO_ADDR
// if not tmp then
47306: LD_VAR 0 4
47310: NOT
47311: IFFALSE 47315
// exit ;
47313: GO 47457
// enable_addtolog := true ;
47315: LD_ADDR_OWVAR 81
47319: PUSH
47320: LD_INT 1
47322: ST_TO_ADDR
// AddToLog ( [ ) ;
47323: LD_STRING [
47325: PPUSH
47326: CALL_OW 561
// for i in tmp do
47330: LD_ADDR_VAR 0 3
47334: PUSH
47335: LD_VAR 0 4
47339: PUSH
47340: FOR_IN
47341: IFFALSE 47448
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47343: LD_STRING [
47345: PUSH
47346: LD_VAR 0 3
47350: PPUSH
47351: CALL_OW 266
47355: STR
47356: PUSH
47357: LD_STRING , 
47359: STR
47360: PUSH
47361: LD_VAR 0 3
47365: PPUSH
47366: CALL_OW 250
47370: STR
47371: PUSH
47372: LD_STRING , 
47374: STR
47375: PUSH
47376: LD_VAR 0 3
47380: PPUSH
47381: CALL_OW 251
47385: STR
47386: PUSH
47387: LD_STRING , 
47389: STR
47390: PUSH
47391: LD_VAR 0 3
47395: PPUSH
47396: CALL_OW 254
47400: STR
47401: PUSH
47402: LD_STRING , 
47404: STR
47405: PUSH
47406: LD_VAR 0 3
47410: PPUSH
47411: LD_INT 1
47413: PPUSH
47414: CALL_OW 268
47418: STR
47419: PUSH
47420: LD_STRING , 
47422: STR
47423: PUSH
47424: LD_VAR 0 3
47428: PPUSH
47429: LD_INT 2
47431: PPUSH
47432: CALL_OW 268
47436: STR
47437: PUSH
47438: LD_STRING ],
47440: STR
47441: PPUSH
47442: CALL_OW 561
// end ;
47446: GO 47340
47448: POP
47449: POP
// AddToLog ( ]; ) ;
47450: LD_STRING ];
47452: PPUSH
47453: CALL_OW 561
// end ;
47457: LD_VAR 0 2
47461: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47462: LD_INT 0
47464: PPUSH
47465: PPUSH
47466: PPUSH
47467: PPUSH
47468: PPUSH
// if not area or not rate or not max then
47469: LD_VAR 0 1
47473: NOT
47474: IFTRUE 47483
47476: PUSH
47477: LD_VAR 0 2
47481: NOT
47482: OR
47483: IFTRUE 47492
47485: PUSH
47486: LD_VAR 0 4
47490: NOT
47491: OR
47492: IFFALSE 47496
// exit ;
47494: GO 47685
// while 1 do
47496: LD_INT 1
47498: IFFALSE 47685
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47500: LD_ADDR_VAR 0 9
47504: PUSH
47505: LD_VAR 0 1
47509: PPUSH
47510: LD_INT 1
47512: PPUSH
47513: CALL_OW 287
47517: PUSH
47518: LD_INT 10
47520: MUL
47521: ST_TO_ADDR
// r := rate / 10 ;
47522: LD_ADDR_VAR 0 7
47526: PUSH
47527: LD_VAR 0 2
47531: PUSH
47532: LD_INT 10
47534: DIVREAL
47535: ST_TO_ADDR
// time := 1 1$00 ;
47536: LD_ADDR_VAR 0 8
47540: PUSH
47541: LD_INT 2100
47543: ST_TO_ADDR
// if amount < min then
47544: LD_VAR 0 9
47548: PUSH
47549: LD_VAR 0 3
47553: LESS
47554: IFFALSE 47572
// r := r * 2 else
47556: LD_ADDR_VAR 0 7
47560: PUSH
47561: LD_VAR 0 7
47565: PUSH
47566: LD_INT 2
47568: MUL
47569: ST_TO_ADDR
47570: GO 47598
// if amount > max then
47572: LD_VAR 0 9
47576: PUSH
47577: LD_VAR 0 4
47581: GREATER
47582: IFFALSE 47598
// r := r / 2 ;
47584: LD_ADDR_VAR 0 7
47588: PUSH
47589: LD_VAR 0 7
47593: PUSH
47594: LD_INT 2
47596: DIVREAL
47597: ST_TO_ADDR
// time := time / r ;
47598: LD_ADDR_VAR 0 8
47602: PUSH
47603: LD_VAR 0 8
47607: PUSH
47608: LD_VAR 0 7
47612: DIVREAL
47613: ST_TO_ADDR
// if time < 0 then
47614: LD_VAR 0 8
47618: PUSH
47619: LD_INT 0
47621: LESS
47622: IFFALSE 47639
// time := time * - 1 ;
47624: LD_ADDR_VAR 0 8
47628: PUSH
47629: LD_VAR 0 8
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: MUL
47638: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47639: LD_VAR 0 8
47643: PUSH
47644: LD_INT 35
47646: PPUSH
47647: LD_INT 875
47649: PPUSH
47650: CALL_OW 12
47654: PLUS
47655: PPUSH
47656: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47660: LD_INT 1
47662: PPUSH
47663: LD_INT 5
47665: PPUSH
47666: CALL_OW 12
47670: PPUSH
47671: LD_VAR 0 1
47675: PPUSH
47676: LD_INT 1
47678: PPUSH
47679: CALL_OW 55
// end ;
47683: GO 47496
// end ;
47685: LD_VAR 0 5
47689: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47690: LD_INT 0
47692: PPUSH
47693: PPUSH
47694: PPUSH
47695: PPUSH
47696: PPUSH
47697: PPUSH
47698: PPUSH
47699: PPUSH
// if not turrets or not factories then
47700: LD_VAR 0 1
47704: NOT
47705: IFTRUE 47714
47707: PUSH
47708: LD_VAR 0 2
47712: NOT
47713: OR
47714: IFFALSE 47718
// exit ;
47716: GO 48025
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47718: LD_ADDR_VAR 0 10
47722: PUSH
47723: LD_INT 5
47725: PUSH
47726: LD_INT 6
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 4
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: LD_INT 5
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 24
47760: PUSH
47761: LD_INT 25
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 23
47770: PUSH
47771: LD_INT 27
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 42
47784: PUSH
47785: LD_INT 43
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 44
47794: PUSH
47795: LD_INT 46
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 45
47804: PUSH
47805: LD_INT 47
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: ST_TO_ADDR
// result := [ ] ;
47822: LD_ADDR_VAR 0 3
47826: PUSH
47827: EMPTY
47828: ST_TO_ADDR
// for i in turrets do
47829: LD_ADDR_VAR 0 4
47833: PUSH
47834: LD_VAR 0 1
47838: PUSH
47839: FOR_IN
47840: IFFALSE 48023
// begin nat := GetNation ( i ) ;
47842: LD_ADDR_VAR 0 7
47846: PUSH
47847: LD_VAR 0 4
47851: PPUSH
47852: CALL_OW 248
47856: ST_TO_ADDR
// weapon := 0 ;
47857: LD_ADDR_VAR 0 8
47861: PUSH
47862: LD_INT 0
47864: ST_TO_ADDR
// if not nat then
47865: LD_VAR 0 7
47869: NOT
47870: IFFALSE 47874
// continue ;
47872: GO 47839
// for j in list [ nat ] do
47874: LD_ADDR_VAR 0 5
47878: PUSH
47879: LD_VAR 0 10
47883: PUSH
47884: LD_VAR 0 7
47888: ARRAY
47889: PUSH
47890: FOR_IN
47891: IFFALSE 47932
// if GetBWeapon ( i ) = j [ 1 ] then
47893: LD_VAR 0 4
47897: PPUSH
47898: CALL_OW 269
47902: PUSH
47903: LD_VAR 0 5
47907: PUSH
47908: LD_INT 1
47910: ARRAY
47911: EQUAL
47912: IFFALSE 47930
// begin weapon := j [ 2 ] ;
47914: LD_ADDR_VAR 0 8
47918: PUSH
47919: LD_VAR 0 5
47923: PUSH
47924: LD_INT 2
47926: ARRAY
47927: ST_TO_ADDR
// break ;
47928: GO 47932
// end ;
47930: GO 47890
47932: POP
47933: POP
// if not weapon then
47934: LD_VAR 0 8
47938: NOT
47939: IFFALSE 47943
// continue ;
47941: GO 47839
// for k in factories do
47943: LD_ADDR_VAR 0 6
47947: PUSH
47948: LD_VAR 0 2
47952: PUSH
47953: FOR_IN
47954: IFFALSE 48019
// begin weapons := AvailableWeaponList ( k ) ;
47956: LD_ADDR_VAR 0 9
47960: PUSH
47961: LD_VAR 0 6
47965: PPUSH
47966: CALL_OW 478
47970: ST_TO_ADDR
// if not weapons then
47971: LD_VAR 0 9
47975: NOT
47976: IFFALSE 47980
// continue ;
47978: GO 47953
// if weapon in weapons then
47980: LD_VAR 0 8
47984: PUSH
47985: LD_VAR 0 9
47989: IN
47990: IFFALSE 48017
// begin result := [ i , weapon ] ;
47992: LD_ADDR_VAR 0 3
47996: PUSH
47997: LD_VAR 0 4
48001: PUSH
48002: LD_VAR 0 8
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: ST_TO_ADDR
// exit ;
48011: POP
48012: POP
48013: POP
48014: POP
48015: GO 48025
// end ; end ;
48017: GO 47953
48019: POP
48020: POP
// end ;
48021: GO 47839
48023: POP
48024: POP
// end ;
48025: LD_VAR 0 3
48029: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48030: LD_INT 0
48032: PPUSH
// if not side or side > 8 then
48033: LD_VAR 0 3
48037: NOT
48038: IFTRUE 48050
48040: PUSH
48041: LD_VAR 0 3
48045: PUSH
48046: LD_INT 8
48048: GREATER
48049: OR
48050: IFFALSE 48054
// exit ;
48052: GO 48113
// if not range then
48054: LD_VAR 0 4
48058: NOT
48059: IFFALSE 48070
// range := - 12 ;
48061: LD_ADDR_VAR 0 4
48065: PUSH
48066: LD_INT 12
48068: NEG
48069: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48070: LD_VAR 0 1
48074: PPUSH
48075: LD_VAR 0 2
48079: PPUSH
48080: LD_VAR 0 3
48084: PPUSH
48085: LD_VAR 0 4
48089: PPUSH
48090: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48094: LD_VAR 0 1
48098: PPUSH
48099: LD_VAR 0 2
48103: PPUSH
48104: LD_VAR 0 3
48108: PPUSH
48109: CALL_OW 331
// end ;
48113: LD_VAR 0 5
48117: RET
// export function Video ( mode ) ; begin
48118: LD_INT 0
48120: PPUSH
// ingame_video = mode ;
48121: LD_ADDR_OWVAR 52
48125: PUSH
48126: LD_VAR 0 1
48130: ST_TO_ADDR
// interface_hidden = mode ;
48131: LD_ADDR_OWVAR 54
48135: PUSH
48136: LD_VAR 0 1
48140: ST_TO_ADDR
// end ;
48141: LD_VAR 0 2
48145: RET
// export function Join ( array , element ) ; begin
48146: LD_INT 0
48148: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48149: LD_ADDR_VAR 0 3
48153: PUSH
48154: LD_VAR 0 1
48158: PPUSH
48159: LD_VAR 0 1
48163: PUSH
48164: LD_INT 1
48166: PLUS
48167: PPUSH
48168: LD_VAR 0 2
48172: PPUSH
48173: CALL_OW 1
48177: ST_TO_ADDR
// end ;
48178: LD_VAR 0 3
48182: RET
// export function JoinUnion ( array , element ) ; begin
48183: LD_INT 0
48185: PPUSH
// result := array union element ;
48186: LD_ADDR_VAR 0 3
48190: PUSH
48191: LD_VAR 0 1
48195: PUSH
48196: LD_VAR 0 2
48200: UNION
48201: ST_TO_ADDR
// end ;
48202: LD_VAR 0 3
48206: RET
// export function GetBehemoths ( side ) ; begin
48207: LD_INT 0
48209: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48210: LD_ADDR_VAR 0 2
48214: PUSH
48215: LD_INT 22
48217: PUSH
48218: LD_VAR 0 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 31
48229: PUSH
48230: LD_INT 25
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PPUSH
48241: CALL_OW 69
48245: ST_TO_ADDR
// end ;
48246: LD_VAR 0 2
48250: RET
// export function Shuffle ( array ) ; var i , index ; begin
48251: LD_INT 0
48253: PPUSH
48254: PPUSH
48255: PPUSH
// result := [ ] ;
48256: LD_ADDR_VAR 0 2
48260: PUSH
48261: EMPTY
48262: ST_TO_ADDR
// if not array then
48263: LD_VAR 0 1
48267: NOT
48268: IFFALSE 48272
// exit ;
48270: GO 48371
// Randomize ;
48272: CALL_OW 10
// for i = array downto 1 do
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: DOUBLE
48282: LD_VAR 0 1
48286: INC
48287: ST_TO_ADDR
48288: LD_INT 1
48290: PUSH
48291: FOR_DOWNTO
48292: IFFALSE 48369
// begin index := rand ( 1 , array ) ;
48294: LD_ADDR_VAR 0 4
48298: PUSH
48299: LD_INT 1
48301: PPUSH
48302: LD_VAR 0 1
48306: PPUSH
48307: CALL_OW 12
48311: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48312: LD_ADDR_VAR 0 2
48316: PUSH
48317: LD_VAR 0 2
48321: PPUSH
48322: LD_VAR 0 2
48326: PUSH
48327: LD_INT 1
48329: PLUS
48330: PPUSH
48331: LD_VAR 0 1
48335: PUSH
48336: LD_VAR 0 4
48340: ARRAY
48341: PPUSH
48342: CALL_OW 2
48346: ST_TO_ADDR
// array := Delete ( array , index ) ;
48347: LD_ADDR_VAR 0 1
48351: PUSH
48352: LD_VAR 0 1
48356: PPUSH
48357: LD_VAR 0 4
48361: PPUSH
48362: CALL_OW 3
48366: ST_TO_ADDR
// end ;
48367: GO 48291
48369: POP
48370: POP
// end ;
48371: LD_VAR 0 2
48375: RET
// export function GetBaseMaterials ( base ) ; begin
48376: LD_INT 0
48378: PPUSH
// result := [ 0 , 0 , 0 ] ;
48379: LD_ADDR_VAR 0 2
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: LIST
48397: ST_TO_ADDR
// if not base then
48398: LD_VAR 0 1
48402: NOT
48403: IFFALSE 48407
// exit ;
48405: GO 48456
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48407: LD_ADDR_VAR 0 2
48411: PUSH
48412: LD_VAR 0 1
48416: PPUSH
48417: LD_INT 1
48419: PPUSH
48420: CALL_OW 275
48424: PUSH
48425: LD_VAR 0 1
48429: PPUSH
48430: LD_INT 2
48432: PPUSH
48433: CALL_OW 275
48437: PUSH
48438: LD_VAR 0 1
48442: PPUSH
48443: LD_INT 3
48445: PPUSH
48446: CALL_OW 275
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: LIST
48455: ST_TO_ADDR
// end ;
48456: LD_VAR 0 2
48460: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48461: LD_INT 0
48463: PPUSH
48464: PPUSH
// result := array ;
48465: LD_ADDR_VAR 0 3
48469: PUSH
48470: LD_VAR 0 1
48474: ST_TO_ADDR
// if size >= result then
48475: LD_VAR 0 2
48479: PUSH
48480: LD_VAR 0 3
48484: GREATEREQUAL
48485: IFFALSE 48489
// exit ;
48487: GO 48539
// if size then
48489: LD_VAR 0 2
48493: IFFALSE 48539
// for i := array downto size do
48495: LD_ADDR_VAR 0 4
48499: PUSH
48500: DOUBLE
48501: LD_VAR 0 1
48505: INC
48506: ST_TO_ADDR
48507: LD_VAR 0 2
48511: PUSH
48512: FOR_DOWNTO
48513: IFFALSE 48537
// result := Delete ( result , result ) ;
48515: LD_ADDR_VAR 0 3
48519: PUSH
48520: LD_VAR 0 3
48524: PPUSH
48525: LD_VAR 0 3
48529: PPUSH
48530: CALL_OW 3
48534: ST_TO_ADDR
48535: GO 48512
48537: POP
48538: POP
// end ;
48539: LD_VAR 0 3
48543: RET
// export function ComExit ( unit ) ; var tmp ; begin
48544: LD_INT 0
48546: PPUSH
48547: PPUSH
// if not IsInUnit ( unit ) then
48548: LD_VAR 0 1
48552: PPUSH
48553: CALL_OW 310
48557: NOT
48558: IFFALSE 48562
// exit ;
48560: GO 48622
// tmp := IsInUnit ( unit ) ;
48562: LD_ADDR_VAR 0 3
48566: PUSH
48567: LD_VAR 0 1
48571: PPUSH
48572: CALL_OW 310
48576: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48577: LD_VAR 0 3
48581: PPUSH
48582: CALL_OW 247
48586: PUSH
48587: LD_INT 2
48589: EQUAL
48590: IFFALSE 48603
// ComExitVehicle ( unit ) else
48592: LD_VAR 0 1
48596: PPUSH
48597: CALL_OW 121
48601: GO 48612
// ComExitBuilding ( unit ) ;
48603: LD_VAR 0 1
48607: PPUSH
48608: CALL_OW 122
// result := tmp ;
48612: LD_ADDR_VAR 0 2
48616: PUSH
48617: LD_VAR 0 3
48621: ST_TO_ADDR
// end ;
48622: LD_VAR 0 2
48626: RET
// export function ComExitAll ( units ) ; var i ; begin
48627: LD_INT 0
48629: PPUSH
48630: PPUSH
// if not units then
48631: LD_VAR 0 1
48635: NOT
48636: IFFALSE 48640
// exit ;
48638: GO 48666
// for i in units do
48640: LD_ADDR_VAR 0 3
48644: PUSH
48645: LD_VAR 0 1
48649: PUSH
48650: FOR_IN
48651: IFFALSE 48664
// ComExit ( i ) ;
48653: LD_VAR 0 3
48657: PPUSH
48658: CALL 48544 0 1
48662: GO 48650
48664: POP
48665: POP
// end ;
48666: LD_VAR 0 2
48670: RET
// export function ResetHc ; begin
48671: LD_INT 0
48673: PPUSH
// InitHc ;
48674: CALL_OW 19
// hc_importance := 0 ;
48678: LD_ADDR_OWVAR 32
48682: PUSH
48683: LD_INT 0
48685: ST_TO_ADDR
// end ;
48686: LD_VAR 0 1
48690: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48691: LD_INT 0
48693: PPUSH
48694: PPUSH
48695: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48696: LD_ADDR_VAR 0 6
48700: PUSH
48701: LD_VAR 0 1
48705: PUSH
48706: LD_VAR 0 3
48710: PLUS
48711: PUSH
48712: LD_INT 2
48714: DIV
48715: ST_TO_ADDR
// if _x < 0 then
48716: LD_VAR 0 6
48720: PUSH
48721: LD_INT 0
48723: LESS
48724: IFFALSE 48741
// _x := _x * - 1 ;
48726: LD_ADDR_VAR 0 6
48730: PUSH
48731: LD_VAR 0 6
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: MUL
48740: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48741: LD_ADDR_VAR 0 7
48745: PUSH
48746: LD_VAR 0 2
48750: PUSH
48751: LD_VAR 0 4
48755: PLUS
48756: PUSH
48757: LD_INT 2
48759: DIV
48760: ST_TO_ADDR
// if _y < 0 then
48761: LD_VAR 0 7
48765: PUSH
48766: LD_INT 0
48768: LESS
48769: IFFALSE 48786
// _y := _y * - 1 ;
48771: LD_ADDR_VAR 0 7
48775: PUSH
48776: LD_VAR 0 7
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: MUL
48785: ST_TO_ADDR
// result := [ _x , _y ] ;
48786: LD_ADDR_VAR 0 5
48790: PUSH
48791: LD_VAR 0 6
48795: PUSH
48796: LD_VAR 0 7
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: ST_TO_ADDR
// end ;
48805: LD_VAR 0 5
48809: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48810: LD_INT 0
48812: PPUSH
48813: PPUSH
48814: PPUSH
48815: PPUSH
// task := GetTaskList ( unit ) ;
48816: LD_ADDR_VAR 0 7
48820: PUSH
48821: LD_VAR 0 1
48825: PPUSH
48826: CALL_OW 437
48830: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48831: LD_VAR 0 7
48835: NOT
48836: IFFALSE 48855
48838: PUSH
48839: LD_VAR 0 1
48843: PPUSH
48844: LD_VAR 0 2
48848: PPUSH
48849: CALL_OW 308
48853: NOT
48854: AND
48855: IFFALSE 48859
// exit ;
48857: GO 48977
// if IsInArea ( unit , area ) then
48859: LD_VAR 0 1
48863: PPUSH
48864: LD_VAR 0 2
48868: PPUSH
48869: CALL_OW 308
48873: IFFALSE 48891
// begin ComMoveToArea ( unit , goAway ) ;
48875: LD_VAR 0 1
48879: PPUSH
48880: LD_VAR 0 3
48884: PPUSH
48885: CALL_OW 113
// exit ;
48889: GO 48977
// end ; if task [ 1 ] [ 1 ] <> M then
48891: LD_VAR 0 7
48895: PUSH
48896: LD_INT 1
48898: ARRAY
48899: PUSH
48900: LD_INT 1
48902: ARRAY
48903: PUSH
48904: LD_STRING M
48906: NONEQUAL
48907: IFFALSE 48911
// exit ;
48909: GO 48977
// x := task [ 1 ] [ 2 ] ;
48911: LD_ADDR_VAR 0 5
48915: PUSH
48916: LD_VAR 0 7
48920: PUSH
48921: LD_INT 1
48923: ARRAY
48924: PUSH
48925: LD_INT 2
48927: ARRAY
48928: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48929: LD_ADDR_VAR 0 6
48933: PUSH
48934: LD_VAR 0 7
48938: PUSH
48939: LD_INT 1
48941: ARRAY
48942: PUSH
48943: LD_INT 3
48945: ARRAY
48946: ST_TO_ADDR
// if InArea ( x , y , area ) then
48947: LD_VAR 0 5
48951: PPUSH
48952: LD_VAR 0 6
48956: PPUSH
48957: LD_VAR 0 2
48961: PPUSH
48962: CALL_OW 309
48966: IFFALSE 48977
// ComStop ( unit ) ;
48968: LD_VAR 0 1
48972: PPUSH
48973: CALL_OW 141
// end ;
48977: LD_VAR 0 4
48981: RET
// export function Abs ( value ) ; begin
48982: LD_INT 0
48984: PPUSH
// result := value ;
48985: LD_ADDR_VAR 0 2
48989: PUSH
48990: LD_VAR 0 1
48994: ST_TO_ADDR
// if value < 0 then
48995: LD_VAR 0 1
48999: PUSH
49000: LD_INT 0
49002: LESS
49003: IFFALSE 49020
// result := value * - 1 ;
49005: LD_ADDR_VAR 0 2
49009: PUSH
49010: LD_VAR 0 1
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: MUL
49019: ST_TO_ADDR
// end ;
49020: LD_VAR 0 2
49024: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49025: LD_INT 0
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
// if not unit or not building then
49035: LD_VAR 0 1
49039: NOT
49040: IFTRUE 49049
49042: PUSH
49043: LD_VAR 0 2
49047: NOT
49048: OR
49049: IFFALSE 49053
// exit ;
49051: GO 49281
// x := GetX ( building ) ;
49053: LD_ADDR_VAR 0 4
49057: PUSH
49058: LD_VAR 0 2
49062: PPUSH
49063: CALL_OW 250
49067: ST_TO_ADDR
// y := GetY ( building ) ;
49068: LD_ADDR_VAR 0 6
49072: PUSH
49073: LD_VAR 0 2
49077: PPUSH
49078: CALL_OW 251
49082: ST_TO_ADDR
// d := GetDir ( building ) ;
49083: LD_ADDR_VAR 0 8
49087: PUSH
49088: LD_VAR 0 2
49092: PPUSH
49093: CALL_OW 254
49097: ST_TO_ADDR
// r := 4 ;
49098: LD_ADDR_VAR 0 9
49102: PUSH
49103: LD_INT 4
49105: ST_TO_ADDR
// for i := 1 to 5 do
49106: LD_ADDR_VAR 0 10
49110: PUSH
49111: DOUBLE
49112: LD_INT 1
49114: DEC
49115: ST_TO_ADDR
49116: LD_INT 5
49118: PUSH
49119: FOR_TO
49120: IFFALSE 49279
// begin _x := ShiftX ( x , d , r + i ) ;
49122: LD_ADDR_VAR 0 5
49126: PUSH
49127: LD_VAR 0 4
49131: PPUSH
49132: LD_VAR 0 8
49136: PPUSH
49137: LD_VAR 0 9
49141: PUSH
49142: LD_VAR 0 10
49146: PLUS
49147: PPUSH
49148: CALL_OW 272
49152: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49153: LD_ADDR_VAR 0 7
49157: PUSH
49158: LD_VAR 0 6
49162: PPUSH
49163: LD_VAR 0 8
49167: PPUSH
49168: LD_VAR 0 9
49172: PUSH
49173: LD_VAR 0 10
49177: PLUS
49178: PPUSH
49179: CALL_OW 273
49183: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49184: LD_VAR 0 5
49188: PPUSH
49189: LD_VAR 0 7
49193: PPUSH
49194: CALL_OW 488
49198: IFFALSE 49233
49200: PUSH
49201: LD_VAR 0 5
49205: PPUSH
49206: LD_VAR 0 7
49210: PPUSH
49211: CALL_OW 428
49215: PPUSH
49216: CALL_OW 247
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: IN
49231: NOT
49232: AND
49233: IFFALSE 49277
// begin ComMoveXY ( unit , _x , _y ) ;
49235: LD_VAR 0 1
49239: PPUSH
49240: LD_VAR 0 5
49244: PPUSH
49245: LD_VAR 0 7
49249: PPUSH
49250: CALL_OW 111
// result := [ _x , _y ] ;
49254: LD_ADDR_VAR 0 3
49258: PUSH
49259: LD_VAR 0 5
49263: PUSH
49264: LD_VAR 0 7
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: ST_TO_ADDR
// exit ;
49273: POP
49274: POP
49275: GO 49281
// end ; end ;
49277: GO 49119
49279: POP
49280: POP
// end ;
49281: LD_VAR 0 3
49285: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49286: LD_INT 0
49288: PPUSH
49289: PPUSH
49290: PPUSH
// result := 0 ;
49291: LD_ADDR_VAR 0 3
49295: PUSH
49296: LD_INT 0
49298: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49299: LD_VAR 0 1
49303: PUSH
49304: LD_INT 0
49306: LESS
49307: IFTRUE 49319
49309: PUSH
49310: LD_VAR 0 1
49314: PUSH
49315: LD_INT 8
49317: GREATER
49318: OR
49319: IFTRUE 49331
49321: PUSH
49322: LD_VAR 0 2
49326: PUSH
49327: LD_INT 0
49329: LESS
49330: OR
49331: IFTRUE 49343
49333: PUSH
49334: LD_VAR 0 2
49338: PUSH
49339: LD_INT 8
49341: GREATER
49342: OR
49343: IFFALSE 49347
// exit ;
49345: GO 49422
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49347: LD_ADDR_VAR 0 4
49351: PUSH
49352: LD_INT 22
49354: PUSH
49355: LD_VAR 0 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PPUSH
49364: CALL_OW 69
49368: PUSH
49369: FOR_IN
49370: IFFALSE 49420
// begin un := UnitShoot ( i ) ;
49372: LD_ADDR_VAR 0 5
49376: PUSH
49377: LD_VAR 0 4
49381: PPUSH
49382: CALL_OW 504
49386: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49387: LD_VAR 0 5
49391: PPUSH
49392: CALL_OW 255
49396: PUSH
49397: LD_VAR 0 1
49401: EQUAL
49402: IFFALSE 49418
// begin result := un ;
49404: LD_ADDR_VAR 0 3
49408: PUSH
49409: LD_VAR 0 5
49413: ST_TO_ADDR
// exit ;
49414: POP
49415: POP
49416: GO 49422
// end ; end ;
49418: GO 49369
49420: POP
49421: POP
// end ;
49422: LD_VAR 0 3
49426: RET
// export function GetCargoBay ( units ) ; begin
49427: LD_INT 0
49429: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49430: LD_ADDR_VAR 0 2
49434: PUSH
49435: LD_VAR 0 1
49439: PPUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 34
49445: PUSH
49446: LD_INT 12
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 34
49455: PUSH
49456: LD_INT 51
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 34
49465: PUSH
49466: LD_INT 32
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 34
49475: PUSH
49476: LD_INT 89
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: PPUSH
49490: CALL_OW 72
49494: ST_TO_ADDR
// end ;
49495: LD_VAR 0 2
49499: RET
// export function Negate ( value ) ; begin
49500: LD_INT 0
49502: PPUSH
// result := not value ;
49503: LD_ADDR_VAR 0 2
49507: PUSH
49508: LD_VAR 0 1
49512: NOT
49513: ST_TO_ADDR
// end ;
49514: LD_VAR 0 2
49518: RET
// export function Inc ( value ) ; begin
49519: LD_INT 0
49521: PPUSH
// result := value + 1 ;
49522: LD_ADDR_VAR 0 2
49526: PUSH
49527: LD_VAR 0 1
49531: PUSH
49532: LD_INT 1
49534: PLUS
49535: ST_TO_ADDR
// end ;
49536: LD_VAR 0 2
49540: RET
// export function Dec ( value ) ; begin
49541: LD_INT 0
49543: PPUSH
// result := value - 1 ;
49544: LD_ADDR_VAR 0 2
49548: PUSH
49549: LD_VAR 0 1
49553: PUSH
49554: LD_INT 1
49556: MINUS
49557: ST_TO_ADDR
// end ;
49558: LD_VAR 0 2
49562: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49563: LD_INT 0
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49573: LD_VAR 0 1
49577: PPUSH
49578: LD_VAR 0 2
49582: PPUSH
49583: CALL_OW 488
49587: NOT
49588: IFTRUE 49607
49590: PUSH
49591: LD_VAR 0 3
49595: PPUSH
49596: LD_VAR 0 4
49600: PPUSH
49601: CALL_OW 488
49605: NOT
49606: OR
49607: IFFALSE 49620
// begin result := - 1 ;
49609: LD_ADDR_VAR 0 5
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: ST_TO_ADDR
// exit ;
49618: GO 49855
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49620: LD_ADDR_VAR 0 12
49624: PUSH
49625: LD_VAR 0 1
49629: PPUSH
49630: LD_VAR 0 2
49634: PPUSH
49635: LD_VAR 0 3
49639: PPUSH
49640: LD_VAR 0 4
49644: PPUSH
49645: CALL 48691 0 4
49649: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49650: LD_ADDR_VAR 0 11
49654: PUSH
49655: LD_VAR 0 1
49659: PPUSH
49660: LD_VAR 0 2
49664: PPUSH
49665: LD_VAR 0 12
49669: PUSH
49670: LD_INT 1
49672: ARRAY
49673: PPUSH
49674: LD_VAR 0 12
49678: PUSH
49679: LD_INT 2
49681: ARRAY
49682: PPUSH
49683: CALL_OW 298
49687: ST_TO_ADDR
// distance := 9999 ;
49688: LD_ADDR_VAR 0 10
49692: PUSH
49693: LD_INT 9999
49695: ST_TO_ADDR
// for i := 0 to 5 do
49696: LD_ADDR_VAR 0 6
49700: PUSH
49701: DOUBLE
49702: LD_INT 0
49704: DEC
49705: ST_TO_ADDR
49706: LD_INT 5
49708: PUSH
49709: FOR_TO
49710: IFFALSE 49853
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49712: LD_ADDR_VAR 0 7
49716: PUSH
49717: LD_VAR 0 1
49721: PPUSH
49722: LD_VAR 0 6
49726: PPUSH
49727: LD_VAR 0 11
49731: PPUSH
49732: CALL_OW 272
49736: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49737: LD_ADDR_VAR 0 8
49741: PUSH
49742: LD_VAR 0 2
49746: PPUSH
49747: LD_VAR 0 6
49751: PPUSH
49752: LD_VAR 0 11
49756: PPUSH
49757: CALL_OW 273
49761: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49762: LD_VAR 0 7
49766: PPUSH
49767: LD_VAR 0 8
49771: PPUSH
49772: CALL_OW 488
49776: NOT
49777: IFFALSE 49781
// continue ;
49779: GO 49709
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49781: LD_ADDR_VAR 0 9
49785: PUSH
49786: LD_VAR 0 12
49790: PUSH
49791: LD_INT 1
49793: ARRAY
49794: PPUSH
49795: LD_VAR 0 12
49799: PUSH
49800: LD_INT 2
49802: ARRAY
49803: PPUSH
49804: LD_VAR 0 7
49808: PPUSH
49809: LD_VAR 0 8
49813: PPUSH
49814: CALL_OW 298
49818: ST_TO_ADDR
// if tmp < distance then
49819: LD_VAR 0 9
49823: PUSH
49824: LD_VAR 0 10
49828: LESS
49829: IFFALSE 49851
// begin result := i ;
49831: LD_ADDR_VAR 0 5
49835: PUSH
49836: LD_VAR 0 6
49840: ST_TO_ADDR
// distance := tmp ;
49841: LD_ADDR_VAR 0 10
49845: PUSH
49846: LD_VAR 0 9
49850: ST_TO_ADDR
// end ; end ;
49851: GO 49709
49853: POP
49854: POP
// end ;
49855: LD_VAR 0 5
49859: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49860: LD_INT 0
49862: PPUSH
49863: PPUSH
// if not driver or not IsInUnit ( driver ) then
49864: LD_VAR 0 1
49868: NOT
49869: IFTRUE 49883
49871: PUSH
49872: LD_VAR 0 1
49876: PPUSH
49877: CALL_OW 310
49881: NOT
49882: OR
49883: IFFALSE 49887
// exit ;
49885: GO 49977
// vehicle := IsInUnit ( driver ) ;
49887: LD_ADDR_VAR 0 3
49891: PUSH
49892: LD_VAR 0 1
49896: PPUSH
49897: CALL_OW 310
49901: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49902: LD_VAR 0 1
49906: PPUSH
49907: LD_STRING \
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: PUSH
49937: LD_STRING E
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_VAR 0 3
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PPUSH
49973: CALL_OW 446
// end ;
49977: LD_VAR 0 2
49981: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49982: LD_INT 0
49984: PPUSH
49985: PPUSH
// if not driver or not IsInUnit ( driver ) then
49986: LD_VAR 0 1
49990: NOT
49991: IFTRUE 50005
49993: PUSH
49994: LD_VAR 0 1
49998: PPUSH
49999: CALL_OW 310
50003: NOT
50004: OR
50005: IFFALSE 50009
// exit ;
50007: GO 50099
// vehicle := IsInUnit ( driver ) ;
50009: LD_ADDR_VAR 0 3
50013: PUSH
50014: LD_VAR 0 1
50018: PPUSH
50019: CALL_OW 310
50023: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50024: LD_VAR 0 1
50028: PPUSH
50029: LD_STRING \
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 0
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: PUSH
50059: LD_STRING E
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_VAR 0 3
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PPUSH
50095: CALL_OW 447
// end ;
50099: LD_VAR 0 2
50103: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50104: LD_INT 0
50106: PPUSH
50107: PPUSH
50108: PPUSH
// tmp := [ ] ;
50109: LD_ADDR_VAR 0 5
50113: PUSH
50114: EMPTY
50115: ST_TO_ADDR
// for i in units do
50116: LD_ADDR_VAR 0 4
50120: PUSH
50121: LD_VAR 0 1
50125: PUSH
50126: FOR_IN
50127: IFFALSE 50165
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50129: LD_ADDR_VAR 0 5
50133: PUSH
50134: LD_VAR 0 5
50138: PPUSH
50139: LD_VAR 0 5
50143: PUSH
50144: LD_INT 1
50146: PLUS
50147: PPUSH
50148: LD_VAR 0 4
50152: PPUSH
50153: CALL_OW 256
50157: PPUSH
50158: CALL_OW 2
50162: ST_TO_ADDR
50163: GO 50126
50165: POP
50166: POP
// if not tmp then
50167: LD_VAR 0 5
50171: NOT
50172: IFFALSE 50176
// exit ;
50174: GO 50224
// if asc then
50176: LD_VAR 0 2
50180: IFFALSE 50204
// result := SortListByListAsc ( units , tmp ) else
50182: LD_ADDR_VAR 0 3
50186: PUSH
50187: LD_VAR 0 1
50191: PPUSH
50192: LD_VAR 0 5
50196: PPUSH
50197: CALL_OW 76
50201: ST_TO_ADDR
50202: GO 50224
// result := SortListByListDesc ( units , tmp ) ;
50204: LD_ADDR_VAR 0 3
50208: PUSH
50209: LD_VAR 0 1
50213: PPUSH
50214: LD_VAR 0 5
50218: PPUSH
50219: CALL_OW 77
50223: ST_TO_ADDR
// end ;
50224: LD_VAR 0 3
50228: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50229: LD_INT 0
50231: PPUSH
50232: PPUSH
// task := GetTaskList ( mech ) ;
50233: LD_ADDR_VAR 0 4
50237: PUSH
50238: LD_VAR 0 1
50242: PPUSH
50243: CALL_OW 437
50247: ST_TO_ADDR
// if not task then
50248: LD_VAR 0 4
50252: NOT
50253: IFFALSE 50257
// exit ;
50255: GO 50301
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50257: LD_ADDR_VAR 0 3
50261: PUSH
50262: LD_VAR 0 4
50266: PUSH
50267: LD_INT 1
50269: ARRAY
50270: PUSH
50271: LD_INT 1
50273: ARRAY
50274: PUSH
50275: LD_STRING r
50277: EQUAL
50278: IFFALSE 50300
50280: PUSH
50281: LD_VAR 0 4
50285: PUSH
50286: LD_INT 1
50288: ARRAY
50289: PUSH
50290: LD_INT 4
50292: ARRAY
50293: PUSH
50294: LD_VAR 0 2
50298: EQUAL
50299: AND
50300: ST_TO_ADDR
// end ;
50301: LD_VAR 0 3
50305: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50306: LD_INT 0
50308: PPUSH
// SetDir ( unit , d ) ;
50309: LD_VAR 0 1
50313: PPUSH
50314: LD_VAR 0 4
50318: PPUSH
50319: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50323: LD_ADDR_VAR 0 6
50327: PUSH
50328: LD_VAR 0 1
50332: PPUSH
50333: LD_VAR 0 2
50337: PPUSH
50338: LD_VAR 0 3
50342: PPUSH
50343: LD_VAR 0 5
50347: PPUSH
50348: CALL_OW 48
50352: ST_TO_ADDR
// end ;
50353: LD_VAR 0 6
50357: RET
// export function ToNaturalNumber ( number ) ; begin
50358: LD_INT 0
50360: PPUSH
// result := number div 1 ;
50361: LD_ADDR_VAR 0 2
50365: PUSH
50366: LD_VAR 0 1
50370: PUSH
50371: LD_INT 1
50373: DIV
50374: ST_TO_ADDR
// if number < 0 then
50375: LD_VAR 0 1
50379: PUSH
50380: LD_INT 0
50382: LESS
50383: IFFALSE 50393
// result := 0 ;
50385: LD_ADDR_VAR 0 2
50389: PUSH
50390: LD_INT 0
50392: ST_TO_ADDR
// end ;
50393: LD_VAR 0 2
50397: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50398: LD_INT 0
50400: PPUSH
50401: PPUSH
50402: PPUSH
// if not buildings then
50403: LD_VAR 0 1
50407: NOT
50408: IFFALSE 50412
// exit ;
50410: GO 50527
// tmp := [ ] ;
50412: LD_ADDR_VAR 0 5
50416: PUSH
50417: EMPTY
50418: ST_TO_ADDR
// for b in buildings do
50419: LD_ADDR_VAR 0 4
50423: PUSH
50424: LD_VAR 0 1
50428: PUSH
50429: FOR_IN
50430: IFFALSE 50468
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50432: LD_ADDR_VAR 0 5
50436: PUSH
50437: LD_VAR 0 5
50441: PPUSH
50442: LD_VAR 0 5
50446: PUSH
50447: LD_INT 1
50449: PLUS
50450: PPUSH
50451: LD_VAR 0 4
50455: PPUSH
50456: CALL_OW 266
50460: PPUSH
50461: CALL_OW 1
50465: ST_TO_ADDR
50466: GO 50429
50468: POP
50469: POP
// if not tmp then
50470: LD_VAR 0 5
50474: NOT
50475: IFFALSE 50479
// exit ;
50477: GO 50527
// if asc then
50479: LD_VAR 0 2
50483: IFFALSE 50507
// result := SortListByListAsc ( buildings , tmp ) else
50485: LD_ADDR_VAR 0 3
50489: PUSH
50490: LD_VAR 0 1
50494: PPUSH
50495: LD_VAR 0 5
50499: PPUSH
50500: CALL_OW 76
50504: ST_TO_ADDR
50505: GO 50527
// result := SortListByListDesc ( buildings , tmp ) ;
50507: LD_ADDR_VAR 0 3
50511: PUSH
50512: LD_VAR 0 1
50516: PPUSH
50517: LD_VAR 0 5
50521: PPUSH
50522: CALL_OW 77
50526: ST_TO_ADDR
// end ;
50527: LD_VAR 0 3
50531: RET
// export function SortByClass ( units , class ) ; var un ; begin
50532: LD_INT 0
50534: PPUSH
50535: PPUSH
// if not units or not class then
50536: LD_VAR 0 1
50540: NOT
50541: IFTRUE 50550
50543: PUSH
50544: LD_VAR 0 2
50548: NOT
50549: OR
50550: IFFALSE 50554
// exit ;
50552: GO 50649
// result := [ ] ;
50554: LD_ADDR_VAR 0 3
50558: PUSH
50559: EMPTY
50560: ST_TO_ADDR
// for un in units do
50561: LD_ADDR_VAR 0 4
50565: PUSH
50566: LD_VAR 0 1
50570: PUSH
50571: FOR_IN
50572: IFFALSE 50647
// if GetClass ( un ) = class then
50574: LD_VAR 0 4
50578: PPUSH
50579: CALL_OW 257
50583: PUSH
50584: LD_VAR 0 2
50588: EQUAL
50589: IFFALSE 50616
// result := Insert ( result , 1 , un ) else
50591: LD_ADDR_VAR 0 3
50595: PUSH
50596: LD_VAR 0 3
50600: PPUSH
50601: LD_INT 1
50603: PPUSH
50604: LD_VAR 0 4
50608: PPUSH
50609: CALL_OW 2
50613: ST_TO_ADDR
50614: GO 50645
// result := Replace ( result , result + 1 , un ) ;
50616: LD_ADDR_VAR 0 3
50620: PUSH
50621: LD_VAR 0 3
50625: PPUSH
50626: LD_VAR 0 3
50630: PUSH
50631: LD_INT 1
50633: PLUS
50634: PPUSH
50635: LD_VAR 0 4
50639: PPUSH
50640: CALL_OW 1
50644: ST_TO_ADDR
50645: GO 50571
50647: POP
50648: POP
// end ;
50649: LD_VAR 0 3
50653: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50654: LD_INT 0
50656: PPUSH
50657: PPUSH
50658: PPUSH
50659: PPUSH
50660: PPUSH
50661: PPUSH
50662: PPUSH
// result := [ ] ;
50663: LD_ADDR_VAR 0 4
50667: PUSH
50668: EMPTY
50669: ST_TO_ADDR
// if x - r < 0 then
50670: LD_VAR 0 1
50674: PUSH
50675: LD_VAR 0 3
50679: MINUS
50680: PUSH
50681: LD_INT 0
50683: LESS
50684: IFFALSE 50696
// min_x := 0 else
50686: LD_ADDR_VAR 0 8
50690: PUSH
50691: LD_INT 0
50693: ST_TO_ADDR
50694: GO 50712
// min_x := x - r ;
50696: LD_ADDR_VAR 0 8
50700: PUSH
50701: LD_VAR 0 1
50705: PUSH
50706: LD_VAR 0 3
50710: MINUS
50711: ST_TO_ADDR
// if y - r < 0 then
50712: LD_VAR 0 2
50716: PUSH
50717: LD_VAR 0 3
50721: MINUS
50722: PUSH
50723: LD_INT 0
50725: LESS
50726: IFFALSE 50738
// min_y := 0 else
50728: LD_ADDR_VAR 0 7
50732: PUSH
50733: LD_INT 0
50735: ST_TO_ADDR
50736: GO 50754
// min_y := y - r ;
50738: LD_ADDR_VAR 0 7
50742: PUSH
50743: LD_VAR 0 2
50747: PUSH
50748: LD_VAR 0 3
50752: MINUS
50753: ST_TO_ADDR
// max_x := x + r ;
50754: LD_ADDR_VAR 0 9
50758: PUSH
50759: LD_VAR 0 1
50763: PUSH
50764: LD_VAR 0 3
50768: PLUS
50769: ST_TO_ADDR
// max_y := y + r ;
50770: LD_ADDR_VAR 0 10
50774: PUSH
50775: LD_VAR 0 2
50779: PUSH
50780: LD_VAR 0 3
50784: PLUS
50785: ST_TO_ADDR
// for _x = min_x to max_x do
50786: LD_ADDR_VAR 0 5
50790: PUSH
50791: DOUBLE
50792: LD_VAR 0 8
50796: DEC
50797: ST_TO_ADDR
50798: LD_VAR 0 9
50802: PUSH
50803: FOR_TO
50804: IFFALSE 50905
// for _y = min_y to max_y do
50806: LD_ADDR_VAR 0 6
50810: PUSH
50811: DOUBLE
50812: LD_VAR 0 7
50816: DEC
50817: ST_TO_ADDR
50818: LD_VAR 0 10
50822: PUSH
50823: FOR_TO
50824: IFFALSE 50901
// begin if not ValidHex ( _x , _y ) then
50826: LD_VAR 0 5
50830: PPUSH
50831: LD_VAR 0 6
50835: PPUSH
50836: CALL_OW 488
50840: NOT
50841: IFFALSE 50845
// continue ;
50843: GO 50823
// if GetResourceTypeXY ( _x , _y ) then
50845: LD_VAR 0 5
50849: PPUSH
50850: LD_VAR 0 6
50854: PPUSH
50855: CALL_OW 283
50859: IFFALSE 50899
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50861: LD_ADDR_VAR 0 4
50865: PUSH
50866: LD_VAR 0 4
50870: PPUSH
50871: LD_VAR 0 4
50875: PUSH
50876: LD_INT 1
50878: PLUS
50879: PPUSH
50880: LD_VAR 0 5
50884: PUSH
50885: LD_VAR 0 6
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PPUSH
50894: CALL_OW 1
50898: ST_TO_ADDR
// end ;
50899: GO 50823
50901: POP
50902: POP
50903: GO 50803
50905: POP
50906: POP
// end ;
50907: LD_VAR 0 4
50911: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50912: LD_INT 0
50914: PPUSH
50915: PPUSH
50916: PPUSH
50917: PPUSH
50918: PPUSH
50919: PPUSH
50920: PPUSH
50921: PPUSH
// if not units then
50922: LD_VAR 0 1
50926: NOT
50927: IFFALSE 50931
// exit ;
50929: GO 51463
// result := UnitFilter ( units , [ f_ok ] ) ;
50931: LD_ADDR_VAR 0 3
50935: PUSH
50936: LD_VAR 0 1
50940: PPUSH
50941: LD_INT 50
50943: PUSH
50944: EMPTY
50945: LIST
50946: PPUSH
50947: CALL_OW 72
50951: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50952: LD_ADDR_VAR 0 8
50956: PUSH
50957: LD_VAR 0 1
50961: PUSH
50962: LD_INT 1
50964: ARRAY
50965: PPUSH
50966: CALL_OW 255
50970: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50971: LD_ADDR_VAR 0 10
50975: PUSH
50976: LD_INT 29
50978: PUSH
50979: LD_INT 91
50981: PUSH
50982: LD_INT 49
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// if not result then
50990: LD_VAR 0 3
50994: NOT
50995: IFFALSE 50999
// exit ;
50997: GO 51463
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50999: LD_ADDR_VAR 0 5
51003: PUSH
51004: LD_INT 81
51006: PUSH
51007: LD_VAR 0 8
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PPUSH
51016: CALL_OW 69
51020: ST_TO_ADDR
// for i in result do
51021: LD_ADDR_VAR 0 4
51025: PUSH
51026: LD_VAR 0 3
51030: PUSH
51031: FOR_IN
51032: IFFALSE 51461
// begin tag := GetTag ( i ) + 1 ;
51034: LD_ADDR_VAR 0 9
51038: PUSH
51039: LD_VAR 0 4
51043: PPUSH
51044: CALL_OW 110
51048: PUSH
51049: LD_INT 1
51051: PLUS
51052: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51053: LD_ADDR_VAR 0 7
51057: PUSH
51058: LD_VAR 0 4
51062: PPUSH
51063: CALL_OW 250
51067: PPUSH
51068: LD_VAR 0 4
51072: PPUSH
51073: CALL_OW 251
51077: PPUSH
51078: LD_INT 4
51080: PPUSH
51081: CALL 50654 0 3
51085: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51086: LD_VAR 0 4
51090: PPUSH
51091: CALL_OW 247
51095: PUSH
51096: LD_INT 2
51098: EQUAL
51099: IFFALSE 51111
51101: PUSH
51102: LD_VAR 0 7
51106: PUSH
51107: LD_INT 2
51109: GREATER
51110: AND
51111: IFFALSE 51131
51113: PUSH
51114: LD_VAR 0 4
51118: PPUSH
51119: CALL_OW 264
51123: PUSH
51124: LD_VAR 0 10
51128: IN
51129: NOT
51130: AND
51131: IFFALSE 51170
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51133: LD_VAR 0 4
51137: PPUSH
51138: LD_VAR 0 7
51142: PUSH
51143: LD_INT 1
51145: ARRAY
51146: PUSH
51147: LD_INT 1
51149: ARRAY
51150: PPUSH
51151: LD_VAR 0 7
51155: PUSH
51156: LD_INT 1
51158: ARRAY
51159: PUSH
51160: LD_INT 2
51162: ARRAY
51163: PPUSH
51164: CALL_OW 116
51168: GO 51459
// if path > tag then
51170: LD_VAR 0 2
51174: PUSH
51175: LD_VAR 0 9
51179: GREATER
51180: IFFALSE 51388
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51182: LD_ADDR_VAR 0 6
51186: PUSH
51187: LD_VAR 0 5
51191: PPUSH
51192: LD_INT 91
51194: PUSH
51195: LD_VAR 0 4
51199: PUSH
51200: LD_INT 8
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: PPUSH
51208: CALL_OW 72
51212: ST_TO_ADDR
// if nearEnemy then
51213: LD_VAR 0 6
51217: IFFALSE 51286
// begin if GetWeapon ( i ) = ru_time_lapser then
51219: LD_VAR 0 4
51223: PPUSH
51224: CALL_OW 264
51228: PUSH
51229: LD_INT 49
51231: EQUAL
51232: IFFALSE 51260
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51234: LD_VAR 0 4
51238: PPUSH
51239: LD_VAR 0 6
51243: PPUSH
51244: LD_VAR 0 4
51248: PPUSH
51249: CALL_OW 74
51253: PPUSH
51254: CALL_OW 112
51258: GO 51284
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51260: LD_VAR 0 4
51264: PPUSH
51265: LD_VAR 0 6
51269: PPUSH
51270: LD_VAR 0 4
51274: PPUSH
51275: CALL_OW 74
51279: PPUSH
51280: CALL 52544 0 2
// end else
51284: GO 51386
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51286: LD_VAR 0 4
51290: PPUSH
51291: LD_VAR 0 2
51295: PUSH
51296: LD_VAR 0 9
51300: ARRAY
51301: PUSH
51302: LD_INT 1
51304: ARRAY
51305: PPUSH
51306: LD_VAR 0 2
51310: PUSH
51311: LD_VAR 0 9
51315: ARRAY
51316: PUSH
51317: LD_INT 2
51319: ARRAY
51320: PPUSH
51321: CALL_OW 297
51325: PUSH
51326: LD_INT 6
51328: GREATER
51329: IFFALSE 51372
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51331: LD_VAR 0 4
51335: PPUSH
51336: LD_VAR 0 2
51340: PUSH
51341: LD_VAR 0 9
51345: ARRAY
51346: PUSH
51347: LD_INT 1
51349: ARRAY
51350: PPUSH
51351: LD_VAR 0 2
51355: PUSH
51356: LD_VAR 0 9
51360: ARRAY
51361: PUSH
51362: LD_INT 2
51364: ARRAY
51365: PPUSH
51366: CALL_OW 114
51370: GO 51386
// SetTag ( i , tag ) ;
51372: LD_VAR 0 4
51376: PPUSH
51377: LD_VAR 0 9
51381: PPUSH
51382: CALL_OW 109
// end else
51386: GO 51459
// if enemy then
51388: LD_VAR 0 5
51392: IFFALSE 51459
// begin if GetWeapon ( i ) = ru_time_lapser then
51394: LD_VAR 0 4
51398: PPUSH
51399: CALL_OW 264
51403: PUSH
51404: LD_INT 49
51406: EQUAL
51407: IFFALSE 51435
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51409: LD_VAR 0 4
51413: PPUSH
51414: LD_VAR 0 5
51418: PPUSH
51419: LD_VAR 0 4
51423: PPUSH
51424: CALL_OW 74
51428: PPUSH
51429: CALL_OW 112
51433: GO 51459
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51435: LD_VAR 0 4
51439: PPUSH
51440: LD_VAR 0 5
51444: PPUSH
51445: LD_VAR 0 4
51449: PPUSH
51450: CALL_OW 74
51454: PPUSH
51455: CALL 52544 0 2
// end ; end ;
51459: GO 51031
51461: POP
51462: POP
// end ;
51463: LD_VAR 0 3
51467: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51468: LD_INT 0
51470: PPUSH
51471: PPUSH
51472: PPUSH
// if not unit or IsInUnit ( unit ) then
51473: LD_VAR 0 1
51477: NOT
51478: IFTRUE 51491
51480: PUSH
51481: LD_VAR 0 1
51485: PPUSH
51486: CALL_OW 310
51490: OR
51491: IFFALSE 51495
// exit ;
51493: GO 51586
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51495: LD_ADDR_VAR 0 4
51499: PUSH
51500: LD_VAR 0 1
51504: PPUSH
51505: CALL_OW 250
51509: PPUSH
51510: LD_VAR 0 2
51514: PPUSH
51515: LD_INT 1
51517: PPUSH
51518: CALL_OW 272
51522: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51523: LD_ADDR_VAR 0 5
51527: PUSH
51528: LD_VAR 0 1
51532: PPUSH
51533: CALL_OW 251
51537: PPUSH
51538: LD_VAR 0 2
51542: PPUSH
51543: LD_INT 1
51545: PPUSH
51546: CALL_OW 273
51550: ST_TO_ADDR
// if ValidHex ( x , y ) then
51551: LD_VAR 0 4
51555: PPUSH
51556: LD_VAR 0 5
51560: PPUSH
51561: CALL_OW 488
51565: IFFALSE 51586
// ComTurnXY ( unit , x , y ) ;
51567: LD_VAR 0 1
51571: PPUSH
51572: LD_VAR 0 4
51576: PPUSH
51577: LD_VAR 0 5
51581: PPUSH
51582: CALL_OW 118
// end ;
51586: LD_VAR 0 3
51590: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51591: LD_INT 0
51593: PPUSH
51594: PPUSH
// result := false ;
51595: LD_ADDR_VAR 0 3
51599: PUSH
51600: LD_INT 0
51602: ST_TO_ADDR
// if not units then
51603: LD_VAR 0 2
51607: NOT
51608: IFFALSE 51612
// exit ;
51610: GO 51657
// for i in units do
51612: LD_ADDR_VAR 0 4
51616: PUSH
51617: LD_VAR 0 2
51621: PUSH
51622: FOR_IN
51623: IFFALSE 51655
// if See ( side , i ) then
51625: LD_VAR 0 1
51629: PPUSH
51630: LD_VAR 0 4
51634: PPUSH
51635: CALL_OW 292
51639: IFFALSE 51653
// begin result := true ;
51641: LD_ADDR_VAR 0 3
51645: PUSH
51646: LD_INT 1
51648: ST_TO_ADDR
// exit ;
51649: POP
51650: POP
51651: GO 51657
// end ;
51653: GO 51622
51655: POP
51656: POP
// end ;
51657: LD_VAR 0 3
51661: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51662: LD_INT 0
51664: PPUSH
51665: PPUSH
51666: PPUSH
51667: PPUSH
// if not unit or not points then
51668: LD_VAR 0 1
51672: NOT
51673: IFTRUE 51682
51675: PUSH
51676: LD_VAR 0 2
51680: NOT
51681: OR
51682: IFFALSE 51686
// exit ;
51684: GO 51776
// dist := 99999 ;
51686: LD_ADDR_VAR 0 5
51690: PUSH
51691: LD_INT 99999
51693: ST_TO_ADDR
// for i in points do
51694: LD_ADDR_VAR 0 4
51698: PUSH
51699: LD_VAR 0 2
51703: PUSH
51704: FOR_IN
51705: IFFALSE 51774
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51707: LD_ADDR_VAR 0 6
51711: PUSH
51712: LD_VAR 0 1
51716: PPUSH
51717: LD_VAR 0 4
51721: PUSH
51722: LD_INT 1
51724: ARRAY
51725: PPUSH
51726: LD_VAR 0 4
51730: PUSH
51731: LD_INT 2
51733: ARRAY
51734: PPUSH
51735: CALL_OW 297
51739: ST_TO_ADDR
// if tmpDist < dist then
51740: LD_VAR 0 6
51744: PUSH
51745: LD_VAR 0 5
51749: LESS
51750: IFFALSE 51772
// begin result := i ;
51752: LD_ADDR_VAR 0 3
51756: PUSH
51757: LD_VAR 0 4
51761: ST_TO_ADDR
// dist := tmpDist ;
51762: LD_ADDR_VAR 0 5
51766: PUSH
51767: LD_VAR 0 6
51771: ST_TO_ADDR
// end ; end ;
51772: GO 51704
51774: POP
51775: POP
// end ;
51776: LD_VAR 0 3
51780: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51781: LD_INT 0
51783: PPUSH
// uc_side := side ;
51784: LD_ADDR_OWVAR 20
51788: PUSH
51789: LD_VAR 0 1
51793: ST_TO_ADDR
// uc_nation := 3 ;
51794: LD_ADDR_OWVAR 21
51798: PUSH
51799: LD_INT 3
51801: ST_TO_ADDR
// vc_chassis := 25 ;
51802: LD_ADDR_OWVAR 37
51806: PUSH
51807: LD_INT 25
51809: ST_TO_ADDR
// vc_engine := engine_siberite ;
51810: LD_ADDR_OWVAR 39
51814: PUSH
51815: LD_INT 3
51817: ST_TO_ADDR
// vc_control := control_computer ;
51818: LD_ADDR_OWVAR 38
51822: PUSH
51823: LD_INT 3
51825: ST_TO_ADDR
// vc_weapon := 59 ;
51826: LD_ADDR_OWVAR 40
51830: PUSH
51831: LD_INT 59
51833: ST_TO_ADDR
// result := CreateVehicle ;
51834: LD_ADDR_VAR 0 5
51838: PUSH
51839: CALL_OW 45
51843: ST_TO_ADDR
// SetDir ( result , d ) ;
51844: LD_VAR 0 5
51848: PPUSH
51849: LD_VAR 0 4
51853: PPUSH
51854: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51858: LD_VAR 0 5
51862: PPUSH
51863: LD_VAR 0 2
51867: PPUSH
51868: LD_VAR 0 3
51872: PPUSH
51873: LD_INT 0
51875: PPUSH
51876: CALL_OW 48
// end ;
51880: LD_VAR 0 5
51884: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51885: LD_INT 0
51887: PPUSH
51888: PPUSH
51889: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51890: LD_ADDR_VAR 0 2
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51913: LD_VAR 0 1
51917: NOT
51918: IFTRUE 51951
51920: PUSH
51921: LD_VAR 0 1
51925: PPUSH
51926: CALL_OW 264
51930: PUSH
51931: LD_INT 12
51933: PUSH
51934: LD_INT 51
51936: PUSH
51937: LD_INT 32
51939: PUSH
51940: LD_INT 89
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: IN
51949: NOT
51950: OR
51951: IFFALSE 51955
// exit ;
51953: GO 52053
// for i := 1 to 3 do
51955: LD_ADDR_VAR 0 3
51959: PUSH
51960: DOUBLE
51961: LD_INT 1
51963: DEC
51964: ST_TO_ADDR
51965: LD_INT 3
51967: PUSH
51968: FOR_TO
51969: IFFALSE 52051
// begin tmp := GetCargo ( cargo , i ) ;
51971: LD_ADDR_VAR 0 4
51975: PUSH
51976: LD_VAR 0 1
51980: PPUSH
51981: LD_VAR 0 3
51985: PPUSH
51986: CALL_OW 289
51990: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51991: LD_ADDR_VAR 0 2
51995: PUSH
51996: LD_VAR 0 2
52000: PPUSH
52001: LD_VAR 0 3
52005: PPUSH
52006: LD_VAR 0 4
52010: PPUSH
52011: CALL_OW 1
52015: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52016: LD_ADDR_VAR 0 2
52020: PUSH
52021: LD_VAR 0 2
52025: PPUSH
52026: LD_INT 4
52028: PPUSH
52029: LD_VAR 0 2
52033: PUSH
52034: LD_INT 4
52036: ARRAY
52037: PUSH
52038: LD_VAR 0 4
52042: PLUS
52043: PPUSH
52044: CALL_OW 1
52048: ST_TO_ADDR
// end ;
52049: GO 51968
52051: POP
52052: POP
// end ;
52053: LD_VAR 0 2
52057: RET
// export function Length ( array ) ; begin
52058: LD_INT 0
52060: PPUSH
// result := array + 0 ;
52061: LD_ADDR_VAR 0 2
52065: PUSH
52066: LD_VAR 0 1
52070: PUSH
52071: LD_INT 0
52073: PLUS
52074: ST_TO_ADDR
// end ;
52075: LD_VAR 0 2
52079: RET
// export function PrepareArray ( array ) ; begin
52080: LD_INT 0
52082: PPUSH
// result := array diff 0 ;
52083: LD_ADDR_VAR 0 2
52087: PUSH
52088: LD_VAR 0 1
52092: PUSH
52093: LD_INT 0
52095: DIFF
52096: ST_TO_ADDR
// if not result [ 1 ] then
52097: LD_VAR 0 2
52101: PUSH
52102: LD_INT 1
52104: ARRAY
52105: NOT
52106: IFFALSE 52126
// result := Delete ( result , 1 ) ;
52108: LD_ADDR_VAR 0 2
52112: PUSH
52113: LD_VAR 0 2
52117: PPUSH
52118: LD_INT 1
52120: PPUSH
52121: CALL_OW 3
52125: ST_TO_ADDR
// end ;
52126: LD_VAR 0 2
52130: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52131: LD_INT 0
52133: PPUSH
52134: PPUSH
52135: PPUSH
52136: PPUSH
// sibRocketRange := 25 ;
52137: LD_ADDR_VAR 0 6
52141: PUSH
52142: LD_INT 25
52144: ST_TO_ADDR
// result := false ;
52145: LD_ADDR_VAR 0 4
52149: PUSH
52150: LD_INT 0
52152: ST_TO_ADDR
// for i := 0 to 5 do
52153: LD_ADDR_VAR 0 5
52157: PUSH
52158: DOUBLE
52159: LD_INT 0
52161: DEC
52162: ST_TO_ADDR
52163: LD_INT 5
52165: PUSH
52166: FOR_TO
52167: IFFALSE 52234
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52169: LD_VAR 0 1
52173: PPUSH
52174: LD_VAR 0 5
52178: PPUSH
52179: LD_VAR 0 6
52183: PPUSH
52184: CALL_OW 272
52188: PPUSH
52189: LD_VAR 0 2
52193: PPUSH
52194: LD_VAR 0 5
52198: PPUSH
52199: LD_VAR 0 6
52203: PPUSH
52204: CALL_OW 273
52208: PPUSH
52209: LD_VAR 0 3
52213: PPUSH
52214: CALL_OW 309
52218: IFFALSE 52232
// begin result := true ;
52220: LD_ADDR_VAR 0 4
52224: PUSH
52225: LD_INT 1
52227: ST_TO_ADDR
// exit ;
52228: POP
52229: POP
52230: GO 52236
// end ;
52232: GO 52166
52234: POP
52235: POP
// end ;
52236: LD_VAR 0 4
52240: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52241: LD_INT 0
52243: PPUSH
52244: PPUSH
52245: PPUSH
// if btype = b_depot then
52246: LD_VAR 0 2
52250: PUSH
52251: LD_INT 0
52253: EQUAL
52254: IFFALSE 52266
// begin result := true ;
52256: LD_ADDR_VAR 0 3
52260: PUSH
52261: LD_INT 1
52263: ST_TO_ADDR
// exit ;
52264: GO 52386
// end ; pom := GetBase ( depot ) ;
52266: LD_ADDR_VAR 0 4
52270: PUSH
52271: LD_VAR 0 1
52275: PPUSH
52276: CALL_OW 274
52280: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52281: LD_ADDR_VAR 0 5
52285: PUSH
52286: LD_VAR 0 2
52290: PPUSH
52291: LD_VAR 0 1
52295: PPUSH
52296: CALL_OW 248
52300: PPUSH
52301: CALL_OW 450
52305: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52306: LD_ADDR_VAR 0 3
52310: PUSH
52311: LD_VAR 0 4
52315: PPUSH
52316: LD_INT 1
52318: PPUSH
52319: CALL_OW 275
52323: PUSH
52324: LD_VAR 0 5
52328: PUSH
52329: LD_INT 1
52331: ARRAY
52332: GREATEREQUAL
52333: IFFALSE 52359
52335: PUSH
52336: LD_VAR 0 4
52340: PPUSH
52341: LD_INT 2
52343: PPUSH
52344: CALL_OW 275
52348: PUSH
52349: LD_VAR 0 5
52353: PUSH
52354: LD_INT 2
52356: ARRAY
52357: GREATEREQUAL
52358: AND
52359: IFFALSE 52385
52361: PUSH
52362: LD_VAR 0 4
52366: PPUSH
52367: LD_INT 3
52369: PPUSH
52370: CALL_OW 275
52374: PUSH
52375: LD_VAR 0 5
52379: PUSH
52380: LD_INT 3
52382: ARRAY
52383: GREATEREQUAL
52384: AND
52385: ST_TO_ADDR
// end ;
52386: LD_VAR 0 3
52390: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52391: LD_INT 0
52393: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52394: LD_VAR 0 1
52398: PPUSH
52399: LD_VAR 0 2
52403: PPUSH
52404: LD_INT 0
52406: PPUSH
52407: LD_INT 0
52409: PPUSH
52410: LD_INT 1
52412: PPUSH
52413: LD_INT 0
52415: PPUSH
52416: CALL_OW 587
// end ;
52420: LD_VAR 0 3
52424: RET
// export function CenterOnNow ( unit ) ; begin
52425: LD_INT 0
52427: PPUSH
// result := IsInUnit ( unit ) ;
52428: LD_ADDR_VAR 0 2
52432: PUSH
52433: LD_VAR 0 1
52437: PPUSH
52438: CALL_OW 310
52442: ST_TO_ADDR
// if not result then
52443: LD_VAR 0 2
52447: NOT
52448: IFFALSE 52460
// result := unit ;
52450: LD_ADDR_VAR 0 2
52454: PUSH
52455: LD_VAR 0 1
52459: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52460: LD_VAR 0 1
52464: PPUSH
52465: CALL_OW 87
// end ;
52469: LD_VAR 0 2
52473: RET
// export function ComMoveHex ( unit , hex ) ; begin
52474: LD_INT 0
52476: PPUSH
// if not hex then
52477: LD_VAR 0 2
52481: NOT
52482: IFFALSE 52486
// exit ;
52484: GO 52539
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52486: LD_VAR 0 2
52490: PUSH
52491: LD_INT 1
52493: ARRAY
52494: PPUSH
52495: LD_VAR 0 2
52499: PUSH
52500: LD_INT 2
52502: ARRAY
52503: PPUSH
52504: CALL_OW 428
52508: IFFALSE 52512
// exit ;
52510: GO 52539
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52512: LD_VAR 0 1
52516: PPUSH
52517: LD_VAR 0 2
52521: PUSH
52522: LD_INT 1
52524: ARRAY
52525: PPUSH
52526: LD_VAR 0 2
52530: PUSH
52531: LD_INT 2
52533: ARRAY
52534: PPUSH
52535: CALL_OW 111
// end ;
52539: LD_VAR 0 3
52543: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52544: LD_INT 0
52546: PPUSH
52547: PPUSH
52548: PPUSH
// if not unit or not enemy then
52549: LD_VAR 0 1
52553: NOT
52554: IFTRUE 52563
52556: PUSH
52557: LD_VAR 0 2
52561: NOT
52562: OR
52563: IFFALSE 52567
// exit ;
52565: GO 52693
// x := GetX ( enemy ) ;
52567: LD_ADDR_VAR 0 4
52571: PUSH
52572: LD_VAR 0 2
52576: PPUSH
52577: CALL_OW 250
52581: ST_TO_ADDR
// y := GetY ( enemy ) ;
52582: LD_ADDR_VAR 0 5
52586: PUSH
52587: LD_VAR 0 2
52591: PPUSH
52592: CALL_OW 251
52596: ST_TO_ADDR
// if ValidHex ( x , y ) then
52597: LD_VAR 0 4
52601: PPUSH
52602: LD_VAR 0 5
52606: PPUSH
52607: CALL_OW 488
52611: IFFALSE 52693
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52613: LD_VAR 0 2
52617: PPUSH
52618: CALL_OW 247
52622: PUSH
52623: LD_INT 3
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: IN
52633: IFTRUE 52656
52635: PUSH
52636: LD_VAR 0 1
52640: PPUSH
52641: CALL_OW 255
52645: PPUSH
52646: LD_VAR 0 2
52650: PPUSH
52651: CALL_OW 292
52655: OR
52656: IFFALSE 52674
// ComAttackUnit ( unit , enemy ) else
52658: LD_VAR 0 1
52662: PPUSH
52663: LD_VAR 0 2
52667: PPUSH
52668: CALL_OW 115
52672: GO 52693
// ComAgressiveMove ( unit , x , y ) ;
52674: LD_VAR 0 1
52678: PPUSH
52679: LD_VAR 0 4
52683: PPUSH
52684: LD_VAR 0 5
52688: PPUSH
52689: CALL_OW 114
// end ;
52693: LD_VAR 0 3
52697: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52698: LD_INT 0
52700: PPUSH
52701: PPUSH
52702: PPUSH
// list := AreaToList ( area , 0 ) ;
52703: LD_ADDR_VAR 0 5
52707: PUSH
52708: LD_VAR 0 1
52712: PPUSH
52713: LD_INT 0
52715: PPUSH
52716: CALL_OW 517
52720: ST_TO_ADDR
// if not list then
52721: LD_VAR 0 5
52725: NOT
52726: IFFALSE 52730
// exit ;
52728: GO 52860
// if all then
52730: LD_VAR 0 2
52734: IFFALSE 52822
// begin for i := 1 to list [ 1 ] do
52736: LD_ADDR_VAR 0 4
52740: PUSH
52741: DOUBLE
52742: LD_INT 1
52744: DEC
52745: ST_TO_ADDR
52746: LD_VAR 0 5
52750: PUSH
52751: LD_INT 1
52753: ARRAY
52754: PUSH
52755: FOR_TO
52756: IFFALSE 52818
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52758: LD_ADDR_VAR 0 3
52762: PUSH
52763: LD_VAR 0 3
52767: PPUSH
52768: LD_VAR 0 3
52772: PUSH
52773: LD_INT 1
52775: PLUS
52776: PPUSH
52777: LD_VAR 0 5
52781: PUSH
52782: LD_INT 1
52784: ARRAY
52785: PUSH
52786: LD_VAR 0 4
52790: ARRAY
52791: PUSH
52792: LD_VAR 0 5
52796: PUSH
52797: LD_INT 2
52799: ARRAY
52800: PUSH
52801: LD_VAR 0 4
52805: ARRAY
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PPUSH
52811: CALL_OW 1
52815: ST_TO_ADDR
52816: GO 52755
52818: POP
52819: POP
// exit ;
52820: GO 52860
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52822: LD_ADDR_VAR 0 3
52826: PUSH
52827: LD_VAR 0 5
52831: PUSH
52832: LD_INT 1
52834: ARRAY
52835: PUSH
52836: LD_INT 1
52838: ARRAY
52839: PUSH
52840: LD_VAR 0 5
52844: PUSH
52845: LD_INT 2
52847: ARRAY
52848: PUSH
52849: LD_INT 1
52851: ARRAY
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: ST_TO_ADDR
// end ;
52860: LD_VAR 0 3
52864: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52865: LD_INT 0
52867: PPUSH
52868: PPUSH
// list := AreaToList ( area , 0 ) ;
52869: LD_ADDR_VAR 0 4
52873: PUSH
52874: LD_VAR 0 1
52878: PPUSH
52879: LD_INT 0
52881: PPUSH
52882: CALL_OW 517
52886: ST_TO_ADDR
// if not list then
52887: LD_VAR 0 4
52891: NOT
52892: IFFALSE 52896
// exit ;
52894: GO 52937
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52896: LD_ADDR_VAR 0 3
52900: PUSH
52901: LD_VAR 0 4
52905: PUSH
52906: LD_INT 1
52908: ARRAY
52909: PUSH
52910: LD_INT 1
52912: ARRAY
52913: PUSH
52914: LD_VAR 0 4
52918: PUSH
52919: LD_INT 2
52921: ARRAY
52922: PUSH
52923: LD_INT 1
52925: ARRAY
52926: PUSH
52927: LD_VAR 0 2
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: ST_TO_ADDR
// end ;
52937: LD_VAR 0 3
52941: RET
// export function First ( array ) ; begin
52942: LD_INT 0
52944: PPUSH
// if not array then
52945: LD_VAR 0 1
52949: NOT
52950: IFFALSE 52954
// exit ;
52952: GO 52968
// result := array [ 1 ] ;
52954: LD_ADDR_VAR 0 2
52958: PUSH
52959: LD_VAR 0 1
52963: PUSH
52964: LD_INT 1
52966: ARRAY
52967: ST_TO_ADDR
// end ;
52968: LD_VAR 0 2
52972: RET
// export function Last ( array ) ; begin
52973: LD_INT 0
52975: PPUSH
// if not array then
52976: LD_VAR 0 1
52980: NOT
52981: IFFALSE 52985
// exit ;
52983: GO 53001
// result := array [ array ] ;
52985: LD_ADDR_VAR 0 2
52989: PUSH
52990: LD_VAR 0 1
52994: PUSH
52995: LD_VAR 0 1
52999: ARRAY
53000: ST_TO_ADDR
// end ;
53001: LD_VAR 0 2
53005: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53006: LD_INT 0
53008: PPUSH
53009: PPUSH
// result := [ ] ;
53010: LD_ADDR_VAR 0 5
53014: PUSH
53015: EMPTY
53016: ST_TO_ADDR
// if not array then
53017: LD_VAR 0 1
53021: NOT
53022: IFFALSE 53026
// exit ;
53024: GO 53138
// for i := 1 to array do
53026: LD_ADDR_VAR 0 6
53030: PUSH
53031: DOUBLE
53032: LD_INT 1
53034: DEC
53035: ST_TO_ADDR
53036: LD_VAR 0 1
53040: PUSH
53041: FOR_TO
53042: IFFALSE 53136
// if array [ i ] [ index ] = value then
53044: LD_VAR 0 1
53048: PUSH
53049: LD_VAR 0 6
53053: ARRAY
53054: PUSH
53055: LD_VAR 0 2
53059: ARRAY
53060: PUSH
53061: LD_VAR 0 3
53065: EQUAL
53066: IFFALSE 53134
// begin if indexColumn then
53068: LD_VAR 0 4
53072: IFFALSE 53108
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53074: LD_ADDR_VAR 0 5
53078: PUSH
53079: LD_VAR 0 5
53083: PPUSH
53084: LD_VAR 0 1
53088: PUSH
53089: LD_VAR 0 6
53093: ARRAY
53094: PUSH
53095: LD_VAR 0 4
53099: ARRAY
53100: PPUSH
53101: CALL 48146 0 2
53105: ST_TO_ADDR
53106: GO 53134
// result := Join ( result , array [ i ] ) ;
53108: LD_ADDR_VAR 0 5
53112: PUSH
53113: LD_VAR 0 5
53117: PPUSH
53118: LD_VAR 0 1
53122: PUSH
53123: LD_VAR 0 6
53127: ARRAY
53128: PPUSH
53129: CALL 48146 0 2
53133: ST_TO_ADDR
// end ;
53134: GO 53041
53136: POP
53137: POP
// end ;
53138: LD_VAR 0 5
53142: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53143: LD_INT 0
53145: PPUSH
// if not vehicles or not parkingPoint then
53146: LD_VAR 0 1
53150: NOT
53151: IFTRUE 53160
53153: PUSH
53154: LD_VAR 0 2
53158: NOT
53159: OR
53160: IFFALSE 53164
// exit ;
53162: GO 53262
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53164: LD_ADDR_VAR 0 1
53168: PUSH
53169: LD_VAR 0 1
53173: PPUSH
53174: LD_INT 50
53176: PUSH
53177: EMPTY
53178: LIST
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 92
53185: PUSH
53186: LD_VAR 0 2
53190: PUSH
53191: LD_INT 1
53193: ARRAY
53194: PUSH
53195: LD_VAR 0 2
53199: PUSH
53200: LD_INT 2
53202: ARRAY
53203: PUSH
53204: LD_INT 8
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PPUSH
53221: CALL_OW 72
53225: ST_TO_ADDR
// if not vehicles then
53226: LD_VAR 0 1
53230: NOT
53231: IFFALSE 53235
// exit ;
53233: GO 53262
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53235: LD_VAR 0 1
53239: PPUSH
53240: LD_VAR 0 2
53244: PUSH
53245: LD_INT 1
53247: ARRAY
53248: PPUSH
53249: LD_VAR 0 2
53253: PUSH
53254: LD_INT 2
53256: ARRAY
53257: PPUSH
53258: CALL_OW 111
// end ;
53262: LD_VAR 0 3
53266: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53267: LD_INT 0
53269: PPUSH
53270: PPUSH
53271: PPUSH
// if not side or not area then
53272: LD_VAR 0 1
53276: NOT
53277: IFTRUE 53286
53279: PUSH
53280: LD_VAR 0 2
53284: NOT
53285: OR
53286: IFFALSE 53290
// exit ;
53288: GO 53409
// tmp := AreaToList ( area , 0 ) ;
53290: LD_ADDR_VAR 0 5
53294: PUSH
53295: LD_VAR 0 2
53299: PPUSH
53300: LD_INT 0
53302: PPUSH
53303: CALL_OW 517
53307: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53308: LD_ADDR_VAR 0 4
53312: PUSH
53313: DOUBLE
53314: LD_INT 1
53316: DEC
53317: ST_TO_ADDR
53318: LD_VAR 0 5
53322: PUSH
53323: LD_INT 1
53325: ARRAY
53326: PUSH
53327: FOR_TO
53328: IFFALSE 53407
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53330: LD_VAR 0 5
53334: PUSH
53335: LD_INT 1
53337: ARRAY
53338: PUSH
53339: LD_VAR 0 4
53343: ARRAY
53344: PPUSH
53345: LD_VAR 0 5
53349: PUSH
53350: LD_INT 2
53352: ARRAY
53353: PUSH
53354: LD_VAR 0 4
53358: ARRAY
53359: PPUSH
53360: CALL_OW 351
53364: IFFALSE 53405
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53366: LD_VAR 0 5
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PUSH
53375: LD_VAR 0 4
53379: ARRAY
53380: PPUSH
53381: LD_VAR 0 5
53385: PUSH
53386: LD_INT 2
53388: ARRAY
53389: PUSH
53390: LD_VAR 0 4
53394: ARRAY
53395: PPUSH
53396: LD_VAR 0 1
53400: PPUSH
53401: CALL_OW 244
// end ;
53405: GO 53327
53407: POP
53408: POP
// end ;
53409: LD_VAR 0 3
53413: RET
// export function UniqueArray ( array ) ; var i ; begin
53414: LD_INT 0
53416: PPUSH
53417: PPUSH
// result := [ ] ;
53418: LD_ADDR_VAR 0 2
53422: PUSH
53423: EMPTY
53424: ST_TO_ADDR
// if not array then
53425: LD_VAR 0 1
53429: NOT
53430: IFFALSE 53434
// exit ;
53432: GO 53495
// for i := 1 to array do
53434: LD_ADDR_VAR 0 3
53438: PUSH
53439: DOUBLE
53440: LD_INT 1
53442: DEC
53443: ST_TO_ADDR
53444: LD_VAR 0 1
53448: PUSH
53449: FOR_TO
53450: IFFALSE 53493
// if not array [ i ] in result then
53452: LD_VAR 0 1
53456: PUSH
53457: LD_VAR 0 3
53461: ARRAY
53462: PUSH
53463: LD_VAR 0 2
53467: IN
53468: NOT
53469: IFFALSE 53491
// result := Join ( result , i ) ;
53471: LD_ADDR_VAR 0 2
53475: PUSH
53476: LD_VAR 0 2
53480: PPUSH
53481: LD_VAR 0 3
53485: PPUSH
53486: CALL 48146 0 2
53490: ST_TO_ADDR
53491: GO 53449
53493: POP
53494: POP
// end ; end_of_file
53495: LD_VAR 0 2
53499: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53500: LD_VAR 0 1
53504: PUSH
53505: LD_INT 200
53507: DOUBLE
53508: GREATEREQUAL
53509: IFFALSE 53517
53511: LD_INT 299
53513: DOUBLE
53514: LESSEQUAL
53515: IFTRUE 53519
53517: GO 53551
53519: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53520: LD_VAR 0 1
53524: PPUSH
53525: LD_VAR 0 2
53529: PPUSH
53530: LD_VAR 0 3
53534: PPUSH
53535: LD_VAR 0 4
53539: PPUSH
53540: LD_VAR 0 5
53544: PPUSH
53545: CALL 54332 0 5
53549: GO 53628
53551: LD_INT 300
53553: DOUBLE
53554: GREATEREQUAL
53555: IFFALSE 53563
53557: LD_INT 399
53559: DOUBLE
53560: LESSEQUAL
53561: IFTRUE 53565
53563: GO 53627
53565: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53566: LD_VAR 0 1
53570: PPUSH
53571: LD_VAR 0 2
53575: PPUSH
53576: LD_VAR 0 3
53580: PPUSH
53581: LD_VAR 0 4
53585: PPUSH
53586: LD_VAR 0 5
53590: PPUSH
53591: LD_VAR 0 6
53595: PPUSH
53596: LD_VAR 0 7
53600: PPUSH
53601: LD_VAR 0 8
53605: PPUSH
53606: LD_VAR 0 9
53610: PPUSH
53611: LD_VAR 0 10
53615: PPUSH
53616: LD_VAR 0 11
53620: PPUSH
53621: CALL 61341 0 11
53625: GO 53628
53627: POP
// end ;
53628: PPOPN 11
53630: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53631: LD_VAR 0 1
53635: PPUSH
53636: LD_VAR 0 2
53640: PPUSH
53641: LD_VAR 0 3
53645: PPUSH
53646: LD_VAR 0 4
53650: PPUSH
53651: LD_VAR 0 5
53655: PPUSH
53656: CALL 53713 0 5
// end ; end_of_file
53660: PPOPN 5
53662: END
// export function SOS_UnitDestroyed ( un ) ; begin
53663: LD_INT 0
53665: PPUSH
// ComRadiation ( un ) ;
53666: LD_VAR 0 1
53670: PPUSH
53671: CALL 54752 0 1
// end ;
53675: LD_VAR 0 2
53679: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53680: LD_INT 0
53682: PPUSH
// ComRadiation ( un ) ;
53683: LD_VAR 0 1
53687: PPUSH
53688: CALL 54752 0 1
// end ;
53692: LD_VAR 0 2
53696: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53697: LD_INT 0
53699: PPUSH
// end ;
53700: LD_VAR 0 4
53704: RET
// export function SOS_Command ( cmd ) ; begin
53705: LD_INT 0
53707: PPUSH
// end ;
53708: LD_VAR 0 2
53712: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53713: LD_INT 0
53715: PPUSH
// end ;
53716: LD_VAR 0 6
53720: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53721: LD_INT 0
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
// if not vehicle or not factory then
53727: LD_VAR 0 1
53731: NOT
53732: IFTRUE 53741
53734: PUSH
53735: LD_VAR 0 2
53739: NOT
53740: OR
53741: IFFALSE 53745
// exit ;
53743: GO 54327
// if not factoryWaypoints then
53745: LD_EXP 59
53749: NOT
53750: IFFALSE 53754
// exit ;
53752: GO 54327
// for i := 1 to Count ( factoryWaypoints ) do
53754: LD_ADDR_VAR 0 4
53758: PUSH
53759: DOUBLE
53760: LD_INT 1
53762: DEC
53763: ST_TO_ADDR
53764: LD_EXP 59
53768: PPUSH
53769: CALL 12214 0 1
53773: PUSH
53774: FOR_TO
53775: IFFALSE 54325
// if factoryWaypoints [ i ] [ 2 ] = factory then
53777: LD_EXP 59
53781: PUSH
53782: LD_VAR 0 4
53786: ARRAY
53787: PUSH
53788: LD_INT 2
53790: ARRAY
53791: PUSH
53792: LD_VAR 0 2
53796: EQUAL
53797: IFFALSE 54323
// begin if GetControl ( vehicle ) = control_manual then
53799: LD_VAR 0 1
53803: PPUSH
53804: CALL_OW 263
53808: PUSH
53809: LD_INT 1
53811: EQUAL
53812: IFFALSE 54176
// begin driver := IsDrivenBy ( vehicle ) ;
53814: LD_ADDR_VAR 0 5
53818: PUSH
53819: LD_VAR 0 1
53823: PPUSH
53824: CALL_OW 311
53828: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53829: LD_VAR 0 5
53833: PUSH
53834: LD_EXP 60
53838: IN
53839: IFTRUE 53853
53841: PUSH
53842: LD_VAR 0 1
53846: PUSH
53847: LD_EXP 60
53851: IN
53852: OR
53853: IFFALSE 53859
// exit ;
53855: POP
53856: POP
53857: GO 54327
// if not HasTask ( driver ) then
53859: LD_VAR 0 5
53863: PPUSH
53864: CALL_OW 314
53868: NOT
53869: IFFALSE 54174
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53871: LD_ADDR_EXP 60
53875: PUSH
53876: LD_EXP 60
53880: PPUSH
53881: LD_VAR 0 5
53885: PPUSH
53886: CALL 48146 0 2
53890: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53891: LD_ADDR_EXP 60
53895: PUSH
53896: LD_EXP 60
53900: PPUSH
53901: LD_VAR 0 1
53905: PPUSH
53906: CALL 48146 0 2
53910: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53911: LD_ADDR_VAR 0 6
53915: PUSH
53916: LD_EXP 59
53920: PUSH
53921: LD_VAR 0 4
53925: ARRAY
53926: PUSH
53927: LD_INT 3
53929: ARRAY
53930: PPUSH
53931: LD_EXP 59
53935: PUSH
53936: LD_VAR 0 4
53940: ARRAY
53941: PUSH
53942: LD_INT 4
53944: ARRAY
53945: PPUSH
53946: CALL_OW 428
53950: ST_TO_ADDR
// if hex then
53951: LD_VAR 0 6
53955: IFFALSE 53973
// ComMoveUnit ( driver , hex ) else
53957: LD_VAR 0 5
53961: PPUSH
53962: LD_VAR 0 6
53966: PPUSH
53967: CALL_OW 112
53971: GO 54057
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53973: LD_VAR 0 1
53977: PPUSH
53978: LD_EXP 59
53982: PUSH
53983: LD_VAR 0 4
53987: ARRAY
53988: PUSH
53989: LD_INT 3
53991: ARRAY
53992: PPUSH
53993: LD_EXP 59
53997: PUSH
53998: LD_VAR 0 4
54002: ARRAY
54003: PUSH
54004: LD_INT 4
54006: ARRAY
54007: PPUSH
54008: CALL_OW 297
54012: PUSH
54013: LD_INT 0
54015: GREATER
54016: IFFALSE 54057
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54018: LD_VAR 0 5
54022: PPUSH
54023: LD_EXP 59
54027: PUSH
54028: LD_VAR 0 4
54032: ARRAY
54033: PUSH
54034: LD_INT 3
54036: ARRAY
54037: PPUSH
54038: LD_EXP 59
54042: PUSH
54043: LD_VAR 0 4
54047: ARRAY
54048: PUSH
54049: LD_INT 4
54051: ARRAY
54052: PPUSH
54053: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54057: LD_VAR 0 5
54061: PPUSH
54062: CALL_OW 181
// if Multiplayer then
54066: LD_OWVAR 4
54070: IFFALSE 54119
// begin repeat wait ( 10 ) ;
54072: LD_INT 10
54074: PPUSH
54075: CALL_OW 67
// until not IsInUnit ( driver ) ;
54079: LD_VAR 0 5
54083: PPUSH
54084: CALL_OW 310
54088: NOT
54089: IFFALSE 54072
// if not HasTask ( driver ) then
54091: LD_VAR 0 5
54095: PPUSH
54096: CALL_OW 314
54100: NOT
54101: IFFALSE 54117
// ComEnterUnit ( driver , factory ) ;
54103: LD_VAR 0 5
54107: PPUSH
54108: LD_VAR 0 2
54112: PPUSH
54113: CALL_OW 120
// end else
54117: GO 54133
// AddComEnterUnit ( driver , factory ) ;
54119: LD_VAR 0 5
54123: PPUSH
54124: LD_VAR 0 2
54128: PPUSH
54129: CALL_OW 180
// wait ( 0 0$1 ) ;
54133: LD_INT 35
54135: PPUSH
54136: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54140: LD_ADDR_EXP 60
54144: PUSH
54145: LD_EXP 60
54149: PUSH
54150: LD_VAR 0 5
54154: DIFF
54155: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54156: LD_ADDR_EXP 60
54160: PUSH
54161: LD_EXP 60
54165: PUSH
54166: LD_VAR 0 1
54170: DIFF
54171: ST_TO_ADDR
// break ;
54172: GO 54325
// end ; end else
54174: GO 54323
// if GetControl ( vehicle ) = control_remote then
54176: LD_VAR 0 1
54180: PPUSH
54181: CALL_OW 263
54185: PUSH
54186: LD_INT 2
54188: EQUAL
54189: IFFALSE 54275
// begin wait ( 0 0$2 ) ;
54191: LD_INT 70
54193: PPUSH
54194: CALL_OW 67
// repeat wait ( 10 ) ;
54198: LD_INT 10
54200: PPUSH
54201: CALL_OW 67
// Connect ( vehicle ) ;
54205: LD_VAR 0 1
54209: PPUSH
54210: CALL 18458 0 1
// until IsControledBy ( vehicle ) ;
54214: LD_VAR 0 1
54218: PPUSH
54219: CALL_OW 312
54223: IFFALSE 54198
// wait ( 10 ) ;
54225: LD_INT 10
54227: PPUSH
54228: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54232: LD_VAR 0 1
54236: PPUSH
54237: LD_EXP 59
54241: PUSH
54242: LD_VAR 0 4
54246: ARRAY
54247: PUSH
54248: LD_INT 3
54250: ARRAY
54251: PPUSH
54252: LD_EXP 59
54256: PUSH
54257: LD_VAR 0 4
54261: ARRAY
54262: PUSH
54263: LD_INT 4
54265: ARRAY
54266: PPUSH
54267: CALL_OW 111
// break ;
54271: GO 54325
// end else
54273: GO 54323
// begin wait ( 0 0$3 ) ;
54275: LD_INT 105
54277: PPUSH
54278: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54282: LD_VAR 0 1
54286: PPUSH
54287: LD_EXP 59
54291: PUSH
54292: LD_VAR 0 4
54296: ARRAY
54297: PUSH
54298: LD_INT 3
54300: ARRAY
54301: PPUSH
54302: LD_EXP 59
54306: PUSH
54307: LD_VAR 0 4
54311: ARRAY
54312: PUSH
54313: LD_INT 4
54315: ARRAY
54316: PPUSH
54317: CALL_OW 111
// break ;
54321: GO 54325
// end ; end ;
54323: GO 53774
54325: POP
54326: POP
// end ;
54327: LD_VAR 0 3
54331: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54332: LD_INT 0
54334: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54335: LD_VAR 0 1
54339: PUSH
54340: LD_INT 250
54342: EQUAL
54343: IFFALSE 54360
54345: PUSH
54346: LD_VAR 0 2
54350: PPUSH
54351: CALL_OW 264
54355: PUSH
54356: LD_INT 81
54358: EQUAL
54359: AND
54360: IFFALSE 54381
// MinerPlaceMine ( unit , x , y ) ;
54362: LD_VAR 0 2
54366: PPUSH
54367: LD_VAR 0 4
54371: PPUSH
54372: LD_VAR 0 5
54376: PPUSH
54377: CALL 57513 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54381: LD_VAR 0 1
54385: PUSH
54386: LD_INT 251
54388: EQUAL
54389: IFFALSE 54406
54391: PUSH
54392: LD_VAR 0 2
54396: PPUSH
54397: CALL_OW 264
54401: PUSH
54402: LD_INT 81
54404: EQUAL
54405: AND
54406: IFFALSE 54427
// MinerDetonateMine ( unit , x , y ) ;
54408: LD_VAR 0 2
54412: PPUSH
54413: LD_VAR 0 4
54417: PPUSH
54418: LD_VAR 0 5
54422: PPUSH
54423: CALL 57792 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54427: LD_VAR 0 1
54431: PUSH
54432: LD_INT 252
54434: EQUAL
54435: IFFALSE 54452
54437: PUSH
54438: LD_VAR 0 2
54442: PPUSH
54443: CALL_OW 264
54447: PUSH
54448: LD_INT 81
54450: EQUAL
54451: AND
54452: IFFALSE 54473
// MinerCreateMinefield ( unit , x , y ) ;
54454: LD_VAR 0 2
54458: PPUSH
54459: LD_VAR 0 4
54463: PPUSH
54464: LD_VAR 0 5
54468: PPUSH
54469: CALL 58211 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54473: LD_VAR 0 1
54477: PUSH
54478: LD_INT 253
54480: EQUAL
54481: IFFALSE 54498
54483: PUSH
54484: LD_VAR 0 2
54488: PPUSH
54489: CALL_OW 257
54493: PUSH
54494: LD_INT 5
54496: EQUAL
54497: AND
54498: IFFALSE 54519
// ComBinocular ( unit , x , y ) ;
54500: LD_VAR 0 2
54504: PPUSH
54505: LD_VAR 0 4
54509: PPUSH
54510: LD_VAR 0 5
54514: PPUSH
54515: CALL 58586 0 3
// if selectedUnit then
54519: LD_VAR 0 3
54523: IFFALSE 54583
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54525: LD_VAR 0 1
54529: PUSH
54530: LD_INT 254
54532: EQUAL
54533: IFFALSE 54550
54535: PUSH
54536: LD_VAR 0 2
54540: PPUSH
54541: CALL_OW 264
54545: PUSH
54546: LD_INT 99
54548: EQUAL
54549: AND
54550: IFFALSE 54567
54552: PUSH
54553: LD_VAR 0 3
54557: PPUSH
54558: CALL_OW 263
54562: PUSH
54563: LD_INT 3
54565: EQUAL
54566: AND
54567: IFFALSE 54583
// HackDestroyVehicle ( unit , selectedUnit ) ;
54569: LD_VAR 0 2
54573: PPUSH
54574: LD_VAR 0 3
54578: PPUSH
54579: CALL 56873 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54583: LD_VAR 0 1
54587: PUSH
54588: LD_INT 255
54590: EQUAL
54591: IFFALSE 54615
54593: PUSH
54594: LD_VAR 0 2
54598: PPUSH
54599: CALL_OW 264
54603: PUSH
54604: LD_INT 14
54606: PUSH
54607: LD_INT 53
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: IN
54614: AND
54615: IFFALSE 54633
54617: PUSH
54618: LD_VAR 0 4
54622: PPUSH
54623: LD_VAR 0 5
54627: PPUSH
54628: CALL_OW 488
54632: AND
54633: IFFALSE 54657
// CutTreeXYR ( unit , x , y , 12 ) ;
54635: LD_VAR 0 2
54639: PPUSH
54640: LD_VAR 0 4
54644: PPUSH
54645: LD_VAR 0 5
54649: PPUSH
54650: LD_INT 12
54652: PPUSH
54653: CALL 54848 0 4
// if cmd = 256 then
54657: LD_VAR 0 1
54661: PUSH
54662: LD_INT 256
54664: EQUAL
54665: IFFALSE 54686
// SetFactoryWaypoint ( unit , x , y ) ;
54667: LD_VAR 0 2
54671: PPUSH
54672: LD_VAR 0 4
54676: PPUSH
54677: LD_VAR 0 5
54681: PPUSH
54682: CALL 61349 0 3
// if cmd = 257 then
54686: LD_VAR 0 1
54690: PUSH
54691: LD_INT 257
54693: EQUAL
54694: IFFALSE 54715
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54696: LD_VAR 0 2
54700: PPUSH
54701: LD_VAR 0 4
54705: PPUSH
54706: LD_VAR 0 5
54710: PPUSH
54711: CALL 61845 0 3
// if cmd = 258 then
54715: LD_VAR 0 1
54719: PUSH
54720: LD_INT 258
54722: EQUAL
54723: IFFALSE 54747
// BurnTreeXYR ( unit , x , y , 8 ) ;
54725: LD_VAR 0 2
54729: PPUSH
54730: LD_VAR 0 4
54734: PPUSH
54735: LD_VAR 0 5
54739: PPUSH
54740: LD_INT 8
54742: PPUSH
54743: CALL 55248 0 4
// end ;
54747: LD_VAR 0 6
54751: RET
// export function ComRadiation ( un ) ; var eff ; begin
54752: LD_INT 0
54754: PPUSH
54755: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54756: LD_VAR 0 1
54760: PPUSH
54761: CALL_OW 264
54765: PUSH
54766: LD_INT 91
54768: NONEQUAL
54769: IFFALSE 54773
// exit ;
54771: GO 54843
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54773: LD_INT 68
54775: PPUSH
54776: LD_VAR 0 1
54780: PPUSH
54781: CALL_OW 255
54785: PPUSH
54786: CALL_OW 321
54790: PUSH
54791: LD_INT 2
54793: EQUAL
54794: IFFALSE 54806
// eff := 50 else
54796: LD_ADDR_VAR 0 3
54800: PUSH
54801: LD_INT 50
54803: ST_TO_ADDR
54804: GO 54814
// eff := 25 ;
54806: LD_ADDR_VAR 0 3
54810: PUSH
54811: LD_INT 25
54813: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54814: LD_VAR 0 1
54818: PPUSH
54819: CALL_OW 250
54823: PPUSH
54824: LD_VAR 0 1
54828: PPUSH
54829: CALL_OW 251
54833: PPUSH
54834: LD_VAR 0 3
54838: PPUSH
54839: CALL_OW 495
// end ;
54843: LD_VAR 0 2
54847: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54848: LD_INT 0
54850: PPUSH
54851: PPUSH
54852: PPUSH
54853: PPUSH
54854: PPUSH
54855: PPUSH
54856: PPUSH
54857: PPUSH
54858: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54859: LD_VAR 0 1
54863: PPUSH
54864: CALL_OW 302
54868: NOT
54869: IFTRUE 54888
54871: PUSH
54872: LD_VAR 0 2
54876: PPUSH
54877: LD_VAR 0 3
54881: PPUSH
54882: CALL_OW 488
54886: NOT
54887: OR
54888: IFTRUE 54897
54890: PUSH
54891: LD_VAR 0 4
54895: NOT
54896: OR
54897: IFFALSE 54901
// exit ;
54899: GO 55243
// list := [ ] ;
54901: LD_ADDR_VAR 0 13
54905: PUSH
54906: EMPTY
54907: ST_TO_ADDR
// if x - r < 0 then
54908: LD_VAR 0 2
54912: PUSH
54913: LD_VAR 0 4
54917: MINUS
54918: PUSH
54919: LD_INT 0
54921: LESS
54922: IFFALSE 54934
// min_x := 0 else
54924: LD_ADDR_VAR 0 7
54928: PUSH
54929: LD_INT 0
54931: ST_TO_ADDR
54932: GO 54950
// min_x := x - r ;
54934: LD_ADDR_VAR 0 7
54938: PUSH
54939: LD_VAR 0 2
54943: PUSH
54944: LD_VAR 0 4
54948: MINUS
54949: ST_TO_ADDR
// if y - r < 0 then
54950: LD_VAR 0 3
54954: PUSH
54955: LD_VAR 0 4
54959: MINUS
54960: PUSH
54961: LD_INT 0
54963: LESS
54964: IFFALSE 54976
// min_y := 0 else
54966: LD_ADDR_VAR 0 8
54970: PUSH
54971: LD_INT 0
54973: ST_TO_ADDR
54974: GO 54992
// min_y := y - r ;
54976: LD_ADDR_VAR 0 8
54980: PUSH
54981: LD_VAR 0 3
54985: PUSH
54986: LD_VAR 0 4
54990: MINUS
54991: ST_TO_ADDR
// max_x := x + r ;
54992: LD_ADDR_VAR 0 9
54996: PUSH
54997: LD_VAR 0 2
55001: PUSH
55002: LD_VAR 0 4
55006: PLUS
55007: ST_TO_ADDR
// max_y := y + r ;
55008: LD_ADDR_VAR 0 10
55012: PUSH
55013: LD_VAR 0 3
55017: PUSH
55018: LD_VAR 0 4
55022: PLUS
55023: ST_TO_ADDR
// for _x = min_x to max_x do
55024: LD_ADDR_VAR 0 11
55028: PUSH
55029: DOUBLE
55030: LD_VAR 0 7
55034: DEC
55035: ST_TO_ADDR
55036: LD_VAR 0 9
55040: PUSH
55041: FOR_TO
55042: IFFALSE 55161
// for _y = min_y to max_y do
55044: LD_ADDR_VAR 0 12
55048: PUSH
55049: DOUBLE
55050: LD_VAR 0 8
55054: DEC
55055: ST_TO_ADDR
55056: LD_VAR 0 10
55060: PUSH
55061: FOR_TO
55062: IFFALSE 55157
// begin if not ValidHex ( _x , _y ) then
55064: LD_VAR 0 11
55068: PPUSH
55069: LD_VAR 0 12
55073: PPUSH
55074: CALL_OW 488
55078: NOT
55079: IFFALSE 55083
// continue ;
55081: GO 55061
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55083: LD_VAR 0 11
55087: PPUSH
55088: LD_VAR 0 12
55092: PPUSH
55093: CALL_OW 351
55097: IFFALSE 55115
55099: PUSH
55100: LD_VAR 0 11
55104: PPUSH
55105: LD_VAR 0 12
55109: PPUSH
55110: CALL_OW 554
55114: AND
55115: IFFALSE 55155
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55117: LD_ADDR_VAR 0 13
55121: PUSH
55122: LD_VAR 0 13
55126: PPUSH
55127: LD_VAR 0 13
55131: PUSH
55132: LD_INT 1
55134: PLUS
55135: PPUSH
55136: LD_VAR 0 11
55140: PUSH
55141: LD_VAR 0 12
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PPUSH
55150: CALL_OW 2
55154: ST_TO_ADDR
// end ;
55155: GO 55061
55157: POP
55158: POP
55159: GO 55041
55161: POP
55162: POP
// if not list then
55163: LD_VAR 0 13
55167: NOT
55168: IFFALSE 55172
// exit ;
55170: GO 55243
// for i in list do
55172: LD_ADDR_VAR 0 6
55176: PUSH
55177: LD_VAR 0 13
55181: PUSH
55182: FOR_IN
55183: IFFALSE 55241
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55185: LD_VAR 0 1
55189: PPUSH
55190: LD_STRING M
55192: PUSH
55193: LD_VAR 0 6
55197: PUSH
55198: LD_INT 1
55200: ARRAY
55201: PUSH
55202: LD_VAR 0 6
55206: PUSH
55207: LD_INT 2
55209: ARRAY
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: PUSH
55232: EMPTY
55233: LIST
55234: PPUSH
55235: CALL_OW 447
55239: GO 55182
55241: POP
55242: POP
// end ;
55243: LD_VAR 0 5
55247: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55248: LD_INT 0
55250: PPUSH
55251: PPUSH
55252: PPUSH
55253: PPUSH
55254: PPUSH
55255: PPUSH
55256: PPUSH
55257: PPUSH
55258: PPUSH
55259: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55260: LD_VAR 0 1
55264: PPUSH
55265: CALL_OW 302
55269: NOT
55270: IFTRUE 55289
55272: PUSH
55273: LD_VAR 0 2
55277: PPUSH
55278: LD_VAR 0 3
55282: PPUSH
55283: CALL_OW 488
55287: NOT
55288: OR
55289: IFTRUE 55298
55291: PUSH
55292: LD_VAR 0 4
55296: NOT
55297: OR
55298: IFFALSE 55302
// exit ;
55300: GO 55819
// list := [ ] ;
55302: LD_ADDR_VAR 0 13
55306: PUSH
55307: EMPTY
55308: ST_TO_ADDR
// if x - r < 0 then
55309: LD_VAR 0 2
55313: PUSH
55314: LD_VAR 0 4
55318: MINUS
55319: PUSH
55320: LD_INT 0
55322: LESS
55323: IFFALSE 55335
// min_x := 0 else
55325: LD_ADDR_VAR 0 7
55329: PUSH
55330: LD_INT 0
55332: ST_TO_ADDR
55333: GO 55351
// min_x := x - r ;
55335: LD_ADDR_VAR 0 7
55339: PUSH
55340: LD_VAR 0 2
55344: PUSH
55345: LD_VAR 0 4
55349: MINUS
55350: ST_TO_ADDR
// if y - r < 0 then
55351: LD_VAR 0 3
55355: PUSH
55356: LD_VAR 0 4
55360: MINUS
55361: PUSH
55362: LD_INT 0
55364: LESS
55365: IFFALSE 55377
// min_y := 0 else
55367: LD_ADDR_VAR 0 8
55371: PUSH
55372: LD_INT 0
55374: ST_TO_ADDR
55375: GO 55393
// min_y := y - r ;
55377: LD_ADDR_VAR 0 8
55381: PUSH
55382: LD_VAR 0 3
55386: PUSH
55387: LD_VAR 0 4
55391: MINUS
55392: ST_TO_ADDR
// max_x := x + r ;
55393: LD_ADDR_VAR 0 9
55397: PUSH
55398: LD_VAR 0 2
55402: PUSH
55403: LD_VAR 0 4
55407: PLUS
55408: ST_TO_ADDR
// max_y := y + r ;
55409: LD_ADDR_VAR 0 10
55413: PUSH
55414: LD_VAR 0 3
55418: PUSH
55419: LD_VAR 0 4
55423: PLUS
55424: ST_TO_ADDR
// for _x = min_x to max_x do
55425: LD_ADDR_VAR 0 11
55429: PUSH
55430: DOUBLE
55431: LD_VAR 0 7
55435: DEC
55436: ST_TO_ADDR
55437: LD_VAR 0 9
55441: PUSH
55442: FOR_TO
55443: IFFALSE 55562
// for _y = min_y to max_y do
55445: LD_ADDR_VAR 0 12
55449: PUSH
55450: DOUBLE
55451: LD_VAR 0 8
55455: DEC
55456: ST_TO_ADDR
55457: LD_VAR 0 10
55461: PUSH
55462: FOR_TO
55463: IFFALSE 55558
// begin if not ValidHex ( _x , _y ) then
55465: LD_VAR 0 11
55469: PPUSH
55470: LD_VAR 0 12
55474: PPUSH
55475: CALL_OW 488
55479: NOT
55480: IFFALSE 55484
// continue ;
55482: GO 55462
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55484: LD_VAR 0 11
55488: PPUSH
55489: LD_VAR 0 12
55493: PPUSH
55494: CALL_OW 351
55498: IFFALSE 55516
55500: PUSH
55501: LD_VAR 0 11
55505: PPUSH
55506: LD_VAR 0 12
55510: PPUSH
55511: CALL_OW 554
55515: AND
55516: IFFALSE 55556
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55518: LD_ADDR_VAR 0 13
55522: PUSH
55523: LD_VAR 0 13
55527: PPUSH
55528: LD_VAR 0 13
55532: PUSH
55533: LD_INT 1
55535: PLUS
55536: PPUSH
55537: LD_VAR 0 11
55541: PUSH
55542: LD_VAR 0 12
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PPUSH
55551: CALL_OW 2
55555: ST_TO_ADDR
// end ;
55556: GO 55462
55558: POP
55559: POP
55560: GO 55442
55562: POP
55563: POP
// if not list then
55564: LD_VAR 0 13
55568: NOT
55569: IFFALSE 55573
// exit ;
55571: GO 55819
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55573: LD_ADDR_VAR 0 13
55577: PUSH
55578: LD_VAR 0 1
55582: PPUSH
55583: LD_VAR 0 13
55587: PPUSH
55588: LD_INT 1
55590: PPUSH
55591: LD_INT 1
55593: PPUSH
55594: CALL 15586 0 4
55598: ST_TO_ADDR
// ComStop ( flame ) ;
55599: LD_VAR 0 1
55603: PPUSH
55604: CALL_OW 141
// for i in list do
55608: LD_ADDR_VAR 0 6
55612: PUSH
55613: LD_VAR 0 13
55617: PUSH
55618: FOR_IN
55619: IFFALSE 55650
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55621: LD_VAR 0 1
55625: PPUSH
55626: LD_VAR 0 6
55630: PUSH
55631: LD_INT 1
55633: ARRAY
55634: PPUSH
55635: LD_VAR 0 6
55639: PUSH
55640: LD_INT 2
55642: ARRAY
55643: PPUSH
55644: CALL_OW 176
55648: GO 55618
55650: POP
55651: POP
// repeat wait ( 0 0$1 ) ;
55652: LD_INT 35
55654: PPUSH
55655: CALL_OW 67
// task := GetTaskList ( flame ) ;
55659: LD_ADDR_VAR 0 14
55663: PUSH
55664: LD_VAR 0 1
55668: PPUSH
55669: CALL_OW 437
55673: ST_TO_ADDR
// if not task then
55674: LD_VAR 0 14
55678: NOT
55679: IFFALSE 55683
// exit ;
55681: GO 55819
// if task [ 1 ] [ 1 ] <> | then
55683: LD_VAR 0 14
55687: PUSH
55688: LD_INT 1
55690: ARRAY
55691: PUSH
55692: LD_INT 1
55694: ARRAY
55695: PUSH
55696: LD_STRING |
55698: NONEQUAL
55699: IFFALSE 55703
// exit ;
55701: GO 55819
// _x := task [ 1 ] [ 2 ] ;
55703: LD_ADDR_VAR 0 11
55707: PUSH
55708: LD_VAR 0 14
55712: PUSH
55713: LD_INT 1
55715: ARRAY
55716: PUSH
55717: LD_INT 2
55719: ARRAY
55720: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55721: LD_ADDR_VAR 0 12
55725: PUSH
55726: LD_VAR 0 14
55730: PUSH
55731: LD_INT 1
55733: ARRAY
55734: PUSH
55735: LD_INT 3
55737: ARRAY
55738: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55739: LD_VAR 0 11
55743: PPUSH
55744: LD_VAR 0 12
55748: PPUSH
55749: CALL_OW 351
55753: NOT
55754: IFTRUE 55773
55756: PUSH
55757: LD_VAR 0 11
55761: PPUSH
55762: LD_VAR 0 12
55766: PPUSH
55767: CALL_OW 554
55771: NOT
55772: OR
55773: IFFALSE 55807
// begin task := Delete ( task , 1 ) ;
55775: LD_ADDR_VAR 0 14
55779: PUSH
55780: LD_VAR 0 14
55784: PPUSH
55785: LD_INT 1
55787: PPUSH
55788: CALL_OW 3
55792: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55793: LD_VAR 0 1
55797: PPUSH
55798: LD_VAR 0 14
55802: PPUSH
55803: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55807: LD_VAR 0 1
55811: PPUSH
55812: CALL_OW 314
55816: NOT
55817: IFFALSE 55652
// end ;
55819: LD_VAR 0 5
55823: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55824: LD_EXP 48
55828: NOT
55829: IFFALSE 55879
55831: GO 55833
55833: DISABLE
// begin initHack := true ;
55834: LD_ADDR_EXP 48
55838: PUSH
55839: LD_INT 1
55841: ST_TO_ADDR
// hackTanks := [ ] ;
55842: LD_ADDR_EXP 49
55846: PUSH
55847: EMPTY
55848: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55849: LD_ADDR_EXP 50
55853: PUSH
55854: EMPTY
55855: ST_TO_ADDR
// hackLimit := 3 ;
55856: LD_ADDR_EXP 51
55860: PUSH
55861: LD_INT 3
55863: ST_TO_ADDR
// hackDist := 12 ;
55864: LD_ADDR_EXP 52
55868: PUSH
55869: LD_INT 12
55871: ST_TO_ADDR
// hackCounter := [ ] ;
55872: LD_ADDR_EXP 53
55876: PUSH
55877: EMPTY
55878: ST_TO_ADDR
// end ;
55879: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55880: LD_EXP 48
55884: IFFALSE 55902
55886: PUSH
55887: LD_INT 34
55889: PUSH
55890: LD_INT 99
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PPUSH
55897: CALL_OW 69
55901: AND
55902: IFFALSE 56155
55904: GO 55906
55906: DISABLE
55907: LD_INT 0
55909: PPUSH
55910: PPUSH
// begin enable ;
55911: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55912: LD_ADDR_VAR 0 1
55916: PUSH
55917: LD_INT 34
55919: PUSH
55920: LD_INT 99
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PPUSH
55927: CALL_OW 69
55931: PUSH
55932: FOR_IN
55933: IFFALSE 56153
// begin if not i in hackTanks then
55935: LD_VAR 0 1
55939: PUSH
55940: LD_EXP 49
55944: IN
55945: NOT
55946: IFFALSE 56029
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55948: LD_ADDR_EXP 49
55952: PUSH
55953: LD_EXP 49
55957: PPUSH
55958: LD_EXP 49
55962: PUSH
55963: LD_INT 1
55965: PLUS
55966: PPUSH
55967: LD_VAR 0 1
55971: PPUSH
55972: CALL_OW 1
55976: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55977: LD_ADDR_EXP 50
55981: PUSH
55982: LD_EXP 50
55986: PPUSH
55987: LD_EXP 50
55991: PUSH
55992: LD_INT 1
55994: PLUS
55995: PPUSH
55996: EMPTY
55997: PPUSH
55998: CALL_OW 1
56002: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56003: LD_ADDR_EXP 53
56007: PUSH
56008: LD_EXP 53
56012: PPUSH
56013: LD_EXP 53
56017: PUSH
56018: LD_INT 1
56020: PLUS
56021: PPUSH
56022: EMPTY
56023: PPUSH
56024: CALL_OW 1
56028: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56029: LD_VAR 0 1
56033: PPUSH
56034: CALL_OW 302
56038: NOT
56039: IFFALSE 56052
// begin HackUnlinkAll ( i ) ;
56041: LD_VAR 0 1
56045: PPUSH
56046: CALL 56158 0 1
// continue ;
56050: GO 55932
// end ; HackCheckCapturedStatus ( i ) ;
56052: LD_VAR 0 1
56056: PPUSH
56057: CALL 56603 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56061: LD_ADDR_VAR 0 2
56065: PUSH
56066: LD_INT 81
56068: PUSH
56069: LD_VAR 0 1
56073: PPUSH
56074: CALL_OW 255
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 33
56085: PUSH
56086: LD_INT 3
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 91
56095: PUSH
56096: LD_VAR 0 1
56100: PUSH
56101: LD_EXP 52
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 50
56113: PUSH
56114: EMPTY
56115: LIST
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: PPUSH
56123: CALL_OW 69
56127: ST_TO_ADDR
// if not tmp then
56128: LD_VAR 0 2
56132: NOT
56133: IFFALSE 56137
// continue ;
56135: GO 55932
// HackLink ( i , tmp ) ;
56137: LD_VAR 0 1
56141: PPUSH
56142: LD_VAR 0 2
56146: PPUSH
56147: CALL 56294 0 2
// end ;
56151: GO 55932
56153: POP
56154: POP
// end ;
56155: PPOPN 2
56157: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56158: LD_INT 0
56160: PPUSH
56161: PPUSH
56162: PPUSH
// if not hack in hackTanks then
56163: LD_VAR 0 1
56167: PUSH
56168: LD_EXP 49
56172: IN
56173: NOT
56174: IFFALSE 56178
// exit ;
56176: GO 56289
// index := GetElementIndex ( hackTanks , hack ) ;
56178: LD_ADDR_VAR 0 4
56182: PUSH
56183: LD_EXP 49
56187: PPUSH
56188: LD_VAR 0 1
56192: PPUSH
56193: CALL 14881 0 2
56197: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56198: LD_EXP 50
56202: PUSH
56203: LD_VAR 0 4
56207: ARRAY
56208: IFFALSE 56289
// begin for i in hackTanksCaptured [ index ] do
56210: LD_ADDR_VAR 0 3
56214: PUSH
56215: LD_EXP 50
56219: PUSH
56220: LD_VAR 0 4
56224: ARRAY
56225: PUSH
56226: FOR_IN
56227: IFFALSE 56253
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56229: LD_VAR 0 3
56233: PUSH
56234: LD_INT 1
56236: ARRAY
56237: PPUSH
56238: LD_VAR 0 3
56242: PUSH
56243: LD_INT 2
56245: ARRAY
56246: PPUSH
56247: CALL_OW 235
56251: GO 56226
56253: POP
56254: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56255: LD_ADDR_EXP 50
56259: PUSH
56260: LD_EXP 50
56264: PPUSH
56265: LD_VAR 0 4
56269: PPUSH
56270: EMPTY
56271: PPUSH
56272: CALL_OW 1
56276: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56277: LD_VAR 0 1
56281: PPUSH
56282: LD_INT 0
56284: PPUSH
56285: CALL_OW 505
// end ; end ;
56289: LD_VAR 0 2
56293: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56294: LD_INT 0
56296: PPUSH
56297: PPUSH
56298: PPUSH
// if not hack in hackTanks or not vehicles then
56299: LD_VAR 0 1
56303: PUSH
56304: LD_EXP 49
56308: IN
56309: NOT
56310: IFTRUE 56319
56312: PUSH
56313: LD_VAR 0 2
56317: NOT
56318: OR
56319: IFFALSE 56323
// exit ;
56321: GO 56598
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56323: LD_ADDR_VAR 0 2
56327: PUSH
56328: LD_VAR 0 1
56332: PPUSH
56333: LD_VAR 0 2
56337: PPUSH
56338: LD_INT 1
56340: PPUSH
56341: LD_INT 1
56343: PPUSH
56344: CALL 15533 0 4
56348: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56349: LD_ADDR_VAR 0 5
56353: PUSH
56354: LD_EXP 49
56358: PPUSH
56359: LD_VAR 0 1
56363: PPUSH
56364: CALL 14881 0 2
56368: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56369: LD_EXP 50
56373: PUSH
56374: LD_VAR 0 5
56378: ARRAY
56379: PUSH
56380: LD_EXP 51
56384: LESS
56385: IFFALSE 56574
// begin for i := 1 to vehicles do
56387: LD_ADDR_VAR 0 4
56391: PUSH
56392: DOUBLE
56393: LD_INT 1
56395: DEC
56396: ST_TO_ADDR
56397: LD_VAR 0 2
56401: PUSH
56402: FOR_TO
56403: IFFALSE 56572
// begin if hackTanksCaptured [ index ] = hackLimit then
56405: LD_EXP 50
56409: PUSH
56410: LD_VAR 0 5
56414: ARRAY
56415: PUSH
56416: LD_EXP 51
56420: EQUAL
56421: IFFALSE 56425
// break ;
56423: GO 56572
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56425: LD_ADDR_EXP 53
56429: PUSH
56430: LD_EXP 53
56434: PPUSH
56435: LD_VAR 0 5
56439: PPUSH
56440: LD_EXP 53
56444: PUSH
56445: LD_VAR 0 5
56449: ARRAY
56450: PUSH
56451: LD_INT 1
56453: PLUS
56454: PPUSH
56455: CALL_OW 1
56459: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56460: LD_ADDR_EXP 50
56464: PUSH
56465: LD_EXP 50
56469: PPUSH
56470: LD_VAR 0 5
56474: PUSH
56475: LD_EXP 50
56479: PUSH
56480: LD_VAR 0 5
56484: ARRAY
56485: PUSH
56486: LD_INT 1
56488: PLUS
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PPUSH
56494: LD_VAR 0 2
56498: PUSH
56499: LD_VAR 0 4
56503: ARRAY
56504: PUSH
56505: LD_VAR 0 2
56509: PUSH
56510: LD_VAR 0 4
56514: ARRAY
56515: PPUSH
56516: CALL_OW 255
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PPUSH
56525: CALL 15098 0 3
56529: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56530: LD_VAR 0 2
56534: PUSH
56535: LD_VAR 0 4
56539: ARRAY
56540: PPUSH
56541: LD_VAR 0 1
56545: PPUSH
56546: CALL_OW 255
56550: PPUSH
56551: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56555: LD_VAR 0 2
56559: PUSH
56560: LD_VAR 0 4
56564: ARRAY
56565: PPUSH
56566: CALL_OW 141
// end ;
56570: GO 56402
56572: POP
56573: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56574: LD_VAR 0 1
56578: PPUSH
56579: LD_EXP 50
56583: PUSH
56584: LD_VAR 0 5
56588: ARRAY
56589: PUSH
56590: LD_INT 0
56592: PLUS
56593: PPUSH
56594: CALL_OW 505
// end ;
56598: LD_VAR 0 3
56602: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56603: LD_INT 0
56605: PPUSH
56606: PPUSH
56607: PPUSH
56608: PPUSH
// if not hack in hackTanks then
56609: LD_VAR 0 1
56613: PUSH
56614: LD_EXP 49
56618: IN
56619: NOT
56620: IFFALSE 56624
// exit ;
56622: GO 56868
// index := GetElementIndex ( hackTanks , hack ) ;
56624: LD_ADDR_VAR 0 4
56628: PUSH
56629: LD_EXP 49
56633: PPUSH
56634: LD_VAR 0 1
56638: PPUSH
56639: CALL 14881 0 2
56643: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56644: LD_ADDR_VAR 0 3
56648: PUSH
56649: DOUBLE
56650: LD_EXP 50
56654: PUSH
56655: LD_VAR 0 4
56659: ARRAY
56660: INC
56661: ST_TO_ADDR
56662: LD_INT 1
56664: PUSH
56665: FOR_DOWNTO
56666: IFFALSE 56842
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56668: LD_ADDR_VAR 0 5
56672: PUSH
56673: LD_EXP 50
56677: PUSH
56678: LD_VAR 0 4
56682: ARRAY
56683: PUSH
56684: LD_VAR 0 3
56688: ARRAY
56689: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56690: LD_VAR 0 5
56694: PUSH
56695: LD_INT 1
56697: ARRAY
56698: PPUSH
56699: CALL_OW 302
56703: NOT
56704: IFTRUE 56732
56706: PUSH
56707: LD_VAR 0 5
56711: PUSH
56712: LD_INT 1
56714: ARRAY
56715: PPUSH
56716: CALL_OW 255
56720: PUSH
56721: LD_VAR 0 1
56725: PPUSH
56726: CALL_OW 255
56730: NONEQUAL
56731: OR
56732: IFFALSE 56840
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56734: LD_VAR 0 5
56738: PUSH
56739: LD_INT 1
56741: ARRAY
56742: PPUSH
56743: CALL_OW 305
56747: IFFALSE 56775
56749: PUSH
56750: LD_VAR 0 5
56754: PUSH
56755: LD_INT 1
56757: ARRAY
56758: PPUSH
56759: CALL_OW 255
56763: PUSH
56764: LD_VAR 0 1
56768: PPUSH
56769: CALL_OW 255
56773: EQUAL
56774: AND
56775: IFFALSE 56799
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56777: LD_VAR 0 5
56781: PUSH
56782: LD_INT 1
56784: ARRAY
56785: PPUSH
56786: LD_VAR 0 5
56790: PUSH
56791: LD_INT 2
56793: ARRAY
56794: PPUSH
56795: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56799: LD_ADDR_EXP 50
56803: PUSH
56804: LD_EXP 50
56808: PPUSH
56809: LD_VAR 0 4
56813: PPUSH
56814: LD_EXP 50
56818: PUSH
56819: LD_VAR 0 4
56823: ARRAY
56824: PPUSH
56825: LD_VAR 0 3
56829: PPUSH
56830: CALL_OW 3
56834: PPUSH
56835: CALL_OW 1
56839: ST_TO_ADDR
// end ; end ;
56840: GO 56665
56842: POP
56843: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56844: LD_VAR 0 1
56848: PPUSH
56849: LD_EXP 50
56853: PUSH
56854: LD_VAR 0 4
56858: ARRAY
56859: PUSH
56860: LD_INT 0
56862: PLUS
56863: PPUSH
56864: CALL_OW 505
// end ;
56868: LD_VAR 0 2
56872: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56873: LD_INT 0
56875: PPUSH
56876: PPUSH
56877: PPUSH
56878: PPUSH
// if not hack in hackTanks then
56879: LD_VAR 0 1
56883: PUSH
56884: LD_EXP 49
56888: IN
56889: NOT
56890: IFFALSE 56894
// exit ;
56892: GO 56979
// index := GetElementIndex ( hackTanks , hack ) ;
56894: LD_ADDR_VAR 0 5
56898: PUSH
56899: LD_EXP 49
56903: PPUSH
56904: LD_VAR 0 1
56908: PPUSH
56909: CALL 14881 0 2
56913: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56914: LD_ADDR_VAR 0 4
56918: PUSH
56919: DOUBLE
56920: LD_INT 1
56922: DEC
56923: ST_TO_ADDR
56924: LD_EXP 50
56928: PUSH
56929: LD_VAR 0 5
56933: ARRAY
56934: PUSH
56935: FOR_TO
56936: IFFALSE 56977
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56938: LD_EXP 50
56942: PUSH
56943: LD_VAR 0 5
56947: ARRAY
56948: PUSH
56949: LD_VAR 0 4
56953: ARRAY
56954: PUSH
56955: LD_INT 1
56957: ARRAY
56958: PUSH
56959: LD_VAR 0 2
56963: EQUAL
56964: IFFALSE 56975
// KillUnit ( vehicle ) ;
56966: LD_VAR 0 2
56970: PPUSH
56971: CALL_OW 66
56975: GO 56935
56977: POP
56978: POP
// end ;
56979: LD_VAR 0 3
56983: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56984: LD_EXP 54
56988: NOT
56989: IFFALSE 57024
56991: GO 56993
56993: DISABLE
// begin initMiner := true ;
56994: LD_ADDR_EXP 54
56998: PUSH
56999: LD_INT 1
57001: ST_TO_ADDR
// minersList := [ ] ;
57002: LD_ADDR_EXP 55
57006: PUSH
57007: EMPTY
57008: ST_TO_ADDR
// minerMinesList := [ ] ;
57009: LD_ADDR_EXP 56
57013: PUSH
57014: EMPTY
57015: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57016: LD_ADDR_EXP 57
57020: PUSH
57021: LD_INT 5
57023: ST_TO_ADDR
// end ;
57024: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57025: LD_EXP 54
57029: IFFALSE 57047
57031: PUSH
57032: LD_INT 34
57034: PUSH
57035: LD_INT 81
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PPUSH
57042: CALL_OW 69
57046: AND
57047: IFFALSE 57510
57049: GO 57051
57051: DISABLE
57052: LD_INT 0
57054: PPUSH
57055: PPUSH
57056: PPUSH
57057: PPUSH
// begin enable ;
57058: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57059: LD_ADDR_VAR 0 1
57063: PUSH
57064: LD_INT 34
57066: PUSH
57067: LD_INT 81
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PPUSH
57074: CALL_OW 69
57078: PUSH
57079: FOR_IN
57080: IFFALSE 57152
// begin if not i in minersList then
57082: LD_VAR 0 1
57086: PUSH
57087: LD_EXP 55
57091: IN
57092: NOT
57093: IFFALSE 57150
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57095: LD_ADDR_EXP 55
57099: PUSH
57100: LD_EXP 55
57104: PPUSH
57105: LD_EXP 55
57109: PUSH
57110: LD_INT 1
57112: PLUS
57113: PPUSH
57114: LD_VAR 0 1
57118: PPUSH
57119: CALL_OW 1
57123: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57124: LD_ADDR_EXP 56
57128: PUSH
57129: LD_EXP 56
57133: PPUSH
57134: LD_EXP 56
57138: PUSH
57139: LD_INT 1
57141: PLUS
57142: PPUSH
57143: EMPTY
57144: PPUSH
57145: CALL_OW 1
57149: ST_TO_ADDR
// end end ;
57150: GO 57079
57152: POP
57153: POP
// for i := minerMinesList downto 1 do
57154: LD_ADDR_VAR 0 1
57158: PUSH
57159: DOUBLE
57160: LD_EXP 56
57164: INC
57165: ST_TO_ADDR
57166: LD_INT 1
57168: PUSH
57169: FOR_DOWNTO
57170: IFFALSE 57508
// begin if IsLive ( minersList [ i ] ) then
57172: LD_EXP 55
57176: PUSH
57177: LD_VAR 0 1
57181: ARRAY
57182: PPUSH
57183: CALL_OW 300
57187: IFFALSE 57215
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57189: LD_EXP 55
57193: PUSH
57194: LD_VAR 0 1
57198: ARRAY
57199: PPUSH
57200: LD_EXP 56
57204: PUSH
57205: LD_VAR 0 1
57209: ARRAY
57210: PPUSH
57211: CALL_OW 505
// if not minerMinesList [ i ] then
57215: LD_EXP 56
57219: PUSH
57220: LD_VAR 0 1
57224: ARRAY
57225: NOT
57226: IFFALSE 57230
// continue ;
57228: GO 57169
// for j := minerMinesList [ i ] downto 1 do
57230: LD_ADDR_VAR 0 2
57234: PUSH
57235: DOUBLE
57236: LD_EXP 56
57240: PUSH
57241: LD_VAR 0 1
57245: ARRAY
57246: INC
57247: ST_TO_ADDR
57248: LD_INT 1
57250: PUSH
57251: FOR_DOWNTO
57252: IFFALSE 57504
// begin side := GetSide ( minersList [ i ] ) ;
57254: LD_ADDR_VAR 0 3
57258: PUSH
57259: LD_EXP 55
57263: PUSH
57264: LD_VAR 0 1
57268: ARRAY
57269: PPUSH
57270: CALL_OW 255
57274: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57275: LD_ADDR_VAR 0 4
57279: PUSH
57280: LD_EXP 56
57284: PUSH
57285: LD_VAR 0 1
57289: ARRAY
57290: PUSH
57291: LD_VAR 0 2
57295: ARRAY
57296: PUSH
57297: LD_INT 1
57299: ARRAY
57300: PPUSH
57301: LD_EXP 56
57305: PUSH
57306: LD_VAR 0 1
57310: ARRAY
57311: PUSH
57312: LD_VAR 0 2
57316: ARRAY
57317: PUSH
57318: LD_INT 2
57320: ARRAY
57321: PPUSH
57322: CALL_OW 428
57326: ST_TO_ADDR
// if not tmp then
57327: LD_VAR 0 4
57331: NOT
57332: IFFALSE 57336
// continue ;
57334: GO 57251
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57336: LD_VAR 0 4
57340: PUSH
57341: LD_INT 81
57343: PUSH
57344: LD_VAR 0 3
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PPUSH
57353: CALL_OW 69
57357: IN
57358: IFFALSE 57408
57360: PUSH
57361: LD_EXP 56
57365: PUSH
57366: LD_VAR 0 1
57370: ARRAY
57371: PUSH
57372: LD_VAR 0 2
57376: ARRAY
57377: PUSH
57378: LD_INT 1
57380: ARRAY
57381: PPUSH
57382: LD_EXP 56
57386: PUSH
57387: LD_VAR 0 1
57391: ARRAY
57392: PUSH
57393: LD_VAR 0 2
57397: ARRAY
57398: PUSH
57399: LD_INT 2
57401: ARRAY
57402: PPUSH
57403: CALL_OW 458
57407: AND
57408: IFFALSE 57502
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57410: LD_EXP 56
57414: PUSH
57415: LD_VAR 0 1
57419: ARRAY
57420: PUSH
57421: LD_VAR 0 2
57425: ARRAY
57426: PUSH
57427: LD_INT 1
57429: ARRAY
57430: PPUSH
57431: LD_EXP 56
57435: PUSH
57436: LD_VAR 0 1
57440: ARRAY
57441: PUSH
57442: LD_VAR 0 2
57446: ARRAY
57447: PUSH
57448: LD_INT 2
57450: ARRAY
57451: PPUSH
57452: LD_VAR 0 3
57456: PPUSH
57457: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57461: LD_ADDR_EXP 56
57465: PUSH
57466: LD_EXP 56
57470: PPUSH
57471: LD_VAR 0 1
57475: PPUSH
57476: LD_EXP 56
57480: PUSH
57481: LD_VAR 0 1
57485: ARRAY
57486: PPUSH
57487: LD_VAR 0 2
57491: PPUSH
57492: CALL_OW 3
57496: PPUSH
57497: CALL_OW 1
57501: ST_TO_ADDR
// end ; end ;
57502: GO 57251
57504: POP
57505: POP
// end ;
57506: GO 57169
57508: POP
57509: POP
// end ;
57510: PPOPN 4
57512: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57513: LD_INT 0
57515: PPUSH
57516: PPUSH
// result := false ;
57517: LD_ADDR_VAR 0 4
57521: PUSH
57522: LD_INT 0
57524: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57525: LD_VAR 0 1
57529: PPUSH
57530: CALL_OW 264
57534: PUSH
57535: LD_INT 81
57537: EQUAL
57538: NOT
57539: IFFALSE 57543
// exit ;
57541: GO 57787
// index := GetElementIndex ( minersList , unit ) ;
57543: LD_ADDR_VAR 0 5
57547: PUSH
57548: LD_EXP 55
57552: PPUSH
57553: LD_VAR 0 1
57557: PPUSH
57558: CALL 14881 0 2
57562: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57563: LD_EXP 56
57567: PUSH
57568: LD_VAR 0 5
57572: ARRAY
57573: PUSH
57574: LD_EXP 57
57578: GREATEREQUAL
57579: IFFALSE 57583
// exit ;
57581: GO 57787
// ComMoveXY ( unit , x , y ) ;
57583: LD_VAR 0 1
57587: PPUSH
57588: LD_VAR 0 2
57592: PPUSH
57593: LD_VAR 0 3
57597: PPUSH
57598: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57602: LD_INT 35
57604: PPUSH
57605: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57609: LD_VAR 0 1
57613: PPUSH
57614: LD_VAR 0 2
57618: PPUSH
57619: LD_VAR 0 3
57623: PPUSH
57624: CALL 46927 0 3
57628: NOT
57629: IFFALSE 57642
57631: PUSH
57632: LD_VAR 0 1
57636: PPUSH
57637: CALL_OW 314
57641: AND
57642: IFFALSE 57646
// exit ;
57644: GO 57787
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57646: LD_VAR 0 2
57650: PPUSH
57651: LD_VAR 0 3
57655: PPUSH
57656: CALL_OW 428
57660: PUSH
57661: LD_VAR 0 1
57665: EQUAL
57666: IFFALSE 57680
57668: PUSH
57669: LD_VAR 0 1
57673: PPUSH
57674: CALL_OW 314
57678: NOT
57679: AND
57680: IFFALSE 57602
// PlaySoundXY ( x , y , PlantMine ) ;
57682: LD_VAR 0 2
57686: PPUSH
57687: LD_VAR 0 3
57691: PPUSH
57692: LD_STRING PlantMine
57694: PPUSH
57695: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57699: LD_VAR 0 2
57703: PPUSH
57704: LD_VAR 0 3
57708: PPUSH
57709: LD_VAR 0 1
57713: PPUSH
57714: CALL_OW 255
57718: PPUSH
57719: LD_INT 0
57721: PPUSH
57722: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57726: LD_ADDR_EXP 56
57730: PUSH
57731: LD_EXP 56
57735: PPUSH
57736: LD_VAR 0 5
57740: PUSH
57741: LD_EXP 56
57745: PUSH
57746: LD_VAR 0 5
57750: ARRAY
57751: PUSH
57752: LD_INT 1
57754: PLUS
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PPUSH
57760: LD_VAR 0 2
57764: PUSH
57765: LD_VAR 0 3
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PPUSH
57774: CALL 15098 0 3
57778: ST_TO_ADDR
// result := true ;
57779: LD_ADDR_VAR 0 4
57783: PUSH
57784: LD_INT 1
57786: ST_TO_ADDR
// end ;
57787: LD_VAR 0 4
57791: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57792: LD_INT 0
57794: PPUSH
57795: PPUSH
57796: PPUSH
// if not unit in minersList then
57797: LD_VAR 0 1
57801: PUSH
57802: LD_EXP 55
57806: IN
57807: NOT
57808: IFFALSE 57812
// exit ;
57810: GO 58206
// index := GetElementIndex ( minersList , unit ) ;
57812: LD_ADDR_VAR 0 6
57816: PUSH
57817: LD_EXP 55
57821: PPUSH
57822: LD_VAR 0 1
57826: PPUSH
57827: CALL 14881 0 2
57831: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57832: LD_ADDR_VAR 0 5
57836: PUSH
57837: DOUBLE
57838: LD_EXP 56
57842: PUSH
57843: LD_VAR 0 6
57847: ARRAY
57848: INC
57849: ST_TO_ADDR
57850: LD_INT 1
57852: PUSH
57853: FOR_DOWNTO
57854: IFFALSE 58017
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57856: LD_EXP 56
57860: PUSH
57861: LD_VAR 0 6
57865: ARRAY
57866: PUSH
57867: LD_VAR 0 5
57871: ARRAY
57872: PUSH
57873: LD_INT 1
57875: ARRAY
57876: PUSH
57877: LD_VAR 0 2
57881: EQUAL
57882: IFFALSE 57912
57884: PUSH
57885: LD_EXP 56
57889: PUSH
57890: LD_VAR 0 6
57894: ARRAY
57895: PUSH
57896: LD_VAR 0 5
57900: ARRAY
57901: PUSH
57902: LD_INT 2
57904: ARRAY
57905: PUSH
57906: LD_VAR 0 3
57910: EQUAL
57911: AND
57912: IFFALSE 58015
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57914: LD_EXP 56
57918: PUSH
57919: LD_VAR 0 6
57923: ARRAY
57924: PUSH
57925: LD_VAR 0 5
57929: ARRAY
57930: PUSH
57931: LD_INT 1
57933: ARRAY
57934: PPUSH
57935: LD_EXP 56
57939: PUSH
57940: LD_VAR 0 6
57944: ARRAY
57945: PUSH
57946: LD_VAR 0 5
57950: ARRAY
57951: PUSH
57952: LD_INT 2
57954: ARRAY
57955: PPUSH
57956: LD_VAR 0 1
57960: PPUSH
57961: CALL_OW 255
57965: PPUSH
57966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57970: LD_ADDR_EXP 56
57974: PUSH
57975: LD_EXP 56
57979: PPUSH
57980: LD_VAR 0 6
57984: PPUSH
57985: LD_EXP 56
57989: PUSH
57990: LD_VAR 0 6
57994: ARRAY
57995: PPUSH
57996: LD_VAR 0 5
58000: PPUSH
58001: CALL_OW 3
58005: PPUSH
58006: CALL_OW 1
58010: ST_TO_ADDR
// exit ;
58011: POP
58012: POP
58013: GO 58206
// end ; end ;
58015: GO 57853
58017: POP
58018: POP
// for i := minerMinesList [ index ] downto 1 do
58019: LD_ADDR_VAR 0 5
58023: PUSH
58024: DOUBLE
58025: LD_EXP 56
58029: PUSH
58030: LD_VAR 0 6
58034: ARRAY
58035: INC
58036: ST_TO_ADDR
58037: LD_INT 1
58039: PUSH
58040: FOR_DOWNTO
58041: IFFALSE 58204
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58043: LD_EXP 56
58047: PUSH
58048: LD_VAR 0 6
58052: ARRAY
58053: PUSH
58054: LD_VAR 0 5
58058: ARRAY
58059: PUSH
58060: LD_INT 1
58062: ARRAY
58063: PPUSH
58064: LD_EXP 56
58068: PUSH
58069: LD_VAR 0 6
58073: ARRAY
58074: PUSH
58075: LD_VAR 0 5
58079: ARRAY
58080: PUSH
58081: LD_INT 2
58083: ARRAY
58084: PPUSH
58085: LD_VAR 0 2
58089: PPUSH
58090: LD_VAR 0 3
58094: PPUSH
58095: CALL_OW 298
58099: PUSH
58100: LD_INT 6
58102: LESS
58103: IFFALSE 58202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58105: LD_EXP 56
58109: PUSH
58110: LD_VAR 0 6
58114: ARRAY
58115: PUSH
58116: LD_VAR 0 5
58120: ARRAY
58121: PUSH
58122: LD_INT 1
58124: ARRAY
58125: PPUSH
58126: LD_EXP 56
58130: PUSH
58131: LD_VAR 0 6
58135: ARRAY
58136: PUSH
58137: LD_VAR 0 5
58141: ARRAY
58142: PUSH
58143: LD_INT 2
58145: ARRAY
58146: PPUSH
58147: LD_VAR 0 1
58151: PPUSH
58152: CALL_OW 255
58156: PPUSH
58157: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58161: LD_ADDR_EXP 56
58165: PUSH
58166: LD_EXP 56
58170: PPUSH
58171: LD_VAR 0 6
58175: PPUSH
58176: LD_EXP 56
58180: PUSH
58181: LD_VAR 0 6
58185: ARRAY
58186: PPUSH
58187: LD_VAR 0 5
58191: PPUSH
58192: CALL_OW 3
58196: PPUSH
58197: CALL_OW 1
58201: ST_TO_ADDR
// end ; end ;
58202: GO 58040
58204: POP
58205: POP
// end ;
58206: LD_VAR 0 4
58210: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58211: LD_INT 0
58213: PPUSH
58214: PPUSH
58215: PPUSH
58216: PPUSH
58217: PPUSH
58218: PPUSH
58219: PPUSH
58220: PPUSH
58221: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58222: LD_VAR 0 1
58226: PPUSH
58227: CALL_OW 264
58231: PUSH
58232: LD_INT 81
58234: EQUAL
58235: NOT
58236: IFTRUE 58251
58238: PUSH
58239: LD_VAR 0 1
58243: PUSH
58244: LD_EXP 55
58248: IN
58249: NOT
58250: OR
58251: IFFALSE 58255
// exit ;
58253: GO 58581
// index := GetElementIndex ( minersList , unit ) ;
58255: LD_ADDR_VAR 0 6
58259: PUSH
58260: LD_EXP 55
58264: PPUSH
58265: LD_VAR 0 1
58269: PPUSH
58270: CALL 14881 0 2
58274: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58275: LD_ADDR_VAR 0 8
58279: PUSH
58280: LD_EXP 57
58284: PUSH
58285: LD_EXP 56
58289: PUSH
58290: LD_VAR 0 6
58294: ARRAY
58295: MINUS
58296: ST_TO_ADDR
// if not minesFreeAmount then
58297: LD_VAR 0 8
58301: NOT
58302: IFFALSE 58306
// exit ;
58304: GO 58581
// tmp := [ ] ;
58306: LD_ADDR_VAR 0 7
58310: PUSH
58311: EMPTY
58312: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58313: LD_ADDR_VAR 0 5
58317: PUSH
58318: DOUBLE
58319: LD_INT 1
58321: DEC
58322: ST_TO_ADDR
58323: LD_VAR 0 8
58327: PUSH
58328: FOR_TO
58329: IFFALSE 58528
// begin _d := rand ( 0 , 5 ) ;
58331: LD_ADDR_VAR 0 11
58335: PUSH
58336: LD_INT 0
58338: PPUSH
58339: LD_INT 5
58341: PPUSH
58342: CALL_OW 12
58346: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58347: LD_ADDR_VAR 0 12
58351: PUSH
58352: LD_INT 2
58354: PPUSH
58355: LD_INT 6
58357: PPUSH
58358: CALL_OW 12
58362: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58363: LD_ADDR_VAR 0 9
58367: PUSH
58368: LD_VAR 0 2
58372: PPUSH
58373: LD_VAR 0 11
58377: PPUSH
58378: LD_VAR 0 12
58382: PPUSH
58383: CALL_OW 272
58387: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58388: LD_ADDR_VAR 0 10
58392: PUSH
58393: LD_VAR 0 3
58397: PPUSH
58398: LD_VAR 0 11
58402: PPUSH
58403: LD_VAR 0 12
58407: PPUSH
58408: CALL_OW 273
58412: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58413: LD_VAR 0 9
58417: PPUSH
58418: LD_VAR 0 10
58422: PPUSH
58423: CALL_OW 488
58427: IFFALSE 58451
58429: PUSH
58430: LD_VAR 0 9
58434: PUSH
58435: LD_VAR 0 10
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_VAR 0 7
58448: IN
58449: NOT
58450: AND
58451: IFFALSE 58470
58453: PUSH
58454: LD_VAR 0 9
58458: PPUSH
58459: LD_VAR 0 10
58463: PPUSH
58464: CALL_OW 458
58468: NOT
58469: AND
58470: IFFALSE 58512
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58472: LD_ADDR_VAR 0 7
58476: PUSH
58477: LD_VAR 0 7
58481: PPUSH
58482: LD_VAR 0 7
58486: PUSH
58487: LD_INT 1
58489: PLUS
58490: PPUSH
58491: LD_VAR 0 9
58495: PUSH
58496: LD_VAR 0 10
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PPUSH
58505: CALL_OW 1
58509: ST_TO_ADDR
58510: GO 58526
// i := i - 1 ;
58512: LD_ADDR_VAR 0 5
58516: PUSH
58517: LD_VAR 0 5
58521: PUSH
58522: LD_INT 1
58524: MINUS
58525: ST_TO_ADDR
// end ;
58526: GO 58328
58528: POP
58529: POP
// for i in tmp do
58530: LD_ADDR_VAR 0 5
58534: PUSH
58535: LD_VAR 0 7
58539: PUSH
58540: FOR_IN
58541: IFFALSE 58579
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58543: LD_VAR 0 1
58547: PPUSH
58548: LD_VAR 0 5
58552: PUSH
58553: LD_INT 1
58555: ARRAY
58556: PPUSH
58557: LD_VAR 0 5
58561: PUSH
58562: LD_INT 2
58564: ARRAY
58565: PPUSH
58566: CALL 57513 0 3
58570: NOT
58571: IFFALSE 58577
// exit ;
58573: POP
58574: POP
58575: GO 58581
58577: GO 58540
58579: POP
58580: POP
// end ;
58581: LD_VAR 0 4
58585: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58586: LD_INT 0
58588: PPUSH
58589: PPUSH
58590: PPUSH
58591: PPUSH
58592: PPUSH
58593: PPUSH
58594: PPUSH
58595: PPUSH
58596: PPUSH
// if GetClass ( unit ) <> class_sniper then
58597: LD_VAR 0 1
58601: PPUSH
58602: CALL_OW 257
58606: PUSH
58607: LD_INT 5
58609: NONEQUAL
58610: IFFALSE 58614
// exit ;
58612: GO 59084
// dist := 8 ;
58614: LD_ADDR_VAR 0 5
58618: PUSH
58619: LD_INT 8
58621: ST_TO_ADDR
// viewRange := 12 ;
58622: LD_ADDR_VAR 0 8
58626: PUSH
58627: LD_INT 12
58629: ST_TO_ADDR
// side := GetSide ( unit ) ;
58630: LD_ADDR_VAR 0 6
58634: PUSH
58635: LD_VAR 0 1
58639: PPUSH
58640: CALL_OW 255
58644: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58645: LD_INT 61
58647: PPUSH
58648: LD_VAR 0 6
58652: PPUSH
58653: CALL_OW 321
58657: PUSH
58658: LD_INT 2
58660: EQUAL
58661: IFFALSE 58671
// viewRange := 16 ;
58663: LD_ADDR_VAR 0 8
58667: PUSH
58668: LD_INT 16
58670: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58671: LD_VAR 0 1
58675: PPUSH
58676: LD_VAR 0 2
58680: PPUSH
58681: LD_VAR 0 3
58685: PPUSH
58686: CALL_OW 297
58690: PUSH
58691: LD_VAR 0 5
58695: GREATER
58696: IFFALSE 58775
// begin ComMoveXY ( unit , x , y ) ;
58698: LD_VAR 0 1
58702: PPUSH
58703: LD_VAR 0 2
58707: PPUSH
58708: LD_VAR 0 3
58712: PPUSH
58713: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58717: LD_INT 35
58719: PPUSH
58720: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58724: LD_VAR 0 1
58728: PPUSH
58729: LD_VAR 0 2
58733: PPUSH
58734: LD_VAR 0 3
58738: PPUSH
58739: CALL 46927 0 3
58743: NOT
58744: IFFALSE 58748
// exit ;
58746: GO 59084
// until GetDistUnitXY ( unit , x , y ) < dist ;
58748: LD_VAR 0 1
58752: PPUSH
58753: LD_VAR 0 2
58757: PPUSH
58758: LD_VAR 0 3
58762: PPUSH
58763: CALL_OW 297
58767: PUSH
58768: LD_VAR 0 5
58772: LESS
58773: IFFALSE 58717
// end ; ComTurnXY ( unit , x , y ) ;
58775: LD_VAR 0 1
58779: PPUSH
58780: LD_VAR 0 2
58784: PPUSH
58785: LD_VAR 0 3
58789: PPUSH
58790: CALL_OW 118
// repeat if Multiplayer then
58794: LD_OWVAR 4
58798: IFFALSE 58809
// wait ( 35 ) else
58800: LD_INT 35
58802: PPUSH
58803: CALL_OW 67
58807: GO 58816
// wait ( 5 ) ;
58809: LD_INT 5
58811: PPUSH
58812: CALL_OW 67
// _d := GetDir ( unit ) ;
58816: LD_ADDR_VAR 0 11
58820: PUSH
58821: LD_VAR 0 1
58825: PPUSH
58826: CALL_OW 254
58830: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58831: LD_ADDR_VAR 0 7
58835: PUSH
58836: LD_VAR 0 1
58840: PPUSH
58841: CALL_OW 250
58845: PPUSH
58846: LD_VAR 0 1
58850: PPUSH
58851: CALL_OW 251
58855: PPUSH
58856: LD_VAR 0 2
58860: PPUSH
58861: LD_VAR 0 3
58865: PPUSH
58866: CALL 49563 0 4
58870: ST_TO_ADDR
// until dir = _d ;
58871: LD_VAR 0 7
58875: PUSH
58876: LD_VAR 0 11
58880: EQUAL
58881: IFFALSE 58794
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58883: LD_ADDR_VAR 0 9
58887: PUSH
58888: LD_VAR 0 1
58892: PPUSH
58893: CALL_OW 250
58897: PPUSH
58898: LD_VAR 0 7
58902: PPUSH
58903: LD_VAR 0 5
58907: PPUSH
58908: CALL_OW 272
58912: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58913: LD_ADDR_VAR 0 10
58917: PUSH
58918: LD_VAR 0 1
58922: PPUSH
58923: CALL_OW 251
58927: PPUSH
58928: LD_VAR 0 7
58932: PPUSH
58933: LD_VAR 0 5
58937: PPUSH
58938: CALL_OW 273
58942: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58943: LD_VAR 0 9
58947: PPUSH
58948: LD_VAR 0 10
58952: PPUSH
58953: CALL_OW 488
58957: NOT
58958: IFFALSE 58962
// exit ;
58960: GO 59084
// ComAnimCustom ( unit , 1 ) ;
58962: LD_VAR 0 1
58966: PPUSH
58967: LD_INT 1
58969: PPUSH
58970: CALL_OW 592
// p := 0 ;
58974: LD_ADDR_VAR 0 12
58978: PUSH
58979: LD_INT 0
58981: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58982: LD_VAR 0 9
58986: PPUSH
58987: LD_VAR 0 10
58991: PPUSH
58992: LD_VAR 0 6
58996: PPUSH
58997: LD_VAR 0 8
59001: PPUSH
59002: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59006: LD_INT 35
59008: PPUSH
59009: CALL_OW 67
// p := Inc ( p ) ;
59013: LD_ADDR_VAR 0 12
59017: PUSH
59018: LD_VAR 0 12
59022: PPUSH
59023: CALL 49519 0 1
59027: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59028: LD_VAR 0 12
59032: PUSH
59033: LD_INT 3
59035: EQUAL
59036: IFTRUE 59050
59038: PUSH
59039: LD_VAR 0 1
59043: PPUSH
59044: CALL_OW 302
59048: NOT
59049: OR
59050: IFTRUE 59063
59052: PUSH
59053: LD_VAR 0 1
59057: PPUSH
59058: CALL_OW 301
59062: OR
59063: IFFALSE 59006
// RemoveSeeing ( _x , _y , side ) ;
59065: LD_VAR 0 9
59069: PPUSH
59070: LD_VAR 0 10
59074: PPUSH
59075: LD_VAR 0 6
59079: PPUSH
59080: CALL_OW 331
// end ; end_of_file
59084: LD_VAR 0 4
59088: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59089: LD_EXP 39
59093: IFFALSE 59434
59095: GO 59097
59097: DISABLE
59098: LD_INT 0
59100: PPUSH
59101: PPUSH
59102: PPUSH
// begin mpKingPoints := [ ] ;
59103: LD_ADDR_EXP 58
59107: PUSH
59108: EMPTY
59109: ST_TO_ADDR
// if mpTeamGame then
59110: LD_EXP 11
59114: IFFALSE 59168
// begin for i := 1 to Count ( mpTeams ) do
59116: LD_ADDR_VAR 0 1
59120: PUSH
59121: DOUBLE
59122: LD_INT 1
59124: DEC
59125: ST_TO_ADDR
59126: LD_EXP 10
59130: PPUSH
59131: CALL 12214 0 1
59135: PUSH
59136: FOR_TO
59137: IFFALSE 59164
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59139: LD_ADDR_EXP 58
59143: PUSH
59144: LD_EXP 58
59148: PPUSH
59149: LD_VAR 0 1
59153: PPUSH
59154: LD_INT 0
59156: PPUSH
59157: CALL_OW 1
59161: ST_TO_ADDR
59162: GO 59136
59164: POP
59165: POP
// end else
59166: GO 59211
// begin for i := 1 to 8 do
59168: LD_ADDR_VAR 0 1
59172: PUSH
59173: DOUBLE
59174: LD_INT 1
59176: DEC
59177: ST_TO_ADDR
59178: LD_INT 8
59180: PUSH
59181: FOR_TO
59182: IFFALSE 59209
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59184: LD_ADDR_EXP 58
59188: PUSH
59189: LD_EXP 58
59193: PPUSH
59194: LD_VAR 0 1
59198: PPUSH
59199: LD_INT 0
59201: PPUSH
59202: CALL_OW 1
59206: ST_TO_ADDR
59207: GO 59181
59209: POP
59210: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59211: LD_ADDR_VAR 0 3
59215: PUSH
59216: LD_EXP 2
59220: PPUSH
59221: LD_INT 0
59223: PPUSH
59224: CALL_OW 517
59228: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59229: LD_ADDR_VAR 0 1
59233: PUSH
59234: DOUBLE
59235: LD_INT 1
59237: DEC
59238: ST_TO_ADDR
59239: LD_VAR 0 3
59243: PUSH
59244: LD_INT 1
59246: ARRAY
59247: PUSH
59248: FOR_TO
59249: IFFALSE 59316
// for j := 1 to 8 do
59251: LD_ADDR_VAR 0 2
59255: PUSH
59256: DOUBLE
59257: LD_INT 1
59259: DEC
59260: ST_TO_ADDR
59261: LD_INT 8
59263: PUSH
59264: FOR_TO
59265: IFFALSE 59312
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59267: LD_VAR 0 3
59271: PUSH
59272: LD_INT 1
59274: ARRAY
59275: PUSH
59276: LD_VAR 0 1
59280: ARRAY
59281: PPUSH
59282: LD_VAR 0 3
59286: PUSH
59287: LD_INT 2
59289: ARRAY
59290: PUSH
59291: LD_VAR 0 1
59295: ARRAY
59296: PPUSH
59297: LD_VAR 0 2
59301: PPUSH
59302: LD_INT 12
59304: NEG
59305: PPUSH
59306: CALL_OW 330
59310: GO 59264
59312: POP
59313: POP
59314: GO 59248
59316: POP
59317: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59318: LD_EXP 34
59322: PPUSH
59323: LD_INT 1
59325: PPUSH
59326: CALL_OW 424
// UpdateCounter ;
59330: CALL 59940 0 0
// repeat wait ( 0 0$1 ) ;
59334: LD_INT 35
59336: PPUSH
59337: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59341: LD_ADDR_VAR 0 3
59345: PUSH
59346: LD_EXP 34
59350: PPUSH
59351: LD_INT 3
59353: PUSH
59354: LD_INT 57
59356: PUSH
59357: EMPTY
59358: LIST
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 50
59366: PUSH
59367: EMPTY
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: LD_INT 30
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 30
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: PPUSH
59403: CALL_OW 70
59407: ST_TO_ADDR
// if not tmp then
59408: LD_VAR 0 3
59412: NOT
59413: IFFALSE 59417
// continue ;
59415: GO 59334
// AddPoints ( tmp ) ;
59417: LD_VAR 0 3
59421: PPUSH
59422: CALL 59618 0 1
// UpdateCounter ;
59426: CALL 59940 0 0
// until false ;
59430: LD_INT 0
59432: IFFALSE 59334
// end ;
59434: PPOPN 3
59436: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59437: LD_EXP 39
59441: IFFALSE 59449
59443: PUSH
59444: LD_EXP 37
59448: AND
59449: IFFALSE 59615
59451: GO 59453
59453: DISABLE
59454: LD_INT 0
59456: PPUSH
59457: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59458: LD_ADDR_VAR 0 2
59462: PUSH
59463: LD_EXP 2
59467: PPUSH
59468: LD_INT 0
59470: PPUSH
59471: CALL_OW 517
59475: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59476: LD_ADDR_VAR 0 1
59480: PUSH
59481: DOUBLE
59482: LD_INT 1
59484: DEC
59485: ST_TO_ADDR
59486: LD_VAR 0 2
59490: PUSH
59491: LD_INT 1
59493: ARRAY
59494: PUSH
59495: FOR_TO
59496: IFFALSE 59537
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59498: LD_VAR 0 2
59502: PUSH
59503: LD_INT 1
59505: ARRAY
59506: PUSH
59507: LD_VAR 0 1
59511: ARRAY
59512: PPUSH
59513: LD_VAR 0 2
59517: PUSH
59518: LD_INT 2
59520: ARRAY
59521: PUSH
59522: LD_VAR 0 1
59526: ARRAY
59527: PPUSH
59528: LD_INT 125
59530: PPUSH
59531: CALL_OW 495
59535: GO 59495
59537: POP
59538: POP
// repeat wait ( mpEmissions ) ;
59539: LD_EXP 37
59543: PPUSH
59544: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59548: LD_ADDR_VAR 0 1
59552: PUSH
59553: DOUBLE
59554: LD_INT 1
59556: DEC
59557: ST_TO_ADDR
59558: LD_VAR 0 2
59562: PUSH
59563: LD_INT 1
59565: ARRAY
59566: PUSH
59567: FOR_TO
59568: IFFALSE 59609
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59570: LD_VAR 0 2
59574: PUSH
59575: LD_INT 1
59577: ARRAY
59578: PUSH
59579: LD_VAR 0 1
59583: ARRAY
59584: PPUSH
59585: LD_VAR 0 2
59589: PUSH
59590: LD_INT 2
59592: ARRAY
59593: PUSH
59594: LD_VAR 0 1
59598: ARRAY
59599: PPUSH
59600: LD_INT 15
59602: PPUSH
59603: CALL_OW 495
59607: GO 59567
59609: POP
59610: POP
// until false ;
59611: LD_INT 0
59613: IFFALSE 59539
// end ;
59615: PPOPN 2
59617: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59618: LD_INT 0
59620: PPUSH
59621: PPUSH
59622: PPUSH
59623: PPUSH
59624: PPUSH
// if mpTeamGame then
59625: LD_EXP 11
59629: IFFALSE 59826
// begin first := depots [ 1 ] ;
59631: LD_ADDR_VAR 0 4
59635: PUSH
59636: LD_VAR 0 1
59640: PUSH
59641: LD_INT 1
59643: ARRAY
59644: ST_TO_ADDR
// side := GetSide ( first ) ;
59645: LD_ADDR_VAR 0 6
59649: PUSH
59650: LD_VAR 0 4
59654: PPUSH
59655: CALL_OW 255
59659: ST_TO_ADDR
// for i := 1 to mpTeams do
59660: LD_ADDR_VAR 0 3
59664: PUSH
59665: DOUBLE
59666: LD_INT 1
59668: DEC
59669: ST_TO_ADDR
59670: LD_EXP 10
59674: PUSH
59675: FOR_TO
59676: IFFALSE 59710
// if side in mpTeams [ i ] then
59678: LD_VAR 0 6
59682: PUSH
59683: LD_EXP 10
59687: PUSH
59688: LD_VAR 0 3
59692: ARRAY
59693: IN
59694: IFFALSE 59708
// begin team := i ;
59696: LD_ADDR_VAR 0 5
59700: PUSH
59701: LD_VAR 0 3
59705: ST_TO_ADDR
// break ;
59706: GO 59710
// end ;
59708: GO 59675
59710: POP
59711: POP
// if not team then
59712: LD_VAR 0 5
59716: NOT
59717: IFFALSE 59721
// exit ;
59719: GO 59935
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59721: LD_EXP 34
59725: PPUSH
59726: LD_INT 81
59728: PUSH
59729: LD_VAR 0 6
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PPUSH
59738: CALL_OW 70
59742: IFFALSE 59746
// exit ;
59744: GO 59935
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59746: LD_ADDR_EXP 58
59750: PUSH
59751: LD_EXP 58
59755: PPUSH
59756: LD_VAR 0 5
59760: PPUSH
59761: LD_EXP 58
59765: PUSH
59766: LD_VAR 0 5
59770: ARRAY
59771: PUSH
59772: LD_INT 1
59774: PLUS
59775: PPUSH
59776: CALL_OW 1
59780: ST_TO_ADDR
// for i in mpTeams [ team ] do
59781: LD_ADDR_VAR 0 3
59785: PUSH
59786: LD_EXP 10
59790: PUSH
59791: LD_VAR 0 5
59795: ARRAY
59796: PUSH
59797: FOR_IN
59798: IFFALSE 59822
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59800: LD_VAR 0 3
59804: PPUSH
59805: LD_EXP 58
59809: PUSH
59810: LD_VAR 0 5
59814: ARRAY
59815: PPUSH
59816: CALL_OW 506
59820: GO 59797
59822: POP
59823: POP
// end else
59824: GO 59935
// begin first := depots [ 1 ] ;
59826: LD_ADDR_VAR 0 4
59830: PUSH
59831: LD_VAR 0 1
59835: PUSH
59836: LD_INT 1
59838: ARRAY
59839: ST_TO_ADDR
// side := GetSide ( first ) ;
59840: LD_ADDR_VAR 0 6
59844: PUSH
59845: LD_VAR 0 4
59849: PPUSH
59850: CALL_OW 255
59854: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59855: LD_EXP 34
59859: PPUSH
59860: LD_INT 81
59862: PUSH
59863: LD_VAR 0 6
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PPUSH
59872: CALL_OW 70
59876: IFFALSE 59880
// exit ;
59878: GO 59935
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59880: LD_ADDR_EXP 58
59884: PUSH
59885: LD_EXP 58
59889: PPUSH
59890: LD_VAR 0 6
59894: PPUSH
59895: LD_EXP 58
59899: PUSH
59900: LD_VAR 0 6
59904: ARRAY
59905: PUSH
59906: LD_INT 1
59908: PLUS
59909: PPUSH
59910: CALL_OW 1
59914: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59915: LD_VAR 0 6
59919: PPUSH
59920: LD_EXP 58
59924: PUSH
59925: LD_VAR 0 6
59929: ARRAY
59930: PPUSH
59931: CALL_OW 506
// end ; end ;
59935: LD_VAR 0 2
59939: RET
// function UpdateCounter ; var i ; begin
59940: LD_INT 0
59942: PPUSH
59943: PPUSH
// result := [ ] ;
59944: LD_ADDR_VAR 0 1
59948: PUSH
59949: EMPTY
59950: ST_TO_ADDR
// if mpTeamGame then
59951: LD_EXP 11
59955: IFFALSE 60022
// begin for i := 1 to mpTeams do
59957: LD_ADDR_VAR 0 2
59961: PUSH
59962: DOUBLE
59963: LD_INT 1
59965: DEC
59966: ST_TO_ADDR
59967: LD_EXP 10
59971: PUSH
59972: FOR_TO
59973: IFFALSE 60018
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59975: LD_ADDR_VAR 0 1
59979: PUSH
59980: LD_VAR 0 1
59984: PUSH
59985: LD_STRING #KingoftheHill-Team
59987: PUSH
59988: LD_VAR 0 2
59992: PUSH
59993: LD_EXP 58
59997: PUSH
59998: LD_VAR 0 2
60002: ARRAY
60003: PUSH
60004: LD_EXP 35
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: ADD
60015: ST_TO_ADDR
60016: GO 59972
60018: POP
60019: POP
// end else
60020: GO 60095
// begin for i := 1 to 8 do
60022: LD_ADDR_VAR 0 2
60026: PUSH
60027: DOUBLE
60028: LD_INT 1
60030: DEC
60031: ST_TO_ADDR
60032: LD_INT 8
60034: PUSH
60035: FOR_TO
60036: IFFALSE 60093
// if mpSidePositions [ i ] then
60038: LD_EXP 7
60042: PUSH
60043: LD_VAR 0 2
60047: ARRAY
60048: IFFALSE 60091
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60050: LD_ADDR_VAR 0 1
60054: PUSH
60055: LD_VAR 0 1
60059: PUSH
60060: LD_STRING #KingoftheHill-Player
60062: PUSH
60063: LD_VAR 0 2
60067: PUSH
60068: LD_EXP 58
60072: PUSH
60073: LD_VAR 0 2
60077: ARRAY
60078: PUSH
60079: LD_EXP 35
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: ADD
60090: ST_TO_ADDR
60091: GO 60035
60093: POP
60094: POP
// end ; mpDisplayStrings := result ;
60095: LD_ADDR_EXP 38
60099: PUSH
60100: LD_VAR 0 1
60104: ST_TO_ADDR
// end ;
60105: LD_VAR 0 1
60109: RET
// export function HowMuchPointsKing ( side ) ; begin
60110: LD_INT 0
60112: PPUSH
// result := HowMuchPoints ( side ) ;
60113: LD_ADDR_VAR 0 2
60117: PUSH
60118: LD_VAR 0 1
60122: PPUSH
60123: CALL 60133 0 1
60127: ST_TO_ADDR
// end ;
60128: LD_VAR 0 2
60132: RET
// function HowMuchPoints ( side ) ; var i ; begin
60133: LD_INT 0
60135: PPUSH
60136: PPUSH
// if mpTeamGame then
60137: LD_EXP 11
60141: IFFALSE 60210
// begin for i := 1 to Count ( mpTeams ) do
60143: LD_ADDR_VAR 0 3
60147: PUSH
60148: DOUBLE
60149: LD_INT 1
60151: DEC
60152: ST_TO_ADDR
60153: LD_EXP 10
60157: PPUSH
60158: CALL 12214 0 1
60162: PUSH
60163: FOR_TO
60164: IFFALSE 60206
// begin if side in mpTeams [ i ] then
60166: LD_VAR 0 1
60170: PUSH
60171: LD_EXP 10
60175: PUSH
60176: LD_VAR 0 3
60180: ARRAY
60181: IN
60182: IFFALSE 60204
// begin result := mpKingPoints [ i ] ;
60184: LD_ADDR_VAR 0 2
60188: PUSH
60189: LD_EXP 58
60193: PUSH
60194: LD_VAR 0 3
60198: ARRAY
60199: ST_TO_ADDR
// exit ;
60200: POP
60201: POP
60202: GO 60226
// end ; end ;
60204: GO 60163
60206: POP
60207: POP
// end else
60208: GO 60226
// result := mpKingPoints [ side ] ;
60210: LD_ADDR_VAR 0 2
60214: PUSH
60215: LD_EXP 58
60219: PUSH
60220: LD_VAR 0 1
60224: ARRAY
60225: ST_TO_ADDR
// end ;
60226: LD_VAR 0 2
60230: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60231: LD_EXP 39
60235: IFFALSE 60243
60237: PUSH
60238: CALL 60578 0 0
60242: AND
60243: IFFALSE 60251
60245: PUSH
60246: LD_OWVAR 4
60250: AND
60251: IFFALSE 60501
60253: GO 60255
60255: DISABLE
60256: LD_INT 0
60258: PPUSH
60259: PPUSH
// begin canWin := false ;
60260: LD_ADDR_VAR 0 2
60264: PUSH
60265: LD_INT 0
60267: ST_TO_ADDR
// if not HasPower ( your_side ) then
60268: LD_OWVAR 2
60272: PPUSH
60273: CALL 60620 0 1
60277: NOT
60278: IFFALSE 60289
// begin Multiplayer_Loose_Message ;
60280: CALL_OW 521
// enable ( mpLose ) ;
60284: LD_INT 102
60286: ENABLE_MARKED
// end else
60287: GO 60501
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
60289: LD_ADDR_VAR 0 2
60293: PUSH
60294: LD_OWVAR 2
60298: PPUSH
60299: CALL 60133 0 1
60303: PUSH
60304: LD_EXP 35
60308: GREATEREQUAL
60309: IFFALSE 60322
60311: PUSH
60312: LD_OWVAR 2
60316: PPUSH
60317: CALL 60620 0 1
60321: AND
60322: IFTRUE 60331
60324: PUSH
60325: CALL 60504 0 0
60329: NOT
60330: OR
60331: ST_TO_ADDR
// for i := 1 to 8 do
60332: LD_ADDR_VAR 0 1
60336: PUSH
60337: DOUBLE
60338: LD_INT 1
60340: DEC
60341: ST_TO_ADDR
60342: LD_INT 8
60344: PUSH
60345: FOR_TO
60346: IFFALSE 60487
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60348: LD_EXP 7
60352: PUSH
60353: LD_VAR 0 1
60357: ARRAY
60358: IFFALSE 60371
60360: PUSH
60361: LD_VAR 0 1
60365: PPUSH
60366: CALL_OW 108
60370: AND
60371: IFFALSE 60385
60373: PUSH
60374: LD_VAR 0 1
60378: PUSH
60379: LD_OWVAR 2
60383: NONEQUAL
60384: AND
60385: IFFALSE 60485
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60387: LD_EXP 8
60391: PUSH
60392: LD_VAR 0 1
60396: ARRAY
60397: NOT
60398: IFTRUE 60446
60400: PUSH
60401: LD_EXP 8
60405: PUSH
60406: LD_VAR 0 1
60410: ARRAY
60411: PUSH
60412: LD_EXP 8
60416: PUSH
60417: LD_OWVAR 2
60421: ARRAY
60422: NONEQUAL
60423: IFFALSE 60445
60425: PUSH
60426: LD_OWVAR 2
60430: PPUSH
60431: LD_VAR 0 1
60435: PPUSH
60436: CALL_OW 81
60440: PUSH
60441: LD_INT 1
60443: NONEQUAL
60444: AND
60445: OR
60446: IFFALSE 60485
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60448: LD_VAR 0 1
60452: PPUSH
60453: CALL 60133 0 1
60457: PUSH
60458: LD_EXP 35
60462: GREATEREQUAL
60463: IFFALSE 60476
60465: PUSH
60466: LD_VAR 0 1
60470: PPUSH
60471: CALL 60620 0 1
60475: AND
60476: IFFALSE 60485
// begin enable ( mpLose ) ;
60478: LD_INT 102
60480: ENABLE_MARKED
// exit ;
60481: POP
60482: POP
60483: GO 60501
// end ;
60485: GO 60345
60487: POP
60488: POP
// if canWin then
60489: LD_VAR 0 2
60493: IFFALSE 60500
// enable ( mpWin ) else
60495: LD_INT 101
60497: ENABLE_MARKED
60498: GO 60501
// enable ;
60500: ENABLE
// end ; end ;
60501: PPOPN 2
60503: END
// function EnemiesInGame ; var i ; begin
60504: LD_INT 0
60506: PPUSH
60507: PPUSH
// result := false ;
60508: LD_ADDR_VAR 0 1
60512: PUSH
60513: LD_INT 0
60515: ST_TO_ADDR
// for i := 1 to 8 do
60516: LD_ADDR_VAR 0 2
60520: PUSH
60521: DOUBLE
60522: LD_INT 1
60524: DEC
60525: ST_TO_ADDR
60526: LD_INT 8
60528: PUSH
60529: FOR_TO
60530: IFFALSE 60571
// if i <> your_side and HasPower ( i ) then
60532: LD_VAR 0 2
60536: PUSH
60537: LD_OWVAR 2
60541: NONEQUAL
60542: IFFALSE 60555
60544: PUSH
60545: LD_VAR 0 2
60549: PPUSH
60550: CALL 60620 0 1
60554: AND
60555: IFFALSE 60569
// begin result := true ;
60557: LD_ADDR_VAR 0 1
60561: PUSH
60562: LD_INT 1
60564: ST_TO_ADDR
// exit ;
60565: POP
60566: POP
60567: GO 60573
// end ;
60569: GO 60529
60571: POP
60572: POP
// end ;
60573: LD_VAR 0 1
60577: RET
// function CanWinLoose ; begin
60578: LD_INT 0
60580: PPUSH
// result := true ;
60581: LD_ADDR_VAR 0 1
60585: PUSH
60586: LD_INT 1
60588: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60589: CALL_OW 531
60593: IFFALSE 60605
60595: PUSH
60596: CALL_OW 519
60600: PUSH
60601: LD_INT 1
60603: GREATER
60604: AND
60605: IFFALSE 60615
// result := false ;
60607: LD_ADDR_VAR 0 1
60611: PUSH
60612: LD_INT 0
60614: ST_TO_ADDR
// end ;
60615: LD_VAR 0 1
60619: RET
// function HasPower ( i ) ; begin
60620: LD_INT 0
60622: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60623: LD_ADDR_VAR 0 2
60627: PUSH
60628: LD_INT 22
60630: PUSH
60631: LD_VAR 0 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: LD_INT 21
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 33
60655: PUSH
60656: LD_INT 3
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 33
60665: PUSH
60666: LD_INT 5
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PPUSH
60683: CALL_OW 69
60687: ST_TO_ADDR
// end ; end_of_file
60688: LD_VAR 0 2
60692: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60693: PPOPN 6
60695: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60696: LD_EXP 3
60700: PUSH
60701: LD_INT 4
60703: EQUAL
60704: IFFALSE 60740
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60706: LD_STRING setGameDifficulty(
60708: PUSH
60709: LD_OWVAR 67
60713: STR
60714: PUSH
60715: LD_STRING )
60717: STR
60718: PPUSH
60719: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60723: LD_STRING displayDifficulty(
60725: PUSH
60726: LD_OWVAR 67
60730: STR
60731: PUSH
60732: LD_STRING )
60734: STR
60735: PPUSH
60736: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60740: CALL 60769 0 0
// end ; end_of_file
60744: PPOPN 1
60746: END
// every 0 0$1 do
60747: GO 60749
60749: DISABLE
// begin enable ;
60750: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60751: LD_STRING updateTimer(
60753: PUSH
60754: LD_OWVAR 1
60758: STR
60759: PUSH
60760: LD_STRING );
60762: STR
60763: PPUSH
60764: CALL_OW 559
// end ;
60768: END
// export function SOS_MapStart ( ) ; begin
60769: LD_INT 0
60771: PPUSH
// UpdateFactoryWaypoints ( ) ;
60772: CALL 61703 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60776: CALL 61955 0 0
// ParseMultiDataToLua ( ) ;
60780: CALL 62102 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60784: LD_STRING setSpecLogoNumber(
60786: PUSH
60787: LD_INT 2
60789: STR
60790: PUSH
60791: LD_STRING ,
60793: STR
60794: PUSH
60795: LD_INT 1
60797: STR
60798: PUSH
60799: LD_STRING )
60801: STR
60802: PPUSH
60803: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60807: LD_STRING setSpecLogoNumber(
60809: PUSH
60810: LD_INT 3
60812: STR
60813: PUSH
60814: LD_STRING ,
60816: STR
60817: PUSH
60818: LD_INT 2
60820: STR
60821: PUSH
60822: LD_STRING )
60824: STR
60825: PPUSH
60826: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60830: LD_STRING setSpecLogoNumber(
60832: PUSH
60833: LD_INT 4
60835: STR
60836: PUSH
60837: LD_STRING ,
60839: STR
60840: PUSH
60841: LD_INT 3
60843: STR
60844: PUSH
60845: LD_STRING )
60847: STR
60848: PPUSH
60849: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60853: LD_STRING setSpecLogoNumber(
60855: PUSH
60856: LD_INT 5
60858: STR
60859: PUSH
60860: LD_STRING ,
60862: STR
60863: PUSH
60864: LD_INT 4
60866: STR
60867: PUSH
60868: LD_STRING )
60870: STR
60871: PPUSH
60872: CALL_OW 559
// end ;
60876: LD_VAR 0 1
60880: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60881: LD_INT 0
60883: PPUSH
60884: PPUSH
60885: PPUSH
60886: PPUSH
60887: PPUSH
60888: PPUSH
60889: PPUSH
60890: PPUSH
60891: PPUSH
// for i := 1 to 8 do
60892: LD_ADDR_VAR 0 2
60896: PUSH
60897: DOUBLE
60898: LD_INT 1
60900: DEC
60901: ST_TO_ADDR
60902: LD_INT 8
60904: PUSH
60905: FOR_TO
60906: IFFALSE 61291
// begin if mpSidePositions [ i ] then
60908: LD_EXP 7
60912: PUSH
60913: LD_VAR 0 2
60917: ARRAY
60918: IFFALSE 61289
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60920: LD_ADDR_VAR 0 7
60924: PUSH
60925: LD_INT 22
60927: PUSH
60928: LD_VAR 0 2
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 21
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PPUSH
60951: CALL_OW 69
60955: PPUSH
60956: CALL 12214 0 1
60960: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60961: LD_ADDR_VAR 0 9
60965: PUSH
60966: LD_INT 22
60968: PUSH
60969: LD_VAR 0 2
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: LD_INT 30
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 30
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: LIST
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PPUSH
61010: CALL_OW 69
61014: ST_TO_ADDR
// crates := 0 ;
61015: LD_ADDR_VAR 0 4
61019: PUSH
61020: LD_INT 0
61022: ST_TO_ADDR
// oil := 0 ;
61023: LD_ADDR_VAR 0 5
61027: PUSH
61028: LD_INT 0
61030: ST_TO_ADDR
// sib := 0 ;
61031: LD_ADDR_VAR 0 6
61035: PUSH
61036: LD_INT 0
61038: ST_TO_ADDR
// if bases then
61039: LD_VAR 0 9
61043: IFFALSE 61149
// begin for j in bases do
61045: LD_ADDR_VAR 0 3
61049: PUSH
61050: LD_VAR 0 9
61054: PUSH
61055: FOR_IN
61056: IFFALSE 61147
// begin base := GetBase ( j ) ;
61058: LD_ADDR_VAR 0 8
61062: PUSH
61063: LD_VAR 0 3
61067: PPUSH
61068: CALL_OW 274
61072: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61073: LD_ADDR_VAR 0 4
61077: PUSH
61078: LD_VAR 0 4
61082: PUSH
61083: LD_VAR 0 8
61087: PPUSH
61088: LD_INT 1
61090: PPUSH
61091: CALL_OW 275
61095: PLUS
61096: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61097: LD_ADDR_VAR 0 5
61101: PUSH
61102: LD_VAR 0 5
61106: PUSH
61107: LD_VAR 0 8
61111: PPUSH
61112: LD_INT 2
61114: PPUSH
61115: CALL_OW 275
61119: PLUS
61120: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61121: LD_ADDR_VAR 0 6
61125: PUSH
61126: LD_VAR 0 6
61130: PUSH
61131: LD_VAR 0 8
61135: PPUSH
61136: LD_INT 3
61138: PPUSH
61139: CALL_OW 275
61143: PLUS
61144: ST_TO_ADDR
// end ;
61145: GO 61055
61147: POP
61148: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61149: LD_STRING setSpecText(
61151: PUSH
61152: LD_VAR 0 2
61156: STR
61157: PUSH
61158: LD_STRING ,
61160: STR
61161: PUSH
61162: LD_INT 2
61164: STR
61165: PUSH
61166: LD_STRING ,
61168: STR
61169: PUSH
61170: LD_VAR 0 4
61174: STR
61175: PUSH
61176: LD_STRING )
61178: STR
61179: PPUSH
61180: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61184: LD_STRING setSpecText(
61186: PUSH
61187: LD_VAR 0 2
61191: STR
61192: PUSH
61193: LD_STRING ,
61195: STR
61196: PUSH
61197: LD_INT 3
61199: STR
61200: PUSH
61201: LD_STRING ,
61203: STR
61204: PUSH
61205: LD_VAR 0 5
61209: STR
61210: PUSH
61211: LD_STRING )
61213: STR
61214: PPUSH
61215: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61219: LD_STRING setSpecText(
61221: PUSH
61222: LD_VAR 0 2
61226: STR
61227: PUSH
61228: LD_STRING ,
61230: STR
61231: PUSH
61232: LD_INT 4
61234: STR
61235: PUSH
61236: LD_STRING ,
61238: STR
61239: PUSH
61240: LD_VAR 0 6
61244: STR
61245: PUSH
61246: LD_STRING )
61248: STR
61249: PPUSH
61250: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61254: LD_STRING setSpecText(
61256: PUSH
61257: LD_VAR 0 2
61261: STR
61262: PUSH
61263: LD_STRING ,
61265: STR
61266: PUSH
61267: LD_INT 5
61269: STR
61270: PUSH
61271: LD_STRING ,
61273: STR
61274: PUSH
61275: LD_VAR 0 7
61279: STR
61280: PUSH
61281: LD_STRING )
61283: STR
61284: PPUSH
61285: CALL_OW 559
// end ; end ;
61289: GO 60905
61291: POP
61292: POP
// end ;
61293: LD_VAR 0 1
61297: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61298: LD_INT 2
61300: PUSH
61301: LD_INT 30
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 30
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: LIST
61325: PPUSH
61326: CALL_OW 69
61330: IFFALSE 61340
61332: GO 61334
61334: DISABLE
// begin enable ;
61335: ENABLE
// UpdateSpectatorBar ;
61336: CALL 60881 0 0
// end ;
61340: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61341: LD_INT 0
61343: PPUSH
// end ;
61344: LD_VAR 0 12
61348: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61349: LD_INT 0
61351: PPUSH
61352: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61353: LD_VAR 0 1
61357: NOT
61358: IFTRUE 61377
61360: PUSH
61361: LD_VAR 0 2
61365: PPUSH
61366: LD_VAR 0 3
61370: PPUSH
61371: CALL_OW 488
61375: NOT
61376: OR
61377: IFTRUE 61412
61379: PUSH
61380: LD_VAR 0 1
61384: PPUSH
61385: CALL_OW 266
61389: PUSH
61390: LD_INT 3
61392: NONEQUAL
61393: IFFALSE 61411
61395: PUSH
61396: LD_VAR 0 1
61400: PPUSH
61401: CALL_OW 247
61405: PUSH
61406: LD_INT 1
61408: EQUAL
61409: NOT
61410: AND
61411: OR
61412: IFFALSE 61416
// exit ;
61414: GO 61698
// if GetType ( factory ) = unit_human then
61416: LD_VAR 0 1
61420: PPUSH
61421: CALL_OW 247
61425: PUSH
61426: LD_INT 1
61428: EQUAL
61429: IFFALSE 61446
// factory := IsInUnit ( factory ) ;
61431: LD_ADDR_VAR 0 1
61435: PUSH
61436: LD_VAR 0 1
61440: PPUSH
61441: CALL_OW 310
61445: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61446: LD_VAR 0 1
61450: PPUSH
61451: CALL_OW 266
61455: PUSH
61456: LD_INT 3
61458: NONEQUAL
61459: IFFALSE 61463
// exit ;
61461: GO 61698
// for i := 1 to Count ( factoryWaypoints ) do
61463: LD_ADDR_VAR 0 5
61467: PUSH
61468: DOUBLE
61469: LD_INT 1
61471: DEC
61472: ST_TO_ADDR
61473: LD_EXP 59
61477: PPUSH
61478: CALL 12214 0 1
61482: PUSH
61483: FOR_TO
61484: IFFALSE 61646
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61486: LD_VAR 0 2
61490: PPUSH
61491: LD_VAR 0 3
61495: PPUSH
61496: CALL_OW 428
61500: PUSH
61501: LD_EXP 59
61505: PUSH
61506: LD_VAR 0 5
61510: ARRAY
61511: PUSH
61512: LD_INT 2
61514: ARRAY
61515: EQUAL
61516: IFFALSE 61548
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61518: LD_ADDR_EXP 59
61522: PUSH
61523: LD_EXP 59
61527: PPUSH
61528: LD_VAR 0 5
61532: PPUSH
61533: CALL_OW 3
61537: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61538: CALL 61703 0 0
// exit ;
61542: POP
61543: POP
61544: GO 61698
// end else
61546: GO 61644
// if factory = factoryWaypoints [ i ] [ 2 ] then
61548: LD_VAR 0 1
61552: PUSH
61553: LD_EXP 59
61557: PUSH
61558: LD_VAR 0 5
61562: ARRAY
61563: PUSH
61564: LD_INT 2
61566: ARRAY
61567: EQUAL
61568: IFFALSE 61644
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61570: LD_ADDR_EXP 59
61574: PUSH
61575: LD_EXP 59
61579: PPUSH
61580: LD_VAR 0 5
61584: PPUSH
61585: CALL_OW 3
61589: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61590: LD_ADDR_EXP 59
61594: PUSH
61595: LD_EXP 59
61599: PPUSH
61600: LD_VAR 0 1
61604: PPUSH
61605: CALL_OW 255
61609: PUSH
61610: LD_VAR 0 1
61614: PUSH
61615: LD_VAR 0 2
61619: PUSH
61620: LD_VAR 0 3
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: PPUSH
61631: CALL 48146 0 2
61635: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61636: CALL 61703 0 0
// exit ;
61640: POP
61641: POP
61642: GO 61698
// end ; end ;
61644: GO 61483
61646: POP
61647: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61648: LD_ADDR_EXP 59
61652: PUSH
61653: LD_EXP 59
61657: PPUSH
61658: LD_VAR 0 1
61662: PPUSH
61663: CALL_OW 255
61667: PUSH
61668: LD_VAR 0 1
61672: PUSH
61673: LD_VAR 0 2
61677: PUSH
61678: LD_VAR 0 3
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: PPUSH
61689: CALL 48146 0 2
61693: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61694: CALL 61703 0 0
// end ;
61698: LD_VAR 0 4
61702: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61703: LD_INT 0
61705: PPUSH
61706: PPUSH
61707: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61708: LD_STRING resetFactoryWaypoint();
61710: PPUSH
61711: CALL_OW 559
// if factoryWaypoints then
61715: LD_EXP 59
61719: IFFALSE 61840
// begin list := factoryWaypoints ;
61721: LD_ADDR_VAR 0 3
61725: PUSH
61726: LD_EXP 59
61730: ST_TO_ADDR
// for i := 1 to list do
61731: LD_ADDR_VAR 0 2
61735: PUSH
61736: DOUBLE
61737: LD_INT 1
61739: DEC
61740: ST_TO_ADDR
61741: LD_VAR 0 3
61745: PUSH
61746: FOR_TO
61747: IFFALSE 61838
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61749: LD_STRING setFactoryWaypointXY(
61751: PUSH
61752: LD_VAR 0 3
61756: PUSH
61757: LD_VAR 0 2
61761: ARRAY
61762: PUSH
61763: LD_INT 1
61765: ARRAY
61766: STR
61767: PUSH
61768: LD_STRING ,
61770: STR
61771: PUSH
61772: LD_VAR 0 3
61776: PUSH
61777: LD_VAR 0 2
61781: ARRAY
61782: PUSH
61783: LD_INT 2
61785: ARRAY
61786: STR
61787: PUSH
61788: LD_STRING ,
61790: STR
61791: PUSH
61792: LD_VAR 0 3
61796: PUSH
61797: LD_VAR 0 2
61801: ARRAY
61802: PUSH
61803: LD_INT 3
61805: ARRAY
61806: STR
61807: PUSH
61808: LD_STRING ,
61810: STR
61811: PUSH
61812: LD_VAR 0 3
61816: PUSH
61817: LD_VAR 0 2
61821: ARRAY
61822: PUSH
61823: LD_INT 4
61825: ARRAY
61826: STR
61827: PUSH
61828: LD_STRING )
61830: STR
61831: PPUSH
61832: CALL_OW 559
61836: GO 61746
61838: POP
61839: POP
// end ; end ;
61840: LD_VAR 0 1
61844: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61845: LD_INT 0
61847: PPUSH
// if HexInfo ( x , y ) = warehouse then
61848: LD_VAR 0 2
61852: PPUSH
61853: LD_VAR 0 3
61857: PPUSH
61858: CALL_OW 428
61862: PUSH
61863: LD_VAR 0 1
61867: EQUAL
61868: IFFALSE 61895
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61870: LD_ADDR_EXP 61
61874: PUSH
61875: LD_EXP 61
61879: PPUSH
61880: LD_VAR 0 1
61884: PPUSH
61885: LD_INT 0
61887: PPUSH
61888: CALL_OW 1
61892: ST_TO_ADDR
61893: GO 61946
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61895: LD_ADDR_EXP 61
61899: PUSH
61900: LD_EXP 61
61904: PPUSH
61905: LD_VAR 0 1
61909: PPUSH
61910: LD_VAR 0 1
61914: PPUSH
61915: CALL_OW 255
61919: PUSH
61920: LD_VAR 0 1
61924: PUSH
61925: LD_VAR 0 2
61929: PUSH
61930: LD_VAR 0 3
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: PPUSH
61941: CALL_OW 1
61945: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61946: CALL 61955 0 0
// end ;
61950: LD_VAR 0 4
61954: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61955: LD_INT 0
61957: PPUSH
61958: PPUSH
61959: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61960: LD_STRING resetWarehouseGatheringPoints();
61962: PPUSH
61963: CALL_OW 559
// if warehouseGatheringPoints then
61967: LD_EXP 61
61971: IFFALSE 62097
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61973: LD_ADDR_VAR 0 3
61977: PUSH
61978: LD_EXP 61
61982: PPUSH
61983: CALL 52080 0 1
61987: ST_TO_ADDR
// for i := 1 to list do
61988: LD_ADDR_VAR 0 2
61992: PUSH
61993: DOUBLE
61994: LD_INT 1
61996: DEC
61997: ST_TO_ADDR
61998: LD_VAR 0 3
62002: PUSH
62003: FOR_TO
62004: IFFALSE 62095
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62006: LD_STRING setWarehouseGatheringPointXY(
62008: PUSH
62009: LD_VAR 0 3
62013: PUSH
62014: LD_VAR 0 2
62018: ARRAY
62019: PUSH
62020: LD_INT 1
62022: ARRAY
62023: STR
62024: PUSH
62025: LD_STRING ,
62027: STR
62028: PUSH
62029: LD_VAR 0 3
62033: PUSH
62034: LD_VAR 0 2
62038: ARRAY
62039: PUSH
62040: LD_INT 2
62042: ARRAY
62043: STR
62044: PUSH
62045: LD_STRING ,
62047: STR
62048: PUSH
62049: LD_VAR 0 3
62053: PUSH
62054: LD_VAR 0 2
62058: ARRAY
62059: PUSH
62060: LD_INT 3
62062: ARRAY
62063: STR
62064: PUSH
62065: LD_STRING ,
62067: STR
62068: PUSH
62069: LD_VAR 0 3
62073: PUSH
62074: LD_VAR 0 2
62078: ARRAY
62079: PUSH
62080: LD_INT 4
62082: ARRAY
62083: STR
62084: PUSH
62085: LD_STRING )
62087: STR
62088: PPUSH
62089: CALL_OW 559
62093: GO 62003
62095: POP
62096: POP
// end ; end ;
62097: LD_VAR 0 1
62101: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62102: LD_INT 0
62104: PPUSH
62105: PPUSH
// if not mpSidePositions then
62106: LD_EXP 7
62110: NOT
62111: IFFALSE 62115
// exit ;
62113: GO 62186
// result :=  ;
62115: LD_ADDR_VAR 0 1
62119: PUSH
62120: LD_STRING 
62122: ST_TO_ADDR
// for i := 1 to 8 do
62123: LD_ADDR_VAR 0 2
62127: PUSH
62128: DOUBLE
62129: LD_INT 1
62131: DEC
62132: ST_TO_ADDR
62133: LD_INT 8
62135: PUSH
62136: FOR_TO
62137: IFFALSE 62167
// begin result := result & mpSidePositions [ i ] & ; ;
62139: LD_ADDR_VAR 0 1
62143: PUSH
62144: LD_VAR 0 1
62148: PUSH
62149: LD_EXP 7
62153: PUSH
62154: LD_VAR 0 2
62158: ARRAY
62159: STR
62160: PUSH
62161: LD_STRING ;
62163: STR
62164: ST_TO_ADDR
// end ;
62165: GO 62136
62167: POP
62168: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62169: LD_STRING setMultiplayerRealPosition("
62171: PUSH
62172: LD_VAR 0 1
62176: STR
62177: PUSH
62178: LD_STRING ");
62180: STR
62181: PPUSH
62182: CALL_OW 559
// end ;
62186: LD_VAR 0 1
62190: RET
