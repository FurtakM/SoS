// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2728 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3074 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 0 , 4 , 3 , 5 , 6 , 2 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 0
 650: PUSH
 651: LD_INT 4
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 0
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 1
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 0 , 1 , 1 , 2 , 2 , 2 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 3 , 4 ] , [ 5 , 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 3
 767: PUSH
 768: LD_INT 4
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 5
 778: PUSH
 779: LD_INT 6
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 11
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 802: LD_ADDR_EXP 29
 806: PUSH
 807: LD_INT 160
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 19
 835: PUSH
 836: LD_INT 8
 838: PUSH
 839: LD_INT 9
 841: PUSH
 842: LD_INT 7
 844: PUSH
 845: LD_INT 12
 847: PUSH
 848: LD_INT 11
 850: PUSH
 851: LD_INT 10
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 14
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: LD_EXP 19
 877: UNION
 878: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 879: LD_VAR 0 1
 883: PUSH
 884: LD_INT 2
 886: EQUAL
 887: IFFALSE 899
// baseLevel := 1 else
 889: LD_ADDR_VAR 0 7
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
 897: GO 913
// baseLevel := mpGameSettings [ 1 ] ;
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 1
 911: ARRAY
 912: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 913: LD_ADDR_EXP 24
 917: PUSH
 918: LD_EXP 6
 922: PUSH
 923: LD_INT 2
 925: ARRAY
 926: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 927: LD_ADDR_EXP 25
 931: PUSH
 932: LD_EXP 6
 936: PUSH
 937: LD_INT 3
 939: ARRAY
 940: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 941: LD_ADDR_EXP 15
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 4
 953: ARRAY
 954: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 955: LD_ADDR_EXP 27
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 5
 967: ARRAY
 968: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 969: LD_ADDR_VAR 0 5
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 6
 981: ARRAY
 982: PUSH
 983: LD_INT 0
 985: GREATER
 986: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 987: LD_ADDR_VAR 0 6
 991: PUSH
 992: LD_EXP 6
 996: PUSH
 997: LD_INT 7
 999: ARRAY
1000: PUSH
1001: LD_INT 0
1003: GREATER
1004: ST_TO_ADDR
// mpKingArea := 0 ;
1005: LD_ADDR_EXP 34
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// mpPoints := 0 ;
1013: LD_ADDR_EXP 35
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// mpEmissions := 0 ;
1021: LD_ADDR_EXP 37
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// kingArea := 0 ;
1029: LD_ADDR_EXP 1
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// kingCamArea := 0 ;
1037: LD_ADDR_EXP 2
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1045: LD_EXP 6
1049: PUSH
1050: LD_INT 9
1052: ARRAY
1053: IFFALSE 1185
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1055: LD_ADDR_EXP 36
1059: PUSH
1060: LD_INT 1
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 1
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 12
1102: PUSH
1103: LD_INT 1
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 24
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: PUSH
1118: LD_INT 12
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 23
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: LD_INT 21
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: LD_INT 1
1148: PUSH
1149: LD_INT 42
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 21
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: LD_INT 42
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1185: LD_ADDR_EXP 16
1189: PUSH
1190: LD_EXP 6
1194: PUSH
1195: LD_INT 11
1197: ARRAY
1198: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1199: LD_ADDR_EXP 22
1203: PUSH
1204: LD_EXP 6
1208: PUSH
1209: LD_INT 12
1211: ARRAY
1212: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1213: LD_ADDR_EXP 26
1217: PUSH
1218: LD_EXP 6
1222: PUSH
1223: LD_INT 13
1225: ARRAY
1226: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1227: LD_ADDR_EXP 33
1231: PUSH
1232: LD_EXP 6
1236: PUSH
1237: LD_INT 14
1239: ARRAY
1240: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_EXP 6
1250: PUSH
1251: LD_INT 15
1253: ARRAY
1254: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1255: LD_ADDR_EXP 28
1259: PUSH
1260: LD_EXP 6
1264: PUSH
1265: LD_INT 18
1267: ARRAY
1268: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1269: LD_ADDR_EXP 20
1273: PUSH
1274: LD_EXP 6
1278: PUSH
1279: LD_INT 21
1281: ARRAY
1282: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 ] ;
1283: LD_ADDR_EXP 31
1287: PUSH
1288: LD_INT 1
1290: PUSH
1291: LD_INT 2
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 4
1299: PUSH
1300: LD_INT 5
1302: PUSH
1303: LD_INT 6
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1314: LD_ADDR_VAR 0 8
1318: PUSH
1319: LD_INT 15
1321: PPUSH
1322: LD_INT 2
1324: PPUSH
1325: CALL 51616 0 2
1329: PUSH
1330: LD_INT 16
1332: PPUSH
1333: LD_INT 1
1335: PPUSH
1336: CALL 51616 0 2
1340: PUSH
1341: LD_INT 17
1343: PPUSH
1344: LD_INT 2
1346: PPUSH
1347: CALL 51616 0 2
1351: PUSH
1352: LD_INT 18
1354: PPUSH
1355: LD_INT 4
1357: PPUSH
1358: CALL 51616 0 2
1362: PUSH
1363: LD_INT 19
1365: PPUSH
1366: LD_INT 4
1368: PPUSH
1369: CALL 51616 0 2
1373: PUSH
1374: LD_INT 20
1376: PPUSH
1377: LD_INT 5
1379: PPUSH
1380: CALL 51616 0 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1393: LD_ADDR_VAR 0 3
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_VAR 0 8
1407: PPUSH
1408: CALL 11462 0 1
1412: PUSH
1413: FOR_TO
1414: IFFALSE 1518
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1416: LD_ADDR_EXP 21
1420: PUSH
1421: LD_EXP 21
1425: PPUSH
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_VAR 0 8
1435: PUSH
1436: LD_VAR 0 3
1440: ARRAY
1441: PUSH
1442: LD_INT 1
1444: ARRAY
1445: PPUSH
1446: LD_VAR 0 8
1450: PUSH
1451: LD_VAR 0 3
1455: ARRAY
1456: PUSH
1457: LD_INT 3
1459: ARRAY
1460: PPUSH
1461: LD_INT 10
1463: PPUSH
1464: CALL_OW 272
1468: PUSH
1469: LD_VAR 0 8
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PUSH
1480: LD_INT 2
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 8
1488: PUSH
1489: LD_VAR 0 3
1493: ARRAY
1494: PUSH
1495: LD_INT 3
1497: ARRAY
1498: PPUSH
1499: LD_INT 10
1501: PPUSH
1502: CALL_OW 273
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 1
1515: ST_TO_ADDR
1516: GO 1413
1518: POP
1519: POP
// if hasOil then
1520: LD_VAR 0 5
1524: IFFALSE 1635
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1526: LD_ADDR_VAR 0 4
1530: PUSH
1531: LD_EXP 6
1535: PUSH
1536: LD_INT 6
1538: ARRAY
1539: PUSH
1540: LD_INT 2
1542: EQUAL
1543: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1544: LD_ADDR_EXP 12
1548: PUSH
1549: LD_INT 21
1551: PPUSH
1552: LD_VAR 0 4
1556: PPUSH
1557: CALL 51449 0 2
1561: PUSH
1562: LD_INT 26
1564: PPUSH
1565: LD_VAR 0 4
1569: PPUSH
1570: CALL 51449 0 2
1574: PUSH
1575: LD_INT 31
1577: PPUSH
1578: LD_VAR 0 4
1582: PPUSH
1583: CALL 51449 0 2
1587: PUSH
1588: LD_INT 36
1590: PPUSH
1591: LD_VAR 0 4
1595: PPUSH
1596: CALL 51449 0 2
1600: PUSH
1601: LD_INT 41
1603: PPUSH
1604: LD_VAR 0 4
1608: PPUSH
1609: CALL 51449 0 2
1613: PUSH
1614: LD_INT 46
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 51449 0 2
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// end ; if hasSib then
1635: LD_VAR 0 6
1639: IFFALSE 1750
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1641: LD_ADDR_VAR 0 4
1645: PUSH
1646: LD_EXP 6
1650: PUSH
1651: LD_INT 7
1653: ARRAY
1654: PUSH
1655: LD_INT 2
1657: EQUAL
1658: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1659: LD_ADDR_EXP 13
1663: PUSH
1664: LD_INT 22
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 51449 0 2
1676: PUSH
1677: LD_INT 27
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 51449 0 2
1689: PUSH
1690: LD_INT 32
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 51449 0 2
1702: PUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 51449 0 2
1715: PUSH
1716: LD_INT 42
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 51449 0 2
1728: PUSH
1729: LD_INT 47
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 51449 0 2
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1750: LD_VAR 0 7
1754: PUSH
1755: LD_INT 1
1757: GREATEREQUAL
1758: IFFALSE 1770
// mpDepots := startPos ;
1760: LD_ADDR_EXP 14
1764: PUSH
1765: LD_VAR 0 8
1769: ST_TO_ADDR
// if baseLevel >= 2 then
1770: LD_VAR 0 7
1774: PUSH
1775: LD_INT 2
1777: GREATEREQUAL
1778: IFFALSE 2093
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1780: LD_ADDR_EXP 17
1784: PUSH
1785: LD_INT 31
1787: PUSH
1788: LD_INT 23
1790: PPUSH
1791: LD_INT 5
1793: PPUSH
1794: CALL 51616 0 2
1798: ADD
1799: PUSH
1800: LD_INT 31
1802: PUSH
1803: LD_INT 24
1805: PPUSH
1806: LD_INT 5
1808: PPUSH
1809: CALL 51616 0 2
1813: ADD
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: LD_INT 25
1820: PPUSH
1821: LD_INT 5
1823: PPUSH
1824: CALL 51616 0 2
1828: ADD
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 31
1837: PUSH
1838: LD_INT 28
1840: PPUSH
1841: LD_INT 4
1843: PPUSH
1844: CALL 51616 0 2
1848: ADD
1849: PUSH
1850: LD_INT 31
1852: PUSH
1853: LD_INT 29
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: CALL 51616 0 2
1863: ADD
1864: PUSH
1865: LD_INT 4
1867: PUSH
1868: LD_INT 30
1870: PPUSH
1871: LD_INT 4
1873: PPUSH
1874: CALL 51616 0 2
1878: ADD
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 31
1887: PUSH
1888: LD_INT 33
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL 51616 0 2
1898: ADD
1899: PUSH
1900: LD_INT 31
1902: PUSH
1903: LD_INT 34
1905: PPUSH
1906: LD_INT 5
1908: PPUSH
1909: CALL 51616 0 2
1913: ADD
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: LD_INT 35
1920: PPUSH
1921: LD_INT 0
1923: PPUSH
1924: CALL 51616 0 2
1928: ADD
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 31
1937: PUSH
1938: LD_INT 38
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL 51616 0 2
1948: ADD
1949: PUSH
1950: LD_INT 31
1952: PUSH
1953: LD_INT 39
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL 51616 0 2
1963: ADD
1964: PUSH
1965: LD_INT 4
1967: PUSH
1968: LD_INT 40
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL 51616 0 2
1978: ADD
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 31
1987: PUSH
1988: LD_INT 43
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL 51616 0 2
1998: ADD
1999: PUSH
2000: LD_INT 31
2002: PUSH
2003: LD_INT 44
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL 51616 0 2
2013: ADD
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 45
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: CALL 51616 0 2
2028: ADD
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 31
2037: PUSH
2038: LD_INT 49
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: CALL 51616 0 2
2048: ADD
2049: PUSH
2050: LD_INT 31
2052: PUSH
2053: LD_INT 50
2055: PPUSH
2056: LD_INT 2
2058: PPUSH
2059: CALL 51616 0 2
2063: ADD
2064: PUSH
2065: LD_INT 4
2067: PUSH
2068: LD_INT 48
2070: PPUSH
2071: LD_INT 2
2073: PPUSH
2074: CALL 51616 0 2
2078: ADD
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// end ; end ;
2093: LD_VAR 0 2
2097: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2098: GO 2100
2100: DISABLE
2101: LD_INT 0
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// begin if not mpShipments then
2111: LD_EXP 27
2115: NOT
2116: IFFALSE 2120
// exit ;
2118: GO 2641
// case mpShipments of 1 :
2120: LD_EXP 27
2124: PUSH
2125: LD_INT 1
2127: DOUBLE
2128: EQUAL
2129: IFTRUE 2133
2131: GO 2168
2133: POP
// begin time := 0 0$30 ;
2134: LD_ADDR_VAR 0 4
2138: PUSH
2139: LD_INT 1050
2141: ST_TO_ADDR
// normalTime := 0 0$30 ;
2142: LD_ADDR_VAR 0 6
2146: PUSH
2147: LD_INT 1050
2149: ST_TO_ADDR
// maxTime := 1 1$20 ;
2150: LD_ADDR_VAR 0 8
2154: PUSH
2155: LD_INT 2800
2157: ST_TO_ADDR
// delayTime := 0 0$5 ;
2158: LD_ADDR_VAR 0 7
2162: PUSH
2163: LD_INT 175
2165: ST_TO_ADDR
// end ; 2 :
2166: GO 2298
2168: LD_INT 2
2170: DOUBLE
2171: EQUAL
2172: IFTRUE 2176
2174: GO 2211
2176: POP
// begin time := 0 0$25 ;
2177: LD_ADDR_VAR 0 4
2181: PUSH
2182: LD_INT 875
2184: ST_TO_ADDR
// normalTime := 0 0$25 ;
2185: LD_ADDR_VAR 0 6
2189: PUSH
2190: LD_INT 875
2192: ST_TO_ADDR
// maxTime := 1 1$10 ;
2193: LD_ADDR_VAR 0 8
2197: PUSH
2198: LD_INT 2450
2200: ST_TO_ADDR
// delayTime := 0 0$4 ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: LD_INT 140
2208: ST_TO_ADDR
// end ; 3 :
2209: GO 2298
2211: LD_INT 3
2213: DOUBLE
2214: EQUAL
2215: IFTRUE 2219
2217: GO 2254
2219: POP
// begin time := 0 0$20 ;
2220: LD_ADDR_VAR 0 4
2224: PUSH
2225: LD_INT 700
2227: ST_TO_ADDR
// normalTime := 0 0$20 ;
2228: LD_ADDR_VAR 0 6
2232: PUSH
2233: LD_INT 700
2235: ST_TO_ADDR
// maxTime := 1 1$00 ;
2236: LD_ADDR_VAR 0 8
2240: PUSH
2241: LD_INT 2100
2243: ST_TO_ADDR
// delayTime := 0 0$3 ;
2244: LD_ADDR_VAR 0 7
2248: PUSH
2249: LD_INT 105
2251: ST_TO_ADDR
// end ; 4 :
2252: GO 2298
2254: LD_INT 4
2256: DOUBLE
2257: EQUAL
2258: IFTRUE 2262
2260: GO 2297
2262: POP
// begin time := 0 0$15 ;
2263: LD_ADDR_VAR 0 4
2267: PUSH
2268: LD_INT 525
2270: ST_TO_ADDR
// normalTime := 0 0$15 ;
2271: LD_ADDR_VAR 0 6
2275: PUSH
2276: LD_INT 525
2278: ST_TO_ADDR
// maxTime := 0 0$55 ;
2279: LD_ADDR_VAR 0 8
2283: PUSH
2284: LD_INT 1925
2286: ST_TO_ADDR
// delayTime := 0 0$2 ;
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: LD_INT 70
2294: ST_TO_ADDR
// end ; end ;
2295: GO 2298
2297: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2298: LD_ADDR_VAR 0 3
2302: PUSH
2303: LD_INT 8
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: LD_INT 7
2311: PUSH
2312: LD_INT 12
2314: PUSH
2315: LD_INT 11
2317: PUSH
2318: LD_INT 10
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// areas := [ ] ;
2329: LD_ADDR_VAR 0 5
2333: PUSH
2334: EMPTY
2335: ST_TO_ADDR
// for i := 1 to 8 do
2336: LD_ADDR_VAR 0 1
2340: PUSH
2341: DOUBLE
2342: LD_INT 1
2344: DEC
2345: ST_TO_ADDR
2346: LD_INT 8
2348: PUSH
2349: FOR_TO
2350: IFFALSE 2397
// begin if not mpSidePositions [ i ] then
2352: LD_EXP 7
2356: PUSH
2357: LD_VAR 0 1
2361: ARRAY
2362: NOT
2363: IFFALSE 2367
// continue ;
2365: GO 2349
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 5
2376: PUSH
2377: LD_VAR 0 3
2381: PUSH
2382: LD_EXP 7
2386: PUSH
2387: LD_VAR 0 1
2391: ARRAY
2392: ARRAY
2393: ADD
2394: ST_TO_ADDR
// end ;
2395: GO 2349
2397: POP
2398: POP
// areas := areas diff 0 ;
2399: LD_ADDR_VAR 0 5
2403: PUSH
2404: LD_VAR 0 5
2408: PUSH
2409: LD_INT 0
2411: DIFF
2412: ST_TO_ADDR
// x := 1 ;
2413: LD_ADDR_VAR 0 2
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// repeat wait ( time ) ;
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL_OW 67
// x := Inc ( x ) ;
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: LD_VAR 0 2
2439: PPUSH
2440: CALL 48432 0 1
2444: ST_TO_ADDR
// if x > 5 then
2445: LD_VAR 0 2
2449: PUSH
2450: LD_INT 5
2452: GREATER
2453: IFFALSE 2463
// x := 1 ;
2455: LD_ADDR_VAR 0 2
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// for i in areas do
2463: LD_ADDR_VAR 0 1
2467: PUSH
2468: LD_VAR 0 5
2472: PUSH
2473: FOR_IN
2474: IFFALSE 2513
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2476: LD_VAR 0 1
2480: PPUSH
2481: LD_INT 1
2483: PPUSH
2484: CALL_OW 287
2488: PUSH
2489: LD_INT 20
2491: LESS
2492: IFFALSE 2511
// begin CreateCratesArea ( x , i , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 1
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 55
// end ; end ;
2511: GO 2473
2513: POP
2514: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) = 0 then
2515: LD_INT 14
2517: PPUSH
2518: LD_INT 1
2520: PPUSH
2521: CALL_OW 287
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2568
// begin for i := 1 to 3 do
2531: LD_ADDR_VAR 0 1
2535: PUSH
2536: DOUBLE
2537: LD_INT 1
2539: DEC
2540: ST_TO_ADDR
2541: LD_INT 3
2543: PUSH
2544: FOR_TO
2545: IFFALSE 2564
// CreateCratesArea ( x , MZBaseArea , true ) ;
2547: LD_VAR 0 2
2551: PPUSH
2552: LD_INT 14
2554: PPUSH
2555: LD_INT 1
2557: PPUSH
2558: CALL_OW 55
2562: GO 2544
2564: POP
2565: POP
// end else
2566: GO 2599
// if GetResourceArea ( MZBaseArea , mat_cans ) < 120 then
2568: LD_INT 14
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: CALL_OW 287
2578: PUSH
2579: LD_INT 120
2581: LESS
2582: IFFALSE 2599
// CreateCratesArea ( x , MZBaseArea , true ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 14
2591: PPUSH
2592: LD_INT 1
2594: PPUSH
2595: CALL_OW 55
// time := time + delayTime ;
2599: LD_ADDR_VAR 0 4
2603: PUSH
2604: LD_VAR 0 4
2608: PUSH
2609: LD_VAR 0 7
2613: PLUS
2614: ST_TO_ADDR
// if time > maxTime then
2615: LD_VAR 0 4
2619: PUSH
2620: LD_VAR 0 8
2624: GREATER
2625: IFFALSE 2637
// time := normalTime ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: LD_VAR 0 6
2636: ST_TO_ADDR
// until false ;
2637: LD_INT 0
2639: IFFALSE 2421
// end ; end_of_file
2641: PPOPN 8
2643: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL 52324 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2653: LD_VAR 0 1
2657: PPUSH
2658: CALL 7660 0 1
// end ;
2662: PPOPN 1
2664: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2665: LD_VAR 0 1
2669: PPUSH
2670: CALL 52341 0 1
// end ;
2674: PPOPN 1
2676: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 8325 0 1
2686: PPOPN 1
2688: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: LD_VAR 0 2
2698: PPUSH
2699: CALL 52382 0 2
2703: PPOPN 2
2705: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_VAR 0 2
2715: PPUSH
2716: LD_VAR 0 3
2720: PPUSH
2721: CALL 8378 0 3
2725: PPOPN 3
2727: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2728: LD_INT 0
2730: PPUSH
2731: PPUSH
// disable ( mpActive ) ;
2732: LD_INT 100
2734: DISABLE_MARKED
// disable ( mpWin ) ;
2735: LD_INT 101
2737: DISABLE_MARKED
// disable ( mpLose ) ;
2738: LD_INT 102
2740: DISABLE_MARKED
// mpGameType := 0 ;
2741: LD_ADDR_EXP 3
2745: PUSH
2746: LD_INT 0
2748: ST_TO_ADDR
// mpGameSettings := [ ] ;
2749: LD_ADDR_EXP 6
2753: PUSH
2754: EMPTY
2755: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2756: LD_ADDR_EXP 4
2760: PUSH
2761: EMPTY
2762: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2763: LD_ADDR_EXP 5
2767: PUSH
2768: EMPTY
2769: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2770: LD_ADDR_EXP 29
2774: PUSH
2775: LD_INT 2
2777: PUSH
2778: LD_INT 2
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2785: LD_ADDR_EXP 12
2789: PUSH
2790: EMPTY
2791: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2792: LD_ADDR_EXP 13
2796: PUSH
2797: EMPTY
2798: ST_TO_ADDR
// mpDepots := [ ] ;
2799: LD_ADDR_EXP 14
2803: PUSH
2804: EMPTY
2805: ST_TO_ADDR
// mpBuildings := [ ] ;
2806: LD_ADDR_EXP 17
2810: PUSH
2811: EMPTY
2812: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2813: LD_ADDR_EXP 18
2817: PUSH
2818: EMPTY
2819: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2820: LD_ADDR_EXP 19
2824: PUSH
2825: EMPTY
2826: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2827: LD_ADDR_EXP 20
2831: PUSH
2832: EMPTY
2833: ST_TO_ADDR
// mpStartingResources := [ ] ;
2834: LD_ADDR_EXP 15
2838: PUSH
2839: EMPTY
2840: ST_TO_ADDR
// mpStartPos := [ ] ;
2841: LD_ADDR_EXP 21
2845: PUSH
2846: EMPTY
2847: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2848: LD_ADDR_EXP 22
2852: PUSH
2853: LD_INT 1
2855: NEG
2856: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2857: LD_ADDR_EXP 23
2861: PUSH
2862: EMPTY
2863: ST_TO_ADDR
// mpApemans := [ ] ;
2864: LD_ADDR_EXP 30
2868: PUSH
2869: EMPTY
2870: ST_TO_ADDR
// mpApemansArea := [ ] ;
2871: LD_ADDR_EXP 31
2875: PUSH
2876: EMPTY
2877: ST_TO_ADDR
// mpRespawn := [ ] ;
2878: LD_ADDR_EXP 33
2882: PUSH
2883: EMPTY
2884: ST_TO_ADDR
// mpKingArea := 0 ;
2885: LD_ADDR_EXP 34
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// mpPoints := [ ] ;
2893: LD_ADDR_EXP 35
2897: PUSH
2898: EMPTY
2899: ST_TO_ADDR
// mpVehicles := 0 ;
2900: LD_ADDR_EXP 36
2904: PUSH
2905: LD_INT 0
2907: ST_TO_ADDR
// mpShipments := 0 ;
2908: LD_ADDR_EXP 27
2912: PUSH
2913: LD_INT 0
2915: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2916: LD_ADDR_EXP 40
2920: PUSH
2921: EMPTY
2922: PUSH
2923: EMPTY
2924: PUSH
2925: EMPTY
2926: PUSH
2927: EMPTY
2928: PUSH
2929: EMPTY
2930: PUSH
2931: EMPTY
2932: PUSH
2933: EMPTY
2934: PUSH
2935: EMPTY
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2947: LD_ADDR_EXP 32
2951: PUSH
2952: EMPTY
2953: PUSH
2954: EMPTY
2955: PUSH
2956: EMPTY
2957: PUSH
2958: EMPTY
2959: PUSH
2960: EMPTY
2961: PUSH
2962: EMPTY
2963: PUSH
2964: EMPTY
2965: PUSH
2966: EMPTY
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: ST_TO_ADDR
// mpEmissions := 0 ;
2978: LD_ADDR_EXP 37
2982: PUSH
2983: LD_INT 0
2985: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2986: LD_ADDR_EXP 25
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2994: LD_ADDR_EXP 24
2998: PUSH
2999: LD_INT 15
3001: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3002: LD_ADDR_EXP 38
3006: PUSH
3007: LD_INT 0
3009: ST_TO_ADDR
// mpGameActive := false ;
3010: LD_ADDR_EXP 39
3014: PUSH
3015: LD_INT 0
3017: ST_TO_ADDR
// mpBlockRespThread := false ;
3018: LD_ADDR_EXP 41
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// for i := 1 to 32 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 32
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3067
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3042: LD_ADDR_EXP 6
3046: PUSH
3047: LD_EXP 6
3051: PPUSH
3052: LD_VAR 0 2
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 1
3064: ST_TO_ADDR
3065: GO 3039
3067: POP
3068: POP
// end ;
3069: LD_VAR 0 1
3073: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3074: LD_INT 0
3076: PPUSH
3077: PPUSH
3078: PPUSH
3079: PPUSH
3080: PPUSH
3081: PPUSH
3082: PPUSH
3083: PPUSH
3084: PPUSH
3085: PPUSH
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
3090: LD_ADDR_VAR 0 14
3094: PUSH
3095: LD_INT 1
3097: PUSH
3098: LD_INT 2
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: LIST
3108: ST_TO_ADDR
// for i in gameTypes do
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_VAR 0 14
3118: PUSH
3119: FOR_IN
3120: IFFALSE 3129
// disable ( i ) ;
3122: LD_VAR 0 2
3126: DISABLE_MARKED
3127: GO 3119
3129: POP
3130: POP
// if Multiplayer then
3131: LD_OWVAR 4
3135: IFFALSE 3319
// begin mpGameType := mp_game_type ;
3137: LD_ADDR_EXP 3
3141: PUSH
3142: LD_OWVAR 6
3146: ST_TO_ADDR
// your_side := mp_player_side ;
3147: LD_ADDR_OWVAR 2
3151: PUSH
3152: LD_OWVAR 7
3156: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3157: LD_ADDR_EXP 7
3161: PUSH
3162: LD_OWVAR 17
3166: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3167: LD_ADDR_EXP 8
3171: PUSH
3172: LD_OWVAR 15
3176: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3177: LD_ADDR_EXP 9
3181: PUSH
3182: LD_OWVAR 16
3186: ST_TO_ADDR
// mpTeams := mp_teams ;
3187: LD_ADDR_EXP 10
3191: PUSH
3192: LD_OWVAR 12
3196: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3197: LD_ADDR_VAR 0 2
3201: PUSH
3202: DOUBLE
3203: LD_INT 1
3205: DEC
3206: ST_TO_ADDR
3207: LD_EXP 4
3211: PPUSH
3212: CALL 11462 0 1
3216: PUSH
3217: FOR_TO
3218: IFFALSE 3294
// begin setting := mpGameSettingsKeys [ i ] ;
3220: LD_ADDR_VAR 0 12
3224: PUSH
3225: LD_EXP 4
3229: PUSH
3230: LD_VAR 0 2
3234: ARRAY
3235: ST_TO_ADDR
// if setting then
3236: LD_VAR 0 12
3240: IFFALSE 3292
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3242: LD_ADDR_EXP 6
3246: PUSH
3247: LD_EXP 6
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: LD_EXP 5
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 2
3272: PUSH
3273: LD_INT 1
3275: MINUS
3276: PPUSH
3277: CALL_OW 426
3281: PUSH
3282: LD_INT 1
3284: PLUS
3285: ARRAY
3286: PPUSH
3287: CALL_OW 1
3291: ST_TO_ADDR
// end ;
3292: GO 3217
3294: POP
3295: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3296: LD_ADDR_EXP 11
3300: PUSH
3301: LD_EXP 8
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: EMPTY
3310: LIST
3311: DIFF
3312: PUSH
3313: LD_INT 1
3315: GREATER
3316: ST_TO_ADDR
// end else
3317: GO 3319
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3319: LD_EXP 3
3323: PPUSH
3324: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
3328: LD_EXP 18
3332: PPUSH
3333: CALL 11462 0 1
3337: IFFALSE 3368
// begin for i in mpMarkedAreas do
3339: LD_ADDR_VAR 0 2
3343: PUSH
3344: LD_EXP 18
3348: PUSH
3349: FOR_IN
3350: IFFALSE 3366
// SetAreaMapShow ( i , 0 ) ;
3352: LD_VAR 0 2
3356: PPUSH
3357: LD_INT 0
3359: PPUSH
3360: CALL_OW 424
3364: GO 3349
3366: POP
3367: POP
// end ; for i := 1 to 8 do
3368: LD_ADDR_VAR 0 2
3372: PUSH
3373: DOUBLE
3374: LD_INT 1
3376: DEC
3377: ST_TO_ADDR
3378: LD_INT 8
3380: PUSH
3381: FOR_TO
3382: IFFALSE 4633
// begin if not mpSidePositions [ i ] then
3384: LD_EXP 7
3388: PUSH
3389: LD_VAR 0 2
3393: ARRAY
3394: NOT
3395: IFFALSE 3399
// continue ;
3397: GO 3381
// side := i ;
3399: LD_ADDR_VAR 0 7
3403: PUSH
3404: LD_VAR 0 2
3408: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3409: LD_ADDR_VAR 0 9
3413: PUSH
3414: LD_EXP 9
3418: PUSH
3419: LD_VAR 0 2
3423: ARRAY
3424: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3425: LD_ADDR_VAR 0 8
3429: PUSH
3430: LD_EXP 7
3434: PUSH
3435: LD_VAR 0 2
3439: ARRAY
3440: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3441: LD_EXP 12
3445: PPUSH
3446: CALL 11462 0 1
3450: IFFALSE 3527
// begin for j in mpOilDeposits [ pos ] do
3452: LD_ADDR_VAR 0 3
3456: PUSH
3457: LD_EXP 12
3461: PUSH
3462: LD_VAR 0 8
3466: ARRAY
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3525
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3471: LD_VAR 0 3
3475: PUSH
3476: LD_INT 1
3478: ARRAY
3479: PPUSH
3480: LD_VAR 0 3
3484: PUSH
3485: LD_INT 2
3487: ARRAY
3488: PPUSH
3489: LD_INT 2
3491: PPUSH
3492: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3496: LD_VAR 0 3
3500: PUSH
3501: LD_INT 1
3503: ARRAY
3504: PPUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_INT 2
3512: ARRAY
3513: PPUSH
3514: LD_VAR 0 7
3518: PPUSH
3519: CALL_OW 441
// end ;
3523: GO 3468
3525: POP
3526: POP
// end ; if Count ( mpSibDeposits ) then
3527: LD_EXP 13
3531: PPUSH
3532: CALL 11462 0 1
3536: IFFALSE 3613
// begin for j in mpSibDeposits [ pos ] do
3538: LD_ADDR_VAR 0 3
3542: PUSH
3543: LD_EXP 13
3547: PUSH
3548: LD_VAR 0 8
3552: ARRAY
3553: PUSH
3554: FOR_IN
3555: IFFALSE 3611
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3557: LD_VAR 0 3
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: LD_VAR 0 3
3570: PUSH
3571: LD_INT 2
3573: ARRAY
3574: PPUSH
3575: LD_INT 3
3577: PPUSH
3578: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3582: LD_VAR 0 3
3586: PUSH
3587: LD_INT 1
3589: ARRAY
3590: PPUSH
3591: LD_VAR 0 3
3595: PUSH
3596: LD_INT 2
3598: ARRAY
3599: PPUSH
3600: LD_VAR 0 7
3604: PPUSH
3605: CALL_OW 441
// end ;
3609: GO 3554
3611: POP
3612: POP
// end ; InitBc ;
3613: CALL_OW 21
// InitUc ;
3617: CALL_OW 18
// uc_side := side ;
3621: LD_ADDR_OWVAR 20
3625: PUSH
3626: LD_VAR 0 7
3630: ST_TO_ADDR
// uc_nation := nation ;
3631: LD_ADDR_OWVAR 21
3635: PUSH
3636: LD_VAR 0 9
3640: ST_TO_ADDR
// if Count ( mpDepots ) then
3641: LD_EXP 14
3645: PPUSH
3646: CALL 11462 0 1
3650: IFFALSE 3828
// begin if GameTypeSurvival then
3652: LD_INT 2
3654: IFFALSE 3674
// begin bc_level := 10 ;
3656: LD_ADDR_OWVAR 43
3660: PUSH
3661: LD_INT 10
3663: ST_TO_ADDR
// bc_type := b_warehouse ;
3664: LD_ADDR_OWVAR 42
3668: PUSH
3669: LD_INT 1
3671: ST_TO_ADDR
// end else
3672: GO 3690
// begin bc_level := 0 ;
3674: LD_ADDR_OWVAR 43
3678: PUSH
3679: LD_INT 0
3681: ST_TO_ADDR
// bc_type := b_depot ;
3682: LD_ADDR_OWVAR 42
3686: PUSH
3687: LD_INT 0
3689: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3690: LD_ADDR_VAR 0 4
3694: PUSH
3695: LD_EXP 14
3699: PUSH
3700: LD_VAR 0 8
3704: ARRAY
3705: PUSH
3706: LD_INT 1
3708: ARRAY
3709: PPUSH
3710: LD_EXP 14
3714: PUSH
3715: LD_VAR 0 8
3719: ARRAY
3720: PUSH
3721: LD_INT 2
3723: ARRAY
3724: PPUSH
3725: LD_EXP 14
3729: PUSH
3730: LD_VAR 0 8
3734: ARRAY
3735: PUSH
3736: LD_INT 3
3738: ARRAY
3739: PPUSH
3740: CALL_OW 47
3744: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_STRING @
3752: PUSH
3753: LD_VAR 0 7
3757: STR
3758: PPUSH
3759: CALL_OW 500
// if Count ( mpStartingResources ) then
3763: LD_EXP 15
3767: PPUSH
3768: CALL 11462 0 1
3772: IFFALSE 3826
// begin for j := 1 to mpStartingResources do
3774: LD_ADDR_VAR 0 3
3778: PUSH
3779: DOUBLE
3780: LD_INT 1
3782: DEC
3783: ST_TO_ADDR
3784: LD_EXP 15
3788: PUSH
3789: FOR_TO
3790: IFFALSE 3824
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3792: LD_VAR 0 4
3796: PPUSH
3797: CALL_OW 274
3801: PPUSH
3802: LD_VAR 0 3
3806: PPUSH
3807: LD_EXP 15
3811: PUSH
3812: LD_VAR 0 3
3816: ARRAY
3817: PPUSH
3818: CALL_OW 277
3822: GO 3789
3824: POP
3825: POP
// end ; end else
3826: GO 3975
// if Count ( mpStartingResources ) then
3828: LD_EXP 15
3832: PPUSH
3833: CALL 11462 0 1
3837: IFFALSE 3975
// begin for j := 1 to mpStartingResources do
3839: LD_ADDR_VAR 0 3
3843: PUSH
3844: DOUBLE
3845: LD_INT 1
3847: DEC
3848: ST_TO_ADDR
3849: LD_EXP 15
3853: PUSH
3854: FOR_TO
3855: IFFALSE 3973
// begin resources := mpStartingResources [ j ] ;
3857: LD_ADDR_VAR 0 13
3861: PUSH
3862: LD_EXP 15
3866: PUSH
3867: LD_VAR 0 3
3871: ARRAY
3872: ST_TO_ADDR
// repeat if resources >= 50 then
3873: LD_VAR 0 13
3877: PUSH
3878: LD_INT 50
3880: GREATEREQUAL
3881: IFFALSE 3927
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
3883: LD_VAR 0 3
3887: PPUSH
3888: LD_INT 5
3890: PPUSH
3891: LD_VAR 0 5
3895: PPUSH
3896: LD_VAR 0 6
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_INT 0
3906: PPUSH
3907: CALL_OW 60
// resources := resources - 50 ;
3911: LD_ADDR_VAR 0 13
3915: PUSH
3916: LD_VAR 0 13
3920: PUSH
3921: LD_INT 50
3923: MINUS
3924: ST_TO_ADDR
// end else
3925: GO 3961
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
3927: LD_VAR 0 3
3931: PPUSH
3932: LD_VAR 0 13
3936: PUSH
3937: LD_INT 10
3939: DIV
3940: PPUSH
3941: LD_VAR 0 5
3945: PPUSH
3946: LD_VAR 0 6
3950: PPUSH
3951: LD_INT 4
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL_OW 60
// until resources <= 0 ;
3961: LD_VAR 0 13
3965: PUSH
3966: LD_INT 0
3968: LESSEQUAL
3969: IFFALSE 3873
// end ;
3971: GO 3854
3973: POP
3974: POP
// end ; if Count ( mpBuildings ) then
3975: LD_EXP 17
3979: PPUSH
3980: CALL 11462 0 1
3984: IFFALSE 4062
// begin for j in mpBuildings [ pos ] do
3986: LD_ADDR_VAR 0 3
3990: PUSH
3991: LD_EXP 17
3995: PUSH
3996: LD_VAR 0 8
4000: ARRAY
4001: PUSH
4002: FOR_IN
4003: IFFALSE 4060
// begin bc_level := 0 ;
4005: LD_ADDR_OWVAR 43
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4013: LD_ADDR_OWVAR 42
4017: PUSH
4018: LD_VAR 0 3
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4027: LD_VAR 0 3
4031: PUSH
4032: LD_INT 2
4034: ARRAY
4035: PPUSH
4036: LD_VAR 0 3
4040: PUSH
4041: LD_INT 3
4043: ARRAY
4044: PPUSH
4045: LD_VAR 0 3
4049: PUSH
4050: LD_INT 4
4052: ARRAY
4053: PPUSH
4054: CALL_OW 47
// end ;
4058: GO 4002
4060: POP
4061: POP
// end ; if mpBattleFlag > - 1 then
4062: LD_EXP 22
4066: PUSH
4067: LD_INT 1
4069: NEG
4070: GREATER
4071: IFFALSE 4230
// begin x := mpStartPos [ pos ] [ 1 ] ;
4073: LD_ADDR_VAR 0 5
4077: PUSH
4078: LD_EXP 21
4082: PUSH
4083: LD_VAR 0 8
4087: ARRAY
4088: PUSH
4089: LD_INT 1
4091: ARRAY
4092: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4093: LD_ADDR_VAR 0 6
4097: PUSH
4098: LD_EXP 21
4102: PUSH
4103: LD_VAR 0 8
4107: ARRAY
4108: PUSH
4109: LD_INT 2
4111: ARRAY
4112: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4113: LD_VAR 0 5
4117: PPUSH
4118: LD_VAR 0 6
4122: PPUSH
4123: LD_INT 12
4125: PPUSH
4126: LD_INT 2
4128: PPUSH
4129: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4133: LD_ADDR_EXP 23
4137: PUSH
4138: LD_EXP 23
4142: PPUSH
4143: LD_VAR 0 7
4147: PPUSH
4148: LD_VAR 0 7
4152: PPUSH
4153: LD_VAR 0 5
4157: PPUSH
4158: LD_VAR 0 6
4162: PPUSH
4163: LD_INT 1
4165: PUSH
4166: LD_INT 100
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 70
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 40
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 10
4195: PUSH
4196: LD_INT 25
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 20
4205: PUSH
4206: LD_INT 100
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL_OW 418
4224: PPUSH
4225: CALL_OW 1
4229: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4230: LD_EXP 26
4234: PUSH
4235: LD_INT 20
4237: PPUSH
4238: LD_VAR 0 7
4242: PPUSH
4243: CALL_OW 321
4247: PUSH
4248: LD_INT 1
4250: EQUAL
4251: AND
4252: IFFALSE 4269
// SetTech ( tech_SibDet , side , state_researched ) ;
4254: LD_INT 20
4256: PPUSH
4257: LD_VAR 0 7
4261: PPUSH
4262: LD_INT 2
4264: PPUSH
4265: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
4269: LD_INT 24
4271: PPUSH
4272: LD_VAR 0 7
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 322
// if mpSibBomb = 1 then
4284: LD_EXP 28
4288: PUSH
4289: LD_INT 1
4291: EQUAL
4292: IFFALSE 4311
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4294: LD_INT 25
4296: PPUSH
4297: LD_VAR 0 7
4301: PPUSH
4302: LD_INT 1
4304: PPUSH
4305: CALL_OW 322
// end else
4309: GO 4326
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4311: LD_INT 25
4313: PPUSH
4314: LD_VAR 0 7
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: CALL_OW 322
// end ; if mpVehicles then
4326: LD_EXP 36
4330: IFFALSE 4429
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4332: LD_ADDR_VAR 0 3
4336: PUSH
4337: LD_VAR 0 7
4341: PPUSH
4342: LD_VAR 0 9
4346: PPUSH
4347: LD_EXP 36
4351: PPUSH
4352: CALL 5543 0 3
4356: PUSH
4357: FOR_IN
4358: IFFALSE 4427
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4360: LD_VAR 0 3
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: LD_INT 5
4370: PPUSH
4371: CALL_OW 12
4375: PPUSH
4376: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4380: LD_VAR 0 3
4384: PPUSH
4385: LD_EXP 21
4389: PUSH
4390: LD_VAR 0 8
4394: ARRAY
4395: PUSH
4396: LD_INT 1
4398: ARRAY
4399: PPUSH
4400: LD_EXP 21
4404: PUSH
4405: LD_VAR 0 8
4409: ARRAY
4410: PUSH
4411: LD_INT 2
4413: ARRAY
4414: PPUSH
4415: LD_INT 12
4417: PPUSH
4418: LD_INT 0
4420: PPUSH
4421: CALL_OW 50
// end ;
4425: GO 4357
4427: POP
4428: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4429: LD_ADDR_VAR 0 11
4433: PUSH
4434: LD_VAR 0 7
4438: PPUSH
4439: LD_VAR 0 9
4443: PPUSH
4444: LD_EXP 24
4448: PPUSH
4449: LD_EXP 25
4453: PPUSH
4454: CALL 5045 0 4
4458: ST_TO_ADDR
// for j in team do
4459: LD_ADDR_VAR 0 3
4463: PUSH
4464: LD_VAR 0 11
4468: PUSH
4469: FOR_IN
4470: IFFALSE 4519
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4472: LD_VAR 0 3
4476: PPUSH
4477: LD_EXP 21
4481: PUSH
4482: LD_VAR 0 8
4486: ARRAY
4487: PUSH
4488: LD_INT 1
4490: ARRAY
4491: PPUSH
4492: LD_EXP 21
4496: PUSH
4497: LD_VAR 0 8
4501: ARRAY
4502: PUSH
4503: LD_INT 2
4505: ARRAY
4506: PPUSH
4507: LD_INT 12
4509: PPUSH
4510: LD_INT 0
4512: PPUSH
4513: CALL_OW 50
4517: GO 4469
4519: POP
4520: POP
// if mpApemans then
4521: LD_EXP 30
4525: IFFALSE 4631
// begin for j := 1 to mpApemans do
4527: LD_ADDR_VAR 0 3
4531: PUSH
4532: DOUBLE
4533: LD_INT 1
4535: DEC
4536: ST_TO_ADDR
4537: LD_EXP 30
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4629
// begin PrepareApeman ( - 5 ) ;
4545: LD_INT 5
4547: NEG
4548: PPUSH
4549: CALL 43319 0 1
// ape := CreateHuman ;
4553: LD_ADDR_VAR 0 10
4557: PUSH
4558: CALL_OW 44
4562: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4563: LD_ADDR_EXP 32
4567: PUSH
4568: LD_EXP 32
4572: PPUSH
4573: LD_VAR 0 8
4577: PPUSH
4578: LD_EXP 32
4582: PUSH
4583: LD_VAR 0 8
4587: ARRAY
4588: PPUSH
4589: LD_VAR 0 10
4593: PPUSH
4594: CALL 47071 0 2
4598: PPUSH
4599: CALL_OW 1
4603: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4604: LD_VAR 0 10
4608: PPUSH
4609: LD_EXP 31
4613: PUSH
4614: LD_VAR 0 8
4618: ARRAY
4619: PPUSH
4620: LD_INT 0
4622: PPUSH
4623: CALL_OW 49
// end ;
4627: GO 4542
4629: POP
4630: POP
// end ; end ;
4631: GO 3381
4633: POP
4634: POP
// if not mpTeamGame then
4635: LD_EXP 11
4639: NOT
4640: IFFALSE 4738
// begin for i := 1 to 8 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 8
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4734
// for j := 1 to 8 do
4658: LD_ADDR_VAR 0 3
4662: PUSH
4663: DOUBLE
4664: LD_INT 1
4666: DEC
4667: ST_TO_ADDR
4668: LD_INT 8
4670: PUSH
4671: FOR_TO
4672: IFFALSE 4730
// if i <> j then
4674: LD_VAR 0 2
4678: PUSH
4679: LD_VAR 0 3
4683: NONEQUAL
4684: IFFALSE 4708
// SetAttitude ( i , j , att_neutral , true ) else
4686: LD_VAR 0 2
4690: PPUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: LD_INT 0
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL_OW 80
4706: GO 4728
// SetAttitude ( i , j , att_friend , true ) ;
4708: LD_VAR 0 2
4712: PPUSH
4713: LD_VAR 0 3
4717: PPUSH
4718: LD_INT 1
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 80
4728: GO 4671
4730: POP
4731: POP
4732: GO 4655
4734: POP
4735: POP
// end else
4736: GO 4913
// begin if mpSharedVision then
4738: LD_EXP 16
4742: IFFALSE 4807
// begin for i in mpTeams do
4744: LD_ADDR_VAR 0 2
4748: PUSH
4749: LD_EXP 10
4753: PUSH
4754: FOR_IN
4755: IFFALSE 4805
// for j := 2 to i do
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: DOUBLE
4763: LD_INT 2
4765: DEC
4766: ST_TO_ADDR
4767: LD_VAR 0 2
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4801
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4775: LD_VAR 0 2
4779: PUSH
4780: LD_VAR 0 3
4784: ARRAY
4785: PPUSH
4786: LD_VAR 0 2
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: CALL_OW 343
4799: GO 4772
4801: POP
4802: POP
4803: GO 4754
4805: POP
4806: POP
// end ; for i := 1 to 8 do
4807: LD_ADDR_VAR 0 2
4811: PUSH
4812: DOUBLE
4813: LD_INT 1
4815: DEC
4816: ST_TO_ADDR
4817: LD_INT 8
4819: PUSH
4820: FOR_TO
4821: IFFALSE 4911
// for j := 1 to 8 do
4823: LD_ADDR_VAR 0 3
4827: PUSH
4828: DOUBLE
4829: LD_INT 1
4831: DEC
4832: ST_TO_ADDR
4833: LD_INT 8
4835: PUSH
4836: FOR_TO
4837: IFFALSE 4907
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4839: LD_EXP 8
4843: PUSH
4844: LD_VAR 0 2
4848: ARRAY
4849: PUSH
4850: LD_EXP 8
4854: PUSH
4855: LD_VAR 0 3
4859: ARRAY
4860: EQUAL
4861: IFFALSE 4885
// SetAttitude ( i , j , att_friend , true ) else
4863: LD_VAR 0 2
4867: PPUSH
4868: LD_VAR 0 3
4872: PPUSH
4873: LD_INT 1
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL_OW 80
4883: GO 4905
// SetAttitude ( i , j , att_enemy , true ) ;
4885: LD_VAR 0 2
4889: PPUSH
4890: LD_VAR 0 3
4894: PPUSH
4895: LD_INT 2
4897: PPUSH
4898: LD_INT 1
4900: PPUSH
4901: CALL_OW 80
4905: GO 4836
4907: POP
4908: POP
4909: GO 4820
4911: POP
4912: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4913: LD_ADDR_OWVAR 71
4917: PUSH
4918: LD_EXP 9
4922: PUSH
4923: LD_OWVAR 2
4927: ARRAY
4928: ST_TO_ADDR
// if IAmSpec then
4929: CALL_OW 531
4933: IFFALSE 4974
// begin FogOff ( true ) ;
4935: LD_INT 1
4937: PPUSH
4938: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4942: LD_EXP 29
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PUSH
4951: LD_INT 2
4953: DIV
4954: PPUSH
4955: LD_EXP 29
4959: PUSH
4960: LD_INT 2
4962: ARRAY
4963: PUSH
4964: LD_INT 2
4966: DIV
4967: PPUSH
4968: CALL_OW 86
// end else
4972: GO 5020
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4974: LD_EXP 21
4978: PUSH
4979: LD_EXP 7
4983: PUSH
4984: LD_OWVAR 2
4988: ARRAY
4989: ARRAY
4990: PUSH
4991: LD_INT 1
4993: ARRAY
4994: PPUSH
4995: LD_EXP 21
4999: PUSH
5000: LD_EXP 7
5004: PUSH
5005: LD_OWVAR 2
5009: ARRAY
5010: ARRAY
5011: PUSH
5012: LD_INT 2
5014: ARRAY
5015: PPUSH
5016: CALL_OW 86
// end ; BeginBuildUp ;
5020: CALL 6021 0 0
// enable ( mpActive ) ;
5024: LD_INT 100
5026: ENABLE_MARKED
// enable ( mpGameType ) ;
5027: LD_EXP 3
5031: ENABLE_MARKED
// mpGameActive := true ;
5032: LD_ADDR_EXP 39
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// end ;
5040: LD_VAR 0 1
5044: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5045: LD_INT 0
5047: PPUSH
5048: PPUSH
5049: PPUSH
5050: PPUSH
// result := [ ] ;
5051: LD_ADDR_VAR 0 5
5055: PUSH
5056: EMPTY
5057: ST_TO_ADDR
// class := class_soldier ;
5058: LD_ADDR_VAR 0 8
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// uc_side := side ;
5066: LD_ADDR_OWVAR 20
5070: PUSH
5071: LD_VAR 0 1
5075: ST_TO_ADDR
// uc_nation := nation ;
5076: LD_ADDR_OWVAR 21
5080: PUSH
5081: LD_VAR 0 2
5085: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5086: LD_ADDR_OWVAR 26
5090: PUSH
5091: LD_OWVAR 19
5095: PUSH
5096: LD_VAR 0 1
5100: ARRAY
5101: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5102: LD_INT 1
5104: PPUSH
5105: LD_INT 2
5107: PPUSH
5108: CALL_OW 12
5112: PPUSH
5113: LD_VAR 0 8
5117: PPUSH
5118: LD_VAR 0 4
5122: PUSH
5123: LD_INT 2
5125: PLUS
5126: PPUSH
5127: CALL_OW 380
// hc_importance := 105 ;
5131: LD_ADDR_OWVAR 32
5135: PUSH
5136: LD_INT 105
5138: ST_TO_ADDR
// if Multiplayer then
5139: LD_OWVAR 4
5143: IFFALSE 5183
// begin hc_gallery := MULTIAVATARS ;
5145: LD_ADDR_OWVAR 33
5149: PUSH
5150: LD_STRING MULTIAVATARS
5152: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5153: LD_ADDR_OWVAR 34
5157: PUSH
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 525
5167: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5168: LD_ADDR_OWVAR 27
5172: PUSH
5173: LD_VAR 0 1
5177: PPUSH
5178: CALL_OW 526
5182: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5183: LD_ADDR_VAR 0 5
5187: PUSH
5188: LD_VAR 0 5
5192: PPUSH
5193: CALL_OW 44
5197: PPUSH
5198: CALL 47071 0 2
5202: ST_TO_ADDR
// if mpTeamPreset then
5203: LD_LOC 1
5207: IFFALSE 5303
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5209: LD_LOC 1
5213: PUSH
5214: LD_INT 1
5216: ARRAY
5217: PPUSH
5218: LD_VAR 0 5
5222: PUSH
5223: LD_VAR 0 5
5227: ARRAY
5228: PPUSH
5229: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5233: LD_VAR 0 5
5237: PUSH
5238: LD_VAR 0 5
5242: ARRAY
5243: PPUSH
5244: LD_INT 1
5246: PPUSH
5247: LD_LOC 1
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: PPUSH
5256: LD_INT 1
5258: PPUSH
5259: CALL_OW 260
5263: PPUSH
5264: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5268: LD_VAR 0 5
5272: PUSH
5273: LD_VAR 0 5
5277: ARRAY
5278: PPUSH
5279: LD_INT 2
5281: PPUSH
5282: LD_LOC 1
5286: PUSH
5287: LD_INT 1
5289: ARRAY
5290: PPUSH
5291: LD_INT 2
5293: PPUSH
5294: CALL_OW 260
5298: PPUSH
5299: CALL_OW 239
// end ; InitHc_All ( ) ;
5303: CALL_OW 584
// class := 2 ;
5307: LD_ADDR_VAR 0 8
5311: PUSH
5312: LD_INT 2
5314: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5315: LD_ADDR_VAR 0 6
5319: PUSH
5320: DOUBLE
5321: LD_INT 1
5323: DEC
5324: ST_TO_ADDR
5325: LD_VAR 0 3
5329: PUSH
5330: LD_INT 1
5332: MINUS
5333: PUSH
5334: FOR_TO
5335: IFFALSE 5519
// begin PrepareHuman ( false , class , skill ) ;
5337: LD_INT 0
5339: PPUSH
5340: LD_VAR 0 8
5344: PPUSH
5345: LD_VAR 0 4
5349: PPUSH
5350: CALL_OW 380
// un := CreateHuman ;
5354: LD_ADDR_VAR 0 7
5358: PUSH
5359: CALL_OW 44
5363: ST_TO_ADDR
// result := Join ( result , un ) ;
5364: LD_ADDR_VAR 0 5
5368: PUSH
5369: LD_VAR 0 5
5373: PPUSH
5374: LD_VAR 0 7
5378: PPUSH
5379: CALL 47071 0 2
5383: ST_TO_ADDR
// if mpTeamPreset then
5384: LD_LOC 1
5388: IFFALSE 5484
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5390: LD_LOC 1
5394: PUSH
5395: LD_VAR 0 6
5399: PUSH
5400: LD_INT 1
5402: PLUS
5403: ARRAY
5404: PPUSH
5405: LD_VAR 0 7
5409: PPUSH
5410: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5414: LD_VAR 0 7
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_LOC 1
5426: PUSH
5427: LD_VAR 0 6
5431: PUSH
5432: LD_INT 1
5434: PLUS
5435: ARRAY
5436: PPUSH
5437: LD_INT 1
5439: PPUSH
5440: CALL_OW 260
5444: PPUSH
5445: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5449: LD_VAR 0 7
5453: PPUSH
5454: LD_INT 2
5456: PPUSH
5457: LD_LOC 1
5461: PUSH
5462: LD_VAR 0 6
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: ARRAY
5471: PPUSH
5472: LD_INT 2
5474: PPUSH
5475: CALL_OW 260
5479: PPUSH
5480: CALL_OW 239
// end ; class := Inc ( class ) ;
5484: LD_ADDR_VAR 0 8
5488: PUSH
5489: LD_VAR 0 8
5493: PPUSH
5494: CALL 48432 0 1
5498: ST_TO_ADDR
// if class = 5 then
5499: LD_VAR 0 8
5503: PUSH
5504: LD_INT 5
5506: EQUAL
5507: IFFALSE 5517
// class := 1 ;
5509: LD_ADDR_VAR 0 8
5513: PUSH
5514: LD_INT 1
5516: ST_TO_ADDR
// end ;
5517: GO 5334
5519: POP
5520: POP
// if not mpTeamPreset then
5521: LD_LOC 1
5525: NOT
5526: IFFALSE 5538
// mpTeamPreset := result ;
5528: LD_ADDR_LOC 1
5532: PUSH
5533: LD_VAR 0 5
5537: ST_TO_ADDR
// end ;
5538: LD_VAR 0 5
5542: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5543: LD_INT 0
5545: PPUSH
5546: PPUSH
// result := [ ] ;
5547: LD_ADDR_VAR 0 4
5551: PUSH
5552: EMPTY
5553: ST_TO_ADDR
// if not vehicles then
5554: LD_VAR 0 3
5558: NOT
5559: IFFALSE 5563
// exit ;
5561: GO 5722
// for i := 1 to vehicles [ nation ] do
5563: LD_ADDR_VAR 0 5
5567: PUSH
5568: DOUBLE
5569: LD_INT 1
5571: DEC
5572: ST_TO_ADDR
5573: LD_VAR 0 3
5577: PUSH
5578: LD_VAR 0 2
5582: ARRAY
5583: PUSH
5584: FOR_TO
5585: IFFALSE 5720
// begin uc_side := side ;
5587: LD_ADDR_OWVAR 20
5591: PUSH
5592: LD_VAR 0 1
5596: ST_TO_ADDR
// uc_nation := nation ;
5597: LD_ADDR_OWVAR 21
5601: PUSH
5602: LD_VAR 0 2
5606: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5607: LD_VAR 0 3
5611: PUSH
5612: LD_VAR 0 2
5616: ARRAY
5617: PUSH
5618: LD_VAR 0 5
5622: ARRAY
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PPUSH
5628: LD_VAR 0 3
5632: PUSH
5633: LD_VAR 0 2
5637: ARRAY
5638: PUSH
5639: LD_VAR 0 5
5643: ARRAY
5644: PUSH
5645: LD_INT 2
5647: ARRAY
5648: PPUSH
5649: LD_VAR 0 3
5653: PUSH
5654: LD_VAR 0 2
5658: ARRAY
5659: PUSH
5660: LD_VAR 0 5
5664: ARRAY
5665: PUSH
5666: LD_INT 3
5668: ARRAY
5669: PPUSH
5670: LD_VAR 0 3
5674: PUSH
5675: LD_VAR 0 2
5679: ARRAY
5680: PUSH
5681: LD_VAR 0 5
5685: ARRAY
5686: PUSH
5687: LD_INT 4
5689: ARRAY
5690: PPUSH
5691: LD_INT 80
5693: PPUSH
5694: CALL 14200 0 5
// result := Join ( result , CreateVehicle ) ;
5698: LD_ADDR_VAR 0 4
5702: PUSH
5703: LD_VAR 0 4
5707: PPUSH
5708: CALL_OW 45
5712: PPUSH
5713: CALL 47071 0 2
5717: ST_TO_ADDR
// end ;
5718: GO 5584
5720: POP
5721: POP
// end ;
5722: LD_VAR 0 4
5726: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5727: LD_INT 0
5729: PPUSH
5730: PPUSH
// for i in mpBattleFlags do
5731: LD_ADDR_VAR 0 3
5735: PUSH
5736: LD_EXP 23
5740: PUSH
5741: FOR_IN
5742: IFFALSE 5819
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5744: LD_VAR 0 3
5748: PPUSH
5749: LD_INT 1
5751: PUSH
5752: LD_VAR 0 1
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: LD_VAR 0 1
5768: PUSH
5769: LD_REAL  7.00000000000000E-0001
5772: MUL
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 3
5780: PUSH
5781: LD_VAR 0 1
5785: PUSH
5786: LD_REAL  4.00000000000000E-0001
5789: MUL
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 20
5797: PUSH
5798: LD_VAR 0 1
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: PPUSH
5813: CALL_OW 423
5817: GO 5741
5819: POP
5820: POP
// end ;
5821: LD_VAR 0 2
5825: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5826: LD_INT 100
5828: IFFALSE 5923
5830: GO 5832
5832: DISABLE
5833: LD_INT 0
5835: PPUSH
5836: PPUSH
// begin if mpBattleFlag <= 0 then
5837: LD_EXP 22
5841: PUSH
5842: LD_INT 0
5844: LESSEQUAL
5845: IFFALSE 5849
// exit ;
5847: GO 5923
// strength := 100 ;
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_INT 100
5856: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5857: LD_EXP 22
5861: PPUSH
5862: CALL_OW 67
// strength := Dec ( strength ) ;
5866: LD_ADDR_VAR 0 2
5870: PUSH
5871: LD_VAR 0 2
5875: PPUSH
5876: CALL 48454 0 1
5880: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5881: LD_VAR 0 2
5885: PPUSH
5886: CALL 5727 0 1
// until not strength ;
5890: LD_VAR 0 2
5894: NOT
5895: IFFALSE 5857
// for i in mpBattleFlags do
5897: LD_ADDR_VAR 0 1
5901: PUSH
5902: LD_EXP 23
5906: PUSH
5907: FOR_IN
5908: IFFALSE 5921
// KillBattleFlag ( i ) ;
5910: LD_VAR 0 1
5914: PPUSH
5915: CALL_OW 419
5919: GO 5907
5921: POP
5922: POP
// end ;
5923: PPOPN 2
5925: END
// every 0 0$1 marked mpActive do var side , tmp ;
5926: GO 5928
5928: DISABLE
5929: LD_INT 0
5931: PPUSH
5932: PPUSH
// begin if mpSibBomb <= 1 then
5933: LD_EXP 28
5937: PUSH
5938: LD_INT 1
5940: LESSEQUAL
5941: IFFALSE 5945
// exit ;
5943: GO 6018
// tmp := mpSibBomb ;
5945: LD_ADDR_VAR 0 2
5949: PUSH
5950: LD_EXP 28
5954: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5955: LD_INT 35
5957: PPUSH
5958: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5962: LD_ADDR_VAR 0 2
5966: PUSH
5967: LD_VAR 0 2
5971: PUSH
5972: LD_INT 35
5974: MINUS
5975: ST_TO_ADDR
// until not tmp ;
5976: LD_VAR 0 2
5980: NOT
5981: IFFALSE 5955
// for side := 1 to 8 do
5983: LD_ADDR_VAR 0 1
5987: PUSH
5988: DOUBLE
5989: LD_INT 1
5991: DEC
5992: ST_TO_ADDR
5993: LD_INT 8
5995: PUSH
5996: FOR_TO
5997: IFFALSE 6016
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5999: LD_INT 25
6001: PPUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_INT 1
6009: PPUSH
6010: CALL_OW 322
6014: GO 5996
6016: POP
6017: POP
// end ;
6018: PPOPN 2
6020: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6021: LD_INT 0
6023: PPUSH
6024: PPUSH
6025: PPUSH
// mpBuildUpTimeDelay := 0 ;
6026: LD_ADDR_EXP 42
6030: PUSH
6031: LD_INT 0
6033: ST_TO_ADDR
// if not mpBuildUpTime then
6034: LD_EXP 20
6038: NOT
6039: IFFALSE 6043
// exit ;
6041: GO 6226
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6043: LD_ADDR_EXP 42
6047: PUSH
6048: LD_INT 8400
6050: PUSH
6051: LD_INT 2100
6053: PUSH
6054: LD_EXP 20
6058: MUL
6059: PLUS
6060: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6061: LD_ADDR_EXP 43
6065: PUSH
6066: LD_INT 1
6068: ST_TO_ADDR
// for i := 1 to 8 do
6069: LD_ADDR_VAR 0 2
6073: PUSH
6074: DOUBLE
6075: LD_INT 1
6077: DEC
6078: ST_TO_ADDR
6079: LD_INT 8
6081: PUSH
6082: FOR_TO
6083: IFFALSE 6224
// if mpSidePositions [ i ] then
6085: LD_EXP 7
6089: PUSH
6090: LD_VAR 0 2
6094: ARRAY
6095: IFFALSE 6222
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6097: LD_EXP 19
6101: PUSH
6102: LD_EXP 7
6106: PUSH
6107: LD_VAR 0 2
6111: ARRAY
6112: ARRAY
6113: PPUSH
6114: LD_INT 5
6116: PPUSH
6117: CALL_OW 424
// for j := 1 to 8 do
6121: LD_ADDR_VAR 0 3
6125: PUSH
6126: DOUBLE
6127: LD_INT 1
6129: DEC
6130: ST_TO_ADDR
6131: LD_INT 8
6133: PUSH
6134: FOR_TO
6135: IFFALSE 6220
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6137: LD_EXP 7
6141: PUSH
6142: LD_VAR 0 3
6146: ARRAY
6147: PUSH
6148: LD_EXP 8
6152: PUSH
6153: LD_VAR 0 2
6157: ARRAY
6158: PUSH
6159: LD_EXP 8
6163: PUSH
6164: LD_VAR 0 3
6168: ARRAY
6169: NONEQUAL
6170: PUSH
6171: LD_EXP 11
6175: NOT
6176: PUSH
6177: LD_VAR 0 2
6181: PUSH
6182: LD_VAR 0 3
6186: NONEQUAL
6187: AND
6188: OR
6189: AND
6190: IFFALSE 6218
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6192: LD_VAR 0 3
6196: PPUSH
6197: LD_EXP 19
6201: PUSH
6202: LD_EXP 7
6206: PUSH
6207: LD_VAR 0 2
6211: ARRAY
6212: ARRAY
6213: PPUSH
6214: CALL_OW 333
6218: GO 6134
6220: POP
6221: POP
// end ;
6222: GO 6082
6224: POP
6225: POP
// end ;
6226: LD_VAR 0 1
6230: RET
// function EndBuildUp ; var i , j ; begin
6231: LD_INT 0
6233: PPUSH
6234: PPUSH
6235: PPUSH
// mpBuildUpTimeActive := false ;
6236: LD_ADDR_EXP 43
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// for i := 1 to 8 do
6244: LD_ADDR_VAR 0 2
6248: PUSH
6249: DOUBLE
6250: LD_INT 1
6252: DEC
6253: ST_TO_ADDR
6254: LD_INT 8
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6399
// if mpSidePositions [ i ] then
6260: LD_EXP 7
6264: PUSH
6265: LD_VAR 0 2
6269: ARRAY
6270: IFFALSE 6397
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6272: LD_EXP 19
6276: PUSH
6277: LD_EXP 7
6281: PUSH
6282: LD_VAR 0 2
6286: ARRAY
6287: ARRAY
6288: PPUSH
6289: LD_INT 0
6291: PPUSH
6292: CALL_OW 424
// for j := 1 to 8 do
6296: LD_ADDR_VAR 0 3
6300: PUSH
6301: DOUBLE
6302: LD_INT 1
6304: DEC
6305: ST_TO_ADDR
6306: LD_INT 8
6308: PUSH
6309: FOR_TO
6310: IFFALSE 6395
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6312: LD_EXP 7
6316: PUSH
6317: LD_VAR 0 3
6321: ARRAY
6322: PUSH
6323: LD_EXP 8
6327: PUSH
6328: LD_VAR 0 2
6332: ARRAY
6333: PUSH
6334: LD_EXP 8
6338: PUSH
6339: LD_VAR 0 3
6343: ARRAY
6344: NONEQUAL
6345: PUSH
6346: LD_EXP 11
6350: NOT
6351: PUSH
6352: LD_VAR 0 2
6356: PUSH
6357: LD_VAR 0 3
6361: NONEQUAL
6362: AND
6363: OR
6364: AND
6365: IFFALSE 6393
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6367: LD_VAR 0 3
6371: PPUSH
6372: LD_EXP 19
6376: PUSH
6377: LD_EXP 7
6381: PUSH
6382: LD_VAR 0 2
6386: ARRAY
6387: ARRAY
6388: PPUSH
6389: CALL_OW 334
6393: GO 6309
6395: POP
6396: POP
// end ;
6397: GO 6257
6399: POP
6400: POP
// end ;
6401: LD_VAR 0 1
6405: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6406: LD_EXP 43
6410: IFFALSE 6585
6412: GO 6414
6414: DISABLE
6415: LD_INT 0
6417: PPUSH
6418: PPUSH
// begin for i := 1 to 8 do
6419: LD_ADDR_VAR 0 1
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_INT 8
6431: PUSH
6432: FOR_TO
6433: IFFALSE 6582
// if mpSidePositions [ i ] then
6435: LD_EXP 7
6439: PUSH
6440: LD_VAR 0 1
6444: ARRAY
6445: IFFALSE 6580
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6447: LD_ADDR_VAR 0 2
6451: PUSH
6452: LD_EXP 19
6456: PUSH
6457: LD_EXP 7
6461: PUSH
6462: LD_VAR 0 1
6466: ARRAY
6467: ARRAY
6468: PPUSH
6469: LD_INT 2
6471: PUSH
6472: LD_INT 21
6474: PUSH
6475: LD_INT 1
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 2
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 22
6499: PUSH
6500: LD_OWVAR 2
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PPUSH
6513: CALL_OW 70
6517: PUSH
6518: FOR_IN
6519: IFFALSE 6578
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6521: LD_EXP 8
6525: PUSH
6526: LD_VAR 0 1
6530: ARRAY
6531: PUSH
6532: LD_EXP 8
6536: PUSH
6537: LD_OWVAR 2
6541: ARRAY
6542: NONEQUAL
6543: PUSH
6544: LD_EXP 11
6548: NOT
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: LD_OWVAR 2
6559: NONEQUAL
6560: AND
6561: OR
6562: IFFALSE 6576
// ComMoveToArea ( un , BuildUpEscape ) ;
6564: LD_VAR 0 2
6568: PPUSH
6569: LD_INT 13
6571: PPUSH
6572: CALL_OW 113
6576: GO 6518
6578: POP
6579: POP
6580: GO 6432
6582: POP
6583: POP
// enable ;
6584: ENABLE
// end ;
6585: PPOPN 2
6587: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6588: LD_EXP 20
6592: IFFALSE 6642
6594: GO 6596
6596: DISABLE
6597: LD_INT 0
6599: PPUSH
// begin tmp := mpBuildUpTime ;
6600: LD_ADDR_VAR 0 1
6604: PUSH
6605: LD_EXP 20
6609: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6610: LD_INT 35
6612: PPUSH
6613: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6617: LD_ADDR_VAR 0 1
6621: PUSH
6622: LD_VAR 0 1
6626: PUSH
6627: LD_INT 35
6629: MINUS
6630: ST_TO_ADDR
// until not tmp ;
6631: LD_VAR 0 1
6635: NOT
6636: IFFALSE 6610
// EndBuildUp ;
6638: CALL 6231 0 0
// end ;
6642: PPOPN 1
6644: END
// every 0 0$1 trigger mpActive marked mpWin do
6645: LD_INT 100
6647: IFFALSE 6681
6649: GO 6651
6651: DISABLE
// begin if IAmServer then
6652: CALL_OW 518
6656: IFFALSE 6665
// wait ( 0 0$3 ) ;
6658: LD_INT 105
6660: PPUSH
6661: CALL_OW 67
// if Multiplayer then
6665: LD_OWVAR 4
6669: IFFALSE 6677
// YouWinInMultiplayer else
6671: CALL_OW 106
6675: GO 6681
// YouWin ;
6677: CALL_OW 103
// end ;
6681: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6682: LD_INT 0
6684: PPUSH
// result := false ;
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: LD_INT 0
6692: ST_TO_ADDR
// case gameType of GameTypeNormal :
6693: LD_VAR 0 1
6697: PUSH
6698: LD_INT 1
6700: DOUBLE
6701: EQUAL
6702: IFTRUE 6706
6704: GO 6779
6706: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6707: LD_ADDR_VAR 0 3
6711: PUSH
6712: LD_INT 22
6714: PUSH
6715: LD_VAR 0 2
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: LD_INT 2
6726: PUSH
6727: LD_INT 21
6729: PUSH
6730: LD_INT 1
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 33
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 33
6749: PUSH
6750: LD_INT 5
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PPUSH
6767: CALL_OW 69
6771: PPUSH
6772: CALL 11462 0 1
6776: ST_TO_ADDR
// end ; GameTypeSurvival :
6777: GO 7014
6779: LD_INT 2
6781: DOUBLE
6782: EQUAL
6783: IFTRUE 6787
6785: GO 6915
6787: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6788: LD_ADDR_VAR 0 3
6792: PUSH
6793: LD_INT 22
6795: PUSH
6796: LD_VAR 0 2
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 2
6807: PUSH
6808: LD_INT 30
6810: PUSH
6811: LD_INT 0
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: LD_INT 30
6820: PUSH
6821: LD_INT 1
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: PPUSH
6842: CALL 11462 0 1
6846: PUSH
6847: LD_INT 22
6849: PUSH
6850: LD_VAR 0 2
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 2
6861: PUSH
6862: LD_INT 21
6864: PUSH
6865: LD_INT 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 33
6874: PUSH
6875: LD_INT 3
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 33
6884: PUSH
6885: LD_INT 5
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 69
6906: PPUSH
6907: CALL 11462 0 1
6911: AND
6912: ST_TO_ADDR
// end ; GameTypeKing :
6913: GO 7014
6915: LD_INT 3
6917: DOUBLE
6918: EQUAL
6919: IFTRUE 6923
6921: GO 7013
6923: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6924: LD_ADDR_VAR 0 3
6928: PUSH
6929: LD_INT 22
6931: PUSH
6932: LD_VAR 0 2
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 2
6943: PUSH
6944: LD_INT 21
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 33
6956: PUSH
6957: LD_INT 3
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 33
6966: PUSH
6967: LD_INT 5
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PPUSH
6984: CALL_OW 69
6988: PPUSH
6989: CALL 11462 0 1
6993: PUSH
6994: LD_VAR 0 2
6998: PPUSH
6999: CALL 58677 0 1
7003: PUSH
7004: LD_EXP 35
7008: LESS
7009: AND
7010: ST_TO_ADDR
// end ; end ;
7011: GO 7014
7013: POP
// end ;
7014: LD_VAR 0 3
7018: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7019: LD_INT 100
7021: IFFALSE 7243
7023: GO 7025
7025: DISABLE
7026: LD_INT 0
7028: PPUSH
7029: PPUSH
// begin if Multiplayer then
7030: LD_OWVAR 4
7034: IFFALSE 7042
// SetPlayerSpectator ( ) else
7036: CALL_OW 572
7040: GO 7051
// FogOff ( your_side ) ;
7042: LD_OWVAR 2
7046: PPUSH
7047: CALL_OW 344
// repeat gameIsOn := false ;
7051: LD_ADDR_VAR 0 1
7055: PUSH
7056: LD_INT 0
7058: ST_TO_ADDR
// for i := 1 to 8 do
7059: LD_ADDR_VAR 0 2
7063: PUSH
7064: DOUBLE
7065: LD_INT 1
7067: DEC
7068: ST_TO_ADDR
7069: LD_INT 8
7071: PUSH
7072: FOR_TO
7073: IFFALSE 7195
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7075: LD_EXP 7
7079: PUSH
7080: LD_VAR 0 2
7084: ARRAY
7085: PUSH
7086: LD_VAR 0 2
7090: PPUSH
7091: CALL_OW 108
7095: AND
7096: PUSH
7097: LD_VAR 0 2
7101: PUSH
7102: LD_OWVAR 2
7106: NONEQUAL
7107: AND
7108: IFFALSE 7193
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7110: LD_EXP 8
7114: PUSH
7115: LD_VAR 0 2
7119: ARRAY
7120: NOT
7121: PUSH
7122: LD_EXP 8
7126: PUSH
7127: LD_VAR 0 2
7131: ARRAY
7132: PUSH
7133: LD_EXP 8
7137: PUSH
7138: LD_OWVAR 2
7142: ARRAY
7143: NONEQUAL
7144: PUSH
7145: LD_OWVAR 2
7149: PPUSH
7150: LD_VAR 0 2
7154: PPUSH
7155: CALL_OW 81
7159: PUSH
7160: LD_INT 1
7162: NONEQUAL
7163: AND
7164: OR
7165: IFFALSE 7193
// if HasPowerByGameType ( mpGameType , i ) then
7167: LD_EXP 3
7171: PPUSH
7172: LD_VAR 0 2
7176: PPUSH
7177: CALL 6682 0 2
7181: IFFALSE 7193
// begin gameIsOn := true ;
7183: LD_ADDR_VAR 0 1
7187: PUSH
7188: LD_INT 1
7190: ST_TO_ADDR
// break ;
7191: GO 7195
// end ;
7193: GO 7072
7195: POP
7196: POP
// wait ( 100 ) ;
7197: LD_INT 100
7199: PPUSH
7200: CALL_OW 67
// until not gameIsOn ;
7204: LD_VAR 0 1
7208: NOT
7209: IFFALSE 7051
// if IAmServer then
7211: CALL_OW 518
7215: IFFALSE 7224
// wait ( 0 0$3 ) ;
7217: LD_INT 105
7219: PPUSH
7220: CALL_OW 67
// if Multiplayer then
7224: LD_OWVAR 4
7228: IFFALSE 7236
// YouLostInMultiplayer else
7230: CALL_OW 107
7234: GO 7243
// YouLost (  ) ;
7236: LD_STRING 
7238: PPUSH
7239: CALL_OW 104
// end ;
7243: PPOPN 2
7245: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7246: LD_EXP 33
7250: IFFALSE 7626
7252: GO 7254
7254: DISABLE
7255: LD_INT 0
7257: PPUSH
7258: PPUSH
7259: PPUSH
7260: PPUSH
7261: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7262: LD_ADDR_VAR 0 5
7266: PUSH
7267: LD_INT 1
7269: PUSH
7270: LD_INT 2
7272: PUSH
7273: LD_INT 3
7275: PUSH
7276: LD_INT 4
7278: PUSH
7279: LD_INT 5
7281: PUSH
7282: LD_INT 6
7284: PUSH
7285: LD_INT 7
7287: PUSH
7288: LD_INT 8
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7301: LD_INT 350
7303: PPUSH
7304: CALL_OW 67
// for i := 1 to 8 do
7308: LD_ADDR_VAR 0 1
7312: PUSH
7313: DOUBLE
7314: LD_INT 1
7316: DEC
7317: ST_TO_ADDR
7318: LD_INT 8
7320: PUSH
7321: FOR_TO
7322: IFFALSE 7596
// begin j := sides [ i ] ;
7324: LD_ADDR_VAR 0 2
7328: PUSH
7329: LD_VAR 0 5
7333: PUSH
7334: LD_VAR 0 1
7338: ARRAY
7339: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7340: LD_EXP 40
7344: PUSH
7345: LD_VAR 0 2
7349: ARRAY
7350: PPUSH
7351: CALL 11462 0 1
7355: PUSH
7356: LD_VAR 0 2
7360: PPUSH
7361: CALL_OW 108
7365: AND
7366: PUSH
7367: LD_EXP 3
7371: PPUSH
7372: LD_VAR 0 2
7376: PPUSH
7377: CALL 6682 0 2
7381: AND
7382: IFFALSE 7594
// begin wait ( mpRespawn div 3 ) ;
7384: LD_EXP 33
7388: PUSH
7389: LD_INT 3
7391: DIV
7392: PPUSH
7393: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7397: LD_ADDR_VAR 0 3
7401: PUSH
7402: LD_INT 22
7404: PUSH
7405: LD_VAR 0 2
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 50
7416: PUSH
7417: EMPTY
7418: LIST
7419: PUSH
7420: LD_INT 2
7422: PUSH
7423: LD_INT 30
7425: PUSH
7426: LD_INT 0
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 30
7435: PUSH
7436: LD_INT 1
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: PPUSH
7453: CALL_OW 69
7457: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7458: LD_VAR 0 3
7462: NOT
7463: PUSH
7464: LD_VAR 0 2
7468: PPUSH
7469: CALL_OW 108
7473: NOT
7474: OR
7475: PUSH
7476: LD_EXP 3
7480: PPUSH
7481: LD_VAR 0 2
7485: PPUSH
7486: CALL 6682 0 2
7490: NOT
7491: OR
7492: IFFALSE 7496
// continue ;
7494: GO 7321
// spawn := tmp [ 1 ] ;
7496: LD_ADDR_VAR 0 4
7500: PUSH
7501: LD_VAR 0 3
7505: PUSH
7506: LD_INT 1
7508: ARRAY
7509: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7510: LD_EXP 40
7514: PUSH
7515: LD_VAR 0 2
7519: ARRAY
7520: PUSH
7521: LD_INT 1
7523: ARRAY
7524: PPUSH
7525: LD_VAR 0 4
7529: PPUSH
7530: CALL_OW 250
7534: PPUSH
7535: LD_VAR 0 4
7539: PPUSH
7540: CALL_OW 251
7544: PPUSH
7545: LD_INT 32
7547: PPUSH
7548: LD_INT 1
7550: PPUSH
7551: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7555: LD_ADDR_EXP 40
7559: PUSH
7560: LD_EXP 40
7564: PPUSH
7565: LD_VAR 0 2
7569: PPUSH
7570: LD_EXP 40
7574: PUSH
7575: LD_VAR 0 2
7579: ARRAY
7580: PPUSH
7581: LD_INT 1
7583: PPUSH
7584: CALL_OW 3
7588: PPUSH
7589: CALL_OW 1
7593: ST_TO_ADDR
// end ; end ;
7594: GO 7321
7596: POP
7597: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7598: LD_ADDR_VAR 0 5
7602: PUSH
7603: LD_VAR 0 5
7607: PPUSH
7608: LD_INT 1
7610: PPUSH
7611: LD_INT 8
7613: PPUSH
7614: LD_INT 1
7616: PPUSH
7617: CALL 13740 0 4
7621: ST_TO_ADDR
// until false ;
7622: LD_INT 0
7624: IFFALSE 7301
// end ;
7626: PPOPN 5
7628: END
// every 0 0$1 marked mpActive do
7629: GO 7631
7631: DISABLE
// begin enable ;
7632: ENABLE
// if not mpDisplayStrings then
7633: LD_EXP 38
7637: NOT
7638: IFFALSE 7649
// begin display_strings := [ ] ;
7640: LD_ADDR_OWVAR 47
7644: PUSH
7645: EMPTY
7646: ST_TO_ADDR
// exit ;
7647: GO 7659
// end ; display_strings := mpDisplayStrings ;
7649: LD_ADDR_OWVAR 47
7653: PUSH
7654: LD_EXP 38
7658: ST_TO_ADDR
// end ; end_of_file
7659: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7660: LD_INT 0
7662: PPUSH
7663: PPUSH
7664: PPUSH
7665: PPUSH
7666: PPUSH
7667: PPUSH
7668: PPUSH
7669: PPUSH
7670: PPUSH
// if GetType ( un ) = unit_vehicle then
7671: LD_VAR 0 1
7675: PPUSH
7676: CALL_OW 247
7680: PUSH
7681: LD_INT 2
7683: EQUAL
7684: IFFALSE 7688
// exit ;
7686: GO 8320
// side := GetSide ( un ) ;
7688: LD_ADDR_VAR 0 9
7692: PUSH
7693: LD_VAR 0 1
7697: PPUSH
7698: CALL_OW 255
7702: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7703: LD_EXP 3
7707: PUSH
7708: LD_INT 2
7710: EQUAL
7711: IFFALSE 7787
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 266
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: LD_INT 1
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: IN
7733: IFFALSE 7787
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7735: LD_ADDR_VAR 0 3
7739: PUSH
7740: LD_INT 22
7742: PUSH
7743: LD_VAR 0 9
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: LD_INT 21
7754: PUSH
7755: LD_INT 1
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: PUSH
7771: FOR_IN
7772: IFFALSE 7785
// KillUnit ( i ) ;
7774: LD_VAR 0 3
7778: PPUSH
7779: CALL_OW 66
7783: GO 7771
7785: POP
7786: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7787: LD_VAR 0 1
7791: PPUSH
7792: CALL_OW 257
7796: PUSH
7797: LD_INT 12
7799: PUSH
7800: LD_INT 17
7802: PUSH
7803: LD_INT 15
7805: PUSH
7806: LD_INT 16
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: IN
7815: PUSH
7816: LD_VAR 0 1
7820: PPUSH
7821: CALL_OW 263
7825: PUSH
7826: LD_INT 5
7828: EQUAL
7829: OR
7830: IFFALSE 8049
// begin tag := 0 ;
7832: LD_ADDR_VAR 0 5
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// for i := 1 to 8 do
7840: LD_ADDR_VAR 0 3
7844: PUSH
7845: DOUBLE
7846: LD_INT 1
7848: DEC
7849: ST_TO_ADDR
7850: LD_INT 8
7852: PUSH
7853: FOR_TO
7854: IFFALSE 7888
// if un in mpApePosIndex [ i ] then
7856: LD_VAR 0 1
7860: PUSH
7861: LD_EXP 32
7865: PUSH
7866: LD_VAR 0 3
7870: ARRAY
7871: IN
7872: IFFALSE 7886
// begin tag := i ;
7874: LD_ADDR_VAR 0 5
7878: PUSH
7879: LD_VAR 0 3
7883: ST_TO_ADDR
// break ;
7884: GO 7888
// end ;
7886: GO 7853
7888: POP
7889: POP
// if not tag then
7890: LD_VAR 0 5
7894: NOT
7895: IFFALSE 7899
// exit ;
7897: GO 8320
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7899: LD_ADDR_VAR 0 7
7903: PUSH
7904: LD_EXP 31
7908: PUSH
7909: LD_EXP 7
7913: PUSH
7914: LD_VAR 0 5
7918: ARRAY
7919: ARRAY
7920: ST_TO_ADDR
// if not area then
7921: LD_VAR 0 7
7925: NOT
7926: IFFALSE 7930
// exit ;
7928: GO 8320
// wait ( 4 4$00 ) ;
7930: LD_INT 8400
7932: PPUSH
7933: CALL_OW 67
// repeat wait ( 10 ) ;
7937: LD_INT 10
7939: PPUSH
7940: CALL_OW 67
// until not mpBlockRespThread ;
7944: LD_EXP 41
7948: NOT
7949: IFFALSE 7937
// mpBlockRespThread := true ;
7951: LD_ADDR_EXP 41
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7959: LD_INT 0
7961: PPUSH
7962: CALL 43319 0 1
// ape := CreateHuman ;
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: CALL_OW 44
7975: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
7976: LD_ADDR_EXP 32
7980: PUSH
7981: LD_EXP 32
7985: PPUSH
7986: LD_VAR 0 5
7990: PPUSH
7991: LD_EXP 32
7995: PUSH
7996: LD_VAR 0 5
8000: ARRAY
8001: PPUSH
8002: LD_VAR 0 4
8006: PPUSH
8007: CALL 47071 0 2
8011: PPUSH
8012: CALL_OW 1
8016: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8017: LD_VAR 0 4
8021: PPUSH
8022: LD_VAR 0 7
8026: PPUSH
8027: LD_INT 0
8029: PPUSH
8030: CALL_OW 49
// wait ( 10 ) ;
8034: LD_INT 10
8036: PPUSH
8037: CALL_OW 67
// mpBlockRespThread := false ;
8041: LD_ADDR_EXP 41
8045: PUSH
8046: LD_INT 0
8048: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 247
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: CALL_OW 248
8072: PUSH
8073: LD_INT 0
8075: GREATER
8076: AND
8077: IFFALSE 8320
// begin if not mpRespawn then
8079: LD_EXP 33
8083: NOT
8084: IFFALSE 8088
// exit ;
8086: GO 8320
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8088: LD_VAR 0 9
8092: PPUSH
8093: CALL_OW 108
8097: NOT
8098: PUSH
8099: LD_EXP 3
8103: PPUSH
8104: LD_VAR 0 9
8108: PPUSH
8109: CALL 6682 0 2
8113: NOT
8114: AND
8115: IFFALSE 8119
// exit ;
8117: GO 8320
// side := GetSide ( un ) ;
8119: LD_ADDR_VAR 0 9
8123: PUSH
8124: LD_VAR 0 1
8128: PPUSH
8129: CALL_OW 255
8133: ST_TO_ADDR
// nation := GetNation ( un ) ;
8134: LD_ADDR_VAR 0 8
8138: PUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 248
8148: ST_TO_ADDR
// class := GetClass ( un ) ;
8149: LD_ADDR_VAR 0 6
8153: PUSH
8154: LD_VAR 0 1
8158: PPUSH
8159: CALL_OW 257
8163: ST_TO_ADDR
// if class > 4 then
8164: LD_VAR 0 6
8168: PUSH
8169: LD_INT 4
8171: GREATER
8172: IFFALSE 8182
// class := 1 ;
8174: LD_ADDR_VAR 0 6
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// repeat wait ( 10 ) ;
8182: LD_INT 10
8184: PPUSH
8185: CALL_OW 67
// until not mpBlockRespThread ;
8189: LD_EXP 41
8193: NOT
8194: IFFALSE 8182
// mpBlockRespThread := true ;
8196: LD_ADDR_EXP 41
8200: PUSH
8201: LD_INT 1
8203: ST_TO_ADDR
// uc_side := side ;
8204: LD_ADDR_OWVAR 20
8208: PUSH
8209: LD_VAR 0 9
8213: ST_TO_ADDR
// uc_nation := nation ;
8214: LD_ADDR_OWVAR 21
8218: PUSH
8219: LD_VAR 0 8
8223: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8224: LD_INT 0
8226: PPUSH
8227: LD_VAR 0 6
8231: PPUSH
8232: LD_INT 2
8234: PPUSH
8235: CALL_OW 380
// un := CreateHuman ;
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: CALL_OW 44
8248: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8249: LD_ADDR_EXP 40
8253: PUSH
8254: LD_EXP 40
8258: PPUSH
8259: LD_VAR 0 9
8263: PPUSH
8264: LD_EXP 40
8268: PUSH
8269: LD_VAR 0 9
8273: ARRAY
8274: PPUSH
8275: LD_EXP 40
8279: PUSH
8280: LD_VAR 0 9
8284: ARRAY
8285: PUSH
8286: LD_INT 1
8288: PLUS
8289: PPUSH
8290: LD_VAR 0 1
8294: PPUSH
8295: CALL_OW 1
8299: PPUSH
8300: CALL_OW 1
8304: ST_TO_ADDR
// wait ( 10 ) ;
8305: LD_INT 10
8307: PPUSH
8308: CALL_OW 67
// mpBlockRespThread := false ;
8312: LD_ADDR_EXP 41
8316: PUSH
8317: LD_INT 0
8319: ST_TO_ADDR
// end ; end ;
8320: LD_VAR 0 2
8324: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8325: LD_INT 0
8327: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8328: LD_VAR 0 1
8332: PPUSH
8333: CALL_OW 266
8337: PUSH
8338: LD_INT 0
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: IN
8348: IFFALSE 8373
// SetBName ( building , @ & GetSide ( building ) ) ;
8350: LD_VAR 0 1
8354: PPUSH
8355: LD_STRING @
8357: PUSH
8358: LD_VAR 0 1
8362: PPUSH
8363: CALL_OW 255
8367: STR
8368: PPUSH
8369: CALL_OW 500
// end ;
8373: LD_VAR 0 2
8377: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8378: LD_INT 0
8380: PPUSH
8381: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8382: LD_EXP 3
8386: PUSH
8387: LD_INT 2
8389: EQUAL
8390: PUSH
8391: LD_VAR 0 1
8395: PPUSH
8396: CALL_OW 266
8400: PUSH
8401: LD_INT 0
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: IN
8411: AND
8412: IFFALSE 8477
// begin KillUnit ( building ) ;
8414: LD_VAR 0 1
8418: PPUSH
8419: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8423: LD_ADDR_VAR 0 5
8427: PUSH
8428: LD_INT 22
8430: PUSH
8431: LD_VAR 0 2
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: LD_INT 21
8442: PUSH
8443: LD_INT 1
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL_OW 69
8458: PUSH
8459: FOR_IN
8460: IFFALSE 8473
// KillUnit ( i ) ;
8462: LD_VAR 0 5
8466: PPUSH
8467: CALL_OW 66
8471: GO 8459
8473: POP
8474: POP
// exit ;
8475: GO 8522
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 266
8486: PUSH
8487: LD_INT 0
8489: PUSH
8490: LD_INT 1
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: IN
8497: IFFALSE 8522
// SetBName ( building , @ & GetSide ( building ) ) ;
8499: LD_VAR 0 1
8503: PPUSH
8504: LD_STRING @
8506: PUSH
8507: LD_VAR 0 1
8511: PPUSH
8512: CALL_OW 255
8516: STR
8517: PPUSH
8518: CALL_OW 500
// end ; end_of_file
8522: LD_VAR 0 4
8526: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8527: LD_EXP 39
8531: PUSH
8532: CALL 8737 0 0
8536: AND
8537: PUSH
8538: LD_OWVAR 4
8542: AND
8543: IFFALSE 8734
8545: GO 8547
8547: DISABLE
8548: LD_INT 0
8550: PPUSH
8551: PPUSH
// begin canWin := false ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// if not HasPower ( your_side ) then
8560: LD_OWVAR 2
8564: PPUSH
8565: CALL 8777 0 1
8569: NOT
8570: IFFALSE 8581
// begin Multiplayer_Loose_Message ;
8572: CALL_OW 521
// enable ( mpLose ) ;
8576: LD_INT 102
8578: ENABLE_MARKED
// end else
8579: GO 8734
// begin canWin := true ;
8581: LD_ADDR_VAR 0 2
8585: PUSH
8586: LD_INT 1
8588: ST_TO_ADDR
// for i := 1 to 8 do
8589: LD_ADDR_VAR 0 1
8593: PUSH
8594: DOUBLE
8595: LD_INT 1
8597: DEC
8598: ST_TO_ADDR
8599: LD_INT 8
8601: PUSH
8602: FOR_TO
8603: IFFALSE 8720
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8605: LD_EXP 7
8609: PUSH
8610: LD_VAR 0 1
8614: ARRAY
8615: PUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: CALL_OW 108
8625: AND
8626: PUSH
8627: LD_VAR 0 1
8631: PUSH
8632: LD_OWVAR 2
8636: NONEQUAL
8637: AND
8638: IFFALSE 8718
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8640: LD_EXP 8
8644: PUSH
8645: LD_VAR 0 1
8649: ARRAY
8650: NOT
8651: PUSH
8652: LD_EXP 8
8656: PUSH
8657: LD_VAR 0 1
8661: ARRAY
8662: PUSH
8663: LD_EXP 8
8667: PUSH
8668: LD_OWVAR 2
8672: ARRAY
8673: NONEQUAL
8674: PUSH
8675: LD_OWVAR 2
8679: PPUSH
8680: LD_VAR 0 1
8684: PPUSH
8685: CALL_OW 81
8689: PUSH
8690: LD_INT 1
8692: NONEQUAL
8693: AND
8694: OR
8695: IFFALSE 8718
// if HasPower ( i ) then
8697: LD_VAR 0 1
8701: PPUSH
8702: CALL 8777 0 1
8706: IFFALSE 8718
// begin canWin := false ;
8708: LD_ADDR_VAR 0 2
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// break ;
8716: GO 8720
// end ;
8718: GO 8602
8720: POP
8721: POP
// if canWin then
8722: LD_VAR 0 2
8726: IFFALSE 8733
// enable ( mpWin ) else
8728: LD_INT 101
8730: ENABLE_MARKED
8731: GO 8734
// enable ;
8733: ENABLE
// end ; end ;
8734: PPOPN 2
8736: END
// function CanWinLoose ; begin
8737: LD_INT 0
8739: PPUSH
// result := true ;
8740: LD_ADDR_VAR 0 1
8744: PUSH
8745: LD_INT 1
8747: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8748: CALL_OW 531
8752: PUSH
8753: CALL_OW 519
8757: PUSH
8758: LD_INT 1
8760: GREATER
8761: AND
8762: IFFALSE 8772
// result := false ;
8764: LD_ADDR_VAR 0 1
8768: PUSH
8769: LD_INT 0
8771: ST_TO_ADDR
// end ;
8772: LD_VAR 0 1
8776: RET
// function HasPower ( i ) ; begin
8777: LD_INT 0
8779: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8780: LD_ADDR_VAR 0 2
8784: PUSH
8785: LD_INT 22
8787: PUSH
8788: LD_VAR 0 1
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: LD_INT 2
8799: PUSH
8800: LD_INT 21
8802: PUSH
8803: LD_INT 1
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: LD_INT 33
8812: PUSH
8813: LD_INT 3
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 33
8822: PUSH
8823: LD_INT 5
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PPUSH
8840: CALL_OW 69
8844: ST_TO_ADDR
// end ; end_of_file
8845: LD_VAR 0 2
8849: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
8850: LD_EXP 39
8854: IFFALSE 8897
8856: GO 8858
8858: DISABLE
8859: LD_INT 0
8861: PPUSH
// begin for i := 1 to 8 do
8862: LD_ADDR_VAR 0 1
8866: PUSH
8867: DOUBLE
8868: LD_INT 1
8870: DEC
8871: ST_TO_ADDR
8872: LD_INT 8
8874: PUSH
8875: FOR_TO
8876: IFFALSE 8895
// SetRestrict ( b_depot , i , state_disabled ) ;
8878: LD_INT 0
8880: PPUSH
8881: LD_VAR 0 1
8885: PPUSH
8886: LD_INT 0
8888: PPUSH
8889: CALL_OW 324
8893: GO 8875
8895: POP
8896: POP
// end ;
8897: PPOPN 1
8899: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
8900: LD_EXP 39
8904: PUSH
8905: CALL 9110 0 0
8909: AND
8910: PUSH
8911: LD_OWVAR 4
8915: AND
8916: IFFALSE 9107
8918: GO 8920
8920: DISABLE
8921: LD_INT 0
8923: PPUSH
8924: PPUSH
// begin canWin := false ;
8925: LD_ADDR_VAR 0 2
8929: PUSH
8930: LD_INT 0
8932: ST_TO_ADDR
// if not HasPower ( your_side ) then
8933: LD_OWVAR 2
8937: PPUSH
8938: CALL 9150 0 1
8942: NOT
8943: IFFALSE 8954
// begin Multiplayer_Loose_Message ;
8945: CALL_OW 521
// enable ( mpLose ) ;
8949: LD_INT 102
8951: ENABLE_MARKED
// end else
8952: GO 9107
// begin canWin := true ;
8954: LD_ADDR_VAR 0 2
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// for i := 1 to 8 do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 8
8974: PUSH
8975: FOR_TO
8976: IFFALSE 9093
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8978: LD_EXP 7
8982: PUSH
8983: LD_VAR 0 1
8987: ARRAY
8988: PUSH
8989: LD_VAR 0 1
8993: PPUSH
8994: CALL_OW 108
8998: AND
8999: PUSH
9000: LD_VAR 0 1
9004: PUSH
9005: LD_OWVAR 2
9009: NONEQUAL
9010: AND
9011: IFFALSE 9091
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9013: LD_EXP 8
9017: PUSH
9018: LD_VAR 0 1
9022: ARRAY
9023: NOT
9024: PUSH
9025: LD_EXP 8
9029: PUSH
9030: LD_VAR 0 1
9034: ARRAY
9035: PUSH
9036: LD_EXP 8
9040: PUSH
9041: LD_OWVAR 2
9045: ARRAY
9046: NONEQUAL
9047: PUSH
9048: LD_OWVAR 2
9052: PPUSH
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 81
9062: PUSH
9063: LD_INT 1
9065: NONEQUAL
9066: AND
9067: OR
9068: IFFALSE 9091
// if HasPower ( i ) then
9070: LD_VAR 0 1
9074: PPUSH
9075: CALL 9150 0 1
9079: IFFALSE 9091
// begin canWin := false ;
9081: LD_ADDR_VAR 0 2
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// break ;
9089: GO 9093
// end ;
9091: GO 8975
9093: POP
9094: POP
// if canWin then
9095: LD_VAR 0 2
9099: IFFALSE 9106
// enable ( mpWin ) else
9101: LD_INT 101
9103: ENABLE_MARKED
9104: GO 9107
// enable ;
9106: ENABLE
// end ; end ;
9107: PPOPN 2
9109: END
// function CanWinLoose ; begin
9110: LD_INT 0
9112: PPUSH
// result := true ;
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9121: CALL_OW 531
9125: PUSH
9126: CALL_OW 519
9130: PUSH
9131: LD_INT 1
9133: GREATER
9134: AND
9135: IFFALSE 9145
// result := false ;
9137: LD_ADDR_VAR 0 1
9141: PUSH
9142: LD_INT 0
9144: ST_TO_ADDR
// end ;
9145: LD_VAR 0 1
9149: RET
// function HasPower ( i ) ; begin
9150: LD_INT 0
9152: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9153: LD_INT 22
9155: PUSH
9156: LD_VAR 0 1
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 2
9167: PUSH
9168: LD_INT 30
9170: PUSH
9171: LD_INT 0
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 30
9180: PUSH
9181: LD_INT 1
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PPUSH
9197: CALL_OW 69
9201: NOT
9202: IFFALSE 9206
// exit ;
9204: GO 9271
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9206: LD_ADDR_VAR 0 2
9210: PUSH
9211: LD_INT 22
9213: PUSH
9214: LD_VAR 0 1
9218: PUSH
9219: EMPTY
9220: LIST
9221: LIST
9222: PUSH
9223: LD_INT 2
9225: PUSH
9226: LD_INT 21
9228: PUSH
9229: LD_INT 1
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 33
9238: PUSH
9239: LD_INT 3
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 33
9248: PUSH
9249: LD_INT 5
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PPUSH
9266: CALL_OW 69
9270: ST_TO_ADDR
// end ; end_of_file
9271: LD_VAR 0 2
9275: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9276: LD_INT 0
9278: PPUSH
9279: PPUSH
// if exist_mode then
9280: LD_VAR 0 2
9284: IFFALSE 9330
// begin unit := CreateCharacter ( prefix & ident ) ;
9286: LD_ADDR_VAR 0 5
9290: PUSH
9291: LD_VAR 0 3
9295: PUSH
9296: LD_VAR 0 1
9300: STR
9301: PPUSH
9302: CALL_OW 34
9306: ST_TO_ADDR
// if unit then
9307: LD_VAR 0 5
9311: IFFALSE 9328
// DeleteCharacters ( prefix & ident ) ;
9313: LD_VAR 0 3
9317: PUSH
9318: LD_VAR 0 1
9322: STR
9323: PPUSH
9324: CALL_OW 40
// end else
9328: GO 9345
// unit := NewCharacter ( ident ) ;
9330: LD_ADDR_VAR 0 5
9334: PUSH
9335: LD_VAR 0 1
9339: PPUSH
9340: CALL_OW 25
9344: ST_TO_ADDR
// result := unit ;
9345: LD_ADDR_VAR 0 4
9349: PUSH
9350: LD_VAR 0 5
9354: ST_TO_ADDR
// end ;
9355: LD_VAR 0 4
9359: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9360: LD_INT 0
9362: PPUSH
9363: PPUSH
// if exist_mode then
9364: LD_VAR 0 2
9368: IFFALSE 9393
// unit := CreateCharacter ( prefix & ident ) else
9370: LD_ADDR_VAR 0 5
9374: PUSH
9375: LD_VAR 0 3
9379: PUSH
9380: LD_VAR 0 1
9384: STR
9385: PPUSH
9386: CALL_OW 34
9390: ST_TO_ADDR
9391: GO 9408
// unit := NewCharacter ( ident ) ;
9393: LD_ADDR_VAR 0 5
9397: PUSH
9398: LD_VAR 0 1
9402: PPUSH
9403: CALL_OW 25
9407: ST_TO_ADDR
// result := unit ;
9408: LD_ADDR_VAR 0 4
9412: PUSH
9413: LD_VAR 0 5
9417: ST_TO_ADDR
// end ;
9418: LD_VAR 0 4
9422: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9423: LD_INT 0
9425: PPUSH
9426: PPUSH
// if not side or not nation then
9427: LD_VAR 0 1
9431: NOT
9432: PUSH
9433: LD_VAR 0 2
9437: NOT
9438: OR
9439: IFFALSE 9443
// exit ;
9441: GO 10211
// case nation of nation_american :
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: DOUBLE
9451: EQUAL
9452: IFTRUE 9456
9454: GO 9670
9456: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9457: LD_ADDR_VAR 0 4
9461: PUSH
9462: LD_INT 35
9464: PUSH
9465: LD_INT 45
9467: PUSH
9468: LD_INT 46
9470: PUSH
9471: LD_INT 47
9473: PUSH
9474: LD_INT 82
9476: PUSH
9477: LD_INT 83
9479: PUSH
9480: LD_INT 84
9482: PUSH
9483: LD_INT 85
9485: PUSH
9486: LD_INT 86
9488: PUSH
9489: LD_INT 1
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 6
9497: PUSH
9498: LD_INT 15
9500: PUSH
9501: LD_INT 16
9503: PUSH
9504: LD_INT 7
9506: PUSH
9507: LD_INT 12
9509: PUSH
9510: LD_INT 13
9512: PUSH
9513: LD_INT 10
9515: PUSH
9516: LD_INT 14
9518: PUSH
9519: LD_INT 20
9521: PUSH
9522: LD_INT 21
9524: PUSH
9525: LD_INT 22
9527: PUSH
9528: LD_INT 25
9530: PUSH
9531: LD_INT 32
9533: PUSH
9534: LD_INT 27
9536: PUSH
9537: LD_INT 36
9539: PUSH
9540: LD_INT 69
9542: PUSH
9543: LD_INT 39
9545: PUSH
9546: LD_INT 34
9548: PUSH
9549: LD_INT 40
9551: PUSH
9552: LD_INT 48
9554: PUSH
9555: LD_INT 49
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: LD_INT 51
9563: PUSH
9564: LD_INT 52
9566: PUSH
9567: LD_INT 53
9569: PUSH
9570: LD_INT 54
9572: PUSH
9573: LD_INT 55
9575: PUSH
9576: LD_INT 56
9578: PUSH
9579: LD_INT 57
9581: PUSH
9582: LD_INT 58
9584: PUSH
9585: LD_INT 59
9587: PUSH
9588: LD_INT 60
9590: PUSH
9591: LD_INT 61
9593: PUSH
9594: LD_INT 62
9596: PUSH
9597: LD_INT 80
9599: PUSH
9600: LD_INT 82
9602: PUSH
9603: LD_INT 83
9605: PUSH
9606: LD_INT 84
9608: PUSH
9609: LD_INT 85
9611: PUSH
9612: LD_INT 86
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: ST_TO_ADDR
9668: GO 10135
9670: LD_INT 2
9672: DOUBLE
9673: EQUAL
9674: IFTRUE 9678
9676: GO 9904
9678: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9679: LD_ADDR_VAR 0 4
9683: PUSH
9684: LD_INT 35
9686: PUSH
9687: LD_INT 45
9689: PUSH
9690: LD_INT 46
9692: PUSH
9693: LD_INT 47
9695: PUSH
9696: LD_INT 82
9698: PUSH
9699: LD_INT 83
9701: PUSH
9702: LD_INT 84
9704: PUSH
9705: LD_INT 85
9707: PUSH
9708: LD_INT 87
9710: PUSH
9711: LD_INT 70
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: LD_INT 11
9719: PUSH
9720: LD_INT 3
9722: PUSH
9723: LD_INT 4
9725: PUSH
9726: LD_INT 5
9728: PUSH
9729: LD_INT 6
9731: PUSH
9732: LD_INT 15
9734: PUSH
9735: LD_INT 18
9737: PUSH
9738: LD_INT 7
9740: PUSH
9741: LD_INT 17
9743: PUSH
9744: LD_INT 8
9746: PUSH
9747: LD_INT 20
9749: PUSH
9750: LD_INT 21
9752: PUSH
9753: LD_INT 22
9755: PUSH
9756: LD_INT 72
9758: PUSH
9759: LD_INT 26
9761: PUSH
9762: LD_INT 69
9764: PUSH
9765: LD_INT 39
9767: PUSH
9768: LD_INT 40
9770: PUSH
9771: LD_INT 41
9773: PUSH
9774: LD_INT 42
9776: PUSH
9777: LD_INT 43
9779: PUSH
9780: LD_INT 48
9782: PUSH
9783: LD_INT 49
9785: PUSH
9786: LD_INT 50
9788: PUSH
9789: LD_INT 51
9791: PUSH
9792: LD_INT 52
9794: PUSH
9795: LD_INT 53
9797: PUSH
9798: LD_INT 54
9800: PUSH
9801: LD_INT 55
9803: PUSH
9804: LD_INT 56
9806: PUSH
9807: LD_INT 60
9809: PUSH
9810: LD_INT 61
9812: PUSH
9813: LD_INT 62
9815: PUSH
9816: LD_INT 66
9818: PUSH
9819: LD_INT 67
9821: PUSH
9822: LD_INT 68
9824: PUSH
9825: LD_INT 81
9827: PUSH
9828: LD_INT 82
9830: PUSH
9831: LD_INT 83
9833: PUSH
9834: LD_INT 84
9836: PUSH
9837: LD_INT 85
9839: PUSH
9840: LD_INT 87
9842: PUSH
9843: LD_INT 88
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: ST_TO_ADDR
9902: GO 10135
9904: LD_INT 3
9906: DOUBLE
9907: EQUAL
9908: IFTRUE 9912
9910: GO 10134
9912: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9913: LD_ADDR_VAR 0 4
9917: PUSH
9918: LD_INT 46
9920: PUSH
9921: LD_INT 47
9923: PUSH
9924: LD_INT 1
9926: PUSH
9927: LD_INT 2
9929: PUSH
9930: LD_INT 82
9932: PUSH
9933: LD_INT 83
9935: PUSH
9936: LD_INT 84
9938: PUSH
9939: LD_INT 85
9941: PUSH
9942: LD_INT 86
9944: PUSH
9945: LD_INT 11
9947: PUSH
9948: LD_INT 9
9950: PUSH
9951: LD_INT 20
9953: PUSH
9954: LD_INT 19
9956: PUSH
9957: LD_INT 21
9959: PUSH
9960: LD_INT 24
9962: PUSH
9963: LD_INT 22
9965: PUSH
9966: LD_INT 25
9968: PUSH
9969: LD_INT 28
9971: PUSH
9972: LD_INT 29
9974: PUSH
9975: LD_INT 30
9977: PUSH
9978: LD_INT 31
9980: PUSH
9981: LD_INT 37
9983: PUSH
9984: LD_INT 38
9986: PUSH
9987: LD_INT 32
9989: PUSH
9990: LD_INT 27
9992: PUSH
9993: LD_INT 33
9995: PUSH
9996: LD_INT 69
9998: PUSH
9999: LD_INT 39
10001: PUSH
10002: LD_INT 34
10004: PUSH
10005: LD_INT 40
10007: PUSH
10008: LD_INT 71
10010: PUSH
10011: LD_INT 23
10013: PUSH
10014: LD_INT 44
10016: PUSH
10017: LD_INT 48
10019: PUSH
10020: LD_INT 49
10022: PUSH
10023: LD_INT 50
10025: PUSH
10026: LD_INT 51
10028: PUSH
10029: LD_INT 52
10031: PUSH
10032: LD_INT 53
10034: PUSH
10035: LD_INT 54
10037: PUSH
10038: LD_INT 55
10040: PUSH
10041: LD_INT 56
10043: PUSH
10044: LD_INT 57
10046: PUSH
10047: LD_INT 58
10049: PUSH
10050: LD_INT 59
10052: PUSH
10053: LD_INT 63
10055: PUSH
10056: LD_INT 64
10058: PUSH
10059: LD_INT 65
10061: PUSH
10062: LD_INT 82
10064: PUSH
10065: LD_INT 83
10067: PUSH
10068: LD_INT 84
10070: PUSH
10071: LD_INT 85
10073: PUSH
10074: LD_INT 86
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: ST_TO_ADDR
10132: GO 10135
10134: POP
// if state > - 1 and state < 3 then
10135: LD_VAR 0 3
10139: PUSH
10140: LD_INT 1
10142: NEG
10143: GREATER
10144: PUSH
10145: LD_VAR 0 3
10149: PUSH
10150: LD_INT 3
10152: LESS
10153: AND
10154: IFFALSE 10211
// for i in result do
10156: LD_ADDR_VAR 0 5
10160: PUSH
10161: LD_VAR 0 4
10165: PUSH
10166: FOR_IN
10167: IFFALSE 10209
// if GetTech ( i , side ) <> state then
10169: LD_VAR 0 5
10173: PPUSH
10174: LD_VAR 0 1
10178: PPUSH
10179: CALL_OW 321
10183: PUSH
10184: LD_VAR 0 3
10188: NONEQUAL
10189: IFFALSE 10207
// result := result diff i ;
10191: LD_ADDR_VAR 0 4
10195: PUSH
10196: LD_VAR 0 4
10200: PUSH
10201: LD_VAR 0 5
10205: DIFF
10206: ST_TO_ADDR
10207: GO 10166
10209: POP
10210: POP
// end ;
10211: LD_VAR 0 4
10215: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10216: LD_INT 0
10218: PPUSH
10219: PPUSH
10220: PPUSH
// result := true ;
10221: LD_ADDR_VAR 0 3
10225: PUSH
10226: LD_INT 1
10228: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10229: LD_ADDR_VAR 0 5
10233: PUSH
10234: LD_VAR 0 2
10238: PPUSH
10239: CALL_OW 480
10243: ST_TO_ADDR
// if not tmp then
10244: LD_VAR 0 5
10248: NOT
10249: IFFALSE 10253
// exit ;
10251: GO 10302
// for i in tmp do
10253: LD_ADDR_VAR 0 4
10257: PUSH
10258: LD_VAR 0 5
10262: PUSH
10263: FOR_IN
10264: IFFALSE 10300
// if GetTech ( i , side ) <> state_researched then
10266: LD_VAR 0 4
10270: PPUSH
10271: LD_VAR 0 1
10275: PPUSH
10276: CALL_OW 321
10280: PUSH
10281: LD_INT 2
10283: NONEQUAL
10284: IFFALSE 10298
// begin result := false ;
10286: LD_ADDR_VAR 0 3
10290: PUSH
10291: LD_INT 0
10293: ST_TO_ADDR
// exit ;
10294: POP
10295: POP
10296: GO 10302
// end ;
10298: GO 10263
10300: POP
10301: POP
// end ;
10302: LD_VAR 0 3
10306: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10307: LD_INT 0
10309: PPUSH
10310: PPUSH
10311: PPUSH
10312: PPUSH
10313: PPUSH
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10322: LD_VAR 0 1
10326: NOT
10327: PUSH
10328: LD_VAR 0 1
10332: PPUSH
10333: CALL_OW 257
10337: PUSH
10338: LD_INT 9
10340: NONEQUAL
10341: OR
10342: IFFALSE 10346
// exit ;
10344: GO 10919
// side := GetSide ( unit ) ;
10346: LD_ADDR_VAR 0 9
10350: PUSH
10351: LD_VAR 0 1
10355: PPUSH
10356: CALL_OW 255
10360: ST_TO_ADDR
// tech_space := tech_spacanom ;
10361: LD_ADDR_VAR 0 12
10365: PUSH
10366: LD_INT 29
10368: ST_TO_ADDR
// tech_time := tech_taurad ;
10369: LD_ADDR_VAR 0 13
10373: PUSH
10374: LD_INT 28
10376: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10377: LD_ADDR_VAR 0 11
10381: PUSH
10382: LD_VAR 0 1
10386: PPUSH
10387: CALL_OW 310
10391: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10392: LD_VAR 0 11
10396: PPUSH
10397: CALL_OW 247
10401: PUSH
10402: LD_INT 2
10404: EQUAL
10405: IFFALSE 10409
// exit ;
10407: GO 10919
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10409: LD_ADDR_VAR 0 8
10413: PUSH
10414: LD_INT 81
10416: PUSH
10417: LD_VAR 0 9
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 3
10428: PUSH
10429: LD_INT 21
10431: PUSH
10432: LD_INT 3
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PPUSH
10447: CALL_OW 69
10451: ST_TO_ADDR
// if not tmp then
10452: LD_VAR 0 8
10456: NOT
10457: IFFALSE 10461
// exit ;
10459: GO 10919
// if in_unit then
10461: LD_VAR 0 11
10465: IFFALSE 10489
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10467: LD_ADDR_VAR 0 10
10471: PUSH
10472: LD_VAR 0 8
10476: PPUSH
10477: LD_VAR 0 11
10481: PPUSH
10482: CALL_OW 74
10486: ST_TO_ADDR
10487: GO 10509
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10489: LD_ADDR_VAR 0 10
10493: PUSH
10494: LD_VAR 0 8
10498: PPUSH
10499: LD_VAR 0 1
10503: PPUSH
10504: CALL_OW 74
10508: ST_TO_ADDR
// if not enemy then
10509: LD_VAR 0 10
10513: NOT
10514: IFFALSE 10518
// exit ;
10516: GO 10919
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10518: LD_VAR 0 11
10522: PUSH
10523: LD_VAR 0 11
10527: PPUSH
10528: LD_VAR 0 10
10532: PPUSH
10533: CALL_OW 296
10537: PUSH
10538: LD_INT 13
10540: GREATER
10541: AND
10542: PUSH
10543: LD_VAR 0 1
10547: PPUSH
10548: LD_VAR 0 10
10552: PPUSH
10553: CALL_OW 296
10557: PUSH
10558: LD_INT 12
10560: GREATER
10561: OR
10562: IFFALSE 10566
// exit ;
10564: GO 10919
// missile := [ 1 ] ;
10566: LD_ADDR_VAR 0 14
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: EMPTY
10575: LIST
10576: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10577: LD_VAR 0 9
10581: PPUSH
10582: LD_VAR 0 12
10586: PPUSH
10587: CALL_OW 325
10591: IFFALSE 10620
// missile := Replace ( missile , missile + 1 , 2 ) ;
10593: LD_ADDR_VAR 0 14
10597: PUSH
10598: LD_VAR 0 14
10602: PPUSH
10603: LD_VAR 0 14
10607: PUSH
10608: LD_INT 1
10610: PLUS
10611: PPUSH
10612: LD_INT 2
10614: PPUSH
10615: CALL_OW 1
10619: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10620: LD_VAR 0 9
10624: PPUSH
10625: LD_VAR 0 13
10629: PPUSH
10630: CALL_OW 325
10634: PUSH
10635: LD_VAR 0 10
10639: PPUSH
10640: CALL_OW 255
10644: PPUSH
10645: LD_VAR 0 13
10649: PPUSH
10650: CALL_OW 325
10654: NOT
10655: AND
10656: IFFALSE 10685
// missile := Replace ( missile , missile + 1 , 3 ) ;
10658: LD_ADDR_VAR 0 14
10662: PUSH
10663: LD_VAR 0 14
10667: PPUSH
10668: LD_VAR 0 14
10672: PUSH
10673: LD_INT 1
10675: PLUS
10676: PPUSH
10677: LD_INT 3
10679: PPUSH
10680: CALL_OW 1
10684: ST_TO_ADDR
// if missile < 2 then
10685: LD_VAR 0 14
10689: PUSH
10690: LD_INT 2
10692: LESS
10693: IFFALSE 10697
// exit ;
10695: GO 10919
// x := GetX ( enemy ) ;
10697: LD_ADDR_VAR 0 4
10701: PUSH
10702: LD_VAR 0 10
10706: PPUSH
10707: CALL_OW 250
10711: ST_TO_ADDR
// y := GetY ( enemy ) ;
10712: LD_ADDR_VAR 0 5
10716: PUSH
10717: LD_VAR 0 10
10721: PPUSH
10722: CALL_OW 251
10726: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10727: LD_ADDR_VAR 0 6
10731: PUSH
10732: LD_VAR 0 4
10736: PUSH
10737: LD_INT 1
10739: NEG
10740: PPUSH
10741: LD_INT 1
10743: PPUSH
10744: CALL_OW 12
10748: PLUS
10749: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10750: LD_ADDR_VAR 0 7
10754: PUSH
10755: LD_VAR 0 5
10759: PUSH
10760: LD_INT 1
10762: NEG
10763: PPUSH
10764: LD_INT 1
10766: PPUSH
10767: CALL_OW 12
10771: PLUS
10772: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10773: LD_VAR 0 6
10777: PPUSH
10778: LD_VAR 0 7
10782: PPUSH
10783: CALL_OW 488
10787: NOT
10788: IFFALSE 10810
// begin _x := x ;
10790: LD_ADDR_VAR 0 6
10794: PUSH
10795: LD_VAR 0 4
10799: ST_TO_ADDR
// _y := y ;
10800: LD_ADDR_VAR 0 7
10804: PUSH
10805: LD_VAR 0 5
10809: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10810: LD_ADDR_VAR 0 3
10814: PUSH
10815: LD_INT 1
10817: PPUSH
10818: LD_VAR 0 14
10822: PPUSH
10823: CALL_OW 12
10827: ST_TO_ADDR
// case i of 1 :
10828: LD_VAR 0 3
10832: PUSH
10833: LD_INT 1
10835: DOUBLE
10836: EQUAL
10837: IFTRUE 10841
10839: GO 10858
10841: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10842: LD_VAR 0 1
10846: PPUSH
10847: LD_VAR 0 10
10851: PPUSH
10852: CALL_OW 115
10856: GO 10919
10858: LD_INT 2
10860: DOUBLE
10861: EQUAL
10862: IFTRUE 10866
10864: GO 10888
10866: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_VAR 0 6
10876: PPUSH
10877: LD_VAR 0 7
10881: PPUSH
10882: CALL_OW 153
10886: GO 10919
10888: LD_INT 3
10890: DOUBLE
10891: EQUAL
10892: IFTRUE 10896
10894: GO 10918
10896: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10897: LD_VAR 0 1
10901: PPUSH
10902: LD_VAR 0 6
10906: PPUSH
10907: LD_VAR 0 7
10911: PPUSH
10912: CALL_OW 154
10916: GO 10919
10918: POP
// end ;
10919: LD_VAR 0 2
10923: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10924: LD_INT 0
10926: PPUSH
10927: PPUSH
10928: PPUSH
10929: PPUSH
10930: PPUSH
10931: PPUSH
// if not unit or not building then
10932: LD_VAR 0 1
10936: NOT
10937: PUSH
10938: LD_VAR 0 2
10942: NOT
10943: OR
10944: IFFALSE 10948
// exit ;
10946: GO 11106
// x := GetX ( building ) ;
10948: LD_ADDR_VAR 0 5
10952: PUSH
10953: LD_VAR 0 2
10957: PPUSH
10958: CALL_OW 250
10962: ST_TO_ADDR
// y := GetY ( building ) ;
10963: LD_ADDR_VAR 0 6
10967: PUSH
10968: LD_VAR 0 2
10972: PPUSH
10973: CALL_OW 251
10977: ST_TO_ADDR
// for i = 0 to 5 do
10978: LD_ADDR_VAR 0 4
10982: PUSH
10983: DOUBLE
10984: LD_INT 0
10986: DEC
10987: ST_TO_ADDR
10988: LD_INT 5
10990: PUSH
10991: FOR_TO
10992: IFFALSE 11104
// begin _x := ShiftX ( x , i , 3 ) ;
10994: LD_ADDR_VAR 0 7
10998: PUSH
10999: LD_VAR 0 5
11003: PPUSH
11004: LD_VAR 0 4
11008: PPUSH
11009: LD_INT 3
11011: PPUSH
11012: CALL_OW 272
11016: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11017: LD_ADDR_VAR 0 8
11021: PUSH
11022: LD_VAR 0 6
11026: PPUSH
11027: LD_VAR 0 4
11031: PPUSH
11032: LD_INT 3
11034: PPUSH
11035: CALL_OW 273
11039: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11040: LD_VAR 0 7
11044: PPUSH
11045: LD_VAR 0 8
11049: PPUSH
11050: CALL_OW 488
11054: NOT
11055: IFFALSE 11059
// continue ;
11057: GO 10991
// if HexInfo ( _x , _y ) = 0 then
11059: LD_VAR 0 7
11063: PPUSH
11064: LD_VAR 0 8
11068: PPUSH
11069: CALL_OW 428
11073: PUSH
11074: LD_INT 0
11076: EQUAL
11077: IFFALSE 11102
// begin ComMoveXY ( unit , _x , _y ) ;
11079: LD_VAR 0 1
11083: PPUSH
11084: LD_VAR 0 7
11088: PPUSH
11089: LD_VAR 0 8
11093: PPUSH
11094: CALL_OW 111
// exit ;
11098: POP
11099: POP
11100: GO 11106
// end ; end ;
11102: GO 10991
11104: POP
11105: POP
// end ;
11106: LD_VAR 0 3
11110: RET
// export function ScanBase ( side , base_area ) ; begin
11111: LD_INT 0
11113: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11114: LD_ADDR_VAR 0 3
11118: PUSH
11119: LD_VAR 0 2
11123: PPUSH
11124: LD_INT 81
11126: PUSH
11127: LD_VAR 0 1
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 70
11140: ST_TO_ADDR
// end ;
11141: LD_VAR 0 3
11145: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11146: LD_INT 0
11148: PPUSH
11149: PPUSH
11150: PPUSH
11151: PPUSH
// result := false ;
11152: LD_ADDR_VAR 0 2
11156: PUSH
11157: LD_INT 0
11159: ST_TO_ADDR
// side := GetSide ( unit ) ;
11160: LD_ADDR_VAR 0 3
11164: PUSH
11165: LD_VAR 0 1
11169: PPUSH
11170: CALL_OW 255
11174: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11175: LD_ADDR_VAR 0 4
11179: PUSH
11180: LD_VAR 0 1
11184: PPUSH
11185: CALL_OW 248
11189: ST_TO_ADDR
// case nat of 1 :
11190: LD_VAR 0 4
11194: PUSH
11195: LD_INT 1
11197: DOUBLE
11198: EQUAL
11199: IFTRUE 11203
11201: GO 11214
11203: POP
// tech := tech_lassight ; 2 :
11204: LD_ADDR_VAR 0 5
11208: PUSH
11209: LD_INT 12
11211: ST_TO_ADDR
11212: GO 11253
11214: LD_INT 2
11216: DOUBLE
11217: EQUAL
11218: IFTRUE 11222
11220: GO 11233
11222: POP
// tech := tech_mortar ; 3 :
11223: LD_ADDR_VAR 0 5
11227: PUSH
11228: LD_INT 41
11230: ST_TO_ADDR
11231: GO 11253
11233: LD_INT 3
11235: DOUBLE
11236: EQUAL
11237: IFTRUE 11241
11239: GO 11252
11241: POP
// tech := tech_bazooka ; end ;
11242: LD_ADDR_VAR 0 5
11246: PUSH
11247: LD_INT 44
11249: ST_TO_ADDR
11250: GO 11253
11252: POP
// if Researched ( side , tech ) then
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_VAR 0 5
11262: PPUSH
11263: CALL_OW 325
11267: IFFALSE 11294
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11269: LD_ADDR_VAR 0 2
11273: PUSH
11274: LD_INT 5
11276: PUSH
11277: LD_INT 8
11279: PUSH
11280: LD_INT 9
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: PUSH
11288: LD_VAR 0 4
11292: ARRAY
11293: ST_TO_ADDR
// end ;
11294: LD_VAR 0 2
11298: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11299: LD_INT 0
11301: PPUSH
11302: PPUSH
11303: PPUSH
// if not mines then
11304: LD_VAR 0 2
11308: NOT
11309: IFFALSE 11313
// exit ;
11311: GO 11457
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11313: LD_ADDR_VAR 0 5
11317: PUSH
11318: LD_INT 81
11320: PUSH
11321: LD_VAR 0 1
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 3
11332: PUSH
11333: LD_INT 21
11335: PUSH
11336: LD_INT 3
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: ST_TO_ADDR
// for i in mines do
11356: LD_ADDR_VAR 0 4
11360: PUSH
11361: LD_VAR 0 2
11365: PUSH
11366: FOR_IN
11367: IFFALSE 11455
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11369: LD_VAR 0 4
11373: PUSH
11374: LD_INT 1
11376: ARRAY
11377: PPUSH
11378: LD_VAR 0 4
11382: PUSH
11383: LD_INT 2
11385: ARRAY
11386: PPUSH
11387: CALL_OW 458
11391: NOT
11392: IFFALSE 11396
// continue ;
11394: GO 11366
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11396: LD_VAR 0 4
11400: PUSH
11401: LD_INT 1
11403: ARRAY
11404: PPUSH
11405: LD_VAR 0 4
11409: PUSH
11410: LD_INT 2
11412: ARRAY
11413: PPUSH
11414: CALL_OW 428
11418: PUSH
11419: LD_VAR 0 5
11423: IN
11424: IFFALSE 11453
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11426: LD_VAR 0 4
11430: PUSH
11431: LD_INT 1
11433: ARRAY
11434: PPUSH
11435: LD_VAR 0 4
11439: PUSH
11440: LD_INT 2
11442: ARRAY
11443: PPUSH
11444: LD_VAR 0 1
11448: PPUSH
11449: CALL_OW 456
// end ;
11453: GO 11366
11455: POP
11456: POP
// end ;
11457: LD_VAR 0 3
11461: RET
// export function Count ( array ) ; begin
11462: LD_INT 0
11464: PPUSH
// result := array + 0 ;
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: LD_VAR 0 1
11474: PUSH
11475: LD_INT 0
11477: PLUS
11478: ST_TO_ADDR
// end ;
11479: LD_VAR 0 2
11483: RET
// export function IsEmpty ( building ) ; begin
11484: LD_INT 0
11486: PPUSH
// if not building then
11487: LD_VAR 0 1
11491: NOT
11492: IFFALSE 11496
// exit ;
11494: GO 11539
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11496: LD_ADDR_VAR 0 2
11500: PUSH
11501: LD_VAR 0 1
11505: PUSH
11506: LD_INT 22
11508: PUSH
11509: LD_VAR 0 1
11513: PPUSH
11514: CALL_OW 255
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 58
11525: PUSH
11526: EMPTY
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PPUSH
11533: CALL_OW 69
11537: IN
11538: ST_TO_ADDR
// end ;
11539: LD_VAR 0 2
11543: RET
// export function IsNotFull ( building ) ; var places ; begin
11544: LD_INT 0
11546: PPUSH
11547: PPUSH
// if not building then
11548: LD_VAR 0 1
11552: NOT
11553: IFFALSE 11557
// exit ;
11555: GO 11585
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
11557: LD_ADDR_VAR 0 2
11561: PUSH
11562: LD_VAR 0 1
11566: PPUSH
11567: LD_INT 3
11569: PUSH
11570: LD_INT 62
11572: PUSH
11573: EMPTY
11574: LIST
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 72
11584: ST_TO_ADDR
// end ;
11585: LD_VAR 0 2
11589: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11590: LD_INT 0
11592: PPUSH
11593: PPUSH
11594: PPUSH
11595: PPUSH
// tmp := [ ] ;
11596: LD_ADDR_VAR 0 3
11600: PUSH
11601: EMPTY
11602: ST_TO_ADDR
// list := [ ] ;
11603: LD_ADDR_VAR 0 5
11607: PUSH
11608: EMPTY
11609: ST_TO_ADDR
// for i = 16 to 25 do
11610: LD_ADDR_VAR 0 4
11614: PUSH
11615: DOUBLE
11616: LD_INT 16
11618: DEC
11619: ST_TO_ADDR
11620: LD_INT 25
11622: PUSH
11623: FOR_TO
11624: IFFALSE 11697
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11626: LD_ADDR_VAR 0 3
11630: PUSH
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 255
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 91
11655: PUSH
11656: LD_VAR 0 1
11660: PUSH
11661: LD_INT 6
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 30
11671: PUSH
11672: LD_VAR 0 4
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: PPUSH
11689: CALL_OW 69
11693: ADD
11694: ST_TO_ADDR
11695: GO 11623
11697: POP
11698: POP
// for i = 1 to tmp do
11699: LD_ADDR_VAR 0 4
11703: PUSH
11704: DOUBLE
11705: LD_INT 1
11707: DEC
11708: ST_TO_ADDR
11709: LD_VAR 0 3
11713: PUSH
11714: FOR_TO
11715: IFFALSE 11803
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11717: LD_ADDR_VAR 0 5
11721: PUSH
11722: LD_VAR 0 5
11726: PUSH
11727: LD_VAR 0 3
11731: PUSH
11732: LD_VAR 0 4
11736: ARRAY
11737: PPUSH
11738: CALL_OW 266
11742: PUSH
11743: LD_VAR 0 3
11747: PUSH
11748: LD_VAR 0 4
11752: ARRAY
11753: PPUSH
11754: CALL_OW 250
11758: PUSH
11759: LD_VAR 0 3
11763: PUSH
11764: LD_VAR 0 4
11768: ARRAY
11769: PPUSH
11770: CALL_OW 251
11774: PUSH
11775: LD_VAR 0 3
11779: PUSH
11780: LD_VAR 0 4
11784: ARRAY
11785: PPUSH
11786: CALL_OW 254
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: ADD
11800: ST_TO_ADDR
11801: GO 11714
11803: POP
11804: POP
// result := list ;
11805: LD_ADDR_VAR 0 2
11809: PUSH
11810: LD_VAR 0 5
11814: ST_TO_ADDR
// end ;
11815: LD_VAR 0 2
11819: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11820: LD_INT 0
11822: PPUSH
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
// if not factory then
11829: LD_VAR 0 1
11833: NOT
11834: IFFALSE 11838
// exit ;
11836: GO 12431
// if control = control_apeman then
11838: LD_VAR 0 4
11842: PUSH
11843: LD_INT 5
11845: EQUAL
11846: IFFALSE 11955
// begin tmp := UnitsInside ( factory ) ;
11848: LD_ADDR_VAR 0 8
11852: PUSH
11853: LD_VAR 0 1
11857: PPUSH
11858: CALL_OW 313
11862: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11863: LD_VAR 0 8
11867: PPUSH
11868: LD_INT 25
11870: PUSH
11871: LD_INT 12
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 72
11882: NOT
11883: IFFALSE 11893
// control := control_manual ;
11885: LD_ADDR_VAR 0 4
11889: PUSH
11890: LD_INT 1
11892: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11893: LD_ADDR_VAR 0 8
11897: PUSH
11898: LD_VAR 0 1
11902: PPUSH
11903: CALL 11590 0 1
11907: ST_TO_ADDR
// if tmp then
11908: LD_VAR 0 8
11912: IFFALSE 11955
// begin for i in tmp do
11914: LD_ADDR_VAR 0 7
11918: PUSH
11919: LD_VAR 0 8
11923: PUSH
11924: FOR_IN
11925: IFFALSE 11953
// if i [ 1 ] = b_ext_radio then
11927: LD_VAR 0 7
11931: PUSH
11932: LD_INT 1
11934: ARRAY
11935: PUSH
11936: LD_INT 22
11938: EQUAL
11939: IFFALSE 11951
// begin control := control_remote ;
11941: LD_ADDR_VAR 0 4
11945: PUSH
11946: LD_INT 2
11948: ST_TO_ADDR
// break ;
11949: GO 11953
// end ;
11951: GO 11924
11953: POP
11954: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_VAR 0 3
11969: PPUSH
11970: LD_VAR 0 4
11974: PPUSH
11975: LD_VAR 0 5
11979: PPUSH
11980: CALL_OW 448
11984: IFFALSE 12019
// begin result := [ chassis , engine , control , weapon ] ;
11986: LD_ADDR_VAR 0 6
11990: PUSH
11991: LD_VAR 0 2
11995: PUSH
11996: LD_VAR 0 3
12000: PUSH
12001: LD_VAR 0 4
12005: PUSH
12006: LD_VAR 0 5
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: ST_TO_ADDR
// exit ;
12017: GO 12431
// end ; _chassis := AvailableChassisList ( factory ) ;
12019: LD_ADDR_VAR 0 9
12023: PUSH
12024: LD_VAR 0 1
12028: PPUSH
12029: CALL_OW 475
12033: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12034: LD_ADDR_VAR 0 11
12038: PUSH
12039: LD_VAR 0 1
12043: PPUSH
12044: CALL_OW 476
12048: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12049: LD_ADDR_VAR 0 12
12053: PUSH
12054: LD_VAR 0 1
12058: PPUSH
12059: CALL_OW 477
12063: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12064: LD_ADDR_VAR 0 10
12068: PUSH
12069: LD_VAR 0 1
12073: PPUSH
12074: CALL_OW 478
12078: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12079: LD_VAR 0 9
12083: NOT
12084: PUSH
12085: LD_VAR 0 11
12089: NOT
12090: OR
12091: PUSH
12092: LD_VAR 0 12
12096: NOT
12097: OR
12098: PUSH
12099: LD_VAR 0 10
12103: NOT
12104: OR
12105: IFFALSE 12140
// begin result := [ chassis , engine , control , weapon ] ;
12107: LD_ADDR_VAR 0 6
12111: PUSH
12112: LD_VAR 0 2
12116: PUSH
12117: LD_VAR 0 3
12121: PUSH
12122: LD_VAR 0 4
12126: PUSH
12127: LD_VAR 0 5
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: ST_TO_ADDR
// exit ;
12138: GO 12431
// end ; if not chassis in _chassis then
12140: LD_VAR 0 2
12144: PUSH
12145: LD_VAR 0 9
12149: IN
12150: NOT
12151: IFFALSE 12177
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12153: LD_ADDR_VAR 0 2
12157: PUSH
12158: LD_VAR 0 9
12162: PUSH
12163: LD_INT 1
12165: PPUSH
12166: LD_VAR 0 9
12170: PPUSH
12171: CALL_OW 12
12175: ARRAY
12176: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12177: LD_VAR 0 2
12181: PPUSH
12182: LD_VAR 0 3
12186: PPUSH
12187: CALL 12436 0 2
12191: NOT
12192: IFFALSE 12251
// repeat engine := _engine [ 1 ] ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_VAR 0 11
12203: PUSH
12204: LD_INT 1
12206: ARRAY
12207: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12208: LD_ADDR_VAR 0 11
12212: PUSH
12213: LD_VAR 0 11
12217: PPUSH
12218: LD_INT 1
12220: PPUSH
12221: CALL_OW 3
12225: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12226: LD_VAR 0 2
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: CALL 12436 0 2
12240: PUSH
12241: LD_VAR 0 11
12245: PUSH
12246: EMPTY
12247: EQUAL
12248: OR
12249: IFFALSE 12194
// if not control in _control then
12251: LD_VAR 0 4
12255: PUSH
12256: LD_VAR 0 12
12260: IN
12261: NOT
12262: IFFALSE 12288
// control := _control [ rand ( 1 , _control ) ] ;
12264: LD_ADDR_VAR 0 4
12268: PUSH
12269: LD_VAR 0 12
12273: PUSH
12274: LD_INT 1
12276: PPUSH
12277: LD_VAR 0 12
12281: PPUSH
12282: CALL_OW 12
12286: ARRAY
12287: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12288: LD_VAR 0 2
12292: PPUSH
12293: LD_VAR 0 5
12297: PPUSH
12298: CALL 12656 0 2
12302: NOT
12303: IFFALSE 12362
// repeat weapon := _weapon [ 1 ] ;
12305: LD_ADDR_VAR 0 5
12309: PUSH
12310: LD_VAR 0 10
12314: PUSH
12315: LD_INT 1
12317: ARRAY
12318: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12319: LD_ADDR_VAR 0 10
12323: PUSH
12324: LD_VAR 0 10
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 3
12336: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12337: LD_VAR 0 2
12341: PPUSH
12342: LD_VAR 0 5
12346: PPUSH
12347: CALL 12656 0 2
12351: PUSH
12352: LD_VAR 0 10
12356: PUSH
12357: EMPTY
12358: EQUAL
12359: OR
12360: IFFALSE 12305
// result := [ ] ;
12362: LD_ADDR_VAR 0 6
12366: PUSH
12367: EMPTY
12368: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12369: LD_VAR 0 1
12373: PPUSH
12374: LD_VAR 0 2
12378: PPUSH
12379: LD_VAR 0 3
12383: PPUSH
12384: LD_VAR 0 4
12388: PPUSH
12389: LD_VAR 0 5
12393: PPUSH
12394: CALL_OW 448
12398: IFFALSE 12431
// result := [ chassis , engine , control , weapon ] ;
12400: LD_ADDR_VAR 0 6
12404: PUSH
12405: LD_VAR 0 2
12409: PUSH
12410: LD_VAR 0 3
12414: PUSH
12415: LD_VAR 0 4
12419: PUSH
12420: LD_VAR 0 5
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: ST_TO_ADDR
// end ;
12431: LD_VAR 0 6
12435: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12436: LD_INT 0
12438: PPUSH
// if not chassis or not engine then
12439: LD_VAR 0 1
12443: NOT
12444: PUSH
12445: LD_VAR 0 2
12449: NOT
12450: OR
12451: IFFALSE 12455
// exit ;
12453: GO 12651
// case engine of engine_solar :
12455: LD_VAR 0 2
12459: PUSH
12460: LD_INT 2
12462: DOUBLE
12463: EQUAL
12464: IFTRUE 12468
12466: GO 12506
12468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: LD_INT 11
12476: PUSH
12477: LD_INT 12
12479: PUSH
12480: LD_INT 13
12482: PUSH
12483: LD_INT 14
12485: PUSH
12486: LD_INT 1
12488: PUSH
12489: LD_INT 2
12491: PUSH
12492: LD_INT 3
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: ST_TO_ADDR
12504: GO 12635
12506: LD_INT 1
12508: DOUBLE
12509: EQUAL
12510: IFTRUE 12514
12512: GO 12576
12514: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12515: LD_ADDR_VAR 0 3
12519: PUSH
12520: LD_INT 11
12522: PUSH
12523: LD_INT 12
12525: PUSH
12526: LD_INT 13
12528: PUSH
12529: LD_INT 14
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: LD_INT 2
12537: PUSH
12538: LD_INT 3
12540: PUSH
12541: LD_INT 4
12543: PUSH
12544: LD_INT 5
12546: PUSH
12547: LD_INT 21
12549: PUSH
12550: LD_INT 23
12552: PUSH
12553: LD_INT 22
12555: PUSH
12556: LD_INT 24
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: ST_TO_ADDR
12574: GO 12635
12576: LD_INT 3
12578: DOUBLE
12579: EQUAL
12580: IFTRUE 12584
12582: GO 12634
12584: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12585: LD_ADDR_VAR 0 3
12589: PUSH
12590: LD_INT 13
12592: PUSH
12593: LD_INT 14
12595: PUSH
12596: LD_INT 2
12598: PUSH
12599: LD_INT 3
12601: PUSH
12602: LD_INT 4
12604: PUSH
12605: LD_INT 5
12607: PUSH
12608: LD_INT 21
12610: PUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 23
12616: PUSH
12617: LD_INT 24
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: ST_TO_ADDR
12632: GO 12635
12634: POP
// result := ( chassis in result ) ;
12635: LD_ADDR_VAR 0 3
12639: PUSH
12640: LD_VAR 0 1
12644: PUSH
12645: LD_VAR 0 3
12649: IN
12650: ST_TO_ADDR
// end ;
12651: LD_VAR 0 3
12655: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12656: LD_INT 0
12658: PPUSH
// if not chassis or not weapon then
12659: LD_VAR 0 1
12663: NOT
12664: PUSH
12665: LD_VAR 0 2
12669: NOT
12670: OR
12671: IFFALSE 12675
// exit ;
12673: GO 13735
// case weapon of us_machine_gun :
12675: LD_VAR 0 2
12679: PUSH
12680: LD_INT 2
12682: DOUBLE
12683: EQUAL
12684: IFTRUE 12688
12686: GO 12718
12688: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12689: LD_ADDR_VAR 0 3
12693: PUSH
12694: LD_INT 1
12696: PUSH
12697: LD_INT 2
12699: PUSH
12700: LD_INT 3
12702: PUSH
12703: LD_INT 4
12705: PUSH
12706: LD_INT 5
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: ST_TO_ADDR
12716: GO 13719
12718: LD_INT 3
12720: DOUBLE
12721: EQUAL
12722: IFTRUE 12726
12724: GO 12756
12726: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12727: LD_ADDR_VAR 0 3
12731: PUSH
12732: LD_INT 1
12734: PUSH
12735: LD_INT 2
12737: PUSH
12738: LD_INT 3
12740: PUSH
12741: LD_INT 4
12743: PUSH
12744: LD_INT 5
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: ST_TO_ADDR
12754: GO 13719
12756: LD_INT 11
12758: DOUBLE
12759: EQUAL
12760: IFTRUE 12764
12762: GO 12794
12764: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12765: LD_ADDR_VAR 0 3
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: LD_INT 2
12775: PUSH
12776: LD_INT 3
12778: PUSH
12779: LD_INT 4
12781: PUSH
12782: LD_INT 5
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: ST_TO_ADDR
12792: GO 13719
12794: LD_INT 4
12796: DOUBLE
12797: EQUAL
12798: IFTRUE 12802
12800: GO 12828
12802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12803: LD_ADDR_VAR 0 3
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: LD_INT 3
12813: PUSH
12814: LD_INT 4
12816: PUSH
12817: LD_INT 5
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: ST_TO_ADDR
12826: GO 13719
12828: LD_INT 5
12830: DOUBLE
12831: EQUAL
12832: IFTRUE 12836
12834: GO 12862
12836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12837: LD_ADDR_VAR 0 3
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: LD_INT 3
12847: PUSH
12848: LD_INT 4
12850: PUSH
12851: LD_INT 5
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: ST_TO_ADDR
12860: GO 13719
12862: LD_INT 9
12864: DOUBLE
12865: EQUAL
12866: IFTRUE 12870
12868: GO 12896
12870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12871: LD_ADDR_VAR 0 3
12875: PUSH
12876: LD_INT 2
12878: PUSH
12879: LD_INT 3
12881: PUSH
12882: LD_INT 4
12884: PUSH
12885: LD_INT 5
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: ST_TO_ADDR
12894: GO 13719
12896: LD_INT 7
12898: DOUBLE
12899: EQUAL
12900: IFTRUE 12904
12902: GO 12930
12904: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12905: LD_ADDR_VAR 0 3
12909: PUSH
12910: LD_INT 2
12912: PUSH
12913: LD_INT 3
12915: PUSH
12916: LD_INT 4
12918: PUSH
12919: LD_INT 5
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: ST_TO_ADDR
12928: GO 13719
12930: LD_INT 12
12932: DOUBLE
12933: EQUAL
12934: IFTRUE 12938
12936: GO 12964
12938: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12939: LD_ADDR_VAR 0 3
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: LD_INT 3
12949: PUSH
12950: LD_INT 4
12952: PUSH
12953: LD_INT 5
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: ST_TO_ADDR
12962: GO 13719
12964: LD_INT 13
12966: DOUBLE
12967: EQUAL
12968: IFTRUE 12972
12970: GO 12998
12972: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12973: LD_ADDR_VAR 0 3
12977: PUSH
12978: LD_INT 2
12980: PUSH
12981: LD_INT 3
12983: PUSH
12984: LD_INT 4
12986: PUSH
12987: LD_INT 5
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: ST_TO_ADDR
12996: GO 13719
12998: LD_INT 14
13000: DOUBLE
13001: EQUAL
13002: IFTRUE 13006
13004: GO 13024
13006: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13007: LD_ADDR_VAR 0 3
13011: PUSH
13012: LD_INT 4
13014: PUSH
13015: LD_INT 5
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: ST_TO_ADDR
13022: GO 13719
13024: LD_INT 6
13026: DOUBLE
13027: EQUAL
13028: IFTRUE 13032
13030: GO 13050
13032: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13033: LD_ADDR_VAR 0 3
13037: PUSH
13038: LD_INT 4
13040: PUSH
13041: LD_INT 5
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: ST_TO_ADDR
13048: GO 13719
13050: LD_INT 10
13052: DOUBLE
13053: EQUAL
13054: IFTRUE 13058
13056: GO 13076
13058: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13059: LD_ADDR_VAR 0 3
13063: PUSH
13064: LD_INT 4
13066: PUSH
13067: LD_INT 5
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: ST_TO_ADDR
13074: GO 13719
13076: LD_INT 22
13078: DOUBLE
13079: EQUAL
13080: IFTRUE 13084
13082: GO 13110
13084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13085: LD_ADDR_VAR 0 3
13089: PUSH
13090: LD_INT 11
13092: PUSH
13093: LD_INT 12
13095: PUSH
13096: LD_INT 13
13098: PUSH
13099: LD_INT 14
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: ST_TO_ADDR
13108: GO 13719
13110: LD_INT 23
13112: DOUBLE
13113: EQUAL
13114: IFTRUE 13118
13116: GO 13144
13118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13119: LD_ADDR_VAR 0 3
13123: PUSH
13124: LD_INT 11
13126: PUSH
13127: LD_INT 12
13129: PUSH
13130: LD_INT 13
13132: PUSH
13133: LD_INT 14
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: ST_TO_ADDR
13142: GO 13719
13144: LD_INT 24
13146: DOUBLE
13147: EQUAL
13148: IFTRUE 13152
13150: GO 13178
13152: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13153: LD_ADDR_VAR 0 3
13157: PUSH
13158: LD_INT 11
13160: PUSH
13161: LD_INT 12
13163: PUSH
13164: LD_INT 13
13166: PUSH
13167: LD_INT 14
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: ST_TO_ADDR
13176: GO 13719
13178: LD_INT 30
13180: DOUBLE
13181: EQUAL
13182: IFTRUE 13186
13184: GO 13212
13186: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13187: LD_ADDR_VAR 0 3
13191: PUSH
13192: LD_INT 11
13194: PUSH
13195: LD_INT 12
13197: PUSH
13198: LD_INT 13
13200: PUSH
13201: LD_INT 14
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: ST_TO_ADDR
13210: GO 13719
13212: LD_INT 25
13214: DOUBLE
13215: EQUAL
13216: IFTRUE 13220
13218: GO 13238
13220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13221: LD_ADDR_VAR 0 3
13225: PUSH
13226: LD_INT 13
13228: PUSH
13229: LD_INT 14
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: ST_TO_ADDR
13236: GO 13719
13238: LD_INT 27
13240: DOUBLE
13241: EQUAL
13242: IFTRUE 13246
13244: GO 13264
13246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13247: LD_ADDR_VAR 0 3
13251: PUSH
13252: LD_INT 13
13254: PUSH
13255: LD_INT 14
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: ST_TO_ADDR
13262: GO 13719
13264: LD_INT 92
13266: DOUBLE
13267: EQUAL
13268: IFTRUE 13272
13270: GO 13298
13272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13273: LD_ADDR_VAR 0 3
13277: PUSH
13278: LD_INT 11
13280: PUSH
13281: LD_INT 12
13283: PUSH
13284: LD_INT 13
13286: PUSH
13287: LD_INT 14
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: ST_TO_ADDR
13296: GO 13719
13298: LD_INT 28
13300: DOUBLE
13301: EQUAL
13302: IFTRUE 13306
13304: GO 13324
13306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13307: LD_ADDR_VAR 0 3
13311: PUSH
13312: LD_INT 13
13314: PUSH
13315: LD_INT 14
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: ST_TO_ADDR
13322: GO 13719
13324: LD_INT 29
13326: DOUBLE
13327: EQUAL
13328: IFTRUE 13332
13330: GO 13350
13332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13333: LD_ADDR_VAR 0 3
13337: PUSH
13338: LD_INT 13
13340: PUSH
13341: LD_INT 14
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: ST_TO_ADDR
13348: GO 13719
13350: LD_INT 31
13352: DOUBLE
13353: EQUAL
13354: IFTRUE 13358
13356: GO 13376
13358: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13359: LD_ADDR_VAR 0 3
13363: PUSH
13364: LD_INT 13
13366: PUSH
13367: LD_INT 14
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: ST_TO_ADDR
13374: GO 13719
13376: LD_INT 26
13378: DOUBLE
13379: EQUAL
13380: IFTRUE 13384
13382: GO 13402
13384: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13385: LD_ADDR_VAR 0 3
13389: PUSH
13390: LD_INT 13
13392: PUSH
13393: LD_INT 14
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: ST_TO_ADDR
13400: GO 13719
13402: LD_INT 42
13404: DOUBLE
13405: EQUAL
13406: IFTRUE 13410
13408: GO 13436
13410: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13411: LD_ADDR_VAR 0 3
13415: PUSH
13416: LD_INT 21
13418: PUSH
13419: LD_INT 22
13421: PUSH
13422: LD_INT 23
13424: PUSH
13425: LD_INT 24
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: ST_TO_ADDR
13434: GO 13719
13436: LD_INT 43
13438: DOUBLE
13439: EQUAL
13440: IFTRUE 13444
13442: GO 13470
13444: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13445: LD_ADDR_VAR 0 3
13449: PUSH
13450: LD_INT 21
13452: PUSH
13453: LD_INT 22
13455: PUSH
13456: LD_INT 23
13458: PUSH
13459: LD_INT 24
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: ST_TO_ADDR
13468: GO 13719
13470: LD_INT 44
13472: DOUBLE
13473: EQUAL
13474: IFTRUE 13478
13476: GO 13504
13478: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13479: LD_ADDR_VAR 0 3
13483: PUSH
13484: LD_INT 21
13486: PUSH
13487: LD_INT 22
13489: PUSH
13490: LD_INT 23
13492: PUSH
13493: LD_INT 24
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: ST_TO_ADDR
13502: GO 13719
13504: LD_INT 45
13506: DOUBLE
13507: EQUAL
13508: IFTRUE 13512
13510: GO 13538
13512: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13513: LD_ADDR_VAR 0 3
13517: PUSH
13518: LD_INT 21
13520: PUSH
13521: LD_INT 22
13523: PUSH
13524: LD_INT 23
13526: PUSH
13527: LD_INT 24
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: ST_TO_ADDR
13536: GO 13719
13538: LD_INT 49
13540: DOUBLE
13541: EQUAL
13542: IFTRUE 13546
13544: GO 13572
13546: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13547: LD_ADDR_VAR 0 3
13551: PUSH
13552: LD_INT 21
13554: PUSH
13555: LD_INT 22
13557: PUSH
13558: LD_INT 23
13560: PUSH
13561: LD_INT 24
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: LIST
13569: ST_TO_ADDR
13570: GO 13719
13572: LD_INT 51
13574: DOUBLE
13575: EQUAL
13576: IFTRUE 13580
13578: GO 13606
13580: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13581: LD_ADDR_VAR 0 3
13585: PUSH
13586: LD_INT 21
13588: PUSH
13589: LD_INT 22
13591: PUSH
13592: LD_INT 23
13594: PUSH
13595: LD_INT 24
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: ST_TO_ADDR
13604: GO 13719
13606: LD_INT 52
13608: DOUBLE
13609: EQUAL
13610: IFTRUE 13614
13612: GO 13640
13614: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13615: LD_ADDR_VAR 0 3
13619: PUSH
13620: LD_INT 21
13622: PUSH
13623: LD_INT 22
13625: PUSH
13626: LD_INT 23
13628: PUSH
13629: LD_INT 24
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: ST_TO_ADDR
13638: GO 13719
13640: LD_INT 53
13642: DOUBLE
13643: EQUAL
13644: IFTRUE 13648
13646: GO 13666
13648: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13649: LD_ADDR_VAR 0 3
13653: PUSH
13654: LD_INT 23
13656: PUSH
13657: LD_INT 24
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: ST_TO_ADDR
13664: GO 13719
13666: LD_INT 46
13668: DOUBLE
13669: EQUAL
13670: IFTRUE 13674
13672: GO 13692
13674: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13675: LD_ADDR_VAR 0 3
13679: PUSH
13680: LD_INT 23
13682: PUSH
13683: LD_INT 24
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: ST_TO_ADDR
13690: GO 13719
13692: LD_INT 47
13694: DOUBLE
13695: EQUAL
13696: IFTRUE 13700
13698: GO 13718
13700: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13701: LD_ADDR_VAR 0 3
13705: PUSH
13706: LD_INT 23
13708: PUSH
13709: LD_INT 24
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: ST_TO_ADDR
13716: GO 13719
13718: POP
// result := ( chassis in result ) ;
13719: LD_ADDR_VAR 0 3
13723: PUSH
13724: LD_VAR 0 1
13728: PUSH
13729: LD_VAR 0 3
13733: IN
13734: ST_TO_ADDR
// end ;
13735: LD_VAR 0 3
13739: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13740: LD_INT 0
13742: PPUSH
13743: PPUSH
13744: PPUSH
13745: PPUSH
13746: PPUSH
13747: PPUSH
13748: PPUSH
// result := array ;
13749: LD_ADDR_VAR 0 5
13753: PUSH
13754: LD_VAR 0 1
13758: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13759: LD_VAR 0 1
13763: NOT
13764: PUSH
13765: LD_VAR 0 2
13769: NOT
13770: OR
13771: PUSH
13772: LD_VAR 0 3
13776: NOT
13777: OR
13778: PUSH
13779: LD_VAR 0 2
13783: PUSH
13784: LD_VAR 0 1
13788: GREATER
13789: OR
13790: PUSH
13791: LD_VAR 0 3
13795: PUSH
13796: LD_VAR 0 1
13800: GREATER
13801: OR
13802: IFFALSE 13806
// exit ;
13804: GO 14102
// if direction then
13806: LD_VAR 0 4
13810: IFFALSE 13874
// begin d := 1 ;
13812: LD_ADDR_VAR 0 9
13816: PUSH
13817: LD_INT 1
13819: ST_TO_ADDR
// if i_from > i_to then
13820: LD_VAR 0 2
13824: PUSH
13825: LD_VAR 0 3
13829: GREATER
13830: IFFALSE 13856
// length := ( array - i_from ) + i_to else
13832: LD_ADDR_VAR 0 11
13836: PUSH
13837: LD_VAR 0 1
13841: PUSH
13842: LD_VAR 0 2
13846: MINUS
13847: PUSH
13848: LD_VAR 0 3
13852: PLUS
13853: ST_TO_ADDR
13854: GO 13872
// length := i_to - i_from ;
13856: LD_ADDR_VAR 0 11
13860: PUSH
13861: LD_VAR 0 3
13865: PUSH
13866: LD_VAR 0 2
13870: MINUS
13871: ST_TO_ADDR
// end else
13872: GO 13935
// begin d := - 1 ;
13874: LD_ADDR_VAR 0 9
13878: PUSH
13879: LD_INT 1
13881: NEG
13882: ST_TO_ADDR
// if i_from > i_to then
13883: LD_VAR 0 2
13887: PUSH
13888: LD_VAR 0 3
13892: GREATER
13893: IFFALSE 13913
// length := i_from - i_to else
13895: LD_ADDR_VAR 0 11
13899: PUSH
13900: LD_VAR 0 2
13904: PUSH
13905: LD_VAR 0 3
13909: MINUS
13910: ST_TO_ADDR
13911: GO 13935
// length := ( array - i_to ) + i_from ;
13913: LD_ADDR_VAR 0 11
13917: PUSH
13918: LD_VAR 0 1
13922: PUSH
13923: LD_VAR 0 3
13927: MINUS
13928: PUSH
13929: LD_VAR 0 2
13933: PLUS
13934: ST_TO_ADDR
// end ; if not length then
13935: LD_VAR 0 11
13939: NOT
13940: IFFALSE 13944
// exit ;
13942: GO 14102
// tmp := array ;
13944: LD_ADDR_VAR 0 10
13948: PUSH
13949: LD_VAR 0 1
13953: ST_TO_ADDR
// for i = 1 to length do
13954: LD_ADDR_VAR 0 6
13958: PUSH
13959: DOUBLE
13960: LD_INT 1
13962: DEC
13963: ST_TO_ADDR
13964: LD_VAR 0 11
13968: PUSH
13969: FOR_TO
13970: IFFALSE 14090
// begin for j = 1 to array do
13972: LD_ADDR_VAR 0 7
13976: PUSH
13977: DOUBLE
13978: LD_INT 1
13980: DEC
13981: ST_TO_ADDR
13982: LD_VAR 0 1
13986: PUSH
13987: FOR_TO
13988: IFFALSE 14076
// begin k := j + d ;
13990: LD_ADDR_VAR 0 8
13994: PUSH
13995: LD_VAR 0 7
13999: PUSH
14000: LD_VAR 0 9
14004: PLUS
14005: ST_TO_ADDR
// if k > array then
14006: LD_VAR 0 8
14010: PUSH
14011: LD_VAR 0 1
14015: GREATER
14016: IFFALSE 14026
// k := 1 ;
14018: LD_ADDR_VAR 0 8
14022: PUSH
14023: LD_INT 1
14025: ST_TO_ADDR
// if not k then
14026: LD_VAR 0 8
14030: NOT
14031: IFFALSE 14043
// k := array ;
14033: LD_ADDR_VAR 0 8
14037: PUSH
14038: LD_VAR 0 1
14042: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14043: LD_ADDR_VAR 0 10
14047: PUSH
14048: LD_VAR 0 10
14052: PPUSH
14053: LD_VAR 0 8
14057: PPUSH
14058: LD_VAR 0 1
14062: PUSH
14063: LD_VAR 0 7
14067: ARRAY
14068: PPUSH
14069: CALL_OW 1
14073: ST_TO_ADDR
// end ;
14074: GO 13987
14076: POP
14077: POP
// array := tmp ;
14078: LD_ADDR_VAR 0 1
14082: PUSH
14083: LD_VAR 0 10
14087: ST_TO_ADDR
// end ;
14088: GO 13969
14090: POP
14091: POP
// result := array ;
14092: LD_ADDR_VAR 0 5
14096: PUSH
14097: LD_VAR 0 1
14101: ST_TO_ADDR
// end ;
14102: LD_VAR 0 5
14106: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14107: LD_INT 0
14109: PPUSH
14110: PPUSH
// result := 0 ;
14111: LD_ADDR_VAR 0 3
14115: PUSH
14116: LD_INT 0
14118: ST_TO_ADDR
// if not array or not value in array then
14119: LD_VAR 0 1
14123: NOT
14124: PUSH
14125: LD_VAR 0 2
14129: PUSH
14130: LD_VAR 0 1
14134: IN
14135: NOT
14136: OR
14137: IFFALSE 14141
// exit ;
14139: GO 14195
// for i = 1 to array do
14141: LD_ADDR_VAR 0 4
14145: PUSH
14146: DOUBLE
14147: LD_INT 1
14149: DEC
14150: ST_TO_ADDR
14151: LD_VAR 0 1
14155: PUSH
14156: FOR_TO
14157: IFFALSE 14193
// if value = array [ i ] then
14159: LD_VAR 0 2
14163: PUSH
14164: LD_VAR 0 1
14168: PUSH
14169: LD_VAR 0 4
14173: ARRAY
14174: EQUAL
14175: IFFALSE 14191
// begin result := i ;
14177: LD_ADDR_VAR 0 3
14181: PUSH
14182: LD_VAR 0 4
14186: ST_TO_ADDR
// exit ;
14187: POP
14188: POP
14189: GO 14195
// end ;
14191: GO 14156
14193: POP
14194: POP
// end ;
14195: LD_VAR 0 3
14199: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14200: LD_INT 0
14202: PPUSH
// vc_chassis := chassis ;
14203: LD_ADDR_OWVAR 37
14207: PUSH
14208: LD_VAR 0 1
14212: ST_TO_ADDR
// vc_engine := engine ;
14213: LD_ADDR_OWVAR 39
14217: PUSH
14218: LD_VAR 0 2
14222: ST_TO_ADDR
// vc_control := control ;
14223: LD_ADDR_OWVAR 38
14227: PUSH
14228: LD_VAR 0 3
14232: ST_TO_ADDR
// vc_weapon := weapon ;
14233: LD_ADDR_OWVAR 40
14237: PUSH
14238: LD_VAR 0 4
14242: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14243: LD_ADDR_OWVAR 41
14247: PUSH
14248: LD_VAR 0 5
14252: ST_TO_ADDR
// end ;
14253: LD_VAR 0 6
14257: RET
// export function WantPlant ( unit ) ; var task ; begin
14258: LD_INT 0
14260: PPUSH
14261: PPUSH
// result := false ;
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_INT 0
14269: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14270: LD_ADDR_VAR 0 3
14274: PUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 437
14284: ST_TO_ADDR
// if task then
14285: LD_VAR 0 3
14289: IFFALSE 14317
// if task [ 1 ] [ 1 ] = p then
14291: LD_VAR 0 3
14295: PUSH
14296: LD_INT 1
14298: ARRAY
14299: PUSH
14300: LD_INT 1
14302: ARRAY
14303: PUSH
14304: LD_STRING p
14306: EQUAL
14307: IFFALSE 14317
// result := true ;
14309: LD_ADDR_VAR 0 2
14313: PUSH
14314: LD_INT 1
14316: ST_TO_ADDR
// end ;
14317: LD_VAR 0 2
14321: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14322: LD_INT 0
14324: PPUSH
14325: PPUSH
14326: PPUSH
14327: PPUSH
// if pos < 1 then
14328: LD_VAR 0 2
14332: PUSH
14333: LD_INT 1
14335: LESS
14336: IFFALSE 14340
// exit ;
14338: GO 14643
// if pos = 1 then
14340: LD_VAR 0 2
14344: PUSH
14345: LD_INT 1
14347: EQUAL
14348: IFFALSE 14381
// result := Replace ( arr , pos [ 1 ] , value ) else
14350: LD_ADDR_VAR 0 4
14354: PUSH
14355: LD_VAR 0 1
14359: PPUSH
14360: LD_VAR 0 2
14364: PUSH
14365: LD_INT 1
14367: ARRAY
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: CALL_OW 1
14378: ST_TO_ADDR
14379: GO 14643
// begin tmp := arr ;
14381: LD_ADDR_VAR 0 6
14385: PUSH
14386: LD_VAR 0 1
14390: ST_TO_ADDR
// s_arr := [ tmp ] ;
14391: LD_ADDR_VAR 0 7
14395: PUSH
14396: LD_VAR 0 6
14400: PUSH
14401: EMPTY
14402: LIST
14403: ST_TO_ADDR
// for i = 1 to pos - 1 do
14404: LD_ADDR_VAR 0 5
14408: PUSH
14409: DOUBLE
14410: LD_INT 1
14412: DEC
14413: ST_TO_ADDR
14414: LD_VAR 0 2
14418: PUSH
14419: LD_INT 1
14421: MINUS
14422: PUSH
14423: FOR_TO
14424: IFFALSE 14469
// begin tmp := tmp [ pos [ i ] ] ;
14426: LD_ADDR_VAR 0 6
14430: PUSH
14431: LD_VAR 0 6
14435: PUSH
14436: LD_VAR 0 2
14440: PUSH
14441: LD_VAR 0 5
14445: ARRAY
14446: ARRAY
14447: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14448: LD_ADDR_VAR 0 7
14452: PUSH
14453: LD_VAR 0 7
14457: PUSH
14458: LD_VAR 0 6
14462: PUSH
14463: EMPTY
14464: LIST
14465: ADD
14466: ST_TO_ADDR
// end ;
14467: GO 14423
14469: POP
14470: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14471: LD_ADDR_VAR 0 6
14475: PUSH
14476: LD_VAR 0 6
14480: PPUSH
14481: LD_VAR 0 2
14485: PUSH
14486: LD_VAR 0 2
14490: ARRAY
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: CALL_OW 1
14501: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14502: LD_ADDR_VAR 0 7
14506: PUSH
14507: LD_VAR 0 7
14511: PPUSH
14512: LD_VAR 0 7
14516: PPUSH
14517: LD_VAR 0 6
14521: PPUSH
14522: CALL_OW 1
14526: ST_TO_ADDR
// for i = s_arr downto 2 do
14527: LD_ADDR_VAR 0 5
14531: PUSH
14532: DOUBLE
14533: LD_VAR 0 7
14537: INC
14538: ST_TO_ADDR
14539: LD_INT 2
14541: PUSH
14542: FOR_DOWNTO
14543: IFFALSE 14627
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14545: LD_ADDR_VAR 0 6
14549: PUSH
14550: LD_VAR 0 7
14554: PUSH
14555: LD_VAR 0 5
14559: PUSH
14560: LD_INT 1
14562: MINUS
14563: ARRAY
14564: PPUSH
14565: LD_VAR 0 2
14569: PUSH
14570: LD_VAR 0 5
14574: PUSH
14575: LD_INT 1
14577: MINUS
14578: ARRAY
14579: PPUSH
14580: LD_VAR 0 7
14584: PUSH
14585: LD_VAR 0 5
14589: ARRAY
14590: PPUSH
14591: CALL_OW 1
14595: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14596: LD_ADDR_VAR 0 7
14600: PUSH
14601: LD_VAR 0 7
14605: PPUSH
14606: LD_VAR 0 5
14610: PUSH
14611: LD_INT 1
14613: MINUS
14614: PPUSH
14615: LD_VAR 0 6
14619: PPUSH
14620: CALL_OW 1
14624: ST_TO_ADDR
// end ;
14625: GO 14542
14627: POP
14628: POP
// result := s_arr [ 1 ] ;
14629: LD_ADDR_VAR 0 4
14633: PUSH
14634: LD_VAR 0 7
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: ST_TO_ADDR
// end ; end ;
14643: LD_VAR 0 4
14647: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14648: LD_INT 0
14650: PPUSH
14651: PPUSH
// if not list then
14652: LD_VAR 0 1
14656: NOT
14657: IFFALSE 14661
// exit ;
14659: GO 14752
// i := list [ pos1 ] ;
14661: LD_ADDR_VAR 0 5
14665: PUSH
14666: LD_VAR 0 1
14670: PUSH
14671: LD_VAR 0 2
14675: ARRAY
14676: ST_TO_ADDR
// if not i then
14677: LD_VAR 0 5
14681: NOT
14682: IFFALSE 14686
// exit ;
14684: GO 14752
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14686: LD_ADDR_VAR 0 1
14690: PUSH
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_VAR 0 1
14705: PUSH
14706: LD_VAR 0 3
14710: ARRAY
14711: PPUSH
14712: CALL_OW 1
14716: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14717: LD_ADDR_VAR 0 1
14721: PUSH
14722: LD_VAR 0 1
14726: PPUSH
14727: LD_VAR 0 3
14731: PPUSH
14732: LD_VAR 0 5
14736: PPUSH
14737: CALL_OW 1
14741: ST_TO_ADDR
// result := list ;
14742: LD_ADDR_VAR 0 4
14746: PUSH
14747: LD_VAR 0 1
14751: ST_TO_ADDR
// end ;
14752: LD_VAR 0 4
14756: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14757: LD_INT 0
14759: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14760: LD_ADDR_VAR 0 5
14764: PUSH
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 250
14774: PPUSH
14775: LD_VAR 0 1
14779: PPUSH
14780: CALL_OW 251
14784: PPUSH
14785: LD_VAR 0 2
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: LD_VAR 0 4
14799: PPUSH
14800: CALL 15178 0 5
14804: ST_TO_ADDR
// end ;
14805: LD_VAR 0 5
14809: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14810: LD_INT 0
14812: PPUSH
14813: PPUSH
14814: PPUSH
14815: PPUSH
// if not list or not unit then
14816: LD_VAR 0 2
14820: NOT
14821: PUSH
14822: LD_VAR 0 1
14826: NOT
14827: OR
14828: IFFALSE 14832
// exit ;
14830: GO 15173
// result := [ ] ;
14832: LD_ADDR_VAR 0 5
14836: PUSH
14837: EMPTY
14838: ST_TO_ADDR
// for i in list do
14839: LD_ADDR_VAR 0 6
14843: PUSH
14844: LD_VAR 0 2
14848: PUSH
14849: FOR_IN
14850: IFFALSE 15068
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14852: LD_ADDR_VAR 0 8
14856: PUSH
14857: LD_VAR 0 1
14861: PPUSH
14862: LD_VAR 0 6
14866: PUSH
14867: LD_INT 1
14869: ARRAY
14870: PPUSH
14871: LD_VAR 0 6
14875: PUSH
14876: LD_INT 2
14878: ARRAY
14879: PPUSH
14880: CALL_OW 297
14884: ST_TO_ADDR
// if not Count ( result ) then
14885: LD_VAR 0 5
14889: PPUSH
14890: CALL 11462 0 1
14894: NOT
14895: IFFALSE 14928
// begin result := Join ( result , [ i , tmp ] ) ;
14897: LD_ADDR_VAR 0 5
14901: PUSH
14902: LD_VAR 0 5
14906: PPUSH
14907: LD_VAR 0 6
14911: PUSH
14912: LD_VAR 0 8
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PPUSH
14921: CALL 47071 0 2
14925: ST_TO_ADDR
// continue ;
14926: GO 14849
// end ; if result [ result ] [ 2 ] <= tmp then
14928: LD_VAR 0 5
14932: PUSH
14933: LD_VAR 0 5
14937: ARRAY
14938: PUSH
14939: LD_INT 2
14941: ARRAY
14942: PUSH
14943: LD_VAR 0 8
14947: LESSEQUAL
14948: IFFALSE 14981
// result := Join ( result , [ i , tmp ] ) else
14950: LD_ADDR_VAR 0 5
14954: PUSH
14955: LD_VAR 0 5
14959: PPUSH
14960: LD_VAR 0 6
14964: PUSH
14965: LD_VAR 0 8
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL 47071 0 2
14978: ST_TO_ADDR
14979: GO 15066
// begin for j := 1 to Count ( result ) do
14981: LD_ADDR_VAR 0 7
14985: PUSH
14986: DOUBLE
14987: LD_INT 1
14989: DEC
14990: ST_TO_ADDR
14991: LD_VAR 0 5
14995: PPUSH
14996: CALL 11462 0 1
15000: PUSH
15001: FOR_TO
15002: IFFALSE 15064
// begin if tmp < result [ j ] [ 2 ] then
15004: LD_VAR 0 8
15008: PUSH
15009: LD_VAR 0 5
15013: PUSH
15014: LD_VAR 0 7
15018: ARRAY
15019: PUSH
15020: LD_INT 2
15022: ARRAY
15023: LESS
15024: IFFALSE 15062
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15026: LD_ADDR_VAR 0 5
15030: PUSH
15031: LD_VAR 0 5
15035: PPUSH
15036: LD_VAR 0 7
15040: PPUSH
15041: LD_VAR 0 6
15045: PUSH
15046: LD_VAR 0 8
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 2
15059: ST_TO_ADDR
// break ;
15060: GO 15064
// end ; end ;
15062: GO 15001
15064: POP
15065: POP
// end ; end ;
15066: GO 14849
15068: POP
15069: POP
// if result and not asc then
15070: LD_VAR 0 5
15074: PUSH
15075: LD_VAR 0 3
15079: NOT
15080: AND
15081: IFFALSE 15098
// result := ReverseArray ( result ) ;
15083: LD_ADDR_VAR 0 5
15087: PUSH
15088: LD_VAR 0 5
15092: PPUSH
15093: CALL 42338 0 1
15097: ST_TO_ADDR
// tmp := [ ] ;
15098: LD_ADDR_VAR 0 8
15102: PUSH
15103: EMPTY
15104: ST_TO_ADDR
// if mode then
15105: LD_VAR 0 4
15109: IFFALSE 15173
// begin for i := 1 to result do
15111: LD_ADDR_VAR 0 6
15115: PUSH
15116: DOUBLE
15117: LD_INT 1
15119: DEC
15120: ST_TO_ADDR
15121: LD_VAR 0 5
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15161
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15129: LD_ADDR_VAR 0 8
15133: PUSH
15134: LD_VAR 0 8
15138: PPUSH
15139: LD_VAR 0 5
15143: PUSH
15144: LD_VAR 0 6
15148: ARRAY
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: PPUSH
15154: CALL 47071 0 2
15158: ST_TO_ADDR
15159: GO 15126
15161: POP
15162: POP
// result := tmp ;
15163: LD_ADDR_VAR 0 5
15167: PUSH
15168: LD_VAR 0 8
15172: ST_TO_ADDR
// end ; end ;
15173: LD_VAR 0 5
15177: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15178: LD_INT 0
15180: PPUSH
15181: PPUSH
15182: PPUSH
15183: PPUSH
// if not list then
15184: LD_VAR 0 3
15188: NOT
15189: IFFALSE 15193
// exit ;
15191: GO 15581
// result := [ ] ;
15193: LD_ADDR_VAR 0 6
15197: PUSH
15198: EMPTY
15199: ST_TO_ADDR
// for i in list do
15200: LD_ADDR_VAR 0 7
15204: PUSH
15205: LD_VAR 0 3
15209: PUSH
15210: FOR_IN
15211: IFFALSE 15413
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15213: LD_ADDR_VAR 0 9
15217: PUSH
15218: LD_VAR 0 7
15222: PPUSH
15223: LD_VAR 0 1
15227: PPUSH
15228: LD_VAR 0 2
15232: PPUSH
15233: CALL_OW 297
15237: ST_TO_ADDR
// if not result then
15238: LD_VAR 0 6
15242: NOT
15243: IFFALSE 15269
// result := [ [ i , tmp ] ] else
15245: LD_ADDR_VAR 0 6
15249: PUSH
15250: LD_VAR 0 7
15254: PUSH
15255: LD_VAR 0 9
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: EMPTY
15265: LIST
15266: ST_TO_ADDR
15267: GO 15411
// begin if result [ result ] [ 2 ] <= tmp then
15269: LD_VAR 0 6
15273: PUSH
15274: LD_VAR 0 6
15278: ARRAY
15279: PUSH
15280: LD_INT 2
15282: ARRAY
15283: PUSH
15284: LD_VAR 0 9
15288: LESSEQUAL
15289: IFFALSE 15331
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15291: LD_ADDR_VAR 0 6
15295: PUSH
15296: LD_VAR 0 6
15300: PPUSH
15301: LD_VAR 0 6
15305: PUSH
15306: LD_INT 1
15308: PLUS
15309: PPUSH
15310: LD_VAR 0 7
15314: PUSH
15315: LD_VAR 0 9
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PPUSH
15324: CALL_OW 2
15328: ST_TO_ADDR
15329: GO 15411
// for j := 1 to result do
15331: LD_ADDR_VAR 0 8
15335: PUSH
15336: DOUBLE
15337: LD_INT 1
15339: DEC
15340: ST_TO_ADDR
15341: LD_VAR 0 6
15345: PUSH
15346: FOR_TO
15347: IFFALSE 15409
// begin if tmp < result [ j ] [ 2 ] then
15349: LD_VAR 0 9
15353: PUSH
15354: LD_VAR 0 6
15358: PUSH
15359: LD_VAR 0 8
15363: ARRAY
15364: PUSH
15365: LD_INT 2
15367: ARRAY
15368: LESS
15369: IFFALSE 15407
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15371: LD_ADDR_VAR 0 6
15375: PUSH
15376: LD_VAR 0 6
15380: PPUSH
15381: LD_VAR 0 8
15385: PPUSH
15386: LD_VAR 0 7
15390: PUSH
15391: LD_VAR 0 9
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PPUSH
15400: CALL_OW 2
15404: ST_TO_ADDR
// break ;
15405: GO 15409
// end ; end ;
15407: GO 15346
15409: POP
15410: POP
// end ; end ;
15411: GO 15210
15413: POP
15414: POP
// if result and not asc then
15415: LD_VAR 0 6
15419: PUSH
15420: LD_VAR 0 4
15424: NOT
15425: AND
15426: IFFALSE 15501
// begin tmp := result ;
15428: LD_ADDR_VAR 0 9
15432: PUSH
15433: LD_VAR 0 6
15437: ST_TO_ADDR
// for i = tmp downto 1 do
15438: LD_ADDR_VAR 0 7
15442: PUSH
15443: DOUBLE
15444: LD_VAR 0 9
15448: INC
15449: ST_TO_ADDR
15450: LD_INT 1
15452: PUSH
15453: FOR_DOWNTO
15454: IFFALSE 15499
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15456: LD_ADDR_VAR 0 6
15460: PUSH
15461: LD_VAR 0 6
15465: PPUSH
15466: LD_VAR 0 9
15470: PUSH
15471: LD_VAR 0 7
15475: MINUS
15476: PUSH
15477: LD_INT 1
15479: PLUS
15480: PPUSH
15481: LD_VAR 0 9
15485: PUSH
15486: LD_VAR 0 7
15490: ARRAY
15491: PPUSH
15492: CALL_OW 1
15496: ST_TO_ADDR
15497: GO 15453
15499: POP
15500: POP
// end ; tmp := [ ] ;
15501: LD_ADDR_VAR 0 9
15505: PUSH
15506: EMPTY
15507: ST_TO_ADDR
// if mode then
15508: LD_VAR 0 5
15512: IFFALSE 15581
// begin for i = 1 to result do
15514: LD_ADDR_VAR 0 7
15518: PUSH
15519: DOUBLE
15520: LD_INT 1
15522: DEC
15523: ST_TO_ADDR
15524: LD_VAR 0 6
15528: PUSH
15529: FOR_TO
15530: IFFALSE 15569
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15532: LD_ADDR_VAR 0 9
15536: PUSH
15537: LD_VAR 0 9
15541: PPUSH
15542: LD_VAR 0 7
15546: PPUSH
15547: LD_VAR 0 6
15551: PUSH
15552: LD_VAR 0 7
15556: ARRAY
15557: PUSH
15558: LD_INT 1
15560: ARRAY
15561: PPUSH
15562: CALL_OW 1
15566: ST_TO_ADDR
15567: GO 15529
15569: POP
15570: POP
// result := tmp ;
15571: LD_ADDR_VAR 0 6
15575: PUSH
15576: LD_VAR 0 9
15580: ST_TO_ADDR
// end ; end ;
15581: LD_VAR 0 6
15585: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15586: LD_INT 0
15588: PPUSH
15589: PPUSH
15590: PPUSH
15591: PPUSH
15592: PPUSH
15593: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15594: LD_ADDR_VAR 0 5
15598: PUSH
15599: LD_INT 0
15601: PUSH
15602: LD_INT 0
15604: PUSH
15605: LD_INT 0
15607: PUSH
15608: EMPTY
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: ST_TO_ADDR
// if not x or not y then
15616: LD_VAR 0 2
15620: NOT
15621: PUSH
15622: LD_VAR 0 3
15626: NOT
15627: OR
15628: IFFALSE 15632
// exit ;
15630: GO 17282
// if not range then
15632: LD_VAR 0 4
15636: NOT
15637: IFFALSE 15647
// range := 10 ;
15639: LD_ADDR_VAR 0 4
15643: PUSH
15644: LD_INT 10
15646: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15647: LD_ADDR_VAR 0 8
15651: PUSH
15652: LD_INT 81
15654: PUSH
15655: LD_VAR 0 1
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 92
15666: PUSH
15667: LD_VAR 0 2
15671: PUSH
15672: LD_VAR 0 3
15676: PUSH
15677: LD_VAR 0 4
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 3
15690: PUSH
15691: LD_INT 21
15693: PUSH
15694: LD_INT 3
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: LIST
15709: PPUSH
15710: CALL_OW 69
15714: ST_TO_ADDR
// if not tmp then
15715: LD_VAR 0 8
15719: NOT
15720: IFFALSE 15724
// exit ;
15722: GO 17282
// for i in tmp do
15724: LD_ADDR_VAR 0 6
15728: PUSH
15729: LD_VAR 0 8
15733: PUSH
15734: FOR_IN
15735: IFFALSE 17257
// begin points := [ 0 , 0 , 0 ] ;
15737: LD_ADDR_VAR 0 9
15741: PUSH
15742: LD_INT 0
15744: PUSH
15745: LD_INT 0
15747: PUSH
15748: LD_INT 0
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: ST_TO_ADDR
// bpoints := 1 ;
15756: LD_ADDR_VAR 0 10
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15764: LD_VAR 0 6
15768: PPUSH
15769: CALL_OW 247
15773: PUSH
15774: LD_INT 1
15776: DOUBLE
15777: EQUAL
15778: IFTRUE 15782
15780: GO 16360
15782: POP
// begin if GetClass ( i ) = 1 then
15783: LD_VAR 0 6
15787: PPUSH
15788: CALL_OW 257
15792: PUSH
15793: LD_INT 1
15795: EQUAL
15796: IFFALSE 15817
// points := [ 10 , 5 , 3 ] ;
15798: LD_ADDR_VAR 0 9
15802: PUSH
15803: LD_INT 10
15805: PUSH
15806: LD_INT 5
15808: PUSH
15809: LD_INT 3
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15817: LD_VAR 0 6
15821: PPUSH
15822: CALL_OW 257
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: LD_INT 3
15832: PUSH
15833: LD_INT 4
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: IN
15841: IFFALSE 15862
// points := [ 3 , 2 , 1 ] ;
15843: LD_ADDR_VAR 0 9
15847: PUSH
15848: LD_INT 3
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: LD_INT 1
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: LIST
15861: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15862: LD_VAR 0 6
15866: PPUSH
15867: CALL_OW 257
15871: PUSH
15872: LD_INT 5
15874: EQUAL
15875: IFFALSE 15896
// points := [ 130 , 5 , 2 ] ;
15877: LD_ADDR_VAR 0 9
15881: PUSH
15882: LD_INT 130
15884: PUSH
15885: LD_INT 5
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: LIST
15895: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15896: LD_VAR 0 6
15900: PPUSH
15901: CALL_OW 257
15905: PUSH
15906: LD_INT 8
15908: EQUAL
15909: IFFALSE 15930
// points := [ 35 , 35 , 30 ] ;
15911: LD_ADDR_VAR 0 9
15915: PUSH
15916: LD_INT 35
15918: PUSH
15919: LD_INT 35
15921: PUSH
15922: LD_INT 30
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15930: LD_VAR 0 6
15934: PPUSH
15935: CALL_OW 257
15939: PUSH
15940: LD_INT 9
15942: EQUAL
15943: IFFALSE 15964
// points := [ 20 , 55 , 40 ] ;
15945: LD_ADDR_VAR 0 9
15949: PUSH
15950: LD_INT 20
15952: PUSH
15953: LD_INT 55
15955: PUSH
15956: LD_INT 40
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: LIST
15963: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15964: LD_VAR 0 6
15968: PPUSH
15969: CALL_OW 257
15973: PUSH
15974: LD_INT 12
15976: PUSH
15977: LD_INT 16
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: IN
15984: IFFALSE 16005
// points := [ 5 , 3 , 2 ] ;
15986: LD_ADDR_VAR 0 9
15990: PUSH
15991: LD_INT 5
15993: PUSH
15994: LD_INT 3
15996: PUSH
15997: LD_INT 2
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16005: LD_VAR 0 6
16009: PPUSH
16010: CALL_OW 257
16014: PUSH
16015: LD_INT 17
16017: EQUAL
16018: IFFALSE 16039
// points := [ 100 , 50 , 75 ] ;
16020: LD_ADDR_VAR 0 9
16024: PUSH
16025: LD_INT 100
16027: PUSH
16028: LD_INT 50
16030: PUSH
16031: LD_INT 75
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16039: LD_VAR 0 6
16043: PPUSH
16044: CALL_OW 257
16048: PUSH
16049: LD_INT 15
16051: EQUAL
16052: IFFALSE 16073
// points := [ 10 , 5 , 3 ] ;
16054: LD_ADDR_VAR 0 9
16058: PUSH
16059: LD_INT 10
16061: PUSH
16062: LD_INT 5
16064: PUSH
16065: LD_INT 3
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16073: LD_VAR 0 6
16077: PPUSH
16078: CALL_OW 257
16082: PUSH
16083: LD_INT 14
16085: EQUAL
16086: IFFALSE 16107
// points := [ 10 , 0 , 0 ] ;
16088: LD_ADDR_VAR 0 9
16092: PUSH
16093: LD_INT 10
16095: PUSH
16096: LD_INT 0
16098: PUSH
16099: LD_INT 0
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: LIST
16106: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16107: LD_VAR 0 6
16111: PPUSH
16112: CALL_OW 257
16116: PUSH
16117: LD_INT 11
16119: EQUAL
16120: IFFALSE 16141
// points := [ 30 , 10 , 5 ] ;
16122: LD_ADDR_VAR 0 9
16126: PUSH
16127: LD_INT 30
16129: PUSH
16130: LD_INT 10
16132: PUSH
16133: LD_INT 5
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16141: LD_VAR 0 1
16145: PPUSH
16146: LD_INT 5
16148: PPUSH
16149: CALL_OW 321
16153: PUSH
16154: LD_INT 2
16156: EQUAL
16157: IFFALSE 16174
// bpoints := bpoints * 1.8 ;
16159: LD_ADDR_VAR 0 10
16163: PUSH
16164: LD_VAR 0 10
16168: PUSH
16169: LD_REAL  1.80000000000000E+0000
16172: MUL
16173: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16174: LD_VAR 0 6
16178: PPUSH
16179: CALL_OW 257
16183: PUSH
16184: LD_INT 1
16186: PUSH
16187: LD_INT 2
16189: PUSH
16190: LD_INT 3
16192: PUSH
16193: LD_INT 4
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: IN
16202: PUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: LD_INT 51
16210: PPUSH
16211: CALL_OW 321
16215: PUSH
16216: LD_INT 2
16218: EQUAL
16219: AND
16220: IFFALSE 16237
// bpoints := bpoints * 1.2 ;
16222: LD_ADDR_VAR 0 10
16226: PUSH
16227: LD_VAR 0 10
16231: PUSH
16232: LD_REAL  1.20000000000000E+0000
16235: MUL
16236: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16237: LD_VAR 0 6
16241: PPUSH
16242: CALL_OW 257
16246: PUSH
16247: LD_INT 5
16249: PUSH
16250: LD_INT 7
16252: PUSH
16253: LD_INT 9
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: IN
16261: PUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: LD_INT 52
16269: PPUSH
16270: CALL_OW 321
16274: PUSH
16275: LD_INT 2
16277: EQUAL
16278: AND
16279: IFFALSE 16296
// bpoints := bpoints * 1.5 ;
16281: LD_ADDR_VAR 0 10
16285: PUSH
16286: LD_VAR 0 10
16290: PUSH
16291: LD_REAL  1.50000000000000E+0000
16294: MUL
16295: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16296: LD_VAR 0 1
16300: PPUSH
16301: LD_INT 66
16303: PPUSH
16304: CALL_OW 321
16308: PUSH
16309: LD_INT 2
16311: EQUAL
16312: IFFALSE 16329
// bpoints := bpoints * 1.1 ;
16314: LD_ADDR_VAR 0 10
16318: PUSH
16319: LD_VAR 0 10
16323: PUSH
16324: LD_REAL  1.10000000000000E+0000
16327: MUL
16328: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16329: LD_ADDR_VAR 0 10
16333: PUSH
16334: LD_VAR 0 10
16338: PUSH
16339: LD_VAR 0 6
16343: PPUSH
16344: LD_INT 1
16346: PPUSH
16347: CALL_OW 259
16351: PUSH
16352: LD_REAL  1.15000000000000E+0000
16355: MUL
16356: MUL
16357: ST_TO_ADDR
// end ; unit_vehicle :
16358: GO 17186
16360: LD_INT 2
16362: DOUBLE
16363: EQUAL
16364: IFTRUE 16368
16366: GO 17174
16368: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16369: LD_VAR 0 6
16373: PPUSH
16374: CALL_OW 264
16378: PUSH
16379: LD_INT 2
16381: PUSH
16382: LD_INT 42
16384: PUSH
16385: LD_INT 24
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: IN
16393: IFFALSE 16414
// points := [ 25 , 5 , 3 ] ;
16395: LD_ADDR_VAR 0 9
16399: PUSH
16400: LD_INT 25
16402: PUSH
16403: LD_INT 5
16405: PUSH
16406: LD_INT 3
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16414: LD_VAR 0 6
16418: PPUSH
16419: CALL_OW 264
16423: PUSH
16424: LD_INT 4
16426: PUSH
16427: LD_INT 43
16429: PUSH
16430: LD_INT 25
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: LIST
16437: IN
16438: IFFALSE 16459
// points := [ 40 , 15 , 5 ] ;
16440: LD_ADDR_VAR 0 9
16444: PUSH
16445: LD_INT 40
16447: PUSH
16448: LD_INT 15
16450: PUSH
16451: LD_INT 5
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16459: LD_VAR 0 6
16463: PPUSH
16464: CALL_OW 264
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: LD_INT 23
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: IN
16479: IFFALSE 16500
// points := [ 7 , 25 , 8 ] ;
16481: LD_ADDR_VAR 0 9
16485: PUSH
16486: LD_INT 7
16488: PUSH
16489: LD_INT 25
16491: PUSH
16492: LD_INT 8
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: LIST
16499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16500: LD_VAR 0 6
16504: PPUSH
16505: CALL_OW 264
16509: PUSH
16510: LD_INT 5
16512: PUSH
16513: LD_INT 27
16515: PUSH
16516: LD_INT 44
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: LIST
16523: IN
16524: IFFALSE 16545
// points := [ 14 , 50 , 16 ] ;
16526: LD_ADDR_VAR 0 9
16530: PUSH
16531: LD_INT 14
16533: PUSH
16534: LD_INT 50
16536: PUSH
16537: LD_INT 16
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16545: LD_VAR 0 6
16549: PPUSH
16550: CALL_OW 264
16554: PUSH
16555: LD_INT 6
16557: PUSH
16558: LD_INT 46
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: IN
16565: IFFALSE 16586
// points := [ 32 , 120 , 70 ] ;
16567: LD_ADDR_VAR 0 9
16571: PUSH
16572: LD_INT 32
16574: PUSH
16575: LD_INT 120
16577: PUSH
16578: LD_INT 70
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: LIST
16585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16586: LD_VAR 0 6
16590: PPUSH
16591: CALL_OW 264
16595: PUSH
16596: LD_INT 7
16598: PUSH
16599: LD_INT 28
16601: PUSH
16602: LD_INT 45
16604: PUSH
16605: LD_INT 92
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: IN
16614: IFFALSE 16635
// points := [ 35 , 20 , 45 ] ;
16616: LD_ADDR_VAR 0 9
16620: PUSH
16621: LD_INT 35
16623: PUSH
16624: LD_INT 20
16626: PUSH
16627: LD_INT 45
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16635: LD_VAR 0 6
16639: PPUSH
16640: CALL_OW 264
16644: PUSH
16645: LD_INT 47
16647: PUSH
16648: EMPTY
16649: LIST
16650: IN
16651: IFFALSE 16672
// points := [ 67 , 45 , 75 ] ;
16653: LD_ADDR_VAR 0 9
16657: PUSH
16658: LD_INT 67
16660: PUSH
16661: LD_INT 45
16663: PUSH
16664: LD_INT 75
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16672: LD_VAR 0 6
16676: PPUSH
16677: CALL_OW 264
16681: PUSH
16682: LD_INT 26
16684: PUSH
16685: EMPTY
16686: LIST
16687: IN
16688: IFFALSE 16709
// points := [ 120 , 30 , 80 ] ;
16690: LD_ADDR_VAR 0 9
16694: PUSH
16695: LD_INT 120
16697: PUSH
16698: LD_INT 30
16700: PUSH
16701: LD_INT 80
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16709: LD_VAR 0 6
16713: PPUSH
16714: CALL_OW 264
16718: PUSH
16719: LD_INT 22
16721: PUSH
16722: EMPTY
16723: LIST
16724: IN
16725: IFFALSE 16746
// points := [ 40 , 1 , 1 ] ;
16727: LD_ADDR_VAR 0 9
16731: PUSH
16732: LD_INT 40
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: LD_INT 1
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: LIST
16745: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16746: LD_VAR 0 6
16750: PPUSH
16751: CALL_OW 264
16755: PUSH
16756: LD_INT 29
16758: PUSH
16759: EMPTY
16760: LIST
16761: IN
16762: IFFALSE 16783
// points := [ 70 , 200 , 400 ] ;
16764: LD_ADDR_VAR 0 9
16768: PUSH
16769: LD_INT 70
16771: PUSH
16772: LD_INT 200
16774: PUSH
16775: LD_INT 400
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16783: LD_VAR 0 6
16787: PPUSH
16788: CALL_OW 264
16792: PUSH
16793: LD_INT 14
16795: PUSH
16796: LD_INT 53
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: IN
16803: IFFALSE 16824
// points := [ 40 , 10 , 20 ] ;
16805: LD_ADDR_VAR 0 9
16809: PUSH
16810: LD_INT 40
16812: PUSH
16813: LD_INT 10
16815: PUSH
16816: LD_INT 20
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16824: LD_VAR 0 6
16828: PPUSH
16829: CALL_OW 264
16833: PUSH
16834: LD_INT 9
16836: PUSH
16837: EMPTY
16838: LIST
16839: IN
16840: IFFALSE 16861
// points := [ 5 , 70 , 20 ] ;
16842: LD_ADDR_VAR 0 9
16846: PUSH
16847: LD_INT 5
16849: PUSH
16850: LD_INT 70
16852: PUSH
16853: LD_INT 20
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16861: LD_VAR 0 6
16865: PPUSH
16866: CALL_OW 264
16870: PUSH
16871: LD_INT 10
16873: PUSH
16874: EMPTY
16875: LIST
16876: IN
16877: IFFALSE 16898
// points := [ 35 , 110 , 70 ] ;
16879: LD_ADDR_VAR 0 9
16883: PUSH
16884: LD_INT 35
16886: PUSH
16887: LD_INT 110
16889: PUSH
16890: LD_INT 70
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16898: LD_VAR 0 6
16902: PPUSH
16903: CALL_OW 265
16907: PUSH
16908: LD_INT 25
16910: EQUAL
16911: IFFALSE 16932
// points := [ 80 , 65 , 100 ] ;
16913: LD_ADDR_VAR 0 9
16917: PUSH
16918: LD_INT 80
16920: PUSH
16921: LD_INT 65
16923: PUSH
16924: LD_INT 100
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: LIST
16931: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16932: LD_VAR 0 6
16936: PPUSH
16937: CALL_OW 263
16941: PUSH
16942: LD_INT 1
16944: EQUAL
16945: IFFALSE 16980
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16947: LD_ADDR_VAR 0 10
16951: PUSH
16952: LD_VAR 0 10
16956: PUSH
16957: LD_VAR 0 6
16961: PPUSH
16962: CALL_OW 311
16966: PPUSH
16967: LD_INT 3
16969: PPUSH
16970: CALL_OW 259
16974: PUSH
16975: LD_INT 4
16977: MUL
16978: MUL
16979: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16980: LD_VAR 0 6
16984: PPUSH
16985: CALL_OW 263
16989: PUSH
16990: LD_INT 2
16992: EQUAL
16993: IFFALSE 17044
// begin j := IsControledBy ( i ) ;
16995: LD_ADDR_VAR 0 7
16999: PUSH
17000: LD_VAR 0 6
17004: PPUSH
17005: CALL_OW 312
17009: ST_TO_ADDR
// if j then
17010: LD_VAR 0 7
17014: IFFALSE 17044
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17016: LD_ADDR_VAR 0 10
17020: PUSH
17021: LD_VAR 0 10
17025: PUSH
17026: LD_VAR 0 7
17030: PPUSH
17031: LD_INT 3
17033: PPUSH
17034: CALL_OW 259
17038: PUSH
17039: LD_INT 3
17041: MUL
17042: MUL
17043: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17044: LD_VAR 0 6
17048: PPUSH
17049: CALL_OW 264
17053: PUSH
17054: LD_INT 5
17056: PUSH
17057: LD_INT 6
17059: PUSH
17060: LD_INT 46
17062: PUSH
17063: LD_INT 44
17065: PUSH
17066: LD_INT 47
17068: PUSH
17069: LD_INT 45
17071: PUSH
17072: LD_INT 28
17074: PUSH
17075: LD_INT 7
17077: PUSH
17078: LD_INT 27
17080: PUSH
17081: LD_INT 29
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: IN
17096: PUSH
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_INT 52
17104: PPUSH
17105: CALL_OW 321
17109: PUSH
17110: LD_INT 2
17112: EQUAL
17113: AND
17114: IFFALSE 17131
// bpoints := bpoints * 1.2 ;
17116: LD_ADDR_VAR 0 10
17120: PUSH
17121: LD_VAR 0 10
17125: PUSH
17126: LD_REAL  1.20000000000000E+0000
17129: MUL
17130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17131: LD_VAR 0 6
17135: PPUSH
17136: CALL_OW 264
17140: PUSH
17141: LD_INT 6
17143: PUSH
17144: LD_INT 46
17146: PUSH
17147: LD_INT 47
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: LIST
17154: IN
17155: IFFALSE 17172
// bpoints := bpoints * 1.2 ;
17157: LD_ADDR_VAR 0 10
17161: PUSH
17162: LD_VAR 0 10
17166: PUSH
17167: LD_REAL  1.20000000000000E+0000
17170: MUL
17171: ST_TO_ADDR
// end ; unit_building :
17172: GO 17186
17174: LD_INT 3
17176: DOUBLE
17177: EQUAL
17178: IFTRUE 17182
17180: GO 17185
17182: POP
// ; end ;
17183: GO 17186
17185: POP
// for j = 1 to 3 do
17186: LD_ADDR_VAR 0 7
17190: PUSH
17191: DOUBLE
17192: LD_INT 1
17194: DEC
17195: ST_TO_ADDR
17196: LD_INT 3
17198: PUSH
17199: FOR_TO
17200: IFFALSE 17253
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17202: LD_ADDR_VAR 0 5
17206: PUSH
17207: LD_VAR 0 5
17211: PPUSH
17212: LD_VAR 0 7
17216: PPUSH
17217: LD_VAR 0 5
17221: PUSH
17222: LD_VAR 0 7
17226: ARRAY
17227: PUSH
17228: LD_VAR 0 9
17232: PUSH
17233: LD_VAR 0 7
17237: ARRAY
17238: PUSH
17239: LD_VAR 0 10
17243: MUL
17244: PLUS
17245: PPUSH
17246: CALL_OW 1
17250: ST_TO_ADDR
17251: GO 17199
17253: POP
17254: POP
// end ;
17255: GO 15734
17257: POP
17258: POP
// result := Replace ( result , 4 , tmp ) ;
17259: LD_ADDR_VAR 0 5
17263: PUSH
17264: LD_VAR 0 5
17268: PPUSH
17269: LD_INT 4
17271: PPUSH
17272: LD_VAR 0 8
17276: PPUSH
17277: CALL_OW 1
17281: ST_TO_ADDR
// end ;
17282: LD_VAR 0 5
17286: RET
// export function DangerAtRange ( unit , range ) ; begin
17287: LD_INT 0
17289: PPUSH
// if not unit then
17290: LD_VAR 0 1
17294: NOT
17295: IFFALSE 17299
// exit ;
17297: GO 17344
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17299: LD_ADDR_VAR 0 3
17303: PUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 255
17313: PPUSH
17314: LD_VAR 0 1
17318: PPUSH
17319: CALL_OW 250
17323: PPUSH
17324: LD_VAR 0 1
17328: PPUSH
17329: CALL_OW 251
17333: PPUSH
17334: LD_VAR 0 2
17338: PPUSH
17339: CALL 15586 0 4
17343: ST_TO_ADDR
// end ;
17344: LD_VAR 0 3
17348: RET
// export function DangerInArea ( side , area ) ; begin
17349: LD_INT 0
17351: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17352: LD_ADDR_VAR 0 3
17356: PUSH
17357: LD_VAR 0 2
17361: PPUSH
17362: LD_INT 81
17364: PUSH
17365: LD_VAR 0 1
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PPUSH
17374: CALL_OW 70
17378: ST_TO_ADDR
// end ;
17379: LD_VAR 0 3
17383: RET
// export function IsExtension ( b ) ; begin
17384: LD_INT 0
17386: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17387: LD_ADDR_VAR 0 2
17391: PUSH
17392: LD_VAR 0 1
17396: PUSH
17397: LD_INT 23
17399: PUSH
17400: LD_INT 20
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 17
17408: PUSH
17409: LD_INT 24
17411: PUSH
17412: LD_INT 21
17414: PUSH
17415: LD_INT 19
17417: PUSH
17418: LD_INT 16
17420: PUSH
17421: LD_INT 25
17423: PUSH
17424: LD_INT 18
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: IN
17439: ST_TO_ADDR
// end ;
17440: LD_VAR 0 2
17444: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17445: LD_INT 0
17447: PPUSH
17448: PPUSH
17449: PPUSH
// result := [ ] ;
17450: LD_ADDR_VAR 0 4
17454: PUSH
17455: EMPTY
17456: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17457: LD_ADDR_VAR 0 5
17461: PUSH
17462: LD_VAR 0 2
17466: PPUSH
17467: LD_INT 21
17469: PUSH
17470: LD_INT 3
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PPUSH
17477: CALL_OW 70
17481: ST_TO_ADDR
// if not tmp then
17482: LD_VAR 0 5
17486: NOT
17487: IFFALSE 17491
// exit ;
17489: GO 17555
// if checkLink then
17491: LD_VAR 0 3
17495: IFFALSE 17545
// begin for i in tmp do
17497: LD_ADDR_VAR 0 6
17501: PUSH
17502: LD_VAR 0 5
17506: PUSH
17507: FOR_IN
17508: IFFALSE 17543
// if GetBase ( i ) <> base then
17510: LD_VAR 0 6
17514: PPUSH
17515: CALL_OW 274
17519: PUSH
17520: LD_VAR 0 1
17524: NONEQUAL
17525: IFFALSE 17541
// ComLinkToBase ( base , i ) ;
17527: LD_VAR 0 1
17531: PPUSH
17532: LD_VAR 0 6
17536: PPUSH
17537: CALL_OW 169
17541: GO 17507
17543: POP
17544: POP
// end ; result := tmp ;
17545: LD_ADDR_VAR 0 4
17549: PUSH
17550: LD_VAR 0 5
17554: ST_TO_ADDR
// end ;
17555: LD_VAR 0 4
17559: RET
// export function ComComplete ( units , b ) ; var i ; begin
17560: LD_INT 0
17562: PPUSH
17563: PPUSH
// if not units then
17564: LD_VAR 0 1
17568: NOT
17569: IFFALSE 17573
// exit ;
17571: GO 17663
// for i in units do
17573: LD_ADDR_VAR 0 4
17577: PUSH
17578: LD_VAR 0 1
17582: PUSH
17583: FOR_IN
17584: IFFALSE 17661
// if BuildingStatus ( b ) = bs_build then
17586: LD_VAR 0 2
17590: PPUSH
17591: CALL_OW 461
17595: PUSH
17596: LD_INT 1
17598: EQUAL
17599: IFFALSE 17659
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17601: LD_VAR 0 4
17605: PPUSH
17606: LD_STRING h
17608: PUSH
17609: LD_VAR 0 2
17613: PPUSH
17614: CALL_OW 250
17618: PUSH
17619: LD_VAR 0 2
17623: PPUSH
17624: CALL_OW 251
17628: PUSH
17629: LD_VAR 0 2
17633: PUSH
17634: LD_INT 0
17636: PUSH
17637: LD_INT 0
17639: PUSH
17640: LD_INT 0
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: PPUSH
17655: CALL_OW 446
17659: GO 17583
17661: POP
17662: POP
// end ;
17663: LD_VAR 0 3
17667: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17668: LD_INT 0
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17676: LD_VAR 0 1
17680: NOT
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 263
17691: PUSH
17692: LD_INT 2
17694: NONEQUAL
17695: OR
17696: IFFALSE 17700
// exit ;
17698: GO 18016
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17700: LD_ADDR_VAR 0 6
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_VAR 0 1
17712: PPUSH
17713: CALL_OW 255
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 30
17727: PUSH
17728: LD_INT 36
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 34
17737: PUSH
17738: LD_INT 31
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: LIST
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PPUSH
17754: CALL_OW 69
17758: ST_TO_ADDR
// if not tmp then
17759: LD_VAR 0 6
17763: NOT
17764: IFFALSE 17768
// exit ;
17766: GO 18016
// result := [ ] ;
17768: LD_ADDR_VAR 0 2
17772: PUSH
17773: EMPTY
17774: ST_TO_ADDR
// for i in tmp do
17775: LD_ADDR_VAR 0 3
17779: PUSH
17780: LD_VAR 0 6
17784: PUSH
17785: FOR_IN
17786: IFFALSE 17857
// begin t := UnitsInside ( i ) ;
17788: LD_ADDR_VAR 0 4
17792: PUSH
17793: LD_VAR 0 3
17797: PPUSH
17798: CALL_OW 313
17802: ST_TO_ADDR
// if t then
17803: LD_VAR 0 4
17807: IFFALSE 17855
// for j in t do
17809: LD_ADDR_VAR 0 7
17813: PUSH
17814: LD_VAR 0 4
17818: PUSH
17819: FOR_IN
17820: IFFALSE 17853
// result := Replace ( result , result + 1 , j ) ;
17822: LD_ADDR_VAR 0 2
17826: PUSH
17827: LD_VAR 0 2
17831: PPUSH
17832: LD_VAR 0 2
17836: PUSH
17837: LD_INT 1
17839: PLUS
17840: PPUSH
17841: LD_VAR 0 7
17845: PPUSH
17846: CALL_OW 1
17850: ST_TO_ADDR
17851: GO 17819
17853: POP
17854: POP
// end ;
17855: GO 17785
17857: POP
17858: POP
// if not result then
17859: LD_VAR 0 2
17863: NOT
17864: IFFALSE 17868
// exit ;
17866: GO 18016
// mech := result [ 1 ] ;
17868: LD_ADDR_VAR 0 5
17872: PUSH
17873: LD_VAR 0 2
17877: PUSH
17878: LD_INT 1
17880: ARRAY
17881: ST_TO_ADDR
// if result > 1 then
17882: LD_VAR 0 2
17886: PUSH
17887: LD_INT 1
17889: GREATER
17890: IFFALSE 18002
// begin for i = 2 to result do
17892: LD_ADDR_VAR 0 3
17896: PUSH
17897: DOUBLE
17898: LD_INT 2
17900: DEC
17901: ST_TO_ADDR
17902: LD_VAR 0 2
17906: PUSH
17907: FOR_TO
17908: IFFALSE 18000
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17910: LD_ADDR_VAR 0 4
17914: PUSH
17915: LD_VAR 0 2
17919: PUSH
17920: LD_VAR 0 3
17924: ARRAY
17925: PPUSH
17926: LD_INT 3
17928: PPUSH
17929: CALL_OW 259
17933: PUSH
17934: LD_VAR 0 2
17938: PUSH
17939: LD_VAR 0 3
17943: ARRAY
17944: PPUSH
17945: CALL_OW 432
17949: MINUS
17950: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17951: LD_VAR 0 4
17955: PUSH
17956: LD_VAR 0 5
17960: PPUSH
17961: LD_INT 3
17963: PPUSH
17964: CALL_OW 259
17968: PUSH
17969: LD_VAR 0 5
17973: PPUSH
17974: CALL_OW 432
17978: MINUS
17979: GREATEREQUAL
17980: IFFALSE 17998
// mech := result [ i ] ;
17982: LD_ADDR_VAR 0 5
17986: PUSH
17987: LD_VAR 0 2
17991: PUSH
17992: LD_VAR 0 3
17996: ARRAY
17997: ST_TO_ADDR
// end ;
17998: GO 17907
18000: POP
18001: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18002: LD_VAR 0 1
18006: PPUSH
18007: LD_VAR 0 5
18011: PPUSH
18012: CALL_OW 135
// end ;
18016: LD_VAR 0 2
18020: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18021: LD_INT 0
18023: PPUSH
18024: PPUSH
18025: PPUSH
18026: PPUSH
18027: PPUSH
18028: PPUSH
18029: PPUSH
18030: PPUSH
18031: PPUSH
18032: PPUSH
18033: PPUSH
18034: PPUSH
18035: PPUSH
// result := [ ] ;
18036: LD_ADDR_VAR 0 7
18040: PUSH
18041: EMPTY
18042: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18043: LD_VAR 0 1
18047: PPUSH
18048: CALL_OW 266
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: LD_INT 1
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: IN
18063: NOT
18064: IFFALSE 18068
// exit ;
18066: GO 19702
// if name then
18068: LD_VAR 0 3
18072: IFFALSE 18088
// SetBName ( base_dep , name ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: LD_VAR 0 3
18083: PPUSH
18084: CALL_OW 500
// base := GetBase ( base_dep ) ;
18088: LD_ADDR_VAR 0 15
18092: PUSH
18093: LD_VAR 0 1
18097: PPUSH
18098: CALL_OW 274
18102: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18103: LD_ADDR_VAR 0 16
18107: PUSH
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL_OW 255
18117: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18118: LD_ADDR_VAR 0 17
18122: PUSH
18123: LD_VAR 0 1
18127: PPUSH
18128: CALL_OW 248
18132: ST_TO_ADDR
// if sources then
18133: LD_VAR 0 5
18137: IFFALSE 18184
// for i = 1 to 3 do
18139: LD_ADDR_VAR 0 8
18143: PUSH
18144: DOUBLE
18145: LD_INT 1
18147: DEC
18148: ST_TO_ADDR
18149: LD_INT 3
18151: PUSH
18152: FOR_TO
18153: IFFALSE 18182
// AddResourceType ( base , i , sources [ i ] ) ;
18155: LD_VAR 0 15
18159: PPUSH
18160: LD_VAR 0 8
18164: PPUSH
18165: LD_VAR 0 5
18169: PUSH
18170: LD_VAR 0 8
18174: ARRAY
18175: PPUSH
18176: CALL_OW 276
18180: GO 18152
18182: POP
18183: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18184: LD_ADDR_VAR 0 18
18188: PUSH
18189: LD_VAR 0 15
18193: PPUSH
18194: LD_VAR 0 2
18198: PPUSH
18199: LD_INT 1
18201: PPUSH
18202: CALL 17445 0 3
18206: ST_TO_ADDR
// InitHc ;
18207: CALL_OW 19
// InitUc ;
18211: CALL_OW 18
// uc_side := side ;
18215: LD_ADDR_OWVAR 20
18219: PUSH
18220: LD_VAR 0 16
18224: ST_TO_ADDR
// uc_nation := nation ;
18225: LD_ADDR_OWVAR 21
18229: PUSH
18230: LD_VAR 0 17
18234: ST_TO_ADDR
// if buildings then
18235: LD_VAR 0 18
18239: IFFALSE 19561
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18241: LD_ADDR_VAR 0 19
18245: PUSH
18246: LD_VAR 0 18
18250: PPUSH
18251: LD_INT 2
18253: PUSH
18254: LD_INT 30
18256: PUSH
18257: LD_INT 29
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 30
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: PPUSH
18279: CALL_OW 72
18283: ST_TO_ADDR
// if tmp then
18284: LD_VAR 0 19
18288: IFFALSE 18336
// for i in tmp do
18290: LD_ADDR_VAR 0 8
18294: PUSH
18295: LD_VAR 0 19
18299: PUSH
18300: FOR_IN
18301: IFFALSE 18334
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18303: LD_VAR 0 8
18307: PPUSH
18308: CALL_OW 250
18312: PPUSH
18313: LD_VAR 0 8
18317: PPUSH
18318: CALL_OW 251
18322: PPUSH
18323: LD_VAR 0 16
18327: PPUSH
18328: CALL_OW 441
18332: GO 18300
18334: POP
18335: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18336: LD_VAR 0 18
18340: PPUSH
18341: LD_INT 2
18343: PUSH
18344: LD_INT 30
18346: PUSH
18347: LD_INT 32
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 30
18356: PUSH
18357: LD_INT 33
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: PPUSH
18369: CALL_OW 72
18373: IFFALSE 18461
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18375: LD_ADDR_VAR 0 8
18379: PUSH
18380: LD_VAR 0 18
18384: PPUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 30
18390: PUSH
18391: LD_INT 32
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 30
18400: PUSH
18401: LD_INT 33
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: LIST
18412: PPUSH
18413: CALL_OW 72
18417: PUSH
18418: FOR_IN
18419: IFFALSE 18459
// begin if not GetBWeapon ( i ) then
18421: LD_VAR 0 8
18425: PPUSH
18426: CALL_OW 269
18430: NOT
18431: IFFALSE 18457
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18433: LD_VAR 0 8
18437: PPUSH
18438: LD_VAR 0 8
18442: PPUSH
18443: LD_VAR 0 2
18447: PPUSH
18448: CALL 19707 0 2
18452: PPUSH
18453: CALL_OW 431
// end ;
18457: GO 18418
18459: POP
18460: POP
// end ; for i = 1 to personel do
18461: LD_ADDR_VAR 0 8
18465: PUSH
18466: DOUBLE
18467: LD_INT 1
18469: DEC
18470: ST_TO_ADDR
18471: LD_VAR 0 6
18475: PUSH
18476: FOR_TO
18477: IFFALSE 19541
// begin if i > 4 then
18479: LD_VAR 0 8
18483: PUSH
18484: LD_INT 4
18486: GREATER
18487: IFFALSE 18491
// break ;
18489: GO 19541
// case i of 1 :
18491: LD_VAR 0 8
18495: PUSH
18496: LD_INT 1
18498: DOUBLE
18499: EQUAL
18500: IFTRUE 18504
18502: GO 18584
18504: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18505: LD_ADDR_VAR 0 12
18509: PUSH
18510: LD_VAR 0 18
18514: PPUSH
18515: LD_INT 22
18517: PUSH
18518: LD_VAR 0 16
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 58
18529: PUSH
18530: EMPTY
18531: LIST
18532: PUSH
18533: LD_INT 2
18535: PUSH
18536: LD_INT 30
18538: PUSH
18539: LD_INT 32
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 30
18548: PUSH
18549: LD_INT 4
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 30
18558: PUSH
18559: LD_INT 5
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: PPUSH
18577: CALL_OW 72
18581: ST_TO_ADDR
18582: GO 18806
18584: LD_INT 2
18586: DOUBLE
18587: EQUAL
18588: IFTRUE 18592
18590: GO 18654
18592: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18593: LD_ADDR_VAR 0 12
18597: PUSH
18598: LD_VAR 0 18
18602: PPUSH
18603: LD_INT 22
18605: PUSH
18606: LD_VAR 0 16
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 30
18620: PUSH
18621: LD_INT 0
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 30
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 72
18651: ST_TO_ADDR
18652: GO 18806
18654: LD_INT 3
18656: DOUBLE
18657: EQUAL
18658: IFTRUE 18662
18660: GO 18724
18662: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18663: LD_ADDR_VAR 0 12
18667: PUSH
18668: LD_VAR 0 18
18672: PPUSH
18673: LD_INT 22
18675: PUSH
18676: LD_VAR 0 16
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: LD_INT 30
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 30
18700: PUSH
18701: LD_INT 3
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PPUSH
18717: CALL_OW 72
18721: ST_TO_ADDR
18722: GO 18806
18724: LD_INT 4
18726: DOUBLE
18727: EQUAL
18728: IFTRUE 18732
18730: GO 18805
18732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18733: LD_ADDR_VAR 0 12
18737: PUSH
18738: LD_VAR 0 18
18742: PPUSH
18743: LD_INT 22
18745: PUSH
18746: LD_VAR 0 16
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: LD_INT 30
18760: PUSH
18761: LD_INT 6
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_INT 7
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 30
18780: PUSH
18781: LD_INT 8
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PPUSH
18798: CALL_OW 72
18802: ST_TO_ADDR
18803: GO 18806
18805: POP
// if i = 1 then
18806: LD_VAR 0 8
18810: PUSH
18811: LD_INT 1
18813: EQUAL
18814: IFFALSE 18925
// begin tmp := [ ] ;
18816: LD_ADDR_VAR 0 19
18820: PUSH
18821: EMPTY
18822: ST_TO_ADDR
// for j in f do
18823: LD_ADDR_VAR 0 9
18827: PUSH
18828: LD_VAR 0 12
18832: PUSH
18833: FOR_IN
18834: IFFALSE 18907
// if GetBType ( j ) = b_bunker then
18836: LD_VAR 0 9
18840: PPUSH
18841: CALL_OW 266
18845: PUSH
18846: LD_INT 32
18848: EQUAL
18849: IFFALSE 18876
// tmp := Insert ( tmp , 1 , j ) else
18851: LD_ADDR_VAR 0 19
18855: PUSH
18856: LD_VAR 0 19
18860: PPUSH
18861: LD_INT 1
18863: PPUSH
18864: LD_VAR 0 9
18868: PPUSH
18869: CALL_OW 2
18873: ST_TO_ADDR
18874: GO 18905
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18876: LD_ADDR_VAR 0 19
18880: PUSH
18881: LD_VAR 0 19
18885: PPUSH
18886: LD_VAR 0 19
18890: PUSH
18891: LD_INT 1
18893: PLUS
18894: PPUSH
18895: LD_VAR 0 9
18899: PPUSH
18900: CALL_OW 2
18904: ST_TO_ADDR
18905: GO 18833
18907: POP
18908: POP
// if tmp then
18909: LD_VAR 0 19
18913: IFFALSE 18925
// f := tmp ;
18915: LD_ADDR_VAR 0 12
18919: PUSH
18920: LD_VAR 0 19
18924: ST_TO_ADDR
// end ; x := personel [ i ] ;
18925: LD_ADDR_VAR 0 13
18929: PUSH
18930: LD_VAR 0 6
18934: PUSH
18935: LD_VAR 0 8
18939: ARRAY
18940: ST_TO_ADDR
// if x = - 1 then
18941: LD_VAR 0 13
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: EQUAL
18950: IFFALSE 19159
// begin for j in f do
18952: LD_ADDR_VAR 0 9
18956: PUSH
18957: LD_VAR 0 12
18961: PUSH
18962: FOR_IN
18963: IFFALSE 19155
// repeat InitHc ;
18965: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18969: LD_VAR 0 9
18973: PPUSH
18974: CALL_OW 266
18978: PUSH
18979: LD_INT 5
18981: EQUAL
18982: IFFALSE 19052
// begin if UnitsInside ( j ) < 3 then
18984: LD_VAR 0 9
18988: PPUSH
18989: CALL_OW 313
18993: PUSH
18994: LD_INT 3
18996: LESS
18997: IFFALSE 19033
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18999: LD_INT 0
19001: PPUSH
19002: LD_INT 5
19004: PUSH
19005: LD_INT 8
19007: PUSH
19008: LD_INT 9
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: LIST
19015: PUSH
19016: LD_VAR 0 17
19020: ARRAY
19021: PPUSH
19022: LD_VAR 0 4
19026: PPUSH
19027: CALL_OW 380
19031: GO 19050
// PrepareHuman ( false , i , skill ) ;
19033: LD_INT 0
19035: PPUSH
19036: LD_VAR 0 8
19040: PPUSH
19041: LD_VAR 0 4
19045: PPUSH
19046: CALL_OW 380
// end else
19050: GO 19069
// PrepareHuman ( false , i , skill ) ;
19052: LD_INT 0
19054: PPUSH
19055: LD_VAR 0 8
19059: PPUSH
19060: LD_VAR 0 4
19064: PPUSH
19065: CALL_OW 380
// un := CreateHuman ;
19069: LD_ADDR_VAR 0 14
19073: PUSH
19074: CALL_OW 44
19078: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19079: LD_ADDR_VAR 0 7
19083: PUSH
19084: LD_VAR 0 7
19088: PPUSH
19089: LD_INT 1
19091: PPUSH
19092: LD_VAR 0 14
19096: PPUSH
19097: CALL_OW 2
19101: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19102: LD_VAR 0 14
19106: PPUSH
19107: LD_VAR 0 9
19111: PPUSH
19112: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19116: LD_VAR 0 9
19120: PPUSH
19121: CALL_OW 313
19125: PUSH
19126: LD_INT 6
19128: EQUAL
19129: PUSH
19130: LD_VAR 0 9
19134: PPUSH
19135: CALL_OW 266
19139: PUSH
19140: LD_INT 32
19142: PUSH
19143: LD_INT 31
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: IN
19150: OR
19151: IFFALSE 18965
19153: GO 18962
19155: POP
19156: POP
// end else
19157: GO 19539
// for j = 1 to x do
19159: LD_ADDR_VAR 0 9
19163: PUSH
19164: DOUBLE
19165: LD_INT 1
19167: DEC
19168: ST_TO_ADDR
19169: LD_VAR 0 13
19173: PUSH
19174: FOR_TO
19175: IFFALSE 19537
// begin InitHc ;
19177: CALL_OW 19
// if not f then
19181: LD_VAR 0 12
19185: NOT
19186: IFFALSE 19275
// begin PrepareHuman ( false , i , skill ) ;
19188: LD_INT 0
19190: PPUSH
19191: LD_VAR 0 8
19195: PPUSH
19196: LD_VAR 0 4
19200: PPUSH
19201: CALL_OW 380
// un := CreateHuman ;
19205: LD_ADDR_VAR 0 14
19209: PUSH
19210: CALL_OW 44
19214: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19215: LD_ADDR_VAR 0 7
19219: PUSH
19220: LD_VAR 0 7
19224: PPUSH
19225: LD_INT 1
19227: PPUSH
19228: LD_VAR 0 14
19232: PPUSH
19233: CALL_OW 2
19237: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19238: LD_VAR 0 14
19242: PPUSH
19243: LD_VAR 0 1
19247: PPUSH
19248: CALL_OW 250
19252: PPUSH
19253: LD_VAR 0 1
19257: PPUSH
19258: CALL_OW 251
19262: PPUSH
19263: LD_INT 10
19265: PPUSH
19266: LD_INT 0
19268: PPUSH
19269: CALL_OW 50
// continue ;
19273: GO 19174
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19275: LD_VAR 0 12
19279: PUSH
19280: LD_INT 1
19282: ARRAY
19283: PPUSH
19284: CALL_OW 313
19288: PUSH
19289: LD_VAR 0 12
19293: PUSH
19294: LD_INT 1
19296: ARRAY
19297: PPUSH
19298: CALL_OW 266
19302: PUSH
19303: LD_INT 32
19305: PUSH
19306: LD_INT 31
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: IN
19313: AND
19314: PUSH
19315: LD_VAR 0 12
19319: PUSH
19320: LD_INT 1
19322: ARRAY
19323: PPUSH
19324: CALL_OW 313
19328: PUSH
19329: LD_INT 6
19331: EQUAL
19332: OR
19333: IFFALSE 19353
// f := Delete ( f , 1 ) ;
19335: LD_ADDR_VAR 0 12
19339: PUSH
19340: LD_VAR 0 12
19344: PPUSH
19345: LD_INT 1
19347: PPUSH
19348: CALL_OW 3
19352: ST_TO_ADDR
// if not f then
19353: LD_VAR 0 12
19357: NOT
19358: IFFALSE 19376
// begin x := x + 2 ;
19360: LD_ADDR_VAR 0 13
19364: PUSH
19365: LD_VAR 0 13
19369: PUSH
19370: LD_INT 2
19372: PLUS
19373: ST_TO_ADDR
// continue ;
19374: GO 19174
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19376: LD_VAR 0 12
19380: PUSH
19381: LD_INT 1
19383: ARRAY
19384: PPUSH
19385: CALL_OW 266
19389: PUSH
19390: LD_INT 5
19392: EQUAL
19393: IFFALSE 19467
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19395: LD_VAR 0 12
19399: PUSH
19400: LD_INT 1
19402: ARRAY
19403: PPUSH
19404: CALL_OW 313
19408: PUSH
19409: LD_INT 3
19411: LESS
19412: IFFALSE 19448
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19414: LD_INT 0
19416: PPUSH
19417: LD_INT 5
19419: PUSH
19420: LD_INT 8
19422: PUSH
19423: LD_INT 9
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: LIST
19430: PUSH
19431: LD_VAR 0 17
19435: ARRAY
19436: PPUSH
19437: LD_VAR 0 4
19441: PPUSH
19442: CALL_OW 380
19446: GO 19465
// PrepareHuman ( false , i , skill ) ;
19448: LD_INT 0
19450: PPUSH
19451: LD_VAR 0 8
19455: PPUSH
19456: LD_VAR 0 4
19460: PPUSH
19461: CALL_OW 380
// end else
19465: GO 19484
// PrepareHuman ( false , i , skill ) ;
19467: LD_INT 0
19469: PPUSH
19470: LD_VAR 0 8
19474: PPUSH
19475: LD_VAR 0 4
19479: PPUSH
19480: CALL_OW 380
// un := CreateHuman ;
19484: LD_ADDR_VAR 0 14
19488: PUSH
19489: CALL_OW 44
19493: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19494: LD_ADDR_VAR 0 7
19498: PUSH
19499: LD_VAR 0 7
19503: PPUSH
19504: LD_INT 1
19506: PPUSH
19507: LD_VAR 0 14
19511: PPUSH
19512: CALL_OW 2
19516: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19517: LD_VAR 0 14
19521: PPUSH
19522: LD_VAR 0 12
19526: PUSH
19527: LD_INT 1
19529: ARRAY
19530: PPUSH
19531: CALL_OW 52
// end ;
19535: GO 19174
19537: POP
19538: POP
// end ;
19539: GO 18476
19541: POP
19542: POP
// result := result ^ buildings ;
19543: LD_ADDR_VAR 0 7
19547: PUSH
19548: LD_VAR 0 7
19552: PUSH
19553: LD_VAR 0 18
19557: ADD
19558: ST_TO_ADDR
// end else
19559: GO 19702
// begin for i = 1 to personel do
19561: LD_ADDR_VAR 0 8
19565: PUSH
19566: DOUBLE
19567: LD_INT 1
19569: DEC
19570: ST_TO_ADDR
19571: LD_VAR 0 6
19575: PUSH
19576: FOR_TO
19577: IFFALSE 19700
// begin if i > 4 then
19579: LD_VAR 0 8
19583: PUSH
19584: LD_INT 4
19586: GREATER
19587: IFFALSE 19591
// break ;
19589: GO 19700
// x := personel [ i ] ;
19591: LD_ADDR_VAR 0 13
19595: PUSH
19596: LD_VAR 0 6
19600: PUSH
19601: LD_VAR 0 8
19605: ARRAY
19606: ST_TO_ADDR
// if x = - 1 then
19607: LD_VAR 0 13
19611: PUSH
19612: LD_INT 1
19614: NEG
19615: EQUAL
19616: IFFALSE 19620
// continue ;
19618: GO 19576
// PrepareHuman ( false , i , skill ) ;
19620: LD_INT 0
19622: PPUSH
19623: LD_VAR 0 8
19627: PPUSH
19628: LD_VAR 0 4
19632: PPUSH
19633: CALL_OW 380
// un := CreateHuman ;
19637: LD_ADDR_VAR 0 14
19641: PUSH
19642: CALL_OW 44
19646: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19647: LD_VAR 0 14
19651: PPUSH
19652: LD_VAR 0 1
19656: PPUSH
19657: CALL_OW 250
19661: PPUSH
19662: LD_VAR 0 1
19666: PPUSH
19667: CALL_OW 251
19671: PPUSH
19672: LD_INT 10
19674: PPUSH
19675: LD_INT 0
19677: PPUSH
19678: CALL_OW 50
// result := result ^ un ;
19682: LD_ADDR_VAR 0 7
19686: PUSH
19687: LD_VAR 0 7
19691: PUSH
19692: LD_VAR 0 14
19696: ADD
19697: ST_TO_ADDR
// end ;
19698: GO 19576
19700: POP
19701: POP
// end ; end ;
19702: LD_VAR 0 7
19706: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19707: LD_INT 0
19709: PPUSH
19710: PPUSH
19711: PPUSH
19712: PPUSH
19713: PPUSH
19714: PPUSH
19715: PPUSH
19716: PPUSH
19717: PPUSH
19718: PPUSH
19719: PPUSH
19720: PPUSH
19721: PPUSH
19722: PPUSH
19723: PPUSH
19724: PPUSH
// result := false ;
19725: LD_ADDR_VAR 0 3
19729: PUSH
19730: LD_INT 0
19732: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19733: LD_VAR 0 1
19737: NOT
19738: PUSH
19739: LD_VAR 0 1
19743: PPUSH
19744: CALL_OW 266
19748: PUSH
19749: LD_INT 32
19751: PUSH
19752: LD_INT 33
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: IN
19759: NOT
19760: OR
19761: IFFALSE 19765
// exit ;
19763: GO 20874
// nat := GetNation ( tower ) ;
19765: LD_ADDR_VAR 0 12
19769: PUSH
19770: LD_VAR 0 1
19774: PPUSH
19775: CALL_OW 248
19779: ST_TO_ADDR
// side := GetSide ( tower ) ;
19780: LD_ADDR_VAR 0 16
19784: PUSH
19785: LD_VAR 0 1
19789: PPUSH
19790: CALL_OW 255
19794: ST_TO_ADDR
// x := GetX ( tower ) ;
19795: LD_ADDR_VAR 0 10
19799: PUSH
19800: LD_VAR 0 1
19804: PPUSH
19805: CALL_OW 250
19809: ST_TO_ADDR
// y := GetY ( tower ) ;
19810: LD_ADDR_VAR 0 11
19814: PUSH
19815: LD_VAR 0 1
19819: PPUSH
19820: CALL_OW 251
19824: ST_TO_ADDR
// if not x or not y then
19825: LD_VAR 0 10
19829: NOT
19830: PUSH
19831: LD_VAR 0 11
19835: NOT
19836: OR
19837: IFFALSE 19841
// exit ;
19839: GO 20874
// weapon := 0 ;
19841: LD_ADDR_VAR 0 18
19845: PUSH
19846: LD_INT 0
19848: ST_TO_ADDR
// fac_list := [ ] ;
19849: LD_ADDR_VAR 0 17
19853: PUSH
19854: EMPTY
19855: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19856: LD_ADDR_VAR 0 6
19860: PUSH
19861: LD_VAR 0 1
19865: PPUSH
19866: CALL_OW 274
19870: PPUSH
19871: LD_VAR 0 2
19875: PPUSH
19876: LD_INT 0
19878: PPUSH
19879: CALL 17445 0 3
19883: PPUSH
19884: LD_INT 30
19886: PUSH
19887: LD_INT 3
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PPUSH
19894: CALL_OW 72
19898: ST_TO_ADDR
// if not factories then
19899: LD_VAR 0 6
19903: NOT
19904: IFFALSE 19908
// exit ;
19906: GO 20874
// for i in factories do
19908: LD_ADDR_VAR 0 8
19912: PUSH
19913: LD_VAR 0 6
19917: PUSH
19918: FOR_IN
19919: IFFALSE 19944
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19921: LD_ADDR_VAR 0 17
19925: PUSH
19926: LD_VAR 0 17
19930: PUSH
19931: LD_VAR 0 8
19935: PPUSH
19936: CALL_OW 478
19940: UNION
19941: ST_TO_ADDR
19942: GO 19918
19944: POP
19945: POP
// if not fac_list then
19946: LD_VAR 0 17
19950: NOT
19951: IFFALSE 19955
// exit ;
19953: GO 20874
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19955: LD_ADDR_VAR 0 5
19959: PUSH
19960: LD_INT 4
19962: PUSH
19963: LD_INT 5
19965: PUSH
19966: LD_INT 9
19968: PUSH
19969: LD_INT 10
19971: PUSH
19972: LD_INT 6
19974: PUSH
19975: LD_INT 7
19977: PUSH
19978: LD_INT 11
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 27
19992: PUSH
19993: LD_INT 28
19995: PUSH
19996: LD_INT 26
19998: PUSH
19999: LD_INT 30
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 43
20010: PUSH
20011: LD_INT 44
20013: PUSH
20014: LD_INT 46
20016: PUSH
20017: LD_INT 45
20019: PUSH
20020: LD_INT 47
20022: PUSH
20023: LD_INT 49
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: PUSH
20039: LD_VAR 0 12
20043: ARRAY
20044: ST_TO_ADDR
// list := list isect fac_list ;
20045: LD_ADDR_VAR 0 5
20049: PUSH
20050: LD_VAR 0 5
20054: PUSH
20055: LD_VAR 0 17
20059: ISECT
20060: ST_TO_ADDR
// if not list then
20061: LD_VAR 0 5
20065: NOT
20066: IFFALSE 20070
// exit ;
20068: GO 20874
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20070: LD_VAR 0 12
20074: PUSH
20075: LD_INT 3
20077: EQUAL
20078: PUSH
20079: LD_INT 49
20081: PUSH
20082: LD_VAR 0 5
20086: IN
20087: AND
20088: PUSH
20089: LD_INT 31
20091: PPUSH
20092: LD_VAR 0 16
20096: PPUSH
20097: CALL_OW 321
20101: PUSH
20102: LD_INT 2
20104: EQUAL
20105: AND
20106: IFFALSE 20166
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20108: LD_INT 22
20110: PUSH
20111: LD_VAR 0 16
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 35
20122: PUSH
20123: LD_INT 49
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 91
20132: PUSH
20133: LD_VAR 0 1
20137: PUSH
20138: LD_INT 10
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 69
20155: NOT
20156: IFFALSE 20166
// weapon := ru_time_lapser ;
20158: LD_ADDR_VAR 0 18
20162: PUSH
20163: LD_INT 49
20165: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20166: LD_VAR 0 12
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: IN
20181: PUSH
20182: LD_INT 11
20184: PUSH
20185: LD_VAR 0 5
20189: IN
20190: PUSH
20191: LD_INT 30
20193: PUSH
20194: LD_VAR 0 5
20198: IN
20199: OR
20200: AND
20201: PUSH
20202: LD_INT 6
20204: PPUSH
20205: LD_VAR 0 16
20209: PPUSH
20210: CALL_OW 321
20214: PUSH
20215: LD_INT 2
20217: EQUAL
20218: AND
20219: IFFALSE 20384
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20221: LD_INT 22
20223: PUSH
20224: LD_VAR 0 16
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: LD_INT 35
20238: PUSH
20239: LD_INT 11
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 35
20248: PUSH
20249: LD_INT 30
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 91
20263: PUSH
20264: LD_VAR 0 1
20268: PUSH
20269: LD_INT 18
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: LIST
20281: PPUSH
20282: CALL_OW 69
20286: NOT
20287: PUSH
20288: LD_INT 22
20290: PUSH
20291: LD_VAR 0 16
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 2
20302: PUSH
20303: LD_INT 30
20305: PUSH
20306: LD_INT 32
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 30
20315: PUSH
20316: LD_INT 33
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 91
20330: PUSH
20331: LD_VAR 0 1
20335: PUSH
20336: LD_INT 12
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: PUSH
20349: EMPTY
20350: LIST
20351: PPUSH
20352: CALL_OW 69
20356: PUSH
20357: LD_INT 2
20359: GREATER
20360: AND
20361: IFFALSE 20384
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20363: LD_ADDR_VAR 0 18
20367: PUSH
20368: LD_INT 11
20370: PUSH
20371: LD_INT 30
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_VAR 0 12
20382: ARRAY
20383: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20384: LD_VAR 0 18
20388: NOT
20389: PUSH
20390: LD_INT 40
20392: PPUSH
20393: LD_VAR 0 16
20397: PPUSH
20398: CALL_OW 321
20402: PUSH
20403: LD_INT 2
20405: EQUAL
20406: AND
20407: PUSH
20408: LD_INT 7
20410: PUSH
20411: LD_VAR 0 5
20415: IN
20416: PUSH
20417: LD_INT 28
20419: PUSH
20420: LD_VAR 0 5
20424: IN
20425: OR
20426: PUSH
20427: LD_INT 45
20429: PUSH
20430: LD_VAR 0 5
20434: IN
20435: OR
20436: AND
20437: IFFALSE 20691
// begin hex := GetHexInfo ( x , y ) ;
20439: LD_ADDR_VAR 0 4
20443: PUSH
20444: LD_VAR 0 10
20448: PPUSH
20449: LD_VAR 0 11
20453: PPUSH
20454: CALL_OW 546
20458: ST_TO_ADDR
// if hex [ 1 ] then
20459: LD_VAR 0 4
20463: PUSH
20464: LD_INT 1
20466: ARRAY
20467: IFFALSE 20471
// exit ;
20469: GO 20874
// height := hex [ 2 ] ;
20471: LD_ADDR_VAR 0 15
20475: PUSH
20476: LD_VAR 0 4
20480: PUSH
20481: LD_INT 2
20483: ARRAY
20484: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20485: LD_ADDR_VAR 0 14
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: LD_INT 2
20495: PUSH
20496: LD_INT 3
20498: PUSH
20499: LD_INT 5
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: ST_TO_ADDR
// for i in tmp do
20508: LD_ADDR_VAR 0 8
20512: PUSH
20513: LD_VAR 0 14
20517: PUSH
20518: FOR_IN
20519: IFFALSE 20689
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20521: LD_ADDR_VAR 0 9
20525: PUSH
20526: LD_VAR 0 10
20530: PPUSH
20531: LD_VAR 0 8
20535: PPUSH
20536: LD_INT 5
20538: PPUSH
20539: CALL_OW 272
20543: PUSH
20544: LD_VAR 0 11
20548: PPUSH
20549: LD_VAR 0 8
20553: PPUSH
20554: LD_INT 5
20556: PPUSH
20557: CALL_OW 273
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20566: LD_VAR 0 9
20570: PUSH
20571: LD_INT 1
20573: ARRAY
20574: PPUSH
20575: LD_VAR 0 9
20579: PUSH
20580: LD_INT 2
20582: ARRAY
20583: PPUSH
20584: CALL_OW 488
20588: IFFALSE 20687
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20590: LD_ADDR_VAR 0 4
20594: PUSH
20595: LD_VAR 0 9
20599: PUSH
20600: LD_INT 1
20602: ARRAY
20603: PPUSH
20604: LD_VAR 0 9
20608: PUSH
20609: LD_INT 2
20611: ARRAY
20612: PPUSH
20613: CALL_OW 546
20617: ST_TO_ADDR
// if hex [ 1 ] then
20618: LD_VAR 0 4
20622: PUSH
20623: LD_INT 1
20625: ARRAY
20626: IFFALSE 20630
// continue ;
20628: GO 20518
// h := hex [ 2 ] ;
20630: LD_ADDR_VAR 0 13
20634: PUSH
20635: LD_VAR 0 4
20639: PUSH
20640: LD_INT 2
20642: ARRAY
20643: ST_TO_ADDR
// if h + 7 < height then
20644: LD_VAR 0 13
20648: PUSH
20649: LD_INT 7
20651: PLUS
20652: PUSH
20653: LD_VAR 0 15
20657: LESS
20658: IFFALSE 20687
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20660: LD_ADDR_VAR 0 18
20664: PUSH
20665: LD_INT 7
20667: PUSH
20668: LD_INT 28
20670: PUSH
20671: LD_INT 45
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: LIST
20678: PUSH
20679: LD_VAR 0 12
20683: ARRAY
20684: ST_TO_ADDR
// break ;
20685: GO 20689
// end ; end ; end ;
20687: GO 20518
20689: POP
20690: POP
// end ; if not weapon then
20691: LD_VAR 0 18
20695: NOT
20696: IFFALSE 20756
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20698: LD_ADDR_VAR 0 5
20702: PUSH
20703: LD_VAR 0 5
20707: PUSH
20708: LD_INT 11
20710: PUSH
20711: LD_INT 30
20713: PUSH
20714: LD_INT 49
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: LIST
20721: DIFF
20722: ST_TO_ADDR
// if not list then
20723: LD_VAR 0 5
20727: NOT
20728: IFFALSE 20732
// exit ;
20730: GO 20874
// weapon := list [ rand ( 1 , list ) ] ;
20732: LD_ADDR_VAR 0 18
20736: PUSH
20737: LD_VAR 0 5
20741: PUSH
20742: LD_INT 1
20744: PPUSH
20745: LD_VAR 0 5
20749: PPUSH
20750: CALL_OW 12
20754: ARRAY
20755: ST_TO_ADDR
// end ; if weapon then
20756: LD_VAR 0 18
20760: IFFALSE 20874
// begin tmp := CostOfWeapon ( weapon ) ;
20762: LD_ADDR_VAR 0 14
20766: PUSH
20767: LD_VAR 0 18
20771: PPUSH
20772: CALL_OW 451
20776: ST_TO_ADDR
// j := GetBase ( tower ) ;
20777: LD_ADDR_VAR 0 9
20781: PUSH
20782: LD_VAR 0 1
20786: PPUSH
20787: CALL_OW 274
20791: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20792: LD_VAR 0 9
20796: PPUSH
20797: LD_INT 1
20799: PPUSH
20800: CALL_OW 275
20804: PUSH
20805: LD_VAR 0 14
20809: PUSH
20810: LD_INT 1
20812: ARRAY
20813: GREATEREQUAL
20814: PUSH
20815: LD_VAR 0 9
20819: PPUSH
20820: LD_INT 2
20822: PPUSH
20823: CALL_OW 275
20827: PUSH
20828: LD_VAR 0 14
20832: PUSH
20833: LD_INT 2
20835: ARRAY
20836: GREATEREQUAL
20837: AND
20838: PUSH
20839: LD_VAR 0 9
20843: PPUSH
20844: LD_INT 3
20846: PPUSH
20847: CALL_OW 275
20851: PUSH
20852: LD_VAR 0 14
20856: PUSH
20857: LD_INT 3
20859: ARRAY
20860: GREATEREQUAL
20861: AND
20862: IFFALSE 20874
// result := weapon ;
20864: LD_ADDR_VAR 0 3
20868: PUSH
20869: LD_VAR 0 18
20873: ST_TO_ADDR
// end ; end ;
20874: LD_VAR 0 3
20878: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20879: LD_INT 0
20881: PPUSH
20882: PPUSH
// result := true ;
20883: LD_ADDR_VAR 0 3
20887: PUSH
20888: LD_INT 1
20890: ST_TO_ADDR
// if array1 = array2 then
20891: LD_VAR 0 1
20895: PUSH
20896: LD_VAR 0 2
20900: EQUAL
20901: IFFALSE 20961
// begin for i = 1 to array1 do
20903: LD_ADDR_VAR 0 4
20907: PUSH
20908: DOUBLE
20909: LD_INT 1
20911: DEC
20912: ST_TO_ADDR
20913: LD_VAR 0 1
20917: PUSH
20918: FOR_TO
20919: IFFALSE 20957
// if array1 [ i ] <> array2 [ i ] then
20921: LD_VAR 0 1
20925: PUSH
20926: LD_VAR 0 4
20930: ARRAY
20931: PUSH
20932: LD_VAR 0 2
20936: PUSH
20937: LD_VAR 0 4
20941: ARRAY
20942: NONEQUAL
20943: IFFALSE 20955
// begin result := false ;
20945: LD_ADDR_VAR 0 3
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// break ;
20953: GO 20957
// end ;
20955: GO 20918
20957: POP
20958: POP
// end else
20959: GO 20969
// result := false ;
20961: LD_ADDR_VAR 0 3
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// end ;
20969: LD_VAR 0 3
20973: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20974: LD_INT 0
20976: PPUSH
20977: PPUSH
// if not array1 or not array2 then
20978: LD_VAR 0 1
20982: NOT
20983: PUSH
20984: LD_VAR 0 2
20988: NOT
20989: OR
20990: IFFALSE 20994
// exit ;
20992: GO 21058
// result := true ;
20994: LD_ADDR_VAR 0 3
20998: PUSH
20999: LD_INT 1
21001: ST_TO_ADDR
// for i = 1 to array1 do
21002: LD_ADDR_VAR 0 4
21006: PUSH
21007: DOUBLE
21008: LD_INT 1
21010: DEC
21011: ST_TO_ADDR
21012: LD_VAR 0 1
21016: PUSH
21017: FOR_TO
21018: IFFALSE 21056
// if array1 [ i ] <> array2 [ i ] then
21020: LD_VAR 0 1
21024: PUSH
21025: LD_VAR 0 4
21029: ARRAY
21030: PUSH
21031: LD_VAR 0 2
21035: PUSH
21036: LD_VAR 0 4
21040: ARRAY
21041: NONEQUAL
21042: IFFALSE 21054
// begin result := false ;
21044: LD_ADDR_VAR 0 3
21048: PUSH
21049: LD_INT 0
21051: ST_TO_ADDR
// break ;
21052: GO 21056
// end ;
21054: GO 21017
21056: POP
21057: POP
// end ;
21058: LD_VAR 0 3
21062: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21063: LD_INT 0
21065: PPUSH
21066: PPUSH
21067: PPUSH
// pom := GetBase ( fac ) ;
21068: LD_ADDR_VAR 0 5
21072: PUSH
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 274
21082: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21083: LD_ADDR_VAR 0 4
21087: PUSH
21088: LD_VAR 0 2
21092: PUSH
21093: LD_INT 1
21095: ARRAY
21096: PPUSH
21097: LD_VAR 0 2
21101: PUSH
21102: LD_INT 2
21104: ARRAY
21105: PPUSH
21106: LD_VAR 0 2
21110: PUSH
21111: LD_INT 3
21113: ARRAY
21114: PPUSH
21115: LD_VAR 0 2
21119: PUSH
21120: LD_INT 4
21122: ARRAY
21123: PPUSH
21124: CALL_OW 449
21128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_VAR 0 5
21138: PPUSH
21139: LD_INT 1
21141: PPUSH
21142: CALL_OW 275
21146: PUSH
21147: LD_VAR 0 4
21151: PUSH
21152: LD_INT 1
21154: ARRAY
21155: GREATEREQUAL
21156: PUSH
21157: LD_VAR 0 5
21161: PPUSH
21162: LD_INT 2
21164: PPUSH
21165: CALL_OW 275
21169: PUSH
21170: LD_VAR 0 4
21174: PUSH
21175: LD_INT 2
21177: ARRAY
21178: GREATEREQUAL
21179: AND
21180: PUSH
21181: LD_VAR 0 5
21185: PPUSH
21186: LD_INT 3
21188: PPUSH
21189: CALL_OW 275
21193: PUSH
21194: LD_VAR 0 4
21198: PUSH
21199: LD_INT 3
21201: ARRAY
21202: GREATEREQUAL
21203: AND
21204: ST_TO_ADDR
// end ;
21205: LD_VAR 0 3
21209: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21210: LD_INT 0
21212: PPUSH
21213: PPUSH
21214: PPUSH
21215: PPUSH
// pom := GetBase ( building ) ;
21216: LD_ADDR_VAR 0 3
21220: PUSH
21221: LD_VAR 0 1
21225: PPUSH
21226: CALL_OW 274
21230: ST_TO_ADDR
// if not pom then
21231: LD_VAR 0 3
21235: NOT
21236: IFFALSE 21240
// exit ;
21238: GO 21410
// btype := GetBType ( building ) ;
21240: LD_ADDR_VAR 0 5
21244: PUSH
21245: LD_VAR 0 1
21249: PPUSH
21250: CALL_OW 266
21254: ST_TO_ADDR
// if btype = b_armoury then
21255: LD_VAR 0 5
21259: PUSH
21260: LD_INT 4
21262: EQUAL
21263: IFFALSE 21273
// btype := b_barracks ;
21265: LD_ADDR_VAR 0 5
21269: PUSH
21270: LD_INT 5
21272: ST_TO_ADDR
// if btype = b_depot then
21273: LD_VAR 0 5
21277: PUSH
21278: LD_INT 0
21280: EQUAL
21281: IFFALSE 21291
// btype := b_warehouse ;
21283: LD_ADDR_VAR 0 5
21287: PUSH
21288: LD_INT 1
21290: ST_TO_ADDR
// if btype = b_workshop then
21291: LD_VAR 0 5
21295: PUSH
21296: LD_INT 2
21298: EQUAL
21299: IFFALSE 21309
// btype := b_factory ;
21301: LD_ADDR_VAR 0 5
21305: PUSH
21306: LD_INT 3
21308: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21309: LD_ADDR_VAR 0 4
21313: PUSH
21314: LD_VAR 0 5
21318: PPUSH
21319: LD_VAR 0 1
21323: PPUSH
21324: CALL_OW 248
21328: PPUSH
21329: CALL_OW 450
21333: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21334: LD_ADDR_VAR 0 2
21338: PUSH
21339: LD_VAR 0 3
21343: PPUSH
21344: LD_INT 1
21346: PPUSH
21347: CALL_OW 275
21351: PUSH
21352: LD_VAR 0 4
21356: PUSH
21357: LD_INT 1
21359: ARRAY
21360: GREATEREQUAL
21361: PUSH
21362: LD_VAR 0 3
21366: PPUSH
21367: LD_INT 2
21369: PPUSH
21370: CALL_OW 275
21374: PUSH
21375: LD_VAR 0 4
21379: PUSH
21380: LD_INT 2
21382: ARRAY
21383: GREATEREQUAL
21384: AND
21385: PUSH
21386: LD_VAR 0 3
21390: PPUSH
21391: LD_INT 3
21393: PPUSH
21394: CALL_OW 275
21398: PUSH
21399: LD_VAR 0 4
21403: PUSH
21404: LD_INT 3
21406: ARRAY
21407: GREATEREQUAL
21408: AND
21409: ST_TO_ADDR
// end ;
21410: LD_VAR 0 2
21414: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21415: LD_INT 0
21417: PPUSH
21418: PPUSH
21419: PPUSH
// pom := GetBase ( building ) ;
21420: LD_ADDR_VAR 0 4
21424: PUSH
21425: LD_VAR 0 1
21429: PPUSH
21430: CALL_OW 274
21434: ST_TO_ADDR
// if not pom then
21435: LD_VAR 0 4
21439: NOT
21440: IFFALSE 21444
// exit ;
21442: GO 21545
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21444: LD_ADDR_VAR 0 5
21448: PUSH
21449: LD_VAR 0 2
21453: PPUSH
21454: LD_VAR 0 1
21458: PPUSH
21459: CALL_OW 248
21463: PPUSH
21464: CALL_OW 450
21468: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21469: LD_ADDR_VAR 0 3
21473: PUSH
21474: LD_VAR 0 4
21478: PPUSH
21479: LD_INT 1
21481: PPUSH
21482: CALL_OW 275
21486: PUSH
21487: LD_VAR 0 5
21491: PUSH
21492: LD_INT 1
21494: ARRAY
21495: GREATEREQUAL
21496: PUSH
21497: LD_VAR 0 4
21501: PPUSH
21502: LD_INT 2
21504: PPUSH
21505: CALL_OW 275
21509: PUSH
21510: LD_VAR 0 5
21514: PUSH
21515: LD_INT 2
21517: ARRAY
21518: GREATEREQUAL
21519: AND
21520: PUSH
21521: LD_VAR 0 4
21525: PPUSH
21526: LD_INT 3
21528: PPUSH
21529: CALL_OW 275
21533: PUSH
21534: LD_VAR 0 5
21538: PUSH
21539: LD_INT 3
21541: ARRAY
21542: GREATEREQUAL
21543: AND
21544: ST_TO_ADDR
// end ;
21545: LD_VAR 0 3
21549: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21550: LD_INT 0
21552: PPUSH
21553: PPUSH
21554: PPUSH
21555: PPUSH
21556: PPUSH
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
// result := false ;
21563: LD_ADDR_VAR 0 8
21567: PUSH
21568: LD_INT 0
21570: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21571: LD_VAR 0 5
21575: NOT
21576: PUSH
21577: LD_VAR 0 1
21581: NOT
21582: OR
21583: PUSH
21584: LD_VAR 0 2
21588: NOT
21589: OR
21590: PUSH
21591: LD_VAR 0 3
21595: NOT
21596: OR
21597: IFFALSE 21601
// exit ;
21599: GO 22415
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21601: LD_ADDR_VAR 0 14
21605: PUSH
21606: LD_VAR 0 1
21610: PPUSH
21611: LD_VAR 0 2
21615: PPUSH
21616: LD_VAR 0 3
21620: PPUSH
21621: LD_VAR 0 4
21625: PPUSH
21626: LD_VAR 0 5
21630: PUSH
21631: LD_INT 1
21633: ARRAY
21634: PPUSH
21635: CALL_OW 248
21639: PPUSH
21640: LD_INT 0
21642: PPUSH
21643: CALL 23668 0 6
21647: ST_TO_ADDR
// if not hexes then
21648: LD_VAR 0 14
21652: NOT
21653: IFFALSE 21657
// exit ;
21655: GO 22415
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21657: LD_ADDR_VAR 0 17
21661: PUSH
21662: LD_VAR 0 5
21666: PPUSH
21667: LD_INT 22
21669: PUSH
21670: LD_VAR 0 13
21674: PPUSH
21675: CALL_OW 255
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: LD_INT 30
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 30
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PPUSH
21716: CALL_OW 72
21720: ST_TO_ADDR
// for i = 1 to hexes do
21721: LD_ADDR_VAR 0 9
21725: PUSH
21726: DOUBLE
21727: LD_INT 1
21729: DEC
21730: ST_TO_ADDR
21731: LD_VAR 0 14
21735: PUSH
21736: FOR_TO
21737: IFFALSE 22413
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21739: LD_ADDR_VAR 0 13
21743: PUSH
21744: LD_VAR 0 14
21748: PUSH
21749: LD_VAR 0 9
21753: ARRAY
21754: PUSH
21755: LD_INT 1
21757: ARRAY
21758: PPUSH
21759: LD_VAR 0 14
21763: PUSH
21764: LD_VAR 0 9
21768: ARRAY
21769: PUSH
21770: LD_INT 2
21772: ARRAY
21773: PPUSH
21774: CALL_OW 428
21778: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21779: LD_VAR 0 14
21783: PUSH
21784: LD_VAR 0 9
21788: ARRAY
21789: PUSH
21790: LD_INT 1
21792: ARRAY
21793: PPUSH
21794: LD_VAR 0 14
21798: PUSH
21799: LD_VAR 0 9
21803: ARRAY
21804: PUSH
21805: LD_INT 2
21807: ARRAY
21808: PPUSH
21809: CALL_OW 351
21813: PUSH
21814: LD_VAR 0 14
21818: PUSH
21819: LD_VAR 0 9
21823: ARRAY
21824: PUSH
21825: LD_INT 1
21827: ARRAY
21828: PPUSH
21829: LD_VAR 0 14
21833: PUSH
21834: LD_VAR 0 9
21838: ARRAY
21839: PUSH
21840: LD_INT 2
21842: ARRAY
21843: PPUSH
21844: CALL_OW 488
21848: NOT
21849: OR
21850: PUSH
21851: LD_VAR 0 13
21855: PPUSH
21856: CALL_OW 247
21860: PUSH
21861: LD_INT 3
21863: EQUAL
21864: OR
21865: IFFALSE 21871
// exit ;
21867: POP
21868: POP
21869: GO 22415
// if not tmp then
21871: LD_VAR 0 13
21875: NOT
21876: IFFALSE 21880
// continue ;
21878: GO 21736
// result := true ;
21880: LD_ADDR_VAR 0 8
21884: PUSH
21885: LD_INT 1
21887: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21888: LD_VAR 0 6
21892: PUSH
21893: LD_VAR 0 13
21897: PPUSH
21898: CALL_OW 247
21902: PUSH
21903: LD_INT 2
21905: EQUAL
21906: AND
21907: PUSH
21908: LD_VAR 0 13
21912: PPUSH
21913: CALL_OW 263
21917: PUSH
21918: LD_INT 1
21920: EQUAL
21921: AND
21922: IFFALSE 22086
// begin if IsDrivenBy ( tmp ) then
21924: LD_VAR 0 13
21928: PPUSH
21929: CALL_OW 311
21933: IFFALSE 21937
// continue ;
21935: GO 21736
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21937: LD_VAR 0 6
21941: PPUSH
21942: LD_INT 3
21944: PUSH
21945: LD_INT 60
21947: PUSH
21948: EMPTY
21949: LIST
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 3
21957: PUSH
21958: LD_INT 55
21960: PUSH
21961: EMPTY
21962: LIST
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PPUSH
21972: CALL_OW 72
21976: IFFALSE 22084
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21978: LD_ADDR_VAR 0 18
21982: PUSH
21983: LD_VAR 0 6
21987: PPUSH
21988: LD_INT 3
21990: PUSH
21991: LD_INT 60
21993: PUSH
21994: EMPTY
21995: LIST
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 3
22003: PUSH
22004: LD_INT 55
22006: PUSH
22007: EMPTY
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PPUSH
22018: CALL_OW 72
22022: PUSH
22023: LD_INT 1
22025: ARRAY
22026: ST_TO_ADDR
// if IsInUnit ( driver ) then
22027: LD_VAR 0 18
22031: PPUSH
22032: CALL_OW 310
22036: IFFALSE 22047
// ComExit ( driver ) ;
22038: LD_VAR 0 18
22042: PPUSH
22043: CALL 47469 0 1
// AddComEnterUnit ( driver , tmp ) ;
22047: LD_VAR 0 18
22051: PPUSH
22052: LD_VAR 0 13
22056: PPUSH
22057: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22061: LD_VAR 0 18
22065: PPUSH
22066: LD_VAR 0 7
22070: PPUSH
22071: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22075: LD_VAR 0 18
22079: PPUSH
22080: CALL_OW 181
// end ; continue ;
22084: GO 21736
// end ; if not cleaners or not tmp in cleaners then
22086: LD_VAR 0 6
22090: NOT
22091: PUSH
22092: LD_VAR 0 13
22096: PUSH
22097: LD_VAR 0 6
22101: IN
22102: NOT
22103: OR
22104: IFFALSE 22411
// begin if dep then
22106: LD_VAR 0 17
22110: IFFALSE 22246
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22112: LD_ADDR_VAR 0 16
22116: PUSH
22117: LD_VAR 0 17
22121: PUSH
22122: LD_INT 1
22124: ARRAY
22125: PPUSH
22126: CALL_OW 250
22130: PPUSH
22131: LD_VAR 0 17
22135: PUSH
22136: LD_INT 1
22138: ARRAY
22139: PPUSH
22140: CALL_OW 254
22144: PPUSH
22145: LD_INT 5
22147: PPUSH
22148: CALL_OW 272
22152: PUSH
22153: LD_VAR 0 17
22157: PUSH
22158: LD_INT 1
22160: ARRAY
22161: PPUSH
22162: CALL_OW 251
22166: PPUSH
22167: LD_VAR 0 17
22171: PUSH
22172: LD_INT 1
22174: ARRAY
22175: PPUSH
22176: CALL_OW 254
22180: PPUSH
22181: LD_INT 5
22183: PPUSH
22184: CALL_OW 273
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22193: LD_VAR 0 16
22197: PUSH
22198: LD_INT 1
22200: ARRAY
22201: PPUSH
22202: LD_VAR 0 16
22206: PUSH
22207: LD_INT 2
22209: ARRAY
22210: PPUSH
22211: CALL_OW 488
22215: IFFALSE 22246
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22217: LD_VAR 0 13
22221: PPUSH
22222: LD_VAR 0 16
22226: PUSH
22227: LD_INT 1
22229: ARRAY
22230: PPUSH
22231: LD_VAR 0 16
22235: PUSH
22236: LD_INT 2
22238: ARRAY
22239: PPUSH
22240: CALL_OW 111
// continue ;
22244: GO 21736
// end ; end ; r := GetDir ( tmp ) ;
22246: LD_ADDR_VAR 0 15
22250: PUSH
22251: LD_VAR 0 13
22255: PPUSH
22256: CALL_OW 254
22260: ST_TO_ADDR
// if r = 5 then
22261: LD_VAR 0 15
22265: PUSH
22266: LD_INT 5
22268: EQUAL
22269: IFFALSE 22279
// r := 0 ;
22271: LD_ADDR_VAR 0 15
22275: PUSH
22276: LD_INT 0
22278: ST_TO_ADDR
// for j = r to 5 do
22279: LD_ADDR_VAR 0 10
22283: PUSH
22284: DOUBLE
22285: LD_VAR 0 15
22289: DEC
22290: ST_TO_ADDR
22291: LD_INT 5
22293: PUSH
22294: FOR_TO
22295: IFFALSE 22409
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22297: LD_ADDR_VAR 0 11
22301: PUSH
22302: LD_VAR 0 13
22306: PPUSH
22307: CALL_OW 250
22311: PPUSH
22312: LD_VAR 0 10
22316: PPUSH
22317: LD_INT 2
22319: PPUSH
22320: CALL_OW 272
22324: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22325: LD_ADDR_VAR 0 12
22329: PUSH
22330: LD_VAR 0 13
22334: PPUSH
22335: CALL_OW 251
22339: PPUSH
22340: LD_VAR 0 10
22344: PPUSH
22345: LD_INT 2
22347: PPUSH
22348: CALL_OW 273
22352: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22353: LD_VAR 0 11
22357: PPUSH
22358: LD_VAR 0 12
22362: PPUSH
22363: CALL_OW 488
22367: PUSH
22368: LD_VAR 0 11
22372: PPUSH
22373: LD_VAR 0 12
22377: PPUSH
22378: CALL_OW 428
22382: NOT
22383: AND
22384: IFFALSE 22407
// begin ComMoveXY ( tmp , _x , _y ) ;
22386: LD_VAR 0 13
22390: PPUSH
22391: LD_VAR 0 11
22395: PPUSH
22396: LD_VAR 0 12
22400: PPUSH
22401: CALL_OW 111
// break ;
22405: GO 22409
// end ; end ;
22407: GO 22294
22409: POP
22410: POP
// end ; end ;
22411: GO 21736
22413: POP
22414: POP
// end ;
22415: LD_VAR 0 8
22419: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22420: LD_INT 0
22422: PPUSH
// result := true ;
22423: LD_ADDR_VAR 0 3
22427: PUSH
22428: LD_INT 1
22430: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22431: LD_VAR 0 2
22435: PUSH
22436: LD_INT 24
22438: DOUBLE
22439: EQUAL
22440: IFTRUE 22450
22442: LD_INT 33
22444: DOUBLE
22445: EQUAL
22446: IFTRUE 22450
22448: GO 22475
22450: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22451: LD_ADDR_VAR 0 3
22455: PUSH
22456: LD_INT 32
22458: PPUSH
22459: LD_VAR 0 1
22463: PPUSH
22464: CALL_OW 321
22468: PUSH
22469: LD_INT 2
22471: EQUAL
22472: ST_TO_ADDR
22473: GO 22791
22475: LD_INT 20
22477: DOUBLE
22478: EQUAL
22479: IFTRUE 22483
22481: GO 22508
22483: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22484: LD_ADDR_VAR 0 3
22488: PUSH
22489: LD_INT 6
22491: PPUSH
22492: LD_VAR 0 1
22496: PPUSH
22497: CALL_OW 321
22501: PUSH
22502: LD_INT 2
22504: EQUAL
22505: ST_TO_ADDR
22506: GO 22791
22508: LD_INT 22
22510: DOUBLE
22511: EQUAL
22512: IFTRUE 22522
22514: LD_INT 36
22516: DOUBLE
22517: EQUAL
22518: IFTRUE 22522
22520: GO 22547
22522: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22523: LD_ADDR_VAR 0 3
22527: PUSH
22528: LD_INT 15
22530: PPUSH
22531: LD_VAR 0 1
22535: PPUSH
22536: CALL_OW 321
22540: PUSH
22541: LD_INT 2
22543: EQUAL
22544: ST_TO_ADDR
22545: GO 22791
22547: LD_INT 30
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22580
22555: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22556: LD_ADDR_VAR 0 3
22560: PUSH
22561: LD_INT 20
22563: PPUSH
22564: LD_VAR 0 1
22568: PPUSH
22569: CALL_OW 321
22573: PUSH
22574: LD_INT 2
22576: EQUAL
22577: ST_TO_ADDR
22578: GO 22791
22580: LD_INT 28
22582: DOUBLE
22583: EQUAL
22584: IFTRUE 22594
22586: LD_INT 21
22588: DOUBLE
22589: EQUAL
22590: IFTRUE 22594
22592: GO 22619
22594: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22595: LD_ADDR_VAR 0 3
22599: PUSH
22600: LD_INT 21
22602: PPUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 321
22612: PUSH
22613: LD_INT 2
22615: EQUAL
22616: ST_TO_ADDR
22617: GO 22791
22619: LD_INT 16
22621: DOUBLE
22622: EQUAL
22623: IFTRUE 22627
22625: GO 22652
22627: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22628: LD_ADDR_VAR 0 3
22632: PUSH
22633: LD_INT 84
22635: PPUSH
22636: LD_VAR 0 1
22640: PPUSH
22641: CALL_OW 321
22645: PUSH
22646: LD_INT 2
22648: EQUAL
22649: ST_TO_ADDR
22650: GO 22791
22652: LD_INT 19
22654: DOUBLE
22655: EQUAL
22656: IFTRUE 22666
22658: LD_INT 23
22660: DOUBLE
22661: EQUAL
22662: IFTRUE 22666
22664: GO 22691
22666: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22667: LD_ADDR_VAR 0 3
22671: PUSH
22672: LD_INT 83
22674: PPUSH
22675: LD_VAR 0 1
22679: PPUSH
22680: CALL_OW 321
22684: PUSH
22685: LD_INT 2
22687: EQUAL
22688: ST_TO_ADDR
22689: GO 22791
22691: LD_INT 17
22693: DOUBLE
22694: EQUAL
22695: IFTRUE 22699
22697: GO 22724
22699: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22700: LD_ADDR_VAR 0 3
22704: PUSH
22705: LD_INT 39
22707: PPUSH
22708: LD_VAR 0 1
22712: PPUSH
22713: CALL_OW 321
22717: PUSH
22718: LD_INT 2
22720: EQUAL
22721: ST_TO_ADDR
22722: GO 22791
22724: LD_INT 18
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 22757
22732: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22733: LD_ADDR_VAR 0 3
22737: PUSH
22738: LD_INT 40
22740: PPUSH
22741: LD_VAR 0 1
22745: PPUSH
22746: CALL_OW 321
22750: PUSH
22751: LD_INT 2
22753: EQUAL
22754: ST_TO_ADDR
22755: GO 22791
22757: LD_INT 27
22759: DOUBLE
22760: EQUAL
22761: IFTRUE 22765
22763: GO 22790
22765: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22766: LD_ADDR_VAR 0 3
22770: PUSH
22771: LD_INT 35
22773: PPUSH
22774: LD_VAR 0 1
22778: PPUSH
22779: CALL_OW 321
22783: PUSH
22784: LD_INT 2
22786: EQUAL
22787: ST_TO_ADDR
22788: GO 22791
22790: POP
// end ;
22791: LD_VAR 0 3
22795: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22796: LD_INT 0
22798: PPUSH
22799: PPUSH
22800: PPUSH
22801: PPUSH
22802: PPUSH
22803: PPUSH
22804: PPUSH
22805: PPUSH
22806: PPUSH
22807: PPUSH
22808: PPUSH
// result := false ;
22809: LD_ADDR_VAR 0 6
22813: PUSH
22814: LD_INT 0
22816: ST_TO_ADDR
// if btype = b_depot then
22817: LD_VAR 0 2
22821: PUSH
22822: LD_INT 0
22824: EQUAL
22825: IFFALSE 22837
// begin result := true ;
22827: LD_ADDR_VAR 0 6
22831: PUSH
22832: LD_INT 1
22834: ST_TO_ADDR
// exit ;
22835: GO 23663
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22837: LD_VAR 0 1
22841: NOT
22842: PUSH
22843: LD_VAR 0 1
22847: PPUSH
22848: CALL_OW 266
22852: PUSH
22853: LD_INT 0
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: IN
22863: NOT
22864: OR
22865: PUSH
22866: LD_VAR 0 2
22870: NOT
22871: OR
22872: PUSH
22873: LD_VAR 0 5
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 3
22889: PUSH
22890: LD_INT 4
22892: PUSH
22893: LD_INT 5
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: IN
22904: NOT
22905: OR
22906: PUSH
22907: LD_VAR 0 3
22911: PPUSH
22912: LD_VAR 0 4
22916: PPUSH
22917: CALL_OW 488
22921: NOT
22922: OR
22923: IFFALSE 22927
// exit ;
22925: GO 23663
// side := GetSide ( depot ) ;
22927: LD_ADDR_VAR 0 9
22931: PUSH
22932: LD_VAR 0 1
22936: PPUSH
22937: CALL_OW 255
22941: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22942: LD_VAR 0 9
22946: PPUSH
22947: LD_VAR 0 2
22951: PPUSH
22952: CALL 22420 0 2
22956: NOT
22957: IFFALSE 22961
// exit ;
22959: GO 23663
// pom := GetBase ( depot ) ;
22961: LD_ADDR_VAR 0 10
22965: PUSH
22966: LD_VAR 0 1
22970: PPUSH
22971: CALL_OW 274
22975: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22976: LD_ADDR_VAR 0 11
22980: PUSH
22981: LD_VAR 0 2
22985: PPUSH
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL_OW 248
22995: PPUSH
22996: CALL_OW 450
23000: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23001: LD_VAR 0 10
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: CALL_OW 275
23013: PUSH
23014: LD_VAR 0 11
23018: PUSH
23019: LD_INT 1
23021: ARRAY
23022: GREATEREQUAL
23023: PUSH
23024: LD_VAR 0 10
23028: PPUSH
23029: LD_INT 2
23031: PPUSH
23032: CALL_OW 275
23036: PUSH
23037: LD_VAR 0 11
23041: PUSH
23042: LD_INT 2
23044: ARRAY
23045: GREATEREQUAL
23046: AND
23047: PUSH
23048: LD_VAR 0 10
23052: PPUSH
23053: LD_INT 3
23055: PPUSH
23056: CALL_OW 275
23060: PUSH
23061: LD_VAR 0 11
23065: PUSH
23066: LD_INT 3
23068: ARRAY
23069: GREATEREQUAL
23070: AND
23071: NOT
23072: IFFALSE 23076
// exit ;
23074: GO 23663
// if GetBType ( depot ) = b_depot then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 266
23085: PUSH
23086: LD_INT 0
23088: EQUAL
23089: IFFALSE 23101
// dist := 28 else
23091: LD_ADDR_VAR 0 14
23095: PUSH
23096: LD_INT 28
23098: ST_TO_ADDR
23099: GO 23109
// dist := 36 ;
23101: LD_ADDR_VAR 0 14
23105: PUSH
23106: LD_INT 36
23108: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23109: LD_VAR 0 1
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: LD_VAR 0 4
23123: PPUSH
23124: CALL_OW 297
23128: PUSH
23129: LD_VAR 0 14
23133: GREATER
23134: IFFALSE 23138
// exit ;
23136: GO 23663
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23138: LD_ADDR_VAR 0 12
23142: PUSH
23143: LD_VAR 0 2
23147: PPUSH
23148: LD_VAR 0 3
23152: PPUSH
23153: LD_VAR 0 4
23157: PPUSH
23158: LD_VAR 0 5
23162: PPUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: CALL_OW 248
23172: PPUSH
23173: LD_INT 0
23175: PPUSH
23176: CALL 23668 0 6
23180: ST_TO_ADDR
// if not hexes then
23181: LD_VAR 0 12
23185: NOT
23186: IFFALSE 23190
// exit ;
23188: GO 23663
// hex := GetHexInfo ( x , y ) ;
23190: LD_ADDR_VAR 0 15
23194: PUSH
23195: LD_VAR 0 3
23199: PPUSH
23200: LD_VAR 0 4
23204: PPUSH
23205: CALL_OW 546
23209: ST_TO_ADDR
// if hex [ 1 ] then
23210: LD_VAR 0 15
23214: PUSH
23215: LD_INT 1
23217: ARRAY
23218: IFFALSE 23222
// exit ;
23220: GO 23663
// height := hex [ 2 ] ;
23222: LD_ADDR_VAR 0 13
23226: PUSH
23227: LD_VAR 0 15
23231: PUSH
23232: LD_INT 2
23234: ARRAY
23235: ST_TO_ADDR
// for i = 1 to hexes do
23236: LD_ADDR_VAR 0 7
23240: PUSH
23241: DOUBLE
23242: LD_INT 1
23244: DEC
23245: ST_TO_ADDR
23246: LD_VAR 0 12
23250: PUSH
23251: FOR_TO
23252: IFFALSE 23582
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23254: LD_VAR 0 12
23258: PUSH
23259: LD_VAR 0 7
23263: ARRAY
23264: PUSH
23265: LD_INT 1
23267: ARRAY
23268: PPUSH
23269: LD_VAR 0 12
23273: PUSH
23274: LD_VAR 0 7
23278: ARRAY
23279: PUSH
23280: LD_INT 2
23282: ARRAY
23283: PPUSH
23284: CALL_OW 488
23288: NOT
23289: PUSH
23290: LD_VAR 0 12
23294: PUSH
23295: LD_VAR 0 7
23299: ARRAY
23300: PUSH
23301: LD_INT 1
23303: ARRAY
23304: PPUSH
23305: LD_VAR 0 12
23309: PUSH
23310: LD_VAR 0 7
23314: ARRAY
23315: PUSH
23316: LD_INT 2
23318: ARRAY
23319: PPUSH
23320: CALL_OW 428
23324: PUSH
23325: LD_INT 0
23327: GREATER
23328: OR
23329: PUSH
23330: LD_VAR 0 12
23334: PUSH
23335: LD_VAR 0 7
23339: ARRAY
23340: PUSH
23341: LD_INT 1
23343: ARRAY
23344: PPUSH
23345: LD_VAR 0 12
23349: PUSH
23350: LD_VAR 0 7
23354: ARRAY
23355: PUSH
23356: LD_INT 2
23358: ARRAY
23359: PPUSH
23360: CALL_OW 351
23364: OR
23365: IFFALSE 23371
// exit ;
23367: POP
23368: POP
23369: GO 23663
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23371: LD_ADDR_VAR 0 8
23375: PUSH
23376: LD_VAR 0 12
23380: PUSH
23381: LD_VAR 0 7
23385: ARRAY
23386: PUSH
23387: LD_INT 1
23389: ARRAY
23390: PPUSH
23391: LD_VAR 0 12
23395: PUSH
23396: LD_VAR 0 7
23400: ARRAY
23401: PUSH
23402: LD_INT 2
23404: ARRAY
23405: PPUSH
23406: CALL_OW 546
23410: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23411: LD_VAR 0 8
23415: PUSH
23416: LD_INT 1
23418: ARRAY
23419: PUSH
23420: LD_VAR 0 8
23424: PUSH
23425: LD_INT 2
23427: ARRAY
23428: PUSH
23429: LD_VAR 0 13
23433: PUSH
23434: LD_INT 2
23436: PLUS
23437: GREATER
23438: OR
23439: PUSH
23440: LD_VAR 0 8
23444: PUSH
23445: LD_INT 2
23447: ARRAY
23448: PUSH
23449: LD_VAR 0 13
23453: PUSH
23454: LD_INT 2
23456: MINUS
23457: LESS
23458: OR
23459: PUSH
23460: LD_VAR 0 8
23464: PUSH
23465: LD_INT 3
23467: ARRAY
23468: PUSH
23469: LD_INT 0
23471: PUSH
23472: LD_INT 8
23474: PUSH
23475: LD_INT 9
23477: PUSH
23478: LD_INT 10
23480: PUSH
23481: LD_INT 11
23483: PUSH
23484: LD_INT 12
23486: PUSH
23487: LD_INT 13
23489: PUSH
23490: LD_INT 16
23492: PUSH
23493: LD_INT 17
23495: PUSH
23496: LD_INT 18
23498: PUSH
23499: LD_INT 19
23501: PUSH
23502: LD_INT 20
23504: PUSH
23505: LD_INT 21
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: IN
23523: NOT
23524: OR
23525: PUSH
23526: LD_VAR 0 8
23530: PUSH
23531: LD_INT 5
23533: ARRAY
23534: NOT
23535: OR
23536: PUSH
23537: LD_VAR 0 8
23541: PUSH
23542: LD_INT 6
23544: ARRAY
23545: PUSH
23546: LD_INT 1
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: LD_INT 7
23554: PUSH
23555: LD_INT 9
23557: PUSH
23558: LD_INT 10
23560: PUSH
23561: LD_INT 11
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: IN
23572: NOT
23573: OR
23574: IFFALSE 23580
// exit ;
23576: POP
23577: POP
23578: GO 23663
// end ;
23580: GO 23251
23582: POP
23583: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23584: LD_VAR 0 9
23588: PPUSH
23589: LD_VAR 0 3
23593: PPUSH
23594: LD_VAR 0 4
23598: PPUSH
23599: LD_INT 20
23601: PPUSH
23602: CALL 15586 0 4
23606: PUSH
23607: LD_INT 4
23609: ARRAY
23610: IFFALSE 23614
// exit ;
23612: GO 23663
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23614: LD_VAR 0 2
23618: PUSH
23619: LD_INT 29
23621: PUSH
23622: LD_INT 30
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: IN
23629: PUSH
23630: LD_VAR 0 3
23634: PPUSH
23635: LD_VAR 0 4
23639: PPUSH
23640: LD_VAR 0 9
23644: PPUSH
23645: CALL_OW 440
23649: NOT
23650: AND
23651: IFFALSE 23655
// exit ;
23653: GO 23663
// result := true ;
23655: LD_ADDR_VAR 0 6
23659: PUSH
23660: LD_INT 1
23662: ST_TO_ADDR
// end ;
23663: LD_VAR 0 6
23667: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23668: LD_INT 0
23670: PPUSH
23671: PPUSH
23672: PPUSH
23673: PPUSH
23674: PPUSH
23675: PPUSH
23676: PPUSH
23677: PPUSH
23678: PPUSH
23679: PPUSH
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
23690: PPUSH
23691: PPUSH
23692: PPUSH
23693: PPUSH
23694: PPUSH
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
23701: PPUSH
23702: PPUSH
23703: PPUSH
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
// result = [ ] ;
23728: LD_ADDR_VAR 0 7
23732: PUSH
23733: EMPTY
23734: ST_TO_ADDR
// temp_list = [ ] ;
23735: LD_ADDR_VAR 0 9
23739: PUSH
23740: EMPTY
23741: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23742: LD_VAR 0 4
23746: PUSH
23747: LD_INT 0
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: LD_INT 2
23755: PUSH
23756: LD_INT 3
23758: PUSH
23759: LD_INT 4
23761: PUSH
23762: LD_INT 5
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: IN
23773: NOT
23774: PUSH
23775: LD_VAR 0 1
23779: PUSH
23780: LD_INT 0
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: IN
23790: PUSH
23791: LD_VAR 0 5
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: LD_INT 2
23801: PUSH
23802: LD_INT 3
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: LIST
23809: IN
23810: NOT
23811: AND
23812: OR
23813: IFFALSE 23817
// exit ;
23815: GO 42208
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23817: LD_VAR 0 1
23821: PUSH
23822: LD_INT 6
23824: PUSH
23825: LD_INT 7
23827: PUSH
23828: LD_INT 8
23830: PUSH
23831: LD_INT 13
23833: PUSH
23834: LD_INT 12
23836: PUSH
23837: LD_INT 15
23839: PUSH
23840: LD_INT 11
23842: PUSH
23843: LD_INT 14
23845: PUSH
23846: LD_INT 10
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: IN
23860: IFFALSE 23870
// btype = b_lab ;
23862: LD_ADDR_VAR 0 1
23866: PUSH
23867: LD_INT 6
23869: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23870: LD_VAR 0 6
23874: PUSH
23875: LD_INT 0
23877: PUSH
23878: LD_INT 1
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: LIST
23888: IN
23889: NOT
23890: PUSH
23891: LD_VAR 0 1
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: LD_INT 3
23907: PUSH
23908: LD_INT 6
23910: PUSH
23911: LD_INT 36
23913: PUSH
23914: LD_INT 4
23916: PUSH
23917: LD_INT 5
23919: PUSH
23920: LD_INT 31
23922: PUSH
23923: LD_INT 32
23925: PUSH
23926: LD_INT 33
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: IN
23942: NOT
23943: PUSH
23944: LD_VAR 0 6
23948: PUSH
23949: LD_INT 1
23951: EQUAL
23952: AND
23953: OR
23954: PUSH
23955: LD_VAR 0 1
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: LD_INT 3
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: IN
23970: NOT
23971: PUSH
23972: LD_VAR 0 6
23976: PUSH
23977: LD_INT 2
23979: EQUAL
23980: AND
23981: OR
23982: IFFALSE 23992
// mode = 0 ;
23984: LD_ADDR_VAR 0 6
23988: PUSH
23989: LD_INT 0
23991: ST_TO_ADDR
// case mode of 0 :
23992: LD_VAR 0 6
23996: PUSH
23997: LD_INT 0
23999: DOUBLE
24000: EQUAL
24001: IFTRUE 24005
24003: GO 35458
24005: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24006: LD_ADDR_VAR 0 11
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: LD_INT 1
24026: NEG
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: NEG
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: NEG
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: LD_INT 2
24091: NEG
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 0
24099: PUSH
24100: LD_INT 2
24102: NEG
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: LD_INT 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: LD_INT 2
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 1
24141: NEG
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: LD_INT 3
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: LD_INT 3
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: NEG
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24199: LD_ADDR_VAR 0 12
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: LD_INT 0
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: NEG
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 2
24322: NEG
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 2
24333: NEG
24334: PUSH
24335: LD_INT 1
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 2
24345: NEG
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 3
24356: NEG
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 3
24367: NEG
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24395: LD_ADDR_VAR 0 13
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: LD_INT 1
24415: NEG
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 1
24433: PUSH
24434: LD_INT 1
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: LD_INT 1
24468: NEG
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 2
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 2
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: LD_INT 2
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: NEG
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 2
24530: NEG
24531: PUSH
24532: LD_INT 2
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 2
24542: NEG
24543: PUSH
24544: LD_INT 3
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 3
24554: NEG
24555: PUSH
24556: LD_INT 2
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 3
24566: NEG
24567: PUSH
24568: LD_INT 3
24570: NEG
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24594: LD_ADDR_VAR 0 14
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 1
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: NEG
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 2
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: LD_INT 2
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 1
24729: NEG
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 1
24740: NEG
24741: PUSH
24742: LD_INT 3
24744: NEG
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 3
24755: NEG
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: LD_INT 2
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24790: LD_ADDR_VAR 0 15
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: LD_INT 1
24810: NEG
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 1
24902: NEG
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: NEG
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: NEG
24925: PUSH
24926: LD_INT 1
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 2
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 3
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 3
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24983: LD_ADDR_VAR 0 16
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 1
25041: NEG
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: NEG
25053: PUSH
25054: LD_INT 1
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 2
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: LD_INT 2
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 2
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 2
25118: NEG
25119: PUSH
25120: LD_INT 2
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 3
25130: PUSH
25131: LD_INT 2
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 3
25140: PUSH
25141: LD_INT 3
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: LD_INT 3
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25176: LD_ADDR_VAR 0 17
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: LD_INT 0
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 0
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: LD_INT 1
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: LD_INT 1
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: LD_INT 2
25261: NEG
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: LD_INT 2
25272: NEG
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 1
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: LD_INT 0
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 2
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: NEG
25342: PUSH
25343: LD_INT 1
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 2
25352: NEG
25353: PUSH
25354: LD_INT 0
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 2
25375: NEG
25376: PUSH
25377: LD_INT 2
25379: NEG
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25406: LD_ADDR_VAR 0 18
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: LD_INT 1
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: LD_INT 2
25491: NEG
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: LD_INT 0
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 2
25541: PUSH
25542: LD_INT 2
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: LD_INT 2
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 0
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 2
25582: NEG
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: NEG
25594: PUSH
25595: LD_INT 1
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: NEG
25606: PUSH
25607: LD_INT 2
25609: NEG
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25636: LD_ADDR_VAR 0 19
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: NEG
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: LD_INT 2
25721: NEG
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: LD_INT 2
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 0
25791: PUSH
25792: LD_INT 2
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 2
25812: NEG
25813: PUSH
25814: LD_INT 0
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: LD_INT 1
25827: NEG
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 2
25835: NEG
25836: PUSH
25837: LD_INT 2
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25866: LD_ADDR_VAR 0 20
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: LD_INT 1
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: LD_INT 1
25973: NEG
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: LD_INT 0
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 2
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: LD_INT 2
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: NEG
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: LD_INT 1
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 2
26065: NEG
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26096: LD_ADDR_VAR 0 21
26100: PUSH
26101: LD_INT 0
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: LD_INT 1
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 1
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: LD_INT 1
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: LD_INT 2
26181: NEG
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 0
26189: PUSH
26190: LD_INT 2
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 1
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: LD_INT 0
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 2
26272: NEG
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: NEG
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26326: LD_ADDR_VAR 0 22
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: LD_INT 2
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 2
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 2
26441: PUSH
26442: LD_INT 0
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 2
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 2
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: LD_INT 2
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: LD_INT 0
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 2
26513: NEG
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: LD_INT 2
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26556: LD_ADDR_VAR 0 23
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: LD_INT 0
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: LD_INT 2
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: LD_INT 2
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 2
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 2
26691: PUSH
26692: LD_INT 2
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: NEG
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: LD_INT 2
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: LD_INT 3
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: LD_INT 3
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: LD_INT 2
26794: NEG
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 2
26802: PUSH
26803: LD_INT 1
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26836: LD_ADDR_VAR 0 24
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 0
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 2
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 2
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 2
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: LD_INT 2
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: LD_INT 2
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 2
27012: NEG
27013: PUSH
27014: LD_INT 0
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: NEG
27024: PUSH
27025: LD_INT 1
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: LD_INT 2
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: PUSH
27048: LD_INT 2
27050: NEG
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 3
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 3
27079: PUSH
27080: LD_INT 2
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27112: LD_ADDR_VAR 0 25
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: LD_INT 2
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: LD_INT 2
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 2
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 2
27288: NEG
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: LD_INT 2
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 3
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 3
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: LD_INT 3
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27386: LD_ADDR_VAR 0 26
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 2
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 2
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: LD_INT 3
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: LD_INT 3
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: NEG
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27662: LD_ADDR_VAR 0 27
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 2
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 2
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 2
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: LD_INT 2
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: LD_INT 2
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 2
27849: NEG
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 2
27884: NEG
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 3
27895: NEG
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 3
27907: NEG
27908: PUSH
27909: LD_INT 2
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27942: LD_ADDR_VAR 0 28
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 1
28000: NEG
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: LD_INT 2
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: LD_INT 1
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 2
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: NEG
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: NEG
28142: PUSH
28143: LD_INT 2
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 2
28153: NEG
28154: PUSH
28155: LD_INT 3
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: LD_INT 3
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 3
28177: NEG
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 3
28189: NEG
28190: PUSH
28191: LD_INT 2
28193: NEG
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28224: LD_ADDR_VAR 0 29
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: NEG
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: LD_INT 2
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 2
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: LD_INT 1
28331: NEG
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 2
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 2
28390: NEG
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 2
28402: NEG
28403: PUSH
28404: LD_INT 2
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: LD_INT 3
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 3
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 3
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 3
28468: NEG
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28503: LD_ADDR_VAR 0 30
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 2
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 2
28638: PUSH
28639: LD_INT 2
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 1
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: LD_INT 1
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 2
28669: NEG
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: NEG
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: NEG
28693: PUSH
28694: LD_INT 3
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 2
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 3
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 2
28725: PUSH
28726: LD_INT 3
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 2
28735: NEG
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 3
28746: NEG
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28781: LD_ADDR_VAR 0 31
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: LD_INT 0
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: LD_INT 1
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: LD_INT 2
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: LD_INT 2
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: LD_INT 2
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 2
28946: NEG
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 2
28958: NEG
28959: PUSH
28960: LD_INT 2
28962: NEG
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: LD_INT 3
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 1
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 3
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: LD_INT 3
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 3
29024: NEG
29025: PUSH
29026: LD_INT 2
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29059: LD_ADDR_VAR 0 32
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: LD_INT 1
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 2
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: LD_INT 1
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 2
29225: NEG
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 2
29236: NEG
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: NEG
29249: PUSH
29250: LD_INT 3
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 3
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: NEG
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 3
29302: NEG
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29337: LD_ADDR_VAR 0 33
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: LD_INT 1
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PUSH
29408: LD_INT 1
29410: NEG
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: LD_INT 2
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: LD_INT 1
29433: NEG
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: LD_INT 2
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: LD_INT 2
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: NEG
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 2
29503: NEG
29504: PUSH
29505: LD_INT 1
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 2
29515: NEG
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: NEG
29528: PUSH
29529: LD_INT 3
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 3
29581: NEG
29582: PUSH
29583: LD_INT 2
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29616: LD_ADDR_VAR 0 34
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 1
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 2
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 2
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: NEG
29796: PUSH
29797: LD_INT 2
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: LD_INT 3
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: LD_INT 2
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 3
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 3
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 3
29861: NEG
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29896: LD_ADDR_VAR 0 35
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 1
29965: NEG
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 2
29987: NEG
29988: PUSH
29989: LD_INT 1
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30008: LD_ADDR_VAR 0 36
30012: PUSH
30013: LD_INT 0
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: NEG
30078: PUSH
30079: LD_INT 1
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: LD_INT 2
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: LD_INT 2
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30120: LD_ADDR_VAR 0 37
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30232: LD_ADDR_VAR 0 38
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 0
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 1
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: NEG
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: NEG
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 2
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 2
30323: NEG
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30344: LD_ADDR_VAR 0 39
30348: PUSH
30349: LD_INT 0
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: LD_INT 2
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30456: LD_ADDR_VAR 0 40
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: LD_INT 0
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PUSH
30527: LD_INT 1
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30568: LD_ADDR_VAR 0 41
30572: PUSH
30573: LD_INT 0
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: LD_INT 1
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: LD_INT 2
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 2
30723: NEG
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 2
30734: NEG
30735: PUSH
30736: LD_INT 1
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 2
30746: NEG
30747: PUSH
30748: LD_INT 2
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: NEG
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 3
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: LD_INT 3
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 3
30842: NEG
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 3
30853: NEG
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 3
30865: NEG
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 3
30877: NEG
30878: PUSH
30879: LD_INT 3
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30918: LD_ADDR_VAR 0 42
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 2
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: LD_INT 2
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 2
31033: PUSH
31034: LD_INT 1
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: LD_INT 2
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 2
31084: NEG
31085: PUSH
31086: LD_INT 1
31088: NEG
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: LD_INT 2
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: NEG
31109: PUSH
31110: LD_INT 3
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 3
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 3
31154: PUSH
31155: LD_INT 2
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 3
31164: PUSH
31165: LD_INT 3
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: LD_INT 3
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 3
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 3
31215: NEG
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 3
31227: NEG
31228: PUSH
31229: LD_INT 3
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31268: LD_ADDR_VAR 0 43
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 1
31349: NEG
31350: PUSH
31351: LD_INT 2
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: LD_INT 0
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 2
31445: NEG
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 3
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 3
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 2
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 3
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: LD_INT 3
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: LD_INT 2
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 3
31564: NEG
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: NEG
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31616: LD_ADDR_VAR 0 44
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 2
31771: NEG
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: NEG
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: LD_INT 2
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: LD_INT 3
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 3
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 3
31859: PUSH
31860: LD_INT 3
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 3
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 3
31890: NEG
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 3
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 3
31925: NEG
31926: PUSH
31927: LD_INT 3
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31966: LD_ADDR_VAR 0 45
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: LD_INT 2
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 2
32132: NEG
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 2
32144: NEG
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 2
32156: NEG
32157: PUSH
32158: LD_INT 3
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: LD_INT 3
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: LD_INT 3
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 2
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 3
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 3
32212: PUSH
32213: LD_INT 3
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: LD_INT 3
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 3
32263: NEG
32264: PUSH
32265: LD_INT 2
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 3
32275: NEG
32276: PUSH
32277: LD_INT 3
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32316: LD_ADDR_VAR 0 46
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 0
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 2
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: LD_INT 2
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 2
32441: PUSH
32442: LD_INT 1
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: LD_INT 0
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: NEG
32494: PUSH
32495: LD_INT 1
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: LD_INT 3
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: LD_INT 3
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 3
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 3
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 3
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 3
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 3
32612: NEG
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 3
32623: NEG
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32664: LD_ADDR_VAR 0 47
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: LD_INT 0
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 1
32733: NEG
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: LD_INT 2
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: LD_INT 2
32760: NEG
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: NEG
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: NEG
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32815: LD_ADDR_VAR 0 48
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32962: LD_ADDR_VAR 0 49
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: LD_INT 0
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: LD_INT 2
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33106: LD_ADDR_VAR 0 50
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 0
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 0
33217: PUSH
33218: LD_INT 2
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 1
33227: NEG
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33250: LD_ADDR_VAR 0 51
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: LD_INT 1
33323: NEG
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 2
33362: NEG
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 2
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33397: LD_ADDR_VAR 0 52
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: LD_INT 0
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: NEG
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: LD_INT 2
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 2
33512: NEG
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: LD_INT 2
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33548: LD_ADDR_VAR 0 53
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: NEG
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 2
33735: NEG
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: NEG
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33778: LD_ADDR_VAR 0 54
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 0
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 0
33795: PUSH
33796: LD_INT 1
33798: NEG
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: LD_INT 1
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: NEG
33860: PUSH
33861: LD_INT 2
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: LD_INT 2
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: PUSH
33883: LD_INT 1
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 2
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 2
33954: NEG
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 2
33965: NEG
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 2
33977: NEG
33978: PUSH
33979: LD_INT 2
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34008: LD_ADDR_VAR 0 55
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 0
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 1
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: LD_INT 0
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: LD_INT 2
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 2
34207: NEG
34208: PUSH
34209: LD_INT 2
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34238: LD_ADDR_VAR 0 56
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 0
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: LD_INT 2
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: LD_INT 2
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: LD_INT 1
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: LD_INT 1
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: LD_INT 2
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: NEG
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: LD_INT 1
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 2
34437: NEG
34438: PUSH
34439: LD_INT 2
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34468: LD_ADDR_VAR 0 57
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: LD_INT 1
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: NEG
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: LD_INT 1
34541: NEG
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: LD_INT 2
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 2
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 1
34633: NEG
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: NEG
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: LD_INT 1
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: LD_INT 2
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34698: LD_ADDR_VAR 0 58
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: NEG
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: LD_INT 2
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: LD_INT 2
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: LD_INT 0
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 2
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: NEG
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 2
34897: NEG
34898: PUSH
34899: LD_INT 2
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34928: LD_ADDR_VAR 0 59
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35016: LD_ADDR_VAR 0 60
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35104: LD_ADDR_VAR 0 61
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35192: LD_ADDR_VAR 0 62
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 0
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35280: LD_ADDR_VAR 0 63
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35368: LD_ADDR_VAR 0 64
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: ST_TO_ADDR
// end ; 1 :
35456: GO 41353
35458: LD_INT 1
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35466
35464: GO 38089
35466: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35467: LD_ADDR_VAR 0 11
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 3
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: LD_INT 3
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: PUSH
35498: LD_INT 2
35500: NEG
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: LIST
35510: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35511: LD_ADDR_VAR 0 12
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: LD_INT 1
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 3
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 3
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: LIST
35551: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35552: LD_ADDR_VAR 0 13
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 3
35569: PUSH
35570: LD_INT 3
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 2
35579: PUSH
35580: LD_INT 3
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35592: LD_ADDR_VAR 0 14
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: LD_INT 3
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: LD_INT 3
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: NEG
35620: PUSH
35621: LD_INT 2
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35633: LD_ADDR_VAR 0 15
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 3
35651: NEG
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 3
35662: NEG
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35677: LD_ADDR_VAR 0 16
35681: PUSH
35682: LD_INT 2
35684: NEG
35685: PUSH
35686: LD_INT 3
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 3
35696: NEG
35697: PUSH
35698: LD_INT 2
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 3
35708: NEG
35709: PUSH
35710: LD_INT 3
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35723: LD_ADDR_VAR 0 17
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: LD_INT 3
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: LD_INT 3
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 2
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35767: LD_ADDR_VAR 0 18
35771: PUSH
35772: LD_INT 2
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 3
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 3
35795: PUSH
35796: LD_INT 1
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35808: LD_ADDR_VAR 0 19
35812: PUSH
35813: LD_INT 3
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 3
35825: PUSH
35826: LD_INT 3
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: LD_INT 3
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35848: LD_ADDR_VAR 0 20
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: LD_INT 3
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35889: LD_ADDR_VAR 0 21
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 3
35907: NEG
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 3
35918: NEG
35919: PUSH
35920: LD_INT 1
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35933: LD_ADDR_VAR 0 22
35937: PUSH
35938: LD_INT 2
35940: NEG
35941: PUSH
35942: LD_INT 3
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: NEG
35953: PUSH
35954: LD_INT 2
35956: NEG
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 3
35964: NEG
35965: PUSH
35966: LD_INT 3
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35979: LD_ADDR_VAR 0 23
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: LD_INT 3
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: LD_INT 4
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: LD_INT 3
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: LIST
36022: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36023: LD_ADDR_VAR 0 24
36027: PUSH
36028: LD_INT 3
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 3
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 4
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36064: LD_ADDR_VAR 0 25
36068: PUSH
36069: LD_INT 3
36071: PUSH
36072: LD_INT 3
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 4
36081: PUSH
36082: LD_INT 3
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 3
36091: PUSH
36092: LD_INT 4
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: LIST
36103: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36104: LD_ADDR_VAR 0 26
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: LD_INT 3
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: LD_INT 4
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 3
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36145: LD_ADDR_VAR 0 27
36149: PUSH
36150: LD_INT 3
36152: NEG
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 3
36163: NEG
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 4
36174: NEG
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: LIST
36188: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36189: LD_ADDR_VAR 0 28
36193: PUSH
36194: LD_INT 3
36196: NEG
36197: PUSH
36198: LD_INT 3
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 3
36208: NEG
36209: PUSH
36210: LD_INT 4
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 4
36220: NEG
36221: PUSH
36222: LD_INT 3
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36235: LD_ADDR_VAR 0 29
36239: PUSH
36240: LD_INT 1
36242: NEG
36243: PUSH
36244: LD_INT 3
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: LD_INT 3
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: LD_INT 4
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: LD_INT 4
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: LD_INT 3
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 5
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: LD_INT 5
36325: NEG
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: LD_INT 4
36336: NEG
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: LD_INT 6
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 6
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: LD_INT 5
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36390: LD_ADDR_VAR 0 30
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 3
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 3
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 3
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 4
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 4
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 4
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 5
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 5
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 5
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 6
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 6
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36533: LD_ADDR_VAR 0 31
36537: PUSH
36538: LD_INT 3
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 3
36550: PUSH
36551: LD_INT 3
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: LD_INT 3
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 4
36570: PUSH
36571: LD_INT 3
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 4
36580: PUSH
36581: LD_INT 4
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 3
36590: PUSH
36591: LD_INT 4
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 5
36600: PUSH
36601: LD_INT 4
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 5
36610: PUSH
36611: LD_INT 5
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 4
36620: PUSH
36621: LD_INT 5
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 6
36630: PUSH
36631: LD_INT 5
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 6
36640: PUSH
36641: LD_INT 6
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 5
36650: PUSH
36651: LD_INT 6
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36672: LD_ADDR_VAR 0 32
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: LD_INT 3
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: LD_INT 3
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: LD_INT 4
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 4
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 3
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 5
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: LD_INT 5
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 4
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 6
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: LD_INT 6
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 5
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36815: LD_ADDR_VAR 0 33
36819: PUSH
36820: LD_INT 2
36822: NEG
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 3
36833: NEG
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 3
36844: NEG
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 3
36856: NEG
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 4
36867: NEG
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 4
36878: NEG
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 4
36890: NEG
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 5
36901: NEG
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 5
36912: NEG
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 5
36924: NEG
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 6
36935: NEG
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 6
36946: NEG
36947: PUSH
36948: LD_INT 1
36950: NEG
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36970: LD_ADDR_VAR 0 34
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: LD_INT 3
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 3
36989: NEG
36990: PUSH
36991: LD_INT 2
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 3
37001: NEG
37002: PUSH
37003: LD_INT 3
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 3
37013: NEG
37014: PUSH
37015: LD_INT 4
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 4
37025: NEG
37026: PUSH
37027: LD_INT 3
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 4
37037: NEG
37038: PUSH
37039: LD_INT 4
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 4
37049: NEG
37050: PUSH
37051: LD_INT 5
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 5
37061: NEG
37062: PUSH
37063: LD_INT 4
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 5
37073: NEG
37074: PUSH
37075: LD_INT 5
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 5
37085: NEG
37086: PUSH
37087: LD_INT 6
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 6
37097: NEG
37098: PUSH
37099: LD_INT 5
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 6
37109: NEG
37110: PUSH
37111: LD_INT 6
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37133: LD_ADDR_VAR 0 41
37137: PUSH
37138: LD_INT 0
37140: PUSH
37141: LD_INT 2
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 3
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37177: LD_ADDR_VAR 0 42
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 3
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37218: LD_ADDR_VAR 0 43
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: LD_INT 2
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 3
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: LD_INT 3
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: LIST
37257: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37258: LD_ADDR_VAR 0 44
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: LD_INT 2
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37299: LD_ADDR_VAR 0 45
37303: PUSH
37304: LD_INT 2
37306: NEG
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 3
37328: NEG
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37343: LD_ADDR_VAR 0 46
37347: PUSH
37348: LD_INT 2
37350: NEG
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: LD_INT 3
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 3
37374: NEG
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: LIST
37388: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37389: LD_ADDR_VAR 0 47
37393: PUSH
37394: LD_INT 2
37396: NEG
37397: PUSH
37398: LD_INT 3
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 3
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37422: LD_ADDR_VAR 0 48
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 2
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37453: LD_ADDR_VAR 0 49
37457: PUSH
37458: LD_INT 3
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37482: LD_ADDR_VAR 0 50
37486: PUSH
37487: LD_INT 2
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 3
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37511: LD_ADDR_VAR 0 51
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 2
37529: NEG
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37542: LD_ADDR_VAR 0 52
37546: PUSH
37547: LD_INT 3
37549: NEG
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 3
37561: NEG
37562: PUSH
37563: LD_INT 2
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37575: LD_ADDR_VAR 0 53
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 3
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 3
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37619: LD_ADDR_VAR 0 54
37623: PUSH
37624: LD_INT 2
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 3
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 3
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37660: LD_ADDR_VAR 0 55
37664: PUSH
37665: LD_INT 3
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 3
37677: PUSH
37678: LD_INT 3
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 2
37687: PUSH
37688: LD_INT 3
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37700: LD_ADDR_VAR 0 56
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: LD_INT 3
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: LD_INT 3
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37741: LD_ADDR_VAR 0 57
37745: PUSH
37746: LD_INT 2
37748: NEG
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 3
37759: NEG
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 3
37770: NEG
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: LIST
37784: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37785: LD_ADDR_VAR 0 58
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 3
37804: NEG
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: LD_INT 3
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37831: LD_ADDR_VAR 0 59
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: LIST
37874: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37875: LD_ADDR_VAR 0 60
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 2
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 2
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37916: LD_ADDR_VAR 0 61
37920: PUSH
37921: LD_INT 2
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: LIST
37955: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37956: LD_ADDR_VAR 0 62
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37997: LD_ADDR_VAR 0 63
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 2
38026: NEG
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38041: LD_ADDR_VAR 0 64
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: LD_INT 2
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: ST_TO_ADDR
// end ; 2 :
38087: GO 41353
38089: LD_INT 2
38091: DOUBLE
38092: EQUAL
38093: IFTRUE 38097
38095: GO 41352
38097: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38098: LD_ADDR_VAR 0 29
38102: PUSH
38103: LD_INT 4
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 4
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 5
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 5
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 4
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 3
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: LD_INT 2
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 5
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 3
38198: PUSH
38199: LD_INT 3
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 3
38208: PUSH
38209: LD_INT 2
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 4
38218: PUSH
38219: LD_INT 3
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 4
38228: PUSH
38229: LD_INT 4
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 3
38238: PUSH
38239: LD_INT 4
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: LD_INT 3
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 4
38268: PUSH
38269: LD_INT 2
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: LD_INT 4
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 4
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 3
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 4
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 5
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: LD_INT 5
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: LD_INT 4
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: LD_INT 5
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: NEG
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 3
38381: NEG
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 3
38392: NEG
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 2
38404: NEG
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 2
38415: NEG
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 3
38426: NEG
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 4
38437: NEG
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 4
38448: NEG
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 4
38460: NEG
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 2
38472: NEG
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 4
38483: NEG
38484: PUSH
38485: LD_INT 4
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 4
38495: NEG
38496: PUSH
38497: LD_INT 5
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 3
38507: NEG
38508: PUSH
38509: LD_INT 4
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 3
38519: NEG
38520: PUSH
38521: LD_INT 3
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 4
38531: NEG
38532: PUSH
38533: LD_INT 3
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 5
38543: NEG
38544: PUSH
38545: LD_INT 4
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 5
38555: NEG
38556: PUSH
38557: LD_INT 5
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 3
38567: NEG
38568: PUSH
38569: LD_INT 5
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 5
38579: NEG
38580: PUSH
38581: LD_INT 3
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38636: LD_ADDR_VAR 0 30
38640: PUSH
38641: LD_INT 4
38643: PUSH
38644: LD_INT 4
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 4
38653: PUSH
38654: LD_INT 3
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 5
38663: PUSH
38664: LD_INT 4
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 5
38673: PUSH
38674: LD_INT 5
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 4
38683: PUSH
38684: LD_INT 5
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 3
38693: PUSH
38694: LD_INT 4
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: PUSH
38704: LD_INT 3
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 5
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 3
38723: PUSH
38724: LD_INT 5
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 3
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 4
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 4
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 4
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 4
38826: NEG
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 4
38837: NEG
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 3
38849: NEG
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 4
38871: NEG
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 5
38882: NEG
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 5
38893: NEG
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 5
38905: NEG
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 3
38917: NEG
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 3
38928: NEG
38929: PUSH
38930: LD_INT 3
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 3
38940: NEG
38941: PUSH
38942: LD_INT 4
38944: NEG
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 2
38952: NEG
38953: PUSH
38954: LD_INT 3
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 3
38976: NEG
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 4
38988: NEG
38989: PUSH
38990: LD_INT 3
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 4
39000: NEG
39001: PUSH
39002: LD_INT 4
39004: NEG
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 2
39012: NEG
39013: PUSH
39014: LD_INT 4
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 4
39024: NEG
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 4
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: LD_INT 5
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 4
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: LD_INT 3
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 0
39080: PUSH
39081: LD_INT 3
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 4
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 5
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: LD_INT 3
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: LD_INT 5
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39183: LD_ADDR_VAR 0 31
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 4
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 4
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 5
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 5
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: LD_INT 4
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 5
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: LD_INT 3
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 3
39283: NEG
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 3
39294: NEG
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: NEG
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 3
39328: NEG
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 4
39339: NEG
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 4
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 4
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 4
39385: NEG
39386: PUSH
39387: LD_INT 4
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 4
39397: NEG
39398: PUSH
39399: LD_INT 5
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 3
39409: NEG
39410: PUSH
39411: LD_INT 4
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: NEG
39422: PUSH
39423: LD_INT 3
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 4
39433: NEG
39434: PUSH
39435: LD_INT 3
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 5
39445: NEG
39446: PUSH
39447: LD_INT 4
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 5
39457: NEG
39458: PUSH
39459: LD_INT 5
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 3
39469: NEG
39470: PUSH
39471: LD_INT 5
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 5
39481: NEG
39482: PUSH
39483: LD_INT 3
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 3
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 4
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 3
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 2
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: LD_INT 3
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: LD_INT 4
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: LD_INT 4
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 4
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 4
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 5
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 5
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 4
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 3
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 3
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 5
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39733: LD_ADDR_VAR 0 32
39737: PUSH
39738: LD_INT 4
39740: NEG
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 4
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 3
39763: NEG
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 3
39774: NEG
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 4
39785: NEG
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 5
39796: NEG
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 5
39807: NEG
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 5
39819: NEG
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 3
39831: NEG
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 3
39842: NEG
39843: PUSH
39844: LD_INT 3
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 3
39854: NEG
39855: PUSH
39856: LD_INT 4
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: LD_INT 3
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 3
39890: NEG
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 4
39902: NEG
39903: PUSH
39904: LD_INT 3
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 4
39914: NEG
39915: PUSH
39916: LD_INT 4
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: NEG
39927: PUSH
39928: LD_INT 4
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 4
39938: NEG
39939: PUSH
39940: LD_INT 2
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: LD_INT 4
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: LD_INT 5
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: LD_INT 4
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: LD_INT 3
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 3
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: LD_INT 4
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: LD_INT 5
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 3
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: LD_INT 5
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 3
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 4
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 4
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 3
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: LD_INT 1
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 4
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 4
40145: PUSH
40146: LD_INT 4
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 4
40155: PUSH
40156: LD_INT 3
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 5
40165: PUSH
40166: LD_INT 4
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 5
40175: PUSH
40176: LD_INT 5
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 4
40185: PUSH
40186: LD_INT 5
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 3
40195: PUSH
40196: LD_INT 4
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 3
40205: PUSH
40206: LD_INT 3
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 5
40215: PUSH
40216: LD_INT 3
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 3
40225: PUSH
40226: LD_INT 5
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40280: LD_ADDR_VAR 0 33
40284: PUSH
40285: LD_INT 4
40287: NEG
40288: PUSH
40289: LD_INT 4
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 4
40299: NEG
40300: PUSH
40301: LD_INT 5
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 3
40311: NEG
40312: PUSH
40313: LD_INT 4
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 3
40323: NEG
40324: PUSH
40325: LD_INT 3
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 4
40335: NEG
40336: PUSH
40337: LD_INT 3
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 5
40347: NEG
40348: PUSH
40349: LD_INT 4
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 5
40359: NEG
40360: PUSH
40361: LD_INT 5
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 3
40371: NEG
40372: PUSH
40373: LD_INT 5
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 5
40383: NEG
40384: PUSH
40385: LD_INT 3
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 3
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 4
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 3
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: LD_INT 3
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 4
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 4
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 4
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 4
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 5
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 5
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 4
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 3
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 3
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 3
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 5
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: LD_INT 3
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 4
40610: PUSH
40611: LD_INT 3
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 4
40620: PUSH
40621: LD_INT 4
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 3
40630: PUSH
40631: LD_INT 4
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 3
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 4
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: LD_INT 4
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 4
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 3
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: LD_INT 4
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 5
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 5
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 4
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 3
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: LD_INT 5
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: LD_INT 3
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40818: LD_ADDR_VAR 0 34
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 4
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 5
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 4
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 1
40858: PUSH
40859: LD_INT 3
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 3
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: LD_INT 4
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: LD_INT 5
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 3
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: LD_INT 5
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 3
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 3
40937: PUSH
40938: LD_INT 1
40940: NEG
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 4
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 4
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 3
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 2
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 4
41010: PUSH
41011: LD_INT 2
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 4
41020: PUSH
41021: LD_INT 4
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 4
41030: PUSH
41031: LD_INT 3
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 5
41040: PUSH
41041: LD_INT 4
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 5
41050: PUSH
41051: LD_INT 5
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 4
41060: PUSH
41061: LD_INT 5
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: LD_INT 4
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 3
41080: PUSH
41081: LD_INT 3
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 5
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 3
41100: PUSH
41101: LD_INT 5
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: LD_INT 3
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: LD_INT 4
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 4
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 3
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: LD_INT 4
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 4
41203: NEG
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 4
41214: NEG
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 3
41226: NEG
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 3
41237: NEG
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 4
41248: NEG
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 5
41259: NEG
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 5
41270: NEG
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 5
41282: NEG
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 3
41294: NEG
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: ST_TO_ADDR
// end ; end ;
41350: GO 41353
41352: POP
// case btype of b_depot , b_warehouse :
41353: LD_VAR 0 1
41357: PUSH
41358: LD_INT 0
41360: DOUBLE
41361: EQUAL
41362: IFTRUE 41372
41364: LD_INT 1
41366: DOUBLE
41367: EQUAL
41368: IFTRUE 41372
41370: GO 41573
41372: POP
// case nation of nation_american :
41373: LD_VAR 0 5
41377: PUSH
41378: LD_INT 1
41380: DOUBLE
41381: EQUAL
41382: IFTRUE 41386
41384: GO 41442
41386: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41387: LD_ADDR_VAR 0 9
41391: PUSH
41392: LD_VAR 0 11
41396: PUSH
41397: LD_VAR 0 12
41401: PUSH
41402: LD_VAR 0 13
41406: PUSH
41407: LD_VAR 0 14
41411: PUSH
41412: LD_VAR 0 15
41416: PUSH
41417: LD_VAR 0 16
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: PUSH
41430: LD_VAR 0 4
41434: PUSH
41435: LD_INT 1
41437: PLUS
41438: ARRAY
41439: ST_TO_ADDR
41440: GO 41571
41442: LD_INT 2
41444: DOUBLE
41445: EQUAL
41446: IFTRUE 41450
41448: GO 41506
41450: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41451: LD_ADDR_VAR 0 9
41455: PUSH
41456: LD_VAR 0 17
41460: PUSH
41461: LD_VAR 0 18
41465: PUSH
41466: LD_VAR 0 19
41470: PUSH
41471: LD_VAR 0 20
41475: PUSH
41476: LD_VAR 0 21
41480: PUSH
41481: LD_VAR 0 22
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: PUSH
41494: LD_VAR 0 4
41498: PUSH
41499: LD_INT 1
41501: PLUS
41502: ARRAY
41503: ST_TO_ADDR
41504: GO 41571
41506: LD_INT 3
41508: DOUBLE
41509: EQUAL
41510: IFTRUE 41514
41512: GO 41570
41514: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41515: LD_ADDR_VAR 0 9
41519: PUSH
41520: LD_VAR 0 23
41524: PUSH
41525: LD_VAR 0 24
41529: PUSH
41530: LD_VAR 0 25
41534: PUSH
41535: LD_VAR 0 26
41539: PUSH
41540: LD_VAR 0 27
41544: PUSH
41545: LD_VAR 0 28
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: PUSH
41558: LD_VAR 0 4
41562: PUSH
41563: LD_INT 1
41565: PLUS
41566: ARRAY
41567: ST_TO_ADDR
41568: GO 41571
41570: POP
41571: GO 42126
41573: LD_INT 2
41575: DOUBLE
41576: EQUAL
41577: IFTRUE 41587
41579: LD_INT 3
41581: DOUBLE
41582: EQUAL
41583: IFTRUE 41587
41585: GO 41643
41587: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41588: LD_ADDR_VAR 0 9
41592: PUSH
41593: LD_VAR 0 29
41597: PUSH
41598: LD_VAR 0 30
41602: PUSH
41603: LD_VAR 0 31
41607: PUSH
41608: LD_VAR 0 32
41612: PUSH
41613: LD_VAR 0 33
41617: PUSH
41618: LD_VAR 0 34
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: PUSH
41631: LD_VAR 0 4
41635: PUSH
41636: LD_INT 1
41638: PLUS
41639: ARRAY
41640: ST_TO_ADDR
41641: GO 42126
41643: LD_INT 16
41645: DOUBLE
41646: EQUAL
41647: IFTRUE 41705
41649: LD_INT 17
41651: DOUBLE
41652: EQUAL
41653: IFTRUE 41705
41655: LD_INT 18
41657: DOUBLE
41658: EQUAL
41659: IFTRUE 41705
41661: LD_INT 19
41663: DOUBLE
41664: EQUAL
41665: IFTRUE 41705
41667: LD_INT 22
41669: DOUBLE
41670: EQUAL
41671: IFTRUE 41705
41673: LD_INT 20
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41705
41679: LD_INT 21
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41705
41685: LD_INT 23
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41705
41691: LD_INT 24
41693: DOUBLE
41694: EQUAL
41695: IFTRUE 41705
41697: LD_INT 25
41699: DOUBLE
41700: EQUAL
41701: IFTRUE 41705
41703: GO 41761
41705: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41706: LD_ADDR_VAR 0 9
41710: PUSH
41711: LD_VAR 0 35
41715: PUSH
41716: LD_VAR 0 36
41720: PUSH
41721: LD_VAR 0 37
41725: PUSH
41726: LD_VAR 0 38
41730: PUSH
41731: LD_VAR 0 39
41735: PUSH
41736: LD_VAR 0 40
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: PUSH
41749: LD_VAR 0 4
41753: PUSH
41754: LD_INT 1
41756: PLUS
41757: ARRAY
41758: ST_TO_ADDR
41759: GO 42126
41761: LD_INT 6
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41817
41767: LD_INT 7
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41817
41773: LD_INT 8
41775: DOUBLE
41776: EQUAL
41777: IFTRUE 41817
41779: LD_INT 13
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41817
41785: LD_INT 12
41787: DOUBLE
41788: EQUAL
41789: IFTRUE 41817
41791: LD_INT 15
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41817
41797: LD_INT 11
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41817
41803: LD_INT 14
41805: DOUBLE
41806: EQUAL
41807: IFTRUE 41817
41809: LD_INT 10
41811: DOUBLE
41812: EQUAL
41813: IFTRUE 41817
41815: GO 41873
41817: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41818: LD_ADDR_VAR 0 9
41822: PUSH
41823: LD_VAR 0 41
41827: PUSH
41828: LD_VAR 0 42
41832: PUSH
41833: LD_VAR 0 43
41837: PUSH
41838: LD_VAR 0 44
41842: PUSH
41843: LD_VAR 0 45
41847: PUSH
41848: LD_VAR 0 46
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: PUSH
41861: LD_VAR 0 4
41865: PUSH
41866: LD_INT 1
41868: PLUS
41869: ARRAY
41870: ST_TO_ADDR
41871: GO 42126
41873: LD_INT 36
41875: DOUBLE
41876: EQUAL
41877: IFTRUE 41881
41879: GO 41937
41881: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41882: LD_ADDR_VAR 0 9
41886: PUSH
41887: LD_VAR 0 47
41891: PUSH
41892: LD_VAR 0 48
41896: PUSH
41897: LD_VAR 0 49
41901: PUSH
41902: LD_VAR 0 50
41906: PUSH
41907: LD_VAR 0 51
41911: PUSH
41912: LD_VAR 0 52
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: PUSH
41925: LD_VAR 0 4
41929: PUSH
41930: LD_INT 1
41932: PLUS
41933: ARRAY
41934: ST_TO_ADDR
41935: GO 42126
41937: LD_INT 4
41939: DOUBLE
41940: EQUAL
41941: IFTRUE 41963
41943: LD_INT 5
41945: DOUBLE
41946: EQUAL
41947: IFTRUE 41963
41949: LD_INT 34
41951: DOUBLE
41952: EQUAL
41953: IFTRUE 41963
41955: LD_INT 37
41957: DOUBLE
41958: EQUAL
41959: IFTRUE 41963
41961: GO 42019
41963: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41964: LD_ADDR_VAR 0 9
41968: PUSH
41969: LD_VAR 0 53
41973: PUSH
41974: LD_VAR 0 54
41978: PUSH
41979: LD_VAR 0 55
41983: PUSH
41984: LD_VAR 0 56
41988: PUSH
41989: LD_VAR 0 57
41993: PUSH
41994: LD_VAR 0 58
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: PUSH
42007: LD_VAR 0 4
42011: PUSH
42012: LD_INT 1
42014: PLUS
42015: ARRAY
42016: ST_TO_ADDR
42017: GO 42126
42019: LD_INT 31
42021: DOUBLE
42022: EQUAL
42023: IFTRUE 42069
42025: LD_INT 32
42027: DOUBLE
42028: EQUAL
42029: IFTRUE 42069
42031: LD_INT 33
42033: DOUBLE
42034: EQUAL
42035: IFTRUE 42069
42037: LD_INT 27
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42069
42043: LD_INT 26
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42069
42049: LD_INT 28
42051: DOUBLE
42052: EQUAL
42053: IFTRUE 42069
42055: LD_INT 29
42057: DOUBLE
42058: EQUAL
42059: IFTRUE 42069
42061: LD_INT 30
42063: DOUBLE
42064: EQUAL
42065: IFTRUE 42069
42067: GO 42125
42069: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42070: LD_ADDR_VAR 0 9
42074: PUSH
42075: LD_VAR 0 59
42079: PUSH
42080: LD_VAR 0 60
42084: PUSH
42085: LD_VAR 0 61
42089: PUSH
42090: LD_VAR 0 62
42094: PUSH
42095: LD_VAR 0 63
42099: PUSH
42100: LD_VAR 0 64
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: PUSH
42113: LD_VAR 0 4
42117: PUSH
42118: LD_INT 1
42120: PLUS
42121: ARRAY
42122: ST_TO_ADDR
42123: GO 42126
42125: POP
// temp_list2 = [ ] ;
42126: LD_ADDR_VAR 0 10
42130: PUSH
42131: EMPTY
42132: ST_TO_ADDR
// for i in temp_list do
42133: LD_ADDR_VAR 0 8
42137: PUSH
42138: LD_VAR 0 9
42142: PUSH
42143: FOR_IN
42144: IFFALSE 42196
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42146: LD_ADDR_VAR 0 10
42150: PUSH
42151: LD_VAR 0 10
42155: PUSH
42156: LD_VAR 0 8
42160: PUSH
42161: LD_INT 1
42163: ARRAY
42164: PUSH
42165: LD_VAR 0 2
42169: PLUS
42170: PUSH
42171: LD_VAR 0 8
42175: PUSH
42176: LD_INT 2
42178: ARRAY
42179: PUSH
42180: LD_VAR 0 3
42184: PLUS
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: EMPTY
42191: LIST
42192: ADD
42193: ST_TO_ADDR
42194: GO 42143
42196: POP
42197: POP
// result = temp_list2 ;
42198: LD_ADDR_VAR 0 7
42202: PUSH
42203: LD_VAR 0 10
42207: ST_TO_ADDR
// end ;
42208: LD_VAR 0 7
42212: RET
// export function EnemyInRange ( unit , dist ) ; begin
42213: LD_INT 0
42215: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42216: LD_ADDR_VAR 0 3
42220: PUSH
42221: LD_VAR 0 1
42225: PPUSH
42226: CALL_OW 255
42230: PPUSH
42231: LD_VAR 0 1
42235: PPUSH
42236: CALL_OW 250
42240: PPUSH
42241: LD_VAR 0 1
42245: PPUSH
42246: CALL_OW 251
42250: PPUSH
42251: LD_VAR 0 2
42255: PPUSH
42256: CALL 15586 0 4
42260: PUSH
42261: LD_INT 4
42263: ARRAY
42264: ST_TO_ADDR
// end ;
42265: LD_VAR 0 3
42269: RET
// export function PlayerSeeMe ( unit ) ; begin
42270: LD_INT 0
42272: PPUSH
// result := See ( your_side , unit ) ;
42273: LD_ADDR_VAR 0 2
42277: PUSH
42278: LD_OWVAR 2
42282: PPUSH
42283: LD_VAR 0 1
42287: PPUSH
42288: CALL_OW 292
42292: ST_TO_ADDR
// end ;
42293: LD_VAR 0 2
42297: RET
// export function ReverseDir ( unit ) ; begin
42298: LD_INT 0
42300: PPUSH
// if not unit then
42301: LD_VAR 0 1
42305: NOT
42306: IFFALSE 42310
// exit ;
42308: GO 42333
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42310: LD_ADDR_VAR 0 2
42314: PUSH
42315: LD_VAR 0 1
42319: PPUSH
42320: CALL_OW 254
42324: PUSH
42325: LD_INT 3
42327: PLUS
42328: PUSH
42329: LD_INT 6
42331: MOD
42332: ST_TO_ADDR
// end ;
42333: LD_VAR 0 2
42337: RET
// export function ReverseArray ( array ) ; var i ; begin
42338: LD_INT 0
42340: PPUSH
42341: PPUSH
// if not array then
42342: LD_VAR 0 1
42346: NOT
42347: IFFALSE 42351
// exit ;
42349: GO 42406
// result := [ ] ;
42351: LD_ADDR_VAR 0 2
42355: PUSH
42356: EMPTY
42357: ST_TO_ADDR
// for i := array downto 1 do
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: DOUBLE
42364: LD_VAR 0 1
42368: INC
42369: ST_TO_ADDR
42370: LD_INT 1
42372: PUSH
42373: FOR_DOWNTO
42374: IFFALSE 42404
// result := Join ( result , array [ i ] ) ;
42376: LD_ADDR_VAR 0 2
42380: PUSH
42381: LD_VAR 0 2
42385: PPUSH
42386: LD_VAR 0 1
42390: PUSH
42391: LD_VAR 0 3
42395: ARRAY
42396: PPUSH
42397: CALL 47071 0 2
42401: ST_TO_ADDR
42402: GO 42373
42404: POP
42405: POP
// end ;
42406: LD_VAR 0 2
42410: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
42411: LD_INT 0
42413: PPUSH
42414: PPUSH
42415: PPUSH
42416: PPUSH
42417: PPUSH
42418: PPUSH
// if not unit or not hexes then
42419: LD_VAR 0 1
42423: NOT
42424: PUSH
42425: LD_VAR 0 2
42429: NOT
42430: OR
42431: IFFALSE 42435
// exit ;
42433: GO 42558
// dist := 9999 ;
42435: LD_ADDR_VAR 0 5
42439: PUSH
42440: LD_INT 9999
42442: ST_TO_ADDR
// for i = 1 to hexes do
42443: LD_ADDR_VAR 0 4
42447: PUSH
42448: DOUBLE
42449: LD_INT 1
42451: DEC
42452: ST_TO_ADDR
42453: LD_VAR 0 2
42457: PUSH
42458: FOR_TO
42459: IFFALSE 42546
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42461: LD_ADDR_VAR 0 6
42465: PUSH
42466: LD_VAR 0 1
42470: PPUSH
42471: LD_VAR 0 2
42475: PUSH
42476: LD_VAR 0 4
42480: ARRAY
42481: PUSH
42482: LD_INT 1
42484: ARRAY
42485: PPUSH
42486: LD_VAR 0 2
42490: PUSH
42491: LD_VAR 0 4
42495: ARRAY
42496: PUSH
42497: LD_INT 2
42499: ARRAY
42500: PPUSH
42501: CALL_OW 297
42505: ST_TO_ADDR
// if tdist < dist then
42506: LD_VAR 0 6
42510: PUSH
42511: LD_VAR 0 5
42515: LESS
42516: IFFALSE 42544
// begin hex := hexes [ i ] ;
42518: LD_ADDR_VAR 0 8
42522: PUSH
42523: LD_VAR 0 2
42527: PUSH
42528: LD_VAR 0 4
42532: ARRAY
42533: ST_TO_ADDR
// dist := tdist ;
42534: LD_ADDR_VAR 0 5
42538: PUSH
42539: LD_VAR 0 6
42543: ST_TO_ADDR
// end ; end ;
42544: GO 42458
42546: POP
42547: POP
// result := hex ;
42548: LD_ADDR_VAR 0 3
42552: PUSH
42553: LD_VAR 0 8
42557: ST_TO_ADDR
// end ;
42558: LD_VAR 0 3
42562: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42563: LD_INT 0
42565: PPUSH
42566: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42567: LD_VAR 0 1
42571: NOT
42572: PUSH
42573: LD_VAR 0 1
42577: PUSH
42578: LD_INT 21
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 23
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PPUSH
42602: CALL_OW 69
42606: IN
42607: NOT
42608: OR
42609: IFFALSE 42613
// exit ;
42611: GO 42660
// for i = 1 to 3 do
42613: LD_ADDR_VAR 0 3
42617: PUSH
42618: DOUBLE
42619: LD_INT 1
42621: DEC
42622: ST_TO_ADDR
42623: LD_INT 3
42625: PUSH
42626: FOR_TO
42627: IFFALSE 42658
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42629: LD_VAR 0 1
42633: PPUSH
42634: CALL_OW 250
42638: PPUSH
42639: LD_VAR 0 1
42643: PPUSH
42644: CALL_OW 251
42648: PPUSH
42649: LD_INT 1
42651: PPUSH
42652: CALL_OW 453
42656: GO 42626
42658: POP
42659: POP
// end ;
42660: LD_VAR 0 2
42664: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42665: LD_INT 0
42667: PPUSH
42668: PPUSH
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
// if not unit or not enemy_unit then
42673: LD_VAR 0 1
42677: NOT
42678: PUSH
42679: LD_VAR 0 2
42683: NOT
42684: OR
42685: IFFALSE 42689
// exit ;
42687: GO 43156
// if GetLives ( i ) < 250 then
42689: LD_VAR 0 4
42693: PPUSH
42694: CALL_OW 256
42698: PUSH
42699: LD_INT 250
42701: LESS
42702: IFFALSE 42715
// begin ComAutodestruct ( i ) ;
42704: LD_VAR 0 4
42708: PPUSH
42709: CALL 42563 0 1
// exit ;
42713: GO 43156
// end ; x := GetX ( enemy_unit ) ;
42715: LD_ADDR_VAR 0 7
42719: PUSH
42720: LD_VAR 0 2
42724: PPUSH
42725: CALL_OW 250
42729: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42730: LD_ADDR_VAR 0 8
42734: PUSH
42735: LD_VAR 0 2
42739: PPUSH
42740: CALL_OW 251
42744: ST_TO_ADDR
// if not x or not y then
42745: LD_VAR 0 7
42749: NOT
42750: PUSH
42751: LD_VAR 0 8
42755: NOT
42756: OR
42757: IFFALSE 42761
// exit ;
42759: GO 43156
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42761: LD_ADDR_VAR 0 6
42765: PUSH
42766: LD_VAR 0 7
42770: PPUSH
42771: LD_INT 0
42773: PPUSH
42774: LD_INT 4
42776: PPUSH
42777: CALL_OW 272
42781: PUSH
42782: LD_VAR 0 8
42786: PPUSH
42787: LD_INT 0
42789: PPUSH
42790: LD_INT 4
42792: PPUSH
42793: CALL_OW 273
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_VAR 0 7
42806: PPUSH
42807: LD_INT 1
42809: PPUSH
42810: LD_INT 4
42812: PPUSH
42813: CALL_OW 272
42817: PUSH
42818: LD_VAR 0 8
42822: PPUSH
42823: LD_INT 1
42825: PPUSH
42826: LD_INT 4
42828: PPUSH
42829: CALL_OW 273
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_VAR 0 7
42842: PPUSH
42843: LD_INT 2
42845: PPUSH
42846: LD_INT 4
42848: PPUSH
42849: CALL_OW 272
42853: PUSH
42854: LD_VAR 0 8
42858: PPUSH
42859: LD_INT 2
42861: PPUSH
42862: LD_INT 4
42864: PPUSH
42865: CALL_OW 273
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_VAR 0 7
42878: PPUSH
42879: LD_INT 3
42881: PPUSH
42882: LD_INT 4
42884: PPUSH
42885: CALL_OW 272
42889: PUSH
42890: LD_VAR 0 8
42894: PPUSH
42895: LD_INT 3
42897: PPUSH
42898: LD_INT 4
42900: PPUSH
42901: CALL_OW 273
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_VAR 0 7
42914: PPUSH
42915: LD_INT 4
42917: PPUSH
42918: LD_INT 4
42920: PPUSH
42921: CALL_OW 272
42925: PUSH
42926: LD_VAR 0 8
42930: PPUSH
42931: LD_INT 4
42933: PPUSH
42934: LD_INT 4
42936: PPUSH
42937: CALL_OW 273
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_VAR 0 7
42950: PPUSH
42951: LD_INT 5
42953: PPUSH
42954: LD_INT 4
42956: PPUSH
42957: CALL_OW 272
42961: PUSH
42962: LD_VAR 0 8
42966: PPUSH
42967: LD_INT 5
42969: PPUSH
42970: LD_INT 4
42972: PPUSH
42973: CALL_OW 273
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: ST_TO_ADDR
// for i = tmp downto 1 do
42990: LD_ADDR_VAR 0 4
42994: PUSH
42995: DOUBLE
42996: LD_VAR 0 6
43000: INC
43001: ST_TO_ADDR
43002: LD_INT 1
43004: PUSH
43005: FOR_DOWNTO
43006: IFFALSE 43107
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43008: LD_VAR 0 6
43012: PUSH
43013: LD_VAR 0 4
43017: ARRAY
43018: PUSH
43019: LD_INT 1
43021: ARRAY
43022: PPUSH
43023: LD_VAR 0 6
43027: PUSH
43028: LD_VAR 0 4
43032: ARRAY
43033: PUSH
43034: LD_INT 2
43036: ARRAY
43037: PPUSH
43038: CALL_OW 488
43042: NOT
43043: PUSH
43044: LD_VAR 0 6
43048: PUSH
43049: LD_VAR 0 4
43053: ARRAY
43054: PUSH
43055: LD_INT 1
43057: ARRAY
43058: PPUSH
43059: LD_VAR 0 6
43063: PUSH
43064: LD_VAR 0 4
43068: ARRAY
43069: PUSH
43070: LD_INT 2
43072: ARRAY
43073: PPUSH
43074: CALL_OW 428
43078: PUSH
43079: LD_INT 0
43081: NONEQUAL
43082: OR
43083: IFFALSE 43105
// tmp := Delete ( tmp , i ) ;
43085: LD_ADDR_VAR 0 6
43089: PUSH
43090: LD_VAR 0 6
43094: PPUSH
43095: LD_VAR 0 4
43099: PPUSH
43100: CALL_OW 3
43104: ST_TO_ADDR
43105: GO 43005
43107: POP
43108: POP
// j := GetClosestHex ( unit , tmp ) ;
43109: LD_ADDR_VAR 0 5
43113: PUSH
43114: LD_VAR 0 1
43118: PPUSH
43119: LD_VAR 0 6
43123: PPUSH
43124: CALL 42411 0 2
43128: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43129: LD_VAR 0 1
43133: PPUSH
43134: LD_VAR 0 5
43138: PUSH
43139: LD_INT 1
43141: ARRAY
43142: PPUSH
43143: LD_VAR 0 5
43147: PUSH
43148: LD_INT 2
43150: ARRAY
43151: PPUSH
43152: CALL_OW 111
// end ;
43156: LD_VAR 0 3
43160: RET
// export function PrepareApemanSoldier ( ) ; begin
43161: LD_INT 0
43163: PPUSH
// uc_nation := 0 ;
43164: LD_ADDR_OWVAR 21
43168: PUSH
43169: LD_INT 0
43171: ST_TO_ADDR
// hc_sex := sex_male ;
43172: LD_ADDR_OWVAR 27
43176: PUSH
43177: LD_INT 1
43179: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43180: LD_ADDR_OWVAR 28
43184: PUSH
43185: LD_INT 15
43187: ST_TO_ADDR
// hc_gallery :=  ;
43188: LD_ADDR_OWVAR 33
43192: PUSH
43193: LD_STRING 
43195: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43196: LD_ADDR_OWVAR 31
43200: PUSH
43201: LD_INT 0
43203: PPUSH
43204: LD_INT 3
43206: PPUSH
43207: CALL_OW 12
43211: PUSH
43212: LD_INT 0
43214: PPUSH
43215: LD_INT 3
43217: PPUSH
43218: CALL_OW 12
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
// end ;
43235: LD_VAR 0 1
43239: RET
// export function PrepareApemanEngineer ( ) ; begin
43240: LD_INT 0
43242: PPUSH
// uc_nation := 0 ;
43243: LD_ADDR_OWVAR 21
43247: PUSH
43248: LD_INT 0
43250: ST_TO_ADDR
// hc_sex := sex_male ;
43251: LD_ADDR_OWVAR 27
43255: PUSH
43256: LD_INT 1
43258: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43259: LD_ADDR_OWVAR 28
43263: PUSH
43264: LD_INT 16
43266: ST_TO_ADDR
// hc_gallery :=  ;
43267: LD_ADDR_OWVAR 33
43271: PUSH
43272: LD_STRING 
43274: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43275: LD_ADDR_OWVAR 31
43279: PUSH
43280: LD_INT 0
43282: PPUSH
43283: LD_INT 3
43285: PPUSH
43286: CALL_OW 12
43290: PUSH
43291: LD_INT 0
43293: PPUSH
43294: LD_INT 3
43296: PPUSH
43297: CALL_OW 12
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: ST_TO_ADDR
// end ;
43314: LD_VAR 0 1
43318: RET
// export function PrepareApeman ( agressivity ) ; begin
43319: LD_INT 0
43321: PPUSH
// uc_side := 0 ;
43322: LD_ADDR_OWVAR 20
43326: PUSH
43327: LD_INT 0
43329: ST_TO_ADDR
// uc_nation := 0 ;
43330: LD_ADDR_OWVAR 21
43334: PUSH
43335: LD_INT 0
43337: ST_TO_ADDR
// hc_sex := sex_male ;
43338: LD_ADDR_OWVAR 27
43342: PUSH
43343: LD_INT 1
43345: ST_TO_ADDR
// hc_class := class_apeman ;
43346: LD_ADDR_OWVAR 28
43350: PUSH
43351: LD_INT 12
43353: ST_TO_ADDR
// hc_gallery :=  ;
43354: LD_ADDR_OWVAR 33
43358: PUSH
43359: LD_STRING 
43361: ST_TO_ADDR
// if agressivity = 0 then
43362: LD_VAR 0 1
43366: PUSH
43367: LD_INT 0
43369: EQUAL
43370: IFFALSE 43382
// hc_agressivity := 0 else
43372: LD_ADDR_OWVAR 35
43376: PUSH
43377: LD_INT 0
43379: ST_TO_ADDR
43380: GO 43403
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43382: LD_ADDR_OWVAR 35
43386: PUSH
43387: LD_VAR 0 1
43391: NEG
43392: PPUSH
43393: LD_VAR 0 1
43397: PPUSH
43398: CALL_OW 12
43402: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43403: LD_ADDR_OWVAR 31
43407: PUSH
43408: LD_INT 0
43410: PPUSH
43411: LD_INT 3
43413: PPUSH
43414: CALL_OW 12
43418: PUSH
43419: LD_INT 0
43421: PPUSH
43422: LD_INT 3
43424: PPUSH
43425: CALL_OW 12
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: ST_TO_ADDR
// end ;
43442: LD_VAR 0 2
43446: RET
// export function PrepareTiger ( agressivity ) ; begin
43447: LD_INT 0
43449: PPUSH
// uc_side := 0 ;
43450: LD_ADDR_OWVAR 20
43454: PUSH
43455: LD_INT 0
43457: ST_TO_ADDR
// uc_nation := 0 ;
43458: LD_ADDR_OWVAR 21
43462: PUSH
43463: LD_INT 0
43465: ST_TO_ADDR
// hc_class := class_tiger ;
43466: LD_ADDR_OWVAR 28
43470: PUSH
43471: LD_INT 14
43473: ST_TO_ADDR
// hc_gallery :=  ;
43474: LD_ADDR_OWVAR 33
43478: PUSH
43479: LD_STRING 
43481: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43482: LD_ADDR_OWVAR 35
43486: PUSH
43487: LD_VAR 0 1
43491: NEG
43492: PPUSH
43493: LD_VAR 0 1
43497: PPUSH
43498: CALL_OW 12
43502: ST_TO_ADDR
// end ;
43503: LD_VAR 0 2
43507: RET
// export function PrepareEnchidna ( ) ; begin
43508: LD_INT 0
43510: PPUSH
// uc_side := 0 ;
43511: LD_ADDR_OWVAR 20
43515: PUSH
43516: LD_INT 0
43518: ST_TO_ADDR
// uc_nation := 0 ;
43519: LD_ADDR_OWVAR 21
43523: PUSH
43524: LD_INT 0
43526: ST_TO_ADDR
// hc_class := class_baggie ;
43527: LD_ADDR_OWVAR 28
43531: PUSH
43532: LD_INT 13
43534: ST_TO_ADDR
// hc_gallery :=  ;
43535: LD_ADDR_OWVAR 33
43539: PUSH
43540: LD_STRING 
43542: ST_TO_ADDR
// end ;
43543: LD_VAR 0 1
43547: RET
// export function PrepareFrog ( ) ; begin
43548: LD_INT 0
43550: PPUSH
// uc_side := 0 ;
43551: LD_ADDR_OWVAR 20
43555: PUSH
43556: LD_INT 0
43558: ST_TO_ADDR
// uc_nation := 0 ;
43559: LD_ADDR_OWVAR 21
43563: PUSH
43564: LD_INT 0
43566: ST_TO_ADDR
// hc_class := class_frog ;
43567: LD_ADDR_OWVAR 28
43571: PUSH
43572: LD_INT 19
43574: ST_TO_ADDR
// hc_gallery :=  ;
43575: LD_ADDR_OWVAR 33
43579: PUSH
43580: LD_STRING 
43582: ST_TO_ADDR
// end ;
43583: LD_VAR 0 1
43587: RET
// export function PrepareFish ( ) ; begin
43588: LD_INT 0
43590: PPUSH
// uc_side := 0 ;
43591: LD_ADDR_OWVAR 20
43595: PUSH
43596: LD_INT 0
43598: ST_TO_ADDR
// uc_nation := 0 ;
43599: LD_ADDR_OWVAR 21
43603: PUSH
43604: LD_INT 0
43606: ST_TO_ADDR
// hc_class := class_fish ;
43607: LD_ADDR_OWVAR 28
43611: PUSH
43612: LD_INT 20
43614: ST_TO_ADDR
// hc_gallery :=  ;
43615: LD_ADDR_OWVAR 33
43619: PUSH
43620: LD_STRING 
43622: ST_TO_ADDR
// end ;
43623: LD_VAR 0 1
43627: RET
// export function PrepareBird ( ) ; begin
43628: LD_INT 0
43630: PPUSH
// uc_side := 0 ;
43631: LD_ADDR_OWVAR 20
43635: PUSH
43636: LD_INT 0
43638: ST_TO_ADDR
// uc_nation := 0 ;
43639: LD_ADDR_OWVAR 21
43643: PUSH
43644: LD_INT 0
43646: ST_TO_ADDR
// hc_class := class_phororhacos ;
43647: LD_ADDR_OWVAR 28
43651: PUSH
43652: LD_INT 18
43654: ST_TO_ADDR
// hc_gallery :=  ;
43655: LD_ADDR_OWVAR 33
43659: PUSH
43660: LD_STRING 
43662: ST_TO_ADDR
// end ;
43663: LD_VAR 0 1
43667: RET
// export function PrepareHorse ( ) ; begin
43668: LD_INT 0
43670: PPUSH
// uc_side := 0 ;
43671: LD_ADDR_OWVAR 20
43675: PUSH
43676: LD_INT 0
43678: ST_TO_ADDR
// uc_nation := 0 ;
43679: LD_ADDR_OWVAR 21
43683: PUSH
43684: LD_INT 0
43686: ST_TO_ADDR
// hc_class := class_horse ;
43687: LD_ADDR_OWVAR 28
43691: PUSH
43692: LD_INT 21
43694: ST_TO_ADDR
// hc_gallery :=  ;
43695: LD_ADDR_OWVAR 33
43699: PUSH
43700: LD_STRING 
43702: ST_TO_ADDR
// end ;
43703: LD_VAR 0 1
43707: RET
// export function PrepareMastodont ( ) ; begin
43708: LD_INT 0
43710: PPUSH
// uc_side := 0 ;
43711: LD_ADDR_OWVAR 20
43715: PUSH
43716: LD_INT 0
43718: ST_TO_ADDR
// uc_nation := 0 ;
43719: LD_ADDR_OWVAR 21
43723: PUSH
43724: LD_INT 0
43726: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43727: LD_ADDR_OWVAR 37
43731: PUSH
43732: LD_INT 31
43734: ST_TO_ADDR
// vc_control := control_rider ;
43735: LD_ADDR_OWVAR 38
43739: PUSH
43740: LD_INT 4
43742: ST_TO_ADDR
// end ;
43743: LD_VAR 0 1
43747: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43748: LD_INT 0
43750: PPUSH
43751: PPUSH
43752: PPUSH
// uc_side = 0 ;
43753: LD_ADDR_OWVAR 20
43757: PUSH
43758: LD_INT 0
43760: ST_TO_ADDR
// uc_nation = 0 ;
43761: LD_ADDR_OWVAR 21
43765: PUSH
43766: LD_INT 0
43768: ST_TO_ADDR
// InitHc_All ( ) ;
43769: CALL_OW 584
// InitVc ;
43773: CALL_OW 20
// if mastodonts then
43777: LD_VAR 0 6
43781: IFFALSE 43848
// for i = 1 to mastodonts do
43783: LD_ADDR_VAR 0 11
43787: PUSH
43788: DOUBLE
43789: LD_INT 1
43791: DEC
43792: ST_TO_ADDR
43793: LD_VAR 0 6
43797: PUSH
43798: FOR_TO
43799: IFFALSE 43846
// begin vc_chassis := 31 ;
43801: LD_ADDR_OWVAR 37
43805: PUSH
43806: LD_INT 31
43808: ST_TO_ADDR
// vc_control := control_rider ;
43809: LD_ADDR_OWVAR 38
43813: PUSH
43814: LD_INT 4
43816: ST_TO_ADDR
// animal := CreateVehicle ;
43817: LD_ADDR_VAR 0 12
43821: PUSH
43822: CALL_OW 45
43826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43827: LD_VAR 0 12
43831: PPUSH
43832: LD_VAR 0 8
43836: PPUSH
43837: LD_INT 0
43839: PPUSH
43840: CALL 45976 0 3
// end ;
43844: GO 43798
43846: POP
43847: POP
// if horses then
43848: LD_VAR 0 5
43852: IFFALSE 43919
// for i = 1 to horses do
43854: LD_ADDR_VAR 0 11
43858: PUSH
43859: DOUBLE
43860: LD_INT 1
43862: DEC
43863: ST_TO_ADDR
43864: LD_VAR 0 5
43868: PUSH
43869: FOR_TO
43870: IFFALSE 43917
// begin hc_class := 21 ;
43872: LD_ADDR_OWVAR 28
43876: PUSH
43877: LD_INT 21
43879: ST_TO_ADDR
// hc_gallery :=  ;
43880: LD_ADDR_OWVAR 33
43884: PUSH
43885: LD_STRING 
43887: ST_TO_ADDR
// animal := CreateHuman ;
43888: LD_ADDR_VAR 0 12
43892: PUSH
43893: CALL_OW 44
43897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43898: LD_VAR 0 12
43902: PPUSH
43903: LD_VAR 0 8
43907: PPUSH
43908: LD_INT 0
43910: PPUSH
43911: CALL 45976 0 3
// end ;
43915: GO 43869
43917: POP
43918: POP
// if birds then
43919: LD_VAR 0 1
43923: IFFALSE 43990
// for i = 1 to birds do
43925: LD_ADDR_VAR 0 11
43929: PUSH
43930: DOUBLE
43931: LD_INT 1
43933: DEC
43934: ST_TO_ADDR
43935: LD_VAR 0 1
43939: PUSH
43940: FOR_TO
43941: IFFALSE 43988
// begin hc_class := 18 ;
43943: LD_ADDR_OWVAR 28
43947: PUSH
43948: LD_INT 18
43950: ST_TO_ADDR
// hc_gallery =  ;
43951: LD_ADDR_OWVAR 33
43955: PUSH
43956: LD_STRING 
43958: ST_TO_ADDR
// animal := CreateHuman ;
43959: LD_ADDR_VAR 0 12
43963: PUSH
43964: CALL_OW 44
43968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43969: LD_VAR 0 12
43973: PPUSH
43974: LD_VAR 0 8
43978: PPUSH
43979: LD_INT 0
43981: PPUSH
43982: CALL 45976 0 3
// end ;
43986: GO 43940
43988: POP
43989: POP
// if tigers then
43990: LD_VAR 0 2
43994: IFFALSE 44078
// for i = 1 to tigers do
43996: LD_ADDR_VAR 0 11
44000: PUSH
44001: DOUBLE
44002: LD_INT 1
44004: DEC
44005: ST_TO_ADDR
44006: LD_VAR 0 2
44010: PUSH
44011: FOR_TO
44012: IFFALSE 44076
// begin hc_class = class_tiger ;
44014: LD_ADDR_OWVAR 28
44018: PUSH
44019: LD_INT 14
44021: ST_TO_ADDR
// hc_gallery =  ;
44022: LD_ADDR_OWVAR 33
44026: PUSH
44027: LD_STRING 
44029: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44030: LD_ADDR_OWVAR 35
44034: PUSH
44035: LD_INT 7
44037: NEG
44038: PPUSH
44039: LD_INT 7
44041: PPUSH
44042: CALL_OW 12
44046: ST_TO_ADDR
// animal := CreateHuman ;
44047: LD_ADDR_VAR 0 12
44051: PUSH
44052: CALL_OW 44
44056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44057: LD_VAR 0 12
44061: PPUSH
44062: LD_VAR 0 8
44066: PPUSH
44067: LD_INT 0
44069: PPUSH
44070: CALL 45976 0 3
// end ;
44074: GO 44011
44076: POP
44077: POP
// if apemans then
44078: LD_VAR 0 3
44082: IFFALSE 44205
// for i = 1 to apemans do
44084: LD_ADDR_VAR 0 11
44088: PUSH
44089: DOUBLE
44090: LD_INT 1
44092: DEC
44093: ST_TO_ADDR
44094: LD_VAR 0 3
44098: PUSH
44099: FOR_TO
44100: IFFALSE 44203
// begin hc_class = class_apeman ;
44102: LD_ADDR_OWVAR 28
44106: PUSH
44107: LD_INT 12
44109: ST_TO_ADDR
// hc_gallery =  ;
44110: LD_ADDR_OWVAR 33
44114: PUSH
44115: LD_STRING 
44117: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44118: LD_ADDR_OWVAR 35
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PPUSH
44127: LD_INT 2
44129: PPUSH
44130: CALL_OW 12
44134: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44135: LD_ADDR_OWVAR 31
44139: PUSH
44140: LD_INT 1
44142: PPUSH
44143: LD_INT 3
44145: PPUSH
44146: CALL_OW 12
44150: PUSH
44151: LD_INT 1
44153: PPUSH
44154: LD_INT 3
44156: PPUSH
44157: CALL_OW 12
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
// animal := CreateHuman ;
44174: LD_ADDR_VAR 0 12
44178: PUSH
44179: CALL_OW 44
44183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44184: LD_VAR 0 12
44188: PPUSH
44189: LD_VAR 0 8
44193: PPUSH
44194: LD_INT 0
44196: PPUSH
44197: CALL 45976 0 3
// end ;
44201: GO 44099
44203: POP
44204: POP
// if enchidnas then
44205: LD_VAR 0 4
44209: IFFALSE 44276
// for i = 1 to enchidnas do
44211: LD_ADDR_VAR 0 11
44215: PUSH
44216: DOUBLE
44217: LD_INT 1
44219: DEC
44220: ST_TO_ADDR
44221: LD_VAR 0 4
44225: PUSH
44226: FOR_TO
44227: IFFALSE 44274
// begin hc_class = 13 ;
44229: LD_ADDR_OWVAR 28
44233: PUSH
44234: LD_INT 13
44236: ST_TO_ADDR
// hc_gallery =  ;
44237: LD_ADDR_OWVAR 33
44241: PUSH
44242: LD_STRING 
44244: ST_TO_ADDR
// animal := CreateHuman ;
44245: LD_ADDR_VAR 0 12
44249: PUSH
44250: CALL_OW 44
44254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44255: LD_VAR 0 12
44259: PPUSH
44260: LD_VAR 0 8
44264: PPUSH
44265: LD_INT 0
44267: PPUSH
44268: CALL 45976 0 3
// end ;
44272: GO 44226
44274: POP
44275: POP
// if fishes then
44276: LD_VAR 0 7
44280: IFFALSE 44347
// for i = 1 to fishes do
44282: LD_ADDR_VAR 0 11
44286: PUSH
44287: DOUBLE
44288: LD_INT 1
44290: DEC
44291: ST_TO_ADDR
44292: LD_VAR 0 7
44296: PUSH
44297: FOR_TO
44298: IFFALSE 44345
// begin hc_class = 20 ;
44300: LD_ADDR_OWVAR 28
44304: PUSH
44305: LD_INT 20
44307: ST_TO_ADDR
// hc_gallery =  ;
44308: LD_ADDR_OWVAR 33
44312: PUSH
44313: LD_STRING 
44315: ST_TO_ADDR
// animal := CreateHuman ;
44316: LD_ADDR_VAR 0 12
44320: PUSH
44321: CALL_OW 44
44325: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44326: LD_VAR 0 12
44330: PPUSH
44331: LD_VAR 0 9
44335: PPUSH
44336: LD_INT 0
44338: PPUSH
44339: CALL 45976 0 3
// end ;
44343: GO 44297
44345: POP
44346: POP
// end ;
44347: LD_VAR 0 10
44351: RET
// export function WantHeal ( sci , unit ) ; begin
44352: LD_INT 0
44354: PPUSH
// if GetTaskList ( sci ) > 0 then
44355: LD_VAR 0 1
44359: PPUSH
44360: CALL_OW 437
44364: PUSH
44365: LD_INT 0
44367: GREATER
44368: IFFALSE 44438
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44370: LD_VAR 0 1
44374: PPUSH
44375: CALL_OW 437
44379: PUSH
44380: LD_INT 1
44382: ARRAY
44383: PUSH
44384: LD_INT 1
44386: ARRAY
44387: PUSH
44388: LD_STRING l
44390: EQUAL
44391: PUSH
44392: LD_VAR 0 1
44396: PPUSH
44397: CALL_OW 437
44401: PUSH
44402: LD_INT 1
44404: ARRAY
44405: PUSH
44406: LD_INT 4
44408: ARRAY
44409: PUSH
44410: LD_VAR 0 2
44414: EQUAL
44415: AND
44416: IFFALSE 44428
// result := true else
44418: LD_ADDR_VAR 0 3
44422: PUSH
44423: LD_INT 1
44425: ST_TO_ADDR
44426: GO 44436
// result := false ;
44428: LD_ADDR_VAR 0 3
44432: PUSH
44433: LD_INT 0
44435: ST_TO_ADDR
// end else
44436: GO 44446
// result := false ;
44438: LD_ADDR_VAR 0 3
44442: PUSH
44443: LD_INT 0
44445: ST_TO_ADDR
// end ;
44446: LD_VAR 0 3
44450: RET
// export function HealTarget ( sci ) ; begin
44451: LD_INT 0
44453: PPUSH
// if not sci then
44454: LD_VAR 0 1
44458: NOT
44459: IFFALSE 44463
// exit ;
44461: GO 44528
// result := 0 ;
44463: LD_ADDR_VAR 0 2
44467: PUSH
44468: LD_INT 0
44470: ST_TO_ADDR
// if GetTaskList ( sci ) then
44471: LD_VAR 0 1
44475: PPUSH
44476: CALL_OW 437
44480: IFFALSE 44528
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44482: LD_VAR 0 1
44486: PPUSH
44487: CALL_OW 437
44491: PUSH
44492: LD_INT 1
44494: ARRAY
44495: PUSH
44496: LD_INT 1
44498: ARRAY
44499: PUSH
44500: LD_STRING l
44502: EQUAL
44503: IFFALSE 44528
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44505: LD_ADDR_VAR 0 2
44509: PUSH
44510: LD_VAR 0 1
44514: PPUSH
44515: CALL_OW 437
44519: PUSH
44520: LD_INT 1
44522: ARRAY
44523: PUSH
44524: LD_INT 4
44526: ARRAY
44527: ST_TO_ADDR
// end ;
44528: LD_VAR 0 2
44532: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44533: LD_INT 0
44535: PPUSH
44536: PPUSH
44537: PPUSH
44538: PPUSH
// if not base_units then
44539: LD_VAR 0 1
44543: NOT
44544: IFFALSE 44548
// exit ;
44546: GO 44635
// result := false ;
44548: LD_ADDR_VAR 0 2
44552: PUSH
44553: LD_INT 0
44555: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44556: LD_ADDR_VAR 0 5
44560: PUSH
44561: LD_VAR 0 1
44565: PPUSH
44566: LD_INT 21
44568: PUSH
44569: LD_INT 3
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PPUSH
44576: CALL_OW 72
44580: ST_TO_ADDR
// if not tmp then
44581: LD_VAR 0 5
44585: NOT
44586: IFFALSE 44590
// exit ;
44588: GO 44635
// for i in tmp do
44590: LD_ADDR_VAR 0 3
44594: PUSH
44595: LD_VAR 0 5
44599: PUSH
44600: FOR_IN
44601: IFFALSE 44633
// begin result := EnemyInRange ( i , 22 ) ;
44603: LD_ADDR_VAR 0 2
44607: PUSH
44608: LD_VAR 0 3
44612: PPUSH
44613: LD_INT 22
44615: PPUSH
44616: CALL 42213 0 2
44620: ST_TO_ADDR
// if result then
44621: LD_VAR 0 2
44625: IFFALSE 44631
// exit ;
44627: POP
44628: POP
44629: GO 44635
// end ;
44631: GO 44600
44633: POP
44634: POP
// end ;
44635: LD_VAR 0 2
44639: RET
// export function FilterByTag ( units , tag ) ; begin
44640: LD_INT 0
44642: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44643: LD_ADDR_VAR 0 3
44647: PUSH
44648: LD_VAR 0 1
44652: PPUSH
44653: LD_INT 120
44655: PUSH
44656: LD_VAR 0 2
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PPUSH
44665: CALL_OW 72
44669: ST_TO_ADDR
// end ;
44670: LD_VAR 0 3
44674: RET
// export function IsDriver ( un ) ; begin
44675: LD_INT 0
44677: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44678: LD_ADDR_VAR 0 2
44682: PUSH
44683: LD_VAR 0 1
44687: PUSH
44688: LD_INT 55
44690: PUSH
44691: EMPTY
44692: LIST
44693: PPUSH
44694: CALL_OW 69
44698: IN
44699: ST_TO_ADDR
// end ;
44700: LD_VAR 0 2
44704: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44705: LD_INT 0
44707: PPUSH
44708: PPUSH
// list := [ ] ;
44709: LD_ADDR_VAR 0 5
44713: PUSH
44714: EMPTY
44715: ST_TO_ADDR
// case d of 0 :
44716: LD_VAR 0 3
44720: PUSH
44721: LD_INT 0
44723: DOUBLE
44724: EQUAL
44725: IFTRUE 44729
44727: GO 44862
44729: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44730: LD_ADDR_VAR 0 5
44734: PUSH
44735: LD_VAR 0 1
44739: PUSH
44740: LD_INT 4
44742: MINUS
44743: PUSH
44744: LD_VAR 0 2
44748: PUSH
44749: LD_INT 4
44751: MINUS
44752: PUSH
44753: LD_INT 2
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: PUSH
44761: LD_VAR 0 1
44765: PUSH
44766: LD_INT 3
44768: MINUS
44769: PUSH
44770: LD_VAR 0 2
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: LIST
44782: PUSH
44783: LD_VAR 0 1
44787: PUSH
44788: LD_INT 4
44790: PLUS
44791: PUSH
44792: LD_VAR 0 2
44796: PUSH
44797: LD_INT 4
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: LIST
44804: PUSH
44805: LD_VAR 0 1
44809: PUSH
44810: LD_INT 3
44812: PLUS
44813: PUSH
44814: LD_VAR 0 2
44818: PUSH
44819: LD_INT 3
44821: PLUS
44822: PUSH
44823: LD_INT 5
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: PUSH
44831: LD_VAR 0 1
44835: PUSH
44836: LD_VAR 0 2
44840: PUSH
44841: LD_INT 4
44843: PLUS
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: LIST
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: ST_TO_ADDR
// end ; 1 :
44860: GO 45560
44862: LD_INT 1
44864: DOUBLE
44865: EQUAL
44866: IFTRUE 44870
44868: GO 45003
44870: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44871: LD_ADDR_VAR 0 5
44875: PUSH
44876: LD_VAR 0 1
44880: PUSH
44881: LD_VAR 0 2
44885: PUSH
44886: LD_INT 4
44888: MINUS
44889: PUSH
44890: LD_INT 3
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: PUSH
44898: LD_VAR 0 1
44902: PUSH
44903: LD_INT 3
44905: MINUS
44906: PUSH
44907: LD_VAR 0 2
44911: PUSH
44912: LD_INT 3
44914: MINUS
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: PUSH
44924: LD_VAR 0 1
44928: PUSH
44929: LD_INT 4
44931: MINUS
44932: PUSH
44933: LD_VAR 0 2
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: LIST
44945: PUSH
44946: LD_VAR 0 1
44950: PUSH
44951: LD_VAR 0 2
44955: PUSH
44956: LD_INT 3
44958: PLUS
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: PUSH
44968: LD_VAR 0 1
44972: PUSH
44973: LD_INT 4
44975: PLUS
44976: PUSH
44977: LD_VAR 0 2
44981: PUSH
44982: LD_INT 4
44984: PLUS
44985: PUSH
44986: LD_INT 5
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: ST_TO_ADDR
// end ; 2 :
45001: GO 45560
45003: LD_INT 2
45005: DOUBLE
45006: EQUAL
45007: IFTRUE 45011
45009: GO 45140
45011: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45012: LD_ADDR_VAR 0 5
45016: PUSH
45017: LD_VAR 0 1
45021: PUSH
45022: LD_VAR 0 2
45026: PUSH
45027: LD_INT 3
45029: MINUS
45030: PUSH
45031: LD_INT 3
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: PUSH
45039: LD_VAR 0 1
45043: PUSH
45044: LD_INT 4
45046: PLUS
45047: PUSH
45048: LD_VAR 0 2
45052: PUSH
45053: LD_INT 4
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: LIST
45060: PUSH
45061: LD_VAR 0 1
45065: PUSH
45066: LD_VAR 0 2
45070: PUSH
45071: LD_INT 4
45073: PLUS
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: LIST
45082: PUSH
45083: LD_VAR 0 1
45087: PUSH
45088: LD_INT 3
45090: MINUS
45091: PUSH
45092: LD_VAR 0 2
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: LIST
45104: PUSH
45105: LD_VAR 0 1
45109: PUSH
45110: LD_INT 4
45112: MINUS
45113: PUSH
45114: LD_VAR 0 2
45118: PUSH
45119: LD_INT 4
45121: MINUS
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: LIST
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: ST_TO_ADDR
// end ; 3 :
45138: GO 45560
45140: LD_INT 3
45142: DOUBLE
45143: EQUAL
45144: IFTRUE 45148
45146: GO 45281
45148: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45149: LD_ADDR_VAR 0 5
45153: PUSH
45154: LD_VAR 0 1
45158: PUSH
45159: LD_INT 3
45161: PLUS
45162: PUSH
45163: LD_VAR 0 2
45167: PUSH
45168: LD_INT 4
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: PUSH
45176: LD_VAR 0 1
45180: PUSH
45181: LD_INT 4
45183: PLUS
45184: PUSH
45185: LD_VAR 0 2
45189: PUSH
45190: LD_INT 4
45192: PLUS
45193: PUSH
45194: LD_INT 5
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: PUSH
45202: LD_VAR 0 1
45206: PUSH
45207: LD_INT 4
45209: MINUS
45210: PUSH
45211: LD_VAR 0 2
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: PUSH
45224: LD_VAR 0 1
45228: PUSH
45229: LD_VAR 0 2
45233: PUSH
45234: LD_INT 4
45236: MINUS
45237: PUSH
45238: LD_INT 3
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: LIST
45245: PUSH
45246: LD_VAR 0 1
45250: PUSH
45251: LD_INT 3
45253: MINUS
45254: PUSH
45255: LD_VAR 0 2
45259: PUSH
45260: LD_INT 3
45262: MINUS
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: LIST
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: ST_TO_ADDR
// end ; 4 :
45279: GO 45560
45281: LD_INT 4
45283: DOUBLE
45284: EQUAL
45285: IFTRUE 45289
45287: GO 45422
45289: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45290: LD_ADDR_VAR 0 5
45294: PUSH
45295: LD_VAR 0 1
45299: PUSH
45300: LD_VAR 0 2
45304: PUSH
45305: LD_INT 4
45307: PLUS
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: PUSH
45317: LD_VAR 0 1
45321: PUSH
45322: LD_INT 3
45324: PLUS
45325: PUSH
45326: LD_VAR 0 2
45330: PUSH
45331: LD_INT 3
45333: PLUS
45334: PUSH
45335: LD_INT 5
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: LIST
45342: PUSH
45343: LD_VAR 0 1
45347: PUSH
45348: LD_INT 4
45350: PLUS
45351: PUSH
45352: LD_VAR 0 2
45356: PUSH
45357: LD_INT 4
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: PUSH
45365: LD_VAR 0 1
45369: PUSH
45370: LD_VAR 0 2
45374: PUSH
45375: LD_INT 3
45377: MINUS
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: PUSH
45387: LD_VAR 0 1
45391: PUSH
45392: LD_INT 4
45394: MINUS
45395: PUSH
45396: LD_VAR 0 2
45400: PUSH
45401: LD_INT 4
45403: MINUS
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: ST_TO_ADDR
// end ; 5 :
45420: GO 45560
45422: LD_INT 5
45424: DOUBLE
45425: EQUAL
45426: IFTRUE 45430
45428: GO 45559
45430: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45431: LD_ADDR_VAR 0 5
45435: PUSH
45436: LD_VAR 0 1
45440: PUSH
45441: LD_INT 4
45443: MINUS
45444: PUSH
45445: LD_VAR 0 2
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: LIST
45457: PUSH
45458: LD_VAR 0 1
45462: PUSH
45463: LD_VAR 0 2
45467: PUSH
45468: LD_INT 4
45470: MINUS
45471: PUSH
45472: LD_INT 3
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: PUSH
45480: LD_VAR 0 1
45484: PUSH
45485: LD_INT 4
45487: PLUS
45488: PUSH
45489: LD_VAR 0 2
45493: PUSH
45494: LD_INT 4
45496: PLUS
45497: PUSH
45498: LD_INT 5
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: LIST
45505: PUSH
45506: LD_VAR 0 1
45510: PUSH
45511: LD_INT 3
45513: PLUS
45514: PUSH
45515: LD_VAR 0 2
45519: PUSH
45520: LD_INT 4
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: LIST
45527: PUSH
45528: LD_VAR 0 1
45532: PUSH
45533: LD_VAR 0 2
45537: PUSH
45538: LD_INT 3
45540: PLUS
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: ST_TO_ADDR
// end ; end ;
45557: GO 45560
45559: POP
// result := list ;
45560: LD_ADDR_VAR 0 4
45564: PUSH
45565: LD_VAR 0 5
45569: ST_TO_ADDR
// end ;
45570: LD_VAR 0 4
45574: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45575: LD_INT 0
45577: PPUSH
45578: PPUSH
45579: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45580: LD_VAR 0 1
45584: NOT
45585: PUSH
45586: LD_VAR 0 2
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: LD_INT 4
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: IN
45609: NOT
45610: OR
45611: IFFALSE 45615
// exit ;
45613: GO 45698
// tmp := [ ] ;
45615: LD_ADDR_VAR 0 5
45619: PUSH
45620: EMPTY
45621: ST_TO_ADDR
// for i in units do
45622: LD_ADDR_VAR 0 4
45626: PUSH
45627: LD_VAR 0 1
45631: PUSH
45632: FOR_IN
45633: IFFALSE 45667
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45635: LD_ADDR_VAR 0 5
45639: PUSH
45640: LD_VAR 0 5
45644: PPUSH
45645: LD_VAR 0 4
45649: PPUSH
45650: LD_VAR 0 2
45654: PPUSH
45655: CALL_OW 259
45659: PPUSH
45660: CALL 47071 0 2
45664: ST_TO_ADDR
45665: GO 45632
45667: POP
45668: POP
// if not tmp then
45669: LD_VAR 0 5
45673: NOT
45674: IFFALSE 45678
// exit ;
45676: GO 45698
// result := SortListByListDesc ( units , tmp ) ;
45678: LD_ADDR_VAR 0 3
45682: PUSH
45683: LD_VAR 0 1
45687: PPUSH
45688: LD_VAR 0 5
45692: PPUSH
45693: CALL_OW 77
45697: ST_TO_ADDR
// end ;
45698: LD_VAR 0 3
45702: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45703: LD_INT 0
45705: PPUSH
45706: PPUSH
45707: PPUSH
// result := false ;
45708: LD_ADDR_VAR 0 3
45712: PUSH
45713: LD_INT 0
45715: ST_TO_ADDR
// if not building then
45716: LD_VAR 0 2
45720: NOT
45721: IFFALSE 45725
// exit ;
45723: GO 45863
// x := GetX ( building ) ;
45725: LD_ADDR_VAR 0 4
45729: PUSH
45730: LD_VAR 0 2
45734: PPUSH
45735: CALL_OW 250
45739: ST_TO_ADDR
// y := GetY ( building ) ;
45740: LD_ADDR_VAR 0 5
45744: PUSH
45745: LD_VAR 0 2
45749: PPUSH
45750: CALL_OW 251
45754: ST_TO_ADDR
// if not x or not y then
45755: LD_VAR 0 4
45759: NOT
45760: PUSH
45761: LD_VAR 0 5
45765: NOT
45766: OR
45767: IFFALSE 45771
// exit ;
45769: GO 45863
// if GetTaskList ( unit ) then
45771: LD_VAR 0 1
45775: PPUSH
45776: CALL_OW 437
45780: IFFALSE 45863
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45782: LD_STRING e
45784: PUSH
45785: LD_VAR 0 1
45789: PPUSH
45790: CALL_OW 437
45794: PUSH
45795: LD_INT 1
45797: ARRAY
45798: PUSH
45799: LD_INT 1
45801: ARRAY
45802: EQUAL
45803: PUSH
45804: LD_VAR 0 4
45808: PUSH
45809: LD_VAR 0 1
45813: PPUSH
45814: CALL_OW 437
45818: PUSH
45819: LD_INT 1
45821: ARRAY
45822: PUSH
45823: LD_INT 2
45825: ARRAY
45826: EQUAL
45827: AND
45828: PUSH
45829: LD_VAR 0 5
45833: PUSH
45834: LD_VAR 0 1
45838: PPUSH
45839: CALL_OW 437
45843: PUSH
45844: LD_INT 1
45846: ARRAY
45847: PUSH
45848: LD_INT 3
45850: ARRAY
45851: EQUAL
45852: AND
45853: IFFALSE 45863
// result := true end ;
45855: LD_ADDR_VAR 0 3
45859: PUSH
45860: LD_INT 1
45862: ST_TO_ADDR
// end ;
45863: LD_VAR 0 3
45867: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45868: LD_INT 0
45870: PPUSH
// result := false ;
45871: LD_ADDR_VAR 0 4
45875: PUSH
45876: LD_INT 0
45878: ST_TO_ADDR
// if GetTaskList ( unit ) then
45879: LD_VAR 0 1
45883: PPUSH
45884: CALL_OW 437
45888: IFFALSE 45971
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45890: LD_STRING M
45892: PUSH
45893: LD_VAR 0 1
45897: PPUSH
45898: CALL_OW 437
45902: PUSH
45903: LD_INT 1
45905: ARRAY
45906: PUSH
45907: LD_INT 1
45909: ARRAY
45910: EQUAL
45911: PUSH
45912: LD_VAR 0 2
45916: PUSH
45917: LD_VAR 0 1
45921: PPUSH
45922: CALL_OW 437
45926: PUSH
45927: LD_INT 1
45929: ARRAY
45930: PUSH
45931: LD_INT 2
45933: ARRAY
45934: EQUAL
45935: AND
45936: PUSH
45937: LD_VAR 0 3
45941: PUSH
45942: LD_VAR 0 1
45946: PPUSH
45947: CALL_OW 437
45951: PUSH
45952: LD_INT 1
45954: ARRAY
45955: PUSH
45956: LD_INT 3
45958: ARRAY
45959: EQUAL
45960: AND
45961: IFFALSE 45971
// result := true ;
45963: LD_ADDR_VAR 0 4
45967: PUSH
45968: LD_INT 1
45970: ST_TO_ADDR
// end ; end ;
45971: LD_VAR 0 4
45975: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45976: LD_INT 0
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
// if not unit or not area then
45982: LD_VAR 0 1
45986: NOT
45987: PUSH
45988: LD_VAR 0 2
45992: NOT
45993: OR
45994: IFFALSE 45998
// exit ;
45996: GO 46174
// tmp := AreaToList ( area , i ) ;
45998: LD_ADDR_VAR 0 6
46002: PUSH
46003: LD_VAR 0 2
46007: PPUSH
46008: LD_VAR 0 5
46012: PPUSH
46013: CALL_OW 517
46017: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46018: LD_ADDR_VAR 0 5
46022: PUSH
46023: DOUBLE
46024: LD_INT 1
46026: DEC
46027: ST_TO_ADDR
46028: LD_VAR 0 6
46032: PUSH
46033: LD_INT 1
46035: ARRAY
46036: PUSH
46037: FOR_TO
46038: IFFALSE 46172
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46040: LD_ADDR_VAR 0 7
46044: PUSH
46045: LD_VAR 0 6
46049: PUSH
46050: LD_INT 1
46052: ARRAY
46053: PUSH
46054: LD_VAR 0 5
46058: ARRAY
46059: PUSH
46060: LD_VAR 0 6
46064: PUSH
46065: LD_INT 2
46067: ARRAY
46068: PUSH
46069: LD_VAR 0 5
46073: ARRAY
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46079: LD_INT 92
46081: PUSH
46082: LD_VAR 0 7
46086: PUSH
46087: LD_INT 1
46089: ARRAY
46090: PUSH
46091: LD_VAR 0 7
46095: PUSH
46096: LD_INT 2
46098: ARRAY
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: PPUSH
46109: CALL_OW 69
46113: PUSH
46114: LD_INT 0
46116: EQUAL
46117: IFFALSE 46170
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46119: LD_VAR 0 1
46123: PPUSH
46124: LD_VAR 0 7
46128: PUSH
46129: LD_INT 1
46131: ARRAY
46132: PPUSH
46133: LD_VAR 0 7
46137: PUSH
46138: LD_INT 2
46140: ARRAY
46141: PPUSH
46142: LD_VAR 0 3
46146: PPUSH
46147: CALL_OW 48
// result := IsPlaced ( unit ) ;
46151: LD_ADDR_VAR 0 4
46155: PUSH
46156: LD_VAR 0 1
46160: PPUSH
46161: CALL_OW 305
46165: ST_TO_ADDR
// exit ;
46166: POP
46167: POP
46168: GO 46174
// end ; end ;
46170: GO 46037
46172: POP
46173: POP
// end ;
46174: LD_VAR 0 4
46178: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46179: LD_INT 0
46181: PPUSH
46182: PPUSH
46183: PPUSH
// if not side or side > 8 then
46184: LD_VAR 0 1
46188: NOT
46189: PUSH
46190: LD_VAR 0 1
46194: PUSH
46195: LD_INT 8
46197: GREATER
46198: OR
46199: IFFALSE 46203
// exit ;
46201: GO 46390
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46203: LD_ADDR_VAR 0 4
46207: PUSH
46208: LD_INT 22
46210: PUSH
46211: LD_VAR 0 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 21
46222: PUSH
46223: LD_INT 3
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PPUSH
46234: CALL_OW 69
46238: ST_TO_ADDR
// if not tmp then
46239: LD_VAR 0 4
46243: NOT
46244: IFFALSE 46248
// exit ;
46246: GO 46390
// enable_addtolog := true ;
46248: LD_ADDR_OWVAR 81
46252: PUSH
46253: LD_INT 1
46255: ST_TO_ADDR
// AddToLog ( [ ) ;
46256: LD_STRING [
46258: PPUSH
46259: CALL_OW 561
// for i in tmp do
46263: LD_ADDR_VAR 0 3
46267: PUSH
46268: LD_VAR 0 4
46272: PUSH
46273: FOR_IN
46274: IFFALSE 46381
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46276: LD_STRING [
46278: PUSH
46279: LD_VAR 0 3
46283: PPUSH
46284: CALL_OW 266
46288: STR
46289: PUSH
46290: LD_STRING , 
46292: STR
46293: PUSH
46294: LD_VAR 0 3
46298: PPUSH
46299: CALL_OW 250
46303: STR
46304: PUSH
46305: LD_STRING , 
46307: STR
46308: PUSH
46309: LD_VAR 0 3
46313: PPUSH
46314: CALL_OW 251
46318: STR
46319: PUSH
46320: LD_STRING , 
46322: STR
46323: PUSH
46324: LD_VAR 0 3
46328: PPUSH
46329: CALL_OW 254
46333: STR
46334: PUSH
46335: LD_STRING , 
46337: STR
46338: PUSH
46339: LD_VAR 0 3
46343: PPUSH
46344: LD_INT 1
46346: PPUSH
46347: CALL_OW 268
46351: STR
46352: PUSH
46353: LD_STRING , 
46355: STR
46356: PUSH
46357: LD_VAR 0 3
46361: PPUSH
46362: LD_INT 2
46364: PPUSH
46365: CALL_OW 268
46369: STR
46370: PUSH
46371: LD_STRING ],
46373: STR
46374: PPUSH
46375: CALL_OW 561
// end ;
46379: GO 46273
46381: POP
46382: POP
// AddToLog ( ]; ) ;
46383: LD_STRING ];
46385: PPUSH
46386: CALL_OW 561
// end ;
46390: LD_VAR 0 2
46394: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46395: LD_INT 0
46397: PPUSH
46398: PPUSH
46399: PPUSH
46400: PPUSH
46401: PPUSH
// if not area or not rate or not max then
46402: LD_VAR 0 1
46406: NOT
46407: PUSH
46408: LD_VAR 0 2
46412: NOT
46413: OR
46414: PUSH
46415: LD_VAR 0 4
46419: NOT
46420: OR
46421: IFFALSE 46425
// exit ;
46423: GO 46614
// while 1 do
46425: LD_INT 1
46427: IFFALSE 46614
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46429: LD_ADDR_VAR 0 9
46433: PUSH
46434: LD_VAR 0 1
46438: PPUSH
46439: LD_INT 1
46441: PPUSH
46442: CALL_OW 287
46446: PUSH
46447: LD_INT 10
46449: MUL
46450: ST_TO_ADDR
// r := rate / 10 ;
46451: LD_ADDR_VAR 0 7
46455: PUSH
46456: LD_VAR 0 2
46460: PUSH
46461: LD_INT 10
46463: DIVREAL
46464: ST_TO_ADDR
// time := 1 1$00 ;
46465: LD_ADDR_VAR 0 8
46469: PUSH
46470: LD_INT 2100
46472: ST_TO_ADDR
// if amount < min then
46473: LD_VAR 0 9
46477: PUSH
46478: LD_VAR 0 3
46482: LESS
46483: IFFALSE 46501
// r := r * 2 else
46485: LD_ADDR_VAR 0 7
46489: PUSH
46490: LD_VAR 0 7
46494: PUSH
46495: LD_INT 2
46497: MUL
46498: ST_TO_ADDR
46499: GO 46527
// if amount > max then
46501: LD_VAR 0 9
46505: PUSH
46506: LD_VAR 0 4
46510: GREATER
46511: IFFALSE 46527
// r := r / 2 ;
46513: LD_ADDR_VAR 0 7
46517: PUSH
46518: LD_VAR 0 7
46522: PUSH
46523: LD_INT 2
46525: DIVREAL
46526: ST_TO_ADDR
// time := time / r ;
46527: LD_ADDR_VAR 0 8
46531: PUSH
46532: LD_VAR 0 8
46536: PUSH
46537: LD_VAR 0 7
46541: DIVREAL
46542: ST_TO_ADDR
// if time < 0 then
46543: LD_VAR 0 8
46547: PUSH
46548: LD_INT 0
46550: LESS
46551: IFFALSE 46568
// time := time * - 1 ;
46553: LD_ADDR_VAR 0 8
46557: PUSH
46558: LD_VAR 0 8
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: MUL
46567: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46568: LD_VAR 0 8
46572: PUSH
46573: LD_INT 35
46575: PPUSH
46576: LD_INT 875
46578: PPUSH
46579: CALL_OW 12
46583: PLUS
46584: PPUSH
46585: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46589: LD_INT 1
46591: PPUSH
46592: LD_INT 5
46594: PPUSH
46595: CALL_OW 12
46599: PPUSH
46600: LD_VAR 0 1
46604: PPUSH
46605: LD_INT 1
46607: PPUSH
46608: CALL_OW 55
// end ;
46612: GO 46425
// end ;
46614: LD_VAR 0 5
46618: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46619: LD_INT 0
46621: PPUSH
46622: PPUSH
46623: PPUSH
46624: PPUSH
46625: PPUSH
46626: PPUSH
46627: PPUSH
46628: PPUSH
// if not turrets or not factories then
46629: LD_VAR 0 1
46633: NOT
46634: PUSH
46635: LD_VAR 0 2
46639: NOT
46640: OR
46641: IFFALSE 46645
// exit ;
46643: GO 46952
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46645: LD_ADDR_VAR 0 10
46649: PUSH
46650: LD_INT 5
46652: PUSH
46653: LD_INT 6
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: LD_INT 4
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 3
46672: PUSH
46673: LD_INT 5
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 24
46687: PUSH
46688: LD_INT 25
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 23
46697: PUSH
46698: LD_INT 27
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 42
46711: PUSH
46712: LD_INT 43
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 44
46721: PUSH
46722: LD_INT 46
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 45
46731: PUSH
46732: LD_INT 47
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: LIST
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// result := [ ] ;
46749: LD_ADDR_VAR 0 3
46753: PUSH
46754: EMPTY
46755: ST_TO_ADDR
// for i in turrets do
46756: LD_ADDR_VAR 0 4
46760: PUSH
46761: LD_VAR 0 1
46765: PUSH
46766: FOR_IN
46767: IFFALSE 46950
// begin nat := GetNation ( i ) ;
46769: LD_ADDR_VAR 0 7
46773: PUSH
46774: LD_VAR 0 4
46778: PPUSH
46779: CALL_OW 248
46783: ST_TO_ADDR
// weapon := 0 ;
46784: LD_ADDR_VAR 0 8
46788: PUSH
46789: LD_INT 0
46791: ST_TO_ADDR
// if not nat then
46792: LD_VAR 0 7
46796: NOT
46797: IFFALSE 46801
// continue ;
46799: GO 46766
// for j in list [ nat ] do
46801: LD_ADDR_VAR 0 5
46805: PUSH
46806: LD_VAR 0 10
46810: PUSH
46811: LD_VAR 0 7
46815: ARRAY
46816: PUSH
46817: FOR_IN
46818: IFFALSE 46859
// if GetBWeapon ( i ) = j [ 1 ] then
46820: LD_VAR 0 4
46824: PPUSH
46825: CALL_OW 269
46829: PUSH
46830: LD_VAR 0 5
46834: PUSH
46835: LD_INT 1
46837: ARRAY
46838: EQUAL
46839: IFFALSE 46857
// begin weapon := j [ 2 ] ;
46841: LD_ADDR_VAR 0 8
46845: PUSH
46846: LD_VAR 0 5
46850: PUSH
46851: LD_INT 2
46853: ARRAY
46854: ST_TO_ADDR
// break ;
46855: GO 46859
// end ;
46857: GO 46817
46859: POP
46860: POP
// if not weapon then
46861: LD_VAR 0 8
46865: NOT
46866: IFFALSE 46870
// continue ;
46868: GO 46766
// for k in factories do
46870: LD_ADDR_VAR 0 6
46874: PUSH
46875: LD_VAR 0 2
46879: PUSH
46880: FOR_IN
46881: IFFALSE 46946
// begin weapons := AvailableWeaponList ( k ) ;
46883: LD_ADDR_VAR 0 9
46887: PUSH
46888: LD_VAR 0 6
46892: PPUSH
46893: CALL_OW 478
46897: ST_TO_ADDR
// if not weapons then
46898: LD_VAR 0 9
46902: NOT
46903: IFFALSE 46907
// continue ;
46905: GO 46880
// if weapon in weapons then
46907: LD_VAR 0 8
46911: PUSH
46912: LD_VAR 0 9
46916: IN
46917: IFFALSE 46944
// begin result := [ i , weapon ] ;
46919: LD_ADDR_VAR 0 3
46923: PUSH
46924: LD_VAR 0 4
46928: PUSH
46929: LD_VAR 0 8
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// exit ;
46938: POP
46939: POP
46940: POP
46941: POP
46942: GO 46952
// end ; end ;
46944: GO 46880
46946: POP
46947: POP
// end ;
46948: GO 46766
46950: POP
46951: POP
// end ;
46952: LD_VAR 0 3
46956: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46957: LD_INT 0
46959: PPUSH
// if not side or side > 8 then
46960: LD_VAR 0 3
46964: NOT
46965: PUSH
46966: LD_VAR 0 3
46970: PUSH
46971: LD_INT 8
46973: GREATER
46974: OR
46975: IFFALSE 46979
// exit ;
46977: GO 47038
// if not range then
46979: LD_VAR 0 4
46983: NOT
46984: IFFALSE 46995
// range := - 12 ;
46986: LD_ADDR_VAR 0 4
46990: PUSH
46991: LD_INT 12
46993: NEG
46994: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46995: LD_VAR 0 1
46999: PPUSH
47000: LD_VAR 0 2
47004: PPUSH
47005: LD_VAR 0 3
47009: PPUSH
47010: LD_VAR 0 4
47014: PPUSH
47015: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47019: LD_VAR 0 1
47023: PPUSH
47024: LD_VAR 0 2
47028: PPUSH
47029: LD_VAR 0 3
47033: PPUSH
47034: CALL_OW 331
// end ;
47038: LD_VAR 0 5
47042: RET
// export function Video ( mode ) ; begin
47043: LD_INT 0
47045: PPUSH
// ingame_video = mode ;
47046: LD_ADDR_OWVAR 52
47050: PUSH
47051: LD_VAR 0 1
47055: ST_TO_ADDR
// interface_hidden = mode ;
47056: LD_ADDR_OWVAR 54
47060: PUSH
47061: LD_VAR 0 1
47065: ST_TO_ADDR
// end ;
47066: LD_VAR 0 2
47070: RET
// export function Join ( array , element ) ; begin
47071: LD_INT 0
47073: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47074: LD_ADDR_VAR 0 3
47078: PUSH
47079: LD_VAR 0 1
47083: PPUSH
47084: LD_VAR 0 1
47088: PUSH
47089: LD_INT 1
47091: PLUS
47092: PPUSH
47093: LD_VAR 0 2
47097: PPUSH
47098: CALL_OW 1
47102: ST_TO_ADDR
// end ;
47103: LD_VAR 0 3
47107: RET
// export function JoinUnion ( array , element ) ; begin
47108: LD_INT 0
47110: PPUSH
// result := array union element ;
47111: LD_ADDR_VAR 0 3
47115: PUSH
47116: LD_VAR 0 1
47120: PUSH
47121: LD_VAR 0 2
47125: UNION
47126: ST_TO_ADDR
// end ;
47127: LD_VAR 0 3
47131: RET
// export function GetBehemoths ( side ) ; begin
47132: LD_INT 0
47134: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47135: LD_ADDR_VAR 0 2
47139: PUSH
47140: LD_INT 22
47142: PUSH
47143: LD_VAR 0 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 31
47154: PUSH
47155: LD_INT 25
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PPUSH
47166: CALL_OW 69
47170: ST_TO_ADDR
// end ;
47171: LD_VAR 0 2
47175: RET
// export function Shuffle ( array ) ; var i , index ; begin
47176: LD_INT 0
47178: PPUSH
47179: PPUSH
47180: PPUSH
// result := [ ] ;
47181: LD_ADDR_VAR 0 2
47185: PUSH
47186: EMPTY
47187: ST_TO_ADDR
// if not array then
47188: LD_VAR 0 1
47192: NOT
47193: IFFALSE 47197
// exit ;
47195: GO 47296
// Randomize ;
47197: CALL_OW 10
// for i = array downto 1 do
47201: LD_ADDR_VAR 0 3
47205: PUSH
47206: DOUBLE
47207: LD_VAR 0 1
47211: INC
47212: ST_TO_ADDR
47213: LD_INT 1
47215: PUSH
47216: FOR_DOWNTO
47217: IFFALSE 47294
// begin index := rand ( 1 , array ) ;
47219: LD_ADDR_VAR 0 4
47223: PUSH
47224: LD_INT 1
47226: PPUSH
47227: LD_VAR 0 1
47231: PPUSH
47232: CALL_OW 12
47236: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47237: LD_ADDR_VAR 0 2
47241: PUSH
47242: LD_VAR 0 2
47246: PPUSH
47247: LD_VAR 0 2
47251: PUSH
47252: LD_INT 1
47254: PLUS
47255: PPUSH
47256: LD_VAR 0 1
47260: PUSH
47261: LD_VAR 0 4
47265: ARRAY
47266: PPUSH
47267: CALL_OW 2
47271: ST_TO_ADDR
// array := Delete ( array , index ) ;
47272: LD_ADDR_VAR 0 1
47276: PUSH
47277: LD_VAR 0 1
47281: PPUSH
47282: LD_VAR 0 4
47286: PPUSH
47287: CALL_OW 3
47291: ST_TO_ADDR
// end ;
47292: GO 47216
47294: POP
47295: POP
// end ;
47296: LD_VAR 0 2
47300: RET
// export function GetBaseMaterials ( base ) ; begin
47301: LD_INT 0
47303: PPUSH
// result := [ 0 , 0 , 0 ] ;
47304: LD_ADDR_VAR 0 2
47308: PUSH
47309: LD_INT 0
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// if not base then
47323: LD_VAR 0 1
47327: NOT
47328: IFFALSE 47332
// exit ;
47330: GO 47381
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47332: LD_ADDR_VAR 0 2
47336: PUSH
47337: LD_VAR 0 1
47341: PPUSH
47342: LD_INT 1
47344: PPUSH
47345: CALL_OW 275
47349: PUSH
47350: LD_VAR 0 1
47354: PPUSH
47355: LD_INT 2
47357: PPUSH
47358: CALL_OW 275
47362: PUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: LD_INT 3
47370: PPUSH
47371: CALL_OW 275
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: ST_TO_ADDR
// end ;
47381: LD_VAR 0 2
47385: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47386: LD_INT 0
47388: PPUSH
47389: PPUSH
// result := array ;
47390: LD_ADDR_VAR 0 3
47394: PUSH
47395: LD_VAR 0 1
47399: ST_TO_ADDR
// if size >= result then
47400: LD_VAR 0 2
47404: PUSH
47405: LD_VAR 0 3
47409: GREATEREQUAL
47410: IFFALSE 47414
// exit ;
47412: GO 47464
// if size then
47414: LD_VAR 0 2
47418: IFFALSE 47464
// for i := array downto size do
47420: LD_ADDR_VAR 0 4
47424: PUSH
47425: DOUBLE
47426: LD_VAR 0 1
47430: INC
47431: ST_TO_ADDR
47432: LD_VAR 0 2
47436: PUSH
47437: FOR_DOWNTO
47438: IFFALSE 47462
// result := Delete ( result , result ) ;
47440: LD_ADDR_VAR 0 3
47444: PUSH
47445: LD_VAR 0 3
47449: PPUSH
47450: LD_VAR 0 3
47454: PPUSH
47455: CALL_OW 3
47459: ST_TO_ADDR
47460: GO 47437
47462: POP
47463: POP
// end ;
47464: LD_VAR 0 3
47468: RET
// export function ComExit ( unit ) ; var tmp ; begin
47469: LD_INT 0
47471: PPUSH
47472: PPUSH
// if not IsInUnit ( unit ) then
47473: LD_VAR 0 1
47477: PPUSH
47478: CALL_OW 310
47482: NOT
47483: IFFALSE 47487
// exit ;
47485: GO 47547
// tmp := IsInUnit ( unit ) ;
47487: LD_ADDR_VAR 0 3
47491: PUSH
47492: LD_VAR 0 1
47496: PPUSH
47497: CALL_OW 310
47501: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47502: LD_VAR 0 3
47506: PPUSH
47507: CALL_OW 247
47511: PUSH
47512: LD_INT 2
47514: EQUAL
47515: IFFALSE 47528
// ComExitVehicle ( unit ) else
47517: LD_VAR 0 1
47521: PPUSH
47522: CALL_OW 121
47526: GO 47537
// ComExitBuilding ( unit ) ;
47528: LD_VAR 0 1
47532: PPUSH
47533: CALL_OW 122
// result := tmp ;
47537: LD_ADDR_VAR 0 2
47541: PUSH
47542: LD_VAR 0 3
47546: ST_TO_ADDR
// end ;
47547: LD_VAR 0 2
47551: RET
// export function ComExitAll ( units ) ; var i ; begin
47552: LD_INT 0
47554: PPUSH
47555: PPUSH
// if not units then
47556: LD_VAR 0 1
47560: NOT
47561: IFFALSE 47565
// exit ;
47563: GO 47591
// for i in units do
47565: LD_ADDR_VAR 0 3
47569: PUSH
47570: LD_VAR 0 1
47574: PUSH
47575: FOR_IN
47576: IFFALSE 47589
// ComExit ( i ) ;
47578: LD_VAR 0 3
47582: PPUSH
47583: CALL 47469 0 1
47587: GO 47575
47589: POP
47590: POP
// end ;
47591: LD_VAR 0 2
47595: RET
// export function ResetHc ; begin
47596: LD_INT 0
47598: PPUSH
// InitHc ;
47599: CALL_OW 19
// hc_importance := 0 ;
47603: LD_ADDR_OWVAR 32
47607: PUSH
47608: LD_INT 0
47610: ST_TO_ADDR
// end ;
47611: LD_VAR 0 1
47615: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47616: LD_INT 0
47618: PPUSH
47619: PPUSH
47620: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47621: LD_ADDR_VAR 0 6
47625: PUSH
47626: LD_VAR 0 1
47630: PUSH
47631: LD_VAR 0 3
47635: PLUS
47636: PUSH
47637: LD_INT 2
47639: DIV
47640: ST_TO_ADDR
// if _x < 0 then
47641: LD_VAR 0 6
47645: PUSH
47646: LD_INT 0
47648: LESS
47649: IFFALSE 47666
// _x := _x * - 1 ;
47651: LD_ADDR_VAR 0 6
47655: PUSH
47656: LD_VAR 0 6
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: MUL
47665: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47666: LD_ADDR_VAR 0 7
47670: PUSH
47671: LD_VAR 0 2
47675: PUSH
47676: LD_VAR 0 4
47680: PLUS
47681: PUSH
47682: LD_INT 2
47684: DIV
47685: ST_TO_ADDR
// if _y < 0 then
47686: LD_VAR 0 7
47690: PUSH
47691: LD_INT 0
47693: LESS
47694: IFFALSE 47711
// _y := _y * - 1 ;
47696: LD_ADDR_VAR 0 7
47700: PUSH
47701: LD_VAR 0 7
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: MUL
47710: ST_TO_ADDR
// result := [ _x , _y ] ;
47711: LD_ADDR_VAR 0 5
47715: PUSH
47716: LD_VAR 0 6
47720: PUSH
47721: LD_VAR 0 7
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: ST_TO_ADDR
// end ;
47730: LD_VAR 0 5
47734: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47735: LD_INT 0
47737: PPUSH
47738: PPUSH
47739: PPUSH
47740: PPUSH
// task := GetTaskList ( unit ) ;
47741: LD_ADDR_VAR 0 7
47745: PUSH
47746: LD_VAR 0 1
47750: PPUSH
47751: CALL_OW 437
47755: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47756: LD_VAR 0 7
47760: NOT
47761: PUSH
47762: LD_VAR 0 1
47766: PPUSH
47767: LD_VAR 0 2
47771: PPUSH
47772: CALL_OW 308
47776: NOT
47777: AND
47778: IFFALSE 47782
// exit ;
47780: GO 47900
// if IsInArea ( unit , area ) then
47782: LD_VAR 0 1
47786: PPUSH
47787: LD_VAR 0 2
47791: PPUSH
47792: CALL_OW 308
47796: IFFALSE 47814
// begin ComMoveToArea ( unit , goAway ) ;
47798: LD_VAR 0 1
47802: PPUSH
47803: LD_VAR 0 3
47807: PPUSH
47808: CALL_OW 113
// exit ;
47812: GO 47900
// end ; if task [ 1 ] [ 1 ] <> M then
47814: LD_VAR 0 7
47818: PUSH
47819: LD_INT 1
47821: ARRAY
47822: PUSH
47823: LD_INT 1
47825: ARRAY
47826: PUSH
47827: LD_STRING M
47829: NONEQUAL
47830: IFFALSE 47834
// exit ;
47832: GO 47900
// x := task [ 1 ] [ 2 ] ;
47834: LD_ADDR_VAR 0 5
47838: PUSH
47839: LD_VAR 0 7
47843: PUSH
47844: LD_INT 1
47846: ARRAY
47847: PUSH
47848: LD_INT 2
47850: ARRAY
47851: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47852: LD_ADDR_VAR 0 6
47856: PUSH
47857: LD_VAR 0 7
47861: PUSH
47862: LD_INT 1
47864: ARRAY
47865: PUSH
47866: LD_INT 3
47868: ARRAY
47869: ST_TO_ADDR
// if InArea ( x , y , area ) then
47870: LD_VAR 0 5
47874: PPUSH
47875: LD_VAR 0 6
47879: PPUSH
47880: LD_VAR 0 2
47884: PPUSH
47885: CALL_OW 309
47889: IFFALSE 47900
// ComStop ( unit ) ;
47891: LD_VAR 0 1
47895: PPUSH
47896: CALL_OW 141
// end ;
47900: LD_VAR 0 4
47904: RET
// export function Abs ( value ) ; begin
47905: LD_INT 0
47907: PPUSH
// result := value ;
47908: LD_ADDR_VAR 0 2
47912: PUSH
47913: LD_VAR 0 1
47917: ST_TO_ADDR
// if value < 0 then
47918: LD_VAR 0 1
47922: PUSH
47923: LD_INT 0
47925: LESS
47926: IFFALSE 47943
// result := value * - 1 ;
47928: LD_ADDR_VAR 0 2
47932: PUSH
47933: LD_VAR 0 1
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: MUL
47942: ST_TO_ADDR
// end ;
47943: LD_VAR 0 2
47947: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47948: LD_INT 0
47950: PPUSH
47951: PPUSH
47952: PPUSH
47953: PPUSH
47954: PPUSH
47955: PPUSH
47956: PPUSH
47957: PPUSH
// if not unit or not building then
47958: LD_VAR 0 1
47962: NOT
47963: PUSH
47964: LD_VAR 0 2
47968: NOT
47969: OR
47970: IFFALSE 47974
// exit ;
47972: GO 48200
// x := GetX ( building ) ;
47974: LD_ADDR_VAR 0 4
47978: PUSH
47979: LD_VAR 0 2
47983: PPUSH
47984: CALL_OW 250
47988: ST_TO_ADDR
// y := GetY ( building ) ;
47989: LD_ADDR_VAR 0 6
47993: PUSH
47994: LD_VAR 0 2
47998: PPUSH
47999: CALL_OW 251
48003: ST_TO_ADDR
// d := GetDir ( building ) ;
48004: LD_ADDR_VAR 0 8
48008: PUSH
48009: LD_VAR 0 2
48013: PPUSH
48014: CALL_OW 254
48018: ST_TO_ADDR
// r := 4 ;
48019: LD_ADDR_VAR 0 9
48023: PUSH
48024: LD_INT 4
48026: ST_TO_ADDR
// for i := 1 to 5 do
48027: LD_ADDR_VAR 0 10
48031: PUSH
48032: DOUBLE
48033: LD_INT 1
48035: DEC
48036: ST_TO_ADDR
48037: LD_INT 5
48039: PUSH
48040: FOR_TO
48041: IFFALSE 48198
// begin _x := ShiftX ( x , d , r + i ) ;
48043: LD_ADDR_VAR 0 5
48047: PUSH
48048: LD_VAR 0 4
48052: PPUSH
48053: LD_VAR 0 8
48057: PPUSH
48058: LD_VAR 0 9
48062: PUSH
48063: LD_VAR 0 10
48067: PLUS
48068: PPUSH
48069: CALL_OW 272
48073: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48074: LD_ADDR_VAR 0 7
48078: PUSH
48079: LD_VAR 0 6
48083: PPUSH
48084: LD_VAR 0 8
48088: PPUSH
48089: LD_VAR 0 9
48093: PUSH
48094: LD_VAR 0 10
48098: PLUS
48099: PPUSH
48100: CALL_OW 273
48104: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48105: LD_VAR 0 5
48109: PPUSH
48110: LD_VAR 0 7
48114: PPUSH
48115: CALL_OW 488
48119: PUSH
48120: LD_VAR 0 5
48124: PPUSH
48125: LD_VAR 0 7
48129: PPUSH
48130: CALL_OW 428
48134: PPUSH
48135: CALL_OW 247
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: IN
48150: NOT
48151: AND
48152: IFFALSE 48196
// begin ComMoveXY ( unit , _x , _y ) ;
48154: LD_VAR 0 1
48158: PPUSH
48159: LD_VAR 0 5
48163: PPUSH
48164: LD_VAR 0 7
48168: PPUSH
48169: CALL_OW 111
// result := [ _x , _y ] ;
48173: LD_ADDR_VAR 0 3
48177: PUSH
48178: LD_VAR 0 5
48182: PUSH
48183: LD_VAR 0 7
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// exit ;
48192: POP
48193: POP
48194: GO 48200
// end ; end ;
48196: GO 48040
48198: POP
48199: POP
// end ;
48200: LD_VAR 0 3
48204: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48205: LD_INT 0
48207: PPUSH
48208: PPUSH
48209: PPUSH
// result := 0 ;
48210: LD_ADDR_VAR 0 3
48214: PUSH
48215: LD_INT 0
48217: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48218: LD_VAR 0 1
48222: PUSH
48223: LD_INT 0
48225: LESS
48226: PUSH
48227: LD_VAR 0 1
48231: PUSH
48232: LD_INT 8
48234: GREATER
48235: OR
48236: PUSH
48237: LD_VAR 0 2
48241: PUSH
48242: LD_INT 0
48244: LESS
48245: OR
48246: PUSH
48247: LD_VAR 0 2
48251: PUSH
48252: LD_INT 8
48254: GREATER
48255: OR
48256: IFFALSE 48260
// exit ;
48258: GO 48335
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48260: LD_ADDR_VAR 0 4
48264: PUSH
48265: LD_INT 22
48267: PUSH
48268: LD_VAR 0 2
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PPUSH
48277: CALL_OW 69
48281: PUSH
48282: FOR_IN
48283: IFFALSE 48333
// begin un := UnitShoot ( i ) ;
48285: LD_ADDR_VAR 0 5
48289: PUSH
48290: LD_VAR 0 4
48294: PPUSH
48295: CALL_OW 504
48299: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48300: LD_VAR 0 5
48304: PPUSH
48305: CALL_OW 255
48309: PUSH
48310: LD_VAR 0 1
48314: EQUAL
48315: IFFALSE 48331
// begin result := un ;
48317: LD_ADDR_VAR 0 3
48321: PUSH
48322: LD_VAR 0 5
48326: ST_TO_ADDR
// exit ;
48327: POP
48328: POP
48329: GO 48335
// end ; end ;
48331: GO 48282
48333: POP
48334: POP
// end ;
48335: LD_VAR 0 3
48339: RET
// export function GetCargoBay ( units ) ; begin
48340: LD_INT 0
48342: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48343: LD_ADDR_VAR 0 2
48347: PUSH
48348: LD_VAR 0 1
48352: PPUSH
48353: LD_INT 2
48355: PUSH
48356: LD_INT 34
48358: PUSH
48359: LD_INT 12
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 34
48368: PUSH
48369: LD_INT 51
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 34
48378: PUSH
48379: LD_INT 32
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 34
48388: PUSH
48389: LD_INT 89
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: PPUSH
48403: CALL_OW 72
48407: ST_TO_ADDR
// end ;
48408: LD_VAR 0 2
48412: RET
// export function Negate ( value ) ; begin
48413: LD_INT 0
48415: PPUSH
// result := not value ;
48416: LD_ADDR_VAR 0 2
48420: PUSH
48421: LD_VAR 0 1
48425: NOT
48426: ST_TO_ADDR
// end ;
48427: LD_VAR 0 2
48431: RET
// export function Inc ( value ) ; begin
48432: LD_INT 0
48434: PPUSH
// result := value + 1 ;
48435: LD_ADDR_VAR 0 2
48439: PUSH
48440: LD_VAR 0 1
48444: PUSH
48445: LD_INT 1
48447: PLUS
48448: ST_TO_ADDR
// end ;
48449: LD_VAR 0 2
48453: RET
// export function Dec ( value ) ; begin
48454: LD_INT 0
48456: PPUSH
// result := value - 1 ;
48457: LD_ADDR_VAR 0 2
48461: PUSH
48462: LD_VAR 0 1
48466: PUSH
48467: LD_INT 1
48469: MINUS
48470: ST_TO_ADDR
// end ;
48471: LD_VAR 0 2
48475: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48476: LD_INT 0
48478: PPUSH
48479: PPUSH
48480: PPUSH
48481: PPUSH
48482: PPUSH
48483: PPUSH
48484: PPUSH
48485: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48486: LD_VAR 0 1
48490: PPUSH
48491: LD_VAR 0 2
48495: PPUSH
48496: CALL_OW 488
48500: NOT
48501: PUSH
48502: LD_VAR 0 3
48506: PPUSH
48507: LD_VAR 0 4
48511: PPUSH
48512: CALL_OW 488
48516: NOT
48517: OR
48518: IFFALSE 48531
// begin result := - 1 ;
48520: LD_ADDR_VAR 0 5
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: ST_TO_ADDR
// exit ;
48529: GO 48766
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48531: LD_ADDR_VAR 0 12
48535: PUSH
48536: LD_VAR 0 1
48540: PPUSH
48541: LD_VAR 0 2
48545: PPUSH
48546: LD_VAR 0 3
48550: PPUSH
48551: LD_VAR 0 4
48555: PPUSH
48556: CALL 47616 0 4
48560: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48561: LD_ADDR_VAR 0 11
48565: PUSH
48566: LD_VAR 0 1
48570: PPUSH
48571: LD_VAR 0 2
48575: PPUSH
48576: LD_VAR 0 12
48580: PUSH
48581: LD_INT 1
48583: ARRAY
48584: PPUSH
48585: LD_VAR 0 12
48589: PUSH
48590: LD_INT 2
48592: ARRAY
48593: PPUSH
48594: CALL_OW 298
48598: ST_TO_ADDR
// distance := 9999 ;
48599: LD_ADDR_VAR 0 10
48603: PUSH
48604: LD_INT 9999
48606: ST_TO_ADDR
// for i := 0 to 5 do
48607: LD_ADDR_VAR 0 6
48611: PUSH
48612: DOUBLE
48613: LD_INT 0
48615: DEC
48616: ST_TO_ADDR
48617: LD_INT 5
48619: PUSH
48620: FOR_TO
48621: IFFALSE 48764
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48623: LD_ADDR_VAR 0 7
48627: PUSH
48628: LD_VAR 0 1
48632: PPUSH
48633: LD_VAR 0 6
48637: PPUSH
48638: LD_VAR 0 11
48642: PPUSH
48643: CALL_OW 272
48647: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48648: LD_ADDR_VAR 0 8
48652: PUSH
48653: LD_VAR 0 2
48657: PPUSH
48658: LD_VAR 0 6
48662: PPUSH
48663: LD_VAR 0 11
48667: PPUSH
48668: CALL_OW 273
48672: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48673: LD_VAR 0 7
48677: PPUSH
48678: LD_VAR 0 8
48682: PPUSH
48683: CALL_OW 488
48687: NOT
48688: IFFALSE 48692
// continue ;
48690: GO 48620
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48692: LD_ADDR_VAR 0 9
48696: PUSH
48697: LD_VAR 0 12
48701: PUSH
48702: LD_INT 1
48704: ARRAY
48705: PPUSH
48706: LD_VAR 0 12
48710: PUSH
48711: LD_INT 2
48713: ARRAY
48714: PPUSH
48715: LD_VAR 0 7
48719: PPUSH
48720: LD_VAR 0 8
48724: PPUSH
48725: CALL_OW 298
48729: ST_TO_ADDR
// if tmp < distance then
48730: LD_VAR 0 9
48734: PUSH
48735: LD_VAR 0 10
48739: LESS
48740: IFFALSE 48762
// begin result := i ;
48742: LD_ADDR_VAR 0 5
48746: PUSH
48747: LD_VAR 0 6
48751: ST_TO_ADDR
// distance := tmp ;
48752: LD_ADDR_VAR 0 10
48756: PUSH
48757: LD_VAR 0 9
48761: ST_TO_ADDR
// end ; end ;
48762: GO 48620
48764: POP
48765: POP
// end ;
48766: LD_VAR 0 5
48770: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48771: LD_INT 0
48773: PPUSH
48774: PPUSH
// if not driver or not IsInUnit ( driver ) then
48775: LD_VAR 0 1
48779: NOT
48780: PUSH
48781: LD_VAR 0 1
48785: PPUSH
48786: CALL_OW 310
48790: NOT
48791: OR
48792: IFFALSE 48796
// exit ;
48794: GO 48886
// vehicle := IsInUnit ( driver ) ;
48796: LD_ADDR_VAR 0 3
48800: PUSH
48801: LD_VAR 0 1
48805: PPUSH
48806: CALL_OW 310
48810: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48811: LD_VAR 0 1
48815: PPUSH
48816: LD_STRING \
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: PUSH
48846: LD_STRING E
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_VAR 0 3
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PPUSH
48882: CALL_OW 446
// end ;
48886: LD_VAR 0 2
48890: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48891: LD_INT 0
48893: PPUSH
48894: PPUSH
// if not driver or not IsInUnit ( driver ) then
48895: LD_VAR 0 1
48899: NOT
48900: PUSH
48901: LD_VAR 0 1
48905: PPUSH
48906: CALL_OW 310
48910: NOT
48911: OR
48912: IFFALSE 48916
// exit ;
48914: GO 49006
// vehicle := IsInUnit ( driver ) ;
48916: LD_ADDR_VAR 0 3
48920: PUSH
48921: LD_VAR 0 1
48925: PPUSH
48926: CALL_OW 310
48930: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48931: LD_VAR 0 1
48935: PPUSH
48936: LD_STRING \
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: PUSH
48966: LD_STRING E
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_VAR 0 3
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PPUSH
49002: CALL_OW 447
// end ;
49006: LD_VAR 0 2
49010: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49011: LD_INT 0
49013: PPUSH
49014: PPUSH
49015: PPUSH
// tmp := [ ] ;
49016: LD_ADDR_VAR 0 5
49020: PUSH
49021: EMPTY
49022: ST_TO_ADDR
// for i in units do
49023: LD_ADDR_VAR 0 4
49027: PUSH
49028: LD_VAR 0 1
49032: PUSH
49033: FOR_IN
49034: IFFALSE 49072
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49036: LD_ADDR_VAR 0 5
49040: PUSH
49041: LD_VAR 0 5
49045: PPUSH
49046: LD_VAR 0 5
49050: PUSH
49051: LD_INT 1
49053: PLUS
49054: PPUSH
49055: LD_VAR 0 4
49059: PPUSH
49060: CALL_OW 256
49064: PPUSH
49065: CALL_OW 2
49069: ST_TO_ADDR
49070: GO 49033
49072: POP
49073: POP
// if not tmp then
49074: LD_VAR 0 5
49078: NOT
49079: IFFALSE 49083
// exit ;
49081: GO 49131
// if asc then
49083: LD_VAR 0 2
49087: IFFALSE 49111
// result := SortListByListAsc ( units , tmp ) else
49089: LD_ADDR_VAR 0 3
49093: PUSH
49094: LD_VAR 0 1
49098: PPUSH
49099: LD_VAR 0 5
49103: PPUSH
49104: CALL_OW 76
49108: ST_TO_ADDR
49109: GO 49131
// result := SortListByListDesc ( units , tmp ) ;
49111: LD_ADDR_VAR 0 3
49115: PUSH
49116: LD_VAR 0 1
49120: PPUSH
49121: LD_VAR 0 5
49125: PPUSH
49126: CALL_OW 77
49130: ST_TO_ADDR
// end ;
49131: LD_VAR 0 3
49135: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49136: LD_INT 0
49138: PPUSH
49139: PPUSH
// task := GetTaskList ( mech ) ;
49140: LD_ADDR_VAR 0 4
49144: PUSH
49145: LD_VAR 0 1
49149: PPUSH
49150: CALL_OW 437
49154: ST_TO_ADDR
// if not task then
49155: LD_VAR 0 4
49159: NOT
49160: IFFALSE 49164
// exit ;
49162: GO 49206
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49164: LD_ADDR_VAR 0 3
49168: PUSH
49169: LD_VAR 0 4
49173: PUSH
49174: LD_INT 1
49176: ARRAY
49177: PUSH
49178: LD_INT 1
49180: ARRAY
49181: PUSH
49182: LD_STRING r
49184: EQUAL
49185: PUSH
49186: LD_VAR 0 4
49190: PUSH
49191: LD_INT 1
49193: ARRAY
49194: PUSH
49195: LD_INT 4
49197: ARRAY
49198: PUSH
49199: LD_VAR 0 2
49203: EQUAL
49204: AND
49205: ST_TO_ADDR
// end ;
49206: LD_VAR 0 3
49210: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49211: LD_INT 0
49213: PPUSH
// SetDir ( unit , d ) ;
49214: LD_VAR 0 1
49218: PPUSH
49219: LD_VAR 0 4
49223: PPUSH
49224: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49228: LD_ADDR_VAR 0 6
49232: PUSH
49233: LD_VAR 0 1
49237: PPUSH
49238: LD_VAR 0 2
49242: PPUSH
49243: LD_VAR 0 3
49247: PPUSH
49248: LD_VAR 0 5
49252: PPUSH
49253: CALL_OW 48
49257: ST_TO_ADDR
// end ;
49258: LD_VAR 0 6
49262: RET
// export function ToNaturalNumber ( number ) ; begin
49263: LD_INT 0
49265: PPUSH
// result := number div 1 ;
49266: LD_ADDR_VAR 0 2
49270: PUSH
49271: LD_VAR 0 1
49275: PUSH
49276: LD_INT 1
49278: DIV
49279: ST_TO_ADDR
// if number < 0 then
49280: LD_VAR 0 1
49284: PUSH
49285: LD_INT 0
49287: LESS
49288: IFFALSE 49298
// result := 0 ;
49290: LD_ADDR_VAR 0 2
49294: PUSH
49295: LD_INT 0
49297: ST_TO_ADDR
// end ;
49298: LD_VAR 0 2
49302: RET
// export function SortByClass ( units , class ) ; var un ; begin
49303: LD_INT 0
49305: PPUSH
49306: PPUSH
// if not units or not class then
49307: LD_VAR 0 1
49311: NOT
49312: PUSH
49313: LD_VAR 0 2
49317: NOT
49318: OR
49319: IFFALSE 49323
// exit ;
49321: GO 49418
// result := [ ] ;
49323: LD_ADDR_VAR 0 3
49327: PUSH
49328: EMPTY
49329: ST_TO_ADDR
// for un in units do
49330: LD_ADDR_VAR 0 4
49334: PUSH
49335: LD_VAR 0 1
49339: PUSH
49340: FOR_IN
49341: IFFALSE 49416
// if GetClass ( un ) = class then
49343: LD_VAR 0 4
49347: PPUSH
49348: CALL_OW 257
49352: PUSH
49353: LD_VAR 0 2
49357: EQUAL
49358: IFFALSE 49385
// result := Insert ( result , 1 , un ) else
49360: LD_ADDR_VAR 0 3
49364: PUSH
49365: LD_VAR 0 3
49369: PPUSH
49370: LD_INT 1
49372: PPUSH
49373: LD_VAR 0 4
49377: PPUSH
49378: CALL_OW 2
49382: ST_TO_ADDR
49383: GO 49414
// result := Replace ( result , result + 1 , un ) ;
49385: LD_ADDR_VAR 0 3
49389: PUSH
49390: LD_VAR 0 3
49394: PPUSH
49395: LD_VAR 0 3
49399: PUSH
49400: LD_INT 1
49402: PLUS
49403: PPUSH
49404: LD_VAR 0 4
49408: PPUSH
49409: CALL_OW 1
49413: ST_TO_ADDR
49414: GO 49340
49416: POP
49417: POP
// end ;
49418: LD_VAR 0 3
49422: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49423: LD_INT 0
49425: PPUSH
49426: PPUSH
49427: PPUSH
49428: PPUSH
49429: PPUSH
49430: PPUSH
49431: PPUSH
// result := [ ] ;
49432: LD_ADDR_VAR 0 4
49436: PUSH
49437: EMPTY
49438: ST_TO_ADDR
// if x - r < 0 then
49439: LD_VAR 0 1
49443: PUSH
49444: LD_VAR 0 3
49448: MINUS
49449: PUSH
49450: LD_INT 0
49452: LESS
49453: IFFALSE 49465
// min_x := 0 else
49455: LD_ADDR_VAR 0 8
49459: PUSH
49460: LD_INT 0
49462: ST_TO_ADDR
49463: GO 49481
// min_x := x - r ;
49465: LD_ADDR_VAR 0 8
49469: PUSH
49470: LD_VAR 0 1
49474: PUSH
49475: LD_VAR 0 3
49479: MINUS
49480: ST_TO_ADDR
// if y - r < 0 then
49481: LD_VAR 0 2
49485: PUSH
49486: LD_VAR 0 3
49490: MINUS
49491: PUSH
49492: LD_INT 0
49494: LESS
49495: IFFALSE 49507
// min_y := 0 else
49497: LD_ADDR_VAR 0 7
49501: PUSH
49502: LD_INT 0
49504: ST_TO_ADDR
49505: GO 49523
// min_y := y - r ;
49507: LD_ADDR_VAR 0 7
49511: PUSH
49512: LD_VAR 0 2
49516: PUSH
49517: LD_VAR 0 3
49521: MINUS
49522: ST_TO_ADDR
// max_x := x + r ;
49523: LD_ADDR_VAR 0 9
49527: PUSH
49528: LD_VAR 0 1
49532: PUSH
49533: LD_VAR 0 3
49537: PLUS
49538: ST_TO_ADDR
// max_y := y + r ;
49539: LD_ADDR_VAR 0 10
49543: PUSH
49544: LD_VAR 0 2
49548: PUSH
49549: LD_VAR 0 3
49553: PLUS
49554: ST_TO_ADDR
// for _x = min_x to max_x do
49555: LD_ADDR_VAR 0 5
49559: PUSH
49560: DOUBLE
49561: LD_VAR 0 8
49565: DEC
49566: ST_TO_ADDR
49567: LD_VAR 0 9
49571: PUSH
49572: FOR_TO
49573: IFFALSE 49674
// for _y = min_y to max_y do
49575: LD_ADDR_VAR 0 6
49579: PUSH
49580: DOUBLE
49581: LD_VAR 0 7
49585: DEC
49586: ST_TO_ADDR
49587: LD_VAR 0 10
49591: PUSH
49592: FOR_TO
49593: IFFALSE 49670
// begin if not ValidHex ( _x , _y ) then
49595: LD_VAR 0 5
49599: PPUSH
49600: LD_VAR 0 6
49604: PPUSH
49605: CALL_OW 488
49609: NOT
49610: IFFALSE 49614
// continue ;
49612: GO 49592
// if GetResourceTypeXY ( _x , _y ) then
49614: LD_VAR 0 5
49618: PPUSH
49619: LD_VAR 0 6
49623: PPUSH
49624: CALL_OW 283
49628: IFFALSE 49668
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49630: LD_ADDR_VAR 0 4
49634: PUSH
49635: LD_VAR 0 4
49639: PPUSH
49640: LD_VAR 0 4
49644: PUSH
49645: LD_INT 1
49647: PLUS
49648: PPUSH
49649: LD_VAR 0 5
49653: PUSH
49654: LD_VAR 0 6
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PPUSH
49663: CALL_OW 1
49667: ST_TO_ADDR
// end ;
49668: GO 49592
49670: POP
49671: POP
49672: GO 49572
49674: POP
49675: POP
// end ;
49676: LD_VAR 0 4
49680: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49681: LD_INT 0
49683: PPUSH
49684: PPUSH
49685: PPUSH
49686: PPUSH
49687: PPUSH
49688: PPUSH
49689: PPUSH
49690: PPUSH
// if not units then
49691: LD_VAR 0 1
49695: NOT
49696: IFFALSE 49700
// exit ;
49698: GO 50228
// result := UnitFilter ( units , [ f_ok ] ) ;
49700: LD_ADDR_VAR 0 3
49704: PUSH
49705: LD_VAR 0 1
49709: PPUSH
49710: LD_INT 50
49712: PUSH
49713: EMPTY
49714: LIST
49715: PPUSH
49716: CALL_OW 72
49720: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49721: LD_ADDR_VAR 0 8
49725: PUSH
49726: LD_VAR 0 1
49730: PUSH
49731: LD_INT 1
49733: ARRAY
49734: PPUSH
49735: CALL_OW 255
49739: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49740: LD_ADDR_VAR 0 10
49744: PUSH
49745: LD_INT 29
49747: PUSH
49748: LD_INT 91
49750: PUSH
49751: LD_INT 49
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: LIST
49758: ST_TO_ADDR
// if not result then
49759: LD_VAR 0 3
49763: NOT
49764: IFFALSE 49768
// exit ;
49766: GO 50228
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49768: LD_ADDR_VAR 0 5
49772: PUSH
49773: LD_INT 81
49775: PUSH
49776: LD_VAR 0 8
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PPUSH
49785: CALL_OW 69
49789: ST_TO_ADDR
// for i in result do
49790: LD_ADDR_VAR 0 4
49794: PUSH
49795: LD_VAR 0 3
49799: PUSH
49800: FOR_IN
49801: IFFALSE 50226
// begin tag := GetTag ( i ) + 1 ;
49803: LD_ADDR_VAR 0 9
49807: PUSH
49808: LD_VAR 0 4
49812: PPUSH
49813: CALL_OW 110
49817: PUSH
49818: LD_INT 1
49820: PLUS
49821: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49822: LD_ADDR_VAR 0 7
49826: PUSH
49827: LD_VAR 0 4
49831: PPUSH
49832: CALL_OW 250
49836: PPUSH
49837: LD_VAR 0 4
49841: PPUSH
49842: CALL_OW 251
49846: PPUSH
49847: LD_INT 4
49849: PPUSH
49850: CALL 49423 0 3
49854: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49855: LD_VAR 0 4
49859: PPUSH
49860: CALL_OW 247
49864: PUSH
49865: LD_INT 2
49867: EQUAL
49868: PUSH
49869: LD_VAR 0 7
49873: PUSH
49874: LD_INT 2
49876: GREATER
49877: AND
49878: PUSH
49879: LD_VAR 0 4
49883: PPUSH
49884: CALL_OW 264
49888: PUSH
49889: LD_VAR 0 10
49893: IN
49894: NOT
49895: AND
49896: IFFALSE 49935
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49898: LD_VAR 0 4
49902: PPUSH
49903: LD_VAR 0 7
49907: PUSH
49908: LD_INT 1
49910: ARRAY
49911: PUSH
49912: LD_INT 1
49914: ARRAY
49915: PPUSH
49916: LD_VAR 0 7
49920: PUSH
49921: LD_INT 1
49923: ARRAY
49924: PUSH
49925: LD_INT 2
49927: ARRAY
49928: PPUSH
49929: CALL_OW 116
49933: GO 50224
// if path > tag then
49935: LD_VAR 0 2
49939: PUSH
49940: LD_VAR 0 9
49944: GREATER
49945: IFFALSE 50153
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49947: LD_ADDR_VAR 0 6
49951: PUSH
49952: LD_VAR 0 5
49956: PPUSH
49957: LD_INT 91
49959: PUSH
49960: LD_VAR 0 4
49964: PUSH
49965: LD_INT 8
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: PPUSH
49973: CALL_OW 72
49977: ST_TO_ADDR
// if nearEnemy then
49978: LD_VAR 0 6
49982: IFFALSE 50051
// begin if GetWeapon ( i ) = ru_time_lapser then
49984: LD_VAR 0 4
49988: PPUSH
49989: CALL_OW 264
49993: PUSH
49994: LD_INT 49
49996: EQUAL
49997: IFFALSE 50025
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49999: LD_VAR 0 4
50003: PPUSH
50004: LD_VAR 0 6
50008: PPUSH
50009: LD_VAR 0 4
50013: PPUSH
50014: CALL_OW 74
50018: PPUSH
50019: CALL_OW 112
50023: GO 50049
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50025: LD_VAR 0 4
50029: PPUSH
50030: LD_VAR 0 6
50034: PPUSH
50035: LD_VAR 0 4
50039: PPUSH
50040: CALL_OW 74
50044: PPUSH
50045: CALL 51299 0 2
// end else
50049: GO 50151
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50051: LD_VAR 0 4
50055: PPUSH
50056: LD_VAR 0 2
50060: PUSH
50061: LD_VAR 0 9
50065: ARRAY
50066: PUSH
50067: LD_INT 1
50069: ARRAY
50070: PPUSH
50071: LD_VAR 0 2
50075: PUSH
50076: LD_VAR 0 9
50080: ARRAY
50081: PUSH
50082: LD_INT 2
50084: ARRAY
50085: PPUSH
50086: CALL_OW 297
50090: PUSH
50091: LD_INT 6
50093: GREATER
50094: IFFALSE 50137
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50096: LD_VAR 0 4
50100: PPUSH
50101: LD_VAR 0 2
50105: PUSH
50106: LD_VAR 0 9
50110: ARRAY
50111: PUSH
50112: LD_INT 1
50114: ARRAY
50115: PPUSH
50116: LD_VAR 0 2
50120: PUSH
50121: LD_VAR 0 9
50125: ARRAY
50126: PUSH
50127: LD_INT 2
50129: ARRAY
50130: PPUSH
50131: CALL_OW 114
50135: GO 50151
// SetTag ( i , tag ) ;
50137: LD_VAR 0 4
50141: PPUSH
50142: LD_VAR 0 9
50146: PPUSH
50147: CALL_OW 109
// end else
50151: GO 50224
// if enemy then
50153: LD_VAR 0 5
50157: IFFALSE 50224
// begin if GetWeapon ( i ) = ru_time_lapser then
50159: LD_VAR 0 4
50163: PPUSH
50164: CALL_OW 264
50168: PUSH
50169: LD_INT 49
50171: EQUAL
50172: IFFALSE 50200
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50174: LD_VAR 0 4
50178: PPUSH
50179: LD_VAR 0 5
50183: PPUSH
50184: LD_VAR 0 4
50188: PPUSH
50189: CALL_OW 74
50193: PPUSH
50194: CALL_OW 112
50198: GO 50224
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50200: LD_VAR 0 4
50204: PPUSH
50205: LD_VAR 0 5
50209: PPUSH
50210: LD_VAR 0 4
50214: PPUSH
50215: CALL_OW 74
50219: PPUSH
50220: CALL 51299 0 2
// end ; end ;
50224: GO 49800
50226: POP
50227: POP
// end ;
50228: LD_VAR 0 3
50232: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50233: LD_INT 0
50235: PPUSH
50236: PPUSH
50237: PPUSH
// if not unit or IsInUnit ( unit ) then
50238: LD_VAR 0 1
50242: NOT
50243: PUSH
50244: LD_VAR 0 1
50248: PPUSH
50249: CALL_OW 310
50253: OR
50254: IFFALSE 50258
// exit ;
50256: GO 50349
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50258: LD_ADDR_VAR 0 4
50262: PUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: CALL_OW 250
50272: PPUSH
50273: LD_VAR 0 2
50277: PPUSH
50278: LD_INT 1
50280: PPUSH
50281: CALL_OW 272
50285: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50286: LD_ADDR_VAR 0 5
50290: PUSH
50291: LD_VAR 0 1
50295: PPUSH
50296: CALL_OW 251
50300: PPUSH
50301: LD_VAR 0 2
50305: PPUSH
50306: LD_INT 1
50308: PPUSH
50309: CALL_OW 273
50313: ST_TO_ADDR
// if ValidHex ( x , y ) then
50314: LD_VAR 0 4
50318: PPUSH
50319: LD_VAR 0 5
50323: PPUSH
50324: CALL_OW 488
50328: IFFALSE 50349
// ComTurnXY ( unit , x , y ) ;
50330: LD_VAR 0 1
50334: PPUSH
50335: LD_VAR 0 4
50339: PPUSH
50340: LD_VAR 0 5
50344: PPUSH
50345: CALL_OW 118
// end ;
50349: LD_VAR 0 3
50353: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50354: LD_INT 0
50356: PPUSH
50357: PPUSH
// result := false ;
50358: LD_ADDR_VAR 0 3
50362: PUSH
50363: LD_INT 0
50365: ST_TO_ADDR
// if not units then
50366: LD_VAR 0 2
50370: NOT
50371: IFFALSE 50375
// exit ;
50373: GO 50420
// for i in units do
50375: LD_ADDR_VAR 0 4
50379: PUSH
50380: LD_VAR 0 2
50384: PUSH
50385: FOR_IN
50386: IFFALSE 50418
// if See ( side , i ) then
50388: LD_VAR 0 1
50392: PPUSH
50393: LD_VAR 0 4
50397: PPUSH
50398: CALL_OW 292
50402: IFFALSE 50416
// begin result := true ;
50404: LD_ADDR_VAR 0 3
50408: PUSH
50409: LD_INT 1
50411: ST_TO_ADDR
// exit ;
50412: POP
50413: POP
50414: GO 50420
// end ;
50416: GO 50385
50418: POP
50419: POP
// end ;
50420: LD_VAR 0 3
50424: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50425: LD_INT 0
50427: PPUSH
50428: PPUSH
50429: PPUSH
50430: PPUSH
// if not unit or not points then
50431: LD_VAR 0 1
50435: NOT
50436: PUSH
50437: LD_VAR 0 2
50441: NOT
50442: OR
50443: IFFALSE 50447
// exit ;
50445: GO 50537
// dist := 99999 ;
50447: LD_ADDR_VAR 0 5
50451: PUSH
50452: LD_INT 99999
50454: ST_TO_ADDR
// for i in points do
50455: LD_ADDR_VAR 0 4
50459: PUSH
50460: LD_VAR 0 2
50464: PUSH
50465: FOR_IN
50466: IFFALSE 50535
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50468: LD_ADDR_VAR 0 6
50472: PUSH
50473: LD_VAR 0 1
50477: PPUSH
50478: LD_VAR 0 4
50482: PUSH
50483: LD_INT 1
50485: ARRAY
50486: PPUSH
50487: LD_VAR 0 4
50491: PUSH
50492: LD_INT 2
50494: ARRAY
50495: PPUSH
50496: CALL_OW 297
50500: ST_TO_ADDR
// if tmpDist < dist then
50501: LD_VAR 0 6
50505: PUSH
50506: LD_VAR 0 5
50510: LESS
50511: IFFALSE 50533
// begin result := i ;
50513: LD_ADDR_VAR 0 3
50517: PUSH
50518: LD_VAR 0 4
50522: ST_TO_ADDR
// dist := tmpDist ;
50523: LD_ADDR_VAR 0 5
50527: PUSH
50528: LD_VAR 0 6
50532: ST_TO_ADDR
// end ; end ;
50533: GO 50465
50535: POP
50536: POP
// end ;
50537: LD_VAR 0 3
50541: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50542: LD_INT 0
50544: PPUSH
// uc_side := side ;
50545: LD_ADDR_OWVAR 20
50549: PUSH
50550: LD_VAR 0 1
50554: ST_TO_ADDR
// uc_nation := 3 ;
50555: LD_ADDR_OWVAR 21
50559: PUSH
50560: LD_INT 3
50562: ST_TO_ADDR
// vc_chassis := 25 ;
50563: LD_ADDR_OWVAR 37
50567: PUSH
50568: LD_INT 25
50570: ST_TO_ADDR
// vc_engine := engine_siberite ;
50571: LD_ADDR_OWVAR 39
50575: PUSH
50576: LD_INT 3
50578: ST_TO_ADDR
// vc_control := control_computer ;
50579: LD_ADDR_OWVAR 38
50583: PUSH
50584: LD_INT 3
50586: ST_TO_ADDR
// vc_weapon := 59 ;
50587: LD_ADDR_OWVAR 40
50591: PUSH
50592: LD_INT 59
50594: ST_TO_ADDR
// result := CreateVehicle ;
50595: LD_ADDR_VAR 0 5
50599: PUSH
50600: CALL_OW 45
50604: ST_TO_ADDR
// SetDir ( result , d ) ;
50605: LD_VAR 0 5
50609: PPUSH
50610: LD_VAR 0 4
50614: PPUSH
50615: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50619: LD_VAR 0 5
50623: PPUSH
50624: LD_VAR 0 2
50628: PPUSH
50629: LD_VAR 0 3
50633: PPUSH
50634: LD_INT 0
50636: PPUSH
50637: CALL_OW 48
// end ;
50641: LD_VAR 0 5
50645: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50646: LD_INT 0
50648: PPUSH
50649: PPUSH
50650: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50651: LD_ADDR_VAR 0 2
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50674: LD_VAR 0 1
50678: NOT
50679: PUSH
50680: LD_VAR 0 1
50684: PPUSH
50685: CALL_OW 264
50689: PUSH
50690: LD_INT 12
50692: PUSH
50693: LD_INT 51
50695: PUSH
50696: LD_INT 32
50698: PUSH
50699: LD_INT 89
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: IN
50708: NOT
50709: OR
50710: IFFALSE 50714
// exit ;
50712: GO 50812
// for i := 1 to 3 do
50714: LD_ADDR_VAR 0 3
50718: PUSH
50719: DOUBLE
50720: LD_INT 1
50722: DEC
50723: ST_TO_ADDR
50724: LD_INT 3
50726: PUSH
50727: FOR_TO
50728: IFFALSE 50810
// begin tmp := GetCargo ( cargo , i ) ;
50730: LD_ADDR_VAR 0 4
50734: PUSH
50735: LD_VAR 0 1
50739: PPUSH
50740: LD_VAR 0 3
50744: PPUSH
50745: CALL_OW 289
50749: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50750: LD_ADDR_VAR 0 2
50754: PUSH
50755: LD_VAR 0 2
50759: PPUSH
50760: LD_VAR 0 3
50764: PPUSH
50765: LD_VAR 0 4
50769: PPUSH
50770: CALL_OW 1
50774: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50775: LD_ADDR_VAR 0 2
50779: PUSH
50780: LD_VAR 0 2
50784: PPUSH
50785: LD_INT 4
50787: PPUSH
50788: LD_VAR 0 2
50792: PUSH
50793: LD_INT 4
50795: ARRAY
50796: PUSH
50797: LD_VAR 0 4
50801: PLUS
50802: PPUSH
50803: CALL_OW 1
50807: ST_TO_ADDR
// end ;
50808: GO 50727
50810: POP
50811: POP
// end ;
50812: LD_VAR 0 2
50816: RET
// export function Length ( array ) ; begin
50817: LD_INT 0
50819: PPUSH
// result := array + 0 ;
50820: LD_ADDR_VAR 0 2
50824: PUSH
50825: LD_VAR 0 1
50829: PUSH
50830: LD_INT 0
50832: PLUS
50833: ST_TO_ADDR
// end ;
50834: LD_VAR 0 2
50838: RET
// export function PrepareArray ( array ) ; begin
50839: LD_INT 0
50841: PPUSH
// result := array diff 0 ;
50842: LD_ADDR_VAR 0 2
50846: PUSH
50847: LD_VAR 0 1
50851: PUSH
50852: LD_INT 0
50854: DIFF
50855: ST_TO_ADDR
// if not result [ 1 ] then
50856: LD_VAR 0 2
50860: PUSH
50861: LD_INT 1
50863: ARRAY
50864: NOT
50865: IFFALSE 50885
// result := Delete ( result , 1 ) ;
50867: LD_ADDR_VAR 0 2
50871: PUSH
50872: LD_VAR 0 2
50876: PPUSH
50877: LD_INT 1
50879: PPUSH
50880: CALL_OW 3
50884: ST_TO_ADDR
// end ;
50885: LD_VAR 0 2
50889: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50890: LD_INT 0
50892: PPUSH
50893: PPUSH
50894: PPUSH
50895: PPUSH
// sibRocketRange := 25 ;
50896: LD_ADDR_VAR 0 6
50900: PUSH
50901: LD_INT 25
50903: ST_TO_ADDR
// result := false ;
50904: LD_ADDR_VAR 0 4
50908: PUSH
50909: LD_INT 0
50911: ST_TO_ADDR
// for i := 0 to 5 do
50912: LD_ADDR_VAR 0 5
50916: PUSH
50917: DOUBLE
50918: LD_INT 0
50920: DEC
50921: ST_TO_ADDR
50922: LD_INT 5
50924: PUSH
50925: FOR_TO
50926: IFFALSE 50993
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50928: LD_VAR 0 1
50932: PPUSH
50933: LD_VAR 0 5
50937: PPUSH
50938: LD_VAR 0 6
50942: PPUSH
50943: CALL_OW 272
50947: PPUSH
50948: LD_VAR 0 2
50952: PPUSH
50953: LD_VAR 0 5
50957: PPUSH
50958: LD_VAR 0 6
50962: PPUSH
50963: CALL_OW 273
50967: PPUSH
50968: LD_VAR 0 3
50972: PPUSH
50973: CALL_OW 309
50977: IFFALSE 50991
// begin result := true ;
50979: LD_ADDR_VAR 0 4
50983: PUSH
50984: LD_INT 1
50986: ST_TO_ADDR
// exit ;
50987: POP
50988: POP
50989: GO 50995
// end ;
50991: GO 50925
50993: POP
50994: POP
// end ;
50995: LD_VAR 0 4
50999: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51000: LD_INT 0
51002: PPUSH
51003: PPUSH
51004: PPUSH
// if btype = b_depot then
51005: LD_VAR 0 2
51009: PUSH
51010: LD_INT 0
51012: EQUAL
51013: IFFALSE 51025
// begin result := true ;
51015: LD_ADDR_VAR 0 3
51019: PUSH
51020: LD_INT 1
51022: ST_TO_ADDR
// exit ;
51023: GO 51141
// end ; pom := GetBase ( depot ) ;
51025: LD_ADDR_VAR 0 4
51029: PUSH
51030: LD_VAR 0 1
51034: PPUSH
51035: CALL_OW 274
51039: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51040: LD_ADDR_VAR 0 5
51044: PUSH
51045: LD_VAR 0 2
51049: PPUSH
51050: LD_VAR 0 1
51054: PPUSH
51055: CALL_OW 248
51059: PPUSH
51060: CALL_OW 450
51064: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51065: LD_ADDR_VAR 0 3
51069: PUSH
51070: LD_VAR 0 4
51074: PPUSH
51075: LD_INT 1
51077: PPUSH
51078: CALL_OW 275
51082: PUSH
51083: LD_VAR 0 5
51087: PUSH
51088: LD_INT 1
51090: ARRAY
51091: GREATEREQUAL
51092: PUSH
51093: LD_VAR 0 4
51097: PPUSH
51098: LD_INT 2
51100: PPUSH
51101: CALL_OW 275
51105: PUSH
51106: LD_VAR 0 5
51110: PUSH
51111: LD_INT 2
51113: ARRAY
51114: GREATEREQUAL
51115: AND
51116: PUSH
51117: LD_VAR 0 4
51121: PPUSH
51122: LD_INT 3
51124: PPUSH
51125: CALL_OW 275
51129: PUSH
51130: LD_VAR 0 5
51134: PUSH
51135: LD_INT 3
51137: ARRAY
51138: GREATEREQUAL
51139: AND
51140: ST_TO_ADDR
// end ;
51141: LD_VAR 0 3
51145: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51146: LD_INT 0
51148: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51149: LD_VAR 0 1
51153: PPUSH
51154: LD_VAR 0 2
51158: PPUSH
51159: LD_INT 0
51161: PPUSH
51162: LD_INT 0
51164: PPUSH
51165: LD_INT 1
51167: PPUSH
51168: LD_INT 0
51170: PPUSH
51171: CALL_OW 587
// end ;
51175: LD_VAR 0 3
51179: RET
// export function CenterOnNow ( unit ) ; begin
51180: LD_INT 0
51182: PPUSH
// result := IsInUnit ( unit ) ;
51183: LD_ADDR_VAR 0 2
51187: PUSH
51188: LD_VAR 0 1
51192: PPUSH
51193: CALL_OW 310
51197: ST_TO_ADDR
// if not result then
51198: LD_VAR 0 2
51202: NOT
51203: IFFALSE 51215
// result := unit ;
51205: LD_ADDR_VAR 0 2
51209: PUSH
51210: LD_VAR 0 1
51214: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51215: LD_VAR 0 1
51219: PPUSH
51220: CALL_OW 87
// end ;
51224: LD_VAR 0 2
51228: RET
// export function ComMoveHex ( unit , hex ) ; begin
51229: LD_INT 0
51231: PPUSH
// if not hex then
51232: LD_VAR 0 2
51236: NOT
51237: IFFALSE 51241
// exit ;
51239: GO 51294
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51241: LD_VAR 0 2
51245: PUSH
51246: LD_INT 1
51248: ARRAY
51249: PPUSH
51250: LD_VAR 0 2
51254: PUSH
51255: LD_INT 2
51257: ARRAY
51258: PPUSH
51259: CALL_OW 428
51263: IFFALSE 51267
// exit ;
51265: GO 51294
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51267: LD_VAR 0 1
51271: PPUSH
51272: LD_VAR 0 2
51276: PUSH
51277: LD_INT 1
51279: ARRAY
51280: PPUSH
51281: LD_VAR 0 2
51285: PUSH
51286: LD_INT 2
51288: ARRAY
51289: PPUSH
51290: CALL_OW 111
// end ;
51294: LD_VAR 0 3
51298: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51299: LD_INT 0
51301: PPUSH
51302: PPUSH
51303: PPUSH
// if not unit or not enemy then
51304: LD_VAR 0 1
51308: NOT
51309: PUSH
51310: LD_VAR 0 2
51314: NOT
51315: OR
51316: IFFALSE 51320
// exit ;
51318: GO 51444
// x := GetX ( enemy ) ;
51320: LD_ADDR_VAR 0 4
51324: PUSH
51325: LD_VAR 0 2
51329: PPUSH
51330: CALL_OW 250
51334: ST_TO_ADDR
// y := GetY ( enemy ) ;
51335: LD_ADDR_VAR 0 5
51339: PUSH
51340: LD_VAR 0 2
51344: PPUSH
51345: CALL_OW 251
51349: ST_TO_ADDR
// if ValidHex ( x , y ) then
51350: LD_VAR 0 4
51354: PPUSH
51355: LD_VAR 0 5
51359: PPUSH
51360: CALL_OW 488
51364: IFFALSE 51444
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51366: LD_VAR 0 2
51370: PPUSH
51371: CALL_OW 247
51375: PUSH
51376: LD_INT 3
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: IN
51386: PUSH
51387: LD_VAR 0 1
51391: PPUSH
51392: CALL_OW 255
51396: PPUSH
51397: LD_VAR 0 2
51401: PPUSH
51402: CALL_OW 292
51406: OR
51407: IFFALSE 51425
// ComAttackUnit ( unit , enemy ) else
51409: LD_VAR 0 1
51413: PPUSH
51414: LD_VAR 0 2
51418: PPUSH
51419: CALL_OW 115
51423: GO 51444
// ComAgressiveMove ( unit , x , y ) ;
51425: LD_VAR 0 1
51429: PPUSH
51430: LD_VAR 0 4
51434: PPUSH
51435: LD_VAR 0 5
51439: PPUSH
51440: CALL_OW 114
// end ;
51444: LD_VAR 0 3
51448: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
51449: LD_INT 0
51451: PPUSH
51452: PPUSH
51453: PPUSH
// list := AreaToList ( area , 0 ) ;
51454: LD_ADDR_VAR 0 5
51458: PUSH
51459: LD_VAR 0 1
51463: PPUSH
51464: LD_INT 0
51466: PPUSH
51467: CALL_OW 517
51471: ST_TO_ADDR
// if not list then
51472: LD_VAR 0 5
51476: NOT
51477: IFFALSE 51481
// exit ;
51479: GO 51611
// if all then
51481: LD_VAR 0 2
51485: IFFALSE 51573
// begin for i := 1 to list [ 1 ] do
51487: LD_ADDR_VAR 0 4
51491: PUSH
51492: DOUBLE
51493: LD_INT 1
51495: DEC
51496: ST_TO_ADDR
51497: LD_VAR 0 5
51501: PUSH
51502: LD_INT 1
51504: ARRAY
51505: PUSH
51506: FOR_TO
51507: IFFALSE 51569
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
51509: LD_ADDR_VAR 0 3
51513: PUSH
51514: LD_VAR 0 3
51518: PPUSH
51519: LD_VAR 0 3
51523: PUSH
51524: LD_INT 1
51526: PLUS
51527: PPUSH
51528: LD_VAR 0 5
51532: PUSH
51533: LD_INT 1
51535: ARRAY
51536: PUSH
51537: LD_VAR 0 4
51541: ARRAY
51542: PUSH
51543: LD_VAR 0 5
51547: PUSH
51548: LD_INT 2
51550: ARRAY
51551: PUSH
51552: LD_VAR 0 4
51556: ARRAY
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PPUSH
51562: CALL_OW 1
51566: ST_TO_ADDR
51567: GO 51506
51569: POP
51570: POP
// exit ;
51571: GO 51611
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
51573: LD_ADDR_VAR 0 3
51577: PUSH
51578: LD_VAR 0 5
51582: PUSH
51583: LD_INT 1
51585: ARRAY
51586: PUSH
51587: LD_INT 1
51589: ARRAY
51590: PUSH
51591: LD_VAR 0 5
51595: PUSH
51596: LD_INT 2
51598: ARRAY
51599: PUSH
51600: LD_INT 1
51602: ARRAY
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: ST_TO_ADDR
// end ;
51611: LD_VAR 0 3
51615: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51616: LD_INT 0
51618: PPUSH
51619: PPUSH
// list := AreaToList ( area , 0 ) ;
51620: LD_ADDR_VAR 0 4
51624: PUSH
51625: LD_VAR 0 1
51629: PPUSH
51630: LD_INT 0
51632: PPUSH
51633: CALL_OW 517
51637: ST_TO_ADDR
// if not list then
51638: LD_VAR 0 4
51642: NOT
51643: IFFALSE 51647
// exit ;
51645: GO 51688
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51647: LD_ADDR_VAR 0 3
51651: PUSH
51652: LD_VAR 0 4
51656: PUSH
51657: LD_INT 1
51659: ARRAY
51660: PUSH
51661: LD_INT 1
51663: ARRAY
51664: PUSH
51665: LD_VAR 0 4
51669: PUSH
51670: LD_INT 2
51672: ARRAY
51673: PUSH
51674: LD_INT 1
51676: ARRAY
51677: PUSH
51678: LD_VAR 0 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: ST_TO_ADDR
// end ;
51688: LD_VAR 0 3
51692: RET
// export function First ( array ) ; begin
51693: LD_INT 0
51695: PPUSH
// if not array then
51696: LD_VAR 0 1
51700: NOT
51701: IFFALSE 51705
// exit ;
51703: GO 51719
// result := array [ 1 ] ;
51705: LD_ADDR_VAR 0 2
51709: PUSH
51710: LD_VAR 0 1
51714: PUSH
51715: LD_INT 1
51717: ARRAY
51718: ST_TO_ADDR
// end ;
51719: LD_VAR 0 2
51723: RET
// export function Last ( array ) ; begin
51724: LD_INT 0
51726: PPUSH
// if not array then
51727: LD_VAR 0 1
51731: NOT
51732: IFFALSE 51736
// exit ;
51734: GO 51752
// result := array [ array ] ;
51736: LD_ADDR_VAR 0 2
51740: PUSH
51741: LD_VAR 0 1
51745: PUSH
51746: LD_VAR 0 1
51750: ARRAY
51751: ST_TO_ADDR
// end ;
51752: LD_VAR 0 2
51756: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51757: LD_INT 0
51759: PPUSH
51760: PPUSH
// result := [ ] ;
51761: LD_ADDR_VAR 0 5
51765: PUSH
51766: EMPTY
51767: ST_TO_ADDR
// if not array then
51768: LD_VAR 0 1
51772: NOT
51773: IFFALSE 51777
// exit ;
51775: GO 51889
// for i := 1 to array do
51777: LD_ADDR_VAR 0 6
51781: PUSH
51782: DOUBLE
51783: LD_INT 1
51785: DEC
51786: ST_TO_ADDR
51787: LD_VAR 0 1
51791: PUSH
51792: FOR_TO
51793: IFFALSE 51887
// if array [ i ] [ index ] = value then
51795: LD_VAR 0 1
51799: PUSH
51800: LD_VAR 0 6
51804: ARRAY
51805: PUSH
51806: LD_VAR 0 2
51810: ARRAY
51811: PUSH
51812: LD_VAR 0 3
51816: EQUAL
51817: IFFALSE 51885
// begin if indexColumn then
51819: LD_VAR 0 4
51823: IFFALSE 51859
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51825: LD_ADDR_VAR 0 5
51829: PUSH
51830: LD_VAR 0 5
51834: PPUSH
51835: LD_VAR 0 1
51839: PUSH
51840: LD_VAR 0 6
51844: ARRAY
51845: PUSH
51846: LD_VAR 0 4
51850: ARRAY
51851: PPUSH
51852: CALL 47071 0 2
51856: ST_TO_ADDR
51857: GO 51885
// result := Join ( result , array [ i ] ) ;
51859: LD_ADDR_VAR 0 5
51863: PUSH
51864: LD_VAR 0 5
51868: PPUSH
51869: LD_VAR 0 1
51873: PUSH
51874: LD_VAR 0 6
51878: ARRAY
51879: PPUSH
51880: CALL 47071 0 2
51884: ST_TO_ADDR
// end ;
51885: GO 51792
51887: POP
51888: POP
// end ;
51889: LD_VAR 0 5
51893: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51894: LD_INT 0
51896: PPUSH
// if not vehicles or not parkingPoint then
51897: LD_VAR 0 1
51901: NOT
51902: PUSH
51903: LD_VAR 0 2
51907: NOT
51908: OR
51909: IFFALSE 51913
// exit ;
51911: GO 52011
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51913: LD_ADDR_VAR 0 1
51917: PUSH
51918: LD_VAR 0 1
51922: PPUSH
51923: LD_INT 50
51925: PUSH
51926: EMPTY
51927: LIST
51928: PUSH
51929: LD_INT 3
51931: PUSH
51932: LD_INT 92
51934: PUSH
51935: LD_VAR 0 2
51939: PUSH
51940: LD_INT 1
51942: ARRAY
51943: PUSH
51944: LD_VAR 0 2
51948: PUSH
51949: LD_INT 2
51951: ARRAY
51952: PUSH
51953: LD_INT 8
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PPUSH
51970: CALL_OW 72
51974: ST_TO_ADDR
// if not vehicles then
51975: LD_VAR 0 1
51979: NOT
51980: IFFALSE 51984
// exit ;
51982: GO 52011
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51984: LD_VAR 0 1
51988: PPUSH
51989: LD_VAR 0 2
51993: PUSH
51994: LD_INT 1
51996: ARRAY
51997: PPUSH
51998: LD_VAR 0 2
52002: PUSH
52003: LD_INT 2
52005: ARRAY
52006: PPUSH
52007: CALL_OW 111
// end ;
52011: LD_VAR 0 3
52015: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52016: LD_INT 0
52018: PPUSH
52019: PPUSH
52020: PPUSH
// if not side or not area then
52021: LD_VAR 0 1
52025: NOT
52026: PUSH
52027: LD_VAR 0 2
52031: NOT
52032: OR
52033: IFFALSE 52037
// exit ;
52035: GO 52156
// tmp := AreaToList ( area , 0 ) ;
52037: LD_ADDR_VAR 0 5
52041: PUSH
52042: LD_VAR 0 2
52046: PPUSH
52047: LD_INT 0
52049: PPUSH
52050: CALL_OW 517
52054: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52055: LD_ADDR_VAR 0 4
52059: PUSH
52060: DOUBLE
52061: LD_INT 1
52063: DEC
52064: ST_TO_ADDR
52065: LD_VAR 0 5
52069: PUSH
52070: LD_INT 1
52072: ARRAY
52073: PUSH
52074: FOR_TO
52075: IFFALSE 52154
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52077: LD_VAR 0 5
52081: PUSH
52082: LD_INT 1
52084: ARRAY
52085: PUSH
52086: LD_VAR 0 4
52090: ARRAY
52091: PPUSH
52092: LD_VAR 0 5
52096: PUSH
52097: LD_INT 2
52099: ARRAY
52100: PUSH
52101: LD_VAR 0 4
52105: ARRAY
52106: PPUSH
52107: CALL_OW 351
52111: IFFALSE 52152
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52113: LD_VAR 0 5
52117: PUSH
52118: LD_INT 1
52120: ARRAY
52121: PUSH
52122: LD_VAR 0 4
52126: ARRAY
52127: PPUSH
52128: LD_VAR 0 5
52132: PUSH
52133: LD_INT 2
52135: ARRAY
52136: PUSH
52137: LD_VAR 0 4
52141: ARRAY
52142: PPUSH
52143: LD_VAR 0 1
52147: PPUSH
52148: CALL_OW 244
// end ;
52152: GO 52074
52154: POP
52155: POP
// end ; end_of_file
52156: LD_VAR 0 3
52160: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52161: LD_VAR 0 1
52165: PUSH
52166: LD_INT 200
52168: DOUBLE
52169: GREATEREQUAL
52170: IFFALSE 52178
52172: LD_INT 299
52174: DOUBLE
52175: LESSEQUAL
52176: IFTRUE 52180
52178: GO 52212
52180: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52181: LD_VAR 0 1
52185: PPUSH
52186: LD_VAR 0 2
52190: PPUSH
52191: LD_VAR 0 3
52195: PPUSH
52196: LD_VAR 0 4
52200: PPUSH
52201: LD_VAR 0 5
52205: PPUSH
52206: CALL 52959 0 5
52210: GO 52289
52212: LD_INT 300
52214: DOUBLE
52215: GREATEREQUAL
52216: IFFALSE 52224
52218: LD_INT 399
52220: DOUBLE
52221: LESSEQUAL
52222: IFTRUE 52226
52224: GO 52288
52226: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52227: LD_VAR 0 1
52231: PPUSH
52232: LD_VAR 0 2
52236: PPUSH
52237: LD_VAR 0 3
52241: PPUSH
52242: LD_VAR 0 4
52246: PPUSH
52247: LD_VAR 0 5
52251: PPUSH
52252: LD_VAR 0 6
52256: PPUSH
52257: LD_VAR 0 7
52261: PPUSH
52262: LD_VAR 0 8
52266: PPUSH
52267: LD_VAR 0 9
52271: PPUSH
52272: LD_VAR 0 10
52276: PPUSH
52277: LD_VAR 0 11
52281: PPUSH
52282: CALL 59334 0 11
52286: GO 52289
52288: POP
// end ;
52289: PPOPN 11
52291: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52292: LD_VAR 0 1
52296: PPUSH
52297: LD_VAR 0 2
52301: PPUSH
52302: LD_VAR 0 3
52306: PPUSH
52307: LD_VAR 0 4
52311: PPUSH
52312: LD_VAR 0 5
52316: PPUSH
52317: CALL 52374 0 5
// end ; end_of_file
52321: PPOPN 5
52323: END
// export function SOS_UnitDestroyed ( un ) ; begin
52324: LD_INT 0
52326: PPUSH
// ComRadiation ( un ) ;
52327: LD_VAR 0 1
52331: PPUSH
52332: CALL 53363 0 1
// end ;
52336: LD_VAR 0 2
52340: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52341: LD_INT 0
52343: PPUSH
// ComRadiation ( un ) ;
52344: LD_VAR 0 1
52348: PPUSH
52349: CALL 53363 0 1
// end ;
52353: LD_VAR 0 2
52357: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52358: LD_INT 0
52360: PPUSH
// end ;
52361: LD_VAR 0 4
52365: RET
// export function SOS_Command ( cmd ) ; begin
52366: LD_INT 0
52368: PPUSH
// end ;
52369: LD_VAR 0 2
52373: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
52374: LD_INT 0
52376: PPUSH
// end ;
52377: LD_VAR 0 6
52381: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
52382: LD_INT 0
52384: PPUSH
52385: PPUSH
52386: PPUSH
52387: PPUSH
// if not vehicle or not factory then
52388: LD_VAR 0 1
52392: NOT
52393: PUSH
52394: LD_VAR 0 2
52398: NOT
52399: OR
52400: IFFALSE 52404
// exit ;
52402: GO 52954
// if not factoryWaypoints then
52404: LD_EXP 55
52408: NOT
52409: IFFALSE 52413
// exit ;
52411: GO 52954
// for i := 1 to Count ( factoryWaypoints ) do
52413: LD_ADDR_VAR 0 4
52417: PUSH
52418: DOUBLE
52419: LD_INT 1
52421: DEC
52422: ST_TO_ADDR
52423: LD_EXP 55
52427: PPUSH
52428: CALL 11462 0 1
52432: PUSH
52433: FOR_TO
52434: IFFALSE 52952
// if factoryWaypoints [ i ] [ 2 ] = factory then
52436: LD_EXP 55
52440: PUSH
52441: LD_VAR 0 4
52445: ARRAY
52446: PUSH
52447: LD_INT 2
52449: ARRAY
52450: PUSH
52451: LD_VAR 0 2
52455: EQUAL
52456: IFFALSE 52950
// begin if GetControl ( vehicle ) = control_manual then
52458: LD_VAR 0 1
52462: PPUSH
52463: CALL_OW 263
52467: PUSH
52468: LD_INT 1
52470: EQUAL
52471: IFFALSE 52833
// begin driver := IsDrivenBy ( vehicle ) ;
52473: LD_ADDR_VAR 0 5
52477: PUSH
52478: LD_VAR 0 1
52482: PPUSH
52483: CALL_OW 311
52487: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
52488: LD_VAR 0 5
52492: PUSH
52493: LD_EXP 56
52497: IN
52498: PUSH
52499: LD_VAR 0 1
52503: PUSH
52504: LD_EXP 56
52508: IN
52509: OR
52510: IFFALSE 52516
// exit ;
52512: POP
52513: POP
52514: GO 52954
// if not HasTask ( driver ) then
52516: LD_VAR 0 5
52520: PPUSH
52521: CALL_OW 314
52525: NOT
52526: IFFALSE 52831
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
52528: LD_ADDR_EXP 56
52532: PUSH
52533: LD_EXP 56
52537: PPUSH
52538: LD_VAR 0 5
52542: PPUSH
52543: CALL 47071 0 2
52547: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
52548: LD_ADDR_EXP 56
52552: PUSH
52553: LD_EXP 56
52557: PPUSH
52558: LD_VAR 0 1
52562: PPUSH
52563: CALL 47071 0 2
52567: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52568: LD_ADDR_VAR 0 6
52572: PUSH
52573: LD_EXP 55
52577: PUSH
52578: LD_VAR 0 4
52582: ARRAY
52583: PUSH
52584: LD_INT 3
52586: ARRAY
52587: PPUSH
52588: LD_EXP 55
52592: PUSH
52593: LD_VAR 0 4
52597: ARRAY
52598: PUSH
52599: LD_INT 4
52601: ARRAY
52602: PPUSH
52603: CALL_OW 428
52607: ST_TO_ADDR
// if hex then
52608: LD_VAR 0 6
52612: IFFALSE 52630
// ComMoveUnit ( driver , hex ) else
52614: LD_VAR 0 5
52618: PPUSH
52619: LD_VAR 0 6
52623: PPUSH
52624: CALL_OW 112
52628: GO 52714
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
52630: LD_VAR 0 1
52634: PPUSH
52635: LD_EXP 55
52639: PUSH
52640: LD_VAR 0 4
52644: ARRAY
52645: PUSH
52646: LD_INT 3
52648: ARRAY
52649: PPUSH
52650: LD_EXP 55
52654: PUSH
52655: LD_VAR 0 4
52659: ARRAY
52660: PUSH
52661: LD_INT 4
52663: ARRAY
52664: PPUSH
52665: CALL_OW 297
52669: PUSH
52670: LD_INT 0
52672: GREATER
52673: IFFALSE 52714
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52675: LD_VAR 0 5
52679: PPUSH
52680: LD_EXP 55
52684: PUSH
52685: LD_VAR 0 4
52689: ARRAY
52690: PUSH
52691: LD_INT 3
52693: ARRAY
52694: PPUSH
52695: LD_EXP 55
52699: PUSH
52700: LD_VAR 0 4
52704: ARRAY
52705: PUSH
52706: LD_INT 4
52708: ARRAY
52709: PPUSH
52710: CALL_OW 111
// AddComExitVehicle ( driver ) ;
52714: LD_VAR 0 5
52718: PPUSH
52719: CALL_OW 181
// if Multiplayer then
52723: LD_OWVAR 4
52727: IFFALSE 52776
// begin repeat wait ( 10 ) ;
52729: LD_INT 10
52731: PPUSH
52732: CALL_OW 67
// until not IsInUnit ( driver ) ;
52736: LD_VAR 0 5
52740: PPUSH
52741: CALL_OW 310
52745: NOT
52746: IFFALSE 52729
// if not HasTask ( driver ) then
52748: LD_VAR 0 5
52752: PPUSH
52753: CALL_OW 314
52757: NOT
52758: IFFALSE 52774
// ComEnterUnit ( driver , factory ) ;
52760: LD_VAR 0 5
52764: PPUSH
52765: LD_VAR 0 2
52769: PPUSH
52770: CALL_OW 120
// end else
52774: GO 52790
// AddComEnterUnit ( driver , factory ) ;
52776: LD_VAR 0 5
52780: PPUSH
52781: LD_VAR 0 2
52785: PPUSH
52786: CALL_OW 180
// wait ( 0 0$1 ) ;
52790: LD_INT 35
52792: PPUSH
52793: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
52797: LD_ADDR_EXP 56
52801: PUSH
52802: LD_EXP 56
52806: PUSH
52807: LD_VAR 0 5
52811: DIFF
52812: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
52813: LD_ADDR_EXP 56
52817: PUSH
52818: LD_EXP 56
52822: PUSH
52823: LD_VAR 0 1
52827: DIFF
52828: ST_TO_ADDR
// break ;
52829: GO 52952
// end ; end else
52831: GO 52950
// if GetControl ( vehicle ) = control_remote then
52833: LD_VAR 0 1
52837: PPUSH
52838: CALL_OW 263
52842: PUSH
52843: LD_INT 2
52845: EQUAL
52846: IFFALSE 52909
// begin wait ( 0 0$2 ) ;
52848: LD_INT 70
52850: PPUSH
52851: CALL_OW 67
// if Connect ( vehicle ) then
52855: LD_VAR 0 1
52859: PPUSH
52860: CALL 17668 0 1
52864: IFFALSE 52905
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52866: LD_VAR 0 1
52870: PPUSH
52871: LD_EXP 55
52875: PUSH
52876: LD_VAR 0 4
52880: ARRAY
52881: PUSH
52882: LD_INT 3
52884: ARRAY
52885: PPUSH
52886: LD_EXP 55
52890: PUSH
52891: LD_VAR 0 4
52895: ARRAY
52896: PUSH
52897: LD_INT 4
52899: ARRAY
52900: PPUSH
52901: CALL_OW 111
// break ;
52905: GO 52952
// end else
52907: GO 52950
// begin ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
52909: LD_VAR 0 1
52913: PPUSH
52914: LD_EXP 55
52918: PUSH
52919: LD_VAR 0 4
52923: ARRAY
52924: PUSH
52925: LD_INT 3
52927: ARRAY
52928: PPUSH
52929: LD_EXP 55
52933: PUSH
52934: LD_VAR 0 4
52938: ARRAY
52939: PUSH
52940: LD_INT 4
52942: ARRAY
52943: PPUSH
52944: CALL_OW 111
// break ;
52948: GO 52952
// end ; end ;
52950: GO 52433
52952: POP
52953: POP
// end ;
52954: LD_VAR 0 3
52958: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
52959: LD_INT 0
52961: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
52962: LD_VAR 0 1
52966: PUSH
52967: LD_INT 250
52969: EQUAL
52970: PUSH
52971: LD_VAR 0 2
52975: PPUSH
52976: CALL_OW 264
52980: PUSH
52981: LD_INT 81
52983: EQUAL
52984: AND
52985: IFFALSE 53006
// MinerPlaceMine ( unit , x , y ) ;
52987: LD_VAR 0 2
52991: PPUSH
52992: LD_VAR 0 4
52996: PPUSH
52997: LD_VAR 0 5
53001: PPUSH
53002: CALL 56098 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53006: LD_VAR 0 1
53010: PUSH
53011: LD_INT 251
53013: EQUAL
53014: PUSH
53015: LD_VAR 0 2
53019: PPUSH
53020: CALL_OW 264
53024: PUSH
53025: LD_INT 81
53027: EQUAL
53028: AND
53029: IFFALSE 53050
// MinerDetonateMine ( unit , x , y ) ;
53031: LD_VAR 0 2
53035: PPUSH
53036: LD_VAR 0 4
53040: PPUSH
53041: LD_VAR 0 5
53045: PPUSH
53046: CALL 56373 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53050: LD_VAR 0 1
53054: PUSH
53055: LD_INT 252
53057: EQUAL
53058: PUSH
53059: LD_VAR 0 2
53063: PPUSH
53064: CALL_OW 264
53068: PUSH
53069: LD_INT 81
53071: EQUAL
53072: AND
53073: IFFALSE 53094
// MinerCreateMinefield ( unit , x , y ) ;
53075: LD_VAR 0 2
53079: PPUSH
53080: LD_VAR 0 4
53084: PPUSH
53085: LD_VAR 0 5
53089: PPUSH
53090: CALL 56790 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53094: LD_VAR 0 1
53098: PUSH
53099: LD_INT 253
53101: EQUAL
53102: PUSH
53103: LD_VAR 0 2
53107: PPUSH
53108: CALL_OW 257
53112: PUSH
53113: LD_INT 5
53115: EQUAL
53116: AND
53117: IFFALSE 53138
// ComBinocular ( unit , x , y ) ;
53119: LD_VAR 0 2
53123: PPUSH
53124: LD_VAR 0 4
53128: PPUSH
53129: LD_VAR 0 5
53133: PPUSH
53134: CALL 57159 0 3
// if selectedUnit then
53138: LD_VAR 0 3
53142: IFFALSE 53198
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53144: LD_VAR 0 1
53148: PUSH
53149: LD_INT 254
53151: EQUAL
53152: PUSH
53153: LD_VAR 0 2
53157: PPUSH
53158: CALL_OW 264
53162: PUSH
53163: LD_INT 99
53165: EQUAL
53166: AND
53167: PUSH
53168: LD_VAR 0 3
53172: PPUSH
53173: CALL_OW 263
53177: PUSH
53178: LD_INT 3
53180: EQUAL
53181: AND
53182: IFFALSE 53198
// HackDestroyVehicle ( unit , selectedUnit ) ;
53184: LD_VAR 0 2
53188: PPUSH
53189: LD_VAR 0 3
53193: PPUSH
53194: CALL 55462 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53198: LD_VAR 0 1
53202: PUSH
53203: LD_INT 255
53205: EQUAL
53206: PUSH
53207: LD_VAR 0 2
53211: PPUSH
53212: CALL_OW 264
53216: PUSH
53217: LD_INT 14
53219: PUSH
53220: LD_INT 53
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: IN
53227: AND
53228: PUSH
53229: LD_VAR 0 4
53233: PPUSH
53234: LD_VAR 0 5
53238: PPUSH
53239: CALL_OW 488
53243: AND
53244: IFFALSE 53268
// CutTreeXYR ( unit , x , y , 12 ) ;
53246: LD_VAR 0 2
53250: PPUSH
53251: LD_VAR 0 4
53255: PPUSH
53256: LD_VAR 0 5
53260: PPUSH
53261: LD_INT 12
53263: PPUSH
53264: CALL 53459 0 4
// if cmd = 256 then
53268: LD_VAR 0 1
53272: PUSH
53273: LD_INT 256
53275: EQUAL
53276: IFFALSE 53297
// SetFactoryWaypoint ( unit , x , y ) ;
53278: LD_VAR 0 2
53282: PPUSH
53283: LD_VAR 0 4
53287: PPUSH
53288: LD_VAR 0 5
53292: PPUSH
53293: CALL 59342 0 3
// if cmd = 257 then
53297: LD_VAR 0 1
53301: PUSH
53302: LD_INT 257
53304: EQUAL
53305: IFFALSE 53326
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53307: LD_VAR 0 2
53311: PPUSH
53312: LD_VAR 0 4
53316: PPUSH
53317: LD_VAR 0 5
53321: PPUSH
53322: CALL 59832 0 3
// if cmd = 258 then
53326: LD_VAR 0 1
53330: PUSH
53331: LD_INT 258
53333: EQUAL
53334: IFFALSE 53358
// BurnTreeXYR ( unit , x , y , 8 ) ;
53336: LD_VAR 0 2
53340: PPUSH
53341: LD_VAR 0 4
53345: PPUSH
53346: LD_VAR 0 5
53350: PPUSH
53351: LD_INT 8
53353: PPUSH
53354: CALL 53853 0 4
// end ;
53358: LD_VAR 0 6
53362: RET
// export function ComRadiation ( un ) ; var eff ; begin
53363: LD_INT 0
53365: PPUSH
53366: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
53367: LD_VAR 0 1
53371: PPUSH
53372: CALL_OW 264
53376: PUSH
53377: LD_INT 91
53379: NONEQUAL
53380: IFFALSE 53384
// exit ;
53382: GO 53454
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
53384: LD_INT 68
53386: PPUSH
53387: LD_VAR 0 1
53391: PPUSH
53392: CALL_OW 255
53396: PPUSH
53397: CALL_OW 321
53401: PUSH
53402: LD_INT 2
53404: EQUAL
53405: IFFALSE 53417
// eff := 50 else
53407: LD_ADDR_VAR 0 3
53411: PUSH
53412: LD_INT 50
53414: ST_TO_ADDR
53415: GO 53425
// eff := 25 ;
53417: LD_ADDR_VAR 0 3
53421: PUSH
53422: LD_INT 25
53424: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
53425: LD_VAR 0 1
53429: PPUSH
53430: CALL_OW 250
53434: PPUSH
53435: LD_VAR 0 1
53439: PPUSH
53440: CALL_OW 251
53444: PPUSH
53445: LD_VAR 0 3
53449: PPUSH
53450: CALL_OW 495
// end ;
53454: LD_VAR 0 2
53458: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
53459: LD_INT 0
53461: PPUSH
53462: PPUSH
53463: PPUSH
53464: PPUSH
53465: PPUSH
53466: PPUSH
53467: PPUSH
53468: PPUSH
53469: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
53470: LD_VAR 0 1
53474: PPUSH
53475: CALL_OW 302
53479: NOT
53480: PUSH
53481: LD_VAR 0 2
53485: PPUSH
53486: LD_VAR 0 3
53490: PPUSH
53491: CALL_OW 488
53495: NOT
53496: OR
53497: PUSH
53498: LD_VAR 0 4
53502: NOT
53503: OR
53504: IFFALSE 53508
// exit ;
53506: GO 53848
// list := [ ] ;
53508: LD_ADDR_VAR 0 13
53512: PUSH
53513: EMPTY
53514: ST_TO_ADDR
// if x - r < 0 then
53515: LD_VAR 0 2
53519: PUSH
53520: LD_VAR 0 4
53524: MINUS
53525: PUSH
53526: LD_INT 0
53528: LESS
53529: IFFALSE 53541
// min_x := 0 else
53531: LD_ADDR_VAR 0 7
53535: PUSH
53536: LD_INT 0
53538: ST_TO_ADDR
53539: GO 53557
// min_x := x - r ;
53541: LD_ADDR_VAR 0 7
53545: PUSH
53546: LD_VAR 0 2
53550: PUSH
53551: LD_VAR 0 4
53555: MINUS
53556: ST_TO_ADDR
// if y - r < 0 then
53557: LD_VAR 0 3
53561: PUSH
53562: LD_VAR 0 4
53566: MINUS
53567: PUSH
53568: LD_INT 0
53570: LESS
53571: IFFALSE 53583
// min_y := 0 else
53573: LD_ADDR_VAR 0 8
53577: PUSH
53578: LD_INT 0
53580: ST_TO_ADDR
53581: GO 53599
// min_y := y - r ;
53583: LD_ADDR_VAR 0 8
53587: PUSH
53588: LD_VAR 0 3
53592: PUSH
53593: LD_VAR 0 4
53597: MINUS
53598: ST_TO_ADDR
// max_x := x + r ;
53599: LD_ADDR_VAR 0 9
53603: PUSH
53604: LD_VAR 0 2
53608: PUSH
53609: LD_VAR 0 4
53613: PLUS
53614: ST_TO_ADDR
// max_y := y + r ;
53615: LD_ADDR_VAR 0 10
53619: PUSH
53620: LD_VAR 0 3
53624: PUSH
53625: LD_VAR 0 4
53629: PLUS
53630: ST_TO_ADDR
// for _x = min_x to max_x do
53631: LD_ADDR_VAR 0 11
53635: PUSH
53636: DOUBLE
53637: LD_VAR 0 7
53641: DEC
53642: ST_TO_ADDR
53643: LD_VAR 0 9
53647: PUSH
53648: FOR_TO
53649: IFFALSE 53766
// for _y = min_y to max_y do
53651: LD_ADDR_VAR 0 12
53655: PUSH
53656: DOUBLE
53657: LD_VAR 0 8
53661: DEC
53662: ST_TO_ADDR
53663: LD_VAR 0 10
53667: PUSH
53668: FOR_TO
53669: IFFALSE 53762
// begin if not ValidHex ( _x , _y ) then
53671: LD_VAR 0 11
53675: PPUSH
53676: LD_VAR 0 12
53680: PPUSH
53681: CALL_OW 488
53685: NOT
53686: IFFALSE 53690
// continue ;
53688: GO 53668
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
53690: LD_VAR 0 11
53694: PPUSH
53695: LD_VAR 0 12
53699: PPUSH
53700: CALL_OW 351
53704: PUSH
53705: LD_VAR 0 11
53709: PPUSH
53710: LD_VAR 0 12
53714: PPUSH
53715: CALL_OW 554
53719: AND
53720: IFFALSE 53760
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
53722: LD_ADDR_VAR 0 13
53726: PUSH
53727: LD_VAR 0 13
53731: PPUSH
53732: LD_VAR 0 13
53736: PUSH
53737: LD_INT 1
53739: PLUS
53740: PPUSH
53741: LD_VAR 0 11
53745: PUSH
53746: LD_VAR 0 12
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PPUSH
53755: CALL_OW 2
53759: ST_TO_ADDR
// end ;
53760: GO 53668
53762: POP
53763: POP
53764: GO 53648
53766: POP
53767: POP
// if not list then
53768: LD_VAR 0 13
53772: NOT
53773: IFFALSE 53777
// exit ;
53775: GO 53848
// for i in list do
53777: LD_ADDR_VAR 0 6
53781: PUSH
53782: LD_VAR 0 13
53786: PUSH
53787: FOR_IN
53788: IFFALSE 53846
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
53790: LD_VAR 0 1
53794: PPUSH
53795: LD_STRING M
53797: PUSH
53798: LD_VAR 0 6
53802: PUSH
53803: LD_INT 1
53805: ARRAY
53806: PUSH
53807: LD_VAR 0 6
53811: PUSH
53812: LD_INT 2
53814: ARRAY
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: PUSH
53837: EMPTY
53838: LIST
53839: PPUSH
53840: CALL_OW 447
53844: GO 53787
53846: POP
53847: POP
// end ;
53848: LD_VAR 0 5
53852: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
53853: LD_INT 0
53855: PPUSH
53856: PPUSH
53857: PPUSH
53858: PPUSH
53859: PPUSH
53860: PPUSH
53861: PPUSH
53862: PPUSH
53863: PPUSH
53864: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
53865: LD_VAR 0 1
53869: PPUSH
53870: CALL_OW 302
53874: NOT
53875: PUSH
53876: LD_VAR 0 2
53880: PPUSH
53881: LD_VAR 0 3
53885: PPUSH
53886: CALL_OW 488
53890: NOT
53891: OR
53892: PUSH
53893: LD_VAR 0 4
53897: NOT
53898: OR
53899: IFFALSE 53903
// exit ;
53901: GO 54416
// list := [ ] ;
53903: LD_ADDR_VAR 0 13
53907: PUSH
53908: EMPTY
53909: ST_TO_ADDR
// if x - r < 0 then
53910: LD_VAR 0 2
53914: PUSH
53915: LD_VAR 0 4
53919: MINUS
53920: PUSH
53921: LD_INT 0
53923: LESS
53924: IFFALSE 53936
// min_x := 0 else
53926: LD_ADDR_VAR 0 7
53930: PUSH
53931: LD_INT 0
53933: ST_TO_ADDR
53934: GO 53952
// min_x := x - r ;
53936: LD_ADDR_VAR 0 7
53940: PUSH
53941: LD_VAR 0 2
53945: PUSH
53946: LD_VAR 0 4
53950: MINUS
53951: ST_TO_ADDR
// if y - r < 0 then
53952: LD_VAR 0 3
53956: PUSH
53957: LD_VAR 0 4
53961: MINUS
53962: PUSH
53963: LD_INT 0
53965: LESS
53966: IFFALSE 53978
// min_y := 0 else
53968: LD_ADDR_VAR 0 8
53972: PUSH
53973: LD_INT 0
53975: ST_TO_ADDR
53976: GO 53994
// min_y := y - r ;
53978: LD_ADDR_VAR 0 8
53982: PUSH
53983: LD_VAR 0 3
53987: PUSH
53988: LD_VAR 0 4
53992: MINUS
53993: ST_TO_ADDR
// max_x := x + r ;
53994: LD_ADDR_VAR 0 9
53998: PUSH
53999: LD_VAR 0 2
54003: PUSH
54004: LD_VAR 0 4
54008: PLUS
54009: ST_TO_ADDR
// max_y := y + r ;
54010: LD_ADDR_VAR 0 10
54014: PUSH
54015: LD_VAR 0 3
54019: PUSH
54020: LD_VAR 0 4
54024: PLUS
54025: ST_TO_ADDR
// for _x = min_x to max_x do
54026: LD_ADDR_VAR 0 11
54030: PUSH
54031: DOUBLE
54032: LD_VAR 0 7
54036: DEC
54037: ST_TO_ADDR
54038: LD_VAR 0 9
54042: PUSH
54043: FOR_TO
54044: IFFALSE 54161
// for _y = min_y to max_y do
54046: LD_ADDR_VAR 0 12
54050: PUSH
54051: DOUBLE
54052: LD_VAR 0 8
54056: DEC
54057: ST_TO_ADDR
54058: LD_VAR 0 10
54062: PUSH
54063: FOR_TO
54064: IFFALSE 54157
// begin if not ValidHex ( _x , _y ) then
54066: LD_VAR 0 11
54070: PPUSH
54071: LD_VAR 0 12
54075: PPUSH
54076: CALL_OW 488
54080: NOT
54081: IFFALSE 54085
// continue ;
54083: GO 54063
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54085: LD_VAR 0 11
54089: PPUSH
54090: LD_VAR 0 12
54094: PPUSH
54095: CALL_OW 351
54099: PUSH
54100: LD_VAR 0 11
54104: PPUSH
54105: LD_VAR 0 12
54109: PPUSH
54110: CALL_OW 554
54114: AND
54115: IFFALSE 54155
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54117: LD_ADDR_VAR 0 13
54121: PUSH
54122: LD_VAR 0 13
54126: PPUSH
54127: LD_VAR 0 13
54131: PUSH
54132: LD_INT 1
54134: PLUS
54135: PPUSH
54136: LD_VAR 0 11
54140: PUSH
54141: LD_VAR 0 12
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PPUSH
54150: CALL_OW 2
54154: ST_TO_ADDR
// end ;
54155: GO 54063
54157: POP
54158: POP
54159: GO 54043
54161: POP
54162: POP
// if not list then
54163: LD_VAR 0 13
54167: NOT
54168: IFFALSE 54172
// exit ;
54170: GO 54416
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
54172: LD_ADDR_VAR 0 13
54176: PUSH
54177: LD_VAR 0 1
54181: PPUSH
54182: LD_VAR 0 13
54186: PPUSH
54187: LD_INT 1
54189: PPUSH
54190: LD_INT 1
54192: PPUSH
54193: CALL 14810 0 4
54197: ST_TO_ADDR
// ComStop ( flame ) ;
54198: LD_VAR 0 1
54202: PPUSH
54203: CALL_OW 141
// for i in list do
54207: LD_ADDR_VAR 0 6
54211: PUSH
54212: LD_VAR 0 13
54216: PUSH
54217: FOR_IN
54218: IFFALSE 54249
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
54220: LD_VAR 0 1
54224: PPUSH
54225: LD_VAR 0 6
54229: PUSH
54230: LD_INT 1
54232: ARRAY
54233: PPUSH
54234: LD_VAR 0 6
54238: PUSH
54239: LD_INT 2
54241: ARRAY
54242: PPUSH
54243: CALL_OW 176
54247: GO 54217
54249: POP
54250: POP
// repeat wait ( 0 0$1 ) ;
54251: LD_INT 35
54253: PPUSH
54254: CALL_OW 67
// task := GetTaskList ( flame ) ;
54258: LD_ADDR_VAR 0 14
54262: PUSH
54263: LD_VAR 0 1
54267: PPUSH
54268: CALL_OW 437
54272: ST_TO_ADDR
// if not task then
54273: LD_VAR 0 14
54277: NOT
54278: IFFALSE 54282
// exit ;
54280: GO 54416
// if task [ 1 ] [ 1 ] <> | then
54282: LD_VAR 0 14
54286: PUSH
54287: LD_INT 1
54289: ARRAY
54290: PUSH
54291: LD_INT 1
54293: ARRAY
54294: PUSH
54295: LD_STRING |
54297: NONEQUAL
54298: IFFALSE 54302
// exit ;
54300: GO 54416
// _x := task [ 1 ] [ 2 ] ;
54302: LD_ADDR_VAR 0 11
54306: PUSH
54307: LD_VAR 0 14
54311: PUSH
54312: LD_INT 1
54314: ARRAY
54315: PUSH
54316: LD_INT 2
54318: ARRAY
54319: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54320: LD_ADDR_VAR 0 12
54324: PUSH
54325: LD_VAR 0 14
54329: PUSH
54330: LD_INT 1
54332: ARRAY
54333: PUSH
54334: LD_INT 3
54336: ARRAY
54337: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54338: LD_VAR 0 11
54342: PPUSH
54343: LD_VAR 0 12
54347: PPUSH
54348: CALL_OW 351
54352: NOT
54353: PUSH
54354: LD_VAR 0 11
54358: PPUSH
54359: LD_VAR 0 12
54363: PPUSH
54364: CALL_OW 554
54368: NOT
54369: OR
54370: IFFALSE 54404
// begin task := Delete ( task , 1 ) ;
54372: LD_ADDR_VAR 0 14
54376: PUSH
54377: LD_VAR 0 14
54381: PPUSH
54382: LD_INT 1
54384: PPUSH
54385: CALL_OW 3
54389: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
54390: LD_VAR 0 1
54394: PPUSH
54395: LD_VAR 0 14
54399: PPUSH
54400: CALL_OW 446
// end ; until not HasTask ( flame ) ;
54404: LD_VAR 0 1
54408: PPUSH
54409: CALL_OW 314
54413: NOT
54414: IFFALSE 54251
// end ;
54416: LD_VAR 0 5
54420: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
54421: LD_EXP 44
54425: NOT
54426: IFFALSE 54476
54428: GO 54430
54430: DISABLE
// begin initHack := true ;
54431: LD_ADDR_EXP 44
54435: PUSH
54436: LD_INT 1
54438: ST_TO_ADDR
// hackTanks := [ ] ;
54439: LD_ADDR_EXP 45
54443: PUSH
54444: EMPTY
54445: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
54446: LD_ADDR_EXP 46
54450: PUSH
54451: EMPTY
54452: ST_TO_ADDR
// hackLimit := 3 ;
54453: LD_ADDR_EXP 47
54457: PUSH
54458: LD_INT 3
54460: ST_TO_ADDR
// hackDist := 12 ;
54461: LD_ADDR_EXP 48
54465: PUSH
54466: LD_INT 12
54468: ST_TO_ADDR
// hackCounter := [ ] ;
54469: LD_ADDR_EXP 49
54473: PUSH
54474: EMPTY
54475: ST_TO_ADDR
// end ;
54476: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
54477: LD_EXP 44
54481: PUSH
54482: LD_INT 34
54484: PUSH
54485: LD_INT 99
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PPUSH
54492: CALL_OW 69
54496: AND
54497: IFFALSE 54750
54499: GO 54501
54501: DISABLE
54502: LD_INT 0
54504: PPUSH
54505: PPUSH
// begin enable ;
54506: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
54507: LD_ADDR_VAR 0 1
54511: PUSH
54512: LD_INT 34
54514: PUSH
54515: LD_INT 99
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PPUSH
54522: CALL_OW 69
54526: PUSH
54527: FOR_IN
54528: IFFALSE 54748
// begin if not i in hackTanks then
54530: LD_VAR 0 1
54534: PUSH
54535: LD_EXP 45
54539: IN
54540: NOT
54541: IFFALSE 54624
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
54543: LD_ADDR_EXP 45
54547: PUSH
54548: LD_EXP 45
54552: PPUSH
54553: LD_EXP 45
54557: PUSH
54558: LD_INT 1
54560: PLUS
54561: PPUSH
54562: LD_VAR 0 1
54566: PPUSH
54567: CALL_OW 1
54571: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
54572: LD_ADDR_EXP 46
54576: PUSH
54577: LD_EXP 46
54581: PPUSH
54582: LD_EXP 46
54586: PUSH
54587: LD_INT 1
54589: PLUS
54590: PPUSH
54591: EMPTY
54592: PPUSH
54593: CALL_OW 1
54597: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
54598: LD_ADDR_EXP 49
54602: PUSH
54603: LD_EXP 49
54607: PPUSH
54608: LD_EXP 49
54612: PUSH
54613: LD_INT 1
54615: PLUS
54616: PPUSH
54617: EMPTY
54618: PPUSH
54619: CALL_OW 1
54623: ST_TO_ADDR
// end ; if not IsOk ( i ) then
54624: LD_VAR 0 1
54628: PPUSH
54629: CALL_OW 302
54633: NOT
54634: IFFALSE 54647
// begin HackUnlinkAll ( i ) ;
54636: LD_VAR 0 1
54640: PPUSH
54641: CALL 54753 0 1
// continue ;
54645: GO 54527
// end ; HackCheckCapturedStatus ( i ) ;
54647: LD_VAR 0 1
54651: PPUSH
54652: CALL 55196 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
54656: LD_ADDR_VAR 0 2
54660: PUSH
54661: LD_INT 81
54663: PUSH
54664: LD_VAR 0 1
54668: PPUSH
54669: CALL_OW 255
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 33
54680: PUSH
54681: LD_INT 3
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 91
54690: PUSH
54691: LD_VAR 0 1
54695: PUSH
54696: LD_EXP 48
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 50
54708: PUSH
54709: EMPTY
54710: LIST
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: PPUSH
54718: CALL_OW 69
54722: ST_TO_ADDR
// if not tmp then
54723: LD_VAR 0 2
54727: NOT
54728: IFFALSE 54732
// continue ;
54730: GO 54527
// HackLink ( i , tmp ) ;
54732: LD_VAR 0 1
54736: PPUSH
54737: LD_VAR 0 2
54741: PPUSH
54742: CALL 54889 0 2
// end ;
54746: GO 54527
54748: POP
54749: POP
// end ;
54750: PPOPN 2
54752: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
54753: LD_INT 0
54755: PPUSH
54756: PPUSH
54757: PPUSH
// if not hack in hackTanks then
54758: LD_VAR 0 1
54762: PUSH
54763: LD_EXP 45
54767: IN
54768: NOT
54769: IFFALSE 54773
// exit ;
54771: GO 54884
// index := GetElementIndex ( hackTanks , hack ) ;
54773: LD_ADDR_VAR 0 4
54777: PUSH
54778: LD_EXP 45
54782: PPUSH
54783: LD_VAR 0 1
54787: PPUSH
54788: CALL 14107 0 2
54792: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
54793: LD_EXP 46
54797: PUSH
54798: LD_VAR 0 4
54802: ARRAY
54803: IFFALSE 54884
// begin for i in hackTanksCaptured [ index ] do
54805: LD_ADDR_VAR 0 3
54809: PUSH
54810: LD_EXP 46
54814: PUSH
54815: LD_VAR 0 4
54819: ARRAY
54820: PUSH
54821: FOR_IN
54822: IFFALSE 54848
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
54824: LD_VAR 0 3
54828: PUSH
54829: LD_INT 1
54831: ARRAY
54832: PPUSH
54833: LD_VAR 0 3
54837: PUSH
54838: LD_INT 2
54840: ARRAY
54841: PPUSH
54842: CALL_OW 235
54846: GO 54821
54848: POP
54849: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
54850: LD_ADDR_EXP 46
54854: PUSH
54855: LD_EXP 46
54859: PPUSH
54860: LD_VAR 0 4
54864: PPUSH
54865: EMPTY
54866: PPUSH
54867: CALL_OW 1
54871: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
54872: LD_VAR 0 1
54876: PPUSH
54877: LD_INT 0
54879: PPUSH
54880: CALL_OW 505
// end ; end ;
54884: LD_VAR 0 2
54888: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
54889: LD_INT 0
54891: PPUSH
54892: PPUSH
54893: PPUSH
// if not hack in hackTanks or not vehicles then
54894: LD_VAR 0 1
54898: PUSH
54899: LD_EXP 45
54903: IN
54904: NOT
54905: PUSH
54906: LD_VAR 0 2
54910: NOT
54911: OR
54912: IFFALSE 54916
// exit ;
54914: GO 55191
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
54916: LD_ADDR_VAR 0 2
54920: PUSH
54921: LD_VAR 0 1
54925: PPUSH
54926: LD_VAR 0 2
54930: PPUSH
54931: LD_INT 1
54933: PPUSH
54934: LD_INT 1
54936: PPUSH
54937: CALL 14757 0 4
54941: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
54942: LD_ADDR_VAR 0 5
54946: PUSH
54947: LD_EXP 45
54951: PPUSH
54952: LD_VAR 0 1
54956: PPUSH
54957: CALL 14107 0 2
54961: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
54962: LD_EXP 46
54966: PUSH
54967: LD_VAR 0 5
54971: ARRAY
54972: PUSH
54973: LD_EXP 47
54977: LESS
54978: IFFALSE 55167
// begin for i := 1 to vehicles do
54980: LD_ADDR_VAR 0 4
54984: PUSH
54985: DOUBLE
54986: LD_INT 1
54988: DEC
54989: ST_TO_ADDR
54990: LD_VAR 0 2
54994: PUSH
54995: FOR_TO
54996: IFFALSE 55165
// begin if hackTanksCaptured [ index ] = hackLimit then
54998: LD_EXP 46
55002: PUSH
55003: LD_VAR 0 5
55007: ARRAY
55008: PUSH
55009: LD_EXP 47
55013: EQUAL
55014: IFFALSE 55018
// break ;
55016: GO 55165
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55018: LD_ADDR_EXP 49
55022: PUSH
55023: LD_EXP 49
55027: PPUSH
55028: LD_VAR 0 5
55032: PPUSH
55033: LD_EXP 49
55037: PUSH
55038: LD_VAR 0 5
55042: ARRAY
55043: PUSH
55044: LD_INT 1
55046: PLUS
55047: PPUSH
55048: CALL_OW 1
55052: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55053: LD_ADDR_EXP 46
55057: PUSH
55058: LD_EXP 46
55062: PPUSH
55063: LD_VAR 0 5
55067: PUSH
55068: LD_EXP 46
55072: PUSH
55073: LD_VAR 0 5
55077: ARRAY
55078: PUSH
55079: LD_INT 1
55081: PLUS
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PPUSH
55087: LD_VAR 0 2
55091: PUSH
55092: LD_VAR 0 4
55096: ARRAY
55097: PUSH
55098: LD_VAR 0 2
55102: PUSH
55103: LD_VAR 0 4
55107: ARRAY
55108: PPUSH
55109: CALL_OW 255
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PPUSH
55118: CALL 14322 0 3
55122: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55123: LD_VAR 0 2
55127: PUSH
55128: LD_VAR 0 4
55132: ARRAY
55133: PPUSH
55134: LD_VAR 0 1
55138: PPUSH
55139: CALL_OW 255
55143: PPUSH
55144: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55148: LD_VAR 0 2
55152: PUSH
55153: LD_VAR 0 4
55157: ARRAY
55158: PPUSH
55159: CALL_OW 141
// end ;
55163: GO 54995
55165: POP
55166: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55167: LD_VAR 0 1
55171: PPUSH
55172: LD_EXP 46
55176: PUSH
55177: LD_VAR 0 5
55181: ARRAY
55182: PUSH
55183: LD_INT 0
55185: PLUS
55186: PPUSH
55187: CALL_OW 505
// end ;
55191: LD_VAR 0 3
55195: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55196: LD_INT 0
55198: PPUSH
55199: PPUSH
55200: PPUSH
55201: PPUSH
// if not hack in hackTanks then
55202: LD_VAR 0 1
55206: PUSH
55207: LD_EXP 45
55211: IN
55212: NOT
55213: IFFALSE 55217
// exit ;
55215: GO 55457
// index := GetElementIndex ( hackTanks , hack ) ;
55217: LD_ADDR_VAR 0 4
55221: PUSH
55222: LD_EXP 45
55226: PPUSH
55227: LD_VAR 0 1
55231: PPUSH
55232: CALL 14107 0 2
55236: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55237: LD_ADDR_VAR 0 3
55241: PUSH
55242: DOUBLE
55243: LD_EXP 46
55247: PUSH
55248: LD_VAR 0 4
55252: ARRAY
55253: INC
55254: ST_TO_ADDR
55255: LD_INT 1
55257: PUSH
55258: FOR_DOWNTO
55259: IFFALSE 55431
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55261: LD_ADDR_VAR 0 5
55265: PUSH
55266: LD_EXP 46
55270: PUSH
55271: LD_VAR 0 4
55275: ARRAY
55276: PUSH
55277: LD_VAR 0 3
55281: ARRAY
55282: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55283: LD_VAR 0 5
55287: PUSH
55288: LD_INT 1
55290: ARRAY
55291: PPUSH
55292: CALL_OW 302
55296: NOT
55297: PUSH
55298: LD_VAR 0 5
55302: PUSH
55303: LD_INT 1
55305: ARRAY
55306: PPUSH
55307: CALL_OW 255
55311: PUSH
55312: LD_VAR 0 1
55316: PPUSH
55317: CALL_OW 255
55321: NONEQUAL
55322: OR
55323: IFFALSE 55429
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55325: LD_VAR 0 5
55329: PUSH
55330: LD_INT 1
55332: ARRAY
55333: PPUSH
55334: CALL_OW 305
55338: PUSH
55339: LD_VAR 0 5
55343: PUSH
55344: LD_INT 1
55346: ARRAY
55347: PPUSH
55348: CALL_OW 255
55352: PUSH
55353: LD_VAR 0 1
55357: PPUSH
55358: CALL_OW 255
55362: EQUAL
55363: AND
55364: IFFALSE 55388
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
55366: LD_VAR 0 5
55370: PUSH
55371: LD_INT 1
55373: ARRAY
55374: PPUSH
55375: LD_VAR 0 5
55379: PUSH
55380: LD_INT 2
55382: ARRAY
55383: PPUSH
55384: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
55388: LD_ADDR_EXP 46
55392: PUSH
55393: LD_EXP 46
55397: PPUSH
55398: LD_VAR 0 4
55402: PPUSH
55403: LD_EXP 46
55407: PUSH
55408: LD_VAR 0 4
55412: ARRAY
55413: PPUSH
55414: LD_VAR 0 3
55418: PPUSH
55419: CALL_OW 3
55423: PPUSH
55424: CALL_OW 1
55428: ST_TO_ADDR
// end ; end ;
55429: GO 55258
55431: POP
55432: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55433: LD_VAR 0 1
55437: PPUSH
55438: LD_EXP 46
55442: PUSH
55443: LD_VAR 0 4
55447: ARRAY
55448: PUSH
55449: LD_INT 0
55451: PLUS
55452: PPUSH
55453: CALL_OW 505
// end ;
55457: LD_VAR 0 2
55461: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
55462: LD_INT 0
55464: PPUSH
55465: PPUSH
55466: PPUSH
55467: PPUSH
// if not hack in hackTanks then
55468: LD_VAR 0 1
55472: PUSH
55473: LD_EXP 45
55477: IN
55478: NOT
55479: IFFALSE 55483
// exit ;
55481: GO 55568
// index := GetElementIndex ( hackTanks , hack ) ;
55483: LD_ADDR_VAR 0 5
55487: PUSH
55488: LD_EXP 45
55492: PPUSH
55493: LD_VAR 0 1
55497: PPUSH
55498: CALL 14107 0 2
55502: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
55503: LD_ADDR_VAR 0 4
55507: PUSH
55508: DOUBLE
55509: LD_INT 1
55511: DEC
55512: ST_TO_ADDR
55513: LD_EXP 46
55517: PUSH
55518: LD_VAR 0 5
55522: ARRAY
55523: PUSH
55524: FOR_TO
55525: IFFALSE 55566
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
55527: LD_EXP 46
55531: PUSH
55532: LD_VAR 0 5
55536: ARRAY
55537: PUSH
55538: LD_VAR 0 4
55542: ARRAY
55543: PUSH
55544: LD_INT 1
55546: ARRAY
55547: PUSH
55548: LD_VAR 0 2
55552: EQUAL
55553: IFFALSE 55564
// KillUnit ( vehicle ) ;
55555: LD_VAR 0 2
55559: PPUSH
55560: CALL_OW 66
55564: GO 55524
55566: POP
55567: POP
// end ;
55568: LD_VAR 0 3
55572: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
55573: LD_EXP 50
55577: NOT
55578: IFFALSE 55613
55580: GO 55582
55582: DISABLE
// begin initMiner := true ;
55583: LD_ADDR_EXP 50
55587: PUSH
55588: LD_INT 1
55590: ST_TO_ADDR
// minersList := [ ] ;
55591: LD_ADDR_EXP 51
55595: PUSH
55596: EMPTY
55597: ST_TO_ADDR
// minerMinesList := [ ] ;
55598: LD_ADDR_EXP 52
55602: PUSH
55603: EMPTY
55604: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
55605: LD_ADDR_EXP 53
55609: PUSH
55610: LD_INT 5
55612: ST_TO_ADDR
// end ;
55613: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
55614: LD_EXP 50
55618: PUSH
55619: LD_INT 34
55621: PUSH
55622: LD_INT 81
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PPUSH
55629: CALL_OW 69
55633: AND
55634: IFFALSE 56095
55636: GO 55638
55638: DISABLE
55639: LD_INT 0
55641: PPUSH
55642: PPUSH
55643: PPUSH
55644: PPUSH
// begin enable ;
55645: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
55646: LD_ADDR_VAR 0 1
55650: PUSH
55651: LD_INT 34
55653: PUSH
55654: LD_INT 81
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PPUSH
55661: CALL_OW 69
55665: PUSH
55666: FOR_IN
55667: IFFALSE 55739
// begin if not i in minersList then
55669: LD_VAR 0 1
55673: PUSH
55674: LD_EXP 51
55678: IN
55679: NOT
55680: IFFALSE 55737
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
55682: LD_ADDR_EXP 51
55686: PUSH
55687: LD_EXP 51
55691: PPUSH
55692: LD_EXP 51
55696: PUSH
55697: LD_INT 1
55699: PLUS
55700: PPUSH
55701: LD_VAR 0 1
55705: PPUSH
55706: CALL_OW 1
55710: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55711: LD_ADDR_EXP 52
55715: PUSH
55716: LD_EXP 52
55720: PPUSH
55721: LD_EXP 52
55725: PUSH
55726: LD_INT 1
55728: PLUS
55729: PPUSH
55730: EMPTY
55731: PPUSH
55732: CALL_OW 1
55736: ST_TO_ADDR
// end end ;
55737: GO 55666
55739: POP
55740: POP
// for i := minerMinesList downto 1 do
55741: LD_ADDR_VAR 0 1
55745: PUSH
55746: DOUBLE
55747: LD_EXP 52
55751: INC
55752: ST_TO_ADDR
55753: LD_INT 1
55755: PUSH
55756: FOR_DOWNTO
55757: IFFALSE 56093
// begin if IsLive ( minersList [ i ] ) then
55759: LD_EXP 51
55763: PUSH
55764: LD_VAR 0 1
55768: ARRAY
55769: PPUSH
55770: CALL_OW 300
55774: IFFALSE 55802
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
55776: LD_EXP 51
55780: PUSH
55781: LD_VAR 0 1
55785: ARRAY
55786: PPUSH
55787: LD_EXP 52
55791: PUSH
55792: LD_VAR 0 1
55796: ARRAY
55797: PPUSH
55798: CALL_OW 505
// if not minerMinesList [ i ] then
55802: LD_EXP 52
55806: PUSH
55807: LD_VAR 0 1
55811: ARRAY
55812: NOT
55813: IFFALSE 55817
// continue ;
55815: GO 55756
// for j := minerMinesList [ i ] downto 1 do
55817: LD_ADDR_VAR 0 2
55821: PUSH
55822: DOUBLE
55823: LD_EXP 52
55827: PUSH
55828: LD_VAR 0 1
55832: ARRAY
55833: INC
55834: ST_TO_ADDR
55835: LD_INT 1
55837: PUSH
55838: FOR_DOWNTO
55839: IFFALSE 56089
// begin side := GetSide ( minersList [ i ] ) ;
55841: LD_ADDR_VAR 0 3
55845: PUSH
55846: LD_EXP 51
55850: PUSH
55851: LD_VAR 0 1
55855: ARRAY
55856: PPUSH
55857: CALL_OW 255
55861: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
55862: LD_ADDR_VAR 0 4
55866: PUSH
55867: LD_EXP 52
55871: PUSH
55872: LD_VAR 0 1
55876: ARRAY
55877: PUSH
55878: LD_VAR 0 2
55882: ARRAY
55883: PUSH
55884: LD_INT 1
55886: ARRAY
55887: PPUSH
55888: LD_EXP 52
55892: PUSH
55893: LD_VAR 0 1
55897: ARRAY
55898: PUSH
55899: LD_VAR 0 2
55903: ARRAY
55904: PUSH
55905: LD_INT 2
55907: ARRAY
55908: PPUSH
55909: CALL_OW 428
55913: ST_TO_ADDR
// if not tmp then
55914: LD_VAR 0 4
55918: NOT
55919: IFFALSE 55923
// continue ;
55921: GO 55838
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
55923: LD_VAR 0 4
55927: PUSH
55928: LD_INT 81
55930: PUSH
55931: LD_VAR 0 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PPUSH
55940: CALL_OW 69
55944: IN
55945: PUSH
55946: LD_EXP 52
55950: PUSH
55951: LD_VAR 0 1
55955: ARRAY
55956: PUSH
55957: LD_VAR 0 2
55961: ARRAY
55962: PUSH
55963: LD_INT 1
55965: ARRAY
55966: PPUSH
55967: LD_EXP 52
55971: PUSH
55972: LD_VAR 0 1
55976: ARRAY
55977: PUSH
55978: LD_VAR 0 2
55982: ARRAY
55983: PUSH
55984: LD_INT 2
55986: ARRAY
55987: PPUSH
55988: CALL_OW 458
55992: AND
55993: IFFALSE 56087
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
55995: LD_EXP 52
55999: PUSH
56000: LD_VAR 0 1
56004: ARRAY
56005: PUSH
56006: LD_VAR 0 2
56010: ARRAY
56011: PUSH
56012: LD_INT 1
56014: ARRAY
56015: PPUSH
56016: LD_EXP 52
56020: PUSH
56021: LD_VAR 0 1
56025: ARRAY
56026: PUSH
56027: LD_VAR 0 2
56031: ARRAY
56032: PUSH
56033: LD_INT 2
56035: ARRAY
56036: PPUSH
56037: LD_VAR 0 3
56041: PPUSH
56042: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56046: LD_ADDR_EXP 52
56050: PUSH
56051: LD_EXP 52
56055: PPUSH
56056: LD_VAR 0 1
56060: PPUSH
56061: LD_EXP 52
56065: PUSH
56066: LD_VAR 0 1
56070: ARRAY
56071: PPUSH
56072: LD_VAR 0 2
56076: PPUSH
56077: CALL_OW 3
56081: PPUSH
56082: CALL_OW 1
56086: ST_TO_ADDR
// end ; end ;
56087: GO 55838
56089: POP
56090: POP
// end ;
56091: GO 55756
56093: POP
56094: POP
// end ;
56095: PPOPN 4
56097: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56098: LD_INT 0
56100: PPUSH
56101: PPUSH
// result := false ;
56102: LD_ADDR_VAR 0 4
56106: PUSH
56107: LD_INT 0
56109: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56110: LD_VAR 0 1
56114: PPUSH
56115: CALL_OW 264
56119: PUSH
56120: LD_INT 81
56122: EQUAL
56123: NOT
56124: IFFALSE 56128
// exit ;
56126: GO 56368
// index := GetElementIndex ( minersList , unit ) ;
56128: LD_ADDR_VAR 0 5
56132: PUSH
56133: LD_EXP 51
56137: PPUSH
56138: LD_VAR 0 1
56142: PPUSH
56143: CALL 14107 0 2
56147: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56148: LD_EXP 52
56152: PUSH
56153: LD_VAR 0 5
56157: ARRAY
56158: PUSH
56159: LD_EXP 53
56163: GREATEREQUAL
56164: IFFALSE 56168
// exit ;
56166: GO 56368
// ComMoveXY ( unit , x , y ) ;
56168: LD_VAR 0 1
56172: PPUSH
56173: LD_VAR 0 2
56177: PPUSH
56178: LD_VAR 0 3
56182: PPUSH
56183: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56187: LD_INT 35
56189: PPUSH
56190: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56194: LD_VAR 0 1
56198: PPUSH
56199: LD_VAR 0 2
56203: PPUSH
56204: LD_VAR 0 3
56208: PPUSH
56209: CALL 45868 0 3
56213: NOT
56214: PUSH
56215: LD_VAR 0 1
56219: PPUSH
56220: CALL_OW 314
56224: AND
56225: IFFALSE 56229
// exit ;
56227: GO 56368
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56229: LD_VAR 0 2
56233: PPUSH
56234: LD_VAR 0 3
56238: PPUSH
56239: CALL_OW 428
56243: PUSH
56244: LD_VAR 0 1
56248: EQUAL
56249: PUSH
56250: LD_VAR 0 1
56254: PPUSH
56255: CALL_OW 314
56259: NOT
56260: AND
56261: IFFALSE 56187
// PlaySoundXY ( x , y , PlantMine ) ;
56263: LD_VAR 0 2
56267: PPUSH
56268: LD_VAR 0 3
56272: PPUSH
56273: LD_STRING PlantMine
56275: PPUSH
56276: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56280: LD_VAR 0 2
56284: PPUSH
56285: LD_VAR 0 3
56289: PPUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: CALL_OW 255
56299: PPUSH
56300: LD_INT 0
56302: PPUSH
56303: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56307: LD_ADDR_EXP 52
56311: PUSH
56312: LD_EXP 52
56316: PPUSH
56317: LD_VAR 0 5
56321: PUSH
56322: LD_EXP 52
56326: PUSH
56327: LD_VAR 0 5
56331: ARRAY
56332: PUSH
56333: LD_INT 1
56335: PLUS
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PPUSH
56341: LD_VAR 0 2
56345: PUSH
56346: LD_VAR 0 3
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PPUSH
56355: CALL 14322 0 3
56359: ST_TO_ADDR
// result := true ;
56360: LD_ADDR_VAR 0 4
56364: PUSH
56365: LD_INT 1
56367: ST_TO_ADDR
// end ;
56368: LD_VAR 0 4
56372: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
56373: LD_INT 0
56375: PPUSH
56376: PPUSH
56377: PPUSH
// if not unit in minersList then
56378: LD_VAR 0 1
56382: PUSH
56383: LD_EXP 51
56387: IN
56388: NOT
56389: IFFALSE 56393
// exit ;
56391: GO 56785
// index := GetElementIndex ( minersList , unit ) ;
56393: LD_ADDR_VAR 0 6
56397: PUSH
56398: LD_EXP 51
56402: PPUSH
56403: LD_VAR 0 1
56407: PPUSH
56408: CALL 14107 0 2
56412: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
56413: LD_ADDR_VAR 0 5
56417: PUSH
56418: DOUBLE
56419: LD_EXP 52
56423: PUSH
56424: LD_VAR 0 6
56428: ARRAY
56429: INC
56430: ST_TO_ADDR
56431: LD_INT 1
56433: PUSH
56434: FOR_DOWNTO
56435: IFFALSE 56596
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
56437: LD_EXP 52
56441: PUSH
56442: LD_VAR 0 6
56446: ARRAY
56447: PUSH
56448: LD_VAR 0 5
56452: ARRAY
56453: PUSH
56454: LD_INT 1
56456: ARRAY
56457: PUSH
56458: LD_VAR 0 2
56462: EQUAL
56463: PUSH
56464: LD_EXP 52
56468: PUSH
56469: LD_VAR 0 6
56473: ARRAY
56474: PUSH
56475: LD_VAR 0 5
56479: ARRAY
56480: PUSH
56481: LD_INT 2
56483: ARRAY
56484: PUSH
56485: LD_VAR 0 3
56489: EQUAL
56490: AND
56491: IFFALSE 56594
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56493: LD_EXP 52
56497: PUSH
56498: LD_VAR 0 6
56502: ARRAY
56503: PUSH
56504: LD_VAR 0 5
56508: ARRAY
56509: PUSH
56510: LD_INT 1
56512: ARRAY
56513: PPUSH
56514: LD_EXP 52
56518: PUSH
56519: LD_VAR 0 6
56523: ARRAY
56524: PUSH
56525: LD_VAR 0 5
56529: ARRAY
56530: PUSH
56531: LD_INT 2
56533: ARRAY
56534: PPUSH
56535: LD_VAR 0 1
56539: PPUSH
56540: CALL_OW 255
56544: PPUSH
56545: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56549: LD_ADDR_EXP 52
56553: PUSH
56554: LD_EXP 52
56558: PPUSH
56559: LD_VAR 0 6
56563: PPUSH
56564: LD_EXP 52
56568: PUSH
56569: LD_VAR 0 6
56573: ARRAY
56574: PPUSH
56575: LD_VAR 0 5
56579: PPUSH
56580: CALL_OW 3
56584: PPUSH
56585: CALL_OW 1
56589: ST_TO_ADDR
// exit ;
56590: POP
56591: POP
56592: GO 56785
// end ; end ;
56594: GO 56434
56596: POP
56597: POP
// for i := minerMinesList [ index ] downto 1 do
56598: LD_ADDR_VAR 0 5
56602: PUSH
56603: DOUBLE
56604: LD_EXP 52
56608: PUSH
56609: LD_VAR 0 6
56613: ARRAY
56614: INC
56615: ST_TO_ADDR
56616: LD_INT 1
56618: PUSH
56619: FOR_DOWNTO
56620: IFFALSE 56783
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
56622: LD_EXP 52
56626: PUSH
56627: LD_VAR 0 6
56631: ARRAY
56632: PUSH
56633: LD_VAR 0 5
56637: ARRAY
56638: PUSH
56639: LD_INT 1
56641: ARRAY
56642: PPUSH
56643: LD_EXP 52
56647: PUSH
56648: LD_VAR 0 6
56652: ARRAY
56653: PUSH
56654: LD_VAR 0 5
56658: ARRAY
56659: PUSH
56660: LD_INT 2
56662: ARRAY
56663: PPUSH
56664: LD_VAR 0 2
56668: PPUSH
56669: LD_VAR 0 3
56673: PPUSH
56674: CALL_OW 298
56678: PUSH
56679: LD_INT 6
56681: LESS
56682: IFFALSE 56781
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
56684: LD_EXP 52
56688: PUSH
56689: LD_VAR 0 6
56693: ARRAY
56694: PUSH
56695: LD_VAR 0 5
56699: ARRAY
56700: PUSH
56701: LD_INT 1
56703: ARRAY
56704: PPUSH
56705: LD_EXP 52
56709: PUSH
56710: LD_VAR 0 6
56714: ARRAY
56715: PUSH
56716: LD_VAR 0 5
56720: ARRAY
56721: PUSH
56722: LD_INT 2
56724: ARRAY
56725: PPUSH
56726: LD_VAR 0 1
56730: PPUSH
56731: CALL_OW 255
56735: PPUSH
56736: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
56740: LD_ADDR_EXP 52
56744: PUSH
56745: LD_EXP 52
56749: PPUSH
56750: LD_VAR 0 6
56754: PPUSH
56755: LD_EXP 52
56759: PUSH
56760: LD_VAR 0 6
56764: ARRAY
56765: PPUSH
56766: LD_VAR 0 5
56770: PPUSH
56771: CALL_OW 3
56775: PPUSH
56776: CALL_OW 1
56780: ST_TO_ADDR
// end ; end ;
56781: GO 56619
56783: POP
56784: POP
// end ;
56785: LD_VAR 0 4
56789: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
56790: LD_INT 0
56792: PPUSH
56793: PPUSH
56794: PPUSH
56795: PPUSH
56796: PPUSH
56797: PPUSH
56798: PPUSH
56799: PPUSH
56800: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
56801: LD_VAR 0 1
56805: PPUSH
56806: CALL_OW 264
56810: PUSH
56811: LD_INT 81
56813: EQUAL
56814: NOT
56815: PUSH
56816: LD_VAR 0 1
56820: PUSH
56821: LD_EXP 51
56825: IN
56826: NOT
56827: OR
56828: IFFALSE 56832
// exit ;
56830: GO 57154
// index := GetElementIndex ( minersList , unit ) ;
56832: LD_ADDR_VAR 0 6
56836: PUSH
56837: LD_EXP 51
56841: PPUSH
56842: LD_VAR 0 1
56846: PPUSH
56847: CALL 14107 0 2
56851: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
56852: LD_ADDR_VAR 0 8
56856: PUSH
56857: LD_EXP 53
56861: PUSH
56862: LD_EXP 52
56866: PUSH
56867: LD_VAR 0 6
56871: ARRAY
56872: MINUS
56873: ST_TO_ADDR
// if not minesFreeAmount then
56874: LD_VAR 0 8
56878: NOT
56879: IFFALSE 56883
// exit ;
56881: GO 57154
// tmp := [ ] ;
56883: LD_ADDR_VAR 0 7
56887: PUSH
56888: EMPTY
56889: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
56890: LD_ADDR_VAR 0 5
56894: PUSH
56895: DOUBLE
56896: LD_INT 1
56898: DEC
56899: ST_TO_ADDR
56900: LD_VAR 0 8
56904: PUSH
56905: FOR_TO
56906: IFFALSE 57101
// begin _d := rand ( 0 , 5 ) ;
56908: LD_ADDR_VAR 0 11
56912: PUSH
56913: LD_INT 0
56915: PPUSH
56916: LD_INT 5
56918: PPUSH
56919: CALL_OW 12
56923: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
56924: LD_ADDR_VAR 0 12
56928: PUSH
56929: LD_INT 2
56931: PPUSH
56932: LD_INT 6
56934: PPUSH
56935: CALL_OW 12
56939: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
56940: LD_ADDR_VAR 0 9
56944: PUSH
56945: LD_VAR 0 2
56949: PPUSH
56950: LD_VAR 0 11
56954: PPUSH
56955: LD_VAR 0 12
56959: PPUSH
56960: CALL_OW 272
56964: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
56965: LD_ADDR_VAR 0 10
56969: PUSH
56970: LD_VAR 0 3
56974: PPUSH
56975: LD_VAR 0 11
56979: PPUSH
56980: LD_VAR 0 12
56984: PPUSH
56985: CALL_OW 273
56989: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
56990: LD_VAR 0 9
56994: PPUSH
56995: LD_VAR 0 10
56999: PPUSH
57000: CALL_OW 488
57004: PUSH
57005: LD_VAR 0 9
57009: PUSH
57010: LD_VAR 0 10
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_VAR 0 7
57023: IN
57024: NOT
57025: AND
57026: PUSH
57027: LD_VAR 0 9
57031: PPUSH
57032: LD_VAR 0 10
57036: PPUSH
57037: CALL_OW 458
57041: NOT
57042: AND
57043: IFFALSE 57085
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57045: LD_ADDR_VAR 0 7
57049: PUSH
57050: LD_VAR 0 7
57054: PPUSH
57055: LD_VAR 0 7
57059: PUSH
57060: LD_INT 1
57062: PLUS
57063: PPUSH
57064: LD_VAR 0 9
57068: PUSH
57069: LD_VAR 0 10
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PPUSH
57078: CALL_OW 1
57082: ST_TO_ADDR
57083: GO 57099
// i := i - 1 ;
57085: LD_ADDR_VAR 0 5
57089: PUSH
57090: LD_VAR 0 5
57094: PUSH
57095: LD_INT 1
57097: MINUS
57098: ST_TO_ADDR
// end ;
57099: GO 56905
57101: POP
57102: POP
// for i in tmp do
57103: LD_ADDR_VAR 0 5
57107: PUSH
57108: LD_VAR 0 7
57112: PUSH
57113: FOR_IN
57114: IFFALSE 57152
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57116: LD_VAR 0 1
57120: PPUSH
57121: LD_VAR 0 5
57125: PUSH
57126: LD_INT 1
57128: ARRAY
57129: PPUSH
57130: LD_VAR 0 5
57134: PUSH
57135: LD_INT 2
57137: ARRAY
57138: PPUSH
57139: CALL 56098 0 3
57143: NOT
57144: IFFALSE 57150
// exit ;
57146: POP
57147: POP
57148: GO 57154
57150: GO 57113
57152: POP
57153: POP
// end ;
57154: LD_VAR 0 4
57158: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
57159: LD_INT 0
57161: PPUSH
57162: PPUSH
57163: PPUSH
57164: PPUSH
57165: PPUSH
57166: PPUSH
57167: PPUSH
57168: PPUSH
57169: PPUSH
// if GetClass ( unit ) <> class_sniper then
57170: LD_VAR 0 1
57174: PPUSH
57175: CALL_OW 257
57179: PUSH
57180: LD_INT 5
57182: NONEQUAL
57183: IFFALSE 57187
// exit ;
57185: GO 57653
// dist := 8 ;
57187: LD_ADDR_VAR 0 5
57191: PUSH
57192: LD_INT 8
57194: ST_TO_ADDR
// viewRange := 12 ;
57195: LD_ADDR_VAR 0 8
57199: PUSH
57200: LD_INT 12
57202: ST_TO_ADDR
// side := GetSide ( unit ) ;
57203: LD_ADDR_VAR 0 6
57207: PUSH
57208: LD_VAR 0 1
57212: PPUSH
57213: CALL_OW 255
57217: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57218: LD_INT 61
57220: PPUSH
57221: LD_VAR 0 6
57225: PPUSH
57226: CALL_OW 321
57230: PUSH
57231: LD_INT 2
57233: EQUAL
57234: IFFALSE 57244
// viewRange := 16 ;
57236: LD_ADDR_VAR 0 8
57240: PUSH
57241: LD_INT 16
57243: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57244: LD_VAR 0 1
57248: PPUSH
57249: LD_VAR 0 2
57253: PPUSH
57254: LD_VAR 0 3
57258: PPUSH
57259: CALL_OW 297
57263: PUSH
57264: LD_VAR 0 5
57268: GREATER
57269: IFFALSE 57348
// begin ComMoveXY ( unit , x , y ) ;
57271: LD_VAR 0 1
57275: PPUSH
57276: LD_VAR 0 2
57280: PPUSH
57281: LD_VAR 0 3
57285: PPUSH
57286: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57290: LD_INT 35
57292: PPUSH
57293: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57297: LD_VAR 0 1
57301: PPUSH
57302: LD_VAR 0 2
57306: PPUSH
57307: LD_VAR 0 3
57311: PPUSH
57312: CALL 45868 0 3
57316: NOT
57317: IFFALSE 57321
// exit ;
57319: GO 57653
// until GetDistUnitXY ( unit , x , y ) < dist ;
57321: LD_VAR 0 1
57325: PPUSH
57326: LD_VAR 0 2
57330: PPUSH
57331: LD_VAR 0 3
57335: PPUSH
57336: CALL_OW 297
57340: PUSH
57341: LD_VAR 0 5
57345: LESS
57346: IFFALSE 57290
// end ; ComTurnXY ( unit , x , y ) ;
57348: LD_VAR 0 1
57352: PPUSH
57353: LD_VAR 0 2
57357: PPUSH
57358: LD_VAR 0 3
57362: PPUSH
57363: CALL_OW 118
// repeat if Multiplayer then
57367: LD_OWVAR 4
57371: IFFALSE 57382
// wait ( 35 ) else
57373: LD_INT 35
57375: PPUSH
57376: CALL_OW 67
57380: GO 57389
// wait ( 5 ) ;
57382: LD_INT 5
57384: PPUSH
57385: CALL_OW 67
// _d := GetDir ( unit ) ;
57389: LD_ADDR_VAR 0 11
57393: PUSH
57394: LD_VAR 0 1
57398: PPUSH
57399: CALL_OW 254
57403: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
57404: LD_ADDR_VAR 0 7
57408: PUSH
57409: LD_VAR 0 1
57413: PPUSH
57414: CALL_OW 250
57418: PPUSH
57419: LD_VAR 0 1
57423: PPUSH
57424: CALL_OW 251
57428: PPUSH
57429: LD_VAR 0 2
57433: PPUSH
57434: LD_VAR 0 3
57438: PPUSH
57439: CALL 48476 0 4
57443: ST_TO_ADDR
// until dir = _d ;
57444: LD_VAR 0 7
57448: PUSH
57449: LD_VAR 0 11
57453: EQUAL
57454: IFFALSE 57367
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
57456: LD_ADDR_VAR 0 9
57460: PUSH
57461: LD_VAR 0 1
57465: PPUSH
57466: CALL_OW 250
57470: PPUSH
57471: LD_VAR 0 7
57475: PPUSH
57476: LD_VAR 0 5
57480: PPUSH
57481: CALL_OW 272
57485: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
57486: LD_ADDR_VAR 0 10
57490: PUSH
57491: LD_VAR 0 1
57495: PPUSH
57496: CALL_OW 251
57500: PPUSH
57501: LD_VAR 0 7
57505: PPUSH
57506: LD_VAR 0 5
57510: PPUSH
57511: CALL_OW 273
57515: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57516: LD_VAR 0 9
57520: PPUSH
57521: LD_VAR 0 10
57525: PPUSH
57526: CALL_OW 488
57530: NOT
57531: IFFALSE 57535
// exit ;
57533: GO 57653
// ComAnimCustom ( unit , 1 ) ;
57535: LD_VAR 0 1
57539: PPUSH
57540: LD_INT 1
57542: PPUSH
57543: CALL_OW 592
// p := 0 ;
57547: LD_ADDR_VAR 0 12
57551: PUSH
57552: LD_INT 0
57554: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
57555: LD_VAR 0 9
57559: PPUSH
57560: LD_VAR 0 10
57564: PPUSH
57565: LD_VAR 0 6
57569: PPUSH
57570: LD_VAR 0 8
57574: PPUSH
57575: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
57579: LD_INT 35
57581: PPUSH
57582: CALL_OW 67
// p := Inc ( p ) ;
57586: LD_ADDR_VAR 0 12
57590: PUSH
57591: LD_VAR 0 12
57595: PPUSH
57596: CALL 48432 0 1
57600: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
57601: LD_VAR 0 12
57605: PUSH
57606: LD_INT 3
57608: EQUAL
57609: PUSH
57610: LD_VAR 0 1
57614: PPUSH
57615: CALL_OW 302
57619: NOT
57620: OR
57621: PUSH
57622: LD_VAR 0 1
57626: PPUSH
57627: CALL_OW 301
57631: OR
57632: IFFALSE 57579
// RemoveSeeing ( _x , _y , side ) ;
57634: LD_VAR 0 9
57638: PPUSH
57639: LD_VAR 0 10
57643: PPUSH
57644: LD_VAR 0 6
57648: PPUSH
57649: CALL_OW 331
// end ; end_of_file
57653: LD_VAR 0 4
57657: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
57658: LD_EXP 39
57662: IFFALSE 58003
57664: GO 57666
57666: DISABLE
57667: LD_INT 0
57669: PPUSH
57670: PPUSH
57671: PPUSH
// begin mpKingPoints := [ ] ;
57672: LD_ADDR_EXP 54
57676: PUSH
57677: EMPTY
57678: ST_TO_ADDR
// if mpTeamGame then
57679: LD_EXP 11
57683: IFFALSE 57737
// begin for i := 1 to Count ( mpTeams ) do
57685: LD_ADDR_VAR 0 1
57689: PUSH
57690: DOUBLE
57691: LD_INT 1
57693: DEC
57694: ST_TO_ADDR
57695: LD_EXP 10
57699: PPUSH
57700: CALL 11462 0 1
57704: PUSH
57705: FOR_TO
57706: IFFALSE 57733
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57708: LD_ADDR_EXP 54
57712: PUSH
57713: LD_EXP 54
57717: PPUSH
57718: LD_VAR 0 1
57722: PPUSH
57723: LD_INT 0
57725: PPUSH
57726: CALL_OW 1
57730: ST_TO_ADDR
57731: GO 57705
57733: POP
57734: POP
// end else
57735: GO 57780
// begin for i := 1 to 8 do
57737: LD_ADDR_VAR 0 1
57741: PUSH
57742: DOUBLE
57743: LD_INT 1
57745: DEC
57746: ST_TO_ADDR
57747: LD_INT 8
57749: PUSH
57750: FOR_TO
57751: IFFALSE 57778
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
57753: LD_ADDR_EXP 54
57757: PUSH
57758: LD_EXP 54
57762: PPUSH
57763: LD_VAR 0 1
57767: PPUSH
57768: LD_INT 0
57770: PPUSH
57771: CALL_OW 1
57775: ST_TO_ADDR
57776: GO 57750
57778: POP
57779: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
57780: LD_ADDR_VAR 0 3
57784: PUSH
57785: LD_EXP 2
57789: PPUSH
57790: LD_INT 0
57792: PPUSH
57793: CALL_OW 517
57797: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57798: LD_ADDR_VAR 0 1
57802: PUSH
57803: DOUBLE
57804: LD_INT 1
57806: DEC
57807: ST_TO_ADDR
57808: LD_VAR 0 3
57812: PUSH
57813: LD_INT 1
57815: ARRAY
57816: PUSH
57817: FOR_TO
57818: IFFALSE 57885
// for j := 1 to 8 do
57820: LD_ADDR_VAR 0 2
57824: PUSH
57825: DOUBLE
57826: LD_INT 1
57828: DEC
57829: ST_TO_ADDR
57830: LD_INT 8
57832: PUSH
57833: FOR_TO
57834: IFFALSE 57881
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
57836: LD_VAR 0 3
57840: PUSH
57841: LD_INT 1
57843: ARRAY
57844: PUSH
57845: LD_VAR 0 1
57849: ARRAY
57850: PPUSH
57851: LD_VAR 0 3
57855: PUSH
57856: LD_INT 2
57858: ARRAY
57859: PUSH
57860: LD_VAR 0 1
57864: ARRAY
57865: PPUSH
57866: LD_VAR 0 2
57870: PPUSH
57871: LD_INT 12
57873: NEG
57874: PPUSH
57875: CALL_OW 330
57879: GO 57833
57881: POP
57882: POP
57883: GO 57817
57885: POP
57886: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
57887: LD_EXP 34
57891: PPUSH
57892: LD_INT 1
57894: PPUSH
57895: CALL_OW 424
// UpdateCounter ;
57899: CALL 58507 0 0
// repeat wait ( 0 0$1 ) ;
57903: LD_INT 35
57905: PPUSH
57906: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57910: LD_ADDR_VAR 0 3
57914: PUSH
57915: LD_EXP 34
57919: PPUSH
57920: LD_INT 3
57922: PUSH
57923: LD_INT 57
57925: PUSH
57926: EMPTY
57927: LIST
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 50
57935: PUSH
57936: EMPTY
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 30
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 30
57954: PUSH
57955: LD_INT 1
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: PPUSH
57972: CALL_OW 70
57976: ST_TO_ADDR
// if not tmp then
57977: LD_VAR 0 3
57981: NOT
57982: IFFALSE 57986
// continue ;
57984: GO 57903
// AddPoints ( tmp ) ;
57986: LD_VAR 0 3
57990: PPUSH
57991: CALL 58185 0 1
// UpdateCounter ;
57995: CALL 58507 0 0
// until false ;
57999: LD_INT 0
58001: IFFALSE 57903
// end ;
58003: PPOPN 3
58005: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
58006: LD_EXP 39
58010: PUSH
58011: LD_EXP 37
58015: AND
58016: IFFALSE 58182
58018: GO 58020
58020: DISABLE
58021: LD_INT 0
58023: PPUSH
58024: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
58025: LD_ADDR_VAR 0 2
58029: PUSH
58030: LD_EXP 2
58034: PPUSH
58035: LD_INT 0
58037: PPUSH
58038: CALL_OW 517
58042: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58043: LD_ADDR_VAR 0 1
58047: PUSH
58048: DOUBLE
58049: LD_INT 1
58051: DEC
58052: ST_TO_ADDR
58053: LD_VAR 0 2
58057: PUSH
58058: LD_INT 1
58060: ARRAY
58061: PUSH
58062: FOR_TO
58063: IFFALSE 58104
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
58065: LD_VAR 0 2
58069: PUSH
58070: LD_INT 1
58072: ARRAY
58073: PUSH
58074: LD_VAR 0 1
58078: ARRAY
58079: PPUSH
58080: LD_VAR 0 2
58084: PUSH
58085: LD_INT 2
58087: ARRAY
58088: PUSH
58089: LD_VAR 0 1
58093: ARRAY
58094: PPUSH
58095: LD_INT 125
58097: PPUSH
58098: CALL_OW 495
58102: GO 58062
58104: POP
58105: POP
// repeat wait ( mpEmissions ) ;
58106: LD_EXP 37
58110: PPUSH
58111: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
58115: LD_ADDR_VAR 0 1
58119: PUSH
58120: DOUBLE
58121: LD_INT 1
58123: DEC
58124: ST_TO_ADDR
58125: LD_VAR 0 2
58129: PUSH
58130: LD_INT 1
58132: ARRAY
58133: PUSH
58134: FOR_TO
58135: IFFALSE 58176
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
58137: LD_VAR 0 2
58141: PUSH
58142: LD_INT 1
58144: ARRAY
58145: PUSH
58146: LD_VAR 0 1
58150: ARRAY
58151: PPUSH
58152: LD_VAR 0 2
58156: PUSH
58157: LD_INT 2
58159: ARRAY
58160: PUSH
58161: LD_VAR 0 1
58165: ARRAY
58166: PPUSH
58167: LD_INT 15
58169: PPUSH
58170: CALL_OW 495
58174: GO 58134
58176: POP
58177: POP
// until false ;
58178: LD_INT 0
58180: IFFALSE 58106
// end ;
58182: PPOPN 2
58184: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
58185: LD_INT 0
58187: PPUSH
58188: PPUSH
58189: PPUSH
58190: PPUSH
58191: PPUSH
// if mpTeamGame then
58192: LD_EXP 11
58196: IFFALSE 58393
// begin first := depots [ 1 ] ;
58198: LD_ADDR_VAR 0 4
58202: PUSH
58203: LD_VAR 0 1
58207: PUSH
58208: LD_INT 1
58210: ARRAY
58211: ST_TO_ADDR
// side := GetSide ( first ) ;
58212: LD_ADDR_VAR 0 6
58216: PUSH
58217: LD_VAR 0 4
58221: PPUSH
58222: CALL_OW 255
58226: ST_TO_ADDR
// for i := 1 to mpTeams do
58227: LD_ADDR_VAR 0 3
58231: PUSH
58232: DOUBLE
58233: LD_INT 1
58235: DEC
58236: ST_TO_ADDR
58237: LD_EXP 10
58241: PUSH
58242: FOR_TO
58243: IFFALSE 58277
// if side in mpTeams [ i ] then
58245: LD_VAR 0 6
58249: PUSH
58250: LD_EXP 10
58254: PUSH
58255: LD_VAR 0 3
58259: ARRAY
58260: IN
58261: IFFALSE 58275
// begin team := i ;
58263: LD_ADDR_VAR 0 5
58267: PUSH
58268: LD_VAR 0 3
58272: ST_TO_ADDR
// break ;
58273: GO 58277
// end ;
58275: GO 58242
58277: POP
58278: POP
// if not team then
58279: LD_VAR 0 5
58283: NOT
58284: IFFALSE 58288
// exit ;
58286: GO 58502
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58288: LD_EXP 34
58292: PPUSH
58293: LD_INT 81
58295: PUSH
58296: LD_VAR 0 6
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PPUSH
58305: CALL_OW 70
58309: IFFALSE 58313
// exit ;
58311: GO 58502
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58313: LD_ADDR_EXP 54
58317: PUSH
58318: LD_EXP 54
58322: PPUSH
58323: LD_VAR 0 5
58327: PPUSH
58328: LD_EXP 54
58332: PUSH
58333: LD_VAR 0 5
58337: ARRAY
58338: PUSH
58339: LD_INT 1
58341: PLUS
58342: PPUSH
58343: CALL_OW 1
58347: ST_TO_ADDR
// for i in mpTeams [ team ] do
58348: LD_ADDR_VAR 0 3
58352: PUSH
58353: LD_EXP 10
58357: PUSH
58358: LD_VAR 0 5
58362: ARRAY
58363: PUSH
58364: FOR_IN
58365: IFFALSE 58389
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
58367: LD_VAR 0 3
58371: PPUSH
58372: LD_EXP 54
58376: PUSH
58377: LD_VAR 0 5
58381: ARRAY
58382: PPUSH
58383: CALL_OW 506
58387: GO 58364
58389: POP
58390: POP
// end else
58391: GO 58502
// begin first := depots [ 1 ] ;
58393: LD_ADDR_VAR 0 4
58397: PUSH
58398: LD_VAR 0 1
58402: PUSH
58403: LD_INT 1
58405: ARRAY
58406: ST_TO_ADDR
// side := GetSide ( first ) ;
58407: LD_ADDR_VAR 0 6
58411: PUSH
58412: LD_VAR 0 4
58416: PPUSH
58417: CALL_OW 255
58421: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58422: LD_EXP 34
58426: PPUSH
58427: LD_INT 81
58429: PUSH
58430: LD_VAR 0 6
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PPUSH
58439: CALL_OW 70
58443: IFFALSE 58447
// exit ;
58445: GO 58502
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
58447: LD_ADDR_EXP 54
58451: PUSH
58452: LD_EXP 54
58456: PPUSH
58457: LD_VAR 0 6
58461: PPUSH
58462: LD_EXP 54
58466: PUSH
58467: LD_VAR 0 6
58471: ARRAY
58472: PUSH
58473: LD_INT 1
58475: PLUS
58476: PPUSH
58477: CALL_OW 1
58481: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
58482: LD_VAR 0 6
58486: PPUSH
58487: LD_EXP 54
58491: PUSH
58492: LD_VAR 0 6
58496: ARRAY
58497: PPUSH
58498: CALL_OW 506
// end ; end ;
58502: LD_VAR 0 2
58506: RET
// function UpdateCounter ; var i ; begin
58507: LD_INT 0
58509: PPUSH
58510: PPUSH
// result := [ ] ;
58511: LD_ADDR_VAR 0 1
58515: PUSH
58516: EMPTY
58517: ST_TO_ADDR
// if mpTeamGame then
58518: LD_EXP 11
58522: IFFALSE 58589
// begin for i := 1 to mpTeams do
58524: LD_ADDR_VAR 0 2
58528: PUSH
58529: DOUBLE
58530: LD_INT 1
58532: DEC
58533: ST_TO_ADDR
58534: LD_EXP 10
58538: PUSH
58539: FOR_TO
58540: IFFALSE 58585
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
58542: LD_ADDR_VAR 0 1
58546: PUSH
58547: LD_VAR 0 1
58551: PUSH
58552: LD_STRING #KingoftheHill-Team
58554: PUSH
58555: LD_VAR 0 2
58559: PUSH
58560: LD_EXP 54
58564: PUSH
58565: LD_VAR 0 2
58569: ARRAY
58570: PUSH
58571: LD_EXP 35
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: ADD
58582: ST_TO_ADDR
58583: GO 58539
58585: POP
58586: POP
// end else
58587: GO 58662
// begin for i := 1 to 8 do
58589: LD_ADDR_VAR 0 2
58593: PUSH
58594: DOUBLE
58595: LD_INT 1
58597: DEC
58598: ST_TO_ADDR
58599: LD_INT 8
58601: PUSH
58602: FOR_TO
58603: IFFALSE 58660
// if mpSidePositions [ i ] then
58605: LD_EXP 7
58609: PUSH
58610: LD_VAR 0 2
58614: ARRAY
58615: IFFALSE 58658
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
58617: LD_ADDR_VAR 0 1
58621: PUSH
58622: LD_VAR 0 1
58626: PUSH
58627: LD_STRING #KingoftheHill-Player
58629: PUSH
58630: LD_VAR 0 2
58634: PUSH
58635: LD_EXP 54
58639: PUSH
58640: LD_VAR 0 2
58644: ARRAY
58645: PUSH
58646: LD_EXP 35
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: ADD
58657: ST_TO_ADDR
58658: GO 58602
58660: POP
58661: POP
// end ; mpDisplayStrings := result ;
58662: LD_ADDR_EXP 38
58666: PUSH
58667: LD_VAR 0 1
58671: ST_TO_ADDR
// end ;
58672: LD_VAR 0 1
58676: RET
// export function HowMuchPointsKing ( side ) ; begin
58677: LD_INT 0
58679: PPUSH
// result := HowMuchPoints ( side ) ;
58680: LD_ADDR_VAR 0 2
58684: PUSH
58685: LD_VAR 0 1
58689: PPUSH
58690: CALL 58700 0 1
58694: ST_TO_ADDR
// end ;
58695: LD_VAR 0 2
58699: RET
// function HowMuchPoints ( side ) ; var i ; begin
58700: LD_INT 0
58702: PPUSH
58703: PPUSH
// if mpTeamGame then
58704: LD_EXP 11
58708: IFFALSE 58777
// begin for i := 1 to Count ( mpTeams ) do
58710: LD_ADDR_VAR 0 3
58714: PUSH
58715: DOUBLE
58716: LD_INT 1
58718: DEC
58719: ST_TO_ADDR
58720: LD_EXP 10
58724: PPUSH
58725: CALL 11462 0 1
58729: PUSH
58730: FOR_TO
58731: IFFALSE 58773
// begin if side in mpTeams [ i ] then
58733: LD_VAR 0 1
58737: PUSH
58738: LD_EXP 10
58742: PUSH
58743: LD_VAR 0 3
58747: ARRAY
58748: IN
58749: IFFALSE 58771
// begin result := mpKingPoints [ i ] ;
58751: LD_ADDR_VAR 0 2
58755: PUSH
58756: LD_EXP 54
58760: PUSH
58761: LD_VAR 0 3
58765: ARRAY
58766: ST_TO_ADDR
// exit ;
58767: POP
58768: POP
58769: GO 58793
// end ; end ;
58771: GO 58730
58773: POP
58774: POP
// end else
58775: GO 58793
// result := mpKingPoints [ side ] ;
58777: LD_ADDR_VAR 0 2
58781: PUSH
58782: LD_EXP 54
58786: PUSH
58787: LD_VAR 0 1
58791: ARRAY
58792: ST_TO_ADDR
// end ;
58793: LD_VAR 0 2
58797: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
58798: LD_EXP 39
58802: PUSH
58803: CALL 59125 0 0
58807: AND
58808: PUSH
58809: LD_OWVAR 4
58813: AND
58814: IFFALSE 59050
58816: GO 58818
58818: DISABLE
58819: LD_INT 0
58821: PPUSH
58822: PPUSH
// begin canWin := false ;
58823: LD_ADDR_VAR 0 2
58827: PUSH
58828: LD_INT 0
58830: ST_TO_ADDR
// if not HasPower ( your_side ) then
58831: LD_OWVAR 2
58835: PPUSH
58836: CALL 59165 0 1
58840: NOT
58841: IFFALSE 58852
// begin Multiplayer_Loose_Message ;
58843: CALL_OW 521
// enable ( mpLose ) ;
58847: LD_INT 102
58849: ENABLE_MARKED
// end else
58850: GO 59050
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
58852: LD_ADDR_VAR 0 2
58856: PUSH
58857: LD_OWVAR 2
58861: PPUSH
58862: CALL 58700 0 1
58866: PUSH
58867: LD_EXP 35
58871: GREATEREQUAL
58872: PUSH
58873: LD_OWVAR 2
58877: PPUSH
58878: CALL 59165 0 1
58882: AND
58883: PUSH
58884: CALL 59053 0 0
58888: NOT
58889: OR
58890: ST_TO_ADDR
// for i := 1 to 8 do
58891: LD_ADDR_VAR 0 1
58895: PUSH
58896: DOUBLE
58897: LD_INT 1
58899: DEC
58900: ST_TO_ADDR
58901: LD_INT 8
58903: PUSH
58904: FOR_TO
58905: IFFALSE 59036
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
58907: LD_EXP 7
58911: PUSH
58912: LD_VAR 0 1
58916: ARRAY
58917: PUSH
58918: LD_VAR 0 1
58922: PPUSH
58923: CALL_OW 108
58927: AND
58928: PUSH
58929: LD_VAR 0 1
58933: PUSH
58934: LD_OWVAR 2
58938: NONEQUAL
58939: AND
58940: IFFALSE 59034
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
58942: LD_EXP 8
58946: PUSH
58947: LD_VAR 0 1
58951: ARRAY
58952: NOT
58953: PUSH
58954: LD_EXP 8
58958: PUSH
58959: LD_VAR 0 1
58963: ARRAY
58964: PUSH
58965: LD_EXP 8
58969: PUSH
58970: LD_OWVAR 2
58974: ARRAY
58975: NONEQUAL
58976: PUSH
58977: LD_OWVAR 2
58981: PPUSH
58982: LD_VAR 0 1
58986: PPUSH
58987: CALL_OW 81
58991: PUSH
58992: LD_INT 1
58994: NONEQUAL
58995: AND
58996: OR
58997: IFFALSE 59034
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
58999: LD_VAR 0 1
59003: PPUSH
59004: CALL 58700 0 1
59008: PUSH
59009: LD_EXP 35
59013: GREATEREQUAL
59014: PUSH
59015: LD_VAR 0 1
59019: PPUSH
59020: CALL 59165 0 1
59024: AND
59025: IFFALSE 59034
// begin enable ( mpLose ) ;
59027: LD_INT 102
59029: ENABLE_MARKED
// exit ;
59030: POP
59031: POP
59032: GO 59050
// end ;
59034: GO 58904
59036: POP
59037: POP
// if canWin then
59038: LD_VAR 0 2
59042: IFFALSE 59049
// enable ( mpWin ) else
59044: LD_INT 101
59046: ENABLE_MARKED
59047: GO 59050
// enable ;
59049: ENABLE
// end ; end ;
59050: PPOPN 2
59052: END
// function EnemiesInGame ; var i ; begin
59053: LD_INT 0
59055: PPUSH
59056: PPUSH
// result := false ;
59057: LD_ADDR_VAR 0 1
59061: PUSH
59062: LD_INT 0
59064: ST_TO_ADDR
// for i := 1 to 8 do
59065: LD_ADDR_VAR 0 2
59069: PUSH
59070: DOUBLE
59071: LD_INT 1
59073: DEC
59074: ST_TO_ADDR
59075: LD_INT 8
59077: PUSH
59078: FOR_TO
59079: IFFALSE 59118
// if i <> your_side and HasPower ( i ) then
59081: LD_VAR 0 2
59085: PUSH
59086: LD_OWVAR 2
59090: NONEQUAL
59091: PUSH
59092: LD_VAR 0 2
59096: PPUSH
59097: CALL 59165 0 1
59101: AND
59102: IFFALSE 59116
// begin result := true ;
59104: LD_ADDR_VAR 0 1
59108: PUSH
59109: LD_INT 1
59111: ST_TO_ADDR
// exit ;
59112: POP
59113: POP
59114: GO 59120
// end ;
59116: GO 59078
59118: POP
59119: POP
// end ;
59120: LD_VAR 0 1
59124: RET
// function CanWinLoose ; begin
59125: LD_INT 0
59127: PPUSH
// result := true ;
59128: LD_ADDR_VAR 0 1
59132: PUSH
59133: LD_INT 1
59135: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
59136: CALL_OW 531
59140: PUSH
59141: CALL_OW 519
59145: PUSH
59146: LD_INT 1
59148: GREATER
59149: AND
59150: IFFALSE 59160
// result := false ;
59152: LD_ADDR_VAR 0 1
59156: PUSH
59157: LD_INT 0
59159: ST_TO_ADDR
// end ;
59160: LD_VAR 0 1
59164: RET
// function HasPower ( i ) ; begin
59165: LD_INT 0
59167: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
59168: LD_ADDR_VAR 0 2
59172: PUSH
59173: LD_INT 22
59175: PUSH
59176: LD_VAR 0 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 2
59187: PUSH
59188: LD_INT 21
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 33
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 33
59210: PUSH
59211: LD_INT 5
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PPUSH
59228: CALL_OW 69
59232: ST_TO_ADDR
// end ; end_of_file
59233: LD_VAR 0 2
59237: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59238: PPOPN 6
59240: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59241: LD_EXP 3
59245: PUSH
59246: LD_INT 4
59248: EQUAL
59249: IFFALSE 59285
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59251: LD_STRING setGameDifficulty(
59253: PUSH
59254: LD_OWVAR 67
59258: STR
59259: PUSH
59260: LD_STRING )
59262: STR
59263: PPUSH
59264: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59268: LD_STRING displayDifficulty(
59270: PUSH
59271: LD_OWVAR 67
59275: STR
59276: PUSH
59277: LD_STRING )
59279: STR
59280: PPUSH
59281: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59285: CALL 59314 0 0
// end ; end_of_file
59289: PPOPN 1
59291: END
// every 0 0$1 do
59292: GO 59294
59294: DISABLE
// begin enable ;
59295: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59296: LD_STRING updateTimer(
59298: PUSH
59299: LD_OWVAR 1
59303: STR
59304: PUSH
59305: LD_STRING );
59307: STR
59308: PPUSH
59309: CALL_OW 559
// end ;
59313: END
// export function SOS_MapStart ( ) ; begin
59314: LD_INT 0
59316: PPUSH
// UpdateFactoryWaypoints ( ) ;
59317: CALL 59690 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59321: CALL 59942 0 0
// ParseMultiDataToLua ( ) ;
59325: CALL 60089 0 0
// end ;
59329: LD_VAR 0 1
59333: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59334: LD_INT 0
59336: PPUSH
// end ;
59337: LD_VAR 0 12
59341: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59342: LD_INT 0
59344: PPUSH
59345: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59346: LD_VAR 0 1
59350: NOT
59351: PUSH
59352: LD_VAR 0 2
59356: PPUSH
59357: LD_VAR 0 3
59361: PPUSH
59362: CALL_OW 488
59366: NOT
59367: OR
59368: PUSH
59369: LD_VAR 0 1
59373: PPUSH
59374: CALL_OW 266
59378: PUSH
59379: LD_INT 3
59381: NONEQUAL
59382: PUSH
59383: LD_VAR 0 1
59387: PPUSH
59388: CALL_OW 247
59392: PUSH
59393: LD_INT 1
59395: EQUAL
59396: NOT
59397: AND
59398: OR
59399: IFFALSE 59403
// exit ;
59401: GO 59685
// if GetType ( factory ) = unit_human then
59403: LD_VAR 0 1
59407: PPUSH
59408: CALL_OW 247
59412: PUSH
59413: LD_INT 1
59415: EQUAL
59416: IFFALSE 59433
// factory := IsInUnit ( factory ) ;
59418: LD_ADDR_VAR 0 1
59422: PUSH
59423: LD_VAR 0 1
59427: PPUSH
59428: CALL_OW 310
59432: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59433: LD_VAR 0 1
59437: PPUSH
59438: CALL_OW 266
59442: PUSH
59443: LD_INT 3
59445: NONEQUAL
59446: IFFALSE 59450
// exit ;
59448: GO 59685
// for i := 1 to Count ( factoryWaypoints ) do
59450: LD_ADDR_VAR 0 5
59454: PUSH
59455: DOUBLE
59456: LD_INT 1
59458: DEC
59459: ST_TO_ADDR
59460: LD_EXP 55
59464: PPUSH
59465: CALL 11462 0 1
59469: PUSH
59470: FOR_TO
59471: IFFALSE 59633
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59473: LD_VAR 0 2
59477: PPUSH
59478: LD_VAR 0 3
59482: PPUSH
59483: CALL_OW 428
59487: PUSH
59488: LD_EXP 55
59492: PUSH
59493: LD_VAR 0 5
59497: ARRAY
59498: PUSH
59499: LD_INT 2
59501: ARRAY
59502: EQUAL
59503: IFFALSE 59535
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59505: LD_ADDR_EXP 55
59509: PUSH
59510: LD_EXP 55
59514: PPUSH
59515: LD_VAR 0 5
59519: PPUSH
59520: CALL_OW 3
59524: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59525: CALL 59690 0 0
// exit ;
59529: POP
59530: POP
59531: GO 59685
// end else
59533: GO 59631
// if factory = factoryWaypoints [ i ] [ 2 ] then
59535: LD_VAR 0 1
59539: PUSH
59540: LD_EXP 55
59544: PUSH
59545: LD_VAR 0 5
59549: ARRAY
59550: PUSH
59551: LD_INT 2
59553: ARRAY
59554: EQUAL
59555: IFFALSE 59631
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59557: LD_ADDR_EXP 55
59561: PUSH
59562: LD_EXP 55
59566: PPUSH
59567: LD_VAR 0 5
59571: PPUSH
59572: CALL_OW 3
59576: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59577: LD_ADDR_EXP 55
59581: PUSH
59582: LD_EXP 55
59586: PPUSH
59587: LD_VAR 0 1
59591: PPUSH
59592: CALL_OW 255
59596: PUSH
59597: LD_VAR 0 1
59601: PUSH
59602: LD_VAR 0 2
59606: PUSH
59607: LD_VAR 0 3
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: PPUSH
59618: CALL 47071 0 2
59622: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59623: CALL 59690 0 0
// exit ;
59627: POP
59628: POP
59629: GO 59685
// end ; end ;
59631: GO 59470
59633: POP
59634: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59635: LD_ADDR_EXP 55
59639: PUSH
59640: LD_EXP 55
59644: PPUSH
59645: LD_VAR 0 1
59649: PPUSH
59650: CALL_OW 255
59654: PUSH
59655: LD_VAR 0 1
59659: PUSH
59660: LD_VAR 0 2
59664: PUSH
59665: LD_VAR 0 3
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: PPUSH
59676: CALL 47071 0 2
59680: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59681: CALL 59690 0 0
// end ;
59685: LD_VAR 0 4
59689: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59690: LD_INT 0
59692: PPUSH
59693: PPUSH
59694: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59695: LD_STRING resetFactoryWaypoint();
59697: PPUSH
59698: CALL_OW 559
// if factoryWaypoints then
59702: LD_EXP 55
59706: IFFALSE 59827
// begin list := factoryWaypoints ;
59708: LD_ADDR_VAR 0 3
59712: PUSH
59713: LD_EXP 55
59717: ST_TO_ADDR
// for i := 1 to list do
59718: LD_ADDR_VAR 0 2
59722: PUSH
59723: DOUBLE
59724: LD_INT 1
59726: DEC
59727: ST_TO_ADDR
59728: LD_VAR 0 3
59732: PUSH
59733: FOR_TO
59734: IFFALSE 59825
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59736: LD_STRING setFactoryWaypointXY(
59738: PUSH
59739: LD_VAR 0 3
59743: PUSH
59744: LD_VAR 0 2
59748: ARRAY
59749: PUSH
59750: LD_INT 1
59752: ARRAY
59753: STR
59754: PUSH
59755: LD_STRING ,
59757: STR
59758: PUSH
59759: LD_VAR 0 3
59763: PUSH
59764: LD_VAR 0 2
59768: ARRAY
59769: PUSH
59770: LD_INT 2
59772: ARRAY
59773: STR
59774: PUSH
59775: LD_STRING ,
59777: STR
59778: PUSH
59779: LD_VAR 0 3
59783: PUSH
59784: LD_VAR 0 2
59788: ARRAY
59789: PUSH
59790: LD_INT 3
59792: ARRAY
59793: STR
59794: PUSH
59795: LD_STRING ,
59797: STR
59798: PUSH
59799: LD_VAR 0 3
59803: PUSH
59804: LD_VAR 0 2
59808: ARRAY
59809: PUSH
59810: LD_INT 4
59812: ARRAY
59813: STR
59814: PUSH
59815: LD_STRING )
59817: STR
59818: PPUSH
59819: CALL_OW 559
59823: GO 59733
59825: POP
59826: POP
// end ; end ;
59827: LD_VAR 0 1
59831: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59832: LD_INT 0
59834: PPUSH
// if HexInfo ( x , y ) = warehouse then
59835: LD_VAR 0 2
59839: PPUSH
59840: LD_VAR 0 3
59844: PPUSH
59845: CALL_OW 428
59849: PUSH
59850: LD_VAR 0 1
59854: EQUAL
59855: IFFALSE 59882
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59857: LD_ADDR_EXP 57
59861: PUSH
59862: LD_EXP 57
59866: PPUSH
59867: LD_VAR 0 1
59871: PPUSH
59872: LD_INT 0
59874: PPUSH
59875: CALL_OW 1
59879: ST_TO_ADDR
59880: GO 59933
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59882: LD_ADDR_EXP 57
59886: PUSH
59887: LD_EXP 57
59891: PPUSH
59892: LD_VAR 0 1
59896: PPUSH
59897: LD_VAR 0 1
59901: PPUSH
59902: CALL_OW 255
59906: PUSH
59907: LD_VAR 0 1
59911: PUSH
59912: LD_VAR 0 2
59916: PUSH
59917: LD_VAR 0 3
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: PPUSH
59928: CALL_OW 1
59932: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59933: CALL 59942 0 0
// end ;
59937: LD_VAR 0 4
59941: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59942: LD_INT 0
59944: PPUSH
59945: PPUSH
59946: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59947: LD_STRING resetWarehouseGatheringPoints();
59949: PPUSH
59950: CALL_OW 559
// if warehouseGatheringPoints then
59954: LD_EXP 57
59958: IFFALSE 60084
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59960: LD_ADDR_VAR 0 3
59964: PUSH
59965: LD_EXP 57
59969: PPUSH
59970: CALL 50839 0 1
59974: ST_TO_ADDR
// for i := 1 to list do
59975: LD_ADDR_VAR 0 2
59979: PUSH
59980: DOUBLE
59981: LD_INT 1
59983: DEC
59984: ST_TO_ADDR
59985: LD_VAR 0 3
59989: PUSH
59990: FOR_TO
59991: IFFALSE 60082
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59993: LD_STRING setWarehouseGatheringPointXY(
59995: PUSH
59996: LD_VAR 0 3
60000: PUSH
60001: LD_VAR 0 2
60005: ARRAY
60006: PUSH
60007: LD_INT 1
60009: ARRAY
60010: STR
60011: PUSH
60012: LD_STRING ,
60014: STR
60015: PUSH
60016: LD_VAR 0 3
60020: PUSH
60021: LD_VAR 0 2
60025: ARRAY
60026: PUSH
60027: LD_INT 2
60029: ARRAY
60030: STR
60031: PUSH
60032: LD_STRING ,
60034: STR
60035: PUSH
60036: LD_VAR 0 3
60040: PUSH
60041: LD_VAR 0 2
60045: ARRAY
60046: PUSH
60047: LD_INT 3
60049: ARRAY
60050: STR
60051: PUSH
60052: LD_STRING ,
60054: STR
60055: PUSH
60056: LD_VAR 0 3
60060: PUSH
60061: LD_VAR 0 2
60065: ARRAY
60066: PUSH
60067: LD_INT 4
60069: ARRAY
60070: STR
60071: PUSH
60072: LD_STRING )
60074: STR
60075: PPUSH
60076: CALL_OW 559
60080: GO 59990
60082: POP
60083: POP
// end ; end ;
60084: LD_VAR 0 1
60088: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
60089: LD_INT 0
60091: PPUSH
60092: PPUSH
// if not mpSidePositions then
60093: LD_EXP 7
60097: NOT
60098: IFFALSE 60102
// exit ;
60100: GO 60173
// result :=  ;
60102: LD_ADDR_VAR 0 1
60106: PUSH
60107: LD_STRING 
60109: ST_TO_ADDR
// for i := 1 to 8 do
60110: LD_ADDR_VAR 0 2
60114: PUSH
60115: DOUBLE
60116: LD_INT 1
60118: DEC
60119: ST_TO_ADDR
60120: LD_INT 8
60122: PUSH
60123: FOR_TO
60124: IFFALSE 60154
// begin result := result & mpSidePositions [ i ] & ; ;
60126: LD_ADDR_VAR 0 1
60130: PUSH
60131: LD_VAR 0 1
60135: PUSH
60136: LD_EXP 7
60140: PUSH
60141: LD_VAR 0 2
60145: ARRAY
60146: STR
60147: PUSH
60148: LD_STRING ;
60150: STR
60151: ST_TO_ADDR
// end ;
60152: GO 60123
60154: POP
60155: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
60156: LD_STRING setMultiplayerRealPosition("
60158: PUSH
60159: LD_VAR 0 1
60163: STR
60164: PUSH
60165: LD_STRING ");
60167: STR
60168: PPUSH
60169: CALL_OW 559
// end ;
60173: LD_VAR 0 1
60177: RET
